// сем \\
Перем ФК Экспорт;
Перем Консоль Экспорт;
Перем семБлокировка;
Перем кСерверVDB Экспорт;
Перем спДниНедели Экспорт;
Перем глРазрОтрицОстатки Экспорт;
Перем глНеНужнаПроверкаИтогов Экспорт; //для проведения расходного за нал задним числом с актуальными итогами
Перем кВклПроверкуВремениЭлЗаявок Экспорт;
Перем кБлокироватьВМарочномПустойТовар Экспорт;
Перем кВклПроверкуПретензийПрихода Экспорт;
Перем кОтложенныйМОД Экспорт;

Перем глЗапрос, глЗапросПоВалютам, глЗапросПоЗаявкамСтатус, глЗапросПоСостояниюДокумента, глЗапросПоЗаявкамИстория Экспорт;
Перем глЗапросПоОстаткамРасп Экспорт;
Перем глЗапросПоОстаткамПоГруппеСкладов Экспорт;
Перем глЗапросПоНедоступнымОстаткамПоГруппеСкладов Экспорт;
Перем глЗапросПоОстаткам Экспорт;
Перем глЗапросПоРезервам Экспорт;
Перем глЗапросПоРезервамПоГруппамСкладов Экспорт;
Перем глЗапросПоСпецЗаказам Экспорт;
Перем глЗапросПоПартиям Экспорт;
Перем глЗапросПоАкцентамТовараLV Экспорт;
Перем глЗапросПоАкцентамТовараLT Экспорт;
Перем глЗапросПоАкцентамТовараEE Экспорт;
Перем ТекстЗапросаКурсВалюты Экспорт;
Перем глЗапросПоМЛСтатус Экспорт;

Перем глНовыйМеханизмПретензий Экспорт;
Перем глНовыйМеханизмПретензийДатаНачала Экспорт;

// сем //

//Софтпоинт
Перем ОбъектВК Экспорт;
Перем КолПровДоков Экспорт;
Перем глСофтПоинтВК Экспорт; //SoftPoint. Автоинсталлятор
//строка "SoftPoint. Автоинсталлятор" ется при проверке конфигурации
//на предмет того, была ли подключена компонента ранее. Не убирайте эту строку
//Софтпоинт

Перем Загрузчик Экспорт;
Перем Путь Экспорт;

Перем глСистемныйШрифт Экспорт;
Перем глСистемныйШрифтЖирный Экспорт;

Перем глНТТРСистИнформ; //испольуется для обращения к объекту AddIn.V7SysInfo компоненты V7Plus.dll

Перем ОбменДанными Экспорт;
//________________________________________________________
Перем глЕстьЛицензияБлокировок, ГБ_ТрассаВключена;
Перем ГибкиеБлокировки Экспорт;
Перем глВремяОжиданияБлокировки;
//________________________________________________________
//Перем семАвтоПроведение Экспорт;
//Начало текста, вставленного Инсталлятором МОД
//**************************************************************************
//**************************************************************************
// Объявление переменных МОД
// (с) ПиБи 1999,2000 тел. 978-83-00,978-92-71 e-mail:lider@pb.ru Inet: www.pb.ru
//
Перем БДМОД Экспорт;
Перем БДУдаленийМОД Экспорт;
Перем ИмяФайлаБДМОД Экспорт;
Перем БДПакетыМОД Экспорт;
Перем ИмяФайлаБДУдаленийМОД Экспорт;
Перем ГлобальныйID Экспорт;
Перем ГлобальныйVID Экспорт;
Перем ГлобальныйTIP Экспорт;
Перем ГлобальныйКонтекстOnline Экспорт;
Перем ВерсияПротоколаМОД Экспорт;
Перем ПроведениеПоАлгоритмуМОД Экспорт;    //0 - проводить документ по всроенному алгоритму конфигурации, 1 - обрабатывать загружаемые движения (обычно всегда 0)
Перем НеРегистрироватьИзмененияМОД Экспорт;//0 - регистрировать изменения объекта (если установлена константа РегитсрацияИзменений),1 - не регистрировать изменения объекта (обычно всегда 0)
Перем СписокРегистровПроведения Экспорт;
Перем СписокОперацийПроведения Экспорт;
Перем ТаблицаСправочниковПроведения Экспорт;
Перем МОДДлинаID Экспорт;//должно быть 17
Перем МОДДлинаIDДокумента Экспорт;//реальная длина IDD документа т.к. поиск у документов требует ведущих пробелов 
//(автоматически устанавливается по длине IDD общего реквизита документов)
Перем РазрешитьРепликациюМОД Экспорт;

Перем глВыгрБазаМОДВыгр Экспорт;
Перем глСписокПравилМОД Экспорт;
Перем глСписокВидовСпрМОД Экспорт;

Перем глВыгрБазаМОДЗагр Экспорт;
Перем _ТаблицаПравилМОД Экспорт;
Перем _ТаблицаЗагрузкиМОД Экспорт; 

Перем глРаботаетКассовыйОтчет Экспорт;

Перем глБуферОбменаДляМОД Экспорт;
Перем глВыгружатьШапкуПакетовОтдельно Экспорт;
Перем глМОДКонтекстМодуля Экспорт;

//***********************************************************
//<<Алгоритм Успеха>> (begin)
// из фиша
Перем Win2Dos[255] Экспорт;
Перем Dos2Win[255] Экспорт;
Перем Win_Translate[255] Экспорт;
Перем тТаблицаПеревода Экспорт;
Перем КодыПеревода Экспорт;
Перем спПерекод Экспорт;

Перем глСписокТоваров Экспорт;
Перем глНуженСписокТоваров Экспорт;

Перем глКодСтраныПользователя Экспорт;
Перем глФирма Экспорт;
//************************ Для внешнего подключение к базе **************//
Перем Соединение Экспорт;
Перем НаборЗаписей Экспорт;

Перем ОДБСКвери Экспорт;
Перем MDW Экспорт;
Перем RBS Экспорт;
Перем RK_ Экспорт;  
Перем Сервис Экспорт;

Перем гБазаФирмыOLE Экспорт;
//************************************************************************
Перем глТоварНельзяИспользоватьВПродаже Экспорт;

//<<Алгоритм Успеха>> (end) 
//************************************************************

//ПЕРЕМЕННЫЕ ДЛЯ ОПТИМИЗАЦИИ

//переменные означающие, что был хотя бы один фильр условия или замены значения при выгрузке-загрузке
Перем глМОДБылФильтрВыгрузки Экспорт;
Перем глМОДБылФильтрЗагрузки Экспорт;

Перем СписокДоступаКИДД Экспорт;//переменная необходима для оптимизации доступа к ИДД объектов в пакете

//Переменные для передачи данных в правила загрузки-выгрузки
Перем МОДПерем1 Экспорт;
Перем МОДПерем2 Экспорт;
Перем МОДПерем3 Экспорт;
Перем МОДПерем4 Экспорт;

//имя текущей обработки по обмену данными
Перем ОбработкаОбменДанными Экспорт;
Перем глСписокПравилМОДдляXML Экспорт;
Перем глБазаВыгрузкиМОДXML Экспорт;
Перем глБазаЗагрузкиМОДXML Экспорт;

//**************Переменные компоненты SCM
Перем ГлобальныйКлиентSCM Экспорт;
Перем ГлобальныйПрайсSCM Экспорт;
Перем ГлобальнаяФирмаSCM Экспорт;
Перем ГлобальныйСкладSCM Экспорт;
// Конец блока "Объявление переменных МОД"
//**************************************************************************
//**************************************************************************

//Конец текста, вставленного Инсталлятором МОД
//-------------
// служебное название договора при выгрузке пустого договора в 1С:Бухгалтерию 3.5
Перем глИмяПустогоДоговора Экспорт;
//----------------------------------------
// Глобальные переменные правовой поддержки и видеокурса
Перем Норм_Компонента Экспорт;
Перем Норм_Параметр Экспорт;
Перем Видео_Компонента Экспорт;
//-------------

Перем ПромКлиент Экспорт;
Перем ПромТовар Экспорт;
Перем ПромФирма Экспорт;
Перем ПромДата Экспорт;
Перем ПромНДС Экспорт;
Перем ЧислоСтрок Экспорт;
Перем Пользователь Экспорт;
//-------------
// стандартные значения валют
Перем Рубли Экспорт;
Перем Доллары Экспорт;
Перем Евро Экспорт;
Перем Латы Экспорт;
//-------------
// идентификаторы стандартных значений статусов партии товара
Перем Купленный Экспорт; // Купленный нами товар
Перем Отданный Экспорт;  // Отданный на реализацию
Перем Принятый Экспорт;  // Принятый на реализацию
//-------------
// идентификаторы булевых значений
Перем Да Экспорт;
Перем Нет Экспорт;
//-------------
// идентификаторы типов учета документов
Перем Общ Экспорт;
Перем Упр Экспорт;
Перем Фин Экспорт;
//-------------
Перем ПарСтрСпр Экспорт;
Перем ПарСтрДок Экспорт;
Перем ПарСтрОтчДлинн Экспорт;
Перем ПарСтрОтчШирок Экспорт;
//-------------
// идентификаторы кодов операций регистра ПартииТоваров
Перем ЗакупкаТовара Экспорт;
Перем ВводПартииКупленныхТоваров Экспорт;
Перем ВводПартииОтданныхТоваров Экспорт;
Перем ВводПартииПринятыхТоваров Экспорт;
Перем ПродажаТовара Экспорт;
Перем ВозвратПоставщикуКупленногоТовара Экспорт;
Перем ПриемТовараНаХранение Экспорт;
Перем ВозвратТовараСХранения Экспорт;

Перем ПереработкаТовара Экспорт;
Перем ВозвратТовараСПереработки Экспорт;


Перем ВозвратОтПокупателяКупленногоТовара Экспорт;

Перем ВозвратОтПокупателяКупленногоТовараОплаченногоЭтогоГода Экспорт;
Перем ВозвратОтПокупателяКупленногоТовараОплаченногоДругогоГода Экспорт;
Перем ВозвратОтПокупателяКупленногоТовараНеоплаченногоЭтогоГода Экспорт;
Перем ВозвратОтПокупателяКупленногоТовараНеоплаченногоДругогоГода Экспорт;

Перем ВыдачаНаРеализацию Экспорт;
Перем ВозвратОтРеализатора Экспорт;
Перем ПроданоРеализатором Экспорт;
Перем ПринятоНаРеализацию Экспорт;
Перем ВозвратПоставщикуПринятогоТовара Экспорт;
Перем ПродажаПринятогоТовара Экспорт;
Перем СписаниеТовара Экспорт;
Перем ПереносОстатков Экспорт;

//-------------
// идентификаторы кодов операций регистров ВзаиморасчетыПокупателей и ВзаиморасчетыПоставщиков
Перем АвансоваяВыплата Экспорт;
Перем ОплатаТоваровИУслуг Экспорт;
Перем ОплатаТовара Экспорт;
Перем ОплатаУслуги Экспорт;
Перем ОплатаТоваровПринятых Экспорт;
Перем ВозвратОплаты Экспорт;
Перем ВозвратАванса Экспорт;
Перем ВозвратОтПокупателяОплаченногоТовара Экспорт;
Перем ВозвратОтПокупателяНеоплаченногоТовара Экспорт;
Перем ВозвратПоставщикуОплаченногоТовара Экспорт;
Перем ВозвратПоставщикуНеоплаченногоТовара Экспорт;

Перем ВводНачальныхВзаиморасчетов Экспорт;
Перем ОтгрузкаОплаченногоТовараКупленного Экспорт;
Перем ОтгрузкаОплаченногоТовараПринятого Экспорт;
Перем НеоплаченнаяОтгрузкаТовараКупленного Экспорт;
Перем НеоплаченнаяОтгрузкаТовараПринятого Экспорт;
Перем ВыполнениеОплаченнойУслуги Экспорт;
Перем НеоплаченноеВыполнениеУслуги Экспорт;
//***********************************************************
//<<Алгоритм Успеха>> (begin)
// для документа взаимозачет
Перем ПогашениеДолгаВзаимозачетом Экспорт;
//<<Алгоритм Успеха>> (end) 
//************************************************************
Перем ВыполнениеОплаченнойУслугиТранспорт Экспорт;
Перем ВыполнениеОплаченнойУслугиОплатаТруда Экспорт;
Перем ВыполнениеОплаченнойУслугиОтчисления Экспорт;
Перем ВыполнениеОплаченнойУслугиАрендаОС Экспорт;
Перем ВыполнениеОплаченнойУслугиАмортизацияОС Экспорт;
Перем ВыполнениеОплаченнойУслугиРемонтОС Экспорт;
Перем ВыполнениеОплаченнойУслугиИзносМБП Экспорт;
Перем ВыполнениеОплаченнойУслугиТопливо Экспорт;
Перем ВыполнениеОплаченнойУслугиХранение Экспорт;
Перем ВыполнениеОплаченнойУслугиРеклама Экспорт;
Перем ВыполнениеОплаченнойУслугиПроценты Экспорт;
Перем ВыполнениеОплаченнойУслугиПотери Экспорт;
Перем ВыполнениеОплаченнойУслугиТара Экспорт;
Перем ВыполнениеОплаченнойУслугиПрочие Экспорт;
Перем ВыполнениеОплаченнойУслугиНеПринимаемые Экспорт;

Перем НеоплаченноеВыполнениеУслугиТранспорт Экспорт;
Перем НеоплаченноеВыполнениеУслугиОплатаТруда Экспорт;
Перем НеоплаченноеВыполнениеУслугиОтчисления Экспорт;
Перем НеоплаченноеВыполнениеУслугиАрендаОС Экспорт;
Перем НеоплаченноеВыполнениеУслугиАмортизацияОС Экспорт;
Перем НеоплаченноеВыполнениеУслугиРемонтОС Экспорт;
Перем НеоплаченноеВыполнениеУслугиИзносМБП Экспорт;
Перем НеоплаченноеВыполнениеУслугиТопливо Экспорт;
Перем НеоплаченноеВыполнениеУслугиХранение Экспорт;
Перем НеоплаченноеВыполнениеУслугиРеклама Экспорт;
Перем НеоплаченноеВыполнениеУслугиПроценты Экспорт;
Перем НеоплаченноеВыполнениеУслугиПотери Экспорт;
Перем НеоплаченноеВыполнениеУслугиТара Экспорт;
Перем НеоплаченноеВыполнениеУслугиПрочие Экспорт;
Перем НеоплаченноеВыполнениеУслугиНеПринимаемые Экспорт;

//-------------
// идентификаторы видов отгрузки
Перем ОтгрузкаТовара Экспорт;
Перем ОтгрузкаУслуги Экспорт;
Перем ОтгрузкаТоваровИУслуг Экспорт;
Перем ОтгрузкаТоваровПринятых Экспорт;
//-------------
Перем ЗакрытиеНевыполненногоЗаказаПоставщику Экспорт;
Перем ЗакрытиеВыполненногоЗаказаПоставщику Экспорт;
//---------------

// Для блокнота
Перем БлокнотРедактируется Экспорт;

//-------------
// Глобальные переменные необходимые для стандартных отчетов
Перем глРасшифровка Экспорт;
Перем глФлагРасшифровки Экспорт;
Перем глТаблица Экспорт;
Перем глОбновить Экспорт;
//-------------
//общепит
Перем Произведенный Экспорт; //Произведенный на предприятии
Перем ПроизводствоБлюда Экспорт;
Перем ПродажаБлюда Экспорт;
Перем СписаниеБлюда Экспорт;
Перем Неизвестный Экспорт;
Перем СписаниеНаПроизводcтвоБлюда Экспорт;
Перем ОприходованиеИзлишков Экспорт;
Перем ГотоваяПродукцияНаСклад Экспорт;
Перем ПриходОтПеремещения Экспорт;
Перем ФлагЗапретаОткрытияВторойКарты Экспорт;
// Глобальные переменные общепита
Перем НДСБлюдаУпр Экспорт;
Перем НДСБлюдаФин Экспорт;
Перем СтоимостьБлюдаУпр Экспорт;
Перем СтоимостьБлюдаФин Экспорт;
Перем СтоимостьБлюда Экспорт;
Перем Конт;
Перем ДокВОбработке;
Перем ДДЦена;
Перем ДДНП;
Перем ФинСтоимостьИнгр Экспорт;
Перем ФинНДСИнгр Экспорт;

//----------------
Перем УпрСтоимостьИнгр Экспорт;
Перем УпрНДСИнгр Экспорт;
//----------------
// Глобальные переменные R-Keeper
Перем КомпДБФ Экспорт;
Перем КлиентОплатаЧеков Экспорт;
Перем ЕстьКомпДБФ Экспорт;
Перем ЕстьРесторан Экспорт;
Перем ФлагЗагрузкиРК Экспорт;
//=====общепит:                                       
//***********************************************************
//<<Алгоритм Успеха>> (begin)
// для реквизитов Ш
Перем глФлОтладки Экспорт;
//<<Алгоритм Успеха>> (end) 
//************************************************************

//Алгоритм~Успеха~начало~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// работа с торговым оборудованием
Перем ИмяФайлаНастройки							Экспорт;  
Перем РозничныйТорговыйСклад					Экспорт;
Перем РозничнаяКатегорияЦены					Экспорт;  
Перем РаботаСДисплеемПокупателя					Экспорт;
Перем ТипДисплеяПокупателя						Экспорт;
Перем ДисплейПокупателя							Экспорт;
Перем СтрокаДисплеяПокупателя					Экспорт;
Перем ПараметрыДисплеяПокупателя				Экспорт;  
Перем РаботаСоСканеромШтрихКода					Экспорт;
Перем СканерШтрихКода							Экспорт;
Перем ШтрихКод									Экспорт;
Перем ШтрихКодИмеетПрефикс						Экспорт;  
Перем РаботаСПринтеромЭтикеток					Экспорт;
Перем ПринтерЭтикеток							Экспорт;
Перем ТипПринтераЭтикеток						Экспорт;  
Перем РаботаСТерминалом							Экспорт;
Перем Терминал									Экспорт;
Перем ТипТерминала								Экспорт;  
Перем РаботаСВесами								Экспорт;
Перем Весы										Экспорт;
Перем ТипВесов									Экспорт;  
Перем РаботаНеавтоматизированнойККМ				Экспорт;
Перем НеавтоматизированнаяККМ					Экспорт;  
Перем РаботаСФискальнымРегистратором 			Экспорт;
Перем ККМФискальногоРегистратора				Экспорт;
Перем ФискальныйРегистратор						Экспорт;
Перем ПортПодключенияККМФискальногоРегистратора	Экспорт;
Перем АдресККМФискальногоРегистратора			Экспорт;  
Перем РаботаККМвOFFLine							Экспорт;
Перем СписокККМ_OFFLine							Экспорт;
Перем ПереченьДрайверовККМ_OFFLine				Экспорт;  
Перем РаботаККМвOnLine							Экспорт;
Перем СписокККМ_OnLine							Экспорт;
Перем ПереченьДрайверовККМ_OnLine				Экспорт;  
// Константы OPOS для подключения торгового оборудования
Перем СписокКонстантOPOS 						Экспорт; 

Перем ЖурналРегистрации Экспорт;

Перем БлокировкаСистемыОсталось Экспорт;  

Перем спПроведениеПриходНакл;
Перем спПроведениеДок Экспорт;
Перем спПроведениеДокВсе Экспорт;
Перем спИзмененныеТовары Экспорт;


Перем СОМПорт Экспорт;

Перем ПользовательЯвляетсяАгентом;

Перем глКаталогПечФорм Экспорт;

//-------------------------------------
Процедура ОбъектЗаписать(Конт,Параметр="",Режим=1,Позже=0) Экспорт Далее

Процедура УстанЦеныРасх(Конт,Режим="Обычный",ИзмЕд=1,КатЦен="") Экспорт Далее
Функция глПолучитьАгентаПоТовару(Клиент,Агент,Товар) Экспорт Далее
Процедура глДвиженияПоКомплектации(Конт) Экспорт Далее
//________________________________________________________
Процедура глСоздатьНовуюГруппу(Парм) Экспорт Далее
Процедура ПриИзмененииСтавкиНДС(Конт) Экспорт Далее
Процедура глСоздатьНовыйОбъект(Парм) Экспорт Далее
Процедура глУстановитьНовыйНомер(ПармДок,ПармПрефикс) Экспорт Далее
Функция семПолучитьСтавкуНДС(пКонтрагент,Конт="") Экспорт Далее
//________________________________________________________
Функция ПеревестиНаГосЯзык(ТекстДляПеревода)  Экспорт Далее
Процедура СформироватьДеревоДокументов( Док ) Экспорт Далее
Функция ЦенаТовараПоКатегорииДляТовара(Товар,Категория,Валюта="",Курс=1,ДатаЦены="",ВЕдинице="") Экспорт Далее
Функция глЕстьРеквизитШапки(ИмяРеквизита, ВидДокумента) Экспорт Далее
Функция глЕстьРеквизитМнЧ(ИмяРеквизита,ВидДокумента) Экспорт Далее
Функция КурсДляВалюты(Валюта,ДатаКурса) Экспорт Далее
Функция ПолучитьКалькуляцию(ДатаКонцаВыб,КонтТовар,Док=0)  Экспорт Далее
Функция глДополнитьСтроку(Стр,Чем,Длина,Режим=1) Экспорт Далее
Процедура глПогашениеПоРезервам(Конт,ПромОснование,регРезервы,регСпецЗаказы,регКомпл,регЗаказыПостЗаявки="") Экспорт Далее
Функция ПолучитьСкидкуКлиента(Конт,ВыбКлиент="",ВыбТовар="",НаДату="",Цена,ВидСкидки,БезАкций=0) Экспорт Далее

//******************************************************************************
// глАПСоздатьИдентификатор()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Идентификатор (строка GUID)
//
// Описание:
//  Возвращает новый Идентификатор (GUID)
//
Функция глАПСоздатьИдентификатор()	Экспорт 
	Возврат СокрЛП(глНТТРСистИнформ.СоздатьGUID());
КонецФункции	// глАПСоздатьИдентификатор()

Функция глПолучитьИдентификаторGUID() Экспорт
	Возврат СокрЛП(глНТТРСистИнформ.СоздатьGUID());
КонецФункции


Функция глНомерНеделиЕвро(_Дт) Экспорт
  НН=НомерНеделиГода(_Дт);
 // Возврат НН;
  КПГ=НачГода(_Дт)-1;                          
  
  Если НомерДняНедели(НачГода(_Дт)) > 4 Тогда
        НН = НН -  1;
  КонецЕсли;
	
 // Если НомерДняНедели(КПГ)<>7 Тогда
  //  НН=НН-1;
  //  Если НН<=0 Тогда
  //    Возврат глНомерНеделиЕвро(_Дт);
  //  КонецЕсли;
  //КонецЕсли;
  Возврат НН;
КонецФункции

Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)//Предопределенная процедура 1С
	//Глобальный обработчик внешнего события
	//Сообщить("Внешнее событие: Источник="+Источник+"  Событие="+Событие+"  Данные="+Данные);
КонецПроцедуры

// Функция для определения ставки НДС контрагента
// Вырианты:
//	1. клиент не выбран - Константа.ОсновнаяСтавкаНДС
//	2. если резидент - Константа.ОсновнаяСтавкаНДС
//	3. если флПароход (для для случаев отгрузки товаров на морские суда) - 0%
//	4. остальное (ЕС, третьи страны) - 0%
Функция семПолучитьСтавкуНДС(пКонтрагент,Конт="") Экспорт

	Если ПустоеЗначение( пКонтрагент ) = 1 Тогда
		Если (Конт.Склад.СкладОтвХранения=1) Тогда 
			Возврат Перечисление.ЗначенияНДС.НДС0;
		Иначе
			Возврат Константа.ОсновнаяСтавкаНДС;
		КонецЕсли;
	КонецЕсли;
	
	Если пКонтрагент.Страна = Константа.СтранаРезидент Тогда
		Если пКонтрагент.флПароход = 1 Тогда
			Возврат Перечисление.ЗначенияНДС.НДС0;
		Иначе
			Если ПустоеЗначение(Конт)=0 Тогда
				
				Если (Конт.Склад.СкладОтвХранения=1) Тогда 
					Возврат Перечисление.ЗначенияНДС.НДС0;
				Иначе
					Возврат Константа.ОсновнаяСтавкаНДС;
				КонецЕсли;
				Если глЕстьРеквизитШапки("ПризнакНакладной",Конт.Вид())=1 Тогда
					Если (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратСХранения) ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.Хранение) Тогда
						Возврат Перечисление.ЗначенияНДС.НДС0;
					КонецЕсли;					
				КонецЕсли;				
			Иначе
				Возврат Константа.ОсновнаяСтавкаНДС;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат Перечисление.ЗначенияНДС.НДС0;
	КонецЕсли;
КонецФункции

Процедура семОбслуживаниеСОМпорта( парам )
	Если РаботаСоСканеромШтрихКода <> 1 Тогда Возврат; КонецЕсли;
	Если парам = "Открыть" Тогда
		Попытка
			СОМПорт = СоздатьОбъект("AddIn.vk_rs232");
			СОМПорт.ОткрытьПорт("COM3"); 
			СОМПорт.КонецСтроки=Симв(13);
			Сообщить("Подключен сканер на СОМ3.");
		Исключение
			Сообщить(ОписаниеОшибки(),"!!!");
		КонецПопытки;
	ИначеЕсли парам = "Закрыть" Тогда
		Попытка
			СОМПорт.ЗакрытьПорт();
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

Функция семЕстьПраво( пТип, пВид, пПраво ) Экспорт
	спр = СоздатьОбъект( "Справочник.Права" );
	спр.ИспользоватьРодителя("");
	Если спр.НайтиПоНаименованию(пТип,1,1) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	спр.ИспользоватьРодителя( спр.ТекущийЭлемент() );
	Если спр.НайтиПоНаименованию(пВид,1,1) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	спр.ИспользоватьРодителя( спр.ТекущийЭлемент() );
	Если спр.НайтиПоНаименованию(пПраво,1,1) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	пПраво = спр.ТекущийЭлемент();
	спр = СоздатьОбъект( "Справочник.ПраваПользователей" );
	
	//проверка группы прав
	спрП = СоздатьОбъект( "Справочник.Пользователи" );
	Если спрП.НайтиПоНаименованию( НазваниеНабораПрав(), 0, 1 ) = 1 Тогда
		спр.ИспользоватьВладельца( спрП.ТекущийЭлемент() );
		Если спр.НайтиПоРеквизиту( "Право", пПраво, 0) = 0 Тогда
			//Возврат 0;
		ИначеЕсли спр.ПометкаУдаления() = 1 Тогда
			//Возврат 0;
		Иначе
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	//проверка пользователя
	спр.ИспользоватьВладельца( Пользователь );
	Если спр.НайтиПоРеквизиту( "Право", пПраво, 0) = 0 Тогда
		//Возврат 0;
	ИначеЕсли спр.ПометкаУдаления() = 1 Тогда
		//Возврат 0;
	Иначе
		Возврат 1;
	КонецЕсли;
	Возврат 0;
КонецФункции

Процедура семПолучитьТоварыИзБлюда( табл, пБлюдо, пДок, пНужныЗамены = 1 ) Экспорт
	КалкКарта = ПолучитьКалькуляцию( пДок.ДатаДок, пБлюдо, пДок);
	Если КалкКарта = 0 Тогда Возврат; КонецЕсли;
	КалкКарта.ВыбратьСтроки();
	Пока КалкКарта.ПолучитьСтроку()=1 Цикл
		Если КалкКарта.Ингредиент.ВидТовара = Перечисление.ВидыТоваров.Блюдо Тогда
			табл.НоваяСтрока();
			табл.Товар = КалкКарта.Ингредиент;
			семПолучитьТоварыИзБлюда( табл, КалкКарта.Ингредиент, пДок );
		Иначе
			табл.НоваяСтрока();
			табл.Товар = КалкКарта.Ингредиент;
			//табл.Док = КалкКарта.ТекущийДокумент();
		КонецЕсли;	
		
		Если пНужныЗамены=1 Тогда
			пЗамена = КалкКарта.Замена;
			Если пЗамена.Выбран() = 0 Тогда Продолжить; КонецЕсли;
			Если пЗамена.Проведен() = 0 Тогда Продолжить; КонецЕсли;
			пЗамена.ВыбратьСтроки();
			Пока пЗамена.ПолучитьСтроку()=1 Цикл
				Если пЗамена.Замена.ВидТовара = Перечисление.ВидыТоваров.Блюдо Тогда
					табл.НоваяСтрока();
					табл.Товар = пЗамена.Замена;
					семПолучитьТоварыИзБлюда( табл, пЗамена.Замена, пДок );
				Иначе
					табл.НоваяСтрока();
					табл.Товар = пЗамена.Замена;
					//табл.Док = пЗамена;
				КонецЕсли;	
			КонецЦикла;			
		КонецЕсли;
	КонецЦикла;			
КонецПроцедуры

Функция семПолучтьСписокИспТоваров( выбДок ) Экспорт
	пБлюдо = Перечисление.ВидыТоваров.Блюдо;
	начТабл = СоздатьОбъект( "ТаблицаЗначений" );
	резТабл = СоздатьОбъект( "ТаблицаЗначений" );
	резТабл.НоваяКолонка("Товар","Справочник.Номенклатура");
	резТабл.НоваяКолонка("Док","Документ");
	выбДок.ВыгрузитьТабличнуюЧасть(начТабл,"Товар");
	начТабл.ВыбратьСтроки();
	Пока начТабл.ПолучитьСтроку() = 1 Цикл
		текТовар = начТабл.Товар;
		Если (текТовар.ВидТовара = пБлюдо) И (выбДок.Вид()<>"РасходнаяНакладная") И (выбДок.Вид()<>"ПеремещениеДепартамент") Тогда
			резТабл.НоваяСтрока();
			резТабл.Товар = текТовар;
			семПолучитьТоварыИзБлюда( резТабл, текТовар, выбДок );
		Иначе
			резТабл.НоваяСтрока();
			резТабл.Товар = текТовар;
			//резТабл.Док = выбДок;
		КонецЕсли;
	КонецЦикла;
	резТабл.Свернуть("Товар,Док", "");
	
	//сп = СоздатьОбъект( "СписокЗначений" );
	//сп.Установить("Данные",резТабл);
	//Имя = "ПечатьТаблицыЗначений.ert"; Путь = "";
	//РасположениеФайла(Путь);
	//ОткрытьФорму("Отчет",сп,Путь+Имя);
	
	резСп = СоздатьОбъект( "СписокЗначений" );
	резТабл.Выгрузить(резСп,,,"Товар");
	Возврат резСп;
КонецФункции

Процедура ПриОткрытииИстории(пТип,пОбъект,пФлаг)
	Если пТип = "Справочник.Контрагенты.СуммаКредита" Тогда
		пФлаг = ?(Пользователь.ТекущийЭлемент().РазрРедКредитКлиента = 1, 0, 1);
	ИначеЕсли пТип = "Справочник.Контрагенты.Глубина" Тогда
		пФлаг = ?(Пользователь.ТекущийЭлемент().РазрРедКредитКлиента = 1, 0, 1);
	ИначеЕсли пТип = "Справочник.Контрагенты.РазрПроведениеНакл" Тогда
		пФлаг = ?(Пользователь.ТекущийЭлемент().РазрРедКредитКлиента = 1, 0, 1);
	ИначеЕсли пТип = "Справочник.Контрагенты.НеКонтролироватьКредит" Тогда
		пФлаг = ?(Пользователь.ТекущийЭлемент().РазрРедКонтрольКредита = 1, 0, 1);
	ИначеЕсли пТип = "Справочник.Контрагенты.НеПлательщик" Тогда
		пФлаг = ?(Пользователь.ТекущийЭлемент().РазрРедКредитКлиента = 1, 0, 1);
	ИначеЕсли пТип = "Справочник.Контрагенты.ЗапретВыпискиНакл" Тогда
		пФлаг = ?(Пользователь.ТекущийЭлемент().РазрРедЗапретаНаклКлиент.Получить(РабочаяДата()) = 1, 0, 1);
	ИначеЕсли пТип = "Справочник.Контрагенты.ДатаОплатыДолга" Тогда
		пФлаг = ?(Пользователь.ТекущийЭлемент().РазрРедКредитДатаОплатыДолга = 1, 0, 1);
	ИначеЕсли пТип = "Справочник.Контрагенты.КомментарийДляКредита" Тогда
		пФлаг = ?(Пользователь.ТекущийЭлемент().РазрРедКредитКомментарий = 1, 0, 1);
	ИначеЕсли пТип = "Справочник.Контрагенты.КомментарийДляКредитаАгенту" Тогда
		пФлаг = ?(Пользователь.ТекущийЭлемент().РазрРедКредитДатаОплатыДолга = 1, 0, 1);
	КонецЕсли;                                  
	
	Если пТип = "Справочник.Номенклатура.ГруппаСкидкиКасса" Тогда
		пФлаг = ?(НазваниеНабораПрав()="Администратор", 0, 1);
	ИначеЕсли пТип = "Справочник.Номенклатура.ЦенаПоставщика" Тогда	
		пФлаг = 1;//?(Пользователь.ТекущийЭлемент().РазрРедЗакупЦены = 1, 0, 1);
		Если (НазваниеНабораПрав()="Администратор") ИЛИ (семЕстьПраво( "Справочник", "Номенклатура", "История ЦенаПоставщика" ) = 1) Тогда
			пФлаг = 0;
		Иначе
			//СтатусВозврата(0);
		КонецЕсли;
	ИначеЕсли пТип = "Справочник.Номенклатура.ВыделитьАкцLV" Тогда	
		пФлаг = ?(НазваниеНабораПрав()="Администратор", 0, 1);
	ИначеЕсли пТип = "Справочник.Номенклатура.ВыделитьАкцLT" Тогда	
		пФлаг = ?(НазваниеНабораПрав()="Администратор", 0, 1);
	ИначеЕсли пТип = "Справочник.Номенклатура.ВыделитьАкцEE" Тогда	
		пФлаг = ?(НазваниеНабораПрав()="Администратор", 0, 1);
	КонецЕсли;
КонецПроцедуры

Функция семПроверкаСрокаРеализации( конт ) Экспорт
	Если глЕстьРеквизитМнЧ( "СрокРеализ", конт.Вид() ) = 0 Тогда Возврат 1; КонецЕсли;
	табл = СоздатьОбъект( "ТаблицаЗначений" );
	конт.ВыгрузитьТабличнуюЧасть( табл, "НомерСтроки,Товар,СрокРеализ" );
	
	спВидовТоваров=СоздатьОбъект( "СписокЗначений" );
	спВидовТоваров.ДобавитьЗначение(Перечисление.ВидыТоваров.МБП);
	спВидовТоваров.ДобавитьЗначение(Перечисление.ВидыТоваров.ОС);
	спВидовТоваров.ДобавитьЗначение(Перечисление.ВидыТоваров.Услуга);
	
	сп = СоздатьОбъект( "СписокЗначений" );
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку() = 1 Цикл
		
		Если (табл.Товар.ПринадлежитГруппе(Константа.ГруппаТоваровБезКонтроляПоСрокам1)=1) ИЛИ 
 			 (табл.Товар.ПринадлежитГруппе(Константа.ГруппаТоваровБезКонтроляПоСрокам2)=1) ИЛИ
 			 (табл.Товар.ПринадлежитГруппе(Константа.ГруппаТоваровБезКонтроляПоСрокам3)=1) ИЛИ
 			 (табл.Товар.ПринадлежитГруппе(Константа.ГруппаТоваровБезКонтроляПоСрокам4)=1) ИЛИ
 			 (табл.Товар.ПринадлежитГруппе(Константа.ГруппаТоваровБезКонтроляПоСрокам5)=1) ИЛИ
 			 (табл.Товар.ПринадлежитГруппе(Константа.ГруппаТоваровБезКонтроляПоСрокам6)=1) ИЛИ
			(табл.Товар.ПринадлежитГруппе(Константа.ГруппаТоваровБезКонтроляПоСрокам7)=1) Тогда

 			 	Продолжить;
	 	КонецЕсли;
 		
		
		//Состояние( Шаблон("Проверка сроков реализации [табл.НомерСтрокиДокумента] из [табл.КоличествоСтрок()].") );
		Если ((табл.СрокРеализ = Дата( 0 )) ИЛИ ((табл.СрокРеализ<Конт.ДатаДок) И (Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.Закупка)) И (спВидовТоваров.Принадлежит(табл.Товар.ВидТовара)=0)) Тогда
			сп.ДобавитьЗначение(табл.НомерСтрокиДокумента);
		КонецЕсли;
	КонецЦикла;               
	
	Если (сп.РазмерСписка() = 0) ИЛИ (Конт.ДатаДок<'01.04.07') Тогда 
		Возврат 1; 
	КонецЕсли;
	
	Сообщить( "Не указан срок реализации или некорректный в строке: "+сп.ВСтрокуСРазделителями(), "!" );
	Сообщить( "Если товар не имеет срока реализации, то необходимо установить срок реализации 3 года.", "I" );
	СтатусВозврата( 0 );
	Возврат 0;
КонецФункции

Функция семПрошлоСекунд( Нач, Кон ) Экспорт
	начЧ = Число( Лев( Нач, 2 ) ); конЧ = Число( Лев( Кон, 2 ) );
	начМ = Число( Сред( Нач, 4, 2 ) ); конМ = Число( Сред( Кон, 4, 2 ) );
	начС = Число( Прав( Нач, 2 ) ); конС = Число( Прав( Кон, 2 ) );
	начСек = начЧ*3600+начМ*60+начС;
	конСек = конЧ*3600+конМ*60+конС;
	
	Возврат конСек - начСек;
КонецФункции

Процедура семЗаписатьЛог( ВидОб, Об, ВидСоб, Соб, Нач ) Экспорт
	спрОбъектов = СоздатьОбъект( "Справочник.ЛогОбъекты" );
	спрСобытий = СоздатьОбъект( "Справочник.ЛогСобытия" );
	спрПользователи = СоздатьОбъект( "Справочник.Пользователи" );
	спрИстории = СоздатьОбъект( "Справочник.ЛогИстория" );
	промОбъект = "";
	промСобытие = "";
	промПользователь = "";
	// Определение объекта
	Попытка
		полнНаимОбъекта = Шаблон("[ВидОб].[Об]");
		Если спрОбъектов.НайтиПоНаименованию(полнНаимОбъекта,0,1) = 1 Тогда
			промОбъект = спрОбъектов.ТекущийЭлемент();
		Иначе
			спрОбъектов.Новый();
			спрОбъектов.Наименование = полнНаимОбъекта;
			спрОбъектов.Вид = ВидОб;
			спрОбъектов.Записать();
			промОбъект = спрОбъектов.ТекущийЭлемент();
		КонецЕсли;
	Исключение
		Сообщить("Ошибка определения объекта (семЗаписатьЛог)","I");
		Сообщить(ОписаниеОшибки(),"!");
	КонецПопытки;
	// Определение события
	Попытка
		полнНаимСобытия = Шаблон("[ВидСоб].[Соб]");
		Если спрСобытий.НайтиПоНаименованию(полнНаимСобытия,0,1) = 1 Тогда
			промСобытие = спрСобытий.ТекущийЭлемент();
		Иначе
			спрСобытий.Новый();
			спрСобытий.Наименование = полнНаимСобытия;
			спрСобытий.Вид = ВидСоб;
			спрСобытий.Записать();
			промСобытие = спрСобытий.ТекущийЭлемент();
		КонецЕсли;
	Исключение
		Сообщить("Ошибка определения события (семЗаписатьЛог)","I");
		Сообщить(ОписаниеОшибки(),"!");
	КонецПопытки;
	// Определение пользователя
	Попытка
		спрПользователи.НайтиПоКоду( ИмяПользователя() );
		промПользователь = спрПользователи.ТекущийЭлемент();
	Исключение
		Сообщить("Ошибка определения пользователя (семЗаписатьЛог)","I");
		Сообщить(ОписаниеОшибки(),"!");
	КонецПопытки;
	//Добавление истории
	Попытка
		спрИстории.Новый();
		спрИстории.Объект = промОбъект;
		спрИстории.Событие = промСобытие;
		спрИстории.Пользователь = промПользователь;
		спрИстории.ДатаКон = ТекущаяДата();
		спрИстории.ВремяКон = ТекущееВремя();
		спрИстории.ДлительностьСоб = семПрошлоСекунд( Нач, ТекущееВремя() );
		спрИстории.Записать();
	Исключение
		Сообщить("Ошибка записи истории (семЗаписатьЛог)");
		Сообщить(ОписаниеОшибки(),"!");
	КонецПопытки;
КонецПроцедуры

Функция семЗаписатьЛогНач( ВидОб, Об, ВидСоб, Соб , Док="") Экспорт
	спрОбъектов = СоздатьОбъект( "Справочник.ЛогОбъекты" );
	спрСобытий = СоздатьОбъект( "Справочник.ЛогСобытия" );
	спрПользователи = СоздатьОбъект( "Справочник.Пользователи" );
	спрИстории = СоздатьОбъект( "Справочник.ЛогИстория" );
	промОбъект = "";
	промСобытие = "";
	промПользователь = "";
	// Определение объекта
	Попытка
		полнНаимОбъекта = Шаблон("[ВидОб].[Об]");
		Если спрОбъектов.НайтиПоНаименованию(полнНаимОбъекта,0,1) = 1 Тогда
			промОбъект = спрОбъектов.ТекущийЭлемент();
		Иначе
			спрОбъектов.Новый();
			спрОбъектов.Наименование = полнНаимОбъекта;
			спрОбъектов.Вид = ВидОб;
			спрОбъектов.Записать();
			промОбъект = спрОбъектов.ТекущийЭлемент();
		КонецЕсли;
	Исключение
		Сообщить("Ошибка определения объекта (семЗаписатьЛогНач)","I");
		Сообщить(ОписаниеОшибки(),"!");
		Возврат "";
	КонецПопытки;
	// Определение события
	Попытка
		полнНаимСобытия = Шаблон("[ВидСоб].[Соб]");
		Если спрСобытий.НайтиПоНаименованию(полнНаимСобытия,0,1) = 1 Тогда
			промСобытие = спрСобытий.ТекущийЭлемент();
		Иначе
			спрСобытий.Новый();
			спрСобытий.Наименование = полнНаимСобытия;
			спрСобытий.Вид = ВидСоб;
			спрСобытий.Записать();
			промСобытие = спрСобытий.ТекущийЭлемент();
		КонецЕсли;
	Исключение
		Сообщить("Ошибка определения события (семЗаписатьЛогНач)","I");
		Сообщить(ОписаниеОшибки(),"!");
		Возврат "";
	КонецПопытки;
	// Определение пользователя
	Попытка
		спрПользователи.НайтиПоКоду( ИмяПользователя() );
		промПользователь = спрПользователи.ТекущийЭлемент();
	Исключение
		Сообщить("Ошибка определения пользователя (семЗаписатьЛогНач)","I");
		Сообщить(ОписаниеОшибки(),"!");
		Возврат "";
	КонецПопытки;
	//Добавление начала истории
	Попытка
		спрИстории.Новый();
		спрИстории.Объект = промОбъект;
		спрИстории.Событие = промСобытие;
		спрИстории.Пользователь = промПользователь;
		спрИстории.ДатаНач = ТекущаяДата();
		спрИстории.ВремяНач = ТекущееВремя();
		спрИстории.Документ = Док;
		спрИстории.Записать();
		Возврат спрИстории.ТекущийЭлемент();
	Исключение
		Сообщить("Ошибка записи истории (семЗаписатьЛогНач)");
		Сообщить(ОписаниеОшибки(),"!");
		Возврат "";
	КонецПопытки;
КонецФункции

Функция семЗаписатьЛогКон( пНачЛог ) Экспорт
	Если ПустоеЗначение( пНачЛог ) = 1 Тогда Возврат 0; КонецЕсли;
	спрИстории = СоздатьОбъект( "Справочник.ЛогИстория" );
	//Поиск начального объекта
	Если спрИстории.НайтиЭлемент(пНачЛог) = 0 Тогда
		Сообщить("Ошибка определения начала истории (семЗаписатьЛогКон)");
		Сообщить("Не найден начальный объект." "!" );
		Возврат 0;
	КонецЕсли;
	//Запись времени окончания события и длительности
	Попытка
		спрИстории.ДатаКон = ТекущаяДата();
		спрИстории.ВремяКон = ТекущееВремя();
		спрИстории.ДлительностьСоб = семПрошлоСекунд( спрИстории.ВремяНач, спрИстории.ВремяКон );
		спрИстории.Записать();
		Возврат спрИстории.ДлительностьСоб;
	Исключение
		Сообщить("Ошибка записи истории (семЗаписатьЛогКон)");
		Сообщить(ОписаниеОшибки(),"!");
	КонецПопытки;
	
	Возврат 0;
КонецФункции


Процедура семЗагрузкаВнешнихКомпонент()
	Если ПустоеЗначение( Константа.ПутьКВнешнимБиблиотекам ) = 1 Тогда
		Константа.ПутьКВнешнимБиблиотекам = "\\Fstore\Dll";
	КонецЕсли;
	Путь = СокрЛП(Константа.ПутьКВнешнимБиблиотекам);
	
	// загрузка 1С++
	// загружаем из указанного каталога
	Если ЗагрузитьВнешнююКомпоненту( Путь + "\1CPP.dll" ) = 0 Тогда
		// если не получилось, загружаем из стандартных путей
		Если ЗагрузитьВнешнююКомпоненту("1CPP.dll") = 0 Тогда
			Сообщить( "Неудачная попытка загрузить 1CPP.dll.","!");
			Возврат;
		КонецЕсли;
	КонецЕсли;                     
	
	
	МетаИнфо = СоздатьОбъект("MetaInfoClasses");
	
	глВерсия1СПП = МетаИнфо.ПолучитьВерсию();
	глВерсия1СПП_2_5_0_0 = 2*(256*256*256) + 5*(256*256);
	
	Если глВерсия1СПП >= глВерсия1СПП_2_5_0_0 Тогда
		Если ЗагрузитьВнешнююКомпоненту( "\\fstore\Dll\Formex\formex.dll" ) = 0 Тогда
			// если не получилось, загружаем из стандартных путей
			Если ЗагрузитьВнешнююКомпоненту("formex.dll") = 0 Тогда
				Сообщить( "Неудачная попытка загрузить Formex.dll.","!");
				Возврат;
			КонецЕсли;
		КонецЕсли;                     
		
		УпрНастройками=СоздатьОбъект("УправлениеНайстройками");
//		УпрНастройками.Включить("TurboBL");
	Иначе
		Сервис = СоздатьОбъект("СервисРасшФормы");
		Сервис.ПерехватКлавиатуры(0);
	КонецЕсли;
	

	
	Если ФС.СуществуетФайл(КаталогПрограммы()+"\ScanOPOS.dll") = 1 Тогда
		Если ЗагрузитьВнешнююКомпоненту(КаталогПрограммы()+"\ScanOPOS.dll") = 0 Тогда
			Сообщить( "Неудачная попытка загрузить ScanOPOS.dll.","!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Результат = Загрузчик.ЗагрузитьВК(Путь+"\v7plus.dll", "Addin.V7Mail=faa6ebe0-1069-11d4-a5ff-008048da0cd2
    												|Addin.V7SysInfo=046d5520-2c8f-11d4-a62a-008048da0cd2
    												|Addin.V7HttpReader=1e7bc440-1076-11d4-a635-004095e0ebd2
    												|Addin.XMLParser=bb45ed80-1ad7-11d4-a635-004095e0ebd2
    												|Addin.V7TextFile=921da8db-1e6f-4d61-8f49-a3127b799b19");

	Если Результат.КодОшибки = 0 Тогда
//	    Сообщить(Рез.Результат);
	Иначе
	    Сообщить("Ошибка " + Результат.КодОшибки + РазделительСтрок + Результат.Результат);
		СтатусВозврата(0); 
		Возврат;
	КонецЕсли;	
	
	
	
	глНТТРСистИнформ = СоздатьОбъект("AddIn.V7SysInfo");
	
	
	Если НазваниеНабораПрав()="Администратор" Тогда
		//подгружаем qryConsole
		ЗагрузитьВнешнююКомпоненту(Путь+"\qryConsole.dll");
		КонструкторЗапросов = СоздатьОбъект("AddIn.qryConsole");
	КонецЕсли;	
	
	//ЗагрузитьВнешнююКомпоненту("qryConsole.dll");
	//Консоль = СоздатьОбъект("AddIn.qryConsole");  
	//Консоль.ОткрытьФорму();  	
	
	//SoftPoint. Автоинсталлятор. Не убирайте эту строку.
	//вставка в процедуру ПриНачалеРаботыСистемы()
	//строки автоматически добавлены инсталлятором. Начало
	//Если ЗагрузитьВнешнююКомпоненту(Путь + "\SPService.dll")=0 Тогда
	//	Сообщить("Не удалось загрузить внешнюю компоненту SPService", "!!");
	//Иначе
	//	глСофтПоинтВК = СоздатьОбъект("AddIn.SPService");
	//	Попытка
	//		ГибкиеБлокировки.ЗарегистрироватьПользователя()
	//	Исключение
	//		Сообщить("Не удалось создать запись о соответствии ИмяПользователя - spid");
	//		Сообщить(ОписаниеОшибки());
	//	КонецПопытки;
	//	//инициализируем сетевой сервис
	//	глСофтПоинтВК.КаталогСетевогоСервиса = "C:\"; //здесь нужно указать реальный путь
	//	глСофтПоинтВК.ЗапуститьСетевойСервис();
	//КонецЕсли;
	//строки автоматически добавлены инсталлятором. Конец. Не удаляйте эту строку
	
КонецПроцедуры

//В глобальном модуле добавить функцию
Функция spLoadMonitoring()
	Перем MonCom;
	
	//Рез = Загрузчик.КодЗагрузки(КаталогИБ() + "\SoftPointPerfExpert\sp_mon.dll");
	//Если Рез.КодОшибки = 0 Тогда
	//    Сообщить(Рез.Результат);
	//Иначе
	//    Сообщить("Ошибка " + Рез.КодОшибки + РазделительСтрок + Рез.Результат);
	//КонецЕсли;	
	//
	//	Предупреждение("ОК");	  
	
	Результат=Загрузчик.ЗагрузитьВК(КаталогИБ() + "\SoftPointPerfExpert\sp_mon.dll","Addin.MonAddInObject=75e7d56e-e3a7-424d-9237-c23797827ced");
	//
	Если Результат.КодОшибки = 0 Тогда
		//	    Сообщить(Рез.Результат);
	Иначе
		Сообщить("Ошибка " + Результат.КодОшибки + РазделительСтрок + Результат.Результат);
	КонецЕсли;	
	
	//	Если ЗагрузитьВнешнююКомпоненту(КаталогИБ() + "\SoftPointPerfExpert\sp_mon.dll") = 0 Тогда
	//		Сообщить("Не удалось инициализировать компоненту мониторинга!");
	//	Иначе
	Попытка
		MonCom = CreateObject("AddIn.SPMon");
	Исключение
		Сообщить("Не удалось создать объект AddIn.MonAddInObject!");
		Возврат 1;
	КонецПопытки;
	
	Если MonCom.SetupMonitor(КаталогИБ(), ИмяПользователя()) = 0 Тогда
		Сообщить("Ошибка настройки мониторинга!");
		Возврат 2;
	КонецЕсли;
	//	КонецЕсли;
КонецФункции


Процедура семЗагрузкаВнешнихКомпонент2()
	Если ПустоеЗначение( Константа.ПутьКВнешнимБиблиотекам ) = 1 Тогда
		Константа.ПутьКВнешнимБиблиотекам = "\\fstore\Dll";
	КонецЕсли;
	Путь = СокрЛП(Константа.ПутьКВнешнимБиблиотекам);
	
	//загрузчик внешних компонент
	ЗагрузитьВнешнююКомпоненту(Путь+"\vkloader.dll");
	Загрузчик = СоздатьОбъект("ЗагрузчикВК");
	
	//загрузка 1С++
	//загружаем из указанного каталога
	//Результат = Загрузчик.ЗагрузитьВК(Путь + "\1CPP.dll","Addin.1C++=fde5ae76-00b3-4bdb-921b-d5937997b1b7");
	//Если Результат.КодОшибки <> 0 Тогда
	//	Сообщить("Ошибка " + Результат.КодОшибки + РазделительСтрок + Результат.Результат);
	//КонецЕсли;	
	Если ЗагрузитьВнешнююКомпоненту( Путь+"\3.0\1CPP.dll" ) = 0 Тогда
		// если не получилось, загружаем из стандартных путей
		Если ЗагрузитьВнешнююКомпоненту("1CPP.dll") = 0 Тогда
			Сообщить( "Неудачная попытка загрузить 1CPP.dll.","!");
			Возврат;
		КонецЕсли;
	КонецЕсли;                     

	
	Если ЗагрузитьВнешнююКомпоненту( Путь+"\3.0\formex.dll" ) = 0 Тогда
		// если не получилось, загружаем из стандартных путей
		Если ЗагрузитьВнешнююКомпоненту("formex.dll") = 0 Тогда
			Сообщить( "Неудачная попытка загрузить Formex.dll.","!");
			Возврат;
		КонецЕсли;
	КонецЕсли;                     
	
	//spLoadMonitoring();
	
	Результат = Загрузчик.ЗагрузитьВК(Путь + "\vk_rs232.dll","Addin.vk_rs232=27e6609a-c486-4001-bff8-dbf3cdae1b13");
	Если Результат.КодОшибки <> 0 Тогда
		Сообщить("Ошибка " + Результат.КодОшибки + РазделительСтрок + Результат.Результат);
	КонецЕсли;	

	Если ЗагрузитьВнешнююКомпоненту( Путь+"\3.0\turbomd.dll" ) = 0 Тогда
		// если не получилось, загружаем из стандартных путей
		Если ЗагрузитьВнешнююКомпоненту("turbomd.dll") = 0 Тогда
			Сообщить( "Неудачная попытка загрузить turbomd.dll.","!");
			Возврат;
		КонецЕсли;
	КонецЕсли;                     
	
	//Результат = Загрузчик.ЗагрузитьВК(Путь + "\3.0\turbomd.dll","Addin.TurboMD=dc04a720-7f85-11d8-9fcd-c4cb45b9fe08");
	//Если Результат.КодОшибки <> 0 Тогда
	//	Сообщить("Ошибка " + Результат.КодОшибки + РазделительСтрок + Результат.Результат);
	//КонецЕсли;	

	Результат = Загрузчик.ЗагрузитьВК(Путь + "\RiK_SQL.dll","Addin.R_SQL=65477975-DF6F-44CC-A82C-F35F8B5B02E8");
	Если Результат.КодОшибки <> 0 Тогда
		Сообщить("Ошибка " + Результат.КодОшибки + РазделительСтрок + Результат.Результат);
	КонецЕсли;	
	
	ЗагрузитьВнешнююКомпоненту(Путь + "\tabledoc.dll");
	
	ЗагрузитьВнешнююКомпоненту(Путь + "\SpreadSheet.dll");
	
	Результат = Загрузчик.ЗагрузитьВК(Путь+"\v7plus.dll", "Addin.V7Mail=faa6ebe0-1069-11d4-a5ff-008048da0cd2
    												|Addin.V7SysInfo=046d5520-2c8f-11d4-a62a-008048da0cd2
    												|Addin.V7HttpReader=1e7bc440-1076-11d4-a635-004095e0ebd2
    												|Addin.XMLParser=bb45ed80-1ad7-11d4-a635-004095e0ebd2
    												|Addin.V7TextFile=921da8db-1e6f-4d61-8f49-a3127b799b19");

	Если Результат.КодОшибки = 0 Тогда
//	    Сообщить(Рез.Результат);
	Иначе
	    Сообщить("Ошибка " + Результат.КодОшибки + РазделительСтрок + Результат.Результат);
		СтатусВозврата(0); 
		Возврат;
	КонецЕсли;	
	
	глНТТРСистИнформ = СоздатьОбъект("AddIn.V7SysInfo");

	Если НазваниеНабораПрав()="Администратор" Тогда
	//	ЗагрузитьВнешнююКомпоненту(Путь + "APPlus.dll");
	КонецЕсли;
	
	//Результат = Загрузчик.ЗагрузитьВК(Путь+"applus.dll", "Addin.AddInObject=04024C31-0E7B-11d1-A486-004095E1DAEA");
	//Если Результат.КодОшибки = 0 Тогда
	//Иначе                                                                                  
	//    Сообщить("Ошибка " + Результат.КодОшибки + РазделительСтрок + Результат.Результат);
	////	СтатусВозврата(0);
	////	Возврат;
	//КонецЕсли;	
	
	Если НазваниеНабораПрав()="Администратор" Тогда
		//подгружаем qryConsole
		ЗагрузитьВнешнююКомпоненту(Путь+"\qryConsole.dll");
		КонструкторЗапросов = СоздатьОбъект("AddIn.qryConsole");
	КонецЕсли;	
	
	глЗапрос=СоздатьОбъект("ODBCRecordSet");
	глЗапрос.РежимRPC(1);
	
	//Если ФС.СуществуетФайл(КаталогПрограммы()+"\ScanOPOS.dll") = 1 Тогда
	//	Если ЗагрузитьВнешнююКомпоненту(КаталогПрограммы()+"\ScanOPOS.dll") = 0 Тогда
	//		Сообщить( "Неудачная попытка загрузить ScanOPOS.dll.","!");
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

Процедура семОбновитьКурс( конт ) Экспорт
	Если глЕстьРеквизитШапки( "Валюта", конт.Вид() ) = 0 Тогда Возврат; КонецЕсли;
	Если глЕстьРеквизитШапки( "Курс", конт.Вид() ) = 0 Тогда Возврат; КонецЕсли;
	
	Если Константа.СтранаРезидент.Код="EE" Тогда
		//не обновляем курс, т.к. переходим на ЕВРО	
	Иначе
		конт.Курс = КурсДляВалюты( конт.Валюта, конт.ДатаДок );
	КонецЕсли;
	
КонецПроцедуры

// Подключение компоненты R-keeper
Процедура семПодклКомпонентыРК()
	Если семБлокировка = 1 Тогда Возврат; КонецЕсли;
	ФС.УстТекКаталог(КаталогПрограммы());
	Если ФС.СуществуетФайл("rkDbClnt.dll") = 0 Тогда Возврат; КонецЕсли;
	ЕстьРесторан=1;
	Если ПустоеЗначение( Пользователь ) = 1 Тогда Возврат; КонецЕсли;
	Если Пользователь.РаботаRKeeper = 1 Тогда
		Если Вопрос("Будет ли производиться в текущим сеансе загрузка данных из R-Keeper",4,10)=6 Тогда
			Результат=Загрузчик.ЗагрузитьВК("rkDbClnt.dll","Addin.rkDbClnt=19D3D501-20AB-4127-B611-378A5A8F9D5F");
			Если Результат.КодОшибки = 0 Тогда
				Сообщить( "Компонента для работы с R-Keeper загружена успешно !","I");
				КомпДбф=СоздатьОбъект("AddIn.rkDbClnt");
				ЕстьКомпДБФ=1;
			Иначе
				Сообщить( "Не загружена компонента для работы с R-Keeper !", "!" );
				ЕстьКомпДБФ=0;
			КонецЕсли;	
			
			//			Если ЗагрузитьВнешнююКомпоненту("rkDbClnt.dll")=1 Тогда
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Установка глобальных переменных необходжимых для работы системы
Процедура семУстГлобальныхПерем()
	Если семБлокировка = 1 Тогда Возврат; КонецЕсли;
	спр = СоздатьОбъект( "Справочник.Пользователи" );
	спр.НайтиПоКоду( ИмяПользователя() );
	Пользователь = Спр.ТекущийЭлемент();
	Если ПустоеЗначение( Пользователь ) = 1 Тогда
		Сообщить( "Ошибка поиска пользователя.","!" );
		Сообщить( "Пользователь не зарегистрирован в справочнике сотрудников!", "I" );
		Сообщить( "В новых документах не будет фиксироваться автор!", "I" );
		Сообщить( "Обратитесь в IT отдел.", "I" );
	КонецЕсли;
	Если ПустоеЗначение( Пользователь ) = 0 Тогда
		Если ПустоеЗначение(Пользователь.Страна)=0 Тогда
			глКодСтраныПользователя=Пользователь.Страна.Код;			
		Иначе
			глКодСтраныПользователя=Пользователь.ОсновнаяФирма.Страна.Код;			
		КонецЕсли;
		глФирма=Пользователь.ОсновнаяФирма;
	КонецЕсли;
	Если ПустоеЗначение(глКодСтраныПользователя)=1 Тогда
		глКодСтраныПользователя=Константа.ОсновнаяФирма.Страна.Код;
	КонецЕсли;
	Если ПустоеЗначение(глФирма)=1 Тогда
		глФирма=Константа.ОсновнаяФирма;
	КонецЕсли;
	кСерверVDB = СокрЛП(Константа.СерверVDB);
	глРазрОтрицОстатки = Константа.РазрешитьОтрицательныеОстаткиТоваров;
	
КонецПроцедуры

//Используется для блокировки входа в систему и сообщения о блокировке
Процедура семБлокировка( пВход )
	Если (Константа.БлокировкаСистемы = Перечисление.СостояниеБлокировкиСистемы.Работа) или (НазваниеНабораПрав() = "Администратор") Тогда 
		семБлокировка = 0; Возврат; 
	Иначе
		семБлокировка = 1; 
	КонецЕсли;
	Если пВход = 1 Тогда
		Предупреждение("Извините, вход в систему заблакирован системными работами.", 5);
		ЗавершитьРаботуСистемы(0);
	Иначе
		Сообщить("Необходимо выйти из системы для проведения системных работ.", "I");
	КонецЕсли;
КонецПроцедуры

//======================================================================
Функция глОтправитьСообщение(Заголовок,Сообщение,Агент,Вид="Email",Документ="",ВидОбъекта="") Экспорт
	
	СпрОС = СоздатьОбъект("Справочник.ОтправкаСообщений");
	
	Если ПустоеЗначение(Агент)=1 Тогда
		ЭлПочта = "it.prog@reaton.lv";
	Иначе
		ЭлПочта = СокрЛП(Агент.ЭлПочта);
	КонецЕсли;

	Заголовок = СтрЗаменить(Заголовок,"'","");
	Сообщение = СтрЗаменить(Сообщение,"'","");

	
	ODBCDatabase = СоздатьОбъект( "ODBCDatabase" );
	ConnectionString = "Driver={SQL Server};Server="+кСерверVDB+";UID=www; PWD=traktors88;Database=intranet;";	
	Если ODBCDatabase.Соединение( ConnectionString ) = 0 Тогда
		Сообщить( "Ошибка соединения с базой данных.", "!" );
		Сообщить( ODBCDatabase.ПолучитьОписаниеОшибки(),"I" );
		Возврат 0;
	КонецЕсли;
	ODBCRecordSet = СоздатьОбъект( "ODBCRecordSet" );
	ODBCRecordSet.УстБД( ODBCDatabase );
	ODBCRecordSet.ВыполнитьСкалярный("SET NOCOUNT ON");

	
	УжеОтправлен=0;
	Если (Вид="Email") И (ПустоеЗначение(ЭлПочта)=0) Тогда

		//{
		//Параметры = СоздатьОбъект("СписокЗначений");
		//Параметры.ДобавитьЗначение("PPD Noliktava"				,"ТЕМА");
		//Параметры.ДобавитьЗначение(Сообщение			,"ТЕЛО");
		//Параметры.ДобавитьЗначение("1CAlert@reaton.lv"	,"ОТКОГО");
		//Параметры.ДобавитьЗначение(ЭлПочта				,"КОМУ");
		//Параметры.ДобавитьЗначение(1					,"НЕМЕДЛЕННАЯОТПРАВКА");
	   	//Параметры.ДобавитьЗначение(0					,"ISREAD"); //затребовать подтверждение о прочтении	
	   	//Параметры.ДобавитьЗначение("192.168.0.3"		,"SMTPСЕРВЕР"); //пояснения по параметрам smtp - читать в коде обработки
	   	//Параметры.ДобавитьЗначение(25					,"SMTPПОРТ"); //пояснения по параметрам smtp - читать в коде обработки
		//Параметры.ДобавитьЗначение(0					,"OUTLOOK");
		//
		//ОткрытьФорму("Отчет",Параметры,КаталогИБ()+"ExtForms\ЕМАЙЛ_СиДиОу.ert");
		//}
		
		Если ПустоеЗначение(Документ)=0 Тогда
			Если СпрОС.ВыбратьЭлементыПоРеквизиту("Документ",Документ,0,0)=1 Тогда
				Пока СпрОС.ПолучитьЭлемент()=1 Цикл
					Если СпрОС.ПометкаУдаления()=1 Тогда
						Продолжить;
					КонецЕсли;
					Если (СпрОС.ВидУведомления=Перечисление.ВидыУведомлений.ЭлПочта) И (СпрОС.ВидОбъекта = ВидОбъекта) Тогда
						УжеОтправлен=1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;		
		
		Если УжеОтправлен=0 Тогда

			Если ПустоеЗначение(Документ)=0 Тогда
				СпрОС.Новый();
				СпрОС.ВидОбъекта = ВидОбъекта;
				СпрОС.Документ = Документ;
				СпрОС.ВидУведомления = Перечисление.ВидыУведомлений.ЭлПочта;
				СпрОС.Дата = РабочаяДата();
				СпрОС.Время = ТекущееВремя();
				ОбъектЗаписать(СпрОС,);
			КонецЕсли;
				
			ТекстЗапроса=Шаблон("insert into vdb_emailspam (IDKEY, email, subject, message, datums, sender) VALUES (10000, '[Лев(ЭлПочта,50)]', '[Лев(Заголовок,100)]', '[Сообщение]', dbo.GetClearDate(GETDATE()), 'no-reply@ppd.reaton.lv')");
		
			ODBCRecordSet.ВыполнитьСкалярный(ТекстЗапроса);
			Ошибка = ODBCRecordSet.ПолучитьОписаниеОшибки();
			Если ПустоеЗначение(Ошибка)=0 Тогда
				Сообщить( "Ошибка выполнения запроса..", "!" );
				Сообщить( ТекстЗапроса,"I" );
				Сообщить("ODBCRecordset error:" + РазделительСтрок + Ошибка, "!!!");
				Возврат 0;
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
	УжеОтправлен=0;
	Если Вид="SMS" Тогда
		СМС = СокрЛП(Агент.Телефон);
		СМС = СтрЗаменить(СМС,"+","");//убираем + из номер
		СМС = СтрЗаменить(СМС," ","");//убираем пробелы

		Если ПустоеЗначение(СМС)=1 Тогда
			Возврат 0;
		КонецЕсли;
		
		//{
		//Сообщение=СтрЗаменить(СокрЛП(Сообщение)," ","+");
		
		//Сообщение_ = Шаблон("api-key=f47d0a20cb71afb73264c6f1cbbaa495dda156e5
		//|sender=REATON NOL
		//|number=371[СМС]
		//|text=[Сообщение]");
		//////
		//////
		//Параметры = СоздатьОбъект("СписокЗначений");
		//Параметры.ДобавитьЗначение("SMS","ТЕМА");
		//Параметры.ДобавитьЗначение(Сообщение_,"ТЕЛО");
		//Параметры.ДобавитьЗначение("1CAlert@reaton.lv"		,"ОТКОГО");
		//Параметры.ДобавитьЗначение("send.api@esteria.lv","КОМУ");
	   	//Параметры.ДобавитьЗначение(0					,"ISREAD"); //затребовать подтверждение о прочтении	
	   	//Параметры.ДобавитьЗначение("192.168.0.3"		,"SMTPСЕРВЕР"); //пояснения по параметрам smtp - читать в коде обработки
	   	//Параметры.ДобавитьЗначение(25					,"SMTPПОРТ"); //пояснения по параметрам smtp - читать в коде обработки
		//Параметры.ДобавитьЗначение(0					,"OUTLOOK");
		//Параметры.ДобавитьЗначение(1,"НЕМЕДЛЕННАЯОТПРАВКА");
		////
		//ОткрытьФорму("Отчет",Параметры,КаталогИБ()+"ExtForms\ЕМАЙЛ_СиДиОу.ert");
		//}
		

		Если ПустоеЗначение(Документ)=0 Тогда
			Если СпрОС.ВыбратьЭлементыПоРеквизиту("Документ",Документ,0,0)=1 Тогда
				Пока СпрОС.ПолучитьЭлемент()=1 Цикл
					Если СпрОС.ПометкаУдаления()=1 Тогда
						Продолжить;
					КонецЕсли;

					Если (СпрОС.ВидУведомления=Перечисление.ВидыУведомлений.СМС) И (СпрОС.ВидОбъекта = ВидОбъекта) Тогда
						УжеОтправлен=1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;	

		Если УжеОтправлен=0 Тогда
			
			Если ПустоеЗначение(Документ)=0 Тогда
		
				СпрОС.Новый();
				СпрОС.ВидОбъекта = ВидОбъекта;
				СпрОС.Документ = Документ;
				СпрОС.ВидУведомления = Перечисление.ВидыУведомлений.СМС;
				СпрОС.Дата = РабочаяДата();
				СпрОС.Время = ТекущееВремя();
				ОбъектЗаписать(СпрОС,);
				
			КонецЕсли;
			
			ТекстЗапроса=Шаблон("insert into vdb_smsspam (IDKEY, num, message, datums, id_provider, sender) VALUES ([Прав(СМС,6)], [СМС], '[Сообщение]', dbo.GetClearDate(GETDATE()), 3, 'REATON NOL')");
	
			ODBCRecordSet.ВыполнитьСкалярный(ТекстЗапроса);
			Ошибка = ODBCRecordSet.ПолучитьОписаниеОшибки();
	
			Если ПустоеЗначение(Ошибка)=0 Тогда
				Сообщить( "Ошибка выполнения запроса..", "!" );
				Сообщить( ТекстЗапроса,"I" );
				Сообщить("ODBCRecordset error:" + РазделительСтрок + Ошибка, "!!!");
				Возврат 0;
			КонецЕсли;
			
			//отправляем на второй номер если указан
	
			СМС = СокрЛП(Агент.Телефон2);
			СМС = СтрЗаменить(СМС,"+","");//убираем + из номер
			СМС = СтрЗаменить(СМС," ","");//убираем пробелы
	
			Если ПустоеЗначение(СМС)=1 Тогда
				Возврат 0;
			КонецЕсли;
			
			//{
			//Сообщение=СтрЗаменить(СокрЛП(Сообщение)," ","+");
			
			//Сообщение_ = Шаблон("api-key=f47d0a20cb71afb73264c6f1cbbaa495dda156e5
			//|sender=REATON NOL
			//|number=371[СМС]
			//|text=[Сообщение]");
			//////
			//////
			//Параметры = СоздатьОбъект("СписокЗначений");
			//Параметры.ДобавитьЗначение("SMS","ТЕМА");
			//Параметры.ДобавитьЗначение(Сообщение_,"ТЕЛО");
			//Параметры.ДобавитьЗначение("1CAlert@reaton.lv"		,"ОТКОГО");
			//Параметры.ДобавитьЗначение("send.api@esteria.lv","КОМУ");
		   	//Параметры.ДобавитьЗначение(0					,"ISREAD"); //затребовать подтверждение о прочтении	
		   	//Параметры.ДобавитьЗначение("192.168.0.3"		,"SMTPСЕРВЕР"); //пояснения по параметрам smtp - читать в коде обработки
		   	//Параметры.ДобавитьЗначение(25					,"SMTPПОРТ"); //пояснения по параметрам smtp - читать в коде обработки
			//Параметры.ДобавитьЗначение(0					,"OUTLOOK");
			//Параметры.ДобавитьЗначение(1,"НЕМЕДЛЕННАЯОТПРАВКА");
			////
			//ОткрытьФорму("Отчет",Параметры,КаталогИБ()+"ExtForms\ЕМАЙЛ_СиДиОу.ert");
			//}
			
			ТекстЗапроса=Шаблон("insert into vdb_smsspam (IDKEY, num, message, datums, id_provider, sender) VALUES ([Прав(СМС,6)], [СМС], '[Сообщение]', dbo.GetClearDate(GETDATE()), 3, 'REATON NOL')");
		
			ODBCRecordSet.ВыполнитьСкалярный(ТекстЗапроса);
			Ошибка = ODBCRecordSet.ПолучитьОписаниеОшибки();
	
			Если ПустоеЗначение(Ошибка)=0 Тогда
				Сообщить( "Ошибка выполнения запроса..", "!" );
				Сообщить( ТекстЗапроса,"I" );
				Сообщить("ODBCRecordset error:" + РазделительСтрок + Ошибка, "!!!");
				Возврат 0;
			КонецЕсли;

		КонецЕсли;
//		ЗапуститьПриложение("iexplore http://intranet.reaton.lv/dosmsspam.php");
		
	КонецЕсли;
	
	Возврат 1;
	
	
	
КонецФункции // глОтправитьСообщение()


Функция семПолучитьСкидкуПЛ( пДеп, пДопКод, пДата ) Экспорт
	MetaDataWork = СоздатьОбъект( "MetaDataWork" );
	ODBCDatabase = СоздатьОбъект( "ODBCDatabase" );
	ConnectionString = "Driver={SQL Server};Server="+кСерверVDB+";UID=www; PWD=traktors88;Database=intranet;";	
	Если ODBCDatabase.Соединение( ConnectionString ) = 0 Тогда
		Сообщить( "Ошибка соединения с базой данных.", "!" );
		Сообщить( ODBCDatabase.ПолучитьОписаниеОшибки(),"I" );
		Возврат 0;
	КонецЕсли;
	ODBCRecordSet = СоздатьОбъект( "ODBCRecordSet" );
	ODBCRecordSet.УстБД( ODBCDatabase );
	промДата = MetaDataWork.ПолучитьСтрИзДаты(пДата);
	ТекстЗапроса=Шаблон("select dbo.Get_VDB_Disc([пДеп],[пДопКод],'[промДата]')");
	Если ODBCRecordSet.Открыть( ТекстЗапроса ) = 0 Тогда
		Сообщить( "Ошибка выполнения запроса..", "!" );
		Сообщить( ТекстЗапроса,"I" );
		Возврат 0;
	КонецЕсли;
	Возврат ODBCRecordSet.ПолучитьЗначение(1);
КонецФункции

//**************
//** функция, которая по номеру карты клиента возвращает его размер скидки и ID в базе VDB
Функция глПолучитьСкидкуИКлиентаVDB( пНомерКарты, пДеп, пКодКассы,пСкидка,пКлиент="",пКритерий="") Экспорт
	MetaDataWork = СоздатьОбъект( "MetaDataWork" );
	ODBCDatabase = СоздатьОбъект( "ODBCDatabase" );
	ConnectionString = "Driver={SQL Server};Server="+кСерверVDB+";UID=www; PWD=traktors88;Database=intranet;";	
	Если ODBCDatabase.Соединение( ConnectionString ) = 0 Тогда
		Сообщить( "Ошибка соединения с базой данных.", "!" );
		Сообщить( ODBCDatabase.ПолучитьОписаниеОшибки(),"I" );
		Возврат 0;
	КонецЕсли;
	ODBCRecordSet = СоздатьОбъект( "ODBCRecordSet" );
	ODBCRecordSet.УстБД( ODBCDatabase );
	
	ODBCRecordSet.ВыполнитьСкалярный("SET NOCOUNT ON");
	ТекстЗапроса=Шаблон("EXEC dbo.POS_GetCustomer
	|						@mcard = N'[пНомерКарты]',
	|						@Dept = [пДеп],
	|						@pos_id_global = [пКодКассы]");

	табл = СоздатьОбъект("ТаблицаЗначений");
	//ODBCRecordSet.РежимRPC(1)
//	ODBCRecordSet.Отладка(1);
	
	табл=ODBCRecordSet.ВыполнитьИнструкцию( ТекстЗапроса);
	Если ТипЗначенияСтр(табл) <> "ТаблицаЗначений" Тогда
		Сообщить( "Ошибка выполнения запроса..", "!" );
		Сообщить( ТекстЗапроса,"I" );
		Ошибка = ODBCRecordSet.ПолучитьОписаниеОшибки();
		Сообщить("ODBCRecordset error:" + РазделительСтрок + Ошибка, "!!!");
		Возврат 0;
	КонецЕсли;
	
	пСкидка = 0;
	
	табл.ПолучитьСтрокуПоНомеру(1);
	//Сообщить(табл.RESULT+" "+табл.BONUSS);
	Если табл.RESULT="S" Тогда
		//табл.ВыбратьСтроку();
		Если табл.CustomerType = 1 Тогда
			//клиент VDB
			ДопКод = табл.ID;
			СпрК = СоздатьОбъект("Справочник.Контрагенты");
			СпрК.НайтиПоРеквизиту("ДопКод",ДопКод,1);
			Если СпрК.Выбран()=1 Тогда
				пКлиент = СпрК.ТекущийЭлемент();
			Иначе
				Сообщить("Не найден клиент в базе 1C по ID = "+ДопКод);
			КонецЕсли;
		ИначеЕсли табл.CustomerType = 2 Тогда
			пКлиент = Константа.СобственноеФизЛицо;
		ИначеЕсли табл.CustomerType = 3 Тогда
			пКлиент = Константа.СобственноеФизЛицо2;
		КонецЕсли;		
		пСкидка = табл.DISCOUNT;	
	ИначеЕсли табл.RESULT="B" Тогда
		//бонусный клиент - кампания 
		пКампания = табл.Campaign;
		СпрКр=СоздатьОбъект("Справочник.ЗначенияСтатКритериев");
		СпрКр.НайтиПоКоду(пКампания,0);
		пКритерий = СпрКр.ТекущийЭлемент();
		пСтрокаБонуса = табл.BONUSS; //'!MINDISC|10;!CUSTGRP|1' - пример строки 
		стрПоиска ="!MINDISC|";
		Если Найти(пСтрокаБонуса,стрПоиска)>0 Тогда
			стрПоиска2=";";
			стрПоиска3="|";
			поз=Найти(пСтрокаБонуса,стрПоиска2);
			Если поз=0 Тогда
				поз=Найти(пСтрокаБонуса,стрПоиска3);
				пСкидка=Число(Сред(пСтрокаБонуса,поз+1,2));
			Иначе
				пСкидка=Число(Сред(Лев(пСтрокаБонуса,поз-1),СтрДлина(стрПоиска)+1));
			КонецЕсли;
		КонецЕсли;
		//пСкидка = табл.DISCOUNT;
	ИначеЕсли табл.RESULT="E" Тогда
		Сообщить("Ошибка идентификации карты: "+табл.ERRDESCR);
	КонецЕсли;
	
	Возврат 1;

КонецФункции

//======================================================================
Функция глПолучитьСуммуСделкиЗаНаличныеПоКлиенту(Конт,Период="Месяц") Экспорт
	
	текстЗапроса="SELECT SUM(Сумма) SUM
	|			  FROM
	|				(SELECT SUM($Касса.Наличность)*$ПоследнееЗначение.Валюты.Курс($Касса.Валюта,LEFT(date_time_iddoc,8)) Сумма
	|			  	  FROM $Регистр.Касса AS Касса With (NOLOCK)
	|			  	  WHERE ($Касса.Клиент = :Клиент)
	|					AND (Касса.DEBKRED = 0)
	|					AND date_time_iddoc >= :Нач AND date_time_iddoc <= :Кон~
	|			  	GROUP BY $Касса.Валюта, date_time_iddoc) A
	|
	|";
	
	Запрос=СоздатьОбъект("ODBCRecordSet");
	Запрос.УстановитьТекстовыйПараметр("Клиент",Конт.КлГруппа);
	Запрос.УстановитьТекстовыйПараметр("Нач",НачМесяца(Конт.ДатаДок));
	Запрос.УстановитьТекстовыйПараметр("Кон",СформироватьПозициюДокумента(Конт.ТекущийДокумент(),0));
	//Запрос.Отладка(1);
	Возврат Запрос.ВыполнитьСкалярный(текстЗапроса);
	
КонецФункции // гл

//======================================================================
Функция глПолучитьДопустСрокРеализацииТовараПоКлиенту(Клиент,Товар) Экспорт

	Спр=СоздатьОбъект("Справочник.КлиентТоварыДопустСрокиГодности");
	Спр.ИспользоватьВладельца(Клиент);
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент() = 1 Цикл
		Если Спр.ПометкаУдаления()=1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Спр.Товар.ЭтоГруппа()=1 Тогда
			Если Товар.ПринадлежитГруппе(Спр.Товар)=1 Тогда
				Возврат Спр.ДопустСрокРеализации;
			КонецЕсли;
		Иначе
			Если Спр.Товар = Товар Тогда
				Возврат Спр.ДопустСрокРеализации;
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЦикла;

	Возврат Клиент.ДопустСрокРеализации;
	
КонецФункции // глПолучитьДопустСрокРеализацииТовараПоКлиенту

//======================================================================
Функция глЗапретОтгрузкиТовараПоКлиенту(Клиент,Товар,НаДату) Экспорт

	Если ПустоеЗначение(НаДату)=1 Тогда
		НаДату = РабочаяДата();
	КонецЕсли;
	Спр=СоздатьОбъект("Справочник.КлиентТоварыЗапрет");
	Спр.ИспользоватьВладельца(Клиент);
	Если Спр.НайтиПоРеквизиту("Товар",Товар,0)=1 Тогда
		Возврат Спр.ЗапретОтгрузки.Получить(НаДату);
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // глПолучитьДопустСрокРеализацииТовараПоКлиенту


//======================================================================
Функция глВернутьАллергены(Состав) Экспорт
	
	ТекстЗапроса = "SELECT DISTINCT $АллергеныСостава.КлючевыеСлова КлючевоеСлово
	|					   , АллергеныСоставаГруппа.CODE Группа
	|				FROM $Справочник.АллергеныСостава AS АллергеныСостава With (NOLOCK)
	|				INNER JOIN $Справочник.АллергеныСостава AS АллергеныСоставаГруппа With (NOLOCK) ON АллергеныСоставаГруппа.ID = АллергеныСостава.PARENTID
	|				ORDER BY АллергеныСоставаГруппа.CODE
	|";

	ТекстЗапросаИсключения = "SELECT $АллергеныСостава.КлючевыеСлова КлючевоеСлово
	|								, $АллергеныСоставаСловаИсключения.КлючевыеСлова СловоИсключение
	|						  FROM $Справочник.АллергеныСоставаСловаИсключения AS АллергеныСоставаСловаИсключения With (NOLOCK)
	|					 	  INNER JOIN $Справочник.АллергеныСостава AS АллергеныСостава With (NOLOCK) ON АллергеныСоставаСловаИсключения.PARENTEXT = АллергеныСостава.ID
	|							WHERE (АллергеныСоставаСловаИсключения.ISMARK = 0)
	|";
	
	Запрос = СоздатьОбъект("ODBCRecordSet");
	Запрос2 = СоздатьОбъект("ODBCRecordSet");
	итСловаИсключения=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос2.ВыполнитьИнструкцию(ТекстЗапросаИсключения,итСловаИсключения);
	итСловаИсключения.ДобавитьИндекс("иКлючевоеСлово","КлючевоеСлово");
	//итСловаИсключения.Показать();
	
	табл=СоздатьОбъект("ТаблицаЗначений");
	табл=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
	табл.ВыбратьСтроки();
	стрКодыАллергены=СоздатьОбъект("СписокЗначений");
	Пока табл.ПолучитьСтроку() = 1 Цикл
		
		НашлиСловоИсключения=0;
		итСловаИсключения.УстановитьФильтр(табл.КлючевоеСлово,табл.КлючевоеСлово,"иКлючевоеСлово");
		итСловаИсключения.ВыбратьСтроки("иКлючевоеСлово");
		Пока итСловаИсключения.ПолучитьСтроку("иКлючевоеСлово") = 1 Цикл
			Если Найти(НРЕГ(Состав),НРЕГ(СокрЛП(итСловаИсключения.СловоИсключение)))>0 Тогда
				НашлиСловоИсключения=1;
			КонецЕсли;
		КонецЦикла;
		
		//если нашли слова исключения в составе тогда не ищем больше ключевые слова для аллергенов
		Если НашлиСловоИсключения=1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Найти(НРЕГ(Состав),НРЕГ(СокрЛП(табл.КлючевоеСлово)))>0 Тогда
			Если стрКодыАллергены.НайтиЗначение(табл.Группа)=0 Тогда
				стрКодыАллергены.ДобавитьЗначение(табл.Группа);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	//стрКодыАллергены.Сортировать();
	стрАллергены="";
	Для инд=1 По стрКодыАллергены.РазмерСписка() Цикл
		ГруппаАллергена = стрКодыАллергены.ПолучитьЗначение(инд);
		стрАллергены=стрАллергены + СокрЛП(ГруппаАллергена) + ",";
	КонецЦикла;
	
	Возврат Лев(стрАллергены,СтрДлина(стрАллергены)-1);
	
КонецФункции // глВернутьАллергеныТоваров

// функция вычисляет контрольную цифру для 7-значного целого положительного числа
// пЧисло (число 7.0)
// возвращает контрольную цифру (число 1.0)
Функция семПолучитьКонтрЦифру( пЧисло )
	// заполним список величин позиций
	спВеличин = СоздатьОбъект( "СписокЗначений" );
	спВеличин.ДобавитьЗначение(7);
	спВеличин.ДобавитьЗначение(3);
	спВеличин.ДобавитьЗначение(5);
	спВеличин.ДобавитьЗначение(2);
	спВеличин.ДобавитьЗначение(4);
	спВеличин.ДобавитьЗначение(1);
	спВеличин.ДобавитьЗначение(6);
	// умножаем значение каждого разряда на величину разряда
	шаг1 = 0;
	Для н = 1 по 7 Цикл
		шаг1 = шаг1 + Число(Сред(Строка(пЧисло),н,1))*спВеличин.ПолучитьЗначение(н);
	КонецЦикла;
	// получаем остаток от деления на 11
	шаг2 = 0;
	шаг2 = шаг1%11;
	// вычитаем полученый остаток из 3 и берем по модулю
	шаг3 = 0;
	шаг3 = 3 - шаг2;
	шаг3 = ?(шаг3<0,-шаг3,шаг3);
	Возврат шаг3;
КонецФункции

// функция проверяет контрольную цифру для 8-значного целого положительного числа (7 цифр значимые + 1 контрольная)
// возврашает 1 если всё правильно, 0 если контрольная цифра не верна и -1 при ошибке
Функция семПроверкаКонтрЦифры(пЧисло)
	Если ПустоеЗначение(пЧисло) = 1 Тогда Возврат -1; КонецЕсли;
	стр = Строка(пЧисло);
	Если СтрДлина(стр) <> 8 Тогда Возврат -1; КонецЕсли;
	Если Число(Прав(стр,1)) = семПолучитьКонтрЦифру( Число(Лев(стр,7))) Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция семПроверкаДопКода( ДопКод ) Экспорт
	Если ПустоеЗначение(ДопКод) = 1 Тогда Возврат 1; КонецЕсли;
	стр = Строка(ДопКод);
	Если СтрДлина(стр) <> 8 Тогда 
		Сообщить("Неправильный дополнительный код.","!");
		Сообщить("Количество цифр в дополнительном коде должно быть равно 8-ми.","I");
		Возврат 0; 
	КонецЕсли;
	рез = семПроверкаКонтрЦифры( ДопКод );
	Если рез < 0 Тогда
		Сообщить("Ошибка проверки контрольной цифры.","!!!");
		Возврат 0; 
	ИначеЕсли рез = 0 Тогда
		Сообщить("Неправильный дополнительный код.","!");
		Сообщить("Число не отвечает правилам дополнительного кода.","I");
		Возврат 0; 
	Иначе
		Возврат 1;
	КонецЕсли;
КонецФункции

// Перекодирует символы в строке (стр) в соответствии с условиями перекодировки (спПерекод)
Функция Пререкодировка(стр,спКодов="") Экспорт
	рез = "";
	Для н = 1 по СтрДлина(стр) Цикл
		ТекСим = Сред(стр,н,1);
		Код = спПерекод.Получить(КодСимв(ТекСим));
		Если ПустоеЗначение(Код) = 1 Тогда
			рез = рез + ТекСим;
		Иначе
			рез = рез + Симв(Число(Код));
		КонецЕсли;
	КонецЦикла;
	Возврат рез;
КонецФункции

Функция семОкрРознЦены(пЦена) Экспорт
	Ост = пЦена*100%10;
	Если Ост = 0 Тогда
		Возврат пЦена;
	ИначеЕсли Ост < 5 Тогда
		Возврат Окр(пЦена,1,0)+0.05;
	ИначеЕсли Ост = 5 Тогда
		Возврат пЦена;
	ИначеЕсли Ост > 5 Тогда
		Возврат Окр(пЦена,1,1);
	КонецЕсли;
КонецФункции

Функция семПолучитьКатегориюЦеныПоНаим( пСтр ) Экспорт
	спр = СоздатьОбъект( "Справочник.КатегорииЦен" );
	Если спр.НайтиПоНаименованию( пСтр, 0, 1 )  = 1 Тогда
		Возврат спр.ТекущийЭлемент();
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Функция глНеобходимоНаличиеПретензии(Конт,Товар,Единица,Кол,КолФакт) Экспорт
	
	ПроцПогрешВес=5; //проверяем только если 
	
	НеНужнаПретензия = 0;
	Если ПустоеЗначение(Конт.ПоСчету.СкладПолучатель)=0 Тогда
		Если Конт.ПоСчету.Склад.УпрАналитика=Конт.ПоСчету.СкладПолучатель.УпрАналитика Тогда
			//не нужна претензия для перемещения между складами одной аналитики
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Если Конт.ПоСчету.ВидОплаты = 4  Тогда
		//Обмен товара 
		Возврат 0;
	КонецЕсли;
	
	Если (Кол>КолФакт) И (КолФакт=0) Тогда
		Возврат 1;
	ИначеЕсли (Кол>КолФакт) И (Единица <> Перечисление.ЕдиницыИзмерения.Килограмм) Тогда
		Возврат 1;
	ИначеЕсли (Кол>КолФакт) И (Единица = Перечисление.ЕдиницыИзмерения.Килограмм) И (Конт.ДатаДок>='11.06.2013') Тогда
		Если (((Кол-КолФакт)/Кол*100)>ПроцПогрешВес)  Тогда //проверяем процент погрешности 
			Возврат 1;
		Иначе
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Процедура семСозданиеПретензии(конт,Вид="Создание") Экспорт
	Если (конт.Выбран() = 0) Тогда
		Сообщить("Ошибка создания претензии.","!");
		Сообщить("Необходимо сначала записать документ.","I");
		Возврат;
	ИначеЕсли ТипЗначенияСтр(конт) = "ГрупповойКонтекст" Тогда
		
		//Конт.Записать();
		//Если (Конт.Модифицированность()=1) Тогда
		//	Сообщить("Ошибка создания претензии.","!");
		//	Сообщить("Необходимо сначала записать документ.","I");
		//	Возврат;
		//КонецЕсли;
	КонецЕсли;
	
	Путь = КаталогИБ() + "ExtForms\Sem\СозданиеПретензии.ert";
	Если ФС.СуществуетФайл( Путь ) = 0 Тогда Возврат; КонецЕсли;
	сп = СоздатьОбъект( "СписокЗначений" );
	сп.ДобавитьЗначение(конт,"Накл");
	сп.ДобавитьЗначение("Создание","Режим");
	сп.ДобавитьЗначение(Вид,"Вид");
	ОткрытьФормуМодально( "Обработка", сп, Путь );
КонецПроцедуры

Функция семПроверкаПретензии(конт,Вид="Создание") Экспорт
	Путь = КаталогИБ() + "ExtForms\Sem\СозданиеПретензии.ert";
	Если ФС.СуществуетФайл( Путь ) = 0 Тогда Возврат 1; КонецЕсли;
	сп = СоздатьОбъект( "СписокЗначений" );
	сп.ДобавитьЗначение(конт.ТекущийДокумент(),"Накл");
	сп.ДобавитьЗначение("Проверка","Режим");
	сп.ДобавитьЗначение(Вид,"Вид");
	ОткрытьФормуМодально( "Обработка", сп, Путь );
	Возврат сп.Получить("Результат");
КонецФункции



Функция глПровестиДокументыПоТоварам(конт) Экспорт
	Путь = КаталогИБ() + "ExtForms\Sem\ПроведениеДокументовПоТоварам.ert";
	Если ФС.СуществуетФайл( Путь ) = 0 Тогда Возврат 1; КонецЕсли;
	ОткрытьФормуМодально( "Обработка", Конт, Путь );
КонецФункции


Функция семПроцентСкидкиКлиентуНаТовар(Клиент,Товар,КатегорияЦены,пДата,Есть=0) Экспорт
	Есть = 0;
	Запрос=СоздатьОбъект("ODBCRecordSet");
	ТекстЗапроса="	
	|			SELECT TOP 1   $ПоследнееЗначение.КлиентСкидки.ПроцентСкидки( КлиентСкидки.ID,:ВыбДата) Процент
	|			FROM (
	|					SELECT  НД.ParentID ТовГруппа
	|					FROM Дерево_Номенклатура AS НД
	|					WHERE НД.ID=:Товар 
	|					UNION ALL
	|					SELECT DISTINCT НД.ID ТовГруппа
	|					FROM Дерево_Номенклатура AS НД
	|					WHERE НД.ID=:Товар 
	|				) А
	|			INNER JOIN $Справочник.КлиентСкидки КлиентСкидки ON $КлиентСкидки.ТовГруппа=А.ТовГруппа AND КлиентСкидки.PARENTEXT=:Клиент
	|			INNER JOIN $Справочник.Номенклатура СпрН ON СпрН.ID=$КлиентСкидки.ТовГруппа
	|			WHERE КлиентСкидки.ISMARK = 0 AND $КлиентСкидки.КатегорияЦены=:КатегорияЦены
	|			ORDER BY СпрН.ISFOLDER DESC ";
	
	Запрос.УстановитьТекстовыйПараметр("Клиент",?(ПустоеЗначение(Клиент.КлиентДляСкидок)=1,Клиент,Клиент.КлиентДляСкидок));
	Запрос.УстановитьТекстовыйПараметр("Товар",Товар);
	Запрос.УстановитьТекстовыйПараметр("КатегорияЦены",КатегорияЦены);
	Запрос.УстановитьТекстовыйПараметр("ВыбДата",пДата);
	
	Скидка= Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	Если Скидка<>0 Тогда
		Есть = 1;
		Возврат Скидка;
	КонецЕсли;
	
	
	//спр = СоздатьОбъект("Справочник.КлиентСкидки");
	//спр.ИспользоватьВладельца(Клиент);
	//Если спр.ВыбратьЭлементыПоРеквизиту("ТовГруппа",Товар,1,0) = 0 Тогда
	//	Род=Товар.Родитель;
	//	Пока (спр.ВыбратьЭлементыПоРеквизиту("ТовГруппа",Род,1,0)=0) И (Род.Уровень()>1) Цикл 
	//		Род=Род.Родитель;
	//	КонецЦикла;
	//КонецЕсли;
	//Пока спр.ПолучитьЭлемент() = 1 Цикл
	//	Если спр.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;
	//	Если спр.КатегорияЦены <> КатегорияЦены Тогда Продолжить; КонецЕсли;
	//	Есть = 1;
	//	Возврат спр.ПроцентСкидки.Получить(пДата);
	//КонецЦикла;
	Возврат 0;
КонецФункции

Процедура семЗаголовокОкна(конт) Экспорт
	Если конт.Выбран() = 0 Тогда
		пВремя = "Новый"; 
		пСтатус = "";
	ИначеЕсли конт.ПометкаУдаления() = 1 Тогда
		пВремя = конт.ПолучитьВремя(); 
		пСтатус = "Удален";
	Иначе
		пВремя = конт.ПолучитьВремя(); 
		пСтатус = ?(конт.Проведен() = 1,"Проведен","Не проведен");
	КонецЕсли;
	конт.Форма.Заголовок(Шаблон("[конт.ПредставлениеВида()] [конт.НомерДок] ([пВремя]) [пСтатус]"));
КонецПроцедуры

Процедура семИзменитьНомерНакл( конт ) Экспорт
	Если Пользователь.РазрИзмНомераНакл = 1 Тогда
		Путь = КаталогИБ() + "ExtForms\ИзмНомерНакл.ert";
		Если ФС.СуществуетФайл( Путь ) = 0 Тогда Возврат; КонецЕсли;
		сп = СоздатьОбъект( "СписокЗначений" );
		сп.Установить("НомерДок", конт.НомерДок);
		сп.Установить("ЕстьНомер", конт.ЕстьНомер);
		ОткрытьФормуМодально( "Обработка", сп, Путь );
		
		Если сп.Получить("Результат") = 1 Тогда
			конт.НомерДок = сп.Получить( "НомерДок" );
			конт.ЕстьНомер = сп.Получить( "ЕстьНомер" );
		КонецЕсли;
		//НомерНакл = конт.НомерДок;
		//Если ВвестиСтроку(НомерНакл,"Введите новый номер накладной",15)=1 Тогда
		//	конт.НомерДок = НомерНакл;
		//КонецЕсли;
	Иначе
		Сообщить("У вас нет прав изменять номер накладной.","I");
	КонецЕсли;
КонецПроцедуры

Процедура семИзменитьНомерДок( конт ) Экспорт
	
	Если конт.Вид()="СчетОбщий" Тогда
		Конт.УстановитьНовыйНомер(Шаблон(СокрЛП(Константа.ПрефиксЭлЗаявкиСводнаяФормула)));
	КонецЕсли;
КонецПроцедуры


Функция семПрисвоитьНовыйНомер( конт ) Экспорт
	
	Если (Константа.IDD="0000006") И (Конт.ДатаДок>='01.01.2010') Тогда
		Возврат 1;
	КонецЕсли;

	//присвоение номеров накладным происходит только в центральной базе
	Если ТекущаяИБЦентральная() = 0 Тогда
		Возврат 1;
	КонецЕсли;
	//не присваиваем номер экспортным накладным
	Если конт.Вид() = "РасходнаяНакладная" Тогда
		Если конт.Клиент.Выбран() = 1 Тогда
			Если конт.Клиент.Страна <> Константа.СтранаРезидент Тогда
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//не присваиваем номер белым накладным
	Если (конт.Вид() = "РасходнаяНакладная") или (конт.Вид() = "РасходнаяНакладнаяНал") Тогда
		Если конт.БН = Да Тогда
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	//не присваиваем номер клиенту DAZADI PIRC REST (11602)
	Если глЕстьРеквизитШапки("Клиент",конт.Вид()) = 1 Тогда
		Если конт.Клиент.Выбран() = 1 Тогда
			Если конт.Клиент.Код = "11602" Тогда
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//не присваиваем номер уже записанным накладным
	Если конт.Выбран() = 1 Тогда Возврат 1; КонецЕсли;
	//не присваиваем номер на складах, где действует автонумерация накладных
	Склад = конт.Склад;
	Если Склад.Автонумерация = 1 Тогда Возврат 1; КонецЕсли;
	
	//не во всех документах надо присваивать номер строгой отчетности
	Если Вопрос( "Присвоить номер строгой отчетности?", "Да+Нет" ) <> "Да" Тогда
		Возврат 1;
	КонецЕсли;
	
	НовыйНомер = -1;
	спр = СоздатьОбъект( "Справочник.СерииНакладных" );
	спр.ВыбратьЭлементы();
	Пока спр.ПолучитьЭлемент() = 1 Цикл
		Если спр.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;
		Если Склад.ПринадлежитГруппе(спр.Склад) = 0 Тогда Продолжить; КонецЕсли;
		НовыйНомер = ?(спр.Тек <= спр.Кон,спр.Тек,0);
		Если НовыйНомер > 0 Тогда Прервать; КонецЕсли;
	КонецЦикла;
	Если НовыйНомер > 0 Тогда
		спр.Тек = НовыйНомер+1;
		Попытка спр.Записать();
		Исключение 
			Сообщить("Ошибка присвоения нового номера!!!","!");
			Сообщить("Не удалось изменить счетчик номеров.","I");
			СтатусВозврата( 0 ); Возврат 0;
		КонецПопытки;
	ИначеЕсли НовыйНомер = 0 Тогда
		Сообщить("Ошибка присвоения нового номера!!!","!");
		Сообщить("У данного склада не осталось свободных номеров.","I");
		СтатусВозврата( 0 ); Возврат 0;
	Иначе
		Возврат 1;
	КонецЕсли;
	НовыйНомер = Прав("000000"+НовыйНомер,6);
	конт.НомерДок = Шаблон("[спр.Серия][НовыйНомер]");
	конт.ЕстьНомер = 1;
	Возврат 1;
КонецФункции

Функция семПроверкаУникальностиНомера( конт ) Экспорт
	// проверяет уникальность номера строгой отчетности
	док = СоздатьОбъект("Документ");
	Если док.ВыбратьПоНомеру( СокрЛП(конт.НомерДок),конт.ДатаДок,"РасходнаяНакладная" ) = 1 Тогда
		Пока док.ПолучитьДокумент() = 1 Цикл
			Если док.ТекущийДокумент() = конт.ТекущийДокумент() Тогда Продолжить; КонецЕсли;
			Сообщить("Нарушена уникальность номера строгой отчетности!!!","!");
			Сообщить(Шаблон("Данный номер уже используется в документе [док.ТекущийДокумент()] от [док.ДатаДок]."),"I");
			СтатусВозврата( 0 ); Возврат 0;
		КонецЦикла;
	КонецЕсли;
	Если док.ВыбратьПоНомеру( СокрЛП(конт.НомерДок),конт.ДатаДок,"РасходнаяНакладнаяНал" ) = 1 Тогда
		Пока док.ПолучитьДокумент() = 1 Цикл
			Если док.ТекущийДокумент() = конт.ТекущийДокумент() Тогда Продолжить; КонецЕсли;
			Сообщить("Нарушена уникальность номера строгой отчетности!!!","!");
			Сообщить(Шаблон("Данный номер уже используется в документе [док.ТекущийДокумент()] от [док.ДатаДок]."),"I");
			СтатусВозврата( 0 ); Возврат 0;
		КонецЦикла;
	КонецЕсли;
	Если док.ВыбратьПоНомеру( СокрЛП(конт.НомерДок),конт.ДатаДок,"ПеремещениеДепартамент" ) = 1 Тогда
		Пока док.ПолучитьДокумент() = 1 Цикл
			Если док.ТекущийДокумент() = конт.ТекущийДокумент() Тогда Продолжить; КонецЕсли;
			Сообщить("Нарушена уникальность номера строгой отчетности!!!","!");
			Сообщить(Шаблон("Данный номер уже используется в документе [док.ТекущийДокумент()] от [док.ДатаДок]."),"I");
			СтатусВозврата( 0 ); Возврат 0;
		КонецЦикла;
	КонецЕсли;
	Если док.ВыбратьПоНомеру( СокрЛП(конт.НомерДок),конт.ДатаДок,"Перемещение" ) = 1 Тогда
		Пока док.ПолучитьДокумент() = 1 Цикл
			Если док.ТекущийДокумент() = конт.ТекущийДокумент() Тогда Продолжить; КонецЕсли;
			Сообщить("Нарушена уникальность номера строгой отчетности!!!","!");
			Сообщить(Шаблон("Данный номер уже используется в документе [док.ТекущийДокумент()] от [док.ДатаДок]."),"I");
			СтатусВозврата( 0 ); Возврат 0;
		КонецЦикла;
	КонецЕсли;
	Возврат 1;
КонецФункции

Функция семВыбратьКомплектовщика() Экспорт
	спр = СоздатьОбъект( "Справочник.Комплектовщики" );
	Если спр.Выбрать( "Выберите комплектовщика", "ФормаСписка" ) = 1 Тогда
		Возврат спр.ТекущийЭлемент();
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Функция семПолучитьСписокПодчКлиентов( пКлиент ) Экспорт
	
	//BEGIN PR 14.07.2015
	Запрос = СоздатьОбъект( "ODBCRecordSet" );
	ТекстЗапроса = "SELECT Контрагенты.ID [Клиент $Справочник.Контрагенты]
	|				FROM $Справочник.Контрагенты AS Контрагенты With (NOLOCK)
	|				WHERE ($Контрагенты.КлГруппа = :Клиент)	AND (Контрагенты.ISMARK = 0)";

	Запрос.УстановитьТекстовыйПараметр("Клиент",пКлиент);
	Возврат Запрос.ВыполнитьИнструкцию(ТекстЗапроса);	
	//END PR 
	
	//Если Запрос.Выполнить( "
	//|Без итогов;
	//|КлГруппа = Справочник.Контрагенты.КлГруппа;
	//|Клиент = Справочник.Контрагенты.ТекущийЭлемент;
	//|Группировка Клиент без групп без упорядочивания;
	//|Условие ( КлГруппа = пКлиент );"
	//) = 0 Тогда
	//	Сообщить( "Запрос не выполнился", "!" );
	//	Возврат табл;
	//КонецЕсли;
	//Запрос.Выгрузить(табл,0,0);
	//Возврат табл;
КонецФункции

Функция семТекСтрана() Экспорт
	Возврат Константа.СтранаРезидент.Код;
КонецФункции

Функция семПолучитьЦенуТовара( пТовар, пКатегория, пДата ) Экспорт
	
	ТекстЗапроса="SELECT Цены.ID [ТекущийЭлемент $Справочник.Цены],
	|					 $ПоследнееЗначение.Цены.Цена(Цены.ID, :НаДату) Цена,
	|					 $Цены.Валюта [Валюта $Справочник.Валюты],
	|					 CASE WHEN $КатегорииЦен.Розница=1 THEN 1 ELSE $Единицы.Коэффициент END ЕдиницаКоэффициент,
	|					 $КатегорииЦен.Точность КатегорияЦеныТочность,
	|					 $Цены.ЗапретСкидки ЗапретСкидки
//	|					 $ПоследнееЗначение.Валюты.Курс($Цены.Валюта, :НаДату) Курс
	|			  FROM $Справочник.Цены AS Цены (NOLOCK)
	|			  LEFT JOIN $Справочник.Единицы Единицы (NOLOCK) ON Единицы.ID=$Цены.Единица
	|			  INNER JOIN $Справочник.КатегорииЦен КатегорииЦен (NOLOCK) ON КатегорииЦен.ID=$Цены.КатегорияЦены
	|			  WHERE (Цены.ISMARK = 0) AND (Цены.PARENTEXT = :Владелец)
	|					AND $Цены.КатегорияЦены = :КатЦены
	|";

	глЗапрос.УстановитьТекстовыйПараметр("Владелец",пТовар);
	глЗапрос.УстановитьТекстовыйПараметр("КатЦены",пКатегория);
	глЗапрос.УстановитьТекстовыйПараметр("НаДату",пДата);
	
	
	Табл=глЗапрос.ВыполнитьИнструкцию(ТекстЗапроса);
	Если Табл.КоличествоСтрок()>0 Тогда
		Табл.ПолучитьСтрокуПоНомеру(1);
		Возврат Табл;
	Иначе
		Возврат ПолучитьПустоеЗначение( "Справочник.Цены" );
	КонецЕсли;
	
	//спр = СоздатьОбъект( "Справочник.Цены" );
	//спр.ИспользоватьВладельца( пТовар );
	//спр.ВыбратьЭлементы();
	//Пока спр.ПолучитьЭлемент() = 1 Цикл
	//	Если спр.ПометкаУдаления() = 1 Тогда 
	//		Продолжить; 
	//	КонецЕсли;
	//	Если спр.КатегорияЦены = пКатегория Тогда
	//		Возврат спр.ТекущийЭлемент();
	//	КонецЕсли;
	//КонецЦикла;
КонецФункции

Функция семМожноВводитьНаОснованииСчета( пДокОснование, ВидДок = "") Экспорт
	Если (пДокОснование.Вид() <> "Счет") И (пДокОснование.Вид() <> "ПретензияПолученная") Тогда Возврат 1; КонецЕсли;
	док = СоздатьОбъект( "Документ" );
	Если док.ВыбратьПодчиненныеДокументы( , , пДокОснование ) = 0 Тогда Возврат 1; КонецЕсли;
	Пока док.ПолучитьДокумент() = 1 Цикл
		Если док.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;
		Если (Найти(док.Вид(),ВидДок) > 0) Тогда 
		Иначе
			Продолжить;
		КонецЕсли;
		Ответ = Вопрос( "Ввод на основании запрещен.
		|Документ уже имеет подчиненные документы.
		|Показать структуру подчиненности?", "Да+Нет" );
		Если Ответ = "Да" Тогда СформироватьДеревоДокументов( пДокОснование ); КонецЕсли;
		Возврат 0;
	КонецЦикла;
	Возврат 1;
КонецФункции

//******************************************************************************
// глСформироватьСписокОснований(Док)
//
// Параметры: 
//  Док - Контекст (формы) документа
//
// Возвращаемое значение: 
//  Строку списка через запятую идентификаторов документов, 
//  которые могут являться основанием для документа, 
//  переданного в виде параметра
//
// Описание: 
//  Функция формирует список документов, которые могут являться основанием
//  для документа, переданного в виде параметра, 
//
Функция глСформироватьСписокОснований(Док) Экспорт            
	
	Перем СтрокаВидов, ВидДокумента, Счетчик, СчетчикВложенный;
	Перем АнализДок, ВидАнализДок, ВводимыйДок;
	
	СтрокаВидов ="";
	ВидДокумента=Док.Вид();
	
	// нам нужно найти документы, на основании которых можно вводить наш документ
	Для Счетчик=1 По Метаданные.Документ() Цикл
		
		АнализДок 		= Метаданные.Документ(Счетчик);
		ВидАнализДок 	= АнализДок.Идентификатор;
		
		Для СчетчикВложенный =1 По АнализДок.ВводимыеНаОснованииДокументы.Количество() Цикл
			
			ВводимыйДок=АнализДок.ВводимыеНаОснованииДокументы.Получить(СчетчикВложенный);
			Если ВидДокумента = ВводимыйДок.Идентификатор Тогда
				// то есть наш документ вводится на основании анализируемого
				Если ПустаяСтрока(СтрокаВидов) = 0 Тогда
					СтрокаВидов = СтрокаВидов + ",";
				КонецЕсли;
				СтрокаВидов = СтрокаВидов + ВидАнализДок;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтрокаВидов;
	
КонецФункции // глСформироватьСписокОснований()

//******************************************************************************
// глВыбратьОснование(Док)
//
// Параметры:
//  Док - Контекст (формы) документа
//
// Возвращаемое значение: 
//  Выбранный документ-основание, если не выбрали, то возвращает пустой документ
//
// Описание: 
//  Функция формирует список документов, которые могут являться основанием
//  для документа, переданного в виде параметра, открывает диалог выбора
//  Документа-основания и возвращает выбранный документ
//
Функция глВыбратьОснование(Док) Экспорт
	
	Перем Основание, СтрокаВидов;
	
	Если ПустоеЗначение(Док) = 1 Тогда
		// Ничего не передали
		Возврат "";
	КонецЕсли;
	
	Основание=СоздатьОбъект("Документ");   
	
	// Формируем список возможных оснований
	СтрокаВидов = глСформироватьСписокОснований(Док);
	
	Если ПустоеЗначение(СтрокаВидов) = 0 Тогда
		// есть документы, вводимые на основании вида текущего документа
		Основание.ВидыДляВыбора(СтрокаВидов);
		Если Основание.Выбрать("Выбор документа основания")=1 Тогда
			ДокОснование = Основание.ТекущийДокумент();
		КонецЕсли;
	Иначе           
		// Основания быть не может
		Предупреждение("У данного документа не может быть документа-основания.", 60);
	КонецЕсли;   
	
	Возврат Основание.ТекущийДокумент();
	
КонецФункции // глВыбратьОснование()

//******************************************************************************
// глПолучитьСписокВводимыхНаОсновании(Конт)
//
// Параметры
//  Конт - документ или контекст формы документа, на основании которого будет
//           вводится новый документ
//
// Возвращаемое значение: 
//  Список значений, содержащий идентификаторы и 
//  представления видов документов
//
// Описание: 
//  На основе объекта "Метаданные" формируем список видов документов
// 	которые можно вводить на основании заданного
//
Функция глПолучитьСписокВводимыхНаОсновании(Конт) Экспорт
	Перем СписокВидов, ВидДок;
	Перем Счетчик, Позиция;
	Перем ИД, Представление;                      
	
	СписокВидов = СоздатьОбъект("СписокЗначений");
	
	ВидДок = Конт.Вид();
	Для Счетчик=1 По Метаданные.Документ(ВидДок).ВводимыеНаОснованииДокументы.Количество() Цикл
		ИД = Метаданные.Документ(ВидДок).ВводимыеНаОснованииДокументы.Получить(Счетчик).Идентификатор;
		Представление = Метаданные.Документ(ВидДок).ВводимыеНаОснованииДокументы.Получить(Счетчик).Представление();
		СписокВидов.ДобавитьЗначение(ИД,Представление);
	КонецЦикла;
	
	Возврат СписокВидов;
КонецФункции // глПолучитьСписокВводимыхНаОсновании()

//******************************************************************************
// глЗначенияПериодическихРеквизитов(КонтекстФормы, НачальнаяДата=0, КонечнаяДата=0,
//                                   ВидимыеРеквизиты=0, СвязьРеквизитов=0)
//
// Параметры:
//  КонтекстФормы    - "ГрупповойКонтекст" - контекст формы элемента или списка 
//                     справочника, в котором редактируются периодические реквизиты.
//  НачальнаяДата    - "дата" - дата, с которой следует показвать значения реквизитов.
//                     если не передана, то '00.00.0000'.
//  КонечнаяДата     - "дата" - дата, по которую следует показвать значения реквизитов.
//                     если не передана, то '31.12.9999'.
//  ВидимыеРеквизиты - "строка" - идентификаторы периодических реквизитов,
//                     значения которых надо показать, разделенные запятыми;
//                     если не передана - показываются все реквизиты.
//  СвязьРеквизитов  - 0 - реквизиты нельзя редактировать независимо,
//                     1 - реквизиты можно редактировать независимо;
//                     если не передано - 0.
//
// Возвращаемое значение:
//  0                   - если обработка ЗначенияПериодическихРеквизитов не открыта.
//  "ГрупповойКонтекст" - контекст формы обработки ЗначенияПериодическихРеквизитов.
//
// Описание:
//  Функция предназначена для вызова из форм элементов и списков справочников, 
//  имеющих периодические реквизиты, по нажатию кнопки "История".
//  Вызывает обработку "ЗначенияПериодическихРеквизитов", в которой пользователь 
//  может просмотреть историю значений периодических реквизитов, удалить значения.
//  Из обработки можно так же открыть форму элемента на нужную дату просмотра и 
//  редактирования значений периодических реквизитов.
//
Функция глЗначенияПериодическихРеквизитов(КонтекстФормы, НачальнаяДата=0, КонечнаяДата=0, ВидимыеРеквизиты=0, СвязьРеквизитов=0) Экспорт
	// Если элемент не записан, то вместо выбора даты вызывается запись.
	Если ПустоеЗначение(КонтекстФормы.ТекущийЭлемент()) = 1 Тогда
		КонтекстФормы.СтрокаДействийФормы = "# Записать?";
		Возврат 0;
	КонецЕсли;
	
	// Список параметров обработки ЗначенияПериодическихРеквизитов.
	Параметр = СоздатьОбъект("СписокЗначений");
	Параметр.Установить("ТекущийОбъект",    КонтекстФормы.ТекущийЭлемент());
	Параметр.Установить("Текущая_Дата",     КонтекстФормы.ИспользоватьДату());
	Параметр.Установить("НачальнаяДата",    НачальнаяДата);
	Параметр.Установить("КонечнаяДата",     КонечнаяДата);
	Параметр.Установить("ВидимыеРеквизиты", ВидимыеРеквизиты);
	Параметр.Установить("СвязьРеквизитов",  СвязьРеквизитов);
	
	ОткрытьФорму("Обработка.ЗначенияПериодическихРеквизитов", Параметр );
	
	Если ТипЗначенияСтр(Параметр) <> "ГрупповойКонтекст" Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Параметр;
	
КонецФункции // глЗначенияПериодическихРеквизитов()

Функция глОстатокТовараНаСкладе(Товар,Склад) Экспорт
	Если Склад.Выбран()=1 Тогда
		Возврат Макс(Регистр.ОстаткиТоваров.СводныйОстаток(Товар,Склад,,"ОстатокТовара"),0);
	Иначе
		Возврат Регистр.ОстаткиТоваров.СводныйОстаток(Товар,,,"ОстатокТовара");
	КонецЕсли;
КонецФункции

Функция глСвободныйОстатокТовараНаСкладе(Товар,Склад) Экспорт
	Рез=Регистр.РезервыТоваров.СводныйОстаток(Товар,,"РезервТовара");
	ОстНед=Регистр.НедоступныеТовары.СводныйОстаток(Товар,,,,"ОстатокТовара");
	Если Склад.Выбран()=1 Тогда
		Возврат Макс(Регистр.ОстаткиТоваров.СводныйОстаток(Товар,Склад,,"ОстатокТовара")-Рез,0);
	Иначе
		Возврат Регистр.ОстаткиТоваров.СводныйОстаток(Товар,,,"ОстатокТовара")-Рез-ОстНед;
	КонецЕсли;
КонецФункции

Процедура семПроверкаМинОтргКолва( конт ) Экспорт
	Если Пользователь.РазрПродМеньшеМинКол = 1 Тогда 
		Возврат; 
	КонецЕсли;

	Если глЕстьРеквизитШапки("ВидЗаявки",Конт.Вид())=1 Тогда
		Если Конт.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаНаВозврат Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если конт.Товар.Выбран() = 0 Тогда 
		Возврат; 
	КонецЕсли;
	пОтгрКол = конт.Товар.ОтгрКол;
	Если пОтгрКол = 0 Тогда 
		Возврат; 
	КонецЕсли;
	
	пКол = Окр(конт.Количество * конт.Коэффициент,3);
	
	Если пКол = 0 Тогда 
		Возврат; 
	КонецЕсли;
	пКоэфКратн = Окр(пКол / пОтгрКол,3);
	
	
	Если Цел( пКоэфКратн ) <> пКоэфКратн Тогда
		пПравКолво = пОтгрКол*Окр( пКоэфКратн, 0, 1 );
		пПравКолво = макс( пОтгрКол, пПравКолво ) / конт.Коэффициент;
		пОтгрКол = Окр(пОтгрКол / конт.Коэффициент,3);

		пЕдИзм = конт.Единица.Единица;

		//если единица не кг или литры и эта единица не базовая - тогда округляем до целого
		Если (пЕдИзм  <> Перечисление.ЕдиницыИзмерения.Килограмм) И (пЕдИзм  <> Перечисление.ЕдиницыИзмерения.Литр) И (конт.Коэффициент<>1) Тогда
			пПравКолво = Окр(пПравКолво,0);		
			пОтгрКол  = Окр(пОтгрКол ,0);
		КонецЕсли;

		Предупреждение( "
		|НЕПРАВИЛЬНОЕ КОЛИЧЕСТВО !!!
		|Мин. отгруз. кол-во:	" +Шаблон( "[пОтгрКол  #Ч15.2, ] ([пЕдИзм])" ) + "
		|Количество изменено на	"+ Шаблон( "[пПравКолво  #Ч15.2, ] ([пЕдИзм])" ) + "
		);
		конт.Количество = пПравКолво;
	КонецЕсли;
КонецПроцедуры

Функция семРазрешитьПревышениеКредита( конт ) Экспорт
	Попытка пГрОбработка = конт.ГрупповаяОбработка();
	Исключение пГрОбработка = 0;
	КонецПопытки;
	Возврат ?( пГрОбработка = 1, Да, Константа.РазрешитьПревышениеКредита )
КонецФункции

Функция семРазрешитьПродаватьРезерв( конт ) Экспорт
	Попытка пГрОбработка = конт.ГрупповаяОбработка();
	Исключение пГрОбработка = 0;
	КонецПопытки;
	
	Если глЕстьРеквизитШапки("ПризнакНакладной",Конт.Вид())=1 Тогда
		Если Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.Хранение Тогда
			пГрОбработка = 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ?( пГрОбработка = 1, Да, Константа.РазрешитьПродаватьРезерв )
КонецФункции

Функция семВыводКодаНДС( пКлиент, пДата ) Экспорт
	Попытка 
		НеПлательщик = пКлиент.НеПлательщик.Получить( пДата );
	Исключение
		НеПлательщик = пКлиент.НеПлательщик;
	КонецПопытки;
	Возврат ?( НеПлательщик = 1, "", ?(пКлиент.Страна.Код = "LV","LV","")+пКлиент.ИНН );
КонецФункции

Функция семПрошлоВремени( Нач, Кон ) Экспорт
	начЧ = Число( Лев( Нач, 2 ) ); конЧ = Число( Лев( Кон, 2 ) );
	начМ = Число( Сред( Нач, 4, 2 ) ); конМ = Число( Сред( Кон, 4, 2 ) );
	начС = Число( Прав( Нач, 2 ) ); конС = Число( Прав( Кон, 2 ) );
	начСек = начЧ*3600+начМ*60+начС;
	конСек = конЧ*3600+конМ*60+конС;
	
	С = конСек - начСек;
	Ч = Цел( С / 3600 ); С = С - Ч*3600;
	М = Цел( С / 60 ); С = С - М*60;
	Возврат Прав( "00" + Ч, 2 )+":"+Прав( "00" + М, 2 )+":"+Прав( "00" + С, 2 );
КонецФункции

Функция семПолучитьВалютуПоНаим( пНаим ) Экспорт
	спр = СоздатьОбъект( "Справочник.Валюты" );
	Если спр.НайтиПоНаименованию( пНаим, 0, 1 ) = 1 Тогда
		Возврат спр.ТекущийЭлемент();
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Функция семЗаполненыВсеРеквизиты( Конт, спРеквизитов ) Экспорт
	Если НазваниеНабораПрав() = "Литва_Администратор" Тогда Возврат 1; КонецЕсли; // для ввода наименований
	стр = "";
	Пока СтрДлина( спРеквизитов ) > 0 Цикл
		поз = Найти( спРеквизитов, "," );
		Если поз = 0 Тогда 
			текРеквизит = спРеквизитов; 
			спРеквизитов = "";
		Иначе
			текРеквизит = Сред( спРеквизитов, 1, поз - 1 );
			спРеквизитов = Сред( спРеквизитов, поз+1 );
		КонецЕсли;
		Если текРеквизит = "Код" Тогда
			Если ПустоеЗначение( Конт.Код ) = 1 Тогда
				стр = стр + РазделительСтрок + " - " + текРеквизит;
			КонецЕсли;
		ИначеЕсли текРеквизит = "Наименование" Тогда
			Если ПустоеЗначение( Конт.Наименование ) = 1 Тогда
				стр = стр + РазделительСтрок + " - " + текРеквизит;
			КонецЕсли;
		ИначеЕсли ПустоеЗначение( Конт.ПолучитьАтрибут( текРеквизит ) ) = 1 Тогда
			Попытка
				Объект = Метаданные.Справочник( Конт.Вид() ).Реквизит( текРеквизит );
			Исключение
				Объект = Метаданные.Документ( Конт.Вид() ).РеквизитШапки( текРеквизит );
			КонецПопытки;
			стр = стр + РазделительСтрок + " - " + ?( ПустоеЗначение( Объект.Синоним ) = 0, Объект.Синоним, Объект.Идентификатор );
		КонецЕсли;	
	КонецЦикла;
	Если ПустоеЗначение( стр ) = 1 Тогда 
		Возврат 1;
	Иначе
		Предупреждение( "Не заполнены реквизиты:" + стр );
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция семПроверкаПравильностиРеквизита( Конт, спРеквизитов ) Экспорт
	Если НазваниеНабораПрав() = "Литва_Администратор" Тогда Возврат 1; КонецЕсли; // для ввода наименований
	стр = "";
	Пока СтрДлина( спРеквизитов ) > 0 Цикл
		поз = Найти( спРеквизитов, "," );
		Если поз = 0 Тогда 
			текРеквизит = спРеквизитов; 
			спРеквизитов = "";
		Иначе
			текРеквизит = Сред( спРеквизитов, 1, поз - 1 );
			спРеквизитов = Сред( спРеквизитов, поз+1 );
		КонецЕсли;
		Если текРеквизит = "ПерсональныйКод" Тогда
			Если ( СтрДлина(Конт.ПерсональныйКод) <> 12 )
			или ( Сред(Конт.ПерсональныйКод,7,1)<>"-" )
			или ( Число(Лев(Конт.ПерсональныйКод,6)) = 0 )
			или ( Число(Прав(Конт.ПерсональныйКод,5)) = 0 )
			Тогда
				стр = стр + РазделительСтрок + " - " + текРеквизит;
			КонецЕсли;
			Если ПустоеЗначение( Конт.Код ) = 1 Тогда
				стр = стр + РазделительСтрок + " - " + текРеквизит;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	Если ПустоеЗначение( стр ) = 1 Тогда 
		Возврат 1;
	Иначе
		Предупреждение( "Не заполнены реквизиты:" + стр );
		Возврат 0;
	КонецЕсли;
КонецФункции         

//PR
Процедура глПриОткрытии(Конт,Реж) Экспорт
	
	Если ПустоеЗначение(Пользователь.ГруппаСкладов)=0 Тогда
		Конт.ВыбСклад=Пользователь.ГруппаСкладов;     
		
		Попытка
			Конт.Форма.КнопкаСклад.Доступность(0);
		Исключение
		КонецПопытки;
		//Конт.Форма.ВыбСклад.Доступность(0);
	КонецЕсли;
	
КонецПроцедуры
//PR


//PR
Функция глПроверкаВыбораСклада(ВыбСклад) Экспорт
	
	Если (ПустоеЗначение(Пользователь.ГруппаСкладов)=0) Тогда
		Если (ПустоеЗначение(ВыбСклад)=1) ИЛИ (ВыбСклад.ПринадлежитГруппе(Пользователь.ГруппаСкладов)=0) Тогда
			Возврат Пользователь.ГруппаСкладов;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВыбСклад;
	
КонецФункции
//PR

Функция глLV_1C_WIN(Стр) Экспорт
	Перем СтрРез;   
	СтрLV = "зыоврмнпюитЗЫОВРМНПЮИТ";                                
	Стр1C = "§Ѕ®ўєЄ°ІїҐґ¦ј¬Ў№ЁЇ±ѕЈі";
	СтрРез = Стр;
	Для П1=1 По 22 Цикл
		СтрРез = СтрЗаменить(СтрРез,Сред(Стр1C,П1,1),Сред(СтрLV,П1,1)); 
	КонецЦикла;        
	СтрРез = СтрЗаменить(СтрРез,"|",Симв(10)+Симв(13)); 
	Возврат  СтрРез;	
КонецФункции   

//Процедура Блокировка() Экспорт              
//
//	Если НазваниеНабораПрав() <> "Администратор" Тогда
//		Если Константа.БлокировкаСистемы = Перечисление.СостояниеБлокировкиСистемы.ПлавныйВыход Тогда
//		    Предупреждение("Просьба сохранить все изменения и выйти из системы !!!",10); 
//		ИначеЕсли Константа.БлокировкаСистемы = Перечисление.СостояниеБлокировкиСистемы.ПринудительныйВыход Тогда    
//			Если БлокировкаСистемыОсталось = -1 Тогда
//				БлокировкаСистемыОсталось = 6;        
//			КонецЕсли;
//			
//			Если БлокировкаСистемыОсталось = 0 Тогда
//				ЗавершитьРаботуСистемы(1);
//			Иначе
//				Предупреждение("Производится принудительный выход из системы!"+РазделительСтрок+"Сохраните не сохраненные документы."+РазделительСтрок+"Система будет закрыта через "+строка(БлокировкаСистемыОсталось/2)+" минуты",10);
//				БлокировкаСистемыОсталось = БлокировкаСистемыОсталось - 1;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;	 
//КонецПроцедуры

Функция АдресСтрокой( пАдрес, начУр, конУр, пРазд ) Экспорт
	сп = СоздатьОбъект( "СписокЗначений" );
	сп.ДобавитьЗначение( "пАдрес.Родитель.Родитель.Родитель.Код", "1" );
	сп.ДобавитьЗначение( "пАдрес.Родитель.Родитель.Код" , "2" );
	сп.ДобавитьЗначение( "пАдрес.Родитель.Код" , "3" );
	сп.ДобавитьЗначение( "пАдрес.Код" , "4" );
	текУр = пАдрес.Уровень();
	начУр = ?( начУр > текУр, текУр, начУр );
	конУр = ?( конУр > текУр, текУр, конУр );
	стр = "";
	Для н = начУр по конУр Цикл
		стр = стр + "[" + сп.ПолучитьЗначение( н+4-текУр ) + "]" + ?( н = конУр, "", пРазд );
	КонецЦикла;
	Возврат Шаблон( стр );
КонецФункции


//подготваливает таблицу с товаром для сортировки 
Процедура глСортТоварДляКомплектации(Конт,табл) Экспорт
	табл.НоваяКолонка("Группа");
	табл.НоваяКолонка("СклАдрес");
	табл.НоваяКолонка("Сорт");
	
	спр = СоздатьОбъект( "Справочник.СкладскиеАдреса" );
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку() = 1 Цикл
		промТовар = табл.Товар;
		
		Если Конт.Склад.ТипСклада=Перечисление.ТипыСкладов.СкладНеликвидов Тогда
			табл.Группа = "NOCENOTIE PRODUKTI";
			табл.СклАдрес  = "";
			табл.Сорт = 0;
		Иначе
		
			Если Конт.Склад.ТипСклада=Перечисление.ТипыСкладов.СкладРаспродажи Тогда
				табл.Группа = "IZPARDO№ANA";
				табл.СклАдрес  = "";
				табл.Сорт = 0;
			КонецЕсли;
			рез=спр.ВыбратьЭлементыПоРеквизиту("Товар",промТовар,0,0);
			Ячейка="";
			Если рез=1 Тогда
				Пока Спр.ПолучитьЭлемент() = 1 Цикл
					Ячейка = спр.ТекущийЭлемент();
					Если Ячейка.Родитель.Родитель.Родитель.Склад=Конт.Склад Тогда
						Если Конт.Склад.ТипСклада=Перечисление.ТипыСкладов.СкладРаспродажи Тогда
							табл.Группа = "IZPARDO№ANA "+АдресСтрокой( Ячейка, 1, 1, "" ) + Шаблон( " ([Ячейка.Родитель.Родитель.Родитель.МестоХранения.УсловияХранения])" );
						Иначе
							табл.Группа = АдресСтрокой( Ячейка, 1, 1, "" ) + Шаблон( " ([Ячейка.Родитель.Родитель.Родитель.МестоХранения.УсловияХранения])" );
						КонецЕсли;
						табл.СклАдрес = АдресСтрокой( Ячейка, 2, 4, "-" );
						табл.Сорт = 0;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ПустоеЗначение(Ячейка)=1 Тогда // если ячейка для товара не задана
				Если Конт.Склад.ТипСклада=Перечисление.ТипыСкладов.СкладРаспродажи Тогда
				Иначе
					табл.Группа = "ййй";
				КонецЕсли;
				Если промТовар.МестоХранения.Выбран() = 1 Тогда
					табл.СклАдрес = промТовар.МестоХранения.УсловияХранения;
					табл.Сорт = промТовар.МестоХранения.Код;
				Иначе
					табл.СклАдрес = "не указан";
					табл.Сорт = 99;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	табл.Сортировать( "+Группа,+Сорт,+СклАдрес" );
	
КонецПроцедуры     


Процедура СозданиеИндексовТаблиц()
	
	Запрос=СоздатьОбъект("ODBCRecordSet");
	
	РасхНалИД=MDW.ИДДокумента("РасходнаяНакладнаяНал");
	СчетИД=MDW.ИДДокумента("Счет");
	ПриходИД=MDW.ИДДокумента("ПриходнаяНакладная");
	СчетДатаПоставкиИД=MDW.ИДРеквизитаШапки("Счет","ДатаПоставки");
	СчетКлиентИД=MDW.ИДРеквизитаШапки("Счет","Клиент");
	СчетКлиентГруппаИД=MDW.ИДРеквизитаШапки("Счет","КлГруппа");
	СчетВидОплатыИД=MDW.ИДРеквизитаШапки("Счет","ВидОплаты");
	ПриходКлиентИД=MDW.ИДРеквизитаШапки("ПриходнаяНакладная","Клиент");
	СчетТоварИД=MDW.ИДРеквизитаТабличнойЧасти("Счет","Товар");
	ЗаказПоставщикуИД=MDW.ИДДокумента("ЗаказПоставщику");
	ЗаказПоставщикуКлиентИД=MDW.ИДРеквизитаШапки("ЗаказПоставщику","Клиент");
	ЗаказПоставщикуОснСрокПоставкиИД=MDW.ИДРеквизитаШапки("ЗаказПоставщику","ОснСрокПоставки");
		
	//***  ИНДЕКС по Клиенту и дате доставки в шапке счета
	//{
	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysindexes
	|			  WHERE     (name = 'P1C_DELIVERY_DATE')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если кол=0 Тогда
		ТекстЗапроса="CREATE 
		|			  INDEX [P1C_DELIVERY_DATE] ON [dbo].[DH"+СчетИД+"] ([SP"+СчетДатаПоставкиИД+"], [SP"+СчетКлиентИД+"])
		|			  ON [PRIMARY]
		|";
		
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);
		Сообщить("Успешно создан индекс P1C_DELIVERY_DATE!");
	КонецЕсли;
	//}

	
	//***  ИНДЕКС по КлГруппа  в шапке счета
	//{
	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysindexes
	|			  WHERE     (name = 'P1C_ClientGroup')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если кол=0 Тогда
		ТекстЗапроса="CREATE 
		|			  INDEX [P1C_ClientGroup] ON [dbo].[DH"+СчетИД+"] ([SP"+СчетКлиентГруппаИД+"],[SP"+СчетВидОплатыИД+"])
		|			  ON [PRIMARY]
		|";
		
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);
		Сообщить("Успешно создан индекс P1C_ClientGroup!");
	КонецЕсли;
	//}
	
	
	//***  ИНДЕКС по Клиенту в Приходной накладной
	//{
	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysindexes
	|			  WHERE     (name = 'P1C_SUPPLIER_INVOICE')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если кол=0 Тогда
		ТекстЗапроса="CREATE 
		|			  INDEX [P1C_SUPPLIER_INVOICE] ON [dbo].[DH"+ПриходИД+"] ([SP"+ПриходКлиентИД+"])
		|			  ON [PRIMARY]
		|";
		
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);
		Сообщить("Успешно создан индекс P1C_SUPPLIER_INVOICE!");
	КонецЕсли;
	//}

	//***  ИНДЕКС по Клиенту и Осн сроку поставки в Заказе поставщика
	//{
	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysindexes
	|			  WHERE     (name = 'P1C_SUPPLIER_ORDERS')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если кол=0 Тогда
		ТекстЗапроса="CREATE 
		|			  INDEX [P1C_SUPPLIER_ORDERS] ON [dbo].[DH"+ЗаказПоставщикуИД+"] ([SP"+ЗаказПоставщикуКлиентИД+"], [SP"+ЗаказПоставщикуОснСрокПоставкиИД+"])
		|			  ON [PRIMARY]
		|";
		
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);
		Сообщить("Успешно создан индекс P1C_SUPPLIER_ORDERS!");
	КонецЕсли;
	//}
	
	//***  ИНДЕКС по Складу и принзаку печати в шапке счета
	//{
	
	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysindexes
	|			  WHERE     (name = 'P1C_WAREHOUSE')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);

	СчетСкладИД=MDW.ИДРеквизитаШапки("Счет","Склад");
	СчетПризнакПечатиИД=MDW.ИДРеквизитаШапки("Счет","ПризнакПечати");
	
	Если кол=0 Тогда
		ТекстЗапроса="	CREATE 
		|  				INDEX [P1C_WAREHOUSE] ON [dbo].[DH"+СчетИД+"] ([SP"+СчетСкладИД+"], [SP"+СчетПризнакПечатиИД+"])
		|";
		
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);
		Сообщить("Успешно создан индекс P1C_WAREHOUSE!");
	КонецЕсли;
	//}

	//***  ИНДЕКС по Агенту в шапке 
	//{
	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysindexes
	|			  WHERE     (name = 'P1C_AGENT')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);

	СчетАгентИД=MDW.ИДРеквизитаШапки("Счет","Агент");
	Если кол=0 Тогда
		ТекстЗапроса="CREATE 
		|			  INDEX [P1C_AGENT] ON [dbo].[DH"+СчетИД+"] ([SP"+СчетАгентИД+"])
		|			  ON [PRIMARY]
		|";
		
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);
		Сообщить("Успешно создан индекс P1C_AGENT!");
	КонецЕсли;
	//}
	
	//***  ИНДЕКС по Товару в табличной части 
	//{

	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysindexes
	|			  WHERE     (name = 'P1C_TOVAR_ORDER')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если кол=0 Тогда
		ТекстЗапроса="CREATE 
		|			  INDEX [P1C_TOVAR_ORDER] ON [dbo].[DT"+СчетИД+"] ([SP"+СчетТоварИД+"])
		|			  ON [PRIMARY]
		|";
		
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);
		Сообщить("Успешно создан индекс P1C_TOVAR_ORDER!");
	КонецЕсли;
	//}
	
	//***  ИНДЕКС по для таблицы акционных товаров 
	//{

	СпрИД = MDW.ИДСправочника("АкционныеСкидкиТоваров");
	КатегорияЦенИД=MDW.ИДРеквизитаСправочника("АкционныеСкидкиТоваров","КатегорияЦен");
	ДатаКонцаИД=MDW.ИДРеквизитаСправочника("АкционныеСкидкиТоваров","ДатаКонца");
	ДатаНачалаИД=MDW.ИДРеквизитаСправочника("АкционныеСкидкиТоваров","ДатаНачала");
	
	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysindexes
	|			  WHERE     (name = 'P1C_ACT_GOODS')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если кол=0 Тогда
		ТекстЗапроса="CREATE 
		|			  INDEX [P1C_ACT_GOODS] ON [dbo].[SC"+СпрИД+"] ([PARENTEXT], [SP"+КатегорияЦенИД+"], [SP"+ДатаКонцаИД+"], [SP"+ДатаНачалаИД+"])
		|			  ON [PRIMARY]
		|";
		
		//Запрос.Отладка(1);
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);
		Сообщить("Успешно создан индекс P1C_ACT_GOODS!");
	КонецЕсли;
	//}	
	
	//***  ИНДЕКС Маршрутный лист - Счет
	//{
	Запрос=СоздатьОбъект("ODBCRecordSet");
	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysindexes
	|			  WHERE     (name = 'P1C_ROUTING_TABLE_ORDER')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	МЛИД=MDW.ИДДокумента("МаршрутныйЛист");
	МЛСчетИД=MDW.ИДРеквизитаТабличнойЧасти("МаршрутныйЛист","Счет");
	
	Если кол=0 Тогда
		ТекстЗапроса="CREATE 
		|			  INDEX [P1C_ROUTING_TABLE_ORDER] ON [dbo].[DT"+МЛИД+"] ([SP"+МЛСчетИД+"])
		|			  ON [PRIMARY]
		|";
		
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);
		Сообщить("Успешно создан индекс P1C_ROUTING_TABLE_ORDER!");
	КонецЕсли;
	//}

	//***  ИНДЕКС КомплектаиияЗаявкиФакт - Счет
	//{
	Запрос=СоздатьОбъект("ODBCRecordSet");
	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysindexes
	|			  WHERE     (name = 'P1C_COMPLETE_FACT_ORDER')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	КФИД=MDW.ИДДокумента("КомплектацияЗаявкиФакт");
	КФСчетИД=MDW.ИДРеквизитаШапки("КомплектацияЗаявкиФакт","ПоСчету");
	
	Если кол=0 Тогда
		ТекстЗапроса="CREATE 
		|			  INDEX [P1C_COMPLETE_FACT_ORDER] ON [dbo].[DH"+КФИД+"] ([SP"+КФСчетИД+"])
		|			  ON [PRIMARY]
		|";
		
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);
		Сообщить("Успешно создан индекс P1C_COMPLETE_FACT_ORDER!");
	КонецЕсли;
	//}
	//***  ИНДЕКС Маршрутный лист - Машина
	//{
	Запрос=СоздатьОбъект("ODBCRecordSet");
	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysindexes
	|			  WHERE     (name = 'P1C_ROUTING_TABLE_TRUCK')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	МЛИД=MDW.ИДДокумента("МаршрутныйЛист");
	МЛМашинаИД=MDW.ИДРеквизитаШапки("МаршрутныйЛист","Машина");
	
	Если кол=0 Тогда
		ТекстЗапроса="CREATE 
		|			  INDEX [P1C_ROUTING_TABLE_TRUCK] ON [dbo].[DH"+МЛИД+"] ([SP"+МЛМашинаИД+"])
		|			  ON [PRIMARY]
		|";
		
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);
		Сообщить("Успешно создан индекс P1C_ROUTING_TABLE_TRUCK!");
	КонецЕсли;
	//}

	//*** ИНДЕКС РасходнаяНакладнаяНал - Касса
	//{	
	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysindexes
	|			  WHERE     (name = 'P1C_CASH_DESK')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	КассаИД=MDW.ИДРеквизитаШапки("РасходнаяНакладнаяНал","ККМ");
	
	Если кол=0 Тогда
		ТекстЗапроса="CREATE 
		|			  INDEX [P1C_CASH_DESK] ON [dbo].[DH"+РасхНалИД+"] ([SP"+КассаИД+"])
		|			  ON [PRIMARY]
		|";
		
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);
		Сообщить("Успешно создан индекс P1C_CASH_DESK!");
	КонецЕсли;
	//}

//***  ИНДЕКС ПриходнаяНакладная строки - ДокументОснованиеТабл и Товар
	//{
	Запрос=СоздатьОбъект("ODBCRecordSet");
	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysindexes
	|			  WHERE     (name = 'P1C_PRIHOD_NAKL_TOVAR_DOK')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	МЛИД=MDW.ИДДокумента("ПриходнаяНакладная");
	МЛДокОснИД=MDW.ИДРеквизитаТабличнойЧасти("ПриходнаяНакладная","ДокументОснованиеТабл");
	МЛТоварИД=MDW.ИДРеквизитаТабличнойЧасти("ПриходнаяНакладная","Товар");
	
	Если кол=0 Тогда
		ТекстЗапроса="CREATE 
		|			  INDEX [P1C_PRIHOD_NAKL_TOVAR_DOK] ON [dbo].[DT"+МЛИД+"] ([SP"+МЛТоварИД+"],[SP"+МЛДокОснИД+"])
		|			  ON [PRIMARY]
		|";
		
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);
		Сообщить("Успешно создан индекс P1C_PRIHOD_NAKL_TOVAR_DOK!");
	КонецЕсли;
	//}

//***  ИНДЕКС ПереоценкаТоваров строки -  Товар
	//{
	Запрос=СоздатьОбъект("ODBCRecordSet");
	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysindexes
	|			  WHERE     (name = 'P1C_PEREOCENKA_TOVAR_DOK')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	МЛИД=MDW.ИДДокумента("ПереоценкаТоваров");
	МЛТоварИД=MDW.ИДРеквизитаТабличнойЧасти("ПереоценкаТоваров","Товар");
	
	Если кол=0 Тогда
		ТекстЗапроса="CREATE 
		|			  INDEX [P1C_PEREOCENKA_TOVAR_DOK] ON [dbo].[DT"+МЛИД+"] ([SP"+МЛТоварИД+"])
		|			  ON [PRIMARY]
		|";
		
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);
		Сообщить("Успешно создан индекс P1C_PEREOCENKA_TOVAR_DOK!");
	КонецЕсли;
	//}

	
	
//***  ИНДЕКС Счет_фактура строки - ДокументОснованиеС
	//{
	Запрос=СоздатьОбъект("ODBCRecordSet");
	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysindexes
	|			  WHERE     (name = 'P1C_ORDER_FAKTUR_T1')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	МЛИД=MDW.ИДДокумента("Счет_фактура");
	МЛСчетИД=MDW.ИДРеквизитаТабличнойЧасти("Счет_фактура","ДокументОснованиеС");
	
	Если кол=0 Тогда
		ТекстЗапроса="CREATE 
		|			  INDEX [P1C_ORDER_FAKTUR_T1] ON [dbo].[DT"+МЛИД+"] ([SP"+МЛСчетИД+"])
		|			  ON [PRIMARY]
		|";
		
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);
		Сообщить("Успешно создан индекс P1C_ORDER_FAKTUR_T1!");
	КонецЕсли;
	//}

//***  ИНДЕКС Счет_фактура  - ДокументОснование
	//{
	Запрос=СоздатьОбъект("ODBCRecordSet");
	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysindexes
	|			  WHERE     (name = 'P1C_ORDER_FAKTUR_H1')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	МЛИД=MDW.ИДДокумента("Счет_фактура");
	МЛСчетИД=MDW.ИДРеквизитаШапки("Счет_фактура","ДокументОснование");
	
	Если кол=0 Тогда
		ТекстЗапроса="CREATE 
		|			  INDEX [P1C_ORDER_FAKTUR_H1] ON [dbo].[DH"+МЛИД+"] ([SP"+МЛСчетИД+"])
		|			  ON [PRIMARY]
		|";
		
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);
		Сообщить("Успешно создан индекс P1C_ORDER_FAKTUR_H1!");
	КонецЕсли;
	//}
	
КонецПроцедуры

Функция ТриггерДляТоваров()
	Запрос=СоздатьОбъект("ODBCRecordSet");
	ИмяТаблицыТоваров	= "ТоварыИзменения";
	ИмяТаблицыТовары	= MDW.ИмяТаблицыСправочника("Номенклатура");
	ИмяТаблицыРегистра	= MDW.ИмяТаблицыДвижений("ОстаткиТоваров");
	ИмяТаблицыРегистра2	= MDW.ИмяТаблицыДвижений("СпецЦены");
	
	ИмяРеквизитаТовар	= "SP"+MDW.ИДИзмеренияРегистра("ОстаткиТоваров","Товар");
	ИмяРеквизитаТовар2	= "SP"+MDW.ИДРеквизитаРегистра("СпецЦены","Товар");

	//{ Таблица ТоварыИзменения
	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysobjects
	|			  WHERE     (name = '"+ИмяТаблицыТоваров+"')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если кол=0 Тогда
	
		// Вспомогательная таблица для хранения иерархии объектов приложения прав
		ЗапросНаСозданиеТаблицы = "
		|Set NoCount ON
		|CREATE TABLE "+ИмяТаблицыТоваров+" (
		|	ID char(9) NOT NULL,
		|	TimeStamp SmallDateTime NOT NULL,
		|	DELETED Bit NOT NULL,
		|	Flag Bit NOT NULL
		|)";

		Запрос.ВыполнитьСкалярный(ЗапросНаСозданиеТаблицы);
	КонецЕсли;

	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysindexes
	|			  WHERE     (name = 'IX__"+ИмяТаблицыТоваров+"_ID')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если кол=0 Тогда
	
		ЗапросНаСозданиеИндексов = "
		|Set NoCount ON
		|CREATE INDEX [IX__"+ИмяТаблицыТоваров+"_ID]
		|	ON dbo.["+ИмяТаблицыТоваров+"](ID)
		|";
	
		Запрос.ВыполнитьСкалярный(ЗапросНаСозданиеИндексов);
	КонецЕсли;
	//}
                	
	//{ insert Товары

	ИмяТриггера = "ТриггерВставка_Товары";

	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysobjects
	|			  WHERE     (name = '"+ИмяТриггера+"')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если кол=0 Тогда
	
		ТекстЗапроса = "CREATE TRIGGER "+ИмяТриггера+" ON "+ИмяТаблицыТовары+"
		|AFTER UPDATE, INSERT, DELETE
		|AS
		|DECLARE @ID char(9)
		|SET NOCOUNT ON
		|SELECT @ID = ID FROM Inserted
		|BEGIN
		|
		|	--DELETED
		|	UPDATE "+ИмяТаблицыТоваров+"
		|	SET TimeStamp = GETDATE()
		|	WHERE ID IN (SELECT ID FROM DELETED)
		|
		|	-- inserted and updated
		|	INSERT INTO "+ИмяТаблицыТоваров+" (ID, TimeStamp, Deleted, Flag)
		|	select ID, GETDATE(), 0, 0 FROM Inserted WHERE ID NOT IN (SELECT ID FROM "+ИмяТаблицыТоваров+" (NOLOCK))
		|	
		|
		|END
		|";
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	КонецЕсли;
	//}

	//{ insert ОстаткиТоваров

	ИмяТриггера = "ТриггерВставка_ОстаткиТоваров";

	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysobjects
	|			  WHERE     (name = '"+ИмяТриггера+"')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если кол=0 Тогда
	
		ТекстЗапроса = "CREATE TRIGGER "+ИмяТриггера+" ON "+ИмяТаблицыРегистра+"
		|AFTER UPDATE, INSERT, DELETE
		|AS
		|SET NOCOUNT ON
		|BEGIN
		|
		|	--DELETED
		|	UPDATE "+ИмяТаблицыТоваров+"
		|	SET TimeStamp = GETDATE()
		|	FROM "+ИмяТаблицыТоваров+"
		|	WHERE ID IN (SELECT "+ИмяРеквизитаТовар+" FROM DELETED)
		|
		|	-- inserted and updated
		|	INSERT INTO "+ИмяТаблицыТоваров+" (ID, TimeStamp, Deleted, Flag)
		|	select "+ИмяРеквизитаТовар+", GETDATE(), 0, 0 FROM Inserted WHERE "+ИмяРеквизитаТовар+" NOT IN (SELECT ID FROM "+ИмяТаблицыТоваров+" (NOLOCK))
		|
		|END
		|";
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	КонецЕсли;
	//}

	//{ insert _1sconst

	ИмяТриггера = "ТриггерВставка_Константы";

	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysobjects
	|			  WHERE     (name = '"+ИмяТриггера+"')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если кол=0 Тогда
		
		ИДцена = MDW.ИДРеквизитаСправочника("Цены","Цена");
		
		ТекстЗапроса = "CREATE TRIGGER "+ИмяТриггера+" ON _1SCONST
		|AFTER UPDATE, INSERT, DELETE
		|AS
		|SET NOCOUNT ON
		|BEGIN
		|
		|	--DELETED
		|	UPDATE "+ИмяТаблицыТоваров+"
		|	SET TimeStamp = GETDATE()
		|	FROM "+ИмяТаблицыТоваров+"
		|	WHERE ID IN (SELECT OBJID FROM DELETED)
		|
		|	-- inserted and updated
		|	INSERT INTO "+ИмяТаблицыТоваров+" (ID, TimeStamp, Deleted, Flag)
		|	select OBJID, GETDATE(), 0, 0 FROM Inserted
		|	WHERE ID = "+ИДцена+" AND OBJID NOT IN (SELECT ID FROM "+ИмяТаблицыТоваров+" (NOLOCK))
		|
		|END
		|";
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	КонецЕсли;
	//}
	
	//insert
	//{ СпецЦены
	ИмяТриггера = "ТриггерВставка_СпецЦены";

	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysobjects
	|			  WHERE     (name = '"+ИмяТриггера+"')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если кол=0 Тогда
		
	
		ТекстЗапроса = "CREATE TRIGGER "+ИмяТриггера+" ON "+ИмяТаблицыРегистра2+"
		|AFTER UPDATE, INSERT, DELETE
		|AS
		|SET NOCOUNT ON
		|BEGIN
		|
		|	--DELETED
		|	UPDATE "+ИмяТаблицыТоваров+"
		|	SET TimeStamp = GETDATE()
		|	FROM "+ИмяТаблицыТоваров+"
		|	WHERE ID IN (SELECT " + ИмяРеквизитаТовар2 + "  FROM DELETED)
		|
		|	-- inserted and updated
		|	INSERT INTO "+ИмяТаблицыТоваров+" (ID, TimeStamp, Deleted, Flag)
		|	select "+ИмяРеквизитаТовар2+", GETDATE(), 0, 0 FROM Inserted WHERE "+ИмяРеквизитаТовар2+" NOT IN (SELECT ID FROM "+ИмяТаблицыТоваров+" (NOLOCK))
		|
		|END
		|";
		//Запрос.Отладка(1);
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	КонецЕсли;
	//}

КонецФункции

Функция ТриггерДляСостоянияДокументов()
	Запрос=СоздатьОбъект("ODBCRecordSet");
	ИмяТаблицыСостояний	= "СостоянияДокументов";
	ИмяТаблицыРегистра	= MDW.ИмяТаблицыДвижений("СостояниеДокумента");
	
	ИмяРеквизитаДок	= "SP"+MDW.ИДИзмеренияРегистра("СостояниеДокумента","Док");

	//{ Таблица Состояния изменения
	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysobjects
	|			  WHERE     (name = '"+ИмяТаблицыСостояний+"')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если кол=0 Тогда
	
		// Вспомогательная таблица для хранения иерархии объектов приложения прав
		ЗапросНаСозданиеТаблицы = "
		|Set NoCount ON
		|CREATE TABLE "+ИмяТаблицыСостояний+" (
		|	ID char(13) NOT NULL,
		|	TimeStamp SmallDateTime NOT NULL,
		|	DELETED Bit NOT NULL,
		|	Flag Bit NOT NULL
		|)";

		Запрос.ВыполнитьСкалярный(ЗапросНаСозданиеТаблицы);
	КонецЕсли;

	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysindexes
	|			  WHERE     (name = 'IX__"+ИмяТаблицыСостояний+"_ID')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если кол=0 Тогда
	
		ЗапросНаСозданиеИндексов = "
		|Set NoCount ON
		|CREATE INDEX [IX__"+ИмяТаблицыСостояний+"_ID]
		|	ON dbo.["+ИмяТаблицыСостояний+"](ID)
		|";
	
		Запрос.ВыполнитьСкалярный(ЗапросНаСозданиеИндексов);
	КонецЕсли;
	//}
                	
	//{ insert СостояниеДокументов

	ИмяТриггера = "ТриггерВставка_СостояниеДокумента";

	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysobjects
	|			  WHERE     (name = '"+ИмяТриггера+"')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если кол=0 Тогда
	
		ТекстЗапроса = "CREATE TRIGGER "+ИмяТриггера+" ON "+ИмяТаблицыРегистра+"
		|AFTER UPDATE, INSERT, DELETE
		|AS
		|SET NOCOUNT ON
		|BEGIN
		|
		|	--DELETED
		|	UPDATE "+ИмяТаблицыСостояний+"
		|	SET TimeStamp = GETDATE()
		|	FROM "+ИмяТаблицыСостояний+"
		|	WHERE ID IN (SELECT "+ИмяРеквизитаДок+" FROM DELETED)
		|
		|	-- inserted and updated
		|	INSERT INTO "+ИмяТаблицыСостояний+" (ID, TimeStamp, Deleted, Flag)
		|	select "+ИмяРеквизитаДок+", GETDATE(), 0, 0 FROM Inserted WHERE "+ИмяРеквизитаДок+" NOT IN (SELECT ID FROM "+ИмяТаблицыСостояний+")
		|
		|END
		|";
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	КонецЕсли;
	//}


КонецФункции


Функция ТриггерДляИерархии(ВидСправочника)
	Запрос=СоздатьОбъект("ODBCRecordSet");
	
	ИмяТаблицыДерева	= "Дерево_"+ВидСправочника;
	ИмяТаблицы			= MDW.ИмяТаблицыСправочника(ВидСправочника);
	ПолеУровеньИерархии	= "SP" + MDW.ИДРеквизитаСправочника(ВидСправочника, "УровеньИерархии");

	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysobjects
	|			  WHERE     (name = '"+ИмяТаблицыДерева+"')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если кол=0 Тогда
	
		// Вспомогательная таблица для хранения иерархии объектов приложения прав
		ЗапросНаСозданиеТаблицы = "
		|Set NoCount ON
		|CREATE TABLE Дерево_"+ВидСправочника+" (
		|	ID char(9) NOT NULL,
		|	ParentID char(9) NOT NULL
		|)";

		Запрос.ВыполнитьСкалярный(ЗапросНаСозданиеТаблицы);
	КонецЕсли;

	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysindexes
	|			  WHERE     (name = 'IX_Дерево_"+ВидСправочника+"_ID')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если кол=0 Тогда
	
		ЗапросНаСозданиеИндексов = "
		|Set NoCount ON
		|CREATE INDEX [IX_Дерево_"+ВидСправочника+"_ID]
		|	ON dbo.[Дерево_"+ВидСправочника+"](ID)
		|CREATE INDEX [IX_Дерево_"+ВидСправочника+"_ParentID]
		|	ON dbo.[Дерево_"+ВидСправочника+"](ParentID)
		|";
	
		Запрос.ВыполнитьСкалярный(ЗапросНаСозданиеИндексов);
	КонецЕсли;
                 
	глПустойИД9="     0   ";
	
	Запрос=СоздатьОбъект("ODBCRecordSet");
	
	//insert
	ИмяТриггера = "ТриггерВставка_Иерархия_"+ВидСправочника;

	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysobjects
	|			  WHERE     (name = '"+ИмяТриггера+"')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если кол=0 Тогда
	
		ТекстЗапроса = "CREATE TRIGGER "+ИмяТриггера+" ON "+ИмяТаблицы+"
		|AFTER INSERT
		|AS
		|DECLARE @ID char(9), @ParentID char(9), @Level tinyint
		|SET NOCOUNT ON
		|SELECT @ID = ID, @ParentID = ParentID FROM Inserted
		|SET @Level = 0
		|WHILE @ParentID <> '"+глПустойИД9+"'
		|BEGIN
		|	INSERT INTO "+ИмяТаблицыДерева+"
		|		(ID, ParentID) VALUES (@ID, @ParentID)
		|	SELECT @ParentID = ParentID FROM "+ИмяТаблицы+" WHERE ID = @ParentID
		|	SET @Level = @Level + 1
		|END
		|
		|UPDATE "+ИмяТаблицы+" SET "+ПолеУровеньИерархии+" = @Level WHERE ID = @ID
		|";
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	КонецЕсли;

	//update
	ИмяТриггера = "ТриггерОбновление_Иерархия_"+ВидСправочника;
	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysobjects
	|			  WHERE     (name = '"+ИмяТриггера+"')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если кол=0 Тогда
	
		ТекстЗапроса = "CREATE TRIGGER "+ИмяТриггера+" ON "+ИмяТаблицы+"
		|AFTER UPDATE
		|AS
		|DECLARE @ID char(9), @ParentID char(9), @IsFolder tinyint, @Level tinyint
		|SET NOCOUNT ON
		|
		|SELECT @ID = ID, @ParentID = ParentID, @IsFolder = IsFolder
		|FROM Inserted
		|
		|IF @IsFolder = 1
		|BEGIN
		|	DELETE "+ИмяТаблицыДерева+"
		|		FROM "+ИмяТаблицыДерева+"
		|		INNER JOIN (
		|		SELECT
		|			Parents.ParentID ParentID,
		|			Children.ID ID
		|		FROM
		|			"+ИмяТаблицыДерева+" Parents
		|			INNER JOIN "+ИмяТаблицыДерева+" Children ON
		|				Children.ParentID = Parents.ID
		|		WHERE
		|			Parents.ID = @ID
		|		) Children ON
		|			Children.ParentID = "+ИмяТаблицыДерева+".ParentID
		|			AND Children.ID = "+ИмяТаблицыДерева+".ID
		|END
		|
		|DELETE FROM "+ИмяТаблицыДерева+" WHERE ID = @ID
		|
		|SET @Level = 0
		|WHILE @ParentID <> '"+глПустойИД9+"'
		|BEGIN
		|	INSERT INTO "+ИмяТаблицыДерева+" (ID, ParentID) VALUES (@ID, @ParentID)
		|
		|	IF @IsFolder = 1
		|	BEGIN
		|		INSERT INTO "+ИмяТаблицыДерева+"
		|			SELECT DISTINCT SubTree.ID, @ParentID
		|			FROM "+ИмяТаблицыДерева+" SubTree
		|			WHERE SubTree.ParentID = @ID
		|
		|	END
		|
		|	SELECT @ParentID = ParentID FROM "+ИмяТаблицы+" WHERE ID = @ParentID
		|	SET @Level = @Level + 1
		|END
		|
		|UPDATE "+ИмяТаблицы+" SET "+ПолеУровеньИерархии+" = @Level WHERE ID = @ID
		|
		|
		|IF @IsFolder = 1
		|BEGIN
		|	UPDATE "+ИмяТаблицы+" SET "+ПолеУровеньИерархии+" = (SELECT count(*) FROM "+ИмяТаблицыДерева+" WHERE "+ИмяТаблицыДерева+".ID = ThisRef.ID)
		|	FROM "+ИмяТаблицы+" ThisRef
		|	INNER JOIN "+ИмяТаблицыДерева+" SubTree ON SubTree.ID = ThisRef.ID
		|	WHERE SubTree.ParentID = @ID
		|END
		|";
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	КонецЕсли;

	//delete
	ИмяТриггера = "ТриггерУдаление_Иерархия_"+ВидСправочника;
	
	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysobjects
	|			  WHERE     (name = '"+ИмяТриггера+"')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если кол=0 Тогда
	
		ТекстЗапроса = "CREATE TRIGGER "+ИмяТриггера+" ON "+ИмяТаблицы+"
		|AFTER DELETE
		|AS
		|DECLARE @ID char(9)
		|SET NOCOUNT ON
		|SELECT @ID = ID FROM Deleted
		|DELETE FROM "+ИмяТаблицыДерева+" WHERE ID = @ID
		|DELETE FROM "+ИмяТаблицыДерева+" WHERE ParentID = @ID
		|";
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);	
	КонецЕсли;

	Возврат 1;
КонецФункции

Процедура СозданиеТриггеровТаблиц()
	
	Если ТекущаяИБЦентральная()=1 Тогда
		
		ТриггерДляИерархии("Сотрудники");
		ТриггерДляИерархии("Контрагенты");
		ТриггерДляИерархии("МестаХранения");
		ТриггерДляИерархии("Номенклатура");
		ТриггерДляИерархии("Регионы");
		ТриггерДляИерархии("СпециализацииКлиентов");
		ТриггерДляИерархии("СкладскиеАдреса");
		
		Если Константа.РегистрацияИзмененийТоваровДляWEB = 1 Тогда
			ТриггерДляТоваров();
		КонецЕсли;
		ТриггерДляСостоянияДокументов();

		Запрос=СоздатьОбъект("ODBCRecordSet");
		
		Если Константа.СинхронизацияPOS=1 Тогда
			Запрос.ВыполнитьСкалярный("EXEC [dbo].[Recreate_POS_Triggers]  @Recreate = 0");
		КонецЕсли;

		Если Константа.СтранаРезидент.Код="LV" Тогда
			
			//{ Триггер для регистрации изменений номенклатуры
			
			ИДСпрНоменклатура = "sc"+MDW.ИДСправочника("Номенклатура");
			
			ИмяТаблицы 			= "НоменклатураИсторияИзменений";
			ИмяТриггера			= "НоменклатураИсторияИзменений_"+ИДСпрНоменклатура;
			ИмяТриггераВставка	= "НоменклатураИсторияИзмененийВставка_"+ИДСпрНоменклатура;
	
			//ИмяТаблицы			= MDW.ИмяТаблицыСправочника("Номенклатура");
			
			ТекстЗапроса="SELECT     count(*)
			|			  FROM         sysobjects
			|			  WHERE     (name = '"+ИмяТаблицы+"')
			|";
			кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
		
			Если кол=0 Тогда
			
				// Вспомогательная таблица для регистрации изменений товара
				ЗапросНаСозданиеТаблицы = "
				|Set NoCount ON
				|CREATE TABLE [dbo].[НоменклатураИсторияИзменений](
				|	[ТоварID] [char](9) NOT NULL,
				|	[КодСтар] [char](15) NULL,
				|	[КодНов] [char](15) NULL,
				|	[НаименованиеСтар] [char](200) NULL,
				|	[НаименованиеНов] [char](200) NULL,
				|	[ДатаВремя] [datetime] NULL,
				|	[SPID] [int] NULL,
				|	[Пользователь] [char](20) NULL,
				|	[НаименованиеСтарLT] [char](200) NULL,
				|	[НаименованиеНовLT] [char](200) NULL,
				|	[НаименованиеСтарEE] [char](200) NULL,
				|	[НаименованиеНовEE] [char](200) NULL,
				|	[НаименованиеСтарEN] [char](200) NULL,
				|	[НаименованиеНовEN] [char](200) NULL,
	
				|) ON [PRIMARY]";
		
				Запрос.ВыполнитьСкалярный(ЗапросНаСозданиеТаблицы);
			КонецЕсли;
			
	
			ТекстЗапроса="SELECT     count(*)
			|			  FROM         sysobjects
			|			  WHERE     (name = '"+ИмяТриггера+"')
			|";
			кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
			//}
	
			
			Если (НазваниеНабораПрав()="Администратор") И (кол>0) Тогда
	//			ТекстЗапроса="DROP TRIGGER "+ИмяТриггера;
	//			Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	//			ТекстЗапроса="DROP TRIGGER "+ИмяТриггераВставка;
	//			Запрос.ВыполнитьСкалярный(ТекстЗапроса);
				//			кол=0;
			КонецЕсли;
		
			Если кол=0 Тогда
		
				ИДНаименованиеLT = "SP"+MDW.ИДРеквизитаСправочника("Номенклатура","НаименованиеLT");
				ИДНаименованиеEE = "SP"+MDW.ИДРеквизитаСправочника("Номенклатура","НаименованиеEE");
				ИДНаименованиеEN = "SP"+MDW.ИДРеквизитаСправочника("Номенклатура","НаименованиеАнгл");
				
				ТекстЗапроса = "CREATE TRIGGER [dbo].[НоменклатураИсторияИзменений_"+ИДСпрНоменклатура+"] ON [dbo].["+ИДСпрНоменклатура+"]
				|				FOR UPDATE
				|				AS
				|				SET NOCOUNT ON
				|				INSERT INTO НоменклатураИсторияИзменений (ТоварID, КодСтар, КодНов, НаименованиеСтар, НаименованиеНов, ДатаВремя, SPID,Пользователь, НаименованиеСтарLT, НаименованиеНовLT, НаименованиеСтарEE, НаименованиеНовEE, НаименованиеСтарEN, НаименованиеНовEN) 
				|				Select Inserted.ID, Deleted.Code, Inserted.Code, Deleted.Descr, Inserted.Descr, GETDATE(), @@SPID
				|						, (CASE WHEN (SELECT sp.program_name from master.dbo.sysprocesses sp (nolock) WHERE spid = @@spid) LIKE '1C%' THEN (SELECT UserName FROM UserSpid WHERE SPID=@@SPID) ELSE (SELECT sp.nt_username from master.dbo.sysprocesses sp (nolock) WHERE spid = @@spid) END) 
				|						, Deleted."+ИДНаименованиеLT+",Inserted."+ИДНаименованиеLT + ", Deleted."+ИДНаименованиеEE+",Inserted."+ИДНаименованиеEE + ", Deleted."+ИДНаименованиеEN+",Inserted."+ИДНаименованиеEN + "
				|				FROM Inserted 
				|				Inner Join Deleted ON Deleted.ID = Inserted.ID
				|				WHERE Inserted.Code <> Deleted.Code OR Deleted.Descr <> Inserted.Descr OR Deleted."+ИДНаименованиеLT+" <> Inserted."+ИДНаименованиеLT + " OR Deleted."+ИДНаименованиеEE+" <> Inserted."+ИДНаименованиеEE + " OR Deleted."+ИДНаименованиеEN+" <> Inserted."+ИДНаименованиеEN+"
				|";
	
			
				//Запрос.Отладка(1);
				Запрос.ВыполнитьСкалярный(ТекстЗапроса);
			КонецЕсли;
	
			ТекстЗапроса="SELECT     count(*)
			|			  FROM         sysobjects
			|			  WHERE     (name = '"+ИмяТриггераВставка+"')
			|";
			кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
			
			Если кол=0 Тогда
	
				ТекстЗапроса = "CREATE TRIGGER [dbo].[НоменклатураИсторияИзмененийВставка_"+ИДСпрНоменклатура+"] ON [dbo].["+ИДСпрНоменклатура+"]
				|				AFTER INSERT
				|				AS
				|				SET NOCOUNT ON
				|				INSERT INTO НоменклатураИсторияИзменений (ТоварID, КодСтар, КодНов, НаименованиеСтар, НаименованиеНов, ДатаВремя, SPID,Пользователь, НаименованиеСтарLT, НаименованиеНовLT, НаименованиеСтарEE, НаименованиеНовEE, НаименованиеСтарEN, НаименованиеНовEN) 
				|				Select Inserted.ID, '', Inserted.Code, '', Inserted.Descr, GETDATE(), @@SPID, (SELECT UserName FROM UserSpid WHERE SPID=@@SPID), '',Inserted."+ИДНаименованиеLT + ", '',Inserted."+ИДНаименованиеEE + ", '',Inserted."+ИДНаименованиеEN + "
				|				FROM Inserted 
				|";
				Запрос.ВыполнитьСкалярный(ТекстЗапроса);
			КонецЕсли;

		КонецЕсли;

	ИмяТаблицыМаршрутныйЛист	= "RoutingTable";
	
	//{ Таблица МаргрутныйЛист
	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysobjects
	|			  WHERE     (name = '"+ИмяТаблицыМаршрутныйЛист+"')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
//	
	Если кол=0 Тогда
	
		// Вспомогательная таблица для хранения иерархии объектов приложения прав
		ЗапросНаСозданиеТаблицы = "
		|Set NoCount ON
		|CREATE TABLE "+ИмяТаблицыМаршрутныйЛист+" (
		|	IDD varchar(20) NOT NULL,
		|	DOCNO VARCHAR(20) NOT NULL,
		|	StartTime DATETIME NOT NULL,
		|	EndTIme DATETIME NOT NULL,
		|	IDDOC VARCHAR(9) NOT NULL
		|)";
//
		Запрос.ВыполнитьСкалярный(ЗапросНаСозданиеТаблицы);
	КонецЕсли;
//
	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysindexes
	|			  WHERE     (name = 'IX__"+ИмяТаблицыМаршрутныйЛист+"_IDDOC')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);

	
	Если кол=0 Тогда
	
		ЗапросНаСозданиеИндексов = "
		|Set NoCount ON
		|CREATE INDEX [IX__"+ИмяТаблицыМаршрутныйЛист+"_IDDOC]
		|	ON dbo.["+ИмяТаблицыМаршрутныйЛист+"](IDDOC)
		|";
	
		Запрос.ВыполнитьСкалярный(ЗапросНаСозданиеИндексов);
	КонецЕсли;
	//}

	//{ МаршрутныйЛист триггер

	
//	ИмяТриггера = "ТриггерВставка_МаршрутныйЛист";
//
//	//ИмяРеквизитаIDD	= "SP"+MDW.ИДРеквизитаШапки("МаршрутныйЛист","IDD");
//	
//	ТекстЗапроса="SELECT     count(*)
//	|			  FROM         sysobjects
//	|			  WHERE     (name = '"+ИмяТриггера+"')
//	|";
//	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
//	
//	Если кол=0 Тогда
//	
//		ТекстЗапроса = "CREATE TRIGGER "+ИмяТриггера+" ON "+ИмяТаблицыМаршрутныйЛист+"
//		|AFTER UPDATE, INSERT, DELETE
//		|AS
//		|DECLARE @ID char(9)
//		|SET NOCOUNT ON
//		|SELECT @ID = IDDOC FROM Inserted
//		|BEGIN
//		|
//		|	--DELETED
//		//|	UPDATE "+ИмяТаблицыМаршрутныйЛист+"
//		//|	SET TimeStamp = GETDATE()
//		//|	WHERE ID IN (SELECT ID FROM DELETED)
//		|
//		|	-- inserted and updated
//		|	INSERT INTO "+ИмяТаблицыМаршрутныйЛист+" (IDD, DOCNO, StartTime,EndTime, IDDOC)
//		|	select '', '', GETDATE(), GETDATE(), Inserted.IDDOC 
//		|	FROM Inserted 
//		|	INNER JOIN _1sjourn J (NOLOCK) ON J.IDDOC = Inserted.IDDOC 
//		|	WHERE Inserted.IDDOC NOT IN (SELECT IDDOC FROM "+ИмяТаблицыМаршрутныйЛист+")
//		|	
//		|	
//		|
//		|END
//		|";
//		Запрос.ВыполнитьСкалярный(ТекстЗапроса);
//	КонецЕсли;
//	//}

		
		Возврат; //раскомментировать когда будет запущен обмен 		
		
	ИмяТаблицыТоваров	= "ТоварыИзменения";
	ИмяТаблицыТовары	= MDW.ИмяТаблицыСправочника("Номенклатура");
	ИмяТаблицыРегистра	= MDW.ИмяТаблицыДвижений("ОстаткиТоваров");
	ИмяТаблицыЦены	= MDW.ИмяТаблицыСправочника("Цены");
	
	ИмяРеквизитаТовар	= "SP"+MDW.ИДИзмеренияРегистра("ОстаткиТоваров","Товар");

		
	//{ Таблица ТоварыИзменения
	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysobjects
	|			  WHERE     (name = '"+ИмяТаблицыТоваров+"')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если кол=0 Тогда
	
		// Вспомогательная таблица для хранения иерархии объектов приложения прав
		ЗапросНаСозданиеТаблицы = "
		|Set NoCount ON
		|CREATE TABLE "+ИмяТаблицыТоваров+" (
		|	ID char(9) NOT NULL,
		|	TimeStamp SmallDateTime NOT NULL,
		|	DELETED Bit NOT NULL,
		|	Flag Bit NOT NULL
		|)";

		Запрос.ВыполнитьСкалярный(ЗапросНаСозданиеТаблицы);
	КонецЕсли;

	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysindexes
	|			  WHERE     (name = 'IX__"+ИмяТаблицыТоваров+"_ID')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если кол=0 Тогда
	
		ЗапросНаСозданиеИндексов = "
		|Set NoCount ON
		|CREATE INDEX [IX__"+ИмяТаблицыТоваров+"_ID]
		|	ON dbo.["+ИмяТаблицыТоваров+"](ID)
		|";
	
		Запрос.ВыполнитьСкалярный(ЗапросНаСозданиеИндексов);
	КонецЕсли;
	//}
                	
	//insert
	//{ Товары

	ИмяТриггера = "ТриггерВставка_Товары";

	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysobjects
	|			  WHERE     (name = '"+ИмяТриггера+"')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если кол=0 Тогда
	
		ТекстЗапроса = "CREATE TRIGGER "+ИмяТриггера+" ON "+ИмяТаблицыТовары+"
		|AFTER UPDATE, INSERT, DELETE
		|AS
		|DECLARE @ID char(9)
		|SET NOCOUNT ON
		|SELECT @ID = ID FROM Inserted
		|BEGIN
		|
		|	--DELETED
		|	UPDATE "+ИмяТаблицыТоваров+"
		|	SET TimeStamp = GETDATE()
		|	WHERE ID IN (SELECT ID FROM DELETED)
		|
		|	-- inserted and updated
		|	INSERT INTO "+ИмяТаблицыТоваров+" (ID, TimeStamp, Deleted, Flag)
		|	select ID, GETDATE(), 0, 0 FROM Inserted WHERE ID NOT IN (SELECT ID FROM "+ИмяТаблицыТоваров+")
		|	
		|
		|END
		|";
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	КонецЕсли;
	//}

	//insert
	//{ ОстаткиТоваров

	ИмяТриггера = "ТриггерВставка_ОстаткиТоваров";

	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysobjects
	|			  WHERE     (name = '"+ИмяТриггера+"')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если кол=0 Тогда
	
		ТекстЗапроса = "CREATE TRIGGER "+ИмяТриггера+" ON "+ИмяТаблицыРегистра+"
		|AFTER UPDATE, INSERT, DELETE
		|AS
		|SET NOCOUNT ON
		|BEGIN
		|
		|	--DELETED
		|	UPDATE "+ИмяТаблицыТоваров+"
		|	SET TimeStamp = GETDATE()
		|	FROM "+ИмяТаблицыТоваров+"
		|	WHERE ID IN (SELECT "+ИмяРеквизитаТовар+" FROM DELETED)
		|
		|	-- inserted and updated
		|	INSERT INTO "+ИмяТаблицыТоваров+" (ID, TimeStamp, Deleted, Flag)
		|	select "+ИмяРеквизитаТовар+", GETDATE(), 0, 0 FROM Inserted WHERE "+ИмяРеквизитаТовар+" NOT IN (SELECT ID FROM "+ИмяТаблицыТоваров+")
		|
		|END
		|";
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	КонецЕсли;
	//}

	//insert
	//{ _1sconst

	ИмяТриггера = "ТриггерВставка_Константы";

	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysobjects
	|			  WHERE     (name = '"+ИмяТриггера+"')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если кол=0 Тогда
		
		ИДцена = MDW.ИДРеквизитаСправочника("Цены","Цена");
		
	
		ТекстЗапроса = "CREATE TRIGGER "+ИмяТриггера+" ON _1SCONST
		|AFTER UPDATE, INSERT, DELETE
		|AS
		|SET NOCOUNT ON
		|BEGIN
		|
		|	--DELETED
		|	UPDATE "+ИмяТаблицыТоваров+"
		|	SET TimeStamp = GETDATE()
		|	FROM "+ИмяТаблицыТоваров+"
		|	WHERE ID IN (SELECT OBJID FROM DELETED)
		|
		|	-- inserted and updated
		|	INSERT INTO "+ИмяТаблицыТоваров+" (ID, TimeStamp, Deleted, Flag)
		|	select OBJID, GETDATE(), 0, 0 FROM Inserted
		|	WHERE ID = "+ИДцена+" AND OBJID NOT IN (SELECT ID FROM "+ИмяТаблицыТоваров+")
		|
		|END
		|";
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	КонецЕсли;
	//}
	
	//insert
	//{ СпецЦены
	ИмяТриггера = "ТриггерВставка_Цены";

	ТекстЗапроса="SELECT     count(*)
	|			  FROM         sysobjects
	|			  WHERE     (name = '"+ИмяТриггера+"')
	|";
	кол=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если кол=0 Тогда
		
		ИДРеквизитаТовар = "PARENTEXT";
		
	
		ТекстЗапроса = "CREATE TRIGGER "+ИмяТриггера+" ON "+ИмяТаблицыЦены+"
		|AFTER UPDATE, INSERT, DELETE
		|AS
		|SET NOCOUNT ON
		|BEGIN
		|
		|	--DELETED
		|	UPDATE "+ИмяТаблицыТоваров+"
		|	SET TimeStamp = GETDATE()
		|	FROM "+ИмяТаблицыТоваров+"
		|	WHERE ID IN (SELECT " + ИДРеквизитаТовар + "  FROM DELETED)
		|
		|	-- inserted and updated
		|	INSERT INTO "+ИмяТаблицыТоваров+" (ID, TimeStamp, Deleted, Flag)
		|	select " + ИДРеквизитаТовар + ", GETDATE(), 0, 0 FROM Inserted
		|	WHERE " + ИДРеквизитаТовар + " NOT IN (SELECT ID FROM "+ИмяТаблицыТоваров+")
		|
		|END
		|";
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	КонецЕсли;
	//}
		

	
	
	КонецЕсли;
КонецПроцедуры

//******************************
Процедура SQLInit()                  
	
	MDW=СоздатьОбъект("MetaDataWork");
	
	СозданиеИндексовТаблиц();
	СозданиеТриггеровТаблиц();

	ТекстЗапроса = "
	|			DECLARE @пТовар char(9)
	|			SET @пТовар = ?
	|			SELECT ОстаткиТоваровОстатки.ОстатокТовараОстаток
	|			FROM $РегистрОстатки.ОстаткиТоваров(,
	|			INNER JOIN $Справочник.МестаХранения AS МестаХранения (NOLOCK) ON Склад = МестаХранения.ID,
	|			(Товар = @пТовар AND $МестаХранения.ТипСклада = $Перечисление.ТипыСкладов.СкладРаспродажи)
	|			,
	|			Товар,) AS ОстаткиТоваровОстатки	
	|";
	
	глЗапросПоОстаткамРасп=СоздатьОбъект("ODBCRecordSet");
	глЗапросПоОстаткамРасп.Подготовить(ТекстЗапроса);
	глЗапросПоОстаткамРасп.ДобПараметр(1,14,9,0);

	ТекстЗапроса = "
	|			DECLARE @пТовар char(9), @пСкладГруппа char(9)
	|			SET @пТовар = ?
	|			SET @пСкладГруппа = ?
	|			SELECT SUM(ОстаткиТоваровОстатки.ОстатокТовараОстаток) Остаток
	|			FROM $РегистрОстатки.ОстаткиТоваров(,,
	|			(Товар = @пТовар AND Склад IN (SELECT ID FROM Дерево_МестаХранения WHERE PARENTID = @пСкладГруппа))
	|			,
	|			Склад,) AS ОстаткиТоваровОстатки	
	|";
	
	глЗапросПоОстаткамПоГруппеСкладов=СоздатьОбъект("ODBCRecordSet");
	глЗапросПоОстаткамПоГруппеСкладов.Подготовить(ТекстЗапроса);
	глЗапросПоОстаткамПоГруппеСкладов.ДобПараметр(1,14,9,0);
	глЗапросПоОстаткамПоГруппеСкладов.ДобПараметр(1,14,9,0);

	ТекстЗапроса = "
	|			DECLARE @пТовар char(9), @пСкладГруппа char(9)
	|			SET @пТовар = ?
	|			SET @пСкладГруппа = ?
	|			SELECT SUM(ОстаткиТоваровОстатки.ОстатокТовараОстаток) Остаток
	|			FROM $РегистрОстатки.НедоступныеТовары(,,
	|			(Товар = @пТовар AND Склад IN (SELECT ID FROM $Справочник.МестаХранения Спр(NOLOCK) WHERE $Спр.ТипСклада = $Перечисление.ТипыСкладов.СкладПредПродПодготовки))
	|			,
	|			Склад,) AS ОстаткиТоваровОстатки	
	|";
	
	глЗапросПоНедоступнымОстаткамПоГруппеСкладов=СоздатьОбъект("ODBCRecordSet");
	глЗапросПоНедоступнымОстаткамПоГруппеСкладов.Подготовить(ТекстЗапроса);
	глЗапросПоНедоступнымОстаткамПоГруппеСкладов.ДобПараметр(1,14,9,0);
	глЗапросПоНедоступнымОстаткамПоГруппеСкладов.ДобПараметр(1,14,9,0);
	
	ТекстЗапроса="DECLARE @пТовар char(9), @пСклад char(9)
	|			  SET @пТовар = ?
	|			  SET @пСклад = ?
	|			  SELECT SUM(РезервыТоваровОстатки.РезервТовараОстаток) Резерв
	|			  FROM $РегистрОстатки.РезервыТоваров(,INNER JOIN $Документ.Счет ДокС (NOLOCK) ON ДокС.IDDOC = ПоСчету,
	|													(Товар = @пТовар AND $ДокС.Склад = @пСклад),
	|												(Товар),) AS РезервыТоваровОстатки
	|";

	глЗапросПоРезервам=СоздатьОбъект("ODBCRecordSet");
	глЗапросПоРезервам.Подготовить(ТекстЗапроса);
	глЗапросПоРезервам.ДобПараметр(1,14,9,0);
	глЗапросПоРезервам.ДобПараметр(1,14,9,0);

	
	ТекстЗапроса="DECLARE @пТовар char(9), @пСкладГруппа char(9)
	|			  SET @пТовар = ?
	|			  SET @пСкладГруппа = ?
	|			  SELECT SUM(РезервыТоваровОстатки.РезервТовараОстаток) Резерв
	|			  FROM $РегистрОстатки.РезервыТоваров(,INNER JOIN $Документ.Счет ДокС (NOLOCK) ON ДокС.IDDOC = ПоСчету,
	|													(Товар = @пТовар AND $ДокС.Склад IN (SELECT ID FROM Дерево_МестаХранения WHERE PARENTID = @пСкладГруппа)),
	|												(Товар),) AS РезервыТоваровОстатки
	|";

	глЗапросПоРезервамПоГруппамСкладов=СоздатьОбъект("ODBCRecordSet");
	глЗапросПоРезервамПоГруппамСкладов.Подготовить(ТекстЗапроса);
	глЗапросПоРезервамПоГруппамСкладов.ДобПараметр(1,14,9,0);
	глЗапросПоРезервамПоГруппамСкладов.ДобПараметр(1,14,9,0);
	
	
	ТекстЗапроса="DECLARE @пТовар char(9), @пСклад char(9)
	|			  SET @пТовар = ?
	|			  SET @пСклад = ?
	|			  SELECT СпецЗаказыОстатки.ЗаказаноОстаток Ост
	|			  FROM $РегистрОстатки.СпецЗаказы(,INNER JOIN $Документ.Счет ДокС (NOLOCK) ON ДокС.IDDOC = ПоСчету,
	|													(Товар = @пТовар AND $ДокС.Склад = @пСклад),
	|												(Товар),) AS СпецЗаказыОстатки
	|";

	глЗапросПоСпецЗаказам=СоздатьОбъект("ODBCRecordSet");
	глЗапросПоСпецЗаказам.Подготовить(ТекстЗапроса);
	глЗапросПоСпецЗаказам.ДобПараметр(1,14,9,0);
	глЗапросПоСпецЗаказам.ДобПараметр(1,14,9,0);
	
	
	ТекстЗапроса="
	|DECLARE @пВалюта char(9), @пНаДату datetime
	|SET @пНаДату = ?
	|SET @пВалюта = ?
	|SELECT CASE WHEN Кратность=0 THEN Курс ELSE Курс/Кратность END Курс
	|FROM (
	|SELECT $ПоследнееЗначение.Валюты.Курс(@пВалюта,@пНаДату) Курс
	|       , COALESCE($ПоследнееЗначение.Валюты.Кратность(@пВалюта,@пНаДату),1) Кратность ) Курсы 
	|";
	
	глЗапросПоВалютам=СоздатьОбъект("ODBCRecordSet");
	глЗапросПоВалютам.Подготовить(ТекстЗапроса);
	глЗапросПоВалютам.ДобПараметр(1,10,17,0);
	глЗапросПоВалютам.ДобПараметр(1,14,9,0);

	ТекстЗапроса="DECLARE @пДок char(15), @пНом SmallInt
	|			  SET @пНом = ?
	|			  SET @пДок = ?
	|			  SELECT СпрСост.ID [Состояние $Справочник.СостоянияДокументов]
|			  	  FROM $Справочник.СостоянияДокументов СпрСост (NOLOCK)
	|			  WHERE СпрСост.CODE = @пНом AND $СпрСост.ВидДокумента = @пДок
	|";
	
	глЗапросПоСостояниюДокумента=СоздатьОбъект("ODBCRecordSet");
	глЗапросПоСостояниюДокумента.Подготовить(ТекстЗапроса);
	глЗапросПоСостояниюДокумента.ДобПараметр(1,3,2,0);
	глЗапросПоСостояниюДокумента.ДобПараметр(1,14,9,0);

	
	ТекстЗапроса="DECLARE @пДок char(9)
	|			  SET @пДок = ?
//	|			  SELECT TOP 1 КомплектацияЗаявокОстатки.Статус
	|			  SELECT TOP 1 COALESCE($СпрБлок.СостояниеДок,СпрСост.ID,$ПустойИД) [Состояние $Справочник.СостоянияДокументов]
	|			  FROM $РегистрОстатки.КомплектацияЗаявок(,,
	|													(ПоСчету = @пДок),
	|													Статус,) AS КомплектацияЗаявокОстатки
	|			  INNER JOIN $Справочник.СостоянияДокументов СпрСост (NOLOCK) ON СпрСост.CODE = КомплектацияЗаявокОстатки.Статус AND $СпрСост.ВидДокумента = 'Счет'
	|			  LEFT JOIN $Справочник.БлокировкиДок СпрБлок (NOLOCK) ON  $СпрБлок.Док = $ВидДокумента36.Счет + @пДок AND $СпрБлок.Блокировка =1 AND СпрБлок.ISMARK = 0
	|";
	
	глЗапросПоЗаявкамСтатус=СоздатьОбъект("ODBCRecordSet");
	//глЗапросПоЗаявкамСтатус.Отладка(1);
	глЗапросПоЗаявкамСтатус.Подготовить(ТекстЗапроса);
	глЗапросПоЗаявкамСтатус.ДобПараметр(1,14,9,0);


	ТекстЗапроса="DECLARE @пДок char(9)
	|			  SET @пДок = ?
	|			  SELECT TOP 1 СпрСост.ID [Состояние $Справочник.СостоянияДокументов]
	|			  FROM $Справочник.СостоянияДокументов СпрСост (NOLOCK) 
	|			  LEFT JOIN [FOOD_WWW].[dbo].[RoutingTableFact] (NOLOCK) ON СпрСост.CODE = CASE WHEN IDDOC IS NULL THEN 0 
	|																								 WHEN IDDOC IS NOT NULL AND StartTime IS NULL THEN 1 
	|					      																		 WHEN StartTime IS NOT NULL AND EndTime IS NULL THEN 2 
	|					      																		 WHEN StartTime IS NOT NULL AND EndTime IS NOT NULL THEN 3 
	|						  																	     ELSE 0 END 
	|			  WHERE $СпрСост.ВидДокумента = 'МаршрутныйЛист' AND IDDOC = @пДок
	|			  UNION 
	|			  SELECT TOP 1 СпрСост.ID [Состояние $Справочник.СостоянияДокументов]
	|			  FROM $Справочник.СостоянияДокументов СпрСост (NOLOCK) 
	|			  WHERE $СпрСост.ВидДокумента = 'МаршрутныйЛист' AND СпрСост.CODE  = 0
	|				AND NOT EXISTS (SELECT IDDOC FROM [FOOD_WWW].[dbo].[RoutingTableFact] WHERE IDDOC = @пДок )
	|";
	
	глЗапросПоМЛСтатус=СоздатьОбъект("ODBCRecordSet");
	глЗапросПоМЛСтатус.Подготовить(ТекстЗапроса);
	глЗапросПоМЛСтатус.ДобПараметр(1,14,9,0);

	ТекстЗапроса="DECLARE @пДок char(9)
	|			  SET @пДок = ?
	//|			  SELECT TOP 1 CASE  
	//|						   WHEN IDDOCDEF IN ($ВидДокумента.КомплектацияЗаявки,$ВидДокумента.СнятиеРезерва, $ВидДокумента.КомплектацияЗаявкиФакт) THEN 'Аннулирована'
	//|						   WHEN IDDOCDEF IN ($ВидДокумента.РасходнаяНакладная,$ВидДокумента.РасходнаяНакладнаяНал) THEN 'Отгружена' 
	//|						   WHEN IDDOCDEF IN ($ВидДокумента.Перемещение,$ВидДокумента.ПеремещениеДепартамент,$ВидДокумента.ПеремещениеНаСкладГотовойПродукции) THEN 'Отгружена' 
	//|			  			   ELSE  'Неизвестно' END Статус
	|			  SELECT TOP 1 СпрСост.ID [Состояние $Справочник.СостоянияДокументов]
	|			  FROM $Регистр.КомплектацияЗаявок РегКЗ (NOLOCK)
	|			  INNER JOIN $Справочник.СостоянияДокументов СпрСост (NOLOCK) ON СпрСост.CODE = CASE  
	|						 																	  WHEN IDDOCDEF IN ($ВидДокумента.КомплектацияЗаявки,$ВидДокумента.СнятиеРезерва, $ВидДокумента.КомплектацияЗаявкиФакт) THEN 0 /* Аннулирована */
	|						   																	  WHEN IDDOCDEF IN ($ВидДокумента.РасходнаяНакладная,$ВидДокумента.РасходнаяРеализатора,$ВидДокумента.РасходнаяНакладнаяНал,$ВидДокумента.Списание) THEN 4 /* Отгружена */
	|																							  WHEN IDDOCDEF = $ВидДокумента.ПриходнаяНакладная THEN 6 /* Отгружена */
	|						   																	  WHEN IDDOCDEF IN ($ВидДокумента.Перемещение,$ВидДокумента.ПеремещениеДепартамент,$ВидДокумента.ПеремещениеНаСкладГотовойПродукции) THEN 4 /* Отгружена */
	|                                                                                             WHEN (IDDOCDEF = $ВидДокумента.Счет AND ($РегКЗ.Статус=22 OR $РегКЗ.Статус=32) /* Бронирование */)  THEN 20 /* Пустая бронь */
	|                                                                                             WHEN (IDDOCDEF = $ВидДокумента.Счет AND $РегКЗ.Статус=1 /* Комплектация */)  THEN 0 /* Аннулирована */
	|			  			   																	  ELSE -9 END 
	|																			  AND $СпрСост.ВидДокумента = 'Счет'
	|			  WHERE $РегКЗ.ПоСчету = @пДок AND РегКЗ.DEBKRED = 1
	|			  ORDER BY DATE_TIME_IDDOC DESC
	|";
	
	глЗапросПоЗаявкамИстория=СоздатьОбъект("ODBCRecordSet");
	//глЗапросПоЗаявкамИстория.Отладка(1);
	глЗапросПоЗаявкамИстория.Подготовить(ТекстЗапроса);
	глЗапросПоЗаявкамИстория.ДобПараметр(1,14,9,0);
	

	ТекстЗапроса="
	|DECLARE @пТовар char(9), @пНаДату datetime
	|SET @пНаДату = ?
	|SET @пТовар = ?
	|SELECT $ПоследнееЗначение.Номенклатура.ВыделитьАкцLV(@пТовар,@пНаДату) Выделить";
	

	глЗапросПоАкцентамТовараLV=СоздатьОбъект("ODBCRecordSet");
	глЗапросПоАкцентамТовараLV.Подготовить(ТекстЗапроса);
	глЗапросПоАкцентамТовараLV.ДобПараметр(1,10,17,0);
	глЗапросПоАкцентамТовараLV.ДобПараметр(1,14,9,0);
	
	
	ТекстЗапроса="
	|DECLARE @пТовар char(9), @пНаДату datetime
	|SET @пНаДату = ?
	|SET @пТовар = ?
	|SELECT $ПоследнееЗначение.Номенклатура.ВыделитьАкцLT(@пТовар,@пНаДату) Выделить";

	глЗапросПоАкцентамТовараLT=СоздатьОбъект("ODBCRecordSet");
	глЗапросПоАкцентамТовараLT.Подготовить(ТекстЗапроса);
	глЗапросПоАкцентамТовараLT.ДобПараметр(1,10,17,0);
	глЗапросПоАкцентамТовараLT.ДобПараметр(1,14,9,0);
	
	
	ТекстЗапроса="
	|DECLARE @пТовар char(9), @пНаДату datetime
	|SET @пНаДату = ?
	|SET @пТовар = ?
	|SELECT $ПоследнееЗначение.Номенклатура.ВыделитьАкцEE(@пТовар,@пНаДату) Выделить";
	
	глЗапросПоАкцентамТовараEE=СоздатьОбъект("ODBCRecordSet");
	глЗапросПоАкцентамТовараEE.Подготовить(ТекстЗапроса);
	глЗапросПоАкцентамТовараEE.ДобПараметр(1,10,17,0);
	глЗапросПоАкцентамТовараEE.ДобПараметр(1,14,9,0);
	
	
	Попытка
		//		RBS=СоздатьОбъект("RainBowService");
		ОДБСКвери = CreateObject("ODBCRecordSet");
		
		Если ФС.СуществуетФайл(КаталогИБ()+"\1CV7.DD")=1 Тогда //Для базы DBF версии
			Соединение=СоздатьОбъект("ADODB.Connection");
			НаборЗаписей=СоздатьОбъект("ADODB.Recordset");
			ConnectionString = "driver=Microsoft Visual FoxPro Driver;Exclusive=No;SourceType=DBF;SourceDB="+КаталогИБ();
			Соединение.ConnectionTimeout = 300;
			Соединение.CursorLocation= 3;
			Соединение.Open(ConnectionString);
		Иначе //Для SQL версии
			
			Соединение=СоздатьОбъект("ODBCRecordSet");
		КонецЕсли;   
	Исключение   
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	
КонецПроцедуры


//**************************************************
//Исполняет ТекстСКЛ и возвращает 1 если все хорошо, иначе 0.
//Если ОписыватьОшибку=1 Тогда выдаст сообщение об ошибке. По умолчанию 1
Процедура глИсполнитьСКЛ(ТекстСКЛ,ОписыватьОшибку=1) Экспорт
	
	Если ОДБСКвери.Подготовить(ТекстСКЛ)=1 Тогда
		//Если Соединение.Подготовить(ТекстСКЛ)=1 Тогда
		сообщить("Ошибка при выполнении запроса!");
		ОДБСКвери.Закрыть();
		возврат;
	КонецЕсли;
	ОДБСКвери.Открыть();
	Сообщить("ОДБСКвери отработал");
КонецПроцедуры


Процедура глУдалениеВременнойТаблицыSQL(ИмяТаблицы) Экспорт
	
	Запрос=СоздатьОбъект("ODBCRecordSet"); 
	
	ТекстЗапроса="-- удаление временной таблицы
	|IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE 
	|ID=OBJECT_ID('tempdb.."+ИмяТаблицы+"') AND sysstat & 0xf = 3 )
	|DROP TABLE "+ИмяТаблицы+";";
	Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
КонецПроцедуры



// ******************************
Функция Абс_( Конт ) Экспорт
	Если 	Конт > 0  Тогда	
		Возврат  Конт ;
	Иначе		
		Возврат -1 * Конт ;
	КонецЕсли;
КонецФункции


//******************************************************************
//Алгортим Успеха Начало
//Все, что касается SQL

//*********************************************************************
Функция ПолучитьУникальныйIDD() Экспорт
	Перем IDD;
	Если глЕстьЛицензияБлокировок=1 Тогда
		//обходим узкие места механизма IDD
		ТекНовыйНомер=ГибкиеБлокировки.ПолучитьУникальныйНомер();
		IDD=Прав("0000000"+СокрЛП(Константа.IDD),7)+прав("000000"+СокрЛП(Константа.IDDПрефиксИБ)+"00"+СокрЛП(ТекНовыйНомер),10);
	Иначе
		Блокировка=1;
		Пока Блокировка=1 Цикл
			Попытка
				НачатьТранзакцию();
				Константа.УникальныйIDD=Константа.УникальныйIDD;//блокируем
				Блокировка=0;//константа заблокирована не была - можем работать
			Исключение
				ОтменитьТранзакцию();
				Блокировка=1;//константа заблокирована !!
			КонецПопытки;
		КонецЦикла;
		
		Константа.УникальныйIDD=Число(Константа.УникальныйIDD)+1;
		//IDD=Прав("0000000"+СокрЛП(Константа.IDD),7)+прав("000000"+СокрЛП(Константа.IDDПрефиксИБ)+"000"+СокрЛП(Константа.УникальныйIDD),10);
		IDD=Прав("0000000"+СокрЛП(Константа.IDD),7)+прав("000000"+СокрЛП(Константа.IDDПрефиксИБ)+"00"+СокрЛП(Константа.УникальныйIDD),10);
		
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	Возврат IDD;
	
КонецФункции //

//*********************************************************************
Функция ОткрытьФайлМОДПоИмениСправочник(БазаДанных,Вид,КраткоеИмяФайла,Позже=0) Экспорт
	//Почти гарантированное открывание файла (т.е. если он не занят другим приложением)
	//Изменения,Пакеты,Удаления   - 3 вида файлов
	ИмяФ=КаталогБазыДанных()+КраткоеИмяФайла+".dbf";
	ИмяИнд=КаталогБазыДанных()+КраткоеИмяФайла+".cdx";
	Если Вид="Изменения" Тогда
		БазаДанных=СоздатьОбъект("Справочник.ИзмененияМОД"+?(Позже=1,"Позже",""));
		Возврат 1;
	ИначеЕсли Вид="Удаления" Тогда
		БазаДанных=СоздатьОбъект("Справочник.УдаленияМОД");
		Возврат 1;
	КонецЕсли;
	Возврат 0;
	
КонецФункции 

//**************************************************************************
//*********************************************************************

//Начало текста, вставленного Инсталлятором МОД
Функция ПриВыгрузкеСправочника(Спр) Экспорт
	//_____________________________________________________________________________
	//Функция предназначена для предварительного анализа данных элемента справочника.
	//Вызывается всегда перед выгрузкой справочника
	//Должна заполняться самим пользователем.
	//Параметры:
	//         Спр - контекст выгружаемого справочника (объект типа "Справочник")
	//Возвращаемое значение:
	//         1 - справочник разрешено выгружать
	//         0 - справочник запрещено выгружать
	
	//*********************************************************************************
	//Внимание: для предотвращения затирания Вашего кода во время обновления версии МОД
	//следует удалить комментарии, вставляемые инсталлятором вначале и конце данной функции
	//*********************************************************************************
	
	//текст программы обработки
	//текст программы обработки
	Возврат 1;
	
	
КонецФункции
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Функция ПриВыгрузкеДокумента(Док) Экспорт
	//_____________________________________________________________________________
	//Функция предназначена для предварительного анализа данных документа.
	//Вызывается каждый раз перед выгрузкой документа.
	//Должна заполняться самим пользователем.
	//Параметры:
	//         Док - контекст выгружаемого документа (объект типа "Документ")
	//Возвращаемое значение:
	//         1 - документ разрешено выгружать
	//         0 - документ запрещено выгружать
	
	//*********************************************************************************
	//Внимание: для предотвращения затирания Вашего кода во время обновления версии МОД
	//следует удалить комментарии, вставляемые инсталлятором вначале и конце данной функции
	//*********************************************************************************
	
	//текст программы обработки
	//текст программы обработки
	Возврат 1;
	
	
КонецФункции
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Функция ПриЗаписиСправочника(Спр) Экспорт
	//_____________________________________________________________________________
	//Функция предназначена для предварительного анализа данных элемента справочника.
	//Вызывается всегда перед записью справочника
	//Должна заполняться самим пользователем.
	//Параметры:
	//         Спр - контекст загружаемого справочника (объект типа "Справочник")
	//Возвращаемое значение:
	//         1 - справочник разрешено записывать
	//         0 - справочник запрещено записывать
	
	//*********************************************************************************
	//Внимание: для предотвращения затирания Вашего кода во время обновления версии МОД
	//следует удалить комментарии, вставляемые инсталлятором вначале и конце данной функции
	//*********************************************************************************
	
	//текст программы обработки
	//текст программы обработки
	Возврат 1;
	
КонецФункции
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Функция ПриЗаписиДокумента(Док) Экспорт
	//_____________________________________________________________________________
	//Функция предназначена для предварительного анализа данных документа.
	//Вызывается каждый раз перед записью документа.
	//Должна заполняться самим пользователем.
	//Параметры:
	//         Док - контекст загружаемого документа (объект типа "Документ")
	//Возвращаемое значение:
	//         1 - документ разрешено записывать
	//         0 - документ запрещено записывать
	
	//*********************************************************************************
	//Внимание: для предотвращения затирания Вашего кода во время обновления версии МОД
	//следует удалить комментарии, вставляемые инсталлятором вначале и конце данной функции
	//*********************************************************************************
	
	//текст программы обработки
	//текст программы обработки
	Возврат 1;
	
КонецФункции
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Функция ОткрытьФайлМОДПоИмени(БазаДанных,Вид,КраткоеИмяФайла) Экспорт
	//Почти гарантированное открывание файла (т.е. если он не занят другим приложением)
	//Изменения,Пакеты,Удаления   - 3 вида файлов
	ИмяФ=КаталогБазыДанных()+КраткоеИмяФайла+".dbf";
	ИмяИнд=КаталогБазыДанных()+КраткоеИмяФайла+".cdx";
	Если Вид="Изменения" Тогда
		Если ТипЗначенияСтр(БДМОД)="XBASE" Тогда
			Если БДМОД.Открыта()=1 Тогда
				БазаДанных=БДМОД;
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
		БазаДанных=СоздатьОбъект("XBase");
		Если ФС.СуществуетФайл(ИмяФ)=0 Тогда//не существует dbf
			Если Число(МОДДлинаID)=0 Тогда
				МОДДлинаID=17;
			КонецЕсли;
			БазаДанных.ДобавитьПоле("IDD","C",МОДДлинаID,);
			БазаДанных.ДобавитьПоле("TIP","N",2,);
			БазаДанных.ДобавитьПоле("VIDD","C",50,);
			БазаДанных.ДобавитьПоле("DATE","D",,);
			
			
			БазаДанных.СоздатьФайл(ИмяФ);
			БазаДанных.ЗакрытьФайл();
		КонецЕсли;
		
		БазаДанных.ОткрытьФайл(ИмяФ);
		БазаДанных.АвтоСохранение(0);
		БДМОД=БазаДанных;
		Если БазаДанных.Открыта()=1 Тогда
			ИмяФайлаБДМОД=ИмяФ;
			Возврат 1;
		КонецЕсли;
		ИмяФайлаБДМОД=ИмяФ;
		Возврат 0;
		
	ИначеЕсли Вид="Удаления" Тогда
		Если ТипЗначенияСтр(БДУдаленийМОД)="XBASE" Тогда
			Если БДУдаленийМОД.Открыта()=1 Тогда
				БазаДанных=БДУдаленийМОД;
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
		БазаДанных=СоздатьОбъект("XBase");
		Если ФС.СуществуетФайл(ИмяФ)=0 Тогда//не существует dbf
			Если Число(МОДДлинаID)=0 Тогда
				МОДДлинаID=17;
			КонецЕсли;
			БазаДанных.ДобавитьПоле("IDD","C",МОДДлинаID,);
			БазаДанных.ДобавитьПоле("TIP","N",2,);
			БазаДанных.ДобавитьПоле("VIDD","C",50,);
			
			БазаДанных.ДобавитьИндекс("IDD","IDD",0,0,".TRUE.");
			БазаДанных.СоздатьФайл(ИмяФ,ИмяИнд);
			БазаДанных.ЗакрытьФайл();
		Иначе
			Если  ФС.СуществуетФайл(ИмяИнд)=0 Тогда//не существует cdx
				БазаДанных.ОткрытьФайл(ИмяФ,);
				БазаДанных.ДобавитьИндекс("IDD","IDD",0,0,".TRUE.");
				
				БазаДанных.СоздатьИндексныйФайл(ИмяИнд);
				БазаДанных.Переиндексировать();
				БазаДанных.ЗакрытьФайл();
			КонецЕсли;
		КонецЕсли;
		
		БазаДанных.ОткрытьФайл(ИмяФ,ИмяИнд);
		БазаДанных.АвтоСохранение(0);
		Если БазаДанных.Открыта()=1 Тогда
			БазаДанных.ТекущийИндекс("IDD");//используем только один индекс
			БДУдаленийМОД=БазаДанных;
			ИмяФайлаБДУдаленийМОД=ИмяФ;
			Возврат 1;
		КонецЕсли;
		ИмяФайлаБДУдаленийМОД="";
		Возврат 0;
	ИначеЕсли Вид="Пакеты" Тогда
		Если ТипЗначенияСтр(БДПакетыМОД)="XBASE" Тогда
			Если БДПакетыМОД.Открыта()=1 Тогда
				БазаДанных=БДПакетыМОД;
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
		БазаДанных=СоздатьОбъект("XBase");
		Если ФС.СуществуетФайл(ИмяФ)=0 Тогда//не существует dbf
			Если Число(МОДДлинаID)=0 Тогда
				МОДДлинаID=17;
			КонецЕсли;
			БазаДанных.ДобавитьПоле("IDD","C",МОДДлинаID,); //идентификатор
			БазаДанных.ДобавитьПоле("TIP","N",2,); //тип объекта
			БазаДанных.ДобавитьПоле("VIDD","C",50,);//вид объекта
			БазаДанных.ДобавитьПоле("POS","N",10,);  //временная позиция - для упорядочивания выгрузки по времени
			БазаДанных.ДобавитьПоле("DATE1","D",,);//дата начала выгрузки периодических реквизитов
			БазаДанных.ДобавитьПоле("DATE2","D",,);//
			БазаДанных.ДобавитьПоле("IDDDB","C",17,);//это "адрес",т.е.IDD базы-приемника(7 букв) + номер пакета (остальное)
			
			БазаДанных.ДобавитьИндекс("POS","POS",0,0,".TRUE.");
			БазаДанных.ДобавитьИндекс("IDD","TRIM(IDDDB)+TRIM(IDD)",0,0,".TRUE.");
			БазаДанных.ДобавитьИндекс("IDDDB","TRIM(IDDDB)",0,0,".TRUE.");
			
			БазаДанных.СоздатьФайл(ИмяФ,ИмяИнд);
			БазаДанных.ЗакрытьФайл();
		Иначе
			Если  ФС.СуществуетФайл(ИмяИнд)=0 Тогда//не существует cdx
				БазаДанных.ОткрытьФайл(ИмяФ,);
				БазаДанных.ДобавитьИндекс("POS","POS",0,0,".TRUE.");
				БазаДанных.ДобавитьИндекс("IDD","TRIM(IDDDB)+TRIM(IDD)",0,0,".TRUE.");
				БазаДанных.ДобавитьИндекс("IDDDB","TRIM(IDDDB)",0,0,".TRUE.");
				
				БазаДанных.СоздатьИндексныйФайл(ИмяИнд);
				БазаДанных.Переиндексировать();
				БазаДанных.ЗакрытьФайл();
			КонецЕсли;
		КонецЕсли;
		
		БазаДанных.ОткрытьФайл(ИмяФ,ИмяИнд);
		БазаДанных.АвтоСохранение(0);
		БДПакетыМОД=БазаДанных;
		Возврат БазаДанных.Открыта(); 
	ИначеЕсли Вид="ЖурналРегистрации" Тогда
		Если ТипЗначенияСтр(ЖурналРегистрации)="XBASE" Тогда
			Если ЖурналРегистрации.Открыта()=1 Тогда
				БазаДанных=ЖурналРегистрации;
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
		БазаДанных=СоздатьОбъект("XBase");
		Если ФС.СуществуетФайл(ИмяФ)=0 Тогда//не существует dbf
			Если Число(МОДДлинаID)=0 Тогда
				МОДДлинаID=17;
			КонецЕсли;
			БазаДанных.ДобавитьПоле("IDD","C",МОДДлинаID,); //идентификатор
			БазаДанных.ДобавитьПоле("TIP","N",2,); //тип объекта
			БазаДанных.ДобавитьПоле("VIDD","C",50,);//вид объекта
			БазаДанных.ДобавитьПоле("_Date","D",,);//дата начала выгрузки периодических реквизитов
			БазаДанных.ДобавитьПоле("_Time","C",8,);//           
			БазаДанных.ДобавитьПоле("VigrZagr","N",1,); //флаг выгрузки-загрузки
			БазаДанных.ДобавитьПоле("IDDDB","C",17,);//это "адрес",т.е.IDD базы-приемника(7 букв) + номер пакета (остальное)
			
			БазаДанных.ДобавитьИндекс("IDD","TRIM(IDDDB)+TRIM(IDD)",0,0,".TRUE.");
			БазаДанных.ДобавитьИндекс("IDDDB","TRIM(IDDDB)",0,0,".TRUE.");
			
			БазаДанных.СоздатьФайл(ИмяФ,ИмяИнд);
			БазаДанных.ЗакрытьФайл();
		Иначе
			Если  ФС.СуществуетФайл(ИмяИнд)=0 Тогда//не существует cdx
				БазаДанных.ОткрытьФайл(ИмяФ,);
				БазаДанных.ДобавитьИндекс("IDD","TRIM(IDDDB)+TRIM(IDD)",0,0,".TRUE.");
				БазаДанных.ДобавитьИндекс("IDDDB","TRIM(IDDDB)",0,0,".TRUE.");
				
				БазаДанных.СоздатьИндексныйФайл(ИмяИнд);
				БазаДанных.Переиндексировать();
				БазаДанных.ЗакрытьФайл();
			КонецЕсли;
		КонецЕсли;
		
		БазаДанных.ОткрытьФайл(ИмяФ,ИмяИнд);
		БазаДанных.АвтоСохранение(0);
		ЖурналРегистрации=БазаДанных;
		Возврат БазаДанных.Открыта(); 		    
		
	КонецЕсли;
	Возврат 0;
	
КонецФункции
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Функция ОткрытьФайлМОД(БазаДанных,Вид="Изменения",ИмяПакетногоФайла="tran2",Позже=0) Экспорт
	Если Вид="Изменения" Тогда
		КраткоеИмяФайла="tran11";
		Если ОткрытьФайлМОДПоИмениСправочник(БазаДанных,"Изменения",КраткоеИмяФайла,Позже)=1 Тогда
			Возврат 1;
		КонецЕсли;
		Возврат 0;
	ИначеЕсли Вид="Пакеты" Тогда
		Возврат	ОткрытьФайлМОДПоИмени(БазаДанных,"Пакеты",ИмяПакетногоФайла);
	ИначеЕсли Вид="Удаления" Тогда
		КраткоеИмяФайла="tran31";
		Если ОткрытьФайлМОДПоИмениСправочник(БазаДанных,"Удаления",КраткоеИмяФайла)=1 Тогда
			Возврат 1;
		КонецЕсли;
		Возврат 0;
	КонецЕсли;
КонецФункции
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ЗаписатьИзменениеМОД(ИДД,Тип,Вид,ДатаН,Режим,ТипФайла,Позже=0) Экспорт
	Перем БД;
	
	Если Константа.РегистрацияИзменений=0 Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Ожидание открытия файлов МОД 1");
	
	//Теперь пишем в справочники
	ОткрытьФайлМОД(БД,ТипФайла,,Позже); 
	Состояние("Ожидание открытия файлов МОД 2");
	Если Найти("Изменения"+"Удаления",ТипФайла)>0 Тогда
		БД.Новый();
		БД.Код=ИДД;
		БД.TIP=Тип;
		БД.Наименование=Вид;
		БД.User=1;
		Если ТипФайла="Изменения" Тогда
			БД.DATE=ДатаН;
		КонецЕсли;
		Состояние("Ожидание открытия файлов МОД 3");
		
		Если глЕстьЛицензияБлокировок=1 Тогда
			ГибкиеБлокировки.УстановитьВремяОжиданияБлокировки(50000);//50 секунд
			БД.Записать();
			ГибкиеБлокировки.УстановитьВремяОжиданияБлокировки(-1);
		Иначе
			БД.Записать();
		КонецЕсли;
		Состояние("Ожидание открытия файлов МОД 4");
	Иначе
		БД.Добавить();
		БД.IDD=ИДД;
		БД.TIP=Тип;
		БД.VIDD=Вид;
		БД.Записать();
		Если Режим=1 Тогда //режим по умолчанию - следовательно, скорее всего, это интерактивная работа пользователя поэтому закрываем файл dbf
			БД.ЗакрытьФайл();
		КонецЕсли;
	КонецЕсли;
	//Теперь пишем в справочники	
	
	//******************************************************************
	//Алгортим Успеха Начало
	//
	
	//Если ТипФайла="Изменения" Тогда
	//	Если глНайтиТаблицуВБазе("tran1")=0 Тогда
	//		глСоздатьТаблицуИзменений();
	//	КонецЕсли;
	//    БД="tran1";
	//ИначеЕсли ТипФайла="Пакеты" Тогда
	//	Если глНайтиТаблицуВБазе("tran2")=0 Тогда
	//		глСоздатьТаблицуПакетов();
	//	КонецЕсли;
	//    БД="tran2";
	//ИначеЕсли ТипФайла="Удаления" Тогда
	//	Если глНайтиТаблицуВБазе("tran3")=0 Тогда
	//		глСоздатьТаблицуУдалений();
	//	КонецЕсли;
	//    БД="tran3";
	//КонецЕсли;	
	//
	//Состояние("...");
	//СписИзм=СоздатьОбъект("СписокЗначений");
	//
	//СписИзм.ДобавитьЗначение(Лев(ИДД,МОДДлинаID),"IDD"); 
	//СписИзм.ДобавитьЗначение(Тип,"TIP");
	//СписИзм.ДобавитьЗначение(Вид,"VIDD");
	//Если ТипФайла="Изменения" Тогда
	//	СписИзм.ДобавитьЗначение(ДатаН,"_DATE");
	//КонецЕсли;
	//
	//Если ПустоеЗначение(БД)=0 Тогда
	//	Попытка
	//		Рез = глЗаписатьСтрокувТаблицуСКЛ(БД,СписИзм);
	//	Исключение
	//		Сообщить("Error: "+ОписаниеОшибки()+"
	//		|в "+Тип+"."+Вид+" IDD="+ИДД,"!!!");
	//	КонецПопытки;	
	//КонецЕсли;
	////Конец АУ
	Состояние("Ожидание открытия файлов МОД 5");	
КонецПроцедуры



//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриИзмененииОбъекта(Конт2,Объект2,ДатаН,Режим=1,Позже=0) Экспорт //если Режим = 1 то файл БД закрывается
	Если НеРегистрироватьИзмененияМОД=1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗначения(глМОДКонтекстМодуля)=100 Тогда //т.е. открыт контекст модуля проведения документа, 
		Возврат;				//который не надо регистрировать т.к. происходит 
	КонецЕсли;					//системное перепроведение и стоит константа, указывающая 
	//не регистрировать такие изменения
	
	
	//если это операция, то надо добраться до документа т.к. IDD есть только унего
	Если ТипЗначенияСтр(Объект2) = "Операция" Тогда
		Конт=Конт2.Документ;
		Объект=Объект2.Документ;
	ИначеЕсли ТипЗначенияСтр(Конт2)="Периодический" Тогда
		Конт=Конт2.ТекущийОбъект();
		Объект=Объект2.ТекущийОбъект();
		ДатаН=Конт2.ДатаЗнач;
		Если ТипЗначения(Конт)<>11 Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Конт=Конт2;//все ОК
		Объект=Объект2;
	КонецЕсли;
	
	
	Тип=ТипЗначения(Объект);
	Если Тип=11 Тогда
		Ст=Конт.Вид();
		Если (ст="ПравилаЗагрузки") или (ст="ПравилаВыгрузки") или (ст="ПериферийныеБазы")
		или (ст="ИзмененияМОД") или (ст="УдаленияМОД") или (ст="Пакеты") или (ст="ЖурналРегистрации") Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли Тип=15 Тогда //счет 
		ЗаписатьИзменениеМОД(Объект.Код,94,ЗначениеВСтроку(Объект),РабочаяДата(),1,"Изменения");
		Возврат;
	ИначеЕсли Тип=2 Тогда //строка - на самом деле это константа
		ЗаписатьИзменениеМОД(Объект,95,Объект,ДатаН,1,"Изменения");
		Возврат;                                                    
	ИначеЕсли Тип=12 Тогда   //Документ  
		
		Док=СоздатьОбъект("Документ");
		НеУникальныйИДД=0;
		Если Док.ВыбратьПоЗначению(,,"IDD",Конт.IDD)=1 Тогда
			Пока Док.ПолучитьДокумент()=1 Цикл
				Если Док.ТекущийДокумент()<>Конт.ТекущийДокумент() Тогда
					НеУникальныйИДД=1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;     
		
		Если НеУникальныйИДД=1 Тогда         
			СтарIDD=Конт.IDD;
			Конт.IDD=ПолучитьУникальныйIDD();
			ЗаписьЖурналаРегистрации("Обнаружен документ c одинаковым IDD "+Док+". Текущий IDD Изменен "+СокрЛП(СтарIDD)+" на "+Конт.IDD+"!","Ошибки менеджера обмена",,Конт.ТекущийДокумент(),5);
		КонецЕсли;
		
	КонецЕсли;

	Попытка
		Если (Объект.Выбран()=0) Тогда
			Конт.Идентификатор = глАПСоздатьИдентификатор();	
		КонецЕсли;
		Идентификатор = Конт.Идентификатор;	
		Если ПустоеЗначение(Идентификатор)=1 Тогда
			Конт.Идентификатор = глАПСоздатьИдентификатор();	
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	
	IDD1= СокрЛП(Конт.IDD);
	Если (IDD1="") или (Объект.Выбран()=0) Тогда
		//здесь надо увеличить счетчик в константе на единицу
		//при этом предусматриваем одновременное обращение к константе несколькоми пользователями
		//Блокировка=1;
		//Пока Блокировка=1 Цикл
		//	Попытка
		//		НачатьТранзакцию();
		//		Константа.УникальныйIDD=Константа.УникальныйIDD;//блокируем
		//		Блокировка=0;//константа заблокирована не была - можем работать
		//	Исключение
		//		ОтменитьТранзакцию();
		//		Блокировка=1;//константа заблокирована !!
		//	КонецПопытки;
		//КонецЦикла;
		Конт.IDD=ПолучитьУникальныйIDD();
		//		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Если Тип=12 Тогда 
		Если ПустоеЗначение(Константа.ДатаРегистрацииИзменений)=0 Тогда
			Если (Конт.ДатаДок<Константа.ДатаРегистрацииИзменений) И (Конт.ДатаДок>Дата(1980,12,31)) Тогда                                            
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьИзменениеМОД(Конт.IDD,Тип,Конт.Вид(),ДатаН,Режим,"Изменения",Позже);
	
	
	Если Режим=1 Тогда //режим по умолчанию - следовательно, скорее всего, это интерактивная работа пользователя
		ГлобальныйID=Конт.IDD;
		ГлобальныйVID=Конт.Вид();
		ГлобальныйTIP=ТипЗначенияСтр(Объект);
		Попытка ГлобальныйКонтекстOnline.Объект=Объект;
			ГлобальныйКонтекстOnline.Форма.Обновить();
		Исключение
		КонецПопытки
	КонецЕсли;
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриСнятииПометкиУдаленияОбъекта(Конт) Экспорт
	ПриИзмененииОбъекта(Конт,Конт,РабочаяДата());
	
	
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбъектСнятьПометкуУдаления(Конт) Экспорт
	ПриСнятииПометкиУдаленияОбъекта(Конт);
	ПриИзмененииОбъекта(Конт,Конт,РабочаяДата());
	Конт.СнятьПометкуУдаления();
	
	
	
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ИнициализацияМОД()
	// Начальная инициализация переменных МОД
	// (с) ПиБи 2000 тел. 978-83-00,978-92-71 e-mail:lider@pb.ru Inet: www.pb.ru
	ВерсияПротоколаМОД="1.04";
	НеРегистрироватьИзмененияМОД=0;
	ПроведениеПоАлгоритмуМОД=0;
	МОДДлинаID=17;
	Попытка
		МОДДлинаIDДокумента=Метаданные.ОбщийРеквизитДокумента("IDD").Длина;
	Исключение
		МОДДлинаIDДокумента=17;
	КонецПопытки;
	
	РазрешитьРепликациюМОД=1;
	глВыгружатьШапкуПакетовОтдельно=0;
	
	
	
	
	
	//учитываем штатный механизм копирования периферийных баз
	ИмяФайлаМаркера=КаталогИБ()+"tran5.dbf";
	Если ФС.СуществуетФайл(ИмяФайлаМаркера)=1 Тогда
		Т=СоздатьОбъект("Текст");
		Т.Открыть(ИмяФайлаМаркера);
		Если Т.КоличествоСтрок()>1 Тогда
			Если Сокрлп(Т.ПолучитьСтроку(1))="ID" Тогда
				Константа.IDD=Т.ПолучитьСтроку(2);
				Предупреждение("Первичная загрузка периферийной базы - ID базы установлен на "+Т.ПолучитьСтроку(2),10);
				Т=0;
				ФС.УдалитьФайл(ИмяФайлаМаркера);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;   
	
	
	////первый заход после инсталляции Менеджера
	//Если Сокрлп(Константа.IDD)="" Тогда
	//Константа.РегистрацияИзменений=1;
	//Сообщить("Введите код периферийной базы и выполните инициализацию (закладка Инициализация)","I");
	//ОткрытьФормуМодально("Обработка.ОбменДанными#");
	//КонецЕсли;
	
	ОбработкаОбменДанными="Обработка.ОбменДанными#";
	//ОбработкаОбменДанными="Отчет.ОбменДаннымиXML#";
	// Конец блока "Начальная инициализация переменных МОД"
	//**************************************************************************
	//**************************************************************************
	
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриУдаленииОбъекта(Конт2,Режим=1,Интерактивно=1) Экспорт
	Если ТипЗначенияСтр(Конт2)="Периодический" Тогда
		Конт=Конт2.ТекущийОбъект();
		Если ТипЗначения(Конт)=11 Тогда
			ЗаписатьИзменениеМОД(Конт.IDD,ТипЗначения(Конт),Конт.Вид(),Конт2.ДатаЗнач,Интерактивно,"Изменения");
		КонецЕсли;
	Иначе   
		Конт=Конт2;//все нормально ... 
		Если ТипЗначения(Конт)=12 Тогда 
			Если ПустоеЗначение(Константа.ДатаРегистрацииИзменений)=0 Тогда
				Если Конт.ДатаДок<Константа.ДатаРегистрацииИзменений Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
		ЗаписатьИзменениеМОД(Конт.IDD,ТипЗначения(Конт),Конт.Вид(),"",Интерактивно,"Удаления");
	КонецЕсли;
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбъектУдалить(Конт,Режим="") Экспорт
	Попытка
		ПриУдаленииОбъекта(Конт);
		ПриИзмененииОбъекта(Конт,Конт,РабочаяДата());
	Исключение
	КонецПопытки;
	Если Сокрлп(Режим)="" Тогда
		Попытка
			Конт.Удалить();
		Исключение 
			Конт.Записать();
			Конт.Удалить();
		КонецПопытки;
	Иначе 
		Попытка
			Конт.Удалить(Режим);
		Исключение 
			Конт.Записать();
			Конт.Удалить(Режим);
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбъектЗаписать(Конт,Параметр="",Режим=1,Позже=0) Экспорт
	ТипСтр=ТипЗначенияСтр(Конт);
	Если (ТипСтр="ГрупповойКонтекст") Тогда
		Попытка
			ИДД=Конт.IDD;//есть IDD - значит это документ или справочник
		Исключение
			Возврат;	
		КонецПопытки;
		Попытка
			//что если это справочник
			ПриИзмененииОбъекта(Конт,Конт.ТекущийЭлемент(),РабочаяДата());
		Исключение
			//неудача - значит документ
			ПриИзмененииОбъекта(Конт,Конт.ТекущийДокумент(),РабочаяДата());
		КонецПопытки;
		Конт.Записать();
	ИначеЕсли (ТипСтр="Операция") ИЛИ 
	(ТипСтр="Документ") ИЛИ 
	(ТипСтр="Справочник") Тогда
		Если Сокрлп(Параметр)="" Тогда
			Параметр=РабочаяДата();
		КонецЕсли;
		ПриИзмененииОбъекта(Конт,Конт,Параметр,Режим,Позже);
		Попытка 
			Конт.Записать();
		Исключение   
			Сообщить("Ошибка записи объекта: "+Конт.Вид());
			ВызватьИсключение;
		КонецПопытки;
	Иначе
		//это какой-то другой объект (например dbf, text и ...)
		Если Сокрлп(Параметр)="" Тогда
			Конт.Записать();//вызывается без параметра, н-р:  База.Записать()
		Иначе
			Конт.Записать(Параметр); //вызывается с параметром , н-р:  Т.Записать(ИмяФайла)
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
Функция глСуществуетФайлНастройки() Экспорт Далее

Процедура ПроставлениеКодаТовара(Конт) Далее
Функция ЦенаТовараПоКатегории(Конт,Категория,ЦенаРозница = 0,ДатаЦены="") Экспорт Далее
Функция ПринадлежностьТовараАгенту(Конт, Товар) Экспорт Далее
Функция ЗаполнениеАгентовПоТовару(Контра,Товар) Экспорт Далее
Функция ЦенаСоСкидкой(Конт, Цена, Режим = 0, БезАкций = 0, КатЦен = "") Экспорт Далее
//Алгоритм~Успеха~конец~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


//***********************************************************
//<<Алгоритм Успеха>> (begin)
// до ж..ы надо
//******************************************************************************
Функция глЕстьРеквизитШапки(ИмяРеквизита, ВидДокумента) Экспорт
	Перем Реквизит;
	Если (ПустоеЗначение(ВидДокумента) = 1) ИЛИ
	(ПустоеЗначение(ИмяРеквизита) = 1) Тогда
		Возврат 0;
	КонецЕсли;
	Реквизит=Метаданные.Документ(ВидДокумента).РеквизитШапки(ИмяРеквизита);
	Возврат ?(Реквизит.Выбран()=1, 1, 0 );
КонецФункции

//******************************************************************************
Функция глЕстьРеквизитМнЧ(ИмяРеквизита,ВидДокумента) Экспорт
	Перем Реквизит;    //
	Если (ПустоеЗначение(ВидДокумента) = 1) ИЛИ
	(ПустоеЗначение(ИмяРеквизита) = 1) Тогда
		Возврат 0;
	КонецЕсли;
	Реквизит=Метаданные.Документ(ВидДокумента).РеквизитТабличнойЧасти(ИмяРеквизита);
	Возврат ?(Реквизит.Выбран()=1, 1, 0 );
КонецФункции

//******************************************************************************
Функция глПолучитьВалютуКредита(Контрагент,Роль) Экспорт
	Перем Валюта;
	Если Роль = Перечисление.ВидыКлиентов.Поставщик Тогда
		Валюта = Контрагент.ВалютаКредитаПоставщика;
	Иначе
		Валюта = Контрагент.ВалютаКредита;
	КонецЕсли;
	Если Валюта.Выбран()=0 Тогда
		Валюта =	Контрагент.ВалютаВзаиморасчетов;
	КонецЕсли;
	Если Валюта.Выбран()=0 Тогда
		Валюта=Константа.ВалютаВзаиморасчетов;
	КонецЕсли;
	Возврат Валюта;
КонецФункции  
//******************************************************************************
Функция ВключитьОтладку() Экспорт
	глФлОтладки=1;
	Возврат 1;
КонецФункции //ВключитьОтладку     
//******************************************************************************
Функция ВыключитьОтладку() Экспорт
	глФлОтладки=0;
	Возврат 1;
КонецФункции //ВключитьОтладку 
//******************************************************************************
Функция СообщОтладка(Текст,Знак="") Экспорт
	Если глФлОтладки=1 Тогда
		Сообщить(Текст,Знак);
	КонецЕсли;
КонецФункции //СообщОтладка(Текст,Знак)
//******************************************************************************
Функция СообщитьРеквизитыШ(Конт) Экспорт
	Текст=Конт.Вид()+" №"+Конт.НомерДок+" от "+Конт.ДатаДок+"
	|";
	Если глЕстьРеквизитШапки("СебестоимостьШ",Конт.Вид())=1 Тогда
		Текст=Текст+"СебестоимостьШ: "+Конт.СебестоимостьШ+"
		|";
	КонецЕсли;
	Если глЕстьРеквизитШапки("ВсегоСуммаШ",Конт.Вид())=1 Тогда
		Текст=Текст+"ВсегоСуммаШ: "+Конт.ВсегоСуммаШ+"
		|";
	КонецЕсли;
	Если глЕстьРеквизитШапки("ВсегоНДСШ",Конт.Вид())=1 Тогда
		Текст=Текст+"ВсегоНДСШ: "+Конт.ВсегоНДСШ+"
		|";
	КонецЕсли;
	Если глЕстьРеквизитШапки("ВсегоНДСУслугШ",Конт.Вид())=1 Тогда
		Текст=Текст+"ВсегоНДСУслугШ: "+Конт.ВсегоНДСУслугШ+"
		|";
	КонецЕсли;
	Если глЕстьРеквизитШапки("ВсегоСуммаУслугШ",Конт.Вид())=1 Тогда
		Текст=Текст+"ВсегоСуммаУслугШ: "+Конт.ВсегоСуммаУслугШ+"
		|";
	КонецЕсли;          
	Возврат Текст;
КонецФункции //СообщитьРеквизитыШ(Конт)
//******************************************************************************
Функция РублСтоимостьТовараПоПартиям(Конт,Товар,РежимНДС="БезНДС",Абс=0,Кол=0,Призн="") Экспорт Далее
//******************************************************************************
Функция ПолучитьСтоимостьТоваровПоПартиям(Конт,ПоСкладам=0,РежимНДС="БезНДС",Абс=0,Кол=0,Призн="") Экспорт Далее

Функция ПроцентНДС(Ставка) Экспорт Далее
//******************************************************************************
Функция глЗаполнитьРеквизитыДокументаШ(Конт,ПоСкладам=0,флСообщ=1,Призн="") Экспорт
	Перем СебестоимостьШ, ВсегоСуммаШ, ВсегоНДСШ, ВсегоНДСУслугШ, ВсегоСуммаУслугШ;
	
	ТС=СоздатьОбъект("ТаблицаЗначений");
	ТС=ПолучитьСтоимостьТоваровПоПартиям(Конт,ПоСкладам,,1);
	
	Если глЕстьРеквизитМнЧ("Товар",Конт.Вид())=0 Тогда
		Возврат 0;
	КонецЕсли;    
	
	тСебСклады = СоздатьОбъект("ТаблицаЗначений");

	СебестоимостьШ=0;
	ВсегоСуммаШ=0;
	ВсегоНДСШ=0;
	ВсегоНДСУслугШ=0;
	ВсегоСуммаУслугШ=0;
	
	Конт.ВыбратьСтроки();
	Пока Конт.ПолучитьСтроку()=1 Цикл
		Тов=Конт.Товар;
		СуммаНДСУсл=0;
		СуммаУсл=0;
		СуммаНДС=0;
		Сумма=0;
		Если Тов.ВидТовара=Перечисление.ВидыТоваров.Услуга Тогда
			Если глЕстьРеквизитМнЧ("НДС",Конт.Вид())=1 Тогда
				СуммаНДСУсл = Конт.НДС;
			ИначеЕсли глЕстьРеквизитМнЧ("СуммаНДС",Конт.Вид())=1 Тогда
				СуммаНДСУсл = Конт.СуммаНДС;
			ИначеЕсли глЕстьРеквизитШапки("СтавкаНДС",Конт.Вид())=1 Тогда
				Попытка СуммаНДСУсл = Конт.Сумма * ПроцентНДС(Конт.ставкаНДС)/100; 
				Исключение 
				КонецПопытки;
			Иначе
				// не знаю что и делать... не посчитать	
			КонецЕсли;       
			Если глЕстьРеквизитМнЧ("Сумма",Конт.Вид())=1 Тогда
				СуммаУсл = Конт.Сумма;
			ИначеЕсли глЕстьРеквизитМнЧ("СуммаСНДС",Конт.Вид)=1 Тогда
				СуммаУсл = Конт.СуммаСНДС - СуммаНДСУсл;
			ИначеЕсли глЕстьРеквизитМнЧ("Всего",Конт.Вид)=1 Тогда
				СуммаУсл = Конт.Всего - СуммаНДСУсл;
			КонецЕсли;  
		Иначе
			Если глЕстьРеквизитМнЧ("НДС",Конт.Вид())=1 Тогда
				СуммаНДС = Конт.НДС;
			ИначеЕсли глЕстьРеквизитМнЧ("СуммаНДС",Конт.Вид())=1 Тогда
				СуммаНДС = Конт.СуммаНДС;
			ИначеЕсли глЕстьРеквизитШапки("СтавкаНДС",Конт.Вид())=1 Тогда
				Попытка СуммаНДС = Конт.Сумма * ПроцентНДС(Конт.ставкаНДС)/100; 
				Исключение 
				КонецПопытки;
			КонецЕсли;
			Если глЕстьРеквизитМнЧ("Сумма",Конт.Вид())=1 Тогда
				Сумма = Конт.Сумма;
			ИначеЕсли глЕстьРеквизитМнЧ("СуммаСНДС",Конт.Вид())=1 Тогда
				Сумма = Конт.СуммаСНДС - СуммаНДС;
			ИначеЕсли глЕстьРеквизитМнЧ("Всего",Конт.Вид())=1 Тогда
				Сумма = Конт.Всего - СуммаНДС;
			КонецЕсли;                                                                             
			Если глЕстьРеквизитМнЧ("Количество", Конт.Вид())=1 Тогда
				КолВо = Конт.Количество;
			ИначеЕсли глЕстьРеквизитМнЧ("КоличествоРазницы", Конт.Вид())=1 Тогда
				КолВо = Конт.КоличествоРазницы;
			ИначеЕсли глЕстьРеквизитШапки("Количество", Конт.Вид())=1 Тогда
				КолВо = Конт.Количество;
			Иначе
				КолВо = 1;
			КонецЕсли;    
			Если глЕстьРеквизитМнЧ("Коэффициент", Конт.Вид())=1 Тогда
				Колво = Колво * Конт.Коэффициент;
			КонецЕсли;      
			
			рез=0;
			ТС.НайтиЗначение(Тов,рез,"Товар");
			Стоим=0;
			Если рез>0 Тогда
				ТС.ПолучитьСтрокуПоНомеру(рез);
				Стоим = ТС.Стоимость;
			КонецЕсли;
			
			Если Конт.ДатаДок <'01.04.2012' Тогда
				СебестоимостьШ=СебестоимостьШ+Стоим*Колво;
			КонецЕсли;
		КонецЕсли;  
		
		ВсегоНДСУслугШ = ВсегоНДСУслугШ + СуммаНДСУсл;
		ВсегоСуммаУслугШ = ВсегоСуммаУслугШ + СуммаУсл;
		ВсегоСуммаШ = ВсегоСуммаШ + Сумма + СуммаУсл;
		ВсегоНДСШ = ВсегоНДСШ + СуммаНДС + СуммаНДСУсл; 
	КонецЦикла;  
	
	Если Конт.ДатаДок >= '01.04.2012' Тогда
		СебестоимостьШ=ТС.Итог("СтоимостьСумма");
		Если ПоСкладам=0 Тогда
		ИначеЕсли ПоСкладам=1 Тогда
			//заполняем документ по складам
			Если ПустоеЗначение(Конт.СкладыДок)=0 Тогда
				ДокСклады=СоздатьОбъект("Документ.Служ_Склады");
				ДокСклады.НайтиДокумент(Конт.СкладыДок);
				ДокСклады.УдалитьСтроки();
				ТС.Свернуть("Склад","СтоимостьСумма");
				ТС.ВыбратьСтроки();
				Пока ТС.ПолучитьСтроку() = 1 Цикл
					ДокСклады.НоваяСтрока();
					ДокСклады.Склад = ТС.Склад;
					ДокСклады.СебестоимостьШ = ТС.СтоимостьСумма;
					Если ТС.КоличествоСтрок()=ТС.НомерСтроки Тогда
						ДокСклады.СебестоимостьШ = ДокСклады.СебестоимостьШ + (СебестоимостьШ-ДокСклады.Итог("СебестоимостьШ"));
					КонецЕсли;
				КонецЦикла;;
				ОбъектЗаписать(ДокСклады);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Конт.Вид()="МарочныйОтчет" Тогда
		//		ВсегоСуммаШ=ВсегоСуммаШ;
		//		ВсегоНДСШ=ВсегоНДСШ;
		ВсегоСуммаУслугШ=0;
		ВсегоНДСУслугШ=0;
	Иначе
		ВсегоСуммаШ=ВсегоСуммаШ+ВсегоНДСШ;
		ВсегоСуммаУслугШ=ВсегоСуммаУслугШ +ВсегоНДСУслугШ;
	КонецЕсли;
	
	//Далее все просто
	
	Если глЕстьРеквизитШапки("СебестоимостьШ",Конт.Вид())=1 Тогда
		Конт.СебестоимостьШ=СебестоимостьШ;
	КонецЕсли;
	Если глЕстьРеквизитШапки("ВсегоСуммаШ",Конт.Вид())=1 Тогда
		Конт.ВсегоСуммаШ=ВсегоСуммаШ;
	КонецЕсли;
	Если глЕстьРеквизитШапки("ВсегоНДСШ",Конт.Вид())=1 Тогда
		Конт.ВсегоНДСШ=ВсегоНДСШ;
	КонецЕсли;
	Если глЕстьРеквизитШапки("ВсегоНДСУслугШ",Конт.Вид())=1 Тогда
		Конт.ВсегоНДСУслугШ=ВсегоНДСУслугШ;
	КонецЕсли;
	Если глЕстьРеквизитШапки("ВсегоСуммаУслугШ",Конт.Вид())=1 Тогда
		Конт.ВсегоСуммаУслугШ=ВсегоСуммаУслугШ;
	КонецЕсли; 
	Если флСообщ=1 Тогда
		СообщОтладка(СообщитьРеквизитыШ(Конт),"I");	    
	КонецЕсли;
	Возврат 1;
КонецФункции //ЗаполнитьРеквизитыДокументаШ(Конт)

//<<Алгоритм Успеха>> (end)
//************************************************************
//----------------------
Процедура ПриВводеСтрокиДокумента(Конт) Экспорт
	Если (Конт.Форма.АктивныйЭлемент()="ТовКод") Или (КОнт.форма.АктивныйЭлемент()="НомерСтроки") Тогда
		Возврат;
	КонецЕсли;
	Предупреждение ("Используйте кнопки подбора!",2);
	СтатусВозврата(0);
КонецПроцедуры
//----------------------
Процедура ПроверитьПериод(Конт) Экспорт
	Если Конт.ДатаКонца>ПолучитьДатуТА() Тогда
		Предупреждение ("Дата конца отчета не может быть больше ТА итогов!!!");
		Конт.ДатаКонца=ПолучитьДатуТА();
		Возврат;
	КонецЕсли;
	Если Конт.ДатаНачала>Конт.ДатаКонца Тогда
		Предупреждение ("Дата начала отчета не может быть позже даты конца!!!");
		Конт.ДатаНачала=Конт.ДатаКонца;
		Возврат;
	КонецЕсли;
КонецПроцедуры
//------------
Функция ВыбратьЗначение(Знач ОбрабатываемаяСтрока, ПозицияВСтроке, Разделитель ) Экспорт // Функция извлекает из строки с разделителями значение в указанной позиции
	Поз =1;
	Пока Поз <= Число(ПозицияВСтроке) Цикл
		Инд = Найти(ОбрабатываемаяСтрока, Разделитель);
		Если Инд = 0 Тогда Возврат СокрЛП(ОбрабатываемаяСтрока);
		ИначеЕсли Инд = 1 Тогда
			ПодСтр = "";
			Перейти ~Дальше;
		КонецЕсли;
		ПодСтр = СокрЛП(Лев(ОбрабатываемаяСтрока,Инд-1));
		~Дальше:ОбрабатываемаяСтрока = Прав(ОбрабатываемаяСтрока, СтрДлина(ОбрабатываемаяСтрока)-Инд);
		Поз = Поз + 1;
	КонецЦикла;
	Возврат ПодСтр;
КонецФункции

//=====общепит
// производит поиск проведенной
// калькуляционной карты для указанного товара, первой перед указанной датой
Функция ПолучитьКалькуляцию(ДатаКонцаВыб,КонтТовар,Док=0)  Экспорт
	
	ФлагВыбора=0;
	КалькКарт=СоздатьОбъект("Документ");
	КалькКарт.ОбратныйПорядок(1);
	КалькКарт.ВыбратьПоЗначению(,?(ПустоеЗначение(Док)=1,ДатаКонцаВыб,Док),"ТоварШапки",КонтТовар);
	Пока КалькКарт.ПолучитьДокумент()=1 Цикл
		Если КалькКарт.Вид()="КалькуляционнаяКарта" Тогда
			Если  КалькКарт.Проведен()=1 Тогда
				ФлагВыбора=1;
				ДокумКальк=КалькКарт;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ФлагВыбора=0 Тогда
		//проверить еще раз на будущие даты
		КалькКарт.ВыбратьПоЗначению(ДатаКонцаВыб,,"ТоварШапки",КонтТовар);
		Пока КалькКарт.ПолучитьДокумент()=1 Цикл
			Если КалькКарт.Вид()="КалькуляционнаяКарта" Тогда
				Если  КалькКарт.Проведен()=1 Тогда
					ФлагВыбора=1;
					ДокумКальк=КалькКарт;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	Если ФлагВыбора=1 Тогда
		Возврат ДокумКальк;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

//=====общепит
//  Вычисляет сезонный коэффициент списания для указанного ингредиента
//  для указанной даты

Функция УстановитьСезонныйКоэффициент(Ингр,ДатаКальк) Экспорт
	
	Месяц1=ДатаМесяц(Константа.ДатаНачалаСезона1);
	День1=ДатаЧисло(Константа.ДатаНачалаСезона1);
	Месяц2=ДатаМесяц(Константа.ДатаНачалаСезона2);
	День2=ДатаЧисло(Константа.ДатаНачалаСезона2);
	Месяц3=ДатаМесяц(Константа.ДатаНачалаСезона3);
	День3=ДатаЧисло(Константа.ДатаНачалаСезона3);
	Месяц4=ДатаМесяц(Константа.ДатаНачалаСезона4);
	День4=ДатаЧисло(Константа.ДатаНачалаСезона4);
	
	МесяцКТ=ДатаМесяц(ДатаКальк);
	ДеньКТ=ДатаЧисло(ДатаКальк);
	ГодКТ=ДатаГод(ДатаКальк);
	ДатаСез1=Дата(ГодКТ,Месяц1,День1);
	ДатаСез2=Дата(ГодКТ,Месяц2,День2);
	ДатаСез3=Дата(ГодКТ,Месяц3,День3);
	ДатаСез4=Дата(ГодКТ,Месяц4,День4);
	ДатаНачалаГода=НачГода(ДатаКальк);
	ДатаКонцаГода=КонГода(ДатаКальк);
	
	Если (ДатаКальк>=ДатаСез1) и (ДатаКальк<ДатаСез2) Тогда
		КоэфСпис=Ингр.КоэфСписания1;
	ИначеЕсли (ДатаКальк>=ДатаСез2) и (ДатаКальк<ДатаСез3) Тогда
		КоэфСпис=Ингр.КоэфСписания2;
	ИначеЕсли (ДатаКальк>=ДатаСез3) и (ДатаКальк<ДатаСез4) Тогда
		КоэфСпис=Ингр.КоэфСписания3;
	ИначеЕсли (ДатаКальк>=ДатаСез4) и (ДатаКальк<=ДатаКонцаГода) Тогда
		КоэфСпис=Ингр.КоэфСписания4;
	ИначеЕсли (ДатаКальк>=ДатаНачалаГода) и (ДатаКальк<ДатаСез1) Тогда
		КоэфСпис=Ингр.КоэфСписания4;
	КонецЕсли;
	Возврат КоэфСпис;
КонецФункции

//_____________________________________________________________________________
Функция глПроверкаУсловия(Знач Конт,Знач Условие) Экспорт
	// данная функция получает некую строку-условие вида "Количество<>0" и 
	// ссылку на документ/справочник (контекст) или переменная-значение.
	// Если указанное условие выполняется функция возвращает число 1, иначе число 0.
	
	// В переменную Конт может передаваться не только контекст, но и собственно проверяемое 
	// значение (переменная), например, глПроверкаУсловия(ЗначВвода,"ЗначВвода>2")
	
	// Типы возможный условий:
	// Равно	"="		Например "Курс=1"
	// Меньше	"<"		Например "Курс<1"
	// Больше	">"		Например "Курс>1"
	// БольшеИлиРавно	">="		Например "Курс>=1"
	// МеньшеИлиРавно	"<="		Например "Курс<=1"
	// Не равно	"<>"	Например "Курс<>1"
	// Не пусто	"#"		Например "Курс#"
	// Пусто	"!#"	Например "Курс!#"
	// Прим.: следует учитывать передачу синонимов, например: "Курс|Курс валюты>1"
	
	Перем ИмяРеквизита, ТипУсловия, КонтрольноеЗначение;
	Перем Равно, Меньше, Больше, БольшеИлиРавно, МеньшеИлиРавно, НеРавно, НеПусто, Пусто;
	
	// Устанавливаем начальные значения
	ИмяРеквизита = "";
	ТипУсловия = "";
	КонтрольноеЗначение = "";

	Равно = "=";
	Меньше = "<";
	Больше = ">";
	БольшеИлиРавно = ">=";
	МеньшеИлиРавно = "<=";
	НеРавно = "<>";
	НеПусто = "#";
	Пусто = "!#";
	
	// переданное разбираем условие и выделяем имя контролируемого реквизита
	Условие = СокрЛП(Условие);
	Если Найти(Условие,"!#")<>0 Тогда		// пусто
		Позиция = Найти(Условие,"!#");
	ИначеЕсли Найти(Условие,"#")<>0 Тогда		// не пусто
		Позиция = Найти(Условие,"#");
	ИначеЕсли Найти(Условие,"<>")<>0 Тогда		// не равно
		Позиция = Найти(Условие,"<>");
	ИначеЕсли Найти(Условие,"<")<>0 Тогда		// меньше
		Позиция = Найти(Условие,"<");
	ИначеЕсли Найти(Условие,">")<>0 Тогда		// больше
		Позиция = Найти(Условие,">");
	ИначеЕсли Найти(Условие,"=")<>0 Тогда			// равно
		Позиция = Найти(Условие,"=");
	Иначе
		Сообщить("Некорректный синтаксис при проверке корректности заполнения реквизитов документа/справочника - не указано условие");
		Возврат 0;
	КонецЕсли;

	// получаем имя реквизита
	ИмяРеквизита = СокрЛП(Лев(Условие,Позиция-1));
	ХвостУсловия = СокрЛ(Сред(Условие,Позиция));
	// отделяем синоним
	Позиция = Найти(Условие,"|");
	Если Позиция<>0 Тогда
		ИмяРеквизита = СокрЛП(Лев(Условие,Позиция-1));
	КонецЕсли;

	// проверим, что осталось
	Если СтрДлина(ИмяРеквизита)=0 Тогда
		Сообщить("Некорректный синтаксис при проверке корректности заполнения реквизитов документа/справочника - не указан реквизит");
		Возврат 0;
	КонецЕсли;
	
	// сразу же проверим, если условие - "пустое/непустое значение"
	Попытка
		Если ТипЗначения(Конт)<10 Тогда // число, дата
			ЗначениеРеквизита = Конт;
		Иначе
			ЗначениеРеквизита = Конт.ПолучитьАтрибут(ИмяРеквизита);
			Если ТипЗначенияСтр( ЗначениеРеквизита) = "Счет" Тогда
				ЗначениеРеквизита = ЗначениеРеквизита.ТекущийСчет();
			КонецЕсли;
		КонецЕсли;
	Исключение
		Возврат 0;
	КонецПопытки;

	Если Найти(Условие,"!#")<>0 Тогда
		Возврат ПустоеЗначение(ЗначениеРеквизита);
	ИначеЕсли Найти(Условие,"#")<>0 Тогда
		Возврат 1-ПустоеЗначение(ЗначениеРеквизита);
	КонецЕсли;
    
	// Далее - для условий "больше", "меньше", "равно", "не равно"
	
	// теперь разбираем хвост начального условие и выделяем 
	// тип условия и контрольное значение
	Для Сч = 1 По СтрДлина(ХвостУсловия) Цикл
		ТекущийСимвол = Сред(ХвостУсловия,Сч,1);
		Если Найти("=<>",ТекущийСимвол)<>0 Тогда
		    ТипУсловия = ТипУсловия + ТекущийСимвол;
		Иначе
			КонтрольноеЗначение = СокрЛП(Сред(ХвостУсловия,Сч));
			Если Лев(КонтрольноеЗначение,1) = "'" Тогда // это дата
				КонтрольноеЗначение = Дата(КонтрольноеЗначение);
			Иначе // число
				КонтрольноеЗначение = Число(КонтрольноеЗначение);
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// проверим выполнение условия
	Если (ТипУсловия=Равно) и (ЗначениеРеквизита=КонтрольноеЗначение) Тогда
		Возврат 1;
	ИначеЕсли (ТипУсловия=БольшеИлиРавно) и (ЗначениеРеквизита>=КонтрольноеЗначение) Тогда
		Возврат 1;
	ИначеЕсли (ТипУсловия=МеньшеИлиРавно) и (ЗначениеРеквизита<=КонтрольноеЗначение) Тогда
		Возврат 1;
	ИначеЕсли (ТипУсловия=Больше) и (ЗначениеРеквизита>КонтрольноеЗначение) Тогда
		Возврат 1;
	ИначеЕсли (ТипУсловия=Меньше) и (ЗначениеРеквизита<КонтрольноеЗначение) Тогда
		Возврат 1;
	ИначеЕсли (ТипУсловия=НеРавно) и (ЗначениеРеквизита<>КонтрольноеЗначение) Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции //глПроверкаУсловия

//*******************************
Функция глВвестиЗначениеВТаблицу(Таб,НомСтр=0,НомКол=0,ТипЗнач="",Подсказка="Введите значение",Условие="",Текст="") Экспорт
	//***** Ввод значения в текущую ячейку таблицы значений
	//***** Таб: Таблица значений
	//***** НомСтр: Номер строки (0 текущая строка, -1 Новая строка, т.е. строка может быть добавлена)
	//***** НомКол: Номер (ИД) колонки (0 - текущая колонка)
	//***** ТипЗнач: Тип вводимого значения (если не задан, то определяется типом колонки)
	//***** Подсказка: Подсказка для ввода
	//***** Условие: Строка - условие проверки, если не задано, то не проверяется. В условии вводимое значение
	//***** доступно через переменную ЗначВвода, например "ЗначВвода>2"
	//***** Текст: Текст предупреждения, выдаваемый при невыполнении условия (если не задан, то не отображается)
	//***** Возвращаемые значения:
	//***** 0 Запись не выполнена 
	//***** 1 Запись выполнена
	//*****
	Перем ФлВвода,ЗначВвода,ФлДобавл;
	Перем Тип,Длина,Точность;
	Перем СтрШаб;
	Перем ВыходИзЦикла;
	Перем Справ,Счет;
	//*****
	Если НомСтр=0 Тогда
		НомСтр=Таб.НомерСтроки;
	КонецЕсли;
	Если НомКол=0 Тогда
		НомКол=Таб.ТекущаяКолонка();
	КонецЕсли;
	ФлДобавл=?(НомСтр=-1,1,0);
	//*****
	Таб.ПолучитьПараметрыКолонки(НомКол,Тип,Длина,Точность);
	Если ПустаяСтрока(ТипЗнач)=1 Тогда
		ТипЗнач=Тип;
	КонецЕсли;
	//*****
	ВыполнениеЦикла=1;
	Пока ВыполнениеЦикла=1 Цикл
		//*****
		ЗначВвода=?(ФлДобавл=1,ПолучитьПустоеЗначение(Тип),Таб.ПолучитьЗначение(НомСтр,НомКол));
		Если Лев(ТипЗнач,5)="Справ" Тогда
			//***** Для справочников отдельная ветка, поскольку функция 
			//***** ВвестиЗначение позволяет выбирать группы справочников,
			//***** следовательно надо отключить эту возможность
			Справ=СоздатьОбъект(ТипЗнач);
			Справ.НайтиЭлемент(ЗначВвода);
			Справ.ВыборГруппы(0);
			ФлВвода=Справ.Выбрать(Подсказка,"ФормаСписка");
			Если ФлВвода=1 Тогда
				ЗначВвода=Справ.ТекущийЭлемент();
			КонецЕсли;
		ИначеЕсли Лев(ТипЗнач,4)="Счет" Тогда
			//***** Для счетов также отдельная ветка, поскольку функция ВвестиЗначение 
			//***** позволяет выбирать счета-группы,следовательно надо отключить эту возможность.
			Счет=СоздатьОбъект(ТипЗнач);
			Счет.НайтиСчет(ЗначВвода);
			Счет.ВыборГруппы(0);
			ФлВвода=Счет.Выбрать(Подсказка,"Краткая");
			Если ФлВвода=1 Тогда
				ЗначВвода=Счет.ТекущийСчет();
			КонецЕсли;
		Иначе
			//***** Для остальных типов объектов используем функцию ВвестиЗначение
			ФлВвода=ВвестиЗначение(ЗначВвода,Подсказка,ТипЗнач,Длина,Точность);
		КонецЕсли;
		//*****
		Если ФлВвода=1 Тогда
			Если ТипЗначенияСтр(Условие)="Строка" Тогда
				Если ПустаяСтрока(Условие)=0 Тогда
					//СтрШаб="[?("+Условие+",1,0)]";
					//Если (глЗащита.Шаблон(СтрШаб)<>"1") Тогда
					Если (глПроверкаУсловия(ЗначВвода,Условие)=0) Тогда
						Если ПустаяСтрока(Текст)=0 Тогда
							Предупреждение(Текст);
						КонецЕсли;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТипЗначенияСтр(Условие)="СписокЗначений" Тогда
				Если Условие.Принадлежит(ЗначВвода.ВидТовара)=1 Тогда
					Если ПустаяСтрока(Текст)=0 Тогда
						Предупреждение(Текст);
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ВыполнениеЦикла=0;
		//*****
	КонецЦикла;
	//*****
	Если ФлВвода=1 Тогда
		Если ФлДобавл=1 Тогда
			Таб.НоваяСтрока();
			НомСтр=Таб.КоличествоСтрок();
			Таб.ТекущаяСтрока(НомСтр);
		КонецЕсли;
		Таб.УстановитьЗначение(НомСтр,НомКол,ЗначВвода);
	КонецЕсли;
	Возврат(ФлВвода);
	//*****
КонецФункции //глВвестиЗначениеВТаблицу


// Обработка расшифровки стандартных отчетов
Процедура ОбработкаЯчейкиТаблицы(Расшифровка, СтандартнаяОбработка, Таблица) Экспорт
	Перем Отчет;
	
	Если ТипЗначенияСтр(Расшифровка) <> "СписокЗначений" Тогда
		СтандартнаяОбработка = 1;
		Возврат;
	КонецЕсли;
	
	Док = Расшифровка.Получить("Документ");
	Меню = Расшифровка.Получить("Меню");
	Если ТипЗначенияСтр(Меню) = "СписокЗначений" Тогда
		Если Меню.ВыбратьЗначение(Отчет, "",,, 1) = 0 Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Отчет = Расшифровка.Получить("Отчет");
	КонецЕсли;
	
	глРасшифровка = Расшифровка;
	глФлагРасшифровки = 1;
	глОбновить = Число(Расшифровка.Получить("Обновить"));
	Если глОбновить <> 0 Тогда
		глТаблица = Таблица;
	КонецЕсли;                                                  
	
	Попытка            
		Если ТипЗначенияСтр(Док) = "Документ" Тогда
			ОткрытьФорму(Док);
		ИначеЕсли ТипЗначенияСтр(Отчет) = "Документ" Тогда
			ОткрытьФорму(Отчет);
		ИначеЕсли Метаданные.Отчет(Отчет).Выбран() = 1 Тогда
			ОткрытьФорму("Отчет."+Отчет+"#");
		ИначеЕсли Метаданные.Обработка(Отчет).Выбран() = 1 Тогда
			ОткрытьФорму("Обработка."+Отчет+"#");
		ИначеЕсли ФС.СуществуетФайл(Отчет) = 1 Тогда
			ОткрытьФорму("Отчет#",, Отчет);
		КонецЕсли;
	Исключение   
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	глФлагРасшифровки = 0;
	глРасшифровка = 0;
	глОбновить = 0;
КонецПроцедуры
//------------------------------
// Функция возвращает переданное значение параметра (для получения Контекста)
Функция ВзятьКонтекст(Конт) Экспорт
	Возврат Конт;
КонецФункции
//------------------------------
// Функция определяет - содержится ли в параметре "Значение" какое-либо значение
Функция ПустЗнач(Значение) Экспорт
	Тип=ТипЗначения(Значение);
	Если Тип=0 Тогда       // неопределенный тип данных
		Возврат 1;
	ИначеЕсли Тип=1 Тогда  // Число
		Возврат ?(Значение=0,1,0);
	ИначеЕсли Тип=2 Тогда  // Строка
		Возврат ПустаяСтрока(Значение);
	ИначеЕсли Тип=3 Тогда  // Дата
		Возврат ?(Значение=Дата(0),1,0);
	ИначеЕсли (Тип>=10) И (Тип<100) Тогда // Перечисление,Справочники,Документы и т.д.
		Возврат ?(Значение.Выбран()=0,1,0);
	КонецЕсли;
	Возврат 0;
КонецФункции
//------------------------------
Функция ДефТипУчета(Док) Экспорт
	//    ТЗ=ТипЗначенияСтр(Док);
	//    Если (ТЗ="Документ") ИЛИ (ТЗ="ГрупповойКонтекст") Тогда
	//        ВидДок=Док.Вид();
	//    ИначеЕсли ТЗ="Строка" Тогда
	//        ВидДок=Док;
	//    Иначе
	//        Возврат Упр;
	//    КонецЕсли;
	//    Если     (ВидДок="РасходнаяНакладная")
	//    ИЛИ (ВидДок="ПриходнаяНакладная")
	//    ИЛИ (ВидДок="РасходнаяРеализатора")
	//    ИЛИ (ВидДок="ПриходнаяРеализатора")
	//    ИЛИ (ВидДок="ОтчетРеализатора")
	//    ИЛИ (ВидДок="ИнвентаризацияРеализатора")
	//    ИЛИ (ВидДок="Счет")
	//    ИЛИ (ВидДок="СнятиеРезерва")
	//    ИЛИ (ВидДок="ДвиженияДенежныхСредств")
	//    ИЛИ (ВидДок="ПриходныйОрдерТБ")
	//    ИЛИ (ВидДок="РасходныйОрдерТБ")
	//    ИЛИ (ВидДок="Перемещение")
	//    ИЛИ (ВидДок="Списание")
	//    ИЛИ (ВидДок="Доверенность")
	//
	//    ИЛИ (ВидДок="Счет_фактура")
	//    ИЛИ (ВидДок="РегистрацияСчета_фактуры")
	//    ИЛИ (ВидДок="ПлатежноеПоручение")
	//    ИЛИ (ВидДок="ВводОстатковКредита")
	//    ИЛИ (ВидДок="ВводОстатковРеализации")
	//    ИЛИ (ВидДок="ВводОстатковТоваров")
	//    ИЛИ (ВидДок="ПереносВзаиморасчетыПоставщиков")
	//    ИЛИ    (ВидДок="ПереносВзаиморасчетыПокупателей")
	//    ИЛИ (ВидДок="ПереносПартииТоваров") Тогда
	//        Возврат Общ;
	//    ИначеЕсли (ВидДок="ВводОстатковТоваров")
	//    ИЛИ (ВидДок="ПереносОстаткиТоваров")
	//    ИЛИ (ВидДок="ПереносРезервыТоваров")
	//    ИЛИ (ВидДок="ПереносКасса") Тогда
	//        Возврат Упр;
	//    КонецЕсли;
	Возврат Упр;
КонецФункции
//-----------------------------
Процедура ЗаполнитьШапку(Конт) Экспорт
	Конт.Автор=Пользователь;
	Конт.Фирма=глФирма;
	Конт.ТипУчета=ДефТипУчета(Конт);
	Конт.ФинУчет=?(Конт.ТипУчета>Упр,1,0);
	
	Конт.IDD=ПолучитьУникальныйIDD();
	
	Если Конт.Вид()="ПретензияПолученная" Тогда
		Если Константа.НовыйМеханизмПретензий.Получить(РабочаяДата())=Да Тогда
			Конт.УстановитьНовыйНомер(ФК+"NA-");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//-----------------------------
Процедура ЗаполнитьШапкуНаОсн(Конт,ДокОсн) Экспорт
	Конт.Автор=Пользователь;
	Конт.Фирма=ДокОсн.Фирма;
	Конт.Основание=ПеревестиНаГосЯзык(ДокОсн.Вид())+" Nr. " + ДокОсн.НомерДок + " от " + ДокОсн.ДатаДок;
	Конт.IDD=ПолучитьУникальныйIDD();
	
	ВидДок=Конт.Вид();
	Если    (ВидДок="ПриходныйОрдерТБ")
	ИЛИ (ВидДок="РасходныйОрдерТБ")
	ИЛИ (ВидДок="Счет_фактура")
	ИЛИ (ВидДок="РегистрацияСчета_фактуры") Тогда
		// наследуется ТипУчета
		Конт.ТипУчета=ДокОсн.ТипУчета;
	Иначе
		// устанавливается дефолтный ТипУчета
		Конт.ТипУчета=ДефТипУчета(ВидДок);
	КонецЕсли;
	Конт.ФинУчет=?(Конт.ТипУчета>Упр,1,0);
КонецПроцедуры
//-----------------------------
Процедура СменаТипа(Конт,Тип) Экспорт
	Конт.ТипУчета=?(Тип=0,Общ,Упр);
	Конт.ФинУчет=?(Конт.ТипУчета>Упр,1,0);
КонецПроцедуры
//------------------------
Процедура ПриСменеТипа(Конт) Экспорт
	Конт.ТипУчета=Конт.Тип.ТекущаяСтрока()-1;
	Конт.ФинУчет=?(Конт.ТипУчета>Упр,1,0);
КонецПроцедуры
//------------------------------
Функция  ПозицияДокумента(Док) Экспорт
	// функция возвращает число - позиция документа как конкатенацию Дата+Время документа
	Если НЕ(ТипЗначенияСтр(Док)="Документ") Тогда
		Возврат 0;
	КонецЕсли;
	Если Док.Выбран()=0 Тогда
		Возврат 0;
	КонецЕсли;
	Возврат Число(Строка(Число(Док.ДатаДок))+СтрЗаменить(Док.ПолучитьВремя(),":",""));
КонецФункции
//---------------------
Функция ДостатьДатуПозиции(Позиция) Экспорт
	Возврат Дата(Число(Сред(Строка(Позиция),1,7)));
КонецФункции
//---------------------
Функция ПреобразоватьДатуВпозицию(ЗначДаты,Положение="Начало") Экспорт
	Если Положение="Начало" Тогда
		Возврат Число(Строка(Число(ЗначДаты))+"000000");
	Иначе
		Возврат Число(Строка(Число(ЗначДаты))+"235959");
	КонецЕсли;
КонецФункции
//---------------------
Функция ВыбранаГП(ГП) Экспорт
	Если (ПустЗнач(ГП)=1)
	ИЛИ (СтрДлина(Строка(ГП))<13)
	ИЛИ (ДостатьДатуПозиции(ГП)<'01.01.96')
	ИЛИ (ДостатьДатуПозиции(ГП)>'01.01.2010')
	Тогда
		// ГП еще нет
		Возврат 0;
	КонецЕсли;
	Возврат 1;
КонецФункции
//---------------------
Функция ОтобразитьПозицию(ГП) Экспорт
	Если ВыбранаГП(ГП)=0 Тогда
		// ГП еще нет
		Возврат "Не определена!";
	КонецЕсли;
	Возврат ""+ДостатьДатуПозиции(ГП)+"; ("+Сред(Строка(ГП),8,2)+":"+Сред(Строка(ГП),10,2)+":"+Сред(Строка(ГП),12,2)+")";
КонецФункции
//------------------------------
Функция  СравнитьДокументы(Док1,Док2) Экспорт
	// Эта функция сравнивает позиции документов Док1 и Док2
	// Возвращает 1, если Док1>чем Док2 (Док1 выписан ПОЗЖЕ),
	// Возвращает 0, если Док1=Док2 (Док1 совпадает с Док2 - один и тот же документ),
	// иначе возвращает -1;
	Тип=ТипЗначенияСтр(Док1);
	Если Тип="Документ" Тогда
		ПозДок1=ПозицияДокумента(Док1);
	ИначеЕсли Тип="Число" Тогда
		ПозДок1=Док1;
	Иначе
		ПозДок1=0;
	КонецЕсли;
	Тип=ТипЗначенияСтр(Док2);
	Если Тип="Документ" Тогда
		ПозДок2=ПозицияДокумента(Док2);
	ИначеЕсли Тип="Число" Тогда
		ПозДок2=Док2;
	Иначе
		ПозДок2=0;
	КонецЕсли;
	
	Если ПозДок1>ПозДок2 Тогда
		Возврат 1;
	ИначеЕсли ПозДок1=ПозДок2 Тогда
		Возврат 0;
	Иначе
		Возврат -1;
	КонецЕсли;
КонецФункции
//-------------------------------
Процедура УстановитьГП(Док,Последовательность="Последов_1")  Экспорт
	Если ТипЗначенияСтр(Последовательность)<>"Строка" Тогда
		Возврат;
	КонецЕсли;
	Если Док.Выбран()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Последовательность="Последов_1" Тогда
		Константа.ГраницаПоследовательности_1=ПозицияДокумента(Док);
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры
//-------------------------------
Функция ВидыДокументовПоследов(Последовательность="Последов_1")  Экспорт
	// Функция возвращаяет список значений видов документов, которые проводятся по Последовательности
	СписокВидовДок=СоздатьОбъект("СписокЗначений");
	Если ТипЗначенияСтр(Последовательность)<>"Строка" Тогда
		Возврат СписокВидовДок;
	КонецЕсли;
	Если Последовательность="Последов_1" Тогда
		СписокВидовДок.ДобавитьЗначение("РасходнаяНакладная");
		СписокВидовДок.ДобавитьЗначение("РасходнаяРеализатора");
		СписокВидовДок.ДобавитьЗначение("ПриходныйОрдерТБ");
		СписокВидовДок.ДобавитьЗначение("РасходныйОрдерТБ");
		СписокВидовДок.ДобавитьЗначение("ПриходнаяНакладная");
		СписокВидовДок.ДобавитьЗначение("ПриходнаяРеализатора");
		СписокВидовДок.ДобавитьЗначение("ДвиженияДенежныхСредств");
		СписокВидовДок.ДобавитьЗначение("ОтчетРеализатора");
		СписокВидовДок.ДобавитьЗначение("ИнвентаризацияРеализатора");
		СписокВидовДок.ДобавитьЗначение("Списание");
		СписокВидовДок.ДобавитьЗначение("ВводОстатковТоваров");
		СписокВидовДок.ДобавитьЗначение("ВводОстатковКредита");
		СписокВидовДок.ДобавитьЗначение("СписаниеЗадолженности");
		СписокВидовДок.ДобавитьЗначение("ВводОстатковРеализации");
		СписокВидовДок.ДобавитьЗначение("ПереносПартииТоваров");
		СписокВидовДок.ДобавитьЗначение("ПереносВзаиморасчетыПокупателей");
		СписокВидовДок.ДобавитьЗначение("ПереносВзаиморасчетыПоставщиков");
	КонецЕсли;
	Возврат СписокВидовДок;
КонецФункции
//-------------------------------
Функция СравнитьГП(ТекДок,Последовательность="Последов_1")  Экспорт
	//    Сравнивает дату и время ТекДок с Границей Последовательности.
	//    Возвращает:
	//    -2 в случае, если ТекДок, который сравнивается с ГП, не записан - то есть
	//      он еще не имеет никакой позиции на оси времени
	//      не обрабатывается здесь (т.е. это фактически код ошибки)
	//    -1, если дата и время ТекДок меньше даты и времени ГП
	//      (т.е. ГП после проведения надо перенести на ТекДок);
	//   0, если дата и время ТекДок равно дате и времени ГП ;
	//      (т.е. ГП после проведения надо перенести на ТекДок);
	//    +1, если дата и время ТекДок больше даты и времени ГП и между ними
	//      нет проведенных документов по указанному регистру.
	//      (т.е. ГП после проведения можно и надо перенести на ТекДок);
	//    +2, если дата и время ТекДок больше даты и времени ГП, но между ними
	//      есть проведенные документы.
	//      (т.е. ГП нельзя переносить на ТекДок,
	Если ТипЗначенияСтр(Последовательность)<>"Строка" Тогда
		Возврат -2;
	КонецЕсли;
	Если ТекДок.Выбран()=0 Тогда
		Возврат -2;
	КонецЕсли;
	Если Последовательность="Последов_1" Тогда
		ГП=Константа.ГраницаПоследовательности_1;
	Иначе
		Возврат -2;
	КонецЕсли;
	
	СписокВидовДок=ВидыДокументовПоследов(Последовательность);
	
	Если ВыбранаГП(ГП)=0    Тогда
		// ГП еще нет, значит можно проводить и записать ТекДок в ГП
		Возврат 1;
	КонецЕсли;
	Если ПозицияДокумента(ТекДок)=ГП Тогда
		Возврат 0;
	КонецЕсли;
	Если СравнитьДокументы(ТекДок,ГП)=-1 Тогда
		// ГП стоит позже ТекДок
		Возврат -1;
	КонецЕсли;
	Есть=0;
	Для Н=1 По СписокВидовДок.РазмерСписка() Цикл
		Докум=СоздатьОбъект("Документ."+СписокВидовДок.ПолучитьЗначение(Н));
		Докум.УстановитьФильтр(1,0,0,1,1);
		Докум.ВыбратьДокументы(Дата(Число(Сред(Строка(ГП),1,7))),ТекДок.ДатаДок);
		Пока Докум.ПолучитьДокумент()=1 Цикл
			Если Докум.Проведен()=0 Тогда
				Продолжить;
			КонецЕсли;
			Если Докум.ПометкаУдаления()=1 Тогда
				Продолжить;
			КонецЕсли;
			Если СравнитьДокументы(ГП,Докум)>=0 Тогда
				// ГП стоит позже Докум
				Продолжить;
			КонецЕсли;
			Если СравнитьДокументы(Докум,ТекДок)>=0 Тогда
				// Докум выписан позже ТекДок
				Прервать;
			КонецЕсли;
			Есть=1;
			Прервать;
		КонецЦикла;
		Если Есть=1 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Есть=1 Тогда
		Возврат 2;
	Иначе
		Возврат 1;
	КонецЕсли;
КонецФункции
//-----------------------
Функция МожноПроводить(Конт,Последовательность="Последов_1") Экспорт
	Если ТипЗначенияСтр(Последовательность)<>"Строка" Тогда
		Возврат 0;
	КонецЕсли;
	ТекДок=Конт.ТекущийДокумент();
	Если ТекДок.Выбран()=0 Тогда
		Возврат 0;
	КонецЕсли;
	ФакторПроведения=СравнитьГП(ТекДок,Последовательность);
	Если (ФакторПроведения>-2) И (ФакторПроведения<2) Тогда
		Возврат 1;
	КонецЕсли;
	Возврат 0;
КонецФункции
//-------------------------------
Функция СравнитьТН(ТекПоз,ТН,Последовательность="Последов_1")  Экспорт
	//    Сравнивает ТекПоз с ТН .
	//    Возвращает:
	//    -1, если нет документов по данной Последовательности между ТекПоз и ТН
	//    +1, если есть документы по данной Последовательности между ТекПоз и ТН
	
	СписокВидовДок=ВидыДокументовПоследов(Последовательность);
	
	Если СравнитьДокументы(ТекПоз,ТН)>0 Тогда
		// ТекПоз стоит позже ТН
		Возврат -1;
	КонецЕсли;
	Есть=0;
	ДокПоз=0;
	Для Н=1 По СписокВидовДок.РазмерСписка() Цикл
		Докум=СоздатьОбъект("Документ."+СписокВидовДок.ПолучитьЗначение(Н));
		Докум.УстановитьФильтр(1,0,0,1,1);
		Докум.ВыбратьДокументы(ДостатьДатуПозиции(ТекПоз),ДостатьДатуПозиции(ТН));
		Пока Докум.ПолучитьДокумент()=1 Цикл
			Если Докум.Проведен()=0 Тогда
				Продолжить;
			КонецЕсли;
			Если Докум.ПометкаУдаления()=1 Тогда
				Продолжить;
			КонецЕсли;
			Сравн=СравнитьДокументы(ТекПоз,Докум);
			Если Сравн>0 Тогда
				// ТекПоз стоит позже Докум
				Продолжить;
			КонецЕсли;
			Если Сравн=0 Тогда
				// это на случай, если несколько документов имеют одну позицию
				Если ДокПоз=0 Тогда
					ДокПоз=1;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если СравнитьДокументы(Докум,ТН)>0 Тогда
				// Докум выписан позже ТН
				Прервать;
			КонецЕсли;
			Есть=1;
			Прервать;
		КонецЦикла;
		Если Есть=1 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Есть=1 Тогда
		Возврат 1;
	Иначе
		Возврат -1;
	КонецЕсли;
КонецФункции
//-------------------------------
Процедура ДобСтроку(Стр,Предлог,Рекв) Экспорт
	Если ТипЗначения(Стр)=0 Тогда
		Стр="";
	КонецЕсли;
	Если ПустЗнач(Рекв)=0 Тогда
		Стр=Стр+Предлог+СокрЛП(Рекв);
	КонецЕсли;
КонецПроцедуры
//-------------------------------
Функция КолвоБанковскихДней(НачДата,КонДата)  Экспорт
	// функция возвращает число рабочих дней, т.е.
	// без суббот и воскресений,
	// прошедших от НачДата до КонДата
	Дней=0;
	Для К=1 По Число(КонДата-НачДата)+1 Цикл
		// определим день недели
		ДН=НомерДняНедели(НачДата+К-1);
		Если НЕ((ДН=6) ИЛИ (ДН=7)) Тогда
			Дней=Дней+1;
		КонецЕсли;
	КонецЦикла;
	Возврат Дней;
КонецФункции
//-------------------------------

Функция семБанковскаяДата(пДата,пГлубина,пВидКлиента = "")
	ODBCRecordSet = СоздатьОбъект( "ODBCRecordSet" );
	ODBCRecordSet.УстБД1С();;
	спУсловий = СоздатьОбъект( "СписокЗначений" );
	знак=?(пГлубина>0,1,-1);


	ТекстЗапроса="
	|SELECT 
	|	$Спр.ДатаСобытия as ДатаСобытия
	|FROM
	|	$Справочник.Календарь as Спр
	|WHERE
	|	$Спр.ДатаСобытия "+?(знак=-1,"<=",">=")+" :НачДата
	|";
	ODBCRecordSet.УстановитьТекстовыйПараметр("НачДата", пДата);
	
	ИТ = СоздатьОбъект( "ИндексированнаяТаблица" );
	ИТ.Загрузить(ODBCRecordSet.ВыполнитьИнструкцию(ТекстЗапроса));
	ИТ.ДобавитьИндекс("ИДатаСобытия", "*ДатаСобытия", 1);
	текГлубина = 0;
	текДата = пДата;
	Пока Абс_(текГлубина) < Абс_(пГлубина) Цикл
		текДата = текДата+знак*1;
		текДеньНед = НомерДняНедели( текДата );
		//Тип = "";
		Если ( текДеньНед = 6 ) или ( текДеньНед = 7 ) Тогда
			Если ИТ.НайтиСтроку("ИДатаСобытия",текДата) = 0 Тогда
				//Тип = "Выходной";
			Иначе
				//Тип = "Перенос";
				текГлубина = текГлубина + знак*1;
			КонецЕсли;	
		Иначе 

			Если ТипЗначенияСтр(пВидКлиента)="Перечисление" Тогда
				Если пВидКлиента=Перечисление.ВидыКлиентов.Поставщик Тогда
					текГлубина = текГлубина + знак*1; //не учитываем праздничные дни для поставщиков
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ИТ.НайтиСтроку("ИДатаСобытия",текДата) > 0 Тогда
				//Тип = "Праздник";
			Иначе
				текГлубина = текГлубина + знак*1;
				//Тип = "Рабочий";
			КонецЕсли;	
		КонецЕсли;
		//Тип = Тип + " - "+ ИТ.НайтиСтроку("ИДатаСобытия",текДата);
		//Сообщить(Шаблон("[текДата]-[текДеньНед] текГлубина [текГлубина] ([Тип])"));
	КонецЦикла;
	//Сообщить("ДатаОплаты = "+текДата);
	Возврат текДата; 
КонецФункции

//-----------------------

Функция БанковскаяДата(НачДата,КолвоДней,пВидКлиента = "")  Экспорт
	Возврат семБанковскаяДата(НачДата,КолвоДней,пВидКлиента);
	// функция возвращает дату через заданное
	// количество рабочих дней, т.е.
	// без суббот и воскресений.
	//Дней=0;
	//К=0;
	//ПрошлоДней= Число(НачДата-Дата(1994,01,03));
	//// в константе надо указать любую
	//// дату понедельника в прошлом
	//Пока Дней<КолвоДней Цикл
	//	К=К+1;
	//	// определим день недели
	//	ДН=НомерДняНедели(НачДата+К);
	//	Если НЕ((ДН=6) ИЛИ (ДН=7)) Тогда
	//		Дней=Дней+1;
	//	КонецЕсли;
	//КонецЦикла;
	//Возврат НачДата+К; 
КонецФункции
//-----------------------

Функция семПолучитьГлубинуКредитаКлиента( пКлиент, пВидКлиента = "", пДата, пВидОтсрочки="", пГлубина=0 ) Экспорт
	Если ПустоеЗначение( пКлиент )  = 1 Тогда Возврат ""; КонецЕсли;
	Если Число(пДата) = 0 Тогда пДата = РабочаяДата(); КонецЕсли;
	текКлиент = ?(пКлиент.КлГруппа.Выбран()=1,пКлиент.КлГруппа,пКлиент);
	текВидКлиента = ?(ПустоеЗначение( пВидКлиента ) = 1, текКлиент.ВидКлиента, пВидКлиента);
	текКлиент.ИспользоватьДату(пДата);
	Если текВидКлиента = Перечисление.ВидыКлиентов.Покупатель Тогда
		пВидОтсрочки = текКлиент.ВидОтсрочкиКредита;
		//пГлубина = текКлиент.Глубина.Получить(пДата);
		пГлубина = текКлиент.Глубина;
	Иначе
		пВидОтсрочки = текКлиент.ВидОтсрочкиКредитаПоставщика;
		//пГлубина = текКлиент.ГлубинаКредитаПоставщика.Получить(пДата);
		пГлубина = текКлиент.ГлубинаКредитаПоставщика;
	КонецЕсли;
	текКлиент.ИспользоватьДату("");
	Если пВидОтсрочки=Перечисление.ВидыОтсрочкиКредита.Дни Тогда
		Возврат Шаблон("[пГлубина] д.");
	ИначеЕсли пВидОтсрочки=Перечисление.ВидыОтсрочкиКредита.ЧислоМесяца Тогда
		Возврат Шаблон("до [пГлубина]-го.");
	ИначеЕсли пВидОтсрочки=Перечисление.ВидыОтсрочкиКредита.ДниКонМесяца Тогда
		Возврат Шаблон("[пГлубина] д. + км");
	Иначе
		Возврат Шаблон("[пГлубина] д.");
	КонецЕсли;
КонецФункции

Функция семПолучитьДатуОплаты( пКлиент, пВидКлиента = "", пДатаПрих ) Экспорт
	текГлубина = 0;
	текВидОтсрочки = "";
	семПолучитьГлубинуКредитаКлиента( пКлиент, пВидКлиента, пДатаПрих, текВидОтсрочки, текГлубина );
	
	Если текВидОтсрочки=Перечисление.ВидыОтсрочкиКредита.Дни Тогда
		Возврат БанковскаяДата(пДатаПрих,текГлубина,пВидКлиента);
	ИначеЕсли текВидОтсрочки=Перечисление.ВидыОтсрочкиКредита.ДниКонМесяца Тогда
		Возврат КонМесяца(БанковскаяДата(пДатаПрих,текГлубина,пВидКлиента));
	ИначеЕсли текВидОтсрочки=Перечисление.ВидыОтсрочкиКредита.ЧислоМесяца Тогда
		Если Число(текГлубина) > 0 Тогда   
			ДатаД = ДобавитьМесяц(пДатаПрих,1);
			ЧислоМ=ДатаЧисло( КонМесяца( ДатаД ) );
			ЧислоД=?(текГлубина > ЧислоМ, ЧислоМ, текГлубина );
			Возврат Дата(ДатаГод(ДатаД),ДатаМесяц(ДатаД),ЧислоД);
		Иначе
			Возврат пДатаПрих;
		КонецЕсли;
	Иначе
		Возврат пДатаПрих + текГлубина;
	КонецЕсли;
КонецФункции

Функция КурсДляВалюты(Валюта,ДатаКурса) Экспорт

	Если ПустоеЗначение(ДатаКурса)=1 Тогда
		ДатаКурса=РабочаяДата();
	КонецЕсли;	

	Если ТипЗначенияСтр(ДатаКурса)="Документ" Тогда
		ДатаКурса=ДатаКурса.ДатаДок;
	КонецЕсли;	
	
	глЗапросПоВалютам.УстПараметр(1,ДатаКурса);
//	глЗапросПоВалютам.УстановитьТекстовыйПараметр("НаДату",ДатаКурса);
	
	Если Валюта=Рубли Тогда
		// Для базовой валюты курс всегда равен 1, поэтому отображаем курс Основной валюты

//		глЗапросПоВалютам.УстановитьТекстовыйПараметр("Валюта",Константа.ОсновнаяВалюта);
		//глЗапросПоВалютам.УстПараметр(2,Константа.ОсновнаяВалюта);
//		Возврат глЗапросПоВалютам.ВыполнитьСкалярный(ТекстЗапросаКурсВалюты);
		Возврат 1;

		//Кратность=Константа.ОсновнаяВалюта.Кратность.Получить(ДатаКурса);
		//Возврат Константа.ОсновнаяВалюта.Курс.Получить(ДатаКурса)/?(Кратность=0,1,Кратность);
	Иначе    // для других валют записываем их собственный курс
//		глЗапросПоВалютам.УстановитьТекстовыйПараметр("Валюта",Валюта);
		глЗапросПоВалютам.УстПараметр(2,Валюта);
//		Возврат глЗапросПоВалютам.ВыполнитьСкалярный(ТекстЗапросаКурсВалюты);
		Возврат глЗапросПоВалютам.ВыполнитьСкалярный();
		//Кратность=Валюта.Кратность.Получить(ДатаКурса);
		//Возврат Валюта.Курс.Получить(ДатаКурса)/?(Кратность=0,1,Кратность);
	КонецЕсли;
КонецФункции
//-----------------------
Функция ДатаКурсаДок(Док) Экспорт
	// возвращаемое значение ДатыКурса документа
	ВидДок=Док.Вид();
	Если        (ВидДок="РасходнаяНакладная")
	ИЛИ (ВидДок="РасходнаяРеализатора")
	ИЛИ (ВидДок="ПриходнаяНакладная")
	ИЛИ (ВидДок="ПриходнаяРеализатора")
	ИЛИ (ВидДок="ОтчетРеализатора")
	ИЛИ (ВидДок="ИнвентаризацияРеализатора")
	ИЛИ (ВидДок="Счет")
	ИЛИ (ВидДок="Счет_фактура")
	ИЛИ (ВидДок="ВводОстатковТоваров")
	ИЛИ (ВидДок="ВводОстатковКредита")
	ИЛИ (ВидДок="СписаниеЗадолженности")
	Тогда
		Возврат Док.Дата_курса;
	ИначеЕсли    (ВидДок="РегистрацияСчета_фактуры") Тогда
		Возврат ?(Число(Док.ДатаСчетаФактуры)<>0,Док.ДатаСчетаФактуры,Док.ДатаДок);
	Иначе
		Возврат Док.ДатаДок;
	КонецЕсли;
КонецФункции
//-----------------------
Функция КурсДок(Док) Экспорт
	// возвращаемое значение Курс документа
	ВидДок=Док.Вид();
	Если    (ВидДок="Перемещение")
	ИЛИ (ВидДок="Списание")
	ИЛИ (ВидДок="ПеремещениеНаСкладГотовойПродукции")
	ИЛИ (ВидДок="СнятиеРезерва")
	ИЛИ (ВидДок="Доверенность")
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	или (ВидДок="ПеремещениеДепартамент")
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Тогда
		Возврат    1;
	ИначеЕсли     (ВидДок="РегистрацияСчета_фактуры")
	ИЛИ (ВидДок="ДвиженияДенежныхСредств")
	ИЛИ (ВидДок="ПлатежноеПоручение")
	ИЛИ (ВидДок="ПриходныйОрдерТБ")
	ИЛИ (ВидДок="РасходныйОрдерТБ")
	
	Тогда
		Возврат КурсДляВалюты(Док.Валюта,ДатаКурсаДок(Док));
	ИначеЕсли ВидДок="ОплатаЧеков" Тогда
		Возврат КурсДляВалюты(КлиентОплатаЧеков.ВалютаВзаиморасчетов,Док.ДатаДок);
	Иначе
		Возврат Док.Курс;
	КонецЕсли;
КонецФункции
//-----------------------
Функция КлиентДок(Док,Реж="") Экспорт
	// возвращаемое значение Клиент документа
	//Закоментил АЛгоритм Успеха begin
	//    Если Док.Выбран()=0 Тогда
	//        Возврат "";
	//    КонецЕсли;
	//    Стр=Док.Вид();
	//    Если Сред(Стр,1,7)="Перенос" Тогда
	//        Возврат "";
	//    КонецЕсли;
	//    Если Не((Стр="СнятиеРезерва") ИЛИ
	//    (Стр="ВводОстатковТоваров") ИЛИ
	//    (Стр="ДвиженияДенежныхСредств") ИЛИ
	//    (Стр="Доверенность") ИЛИ
	//    (Стр="Списание")
	//    ИЛИ (Стр="Перемещение")
	//    ИЛИ (Стр="Доверенность")
	//    ИЛИ (Стр="ПереносОстаткиТоваров")
	//    ИЛИ (Стр="ПереносРезервыТоваров")
	//
	//    ИЛИ (Стр="ПереносПартииТоваров")
	//    ИЛИ (Стр="ПереносВзаиморасчетыПокупателей")
	//    ИЛИ (Стр="ПереносВзаиморасчетыПоставщиков")
	//    ИЛИ (Стр="АктРазборки")
	//    ИЛИ (Стр="ПеремещениеНаСкладГотовойПродукции")
	//    ИЛИ (Стр="СличительнаяВедомость")                     )Тогда 
	// end это просто ужас надо так:
	Если глЕстьРеквизитШапки("Клиент",Док.Вид())=1 Тогда
		Если Реж="Подробно" Тогда
			Если глЕстьРеквизитШапки("КлГруппа",Док.Вид())=1 Тогда
				КлГруппа=Док.КлГруппа;
			Иначе
				КлГруппа=Док.Клиент;
			КонецЕсли;
			Возврат СокрЛП(КлГруппа.ПолноеНаименование)+" ReЄ. Nr.: "+СокрЛП(КлГруппа.Рег_номер)+" Jur. adrese: "+СокрЛП(КлГруппа.ЮридическийАдрес);
		Иначе
			Возврат Док.Клиент;
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
//-------------------------------
Функция ФРМ(ЧислЗнач,Вал,Реж) Экспорт
	// Это процедура нашего стандартного форматирования цен и сумм:
	// Для рублей не печатаем дроби, для других валют 3 знака после запятой
	// Триады отделяем символом (')
	Стр=СокрЛ(Формат(ЧислЗнач,"Ч015.2.'"));
	Если (Реж=0) ИЛИ (ПустаяСтрока(Стр)=1) Тогда
		Возврат Стр;
	Иначе
		Возврат Стр+" "+СокрП(Вал.Наименование);
	КонецЕсли;
КонецФункции
//-------------------------------
Функция ФРМТ(ЧислЗнач,Вал,Реж) Экспорт
	// Это процедура нашего стандартного форматирования цен и сумм:
	// Для рублей не печатаем дроби, для других валют 3 знака после запятой
	// Без разделения на Триады
	Стр=СокрЛ(Формат(ЧислЗнач,"Ч015.2"));
	Если (Реж=0) ИЛИ (ПустаяСтрока(Стр)=1) Тогда
		Возврат Стр;
	Иначе
		Возврат Стр+" "+СокрП(Вал.Наименование);
	КонецЕсли;
КонецФункции

//*****
// Форма слова во множественном числе с числительным
// Слово1  - форма слова в ед числе      ("шкаф")
// Слово2  - форма слова для числит 2-4  ("шкафа")
// Слово3  - форма слова для числит 5-10 ("шкафов")
// _Чсл    - числительное
Функция ФормаМЧ(Слово1,Слово2,Слово3,_Чсл) Экспорт
	// остаток
	Ост = _Чсл-Цел(_Чсл/10)*10;
	Если (_Чсл >10) И (_Чсл<20) Тогда
		Форма = 3;
	ИначеЕсли Ост=1 Тогда
		Форма = 1;
	ИначеЕсли (Ост>1) И (Ост<5) Тогда
		Форма = 2;
	Иначе
		Форма = 3;
	КонецЕсли;
	Если Форма=1 Тогда
		Возврат Слово1;
	ИначеЕсли Форма=2 Тогда
		Возврат Слово2;
	Иначе
		Возврат Слово3;
	КонецЕсли;
КонецФункции // ФормаМЧ

//-------------------------------
Процедура Оживить(ДобСтрок) Экспорт
	ЧислоСтрок=ЧислоСтрок+ДобСтрок;
	Состояние("В отчет выведено "+ЧислоСтрок+" строк.");
КонецПроцедуры

//-------------------------------
Процедура СообщитьЗап(Конт,Стр) Экспорт
	Сообщить(Стр);
	Если Конт.ГрупповаяОбработка()=1 Тогда
		ЗаписьЖурналаРегистрации(Стр);
	КонецЕсли;
КонецПроцедуры
//-------------------------------
Процедура НеПроводить(Конт,Стр) Экспорт
	//    Конт.НеПроводитьДокумент();
	СтатусВозврата(0);
	Сообщить(Стр);
	Сообщить("Документ "+Конт.Вид()+" № "+Конт.НомерДок 
	+" от "+Конт.ДатаДок+" не проводится!!!");
	Возврат;
КонецПроцедуры

Процедура семНеПроводить( Конт, стр ) Экспорт
	СтатусВозврата( 0 );
	Если ПустоеЗначение( стр ) = 0 Тогда Сообщить( стр, "!" ); КонецЕсли;
	Сообщить( Шаблон( "Документ [Конт.Вид()] [Конт.НомерДок] от [Конт.ДатаДок] не проводится!!!" ), "!!" );
	Возврат;
КонецПроцедуры

//-------------------------------
Функция НеПроводитьМягко(Конт,Стр) Экспорт
	Если (Конт.ГрупповаяОбработка()=1) Тогда
		СообщитьЗап(Конт,Стр);
		СообщитьЗап(Конт,"Документ "+Конт.Вид()+" № "+Конт.НомерДок+" от "+Конт.ДатаДок+" УСЛОВНО проводится!");
		Возврат 1;
	Иначе
		НеПроводить(Конт,Стр);
		Возврат 0;
	КонецЕсли;
	Возврат 0;
КонецФункции
//------------------
Функция ПроверкаДублейСтрок(Конт) Экспорт
	// Эта процедура проверяет спецификацию документа на дубли товара
	СписокТоваров=СоздатьОбъект("СписокЗначений");
	Конт.ВыбратьСтроки();
	Пока Конт.ПолучитьСтроку() = 1 Цикл
		Твр=Конт.Товар;
		Если Твр.Выбран()=0 Тогда
			Продолжить;
		КонецЕсли;
		//  Проверка товара на совпадение в строках документа
		Если СписокТоваров.НайтиЗначение(Твр)<>0 Тогда
			// Значит такой товар уже в накладной есть
			Сообщить("Повторение товара:"+СокрП(Твр.Наименование)+" в строке "+Конт.НомерСтроки);
			Возврат 1;
		КонецЕсли;
		СписокТоваров.ДобавитьЗначение(Твр,"");
	КонецЦикла;
	Возврат 0;
КонецФункции                    



//---------------------
Функция ПроцентНДС(Ставка) Экспорт
	// Эта функция переводит тип СтавкаНДС в численные проценты НДС
	
	НДС_=СтрЗаменить(Строка(Ставка),"%","");
	Возврат Число(НДС_);
	
	//Если Ставка=Перечисление.ЗначенияНДС.безНДС Тогда
	//	Возврат 0;
	//ИначеЕсли Ставка=Перечисление.ЗначенияНДС.ОсновнаяСтавкаНДС Тогда
	//	Возврат 18;
	//ИначеЕсли Ставка=Перечисление.ЗначенияНДС.ОсновнаяСтавкаНДСНов Тогда
	//	Возврат 21;
	//ИначеЕсли Ставка=Перечисление.ЗначенияНДС.НДС9 Тогда
	//	Возврат 9;
	//ИначеЕсли Ставка=Перечисление.ЗначенияНДС.НДС5 Тогда
	//	Возврат 5;
	//ИначеЕсли Ставка=Перечисление.ЗначенияНДС.ЛьготнаяСтавкаНДС Тогда
	//	Возврат 10;
	//ИначеЕсли Ставка=Перечисление.ЗначенияНДС.НДС19 Тогда
	//	Возврат 19;	
	//ИначеЕсли Ставка=Перечисление.ЗначенияНДС.НДС20 Тогда
	//	Возврат 20;
	//	
	//Иначе
	//	Возврат 0;
	//КонецЕсли;
КонецФункции
//---------------------
Функция Пересчет(Цена,ВалютаНач,ПоКурсуВалютыНач,ВалютаКон,ПоКурсуВалютыКон) Экспорт
	// Эта функция пересчитывает Цену из ВалютаНач и возвращает значение Цена в ВалютаКон
	// в параметрах ПоКурсуВалютыНач и ПоКурсуВалютыНач могут передаваться
	// либо сами курсы либо даты
	Если ВалютаНач=ВалютаКон Тогда
		// если ВалютаНач совпадает с ВалютаКон
		Возврат Цена;
	КонецЕсли;
	
	ТипЗн=ТипЗначенияСтр(ПоКурсуВалютыНач);
	Если ТипЗн="Число" Тогда
		КурсВалютыНач=ПоКурсуВалютыНач;
	ИначеЕсли ТипЗн="Дата" Тогда
		КурсВалютыНач=КурсДляВалюты(ВалютаНач,ПоКурсуВалютыНач);
	Иначе
		Сообщить("Неверный тип параметра при пересчете валюты!");
		Возврат Цена;
	КонецЕсли;
	
	ТипЗн=ТипЗначенияСтр(ПоКурсуВалютыКон);
	Если ТипЗн="Число" Тогда
		КурсВалютыКон=ПоКурсуВалютыКон;
	ИначеЕсли ТипЗн="Дата" Тогда
		КурсВалютыКон=КурсДляВалюты(ВалютаКон,ПоКурсуВалютыКон);
	Иначе
		Сообщить("Неверный тип параметра при пересчете валюты!");
		Возврат Цена;
	КонецЕсли;
	
	Если (КурсВалютыНач=0) ИЛИ (КурсВалютыКон=0)Тогда
		Сообщить("При пересчете валюты обнаружен нулевой курс валюты "
		+?(КурсВалютыНач=0,ВалютаНач,ВалютаКон));
		Возврат Цена;
	КонецЕсли;
	
	Если  ВалютаНач=Рубли  Тогда
		// если ВалютаНач не совпадает с ВалютаКон, а товар рублевый
		// цена пересчитывается из рублей
		Возврат ?(ВалютаКон=Доллары,Цена/КурсВалютыНач,Цена/КурсВалютыКон);
	ИначеЕсли  ВалютаКон=Рубли  Тогда
		// цена пересчитывается в рубли
		Возврат Цена*КурсВалютыНач;
	Иначе
		// если валюта товара не совпадает с валютой накладной, и не рубли
		Возврат Цена*КурсВалютыНач/КурсВалютыКон;
	КонецЕсли;
КонецФункции                
//*********************************************************
Функция СтоимостьТовараПоРегистру(Товар,Докум,ТипУчета,НДС,ВалРежим=0,НСтроки=0,Табл="",Рекв="Стоимость")  Экспорт
	// эта функция возвращает стоимость Товара, которая зафиксирована для Докум
	// функция работает для ТипаУчета Упр и Фин
	// Если ВалРежим=1 то возврат в валюте учета, если 0, то в БазовойВалюте
	// по умолчанию ВалРежим=0
	// Возвращает 0 если ошибка или товар по документу не проводился
	// в параметр НДС возвращается НДС
	Если (Докум.Выбран()=0) ИЛИ (Товар.Выбран()=0) Тогда
		Сообщить("себест. товара: ("+Товар.Код+" "+СокрЛП(Товар)+") в документе: ("+Докум+") нельзя определить - не указан товар или документ!");
		Возврат 0;
	КонецЕсли;
	Если НЕ((ТипУчета="Упр") ИЛИ (ТипУчета="Фин")) Тогда
		Сообщить("Стоим. товара: ("+Товар.Код+" "+СокрЛП(Товар)+") в документе: ("+Докум+") нельзя определить - неверно указан тив учета!");
		Возврат 0;
	КонецЕсли;
	
	Себестоим=0;
	Рег=СоздатьОбъект("Регистр.ПартииТоваров");
	
	Запрос=СоздатьОбъект("ODBCRecordSet");
	ТекстЗапроса="SELECT $Рег.Контрагент [Контрагент $Справочник.Контрагенты],
	|					 $Рег.ПрихДокумент [ПрихДокумент $Документ],
	|					 Журн.IDDOCDEF [ПрихДокумент_вид $ВидДокумента],
	|					 $Рег.Статус [Статус],
	|					 $Рег.Партия [Партия $Справочник.Партии],
	|					 $Рег.Стоимость Стоимость,
	|					 $Рег.ПродСтоимость ПродСтоимость,
	|					 $Рег.НДС НДС,
	|					 $Рег.ОстатокТовара ОстатокТовара,
	|                    Рег.LINENO_ НомерСтроки
	|			   FROM $Регистр.ПартииТоваров Рег (NOLOCK) 
	|			   INNER JOIN _1sjourn Журн (NOLOCK) ON Журн.IDDOC=RIGHT($Рег.ПрихДокумент,9)
	|			   WHERE $Рег.Товар = :Товар AND Рег.IDDOC=:ТекДок" ;
	
	Если (НСтроки>0) Тогда
		ТекстЗапроса = ТекстЗапроса + " AND Рег.LINENO_ = :НомерСтроки";
		Запрос.УстановитьТекстовыйПараметр("НомерСтроки",НСтроки);
	КонецЕсли;
	
	Запрос.УстановитьТекстовыйПараметр("Товар",Товар);
	Запрос.УстановитьТекстовыйПараметр("ТекДок",Докум.ТекущийДокумент());
	
	табл=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
	
	ОбщКолв=0;
	Стоим=0;
	НДС=0;
	
	Стоим=?(табл.Итог("ОстатокТовара")<>0,табл.Итог(Рекв)/табл.Итог("ОстатокТовара"),0);
	НДС=?(табл.Итог("ОстатокТовара")<>0,табл.Итог("НДС")/табл.Итог("ОстатокТовара"),0);

	//сем\\
	//Если ТипУчета="Упр" Тогда
	//    Стоим=?(ВалРежим=1,Стоим,Пересчет(Стоим,Товар.ВалютаУчета,ДатаКурсаДок(Докум),Рубли,1));
	//    НДС=?(ВалРежим=1,НДС,Пересчет(НДС,Товар.ВалютаУчета,ДатаКурсаДок(Докум),Рубли,1));
	//ИначеЕсли ТипУчета="Фин" Тогда
	//    Стоим=?(ВалРежим=1,Пересчет(Стоим,Рубли,1,Товар.ВалютаУчета,ДатаКурсаДок(Докум)),Стоим);
	//    НДС=?(ВалРежим=1,Пересчет(НДС,Рубли,1,Товар.ВалютаУчета,ДатаКурсаДок(Докум)),НДС);
	//КонецЕсли;
	//сем//
	
	Если Стоим=0 Тогда
		Сообщить(Рекв+" товара "+Товар.Код+" "+СокрП(Товар)+"в документе "+Докум+" не определена!");
	КонецЕсли;
	Если НДС=0 Тогда
		//        Сообщить("НДС товара "+Товар.Код+" "+СокрП(Товар)+"в документе "+Докум+" не определена!");
	КонецЕсли;
	Возврат Стоим;
	
КонецФункции

//Стоимость последнего движения товара по регистру по определенной операции
Функция СтоимостьТовараПоПоследнемуДвижению(Конт,Товар,Склад,ТипУчета,НДС,ВалРежим=0)  Экспорт
	// эта функция возвращает стоимость Товара, определенная последним движением
	// функция работает для ТипаУчета Упр и Фин
	// Если ВалРежим=1 то возврат в валюте учета, если 0, то в БазовойВалюте
	// по умолчанию ВалРежим=0
	// Возвращает 0 если ошибка или товар по документу не проводился
	// в параметр НДС возвращается НДС
	
	Если НЕ((ТипУчета="Упр") ИЛИ (ТипУчета="Фин")) Тогда
		Сообщить("Стоим. товара: ("+Товар.Код+" "+СокрЛП(Товар)+") в документе: ("+Конт.ТекущийДокумент()+") нельзя определить - неверно указан тив учета!");
		Возврат 0;
	КонецЕсли;
	
	Себестоим=0;
	Рег=СоздатьОбъект("Регистр.ПартииТоваров");
	РегОст=СоздатьОбъект("Регистр.ОстаткиТоваров");
	
	ОбщКолв=0;
	Стоим=0;
	НДС=0;       
	
	Найден=0;
	
	РегОст.УстановитьЗначениеФильтра("Товар",Товар,1);
	РегОст.УстановитьЗначениеФильтра("Склад",Склад,1);
	РегОст.УстановитьЗначениеФильтра("Клиент",Конт.Клиент,1);
	РегОст.ОбратныйПорядок(1);
	РегОст.ВыбратьДвижения(Конт.ДатаДок-180,Конт.ТекущийДокумент());
	Пока РегОст.ПолучитьДвижение()=1 Цикл
		Если РегОст.Расход=1 Тогда
			Найден=1;
		КонецЕсли;                
	КонецЦикла;
	
	Если Найден=0 Тогда
		Сообщить("Возможно товар "+Товар.Код+" "+СокрП(Товар)+" никогда не отгружался клиенту!");
		//	   Возврат 0;
	КонецЕсли;
	
	// выберем все движения документа по регистру по складу
	Рег.УстановитьЗначениеФильтра("Товар",Товар,1);
	Рег.УстановитьЗначениеФильтра("Склад",Склад,1);
	Рег.УстановитьЗначениеФильтра("КодОперации",?(Товар.ВидТовара=Перечисление.ВидыТоваров.Блюдо,ПродажаБлюда,ПродажаТовара),1);
	Рег.УстановитьЗначениеФильтра("ФлагУчета",1,1);
	
	Рег.ОбратныйПорядок(1);
	Рег.ВыбратьДвижения(Конт.ДатаДок-180,Конт.ТекущийДокумент());
	Пока Рег.ПолучитьДвижение()=1 Цикл
		Стоим=Рег.Стоимость;
		НДС=Рег.НДС;
		ОбщКолв=Рег.ОстатокТовара;
		Найден=1;
		Прервать;
	КонецЦикла;
	
	//Еще раз, но по всем складам
	Если Найден=0 Тогда
		
		Рег.УстановитьЗначениеФильтра("Товар",Товар,1);
		//		Рег.УстановитьЗначениеФильтра("Склад",Склад,1);
		Рег.УстановитьЗначениеФильтра("КодОперации",?(Товар.ВидТовара=Перечисление.ВидыТоваров.Блюдо,ПродажаБлюда,ПродажаТовара),1);
		Рег.УстановитьЗначениеФильтра("ФлагУчета",1,1);
		
		Рег.ОбратныйПорядок(1);
		Рег.ВыбратьДвижения(Конт.ДатаДок-180,Конт.ТекущийДокумент());
		Пока Рег.ПолучитьДвижение()=1 Цикл

			Стоим=Рег.Стоимость;
			НДС=Рег.НДС;
			ОбщКолв=Рег.ОстатокТовара;
			Найден=1;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Стоим=?(ОбщКолв<>0,Стоим/ОбщКолв,0);
	НДС=?(ОбщКолв<>0,НДС/ОбщКолв,0);
	Если ТипУчета="Упр" Тогда
		Стоим=?(ВалРежим=1,Стоим,Пересчет(Стоим,Товар.ВалютаУчета,ДатаКурсаДок(Конт.ТекущийДокумент()),Рубли,1));
		НДС=?(ВалРежим=1,НДС,Пересчет(НДС,Товар.ВалютаУчета,ДатаКурсаДок(Конт.ТекущийДокумент()),Рубли,1));
	ИначеЕсли ТипУчета="Фин" Тогда
		Стоим=?(ВалРежим=1,Пересчет(Стоим,Рубли,1,Товар.ВалютаУчета,ДатаКурсаДок(Конт.ТекущийДокумент())),Стоим);
		НДС=?(ВалРежим=1,Пересчет(НДС,Рубли,1,Товар.ВалютаУчета,ДатаКурсаДок(Конт.ТекущийДокумент())),НДС);
	КонецЕсли;
	
	Если Стоим=0 Тогда
		Сообщить("Стоим товара "+Товар.Код+" "+СокрП(Товар)+"в документе "+Конт.ТекущийДокумент()+" не определена!");
	КонецЕсли;
	
	
	Если (НДС=0) И (Конт.ГрупповаяОбработка()=0) Тогда
		//        Сообщить("НДС товара "+Товар.Код+" "+СокрП(Товар)+"в документе "+Конт.ТекущийДокумент()+" не определена!");
	КонецЕсли;
	
	Возврат Стоим;
	
КонецФункции

//---------------------------------------------
//Функция СуммаПрописью(Конт,Режим) Экспорт
//    Если ФС.СуществуетФайл(КаталогБазыДанных()+Конт.Валюта.ИмяФайлаПрописи)=1 Тогда
//        Пропись(Конт.Валюта.ИмяФайлаПрописи);
//        //Иначе
//        //    Стр="Для валюты "+Конт.Валюта+" отсутствует файл прописей "+ИмяФайлаПрописей;
//        //    Предупреждение(Стр);
//        //    Возврат "";
//    КонецЕсли;
//    Если Режим="Итог" Тогда
//        СтрокаСуммы=Формат(Конт.Итог("Сумма"),"ЧПДС");
//    Иначе
//        СтрокаСуммы=Формат(Конт.Сумма,"ЧПДС");
//    КонецЕсли;
//    Пропись("");
//    Возврат СтрокаСуммы;
//КонецФункции
//-----------------------------------------------
Функция ЖурналСумма(Конт)  Экспорт
	Док=Конт.ТекущийДокумент;
	Если  Док.Выбран()=1  Тогда
		Возврат ФРМ(Док.Итог("Сумма"),Док.Валюта,1);
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
//---------------------------------------
Функция ПредставлениеРасчСчета(Конт) Экспорт
	Если Конт.РасчетныйСчет.Выбран()=0 Тогда
		Возврат "Выберите расчетный счет!";
	КонецЕсли;
	Возврат "Р/с № "+СокрЛП(Конт.РасчетныйСчет.Номер)+" в "+СокрЛП(Конт.РасчетныйСчет.Банк);
КонецФункции
//---------------------------------------
Процедура УстДефолтРасчСчета(Конт) Экспорт
	Если Конт.Фирма.Выбран()=1 Тогда
		Спр=СоздатьОбъект("Справочник.БанковскиеСчета");
		Спр.ИспользоватьВладельца(Конт.Фирма);
		Спр.ВыбратьЭлементы();
		Спр.ПорядокКодов();
		ЕстьСчет=0;
		Пока Спр.ПолучитьЭлемент()=1  Цикл
			Если Спр.ПометкаУдаления()=1 Тогда
				Продолжить;
			КонецЕсли;
			ЕстьСчет=1;
			Конт.РасчетныйСчет=Спр.ТекущийЭлемент();
			Прервать;
		КонецЦикла;
		Если ЕстьСчет=0 Тогда
			Предупреждение("У выбранной фирмы нет ни одного расчетного счета");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//---------------------------------------
Процедура УстФирмы(Конт) Экспорт
	Фрм=СоздатьОбъект("Справочник.Фирмы");
	Фрм.ИспользоватьДату(Конт.ДатаДок);
	Если Конт.Фирма.Выбран()=1 Тогда
		Фрм.НайтиЭлемент(Конт.Фирма);
	КонецЕсли;
	Если Фрм.Выбрать("Выберите фирму","")>0 Тогда
		Конт.Фирма=Фрм.ТекущийЭлемент();
	КонецЕсли;
	ВидДок=Конт.Вид();
	Если ( ВидДок="ПлатежноеПоручение" ) ИЛИ
	( ВидДок="Счет_фактура" ) ИЛИ
	( ВидДок="СчетФактура" ) ИЛИ
	( ВидДок="РасходныйОрдерТБ" ) ИЛИ
	( ВидДок="ПриходныйОрдерТБ" ) Тогда
		глУстановитьНовыйНомер(Конт,Фрм.ПрефиксНомеровДокументов+"-");
	КонецЕсли;
	Конт.Фирма.ИспользоватьДату(Конт.ДатаДок);
	Если (НазваниеНабораПрав()="Администратор")    ИЛИ (НазваниеНабораПрав()="Менеджер") Тогда
		Если ( ВидДок="РасходнаяНакладная" ) ИЛИ
		( ВидДок="ПриходнаяНакладная" ) ИЛИ
		( ВидДок="РасходнаяРеализатора" ) ИЛИ
		( ВидДок="ПриходнаяРеализатора" ) ИЛИ
		( ВидДок="ОтчетРеализатора" ) ИЛИ
		( ВидДок="ИнвентаризацияРеализатора" ) ИЛИ
		( ВидДок="Счет_фактура" ) ИЛИ
		( ВидДок="РегистрацияСчета_фактуры" ) ИЛИ
		( ВидДок="Списание" ) ИЛИ
		( ВидДок="ВводОстатковРеализации" ) ИЛИ
		( ВидДок="ВводОстатковКредита" ) ИЛИ
		( ВидДок="СписаниеЗадолженности") ИЛИ
		( ВидДок="ВводОстатковТоваров" ) ИЛИ
		( ВидДок="ПриходныйОрдерТБ" ) ИЛИ
		( ВидДок="РасходныйОрдерТБ" ) ИЛИ
		( ВидДок="ДвиженияДенежныхСредств" ) Тогда
			Если (Константа.МетодРасчетаСебестоимостиУправленческогоУчета.Выбран()=0)
			ИЛИ (Конт.Фирма.МетодРасчетаСебестоимостиФинансовогоУчета.Выбран()=0) Тогда
				//Конт.Форма.Тип.Видимость(0);
				//Конт.Форма.НадписьТипа.Видимость(0);
			Иначе
				//Конт.Форма.Тип.Видимость(1);
				//Конт.Форма.НадписьТипа.Видимость(1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//-----------------------------------------------
Процедура УстРасчСчета(Конт) Экспорт
	Если Конт.Фирма.Выбран()=0 Тогда
		УстФирмы(Конт);
	КонецЕсли;
	Если Конт.Фирма.Выбран()=1 Тогда
		Рсч=СоздатьОбъект("Справочник.БанковскиеСчета");
		Рсч.ИспользоватьВладельца(Конт.Фирма);
		Если Конт.РасчетныйСчет.Выбран()=1 Тогда
			Рсч.НайтиЭлемент(Конт.РасчетныйСчет);
		КонецЕсли;
		Если Рсч.Выбрать("Выберите Р/с","")>0 Тогда
			Конт.РасчетныйСчет=Рсч.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//-----------------------------------------------
Функция КонтрольОстатка(Конт) Экспорт
	
	ОстатокТовара=Регистр.ОстаткиТоваров.СводныйОстаток(Конт.Товар,Конт.Склад,,"ОстатокТовара");
	// проверяем резерв товара
	Если НЕ(семРазрешитьПродаватьРезерв( Конт )=Да) Тогда
		// Вычислим, сколько всего данного товара
		// Вычислим, сколько зарезервировано всего данного товара
		Резерв=Регистр.РезервыТоваров.СводныйОстаток(Конт.Товар,,"РезервТовара");
		РезервПоСчету=0;
		Если Конт.Вид()="РасходнаяНакладная" Тогда
			// Если выписывается накладная на основании Счета
			Если Конт.ДокументОснование.Вид()="Счет" Тогда
				// Вычислим, сколько зарезервировано именно по данному Счету
				РезервПоСчету=Регистр.РезервыТоваров.Остаток(Конт.Товар,Конт.ДокументОснование,"РезервТовара");
			КонецЕсли;
		КонецЕсли;
		
		ПолныйОстаток=Регистр.ОстаткиТоваров.СводныйОстаток(Конт.Товар,,,"ОстатокТовара");
		ОстНед=Регистр.НедоступныеТовары.СводныйОстаток(Конт.Товар,,,,"ОстатокТовара");
		СвободныйРесурс=ПолныйОстаток-Резерв+РезервПоСчету-ОстНед;
		Если СвободныйРесурс<0  Тогда
			// товара не хватает на все зарезервированные Счета
			СвободныйРесурс=0;
		КонецЕсли;
		
		Если СвободныйРесурс<ОстатокТовара Тогда
			ОстатокТовара=СвободныйРесурс;
		КонецЕсли;
	КонецЕсли;
	Если Конт.Коэффициент>0 Тогда
		Возврат ОстатокТовара/Конт.Коэффициент;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции
//-----------------------------------------------
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   
//НП - вообщем никому ненадо.
Процедура Выч_суммы_накл_сНП(Конт,ИзмененаЦенаСНДС = 0,ИзмененаЦена = 0, КатЦен = "") Экспорт
	Если Конт.Товар.Выбран()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если глЕстьРеквизитШапки("КатегорияЦены", Конт.Вид()) = 1 Тогда
		Если ПустоеЗначение(КатЦен)=1 Тогда
			КатЦен = Конт.КатегорияЦены;
		КонецЕсли;
	КонецЕсли;

	Если глЕстьРеквизитМнЧ("СтавкаНДС_Т", Конт.Вид()) = 0 Тогда
		Если глЕстьРеквизитШапки("СтавкаНДС", Конт.Вид()) = 0 Тогда
			ПроцНДС=ПроцентНДС(Конт.Товар.СтавкаНДС);
		Иначе
			ПроцНДС=ПроцентНДС(Конт.СтавкаНДС);
		КонецЕсли;
	Иначе
		Если ПустоеЗначение(Конт.СтавкаНДС_Т)=0 Тогда
			ПроцНДС=ПроцентНДС(Конт.СтавкаНДС_Т);
		Иначе
			ПроцНДС=ПроцентНДС(Конт.СтавкаНДС);
		КонецЕсли;
	КонецЕсли;
	
	//***********************************************************
	//<<Алгоритм Успеха>> (begin)
	// теперь коэффициент есть не везде
	Если глЕстьРеквизитМнЧ("Коэффициент",Конт.Вид())=0 Тогда
		Коэф=1;
		ОбщКолво=Конт.Количество;
	Иначе
		Коэф=Конт.Коэффициент;
		ОбщКолво=Окр(Конт.Количество*Коэф,3);
	КонецЕсли;
	//<<Алгоритм Успеха>> (end) 
	//************************************************************
	
	ВозвратПоставщику=0;
	Если Конт.Вид()="РасходнаяНакладная" Тогда
		Если (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратПоставщику) ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратСХранения) Тогда
			ВозвратПоставщику=1;
		КонецЕсли;
	КонецЕсли;
	
	Если (Конт.Вид()<>"ПриходнаяНакладная") И (Конт.Вид()<>"ПриходнаяРеализатора") Тогда
		Если (глЕстьРеквизитШапки("КатегорияЦены", Конт.Вид()) = 1) И (ВозвратПоставщику=0) Тогда
			Если (КатЦен<>Константа.РозничнаяКатегорияЦены) ИЛИ (КатЦен=Константа.РозничнаяКатегорияЦены2) Тогда
				Если Конт.Товар.НеОкруглятьЦены=0 Тогда
					КоэфОкр = Константа.КоэффОкрРублЦены;
					Если глЕстьРеквизитМнЧ("ВидСкидки",Конт.Вид())=1 Тогда
						Если Найти(Врег(Строка(Конт.ВидСкидки)),"СПЕЦ")>0 Тогда
							КоэфОкр = 5;
						КонецЕсли;
					КонецЕсли;
					Конт.Цена=Окр(Конт.Цена,КоэфОкр,1);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;              
	
	Если глЕстьРеквизитШапки("Клиент", Конт.Вид()) = 1 Тогда
		
		НеРассчитыватьСумму=0;
		Если (Конт.Вид()="ПриходнаяНакладная") ИЛИ (Конт.Вид()="ПриходнаяРеализатора") ИЛИ (Конт.Вид()="ЗаказПоставщику") Тогда
			НеРассчитыватьСумму=1;
		КонецЕсли;
		
		Если (Конт.Вид() = "РасходнаяНакладная") Тогда 
			Если (Найти(Строка(Конт.ПризнакНакладной),"Возврат")>0) Тогда
				//НеРассчитыватьСумму=1;
			КонецЕсли;
		КонецЕсли;
		
		Если Конт.Клиент.флОкруглениеЦен=1 Тогда 
			Цена_=Окр(Конт.Цена*Коэф,Конт.Клиент.ЦеныОкруглятьДо);
			Конт.Сумма = Цена_*Конт.Количество;
			Конт.Цена=Конт.Сумма/(Окр(Конт.Количество*Коэф,5));
		ИначеЕсли НеРассчитыватьСумму=0 Тогда
			Конт.Сумма = Окр(Конт.Цена*ОбщКолво,2);
			Конт.Цена=Конт.Сумма/(ОбщКолво);
		Иначе
			//для приходов не изменяем цену
			Если ИзмененаЦена=1 Тогда
				Конт.Сумма = Конт.Цена*ОбщКолво;
			КонецЕсли;
		КонецЕсли;                                                
	КонецЕсли;

	Если (глЕстьРеквизитМнЧ("ЦенаСНДС", Конт.Вид()) = 1) Тогда
		Если Конт.ЦенаСНДС=0 Тогда
			Конт.ЦенаСНДС = Конт.Цена*(1+ПроцНДС/100);
		КонецЕсли;
	КонецЕсли;

	Если (глЕстьРеквизитМнЧ("ЦенаСНДС", Конт.Вид()) = 1) и (ИзмененаЦенаСНДС = 0) Тогда
		Конт.ЦенаСНДС = Конт.Цена*(1+ПроцНДС/100);
	КонецЕсли;	        
	
	Если глЕстьРеквизитШапки("КатегорияЦены", Конт.Вид()) = 1 Тогда
		Если (КатЦен=Константа.РозничнаяКатегорияЦены) ИЛИ (КатЦен=Константа.РозничнаяКатегорияЦены2) ИЛИ (Конт.Вид()="Списание") Тогда
			Конт.ЦенаСНДС=Окр(Конт.ЦенаСНДС,2,1);
			Конт.Цена=Конт.ЦенаСНДС/(1+ПроцНДС/100);
			Конт.Сумма=Конт.Цена*ОбщКолво;
		КонецЕсли;
	КонецЕсли;
	
	Если ((Конт.Вид() = "ПриходнаяНакладная") ИЛИ (Конт.Вид() = "ПриходнаяРеализатора") ИЛИ (Конт.Вид() = "ВводОстатковТоваров")) Тогда
		Если Конт.ПриходБезНДС=1 Тогда
			Конт.НДС = 0;
		Иначе
			Конт.НДС = Конт.Сумма*ПроцНДС/100;
		КонецЕсли;
	ИначеЕсли ВозвратПоставщику=0 Тогда
		Конт.НДС = Конт.Сумма*ПроцНДС/100;
	Иначе
		Конт.НДС = Конт.Сумма*ПроцНДС/100;
	КонецЕсли; 
	
	//т.к. в эл. заявке НДС имеет 2 знака после запятой округлим и здесь
	//иначе появляется разница за счет округления
	//Конт.НДС = Окр(Конт.НДС,2,1);
	
	Если (глЕстьРеквизитМнЧ("Скидка", Конт.Вид()) = 1) Тогда                                    
		Конт.Скидка    = ЦенаТовараПоКатегории(Конт,КатЦен,1)*ОбщКолво - Конт.Сумма;
		//Конт.Скидка    = Окр( ЦенаТовараПоКатегории( Конт, Конт.КатегорияЦены ,1 ), 2, 1 ) * ОбщКолво - Конт.Сумма;
	КонецЕсли;
	
	Если (глЕстьРеквизитМнЧ("Скидка", Конт.Вид()) = 1) и ((ИзмененаЦена = 1) или (ИзмененаЦенаСНДС = 1)) Тогда
		//Конт.Скидка    = ЦенаТовараПоКатегории(Конт,Конт.КатегорияЦены,1)*Конт.Количество*Конт.Коэффициент - Конт.Сумма;
		Если Конт.Скидка<>0 Тогда
			Конт.ВидСкидки = Перечисление.ВидСкидки.Документ;
		КонецЕсли;
	КонецЕсли;
	
	Если (глЕстьРеквизитМнЧ("Скидка", Конт.Вид()) = 1) и ((ИзмененаЦена = 1) или (ИзмененаЦенаСНДС = 1)) Тогда
		Конт.Скидка    = ЦенаТовараПоКатегории(Конт,КатЦен,1)*ОбщКолво - Конт.Сумма;
		//Конт.Скидка    = Окр( ЦенаТовараПоКатегории( Конт, Конт.КатегорияЦены ,1 ), 2, 1 ) * ОбщКолво - Конт.Сумма;
		Конт.ВидСкидки = Перечисление.ВидСкидки.Документ; 
	КонецЕсли;
	
	Если глЕстьРеквизитШапки("КатегорияЦены", Конт.Вид()) = 1 Тогда
		Если (КатЦен=Константа.РозничнаяКатегорияЦены) ИЛИ (КатЦен=Константа.РозничнаяКатегорияЦены2) Тогда
			ЦенаКат=ЦенаТовараПоКатегории(Конт,КатЦен,1);
			ЦенаКат=ЦенаКат+ЦенаКат*(ПроцНДС/100);
			Попытка
				Конт.Скидка=(Окр(ЦенаКат,2)*ОбщКолво - Конт.ЦенаСНДС*ОбщКолво)/(1+ПроцНДС/100);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если глЕстьРеквизитМнЧ("Всего", Конт.Вид()) = 1 Тогда
		Конт.Всего = Конт.Сумма + Конт.НДС;
		Если (глЕстьРеквизитШапки("КатегорияЦены", Конт.Вид()) = 1) Тогда
			Если (КатЦен=Константа.РозничнаяКатегорияЦены) ИЛИ (КатЦен=Константа.РозничнаяКатегорияЦены2) Тогда
				Конт.ЦенаСНДС=Конт.Всего/ОбщКолво;
				Конт.Цена=Конт.ЦенаСНДС/(1+ПроцНДС/100);
				Конт.Сумма=Конт.Всего-Конт.НДС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	                                               
КонецПроцедуры                                             

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
Процедура Выч_суммы_накл(Конт,ИзмененаЦенаСНДС = 0,ИзмененаЦена=0,КатЦен="") Экспорт
	Если Конт.Товар.Выбран()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если глЕстьРеквизитШапки("КатегорияЦены", Конт.Вид()) = 1 Тогда
		Если ПустоеЗначение(КатЦен)=1 Тогда
			КатЦен = Конт.КатегорияЦены;
		КонецЕсли;
	КонецЕсли;
	
	// получение даты, на которую необходимо получить цену \\
	Если глЕстьРеквизитШапки("ДатаПоставки",Конт.Вид()) = 1 Тогда
		ДатаЦены = Конт.ДатаПоставки;
		Если Число(ДатаЦены) = 0 Тогда
			ДатаЦены = Конт.ДатаДок;
		КонецЕсли;
	Иначе
		ДатаЦены = Конт.ДатаДок;
	КонецЕсли;
	
	Если Конт.Вид()="СличительнаяВедомость" Тогда
		Конт.СуммаКнижная=Конт.КоличествоКнижное*Конт.Коэффициент*Конт.Цена;
		Конт.СуммаФактическая=Конт.КоличествоФактическое*Конт.Коэффициент*Конт.Цена;
		Конт.КоличествоРазницы=Конт.КоличествоФактическое-Конт.КоличествоКнижное;
		Конт.СуммаРазницы=Конт.КоличествоРазницы*Конт.Коэффициент*Конт.Цена;
	Иначе               
		//***********************************************************
		//<<Алгоритм Успеха>> (begin)
		// теперь коэффициент есть не везде
		Если глЕстьРеквизитМнЧ("Коэффициент",Конт.Вид())=0 Тогда
			Коэф=1;
			ОбщКолво=Конт.Количество;
		Иначе
			Коэф=Конт.Коэффициент;
			ОбщКолво=Окр(Конт.Количество*Коэф,3);
		КонецЕсли;
		//<<Алгоритм Успеха>> (end) 
		//************************************************************
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Если глЕстьРеквизитШапки("СтавкаНДС", Конт.Вид()) = 0 Тогда
			ПроцНДС=ПроцентНДС(Конт.Товар.СтавкаНДС);
		Иначе
			ПроцНДС=ПроцентНДС(Конт.СтавкаНДС);
		КонецЕсли;  
		
		Если (глЕстьРеквизитМнЧ("ЦенаСНДС", Конт.Вид()) = 1) Тогда
			Если Конт.ЦенаСНДС=0 Тогда
				Конт.ЦенаСНДС = Конт.Цена*(1+ПроцНДС/100);
			КонецЕсли;
		КонецЕсли;
		
		Если (глЕстьРеквизитМнЧ("ЦенаСНДС", Конт.Вид()) = 1) и (ИзмененаЦенаСНДС = 0) Тогда
			Конт.ЦенаСНДС = Конт.Цена*(1+ПроцНДС/100);
		КонецЕсли;	        
		
		ВозвратПоставщику=0;
		Если Конт.Вид()="РасходнаяНакладная" Тогда
			Если (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратПоставщику) ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратСХранения) Тогда
				ВозвратПоставщику=1;
			КонецЕсли;
		КонецЕсли;
		
		Если (Конт.Вид()<>"ПриходнаяНакладная") И (Конт.Вид()<>"ПриходнаяРеализатора") Тогда
			Если (глЕстьРеквизитШапки("КатегорияЦены", Конт.Вид()) = 1) И (ВозвратПоставщику=0) Тогда
				Если (КатЦен<>Константа.РозничнаяКатегорияЦены) ИЛИ (КатЦен=Константа.РозничнаяКатегорияЦены2) Тогда
					Если Конт.Товар.НеОкруглятьЦены=0 Тогда
						КоэфОкр = Константа.КоэффОкрРублЦены;
						Если глЕстьРеквизитМнЧ("ВидСкидки",Конт.Вид())=1 Тогда
							Если Найти(Врег(Строка(Конт.ВидСкидки)),"СПЕЦ")>0 Тогда
								КоэфОкр = 5;
							КонецЕсли;
						КонецЕсли;
						Конт.Цена=Окр(Конт.Цена,КоэфОкр,1);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//		Если глЕстьРеквизитШапки("КатегорияЦены", Конт.Вид()) = 1 Тогда

		Попытка
			Конт.Сумма = Окр(Конт.Цена*ОбщКолво,2);
		Исключение
		КонецПопытки;		
//		Конт.Цена=?(ОбщКолво=0,0,Конт.Сумма/(ОбщКолво));
		Если Конт.Вид()<>"ЗаказПоставщику" Тогда
			Если глЕстьРеквизитШапки("Клиент", Конт.Вид())=1 Тогда
				Если Конт.Клиент.флОкруглениеЦен=1 Тогда   //Особый способ округления
					Цена_=Окр(Конт.Цена*Коэф,Конт.Клиент.ЦеныОкруглятьДо);
					Конт.Сумма = Окр(Цена_*Конт.Количество,2);
					Конт.Цена=Конт.Сумма/(ОбщКолво);
				КонецЕсли;                                                
			КонецЕсли;
		КонецЕсли;
		
		//		КонецЕсли;
		
		Если глЕстьРеквизитШапки("КатегорияЦены", Конт.Вид()) = 1 Тогда
			Если (КатЦен=Константа.РозничнаяКатегорияЦены) ИЛИ (КатЦен=Константа.РозничнаяКатегорияЦены2) ИЛИ (Конт.Вид()="Списание") Тогда
				Конт.ЦенаСНДС=Окр(Конт.ЦенаСНДС,2,1);
				Конт.Цена=Конт.ЦенаСНДС/(1+ПроцНДС/100);
				Конт.Сумма=Конт.Цена*ОбщКолво;
			КонецЕсли;
		КонецЕсли;

		Если (глЕстьРеквизитМнЧ("НДС", Конт.Вид()) = 1) Тогда
			Если ((Конт.Вид() = "ПриходнаяНакладная") или (Конт.Вид() = "ВводОстатковТоваров")) Тогда
				Если Конт.ПриходБезНДС=1 Тогда
					Конт.НДС = 0;
				Иначе
					Конт.НДС = Конт.Сумма*ПроцНДС/100;
				КонецЕсли;
			ИначеЕсли ВозвратПоставщику=0 Тогда
				Конт.НДС = Конт.Сумма*ПроцНДС/100;
			Иначе
				Конт.НДС = Конт.Сумма*ПроцНДС/100;
			КонецЕсли; 
		КонецЕсли;
			
		Если (глЕстьРеквизитМнЧ("Скидка", Конт.Вид()) = 1) Тогда
			Конт.Скидка    = ЦенаТовараПоКатегории(Конт,КатЦен,1,ДатаЦены)*ОбщКолво - Конт.Сумма;
			
			Если Конт.Вид()="Счет" Тогда
				Если (Конт.ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаНаВозврат) И (Конт.Клиент.ВидКлиента = Перечисление.ВидыКлиентов.Поставщик) Тогда
					Конт.Скидка = 0;
				КонецЕсли;
			КонецЕсли;
			
			//Конт.Скидка    = Окр( ЦенаТовараПоКатегории(Конт,Конт.КатегорияЦены,1), 2, 1 ) * ОбщКолво - Конт.Сумма;
		КонецЕсли;
		
		Если (глЕстьРеквизитМнЧ("Скидка", Конт.Вид()) = 1) и ((ИзмененаЦена = 1) или (ИзмененаЦенаСНДС = 1)) Тогда
			//			Конт.Скидка    = ЦенаТовараПоКатегории(Конт,Конт.КатегорияЦены,1)*Конт.Количество*Конт.Коэффициент - Конт.Сумма;
			Если Конт.Скидка<>0 Тогда
				Конт.ВидСкидки = Перечисление.ВидСкидки.Документ;
			Иначе
				Конт.ВидСкидки = "";
			КонецЕсли;
				
		КонецЕсли;
		
		Если глЕстьРеквизитМнЧ("Всего", Конт.Вид()) = 1 Тогда   
			//**********Завьялов А.*********
			//Исправление в округлении, точнее в отсутствии всякого округления
			Конт.Всего = Окр(Конт.Сумма + Конт.НДС,2,1);
			//	Конт.Всего = Конт.Сумма + Конт.НДС;
			Если глЕстьРеквизитШапки("КатегорияЦены", Конт.Вид()) = 1 Тогда
				Если (КатЦен=Константа.РозничнаяКатегорияЦены) ИЛИ (КатЦен=Константа.РозничнаяКатегорияЦены2) Тогда
					Конт.ЦенаСНДС=?(ОбщКолво=0,0,Конт.Всего/ОбщКолво);
					Конт.Цена=Конт.ЦенаСНДС/(1+ПроцНДС/100);
					Конт.Сумма=Конт.Всего-Конт.НДС;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	КонецЕсли;
КонецПроцедуры
//-----------------------------------------------
Процедура ИзмЕдин(Конт,Реж=0) Экспорт
	Конт.Коэффициент=Конт.Единица.Коэффициент;
	
	Если Реж=1 Тогда
		Возврат;
	КонецЕсли;
	
	//Конт.Количество = Конт.Количество/Конт.Коэффициент
	
	Если ((Конт.Вид()="РасходнаяНакладная") ИЛИ (Конт.Вид()="ПриходнаяНакладная")) Тогда
		Если глЕстьРеквизитМнЧ("Счет",Конт.Вид())=1 Тогда
			КатЦен = Конт.Счет.КатегорияЦены;
		Иначе
			КатЦен = Конт.КатегорияЦены;
		КонецЕсли;

		Выч_суммы_накл_сНП(Конт,,,КатЦен);
	ИначеЕсли Конт.Вид()="МарочныйОтчет" Тогда
		Если Конт.ИспользоватьНП=Перечисление.Булево.Нет Тогда
			Выч_суммы_накл(Конт);
		Иначе
			Выч_суммы_накл_сНП(Конт);
		КонецЕсли;
	ИначеЕсли (Конт.Вид()="ПеремещениеНаСкладГотовойПродукции") Тогда
	Иначе
		Выч_суммы_накл(Конт);
	КонецЕсли;
КонецПроцедуры
//-----------------------------------------------
Функция УстСклада(Конт,Реж="") Экспорт
	
	СписокСкладов=СоздатьОбъект("СписокЗначений");
	Скл=СоздатьОбъект("Справочник.МестаХранения");
	Если (Конт.Вид()="Счет") ИЛИ (Конт.Вид()="ИзмЭлЗаявку") Тогда
		ТекстЗапроса="SELECT ID [Склад $Справочник.МестаХранения]
		|			  FROM $Справочник.МестаХранения Спр (NOLOCK)
		|			  WHERE $Спр."+?(Конт.ВидЗаявки = Перечисление.ВидыЗаявок.СпецЗаказ,"ДляКомплектацииСпецЗаказа","ДляКомплектации")+"=1
		|";
		
		Запрос=СоздатьОбъект("ODBCRecordSet");
		Запрос.ВыполнитьИнструкцию(ТекстЗапроса,СписокСкладов);
		
		ВыбСклад=Конт.Склад;
		Если СписокСкладов.ВыбратьЗначение(ВыбСклад,"Выберите склад",,,0)=1 Тогда
			
			//запрет на смену склада - во избежании мухлевания со скидками
			Если (ВыбСклад.ТипСклада <> Конт.Склад.ТипСклада) И (Конт.КоличествоСтрок()>0)  Тогда
				
				Конт.СкидкаНакл=0;
				Конт.ВыбратьСтроки();
				Пока Конт.ПолучитьСтроку() = 1 Цикл
					Конт.ВидСкидки = "";
					УстанЦеныРасх(Конт,"Подбор",0);
					Выч_суммы_накл(Конт);
				КонецЦикла;

				Сообщить(Шаблон("При смене типа склада <[Конт.Склад.ТипСклада]> на <[ВыбСклад.ТипСклада]> все скидки, которые были установлены вручную были сброшены. Проверьте цены!"));
				
//				Сообщить(Шаблон("Нельзя менять тип склада <[Конт.Склад.ТипСклада]> на <[ВыбСклад.ТипСклада]> при заполненном документе. Удалите все строки!"));
//				Возврат Конт.Склад;
			КонецЕсли;
			Если Реж="Вернуть" Тогда
				Возврат ВыбСклад;
			Иначе
				Конт.Склад=ВыбСклад;
				Конт.МестоКомплектации=ВыбСклад.МестоКомплектации;
				Конт.ВидОплаты=?(ВыбСклад.СкладОтвХранения=1,2,Конт.ВидОплаты);
			КонецЕсли;
			
			Если глЕстьРеквизитШапки("СтавкаНДС",Конт.Вид())=1 Тогда
				
				Если ВыбСклад.СкладОтвХранения=1 Тогда
				    Если ПроцентНДС(Конт.СтавкаНДС)>0 Тогда
				        Конт.СтавкаНДС = семПолучитьСтавкуНДС(Конт.Клиент,Конт);
						ПриИзмененииСтавкиНДС(Конт);
					КонецЕсли;                         
				Иначе
					Если ПроцентНДС(Конт.СтавкаНДС)=0 Тогда
				        Конт.СтавкаНДС = семПолучитьСтавкуНДС(Конт.Клиент,Конт);
						ПриИзмененииСтавкиНДС(Конт);
					КонецЕсли;                         
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Скл.ИспользоватьДату(Конт.ДатаДок);
		Если Конт.Склад.Выбран()=1 Тогда
			Скл.НайтиЭлемент(Конт.Склад);
		КонецЕсли;
		Если Скл.Выбрать("Выберите Склад","")>0 Тогда
			Если Реж="Вернуть" Тогда
				Возврат Скл.ТекущийЭлемент();
			Иначе
				Конт.Склад=Скл.ТекущийЭлемент();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

//-----------------------------------------------
Функция УстСкладаТаб(Конт) Экспорт
	
	СписокСкладов=СоздатьОбъект("СписокЗначений");
	Скл=СоздатьОбъект("Справочник.МестаХранения");
	Если (Конт.Вид()="СчетОбщий")  Тогда
		ТекстЗапроса="SELECT ID [Склад $Справочник.МестаХранения]
		|			  FROM $Справочник.МестаХранения Спр (NOLOCK)
		|			  WHERE $Спр.ДляКомплектации=1
		|";
		
		Запрос=СоздатьОбъект("ODBCRecordSet");
		Запрос.ВыполнитьИнструкцию(ТекстЗапроса,СписокСкладов);
		
		ВыбСклад=Конт.СкладТаб;
		Если СписокСкладов.ВыбратьЗначение(ВыбСклад,"Выберите склад",,,0)=1 Тогда
			
			//запрет на смену склада - во избежании мухлевания со скидками
			Если (ВыбСклад.ТипСклада <> Конт.СкладТаб.ТипСклада) Тогда
				
				Конт.ВидСкидки = "";
				УстанЦеныРасх(Конт,"Подбор",0);
				Выч_суммы_накл(Конт);

				Сообщить(Шаблон("При смене типа склада <[Конт.СкладТаб.ТипСклада]> на <[ВыбСклад.ТипСклада]> все скидки, которые были установлены вручную были сброшены. Проверьте цену!"));
				
			КонецЕсли;

			Возврат ВыбСклад;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

//-----------------------------------------------
// Удалить все строки данного документа
Процедура УдалитьСтрокиДокумента(Конт) Экспорт
	Пока Конт.КоличествоСтрок()>0 Цикл
		Конт.ВыбратьСтроки();
		Пока Конт.ПолучитьСтроку()>0 Цикл
			Конт.УдалитьСтроку();
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры
//-----------------------------------------------
Процедура УстановкаЕдиницыИзмерения(Конт) Экспорт
	// устанавливаем единицу измерения 
	Если глЕстьРеквизитМнЧ("Единица",Конт.Вид())=0 Тогда
		Возврат;
	КонецЕсли;
	Если Конт.Товар.Выбран()=0 Тогда
		Возврат;
	КонецЕсли;
	Спр=СоздатьОбъект("Справочник.Единицы");
	Спр.ИспользоватьВладельца(Конт.Товар);
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()=1 Цикл
		Если Спр.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;
		Если Спр.Единица=Конт.Товар.БазоваяЕдиницаИзмерения Тогда
			// если базовая единица уже прописана в Справочнике "Единицы"
			Конт.Единица=Спр.ТекущийЭлемент();
			Конт.Коэффициент=Спр.Коэффициент;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	// если базовая единица еще не  прописана в Справочнике "Единицы"
	глСоздатьНовыйОбъект(Спр);
	Спр.Единица=Конт.Товар.БазоваяЕдиницаИзмерения;
	Спр.Коэффициент=1;
	Спр.Наименование=Строка(Конт.Товар.БазоваяЕдиницаИзмерения);
	//Закомментировано Инсталлятором МОД:Спр.Записать();
	//Начало текста, вставленного Инсталлятором МОД
	ОбъектЗаписать(Спр, );
	//Конец текста, вставленного Инсталлятором МОД
	
	Конт.Единица=Спр.ТекущийЭлемент();
	Конт.Коэффициент=1;
КонецПроцедуры
//-----------------------------------------------
Процедура УстанЦены(Конт,ВалютаТовара,ИзмЕд=1,КатЦен="") Экспорт
	Если глЕстьРеквизитШапки("Валюта", Конт.Вид()) = 1 Тогда
		ПромВал=Конт.Валюта;
		Дата_Курса=Конт.Дата_Курса;
		Курс=Конт.Курс;
	Иначе     
		ПромВал=Константа.БазоваяВалюта;
		Дата_Курса=Конт.ДатаДок;
		Курс=1;
	КонецЕсли;   
	
	Если глЕстьРеквизитШапки("КатегорияЦены", Конт.Вид()) = 1 Тогда
		Если ПустоеЗначение(КатЦен)=1 Тогда
			КатЦен = Конт.КатегорияЦены;
		КонецЕсли;
	КонецЕсли;
	
	Конт.Цена=Пересчет(Конт.Цена,ВалютаТовара,Дата_курса,ПромВал,Курс);

	Если глЕстьРеквизитМнЧ("РознЦена",Конт.Вид()) = 1 Тогда
		Конт.РознЦена = ЦенаТовараПоКатегории(Конт,КатЦен,1);
		
		Если Конт.Вид()="Счет" Тогда
			Если (Конт.ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаНаВозврат) И (Конт.Клиент.ВидКлиента = Перечисление.ВидыКлиентов.Поставщик) Тогда
				Конт.РознЦена = Конт.Цена;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	Если  ПромВал=Рубли  Тогда
		// если накладная рублевая, то округляем   
		Если глЕстьРеквизитШапки("КатегорияЦены", Конт.Вид()) = 1 Тогда
			Если (КатЦен=Константа.РозничнаяКатегорияЦены) ИЛИ (КатЦен=Константа.РозничнаяКатегорияЦены2) Тогда
			Иначе
				
				Конт.Цена=Окр(Конт.Цена,Константа.КоэффОкрРублЦены);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	Если Конт.Количество=0 Тогда
		Конт.Количество=1;
	КонецЕсли;
	
	Если ИзмЕд=1 Тогда
		УстановкаЕдиницыИзмерения(Конт);
	КонецЕсли;
	
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Если Конт.Вид()="Счет" Тогда                  
		//пропускаем скидку, Если выписывается на филиал Тогда
		Если (Конт.КлиентФилиала<>Конт.Клиент) И (ПустоеЗначение(Конт.КлиентФилиала)=0) Тогда
			//пропускаем
			//PR 22.10.13 не пропускаем - нужны и цены и скидки 
			
			
			Если глЕстьРеквизитМнЧ("Скидка", Конт.Вид()) = 1 Тогда
				ЦенаСкидка     = Конт.Цена;
				Конт.ВидСкидки = ЦенаСоСкидкой(Конт,ЦенаСкидка,,,КатЦен);
				//		ЦенаСкидка     = Окр(ЦенаСкидка,2,1);
				Конт.Скидка    = Конт.Цена - ЦенаСкидка;
				Конт.Цена      = ЦенаСкидка;
			КонецЕсли;      
			
		Иначе
			Если глЕстьРеквизитМнЧ("Скидка", Конт.Вид()) = 1 Тогда
				ЦенаСкидка     = Конт.Цена;
				Конт.ВидСкидки = ЦенаСоСкидкой(Конт,ЦенаСкидка,,,КатЦен);
				//		ЦенаСкидка     = Окр(ЦенаСкидка,2,1);
				Конт.Скидка    = Конт.Цена - ЦенаСкидка;
				Конт.Цена      = ЦенаСкидка;
			КонецЕсли;      
		КонецЕсли;
	Иначе
		Если глЕстьРеквизитМнЧ("Скидка", Конт.Вид()) = 1 Тогда
			ЦенаСкидка     = Конт.Цена;
			Конт.ВидСкидки = ЦенаСоСкидкой(Конт,ЦенаСкидка,,,КатЦен);
			//		ЦенаСкидка     = Окр(ЦенаСкидка,2,1);
			Конт.Скидка    = Конт.Цена - ЦенаСкидка;
			Конт.Цена      = ЦенаСкидка;
		КонецЕсли;      
	КонецЕсли;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	Если Конт.Склад.СкладОтвХранения=1 Тогда
		//заполняем ценами из остатков по документу
		Запрос=СоздатьОбъект("ODBCRecordSet");
		ТекстЗапроса="SELECT TOP 1 РегОст.ПрихДокумент [ПрихДокумент $Документ]
		|					, РегОст.ОстатокТовараОстаток Ост
		|					, РегОст.СтоимостьОстаток Сто
		|					, РегОст.СтоимостьОстаток/РегОст.ОстатокТовараОстаток Цена
		|			  FROM $РегистрОстатки.ПартииТоваров("+?(Конт.СравнитьТА()=-1,":Кон~","")+",,
		|												(Склад = :ВыбСклад)	AND (Товар = :ВыбТовар),
		|												ПрихДокумент,
		|												(ОстатокТовара, Стоимость)) AS РегОст
		|			  INNER JOIN _1sjourn Журн (NOLOCK) ON Журн.IDDOC=RIGHT(РегОст.ПрихДокумент,9)
		|			  WHERE РегОст.ОстатокТовараОстаток>0
		|			  ORDER BY Журн.DATE_TIME_IDDOC
		|";
		
		Запрос.УстановитьТекстовыйПараметр("ВыбСклад",Конт.Склад);
		Запрос.УстановитьТекстовыйПараметр("ВыбТовар",Конт.Товар);
		
		Если Конт.СравнитьТА()=-1 Тогда
			Запрос.УстановитьТекстовыйПараметр("Кон",СформироватьПозициюДокумента(Конт.ТекущийДокумент(),-1));
		КонецЕсли;
		
		Табл=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
		Если Табл.КоличествоСтрок()=0 Тогда
			Конт.Цена=0;
			Сообщить("Для товара "+Конт.Товар.Код+""+Конт.Товар+" не определена стоимость Отв. хранения!");
		Иначе
			Табл.ПолучитьСтрокуПоНомеру(1);
			Конт.Цена=Табл.Цена;
		КонецЕсли;
		
		Конт.ВидСкидки = "";
		Конт.Скидка    = 0;
	КонецЕсли;
	
	Выч_суммы_накл(Конт,,,КатЦен);
	
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ПроставлениеКодаТовара(Конт);
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
КонецПроцедуры
//-----------------------------------------------
Процедура УстанЦеныРасх(Конт,Режим="Обычный",ИзмЕд=1,КатЦен="") Экспорт
	Если Конт.Товар.Выбран()=0 Тогда
		Возврат;
	КонецЕсли;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	//***********************************************************
	//<<Алгоритм Успеха>> (begin)
	//

	Если ПустоеЗначение(КатЦен)=1 Тогда
		КатЦен=?(глЕстьРеквизитШапки("КатегорияЦены",Конт.Вид())=1,Конт.КатегорияЦены,Константа.РозничнаяКатегорияЦены);
	КонецЕсли;

	//<<Алгоритм Успеха>> (end) 
	//************************************************************
	
	// получение даты, на которую необходимо получить цену \\
	Если глЕстьРеквизитШапки("ДатаПоставки",Конт.Вид()) = 1 Тогда
		ДатаЦены = Конт.ДатаПоставки;
		Если Число(ДатаЦены) = 0 Тогда
			ДатаЦены = Конт.ДатаДок;
		КонецЕсли;
	Иначе
		ДатаЦены = Конт.ДатаДок;
	КонецЕсли;
	// получение даты, на которую необходимо получить цену //

	СпрЦены = ЦенаТовараПоКатегории(Конт,КатЦен);
	Если ТипЗначенияСтр(СпрЦены) = "Справочник" Тогда
		Конт.Цена     = Окр(СпрЦены.Цена.Получить(ДатаЦены),СпрЦены.КатегорияЦены.Точность)/?(СпрЦены.Единица.Коэффициент = 0,1,СпрЦены.Единица.Коэффициент);
		ВалютаТовара  = СпрЦены.Валюта;
	Иначе
		Конт.Цена     = 0;
		ВалютаТовара  = Константа.БазоваяВалюта;
	КонецЕсли;

	//пытаемся для заявок на возврат поставщику вытащить закупочные цены из карточки 	
	Если Конт.Вид()="Счет" Тогда
		Если (Конт.ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаНаВозврат) И (Конт.Клиент.ВидКлиента = Перечисление.ВидыКлиентов.Поставщик) Тогда
			КатЦен=Константа.ОсновнаяКатегорияЦеныЗакупки;
			ВалютаТовара=Конт.Товар.ВалютаПоставщика;
			ЦенаПоставщика=Конт.Товар.ЦенаПоставщика.Получить(ДатаЦены);
			Конт.Цена = ЦенаПоставщика;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		//		Если Конт.КатегорияЦены = Константа.РозничнаяКатегорияЦены Тогда
		//			Конт.РознЦена = Конт.Цена;
		//		Иначе
		//Конт.РознЦена = ЦенаТовараПоКатегории(Конт,Конт.КатегорияЦены,1);
		//		КонецЕсли;
	Исключение
	КонецПопытки;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	УстанЦены(Конт,ВалютаТовара,ИзмЕд,КатЦен);
КонецПроцедуры
//-----------------------------------------------
Процедура УстанЦеныПрих(Конт) Экспорт
	Если Конт.Товар.Выбран()=0 Тогда
		Возврат;
	КонецЕсли;
	//    Конт.Цена=Пересчет(Конт.Товар.ЦенаПриобретения,Конт.Товар.ВалютаЗакупки,КурсДляВалюты(Конт.Товар.ВалютаЗакупки,Конт.ДатаДок),Конт.Валюта,Конт.Курс);
	//ВалютаТовара=Конт.Товар.ВалютаЗакупки;
//	Конт.Цена=Пересчет(Конт.Товар.ЦенаПриобретения,ВалютаТовара,Конт.Дата_курса,Конт.Валюта,Конт.Курс);

	//PR 23.02.11
	Если глЕстьРеквизитМнЧ("ЦенаПредыдущая",Конт.Вид())=1 Тогда
		Конт.ЦенаПредыдущая=Пересчет(Конт.Товар.ЦенаПриобретения,Конт.Товар.ВалютаЗакупки,КурсДляВалюты(Конт.Товар.ВалютаЗакупки,Конт.ДатаДок),Конт.Валюта,Конт.Курс);
	КонецЕсли;
	ВалютаТовара=Конт.Товар.ВалютаПоставщика;
	ЦенаПоставщика=Конт.Товар.ЦенаПоставщика.Получить(Конт.ДатаДок);
	
	Конт.Цена = ЦенаПоставщика;
	
	
//	Конт.Цена=Пересчет(ЦенаПоставщика,ВалютаТовара,Конт.Дата_курса,Конт.Валюта,Конт.Курс);
	
	//PR 06.08.07 Begin  
	//В приходный документ в поле Цена приобретения попадает цена из документа Заказ поставщику 
	Если (ПустоеЗначение(Конт.ДокументОснование)=0) И ((Конт.ДокументОснование.Вид()="ЗаказПоставщику") ИЛИ (Конт.ДокументОснование.Вид()="ОжидаемаяПоставка")) Тогда
		ТТ=СоздатьОбъект("ТаблицаЗначений");
		Конт.ДокументОснование.ВыгрузитьТабличнуюЧасть(тт,"Товар,Цена,ЦенаПодтв");
		рез=0;
		ТТ.НайтиЗначение(Конт.Товар,рез,"Товар");
		Если рез>0 Тогда
			ТТ.ПолучитьСтрокуПоНомеру(рез);
			Если глЕстьРеквизитМнЧ("ЦенаПодтв",Конт.ДокументОснование.Вид())=1 Тогда
				Конт.ЦенаПриобретения=Пересчет(ТТ.ЦенаПодтв,Конт.ДокументОснование.Валюта,Конт.ДокументОснование.ДатаДок,Конт.Валюта,Конт.Курс);
			Иначе
				Конт.ЦенаПриобретения=Пересчет(ТТ.Цена,Конт.ДокументОснование.Валюта,Конт.ДокументОснование.ДатаДок,Конт.Валюта,Конт.Курс);
			КонецЕсли;
		КонецЕсли;      
		
		Если Конт.ЦенаПриобретения=0 Тогда
			Конт.ЦенаПриобретения=Пересчет(Конт.Цена,ВалютаТовара,Конт.Дата_курса,Конт.Валюта,Конт.Курс);
		КонецЕсли;
	Иначе
		//PR 06.08.07 End
		Попытка
			Конт.ЦенаПриобретения=Пересчет(Конт.Цена,ВалютаТовара,Конт.Дата_курса,Конт.Валюта,Конт.Курс);
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	Если глЕстьРеквизитМнЧ("АкцизнаяСтавка",Конт.Вид())=1 Тогда
		Конт.АкцизнаяСтавка=Конт.Товар.АкцизнаяСтавка;
	КонецЕсли;
	
	
	УстанЦены(Конт,ВалютаТовара);
КонецПроцедуры
//-----------------------------------------------
Процедура Устан_Вал(Конт,ДДД,Валюта_Прежн,Курс_Прежн) Экспорт
	// установка даты и курса валюты после смены Валюты или даты курса
	Конт.Дата_курса=ДДД;
	
	ВалютаДокумента=Конт.Валюта;
	Конт.Курс=КурсДляВалюты(ВалютаДокумента,Конт.Дата_курса);
	// Теперь надо пересчитать цены и суммы по строкам спецификации, если они есть
	Если Конт.КоличествоСтрок()>0 Тогда
		Конт.ВыбратьСтроки();
		Пока Конт.ПолучитьСтроку()>0 Цикл
			
			ВалютаТовара=Рубли;
			Если (Конт.Вид()="Счет") ИЛИ
			(Конт.Вид()="РасходнаяНакладная") ИЛИ
			(Конт.Вид()="РасходнаяРеализатора")  Тогда
				элЦена = ЦенаТовараПоКатегории( Конт,Конт.КатегорияЦены);
				Если ПустоеЗначение(элЦена)=0 Тогда
					ВалютаТовара=элЦена.Валюта;
				Иначе
					Сообщить("Для товара: "+Конт.Товар+" не определена цена по категории <"+Конт.КатегорияЦены+">!");
				КонецЕсли;
				//ВалютаТовара=Конт.Товар.ВалютаПродажи;
			Иначе
				Попытка
					ВалютаТовара=Конт.Товар.ВалютаЗакупки;
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			ЦенаНеМенялась = 0;
			Если ВалютаДокумента=Валюта_Прежн Тогда
				// если валюта не менялась (поменялся курс)
				Если ВалютаТовара=ВалютаДокумента Тогда
					// если валюта товара совпадает с валютой накладной
					Конт.Цена=Конт.Цена;    // цена должна остаться прежней не зависимо от курса
					ЦенаНеМенялась = 1;
				ИначеЕсли  ВалютаТовара=Рубли  Тогда
					// если валюта товара не совпадает с валютой накладной, а товар рублевый
					// (это значит при росте курса цена уменьшается)
					// цена пересчитывается через рубли
					Конт.Цена=(Конт.Цена*Курс_Прежн)/Конт.Курс;
				ИначеЕсли  ВалютаДокумента=Рубли  Тогда
					// если валюта товара не совпадает с валютой накладной, а накладная рублевая
					// (товар валютный ,а накладная рублевая)
					// (это значит при росте курса цена растет)
					// цена поднимается в соответствии с ростом курса доллара
					// (т.к. в рублевой накладной у нас указан курс доллара)
					// Здесь есть некоторая натяжка, но так уж сделаем!
					// цена пересчитывается через рубли
					Конт.Цена=(Конт.Цена*Конт.Курс)/Курс_Прежн;
				Иначе
					// если валюта товара не совпадает с валютой накладной, а товар и накладная валютные
					// (товар в одной валюте ,а накладная в другой валюте, но не рубли)
					// цена поднимается в соответствии с ростом курса валюты накладной
					// Здесь есть некоторая натяжка, но так уж сделаем!
					Конт.Цена=(Конт.Цена*Конт.Курс)/Курс_Прежн;
				КонецЕсли;
			Иначе   // Валюта поменялась, но  (курс не менялся)
				Конт.Цена=Пересчет(Конт.Цена,Валюта_Прежн,Курс_Прежн,ВалютаДокумента,Конт.Курс);
				Если глЕстьРеквизитМнЧ("Сумма",Конт.Вид())=1 Тогда
					Конт.Сумма=Пересчет(Конт.Сумма,Валюта_Прежн,Курс_Прежн,ВалютаДокумента,Конт.Курс);
				КонецЕсли;
				
				Если глЕстьРеквизитМнЧ("Всего",Конт.Вид())=1 Тогда
					Конт.Всего=Пересчет(Конт.Всего,Валюта_Прежн,Курс_Прежн,ВалютаДокумента,Конт.Курс);
				КонецЕсли;
				
				Если глЕстьРеквизитМнЧ("НДС",Конт.Вид())=1 Тогда
					Конт.НДС=Пересчет(Конт.НДС,Валюта_Прежн,Курс_Прежн,ВалютаДокумента,Конт.Курс);
				КонецЕсли;
				
			КонецЕсли;
			// для рублей цену округляем
			//сем\\
			//Если ВалютаДокумента=Рубли Тогда
			//    Конт.Цена=Окр(Конт.Цена,Константа.КоэффОкрРублЦены);
			//КонецЕсли;
			//сем//
			// пересчитываем сумму по товару
			Если ((Конт.Вид()="РасходнаяНакладная") ИЛИ (Конт.Вид()="ПриходнаяНакладная") ИЛИ (Конт.Вид()="МарочныйОтчет")) Тогда
				Если глЕстьРеквизитМнЧ("Счет",Конт.Вид())=1 Тогда
					Выч_суммы_накл_сНП(Конт,0,1-ЦенаНеМенялась,Конт.Счет.КатегорияЦены);
				Иначе
					Выч_суммы_накл_сНП(Конт,0,1-ЦенаНеМенялась);
				КонецЕсли;
			Иначе
				Выч_суммы_накл(Конт,0,1-ЦенаНеМенялась);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;  
	
	Если Конт.Вид()="ЗаказОтПокупателя" Тогда
		Конт.СуммаПредоплаты=Пересчет(Конт.СуммаПредоплаты,Валюта_Прежн,Курс_Прежн,ВалютаДокумента,Конт.Курс); 
	ИначеЕсли Конт.Вид()="КорректировкаЗаказОтПокупателя" Тогда
		Конт.СуммаСтарая=Пересчет(Конт.СуммаСтарая,Валюта_Прежн,Курс_Прежн,ВалютаДокумента,Конт.Курс);
		Конт.СуммаПредоплаты=Пересчет(Конт.СуммаПредоплаты,Валюта_Прежн,Курс_Прежн,ВалютаДокумента,Конт.Курс);   		
	КонецЕсли;  
	// Теперь запомним промежуточные переменные
	Валюта_Прежн=ВалютаДокумента;
	Курс_Прежн=Конт.Курс;
КонецПроцедуры
//-----------------------------------------------
Процедура УстВалютыНакл(Конт,Валюта_Прежн,Курс_Прежн) Экспорт
	Влт=СоздатьОбъект("Справочник.Валюты");
	Если Конт.Валюта.Выбран()=1 Тогда
		Влт.НайтиЭлемент(Конт.Валюта);
	КонецЕсли;
	Если Влт.Выбрать("Выберите валюту","")>0 Тогда
		Конт.Валюта=Влт.ТекущийЭлемент();
		Устан_Вал(Конт,Конт.Дата_курса,Валюта_Прежн,Курс_Прежн);
	КонецЕсли;
КонецПроцедуры
//-----------------------------------------------
Функция ПроверкаБазовойЕдиницы(Тов) Экспорт
	Спр=СоздатьОбъект("Справочник.Единицы");
	Спр.ИспользоватьВладельца(Тов);
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()=1 Цикл
		Если спр.ПометкаУдаления()=1 Тогда
			Продолжить;
		КонецЕсли;
		Если Спр.Единица=Тов.БазоваяЕдиницаИзмерения Тогда
			Если Спр.ОкруглятьДоЦелых=Перечисление.Булево.Да Тогда
				Возврат 1;
			Иначе
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат 0;
КонецФункции   
//***********************************************************
//<<Алгоритм Успеха>> (begin)
//
//***************************************************************
//_____________________________________________________________________________
Процедура ПредупредитьПроТовар(Предупр)
	Если Предупр=1 Тогда
		Предупреждение("Выбранный товар не соответствует агенту!");    				    
	КонецЕсли;
КонецПроцедуры //ПредупредитьПроТовар
//***************************************************************
Функция ЗаполнитьАгентаПоТовару(Конт,Товар,Предупр)
	Если глЕстьРеквизитШапки("Клиент", Конт.Вид()) = 1 Тогда
		статус = ЗаполнениеАгентовПоТовару(Конт.Клиент,Товар);				
		Если статус=0 Тогда
			ПредупредитьПроТовар(Предупр);
			Возврат 0;
		Иначе
			Конт.Агент=статус;
		КонецЕсли;
	КонецЕсли; 
	Возврат 1;
КонецФункции //ЗаполнитьАгентаПоТовару
//***************************************************************
Функция УстановкаАгента(Конт,Режим,Выб,Предупр=1) Экспорт
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Если глЕстьРеквизитШапки("Агент", Конт.Вид()) = 1 Тогда
		Если Режим="Каталог" Тогда
			Товар = Выб;
		Иначе
			Товар = Выб.Товар;
		КонецЕсли;                               
		//Если ПустоеЗначение(Конт.Агент) = 0 Тогда
		//			Если Конт.КоличествоСтрок()=0 Тогда
		//				Возврат 1;
		//		        Возврат ЗаполнитьАгентаПоТовару(Конт,Товар,Предупр)
		//	Если ПринадлежностьТовараАгенту(Конт, Товар) = 0 Тогда
		//		ПредупредитьПроТовар(Предупр);
		//		Возврат 0;
		//	КонецЕсли;  
		//Иначе
		//	Возврат ЗаполнитьАгентаПоТовару(Конт,Товар,Предупр);
		//КонецЕсли;
	КонецЕсли;            
	Возврат 1;
	
КонецФункции //УстановкаАгента
//<<Алгоритм Успеха>> (end) 
//************************************************************

//*************************************
//Процедура УстановитьДопСвойства(Конт) Экспорт
//	
//	СрР=СоздатьОбъект("Справочник.Партии");
//	СрР.ИспользоватьВладельца(Конт.Товар);
//	СрР.ПорядокРеквизита("ДатаПрихода"); 
//	СрР.ОбратныйПорядок(1);
//	СрР.ВыбратьЭлементы();
//	СрР.ПолучитьЭлемент();
//    
//	Конт.ШтрихКод=СрР.ШтрихКод;
//	Конт.ДатаПроизв=СрР.ДатаПроизв;
//	
//КонецПроцедуры


//-----------------------------------------------
Процедура ЗапросКоличестваВПодборе(Конт,Режим,Выб) Экспорт
	Если Выб.ПометкаУдаления()=1 Тогда
		Предупреждение("Нельзя выбирать помеченные на удаление товары!");
		Возврат;
	КонецЕсли;
	//AU

	
	ВозвратПоставщику=0;
	Если найти(Конт.Вид(),"Расходная")=1 Тогда
		Если (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратПоставщику) Тогда
			ВозвратПоставщику=1;
		КонецЕсли;
	КонецЕсли;
	
	Если глЕстьРеквизитШапки("ДатаПоставки",Конт.Вид())=1 Тогда
		ДатаЦены = Конт.ДатаПоставки;
	Иначе
		ДатаЦены = Конт.ДатаДок;
	КонецЕсли;
	ГруппаТовараБезКонтроляЦены=СоздатьОбъект("Справочник.Номенклатура");
	ГруппаТовараБезКонтроляЦены.НайтиПоКоду("97");
	глТоварНельзяИспользоватьВПродаже = 0;                                  
	Если Выб.ВидТовара<>Перечисление.ВидыТоваров.Услуга Тогда     
		//проверяем только для внешних клиентов
		Если ((Найти(Конт.Вид(),"Расходная")=1) И (ВозвратПоставщику=0)) ИЛИ (Конт.Вид()="Счет")ИЛИ (Конт.Вид()="СчетОбщий") Тогда
			
			Если ((Найти(Конт.Вид(),"Счет")>0) И (СокрЛП(Конт.Клиент.ИНН)<>СокрЛП(Конт.Фирма.Рег_номер)))
			или ((Найти(Конт.Вид(),"СчетОбщий")>0) И (СокрЛП(Конт.Клиент.ИНН)<>СокрЛП(Конт.Фирма.Рег_номер)) )  Тогда
				
				Спр=СоздатьОбъект("Справочник.Цены");
				Спр.ИспользоватьВладельца(Выб);
				Спр.НайтиПоРеквизиту("КатегорияЦены",Конт.КатегорияЦены,0);
				Если Спр.Выбран()=0 Тогда                     
					глТоварНельзяИспользоватьВПродаже = 1;
				ИначеЕсли (Спр.Цена.Получить(ДатаЦены) = 0) ИЛИ (Спр.ПометкаУдаления()=1) Тогда //найден элемент
					глТоварНельзяИспользоватьВПродаже = 1;
				КонецЕсли;     

				Если (глТоварНельзяИспользоватьВПродаже=1) И (Выб.ПринадлежитГруппе(ГруппаТовараБезКонтроляЦены)=0) Тогда
					Предупреждение("Данный товар нельзя использовать для продажи!");
					Возврат
				КонецЕсли;				
			КонецЕсли;
			
			//проверям дополнительно кат цены для основного клиента заявки, не филиала
			Если (Найти(Конт.Вид(),"Счет")>0)или (Найти(Конт.Вид(),"СчетОбщий")>0)  Тогда
				Если Конт.ВидОплаты<>2 Тогда
					Если (Конт.КлиентФилиала<>Конт.Клиент) И (Конт.Фирма<>Константа.ОсновнаяФирма) Тогда
						Спр=СоздатьОбъект("Справочник.Цены");
						Спр.ИспользоватьВладельца(Выб);
						Спр.НайтиПоРеквизиту("КатегорияЦены",Конт.Клиент.КатегорияЦены,0);
						Если Спр.Выбран()=0 Тогда                     
							глТоварНельзяИспользоватьВПродаже = 1;
						ИначеЕсли (Спр.Цена.Получить(ДатаЦены) = 0) ИЛИ (Спр.ПометкаУдаления()=1) Тогда //найден элемент
							глТоварНельзяИспользоватьВПродаже = 1;
						КонецЕсли;     
		
						Если (глТоварНельзяИспользоватьВПродаже=1) И (Выб.ПринадлежитГруппе(ГруппаТовараБезКонтроляЦены)=0)  Тогда
							Предупреждение("Данный товар нельзя использовать для продажи!");
							Возврат
						КонецЕсли;				

					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Конт.Вид()<>"Списание" Тогда
		//endAU
		
		Если УстановкаАгента(Конт,Режим,Выб)=0 Тогда
			Возврат;
		КонецЕсли;    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	КонецЕсли;
	
	Если Константа.ЗапрашиватьКоличество=Перечисление.Булево.Да Тогда
		Кол=1;
		Если ПроверкаБазовойЕдиницы(Выб)=1 Тогда
			ПеремОст=0;
		Иначе
			ПеремОст=3;
		КонецЕсли;  
		
		
		Если ВРЕГ(ИмяКомпьютера())="R-TS2" Тогда
			сзПараметр= СоздатьОбъект("СписокЗначений");
   			сзПараметр.ДобавитьЗначение(Кол,"Колич");

 			ОткрытьФормуМодально("Обработка.ЦифроваяКлавиатура",сзПараметр);
//  		ОткрытьФормуМодально("Отчет",сзПараметр,КаталогИБ()+"ExtForms\ЦифроваяКлавиатура.ert");
			Кол=сзПараметр.Получить("Колич");		
		
			Если Кол=0 Тогда
				Возврат;
			КонецЕсли;			
			
			Конт.НоваяСтрока();
			Если Режим="Каталог" Тогда
				Конт.Товар=Выб;
			Иначе
				Конт.Товар=Выб.Товар;
			КонецЕсли;
			Конт.Количество=Кол;
		Иначе
			Если ВвестиЧисло(Кол,"Введите количество",12,ПеремОст)=1 Тогда
				Конт.НоваяСтрока();
				Если Режим="Каталог" Тогда
					Конт.Товар=Выб;
				Иначе
					Конт.Товар=Выб.Товар;
				КонецЕсли;
				Конт.Количество=Кол;
			Иначе
				Возврат;
			КонецЕсли;			
			
			
		КонецЕсли; 
		

		

	Иначе
		Конт.НоваяСтрока();
		Если Режим="Каталог" Тогда
			Конт.Товар=Выб;
		Иначе
			Конт.Товар=Выб.Товар;
		КонецЕсли;
		Конт.Количество=1;                                
	КонецЕсли;              
	
	Если (Конт.Вид()="ПриходнаяНакладная") ИЛИ (Конт.Вид()="ПриходнаяРеализатора") Тогда
		Сумма=0; 
		УстанЦеныПрих(Конт);
		
		//УстановитьДопСвойства(Конт);
		
		Попытка
			Если Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя Тогда
				Конт.КатегорияВозврата=Перечисление.КатегорииВозвратов.БракПоставщика;
			Иначе
				Конт.КатегорияВозврата=0;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если ВвестиЧисло(Сумма,"Введите Сумму",12,3)=1 Тогда
			Конт.Сумма=Сумма;
		Иначе
			Возврат;
		КонецЕсли;
		
		СрокРеализ=Дата("");
		Если ВвестиДату(СрокРеализ,"Введите срок реализации")=1 Тогда
			Конт.СрокРеализ=СрокРеализ;
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		Конт.ТовКод=Конт.Товар.Код;
	Исключение
	КонецПопытки;
КонецПроцедуры
//-----------------------------------------------
Функция КодОперации(Док,ТипУчета) Экспорт
	ВидДок=Док.Вид();
	Если    (ВидДок="ОтчетРеализатора")
	ИЛИ (ВидДок="ИнвентаризацияРеализатора") Тогда
		Возврат ПроданоРеализатором;
	ИначеЕсли     (ВидДок="ПриходнаяНакладная") Тогда
		Если (Док.ПризнакНакладной=Перечисление.ПризнПрихНакл.Закупка) ИЛИ (Док.ПризнакНакладной=Перечисление.ПризнПрихНакл.ПриемИмпорта) ИЛИ (Док.ПризнакНакладной=Перечисление.ПризнПрихНакл.Допоставка) Тогда
			Возврат ЗакупкаТовара;
		ИначеЕсли (Док.ПризнакНакладной=Перечисление.ПризнПрихНакл.Хранение) ИЛИ (Док.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратСХранения) Тогда
			Возврат ПриемТовараНаХранение;
		Иначе
			
			Если (Док.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратСПереработки) Тогда
				Возврат ВозвратТовараСПереработки;
			КонецЕсли;
			
			Если (Док.ДокументОснование.Выбран()=1) И (Док.ДокументОснование.Вид()="РасходнаяНакладная") Тогда
				Если (ТипУчета="Упр") Тогда
					Возврат ВозвратОтПокупателяКупленногоТовара;
				ИначеЕсли (ТипУчета="Фин") Тогда
					Рег=СоздатьОбъект("Регистр.ВзаиморасчетыПокупателей");
					ДолгПоОтгрузке=Рег.Остаток(Док.Фирма,Док.Клиент,Перечисление.ЗначенияНДС.ОсновнаяСтавкаНДС,ОтгрузкаТовара,Док.ДокументОснование,"Долг")
					+Рег.Остаток(Док.Фирма,Док.Клиент,Перечисление.ЗначенияНДС.ЛьготнаяСтавкаНДС,ОтгрузкаТовара,Док.ДокументОснование,"Долг")
					+Рег.Остаток(Док.Фирма,Док.Клиент,Перечисление.ЗначенияНДС.НДС0,ОтгрузкаТовара,Док.ДокументОснование,"Долг");
					Если ДатаГод(Док.ДокументОснование.ДатаДок)=ДатаГод(Док.ДатаДок) Тогда
						Если ДолгПоОтгрузке>0 Тогда
							Возврат ВозвратОтПокупателяКупленногоТовараНеоплаченногоЭтогоГода;
						Иначе
							Возврат ВозвратОтПокупателяКупленногоТовараОплаченногоЭтогоГода;
						КонецЕсли;
					Иначе
						Если ДолгПоОтгрузке>0 Тогда
							Возврат ВозвратОтПокупателяКупленногоТовараНеоплаченногоДругогоГода;
						Иначе
							Возврат ВозвратОтПокупателяКупленногоТовараОплаченногоДругогоГода;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Возврат ВозвратОтПокупателяКупленногоТовара;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли     (ВидДок="ВводОстатковТоваров") Тогда
		Возврат ВводПартииКупленныхТоваров;
	ИначеЕсли     (ВидДок="ВводОстатковРеализации") Тогда
		Если Док.ПризнакРеализатора=Перечисление.ПризнакиРеализаторов.Реализатор_клиент Тогда
			Возврат ВводПартииОтданныхТоваров;
		Иначе
			Возврат ВводПартииПринятыхТоваров;
		КонецЕсли;
	ИначеЕсли     Найти(ВидДок,"РасходнаяНакладная")>0 Тогда
		Если (Док.ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа) ИЛИ (Док.ПризнакНакладной=Перечисление.ПризнРасхНакл.Бартер)  ИЛИ (Док.ПризнакНакладной=Перечисление.ПризнРасхНакл.Пожертвование) Тогда
			Возврат ПродажаТовара;
		ИначеЕсли (Док.ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратСХранения) ИЛИ (Док.ПризнакНакладной=Перечисление.ПризнРасхНакл.Хранение) Тогда
			Возврат ВозвратТовараСХранения;
		ИначеЕсли (Док.ПризнакНакладной=Перечисление.ПризнРасхНакл.Переработка) Тогда
			Возврат ПереработкаТовара;
		Иначе
			Возврат ВозвратПоставщикуКупленногоТовара;
		КонецЕсли;
	ИначеЕсли     (ВидДок="РасходнаяРеализатора") Тогда
		Если Док.ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа Тогда
			Возврат ВыдачаНаРеализацию;
		Иначе
			Возврат ВозвратПоставщикуПринятогоТовара;
		КонецЕсли;
	ИначеЕсли     (ВидДок="ПриходнаяРеализатора") Тогда
		Если Док.ПризнакНакладной=Перечисление.ПризнПрихНакл.Закупка Тогда
			Возврат ПринятоНаРеализацию;
		Иначе
			Возврат ВозвратОтРеализатора;
		КонецЕсли;
	ИначеЕсли     (ВидДок="Списание") Тогда
		Возврат СписаниеТовара;
	КонецЕсли;
КонецФункции
//-----------------------------------------------
Функция ЗнакУчета(КредДок,ВидТовара="Товар",ВидПроведения="Обычный") Экспорт
	Если ПустЗнач(КредДок)=1 Тогда
		Возврат -1;
	КонецЕсли;
	ВидКредДок=КредДок.Вид();
	
	РеализацияК="";
	Если    (ВидКредДок="ОтчетРеализатора")
	ИЛИ (ВидКредДок="ИнвентаризацияРеализатора") Тогда
		РеализацияК="Продажа";
	КонецЕсли;
	
	ОстатокК="";
	Если   (ВидКредДок="ВводОстатковКредита") ИЛИ (ВидКредДок="СписаниеЗадолженности") Тогда
		Если КредДок.Сумма>=0 Тогда
			ОстатокК="ДолгКлиента";
		ИначеЕсли КредДок.Сумма<0 Тогда
			ОстатокК="НашДолг";
		КонецЕсли;
		//Если КредДок.Сумма>=0 Тогда
		//	Если КредДок.ВидКлиента =  Перечисление.ВидыКлиентов.Покупатель Тогда
		//		ОстатокК="НашДолг";
		//	Иначе
		//		ОстатокК="ДолгКлиента";
		//	КонецЕсли;
		//	
		//ИначеЕсли КредДок.Сумма<0 Тогда
		//	Если КредДок.ВидКлиента =  Перечисление.ВидыКлиентов.Покупатель Тогда
		//		ОстатокК="ДолгКлиента";
		//	Иначе
		//		ОстатокК="НашДолг";
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	
	ДвижениеРС="";
	Если   (ВидКредДок="ДвиженияДенежныхСредств")Тогда
		Если КредДок.ВидДвижения=Перечисление.ВидыДвиженийПоРасчетномуСчету.Зачисление Тогда
			ДвижениеРС="Зачисление";
		Иначе
			ДвижениеРС="Списание";
		КонецЕсли;  
	ИначеЕсли (ВидКредДок="КорректировкаЗаказОтПокупателя") Тогда //стол заказов
		Если КредДок.Доплата>0 Тогда
			ДвижениеРС="Зачисление";
		Иначе
			ДвижениеРС="Списание";		    
		КонецЕсли;      
	ИначеЕсли ВидКредДок="Счет_фактура" Тогда
		Если КредДок.ВидКлиента=Перечисление.ВидыКлиентов.Покупатель Тогда
			ДвижениеРС="Зачисление";
		ИначеЕсли КредДок.ВидКлиента=Перечисление.ВидыКлиентов.Поставщик Тогда
			//Если КредДок.ВидКомпенсации=Перечисление.ВидПолученнойКомпенсации.ОтдельныйСчет Тогда
			ДвижениеРС="Списание";
			//Иначе
			//ДвижениеРС="Зачисление";
			//КонецЕсли;
		КонецЕсли;		
		
	КонецЕсли;
	
	ЗнакКонсигнации=1;
	Если ВидПроведения="Консигнация" Тогда
		Если ВидКредДок="РасходнаяРеализатора" Тогда
			Если КредДок.ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа Тогда
				ЗнакКонсигнации=-1;
			КонецЕсли;
		КонецЕсли;
		Если ВидКредДок="ПриходнаяРеализатора" Тогда
			Если КредДок.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя Тогда
				ЗнакКонсигнации=-1;
			КонецЕсли;
		КонецЕсли;
		
		Если ВидКредДок="ИнвентаризацияРеализатора" Тогда
//			ЗнакКонсигнации=-1;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидКредДок="РасходнаяНакладная" Тогда       
		Если (КредДок.ПризнакНакладной=Перечисление.ПризнРасхНакл.КредитнаяНота)
		ИЛИ (КредДок.ПризнакНакладной=Перечисление.ПризнРасхНакл.КредитнаяНотаШтраф) Тогда
			ЗнакКонсигнации=-1;
		КонецЕсли;             
	КонецЕсли;
	
	Если (ВидКредДок="РасходнаяНакладная")
	или (ВидКредДок="РасходнаяНакладнаяНал")
	ИЛИ (ВидКредДок="МарочныйОтчет")
	ИЛИ (ВидКредДок="РасходнаяРеализатора")
	ИЛИ (ВидКредДок="Списание")
	ИЛИ (ВидКредДок="РасходныйОрдерТБ")
	ИЛИ (ВидКредДок="ПлатежноеПоручение")
	ИЛИ (ВидКредДок="ОтчетРеализатора")
	ИЛИ (ВидКредДок="ИнвентаризацияРеализатора")
	ИЛИ (ДвижениеРС="Списание")
	ИЛИ (ОстатокК="ДолгКлиента") Тогда
		// значит клиенту выдан торговый кредит
		// или значит была выплачена от нас клиенту предоплата (аванс ему)
		Возврат ЗнакКонсигнации*1;
	ИначеЕсли     (ВидКредДок="ПриходнаяНакладная")
	ИЛИ (ВидКредДок="ПриходнаяРеализатора")
	ИЛИ (ВидКредДок="УслугиПеревозки")
	ИЛИ (ВидКредДок="АктРазборки")
	ИЛИ (ВидКредДок="ПеремещениеНаСкладГотовойПродукции")
	ИЛИ (ВидКредДок="СличительнаяВедомость")
	ИЛИ (ВидКредДок="ВводОстатковТоваров")
	ИЛИ (ВидКредДок="НарядНаСборку")
	ИЛИ (ВидКредДок="ВводОстатковРеализации")  // здесь хоть Реализатор_клиент, хоть Реализатор_фирма
	
	// все равно идет приход товара либо по статусу Принятый или Отданный
	ИЛИ (ВидКредДок="ПриходныйОрдерТБ")
	ИЛИ (ВидКредДок="ОплатаЧеков")
	ИЛИ (ВидКредДок="РегистрацияСчета_фактуры")
	//{{MRG[ --> ]
	ИЛИ (ВидКредДок="АвансовыйОтчет")
	//}}MRG[ --> ]
	ИЛИ (ВидКредДок="ЗаказОтПокупателя")
	ИЛИ (ДвижениеРС="Зачисление")
	ИЛИ (ОстатокК="НашДолг") Тогда
		// значит есть торговый кредит от клиента
		// или значит от клиента была выплачена предоплата (авансовый платеж)
		Возврат -1*ЗнакКонсигнации;
	КонецЕсли;
	
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Если ВидКредДок = "ПеремещениеДепартамент" Тогда
		Если КредДок.ПризнакПеремещения = Перечисление.ПризнакиПеремещения.Отправитель Тогда
			Возврат -1*ЗнакКонсигнации;
		Иначе
			Возврат ЗнакКонсигнации*1;
		КонецЕсли;
	КонецЕсли;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
КонецФункции
//-----------------------------------------------
Функция РежимПогашения(Знак,ДокУчета,ВидТовара="Товар",ВидПроведения="Обычный") Экспорт
	ЗнакУ=ЗнакУчета(ДокУчета,ВидТовара,ВидПроведения);
	Если ((ДокУчета.Вид()="ПеремещениеНаСкладГотовойПродукции")или(ДокУчета.Вид()="СличительнаяВедомость")) Тогда
		ЗнакУ=1;
	КонецЕсли;
	Если Знак=ЗнакУ Тогда
		Возврат "Зачет";
	Иначе
		Возврат "Погашение";
	КонецЕсли;
КонецФункции
//---------------------
Процедура ЗаписатьПроТоварыВзятыеНаРеализацию(РегистрУчета,ТипУчета,НайденныйДок,ТекДок,СписокСумм,СписокПартий,СписокТоваров,СписокКоличество=0);
	Если (ТекДок.Вид()="РасходнаяНакладная") Тогда
		Если (НайденныйДок.Вид()="ВводОстатковРеализации") Тогда
			Докум=НайденныйДок;
		ИначеЕсли (НайденныйДок.Вид()="ПриходнаяРеализатора") Тогда
			Если (НайденныйДок.ПризнакНакладной=Перечисление.ПризнПрихНакл.Закупка) Тогда
				Докум=НайденныйДок;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	ИначеЕсли (ТекДок.Вид()="ПеремещениеДепартамент") Тогда
		Если (НайденныйДок.Вид()="ВводОстатковРеализации") Тогда
			РегистрУчета.КодОперации = ПродажаПринятогоТовара;
		ИначеЕсли (НайденныйДок.Вид()="ПриходнаяРеализатора") Тогда
			Если (НайденныйДок.ПризнакНакладной=Перечисление.ПризнПрихНакл.Закупка) Тогда
				РегистрУчета.КодОперации = ПродажаПринятогоТовара;
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Возврат;
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	Иначе
		Возврат;
	КонецЕсли;
	// Значит мы отпускаем товар, взятый на реализацию
	РегистрУчета.КодОперации=ПродажаПринятогоТовара;
	ВалютаУчета=?(ТипУчета="Упр",РегистрУчета.Товар.ВалютаУчета,Рубли);
	ВалютаВозврата=?(ТипУчета="Упр",Докум.Валюта,Рубли);
	СписокСумм.ДобавитьЗначение(Пересчет(РегистрУчета.НДС+РегистрУчета.Стоимость,ВалютаУчета,ДатаКурсаДок(ТекДок),ВалютаВозврата,ДатаКурсаДок(Докум)));
	СписокПартий.ДобавитьЗначение(Докум);
	СписокТоваров.ДобавитьЗначение(РегистрУчета.Товар);
	
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Если ТипЗначенияСтр(СписокКоличество) = "СписокЗначений" Тогда
		СписокКоличество.ДобавитьЗначение(РегистрУчета.ОстатокТовара);
	КонецЕсли;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Возврат;
КонецПроцедуры
//---------------------
Процедура ЗаписатьРеквизитыРегистра(РегистрУчета,ТекДок,ЗнакДок,ТипУчета,СписокТоваров,СписокСтоим,СписокНДС)
	ВидДок=ТекДок.Вид();
	Если     НЕ((ВидДок="ОтчетРеализатора")
	ИЛИ (ВидДок="ИнвентаризацияРеализатора")
	ИЛИ (ВидДок="РасходнаяНакладная") 
	ИЛИ (ВидДок="РасходнаяНакладнаяНал")
	ИЛИ (ВидДок="РасходнаяРеализатора")
	ИЛИ (ВидДок="ПриходнаяНакладная")) Тогда
		Возврат;
	КонецЕсли;
	ВалютаУчета=?(ТипУчета="Упр",РегистрУчета.Товар.ВалютаУчета,Рубли);
	Валюта=ТекДок.Валюта;
	Курс=КурсДок(ТекДок);
	ДатаКурса=ДатаКурсаДок(ТекДок);
	НайденныйОстаток=РегистрУчета.ОстатокТовара;
	Если ЗнакДок=1 Тогда // расход товара
		Если Найти(ВидДок,"РасходнаяНакладная")>0 Тогда
			РегистрУчета.Оборот=Пересчет(ТекДок.Цена*НайденныйОстаток,Валюта,Курс,ВалютаУчета,ДатаКурса);
			//&&&РегистрУчета.НП=Пересчет(ТекДок.СуммаНП/ТекДок.Количество*НайденныйОстаток,Валюта,Курс,ВалютаУчета,ДатаКурса);
			РегистрУчета.НДСрасхода=Пересчет(ТекДок.НДС*НайденныйОстаток/(ТекДок.Количество*ТекДок.Коэффициент),Валюта,Курс,ВалютаУчета,ДатаКурса);
			РегистрУчета.НДСприхода=РегистрУчета.НДС;
		КонецЕсли;
		Если (ВидДок="ОтчетРеализатора")
		ИЛИ (ВидДок="ИнвентаризацияРеализатора") Тогда
			РегистрУчета.Оборот=РегистрУчета.ПродСтоимость;
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			Если глЕстьРеквизитШапки("СтавкаНДС", ТекДок.Вид()) = 0 Тогда
				ПроцНДС=ПроцентНДС(ТекДок.Товар.СтавкаНДС);
			Иначе
				ПроцНДС=ПроцентНДС(ТекДок.СтавкаНДС);
			КонецЕсли;
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			РегистрУчета.НДСрасхода=РегистрУчета.ПродСтоимость*ПроцНДС/(100+ПроцНДС);
			РегистрУчета.НДСприхода=РегистрУчета.НДС;
		КонецЕсли;
		Если (ВидДок="РасходнаяРеализатора") Тогда
			Поз=СписокТоваров.НайтиЗначение(РегистрУчета.Товар);
			Если Поз=0 Тогда
				СписокТоваров.ДобавитьЗначение(РегистрУчета.Товар);
				СписокСтоим.ДобавитьЗначение(РегистрУчета.Стоимость);
				СписокНДС.ДобавитьЗначение(РегистрУчета.НДС);
			Иначе
				ПрежнСтоим=СписокСтоим.ПолучитьЗначение(Поз);
				СписокСтоим.УстановитьЗначение(Поз,ПрежнСтоим+РегистрУчета.Стоимость);
				ПрежнНДС=СписокНДС.ПолучитьЗначение(Поз);
				СписокНДС.УстановитьЗначение(Поз,ПрежнНДС+РегистрУчета.НДС);
			КонецЕсли;
		КонецЕсли;    
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Если (ВидДок="ПеремещениеДепартамент") Тогда
			Если ТекДок.ПризнакПеремещения = Перечисление.ПризнакиПеремещения.Отправитель Тогда
				РегистрУчета.Оборот=Пересчет(ТекДок.Цена*НайденныйОстаток,Валюта,Курс,ВалютаУчета,ДатаКурса);
				РегистрУчета.НДСрасхода=Пересчет(ТекДок.НДС*НайденныйОстаток/(ТекДок.Количество*ТекДок.Коэффициент),Валюта,Курс,ВалютаУчета,ДатаКурса);
				РегистрУчета.НДСприхода=РегистрУчета.НДС;
			КонецЕсли;
		КонецЕсли;	
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Иначе
		Если  (ВидДок="ПриходнаяНакладная") Тогда
			Если ТекДок.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя Тогда
				// возвращаем от покупателя Купленный товар (сторнируем оборот и НДСрасхода)
				РегистрУчета.Оборот=-Пересчет(ТекДок.Цена*НайденныйОстаток,Валюта,Курс,ВалютаУчета,ДатаКурса);
				//???РегистрУчета.НП=-Пересчет(ТекДок.СуммаНП/ТекДок.Количество*НайденныйОстаток,Валюта,Курс,ВалютаУчета,ДатаКурса);
				РегистрУчета.НДСрасхода=-Пересчет(ТекДок.НДС*НайденныйОстаток/(ТекДок.Количество*ТекДок.Коэффициент),ТекДок.Валюта,Курс,ВалютаУчета,ДатаКурса);
				РегистрУчета.НДСприхода=-РегистрУчета.НДС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//---------------------
Процедура ОкруглениеДвиженияПартииТовара(РегистрУчета,ТипУчета)
	// Для Фин. учета данная процедура выполняет округление до копеек числовых
	// реквизитов и ресурсов регистра ПартииТоваров
	Если ТипУчета="Фин" Тогда
		РегистрУчета.Стоимость=Окр(РегистрУчета.Стоимость,5,1);
		РегистрУчета.ПродСтоимость=Окр(РегистрУчета.ПродСтоимость,5,1);
		РегистрУчета.НДС=Окр(РегистрУчета.НДС,5,1);
		РегистрУчета.Оборот=Окр(РегистрУчета.Оборот,5,1);
		РегистрУчета.НП=Окр(РегистрУчета.НП,5,1);
		РегистрУчета.НДСрасхода=Окр(РегистрУчета.НДСрасхода,5,1);
		РегистрУчета.НДСприхода=Окр(РегистрУчета.НДСприхода,5,1);
	КонецЕсли;
КонецПроцедуры
//---------------------
Процедура ИсполнитьПогашениеТов(РегистрУчета,ТипУчета,НайденныйДок,ТекДок,НайденнаяСебестоимость,НайденныйОстаток,НайденнаяПродСебестоимостьПартии,НайденнаяНДСПартии,ОстПогаш,СписокСумм,СписокПартий,СписокТоваров,СписокСтоим,СписокНДС,ВидТовара="Товар",ВидПроведения="Обычный",СписокКоличество=0)  Экспорт
	// Эта процедура вызывается во время проведения по регистра ПартииТоваров ФИФО
	// Эта процедура реально выполняет проведение регистров
	
	// Определяем Знак документа (куда откуда)
	
	Знак=ЗнакУчета(НайденныйДок,,ВидПроведения);
	ЗнакДок=ЗнакУчета(ТекДок,ВидТовара,ВидПроведения);
	ТекДок.Фирма.ИспользоватьДату(ТекДок.ДатаДок);
	
	// Определяем Режим учета партии (погашение или зачет)
	// именно для найденного ПрихДокумент и именно по нашему учитываемому документу
	// Режим = "Погашение" при погашении партии
	// Режим = "Зачет" при начислении партии
	Режим=РежимПогашения(Знак,ТекДок,ВидТовара,ВидПроведения);
	
	РегистрУчета.КодОперации=КодОперации(ТекДок,ТипУчета);
	РегистрУчета.ПрихДокумент=НайденныйДок;
	
	Знак=-Знак; // этот регистр работает по учету товаров, а там знак обратный, чем при учете взаиморасчетов
	
	// Теперь наверное все знаем чтобы провести правильно документ
	Если Режим="Погашение" Тогда
		// Погашаем найденный документ
		Если (Знак*Число(НайденныйОстаток))>0  Тогда
			// если еще не погашено, тогда Погашаем
			Если ОстПогаш>(Знак*Число(НайденныйОстаток)) Тогда
				Если НайденныйОстаток>0 Тогда
					РегистрУчета.ОстатокТовара=НайденныйОстаток;
					РегистрУчета.Стоимость=НайденнаяСебестоимость*НайденныйОстаток;
					РегистрУчета.ПродСтоимость=НайденнаяПродСебестоимостьПартии*НайденныйОстаток;
					//РегистрУчета.ПродСтоимость = 0;
					РегистрУчета.НДС=НайденнаяНДСПартии*НайденныйОстаток;
					
					ЗаписатьРеквизитыРегистра(РегистрУчета,ТекДок,ЗнакДок,ТипУчета,СписокТоваров,СписокСтоим,СписокНДС);
					ЗаписатьПроТоварыВзятыеНаРеализацию(РегистрУчета,ТипУчета,НайденныйДок,ТекДок,СписокСумм,СписокПартий,СписокТоваров,СписокКоличество);
					ОкруглениеДвиженияПартииТовара(РегистрУчета,ТипУчета);
					РегистрУчета.ДвижениеРасходВыполнить();
				Иначе
					РегистрУчета.ОстатокТовара=-НайденныйОстаток;
					РегистрУчета.Стоимость=-НайденнаяСебестоимость*НайденныйОстаток;
					РегистрУчета.ПродСтоимость=-НайденнаяПродСебестоимостьПартии*НайденныйОстаток;
					//РегистрУчета.ПродСтоимость = 0;
					РегистрУчета.НДС=-НайденнаяНДСПартии*НайденныйОстаток;
					
					ЗаписатьРеквизитыРегистра(РегистрУчета,ТекДок,ЗнакДок,ТипУчета,СписокТоваров,СписокСтоим,СписокНДС);
					ЗаписатьПроТоварыВзятыеНаРеализацию(РегистрУчета,ТипУчета,НайденныйДок,ТекДок,СписокСумм,СписокПартий,СписокТоваров,СписокКоличество);
					ОкруглениеДвиженияПартииТовара(РегистрУчета,ТипУчета);
					РегистрУчета.ДвижениеПриходВыполнить();
				КонецЕсли;
				ОстПогаш=Окр(ОстПогаш-(Знак*НайденныйОстаток),3,1);
			Иначе
				РегистрУчета.ОстатокТовара=ОстПогаш;
				РегистрУчета.Стоимость=НайденнаяСебестоимость*ОстПогаш;
				РегистрУчета.ПродСтоимость=НайденнаяПродСебестоимостьПартии*ОстПогаш;
				//РегистрУчета.ПродСтоимость = 0;
				РегистрУчета.НДС=НайденнаяНДСПартии*ОстПогаш;
				
				ЗаписатьРеквизитыРегистра(РегистрУчета,ТекДок,ЗнакДок,ТипУчета,СписокТоваров,СписокСтоим,СписокНДС);
				ЗаписатьПроТоварыВзятыеНаРеализацию(РегистрУчета,ТипУчета,НайденныйДок,ТекДок,СписокСумм,СписокПартий,СписокТоваров,СписокКоличество);
				ОкруглениеДвиженияПартииТовара(РегистрУчета,ТипУчета);
				Если Число(Знак)>0 Тогда
					РегистрУчета.ДвижениеРасходВыполнить();
				Иначе
					РегистрУчета.ДвижениеПриходВыполнить();
				КонецЕсли;
				ОстПогаш=0;
				Возврат; // исчерпали остаток на Погашение
			КонецЕсли;
		Иначе     // Это когда вдруг получилось,
			// что Погашено больше чем было Зачтено по данному Документу
			// (остаток с обратным знаком).
			// т.е. перепогасили почему то когда то!
			// вариант- была задним числом уменьшен остаток по РасхНакл (и перепроведена),
			// что привело к такому перекосу - тут надо просто
			// попытаться исправить ситуацию, а именно:
			// разницу прибавляем к ОстПогаш,
			// а Погашение приводим в соответствие (снимаем часть погашения)
			// (т.е. уменьшаем (прибавляем с обратным знаком)).
			Если НайденныйОстаток>0 Тогда  // это значит Знак<0
				РегистрУчета.ОстатокТовара=НайденныйОстаток;
				РегистрУчета.Стоимость=НайденнаяСебестоимость*НайденныйОстаток;
				//РегистрУчета.ПродСтоимость=НайденнаяПродСебестоимостьПартии*НайденныйОстаток;
				РегистрУчета.ПродСтоимость = 0;
				РегистрУчета.НДС=НайденнаяНДСПартии*НайденныйОстаток;
				ЗаписатьРеквизитыРегистра(РегистрУчета,ТекДок,ЗнакДок,ТипУчета,СписокТоваров,СписокСтоим,СписокНДС);
				ОкруглениеДвиженияПартииТовара(РегистрУчета,ТипУчета);
				РегистрУчета.ДвижениеРасходВыполнить();
			Иначе // это значит Знак>0
				РегистрУчета.ОстатокТовара=-НайденныйОстаток;
				РегистрУчета.Стоимость=-НайденнаяСебестоимость*НайденныйОстаток;
				//РегистрУчета.ПродСтоимость=-НайденнаяПродСебестоимостьПартии*НайденныйОстаток;
				РегистрУчета.ПродСтоимость = 0;
				ЗаписатьРеквизитыРегистра(РегистрУчета,ТекДок,ЗнакДок,ТипУчета,СписокТоваров,СписокСтоим,СписокНДС);
				ОкруглениеДвиженияПартииТовара(РегистрУчета,ТипУчета);
				РегистрУчета.ДвижениеПриходВыполнить();
			КонецЕсли;
			ОстПогаш=ОстПогаш-(Знак*НайденныйОстаток); // здесь (Знак*НайденныйОстаток)<0
		КонецЕсли;
	ИначеЕсли Режим="Зачет" Тогда
		Если (Знак*НайденныйОстаток)>0  Тогда
			Если ЗнакДок=1 Тогда
				Если ВидПроведения="Консигнация" Тогда
					РегистрУчета.Статус=Отданный;
					РегистрУчета.Контрагент=КлиентДок(ТекДок);
				Иначе
					Если  ТекДок.Вид()="РасходнаяРеализатора" Тогда
						РегистрУчета.Контрагент=КлиентДок(ТекДок);
						Если ТекДок.ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа Тогда
							РегистрУчета.Статус=Купленный;
						Иначе
							РегистрУчета.Статус=Принятый;
						КонецЕсли;
					Иначе
						РегистрУчета.Контрагент=""; // при создании Партии по расходу Контрагент (т.е. чей это товар) неизвестен
						РегистрУчета.Статус=""; // это неизвестный Статус создаваемой партии
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ЗнакДок=-1 Тогда
				РегистрУчета.Контрагент=КлиентДок(ТекДок);
				Если ВидПроведения="Консигнация" Тогда
					РегистрУчета.Статус=Отданный;
				Иначе
					Если  ТекДок.Вид()="ПриходнаяРеализатора" Тогда
						Если ТекДок.ПризнакНакладной=Перечисление.ПризнПрихНакл.Закупка Тогда
							// на реализацию принимаем в партии Принятый товар
							РегистрУчета.Статус=Принятый;
						Иначе
							// возвращаем от покупателя (по реализации) в партии Купленный товар
							РегистрУчета.Статус=Купленный;
						КонецЕсли;
					ИначеЕсли ТекДок.Вид()="ВводОстатковРеализации" Тогда
						РегистрУчета.Статус=Принятый;
					Иначе
						// по другим документам используем партии Купленный
						РегистрУчета.Статус=Купленный;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// при Зачете здесь просто открываем новую партию
			Если (ТипУчета="Упр") Тогда
				Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда
					РегистрУчета.ПрихДокумент=?(РегистрУчета.Статус=Купленный,"",ТекДок.ТекущийДокумент());
				Иначе
					РегистрУчета.ПрихДокумент=ТекДок.ТекущийДокумент();
				КонецЕсли;
			ИначеЕсли (ТипУчета="Фин") Тогда
				Если ТекДок.Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда
					РегистрУчета.ПрихДокумент=?(РегистрУчета.Статус=Купленный,"",ТекДок.ТекущийДокумент());
				Иначе
					РегистрУчета.ПрихДокумент=ТекДок.ТекущийДокумент();
				КонецЕсли;
			КонецЕсли;
			РегистрУчета.ОстатокТовара=ОстПогаш;
			РегистрУчета.Стоимость=НайденнаяСебестоимость*ОстПогаш;
			//РегистрУчета.ПродСтоимость=НайденнаяПродСебестоимостьПартии*ОстПогаш;
			РегистрУчета.ПродСтоимость = 0;
			РегистрУчета.НДС=НайденнаяНДСПартии*ОстПогаш;
			ЗаписатьРеквизитыРегистра(РегистрУчета,ТекДок,ЗнакДок,ТипУчета,СписокТоваров,СписокСтоим,СписокНДС);
			ОкруглениеДвиженияПартииТовара(РегистрУчета,ТипУчета);
			Если Знак>0 Тогда
				РегистрУчета.ДвижениеПриходВыполнить();
			Иначе
				РегистрУчета.ДвижениеРасходВыполнить();
			КонецЕсли;
			ОстПогаш=0;
			Возврат; // исчерпали Остаток на Зачет
		Иначе // Это когда вдруг получилось,
			// что по найденному Документу Зачтено меньше чем было погашено
			// (остаток с обратным знаком).
			// т.е. недозачли почему то когда то!
			// вариант- был задним числом уменьшен Остаток по ПрихНакл (и перепроведена),
			// что привело к такому перекосу - тут надо просто попытаться
			// исправить ситуацию, а именно:
			// на эту разницу уменьшаем ОстПогаш,
			// а Зачет приводим в соответствие (т.е. дозачитываем).
			// (т.е. увеличиваем (прибавляем с прямым знаком)).
			Если ОстПогаш> -(Знак*НайденныйОстаток) Тогда
				Если НайденныйОстаток>0 Тогда  // это значит Знак<0
					РегистрУчета.ОстатокТовара=НайденныйОстаток;
					РегистрУчета.Стоимость=НайденнаяСебестоимость*НайденныйОстаток;
					//РегистрУчета.ПродСтоимость=НайденнаяПродСебестоимостьПартии*НайденныйОстаток;
					РегистрУчета.ПродСтоимость = 0;
					РегистрУчета.НДС=НайденнаяНДСПартии*НайденныйОстаток;
					
					ЗаписатьРеквизитыРегистра(РегистрУчета,ТекДок,ЗнакДок,ТипУчета,СписокТоваров,СписокСтоим,СписокНДС);
					ОкруглениеДвиженияПартииТовара(РегистрУчета,ТипУчета);
					РегистрУчета.ДвижениеРасходВыполнить();
				Иначе // это значит Знак>0
					РегистрУчета.ОстатокТовара=-НайденныйОстаток;
					РегистрУчета.Стоимость=-НайденнаяСебестоимость*НайденныйОстаток;
					//РегистрУчета.ПродСтоимость=-НайденнаяПродСебестоимостьПартии*НайденныйОстаток;
					РегистрУчета.ПродСтоимость = 0;
					РегистрУчета.НДС=-НайденнаяНДСПартии*НайденныйОстаток;
					
					ЗаписатьРеквизитыРегистра(РегистрУчета,ТекДок,ЗнакДок,ТипУчета,СписокТоваров,СписокСтоим,СписокНДС);
					ОкруглениеДвиженияПартииТовара(РегистрУчета,ТипУчета);
					РегистрУчета.ДвижениеПриходВыполнить();
				КонецЕсли;
				// заметим, что здесь (Знак*НайденныйОстаток)<0
				ОстПогаш=ОстПогаш+(Знак*НайденныйОстаток);
			Иначе
				РегистрУчета.ОстатокТовара=ОстПогаш;
				РегистрУчета.Стоимость=НайденнаяСебестоимость*ОстПогаш;
				//РегистрУчета.ПродСтоимость=НайденнаяПродСебестоимостьПартии*ОстПогаш;
				РегистрУчета.ПродСтоимость = 0;
				РегистрУчета.НДС=НайденнаяНДСПартии*ОстПогаш;
				
				ЗаписатьРеквизитыРегистра(РегистрУчета,ТекДок,ЗнакДок,ТипУчета,СписокТоваров,СписокСтоим,СписокНДС);
				ОкруглениеДвиженияПартииТовара(РегистрУчета,ТипУчета);
				Если Знак>0 Тогда
					РегистрУчета.ДвижениеПриходВыполнить();
				Иначе
					РегистрУчета.ДвижениеРасходВыполнить();
				КонецЕсли;
				ОстПогаш=0;
				Возврат; // исчерпали остаток на Зачет
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//=====общепит
//==================================
Процедура ИсполнитьПогашениеТовМО(Продажа,РегистрУчета,ТипУчета,НайденныйДок,ТекДок,НайденнаяСебестоимость,НайденныйОстаток,НайденнаяПродСебестоимостьПартии,НайденнаяНДСПартии,ОстПогаш,СписокСумм,СписокПартий,СписокТоваров,СписокСтоим,СписокНДС,ВидТовара="Товар",ВидПроведения="Обычный")  Экспорт
	// Эта процедура вызывается во время проведения по регистра ПартииТоваров ФИФО (общепит)
	// Эта процедура реально выполняет проведение регистров при проведении документов
	// Марочный отчет и Перемещение на склад готовой продукции
	
	Знак=ЗнакУчета(НайденныйДок,,ВидПроведения);
	ЗнакДок=ЗнакУчета(ТекДок,ВидТовара,ВидПроведения);
	ТекДок.Фирма.ИспользоватьДату(ТекДок.ДатаДок);
	
	// Определяем Режим учета партии (погашение или зачет)
	// именно для найденного ПрихДокумент и именно по нашему учитываемому документу
	// Режим = "Погашение" при погашении партии
	// Режим = "Зачет" при начислении партии
	Режим=РежимПогашения(Знак,ТекДок,ВидТовара,ВидПроведения);
	
	РегистрУчета.КодОперации=КодОперации(ТекДок,ТипУчета);
	РегистрУчета.ПрихДокумент=НайденныйДок;
	
	Знак=-Знак; // этот регистр работает по учету товаров, а там знак обратный, чем при учете взаиморасчетов
	
	// Теперь наверное все знаем чтобы провести правильно документ
	Если Режим="Погашение" Тогда
		// Погашаем найденный документ
		Если (Знак*НайденныйОстаток)>0  Тогда
			// если еще не погашено, тогда Погашаем
			Если ОстПогаш>(Знак*НайденныйОстаток) Тогда
				Если НайденныйОстаток>0 Тогда
					РегистрУчета.ОстатокТовара=НайденныйОстаток;
					РегистрУчета.Стоимость=НайденнаяСебестоимость*НайденныйОстаток;
					//РегистрУчета.ПродСтоимость=НайденнаяПродСебестоимостьПартии*НайденныйОстаток;
					РегистрУчета.ПродСтоимость = 0;
					РегистрУчета.НДС=НайденнаяНДСПартии*НайденныйОстаток;
					
					ЗаписатьРеквизитыРегистра(РегистрУчета,ТекДок,ЗнакДок,ТипУчета,СписокТоваров,СписокСтоим,СписокНДС);
					ЗаписатьПроТоварыВзятыеНаРеализацию(РегистрУчета,ТипУчета,НайденныйДок,ТекДок,СписокСумм,СписокПартий,СписокТоваров);
					//    РегистрУчета.КодОперации=ПродажаБлюда;      ???????
					//РегистрУчета.КодОперации=СписаниеНаПроизводcтвоБлюда;
					Если ТекДок.Вид()="СличительнаяВедомость" Тогда
						РегистрУчета.КодОперации=СписаниеТовара;
					Иначе
						РегистрУчета.КодОперации=СписаниеНаПроизводcтвоБлюда;
					КонецЕсли;
					Если Продажа="Продажа" Тогда
						//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
						Если глЕстьРеквизитШапки("СтавкаНДС", ТекДок.Вид()) = 0 Тогда
							ПроцНДС=ПроцентНДС(РегистрУчета.Товар.СтавкаНДС);
						Иначе
							ПроцНДС=ПроцентНДС(ТекДок.СтавкаНДС);
						КонецЕсли;
						//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
						РегистрУчета.Оборот=ДДЦена*НайденныйОстаток;
						РегистрУчета.НП=ДДНП*НайденныйОстаток;
						РегистрУчета.НДСрасхода=(РегистрУчета.Оборот-РегистрУчета.НП)*ПроцНДС/(100+ПроцНДС);
						РегистрУчета.НДСприхода=РегистрУчета.НДС;
						Если РегистрУчета.Товар.ВидТовара<>Перечисление.ВидыТоваров.Блюдо Тогда
							РегистрУчета.КодОперации=ПродажаТовара;//оперКод
						КонецЕсли;
					КонецЕсли;
					РегистрУчета.ДвижениеРасходВыполнить();
					СтоимостьБлюда=СтоимостьБлюда+НайденнаяСебестоимость*НайденныйОстаток;
					Если (ТипУчета="Упр") тогда
						СтоимостьБлюдаУпр=СтоимостьБлюдаУпр+НайденнаяСебестоимость*НайденныйОстаток;
						НДСБлюдаУпр=НДСБлюдаУпр+НайденнаяНДСПартии*НайденныйОстаток;
					ИначеЕсли  (ТипУчета="Фин") Тогда
						СтоимостьБлюдаФин=СтоимостьБлюдаФин+НайденнаяСебестоимость*НайденныйОстаток;
						НДСБлюдаФин=НДСБлюдаФин+НайденнаяНДСПартии*НайденныйОстаток;
						ФинСтоимостьИнгр=ФинСтоимостьИнгр+НайденнаяСебестоимость*НайденныйОстаток;
						ФинНДСИнгр=ФинНДСИнгр+НайденнаяНДСПартии*НайденныйОстаток;
					КонецЕсли;
				Иначе
					РегистрУчета.ОстатокТовара=-НайденныйОстаток;
					РегистрУчета.Стоимость=-НайденнаяСебестоимость*НайденныйОстаток;
					//РегистрУчета.ПродСтоимость=-НайденнаяПродСебестоимостьПартии*НайденныйОстаток;
					РегистрУчета.ПродСтоимость = 0;
					РегистрУчета.НДС=-НайденнаяНДСПартии*НайденныйОстаток;
					ЗаписатьРеквизитыРегистра(РегистрУчета,ТекДок,ЗнакДок,ТипУчета,СписокТоваров,СписокСтоим,СписокНДС);
					ЗаписатьПроТоварыВзятыеНаРеализацию(РегистрУчета,ТипУчета,НайденныйДок,ТекДок,СписокСумм,СписокПартий,СписокТоваров);
					РегистрУчета.КодОперации=СписаниеНаПроизводcтвоБлюда;
					РегистрУчета.ДвижениеПриходВыполнить();
				КонецЕсли;
				ОстПогаш=Окр(ОстПогаш-(Знак*НайденныйОстаток),3,1);
			Иначе
				РегистрУчета.ОстатокТовара=ОстПогаш;
				РегистрУчета.Стоимость=НайденнаяСебестоимость*ОстПогаш;
				//РегистрУчета.ПродСтоимость=НайденнаяПродСебестоимостьПартии*ОстПогаш;
				РегистрУчета.ПродСтоимость = 0;
				РегистрУчета.НДС=НайденнаяНДСПартии*ОстПогаш;
				ЗаписатьРеквизитыРегистра(РегистрУчета,ТекДок,ЗнакДок,ТипУчета,СписокТоваров,СписокСтоим,СписокНДС);
				ЗаписатьПроТоварыВзятыеНаРеализацию(РегистрУчета,ТипУчета,НайденныйДок,ТекДок,СписокСумм,СписокПартий,СписокТоваров);
				Если ТекДок.Вид()="СличительнаяВедомость" Тогда
					РегистрУчета.КодОперации=СписаниеТовара;
				Иначе
					РегистрУчета.КодОперации=СписаниеНаПроизводcтвоБлюда;
				КонецЕсли;
				Если Продажа="Продажа" Тогда
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					Если глЕстьРеквизитШапки("СтавкаНДС", ТекДок.Вид()) = 0 Тогда
						ПроцНДС=ПроцентНДС(РегистрУчета.Товар.СтавкаНДС);
					Иначе
						ПроцНДС=ПроцентНДС(ТекДок.СтавкаНДС);
					КонецЕсли;
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					
					РегистрУчета.Оборот=ДДЦена*ОстПогаш;
					РегистрУчета.НП=ДДНП*ОстПогаш;
					РегистрУчета.НДСрасхода=(РегистрУчета.Оборот-РегистрУчета.НП)*ПроцНДС/(100+ПроцНДС);
					РегистрУчета.НДСприхода=РегистрУчета.НДС;
					РегистрУчета.КодОперации=ПродажаТовара;
				КонецЕсли;
				Если Знак>0 Тогда
					РегистрУчета.ДвижениеРасходВыполнить();
					Если (ТипУчета="Упр") тогда
						СтоимостьБлюдаУпр=СтоимостьБлюдаУпр+НайденнаяСебестоимость*ОстПогаш;
						НДСБлюдаУпр=НДСБлюдаУпр+НайденнаяНДСПартии*ОстПогаш;
					ИначеЕсли  (ТипУчета="Фин") Тогда
						СтоимостьБлюдаФин=СтоимостьБлюдаФИн+НайденнаяСебестоимость*ОстПогаш;
						НДСБлюдаФин=НДСБлюдаФин+НайденнаяНДСПартии*ОстПогаш;
						ФинСтоимостьИнгр=ФинСтоимостьИнгр+НайденнаяСебестоимость*ОстПогаш;
						ФинНДСИнгр=ФинНДСИнгр+НайденнаяНДСПартии*ОстПогаш;
					КонецЕсли;
					СтоимостьБлюда=СтоимостьБлюда+НайденнаяСебестоимость*ОстПогаш;
				Иначе
					РегистрУчета.ДвижениеПриходВыполнить();
				КонецЕсли;
				ОстПогаш=0;
				Возврат; // исчерпали остаток на Погашение
			КонецЕсли;
		Иначе     // Это когда вдруг получилось,
			// что Погашено больше чем было Зачтено по данному Документу
			// (остаток с обратным знаком).
			// т.е. перепогасили почему то когда то!
			// вариант- была задним числом уменьшен остаток по РасхНакл (и перепроведена),
			// что привело к такому перекосу - тут надо просто
			// попытаться исправить ситуацию, а именно:
			// разницу прибавляем к ОстПогаш,
			// а Погашение приводим в соответствие (снимаем часть погашения)
			// (т.е. уменьшаем (прибавляем с обратным знаком)).
			Если НайденныйОстаток>0 Тогда  // это значит Знак<0
				РегистрУчета.ОстатокТовара=НайденныйОстаток;
				РегистрУчета.Стоимость=НайденнаяСебестоимость*НайденныйОстаток;
				//РегистрУчета.ПродСтоимость=НайденнаяПродСебестоимостьПартии*НайденныйОстаток;
				РегистрУчета.ПродСтоимость = 0;
				РегистрУчета.НДС=НайденнаяНДСПартии*НайденныйОстаток;
				ЗаписатьРеквизитыРегистра(РегистрУчета,ТекДок,ЗнакДок,ТипУчета,СписокТоваров,СписокСтоим,СписокНДС);
				РегистрУчета.КодОперации=СписаниеНаПроизводcтвоБлюда;
				РегистрУчета.ДвижениеРасходВыполнить();
			Иначе // это значит Знак>0
				РегистрУчета.ОстатокТовара=-НайденныйОстаток;
				РегистрУчета.Стоимость=-НайденнаяСебестоимость*НайденныйОстаток;
				//РегистрУчета.ПродСтоимость=-НайденнаяПродСебестоимостьПартии*НайденныйОстаток;
				РегистрУчета.ПродСтоимость = 0;
				ЗаписатьРеквизитыРегистра(РегистрУчета,ТекДок,ЗнакДок,ТипУчета,СписокТоваров,СписокСтоим,СписокНДС);
				// КОД ОПЕРАЦИИ
				РегистрУчета.КодОперации=Неизвестный;
				РегистрУчета.ДвижениеПриходВыполнить();
			КонецЕсли;
			ОстПогаш=ОстПогаш-(Знак*НайденныйОстаток); // здесь (Знак*НайденныйОстаток)<0
		КонецЕсли;
	ИначеЕсли Режим="Зачет" Тогда
		Если (Число(Знак)*Число(НайденныйОстаток))>0  Тогда
			Если ЗнакДок=1 Тогда
				Если ВидПроведения="Консигнация" Тогда
					РегистрУчета.Статус=Отданный;
					РегистрУчета.Контрагент=КлиентДок(ТекДок);
				Иначе
					Если  ТекДок.Вид()="РасходнаяРеализатора" Тогда
						РегистрУчета.Контрагент=КлиентДок(ТекДок);
						Если ТекДок.ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа Тогда
							РегистрУчета.Статус=Купленный;
						Иначе
							РегистрУчета.Статус=Принятый;
						КонецЕсли;
					Иначе
						РегистрУчета.Контрагент=""; // при создании Партии по расходу Контрагент (т.е. чей это товар) неизвестен
						РегистрУчета.Статус=""; // это неизвестный Статус создаваемой партии
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ЗнакДок=-1 Тогда
				РегистрУчета.Контрагент=КлиентДок(ТекДок);
				Если ВидПроведения="Консигнация" Тогда
					РегистрУчета.Статус=Отданный;
				Иначе
					Если  ТекДок.Вид()="ПриходнаяРеализатора" Тогда
						Если ТекДок.ПризнакНакладной=Перечисление.ПризнПрихНакл.Закупка Тогда
							// на реализацию принимаем в партии Принятый товар
							РегистрУчета.Статус=Принятый;
						Иначе
							// возвращаем от покупателя (по реализации) в партии Купленный товар
							РегистрУчета.Статус=Купленный;
						КонецЕсли;
					ИначеЕсли ТекДок.Вид()="ВводОстатковРеализации" Тогда
						РегистрУчета.Статус=Принятый;
					Иначе
						// по другим документам используем партии Купленный
						РегистрУчета.Статус=Купленный;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// при Зачете здесь просто открываем новую партию
			Если (ТипУчета="Упр") Тогда
				Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда
					РегистрУчета.ПрихДокумент=?(РегистрУчета.Статус=Купленный,"",ТекДок.ТекущийДокумент());
				Иначе
					РегистрУчета.ПрихДокумент=ТекДок.ТекущийДокумент();
				КонецЕсли;
			ИначеЕсли (ТипУчета="Фин") Тогда
				Если ТекДок.Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда
					РегистрУчета.ПрихДокумент=?(РегистрУчета.Статус=Купленный,"",ТекДок.ТекущийДокумент());
				Иначе
					РегистрУчета.ПрихДокумент=ТекДок.ТекущийДокумент();
				КонецЕсли;
			КонецЕсли;
			РегистрУчета.ОстатокТовара=ОстПогаш;
			РегистрУчета.Стоимость=НайденнаяСебестоимость*ОстПогаш;
			//РегистрУчета.ПродСтоимость=НайденнаяПродСебестоимостьПартии*ОстПогаш;
			РегистрУчета.ПродСтоимость = 0;
			РегистрУчета.НДС=НайденнаяНДСПартии*ОстПогаш;
			ЗаписатьРеквизитыРегистра(РегистрУчета,ТекДок,ЗнакДок,ТипУчета,СписокТоваров,СписокСтоим,СписокНДС);
			РегистрУчета.КодОперации=СписаниеНаПроизводcтвоБлюда;
			Если Знак>0 Тогда
				РегистрУчета.ДвижениеПриходВыполнить();
			Иначе
				
				РегистрУчета.ДвижениеРасходВыполнить();
			КонецЕсли;
			ОстПогаш=0;
			Возврат; // исчерпали Остаток на Зачет
		Иначе // Это когда вдруг получилось,
			// что по найденному Документу Зачтено меньше чем было погашено
			// (остаток с обратным знаком).
			// т.е. недозачли почему то когда то!
			// вариант- был задним числом уменьшен Остаток по ПрихНакл (и перепроведена),
			// что привело к такому перекосу - тут надо просто попытаться
			// исправить ситуацию, а именно:
			// на эту разницу уменьшаем ОстПогаш,
			// а Зачет приводим в соответствие (т.е. дозачитываем).
			// (т.е. увеличиваем (прибавляем с прямым знаком)).
			Если Число(ОстПогаш)> -(Число(Знак)*Число(НайденныйОстаток)) Тогда
				Если НайденныйОстаток>0 Тогда  // это значит Знак<0
					РегистрУчета.ОстатокТовара=НайденныйОстаток;
					РегистрУчета.Стоимость=НайденнаяСебестоимость*НайденныйОстаток;
					//РегистрУчета.ПродСтоимость=НайденнаяПродСебестоимостьПартии*НайденныйОстаток;
					РегистрУчета.ПродСтоимость = 0;
					РегистрУчета.НДС=НайденнаяНДСПартии*НайденныйОстаток;
					ЗаписатьРеквизитыРегистра(РегистрУчета,ТекДок,ЗнакДок,ТипУчета,СписокТоваров,СписокСтоим,СписокНДС);
					РегистрУчета.КодОперации=Неизвестный;
					РегистрУчета.ДвижениеРасходВыполнить();
				Иначе // это значит Знак>0
					РегистрУчета.ОстатокТовара=-НайденныйОстаток;
					РегистрУчета.Стоимость=-НайденнаяСебестоимость*НайденныйОстаток;
					//РегистрУчета.ПродСтоимость=-НайденнаяПродСебестоимостьПартии*НайденныйОстаток;
					РегистрУчета.ПродСтоимость = 0;
					РегистрУчета.НДС=-НайденнаяНДСПартии*НайденныйОстаток;
					ЗаписатьРеквизитыРегистра(РегистрУчета,ТекДок,ЗнакДок,ТипУчета,СписокТоваров,СписокСтоим,СписокНДС);
					РегистрУчета.КодОперации=Неизвестный;            //оперКод
					РегистрУчета.ДвижениеПриходВыполнить();
				КонецЕсли;
				// заметим, что здесь (Знак*НайденныйОстаток)<0
				ОстПогаш=ОстПогаш+(Знак*НайденныйОстаток);
			Иначе
				РегистрУчета.ОстатокТовара=ОстПогаш;
				РегистрУчета.Стоимость=НайденнаяСебестоимость*ОстПогаш;
				//РегистрУчета.ПродСтоимость=НайденнаяПродСебестоимостьПартии*ОстПогаш;
				РегистрУчета.ПродСтоимость = 0;
				РегистрУчета.НДС=НайденнаяНДСПартии*ОстПогаш;
				ЗаписатьРеквизитыРегистра(РегистрУчета,ТекДок,ЗнакДок,ТипУчета,СписокТоваров,СписокСтоим,СписокНДС);
				РегистрУчета.КодОперации=Неизвестный;
				Если Знак>0 Тогда
					РегистрУчета.ДвижениеПриходВыполнить();
				Иначе
					РегистрУчета.ДвижениеРасходВыполнить();
				КонецЕсли;
				ОстПогаш=0;
				Возврат; // исчерпали остаток на Зачет
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция глПолучитьГруппуСклада(Конт) Экспорт
	
	Склад=Конт;
	Пока Склад.Уровень()>1 Цикл
		Склад=Склад.Родитель;
	КонецЦикла;
	
	Возврат Склад;
	
КонецФункции
               

Функция глВернутьКоэффКГТовара(пТовар,пЕдиница) Экспорт

	ТекстЗапроса = "SELECT TOP 1 $Спр.Коэффициент	
				 |  FROM $Справочник.Единицы Спр (NOLOCK) 
				 |  WHERE Спр.PARENTEXT = :ВыбТовар AND Спр.ISMARK = 0 AND $Спр.Единица = :ВыбЕдиница
				 |";
				 
	ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбТовар",пТовар);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбЕдиница",пЕдиница);
	
	Возврат ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	
КонецФункции

Функция глПолучитьПереводЕдИзм( пЕдиница, Язык ) Экспорт
	спр = СоздатьОбъект( "Справочник.ЕдиницыПеревод" );
	Если спр.НайтиПоРеквизиту( "Единица", пЕдиница, 1 ) = 1 Тогда
		Если Язык = "EN" Тогда Возврат СокрЛП(спр.Англ);
		ИначеЕсли Язык = "RU" Тогда Возврат СокрЛП(спр.Рус);
		ИначеЕсли Язык = "LT" Тогда Возврат СокрЛП(спр.Лит);
		ИначеЕсли Язык = "EE" Тогда Возврат СокрЛП(спр.Эст);
		Иначе
			Возврат СокрЛП(спр.Наименование);
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции                          

Функция глПолучитьПереводНаименования( пТовар,Язык ) Экспорт
	Если Язык = "EN" Тогда Возврат пТовар.НаименованиеАнгл;
	ИначеЕсли Язык = "RU" Тогда Возврат пТовар.НаименованиеРусс;
	ИначеЕсли Язык = "LT" Тогда Возврат пТовар.НаименованиеLT;
	ИначеЕсли Язык = "EE" Тогда Возврат пТовар.НаименованиеEE;
	Иначе
		Возврат пТовар.Наименование;
	КонецЕсли;
КонецФункции

Функция глПолучитьПереводДолжности( пДолжность,Язык ) Экспорт
	Если Язык = "EN" Тогда Возврат пДолжность.НаименованиеEN;
	ИначеЕсли Язык = "RU" Тогда Возврат пДолжность.НаименованиеRU;
	ИначеЕсли Язык = "LT" Тогда Возврат пДолжность.НаименованиеLT;
	ИначеЕсли Язык = "EE" Тогда Возврат пДолжность.НаименованиеEE;
	Иначе
		Возврат пДолжность.Наименование;
	КонецЕсли;
КонецФункции


//----------------------------------
//***********************************************************
//<<Алгоритм Успеха>> (begin)
//
//_____________________________________________________________________________
Функция глПогаситьПартиюПоОснованию(РегДвиж,Конт,ТипУч,Валюта,Курс,ВалютаУчета,ДатаКурса,Режим,КолКПогашению,ДокОсн="")
	Если ПустоеЗначение(ДокОсн)=1 Тогда
		Осн=Конт.ДокументОснование;
	Иначе
		Осн=ДокОсн;
	КонецЕсли;
	
	//КолКПогашению=Конт.Количество*Конт.Коэффициент;
	Рег=СоздатьОбъект("Регистр.ПартииТоваров");
	Рег.ВыбратьДвиженияДокумента(Осн.ТекущийДокумент());
	Себест=0;
	Пока Рег.ПолучитьДвижение()=1 Цикл 
		
		Если Рег.Фирма<>РегДвиж.Фирма Тогда
			Продолжить;
		КонецЕсли; 
		Если Рег.Товар<>РегДвиж.Товар Тогда
			Продолжить;
		КонецЕсли;                                                
		Если КолКПогашению<=0 Тогда
			Прервать;
		КонецЕсли;
		//тут нам надо возвращать обратно соблюдая все реквизиты
		Если Режим="Консигнация" Тогда
			Если Рег.Статус<>Отданный Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если Рег.Статус=Отданный Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		РегДвиж.Статус=Рег.Статус;
		РегДвиж.ПрихДокумент=Рег.ПрихДокумент;
		РегДвиж.Партия=Рег.Партия;
		РегДвиж.СрокРеализации=Рег.СрокРеализации;
		РегДвиж.Контрагент=Рег.Контрагент;
		ПогашКол=Мин(Рег.ОстатокТовара,КолКПогашению);
		РегДвиж.ОстатокТовара=ПогашКол;
		РегДвиж.Стоимость=Рег.Стоимость/Рег.ОстатокТовара*ПогашКол;
		РегДвиж.ПродСтоимость=Рег.ПродСтоимость/Рег.ОстатокТовара*ПогашКол;
		//РегДвиж.ПродСтоимость = 0;
		РегДвиж.НДС=Рег.НДС/Рег.ОстатокТовара*ПогашКол;
		РегДвиж.Оборот=-Пересчет(Конт.Цена*ПогашКол,Валюта,Курс,ВалютаУчета,ДатаКурса);
		РегДвиж.НДСрасхода=-Пересчет(Конт.НДС*ПогашКол/(Конт.Количество*Конт.Коэффициент),Валюта,Курс,ВалютаУчета,ДатаКурса);
		РегДвиж.НДСприхода=-Рег.НДСприхода/Рег.ОстатокТовара*ПогашКол;
		
		РегДвиж.КодОперации=КодОперации(Конт,ТипУч);
		
		КолКПогашению=КолКПогашению-ПогашКол; 
		Если Рег.Приход=1 Тогда
			РегДвиж.ДвижениеРасходВыполнить();
		Иначе
			РегДвиж.ДвижениеПриходВыполнить();
		КонецЕсли;
	КонецЦикла;
	
	Если КолКПогашению>0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции //глНайтиПартиюПоОснованию(Конт)
//<<Алгоритм Успеха>> (end) 
//************************************************************
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Функция глЗаполнитьПартию(Конт,Партия) Экспорт
	СпрПартии = СоздатьОбъект("Справочник.Партии");
	
	ИзмененаПартия=0;
	Если (Партия.ДатаПрихода <> Конт.ДатаДок) ИЛИ 
	(Партия.СрокРеализации <> Конт.СрокРеализ) ИЛИ 
	(Партия.ШтрихКод <> Конт.ШтрихКод) Тогда
		ИзмененаПартия=1;
	КонецЕсли;
	
	
	Попытка 
		Если  (Партия.ДатаПроизв <> Конт.ДатаПроизв) Тогда
			ИзмененаПартия=1;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Попытка 
		Если  (Партия.Сертификат <> Конт.ТовСертификат) Тогда
			ИзмененаПартия=1;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	
	Если (ИзмененаПартия=1) Тогда
		
		Если СпрПартии.НайтиЭлемент(Партия)=0 Тогда
			Возврат ПолучитьПустоеЗначение("Справочник.Партии");
		КонецЕсли;
		
		СпрПартии.Наименование      = "" + Конт.СрокРеализ + " / " + Конт.ШтрихКод; 
		СпрПартии.ДатаПрихода   	= Конт.ДатаДок;
		СпрПартии.СрокРеализации	= Конт.СрокРеализ;
		СпрПартии.ШтрихКод		    = Конт.ШтрихКод;
		
		Попытка
			СпрПартии.ДатаПроизв     	= Конт.ДатаПроизв;
		Исключение
		КонецПопытки;
		
		Попытка 
			СпрПартии.Сертификат     	= Конт.ТовСертификат;
		Исключение
		КонецПопытки;
		
		//Закомментировано Инсталлятором МОД:СпрПартии.Записать();
		//Начало текста, вставленного Инсталлятором МОД
		СпрПартии.Записать();
		//Конец текста, вставленного Инсталлятором МОД
		
		Возврат СпрПартии.ТекущийЭлемент();
	КонецЕсли;
	
	Возврат Партия;
	
КонецФункции

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//AU
Функция ФлагУчетаПартии(Конт)
	Если Конт.Вид()="ПеремещениеДепартамент" Тогда
		Возврат 7;
	ИначеЕсли Конт.Вид()="ВводОстатковТоваров" Тогда
		Возврат 11;
	Иначе
		Возврат 1;
	КонецЕсли;
КонецФункции
//endAU

Функция ПогашениеПартииТоваровСтар(Конт,ТипУчета,ВидПроведения="Обычный",СписокСумм=0,СписокПартий=0,СписокТоваров=0,СписокСтоим=0,СписокНДС=0,СписокКоличество=0)  Экспорт
	
	Если ТипЗначения(СписокСумм)=0 Тогда
		СписокСумм=СоздатьОбъект("СписокЗначений");
	КонецЕсли;
	Если ТипЗначения(СписокПартий)=0 Тогда
		СписокПартий=СоздатьОбъект("СписокЗначений");
	КонецЕсли;
	Если ТипЗначения(СписокТоваров)=0 Тогда
		СписокТоваров=СоздатьОбъект("СписокЗначений");
	КонецЕсли;
	Если ТипЗначения(СписокСтоим)=0 Тогда
		СписокСтоим=СоздатьОбъект("СписокЗначений");
	КонецЕсли;
	Если ТипЗначения(СписокНДС)=0 Тогда
		СписокНДС=СоздатьОбъект("СписокЗначений");
	КонецЕсли;  
	
	Если Конт.вид()="РасходнаяНакладная" Тогда    
		Если (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.КредитнаяНота)
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.КредитнаяНотаШтраф) Тогда
			Возврат 0;
		КонецЕсли;
	КонецЕсли;	
	
	РегДвиж=Конт.Регистр.ПартииТоваров;
	Конт.Фирма.ИспользоватьДату(Конт.ДатаДок);
	Если (ТипУчета="Упр") Тогда
		Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета.Выбран()=0 Тогда
			Возврат 0; // учет Упр. не ведется
		КонецЕсли;
		РегДвиж.Фирма=Конт.Фирма;
	ИначеЕсли (ТипУчета="Фин") Тогда
		Если Конт.Фирма.МетодРасчетаСебестоимостиФинансовогоУчета.Выбран()=0 Тогда
			Возврат 0; // учет Фин. не ведется
		КонецЕсли;
		РегДвиж.Фирма=Конт.Фирма;
	Иначе
		Сообщить("Неверно задан тип учета партий товаров по "+Конт.ТекущийДокумент());
		Возврат 1;
	КонецЕсли;
	//AU
	РегДвиж.ФлагУчета=ФлагУчетаПартии(Конт);
	//endAU
	// склпарт
	Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
		РегДвиж.Склад=Конт.Склад;
	Иначе
		РегДвиж.Склад="";
	КонецЕсли;
	
	//-- -- -- --
	
	
	ДокВОбработке=Конт.ТекущийДокумент();
	Клиент=КлиентДок(Конт);
	
	ЗнакДок=ЗнакУчета(ДокВОбработке,,ВидПроведения);
	
	// В зависимости от ТипУчета в измерении Фирма будут разные значения
	Если ТипУчета="Фин" Тогда
		ПромФирма=Конт.Фирма;
	Иначе
		ПромФирма=Конт.Фирма;
	КонецЕсли;
	
	// склпарт
	//составить список складов 
	Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
		ПромСклад=Конт.Склад;
	Иначе
		ПромСклад=СоздатьОбъект("Справочник.МестаХранения");
	КонецЕсли;
	
	
	Если ДокВОбработке.Вид()="ИнвентаризацияРеализатора" Тогда
		// Это особый случай
		РегП=СоздатьОбъект("Регистр.ПартииТоваров");
		Если (Конт.ГрупповаяОбработка()=0) И (Конт.ИтогиАктуальны()=0) Тогда
			РегП.ВременныйРасчет();
			РассчитатьРегистрыНа(ДокВОбработке);
		КонецЕсли;
	КонецЕсли;
	
	ВремРег=СоздатьОбъект("Регистры");
	Рег=ВремРег.ПартииТоваров;
	ВремРег.Актуальность(1);
	
	спТоваров = семПолучтьСписокИспТоваров( ДокВОбработке );
	Рег.УстановитьЗначениеФильтра("Товар",спТоваров,2);
	Рег.УстановитьЗначениеФильтра("Склад",ПромСклад,1);
	Рег.УстановитьЗначениеФильтра("Фирма",ПромФирма,1);
	
	Если Конт.ИтогиАктуальны() = 0 Тогда
		Рег.ВременныйРасчет(1);
		ВремРег.РассчитатьРегистрыНа(Конт.ТекущийДокумент());
	КонецЕсли;
	
	// теперь пройдем по строкам
	Конт.ВыбратьСтроки();
	Пока Конт.ПолучитьСтроку()>0 Цикл  
		
		Состояние("Проведение: "+Конт.НомерСтроки+"/"+Конт.КоличествоСтрок());
		
		РегДвиж.ОстатокТовара=0;
		РегДвиж.Стоимость=0;
		РегДвиж.ПродСтоимость=0;
		РегДвиж.НДС=0;
		РегДвиж.Оборот=0;
		РегДвиж.НП=0;
		РегДвиж.НДСрасхода=0;
		РегДвиж.НДСприхода=0;
		
		Если Конт.Товар.Выбран()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Товар=Конт.Товар;
		
		Если Товар.ВидТовара=Перечисление.ВидыТоваров.Услуга Тогда
			// услуги здесь в этих регистрах не учитываем
			Продолжить;
		КонецЕсли;
		
		Курс=КурсДок(Конт);
		ДатаКурса=ДатаКурсаДок(Конт);
		ВалютаУчета=?(ТипУчета="Упр",Товар.ВалютаУчета,Рубли);
		Если ДокВОбработке.Вид()="Списание" Тогда
			Валюта=ВалютаУчета;
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		ИначеЕсли ДокВОбработке.Вид()="ПеремещениеДепартамент" Тогда
			Валюта = ВалютаУчета;
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Иначе
			Валюта=Конт.Валюта;
		КонецЕсли;
		
		// Определяем Количество по документу
		Колво=Конт.Количество*Конт.Коэффициент;
		
		//***********************************************************
		//<<Алгоритм Успеха>> (begin)
		Если ДокВОбработке.Вид()="РасходнаяНакладнаяНал" Тогда
			// Это особый случай, там могут быть строки с (-), т.е. возвраты от покупателей
			ЗнакДок=?(Конт.Сумма>=0,1,-1);
			Если ЗнакДок=-1 Тогда
				Колво=ЗнакДок*Колво;
			КонецЕсли; 
			// переустанавливаем эти значения, т.к. после строки возврата эти значения изменяются
			Клиент=КлиентДок(Конт);
		КонецЕсли;
		
		Если (Колво<=0) и (ДокВОбработке.Вид()<>"ВводОстатковТоваров") Тогда
			Продолжить;
		КонецЕсли;		
		//<<Алгоритм Успеха>> (end) 
		//************************************************************
		Если ДокВОбработке.Вид()="ИнвентаризацияРеализатора" Тогда
			// Это особый случай
			Колво=РегП.СводныйОстаток(ПромФирма,Товар,Отданный,Конт.Клиент,,,,,"ОстатокТовара")-Колво;
		КонецЕсли;
		
		Если Колво=0 Тогда
			Продолжить;
		КонецЕсли;
		
		РегДвиж.ПривязыватьСтроку(Конт.НомерСтроки);
		РегДвиж.Товар=Товар;
		
		//ВремРег=СоздатьОбъект("Регистры");
		//Рег=ВремРег.ПартииТоваров;
		
		СтоимостьПартии=0;
		НДСПартии=0;
		ПродСтоимостьПартии=0;
		// определим себестоимость и продСтоимость в приходном документе
		Если ЗнакДок=-1 Тогда
			// значит мы приходуем товар
			Если ДокВОбработке.Вид()="ПриходнаяНакладная" Тогда
				Если (ДокВОбработке.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя) Тогда
					ПоОснованию=0;
					Если ДокВОбработке.ДокументОснование.Выбран()=1 Тогда
						Если ДокВОбработке.ДокументОснование.Проведен()=1 Тогда
							Если (ДокВОбработке.ДокументОснование.Вид() = "РасходнаяНакладная")
							или (ДокВОбработке.ДокументОснование.Вид()="РасходнаяНакладнаяНал") Тогда
								// при Возврате от покупателя себестоимость берется из документа продажи
								СтоимостьПартии=Колво*?(ТипУчета="Упр",СтоимостьТовараПоРегистру(Товар,ДокВОбработке.ДокументОснование,"Упр",НДСПартии,1)
								,СтоимостьТовараПоРегистру(Товар,ДокВОбработке.ДокументОснование,"Фин",НДСПартии,0));
								НДСПартии=Колво*НДСПартии;
								//***********************************************************
								//<<Алгоритм Успеха>> (begin)
								// все-таки надо возвращать в партию из которой продавали
								Если глПогаситьПартиюПоОснованию(РегДвиж,Конт,ТипУчета,Валюта,Курс,ВалютаУчета,ДатаКурса,ВидПроведения,КолВо)=1 Тогда
									ПоОснованию=1;
									Продолжить;
								КонецЕсли;//глПогаситьПартиюПоОснованию
								
								//<<Алгоритм Успеха>> (end) 
								//************************************************************
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;         
					
					//Если не удалось погасить по основанию Тогда
					Если ПоОснованию=0 Тогда
						
						// возврат от покупателя товара
						// искать итоги смысла не имеет, потому, что как раз тут - то мы продавали этот товар
						// но надо найти какую-то партию, чтобы в нее вернуть
						// ищем существующую партию такого товара
						//						РегОст=ВремРег.ПартииТоваров;
						РегОст=ВремРег.ОстаткиТоваров;
						РегОст.УстановитьЗначениеФильтра("Товар",Товар,1);
						РегОст.УстановитьЗначениеФильтра("Склад",ПромСклад.Владелец,2);
						РегОст.УстановитьЗначениеФильтра("Клиент",Конт.Клиент,1);
						РегОст.ОбратныйПорядок(1);
						РегОст.ВыбратьДвижения(ДокВОбработке.ДатаДок-180,ДокВОбработке);
						//						РегОст.ВыбратьДвижения(,ДокВОбработке);
						
						Нашли=0;
						Пока РегОст.ПолучитьДвижение()=1 Цикл   
							Если РегОст.ТекущийДокумент()=Конт.ТекущийДокумент() Тогда
								Продолжить;
							КонецЕсли;
							
							Если РегОст.Расход=1 Тогда
								Нашли=1;
								ДокОснование=РегОст.ТекущийДокумент();    
								//								ДокПартии=РегОст.ПрихДокумент;
								Прервать;
							КонецЕсли;                
						КонецЦикла;
						
						//Теперь ищем продажу этого товара любому клиенту
						Если Нашли=0 Тогда            
							РегОст=ВремРег.ПартииТоваров;
							РегОст.УстановитьЗначениеФильтра("Товар",Товар,1);
							РегОст.УстановитьЗначениеФильтра("Склад",ПромСклад.Владелец,2);
							РегОст.ОбратныйПорядок(1);
							РегОст.ВыбратьДвижения(ДокВОбработке.ДатаДок-180,ДокВОбработке);
							
							Нашли=0;
							Пока РегОст.ПолучитьДвижение()=1 Цикл
								
								Если РегОст.ТекущийДокумент()=Конт.ТекущийДокумент() Тогда
									Продолжить;
								КонецЕсли;        
								
								Если (РегОст.КодОперации=ПродажаТовара) ИЛИ (РегОст.КодОперации=ПродажаБлюда) Тогда
								Иначе
									Продолжить;
								КонецЕсли;        
								
								Если Найти(РегОст.ТекущийДокумент().Вид(),"Расходная")=0 Тогда
									Продолжить;
								КонецЕсли;
								
								Если РегОст.ОстатокТовара=0 Тогда
									Продолжить;
								КонецЕсли;					
								
								Если (РегОст.Расход=1) Тогда
									Нашли=1;
									ДокОснование=РегОст.ТекущийДокумент();
									ДокПартии=РегОст.ПрихДокумент;
									Прервать;
								КонецЕсли;                
							КонецЦикла;
						КонецЕсли;
						
						//Последняя попытка найти ПриходныйДокумент
						Если Нашли=0 Тогда            
							РегОст=ВремРег.ПартииТоваров;
							РегОст.УстановитьЗначениеФильтра("Товар",Товар,1);
							//						РегОст.УстановитьЗначениеФильтра("Склад",Склад,1);
							РегОст.ОбратныйПорядок(1);
							РегОст.ВыбратьДвижения(ДокВОбработке.ДатаДок-180,ДокВОбработке);
							
							Нашли=0;
							Пока РегОст.ПолучитьДвижение()=1 Цикл
								
								Если РегОст.ТекущийДокумент()=Конт.ТекущийДокумент() Тогда
									Продолжить;
								КонецЕсли;        
								
								Если (РегОст.КодОперации=ВводПартииКупленныхТоваров) ИЛИ (РегОст.КодОперации=ЗакупкаТовара) Тогда
								Иначе
									Продолжить;
								КонецЕсли;
								
								Если РегОст.ОстатокТовара=0 Тогда
									Продолжить;
								КонецЕсли;
								
								Если (РегОст.Приход=1) Тогда
									Нашли=1;
									ДокОснование=РегОст.ТекущийДокумент();
									ДокПартии=РегОст.ПрихДокумент;
									Прервать;
								КонецЕсли;                
							КонецЦикла;
						КонецЕсли;
						
						Если Нашли=0 Тогда  
							Если Конт.ГрупповаяОбработка()=0 Тогда
								Сообщить("Себестоимость для Товара "+Товар.Код+" "+СокрЛП(Товар)+" не определена. Себестоимость взята из карточки товара!");
							КонецЕсли;
							СтоимостьПартии=Колво*Пересчет(Товар.ЦенаПриобретения,Товар.ВалютаЗакупки,КурсДляВалюты(Товар.ВалютаЗакупки,ДатаКурса),ВалютаУчета,ДатаКурса);
						Иначе               
							СтоимостьПартии=Колво*?(ТипУчета="Упр",СтоимостьТовараПоРегистру(Товар,ДокОснование,"Упр",НДСПартии,1)
							,СтоимостьТовараПоРегистру(Товар,ДокОснование,"Фин",НДСПартии,0));
							НДСПартии=Колво*НДСПартии; 
							
						КонецЕсли;
						
						Если СтоимостьПартии=0 Тогда
							СтоимостьПартии=Конт.Сумма;
							//						    НеПроводить(Конт,"Себестоимость для Товара "+Товар.Код+" "+СокрЛП(Товар)+" не определена!");
							//							Продолжить;
						КонецЕсли;
						
						
						//						Рег_=СоздатьОбъект("Регистр.ПартииТоваров");
						//						Рег_.ВыбратьДвиженияДокумента(ДокОснование);
						//						Пока Рег_.ПолучитьДвижение()=1 Цикл 
						
						//							Если Рег_.Фирма<>РегДвиж.Фирма Тогда
						//							    Продолжить;
						//							КонецЕсли;     
						
						//							Если Рег_.Товар<>РегДвиж.Товар Тогда
						//							    Продолжить;
						//							КонецЕсли;                                                
						
						//							Если Рег_.Расход<>1 Тогда
						//							    Продолжить;
						//							КонецЕсли;                                                
						
						//тут нам надо возвращать обратно соблюдая все реквизиты
						//						    Если Рег_.Статус=Отданный Тогда
						//						        Продолжить;
						//							КонецЕсли;
						
						//							Прервать;
						
						//						КонецЦикла;    
						
						//						РегДвиж.Статус=Рег_.Статус;
						//						РегДвиж.ПрихДокумент=Рег_.ПрихДокумент;
						//						РегДвиж.Партия=Рег_.Партия;
						//						РегДвиж.СрокРеализации=Рег_.СрокРеализации;
						//						РегДвиж.Контрагент=Рег_.Контрагент;
						//						РегДвиж.ОстатокТовара=КолВо;
						//						РегДвиж.Стоимость=СтоимостьПартии;
						//						РегДвиж.ПродСтоимость=Рег_.ПродСтоимость/Рег_.ОстатокТовара*КолВо;
						//						РегДвиж.НДС=НДСПартии;
						//						РегДвиж.Оборот=-Пересчет(Конт.Цена*КолВо,Валюта,Курс,ВалютаУчета,ДатаКурса);
						//						РегДвиж.НДСрасхода=-Пересчет(Конт.НДС*Колво/(Конт.Количество*Конт.Коэффициент),Валюта,Курс,ВалютаУчета,ДатаКурса);
						//						РегДвиж.НДСприхода=-Рег_.НДСприхода/Рег_.ОстатокТовара*Колво;
						
						//						РегДвиж.КодОперации=КодОперации(Конт,ТипУчета);
						//						РегДвиж.ДвижениеПриходВыполнить();
						
						//						Продолжить;
						
					КонецЕсли;
				Иначе
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					//                    СтоимостьПартии=Пересчет(Конт.Сумма,Валюта,Курс,ВалютаУчета,ДатаКурса);
					//					СтоимостьПартии=Пересчет(Конт.Всего-Конт.НДС,Валюта,Курс,ВалютаУчета,ДатаКурса);
					СтоимостьПартии=Конт.Всего; //Уже в Рублях
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					НДСПартии=Пересчет(Конт.НДС,Валюта,Курс,ВалютаУчета,ДатаКурса);
				КонецЕсли;
			ИначеЕсли ДокВОбработке.Вид()="ПриходнаяРеализатора" Тогда
				Если ДокВОбработке.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя Тогда
					Если ДокВОбработке.ДокументОснование.Выбран()=1 Тогда
						Если ДокВОбработке.ДокументОснование.Проведен()=1 Тогда
							Если ДокВОбработке.ДокументОснование.Вид()="РасходнаяРеализатора" Тогда
								// при Возврате от покупателя себестоимость берется из документа продажи
								//***********************************************************
								//<<Алгоритм Успеха>> (begin)
								// все-таки надо возвращать в партию из которой продавали
								Если глПогаситьПартиюПоОснованию(РегДвиж,Конт,ТипУчета,Валюта,Курс,ВалютаУчета,ДатаКурса,ВидПроведения,КолВо)=1 Тогда
									Продолжить;
								КонецЕсли;//глПогаситьПартиюПоОснованию
								//<<Алгоритм Успеха>> (end) 
								//************************************************************
								СтоимостьПартии=Колво*?(ТипУчета="Упр",СтоимостьТовараПоРегистру(Товар,ДокВОбработке.ДокументОснование,"Упр",НДСПартии,1)
								,СтоимостьТовараПоРегистру(Товар,ДокВОбработке.ДокументОснование,"Фин",НДСПартии,0));
								НДСПартии=Колво*НДСПартии;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					СтоимостьПартии=Пересчет(Конт.Сумма,Валюта,Курс,ВалютаУчета,ДатаКурса);
					//					СтоимостьПартии=Пересчет(Конт.Всего,Валюта,Курс,ВалютаУчета,ДатаКурса);
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					НДСПартии=Пересчет(Конт.НДС,Валюта,Курс,ВалютаУчета,ДатаКурса);
				КонецЕсли;
			ИначеЕсли ДокВОбработке.Вид()="ВводОстатковРеализации" Тогда
				Если ДокВОбработке.ПризнакРеализатора=Перечисление.ПризнакиРеализаторов.Реализатор_клиент Тогда
					СтоимостьПартии=Пересчет(Конт.Стоимость//ау-Конт.НДСстоимости
					,Валюта,Курс,ВалютаУчета,ДатаКурса);
					ПродСтоимостьПартии=Пересчет(Конт.Сумма,Валюта,Курс,ВалютаУчета,ДатаКурса);
					НДСПартии=Пересчет(Конт.НДСстоимости,Валюта,Курс,ВалютаУчета,ДатаКурса);
				Иначе // Реализатор_фирма (запись приема на реализацию)
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					СтоимостьПартии=Пересчет(Конт.Сумма,Валюта,Курс,ВалютаУчета,ДатаКурса);
					//					СтоимостьПартии=Пересчет(Конт.Сумма+Конт.НДС,Валюта,Курс,ВалютаУчета,ДатаКурса);
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					НДСПартии=Пересчет(Конт.НДС,Валюта,Курс,ВалютаУчета,ДатаКурса);
				КонецЕсли;
			ИначеЕсли ДокВОбработке.Вид()="РасходнаяРеализатора" Тогда
				// этот случай описывает запись за реализатором партии товаров, отданных ему на реализацию
				Поз=СписокТоваров.НайтиЗначение(Товар);
				Если Поз>0 Тогда
					СтоимостьПартии=СписокСтоим.ПолучитьЗначение(Поз);
					НДСПартии=СписокНДС.ПолучитьЗначение(Поз);
				Иначе
					СтоимостьПартии=0;
					НДСПартии=0;
				КонецЕсли;
				ПродСтоимостьПартии=Пересчет(Конт.Сумма,Валюта,Курс,ВалютаУчета,ДатаКурса);
			ИначеЕсли ДокВОбработке.Вид()="ПеремещениеДепартамент" Тогда
				// этот случай описывает запись за реализатором партии товаров, отданных ему на реализацию
				//   				ПродСтоимостьПартии=Пересчет(Конт.Сумма,Валюта,Курс,ВалютаУчета,ДатаКурса);
				СтоимостьПартии=Пересчет(Конт.Себестоимость,Валюта,Курс,ВалютаУчета,ДатаКурса);
				
			Иначе  // "ВводПартийТоваров"
				// по другим документам используем партии Купленный и Принятый товар (Отданный отфильтровывается ниже)
				//***********************************************************
				//<<Алгоритм Успеха>> (begin)
				Если ДокВОбработке.Вид() = "РасходнаяНакладнаяНал" Тогда
					Если Конт.Сумма < 0 Тогда
						// возврат от покупателя товара, проданного через кассу
						// искать итоги смысла не имеет, потому, что как раз тут - то мы продавали этот товар
						// но надо найти какую-то партию, чтобы в нее вернуть
						// ищем существующую партию такого товара
						ТаблИтогов = СоздатьОбъект("ТаблицаЗначений"); 
						Рег2=СоздатьОбъект("Регистр.ПартииТоваров");
						Рег2.УстановитьЗначениеФильтра("Товар",Товар,1);
						сзСтатусы = СоздатьОбъект("СписокЗначений");
						сзСтатусы.ДобавитьЗначение(Купленный);
						сзСтатусы.ДобавитьЗначение(Принятый);
						Рег2.УстановитьЗначениеФильтра("Статус",сзСтатусы,2);
						Рег2.ВыгрузитьИтоги(ТаблИтогов,1,1);
						ТаблИтогов.Сортировать("ПрихДокумент",1);
						
						Нашли=0;
						НашлиИтог=0;
						ТаблИтогов.ВыбратьСтроки();
						Пока ТаблИтогов.ПолучитьСтроку()>0 Цикл
							Если НЕ(ТаблИтогов.Товар=Товар) Тогда
								Если НашлиИтог=0 Тогда
									Продолжить;
								Иначе
									Прервать;
								КонецЕсли;
							КонецЕсли;
							НашлиИтог=1;
							
							Если НЕ(ТаблИтогов.Статус=Купленный) Тогда
								Продолжить;
							КонецЕсли;
							Если ТаблИтогов.ОстатокТовара>0 Тогда
								Нашли=1;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если Нашли=1 Тогда
							СтоимостьПартии=ТаблИтогов.Стоимость*Колво/ТаблИтогов.ОстатокТовара;
							НДСПартии=ТаблИтогов.НДС*Колво/ТаблИтогов.ОстатокТовара;
							ДД=ТаблИтогов.ПрихДокумент;
							Клиент=ТаблИтогов.Контрагент;
							Партия=ТаблИтогов.Партия;
							СрокРеал=ТаблИтогов.СрокРеализации;
						Иначе
							// если не нашли существующую партию такого товара
							// (наверно он распродан)
							// тогда пытаемся найти последний проведенный документ прихода этого товара
							Рег2.ОбратныйПорядок(1);
							Рег2.ВыбратьДвижения(ДокВОбработке.ДатаДок-180,ДокВОбработке);
							Пока Рег2.ПолучитьДвижение()=1 Цикл
								Если Рег2.Приход=0 Тогда
									Продолжить;
								КонецЕсли;     
								Если Рег2.ПрихДокумент<>Рег2.ТекущийДокумент() Тогда
									Продолжить;
								КонецЕсли;
								Если Рег2.ТекущийДокумент()=ДокВОбработке.ТекущийДокумент() Тогда
									Продолжить;
								КонецЕсли;
								Если Рег2.Стоимость=0 Тогда
									Продолжить;
								КонецЕсли;           
								Если Рег2.ОстатокТовара=0 Тогда
									Продолжить;
								КонецЕсли;            
								СтоимостьПартии=Рег2.Стоимость*Колво/Рег2.ОстатокТовара;
								НДСПартии=Рег2.НДС*Колво/Рег2.ОстатокТовара;
								ДД=Рег2.ПрихДокумент;
								Клиент=Рег2.Контрагент;
								Партия=ТаблИтогов.Партия;
								СрокРеал=ТаблИтогов.СрокРеализации;
								Нашли = 1;
								Прервать;
							КонецЦикла;
							Если Нашли=0 Тогда
								// если не нашли проведенный документ прихода этого товара
								// делаем последнюю попытку - найти непроведенный документ прихода
								Док=СоздатьОбъект("Документ.ПриходнаяНакладная");
								Док.УстановитьФильтр(0,1,0,1,1,1);
								Док.ОбратныйПорядок(1);
								Док.ВыбратьДокументы(ДокВОбработке.ДатаДок-180,ДокВОбработке);
								Пока Док.ПолучитьДокумент()=1 Цикл
									Если ТипУчета="Фин" Тогда
										Если Док.Фирма<>Конт.Фирма Тогда
											Продолжить;
										КонецЕсли;
										Если Док.ТипУчета=Упр Тогда
											Продолжить;
										КонецЕсли;
									Иначе
										Если Док.ТипУчета=Фин Тогда
											Продолжить;
										КонецЕсли;
									КонецЕсли;
									СписокТоваров=СоздатьОбъект("СписокЗначений");
									Док.ВыгрузитьТабличнуюЧасть(СписокТоваров,"Товар");
									Если СписокТоваров.Принадлежит(Товар)=1 Тогда
										НомСтроки=СписокТоваров.НайтиЗначение(Товар);
										Нашли=1;
										Прервать;
									КонецЕсли;
								КонецЦикла;
								Если Нашли=1 Тогда
									Док.ПолучитьСтрокуПоНомеру(НомСтроки);
									ДокКолво=Док.Количество*Док.Коэффициент;
									Если ДокКолво<>0 Тогда
										СтоимостьПартии=Колво*Пересчет((Док.Сумма-Док.НДС)/ДокКолво,Док.Валюта,Док.Курс,ВалютаУчета,ДатаКурса);
										НДСПартии=Колво*Пересчет(Док.НДС/ДокКолво,Док.Валюта,Док.Курс,ВалютаУчета,ДатаКурса);
										ДД=Док.ТекущийДокумент();
										Клиент=КлиентДок(Док);
										Партия=ТаблИтогов.Партия;
										СрокРеал=Док.СрокРеализации;
									Иначе
										Нашли=0;
									КонецЕсли;
								КонецЕсли;
								Если Нашли=0 Тогда
									НеПроводить(Конт,"Не обнаружено в системе сущ. партий и приходов возвращаемого товара "+Товар);
									Возврат 1;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						Если Нашли = 1 Тогда
							//гасим
							РегДвиж.ПрихДокумент = ДД.ТекущийДокумент();
							РегДвиж.Контрагент	= Клиент;
							РегДвиж.Статус = Купленный;
							РегДвиж.Партия = Партия; 
							РегДвиж.СрокРеализации = СрокРеал;
							РегДвиж.Стоимость = СтоимостьПартии;
							РегДвиж.ОстатокТовара = Колво;
							РегДвиж.НДС = НДСПартии;
							РегДвиж.КодОперации = ВозвратОтПокупателяКупленногоТовара;
							РегДвиж.Оборот=-Пересчет(Конт.Цена*Колво,Валюта,Курс,ВалютаУчета,ДатаКурса);
							РегДвиж.НДСрасхода=Пересчет(Конт.НДС/(Конт.Количество*Конт.Коэффициент),Валюта,Курс,ВалютаУчета,ДатаКурса);
							РегДвиж.НДСприхода=-НДСПартии;
							РегДвиж.ДвижениеПриходВыполнить();
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				//<<Алгоритм Успеха>> (end) 
				//************************************************************
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				//СтоимостьПартии=Пересчет(Конт.Сумма-Конт.НДС,Валюта,Курс,ВалютаУчета,ДатаКурса);
				СтоимостьПартии=Пересчет(Конт.Сумма,Валюта,Курс,ВалютаУчета,ДатаКурса);
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				НДСПартии=Пересчет(Конт.НДС,Валюта,Курс,ВалютаУчета,ДатаКурса);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗнакДок=1 Тогда  // Погашаем по партиям только расходные документы, а приходные пусть сразу образуют партии
			Партии=СоздатьОбъект("СписокЗначений");
			СтатусПартии=СоздатьОбъект("СписокЗначений");
			КонтрагентПартии=СоздатьОбъект("СписокЗначений");
			СтоимостьПартии=СоздатьОбъект("СписокЗначений");
			ПродСтоимостьПартии=СоздатьОбъект("СписокЗначений");
			НДСПартии=СоздатьОбъект("СписокЗначений");
			ОстатокПартии=СоздатьОбъект("СписокЗначений");
			//			ВремРег=СоздатьОбъект("Регистры");
			//.			Рег=ВремРег.ПартииТоваров;
			
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			СписокСрокРеализ  = СоздатьОбъект("СписокЗначений"); 
			СписокПарт		  = СоздатьОбъект("СписокЗначений"); 
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			
			// Установим фильтрацию партий товаров
			Если ВидПроведения="Консигнация" Тогда
				// в этом специальном режиме мы учитываем отданный на реализацию товар
				Рег.УстановитьФильтр(ПромФирма,Товар,Отданный,Клиент,);
			Иначе
				Если ДокВОбработке.Вид()="РасходнаяРеализатора" Тогда
					Если ДокВОбработке.ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа Тогда
						// на реализацию отдаем из партий Купленный товар
						Рег.УстановитьФильтр(ПромФирма,Товар,Купленный,,,ПромСклад);
					Иначе
						// возвращаем поставщику (по реализации) из партий Принятый товар
						Рег.УстановитьФильтр(ПромФирма,Товар,Принятый,Клиент,,ПромСклад);
					КонецЕсли;
				ИначеЕсли ДокВОбработке.Вид()="ПриходнаяРеализатора" Тогда
					Если ДокВОбработке.ПризнакНакладной=Перечисление.ПризнПрихНакл.Закупка Тогда
						// на реализацию принимаем в партии Принятый товар
						Рег.УстановитьФильтр(ПромФирма,Товар,Принятый,Клиент,,ПромСклад);
					Иначе
						// возвращаем от покупателя (по реализации) в партии Купленный товар
						Рег.УстановитьФильтр(ПромФирма,Товар,Купленный,,,ПромСклад);
					КонецЕсли;
				ИначеЕсли ДокВОбработке.Вид()="ВводОстатковРеализации" Тогда
					Если ДокВОбработке.ПризнакРеализатора=Перечисление.ПризнакиРеализаторов.Реализатор_фирма Тогда
						// на реализацию принимаем в партии Принятый товар
						Рег.УстановитьФильтр(ПромФирма,Товар,Принятый,Клиент,,ПромСклад);
					КонецЕсли;
				ИначеЕсли ДокВОбработке.Вид()="ПриходнаяНакладная" Тогда
					// закупаем и возвращаем в партии этим документом только Купленный товар
					Рег.УстановитьФильтр(ПромФирма,Товар,Купленный,,,ПромСклад);
				ИначеЕсли ДокВОбработке.Вид()="Списание" Тогда
					// Списываем из партий этим документом только Купленный товар
					Рег.УстановитьФильтр(ПромФирма,Товар,Купленный,,,ПромСклад);
				ИначеЕсли ДокВОбработке.Вид()="ВводОстатковТоваров" Тогда
					// устанавливаем в партии этим документом только Купленный товар
					Рег.УстановитьФильтр(ПромФирма,Товар,Купленный,,,ПромСклад);
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
				ИначеЕсли ДокВОбработке.Вид() = "ПеремещениеДепартамент" Тогда
					Если ДокВобработке.ПризнакПеремещения = Перечисление.ПризнакиПеремещения.Отправитель Тогда
						Рег.УстановитьФильтр(ПромФирма,Товар,Купленный,,,ПромСклад);
					Иначе
						Рег.УстановитьФильтр(ПромФирма,Товар,,,,ПромСклад,,);
					КонецЕсли;
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				Иначе // "РасходнаяНакладная" - в обычном режиме
					Рег.УстановитьФильтр(ПромФирма,Товар,,,,ПромСклад,,);
				КонецЕсли;
			КонецЕсли;
			
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			//Если Конт.ИтогиАктуальны() = 0 Тогда
			//	ВремРег.Актуальность(1);
			//	Рег.ВременныйРасчет(1);
			//	ВремРег.РассчитатьРегистрыНа(ДокВОбработке);
			//КонецЕсли;
			
			ТЗИтоги = СоздатьОбъект("ТаблицаЗначений");
			Рег.ВыгрузитьИтоги(ТЗИтоги,1,1);
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			//ТЗИтоги.ВыбратьСтроку();
			ТЗИтоги.Сортировать("СрокРеализации,ПрихДокумент");
			
			//************************************************************
			//<<Алгоритм Успеха>> (begin)
			Если ДокВОбработке.Вид() = "РасходнаяНакладная" Тогда
				Если ДокВобработке.ПризнакНакладной = Перечисление.ПризнРасхНакл.ВозвратПоставщику Тогда
					// все-таки надо возвращать в партию из которой продавали
					// для этого надо попытаться сдвинуть документ-основание в начало
					ТЗИтоги.НоваяКолонка("Приоритет","Число",1);
					ТЗИтоги.ВыбратьСтроки();
					Пока ТЗИтоги.ПолучитьСтроку() > 0 Цикл
						Если ТЗИтоги.Контрагент=ДокВОбработке.Клиент Тогда
							ТЗИтоги.Приоритет=1;
						Иначе
							ТЗИтоги.Приоритет=2;
						КонецЕсли;
					КонецЦикла;
					
					ТЗИтоги.Сортировать("Приоритет,СрокРеализации,ПрихДокумент");
					
					Если ДокВОбработке.ДокументОснование.Выбран() = 1 Тогда
						НСтр = "";
						Если ТЗИтоги.НайтиЗначение(ДокВОбработке.ДокументОснование, НСтр, "ПрихДокумент") = 1 Тогда
							ТЗИтоги.СдвинутьСтроку(-НСтр, Нстр);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			//<<Алгоритм Успеха>> (end) 
			//************************************************************
			
			
			ТЗИтоги.ВыбратьСтроки();
			Пока ТЗИтоги.ПолучитьСтроку() > 0 Цикл
				Если ВидПроведения = "Обычный" Тогда
					Если ТЗИтоги.Статус = Отданный Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				НайденныйОстатокПартии 			 = ТЗИтоги.ОстатокТовара;
				НайденнаяПродСебестоимостьПартии = ТЗИтоги.ПродСтоимость/?(НайденныйОстатокПартии=0,1,НайденныйОстатокПартии);
				НайденнаяСебестоимостьПартии 	 = ТЗИтоги.Стоимость/?(НайденныйОстатокПартии=0,1,НайденныйОстатокПартии);
				НайденнаяНДСПартии 			 	 = ТЗИтоги.НДС/?(НайденныйОстатокПартии=0,1,НайденныйОстатокПартии);
				
				//***************З.А.********23.02.05****Исправление минусовых партий****Начало****
				Если (НайденныйОстатокПартии = 0)или(НайденныйОстатокПартии < 0) Тогда
					Продолжить;
				КонецЕсли;     
				//***************З.А.********23.02.05****Исправление минусовых партий****Конец****
				
				Партия = ТЗИтоги.ПрихДокумент;
				
				Если Партия.Выбран()=1 Тогда
					Если Партия<>ДокВОбработке Тогда
						Если РежимПогашения(ЗнакУчета(Партия,,ВидПроведения),ДокВОбработке,,ВидПроведения)="Зачет" Тогда
							// пропускаем документы на Зачет, т.к. по FIFO/LIFO нам надо только погашать!
							Продолжить;   //Сообщить("Зачет");
						КонецЕсли;
					Иначе
						// т.е. перепроводим документ, который уже сидит в регистре как кредитный документ
						// значит тогда его надо по новой на это же место ставить (лечить)
						
						РегДвиж.Статус     = ТЗИтоги.Статус;
						РегДвиж.Контрагент = ТЗИтоги.Контрагент; 
						//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
						РегДвиж.Партия	   = ТЗИтоги.Партия;
						РегДвиж.СрокРеализации = ТЗИтоги.СрокРеализации;
						//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
						ИсполнитьПогашениеТов(РегДвиж,ТипУчета,Партия,Конт,НайденнаяСебестоимостьПартии,НайденныйОстатокПартии,НайденнаяПродСебестоимостьПартии,НайденнаяНДСПартии,Колво,СписокСумм,СписокПартий,СписокТоваров,СписокСтоим,СписокНДС,,ВидПроведения,СписокКоличество);
						
						Если Колво=0 Тогда
							Прервать;
						КонецЕсли;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				// Купленные товары продаем вперед взятых на реализацию
				Если (ТипУчета="Упр") Тогда
					Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO Тогда
						// НаправлениеСортировки по убыванию
						СтратегияПродажи=?(ТЗИтоги.Статус=Купленный,"2","1");
					Иначе
						// НаправлениеСортировки по возрастанию
						СтратегияПродажи=?(ТЗИтоги.Статус=Купленный,"1","2");
					КонецЕсли;
				ИначеЕсли (ТипУчета="Фин") Тогда
					Если Конт.Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO Тогда
						// НаправлениеСортировки по убыванию
						СтратегияПродажи=?(ТЗИтоги.Статус=Купленный,"2","1");
					Иначе
						// НаправлениеСортировки по возрастанию
						СтратегияПродажи=?(ТЗИтоги.Статус=Купленный,"1","2");
					КонецЕсли;
				КонецЕсли;
				Если конт.ДатаДок > Дата(2007,7,1) Тогда
					ПозицияСоСтратегией=СтратегияПродажи+глДополнитьСтроку(Строка(ТЗИтоги.НомерСтроки),"0",3,1);
				Иначе
					ПозицияСоСтратегией=СтратегияПродажи+Строка(ТЗИтоги.НомерСтроки);
				КонецЕсли;
				Партии.ДобавитьЗначение(Партия,ПозицияСоСтратегией);
				СтатусПартии.ДобавитьЗначение(ТЗИтоги.Статус,ПозицияСоСтратегией);
				КонтрагентПартии.ДобавитьЗначение(ТЗИтоги.Контрагент,ПозицияСоСтратегией);
				СтоимостьПартии.ДобавитьЗначение(НайденнаяСебестоимостьПартии,ПозицияСоСтратегией);
				ПродСтоимостьПартии.ДобавитьЗначение(НайденнаяПродСебестоимостьПартии,ПозицияСоСтратегией);
				ОстатокПартии.ДобавитьЗначение(НайденныйОстатокПартии,ПозицияСоСтратегией);
				НДСПартии.ДобавитьЗначение(НайденнаяНДСПартии,ПозицияСоСтратегией);
				
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				СписокСрокРеализ.ДобавитьЗначение(ТЗИтоги.СрокРеализации,ПозицияСоСтратегией); 
				СписокПарт.ДобавитьЗначение(ТЗИтоги.Партия,ПозицияСоСтратегией); 
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			КонецЦикла;
			
			// теперь в списках собраны все Документы по ПартииТоваров
			// надо погашать по ФИФО или ЛИФО (в зависимости от Константы).
			// если метод расчета себестоимости - ПоСреднему, то оставшиеся в системе
			// (например оставшиеся в наследство от учета по FIFO или ЛИФО, после переключения с него на метод ПоСреднему)
			// тоже погашаются по FIFO.
			
			РазмСпискаПартии = Партии.РазмерСписка();
			Если РазмСпискаПартии>1 Тогда
				Если (ТипУчета="Упр") Тогда
					Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO Тогда
						НаправлениеСортировки=1;// по убыванию
					Иначе
						НаправлениеСортировки=0;// по возрастанию
					КонецЕсли;
				ИначеЕсли (ТипУчета="Фин") Тогда
					Если Конт.Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO Тогда
						НаправлениеСортировки=1;// по убыванию
					Иначе
						НаправлениеСортировки=0;// по возрастанию
					КонецЕсли;
				КонецЕсли;
				Партии.СортироватьПоПредставлению(НаправлениеСортировки);
				СтатусПартии.СортироватьПоПредставлению(НаправлениеСортировки);
				КонтрагентПартии.СортироватьПоПредставлению(НаправлениеСортировки);
				СтоимостьПартии.СортироватьПоПредставлению(НаправлениеСортировки);
				ПродСтоимостьПартии.СортироватьПоПредставлению(НаправлениеСортировки);
				ОстатокПартии.СортироватьПоПредставлению(НаправлениеСортировки);
				НДСПартии.СортироватьПоПредставлению(НаправлениеСортировки);
				
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				СписокСрокРеализ.СортироватьПоПредставлению(НаправлениеСортировки); 
				СписокПарт.СортироватьПоПредставлению(НаправлениеСортировки); 
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			КонецЕсли;
			
			// а теперь надо погашать документы Партий
			Для ИндДвиж=1 По РазмСпискаПартии Цикл
				Партия=Партии.ПолучитьЗначение(ИндДвиж);
				Статус=СтатусПартии.ПолучитьЗначение(ИндДвиж);
				Контрагент=КонтрагентПартии.ПолучитьЗначение(ИндДвиж);
				НайденнаяСебестоимостьПартии=СтоимостьПартии.ПолучитьЗначение(ИндДвиж);
				НайденныйОстатокПартии=ОстатокПартии.ПолучитьЗначение(ИндДвиж);
				НайденнаяНДСПартии=НДСПартии.ПолучитьЗначение(ИндДвиж);
				НайденнаяПродСебестоимостьПартии=ПродСтоимостьПартии.ПолучитьЗначение(ИндДвиж);
				
				РегДвиж.Статус=Статус;
				РегДвиж.Контрагент=Контрагент; 
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				РегДвиж.Партия	   = СписокПарт.ПолучитьЗначение(ИндДвиж);
				РегДвиж.СрокРеализации = СписокСрокРеализ.ПолучитьЗначение(ИндДвиж);
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				ИсполнитьПогашениеТов(РегДвиж,ТипУчета,Партия,Конт,НайденнаяСебестоимостьПартии,НайденныйОстатокПартии,НайденнаяПродСебестоимостьПартии,НайденнаяНДСПартии,Колво,СписокСумм,СписокПартий,СписокТоваров,СписокСтоим,СписокНДС,,ВидПроведения,СписокКоличество);
				
				Если Колво=0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Колво<>0 Тогда
			// если после всей этой операции осталась кое что в Колво,
			// а Партии, которые надо погашать исчерпаны,
			// то надо выдать сообщение об этом и записать текущий документ как Партию с отриц. знаком
			РегДвиж.ОстатокТовара=Колво;
			
			Если ЗнакДок=1 Тогда
				// значит мы расходуем товар
				Сообщить ("При проведении партий товара по "+ДокВОбработке+" от "+Конт.ДатаДок+" по товару "
				+СокрЛП(Товар)+" не распределилось по партиям "+Колво+" "+Товар.БазоваяЕдиницаИзмерения);
				
				// Здесь мы стоимости и НДС не знаем
				//РегДвиж.Стоимость=0;
				РегДвиж.ПродСтоимость=0;
				//РегДвиж.НДС=0;
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				Если глЕстьРеквизитШапки("СтавкаНДС", Конт.Вид()) = 0 Тогда
					ПроцНДС=ПроцентНДС(Товар.СтавкаНДС);
				Иначе
					ПроцНДС=ПроцентНДС(Конт.СтавкаНДС);
				КонецЕсли;
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				ПромСум_=Колво*Товар.ЦенаПриобретения;
				ПромНДС_=ПромСум_*(ПроцНДС/(100+ПроцНДС));
				ПромВал=Товар.ВалютаЗакупки;
				РегДвиж.Стоимость=Пересчет(ПромСум_-ПромНДС_,ПромВал,Курс,ВалютаУчета,ДатаКурса);
				РегДвиж.НДС=Пересчет(ПромНДС_,ПромВал,Курс,ВалютаУчета,ДатаКурса);
				
				
				Если (ДокВОбработке.Вид()="РасходнаяНакладная") или (ДокВОбработке.Вид()="РасходнаяНакладнаяНал") Тогда
					РегДвиж.Оборот=Пересчет(Конт.Цена*Колво,Валюта,Курс,ВалютаУчета,ДатаКурса);
					
					//РегДвиж.НП=Пересчет(Конт.СуммаНП/Конт.Количество*Колво,Валюта,Курс,ВалютаУчета,ДатаКурса);
					РегДвиж.НДСрасхода=Пересчет(Конт.НДС*Колво/(Конт.Количество*Конт.Коэффициент),Валюта,Курс,ВалютаУчета,ДатаКурса);
					РегДвиж.НДСприхода=0;  // НДСприхода в этом случае не знаем!!!
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				ИначеЕсли (ДокВОбработке.Вид()="ПеремещениеДепартамент") Тогда
					Если ДокВобработке.ПризнакПеремещения = Перечисление.ПризнакиПеремещения.Отправитель Тогда
						РегДвиж.Оборот=Пересчет(Конт.Цена*Колво,Валюта,Курс,ВалютаУчета,ДатаКурса);
						РегДвиж.НДСрасхода=Пересчет(Конт.НДС*Колво/(Конт.Количество*Конт.Коэффициент),Валюта,Курс,ВалютаУчета,ДатаКурса);
						РегДвиж.НДСприхода=0;  // НДСприхода в этом случае не знаем!!!
					КонецЕсли;
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				ИначеЕсли    (ДокВОбработке.Вид()="ОтчетРеализатора")
				ИЛИ (ДокВОбработке.Вид()="ИнвентаризацияРеализатора") Тогда
					РегДвиж.Оборот=0;         // Оборот в этом случае не знаем!!!
					РегДвиж.НП=0;
					РегДвиж.НДСрасхода=0;     // НДСрасхода в этом случае не знаем!!!
					РегДвиж.НДСприхода=0;      // НДСприхода в этом случае не знаем!!!
				КонецЕсли;
				
				Если ВидПроведения="Консигнация" Тогда
					РегДвиж.Статус=Отданный;
					РегДвиж.Контрагент=Клиент;
				Иначе
					Если  ДокВОбработке.Вид()="РасходнаяРеализатора" Тогда
						РегДвиж.Контрагент=Клиент;
						Если ДокВОбработке.ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа Тогда
							РегДвиж.Статус=Купленный;
						Иначе
							РегДвиж.Статус=Принятый;
						КонецЕсли;
					Иначе
						РегДвиж.Контрагент=""; // при создании Партии по расходу Контрагент (т.е. чей это товар) неизвестен
						РегДвиж.Статус=""; // это неизвестный Статус создаваемой партии
					КонецЕсли;
				КонецЕсли;
			Иначе//Если ЗнакУчета(ДокВОбработке,ВидТовара)=-1 Тогда
				// значит мы приходуем товар
				РегДвиж.Стоимость=СтоимостьПартии;
				//РегДвиж.ПродСтоимость=ПродСтоимостьПартии;
				РегДвиж.ПродСтоимость = 0;
				РегДвиж.НДС=НДСПартии;
				
				Если  ДокВОбработке.Вид()="ПриходнаяНакладная" Тогда
					Если ДокВОбработке.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя Тогда
						// возвращаем от покупателя Купленный товар (сторнируем оборот и НДСрасхода)
						РегДвиж.Оборот=-Пересчет(Конт.Цена*Колво,Валюта,Курс,ВалютаУчета,ДатаКурса);
						//???РегДвиж.НП=-Пересчет(Конт.СуммаНП/Конт.Количество*Колво,Валюта,Курс,ВалютаУчета,ДатаКурса);
						РегДвиж.НДСрасхода=-Пересчет(Конт.НДС*Колво/(Конт.Количество*Конт.Коэффициент),Валюта,Курс,ВалютаУчета,ДатаКурса);
						//                        РегДвиж.НДСприхода=-НайденнаяНДСПартии*Колво;
						//                        РегДвиж.НДСприхода=-НДСПартии*Колво;
						РегДвиж.НДСприхода=-НДСПартии;
					КонецЕсли;
				КонецЕсли;
				Если ВидПроведения="Консигнация" Тогда
					РегДвиж.Статус=Отданный;
					//РегДвиж.ПродСтоимость=ПродСтоимостьПартии;
					//РегДвиж.НДСрасхода=Пересчет(Конт.НДС,Валюта,Курс,ВалютаУчета,ДатаКурса);
				Иначе
					Если  ДокВОбработке.Вид()="ПриходнаяРеализатора" Тогда
						Если ДокВОбработке.ПризнакНакладной=Перечисление.ПризнПрихНакл.Закупка Тогда
							// на реализацию принимаем в партии Принятый товар
							РегДвиж.Статус=Принятый;
						Иначе
							// возвращаем от покупателя (по реализации) в партии Купленный товар
							РегДвиж.Статус=Купленный;
						КонецЕсли;
					ИначеЕсли ДокВОбработке.Вид()="ВводОстатковРеализации" Тогда
						РегДвиж.Статус=Принятый;
					ИначеЕсли ДокВОбработке.Вид()="ВводОстатковТоваров" Тогда    
						Если ДокВОбработке.ЗаписатьПоставщикаТовара=1 Тогда
							РегДвиж.Контрагент=Товар.Поставщик;
						КонецЕсли;
						
						//                        Если Товар.ВидТовара=Перечисление.ВидыТоваров.Блюдо Тогда
						//                            РегДвиж.Статус=Произведенный;
						//                       Иначе
						РегДвиж.Статус=Купленный;
						//                        КонецЕсли;
					Иначе
						// по другим документам используем партии Купленный
						РегДвиж.Статус=Купленный;
					КонецЕсли;
				КонецЕсли;
				Если (РегДвиж.Статус=Купленный) ИЛИ (РегДвиж.Статус=Произведенный) Тогда
					Если (ТипУчета="Упр") Тогда
						Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда
							РегДвиж.Контрагент="";
							//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
							РегДвиж.Партия = "";
							РегДвиж.СрокРеализации = "";         
							//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
						Иначе
							
							Если ДокВОбработке.Вид()="ВводОстатковТоваров" Тогда    
								Если ДокВОбработке.ЗаписатьПоставщикаТовара=1 Тогда
									РегДвиж.Контрагент=Товар.Поставщик;
								КонецЕсли;                                         
							Иначе
								РегДвиж.Контрагент = Клиент;
							КонецЕсли;
							
							//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
							//***********************************************************
							//<<Алгоритм Успеха>> (begin)
							//
							Если Конт.Вид()="ПриходнаяРеализатора" Тогда
								// нада восстанавливать партию при возврате
								Если Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя Тогда
									Если Конт.ДокументОснование.Выбран()=0 Тогда
										// надо генерить новую партию
										РегДвиж.Партия = ПолучитьПустоеЗначение("Партии");
									КонецЕсли;
								КонецЕсли;
							Иначе
								РегДвиж.Партия = глЗаполнитьПартию(Конт,Конт.Партия);
							КонецЕсли;                 
							Попытка
								//<<Алгоритм Успеха>> (end) 
								//************************************************************
								РегДвиж.СрокРеализации = РегДвиж.Партия.СрокРеализации;         
							Исключение
							КонецПопытки;
							//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
						КонецЕсли;
					ИначеЕсли (ТипУчета="Фин") Тогда
						Если Конт.Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда
							РегДвиж.Контрагент="";
							//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
							РегДвиж.Партия = "";
							РегДвиж.СрокРеализации = "";         
							//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
						Иначе
							РегДвиж.Контрагент = Клиент;
							//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
							//***********************************************************
							//<<Алгоритм Успеха>> (begin)
							//
							Если Конт.Вид()="ПриходнаяРеализатора" Тогда
								// нада восстанавливать партию при возврате
								Если Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя Тогда
									Если Конт.ДокументОснование.Выбран()=0 Тогда
										// надо генерить новую партию
										РегДвиж.Партия = ПолучитьПустоеЗначение("Партии");
									КонецЕсли;
								КонецЕсли;
							Иначе
								РегДвиж.Партия = глЗаполнитьПартию(Конт,Конт.Партия);
							КонецЕсли;                 
							Попытка
								//<<Алгоритм Успеха>> (end) 
								//************************************************************
								РегДвиж.СрокРеализации = РегДвиж.Партия.СрокРеализации;         
							Исключение
							КонецПопытки;
							//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
						КонецЕсли;
					КонецЕсли;
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				ИначеЕсли (РегДвиж.Статус = Принятый) Тогда
					РегДвиж.Контрагент = Клиент;
					Если Конт.Вид()="ПриходнаяРеализатора" Тогда
						Если Конт.ПризнакНакладной = Перечисление.ПризнПрихНакл.Закупка Тогда
							РегДвиж.Партия = глЗаполнитьПартию(Конт,Конт.Партия);
						КонецЕсли;
					Иначе
						РегДвиж.Партия = глЗаполнитьПартию(Конт,Конт.Партия);
					КонецЕсли;	
					Попытка
						РегДвиж.СрокРеализации = РегДвиж.Партия.СрокРеализации;         
					Исключение
					КонецПопытки; 
					
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
				Иначе
					РегДвиж.Контрагент=Клиент;
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					РегДвиж.Партия = "";
					РегДвиж.СрокРеализации = "";         
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				КонецЕсли;
			КонецЕсли;
			
			Если (ТипУчета="Упр") Тогда
				Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда
					РегДвиж.ПрихДокумент=?(РегДвиж.Статус=Купленный,"",ДокВОбработке);
				Иначе
					РегДвиж.ПрихДокумент=ДокВОбработке;
				КонецЕсли;
			ИначеЕсли (ТипУчета="Фин") Тогда
				Если Конт.Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда
					РегДвиж.ПрихДокумент=?(РегДвиж.Статус=Купленный,"",ДокВОбработке);
				Иначе
					РегДвиж.ПрихДокумент=ДокВОбработке;
				КонецЕсли;
			КонецЕсли;
			
			РегДвиж.КодОперации=КодОперации(ДокВОбработке,ТипУчета);
			ОкруглениеДвиженияПартииТовара(РегДвиж,ТипУчета);
			Если ЗнакДок=1 Тогда
				РегДвиж.ДвижениеРасходВыполнить();
			Иначе//Если ЗнакДок=-1 Тогда
				РегДвиж.ДвижениеПриходВыполнить();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	РегП=0;
	Возврат 0;
КонецФункции

Функция ПогашениеПартииТоваров(Конт,ТипУчета,ВидПроведения="Обычный",СписокСумм=0,СписокПартий=0,СписокТоваров=0,СписокСтоим=0,СписокНДС=0,СписокКоличество=0)  Экспорт
	
	Если ТипЗначения(СписокСумм)=0 Тогда
		СписокСумм=СоздатьОбъект("СписокЗначений");
	КонецЕсли;
	Если ТипЗначения(СписокПартий)=0 Тогда
		СписокПартий=СоздатьОбъект("СписокЗначений");
	КонецЕсли;
	Если ТипЗначения(СписокТоваров)=0 Тогда
		СписокТоваров=СоздатьОбъект("СписокЗначений");
	КонецЕсли;
	Если ТипЗначения(СписокСтоим)=0 Тогда
		СписокСтоим=СоздатьОбъект("СписокЗначений");
	КонецЕсли;
	Если ТипЗначения(СписокНДС)=0 Тогда
		СписокНДС=СоздатьОбъект("СписокЗначений");
	КонецЕсли;  

	СписокСтатусов=СоздатьОбъект("СписокЗначений");

	
	Если Конт.вид()="РасходнаяНакладная" Тогда    
		Если (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.КредитнаяНота)
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.КредитнаяНотаШтраф) Тогда
			Возврат 0;
		КонецЕсли;
	КонецЕсли;	
	
	РегДвиж=Конт.Регистр.ПартииТоваров;
	Конт.Фирма.ИспользоватьДату(Конт.ДатаДок);
	Если (ТипУчета="Упр") Тогда
		Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета.Выбран()=0 Тогда
			Возврат 0; // учет Упр. не ведется
		КонецЕсли;
		РегДвиж.Фирма=Конт.Фирма;
	ИначеЕсли (ТипУчета="Фин") Тогда
		Если Конт.Фирма.МетодРасчетаСебестоимостиФинансовогоУчета.Выбран()=0 Тогда
			Возврат 0; // учет Фин. не ведется
		КонецЕсли;
		РегДвиж.Фирма=Конт.Фирма;
	Иначе
		Сообщить("Неверно задан тип учета партий товаров по "+Конт.ТекущийДокумент());
		Возврат 1;
	КонецЕсли;
	//AU
	РегДвиж.ФлагУчета=ФлагУчетаПартии(Конт);
	//endAU

	ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");
	итСчетаТовары=СоздатьОбъект("ИндексированнаяТаблица");
	итСчетаТовары.НоваяКолонка("СчетСсылка");
	итСчетаТовары.НоваяКолонка("Товар");
	итСчетаТовары.НоваяКолонка("МинСрокРеализ");
	итСчетаТовары.НоваяКолонка("МаксСрокРеализ");

	итКомплТовары=СоздатьОбъект("ИндексированнаяТаблица");
	итКомплТовары.НоваяКолонка("СчетСсылка");
	итКомплТовары.НоваяКолонка("Товар");
	итКомплТовары.НоваяКолонка("CрокРеализ");

	// склпарт
	//составить список складов 
	Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
		Если глЕстьРеквизитМнЧ("СкладТ",Конт.Вид())=1 Тогда
			ТекстЗапроса="SELECT DISTINCT $РасходнаяНакладнаяСтроки.СкладТ [СкладТ $Справочник.МестаХранения]
			|			  FROM $ДокументСтроки."+Конт.Вид()+" AS РасходнаяНакладнаяСтроки  (NOLOCK)
			|			  WHERE IDDOC = :ТекДок AND $РасходнаяНакладнаяСтроки.СкладТ <> $ПустойИД";
			
			ЗапросСКЛ.УстановитьТекстовыйПараметр("ТекДок",Конт.ТекущийДокумент());
			тСклады=ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса);
			Если тСклады.КоличествоСтрок()<=1 Тогда
				ПромСклад=Конт.Склад;
			Иначе
				ПромСклад=СоздатьОбъект("СписокЗначений");
				тСклады.Выгрузить(ПромСклад,,,"СкладТ");
			КонецЕсли;
		Иначе
			ПромСклад=Конт.Склад;
		КонецЕсли;
	Иначе
		ПромСклад=СоздатьОбъект("Справочник.МестаХранения");
	КонецЕсли;

	Если глЕстьРеквизитМнЧ("Счет",Конт.Вид())=1 Тогда
		ТекстЗапроса = "SELECT $СчетСтроки.Товар [Товар $Справочник.Номенклатура]
		|						, СчетСтроки.IDDOC [СчетСсылка $Документ.Счет]
		|						, NullIf($СчетСтроки.МинСрокРеализ, '17530101') МинСрокРеализ
		|						, NullIf($СчетСтроки.МаксСрокРеализ, '17530101') МаксСрокРеализ
		|				FROM $ДокументСтроки.Счет AS СчетСтроки With (NOLOCK)
		|				INNER JOIN $ДокументСтроки."+Конт.Вид()+" AS ДокС  (NOLOCK) ON $ДокС.Счет = СчетСтроки.IDDOC AND  $ДокС.Товар = $СчетСтроки.Товар  AND  ДокС.IDDOC = :ТекДок
		|";
		ЗапросСКЛ.УстановитьТекстовыйПараметр("ТекДок",Конт.ТекущийДокумент());
		
		ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итСчетаТовары);


		ТекстЗапроса = "
		|				SELECT $КомплектацияЗаявкиФактСтроки.Товар [Товар $Справочник.Номенклатура]
		|					   ,$КомплектацияЗаявкиФакт.ПоСчету [СчетСсылка $Документ.Счет]
		|					   , NullIf($КомплектацияЗаявкиФактСтроки.СрокРеализ, '17530101') СрокРеализ
		|					   , NullIf($КомплектацияЗаявкиФактСтроки.СрокРеализДоп, '17530101') СрокРеализДоп
		|					   , $КомплектацияЗаявкиФактСтроки.КоличествоФактБазЕдСрокРеализ СрокРеализКол
		|					   , $КомплектацияЗаявкиФактСтроки.КоличествоФактБазЕдСрокРеализДоп СрокРеализДопКол
		|					 FROM $ДокументСтроки.КомплектацияЗаявкиФакт AS КомплектацияЗаявкиФактСтроки With (NOLOCK)
		|				 	 INNER JOIN $Документ.КомплектацияЗаявкиФакт AS КомплектацияЗаявкиФакт With (NOLOCK) ON КомплектацияЗаявкиФактСтроки.IDDOC = КомплектацияЗаявкиФакт.IDDOC
		|					 INNER JOIN $ДокументСтроки."+Конт.Вид()+" AS ДокС  (NOLOCK) ON $ДокС.Счет = $КомплектацияЗаявкиФакт.ПоСчету AND  $ДокС.Товар = $КомплектацияЗаявкиФактСтроки.Товар  AND  ДокС.IDDOC = :ТекДок
		|					  WHERE $КомплектацияЗаявкиФактСтроки.ТоварЗамена = $ПустойИД
		|";
		ЗапросСКЛ.УстановитьТекстовыйПараметр("ТекДок",Конт.ТекущийДокумент());
		
		ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итКомплТовары);
		
		
	КонецЕсли;

	итСчетаТовары.ДобавитьИндекс("иСчетТовар","*СчетСсылка,*Товар");
	итКомплТовары.ДобавитьИндекс("иСчетТовар","*СчетСсылка,*Товар");
	
	//-- -- -- --
	
	
	ДокВОбработке=Конт.ТекущийДокумент();
	Клиент=КлиентДок(Конт);
	
	ЗнакДок=ЗнакУчета(ДокВОбработке,,ВидПроведения);
	
	// В зависимости от ТипУчета в измерении Фирма будут разные значения
	Если ТипУчета="Фин" Тогда
		ПромФирма=Конт.Фирма;
	Иначе
		ПромФирма=Конт.Фирма;
	КонецЕсли;
	
	
	
	Если ДокВОбработке.Вид()="ИнвентаризацияРеализатора" Тогда
		// Это особый случай
		РегП=СоздатьОбъект("Регистр.ПартииТоваров");
		Если (Конт.ГрупповаяОбработка()=0) И (Конт.ИтогиАктуальны()=0) Тогда
			РегП.УстановитьЗначениеФильтра("Статус",Отданный,1);
			РегП.ВременныйРасчет();
			РассчитатьРегистрыНа(ДокВОбработке);
		КонецЕсли;
	КонецЕсли;
	
	ВремРег=СоздатьОбъект("Регистры");
	Рег=ВремРег.ПартииТоваров;
	ВремРег.Актуальность(1);
	
	спТоваров = семПолучтьСписокИспТоваров( ДокВОбработке );
	Рег.УстановитьЗначениеФильтра("Товар",спТоваров,2);
	
	Если (Конт.вид()="ОтчетРеализатора") ИЛИ  (Конт.вид()="ИнвентаризацияРеализатора") Тогда 
		Рег.УстановитьЗначениеФильтра("Статус",Отданный,1);
	Иначе

		Если (Конт.вид()="ПриходнаяРеализатора") Тогда
		Иначе
			Если ТипЗначенияСтр(ПромСклад)="СписокЗначений" Тогда
				Рег.УстановитьЗначениеФильтра("Склад",ПромСклад,2);
			Иначе
				Рег.УстановитьЗначениеФильтра("Склад",ПромСклад,1);
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	Рег.УстановитьЗначениеФильтра("Фирма",ПромФирма,1);
	
	Если Конт.ИтогиАктуальны() = 0 Тогда
		Рег.ВременныйРасчет(1);
		ВремРег.РассчитатьРегистрыНа(Конт.ТекущийДокумент());
	КонецЕсли;
	
	сзКлюч = СоздатьОбъект("СписокЗначений");
	// теперь пройдем по строкам
	Конт.ВыбратьСтроки();
	Пока Конт.ПолучитьСтроку()>0 Цикл  
		
		Состояние("Проведение: "+Конт.НомерСтроки+"/"+Конт.КоличествоСтрок());
		
		Если глЕстьРеквизитМнЧ("СкладТ",Конт.Вид())=1 Тогда
			Если ПустоеЗначение(Конт.СкладТ)=0 Тогда
				ПромСклад = Конт.СкладТ;
			Иначе
				ПромСклад = Конт.Склад;
			КонецЕсли;
		Иначе
			ПромСклад = Конт.Склад;
		КонецЕсли;

		// склпарт
		
		Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
			РегДвиж.Склад=ПромСклад;
		Иначе
			РегДвиж.Склад="";
		КонецЕсли;
		
		Если ВидПроведения="Консигнация" Тогда
			РегДвиж.Склад="";
		КонецЕсли;			
		
		РегДвиж.ОстатокТовара=0;
		РегДвиж.Стоимость=0;
		РегДвиж.ПродСтоимость=0;
		РегДвиж.НДС=0;
		РегДвиж.Оборот=0;
		РегДвиж.НП=0;
		РегДвиж.НДСрасхода=0;
		РегДвиж.НДСприхода=0;
		
		Если Конт.Товар.Выбран()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Товар=Конт.Товар;
		
		Если Товар.ВидТовара=Перечисление.ВидыТоваров.Услуга Тогда
			// услуги здесь в этих регистрах не учитываем
			Продолжить;
		КонецЕсли;
		
		Курс=КурсДок(Конт);
		ДатаКурса=ДатаКурсаДок(Конт);
		ВалютаУчета=?(ТипУчета="Упр",Товар.ВалютаУчета,Рубли);
		Если ДокВОбработке.Вид()="Списание" Тогда
			Валюта=ВалютаУчета;
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		ИначеЕсли ДокВОбработке.Вид()="ПеремещениеДепартамент" Тогда
			Валюта = ВалютаУчета;
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Иначе
			Валюта=Конт.Валюта;
		КонецЕсли;
		
		// Определяем Количество по документу
		Колво=Конт.Количество*Конт.Коэффициент;
		
		//***********************************************************
		//<<Алгоритм Успеха>> (begin)
		Если ДокВОбработке.Вид()="РасходнаяНакладнаяНал" Тогда
			// Это особый случай, там могут быть строки с (-), т.е. возвраты от покупателей
			ЗнакДок=?(Конт.Сумма>=0,1,-1);
			Если ЗнакДок=-1 Тогда
				Колво=ЗнакДок*Колво;
			КонецЕсли; 
			// переустанавливаем эти значения, т.к. после строки возврата эти значения изменяются
			Клиент=КлиентДок(Конт);
		КонецЕсли;
		
		Если (Колво<=0) и ((ДокВОбработке.Вид()<>"ВводОстатковТоваров") И (ДокВОбработке.Вид()<>"ИнвентаризацияРеализатора" )) Тогда
			Продолжить;
		КонецЕсли;		
		//<<Алгоритм Успеха>> (end) 
		//************************************************************
		Если ДокВОбработке.Вид()="ИнвентаризацияРеализатора" Тогда
			// Это особый случай
			Колво=РегП.СводныйОстаток(ПромФирма,Товар,Отданный,Конт.Клиент,,,,,"ОстатокТовара")-Колво;
		КонецЕсли;
		
		Если Колво=0 Тогда
			Продолжить;
		КонецЕсли;
		
		РегДвиж.ПривязыватьСтроку(Конт.НомерСтроки);
		РегДвиж.Товар=Товар;
		
		//ВремРег=СоздатьОбъект("Регистры");
		//Рег=ВремРег.ПартииТоваров;
		
		СтоимостьПартии=0;
		НДСПартии=0;
		ПродСтоимостьПартии=0;
		// определим себестоимость и продСтоимость в приходном документе
		Если ЗнакДок=-1 Тогда
			// значит мы приходуем товар
			Если ДокВОбработке.Вид()="ПриходнаяНакладная" Тогда
				Если (ДокВОбработке.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя) Тогда
					ПоОснованию=0;
					Если ДокВОбработке.ДокументОснование.Выбран()=1 Тогда
						Если ДокВОбработке.ДокументОснование.Проведен()=1 Тогда
							Если (ДокВОбработке.ДокументОснование.Вид() = "РасходнаяНакладная")
							или (ДокВОбработке.ДокументОснование.Вид()="РасходнаяНакладнаяНал") Тогда
								// при Возврате от покупателя себестоимость берется из документа продажи
								СтоимостьПартии=Колво*?(ТипУчета="Упр",СтоимостьТовараПоРегистру(Товар,ДокВОбработке.ДокументОснование,"Упр",НДСПартии,1,,,"Стоимость")
								,СтоимостьТовараПоРегистру(Товар,ДокВОбработке.ДокументОснование,"Фин",НДСПартии,0,,,"Стоимость"));
								ПродСтоимостьПартии=Колво*?(ТипУчета="Упр",СтоимостьТовараПоРегистру(Товар,ДокВОбработке.ДокументОснование,"Упр",НДСПартии,1,,,"ПродСтоимость")
								,СтоимостьТовараПоРегистру(Товар,ДокВОбработке.ДокументОснование,"Фин",НДСПартии,0,,,"ПродСтоимость"));
								НДСПартии=Колво*НДСПартии;
								//***********************************************************
								//<<Алгоритм Успеха>> (begin)
								// все-таки надо возвращать в партию из которой продавали
								Если глПогаситьПартиюПоОснованию(РегДвиж,Конт,ТипУчета,Валюта,Курс,ВалютаУчета,ДатаКурса,ВидПроведения,КолВо)=1 Тогда
									ПоОснованию=1;
									Продолжить;
								КонецЕсли;//глПогаситьПартиюПоОснованию
								
								//<<Алгоритм Успеха>> (end) 
								//************************************************************
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;         
					
					//Если не удалось погасить по основанию Тогда
					Если ПоОснованию=0 Тогда
						
						// возврат от покупателя товара
						// искать итоги смысла не имеет, потому, что как раз тут - то мы продавали этот товар
						// но надо найти какую-то партию, чтобы в нее вернуть
						// ищем существующую партию такого товара
						//						РегОст=ВремРег.ПартииТоваров;
						РегОст=ВремРег.ОстаткиТоваров;
						РегОст.УстановитьЗначениеФильтра("Товар",Товар,1);
						РегОст.УстановитьЗначениеФильтра("Склад",ПромСклад.Родитель,2);
						РегОст.УстановитьЗначениеФильтра("Клиент",Конт.Клиент,1);
						РегОст.ОбратныйПорядок(1);
						РегОст.ВыбратьДвижения(ДокВОбработке.ДатаДок-180,ДокВОбработке);
						//						РегОст.ВыбратьДвижения(,ДокВОбработке);
						
						Нашли=0;
						Пока РегОст.ПолучитьДвижение()=1 Цикл   
							Если РегОст.ТекущийДокумент()=Конт.ТекущийДокумент() Тогда
								Продолжить;
							КонецЕсли;
							
							Если РегОст.Расход=1 Тогда
								Нашли=1;
								ДокОснование=РегОст.ТекущийДокумент();    
								//								ДокПартии=РегОст.ПрихДокумент;
								Прервать;
							КонецЕсли;                
						КонецЦикла;
						
					
						//Теперь ищем продажу этого товара любому клиенту
						Если Нашли=0 Тогда            
							РегОст=ВремРег.ПартииТоваров;
							РегОст.УстановитьЗначениеФильтра("Товар",Товар,1);
							РегОст.УстановитьЗначениеФильтра("Склад",ПромСклад.Владелец,2);
							РегОст.ОбратныйПорядок(1);
							РегОст.ВыбратьДвижения(ДокВОбработке.ДатаДок-180,ДокВОбработке);
							
							Нашли=0;
							Пока РегОст.ПолучитьДвижение()=1 Цикл
								
								Если РегОст.ТекущийДокумент()=Конт.ТекущийДокумент() Тогда
									Продолжить;
								КонецЕсли;        
								
								Если (РегОст.КодОперации=ПродажаТовара) ИЛИ (РегОст.КодОперации=ПродажаБлюда) Тогда
								Иначе
									Продолжить;
								КонецЕсли;        
								
								Если Найти(РегОст.ТекущийДокумент().Вид(),"Расходная")=0 Тогда
									Продолжить;
								КонецЕсли;
								
								Если РегОст.ОстатокТовара=0 Тогда
									Продолжить;
								КонецЕсли;					
								
								Если (РегОст.Расход=1) Тогда
									Нашли=1;
									ДокОснование=РегОст.ТекущийДокумент();
									ДокПартии=РегОст.ПрихДокумент;
									Прервать;
								КонецЕсли;                
							КонецЦикла;
						КонецЕсли;
						
						//Последняя попытка найти ПриходныйДокумент
						Если Нашли=0 Тогда            
							РегОст=ВремРег.ПартииТоваров;
							РегОст.УстановитьЗначениеФильтра("Товар",Товар,1);
							//						РегОст.УстановитьЗначениеФильтра("Склад",Склад,1);
							РегОст.ОбратныйПорядок(1);
							РегОст.ВыбратьДвижения(ДокВОбработке.ДатаДок-180,ДокВОбработке);
							
							Нашли=0;
							Пока РегОст.ПолучитьДвижение()=1 Цикл
								
								Если РегОст.ТекущийДокумент()=Конт.ТекущийДокумент() Тогда
									Продолжить;
								КонецЕсли;        
								
								Если (РегОст.КодОперации=ВводПартииКупленныхТоваров) ИЛИ (РегОст.КодОперации=ЗакупкаТовара) Тогда
								Иначе
									Продолжить;
								КонецЕсли;
								
								Если РегОст.ОстатокТовара=0 Тогда
									Продолжить;
								КонецЕсли;
								
								Если (РегОст.Приход=1) Тогда
									Нашли=1;
									ДокОснование=РегОст.ТекущийДокумент();
									ДокПартии=РегОст.ПрихДокумент;
									Прервать;
								КонецЕсли;                
							КонецЦикла;
						КонецЕсли;
						
						Если Нашли=0 Тогда  
							Если Конт.ГрупповаяОбработка()=0 Тогда
								Сообщить("Себестоимость для Товара "+Товар.Код+" "+СокрЛП(Товар)+" не определена. Себестоимость взята из карточки товара!");
							КонецЕсли;
							СтоимостьПартии=Колво*Пересчет(Товар.ЦенаПриобретения,Товар.ВалютаЗакупки,КурсДляВалюты(Товар.ВалютаЗакупки,ДатаКурса),ВалютаУчета,ДатаКурса);
							ПродСтоимостьПартии=Колво*Пересчет(Товар.ЦенаПриобретения,Товар.ВалютаЗакупки,КурсДляВалюты(Товар.ВалютаЗакупки,ДатаКурса),ВалютаУчета,ДатаКурса);
							
						Иначе               
							СтоимостьПартии=Колво*?(ТипУчета="Упр",СтоимостьТовараПоРегистру(Товар,ДокОснование,"Упр",НДСПартии,1,,,"Стоимость")
							,СтоимостьТовараПоРегистру(Товар,ДокОснование,"Фин",НДСПартии,0,,,"Стоимость"));
							ПродСтоимостьПартии=Колво*?(ТипУчета="Упр",СтоимостьТовараПоРегистру(Товар,ДокОснование,"Упр",НДСПартии,1,,,"ПродСтоимость")
							,СтоимостьТовараПоРегистру(Товар,ДокОснование,"Фин",НДСПартии,0,,,"ПродСтоимость"));

							НДСПартии=Колво*НДСПартии; 
							
						КонецЕсли;
						
						Если СтоимостьПартии=0 Тогда
							СтоимостьПартии=Пересчет(Конт.Сумма,Конт.Валюта,ДатаКурса,ВалютаУчета,ДатаКурса);
							ПродСтоимостьПартии=Пересчет(Конт.Сумма,Конт.Валюта,ДатаКурса,ВалютаУчета,ДатаКурса);
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					//                    СтоимостьПартии=Пересчет(Конт.Сумма,Валюта,Курс,ВалютаУчета,ДатаКурса);
					//					СтоимостьПартии=Пересчет(Конт.Всего-Конт.НДС,Валюта,Курс,ВалютаУчета,ДатаКурса);
					СтоимостьПартии		= Конт.Всего; //Уже в Рублях
					ПродСтоимостьПартии	= Конт.Всего; //Уже в Рублях
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					НДСПартии=Пересчет(Конт.НДС,Валюта,Курс,ВалютаУчета,ДатаКурса);
				КонецЕсли;
			ИначеЕсли ДокВОбработке.Вид()="ПриходнаяРеализатора" Тогда
				Если ДокВОбработке.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя Тогда
					ПоОснованию=0;
					Если ДокВОбработке.ДокументОснование.Выбран()=1 Тогда
						Если ДокВОбработке.ДокументОснование.Проведен()=1 Тогда
							Если ДокВОбработке.ДокументОснование.Вид()="РасходнаяРеализатора" Тогда
								// при Возврате от покупателя себестоимость берется из документа продажи
								//***********************************************************
								//<<Алгоритм Успеха>> (begin)
								// все-таки надо возвращать в партию из которой продавали
								Если глПогаситьПартиюПоОснованию(РегДвиж,Конт,ТипУчета,Валюта,Курс,ВалютаУчета,ДатаКурса,ВидПроведения,КолВо)=1 Тогда
									ПоОснованию=1;
									Продолжить;
								КонецЕсли;//глПогаситьПартиюПоОснованию
								//<<Алгоритм Успеха>> (end) 
								//************************************************************
								СтоимостьПартии=Колво*?(ТипУчета="Упр",СтоимостьТовараПоРегистру(Товар,ДокВОбработке.ДокументОснование,"Упр",НДСПартии,1,,,"Стоимость")
								,СтоимостьТовараПоРегистру(Товар,ДокВОбработке.ДокументОснование,"Фин",НДСПартии,0,,,"Стоимость"));
								ПродСтоимостьПартии=Колво*?(ТипУчета="Упр",СтоимостьТовараПоРегистру(Товар,ДокВОбработке.ДокументОснование,"Упр",НДСПартии,1,,,"ПродСтоимость")
								,СтоимостьТовараПоРегистру(Товар,ДокВОбработке.ДокументОснование,"Фин",НДСПартии,0,,,"ПродСтоимость"));
								НДСПартии=Колво*НДСПартии;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если ПоОснованию=0 Тогда
						
						// возврат от покупателя товара
						// искать итоги смысла не имеет, потому, что как раз тут - то мы продавали этот товар
						// но надо найти какую-то партию, чтобы в нее вернуть
						// ищем существующую партию такого товара
						//						РегОст=ВремРег.ПартииТоваров;
						РегОст=ВремРег.ОстаткиТоваров;
						РегОст.УстановитьЗначениеФильтра("Товар",Товар,1);
						РегОст.УстановитьЗначениеФильтра("Склад",ПромСклад.Родитель,2);
						РегОст.УстановитьЗначениеФильтра("Клиент",Конт.Клиент,1);
						РегОст.ОбратныйПорядок(1);
						РегОст.ВыбратьДвижения(ДокВОбработке.ДатаДок-180,ДокВОбработке);
						//						РегОст.ВыбратьДвижения(,ДокВОбработке);
						
						Нашли=0;
						Пока РегОст.ПолучитьДвижение()=1 Цикл   
							Если РегОст.ТекущийДокумент()=Конт.ТекущийДокумент() Тогда
								Продолжить;
							КонецЕсли;
							
							Если РегОст.Расход=1 Тогда
								Нашли=1;
								ДокОснование=РегОст.ТекущийДокумент();    
								//								ДокПартии=РегОст.ПрихДокумент;
								Прервать;
							КонецЕсли;                
						КонецЦикла;

						Если Нашли=1 Тогда
							РегПарт=СоздатьОбъект("Регистр.ПартииТоваров");
							РегПарт.ВыбратьДвиженияДокумента(ДокОснование);
							Пока РегПарт.ПолучитьДвижение()=1 Цикл
								
								Если (РегПарт.Расход=1) И (РегПарт.Товар=Товар)  Тогда
									ДокПартии=РегПарт.ПрихДокумент;
									Партия = РегПарт.Партия;
									Прервать;
								КонецЕсли;                
							КонецЦикла;
						КонецЕсли;
						
						//Теперь ищем продажу этого товара любому клиенту
						Если Нашли=0 Тогда            
							РегОст=ВремРег.ПартииТоваров;
							РегОст.УстановитьЗначениеФильтра("Товар",Товар,1);
							РегОст.УстановитьЗначениеФильтра("Склад",ПромСклад.Владелец,2);
							РегОст.ОбратныйПорядок(1);
							РегОст.ВыбратьДвижения(ДокВОбработке.ДатаДок-180,ДокВОбработке);
							
							Нашли=0;
							Пока РегОст.ПолучитьДвижение()=1 Цикл
								
								Если РегОст.ТекущийДокумент()=Конт.ТекущийДокумент() Тогда
									Продолжить;
								КонецЕсли;        
								
								Если (РегОст.КодОперации=ПродажаТовара) ИЛИ (РегОст.КодОперации=ПродажаБлюда) Тогда
								Иначе
									Продолжить;
								КонецЕсли;        
								
								Если Найти(РегОст.ТекущийДокумент().Вид(),"Расходная")=0 Тогда
									Продолжить;
								КонецЕсли;
								
								Если РегОст.ОстатокТовара=0 Тогда
									Продолжить;
								КонецЕсли;					
								
								Если (РегОст.Расход=1) Тогда
									Нашли=1;
									ДокОснование=РегОст.ТекущийДокумент();
									ДокПартии=РегОст.ПрихДокумент;
									Прервать;
								КонецЕсли;                
							КонецЦикла;
						КонецЕсли;
						
						//Последняя попытка найти ПриходныйДокумент
						Если Нашли=0 Тогда            
							РегОст=ВремРег.ПартииТоваров;
							РегОст.УстановитьЗначениеФильтра("Товар",Товар,1);
							//						РегОст.УстановитьЗначениеФильтра("Склад",Склад,1);
							РегОст.ОбратныйПорядок(1);
							РегОст.ВыбратьДвижения(ДокВОбработке.ДатаДок-180,ДокВОбработке);
							
							Нашли=0;
							Пока РегОст.ПолучитьДвижение()=1 Цикл
								
								Если РегОст.ТекущийДокумент()=Конт.ТекущийДокумент() Тогда
									Продолжить;
								КонецЕсли;        
								
								Если (РегОст.КодОперации=ВводПартииКупленныхТоваров) ИЛИ (РегОст.КодОперации=ЗакупкаТовара) Тогда
								Иначе
									Продолжить;
								КонецЕсли;
								
								Если РегОст.ОстатокТовара=0 Тогда
									Продолжить;
								КонецЕсли;
								
								Если (РегОст.Приход=1) Тогда
									Нашли=1;
									ДокОснование=РегОст.ТекущийДокумент();
									ДокПартии=РегОст.ПрихДокумент;
									Прервать;
								КонецЕсли;                
							КонецЦикла;
						КонецЕсли;
						
						Если Нашли=0 Тогда  
							Если Конт.ГрупповаяОбработка()=0 Тогда
								Сообщить("Себестоимость для Товара "+Товар.Код+" "+СокрЛП(Товар)+" не определена. Себестоимость взята из карточки товара!");
							КонецЕсли;
							СтоимостьПартии=Колво*Пересчет(Товар.ЦенаПриобретения,Товар.ВалютаЗакупки,КурсДляВалюты(Товар.ВалютаЗакупки,ДатаКурса),ВалютаУчета,ДатаКурса);
							ПродСтоимостьПартии=Колво*Пересчет(Товар.ЦенаПриобретения,Товар.ВалютаЗакупки,КурсДляВалюты(Товар.ВалютаЗакупки,ДатаКурса),ВалютаУчета,ДатаКурса);

						Иначе               
							СтоимостьПартии=Колво*?(ТипУчета="Упр",СтоимостьТовараПоРегистру(Товар,ДокОснование,"Упр",НДСПартии,1,,,"Стоимость")
							,СтоимостьТовараПоРегистру(Товар,ДокОснование,"Фин",НДСПартии,0,,,"Стоимость"));
							ПродСтоимостьПартии=Колво*?(ТипУчета="Упр",СтоимостьТовараПоРегистру(Товар,ДокОснование,"Упр",НДСПартии,1,,,"ПродСтоимость")
							,СтоимостьТовараПоРегистру(Товар,ДокОснование,"Фин",НДСПартии,0,,,"ПродСтоимость"));

							НДСПартии=Колво*НДСПартии; 
							
						КонецЕсли;
						
						Если СтоимостьПартии=0 Тогда
							СтоимостьПартии=Пересчет(Конт.Сумма,Конт.Валюта,ДатаКурса,ВалютаУчета,ДатаКурса);
							ПродСтоимостьПартии=Пересчет(Конт.Сумма,Конт.Валюта,ДатаКурса,ВалютаУчета,ДатаКурса);
							//						    НеПроводить(Конт,"Себестоимость для Товара "+Товар.Код+" "+СокрЛП(Товар)+" не определена!");
							//							Продолжить;
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					СтоимостьПартии=Пересчет(Конт.Сумма,Валюта,Курс,ВалютаУчета,ДатаКурса);
					ПродСтоимостьПартии=Пересчет(Конт.Сумма,Валюта,Курс,ВалютаУчета,ДатаКурса);
					//					СтоимостьПартии=Пересчет(Конт.Всего,Валюта,Курс,ВалютаУчета,ДатаКурса);
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					НДСПартии=Пересчет(Конт.НДС,Валюта,Курс,ВалютаУчета,ДатаКурса);
				КонецЕсли;
			ИначеЕсли ДокВОбработке.Вид()="ВводОстатковРеализации" Тогда
				Если ДокВОбработке.ПризнакРеализатора=Перечисление.ПризнакиРеализаторов.Реализатор_клиент Тогда
					СтоимостьПартии=Пересчет(Конт.Стоимость//ау-Конт.НДСстоимости
					,Валюта,Курс,ВалютаУчета,ДатаКурса);
					ПродСтоимостьПартии=Пересчет(Конт.Стоимость,Валюта,Курс,ВалютаУчета,ДатаКурса);
					НДСПартии=Пересчет(Конт.НДСстоимости,Валюта,Курс,ВалютаУчета,ДатаКурса);
				Иначе // Реализатор_фирма (запись приема на реализацию)
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					СтоимостьПартии=Пересчет(Конт.Сумма,Валюта,Курс,ВалютаУчета,ДатаКурса);
					ПродСтоимостьПартии=Пересчет(Конт.Сумма,Валюта,Курс,ВалютаУчета,ДатаКурса);
					
					//					СтоимостьПартии=Пересчет(Конт.Сумма+Конт.НДС,Валюта,Курс,ВалютаУчета,ДатаКурса);
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					НДСПартии=Пересчет(Конт.НДС,Валюта,Курс,ВалютаУчета,ДатаКурса);
				КонецЕсли;
			ИначеЕсли ДокВОбработке.Вид()="РасходнаяРеализатора" Тогда
				// этот случай описывает запись за реализатором партии товаров, отданных ему на реализацию
				Поз=СписокТоваров.НайтиЗначение(Товар);
				Если Поз>0 Тогда
					СтоимостьПартии=СписокСтоим.ПолучитьЗначение(Поз);
					НДСПартии=СписокНДС.ПолучитьЗначение(Поз);
				Иначе
					СтоимостьПартии=0;
					НДСПартии=0;
				КонецЕсли;
				ПродСтоимостьПартии=Пересчет(Конт.Сумма,Валюта,Курс,ВалютаУчета,ДатаКурса);
			ИначеЕсли ДокВОбработке.Вид()="ПеремещениеДепартамент" Тогда
				// этот случай описывает запись за реализатором партии товаров, отданных ему на реализацию
				//   				ПродСтоимостьПартии=Пересчет(Конт.Сумма,Валюта,Курс,ВалютаУчета,ДатаКурса);
				СтоимостьПартии=Пересчет(Конт.Себестоимость,Валюта,Курс,ВалютаУчета,ДатаКурса);
				ПродСтоимостьПартии=Пересчет(Конт.Себестоимость,Валюта,Курс,ВалютаУчета,ДатаКурса);
				
			Иначе  // "ВводПартийТоваров"
				// по другим документам используем партии Купленный и Принятый товар (Отданный отфильтровывается ниже)
				//***********************************************************
				//<<Алгоритм Успеха>> (begin)
				Если ДокВОбработке.Вид() = "РасходнаяНакладнаяНал" Тогда
					Если Конт.Сумма < 0 Тогда
						// возврат от покупателя товара, проданного через кассу
						// искать итоги смысла не имеет, потому, что как раз тут - то мы продавали этот товар
						// но надо найти какую-то партию, чтобы в нее вернуть
						// ищем существующую партию такого товара
						ТаблИтогов = СоздатьОбъект("ТаблицаЗначений"); 
						Рег2=СоздатьОбъект("Регистр.ПартииТоваров");
						Рег2.УстановитьЗначениеФильтра("Товар",Товар,1);
						Рег2.УстановитьЗначениеФильтра("Статус",Купленный,1);
						Рег2.ВыгрузитьИтоги(ТаблИтогов,1,1);
						ТаблИтогов.Сортировать("ПрихДокумент",1);
						
						Нашли=0;
						НашлиИтог=0;
						ТаблИтогов.ВыбратьСтроки();
						Пока ТаблИтогов.ПолучитьСтроку()>0 Цикл
							Если НЕ(ТаблИтогов.Товар=Товар) Тогда
								Если НашлиИтог=0 Тогда
									Продолжить;
								Иначе
									Прервать;
								КонецЕсли;
							КонецЕсли;
							НашлиИтог=1;
							
							Если НЕ(ТаблИтогов.Статус=Купленный) Тогда
								Продолжить;
							КонецЕсли;
							Если ТаблИтогов.ОстатокТовара>0 Тогда
								Нашли=1;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если Нашли=1 Тогда
							СтоимостьПартии=ТаблИтогов.Стоимость*Колво/ТаблИтогов.ОстатокТовара;
							ПродСтоимостьПартии=ТаблИтогов.ПродСтоимость*Колво/ТаблИтогов.ОстатокТовара;
							НДСПартии=ТаблИтогов.НДС*Колво/ТаблИтогов.ОстатокТовара;
							ДД=ТаблИтогов.ПрихДокумент;
							Клиент=ТаблИтогов.Контрагент;
							Партия=ТаблИтогов.Партия;
							СрокРеал=ТаблИтогов.СрокРеализации;
						Иначе
							// если не нашли существующую партию такого товара
							// (наверно он распродан)
							// тогда пытаемся найти последний проведенный документ прихода этого товара
							Рег2.ОбратныйПорядок(1);
							Рег2.ВыбратьДвижения(ДокВОбработке.ДатаДок-180,ДокВОбработке);
							Пока Рег2.ПолучитьДвижение()=1 Цикл
								Если Рег2.Приход=0 Тогда
									Продолжить;
								КонецЕсли;     
								Если Рег2.ПрихДокумент<>Рег2.ТекущийДокумент() Тогда
									Продолжить;
								КонецЕсли;
								Если Рег2.ТекущийДокумент()=ДокВОбработке.ТекущийДокумент() Тогда
									Продолжить;
								КонецЕсли;
								Если Рег2.Стоимость=0 Тогда
									Продолжить;
								КонецЕсли;           
								Если Рег2.ОстатокТовара=0 Тогда
									Продолжить;
								КонецЕсли;            
								СтоимостьПартии=Рег2.Стоимость*Колво/Рег2.ОстатокТовара;
								ПродСтоимостьПартии=Рег2.ПродСтоимость*Колво/Рег2.ОстатокТовара;
								НДСПартии=Рег2.НДС*Колво/Рег2.ОстатокТовара;
								ДД=Рег2.ПрихДокумент;
								Клиент=Рег2.Контрагент;
								Партия=ТаблИтогов.Партия;
								СрокРеал=ТаблИтогов.СрокРеализации;
								Нашли = 1;
								Прервать;
							КонецЦикла;
							Если Нашли=0 Тогда
								// если не нашли проведенный документ прихода этого товара
								// делаем последнюю попытку - найти непроведенный документ прихода
								Док=СоздатьОбъект("Документ.ПриходнаяНакладная");
								Док.УстановитьФильтр(0,1,0,1,1,1);
								Док.ОбратныйПорядок(1);
								Док.ВыбратьДокументы(ДокВОбработке.ДатаДок-180,ДокВОбработке);
								Пока Док.ПолучитьДокумент()=1 Цикл
									Если ТипУчета="Фин" Тогда
										Если Док.Фирма<>Конт.Фирма Тогда
											Продолжить;
										КонецЕсли;
										Если Док.ТипУчета=Упр Тогда
											Продолжить;
										КонецЕсли;
									Иначе
										Если Док.ТипУчета=Фин Тогда
											Продолжить;
										КонецЕсли;
									КонецЕсли;
									СписокТоваров=СоздатьОбъект("СписокЗначений");
									Док.ВыгрузитьТабличнуюЧасть(СписокТоваров,"Товар");
									Если СписокТоваров.Принадлежит(Товар)=1 Тогда
										НомСтроки=СписокТоваров.НайтиЗначение(Товар);
										Нашли=1;
										Прервать;
									КонецЕсли;
								КонецЦикла;
								Если Нашли=1 Тогда
									Док.ПолучитьСтрокуПоНомеру(НомСтроки);
									ДокКолво=Док.Количество*Док.Коэффициент;
									Если ДокКолво<>0 Тогда
										СтоимостьПартии=Колво*Пересчет((Док.Сумма-Док.НДС)/ДокКолво,Док.Валюта,Док.Курс,ВалютаУчета,ДатаКурса);
										ПродСтоимостьПартии=Колво*Пересчет((Док.Сумма-Док.НДС)/ДокКолво,Док.Валюта,Док.Курс,ВалютаУчета,ДатаКурса);
										НДСПартии=Колво*Пересчет(Док.НДС/ДокКолво,Док.Валюта,Док.Курс,ВалютаУчета,ДатаКурса);
										ДД=Док.ТекущийДокумент();
										Клиент=КлиентДок(Док);
										Партия=ТаблИтогов.Партия;
										СрокРеал=Док.СрокРеализации;
									Иначе
										Нашли=0;
									КонецЕсли;
								КонецЕсли;
								Если Нашли=0 Тогда
									НеПроводить(Конт,"Не обнаружено в системе сущ. партий и приходов возвращаемого товара "+Товар);
									Возврат 1;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						Если Нашли = 1 Тогда
							//гасим
							РегДвиж.ПрихДокумент = ДД.ТекущийДокумент();
							РегДвиж.Контрагент	= Клиент;
							РегДвиж.Статус = Купленный;
							РегДвиж.Партия = Партия; 
							РегДвиж.СрокРеализации = СрокРеал;
							РегДвиж.Стоимость = СтоимостьПартии;
							РегДвиж.ПродСтоимость = ПродСтоимостьПартии;
							РегДвиж.ОстатокТовара = Колво;
							РегДвиж.НДС = НДСПартии;
							РегДвиж.КодОперации = ВозвратОтПокупателяКупленногоТовара;
							РегДвиж.Оборот=-Пересчет(Конт.Цена*Колво,Валюта,Курс,ВалютаУчета,ДатаКурса);
							РегДвиж.НДСрасхода=Пересчет(Конт.НДС/(Конт.Количество*Конт.Коэффициент),Валюта,Курс,ВалютаУчета,ДатаКурса);
							РегДвиж.НДСприхода=-НДСПартии;
							РегДвиж.ДвижениеПриходВыполнить();
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				//<<Алгоритм Успеха>> (end) 
				//************************************************************
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				//СтоимостьПартии=Пересчет(Конт.Сумма-Конт.НДС,Валюта,Курс,ВалютаУчета,ДатаКурса);
				СтоимостьПартии=Пересчет(Конт.Сумма,Валюта,Курс,ВалютаУчета,ДатаКурса);
				ПродСтоимостьПартии=Пересчет(Конт.Сумма,Валюта,Курс,ВалютаУчета,ДатаКурса);
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				НДСПартии=Пересчет(Конт.НДС,Валюта,Курс,ВалютаУчета,ДатаКурса);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗнакДок=1 Тогда  // Погашаем по партиям только расходные документы, а приходные пусть сразу образуют партии
			Партии=СоздатьОбъект("СписокЗначений");
			СтатусПартии=СоздатьОбъект("СписокЗначений");
			КонтрагентПартии=СоздатьОбъект("СписокЗначений");
			СтоимостьПартии=СоздатьОбъект("СписокЗначений");
			ПродСтоимостьПартии=СоздатьОбъект("СписокЗначений");
			НДСПартии=СоздатьОбъект("СписокЗначений");
			ОстатокПартии=СоздатьОбъект("СписокЗначений");
			//			ВремРег=СоздатьОбъект("Регистры");
			//.			Рег=ВремРег.ПартииТоваров;
			
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			СписокСрокРеализ  = СоздатьОбъект("СписокЗначений"); 
			СписокПарт		  = СоздатьОбъект("СписокЗначений"); 
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			
			// Установим фильтрацию партий товаров
			Если ВидПроведения="Консигнация" Тогда
				// в этом специальном режиме мы учитываем отданный на реализацию товар
				Рег.УстановитьЗначениеФильтра("Фирма",ПромФирма,1);
				Рег.УстановитьЗначениеФильтра("Товар",Товар,1);
				//Рег.УстановитьЗначениеФильтра("Склад",ПромСклад,1);
				Рег.УстановитьЗначениеФильтра("Статус",Отданный,1);
				Рег.УстановитьЗначениеФильтра("Контрагент",Клиент,1);

			Иначе
				Если ДокВОбработке.Вид()="РасходнаяРеализатора" Тогда
					Если ДокВОбработке.ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа Тогда
						// на реализацию отдаем из партий Купленный товар
						СписокСтатусов.УдалитьВсе();
						СписокСтатусов.ДобавитьЗначение(Купленный);
						СписокСтатусов.ДобавитьЗначение(Произведенный);
						Рег.УстановитьЗначениеФильтра("Фирма",ПромФирма,1);
						Рег.УстановитьЗначениеФильтра("Товар",Товар,1);
						Рег.УстановитьЗначениеФильтра("Склад",ПромСклад,1);
						Рег.УстановитьЗначениеФильтра("Статус",СписокСтатусов,2);
						//Рег.УстановитьФильтр(ПромФирма,Товар,Купленный,,,ПромСклад,,);
					Иначе
						// возвращаем поставщику (по реализации) из партий Принятый товар
						Рег.УстановитьФильтр(ПромФирма,Товар,Принятый,Клиент,,ПромСклад);
					КонецЕсли;
				ИначеЕсли ДокВОбработке.Вид()="ПриходнаяРеализатора" Тогда
					Если ДокВОбработке.ПризнакНакладной=Перечисление.ПризнПрихНакл.Закупка Тогда
						// на реализацию принимаем в партии Принятый товар
						Рег.УстановитьФильтр(ПромФирма,Товар,Принятый,Клиент,,ПромСклад);
					Иначе
						// возвращаем от покупателя (по реализации) в партии Купленный товар
						Рег.УстановитьФильтр(ПромФирма,Товар,Купленный,Клиент,,ПромСклад);
					КонецЕсли;
				ИначеЕсли ДокВОбработке.Вид()="ВводОстатковРеализации" Тогда
					Если ДокВОбработке.ПризнакРеализатора=Перечисление.ПризнакиРеализаторов.Реализатор_фирма Тогда
						// на реализацию принимаем в партии Принятый товар
						Рег.УстановитьФильтр(ПромФирма,Товар,Принятый,Клиент,,ПромСклад);
					КонецЕсли;
				ИначеЕсли ДокВОбработке.Вид()="ПриходнаяНакладная" Тогда
					// закупаем и возвращаем в партии этим документом только Купленный товар
					Рег.УстановитьФильтр(ПромФирма,Товар,Купленный,,,ПромСклад);
				ИначеЕсли ДокВОбработке.Вид()="Списание" Тогда
					// Списываем из партий этим документом только Купленный товар
					Рег.УстановитьФильтр(ПромФирма,Товар,Купленный,,,ПромСклад);
				ИначеЕсли ДокВОбработке.Вид()="ВводОстатковТоваров" Тогда
					// устанавливаем в партии этим документом только Купленный товар
					Рег.УстановитьФильтр(ПромФирма,Товар,Купленный,,,ПромСклад);
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
				ИначеЕсли ДокВОбработке.Вид() = "ПеремещениеДепартамент" Тогда
					Если ДокВобработке.ПризнакПеремещения = Перечисление.ПризнакиПеремещения.Отправитель Тогда
						Рег.УстановитьФильтр(ПромФирма,Товар,Купленный,,,ПромСклад);
					Иначе
						Рег.УстановитьФильтр(ПромФирма,Товар,,,,ПромСклад,,);
					КонецЕсли;
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				Иначе // "РасходнаяНакладная" - в обычном режиме
					Рег.УстановитьФильтр(ПромФирма,Товар,,,,ПромСклад,,);
				КонецЕсли;
			КонецЕсли;
			
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			//Если Конт.ИтогиАктуальны() = 0 Тогда
			//	ВремРег.Актуальность(1);
			//	Рег.ВременныйРасчет(1);
			//	ВремРег.РассчитатьРегистрыНа(ДокВОбработке);
			//КонецЕсли;
			
			ТЗИтоги = СоздатьОбъект("ТаблицаЗначений");
			Рег.ВыгрузитьИтоги(ТЗИтоги,1,1);
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			//ТЗИтоги.ВыбратьСтроку();
			ТЗИтоги.Сортировать("СрокРеализации,ПрихДокумент");

			ТЗИтоги.НоваяКолонка("Приоритет","Число",1);
			ТЗИтоги.НоваяКолонка("Количество","Число",15,3);
			
			
			//************************************************************
			//<<Алгоритм Успеха>> (begin)
			Если ДокВОбработке.Вид() = "РасходнаяНакладная" Тогда
				Если ДокВобработке.ПризнакНакладной = Перечисление.ПризнРасхНакл.ВозвратПоставщику Тогда
					// все-таки надо возвращать в партию из которой продавали
					// для этого надо попытаться сдвинуть документ-основание в начало
					ТЗИтоги.ВыбратьСтроки();
					Пока ТЗИтоги.ПолучитьСтроку() > 0 Цикл
						Если ТЗИтоги.Контрагент=ДокВОбработке.Клиент Тогда
							ТЗИтоги.Приоритет=1;
						Иначе
							ТЗИтоги.Приоритет=2;
						КонецЕсли;
					КонецЦикла;
					
					ТЗИтоги.Сортировать("Приоритет,СрокРеализации,ПрихДокумент");
					
					Если ДокВОбработке.ДокументОснование.Выбран() = 1 Тогда
						НСтр = "";
						Если ТЗИтоги.НайтиЗначение(ДокВОбработке.ДокументОснование, НСтр, "ПрихДокумент") = 1 Тогда
							ТЗИтоги.СдвинутьСтроку(-НСтр, Нстр);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				Если Конт.ДатаДок>='18.03.15' Тогда
					//списываем в первую очередь ту партию со сроком, которая подходит под мин. срок реализации, указанный в заявке
					сзКлюч.УдалитьВсе();
					сзКлюч.ДобавитьЗначение(Конт.Счет);
					сзКлюч.ДобавитьЗначение(Товар);
					
					
					итСчетаТовары.Подмножество(сзКлюч,2,"иСчетТовар");				
					//итСчетаТовары.Показать("иСчетТовар");
					итСчетаТовары.ВыбратьСтроки("иСчетТовар");
					Если итСчетаТовары.ПолучитьСтроку("иСчетТовар")>0 Тогда
						ТЗИтоги.ВыбратьСтроки();
						Пока ТЗИтоги.ПолучитьСтроку() > 0 Цикл
							Если (ТЗИтоги.СрокРеализации>=итСчетаТовары.МинСрокРеализ) Тогда 
								
								Если ( ТЗИтоги.ОстатокТовара>Колво) И (Конт.ДатаДок<'01.11.17') Тогда
									ТЗИтоги.Приоритет=ТЗИтоги.Приоритет-2;
								Иначе
									ТЗИтоги.Приоритет=ТЗИтоги.Приоритет-1;									
								КонецЕсли;
							Иначе
								ТЗИтоги.Приоритет=ТЗИтоги.Приоритет+1;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;

					//меняем приоритет списания согласно факт сроку реализации, который был использован
					итКомплТовары.Подмножество(сзКлюч,2,"иСчетТовар");
					итКомплТовары.ВыбратьСтроки("иСчетТовар");
					Если итКомплТовары.ПолучитьСтроку("иСчетТовар")>0 Тогда
						ТЗИтоги.ВыбратьСтроки();
						Пока ТЗИтоги.ПолучитьСтроку() > 0 Цикл
							Если (ТЗИтоги.СрокРеализации=итКомплТовары.СрокРеализ)  Тогда 
								ТЗИтоги.Приоритет=ТЗИтоги.Приоритет-2;
								ТЗИтоги.Количество=итКомплТовары.СрокРеализКол;
							ИначеЕсли (ТЗИтоги.СрокРеализации=итКомплТовары.СрокРеализДоп) Тогда 
								ТЗИтоги.Приоритет=ТЗИтоги.Приоритет-1;
								ТЗИтоги.Количество=итКомплТовары.СрокРеализДопКол;
							ИначеЕсли ТЗИтоги.СрокРеализации <= ДокВОбработке.ДатаДок Тогда
								//просроченные партии со сроком списываем в последнюю очередь
								ТЗИтоги.Приоритет=99;
								Если ТЗИтоги.ОстатокТовара>0 Тогда
									Сообщить(Шаблон("Для товара [Товар.Код] [Товар] будет списан срок реализации [ТЗИтоги.СрокРеализации] в кол-ве [ТЗИтоги.ОстатокТовара] [Товар.БазоваяЕдиницаИзмерения]"));
								КонецЕсли;
							Иначе
								ТЗИтоги.Приоритет=ТЗИтоги.Приоритет+1;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					
					ТЗИтоги.Сортировать("Приоритет,СрокРеализации,ПрихДокумент");				
					
				КонецЕсли;
				
								
			КонецЕсли;
			//<<Алгоритм Успеха>> (end) 
			//************************************************************
			
			
			ТЗИтоги.ВыбратьСтроки();
			Пока ТЗИтоги.ПолучитьСтроку() > 0 Цикл
				Если ВидПроведения = "Обычный" Тогда
					Если ТЗИтоги.Статус = Отданный Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если ТЗИтоги.Количество>0 Тогда
					НайденныйОстатокПартии = Мин(ТЗИтоги.Количество,ТЗИтоги.ОстатокТовара);
				Иначе
					НайденныйОстатокПартии 			 = ТЗИтоги.ОстатокТовара;
				КонецЕсли;
				НайденнаяПродСебестоимостьПартии = ТЗИтоги.ПродСтоимость/?(НайденныйОстатокПартии=0,1,НайденныйОстатокПартии);
				НайденнаяСебестоимостьПартии 	 = ТЗИтоги.Стоимость/?(НайденныйОстатокПартии=0,1,НайденныйОстатокПартии);
				НайденнаяНДСПартии 			 	 = ТЗИтоги.НДС/?(НайденныйОстатокПартии=0,1,НайденныйОстатокПартии);
				
				//***************З.А.********23.02.05****Исправление минусовых партий****Начало****
				Если (НайденныйОстатокПартии = 0)или(НайденныйОстатокПартии < 0) Тогда
					Продолжить;
				КонецЕсли;     
				//***************З.А.********23.02.05****Исправление минусовых партий****Конец****
				
				Партия = ТЗИтоги.ПрихДокумент;
				
				Если Партия.Выбран()=1 Тогда
					Если Партия<>ДокВОбработке Тогда
						Если РежимПогашения(ЗнакУчета(Партия,,ВидПроведения),ДокВОбработке,,ВидПроведения)="Зачет" Тогда
							// пропускаем документы на Зачет, т.к. по FIFO/LIFO нам надо только погашать!
							Продолжить;   //Сообщить("Зачет");
						КонецЕсли;
					Иначе
						// т.е. перепроводим документ, который уже сидит в регистре как кредитный документ
						// значит тогда его надо по новой на это же место ставить (лечить)
						
						РегДвиж.Статус     = ТЗИтоги.Статус;
						РегДвиж.Контрагент = ТЗИтоги.Контрагент; 
						//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
						РегДвиж.Партия	   = ТЗИтоги.Партия;
						РегДвиж.СрокРеализации = ТЗИтоги.СрокРеализации;
						//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
						ИсполнитьПогашениеТов(РегДвиж,ТипУчета,Партия,Конт,НайденнаяСебестоимостьПартии,НайденныйОстатокПартии,НайденнаяПродСебестоимостьПартии,НайденнаяНДСПартии,Колво,СписокСумм,СписокПартий,СписокТоваров,СписокСтоим,СписокНДС,,ВидПроведения,СписокКоличество);
						
						Если Колво=0 Тогда
							Прервать;
						КонецЕсли;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				// Купленные товары продаем вперед взятых на реализацию
				Если (ТипУчета="Упр") Тогда
					Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO Тогда
						// НаправлениеСортировки по убыванию
						СтратегияПродажи=?(ТЗИтоги.Статус=Купленный,"2","1");
					Иначе
						// НаправлениеСортировки по возрастанию
						СтратегияПродажи=?(ТЗИтоги.Статус=Купленный,"1","2");
					КонецЕсли;
				ИначеЕсли (ТипУчета="Фин") Тогда
					Если Конт.Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO Тогда
						// НаправлениеСортировки по убыванию
						СтратегияПродажи=?(ТЗИтоги.Статус=Купленный,"2","1");
					Иначе
						// НаправлениеСортировки по возрастанию
						СтратегияПродажи=?(ТЗИтоги.Статус=Купленный,"1","2");
					КонецЕсли;
				КонецЕсли;
				Если конт.ДатаДок > Дата(2007,7,1) Тогда
					ПозицияСоСтратегией=СтратегияПродажи+глДополнитьСтроку(Строка(ТЗИтоги.НомерСтроки),"0",3,1);
				Иначе
					ПозицияСоСтратегией=СтратегияПродажи+Строка(ТЗИтоги.НомерСтроки);
				КонецЕсли;
				Партии.ДобавитьЗначение(Партия,ПозицияСоСтратегией);
				СтатусПартии.ДобавитьЗначение(ТЗИтоги.Статус,ПозицияСоСтратегией);
				КонтрагентПартии.ДобавитьЗначение(ТЗИтоги.Контрагент,ПозицияСоСтратегией);
				СтоимостьПартии.ДобавитьЗначение(НайденнаяСебестоимостьПартии,ПозицияСоСтратегией);
				ПродСтоимостьПартии.ДобавитьЗначение(НайденнаяПродСебестоимостьПартии,ПозицияСоСтратегией);
				ОстатокПартии.ДобавитьЗначение(НайденныйОстатокПартии,ПозицияСоСтратегией);
				НДСПартии.ДобавитьЗначение(НайденнаяНДСПартии,ПозицияСоСтратегией);
				
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				СписокСрокРеализ.ДобавитьЗначение(ТЗИтоги.СрокРеализации,ПозицияСоСтратегией); 
				СписокПарт.ДобавитьЗначение(ТЗИтоги.Партия,ПозицияСоСтратегией); 
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			КонецЦикла;
			
			// теперь в списках собраны все Документы по ПартииТоваров
			// надо погашать по ФИФО или ЛИФО (в зависимости от Константы).
			// если метод расчета себестоимости - ПоСреднему, то оставшиеся в системе
			// (например оставшиеся в наследство от учета по FIFO или ЛИФО, после переключения с него на метод ПоСреднему)
			// тоже погашаются по FIFO.
			
			РазмСпискаПартии = Партии.РазмерСписка();
			Если РазмСпискаПартии>1 Тогда
				Если (ТипУчета="Упр") Тогда
					Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO Тогда
						НаправлениеСортировки=1;// по убыванию
					Иначе
						НаправлениеСортировки=0;// по возрастанию
					КонецЕсли;
				ИначеЕсли (ТипУчета="Фин") Тогда
					Если Конт.Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO Тогда
						НаправлениеСортировки=1;// по убыванию
					Иначе
						НаправлениеСортировки=0;// по возрастанию
					КонецЕсли;
				КонецЕсли;
				Партии.СортироватьПоПредставлению(НаправлениеСортировки);
				СтатусПартии.СортироватьПоПредставлению(НаправлениеСортировки);
				КонтрагентПартии.СортироватьПоПредставлению(НаправлениеСортировки);
				СтоимостьПартии.СортироватьПоПредставлению(НаправлениеСортировки);
				ПродСтоимостьПартии.СортироватьПоПредставлению(НаправлениеСортировки);
				ОстатокПартии.СортироватьПоПредставлению(НаправлениеСортировки);
				НДСПартии.СортироватьПоПредставлению(НаправлениеСортировки);
				
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				СписокСрокРеализ.СортироватьПоПредставлению(НаправлениеСортировки); 
				СписокПарт.СортироватьПоПредставлению(НаправлениеСортировки); 
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			КонецЕсли;
			
			// а теперь надо погашать документы Партий
			Для ИндДвиж=1 По РазмСпискаПартии Цикл
				Партия=Партии.ПолучитьЗначение(ИндДвиж);
				Статус=СтатусПартии.ПолучитьЗначение(ИндДвиж);
				Контрагент=КонтрагентПартии.ПолучитьЗначение(ИндДвиж);
				НайденнаяСебестоимостьПартии=СтоимостьПартии.ПолучитьЗначение(ИндДвиж);
				НайденныйОстатокПартии=ОстатокПартии.ПолучитьЗначение(ИндДвиж);
				НайденнаяНДСПартии=НДСПартии.ПолучитьЗначение(ИндДвиж);
				НайденнаяПродСебестоимостьПартии=ПродСтоимостьПартии.ПолучитьЗначение(ИндДвиж);
				
				РегДвиж.Статус=Статус;
				РегДвиж.Контрагент=Контрагент; 
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				РегДвиж.Партия	   = СписокПарт.ПолучитьЗначение(ИндДвиж);
				РегДвиж.СрокРеализации = СписокСрокРеализ.ПолучитьЗначение(ИндДвиж);
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				ИсполнитьПогашениеТов(РегДвиж,ТипУчета,Партия,Конт,НайденнаяСебестоимостьПартии,НайденныйОстатокПартии,НайденнаяПродСебестоимостьПартии,НайденнаяНДСПартии,Колво,СписокСумм,СписокПартий,СписокТоваров,СписокСтоим,СписокНДС,,ВидПроведения,СписокКоличество);
				
				Если Колво=0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Окр(Колво,2)<>0 Тогда
			// если после всей этой операции осталась кое что в Колво,
			// а Партии, которые надо погашать исчерпаны,
			// то надо выдать сообщение об этом и записать текущий документ как Партию с отриц. знаком
			РегДвиж.ОстатокТовара=Колво;
			
			Если ЗнакДок=1 Тогда
				// значит мы расходуем товар
				Сообщить ("При проведении партий товара по "+ДокВОбработке+" от "+Конт.ДатаДок+" по товару "
				+Товар.Код+" "+СокрЛП(Товар)+" не распределилось по партиям "+Колво+" "+Товар.БазоваяЕдиницаИзмерения);
				
				// Здесь мы стоимости и НДС не знаем
				//РегДвиж.Стоимость=0;
				РегДвиж.ПродСтоимость=0;
				//РегДвиж.НДС=0;
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				Если глЕстьРеквизитШапки("СтавкаНДС", Конт.Вид()) = 0 Тогда
					ПроцНДС=ПроцентНДС(Товар.СтавкаНДС);
				Иначе
					ПроцНДС=ПроцентНДС(Конт.СтавкаНДС);
				КонецЕсли;
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				ПромСум_=Колво*Товар.ЦенаПриобретения;
				ПромНДС_=ПромСум_*(ПроцНДС/(100+ПроцНДС));
				ПромВал=Товар.ВалютаЗакупки;
				РегДвиж.Стоимость=Пересчет(ПромСум_-ПромНДС_,ПромВал,Курс,ВалютаУчета,ДатаКурса);
				РегДвиж.ПродСтоимость=Пересчет(ПромСум_-ПромНДС_,ПромВал,Курс,ВалютаУчета,ДатаКурса);
				РегДвиж.НДС=Пересчет(ПромНДС_,ПромВал,Курс,ВалютаУчета,ДатаКурса);
				
				
				Если (ДокВОбработке.Вид()="РасходнаяНакладная") или (ДокВОбработке.Вид()="РасходнаяНакладнаяНал") Тогда
					РегДвиж.Оборот=Пересчет(Конт.Цена*Колво,Валюта,Курс,ВалютаУчета,ДатаКурса);
					
					//РегДвиж.НП=Пересчет(Конт.СуммаНП/Конт.Количество*Колво,Валюта,Курс,ВалютаУчета,ДатаКурса);
					РегДвиж.НДСрасхода=Пересчет(Конт.НДС*Колво/(Конт.Количество*Конт.Коэффициент),Валюта,Курс,ВалютаУчета,ДатаКурса);
					РегДвиж.НДСприхода=0;  // НДСприхода в этом случае не знаем!!!
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				ИначеЕсли (ДокВОбработке.Вид()="ПеремещениеДепартамент") Тогда
					Если ДокВобработке.ПризнакПеремещения = Перечисление.ПризнакиПеремещения.Отправитель Тогда
						РегДвиж.Оборот=Пересчет(Конт.Цена*Колво,Валюта,Курс,ВалютаУчета,ДатаКурса);
						РегДвиж.НДСрасхода=Пересчет(Конт.НДС*Колво/(Конт.Количество*Конт.Коэффициент),Валюта,Курс,ВалютаУчета,ДатаКурса);
						РегДвиж.НДСприхода=0;  // НДСприхода в этом случае не знаем!!!
					КонецЕсли;
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				ИначеЕсли    (ДокВОбработке.Вид()="ОтчетРеализатора")
				ИЛИ (ДокВОбработке.Вид()="ИнвентаризацияРеализатора") Тогда
					РегДвиж.Оборот=0;         // Оборот в этом случае не знаем!!!
					РегДвиж.НП=0;
					РегДвиж.НДСрасхода=0;     // НДСрасхода в этом случае не знаем!!!
					РегДвиж.НДСприхода=0;      // НДСприхода в этом случае не знаем!!!
				КонецЕсли;
				
				Если ВидПроведения="Консигнация" Тогда
					РегДвиж.Статус=Отданный;
					РегДвиж.Контрагент=Клиент;
					РегДвиж.ПродСтоимость=Пересчет(Конт.Цена*Колво,Валюта,Курс,ВалютаУчета,ДатаКурса);
				Иначе
					Если  ДокВОбработке.Вид()="РасходнаяРеализатора" Тогда
						РегДвиж.Контрагент=Клиент;
						Если ДокВОбработке.ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа Тогда
							РегДвиж.Статус=Купленный;
						Иначе
							РегДвиж.Статус=Принятый;
						КонецЕсли;
					Иначе
						РегДвиж.Контрагент=""; // при создании Партии по расходу Контрагент (т.е. чей это товар) неизвестен
						РегДвиж.Статус=""; // это неизвестный Статус создаваемой партии
					КонецЕсли;
				КонецЕсли;
			Иначе//Если ЗнакУчета(ДокВОбработке,ВидТовара)=-1 Тогда
				// значит мы приходуем товар
				РегДвиж.Стоимость=СтоимостьПартии;
				РегДвиж.ПродСтоимость=СтоимостьПартии;
				//РегДвиж.ПродСтоимость = 0;
				РегДвиж.НДС=НДСПартии;
				
				Если  ДокВОбработке.Вид()="ПриходнаяНакладная" Тогда
					Если ДокВОбработке.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя Тогда
						// возвращаем от покупателя Купленный товар (сторнируем оборот и НДСрасхода)
						РегДвиж.Оборот=-Пересчет(Конт.Цена*Колво,Валюта,Курс,ВалютаУчета,ДатаКурса);
						//???РегДвиж.НП=-Пересчет(Конт.СуммаНП/Конт.Количество*Колво,Валюта,Курс,ВалютаУчета,ДатаКурса);
						РегДвиж.НДСрасхода=-Пересчет(Конт.НДС*Колво/(Конт.Количество*Конт.Коэффициент),Валюта,Курс,ВалютаУчета,ДатаКурса);
						//                        РегДвиж.НДСприхода=-НайденнаяНДСПартии*Колво;
						//                        РегДвиж.НДСприхода=-НДСПартии*Колво;
						РегДвиж.НДСприхода=-НДСПартии;
					КонецЕсли;
				КонецЕсли;
				
				Если ВидПроведения="Консигнация" Тогда
					РегДвиж.Статус=Отданный;
					РегДвиж.ПродСтоимость=ПродСтоимостьПартии;
					РегДвиж.НДС=0;
					Попытка
						РегДвиж.СрокРеализации = Конт.СрокРеализ;
					Исключение
					КонецПопытки;
					РегДвиж.Склад = "";
					
					//Если ЗнакДок=-1 Тогда //приходуем по инвентуре 
					//	РегДвиж.ОстатокТовара = Абс_(Колво);
					//КонецЕсли;
					
					//РегДвиж.ПродСтоимость=ПродСтоимостьПартии;
					//РегДвиж.НДСрасхода=Пересчет(Конт.НДС,Валюта,Курс,ВалютаУчета,ДатаКурса);
				Иначе
					Если  ДокВОбработке.Вид()="ПриходнаяРеализатора" Тогда
						Если ДокВОбработке.ПризнакНакладной=Перечисление.ПризнПрихНакл.Закупка Тогда
							// на реализацию принимаем в партии Принятый товар
							РегДвиж.Статус=Принятый;
						Иначе
							// возвращаем от покупателя (по реализации) в партии Купленный товар
							РегДвиж.Статус=Купленный;
						КонецЕсли;
					ИначеЕсли ДокВОбработке.Вид()="ВводОстатковРеализации" Тогда
						РегДвиж.Статус=Принятый;
					ИначеЕсли ДокВОбработке.Вид()="ВводОстатковТоваров" Тогда    
						Если ДокВОбработке.ЗаписатьПоставщикаТовара=1 Тогда
							РегДвиж.Контрагент=Товар.Поставщик;
						КонецЕсли;
						
						//                        Если Товар.ВидТовара=Перечисление.ВидыТоваров.Блюдо Тогда
						//                            РегДвиж.Статус=Произведенный;
						//                       Иначе
						РегДвиж.Статус=Купленный;
						//                        КонецЕсли;
					Иначе
						// по другим документам используем партии Купленный
						РегДвиж.Статус=Купленный;
					КонецЕсли;
				КонецЕсли;
				Если (РегДвиж.Статус=Купленный) ИЛИ (РегДвиж.Статус=Произведенный) Тогда
					Если (ТипУчета="Упр") Тогда
						Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда
							РегДвиж.Контрагент="";
							//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
							РегДвиж.Партия = "";
							РегДвиж.СрокРеализации = "";         
							//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
						Иначе
							
							Если ДокВОбработке.Вид()="ВводОстатковТоваров" Тогда    
								Если ДокВОбработке.ЗаписатьПоставщикаТовара=1 Тогда
									РегДвиж.Контрагент=Товар.Поставщик;
								КонецЕсли;                                         
							Иначе
								РегДвиж.Контрагент = Клиент;
							КонецЕсли;
							
							//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
							//***********************************************************
							//<<Алгоритм Успеха>> (begin)
							//
							Если Конт.Вид()="ПриходнаяРеализатора" Тогда
								// нада восстанавливать партию при возврате
								Если Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя Тогда
									Если Конт.ДокументОснование.Выбран()=0 Тогда
										// надо генерить новую партию
										РегДвиж.Партия = ПолучитьПустоеЗначение("Партии");
									Иначе
										РегДвиж.Партия = Партия;
										РегДвиж.ПрихДокумент = ДокПартии;
									КонецЕсли;
								КонецЕсли;
							Иначе
								РегДвиж.Партия = глЗаполнитьПартию(Конт,Конт.Партия);
							КонецЕсли;                 
							Попытка
								//<<Алгоритм Успеха>> (end) 
								//************************************************************
								РегДвиж.СрокРеализации = РегДвиж.Партия.СрокРеализации;         
							Исключение
							КонецПопытки;
							//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
						КонецЕсли;
					ИначеЕсли (ТипУчета="Фин") Тогда
						Если Конт.Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда
							РегДвиж.Контрагент="";
							//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
							РегДвиж.Партия = "";
							РегДвиж.СрокРеализации = "";         
							//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
						Иначе
							РегДвиж.Контрагент = Клиент;
							//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
							//***********************************************************
							//<<Алгоритм Успеха>> (begin)
							//
							Если Конт.Вид()="ПриходнаяРеализатора" Тогда
								// нада восстанавливать партию при возврате
								Если Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя Тогда
									Если Конт.ДокументОснование.Выбран()=0 Тогда
										// надо генерить новую партию
										РегДвиж.Партия = ПолучитьПустоеЗначение("Партии");
									Иначе
										РегДвиж.Партия = ДокПартии;
									КонецЕсли;
								КонецЕсли;
							Иначе
								РегДвиж.Партия = глЗаполнитьПартию(Конт,Конт.Партия);
							КонецЕсли;                 
							Попытка
								//<<Алгоритм Успеха>> (end) 
								//************************************************************
								РегДвиж.СрокРеализации = РегДвиж.Партия.СрокРеализации;         
							Исключение
							КонецПопытки;
							//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
						КонецЕсли;
					КонецЕсли;
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				ИначеЕсли (РегДвиж.Статус = Принятый) Тогда
					РегДвиж.Контрагент = Клиент;
					Если Конт.Вид()="ПриходнаяРеализатора" Тогда
						Если Конт.ПризнакНакладной = Перечисление.ПризнПрихНакл.Закупка Тогда
							РегДвиж.Партия = глЗаполнитьПартию(Конт,Конт.Партия);
						КонецЕсли;
					Иначе
						РегДвиж.Партия = глЗаполнитьПартию(Конт,Конт.Партия);
					КонецЕсли;	
					Попытка
						РегДвиж.СрокРеализации = РегДвиж.Партия.СрокРеализации;         
					Исключение
					КонецПопытки; 
					
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
				Иначе
					РегДвиж.Контрагент=Клиент;
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					РегДвиж.Партия = "";
					//РегДвиж.СрокРеализации = "";         
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				КонецЕсли;
			КонецЕсли;
			
			Если (ТипУчета="Упр") Тогда
				Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда
					РегДвиж.ПрихДокумент=?(РегДвиж.Статус=Купленный,"",ДокВОбработке);
				Иначе
					Если  ДокВОбработке.Вид()="ПриходнаяРеализатора" Тогда
						Если Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя Тогда
						//все уже прописано раньше
						Иначе
							РегДвиж.ПрихДокумент=ДокВОбработке;
						КонецЕсли;
					Иначе
						РегДвиж.ПрихДокумент=ДокВОбработке;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли (ТипУчета="Фин") Тогда
				Если Конт.Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда
					РегДвиж.ПрихДокумент=?(РегДвиж.Статус=Купленный,"",ДокВОбработке);
				Иначе
					РегДвиж.ПрихДокумент=ДокВОбработке;
				КонецЕсли;
			КонецЕсли;
			
			РегДвиж.КодОперации=КодОперации(ДокВОбработке,ТипУчета);
			ОкруглениеДвиженияПартииТовара(РегДвиж,ТипУчета);
			Если ЗнакДок=1 Тогда
				РегДвиж.ДвижениеРасходВыполнить();
			Иначе//Если ЗнакДок=-1 Тогда
				РегДвиж.ДвижениеПриходВыполнить();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; //по строкам
	РегП=0;
	Возврат 0;
КонецФункции


//-----------------------------------------------
Функция КодОперацииИздержек(Режим="Оплачено",СтатьяИздержекУслуги) Экспорт
	Если Режим="Оплачено" Тогда
		Если ПустЗнач(СтатьяИздержекУслуги)=1 Тогда
			Возврат ВыполнениеОплаченнойУслуги;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.Транспорт Тогда
			Возврат ВыполнениеОплаченнойУслугиТранспорт;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.ОплатаТруда Тогда
			Возврат ВыполнениеОплаченнойУслугиОплатаТруда;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.Отчисления Тогда
			Возврат ВыполнениеОплаченнойУслугиОтчисления;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.АрендаОС Тогда
			Возврат ВыполнениеОплаченнойУслугиАрендаОС;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.АмортизацияОС Тогда
			Возврат ВыполнениеОплаченнойУслугиАмортизацияОС;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.РемонтОС Тогда
			Возврат ВыполнениеОплаченнойУслугиРемонтОС;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.ИзносМБП Тогда
			Возврат ВыполнениеОплаченнойУслугиИзносМБП;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.Топливо Тогда
			Возврат ВыполнениеОплаченнойУслугиТопливо;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.Хранение Тогда
			Возврат ВыполнениеОплаченнойУслугиХранение;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.Реклама Тогда
			Возврат ВыполнениеОплаченнойУслугиРеклама;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.Проценты Тогда
			Возврат ВыполнениеОплаченнойУслугиПроценты;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.Потери Тогда
			Возврат ВыполнениеОплаченнойУслугиПотери;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.Тара Тогда
			Возврат ВыполнениеОплаченнойУслугиТара;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.Прочие Тогда
			Возврат ВыполнениеОплаченнойУслугиПрочие;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.НеПринимаемые Тогда
			Возврат ВыполнениеОплаченнойУслугиНеПринимаемые;
		КонецЕсли;
	Иначе
		Если ПустЗнач(СтатьяИздержекУслуги)=1 Тогда
			Возврат НеоплаченноеВыполнениеУслуги;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.Транспорт Тогда
			Возврат НеоплаченноеВыполнениеУслугиТранспорт;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.ОплатаТруда Тогда
			Возврат НеоплаченноеВыполнениеУслугиОплатаТруда;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.Отчисления Тогда
			Возврат НеоплаченноеВыполнениеУслугиОтчисления;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.АрендаОС Тогда
			Возврат НеоплаченноеВыполнениеУслугиАрендаОС;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.АмортизацияОС Тогда
			Возврат НеоплаченноеВыполнениеУслугиАмортизацияОС;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.РемонтОС Тогда
			Возврат НеоплаченноеВыполнениеУслугиРемонтОС;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.ИзносМБП Тогда
			Возврат НеоплаченноеВыполнениеУслугиИзносМБП;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.Топливо Тогда
			Возврат НеоплаченноеВыполнениеУслугиТопливо;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.Хранение Тогда
			Возврат НеоплаченноеВыполнениеУслугиХранение;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.Реклама Тогда
			Возврат НеоплаченноеВыполнениеУслугиРеклама;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.Проценты Тогда
			Возврат НеоплаченноеВыполнениеУслугиПроценты;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.Потери Тогда
			Возврат НеоплаченноеВыполнениеУслугиПотери;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.Тара Тогда
			Возврат НеоплаченноеВыполнениеУслугиТара;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.Прочие Тогда
			Возврат НеоплаченноеВыполнениеУслугиПрочие;
		ИначеЕсли СтатьяИздержекУслуги=Перечисление.СтатьиИздержек.НеПринимаемые Тогда
			Возврат НеоплаченноеВыполнениеУслугиНеПринимаемые;
		КонецЕсли;
	КонецЕсли;
КонецФункции
//---------------------------
Процедура семЗаписатьПросроченоДней( пТекДок, РегистрУчета )
	Если РегистрУчета.Вид() <> "ВзаиморасчетыПокупателей" Тогда Возврат; КонецЕсли;
	пПогДок = РегистрУчета.КредДокумент;
	Если глЕстьРеквизитШапки("ДатаОплаты", пПогДок.Вид()) = 1 Тогда
		//РегистрУчета.ПросроченоДней = Макс( 0, пТекДок.ДатаДок-пПогДок.ДатаОплаты );
		РегистрУчета.ПросроченоДней = пТекДок.ДатаДок-пПогДок.ДатаОплаты;
	КонецЕсли;
КонецПроцедуры

Процедура глСписаниеПросроченногоДолга(Конт) Экспорт
	РегистрУчета=Конт.Регистр.СостояниеДолгов;
	// для отбора коркретных долгов погашаемых по выписке
	ТаблицаДолгов=СоздатьОбъект("ТаблицаЗначений");
	ТаблицаДолгов.НоваяКолонка("КредДокумент");
	ТаблицаДолгов.НоваяКолонка("Сумма","Число",17,2);
	// для отбора по конкретному документу долга
	ТабДолгов=СоздатьОбъект("ТаблицаЗначений");
	
	Реги=СоздатьОбъект("Регистры");
	РегДл=Реги.СостояниеДолгов;
	РегВз=Реги.ВзаиморасчетыПокупателей;
	РегВз.ВыбратьДвиженияДокумента(Конт.ТекущийДокумент());
	Пока (РегВз.ПолучитьДвижение()=1) и (РегВз.Долг > 0) Цикл
		Если РегВз.Расход=1 Тогда
			ТаблицаДолгов.НоваяСтрока();
			ТаблицаДолгов.КредДокумент=РегВз.КредДокумент;
			ТаблицаДолгов.Сумма=РегВз.Долг;
		КонецЕсли;
	КонецЦикла;
	ТаблицаДолгов.Свернуть("КредДокумент","Сумма");
	Если ТаблицаДолгов.КоличествоСтрок()=0 Тогда
		Возврат;
	КонецЕсли;
	СписокКредДок=СоздатьОбъект("СписокЗначений");
	РегДл.УстановитьЗначениеФильтра("ПоДокументу",СписокКредДок,2);
	ТаблицаДолгов.Выгрузить(СписокКредДок,,,"КредДокумент");
	Если Конт.ИтогиАктуальны()=0 Тогда
		РегДл.ВременныйРасчет(1);
		Реги.Актуальность(1);
		Реги.РассчитатьРегистрыНа(Конт.ТекущийДокумент());
	КонецЕсли;
	ТаблицаДолгов.ВыбратьСтроки();
	Пока ТаблицаДолгов.ПолучитьСтроку() = 1 Цикл
		РегДл.УстановитьЗначениеФильтра("ПоДокументу",ТаблицаДолгов.КредДокумент,1);
		РегДл.ВыгрузитьИтоги(ТабДолгов,1,1);
		ВсегоПогашать=ТаблицаДолгов.Сумма;
		ТабДолгов.ВыбратьСтроки();
		Пока ТабДолгов.ПолучитьСтроку() = 1 Цикл
			Погашаем=Мин(ВсегоПогашать,ТабДолгов.Долг);
			Если Погашаем <=0 Тогда
				Прервать;
			КонецЕсли;
			РегистрУчета.Клиент=ТабДолгов.Клиент;
			РегистрУчета.СпособВоздействия=ТабДолгов.СпособВоздействия;
			РегистрУчета.Инкассо=ТабДолгов.Инкассо;
			РегистрУчета.ПоДокументу=ТабДолгов.ПоДокументу;
			РегистрУчета.Долг=Погашаем;
			РегистрУчета.ДвижениеРасходВыполнить();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсполнитьПогашение(Конт,РегистрУчета,НайденныйДок,ВидОтгрузки,ТекДок,НайденныйДолг,СумПогаш,ТипУчета,ВидТовара="Товар",НДСУслуги,СтатьяИздержекУслуги)  Экспорт
	// Эта процедура вызывается во время проведения по регистрам Учета ФИФО
	// Эта процедура реально выполняет проведение регистров
	
	// Определяем Знак кредита (кто кому)
	// если Долг<0 - мы должны клиенту,
	// если Долг>0 - Клиент должен нам.
	
	ИмяРегистрУчета=РегистрУчета.Вид();
	ЗнакДок=ЗнакУчета(ТекДок);
	Если НайденныйДок.Вид()="ДвиженияДенежныхСредств" Тогда
		Знак=?(НайденныйДолг>0,1,-1);
	Иначе
		Знак=ЗнакУчета(НайденныйДок);
	КонецЕсли;
	
	ВидДок=ТекДок.Вид();
	Если (ВидДок="ВводОстатковРеализации") Тогда
		ПродаемПринятыйТовар=1;
	ИначеЕсли (ВидДок="ПриходнаяРеализатора") Тогда
		Если (ТекДок.ПризнакНакладной=Перечисление.ПризнПрихНакл.Закупка) Тогда
			ПродаемПринятыйТовар=1;
		Иначе
			ПродаемПринятыйТовар=0;
		КонецЕсли;
	Иначе
		ПродаемПринятыйТовар=0;
	КонецЕсли;
	
	Если (ИмяРегистрУчета="ВзаиморасчетыПоставщиков") И 
	((НайденныйДок.Вид()="РасходнаяНакладная")
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	или (НайденныйДок.Вид()="МарочныйОтчет")
	или (НайденныйДок.Вид()="РасходнаяНакладнаяНал")
	или (НайденныйДок.Вид()="Списание")
	или (НайденныйДок.Вид()="ПеремещениеДепартамент"))
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Тогда
		Знак=-Знак;
	КонецЕсли;
	
	// Определяем Режим учета кредита (погашение или зачет)
	// именно для найденного КредДокумента и именно по нашему учитываемому документу
	// Режим = "Погашение" при погашении кредита
	// Режим = "Зачет" при начислении кредита
	Режим=РежимПогашения(Знак,ТекДок,ВидТовара);
	
	РегистрУчета.КредДокумент=НайденныйДок;
	
	// Теперь наверное все знаем чтобы провести правильно документ
	Если Режим="Погашение" Тогда
		// Погашаем найденный документ
		РегистрУчета.ВидОтгрузки=ВидОтгрузки;
		Если ЗнакДок=1 Тогда
			// значит мы погашаем авансовую выплату клиента
			// или это значит, что мы выплачиваем клиенту за отгруженный товар
			Если ИмяРегистрУчета="ВзаиморасчетыПокупателей" Тогда
				Если     (ВидДок="ДвиженияДенежныхСредств")
				ИЛИ (ВидДок="РасходныйОрдерТБ") Тогда
					Если     (НайденныйДок.Вид()="ДвиженияДенежныхСредств")
					ИЛИ (НайденныйДок.Вид()="ПриходныйОрдерТБ") Тогда
						РегистрУчета.КодОперации=ВозвратАванса;
					Иначе
						РегистрУчета.КодОперации=ВозвратОплаты;
					КонецЕсли;
				Иначе
					Если ВидТовара="Товар" Тогда
						РегистрУчета.КодОперации=ОтгрузкаОплаченногоТовараКупленного;
					Иначе
						РегистрУчета.КодОперации=ВыполнениеОплаченнойУслуги;
					КонецЕсли;
				КонецЕсли;
			Иначе   //"ВзаиморасчетыПоставщиков"
				Если (ВидДок="РасходнаяНакладная") Тогда
					РегистрУчета.КодОперации=ВозвратПоставщикуНеоплаченногоТовара;
				Иначе
					//                    Если (ТипУчета="Упр") Тогда
					//                        РегистрУчета.КодОперации=ОплатаТоваровИУслуг;
					//                    ИначеЕсли (ТипУчета="Фин") Тогда
					Если ВидОтгрузки=ОтгрузкаТоваровПринятых Тогда
						РегистрУчета.КодОперации=ОплатаТоваровПринятых;
					Иначе //Если ВидОтгрузки=ОтгрузкаТоваровИУслуг Тогда
						РегистрУчета.КодОперации=ОплатаТоваровИУслуг;
					КонецЕсли;
					//                    КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			// значит клиент оплачивает нам за отгруженный товар
			// или это значит клиент отгружает нам за ранее выплаченную предоплату
			Если ИмяРегистрУчета="ВзаиморасчетыПокупателей" Тогда
				Если (ВидДок="ПриходнаяНакладная") Тогда
					РегистрУчета.КодОперации=ВозвратОтПокупателяНеоплаченногоТовара;
				Иначе
					Если (ТипУчета="Упр") Тогда
						РегистрУчета.КодОперации=ОплатаТоваровИУслуг;
					ИначеЕсли (ТипУчета="Фин") Тогда
						Если ВидОтгрузки=ОтгрузкаТовара Тогда
							РегистрУчета.КодОперации=ОплатаТовара;
						ИначеЕсли ВидОтгрузки=ОтгрузкаУслуги Тогда
							РегистрУчета.КодОперации=ОплатаУслуги;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе    //"ВзаиморасчетыПоставщиков"
				Если     (ВидДок="ДвиженияДенежныхСредств")
				ИЛИ (ВидДок="ПриходныйОрдерТБ") Тогда
					Если     (НайденныйДок.Вид()="ДвиженияДенежныхСредств")
					ИЛИ (НайденныйДок.Вид()="РасходныйОрдерТБ") Тогда
						РегистрУчета.КодОперации=ВозвратАванса;
					Иначе
						РегистрУчета.КодОперации=ВозвратОплаты;
					КонецЕсли;
				Иначе
					Если ВидТовара="Товар" Тогда
						Если ПродаемПринятыйТовар=1 Тогда
							РегистрУчета.КодОперации=ОтгрузкаОплаченногоТовараПринятого;
						Иначе
							РегистрУчета.КодОперации=ОтгрузкаОплаченногоТовараКупленного;
						КонецЕсли;
					Иначе
						РегистрУчета.НДСУслуги=НДСУслуги;
						РегистрУчета.КодОперации=КодОперацииИздержек("Оплачено",СтатьяИздержекУслуги);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если (Знак*НайденныйДолг)>0  Тогда
			// если еще не погашено, тогда Погашаем
			ИсходнаяСумПогаш=СумПогаш;
			Если СумПогаш>(Знак*НайденныйДолг) Тогда
				Если НайденныйДолг>0 Тогда
					РегистрУчета.Долг=НайденныйДолг;
				Иначе
					РегистрУчета.Долг=-НайденныйДолг;
				КонецЕсли;
				СумПогаш=Окр(СумПогаш-(Знак*НайденныйДолг),3,1);
			Иначе
				РегистрУчета.Долг=СумПогаш;
				СумПогаш=0;
			КонецЕсли;
			Если ИмяРегистрУчета="ВзаиморасчетыПоставщиков" Тогда
				Если ВидТовара="Услуга" Тогда
					РегистрУчета.НДСУслуги=?(СумПогаш=0,НДСУслуги,НДСУслуги*РегистрУчета.Долг/ИсходнаяСумПогаш);
					НДСУслуги=НДСУслуги-РегистрУчета.НДСУслуги;
				КонецЕсли;
			КонецЕсли;
			Если Знак>0 Тогда
				семЗаписатьПросроченоДней( Конт.ТекущийДокумент(), РегистрУчета );
				РегистрУчета.ДвижениеРасходВыполнить();
			Иначе
				РегистрУчета.ДвижениеПриходВыполнить();
			КонецЕсли;
			Если СумПогаш=0 Тогда
				Возврат; // исчерпали сумму на Погашение
			КонецЕсли;
		Иначе     // Это когда вдруг получилось,
			// что Погашено больше чем было Зачтено по данному Документу
			// (остаток с обратным знаком).
			// т.е. перепогасили почему то когда то!
			// вариант- была задним числом уменьшена сумма по РасхНакл (и перепроведена),
			// что привело к такому перекосу - тут надо просто
			// попытаться исправить ситуацию, а именно:
			// разницу прибавляем к СуммеПогашения,
			// а Погашение приводим в соответствие (снимаем часть погашения)
			// (т.е. уменьшаем (прибавляем с обратным знаком)).
			Если НайденныйДолг>0 Тогда  // это значит Знак<0
				РегистрУчета.Долг=НайденныйДолг;
				семЗаписатьПросроченоДней( Конт.ТекущийДокумент(), РегистрУчета );
				РегистрУчета.ДвижениеРасходВыполнить();
			Иначе // это значит Знак>0
				РегистрУчета.Долг=-НайденныйДолг;
				РегистрУчета.ДвижениеПриходВыполнить();
			КонецЕсли;
			СумПогаш=Окр(СумПогаш-(Знак*НайденныйДолг),3,1); // здесь (Знак*НайденныйДолг)<0
		КонецЕсли;
	ИначеЕсли Режим="Зачет" Тогда
		Если ЗнакДок=1 Тогда
			// значит мы даем торговый кредит клиенту
			// или это значит, что мы выплачиваем от нас клиенту предоплату (аванс ему)
			Если ИмяРегистрУчета="ВзаиморасчетыПокупателей" Тогда
				Если ВидТовара="Товар" Тогда
					РегистрУчета.КодОперации=НеоплаченнаяОтгрузкаТовараКупленного;
					Если (ТипУчета="Упр") Тогда
						РегистрУчета.ВидОтгрузки="";
					ИначеЕсли (ТипУчета="Фин") Тогда
						РегистрУчета.ВидОтгрузки=ОтгрузкаТовара;
					КонецЕсли;
				Иначе
					Если (ТипУчета="Упр") Тогда
						РегистрУчета.ВидОтгрузки="";
					ИначеЕсли (ТипУчета="Фин") Тогда
						РегистрУчета.ВидОтгрузки=ОтгрузкаУслуги;
					КонецЕсли;
					РегистрУчета.КодОперации=НеоплаченноеВыполнениеУслуги;
				КонецЕсли;
			Иначе     //"ВзаиморасчетыПоставщиков"
				РегистрУчета.ВидОтгрузки="";
				РегистрУчета.КодОперации=АвансоваяВыплата;
			КонецЕсли;
		Иначе//Если ЗнакУчета(ДокВОбработке)=-1 Тогда
			// значит клиент выдает нам авансовую проплату
			// или это значит клиент дает нам  торговый кредит
			Если ИмяРегистрУчета="ВзаиморасчетыПокупателей" Тогда
				РегистрУчета.КодОперации=АвансоваяВыплата;
				РегистрУчета.ВидОтгрузки="";
			Иначе      //"ВзаиморасчетыПоставщиков"
				Если ВидТовара="Товар" Тогда
					Если ПродаемПринятыйТовар=1 Тогда
						РегистрУчета.КодОперации=НеоплаченнаяОтгрузкаТовараПринятого;
						РегистрУчета.ВидОтгрузки=ОтгрузкаТоваровПринятых;
					Иначе
						РегистрУчета.КодОперации=НеоплаченнаяОтгрузкаТовараКупленного;
						РегистрУчета.ВидОтгрузки=ОтгрузкаТоваровИУслуг;
					КонецЕсли;
				Иначе
					РегистрУчета.ВидОтгрузки=ОтгрузкаТоваровИУслуг;
					РегистрУчета.НДСУслуги=НДСУслуги;
					РегистрУчета.КодОперации=КодОперацииИздержек("Неоплачено",СтатьяИздержекУслуги);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если (Знак*НайденныйДолг)>0  Тогда
			// при Зачете здесь просто открываем новый кред документ
			Если Конт.ТекущийДокумент().Вид()="АвансовыйОтчет" Тогда
				РегистрУчета.КредДокумент=ТекДок;
			Иначе
				РегистрУчета.КредДокумент=Конт.ТекущийДокумент();
			КонецЕсли;
			РегистрУчета.Долг=СумПогаш;
			Если Знак>0 Тогда
				РегистрУчета.ДвижениеПриходВыполнить();
			Иначе
				семЗаписатьПросроченоДней( Конт.ТекущийДокумент(), РегистрУчета );
				РегистрУчета.ДвижениеРасходВыполнить();
			КонецЕсли;
			СумПогаш=0;
			Возврат; // исчерпали сумму на Зачет
		Иначе // Это когда вдруг получилось,
			// что по найденному Документу Зачтено меньше чем было погашено
			// (остаток с обратным знаком).
			// т.е. недозачли почему то когда то!
			// вариант- была задним числом уменьшена сумма по ПрихКасс (и перепроведена),
			// что привело к такому перекосу - тут надо просто попытаться
			// исправить ситуацию, а именно:
			// на эту разницу уменьшаем СуммуПогашения,
			// а Зачет приводим в соответствие (т.е. дозачитываем).
			// (т.е. увеличиваем (прибавляем с прямым знаком)).
			Если СумПогаш> -(Знак*НайденныйДолг) Тогда
				Если НайденныйДолг>0 Тогда  // это значит Знак<0
					РегистрУчета.Долг=НайденныйДолг;
					семЗаписатьПросроченоДней( Конт.ТекущийДокумент(), РегистрУчета );
					РегистрУчета.ДвижениеРасходВыполнить();
				Иначе // это значит Знак>0
					РегистрУчета.Долг=-НайденныйДолг;
					РегистрУчета.ДвижениеПриходВыполнить();
				КонецЕсли;
				// заметим, что здесь (Знак*НайденныйДолг)<0
				СумПогаш=Окр(СумПогаш+(Знак*НайденныйДолг),3,1);
			Иначе
				РегистрУчета.Долг=СумПогаш;
				Если Знак>0 Тогда
					РегистрУчета.ДвижениеПриходВыполнить();
				Иначе
					семЗаписатьПросроченоДней( Конт.ТекущийДокумент(), РегистрУчета );
					РегистрУчета.ДвижениеРасходВыполнить();
				КонецЕсли;
				СумПогаш=0;
				Возврат; // исчерпали сумму на Зачет
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//---------------------------
Функция ПогашениеДолгаПоКредиту(Конт,ДокВОбработке,СуммаПог,СтавкаНДС,ТипУчета,ВидТовара="Товар",НДСУслуги=0,СтатьяИздержекУслуги="", РегВзаимПост="", РегВзаимПок="") Экспорт
	
	Если (ТипУчета="Упр") Тогда
		Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета.Выбран()=0 Тогда
			Возврат 0; // учет Упр. не ведется
		КонецЕсли;
	ИначеЕсли (ТипУчета="Фин") Тогда
		Конт.Фирма.ИспользоватьДату(Конт.ДатаДок);
		Если Конт.Фирма.МетодРасчетаСебестоимостиФинансовогоУчета.Выбран()=0 Тогда
			Возврат 0; // учет Фин. не ведется
		КонецЕсли;
	Иначе
		Сообщить("Неверно задан тип учета партий товаров по "+Конт.ТекущийДокумент());
		Возврат 1;
	КонецЕсли;
	
	Если (ДокВОбработке.Вид()="ВводОстатковРеализации") Тогда
		// этот документ здесь проходит, когда в РасхНакл продаем товар, принятый на реализацию
		ПродаемПринятыйТовар=1;
		ТекДокум=ДокВОбработке;
	ИначеЕсли (Конт.Вид()="АвансовыйОтчет") Тогда
		ПродаемПринятыйТовар=0;
		ТекДокум=ДокВОбработке;
	ИначеЕсли (ДокВОбработке.Вид()="ПриходнаяРеализатора") Тогда
		// этот документ здесь проходит, когда в РасхНакл продаем товар, принятый на реализацию
		Если (ДокВОбработке.ПризнакНакладной=Перечисление.ПризнПрихНакл.Закупка) Тогда
			ПродаемПринятыйТовар=1;
			ТекДокум=ДокВОбработке;
		Иначе
			ПродаемПринятыйТовар=0;
			ТекДокум=Конт;
		КонецЕсли;
	Иначе
		ПродаемПринятыйТовар=0;
		ТекДокум=Конт;
	КонецЕсли;
	
	Если ТекДокум.Вид()="ОплатаЧеков" Тогда
		ТекущКлиент=КлиентОплатаЧеков;
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	ИначеЕсли ПродаемПринятыйТовар = 1 Тогда
		ТекущКлиент = ТекДокум.Клиент;
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Иначе
		ТекущКлиент=Конт.Клиент;
	КонецЕсли;
	
	Если ТекущКлиент.КлГруппа.Выбран()=1 Тогда
		КлГруппа=ТекущКлиент.КлГруппа;
	Иначе
		КлГруппа=ТекущКлиент;
	КонецЕсли;     
	
	ТекущКлиент=КлГруппа;
	
	ВидДок=ТекДокум.Вид();
	Если ТекущКлиент.Выбран()=0 Тогда
		НеПроводить(Конт,"Не задан клиент!");
		Возврат 1;
	КонецЕсли;
	
	Если     НЕ( (ВидДок="РасходнаяНакладная")
	ИЛИ (ВидДок="ПриходнаяНакладная")
	ИЛИ (ВидДок="УслугиПеревозки")
	ИЛИ (ВидДок="ПриходнаяРеализатора") // этот документ здесь проходит, когда в РасхНакл продаем товар, принятый на реализацию
	ИЛИ (ВидДок="ВводОстатковРеализации") // этот документ здесь проходит, когда в РасхНакл продаем товар, принятый на реализацию
	ИЛИ (ВидДок="ОтчетРеализатора")
	ИЛИ (ВидДок="ИнвентаризацияРеализатора")
	ИЛИ (ВидДок="ВводОстатковКредита") 
	ИЛИ (ВидДок="СписаниеЗадолженности")
	ИЛИ    (ВидДок="ПриходныйОрдерТБ")
	ИЛИ    (ВидДок="МарочныйОтчет")
	ИЛИ (ВидДок="РасходныйОрдерТБ")
	ИЛИ (ВидДок="ОплатаЧеков")
	ИЛИ (ВидДок="Счет_фактура")
	ИЛИ (ВидДок="Счет_фактура")
	ИЛИ (ВидДок="Списание")     //стол заказов
	ИЛИ (ВидДок="КорректировкаЗаказОтПокупателя") //стол заказов
	
	ИЛИ (ВидДок="ДвиженияДенежныхСредств")) Тогда
		НеПроводить(Конт,"При проведении обнаружен недопустимый вид документа учета кредита!");
		Возврат 1;
	КонецЕсли;
	
	Курс=КурсДок(ТекДокум);
	
	// определим текущий курс Валюты документа
	Если ТекДокум.Вид()="ОплатаЧеков" Тогда
		Валюта=КлиентОплатаЧеков.ВалютаВзаиморасчетов;
	ИначеЕсли ТекДокум.Вид()="ДвиженияДенежныхСредств" Тогда
		Валюта=ТекДокум.ВалютаПогашения;
		Курс=ТекДокум.КурсПогашения;
	Иначе
		Если глЕстьРеквизитШапки("Валюта",ТекДокум.Вид())=1 Тогда
			Валюта=ТекДокум.Валюта;
		Иначе
			Валюта=Рубли;
		КонецЕсли;
	КонецЕсли;
	
	Если Курс=0 Тогда
		НеПроводить(Конт,"Не найдено актуальное значение курса валюты документа!");
		Возврат 1;
	КонецЕсли;
	
	ТипОперации="";
	Если   (ВидДок="РасходнаяНакладная") Тогда
		Если (ТекДокум.ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа) 
		ИЛИ  (ТекДокум.ПризнакНакладной=Перечисление.ПризнРасхНакл.Услуга) 
		Тогда
			ТипОперации="Продажа";
		ИначеЕсли (ТекДокум.ПризнакНакладной=Перечисление.ПризнРасхНакл.КредитнаяНота)
		ИЛИ (ТекДокум.ПризнакНакладной=Перечисление.ПризнРасхНакл.КредитнаяНотаШтраф) Тогда
			ТипОперации="ВозвратОтПокупателя";
		ИначеЕсли (ТекДокум.ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратПоставщику) 
		ИЛИ  (ТекДокум.ПризнакНакладной=Перечисление.ПризнРасхНакл.ЭкспортныйВозврат)
		Тогда
			ТипОперации="ВозвратПоставщику";
		ИначеЕсли (ТекДокум.ПризнакНакладной=Перечисление.ПризнРасхНакл.Переработка)
		ИЛИ (ТекДокум.ПризнакНакладной=Перечисление.ПризнРасхНакл.Пожертвование) 
		Тогда
			Возврат 0;
		КонецЕсли;
	ИначеЕсли  (ВидДок="ПриходнаяНакладная") Тогда
		Если (ТекДокум.ПризнакНакладной=Перечисление.ПризнПрихНакл.Закупка) 
		ИЛИ (ТекДокум.ПризнакНакладной=Перечисление.ПризнПрихНакл.ПриемИмпорта)
		ИЛИ (ТекДокум.ПризнакНакладной=Перечисление.ПризнПрихНакл.Допоставка) 
		ИЛИ (ТекДокум.ПризнакНакладной=Перечисление.ПризнПрихНакл.Недопоставка) 
		Тогда
			ТипОперации="Закупка"; 
		ИначеЕсли (ТекДокум.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратСПереработки) Тогда  
			Возврат 0;
		ИначеЕсли (ТекДокум.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя)
		Тогда
			ТипОперации="ВозвратОтПокупателя";
		КонецЕсли;                          
	ИначеЕсли  (ВидДок="ВводОстатковКредита") ИЛИ (ВидДок="СписаниеЗадолженности") Тогда
		Если ТекДокум.ВидКлиента=Перечисление.ВидыКлиентов.Поставщик Тогда
			ТипОперации="ЗачетПоставщика";
		ИначеЕсли ТекДокум.ВидКлиента=Перечисление.ВидыКлиентов.Покупатель Тогда
			ТипОперации="ЗачетПокупателя";
		КонецЕсли;
	ИначеЕсли   (ВидДок="ДвиженияДенежныхСредств")Тогда
		
		Если (Конт.ВидДвижения=Перечисление.ВидыДвиженийПоРасчетномуСчету.Зачисление) ИЛИ
		(Конт.ВидДвижения = Перечисление.ВидыДвиженийПоРасчетномуСчету.КредитнаяНотаПокупатель) Тогда
			//  "Зачисление";
			Если Конт.ВидОплаты=Перечисление.ВидыОплаты.Возврат Тогда
				ТипОперации="Списание";
			Иначе
				ТипОперации="Зачисление";
			КонецЕсли;
		Иначе
			//  "Списание";
			Если Конт.ВидОплаты=Перечисление.ВидыОплаты.Возврат Тогда
				ТипОперации="Зачисление";
			Иначе
				ТипОперации="Списание";
			КонецЕсли;
		КонецЕсли;      
		
	ИначеЕсли   (ВидДок="ПриходныйОрдерТБ")Тогда
		//  "Зачисление";
		Если Конт.ВидОплаты=Перечисление.ВидыОплаты.Возврат Тогда
			ТипОперации="Списание";
		Иначе
			ТипОперации="Зачисление";
		КонецЕсли;
		//{{MRG[ --> ]
		Если Конт.ДокументОснование.Вид()="АвансовыйОтчет" Тогда
			ТипОперации="ЗачетПоставщика";
		КонецЕсли;
		//}}MRG[ --> ]
	ИначеЕсли   (ВидДок="РасходныйОрдерТБ")Тогда
		//  "Списание";
		Если Конт.ВидОплаты=Перечисление.ВидыОплаты.Возврат Тогда
			ТипОперации="Зачисление";
		Иначе
			ТипОперации="Списание";
		КонецЕсли;
	ИначеЕсли   (ВидДок="МарочныйОтчет")Тогда
		ТипОперации="Продажа";
	ИначеЕсли ВидДок="ЗаказОтПокупателя" Тогда //стол заказов
		ТипОперации="Зачисление";                              
	ИначеЕсли ВидДок="КорректировкаЗаказОтПокупателя" Тогда //стол заказов
		ТипОперации="Зачисление";
	ИначеЕсли ВидДок="УслугиПеревозки" Тогда
		ТипОперации="Закупка";              
	ИначеЕсли ВидДок="Счет_фактура" Тогда
		Если Конт.ВидКлиента=Перечисление.ВидыКлиентов.Покупатель Тогда
			ТипОперации="Закупка";
			Если Конт.ВидКомпенсации=Перечисление.ВидПолученнойКомпенсации.ОтдельныйСчет Тогда
				ТипОперации="Закупка";
			Иначе
				ТипОперации="ВозвратОтПокупателя";
			КонецЕсли;
		ИначеЕсли Конт.ВидКлиента=Перечисление.ВидыКлиентов.Поставщик Тогда
			Если Конт.ВидКомпенсации=Перечисление.ВидПолученнойКомпенсации.ОтдельныйСчет Тогда
				ТипОперации="Продажа";
			Иначе
				ТипОперации="ВозвратПоставщику";
			КонецЕсли;
		КонецЕсли;		
	ИначеЕсли  (ВидДок="Списание") Тогда
		ТипОперации="Продажа";
	КонецЕсли;
	
	ТекущКлиент.ИспользоватьДату("");
	// В зависимости от вида документа
	// определим РегистрУчета и
	// определим текущий курс валюты Кредита
	Если         (ТипОперации="Продажа")
	ИЛИ (ТипОперации="ВозвратОтПокупателя")
	ИЛИ (ТипОперации="ЗачетПокупателя")
	ИЛИ (ТипОперации="Зачисление")
	ИЛИ (ВидДок="ОтчетРеализатора")
	ИЛИ (ВидДок="ИнвентаризацияРеализатора") Тогда
		ИмяРегистрУчета="ВзаиморасчетыПокупателей";
		РегистрУчета=Конт.Регистр.ВзаиморасчетыПокупателей;
		СуммаКред=ТекущКлиент.СуммаКредита.Получить(ТекДокум.ДатаДок);
		ПромВал=ТекущКлиент.ВалютаКредита;
	ИначеЕсли     (ТипОперации="Закупка")
	ИЛИ (ТипОперации="ВозвратПоставщику")
	ИЛИ (ТипОперации="ЗачетПоставщика")
	ИЛИ (ТипОперации="Списание")
	ИЛИ (ВидДок="ПриходнаяРеализатора")
	ИЛИ (ВидДок="ВводОстатковРеализации") Тогда
		ИмяРегистрУчета="ВзаиморасчетыПоставщиков";
		РегистрУчета=Конт.Регистр.ВзаиморасчетыПоставщиков;
		СуммаКред=ТекущКлиент.СуммаКредитаПоставщика.Получить(ТекДокум.ДатаДок);
		ПромВал=ТекущКлиент.ВалютаКредитаПоставщика;
	ИначеЕсли ВидДок="ОплатаЧеков" Тогда
		ПромВал=КлиентОплатаЧеков.ВалютаВзаиморасчетов;
		ИмяРегистрУчета="ВзаиморасчетыПокупателей";
		РегистрУчета=Конт.Регистр.ВзаиморасчетыПокупателей;
	КонецЕсли;
	
	Если ПромВал.Выбран()=0 Тогда
		ПромВал=ТекущКлиент.ВалютаВзаиморасчетов;
	КонецЕсли;
	Если ПромВал.Выбран()=0 Тогда
		ПромВал=Константа.ВалютаВзаиморасчетов;
	КонецЕсли;
	Если ПромВал.Выбран()=0 Тогда
		НеПроводить(Конт,"Не найдена валюта кредита клиента!");
		Возврат 1;
	КонецЕсли;
	
	Если (ТипУчета="Упр") Тогда
		ПромФирма=ТекДокум.Фирма;
		ПромНДС="";
	ИначеЕсли (ТипУчета="Фин") Тогда
		ПромФирма=ТекДокум.Фирма;
		ПромВал=Рубли;
		ПромНДС=СтавкаНДС;
	Иначе
		Сообщить("Неверно задан тип учета по взаиморасчетам"+Конт.ТекущийДокумент());
		Возврат 1;
	КонецЕсли;
	
	РегистрУчета.Фирма=ПромФирма;
	РегистрУчета.Долг=0;
	Если ИмяРегистрУчета="ВзаиморасчетыПокупателей" Тогда
		РегистрУчета.СтавкаНДС=ПромНДС;
	Иначе
		РегистрУчета.НДСУслуги=0;
	КонецЕсли;
	
	КурсКред=КурсДляВалюты(ПромВал,ДатаКурсаДок(ТекДокум));
	
	Если     КурсКред=0 Тогда
		НеПроводить(Конт,"Не найдено актуальное значение курса валюты кредита!"+ПромВал);
		Возврат 1;
	КонецЕсли;
	
	// Определяем Сумму по документу
	Если  (ВидДок="ПриходнаяРеализатора") ИЛИ (ВидДок="ВводОстатковРеализации") Тогда
		ВалютаВозврата=?(ТипУчета="Упр",Валюта,Рубли);
		СумПогаш=Пересчет(СуммаПог,ВалютаВозврата,Курс,ПромВал,КурсКред);
	Иначе
		СумПогаш=Пересчет(СуммаПог,Валюта,Курс,ПромВал,КурсКред);
	КонецЕсли;
	
	СумПогаш=Окр(СумПогаш,2,1);
	Если СумПогаш=0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если (ВидДок="ВводОстатковКредита") ИЛИ (ВидДок="СписаниеЗадолженности") Тогда
		СумПогаш=ЗнакУчета(ТекДокум)*СумПогаш;
		//Если ТекДокум.ВидКлиента =  Перечисление.ВидыКлиентов.Покупатель Тогда
		//	СумПогаш=-ЗнакУчета(ТекДокум)*СумПогаш;	
		//Иначе
		//	СумПогаш=ЗнакУчета(ТекДокум)*СумПогаш;	
		//КонецЕсли;
	КонецЕсли;
	
	РегистрУчета.Клиент=ТекущКлиент;
	РегУК=СоздатьОбъект("Регистр."+ИмяРегистрУчета);
	
	// Сначала надо выделить те Документы, которые надо погашать
	Кредиты=СоздатьОбъект("СписокЗначений");
	СтоимостьКредита=СоздатьОбъект("СписокЗначений");
	СписокВидОтгрузки=СоздатьОбъект("СписокЗначений");
	//***********************************************************
	//<<Алгоритм Успеха>> (begin)
	НадоСоздавать = 1;
	Если ИмяРегистрУчета = "ВзаиморасчетыПоставщиков" Тогда
		Если ТекущКлиент.НеВестиВзаиморасчетыПоставщика=1 Тогда
			Возврат 0;
		КонецЕсли;
		Если ПустоеЗначение(РегВзаимПост) = 0 Тогда
			Рег = РегВзаимПост;
			НадоСоздавать = 0;
		КонецЕсли;
	ИначеЕсли ИмяРегистрУчета = "ВзаиморасчетыПокупателей" Тогда    
		Если ПустоеЗначение(РегВзаимПок) = 0 Тогда
			Рег = РегВзаимПок;
			НадоСоздавать = 0;
		КонецЕсли;
	КонецЕсли;
	Если НадоСоздавать = 1 Тогда
		//<<Алгоритм Успеха>> (end) 
		//************************************************************	
		ВремРег=СоздатьОбъект("Регистры");
		Рег=ВремРег.ПолучитьАтрибут(ИмяРегистрУчета);
		
		Если Конт.ИтогиАктуальны()=0 Тогда
			Рег.ВременныйРасчет();       
			ВремРег.Актуальность(1);
			Если ИмяРегистрУчета="ВзаиморасчетыПокупателей" Тогда
				Рег.УстановитьФильтр(ПромФирма,ТекущКлиент,ПромНДС,,);
			Иначе
				Рег.УстановитьФильтр(ПромФирма,ТекущКлиент,,);
			КонецЕсли;
			ВремРег.РассчитатьРегистрыНа(Конт.ТекущийДокумент());
		КонецЕсли;                                                
		//***********************************************************
		//<<Алгоритм Успеха>> (begin)
	КонецЕсли;                   
	//<<Алгоритм Успеха>> (end) 
	//************************************************************
	
	Если ИмяРегистрУчета="ВзаиморасчетыПокупателей" Тогда
		Рег.УстановитьФильтр(ПромФирма,ТекущКлиент,ПромНДС,,);
	Иначе
		Рег.УстановитьФильтр(ПромФирма,ТекущКлиент,,);
	КонецЕсли;
	
	ТаблИтогов=СоздатьОбъект("ТаблицаЗначений");
	Рег.ВыгрузитьИтоги(ТаблИтогов,1,1);
	
	//	Сообщить("Начало: "+ТекущееВремя());	
	
	ТаблИтогов.ВыбратьСтроки();
	Пока ТаблИтогов.ПолучитьСтроку()>0 Цикл
		
		//    Рег.ВыбратьИтоги();
		//   Пока Рег.ПолучитьИтог()>0 Цикл
		//        Кредит=Рег.КредДокумент;
		Кредит=ТаблИтогов.КредДокумент;
		
		Если Кредит.Выбран()=0 Тогда // пропускаем
			Продолжить;
		КонецЕсли;
		Если ТипУчета="Фин" Тогда
			Если ТаблИтогов.Фирма<>ТекДокум.Фирма Тогда
				// пропускаем документы, которые не по той фирме!
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		//		НайденныйДолг=Рег.Долг;
		НайденныйДолг=ТаблИтогов.Долг;
		
		Если НайденныйДолг=0 Тогда
			Продолжить;
		КонецЕсли;
		ВидОтгрузки=ТаблИтогов.ВидОтгрузки;
		Если Кредит<>ТекДокум.ТекущийДокумент() Тогда
			Если Кредит.Вид()="ДвиженияДенежныхСредств" Тогда
				Знак=?(НайденныйДолг>0,1,-1);
			Иначе
				Знак=ЗнакУчета(Кредит);
			КонецЕсли;
			Если (ИмяРегистрУчета="ВзаиморасчетыПоставщиков") Тогда
				Если (Кредит.Вид()="РасходнаяНакладная")
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				или (Кредит.Вид()="РасходнаяНакладнаяНал") Тогда
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
					Если (Кредит.ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа) Тогда
						// это бывает в случае, когда РасхНакл продали принятый на реализацию
						// от Поставщика товар. В этом случае РасхНакл начисляет нашу задолженность
						// поставщику
						Знак=-Знак;
					КонецЕсли;
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				ИначеЕсли (Кредит.Вид()="Списание") или (Кредит.Вид()="МарочныйОтчет") или (Кредит.Вид()="ПеремещениеДепартамент") Тогда
					// списали принятый на реализацию товар
					Знак=-Знак
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				КонецЕсли;
			КонецЕсли;
			Если РежимПогашения(Знак,ТекДокум)="Зачет" Тогда
				// пропускаем документы на Зачет, т.к. по FIFO нам надо только погашать!
				Продолжить;
			КонецЕсли;
			
			Если (Знак*НайденныйДолг)<0 Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			// т.е. перепроводим документ, который уже сидит в регистре как кредитный документ
			// значит тогда его надо по новой на это же место ставить (попытаться лечить регистр)
			ИсполнитьПогашение(Конт,РегистрУчета,Кредит,ВидОтгрузки,ТекДокум,НайденныйДолг,СумПогаш,ТипУчета,ВидТовара,НДСУслуги,СтатьяИздержекУслуги);
			Если СумПогаш=0 Тогда
				Возврат 0;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ВидКредДок=Кредит.Вид();
		
		Если (ВидКредДок="РасходнаяНакладная")
		ИЛИ (ВидКредДок="ПриходнаяНакладная")
		ИЛИ (ВидКредДок="УслугиПеревозки")
		ИЛИ (ВидКредДок="Счет_фактура")
		ИЛИ (ВидКредДок="ВводОстатковКредита")
		Тогда
			ДатаОплаты=Кредит.ДатаОплаты;
			Если Число(ДатаОплаты)=0 Тогда
				ДатаОплаты=Кредит.ДатаДок;
			КонецЕсли;
		Иначе
			ДатаОплаты=Кредит.ДатаДок;
		КонецЕсли;
		
		Час=0;
		Минут=0;
		Сек=0;
		Кредит.ПолучитьВремя(Час,Минут,Сек);
		Если Конт.ДатаДок < Дата(2007,5,1) Тогда
			ПозицияОплаты=СформироватьПозициюДокумента(ДатаОплаты,Час,Минут,Сек);
		Иначе
			ПозицияОплаты=Формат( ДатаОплаты,"Д ГГГГММДД") + СформироватьПозициюДокумента(Кредит.ДатаДок,Час,Минут,Сек);
			// анна - когда указан конкретный погашаемый документ - пытаемся "вытолкнуть" его наверх списка
			Попытка
				Если Конт.ДокументОснование = Кредит Тогда
					ПозицияОплаты=" "+ПозицияОплаты;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Кредиты.ДобавитьЗначение(Кредит,ПозицияОплаты);
		СтоимостьКредита.ДобавитьЗначение(НайденныйДолг,ПозицияОплаты);
		СписокВидОтгрузки.ДобавитьЗначение(ВидОтгрузки,ПозицияОплаты);
	КонецЦикла;
	
	//	Сообщить("Конец: "+ТекущееВремя());	
	
	// теперь в списке собраны все Документы по кредиту
	
	// Тут так - сначала смотрим - указана ли в самом документе Счет-Фактура?
	// Если ДА - то по ней надо найти тот документ, который надо погашать! и именно
	// его и попытаться погасить! Но при этом все основательно проверять!
	// 1) если не найдено документа, который нам указали погасить (или может быть он был уже ранее
	//    погашен), то выдаем сообщение об ошибке и не проводим.
	// 2) если все же после удачного погашения что то останется в остатке на погашение (т.е. документ
	//    загасил всю сумму по указанной Сч-Ф. но еще кое что осталось), то выдаем сообщение и
	//    остаток гасим по ФИФО (в порядке Даты Оплаты кредитов).
	// Все это касаетсе ТОЛЬКО денежных документов оплаты!!!
	
	// Если НЕТ - то надо погашать по ФИФО (в порядке Даты Оплаты кредитов).
	
	//Если         (ВидДок="ПриходныйОрдерТБ")
	//ИЛИ (ВидДок="РасходныйОрдерТБ")
	//ИЛИ (ВидДок="ДвиженияДенежныхСредств") Тогда
	//	Если ТекДокум.ДокументОснование.Выбран()=1 Тогда
	//		//            Если (ТекДокум.ДокументОснование.Вид()="Счет_фактура")
	//		Если (ТекДокум.ДокументОснование.Вид()="РегистрацияСчета_фактуры") Тогда
	//			ДокСФ=ТекДокум.ДокументОснование;
	//			Если ДокСФ.ДокументОснование.Выбран()=1 Тогда
	//				ДокПогаш=ДокСФ.ДокументОснование;
	//				// Вот этот документ нам велят погасить!
	//				// Попытаемся его найти среди документов кредита
	//				Поз=Кредиты.НайтиЗначение(ДокПогаш);
	//				
	//				Если Поз<>0 Тогда
	//					НайденныйДок=ДокПогаш;
	//					НайденныйДолг=СтоимостьКредита.ПолучитьЗначение(Поз);
	//					ВидОтгрузки=СписокВидОтгрузки.ПолучитьЗначение(Поз);
	//					// Итак, все же нашелся таки тот документ, который нам указано погасить!
	//					ИсполнитьПогашение(Конт,РегистрУчета,НайденныйДок,ВидОтгрузки,ТекДокум,НайденныйДолг,СумПогаш,ТипУчета,ВидТовара,НДСУслуги,СтатьяИздержекУслуги);
	//					// Проверим, осталось ли чего в осадке?
	//					// Если нет, то выходим!
	//					Если СумПогаш=0 Тогда
	//						Возврат 0;
	//					КонецЕсли;
	//					
	//					//  если все же после удачного погашения что то останется в остатке на погашение
	//					//  (т.е. документ загасил всю сумму по указанной Сч-Ф, но еще кое что осталось),
	//					//  то просто выдаем сообщение, а остаток далее погасится по ФИФО
	//					//  (в порядке Даты Оплаты кредитов).
	//					Сообщить("Документ "+НайденныйДок+",");
	//					Сообщить("который следовало погасить согласно указанного");
	//					Сообщить("в платежном документе "+ ТекДокум.Вид()+" № "+ТекДокум.НомерДок+" от "+ТекДокум.ДатаДок);
	//					Сообщить("Счета-Фактуры!"+ДокСФ);
	//					Сообщить("полностью погашен, но остаток суммы в размере="+СумПогаш+" "+ПромВал.Наименование);
	//					Сообщить("направлен на погашение других документов");
	//					Сообщить("по кредитам в порядке их Даты оплаты!");
	//					Кредиты.УдалитьЗначение(Поз);
	//					СтоимостьКредита.УдалитьЗначение(Поз);
	//					СписокВидОтгрузки.УдалитьЗначение(Поз);
	//				Иначе
	//					// не найдено документа, который нам указали погасить
	//					// (или может быть он был уже ранее погашен),
	//					// однако выдаем сообщение об ошибке и не проводим.
	//					Сообщить("Не найдено документа, который указано погасить согласно Счета-Фактуры!");
	//					НеПроводить(Конт,"(возможно он был уже ранее погашен!)");
	//					Возврат 1;
	//				КонецЕсли;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
	//в случае когда в документе счет-фактура указан документ, который надо погасить
	//попытаемся погасить в первую очередь этот документ
	Если ВидДок = "Счет_фактура" Тогда
		Если Конт.ДатаДок >= Дата(2008,1,1) Тогда
			Если Конт.ПоДокументу.Выбран() = 1 Тогда
				поз = Кредиты.НайтиЗначение(Конт.ПоДокументу);
				Если поз <> 0 Тогда
					НайденныйДок=Конт.ПоДокументу;
					НайденныйДолг=СтоимостьКредита.ПолучитьЗначение(поз);
					ВидОтгрузки=СписокВидОтгрузки.ПолучитьЗначение(Поз);
					ИсполнитьПогашение(Конт,РегистрУчета,НайденныйДок,ВидОтгрузки,ТекДокум,НайденныйДолг,СумПогаш,ТипУчета,ВидТовара,НДСУслуги,СтатьяИздержекУслуги);
					Если СумПогаш=0 Тогда Возврат 0; КонецЕсли;
					Кредиты.УдалитьЗначение(Поз);
					СтоимостьКредита.УдалитьЗначение(Поз);
					СписокВидОтгрузки.УдалитьЗначение(Поз);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// теперь в списках собраны все документы
	// надо погашать по ФИФО
	
	РазмСпискаПартии=Кредиты.РазмерСписка();
	Если РазмСпискаПартии>1 Тогда
		Кредиты.СортироватьПоПредставлению(0);
		СтоимостьКредита.СортироватьПоПредставлению(0);
		СписокВидОтгрузки.СортироватьПоПредставлению(0);
	КонецЕсли;
	
	// а теперь надо погашать документы кредитов
	Для ИнТекДокумвиж=1 По РазмСпискаПартии Цикл
		Кредит=Кредиты.ПолучитьЗначение(ИнТекДокумвиж);
		НайденныйДолг=СтоимостьКредита.ПолучитьЗначение(ИнТекДокумвиж);
		ВидОтгрузки=СписокВидОтгрузки.ПолучитьЗначение(ИнТекДокумвиж);
		
		ИсполнитьПогашение(Конт,РегистрУчета,Кредит,ВидОтгрузки,ТекДокум,НайденныйДолг,СумПогаш,ТипУчета,ВидТовара,НДСУслуги,СтатьяИздержекУслуги);
		Если СумПогаш=0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СумПогаш<>0 Тогда
		// если после всей этой операции осталась кое что в СумПогаш,
		// а документы, которые надо погашать
		// исчерпаны, то надо просто эту сумму записать в Долг, но с обратным знаком,
		Если Конт.ТекущийДокумент().Вид()="АвансовыйОтчет" Тогда
			РегистрУчета.КредДокумент=ТекДокум;
		Иначе
			РегистрУчета.КредДокумент=Конт.ТекущийДокумент();
		КонецЕсли;
		РегистрУчета.Долг=СумПогаш;
		
		Если ЗнакУчета(ТекДокум)=1 Тогда
			
			// значит мы даем торговый кредит клиенту
			// или это значит, что мы выплачиваем клиенту предоплату (аванс ему)
			Если ИмяРегистрУчета="ВзаиморасчетыПокупателей" Тогда
				Если     (ВидДок="ДвиженияДенежныхСредств")
				ИЛИ (ВидДок="РасходныйОрдерТБ") 
				ИЛИ (ВидДок="КорректировкаЗаказОтПокупателя") Тогда//стол заказов
					РегистрУчета.КодОперации=ВозвратОплаты;
					РегистрУчета.ВидОтгрузки="";
				Иначе
					Если ВидТовара="Товар" Тогда
						Если (ТипУчета="Упр") Тогда
							РегистрУчета.ВидОтгрузки="";
						ИначеЕсли (ТипУчета="Фин") Тогда
							РегистрУчета.ВидОтгрузки=ОтгрузкаТовара;
						КонецЕсли;
						Если (ВидДок="ВводОстатковКредита") Тогда
							РегистрУчета.КодОперации=ВводНачальныхВзаиморасчетов;
						ИначеЕсли (ВидДок="СписаниеЗадолженности") Тогда
							РегистрУчета.КодОперации=")";
						Иначе
							РегистрУчета.КодОперации=НеоплаченнаяОтгрузкаТовараКупленного;
						КонецЕсли;
					Иначе
						Если (ТипУчета="Упр") Тогда
							РегистрУчета.ВидОтгрузки="";
						ИначеЕсли (ТипУчета="Фин") Тогда
							РегистрУчета.ВидОтгрузки=ОтгрузкаУслуги;
						КонецЕсли;
						РегистрУчета.КодОперации=НеоплаченноеВыполнениеУслуги;
					КонецЕсли;
				КонецЕсли;
			Иначе      //"ВзаиморасчетыПоставщиков"
				Если (ВидДок="РасходнаяНакладная") Тогда
					РегистрУчета.ВидОтгрузки=ОтгрузкаТоваровИУслуг;
					РегистрУчета.КодОперации=ВозвратПоставщикуОплаченногоТовара;
				Иначе
					РегистрУчета.ВидОтгрузки="";
					Если (ВидДок="ВводОстатковКредита") Тогда
						РегистрУчета.КодОперации=ВводНачальныхВзаиморасчетов;
					ИначеЕсли (ВидДок="СписаниеЗадолженности") Тогда
						РегистрУчета.КодОперации="(";
					Иначе
						РегистрУчета.КодОперации=АвансоваяВыплата;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			РегистрУчета.ДвижениеПриходВыполнить();
		Иначе//Если ЗнакУчета(ТекДокум)=-1 Тогда
			// значит клиент выдает нам авансовую проплату
			// или это значит клиент дает нам  торговый кредит
			Если ИмяРегистрУчета="ВзаиморасчетыПокупателей" Тогда
				Если (ВидДок="ПриходнаяНакладная") Тогда
					Если ВидТовара="Товар" Тогда
						Если (ТипУчета="Упр") Тогда
							РегистрУчета.ВидОтгрузки="";
						ИначеЕсли (ТипУчета="Фин") Тогда
							РегистрУчета.ВидОтгрузки=ОтгрузкаТовара;
						КонецЕсли;
						РегистрУчета.КодОперации=ВозвратОтПокупателяОплаченногоТовара;
					Иначе
						Если (ТипУчета="Упр") Тогда
							РегистрУчета.ВидОтгрузки="";
						ИначеЕсли (ТипУчета="Фин") Тогда
							РегистрУчета.ВидОтгрузки=ОтгрузкаУслуги;
						КонецЕсли;
						РегистрУчета.КодОперации=ВозвратОтПокупателяОплаченногоТовара;
					КонецЕсли;
				Иначе
					РегистрУчета.ВидОтгрузки="";
					Если (ВидДок="ВводОстатковКредита") Тогда
						РегистрУчета.КодОперации=ВводНачальныхВзаиморасчетов;
					ИначеЕсли (ВидДок="СписаниеЗадолженности") Тогда
						РегистрУчета.КодОперации="(";
					Иначе
						РегистрУчета.КодОперации=АвансоваяВыплата;
					КонецЕсли;
				КонецЕсли;
			Иначе      //"ВзаиморасчетыПоставщиков"
				Если     (ВидДок="ДвиженияДенежныхСредств")
				ИЛИ (ВидДок="ПриходныйОрдерТБ") Тогда
					РегистрУчета.КодОперации=ВозвратОплаты;
					РегистрУчета.ВидОтгрузки="";
				Иначе
					Если ВидТовара="Товар" Тогда
						Если (ВидДок="ВводОстатковКредита") Тогда
							РегистрУчета.ВидОтгрузки=ОтгрузкаТоваровИУслуг;
							РегистрУчета.КодОперации=ВводНачальныхВзаиморасчетов;
						ИначеЕсли (ВидДок="СписаниеЗадолженности") Тогда
							РегистрУчета.ВидОтгрузки=Конт.ВидОтгрузки;
							РегистрУчета.КодОперации="(";
						Иначе
							Если ПродаемПринятыйТовар=1 Тогда
								РегистрУчета.КодОперации=НеоплаченнаяОтгрузкаТовараПринятого;
								РегистрУчета.ВидОтгрузки=ОтгрузкаТоваровПринятых;
							Иначе
								РегистрУчета.КодОперации=НеоплаченнаяОтгрузкаТовараКупленного;
								РегистрУчета.ВидОтгрузки=ОтгрузкаТоваровИУслуг;
							КонецЕсли;
						КонецЕсли;
					Иначе
						РегистрУчета.ВидОтгрузки=ОтгрузкаТоваровИУслуг;
						РегистрУчета.НДСУслуги=НДСУслуги;
						РегистрУчета.КодОперации=КодОперацииИздержек("Неоплачено",СтатьяИздержекУслуги);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			семЗаписатьПросроченоДней( Конт.ТекущийДокумент(), РегистрУчета );
			РегистрУчета.ДвижениеРасходВыполнить();
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
КонецФункции

//----------------------------------------------- 
Функция семДвиженияРегистровНакладных( Конт ) Экспорт 
	Перем ПолноеСписаниеПоЗаявки;
	
	//	часто используемые данные 
	ЭтоРасхНакл = ?( Найти( Конт.Вид(), "РасходнаяНакладная") > 0, 1, 0 );
	
	Если ( Конт.Вид() = "РасходнаяРеализатора") Тогда
		ЭтоРасхНакл = 1;
	КонецЕсли;

	Если ( Конт.Вид() = "ПриходнаяНакладная") Тогда
		Если Конт.ПризнакНакладной = Перечисление.ПризнПрихНакл.ВозвратОтПокупателя Тогда
			ЭтоРасхНакл = 1;
		КонецЕсли;
	КонецЕсли;
	
	кРазрешитьОтрОстатки = глРазрОтрицОстатки;
	кРазрешитьПродРезерв = семРазрешитьПродаватьРезерв( Конт );
	ДокОснование = Конт.ДокументОснование;
	// проверим есть ли счета
	спСчета = СоздатьОбъект( "СписокЗначений" );
	Если ПустоеЗначение(ДокОснование)=0 Тогда
		спСчета.ДобавитьЗначение( ДокОснование );
	КонецЕсли;
	
	Если Конт.Склад.Выбран() = 0 Тогда НеПроводить(Конт,"Не указан склад!"); Возврат 1; КонецЕсли;
	Если Конт.Клиент.Выбран()=0 Тогда НеПроводить(Конт,"Не указан клиент!"); Возврат 1; КонецЕсли;
	
	//по расходным накладным
	Если ( ЭтоРасхНакл = 1 ) Тогда
		Если ( Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.КредитнаяНота ) или ( Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.КредитнаяНотаШтраф ) Тогда
			Возврат 0;
		КонецЕсли;
		
		ЕстьСчета = 0; 
		
		Конт.ВыбратьСтроки(); 
		Пока Конт.ПолучитьСтроку() = 1 Цикл
			Если ПустоеЗначение( Конт.Счет ) = 0 Тогда
				Если Конт.Счет.Проведен() = 1 Тогда
					Если спСчета.НайтиЗначение(Конт.Счет )=0 Тогда
						спСчета.ДобавитьЗначение( Конт.Счет );	
					КонецЕсли;
					ЕстьСчета = 1; 
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ПустоеЗначение(спСчета)=1 Тогда
			спСчета.ДобавитьЗначение(Конт.ТекущийДокумент());
		КонецЕсли;

		
		ВремРег = СоздатьОбъект( "Регистры" );
		регОстатки = ВремРег.ОстаткиТоваров;
		регРезервы=ВремРег.РезервыТоваров;
		РегКомпл=ВремРег.КомплектацияЗаявок;
		регСпецЗаказы = ВремРег.СпецЗаказы;
		регЗаказыПоставщикамЗаявки = ВремРег.ЗаказыПоставщикамЗаявки;
		регОстатки.УстановитьЗначениеФильтра( "Склад", Конт.Склад.Родитель, 2 );
		
		Если Конт.ИтогиАктуальны() = 0  Тогда
			ВремРег.Актуальность(1);
			УстановленВремРасч=0;
			// если итоги не актуальны, то стоимости берем из временногно расчета Регистра
			Если ( ( кРазрешитьОтрОстатки <> Да ) или ( кРазрешитьПродРезерв <> Да ) ) и ( ЭтоРасхНакл = 1 ) Тогда
				регОстатки.ВременныйРасчет();
				УстановленВремРасч=1;
			КонецЕсли;

			регРезервы.ВременныйРасчет();
			регСпецЗаказы.ВременныйРасчет();
			регЗаказыПоставщикамЗаявки.ВременныйРасчет();
			регКомпл.ВременныйРасчет();
			
			регРезервы					.УстановитьЗначениеФильтра( "ПоСчету", спСчета, 2 );
			регСпецЗаказы				.УстановитьЗначениеФильтра( "ПоСчету", спСчета, 2 );
			регЗаказыПоставщикамЗаявки	.УстановитьЗначениеФильтра( "ПоСчету", спСчета, 2 );
			регКомпл					.УстановитьЗначениеФильтра( "ПоСчету", спСчета, 2 );
			//устанавливаем фильтр только для отправленных на комлектацию заявок
			//регКомпл					.УстановитьЗначениеФильтра( "Статус", спСтатусов, 2 );
			
			спТоваров = СоздатьОбъект( "СписокЗначений" );
			Конт.ВыгрузитьТабличнуюЧасть( спТоваров, "Товар" );
			регОстатки.УстановитьЗначениеФильтра( "Товар", спТоваров, 2 );
			ВремРег.РассчитатьРегистрыНа(Конт.ТекущийДокумент());
		КонецЕсли;
	КонецЕсли;
	
	Конт.ВыбратьСтроки();
	Пока Конт.ПолучитьСтроку() > 0 Цикл
		Если Конт.Товар.Выбран()=0 Тогда
			Сообщить("В документе "+Конт.Вид()+" № "+Конт.НомерДок+" от "+Конт.ДатаДок+"Не указан товар!");
			Продолжить;
		КонецЕсли;
		
		// услуги здесь в этих регистрах не учитываем
		Если Конт.Товар.ВидТовара=Перечисление.ВидыТоваров.Услуга Тогда Продолжить; КонецЕсли;
		
		ОбщееКоличество = Окр(Конт.Количество * Конт.Коэффициент,3); //округляем общее кол-во до 2х знаков чтобы не учитывать остатки с учетом 3го знака

		//определяем какой склад брать - из шапки или из строки
		Если глЕстьРеквизитМнЧ("СкладТ",Конт.Вид())=1 Тогда
			Если ПустоеЗначение(Конт.СкладТ)=1 Тогда
				пСклад = Конт.Склад;
			Иначе
				пСклад = Конт.СкладТ;
			КонецЕсли;			
		Иначе
			пСклад = Конт.Склад;
		КонецЕсли;
		
		//по расходным накладным
		Если ( ЭтоРасхНакл = 1 ) ИЛИ (Конт.Вид()="РасходнаяРеализатора") Тогда
			// проверяем остаток товара
			Если кРазрешитьОтрОстатки <> Да Тогда
				ОстатокТовара = регОстатки.СводныйОстаток( Конт.Товар, пСклад,, "ОстатокТовара" );
				Если ( ОстатокТовара < ОбщееКоличество ) И ( ОстатокТовара < Окр(ОбщееКоличество,2) ) Тогда
					Сообщить("Строка: "+Конт.НомерСтроки+" - На складе <"+пСклад+"> нет нужного количества товара "+Конт.Товар.Код+" "+Конт.Товар.Наименование);
					НеПроводить(Конт,"На складе осталось "+ОстатокТовара+" "+Конт.Товар.БазоваяЕдиницаИзмерения);
					регОстатки=0; регРезервы=0; Возврат 1;
				КонецЕсли;
			КонецЕсли;
			
			// проверяем резерв товара
			Если кРазрешитьПродРезерв <> Да Тогда
				ДопРезерв = 0;
				Резерв = регРезервы.СводныйОстаток( Конт.Товар,, "РезервТовара" );
				РезервПоСчету = 0;
				Если ЭтоРасхНакл = 1 Тогда
					// Если выписывается накладная на основании Счета или Заказа
					// Вычислим, сколько зарезервировано именно по данному Счету или Заказу
					Если Конт.Счет.Выбран() = 0 Тогда
						Если (ДокОснование.Вид()="Счет") или (ДокОснование.Вид()="ЗаказОтПокупателя") Тогда
							РезервПоСчету=регРезервы.Остаток(Конт.Товар,ДокОснование,"РезервТовара");
						КонецЕсли;
					Иначе
						Если Конт.Счет.Проведен() = 1 Тогда
							РезервПоСчету=регРезервы.Остаток(Конт.Товар,Конт.Счет,"РезервТовара");
						КонецЕсли;
					КонецЕсли;
					
					//PR BEGIN 21.10.2010
					//если мы продаем товар в килограммах и у нас есть резерв - тогда добавляем 25% к возможному кол-ву товара на случай когда фактически товара больше
					//25% - согласовано со складом
					Если (Конт.Единица.Единица=Перечисление.ЕдиницыИзмерения.Килограмм) И (РезервПоСчету<>0) Тогда
						ДопРезерв=Мин(РезервПоСчету*0.25,Резерв-РезервПоСчету);
					КонецЕсли;
					//PR END
					
				КонецЕсли;
				
				ПолныйОстаток=регОстатки.СводныйОстаток(Конт.Товар,,,"ОстатокТовара");
				
				//Завьялов А.**********07.02.05***********
				Если (Резерв < РезервПоСчету)или(Резерв = РезервПоСчету) Тогда
					Резерв = 0;
				КонецЕсли;         
				Если Резерв > РезервПоСчету Тогда
					Резерв = Резерв - РезервПоСчету; 
				КонецЕсли;  
				//Завьялов А.**********07.02.05***********				
				СвободныйРесурс=ПолныйОстаток-Резерв;
				
				Если СвободныйРесурс<0  Тогда
					// товара не хватает на все зарезервированные Счета
					СвободныйРесурс=0;
				КонецЕсли;
				
				Если ((СвободныйРесурс+ДопРезерв)<ОбщееКоличество) И ( (СвободныйРесурс+ДопРезерв)<Окр(ОбщееКоличество,2)) Тогда // к свободному ресурсу добавялем доп резерв как погрешность
					//Сообщить("Нет нужного свободного количества товара "+Конт.Товар.Наименование);
					//Сообщить("  Всего осталось "+Строка(ПолныйОстаток)+" "+Конт.Товар.БазоваяЕдиницаИзмерения);
					//Сообщить("  Зарезервировано по выписанным Счетам "+Строка(Резерв-РезервПоСчету)
					//+" "+Конт.Товар.БазоваяЕдиницаИзмерения);
					//НеПроводить(Конт,"  Требуемое количество "+Строка(ОбщееКоличество)+" "+Конт.Товар.БазоваяЕдиницаИзмерения);
					промБазЕд = Конт.Товар.БазоваяЕдиницаИзмерения;
					Сообщить(Шаблон("Нет нужного свободного количества товара ([Конт.Товар.Код]) [Конт.Товар.Наименование]."),"!");
					Сообщить(Шаблон("Всего осталось [ПолныйОстаток] [промБазЕд]. В резерве [Резерв-РезервПоСчету] [промБазЕд] из них по счету [РезервПоСчету] [промБазЕд]."),"I");
					Сообщить(Шаблон("Свободный остаток [ПолныйОстаток-Резерв] [промБазЕд]. Требуемое количество [ОбщееКоличество] [промБазЕд]."),"I");
					НеПроводить(Конт,Шаблон("Не хватает [ОбщееКоличество-СвободныйРесурс] [промБазЕд]."));
					регОстатки=0;
					регРезервы=0;
					Возврат 1;
				КонецЕсли;
			КонецЕсли;
			
			Конт.Регистр.ОстаткиТоваров.Фирма=Конт.Фирма;
			Конт.Регистр.ОстаткиТоваров.Товар=Конт.Товар;
			Конт.Регистр.ОстаткиТоваров.Склад=пСклад;
			Конт.Регистр.ОстаткиТоваров.Клиент=Конт.Клиент;
			Конт.Регистр.ОстаткиТоваров.ФлагУчета=1;
			Конт.Регистр.ОстаткиТоваров.ПривязыватьСтроку(Конт.НомерСтроки);
			Если ОбщееКоличество > 0 Тогда
				Конт.Регистр.ОстаткиТоваров.ОстатокТовара=Мин(ОбщееКоличество, ОстатокТовара) ;
				Конт.Регистр.ОстаткиТоваров.ДвижениеРасходВыполнить();			    
			Иначе
				Конт.Регистр.ОстаткиТоваров.ОстатокТовара=-ОбщееКоличество;
				Конт.Регистр.ОстаткиТоваров.ДвижениеПриходВыполнить();
			КонецЕсли;
			
			//-------------
			Если ЭтоРасхНакл = 1 Тогда
				// по Регистру РезервыТоваров (снимаем зарезервированный товар при выписке Счета)
				Если Конт.Счет.Выбран() = 0 Тогда
					Если ДокОснование.Проведен()=1 Тогда
						Если (ДокОснование.Вид()="Счет") или (ДокОснование.Вид()="ЗаказОтПокупателя") Тогда
							Резерв=регРезервы.Остаток(Конт.Товар,ДокОснование,"РезервТовара");
							Если Резерв>0  Тогда //Закрываем резерв по Основание в ноль!!!
								
								Конт.Регистр.РезервыТоваров.ПривязыватьСтроку(Конт.НомерСтроки);
								Конт.Регистр.РезервыТоваров.Товар = Конт.Товар;
								Конт.Регистр.РезервыТоваров.ПоСчету = ДокОснование;
								Конт.Регистр.РезервыТоваров.РезервТовара = Резерв;
								Конт.Регистр.РезервыТоваров.ДвижениеРасходВыполнить();
								
								//Конт.Регистр.РезервыТоваров.ДвижениеРасход(Конт.Товар,ДокОснование,Резерв);  
								//Завьялов А.**********24.12.04*********** 
								//Создаем таблицу снятие с резерва
//								ПолноеСписаниеПоЗаявки.НоваяСтрока();
//								ПолноеСписаниеПоЗаявки.Товар = Конт.Товар;
								//Завьялов А.**********24.12.04***********
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если Конт.Счет.Проведен() = 1 Тогда
						Резерв=регРезервы.Остаток(Конт.Товар,Конт.Счет,"РезервТовара");
						Если Резерв>0  Тогда //Закрываем резерв по Основание в ноль!!!
							Конт.Регистр.РезервыТоваров.ПривязыватьСтроку(Конт.НомерСтроки);
						
							Конт.Регистр.РезервыТоваров.Товар = Конт.Товар;
							Конт.Регистр.РезервыТоваров.ПоСчету = Конт.Счет;
							Конт.Регистр.РезервыТоваров.РезервТовара = Резерв;
							Конт.Регистр.РезервыТоваров.ДвижениеРасходВыполнить();

							//Конт.Регистр.РезервыТоваров.ДвижениеРасход(Конт.Товар,Конт.Счет,Резерв);
							//Завьялов А.**********24.12.04***********
							//Создаем таблицу снятие с резерва
//							ПолноеСписаниеПоЗаявки.НоваяСтрока(); 
//							ПолноеСписаниеПоЗаявки.Товар = Конт.Товар;
							//Завьялов А.**********24.12.04***********
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Для приходной накладной
		ИначеЕсли  (Конт.Вид()="ПриходнаяНакладная") ИЛИ (Конт.Вид()="ПриходнаяРеализатора") Тогда
			Конт.Регистр.ОстаткиТоваров.ПривязыватьСтроку(Конт.НомерСтроки);
			Конт.Регистр.ОстаткиТоваров.Фирма=Конт.Фирма;
			Конт.Регистр.ОстаткиТоваров.Товар=Конт.Товар;
			Конт.Регистр.ОстаткиТоваров.Склад=пСклад;
			Конт.Регистр.ОстаткиТоваров.ОстатокТовара=ОбщееКоличество;
			Конт.Регистр.ОстаткиТоваров.Клиент=Конт.Клиент;
			Конт.Регистр.ОстаткиТоваров.ФлагУчета=1;
			Конт.Регистр.ОстаткиТоваров.ДвижениеПриходВыполнить();
		КонецЕсли;
	КонецЦикла; //по строкам

	//регКомпл.УстановитьЗначениеФильтра( "Статус", спСтатусов, 2 );

	глПогашениеПоРезервам(Конт,спСчета,регРезервы,регСпецЗаказы,РегКомпл,регЗаказыПоставщикамЗаявки);
	глДвиженияПоКомплектации(Конт);
	
	Возврат 0;                                       
	
КонецФункции


Функция ДвиженияРегистровНакладных(Конт) Экспорт
	Если Конт.Склад.Выбран() = 0 Тогда НеПроводить(Конт,"Не указан склад!"); Возврат 1; КонецЕсли;
	Если Конт.Клиент.Выбран()=0 Тогда НеПроводить(Конт,"Не указан клиент!"); Возврат 1; КонецЕсли;
	
	
	// по Регистру ОстаткиТоваров (здесь проходят учет все типы накладных )
	Если (Найти(Конт.Вид(),"РасходнаяНакладная")>0) ИЛИ (Конт.Вид()="РасходнаяРеализатора") Тогда
		Если (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.КредитнаяНота)
		или (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.КредитнаяНотаШтраф) Тогда
			Возврат 0;
		КонецЕсли;

		// склпарт
		//составить список складов 
		Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
			Если глЕстьРеквизитМнЧ("СкладТ",Конт.Вид())=1 Тогда
				ТекстЗапроса="SELECT DISTINCT $РасходнаяНакладнаяСтроки.СкладТ [СкладТ $Справочник.МестаХранения]
				|			  FROM $ДокументСтроки."+Конт.Вид()+" AS РасходнаяНакладнаяСтроки  (NOLOCK)
				|			  WHERE IDDOC = :ТекДок AND $РасходнаяНакладнаяСтроки.СкладТ <> $ПустойИД";
				ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");
				ЗапросСКЛ.УстановитьТекстовыйПараметр("ТекДок",Конт.ТекущийДокумент());
				тСклады=ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса);
				Если тСклады.КоличествоСтрок()<=1 Тогда
					ПромСклад=Конт.Склад;
				Иначе
					ПромСклад=СоздатьОбъект("СписокЗначений");
					тСклады.Выгрузить(ПромСклад,,,"СкладТ");
				КонецЕсли;
			Иначе
				ПромСклад=Конт.Склад;
			КонецЕсли;
		Иначе
			ПромСклад=СоздатьОбъект("Справочник.МестаХранения");
		КонецЕсли;

		
		ВремРег=СоздатьОбъект("Регистры");
		Рег=ВремРег.ОстаткиТоваров;
		Рег1=ВремРег.РезервыТоваров;
		Если Конт.ИтогиАктуальны()=0  Тогда
			ВремРег.Актуальность(1);
			УстановленВремРасч=0;
			// если итоги не актуальны, то стоимости берем из временногно расчета Регистра
			Если ((НЕ(глРазрОтрицОстатки=Да))
			ИЛИ (НЕ(семРазрешитьПродаватьРезерв( Конт )=Да))) И (Найти(Конт.Вид(),"РасходнаяНакладная")>0) Тогда
				Рег.ВременныйРасчет();
				УстановленВремРасч=1;
			КонецЕсли;
			
			Если НЕ(семРазрешитьПродаватьРезерв( Конт )=Да) Тогда
				Рег1.ВременныйРасчет();
				УстановленВремРасч=1;
			ИначеЕсли Найти(Конт.Вид(),"РасходнаяНакладная")>0 Тогда
				Если Конт.ДокументОснование.Проведен()=1 Тогда
					Если Конт.ДокументОснование.Вид()="Счет" Тогда
						Рег1.ВременныйРасчет();
						УстановленВремРасч=1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если УстановленВремРасч=1 Тогда           
				Рег.УстановитьЗначениеФильтра("Склад",?(Конт.Склад.Родитель.Выбран()=1,Конт.Склад.Родитель,Конт.Склад),2);
				ТоварЛист=СоздатьОбъект("СписокЗначений");
				Конт.ВыгрузитьТабличнуюЧасть(ТоварЛист,"Товар");
				
				Рег.УстановитьЗначениеФильтра("Товар",ТоварЛист,2);
				Рег1.УстановитьЗначениеФильтра("Товар",ТоварЛист,2);
				
				ВремРег.РассчитатьРегистрыНа(Конт.ТекущийДокумент());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Конт.ВыбратьСтроки();
	Пока Конт.ПолучитьСтроку()>0 Цикл
		Если Конт.Товар.Выбран()=0 Тогда
			Сообщить("В документе "+Конт.Вид()+" № "+Конт.НомерДок+" от "+Конт.ДатаДок+"Не указан товар!");
			Продолжить;
		КонецЕсли;
		
		Если глЕстьРеквизитМнЧ("СкладТ",Конт.Вид())=1 Тогда
			Если ПустоеЗначение(Конт.СкладТ)=0 Тогда
				ПромСклад = Конт.СкладТ;
			Иначе
				ПромСклад = Конт.Склад;
			КонецЕсли;
		Иначе
			ПромСклад = Конт.Склад;
		КонецЕсли;
		
		
		// услуги здесь в этих регистрах не учитываем
		Если Конт.Товар.ВидТовара=Перечисление.ВидыТоваров.Услуга Тогда Продолжить; КонецЕсли;
		
		ОбщееКоличество=Окр(Конт.Количество*Конт.Коэффициент,5);
		
		Если (Найти(Конт.Вид(),"РасходнаяНакладная")>0) ИЛИ (Конт.Вид()="РасходнаяРеализатора") Тогда
			// Для расходной накладной
			Если НЕ(глРазрОтрицОстатки=Да) Тогда
				ОстатокТовара=Рег.СводныйОстаток(Конт.Товар,ПромСклад,,"ОстатокТовара");
				Если (ОстатокТовара<ОбщееКоличество) Тогда
					Сообщить("На складе нет нужного количества товара "+Конт.Товар.Код+" "+Конт.Товар.Наименование);
					НеПроводить(Конт,"На складе осталось "+ОстатокТовара+" "+Конт.Товар.БазоваяЕдиницаИзмерения);
					Рег=0;
					Рег1=0;
					Возврат 1;
				КонецЕсли;
			КонецЕсли;
			// проверяем резерв товара
			Если НЕ(семРазрешитьПродаватьРезерв( Конт )=Да) Тогда
				// Вычислим, сколько всего данного товара
				// Вычислим, сколько зарезервировано всего данного товара
				Резерв=Рег1.СводныйОстаток(Конт.Товар,,"РезервТовара");
				РезервПоСчету=0;
				Если Найти(Конт.Вид(),"РасходнаяНакладная")>0 Тогда
					// Если выписывается накладная на основании Счета или Заказа
					Если (Конт.ДокументОснование.Вид()="Счет") 
					ИЛИ (Конт.ДокументОснование.Вид()="ЗаказОтПокупателя") Тогда
						// Вычислим, сколько зарезервировано именно по данному Счету или Заказу
						РезервПоСчету=Рег1.Остаток(Конт.Товар,Конт.ДокументОснование,"РезервТовара");
					КонецЕсли;
				КонецЕсли;
				
				ПолныйОстаток=Рег.СводныйОстаток(Конт.Товар,,,"ОстатокТовара");
				СвободныйРесурс=ПолныйОстаток-Резерв;
				Если СвободныйРесурс<0  Тогда
					// товара не хватает на все зарезервированные Счета
					СвободныйРесурс=0;
				КонецЕсли;
				
				Если РезервПоСчету+СвободныйРесурс<ОбщееКоличество Тогда
					Сообщить("Нет нужного свободного количества товара "+Конт.Товар.Наименование);
					Сообщить("  Всего осталось "+Строка(ПолныйОстаток)+" "+Конт.Товар.БазоваяЕдиницаИзмерения);
					Сообщить("  Зарезервировано по выписанным Счетам "+Строка(Резерв-РезервПоСчету)
					+" "+Конт.Товар.БазоваяЕдиницаИзмерения);
					НеПроводить(Конт,"  Требуемое количество "+Строка(ОбщееКоличество)+" "+Конт.Товар.БазоваяЕдиницаИзмерения);
					Рег=0;
					Рег1=0;
					Возврат 1;
				КонецЕсли;
			КонецЕсли;
			Конт.Регистр.ОстаткиТоваров.Фирма=Конт.Фирма;
			Конт.Регистр.ОстаткиТоваров.Товар=Конт.Товар;
			Конт.Регистр.ОстаткиТоваров.Склад=ПромСклад;
			Конт.Регистр.ОстаткиТоваров.ОстатокТовара=Макс(ОбщееКоличество, -ОбщееКоличество) ;
			Конт.Регистр.ОстаткиТоваров.Клиент=Конт.Клиент;
			Конт.Регистр.ОстаткиТоваров.ФлагУчета=1;
			Конт.Регистр.ОстаткиТоваров.ПривязыватьСтроку(Конт.НомерСтроки);
			Если ОбщееКоличество > 0 Тогда
				Конт.Регистр.ОстаткиТоваров.ДвижениеРасходВыполнить();			    
			Иначе
				Конт.Регистр.ОстаткиТоваров.ДвижениеПриходВыполнить();
			КонецЕсли;
			
			//-------------
			Если Найти(Конт.Вид(),"РасходнаяНакладная")>0 Тогда
				// по Регистру РезервыТоваров (снимаем зарезервированный товар при выписке Счета)
				Если Конт.ДокументОснование.Проведен()=1 Тогда
					Если (Конт.ДокументОснование.Вид()="Счет") 
					ИЛИ (Конт.ДокументОснование.Вид()="ЗаказОтПокупателя") Тогда
						Резерв=Рег1.Остаток(Конт.Товар,Конт.ДокументОснование,"РезервТовара");
						Если Резерв>0  Тогда
							//Закрываем резерв по Основание в ноль!!!
							Конт.Регистр.РезервыТоваров.ПривязыватьСтроку(Конт.НомерСтроки);
							Конт.Регистр.РезервыТоваров.ДвижениеРасход(Конт.Товар,Конт.ДокументОснование,Резерв);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли  (Конт.Вид()="ПриходнаяНакладная") ИЛИ (Конт.Вид()="ПриходнаяРеализатора") Тогда
			// Для приходной накладной
			
			Конт.Регистр.ОстаткиТоваров.ПривязыватьСтроку(Конт.НомерСтроки);
			Конт.Регистр.ОстаткиТоваров.Фирма=Конт.Фирма;
			Конт.Регистр.ОстаткиТоваров.Товар=Конт.Товар;
			Конт.Регистр.ОстаткиТоваров.Склад=ПромСклад;
			Конт.Регистр.ОстаткиТоваров.ОстатокТовара=ОбщееКоличество;
			Конт.Регистр.ОстаткиТоваров.Клиент=Конт.Клиент;
			Конт.Регистр.ОстаткиТоваров.ФлагУчета=1;
			Конт.Регистр.ОстаткиТоваров.ДвижениеПриходВыполнить();
		КонецЕсли;
	КонецЦикла;
	Рег=0;
	Рег1=0;
	
	Возврат 0;
КонецФункции

//-----------------------------------------------
Функция ДолгПоКредитуOLE(ВидДок,КлиентИДД) Экспорт
	
	Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета.Выбран()=0 Тогда
		Возврат  "Упр. учет не ведется";
	КонецЕсли;
	
	СпрКл=СоздатьОбъект("Справочник.Контрагенты");
	СпрКл.НайтиПоРеквизиту("IDD",КлиентИДД,1);
	
	Если СпрКл.Выбран()=0 Тогда
		Возврат 0;
	КонецЕсли;  
	
	ТекущКлиент=СпрКл.ТекущийЭлемент();
	
	// Пашины фенечки нач
	// Если Клиент принадлежит к группе КлГруппа , то учет кредита проводится по этой группе
	ТекущКлиент.ИспользоватьДату(РабочаяДата());
	Если ТекущКлиент.КлГруппа.Выбран()=1 Тогда
		ТекКлиент=ТекущКлиент.КлГруппа;
	Иначе
		ТекКлиент=ТекущКлиент;
	КонецЕсли;
	ТекКлиент.ИспользоватьДату("");
	// Пашины фенечки кон
	//    ВидДок=Конт.Вид();
	ТипОперации="";
	Если   (ВидДок="РасходнаяНакладная") ИЛИ (ВидДок="РасходнаяРеализатора") ИЛИ (ВидДок="РасходнаяНакладнаяНал") Тогда
		Если (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа)
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.Переработка) 
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.Пожертвование) 
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.Услуга)Тогда
			ТипОперации="Продажа";
		ИначеЕсли (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратПоставщику) 
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.ЭкспортныйВозврат)
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.КредитнаяНота)
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.КредитнаяНотаШтраф) Тогда
			ТипОперации="ВозвратПоставщику";
		КонецЕсли;
	ИначеЕсли  (ВидДок="ПриходнаяНакладная") ИЛИ (ВидДок="ПриходнаяРеализатора")  Тогда
		Если (Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.Закупка)
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.ПриемИмпорта)
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.Недопоставка)
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.Допоставка) Тогда
			ТипОперации="Закупка";
		ИначеЕсли (Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя) 
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратСПереработки) Тогда
			ТипОперации="ВозвратОтПокупателя";
		КонецЕсли;
	ИначеЕсли  (ВидДок="ОтчетРеализатора") ИЛИ (ВидДок="ИнвентаризацияРеализатора") или (ВидДок="РасходнаяНакладнаяНал")  Тогда
		ТипОперации="Продажа";
	ИначеЕсли  (ВидДок="ВводОстатковРеализации") Тогда
		ТипОперации="Продажа";
	ИначеЕсли ВидДок="УслугиПеревозки" Тогда
		ТипОперации="Закупка";		
	ИначеЕсли ВидДок="Счет" Тогда
		ТипОперации="Продажа";
	КонецЕсли;
	
	// В зависимости от вида документа
	// определим РегистрУчета и
	// определим текущий курс валюты Кредита
	Если         (ТипОперации="Продажа")
	ИЛИ (ТипОперации="ВозвратОтПокупателя") Тогда
		ИмяРегистрУчета="ВзаиморасчетыПокупателей";
		Знак=1;
		// значит кредит мы даем клиенту
		// значит при продаже товара мы начисляем Долг (на клиента),
		СуммаКред=ТекКлиент.СуммаКредита.Получить(РабочаяДата());
		ВалютаКредита=ТекКлиент.ВалютаКредита;
		Если СуммаКред<>0 Тогда
			Глубина=ТекКлиент.Глубина.Получить(РабочаяДата());
		Иначе
			Глубина=0;
		КонецЕсли;
	ИначеЕсли     (ТипОперации="Закупка")
	ИЛИ (ТипОперации="ВозвратПоставщику") Тогда
		ИмяРегистрУчета="ВзаиморасчетыПоставщиков";
		Знак=-1;
		// значит кредит нам дает клиент
		СуммаКред=ТекКлиент.СуммаКредитаПоставщика.Получить(РабочаяДата());
		ВалютаКредита=ТекКлиент.ВалютаКредитаПоставщика;
		Если СуммаКред<>0 Тогда
			Глубина=ТекКлиент.ГлубинаКредитаПоставщика.Получить(РабочаяДата());
		Иначе
			Глубина=0;
		КонецЕсли;
	КонецЕсли;
	Если ПустоеЗначение(ВалютаКредита)=1 Тогда
		ВалютаКредита=ТекКлиент.ВалютаВзаиморасчетов;
	КонецЕсли;
	Если ПустоеЗначение(ВалютаКредита)=1 Тогда
		ВалютаКредита=Константа.ВалютаВзаиморасчетов;
	КонецЕсли;
	Если ПустоеЗначение(ВалютаКредита)=1 Тогда
		Возврат "Не найдена валюта кредита клиента!";
	КонецЕсли;
	
	Рег=СоздатьОбъект("Регистр."+ИмяРегистрУчета);
	Рег.УстановитьЗначениеФильтра("Клиент",ТекКлиент,1);
	Просрочено=0;
	Срок=0;
	ТекущийДолг=0;
	СрочныйДолг=0; // Это тот долг,для оплаты которого осталось 7 дней сроку.
	ПросроченныйДолг=0;  
	Рег.ВыбратьИтоги();
	Пока Рег.ПолучитьИтог()>0 Цикл
		Если Рег.КредДокумент.Выбран()=0 Тогда
			// пропускаем пустые документы
			Продолжить;
		КонецЕсли;
		
		ВидКредДок=Рег.КредДокумент.Вид();
		Если         (ВидКредДок="РасходнаяНакладная")
		ИЛИ (ВидКредДок="ПриходнаяНакладная")
		ИЛИ (ВидКредДок="УслугиПеревозки")
		ИЛИ (ВидКредДок="ВводОстатковКредита") Тогда
			ДатаОплаты=Рег.КредДокумент.ДатаОплаты;
			Если Число(ДатаОплаты)=0 Тогда
				ДатаОплаты=Рег.КредДокумент.ДатаДок;
			КонецЕсли;
		ИначеЕсли      (ВидКредДок="ПриходныйОрдерТБ")
		ИЛИ (ВидКредДок="РасходныйОрдерТБ")
		ИЛИ (ВидКредДок="ОтчетРеализатора")
		ИЛИ (ВидКредДок="ИнвентаризацияРеализатора")
		ИЛИ (ВидКредДок="ПлатежноеПоручение")
		ИЛИ (ВидКредДок="СписаниеЗадолженности")
		ИЛИ (ВидКредДок="Счет_фактура")
		ИЛИ (ВидКредДок="ДвиженияДенежныхСредств") Тогда
			ДатаОплаты=Рег.КредДокумент.ДатаДок;
		Иначе
			Предупреждение ("При диагностике обнаружен непонятный вид документа кредита!");
			Возврат "";
		КонецЕсли;
		
		ТекущийДолг=ТекущийДолг+Рег.Долг; 
		
		Если (Окр(Знак*Рег.Долг-Константа.ПогрешностьКредитЛинии,2)>0) И (Просрочено<(РабочаяДата()-ДатаОплаты)) Тогда
			// если еще не погашено
			Просрочено=РабочаяДата()-ДатаОплаты;
		КонецЕсли;
		
		Если ДатаОплаты < РабочаяДата() Тогда
			ПросроченныйДолг=ПросроченныйДолг+Рег.Долг;
			СрочныйДолг=СрочныйДолг+Рег.Долг;
		КонецЕсли;
		
		//        Если ДатаОплаты > (Конт.ДатаДок-7) Тогда
		//           СрочныйДолг=СрочныйДолг+Рег.Долг;
		//        КонецЕсли;
		
	КонецЦикла;
	
	Рег=0;        
	
	Если (ВидДок ="РасходнаяНакладная") ИЛИ (ВидДок="Счет") Тогда
		Если Просрочено>Константа.ОгрПросроченногоДолга.Получить(РабочаяДата()) Тогда
			Сообщить("У клиента  "+ТекКлиент.Наименование+
			"  платежи по кредиту просрочены на "+Просрочено+" дней!");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ?(Знак>0,"Кредит клиенту=","Кредит нам=")+ФРМ(СуммаКред,ВалютаКредита,1)+" "
	+", на "+СокрЛ(Глубина)+" дней. "
	+?(Знак>0,"Тек. долг клиента=","Наш тек. долг=")+ФРМ(Знак*ТекущийДолг,ВалютаКредита,1)+" . "
	+?(Знак*ТекущийДолг>СуммаКред,"КРЕДИТ ИСЧЕРПАН! ","Остаток кредита="
	+ФРМ(СуммаКред-Знак*ТекущийДолг,ВалютаКредита,1)+" . ")
	+?(Знак*ПросроченныйДолг>0,"ПРОСРОЧЕНА ОПЛАТА! "+ФРМ(Знак*ПросроченныйДолг,ВалютаКредита,1)+" на "
	+СокрЛ(Просрочено)+" дней.","Не просрочено.")+
	?(Знак*СрочныйДолг>0,"Срочный долг="+ФРМ(Знак*СрочныйДолг,ВалютаКредита,1),"");
КонецФункции


//-----------------------------------------------
Функция ДолгПоКредиту(Конт,Клиент="") Экспорт
	
	Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета.Выбран()=0 Тогда
		Возврат  "Упр. учет не ведется";
	КонецЕсли;
	
	Если Конт.Клиент.Выбран()=0 Тогда
		Возврат "Выберите клиента! Иначе накладная не будет проведена!";
	КонецЕсли;  
	
	ТекущКлиент=Конт.Клиент;
	
	//PR Begin
	Если Конт.Вид()="Счет" Тогда
		Если (ПустоеЗначение(Конт.КлиентФилиала)=0) И (Пользователь.ОсновнаяФирма<>Константа.ОсновнаяФирма) Тогда
			//подключаемся к базе оригинальной для полной картины по взаиморасчетам
			Если ПустоеЗначение(Пользователь.ОсновнаяФирма.КаталогКонфигурации)=0 Тогда
				ТекСостояние=гБазаФирмыOLE.EvalExpr("ДолгПоКредитуOLE("""+Конт.Вид()+""","""+Конт.КлиентФилиала.IDD+""")");
				Есть = Найти(ТекСостояние,"ПРОСРОЧЕНА ОПЛАТА!");
				Если Есть > 0 Тогда
					Предупреждение( Сред(ТекСостояние, Есть) );
				КонецЕсли;
				Возврат ТекСостояние;
			Иначе
				ТекущКлиент=Конт.КлиентФилиала;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	//PR End
	
	// Пашины фенечки нач
	// Если Клиент принадлежит к группе КлГруппа , то учет кредита проводится по этой группе
	ТекущКлиент.ИспользоватьДату(Конт.ДатаДок);
	Если ТекущКлиент.КлГруппа.Выбран()=1 Тогда
		ТекКлиент=ТекущКлиент.КлГруппа;
	Иначе
		ТекКлиент=ТекущКлиент;
	КонецЕсли;
	ТекКлиент.ИспользоватьДату("");
	// Пашины фенечки кон
	ВидДок=Конт.Вид();
	ТипОперации="";
	Если   (ВидДок="РасходнаяНакладная") ИЛИ (ВидДок="РасходнаяРеализатора") ИЛИ (ВидДок="РасходнаяНакладнаяНал") Тогда
		Если (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа)
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.Переработка) 
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.Пожертвование) 
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.Услуга)Тогда
			ТипОперации="Продажа";
		ИначеЕсли (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратПоставщику) 
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.ЭкспортныйВозврат)
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.КредитнаяНота)
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.КредитнаяНотаШтраф) Тогда
			ТипОперации="ВозвратПоставщику";
		КонецЕсли;
	ИначеЕсли  (ВидДок="ПриходнаяНакладная") ИЛИ (ВидДок="ПриходнаяРеализатора")  Тогда
		Если (Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.Закупка)
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.ПриемИмпорта)
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.Недопоставка)
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.Допоставка) Тогда
			ТипОперации="Закупка";
		ИначеЕсли (Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя) 
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратСПереработки) Тогда
			ТипОперации="ВозвратОтПокупателя";
		КонецЕсли;
	ИначеЕсли  (ВидДок="ОтчетРеализатора") ИЛИ (ВидДок="ИнвентаризацияРеализатора") или (ВидДок="РасходнаяНакладнаяНал")  Тогда
		ТипОперации="Продажа";
	ИначеЕсли  (ВидДок="ВводОстатковРеализации") Тогда
		ТипОперации="Продажа";
	ИначеЕсли ВидДок="УслугиПеревозки" Тогда
		ТипОперации="Закупка";		
	ИначеЕсли ВидДок="Счет" Тогда
		ТипОперации="Продажа";
	ИначеЕсли ВидДок="ЗаказОтПокупателя" Тогда
		ТипОперации="Продажа";
	ИначеЕсли ВидДок="ЗаказПоставщику" Тогда
		ТипОперации="Закупка";
	ИначеЕсли ВидДок="Счет_фактура" Тогда
		Если Конт.ВидКлиента=Перечисление.ВидыКлиентов.Покупатель Тогда
			ТипОперации="Продажа";
		Иначе
			ТипОперации="Закупка";
		КонецЕсли;
	КонецЕсли;
	
	// В зависимости от вида документа
	// определим РегистрУчета и
	// определим текущий курс валюты Кредита
	Если         (ТипОперации="Продажа")
	ИЛИ (ТипОперации="ВозвратОтПокупателя") Тогда
		ИмяРегистрУчета="ВзаиморасчетыПокупателей";
		Знак=1;
		// значит кредит мы даем клиенту
		// значит при продаже товара мы начисляем Долг (на клиента),
		СуммаКред=ТекКлиент.СуммаКредита.Получить(Конт.ДатаДок);
		ВалютаКредита=ТекКлиент.ВалютаКредита;
		Если СуммаКред<>0 Тогда
			Глубина=ТекКлиент.Глубина.Получить(Конт.ДатаДок);
		Иначе
			Глубина=0;
		КонецЕсли;
	ИначеЕсли     (ТипОперации="Закупка")
	ИЛИ (ТипОперации="ВозвратПоставщику") Тогда
		ИмяРегистрУчета="ВзаиморасчетыПоставщиков";
		Знак=-1;
		// значит кредит нам дает клиент
		СуммаКред=ТекКлиент.СуммаКредитаПоставщика.Получить(Конт.ДатаДок);
		ВалютаКредита=ТекКлиент.ВалютаКредитаПоставщика;
		Если СуммаКред<>0 Тогда
			Глубина=ТекКлиент.ГлубинаКредитаПоставщика.Получить(Конт.ДатаДок);
		Иначе
			Глубина=0;
		КонецЕсли;
	КонецЕсли;
	Если ПустоеЗначение(ВалютаКредита)=1 Тогда
		ВалютаКредита=ТекКлиент.ВалютаВзаиморасчетов;
	КонецЕсли;
	Если ПустоеЗначение(ВалютаКредита)=1 Тогда
		ВалютаКредита=Константа.ВалютаВзаиморасчетов;
	КонецЕсли;
	Если ПустоеЗначение(ВалютаКредита)=1 Тогда
		Возврат "Не найдена валюта кредита клиента!";
	КонецЕсли;
	
	Рег=СоздатьОбъект("Регистр."+ИмяРегистрУчета);
	Если Конт.СравнитьТА()=-1  Тогда  // документ не новый, а существующий
		// так делаем, что бы отделить новый Документ
		// если итоги актуальны, то смотрим итоги на ТА
		// если итоги не актуальны, то берем из временногно расчета Регистра
		Рег.ВременныйРасчет();
		Рег.УстановитьЗначениеФильтра("Клиент",ТекКлиент,1);
		РассчитатьРегистрыПо(Конт.ТекущийДокумент());
		
		// здесь показываем Долги по Взаиморасчетам именно на момент (после) проводки Документа
	Иначе
		Рег.УстановитьЗначениеФильтра("Клиент",ТекКлиент,1);
	КонецЕсли;
	Просрочено=0;
	Срок=0;
	ТекущийДолг=0;
	СрочныйДолг=0; // Это тот долг,для оплаты которого осталось 7 дней сроку.
	ПросроченныйДолг=0;
	Рег.ВыбратьИтоги();
	Пока Рег.ПолучитьИтог()>0 Цикл
		Если Рег.КредДокумент.Выбран()=0 Тогда
			// пропускаем пустые документы
			Продолжить;
		КонецЕсли;
		
		ВидКредДок=Рег.КредДокумент.Вид();
		Если         (ВидКредДок="РасходнаяНакладная")
		ИЛИ (ВидКредДок="ПриходнаяНакладная")
		ИЛИ (ВидКредДок="МарочныйОтчет")
		ИЛИ (ВидКредДок="ЗаказПоставщику")
		ИЛИ (ВидКредДок="УслугиПеревозки")
		ИЛИ (ВидКредДок="Счет_фактура")
		ИЛИ (ВидКредДок="ВводОстатковКредита") Тогда
			ДатаОплаты=Рег.КредДокумент.ДатаОплаты;
			Если Число(ДатаОплаты)=0 Тогда
				ДатаОплаты=Рег.КредДокумент.ДатаДок;
			КонецЕсли;
		ИначеЕсли      (ВидКредДок="ПриходныйОрдерТБ")
		ИЛИ (ВидКредДок="РасходныйОрдерТБ")
		ИЛИ (ВидКредДок="ОтчетРеализатора")
		ИЛИ (ВидКредДок="ИнвентаризацияРеализатора")
		ИЛИ (ВидКредДок="ПлатежноеПоручение")
		ИЛИ (ВидКредДок="СписаниеЗадолженности")
		ИЛИ (ВидКредДок="ДвиженияДенежныхСредств") Тогда
			ДатаОплаты=Рег.КредДокумент.ДатаДок;
		Иначе
			Предупреждение ("При диагностике обнаружен непонятный вид документа кредита!");
			Возврат "";
		КонецЕсли;
		
		ТекущийДолг=ТекущийДолг+Рег.Долг; 
		
		Если (Окр(Знак*Рег.Долг-Константа.ПогрешностьКредитЛинии,2)>0) И (Просрочено<(Конт.ДатаДок-ДатаОплаты)) Тогда
			// если еще не погашено
			Просрочено=Конт.ДатаДок-ДатаОплаты;
		КонецЕсли;
		
		Если ДатаОплаты < Конт.ДатаДок Тогда
			ПросроченныйДолг=ПросроченныйДолг+Рег.Долг;
			СрочныйДолг=СрочныйДолг+Рег.Долг;
		КонецЕсли;
		
		//        Если ДатаОплаты > (Конт.ДатаДок-7) Тогда
		//           СрочныйДолг=СрочныйДолг+Рег.Долг;
		//        КонецЕсли;
		
	КонецЦикла;
	
	Рег=0;        
	
	Если (Конт.Вид()="РасходнаяНакладная") ИЛИ (Конт.Вид()="Счет") Тогда
		Если Просрочено>Константа.ОгрПросроченногоДолга.Получить(Конт.ДатаДок) Тогда
			Предупреждение("У клиента  "+ТекКлиент.Наименование+
			"  платежи по кредиту просрочены на "+Просрочено+" дней!");
		КонецЕсли;
	КонецЕсли;
	
	КоммКредита=ТекКлиент.КомментарийДляКредита.Получить(Конт.ДатаДок);
	Если ПустоеЗначение(КоммКредита)=0 Тогда
		Предупреждение("!!! Информация CrediWeb !!! "+РазделительСтрок+КоммКредита);
	КонецЕсли;
	
	Возврат ?(Знак>0,"Кредит клиенту=","Кредит нам=")+ФРМ(СуммаКред,ВалютаКредита,1)+" "
	+", на "+СокрЛ(Глубина)+" дней. "
	+?(Знак>0,"Тек. долг клиента=","Наш тек. долг=")+ФРМ(Знак*ТекущийДолг,ВалютаКредита,1)+" . "
	+?(Знак*ТекущийДолг>СуммаКред,"КРЕДИТ ИСЧЕРПАН! ","Остаток кредита="
	+ФРМ(СуммаКред-Знак*ТекущийДолг,ВалютаКредита,1)+" . ")
	+?(Знак*ПросроченныйДолг>0,"ПРОСРОЧЕНА ОПЛАТА! "+ФРМ(Знак*ПросроченныйДолг,ВалютаКредита,1)+" на "
	+СокрЛ(Просрочено)+" дней.","Не просрочено.")+
	?(Знак*СрочныйДолг>0,"Срочный долг="+ФРМ(Знак*СрочныйДолг,ВалютаКредита,1),"");
КонецФункции


Функция ДолгПоКредитуНов(Конт,Клиент="") Экспорт

	Если Конт.Клиент.Выбран()=0 Тогда
		Возврат "Выберите клиента! Иначе накладная не будет проведена!";
	КонецЕсли;  
	
	ТекущКлиент=Конт.Клиент;
	
	// Если Клиент принадлежит к группе КлГруппа , то учет кредита проводится по этой группе
	ТекущКлиент.ИспользоватьДату(Конт.ДатаДок);
	Если ТекущКлиент.КлГруппа.Выбран()=1 Тогда
		ТекКлиент=ТекущКлиент.КлГруппа;
	Иначе
		ТекКлиент=ТекущКлиент;
	КонецЕсли;
	ТекКлиент.ИспользоватьДату("");

	СуммаНеЗакрытыхСчетов=0;
	ВидДок=Конт.Вид();
	ТипОперации="";
	Если   (ВидДок="РасходнаяНакладная") ИЛИ (ВидДок="РасходнаяРеализатора") ИЛИ (ВидДок="РасходнаяНакладнаяНал") Тогда
		Если (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа)
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.Переработка) 
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.Пожертвование) 
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.Услуга)Тогда
			ТипОперации="Продажа";
		ИначеЕсли (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратПоставщику) 
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.ЭкспортныйВозврат)
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.КредитнаяНота)
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.КредитнаяНотаШтраф) Тогда
			ТипОперации="ВозвратПоставщику";
		КонецЕсли;
	ИначеЕсли  (ВидДок="ПриходнаяНакладная") ИЛИ (ВидДок="ПриходнаяРеализатора")  Тогда
		Если (Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.Закупка)
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.ПриемИмпорта)
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.Недопоставка)
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.Допоставка) Тогда
			ТипОперации="Закупка";
		ИначеЕсли (Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя) 
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратСПереработки) Тогда
			ТипОперации="ВозвратОтПокупателя";
		КонецЕсли;
	ИначеЕсли  (ВидДок="ОтчетРеализатора") ИЛИ (ВидДок="ИнвентаризацияРеализатора") или (ВидДок="РасходнаяНакладнаяНал")  Тогда
		ТипОперации="Продажа";
	ИначеЕсли  (ВидДок="ВводОстатковРеализации") Тогда
		ТипОперации="Продажа";
	ИначеЕсли ВидДок="УслугиПеревозки" Тогда
		ТипОперации="Закупка";
	ИначеЕсли ВидДок="СчетОбщий"  Тогда
		ТипОперации="Продажа";		
	ИначеЕсли ВидДок="Счет" Тогда
		ТипОперации="Продажа";
		ТекстЗапросаСчета="SELECT КомплектацияЗаявокОстатки.ПоСчету [ПоСчету $Документ.Счет]
//		|						, КомплектацияЗаявокОстатки.Статус
		|						, ROUND($Счет.Всего,2) Всего
		|				   FROM $РегистрОстатки.КомплектацияЗаявок(,
		|															INNER JOIN $Документ.Счет AS Счет With (NOLOCK) ON Счет.IDDOC = ПоСчету, $Счет.КлГруппа = :Клиент AND $Счет.ВидОплаты = 0,
//		|														,ПоСчету IN (SELECT Счет.IDDOC FROM $Документ.Счет AS Счет With (NOLOCK) 
//		|																	 INNER JOIN _1sjourn Жур(NOLOCK) ON Жур.IDDOC = Счет.IDDOC AND date_time_iddoc>=:Нач AND Жур.IDDOCDEF = $ВидДокумента.Счет
//		|																	 WHERE $Счет.КлГруппа = :Клиент),
		|														(ПоСчету),) AS КомплектацияЗаявокОстатки
		|				   INNER JOIN $Документ.Счет AS Счет With (NOLOCK) ON ПоСчету = Счет.IDDOC
//		|				   WHERE $Счет.ВидОплаты = 0
		|";

//		ТекстЗапросаСчета="SELECT КомплектацияЗаявокОстатки.ПоСчету [ПоСчету $Документ.Счет]
////		|						, КомплектацияЗаявокОстатки.Статус
//		|						, ROUND($Счет.Всего,2) Всего
//		|				   FROM $РегистрОстатки.РезервыТоваров("+?(Конт.Выбран()=0,"",":КонПоз~")+",
//		|														INNER JOIN $Документ.Счет AS Счет With (NOLOCK) ON Счет.IDDOC = ПоСчету, $Счет.КлГруппа = :Клиент,
//		|														(ПоСчету),) AS КомплектацияЗаявокОстатки
//		|				   INNER JOIN $Документ.Счет AS Счет With (NOLOCK) ON ПоСчету = Счет.IDDOC
//		|";

		ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");
		ЗапросСКЛ.УстановитьТекстовыйПараметр("Клиент",ТекКлиент);
		ЗапросСКЛ.УстановитьТекстовыйПараметр("КонПоз",СформироватьПозициюДокумента(Конт.ТекущийДокумент()));
		Если (Конт.СравнитьТА()<>-1) Тогда
			табл=ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапросаСчета);
			Если НазваниеНабораПрав()="Администратор" Тогда
				//табл.ВыбратьСтроку();
			КонецЕсли;

			СуммаНеЗакрытыхСчетов = табл.Итог("Всего");
		Иначе
			СуммаНеЗакрытыхСчетов = 0;
		КонецЕсли;
		
	ИначеЕсли ВидДок="ЗаказОтПокупателя" Тогда
		ТипОперации="Продажа";
	ИначеЕсли ВидДок="Счет_фактура" Тогда
		Если Конт.ВидКлиента=Перечисление.ВидыКлиентов.Покупатель Тогда
			ТипОперации="Продажа";
		Иначе
			ТипОперации="Закупка";
		КонецЕсли;
	КонецЕсли;
	
	// В зависимости от вида документа
	// определим РегистрУчета и
	// определим текущий курс валюты Кредита
	Если         (ТипОперации="Продажа")
	ИЛИ (ТипОперации="ВозвратОтПокупателя") Тогда
		ИмяРегистрУчета="ВзаиморасчетыПокупателей";
		Знак=1;
		// значит кредит мы даем клиенту
		// значит при продаже товара мы начисляем Долг (на клиента),
		СуммаКред=ТекКлиент.СуммаКредита.Получить(Конт.ДатаДок);
		ВалютаКредита=ТекКлиент.ВалютаКредита;
		Если СуммаКред<>0 Тогда
			Глубина=ТекКлиент.Глубина.Получить(Конт.ДатаДок);
		Иначе
			Глубина=0;
		КонецЕсли;
	ИначеЕсли     (ТипОперации="Закупка")
	ИЛИ (ТипОперации="ВозвратПоставщику") Тогда
		ИмяРегистрУчета="ВзаиморасчетыПоставщиков";
		Знак=-1;
		// значит кредит нам дает клиент
		СуммаКред=ТекКлиент.СуммаКредитаПоставщика.Получить(Конт.ДатаДок);
		ВалютаКредита=ТекКлиент.ВалютаКредитаПоставщика;
		Если СуммаКред<>0 Тогда
			Глубина=ТекКлиент.ГлубинаКредитаПоставщика.Получить(Конт.ДатаДок);
		Иначе
			Глубина=0;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(ВалютаКредита)=1 Тогда
		ВалютаКредита=ТекКлиент.ВалютаВзаиморасчетов;
	КонецЕсли;
	Если ПустоеЗначение(ВалютаКредита)=1 Тогда
		ВалютаКредита=Константа.ВалютаВзаиморасчетов;
	КонецЕсли;
	Если ПустоеЗначение(ВалютаКредита)=1 Тогда
		Возврат "Не найдена валюта кредита клиента!";
	КонецЕсли;
	
	Запрос=СоздатьОбъект("ODBCRecordSet");
	
	ТекстЗапроса = "SELECT Рег.Клиент [Клиент $Справочник.Контрагенты],                                                                       
	|						CASE WHEN $СпрК2.КлГруппа=$ПустойИД THEN  Рег.Клиент ELSE $СпрК2.КлГруппа END [КлГруппа $Справочник.Контрагенты],
	|						Рег.КредДокумент [КредДокумент $Документ],                      
	|						COALESCE($ДокР2.ДатаОплаты,$ДокВО.ДатаОплаты,$ДокСФ.ДатаОплаты) ДатаОплаты,
	|						COALESCE($ДокР2.Клиент,$ДокВО.Клиент,$ДокСФ.Клиент,Рег.Клиент) [КлиентДок $Справочник.Контрагенты],
	|						COALESCE($ДокР2.ВсегоСуммаШ,$ДокВО.Сумма,$ДокСФ.ВсегоСуммаШ,0) СуммаДок,
	|						Рег.ДолгОстаток ДолгКон,                                             
	|						CASE WHEN COALESCE($ДокР2.ДатаОплаты,$ДокВО.ДатаОплаты,$ДокСФ.ДатаОплаты)<:Кон THEN Рег.ДолгОстаток ELSE 0 END ПросроченныйДолг,
//	|						$ПоследнееЗначение.Контрагенты.СуммаКредита(Рег.Клиент,:Кон) СуммаКредита,                                                      
//	|						$ПоследнееЗначение.Контрагенты.Глубина(Рег.Клиент,:Кон) Глубина,                                                      
	|						COALESCE($ДокР2.Валюта,$ДокВО.Валюта,$ДокСФ.Валюта,:БазВалюта) [Валюта $Справочник.Валюты],
	|						COALESCE($ДокР2.Курс,$ДокВО.Курс,$ДокСФ.Курс,1) Курс,
	|						$СпрК2.ВалютаВзаиморасчетов [ВалютаВзаиморасчетов $Справочник.Валюты],
	|						$СпрК2.ВалютаКредита [ВалютаКредита $Справочник.Валюты],
//	|						CASE WHEN $СпрК2.ВалютаВзаиморасчетов<>:БазВалюта THEN $ПоследнееЗначение.Валюты.Курс($СпрК2.ВалютаВзаиморасчетов,CAST(LEFT(Журн.DATE_TIME_IDDOC,8) as SmallDateTime)) ELSE 1 END КурсВал,
//	|						CASE WHEN $СпрК2.ВалютаКредита<>:БазВалюта THEN $ПоследнееЗначение.Валюты.Курс($СпрК2.ВалютаКредита,CAST(LEFT(Журн.DATE_TIME_IDDOC,8) as SmallDateTime)) ELSE 1 END КурсВалКредита,
	|						DATEDIFF(day, COALESCE($ДокР2.ДатаОплаты,$ДокВО.ДатаОплаты,$ДокСФ.ДатаОплаты,CAST(:Кон as SmallDateTime) ), CAST(:Кон as SmallDateTime)) ПросроченоДней
	|			      FROM $РегистрОстатки.ВзаиморасчетыПокупателей("+?(Конт.Выбран()=0,"",":КонПоз~")+"
	|																 ,, Клиент = :КлГруппа
	|																,(Клиент,КредДокумент)
	|																,Долг ) as Рег         
	|				  LEFT JOIN $Документ.РасходнаяНакладная ДокР2 (NOLOCK) ON ДокР2.IDDOC=RIGHT(Рег.КредДокумент,9) 
//	|				  LEFT JOIN $Документ.ПриходнаяНакладная ДокПН (NOLOCK) ON ДокПН.IDDOC=RIGHT(Рег.КредДокумент,9) 
	|				  LEFT JOIN $Документ.ВводОстатковКредита ДокВО (NOLOCK) ON ДокВО.IDDOC=RIGHT(Рег.КредДокумент,9) 
	|				  LEFT JOIN $Документ.Счет_фактура ДокСФ (NOLOCK) ON ДокСФ.IDDOC=RIGHT(Рег.КредДокумент,9) 
	|				  INNER JOIN $Справочник.Контрагенты СпрК2 (NOLOCK) ON СпрК2.ID=Рег.Клиент
	|				  ORDER BY DATEDIFF(day, COALESCE($ДокР2.ДатаОплаты,$ДокВО.ДатаОплаты,$ДокСФ.ДатаОплаты,CAST(:Кон as SmallDateTime) ), CAST(:Кон as SmallDateTime)) DESC
	|";

	Запрос.УстановитьТекстовыйПараметр("КлГруппа",ТекКлиент);
	Запрос.УстановитьТекстовыйПараметр("КонПоз",СформироватьПозициюДокумента(Конт.ТекущийДокумент()));
	Запрос.УстановитьТекстовыйПараметр("Кон",Конт.ДатаДок);
	Запрос.УстановитьТекстовыйПараметр("БазВалюта",Константа.ВалютаВзаиморасчетов);
	табл=СоздатьОбъект("ТаблицаЗначений");
	табл=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
//	табл.ВыбратьСтроку();
	
	Просрочено = 0;
	ДолгКон = табл.Итог("ДолгКон");
	Если (табл.КоличествоСтрок()>0) И (ДолгКон>0) Тогда
		табл.ПолучитьСтрокуПоНомеру(1);
		Просрочено = табл.Просроченодней;
	КонецЕсли;
	ТекущийДолг = ДолгКон+СуммаНеЗакрытыхСчетов;
	ПросроченныйДолг = табл.Итог("ПросроченныйДолг");
	
	Если (Конт.Вид()="РасходнаяНакладная") ИЛИ (Конт.Вид()="Счет") ИЛИ (Конт.Вид()="СчетОбщий") Тогда
		Если Просрочено>Константа.ОгрПросроченногоДолга.Получить(Конт.ДатаДок) Тогда
			Предупреждение("У клиента  "+ТекКлиент.Наименование+
			"  платежи по кредиту просрочены на "+Просрочено+" дней!");
		КонецЕсли;
	КонецЕсли;
	//
	КоммКредита=ТекКлиент.КомментарийДляКредита.Получить(Конт.ДатаДок);
	Если ПустоеЗначение(КоммКредита)=0 Тогда
		Предупреждение("!!! Информация CrediWeb !!! "+РазделительСтрок+КоммКредита);
	КонецЕсли;
	//
	Возврат ?(Знак>0,"Кредит клиенту=","Кредит нам=")+ФРМ(СуммаКред,ВалютаКредита,1)+" "
	+", на "+СокрЛ(Глубина)+" дней. "
	+?(Знак>0,"Тек. долг клиента=","Наш тек. долг=")+ФРМ(Знак*ТекущийДолг,ВалютаКредита,1)+" . "
	+?(Знак*ТекущийДолг>СуммаКред,"КРЕДИТ ИСЧЕРПАН! ","Остаток кредита="
	+ФРМ(СуммаКред-Знак*ТекущийДолг,ВалютаКредита,1)+" . ")
	+?(Знак*ПросроченныйДолг>0,"ПРОСРОЧЕНА ОПЛАТА! "+ФРМ(Знак*ПросроченныйДолг,ВалютаКредита,1)+" на "
	+СокрЛ(Просрочено)+" дней.","Не просрочено.");
		
КонецФункции

//-----------------------------
Функция  ДосьеКлиентаПоКредиту(Конт)  Экспорт
	Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета.Выбран()=0 Тогда
		Возврат  "Упр. учет не ведется";
	КонецЕсли;
	
	Если Конт.Клиент.Выбран()=0 Тогда
		Возврат "Выберите клиента! Иначе накладная не будет проведена!";
	КонецЕсли;  
	
	// Пашины фенечки нач
	// Если Клиент принадлежит к группе КлГруппа , то учет кредита проводится по этой группе
	ТекущКлиент=Конт.Клиент;
	ТекущКлиент.ИспользоватьДату(Конт.ДатаДок);
	Если ТекущКлиент.КлГруппа.Выбран()=1 Тогда
		ТекКлиент=ТекущКлиент.КлГруппа;
	Иначе
		ТекКлиент=ТекущКлиент;
	КонецЕсли;                     
	ТекКлиент.ИспользоватьДату("");
	// Пашины фенечки кон
	ВидДок=Конт.Вид();
	ТипОперации="";
	Если   (ВидДок="РасходнаяНакладная") ИЛИ (ВидДок="РасходнаяРеализатора") ИЛИ (ВидДок="РасходнаяНакладнаяНал") Тогда
		Если (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа)
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.Переработка) 
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.Услуга)Тогда
			ТипОперации="Продажа";
		ИначеЕсли (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратПоставщику) 
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.ЭкспортныйВозврат)
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.КредитнаяНота)
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.КредитнаяНотаШтраф) Тогда
			ТипОперации="ВозвратПоставщику";
		КонецЕсли;
	ИначеЕсли  (ВидДок="ПриходнаяНакладная") ИЛИ (ВидДок="ПриходнаяРеализатора")  Тогда
		Если (Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.Закупка)
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.ПриемИмпорта)
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.Недопоставка)
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.Допоставка) Тогда
			ТипОперации="Закупка";
		ИначеЕсли (Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя) 
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратСПереработки) Тогда
			ТипОперации="ВозвратОтПокупателя";
		КонецЕсли;
	ИначеЕсли  (ВидДок="ОтчетРеализатора") ИЛИ (ВидДок="ИнвентаризацияРеализатора") или (ВидДок="РасходнаяНакладнаяНал")  Тогда
		ТипОперации="Продажа";
	ИначеЕсли  (ВидДок="ВводОстатковРеализации") Тогда
		ТипОперации="Продажа";
	ИначеЕсли ВидДок="УслугиПеревозки" Тогда
		ТипОперации="Закупка";		
	КонецЕсли;
	
	// В зависимости от вида документа
	// определим РегистрУчета и
	// определим текущий курс валюты Кредита
	Если         (ТипОперации="Продажа")
	ИЛИ (ТипОперации="ВозвратОтПокупателя") Тогда
		ИмяРегистрУчета="ВзаиморасчетыПокупателей";
		Знак=1;
		// значит кредит мы даем клиенту
		// значит при продаже товара мы начисляем Долг (на клиента),
		СуммаКред=ТекКлиент.СуммаКредита.Получить(Конт.ДатаДок);
		ВалютаКредита=ТекКлиент.ВалютаКредита;
		Если СуммаКред<>0 Тогда
			Глубина=ТекКлиент.Глубина.Получить(Конт.ДатаДок);
		Иначе
			Глубина=0;
		КонецЕсли;
	ИначеЕсли     (ТипОперации="Закупка")
	ИЛИ (ТипОперации="ВозвратПоставщику") Тогда
		ИмяРегистрУчета="ВзаиморасчетыПоставщиков";
		Знак=-1;
		// значит кредит нам дает клиент
		СуммаКред=ТекКлиент.СуммаКредитаПоставщика.Получить(Конт.ДатаДок);
		ВалютаКредита=ТекКлиент.ВалютаКредитаПоставщика;
		Если СуммаКред<>0 Тогда
			Глубина=ТекКлиент.ГлубинаКредитаПоставщика.Получить(Конт.ДатаДок);
		Иначе
			Глубина=0;
		КонецЕсли;
	КонецЕсли;
	Если ПустоеЗначение(ВалютаКредита)=1 Тогда
		ВалютаКредита=ТекКлиент.ВалютаВзаиморасчетов;
	КонецЕсли;
	Если ПустоеЗначение(ВалютаКредита)=1 Тогда
		ВалютаКредита=Константа.ВалютаВзаиморасчетов;
	КонецЕсли;
	Если ПустоеЗначение(ВалютаКредита)=1 Тогда
		Возврат "Не найдена валюта кредита клиента!";
	КонецЕсли;
	
	Рег=СоздатьОбъект("Регистр."+ИмяРегистрУчета);
	Если Конт.СравнитьТА()=-1  Тогда  // документ не новый, а существующий
		// так делаем, что бы отделить новый Документ
		// если итоги актуальны, то смотрим итоги на ТА
		// если итоги не актуальны, то берем из временногно расчета Регистра
		Рег.ВременныйРасчет();
		Если ИмяРегистрУчета="ВзаиморасчетыПоставщиков" Тогда
			Рег.УстановитьФильтр("",ТекКлиент,,);
		Иначе
			Рег.УстановитьФильтр("",ТекКлиент,,,);
		КонецЕсли;
		РассчитатьРегистрыПо(Конт.ТекущийДокумент(),"Контрагент");
		// здесь показываем Долги по Взаиморасчетам именно на момент (после) проводки Документа
	Иначе
		Если ИмяРегистрУчета="ВзаиморасчетыПоставщиков" Тогда
			Рег.УстановитьФильтр("",ТекКлиент,,);
		Иначе
			Рег.УстановитьФильтр("",ТекКлиент,,,);
		КонецЕсли;
	КонецЕсли;
	Просрочено=0;
	Срок=0;
	ТекущийДолг=0;
	СрочныйДолг=0; // Это тот долг,для оплаты которого осталось 7 дней сроку.
	ПросроченныйДолг=0;
	Рег.ВыбратьИтоги();
	Пока Рег.ПолучитьИтог()>0 Цикл
		Если Рег.КредДокумент.Выбран()=0 Тогда
			// пропускаем пустые документы
			Продолжить;
		КонецЕсли;
		
		ВидКредДок=Рег.КредДокумент.Вид();
		Если         (ВидКредДок="РасходнаяНакладная")
		ИЛИ (ВидКредДок="ПриходнаяНакладная")
		ИЛИ (ВидКредДок="ВводОстатковКредита") Тогда
			ДатаОплаты=Рег.КредДокумент.ДатаОплаты;
			Если Число(ДатаОплаты)=0 Тогда
				ДатаОплаты=Рег.КредДокумент.ДатаДок;
			КонецЕсли;
		ИначеЕсли      (ВидКредДок="ПриходныйОрдерТБ")
		ИЛИ (ВидКредДок="РасходныйОрдерТБ")
		ИЛИ (ВидКредДок="ОтчетРеализатора")
		ИЛИ (ВидКредДок="ИнвентаризацияРеализатора")
		ИЛИ (ВидКредДок="ПлатежноеПоручение")
		ИЛИ (ВидКредДок="Счет_фактура")
		ИЛИ (ВидКредДок="ДвиженияДенежныхСредств") Тогда
			ДатаОплаты=Рег.КредДокумент.ДатаДок;
		Иначе
			Предупреждение ("При диагностике обнаружен непонятный вид документа кредита!");
			Возврат "";
		КонецЕсли;
		
		ТекущийДолг=ТекущийДолг+Рег.Долг;
		Если ((Знак*Рег.Долг)>0) И (Просрочено<(Конт.ДатаДок-ДатаОплаты)) Тогда
			// если еще не погашено
			Просрочено=Конт.ДатаДок-ДатаОплаты;
			Если ДатаОплаты < Конт.ДатаДок Тогда
				ПросроченныйДолг=ПросроченныйДолг+Рег.Долг;
			КонецЕсли;
			Если ДатаОплаты > (Конт.ДатаДок-7) Тогда
				СрочныйДолг=СрочныйДолг+Рег.Долг;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла; 
	СимвВал=СокрП(ВалютаКредита.Наименование);
	Рег=0;
	ДосьеКлиент=СокрЛП(ТекКлиент.ПолноеНаименование)+". " +"PreҐu kred®ts="
	+СокрЛ(СуммаКред)+" "+СимвВал+" uz "+СокрЛ(Глубина)+" bankas dienўm. ";
	ДосьеДолг="Uz "+Конт.ДатаДок+"  savstarp§jie nor§°ini ir: debets "+СокрЛ(Знак*ТекущийДолг)+" "+СимвВал+". " ;
	ДосьеСрДолг=?(Знак*СрочныйДолг>0,"Maksўjuma kav§jums="+СокрЛ(Знак*Окр(СрочныйДолг,2,1))+" "
	+СимвВал+" uz "+СокрЛ(Просрочено)+" dienўm. ","");
	ДосьеОстаток=?(Знак*ТекущийДолг>СуммаКред,"Kred®ts izlietots! ","Kred®ta atlikums="
	+СокрЛ(СуммаКред-Знак*ТекущийДолг)+" "+СимвВал+". ");
	Возврат(ДосьеКлиент+"@"+ДосьеДолг+"@"+ДосьеСрДолг+"@"+ДосьеОстаток);
	
	
КонецФункции
Функция ДеньКвартала(__Дата)
	Возврат __Дата-НачКвартала(__Дата);
КонецФункции

//-----------------------------
Функция ДатаОчередногоПоказа(Блокнот)
	ТД = ТекущаяДата();
	Если Блокнот.Периодичность=0 Тогда
		Возврат Блокнот.__Дата;
	ИначеЕсли Блокнот.Периодичность=1 Тогда
		Возврат Макс(ТД,Блокнот.__Дата);
	ИначеЕсли Блокнот.Периодичность=2 Тогда
		Если Число(Блокнот.__ДатаПоказа)=0  Тогда
			Возврат КонНедели(Блокнот.__Дата)+НомерДняНедели(Блокнот.__Дата)
		Иначе
			Возврат КонНедели(Блокнот.__ДатаПоказа)+НомерДняНедели(Блокнот.__Дата);
		КонецЕсли;
	ИначеЕсли Блокнот.Периодичность=3 Тогда
		Если Число(Блокнот.__ДатаПоказа)=0  Тогда
			__ДатаПоказа=Блокнот.__Дата
		Иначе
			__ДатаПоказа=Блокнот.__ДатаПоказа
		КонецЕсли;
		ДнейВпериоде=КонМесяца(КонМесяца(__ДатаПоказа)+1)-НачМесяца(КонМесяца(__ДатаПоказа)+1)+1;
		Возврат КонМесяца(__ДатаПоказа)+Мин(ДатаЧисло(Блокнот.__Дата),ДнейВпериоде);
	ИначеЕсли Блокнот.Периодичность=4 Тогда
		Если Число(Блокнот.__ДатаПоказа)=0  Тогда
			__ДатаПоказа=Блокнот.__Дата
		Иначе
			__ДатаПоказа=Блокнот.__ДатаПоказа
		КонецЕсли;
		ДнейВпериоде=КонКвартала(КонКвартала(__ДатаПоказа)+1)-НачКвартала(КонКвартала(__ДатаПоказа)+1)+1;
		Возврат КонКвартала(__ДатаПоказа)+Мин(ДеньКвартала(Блокнот.__Дата)+1,ДнейВпериоде);
	КонецЕсли;
КонецФункции

//-----------------------------
Функция ЗаписьБлСтр(Запись) Экспорт
	Если Запись.Периодичность=0 Тогда
		Буква = "(Р)";
	ИначеЕсли Запись.Периодичность=1 Тогда
		Буква = "(Д)";
	ИначеЕсли Запись.Периодичность=2 Тогда
		Буква = "(Н)";
	ИначеЕсли Запись.Периодичность=3 Тогда
		Буква = "(М)";
	ИначеЕсли Запись.Периодичность=4 Тогда
		Буква = "(К)";
	КонецЕсли;
	Возврат ""+ДатаОчередногоПоказа(Запись)+"         "+Запись.Время+"       "+Буква+"       "+Запись.Наименование;
КонецФункции

//-----------------------------
Процедура ПросмотрБлокнота() Экспорт
	Перем КонтекстФормы;
	
	Если БлокнотРедактируется=1  Тогда
		Возврат;
	КонецЕсли;
	
	Блокнот=СоздатьОбъект("Справочник.Блокнот");
	Запрос=СоздатьОбъект("ODBCRecordSet");
	ТекстЗапроса="SELECT Блокнот.ID [Ссылка $Справочник.Блокнот]
	|					, $Блокнот.ВремяПовтора ВремяПовтора
	|			  FROM $Справочник.Блокнот AS Блокнот (NOLOCK)
	|			  WHERE ($Блокнот.Повторить = 1)
	|					AND ($Блокнот.__ДатаПоказа < :GETDATE())
	|";
	
	Надо=0;
	
	Блокнот.НайтиПоКоду(ИмяПользователя());
	Если (Блокнот.Выбран()=0) ИЛИ (Блокнот.ЭтоГруппа()=0) Тогда
		Возврат;
		//глСоздатьНовуюГруппу(Блокнот);
		//Блокнот.Код = ИмяПользователя();
		////Закомментировано Инсталлятором МОД:Блокнот.Записать();
		////Начало текста, вставленного Инсталлятором МОД
		//ОбъектЗаписать(Блокнот, );
		//Конец текста, вставленного Инсталлятором МОД
	КонецЕсли;
	Блокнот.ИспользоватьРодителя(Блокнот.ТекущийЭлемент());
	Блокнот.ВыбратьЭлементы();
	ТД = ТекущаяДата();
	Пока Блокнот.ПолучитьЭлемент()=1 Цикл
		Если (Блокнот.Повторить=1) И (ТекущееВремя()>=Блокнот.ВремяПовтора) Тогда
			Надо=1;
			Прервать;
		КонецЕсли;
		Если ТД > Блокнот.__ДатаПоказа Тогда
			ДатаОчередногоПоказа = ДатаОчередногоПоказа(Блокнот.ТекущийЭлемент());
			Если (ДатаОчередногоПоказа=ТД) И (ТекущееВремя()>=Блокнот.Время) Тогда
				Надо = 1;
				Прервать;
			ИначеЕсли (ТД>ДатаОчередногоПоказа) И ((Блокнот.Периодичность<>0) ИЛИ (Число(Блокнот.__ДатаПоказа)=0)) Тогда
				Надо = 1;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Надо=1 Тогда
		Блокнот.__ДатаПоказа = ТекущаяДата();
		Блокнот.Повторить=0;
		//Закомментировано Инсталлятором МОД:Блокнот.Записать();
		//Начало текста, вставленного Инсталлятором МОД
		ОбъектЗаписать(Блокнот, );
		//Конец текста, вставленного Инсталлятором МОД
		
		ОткрытьФорму(Блокнот.ТекущийЭлемент(),КонтекстФормы);
		КонтекстФормы.Форма.ИспользоватьСлой("Просмотр",1);
	КонецЕсли;
КонецПроцедуры

//--------------------------------------------
Функция КонстантаExcel(Стр)  Экспорт
	
	// Эта функция возвращает значения констант Excel, которые используются
	// при выполнении процедур управления Excel через OLE. Из-за большого размера
	// функции большинство строк (не используемые в данной конфигурации)
	// закоментировано. Если требуется какая-либо константа - просто раскомментируйте
	// необходимую строчку.
	Стр=Нрег(Стр);
	Если Стр=Нрег("xlDialogSetBackgroundPicturet")  Тогда  Возврат 492;
	ИначеЕсли Стр=Нрег("xlSingle")  Тогда  Возврат 2;
	ИначеЕсли Стр=Нрег("xlRight")  Тогда  Возврат -4152;
	ИначеЕсли Стр=Нрег("xlNone")  Тогда  Возврат -4142;
	ИначеЕсли Стр=Нрег("xlLeft")  Тогда  Возврат -4131;
	ИначеЕсли Стр=Нрег("xlContinuous")  Тогда  Возврат 1;
	ИначеЕсли Стр=Нрег("xlColumn")  Тогда  Возврат 3;
	ИначеЕсли Стр=Нрег("xlCenter")  Тогда  Возврат -4108;
	ИначеЕсли Стр=Нрег("xl3DColumn")  Тогда  Возврат -4100;
	КонецЕсли;
	Возврат 0;
КонецФункции
//-----------------------------
Процедура УстановкаРеквизитаТип(Конт) Экспорт
	Конт.Фирма.ИспользоватьДату(Конт.ДатаДок);
	Если (НЕ((НазваниеНабораПрав()="Администратор")    ИЛИ (НазваниеНабораПрав()="Менеджер")))
	ИЛИ
	((Константа.МетодРасчетаСебестоимостиУправленческогоУчета.Выбран()=0)
	ИЛИ (Конт.Фирма.МетодРасчетаСебестоимостиФинансовогоУчета.Выбран()=0)) Тогда
		//Конт.Форма.Тип.Видимость(0);
		//Конт.Форма.НадписьТипа.Видимость(0);
	КонецЕсли;
	
	Попытка
		Конт.Форма.Тип.Доступность(0);
	Исключение
	КонецПопытки;
	//Если Конт.ДатаДок<=Константа.ДатаЗапретаРедактирования Тогда
//	Конт.Форма.Тип.Доступность(0);
//	Конт.Форма.НадписьТипа.Доступность(0);
	Возврат;
	//КонецЕсли;
КонецПроцедуры
//-----------------------------
Процедура ПроверкаРазрешенияРедактирования(Конт) Экспорт
	Конт.ПриЗаписиПерепроводить(1);                     
	СообщОтладка(СообщитьРеквизитыШ(Конт),"I");
	Если Конт.ДатаДок<=Константа.ДатаЗапретаРедактирования Тогда
		Конт.Форма.ТолькоПросмотр(1);
		Предупреждение("Разрешен только просмотр документа!",4);
		Возврат;
	КонецЕсли;
КонецПроцедуры
//-----------------------------
//Функция ПроверкаПользователя() Экспорт
//    Если Пользователь.Выбран()=0 Тогда
//		глКодСтраныПользователя=Константа.ОсновнаяФирма.Страна.Код;
//        Предупреждение("Пользователь не зарегистрирован в справочнике сотрудников! В новых документах не будет фиксироваться автор!",10);
//        Возврат 0;                    
//	Иначе                                                 
//		глКодСтраныПользователя=Пользователь.ОсновнаяФирма.Страна.Код;
//		Если ПустоеЗначение(глКодСтраныПользователя)=1 Тогда
//			глКодСтраныПользователя=Константа.ОсновнаяФирма.Страна.Код;
//		КонецЕсли;
//    КонецЕсли;
//    Возврат 1;
//КонецФункции
//--------------
Функция НайтиКорень(Док)
	// Эта процедура помогает формировать Дерево подчиненных документов
	ВД=Док.Вид();
	КореньДок=0;
	Если ВД="РасходнаяНакладная" Тогда
		КореньДок=Док.ДокументОснование;
	ИначеЕсли ВД="ПриходнаяНакладная" Тогда
		КореньДок=Док.ДокументОснование;
	ИначеЕсли ВД="РасходнаяРеализатора" Тогда
		КореньДок=Док.ДокументОснование;
	ИначеЕсли ВД="ПриходнаяРеализатора" Тогда
		КореньДок=Док.ДокументОснование;
	ИначеЕсли ВД="ОтчетРеализатора" Тогда
		КореньДок=Док.ПоНакладной;
	ИначеЕсли ВД="Счет_фактура" Тогда
		КореньДок=Док.ДокументОснование;
	ИначеЕсли ВД="РегистрацияСчета_фактуры" Тогда
		КореньДок=Док.ДокументОснование;
	ИначеЕсли ВД="ПлатежноеПоручение" Тогда
		КореньДок=Док.ДокументОснование;
	ИначеЕсли ВД="РасходныйОрдерТБ" Тогда
		КореньДок=Док.ДокументОснование;
	ИначеЕсли ВД="ПриходныйОрдерТБ" Тогда
		КореньДок=Док.ДокументОснование;
	ИначеЕсли ВД="Доверенность" Тогда
		КореньДок=Док.ДокументОснование;
	ИначеЕсли ВД="ПлатежноеПоручение" Тогда
		КореньДок=Док.ДокументОснование;
	ИначеЕсли ВД="ЗаказКладовщику" Тогда
		КореньДок=Док.ДокументОснование;
	КонецЕсли;
	
	Если ПустЗнач(КореньДок)=1 Тогда
		Возврат Док;
	Иначе
		Возврат НайтиКорень(КореньДок);
	КонецЕсли;
КонецФункции

//--------------
Процедура ВывестиПодчиненные(Докум,Док,Последний,Таб,Уровень,Уровни)
	// Эта процедура помогает формировать Дерево подчиненных документов
	// каждый раз локально!!! создаем справочник подразделений
	// подчиненные документы
	ДокПодч = СоздатьОбъект("Документ");
	// для проверки наличия следующего элемента в выборке
	// создадим еще один объект!
	ПровДокПодч = СоздатьОбъект("Документ");
	ДокПодч.УстановитьФильтр(1,0,0,1,0);
	ПровДокПодч.УстановитьФильтр(1,0,0,1,0);
	А="";
	
	// если это первый уровень...
	Если Уровень=1 Тогда
		//...выведем Г-образную линию...
		Если Последний=1 Тогда
			Таб.ВывестиСекцию("GrHook|Lines");
			// ...или Т-образную линию
		Иначе
			Таб.ВывестиСекцию("GrTSect|Lines");
		КонецЕсли;
	Иначе
		// для первого уровня выведем линию или пустоту
		Если Уровни.ПолучитьЗначение(1,А)=1 Тогда
			Таб.ВывестиСекцию("GrLine|Lines");
		Иначе
			Таб.ВывестиСекцию("GrEmpty|Lines");
		КонецЕсли;
		// для остальных уровней присоединим линию или пустоту
		Для Сч=2 По Уровень-1 Цикл
			Если Уровни.ПолучитьЗначение(Сч,А)=1 Тогда
				Таб.ПрисоединитьСекцию("GrLine|Lines");
			Иначе
				Таб.ПрисоединитьСекцию("GrEmpty|Lines");
			КонецЕсли;
		КонецЦикла;
		Если Последний=1 Тогда
			Таб.ПрисоединитьСекцию("GrHook|Lines");
		Иначе
			Таб.ПрисоединитьСекцию("GrTSect|Lines");
		КонецЕсли;
	КонецЕсли;
	// только теперь - присоединим секцию документа
	ПечДок=""+Док+" от "+Док.ДатаДок;
	Если Док.Проведен()=0 Тогда
		ПечДок=ПечДок+" (Не проведен!)";
	КонецЕсли;
	Если Докум=Док Тогда
		Таб.ПрисоединитьСекцию("ТекДок|Body");
	Иначе
		Таб.ПрисоединитьСекцию("Group|Body");
	КонецЕсли;
	Уровень = Уровень+1;
	ДокПодч.ВыбратьПодчиненныеДокументы(Док.ДатаДок-30,РабочаяДата(),Док);
	ПровДокПодч.ВыбратьПодчиненныеДокументы(Док.ДатаДок-30,РабочаяДата(),Док);
	Начало = 1;
	Пока ДокПодч.ПолучитьДокумент()=1 Цикл
		Если Начало=1 Тогда
			А=ПровДокПодч.ПолучитьДокумент();
			Начало=0;
		КонецЕсли;
		Если ПровДокПодч.ПолучитьДокумент()=1 Тогда
			Уровни.УстановитьЗначение(Уровень,1,"");
			Последний = 0;
		Иначе
			Уровни.УстановитьЗначение(Уровень,0,"");
			Последний = 1;
		КонецЕсли;
		Если Док.Вид()<>"ЗаказКладовщику" Тогда
			ВывестиПодчиненные(Докум,ДокПодч.ТекущийДокумент(),Последний,Таб,Уровень,Уровни);
		КонецЕсли;
	КонецЦикла;
	Уровень=Уровень-1;
КонецПроцедуры 

//******************************************************************************
//  глФРМ(ЧислЗнач, Валюта="", ВыводНулевого=0, РаздТриад="'")
//
// Параметры:
//  ЧислЗнач		- число, которое мы хотим форматировать
//  Валюта			- валюта (элемент справочника "Валюты") или пустое 
//                    значение
//  ВыводНулевого	- строка, режим вывода нулевых значений. Возможные значения:
//  				  "0" - подавить вывод нулевых значений (по умолчанию)
//	 			       ""  - вывод нулевых.
//	РаздТриад		- разделитель триад.
//
// Возвращаемое значение: 
//  Отформатированная строка
//
// Описание:
// 	Это процедура стандартного для данной конфигурации форматирования цен и сумм.
// 	По умолчанию не выводит нулевые значения и разделяет триады символом "'".
//  Для вывода нулевых значений в параметр ВыводНулевого нужно передать пустую 
//  строку. В параметр РаздТриад можно передать символ, разделитель триад. 
//  Если триады разделять не нужно, то в этот параметр нужно передать пустую 
//  строку.
//
Функция глФРМ(ЧислЗнач, Валюта="", ВыводНулевого="0", РаздТриад="'") Экспорт
	Перем РезСтрока, ФрмСтрока;
	
	РезСтрока = СокрЛ(Формат(ЧислЗнач, "Ч" + ВыводНулевого + "15.2." + РаздТриад));
	
	Если (ПустоеЗначение(РезСтрока) = 0) И (ПустоеЗначение(Валюта) = 0) Тогда
		РезСтрока = РезСтрока + " " + СокрП(Валюта.Наименование);
	КонецЕсли;
	
	Возврат РезСтрока;
	
КонецФункции // глФРМ() 

//******************************************************************************
//  глСуммаДокументаВЖурнале(Док, ТипВозврата)
//
// Параметры:
//  Док 		- документ
//  ТипВозврата	- строка, тип возвращаемого значения. Может принимать значения:
//                "строка" - сумма по документу в виде отформатированной строки
//                "число"  - сумма по документу в виде числа
//
// Возвращаемое значение: 
//  Отформатированная сумма
//
// Описание:
//  Формирует сумму, которая отражается в журналах, реестрах для документа.
//  При формировании суммы по документам "Счет фактура полученный" и "Счет
//  фактура выданный" учитывается то, что в этих документах сумм нет, для них
//  отображается сумма документа - основания.
//
Функция глСуммаДокументаВЖурнале(Док, ТипВозврата="строка") Экспорт
	Перем Результат;
	Перем СуммаНДС;
	Перем СуммаНП;
	
	Результат	=0;
	СуммаНДС	=0;
	СуммаНП 	=0;
	
	Если ПустоеЗначение(Док)=1 Тогда
		Возврат "";
	КонецЕсли;
	
	ВидДок=Док.Вид();
	
	Если ВидДок = "ОтчетКомитенту" Тогда // здесь тяжело считать сумму комиссионного вознаграждения, поэтому вернем пустоту 
		//Возврат "";
		Результат = Док.Итог("Сумма");
	КонецЕсли;
	
	РеквСумма=Метаданные.Документ(ВидДок).РеквизитШапки("Сумма");
	
	Если (ВидДок = "СчетФактураВыданный")
	или  (ВидДок = "СчетФактураПолученный")
	Тогда        
		Если (Док.ДокОснование.Выбран() = 1) 
		и    (Док.КоличествоСтрок() = 0)
		Тогда
			Возврат (глСуммаДокументаВЖурнале(Док.ДокОснование, ТипВозврата));
		КонецЕсли;
	КонецЕсли;
	
	Если РеквСумма.Выбран()=1 Тогда
		Результат= Док.Сумма;
	Иначе
		
		Если "ВводОстатковТМЦ" = ВидДок Тогда
			Если Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиРеализованныхТоваров = Док.ВидОперации Тогда
				Результат=Док.Итог("ПродСтоимость");
			Иначе
				Результат=Док.Итог("СуммаРуб");
			КонецЕсли;          
		ИначеЕсли "ДвиженияДенежныхСредств" = ВидДок Тогда
			Результат=Док.Итог("Приход")-Док.Итог("Расход");
		Иначе
			РеквСумма=Метаданные.Документ(ВидДок).РеквизитТабличнойЧасти("Сумма");
			Если РеквСумма.Выбран()=1 Тогда
				Если РеквСумма.ИтогПоКолонке=1 Тогда
					Результат=Док.Итог("Сумма");
				КонецЕсли;
			Иначе
				РеквСумма=Метаданные.Документ(ВидДок).РеквизитТабличнойЧасти("СуммаРуб");
				Если РеквСумма.Выбран()=1 Тогда
					Если РеквСумма.ИтогПоКолонке=1 Тогда
						Результат=Док.Итог("СуммаРуб");
					КонецЕсли;                 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		РеквСуммаНДС=Метаданные.Документ(ВидДок).РеквизитТабличнойЧасти("СуммаНДС");
		Если РеквСуммаНДС.Выбран()=1 Тогда
			Если РеквСуммаНДС.ИтогПоКолонке=1 Тогда
				СуммаНДС=Док.Итог("СуммаНДС");
			КонецЕсли;                          
		КонецЕсли;
		
		РеквСуммаВклНДС=Метаданные.Документ(ВидДок).РеквизитШапки("СуммаВклНДС");
		Если РеквСуммаВклНДС.Выбран()=1 Тогда
			Результат=Результат+?(Док.СуммаВклНДС=1,0,СуммаНДС);
		КонецЕсли;
		
		РеквСуммаНП=Метаданные.Документ(ВидДок).РеквизитТабличнойЧасти("СуммаНП");
		Если РеквСуммаНП.Выбран()=1 Тогда
			Если РеквСуммаНП.ИтогПоКолонке=1 Тогда
				СуммаНП=Док.Итог("СуммаНП");
			КонецЕсли;                          
		КонецЕсли;
		
		РеквСуммаВклНП=Метаданные.Документ(ВидДок).РеквизитШапки("СуммаВклНП");
		Если РеквСуммаВклНП.Выбран()=1 Тогда
			Результат=Результат+?(Док.СуммаВклНП=1,0,СуммаНП);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипВозврата = "строка" Тогда
		Возврат глФрм(Результат);
	Иначе
		Возврат Результат;
	КонецЕсли;	
	
КонецФункции //глСуммаДокументаВЖурнале()

//******************************************************************************
// глНазваниеДокументаВЖурнале(Док)
//
// Параметры:         
//  Док - документ
//
// Возвращаемое значение:
//  Строка  - представление документа
//
// Описание: 
//  Формирует представление документа в журнале. 
//
Функция глНазваниеДокументаВЖурнале(Док) Экспорт
	
	Если ПустоеЗначение(Док)=1 Тогда
		Возврат("");
	КонецЕсли;
	
	ДокВид	= Док.Вид();
	
	Если (глЕстьРеквизитШапки("КодОперации", ДокВид) = 1) 
	И (Найти("/ПКО/РКО/СтрокаВыпискиПриход/СтрокаВыпискиРасход/РеализацияРозница/ОтгрузкаПоставщика/РеализацияНал/ПоступлениеНал/ПеремещениеДепартамент/", "/" + ДокВид + "/") = 0)
	Тогда
		Возврат Строка(Док.КодОперации);
	ИначеЕсли глЕстьРеквизитШапки("ВидОперации",ДокВид)=1 Тогда
		
		ДопСтрока	= "";
		Если "РеализацияРозница" = ДокВид Тогда
			Если Док.ОблагаетсяЕНВД = 1 Тогда
				ДопСтрока	= " (ЕНВД)";
			КонецЕсли;
		ИначеЕсли "ВводОстатковТМЦ" = ДокВид Тогда
			Если (Док.Склад.РозничныйСклад = 1) И (Док.ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиТМЦ) Тогда
				ДопСтрока	= " (розница)";
			КонецЕсли;
		ИначеЕсли (ДокВид = "ЗаявкаПокупателя") Тогда
			Если ((Док.ВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад) или (Док.ВидОперации = Перечисление.ВидыОперацийЗаявок.НаПоставку))
			и (Док.ДокОснование.Выбран() = 1) Тогда
				Если (Док.ДокОснование.ВидОперации = Док.ВидОперации) Тогда
					ДопСтрока = " (корр.)";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли (ДокВид = "ЗаказПоставщику") Тогда
			Если (Док.ДокОснование.Выбран() = 1) Тогда
				Если Док.ДокОснование.Вид() = ДокВид Тогда
					ДопСтрока = " (корр.)";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Строка(Док.ВидОперации) + ДопСтрока;
	ИначеЕсли ДокВид="КомплектацияЗаявки" Тогда
		Если Док.Аннулировать=1 Тогда
			Возврат "Разукомпл. заявки";
		Иначе
			Возврат "Компл. заявки";
		КонецЕсли;
	Иначе
		Возврат Док.ПредставлениеВида();
	КонецЕсли;
	
КонецФункции // глНазваниеДокументаВЖурнале()
//-------------- 
Процедура СформироватьДеревоДокументов(Док)  Экспорт
	
	Если ТипЗначенияСтр(Док)="Документ" Тогда
		Докум=Док;
		
	ИначеЕсли ТипЗначенияСтр(Док)="ГрупповойКонтекст" Тогда
		Если Док.СравнитьТА()=-2 Тогда
			Предупреждение("Документ не записан!", 60);
			Возврат;
		Иначе
			Докум=Док.ТекущийДокумент();
		КонецЕсли;
		
	Иначе
		Сообщить("Процедура глСформироватьДеревоДокументов: Не указан документ.");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Отчет.ДеревоДокументов"+"#",Докум);
	
КонецПроцедуры   //глСформироватьДеревоДокументов()
//--------------     
//Процедура СформироватьДеревоДокументов(Докум)  Экспорт
//    // Эта процедура формирует Дерево подчиненных документов
//    Если Докум.Выбран()=0 Тогда
//        Предупреждение("Не указан документ для построения дерева!");
//        Возврат;
//    КонецЕсли;
//    // сначала поднимемся по подчиненности вверх и найдем корень
//    КореньДок=НайтиКорень(Докум);
//
//    // теперь от корня спускаемся вниз, показывая все на своем пути
//
//    // сначала заполним массив уровней нулями
//
//    Уровень = 0;
//    Уровни=СоздатьОбъект("СписокЗначений");
//    Для Сч=1 По 20 Цикл
//        Уровни.ДобавитьЗначение(0,"");
//    КонецЦикла;
//
//    Таб=СоздатьОбъект("Таблица");
//    Таб.ИсходнаяТаблица("ДеревоДокументов");
//    // подчиненные документы
//    ДокПодч = СоздатьОбъект("Документ");
//    // для проверки наличия следующего элемента в выборке
//    // создадим еще один объект!
//    ПровДокПодч = СоздатьОбъект("Документ");
//    ДокПодч.УстановитьФильтр(1,0,0,1,0);
//    ПровДокПодч.УстановитьФильтр(1,0,0,1,0);
//
//    ДокПодч.ВыбратьПодчиненныеДокументы(КореньДок.ДатаДок-30,РабочаяДата(),КореньДок);
//    ПровДокПодч.ВыбратьПодчиненныеДокументы(КореньДок.ДатаДок-30,РабочаяДата(),КореньДок);
//
//    Уровень=1;
//    ПечДок=""+КореньДок+" от "+КореньДок.ДатаДок;
//    Если Докум=КореньДок Тогда
//        Таб.ВывестиСекцию("КореньТекДок");
//    Иначе
//        Таб.ВывестиСекцию("Header");
//    КонецЕсли;
//    Начало=1;
//    Пока ДокПодч.ПолучитьДокумент()=1 Цикл
//        Если Начало = 1 Тогда
//            А=ПровДокПодч.ПолучитьДокумент();
//            Начало=0;
//        КонецЕсли;
//        Если ПровДокПодч.ПолучитьДокумент()=1 Тогда
//            Уровни.УстановитьЗначение(1,1,"");
//            Последний=0;
//        Иначе
//            Уровни.УстановитьЗначение(1,0,"");
//            Последний=1;
//        КонецЕсли;
//        ВывестиПодчиненные(Докум,ДокПодч.ТекущийДокумент(),Последний,Таб,Уровень,Уровни);
//    КонецЦикла;
//    // Вывод заполненной формы
//    Таб.Опции(0,0,0,0, "PO0005");
//    Таб.ТолькоПросмотр(1);
//    Таб.Показать("Структура подчиненных документов",);
//КонецПроцедуры

//--------------
Процедура СформироватьДвиженияДокумента(Док)  Экспорт
	Если ТипЗначенияСтр(Док)="Документ" Тогда
		Докум=Док;
	ИначеЕсли ТипЗначенияСтр(Док)="ГрупповойКонтекст" Тогда
		Если Док.СравнитьТА()=-2 Тогда
			Предупреждение("Выбранный документ еще не записан!");
			Возврат;
		Иначе
			Докум=Док.ТекущийДокумент();
		КонецЕсли;
	КонецЕсли;
	Если Докум.Проведен()=0 Тогда
		Предупреждение("Выбранный документ не проведен!");
		Возврат;
	КонецЕсли;
	Расшифровка=СоздатьОбъект("СписокЗначений");
	Расшифровка.ДобавитьЗначение(Докум,"ВыбДокумент");
	Расшифровка.ДобавитьЗначение("ДвиженияДокумента","Отчет");
	
	глРасшифровка = Расшифровка;
	глФлагРасшифровки = 1;
	ОткрытьФорму("Отчет."+"ДвиженияДокумента"+"#");
	глФлагРасшифровки = 0;
	глРасшифровка = 0;
КонецПроцедуры
//-----------------------------
Процедура ПроверкаАктуальностиОтчета(ДатаНачала,ДатаКонец,ТипУчета="Фин",ВыбФирма="") Экспорт
	// формируется отчет, который использует регистры, критичные к
	// последовательности проведения документов
	// поэтому сравним установленные даты периода формируемого отчета с ГП
	Возврат;
	Если ТипУчета="Упр" Тогда
		Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета.Выбран()=0 Тогда
			Предупреждение("   Упр. учет не ведется. Отчет неактуален.");
			Возврат;
		КонецЕсли;
	ИначеЕсли ТипУчета="Фин" Тогда
		Если ВыбФирма.Выбран()=0 Тогда
			Предупреждение("   Не выбрана фирма.");
			Возврат;
		КонецЕсли;
		ВыбФирма.ИспользоватьДату(ДатаКонец);
		Если ВыбФирма.МетодРасчетаСебестоимостиФинансовогоУчета.Выбран()=0 Тогда
			Предупреждение("   Фин. учет по фирме "+ВыбФирма+" не ведется."+РазделительСтрок+"     Отчет неактуален.");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если ДатаНачала>ДатаКонец Тогда
		Предупреждение("   Дата начала отчета установлена после"+РазделительСтрок+"даты конца отчета.");
		Возврат;
	КонецЕсли;
	
	СтрСооб="отчет может быть неактуален. Возможно, следует перепровести документы.";
	
	Если (ВыбранаГП(Константа.ГраницаПоследовательности_1)=0) Тогда
		Предупреждение("   Граница последовательности документов не определена, "+РазделительСтрок+СтрСооб);
	Иначе
		Начало=ПреобразоватьДатуВпозицию(?(Число(Константа.ДатаПоследнегоЗавершенияПериода)=0,'30.11.97',Константа.ДатаПоследнегоЗавершенияПериода));
		Конец=ПреобразоватьДатуВпозицию(ДатаКонец,"Конец");
		ГП=?(ВыбранаГП(Константа.ГраницаПоследовательности_1)=0,Начало,Константа.ГраницаПоследовательности_1);
		ПозицияТА=Число(Строка(Число(ПолучитьДатуТА()))+СтрЗаменить(ПолучитьВремяТА(),":",""));
		ПозицияОтчета=?(ДатаКонец<ПолучитьДатуТА(),Конец,ПозицияТА);
		
		Если СравнитьТН(ГП,ПозицияОтчета,"Последов_1")>0 Тогда
			Предупреждение("   Дата конца отчета установлена после"+РазделительСтрок+"Границы последовательности документов ("
			+ОтобразитьПозицию(Константа.ГраницаПоследовательности_1)+"), "+РазделительСтрок+СтрСооб);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры  


//*****************************
Процедура глПроведениеДокОтложенное() Экспорт
	Перем ТекДок;
	
	ТекДок = СоздатьОбъект("Документ");

	Для н = 1 По спПроведениеДокВсе.РазмерСписка() Цикл
		Док = спПроведениеДокВсе.ПолучитьЗначение(н); 	
		ТекДок.НайтиДокумент(Док.ТекущийДокумент());		
		рез=ТекДок.Провести();
		Если рез=1 Тогда
			Сообщить("Документ "+ ТекДок +" успешно проведен.");
		КонецЕсли;			
	КонецЦикла;

	ОбработкаОжидания("глПроведениеДокОтложенное",0);
КонецПроцедуры

//*****************************
Процедура глПроведениеПриходНакл() 
	Перем ДокСчет,ДокПрихНакл;
	
	ДокПрихНакл = спПроведениеПриходНакл.ПолучитьЗначение(1);   
	ДокСчет = спПроведениеПриходНакл.ПолучитьЗначение(2);
	Док = СоздатьОбъект("Документ.Счет");
	Док.НайтиДокумент(ДокСчет);
	Если Док.Проведен() = 1 Тогда
		Сообщить("Ошибка проведения приходной накладной.");
	Иначе  
		Док = СоздатьОбъект("Документ.ПриходнаяНакладная");
		Док.НайтиДокумент(ДокПрихНакл);
		Сообщить("-------------------------------------");   
		Пер1 = 0;
		Попытка
			Док.Провести();	
		Исключение   
			Пер1 = 1;
		КонецПопытки;    
		Если Пер1 = 0 Тогда
			Сообщить("Приходная накладная "+ Док.НомерДок + " Дата документа: " + Док.ДатаДок +" успешно проведена.");	
		Иначе
			Сообщить("Ошибка проведения приходной накладной."+ Док.НомерДок + " Дата документа: " + Док.ДатаДок);		
		КонецЕсли;
		Сообщить("-------------------------------------");				
	КонецЕсли;       
	ОбработкаОжидания("глПроведениеПриходНакл",0);
КонецПроцедуры

//*****************************
Процедура глПроведениеКомплектацийПоЗаявке() 
	Перем ДокСчет;
	
	ДокПодч=СоздатьОбъект("Документ");
	ДокСчет = спПроведениеДок.Получить("Счет");
	ДокПодч.ВыбратьПодчиненныеДокументы(,,ДокСчет);
	Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
		Если ДокПодч.Проведен()=1 Тогда
			Если (ДокПодч.Вид()="МаршрутныйЛист") ИЛИ (ДокПодч.Вид()="ИзмЭлЗаявку") или (ДокПодч.Вид()="СчетОбщий")  Тогда
				Продолжить;
			КонецЕсли;
			рез=ДокПодч.Провести();	
			Если рез=1 Тогда
				Сообщить("Документ "+ ДокПодч +" успешно проведен.");
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	ОбработкаОжидания("глПроведениеКомплектацийПоЗаявке",0);
КонецПроцедуры

Процедура глПроведениеПоВремени() 
	Перем Док;
	
	ДокПодч=СоздатьОбъект("Документ");
	Док = спПроведениеДок.Получить("ОжидаемаяПоставка");
//	ДокПрих=спПроведениеДок.Получить("ПриходнаяНакладная");
	ДокПодч.ВыбратьПодчиненныеДокументы(,,Док.ТекущийДокумент());

	Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
		Если (ДокПодч.Проведен()=1)  Тогда
			Если ДокПодч.Вид()="ПриходнаяНакладная" Тогда
				Попытка
					рез=ДокПодч.Провести();	
				Исключение   
					рез = 0;
				КонецПопытки;  					
					
				Если рез=1 Тогда
					Сообщить("Документ "+ ДокПодч +" успешно проведен.");
				Иначе
					Сообщить("Документ "+ ДокПодч +" непроведен. Повторите проведение данного документа.");
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ОбработкаОжидания("глПроведениеПоВремени",0);
КонецПроцедуры

//*****************************
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриОтменеПроведенияДокумента(Докум) Экспорт Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ПриОтменеПроведенияДокумента(Докум) 
	Перем ТекстЗапроса,ПозицияПо,ПозицияС;
	//Закомментировано Инсталлятором МОД:Процедура ПриОтменеПроведенияДокумента(Докум)
	Если Пользователь.Выбран()=0 Тогда
		Предупреждение("Пользователь не зарегистрирован в справочнике сотрудников! У вас нет права снимать документы с проведения!");
		СтатусВозврата(0);          
		Возврат;
	КонецЕсли;                         
	
	Если Докум.Вид()="Счет" Тогда
		Если семЕстьПраво( "Документ", "Счет", "Отмена проведения" ) = 0 Тогда
			Предупреждение("Недостаточно прав.","10"); СтатусВозврата( 0 ); Возврат;
		КонецЕсли;

		Если (Константа.НовыйМеханизмПретензий.Получить(Докум.ДатаДок)=Да) И (Докум.ВидЗаявки <> Перечисление.ВидыЗаявок.ЗаявкаНаВозврат) И (семЕстьПраво("Документ","Счет","Удаление заявки в любом случае")=0) Тогда
			Предупреждение("По новой системе эл. заявку можно аннулировать только через документ <Компл. заявки по факту>!","!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
		
		ДокТест = СоздатьОбъект("Документ");
		Если ДокТест.ВыбратьПодчиненныеДокументы(,,Докум) = 1 Тогда
			Пока ДокТест.ПолучитьДокумент() = 1 Цикл
				Если (ДокТест.ПометкаУдаления() = 1)
				или(ДокТест.Проведен() = 0) Тогда
					Продолжить;
				КонецЕсли;	

				Если ДокТест.Вид() = "ПретензияПолученная" Тогда 
					Продолжить; 
				КонецЕсли;
				
				Если ДокТест.Вид()="КомплектацияЗаявки" Тогда
					Если ДокТест.Проведен()=1 Тогда
						Если Вопрос("При отмене проведения Эл. заявки будет удалена комплектация. Вы уверены, что хотите продолжить?","Да+Нет")="Да" Тогда
							ЗаписьЖурналаРегистрации( "Удаление комплектации "+ДокТест.НомерДок,, "Комплектация заявок", Докум.ТекущийДокумент(), 2 );
							ОбъектУдалить(ДокТест,0);
							Продолжить;
						Иначе
							Сообщить("Отмена проведения документа отменена.","!");
							СтатусВозврата(0);
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
				
				
				Предупреждение("Нельзя снимать документ с проведения, т.к. имеются подчиненные документы."); 
				СтатусВозврата(0);
				Возврат;				
			КонецЦикла;
		КонецЕсли;  
		ПозицияС = Докум.ДатаДок; 
		Если Докум.ДатаПоставки > ПолучитьДатуТА() Тогда 
			ПозицияПо = ПолучитьДатуТА();	
		Иначе
			ПозицияПо = Докум.ДатаПоставки;			
		КонецЕсли;
		ТекстЗапроса = "
		|Период с ПозицияС по ПозицияПо;  
		|Док = Регистр.РезервыТоваров.ТекущийДокумент;
		|ПоСчету = Регистр.РезервыТоваров.ПоСчету;
		|Резерв = Регистр.РезервыТоваров.РезервТовара;  
		|Функция фРезервыПриход = Приход( Резерв );
		|Функция фРезервыРасход = Расход( Резерв );
		|Группировка Док без групп;
		|Условие ( ПоСчету = Докум );";	
		Запрос = СоздатьОбъект( "Запрос" );
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда 
			Возврат;                                                
		КонецЕсли;
		Пока Запрос.Группировка( "Док" ) = 1 Цикл  
			Если Запрос.Док = Докум Тогда
				Продолжить;
			КонецЕсли;
			Сообщить("Снимается с проведения: "+Строка(Докум.НомерДок)+" Дата документа: "+Строка(Докум.ДатаДок));
			Сообщить("Обнаружена приходная накладная сформировавшая резерв: "
			+Строка(Запрос.Док.НомерДок)+" Дата документа: "+Строка(Запрос.Док.ДатаДок)); 
			спПроведениеПриходНакл = СоздатьОбъект("СписокЗначений");
			спПроведениеПриходНакл.ДобавитьЗначение(Запрос.Док,"ПриходнаяНакл");   
			спПроведениеПриходНакл.ДобавитьЗначение(Докум,"Счет");
			ОбработкаОжидания("глПроведениеПриходНакл",5);
		КонецЦикла;
	ИначеЕсли Докум.Вид()="ПриходнаяНакладная" Тогда

		
		ДокТест = СоздатьОбъект("Документ");
		Если ДокТест.ВыбратьПодчиненныеДокументы(,,Докум) = 1 Тогда
			Пока ДокТест.ПолучитьДокумент() = 1 Цикл
				Если (ДокТест.ПометкаУдаления() = 1)
				или(ДокТест.Проведен() = 0) Тогда
					Продолжить;
				КонецЕсли;	

				Если ДокТест.Вид()="ПретензияПолученная" Тогда
					Если ДокТест.Проведен()=1 Тогда
						Если Вопрос("При отмене проведения Прихода будет удалена претензия. Вы уверены, что хотите продолжить?","Да+Нет")="Да" Тогда
							ЗаписьЖурналаРегистрации( "Удаление претензии "+ДокТест.НомерДок,, "Претензия полученная", Докум.ТекущийДокумент(), 2 );
							ОбъектУдалить(ДокТест,0);
							Продолжить;
						Иначе
							Сообщить("Отмена проведения документа отменена.","!");
							СтатусВозврата(0);
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
				
				
				Предупреждение("Нельзя снимать документ с проведения, т.к. имеются подчиненные документы."); 
				СтатусВозврата(0);
				Возврат;				
			КонецЦикла;
		КонецЕсли;  
	КонецЕсли; 
	//Завьялов А.*****28.12.04*****
	
	Если Докум.Вид()="ПретензияПолученная" Тогда
		ДокТест = СоздатьОбъект("Документ");
		Если ДокТест.ВыбратьПодчиненныеДокументы(,,Докум.ТекущийДокумент()) = 1 Тогда
			Пока ДокТест.ПолучитьДокумент() = 1 Цикл
				Если (ДокТест.ПометкаУдаления() = 1)
				или(ДокТест.Проведен() = 0) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ДокТест.Проведен()=1 Тогда
					Сообщить("Нельзя снимать документ с проведения, т.к. имеются проведенные подчиненные документы.
					|	Отмена проведения документа отменена.","!");
					СтатусВозврата(0);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если (Докум.Вид()="ЗаказПоставщику") ИЛИ (Докум.Вид()="ОжидаемаяПоставка") ИЛИ (Докум.Вид()="Счет") Тогда
		Если Докум.ДатаДок<=Константа.ДатаЗапретаРедактированияЗаказов Тогда
			Предупреждение("Нельзя снимать документы с проведения, выписанные раньше Константы ДатаЗапретаРедактированияЗаказов!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	ИначеЕсли (Докум.Вид()="Счет_фактура") Тогда
		Если Докум.ДатаДок<=Константа.ДатаЗапретаРедактированияСчетов Тогда
			Предупреждение("Нельзя снимать документы с проведения, выписанные раньше Константы ДатаЗапретаРедактированияСчетов!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	ИначеЕсли Докум.ДатаДок<=Константа.ДатаЗапретаРедактирования Тогда
		Предупреждение("Нельзя снимать документы с проведения, выписанные раньше Константы ДатаЗапретаРедактирования!");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	глПровестиДокументыПоТоварам(Докум);
	
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриОтменеПроведенияДокумента(Докум) Экспорт
	стар_ПриОтменеПроведенияДокумента(Докум);
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	ПриИзмененииОбъекта(Докум,Докум,РабочаяДата());
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД

Процедура семПроверкаУдаленияЗаявки(пЗаявка) Экспорт
	пОтКлиента = Перечисление.ВидыПретензий.ОтКлиента;
	пОтАгента = Перечисление.ВидыПретензий.ОтАгента;
	Если пЗаявка.ПометкаУдаления() = 1 Тогда
		//Сообщить("Отмена удаления");
		док = СоздатьОбъект( "Документ" );
		Есть = 0;
		Если док.ВыбратьПодчиненныеДокументы(пЗаявка.ДатаДок,,пЗаявка) = 1 Тогда
			Пока док.ПолучитьДокумент() = 1 Цикл
				Если док.Вид() <> "ПретензияПолученная" Тогда Продолжить; КонецЕсли;
				Если док.ВидПретензии = пОтКлиента Тогда Продолжить; КонецЕсли;
				Если док.Проведен() = 1 Тогда 
					//Если Вопрос("Существует уже проведенная претензия. Вы хотите изменить претензию?","Да+Нет")="Да" Тогда
					//	док.СделатьНеПроведенным(); Док.ДатаДок=РабочаяДата(); Док.Записать();
					//Иначе
					//	Продолжить;
					//КонецЕсли;
				КонецЕсли;
//				Если док.ПометкаУдаления() = 1 Тогда док.СнятьПометкуУдаления(); Док.ДатаДок=РабочаяДата(); Док.Записать(); КонецЕсли;
				Есть = 1; Прервать;
			КонецЦикла;
		КонецЕсли;
		докПретензия = СоздатьОбъект("Документ.ПретензияПолученная");
		Если Есть = 1 Тогда
			докПретензия.НайтиДокумент(док.ТекущийДокумент());
			Попытка
				докПретензия.Удалить(0);
			Исключение
				Сообщить(ОписаниеОшибки(),"!");
			КонецПопытки;
		КонецЕсли;
	Иначе
		//Сообщить("Удаление");
		док = СоздатьОбъект( "Документ" );
		Есть = 0;
		Если док.ВыбратьПодчиненныеДокументы(пЗаявка.ДатаДок,,пЗаявка) = 1 Тогда
			Пока док.ПолучитьДокумент() = 1 Цикл
				Если док.Вид() <> "ПретензияПолученная" Тогда Продолжить; КонецЕсли;
				Если док.ВидПретензии = пОтКлиента Тогда Продолжить; КонецЕсли;
//				Если док.Проведен() = 1 Тогда 
					//Если Вопрос("Существует уже проведенная претензия. Вы хотите изменить претензию?","Да+Нет")="Да" Тогда
					//	док.СделатьНеПроведенным(); док.ДатаДок=РабочаяДата(); док.Записать(); 
					//Иначе
					//	Продолжить;
					//КонецЕсли;
//				КонецЕсли;
//				Если док.ПометкаУдаления() = 1 Тогда док.СнятьПометкуУдаления(); Док.ДатаДок=РабочаяДата(); Док.Записать(); КонецЕсли;
				Есть = 1; Прервать;
			КонецЦикла;
		КонецЕсли;
		докПретензия = СоздатьОбъект("Документ.ПретензияПолученная");
		табл = СоздатьОбъект( "ТаблицаЗначений" );
		пЗаявка.ВыгрузитьТабличнуюЧасть(табл,"Товар,Цена,Сумма,Количество");
		спПарам = СоздатьОбъект( "СписокЗначений" );
		спПарам.ДобавитьЗначение(табл,"Табл");
		спПарам.ДобавитьЗначение(пОтАгента,"Вид");
		Если Есть = 1 Тогда
			//если претензия уже существует, то заполняем её
			докПретензия.НайтиДокумент(док.ТекущийДокумент());
			ОткрытьФормуМодально(докПретензия.ТекущийДокумент(),спПарам,0);
		Иначе
			//если претензии еще небыло, то создаем новую
			ОткрытьФормуМодально("Документ.ПретензияПолученная",спПарам,пЗаявка);
		КонецЕсли;
		Есть = 0;
		Если док.ВыбратьПодчиненныеДокументы(пЗаявка.ДатаДок,,пЗаявка) = 1 Тогда
			Пока док.ПолучитьДокумент() = 1 Цикл
				Если (док.Вид()="РасходнаяНакладная") И (док.ПометкаУдаления()=1) Тогда
					Есть=1; Прервать;
				ИначеЕсли (док.Вид()="РасходнаяНакладнаяНал") И (док.ПометкаУдаления()=1) Тогда
					Есть=1; Прервать;
				ИначеЕсли (док.Вид()="Перемещение") И (док.ПометкаУдаления()=1) Тогда
					Есть=1; Прервать;
				КонецЕсли;
				
				Если док.Вид() <> "ПретензияПолученная" Тогда Продолжить; КонецЕсли;
				Если док.ВидПретензии = пОтКлиента Тогда Продолжить; КонецЕсли;
				Если док.Проведен() = 0 Тогда Продолжить; КонецЕсли;
				Есть = 1; Прервать;
			КонецЦикла;
		КонецЕсли;
		СтатусВозврата(Есть);
	КонецЕсли;
КонецПроцедуры

//-----------------------------
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриУдаленииДокумента(Докум, Режим) Экспорт Далее
//Конец текста, вставленного Инсталлятором МОД

Процедура стар_ПриУдаленииДокумента(Докум, Режим)  
	Перем ТекстЗапроса,ПозицияПо,ПозицияС;
	//Закомментировано Инсталлятором МОД:Процедура ПриУдаленииДокумента(Докум,Режим)
	Если Пользователь.Выбран()=0 Тогда
		Предупреждение("Пользователь не зарегистрирован в справочнике сотрудников! У вас нет права удалять документы!");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	Если (Докум.Вид()="ЗаказПоставщику") ИЛИ (Докум.Вид()="Счет") Тогда
		Если Докум.ДатаДок<=Константа.ДатаЗапретаРедактированияЗаказов Тогда
			Предупреждение("Нельзя удалять документы, выписанные раньше Константы ДатаЗапретаРедактированияЗаказов!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;                
	ИначеЕсли Докум.Вид()="Счет_фактура" Тогда
		Если Докум.ДатаДок<=Константа.ДатаЗапретаРедактированияСчетов Тогда
			Предупреждение("Нельзя удалять документы, выписанные раньше Константы ДатаЗапретаРедактированияСчетов!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;                
	ИначеЕсли Докум.ДатаДок<=Константа.ДатаЗапретаРедактирования Тогда
		Предупреждение("Нельзя удалять документы, выписанные раньше Константы ДатаЗапретаРедактирования!");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	// создание претензии при удалении накладной
	Если ((Докум.Вид()="РасходнаяНакладная") или (Докум.Вид()="РасходнаяНакладнаяНал") или (Докум.Вид()="Перемещение")) И  (Константа.НовыйМеханизмПретензий.Получить(Докум.ДатаДок)<>Да) Тогда
		семСозданиеПретензии(Докум,"Удаление");
		Если семПроверкаПретензии(Докум,"Удаление") = 0 Тогда
			Сообщить("Ошибка удаления документа.","!");
			СтатусВозврата(0); Возврат;
		КонецЕсли;
	КонецЕсли;
	

	Если Докум.Вид()="ЗаявкаПокупателя" Тогда  
		Если ПустоеЗначение(Докум.ДокументПриобретение)=0 Тогда
			Док=СоздатьОбъект("Документ.ЗаявкаНаПриобретение");
			Док.НайтиДокумент(Докум.ДокументПриобретение);
			Если Докум.ПометкаУдаления()=1 Тогда
				//Закомментировано Инсталлятором МОД:Док.СнятьПометкуУдаления();
				//Начало текста, вставленного Инсталлятором МОД
				ОбъектСнятьПометкуУдаления(Док);
				//Конец текста, вставленного Инсталлятором МОД
				
			Иначе
				//Закомментировано Инсталлятором МОД:Док.Удалить(0);
				//Начало текста, вставленного Инсталлятором МОД
				ОбъектУдалить(Док, 0);
				//Конец текста, вставленного Инсталлятором МОД
				
			КонецЕсли;
		КонецЕсли;
		Если ПустоеЗначение(Докум.ДокументИзготовление)=0 Тогда
			Док=СоздатьОбъект("Документ.ЗаявкаНаИзготовление");
			Док.НайтиДокумент(Докум.ДокументИзготовление);
			Если Докум.ПометкаУдаления()=1 Тогда
				//Закомментировано Инсталлятором МОД:Док.СнятьПометкуУдаления();
				//Начало текста, вставленного Инсталлятором МОД
				ОбъектСнятьПометкуУдаления(Док);
				//Конец текста, вставленного Инсталлятором МОД
				
			Иначе
				//Закомментировано Инсталлятором МОД:Док.Удалить(0);
				//Начало текста, вставленного Инсталлятором МОД
				ОбъектУдалить(Док, 0);
				//Конец текста, вставленного Инсталлятором МОД
				
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	Если Докум.Вид()="Счет" Тогда
		
		Если (Константа.НовыйМеханизмПретензий.Получить(Докум.ДатаДок)=Да) И (Докум.ВидЗаявки <> Перечисление.ВидыЗаявок.ЗаявкаНаВозврат) И ((Докум.Проведен()=1) И (семЕстьПраво("Документ","Счет","Удаление заявки в любом случае")=0)) Тогда
			Предупреждение("По новой системе эл. заявку можно аннулировать только через документ <Компл. заявки по факту>!","!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;

		Если (Докум.ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаНаВозврат) Тогда
			Возврат;
		КонецЕсли;

		
		ЕстьРасхПретензия=0;
		ДокТест = СоздатьОбъект("Документ");
		Если ДокТест.ВыбратьПодчиненныеДокументы(,,Докум) = 1 Тогда
			Пока ДокТест.ПолучитьДокумент() = 1 Цикл
				Если (ДокТест.Вид()="РасходнаяНакладная") И (ДокТест.ПометкаУдаления() = 1) Тогда
					ДокПодчРасх=СоздатьОбъект("Документ");
					ДокПодчРасх.ВыбратьПодчиненныеДокументы(,,ДокТест.ТекущийДокумент());
					Пока ДокПодчРасх.ПолучитьДокумент()=1 Цикл
						Если ДокПодчРасх.Вид() = "ПретензияПолученная" Тогда 
							ЕстьРасхПретензия=1;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если (ДокТест.ПометкаУдаления() = 1) или (ДокТест.Проведен() = 0) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ДокТест.Вид() = "ПретензияПолученная" Тогда 
					Продолжить; 
				КонецЕсли;
			
				Если ДокТест.Вид()="КомплектацияЗаявки" Тогда
					Если ДокТест.Проведен()=1 Тогда
						Если Вопрос("При удалении Эл. заявки будет удалена комплектация. Вы уверены, что хотите продолжить?","Да+Нет")="Да" Тогда
							ОбъектУдалить(ДокТест,);
							Продолжить;
						Иначе
							Сообщить("Удаление документа отменено.","!");
							СтатусВозврата(0);
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
				
				Предупреждение("Нельзя снимать документ с проведения, т.к. имеются подчиненные документы."); 
				СтатусВозврата(0);
				Возврат;				
			КонецЦикла;
			
		КонецЕсли;  

		Если Докум.КоличествоСтрок()=0 Тогда
			ЕстьРасхПретензия=1;			
		КонецЕсли;
		
		Если Докум.Вид()="ПретензияПолученная" Тогда
			ДокТест = СоздатьОбъект("Документ");
			Если ДокТест.ВыбратьПодчиненныеДокументы(,,Докум) = 1 Тогда
				Пока ДокТест.ПолучитьДокумент() = 1 Цикл
					Если (ДокТест.ПометкаУдаления() = 1)
					или(ДокТест.Проведен() = 0) Тогда
						Продолжить;
					КонецЕсли;
					
					Если ДокТест.Проведен()=1 Тогда
						Сообщить("Нельзя удалять документ, т.к. имеются проведенные подчиненные документы.
						|	Удаление документа отменено.","!");
						СтатусВозврата(0);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		
		Если (ЕстьРасхПретензия=0) И (семЕстьПраво("Документ","Счет","Удаление заявки в любом случае")=0) Тогда
			//проверяем на наличие претензии только если нет пометки на удаление накладной
			семПроверкаУдаленияЗаявки(Докум);
		КонецЕсли;

		глПровестиДокументыПоТоварам(Докум);
		
		ПозицияС = Докум.ДатаДок;         
		Если Докум.ДатаПоставки > ПолучитьДатуТА() Тогда 
			ПозицияПо = ПолучитьДатуТА();	
		Иначе
			ПозицияПо = Докум.ДатаПоставки;			
		КонецЕсли;
		ТекстЗапроса = "
		|Период с ПозицияС по ПозицияПо;  
		|Док = Регистр.РезервыТоваров.ТекущийДокумент;
		|ПоСчету = Регистр.РезервыТоваров.ПоСчету;
		|Резерв = Регистр.РезервыТоваров.РезервТовара;  
		|Функция фРезервыПриход = Приход( Резерв );
		|Функция фРезервыРасход = Расход( Резерв );
		|Группировка Док без групп;
		|Условие ( ПоСчету = Докум );";	
		Запрос = СоздатьОбъект( "Запрос" );
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда 
			Возврат;                                                
		КонецЕсли;
		Пока Запрос.Группировка( "Док" ) = 1 Цикл   
			Если Запрос.Док = Докум Тогда
				Продолжить;
			КонецЕсли;			
			Сообщить("Снимается с проведения: "+Строка(Докум.НомерДок)+" Дата документа: "+Строка(Докум.ДатаДок));
			Сообщить("Обнаружена приходная накладная сформировавшая резерв: "
			+Строка(Запрос.Док.НомерДок)+" Дата документа: "+Строка(Запрос.Док.ДатаДок)); 
			спПроведениеПриходНакл = СоздатьОбъект("СписокЗначений");
			спПроведениеПриходНакл.ДобавитьЗначение(Запрос.Док,"ПриходнаяНакл");   
			спПроведениеПриходНакл.ДобавитьЗначение(Докум,"Счет");
			ОбработкаОжидания("глПроведениеПриходНакл",5);
		КонецЦикла;		
	ИначеЕсли  Докум.Вид()="ПриходнаяНакладная" Тогда
		
		ЕстьРасхПретензия=0;
		ДокТест = СоздатьОбъект("Документ");
		Если ДокТест.ВыбратьПодчиненныеДокументы(,,Докум) = 1 Тогда
			Пока ДокТест.ПолучитьДокумент() = 1 Цикл
				Если ДокТест.Вид()="ПретензияПолученная" Тогда
					Если ДокТест.Проведен()=1 Тогда
						Если Вопрос("При отмене проведения Прихода будет удалена претензия. Вы уверены, что хотите продолжить?","Да+Нет")="Да" Тогда
							ЗаписьЖурналаРегистрации( "Удаление претензии "+ДокТест.НомерДок,, "Претензия полученная", Докум.ТекущийДокумент(), 2 );
							ОбъектУдалить(ДокТест,0);
							Продолжить;
						Иначе
							Сообщить("Отмена проведения документа отменена.","!");
							СтатусВозврата(0);
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЕсли;  
	ИначеЕсли  Докум.Вид()="КомплектацияМобил" Тогда
		ПоСчету=Докум.ПоСчету;
			ДокПодч=СоздатьОбъект("Документ");
			ДокПодч.ВыбратьПодчиненныеДокументы(ПоСчету.ДатаДок,,ПоСчету);
			Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
				Если (ДокПодч.Вид()="КомплектацияЗаявки") И (ДокПодч.ПометкаУдаления()=0) Тогда
					ОбъектУдалить(ДокПодч,0);
				ИначеЕсли (ДокПодч.Вид()="КомплектацияЗаявкиФакт") И (ДокПодч.ПометкаУдаления()=0) Тогда
					ОбъектУдалить(ДокПодч,0);	
				КонецЕсли;	
			КонецЦикла;		
	
			л_Счет=СоздатьОбъект("Документ.Счет");
			л_Счет.НайтиДокумент(ПоСчету);
			л_Счет.Комплектовщик=ПолучитьПустоеЗначение();
			л_Счет.Записать();
			л_Счет.Провести(0);
	КонецЕсли;	
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД

Процедура ПриУдаленииДокумента(Докум, Режим) Экспорт
	стар_ПриУдаленииДокумента(Докум, Режим);
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	ПриУдаленииОбъекта(Докум);
	ПриИзмененииОбъекта(Докум,Докум,РабочаяДата());
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД

//-----------------------------
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписиКонстанты(Имя, Значение) Экспорт Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ПриЗаписиКонстанты(ИмяКонст, ЗначКонст)
	//Закомментировано Инсталлятором МОД:Процедура ПриЗаписиКонстанты(ИмяКонст,ЗначКонст)
	Если     (ИмяКонст="ГраницаПоследовательности_1")
	Тогда
		Предупреждение("Значение этой константы запрещено изменять вручную!");
		СтатусВозврата(0);
	ИначеЕсли     ((ИмяКонст="БазоваяВалюта") или (ИмяКонст="ОсновнаяВалюта") или (ИмяКонст="ВалютаВзаиморасчетов")) Тогда
		Предупреждение("Значение этой константы запрещено изменять вручную!",3);
		СтатусВозврата(0);
	КонецЕсли;
	Если ИмяКонст="ФормаПодбораПоУмолчанию" Тогда
		Спис=СоздатьОбъект("СписокЗначений"); 
		Для А = 1 По Метаданные.Справочник("Номенклатура").ФормаСписка() Цикл
			Спис.ДобавитьЗначение(Метаданные.Справочник("Номенклатура").ФормаСписка(А).Идентификатор,Метаданные.Справочник("Номенклатура").ФормаСписка(А).Представление());
		КонецЦикла;
		выбЗнач="";
		Спис.ВыбратьЗначение(выбЗнач,,,,1);
		ЗначКонст=выбЗнач;
	КонецЕсли;
	//++SoftPoint++
    Если (ИмяКонст="РежимРаботыБазы") И (МонопольныйРежим()=0) Тогда
		СтатусВозврата(0);
		Предупреждение("Запрещено менять константу на ходу! Можно только в монопольном режиме!");
	КонецЕсли;
	//--SoftPoint--
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписиКонстанты(Имя, Значение) Экспорт
	стар_ПриЗаписиКонстанты(Имя, Значение);
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	ПриИзмененииОбъекта(Имя,Имя,РабочаяДата());
	
	
	
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//________________________________________________________
Процедура глСоздатьНовыйОбъект(Парм) Экспорт//SoftPoint устарело
	//Если глЕстьЛицензияБлокировок=1 Тогда
	//	ГибкиеБлокировки.УстановитьВремяОжиданияБлокировки(0);
	//	Парм.Новый();
	//	ГибкиеБлокировки.УстановитьВремяОжиданияБлокировки(-1);
	//Иначе
		Парм.Новый();
	//КонецЕсли;
КонецПроцедуры
//________________________________________________________
Процедура глСоздатьНовуюГруппу(Парм) Экспорт//SoftPoint устарело
	//Если глЕстьЛицензияБлокировок=1 Тогда
	//	ГибкиеБлокировки.УстановитьВремяОжиданияБлокировки(0);
	//	Парм.НоваяГруппа();
	//	ГибкиеБлокировки.УстановитьВремяОжиданияБлокировки(-1);
	//Иначе
		Парм.НоваяГруппа();
	//КонецЕсли;
КонецПроцедуры
//________________________________________________________
Процедура глУстановитьНовыйНомер(ПармДок,ПармПрефикс) Экспорт//SoftPoint устарело
	//Если глЕстьЛицензияБлокировок=1 Тогда
	//	ГибкиеБлокировки.УстановитьВремяОжиданияБлокировки(0);
	//	ПармДок.УстановитьНовыйНомер(ПармПрефикс);
	//	ГибкиеБлокировки.УстановитьВремяОжиданияБлокировки(-1);
	//Иначе
		ПармДок.УстановитьНовыйНомер(ПармПрефикс);
	//КонецЕсли;
КонецПроцедуры
//________________________________________________________
Функция глПриУстановкеИнтервалаЖурнала(ДатаНач,ДатаКон) Экспорт
	ТекПериодОграничения=Константа.ОграничитьИнтервалЖурнала;
	Если ТекПериодОграничения>0 Тогда
		//значит установлено ограничение в константе
		Если НазваниеНабораПрав() = "Администратор" Тогда //список исключений, кому не ограничивать журнал
			Возврат 0;
		КонецЕсли;
		МаксКонДата = ДатаНач+ТекПериодОграничения;
		Если МаксКонДата < ДатаКон Тогда
			Предупреждение("Установлен слишком большой интервал журнала!" + РазделительСтрок + "Установлен интервал " + ПериодСтр(ДатаНач,МаксКонДата),10);
			ДатаКон = МаксКонДата;
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
КонецФункции
//________________________________________________________
Процедура глГенерироватьСобытиеТрассировки(Парм,ВидДок,Объект)
	Если Парм=0 Тогда
		//Успешно - не нужно генерировать событие
	ИначеЕсли Парм=1 Тогда
		ЗаписьЖурналаРегистрации(СокрЛП(ВидДок)+"_"+Объект,"Гибкие блокировки","Блокировка после ожидания",,5);
		Если ГБ_ТрассаВключена=1 Тогда
			ГибкиеБлокировки.ГенерироватьСобытие(СокрЛП(ВидДок)+"_"+Объект,1);
		КонецЕсли;
	ИначеЕсли Парм=-1 Тогда
		ЗаписьЖурналаРегистрации(СокрЛП(ВидДок)+"_"+Объект,"Гибкие блокировки","Обнаружен таймаут блокировки!",,5);
		Если ГБ_ТрассаВключена=1 Тогда
			ГибкиеБлокировки.ГенерироватьСобытие(СокрЛП(ВидДок)+"_"+Объект,2);
		КонецЕсли;
		Сообщить("Истек таймаут ожидания блокировки!","!");
		СтатусВозврата(0);
	ИначеЕсли Парм=-2 Тогда
		ЗаписьЖурналаРегистрации(СокрЛП(ВидДок)+"_"+Объект,"Гибкие блокировки","Обнаружена отмена блокировки!",,5);
		Если ГБ_ТрассаВключена=1 Тогда
			ГибкиеБлокировки.ГенерироватьСобытие(СокрЛП(ВидДок)+"_"+Объект,3);
		КонецЕсли;
		Сообщить("Произошла отмена блокировки пользователем!","!");
		СтатусВозврата(0);
	ИначеЕсли Парм=-3 Тогда
		ЗаписьЖурналаРегистрации(СокрЛП(ВидДок)+"_"+Объект,"Гибкие блокировки","Обнаружен дедлок блокировки!",,5);
		Если ГБ_ТрассаВключена=1 Тогда
			ГибкиеБлокировки.ГенерироватьСобытие(СокрЛП(ВидДок)+"_"+Объект,4);
		КонецЕсли;
		Сообщить("Обнаружен дедлок блокировки!","!");
		СтатусВозврата(0);
	ИначеЕсли Парм=-999 Тогда
		ЗаписьЖурналаРегистрации(СокрЛП(ВидДок)+"_"+Объект,"Гибкие блокировки","Обнаружена ошибка вызова блокировки!",,5);
		Если ГБ_ТрассаВключена=1 Тогда
			ГибкиеБлокировки.ГенерироватьСобытие(СокрЛП(ВидДок)+"_"+Объект,5);
		КонецЕсли;
		Сообщить("Ошибка вызова блокировки!","!!!");
		СтатусВозврата(0);
	КонецЕсли;
КонецПроцедуры
//________________________________________________________
Процедура глГенерироватьПользовательскоеСобытиеТрассировки(ТекстСобытия,ПармЧисло) Экспорт
	ГибкиеБлокировки.ГенерироватьСобытие(ТекстСобытия,ПармЧисло);
КонецПроцедуры
//________________________________________________________
Функция глПроверкаБлокировкиТяжелыхДокументов(ВидДок,Парм=0)
	Перем ТекРезультат;
	Если Парм=0 Тогда
		Состояние("Проводится тяжелый документ");
		ТекРезультат=ГибкиеБлокировки.БлокировкаОбъекта("ТяжелыйДокумент","Shared",,глВремяОжиданияБлокировки);
		глГенерироватьСобытиеТрассировки(ТекРезультат,ВидДок,"СтандартныйДокумент");
		Состояние("");
		Если ТекРезультат<0 Тогда
			Возврат 0;
		КонецЕсли;
	Иначе
		Состояние("Ожидание монопольной блокировки");
		ТекРезультат=ГибкиеБлокировки.БлокировкаОбъекта("ТяжелыйДокумент",,,глВремяОжиданияБлокировки);
		глГенерироватьСобытиеТрассировки(ТекРезультат,ВидДок,"ТяжелыйДокумент");
		Состояние("");
		Если ТекРезультат<0 Тогда
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
КонецФункции
//________________________________________________________
Функция глПроверкаБлокировкиМассовойВставки(ВидДок, Парм=0) Экспорт
	Перем ТекРезультат;
	Если глЕстьЛицензияБлокировок=1 Тогда
		глВремяОжиданияБлокировки = Константа.ВремяОжиданияБлокировки*1000;
		Если Парм=0 Тогда
			Состояние("Ожидание окончания массовой вставки");
			ТекРезультат=ГибкиеБлокировки.БлокировкаОбъекта("МассоваяВставка","Shared",,глВремяОжиданияБлокировки);
			глГенерироватьСобытиеТрассировки(ТекРезультат,ВидДок,"МассоваяВставкаОжидание");
			Состояние("");
			Если ТекРезультат<0 Тогда
				Возврат 0;
			КонецЕсли;
		Иначе
			Состояние("Ожидание возможности массовой вставки");
			ТекРезультат=ГибкиеБлокировки.БлокировкаОбъекта("МассоваяВставка",,,глВремяОжиданияБлокировки);
			глГенерироватьСобытиеТрассировки(ТекРезультат,ВидДок,"МассоваяВставка");
			Состояние("");
			Если ТекРезультат<0 Тогда
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат 1;
КонецФункции
//________________________________________________________
Функция глПроверитьБлокировкуОбъекта(ВидДок,Объект,СтрокаСостояния) Экспорт
	Перем ТекРезультат;
	Состояние("Ожидание разблокировки объекта: "+СтрокаСостояния);
	ТекРезультат=ГибкиеБлокировки.БлокировкаОбъекта(Объект,,,глВремяОжиданияБлокировки);
	глГенерироватьСобытиеТрассировки(ТекРезультат,ВидДок,Объект);
	Если ТекРезультат<0 Тогда
		Возврат 0;
	КонецЕсли;
	Состояние("Проведение");
	Возврат 1;
КонецФункции
//________________________________________________________
Функция глПроверитьБлокировкуСписка(ВидДок,НачальнаяЧасть,Список,СтрокаСостояния,ПолныйКод=0)
	Перем ТекОбъект,ТекРезультат;
	Состояние("Ожидание разблокировки списка объектов: "+СтрокаСостояния);
	Для к=1 по Список.РазмерСписка() Цикл
		ТекЭлемент=Список.ПолучитьЗначение(к);
		Если ПустоеЗначение(ТекЭлемент)=0 Тогда
			Если ПолныйКод=0 Тогда
				ТекОбъект=НачальнаяЧасть+ТекЭлемент.Код;
			ИначеЕсли ПолныйКод=1 Тогда
				ТекОбъект=НачальнаяЧасть+ТекЭлемент.ПолныйКод();
			ИначеЕсли ПолныйКод=2 Тогда
				ТекОбъект=НачальнаяЧасть+ТекЭлемент.Владелец.Код+"_"+ТекЭлемент.ПолныйКод();
			Иначе//3
				ТекОбъект=НачальнаяЧасть+ТекЭлемент.Владелец.ПолныйКод()+"_"+ТекЭлемент.ПолныйКод();
			КонецЕсли;
			ТекРезультат=ГибкиеБлокировки.БлокировкаОбъекта(ТекОбъект,,,глВремяОжиданияБлокировки);
			глГенерироватьСобытиеТрассировки(ТекРезультат,ВидДок,ТекОбъект);
			Если ТекРезультат<0 Тогда
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Состояние("Проведение");
	Возврат 1;
КонецФункции
//________________________________________________________
Процедура глПроверкаРежимаБлокировки(Конт) Экспорт
	Перем ВидДок;
	Если глЕстьЛицензияБлокировок=0 Тогда
		Возврат;
	КонецЕсли;
	глВремяОжиданияБлокировки = Константа.ВремяОжиданияБлокировки*1000;
	ВидДок=Конт.Вид();
	Если глПроверкаБлокировкиМассовойВставки(ВидДок)=0 Тогда
		Возврат;
	КонецЕсли;
	Если ВидДок="СнятиеРезерва" Тогда
		Если глПроверкаБлокировкиТяжелыхДокументов(ВидДок,1)=0 Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если глПроверкаБлокировкиТяжелыхДокументов(ВидДок)=0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если ВидДок="АвансовыйОтчет" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыбратьСтроки();
		Пока Конт.ПолучитьСтроку()=1 Цикл
			Список.ДобавитьЗначение(Конт.ДокументАО.Клиент);
		КонецЦикла;
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Контрагенты_",Список,"Контрагенты",1);
	ИначеЕсли ВидДок="АктРазборки" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Товар");
		Список.ДобавитьЗначение(Конт.ИсходныйТовар);
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Номенклатура_",Список,"Номенклатура",1);
	ИначеЕсли ВидДок="АктСдачиОС" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Товар");
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Номенклатура_",Список,"Номенклатура",1);
	ИначеЕсли ВидДок="ВводОстатковКредита" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Если ПустоеЗначение(Конт.Клиент)=0 Тогда
			глПроверитьБлокировкуОбъекта(ВидДок,"Контрагенты_"+Конт.Клиент.ПолныйКод(),"Контрагенты");
		КонецЕсли;
	ИначеЕсли ВидДок="ВводОстатковРеализации" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Товар");
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Номенклатура_",Список,"Номенклатура",1);
	ИначеЕсли ВидДок="ВводОстатковТоваров" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Товар");
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Номенклатура_",Список,"Номенклатура",1);
	ИначеЕсли ВидДок="Взаимозачет" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Список.ДобавитьЗначение(Конт.Поставщик);
		Список.ДобавитьЗначение(Конт.Покупатель);
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Контрагенты_",Список,"Контрагенты",1);
	ИначеЕсли ВидДок="ДвиженияДенежныхСредств" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Клиент");
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Контрагенты_",Список,"Контрагенты",1);
	ИначеЕсли ВидДок="Доверенность" Тогда
		//-
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
	ИначеЕсли ВидДок="ЗаказКалькуляция" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
	ИначеЕсли ВидДок="ЗаказКладовщику" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
	ИначеЕсли ВидДок="ЗаказОтПокупателя" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Товар");
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Номенклатура_",Список,"Номенклатура",1);
	ИначеЕсли ВидДок="ЗаказПоставщику" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Товар");
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Номенклатура_",Список,"Номенклатура",1);
	ИначеЕсли ВидДок="ЗаменаИнгредиента" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
	ИначеЕсли ВидДок="ЗаявкаНаИзготовление" Тогда
		//-
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
	ИначеЕсли ВидДок="ЗаявкаНаПриобретение" Тогда
		//-
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
	ИначеЕсли ВидДок="ЗаявкаПокупателя" Тогда
		//-
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
	ИначеЕсли ВидДок="ИнвентаризацияРеализатора" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Товар");
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Номенклатура_",Список,"Номенклатура",1);
		Если ПустоеЗначение(Конт.Клиент)=0 Тогда
			глПроверитьБлокировкуОбъекта(ВидДок,"Контрагенты_"+Конт.Клиент.ПолныйКод(),"Контрагенты");
		КонецЕсли;
	ИначеЕсли ВидДок="КалькуляционнаяКарта" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Если ПустоеЗначение(Конт.ТоварШапки)=0 Тогда
			глПроверитьБлокировкуОбъекта(ВидДок,"Номенклатура_"+Конт.ТоварШапки.ПолныйКод(),"Номенклатура");
		КонецЕсли;
	ИначеЕсли ВидДок="КорректировкаЗаказОтПокупателя" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Товар");
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Номенклатура_",Список,"Номенклатура",1);
		Если ПустоеЗначение(Конт.Клиент)=0 Тогда
			глПроверитьБлокировкуОбъекта(ВидДок,"Контрагенты_"+Конт.Клиент.ПолныйКод(),"Контрагенты");
		КонецЕсли;
	ИначеЕсли ВидДок="МарочныйОтчет" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Товар");
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Номенклатура_",Список,"Номенклатура",1);
		Если ПустоеЗначение(Конт.Клиент)=0 Тогда
			глПроверитьБлокировкуОбъекта(ВидДок,"Контрагенты_"+Конт.Клиент.ПолныйКод(),"Контрагенты");
		КонецЕсли;
	ИначеЕсли ВидДок="ОплатаЧеков" Тогда
		//+                                           
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыбратьСтроки();
		Пока Конт.ПолучитьСтроку()=1 Цикл                 
			Если ПустоеЗначение(Конт.ВалютаРК.Клиент)=1 Тогда
				Продолжить;
			КонецЕсли;
			Если Список.НайтиЗначение(Конт.ВалютаРК.Клиент)=0 Тогда
				Список.ДобавитьЗначение(Конт.ВалютаРК.Клиент);
			КонецЕсли;
		КонецЦикла;
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Контрагенты_",Список,"Контрагенты",1);
		
		//		глПроверитьБлокировкуОбъекта(ВидДок,"Контрагенты_"+КлиентОплатаЧеков.ПолныйКод(),"Контрагенты");
	ИначеЕсли ВидДок="ОтчетРеализатора" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Товар");
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Номенклатура_",Список,"Номенклатура",1);
		Если ПустоеЗначение(Конт.Клиент)=0 Тогда
			глПроверитьБлокировкуОбъекта(ВидДок,"Контрагенты_"+Конт.Клиент.ПолныйКод(),"Контрагенты");
		КонецЕсли;
	ИначеЕсли ВидДок="Перемещение" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Товар");
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Номенклатура_",Список,"Номенклатура",1);
	ИначеЕсли ВидДок="ПеремещениеДепартамент" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Товар");
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Номенклатура_",Список,"Номенклатура",1);
	ИначеЕсли ВидДок="ПеремещениеНаСкладГотовойПродукции" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Товар");
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Номенклатура_",Список,"Номенклатура",1);
	ИначеЕсли ВидДок="ПереносВзаиморасчетыПокупателей" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Клиент");
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Контрагенты_",Список,"Контрагенты",1);
	ИначеЕсли ВидДок="ПереносВзаиморасчетыПоставщиков" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Клиент");
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Контрагенты_",Список,"Контрагенты",1);
	ИначеЕсли ВидДок="ПереносКасса" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
	ИначеЕсли ВидДок="ПереносОстаткиТоваров" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Товар");
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Номенклатура_",Список,"Номенклатура",1);
	ИначеЕсли ВидДок="ПереносПартииТоваров" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Товар");
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Номенклатура_",Список,"Номенклатура",1);
	ИначеЕсли ВидДок="ПереносРезервыТоваров" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Товар");
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Номенклатура_",Список,"Номенклатура",1);
	ИначеЕсли ВидДок="ПереоценкаТоваров" Тогда
		//-
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Товар");
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Номенклатура_",Список,"Номенклатура",1);
	ИначеЕсли ВидДок="ПланированиеНаценки" Тогда
		//-
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
	ИначеЕсли ВидДок="ПланированиеПродаж" Тогда
		//-
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
	ИначеЕсли ВидДок="ПлатежноеПоручение" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
	ИначеЕсли ВидДок="ПретензияПолученная" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
	ИначеЕсли ВидДок="ПриходнаяНакладная" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Товар");
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Номенклатура_",Список,"Номенклатура",1);
		Если ПустоеЗначение(Конт.Клиент)=0 Тогда
			глПроверитьБлокировкуОбъекта(ВидДок,"Контрагенты_"+Конт.Клиент.ПолныйКод(),"Контрагенты");
		КонецЕсли;
	ИначеЕсли ВидДок="ПриходнаяРеализатора" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Товар");
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Номенклатура_",Список,"Номенклатура",1);
		Если ПустоеЗначение(Конт.Клиент)=0 Тогда
			глПроверитьБлокировкуОбъекта(ВидДок,"Контрагенты_"+Конт.Клиент.ПолныйКод(),"Контрагенты");
		КонецЕсли;
	ИначеЕсли ВидДок="ПриходныйОрдерТБ" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Если ПустоеЗначение(Конт.Клиент)=0 Тогда
			глПроверитьБлокировкуОбъекта(ВидДок,"Контрагенты_"+Конт.Клиент.ПолныйКод(),"Контрагенты");
			Если Конт.Клиент.ВидКонтрагента=Перечисление.ВидыКонтрагентов.Сотрудник Тогда
				глПроверитьБлокировкуОбъекта(ВидДок,"Сотрудники_"+СокрЛП(Конт.Клиент.КодДляСотрудника),"Сотрудники");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидДок="РасходнаяНакладная" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Товар");
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Номенклатура_",Список,"Номенклатура",1);
		Если ПустоеЗначение(Конт.Клиент)=0 Тогда
			глПроверитьБлокировкуОбъекта(ВидДок,"Контрагенты_"+Конт.Клиент.ПолныйКод(),"Контрагенты");
		КонецЕсли;
	ИначеЕсли ВидДок="РасходнаяНакладнаяНал" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Товар");
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Номенклатура_",Список,"Номенклатура",1);
		Если ПустоеЗначение(Конт.Клиент)=0 Тогда
			глПроверитьБлокировкуОбъекта(ВидДок,"Контрагенты_"+Конт.Клиент.ПолныйКод(),"Контрагенты");
		КонецЕсли;
	ИначеЕсли ВидДок="РасходнаяРеализатора" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Товар");
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Номенклатура_",Список,"Номенклатура",1);
		Если ПустоеЗначение(Конт.Клиент)=0 Тогда
			глПроверитьБлокировкуОбъекта(ВидДок,"Контрагенты_"+Конт.Клиент.ПолныйКод(),"Контрагенты");
		КонецЕсли;
	ИначеЕсли ВидДок="РасходныйОрдерТБ" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Если ПустоеЗначение(Конт.Клиент)=0 Тогда
			глПроверитьБлокировкуОбъекта(ВидДок,"Контрагенты_"+Конт.Клиент.ПолныйКод(),"Контрагенты");
		КонецЕсли;
	ИначеЕсли ВидДок="РегистрацияСчета_фактуры" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
	ИначеЕсли ВидДок="РеестрНакладных" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
	ИначеЕсли ВидДок="РезервированиеТовара" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Товар");
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Номенклатура_",Список,"Номенклатура",1);
	ИначеЕсли ВидДок="СличительнаяВедомость" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Товар");
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Номенклатура_",Список,"Номенклатура",1);
	ИначеЕсли ВидДок="СнятиеРезерва" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
	ИначеЕсли ВидДок="Списание" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Товар");
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Номенклатура_",Список,"Номенклатура",1);
	ИначеЕсли ВидДок="СписаниеЗадолженности" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Если ПустоеЗначение(Конт.Клиент)=0 Тогда
			глПроверитьБлокировкуОбъекта(ВидДок,"Контрагенты_"+Конт.Клиент.ПолныйКод(),"Контрагенты");
		КонецЕсли;
	ИначеЕсли ВидДок="Счет" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
//		Список=СоздатьОбъект("СписокЗначений");
//		Конт.ВыгрузитьТабличнуюЧасть(Список,"Товар");
//		Список.Сортировать();
//		глПроверитьБлокировкуСписка(ВидДок,"Номенклатура_",Список,"Номенклатура",1);
		Если ПустоеЗначение(Конт.КлГруппа)=0 Тогда
			глПроверитьБлокировкуОбъекта(ВидДок,"Контрагенты_"+Конт.КлГруппа.ПолныйКод(),"Контрагенты");
		КонецЕсли;

	ИначеЕсли ВидДок="Счет_фактура" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Если ПустоеЗначение(Конт.Клиент)=0 Тогда
			глПроверитьБлокировкуОбъекта(ВидДок,"Контрагенты_"+Конт.Клиент.ПолныйКод(),"Контрагенты");
		КонецЕсли;
	ИначеЕсли ВидДок="УслугиПеревозки" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Если ПустоеЗначение(Конт.Клиент)=0 Тогда
			глПроверитьБлокировкуОбъекта(ВидДок,"Контрагенты_"+Конт.Клиент.ПолныйКод(),"Контрагенты");
		КонецЕсли;
	ИначеЕсли ВидДок="УстановкаСкидокКлиентам" Тогда
		//-
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Если ПустоеЗначение(Конт.Клиент)=0 Тогда
			глПроверитьБлокировкуОбъекта(ВидДок,"Контрагенты_"+Конт.Клиент.ПолныйКод(),"Контрагенты");
		КонецЕсли;
	ИначеЕсли ВидДок="Чек" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		// сем \\
		Если ПустоеЗначение(Конт.Клиент)=0 Тогда
			глПроверитьБлокировкуОбъекта(ВидДок,"Контрагенты_"+Конт.Клиент.ПолныйКод(),"Контрагенты");
		КонецЕсли;
		// сем //
	ИначеЕсли ВидДок="МаршрутныйЛист" Тогда
		//-
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Если ПустоеЗначение(Конт.Машина)=0 Тогда
			глПроверитьБлокировкуОбъекта(ВидДок,"Автотранспорт_"+Конт.Машина.Код,"Автотранспорт");
		КонецЕсли;
	ИначеЕсли ВидДок="ПросроченныеДолги" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		// PR \\
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Клиент");
		Список.Сортировать();

		Если Список.РазмерСписка()>0 Тогда
			глПроверитьБлокировкуОбъекта(ВидДок,"Контрагенты_"+Список,"Контрагенты");
		КонецЕсли;
		// PR //
	ИначеЕсли ВидДок="КомплектацияЗаявки" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		// PR \\
		Если ПустоеЗначение(Конт.МестоКомплектации)=0 Тогда
			глПроверитьБлокировкуОбъекта(ВидДок,"МестаКомплектаций_"+Конт.МестоКомплектации.ПолныйКод(),"МестаКомплектаций");
		КонецЕсли;
		// PR //
	ИначеЕсли ВидДок="КомплектацияЗаявкиФакт" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		// PR \\
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Товар");
		Список.Сортировать();
		глПроверитьБлокировкуСписка(ВидДок,"Номенклатура_",Список,"Номенклатура",1);
		// PR //
		
	ИначеЕсли ВидДок="УстановкаКредитныхЛимитов" Тогда
		//+
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Клиент");
		Список.Сортировать();
		
		Если Список.РазмерСписка()>0 Тогда
			глПроверитьБлокировкуОбъекта(ВидДок,"Контрагенты_"+Список,"Контрагенты");
		КонецЕсли;
	ИначеЕсли ВидДок="ПретензияПолученная" Тогда
		ГибкиеБлокировки.БлокировкаПоСхеме(ВидДок,17);
		Список=СоздатьОбъект("СписокЗначений");
		Конт.ВыгрузитьТабличнуюЧасть(Список,"Товар");
		Список.Сортировать();
		
		Если Список.РазмерСписка()>0 Тогда
			глПроверитьБлокировкуОбъекта(ВидДок,"Номенклатура_"+Список,"Номенклатура");
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры
//________________________________________________________
Функция глИнициализацияМеханизмаБлокировок()
	
	//+Инициализация механизма блокировок
	Если МонопольныйРежим()=0 Тогда
		Если Константа.РежимРаботыБазы=Перечисление.РежимыРаботыБазы.ГибкиеБлокирокиРазрешены Тогда
			Состояние("Инициализация гибких блокировок.");   

			Путь = СокрЛП(Константа.ПутьКВнешнимБиблиотекам);
			Результат=Загрузчик.ЗагрузитьВК(Путь + "\SPFlexLocks\SPFlexLocks.dll","Addin.SPFlexLocks=E480C730-AAC2-493B-809F-81EE93404658");
			Если Результат.КодОшибки = 0 Тогда
				//Сообщить(Результат.Результат);
			Иначе
				Сообщить("Ошибка " + Результат.КодОшибки + РазделительСтрок + Результат.Результат);
			КонецЕсли;	
			
			
//			Если ЗагрузитьВнешнююКомпоненту("SPFlexLocks.dll")=0 Тогда
			Если Результат.КодОшибки <> 0 Тогда
				ЗаписьЖурналаРегистрации("Не удалось загрузить компоненту SPFlexLocks.dll","Гибкие блокировки","Ошибка загрузки компоненты",,5);
				Предупреждение("Не удалось инициализировать компоненту гибких блокировок!
				|Без этого работа в базе возможна только в монопольном режиме!");
				Возврат 0;
			Иначе
				Попытка
					ГибкиеБлокировки=СоздатьОбъект("AddIn.SPFlexLocks");
				Исключение
					ЗаписьЖурналаРегистрации("Не удалось создать объект компоненты","Гибкие блокировки","Ошибка создания объекта",,5);
					Предупреждение("Не удалось создать объект SPFlexLocks!
					|Без этого работа в базе возможна только в монопольном режиме!");
					Возврат 0;
				КонецПопытки;
				Если ГибкиеБлокировки.ЛицензияВерна()=1 Тогда
					ТекДатаЛицензии=ГибкиеБлокировки.ПолучитьДатуЛицензии();
					ТекРазница=ТекДатаЛицензии-ТекущаяДата();
					Если ТекРазница<=10 Тогда
						Сообщить("Внимание!!! Близится время окончания временной лицензии на ""Гибкие блокировки""!
						|Лицензия действительна до: "+Формат(ТекДатаЛицензии,"ДДДММГГГГ"),?(ТекРазница>3,"i","!!!"));
					КонецЕсли;               
					
					Попытка
						ГибкиеБлокировки.ЗарегистрироватьПользователя()
					Исключение
						Сообщить("Не удалось создать запись о соответствии ИмяПользователя - spid");
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
					
					глЕстьЛицензияБлокировок=1;
					ГибкиеБлокировки.БлокировкаПоСхеме("Старт",33);
					ГибкиеБлокировки.СтандартныеНастройки(1);
					ГибкиеБлокировки.РасширенныеНастройки(1);
					ГибкиеБлокировки.ИзменитьПроцедуры();
					///Проверка IDD
					ГибкиеБлокировки.ПроверкаУникальнойТаблицыМОД(Число(Константа.УникальныйIDD)+1);
					//
					ГибкиеБлокировки.Инициализировать();
					Если Константа.ВключитьТрассировкуБлокировок=Перечисление.Булево.Да Тогда
						ГБ_ТрассаВключена=1;
					КонецЕсли;
					Если Константа.ВремяОжиданияБлокировки = 0 Тогда
						Константа.ВремяОжиданияБлокировки = 90;//по-умолчанию 
					КонецЕсли;
					глВремяОжиданияБлокировки = Константа.ВремяОжиданияБлокировки*1000;
					Состояние("Готово");		
				Иначе
					ЗаписьЖурналаРегистрации("Нет действующей лицензии","Гибкие блокировки","Нет действующей лицензии",,5);
					Предупреждение("Нет действующей лицензии на Гибкие блокировки!
					|Работа возможна только в монопольном режиме.
					|Установите лицензию или проведите деинсталляцию!",15);
					Возврат 0;
				КонецЕсли;
			КонецЕсли;
		Иначе //Гибкие блокировки запрещены
			//Если ЗагрузитьВнешнююКомпоненту(СокрЛП(Константа.ПутьКВнешнимБиблиотекам) + "\SPService.dll")=0 Тогда
			//	Сообщить("Не удалось загрузить внешнюю компоненту SPService", "!!");
			//Иначе
			//	глСофтПоинтВК = СоздатьОбъект("AddIn.SPService");
			//	Попытка
			//		глСофтПоинтВК.ЗарегистрироватьПользователя()
			//	Исключение
			//		Сообщить("Не удалось создать запись о соответствии ИмяПользователя - spid");
			//		Сообщить(ОписаниеОшибки());
			//	КонецПопытки;
			//	//инициализируем сетевой сервис
			//	глСофтПоинтВК.КаталогСетевогоСервиса = "C:\"; //здесь нужно указать реальный путь
			//	глСофтПоинтВК.ЗапуститьСетевойСервис();
			//КонецЕсли;
			
		КонецЕсли; 
	КонецЕсли;
	
	Возврат 1;
КонецФункции
//________________________________________________________
//_____________________________________________________________________________
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриНачалеРаботыСистемы() Экспорт Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура КодТаблица() Далее 

Процедура семПроверкаОткрытияПериода()
	Если семБлокировка = 1 Тогда 
		Возврат; 
	КонецЕсли;                 
	                             
	Если Константа.АвтоЗакрытиеПериодаДней=0 Тогда
		Константа.АвтоЗакрытиеПериодаДней = 7;
	КонецЕсли;
	
	ДатаЗакрытия = РабочаяДата()-Константа.АвтоЗакрытиеПериодаДней;

	Если ИмяПользователя() = "ЗагрузкаECOD" Тогда

		Если ТекущееВремя()>="18:00:00" Тогда
			Если Константа.ДатаЗапретаРедактирования < ДатаЗакрытия Тогда
				Константа.ДатаЗапретаРедактирования = ДатаЗакрытия;
			КонецЕсли;
        КонецЕсли;

		Если (ДатаЧисло(РабочаяДата())>=15) И (Константа.ДатаЗапретаРедактированияСчетов< НачМесяца(РабочаяДата())) Тогда
			Константа.ДатаЗапретаРедактированияСчетов = НачМесяца(РабочаяДата())-1;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПользователя() = "ЗагрузкаККМ" Тогда
		Возврат
	ИначеЕсли ИмяПользователя() = "CHD8000in" Тогда
		Возврат;
	ИначеЕсли ИмяПользователя() = "LoadKKM" Тогда
		Возврат;
	ИначеЕсли ИмяПользователя() = "Vasjukova" Тогда
	ИначеЕсли (Найти(ИмяПользователя(),"MOD")>0) Тогда
		Возврат;
	КонецЕсли;
	
	Если МонопольныйРежим() = 1 Тогда
		
		Если (КонМесяца( ПолучитьДатуТА() ) < РабочаяДата()) И (НазваниеНабораПрав()<>"Администратор") Тогда
			УстановитьТАНа( НачМесяца( РабочаяДата() ) );
		КонецЕсли;
		
	КонецЕсли;                       

	Если (ИмяПользователя()="ПереносТА") ИЛИ (ИмяПользователя()="TransitTA") Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура sid_СоздатьНапоминание(_Дата,КодНапоминания,тхтНапоминания)
	Блокнот=СоздатьОбъект("Справочник.Блокнот");
	Надо=0;
	Блокнот.НайтиПоКоду(ИмяПользователя());
	Если (Блокнот.Выбран()=0) ИЛИ (Блокнот.ЭтоГруппа()=0) Тогда
		Возврат;
	КонецЕсли;
	Блокнот.ИспользоватьРодителя(Блокнот.ТекущийЭлемент());
	Блокнот.ВыбратьЭлементы();
	Пока Блокнот.ПолучитьЭлемент()=1 Цикл
		Если (Блокнот.Код=КодНапоминания) Тогда
			Если  (Блокнот.__Дата=_Дата) Тогда
				//такая напоминалка уже есть - ничего делать не надо
				Возврат;
			ИначеЕсли (Блокнот.__Дата <_Дата) Тогда	
				// старая - помечаем на удаление
				Блокнот.Удалить(0);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Блокнот.Новый();
	Блокнот.Наименование="Создано автоматически";
	Блокнот.Код = КодНапоминания;
	Блокнот.Запись=тхтНапоминания;
	Блокнот.__Дата = _Дата;
	Часы=0;
	Минуты=0;
	Секунды=0;
	Блокнот.Время = ТекущееВремя(Часы,Минуты,Секунды);
	Блокнот.Записать();
	Если Часы < 15 Тогда
		Блокнот.Новый();
		Блокнот.Код = КодНапоминания;
		Блокнот.Запись=тхтНапоминания;
		Блокнот.__Дата = _Дата;
		Блокнот.Время = "15:00:00";
		Блокнот.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура НастроитьОкна(Показать=1)
	Перем меню;
	Окна = СоздатьОбъект("Окна");
	//Окна.ВключитьМодальныйРежим();
	Окна.Максимизировать();
	
	Если Показать<>1 Тогда
		меню = Окна.ПолучитьМеню();
	КонецЕсли;
   
    а="";
 //   меню.ВыбратьЗначение(а);
	стр="";	
	Для Номер = 1 По Меню.РазмерСписка() Цикл
		меню.ПолучитьЗначение(Номер, стр); //получить значение и представление
		Окна.ВидимостьМеню(стр, Показать);
	КонецЦикла;
	Окна.ПоказыватьПанели(Показать);
	Если Показать<>1 Тогда
	//	Окна.Минимизировать(Форма);
	//	Окна.Максимизировать(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура стар_ПриНачалеРаботыСистемы()
	//Закомментировано Инсталлятором МОД:Процедура ПриНачалеРаботыСистемы()
	
	Если семБлокировка = 1 Тогда 
		Возврат; 
	КонецЕсли;
	
	семЗагрузкаВнешнихКомпонент2();    
	семПодклКомпонентыРК();
	семПроверкаОткрытияПериода();
	
	Сервис = СоздатьОбъект("Сервис");
	Сервис.ПерехватКлавиатуры(0);   
	Сервис.ПерехватМыши(0);
	Сервис.ВключитьРаскраскуТаблиц();
	
	//++SoftPoint++
	глЕстьЛицензияБлокировок=0;
	ГБ_ТрассаВключена=0;
	Если глИнициализацияМеханизмаБлокировок()=0 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	Если Константа.РазрешитьМониторинг=Перечисление.Булево.Да Тогда
		spLoadMonitoring();
	КонецЕсли;
	//--SoftPoint--
	
	//***********************************************************
	//<<Алгоритм Успеха>> (begin)
	// из фиш
	КодТаблица();  
	SQLInit();     
	
	
	//Если Константа.ВключитьClear1C=1 Тогда
	//	Если ЗагрузитьВнешнююКомпоненту("SPClear1C.dll")=0 Тогда
	//		Предупреждение("Не удалось инициализировать компоненту SPClear1C!");
	//		СтатусВозврата(0);
	//		Возврат;
	//	КонецЕсли;
	//	Попытка
	//		ОбъектВК=СоздатьОбъект("AddIn.SPClear1C");
	//	Исключение
	//		Предупреждение("Не удалось создать объект SPClear1C!");
	//		СтатусВозврата(0);
	//		Возврат;
	//	КонецПопытки; 
	//	ОбъектВК.ClearBuffer();
	//	КолПровДоков = 0;
	//КонецЕсли;
	
	//<<Алгоритм Успеха>> (end) 
	//************************************************************               
	
	//*****************************************
	// Блокировка системы
	//*****************************************
	//Если (Константа.БлокировкаСистемы <> Перечисление.СостояниеБлокировкиСистемы.Работа) и (НазваниеНабораПрав() <> "Администратор") Тогда
	//	    Предупреждение("Извините, вход в систему заблакирован системными работами.");
	//		ЗавершитьРаботуСистемы(0);
	//		СтатусВозврата(0);
	//КонецЕсли;   
	
	//ОбработкаОжидания("Блокировка",30);        
	//******************************************
	
	
	ПоказыватьНастройкуТорговли=Число(Лев(Константа.Контроль,1));
	
	Если ПоказыватьНастройкуТорговли<2 Тогда
		Если (НазваниеНабораПрав()="Администратор") ИЛИ (НазваниеНабораПрав()="Руководитель") Тогда
			ОткрытьФорму("Обработка.НастройкаТорговли");
		КонецЕсли;
	КонецЕсли;
	
	
	Если (НазваниеНабораПрав()="Администратор") ИЛИ (Врег(ИмяПользователя())="BLA") Тогда
		РегФотоActiveX=ВосстановитьЗначение("ActiveX_Фото");
		//Открываем карточку товара для регистрации ActiveX
		Если Число(РегФотоActiveX)=0 Тогда
			Спр=СоздатьОбъект("Справочник.Номенклатура");
			Спр.НайтиПоКоду("0444105",0);
			ОткрытьФорму(Спр.ТекущийЭлемент());
			СохранитьЗначение("ActiveX_Фото",1);
		КонецЕсли;
	КонецЕсли;
		
	//--- Автоматическое открытие периода
	
	//ДатаТА=ПолучитьДатуТА();     
	//
	//Если (Найти(ИмяПользователя(),"MOD")=1) ИЛИ (Найти(ИмяПользователя(),"ККМ")=1) Тогда
	//	Если (РабочаяДата() > ДатаТА) и
	//	     ((ДатаМесяц(ДатаТА) <> ДатаМесяц(РабочаяДата())) или (ДатаГод(ДатаТА) <> ДатаГод(РабочаяДата()))) Тогда
	//		Если МонопольныйРежим() = 1 Тогда
	//			УстановитьТАНа(РабочаяДата());
	//		КонецЕсли;	
	//	КонецЕсли;
	//Иначе
	//    Если (ТекущаяДата()>ДатаТА) И
	//    (ДатаМесяц(ДатаТА)<>ДатаМесяц(ТекущаяДата())) Тогда
	//        Если МонопольныйРежим()=0 Тогда
	//            Ответ=Вопрос("Не открыт период!"+РазделительСтрок+
	//            "Для открытия периода запустите программу в монопольном режиме!"+РазделительСтрок+
	//            "Завершить работу программы?","Да+Нет");
	//            Если Ответ="Да" Тогда
	//                СтатусВозврата(0);
	//                Возврат;
	//            КонецЕсли;
	//        Иначе
	//            Ответ=Вопрос("Не открыт период!"+РазделительСтрок+
	//            "Выполнить открытие периода?","Да+Нет");
	//            Если Ответ="Да" Тогда
	//                УстановитьТАНа(ТекущаяДата());
	//            КонецЕсли;
	//        КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//---АУ---
	Если ПустоеЗначение(Константа.ДатаСлужебныхДокументов)=1 Тогда
		Константа.ДатаСлужебныхДокументов=НачГода(ТекущаяДата());
	КонецЕсли;//--АУ   
	
	// Инициализация констант OPOS
	Если ПравоДоступа( "Использование", "Обработка.ИнициализацияКонстантOPOS" ) = 1 Тогда
		ОткрытьФорму("Обработка.ИнициализацияКонстантOPOS"+"#"); 
	КонецЕсли;
	// настройка торгового оборудования
	Если глСуществуетФайлНастройки()>0 Тогда
		Парам = "Подключить";
		ОткрытьФорму("Обработка.ПодключениеТорговогоОборудования"+"#", Парам);
	КонецЕсли;	
	//Запуск Автоматичесткого обмена для МОД
	Если Найти(ИмяПользователя(),"MOD")=1 Тогда
		ППБ=СоздатьОбъект("Справочник.ПериферийныеБазы");
		ППБ.НайтиПоРеквизиту("IDD","0000001",1);
		
		СписокПараметров=СоздатьОбъект("СписокЗначений");
		СписокПараметров.ДобавитьЗначение("Список выгрузки","Команда");
		СписокПараметров.ДобавитьЗначение(1,"Загрузка");               
		Если (ИмяПользователя()="MODЗагрузка") ИЛИ (ИмяПользователя()="MODLoad") Тогда
			СписокПараметров.ДобавитьЗначение(ППБ.ТекущийЭлемент(),"База");
			СписокПараметров.ДобавитьЗначение(0,"Выгрузка");
		Иначе
			СписокПараметров.ДобавитьЗначение(1,"Выгрузка");
		КонецЕсли;
		
		ОткрытьФорму("Обработка.ОбменДанными"+"#",СписокПараметров);
		СтатусВозврата(0);
	КонецЕсли;
	
	Если (Найти(ИмяПользователя(),"ВыгрузкаККМ")=1) ИЛИ (Найти(ИмяПользователя(),"UnloadККМ")=1) Тогда
		
		СписокПараметров=СоздатьОбъект("СписокЗначений");
		СписокПараметров.ДобавитьЗначение("Выгрузка","Команда");
		СписокПараметров.ДобавитьЗначение(1,"ПоПереоценкам");
		СписокПараметров.ДобавитьЗначение(0,"ВсеТовары");
		СписокПараметров.ДобавитьЗначение(1,"АкционныеТовары");
		
		ОткрытьФорму("Обработка.ОбменСККМCHD7500"+"#",СписокПараметров);
		СтатусВозврата(0);
	КонецЕсли;
	
	Если (Найти(ИмяПользователя(),"ЗагрузкаККМ")=1) ИЛИ (Найти(ИмяПользователя(),"LoadKKM")=1) Тогда
		//семПроверкаОткрытияПериода();
		
		СписокПараметров=СоздатьОбъект("СписокЗначений");
		СписокПараметров.ДобавитьЗначение("Загрузка","Команда");
		
		ОткрытьФорму("Обработка.ОбменСККМCHD7500"+"#",СписокПараметров);
		СтатусВозврата(0);
	КонецЕсли;
	
	
	Если ИмяПользователя()="ОбменДаннымиWEB" Тогда		
		глФлагРасшифровки=1;
		глРасшифровка = СоздатьОбъект("СписокЗначений");
		глРасшифровка.ДобавитьЗначение(0, "ПолнаяВыгрузка");
		глРасшифровка.ДобавитьЗначение(0, "ТолькоWEB");
		глРасшифровка.ДобавитьЗначение(1, "ВыгрузкаТоваров");
		глРасшифровка.ДобавитьЗначение(0, "ОбменЗаказами");
		ОткрытьФорму("Обработка.Bitrix_ОбменДанными",глРасшифровка);
		ЗавершитьРаботуСистемы(0);
		Возврат;
	КонецЕсли;

	Если ИмяПользователя() = "БэкапККМ" Тогда
		Путь = КаталогИБ() + "ExtForms\Utils\Кассы\ОбновлениеPOS.ert";
		ОткрытьФорму( "Отчет", "Бэкап", Путь );
		СтатусВозврата(0);
	КонецЕсли;
	
	Если (ИмяПользователя() = "ЗагрузкаECOD") ИЛИ (ИмяПользователя() = "LoadECOD") Тогда
		//загружаем EDI заказы
		
		Путь = КаталогИБ() + "ExtForms\ЗагрузкаECOD.ert";
		Если ФС.СуществуетФайл( Путь ) = 0 Тогда
			Сообщить( "Ошибка загрузки ECOD.","!" );
			Сообщить( Шаблон("Не найдена обработка загрузки. ([Путь])"),"I" );
		КонецЕсли;
		ОткрытьФорму( "Отчет", Константа.КаталогОбменаECOD, Путь );

		//
		СтатусВозврата(0);
	КонецЕсли;
	
	Если (ИмяПользователя() = "ЗагрузкаECODEE") Тогда
		//загружаем заказы TELEMA для эстонской базы
		
		Путь = КаталогИБ() + "ExtForms\TELEMA_RECADV.ert";
		Если ФС.СуществуетФайл( Путь ) = 0 Тогда
			Сообщить( "Ошибка загрузки ECOD.","!" );
			Сообщить( Шаблон("Не найдена обработка загрузки. ([Путь])"),"I" );
		КонецЕсли;
		п_КаталогRECADV=СокрЛП(Константа.КаталогОбменаTELEMA)+"\RECADV";
		ОткрытьФорму( "Отчет", п_КаталогRECADV, Путь );
		СтатусВозврата(0);
	КонецЕсли;	
	

	Если (ИмяПользователя() = "ЗагрузкаWEBORDERS") ИЛИ (ИмяПользователя() = "LoadWEBORDERS") Тогда
		//дополнительно загружаем заказы WEB ORDERS orders.food.reaton.lv
		Путь = КаталогИБ() + "ExtForms\ЗагрузкаWEBORDERS.ert";
		Если ФС.СуществуетФайл( Путь ) = 0 Тогда
			Сообщить( "Ошибка загрузки ECOD.","!" );
			Сообщить( Шаблон("Не найдена обработка загрузки. ([Путь])"),"I" );
		КонецЕсли;
		ОткрытьФорму( "Отчет", Константа.КаталогОбменаECOD, Путь );
		
		СтатусВозврата(0);

	КонецЕсли;
	
	Если ИмяПользователя() = "MainReport" Тогда
		Путь = КаталогИБ() + "ExtForms\MainReport.ert";
		ОткрытьФорму( "Отчет",, Путь );
		СтатусВозврата(0);
	КонецЕсли;

	Если ИмяПользователя() = "Sklad" Тогда
		НастроитьОкна(0);
		спр=СоздатьОбъект("Справочник.Комплектовщики");
		флКонецЦикла=0;
		счетчик=0;
		Пока флКонецЦикла=0 Цикл
			стр=0;
			Если ВвестиЧисло(стр,"Пароль. Попыток:"+(счетчик+1)+"/3",5,0,0)=1 Тогда
				Если (спр.НайтиПоРеквизиту("Пароль",стр,1)=1)и(стр<>0) Тогда
					Если спр.ПометкаУдаления()=1 Тогда
						Продолжить;
					КонецЕсли;
					НайденныйЭлемент = спр.ТекущийЭлемент();
				//	ДокОсн = СоздатьОбъект("Документ.ОжидаемаяПоставка");
				//	ДокОсн.НайтиПоНомеру("P1OT-00001");
					флКонецЦикла=1;

					знач_="ВидыУстройств";
					Если ВвестиПеречисление(знач_,"Вид устройства")>0 Тогда
						Если знач_=Перечисление.ВидыУстройств.CASIO Тогда
							ОткрытьФорму( "Обработка.ОбрПриемДок",НайденныйЭлемент,)
						ИначеЕсли знач_=Перечисление.ВидыУстройств.Getac Тогда
							ОткрытьФорму( "Обработка.ОбрКомплДок",НайденныйЭлемент,)
						КонецЕсли;
					Иначе
						Возврат;
					КонецЕсли; ;
					
				//	ОткрытьФорму( "Обработка.ОбрПриемДок",НайденныйЭлемент,);
				//	ОткрытьФорму( "Документ.ПрихНаклМобил",НайденныйЭлемент,);
				//	ОткрытьФормуМодально( "Документ.ПрихНаклМобил");
				Иначе
					счетчик=счетчик+1;
				КонецЕсли;
			Иначе
				счетчик=3;
			КонецЕсли;
			Если счетчик=3 Тогда
				флКонецЦикла=1;
			КонецЕсли;	
			
		КонецЦикла;
		
		Если счетчик=3 Тогда
			СтатусВозврата(0);
			ЗавершитьРаботуСистемы(0);
		КонецЕсли;	

	КонецЕсли;	
	Если ИмяПользователя() = "ЦехPPAC" Тогда
		НастроитьОкна(0);
		РозничныйТорговыйСклад=Константа.ОсновнойСкладСвежихПродуктов;
		спр=СоздатьОбъект("Справочник.Комплектовщики");
		флКонецЦикла=0;
		счетчик=0;
		Пока флКонецЦикла=0 Цикл
			стр=0;
			Если ВвестиЧисло(стр,"Пароль. Попыток:"+(счетчик+1)+"/3",5,0,0)=1 Тогда
				Если (спр.НайтиПоРеквизиту("Пароль",стр,1)=1)и(стр<>0) Тогда
					Если спр.ПометкаУдаления()=1 Тогда
						Продолжить;
					КонецЕсли;
					НайденныйЭлемент = спр.ТекущийЭлемент();
					флКонецЦикла=1;
					ОткрытьФорму( "Обработка.ОбрКомплДокМобилПланшет",НайденныйЭлемент,);
				Иначе
					счетчик=счетчик+1;
				КонецЕсли;
			Иначе
				счетчик=3;
			КонецЕсли;
			Если счетчик=3 Тогда
				флКонецЦикла=1;
			КонецЕсли;	
			
		КонецЦикла;
		
		Если счетчик=3 Тогда
			СтатусВозврата(0);
			ЗавершитьРаботуСистемы(0);
		КонецЕсли;	

	КонецЕсли;	

	Если (НазваниеИнтерфейса() = "Интерфейс_БригадирКулинарии") ИЛИ (семЕстьПраво("Внешний отчет","Показать незакрытые ож.поставки","Открывать при запуске")=1) Тогда
		ОткрытьФорму("Обработка",,КаталогИБ()+"\ExtForms\обрпоказатьожпоставки.ert");
	КонецЕсли;		
		
	Если ИмяПользователя() = "РегламентныеОперации" Тогда
		Путь = КаталогИБ() + "ExtForms\Служеб\УдалениеИсторииПечатиЗаявок.ert";
		ОткрытьФорму( "Отчет",, Путь );
		
		Путь = КаталогИБ() + "ExtForms\Служеб\ЗаполнениеТаблицыДинамикиОстатков.ert";
		ОткрытьФорму( "Отчет",, Путь );

		Путь = КаталогИБ() + "ExtForms\Служеб\АнализОстатковТоваровДляПополненияСклада.ert";
		ОткрытьФорму( "Отчет",, Путь );

		Путь = КаталогИБ() + "ExtForms\Служеб\УдалениеИсторииБлокнота.ert";
		ОткрытьФорму( "Отчет",, Путь );
		
		Путь = КаталогИБ() + "ExtForms\Служеб\АрхивацияКонтрагентов.ert";
		ОткрытьФорму( "Отчет",, Путь );

		Путь = КаталогИБ() + "ExtForms\Служеб\НоменклатураОбработка.ert";
		ОткрытьФорму( "Отчет",, Путь );

		Путь = КаталогИБ() + "ExtForms\Служеб\РегламентныеПроцедуры.ert";
		ОткрытьФорму( "Отчет",, Путь );
		
		Путь = КаталогИБ() + "ExtForms\Служеб\ПоискИснятиеГалокЗакрытьЗаказВПриходном.ert";
		спПарам = СоздатьОбъект( "СписокЗначений" );
		спПарам.Установить("ПоискНеЗакрытыхНакладных","Да");
		ОткрытьФорму( "Отчет",спПарам, Путь );

		
		СтатусВозврата(0);
	КонецЕсли;
	
	Если (НазваниеИнтерфейса()="ЦехПереработкиМаркировщик") Тогда
		ОткрытьФорму("Обработка",,КаталогИБ()+"\ExtForms\ПечатьНаклеекGastronome.ert");
	ИначеЕсли (НазваниеНабораПрав()="Комплектовщик")Тогда
		ОткрытьФорму("Обработка",,КаталогИБ()+"\ExtForms\ПечатьНаклеек.ert");
	ИначеЕсли (НазваниеИнтерфейса()="ЦехПереработкиКомплектовщик") Тогда
//		ОткрытьФорму("Обработка",,КаталогИБ()+"\ExtForms\ПечатьНаклеекCeh.ert");
	КонецЕсли;

	
	Если ПустоеЗначение(РозничныйТорговыйСклад)=0 Тогда
		Если (ПустоеЗначение(РозничныйТорговыйСклад.МестоКомплектации)=0) И (семЕстьПраво("Обработка","Печать заявок","Открывать при запуске")=1) Тогда
			ОткрытьФорму("Обработка",,КаталогИБ()+"\ExtForms\ПечатьЗаявок.ert");
		КонецЕсли;
	КонецЕсли;

	
	гБазаФирмыOLE = "";
	//подключениек ОЛЕ базы 1С другой фирмы
	Если (Пользователь.ОсновнаяФирма<>Константа.ОсновнаяФирма) Тогда
		//подключаемся к базе оригинальной для полной картины по взаиморасчетам
		Если ПустоеЗначение(Пользователь.ОсновнаяФирма.КаталогКонфигурации)=0 Тогда
			ПутьКонфигурации = """" + КаталогПрограммы() + """" + " enterprise /D" + СокрЛП(Пользователь.ОсновнаяФирма.КаталогКонфигурации) +  "\ /NOLE /Poletransfe";
			гБазаФирмыOLE = СоздатьОбъект("V77S.Application");
			гБазаФирмыOLE .Initialize(гБазаФирмыOLE.RMTrade, ПутьКонфигурации, "NO_SPLASH_SHOW");
		КонецЕсли;
	КонецЕсли;
	
	семОбслуживаниеСОМпорта( "Открыть" );
	
	
	// по вторникам и пятницам
	Если (НомерДняНедели(ТекущаяДата())=2) или (НомерДняНедели(ТекущаяДата())=5) Тогда
		РС=СоздатьОбъект("ODBCRecordSet");
		РС.УстБД1С();
		ТекстЗапроса="SELECT DISTINCT $Контрагенты.Агент [Агент $Справочник.Сотрудники]
		|	, Пользователи.ID [ПользователиСсылка $Справочник.Пользователи]
		|FROM $Справочник.Контрагенты AS Контрагенты (NOLOCK)
		|	INNER JOIN $Справочник.Пользователи AS Пользователи (NOLOCK) ON $Контрагенты.Агент = $Пользователи.Сотрудник
		|	INNER JOIN $Справочник.Сотрудники Сотрудники (NOLOCK) ON $Пользователи.АгентФильтр = Сотрудники.ID AND $Сотрудники.Агент=1
		|WHERE ($Контрагенты.Агент <> $ПустойИд)
		|	AND (Пользователи.ID = :ВыбПольз)
		|ORDER BY $Контрагенты.Агент";
		РС.УстановитьТекстовыйПараметр("ВыбПольз",Пользователь);
		ТабАгентов=РС.ВыполнитьИнструкцию(ТекстЗапроса);
		Если ТабАгентов.КоличествоСтрок() > 0 Тогда
			ПользовательЯвляетсяАгентом=1;
		КонецЕсли;
		Если ПользовательЯвляетсяАгентом=1 Тогда
			sid_СоздатьНапоминание(ТекущаяДата(),"ОтчетКлиентыАгентов","Сегодня, до 16.00 необходимо заполнить отчет 'Клиенты агентов – Отчет по задолженности клиентов' ");
		КонецЕсли;
	КонецЕсли;
//	ЗаголовокСистемы(Лев(глФирма.Наименование,6)+"-"+Пользователь.Код+"");
	ЗаголовокСистемы(Шаблон("[глФирма.Страна.Код] ([Константа.БазоваяВалюта]) - [Пользователь.Код]"));
	
	
	Если Найти(НазваниеИнтерфейса(),"Продаж")>0 Тогда
		ОткрытьФорму("Журнал.Счета.ФормаСписка");
	КонецЕсли;

	//запускаем отчеты
	Если Найти(ВРЕГ(НазваниеИнтерфейса()),"HORECA")>0 Тогда

		ДатаЗапуска=ВосстановитьЗначение("ДатаЗапускаОтчетаПоКлиентамАгентовБезЗаявок");
                                  
		Если НачНедели(ДатаЗапуска)<НачНедели(РабочаяДата()) Тогда
//			Если НомерДняНедели(РабочаяДата())=1 Тогда //вызываем только по понедельникам
				Путь = КаталогИБ() + "ExtForms\ОтчетПоКлиентамАгентовБезЗаявок.ert";
				СписокПараметров=СоздатьОбъект("СписокЗначений");
				СписокПараметров.ДобавитьЗначение(1,"Авто");
				ОткрытьФорму( "Отчет",СписокПараметров, Путь );
//			КонецЕсли;
   		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриНачалеРаботыСистемы() Экспорт
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	//**************************************************************************
	//**************************************************************************
	ИнициализацияМОД();
	
	стар_ПриНачалеРаботыСистемы();
КонецПроцедуры                  


Процедура ПриЗавершенииРаботыСистемы()

	Если Вопрос("Закончить работу с программой?", "Да+Нет", 10)="Нет" Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	семОбслуживаниеСОМпорта( "Закрыть" );

	Если (ТипЗначенияСтр(гБазаФирмыOLE)="OLE") Тогда
		Попытка
			гБазаФирмыOLE.ExecuteBatch("ЗавершитьРаботуСистемы(0);");
		Исключение
		КонецПопытки;
	КонецЕсли;
	//++SoftPoint++
	Если глЕстьЛицензияБлокировок=1 Тогда
		ГибкиеБлокировки.БлокировкаПоСхеме("Финиш",34);
		Попытка
			ГибкиеБлокировки.РазрегистрироватьПользователя();
		Исключение
		КонецПопытки;
		ТекЗначение=ГибкиеБлокировки.МаксУникальныйНомер();
		//--Сохранение значения константы УникальныйIDD (SoftPoint)
		Если ТекЗначение>0 Тогда
			Попытка
				Константа.УникальныйIDD=ТекЗначение;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	

	//--SoftPoint--
КонецПроцедуры


//Конец текста, вставленного Инсталлятором МОД

//Общепит
// Производит погашение партии товаров по выбранному методу списания при проведении
// документов Марочный отчет и Перемещение на склад готовой продукции
Функция ПогашениеПартииИнгредиентов(Конт,ТипУчета,ЗнакДок,ТоварРП,КолвоРП,ВидСписанияБлюда,ВидПроведения="Обычный",СписокСумм=0,СписокПартий=0,СписокТоваров=0,СписокСтоим=0,СписокНДС=0)  Экспорт
	
	Если ТипЗначения(СписокСумм)=0 Тогда
		СписокСумм=СоздатьОбъект("СписокЗначений");
	КонецЕсли;
	Если ТипЗначения(СписокПартий)=0 Тогда
		СписокПартий=СоздатьОбъект("СписокЗначений");
	КонецЕсли;
	Если ТипЗначения(СписокТоваров)=0 Тогда
		СписокТоваров=СоздатьОбъект("СписокЗначений");
	КонецЕсли;
	Если ТипЗначения(СписокСтоим)=0 Тогда
		СписокСтоим=СоздатьОбъект("СписокЗначений");
	КонецЕсли;
	Если ТипЗначения(СписокНДС)=0 Тогда
		СписокНДС=СоздатьОбъект("СписокЗначений");
	КонецЕсли;
	
	РегДвиж=Конт.Регистр.ПартииТоваров;
	Конт.Фирма.ИспользоватьДату(Конт.ДатаДок);
	
	
	Если (ТипУчета="Упр") Тогда
		Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета.Выбран()=0 Тогда
			Возврат 0; // учет Упр. не ведется
		КонецЕсли;
		РегДвиж.Фирма=Конт.Фирма;
	ИначеЕсли (ТипУчета="Фин") Тогда
		Если Конт.Фирма.МетодРасчетаСебестоимостиФинансовогоУчета.Выбран()=0 Тогда
			Возврат 0; // учет Фин. не ведется
		КонецЕсли;
		РегДвиж.Фирма=Конт.Фирма;
	Иначе
		Сообщить("Неверно задан тип учета партий товаров по "+Конт.ТекущийДокумент());
		Возврат 1;
	КонецЕсли;
	
	// склпарт
	Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
		РегДвиж.Склад=Конт.Склад;
	Иначе
		РегДвиж.Склад="";
	КонецЕсли;
	
	//-- -- -- --
	
	РегДвиж.ОстатокТовара=0;
	РегДвиж.Стоимость=0;
	РегДвиж.ПродСтоимость=0;
	РегДвиж.НДС=0;
	РегДвиж.Оборот=0;
	РегДвиж.НП=0;
	РегДвиж.НДСрасхода=0;
	РегДвиж.НДСприхода=0;
	
	ДокВОбработке=Конт.ТекущийДокумент();
	Если Конт.Вид()<>"ПеремещениеНаСкладГотовойПродукции" Тогда
		Если ТипУчета="Упр" Тогда
			ДДЦена=Пересчет(Конт.Цена,Конт.Валюта,Конт.Курс,Конт.Товар.ВалютаУчета,Конт.Дата_Курса);
		Иначе
			ДДЦена=Пересчет(Конт.Цена,Конт.Валюта,Конт.Курс,Рубли,Конт.ДатаДок);
		КонецЕсли;
		Если  ((Конт.Вид()="МарочныйОтчет") Или (Конт.Вид()="РасходнаяНакладная")) Тогда
			Если ТипУчета="Упр" Тогда
				ДДНП=Пересчет(Конт.СуммаНП/Конт.Количество,Конт.Валюта,Конт.Курс,Конт.Товар.ВалютаУчета,Конт.Дата_Курса);
			Иначе
				ДДНП=Пересчет(Конт.СуммаНП/Конт.Количество,Конт.Валюта,Конт.Курс,Рубли,Конт.ДатаДок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Клиент=КлиентДок(Конт);
	
	
	// В зависимости от ТипУчета в измерении Фирма будут разные значения
	Если ТипУчета="Фин" Тогда
		ПромФирма=Конт.Фирма;
	Иначе
		ПромФирма=Конт.Фирма;
	КонецЕсли;
	
	// склпарт
	Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
		ПромСклад=Конт.Склад;
	Иначе
		ПромСклад=СоздатьОбъект("Справочник.МестаХранения");
	КонецЕсли;
	
	
	
	Товар=ТоварРП;
	Курс=КурсДок(Конт);
	ДатаКурса=ДатаКурсаДок(Конт);
	ВалютаУчета=?(ТипУчета="Упр",Товар.ВалютаУчета,Рубли);
	
	Если (ДокВОбработке.Вид()="Списание") или (ДокВОбработке.Вид()="СличительнаяВедомость") или (ДокВОбработке.Вид()="ПеремещениеНаСкладГотовойПродукции") Тогда
		Валюта=ВалютаУчета;
	Иначе
		Валюта=Конт.Валюта;
	КонецЕсли;
	
	// Определяем Количество по документу
	Колво=КОЛВОРП;
	РегДвиж.ПривязыватьСтроку(Конт.НомерСтроки);
	РегДвиж.Товар=Товар;
	СтоимостьПартии=0;
	НДСПартии=0;
	ПродСтоимостьПартии=0;
	Если ЗнакДок=1 Тогда  // Погашаем по партиям только расходные документы, а приходные пусть сразу образуют партии
		Партии=СоздатьОбъект("СписокЗначений");
		СтатусПартии=СоздатьОбъект("СписокЗначений");
		КонтрагентПартии=СоздатьОбъект("СписокЗначений");
		СтоимостьПартии=СоздатьОбъект("СписокЗначений");
		ПродСтоимостьПартии=СоздатьОбъект("СписокЗначений");
		НДСПартии=СоздатьОбъект("СписокЗначений");
		ОстатокПартии=СоздатьОбъект("СписокЗначений");
		Рег=СоздатьОбъект("Регистр.ПартииТоваров");
		
		// Установим фильтрацию партий товаров
		Если ВидПроведения="Консигнация" Тогда
			// в этом специальном режиме мы учитываем отданный на реализацию товар
			Рег.УстановитьФильтр(ПромФирма,Товар,Отданный,Клиент,);
		Иначе
			Если ДокВОбработке.Вид()="РасходнаяРеализатора" Тогда
				
			ИначеЕсли ДокВОбработке.Вид()="ПриходнаяРеализатора" Тогда
				
			ИначеЕсли ДокВОбработке.Вид()="ВводОстатковРеализации" Тогда
				
			ИначеЕсли ДокВОбработке.Вид()="ПриходнаяНакладная" Тогда
				
			ИначеЕсли ДокВОбработке.Вид()="Списание" Тогда
				// Списываем из партий этим документом только Купленный товар
				Рег.УстановитьФильтр(ПромФирма,Товар,Купленный,,,ПромСклад);
			ИначеЕсли ДокВОбработке.Вид()="ВводОстатковТоваров" Тогда
				
			Иначе
				// по другим документам используем партии Купленный и Принятый товар (Отданный отфильтровывается ниже)
				Рег.УстановитьФильтр(ПромФирма,Товар,,,,ПромСклад);
			КонецЕсли;
		КонецЕсли;
		
		Рег.ВыбратьИтоги();
		Пока Рег.ПолучитьИтог()>0 Цикл
			Если ВидПроведения="Обычный" Тогда
				Если Рег.Статус=Отданный Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если Рег.ОстатокТовара=0 Тогда
				Продолжить;
			КонецЕсли;
			Партия=Рег.ПрихДокумент;
			Если Партия.Выбран()=1 Тогда
				ПозицияПартии=ПозицияДокумента(Партия);
				
			Иначе
				ПозицияПартии=Число(Строка(Число('01.01.80'))+"000000");
			КонецЕсли;
			Если СравнитьДокументы(ПозицияПартии,ДокВОбработке)=1 Тогда
				Продолжить; // т.е. будем погашать партии, которые пришли раньше проводимого докумнета
			КонецЕсли;
			
			НайденныйОстатокПартии=Рег.ОстатокТовара;
			НайденнаяПродСебестоимостьПартии=Рег.ПродСтоимость/НайденныйОстатокПартии;
			НайденнаяСебестоимостьПартии=Рег.Стоимость/НайденныйОстатокПартии;
			НайденнаяНДСПартии=Рег.НДС/НайденныйОстатокПартии;
			
			Если Партия.Выбран()=1 Тогда
				
				Если Партия<>ДокВОбработке Тогда
					Если РежимПогашения(ЗнакУчета(Партия,,ВидПроведения),ДокВОбработке,,ВидПроведения)="Зачет" Тогда
						// пропускаем документы на Зачет, т.к. по FIFO/LIFO нам надо только погашать!
						Продолжить;
					КонецЕсли;
				Иначе
					// т.е. перепроводим документ, который уже сидит в регистре как кредитный документ
					// значит тогда его надо по новой на это же место ставить (лечить)
					
					РегДвиж.Статус=Рег.Статус;
					РегДвиж.Контрагент=Рег.Контрагент;
					
					
					ИсполнитьПогашениеТовМО(ВидСписанияБлюда,РегДвиж,ТипУчета,Партия,Конт,НайденнаяСебестоимостьПартии,НайденныйОстатокПартии,НайденнаяПродСебестоимостьПартии,НайденнаяНДСПартии,Колво,СписокСумм,СписокПартий,СписокТоваров,СписокСтоим,СписокНДС,,ВидПроведения);
					
					Если Колво=0 Тогда
						Прервать;
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Купленные товары продаем вперед взятых на реализацию
			Если (ТипУчета="Упр") Тогда
				Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO Тогда
					// НаправлениеСортировки по убыванию
					СтратегияПродажи=?(Рег.Статус=Купленный,"2","1");
				Иначе
					// НаправлениеСортировки по возрастанию
					СтратегияПродажи=?(Рег.Статус=Купленный,"1","2");
				КонецЕсли;
			ИначеЕсли (ТипУчета="Фин") Тогда
				Если Конт.Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO Тогда
					// НаправлениеСортировки по убыванию
					СтратегияПродажи=?(Рег.Статус=Купленный,"2","1");
				Иначе
					// НаправлениеСортировки по возрастанию
					СтратегияПродажи=?(Рег.Статус=Купленный,"1","2");
				КонецЕсли;
			КонецЕсли;
			
			ПозицияСоСтратегией=СтратегияПродажи+Строка(ПозицияПартии);
			Партии.ДобавитьЗначение(Партия,ПозицияСоСтратегией);
			СтатусПартии.ДобавитьЗначение(Рег.Статус,ПозицияСоСтратегией);
			КонтрагентПартии.ДобавитьЗначение(Рег.Контрагент,ПозицияСоСтратегией);
			СтоимостьПартии.ДобавитьЗначение(НайденнаяСебестоимостьПартии,ПозицияСоСтратегией);
			ПродСтоимостьПартии.ДобавитьЗначение(НайденнаяПродСебестоимостьПартии,ПозицияСоСтратегией);
			ОстатокПартии.ДобавитьЗначение(НайденныйОстатокПартии,ПозицияСоСтратегией);
			НДСПартии.ДобавитьЗначение(НайденнаяНДСПартии,ПозицияСоСтратегией);
		КонецЦикла;
		
		// теперь в списках собраны все Документы по ПартииТоваров
		// надо погашать по ФИФО или ЛИФО (в зависимости от Константы).
		// если метод расчета себестоимости - ПоСреднему, то оставшиеся в системе
		// (например оставшиеся в наследство от учета по FIFO или ЛИФО, после переключения с него на метод ПоСреднему)
		// тоже погашаются по FIFO.
		
		РазмСпискаПартии=Партии.РазмерСписка();
		Если РазмСпискаПартии>1 Тогда
			
			Если (ТипУчета="Упр") Тогда
				Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO Тогда
					НаправлениеСортировки=1;// по убыванию
				Иначе
					НаправлениеСортировки=0;// по возрастанию
				КонецЕсли;
			ИначеЕсли (ТипУчета="Фин") Тогда
				Если Конт.Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO Тогда
					НаправлениеСортировки=1;// по убыванию
				Иначе
					НаправлениеСортировки=0;// по возрастанию
				КонецЕсли;
			КонецЕсли;
			Партии.СортироватьПоПредставлению(НаправлениеСортировки);
			СтатусПартии.СортироватьПоПредставлению(НаправлениеСортировки);
			КонтрагентПартии.СортироватьПоПредставлению(НаправлениеСортировки);
			СтоимостьПартии.СортироватьПоПредставлению(НаправлениеСортировки);
			ПродСтоимостьПартии.СортироватьПоПредставлению(НаправлениеСортировки);
			ОстатокПартии.СортироватьПоПредставлению(НаправлениеСортировки);
			НДСПартии.СортироватьПоПредставлению(НаправлениеСортировки);
		КонецЕсли;
		
		// а теперь надо погашать документы Партий
		Для ИндДвиж=1 По РазмСпискаПартии Цикл
			Партия=Партии.ПолучитьЗначение(ИндДвиж);
			Статус=СтатусПартии.ПолучитьЗначение(ИндДвиж);
			Контрагент=КонтрагентПартии.ПолучитьЗначение(ИндДвиж);
			НайденнаяСебестоимостьПартии=СтоимостьПартии.ПолучитьЗначение(ИндДвиж);
			НайденныйОстатокПартии=ОстатокПартии.ПолучитьЗначение(ИндДвиж);
			НайденнаяНДСПартии=НДСПартии.ПолучитьЗначение(ИндДвиж);
			НайденнаяПродСебестоимостьПартии=ПродСтоимостьПартии.ПолучитьЗначение(ИндДвиж);
			
			РегДвиж.Статус=Статус;
			РегДвиж.Контрагент=Контрагент;
			//  погашение
			ИсполнитьПогашениеТовМО(ВидСписанияБлюда,РегДвиж,ТипУчета,Партия,Конт,НайденнаяСебестоимостьПартии,НайденныйОстатокПартии,НайденнаяПродСебестоимостьПартии,НайденнаяНДСПартии,Колво,СписокСумм,СписокПартий,СписокТоваров,СписокСтоим,СписокНДС,,ВидПроведения);
			
			Если Колво=0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	//-------------------------------------------------
	
	
	Если Колво<>0 Тогда
		// если после всей этой операции осталась кое что в Колво,
		// а Партии, которые надо погашать исчерпаны,
		// то надо выдать сообщение об этом и записать текущий документ как Партию с отриц. знаком
		РегДвиж.ОстатокТовара=Колво;
		
		Если ЗнакДок=1 Тогда
			
			
			// значит мы расходуем товар
			Сообщить ("При проведении партий товара по "+ДокВОбработке+" от "+Конт.ДатаДок+" по товару "
			+СокрЛП(Товар)+" не распределилось по партиям "+Колво+" "+Товар.БазоваяЕдиницаИзмерения);
			
			// Здесь мы стоимости и НДС не знаем
			//РегДвиж.Стоимость=0;
			РегДвиж.ПродСтоимость=0;
			//РегДвиж.НДС=0;
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			Если глЕстьРеквизитШапки("СтавкаНДС", Конт.Вид()) = 0 Тогда
				ПроцНДС=ПроцентНДС(Товар.СтавкаНДС);
			Иначе
				ПроцНДС=ПроцентНДС(Конт.СтавкаНДС);
			КонецЕсли;
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			ПромСум_=Колво*Товар.ЦенаПриобретения;
			ПромНДС_=ПромСум_*(ПроцНДС/(100+ПроцНДС));
			ПромВал=Товар.ВалютаЗакупки;
			РегДвиж.Стоимость=Пересчет(ПромСум_-ПромНДС_,ПромВал,Курс,ВалютаУчета,ДатаКурса);
			РегДвиж.НДС=Пересчет(ПромНДС_,ПромВал,Курс,ВалютаУчета,ДатаКурса);
			//-------------------
			СтоимостьБлюда=СтоимостьБлюда+ПромСум_-ПромНДС_;
			Если (ТипУчета="Упр") тогда
				СтоимостьБлюдаУпр=СтоимостьБлюдаУпр+(ПромСум_-ПромНДС_);
				НДСБлюдаУпр=НДСБлюдаУпр+ПромНДС_;
			ИначеЕсли  (ТипУчета="Фин") Тогда
				СтоимостьБлюдаФин=СтоимостьБлюдаФин+(ПромСум_-ПромНДС_);
				НДСБлюдаФин=НДСБлюдаФин+ПромНДС_;
				ФинСтоимостьИнгр=ФинСтоимостьИнгр+(ПромСум_-ПромНДС_);
				ФинНДСИнгр=ФинНДСИнгр+ПромНДС_;
			КонецЕсли;
			//-------------------
			//  ВидСписанияБлюда
			Если (ВидСписанияБлюда="Продажа") Тогда
				РегДвиж.Оборот=Пересчет(Конт.Цена*Колво,Валюта,Курс,ВалютаУчета,ДатаКурса);
				РегДвиж.НП=Пересчет(Конт.суммаНП/Конт.Количество*Колво,Валюта,Курс,ВалютаУчета,ДатаКурса);
				РегДвиж.НДСрасхода=Пересчет(Конт.НДС*Колво/(Конт.Количество*Конт.Коэффициент),Валюта,Курс,ВалютаУчета,ДатаКурса);
				РегДвиж.НДСприхода=0;  // НДСприхода в этом случае не знаем!!!
				// РегДвиж.КодОперации="П";
			КонецЕсли;
			
			Если ВидПроведения="Консигнация" Тогда
				РегДвиж.Статус=Отданный;
				РегДвиж.Контрагент=Клиент;
			Иначе
				Если  ДокВОбработке.Вид()="РасходнаяРеализатора" Тогда
					РегДвиж.Контрагент=Клиент;
					Если ДокВОбработке.ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа Тогда
						РегДвиж.Статус=Купленный;
					Иначе
						РегДвиж.Статус=Принятый;
					КонецЕсли;
				Иначе
					РегДвиж.Контрагент=""; // при создании Партии по расходу Контрагент (т.е. чей это товар) неизвестен
					//{{MRG[ <-- ]
					//
					//}}MRG[ <-- ]
					РегДвиж.Статус=""; // это неизвестный Статус создаваемой партии
				КонецЕсли;
			КонецЕсли;
		Иначе//Если ЗнакУчета(ДокВОбработке,ВидТовара)=-1 Тогда
			// значит мы приходуем товар
			РегДвиж.Стоимость=СтоимостьПартии;
			//РегДвиж.ПродСтоимость=ПродСтоимостьПартии;
			РегДвиж.ПродСтоимость = 0;
			РегДвиж.НДС=НДСПартии;
			
			Если  ДокВОбработке.Вид()="ПриходнаяНакладная" Тогда
				Если ДокВОбработке.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя Тогда
					// возвращаем от покупателя Купленный товар (сторнируем оборот и НДСрасхода)
					РегДвиж.Оборот=-Пересчет(Конт.Цена*Колво,Валюта,Курс,ВалютаУчета,ДатаКурса);
					//{{MRG[ --> ]
					//???РегДвиж.НП=-Пересчет(Конт.СуммаНП/Конт.Количество*Колво,Валюта,Курс,ВалютаУчета,ДатаКурса);
					//}}MRG[ --> ]
					РегДвиж.НДСрасхода=-Пересчет(Конт.НДС*Колво/(Конт.Количество*Конт.Коэффициент),Валюта,Курс,ВалютаУчета,ДатаКурса);
					//{{MRG[ --> ]
					//                        РегДвиж.НДСприхода=-НайденнаяНДСПартии*Колво;
					//                        РегДвиж.НДСприхода=-НДСПартии*Колво;
					//}}MRG[ --> ]
					РегДвиж.НДСприхода=-НДСПартии;
				КонецЕсли;
			КонецЕсли;
			Если ВидПроведения="Консигнация" Тогда
				РегДвиж.Статус=Отданный;
			Иначе
				Если  ДокВОбработке.Вид()="ПриходнаяРеализатора" Тогда
					Если ДокВОбработке.ПризнакНакладной=Перечисление.ПризнПрихНакл.Закупка Тогда
						// на реализацию принимаем в партии Принятый товар
						РегДвиж.Статус=Принятый;
					Иначе
						// возвращаем от покупателя (по реализации) в партии Купленный товар
						РегДвиж.Статус=Купленный;
					КонецЕсли;
				ИначеЕсли ДокВОбработке.Вид()="ВводОстатковРеализации" Тогда
					РегДвиж.Статус=Принятый;
				Иначе
					// по другим документам используем партии Купленный
					РегДвиж.Статус=Купленный;
				КонецЕсли;
			КонецЕсли;
			Если (РегДвиж.Статус=Купленный) Тогда
				Если (ТипУчета="Упр") Тогда
					Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда
						РегДвиж.Контрагент="";
					Иначе
						РегДвиж.Контрагент=Клиент;
					КонецЕсли;
				ИначеЕсли (ТипУчета="Фин") Тогда
					Если Конт.Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда
						РегДвиж.Контрагент="";
					Иначе
						РегДвиж.Контрагент=Клиент;
					КонецЕсли;
				КонецЕсли;
			Иначе
				РегДвиж.Контрагент=Клиент;
			КонецЕсли;
		КонецЕсли;
		
		Если (ТипУчета="Упр") Тогда
			Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда
				//{{MRG[ <-> ]
				//                РегДвиж.ПрихДокумент=?(((РегДвиж.Статус=Купленный) или (РегДвиж.Статус="")),"",ДокВОбработке);
				//}}MRG[ <-> ]
				//{{MRG[ <-> ]
				РегДвиж.ПрихДокумент=?(РегДвиж.Статус=Купленный,"",ДокВОбработке);
				//}}MRG[ <-> ]
			Иначе
				РегДвиж.ПрихДокумент=ДокВОбработке;
			КонецЕсли;
		ИначеЕсли (ТипУчета="Фин") Тогда
			Если Конт.Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда
				//{{MRG[ <-> ]
				//                РегДвиж.ПрихДокумент=?(((РегДвиж.Статус=Купленный) или (РегДвиж.Статус="")),"",ДокВОбработке);
				//}}MRG[ <-> ]
				//{{MRG[ <-> ]
				РегДвиж.ПрихДокумент=?(РегДвиж.Статус=Купленный,"",ДокВОбработке);
				//}}MRG[ <-> ]
			Иначе
				РегДвиж.ПрихДокумент=ДокВОбработке;
			КонецЕсли;
		КонецЕсли;
		РегДвиж.КодОперации=СписаниеНаПроизводcтвоБлюда;
		Если (ВидСписанияБлюда="Продажа") Тогда
			РегДвиж.КодОперации=ПродажаТовара;
		КонецЕсли;
		
		Если ЗнакДок=1 Тогда
			РегДвиж.ДвижениеРасходВыполнить();
			//{{MRG[ <-- ]
			//
			//}}MRG[ <-- ]
		Иначе
			//{{MRG[ <-- ]
			//}}MRG[ <-- ]
			РегДвиж.ДвижениеПриходВыполнить();
		КонецЕсли;
	КонецЕсли;
	//    КонецЦикла;
	РегП=0;
	Возврат 0;
КонецФункции

// Общепит:
// Вызывает движение регистра Партии по блюдам в Марочных отчетах
// и Перемещениях на склад готовой продукции
//
Функция ПриходРасходПартииБлюда(Конт,ТипУчета,ТоварПРБ,КолвоПРБ,ВидСПБлюда,ВидПроведения="Обычный",СписокСумм=0,СписокПартий=0,СписокТоваров=0,СписокСтоим=0,СписокНДС=0)  Экспорт
	РегДвиж=Конт.Регистр.ПартииТоваров;
	Конт.Фирма.ИспользоватьДату(Конт.ДатаДок);
	Если (ТипУчета="Упр") Тогда
		Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета.Выбран()=0 Тогда
			Возврат 0; // учет Упр. не ведется
		КонецЕсли;
		РегДвиж.Фирма=Конт.ФирмаСо;
	ИначеЕсли (ТипУчета="Фин") Тогда
		Если Конт.Фирма.МетодРасчетаСебестоимостиФинансовогоУчета.Выбран()=0 Тогда
			Возврат 0; // учет Фин. не ведется
		КонецЕсли;
		РегДвиж.Фирма=Конт.Фирма;
	Иначе
		Сообщить("Неверно задан тип учета партий товаров по "+Конт.ТекущийДокумент());
		Возврат 1;
	КонецЕсли;
	
	// склпарт
	Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
		РегДвиж.Склад=Конт.Склад;
	Иначе
		РегДвиж.Склад="";
	КонецЕсли;
	
	
	РегДвиж.Товар=ТоварПРБ;
	РегДвиж.ОстатокТовара=КолвоПРБ;
	Если (ТипУчета="Упр") тогда
		РегДвиж.Стоимость=СтоимостьБлюдаУпр;
	ИначеЕсли  (ТипУчета="Фин") Тогда
		РегДвиж.Стоимость=СтоимостьБлюдаФин;
	КонецЕсли;
	РегДвиж.ПродСтоимость=0;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Если глЕстьРеквизитШапки("СтавкаНДС", Конт.Вид()) = 0 Тогда
		ПроцНДС=ПроцентНДС(ТоварПРБ.СтавкаНДС);
	Иначе
		ПроцНДС=ПроцентНДС(Конт.СтавкаНДС);
	КонецЕсли;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	РегДвиж.Контрагент="";
	//    РегДвиж.НДС=РегДвиж.Стоимость*ПроцНДС/(100);
	Если (ТипУчета="Упр") тогда
		РегДвиж.НДС=НДСБлюдаУпр;
	ИначеЕсли  (ТипУчета="Фин") Тогда
		РегДвиж.НДС=НДСБлюдаФин;
	КонецЕсли;
	РегДвиж.Оборот=0;
	РегДвиж.НП=0;
	РегДвиж.НДСрасхода=0;
	РегДвиж.НДСприхода=0;
	//Произведен
	РегДвиж.Статус=Произведенный;
	Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда
		РегДвиж.ПрихДокумент="";
	Иначе
		РегДвиж.ПрихДокумент=Конт.ТекущийДокумент();
	КонецЕсли;
	//{{MRG[ <-- ]
	//    Если ((Конт.Вид()="ПеремещениеНаСкладГотовойПродукции") и (ВидСПБлюда="Продажа")) Тогда
	//         РегДвиж.КодОперации="?";  //оперКод
	//    Иначе
	//}}MRG[ <-- ]
	РегДвиж.КодОперации=ПроизводствоБлюда;  //оперКод
	//{{MRG[ <-- ]
	//    КонецЕсли;
	//}}MRG[ <-- ]
	РегДвиж.ДвижениеПриходВыполнить();
	Если (Конт.Вид()<>"ПеремещениеНаСкладГотовойПродукции") Тогда
		Если ВидСПБлюда="Продажа" Тогда
			РегДвиж.Оборот=Пересчет(Конт.Цена*КолвоПрб,Конт.Валюта,Конт.Курс,ТоварПРБ.ВалютаУчета,Конт.Дата_Курса);
			РегДвиж.НП=Пересчет(Конт.СуммаНП/Конт.Количество*КолвоПрб,Конт.Валюта,Конт.Курс,ТоварПРБ.ВалютаУчета,Конт.Дата_Курса);
			//    РегДвиж.НДСрасхода=РегДвиж.Оборот*ПроцНДС/(100+ПроцНДС);//Пересчет(Конт.НДС*КолвоПРБ/Конт.Количество*Конт.Коэффициент,Конт.Валюта,Конт.Курс,ТоварПРБ.ВалютаУчета,Конт.Дата_Курса);
			РегДвиж.НДСРасхода=Пересчет(Конт.НДС/Конт.Количество*КолвоПрб,Конт.Валюта,Конт.Курс,ТоварПРБ.ВалютаУчета,Конт.Дата_Курса);
			РегДвиж.НДСприхода=РегДвиж.НДС;
			РегДвиж.КодОперации=ПродажаБлюда;
			РегДвиж.ДвижениеРасходВыполнить();
		ИначеЕсли ВидСПБлюда<>"Продажа" Тогда
			РЕгДвиж.КодОперации=СписаниеНаПроизводcтвоБлюда;
			РегДвиж.ДвижениеРасходВыполнить();
		КонецЕсли;
	Иначе
		Если ВидСПБлюда<>"Продажа" Тогда
			РЕгДвиж.КодОперации=СписаниеНаПроизводcтвоБлюда;
			РегДвиж.ДвижениеРасходВыполнить();
		Иначе
			//    // склады и партии
			//{{MRG[ <-- ]
			//
			//
			//}}MRG[ <-- ]
			РегДвиж.КодОперации="?";
			//{{MRG[ <-- ]
			//
			//}}MRG[ <-- ]
			Регдвиж.ДвижениеРасходВыполнить();
			Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
				РегДвиж.Склад=Конт.СкладКонечный;
			Иначе
				РегДвиж.Склад="";
			КонецЕсли;
			//{{MRG[ <-- ]
			//    Если  Конт.Вид()="ПеремещениеНаСкладГотовойПродукции" Тогда
			//                      РегДвиж.КодОперации=ПроизводствоБлюда;  //оперКод
			//            Иначе
			//                   РегДвиж.КодОперации="?";
			//            КонецЕсли;
			//}}MRG[ <-- ]
			Регдвиж.ДвижениеПриходВыполнить();
		КонецЕсли;
		//
		
		
		//
	КонецЕсли;
	Возврат 0;
КонецФункции
//Общепит
//Для выгрузки проводок
//---------------
//Дополняет передаваемую строку Стр символами Чем до строки длиной Длина
//справа или слева в зависимости от значения переменной Режим  (1-слева, 2-справа)
Функция глДополнитьСтроку(Стр,Чем,Длина,Режим=1) Экспорт
	Добавить=Длина-СтрДлина(Стр);
	Если Добавить>0  Тогда
		Добавок="";
		Для Сч = 1 По Добавить  Цикл
			Добавок=Добавок+Чем
		КонецЦикла;
		Возврат ?(Режим=1,Добавок+Стр,Стр+Добавок);
	Иначе
		Возврат    Стр;
	КонецЕсли;
КонецФункции


//_____________________________________________________________________________
//Находит строку ТЗ по указанным колонкам и их значениям
//Возвращает 1 если строка найдена, и 0 в противном случае
Функция НайтиСтрокуТЗ(ТЗ, КолонкаПоиска, ЗначПоиска, КолонкаПоиска2="", ЗначПоиска2="") Экспорт
    Перем н;
	Если ТЗ.НайтиЗначение(ЗначПоиска, н, КолонкаПоиска)=0 Тогда
		Возврат 0;
	КонецЕсли;
	ТЗ.ПолучитьСтрокуПоНомеру(н);
	Если КолонкаПоиска2="" Тогда Возврат 1; КонецЕсли;
	
	Пока н<=ТЗ.КоличествоСтрок() Цикл
		Если ТЗ.ПолучитьЗначение(н, КолонкаПоиска) = ЗначПоиска Тогда
			Если ТЗ.ПолучитьЗначение(н, КолонкаПоиска2) = ЗначПоиска2 Тогда
				ТЗ.ПолучитьСтрокуПоНомеру(н);
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
		н = н + 1;
	КонецЦикла;
	Возврат 0;
КонецФункции

///******************************** ADirks 16.09.2006
Функция ПовторитьСтроку(Стр, Знач нПовторов) Экспорт
	Рез = "";
	Пока нПовторов > 0 Цикл
		Рез = Рез + Стр;
		нПовторов = нПовторов - 1;
	КонецЦикла;
	Возврат Рез;
КонецФункции
///******************************** ADirks 16.09.2006

///******************************** ADirks 07.08.2006
Функция СтрокуВСписок(_Стр_, Разделитель = ",", ОбрезатьПробелы = 0) Экспорт
	Перем Стр, Поз;
	Перем Сп, Зн;
	
	Сп = СоздатьОбъект("СписокЗначений");
	Стр = СтрЗаменить(_Стр_, Разделитель, РазделительСтрок);
	КоличествоСтрок = СтрКоличествоСтрок(Стр);
	Для н = 1 По КоличествоСтрок Цикл
		Зн = СтрПолучитьСтроку(Стр, н);
		Если ОбрезатьПробелы = 1 Тогда Зн = СокрЛП(Зн); КонецЕсли;
		Сп.ДобавитьЗначение(Зн, Зн);
	КонецЦикла;

	Возврат Сп;
КонецФункции

//---------------
//******************************************************************************
// Возвращает Да или Нет в зависимости от того, является ли документ Док
// документом реализации
Функция глЭтоДокументРеализации(Док)    Экспорт
	Перем ВидДок;
	
	ВидДок = ВРег(Док.Вид());
	
	Если (ВидДок="ПРИХОДНАЯРЕАЛИЗАТОРА")ИЛИ(ВидДок="РАСХОДНАЯРЕАЛИЗАТОРА")ИЛИ(ВидДок="ОТЧЕТРЕАЛИЗАТОРА")
	ИЛИ(ВидДок="ИНВЕНТАРИЗАЦИЯРЕАЛИЗАТОРА")ИЛИ(ВидДок="ВВОДОСТАТКОВРЕАЛИЗАЦИИ") Тогда
		Возврат Да;
	КонецЕсли;
	
	Возврат Нет;
КонецФункции    // глЭтоДокументРеализации

//*****************************************************************************
// Функция возвращает себестоимость отгруженных оплаченных комиссионных товаров
// сделано потому, что  реквизит Неоплаченная стоимость по оплаченной отгрузке
// = 0.
// продажи с НП - сумма этой оплаченной отгрузки в продажных ценах с НП
// текДок - документ отгрузки
// комитент - по какому комитенту
Функция глОплаченнаяСебКомТоваров(ТекДок,Комитент,ПродажисНП) Экспорт
	Если ПустоеЗначение(ТекДок)=1 Тогда
		Возврат(0);
	КонецЕсли;
	РегПартии=СоздатьОбъект("Регистр.ПартииТоваров");
	СебОтгружено=0;//себестоимость отгруженных товаров комитента
	ОплаченныхОтгрузокВсего=0;// всего оплаченных отгрузок в документе
	РегПартии.ВыбратьДвиженияДокумента(ТекДок);
	Пока РегПартии.ПолучитьДвижение()=1 Цикл
		Если ПустоеЗначение(РегПартии.Фирма)=1 Тогда
			Продолжить;// управленческие пропустим
		КонецЕсли;
		Если(РегПартии.КодОперации=ПродажаПринятогоТовара) и
		(РегПартии.Поставщик=Комитент)
		Тогда
			СебОтгружено=СебОтгружено+РегПартии.Стоимость+РегПартии.НДС+РегПартии.СтоимостьНП;
		КонецЕсли;
	КонецЦикла;
	// посчитали сколько отгружено всего, теперь вычтем неоплаченные
	РегПок=СоздатьОбъект("Регистр.ВзаиморасчетыПокупателей");
	РегПок.ВыбратьДвиженияДокумента(ТекДок);
	Пока РегПок.ПолучитьДвижение()=1 Цикл
		Если ПустоеЗначение(РегПок.Фирма)=1 Тогда
			Продолжить;// управленческие пропустим
		КонецЕсли;
		Если((РегПок.КодОперации=НеоплаченнаяОтгрузкаТовараПринятого)) и
		(РегПок.Комитент=Комитент)
		Тогда
			СебОтгружено=СебОтгружено-РегПок.НеоплачСтоимость;
		ИначеЕсли((РегПок.КодОперации=ОтгрузкаОплаченногоТовараПринятого)) и
		(РегПок.Комитент=Комитент)
		Тогда
			ОплаченныхОтгрузокВсего=ОплаченныхОтгрузокВсего+РегПок.Долг;
		КонецЕсли;
	КонецЦикла;
	Возврат ?(ОплаченныхОтгрузокВсего=0,0,(СебОтгружено*ПродажисНП/ОплаченныхОтгрузокВсего));
КонецФункции

//******************************************************************************
Функция глПроверкаИнтервалаОтчета(ДатаНачала,ДатаКонец) Экспорт
	Если ПустоеЗначение(ДатаНачала)=1 Тогда
		Предупреждение("Необходимо задать дату начала отчета!");
		Возврат 0;
	КонецЕсли;
	Если ПустоеЗначение(ДатаКонец)=1 Тогда
		Предупреждение("Необходимо задать дату конца отчета!");
		Возврат 0;
	КонецЕсли;
	Если ДатаКонец<ДатаНачала  Тогда
		Предупреждение("Дата начала отчета должна быть не позже даты конца отчета!");
		Возврат 0;
	КонецЕсли;
	Возврат 1;
КонецФункции                         

//** Для Элементов списка

//***********************************************
//Функия ищет в списке элемент и возвращает 1 в случае вхождения, 0 иначе (аналог "в" в запросе) 
//Создана потому, что запрос постоянно вызывал невосстановимую ошибку базы данных
Функция НайтиВСписке(СписокДляВыбора,ЭлементВыбора) 	//теперь не используется
	Если СписокДляВыбора.РазмерСписка()=0 Тогда
		Возврат 1;
	КонецЕсли;    
	Для А=1 По СписокДляВыбора.РазмерСписка() Цикл
		Зн = СписокДляВыбора.ПолучитьЗначение(А);
		Если Зн.ЭтоГруппа()=1 Тогда
			Если ЭлементВыбора.ПринадлежитГруппе(Зн)=1 Тогда
				Возврат 1;
			КонецЕсли;          
		КонецЕсли;
		Если Зн = ЭлементВыбора Тогда
			Возврат 1;
		КонецЕсли;
	КонецЦикла;
	Возврат 0;
КонецФункции

//*******************************************
Процедура глДобавитьНовый(Куда,ТипОбъекта,Режим) Экспорт
	Спр = СоздатьОбъект(ТипОбъекта);
	Если Куда.РазмерСписка()>0 Тогда
		Спр.НайтиЭлемент(Куда.ПолучитьЗначение(Куда.ТекущаяСтрока()));
	КонецЕсли;
	Результат = 1;
	Пока Результат = 1 Цикл 
		Спр.ВыборГруппы(1);
		выб = Спр.Выбрать("Выбор","ДляВыбора");
		Результат = ?(Режим = 1,0,Мин(Выб,Результат));
		Если Выб = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если (Куда.РазмерСписка()>0) и (НайтиВСписке(Куда,Спр.ТекущийЭлемент())=1) тогда
			Предупреждение("Этот элемент в списке уже есть!!!");
			Продолжить;
		КонецЕсли;
		Куда.ДобавитьЗначение(Спр.ТекущийЭлемент());
		Куда.ТекущаяСтрока(Куда.РазмерСписка());
	КонецЦикла;
КонецПроцедуры
//*******************************************
Процедура глУдалитьСтарый(Откуда,Режим) Экспорт
	Если Откуда.РазмерСписка()=0 Тогда
		Возврат;
	КонецЕсли;
	Если Режим = 2 Тогда
		Откуда.УдалитьВсе();
	Иначе
		НомСтр = Откуда.ТекущаяСтрока(); 
		Откуда.УдалитьЗначение(Откуда.ТекущаяСтрока());
		Если НомСтр>1 Тогда
			Откуда.ТекущаяСтрока(НомСтр-1);
		Иначе
			Если Откуда.РазмерСписка()>0 Тогда
				Откуда.ТекущаяСтрока(1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;		
КонецПроцедуры 

// ******************************************
// процедура для добавления условий в SQL запрос
Процедура глДобавитьФильтр( ODBCRecordSet, пТекст, спУсловий, пИсточник="", пФильтр, пЗнач, пТип,пТабл="" ) Экспорт
	Если ПустоеЗначение(пЗнач) = 1 Тогда Возврат; КонецЕсли;
	пИсточник = ?(ПустаяСтрока(пИсточник) = 0,пИсточник+".","");
	
	Если ТипЗначенияСтр(пЗнач)="Справочник" Тогда
		Если пЗнач.ЭтоГруппа() = 0 Тогда
			пТекст=пТекст+РазделительСтрок+Шаблон(" AND [пИсточник][пФильтр] = :[пФильтр]");
			ODBCRecordSet.УстановитьТекстовыйПараметр(пФильтр, пЗнач);
			Если ТипЗначенияСтр(спУсловий)="СписокЗначений" Тогда
				спУсловий.ДобавитьЗначение(Шаблон("Фильтр ([пФильтр]) по элементу: [пЗнач.Код] [пЗнач]"));
			КонецЕсли;
		Иначе
			пВремТабл="#"+?(пТабл="",пФильтр+"ы",пТабл);
			пТекст=пТекст+РазделительСтрок+Шаблон(" AND [пИсточник][пФильтр] IN (SELECT Val FROM [пВремТабл])");
			ODBCRecordSet.УложитьСписокОбъектов(пЗнач,пВремТабл , пТип );
			Если ТипЗначенияСтр(спУсловий)="СписокЗначений" Тогда
				спУсловий.ДобавитьЗначение(Шаблон("Фильтр ([пФильтр]) по группе: [пЗнач.Код] [пЗнач]"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗначенияСтр(пЗнач)="СписокЗначений" Тогда
		пВремТабл="#"+?(пТабл="",пФильтр+"ы",пТабл);
		пТекст=пТекст+РазделительСтрок+Шаблон(" AND [пИсточник][пФильтр] IN (SELECT Val FROM [пВремТабл])");
		ODBCRecordSet.УложитьСписокОбъектов(пЗнач,пВремТабл , пТип );
		Если (ТипЗначенияСтр(спУсловий)="СписокЗначений") Тогда
			Для н = 1 По пЗнач.РазмерСписка() Цикл
				Значение = пЗнач.ПолучитьЗначение(н);
				Если Значение.ЭтоГруппа() = 0 Тогда
					спУсловий.ДобавитьЗначение(Шаблон("Фильтр ([пФильтр]) по элементу: [Значение.Код] [Значение]"));
				Иначе
					спУсловий.ДобавитьЗначение(Шаблон("Фильтр ([пФильтр]) по группе: [Значение.Код] [Значение]"));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		пТекст=пТекст+РазделительСтрок+Шаблон(" AND [пИсточник][пФильтр] = :[пФильтр]");
		ODBCRecordSet.УстановитьТекстовыйПараметр(пФильтр, пЗнач);
		Если ПустоеЗначение(спУсловий)=0 Тогда
			спУсловий.ДобавитьЗначение(Шаблон("Фильтр ([пФильтр]): [пЗнач]"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//***********************************************************
//<<Алгоритм Успеха>> (begin)
// Процедуры и функции перенесенные из конфигурации Fish
Функция ПеревестиНаГосЯзык(ТекстДляПеревода)  Экспорт
	Если ТекстДляПеревода="Выписанные" Тогда
		Возврат "Izrakst®tўs";
	ИначеЕсли ТекстДляПеревода="Полученные" Тогда
		Возврат "Saґemtўs";
	ИначеЕсли ТекстДляПеревода="СличительнаяВедомость" Тогда
		Возврат "Inventўr. akts";
	ИначеЕсли (ТекстДляПеревода="ЗаказОтПокупателя") Тогда
		Возврат "PasЅt®jums";
	ИначеЕсли (ТекстДляПеревода="ЭлектроннаяЗаявка") ИЛИ (ТекстДляПеревода="Счет") Тогда
		Возврат "Elekt. piepr.";
	ИначеЕсли ТекстДляПеревода="ОбменТовара" Тогда
		Возврат "Apm. veidlapa";
	ИначеЕсли ТекстДляПеревода="РасходнаяНакладнаяНал" Тогда
		Возврат "Izd.Pav";
		//        Возврат "IzdevumuPavad";
	ИначеЕсли ТекстДляПеревода="ПриходнаяНал" Тогда
		Возврат "Ieґ§m.Pav";
		//        Возврат "Ieґ§mumuPavad";
	ИначеЕсли ТекстДляПеревода="РасходнаяНакладная" Тогда
		Возврат "Izd.Kr.";
		//        Возврат "IzdevumuKred";
	ИначеЕсли ТекстДляПеревода="ПриходнаяНакладная" Тогда
		Возврат "Ieґ§m.Kr.";
		//        Возврат "Ieґ§mumuKred";
	ИначеЕсли ТекстДляПеревода="РасходнаяРеализатора" Тогда
		Возврат "Izd.Real.";
		//        Возврат "IzdevumuRealiz";
	ИначеЕсли ТекстДляПеревода="ПриходнаяРеализатора" Тогда
		Возврат "Ieґ§m.Real.";
		//        Возврат "Ieґ§mumuRealiz";
	ИначеЕсли ТекстДляПеревода="ОтчетРеализатора" Тогда
		Возврат "Real.atskaite";
		//        Возврат "IzdevumuRealiz";
	ИначеЕсли ТекстДляПеревода="ВведенныеОстатки" Тогда
		Возврат "Atlikumi";
	ИначеЕсли ТекстДляПеревода="ПриходныйОрдерТБ" Тогда
		Возврат "Ieґ.KO";
		//        Возврат "Ieґ§mumu Kases Orderis";
	ИначеЕсли ТекстДляПеревода="РасходныйОрдерТБ" Тогда
		Возврат "Izd.KO";
		//        Возврат "Izdevumu Kases Orderis";
	ИначеЕсли ТекстДляПеревода="ПриходДенегНаСчет" Тогда
		Возврат "Naud. saґ.";
	ИначеЕсли ТекстДляПеревода="ДвиженияДенежныхСредств" Тогда
		Возврат "Naud. lidz. kust.";
		//        Возврат "Naudas saґemєana uz r§°inu";
	ИначеЕсли (ТекстДляПеревода="ВнутренПеремещение") ИЛИ (ТекстДляПеревода="Перемещение") Тогда
		Возврат "Iekє. transp.";
	ИначеЕсли (ТекстДляПеревода="ПеремещениеДепартамент") Тогда
		Возврат "Ўr§j. transp.";
	ИначеЕсли (ТекстДляПеревода="СписаниеСоСклада") ИЛИ (ТекстДляПеревода="Списание") Тогда
		Возврат "Norakst®єana";
	ИначеЕсли (ТекстДляПеревода="ПродажаЗаНал") ИЛИ (ТекстДляПеревода="ЗаНал") Тогда
		Возврат "Pard.skaidra naudў";
	ИначеЕсли (ТекстДляПеревода="ПродажаЗаБН") ИЛИ (ТекстДляПеревода="ЗаБН") Тогда
		Возврат "Pard.ar pўrskait®jumu";
	ИначеЕсли ТекстДляПеревода="ПродажаКредит" Тогда
		Возврат "Pard.kred®ts";
	ИначеЕсли ТекстДляПеревода="ЗакупкаКредит" Тогда
		Возврат "Iepirk.kred®ts";
	ИначеЕсли ТекстДляПеревода="ЗакупкаЗаБН" Тогда
		Возврат "Iepirk.ar pўrskait®jumu";
	ИначеЕсли ТекстДляПеревода="ЗакупкаЗаНал" Тогда
		Возврат "Iepirk. sk.naudў";
	ИначеЕсли ТекстДляПеревода="ВозвратОтПокупателяЗаБН"Тогда
		Возврат "Atgrieєana";
	ИначеЕсли ТекстДляПеревода="Платежка" Тогда
		Возврат "MU";
	ИначеЕсли ТекстДляПеревода="Платежка" Тогда
		Возврат "MU1";
	ИначеЕсли ТекстДляПеревода="Счет" Тогда
		Возврат "R§°ins";
	ИначеЕсли ТекстДляПеревода="Счет_фактура" Тогда
		Возврат "Fakturr§°ins";
	ИначеЕсли ТекстДляПеревода="Взаимозачеты" Тогда
		Возврат "Ieskait.";
	ИначеЕсли ТекстДляПеревода="ВводОстатковВзаиморасчетов" Тогда
		Возврат "Savst.nor.atl.";
	ИначеЕсли ТекстДляПеревода="ВводОстатковТоваров" Тогда
		Возврат "PreҐu atl.";
	ИначеЕсли ТекстДляПеревода="ВводОстатковКредита" Тогда
		Возврат "Kred®tu atl.";
	ИначеЕсли ТекстДляПеревода="Резервирование" Тогда
		Возврат "Rezerv§єana";
	ИначеЕсли ТекстДляПеревода="АктРазборки" Тогда
		Возврат "Pўrstrўdўєana";
	ИначеЕсли ТекстДляПеревода="МарочныйОтчет" Тогда
		Возврат "Izd.restorўns";
	ИначеЕсли ТекстДляПеревода="ПеремещениеНаСкладГотовойПродукции" Тогда
		Возврат "Izgatavoєana";
	ИначеЕсли ТекстДляПеревода="Пересортица" Тогда
		Возврат "Pўrsort.";
	ИначеЕсли ТекстДляПеревода="ПереоценкаТоваров" Тогда
		Возврат "PreҐu parc.";
	ИначеЕсли ТекстДляПеревода="ПродажаЧерезКассу" Тогда
		Возврат "Pard.caur kasi";
	ИначеЕсли ТекстДляПеревода="УслугиПеревозки" Тогда
		Возврат "Saґemts pakalp.";
	ИначеЕсли ТекстДляПеревода="ПретензияПолученная" Тогда
		Возврат "Neatbilst®bas akts";
	Иначе
		Возврат ТекстДляПеревода;
	КонецЕсли;
КонецФункции
//***************************************************************
//
Функция СформироватьСтрокуСертификатов(Конт) Экспорт
	// Эта процедура формирует строку номеров сертификатов для печатной формы накладной
	// по спецификации докпроверяет спецификацию документа на дубли товара
	//  Объявление вспомогательных массивов
	СписокНомеров=СоздатьОбъект("СписокЗначений");
	Конт.ВыбратьСтроки();
	Пока Конт.ПолучитьСтроку() = 1 Цикл
		Конт.Товар.ИспользоватьДату(Конт.ДатаДок);
		НомСерт=Конт.Товар.Сертификат;
		//        Если Строка(НомСерт)="НеизвестныйОбъект"  Тогда
		//           НомСерт=Конт.Товар.Сертификат.Получить(Конт.ДатаДок);
		//        КонецЕсли;
		Если ПустоеЗначение(НомСерт)=1  Тогда
			Продолжить;
		КонецЕсли;
		//  Проверка номеров на совпадение
		Если СписокНомеров.НайтиЗначение(НомСерт)=0 Тогда
			// такого номера еще нет в списке
			СписокНомеров.ДобавитьЗначение(НомСерт,"");
		КонецЕсли;
	КонецЦикла;
	СписокНомеров.Сортировать();
	КолНом=СписокНомеров.РазмерСписка();
	СтрНомеров="";
	ТекНом=1;
	ТекЗнач="";
	Пока  ТекНом<=КолНом Цикл
		Врем1=СписокНомеров.ПолучитьЗначение(ТекНом,ТекЗнач);
		Если Строка(Врем1)<>"НеизвестныйОбъект" Тогда
			Если ТекНом=1 Тогда
				СтрНомеров=СокрЛП(Врем1);
			Иначе
				СтрНомеров=СтрНомеров+","+СокрЛП(Врем1);
			КонецЕсли;
		КонецЕсли;
		ТекНом=ТекНом+1;
	КонецЦикла;
	Возврат СтрНомеров;
КонецФункции
//***************************************************************
//
//-----------------------------------------------
Функция ПолучитьКлТовСкидку(Конт) Экспорт
	//    ТекТовар=Конт.Товар;
	//    КлиентСкид=0;
	//    ФлНайдено=0;
	//    КлСкд=СоздатьОбъект("Справочник.КлиентСкидки");
	//    КлСкд.ИспользоватьДату(Конт.ДатаДок);
	//    КлСкд.ИспользоватьВладельца(Конт.Клиент);
	//    // 1-ый проход - поиск скидки  в справочнике на сам товар
	//    КлСкд.ВыбратьЭлементы();
	//    Пока КлСкд.ПолучитьЭлемент()>0 Цикл
	//        Если КлСкд.ПометкаУдаления()=1 Тогда
	//            Продолжить;
	//        КонецЕсли;
	//        Если ТекТовар=КлСкд.ТовГруппа Тогда
	//            КлиентСкид=Число(КлСкд.Наименование);
	//            ФлНайдено=1;
	//            Прервать;
	//        КонецЕсли;
	//    КонецЦикла;
	//
	//    Если ФлНайдено=1 Тогда
	//        Возврат(КлиентСкид);
	//    КонецЕсли;
	//    // последующие проходы - поиск скидки на товарную группу,в которую входит товар
	//    ТекУровень=Конт.Товар.Уровень();
	//    Если ТекУровень>1 Тогда
	//        // Товар вложен в группу
	//        ТекТовар=Конт.Товар.Родитель;
	//    КонецЕсли;
	//
	//    Пока ТекУровень>1 Цикл
	//        КлСкд.ВыбратьЭлементы();
	//        Пока КлСкд.ПолучитьЭлемент()>0 Цикл
	//            Если КлСкд.ПометкаУдаления()=1 Тогда
	//                Продолжить;
	//            КонецЕсли;
	//            Если ТекТовар=КлСкд.ТовГруппа Тогда
	//                КлиентСкид=Число(КлСкд.Наименование);
	//                ФлНайдено=1;
	//                Прервать;
	//            КонецЕсли;
	//        КонецЦикла;
	//        Если ФлНайдено=1 Тогда
	//            Возврат(КлиентСкид);
	//        КонецЕсли;
	//        ТекУровень=ТекУровень-1;
	//        // переходим в более высокую группу
	//        ТекТовар=ТекТовар.Родитель;
	//	КонецЦикла;
	// Если  позиция не найдена
	КлиентСкид="нет";
	Возврат(КлиентСкид);
КонецФункции
//***************************************************************
// 
Функция ПолучитьСтрокуДаты(ТекДата,Loc=5) Экспорт
	//Neobligўtais parametrs 'Loc' nosaka loc®jumu(P§c noklus§єnas- lokat®vs)
	//Parametra 'Loc' iesp§jamўs v§rt®bas:
	//1-nominat®vs, 2- Єenit®vs, 3- dat®vs, 4- akuzat®vs, 5- lokat®vs
	Тек=ТекДата;
	ТекЧисло=Лев(Строка(Тек),2);
	ТекГод=Число(Прав(Строка(Тек),2));
	Если ТекГод<50 Тогда
		ТекГод="20"+Прав(("0"+Строка(ТекГод)),2);
	Иначе
		ТекГод="19"+Прав(("0"+Строка(ТекГод)),2);
	КонецЕсли;
	ТекМесяц=Число(Сред(Строка(Тек),4,2));
	Если ТекМесяц=1 Тогда
		Проп="janvўr";
	ИначеЕсли ТекМесяц=2 Тогда
		Проп="februўr";
	ИначеЕсли ТекМесяц=3 Тогда
		Проп="mart";
	ИначеЕсли ТекМесяц=4 Тогда
		Проп="apr®l";
	ИначеЕсли ТекМесяц=5 Тогда
		Проп="maij";
	ИначеЕсли ТекМесяц=6 Тогда
		Проп="jЅnij";
	ИначеЕсли ТекМесяц=7 Тогда
		Проп="jЅlij";
	ИначеЕсли ТекМесяц=8 Тогда
		Проп="august";
	ИначеЕсли ТекМесяц=9 Тогда
		Проп="septembr";
	ИначеЕсли ТекМесяц=10 Тогда
		Проп="oktobr";
	ИначеЕсли ТекМесяц=11 Тогда
		Проп="novembr";
	ИначеЕсли ТекМесяц=12 Тогда
		Проп="decembr";
	КонецЕсли;
	
	Если Loc=1 Тогда
		Если (ТекМесяц=1) OR (ТекМесяц=2) OR (ТекМесяц=4) OR (ТекМесяц=9) OR (ТекМесяц=10) OR (ТекМесяц=11) OR (ТекМесяц=12) Тогда
			Проп=Проп+"is";
		Иначе Проп=Проп+"s";
		КонецЕсли;
	ИначеЕсли Loc=2 Тогда
		Если (ТекМесяц=4) Тогда
			Проп=Лев(Проп,4)+"Іa";
		Иначе  Проп=Проп+"a";
		КонецЕсли;
	ИначеЕсли Loc=3 Тогда
		Если (ТекМесяц=3) OR (ТекМесяц=5) OR (ТекМесяц=6) OR (ТекМесяц=7) OR (ТекМесяц=8) Тогда
			Проп=Проп+"am";
		Иначе Проп=Проп+"im";
		КонецЕсли;
	ИначеЕсли Loc=4 Тогда
		Если (ТекМесяц=3) OR (ТекМесяц=5) OR (ТекМесяц=6) OR (ТекМесяц=7) OR (ТекМесяц=8) Тогда
			Проп=Проп+"u";
		Иначе Проп=Проп+"i";
		КонецЕсли;
	Иначе Если (ТекМесяц=3) OR (ТекМесяц=5) OR (ТекМесяц=6) OR (ТекМесяц=7) OR (ТекМесяц=8) Тогда
			Проп=Проп+"ў";
		Иначе Проп=Проп+"®";
		КонецЕсли;
	КонецЕсли;
	
	Возврат(ТекГод+". gada "+Прав(("0"+Строка(ТекЧисло)),2)+". "+Проп);
КонецФункции 

//****************************************
Процедура УстПропись(Вал) Экспорт
	
	Пропись(СокрЛП(Вал)+".spl");	          
	
КонецПроцедуры

//****************************************
Функция СуммаПрописьюКассаТабл(Конт) Экспорт
	
	УстПропись(Конт.Валюта);
	
	СтрокаСуммы=Формат(Конт.Итог("Сумма"),"ЧПДС");
	Пропись("");
	СтрокаСуммы=СтрЗаменить(СтрокаСуммы,"јetr","Ґetr");
	Инд=Найти(СтрокаСуммы,"ѕ");
	Если Инд > 0 Тогда
		Рез=Лев(СтрокаСуммы,Инд-1)+"Ѕ"+Прав(СтрокаСуммы,СтрДлина(СтрокаСуммы)-Инд);
	Иначе
		Рез=СтрокаСуммы;
	Конецесли;
	Если (Конт.Валюта<>Рубли) тогда
		Если Найти(Рез," lat")>0 тогда
			Инд=Найти(Рез," lat");
			Рез=Лев(Рез,Инд-1)+" "+СокрЛП(Конт.Валюта.Сокр_назв)+" "+Прав(Рез,СтрДлина(Рез)-Инд-5);
		КонецЕсли;
		Рез=Лев(Рез,СтрДлина(Рез)-5)+СокрЛП(Конт.Валюта.Сокр_назв)+"/100";
	КонецЕсли;
	Рез=СтрЗаменить(Рез,"Ноль","Nulle");
	Возврат Рез;
КонецФункции            

//___________________________
// Пропись суммы с НДС для накладных
Функция СуммаПрописью(Конт) Экспорт
	
	УстПропись(Конт.Валюта);
	
	СтрокаСуммы=Формат(?(Константа.СуммаВключаетНДС=Перечисление.Булево.Да,Конт.Итог("Сумма"),Конт.Итог("Сумма")+Конт.Итог("НДС")),"ЧПДС");
	Пропись("");
	СтрокаСуммы=СтрЗаменить(СтрокаСуммы,"јetr","Ґetr");
	Инд=Найти(СтрокаСуммы,"ѕ");
	Если Инд > 0 Тогда
		Рез=Лев(СтрокаСуммы,Инд-1)+"Ѕ"+Прав(СтрокаСуммы,СтрДлина(СтрокаСуммы)-Инд);
	Иначе
		Рез=СтрокаСуммы;
	Конецесли;
	//	Если Инд > 0 Тогда
	//		Рез=Лев(СтрокаСуммы,Инд-1)+"Ј"+Прав(СтрокаСуммы,СтрДлина(СтрокаСуммы)-Инд);
	//	Иначе
	//		Рез=СтрокаСуммы;
	//	Конецесли;
	Рез=СтрЗаменить(Рез,"Ноль","Nulle");
	Возврат Рез;
КонецФункции
//-----------------------------------------------
Функция СуммаПрописьюКасса(Конт) Экспорт
	
	УстПропись(Конт.Валюта);
	
	СтрокаСуммы=Формат(Конт.Сумма,"ЧПДС");
	Пропись("");
	СтрокаСуммы=СтрЗаменить(СтрокаСуммы,"јetr","Ґetr");
	Инд=Найти(СтрокаСуммы,"ѕ");
	Если Инд > 0 Тогда
		Рез=Лев(СтрокаСуммы,Инд-1)+"Ѕ"+Прав(СтрокаСуммы,СтрДлина(СтрокаСуммы)-Инд);
	Иначе
		Рез=СтрокаСуммы;
	Конецесли;
	Рез=СтрЗаменить(Рез,"Ноль","Nulle");
	Возврат Рез;
КонецФункции
//-----------------------------------------------

Функция СуммаПроп(Сум,Конт) Экспорт
	СтрокаСуммы=Формат(Сум,"ЧПДС");
	Пропись("");
	СтрокаСуммы=СтрЗаменить(СтрокаСуммы,"јetr","Ґetr");
	Инд=Найти(СтрокаСуммы,"ѕ");
	Если Инд > 0 Тогда
		Рез=Лев(СтрокаСуммы,Инд-1)+"Ѕ"+Прав(СтрокаСуммы,СтрДлина(СтрокаСуммы)-Инд);
	Иначе
		Рез=СтрокаСуммы;
	Конецесли;
	Рез=СтрЗаменить(Рез,"Ноль","Nule");
	Возврат Рез;
КонецФункции             

//-----------------------------------------------

Функция КолПроп(Сумма,Конт) Экспорт
	
	Пропись("figure.spl");
	СтрокаСуммы=Формат(Сумма,"ЧПДС");
	СтрокаСуммы=СтрЗаменить(СтрокаСуммы,"јetr","Ґetr");
	Инд=Найти(СтрокаСуммы,"ѕ");
	Если Инд > 0 Тогда
		Рез=Лев(СтрокаСуммы,Инд-1)+"Ѕ"+Прав(СтрокаСуммы,СтрДлина(СтрокаСуммы)-Инд);
	Иначе
		Рез=СтрокаСуммы;
	Конецесли;
	
	СтрокаСуммы=СтрЗаменить(СтрокаСуммы,"Ноль","Nule");
	
	Пропись("");
	Если Сумма=0 Тогда
		Возврат Сумма;
	Иначе
		Возврат СтрокаСуммы;
	КонецЕсли;         
	Пропись("");
	
КонецФункции

function WinToDos(Str) Export
	k=1;
	стр="";
	Пока k<=StrLen(Str) Цикл
		kk=Mid(Str,k,1);
		kkk=Asc(kk);
		Если kkk>160 Тогда
			стр=стр+Win2Dos[kkk];
		Иначе
			стр=стр+kk;
		КонецЕсли;
		k=k+1;
	конеццикла;
	return стр;
endfunction

function DosToWin(Str) Export
	k=1;
	стр="";
	Пока k<=StrLen(Str) Цикл
		kk=Mid(Str,k,1);
		kkk=Asc(kk);
		Если kkk>127 Тогда
			стр=стр+Dos2Win[kkk];
		Иначе
			стр=стр+kk;
		КонецЕсли;
		k=k+1;
	конеццикла;
	return стр;
endfunction

Function Translate_Descr(Str) export
	
	k=1;
	стр="";
	
	СтрЗаменить(Str,".","");
	Пока k<=StrLen(Str) Цикл
		kk=Mid(Str,k,1);
		kkk=Asc(kk);
		
		Если тТаблицаПеревода.НайтиСтроку("иКодСимвПоиска",kkk,,1)>0 Тогда
			стр=стр+Симв(тТаблицаПеревода.КодСимвЗамены);
		Иначе
			стр=стр+kk;
		КонецЕсли;
		
		k=k+1;
	конеццикла;
	
	return стр;
	
EndFunction

//======================================================================
Функция глЗаменитьНелегальныеСимволы(Стр) Экспорт
	
	k=1;
	стрН="";
	
//	Стр=СтрЗаменить(Стр,".","");
//	Стр=СтрЗаменить(Стр,"'","");
	Пока k<=StrLen(Стр) Цикл
		kk=Mid(Стр,k,1);
		kkk=Asc(kk);
		
		Если (kkk=13) ИЛИ (kkk=10) Тогда //символ перевода строки
		Иначе
			стрН=стрН+kk;
		КонецЕсли;
		
		k=k+1;
	конеццикла;
	
	return стрН;
	
КонецФункции // гл

Процедура КодТаблица()
	
	f=Createobject("fs");
	Если f.existFile(TrimAll(Константа.LogFileName))=1 Тогда
		t=Createobject("Text");
		t.Open(TrimAll(Константа.LogFileName));
		t.Write(TrimAll(dbDir())+TrimAll(UserName())+"_log.txt");
		t=0;
	КонецЕсли;
	яяя=128;
	Пока яяя<176 do
		Win2Dos[яяя+64]=Симв(яяя);
		Dos2Win[яяя]=Симв(яяя+64);
		яяя=яяя+1;
	enddo;
	яяя=224;
	Пока яяя<240 do
		Win2Dos[яяя+16]=Симв(яяя);
		Dos2Win[яяя]=Симв(яяя+16);
		яяя=яяя+1;
	enddo;
	Win2Dos[161]=Симв(181);
	Win2Dos[163]=Симв(211);
	Win2Dos[166]=Симв(240);
	Win2Dos[168]=Симв(242);
	Win2Dos[172]=Симв(215);
	Win2Dos[175]=Симв(244);
	Win2Dos[177]=Симв(246);
	Win2Dos[179]=Симв(252);
	Win2Dos[185]=Симв(208);
	Win2Dos[188]=Симв(222);
	Win2Dos[190]=Симв(248);
	Win2Dos[162]=Симв(198);
	Win2Dos[165]=Симв(210);
	Win2Dos[167]=Симв(241);
	Win2Dos[170]=Симв(214);
	Win2Dos[174]=Симв(216);
	Win2Dos[176]=Симв(243);
	Win2Dos[178]=Симв(245);
	Win2Dos[180]=Симв(183);
	Win2Dos[186]=Симв(253);
	Win2Dos[189]=Симв(221);
	Win2Dos[191]=Симв(247);
	
	Dos2Win[181]=Симв(161);
	Dos2Win[211]=Симв(163);
	Dos2Win[240]=Симв(166);
	Dos2Win[242]=Симв(168);
	Dos2Win[215]=Симв(172);
	Dos2Win[244]=Симв(175);
	Dos2Win[246]=Симв(177);
	Dos2Win[252]=Симв(179);
	Dos2Win[208]=Симв(185);
	Dos2Win[222]=Симв(188);
	Dos2Win[248]=Симв(190);
	Dos2Win[198]=Симв(162);
	Dos2Win[210]=Симв(165);
	Dos2Win[241]=Симв(167);
	Dos2Win[214]=Симв(170);
	Dos2Win[216]=Симв(174);
	Dos2Win[243]=Симв(176);
	Dos2Win[245]=Симв(178);
	Dos2Win[183]=Симв(180);
	Dos2Win[253]=Симв(186);
	Dos2Win[221]=Симв(189);
	Dos2Win[247]=Симв(191);
	
	КодыПеревода=СоздатьОбъект("СписокЗначений");
	тТаблицаПеревода=СоздатьОбъект("ИндексированнаяТаблица");
	тТаблицаПеревода.НоваяКолонка("КодСимвДляЗамены");
	тТаблицаПеревода.НоваяКолонка("КодСимвЗамены");
	тТаблицаПеревода.ДобавитьИндекс("иКодСимвПоиска","КодСимвДляЗамены");

	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 162;
	тТаблицаПеревода.КодСимвЗамены = 65+32; //A
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 161;
	тТаблицаПеревода.КодСимвЗамены = 65; //A

	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 163; 
	тТаблицаПеревода.КодСимвЗамены = 67; //C
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 165; 
	тТаблицаПеревода.КодСимвЗамены = 67+32; //c

	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 166 ;
	тТаблицаПеревода.КодСимвЗамены = 69; //E
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 167; 
	тТаблицаПеревода.КодСимвЗамены = 69+32; //e

	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 168 ;
	тТаблицаПеревода.КодСимвЗамены = 71; //G
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 170; 
	тТаблицаПеревода.КодСимвЗамены = 71+32; //g

	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 172 ;
	тТаблицаПеревода.КодСимвЗамены = 73; //I
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 174; 
	тТаблицаПеревода.КодСимвЗамены = 73+32; //i

	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 175;
	тТаблицаПеревода.КодСимвЗамены = 75; //K
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 176; 
	тТаблицаПеревода.КодСимвЗамены = 75+32; //k

	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 177 ;
	тТаблицаПеревода.КодСимвЗамены = 76; //L
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 178; 
	тТаблицаПеревода.КодСимвЗамены = 76+32; //l

	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 179 ;
	тТаблицаПеревода.КодСимвЗамены = 78; //N
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 180; 
	тТаблицаПеревода.КодСимвЗамены = 78+32; //n
	
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 185 ;
	тТаблицаПеревода.КодСимвЗамены = 83; //S
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 186; 
	тТаблицаПеревода.КодСимвЗамены = 83+32; //s

	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 188;
	тТаблицаПеревода.КодСимвЗамены = 85; //U
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 189; 
	тТаблицаПеревода.КодСимвЗамены = 85+32; //u

	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 190; 
	тТаблицаПеревода.КодСимвЗамены = 90; //Z
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 191; 
	тТаблицаПеревода.КодСимвЗамены = 90+32; //z
	
	//для замены Эстонских символов
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 190; 
	тТаблицаПеревода.КодСимвЗамены = 90; //Z
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 191; 
	тТаблицаПеревода.КодСимвЗамены = 90+32; //z

	
	Win_Translate[161]=Симв(65);  //A
	Win_Translate[163]=Симв(67); //C
	Win_Translate[166]=Симв(69); //E
	Win_Translate[168]=Симв(71); //G
	Win_Translate[172]=Симв(73);//I
	Win_Translate[175]=Симв(75);//K
	Win_Translate[177]=Симв(76);//L
	Win_Translate[179]=Симв(78);//N
	Win_Translate[185]=Симв(83);//S
	Win_Translate[188]=Симв(85); //U
	Win_Translate[190]=Симв(90);//Z
	Win_Translate[162]=Симв(97); //    a
	Win_Translate[165]=Симв(99); //    c
	Win_Translate[167]=Симв(101);    //   e
	Win_Translate[170]=Симв(103); //g
	Win_Translate[174]=Симв(105); // i
	Win_Translate[176]=Симв(107); //k
	Win_Translate[178]=Симв(108); //l
	Win_Translate[180]=Симв(110);//n
	Win_Translate[186]=Симв(115); //    s
	Win_Translate[189]=Симв(117);       //    u
	Win_Translate[191]=Симв(122); // z
	
	//Литовские символы перекодируем 
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 192; 
	тТаблицаПеревода.КодСимвЗамены = 65; //A
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 224; 
	тТаблицаПеревода.КодСимвЗамены = 65+32; //a

	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 200; 
	тТаблицаПеревода.КодСимвЗамены = 67; //C
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 232; 
	тТаблицаПеревода.КодСимвЗамены = 67+32; //c

	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 198; 
	тТаблицаПеревода.КодСимвЗамены = 69; //E
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 230; 
	тТаблицаПеревода.КодСимвЗамены = 69+32; //e
	
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 203; 
	тТаблицаПеревода.КодСимвЗамены = 69; //E
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 235; 
	тТаблицаПеревода.КодСимвЗамены = 69+32; //e
	
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 193; 
	тТаблицаПеревода.КодСимвЗамены = 73; //I
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 225; 
	тТаблицаПеревода.КодСимвЗамены = 73+32; //i


	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 208; 
	тТаблицаПеревода.КодСимвЗамены = 83; //S
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 240; 
	тТаблицаПеревода.КодСимвЗамены = 83+32; //s

	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 216; 
	тТаблицаПеревода.КодСимвЗамены = 85; //U
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 248; 
	тТаблицаПеревода.КодСимвЗамены = 85+32; //u

	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 219; 
	тТаблицаПеревода.КодСимвЗамены = 85; //U
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 251; 
	тТаблицаПеревода.КодСимвЗамены = 85+32; //u
	
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 222; 
	тТаблицаПеревода.КодСимвЗамены = 90; //Z
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 254; 
	тТаблицаПеревода.КодСимвЗамены = 90+32; //z

	//Эстонские перекодируем
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 220; //
	тТаблицаПеревода.КодСимвЗамены = 85; //U
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 220+32; 
	тТаблицаПеревода.КодСимвЗамены = 85+32; //u

	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 214; 
	тТаблицаПеревода.КодСимвЗамены = 79; //O
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 214+32; 
	тТаблицаПеревода.КодСимвЗамены = 79+32; //o

	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 196; 
	тТаблицаПеревода.КодСимвЗамены = 65; //A
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 196+32; 
	тТаблицаПеревода.КодСимвЗамены = 65+32; //a
	
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 213; //Х
	тТаблицаПеревода.КодСимвЗамены = 79; //O
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 213+32; //х
	тТаблицаПеревода.КодСимвЗамены = 79+32; //o
	
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 218; 
	тТаблицаПеревода.КодСимвЗамены = 83; //S
	тТаблицаПеревода.НоваяСтрока();
	тТаблицаПеревода.КодСимвДляЗамены = 250; 
	тТаблицаПеревода.КодСимвЗамены = 83+32; //s
	
	//тТаблицаПеревода.Показать();
	
КонецПроцедуры

//<<Алгоритм Успеха>> (end)
//************************************************************

//********************************************************************************
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписиИстории(ТипОб, Об, Значен, ДатаИст) Экспорт Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ПриЗаписиИстории(ТипОб, Об, Значение, ДатаИст)
	//Закомментировано Инсталлятором МОД:Процедура ПриЗаписиИстории(ТипОб,Об,Значение,ДатаИст)
	Если ТипОб="Справочник.Номенклатура.ВидТовара" Тогда
		Если Об.ВидТовара=Перечисление.ВидыТоваров.Блюдо Тогда
			Если ТипОб="Справочник.Номенклатура.РозничнаяЦена" Тогда
				Если (Константа.УстановкаЦеныРеализации=Перечисление.УстанЦенРеализ.Автоматически) Тогда
					Предупреждение("Установлена константа автоматического расчета цены. Изменения не доступны");
					СтатусВозврата(0);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписиИстории(ТипОб, Об, Значен, ДатаИст) Экспорт
	стар_ПриЗаписиИстории(ТипОб, Об, Значен, ДатаИст);
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ТипЗначения(Об)=11 Тогда//справочник
		ПриИзмененииОбъекта(Об,Об,ДатаИст);
	Иначе
		Стр=СтрЗаменить(ТипОб,"Константа.","");
		ПриИзмененииОбъекта(Стр,Стр,ДатаИст);
	КонецЕсли;
	
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД

//******************************************************************************
Функция глСкладДок(Док,Режим="Источник") Экспорт
	// возвращаемое значение Склад документа
	ВидДок=Док.Вид();
	Если     (ВидДок="РасходнаяНакладная")
	ИЛИ (ВидДок="ПриходнаяНакладная")
	ИЛИ (ВидДок="РасходнаяРозничная")
	ИЛИ (ВидДок="РасходнаяРеализатора")
	ИЛИ (ВидДок="ПриходнаяРеализатора")
	ИЛИ (ВидДок="Чек")
	ИЛИ (ВидДок="ОтчетКассовойСмены")
	ИЛИ (ВидДок="Списание")
	ИЛИ (ВидДок="ВводПартийТоваров")
	ИЛИ (ВидДок="ОприходованиеИзлишков")
	ИЛИ (ВидДок="ВводОстатковТоваров")
	ИЛИ (ВидДок="ВводОстатковТМЦ") Тогда
		Возврат Док.Склад;
	ИначеЕсли ВидДок="Перемещение" Тогда
		Если Режим="Источник" Тогда
			Возврат Док.Склад;
		Иначе
			Возврат Док.СкладПолучатель;
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Функция ПолучитьСкидкуКлиента(Конт,ВыбКлиент="",ВыбТовар="",НаДату="",Цена,ВидСкидки,БезАкций=0) Экспорт

	Если ПустоеЗначение(НаДату)=1 Тогда
		НаДату=РабочаяДата();
	КонецЕсли;

	ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");
	
	глУдалениеВременнойТаблицыSQL("#Товары");
	глУдалениеВременнойТаблицыSQL("#КлиентыТоварыСкидки");
	глУдалениеВременнойТаблицыSQL("#КлиентыГрТоварыСкидки");
	глУдалениеВременнойТаблицыSQL("#КлиентыСпецСкидки");
	глУдалениеВременнойТаблицыSQL("#КлиентыГрСпецСкидки");
	глУдалениеВременнойТаблицыSQL("#КлиентыСкидки");
	глУдалениеВременнойТаблицыSQL("#КлиентыГрСкидки");
	глУдалениеВременнойТаблицыSQL("#КлиентыСпецЦены");
	глУдалениеВременнойТаблицыSQL("#КлиентыГрСпецЦены");
	
	ТекстЗапроса = "SELECT  Номенклатура.ID Товар
	|						, $Цены.ЗапретСкидки ЦеныЗапретСкидки
	|						, COALESCE(СпрВ.DESCR,'EUR') Валюта
	|						, ROUND($ПоследнееЗначение.Цены.Цена(Цены.ID, :ВыбДата),2) Цена
	|				INTO #Товары
	|			    FROM $Справочник.Номенклатура AS Номенклатура With (NOLOCK) 
	|				INNER JOIN $Справочник.Цены AS Цены With (NOLOCK) ON Номенклатура.ID = Цены.PARENTEXT AND (Цены.ISMARK = 0)
	|			    LEFT JOIN $Справочник.Валюты СпрВ (NOLOCK) ON  СпрВ.ID = $Цены.Валюта    
//	|				INNER JOIN $Справочник.КатегорииЦен КатЦены (NOLOCK) ON КатЦены.ID = $Цены.КатегорияЦены 
	|				WHERE ($Номенклатура.ПоАлфавиту NOT LIKE (:КодАрхив))
	|				AND (Номенклатура.ISMARK = 0)
	|				AND ($Цены.КатегорияЦены = :КатЦены)
	|				AND ($ПоследнееЗначение.Цены.Цена(Цены.ID, :ВыбДата) > 0)
	|"+?(ПустоеЗначение(ВыбТовар)=1,""," AND Номенклатура.ID = :ВыбТовар");

	Если глЕстьРеквизитШапки("КатегорияЦены",Конт.Вид())=0 Тогда
		ОснКатЦены = Константа.ОсновнаяКатегорияЦены ;
	Иначе
		ОснКатЦены = Конт.КатегорияЦены;
	КонецЕсли;
	
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбТовар",ВыбТовар);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("КатЦены",ОснКатЦены);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДата",РабочаяДата());
	ЗапросСКЛ.УстановитьТекстовыйПараметр("КодАрхив",Константа.СимволАрхивТоваров+"%");
	ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
//	Сообщить("Выгружена таблица товаров с ценами");
	
	
	ТекстЗапроса = "SELECT СпрК.ID Клиент 
	|                    , СпрС.ID СпециализацияГруппа1
	|				     , $ПоследнееЗначение.Контрагенты.КлиентСкидка(СпрК.ID, :ВыбДата) Скидка
	|				INTO #КлиентыСпецСкидки
	|			    FROM $Справочник.Контрагенты СпрК (NOLOCK)
	|				INNER JOIN Дерево_СпециализацииКлиентов ДСК (NOLOCK) ON ДСК.ID = $СпрК.Специализация
	|				INNER JOIN $Справочник.СпециализацииКлиентов СпрС (NOLOCK) ON СпрС.ID = ДСК.PARENTID AND СпрС.ISFOLDER = 1 AND $СпрС.УровеньИерархии = 0
	|			    WHERE СпрК.ISMARK = 0
//	|			    AND $ПоследнееЗначение.Контрагенты.КлиентСкидка(СпрК.ID, :ВыбДата)>0
	|				AND ($СпрК.ПоАлфавиту NOT LIKE (:КодАрхив))
	|";
	
	Если ПустоеЗначение(ВыбКлиент)=0 Тогда
		 ТекстЗапроса=ТекстЗапроса+" AND СпрК.ID = :ВыбКлиент";
	Иначе
		 ТекстЗапроса=ТекстЗапроса+" AND СпрК.ID IN (SELECT PARENTEXT FROM $Справочник.КонтактнаяИнформация СпрКК (NOLOCK) WHERE $СпрКК.ЛогинАктивен = 1)";
	КонецЕсли;
	
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбКлиент",?(ПустоеЗначение(ВыбКлиент.КлиентДляСкидок)=1,ВыбКлиент,ВыбКлиент.КлиентДляСкидок));
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбКлиентГл",?(ПустоеЗначение(ВыбКлиент.КлГруппа)=0,ВыбКлиент.КлГруппа,ВыбКлиент));
	ЗапросСКЛ.УстановитьТекстовыйПараметр("КатЦены",ОснКатЦены);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДата",РабочаяДата());
	ЗапросСКЛ.УстановитьТекстовыйПараметр("КодАрхив",Константа.СимволАрхивТоваров+"%");

	ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	//Сообщить("Выгружена таблица клиентов со скидками");

	ТекстЗапроса = "SELECT СпрК.ID Клиент 
	|                    , СпрС.ID СпециализацияГруппа1
	|				     , $ПоследнееЗначение.Контрагенты.КлиентСкидка(СпрК.ID, :ВыбДата) Скидка
	|				INTO #КлиентыГрСпецСкидки
	|			    FROM $Справочник.Контрагенты СпрК (NOLOCK)
	|				INNER JOIN Дерево_СпециализацииКлиентов ДСК (NOLOCK) ON ДСК.ID = $СпрК.Специализация
	|				INNER JOIN $Справочник.СпециализацииКлиентов СпрС (NOLOCK) ON СпрС.ID = ДСК.PARENTID AND СпрС.ISFOLDER = 1 AND $СпрС.УровеньИерархии = 0
	|			    WHERE СпрК.ISMARK = 0
//	|			    AND $ПоследнееЗначение.Контрагенты.КлиентСкидка(СпрК.ID, :ВыбДата)>0
	|				AND ($СпрК.ПоАлфавиту NOT LIKE (:КодАрхив))
	|";
	
	Если ПустоеЗначение(ВыбКлиент)=0 Тогда
		 ТекстЗапроса=ТекстЗапроса+" AND СпрК.ID = :ВыбКлиентГл";
	Иначе
		 ТекстЗапроса=ТекстЗапроса+" AND СпрК.ID IN (SELECT PARENTEXT FROM $Справочник.КонтактнаяИнформация СпрКК (NOLOCK) WHERE $СпрКК.ЛогинАктивен = 1)";
	КонецЕсли;
	
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбКлиент",ВыбКлиент);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбКлиентГл",?(ПустоеЗначение(ВыбКлиент.КлГруппа.КлиентДляСкидок)=1,ВыбКлиент.КлГруппа,ВыбКлиент.КлГруппа.КлиентДляСкидок));
//	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбКлиентГл",ВыбКлиент.КлГруппа);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("КатЦены",ОснКатЦены);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДата",РабочаяДата());
	ЗапросСКЛ.УстановитьТекстовыйПараметр("КодАрхив",Константа.СимволАрхивТоваров+"%");

	ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);

	

	ТекстЗапроса = "SELECT СпрСК.PARENTEXT Клиент 
	|					   ,$СпрСК.ТовГруппа Товар
	|				     , $ПоследнееЗначение.КлиентСкидки.ПроцентСкидки(СпрСК.ID, :ВыбДата) Скидка
	|				INTO #КлиентыТоварыСкидки
	|			    FROM $Справочник.КлиентСкидки СпрСК (NOLOCK)
	|				INNER JOIN #КлиентыСпецСкидки ON #КлиентыСпецСкидки.Клиент = СпрСК.PARENTEXT
	|			    WHERE СпрСК.ISMARK = 0
//	|			    AND $ПоследнееЗначение.КлиентСкидки.ПроцентСкидки(СпрСК.ID, :ВыбДата)>0
	|			    AND ($СпрСК.КатегорияЦены = :КатЦены)
	|";
	
	ЗапросСКЛ.УстановитьТекстовыйПараметр("КатЦены",ОснКатЦены);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДата",РабочаяДата());
	ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	//Сообщить("Выгружена таблица клиентов и товаров со скидками");

	ТекстЗапроса = "SELECT СпрК.ID Клиент 
	|					   ,:ВыбТовар Товар
	|				     , $ПоследнееЗначение.Контрагенты.КлиентСкидка(СпрК.ID, :ВыбДата) Скидка
	|				INTO #КлиентыСкидки
	|			    FROM $Справочник.Контрагенты СпрК (NOLOCK)
	|			    WHERE СпрК.ISMARK = 0
//	|			    AND $ПоследнееЗначение.Контрагенты.КлиентСкидка(СпрК.ID, :ВыбДата)>0
	|			    AND СпрК.ID = :ВыбКлиент
	|";
	
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбКлиент",?(ПустоеЗначение(ВыбКлиент.КлиентДляСкидок)=1,ВыбКлиент,ВыбКлиент.КлиентДляСкидок));
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбТовар",ВыбТовар);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДата",РабочаяДата());
	ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);

	ТекстЗапроса = "SELECT СпрК.ID Клиент 
	|					   ,:ВыбТовар Товар
	|				     , $ПоследнееЗначение.Контрагенты.КлиентСкидка(СпрК.ID, :ВыбДата) Скидка
	|				INTO #КлиентыГрСкидки
	|			    FROM $Справочник.Контрагенты СпрК (NOLOCK)
	|			    WHERE СпрК.ISMARK = 0
	|			    AND $ПоследнееЗначение.Контрагенты.КлиентСкидка(СпрК.ID, :ВыбДата)>0
	|			    AND СпрК.ID = :ВыбКлиент
	|";
	
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбКлиент",?(ПустоеЗначение(ВыбКлиент.КлГруппа.КлиентДляСкидок)=1,ВыбКлиент.КлГруппа,ВыбКлиент.КлГруппа.КлиентДляСкидок));
	//ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбКлиент",ВыбКлиент.КлГруппа);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбТовар",ВыбТовар);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДата",РабочаяДата());
	ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	
	
	ТекстЗапроса = "SELECT СпрСК.PARENTEXT Клиент 
	|					   ,$СпрСК.ТовГруппа Товар
	|				     , $ПоследнееЗначение.КлиентСкидки.ПроцентСкидки(СпрСК.ID, :ВыбДата) Скидка
	|				INTO #КлиентыГрТоварыСкидки
	|			    FROM $Справочник.КлиентСкидки СпрСК (NOLOCK)
	|				INNER JOIN #КлиентыГрСпецСкидки ON #КлиентыГрСпецСкидки.Клиент = СпрСК.PARENTEXT
	|			    WHERE СпрСК.ISMARK = 0
//	|			    AND $ПоследнееЗначение.КлиентСкидки.ПроцентСкидки(СпрСК.ID, :ВыбДата)>0
	|			    AND ($СпрСК.КатегорияЦены = :КатЦены)
	|";
	
	ЗапросСКЛ.УстановитьТекстовыйПараметр("КатЦены",ОснКатЦены);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДата",РабочаяДата());
	ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	//Сообщить("Выгружена таблица клиентов и товаров со скидками");
	
	УсловиеТовар = "";
	Если ПустоеЗначение(ВыбТовар)=0 Тогда
		УсловиеТовар=" AND $СпецЦены.Товар = :ВыбТовар AND $СпецЦены.Единица = :ВыбЕдиница";
	КонецЕсли;
	
	ТекстЗапроса=" -- запрос для получения актуальных спец. цен
	|			SELECT Клиент 
	|				, КлиентФилиала 
	|				, Товар 
	|				, $СпрЕд.Единица ЕдИзм
	|				, Цена/:ВыбКоэфф Цена
	|				, COALESCE(СпрВ.DESCR,'EUR') Валюта
	|				, ВидЦены
	|			 INTO #КлиентыСпецЦены
	|			 FROM (SELECT Клиент
	|						, КлиентФилиала
	|						, Товар
	|						, Единица 
	|						, 2 as ВидЦены -- обычная 
	|						, (SELECT TOP 1 $Рег.Цена Цена
	|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица  AND $Рег.ВидЦены <> 2
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) Цена
	|						, (SELECT TOP 1 $Рег.Валюта 
	|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица AND $Рег.ВидЦены <> 2
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) Валюта
	|						, (SELECT TOP 1 $Рег.ПериодС
	|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				 		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица AND $Рег.ВидЦены <> 2
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) ПериодС
	|						, (SELECT TOP 1 $Рег.ПериодПо
	|						   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица AND $Рег.ВидЦены <> 2
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) ПериодПо
	|					FROM
	|						(SELECT DISTINCT $СпецЦены.Клиент Клиент,  $СпецЦены.КлиентФилиала КлиентФилиала, $СпецЦены.Товар Товар, $СпецЦены.Единица Единица, СпецЦены.DATE_TIME_IDDOC ПозицияДок
	|				 		 FROM $Регистр.СпецЦены AS СпецЦены (NOLOCK)
	|						 INNER JOIN $Справочник.Номенклатура СпрН(NOLOCK) ON СпрН.ID=$СпецЦены.Товар
	|						 INNER JOIN $Справочник.Единицы СпрЕд(NOLOCK) ON СпрЕд.ID = $СпецЦены.Единица
	|						 INNER JOIN $Справочник.Контрагенты СпрК(NOLOCK) ON СпрК.ID=$СпецЦены.Клиент
	|				 		 WHERE $СпецЦены.ПериодС<=:ВыбДата AND $СпецЦены.Клиент=:ВыбКлиент AND $СпецЦены.ВидЦены <> 2 -- обычная 
	|							" + УсловиеТовар+"
	|						) Товары
	|";
	
	Если БезАкций=0 Тогда
		
		ТекстЗапроса=ТекстЗапроса+"	
		|					UNION ALL 
		|					SELECT Клиент
		|						, КлиентФилиала
		|						, Товар
		|						, Единица 
		|						, 1 as ВидЦены -- акционная 
		|						, (SELECT TOP 1 $Рег.Цена Цена
		|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
		|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица  AND $Рег.ВидЦены = 2 -- акционная
		|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) Цена
		|						, (SELECT TOP 1 $Рег.Валюта 
		|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
		|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица AND $Рег.ВидЦены = 2 -- акционная
		|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) Валюта
		|						, (SELECT TOP 1 $Рег.ПериодС
		|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
		|				 		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица AND $Рег.ВидЦены = 2 -- акционная
		|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) ПериодС
		|						, (SELECT TOP 1 $Рег.ПериодПо
		|						   FROM $Регистр.СпецЦены as Рег (NOLOCK)
		|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица  AND $Рег.ВидЦены = 2 -- акционная
		|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) ПериодПо
		|					FROM
		|						(SELECT DISTINCT $СпецЦены.Клиент Клиент,  $СпецЦены.КлиентФилиала КлиентФилиала, $СпецЦены.Товар Товар, $СпецЦены.Единица Единица, СпецЦены.DATE_TIME_IDDOC ПозицияДок
		|				 		 FROM $Регистр.СпецЦены AS СпецЦены (NOLOCK)
		|						 INNER JOIN $Справочник.Номенклатура СпрН(NOLOCK) ON СпрН.ID=$СпецЦены.Товар
		|						 INNER JOIN $Справочник.Единицы СпрЕд(NOLOCK) ON СпрЕд.ID = $СпецЦены.Единица
		|						 INNER JOIN $Справочник.Контрагенты СпрК(NOLOCK) ON СпрК.ID=$СпецЦены.Клиент
		|				 		 WHERE $СпецЦены.ПериодС<=:ВыбДата AND $СпецЦены.Клиент=:ВыбКлиент AND $СпецЦены.ВидЦены = 2 -- акционная
		|							" + УсловиеТовар+"
		|						) Товары
		|";
		
	КонецЕсли;	

	ТекстЗапроса=ТекстЗапроса+"		
	|				) ТоварыПоСпецЦенам
		|			 INNER JOIN $Справочник.Номенклатура СпрН(NOLOCK) ON СпрН.ID=ТоварыПоСпецЦенам.Товар
		|			 INNER JOIN $Справочник.Единицы СпрЕд(NOLOCK) ON СпрЕд.ID = ТоварыПоСпецЦенам.Единица 
	|			     LEFT JOIN $Справочник.Валюты СпрВ (NOLOCK) ON  СпрВ.ID = ТоварыПоСпецЦенам.Валюта    
		|			 WHERE ПериодС <= :ВыбДата AND ПериодПо >= :ВыбДата AND Цена <> 0 
		|";
	

	
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДата", НаДату);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбТовар", ВыбТовар);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбЕдиница", Конт.Единица);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбКоэфф", Конт.Коэффициент);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбКлиент", ВыбКлиент);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбГрКлиент", ВыбКлиент.КлГруппа);

	ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
//	Сообщить("Выгружена таблица клиентов по спец.ценами");

	ТекстЗапроса=" -- запрос для получения актуальных спец. цен
	|			SELECT Клиент 
	|				, КлиентФилиала 
	|				, Товар 
	|				, $СпрЕд.Единица ЕдИзм
	|				, Цена/:ВыбКоэфф Цена
	|				, COALESCE(СпрВ.DESCR,'EUR') Валюта
	|				, ВидЦены
	|			 INTO #КлиентыГрСпецЦены
	|			 FROM (SELECT Клиент
	|						, КлиентФилиала
	|						, Товар
	|						, Единица 
	|						, 2 as ВидЦены -- обычная 
	|						, (SELECT TOP 1 $Рег.Цена Цена
	|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица  AND $Рег.ВидЦены <> 2
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) Цена
	|						, (SELECT TOP 1 $Рег.Валюта 
	|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица AND $Рег.ВидЦены <> 2
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) Валюта
	|						, (SELECT TOP 1 $Рег.ПериодС
	|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				 		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица AND $Рег.ВидЦены <> 2
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) ПериодС
	|						, (SELECT TOP 1 $Рег.ПериодПо
	|						   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица AND $Рег.ВидЦены <> 2
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) ПериодПо
	|					FROM
	|						(SELECT DISTINCT $СпецЦены.Клиент Клиент,  $СпецЦены.КлиентФилиала КлиентФилиала, $СпецЦены.Товар Товар, $СпецЦены.Единица Единица, СпецЦены.DATE_TIME_IDDOC ПозицияДок
	|				 		 FROM $Регистр.СпецЦены AS СпецЦены (NOLOCK)
	|						 INNER JOIN $Справочник.Номенклатура СпрН(NOLOCK) ON СпрН.ID=$СпецЦены.Товар
	|						 INNER JOIN $Справочник.Единицы СпрЕд(NOLOCK) ON СпрЕд.ID = $СпецЦены.Единица
	|						 INNER JOIN $Справочник.Контрагенты СпрК(NOLOCK) ON СпрК.ID=$СпецЦены.Клиент
	|				 		 WHERE $СпецЦены.ПериодС<=:ВыбДата AND $СпецЦены.Клиент=:ВыбГрКлиент AND $СпецЦены.ВидЦены <> 2 -- обычная 
	|							" + УсловиеТовар+"
	|						) Товары
	|";
	
	Если БезАкций=0 Тогда
		ТекстЗапроса=ТекстЗапроса+"
		|					UNION ALL 
		|					SELECT Клиент
		|						, КлиентФилиала
		|						, Товар
		|						, Единица 
		|						, 1 as ВидЦены -- акционная 
		|						, (SELECT TOP 1 $Рег.Цена Цена
		|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
		|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица  AND $Рег.ВидЦены = 2 -- акционная
		|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) Цена
		|						, (SELECT TOP 1 $Рег.Валюта 
		|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
		|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица AND $Рег.ВидЦены = 2 -- акционная
		|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) Валюта
		|						, (SELECT TOP 1 $Рег.ПериодС
		|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
		|				 		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица AND $Рег.ВидЦены = 2 -- акционная
		|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) ПериодС
		|						, (SELECT TOP 1 $Рег.ПериодПо
		|						   FROM $Регистр.СпецЦены as Рег (NOLOCK)
		|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица  AND $Рег.ВидЦены = 2 -- акционная
		|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) ПериодПо
		|					FROM
		|						(SELECT DISTINCT $СпецЦены.Клиент Клиент,  $СпецЦены.КлиентФилиала КлиентФилиала, $СпецЦены.Товар Товар, $СпецЦены.Единица Единица, СпецЦены.DATE_TIME_IDDOC ПозицияДок
		|				 		 FROM $Регистр.СпецЦены AS СпецЦены (NOLOCK)
		|						 INNER JOIN $Справочник.Номенклатура СпрН(NOLOCK) ON СпрН.ID=$СпецЦены.Товар
		|						 INNER JOIN $Справочник.Единицы СпрЕд(NOLOCK) ON СпрЕд.ID = $СпецЦены.Единица
		|						 INNER JOIN $Справочник.Контрагенты СпрК(NOLOCK) ON СпрК.ID=$СпецЦены.Клиент
		|				 		 WHERE $СпецЦены.ПериодС<=:ВыбДата AND $СпецЦены.Клиент=:ВыбГрКлиент AND $СпецЦены.ВидЦены = 2 -- акционная
		|							" + УсловиеТовар+"
		|						) Товары
		|";
		
	КонецЕсли;
	
	ТекстЗапроса=ТекстЗапроса+"	
		|				) ТоварыПоСпецЦенам
		|			 INNER JOIN $Справочник.Номенклатура СпрН(NOLOCK) ON СпрН.ID=ТоварыПоСпецЦенам.Товар
		|			 INNER JOIN $Справочник.Единицы СпрЕд(NOLOCK) ON СпрЕд.ID = ТоварыПоСпецЦенам.Единица 
	|			     LEFT JOIN $Справочник.Валюты СпрВ (NOLOCK) ON  СпрВ.ID = ТоварыПоСпецЦенам.Валюта    
		|			 WHERE ПериодС <= :ВыбДата AND ПериодПо >= :ВыбДата AND Цена <> 0 
		|";


	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДата", НаДату);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбТовар", ВыбТовар);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбЕдиница", Конт.Единица);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбКоэфф", Конт.Коэффициент);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбКлиент", ВыбКлиент);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбГрКлиент", ВыбКлиент.КлГруппа);
	

	ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
//	Сообщить("Выгружена таблица клиентов по спец.ценами");



	ТекстЗапроса = "
					|SELECT 
					|Код
					|,Товар [Товар $Справочник.Номенклатура]
					|,ВидСкидкиСсылка [ВидСкидки $Перечисление.ВидСкидки]
					|,Приоритет
					|,Валюта
					|,Цена
					|,Скидка
					|,ЦенаСоСкидкой
					|
					|FROM 
					|(
					|SELECT 'Клиент скидка' ВидСкидки  
					|    , 10 Приоритет
					|	 , $Перечисление.ВидСкидки.Клиент ВидСкидкиСсылка
					|    , СпрСК.Клиент
					|    , Номенклатура.CODE Код
					|    , $Номенклатура.Идентификатор Идентификатор
					|    , #Товары.Товар
					|    , #Товары.Валюта
					|    , #Товары.Цена
					|    , СпрСК.Скидка
					|    , ROUND(#Товары.Цена*(1-СпрСК.Скидка/100),2) ЦенаСоСкидкой
					|FROM #КлиентыСкидки СпрСК (NOLOCK)
					|INNER JOIN #Товары ON #Товары.Товар = СпрСК.Товар
					|INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON СпрСК.Товар = Номенклатура.ID AND Номенклатура.ISFOLDER = 2 
					|INNER JOIN $Справочник.Контрагенты СпрК (NOLOCK) ON СпрК.ID = СпрСК.Клиент 
					|UNION ALL
					|SELECT 'Клиент глав. скидка' ВидСкидки  
					|    , 10 Приоритет
					|	 , $Перечисление.ВидСкидки.Клиент ВидСкидкиСсылка
					|    , СпрСК.Клиент
					|    , Номенклатура.CODE Код
					|    , $Номенклатура.Идентификатор Идентификатор
					|    , #Товары.Товар
					|    , #Товары.Валюта
					|    , #Товары.Цена
					|    , СпрСК.Скидка
					|    , ROUND(#Товары.Цена*(1-СпрСК.Скидка/100),2) ЦенаСоСкидкой
					|FROM #КлиентыГрСкидки СпрСК (NOLOCK)
					|INNER JOIN #Товары ON #Товары.Товар = СпрСК.Товар
					|INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON СпрСК.Товар = Номенклатура.ID AND Номенклатура.ISFOLDER = 2 
					|INNER JOIN $Справочник.Контрагенты СпрК (NOLOCK) ON СпрК.ID = СпрСК.Клиент 
					|UNION ALL
					|SELECT 'Клиент товар скидка' ВидСкидки  
					|    , 9 Приоритет
					|	 , $Перечисление.ВидСкидки.КлиентТовар ВидСкидкиСсылка
					|    , СпрСК.Клиент
					|    , Номенклатура.CODE Код
					|    , $Номенклатура.Идентификатор Идентификатор
					|    , #Товары.Товар
					|    , #Товары.Валюта
					|    , #Товары.Цена
					|    , СпрСК.Скидка
					|    , ROUND(#Товары.Цена*(1-СпрСК.Скидка/100),2) ЦенаСоСкидкой
					|FROM #КлиентыТоварыСкидки СпрСК (NOLOCK)
					|INNER JOIN #Товары ON #Товары.Товар = СпрСК.Товар
					|INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON СпрСК.Товар = Номенклатура.ID AND Номенклатура.ISFOLDER = 2 
					|INNER JOIN $Справочник.Контрагенты СпрК (NOLOCK) ON СпрК.ID = СпрСК.Клиент --AND $СпрК.КлГруппа <> $ПустойИД
					|WHERE ($СпрК.ПоАлфавиту NOT LIKE (:КодАрхив))
					|UNION ALL
					|SELECT 'Клиент гр.товара скидка' ВидСкидки  
					|    , 9 Приоритет
					|	 , $Перечисление.ВидСкидки.КлиентТоварГруппа ВидСкидкиСсылка
					|    , СпрСК.Клиент 
					|    , Номенклатура.CODE Код
					|    , $Номенклатура.Идентификатор Идентификатор
					|    , #Товары.Товар
					|    , #Товары.Валюта
					|    , #Товары.Цена
					|    , СпрСК.Скидка
					|    , ROUND(#Товары.Цена*(1-СпрСК.Скидка/100),2) ЦенаСоСкидкой
					|FROM #КлиентыТоварыСкидки СпрСК (NOLOCK)
					|INNER JOIN $Справочник.Номенклатура AS НоменклатураГр (NOLOCK) ON СпрСК.Товар = НоменклатураГр.ID AND НоменклатураГр.ISFOLDER = 1 --только группы товаров
					|INNER JOIN Дерево_Номенклатура ДН (NOLOCK) ON ДН.PARENTID = СпрСК.Товар
					|INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON ДН.ID = Номенклатура.ID 
					|INNER JOIN #Товары ON #Товары.Товар = Номенклатура.ID 
					|INNER JOIN $Справочник.Контрагенты СпрК (NOLOCK) ON СпрК.ID = СпрСК.Клиент --AND $СпрК.КлГруппа <> $ПустойИД
					|WHERE ($СпрК.ПоАлфавиту NOT LIKE (:КодАрхив))
					|UNION ALL
					|SELECT 'Клиент группа товар скидка' ВидСкидки  
					|    , 9 Приоритет
					|	 , $Перечисление.ВидСкидки.ГрупповойКлиентТовар ВидСкидкиСсылка
					|    , СпрСК.Клиент
					|    , Номенклатура.CODE Код
					|    , $Номенклатура.Идентификатор Идентификатор
					|    , #Товары.Товар
					|    , #Товары.Валюта
					|    , #Товары.Цена
					|    , СпрСК.Скидка
					|    , ROUND(#Товары.Цена*(1-СпрСК.Скидка/100),2) ЦенаСоСкидкой
					|FROM #КлиентыГрТоварыСкидки СпрСК (NOLOCK)
					|INNER JOIN #Товары ON #Товары.Товар = СпрСК.Товар
					|INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON СпрСК.Товар = Номенклатура.ID AND Номенклатура.ISFOLDER = 2 
					|INNER JOIN $Справочник.Контрагенты СпрК (NOLOCK) ON СпрК.ID = СпрСК.Клиент AND $СпрК.КлГруппа = $ПустойИД
					|WHERE ($СпрК.ПоАлфавиту NOT LIKE (:КодАрхив))
					|UNION ALL
					|SELECT 'Клиент гр.товара скидка' ВидСкидки  
					|    , 9 Приоритет
					|	 , $Перечисление.ВидСкидки.ГрупповойКлиентТовар ВидСкидкиСсылка
					|    , СпрСК.Клиент 
					|    , Номенклатура.CODE Код
					|    , $Номенклатура.Идентификатор Идентификатор
					|    , #Товары.Товар
					|    , #Товары.Валюта
					|    , #Товары.Цена
					|    , СпрСК.Скидка
					|    , ROUND(#Товары.Цена*(1-СпрСК.Скидка/100),2) ЦенаСоСкидкой
					|FROM #КлиентыГрТоварыСкидки СпрСК (NOLOCK)
					|INNER JOIN #Товары ON #Товары.Товар = СпрСК.Товар
					|INNER JOIN $Справочник.Номенклатура AS НоменклатураГр (NOLOCK) ON СпрСК.Товар = НоменклатураГр.ID AND НоменклатураГр.ISFOLDER = 1 --только группы товаров
					|INNER JOIN Дерево_Номенклатура ДН (NOLOCK) ON ДН.PARENTID = СпрСК.Товар
					|INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON ДН.ID = Номенклатура.ID 
					|INNER JOIN $Справочник.Контрагенты СпрК (NOLOCK) ON СпрК.ID = СпрСК.Клиент AND $СпрК.КлГруппа = $ПустойИД
					|WHERE ($СпрК.ПоАлфавиту NOT LIKE (:КодАрхив))
					|
					|";
					
					Если БезАкций=0 Тогда
						ТекстЗапроса=ТекстЗапроса+"
							|UNION ALL 
							|
							|SELECT 'Клиент групп. акц.товар скидка' ВидСкидки  
							|    , 9 Приоритет
							|	 , $Перечисление.ВидСкидки.АкционнаяГрупп ВидСкидкиСсылка
							|    , СпрК.ID Клиент
							|    , Номенклатура.CODE Код
							|    , $Номенклатура.Идентификатор Идентификатор
							|    , #Товары.Товар
							|    , #Товары.Валюта
							|    , #Товары.Цена
							|    , $СпрАСК.ПроцентСкидки Скидка
							|    , ROUND(#Товары.Цена*(1-$СпрАСК.ПроцентСкидки/100),2) ЦенаСоСкидкой
							|FROM $Справочник.АкционныеСкидкиКлиентов СпрАСК (NOLOCK)
							|INNER JOIN #Товары ON #Товары.Товар = $СпрАСК.Товар
							|INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON $СпрАСК.Товар = Номенклатура.ID AND Номенклатура.ISFOLDER = 2 
							|INNER JOIN $Справочник.Контрагенты СпрК (NOLOCK) ON СпрК.ID = СпрАСК.PARENTEXT AND $СпрК.КлГруппа = $ПустойИД
							|WHERE ($СпрК.ПоАлфавиту NOT LIKE (:КодАрхив))
							|AND ($СпрАСК.ДатаНачала <= :ВыбДата AND $СпрАСК.ДатаКонца >= :ВыбДата)
							|UNION ALL 
							|SELECT 'Клиент акц.товар скидка' ВидСкидки  
							|    , 9 Приоритет
							|	 , $Перечисление.ВидСкидки.АкционныйКлиент ВидСкидкиСсылка
							|    , СпрК.ID Клиент
							|    , Номенклатура.CODE Код
							|    , $Номенклатура.Идентификатор Идентификатор
							|    , #Товары.Товар
							|    , #Товары.Валюта
							|    , #Товары.Цена
							|    , $СпрАСК.ПроцентСкидки Скидка
							|    , ROUND(#Товары.Цена*(1-$СпрАСК.ПроцентСкидки/100),2) ЦенаСоСкидкой
							|FROM $Справочник.АкционныеСкидкиКлиентов СпрАСК (NOLOCK)
							|INNER JOIN #Товары ON #Товары.Товар = $СпрАСК.Товар
							|INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON $СпрАСК.Товар = Номенклатура.ID AND Номенклатура.ISFOLDER = 2 
							|INNER JOIN $Справочник.Контрагенты СпрК (NOLOCK) ON СпрК.ID = СпрАСК.PARENTEXT AND $СпрК.КлГруппа <> $ПустойИД
							|WHERE ($СпрК.ПоАлфавиту NOT LIKE (:КодАрхив))
							|AND ($СпрАСК.ДатаНачала <= :ВыбДата AND $СпрАСК.ДатаКонца >= :ВыбДата)
							|UNION ALL
							|SELECT 'Клиент группа. скидка' ВидСкидки
							|    , 9 Приоритет
							|	 , $Перечисление.ВидСкидки.ГрупповойКлиент ВидСкидкиСсылка
							|    , СпрСК.Клиент
							|    , Номенклатура.CODE Код
							|    , $Номенклатура.Идентификатор Идентификатор
							|    , #Товары.Товар
							|    , #Товары.Валюта
							|    , #Товары.Цена
							|    , СпрСК.Скидка
							|    , ROUND(#Товары.Цена*(1-СпрСК.Скидка/100),2) ЦенаСоСкидкой
							|FROM #Товары 
							|CROSS JOIN #КлиентыСкидки СпрСК (NOLOCK) 
							|INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON #Товары.Товар = Номенклатура.ID 
							|INNER JOIN $Справочник.Контрагенты СпрК (NOLOCK) ON СпрК.ID = СпрСК.Клиент AND $СпрК.КлГруппа = $ПустойИД
							|UNION ALL
							|SELECT 'Акц. скидка товар' ВидСкидки
							|    , 9 Приоритет
							|	 , $Перечисление.ВидСкидки.АкционныйТовар ВидСкидкиСсылка
							|    , СпрСК.Клиент
							|    , Номенклатура.CODE Код
							|    , $Номенклатура.Идентификатор Идентификатор
							|    , #Товары.Товар
							|    , #Товары.Валюта
							|    , #Товары.Цена
							|    , $СпрАСТ.ПроцентСкидки Скидка
							|    , ROUND(#Товары.Цена*(1-$СпрАСТ.ПроцентСкидки/100),2) ЦенаСоСкидкой
							|FROM #Товары 
							|INNER JOIN $Справочник.АкционныеСкидкиТоваров СпрАСТ (NOLOCK) ON СпрАСТ.PARENTEXT = #Товары.Товар AND $СпрАСТ.КатегорияЦен = :КатЦены AND $СпрАСТ.УпрАналитика = $ПустойИД AND $СпрАСТ.Специализация = $ПустойИД
							|CROSS JOIN #КлиентыСкидки СпрСК (NOLOCK) 
							|INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON #Товары.Товар = Номенклатура.ID 
							|INNER JOIN $Справочник.Контрагенты СпрК (NOLOCK) ON СпрК.ID = СпрСК.Клиент
							|WHERE ($СпрАСТ.ДатаНачала <= :ВыбДата AND $СпрАСТ.ДатаКонца >= :ВыбДата)
							|UNION ALL
							|SELECT 'Акц. скидка спец. товар ' ВидСкидки
							|    , 9 Приоритет
							|	 , $Перечисление.ВидСкидки.АкционныйСпециализация ВидСкидкиСсылка
							|    , СпрСК.Клиент
							|    , Номенклатура.CODE Код
							|    , $Номенклатура.Идентификатор Идентификатор
							|    , #Товары.Товар
							|    , #Товары.Валюта
							|    , #Товары.Цена
							|    , $СпрАСТ.ПроцентСкидки Скидка
							|    , ROUND(#Товары.Цена*(1-$СпрАСТ.ПроцентСкидки/100),2) ЦенаСоСкидкой
							|FROM #Товары 
							|INNER JOIN $Справочник.АкционныеСкидкиТоваров СпрАСТ (NOLOCK) ON СпрАСТ.PARENTEXT = #Товары.Товар AND $СпрАСТ.КатегорияЦен = :КатЦены AND $СпрАСТ.УпрАналитика = $ПустойИД
							|CROSS JOIN #КлиентыСпецСкидки СпрСК (NOLOCK) 
							|INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON #Товары.Товар = Номенклатура.ID 
							|INNER JOIN $Справочник.Контрагенты СпрК (NOLOCK) ON СпрК.ID = СпрСК.Клиент
							|WHERE ($СпрАСТ.ДатаНачала <= :ВыбДата AND $СпрАСТ.ДатаКонца >= :ВыбДата)
							|AND ($СпрАСТ.Специализация = СпрСК.СпециализацияГруппа1 OR $СпрАСТ.Специализация=$СпрК.Специализация)
							|UNION ALL
							|SELECT 'Акц. спец. цена товар ' ВидСкидки
							|    , 1 Приоритет
							|	 , $Перечисление.ВидСкидки.СпецЦенаКлиентАкция ВидСкидкиСсылка
							|    , #КлиентыСпецЦены.Клиент
							|    , Номенклатура.CODE Код
							|    , $Номенклатура.Идентификатор Идентификатор
							|    , #КлиентыСпецЦены.Товар
							|    , #КлиентыСпецЦены.Валюта
							|    , #Товары.Цена
							|    , ROUND((#Товары.Цена-#КлиентыСпецЦены.Цена)/#Товары.Цена,2) Скидка
							|    , #КлиентыСпецЦены.Цена ЦенаСоСкидкой
							|FROM #КлиентыСпецЦены
							|INNER JOIN #Товары ON #Товары.Товар = #КлиентыСпецЦены.Товар
							|INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON #Товары.Товар = Номенклатура.ID 
							|WHERE ВидЦены = 1
							|UNION ALL
							|SELECT 'Акц. спец. цена товар ' ВидСкидки
							|    , 1 Приоритет
							|	 , $Перечисление.ВидСкидки.СпецЦенаГрупповойКлиентАкция ВидСкидкиСсылка
							|    , #КлиентыГрСпецЦены.Клиент
							|    , Номенклатура.CODE Код
							|    , $Номенклатура.Идентификатор Идентификатор
							|    , #КлиентыГрСпецЦены.Товар
							|    , #КлиентыГрСпецЦены.Валюта
							|    , #Товары.Цена
							|    , ROUND((#Товары.Цена-#КлиентыГрСпецЦены.Цена)/#Товары.Цена,2) Скидка
							|    , #КлиентыГрСпецЦены.Цена ЦенаСоСкидкой
							|FROM #КлиентыГрСпецЦены
							|INNER JOIN #Товары ON #Товары.Товар = #КлиентыГрСпецЦены.Товар
							|INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON #Товары.Товар = Номенклатура.ID 
							|WHERE ВидЦены = 1
							|";
							
					КонецЕсли;
						
					ТекстЗапроса=ТекстЗапроса+"
					|UNION ALL
					|SELECT 'Клиент скидка' ВидСкидки  
					|    , 9 Приоритет
					|	 , $Перечисление.ВидСкидки.Клиент ВидСкидкиСсылка
					|    , СпрСК.Клиент
					|    , Номенклатура.CODE Код
					|    , $Номенклатура.Идентификатор Идентификатор
					|    , #Товары.Товар
					|    , #Товары.Валюта
					|    , #Товары.Цена
					|    , СпрСК.Скидка
					|    , ROUND(#Товары.Цена*(1-СпрСК.Скидка/100),2) ЦенаСоСкидкой
					|FROM #Товары 
					|CROSS JOIN #КлиентыСкидки СпрСК (NOLOCK) 
					|INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON #Товары.Товар = Номенклатура.ID 
					|INNER JOIN $Справочник.Контрагенты СпрК (NOLOCK) ON СпрК.ID = СпрСК.Клиент AND $СпрК.КлГруппа <> $ПустойИД
					|
					|UNION ALL
					|SELECT 'Cпец. цена товар ' ВидСкидки
					|    , 2 Приоритет
					|	 , $Перечисление.ВидСкидки.СпецЦенаКлиентТовар ВидСкидкиСсылка
					|    , #КлиентыСпецЦены.Клиент
					|    , Номенклатура.CODE Код
					|    , $Номенклатура.Идентификатор Идентификатор
					|    , #КлиентыСпецЦены.Товар
					|    , #КлиентыСпецЦены.Валюта
					|    , #Товары.Цена
					|    , ROUND((#Товары.Цена-#КлиентыСпецЦены.Цена)/#Товары.Цена,2) Скидка
					|    , #КлиентыСпецЦены.Цена ЦенаСоСкидкой
					|FROM #КлиентыСпецЦены
					|INNER JOIN #Товары ON #Товары.Товар = #КлиентыСпецЦены.Товар
					|INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON #Товары.Товар = Номенклатура.ID 
					|WHERE ВидЦены = 2
					|
					|UNION ALL
					|SELECT 'Cпец. цена товар ' ВидСкидки
					|    , 2 Приоритет
					|	 , $Перечисление.ВидСкидки.СпецЦенаГрупповойКлиентТовар ВидСкидкиСсылка
					|    , #КлиентыГрСпецЦены.Клиент
					|    , Номенклатура.CODE Код
					|    , $Номенклатура.Идентификатор Идентификатор
					|    , #КлиентыГрСпецЦены.Товар
					|    , #КлиентыГрСпецЦены.Валюта
					|    , #Товары.Цена
					|    , ROUND((#Товары.Цена-#КлиентыГрСпецЦены.Цена)/#Товары.Цена,2) Скидка
					|    , #КлиентыГрСпецЦены.Цена ЦенаСоСкидкой
					|FROM #КлиентыГрСпецЦены
					|INNER JOIN #Товары ON #Товары.Товар = #КлиентыГрСпецЦены.Товар
					|INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON #Товары.Товар = Номенклатура.ID 
					|WHERE ВидЦены = 2
					|
					|
					|) K
					|WHERE Скидка > 0
					|ORDER BY Приоритет,ЦенаСоСкидкой
					|";

	ЗапросСКЛ.УстановитьТекстовыйПараметр("КодАрхив",Константа.СимволАрхивТоваров+"%");
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДата", НаДату);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("КатЦены",ОснКатЦены);
				
	табл = ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса);
	Если НазваниеНабораПрав()="Администратор" Тогда
		табл.ВыбратьСтроку();
	КонецЕсли;
	
	Если табл.КоличествоСтрок()>0 Тогда
		табл.ПолучитьСтрокуПоНомеру(1);
		Цена = табл.ЦенаСоСкидкой;
		ВидСкидки = табл.ВидСкидки;
		Возврат 1
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// для выгрузки WEB
Функция  глПодготовитьСкидкиКлиентов(ОснКатЦены ,НаДату="",ВыбАгент="",РегЦены=0,спТоваров="",ВыбКлиент="",ВремТабл) Экспорт

	Если ПустоеЗначение(НаДату)=1 Тогда
		НаДату=РабочаяДата();
	КонецЕсли;

	ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");
	
	глУдалениеВременнойТаблицыSQL("#Товары");
	глУдалениеВременнойТаблицыSQL("#КлиентыТоварыСкидки");
	глУдалениеВременнойТаблицыSQL("#КлиентыГрТоварыСкидки");
	глУдалениеВременнойТаблицыSQL("#КлиентыСпецСкидки");
	глУдалениеВременнойТаблицыSQL("#КлиентыГрСпецСкидки");
	глУдалениеВременнойТаблицыSQL("#КлиентыСкидки");
	глУдалениеВременнойТаблицыSQL("#КлиентыГрСкидки");
	глУдалениеВременнойТаблицыSQL("#КлиентыСпецЦены");
	глУдалениеВременнойТаблицыSQL("#КлиентыГрСпецЦены");
	
	глУдалениеВременнойТаблицыSQL("#ТоварыПереоценки");

	//получим переоценки	
	ТекстЗапроса = "SELECT $ПереоценкаТоваровСтроки.Товар Товар
	|					, ROUND($ПереоценкаТоваровСтроки.Цена,2) ЦенаНов
	|					, CONVERT(SMALLDATETIME,LEFT(ЖурналПер.DATE_TIME_IDDOC,8),104) ДатаИзмЦены
	|					, DATE_TIME_IDDOC 
	|			   INTO #ТоварыПереоценки
	|			   FROM $ДокументСтроки.ПереоценкаТоваров AS ПереоценкаТоваровСтроки With (NOLOCK) 			
	|			   INNER JOIN $Документ.ПереоценкаТоваров AS ПереоценкаТоваров With (NOLOCK) ON ПереоценкаТоваров.IDDOC = ПереоценкаТоваровСтроки.IDDOC
	|			   INNER JOIN _1SJOURN AS ЖурналПер With (NOLOCK) ON ПереоценкаТоваровСтроки.IDDOC = ЖурналПер.IDDOC 
	|			   WHERE $ПереоценкаТоваров.КатегорияЦены = :КатЦены
	|					AND ЖурналПер.DATE_TIME_IDDOC >= :ВыбДата
	|";
	
	
	ЗапросСКЛ.УстановитьТекстовыйПараметр("КатЦены",ОснКатЦены);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДата",НаДату);
	ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	
	
	//{ Запрос на получение товаров и цен по категории
	ТекстЗапроса = "SELECT  Номенклатура.ID Товар
	|						, $Цены.ЗапретСкидки ЦеныЗапретСкидки
	|						, COALESCE(СпрВ.DESCR,'EUR') Валюта
	|						, $ПоследнееЗначение.Цены.Цена(Цены.ID, :ВыбДата) Цена
	|						, $Номенклатура.БазоваяЕдиницаИзмерения ЕдИзм
	|						, (SELECT TOP 1 ЦенаНов
	|					  	   FROM #ТоварыПереоценки
	|					       WHERE #ТоварыПереоценки.Товар =  Номенклатура.ID
	|					      ORDER BY DATE_TIME_IDDOC DESC ) ЦенаНов
	|						, (SELECT TOP 1 ДатаИзмЦены 
	|					  	   FROM #ТоварыПереоценки
	|					       WHERE #ТоварыПереоценки.Товар =  Номенклатура.ID
	|					      ORDER BY DATE_TIME_IDDOC DESC ) ДатаИзмЦены
	|				INTO #Товары
	|			    FROM $Справочник.Номенклатура AS Номенклатура With (NOLOCK) 
	|				INNER JOIN $Справочник.Цены AS Цены With (NOLOCK) ON Номенклатура.ID = Цены.PARENTEXT AND (Цены.ISMARK = 0)
	|			    LEFT JOIN $Справочник.Валюты СпрВ (NOLOCK) ON  СпрВ.ID = $Цены.Валюта    
	|				WHERE ($Номенклатура.ПоАлфавиту NOT LIKE (:КодАрхив))
	|				AND (Номенклатура.ISMARK = 0)
	|				AND ($Цены.КатегорияЦены = :КатЦены)
	|				AND ($ПоследнееЗначение.Цены.Цена(Цены.ID, :ВыбДата) > 0)
	|";

	ЗапросСКЛ.УстановитьТекстовыйПараметр("КатЦены",ОснКатЦены);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДата",НаДату);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("КодАрхив",Константа.СимволАрхивТоваров+"%");
	Если ПустоеЗначение(спТоваров)=0 Тогда
		ЗапросСКЛ.УложитьСписокОбъектов(спТоваров,"#ТоварыАльт","Номенклатура");
		ТекстЗапроса=ТекстЗапроса+" AND Номенклатура.ID IN (SELECT Val FROM #ТоварыАльт)";
	КонецЕсли;
	ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	//Сообщить("Выгружена таблица товаров с ценами");
	//}
	
	//{ запрос для получения всех клиентов по специализации 
	ТекстЗапроса = "SELECT СпрК.ID Клиент 
	|                    , СпрС.ID СпециализацияГруппа1
	|					 , $СпрК.Специализация Специализация
	|				     , $ПоследнееЗначение.Контрагенты.КлиентСкидка(СпрК.ID, :ВыбДата) Скидка
	|				INTO #КлиентыСпецСкидки
	|			    FROM $Справочник.Контрагенты СпрК (NOLOCK)
	|				INNER JOIN Дерево_СпециализацииКлиентов ДСК (NOLOCK) ON ДСК.ID = $СпрК.Специализация
	|				INNER JOIN $Справочник.СпециализацииКлиентов СпрС (NOLOCK) ON СпрС.ID = ДСК.PARENTID AND СпрС.ISFOLDER = 1 AND $СпрС.УровеньИерархии = 0
	|			    WHERE СпрК.ISMARK = 0
//	|			    AND $ПоследнееЗначение.Контрагенты.КлиентСкидка(СпрК.ID, :ВыбДата)>0
	|				AND ($СпрК.ПоАлфавиту NOT LIKE (:КодАрхив))
	|";
	
	 Если ПустоеЗначение(ВыбАгент)=0 Тогда
	 	ТекстЗапроса=ТекстЗапроса+" AND $СпрК.Агент = :ВыбАгент";
	 Иначе
		 ТекстЗапроса=ТекстЗапроса+" AND СпрК.ID IN (SELECT PARENTEXT FROM $Справочник.КонтактнаяИнформация СпрКК (NOLOCK) WHERE $СпрКК.ЛогинАктивен = 1)";
	КонецЕсли;

	глДобавитьФильтр(ЗапросСКЛ,ТекстЗапроса,"","СпрК","ID",ВыбКлиент,"Контрагенты");

	 
	 ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбАгент",ВыбАгент);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("КатЦены",ОснКатЦены);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДата",НаДату);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("КодАрхив",Константа.СимволАрхивТоваров+"%");

	ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	//Сообщить("Выгружена таблица клиентов со скидками");
	//}

	
	//{ запрос для получения клиентов со скидками
	ТекстЗапроса = "SELECT СпрК.ID Клиент 
	|				     , $ПоследнееЗначение.Контрагенты.КлиентСкидка(СпрК.ID, :ВыбДата) Скидка
	|				INTO #КлиентыСкидки
	|			    FROM $Справочник.Контрагенты СпрК (NOLOCK)
	|			    WHERE СпрК.ISMARK = 0
//	|			    AND $ПоследнееЗначение.Контрагенты.КлиентСкидка(СпрК.ID, :ВыбДата)>0
	|				AND ($СпрК.ПоАлфавиту NOT LIKE (:КодАрхив))
	|";


 	 Если ПустоеЗначение(ВыбАгент)=0 Тогда
		глДобавитьФильтр(ЗапросСКЛ,ТекстЗапроса,"","$СпрК","Агент",ВыбАгент,"Сотрудники");
	 Иначе
		 ТекстЗапроса=ТекстЗапроса+" AND СпрК.ID IN (SELECT PARENTEXT FROM $Справочник.КонтактнаяИнформация СпрКК (NOLOCK) WHERE $СпрКК.ЛогинАктивен = 1)";
	КонецЕсли;
	
	глДобавитьФильтр(ЗапросСКЛ,ТекстЗапроса,"","СпрК","ID",ВыбКлиент,"Контрагенты");

	глДобавитьФильтр(ЗапросСКЛ,ТекстЗапроса,"","СпрК","ID",ВыбКлиент,"Контрагенты");
	
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбАгент",ВыбАгент);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("КодАрхив",Константа.СимволАрхивТоваров+"%");

	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДата",НаДату);
	ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);

	ТекстЗапроса = "SELECT СпрК.ID Клиент 
	|				     , $ПоследнееЗначение.Контрагенты.КлиентСкидка(СпрК.ID, :ВыбДата) Скидка
	|				INTO #КлиентыГрСкидки
	|			    FROM $Справочник.Контрагенты СпрК (NOLOCK)
	|			    WHERE СпрК.ISMARK = 0
//	|			    AND $ПоследнееЗначение.Контрагенты.КлиентСкидка(СпрК.ID, :ВыбДата)>0	
	|				AND ($СпрК.ПоАлфавиту NOT LIKE (:КодАрхив))
	|";

 	 Если ПустоеЗначение(ВыбАгент)=0 Тогда
	 	ТекстЗапроса=ТекстЗапроса+" AND $СпрК.Агент = :ВыбАгент";
	 Иначе
		 ТекстЗапроса=ТекстЗапроса+" AND СпрК.ID IN (SELECT PARENTEXT FROM $Справочник.КонтактнаяИнформация СпрКК (NOLOCK) WHERE $СпрКК.ЛогинАктивен = 1)";
	КонецЕсли;
	
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбАгент",ВыбАгент);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("КодАрхив",Константа.СимволАрхивТоваров+"%");
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДата",НаДату);
	ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	//}

	//{ запрос для получения товаров и групповых клиентов со скидами 
	ТекстЗапроса = "SELECT СпрСК.PARENTEXT Клиент 
	|					   ,$СпрСК.ТовГруппа Товар
	|				     , $ПоследнееЗначение.КлиентСкидки.ПроцентСкидки(СпрСК.ID, :ВыбДата) Скидка
	|				INTO #КлиентыТоварыСкидки
	|			    FROM $Справочник.КлиентСкидки СпрСК (NOLOCK)
	|				INNER JOIN #КлиентыСкидки ON #КлиентыСкидки.Клиент = СпрСК.PARENTEXT
	|				INNER JOIN $Справочник.Контрагенты Клиенты (NOLOCK) ON Клиенты.ID = СпрСК.PARENTEXT
	|			    WHERE СпрСК.ISMARK = 0
	|			    AND $ПоследнееЗначение.КлиентСкидки.ПроцентСкидки(СпрСК.ID, :ВыбДата)>0
	|			    AND ($СпрСК.КатегорияЦены = :КатЦены)
	|				AND ($Клиенты.ПоАлфавиту NOT LIKE (:КодАрхив))
	|";
	
	ЗапросСКЛ.УстановитьТекстовыйПараметр("КатЦены",ОснКатЦены);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДата",НаДату);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("КодАрхив",Константа.СимволАрхивТоваров+"%");
	ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	//Сообщить("Выгружена таблица клиентов и товаров со скидками");

	
	
	ТекстЗапроса = "SELECT СпрСК.PARENTEXT Клиент 
	|					   ,$СпрСК.ТовГруппа Товар
	|				     , $ПоследнееЗначение.КлиентСкидки.ПроцентСкидки(СпрСК.ID, :ВыбДата) Скидка
	|				INTO #КлиентыГрТоварыСкидки
	|			    FROM $Справочник.КлиентСкидки СпрСК (NOLOCK)
	|				INNER JOIN #КлиентыГрСкидки ON #КлиентыГрСкидки.Клиент = СпрСК.PARENTEXT
	|				INNER JOIN $Справочник.Контрагенты Клиенты (NOLOCK) ON Клиенты.ID = СпрСК.PARENTEXT
	|			    WHERE СпрСК.ISMARK = 0
	|			    AND $ПоследнееЗначение.КлиентСкидки.ПроцентСкидки(СпрСК.ID, :ВыбДата)>0
	|			    AND ($СпрСК.КатегорияЦены = :КатЦены)
	|				AND ($Клиенты.ПоАлфавиту NOT LIKE (:КодАрхив))
	|";


	
	ЗапросСКЛ.УстановитьТекстовыйПараметр("КатЦены",ОснКатЦены);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДата",НаДату);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("КодАрхив",Константа.СимволАрхивТоваров+"%");

	ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	
	//}
	
	//{запрос для получения актуальных спец. цен
	ТекстЗапроса=" -- запрос для получения актуальных спец. цен
	|			SELECT Клиент 
	|				, КлиентФилиала 
	|				, Товар 
	|				, $СпрЕд.Единица ЕдИзм
	|				, Цена Цена
	|				, COALESCE(СпрВ.DESCR,'EUR') Валюта
	|				, ВидЦены
	|			 INTO #КлиентыСпецЦены
	|			 FROM (SELECT Клиент
	|						, КлиентФилиала
	|						, Товар
	|						, Единица 
	|						, 2 as ВидЦены -- обычная 
	|						, (SELECT TOP 1 $Рег.Цена Цена
	|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица  AND $Рег.ВидЦены <> 2
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) Цена
	|						, (SELECT TOP 1 $Рег.Валюта 
	|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица AND $Рег.ВидЦены <> 2
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) Валюта
	|						, (SELECT TOP 1 $Рег.ПериодС
	|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				 		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица AND $Рег.ВидЦены <> 2
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) ПериодС
	|						, (SELECT TOP 1 $Рег.ПериодПо
	|						   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица AND $Рег.ВидЦены <> 2
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) ПериодПо
	|					FROM
	|						(SELECT DISTINCT $СпецЦены.Клиент Клиент,  $СпецЦены.КлиентФилиала КлиентФилиала, $СпецЦены.Товар Товар, $СпецЦены.Единица Единица, СпецЦены.DATE_TIME_IDDOC ПозицияДок
	|				 		 FROM $Регистр.СпецЦены AS СпецЦены (NOLOCK)
	|						 INNER JOIN $Справочник.Номенклатура СпрН(NOLOCK) ON СпрН.ID=$СпецЦены.Товар
	|						 INNER JOIN $Справочник.Единицы СпрЕд(NOLOCK) ON СпрЕд.ID = $СпецЦены.Единица
	|						 INNER JOIN $Справочник.Контрагенты СпрК(NOLOCK) ON СпрК.ID=$СпецЦены.Клиент
	|				 		 WHERE $СпецЦены.ПериодС<=:ВыбДата AND СпрК.ID IN (SELECT Клиент FROM #КлиентыТоварыСкидки) AND $СпецЦены.ВидЦены <> 2 -- обычная 
	|						) Товары
	|					UNION ALL 
	|					SELECT Клиент
	|						, КлиентФилиала
	|						, Товар
	|						, Единица 
	|						, 1 as ВидЦены -- акционная 
	|						, (SELECT TOP 1 $Рег.Цена Цена
	|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица  AND $Рег.ВидЦены = 2 -- акционная
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) Цена
	|						, (SELECT TOP 1 $Рег.Валюта 
	|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица AND $Рег.ВидЦены = 2 -- акционная
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) Валюта
	|						, (SELECT TOP 1 $Рег.ПериодС
	|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				 		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица AND $Рег.ВидЦены = 2 -- акционная
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) ПериодС
	|						, (SELECT TOP 1 $Рег.ПериодПо
	|						   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица  AND $Рег.ВидЦены = 2 -- акционная
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) ПериодПо
	|					FROM
	|						(SELECT DISTINCT $СпецЦены.Клиент Клиент,  $СпецЦены.КлиентФилиала КлиентФилиала, $СпецЦены.Товар Товар, $СпецЦены.Единица Единица, СпецЦены.DATE_TIME_IDDOC ПозицияДок
	|				 		 FROM $Регистр.СпецЦены AS СпецЦены (NOLOCK)
	|						 INNER JOIN $Справочник.Номенклатура СпрН(NOLOCK) ON СпрН.ID=$СпецЦены.Товар
	|						 INNER JOIN $Справочник.Единицы СпрЕд(NOLOCK) ON СпрЕд.ID = $СпецЦены.Единица
	|						 INNER JOIN $Справочник.Контрагенты СпрК(NOLOCK) ON СпрК.ID=$СпецЦены.Клиент
	|				 		 WHERE $СпецЦены.ПериодС<=:ВыбДата AND СпрК.ID IN (SELECT Клиент FROM #КлиентыТоварыСкидки) AND $СпецЦены.ВидЦены = 2 -- акционная
	|						) Товары
	|				) ТоварыПоСпецЦенам
	|			 INNER JOIN  $Справочник.Контрагенты СпрК (NOLOCK) ON СпрК.ID = ТоварыПоСпецЦенам.Клиент
	|			 INNER JOIN $Справочник.Номенклатура СпрН(NOLOCK) ON СпрН.ID=ТоварыПоСпецЦенам.Товар
	|			 INNER JOIN $Справочник.Единицы СпрЕд(NOLOCK) ON СпрЕд.ID = ТоварыПоСпецЦенам.Единица 
|			     LEFT JOIN $Справочник.Валюты СпрВ (NOLOCK) ON  СпрВ.ID = ТоварыПоСпецЦенам.Валюта    
	|			 WHERE ПериодС <= :ВыбДата AND ПериодПо >= :ВыбДата AND Цена <> 0 
	|";

	
 	 Если ПустоеЗначение(ВыбАгент)=0 Тогда
	 	ТекстЗапроса=ТекстЗапроса+" AND $СпрК.Агент = :ВыбАгент";
	 Иначе
		 ТекстЗапроса=ТекстЗапроса+" AND СпрК.ID IN (SELECT PARENTEXT FROM $Справочник.КонтактнаяИнформация СпрКК (NOLOCK) WHERE $СпрКК.ЛогинАктивен = 1)";
	КонецЕсли;
	
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбАгент",ВыбАгент);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДата", НаДату);

	ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	//Сообщить("Выгружена таблица клиентов по спец.ценами");
	//}
	
	//{ запрос для получения актуальных спец. цен
	ТекстЗапроса=" -- запрос для получения актуальных спец. цен
	|			SELECT Клиент 
	|				, КлиентФилиала 
	|				, Товар 
	|				, $СпрЕд.Единица ЕдИзм
	|				, Цена Цена
	|				, COALESCE(СпрВ.DESCR,'EUR') Валюта
	|				, ВидЦены
	|			 INTO #КлиентыГрСпецЦены
	|			 FROM (SELECT Клиент
	|						, КлиентФилиала
	|						, Товар
	|						, Единица 
	|						, 2 as ВидЦены -- обычная 
	|						, (SELECT TOP 1 $Рег.Цена Цена
	|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица  AND $Рег.ВидЦены <> 2
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) Цена
	|						, (SELECT TOP 1 $Рег.Валюта 
	|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица AND $Рег.ВидЦены <> 2
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) Валюта
	|						, (SELECT TOP 1 $Рег.ПериодС
	|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				 		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица AND $Рег.ВидЦены <> 2
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) ПериодС
	|						, (SELECT TOP 1 $Рег.ПериодПо
	|						   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица AND $Рег.ВидЦены <> 2
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) ПериодПо
	|					FROM
	|						(SELECT DISTINCT $СпецЦены.Клиент Клиент,  $СпецЦены.КлиентФилиала КлиентФилиала, $СпецЦены.Товар Товар, $СпецЦены.Единица Единица, СпецЦены.DATE_TIME_IDDOC ПозицияДок
	|				 		 FROM $Регистр.СпецЦены AS СпецЦены (NOLOCK)
	|						 INNER JOIN $Справочник.Номенклатура СпрН(NOLOCK) ON СпрН.ID=$СпецЦены.Товар
	|						 INNER JOIN $Справочник.Единицы СпрЕд(NOLOCK) ON СпрЕд.ID = $СпецЦены.Единица
	|						 INNER JOIN $Справочник.Контрагенты СпрК(NOLOCK) ON СпрК.ID=$СпецЦены.Клиент
	|				 		 WHERE $СпецЦены.ПериодС<=:ВыбДата AND СпрК.ID IN (SELECT Клиент FROM #КлиентыГрТоварыСкидки) AND $СпецЦены.ВидЦены <> 2 -- обычная 
	|						) Товары
	|					UNION ALL 
	|					SELECT Клиент
	|						, КлиентФилиала
	|						, Товар
	|						, Единица 
	|						, 1 as ВидЦены -- акционная 
	|						, (SELECT TOP 1 $Рег.Цена Цена
	|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица  AND $Рег.ВидЦены = 2 -- акционная
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) Цена
	|						, (SELECT TOP 1 $Рег.Валюта 
	|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица AND $Рег.ВидЦены = 2 -- акционная
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) Валюта
	|						, (SELECT TOP 1 $Рег.ПериодС
	|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				 		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица AND $Рег.ВидЦены = 2 -- акционная
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) ПериодС
	|						, (SELECT TOP 1 $Рег.ПериодПо
	|						   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица  AND $Рег.ВидЦены = 2 -- акционная
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) ПериодПо
	|					FROM
	|						(SELECT DISTINCT $СпецЦены.Клиент Клиент,  $СпецЦены.КлиентФилиала КлиентФилиала, $СпецЦены.Товар Товар, $СпецЦены.Единица Единица, СпецЦены.DATE_TIME_IDDOC ПозицияДок
	|				 		 FROM $Регистр.СпецЦены AS СпецЦены (NOLOCK)
	|						 INNER JOIN $Справочник.Номенклатура СпрН(NOLOCK) ON СпрН.ID=$СпецЦены.Товар
	|						 INNER JOIN $Справочник.Единицы СпрЕд(NOLOCK) ON СпрЕд.ID = $СпецЦены.Единица
	|						 INNER JOIN $Справочник.Контрагенты СпрК(NOLOCK) ON СпрК.ID=$СпецЦены.Клиент
	|				 		 WHERE $СпецЦены.ПериодС<=:ВыбДата AND СпрК.ID IN (SELECT Клиент FROM #КлиентыГрТоварыСкидки) AND $СпецЦены.ВидЦены = 2 -- акционная
	|						) Товары
	|				) ТоварыПоСпецЦенам
	|			 INNER JOIN  $Справочник.Контрагенты СпрК (NOLOCK) ON СпрК.ID = ТоварыПоСпецЦенам.Клиент
	|			 INNER JOIN $Справочник.Номенклатура СпрН(NOLOCK) ON СпрН.ID=ТоварыПоСпецЦенам.Товар
	|			 INNER JOIN $Справочник.Единицы СпрЕд(NOLOCK) ON СпрЕд.ID = ТоварыПоСпецЦенам.Единица 
|			     LEFT JOIN $Справочник.Валюты СпрВ (NOLOCK) ON  СпрВ.ID = ТоварыПоСпецЦенам.Валюта    
	|			 WHERE ПериодС <= :ВыбДата AND ПериодПо >= :ВыбДата AND Цена <> 0 
	|";

 	 Если ПустоеЗначение(ВыбАгент)=0 Тогда
	 	ТекстЗапроса=ТекстЗапроса+" AND $СпрК.Агент = :ВыбАгент";
	 Иначе
		 ТекстЗапроса=ТекстЗапроса+" AND СпрК.ID IN (SELECT PARENTEXT FROM $Справочник.КонтактнаяИнформация СпрКК (NOLOCK) WHERE $СпрКК.ЛогинАктивен = 1)";
	КонецЕсли;

	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбАгент",ВыбАгент);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДата", НаДату);

	ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	//Сообщить("Выгружена таблица групп. клиентов по спец.ценами");
	//} 
	
	
	СтрокаВставка="";	
	Если ПустоеЗначение(ВремТабл)=0 Тогда
		ТекстЗапроса = "
						|SELECT 
						|Код 
						|,K.Товар
						|,K.Клиент
						|,K.ВидСкидкиСсылка
						|,K.ВидСкидки
						|,K.Приоритет
						|,K.Валюта
						|,K.Цена
						|,ЦенаНов
						|,ДатаИзмЦены
						|,K.Скидка
						|,K.ЦенаСоСкидкой
						|,K.ЕдИзм
						|INTO "+ВремТабл;
	Иначе
		ТекстЗапроса = "
						|SELECT 
						|Код 
						|,Товар [Товар $Справочник.Номенклатура]
						|,Клиент [Клиент $Справочник.Контрагенты]
						|,ВидСкидкиСсылка [ВидСкидки $Перечисление.ВидСкидки]
						|,ВидСкидки
						|,Приоритет
						|,Валюта
						|,Цена
						|,ЦенаНов
						|,ДатаИзмЦены
						|,Скидка
						|,ЦенаСоСкидкой
						|,ЕдИзм [ЕдИзм $Перечисление.ЕдиницыИзмерения]
						|";
		
	КонецЕсли;

	//{ Выбор всех цен со скидками
	ТекстЗапроса = ТекстЗапроса+ "
					|FROM 
					|(
					|SELECT 'Клиент товар скидка' ВидСкидки  
					|    , 9 Приоритет
					|	 , $Перечисление.ВидСкидки.КлиентТовар ВидСкидкиСсылка
					|    , СпрСК.Клиент
					|    , Номенклатура.CODE Код
					|    , $Номенклатура.Идентификатор Идентификатор
					|    , #Товары.Товар
					|    , #Товары.Валюта
					|    , #Товары.Цена
					|    , СпрСК.Скидка
					|    , ROUND(#Товары.Цена*(1-СпрСК.Скидка/100),2) ЦенаСоСкидкой
					|	 , ЕдИзм
					|FROM #КлиентыТоварыСкидки СпрСК (NOLOCK)
					|INNER JOIN #Товары ON #Товары.Товар = СпрСК.Товар
					|INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON СпрСК.Товар = Номенклатура.ID AND Номенклатура.ISFOLDER = 2 
					|INNER JOIN $Справочник.Контрагенты СпрК (NOLOCK) ON СпрК.ID = СпрСК.Клиент --AND $СпрК.КлГруппа <> $ПустойИД
					|WHERE ($СпрК.ПоАлфавиту NOT LIKE (:КодАрхив))
					|UNION 
					|SELECT 'Клиент гр.товара скидка' ВидСкидки  
					|    , 9 Приоритет
					|	 , $Перечисление.ВидСкидки.КлиентТоварГруппа ВидСкидкиСсылка
					|    , СпрСК.Клиент 
					|    , Номенклатура.CODE Код
					|    , $Номенклатура.Идентификатор Идентификатор
					|    , #Товары.Товар
					|    , #Товары.Валюта
					|    , #Товары.Цена
					|    , СпрСК.Скидка
					|    , ROUND(#Товары.Цена*(1-СпрСК.Скидка/100),2) ЦенаСоСкидкой
					|	 , ЕдИзм
					|FROM #КлиентыТоварыСкидки СпрСК (NOLOCK)
					|INNER JOIN #Товары ON #Товары.Товар = СпрСК.Товар
					|INNER JOIN $Справочник.Номенклатура AS НоменклатураГр (NOLOCK) ON СпрСК.Товар = НоменклатураГр.ID AND НоменклатураГр.ISFOLDER = 1 --только группы товаров
					|INNER JOIN Дерево_Номенклатура ДН (NOLOCK) ON ДН.PARENTID = СпрСК.Товар
					|INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON ДН.ID = Номенклатура.ID 
					|INNER JOIN $Справочник.Контрагенты СпрК (NOLOCK) ON СпрК.ID = СпрСК.Клиент --AND $СпрК.КлГруппа <> $ПустойИД
					|WHERE ($СпрК.ПоАлфавиту NOT LIKE (:КодАрхив))
					|
					|UNION ALL
					|SELECT 'Клиент скидка' ВидСкидки  
					|    , 9 Приоритет
					|	 , $Перечисление.ВидСкидки.Клиент ВидСкидкиСсылка
					|    , СпрСК.Клиент
					|    , Номенклатура.CODE Код
					|    , $Номенклатура.Идентификатор Идентификатор
					|    , #Товары.Товар
					|    , #Товары.Валюта
					|    , #Товары.Цена
					|    , СпрСК.Скидка
					|    , ROUND(#Товары.Цена*(1-СпрСК.Скидка/100),2) ЦенаСоСкидкой
					|	 , ЕдИзм
					|FROM #Товары 
					|CROSS JOIN #КлиентыСкидки СпрСК (NOLOCK) 
					|INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON #Товары.Товар = Номенклатура.ID 
					|INNER JOIN $Справочник.Контрагенты СпрК (NOLOCK) ON СпрК.ID = СпрСК.Клиент AND $СпрК.КлГруппа <> $ПустойИД
					|UNION ALL
					|SELECT 'Клиент группа. скидка' ВидСкидки
					|    , 9 Приоритет
					|	 , $Перечисление.ВидСкидки.ГрупповойКлиент ВидСкидкиСсылка
					|    , СпрСК.Клиент
					|    , Номенклатура.CODE Код
					|    , $Номенклатура.Идентификатор Идентификатор
					|    , #Товары.Товар
					|    , #Товары.Валюта
					|    , #Товары.Цена
					|    , СпрСК.Скидка
					|    , ROUND(#Товары.Цена*(1-СпрСК.Скидка/100),2) ЦенаСоСкидкой
					|	 , ЕдИзм
					|FROM #Товары 
					|CROSS JOIN #КлиентыСкидки СпрСК (NOLOCK) 
					|INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON #Товары.Товар = Номенклатура.ID 
					|INNER JOIN $Справочник.Контрагенты СпрК (NOLOCK) ON СпрК.ID = СпрСК.Клиент AND $СпрК.КлГруппа = $ПустойИД
					|";

	Если РегЦены=0 Тогда
		//все цены
		ТекстЗапроса=ТекстЗапроса+"	
						|UNION ALL 
						|
						|SELECT 'Клиент групп. акц.товар скидка' ВидСкидки  
						|    , 9 Приоритет
						|	 , $Перечисление.ВидСкидки.АкционнаяГрупп ВидСкидкиСсылка
						|    , СпрК.ID Клиент
						|    , Номенклатура.CODE Код
						|    , $Номенклатура.Идентификатор Идентификатор
						|    , #Товары.Товар
						|    , #Товары.Валюта
						|    , #Товары.Цена
						|    , $СпрАСК.ПроцентСкидки Скидка
						|    , ROUND(#Товары.Цена*(1-$СпрАСК.ПроцентСкидки/100),2) ЦенаСоСкидкой
						|	 , ЕдИзм
						|FROM $Справочник.АкционныеСкидкиКлиентов СпрАСК (NOLOCK)
						|INNER JOIN #Товары ON #Товары.Товар = $СпрАСК.Товар
						|INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON $СпрАСК.Товар = Номенклатура.ID AND Номенклатура.ISFOLDER = 2 
						|INNER JOIN $Справочник.Контрагенты СпрК (NOLOCK) ON СпрК.ID = СпрАСК.PARENTEXT AND $СпрК.КлГруппа = $ПустойИД
						|WHERE ($СпрК.ПоАлфавиту NOT LIKE (:КодАрхив))
						|AND ($СпрАСК.ДатаНачала <= :ВыбДата AND $СпрАСК.ДатаКонца >= :ВыбДата)
						|UNION ALL
						|SELECT 'Акц. скидка товар' ВидСкидки
						|    , 9 Приоритет
						|	 , $Перечисление.ВидСкидки.АкционныйТовар ВидСкидкиСсылка
						|    , СпрСК.Клиент
						|    , Номенклатура.CODE Код
						|    , $Номенклатура.Идентификатор Идентификатор
						|    , #Товары.Товар
						|    , #Товары.Валюта
						|    , #Товары.Цена
						|    , $СпрАСТ.ПроцентСкидки Скидка
						|    , ROUND(#Товары.Цена*(1-$СпрАСТ.ПроцентСкидки/100),2) ЦенаСоСкидкой
						|	 , ЕдИзм
						|FROM #Товары 
						|INNER JOIN $Справочник.АкционныеСкидкиТоваров СпрАСТ (NOLOCK) ON СпрАСТ.PARENTEXT = #Товары.Товар AND $СпрАСТ.КатегорияЦен = :КатЦены AND $СпрАСТ.УпрАналитика = $ПустойИД AND $СпрАСТ.Специализация = $ПустойИД
						|CROSS JOIN #КлиентыСкидки СпрСК (NOLOCK) 
						|INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON #Товары.Товар = Номенклатура.ID 
						|INNER JOIN $Справочник.Контрагенты СпрК (NOLOCK) ON СпрК.ID = СпрСК.Клиент
						|WHERE ($СпрАСТ.ДатаНачала <= :ВыбДата AND $СпрАСТ.ДатаКонца >= :ВыбДата)
						|UNION ALL 
						|SELECT 'Клиент акц.товар скидка' ВидСкидки  
						|    , 9 Приоритет
						|	 , $Перечисление.ВидСкидки.АкционныйКлиент ВидСкидкиСсылка
						|    , СпрК.ID Клиент
						|    , Номенклатура.CODE Код
						|    , $Номенклатура.Идентификатор Идентификатор
						|    , #Товары.Товар
						|    , #Товары.Валюта
						|    , #Товары.Цена
						|    , $СпрАСК.ПроцентСкидки Скидка
						|    , ROUND(#Товары.Цена*(1-$СпрАСК.ПроцентСкидки/100),2) ЦенаСоСкидкой
						|	 , ЕдИзм
						|FROM $Справочник.АкционныеСкидкиКлиентов СпрАСК (NOLOCK)
						|INNER JOIN #Товары ON #Товары.Товар = $СпрАСК.Товар
						|INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON $СпрАСК.Товар = Номенклатура.ID AND Номенклатура.ISFOLDER = 2 
						|INNER JOIN $Справочник.Контрагенты СпрК (NOLOCK) ON СпрК.ID = СпрАСК.PARENTEXT AND $СпрК.КлГруппа <> $ПустойИД
						|WHERE ($СпрК.ПоАлфавиту NOT LIKE (:КодАрхив))
						|AND ($СпрАСК.ДатаНачала <= :ВыбДата AND $СпрАСК.ДатаКонца >= :ВыбДата)
						|UNION ALL
						|SELECT 'Акц. скидка спец. товар ' ВидСкидки
						|    , 9 Приоритет
						|	 , $Перечисление.ВидСкидки.АкционныйСпециализация ВидСкидкиСсылка
						|    , СпрСК.Клиент
						|    , Номенклатура.CODE Код
						|    , $Номенклатура.Идентификатор Идентификатор
						|    , #Товары.Товар
						|    , #Товары.Валюта
						|    , #Товары.Цена
						|    , $СпрАСТ.ПроцентСкидки Скидка
						|    , ROUND(#Товары.Цена*(1-$СпрАСТ.ПроцентСкидки/100),2) ЦенаСоСкидкой
						|	 , ЕдИзм
						|FROM #Товары 
						|INNER JOIN $Справочник.АкционныеСкидкиТоваров СпрАСТ (NOLOCK) ON СпрАСТ.PARENTEXT = #Товары.Товар AND $СпрАСТ.КатегорияЦен = :КатЦены AND $СпрАСТ.УпрАналитика = $ПустойИД
						|INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON #Товары.Товар = Номенклатура.ID 
	//					|INNER JOIN $Справочник.Контрагенты СпрК (NOLOCK) ON СпрК.ID = СпрСК.Клиент
						|INNER JOIN #КлиентыСпецСкидки СпрСК (NOLOCK) ON $СпрАСТ.Специализация = СпрСК.СпециализацияГруппа1 OR $СпрАСТ.Специализация=СпрСК.Специализация
						|WHERE ($СпрАСТ.ДатаНачала <= :ВыбДата AND $СпрАСТ.ДатаКонца >= :ВыбДата)
	//					|AND ($СпрАСТ.Специализация = СпрСК.СпециализацияГруппа1 OR $СпрАСТ.Специализация=$СпрК.Специализация)
						|
						|UNION ALL
						|SELECT 'Cпец. цена товар ' ВидСкидки
						|    , 2 Приоритет
						|	 , $Перечисление.ВидСкидки.СпецЦенаКлиентТовар ВидСкидкиСсылка
						|    , #КлиентыСпецЦены.Клиент
						|    , Номенклатура.CODE Код
						|    , $Номенклатура.Идентификатор Идентификатор
						|    , #КлиентыСпецЦены.Товар
						|    , #КлиентыСпецЦены.Валюта
						|    , #Товары.Цена
						|    , ROUND((#Товары.Цена-#КлиентыСпецЦены.Цена)/#Товары.Цена,2) Скидка
						|    , #КлиентыСпецЦены.Цена ЦенаСоСкидкой
						|	 , #КлиентыСпецЦены.ЕдИзм
						|FROM #КлиентыСпецЦены
						|INNER JOIN #Товары ON #Товары.Товар = #КлиентыСпецЦены.Товар
						|INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON #Товары.Товар = Номенклатура.ID 
						|WHERE ВидЦены = 2
						|
						|UNION ALL
						|SELECT 'Акц. спец. цена товар ' ВидСкидки
						|    , 1 Приоритет
						|	 , $Перечисление.ВидСкидки.СпецЦенаКлиентАкция ВидСкидкиСсылка
						|    , #КлиентыСпецЦены.Клиент
						|    , Номенклатура.CODE Код
						|    , $Номенклатура.Идентификатор Идентификатор
						|    , #КлиентыСпецЦены.Товар
						|    , #КлиентыСпецЦены.Валюта
						|    , #Товары.Цена
						|    , ROUND((#Товары.Цена-#КлиентыСпецЦены.Цена)/#Товары.Цена,2) Скидка
						|    , #КлиентыСпецЦены.Цена ЦенаСоСкидкой
						|	 , #КлиентыСпецЦены.ЕдИзм
						|FROM #КлиентыСпецЦены
						|INNER JOIN #Товары ON #Товары.Товар = #КлиентыСпецЦены.Товар
						|INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON #Товары.Товар = Номенклатура.ID 
						|WHERE ВидЦены = 1
						|UNION ALL
						|SELECT 'Cпец. цена товар ' ВидСкидки
						|    , 2 Приоритет
						|	 , $Перечисление.ВидСкидки.СпецЦенаГрупповойКлиентТовар ВидСкидкиСсылка
						|    , #КлиентыГрСпецЦены.Клиент
						|    , Номенклатура.CODE Код
						|    , $Номенклатура.Идентификатор Идентификатор
						|    , #КлиентыГрСпецЦены.Товар
						|    , #КлиентыГрСпецЦены.Валюта
						|    , #Товары.Цена
						|    , ROUND((#Товары.Цена-#КлиентыГрСпецЦены.Цена)/#Товары.Цена,2) Скидка
						|    , #КлиентыГрСпецЦены.Цена ЦенаСоСкидкой
						|	 , #КлиентыГрСпецЦены.ЕдИзм
						|FROM #КлиентыГрСпецЦены
						|INNER JOIN #Товары ON #Товары.Товар = #КлиентыГрСпецЦены.Товар
						|INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON #Товары.Товар = Номенклатура.ID 
						|WHERE ВидЦены = 2
						|
						|UNION ALL
						|SELECT 'Акц. спец. цена товар ' ВидСкидки
						|    , 1 Приоритет
						|	 , $Перечисление.ВидСкидки.СпецЦенаГрупповойКлиентАкция ВидСкидкиСсылка
						|    , #КлиентыГрСпецЦены.Клиент
						|    , Номенклатура.CODE Код
						|    , $Номенклатура.Идентификатор Идентификатор
						|    , #КлиентыГрСпецЦены.Товар
						|    , #КлиентыГрСпецЦены.Валюта
						|    , #Товары.Цена
						|    , ROUND((#Товары.Цена-#КлиентыГрСпецЦены.Цена)/#Товары.Цена,2) Скидка
						|    , #КлиентыГрСпецЦены.Цена ЦенаСоСкидкой
						|	 , #КлиентыГрСпецЦены.ЕдИзм
						|FROM #КлиентыГрСпецЦены
						|INNER JOIN #Товары ON #Товары.Товар = #КлиентыГрСпецЦены.Товар
						|INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON #Товары.Товар = Номенклатура.ID 
						|WHERE ВидЦены = 1
						|";
	КонецЕсли;
	
	ТекстЗапроса=ТекстЗапроса+") K
						|INNER JOIN $Справочник.Контрагенты СпрК (NOLOCK) ON СпрК.ID = K.Клиент
						|INNER JOIN #Товары ON #Товары.Товар = K.Товар 
						|ORDER BY Код,$СпрК.ПоАлфавиту,ЦенаСоСкидкой
						|";

	ЗапросСКЛ.УстановитьТекстовыйПараметр("КодАрхив",Константа.СимволАрхивТоваров+"%");
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДата", НаДату);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("КатЦены",ОснКатЦены);
				
	//ЗапросСКЛ.Отладка(1);
	
	Если ПустоеЗначение(ВремТабл)=0 Тогда
		ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
		табл = СоздатьОбъект("ТаблицаЗначений");
	Иначе
		табл = ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса);
	КонецЕсли;
	//}
	
	Если НазваниеНабораПрав()="Администратор" Тогда
		//табл.ВыбратьСтроку();
	КонецЕсли;
	
	Возврат табл;
	
КонецФункции

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Функция СкидкаКлиенту(Конт,Контра,Цена,Групповой = 0,БезАкций = 0, КатЦен = "",ВозвратВидСкидки="",ВозврЦена=0) Экспорт
	Если ПустоеЗначение(Контра) = 1 Тогда
		Возврат "";
	КонецЕсли;
	
	
	// получим дату для расчета цены
	Если глЕстьРеквизитШапки("ДатаПоставки",Конт.Вид()) = 1 Тогда
		ДатаЦены = Конт.ДатаПоставки;
		Если Число(ДатаЦены) = 0 Тогда
			ДатаЦены = Конт.ДатаДок;
		КонецЕсли;
	Иначе
		ДатаЦены = Конт.ДатаДок;
	КонецЕсли;
	
	Если ПустоеЗначение(КатЦен)=1 Тогда
		КатЦен = Конт.КатегорияЦены;
	КонецЕсли;

	
	Если БезАкций=0 Тогда
		// акционная скидка клиента, указанного в документе
		СпрАкцСкидкаКлиент = СоздатьОбъект("Справочник.АкционныеСкидкиКлиентов");
		СпрАкцСкидкаКлиент.ИспользоватьВладельца(Контра);
		
		// PR 03.12.07
		Найден=СпрАкцСкидкаКлиент.ВыбратьЭлементыПоРеквизиту("Товар",Конт.Товар,1,0);
		Найден=0;
		Пока СпрАкцСкидкаКлиент.ПолучитьЭлемент() = 1 Цикл
			Если СпрАкцСкидкаКлиент.ПометкаУдаления() = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			//контДата = ?( Конт.Вид() = "РасходнаяНакладная", Конт.ДатаПоставки, Конт.ДатаДок );
			контДата = ДатаЦены;
			Если ( контДата >= СпрАкцСкидкаКлиент.ДатаНачала ) и ( контДата <= СпрАкцСкидкаКлиент.ДатаКонца ) Тогда
				Найден=1; //если найден товар удовлетворяющий условию, то по группам искать не нужно
			КонецЕсли;
		КонецЦикла;
		// PR 03.12.07
		
		Если (Найден = 0) Тогда
			Род=Конт.Товар.Родитель;
			Пока (СпрАкцСкидкаКлиент.ВыбратьЭлементыПоРеквизиту("Товар",Род,1,0)=0) И (Род.Уровень()>1) Цикл 
				Род=Род.Родитель;
			КонецЦикла;
		Иначе
			СпрАкцСкидкаКлиент.ВыбратьЭлементыПоРеквизиту("Товар",Конт.Товар,1,0); //еще раз выберем элементы
		КонецЕсли;
		
		Пока СпрАкцСкидкаКлиент.ПолучитьЭлемент() = 1 Цикл
			Если СпрАкцСкидкаКлиент.ПометкаУдаления() = 1 Тогда
				Продолжить;
			КонецЕсли;
			// сем \\
			контДата = ?( Конт.Вид() = "РасходнаяНакладная", Конт.ДатаПоставки, Конт.ДатаДок );
			контДата = ДатаЦены;
			Если ( контДата >= СпрАкцСкидкаКлиент.ДатаНачала ) и ( контДата <= СпрАкцСкидкаКлиент.ДатаКонца ) Тогда
				
				промЦена = Цена * ( 100 - СпрАкцСкидкаКлиент.ПроцентСкидки ) / 100;

				Если промЦена<ВозврЦена Тогда
					ВозврЦена = промЦена;
				КонецЕсли;
				//останавливаемся только если цена со скидкой ниже				
				Если Групповой = 0 Тогда
					ВозвратВидСкидки = Перечисление.ВидСкидки.АкционныйКлиент; 
				Иначе
					ВозвратВидСкидки = Перечисление.ВидСкидки.АкционнаяГрупп;
				КонецЕсли;
					
			КонецЕсли;
			// сем //
		КонецЦикла;
		
	КонецЕсли;
	
	// затем обычная скидка клиента, указанного в документе, на определенные товары
	Есть = 0;
	
	Если ПустоеЗначение(КатЦен)=1 Тогда
		КатегорияЦены = ?(глЕстьРеквизитШапки("КатегорияЦены", Конт.Вид()) = 1,Конт.КатегорияЦены,Константа.ОсновнаяКатегорияЦены);
		КатЦен = КатегорияЦены;
	КонецЕсли;
	
	Процент = семПроцентСкидкиКлиентуНаТовар(Контра,Конт.Товар,КатЦен,ДатаЦены,Есть);
	Если Есть = 1 Тогда
		промЦена = Цена*(100 - Процент)/100;
			Если промЦена<ВозврЦена Тогда
				ВозврЦена = промЦена;
			КонецЕсли;
		
		Если Групповой = 0 Тогда
			ВозвратВидСкидки = Перечисление.ВидСкидки.КлиентТовар;
		Иначе
			ВозвратВидСкидки = Перечисление.ВидСкидки.ГрупповойКлиентТовар;
		КонецЕсли;

		Если КатЦен.РежимМаксСкидкиОткл = 1  Тогда
			Цена = ВозврЦена;
			Возврат ВозвратВидСкидки;
		КонецЕсли;

		
	КонецЕсли;          
	
	
	Если (ПустоеЗначение( Контра.ДопКод ) = 0) И (Конт.Вид()="ЗаказОтПокупателя") Тогда
		СкидкаПЛ = семПолучитьСкидкуПЛ( 1, Контра.ДопКод, ДатаЦены );
		Если СкидкаПЛ > 0 Тогда
			промЦена = Цена*(100 - СкидкаПЛ)/100;
			Если промЦена<ВозврЦена Тогда
				ВозврЦена = промЦена;
			КонецЕсли;
			
			Если Групповой = 0 Тогда
				ВозвратВидСкидки =  Перечисление.ВидСкидки.КлиентDEAR;
			Иначе
				ВозвратВидСкидки =  Перечисление.ВидСкидки.ГрупповойКлиент;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// затем скидка клиенту вне зависимости от товара (из справочника "Контрагенты")
		
		КлиентСкидки = ?(ПустоеЗначение(Контра.КлиентДляСкидок)=1,Контра,Контра.КлиентДляСкидок);
		КлиентСкидки.ИспользоватьДату("");
		СкидкаКл = КлиентСкидки.КлиентСкидка.Получить(ДатаЦены);
		
		Если СкидкаКл > 0 Тогда
			промЦена = Цена*(100 - СкидкаКл)/100;
			Если промЦена<ВозврЦена Тогда
				ВозврЦена = промЦена;
			КонецЕсли;
			
			Если Групповой = 0 Тогда
				ВозвратВидСкидки =   Перечисление.ВидСкидки.Клиент;
			Иначе
				ВозвратВидСкидки =   Перечисление.ВидСкидки.ГрупповойКлиент;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// и апофеоз поиска скидок клиенту - это скидка для так называемого КлГруппа
	Если (Групповой = 0) и (Контра <> Контра.КлГруппа) Тогда
		СкидкаКлиенту(Конт,Контра.КлГруппа,Цена,1,БезАкций,КатЦен,ВозвратВидСкидки,ВозврЦена);
	КонецЕсли;
	
	Если Групповой =0 Тогда
		Цена = ВозврЦена;
		Возврат ВозвратВидСкидки;
	КонецЕсли;
	
	// похоже, что клиент не получит никакой скидки...
	Возврат "";
КонецФункции

Функция СпецЦенаКлиенту(Конт,Контра,Цена,НаДату, Групповой = 0,КонтраФилиала = "") Экспорт

	Запрос=СоздатьОбъект("ODBCRecordSet");

	Если ПустоеЗначение(КонтраФилиала)=0 Тогда
		Условие = " AND $Рег.Товар=:ВыбТовар AND $Рег.Клиент=:ВыбКлиент AND $Рег.КлиентФилиала=:ВыбКлиентФилиала  AND $Рег.Единица=:ВыбЕдиница";
	Иначе
		Условие = " AND $Рег.Товар=:ВыбТовар AND $Рег.Клиент=:ВыбКлиент AND $Рег.КлиентФилиала=$ПустойИД  AND $Рег.Единица=:ВыбЕдиница";
	КонецЕсли;	
	
	ТекстЗапроса="SELECT Товар [Товар $Справочник.Номенклатура]
	|					, Единица [Единица $Справочник.Единицы]
	|			  		, Цена
	|					, ВидЦены
	|			  FROM (SELECT 1 as ВидЦены -- акция
	|						, :ВыбТовар Товар
	|						, :ВыбЕдиница Единица 
	|						, (SELECT TOP 1 $Рег.Цена*$ПоследнееЗначение.Валюты.Курс($Рег.Валюта,:ДатаСкидки)/$ПоследнееЗначение.Валюты.Курс(:ВалютаДок,:ДатаСкидки) Цена
	|			 			   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|			  			   WHERE $Рег.ПериодС<=:ДатаСкидки AND $Рег.ПериодПо >= :ДатаСкидки "+Условие+" AND $Рег.ВидЦены = 2 -- акция на период
	|			  			   ORDER BY Рег.DATE_TIME_IDDOC DESC) Цена
	|						, (SELECT TOP 1 $Рег.ПериодС
	|			 			   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|			  			   WHERE $Рег.ПериодС<=:ДатаСкидки AND $Рег.ПериодПо >= :ДатаСкидки "+Условие+" AND $Рег.ВидЦены = 2 -- акция на период
	|			  			   ORDER BY Рег.DATE_TIME_IDDOC DESC) ПериодС
	|						, (SELECT TOP 1 $Рег.ПериодПо
	|			 			   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|			  			   WHERE $Рег.ПериодС<=:ДатаСкидки AND $Рег.ПериодПо >= :ДатаСкидки "+Условие+" AND $Рег.ВидЦены = 2 -- акция на период
	|			  			   ORDER BY Рег.DATE_TIME_IDDOC DESC) ПериодПо
	|					 UNION ALL
	|					 SELECT	2 as ВидЦены -- обычная 
	|						,:ВыбТовар Товар
	|						, :ВыбЕдиница Единица 
	|						, (SELECT TOP 1 $Рег.Цена*$ПоследнееЗначение.Валюты.Курс($Рег.Валюта,:ДатаСкидки)/$ПоследнееЗначение.Валюты.Курс(:ВалютаДок,:ДатаСкидки) Цена
	|			 			   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|			  			   WHERE $Рег.ПериодС<=:ДатаСкидки AND $Рег.Товар=:ВыбТовар "+Условие+" AND $Рег.ВидЦены <> 2 -- обычная
	|			  			   ORDER BY Рег.DATE_TIME_IDDOC DESC) Цена
	|						, (SELECT TOP 1 $Рег.ПериодС
	|			 			   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|			  			   WHERE $Рег.ПериодС<=:ДатаСкидки AND $Рег.Товар=:ВыбТовар "+Условие+" AND $Рег.ВидЦены <> 2 -- обычная
	|			  			   ORDER BY Рег.DATE_TIME_IDDOC DESC) ПериодС
	|						, (SELECT TOP 1 $Рег.ПериодПо
	|			 			   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|			  			   WHERE $Рег.ПериодС<=:ДатаСкидки AND $Рег.Товар=:ВыбТовар "+Условие+" AND $Рег.ВидЦены <> 2 -- обычная
	|			  			   ORDER BY Рег.DATE_TIME_IDDOC DESC) ПериодПо
	|					) ТоварыПоСпецЦенам
	|	  		  WHERE ПериодС <= :ДатаСкидки AND ПериодПо >= :ДатаСкидки AND Цена <> 0 
	|			  ORDER BY ВидЦены
	|";
	
	//ТекстЗапроса="SELECT TOP 1 $Рег.Цена Цена, $Рег.Валюта [Валюта $Справочник.Валюты]
	//|			  FROM $Регистр.СпецЦены as Рег
	//|			  WHERE $Рег.ПериодС <= :ДатаСкидки AND $Рег.ПериодПо >= :ДатаСкидки
	//|					AND $Рег.Товар=:ВыбТовар AND $Рег.Клиент=:ВыбКлиент AND $Рег.Единица=:ВыбЕдиница
	//|			  ORDER BY Рег.DATE_TIME_IDDOC DESC
	//|";
	
	Запрос.УстановитьТекстовыйПараметр("ВыбКлиент", Контра);
	Запрос.УстановитьТекстовыйПараметр("ВыбКлиентФилиала", КонтраФилиала);  
	Запрос.УстановитьТекстовыйПараметр("ДатаСкидки", НаДату);
	Запрос.УстановитьТекстовыйПараметр("ВыбТовар", Конт.Товар);
	Запрос.УстановитьТекстовыйПараметр("ВыбЕдиница", Конт.Единица);
	Запрос.УстановитьТекстовыйПараметр("ВалютаДок",?(глЕстьРеквизитШапки("Валюта",Конт.Вид())=1,Конт.Валюта,Рубли));
	
	Табл=СоздатьОбъект("ТаблицаЗначений");
//	Запрос.Отладка(1);
	Табл = Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
	Если Табл.КоличествоСтрок()>0 Тогда
		Табл.ПолучитьСтрокуПоНомеру(1);
//		Цена=Пересчет(Табл.Цена,Табл.Валюта,НаДату,Конт.Валюта,НаДату)/Конт.Коэффициент;
		Цена=Табл.Цена/Конт.Коэффициент;
		Если ПустоеЗначение(КонтраФилиала)=0 Тогда
			Если Табл.ВидЦены = 1 Тогда
				Возврат ?(Групповой=1,Перечисление.ВидСкидки.СпецЦенаГрупповойКлиентФилиалаАкция,Перечисление.ВидСкидки.СпецЦенаКлиентФилиалаАкция);
			Иначе
				Возврат ?(Групповой=1,Перечисление.ВидСкидки.СпецЦенаГрупповойКлиентФилиалаТовар,Перечисление.ВидСкидки.СпецЦенаКлиентФилиалаТовар);
			КонецЕсли;

		Иначе
			Если Табл.ВидЦены = 1 Тогда
				Возврат ?(Групповой=1,Перечисление.ВидСкидки.СпецЦенаГрупповойКлиентАкция,Перечисление.ВидСкидки.СпецЦенаКлиентАкция);
			Иначе
				Возврат ?(Групповой=1,Перечисление.ВидСкидки.СпецЦенаГрупповойКлиентТовар,Перечисление.ВидСкидки.СпецЦенаКлиентТовар);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если (Групповой=0) И (Контра <> Контра.КлГруппа) И (ПустоеЗначение(Контра.КлГруппа)=0) Тогда
		Возврат СпецЦенаКлиенту(Конт,Контра.КлГруппа,Цена,НаДату,1);
	КонецЕсли;
	
	
КонецФункции

Функция ПолучитьАкцСкидкуТовара(ВыбТовар,ВыбКатегорияЦен,НаДату,ВыбАналитика="",ТекЭлем="",РежDEAR=0) Экспорт
	Запрос=СоздатьОбъект("ODBCRecordSet");
	ТипОтбора="";
	
	Если ПустоеЗначение(ВыбАналитика)=0 Тогда
		Если ВыбАналитика.Вид()="СпециализацииКлиентов" Тогда
			ТипОтбора="Специализация";
		Иначе
			ТипОтбора="УпрАналитика";
		КонецЕсли;
	КонецЕсли;
	
	СкидкаDEAR=0;
	Если РежDEAR=1 Тогда
		ТекстЗапроса="SELECT CASE WHEN COALESCE($СкидкиГруппыPOS.ПроцентСкидки,0)>COALESCE($СкидкиГруппыPOS2.ПроцентСкидки,0) THEN COALESCE($СкидкиГруппыPOS.ПроцентСкидки,0) ELSE COALESCE($СкидкиГруппыPOS2.ПроцентСкидки,0) END ГруппаСкидкиКасса
		|			  FROM (
		|			        SELECT $ПоследнееЗначение.Номенклатура.ГруппаСкидкиКасса(Номенклатура.ID, :ДатаСкидки) ГруппаСкидкиКасса
		|				   	     , $ПоследнееЗначение.Номенклатура.ГруппаСкидкиКасса(Номенклатура1.ID, :ДатаСкидки) ГруппаСкидкиКассаГруппа
		|			        FROM $Справочник.Номенклатура AS Номенклатура With (NOLOCK)
		|			        INNER JOIN $Справочник.Номенклатура AS Номенклатура1 With (NOLOCK) ON Номенклатура.PARENTID = Номенклатура1.ID
		|			        WHERE (Номенклатура.ISMARK = 0) AND Номенклатура.ID = :ВыбТовар 
		|			  ) СкидкиКассы
		|			  LEFT JOIN $Справочник.СкидкиГруппыPOS СкидкиГруппыPOS (NOLOCK) ON $СкидкиГруппыPOS.ГруппаСкидки = ГруппаСкидкиКасса AND $СкидкиГруппыPOS.ТолькоДляСотрудников=0
		|			  LEFT JOIN $Справочник.СкидкиГруппыPOS СкидкиГруппыPOS2 (NOLOCK) ON $СкидкиГруппыPOS2.ГруппаСкидки = ГруппаСкидкиКассаГруппа
		|";
		Запрос.УстановитьТекстовыйПараметр("ДатаСкидки", НаДату);
		Запрос.УстановитьТекстовыйПараметр("ВыбТовар", ВыбТовар); 
		СкидкаDEAR = Число(Запрос.ВыполнитьСкалярный(ТекстЗапроса));	
		Возврат   СкидкаDEAR;
	Иначе

		ТекстЗапроса="
		|SELECT Спр.ID [ТекущийЭлемент $Справочник.АкционныеСкидкиТоваров], $Спр.ПроцентСкидки ПроцентСкидки
		|FROM $Справочник.АкционныеСкидкиТоваров as Спр
		|WHERE 
		|	$Спр.ДатаНачала <= :ДатаСкидки 
		|	AND $Спр.ДатаКонца >= :ДатаСкидки
		|	AND $Спр.КатегорияЦен = :КатегорияЦен 
		|	AND Спр.ISMARK  = 0 
		|	AND Спр.ParentEXT=:ВыбТовар
		|   AND $Спр.УпрАналитика="+?(ТипОтбора="УпрАналитика",":ВыбАналитика","$ПустойИД")+"
		|   AND $Спр.Специализация IN "+?(ТипОтбора="Специализация","(SELECT PARENTID FROM Дерево_СпециализацииКлиентов WHERE ID=:ВыбАналитика
		|															  UNION SELECT :ВыбАналитика)","($ПустойИД)")+"
		|ORDER BY ID DESC
		|";
		
		Запрос.УстановитьТекстовыйПараметр("КатегорияЦен", выбКатегорияЦен);  
		Запрос.УстановитьТекстовыйПараметр("ДатаСкидки", НаДату);
		Запрос.УстановитьТекстовыйПараметр("ВыбТовар", ВыбТовар);
		Запрос.УстановитьТекстовыйПараметр("ВыбАналитика", ВыбАналитика);
		
		//Запрос.Отладка(1);
		табл = Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
		Если табл.КоличествоСтрок()>0 Тогда
			табл.ПолучитьСтрокуПоНомеру(1);
			ТекЭлем = табл.ТекущийЭлемент;
			Возврат табл.ПроцентСкидки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Функция ЦенаСоСкидкой(Конт,Цена, Режим = 0,БезАкций = 0, КатЦен = "") Экспорт
	// получим дату для расчета цены
	Если глЕстьРеквизитШапки("ДатаПоставки",Конт.Вид()) = 1 Тогда
		ДатаЦены = Конт.ДатаПоставки;
		Если Число(ДатаЦены) = 0 Тогда
			ДатаЦены = Конт.ДатаДок;
		КонецЕсли;
	Иначе
		ДатаЦены = Конт.ДатаДок;
	КонецЕсли;
	
	ПромКлиент = Конт.Клиент;
	
	Если ПустоеЗначение(ПромКлиент.КлиентДляСкидок)=0 Тогда
		ПромКлиент = ПромКлиент.КлиентДляСкидок;
	КонецЕсли;
	
	Если ПустоеЗначение(КатЦен)=1 Тогда
		КатЦен = Конт.КатегорияЦены;
	КонецЕсли;
	
	//первым делом проверям спец. цену клиента, т.к. это договорные цены на конретную дату
	Если глЕстьРеквизитШапки("КлиентФилиала",Конт.Вид())=1 Тогда
		Если (Конт.КлиентФилиала<>Конт.Клиент) И (ПустоеЗначение(Конт.КлиентФилиала)=0) Тогда
			ПромКлиент=Конт.КлиентФилиала;
		КонецЕсли;
	КонецЕсли;
	
	ВидСкидки="";
	ВозвратВидСкидки = "";
	ВозврЦена = Цена;

	ПромКлиентФилиала = "";
	Если Конт.Вид()="РасходнаяНакладная" Тогда
		Если ПустоеЗначение(Конт.Счет)=0 Тогда
			Если глЕстьРеквизитШапки("КлиентФилиала",Конт.Счет.Вид())=1 Тогда
				ПромКлиентФилиала = Конт.Счет.КлиентФилиала;
				
				Если (ПромКлиентФилиала<>Конт.Счет.Клиент) И (ПустоеЗначение(ПромКлиентФилиала)=0) Тогда
				Иначе
					ПромКлиентФилиала = "";
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если (ПустоеЗначение(ПромКлиент)=0) И (ПустоеЗначение(ПромКлиентФилиала)=0) Тогда
		ВидСкидки=СпецЦенаКлиенту(Конт,ПромКлиент,Цена,ДатаЦены,0,ПромКлиентФилиала);
		Если ПустоеЗначение(ВидСкидки)=0 Тогда
			Возврат ВидСкидки;
		КонецЕсли;
	КонецЕсли;	

	
	Если ПустоеЗначение(ПромКлиент)=0 Тогда
		ВидСкидки=СпецЦенаКлиенту(Конт,ПромКлиент,Цена,ДатаЦены,0);
		Если ПустоеЗначение(ВидСкидки)=0 Тогда
			Возврат ВидСкидки;
		КонецЕсли;
	КонецЕсли;	
	
	
	// проверяем, можно ли давать скидку на выбранный товар
	СпрЦен=СоздатьОбъект("Справочник.Цены");
	СпрЦен.ИспользоватьВладельца(Конт.Товар);
	Если СпрЦен.НайтиПоРеквизиту("КатегорияЦены",КатЦен,0) = 1 Тогда
		Если СпрЦен.ЗапретСкидки=1 Тогда
			Сообщить("Для товара <"+Конт.Товар.Код+" "+Конт.Товар+"> по категории цены <"+КатЦен+"> установлен запрет на скидку!","!!!");
			Возврат ""; //Для конкретной категории цены товара установлен Запрет скидки
		КонецЕсли;
	КонецЕсли;
	
	//наивысший приоритет у процента скидки в документе
	Если глЕстьРеквизитШапки("СкидкаНакл", Конт.Вид()) = 1 Тогда
		Если (ПустоеЗначение(Конт.СкидкаНакл) = 0) или (Режим = "Документ") Тогда
			Цена = Цена*(100 - Конт.СкидкаНакл)/100;
			Возврат Перечисление.ВидСкидки.Документ;
		КонецЕсли;
	КонецЕсли;
	
	
	Если Конт.Вид()="ЗаказОтПокупателя" Тогда
	Иначе
		Если Константа.НовыйМеханизмСкидок.Получить(Конт.ДатаДок)=1 Тогда
			ПолучитьСкидкуКлиента(Конт,ПромКлиент,Конт.Товар,ДатаЦены,Цена,ВидСкидки,БезАкций);
			Возврат ВидСкидки;	
		КонецЕсли;
	КонецЕсли;
	
	

	

	Если БезАкций=0 Тогда
		
		// затем акционная скидка товара по категории, указанной в документе
		Если глЕстьРеквизитШапки("КатегорияЦены", Конт.Вид()) = 1 Тогда
			СкидкаПр=ПолучитьАкцСкидкуТовара(Конт.Товар,КатЦен,ДатаЦены);
			ВидСкидкиВозврат=Перечисление.ВидСкидки.АкционныйТовар;
			
			Если глЕстьРеквизитШапки("Клиент", Конт.Вид()) = 1 Тогда
				
				Если глЕстьРеквизитШапки("СкидкаПоКарте", Конт.Вид()) = 1 Тогда
					Если Конт.СкидкаПоКарте>СкидкаПр Тогда
						СкидкаПр = Конт.СкидкаПоКарте;
						ВидСкидкиВозврат=Перечисление.ВидСкидки.КлиентКарта;
					КонецЕсли;
				КонецЕсли;
					
				Если Конт.Клиент.ДопКод>0 Тогда
					
					СкидкаПрDEAR=ПолучитьАкцСкидкуТовара(Конт.Товар,КатЦен,ДатаЦены,,,1);
					
					Если СкидкаПр>СкидкаПрDEAR Тогда
					ИначеЕсли СкидкаПрDEAR>0 Тогда
						СкидкаПр=СкидкаПрDEAR;
						ВидСкидкиВозврат=Перечисление.ВидСкидки.АкционныйТоварDEAR;
					КонецЕсли;

		
					
					// затем скидка клиенту вне зависимости от товара (из справочника "Контрагенты")
					Контра=Конт.Клиент;
					Контра.ИспользоватьДату("");
					СкидкаКлПр=Контра.КлиентСкидка.Получить(ДатаЦены);
					
					Если СкидкаКлПр>СкидкаПр Тогда
						СкидкаПр=СкидкаКлПр;
						ВидСкидкиВозврат=Перечисление.ВидСкидки.Клиент;
					КонецЕсли;
					
				КонецЕсли;
				
				СкидкаПрСпец=ПолучитьАкцСкидкуТовара(Конт.Товар,КатЦен,ДатаЦены,Конт.Клиент.Специализация);
				Если СкидкаПрСпец>СкидкаПр Тогда
					СкидкаПр=СкидкаПрСпец;
					ВидСкидкиВозврат=Перечисление.ВидСкидки.АкционныйСпециализация;
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;

		//попытаемся получить скидку по карте клиента
		Если глЕстьРеквизитШапки("НомерКарты",Конт.Вид()) = 1 Тогда
			Если (ПустоеЗначение(Конт.НомерКарты)=0) И (ПустоеЗначение(Конт.ККМ)=0) Тогда
				пСкидка=0;
				глПолучитьСкидкуИКлиентаVDB(Конт.НомерКарты,1,Конт.ККМ.Код,пСкидка);
				Если (пСкидка > СкидкаПр) Тогда
					СкидкаПр=пСкидка;
					ВидСкидкиВозврат=Перечисление.ВидСкидки.Кампания;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;


		Если Число(СкидкаПр)>0 Тогда
			Цена = Цена*(100 - Число(СкидкаПр))/100;
			Возврат ВидСкидкиВозврат;
		КонецЕсли;
		
	КонецЕсли;
	
	//// затем скидки клиенту, указанному в документе
	Возврат СкидкаКлиенту(Конт,ПромКлиент,Цена,0,БезАкций,КатЦен,ВозвратВидСкидки,ВозврЦена);
КонецФункции

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Процедура ПриИзмененииСкидкиДокумента(Конт,Авто=0) Экспорт
	Если Конт.КоличествоСтрок() = 0 Тогда
		Возврат;
	КонецЕсли;            
	Если Авто=0 Тогда
		Если Вопрос("Пересчитать цены?","Да+Нет") = "Нет" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Конт.ВыбратьСтроки();
	Пока Конт.ПолучитьСтроку() = 1 Цикл
		
		Если глЕстьРеквизитМнЧ("Счет",Конт.Вид())=1 Тогда
			Если ПустоеЗначение(Конт.Счет)=0 Тогда
				КатЦен = Конт.Счет.КатегорияЦены;
			Иначе
				КатЦен = Конт.КатегорияЦены;
			КонецЕсли;
		Иначе
			КатЦен = Конт.КатегорияЦены;
		КонецЕсли;
		ЦенаСкидка     = ЦенаТовараПоКатегории(Конт,КатЦен,1);

		ЦенаКатегДокум = ЦенаСкидка;
		Конт.ВидСкидки = ЦенаСоСкидкой(Конт,ЦенаСкидка,"Документ",,КатЦен);
		Конт.Скидка    = (ЦенаКатегДокум - ЦенаСкидка)*Конт.Количество*Конт.Коэффициент;
		Если Конт.Скидка = 0 Тогда
//			Конт.ВидСкидки = ЦенаСоСкидкой(Конт,ЦенаСкидка);
//			Конт.Скидка    = (ЦенаКатегДокум - ЦенаСкидка)*Конт.Количество*Конт.Коэффициент;
		КонецЕсли;
		Конт.Цена      = ЦенаСкидка;
		Выч_суммы_накл_сНП(Конт,,,КатЦен);
	КонецЦикла; 
	
КонецПроцедуры

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Функция ОчищениеТаблЧасти(Конт) Экспорт
	Если Конт.КоличествоСтрок() > 0 Тогда
		Если Вопрос("Табличная часть будет очищена.
		|Продолжить?","Да+Нет") = "Нет" Тогда 
			Возврат 0;
		КонецЕсли;
		Конт.УдалитьСтроки();
	КонецЕсли;
	Возврат 1;
КонецФункции

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Процедура ПриИзмененииСтавкиНДС(Конт) Экспорт
	Если глЕстьРеквизитШапки("ПриходБезНДС", Конт.Вид()) = 1 Тогда
		Если Конт.ПриходБезНДС = 1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ПроцНДС  = ПроцентНДС(Конт.СтавкаНДС);
	Конт.ВыбратьСтроки();
	Пока Конт.ПолучитьСтроку() = 1 Цикл
		Конт.НДС = Конт.Сумма*ПроцНДС/100;
		//т.к. в эл. заявке НДС имеет 2 знака после запятой округлим и здесь
		//иначе появляется разница за счет округления
		//Конт.НДС = Окр(Конт.НДС,2,1);
		Конт.НДС = Конт.НДС;
		Если глЕстьРеквизитМнЧ("ЦенаСНДС", Конт.Вид()) = 1 Тогда
			Конт.ЦенаСНДС = Конт.Цена*(1+ПроцНДС/100);
		КонецЕсли;
		Если глЕстьРеквизитМнЧ("Всего", Конт.Вид()) = 1 Тогда
			Конт.Всего = Конт.Сумма + Конт.НДС;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Процедура ПриИзмененииКатегорииЦены(Конт,Реж=0) Экспорт
	Если Конт.КоличествоСтрок() > 0 Тогда
		Если Вопрос("Пересчитать цены в документе?","Да+Нет") = "Нет" Тогда
			Возврат;
		КонецЕсли;
		Конт.ВыбратьСтроки();
		Пока Конт.ПолучитьСтроку() = 1 Цикл
			УстанЦеныРасх(Конт);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Функция ЦенаТовараПоКатегории(Конт,Категория,ЦенаРозница = 0,ДатаЦены="") Экспорт
	//СпрЦены = СоздатьОбъект("Справочник.Цены");
	//СпрЦены.ИспользоватьВладельца(Конт.Товар);
	Если ДатаЦены="" Тогда
		ДатаЦены=Конт.ДатаДок;
	КонецЕсли;
	//Если СпрЦены.НайтиПоРеквизиту("КатегорияЦены",Категория,0) = 0 Тогда
	//    Возврат 0;
	//КонецЕсли; 

	
	СпрЦены = семПолучитьЦенуТовара( Конт.Товар, Категория, ДатаЦены );
	Если ПустоеЗначение( СпрЦены ) = 1 Тогда Возврат 0; КонецЕсли;
	
	Если ЦенаРозница = 1 Тогда
		ЕстьВалюта     = глЕстьРеквизитШапки("Валюта", Конт.Вид());
		ЕстьДата_курса = глЕстьРеквизитШапки("Дата_Курса", Конт.Вид());
		ЕстьКурс       = глЕстьРеквизитШапки("Курс", Конт.Вид());
		Валюта_        = ?(ЕстьВалюта = 1,Конт.Валюта,Рубли);
		Дата_курса_    = ?(ЕстьДата_курса = 1,Конт.Дата_курса,Конт.ДатаДок);
		Возврат Окр(Пересчет(Окр(СпрЦены.Цена,СпрЦены.КатегорияЦеныТочность)/?(СпрЦены.ЕдиницаКоэффициент = 0,1,СпрЦены.ЕдиницаКоэффициент),СпрЦены.Валюта,Дата_курса_,Валюта_,?(ЕстьКурс = 1,Конт.Курс,КурсДляВалюты(Валюта_,Дата_курса_))),Категория.Точность);
	КонецЕсли;
	Возврат СпрЦены.ТекущийЭлемент;
КонецФункции

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Процедура ПроставлениеКодаТовара(Конт) 
	Если Метаданные.Документ(Конт.Вид()).РеквизитТабличнойЧасти("ТовКод").Выбран()=1 Тогда
		Если ПустоеЗначение(Конт.Товар) = 0 Тогда
			Конт.ТовКод = Конт.Товар.Код;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Процедура ПоискТовараПоКоду(Конт,ПриходРасход = 0,Режим="") Экспорт
	СпрНоменклатор = СоздатьОбъект("Справочник.Номенклатура");
	Режим="Каталог";
	Если СпрНоменклатор.НайтиПоКоду(Конт.ТовКод,0) = 1 Тогда
		Конт.Товар = СпрНоменклатор.ТекущийЭлемент();
		//		Конт.Активизировать("Товар",1);
		Если ПриходРасход = "Расход" Тогда
			УстанЦеныРасх(Конт);
		ИначеЕсли ПриходРасход = "Приход" Тогда
			УстанЦеныПрих(Конт);
		КонецЕсли;
	Иначе
		Если СпрНоменклатор.НайтиПоРеквизиту("КодДляРозницы",Конт.ТовКод,1) = 1 Тогда
			Конт.Товар = СпрНоменклатор.ТекущийЭлемент();
		Иначе
			Конт.ТовКод = "";
			Сообщить("Элемента с таким кодом нет","I");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Функция ПринадлежностьАгентаКлиенту(Агент, Контра) Экспорт
	СпрАгенты = СоздатьОбъект("Справочник.АгентыКлиентов");
	СпрАгенты.ИспользоватьВладельца(Контра);
	Если (СпрАгенты.НайтиПоРеквизиту("Сотрудник",Агент,0) = 1) или (СпрАгенты.НайтиПоРеквизиту("Сотрудник",Агент.Родитель,0) = 1) Тогда
		Возврат 1;
	КонецЕсли;
	Возврат 0;
КонецФункции

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Функция ПринадлежностьТовараАгенту(Конт, Товар) Экспорт
	
	СпрАгенты          = СоздатьОбъект("Справочник.АгентыКлиентов");
	СпрТоварыАгентов = СоздатьОбъект("Справочник.ТоварыАгентов");
	
	СпрАгенты.ИспользоватьВладельца(Конт.Клиент);
	ПринадлежитАгенту=Конт.Агент;
	
	СпрАгенты.ВыбратьЭлементы();
	Пока СпрАгенты.ПолучитьЭлемент() = 1 Цикл
		Если СпрАгенты.ПометкаУдаления() = 1 Тогда
			Продолжить;
		КонецЕсли;    
		СпрТоварыАгентов.ИспользоватьВладельца(СпрАгенты.Сотрудник);
		Если СпрТоварыАгентов.ВыбратьЭлементы()=0 Тогда
			ПринадлежитАгенту=СпрАгенты.Сотрудник;
		КонецЕсли;
		
		Пока СпрТоварыАгентов.ПолучитьЭлемент()=1 Цикл
			Если (СпрТоварыАгентов.Товар=Товар) или (Товар.ПринадлежитГруппе(СпрТоварыАгентов.Товар)=1) Тогда
				ПринадлежитАгенту=СпрАгенты.Сотрудник;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ПринадлежитАгенту=Конт.Агент Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Функция ЗаполнениеАгентовПоТовару(Контра,Товар) Экспорт
	Если (ПустоеЗначение(Контра) = 1) или (ПустоеЗначение(Товар) = 1) Тогда
		Возврат "";
	КонецЕсли;
	
	СпрАгенты          = СоздатьОбъект("Справочник.АгентыКлиентов");
	СпрТоварыАгентов = СоздатьОбъект("Справочник.ТоварыАгентов");
	
	//Запрос=СоздатьОбъект("Запрос");
	//ТекстЗапроса = "//{{ЗАПРОС(Сформировать)
	//|Агент 					= Справочник.АгентыКлиентов.ТекущийЭлемент;
	//|ВладелецАгента 		= Справочник.АгентыКлиентов.Владелец;
	//|ВладелецТовараАгента 	= Справочник.ТоварыАгентов.Владелец;
	//|ТоварАгента 			= Справочник.ТоварыАгентов.Товар;
	//|Группировка Агент упорядочить по Агент.Сотрудник без групп;
	//|Условие(ВладелецАгента = Контра);
	//|Условие(ВладелецТовараАгента = Агент);
	//|Условие(Товар в ТоварАгента);
	//|"//}}ЗАПРОС
	//;
	//Если Запрос.Выполнить(ТекстЗапроса)=0 Тогда
	//    Сообщить("Не выполнился запрос по поиску агента на товар "+Товар);
	//	Возврат 0;
	//КонецЕсли;
	//              
	//Если Запрос.Группировка()=1 Тогда
	//    Возврат Запрос.Агент.Сотрудник;
	//Иначе
	//	//ничего не нашли - хрен знает чего делать
	//КонецЕсли;
	// с запросом вроде правильно, но долго
	СпрАгенты.ИспользоватьВладельца(Контра);
	СпрАгенты.ВыбратьЭлементы();
	
	Пока СпрАгенты.ПолучитьЭлемент() = 1 Цикл
		Если СпрАгенты.ПометкаУдаления() = 1 Тогда
			Продолжить;
		КонецЕсли;    
		СпрТоварыАгентов.ИспользоватьВладельца(СпрАгенты.Сотрудник);
		Если СпрТоварыАгентов.ВыбратьЭлементы()=0 Тогда
			Возврат СпрАгенты.Сотрудник;
		КонецЕсли;                      
		Пока СпрТоварыАгентов.ПолучитьЭлемент()=1 Цикл
			Если (СпрТоварыАгентов.Товар=Товар) или (Товар.ПринадлежитГруппе(СпрТоварыАгентов.Товар)=1) Тогда
				Возврат СпрАгенты.Сотрудник;
			КонецЕсли;
		КонецЦикла;
		//Если (СпрТоварыАгентов.НайтиПоРеквизиту("Товар",Товар,0) = 1) или (СпрТоварыАгентов.НайтиПоРеквизиту("Товар",Товар.Родитель,0) = 1) Тогда
		//    Возврат СпрАгенты.Сотрудник;
		//КонецЕсли;
	КонецЦикла;
	
	Возврат Контра.Агент;
КонецФункции

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//***********************************************************
//<<Алгоритм Успеха>> (begin)
//
//***************************************************************
Функция ПроцентСкидкиКлиенту(Товар,Клиент,КатегорияЦены,Групповой=0) Экспорт//Требуется при выгрузке в ККМ
	Если ПустоеЗначение(Клиент) = 1 Тогда
		Возврат 0;
	КонецЕсли;
	
	// акционная скидка клиента, указанного в документе
	СпрАкцСкидкаКлиент = СоздатьОбъект("Справочник.АкционныеСкидкиКлиентов");
	СпрАкцСкидкаКлиент.ИспользоватьВладельца(Клиент);
	Если СпрАкцСкидкаКлиент.ВыбратьЭлементыПоРеквизиту("Товар",Товар,1,0) = 0 Тогда
		Род=Товар.Родитель;
		Пока (СпрАкцСкидкаКлиент.ВыбратьЭлементыПоРеквизиту("Товар",Род,1,0)=0) И (Род.Уровень()>1) Цикл 
			Род=Род.Родитель;
		КонецЦикла;
	КонецЕсли;
	Пока СпрАкцСкидкаКлиент.ПолучитьЭлемент() = 1 Цикл
		Если СпрАкцСкидкаКлиент.ПометкаУдаления() = 1 Тогда
			Продолжить;
		КонецЕсли;
		Если (РабочаяДата() >= СпрАкцСкидкаКлиент.ДатаНачала) и (РабочаяДата() <= СпрАкцСкидкаКлиент.ДатаКонца) Тогда
			Возврат СпрАкцСкидкаКлиент.ПроцентСкидки;
		КонецЕсли;
	КонецЦикла;
	
	// затем обычная скидка клиента, указанного в документе, на определенные товары
	Есть = 0;
	Процент = семПроцентСкидкиКлиентуНаТовар(Клиент,Товар,КатегорияЦены,РабочаяДата(),Есть);
	Если Есть = 1 Тогда
		Возврат Процент; 
	КонецЕсли;
	//СпрСкидкаКлиент = СоздатьОбъект("Справочник.КлиентСкидки");
	//СпрСкидкаКлиент.ИспользоватьВладельца(Клиент);
	//Если СпрСкидкаКлиент.ВыбратьЭлементыПоРеквизиту("ТовГруппа",Товар,1,0) = 0 Тогда
	//	Род=Товар.Родитель;
	//    Пока (СпрСкидкаКлиент.ВыбратьЭлементыПоРеквизиту("ТовГруппа",Род,1,0)=0) И (Род.Уровень()>1) Цикл 
	//		Род=Род.Родитель;
	//	КонецЦикла;
	//КонецЕсли;
	//Пока СпрСкидкаКлиент.ПолучитьЭлемент() = 1 Цикл
	//    Если СпрСкидкаКлиент.ПометкаУдаления() = 1 Тогда
	//        Продолжить;
	//	КонецЕсли;
	//	Если КатегорияЦены = Константа.ОсновнаяКатегорияЦены Тогда
	//    	Возврат СпрСкидкаКлиент.ПроцентСкидкиОпт.Получить(РабочаяДата());
	//	Иначе
	//    	Возврат СпрСкидкаКлиент.ПроцентСкидкиРозн.Получить(РабочаяДата());
	//	КонецЕсли;
	//КонецЦикла;
	
	Если ПустоеЗначение( Клиент.ДопКод ) = 0 Тогда
		Возврат семПолучитьСкидкуПЛ( 1, Клиент.ДопКод, РабочаяДата() );
	Иначе
		// затем скидка клиенту вне зависимости от товара (из справочника "Контрагенты")
		Клиент.ИспользоватьДату("");
		Если Клиент.КлиентСкидка.Получить(РабочаяДата()) > 0 Тогда
			Возврат Клиент.КлиентСкидка.Получить(РабочаяДата());
		КонецЕсли;
	КонецЕсли;
	
	
	// и апофеоз поиска скидок клиенту - это скидка для так называемого КлГруппа
	Если (Групповой = 0) и (Клиент <> Клиент.КлГруппа) Тогда
		Возврат ПроцентСкидкиКлиенту(Товар,Клиент.КлГруппа,КатегорияЦены,1);
	КонецЕсли;
	
	// похоже, что клиент не получит никакой скидки...
	Возврат 0;
КонецФункции

//***************************************************************
Функция глПроцентСкидки(Товар,Клиент="",КатегорияЦены, ВидСкидки_="",ЭлемАкц="") Экспорт
	
	СпрЦен=СоздатьОбъект("Справочник.Цены");
	СпрЦен.ИспользоватьВладельца(Товар);
	Если СпрЦен.НайтиПоРеквизиту("КатегорияЦены",КатегорияЦены,0) = 1 Тогда
		Если СпрЦен.ЗапретСкидки=1 Тогда
			Возврат 0; //Для конкретной категории цены товара установлен Запрет скидки
		КонецЕсли;
	КонецЕсли;
	
	// затем акционная скидка товара по категории
	СкидкаПр=ПолучитьАкцСкидкуТовара(Товар,КатегорияЦены,РабочаяДата(),,ЭлемАкц);
	Если СкидкаПр>0 Тогда
		ВидСкидки_=Перечисление.ВидСкидки.АкционныйТовар;
		Возврат СкидкаПр;
	КонецЕсли;
	
	//СпрАкцСкидкаТов = СоздатьОбъект("Справочник.АкционныеСкидкиТоваров");
	//СпрАкцСкидкаТов.ИспользоватьВладельца(Товар);
	//СпрАкцСкидкаТов.ВыбратьЭлементыПоРеквизиту("КатегорияЦен",КатегорияЦены,1,0);
	//Пока СпрАкцСкидкаТов.ПолучитьЭлемент() = 1 Цикл
	//	Если СпрАкцСкидкаТов.ПометкаУдаления() = 1 Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	Если (РабочаяДата() >= СпрАкцСкидкаТов.ДатаНачала) и (РабочаяДата() <= СпрАкцСкидкаТов.ДатаКонца) Тогда
	//		ЭлемАкц=СпрАкцСкидкаТов.ТекущийЭлемент();
	//		ВидСкидки_=Перечисление.ВидСкидки.АкционныйТовар;
	//		Возврат СпрАкцСкидкаТов.ПроцентСкидки;
	//	КонецЕсли;
	//КонецЦикла;
	
	// затем скидки клиенту            
	Если Клиент="" Тогда
		Возврат 0;
	КонецЕсли;
	Возврат ПроцентСкидкиКлиенту(Товар,Клиент,КатегорияЦены,0);
КонецФункции

//***************************************************************
Функция глПолучитьПризнакОперацииПоПризнаку(ПризнакОперации) Экспорт
	Спр=СоздатьОбъект("Справочник.ПризнакиОпераций");
	Наим=""+ПризнакОперации;
	Если Спр.НайтиПоНаименованию(Наим)=0 Тогда
		глСоздатьНовыйОбъект(Спр);
		Спр.Наименование=Наим;
		//Закомментировано Инсталлятором МОД:Спр.Записать();
		//Начало текста, вставленного Инсталлятором МОД
		ОбъектЗаписать(Спр, );
		//Конец текста, вставленного Инсталлятором МОД
		
	КонецЕсли;
	Возврат Спр.ТекущийЭлемент();
КонецФункции //глПолучитьПризнакОперации

Функция ЭтоСвежийПродукт(Тов) Экспорт
	ODBCRecordSet = СоздатьОбъект( "ODBCRecordSet" );
        
	ТекстЗапроса="
	|SELECT COUNT(спр.ID) Кол
	|FROM $Справочник.Номенклатура as Спр (NOLOCK)
	|INNER JOIN $Справочник.Номенклатура СпрРодитель (NOLOCK) ON СпрРодитель.ID = Спр.PARENTID
	|WHERE $СпрРодитель.СвежийПродукт = 1 AND 
	|	NOT($Спр.ПоАлфавиту LIKE 'AA%' OR $Спр.ПоАлфавиту LIKE :СимвАрх) AND
	|   Спр.ISMARK = 0
	|	AND спр.ID = :ВыбТовар
	|";
	ODBCRecordSet.УстановитьТекстовыйПараметр("ВыбТовар",Тов);
	ODBCRecordSet.УстановитьТекстовыйПараметр("СимвАрх",Константа.СимволАрхивТоваров+"%");
	рез = ODBCRecordSet.ВыполнитьСкалярный(ТекстЗапроса);
	Возврат ?(рез>0,1,0);
КонецФункции


Функция глОпределитьСкладуПоТовару(пТовар,пКодКомпл="") Экспорт
	
	СвежийТовар = ЭтоСвежийПродукт(пТовар);
//	Если ЭтоСвежийПродукт(пТовар)=1 Тогда
		//PR 05.03.15 - теперь для всех товаров склад определяем через Складские адреса
//		Возврат Константа.ОсновнойСкладСвежихПродуктов;
	//ИначеЕсли пТовар.ПризнакСпецКода = Перечисление.СпецкодыТоваров.S Тогда 
	//	Возврат Константа.ОсновнойСклад;		
//	КонецЕсли;
	
	
	Запрос=СоздатьОбъект("ODBCRecordSet");
	ТекстЗапроса="SELECT TOP 1 СпрСАГ.ID [Ссылка $Справочник.СкладскиеАдреса]
	|             FROM $Справочник.СкладскиеАдреса AS СкладскиеАдреса With (NOLOCK) 
	|			  INNER JOIN Дерево_СкладскиеАдреса ДСА (NOLOCK) ON ДСА.ID = СкладскиеАдреса.ID 
	| 			  INNER JOIN $Справочник.СкладскиеАдреса СпрСАГ (NOLOCK) ON ДСА.PARENTID = СпрСАГ.ID AND СпрСАГ.ISFOLDER = 1 AND $СпрСАГ.УровеньИерархии = 0
	|			  INNER JOIN $Справочник.МестаХранения СпрСклады (NOLOCK) ON $СпрСАГ.Склад = СпрСклады.ID  AND $СпрСклады.ТипСклада IN ($Перечисление.ТипыСкладов.Склад,$Перечисление.ТипыСкладов.СкладСвежихПродуктов)
	|			  WHERE $СкладскиеАдреса.Товар = :ВыбТовар
	|";

	Запрос.УстановитьТекстовыйПараметр("ВыбТовар",пТовар);	
//	Запрос.Отладка(1);
	
	пАдрес = Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если СвежийТовар=1 Тогда
		СпрГр1 = СоздатьОбъект("Справочник.Номенклатура");
		СпрГр1.НайтиПоКоду("01");
		СпрГр2 = СоздатьОбъект("Справочник.Номенклатура");
		СпрГр2.НайтиПоКоду("02");
		
		Если (пТовар.ПринадлежитГруппе(СпрГр1.ТекущийЭлемент())=1) ИЛИ (пТовар.ПринадлежитГруппе(СпрГр2.ТекущийЭлемент())=1) Тогда
			пКодКомпл= ""+Константа.ОсновнойСкладСвежихПродуктов.НомерСекции;
			Возврат Константа.ОсновнойСкладСвежихПродуктов;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(пАдрес.Склад)=0 Тогда
		пКодКомпл= ""+пАдрес.Склад.НомерСекции+СокрЛП(пАдрес.КодМеста);
	Иначе
		пКодКомпл= ""+Константа.ОсновнойСклад.НомерСекции+СокрЛП(пТовар.МестоХранения.Код);
	КонецЕсли;
	
	Возврат ?(ПустоеЗначение(пАдрес.Склад)=1,Константа.ОсновнойСклад,пАдрес.Склад);
	
КонецФункции

//***************************************************************
Функция глПолучитьПризнакОперации(Конт) Экспорт
	Спр=СоздатьОбъект("Справочник.ПризнакиОпераций");
	Наим="Прочее";
	ВидДок=Конт.Вид();
	Если (ВидДок="ПеремещениеДепартамент") или (ВидДок="Списание") или (ВидДок="МарочныйОтчет") или (ВидДок="ОтчетРеализатора") Тогда
		Наим="Продажа";
	КонецЕсли;
	Если Найти(ВидДок,"РасходнаяНакладная")>0 Тогда
		Наим=""+Конт.ПризнакНакладной;
	КонецЕсли;                               
	
	Если ВидДок="ПриходнаяНакладная" Тогда
		Наим=""+Конт.ПризнакНакладной;
	КонецЕсли;                               
	
	Если Спр.НайтиПоНаименованию(Наим)=0 Тогда
		глСоздатьНовыйОбъект(Спр);
		Спр.Наименование=Наим;
		//Закомментировано Инсталлятором МОД:Спр.Записать();
		//Начало текста, вставленного Инсталлятором МОД
		ОбъектЗаписать(Спр, );
		//Конец текста, вставленного Инсталлятором МОД
	КонецЕсли;
	Возврат Спр.ТекущийЭлемент();
КонецФункции //глПолучитьПризнакОперации
//_____________________________________________________________________________
Функция глПолучитьВидОперации(Конт) Экспорт
	ВидДок=Конт.Вид();
	Если (ВидДок="ПеремещениеДепартамент") Тогда
		Если Конт.ПризнакПеремещения=Перечисление.ПризнакиПеремещения.Отправитель Тогда
			Возврат "+";
		Иначе
			Возврат "-";
		КонецЕсли;
	ИначеЕсли (Найти(ВидДок,"РасходнаяНакладная")>0) Тогда
		Если (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа)
		или (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.Услуга)
		или (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.Бартер)
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.КредитнаяНота)
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.КредитнаяНотаШтраф) 
		ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.Пожертвование) 
		или (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.Переработка)Тогда
			Возврат "-";
		Иначе
			Возврат "+"; //возврат поставщику
		КонецЕсли;
	ИначеЕсли (Найти(ВидДок,"ПриходнаяНакладная")>0) Тогда
		Если (Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя) Тогда
			Возврат "-"; //возврат от покупателя
		Иначе
			Возврат "+";
		КонецЕсли;
	ИначеЕсли (Найти(ВидДок,"Списание")>0) ИЛИ (Найти(ВидДок,"МарочныйОтчет")>0) ИЛИ (Найти(ВидДок,"ОтчетРеализатора")>0) Тогда
		Возврат "-";
	ИначеЕсли (Найти(ВидДок,"СличительнаяВедомость")>0) Тогда
		Возврат "-";
	КонецЕсли;
	Возврат "*";    //хрен его знает как он сюда попал
КонецФункции //глПолучитьПризнакОперации 
//***************************************************************
Функция глЗнакВидаОперации(Конт) Экспорт
	ВидДок=Конт.Вид();
	Если (ВидДок="ПеремещениеДепартамент") Тогда
		Если Конт.ПризнакПеремещения=Перечисление.ПризнакиПеремещения.Получатель Тогда
			Возврат "+";
		Иначе
			Возврат "-";
		КонецЕсли;
	ИначеЕсли (Найти(ВидДок,"РасходнаяНакладная")>0) Тогда
		Если (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа)
		или (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.Услуга)
		или (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.Бартер)
		или (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.Пожертвование)
		или (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.Переработка)Тогда
			Возврат "+";
		Иначе
			Возврат "-";
		КонецЕсли;
	ИначеЕсли (Найти(ВидДок,"ПриходнаяНакладная")>0) Тогда
		Если (Конт.ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя) Тогда
			Возврат "-";
		Иначе
			Возврат "+";
		КонецЕсли;
	ИначеЕсли (Найти(ВидДок,"Списание")>0) ИЛИ (Найти(ВидДок,"МарочныйОтчет")>0) Тогда
		Возврат "+";
	ИначеЕсли (Найти(ВидДок,"СличительнаяВедомость")>0) Тогда
		Возврат "-";
	КонецЕсли;
	Возврат "*";
КонецФункции //глПолучитьПризнакОперации
//***************************************************************
// вычисление себестоимости тек. товара из  документа по партиям товаров
//_____________________________________________________________________________
Функция РублСтоимостьТовараПоПартиям(Конт,Товар,РежимНДС="БезНДС",Абс=0,Кол=0,Призн="") Экспорт
	
	Рег=СоздатьОбъект("Регистр.ПартииТоваров");
	Если Конт.ТипУчета>Упр Тогда
		ПромФирма=Конт.Фирма;
	Иначе
		ПромФирма=Конт.Фирма;
	КонецЕсли;                                               
	
	Рег.ВыбратьДвиженияДокумента(Конт.ТекущийДокумент());
	
	Себест=0;
	итОстаток=0;
	Пока Рег.ПолучитьДвижение()=1 Цикл   
		Если Рег.Фирма<>ПромФирма Тогда
			Продолжить;
		КонецЕсли; 
		Если Рег.Товар<>Товар Тогда
			Продолжить;
		КонецЕсли;                  
		Если Призн<>"" Тогда
			Если Рег.Статус<>Призн Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		//		Знак=?(Рег.Приход=1,1,-1);
		Себест=Себест+
		//Знак*
		(Рег.Стоимость+?(РежимНДС="БезНДС",0,Рег.НДС));
		итОстаток=итОстаток+
		//Знак*
		(Рег.ОстатокТовара);
	КонецЦикла;                                                   
	Если Абс=0 Тогда
		Себест=Макс(Себест,-Себест); //Модуль числа
		итОстаток=Макс(итОстаток,-итОстаток);
	КонецЕсли;     
	Если Кол=0 Тогда
		Себест=?(итОстаток=0,0,Себест/итОстаток);    
	КонецЕсли;//Кол
	Если Конт.ТипУчета>Упр Тогда
		Возврат Себест; //она и так в рублях
	Иначе                                                                                                                      
		НаДату=?(глЕстьРеквизитШапки("Дата_курса",Конт.Вид())=1,Конт.Дата_Курса,Конт.ДатаДок);
		Возврат Пересчет(Себест,Товар.ВалютаУчета,НаДату,Рубли,НаДату);
	КонецЕсли;                                               
КонецФункции //РублСтоимостьТовараПоПартиям                         

//***************************************************************
// вычисление себестоимости тек. товара из  документа по партиям товаров
//_____________________________________________________________________________
Функция ПолучитьСтоимостьТоваровПоПартиям(Конт,ПоСкладам=0,РежимНДС="БезНДС",Абс=0,Кол=0,Призн="") Экспорт
	
	Т=СоздатьОбъект("ТаблицаЗначений");
	Т.НоваяКолонка("Товар","Справочник.Номенклатура");
	Т.НоваяКолонка("Стоимость","Число",19,9);
	Т.НоваяКолонка("ПродСтоимость","Число",19,9);
	Т.НоваяКолонка("СтоимостьСумма","Число",19,9);
	Т.НоваяКолонка("ПродСтоимостьСумма","Число",19,9);
	Т.НоваяКолонка("Остаток","Число",19,3);
	Т.НоваяКолонка("Склад","Справочник.МестаХранения");
	
	П=СоздатьОбъект("ТаблицаЗначений");
	П.НоваяКолонка("Товар","Справочник.Номенклатура");
	П.НоваяКолонка("Поставщик","Справочник.Контрагенты");
	
	
	Рег=СоздатьОбъект("Регистр.ПартииТоваров");
	Если Конт.ТипУчета>Упр Тогда
		ПромФирма=Конт.Фирма;
	Иначе
		ПромФирма=Конт.Фирма;
	КонецЕсли;                                               
	
	Рег.ВыбратьДвиженияДокумента(Конт.ТекущийДокумент());
	
	Себест=0;
	итОстаток=0;
	Пока Рег.ПолучитьДвижение()=1 Цикл   
		Если Рег.Фирма<>ПромФирма Тогда
			Продолжить;
		КонецЕсли;                     
		
		//пропускаем отданные на реализацию партии
		Если (Рег.Статус=Отданный) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Призн<>"" Тогда
			Если (Рег.Статус<>Призн)  Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Т.НоваяСтрока();
		Т.Товар=Рег.Товар;
		Т.Стоимость=Рег.Стоимость+?(РежимНДС="БезНДС",0,Рег.НДС);
		Т.ПродСтоимость=Рег.ПродСтоимость+?(РежимНДС="БезНДС",0,Рег.НДС);
		Т.СтоимостьСумма=Рег.Стоимость+?(РежимНДС="БезНДС",0,Рег.НДС);
		Т.ПродСтоимостьСумма=Рег.ПродСтоимость+?(РежимНДС="БезНДС",0,Рег.НДС);
		Т.Остаток=Рег.ОстатокТовара;
		Т.Склад=Рег.Склад;
		
		рез=0;
		Если П.НайтиЗначение(Рег.Товар,Рез,"Товар")=1 Тогда
			П.ПолучитьСтрокуПоНомеру(рез);
			П.Поставщик=Рег.Контрагент;
		Иначе
			П.НоваяСтрока();
			П.Товар=Рег.Товар;
			П.Поставщик=Рег.Контрагент;
		КонецЕсли;
	КонецЦикла;                                                   
	
	Т.Свернуть("Товар"+?(ПоСкладам=0,"",",Склад"),"Стоимость,ПродСтоимость,Остаток,СтоимостьСумма,ПродСтоимостьСумма");
	Т.НоваяКолонка("Поставщик","Справочник.Контрагенты");
	
	Т.ВыбратьСтроки();
	Пока Т.ПолучитьСтроку()=1 Цикл
		рез=0;
		П.НайтиЗначение(Т.Товар,Рез,"Товар");
		П.ПолучитьСтрокуПоНомеру(рез);
		Т.Поставщик=П.Поставщик;
	КонецЦикла;
	НаДату=?(глЕстьРеквизитШапки("Дата_курса",Конт.Вид())=1,Конт.Дата_Курса,Конт.ДатаДок);
	
	Т.ВыбратьСтроки();
	Пока Т.ПолучитьСтроку()=1 Цикл
		
		Если Абс=0 Тогда
			Т.Стоимость=Макс(Т.Стоимость,-Т.Стоимость); //Модуль числа
			Т.ПродСтоимость=Макс(Т.ПродСтоимость,-Т.ПродСтоимость); //Модуль числа
			Т.Остаток=Макс(Т.Остаток,-Т.Остаток);
			Т.СтоимостьСумма=Макс(Т.СтоимостьСумма,-Т.СтоимостьСумма);
			Т.ПродСтоимостьСумма=Макс(Т.ПродСтоимостьСумма,-Т.ПродСтоимостьСумма);
		КонецЕсли;
		
		Если Т.Остаток=0 Тогда
			Т.Стоимость	=0;
			Т.СтоимостьСумма	=0;
			Т.ПродСтоимость	=0;
			Т.ПродСтоимостьСумма	=0;

		Иначе
			Т.Стоимость=Т.Стоимость/Т.Остаток;
			Т.ПродСтоимость=Т.ПродСтоимость/Т.Остаток;
		КонецЕсли;
		
		Если Конт.ТипУчета>Упр Тогда
			Т.Стоимость=Пересчет(Т.Стоимость,Т.Товар.ВалютаУчета,НаДату,Рубли,НаДату);
			Т.СтоимостьСумма=Пересчет(Т.СтоимостьСумма,Т.Товар.ВалютаУчета,НаДату,Рубли,НаДату);
			Т.ПродСтоимость=Пересчет(Т.ПродСтоимость,Т.Товар.ВалютаУчета,НаДату,Рубли,НаДату);
			Т.ПродСтоимостьСумма=Пересчет(Т.ПродСтоимостьСумма,Т.Товар.ВалютаУчета,НаДату,Рубли,НаДату);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Т;
	
КонецФункции //РублСтоимостьТовараПоПартиям                         

//***************************************************************
// движения по регистру "ОборотыТоваров"
//_____________________________________________________________________________
Функция семОборотыТоваровСписание6Кат( Конт )
	Если конт.Вид() <> "Списание" Тогда Возврат 0; КонецЕсли;
	Если Конт.КатегорияСписания <> Перечисление.КатегорииСписания.Категория6 Тогда Возврат 0; КонецЕсли;
	
	
	Если (ПустоеЗначение(конт.ДокументОснование) = 1) И (ПустоеЗначение(Конт.СлужОснования)=1) Тогда 
		Возврат 0; 
	КонецЕсли;

	табл = СоздатьОбъект( "ТаблицаЗначений" );
	Запрос=СоздатьОбъект("ODBCRecordSet");

	Условие = "";
	Если Конт.флПоАгентуВОсновании=1 Тогда
		Запрос.УстановитьТекстовыйПараметр("ВыбАгент",Конт.Агент);
		Условие1 = " AND CASE WHEN $ДокС.АгентПоТовару = $ПустойИД THEN $Док.Агент ELSE $ДокС.АгентПоТовару END =:ВыбАгент ";
		Условие2 = " AND $Док2.Агент =:ВыбАгент ";
		Условие3 = " AND $Док3.Агент =:ВыбАгент ";
	КонецЕсли;


	Если (ПустоеЗначение(конт.ДокументОснование) = 0) Тогда
		Если НЕ( (конт.ДокументОснование.Вид() = "РасходнаяНакладнаяНал") или (конт.ДокументОснование.Вид() = "РасходнаяНакладная")
				или (конт.ДокументОснование.Вид() = "МарочныйОтчет") ) Тогда 
			Возврат 0; 
		КонецЕсли;
		
		Накл = конт.ДокументОснование;
		
		//ТС.ВыбратьСтроку(,""+СебестТовара);
		
		//табл = СоздатьОбъект( "ТаблицаЗначений" );
		//Если Конт.флПоАгентуВОсновании=1 Тогда
		//Накл.ВыгрузитьТабличнуюЧасть(табл,"Товар,Количество");
		
		Если конт.ДокументОснование.Вид() = "РасходнаяНакладнаяНал" Тогда
			ТекстЗапроса = " SELECT $ДокС2.Товар [Товар $Справочник.Номенклатура]
			|					, $Док2.Склад [Склад $Справочник.МестаХранения]
			|					, $Док2.Агент [Агент $Справочник.Сотрудники]
			|					, $Док2.Клиент [Клиент $Справочник.Контрагенты]
			|					, SUM($ДокС2.Количество) Количество
			|					, SUM($РегО.СуммаПЦЧ) Себестоимость
			|					, SUM($РегО.СуммаПЦЧ) Себестоимость2
			|			  FROM $ДокументСтроки.РасходнаяНакладнаяНал AS ДокС2
			|			  INNER JOIN $Документ.РасходнаяНакладнаяНал AS Док2 (NOLOCK) ON Док2.IDDOC=ДокС2.IDDOC
			|			  INNER JOIN $Регистр.ОборотыТоваров РегО (NOLOCK) ON РегО.IDDOC = ДокС2.IDDOC AND $РегО.Товар = $ДокС2.Товар AND РегО.LINENO_ = ДокС2.LINENO_
			|			  WHERE (ДокС2.IDDOC = :ВыбДок) "+Условие2+"
			|			  GROUP BY $Док2.Склад, $ДокС2.Товар, $Док2.Агент, $Док2.Клиент
			|";
			
		ИначеЕсли (конт.ДокументОснование.Вид() = "МарочныйОтчет") Тогда
			
			ТекстЗапроса="SELECT $ДокС.Товар [Товар $Справочник.Номенклатура]
			|					, $Док.Склад [Склад $Справочник.МестаХранения]
			|					, CASE WHEN $ДокС.АгентПоТовару = $ПустойИД THEN $Док.Агент ELSE $ДокС.АгентПоТовару END [Агент $Справочник.Сотрудники]
			|					, $Док.Клиент [Клиент $Справочник.Контрагенты]
			|					, $ДокС.Количество Количество
			|					, CASE WHEN $ДокС.Себестоимость=0  THEN $ДокС.Сумма ELSE $ДокС.Себестоимость END Себестоимость
			|					, CASE WHEN $ДокС.Себестоимость2=0  THEN $ДокС.Сумма ELSE $ДокС.Себестоимость2 END Себестоимость2
			|			  FROM $ДокументСтроки.МарочныйОтчет AS ДокС (NOLOCK) 
			|			  INNER JOIN $Документ.МарочныйОтчет AS Док (NOLOCK) ON Док.IDDOC=ДокС.IDDOC
			|			  WHERE (ДокС.IDDOC = :ВыбДок) "+Условие1+"
			|";
		Иначе
			
			ТекстЗапроса="SELECT $ДокС3.Товар [Товар $Справочник.Номенклатура]
			|					, $Док3.Склад [Склад $Справочник.МестаХранения]
			|					, $Док3.Агент [Агент $Справочник.Сотрудники]
			|					, $Док3.Клиент [Клиент $Справочник.Контрагенты]
			|					, SUM($ДокС3.Количество) Количество
			|					, SUM($РегО.СуммаПЦЧ) Себестоимость
			|					, SUM($РегО.СуммаПЦЧ) Себестоимость2
			|			  FROM $ДокументСтроки.РасходнаяНакладная AS ДокС3 (NOLOCK) 
			|			  INNER JOIN $Документ.РасходнаяНакладная AS Док3 (NOLOCK) ON Док3.IDDOC=ДокС3.IDDOC
			|			  INNER JOIN $Регистр.ОборотыТоваров РегО (NOLOCK) ON РегО.IDDOC = ДокС3.IDDOC AND $РегО.Товар = $ДокС3.Товар AND РегО.LINENO_ = ДокС3.LINENO_
			|			  WHERE (ДокС3.IDDOC = :ВыбДок) "+Условие3+"
			|			  GROUP BY $Док3.Склад, $ДокС3.Товар, $Док3.Агент, $Док3.Клиент
			|";
		
		КонецЕсли;
		
		Запрос.УстановитьТекстовыйПараметр("ВыбДок",Накл);
		
		табл=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);

	Иначе //по документам основания

		
		
		Условие = "";

		
		ТекстЗапроса="SELECT $ДокС.Товар [Товар $Справочник.Номенклатура]
		|					, $Док.Склад [Склад $Справочник.МестаХранения]
		|					, CASE WHEN $ДокС.АгентПоТовару = $ПустойИД THEN $Док.Агент ELSE $ДокС.АгентПоТовару END [Агент $Справочник.Сотрудники]
		|					, $Док.Клиент [Клиент $Справочник.Контрагенты]
		|					, $ДокС.Количество Количество
		|					, CASE WHEN $ДокС.Себестоимость=0  THEN CASE WHEN $ДокС.Сумма=0 THEN $ДокС.Количество*10 ELSE $ДокС.Сумма END ELSE $ДокС.Себестоимость END Себестоимость
		|					, CASE WHEN $ДокС.Себестоимость2=0  THEN CASE WHEN $ДокС.Сумма=0 THEN $ДокС.Количество*10 ELSE $ДокС.Сумма END ELSE $ДокС.Себестоимость2 END Себестоимость2
		|			  FROM $ДокументСтроки.Служ_Основания AS Служ_ОснованияСтроки (NOLOCK)
		|			  INNER JOIN $ДокументСтроки.МарочныйОтчет AS ДокС (NOLOCK) ON RIGHT($Служ_ОснованияСтроки.ДокОснование,9) = ДокС.IDDOC
		|			  INNER JOIN $Документ.МарочныйОтчет AS Док (NOLOCK) ON Док.IDDOC=ДокС.IDDOC
		|			  WHERE (Служ_ОснованияСтроки.IDDOC = :ВыбДокСлужОсн) "+Условие1+"
		|			  UNION ALL
		|			  SELECT $ДокС2.Товар [Товар $Справочник.Номенклатура]
		|					, $Док2.Склад [Склад $Справочник.МестаХранения]
		|					, $Док2.Агент [Агент $Справочник.Сотрудники]
		|					, $Док2.Клиент [Клиент $Справочник.Контрагенты]
		|					, SUM($ДокС2.Количество) Количество
		|					, SUM($РегО.СуммаПЦЧ) Себестоимость
		|					, SUM($РегО.СуммаПЦЧ) Себестоимость2
		|			  FROM $ДокументСтроки.Служ_Основания AS Служ_ОснованияСтроки (NOLOCK)
		|			  INNER JOIN $ДокументСтроки.РасходнаяНакладнаяНал AS ДокС2 (NOLOCK) ON RIGHT($Служ_ОснованияСтроки.ДокОснование,9) = ДокС2.IDDOC
		|			  INNER JOIN $Документ.РасходнаяНакладнаяНал AS Док2 (NOLOCK) ON Док2.IDDOC=ДокС2.IDDOC
		|			  INNER JOIN $Регистр.ОборотыТоваров РегО (NOLOCK) ON РегО.IDDOC = ДокС2.IDDOC AND $РегО.Товар = $ДокС2.Товар AND РегО.LINENO_ = ДокС2.LINENO_
		|			  WHERE (Служ_ОснованияСтроки.IDDOC = :ВыбДокСлужОсн) "+Условие2+"
		|			  GROUP BY $Док2.Склад, $ДокС2.Товар, $Док2.Агент, $Док2.Клиент
		|			  UNION ALL
		|			  SELECT $ДокС3.Товар [Товар $Справочник.Номенклатура]
		|					, $Док3.Склад [Склад $Справочник.МестаХранения]
		|					, $Док3.Агент [Агент $Справочник.Сотрудники]
		|					, $Док3.Клиент [Клиент $Справочник.Контрагенты]
		|					, SUM($ДокС3.Количество) Количество
		|					, SUM($РегО.СуммаПЦЧ) Себестоимость
		|					, SUM($РегО.СуммаПЦЧ) Себестоимость2
		|			  FROM $ДокументСтроки.Служ_Основания AS Служ_ОснованияСтроки (NOLOCK)
		|			  INNER JOIN $ДокументСтроки.РасходнаяНакладная AS ДокС3 (NOLOCK) ON RIGHT($Служ_ОснованияСтроки.ДокОснование,9) = ДокС3.IDDOC
		|			  INNER JOIN $Документ.РасходнаяНакладная AS Док3 (NOLOCK) ON Док3.IDDOC=ДокС3.IDDOC
		|			  INNER JOIN $Регистр.ОборотыТоваров РегО (NOLOCK) ON РегО.IDDOC = ДокС3.IDDOC AND $РегО.Товар = $ДокС3.Товар AND РегО.LINENO_ = ДокС3.LINENO_
		|			  WHERE (Служ_ОснованияСтроки.IDDOC = :ВыбДокСлужОсн) "+Условие3+"
		|			  GROUP BY $Док3.Склад, $ДокС3.Товар, $Док3.Агент, $Док3.Клиент
		//|		   	  INNER JOIN (SELECT $ПартииТоваров.Товар Товар, ПартииТоваров.LINENO_, ПартииТоваров.IDDOC, SUM($ПартииТоваров.Стоимость) Стоимость 
		//|						  FROM $Регистр.ПартииТоваров AS ПартииТоваров (NOLOCK)
		//|						  INNER JOIN $ДокументСтроки.Служ_Основания AS Служ_ОснованияСтроки (NOLOCK) ON ($ВидДокумента36.МарочныйОтчет+ПартииТоваров.IDDOC) = $Служ_ОснованияСтроки.ДокОснование AND Служ_ОснованияСтроки.IDDOC = :ВыбДокСлужОсн
		//|						  WHERE ПартииТоваров.DEBKRED = 1 AND $ПартииТоваров.Фирма = $ПустойИД
		//|						  GROUP BY ПартииТоваров.IDDOC, $ПартииТоваров.Товар, ПартииТоваров.LINENO_
		//|						) ПартииТоваров ON МарочныйОтчетСтроки.IDDOC = ПартииТоваров.IDDOC AND $МарочныйОтчетСтроки.Товар = ПартииТоваров.Товар AND МарочныйОтчетСтроки.LINENO_ = ПартииТоваров.LINENO_
		|";
		
		Запрос.УстановитьТекстовыйПараметр("ВыбДокСлужОсн",Конт.СлужОснования);
		
		табл=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
		
	КонецЕсли;
	
	ТС=СоздатьОбъект("ТаблицаЗначений");
	ТС=ПолучитьСтоимостьТоваровПоПартиям(Конт);
	ТС.ВыбратьСтроки();
	Пока ТС.ПолучитьСтроку() = 1 Цикл
		ТС.Стоимость = ТС.Стоимость*ТС.Остаток;
		ТС.ПродСтоимость = ТС.ПродСтоимость*ТС.Остаток;
	КонецЦикла;
	СебестТовара = ТС.Итог("Стоимость");
	СебестТовара2 = ТС.Итог("ПродСтоимость");
	ВсегоКол=табл.Итог("Количество");
	табл.НоваяКолонка("СебестУслуги","Число",17,2);
	табл.НоваяКолонка("СебестУслуги2","Число",17,2);

	//табл.ВыбратьСтроку(,"Начальные данные");
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку() = 1 Цикл
		Если (Конт.ДатаДок>='01.07.10') И (ПустоеЗначение(конт.ДокументОснование) = 1) Тогда
			ВсегоСеб=табл.Итог("Себестоимость");
			ВсегоСеб2=табл.Итог("Себестоимость2");
			табл.СебестУслуги = Окр((табл.Себестоимость / ВсегоСеб) * СебестТовара,2,0);
			табл.СебестУслуги2 = Окр((табл.Себестоимость2 / ВсегоСеб2) * СебестТовара2,2,0);
		Иначе
			табл.СебестУслуги = Окр(СебестТовара / ВсегоКол * табл.Количество,2,0);
			табл.СебестУслуги2 = Окр(СебестТовара2 / ВсегоКол * табл.Количество,2,0);
		КонецЕсли;
	КонецЦикла;
	//табл.ВыбратьСтроку(,"Распределение себестоимости");
	Погрешность = Окр(СебестТовара,2) - табл.Итог("СебестУслуги");
	Погрешность2 = Окр(СебестТовара2,2) - табл.Итог("СебестУслуги2");

	Если Погрешность <> 0 Тогда
		Если (Конт.ДатаДок>='01.07.10') И (ПустоеЗначение(конт.ДокументОснование) = 1) Тогда
			табл.Сортировать("-Себестоимость");
		Иначе
			табл.Сортировать("-Количество");
		КонецЕсли;
		
		табл.УстановитьЗначение(1,"СебестУслуги",табл.ПолучитьЗначение(1,"СебестУслуги")+Погрешность);
	КонецЕсли;

	Если Погрешность2 <> 0 Тогда
		Если (Конт.ДатаДок>='01.07.10') И (ПустоеЗначение(конт.ДокументОснование) = 1) Тогда
			табл.Сортировать("-Себестоимость2");
		Иначе
			табл.Сортировать("-Количество");
		КонецЕсли;
		
		табл.УстановитьЗначение(1,"СебестУслуги2",табл.ПолучитьЗначение(1,"СебестУслуги2")+Погрешность);
	КонецЕсли;


	//табл.ВыбратьСтроку(,"Резуллтат + погрешность");
	
	Рег = Конт.Регистр.ОборотыТоваров;
	
	Если (ПустоеЗначение(конт.ДокументОснование) = 0) Тогда
		Рег.Склад   = ?((ПустоеЗначение(конт.ДокументОснование) = 0),Накл.Склад,Конт.Склад);
		Агент = ?( глЕстьРеквизитШапки("Агент", Накл.Вид() ) = 0, "", Накл.Агент );
		Рег.Агент = Агент;
		Если ПустоеЗначение( Агент ) = 1 Тогда
			промСклад = Конт.Склад;
			Пока ПустоеЗначение( Агент ) = 1 Цикл
				Агент = промСклад.Агент;
				промСклад = промСклад.Родитель;
				Если ПустоеЗначение( промСклад ) = 1 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Рег.Агент=Агент;
		КонецЕсли; 
		
		Рег.Клиент  = КлиентДок(Накл);
		
	КонецЕсли;
		
	Рег.ВидОперации = глПолучитьВидОперации(Конт);
	
	Рег.ФлагУчета = 4;
	Рег.ПризнакОперации = глПолучитьПризнакОперации(Конт);
	Рег.КатегорияВозврата = "";
	Рег.СуммаТранспорт = 0;
	Рег.СуммаТаможня = 0;
	Рег.Поставщик = "";
	
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку() = 1 Цикл
		Если (ПустоеЗначение(конт.ДокументОснование) = 1) Тогда
		КонецЕсли;
		Рег.Склад = табл.Склад;
		Рег.Клиент = табл.Клиент;
		Рег.Агент = табл.Агент;
		Рег.Фирма	= Конт.Фирма;
		Рег.Товар = табл.Товар;
		Рег.Количество = 0;
		Рег.СуммаБазовая = табл.СебестУслуги;
		Рег.СуммаБазовая2 = табл.СебестУслуги2;
		Рег.СуммаНДС = 0;
		Рег.СуммаПродажная = 0;
		Рег.СуммаСкидки = 0;
		Рег.ДвижениеВыполнить();
	КонецЦикла;
	Возврат 1;
КонецФункции

Функция семПолучитьСклад( пТовар, пСтанция,НаДату="" )
	Если ПустоеЗначение(НаДату)=1 Тогда
		НаДату=РабочаяДата();
	КонецЕсли;

	спр = СоздатьОбъект( "Справочник.СкладыТовара" );
	спр.ИспользоватьВладельца( пТовар );
	Если спр.ВыбратьЭлементы( 1 ) = 1 Тогда
		Пока спр.ПолучитьЭлемент()=1 Цикл
			Если спр.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;
			Если спр.Станция = пСтанция Тогда
				спр.ИспользоватьДату(НаДату);
				Возврат спр.Склад;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;          
	Возврат пСтанция.Склад.Получить(НаДату);
КонецФункции

Функция семПолучитьКассу( пСтанция,НаДату="" )
	Если пСтанция < 10 Тогда 
		пСтанция = 25;
	Иначе
		пСтанция = 100 + пСтанция;
	КонецЕсли;
	
	Если ПустоеЗначение(НаДату)=1 Тогда
		НаДату=РабочаяДата();
	КонецЕсли;
	
	итКассы=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос=СоздатьОбъект("ODBCRecordSet");
	ТекстЗапроса="SELECT Кассы.ID [Ссылка $Справочник.Кассы]
	|					, $Кассы.Склад [Склад $Справочник.МестаХранения]
	|					, $ПоследнееЗначение.Кассы.НомерОтдела(Кассы.ID, :НаДату) НомерОтдела
	|			  FROM $Справочник.Кассы AS Кассы
	|			  WHERE ($Кассы.ТипККМ = :ТипККМ)";
	
	Запрос.УстановитьТекстовыйПараметр("ТипККМ",Перечисление.ТипыККМ.RKeeper6POS);
	Запрос.УстановитьТекстовыйПараметр("НаДату",НаДату);
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,итКассы);
	итКассы.ДобавитьИндекс("иНомерОтдела","НомерОтдела");
	
	спр = СоздатьОбъект( "Справочник.Кассы" );
	Если итКассы.НайтиСтроку("иНомерОтдела",пСтанция,,1)>0 Тогда
//	Если спр.НайтиПоРеквизиту( "НомерОтдела", пСтанция, 1 ) = 1 Тогда
		Возврат итКассы.Ссылка;
	Иначе
		Сообщить( "Ошибка определения кассы.","!" );
		Сообщить( "Не найдена касса по номеру "+пСтанция,"I" );
		Возврат "";
	КонецЕсли;
КонецФункции

Функция семОборотыТоваровМарочныйОтчетСтар( Конт )
	Если конт.Вид() <> "МарочныйОтчет" Тогда Возврат 0; КонецЕсли;
	
	рег = Конт.Регистр.ОборотыТоваров;
	
	табл = СоздатьОбъект( "ТаблицаЗначений" );
	табл.НоваяКолонка("Товар","Справочник.Номенклатура");
	табл.НоваяКолонка("Клиент","Справочник.Контрагенты");
	табл.НоваяКолонка("Агент","Справочник.Сотрудники"); 
	табл.НоваяКолонка("Колво","Число");
	табл.НоваяКолонка("Сумма","Число");
	
	Если Конт.Нал=Нет Тогда
		Конт.ВыбратьСтроки();
		Пока Конт.ПолучитьСтроку() = 1 Цикл
			табл.НоваяСтрока();
			табл.Клиент = Конт.Клиент;
			табл.Агент = ?(ПустоеЗначение(Конт.АгентПоТовару)=1,Конт.Агент,Конт.АгентПоТовару);
			табл.Товар = Конт.Товар;
			табл.Колво = Конт.Количество;
			табл.Сумма = Конт.Сумма;
		КонецЦикла; 
	Иначе
		докЧек = СоздатьОбъект("Документ.Чек");
		докЧек.ВыбратьДокументы( Конт.ДатаДок, Конт.ДатаДок );
		Пока докЧек.ПолучитьДокумент() = 1 Цикл         
			Если докЧек.ПометкаУдаления()=1 Тогда Продолжить; КонецЕсли;
			Если докЧек.Удален > 0 Тогда Продолжить; КонецЕсли;
			докЧек.ВыбратьСтроки();
			Пока докЧек.ПолучитьСтроку()=1 Цикл
				Если докЧек.Товар.Выбран() = 0 Тогда Продолжить; КонецЕсли;
				Если семПолучитьКассу( Число( докЧек.Станция.Код ),Конт.ДатаДок ) <> Конт.Касса Тогда Продолжить; КонецЕсли;
				
				//не проверяем привязки, если стоит признак
				Если (докЧек.Станция.НеПроверятьПривязки.Получить(Конт.ДатаДок )=1) Тогда
				Иначе
					Если семПолучитьСклад( докЧек.Товар, докЧек.Станция, докЧек.ДатаДок ) <> Конт.Склад Тогда Продолжить; КонецЕсли;
				КонецЕсли;
				табл.НоваяСтрока();
				табл.Клиент = докЧек.Клиент;
				табл.Агент = докЧек.Агент;
				табл.Товар = докЧек.Товар;
				табл.Колво = докЧек.Количество;
				табл.Сумма = докЧек.Сумма;
			КонецЦикла;	
		КонецЦикла;	
	КонецЕсли;
	табл.Свернуть("Товар,Клиент,Агент","Колво,Сумма");
	табл.Сортировать("Товар,Клиент");	
	
	таблСебест = СоздатьОбъект("ТаблицаЗначений");
	таблСебест = ПолучитьСтоимостьТоваровПоПартиям(Конт);
	
	кБазоваяВалюта = Константа.БазоваяВалюта;
	
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку() = 1 Цикл
		рег.Товар		 = табл.Товар;
		рег.Склад		 = Конт.Склад;
		рег.Клиент 		 = табл.Клиент;
		рег.Агент 		 = ?(ПустоеЗначение(табл.Агент)=1,Конт.Агент,табл.Агент);
		рег.Касса		 = Конт.Касса;
		рег.ВидОперации  = глПолучитьВидОперации( Конт );
		
		рег.Количество = табл.Колво;
		ном = 0;
		Если таблСебест.НайтиЗначение( табл.Товар, ном, "Товар" ) = 1 Тогда
			рег.СуммаБазовая = таблСебест.ПолучитьЗначение(ном,"Стоимость")*табл.Колво;
			рег.Поставщик = таблСебест.ПолучитьЗначение(ном,"Поставщик");
		Иначе
			Сообщить(Шаблон("[табл.Товар.Код] [табл.Товар]"));
			рег.СуммаБазовая = 0;
			рег.Поставщик = "";
		КонецЕсли;
		ПроцентНДС = ПроцентНДС(табл.Товар.СтавкаНДС);
		рег.СуммаНДС = табл.Сумма * (ПроцентНДС / (100+ПроцентНДС) );
		рег.СуммаПродажная = табл.Сумма-рег.СуммаНДС;
		СуммаДоСкидки = табл.Колво * ЦенаТовараПоКатегорииДляТовара(табл.Товар, Конт.КатегорияЦены, кБазоваяВалюта, 1, Конт.ДатаДок);
		рег.СуммаСкидки = СуммаДоСкидки - рег.СуммаПродажная;
		рег.СуммаПЦЧ = рег.СуммаПродажная;
		
		рег.ФлагУчета = "";
		рег.ПризнакОперации = глПолучитьПризнакОперации(Конт);
		рег.КатегорияВозврата = "";
		рег.СуммаТранспорт = 0;
		рег.СуммаТаможня = 0;
		
		Рег.ДвижениеВыполнить();
	КонецЦикла;
	Возврат 1;
КонецФункции

Функция семОборотыТоваровМарочныйОтчет( Конт )
	Если конт.Вид() <> "МарочныйОтчет" Тогда Возврат 0; КонецЕсли;
	
	рег = Конт.Регистр.ОборотыТоваров;
	
	табл = СоздатьОбъект( "ТаблицаЗначений" );
	табл.НоваяКолонка("Товар","Справочник.Номенклатура");
	табл.НоваяКолонка("Клиент","Справочник.Контрагенты");
	табл.НоваяКолонка("Агент","Справочник.Сотрудники"); 
	табл.НоваяКолонка("Колво","Число");
	табл.НоваяКолонка("Сумма","Число");
	
	СписокТоваров = СоздатьОбъект("ТаблицаЗначений");
	Конт.ВыгрузитьТабличнуюЧасть(СписокТоваров);
	
	Если Конт.Нал=Нет Тогда
		Конт.ВыбратьСтроки();
		Пока Конт.ПолучитьСтроку() = 1 Цикл
			табл.НоваяСтрока();
			табл.Клиент = Конт.Клиент;
			табл.Агент = ?(ПустоеЗначение(Конт.АгентПоТовару)=1,Конт.Агент,Конт.АгентПоТовару);
			табл.Товар = Конт.Товар;
			табл.Колво = Конт.Количество;
			табл.Сумма = Конт.Сумма;
		КонецЦикла; 
	Иначе
		
		ТекстЗапроса="SELECT $Чек.Клиент [Клиент $Справочник.Контрагенты]
					|	, $Чек.Агент [Агент $Справочник.Сотрудники]
					|	, $ЧекСтроки.Количество Колво
					|	, $ЧекСтроки.Товар [Товар $Справочник.Номенклатура]
					|	, $ЧекСтроки.Сумма Сумма
					|	, $Чек.Валюта [Валюта $Справочник.ВалютыРК]
					| FROM $ДокументСтроки.Чек AS ЧекСтроки (NOLOCK)
					| INNER JOIN $Документ.Чек AS Чек (NOLOCK) ON ЧекСтроки.IDDOC = Чек.IDDOC
					| INNER JOIN _1SJOURN AS Журнал (NOLOCK) ON ЧекСтроки.IDDOC = Журнал.IDDOC AND Журнал.IDDOCDEF = $ВидДокумента.Чек AND Журнал.Closed & 1 = 1
					| INNER JOIN $Справочник.Станции AS  Станции (NOLOCK) ON $Чек.Станция = Станции.ID AND Станции.ISMARK = 0
					| LEFT JOIN $Справочник.ПричиныУдаления ПричиныУдаления (NOLOCK) ON ПричиныУдаления.CODE = $Чек.Удален 
					| LEFT JOIN $Справочник.СкладыТовара СкладыТовара (NOLOCK) ON СкладыТовара.PARENTEXT = $ЧекСтроки.Товар AND $Чек.Станция = $СкладыТовара.Станция AND СкладыТовара.ISMARK = 0
					| WHERE (Журнал.DATE_TIME_IDDOC BETWEEN :Нач AND :Кон~)
					|	AND ( ($ПоследнееЗначение.Станции.НеПроверятьПривязки(Станции.ID, :Нач) = 1) OR ( COALESCE($СкладыТовара.Склад,$ПоследнееЗначение.Станции.Склад(Станции.ID,:Нач)) = :ВыбСклад) )
					|	AND $ПоследнееЗначение.Станции.Касса(Станции.ID,:Нач) = :ВыбКасса
					|	AND $ЧекСтроки.Товар <> $ПустойИД
					|	AND $ЧекСтроки.Товар  IN (SELECT $ДокМС.Товар FROM $ДокументСтроки.МарочныйОтчет ДокМС (NOLOCK) WHERE IDDOC = :ВыбДок)
					|   AND COALESCE($ПричиныУдаления.Списывать,:Да) = :Да
					|	AND $Чек.Валюта <> $ПустойИД
					|";
					
		Запрос=СоздатьОбъект("ODBCRecordSet");
		Запрос.УстановитьТекстовыйПараметр("ТипККМ",Перечисление.ТипыККМ.RKeeper6POS);
		Запрос.УстановитьТекстовыйПараметр("Нач",Конт.ДатаДок);
		Запрос.УстановитьТекстовыйПараметр("Кон",Конт.ДатаДок);
		Запрос.УстановитьТекстовыйПараметр("ВыбСклад",Конт.Склад);
		Запрос.УстановитьТекстовыйПараметр("ВыбКасса",Конт.Касса);
		Запрос.УстановитьТекстовыйПараметр("ВыбДок",Конт.ТекущийДокумент());
		Запрос.УстановитьТекстовыйПараметр("Да",Да);
//		Запрос.Отладка(1);
		табл=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);

		
		табл.Свернуть("Товар,Клиент,Агент,Валюта","Колво,Сумма");
		табл.ВыбратьСтроки();
		Пока табл.ПолучитьСтроку() = 1 Цикл
			НомВСписке=0;
			Если СписокТоваров.НайтиЗначение(Табл.Товар,НомВСписке,"Товар") <> 0 Тогда
				СписокТоваров.ПолучитьСтрокуПоНомеру(НомВСписке);
				табл.Агент = ?(ПустоеЗначение(СписокТоваров.АгентПоТовару)=0,СписокТоваров.АгентПоТовару,Конт.Агент);
			Иначе
				табл.Агент = ?(ПустоеЗначение(табл.Агент)=1,Конт.Агент,табл.Агент);
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;
	табл.Свернуть("Товар,Клиент,Агент,Валюта","Колво,Сумма");
	табл.Сортировать("Товар,Клиент");	
	
	//табл.ВыбратьСтроку();
	Сообщить("Сумма по документу: "+(Конт.Итог("Сумма")));
	//Сообщить("Кол-во по документу: "+Конт.Итог("Количество"));
	Сообщить("Сумма для распределения: "+табл.Итог("Сумма"));
	//Сообщить("Кол-во для распределения: "+табл.Итог("Колво"));
	
	таблСебест = СоздатьОбъект("ТаблицаЗначений");
	таблСебест = ПолучитьСтоимостьТоваровПоПартиям(Конт);
	
	кБазоваяВалюта = Константа.БазоваяВалюта;
	
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку() = 1 Цикл
		
		табл.Сумма = Пересчет(табл.Сумма,Конт.Валюта,Конт.ДатаДок,Рубли,1);
		рег.Фирма		 = Конт.Фирма;
		рег.Товар		 = табл.Товар;
		рег.Склад		 = Конт.Склад;
		рег.Клиент 		 = табл.Клиент;
		
		рег.Агент 		 = ?(ПустоеЗначение(табл.Агент)=1,Конт.Агент,табл.Агент);
		рег.Касса		 = Конт.Касса;
		рег.ВидОперации  = глПолучитьВидОперации( Конт );
		
		рег.Количество = табл.Колво;
		ном = 0;
		Если таблСебест.НайтиЗначение( табл.Товар, ном, "Товар" ) = 1 Тогда
			рег.СуммаБазовая = таблСебест.ПолучитьЗначение(ном,"Стоимость")*табл.Колво;
			рег.СуммаБазовая2 = таблСебест.ПолучитьЗначение(ном,"ПродСтоимость")*табл.Колво;
			рег.Поставщик = таблСебест.ПолучитьЗначение(ном,"Поставщик");
		Иначе
			Сообщить(Шаблон("[табл.Товар.Код] [табл.Товар]"));
			рег.СуммаБазовая = 0;
			рег.СуммаБазовая2 = 0;
			рег.Поставщик = "";
		КонецЕсли;
		ПроцентНДС = ПроцентНДС(табл.Товар.СтавкаНДС);
		рег.СуммаНДС = табл.Сумма * (ПроцентНДС / (100+ПроцентНДС) );
		рег.СуммаПродажная = табл.Сумма-рег.СуммаНДС;
		СуммаДоСкидки = табл.Колво * ЦенаТовараПоКатегорииДляТовара(табл.Товар, Конт.КатегорияЦены, кБазоваяВалюта, 1, Конт.ДатаДок);
		рег.СуммаСкидки = СуммаДоСкидки - рег.СуммаПродажная;
		Если рег.Товар.ВидТовара = Перечисление.ВидыТоваров.Услуга Тогда
			рег.СуммаСкидки = 0;
		КонецЕсли;
		рег.СуммаПЦЧ = рег.СуммаПродажная;
		
		рег.ФлагУчета = "";
		рег.ПризнакОперации = глПолучитьПризнакОперации(Конт);
		рег.КатегорияВозврата = "";
		рег.СуммаТранспорт = 0;
		рег.СуммаТаможня = 0;
		
		Рег.ДвижениеВыполнить();
		
		НомВСписке=0;
		Если СписокТоваров.НайтиЗначение(Табл.Товар,НомВСписке,"Товар") <> 0 Тогда
			СписокТоваров.УдалитьСтроку(НомВСписке);
		КонецЕсли;
	КонецЦикла;
	Если СписокТоваров.КоличествоСтрок() <> 0 Тогда
		Сообщить("В марочном отчете "+Конт.НомерДок+" от "+Конт.ДатаДок+" присутствует товар, которого нет в чеках!");
		СписокТоваров.ВыбратьСтроки();
		Пока СписокТоваров.ПолучитьСтроку() = 1 Цикл
			рег.Фирма		 = Конт.Фирма;
			рег.Товар		 = СписокТоваров.Товар;
			рег.Склад		 = Конт.Склад;
			рег.Клиент 		 = Конт.Клиент;
			рег.Агент 		 = Конт.Агент;
			рег.Касса		 = Конт.Касса;
			рег.ВидОперации  = глПолучитьВидОперации( Конт );
			
			Колво=СписокТоваров.Количество*СписокТоваров.Коэффициент;
			рег.Количество = Колво;
			ном = 0;
			Если таблСебест.НайтиЗначение( СписокТоваров.Товар, ном, "Товар" ) = 1 Тогда
				рег.СуммаБазовая = таблСебест.ПолучитьЗначение(ном,"Стоимость")*Колво;
				рег.СуммаБазовая2 = таблСебест.ПолучитьЗначение(ном,"ПродСтоимость")*табл.Колво;
				
				рег.Поставщик = таблСебест.ПолучитьЗначение(ном,"Поставщик");
			Иначе
				Сообщить(Шаблон("[рег.Товар.Код] [рег.Товар]"));
				рег.СуммаБазовая = 0;
				рег.СуммаБазовая2 = 0;
				рег.Поставщик = "";
			КонецЕсли;
			ПроцентНДС = ПроцентНДС(СписокТоваров.Товар.СтавкаНДС);
			рег.СуммаНДС = СписокТоваров.Сумма * (ПроцентНДС / (100+ПроцентНДС) );
			рег.СуммаПродажная = СписокТоваров.Сумма-рег.СуммаНДС;
			СуммаДоСкидки = Колво * ЦенаТовараПоКатегорииДляТовара(СписокТоваров.Товар, Конт.КатегорияЦены, кБазоваяВалюта, 1, Конт.ДатаДок);
			рег.СуммаСкидки = СуммаДоСкидки - рег.СуммаПродажная;
			рег.СуммаПЦЧ = рег.СуммаПродажная;
			
			рег.ФлагУчета = "";
			рег.ПризнакОперации = глПолучитьПризнакОперации(Конт);
			рег.КатегорияВозврата = "";
			рег.СуммаТранспорт = 0;
			рег.СуммаТаможня = 0;
			
			Рег.ДвижениеВыполнить();	
		КонецЦикла;
		
		
	КонецЕсли;
	
	
	Возврат 1;
КонецФункции


Функция семОборотыТоваровСличительнаяВедомость( Конт )
	Если конт.Вид() <> "СличительнаяВедомость" Тогда Возврат 0; КонецЕсли;
	
	таблСебест = СоздатьОбъект("ТаблицаЗначений");
	таблСебест.НоваяКолонка("НомСтроки");
	таблСебест.НоваяКолонка("Поставщик");
	таблСебест.НоваяКолонка("Количество");
	таблСебест.НоваяКолонка("Стоимость");
	таблСебест.НоваяКолонка("ПродСтоимость");
	
	регП = СоздатьОбъект("Регистр.ПартииТоваров");
	регП.ВыбратьДвиженияДокумента(Конт.ТекущийДокумент());
	Пока регП.ПолучитьДвижение() = 1 Цикл
		таблСебест.НоваяСтрока();
		таблСебест.НомСтроки = регП.НомерСтроки();
		таблСебест.Поставщик = регП.Контрагент;
		таблСебест.Количество = регП.ОстатокТовара*?(регП.Приход = 1,-1,1); // т.к. вид операции "-"
		таблСебест.Стоимость = регП.Стоимость*?(регП.Приход = 1,-1,1); // т.к. вид операции "-"
		таблСебест.ПродСтоимость = регП.ПродСтоимость*?(регП.Приход = 1,-1,1); // т.к. вид операции "-"
	КонецЦикла;
	таблСебест.Свернуть("НомСтроки,Поставщик","Количество,Стоимость,ПродСтоимость");
	
	рег = Конт.Регистр.ОборотыТоваров;
	
	кРестораннаяКатегорияЦены = Константа.РестораннаяКатегорияЦены;
	кБазоваяВалюта = Константа.БазоваяВалюта;
	
	пКлиент  = Константа.КлиентИнвентура;
	Если Конт.ВидИнвентаризации= Перечисление.ВидыИнвентаризации.Переоценка Тогда
		Если ПустоеЗначение(Конт.ДокументОснование)=0 Тогда
			пАгент = Конт.ДокументОснование.Агент;
		Иначе
			пАгент = Конт.Склад.Агент;
		КонецЕсли;
	Иначе
		пАгент = Конт.Склад.Агент;
	КонецЕсли;
	//спр=СоздатьОбъект("Справочник.Контрагенты");
	//спр.НайтиПоКоду( "77770", 0 );
	//пКлиент=спр.ТекущийЭлемент();
	
	таблСебест.ВыбратьСтроки();
	Пока таблСебест.ПолучитьСтроку() = 1 Цикл
		Конт.ПолучитьСтрокуПоНомеру(таблСебест.НомСтроки);
		Конт.Регистр.ОборотыТоваров.ПривязыватьСтроку(Конт.НомерСтроки);
		рег.Фирма		 = Конт.Фирма;
		рег.Товар		 = Конт.Товар;
		рег.Склад		 = Конт.Склад;
		рег.Клиент 		 = пКлиент;
		
		рег.Агент 		 = пАгент;
		рег.Касса		 = "";
		рег.ВидОперации  = глПолучитьВидОперации( Конт );
		
		рег.Количество = таблСебест.Количество;
		рег.СуммаБазовая = таблСебест.Стоимость;
		рег.СуммаБазовая2 = таблСебест.ПродСтоимость;
		рег.Поставщик = таблСебест.Поставщик;
		
		//		ПроцентНДС = ПроцентНДС(табл.Товар.СтавкаНДС);
		//		рег.СуммаНДС = табл.Сумма * (ПроцентНДС / (100+ПроцентНДС) );
		//		рег.СуммаПродажная = табл.Сумма-рег.СуммаНДС;
		//
		//		Рег.СуммаНДС		= Число(Шаблон("[0"+ЗнакВида+"Пересчет(Конт.Сумма,ПромВал,НаДату,Рубли,НаДату)*ПроцентНДС(Конт.СтавкаНДС)/100]"));
		//		Рег.СуммаПродажная	= Число(Шаблон("[0"+ЗнакВида+"Пересчет(Конт.Сумма,ПромВал,НаДату,Рубли,НаДату)]"));
		
		//СуммаДоСкидки = табл.Колво * ЦенаТовараПоКатегорииДляТовара(табл.Товар, кРестораннаяКатегорияЦены, кБазоваяВалюта, 1, Конт.ДатаДок);
		//рег.СуммаСкидки = СуммаДоСкидки - рег.СуммаПродажная;
		
		рег.ФлагУчета = 5;
		рег.ПризнакОперации = глПолучитьПризнакОперации(Конт);
		рег.КатегорияВозврата = "";
		рег.СуммаТранспорт = 0;
		рег.СуммаТаможня = 0;
		
		Рег.ДвижениеВыполнить();
		
		//Рег.СуммаНДС		= Число(Шаблон("[0"+ЗнакВида+"Пересчет(Конт.Сумма,ПромВал,НаДату,Рубли,НаДату)*ПроцентНДС(Конт.СтавкаНДС)/100]"));
		//Рег.СуммаПродажная	= Число(Шаблон("[0"+ЗнакВида+"Пересчет(Конт.Сумма,ПромВал,НаДату,Рубли,НаДату)]"));
		//Рег.ФлагУчета		= 5; //Спец. признак
	КонецЦикла;
	Возврат 1;
КонецФункции

Функция семОборотыТоваровОтчетРеализатора( Конт )
	Если конт.Вид() <> "ОтчетРеализатора" Тогда Возврат 0; КонецЕсли;
	
	таблСебест = СоздатьОбъект("ТаблицаЗначений");
	таблСебест.НоваяКолонка("НомСтроки");
	таблСебест.НоваяКолонка("Поставщик");
	таблСебест.НоваяКолонка("Количество");
	таблСебест.НоваяКолонка("Стоимость");
	таблСебест.НоваяКолонка("ПродСтоимость");
	регП = СоздатьОбъект("Регистр.ПартииТоваров");
	регП.ВыбратьДвиженияДокумента(Конт.ТекущийДокумент());
	Пока регП.ПолучитьДвижение() = 1 Цикл
		таблСебест.НоваяСтрока();
		таблСебест.НомСтроки = регП.НомерСтроки();
		таблСебест.Поставщик = регП.Контрагент;
		таблСебест.Количество = регП.ОстатокТовара*?(регП.Приход = 1,-1,1); // т.к. вид операции "-"
		таблСебест.Стоимость = регП.Стоимость*?(регП.Приход = 1,-1,1); // т.к. вид операции "-"
		таблСебест.ПродСтоимость = регП.ПродСтоимость*?(регП.Приход = 1,-1,1); // т.к. вид операции "-"
	КонецЦикла;
	таблСебест.Свернуть("НомСтроки,Поставщик","Количество,Стоимость,ПродСтоимость");
	
	рег = Конт.Регистр.ОборотыТоваров;
	
	кБазоваяВалюта = Константа.БазоваяВалюта;
	
	таблСебест.ВыбратьСтроки();
	Пока таблСебест.ПолучитьСтроку() = 1 Цикл
		Конт.ПолучитьСтрокуПоНомеру(таблСебест.НомСтроки);
		Конт.Регистр.ОборотыТоваров.ПривязыватьСтроку(Конт.НомерСтроки);
		рег.Фирма		 = Конт.Фирма;
		рег.Товар		 = Конт.Товар;
		рег.Склад		 = Конт.Склад;
		рег.Клиент 		 = Конт.Клиент;
		рег.Агент 		 = Конт.Агент;
		рег.Касса		 = "";
		рег.ВидОперации  = глПолучитьВидОперации( Конт );
		
		рег.Количество 	 = таблСебест.Количество;
		рег.СуммаБазовая = таблСебест.Стоимость;
		рег.СуммаБазовая2 = таблСебест.ПродСтоимость;
		рег.Поставщик 	 = таблСебест.Поставщик;
		рег.СуммаНДС 	 = Конт.НДС;
		рег.СуммаПродажная = Конт.Сумма;
		рег.СуммаПЦЧ	 = рег.СуммаПродажная;
		
		рег.ФлагУчета = "";
		рег.ПризнакОперации = глПолучитьПризнакОперации(Конт);
		рег.КатегорияВозврата = "";
		рег.СуммаТранспорт = 0;
		рег.СуммаТаможня = 0;
		
		Рег.ДвижениеВыполнить();
		
	КонецЦикла;
	Возврат 1;
КонецФункции


Процедура глОборотыТоваров(Конт)  Экспорт
	Если семОборотыТоваровСписание6Кат( Конт ) = 1 Тогда Возврат; КонецЕсли;
	Если семОборотыТоваровМарочныйОтчет( Конт ) = 1 Тогда Возврат; КонецЕсли;
	Если семОборотыТоваровСличительнаяВедомость( Конт ) = 1 Тогда Возврат; КонецЕсли;
	Если семОборотыТоваровОтчетРеализатора( Конт ) = 1 Тогда Возврат; КонецЕсли;
	
	Рег=Конт.Регистр.ОборотыТоваров;
	
	Агент=?(глЕстьРеквизитШапки("Агент",Конт.Вид())=0,"",Конт.Агент);
	АгентФилиала=?(глЕстьРеквизитШапки("АгентФилиала",Конт.Вид())=0,"",Конт.АгентФилиала);
	//Продавец=?(глЕстьРеквизитШапки("Продавец",Конт.Вид())=0,"",Конт.Продавец);
	Промвал			= ?(глЕстьРеквизитШапки("Валюта",Конт.Вид())=1,Конт.Валюта,Рубли);
	НаДату			= ?(глЕстьРеквизитШапки("Дата_курса",Конт.Вид())=1,Конт.Дата_Курса,Конт.ДатаДок);
	Курс			= ?( глЕстьРеквизитШапки("Курс",Конт.Вид() )=1, Конт.Курс, НаДату );
	ПризнакНакладной= ?(глЕстьРеквизитШапки("ПризнакНакладной",Конт.Вид())=1,Конт.ПризнакНакладной,"");
	
	Касса			= ?(глЕстьРеквизитШапки("ККМ",Конт.Вид())=1,Конт.ККМ,"");

	ЕстьТовар 		= глЕстьРеквизитМнЧ("Товар",Конт.Вид());
	ЕстьСкидка		= глЕстьРеквизитМнЧ("Скидка",Конт.Вид());
	ЕстьАгентТ		= глЕстьРеквизитМнЧ("АгентПоТовару",Конт.Вид());
	ЕстьАгентФилиалаТ=глЕстьРеквизитМнЧ("АгентФилиалаПоТовару",Конт.Вид());
	
	ЗнакВида		= глЗнакВидаОперации(Конт);
	ВидОперации		= глПолучитьВидОперации(Конт);
	
	ПризнакОперации = глПолучитьПризнакОперации(Конт);
	
	СпрКС= СоздатьОбъект("Справочник.КатегорииСписанийКлиенты");
	
	ТС=СоздатьОбъект("ТаблицаЗначений");
	ТС=ПолучитьСтоимостьТоваровПоПартиям(Конт);
	
	//пропускаем Переработку
	Если (ПризнакНакладной=Перечисление.ПризнРасхНакл.Переработка) ИЛИ (ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратСПереработки) 
	ИЛИ (ПризнакНакладной = Перечисление.ПризнРасхНакл.ВозвратСХранения) ИЛИ (ПризнакНакладной = Перечисление.ПризнРасхНакл.Хранение) 
	ИЛИ (ПризнакНакладной = Перечисление.ПризнПрихНакл.Хранение) ИЛИ (ПризнакНакладной = Перечисление.ПризнПрихНакл.ВозвратСХранения) Тогда
		Возврат;
	КонецЕсли;   
	
	Начало=_GetPerformanceCounter();

	Конт.ВыбратьСтроки();
	Пока конт.ПолучитьСтроку()=1 Цикл
		
		Состояние("Обороты товаров:"+Конт.НомерСтроки+"/"+Конт.КоличествоСтрок());
		
		Конт.Регистр.ОборотыТоваров.ПривязыватьСтроку(Конт.НомерСтроки);
		Рег.Фирма		= Конт.Фирма;
		Рег.Товар 		= ?( глЕстьРеквизитМнЧ("Товар",Конт.Вид() )=1, Конт.Товар, "" );
		Рег.ВидСкидки 	= ?( глЕстьРеквизитМнЧ("ВидСкидки",Конт.Вид() )=1, Конт.ВидСкидки, "" );
		Если глЕстьРеквизитМнЧ("СкладТ",Конт.Вид())=1 Тогда
			Рег.Склад 	= ?(ПустоеЗначение(Конт.СкладТ)=1,Конт.Склад,Конт.СкладТ);
		ИначеЕсли глЕстьРеквизитШапки("Склад",Конт.Вид() )=1 Тогда
			Рег.Склад 	= Конт.Склад;
		Иначе
			Рег.Склад 	= "";
		КонецЕсли;
		Рег.Клиент		= КлиентДок(Конт);  
		АгентТ			= ?(глЕстьРеквизитМнЧ("АгентПоТовару",Конт.Вид())=0,"",Конт.АгентПоТовару);
		АгентФилиалаТ	= ?(глЕстьРеквизитМнЧ("АгентФилиалаПоТовару",Конт.Вид())=0,"",Конт.АгентФилиалаПоТовару);

		Рег.Касса		= Касса;
		
		Рег.Агент		= ?(ПустоеЗначение(АгентТ)=1,Агент,АгентТ);
		Рег.ВидОперации	= ВидОперации;
		
		рез=0;
		Поставщик="";
		Если ЕстьТовар = 1 Тогда
			
			Если Конт.Вид()="СличительнаяВедомость" Тогда
				Рег.Количество	= Число(Шаблон("[0"+ЗнакВида+"Конт.КоличествоРазницы*Конт.Коэффициент]"));
			Иначе			
				Рег.Количество	= Число(Шаблон("[0"+ЗнакВида+"Конт.Количество*Конт.Коэффициент]"));
			КонецЕсли;


			ТС.НайтиЗначение(Конт.Товар,рез,"Товар");
			Стоим=0;
			Стоим2=0;
			Если рез>0 Тогда
				ТС.ПолучитьСтрокуПоНомеру(рез);
				Стоим			= ТС.Стоимость;
				Стоим2			= ТС.ПродСтоимость;
				Поставщик		= ТС.Поставщик;
			КонецЕсли;
			
			Рег.СуммаБазовая	= Стоим*Рег.Количество;// стоимость по партиям
			Рег.СуммаБазовая2	= Стоим2*Рег.Количество;// стоимость по партиям
			Рег.Поставщик		= Поставщик;
			
			Рег.СуммаСкидки		= ?(ЕстьСкидка=0,0,Шаблон("[0"+ЗнакВида+"Пересчет(Конт.Скидка,ПромВал,Курс,Рубли,НаДату)]"));

//			Рег.ДвижениеВыполнить();		
//			Продолжить;

			
		КонецЕсли;

		Если Конт.Вид()="Счет_фактура" Тогда
			
			Если ПустоеЗначение(Рег.Товар)=1 Тогда
				Рег.Товар = Константа.ТоварКредитнаяНота;
			КонецЕсли;

			Если ПустоеЗначение(Рег.АгентФилиала)=1 Тогда
				Рег.АгентФилиала = Рег.Агент.АгентКонсолидации;
			КонецЕсли;

			Рег.СуммаПродажная=Конт.Сумма;
			Рег.Количество=0;
			Рег.СуммаНДС=Конт.НДС;
			Рег.СуммаБазовая=0;
			Рег.СуммаБазовая2=0;
		КонецЕсли;
		
		Если Конт.Вид()="МарочныйОтчет" Тогда
			Рег.СуммаПродажная	= Число(Шаблон("[0"+ЗнакВида+"Пересчет(Конт.Сумма-Конт.НДС,ПромВал,Курс,Рубли,НаДату)]"));
			Рег.СуммаНДС		= Число(Шаблон("[0"+ЗнакВида+"Пересчет(Конт.НДС,ПромВал,Курс,Рубли,НаДату)]"));
			
			Если Константа.СписыватьИнгридиентыВМО.Получить(Конт.ДатаДок) = Перечисление.Булево.Нет  Тогда
				Рег.СуммаБазовая= 0;
				Рег.СуммаБазовая2= 0;								
			КонецЕсли;
			
			Если Конт.ДатаДок>='01.03.05' Тогда
				//цены в базовой валюте, как и продажная цена
				СуммаДоСкидки=Рег.Количество*ЦенаТовараПоКатегорииДляТовара(Конт.Товар,Константа.РестораннаяКатегорияЦены,Константа.БазоваяВалюта,1,Конт.ДатаДок);
				Рег.СуммаСкидки=СуммаДоСкидки-Рег.СуммаПродажная;
			КонецЕсли;
			
		ИначеЕсли Конт.Вид()<>"СличительнаяВедомость" Тогда
			Рег.СуммаНДС		= Число(Шаблон("[0"+ЗнакВида+"Пересчет(Конт.Сумма,ПромВал,Курс,Рубли,НаДату)*ПроцентНДС(Конт.СтавкаНДС)/100]"));
			Рег.СуммаПродажная	= Число(Шаблон("[0"+ЗнакВида+"Пересчет(Конт.Сумма,ПромВал,Курс,Рубли,НаДату)]"));
		КонецЕсли;
		
		
		Если Конт.Вид()="РасходнаяНакладная" Тогда
			КлиентФилиала 		= Конт.Счет.КлиентФилиала;
			АгентФилиала 		= Конт.Счет.Агент;
			Рег.КлиентФилиала 	= ?(ПустоеЗначение(КлиентФилиала)=0,КлиентФилиала,"");
			Если (ПустоеЗначение(АгентФилиала)=0) И  (ПустоеЗначение(Рег.КлиентФилиала)=0) Тогда
				Рег.АгентФилиала	= ?(ПустоеЗначение(АгентФилиалаТ)=1,АгентФилиала.АгентКонсолидации,АгентФилиалаТ); 
			Иначе
				Рег.АгентФилиала	= "";
			КонецЕсли;
			
			Если Конт.ПризнакНакладной = Перечисление.ПризнРасхНакл.Продажа Тогда
				Если (ПустоеЗначение(Рег.АгентФилиала)=1) И  (ПустоеЗначение(Рег.КлиентФилиала)=0) Тогда
					АгентПоТоваруФилиал = глПолучитьАгентаПоТовару(КлиентФилиала,АгентФилиала,Конт.Товар);
					Рег.АгентФилиала 	= ?(ПустоеЗначение(КлиентФилиала)=0,АгентПоТоваруФилиал,"");
					Если ПустоеЗначение(Рег.АгентФилиала)=1 Тогда
						Рег.АгентФилиала = Рег.Агент.АгентКонсолидации;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.КредитнаяНота)
			ИЛИ (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.КредитнаяНотаШтраф) Тогда
				
				Если (Конт.Товар = Константа.ТоварКредитнаяНотаУслугаЛогистики) ИЛИ (Конт.Товар = Константа.ТоварКредитнаяНотаШтраф)  Тогда
					//пропускаем данные кредитные ноты
					Продолжить;
				КонецЕсли;
				Рег.СуммаПродажная=-Число(Рег.СуммаСкидки);
				Рег.Количество=0;
				Рег.СуммаНДС=0;
				Рег.СуммаБазовая=0;
				Рег.СуммаБазовая2=0;
			ИначеЕсли (Конт.ПризнакНакладной=Перечисление.ПризнРасхНакл.Пожертвование) Тогда
				Рег.СуммаПродажная=0;
				Рег.СуммаНДС=0;
				Рег.СуммаСкидки=0;
			КонецЕсли;
		КонецЕсли;            
		
		Если Конт.Вид()="ПриходнаяНакладная" Тогда
			Если Конт.ПризнакНакладной = Перечисление.ПризнПрихНакл.ВозвратОтПокупателя Тогда
				Попытка
					Рег.АгентФилиала = Рег.Агент.АгентКонсолидации;
				Исключение
				КонецПопытки;
			КонецЕсли;

			СуммаТоваровРуб=Пересчет(Конт.Итог("Сумма"),Конт.Валюта,Конт.Курс,Рубли,1);
			СуммаРуб=Пересчет(Конт.Сумма,Конт.Валюта,Конт.Курс,Рубли,1);
			ТранспортПоТовару = 0;
			Если Конт.Товар.ВидТовара = Перечисление.ВидыТоваров.Услуга Тогда
			Иначе          
//					Рег.СуммаТранспорт = СуммаРуб*(Конт.Транспорт/СуммаТоваровРуб);
					Рег.СуммаТранспорт = Конт.ТранспортПоТовару;
//				Рег.СуммаТаможня = (СуммаРуб + Рег.СуммаТранспорт)*(Конт.Таможня/100);
				Рег.СуммаТаможня = Конт.ТаможняПоТовару;
			КонецЕсли;	
		КонецЕсли;
		
		Если Конт.Вид()="Списание" Тогда
			Рег.ФлагУчета		= 4;
			
			Если ((Конт.КатегорияСписания=Перечисление.КатегорииСписания.Репрезентация) ИЛИ 
			(Конт.КатегорияСписания=Перечисление.КатегорииСписания.ПодаркиСотрудникам) ИЛИ 
			(Конт.КатегорияСписания=Перечисление.КатегорииСписания.ПодаркиКлиентам) ИЛИ 
			(Конт.КатегорияСписания=Перечисление.КатегорииСписания.ПраздникФирмы)) Тогда
				
				Если (ПустоеЗначение(Конт.СкладДепартамента)=1) И (Конт.ДатаДок>='01.09.08') Тогда
					Рег.СуммаПродажная=0;
					Рег.СуммаСкидки=0;
					Рег.СуммаНДС=0;                                                        
				КонецЕсли;
			КонецЕсли;
			
			Если (Конт.КатегорияСписания=Перечисление.КатегорииСписания.Категория1) ИЛИ
			(Конт.КатегорияСписания=Перечисление.КатегорииСписания.Категория2) ИЛИ
			(Конт.КатегорияСписания=Перечисление.КатегорииСписания.Репрезентация) ИЛИ 
			(Конт.КатегорияСписания=Перечисление.КатегорииСписания.ПодаркиСотрудникам) ИЛИ 
			(Конт.КатегорияСписания=Перечисление.КатегорииСписания.ПодаркиКлиентам) ИЛИ 
			(Конт.КатегорияСписания=Перечисление.КатегорииСписания.ПраздникФирмы) ИЛИ 
			(Конт.КатегорияСписания=Перечисление.КатегорииСписания.ПодаркиКлиентамПрограммыЛояльности)  Тогда
				
//				Если (Конт.КатегорияСписания=Перечисление.КатегорииСписания.Категория2) Тогда
//					Если (Конт.ДатаДок>='01.01.09') Тогда
////						Рег.СуммаЦЧ=Рег.СуммаПродажная*(1+ПроцентНДС(Конт.СтавкаНДС)/100);
//					КонецЕсли;
//				КонецЕсли;                                                                                   
				
				Если (Конт.КатегорияСписания=Перечисление.КатегорииСписания.ПодаркиКлиентамПрограммыЛояльности)  Тогда
					//Рег.СуммаЦЧ=Рег.СуммаПродажная*1.10;
				КонецЕсли;                                                                                   
				
			Иначе //при других категориях обнуляем продажную сумму
				Рег.СуммаПродажная=0; 
				Рег.СуммаСкидки=0;
				Рег.СуммаНДС=0;                                                        
			КонецЕсли;         
			
			КлиентСписания = "";
			
			Если Конт.ДатаДок>='01.03.05' Тогда
				
				СпрКС.НайтиПоРеквизиту("КатегорияСписания",Конт.КатегорияСписания,1);
				КлиентСписания = СпрКС.Клиент;
				
				// больше не используется
				//Если Конт.КатегорияСписания=Перечисление.КатегорииСписания.Категория1 Тогда
				//	КлиентКод="77771";
				//ИначеЕсли Конт.КатегорияСписания=Перечисление.КатегорииСписания.Категория2 Тогда
				//	КлиентКод="77772";
				//ИначеЕсли Конт.КатегорияСписания=Перечисление.КатегорииСписания.Категория3 Тогда
				//	КлиентКод="77773";					
				//ИначеЕсли Конт.КатегорияСписания=Перечисление.КатегорииСписания.Категория4 Тогда
				//	КлиентКод="77774";					
				//ИначеЕсли Конт.КатегорияСписания=Перечисление.КатегорииСписания.Категория5 Тогда
				//	КлиентКод="77775";					
				//ИначеЕсли Конт.КатегорияСписания=Перечисление.КатегорииСписания.Категория6 Тогда
				//	КлиентКод="77776";					
				//ИначеЕсли Конт.КатегорияСписания=Перечисление.КатегорииСписания.Категория8 Тогда
				//	КлиентКод="77778";					
				//ИначеЕсли Конт.КатегорияСписания=Перечисление.КатегорииСписания.Категория9 Тогда
				//	КлиентКод="77779";										
				//	//ИначеЕсли Конт.КатегорияСписания=Перечисление.КатегорииСписания.Категория9 Тогда
				//	//	КлиентКод="77779";	
				//ИначеЕсли Конт.КатегорияСписания=Перечисление.КатегорииСписания.ПодаркиКлиентамПрограммыЛояльности Тогда
				//	КлиентКод="77784";	
				//ИначеЕсли Конт.КатегорияСписания=Перечисление.КатегорииСписания.БракПоставщика Тогда
				//	КлиентКод="77785";	
				//ИначеЕсли Конт.КатегорияСписания=Перечисление.КатегорииСписания.СобственныеНужды Тогда //13-я категория
				//	КлиентКод="77783";  					
				//ИначеЕсли Конт.КатегорияСписания=Перечисление.КатегорииСписания.Репрезентация Тогда //7-я категория
				//	КлиентКод="77777";										
				//КонецЕсли;
			Иначе
				КлиентКод=?(Конт.КатегорияСписания=Перечисление.КатегорииСписания.Категория1,"77777","88888");

				спр=СоздатьОбъект("Справочник.Контрагенты");
				спр.НайтиПоКоду(КлиентКод,0);
				КлиентСписания = спр.ТекущийЭлемент();
				
			КонецЕсли;
			
			Если ПустоеЗначение(Рег.Клиент)=1 Тогда
				Рег.Клиент=КлиентСписания;
			КонецЕсли;
			
			Если (Конт.КатегорияСписания=Перечисление.КатегорииСписания.Репрезентация) ИЛИ //7-я категория
			(Конт.КатегорияСписания=Перечисление.КатегорииСписания.ПодаркиСотрудникам) ИЛИ //10-я категория
			(Конт.КатегорияСписания=Перечисление.КатегорииСписания.ПодаркиКлиентам) ИЛИ  //11-я категория
			(Конт.КатегорияСписания=Перечисление.КатегорииСписания.ПраздникФирмы) Тогда  //12-я категория
				//			Если Конт.КатегорияСписания=Перечисление.КатегорииСписания.Репрезентация Тогда
				Если (Конт.СкладДепартамента.Клиент.Выбран()=0)  Тогда
					//оставляем клиента по умолчанию
					//					Продолжить;
				Иначе
					Рег.Клиент=Конт.СкладДепартамента.Клиент;
				КонецЕсли;
			КонецЕсли;
			
			Если Конт.КатегорияСписания=Перечисление.КатегорииСписания.Категория5 Тогда
				Рег.ФлагУчета		= 5; //Спец. признак
			КонецЕсли;   
			
			//СкладРод=Конт.Склад;
			//Пока СкладРод.Уровень()>1 Цикл
			//	СкладРод=СкладРод.Родитель;
			//КонецЦикла;            
			//
			//Если ПустоеЗначение(Агент)=1 Тогда
			//	Рег.Агент=СкладРод.Агент;
			//КонецЕсли; 
			
			// сем \\
			Если ПустоеЗначение( Агент ) = 1 Тогда
				промСклад = Конт.Склад;
				Пока ПустоеЗначение( Агент ) = 1 Цикл
					Агент = промСклад.Агент;
					промСклад = промСклад.Родитель;
					Если ПустоеЗначение( промСклад ) = 1 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Рег.Агент=Агент;
			КонецЕсли; 
			
			Если ПустоеЗначение(Рег.АгентФилиала)=1 Тогда
				Рег.АгентФилиала = Рег.Агент.АгентКонсолидации;
			КонецЕсли;
			
			// сем //
			
		ИначеЕсли Конт.Вид()="СличительнаяВедомость" Тогда
			Рег.ФлагУчета		= 5; //Спец. признак
//			КлиентКод="77770";
			//спр=СоздатьОбъект("Справочник.Контрагенты");
			//спр.НайтиПоКоду(КлиентКод,0);
			Рег.Клиент=Конт.Фирма.КлиентИнвентура;
		ИначеЕсли Конт.Вид()="ПеремещениеДепартамент" Тогда
			//Для внутренних перемещений не делать движения по регистру
			Если (Конт.СкладДепартамента.Клиент.Выбран()=0)  Тогда
				Продолжить;
			КонецЕсли;
			
			Рег.Клиент=Конт.СкладДепартамента.Клиент;
			Если ПустоеЗначение(Агент)=1 Тогда
				Рег.Агент=Рег.Клиент.Агент;
			Иначе
				Рег.Агент=Агент;
			КонецЕсли;
			
			Рег.ФлагУчета		= 6;
		Иначе
			Рег.ФлагУчета		= "";
		КонецЕсли;
		
		Рег.ПризнакОперации	= ПризнакОперации;
		
		//Если Конт.Вид()="РасходнаяНакладнаяНал" Тогда
		//	Если Конт.Сумма<0 Тогда
		//		Рег.ПризнакОперации	= глПолучитьПризнакОперацииПоПризнаку(Перечисление.ПризнПрихНакл.ВозвратОтПокупателя);
		//	КонецЕсли;            
		//	
		//	Рег.СуммаЦЧ=Конт.СуммаЦЧ;
		//КонецЕсли;
		
		Рег.КатегорияВозврата="";
		Если Конт.Вид()="ПриходнаяНакладная" Тогда
			Если Конт.признакНакладной=перечисление.ПризнПрихНакл.ВозвратОтПокупателя Тогда
				конт.Регистр.ОборотыТоваров.КатегорияВозврата=Конт.КатегорияВозврата;
			КонецЕсли;
		КонецЕсли;       
		
		//Если Число(Рег.СуммаЦЧ)<>0 Тогда
		//	Рег.СуммаПЦЧ=Число(Рег.СуммаЦЧ)-Число(Рег.СуммаНДС);
		//Иначе
			Рег.СуммаПЦЧ=Число(Рег.СуммаПродажная);
		//КонецЕсли;                                 
		
		Рег.ДвижениеВыполнить();
	КонецЦикла;
	
	Если Конт.ГрупповаяОбработка()=0 Тогда
		Конец=_GetPerformanceCounter();
		Если НазваниеНабораПрав()="Администратор" Тогда
			Сообщить("Время проведения оборотов товаров, мс: "+(Конец-Начало));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //глОборотыТоваров

//***************************************************************
// Возвращает цену по категории для товара а не для конта
Функция ЦенаТовараПоКатегорииДляТовара(Товар,Категория,Валюта="",Курс=1,ДатаЦены="",ВЕдинице="") Экспорт
	Если ДатаЦены="" Тогда
		ДатаЦены=РабочаяДата();
	КонецЕсли;
	
	Если ТипЗначенияСтр(ДатаЦены)="Документ" Тогда
		ДатаЦены=ДатаЦены.ДатаДок;
	КонецЕсли;
	// сем \\                         
	Если ПустоеЗначение(ВЕдинице)=0 Тогда
		Коэфф = глВернутьКоэффКГТовара(Товар,ВЕдинице);
	Иначе
		Коэфф = 1;
	КонецЕсли;
	
	СпрЦены = семПолучитьЦенуТовара( Товар, Категория, ДатаЦены);
	Если ПустоеЗначение(СпрЦены)=1 Тогда 
		Возврат 0; 
	КонецЕсли;	// сем //
	Если Валюта="" Тогда
		Валюта=СпрЦены.Валюта;
	КонецЕсли;
//	Возврат Пересчет(Окр(СпрЦены.Цена.Получить(ДатаЦены),СпрЦены.КатегорияЦены.Точность)/?(СпрЦены.Единица.Коэффициент = 0,1,СпрЦены.Единица.Коэффициент),СпрЦены.Валюта,РабочаяДата(),Валюта,Курс);
	Возврат Окр(Пересчет(СпрЦены.Цена/?(СпрЦены.ЕдиницаКоэффициент = 0,1,СпрЦены.ЕдиницаКоэффициент),СпрЦены.Валюта,РабочаяДата(),Валюта,Курс)*Коэфф,СпрЦены.КатегорияЦеныТочность);
КонецФункции                 

//_____________________________________________________________________________
Функция глТоварГастрономе( пТовар, ДатаДок="" ) Экспорт
	Если пТовар.КодДляРозницы = 0 Тогда 
		Возврат 0; 
	КонецЕсли;           
	
	Если ПустоеЗначение(ДатаДок)=1 Тогда
		ДатаДок=ПолучитьДатуТА();
	КонецЕсли;
	Цена = семПолучитьЦенуТовара( пТовар, семПолучитьКатегориюЦеныПоНаим( "Оптовая" ), ДатаДок );
	Если Цена.Цена <> 0 Тогда 
		Возврат 0; 
	КонецЕсли;
	Возврат 1;
КонецФункции

//_____________________________________________________________________________
Функция глБазоваяЕдиницаИзмерения(Товар) Экспорт
	Спр=СоздатьОбъект("Справочник.Единицы");
	Спр.ИспользоватьВладельца(Товар);
	
	Если Спр.ВыбратьЭлементыПоРеквизиту("Единица",Товар.БазоваяЕдиницаИзмерения,1,9)=1 Тогда
		Пока Спр.ПолучитьЭлемент()=1 Цикл
			Если Спр.ПометкаУдаления()=1 Тогда
				Продолжить;
			КонецЕсли;
			
			Возврат Спр.ТекущийЭлемент();
		КонецЦикла;
	Иначе
		Если ПустоеЗначение(Товар.БазоваяЕдиницаИзмерения)=0 Тогда
			глСоздатьНовыйОбъект(Спр);
			Спр.Единица = Товар.БазоваяЕдиницаИзмерения;        
			Спр.Наименование = Строка(Спр.Единица);
			Спр.Коэффициент = 1;
			ОбъектЗаписать(Спр);
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;          
	
	Возврат Спр.ТекущийЭлемент();
	
КонецФункции //глБазоваяЕдиницаИзмерения(Товар)
//_____________________________________________________________________________
Процедура z_Подбор(конт,Режим="") Экспорт
	Если ФС.СуществуетФайл(КаталогИБ()+"1Cv7.DD")=1 Тогда    //dbf версия
		Если Конт.Вид()="ПереоценкаТоваров" Тогда
			Конт.ОткрытьПодбор("Справочник.Номенклатура","ДляПодбора",1);
		Иначе
			Конт.ОткрытьПодбор("Справочник.Номенклатура","ДляПодбора");
		КонецЕсли;
	Иначе                                                                                     
		Если ПустоеЗначение(Константа.ФормаПодбораПоУмолчанию)=1 Тогда
			ФормаПодбора="ДляПодбора";
		Иначе
			ФормаПодбора=СокрЛП(Константа.ФормаПодбораПоУмолчанию);
		КонецЕсли;               
		Если Конт.Вид()="ПереоценкаТоваров" Тогда
			Конт.ОткрытьПодбор("Справочник.Номенклатура",ФормаПодбора,1); 
		Иначе
			Конт.ОткрытьПодбор("Справочник.Номенклатура",ФормаПодбора);
		КонецЕсли;
	КонецЕсли;                              
	Попытка
		Конт.УстановитьЗначениеВПодборе("Склад",Конт.Склад);
	Исключение
	КонецПопытки;
	
	Попытка
		Конт.УстановитьЗначениеВПодборе("ВыбКлиент",Конт.Клиент);
	Исключение
	КонецПопытки;
	
	Попытка
		Конт.УстановитьЗначениеВПодборе("выбВалюта",Конт.Валюта);
	Исключение
	КонецПопытки;
	
	Режим="Каталог";
КонецПроцедуры //z_Подбор
//***************************************************************
//
Функция глПроверкаАгентаПоКлиенту(Конт) Экспорт
	Если глЕстьРеквизитШапки("Агент" ,Конт.Вид())=0 Тогда
		Возврат 1;
	КонецЕсли;
	Если Конт.Агент.выбран()=0 Тогда
		Возврат 1;
	КонецЕсли;
	Если ПринадлежностьАгентаКлиенту(Конт.Агент,Конт.Клиент)=0 Тогда                                    
		Если Конт.КоличествоСтрок()=0 Тогда
			Конт.Агент=0;
			Возврат 1;
		КонецЕсли;
		// это очень плохо, с этим надо что-то делать
		// значит выбрали нового клиента, а агент остался
		// попробуем найти другого агента, который будет удовлетворят нашим товарам
		Если Вопрос("Агент в документе не соответствует клиенту.
		|Будет произведена попытка подобрать агента в соответствии с введенными данными.
		|Продолжить?","Да+Нет")="Нет" Тогда
			Возврат 0;
		Иначе 
			Конт.Агент=0;
			ТаблЧ=СоздатьОбъект("ТаблицаЗначений"); 
			Конт.ВыгрузитьТабличнуюЧасть(ТаблЧ);
			Конт.УдалитьСтроки();               
			ТаблЧ.ВыбратьСтроки();
			Пока ТаблЧ.ПолучитьСтроку()=1 Цикл
				Если УстановкаАгента(Конт,"Каталог",ТаблЧ.Товар,0)=0 Тогда                              
					Сообщить("Товар "+ТаблЧ.товар+" / "+ТаблЧ.Товар.Код+" не соответствует агенту "+Конт.Агент+". Строка № "+таблЧ.НомерСтроки+" удалена из документа.
					|Количество: "+ТаблЧ.Количество+ТаблЧ.Единица+", Цена: "+ТаблЧ.Цена+Конт.Валюта);
					Продолжить;                                                                       
				КонецЕсли;
				Конт.НоваяСтрока();
				Для А=1 По Метаданные.Документ(Конт.Вид()).РеквизитТабличнойЧасти() Цикл
					ИмяРекв=Метаданные.Документ(Конт.Вид()).РеквизитТабличнойЧасти(А).Идентификатор;
					Конт.УстановитьАтрибут(ИмяРекв,ТаблЧ.ПолучитьЗначение(ТаблЧ.НомерСтроки,ИмяРекв));
				КонецЦикла;
			КонецЦикла; 
			Возврат 1;
		КонецЕсли;
	КонецЕсли;        
	Возврат 1;
КонецФункции //ПроверкаАгентаПоКлиенту()                         
//***************************************************************
//
Функция глПроверкаСкладаПоПользователю(Конт,Склад) Экспорт
	Если Конт.ГрупповаяОбработка()=0 Тогда
		Если (Склад.ПринадлежитГруппе(Пользователь.ТекущийЭлемент().ГруппаСкладовПроведения)=0) И (ПустоеЗначение(Пользователь.ТекущийЭлемент().ГруппаСкладовПроведения)=0) Тогда
			Возврат 0;
		Иначе
			Возврат 1;
		КонецЕсли;	
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции //глПроверкаСкладаПоПользователю                       


//***************************************************************
//
//Функция ДвиженияПоЗаказам(Конт,Снятие="Закупать",Знач Заказ="") Экспорт    //Приходная накл и Перемещение ГП
//	//снятие="закупать" для прих накл. или "выпускать" для перемещение ГП на склад
//	Перем ТабЗаказов;
//	РегЗаказы=СоздатьОбъект("Регистр.ЗаказыПокупателей");
//    Если Конт.ИтогиАктуальны()=0  Тогда
//		СписокТоваров=СоздатьОбъект("СписокЗначений");
//		Конт.ВыгрузитьТабличнуюЧасть(СписокТоваров,"Товар");
//    	РегЗаказы.ВременныйРасчет(1);
//		РегЗаказы.УстановитьЗначениеФильтра("Товар",СписокТоваров,2);
//        РассчитатьРегистрыНа(Конт.ТекущийДокумент());
//	КонецЕсли;
//	Конт.ВыбратьСтроки();
//	Пока Конт.ПолучитьСтроку()=1 Цикл
//	    ТМЦ=Конт.Товар;
//		КолвоГасить=Конт.Количество*Конт.Коэффициент;
//		РегЗаказы.УстановитьЗначениеФильтра("Товар",ТМЦ);  
//		РегЗаказы.ВыгрузитьИтоги(ТабЗаказов,,1);
//		//***** сортировка и расстановка приоритетов	
//		Если (ПустоеЗначение(Заказ)=1) Тогда
//		    ТабЗаказов.Сортировать("СрокПоставки,ПоЗаказу +",1);
//		Иначе
//			ТабЗаказов.НоваяКолонка("Приоритет","Число",1,0);
//			ТабЗаказов.ВыбратьСтроки();
//			Пока (ТабЗаказов.ПолучитьСтроку()=1) Цикл
//			    ТабЗаказов.Приоритет=?(ТабЗаказов.ПоЗаказу=Заказ,1,2);
//			КонецЦикла;
//		    ТабЗаказов.Сортировать("Приоритет +,СрокПоставки,ПоЗаказу +",1);
//		КонецЕсли;
//		//***** Погашение заказов и резервов
//		ТабЗаказов.ВыбратьСтроки();
//		Пока (ТабЗаказов.ПолучитьСтроку()=1) Цикл
//			Резерв=?(Снятие="Закупать",ТабЗаказов.Закупать,ТабЗаказов.Выпускать);
//			Если (Резерв>0) Тогда
//				Резерв=Мин(Резерв,КолвоГасить);				
//				Конт.ПривязыватьСтроку(Конт.НомерСтроки);   
//				Конт.Регистр.ЗаказыПокупателей.Товар=ТМЦ;
//				Конт.Регистр.ЗаказыПокупателей.Клиент=ТабЗаказов.Клиент;
//				Конт.Регистр.ЗаказыПокупателей.СрокПоставки=ТабЗаказов.СрокПоставки;
//				Конт.Регистр.ЗаказыПокупателей.ПоЗаказу=ТабЗаказов.ПоЗаказу;
//				Если Снятие="Закупать" Тогда
//					Конт.Регистр.ЗаказыПокупателей.Закупать=Резерв;
//				ИначеЕсли Снятие="Выпускать" Тогда
//					Конт.Регистр.ЗаказыПокупателей.Выпускать=Резерв;
//				КонецЕсли;
//				Конт.Регистр.ЗаказыПокупателей.ДвижениеРасходВыполнить();
//				Конт.Регистр.ЗаказыПокупателей.ДвижениеПриход(ТМЦ,ТабЗаказов.Клиент,ТабЗаказов.СрокПоставки,ТабЗаказов.ПоЗаказу,,,Резерв);
//				КолвоГасить=КолвоГасить-Резерв;
//			КонецЕсли;
//			Если (КолвоГасить=0) Тогда
//			    Прервать;
//			КонецЕсли;
//		КонецЦикла;
//	КонецЦикла; 
//	Возврат 1;  	
//КонецФункции 

//работа с ККМ. Перенесено из конфигурации Build

Функция глСуществуетФайлНастройки() Экспорт
	// функция проверяет наличие файла настройки торгового оборудования
	// на данном рабочем месте для данной ИБ
	// Возвращает номер строки начала описания настройки торгового оборудования для данной ИБ
	// иначе возвращает 0
	Если ФС.СуществуетФайл(ИмяФайлаНастройки)=0 Тогда
		Возврат 0;
	КонецЕсли;
	ФайлНастройки=СоздатьОбъект("Текст");
	ФайлНастройки.Открыть(ИмяФайлаНастройки);
	Для Сч=1 По ФайлНастройки.КоличествоСтрок() Цикл
		Стр=ФайлНастройки.ПолучитьСтроку(Сч);
		Если Найти(ВРЕГ(Стр),Врег(КаталогИБ()))>0 Тогда
			Возврат Сч;
		КонецЕсли;
	КонецЦикла;
	Возврат 0;
КонецФункции       

Функция глИмяОбработкиОбслуживанияККМ(ККМ) Экспорт 	
	Если ПустоеЗначение(ККМ) = 1 Тогда
		Возврат "";
	КонецЕсли;  
	Если ТипЗначенияСтр(ККМ) <> "Справочник" Тогда
		Возврат "";
	КонецЕсли;  	
	Если ККМ.Вид() <> "Кассы" Тогда
		Возврат "";
	КонецЕсли;  
	Если ККМ.ТипККМ = Перечисление.ТипыККМ.FP600 Тогда
		Возврат "ОбслуживаниеFP600";		
	ИначеЕсли ККМ.ТипККМ = Перечисление.ТипыККМ.OmronRS2810 Тогда
		Возврат "ОбслуживаниеOmron2810";
	ИначеЕсли ККМ.ТипККМ = Перечисление.ТипыККМ.CHD2010S Тогда
		Возврат "ОбслуживаниеCHD2010S"; 		
	ИначеЕсли ККМ.ТипККМ = Перечисление.ТипыККМ.Штрих Тогда
		Возврат "ОбслуживаниеККМШтрих"; 		
	ИначеЕсли ККМ.ТипККМ = Перечисление.ТипыККМ.ШтрихPOSФ Тогда
		Возврат "ОбслуживаниеШтрихPOSФ";		
	ИначеЕсли ККМ.ТипККМ = Перечисление.ТипыККМ.CHD5510 Тогда
		Возврат "ОбслуживаниеCHD5510";		
	ИначеЕсли ККМ.ТипККМ = Перечисление.ТипыККМ.CHD3050 Тогда
		Возврат "ОбслуживаниеCHD3050";		
	КонецЕсли;                          	
	Сообщить("Имя обработки ККМ не установлено");
	Возврат "";                         
КонецФункции                            

Процедура глПечататьЧек( Конт, Сокр = 0 ) Экспорт
	// вызов обработки обслуживания ККМ       
	ИмяОбработки=глИмяОбработкиОбслуживанияККМ(ККМФискальногоРегистратора);
	Если ПустоеЗначение(ИмяОбработки)=0 Тогда
		Расшифровка=СоздатьОбъект("СписокЗначений");
		Расшифровка.ДобавитьЗначение(ККМФискальногоРегистратора,"ККМ");
		
		Если (Конт.Вид()="РасходнаяНакладнаяНал") Тогда
			
			Если Конт.ЧекПробитККМ=0 Тогда
				Если Сокр = 0 Тогда
					Расшифровка.ДобавитьЗначение("ПечататьЧек","Процесс");
				Иначе
					Расшифровка.ДобавитьЗначение("ПечататьЧекСокр","Процесс");
				КонецЕсли;
			Иначе
				Расшифровка.ДобавитьЗначение("ПечататьКопиюЧека","Процесс");
			КонецЕсли;                                                      
			
			//Если (Конт.Вид()="ЗаказОтПокупателя") ИЛИ (Конт.Вид()="КорректировкаЗаказОтПокупателя") Тогда
			
			//	Если Конт.ЧекПробитККМ=0 Тогда
			//		Расшифровка.ДобавитьЗначение("ПечататьСуммовойЧек","Процесс");
			//	Иначе
			//		Расшифровка.ДобавитьЗначение("ПечататьКопиюСуммовогоЧека","Процесс");
			//	КонецЕсли;                                                      
			
		ИначеЕсли (Конт.Вид()="ПриходныйОрдерТБ") ИЛИ (Конт.Вид()="РасходныйОрдерТБ") Тогда
			
			Если Конт.ЧекПробитККМ=0 Тогда
				Расшифровка.ДобавитьЗначение("ПечататьСуммовойЧек","Процесс");
			Иначе
				Расшифровка.ДобавитьЗначение("ПечататьКопиюСуммовогоЧека","Процесс");
			КонецЕсли; 			
		КонецЕсли;
		
		Расшифровка.ДобавитьЗначение(Конт,"Документ");
		Расшифровка.ДобавитьЗначение("ИмяОбработки","Отчет");
		глРасшифровка = Расшифровка;
		глФлагРасшифровки = 1;
		ОткрытьФорму("Обработка."+ИмяОбработки+"");
		глФлагРасшифровки = 0;
		глРасшифровка = 0;
	КонецЕсли;      	
КонецПроцедуры 

Процедура глКомандаВесам(пКоманда, пПараметр="") Экспорт
КонецПроцедуры

Процедура глКомандаТерминалу(пКоманда, пРезультат) Экспорт
КонецПроцедуры  

Процедура глКомандаПринтеруЭтикеток(пКоманда, пДопСтрока="") Экспорт
КонецПроцедуры  

Процедура глКомандаДисплею(пКоманда, пДопСтрока) Экспорт
КонецПроцедуры 

//Процедура стар_ПриИзмененииВремениДокумента(Докум)
//Перем Ч,М,С,Ч1,М1,С1;
//                                             
//Если (Докум.Вид() = "РасходнаяНакладная")или(Докум.Вид() = "РасходнаяНакладнаяНал") Тогда
//	Если ПустоеЗначение(Докум.ДокументОснование) = 0 Тогда
//		Если Докум.ДокументОснование.ДатаДок < Докум.ДатаДок Тогда
//			Предупреждение("Дата документа меньше даты документа основания. Операция отменена!");        
//			СтатусВозврата(0);
//			Возврат;				
//		КонецЕсли;
//		Докум.ПолучитьВремя(Ч, М, С); 
//		Докум.ДокументОснование.ПолучитьВремя(Ч1, М1, С1);  
//		Если Ч < Ч1 Тогда
//			Предупреждение("Время документа меньше времени документа основания. Операция отменена!");        
//			СтатусВозврата(0);
//			Возврат;					
//		Иначе
//			Если (Ч = Ч1)И(М < М1) Тогда
//				Предупреждение("Время документа меньше времени документа основания. Операция отменена!");        
//				СтатусВозврата(0);
//				Возврат;					
//			Иначе                                       
//				Если (Ч = Ч1)И(М = М1)И(С < С1) Тогда	
//					Предупреждение("Время документа меньше времени документа основания. Операция отменена!");        
//					СтатусВозврата(0);
//					Возврат;						
//				КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//КонецЕсли;
//КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриИзмененииВремениДокумента(Докум) Экспорт
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_ 
	//стар_ПриИзмененииВремениДокумента(Докум);
	ПриИзмененииОбъекта(Докум,Докум,РабочаяДата());
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриУдаленииИстории(ТипОб,Об,Значен,ДатаИст) Экспорт
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ТипЗначения(Об)=11 Тогда//справочник
		ПриИзмененииОбъекта(Об,Об,ДатаИст);
	Иначе
		Стр=СтрЗаменить(ТипОб,"Константа.","");
		ПриИзмененииОбъекта(Стр,Стр,ДатаИст);
	КонецЕсли;
	
	
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриУдаленииЭлемента(Спр,Режим) Экспорт
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если Спр.Вид()="Контрагент" Тогда
		Док=СоздатьОбъект("Документ.УстановкаСкидокКлиентам");
		Если ПустоеЗначение(Спр.УстановкаСкидкиДок)=0 Тогда
			Док.НайтиДокумент(Спр.УстановкаСкидкиДок);
			Док.Удалить(0);
		КонецЕсли;
	КонецЕсли;
	
	Если Спр.ЭтоГруппа()=1 Тогда
		//записываем изменения по всем элементам этой папки
		Спр1=СоздатьОбъект("Справочник."+Спр.Вид());
		Спр1.ИспользоватьРодителя(Спр);
		Спр1.ВыбратьЭлементы();
		Пока Спр1.ПолучитьЭлемент()>0 Цикл
			ПриУдаленииОбъекта(Спр1.ТекущийЭлемент());
			ПриИзмененииОбъекта(Спр1.ТекущийЭлемент(),Спр1.ТекущийЭлемент(),РабочаяДата());
		КонецЦикла;
	КонецЕсли; 
	
	Если Спр.Вид()="Номенклатура" Тогда
		Если (Спр.ТекущийЭлемент().ПометкаУдаления() = 1)и(Режим = 0) Тогда
			Спр.ТекущийЭлемент().ПризнакНевыбора = 0;
		КонецЕсли;	 
		Если (Спр.ТекущийЭлемент().ПометкаУдаления() = 0)и(Режим = 0) Тогда
			Спр.ТекущийЭлемент().ПризнакНевыбора = 1;
		КонецЕсли;		
	КонецЕсли;
	
	ПриУдаленииОбъекта(Спр);
	ПриИзмененииОбъекта(Спр,Спр,РабочаяДата());
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ПрисвоитьКонтекст(Конт) Экспорт
	ГлобальныйКонтекстOnline=Конт;
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Функция ПроведениеМОД(Конт,Позже=0) Экспорт
	// +SoftPoint+
	глПроверкаРежимаБлокировки(Конт);
	Если СтатусВозврата()=0 Тогда
		Возврат 1;
	КонецЕсли;
	// -SoftPoint-
	
	
	Если (Константа.ВключитьClear1C=1) И (Конт.ГрупповаяОбработка()=1) Тогда
		КолПровДоков = КолПровДоков + 1;
		Если Цел(КолПровДоков/Константа.ПерепроведениеОчищатьБуфер) *Константа.ПерепроведениеОчищатьБуфер=КолПровДоков ТОгда
			ОбъектВК.ClearBuffer();
		КонецЕсли;
	КонецЕсли;
	
	Если ПроведениеПоАлгоритмуМОД=0 Тогда
		//ВыгрузкаПакетовМОД();
		Если Конт.ГрупповаяОбработка()=1 Тогда
			Если Константа.НеРегистрироватьГрИзм=1 Тогда
				Если Конт.Проведен()=1 Тогда
					глМОДКонтекстМодуля=Конт;//все объекты измененные в рамках проведения этого документа тоже не будут фиксироваться !!!
					Возврат 0;//при групповой обработке не обязательно регистрировать
					//перепроведения документа как изменения
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ПриИзмененииОбъекта(Конт,Конт.ТекущийДокумент(),РабочаяДата(),,Позже);
		Возврат 0;//документ проводится на месте, без загрузки движений
	КонецЕсли;
	ОткрытьФорму(ОбработкаОбменДанными,Конт);
	Возврат 1;
КонецФункции
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Функция НайтиВПакетеПоИДД(ИДД,ФлОшибки=0) Экспорт
	Перем БДПакеты;
	Если ОткрытьФайлМОДПоИмени(БДПакеты,"Пакеты","tran2")=0 Тогда //это открывается временный файл !!!
		Сообщить("Ошибка открытия базы ""Пакеты"" - возможно она занята другим приложением",10);
		ФлОшибки=1;
		Возврат 0;
	КонецЕсли;
	//без индекса !!
	НайтиИДД=Сокрлп(ИДД);
	БДПакеты.Первая();
	Пока БДПакеты.ВКонце()=0 Цикл
		Если Сокрлп(БДПакеты.IDD)=НайтиИДД Тогда
			Возврат 1;
		КонецЕсли;
		БДПакеты.Следующая();
	КонецЦикла;
	Возврат 0;
КонецФункции
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриВыклВклПроводокОперации(Докум) Экспорт
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	ПриИзмененииОбъекта(Докум,Докум,РабочаяДата());
	
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриУдаленииСчета(Счет,Режим) Экспорт
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	ЗаписатьИзменениеМОД(Счет.Код,94,ЗначениеВСтроку(Счет),РабочаяДата(),1,"Удаления");
	
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ЗакрытьФайлМОД() Экспорт
	Если ТипЗначенияСтр(БДМОД)="XBASE" Тогда
		Если БДМОД.Открыта()=1 Тогда
			БДМОД.ЗакрытьФайл();
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД

Функция семПроверкаДатыПоставки( конт ) Экспорт
	Если конт.ДатаПоставки < конт.ДатаДок Тогда
		Предупреждение( "Дата поставки не может быть меньше даты документа." );
		СтатусВозврата( 0 );
		Возврат 0;
	КонецЕсли;
	Возврат 1;
КонецФункции

Функция семМожноЗаписать( конт ) Экспорт
	
	Если (Конт.ДатаДок>ТекущаяДата()) и (Конт.Выбран()=0) Тогда
		Конт.АвтоВремяОтключить();
		Конт.УстановитьВремя(7,0,0);
	ИначеЕсли  Конт.ДатаДок>ТекущаяДата() Тогда
		Конт.АвтоВремяНачалоДня();
	ИначеЕсли (Конт.Выбран()=1) Тогда
		Если Дата(Конт.ТекущийДокумент().ДатаДок)<ТекущаяДата() Тогда
			Конт.АвтоВремяТекущее();
		КонецЕсли;
	КонецЕсли; 
	
	Если ( конт.Вид() = "ЗаказПоставщику" ) или ( конт.Вид() = "Счет" ) ИЛИ ( конт.Вид() = "ПретензияПолученная" ) Тогда
		кДатаЗапрета = Константа.ДатаЗапретаРедактированияЗаказов;
	ИначеЕсли ( конт.Вид() = "Счет_фактура" ) Тогда
		кДатаЗапрета = Константа.ДатаЗапретаРедактированияСчетов;
	Иначе
		кДатаЗапрета = Константа.ДатаЗапретаРедактирования;
	КонецЕсли;
	Если конт.ДатаДок <= кДатаЗапрета Тогда
		Сообщить( "Нельзя записывать документ раньше даты запрета редактирования!", "!" );
		СтатусВозврата( 0 );
		Возврат 0;
	Иначе
		Возврат 1;
	КонецЕсли;  
	
КонецФункции

Функция семМожноПровести( конт ) Экспорт
	Если конт.ДатаДок < ТекущаяДата() Тогда
		Возврат 1;
	ИначеЕсли (конт.ДатаДок > ТекущаяДата()) Тогда
	
		Если (семЕстьПраво( "Документ", "РасходнаяНакладная", "Проведение будущей датой" ) = 1) И (КонМесяца(Конт.ДатаДок)=ТекущаяДата()) Тогда
			Сообщить( "Можно проводить документ будущей датой последним днем месяца!", "!!" );
			Возврат 1;
		Иначе
			Сообщить( "Нельзя проводить документ будущей датой!", "!" );
			Сообщить( Шаблон( "Дата документа [конт.ДатаДок]. Текущая дата [ТекущаяДата()]!" ), "I" );
			СтатусВозврата( 0 );
			Возврат 0;
		КонецЕсли;
	Иначе
		Часов = 0; Минут = 0;
		конт.ПолучитьВремя( Часов, Минут,);  минДок = Часов*60+Минут;
		ТекущееВремя( Часов, Минут,); минТек = Часов*60+Минут;
		минРазн = минДок - минТек;
		Если минРазн > 30 Тогда
			Сообщить( "Нельзя проводить документ будущем временем!", "!" );
			Сообщить( Шаблон( "Время документа [конт.ПолучитьВремя()]. Текущее время [ТекущееВремя()]!" ), "I" );
			СтатусВозврата( 0 );
			Возврат 0;
		КонецЕсли;
		Возврат 1;
	КонецЕсли;
КонецФункции

//**************************************
//** проверка на внутреннего клиента фирмы
Функция семВнутреннийКлиент( пКлиент, пФирма ) Экспорт
	РегНомФирмы = СокрЛП( пФирма.Рег_номер );
	РегНомКлиента = СокрЛП( пКлиент.ИНН );
	Возврат ?((РегНомФирмы = РегНомКлиента) И (пФирма = Константа.ОсновнаяФирма), 1, 0);
КонецФункции

Функция семПроверкаКлиента(пДок) Экспорт
	// проверка признака накладной \\
	Если пДок.Вид() = "РасходнаяНакладная" Тогда
		Если пДок.ПризнакНакладной <> Перечисление.ПризнРасхНакл.Продажа Тогда
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	// проверка признака накладной //
	
	Клиент = пДок.Клиент;
	Клиент.ИспользоватьДату("");
	//Сообщить("----------------");
	//Сообщить("Клиент - "+Клиент.Код + "-" + Клиент);
	
	//проверка наличия группового клиента\\
	Клиент = ?(Клиент.КлГруппа.Выбран()=1,Клиент.КлГруппа,Клиент);
	//проверка наличия группового клиента//
	
	//установка флага выгрузки (исп. при обмене данными через МОД)\\
	Если Клиент.ДляВыгрузки=0 Тогда
		спр=СоздатьОбъект("Справочник.Контрагенты");
		Спр.НайтиЭлемент(Клиент);
		Спр.ДляВыгрузки=1;
		ОбъектЗаписать(Спр,);
	КонецЕсли;
	//установка флага выгрузки (исп. при обмене данными через МОД)//
	
	//проверка на запрет выписки накладных\\
	Если пДок.ГрупповаяОбработка()=0 Тогда
		Если Клиент.ЗапретВыпискиНакл.Получить(пДок.ДатаДок)=1 Тогда
			Сообщить("Нельзя выписывать накладные данному клиенту!!!","!");
			Сообщить("У клиента стоит запрет на выписку накладных.","I");
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	//проверка на запрет выписки накладных//
	
	//проверка на разрешение проведение накладной в любом случае\\
	Если Клиент.РазрПроведениеНакл.Получить(пДок.ДатаДок) = 1 Тогда
		Сообщить("Разрешено проведение накладных в любом случае.","I");
		Возврат 1;
	КонецЕсли;
	//проверка на разрешение проведение накладной в любом случае//
	
	//проверка на разрешение превышения кредита\\
	Если семРазрешитьПревышениеКредита( контекст )=Да Тогда
		Сообщить("Резрешено превышение кредита всем клиентам.","I");
		Возврат 1;
	КонецЕсли;
	//проверка на разрешение превышения кредита//
	
	//проверка взаиморасчетов с клиентом\\
	Рег=СоздатьОбъект("Регистр.ВзаиморасчетыПокупателей");
	Если пДок.ИтогиАктуальны()=0  Тогда
		// если итоги не актуальны, то дологи берем из временногно расчета Регистра
		Рег.ВременныйРасчет();
		Рег.УстановитьЗначениеФильтра("Клиент",Клиент,1);
		РассчитатьРегистрыНа(пДок.ТекущийДокумент(),"Контрагент");
	КонецЕсли;
	
	//определение констант\\
	кПогрешностьКредитЛинии = Константа.ПогрешностьКредитЛинии;  
	
	ОснКатегорияКредита = Константа.ОснКатегорияКредита.Получить(пДок.ДатаДок);
	кНачИспСуммыПревышенияКредита = Константа.НачИспСуммыПревышенияКредита;
	
	Если ПустоеЗначение(ОснКатегорияКредита)=1 Тогда
		//все еще работает старая система
		Если пДок.Вид() = "Счет" Тогда
			кОгрПросроченногоДолга = ?(пДок.ВидОплаты=1,Константа.ОгрПросроченногоДолгаДляЗаявок.Получить(пДок.ДатаДок),Константа.ОгрПросроченногоДолга.Получить(пДок.ДатаДок));
		Иначе
			кОгрПросроченногоДолга = Константа.ОгрПросроченногоДолга.Получить(пДок.ДатаДок);
		КонецЕсли;
		кОгрПревышенияКредита = Константа.ОгрПревышенияКредита.Получить(пДок.ДатаДок);
		кОгрСуммыПревышенияКредита = Константа.ОгрСуммыПревышенияКредита.Получить(пДок.ДатаДок);
		
		кЗапретКредита=Нет;
		
	Иначе
		
		КлиентКатегорияКредита=Клиент.КатегорияКредита.Получить(пДок.ДатаДок);
		
		Если ПустоеЗначение(КлиентКатегорияКредита)=0 Тогда
			//в случае когда у клиента определена категория кредита, то ее и используем
			ОснКатегорияКредита=КлиентКатегорияКредита;
		КонецЕсли;
		
		Если пДок.Вид() = "Счет" Тогда                  
			//определяем кол-во дней на ограничение выписки эл. заявки от вида оплаты
			кОгрПросроченногоДолга = ?(пДок.ВидОплаты=1,ОснКатегорияКредита.ОгрПросроченногоДолгаДляЗаявок.Получить(пДок.ДатаДок),ОснКатегорияКредита.ОгрПросроченногоДолга.Получить(пДок.ДатаДок));
		Иначе
			кОгрПросроченногоДолга = ОснКатегорияКредита.ОгрПросроченногоДолга.Получить(пДок.ДатаДок);
		КонецЕсли;
		кОгрПревышенияКредита = ОснКатегорияКредита.ОгрПревышенияКредита.Получить(пДок.ДатаДок);
		кОгрСуммыПревышенияКредита = ОснКатегорияКредита.ОгрСуммыПревышенияКредита.Получить(пДок.ДатаДок);
		
		// если не определена сумма превышения кредита, то используем процент превышения
		Если кОгрСуммыПревышенияКредита=0 Тогда                                         
			//обнуляем дату начала использования суммы кредита
			кНачИспСуммыПревышенияКредита = 0;
		КонецЕсли;                                  
		
		кЗапретКредита=ОснКатегорияКредита.ЗапретКредита;
		
	КонецЕсли;
	//определение констант//
	
	//Сообщить("кПогрешностьКредитЛинии - "+кПогрешностьКредитЛинии);
	//Сообщить("кОгрПросроченногоДолга - "+кОгрПросроченногоДолга);
	//Сообщить("кОгрПревышенияКредита - "+кОгрПревышенияКредита);
	
	//определение текущего долга и дней просрочки\\
	ТекДолг=0;
	ПросроченныйДолг=0;
	Просрочено=0;
	Рег.УстановитьФильтр("",Клиент,"",,);
	Рег.ВыбратьИтоги();
	Пока Рег.ПолучитьИтог()>0 Цикл 
		КредДок = Рег.КредДокумент;
		Если ПустоеЗначение(КредДок)=1 Тогда
			Продолжить;
		КонецЕсли;
		ДатаПост = ?(глЕстьРеквизитШапки("ДатаПоставки",КредДок.Вид())=1,КредДок.ДатаПоставки,КредДок.ДатаДок);
		Глубина = ?(глЕстьРеквизитШапки("Глубина",КредДок.Вид())=1,КредДок.Глубина,Клиент.Глубина.Получить(КредДок.ДатаДок));
		ДатаОпл=БанковскаяДата(ДатаПост,Глубина);
		
		ТекДолг=ТекДолг+Рег.Долг;
		Если (Окр(Рег.Долг-кПогрешностьКредитЛинии,2)>0) И (Просрочено<(пДок.ДатаДок-ДатаОпл)) Тогда
			Просрочено=пДок.ДатаДок-ДатаОпл;
		КонецЕсли;
		
		Если ДатаОпл<пДок.ДатаДок Тогда
			ПросроченныйДолг=ПросроченныйДолг+Рег.Долг;
			//СрочныйДолг=СрочныйДолг+Рег.Долг;
		КонецЕсли;
	КонецЦикла;
	//определение текущего 
	//долга и дней просрочки//
	
	//Сообщить("ДатаОпл - "+ДатаОпл);
	//Сообщить("Просрочено - "+Просрочено);
	//Сообщить("ТекДолг - "+ТекДолг);
	//Сообщить("ПросроченныйДолг - "+ПросроченныйДолг);
	
	//определение валюты кредита\\
	ВалютаКред=Клиент.ВалютаКредита;
	Если ВалютаКред.Выбран()=0 Тогда
		ВалютаКред=Клиент.ВалютаВзаиморасчетов;
	КонецЕсли;
	Если ВалютаКред.Выбран()=0 Тогда
		ВалютаКред=Константа.ВалютаВзаиморасчетов;
	КонецЕсли;
	Если ВалютаКред.Выбран()=0 Тогда
		Сообщить("Нельзя выписывать накладные данному клиенту!!!","!");
		Сообщить("У клиента не определена валюта взаиморасчетов.","I");
		Возврат 0;
	КонецЕсли;
	//определение валюты кредита//
	
	СуммаКред=Клиент.СуммаКредита.Получить(пДок.ДатаДок);
	Если кЗапретКредита=Да Тогда
		СуммаКред=0;
	КонецЕсли;
	
	КурсКред=КурсДляВалюты(ВалютаКред,пДок.ДатаДок);
	СуммаТекДок = Пересчет(пДок.Итог("Сумма")+пДок.Итог("НДС"),пДок.Валюта,пДок.Курс,ВалютаКред,КурсКред);	
	
	//Сообщить("СуммаКред - "+СуммаКред);
	//Сообщить("КурсКред - "+КурсКред);
	//Сообщить("СуммаТекДок - "+СуммаТекДок);
	
	// проверка на ненулевую сумму кредита при выписке в кредит \\
	ЕстьКредит = 1;
	Если (СуммаКред = 0) и (семВнутреннийКлиент(Клиент,пДок.Фирма) = 0) Тогда
		Если пДок.Вид() = "Счет" Тогда
			Если пДок.ВидОплаты = 0 Тогда
				ЕстьКредит = 0;
			КонецЕсли;
		ИначеЕсли пДок.Вид() = "РасходнаяНакладная" Тогда
			Если пДок.ПризнакНакладной = Перечисление.ПризнРасхНакл.Продажа Тогда
				ЕстьКредит = 0;
			КонецЕсли;
			//Иначе
			//	ЕстьКредит = 0;
		КонецЕсли;
	КонецЕсли;            
	
	Если ЕстьКредит = 0 Тогда
		Сообщить("Нельзя выписывать накладные данному клиенту в кредит!!!","!");
		
		Если кЗапретКредита=Да Тогда
			Сообщить("Согласно категории у Клиента установлен запрет на кредитную линию.","I");
		Иначе
			Сообщить("Клиенту не назначена сумма кредита.","I");
		КонецЕсли;
		
		Возврат 0;
	КонецЕсли;
	// проверка на ненулевую сумму кредита при вывиске в кредит //
	
	Долг = ТекДолг+СуммаТекДок;
	Если (Долг-СуммаКред)>0.01 Тогда //превышен кредит
		//проверка на превышение просроченного долга в днях\\
		Если Просрочено>кОгрПросроченногоДолга Тогда
			Сообщить("Нельзя выписывать накладные данному клиенту!!!","!");
			Сообщить(Шаблон("Сумма кредита превышена на [ФРМ(Долг-СуммаКред,ВалютаКред,1)]."),"I");
			Сообщить(Шаблон("Просрочен долг в [ФРМ(ПросроченныйДолг,ВалютаКред,1)] на [Просрочено] д."),"I");
			Возврат 0;
		КонецЕсли;
		//проверка на превышение просроченного долга в днях//
		
		Если ( пДок.ДатаДок < кНачИспСуммыПревышенияКредита ) или ( Число(кНачИспСуммыПревышенияКредита) = 0 ) Тогда
			//проверка на превышение кредита в %\\
			Если СуммаКред<>0 Тогда
				ПроцентПревышения = Окр(((ТекДолг+СуммаТекДок)-СуммаКред)/СуммаКред*100,2,1);
				Если ПроцентПревышения > кОгрПревышенияКредита Тогда
					Сообщить("Нельзя выписывать накладные данному клиенту!!!","!");
					Сообщить(Шаблон("Сумма кредита превышена на [ПроцентПревышения]%."),"I");
					Возврат 0;
				КонецЕсли;
			КонецЕсли;
			//проверка на превышение кредита в %//
		Иначе
			//проверка на превышение кредита в деньгах\\
			Если СуммаКред<>0 Тогда
				СуммаПревышения = ТекДолг + СуммаТекДок - СуммаКред - кОгрСуммыПревышенияКредита;
				Если СуммаПревышения > 0 Тогда
					Сообщить("Нельзя выписывать накладные данному клиенту!!!","!");
					Сообщить(Шаблон("Сумма кредита превышена на [ФРМ(СуммаПревышения,ВалютаКред,1)]."),"I");
					Возврат 0;
				КонецЕсли;
			КонецЕсли;
			//проверка на превышение кредита в деньгах//
		КонецЕсли;
	ИначеЕсли Просрочено>0 Тогда //кредит не привышен, но долг просрочен
		//проверка на превышение просроченного долга в днях\\
		Сообщить(Шаблон("Просрочен долг в [ФРМ(ПросроченныйДолг,ВалютаКред,1)] на [Просрочено] д."),"I");
		Если Просрочено>кОгрПросроченногоДолга Тогда
			Сообщить("Нельзя выписывать накладные данному клиенту!!!","!");
			Сообщить(Шаблон("Превышен макс. допустимый срок просрочки долга на [Просрочено-кОгрПросроченногоДолга] д."),"I");
			Возврат 0;
		КонецЕсли;
		//проверка на превышение просроченного долга в днях//
	КонецЕсли;
	
	//Сообщить("Долг - "+Долг);
	//Сообщить("СуммаКред - "+СуммаКред);
	//Сообщить("СуммаТекДок - "+СуммаТекДок);
	//Сообщить("ПроцентПревышения - "+ПроцентПревышения);
	
	Возврат 1;
КонецФункции

Функция глТоварАрхивный(Тов) Экспорт
	
	Если Лев(Тов.ПоАлфавиту,2)="AA"  Тогда
		Возврат 1;
	КонецЕсли;
	
КонецФункции


Процедура семОбработкаОжидания()
	ПросмотрБлокнота();
	семБлокировка( 0 );
КонецПроцедуры

//******************************************************************************
Функция глПолучитьЦвет(Красный = 0,Зеленый = 0,Синий = 0) Экспорт
	// функция для формирования значения цвета из составляющих (RGB)
	Возврат Макс(0,Синий)*65536+Макс(0,Зеленый)*256+Макс(0,Красный);
КонецФункции

//******************************************************************************                  
// глДополнитьСтрокуЛ(Стр,Чем,Длина)
//
// Параметры:
//  Стр   - исходная строка
//  Чем   - символ, которым дополняем строку
//  Длина - длина, до которой заполняем строку
//
// Возвращаемое значение: 
//  Результирующая строка
//
// Описание:
//  Дополняет передаваемую строку Стр символами Чем до строки длиной Длина
//  слева
//
Функция глДополнитьСтрокуЛ(Стр,Чем,Длина) Экспорт
	Добавить=Длина-СтрДлина(Стр);
	Добавок="";
	Для Сч = 1 По Добавить  Цикл
		Добавок=Добавок+Чем;
	КонецЦикла;
	Возврат Добавок+Стр;
КонецФункции //глДополнитьСтрокуЛ()

//******************************************************************************                  
// глДополнитьСтрокуП(Стр,Чем,Длина)
//
// Параметры:
//  Стр   - исходная строка
//  Чем   - символ, которым дополняем строку
//  Длина - длина, до которой заполняем строку
//
// Возвращаемое значение: 
//  Результирующая строка
//
// Описание:
//  Дополняет передаваемую строку Стр символами Чем до строки длиной Длина
//  справа
//
Функция глДополнитьСтрокуП(Стр,Чем,Длина) Экспорт
	Добавить=Длина-СтрДлина(Стр);
	Добавок="";
	Для Сч = 1 По Добавить  Цикл
		Добавок=Добавок+Чем;
	КонецЦикла;
	Возврат Стр+Добавок;
КонецФункции //глДополнитьСтрокуП()

//******************************************************************************
// глКонтрольныйСимволEAN(ШтрКод, Тип)
//
// Параметры:
//  ШтрКод - 12-символьный штрих-код (без контрольной цифры)
//  Тип    - тип штрихкода: 13 - EAN13, 8 - EAN8
//
// Возвращаемое значение: 
//  Контрольный символ 
//
// Описание: 
//  Функция вычисляет контрольный символ кода EAN
//
Функция глКонтрольныйСимволEAN(ШтрКод, Тип) Экспорт
	
	Четн = 0;
	Нечетн = 0;
	
	Если Тип = 13 Тогда
		КолвоИтераций = 6;
	Иначе
		КолвоИтераций = 4;
	КонецЕсли;
	
	Для Индекс = 1 По КолвоИтераций Цикл
		Четн = Четн + Сред(ШтрКод, 2 * Индекс, 1);
		Нечетн = Нечетн + Сред(ШтрКод, 2 * Индекс - 1, 1);
	КонецЦикла;
	
	Если Тип = 13 Тогда
		Четн = Четн * 3;
	Иначе
		Нечетн = Нечетн * 3;
	КонецЕсли;
	
	КонтЦифра = 10 - (Четн + Нечетн) % 10;
	
	Возврат ?(КонтЦифра = 10, "0", Строка(КонтЦифра));
	
КонецФункции // глКонтрольныйСимволEAN()

//******************************************************************************
// СтрокаВЦифры(Стр)
//
// Параметры:
//  Стр - строка символов
//
// Возвращаемое значение:
//  Строку, сосотоящую только из символов цифр
//
// Описание:
//  Из исходной строки переносит в результирующую строку символы, при этом,
//  если символ не является цифровым, то в результирующую строку переносится
//  символ цифры, который является самым правым в коде символа исходной строки
//
Функция СимволыВЦифры(СтрСимв) 
	
	СтрЦифр = "";
	
	Для Индекс = 1 По СтрДлина(СтрСимв) Цикл
		ТекСимв = Сред(СтрСимв, Индекс, 1);
		
		Если Найти("1234567890", ТекСимв) = 0 Тогда
			// преобразуем символ
			ТекСимв = Строка(КодСимв(ТекСимв) % 10);
		КонецЕсли;
		
		СтрЦифр = СтрЦифр + ТекСимв;
	КонецЦикла;
	
	Возврат СтрЦифр;
	
КонецФункции // СтрокаВЦифры()


//******************************************************************************
// глСформироватьШтрихкод(Префикс, ПредвКод, ТипКода=13)
//
// Параметры:
//  Префикс  - префикс штрихкода (строка из 2-х символов)
//  ПредвКод - строка, содержащая символы из которых нужно сформировать штрих-код
//	ТипКода  - тип формируемого штрихкода. Возможные значения:
//		       13 - для формирования EAN 13 (по умолчанию)
//		        8  - для формирования EAN 8
// Возвращаемое значение:
//  Нет                 
//
// Описание:
//  На основании кода Номенклатуры и кода ОКЕИ формирует штрихкод в формате EAN
//
Функция глСформироватьШтрихкод(Префикс, ПредвКод, ТипКода=13) Экспорт
	
	Если ТипКода = 13 Тогда
		ИспКолво = 10;
	Иначе
		ИспКолво = 6;
	КонецЕсли;
	
	Штрихкод = СимволыВЦифры(Прав(СокрЛП(ПредвКод), ИспКолво));
	Штрихкод = Префикс + глДополнитьСтрокуЛ(Штрихкод, "0", ИспКолво);
	
	Возврат Штрихкод + глКонтрольныйСимволEAN(Штрихкод, ТипКода);
	
КонецФункции // глСформироватьШтрихкод()


// ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** *
Процедура ЛегкоеСообщение ( Текст ) Экспорт
	СпЗн = СоздатьОбъект("СписокЗначений");
	СпЗн.ДобавитьЗначение(" ", "   ");
	СпЗн.ДобавитьЗначение(0, "   " + СокрЛП(Текст) + "   ");
	СпЗн.ДобавитьЗначение(" ", "   ");
	ПараметрыРаскраски = СоздатьОбъект("СписокЗначений");
	ПараметрыРаскраски.Установить("ЦветФонаВыделения", 10092543); 
	ПараметрыРаскраски.Установить("ЦветШрифтаВыделения", 0);
	ПараметрыРаскраски.Установить("ЦветРамкиВыделения", 10092543);
	ПараметрыРаскраски.Установить("ЦветФона", 10092543);
	ПараметрыРаскраски.Установить("ЦветШрифта", 0);
	Сервис.ВыбратьЗначение(СпЗн, СпЗн, , , 2, , ПараметрыРаскраски);
КонецПроцедуры


Процедура глТПВыполнитьДействие(ТП_,Владелец="",стрДействие,Параметр="") Экспорт

	Если (ТипЗначенияСтр(Владелец)="Справочник") И (ПустоеЗначение(Владелец)=1) Тогда
		Предупреждение("Сначала необходимо записать карточку элемента справочника!");
		Возврат;
	КонецЕсли;	
	
	ВидСправочника=СтрЗаменить(ТП_.ПоставщикДанных.Поля.ТекущийЭлемент.Типизация,"Справочник.","");
	
	Если стрДействие="Добавить" Тогда
		Если ПустоеЗначение(Параметр)=0 Тогда
			ОткрытьФормуМодально("Элемент."+ВидСправочника,Параметр,,,Владелец);
		Иначе
			ОткрытьФормуМодально("Элемент."+ВидСправочника,,,,Владелец);
		КонецЕсли;
	ИначеЕсли стрДействие="Изменить" Тогда
		ОткрытьФормуМодально(ТП_.ТекущаяСтрока,,0);
	ИначеЕсли стрДействие="Удалить" Тогда
		
		Если ПустоеЗначение(ТП_.ТекущаяСтрока)=1  Тогда
			Возврат;
		КонецЕсли;
		Если Вопрос("Вы действительно хотите удалить элемент справочника: "+ТП_.ТекущаяСтрока +"?",1) = 2 Тогда 
			Возврат; 
		КонецЕсли; 
		
		спр = СоздатьОбъект("Справочник."+ВидСправочника);
		Если спр.НайтиЭлемент(ТП_.ТекущаяСтрока)=1 Тогда
			ОбъектУдалить(спр, 0);
		КонецЕсли;
	ИначеЕсли стрДействие="ОткрытьСправочник" Тогда
		ОткрытьФорму(ТП_.ТекущаяСтрока,,1);
	КонецЕсли;
	ТП_.ОбновитьСтроки();
КонецПроцедуры


Процедура глПогашениеПоРезервам(Конт,ПромОснование,регРезервы,регСпецЗаказы,регКомпл,регЗаказыПостЗаявки="") Экспорт
	
	Если ПустоеЗначение(ПромОснование)=1 Тогда
		Возврат;
	КонецЕсли;
	
	РежФильтра=1;
	Если ТипЗначенияСтр(ПромОснование)="СписокЗначений" Тогда
		РежФильтра=2;
	КонецЕсли;
	
	регРезервы.УстановитьЗначениеФильтра("ПоСчету",ПромОснование,РежФильтра);
	таблРезервы=СоздатьОбъект("ТаблицаЗначений");
	регРезервы.ВыгрузитьИтоги(таблРезервы,1,1);
	таблРезервы.ВыбратьСтроки();
	Пока таблРезервы.ПолучитьСтроку() = 1 Цикл
		Конт.Регистр.РезервыТоваров.ПривязыватьСтроку(0);
		Конт.Регистр.РезервыТоваров.Товар = таблРезервы.Товар;
		Конт.Регистр.РезервыТоваров.ПоСчету = таблРезервы.ПоСчету;
		Конт.Регистр.РезервыТоваров.РезервТовара = таблРезервы.РезервТовара;
		Конт.Регистр.РезервыТоваров.ДвижениеРасходВыполнить();
	КонецЦикла;
		
	// снятие всего количества со спец. заказа
	регСпецЗаказы.УстановитьЗначениеФильтра("ПоСчету",ПромОснование,РежФильтра);
	таблСпецЗаказы=СоздатьОбъект("ТаблицаЗначений");
	регСпецЗаказы.ВыгрузитьИтоги(таблСпецЗаказы,1,1);
	таблСпецЗаказы.ВыбратьСтроки();
	Пока таблСпецЗаказы.ПолучитьСтроку() = 1 Цикл
		Конт.Регистр.СпецЗаказы.ПривязыватьСтроку(0);
		Конт.Регистр.СпецЗаказы.Товар = таблСпецЗаказы.Товар;
		Конт.Регистр.СпецЗаказы.ПоСчету = таблСпецЗаказы.ПоСчету;
		Конт.Регистр.СпецЗаказы.Заказано = таблСпецЗаказы.Заказано;
		Конт.Регистр.СпецЗаказы.ДвижениеРасходВыполнить();
	КонецЦикла;
	
	РегКомпл.УстановитьЗначениеФильтра("ПоСчету",ПромОснование,РежФильтра);
//	РегКомпл.УстановитьЗначениеФильтра("Статус",2,1);
	таблКомпл=СоздатьОбъект("ТаблицаЗначений");
	РегКомпл.ВыгрузитьИтоги(таблКомпл,1,1);
	таблКомпл.ВыбратьСтроки();
	Пока таблКомпл.ПолучитьСтроку() = 1 Цикл
		Конт.Регистр.КомплектацияЗаявок.ПривязыватьСтроку(0);
		Конт.Регистр.КомплектацияЗаявок.ДатаПоставки = таблКомпл.ДатаПоставки;
		Конт.Регистр.КомплектацияЗаявок.ПоСчету = таблКомпл.ПоСчету;
		Конт.Регистр.КомплектацияЗаявок.МестоКомплектации = таблКомпл.МестоКомплектации;
		Конт.Регистр.КомплектацияЗаявок.Склад = таблКомпл.Склад ;
		Конт.Регистр.КомплектацияЗаявок.ВидЗаявки = таблКомпл.ВидЗаявки ;
		Конт.Регистр.КомплектацияЗаявок.ВидДоставки = таблКомпл.ВидДоставки ;
		Конт.Регистр.КомплектацияЗаявок.Товар = таблКомпл.Товар ;
		Конт.Регистр.КомплектацияЗаявок.Статус = таблКомпл.Статус;
		Конт.Регистр.КомплектацияЗаявок.Количество = таблКомпл.Количество;
		Конт.Регистр.КомплектацияЗаявок.ДвижениеРасходВыполнить();
	КонецЦикла;

	
	Если ПустоеЗначение(регЗаказыПостЗаявки)=0 Тогда
		регЗаказыПостЗаявки.УстановитьЗначениеФильтра("ПоСчету",ПромОснование,РежФильтра);
		таблЗаказыЗаявки=СоздатьОбъект("ТаблицаЗначений");
		регЗаказыПостЗаявки.ВыгрузитьИтоги(таблЗаказыЗаявки,1,1);
		таблЗаказыЗаявки.ВыбратьСтроки();
		Пока таблЗаказыЗаявки.ПолучитьСтроку() = 1 Цикл
			Конт.Регистр.ЗаказыПоставщикамЗаявки.ПривязыватьСтроку(0);
			Конт.Регистр.ЗаказыПоставщикамЗаявки.Товар = таблЗаказыЗаявки.Товар;
			Конт.Регистр.ЗаказыПоставщикамЗаявки.ПоСчету = таблЗаказыЗаявки.ПоСчету;
			Конт.Регистр.ЗаказыПоставщикамЗаявки.ПоЗаказу = таблЗаказыЗаявки.ПоЗаказу;
			Конт.Регистр.ЗаказыПоставщикамЗаявки.Количество = таблЗаказыЗаявки.Количество;
			Конт.Регистр.ЗаказыПоставщикамЗаявки.ДвижениеРасходВыполнить();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура глДвиженияПоКомплектации(Конт) Экспорт
	Если (Конт.ДатаДок>='01.09.11') И (Константа.НовыйМеханизмПретензий.Получить(Конт.ДатаДок)<>Да) Тогда
	//делаем движения для регистрации комплектации по товарам
		Если Конт.Вид()="РасходнаяНакладная" Тогда
		ИначеЕсли Конт.Вид()="РасходнаяРеализатора" Тогда
			Возврат;
		ИначеЕсли (ПустоеЗначение(Конт.Комплектовщик)=0) И (Конт.ДокументОснование.Вид()="Счет") Тогда
		Иначе
			Возврат;
		КонецЕсли;
		
		Конт.ВыбратьСтроки();
		Пока Конт.ПолучитьСтроку()=1 Цикл
			
			Если глЕстьРеквизитМнЧ("Счет",Конт.Вид())=1 Тогда
				ПоСчету=?(ПустоеЗначение(Конт.Счет)=0,Конт.Счет,Конт.ДокументОснование);
			Иначе
				ПоСчету=Конт.ДокументОснование;
			КонецЕсли;
			
			Комплектовщик=?(глЕстьРеквизитМнЧ("КомплектовщикСчет",Конт.Вид())=1,Конт.КомплектовщикСчет,Конт.Комплектовщик);
			
			Если (ПустоеЗначение(Комплектовщик)=0) И (ПоСчету.Вид()="Счет") Тогда
				Конт.Регистр.КомплектацияЗаявок.ПривязыватьСтроку(Конт.НомерСтроки);
				Конт.Регистр.КомплектацияЗаявок.ДатаПоставки=ПоСчету.ДатаПоставки;
				Конт.Регистр.КомплектацияЗаявок.ПоСчету=ПоСчету;
				Конт.Регистр.КомплектацияЗаявок.ВидЗаявки=ПоСчету.ВидЗаявки;
				Конт.Регистр.КомплектацияЗаявок.МестоКомплектации=ПоСчету.Склад.МестоКомплектации;
				Конт.Регистр.КомплектацияЗаявок.Склад=ПоСчету.Склад;
				Конт.Регистр.КомплектацияЗаявок.ВидДоставки=ПоСчету.ВидДоставки;
				Конт.Регистр.КомплектацияЗаявок.Товар=Конт.Товар;
				Конт.Регистр.КомплектацияЗаявок.Статус=3;
				Конт.Регистр.КомплектацияЗаявок.Количество=Конт.Количество*Конт.Коэффициент;
				Конт.Регистр.КомплектацияЗаявок.Комплектовщик=Комплектовщик;
				Конт.Регистр.КомплектацияЗаявок.ДвижениеПриходВыполнить();
				Конт.Регистр.КомплектацияЗаявок.Комплектовщик="";
				Конт.Регистр.КомплектацияЗаявок.ДвижениеРасходВыполнить();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

Процедура глПечатьТЗ(Конт, Табл, СписокПоказателей) Экспорт

    Путь2 = КаталогИБ() + "\ExtForms\БВК_ОтчетПоТЗ.ert";
    Если ФС.СуществуетФайл( Путь2 ) = 1 Тогда

        сп = СоздатьОбъект( "СписокЗначений" );

        сп.Установить( "Контекст", Конт );

        сп.Установить( "ТаблицаЗначений", Табл );

        сп.Установить( "СписокПоказателей", СписокПоказателей );

        ОткрытьФормуМодально( "Обработка", сп, Путь2 );

        Если сп.Получить( "Результат" ) = 0 Тогда
             Возврат;
        КонецЕсли;

   КонецЕсли;

КонецПроцедуры

//*** Укладывает переданную таблицу значений в таблицу на СКЛ сервере
//*** важно, чтобы все колонки были типизированными
Процедура глУложитьТаблицу(пТЗ, ИмяТаб, Колонки="") Экспорт
	Перем ТЗ;

	
	рс=СоздатьОбъект("ODBCRecordset");

	Если ПустаяСтрока(Колонки)=1 Тогда
		ТЗ=пТЗ;
	Иначе
		пТЗ.Выгрузить(ТЗ,,,Колонки);
	КонецЕсли;
	СтрCreate="create table %Имя% (/*column_definition*/)";
	СтрInsert="insert into %Имя% values(/*?*/)";
	Тип="";
	Длина="";
	Точность="";
	ФорматнаяСтрока="";
	КолонкиЕсть=0;
	Для Тек=1 По ТЗ.КоличествоКолонок() Цикл
		Идентификатор=ТЗ.ПолучитьПараметрыКолонки(Тек,Тип,Длина,Точность,,,ФорматнаяСтрока);
		Если (ПустаяСтрока(Колонки)=0)И(Найти(Колонки,Идентификатор)=0) Тогда
			Продолжить;
		КонецЕсли;
		КолонкиЕсть=1;
		Если ПустаяСтрока(ФорматнаяСтрока)=0 Тогда
			SQL_тип=ФорматнаяСтрока;
			рс.ДобПараметр(1,);
		ИначеЕсли ПустаяСтрока(Тип)=1 Тогда
			SQL_тип="char(9)";
			рс.ДобПараметр(1,14,9,0);
		ИначеЕсли Тип="Число" Тогда
			Если Длина=0 Тогда
				Длина=38;
				Точность=10;
			КонецЕсли;
			SQL_тип="numeric(%p%,%s%)";
			SQL_тип=СтрЗаменить(SQL_тип,"%p%",Длина);
			SQL_тип=СтрЗаменить(SQL_тип,"%s%",Точность);
			рс.ДобПараметр(1,11,Длина,Точность);
		ИначеЕсли Тип="Строка" Тогда
			Если Длина=0 Тогда
				SQL_тип="varchar(%n%)";
				SQL_тип=СтрЗаменить(SQL_тип,"%n%",255);
				рс.ДобПараметр(1,15,255,0);
			Иначе
				SQL_тип="char(%n%)";
				SQL_тип=СтрЗаменить(SQL_тип,"%n%",Длина);
				рс.ДобПараметр(1,14,Длина,0);
			КонецЕсли;
		ИначеЕсли Тип="Дата" Тогда
			SQL_тип="datetime";
			рс.ДобПараметр(1,8,0,0);
		ИначеЕсли Найти(Тип,".")>0 Тогда
			SQL_тип="char(9)";
			рс.ДобПараметр(1,14,9,0);
		Иначе
			SQL_тип="char(13)";
			рс.ДобПараметр(1,14,13,0);
		КонецЕсли;
		СтрCreate=СтрЗаменить(СтрCreate,"/*,*/",", ");
		СтрCreate=СтрЗаменить(СтрCreate,"/*column_definition*/",Идентификатор+" "+SQL_тип+"/*,*//*column_definition*/");
		СтрInsert=СтрЗаменить(СтрInsert,"/*,*/",", ");
		СтрInsert=СтрЗаменить(СтрInsert,"/*?*/","?/*,*//*?*/");
	КонецЦикла;
	Если КолонкиЕсть=1 Тогда
		ТекстЗапроса="
		|set nocount on
		|if exists (select * from tempdb..sysobjects where id=object_id('tempdb..%Имя%') and sysstat & 0xf = 3 )
		|  drop table %Имя%;
		|"+СтрCreate+"
		|set nocount off
		|";
		рс_=СоздатьОбъект("ODBCRecordset");
		рс_.ВыполнитьИнструкцию(СтрЗаменить(ТекстЗапроса,"%Имя%",ИмяТаб));
		рс.Подготовить(СтрЗаменить(СтрInsert,"%Имя%",ИмяТаб));
		рс.ВыполнитьSQL_ИзТЗ(ТЗ,100);
	КонецЕсли;
КонецПроцедуры 

//********************************
Процедура Транслит(Расш,Форма) Экспорт
	Если Пользователь.ИспользоватьТранслитИнтерфейса=0 Тогда
		Возврат;
	КонецЕсли;
	Попытка
		АтрФормы=СоздатьОбъект("АтрибутФормы");
		Для Х=0 По Расш.КоличествоАтрибутов()-1 Цикл
			р=Расш.ПолучитьАтрибут(Х);
			СтарыйЗаголовок=(р.Заголовок);
			НовыйЗаголовок="";
			Если СтарыйЗаголовок <> "" Тогда
				НовыйЗаголовок=СтрЗаменить(СтарыйЗаголовок,"А","A");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"Б","B");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"В","V");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"Г","G");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"Д","D");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"Е","Je");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"Ж","Zh");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"З","Z");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"И","I");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"К","K");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"Л","L");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"М","M");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"Н","N");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"О","O");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"П","P");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"Р","R");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"С","S");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"Т","T");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"У","U");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"Ф","F");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"Х","H");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"Ц","C");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"Ч","Ch");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"Ш","Sh");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"Щ","Sch");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"Э","E");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"Ю","Ju");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"Я","Ja");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"а","a");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"б","b");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"в","v");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"г","g");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"д","d");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"е","e");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"ё","jo");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"ж","zh");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"з","z");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"и","i");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"й","j");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"к","k");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"л","l");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"м","m");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"н","n");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"о","o");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"п","p");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"р","r");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"с","s");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"т","t");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"у","u");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"ф","f");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"х","h");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"ц","c");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"ч","ch");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"ш","sh");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"щ","sch");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"ъ","");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"ы","i");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"ь","j");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"э","e");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"ю","ju");
				НовыйЗаголовок=СтрЗаменить(НовыйЗаголовок,"я","ja");
				АтрФормы.УстановитьАтрибут(Форма,Х);
				//р.Заголовок=НовыйЗаголовок;
				АтрФормы.Заголовок=НовыйЗаголовок;
			КонецЕсли;
		КонецЦикла;
		
	Исключение
	КонецПопытки;
КонецПроцедуры

//********************************
Процедура ВыгрузкаВЭлектронномВиде(СписокДок,Повторно=0) Экспорт
	// СписокДок - список документов, которые надо выгрузить в электронном виде
	// Повторно - надо ли выгружать документы, которые уже были выгружены 0 - не надо, 1 - надо
	// предполагается спрашивать при печати одного документа, не спрашивать при печати списком
	Если Повторно=0 Тогда
		ДанныеОбмена=СоздатьОбъект("Справочник.ДанныеОбмена");
	КонецЕсли;
	ИтоговыйСписок=СоздатьОбъект("СписокЗначений");
	Для к=1 По СписокДок.РазмерСписка() Цикл
		ТекДок=СписокДок.ПолучитьЗначение(к);
		КлГруппа=ТекДок.КлГруппа;
		Если ПустоеЗначение(КлГруппа.Ecod)=1 Тогда
			Продолжить;
		КонецЕсли;
		БылВыгружен=0;
		Если Повторно=0 Тогда
			ДанныеОбмена.ИспользоватьВладельца(ТекДок.Клиент);
			БылВыгружен= ДанныеОбмена.НайтиПоРеквизиту("Документ",ТекДок.ТекущийДокумент(),0);
		КонецЕсли;
		Если БылВыгружен=0 Тогда
			ИтоговыйСписок.ДобавитьЗначение(ТекДок);
		КонецЕсли;
	КонецЦикла;
	Если ИтоговыйСписок.РазмерСписка() <> 0 Тогда
		СпПар = СоздатьОбъект("СписокЗначений");
		СпПар.Установить("ВидОперации","Экспорт");
		СпПар.Установить("СписокДок",ИтоговыйСписок);
		ОткрытьФорму("Обработка",СпПар,КаталогИБ()+"ExtForms\EDI-Export.ert");
	КонецЕсли;
КонецПроцедуры
// УПРАВЛЕНИЕ ПЕЧАТНЫМИ ФОРМАМИ
//
//******************************************************************************
// глНайтиВнешнююПечФорму(Текст, ТекущийВидОбъекта, Название="", Кнопка="")
//
// Параметры: 
//  Текст             - Объект типа "Текст", содержащий текст файла описания внешней печатной формы
//  ТекущийВидОбъекта - текущий вид объекта ("Документ.ПоступлениеТМЦ"),
//                      запись про который ищем в тексте описания,
//                      если пусто, то считаем, что позвали для заполнения
//                      по тексту описания колонок "Название" и "Кнопка"
//  Название          - необязательноый параметр, переменная для возвращаемого
//                      значения названия внешней печатной формы
//
//  Кнопка            - необязательноый параметр, переменная для возвращаемого
//                      значения заголовка кнопки печати
//
// Возвращаемое значение:
//  1- если есть упоминание про текущий вид объекта в тексте описания,
//     т.е. данная обработка зарегистрирована для печати по контексту этого объекта, 
//  0- если нет
//
// Описание:
//  Определяет данная обработка зарегистрирована для печати по контексту этого объекта 
//  или нет, попутно заполняет значение колонок "Название" и "Кнопка"
//
Функция глНайтиВнешнююПечФорму(Текст, ТекущийВидОбъекта, Название="", Кнопка="") Экспорт
	Перем Рез;
	Рез = 0;
	Для Инд=1 По Текст.КоличествоСтрок() Цикл
		Стр=Текст.ПолучитьСтроку(Инд);
		Поз=Найти(Стр,"=");
		Если Поз>0 Тогда
			Имя=Лев(Стр,Поз-1);
			Стр=Сред(Стр,Поз+1);
			Если Имя="Объект" Тогда
				
				// Если текущий вид объекта не задан, то хотят считать Название и кнопку
				Если ПустоеЗначение(ТекущийВидОбъекта) = 0 Тогда
					
					// Найдем в этой строке запись про текущий объект
					Если Найти(Стр,ТекущийВидОбъекта) = 0 Тогда;
						Прервать // Не нашли;
					Иначе 
						Рез = 1;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Имя="Название" Тогда
				Название = Стр;
			ИначеЕсли Имя="Кнопка" Тогда
				Кнопка = Стр;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;   
	Возврат Рез;
КонецФункции // глНайтиВнешнююПечФорму() 

//******************************************************************************
// глПолучитьТекущуюПечФорму(ВидОбъекта, ТаблицаПечФорм)
//
// Параметры:
//  ВидОбъекта    - Вид объекта ("Документ.Реализация", "Элемент.Номенклатура" и т.д.),
//                  для которого надо получить печатную форму по умолчанию
//  ТаблицаПечФорм - таблица значений, содержащая список печатных форм для объекта требуемого вида
//  
//
// Возвращаемое значение:
//  Номер строки в таблице печатных форм, 0 в случае ошибки.
//
// Описание:
//  Получает из текущих настроек пользователя номер текущей печатной 
//  формы и пытается найти его в таблице форм. Если не найдено, 
//  то берется первая форма и сохраняется в настройках
//  пользователя.
//  
Функция глПолучитьТекущуюПечФорму(ВидОбъекта, ТаблицаПечФорм) Экспорт
	
	Перем ИмяПечФормы, НомерСтроки;
	
	НомерСтроки = 0;
	
	Если ТаблицаПечФорм.КоличествоСтрок() > 0 Тогда
		ИмяПечФормы	= ВосстановитьЗначение(ВидОбъекта + "ПечФорма");
		
		// пытаемся найти форму в списке
		Если ПустоеЗначение(ИмяПечФормы) = 0 Тогда   
			ТаблицаПечФорм.НайтиЗначение(ИмяПечФормы, НомерСтроки, "Название");
		КонецЕсли;
		
		Если НомерСтроки = 0 Тогда
			// текущая печатная форма еще не найдена
			// установим по умолчанию первую из списка
			ПечФорма = ТаблицаПечФорм.ПолучитьЗначение(1, "Название");
			СохранитьЗначение(ВидОбъекта + "ПечФорма", ПечФорма);
			НомерСтроки = 1;
		КонецЕсли;
		
		// если задано имя файла, то форма внешняя, а для внешней формы нужно 
		// проверить наличие файла внешней обработки.
		Файл = ТаблицаПечФорм.ПолучитьЗначение(НомерСтроки, "Файл");
		Если ПустоеЗначение(Файл) = 0  Тогда
			Если ФС.СуществуетФайл(глКаталогПечФорм + Файл) = 0 Тогда
				Предупреждение("Выбранная обработка в каталоге внешних обработок печатных форм отсутствует!", 60 );
				НомерСтроки = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НомерСтроки;
	
КонецФункции // глПолучитьТекущуюПечФорму()

//******************************************************************************
// глУстановкаКнопкиПечать(Конт, ВидОбъекта, ТаблицаПечФорм)
//
// Параметры: 
//  Конт            - контекст формы документа,
//  ВидОбъекта      - вид объекта ("Документ.Реализация", "Элемент.Номенклатура" и т.д.),
//  ТаблицаПечФорм  - таблица значений, которую надо заполнить 
//
// Возвращаемое значение:
//  Номер текущей печатной формы
//
// Описание:
//  Вызывается при открытии формы документа, формирует таблицу печатных форм,
//  добавляя туда предопределенную (в модуле документа), устанавливает заголовок кнопки печать
//
Функция глУстановкаКнопкиПечать(Конт, ВидОбъекта, ТаблицаПечФорм) Экспорт
	Перем Название, Кнопка;
	
	// Дополним таблицу печатных форм внешними обработками из предопределенного
	// каталога ExtForms\PrnForms
	Текст = СоздатьОбъект("Текст");
	ФайлОписания = ФС.НайтиПервыйФайл(глКаталогПечФорм+"*.efd");
	
	Пока ПустаяСтрока(ФайлОписания)=0 Цикл
		Текст.Открыть(глКаталогПечФорм+ФайлОписания);
		
		// Устанавливаем расширение 
		Файл = Лев(ФайлОписания,СтрДлина(ФайлОписания) - 4) + "." + "ert";
		Если ФС.СуществуетФайл(глКаталогПечФорм + Файл) = 1 Тогда
			
			// Внешний файл, соответствующий файлу описания, найден.
			// Проверим, в нем что есть запись про текущий объект
			Если глНайтиВнешнююПечФорму(Текст, """" + ВидОбъекта + """", Название, Кнопка) = 1 Тогда
				
				// Добавляем строку в список внешних файлов
				ТаблицаПечФорм.НоваяСтрока();
				ТаблицаПечФорм.Название     = Название;
				ТаблицаПечФорм.Кнопка       = Кнопка;
				ТаблицаПечФорм.Файл         = Файл;
				ТаблицаПечФорм.ФайлОписания = (ФайлОписания);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ФайлОписания = ФС.НайтиСледующийФайл();
		
	КонецЦикла;
	
	НомерСтроки = глПолучитьТекущуюПечФорму(ВидОбъекта, ТаблицаПечФорм);
	Если НомерСтроки = 0 Тогда
		ЗагловокКнПечать = "Печать";
	Иначе
		ЗагловокКнПечать = ТаблицаПечФорм.ПолучитьЗначение(НомерСтроки, "Кнопка");
	КонецЕсли;
	Конт.Форма.кнПечать.Заголовок(ЗагловокКнПечать);
	
	Возврат НомерСтроки;
	
КонецФункции // глУстановкаКнопкиПечать()

//******************************************************************************
// глВыборПечатнойФормы(ВидОбъекта, ТаблицаПечФорм)
//   
// Параметры:
//  ВидОбъекта    - Вид объекта ("Документ.Реализация", "Элемент.Номенклатура" и т.д.),
//                  для которого надо получить печатную форму по умолчанию
//  ТаблицаПечФорм - таблица значений, содержащая список печатных форм для объекта требуемого вида
//  
// Возвращаемое значение:
//  Имя кнопки печатной формы
//
// Описание:
//  Открывает форму выбора из списка печатных форм. Выбранное значение
//  сохраняет в настройках пользователя
//
Функция глВыборПечатнойФормы(ВидОбъекта, ТаблицаПечФорм) Экспорт
	Перем НомерСтроки;
	
	НомерСтроки = 0;
	
	КолвоФорм = ТаблицаПечФорм.КоличествоСтрок();
	Поз = Найти(ВидОбъекта, ".");
	Вид = Лев(ВидОбъекта, Поз - 1);
	Если КолвоФорм = 0 Тогда
		
		Если НРег(Вид) = "документ" Тогда
			Текст = "Для документа не зарегистрировано ни одной печатной формы.";
		ИначеЕсли НРег(Вид) = "справочник" Тогда
			Текст = "Для списка справочника не зарегистрировано ни одной печатной формы.";
		Иначе
			Текст = "Для элемента справочника не зарегистрировано ни одной печатной формы.";
		КонецЕсли;
		
		Предупреждение(Текст, 60);
		
	ИначеЕсли КолвоФорм = 1 Тогда
		НомерСтроки = 1;
		
		Если НРег(Вид) = "документ" Тогда
			Текст = "Для документа";
		ИначеЕсли НРег(Вид) = "справочник" Тогда
			Текст = "Для списка справочника";
		Иначе
			Текст = "Для элемента справочника";
		КонецЕсли;
		
		Текст = Текст + " зарегистрирована только одна печатная форма. 
		|Для регистрации дополнительных печатных форм воспользуйтесь 
		|пунктом ""Регистрация внешних печатных форм"" в меню ""Сервис"".";
		
		Предупреждение(Текст ,60);
	Иначе
		ИмяПечФормы	= ВосстановитьЗначение(ВидОбъекта + "ПечФорма");
		
		// выбираем печатную форму
		СписокПечФорм = СоздатьОбъект("СписокЗначений");
		ТаблицаПечФорм.Выгрузить(СписокПечФорм,,,"Название");
		
		Если СписокПечФорм.ВыбратьЗначение(ИмяПечФормы, "", НомерСтроки, 60, 1) = 1 Тогда
			ПечФорма = ТаблицаПечФорм.ПолучитьЗначение(НомерСтроки, "Название");
			СохранитьЗначение(ВидОбъекта + "ПечФорма", ПечФорма);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НомерСтроки;
	
КонецФункции // глВыборПечатнойФормы()
// Инициализация констант настройки торгового оборудования

//****************************************
Функция глПолучитьАгентаПоТовару(Клиент,Агент,Товар) Экспорт
	           
	Дилер=Агент;
	НайденАгент=0;
	Если (ПустоеЗначение(Товар)=0) И (ПустоеЗначение(Клиент)=0) Тогда
		спр=СоздатьОбъект("Справочник.АгентыПоТоварам");
		спр.ИспользоватьВладельца(Клиент);
		Спр.ПорядокКодов();
		Спр.ВыбратьЭлементы();
		Пока Спр.ПолучитьЭлемент()=1 Цикл
			Если Спр.ПометкаУдаления()=1 Тогда
				Продолжить;
			КонецЕсли;
			Если Товар.ПринадлежитГруппе(Спр.Товар)=1 Тогда 
				НайденАгент=1;
				Дилер=Спр.Агент;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
                    
	Если НайденАгент=1 Тогда
		Возврат Дилер;
	КонецЕсли;

	Если (ПустоеЗначение(Товар)=0) И (ПустоеЗначение(Клиент)=0) Тогда
		спр=СоздатьОбъект("Справочник.АгентыПоГруппамТоварам");
		//смотрим разбивку по агентам по группам товара для основного агента клиента
		спр.ИспользоватьВладельца(Клиент.Агент);
		Спр.ПорядокКодов();
		Спр.ВыбратьЭлементы();
		Пока Спр.ПолучитьЭлемент()=1 Цикл
			Если Спр.ПометкаУдаления()=1 Тогда
				Продолжить;
			КонецЕсли;
			Если Товар.ПринадлежитГруппе(Спр.Товар)=1 Тогда
				Дилер=Спр.Агент;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Дилер;
	
КонецФункции


Функция глВернутьСтавкуНДС_POS(СтавкаНДС,Реж,НаДату="") Экспорт
	
	Если ПустоеЗначение(НаДату)=1 Тогда
		НаДату=РабочаяДата();
	КонецЕсли;
	
	Запрос=СоздатьОбъект("ODBCRecordSet");
	ТекстЗапроса="SELECT КодНДС, СтавкаНДС [СтавкаНДС $Перечисление.ЗначенияНДС]
	|			  FROM (
	|			   		SELECT СтавкиНДС_POS.CODE КодНДС
	|							, $ПоследнееЗначение.СтавкиНДС_POS.СтавкаНДС(СтавкиНДС_POS.ID, :ВыбДата) СтавкаНДС
	|			  		FROM $Справочник.СтавкиНДС_POS AS СтавкиНДС_POS 
	|				   ) СтавкиНДС ";
	
	Если Реж="Код" Тогда
		ТекстЗапроса=ТекстЗапроса+" WHERE СтавкаНДС = :ВыбСтавкаНДС";
	Иначе
		ТекстЗапроса=ТекстЗапроса+" WHERE КодНДС = :ВыбСтавкаНДС";
	КонецЕсли;
	
	Запрос.УстановитьТекстовыйПараметр("ВыбДата",НаДату);
	Запрос.УстановитьТекстовыйПараметр("ВыбСтавкаНДС",СтавкаНДС);
	
	тНДС=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
	
	Если Реж="Код" Тогда
		Рез_=тНДС.ПолучитьЗначение(1,"КодНДС");
		Возврат ?(ПустоеЗначение(Рез_)=1,"B",Рез_);
	Иначе
		Рез_=тНДС.ПолучитьЗначение(1,"СтавкаНДС");
		Возврат ?(ПустоеЗначение(Рез_)=1,Константа.ОсновнаяСтавкаНДС,Рез_);
	КонецЕсли;
	
КонецФункции
	
Функция глВернутьАкцентТовара(ВыбТовар,Страна) Экспорт

	НаДату=РабочаяДата();
	Если Страна="LV" Тогда
		глЗапросПоАкцентамТовараLV.УстПараметр(1,НаДату);
		глЗапросПоАкцентамТовараLV.УстПараметр(2,ВыбТовар);
		Возврат глЗапросПоАкцентамТовараLV.ВыполнитьСкалярный();
		
	ИначеЕсли Страна="LT" Тогда
		глЗапросПоАкцентамТовараLT.УстПараметр(1,НаДату);
		глЗапросПоАкцентамТовараLT.УстПараметр(2,ВыбТовар);
		Возврат глЗапросПоАкцентамТовараLT.ВыполнитьСкалярный();
		
	ИначеЕсли Страна="EE" Тогда
		глЗапросПоАкцентамТовараEE.УстПараметр(1,НаДату);
		глЗапросПоАкцентамТовараEE.УстПараметр(2,ВыбТовар);
		Возврат глЗапросПоАкцентамТовараEE.ВыполнитьСкалярный();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСпецКодТовара(СпецКод) Экспорт

	Если ТипЗначенияСтр(СпецКод)="Перечисление" Тогда
		 Если СпецКод=Перечисление.СпецкодыТоваров.E  Тогда
		 	Возврат "E";
		 ИначеЕсли СпецКод=Перечисление.СпецкодыТоваров.I  Тогда
		 	Возврат "I";
		 ИначеЕсли СпецКод=Перечисление.СпецкодыТоваров.S  Тогда
		 	Возврат "S";
		 ИначеЕсли СпецКод=Перечисление.СпецкодыТоваров.F  Тогда
		 	Возврат "F";
		 ИначеЕсли СпецКод=Перечисление.СпецкодыТоваров.K  Тогда
		 	Возврат "K";
		 ИначеЕсли СпецКод=Перечисление.СпецкодыТоваров.G  Тогда
		 	Возврат "G";
		 ИначеЕсли СпецКод=Перечисление.СпецкодыТоваров.GF Тогда
		 	Возврат "GF";
		 ИначеЕсли СпецКод=Перечисление.СпецкодыТоваров.GI  Тогда
		 	Возврат "GI";
		 ИначеЕсли СпецКод=Перечисление.СпецкодыТоваров.GS  Тогда
		 	Возврат "GS";
		 ИначеЕсли СпецКод=Перечисление.СпецкодыТоваров.B  Тогда
		 	Возврат "B";
		 ИначеЕсли СпецКод=Перечисление.СпецкодыТоваров.BS  Тогда
		 	Возврат "BS";
		 ИначеЕсли СпецКод=Перечисление.СпецкодыТоваров.BI  Тогда
		 	Возврат "BI";
		 ИначеЕсли СпецКод=Перечисление.СпецкодыТоваров.N  Тогда
		 	Возврат "N";
		 ИначеЕсли СпецКод=Перечисление.СпецкодыТоваров.P  Тогда
		 	Возврат "P";
		 ИначеЕсли СпецКод=Перечисление.СпецкодыТоваров.PE  Тогда
		 	Возврат "PE";
		 Иначе
		 	Возврат "";
		 КонецЕсли;
	Иначе
		 Если СпецКод="E"  Тогда
		 	Возврат Перечисление.СпецкодыТоваров.E;
		 ИначеЕсли СпецКод="I"  Тогда
		 	Возврат Перечисление.СпецкодыТоваров.I;
		 ИначеЕсли СпецКод="S"  Тогда
		 	Возврат Перечисление.СпецкодыТоваров.S;
		 ИначеЕсли СпецКод="F"  Тогда
		 	Возврат Перечисление.СпецкодыТоваров.F;
		 ИначеЕсли СпецКод="K"  Тогда
		 	Возврат Перечисление.СпецкодыТоваров.K;
		 ИначеЕсли СпецКод="A"  Тогда
		 	Возврат Перечисление.СпецкодыТоваров.A;
		 ИначеЕсли СпецКод="G"  Тогда
		 	Возврат Перечисление.СпецкодыТоваров.G;
		 ИначеЕсли СпецКод="GI"  Тогда
		 	Возврат Перечисление.СпецкодыТоваров.GI;
		 ИначеЕсли СпецКод="GS"  Тогда
		 	Возврат Перечисление.СпецкодыТоваров.GS;
		 ИначеЕсли СпецКод="GF"  Тогда
		 	Возврат Перечисление.СпецкодыТоваров.GF;
		 ИначеЕсли СпецКод="B"  Тогда
		 	Возврат Перечисление.СпецкодыТоваров.B;
		 ИначеЕсли СпецКод="BS"  Тогда
		 	Возврат Перечисление.СпецкодыТоваров.BS;
		 ИначеЕсли СпецКод="BI"  Тогда
		 	Возврат Перечисление.СпецкодыТоваров.BI;
		 ИначеЕсли СпецКод="N"  Тогда
		 	Возврат Перечисление.СпецкодыТоваров.N;
		 ИначеЕсли СпецКод="P"  Тогда
		 	Возврат Перечисление.СпецкодыТоваров.P;
		 ИначеЕсли СпецКод="PE"  Тогда
		 	Возврат Перечисление.СпецкодыТоваров.PE;
		 Иначе
		 	Возврат "";
		 КонецЕсли;
	КонецЕсли;
	

КонецФункции


Функция НазваниеТовара(Тов,Язык="") Экспорт
	Если ПустоеЗначение(Язык)=1 Тогда
		Язык = глКодСтраныПользователя;
	КонецЕсли;
	Язык = СтрЗаменить(Язык,"EN","Англ");
	Язык = СтрЗаменить(Язык,"RU","Русс");
	Возврат СокрЛП(Тов.ПолучитьАтрибут("Наименование"+Язык));
КонецФункции

Функция ПолучитьСостояниеДокументаПоНомеру(пНом,пВидДок)
	глЗапросПоСостояниюДокумента.УстПараметр(1,пНом);
	глЗапросПоСостояниюДокумента.УстПараметр(2,пВидДок);
	глЗапросПоСостояниюДокумента.Отладка(1);
	Возврат глЗапросПоСостояниюДокумента.ВыполнитьСкалярный();
КонецФункции

Функция глПолучитьСостояниеЗаявки(пДок,Название=1) Экспорт
	
	Статус="";
	ПустойСтатус=ПолучитьПустоеЗначение("Справочник.СостоянияДокументов");
	
	Если ПустоеЗначение(пДок)=1 Тогда
		Возврат ?(Название=1,"",ПустойСтатус);
	КонецЕсли;
	
	Если пДок.Вид()<>"Счет" Тогда
		Возврат ?(Название=1,"",ПустойСтатус);
	КонецЕсли;
	
	Если пДок.Проведен()=0 Тогда
		//Возврат "Отменена";
		Статус=ПолучитьСостояниеДокументаПоНомеру(-2,пДок.Вид());
	//ИначеЕсли пДок.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаНаВозврат Тогда
	//	ДокПодч=СоздатьОбъект("Документ");
	//	ДокПодч.ВыбратьПодчиненныеДокументы(пДок.ДатаДок,,пДок);
	//	Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
	//		Если ((ДокПодч.Вид()= "Приходная") ИЛИ (ДокПодч.Вид()= "Перемещение")) И (ДокПодч.Проведен()=1) Тогда
	//			//Возврат "Возвращена";
	//			Статус = ПолучитьСостояниеДокументаПоНомеру(6,пДок.Вид());
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	//Возврат "Ожидает возврата";
	//	Статус = ПолучитьСостояниеДокументаПоНомеру(5,пДок.Вид());
	//
	ИначеЕсли (ПустоеЗначение(пДок.Склад.МестоКомплектации)=1) И (пДок.Клиент <> пДок.КлиентФилиала) Тогда //если не указано место комплектации и документ не из центра
		// не получаем статус по регистру комплектаций только для заявок со склада, у которых не указано место комплектации
		НашлиДокумент=0;
		ДокПодч=СоздатьОбъект("Документ");
		ДокПодч.ВыбратьПодчиненныеДокументы(пДок.ДатаДок,,пДок);
		Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
			Если (Найти(ДокПодч.Вид(),"Расходная")>0) И (ДокПодч.Проведен()=1) Тогда
				//Возврат "Отгружена";
				Статус = ПолучитьСостояниеДокументаПоНомеру(4,пДок.Вид());
				НашлиДокумент=1;
			ИначеЕсли (Найти(ДокПодч.Вид(),"Перемещение")>0) И (ДокПодч.Проведен()=1) Тогда
				//Возврат "Отгружена";
				Статус = ПолучитьСостояниеДокументаПоНомеру(4,пДок.Вид());
				НашлиДокумент=1;
			ИначеЕсли (ДокПодч.Вид()="СнятиеРезерва") И (ДокПодч.Проведен()=1) Тогда
				//Возврат "Отменена";
				Статус = ПолучитьСостояниеДокументаПоНомеру(0,пДок.Вид());
				НашлиДокумент=1;
			КонецЕсли;
		КонецЦикла;
		Если НашлиДокумент=0 Тогда
			//Возврат "Ожидает отгрузки";
			Статус = ПолучитьСостояниеДокументаПоНомеру(3,пДок.Вид());
		КонецЕсли;
	Иначе
		глЗапросПоЗаявкамСтатус.УстПараметр(1,пДок);
		Статус = глЗапросПоЗаявкамСтатус.ВыполнитьСкалярный();

		Если ПустоеЗначение(Статус)=0 Тогда
		Иначе
			глЗапросПоЗаявкамИстория.УстПараметр(1,пДок);
			Статус=глЗапросПоЗаявкамИстория.ВыполнитьСкалярный();
		КонецЕсли;
		
	КонецЕсли;
	
	Если пДок.ПометкаУдаления()=1 Тогда
		Статус=ПолучитьСостояниеДокументаПоНомеру(0,пДок.Вид());
		Возврат Статус;
	КонецЕсли;	
	
	Если Название=1 Тогда
		Возврат ?(ПустоеЗначение(Статус)=0,Статус.Наименование,"");
	Иначе
		Возврат ?(ПустоеЗначение(Статус)=0,Статус,ПустойСтатус);
	КонецЕсли;
КонецФункции

Функция глПолучитьСостояниеДокумента(Док,Название=1) Экспорт
Перем л_Сост,л_СтатусСост,л_Статус;	

//	Если Док.Вид()="СчетОбщий" Тогда
//
//		л_Сост=ПолучитьПустоеЗначение("Справочник.СостоянияДокументов");
//		л_СтатусСост=999; //0-анулирована,1-принята,2-комплектуется,3-Готова к отгрузки, 4-Выполнена  
//
//		ДокПодч=СоздатьОбъект("Документ");
//		ДокПодч.ВыбратьПодчиненныеДокументы(Док.ДатаДок,Док.ДатаДок,Док); //обычно создаются в тот же день.
//			Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
//				Если ДокПодч.Вид()="Счет" Тогда
//					л_Сост = глПолучитьСостояниеЗаявки(ДокПодч.ТекущийДокумент(),0);
//					Если л_Сост.Код="0" Тогда
//						л_СтатусСост=Мин(л_СтатусСост,0)
//					ИначеЕсли л_Сост.Код="1" Тогда
//						л_СтатусСост=Мин(л_СтатусСост,1)
//					ИначеЕсли л_Сост.Код="3" Тогда
//						л_СтатусСост=Мин(л_СтатусСост,3)
//					ИначеЕсли л_Сост.Код="4" Тогда
//						л_СтатусСост=Мин(л_СтатусСост,4)
//					КонецЕсли;
//				КонецЕсли;	
//			КонецЦикла;	
//			л_Статус=ПолучитьСостояниеДокументаПоНомеру(л_СтатусСост,Док.Вид());
//		Возврат л_Статус;
//Иначе
	Если Док.Вид()="Счет" Тогда
		Возврат глПолучитьСостояниеЗаявки(Док,Название);
	КонецЕсли;
	
	Запрос=СоздатьОбъект("ODBCRecordSet");
	тВидДокумента=Док.Вид();
//	пДок=СоздатьОбъект("ИндексированнаяТаблица");
	
//	ТекстЗапроса="
//	|SELECT СостояниеДокументаОстаткиОбороты.СостояниеДок [СостояниеДок $Справочник.СостоянияДокументов]
////	|SELECT TOP 1 СостояниеДокументаОстаткиОбороты.СостояниеДок [СостояниеДок $Справочник.СостоянияДокументов]
//	|FROM $РегистрОстаткиОбороты.СостояниеДокумента(,,,,,
//	|		(Док = $ВидДокумента36."+тВидДокумента+"+:Док),
//	|	СостояниеДок,) AS СостояниеДокументаОстаткиОбороты"
//	;
	ТекстЗапроса="
	|SELECT TOP 1 СостояниеДокументаОстатки.СостояниеДок [СостояниеДок $Справочник.СостоянияДокументов]
	|FROM $РегистрОстатки.СостояниеДокумента(,,
	|(Док = $ВидДокумента36."+тВидДокумента+"+:Док),
	|	СостояниеДок,) AS СостояниеДокументаОстатки"
	;
	
	Запрос.УстановитьТекстовыйПараметр("Док",Док);
//	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,пДок);
//	пДок.Показать();
	л_Статус=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если Док.Вид()="СчетОбщий" Тогда
		Если ПустоеЗначение(л_Статус)=1 Тогда
			Если Док.Проведен()=0 Тогда
				л_Статус = ПолучитьСостояниеДокументаПоНомеру(-2,Док.Вид());
			Иначе
				ДокПодч=СоздатьОбъект("Документ");
				ДокПодч.ВыбратьПодчиненныеДокументы(Док.ДатаДок,ТекущаяДата(),Док); //обычно создаются в тот же день.
				л_НовыйСтатус=0;
				л_ОтгруженСчет=0;
					Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
						Если ДокПодч.Вид()="Счет" Тогда
							л_Сост = глПолучитьСостояниеЗаявки(ДокПодч.ТекущийДокумент(),0);
							Если л_Сост.Код="4" Тогда
								л_НовыйСтатус=1;
								л_ОтгруженСчет=1;
							ИначеЕсли л_Сост.Код="-1" Тогда
								л_НовыйСтатус=1;
							ИначеЕсли л_Сост.Код="0" Тогда
								л_НовыйСтатус=1;
							Иначе
								л_НовыйСтатус=0;
							КонецЕсли;
						КонецЕсли;	
					КонецЦикла;		
				Если (л_НовыйСтатус=1)и (л_ОтгруженСчет=1)  Тогда
					л_Статус = ПолучитьСостояниеДокументаПоНомеру(4,Док.Вид());
				КонецЕсли;	
	
				Если (л_НовыйСтатус=1)и (л_ОтгруженСчет=0)  Тогда
					л_Статус = ПолучитьПустоеЗначение();
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат л_Статус;
	
КонецФункции


Процедура глОтправитьНаКомплектациюЗаявку(пДок) Экспорт
	
	ДокКомп=СоздатьОбъект("Документ.КомплектацияЗаявки");
	
	Если ПустоеЗначение(пДок.Склад.МестоКомплектации) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	НайденДокКомпл=0;
	ДокПодч=СоздатьОбъект("Документ");
	ДокПодч.ВыбратьПодчиненныеДокументы(пДок.ДатаДок,,пДок);
	Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
		Если (ДокПодч.Вид()="КомплектацияЗаявки") И (ДокПодч.Проведен()=1) Тогда
			ДокКомп.НайтиДокумент(ДокПодч.ТекущийДокумент());
			НайденДокКомпл=1;
		КонецЕсли;	
	КонецЦикла;
	
	Если НайденДокКомпл=0 Тогда
		ДокКомп.Новый();
		ЗаполнитьШапку(ДокКомп); 
		ДокКомп.ПоСчету=пДок;
	КонецЕсли;
	
	ДокКомп.МестоКомплектации=пДок.Склад.МестоКомплектации;
	ДокКомп.ВидЗаявки=пДок.ВидЗаявки;
	ДокКомп.АвтоВремяТекущее();
	ОбъектЗаписать(ДокКомп,);
	ДокКомп.АвтоВремяТекущее();
	
//	ДокКомп.УстановитьВремя(Часы_,Мин_,Сек_+1);
	ДокКомп.Провести(1);
	ЗаписьЖурналаРегистрации( "Комплектация "+ДокКомп.НомерДок+" по заявке "+пДок.НомерДок,, "Комплектация заявок", пДок.ТекущийДокумент(), 2 );
	Если ДокКомп.Проведен()=1 Тогда
		Сообщить("Заявка успешно отправлена на комплектацию!");
	КонецЕсли;
	
КонецПроцедуры

Функция глВыборАгента(ВыбАгент) Экспорт

	Запрос=СоздатьОбъект("ODBCRecordSet");
	
	Условие="";
	Условие2="";
	Условие3="";
	глДобавитьФильтр(Запрос,Условие,"","","ID",ВыбАгент,"Сотрудники");
	глДобавитьФильтр(Запрос,Условие2,"","СотрудникиВнутр","ID",ВыбАгент,"Сотрудники");
	глДобавитьФильтр(Запрос,Условие3,"","","PARENTEXT",Пользователь,"Сотрудники");
	
	ТекстЗапроса="SELECT Сотрудники.ID [Агент $Справочник.Сотрудники]
	|			  FROM $Справочник.Сотрудники AS Сотрудники (NOLOCK)
	|			  WHERE (Сотрудники.ISMARK = 0) "+Условие+"
	|			  UNION 
	|			  SELECT Сотрудники.ID [Агент $Справочник.Сотрудники]
	|			  FROM $Справочник.Сотрудники AS Сотрудники (NOLOCK)
	|			  INNER JOIN $Справочник.Сотрудники AS СотрудникиВнутр (NOLOCK) ON СотрудникиВнутр.ID = $Сотрудники.АгентВнутр
	|			  WHERE (Сотрудники.ISMARK = 0) "+Условие2+"
	|			  UNION 
	|			  SELECT $Спр.Подразделение [Агент $Справочник.Сотрудники]
	|			  FROM $Справочник.ПодразделенияПользователей Спр (NOLOCK) 
	|			  WHERE ISMARK = 0 "+Условие3+"
	|";

	табл=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);	
	рез=0;
	Если табл.ВыбратьСтроку(рез)=1 Тогда
		Возврат табл.ПолучитьЗначение(рез,1);
	КонецЕсли;
	

КонецФункции

Функция семПолучитьАгента( пКлиент = "", пДок = "" ) Экспорт
	Если ПустоеЗначение( пДок ) = 0 Тогда
		Если глЕстьРеквизитШапки("Агент", пДок.Вид() ) = 1 Тогда
			Если ПустоеЗначение( пДок.Агент ) = 0 Тогда
				Возврат пДок.Агент;
			КонецЕсли;
		КонецЕсли;
		Если глЕстьРеквизитШапки("Клиент", пДок.Вид() ) = 1 Тогда
			Если ПустоеЗначение( пДок.Клиент ) = 0 Тогда
				Возврат пДок.Клиент.Агент;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ПустоеЗначение( пКлиент ) = 0 Тогда
		Возврат пКлиент.Агент;
	КонецЕсли;
	Возврат "";
КонецФункции

Функция глРазрешеноПодтверждатьСутьПретензии(пПользователь,пАгент,пСуть) Экспорт
	
	Запрос=СоздатьОбъект("ODBCRecordSet");
	ТекстЗапроса="SELECT COALESCE(COUNT(ПретензииОтветственныеПоДолжностям.ID),0) Кол
		|		  FROM $Справочник.ПретензииОтветственныеПоДолжностям AS ПретензииОтветственныеПоДолжностям (NOLOCK)
		|		  WHERE (ПретензииОтветственныеПоДолжностям.ISMARK = 0)
		|				AND (ПретензииОтветственныеПоДолжностям.PARENTEXT = :ВыбПретензия)
		|				AND ($ПретензииОтветственныеПоДолжностям.ОтветственнаяДолжность = :ВыбДолжность)
		|				AND $ПретензииОтветственныеПоДолжностям.Подтверждение = 1
		|";
		
	Запрос.УстановитьТекстовыйПараметр("ВыбПретензия",пСуть);
	Запрос.УстановитьТекстовыйПараметр("ВыбДолжность",пПользователь.Сотрудник.Должность);
	
	ЕстьПраво = Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если ЕстьПраво = 0 Тогда
		Сообщить("У должности "+пПользователь.Сотрудник.Должность + " нет права на подтверждение претензии!");
		Возврат 0;
	КонецЕсли;
	
	Если ПустоеЗначение(пАгент)=0 Тогда
		ТекстЗапроса = "SELECT COALESCE(COUNT(ДС.ID),0) Кол
		|				FROM $Справочник.ПодразделенияПользователей AS ПодразделенияПользователей (NOLOCK)
		|				INNER JOIN Дерево_Сотрудники ДС (NOLOCK) ON ДС.PARENTID = $ПодразделенияПользователей.Подразделение
		|				WHERE (ПодразделенияПользователей.ISMARK = 0)
		|				AND (ПодразделенияПользователей.PARENTEXT = :ВыбПользователь)
		|				AND ДС.ID = :ВыбАгент
		|";
		
		Запрос.УстановитьТекстовыйПараметр("ВыбПользователь",Пользователь);
		Запрос.УстановитьТекстовыйПараметр("ВыбАгент",пАгент);
		
		ЕстьПраво = Запрос.ВыполнитьСкалярный(ТекстЗапроса);
		
		Если ЕстьПраво = 0 Тогда
			Сообщить("У пользователя нет полномочий на подтверждение претензии для данной структуры!");
			Возврат 0;
		КонецЕсли;
		Возврат 1;
	Иначе
		Возврат 1;		
	КонецЕсли;
		
КонецФункции

Функция глРазрешеноПисатьЗаключениеСутьПретензии(пПользователь,пАгент,пСуть) Экспорт
	
	Запрос=СоздатьОбъект("ODBCRecordSet");
	ТекстЗапроса="SELECT COALESCE(COUNT(ПретензииОтветственныеПоДолжностям.ID),0) Кол
		|		  FROM $Справочник.ПретензииОтветственныеПоДолжностям AS ПретензииОтветственныеПоДолжностям (NOLOCK)
		|		  WHERE (ПретензииОтветственныеПоДолжностям.ISMARK = 0)
		|				AND (ПретензииОтветственныеПоДолжностям.PARENTEXT = :ВыбПретензия)
		|				AND ($ПретензииОтветственныеПоДолжностям.ОтветственнаяДолжность = :ВыбДолжность)
		|				AND $ПретензииОтветственныеПоДолжностям.Заключение = 1
		|";
		
	Запрос.УстановитьТекстовыйПараметр("ВыбПретензия",пСуть);
	Запрос.УстановитьТекстовыйПараметр("ВыбДолжность",пПользователь.Сотрудник.Должность);
	
	ЕстьПраво = Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	Если ЕстьПраво = 0 Тогда
		//Сообщить("У должности "+пПользователь.Сотрудник.Должность + " нет права на написание заключения для претензии!");
		Возврат 0;
	КонецЕсли;
	
	Если ПустоеЗначение(пАгент)=0 Тогда
		ТекстЗапроса = "SELECT COALESCE(COUNT(ДС.ID),0) Кол
		|				FROM $Справочник.ПодразделенияПользователей AS ПодразделенияПользователей (NOLOCK)
		|				INNER JOIN Дерево_Сотрудники ДС (NOLOCK) ON ДС.PARENTID = $ПодразделенияПользователей.Подразделение
		|				WHERE (ПодразделенияПользователей.ISMARK = 0)
		|				AND (ПодразделенияПользователей.PARENTEXT = :ВыбПользователь)
		|				AND ДС.ID = :ВыбАгент
		|";
		
		Запрос.УстановитьТекстовыйПараметр("ВыбПользователь",Пользователь);
		Запрос.УстановитьТекстовыйПараметр("ВыбАгент",пАгент);
		
		ЕстьПраво = Запрос.ВыполнитьСкалярный(ТекстЗапроса);
		
		Если ЕстьПраво = 0 Тогда
			//Сообщить("У пользователя нет полномочий на написание заключения для претензии для данной структуры!");
			Возврат 0;
		КонецЕсли;
		Возврат 1;
	Иначе
		Возврат 1;		
	КонецЕсли;
		
КонецФункции

//******************************************************************************
Функция глПолучитьВремя(Сек,Реж=1,РежМин=1) Экспорт
//	Мин_=Сек/60;
	Знак=?(Сек>=0,"","-");
	Сек_=Абс_(Сек);
	Час_=Цел(Сек_/3600);
	Мин_=Формат((Сек_/60)-(Час_*60),"Ч(0)2.0");
	Если РежМин<>1 Тогда
		Мин_=Формат(Число(Мин_)/60*100,"Ч(0)2.0");
	КонецЕсли;
//	Если (Час_+Мин_)=0 Тогда
//		Возврат "";
//	Иначе
		Возврат ?((Реж=1) И (РежМин=1),Знак+Час_+":"+Мин_, Знак+Час_+"."+Мин_);
//	КонецЕсли;
КонецФункции


//******************************************************************************
Функция глПолучитьВремяСек(Врем) Экспорт
//	Мин_=Сек/60;     
	Сек_ = 0;
    Если ТипЗначения(Врем)=1 Тогда //число
		Врем_=СокрЛП(Формат(Врем,"Ч12.2"));
		Поз=Найти(Врем_,".");
		
		Час_=Число(Лев(Врем_,Поз-1));
		Мин_=Число(Сред(Врем_,Поз+1,2));
	Иначе
		Час_=Число(Лев(Врем,2));
		Мин_=Число(Сред(Врем,4,2));
		Сек_=Число(Сред(Врем,6,2));
	КонецЕсли;
	
	Возврат (Час_*60+Мин_)*60+Сек_;
КонецФункции

//******************************************************************************
//Подключение к FTP-серверу
//Возвращает 0, если возникли ошибки и 1, если ошибок нет
Функция ПодключениеКФТП(ФтпСервер,ФтпПользователь,ФтпПароль) Экспорт

	ОчиститьОкноСообщений();
	
	Сервер 	= СокрЛП(ФтпСервер);
	Логин 	= СокрЛП(ФтпПользователь);
	Пароль 	= СокрЛП(ФтпПароль);
	
	Если (ПустоеЗначение(Сервер) = 1) Или 
		 (ПустоеЗначение(Логин)  = 1) Или 
		 (ПустоеЗначение(Пароль) = 1) 
	Тогда
	    Сообщить("В константах не выставлены все параметры соединения с FTP-сервером! Работа с FTP невозможна!","!");
		Возврат 0;
	КонецЕсли;
	
	Результат = ОбменДанными.FtpOpenSession();
	Если Результат <> 0 Тогда
		Причина = ОбменДанными.ErrDescription(Результат);
	    Сообщить(Шаблон("Ошибка: [Причина]"),"!");
		ЗаписьЖурналаРегистрации(Шаблон("Ошибка: [Причина]"),,"Обмен данными ФТП",,5);
		
		Возврат 0;
	КонецЕсли;
	
	Сообщить("Подключение к FTP-серверу...","i");
	Результат = ОбменДанными.FtpConnect(Сервер,Логин,Пароль);
	Если Результат <> 0 Тогда
		ОбменДанными.FtpCloseSession();
		Причина = ОбменДанными.ErrDescription(Результат);
		Сообщить(Шаблон("Нет возможности подключиться к серверу [ФТПСервер]!"),"!");
	    Сообщить(Шаблон("Причина: [Причина]")," ");
		ЗаписьЖурналаРегистрации(Шаблон("Нет возможности подключиться к серверу [ФТПСервер]
		| Причина: [Причина]"),,"Обмен данными ФТП",,5);


		Возврат 0;
	КонецЕсли;
	
	Сообщить("К FTP-серверу подключился.","i");

	Возврат 1;
	
КонецФункции // ПодключениеКФТП()



Функция ВесУпаковкиИнфо(ВыбТовар) Экспорт
	СпрУпак = СоздатьОбъект("Справочник.УпаковкаТоваров");
	Упаковка=0;
	Если ВыбТовар.ЕдНеттоВеса.Выбран()=1 Тогда
		КоэфНеттоВеса = ВыбТовар.ЕдНеттоВеса.Коэффициент;
	Иначе
		КоэфНеттоВеса=1;
	КонецЕсли;
	СпрУпак.ИспользоватьВладельца(ВыбТовар);
	СпрУпак.ВыбратьЭлементы();
	Пока СпрУпак.ПолучитьЭлемент() = 1 Цикл
		Если СпрУпак.ПометкаУдаления()=1 Тогда
			Продолжить;
		ИначеЕсли СпрУпак.ТипУпаковки.Выбран()=0 Тогда	
			Продолжить;
		ИначеЕсли СпрУпак.Материал.Выбран()=0 Тогда	
			Продолжить;
		КонецЕсли;
		Если СпрУпак.ТипУпаковки = Перечисление.ТипыУпаковки.Первичная Тогда
			КоэфПересчета = КоэфНеттоВеса;
		ИначеЕсли СпрУпак.ТипУпаковки = Перечисление.ТипыУпаковки.Вторичная Тогда
			КоэфПересчета = КоэфНеттоВеса * ВыбТовар.ЛогистикаКолВУпаковке;
		ИначеЕсли СпрУпак.ТипУпаковки = Перечисление.ТипыУпаковки.Третичная Тогда	
			КоэфПересчета = КоэфНеттоВеса*ВыбТовар.ЛогистикаКолВУпаковке*ВыбТовар.ЛогистикаКолУпакНаЕвроПалете*ВыбТовар.ЛогистикаКолУпакНаПалетеВРяду;
		КонецЕсли;
		Если КоэфПересчета <> 0 Тогда
			Вес = СпрУпак.ВесБруттоУпаковки / КоэфПересчета;
			Упаковка=Упаковка+Вес;
		КонецЕсли;
	КонецЦикла;
	Возврат Упаковка;
КонецФункции

Функция глОграничениеСкидкиНаТовар(пПользователь,пТовар,пКатЦены,НаДату) Экспорт
	
	
	Если ПустоеЗначение(НаДату)=1 Тогда
		НаДату = РабочаяДата();
	КонецЕсли;
	ОграничениеСкидки = Пользователь.Сотрудник.Должность.ТекущийЭлемент().РазмерСкидки;
	
	ТекстЗапроса="SELECT $ПоследнееЗначение.ТоварыОграниченияСкидок.МаксПроцентСкидки(ТоварыОграниченияСкидок.ID, :ВыбДата) МаксПроцентСкидки
	|			  FROM $Справочник.ТоварыОграниченияСкидок AS ТоварыОграниченияСкидок (NOLOCK)
	|			  WHERE (ТоварыОграниченияСкидок.ISMARK = 0)
	|					AND ($ТоварыОграниченияСкидок.КатегорияЦен = :КатЦены)
	|					AND ($ТоварыОграниченияСкидок.Товар = :Тов)
	|";
	
	Запрос=СоздатьОбъект("ODBCRecordSet");	
	Запрос.УстановитьТекстовыйПараметр("КатЦены",пКатЦены);
	Запрос.УстановитьТекстовыйПараметр("Тов",пТовар);
	Запрос.УстановитьТекстовыйПараметр("ВыбДата",НаДату);
	
	МаксСкидка = Число(Запрос.ВыполнитьСкалярный(ТекстЗапроса));
	
	Возврат Макс(ОграничениеСкидки,МаксСкидка);
	
	
КонецФункции

//**********************************   
//функция для загрузки рисунка в объект
Функция Рисунок(куда,откуда) Экспорт
	Если ПустаяСтрока(откуда)=0 Тогда
		Попытка 
			Куда.Загрузить(КаталогИБ()+откуда);
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецФункции    


Процедура глПомощь(пКому) Экспорт
	Помощь = СоздатьОбъект("Общие.Помощь");
	Помощь.Открыть( пКому );
КонецПроцедуры


Процедура ЗаполнитьСправочники()
	
	Если НазваниеНабораПрав()="Администратор" Тогда
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(Константа.ОснСутьПретензийНевыпЗаказы)=1 Тогда
		СутьПретензии11 = СоздатьОбъект("Справочник.Претензии");
		СутьПретензии12= СоздатьОбъект("Справочник.Претензии");
		СутьПретензии2 = СоздатьОбъект("Справочник.Претензии");
		СутьПретензии2.НайтиПоКоду("C02",0);
		Если СутьПретензии2.Выбран()=0 Тогда
			Сообщить("Не найдена претензия по коду С02");
		Иначе
			Константа.ОснСутьПретензийНеСоответствиеЗакупЦен=СутьПретензии2.ТекущийЭлемент();
		КонецЕсли;
	
		
		СутьПретензии11.НайтиПоКоду("C01.1",0);
		Если СутьПретензии11.Выбран()=0 Тогда
			Сообщить("Не найдена претензия по коду С01.1");
		Иначе
			Константа.ОснСутьПретензийНевыпЗаказы=СутьПретензии11.ТекущийЭлемент();
		КонецЕсли;
	
		СутьПретензии12.НайтиПоКоду("C01.2",0);
		Если СутьПретензии12.Выбран()=0 Тогда
			Сообщить("Не найдена претензия по коду С01.2");
		Иначе
			Константа.ОснСутьПретензийПеревыпЗаказы=СутьПретензии12.ТекущийЭлемент();
		КонецЕсли;
		
	КонецЕсли;
	
	Спр = СоздатьОбъект("Справочник.Спецкоды");
	
	Для н = 1 По Метаданные.Перечисление("СпецкодыТоваров").Значение() Цикл
		Зн = Метаданные.Перечисление("СпецкодыТоваров").Значение(н);
		Если Спр.НайтиПоРеквизиту("Спецкод",Перечисление.СпецкодыТоваров.ЗначениеПоНомеру(н),1)=0 Тогда
			Спр.Новый();
			Спр.Код 		 = Зн.Идентификатор;
			Спр.Наименование = Зн.Представление;
			Спр.Спецкод 		= Перечисление.СпецкодыТоваров.ЗначениеПоНомеру(н);
			ОбъектЗаписать(Спр,);
		Иначе
			Спр.Код 		 = Зн.Идентификатор;
			Спр.Наименование = Зн.Представление;
			ОбъектЗаписать(Спр,);
		КонецЕсли;
	КонецЦикла;
	

	Спр = СоздатьОбъект("Справочник.ВидыСкидок");
	
	Для н = 1 По Метаданные.Перечисление("ВидСкидки").Значение() Цикл
		Зн = Метаданные.Перечисление("ВидСкидки").Значение(н);
		Если Спр.НайтиПоРеквизиту("ВидСкидки",Перечисление.ВидСкидки.ЗначениеПоНомеру(н),1)=0 Тогда
			Спр.Новый();
			Спр.Наименование = Зн.Представление;
			Спр.ВидСкидки 		= Перечисление.ВидСкидки.ЗначениеПоНомеру(н);
			ОбъектЗаписать(Спр,);
		Иначе
			Спр.Наименование = Зн.Представление;
			ОбъектЗаписать(Спр,);
		КонецЕсли;
	КонецЦикла;

	Спр = СоздатьОбъект("Справочник.КатегорииСписания");
	
	Для н = 1 По Метаданные.Перечисление("КатегорииСписания").Значение() Цикл
		Зн = Метаданные.Перечисление("КатегорииСписания").Значение(н);
		Если Спр.НайтиПоРеквизиту("КатегорияСписания",Перечисление.КатегорииСписания.ЗначениеПоНомеру(н),1)=0 Тогда
			Спр.Новый();
			Спр.Наименование 		= Зн.Представление;
			Спр.КатегорияСписания	= Перечисление.КатегорииСписания.ЗначениеПоНомеру(н);
			ОбъектЗаписать(Спр,);
		Иначе
//			Спр.Наименование = Зн.Представление;
//			ОбъектЗаписать(Спр,);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры         

Функция глВернутьКатегорииСписания() Экспорт
	
		ТекстЗапроса="SELECT ID [Ссылка $Справочник.КатегорииСписания]
		|				    , $Спр.RU RU 
		|					, Спр.DESCR LV
		|					, Спр.CODE Код
//			|					, КатегорииСписанияДоп.DESCR Наименование
		|			  FROM $Справочник.КатегорииСписания AS Спр With (NOLOCK)
		|			  WHERE (Спр.ISMARK = 0)
		|			  ORDER BY CODE
		|";

		ВыбКатСписДоп="";  
		
		Запрос = СоздатьОбъект("ODBCRecordSet");
		Спис = СоздатьОбъект("СписокЗначений");
		табл = Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
		табл.ВыбратьСтроки();
		Пока табл.ПолучитьСтроку()=1 Цикл
			Спис.ДобавитьЗначение(табл.Ссылка,табл.RU);
		КонецЦикла;                                                                         
		
		Возврат Спис;

КонецФункции          


Функция глВернутьКатегорииСписанияДоп(выбКатегория) Экспорт
	
		ТекстЗапроса="SELECT КатегорииСписанияДоп.ID [Ссылка $Справочник.КатегорииСписанияДоп]
		|				    , $КатегорииСписанияДоп.RU RU 
		|					, КатегорииСписанияДоп.DESCR LV
		|					, КатегорииСписанияДоп.CODE Код
//			|					, КатегорииСписанияДоп.DESCR Наименование
		|			  FROM $Справочник.КатегорииСписанияДоп AS КатегорииСписанияДоп With (NOLOCK)
		|			  INNER JOIN $Справочник.КатегорииСписания AS КатегорииСписания With (NOLOCK) ON КатегорииСписанияДоп.PARENTEXT = КатегорииСписания.ID
		|			  WHERE (КатегорииСписанияДоп.ISMARK = 0) AND $КатегорииСписания.КатегорияСписания = :ВыбКатегорияСписания
		|";

		ВыбКатСписДоп="";  
		
		Запрос = СоздатьОбъект("ODBCRecordSet");
		Запрос.УстановитьТекстовыйПараметр("ВыбКатегорияСписания",выбКатегория);
		Спис = СоздатьОбъект("СписокЗначений");
		табл = Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
		табл.ВыбратьСтроки();
		Пока табл.ПолучитьСтроку()=1 Цикл
			Спис.ДобавитьЗначение(табл.Ссылка,табл.RU);
		КонецЦикла;                                                                         
		
		Возврат Спис;

КонецФункции          
	
Процедура глДобавитьТоварДляИзменения(ПромТовар) Экспорт
	
	Если спИзмененныеТовары.НайтиЗначение(ПромТовар)=0 Тогда
		спИзмененныеТовары.ДобавитьЗначение(ПромТовар);
	КонецЕсли;
	
КонецПроцедуры

ИмяФайлаНастройки=ФС.WindowsКаталог()+"\"+"1stRozn.txt";

СписокКонстантOPOS=СоздатьОбъект("СписокЗначений");

//<<Алгоритм Успеха>> (end)
//************************************************************

//******************************************************************************
ГлИмяПустогоДоговора="1С:Торговля";
ЕстьКомпДБФ=0;
ЕстьРесторан=0;

//-----------------------------
// Стандартные валюты
Рубли=Константа.БазоваяВалюта;
Доллары=Константа.ОсновнаяВалюта;
Евро = Константа.ВалютаПерехода;
Спр=СоздатьОбъект("Справочник.Валюты");
Спр.НайтиПоНаименованию("LVL");
Латы=Спр.ТекущийЭлемент();
Спр.НайтиПоНаименованию("USD");
Доллары=Спр.ТекущийЭлемент();

Да=Перечисление.Булево.Да;
Нет=Перечисление.Булево.Нет;

//-----------------------------
// Типы учета
Упр=0;
Общ=1;
Фин=2;

//-----------------------------
// Статусы партий
Купленный="К"; // Купленный нами товар
Отданный="О";  // Отданный на реализацию
Принятый="П";  // Принятый на реализацию
Неизвестный="?";
Произведенный="Р";
//-------------
// Значения кодов операций регистра ПартииТоваров
ВводПартииКупленныхТоваров="Г";
ВводПартииОтданныхТоваров="Ы";
ВводПартииПринятыхТоваров="Я";
ЗакупкаТовара="З"; // Закупка
ПродажаТовара="П"; // Продажа
ВозвратПоставщикуКупленногоТовара="В"; // Возврат
ВозвратОтПокупателяКупленногоТовара="Б"; // Брак -  эта операция используется для Упр. учета
ПриемТовараНаХранение="Х"; 
ПереработкаТовара="Ф"; 
ВозвратТовараСПереработки="Ц"; // Брак -  эта операция используется для Упр. учета
ВозвратТовараСХранения="У";  // возвраТ

// для Фин. учета
// возврат покупателем оплаченного товара в том календарном году,в котором он получил его,
// возврат покупателем оплаченного товара НЕ в том календарном году, в котором он получил его,
// возврат покупателем НЕоплаченного товара в том календарном году, в котором он получил его,
// возврат покупателем НЕоплаченного товара НЕ в том календарном году, в котором он получил его,
//  вместо общего кода для этого события.
ВозвратОтПокупателяКупленногоТовараОплаченногоЭтогоГода="О"; // брак Оплаченный
ВозвратОтПокупателяКупленногоТовараОплаченногоДругогоГода="Ч"; // Брак оплаЧенный
ВозвратОтПокупателяКупленногоТовараНеоплаченногоЭтогоГода="Н"; // брак Неоплаченный
ВозвратОтПокупателяКупленногоТовараНеоплаченногоДругогоГода="Л"; // брак неопЛаченный

ВыдачаНаРеализацию="Р"; // Реализатору
ВозвратОтРеализатора="Е"; // от рЕеализатора
ПроданоРеализатором="И"; // Инвентаризация реализатора
ПринятоНаРеализацию="К"; // Комиссия
ВозвратПоставщикуПринятогоТовара="Т";  // возвраТ
ПродажаПринятогоТовара="Д"; // проДажа
СписаниеТовара="С"; // Списание
ПереносОстатков="Ъ"; // перенос остатков

//-------------
// Значения кодов операций регистров ВзаиморасчетыПокупателей и ВзаиморасчетыПоставщиков
АвансоваяВыплата="А";  // Аванс
ОплатаТоваровИУслуг="О";  // Оплата товаров и услуг
ОплатаТовара="П";  // оПлата товара
ОплатаУслуги="Л";  // опЛата услуги
ОплатаТоваровПринятых="Р";  // оплата товаРов, принятых на реализацию и проданных
ОтгрузкаОплаченногоТовараКупленного="К";  // оТгрузка товаров купленных
ОтгрузкаОплаченногоТовараПринятого="Т";  // оТгрузка товаров принятых на реализацию и проданных
НеоплаченнаяОтгрузкаТовараКупленного="Н"; // Неоплаченная отгрузка товаров купленных
НеоплаченнаяОтгрузкаТовараПринятого="Ч"; // неоплаЧенная отгрузка товаров принятых на реализацию и проданных
ВводНачальныхВзаиморасчетов="З"; // возврат оплаты

ВозвратОплаты="Ы"; // возврат оплаты
ВозвратАванса="Й"; // возврат аванса
ВозвратОтПокупателяОплаченногоТовара="Б"; // Брак оплаченный
ВозвратОтПокупателяНеоплаченногоТовара="Е"; // брак нЕоплаченный
ВозвратПоставщикуОплаченногоТовара="В"; // Возврат
ВозвратПоставщикуНеоплаченногоТовара="Г"; // Возврат

ВыполнениеОплаченнойУслуги="У";  // выполнение Услуги
НеоплаченноеВыполнениеУслуги="С"; // неоплаченное Выполнение услуги

ВыполнениеОплаченнойУслугиТранспорт="1";  // выполнение Услуги
ВыполнениеОплаченнойУслугиОплатаТруда="2";  // выполнение Услуги
ВыполнениеОплаченнойУслугиОтчисления="3";  // выполнение Услуги
ВыполнениеОплаченнойУслугиАрендаОС="4";  // выполнение Услуги
ВыполнениеОплаченнойУслугиАмортизацияОС="5";  // выполнение Услуги
ВыполнениеОплаченнойУслугиРемонтОС="6";  // выполнение Услуги
ВыполнениеОплаченнойУслугиИзносМБП="7";  // выполнение Услуги
ВыполнениеОплаченнойУслугиТопливо="8";  // выполнение Услуги
ВыполнениеОплаченнойУслугиХранение="9";  // выполнение Услуги
ВыполнениеОплаченнойУслугиРеклама="Q";  // выполнение Услуги
ВыполнениеОплаченнойУслугиПроценты="W";  // выполнение Услуги
ВыполнениеОплаченнойУслугиПотери="E";  // выполнение Услуги
ВыполнениеОплаченнойУслугиТара="R";  // выполнение Услуги
ВыполнениеОплаченнойУслугиПрочие="T";  // выполнение Услуги
ВыполнениеОплаченнойУслугиНеПринимаемые="Y";  // выполнение Услуги

НеоплаченноеВыполнениеУслугиТранспорт="!";  // выполнение Услуги
НеоплаченноеВыполнениеУслугиОплатаТруда="@";  // выполнение Услуги
НеоплаченноеВыполнениеУслугиОтчисления="#";  // выполнение Услуги
НеоплаченноеВыполнениеУслугиАрендаОС="$";  // выполнение Услуги
НеоплаченноеВыполнениеУслугиАмортизацияОС="%";  // выполнение Услуги
НеоплаченноеВыполнениеУслугиРемонтОС="^";  // выполнение Услуги
НеоплаченноеВыполнениеУслугиИзносМБП="&";  // выполнение Услуги
НеоплаченноеВыполнениеУслугиТопливо="*";  // выполнение Услуги
НеоплаченноеВыполнениеУслугиХранение="(";  // выполнение Услуги
НеоплаченноеВыполнениеУслугиРеклама="q";  // выполнение Услуги
НеоплаченноеВыполнениеУслугиПроценты="w";  // выполнение Услуги
НеоплаченноеВыполнениеУслугиПотери="e";  // выполнение Услуги
НеоплаченноеВыполнениеУслугиТара="r";  // выполнение Услуги
НеоплаченноеВыполнениеУслугиПрочие="t";  // выполнение Услуги
НеоплаченноеВыполнениеУслугиНеПринимаемые="y";  // выполнение Услуги    
//***********************************************************
//<<Алгоритм Успеха>> (begin)
//                                                             
ПогашениеДолгаВзаимозачетом="X";	// ПогашениеДолгаВзаимозачетом
//<<Алгоритм Успеха>> (end) 
//************************************************************ 
//=======
СписаниеНаПроизводcтвоБлюда="z";
ПроизводствоБлюда="+";
ПродажаБлюда="-";

ОприходованиеИзлишков="L";
ГотоваяПродукцияНаСклад="*";
ПриходОтПеремещения="%";
//-------------
// Значения видов отгрузки
ОтгрузкаТовара="Т";
ОтгрузкаУслуги="У";
ОтгрузкаТоваровИУслуг="О";
ОтгрузкаТоваровПринятых="П";

//--------------------
ЗакрытиеНевыполненногоЗаказаПоставщику="Н";
ЗакрытиеВыполненногоЗаказаПоставщику="В";


//-----------------------------
// имена опций печати
ПарСтрСпр ="ДляСправ";             // имя опций печати отчетов по справочникам (Пр-лст, Товары)
ПарСтрДок ="ДляДокум";             // имя опций печати документов
ПарСтрОтчДлинн ="ДляОтчДлинн";  // имя опций печати узких отчетов
ПарСтрОтчШирок ="ДляОтчШирок";  // имя опций печати широких отчетов
//***********************************************************
//<<Алгоритм Успеха>> (begin)
//
глФлОтладки=0;
//<<Алгоритм Успеха>> (end) 
//************************************************************
//-----------------------------
семБлокировка( 1 );
семУстГлобальныхПерем();
////установка текущего пользователя
//Спр=СоздатьОбъект("Справочник.Пользователи");
//Спр.НайтиПоКоду(ИмяПользователя());
//Пользователь=Спр.ТекущийЭлемент();
//ПроверкаПользователя();

//глФирма=Константа.ОсновнаяФирма;
//Если Пользователь.Выбран()=1 Тогда
//    Если Пользователь.ОсновнаяФирма.Выбран()=1 Тогда
//        глФирма=Пользователь.ОсновнаяФирма;
//    КонецЕсли;
//КонецЕсли;
//Спр=0;                        


//ЗагрузитьВнешнююКомпоненту("1CPP.dll");


//ФС.УстТекКаталог(КаталогПрограммы());
//Если ФС.СуществуетФайл("rkDbClnt.dll")=1 Тогда
//    ЕстьРесторан=1;
//	Если Пользователь.РаботаRKeeper=1 Тогда
//	    Если Вопрос("Будет ли производиться в текущим сеансе загрузка данных из R-Keeper",4,10)=6 Тогда
//	        Если ЗагрузитьВнешнююКомпоненту("rkDbClnt.dll")=1 Тогда
//	            Предупреждение("Компонента для работы с DBF-файлами загружена успешно !",1);
//	            КомпДбф=СоздатьОбъект("AddIn.rkDbClnt");
//	            ЕстьКомпДБФ=1;
//	        Иначе
//	            Предупреждение("Не загружена компонента для работы с DBF-файлами !",5);
//	            ЕстьКомпДБФ=0;
//	        КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//КонецЕсли;


ИБПрефикс=?(Число(Константа.IDDПрефиксИБ)=0,"1",Число(Константа.IDDПрефиксИБ));
ФК=СокрЛП(Константа.ОсновнаяФирма.Код)+ИБПрефикс;

//-----------------------------
// префиксы видов документов

//ПрефиксАвтоНумерации("Справочник.Партии",""+ИБПрефикс+"");

ПрефиксАвтоНумерации("Документ.РасходнаяНал","РНн-");
ПрефиксАвтоНумерации("Документ.ПриходнаяНал","ПНн-");

ПрефиксАвтоНумерации("Документ.Перемещение",ФК+"PV-");
ПрефиксАвтоНумерации("Документ.ПеремещениеДепартамент",ФК+"PD-");
ПрефиксАвтоНумерации("Документ.Переработка",ФК+"PS-");
ПрефиксАвтоНумерации("Документ.ПереоценкаТоваров",ФК+"C-");
ПрефиксАвтоНумерации("Документ.Пересортица",ФК+"ST-");

ПрефиксАвтоНумерации("Документ.Списание",ФК+"N-");
ПрефиксАвтоНумерации("Документ.ВедомостьИнвентаризации",ФК+"IV-");
ПрефиксАвтоНумерации("Документ.ОжидаемаяПоставка",ФК+"OT-");
ПрефиксАвтоНумерации("Документ.ЗакрытиеОжПоставок",ФК+"AOT-");
ПрефиксАвтоНумерации("Документ.ПрихНаклМобил",ФК+"PNM-");
ПрефиксАвтоНумерации("Документ.ЗаказПоставщику",ФК+"ZT-");
ПрефиксАвтоНумерации("Документ.ЗаказОтПокупателя",ФК+"ZT-");
ПрефиксАвтоНумерации("Документ.ЗаявкаПокупателя",ФК+"ZP-");

Если семТекСтрана() <> "LV" Тогда
	ПрефиксАвтоНумерации("Документ.РасходнаяНакладная","REAT");
	ПрефиксАвтоНумерации("Документ.ОтчетРеализатора","RR-");
	ПрефиксАвтоНумерации("Документ.ИнвентаризацияРеализатора","RInv-");
ИначеЕсли семТекСтрана() = "LV" Тогда
	ПрефиксАвтоНумерации("Документ.РасходнаяНакладная",Шаблон("LV[Прав(Строка(ДатаГод(РабочаяДата())),1)]RE"));
	ПрефиксАвтоНумерации("Документ.РасходнаяНакладнаяНал",Шаблон("SK[Прав(Строка(ДатаГод(РабочаяДата())),1)]PP"));
	ПрефиксАвтоНумерации("Документ.РасходнаяРеализатора",Шаблон("LV[Прав(Строка(ДатаГод(РабочаяДата())),1)]RE"));
//	ПрефиксАвтоНумерации("Документ.РасходнаяРеализатора",ФК+"IzR-");
	ПрефиксАвтоНумерации("Документ.ОтчетРеализатора","Отр-");
	ПрефиксАвтоНумерации("Документ.ИнвентаризацияРеализатора","Инр-");
КонецЕсли;
ПрефиксАвтоНумерации("Документ.ПриходнаяНакладная",ФК+"Ien-");
ПрефиксАвтоНумерации("Документ.ПриходнаяРеализатора",ФК+"IeR-");

ПрефиксАвтоНумерации("Документ.РегистрацияСчета_фактуры","Рсф-");
ПрефиксАвтоНумерации("Документ.ДвиженияДенежныхСредств","Вып-");
ПрефиксАвтоНумерации("Документ.СнятиеРезерва","Снр-");
//ПрефиксАвтоНумерации("Документ.Счет",ФК+"RK-");
//ПрефиксАвтоНумерации("Документ.Счет",Шаблон("E[Прав(Строка(ДатаГод(РабочаяДата())),1)][семТекСтрана()]-A"));
ПрефиксАвтоНумерации("Документ.Счет",Шаблон(СокрЛП(Константа.ПрефиксЭлЗаявкиФормула)));

//ПрефиксАвтоНумерации("Документ.СчетОбщий",Шаблон("EO[Прав(Строка(ДатаГод(РабочаяДата())),1)][семТекСтрана()]-"));
ПрефиксАвтоНумерации("Документ.СчетОбщий",Шаблон(СокрЛП(Константа.ПрефиксЭлЗаявкиСводнаяФормула)));
ПрефиксАвтоНумерации("Документ.ИзмЭлЗаявку",ФК+"EPIZ-");

ПрефиксАвтоНумерации("Документ.Счет_фактура","PDRA-");
ПрефиксАвтоНумерации("Документ.ПретензияПолученная",ФК+"PA-");
//ПрефиксАвтоНумерации("Документ.ПретензияПолученная",ФК+"B-");//бронирование
ПрефиксАвтоНумерации("Документ.ПросроченныеДолги",ФК+"KP-");


ПрефиксАвтоНумерации("Документ.Доверенность","Дов-");
ПрефиксАвтоНумерации("Документ.ВводОстатковТоваров",ФК+"AT-");
ПрефиксАвтоНумерации("Документ.ВводОстатковРеализации","Впр-");
ПрефиксАвтоНумерации("Документ.ВводОстатковКредита",ФК+"AK-");
//ПрефиксАвтоНумерации("Документ.ВводПартийТоваров","Впт-");
ПрефиксАвтоНумерации("Документ.ПереносОстаткиТоваров","Пот-");
ПрефиксАвтоНумерации("Документ.ПереносРезервыТоваров","Прт-");
ПрефиксАвтоНумерации("Документ.ПереносВзаиморасчетыПокупателей","Пвп-");
ПрефиксАвтоНумерации("Документ.ПереносВзаиморасчетыПоставщиков","Пвс-");
ПрефиксАвтоНумерации("Документ.ПереносКасса","Прк-");
ПрефиксАвтоНумерации("Документ.ПереносПартииТоваров","Ппт-");
ПрефиксАвтоНумерации("Документ.ПереносПартииТоваров","Ппт-");
ПрефиксАвтоНумерации("Документ.ПереносПартииТоваров","Ппт-");
//------общепит-------
ПрефиксАвтоНумерации("Документ.МарочныйОтчет",ФК+"МО-");
ПрефиксАвтоНумерации("Документ.ОплатаЧеков",ФК+"ОЧ-");       
ПрефиксАвтоНумерации("Документ.ПеремещениеНаСкладГотовойПродукции",ФК+"GPP");
ПрефиксАвтоНумерации("Документ.СличительнаяВедомость",ФК+"IV0");


ПрефиксАвтоНумерации("Документ.ЗаказКладовщику",ФК+"ЗК-");
ПрефиксАвтоНумерации("Документ.ЗаказКалькуляция","Клк-");
ПрефиксАвтоНумерации("Документ.КалькуляционнаяКарта",ФК+"KK-");
ПрефиксАвтоНумерации("Документ.ЗаменаИнгредиента",ФК+"ЗИ-");
ПрефиксАвтоНумерации("Документ.АктРазборки",ФК+"NR-");
ПрефиксАвтоНумерации("Документ.НарядНаСборку",ФК+"NKS-");
ПрефиксАвтоНумерации("Документ.НарядНаРазукомплектацию",ФК+"NKR-");


ПрефиксАвтоНумерации("Документ.КомплектацияЗаявки",ФК+"EPK");
ПрефиксАвтоНумерации("Документ.КомплектацияЗаявкиФакт",ФК+"EPKF");
ПрефиксАвтоНумерации("Документ.УстановкаКредитныхЛимитов",ФК+"KLN-");
ПрефиксАвтоНумерации("Документ.ПланМеню","ПМ-");
ПрефиксАвтоНумерации("Документ.УстАкционныхСкидокТоваров","ADG-");
ПрефиксАвтоНумерации("Документ.УстАкционныхСкидокКлиентов","ADC-");
ПрефиксАвтоНумерации("Документ.УстАкцентовТоваров","AKC-");
ПрефиксАвтоНумерации("Документ.АктИзмененияТоваров","AGC-");
ПрефиксАвтоНумерации("Документ.УстМинЗапасов","SS-");

ПрефиксАвтоНумерации("Документ.РеестрНакладных","RP-");
ПрефиксАвтоНумерации("Документ.ПредложениеКлиенту","KP-");
ПрефиксАвтоНумерации("Документ.НарядНаОбклейку","UZDAP-");

ПрефиксАвтоНумерации("Документ.ЗагрузкаКарточкиТовара","PIIm-");

ПрефиксАвтоНумерации("Документ.Служ_Основания",ФК+ИБПрефикс+"-");
ПрефиксАвтоНумерации("Документ.Служ_АкцизПоВидам",ФК+ИБПрефикс+"-");  
ПрефиксАвтоНумерации("Документ.Служ_Склады",ФК+ИБПрефикс+"-");
ПрефиксАвтоНумерации("Документ.УстановкаСпецЦен",Шаблон("SC[Прав(Строка(ДатаГод(РабочаяДата())),1)][семТекСтрана()]-"));

//{{MRG[ --> ]
ПрефиксАвтоНумерации("Документ.АвансовыйОтчет","АО-");   

ПрефиксАвтоНумерации("Документ.РасходныйОрдерТБ",ФК+"KIz-");
ПрефиксАвтоНумерации("Документ.ПриходныйОрдерТБ",ФК+"KIe-");



//}}MRG[ --> ]
//--------------------
ОбработкаОжидания("семОбработкаОжидания",20);
//ОбработкаОжидания("ПросмотрБлокнота",20);

глФлагРасшифровки = 0;
глРасшифровка = 0;
глОбновить = 0;
ФлагЗапретаОткрытияВторойКарты=0;
кБлокироватьВМарочномПустойТовар = 1;
кВклПроверкуПретензийПрихода = 1;

глСписокТоваров=СоздатьОбъект("ТаблицаЗначений");
глСписокТоваров.НоваяКолонка("Товар","Справочник.Номенклатура");
глСписокТоваров.НоваяКолонка("Блюдо","Справочник.Номенклатура");
глСписокТоваров.НоваяКолонка("КолБлюд","Число",12,3);
глСписокТоваров.НоваяКолонка("Склад","Справочник.МестаХранения");
глСписокТоваров.НоваяКолонка("Счетчик","Число",4,0);
глСписокТоваров.НоваяКолонка("Количество","Число",19,5);
глСписокТоваров.НоваяКолонка("Остаток","Число",19,5);
глСписокТоваров.НоваяКолонка("Док","Документ");
глНуженСписокТоваров=0;
глНеНужнаПроверкаИтогов=0;

спДниНедели = СоздатьОбъект( "СписокЗначений" );
спДниНедели.ДобавитьЗначение("Пн","Понедельник");
спДниНедели.ДобавитьЗначение("Вт","Вторник");
спДниНедели.ДобавитьЗначение("Ср","Среда");
спДниНедели.ДобавитьЗначение("Чт","Четверг");
спДниНедели.ДобавитьЗначение("Пт","Пятница");
спДниНедели.ДобавитьЗначение("Сб","Суббота");
спДниНедели.ДобавитьЗначение("Вс","Воскресенье");
                             
спИзмененныеТовары = СоздатьОбъект( "СписокЗначений" );

Если Константа.ОсновнаяДатаНачалаОтчета<НачМесяца(ДобавитьМесяц(РабочаяДата(),-1)) Тогда
	Константа.ОсновнаяДатаНачалаОтчета=НачМесяца(ДобавитьМесяц(РабочаяДата(),-1));
КонецЕсли;


//Если ИмяПользователя()="Bla" Тогда
//	открытьформу("Отчет",,"r:\showrights.ert");    
//КонецЕсли;

//семАвтоПроведение = 0;

// управление печатными формами
ТемпКаталогИБ=СокрЛП(КаталогИБ());
Если Прав(ТемпКаталогИБ,1)<>"\" Тогда
	ТемпКаталогИБ=ТемпКаталогИБ+"\";    
КонецЕсли;
глКаталогПечФорм = ТемпКаталогИБ+"ExtForms\PrnForms\";

кВклПроверкуВремениЭлЗаявок=Константа.ВклПроверкуВремениЭлЗаявок;

Если Константа.РазмерСкидкиДляАкцентов=0 Тогда
	Константа.РазмерСкидкиДляАкцентов=40; //скидка по умолчанию
КонецЕсли;

спПерекод = СоздатьОбъект( "СписокЗначений" );
спПерекод.Установить("161",194);
спПерекод.Установить("162",226);
спПерекод.Установить("163",200);
спПерекод.Установить("165",232);
спПерекод.Установить("166",199);
спПерекод.Установить("167",231);
спПерекод.Установить("168",204);
спПерекод.Установить("170",236);
спПерекод.Установить("172",206);
спПерекод.Установить("174",238);
спПерекод.Установить("175",205);
спПерекод.Установить("176",237);
спПерекод.Установить("177",207);
спПерекод.Установить("178",239);
спПерекод.Установить("179",210);
спПерекод.Установить("180",242);
спПерекод.Установить("185",208);
спПерекод.Установить("186",240);
спПерекод.Установить("188",219);
спПерекод.Установить("189",251);
спПерекод.Установить("190",222);
спПерекод.Установить("191",254);

кОтложенныйМОД = 0; //для позднего обмена данными

ЗаполнитьСправочники();