Перем Ит, КорСчет, СчетСписания;
Перем Операция, КоличествоПроводок;
Перем СодержаниеОперации, НомерЧасти; // для формирования содержания операции
Перем СуммаСписания; // для накопления остатка который надо списать
Перем ЗаполнятьНомерЖурнала, ЗаполнятьСодержаниеПроводки;
Перем ЧЧ, ММ, СС; // Время операций

Перем БухУчет;
//*****************************************************************************
Функция НомерОперации(Операция)
	Дубликат = СоздатьОбъект("Документ.Операция");
	Дубликат.Новый();
	Дубликат.НомерДок = Операция.Документ.НомерДок;
	Дубликат.ДатаДок = ВыбДата;
	Дубликат.УстановитьНовыйНомер("");
	Возврат Дубликат.НомерДок;
КонецФункции
//*****************************************************************************

// ДобавитьПроводку(Счет, СписокСубконто, Валюта, Сумма, ВалСумма, Количество, Деноминировать=1)
//
// Параметры:          
//   Счет - счет по которому делать проводку
//	 СписокСубконто - список позиций видов субконто в счете
//   Валюта  - по которой делать проводку
//   Сумма - сумма проводки
//   ВалСумма - валютная сумма проводки
//   Количество - количество проводки
//   Деноминировать - деноминировать или нет сумму
//
// Возвращаемое значение:
//   1 действие выполнено 0 - действие не выполнено
//
// Описание
//   Добавляет проводку в операцию по заданному счету и субконто на указанные суммы
//
Функция ДобавитьПроводку(Счет, СписокСубконто, Валюта, Сумма, ВалСумма, Количество, Деноминировать=1)
	// деноминация в соответствии с установками
	Если Деноминировать = 1 Тогда
		Если (ВыбКоэфДеноминации <> 0) И (ВыбКоэфДеноминации <> 1) Тогда
		    Если ВыбДеномСуммы = 1 Тогда    
				Сумма = Окр(Сумма/ВыбКоэфДеноминации, Метаданные.ТочностьСуммыПроводки);
				СуммаСписания = СуммаСписания+Сумма; 
			КонецЕсли;
			
		    Если (ВыбДеномВалСуммы = 1) И (ВыбВалютаДеноминации = Валюта) Тогда
				ВалСумма = Окр(ВалСумма/ВыбКоэфДеноминации, Метаданные.ТочностьВалютнойСуммыПроводки);
		    КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// если все остатки равны нулю то не делать проводку
	Если (Сумма = 0) И (ВалСумма = 0) И (Количество = 0) Тогда
	    Возврат 1;
	КонецЕсли;    
	
	Операция.НоваяПроводка();
	// выбор корреспонденции счета
	Если Счет.Активный = 1 Тогда
		ОсновнаяКорреспонденция = Операция.Дебет;
		ВспомКорреспонденция = Операция.Кредит;
		Знак = 1;
    ИначеЕсли Счет.Активный = 2 Тогда
		ОсновнаяКорреспонденция = Операция.Кредит;
		ВспомКорреспонденция = Операция.Дебет;
		Знак = -1;
	ИначеЕсли (Сумма < 0) Или ((Сумма = 0) И (ВалСумма < 0)) Или 
			  ((Сумма = 0) И (ВалСумма = 0) И (Количество < 0)) Тогда
		ОсновнаяКорреспонденция = Операция.Кредит;
		ВспомКорреспонденция = Операция.Дебет;
		Знак = -1;
	Иначе
		ОсновнаяКорреспонденция = Операция.Дебет;
		ВспомКорреспонденция = Операция.Кредит;
		Знак = 1;
	КонецЕсли;
	                                     
	ОсновнаяКорреспонденция.Счет = Счет.ТекущийСчет();
	Если ПустоеЗначение(СписокСубконто) = 0 Тогда
		Для Инд=1 По СписокСубконто.РазмерСписка() Цикл
			ВидСубконто = Счет.ВидСубконто(СписокСубконто.ПолучитьЗначение(Инд));
			ОсновнаяКорреспонденция.Субконто(ВидСубконто, Ит.Субконто(ВидСубконто));
		КонецЦикла;                                           
	КонецЕсли;

	Если Счет.Забалансовый = 0 Тогда
	    ВспомКорреспонденция.Счет = КорСчет;
	КонецЕсли;
	
	Если Счет.Валютный = 1 Тогда
		Операция.Валюта = Валюта;  
	КонецЕсли;
	
	Если Метаданные.РазделительУчета.Выбран() = 1 Тогда
		Операция.УстановитьАтрибут(Метаданные.РазделительУчета.Идентификатор, Ит.ИспользоватьРазделительУчета());    
	КонецЕсли;
	
	Операция.Сумма = Знак*Сумма;
	Операция.ВалСумма = Знак*ВалСумма;
	Операция.Количество = Знак*Количество;
	
	Если ЗаполнятьНомерЖурнала = 1 Тогда
		Операция.НомерЖурнала = "СИ";
	КонецЕсли;
	Если ЗаполнятьСодержаниеПроводки = 1 Тогда
		Операция.СодержаниеПроводки = "Остаток по счету: "+Счет;
	КонецЕсли;
	
	КоличествоПроводок = КоличествоПроводок+1;
	Если КоличествоПроводок = 100 Тогда
		Операция.ДатаОперации = ВыбДата;
		Операция.УстановитьВремя(ЧЧ, ММ, СС);
		Операция.Документ.УстановитьВремя(ЧЧ, ММ, СС);
		Операция.Содержание = СодержаниеОперации+?(НомерЧасти=1, "", " ("+НомерЧасти+")");
	    Операция.Записать();
		Операция.Новая();
		Операция.Документ.НомерДок=НомерОперации(Операция);
		КоличествоПроводок = 0;
		НомерЧасти = НомерЧасти+1;
	КонецЕсли;
	Возврат 1;
КонецФункции // ДобавитьПроводку       

//*****************************************************************************
// СформироватьОстаткиПоСубконто(НомерСубконто, Счет, СписокСубконто, Валюта, Сумма, ВалСумма, Количество, ПоСумме, ПоВалСумме, ПоКоличеству, Деноминировать)
//
// Параметры:          
//   НомерСубконто - номер группировки по субконто
//   Счет - счет по которому формируются остатки
//   СписокСубконто - список позиций видов субконто в счете
//   Валюта  - по которой формировать остатки
//   Сумма - сумма проводки
//   ВалСумма - валютная сумма проводки
//   Количество - количество проводки
//   ПоСумме - нужно ли делать проводку по сумме
//   ПоВалСумме - нужно ли делать проводку по валютной сумме
//   ПоКоличеству - нужно ли делать проводку по количеству
//   Деноминировать - нужно ли деноминировать
//
// Возвращаемое значение:
//   1 действие выполнено 0 - действие не выполнено
//
// Описание
//   Функция формирования остатков в разрезе субконто
//   Для каждого уровня субконто вычисляются суммы
//   по которым ведется учет на данном субконто
//
Функция СформироватьОстаткиПоСубконто(НомерСубконто, Счет, СписокСубконто, Валюта, Сумма, ВалСумма, Количество, ПоСумме, ПоВалСумме, ПоКоличеству, Деноминировать)
	Если НомерСубконто > СписокСубконто.РазмерСписка() Тогда
        ДобавитьПроводку(Счет, СписокСубконто, Валюта, Сумма, ВалСумма, Количество, Деноминировать);
		Сумма = 0;
		ВалСумма = 0;
		Количество = 0;
	Иначе                  
		ПозицияСубконто = СписокСубконто.ПолучитьЗначение(НомерСубконто);
		ВидСубконто = Счет.ВидСубконто(ПозицияСубконто);
		Ит.ВыбратьСубконто(ВидСубконто);
		Пока Ит.ПолучитьСубконто(ВидСубконто) = 1 Цикл
			Если (Счет.УчетПоСумме(ПозицияСубконто) = 1) И (ПоСумме = 1) Тогда
				Сумма = Ит.СКД()-Ит.СКК();
			КонецЕсли;
			Если (Счет.УчетПоВалютнойСумме(ПозицияСубконто) = 1) И (ПоВалСумме = 1) Тогда
				ВалСумма = Ит.СКД(2)-Ит.СКК(2);
			КонецЕсли;
			Если (Счет.УчетПоКоличеству(ПозицияСубконто) = 1) И (ПоКоличеству = 1) Тогда
				Количество = Ит.СКД(3)-Ит.СКК(3);
			КонецЕсли;
		    СформироватьОстаткиПоСубконто(НомерСубконто+1, Счет, СписокСубконто, Валюта, Сумма, ВалСумма, Количество, ПоСумме, ПоВалСумме, ПоКоличеству, Деноминировать);
		КонецЦикла;
	КонецЕсли;
	Возврат 1;
КонецФункции // СформироватьОстаткиПоСубконто

//*****************************************************************************
// СформироватьОстаткиПоВалюте(Счет, СписокСубконто, ПоСумме, ПоВалСумме, ПоКоличеству, Деноминировать)
//
// Параметры:          
//   Счет - счет по которому формируются остатки
//   СписокСубконто - список позиций видов субконто в счете
//   ПоСумме - нужно ли делать проводку по сумме
//   ПоВалСумме - нужно ли делать проводку по валютной сумме
//   ПоКоличеству - нужно ли делать проводку по количеству
//   Деноминировать - нужно ли деноминировать
//
// Возвращаемое значение:
//   1 действие выполнено 0 - действие не выполнено
//
// Описание
//   Функция формирования остатков в разрезе валют
//
Функция СформироватьОстаткиПоВалюте(Счет, СписокСубконто, ПоСумме, ПоВалСумме, ПоКоличеству, Деноминировать)
	Сумма = 0;
	ВалСумма = 0;
	Количество = 0;
	Если Счет.Валютный = 1 Тогда
	    Ит.ВыбратьВалюты();
		Пока Ит.ПолучитьВалюту() = 1 Цикл
			Если ПоСумме = 1 Тогда
				Сумма = Ит.СКД()-Ит.СКК();
			КонецЕсли;
			Если ПоВалСумме = 1 Тогда
				ВалСумма = Ит.СКД(2)-Ит.СКК(2);
			КонецЕсли;
			Если ПоКоличеству = 1 Тогда
				Количество = Ит.СКД(3)-Ит.СКК(3);
			КонецЕсли;
		    Если СформироватьОстаткиПоСубконто(1, Счет, СписокСубконто, Ит.Валюта, Сумма, ВалСумма, Количество, ПоСумме, ПоВалСумме, ПоКоличеству, Деноминировать) = 0 Тогда
				Возврат 0;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ПоСумме = 1 Тогда
			Сумма = Ит.СКД()-Ит.СКК();
		КонецЕсли;
		Если ПоВалСумме = 1 Тогда
			ВалСумма = Ит.СКД(2)-Ит.СКК(2);
		КонецЕсли;
		Если ПоКоличеству = 1 Тогда
			Количество = Ит.СКД(3)-Ит.СКК(3);
		КонецЕсли;
	    Если СформироватьОстаткиПоСубконто(1, Счет, СписокСубконто, 0, Сумма, ВалСумма, Количество, ПоСумме, ПоВалСумме, ПоКоличеству, Деноминировать) = 0 Тогда
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	Возврат 1;
КонецФункции

//*****************************************************************************
// СформироватьОстаткиПоСчету(Счет, РазделительУчета)
//
// Параметры:          
//   Счет - счет по которому формируются остатки
//   РазделительУчета - разделитель учета по которому формируются остатки
//
// Возвращаемое значение:
//   1 действие выполнено 0 - действие не выполнено
//
// Описание
//   Функция формирования остатков в разрезе счета 
//   Анализирует субконто, которые прикреплены к счету, на то какие
//   виды учета ведутся на них. В зависимости от настроек выбирается
//   спсоб формирования проводок: за один проход по всем видам учета
//   или за несколько проходов по одному виду учета в каждом
//
Функция СформироватьОстаткиПоСчету(Счет, РазделительУчета)
	Перем Стр;
	
    Сообщение = "Формирование остатков ";

	// список позиций в счете видов субконто
	СписокСубконто = СоздатьОбъект("СписокЗначений"); 
	
	Если Метаданные.РазделительУчета.Выбран() = 1 Тогда   
		Сообщение = Сообщение+" "+Метаданные.РазделительУчета+": "+РазделительУчета;
		Ит.ИспользоватьРазделительУчета(РазделительУчета);    
	КонецЕсли;                                                        
	
	Если ПланыСчетов.КоличествоЗначений() > 1 Тогда
		Сообщение = Сообщение+"  план: "+Счет.ПланСчетов();
	КонецЕсли;
	Сообщение = Сообщение+" по счету: "+Счет;

	// Флаг показывающий что настройки субконто позволяют 
	// сформировать все проводки за 1 проход
	ПоВсем = 1;
	// добавляем группировки по видам субконто              
	Для Инд=1 По Счет.КоличествоСубконто() Цикл
		// оборотные субконто пропускаем так как по ним нет остатков
		Если Счет.ТолькоОбороты(Инд) = 1 Тогда
			Продолжить;
		КонецЕсли;
		А1 = 0;
		А2 = 0;
		Ит.ИспользоватьСубконто(Счет.ВидСубконто(Инд));
		// для последующего анализа на предмет возможности 
		// сформировать все проводки за 1 проход
		Если Счет.УчетПоСумме(Инд) = 1 Тогда
			А1 = А1+1;
			А2 = А2+1;
		КонецЕсли;
		Если (Счет.Валютный = 1) И (Счет.УчетПоВалютнойСумме(Инд) = 1) Тогда
			А1 = А1+1;
			А2 = А2+2;
		КонецЕсли;
		Если (Счет.Количественный = 1) И (Счет.УчетПоКоличеству(Инд) = 1) Тогда
			А1 = А1+1;
			А2 = А2+4;
		КонецЕсли;
		СписокСубконто.ДобавитьЗначение(Инд, ""+А1+А2+Инд);
	КонецЦикла;
	СписокСубконто.СортироватьПоПредставлению(1);         

	// анализ возможности сформировать все проводки за 1 проход
	А1 = 0;
	А2 = 0;
	Для Инд=1 По СписокСубконто.РазмерСписка() Цикл
		СписокСубконто.ПолучитьЗначение(Инд, Стр);
		А11 = Число(Сред(Стр, 1, 1));
		А22 = Число(Сред(Стр, 2, 1));
		Если А1 = А11 Тогда
			Если А2 <> А22 Тогда
			  ПоВсем = 0;
			  Прервать;
			КонецЕсли;
		ИначеЕсли (А1 <> 3) И (А11 <> 3) Тогда
			Если 7-А2 = А22 Тогда
			  ПоВсем = 0;
			  Прервать;
			КонецЕсли;
		КонецЕсли;
		А1 = А11;
		А2 = А22;
	КонецЦикла;
	        
	Деноминировать = 1;
	Сч = Счет.ТекущийСчет();
	Пока Сч.Выбран() = 1 Цикл
	    Если СпСчетов.НайтиЗначение(Сч) = 1 Тогда
	        Деноминировать = 0;
			Прервать;
		КонецЕсли;   
		Сч = Сч.Родитель();
	КонецЦикла;
	
	// выборка итогов по счету
	ВидСуммы = "С";
	Если Счет.Валютный = 1 Тогда
	    ВидСуммы = ВидСуммы+"В";
	КонецЕсли;
	Если Счет.Количественный = 1 Тогда
	    ВидСуммы = ВидСуммы+"К";
	КонецЕсли;                
	
	Если Ит.ВыполнитьЗапрос(, ВыбДата, Счет,,, 1,, ВидСуммы) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Состояние(Сообщение);
	                          
	Если ПоВсем = 1 Тогда
		// формирование за один проход 
		Если СформироватьОстаткиПоВалюте(Счет, СписокСубконто, 1, 1, 1, Деноминировать) = 0 Тогда
			Возврат 0;
		КонецЕсли;
	Иначе                                      
		// формирование за несколько проходов 
		СписокСубконто.УдалитьВсе();
		Для Инд=1 По Счет.КоличествоСубконто() Цикл
			Если (Счет.ТолькоОбороты(Инд) = 0) И (Счет.УчетПоСумме(Инд) =  1) Тогда
			    СписокСубконто.ДобавитьЗначение(Инд);
			КонецЕсли;                               
		КонецЦикла;
		Если СформироватьОстаткиПоВалюте(Счет, СписокСубконто, 1, 0, 0, Деноминировать) = 0 Тогда
			Возврат 0;
		КонецЕсли;
                                                             
		Если Счет.Валютный = 1 Тогда
			СписокСубконто.УдалитьВсе();
			Для Инд=1 По Счет.КоличествоСубконто() Цикл
				Если (Счет.ТолькоОбороты(Инд) = 0) И (Счет.УчетПоВалютнойСумме(Инд) =  1) Тогда
				    СписокСубконто.ДобавитьЗначение(Инд);
				КонецЕсли;                               
			КонецЦикла;
			Если СформироватьОстаткиПоВалюте(Счет, СписокСубконто, 0, 1, 0, Деноминировать) = 0 Тогда
				Возврат 0;
			КонецЕсли;
		КонецЕсли;              
		
		Если Счет.Количественный = 1 Тогда
			СписокСубконто.УдалитьВсе();
			Для Инд=1 По Счет.КоличествоСубконто() Цикл
				Если (Счет.ТолькоОбороты(Инд) = 0) И (Счет.УчетПоКоличеству(Инд) =  1) Тогда
				    СписокСубконто.ДобавитьЗначение(Инд);
				КонецЕсли;                               
			КонецЦикла;
			Если СформироватьОстаткиПоВалюте(Счет, СписокСубконто, 0, 0, 1, Деноминировать) = 0 Тогда
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 1;
КонецФункции // СформироватьОстаткиПоСчету
	
//*****************************************************************************
// СформироватьОстаткиПоСчетам(ПланСчетов, РазделительУчета)
//
// Параметры:          
//   ПланСчетов - план счетов по которому формируются остатки
//   РазделительУчета - разделитель учета по которому формируются остатки
//
// Возвращаемое значение:
//   1 действие выполнено 0 - действие не выполнено
//
// Описание
//   Перебирает счета из заданного плана счетов и формирует по ним проводки
//
Функция СформироватьОстаткиПоСчетам(ПланСчетов, РазделительУчета)
    Содержание = "Остатки ";
	Если Метаданные.РазделительУчета.Выбран() = 1 Тогда   
	    Содержание = Содержание+"разделитель учета: "+РазделительУчета+ "  ";
	КонецЕсли;
	Если ПланыСчетов.КоличествоЗначений() > 1 Тогда
	    Содержание = Содержание+"план счетов: "+ПланСчетов+"  ";
	КонецЕсли;                                  
	Содержание = Содержание+"по счету: ";
	
	СуммаСписания = 0;

	Счет = СоздатьОбъект("Счет."+ПланСчетов.Идентификатор());
	Счет.ВыбратьСчета();
	Пока Счет.ПолучитьСчет() = 1 Цикл
		Если Счет.Уровень() = 1 Тогда
			Если КоличествоПроводок > 0 Тогда
				Операция.ДатаОперации = ВыбДата;
				Операция.УстановитьВремя(ЧЧ, ММ, СС);
				Операция.Документ.УстановитьВремя(ЧЧ, ММ, СС);
				Операция.Содержание = СодержаниеОперации+?(НомерЧасти=1, "", " ("+НомерЧасти+")");
			    Операция.Записать();
				Операция.Новая();
				Операция.Документ.НомерДок=НомерОперации(Операция);
				КоличествоПроводок = 0;
			КонецЕсли;
		    НомерЧасти = 1;          
			СодержаниеОперации = Содержание+Счет;
		КонецЕсли;
		Если Счет.ЭтоГруппа() = 1 Тогда
		    Продолжить;
		КонецЕсли;

	    Если СформироватьОстаткиПоСчету(Счет, РазделительУчета) = 0 Тогда
			Возврат 0;
		КонецЕсли;
	КонецЦикла;   
	
	Если СуммаСписания <> 0 Тогда
		ДобавитьПроводку(СчетСписания, 0, ВыбВалютаДеноминации, -СуммаСписания, 0, 0, 0);
	КонецЕсли;
	
	Если КоличествоПроводок > 0 Тогда
		Операция.ДатаОперации = ВыбДата;
		Операция.УстановитьВремя(ЧЧ, ММ, СС);
		Операция.Документ.УстановитьВремя(ЧЧ, ММ, СС);
		Операция.Содержание = СодержаниеОперации+?(НомерЧасти=1, "", " ("+НомерЧасти+")");
	    Операция.Записать();
		Операция.Новая();
		Операция.Документ.НомерДок=НомерОперации(Операция);
		КоличествоПроводок = 0;
	КонецЕсли;
	Возврат 1;
КонецФункции // СформироватьОстаткиПоСчетам

//*****************************************************************************
// СформироватьОстаткиПоПланамСчетов(РазделительУчета)
//
// Параметры:          
//   РазделительУчета - разделитель учета по которому формируются остатки
//
// Возвращаемое значение:
//   1 действие выполнено 0 - действие не выполнено
//
// Описание
//   Перебирает планы счетов  и формирует по ним проводки
//
Функция СформироватьОстаткиПоПланамСчетов(РазделительУчета)
	Для Инд=1 По ПланыСчетов.КоличествоЗначений() Цикл                   
		КорСчет = ТабКорСчетов.ПолучитьЗначение(Инд, "КорСчет");
		СчетСписания = ТабСчетовСписания.ПолучитьЗначение(Инд, "СчетСписания");
		Если СформироватьОстаткиПоСчетам(ПланыСчетов.ЗначениеПоНомеру(Инд), РазделительУчета) = 0 Тогда
			Возврат 0;
		КонецЕсли;
	КонецЦикла;
	Возврат 1;
КонецФункции

//*****************************************************************************
// СформироватьОстаткиПоРазделителямУчета()
//
// Параметры:          
//
// Возвращаемое значение:
//   1 действие выполнено 0 - действие не выполнено
//
// Описание
//   Перебирает разделители учета и формирует по ним проводки
//
Функция СформироватьОстаткиПоРазделителямУчета()
	Если Метаданные.РазделительУчета.Выбран() = 1 Тогда
		ТипРазделителяУчета = Метаданные.РазделительУчета.Тип;
		Если ТипРазделителяУчета = "Перечисление" Тогда
			ВидПеречисления = Перечисление.ПолучитьАтрибут(Метаданные.РазделительУчета.Вид);
			Для Инд=1 По ВидПеречисления.КоличествоЗначений() Цикл
				Если СформироватьОстаткиПоПланамСчетов(ВидПеречисления.ЗначениеПоНомеру(Инд)) = 0 Тогда
					Возврат 0;
				КонецЕсли;
			КонецЦикла;
			Возврат 1;
		ИначеЕсли ТипРазделителяУчета = "Справочник" Тогда
			Вид = Метаданные.РазделительУчета.Вид;
			Если Вид <> "" Тогда
				Если (Метаданные.Справочник(Вид).КоличествоУровней = 1) И (Метаданные.Справочник(Вид).Владелец.Выбран() = 0) Тогда
					Спр = СоздатьОбъект("Справочник."+Вид);
					Спр.ВыбратьЭлементы(0);
					Пока Спр.ПолучитьЭлемент() = 1 Цикл
						Если СформироватьОстаткиПоПланамСчетов(Спр.ТекущийЭлемент()) = 0 Тогда
							Возврат 0;
						КонецЕсли;
					КонецЦикла;
					Возврат 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		                                                                                   
		// собрать все значения разделителей учета
		СпРазделителейУчета = СоздатьОбъект("СписокЗначений");
		Оп = СоздатьОбъект("Операция");           
		ИдРазделителяУчета = Метаданные.РазделительУчета.Идентификатор;
		Оп.ВыбратьОперации(, ВыбДата);
		Пока Оп.ПолучитьОперацию() = 1 Цикл
		    Оп.ВыбратьПроводки();
			Пока Оп.ПолучитьПроводку() = 1 Цикл
			    РазделительУчета = Оп.ПолучитьАтрибут(ИдРазделителяУчета);
				Если СпРазделителейУчета.НайтиЗначение(РазделительУчета) = 0 Тогда
					СпРазделителейУчета.ДобавитьЗначение(РазделительУчета);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;                                         
		
		// по каждому разделителю учета сформировать остатки
		Для Инд=1 По СпРазделителейУчета.РазмерСписка() Цикл
			Если СформироватьОстаткиПоПланамСчетов(СпРазделителейУчета.ПолучитьЗначение(Инд)) = 0 Тогда
				Возврат 0;
			КонецЕсли;
		КонецЦикла;
		
		Возврат 1;
	Иначе
		Возврат СформироватьОстаткиПоПланамСчетов(ПолучитьПустоеЗначение());
	КонецЕсли;
КонецФункции // СформироватьОстаткиПоРазделителямУчета

//*****************************************************************************
// СформироватьОстатки()
//
// Параметры:          
//
// Возвращаемое значение:
//   1 действие выполнено 0 - действие не выполнено
//
// Описание
//   формирование проводок с остатками
//
Функция СформироватьОстатки()   
	Если ФлагСвернутьБух=0 Тогда
		Возврат 0;
	КонецЕсли;

	Ит = СоздатьОбъект("БухгалтерскиеИтоги");
	Операция = СоздатьОбъект("Операция");
	Операция.Новая();
	Операция.Документ.НомерДок=НомерОперации(Операция);
	КоличествоПроводок = 0;
	Возврат СформироватьОстаткиПоРазделителямУчета();
КонецФункции

//_____________________________________________________________________________
Процедура СформироватьОстаткиПоРегистру(НомерРегистра)    
	Перем Инд;
	ВремРег = СоздатьОбъект("Регистры");
	ВидРегистра = Метаданные.Регистр(НомерРегистра).Идентификатор;
	
	Рег = ВремРег.ПолучитьАтрибут(ВидРегистра);
	РегЗап = Регистр.ПолучитьАтрибут(ВидРегистра);  
	
	//Если ИтогиАктуальны() = 0 Тогда
		Рег.ВременныйРасчет();
		ВремРег.РассчитатьРегистрыПо(ВыбДата);
	//КонецЕсли;  
	
	ТИтогов = СоздатьОбъект("ТаблицаЗначений");
	Рег.ВыгрузитьИтоги(ТИтогов,1,1);   

	Мет = Метаданные.Регистр(НомерРегистра);			
	КоличествоИзмерений = Мет.Измерение(); 
	
	// Создадим документ 
	Док = СоздатьОбъект("Документ.УниверсальноеДвижениеПоРегистру");
	Док.Новый();
	Док.ДатаДок = ВыбДата;  
	Док.УстановитьНовыйНомер("");
	Док.АвтоВремяКонецДня(); 
	
	Док.НомерРегистра = НомерРегистра; 
	Док.ПривязыватьСтроки = 1;
	Док.Комментарий = "Свертывание. Регистр."+СокрЛП(ВидРегистра);
	
	Стр = 1;
	ТИтогов.ВыбратьСтроки();
	Пока ТИтогов.ПолучитьСтроку() = 1 Цикл  
		Док.НоваяСтрока();
		Док.Движение = "+";
		
		//Зафиксируем значения измерений
		Для Инд = 1 По  КоличествоИзмерений Цикл
			Док.НазначитьТип("Измерение"+Инд,Мет.Измерение(Инд));
			Док.УстановитьАтрибут("Измерение"+Лев(Инд,1),ТИтогов.ПолучитьЗначение(Стр,Инд));
		КонецЦикла;
		
		//Зафиксируем значения ресурсов
		НомерРесурса = 1;
		Для Инд = КоличествоИзмерений+1 По ТИтогов.КоличествоКолонок() Цикл		            
			Док.УстановитьАтрибут("Ресурс"+Лев(НомерРесурса,1),ТИтогов.ПолучитьЗначение(Стр,Инд));
			НомерРесурса = НомерРесурса + 1;
		КонецЦикла;
		Стр = Стр + 1; 
	КонецЦикла;      
	Если Док.КоличествоСтрок()>0 Тогда
		Док.Записать();
		Док.Провести();
		Сообщить ("Записан и проведен документ "+Док+" от "+Док.ДатаДок+" (Регистр."+СокрЛП(ВидРегистра)+")");
	КонецЕсли;
КонецПроцедуры

//*****************************************************************************
// СформироватьОстаткиПоРегистрам()
//
// Параметры:          
//
// Возвращаемое значение:
//   1 действие выполнено 0 - действие не выполнено
//
// Описание
//   формирование движений документа с остатками.
//
Функция СформироватьОстаткиПоРегистрам() 
	Перем Инд, Ответ; 
	Если ФлагСвернутьРег=0 Тогда
	    Возврат 0;
	КонецЕсли;
	Ответ = 0;        
	Для Инд = 1 ПО Метаданные.Регистр() Цикл 
		Если Метаданные.Регистр(Инд).ТипРегистра="Обороты" Тогда
		    Продолжить;
		КонецЕсли;
		Состояние ("Остатки по "+Метаданные.Регистр(Инд).Представление()); 
		СформироватьОстаткиПоРегистру(Инд);  
		Ответ = 1;
	КонецЦикла;	

	Возврат Ответ;
КонецФункции                                       

//*****************************************************************************
// УдалитьДвижения(ГраницаСвертки)
//
// Параметры:          
//   ГраницаСвертки - граница по которую все проводки надо удалить
//
// Возвращаемое значение.
//   Нет.
//
// Описание
//   Удаление проводок по заданную границу.
//   Проводки удаляются одним из трех методов
//     1. Пометкой на удаление документов
//     2. Отменой проведения документов
//     3. Удалением проводок
//
Процедура УдалитьПроводки(ГраницаСвертки)
	Если СпособУдаленияПроводок = 4 тогда
		Сообщить ("Итоги не свернуты по указанию пользователя.");
		Возврат;
	КонецЕсли;
	
	Если (СпособУдаленияПроводок = 1) Или (СпособУдаленияПроводок = 2)  Тогда
		Если СпособУдаленияПроводок = 1 Тогда
			Сообщение = "Пометка на удаление документов: "
		Иначе
			Сообщение = "Отмена проведения документов: "
		КонецЕсли;
		Документ = СоздатьОбъект("Документ");
		Документ.ВыбратьДокументы(, ГраницаСвертки);
		КоличествоДокументов = 0;
		НачатьТранзакцию();
		Пока Документ.ПолучитьДокумент() = 1 Цикл
			Если Документ.Проведен() = 0 Тогда
				Если БухУчет=1 Тогда
					Если Документ.Вид() <> Метаданные.ДокументОперации.Идентификатор Тогда
						Продолжить;
					КонецЕсли;
				иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;         
			
			Если БухУчет=1 Тогда
				Если Документ.Вид() = Метаданные.ДокументОперации.Идентификатор Тогда
					Если Документ.ПометкаУдаления() = 0 Тогда
						Документ.Удалить(0);
					КонецЕсли;   
				КонецЕсли;
			КонецЕсли;
			
			Если СпособУдаленияПроводок = 1 Тогда
				Если Документ.ПометкаУдаления() = 0 Тогда
					Документ.Удалить(0);
				КонецЕсли;
			Иначе          
				Если Документ.Проведен() = 1 Тогда
					Документ.СделатьНеПроведенным();
				КонецЕсли;
			КонецЕсли;
			
			КоличествоДокументов = КоличествоДокументов+1;
			Если КоличествоДокументов % 10 = 0 Тогда
				Состояние(Сообщение+Документ.ДатаДок+"  "+КоличествоДокументов);
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Иначе                         
		Сообщение = "Удаление проводок: ";
		Операция = СоздатьОбъект("Операция");
		Операция.ВыбратьОперации(, ВыбДата);
		КоличествоПроводок = 0;
		НачатьТранзакцию();
		Пока Операция.ПолучитьОперацию() = 1 Цикл
			ДатаОперации = Операция.ДатаОперации;
			
			Если Операция.Документ.Вид() = Метаданные.ДокументОперации.Идентификатор Тогда
				// ручные операции просто удаляются 
				КоличествоПроводок = КоличествоПроводок+Операция.КоличествоПроводок();
			    Операция.Удалить();
			Иначе
				// у операций по документам удаляются проводки
				Операция.ВыбратьПроводки();
				Операция.ПолучитьПроводку();
				Пока Операция.ПроводкаВыбрана() = 1 Цикл
				    Операция.УдалитьПроводку();
					КоличествоПроводок = КоличествоПроводок+1;
				КонецЦикла;
				Операция.Записать();
			КонецЕсли;
			Если КоличествоПроводок % 100 = 0 Тогда
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
				Состояние(Сообщение+ДатаОперации+" "+КоличествоПроводок);
			КонецЕсли;
		КонецЦикла;
		Состояние(Сообщение+КоличествоПроводок);
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры // УдалитьДвижения

//*****************************************************************************
Процедура ДобавитьЗначениеВИБ(Д, Кол, Элемент, Значение, Тип,Длина,Точность)
	П = СоздатьОбъект("Периодический");
	П.ИспользоватьОбъект(Кол, Элемент);
	П.ДатаЗнач = Д;
	Если Тип <> "" Тогда
		П.НазначитьТип(Тип,Длина,Точность);
	КонецЕсли;
	П.Значение = Значение;
	П.Записать();
КонецПроцедуры
//*****************************************************************************
Процедура ЗапомнитьПериодическиеЗеквизиты(Идентификатор)
		Справ=СоздатьОбъект("Справочник."+Идентификатор);
		МетаСправочник=Метаданные.Справочник(Справ.Вид());
		Справ.ВыбратьЭлементы(0);
		П = СоздатьОбъект("Периодический");
		Пока  Справ.ПолучитьЭлемент() =1 Цикл 
			Элемент=Справ.ТекущийЭлемент();
			Для А=1 По МетаСправочник.Реквизит() Цикл
				Реквизит = МетаСправочник.Реквизит(А);
				Если Реквизит.Периодический = 0 Тогда
					Продолжить;
				КонецЕсли;
				Если Реквизит.ИзменяетсяДокументами = 0 Тогда
					Продолжить; 
				КонецЕсли;    
				Если (Элемент.ЭтоГруппа()=1) и (Реквизит.Использование="ДляЭлемента") Тогда
					Продолжить;
				КонецЕсли;
				Если (Элемент.ЭтоГруппа()=0) и (Реквизит.Использование="ДляГруппы") Тогда
					Продолжить;
				КонецЕсли;
				П.ИспользоватьОбъект(Реквизит.Идентификатор, Элемент);
				П.ОбратныйПорядок();
				П.ВыбратьЗначения(); 
				ДатаЗ=ПолучитьПустоеЗначение(); 
				Значение=ПолучитьПустоеЗначение(); 
				Документ=ПолучитьПустоеЗначение(); 
				Пока П.ПолучитьЗначение() = 1 Цикл 
					ДатаЗ=П.ДатаЗнач;
					Значение=П.Значение; 
					Документ=П.ТекущийДокумент(); 
					Если ДатаЗ<=ВыбДата Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ПустоеЗначение(Документ)=1 Тогда
					Продолжить;
				КонецЕсли; 
				Тип=Реквизит.Тип;
				Длина=Реквизит.Длина;
				Точность=Реквизит.Точность;
				ДобавитьЗначениеВИБ(ВыбДата, Реквизит.Идентификатор,Элемент, Значение, Тип,Длина,Точность)
			КонецЦикла;
		КонецЦикла;
КонецПроцедуры              
//*****************************************************************************
Процедура ОбработкаСправочников()  
	Для Номер=1 по Метаданные.Справочник() Цикл 
		Справочник = Метаданные.Справочник(Номер);
		Идентификатор=Метаданные.Справочник(Номер).Идентификатор;
		Сообщение="Обработка справочника: "+Идентификатор;
		ИзменяемыеДокументом = 0;
		Для А=1 По Справочник.Реквизит() Цикл
			Реквизит = Справочник.Реквизит(А);
			Если Реквизит.Периодический = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если Реквизит.ИзменяетсяДокументами = 0 Тогда
				Продолжить; 
			Иначе
				ИзменяемыеДокументом = 1;
			КонецЕсли; 
			Если ИзменяемыеДокументом = 1 Тогда
				Состояние(Сообщение);
				ЗапомнитьПериодическиеЗеквизиты(Идентификатор); 
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры              

//*****************************************************************************
// ВыполнитьСвертку()
//
// Параметры:
//
// Возвращаемое значение.
//  Нет.
//
// Вызывается из формул элементов диалога.
//  кнопка Выполнить
// Описание
//   Выполняет свертку бухгалтерских итогов на заданную дату 
//   и удалеие проводок по эту дату
//
Процедура ВыполнитьСвертку()
	Если ПустоеЗначение(ВыбДата) = 1 Тогда
		Предупреждение("Укажите дату, на которую нужно произвести свертку итогов!");
		Возврат;
	КонецЕсли;  
	
	Если БухУчет=1 Тогда
		Если ВыбДата > КонецРассчитанногоПериодаБИ() Тогда
			Предупреждение("Дата свертки должна попадать в расчитанный период бухгалтерских итогов.
			|Укажите дату до "+КонецРассчитанногоПериодаБИ()+" или произведите расчет бухгалтерских итогов.");
			Возврат;
		КонецЕсли;
		
		Если ПланыСчетов.КоличествоЗначений() = 1 Тогда
			ТабКорСчетов.УстановитьЗначение(1, "КорСчет", ВыбКорСчет);
			ТабСчетовСписания.УстановитьЗначение(1, "СчетСписания", ВыбСчетСписания);
		КонецЕсли;                                                    
		
		// проверка что все корр. счета выбраны правильно
		ТабКорСчетов.ВыбратьСтроки();
		Пока ТабКорСчетов.ПолучитьСтроку() = 1 Цикл
			Если ПустоеЗначение(ТабКорСчетов.КорСчет) = 1 Тогда
				Предупреждение("Выберите корреспондирующий счет для плана счетов """+ТабКорСчетов.ПланСчетов+"""!");
				Возврат;
			КонецЕсли;
			Если ТабКорСчетов.КорСчет.ПланСчетов() <> ТабКорСчетов.ПланСчетов Тогда
				Предупреждение("Для плана счетов """+ТабКорСчетов.ПланСчетов+""" выбран счет из другого плана счетов!");
				Возврат;
			КонецЕсли;   
			Если ТабКорСчетов.КорСчет.ЭтоГруппа() = 1 Тогда
				Предупреждение("Счет "+ТабКорСчетов.КорСчет+" является группой!
				|Укажите другой счет.");
				Возврат;
			КонецЕсли;   
		КонецЦикла;
		
		
		// проверка что все счета списания выбраны правильно
		Если (ВыбКоэфДеноминации <> 0) И (ВыбКоэфДеноминации <> 1) Тогда
			ТабСчетовСписания.ВыбратьСтроки();
			Пока ТабСчетовСписания.ПолучитьСтроку() = 1 Цикл
				Если ПустоеЗначение(ТабСчетовСписания.СчетСписания) = 1 Тогда
					Предупреждение("Выберите счет списания для плана счетов """+ТабСчетовСписания.ПланСчетов+"""!");
					Возврат;
				КонецЕсли;
				Если ТабСчетовСписания.СчетСписания.ПланСчетов() <> ТабСчетовСписания.ПланСчетов Тогда
					Предупреждение("Для плана счетов """+ТабСчетовСписания.ПланСчетов+""" выбран счет списания из другого плана счетов!");
					Возврат;
				КонецЕсли;   
				Если ТабСчетовСписания.СчетСписания.ЭтоГруппа() = 1 Тогда
					Предупреждение("Счет "+ТабСчетовСписания.СчетСписания+" является группой!
					|Укажите другой счет.");
					Возврат;
				КонецЕсли;   
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	
	Если Вопрос("Перед выполнением свертки рекомендуется 
	            |создать резервную копию информационной базы.
				|Выполнить свертку?", "Да+Нет") <> "Да" Тогда
		Возврат;
	КонецЕсли;

	// Выбрать время на которое будут записаны все операции
	ЧЧ = 23;
	ММ = 59;
	СС = 59;
	ПоследнийДокумент = СоздатьОбъект("Документ");
	ПоследнийДокумент.ОбратныйПорядок(1);
	ПоследнийДокумент.ВыбратьДокументы(ВыбДата, ВыбДата);
	ПоследнийДокумент.ПолучитьДокумент();
	Если ПоследнийДокумент.Выбран() = 1 Тогда
		ПоследнийДокумент.ПолучитьВремя(ЧЧ, ММ, СС);
		Если ЧЧ*10000+ММ*100+СС >= 235959 Тогда
			Если СС = 59 Тогда
				СС = 0;
				Если ММ = 59 Тогда
					ММ = 0;
					ЧЧ = ЧЧ+1;
				Иначе
					ММ = ММ+1;
				КонецЕсли;
			Иначе
				СС = СС+1;
			КонецЕсли;
		Иначе
			ЧЧ = 23;
			ММ = 59;
			СС = 59
		КонецЕсли;
	КонецЕсли;
	Если (СформироватьОстатки() + СформироватьОстаткиПоРегистрам()) >= 1 Тогда
		ОбработкаСправочников();
		УдалитьПроводки(?(ПоследнийДокумент.Выбран() = 1, ПоследнийДокумент, ВыбДата-1));
	КонецЕсли;
	
	Предупреждение("Свертка бухгалтерских итогов выполнена!");
КонецПроцедуры

//*****************************************************************************
// ПоказатьСлой(Слой)
//
// Параметры:       
//   Слой - слой который надо показать
//
// Возвращаемое значение.
//  Нет.
//
// Описание
//   показывает указанный слой и настраивает видимость элементов управления
//   на нем
//
Процедура ПоказатьСлой(Слой)
	Если Слой = "Свертка" Тогда
		Форма.ИспользоватьСлой("Основной,Свертка,Основной2", 2);   
		Если БухУчет = 1 Тогда
			Форма.ВыбКорСчет.Видимость(0);
			Форма.ТекстКорСчет.Видимость(0);
		Иначе
			Форма.ТабКорСчетов.Видимость(0);
		КонецЕсли;		
	Иначе
		Форма.ИспользоватьСлой("Основной,Деноминация,Основной2", 2);
		Если БухУчет = 1 Тогда
			Форма.ВыбСчетСписания.Видимость(0);
			Форма.ТекстСчетСписания.Видимость(0);
		Иначе
			Форма.ТабСчетовСписания.Видимость(0);
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры


//*****************************************************************************
// ПриВыбореКорСчета()
//
// Параметры:
//
// Возвращаемое значение.
//  Нет.
//
// Вызывается из формул элементов диалога.
//  таблица ТабКорСчета
// Описание
//   ввод кор счета для выбранного плана счетов
//
Процедура ПриВыбореКорСчета()
	Если (ТабКорСчетов.ТекущаяСтрока() > 0) И (ТабКорСчетов.ТекущаяСтрока() <= ТабКорСчетов.КоличествоСтрок()) Тогда
		Счет = СоздатьОбъект("Счет."+ТабКорСчетов.ПланСчетов.Идентификатор());
		Счет.ВыборГруппы(0);
		Счет.НайтиСчет(ТабКорСчетов.КорСчет);
		Если Счет.Выбрать("Укажите корреспондирующий счет") = 1 Тогда
			ТабКорСчетов.КорСчет = Счет.ТекущийСчет();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//*****************************************************************************
// ПриВыбореСчетаСписания()
//
// Параметры:
//
// Возвращаемое значение.
//  Нет.
//
// Вызывается из формул элементов диалога.
//  таблица ТабСчетаСписания
// Описание
//   ввод счета списания для выбранного плана счетов
//
Процедура ПриВыбореСчетаСписания()
	Если (ТабСчетовСписания.ТекущаяСтрока() > 0) И (ТабСчетовСписания.ТекущаяСтрока() <= ТабСчетовСписания.КоличествоСтрок()) Тогда
		Счет = СоздатьОбъект("Счет."+ТабСчетовСписания.ПланСчетов.Идентификатор());
		Счет.ВыборГруппы(0);
		Счет.НайтиСчет(ТабСчетовСписания.СчетСписания);
		Если Счет.Выбрать("Укажите счет списания") = 1 Тогда
			ТабСчетовСписания.СчетСписания = Счет.ТекущийСчет();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры   

//*****************************************************************************
// ДобавитьСчет()
//
// Параметры:
//
// Возвращаемое значение.
//  Нет.
//
// Вызывается из формул элементов диалога.
//  Кнопка +
// Описание
//   добавление счетов в список счетов которые не надо денминировать
//
Процедура ДобавитьСчет()
	ОткрытьПодбор("ПланСчетов",,,1);
КонецПроцедуры   

//*****************************************************************************
// УдалитьСчет()
//
// Параметры:
//
// Возвращаемое значение.
//  Нет.
//
// Вызывается из формул элементов диалога.
//  Кнопка Х
// Описание
//   удаление счета из списка счетов которые не надо денминировать
//
Процедура УдалитьСчет()
	ТекСтрока = СпСчетов.ТекущаяСтрока();
	Если (ТекСтрока <= 0) Или (ТекСтрока > СпСчетов.РазмерСписка()) Тогда
	    Возврат;
	КонецЕсли;  
	СпСчетов.УдалитьЗначение(ТекСтрока);
	Если ТекСтрока > СпСчетов.РазмерСписка() Тогда
	    ТекСтрока = ТекСтрока-1;
	КонецЕсли;  
	Если ТекСтрока > 0 Тогда
	    СпСчетов.ТекущаяСтрока(ТекСтрока);
	КонецЕсли;  
КонецПроцедуры   

//*****************************************************************************
// предопределенная
Процедура ОбработкаПодбора(Элемент, КонтФормы)
	СпСчетов.ДобавитьЗначение(Элемент);
    СпСчетов.ТекущаяСтрока(СпСчетов.РазмерСписка());
КонецПроцедуры

//*****************************************************************************
// предопределенная
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	ПоказатьСлой(ЗначениеЗакладки);
КонецПроцедуры              

//*****************************************************************************
// предопределенная
Процедура ПриОткрытии(ФлагЧтенияНастройки) 
	Перем Т, Т1;
	
	Если ФлагЧтенияНастройки = 0 Тогда
		ВыбДата = НачКвартала(ТекущаяДата())-1;
		СпособУдаленияПроводок = 1;
		ТабКорСчетов.НоваяКолонка("ПланСчетов",,,, "План счетов", 15);
		ТабКорСчетов.НоваяКолонка("КорСчет",,,, "Корр. счет", 15);
		ТабСчетовСписания.НоваяКолонка("ПланСчетов",,,, "План счетов", 15);
		ТабСчетовСписания.НоваяКолонка("СчетСписания",,,, "Счет списания", 15);
		Если БухУчет=1 Тогда
			Для Инд=1 По ПланыСчетов.КоличествоЗначений() Цикл
				ТабКорСчетов.НоваяСтрока();
				ТабКорСчетов.ПланСчетов = ПланыСчетов.ЗначениеПоНомеру(Инд);
				ТабКорСчетов.КорСчет = ПустоеЗначение("Счет");
				ТабСчетовСписания.НоваяСтрока();
				ТабСчетовСписания.ПланСчетов = ПланыСчетов.ЗначениеПоНомеру(Инд);
				ТабСчетовСписания.СчетСписания = ПустоеЗначение("Счет");
			КонецЦикла;
		КонецЕсли;
		ВыбКоэфДеноминации = 1;
		ВыбДеномСуммы = 1;
		ВыбДеномВалСуммы = 0;
	Иначе 
		ТабКорСчетов.Выгрузить(Т);
		ТабКорСчетов.УдалитьСтроки();
		ТабСчетовСписания.Выгрузить(Т1);
		ТабСчетовСписания.УдалитьСтроки();
		Если Метаданные.БухУчет=1 Тогда
			Для Инд=1 По ПланыСчетов.КоличествоЗначений() Цикл
				ТабКорСчетов.НоваяСтрока();
				ТабКорСчетов.ПланСчетов = ПланыСчетов.ЗначениеПоНомеру(Инд);
				Стр = 0;
				Если Т.НайтиЗначение(ТабКорСчетов.ПланСчетов, Стр, "ПланСчетов") = 1 Тогда
					ТабКорСчетов.КорСчет = Т.ПолучитьЗначение(Стр, "КорСчет");
				Иначе
					ТабКорСчетов.КорСчет = ПустоеЗначение("Счет");
				КонецЕсли;
				
				ТабСчетовСписания.НоваяСтрока();
				ТабСчетовСписания.ПланСчетов = ПланыСчетов.ЗначениеПоНомеру(Инд);
				Стр = 0;
				Если Т1.НайтиЗначение(ТабСчетовСписания.ПланСчетов, Стр, "ПланСчетов") = 1 Тогда
					ТабСчетовСписания.СчетСписания = Т1.ПолучитьЗначение(Стр, "СчетСписания");
				Иначе
					ТабСчетовСписания.СчетСписания = ПустоеЗначение("Счет");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Свертка");
	//Форма.Закладки.ДобавитьЗначение("Деноминация");
	
	Если Метаданные.Валюта.Выбран() = 1 Тогда
	    Форма.ВыбДеномВалСуммы.Доступность(1);
		Форма.ВыбВалютаДеноминации.Доступность(1);
		НазначитьВид(ВыбВалютаДеноминации, Метаданные.Валюта.Идентификатор);
		Форма.ВыбВалютаДеноминации.НеИзменятьВид(1);
	Иначе
	    Форма.ВыбДеномВалСуммы.Доступность(0);
		Форма.ВыбВалютаДеноминации.Доступность(0);
		ВыбДеномВалСуммы = 0;
	КонецЕсли;
	
	Если БухУчет = 1 Тогда
		Реквизит = Метаданные.РеквизитПроводки("НомерЖурнала");
		Если Реквизит.Выбран() = 1 Тогда
			Если (Реквизит.Тип = "Строка") И (Реквизит.Длина <> 1) Тогда
				ЗаполнятьНомерЖурнала = 1;
			КонецЕсли;
		КонецЕсли;
		Реквизит = Метаданные.РеквизитПроводки("СодержаниеПроводки");
		Если Реквизит.Выбран() = 1 Тогда
			Если (Реквизит.Тип = "Строка") И (Реквизит.Длина <> 1) Тогда
				ЗаполнятьСодержаниеПроводки = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;   
	
	Если БухУчет = 0 Тогда
	    Форма.ФлагСвернутьБух.Доступность(0);
		ФлагСвернутьБух = 0;
	КонецЕсли;
	
	ПоказатьСлой("Свертка");
КонецПроцедуры    

// Определим наличие используемой компаненты бух. учета
БухУчет = 1;

Попытка        
	Зн = ПланыСчетов.КоличествоЗначений();
Исключение
	БухУчет = 0;
КонецПопытки

