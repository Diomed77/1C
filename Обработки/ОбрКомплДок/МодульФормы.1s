//*******************************************
Перем тпДок, Источник;
Перем ТекущийСлой;
//Перем ТекКомплектовщик;
Перем ТекущийДокПоставки;
Перем ПередатьФокус;
Перем флСообщения;
Перем ТП	,ТП1	,ТП2;
Перем ТабТП	,ТабТП1	,ТабТП2;
Перем ТабТП_ТекСтр;
Перем Окна;

Процедура НастроитьОкна(Показать=1) Далее
Процедура ЗаполнитьТПДок(Обновить=0) Далее
Функция УстановитьСостояние(пСост,пВид) Далее

Процедура ТП_Обновить() Далее
Функция СозданиеДокКомплектацияМоб(пПоСчету) Далее


Процедура НастроитьПривязки()
	//оПривязки = СоздатьОбъект("Общие.Форма.Привязки3");
	//оПривязки.Добавить("тпКнопка_", "НН", "Форма", "ПП", "Форма");
	//оПривязки.Добавить("кнЗаписать", "ВН", "Форма", "НН", "Форма");
	//оПривязки.Добавить("кнОК", "ВН", "Форма", "НН", "Форма");
	//оПривязки.Добавить("кнЗакрыть", "ВН", "Форма", "НН", "Форма");
	УправлениеФормой = СоздатьОбъект("УправлениеФормой");
	Привязки = УправлениеФормой.ПривязкаЭлементов;

//	Привязки.УстановитьГраницыПоФорме("тпКнопка_",1,1,1,0);
	
	Привязки.УстановитьГраницыПоФорме("кнПрием", "ВН", "Форма", "НН", "Форма");
	Привязки.УстановитьГраницыПоФорме("кнПрием11", "ВН", "Форма", "НН", "Форма");
	Привязки.УстановитьГраницыПоФорме("кнИнвент", "ВН", "Форма", "НН", "Форма");
	Привязки.УстановитьГраницыПоФорме("кнЗакрыть", "ВН", "Форма", "НН", "Форма");
	
	//Привязки слоя комплектации
	Привязки.УстановитьГраницыПоФорме("тпКнопка_","ВН", "Форма", "НН", "Форма");
	Привязки.УстановитьГраницыПоФорме("тпКнопка1_","ВН", "Форма", "НН", "Форма");

	Привязки.УстановитьГраницыПоФорме("рДатаПоставки","ВН", "Форма", "НН", "Форма");
	Привязки.УстановитьГраницыПоФорме("тДатаПоставки","ВН", "Форма", "НН", "Форма");

	Привязки.УстановитьГраницыПоФорме("кнКомплектацияНазад","ВН", "Форма", "НН", "Форма");
	Привязки.УстановитьГраницыПоФорме("кнТаблица","ВН", "Форма", "НН", "Форма");
//	Привязки.УстановитьГраницыПоФорме("кнОбработать","ВН", "Форма", "НН", "Форма");

	//слойТабКомпл
	Привязки.УстановитьГраницыПоФорме("тпКнопка2_","ВН", "Форма", "НН", "Форма");
	Привязки.УстановитьГраницыПоФорме("тЗаголовок","ВН", "Форма", "НН", "Форма");

	Привязки.УстановитьГраницыПоФорме("кнТабКомплНазад","ВН", "Форма", "НН", "Форма");

	
	Привязки.Привязать();
	
	
КонецПроцедуры


//{***Комплектация***
//======================================================================

//{***Кнопки Комплектация

//======================================================================
Процедура кнПринять()
	Перем Док;
	
	Если ТабТП_ТекСтр=0 Тогда
		Возврат;
	КонецЕсли;
//	Сообщить(ТабТП_ТекСтр);

	ТабТП.ПолучитьСтрокуПоНомеру(ТабТП_ТекСтр);
	
	Если ПустоеЗначение(ТабТП.ДокКомпл)=0 Тогда
	
	л_ДокКомпл=СоздатьОбъект("Документ.КомплектацияМобил");
		Если л_ДокКомпл.НайтиДокумент(ТабТП.ДокКомпл)=1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли; 
		//ТабКомплРаб.ДокКомпл=л_ДокКомпл.ТекущийДокумент();
		//ТабКомплРаб.Комплектовщик=ТекКомплектовщик;

	Док=СозданиеДокКомплектацияМоб(ТабТП.ПоСчету);
	Док.СостояниеКомпл=УстановитьСостояние("Принят","КомплектацияМобил");
	Док.Записать();
	
//	ТабКомплРаб.ДокКомпл=л_ДокКомпл.ТекущийДокумент();
//	ТабКомплРаб.Комплектовщик=ТекКомплектовщик;	
	
//	ЗаполнениеТаблицыДокКомпл();
	ТП_Обновить();	
//	ТабТП_ТекСтр=0;
КонецПроцедуры // кнПринять
//======================================================================
Процедура кнВработу()
	ТабТП.ПолучитьСтрокуПоНомеру(ТабТП_ТекСтр);

	Если ТабТП.ДокКомпл.Выбран()=0 Тогда
		Возврат;
	КонецЕсли;
	л_ДокКомпл=СоздатьОбъект("Документ.КомплектацияМобил");
	Если л_ДокКомпл.НайтиДокумент(ТабТП.ДокКомпл)=1 Тогда
		л_ДокКомпл.СостояниеКомпл=УстановитьСостояние("вРаботе","КомплектацияМобил");
		л_ДокКомпл.ДатаПоставки=рДатаПоставки; //позже убрать
		л_ДокКомпл.Записать();
	КонецЕсли;

	ТП_Обновить();	
КонецПроцедуры // кнВРаботе



Процедура кнТаблица()

	сп = СоздатьОбъект( "СписокЗначений" );
	сп.Установить( "Документ", ТабТП.ПолучитьЗначение(1,"ПоСчету") );
	сп.Установить( "ТекКомплектовщик", ТекКомплектовщик);
	сп.Установить("ДатаПоставки", рДатаПоставки);
	//	сп.Установить( "Принтер", спПринтеров.ПолучитьЗначение(спПринтеров.ТекущаяСтрока()) );
	ОткрытьФорму( "Отчет", сп, КаталогИБ() + "ExtForms\Печать\ПечатьЭлЗаявкиМоб.ert" );


//	Окна = СоздатьОбъект("Окна");
////	Окна.Минимизировать(Форма);	
////	Окна.Максимизировать(Форма);
//	
//	ТекущийСлой="слТабКомпл,слШапка";
//	Форма.ИспользоватьСлой(ТекущийСлой,2);
//	ПередатьФокус = "тпКнопка2_"; 
//	Форма.Закрыть(0);	
КонецПроцедуры // кнТаблица
Процедура кнТабКомплНазад()
	Окна = СоздатьОбъект("Окна");
//	Окна.Минимизировать(Форма);	
//	Окна.Максимизировать(Форма);
	
	ТекущийСлой="слКомплектация,слШапка";
	Форма.ИспользоватьСлой(ТекущийСлой,2);
	ПередатьФокус = "тпКнопка_"; 
	Форма.Закрыть(0);	
КонецПроцедуры // кнТабКомплНазад
Процедура кнКомплектацияНазад()
	Окна = СоздатьОбъект("Окна");
//	Окна.Минимизировать(Форма);	
//	Окна.Максимизировать(Форма);
	
	ТекущийСлой="слОбложка,слШапка";
	Форма.ИспользоватьСлой(ТекущийСлой,2);
КонецПроцедуры // кнКомплектацияНазад
//======================================================================
Процедура кнПечать()

КонецПроцедуры // кнПечать
//}***Кнопки Комплектация

Функция УстановитьСостояние(пСост,пВид)
	спрСост=СоздатьОбъект("Справочник.СостоянияДокументов");
	спрСост.НайтиПоНаименованию(пВид); 
	спрСост.ИспользоватьРодителя(спрСост.ТекущийЭлемент());
	спрСост.НайтиПоНаименованию(пСост,1);
	Возврат спрСост.ТекущийЭлемент();
КонецФункции

Функция ПолучениеЗаявок(п_ДатаПоставки)
	Перем таблКомпл;
	Перем Реги;
	Перем Рег;
	Перем знСостояний;
	
	Реги=СоздатьОбъект("Регистры");
//	Реги.Актуальность(1);
	Рег=Реги.КомплектацияЗаявок;
	
//	рег.УстановитьЗначениеФильтра("ПоСчету",ПоСчету);
	рег.УстановитьЗначениеФильтра("ДатаПоставки",п_ДатаПоставки);
	
	знСостояний=СоздатьОбъект("СписокЗначений");
		знСостояний.ДобавитьЗначение(21);
		знСостояний.ДобавитьЗначение(1);
	
	рег.УстановитьЗначениеФильтра("Статус",знСостояний,2);
		
	таблКомпл=СоздатьОбъект("ТаблицаЗначений");
	
	Рег.ВыгрузитьИтоги(таблКомпл,1);
	Если (таблКомпл.КоличествоСтрок()=0) Тогда
//		таблКомпл.ВыбратьСтроку();
		Возврат ПустоеЗначение(таблКомпл);
	КонецЕсли;
//	таблКомпл.ВыбратьСтроку();
	
//	таблКомпл.ВыбратьСтроки();
//	Пока таблКомпл.ПолучитьСтроку()=1 Цикл
//		Регистр.КомплектацияЗаявок.ДатаПоставки=таблКомпл.ДатаПоставки;
//		Регистр.КомплектацияЗаявок.ПоСчету=таблКомпл.ПоСчету;
//		Регистр.КомплектацияЗаявок.ВидЗаявки=таблКомпл.ВидЗаявки;
//		Регистр.КомплектацияЗаявок.МестоКомплектации=таблКомпл.МестоКомплектации;
//		Регистр.КомплектацияЗаявок.Склад=таблКомпл.Склад;
//		Регистр.КомплектацияЗаявок.ВидДоставки=таблКомпл.ВидДоставки;
//		Регистр.КомплектацияЗаявок.Товар="";
//		Регистр.КомплектацияЗаявок.Статус=таблКомпл.Статус;
//		Регистр.КомплектацияЗаявок.Количество=таблКомпл.Количество;
//		Регистр.КомплектацияЗаявок.ДвижениеРасходВыполнить();
//
//		Если Аннулировать=0 Тогда //переводим в другой статус
//			Регистр.КомплектацияЗаявок.Статус=2;
//			//бронирование
//			Если ПоСчету.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
//				Регистр.КомплектацияЗаявок.Статус=22;
//			КонецЕсли;
//			Регистр.КомплектацияЗаявок.ДвижениеПриходВыполнить();
//		КонецЕсли;		
//		
//	КонецЦикла;
	Возврат таблКомпл;
КонецФункции // ПолучениеЗаявок
Функция ПоискПодчДок(п_ДокПоиска,п_ВидПоиска="КомплектацияМобил")
	Перем ДокПодч;
	Перем ДокПоиска;
	
	ДокПоиска=СоздатьОбъект("Документ."+п_ВидПоиска);
	ДокПодч=СоздатьОбъект("Документ");
	ДокПодч.ВыбратьПодчиненныеДокументы(п_ДокПоиска.ДатаДок,,п_ДокПоиска);
	Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
		Если ДокПодч.Вид()=п_ВидПоиска Тогда
			ДокПоиска.НайтиДокумент(ДокПодч.ТекущийДокумент());
			Возврат ДокПоиска;
		КонецЕсли;	
	КонецЦикла;	
	Возврат 0;	
КонецФункции // ПоискПодчДок

Функция СозданиеДокКомплектацияМоб(пПоСчету)
	Перем Табл;
	
	//АвтоВремяОтключить();
	Док=СоздатьОбъект("Документ.КомплектацияМобил");
	Док.АвтоВремяТекущее();
	Док.Новый();
	Док.IDD=ПолучитьУникальныйIDD();
//	Док.ДатаОтгрузки=пДатаОтгрузки;
//	Док.ОснСрокПоставки=ОснСрокПоставки;
//	Док.Автор=Автор;
	Док.ПоСчету=пПоСчету;
	Док.Комплектовщик=ТекКомплектовщик;
	Док.СкладЗагрузки = пПоСчету.Склад;
	Док.ДатаПоставки=рДатаПоставки;
	Запрос=СоздатьОбъект("ODBCRecordSet");	
	
	//	Док.КлГруппа=КлГруппа;
	//Док.Дата_курса=Дата_курса;
	//Док.СоСрокаРеализации=СоСрокаРеализации;
	//Док.Единица=Единица;
	//Док.ПланВремяДоставки=ПланВремяДоставки;
	//Док.СкидкаПоставщику=СкидкаПоставщику;
	//Док.НеделяОтгрузки=глНомерНеделиЕвро(пДатаОтгрузки);
	//Док.Склад=Склад;
	//Док.Валюта=Валюта;
	//Док.фДоставкаКлиента=фДоставкаКлиента;
	

//	ВремяДокумента=ТекущееВремя();
//	Док.УстановитьВремя(Число(Сред(ВремяДокумента,1,2)),Число(Сред(ВремяДокумента,4,2)),Число(Сред(ВремяДокумента,7,2)));

	
//	сзПараметр= СоздатьОбъект("СписокЗначений");
//		сзПараметр.ДобавитьЗначение("Новый","Команда");
//		сзПараметр.ДобавитьЗначение(ВзятьКонтекст(ТекущийДокумент()),"Конт");	
//	ОткрытьФорму(док,сзПараметр);	


		ТекстЗапроса="SELECT СчетСтроки.IDDOC [Ссылка $Документ.Счет]
		|					, $СчетСтроки.Товар [Товар $Справочник.Номенклатура]
		|					, СпрН.CODE ТовКод
		|					, $СчетСтроки.Количество Количество
		|					, $СчетСтроки.Количество КоличествоФакт
		|					, $СчетСтроки.Единица [Единица $Справочник.Единицы]
		|					, $СчетСтроки.Коэффициент Коэффициент
		|					, $СчетСтроки.МинСрокРеализ МинСрокРеализ
		|					, $СчетСтроки.МаксСрокРеализ МаксСрокРеализ
		|					, РезервыТоваровОстатки.РезервТовараОстаток Резерв
		|			  FROM $ДокументСтроки.Счет AS СчетСтроки (NOLOCK)
		|			  INNER JOIN $Справочник.Номенклатура СпрН (NOLOCK) ON СпрН.ID = $СчетСтроки.Товар
		|			  LEFT OUTER JOIN $РегистрОстатки.РезервыТоваров(,,(ПоСчету = :ВыбСчет),Товар,) AS РезервыТоваровОстатки (NOLOCK) ON $СчетСтроки.Товар = РезервыТоваровОстатки.Товар
		|			  WHERE СчетСтроки.IDDOC = :ВыбСчет
		|			  ORDER BY LINENO_
		|";

		Запрос.УстановитьТекстовыйПараметр("ВыбСчет",пПоСчету);
		Табл=СоздатьОбъект("ТаблицаЗначений");
		табл=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
		
		Док.ЗагрузитьТабличнуюЧасть(Табл);

	Док.Записать();
//	АвтоВремяТекущее();
//	ИзменениеОжидаемойПоставки(Док,пДатаОтгрузки,"Новый");	
	Возврат Док;
КонецФункции

Процедура ЗаполнениеТаблицыДокКомпл()
	Перем л_ДокКомпл;
	
	//л_ДокКомпл=СоздатьОбъект("Документ.КомплектацияМобил");
	ТабКомплРаб=СоздатьОбъект("ТаблицаЗначений");
	ТабКомплРаб.Загрузить(ПолучениеЗаявок(рДатаПоставки));

//	ТабКомплРаб.НоваяКолонка( "Флаг", "Число", 1, 0, "!", 3 );
//	ТабКомплРаб.НоваяКолонка( "Выб", "Число", 1, 0 );
//	ТабКомплРаб.НоваяКолонка( "Дата", "Дата",,,"Дата", 7 );
//	ТабКомплРаб.НоваяКолонка( "Время", "Строка", 8,, "Время", 7 );
//	ТабКомплРаб.НоваяКолонка( "КлиентФилиала", "Справочник.Контрагенты",,,"Кл. филиала", 20 );
//	ТабКомплРаб.НоваяКолонка( "Резерв", "Строка",,,"В резерве", 10,, 2 );
//	ТабКомплРаб.НоваяКолонка( "Сумма", "Число",12,2,"Сумма", 10,, 2 );
//	ТабКомплРаб.НоваяКолонка( "Валюта", "Справочник.Валюты",,,"Вал.", 5,, 2 );
//	ТабКомплРаб.НоваяКолонка( "Автор", "Справочник.Пользователи",,, "Автор", 15 );	


//	ТабКомплРаб.НоваяКолонка( "Заявка", "Документ.Счет",,,"Эл. заявка", 30 );
	ТабКомплРаб.НоваяКолонка( "Комплектовщик", "Справочник.Комплектовщики",,, "Компл.", 10 );
	ТабКомплРаб.НоваяКолонка( "ДокКомпл", "Документ.КомплектацияМобил",,,"КомплектацияМобил", 30 );
	ТабКомплРаб.НоваяКолонка( "СтатусДок", "Справочник.СостоянияДокументов",,,"Статус", 10 );
	
	ТабКомплРаб.ВыбратьСтроки();
	Пока ТабКомплРаб.ПолучитьСтроку() = 1 Цикл
		л_ДокКомпл=ПоискПодчДок(ТабКомплРаб.ПоСчету,"КомплектацияМобил");

		Если л_ДокКомпл=0 Тогда
			ТабКомплРаб.ДокКомпл=ПолучитьПустоеЗначение("Документ.КомплектацияМобил");
//			ТабКомплРаб.СтатусДок="НеПринята";
			ТабКомплРаб.СтатусДок=УстановитьСостояние("НеПринята","КомплектацияМобил");
		Иначе
			ТабКомплРаб.ДокКомпл=л_ДокКомпл.ТекущийДокумент();
			ТабКомплРаб.Комплектовщик=л_ДокКомпл.Комплектовщик;
			ТабКомплРаб.СтатусДок=л_ДокКомпл.СостояниеКомпл;
		КонецЕсли;
		//	Сообщить("Не выбран");
		//КонецЕсли;
		//ТабКомплРаб.ДокКомпл=л_ДокКомпл.ТекущийДокумент();
		//ТабКомплРаб.Комплектовщик=ТекКомплектовщик;

		//Если л_ДокКомпл=0 Тогда
		//	л_ДокКомпл=СоздатьОбъект("Документ.КомплектацияМобил");
		//	л_ДокКомпл.НайтиДокумент(СозданиеДокКомплектацияМоб(ТабКомплРаб.ПоСчету));
		//ИначеЕсли л_ДокКомпл.Выбран()=0 Тогда
		//	Сообщить("Не выбран");
		//КонецЕсли;
		//ТабКомплРаб.ДокКомпл=л_ДокКомпл.ТекущийДокумент();
		//ТабКомплРаб.Комплектовщик=ТекКомплектовщик;
	КонецЦикла;
//	ТабКомплРаб.ВыбратьСтроку();
	ТабТП.Загрузить(ТабКомплРаб);
КонецПроцедуры // ЗаполнениеТаблицыДокКомпл

Процедура ЗаписьДокКомплектацияМобил()
	
КонецПроцедуры // ЗаписьДокКомплектацияМобил

//======================================================================
Функция ЗагрузкаДанныхРабТаб(док)
	Перем л_ИТ;
	Перем Запрос;
	л_ИТ=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос=СоздатьОбъект("ODBCRecordSet");
	
	ТекстЗапроса="SELECT КомплектацияМобилСтроки.IDDOC [КомплектацияМобилСтрокиСсылка $Документ.КомплектацияМобил]
	|, КомплектацияМобилСтроки.LINENO_ НомерСтроки
	|, $КомплектацияМобилСтроки.Количество Количество
	|, $КомплектацияМобилСтроки.Товар [Товар $Справочник.Номенклатура]
	|, $КомплектацияМобилСтроки.ТовКод ТовКод
	|, $КомплектацияМобилСтроки.Коэффициент Коэффициент
	|, $КомплектацияМобилСтроки.Единица [Единица $Справочник.Единицы]
	|, $КомплектацияМобилСтроки.КоличествоФакт КоличествоФакт
	|, $КомплектацияМобилСтроки.СутьПретензии КомплектацияМобилСтрокиСутьПретензии
	|, $КомплектацияМобилСтроки.ТоварЗамена [ТоварЗамена $Справочник.Номенклатура]
	|, $КомплектацияМобилСтроки.НомерСтрокиЗамены НомерСтрокиЗамены
	|, $КомплектацияМобил.ПоСчету [ПоСчету $Документ.Счет]
	|FROM $Документ.КомплектацияМобил AS КомплектацияМобил With (NOLOCK)
	|	LEFT OUTER JOIN _1SJOURN AS Журнал With (NOLOCK) ON КомплектацияМобил.IDDOC = Журнал.IDDOC
	|LEFT OUTER JOIN $ДокументСтроки.КомплектацияМобил AS КомплектацияМобилСтроки With (NOLOCK) ON КомплектацияМобил.IDDOC = КомплектацияМобилСтроки.IDDOC
	|WHERE ($КомплектацияМобил.Комплектовщик = :пКомплектовщик)
	|	AND ($КомплектацияМобил.СостояниеКомпл = :пСостояниеКомпл)
//|	AND ($КомплектацияМобил.ПоСчету IN (SELECT Val FROM #Счета))
	|";
		
		
//	спСчета=СоздатьОбъект("СписокЗначений");

//		Запрос.УложитьСписокОбъектов(спСчета,"#Счета");
	Запрос.УстановитьТекстовыйПараметр("пКомплектовщик",ТекКомплектовщик);
	Запрос.УстановитьТекстовыйПараметр("пСостояниеКомпл",УстановитьСостояние("вРаботе","КомплектацияМобил"));
	Запрос.УстановитьТекстовыйПараметр("ПоПоставке",док);
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,л_ИТ);

	Возврат л_ИТ;
КонецФункции

//{***ТП2 комплктации***
Процедура ТП2_Обновить()

//	ВыгрузитьТабличнуюЧасть(Таб,пСтолбцы);
	ТабТП2.Загрузить(ПолучениеЗаявок(рДатаПоставки));

	//Таб.УстановитьПараметрыКолонки("НомерСтроки",,,,"Номер",,,);
	//Таб.УстановитьПараметрыКолонки("ШтрихКод",,,,"Штрих Код",,,);
	//Таб.УстановитьПараметрыКолонки("Количество",,,,"Количество",,,);
	//Таб.УстановитьПараметрыКолонки("ПроблемаНеСоответствиеСпецификации",,,,"Проблема Спецификации",,,);
	//Таб.УстановитьПараметрыКолонки("ПроблемаНесоответствияМаркировкиLV",,,,"Проблема Маркировки LV",,,);
	//Таб.УстановитьПараметрыКолонки("ПроблемаНесоответствияМаркировкиLT",,,,"Проблема Маркировки LT",,,);
	//Таб.УстановитьПараметрыКолонки("ПроблемаНесоответствияМаркировкиEE",,,,"Проблема Маркировки ЕE",,,);
	//Таб.УстановитьПараметрыКолонки("ПроблемаОтсутствиеШтрихКода",,,,"Проблема Штрих Кода",,,);
	//Таб.УстановитьПараметрыКолонки("ПроблемаДопустСрокаРеализации",,,,"Проблема Срок Реализации",,,);
	
//	Таб.Сортировать("+НомерЕдиницыКомплекта");
	ТП2.ОбновитьСтроки();
//	ТП.АвтоШирина();
	Форма.Обновить();
КонецПроцедуры


//------------------------------
Процедура тпКнопка2_ПриВыводеСтроки(тп, ОформлениеСтроки, ДанныеСтроки, ТипРегиона)
	Если флСообщения=1 Тогда
		сообщить("ПриВыводеСтроки");
	КонецЕсли;

		
			//Параметры:
	//
	//ОформлениеСтроки - тип: ОформлениеСтроки. Объект для управления оформлением выводимой строки табличного поля. 
	//ДанныеСтроки - тип: ДанныеСтроки. Данные (коллекция значений полей) выводимой строки табличного поля. 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает при выводе (отображении) строки табличного поля.
	
КонецПроцедуры

Процедура тпКнопка2_Выбор(тп, Стр, Колонка, ТипРегиона)
	Если флСообщения=1 Тогда
		сообщить("Выбор");
	КонецЕсли;

//	Таб_ТекущаяСтрока=ТП.ТекущаяСтрока;
//	Таб_ТекущаяКолонка=4;

//	Форма.Закрыть(0);
	
	//Параметры:
	//
	//Строка - тип: определяется поставищком данных. Значение, идентифицирующее строку ТП. 
	//Колонка - тип: КолонкаТабличногоПоля 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает при двойном клике на строке табличного поля, или нажатии клавиши Enter.
	
	//зн = тпСклады.ТекущиеДанные.Получить("Наименование").ТекущийЭлемент();
	//тпСклады.РедактироватьЗначение(1,Колонка,3,зн,0,0,"ВыбРеквизит","0x00000020"); 
	//Форма.ВыбРеквизит.НазначитьТип("Справочник.Склады");
	
КонецПроцедуры


Процедура тпКнопка2_ПриАктивизацииСтроки(тп)
	Если флСообщения=1 Тогда 
		сообщить("ПриАктивизацииСтроки");
	КонецЕсли;
	
//	Таб_ТекущаяСтрока=ТП.ТекущаяСтрока;
//	Таб_ТекущаяКолонка=4;
	
	//ОбновитьКартинки();
	
	//Описание: Возникает, когда любая строка становится текущей.
	
КонецПроцедуры


Процедура тпКнопка2_ПриАктивизацииКолонки(тп)
	Если флСообщения=1 Тогда
		сообщить("ПриАктивизацииКолонки");
	КонецЕсли;
	// Описание: Возникает, когда любая колонка становится текущей.
	
КонецПроцедуры

Процедура тпКнопка2_ПриАктивизацииЯчейки(тп)
	Если флСообщения=1 Тогда
		сообщить("ПриАктивизацииЯчейки");
	КонецЕсли;
	// Описание: Возникает, когда ячейка становится текущей. Порядок прохождения событий: ПриАктивизацииСтроки, ПриАктивизацииКолонки, ПриАктивизацииЯчейки.
	
КонецПроцедуры

Процедура тпКнопка2_ПриВыбореЗаголовка(тп, Колонка)
	Если флСообщения=1 Тогда
		сообщить("ПриВыбореЗаголовка");
	КонецЕсли;
	//Параметры:
	//
	//Колонка - тип: КолонкаТабличногоПоля. Колонка, заголовок которой выбран. 
	//Описание: Возникает, когда пользователь выбирает мышью заголовок колонки.
	
КонецПроцедуры

Процедура тпКнопка2_ПриКонтекстномМеню(тп, ТипРегиона, Колонка, Стр)
	Если флСообщения=1 Тогда
		сообщить("ПриКонтекстномМеню");
	КонецЕсли;
	//Параметры:
	//
	//ТипРегиона - тип: ТипыРегионовТП 
	// ТипыРегионовТП
	// Тип: Перечисление
	// 
	// Значения: 0 - регион не задан 
	// 1 - заголовок 
	// 2 - шапка 
	// 3 - строки (основная часть) 
	// 4 - подвал  
	//
	//Колонка - тип: КолонкаТабличногоПоля. Колонка табличного поля, на которой было вызвано контекстное меню. 
	//Строка - тип: определяется поставищком данных. Значение, идентифицирующее строку ТП. 
	//Описание: Возникает, когда необходимо отобразить контекстное меню.
	
	//тут делаем что надо
КонецПроцедуры

Процедура тпКнопка2_ПриВыбореФлажка(тп, Стр, Колонка, ТипРегиона)
	Если флСообщения=1 Тогда
		сообщить("ПриВыбореФлажка");
	КонецЕсли;
	
	//Параметры:
	//
	//Строка - тип: определяется поставищком данных. Значение, идентифицирующее строку ТП. 
	//Колонка - тип: КолонкаТабличногоПоля 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает, когда пользователь изменяет значение флажка.
	
КонецПроцедуры

Процедура тпКнопка2_НачалоПеретаскивания(тп, ДопустимыеДействия, Значение, Колонка, ТипРегиона, ТипЦели)
	Если флСообщения=1 Тогда
		сообщить("НачалоПеретаскивания");
	КонецЕсли;
	//
	//Параметры:
	//
	//ДопустимыеДействия - тип: Число. (Выход) Список допустимых действий перетаскивания. Список задается как сумма следующих значений:
	//
	//1 - копирование (Copy) 
	//2 - перетаскивание (Move) 
	//4 - связывание (Link) 
	//Значение по-умолчанию 1. Если необходимо разрешить другие действия, нужно изменить значение этого параметра на выходе из обработчика события. Если передать 0, т.е. не определить ни одного действия, Перетаскивание не начнется.
	//
	//Значение - тип: определяется поставщиком данных. (Вход) Значение, идентифицирующее строку табличного поля. (Выход) Значение, которое будет представлять перетаскиваемые данные.
	//
	//Колонка - тип: КолонкаТабличногоПоля
	//
	//ТипРегиона - тип: ТипыРегионовТП
	//
	//ТипЦели - тип: Число. (Выход) Определяет логическую область отображения перетаскиваемых данных в ТП.
	//
	//0 - не задано 
	//1 - ячейка 
	//2 - строка 
	//3 - колонка 
	//Это значение используется для определения области ТП, в которой не нужно формировать события проверки перетаскивания, в том случае когда ЭУ-приемником является то же ТП, что и источник.
	//
	//Описание: Возникает в ЭУ источнике данных, когда пользователь начинает перетаскивание (Drag&Drop).
	
КонецПроцедуры

Процедура тпКнопка2_ОкончаниеПеретаскивания(тп, Действие, Значение, Колонка, ТипРегиона)
	Если флСообщения=1 Тогда
		сообщить("ОкончаниеПеретаскивания");
	КонецЕсли;
	//
	//Параметры:
	//
	//Действие - тип: Число. Действие - результат операции перетаскивания. Допустимые действия:
	//
	//0 - нет действия 
	//1 - копирование (Copy) 
	//2 - перетаскивание (Move) 
	//4 - связывание (Link) 
	//Значение - тип: Любой. Значение, представляющее перетаскиваемые данные. Это значение было задано в событии НачалоПеретаскивания|НачалоПеретаскивания. 
	//Колонка - тип: КолонкаТабличногоПоля 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает в ЭУ источнике данных, когда завершается операция перетаскивания (Drag&Drop).
	//
	//Обычная обработка: в случае операции 2 (перетаскивания или Move) нужно удалить перетаскиваемые данные. В параметре Действие ЭУ источник данных всегда получит одно из тех действий, которое он определил для себя в событии НачалоПеретаскивания / DragStart.
	//
	//Порядок прохождения событий: 
	//НачалоПеретаскивания|НачалоПеретаскивания - в источнике, 
	//ПроверкаПеретаскивания|ПроверкаПеретаскивания - в назначении, 
	//Перетаскивание|Перетаскивание - в назначении, 
	//ОкончаниеПеретаскивания - в источнике. 
КонецПроцедуры

Процедура тпКнопка2_ПроверкаПеретаскивания(тп, Действие, Значение, СтрокаТП, КолонкаТП, ТипРегионаТП, ТипЦели)
	Если флСообщения=1 Тогда
		сообщить("ПроверкаПеретаскивания");
	КонецЕсли;
	//
	//Параметры:
	//
	//Действие - тип: Число. (Выход) Действие которое произойдет при совершении перетаскивания. По-умолчанию 0. Допустимые действия:
	//
	//0 - нет действия 
	//1 - копирование (Copy) 
	//2 - перетаскивание (Move) 
	//4 - связывание (Link) 
	//Значение - тип: Любой. Значение, представляющее перетаскиваемые данные. Это значение было задано в обработчике события НачалоПеретаскивания|НачалоПеретаскивания.
	//
	//СтрокаТП - тип: Любой. Значение представляющее строку табличного поля, в которую идет перетаскивание (находится под курсором). Обеспечивается поставщиком данных.
	//
	//
	//КолонкаТП - тип: КолонкаТабличногоПоля. Колонка табличного поля, в которую идет перетаскивание (находится под курсором). 
	//ТипРегионаТП - тип: ТипыРегионовТП. Тип региона, в который идет перетаскивание. 
	//ТипЦели - тип: Число. (Выход) Определяет логическую область приемника перетаскиваемых данных, которая подсвечивается рамкой. Значение по-умолчанию: если ЭУ источник данных - табличное поле, то значение, заданное в обработчике события НачалоПеретаскивания|НачалоПеретаскивания; если источник данных - некий другой ЭУ, то значение равно 0.
	//
	//0 - не задано 
	//1 - ячейка 
	//2 - строка 
	//3 - колонка 
	//Описание: Возникает в ЭУ назначения перетаскивания для определения действия, которое произойдет при совершении операции перетаскивания. (Drag&Drop)
	//
	//Главное назначение события - проверить возможность совершения операции перетаскивания и определить Действие. Событие возникает всякий раз, когда изменяется строка или колонка ТП. Если строка или колонка не определяются под курсором мыши, то значения соответствующих параметров будут равны пустому значению.
	
КонецПроцедуры

Процедура тпКнопка2_Перетаскивание(тп, Действие, Значение, СтрокаТП, КолонкаТП, ТипРегионаТП)
	Если флСообщения=1 Тогда
		сообщить("Перетаскивание");
	КонецЕсли;
	//
	//Параметры:
	//
	//Действие - тип: Число. Действие, которое нужно выполнить для совершения перетаскивания. Равно значению параметра Действие на выходе из события ПроверкаПеретаскивания / DragCheck. Допустимые действия:
	//
	//1 - копирование (Copy) 
	//2 - перетаскивание (Move) 
	//4 - связывание (Link) 
	//Значение - тип: Любой. Значение, представляющее перетаскиваемые данные. Это значение было задано в обработчике события НачалоПеретаскивания|НачалоПеретаскивания.
	//
	//СтрокаТП - тип: Любой. Значение представляющее строку табличного поля, в которую идет перетаскивание (находится под курсором). Обеспечивается поставщиком данных.
	//
	//
	//КолонкаТП - тип: КолонкаТабличногоПоля. Колонка табличного поля, в которую идет перетаскивание (находится под курсором). 
	//ТипРегионаТП - тип: ТипыРегионовТП. Тип региона, в который идет перетаскивание. 
	//Описание: Возникает в ЭУ назначения, когда совершается операция перетаскивания (Drag&Drop).
	//
	//Если строка или колонка не определяются под курсором мыши, то значения соответствующих параметров будут равны пустому значению.
	
КонецПроцедуры

Процедура тпКнопка2_ПриУничтожении(тп) 
	Если флСообщения=1 Тогда
		сообщить("ПриУничтожении");
	КонецЕсли;
	//Параметры: нет 
	//Описание: Событие вызывается при уничтожении контрола, с которым связано ТП, до уничтожения самого ТП. 
	
КонецПроцедуры

Процедура тпКнопка2_ПриНачалеБыстрогоПоиска(тп, чТипБыстрогоПоиска, чФСО)
	Если флСообщения=1 Тогда
		сообщить("ПриНачалеБыстрогоПоиска");
	КонецЕсли;
	// 
	//Параметры: 
	//чТипБыстрогоПоиска, тип: Число 
	//Тип быстрого поиска: 
	//1 - текстовый быстрый поиск 
	//
	//чФСО, тип: Число 
	//Доступ: чтение и запись
	//
	//Флаг стандартной обработки. Возможные значения для установки: 
	//1 - быстрый поиск разрешен 
	//0 - быстрый поиск запрещен 
	//Значение по умолчанию: 1
	// 
	//Описание: Событие вызывается до инициализации окна быстрого поиска и позволяет управлять разрешением на его создание.
	// 
	
КонецПроцедуры

Процедура тпКнопка2_ПриБыстромПоиске(тп, чТипБыстрогоПоиска, нДанные, чФСО)
	Если флСообщения=1 Тогда
		сообщить("ПриБыстромПоиске");
	КонецЕсли;
	// 
	//Параметры: 
	//чТипБыстрогоПоиска, тип: Число 
	//Тип быстрого поиска: 
	//1 - текстовый быстрый поиск 
	//
	//нДанные, тип: для текстового быстрого поиска - Строка 
	//Доступ: чтение и запись
	//
	//Данные, введенные в окне быстрого поиска
	//
	//
	//чФСО, тип: Число 
	//Флаг стандартной обработки. Возможные значения для установки: 
	//1 - быстрый поиск разрешен 
	//0 - быстрый поиск запрещен 
	//Значение по умолчанию: 1
	// 
	//Описание: Событие вызывается до выполнения системной процедуры быстрого поиска и позволяет организовать специальные алгоритмы поиска.
	//Возможна трансформация данных с последующей системной обработкой, а также полная замена системной обработки на собственную. 
	
КонецПроцедуры

Процедура тпКнопка2_ПриОкончанииБыстрогоПоиска(тп, флРезультат, флПерепозиционировано)
	Если флСообщения=1 Тогда
		сообщить("ПриОкончанииБыстрогоПоиска");
	КонецЕсли;
	// 
	//Параметры: 
	//флРезультат, тип: Число 
	//Причина закрытия окна быстрого поиска. 
	//1 - закрытие клавишей ENTER 
	//0 - отмена быстрого поиска (любым способом) 
	//
	//флПерепозиционировано, тип: Число 
	//Флаг, отражающий факт перепозиционирования непосредственно перед закрытием окна БП 
	//1 - ТП было перепозиционировано 
	//0 - ТП не было перепозиционировано 
	// 
	//Описание: Событие вызывается после закрытия окна быстрого поиска.
	
	
КонецПроцедуры

Процедура тпКнопка2_ПриПеремещенииКолонки(тп, Колонка, чСдвиг, чФСО)
	Если флСообщения=1 Тогда
		сообщить("ПриПеремещенииКолонки");
	КонецЕсли;
	// 
	//Параметры: Колонка, тип: КолонкаТабличногоПоля
	//
	//
	//чСдвиг, тип: Число 
	//Предлагаемый сдвиг колонки
	//
	//
	//чФСО, тип: Число 
	//Флаг стандартной обработки. Возможные значения для установки: 
	//1 - перемещение колонки разрешено 
	//0 - перемещение колонки запрещено 
	//Значение по умолчанию: 1
	// 
	//Описание: Событие вызывается при интерактивном перемещении колонки ТП непосредственно перед выполнением перемещения. 
	
КонецПроцедуры

Процедура тпКнопка2_ПриИзмененииВидимостиКолонки(тп, Колонка, флВидимость, чФСО)
	Если флСообщения=1 Тогда
		сообщить("ПриИзмененииВидимостиКолонки");
	КонецЕсли;
	// 
	//Параметры: Колонка, тип: КолонкаТабличногоПоля
	//
	//
	//флВидимость, тип: Число 
	//Предлагаемое значение флага видимости колонки
	//
	//
	//чФСО, тип: Число 
	//Флаг стандартной обработки. Возможные значения для установки: 
	//1 - изменение видимости колонки разрешено 
	//0 - изменение видимости колонки запрещено 
	//Значение по умолчанию: 1
	// 
	//Описание: Событие вызывается при интерактивном изменении видимости колонки ТП непосредственно перед выполнением изменения видимости. 
	
КонецПроцедуры

Процедура тпКнопка2_ПриИзмененииШириныКолонки(тп)
	Если флСообщения=1 Тогда
		сообщить("ПриИзмененииШириныКолонки");
	КонецЕсли;
	// 
	//Параметры: нет
	// 
	//Описание: Событие вызывается при интерактивном изменении ширины одной или нескольких колонок. 
	
КонецПроцедуры
//------------------------------
Процедура тпКнопка2_ПриРедактированииЗначения(тп,Стр,Кол,Рег,_Знач)
	Если флСообщения=1 Тогда
		сообщить("ПриРедактированииЗначения");
	КонецЕсли;
	
	//Таб.УстановитьЗначение(ТП.ТекущаяСтрока,ТП.ТекущаяКолонка.Имя,_Знач);
    
	//ТП.ОбновитьСтроки();
	
//	Если Кол.Имя="ЦенаИзКатегории" Тогда
//		Если (ДатаДок>=Константа.ДатаНачалаИспользованияПрайсовПоставщиков)
//		И (Номенклатура.ВидНоменклатуры<>Перечисление.ВидыНоменклатуры.Услуга) Тогда
//				
//			ВыбПоставщик=Номенклатура.Поставщик;
//			Если ПустоеЗначение(ВыбПоставщик)=1 Тогда
//				Предупреждение("Не указан поставщик в карточке товара!");
//				СтатусВозврата(0);
//			Иначе
//				Если ВвестиЧисло(БруттоЦена,"Введите брутто цену из каталога",17,2)=1 Тогда
//				Иначе
//					СтатусВозврата(0);
//					Возврат;
//				КонецЕсли;
//				БруттоЦена=_Знач;
//				///
//				Форма.Обновить();
//				ПолучитьСтрокуПоНомеру(СтрокаТЧ);
//				///
//				Спр=СоздатьОбъект("Справочник.ПрайсыПоставщиков");
//				Спр.ИспользоватьВладельца(ВыбПоставщик);
//				Конт=ВыбПоставщик;
//				ОткрытьПодбор("Справочник.ПрайсыПоставщиков",,Конт,0,ПрайсПоставщика);
//				УстановитьЗначениеВПодборе("ВыбБруттоЦена",БруттоЦена);
//			//	ПриРедактированииЦеныИзКатегории();
//			//	ТП_Обновить();
//				СтатусВозврата(0);
//
//			КонецЕсли;
//		КонецЕсли;
//		
//		
//		
////////////		
//		

//	ТП_Обновить();	
	
КонецПроцедуры // ПриРедактированииЗначения(Стр, Кол, Рег, Знач)
//------------------------------

//------------------------------
Процедура ТП2_колонки(ТП)

//	ИмяКолонки="НомерСЕ";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = "Номер товара";
////	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.Видимость = 1;
//	Колонка.Ширина				=20;
//	
//	ИмяКолонки="НомерСК";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = "Номер товара в комплекте";
////	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.Видимость = 1;
//	Колонка.Ширина				=20;
//	
	//ИмяКолонки="НомерКомплекта";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.Видимость = 1;
	
//	ИмяКолонки="Наименование";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = ИмяКолонки;
//	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.ИзменятьВидимость = 0;
	
	
	ИмяКолонки="ПоСчету";
	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	Колонка.Заголовок         = ИмяКолонки;
	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	Колонка.ИзменятьВидимость = 0;
	Колонка.Ширина				=20;
	
	
	
	ИмяКолонки="МестоКомплектации";
	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	Колонка.Заголовок         = ИмяКолонки;
	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	Колонка.ИзменятьВидимость = 0;
	Колонка.Ширина				=20;
	
	ИмяКолонки="Склад";
	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	Колонка.Заголовок         = ИмяКолонки;
	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	Колонка.ИзменятьВидимость = 0;
	Колонка.Ширина				=10;

	//ИмяКолонки="ТовКод";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;

	//ИмяКолонки="ДатаПоставки";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=10;

	ИмяКолонки="ВидЗаявки";
	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	Колонка.Заголовок         = ИмяКолонки;
	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	Колонка.ИзменятьВидимость = 0;
	Колонка.Ширина				=10;

	//
	//ИмяКолонки="ЦенаИзКатегории";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Цена из кат.";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	//
	//ИмяКолонки="Цена";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	//	
	//ИмяКолонки="ЦенаСНДС";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Цена c НДС";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	//
	//
	//ИмяКолонки="ПроцентСкидки";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Скидки";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;	
	//ИмяКолонки="КоличествоНеПодвержденое";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "КолНач";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=10;
	

	//ИмяКолонки="Количество";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "КолФакт";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=10;
	
	//ИмяКолонки="Сумма";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Сумма без НДС";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	//	
	//ИмяКолонки="СуммаНДС";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.Видимость = 0;
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	
	//ИмяКолонки="СуммаНП";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.Видимость = 0;
	//Колонка.ИзменятьВидимость = 0;	
	//Колонка.Ширина				=50;
	//
	//ИмяКолонки="Всего";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Всего";
	//Колонка.Данные            = СокрЛП(Строка(ТП.Колонки.СуммаНДС+ТП.Колонки.Сумма));
	//Колонка.Видимость = 1;
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	////Формат(Сумма+?(СуммаВклНДС=1,0,СуммаНДС)+?(СуммаВклНП=1,0,СуммаНП),"Ч15.2.,")
	//
	//ИмяКолонки="фКартинка1";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Картинка 1";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=18;
	//Колонка.ИзменениеРазмера	=0;
	//
	//ИмяКолонки="фКартинка2";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Картинка 2";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=18;
	//Колонка.ИзменениеРазмера	=0;
	//
	//ИмяКолонки="фКартинка3";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Картинка 3";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=18;
	//Колонка.ИзменениеРазмера	=0;
	
//	ИмяКолонки="НомерСтрокиДокумента";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = ИмяКолонки;
//	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.Видимость = 1;
//	
//
//	
//	ИмяКолонки="НомерЕдиницыКомплекта";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = ИмяКолонки;
//	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.Видимость = 1;

КонецПроцедуры

//////////////////////////////////////////////////////////
Процедура ТП2_Инициализация()
		ОчиститьОкноСообщений();
	
	оФорма = СоздатьОбъект("Форма");
	оФорма.УстановитьФорму(Форма);
	ТП2 = оФорма.СоздатьЭлементУправления("ТабличноеПоле", "тпКнопка2_");
	// свойства ТП
	ТП2.ВертСкроллер = 1; // 0-авто, 1-всегда, 2-никогда
	ТП2.НачальноеПредставление = 0; // 0-с начала, 1-с конца
	ТП2.РежимВыделенияСтроки = 2; // 0-ячейка, 1-строка, 2-строка=ЦветТекстаВыделения2 и ЦветФонаВыделения2
	ТП2.РежимВыделения = 1; // 0-выдел. одной строки, 1-выдел. неск. строк
	ТП2.ВертикальныеЛинии = 1;
	ТП2.ГоризонтальныеЛинии = 1;
	ТП2.ОтображатьЗаголовки = 1;
	ТП2.СтильЗаголовков = 0; // 0-3D, 1-плоский
	ТП2.СтильАктивногоЗаголовка = 1; // 0-не выделяется, 1-выделяется
	ТП2.ТаймаутОбновления = 0; // Х сек, 0-не обновлять автоматически
	ТП2.ТаймаутБыстрогоПоиска = 1000; // Х мсек, 0-автоматически не пытаться
	ТП2.ИзменятьПозициюКолонок = 1;
	//тпСклады.ЦветЛиний = 0; // цвета по умолчанию
	//тпСклады.ЦветТекста = 0;
	//тпСклады.ЦветФона = 0;
	//тпСклады.ЦветТекстаВыделения = 0;
	//тпСклады.ЦветФонаВыделения = 0;
	//тпСклады.ЦветТекстаВыделения2 = 0;
	//тпСклады.ЦветФонаВыделения2 = 0;
	//тпСклады.ЦветФонаЧередованияСтрок = 0; // цвета по умолчанию
	глФабрика = СоздатьОбъект("ФабрикаОбъектов");
	ШрифтАриал10Жирный = глФабрика.Шрифт("Arial", 10, 1);
	ТП2.Шрифт=ШрифтАриал10Жирный;
	ТП2.ЧередованиеЦветовСтрок = 1;
	ТП2.РазрешитьНачалоПеретаскивания = 1; // 1-разрешает ЭУ выступать источником перетаскивания, 0-запрещает
	ТП2.РазрешитьПеретаскивание = 1; // 1-разрешает ЭУ выступать приемником перетаскивания, 0-запрещает
	ТП2.ФиксацияСлева = 0; // кол-во фиксированных колонок
	ТП2.ФиксацияСправа = 0;
	// колонки
	ТП2_колонки(ТП2);
	//// поставщик
	Источник=СоздатьОбъект("ПоставщикДанныхТЗ");
	Источник.УстТаблицуЗначений(ТабТП2);
	ТП2.ПоставщикДанных=Источник;
	
	
//	ТП.ОбновитьСтроки();
	ТП2_Обновить();	
	// быстрый поиск
	//тп.ПоставщикДанных.Поля.Получить("Наименование").ТипБыстрогоПоиска = 1;
	
	// методы
	
//	ТП.АвтоШирина();
	Форма.ПанельИнструментов(0);
КонецПроцедуры


//}***ТП2***

//{***ТП1 комплктации***
//Процедура ТП1_Обновить()
//
////	ВыгрузитьТабличнуюЧасть(Таб,пСтолбцы);
//	ТабТП1.Загрузить(ПолучениеЗаявок(рДатаПоставки));
//
//	//Таб.УстановитьПараметрыКолонки("НомерСтроки",,,,"Номер",,,);
//	//Таб.УстановитьПараметрыКолонки("ШтрихКод",,,,"Штрих Код",,,);
//	//Таб.УстановитьПараметрыКолонки("Количество",,,,"Количество",,,);
//	//Таб.УстановитьПараметрыКолонки("ПроблемаНеСоответствиеСпецификации",,,,"Проблема Спецификации",,,);
//	//Таб.УстановитьПараметрыКолонки("ПроблемаНесоответствияМаркировкиLV",,,,"Проблема Маркировки LV",,,);
//	//Таб.УстановитьПараметрыКолонки("ПроблемаНесоответствияМаркировкиLT",,,,"Проблема Маркировки LT",,,);
//	//Таб.УстановитьПараметрыКолонки("ПроблемаНесоответствияМаркировкиEE",,,,"Проблема Маркировки ЕE",,,);
//	//Таб.УстановитьПараметрыКолонки("ПроблемаОтсутствиеШтрихКода",,,,"Проблема Штрих Кода",,,);
//	//Таб.УстановитьПараметрыКолонки("ПроблемаДопустСрокаРеализации",,,,"Проблема Срок Реализации",,,);
//	
////	Таб.Сортировать("+НомерЕдиницыКомплекта");
//	ТП1.ОбновитьСтроки();
////	ТП.АвтоШирина();
//	Форма.Обновить();
//КонецПроцедуры


//------------------------------
Процедура тпКнопка1_ПриВыводеСтроки(тп, ОформлениеСтроки, ДанныеСтроки, ТипРегиона)
	Если флСообщения=1 Тогда
		сообщить("ПриВыводеСтроки");
	КонецЕсли;

		
			//Параметры:
	//
	//ОформлениеСтроки - тип: ОформлениеСтроки. Объект для управления оформлением выводимой строки табличного поля. 
	//ДанныеСтроки - тип: ДанныеСтроки. Данные (коллекция значений полей) выводимой строки табличного поля. 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает при выводе (отображении) строки табличного поля.
	
КонецПроцедуры

Процедура тпКнопка1_Выбор(тп, Стр, Колонка, ТипРегиона)
	Если флСообщения=1 Тогда
		сообщить("Выбор");
	КонецЕсли;

//	Таб_ТекущаяСтрока=ТП.ТекущаяСтрока;
//	Таб_ТекущаяКолонка=4;

//	Форма.Закрыть(0);
	
	//Параметры:
	//
	//Строка - тип: определяется поставищком данных. Значение, идентифицирующее строку ТП. 
	//Колонка - тип: КолонкаТабличногоПоля 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает при двойном клике на строке табличного поля, или нажатии клавиши Enter.
	
	//зн = тпСклады.ТекущиеДанные.Получить("Наименование").ТекущийЭлемент();
	//тпСклады.РедактироватьЗначение(1,Колонка,3,зн,0,0,"ВыбРеквизит","0x00000020"); 
	//Форма.ВыбРеквизит.НазначитьТип("Справочник.Склады");
	
КонецПроцедуры


Процедура тпКнопка1_ПриАктивизацииСтроки(тп)
	Если флСообщения=1 Тогда 
		сообщить("ПриАктивизацииСтроки");
	КонецЕсли;
	
//	Таб_ТекущаяСтрока=ТП.ТекущаяСтрока;
//	Таб_ТекущаяКолонка=4;
	
	//ОбновитьКартинки();
	
	//Описание: Возникает, когда любая строка становится текущей.
	
КонецПроцедуры


Процедура тпКнопка1_ПриАктивизацииКолонки(тп)
	Если флСообщения=1 Тогда
		сообщить("ПриАктивизацииКолонки");
	КонецЕсли;
	// Описание: Возникает, когда любая колонка становится текущей.
	
КонецПроцедуры

Процедура тпКнопка1_ПриАктивизацииЯчейки(тп)
	Если флСообщения=1 Тогда
		сообщить("ПриАктивизацииЯчейки");
	КонецЕсли;
	// Описание: Возникает, когда ячейка становится текущей. Порядок прохождения событий: ПриАктивизацииСтроки, ПриАктивизацииКолонки, ПриАктивизацииЯчейки.
	
КонецПроцедуры

Процедура тпКнопка1_ПриВыбореЗаголовка(тп, Колонка)
	Если флСообщения=1 Тогда
		сообщить("ПриВыбореЗаголовка");
	КонецЕсли;
	//Параметры:
	//
	//Колонка - тип: КолонкаТабличногоПоля. Колонка, заголовок которой выбран. 
	//Описание: Возникает, когда пользователь выбирает мышью заголовок колонки.
	
КонецПроцедуры

Процедура тпКнопка1_ПриКонтекстномМеню(тп, ТипРегиона, Колонка, Стр)
	Если флСообщения=1 Тогда
		сообщить("ПриКонтекстномМеню");
	КонецЕсли;
	//Параметры:
	//
	//ТипРегиона - тип: ТипыРегионовТП 
	// ТипыРегионовТП
	// Тип: Перечисление
	// 
	// Значения: 0 - регион не задан 
	// 1 - заголовок 
	// 2 - шапка 
	// 3 - строки (основная часть) 
	// 4 - подвал  
	//
	//Колонка - тип: КолонкаТабличногоПоля. Колонка табличного поля, на которой было вызвано контекстное меню. 
	//Строка - тип: определяется поставищком данных. Значение, идентифицирующее строку ТП. 
	//Описание: Возникает, когда необходимо отобразить контекстное меню.
	
	//тут делаем что надо
КонецПроцедуры

Процедура тпКнопка1_ПриВыбореФлажка(тп, Стр, Колонка, ТипРегиона)
	Если флСообщения=1 Тогда
		сообщить("ПриВыбореФлажка");
	КонецЕсли;
	
	//Параметры:
	//
	//Строка - тип: определяется поставищком данных. Значение, идентифицирующее строку ТП. 
	//Колонка - тип: КолонкаТабличногоПоля 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает, когда пользователь изменяет значение флажка.
	
КонецПроцедуры

Процедура тпКнопка1_НачалоПеретаскивания(тп, ДопустимыеДействия, Значение, Колонка, ТипРегиона, ТипЦели)
	Если флСообщения=1 Тогда
		сообщить("НачалоПеретаскивания");
	КонецЕсли;
	//
	//Параметры:
	//
	//ДопустимыеДействия - тип: Число. (Выход) Список допустимых действий перетаскивания. Список задается как сумма следующих значений:
	//
	//1 - копирование (Copy) 
	//2 - перетаскивание (Move) 
	//4 - связывание (Link) 
	//Значение по-умолчанию 1. Если необходимо разрешить другие действия, нужно изменить значение этого параметра на выходе из обработчика события. Если передать 0, т.е. не определить ни одного действия, Перетаскивание не начнется.
	//
	//Значение - тип: определяется поставщиком данных. (Вход) Значение, идентифицирующее строку табличного поля. (Выход) Значение, которое будет представлять перетаскиваемые данные.
	//
	//Колонка - тип: КолонкаТабличногоПоля
	//
	//ТипРегиона - тип: ТипыРегионовТП
	//
	//ТипЦели - тип: Число. (Выход) Определяет логическую область отображения перетаскиваемых данных в ТП.
	//
	//0 - не задано 
	//1 - ячейка 
	//2 - строка 
	//3 - колонка 
	//Это значение используется для определения области ТП, в которой не нужно формировать события проверки перетаскивания, в том случае когда ЭУ-приемником является то же ТП, что и источник.
	//
	//Описание: Возникает в ЭУ источнике данных, когда пользователь начинает перетаскивание (Drag&Drop).
	
КонецПроцедуры

Процедура тпКнопка1_ОкончаниеПеретаскивания(тп, Действие, Значение, Колонка, ТипРегиона)
	Если флСообщения=1 Тогда
		сообщить("ОкончаниеПеретаскивания");
	КонецЕсли;
	//
	//Параметры:
	//
	//Действие - тип: Число. Действие - результат операции перетаскивания. Допустимые действия:
	//
	//0 - нет действия 
	//1 - копирование (Copy) 
	//2 - перетаскивание (Move) 
	//4 - связывание (Link) 
	//Значение - тип: Любой. Значение, представляющее перетаскиваемые данные. Это значение было задано в событии НачалоПеретаскивания|НачалоПеретаскивания. 
	//Колонка - тип: КолонкаТабличногоПоля 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает в ЭУ источнике данных, когда завершается операция перетаскивания (Drag&Drop).
	//
	//Обычная обработка: в случае операции 2 (перетаскивания или Move) нужно удалить перетаскиваемые данные. В параметре Действие ЭУ источник данных всегда получит одно из тех действий, которое он определил для себя в событии НачалоПеретаскивания / DragStart.
	//
	//Порядок прохождения событий: 
	//НачалоПеретаскивания|НачалоПеретаскивания - в источнике, 
	//ПроверкаПеретаскивания|ПроверкаПеретаскивания - в назначении, 
	//Перетаскивание|Перетаскивание - в назначении, 
	//ОкончаниеПеретаскивания - в источнике. 
КонецПроцедуры

Процедура тпКнопка1_ПроверкаПеретаскивания(тп, Действие, Значение, СтрокаТП, КолонкаТП, ТипРегионаТП, ТипЦели)
	Если флСообщения=1 Тогда
		сообщить("ПроверкаПеретаскивания");
	КонецЕсли;
	//
	//Параметры:
	//
	//Действие - тип: Число. (Выход) Действие которое произойдет при совершении перетаскивания. По-умолчанию 0. Допустимые действия:
	//
	//0 - нет действия 
	//1 - копирование (Copy) 
	//2 - перетаскивание (Move) 
	//4 - связывание (Link) 
	//Значение - тип: Любой. Значение, представляющее перетаскиваемые данные. Это значение было задано в обработчике события НачалоПеретаскивания|НачалоПеретаскивания.
	//
	//СтрокаТП - тип: Любой. Значение представляющее строку табличного поля, в которую идет перетаскивание (находится под курсором). Обеспечивается поставщиком данных.
	//
	//
	//КолонкаТП - тип: КолонкаТабличногоПоля. Колонка табличного поля, в которую идет перетаскивание (находится под курсором). 
	//ТипРегионаТП - тип: ТипыРегионовТП. Тип региона, в который идет перетаскивание. 
	//ТипЦели - тип: Число. (Выход) Определяет логическую область приемника перетаскиваемых данных, которая подсвечивается рамкой. Значение по-умолчанию: если ЭУ источник данных - табличное поле, то значение, заданное в обработчике события НачалоПеретаскивания|НачалоПеретаскивания; если источник данных - некий другой ЭУ, то значение равно 0.
	//
	//0 - не задано 
	//1 - ячейка 
	//2 - строка 
	//3 - колонка 
	//Описание: Возникает в ЭУ назначения перетаскивания для определения действия, которое произойдет при совершении операции перетаскивания. (Drag&Drop)
	//
	//Главное назначение события - проверить возможность совершения операции перетаскивания и определить Действие. Событие возникает всякий раз, когда изменяется строка или колонка ТП. Если строка или колонка не определяются под курсором мыши, то значения соответствующих параметров будут равны пустому значению.
	
КонецПроцедуры

Процедура тпКнопка1_Перетаскивание(тп, Действие, Значение, СтрокаТП, КолонкаТП, ТипРегионаТП)
	Если флСообщения=1 Тогда
		сообщить("Перетаскивание");
	КонецЕсли;
	//
	//Параметры:
	//
	//Действие - тип: Число. Действие, которое нужно выполнить для совершения перетаскивания. Равно значению параметра Действие на выходе из события ПроверкаПеретаскивания / DragCheck. Допустимые действия:
	//
	//1 - копирование (Copy) 
	//2 - перетаскивание (Move) 
	//4 - связывание (Link) 
	//Значение - тип: Любой. Значение, представляющее перетаскиваемые данные. Это значение было задано в обработчике события НачалоПеретаскивания|НачалоПеретаскивания.
	//
	//СтрокаТП - тип: Любой. Значение представляющее строку табличного поля, в которую идет перетаскивание (находится под курсором). Обеспечивается поставщиком данных.
	//
	//
	//КолонкаТП - тип: КолонкаТабличногоПоля. Колонка табличного поля, в которую идет перетаскивание (находится под курсором). 
	//ТипРегионаТП - тип: ТипыРегионовТП. Тип региона, в который идет перетаскивание. 
	//Описание: Возникает в ЭУ назначения, когда совершается операция перетаскивания (Drag&Drop).
	//
	//Если строка или колонка не определяются под курсором мыши, то значения соответствующих параметров будут равны пустому значению.
	
КонецПроцедуры

Процедура тпКнопка1_ПриУничтожении(тп) 
	Если флСообщения=1 Тогда
		сообщить("ПриУничтожении");
	КонецЕсли;
	//Параметры: нет 
	//Описание: Событие вызывается при уничтожении контрола, с которым связано ТП, до уничтожения самого ТП. 
	
КонецПроцедуры

Процедура тпКнопка1_ПриНачалеБыстрогоПоиска(тп, чТипБыстрогоПоиска, чФСО)
	Если флСообщения=1 Тогда
		сообщить("ПриНачалеБыстрогоПоиска");
	КонецЕсли;
	// 
	//Параметры: 
	//чТипБыстрогоПоиска, тип: Число 
	//Тип быстрого поиска: 
	//1 - текстовый быстрый поиск 
	//
	//чФСО, тип: Число 
	//Доступ: чтение и запись
	//
	//Флаг стандартной обработки. Возможные значения для установки: 
	//1 - быстрый поиск разрешен 
	//0 - быстрый поиск запрещен 
	//Значение по умолчанию: 1
	// 
	//Описание: Событие вызывается до инициализации окна быстрого поиска и позволяет управлять разрешением на его создание.
	// 
	
КонецПроцедуры

Процедура тпКнопка1_ПриБыстромПоиске(тп, чТипБыстрогоПоиска, нДанные, чФСО)
	Если флСообщения=1 Тогда
		сообщить("ПриБыстромПоиске");
	КонецЕсли;
	// 
	//Параметры: 
	//чТипБыстрогоПоиска, тип: Число 
	//Тип быстрого поиска: 
	//1 - текстовый быстрый поиск 
	//
	//нДанные, тип: для текстового быстрого поиска - Строка 
	//Доступ: чтение и запись
	//
	//Данные, введенные в окне быстрого поиска
	//
	//
	//чФСО, тип: Число 
	//Флаг стандартной обработки. Возможные значения для установки: 
	//1 - быстрый поиск разрешен 
	//0 - быстрый поиск запрещен 
	//Значение по умолчанию: 1
	// 
	//Описание: Событие вызывается до выполнения системной процедуры быстрого поиска и позволяет организовать специальные алгоритмы поиска.
	//Возможна трансформация данных с последующей системной обработкой, а также полная замена системной обработки на собственную. 
	
КонецПроцедуры

Процедура тпКнопка1_ПриОкончанииБыстрогоПоиска(тп, флРезультат, флПерепозиционировано)
	Если флСообщения=1 Тогда
		сообщить("ПриОкончанииБыстрогоПоиска");
	КонецЕсли;
	// 
	//Параметры: 
	//флРезультат, тип: Число 
	//Причина закрытия окна быстрого поиска. 
	//1 - закрытие клавишей ENTER 
	//0 - отмена быстрого поиска (любым способом) 
	//
	//флПерепозиционировано, тип: Число 
	//Флаг, отражающий факт перепозиционирования непосредственно перед закрытием окна БП 
	//1 - ТП было перепозиционировано 
	//0 - ТП не было перепозиционировано 
	// 
	//Описание: Событие вызывается после закрытия окна быстрого поиска.
	
	
КонецПроцедуры

Процедура тпКнопка1_ПриПеремещенииКолонки(тп, Колонка, чСдвиг, чФСО)
	Если флСообщения=1 Тогда
		сообщить("ПриПеремещенииКолонки");
	КонецЕсли;
	// 
	//Параметры: Колонка, тип: КолонкаТабличногоПоля
	//
	//
	//чСдвиг, тип: Число 
	//Предлагаемый сдвиг колонки
	//
	//
	//чФСО, тип: Число 
	//Флаг стандартной обработки. Возможные значения для установки: 
	//1 - перемещение колонки разрешено 
	//0 - перемещение колонки запрещено 
	//Значение по умолчанию: 1
	// 
	//Описание: Событие вызывается при интерактивном перемещении колонки ТП непосредственно перед выполнением перемещения. 
	
КонецПроцедуры

Процедура тпКнопка1_ПриИзмененииВидимостиКолонки(тп, Колонка, флВидимость, чФСО)
	Если флСообщения=1 Тогда
		сообщить("ПриИзмененииВидимостиКолонки");
	КонецЕсли;
	// 
	//Параметры: Колонка, тип: КолонкаТабличногоПоля
	//
	//
	//флВидимость, тип: Число 
	//Предлагаемое значение флага видимости колонки
	//
	//
	//чФСО, тип: Число 
	//Флаг стандартной обработки. Возможные значения для установки: 
	//1 - изменение видимости колонки разрешено 
	//0 - изменение видимости колонки запрещено 
	//Значение по умолчанию: 1
	// 
	//Описание: Событие вызывается при интерактивном изменении видимости колонки ТП непосредственно перед выполнением изменения видимости. 
	
КонецПроцедуры

Процедура тпКнопка1_ПриИзмененииШириныКолонки(тп)
	Если флСообщения=1 Тогда
		сообщить("ПриИзмененииШириныКолонки");
	КонецЕсли;
	// 
	//Параметры: нет
	// 
	//Описание: Событие вызывается при интерактивном изменении ширины одной или нескольких колонок. 
	
КонецПроцедуры
//------------------------------
Процедура тпКнопка1_ПриРедактированииЗначения(тп,Стр,Кол,Рег,_Знач)
	Если флСообщения=1 Тогда
		сообщить("ПриРедактированииЗначения");
	КонецЕсли;
	
	//Таб.УстановитьЗначение(ТП.ТекущаяСтрока,ТП.ТекущаяКолонка.Имя,_Знач);
    
	//ТП.ОбновитьСтроки();
	
//	Если Кол.Имя="ЦенаИзКатегории" Тогда
//		Если (ДатаДок>=Константа.ДатаНачалаИспользованияПрайсовПоставщиков)
//		И (Номенклатура.ВидНоменклатуры<>Перечисление.ВидыНоменклатуры.Услуга) Тогда
//				
//			ВыбПоставщик=Номенклатура.Поставщик;
//			Если ПустоеЗначение(ВыбПоставщик)=1 Тогда
//				Предупреждение("Не указан поставщик в карточке товара!");
//				СтатусВозврата(0);
//			Иначе
//				Если ВвестиЧисло(БруттоЦена,"Введите брутто цену из каталога",17,2)=1 Тогда
//				Иначе
//					СтатусВозврата(0);
//					Возврат;
//				КонецЕсли;
//				БруттоЦена=_Знач;
//				///
//				Форма.Обновить();
//				ПолучитьСтрокуПоНомеру(СтрокаТЧ);
//				///
//				Спр=СоздатьОбъект("Справочник.ПрайсыПоставщиков");
//				Спр.ИспользоватьВладельца(ВыбПоставщик);
//				Конт=ВыбПоставщик;
//				ОткрытьПодбор("Справочник.ПрайсыПоставщиков",,Конт,0,ПрайсПоставщика);
//				УстановитьЗначениеВПодборе("ВыбБруттоЦена",БруттоЦена);
//			//	ПриРедактированииЦеныИзКатегории();
//			//	ТП_Обновить();
//				СтатусВозврата(0);
//
//			КонецЕсли;
//		КонецЕсли;
//		
//		
//		
////////////		
//		

//	ТП_Обновить();	
	
КонецПроцедуры // ПриРедактированииЗначения(Стр, Кол, Рег, Знач)
//------------------------------

//------------------------------
Процедура ТП1_колонки(ТП)

//	ИмяКолонки="НомерСЕ";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = "Номер товара";
////	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.Видимость = 1;
//	Колонка.Ширина				=20;
//	
//	ИмяКолонки="НомерСК";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = "Номер товара в комплекте";
////	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.Видимость = 1;
//	Колонка.Ширина				=20;
//	
	//ИмяКолонки="НомерКомплекта";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.Видимость = 1;
	
//	ИмяКолонки="Наименование";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = ИмяКолонки;
//	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.ИзменятьВидимость = 0;
	
	
	ИмяКолонки="ПоСчету";
	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	Колонка.Заголовок         = ИмяКолонки;
	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	Колонка.ИзменятьВидимость = 0;
	Колонка.Ширина				=20;
	
	
	
	ИмяКолонки="МестоКомплектации";
	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	Колонка.Заголовок         = ИмяКолонки;
	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	Колонка.ИзменятьВидимость = 0;
	Колонка.Ширина				=20;
	
	ИмяКолонки="Склад";
	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	Колонка.Заголовок         = ИмяКолонки;
	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	Колонка.ИзменятьВидимость = 0;
	Колонка.Ширина				=10;

	//ИмяКолонки="ТовКод";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;

	//ИмяКолонки="ДатаПоставки";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=10;

	ИмяКолонки="ВидЗаявки";
	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	Колонка.Заголовок         = ИмяКолонки;
	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	Колонка.ИзменятьВидимость = 0;
	Колонка.Ширина				=10;

	//
	//ИмяКолонки="ЦенаИзКатегории";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Цена из кат.";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	//
	//ИмяКолонки="Цена";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	//	
	//ИмяКолонки="ЦенаСНДС";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Цена c НДС";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	//
	//
	//ИмяКолонки="ПроцентСкидки";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Скидки";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;	
	//ИмяКолонки="КоличествоНеПодвержденое";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "КолНач";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=10;
	

	//ИмяКолонки="Количество";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "КолФакт";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=10;
	
	//ИмяКолонки="Сумма";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Сумма без НДС";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	//	
	//ИмяКолонки="СуммаНДС";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.Видимость = 0;
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	
	//ИмяКолонки="СуммаНП";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.Видимость = 0;
	//Колонка.ИзменятьВидимость = 0;	
	//Колонка.Ширина				=50;
	//
	//ИмяКолонки="Всего";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Всего";
	//Колонка.Данные            = СокрЛП(Строка(ТП.Колонки.СуммаНДС+ТП.Колонки.Сумма));
	//Колонка.Видимость = 1;
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	////Формат(Сумма+?(СуммаВклНДС=1,0,СуммаНДС)+?(СуммаВклНП=1,0,СуммаНП),"Ч15.2.,")
	//
	//ИмяКолонки="фКартинка1";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Картинка 1";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=18;
	//Колонка.ИзменениеРазмера	=0;
	//
	//ИмяКолонки="фКартинка2";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Картинка 2";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=18;
	//Колонка.ИзменениеРазмера	=0;
	//
	//ИмяКолонки="фКартинка3";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Картинка 3";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=18;
	//Колонка.ИзменениеРазмера	=0;
	
//	ИмяКолонки="НомерСтрокиДокумента";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = ИмяКолонки;
//	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.Видимость = 1;
//	
//
//	
//	ИмяКолонки="НомерЕдиницыКомплекта";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = ИмяКолонки;
//	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.Видимость = 1;

КонецПроцедуры

//////////////////////////////////////////////////////////
Процедура ТП1_Инициализация()
		ОчиститьОкноСообщений();
	
	оФорма = СоздатьОбъект("Форма");
	оФорма.УстановитьФорму(Форма);
	ТП1 = оФорма.СоздатьЭлементУправления("ТабличноеПоле", "тпКнопка1_");
	// свойства ТП
	ТП1.ВертСкроллер = 1; // 0-авто, 1-всегда, 2-никогда
	ТП1.НачальноеПредставление = 0; // 0-с начала, 1-с конца
	ТП1.РежимВыделенияСтроки = 2; // 0-ячейка, 1-строка, 2-строка=ЦветТекстаВыделения2 и ЦветФонаВыделения2
	ТП1.РежимВыделения = 1; // 0-выдел. одной строки, 1-выдел. неск. строк
	ТП1.ВертикальныеЛинии = 1;
	ТП1.ГоризонтальныеЛинии = 1;
	ТП1.ОтображатьЗаголовки = 1;
	ТП1.СтильЗаголовков = 0; // 0-3D, 1-плоский
	ТП1.СтильАктивногоЗаголовка = 1; // 0-не выделяется, 1-выделяется
	ТП1.ТаймаутОбновления = 0; // Х сек, 0-не обновлять автоматически
	ТП1.ТаймаутБыстрогоПоиска = 1000; // Х мсек, 0-автоматически не пытаться
	ТП1.ИзменятьПозициюКолонок = 1;
	//тпСклады.ЦветЛиний = 0; // цвета по умолчанию
	//тпСклады.ЦветТекста = 0;
	//тпСклады.ЦветФона = 0;
	//тпСклады.ЦветТекстаВыделения = 0;
	//тпСклады.ЦветФонаВыделения = 0;
	//тпСклады.ЦветТекстаВыделения2 = 0;
	//тпСклады.ЦветФонаВыделения2 = 0;
	//тпСклады.ЦветФонаЧередованияСтрок = 0; // цвета по умолчанию
	глФабрика = СоздатьОбъект("ФабрикаОбъектов");
	ШрифтАриал10Жирный = глФабрика.Шрифт("Arial", 10, 1);
	ТП1.Шрифт=ШрифтАриал10Жирный;
	ТП1.ЧередованиеЦветовСтрок = 1;
	ТП1.РазрешитьНачалоПеретаскивания = 1; // 1-разрешает ЭУ выступать источником перетаскивания, 0-запрещает
	ТП1.РазрешитьПеретаскивание = 1; // 1-разрешает ЭУ выступать приемником перетаскивания, 0-запрещает
	ТП1.ФиксацияСлева = 0; // кол-во фиксированных колонок
	ТП1.ФиксацияСправа = 0;
	// колонки
	ТП1_колонки(ТП1);
	//// поставщик
	Источник=СоздатьОбъект("ПоставщикДанныхТЗ");
	Источник.УстТаблицуЗначений(ТабТП1);
	ТП1.ПоставщикДанных=Источник;
	
	
//	ТП.ОбновитьСтроки();
//	ТП1_Обновить();	
	// быстрый поиск
	//тп.ПоставщикДанных.Поля.Получить("Наименование").ТипБыстрогоПоиска = 1;
	
	// методы
	
//	ТП.АвтоШирина();
	Форма.ПанельИнструментов(0);
КонецПроцедуры


//}***ТП1***

//{***ТП комплктации***
Процедура ТП_Обновить()
	ЗаполнениеТаблицыДокКомпл();
//	ВыгрузитьТабличнуюЧасть(Таб,пСтолбцы);
	
//ТабТП.Загрузить(ПолучениеЗаявок(рДатаПоставки));

	//Таб.УстановитьПараметрыКолонки("НомерСтроки",,,,"Номер",,,);
	//Таб.УстановитьПараметрыКолонки("ШтрихКод",,,,"Штрих Код",,,);
	//Таб.УстановитьПараметрыКолонки("Количество",,,,"Количество",,,);
	//Таб.УстановитьПараметрыКолонки("ПроблемаНеСоответствиеСпецификации",,,,"Проблема Спецификации",,,);
	//Таб.УстановитьПараметрыКолонки("ПроблемаНесоответствияМаркировкиLV",,,,"Проблема Маркировки LV",,,);
	//Таб.УстановитьПараметрыКолонки("ПроблемаНесоответствияМаркировкиLT",,,,"Проблема Маркировки LT",,,);
	//Таб.УстановитьПараметрыКолонки("ПроблемаНесоответствияМаркировкиEE",,,,"Проблема Маркировки ЕE",,,);
	//Таб.УстановитьПараметрыКолонки("ПроблемаОтсутствиеШтрихКода",,,,"Проблема Штрих Кода",,,);
	//Таб.УстановитьПараметрыКолонки("ПроблемаДопустСрокаРеализации",,,,"Проблема Срок Реализации",,,);
	
//	Таб.Сортировать("+НомерЕдиницыКомплекта");
	ТП.ОбновитьСтроки();
//	ТП.АвтоШирина();
	Форма.Обновить();
КонецПроцедуры

//------------------------------
Процедура тпКнопка_ПриВыводеСтроки(тп, ОформлениеСтроки, ДанныеСтроки, ТипРегиона)
	Если флСообщения=1 Тогда
		сообщить("ПриВыводеСтроки");
	КонецЕсли;

		
			//Параметры:
	//
	//ОформлениеСтроки - тип: ОформлениеСтроки. Объект для управления оформлением выводимой строки табличного поля. 
	//ДанныеСтроки - тип: ДанныеСтроки. Данные (коллекция значений полей) выводимой строки табличного поля. 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает при выводе (отображении) строки табличного поля.
	
КонецПроцедуры

Процедура тпКнопка_Выбор(тп, Стр, Колонка, ТипРегиона)
	Если флСообщения=1 Тогда
		сообщить("Выбор");
	КонецЕсли;

//	Таб_ТекущаяСтрока=ТП.ТекущаяСтрока;
//	Таб_ТекущаяКолонка=4;

//	Форма.Закрыть(0);
	
	//Параметры:
	//
	//Строка - тип: определяется поставищком данных. Значение, идентифицирующее строку ТП. 
	//Колонка - тип: КолонкаТабличногоПоля 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает при двойном клике на строке табличного поля, или нажатии клавиши Enter.
	
	//зн = тпСклады.ТекущиеДанные.Получить("Наименование").ТекущийЭлемент();
	//тпСклады.РедактироватьЗначение(1,Колонка,3,зн,0,0,"ВыбРеквизит","0x00000020"); 
	//Форма.ВыбРеквизит.НазначитьТип("Справочник.Склады");
	
КонецПроцедуры


Процедура тпКнопка_ПриАктивизацииСтроки(тп)
	Если флСообщения=1 Тогда 
		сообщить("ПриАктивизацииСтроки");
	КонецЕсли;
	ТабТП_ТекСтр=ТП.ТекущаяСтрока;
//	Таб_ТекущаяСтрока=ТП.ТекущаяСтрока;
//	Таб_ТекущаяКолонка=4;
	
	//ОбновитьКартинки();
	
	//Описание: Возникает, когда любая строка становится текущей.
	
КонецПроцедуры


Процедура тпКнопка_ПриАктивизацииКолонки(тп)
	Если флСообщения=1 Тогда
		сообщить("ПриАктивизацииКолонки");
	КонецЕсли;
	// Описание: Возникает, когда любая колонка становится текущей.
	
КонецПроцедуры

Процедура тпКнопка_ПриАктивизацииЯчейки(тп)
	Если флСообщения=1 Тогда
		сообщить("ПриАктивизацииЯчейки");
	КонецЕсли;
	// Описание: Возникает, когда ячейка становится текущей. Порядок прохождения событий: ПриАктивизацииСтроки, ПриАктивизацииКолонки, ПриАктивизацииЯчейки.
	
КонецПроцедуры

Процедура тпКнопка_ПриВыбореЗаголовка(тп, Колонка)
	Если флСообщения=1 Тогда
		сообщить("ПриВыбореЗаголовка");
	КонецЕсли;
	//Параметры:
	//
	//Колонка - тип: КолонкаТабличногоПоля. Колонка, заголовок которой выбран. 
	//Описание: Возникает, когда пользователь выбирает мышью заголовок колонки.
	
КонецПроцедуры

Процедура тпКнопка_ПриКонтекстномМеню(тп, ТипРегиона, Колонка, Стр)
	Если флСообщения=1 Тогда
		сообщить("ПриКонтекстномМеню");
	КонецЕсли;
	//Параметры:
	//
	//ТипРегиона - тип: ТипыРегионовТП 
	// ТипыРегионовТП
	// Тип: Перечисление
	// 
	// Значения: 0 - регион не задан 
	// 1 - заголовок 
	// 2 - шапка 
	// 3 - строки (основная часть) 
	// 4 - подвал  
	//
	//Колонка - тип: КолонкаТабличногоПоля. Колонка табличного поля, на которой было вызвано контекстное меню. 
	//Строка - тип: определяется поставищком данных. Значение, идентифицирующее строку ТП. 
	//Описание: Возникает, когда необходимо отобразить контекстное меню.
	
	//тут делаем что надо
КонецПроцедуры

Процедура тпКнопка_ПриВыбореФлажка(тп, Стр, Колонка, ТипРегиона)
	Если флСообщения=1 Тогда
		сообщить("ПриВыбореФлажка");
	КонецЕсли;
	
	//Параметры:
	//
	//Строка - тип: определяется поставищком данных. Значение, идентифицирующее строку ТП. 
	//Колонка - тип: КолонкаТабличногоПоля 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает, когда пользователь изменяет значение флажка.
	
КонецПроцедуры

Процедура тпКнопка_НачалоПеретаскивания(тп, ДопустимыеДействия, Значение, Колонка, ТипРегиона, ТипЦели)
	Если флСообщения=1 Тогда
		сообщить("НачалоПеретаскивания");
	КонецЕсли;
	//
	//Параметры:
	//
	//ДопустимыеДействия - тип: Число. (Выход) Список допустимых действий перетаскивания. Список задается как сумма следующих значений:
	//
	//1 - копирование (Copy) 
	//2 - перетаскивание (Move) 
	//4 - связывание (Link) 
	//Значение по-умолчанию 1. Если необходимо разрешить другие действия, нужно изменить значение этого параметра на выходе из обработчика события. Если передать 0, т.е. не определить ни одного действия, Перетаскивание не начнется.
	//
	//Значение - тип: определяется поставщиком данных. (Вход) Значение, идентифицирующее строку табличного поля. (Выход) Значение, которое будет представлять перетаскиваемые данные.
	//
	//Колонка - тип: КолонкаТабличногоПоля
	//
	//ТипРегиона - тип: ТипыРегионовТП
	//
	//ТипЦели - тип: Число. (Выход) Определяет логическую область отображения перетаскиваемых данных в ТП.
	//
	//0 - не задано 
	//1 - ячейка 
	//2 - строка 
	//3 - колонка 
	//Это значение используется для определения области ТП, в которой не нужно формировать события проверки перетаскивания, в том случае когда ЭУ-приемником является то же ТП, что и источник.
	//
	//Описание: Возникает в ЭУ источнике данных, когда пользователь начинает перетаскивание (Drag&Drop).
	
КонецПроцедуры

Процедура тпКнопка_ОкончаниеПеретаскивания(тп, Действие, Значение, Колонка, ТипРегиона)
	Если флСообщения=1 Тогда
		сообщить("ОкончаниеПеретаскивания");
	КонецЕсли;
	//
	//Параметры:
	//
	//Действие - тип: Число. Действие - результат операции перетаскивания. Допустимые действия:
	//
	//0 - нет действия 
	//1 - копирование (Copy) 
	//2 - перетаскивание (Move) 
	//4 - связывание (Link) 
	//Значение - тип: Любой. Значение, представляющее перетаскиваемые данные. Это значение было задано в событии НачалоПеретаскивания|НачалоПеретаскивания. 
	//Колонка - тип: КолонкаТабличногоПоля 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает в ЭУ источнике данных, когда завершается операция перетаскивания (Drag&Drop).
	//
	//Обычная обработка: в случае операции 2 (перетаскивания или Move) нужно удалить перетаскиваемые данные. В параметре Действие ЭУ источник данных всегда получит одно из тех действий, которое он определил для себя в событии НачалоПеретаскивания / DragStart.
	//
	//Порядок прохождения событий: 
	//НачалоПеретаскивания|НачалоПеретаскивания - в источнике, 
	//ПроверкаПеретаскивания|ПроверкаПеретаскивания - в назначении, 
	//Перетаскивание|Перетаскивание - в назначении, 
	//ОкончаниеПеретаскивания - в источнике. 
КонецПроцедуры

Процедура тпКнопка_ПроверкаПеретаскивания(тп, Действие, Значение, СтрокаТП, КолонкаТП, ТипРегионаТП, ТипЦели)
	Если флСообщения=1 Тогда
		сообщить("ПроверкаПеретаскивания");
	КонецЕсли;
	//
	//Параметры:
	//
	//Действие - тип: Число. (Выход) Действие которое произойдет при совершении перетаскивания. По-умолчанию 0. Допустимые действия:
	//
	//0 - нет действия 
	//1 - копирование (Copy) 
	//2 - перетаскивание (Move) 
	//4 - связывание (Link) 
	//Значение - тип: Любой. Значение, представляющее перетаскиваемые данные. Это значение было задано в обработчике события НачалоПеретаскивания|НачалоПеретаскивания.
	//
	//СтрокаТП - тип: Любой. Значение представляющее строку табличного поля, в которую идет перетаскивание (находится под курсором). Обеспечивается поставщиком данных.
	//
	//
	//КолонкаТП - тип: КолонкаТабличногоПоля. Колонка табличного поля, в которую идет перетаскивание (находится под курсором). 
	//ТипРегионаТП - тип: ТипыРегионовТП. Тип региона, в который идет перетаскивание. 
	//ТипЦели - тип: Число. (Выход) Определяет логическую область приемника перетаскиваемых данных, которая подсвечивается рамкой. Значение по-умолчанию: если ЭУ источник данных - табличное поле, то значение, заданное в обработчике события НачалоПеретаскивания|НачалоПеретаскивания; если источник данных - некий другой ЭУ, то значение равно 0.
	//
	//0 - не задано 
	//1 - ячейка 
	//2 - строка 
	//3 - колонка 
	//Описание: Возникает в ЭУ назначения перетаскивания для определения действия, которое произойдет при совершении операции перетаскивания. (Drag&Drop)
	//
	//Главное назначение события - проверить возможность совершения операции перетаскивания и определить Действие. Событие возникает всякий раз, когда изменяется строка или колонка ТП. Если строка или колонка не определяются под курсором мыши, то значения соответствующих параметров будут равны пустому значению.
	
КонецПроцедуры

Процедура тпКнопка_Перетаскивание(тп, Действие, Значение, СтрокаТП, КолонкаТП, ТипРегионаТП)
	Если флСообщения=1 Тогда
		сообщить("Перетаскивание");
	КонецЕсли;
	//
	//Параметры:
	//
	//Действие - тип: Число. Действие, которое нужно выполнить для совершения перетаскивания. Равно значению параметра Действие на выходе из события ПроверкаПеретаскивания / DragCheck. Допустимые действия:
	//
	//1 - копирование (Copy) 
	//2 - перетаскивание (Move) 
	//4 - связывание (Link) 
	//Значение - тип: Любой. Значение, представляющее перетаскиваемые данные. Это значение было задано в обработчике события НачалоПеретаскивания|НачалоПеретаскивания.
	//
	//СтрокаТП - тип: Любой. Значение представляющее строку табличного поля, в которую идет перетаскивание (находится под курсором). Обеспечивается поставщиком данных.
	//
	//
	//КолонкаТП - тип: КолонкаТабличногоПоля. Колонка табличного поля, в которую идет перетаскивание (находится под курсором). 
	//ТипРегионаТП - тип: ТипыРегионовТП. Тип региона, в который идет перетаскивание. 
	//Описание: Возникает в ЭУ назначения, когда совершается операция перетаскивания (Drag&Drop).
	//
	//Если строка или колонка не определяются под курсором мыши, то значения соответствующих параметров будут равны пустому значению.
	
КонецПроцедуры

Процедура тпКнопка_ПриУничтожении(тп) 
	Если флСообщения=1 Тогда
		сообщить("ПриУничтожении");
	КонецЕсли;
	//Параметры: нет 
	//Описание: Событие вызывается при уничтожении контрола, с которым связано ТП, до уничтожения самого ТП. 
	
КонецПроцедуры

Процедура тпКнопка_ПриНачалеБыстрогоПоиска(тп, чТипБыстрогоПоиска, чФСО)
	Если флСообщения=1 Тогда
		сообщить("ПриНачалеБыстрогоПоиска");
	КонецЕсли;
	// 
	//Параметры: 
	//чТипБыстрогоПоиска, тип: Число 
	//Тип быстрого поиска: 
	//1 - текстовый быстрый поиск 
	//
	//чФСО, тип: Число 
	//Доступ: чтение и запись
	//
	//Флаг стандартной обработки. Возможные значения для установки: 
	//1 - быстрый поиск разрешен 
	//0 - быстрый поиск запрещен 
	//Значение по умолчанию: 1
	// 
	//Описание: Событие вызывается до инициализации окна быстрого поиска и позволяет управлять разрешением на его создание.
	// 
	
КонецПроцедуры

Процедура тпКнопка_ПриБыстромПоиске(тп, чТипБыстрогоПоиска, нДанные, чФСО)
	Если флСообщения=1 Тогда
		сообщить("ПриБыстромПоиске");
	КонецЕсли;
	// 
	//Параметры: 
	//чТипБыстрогоПоиска, тип: Число 
	//Тип быстрого поиска: 
	//1 - текстовый быстрый поиск 
	//
	//нДанные, тип: для текстового быстрого поиска - Строка 
	//Доступ: чтение и запись
	//
	//Данные, введенные в окне быстрого поиска
	//
	//
	//чФСО, тип: Число 
	//Флаг стандартной обработки. Возможные значения для установки: 
	//1 - быстрый поиск разрешен 
	//0 - быстрый поиск запрещен 
	//Значение по умолчанию: 1
	// 
	//Описание: Событие вызывается до выполнения системной процедуры быстрого поиска и позволяет организовать специальные алгоритмы поиска.
	//Возможна трансформация данных с последующей системной обработкой, а также полная замена системной обработки на собственную. 
	
КонецПроцедуры

Процедура тпКнопка_ПриОкончанииБыстрогоПоиска(тп, флРезультат, флПерепозиционировано)
	Если флСообщения=1 Тогда
		сообщить("ПриОкончанииБыстрогоПоиска");
	КонецЕсли;
	// 
	//Параметры: 
	//флРезультат, тип: Число 
	//Причина закрытия окна быстрого поиска. 
	//1 - закрытие клавишей ENTER 
	//0 - отмена быстрого поиска (любым способом) 
	//
	//флПерепозиционировано, тип: Число 
	//Флаг, отражающий факт перепозиционирования непосредственно перед закрытием окна БП 
	//1 - ТП было перепозиционировано 
	//0 - ТП не было перепозиционировано 
	// 
	//Описание: Событие вызывается после закрытия окна быстрого поиска.
	
	
КонецПроцедуры

Процедура тпКнопка_ПриПеремещенииКолонки(тп, Колонка, чСдвиг, чФСО)
	Если флСообщения=1 Тогда
		сообщить("ПриПеремещенииКолонки");
	КонецЕсли;
	// 
	//Параметры: Колонка, тип: КолонкаТабличногоПоля
	//
	//
	//чСдвиг, тип: Число 
	//Предлагаемый сдвиг колонки
	//
	//
	//чФСО, тип: Число 
	//Флаг стандартной обработки. Возможные значения для установки: 
	//1 - перемещение колонки разрешено 
	//0 - перемещение колонки запрещено 
	//Значение по умолчанию: 1
	// 
	//Описание: Событие вызывается при интерактивном перемещении колонки ТП непосредственно перед выполнением перемещения. 
	
КонецПроцедуры

Процедура тпКнопка_ПриИзмененииВидимостиКолонки(тп, Колонка, флВидимость, чФСО)
	Если флСообщения=1 Тогда
		сообщить("ПриИзмененииВидимостиКолонки");
	КонецЕсли;
	// 
	//Параметры: Колонка, тип: КолонкаТабличногоПоля
	//
	//
	//флВидимость, тип: Число 
	//Предлагаемое значение флага видимости колонки
	//
	//
	//чФСО, тип: Число 
	//Флаг стандартной обработки. Возможные значения для установки: 
	//1 - изменение видимости колонки разрешено 
	//0 - изменение видимости колонки запрещено 
	//Значение по умолчанию: 1
	// 
	//Описание: Событие вызывается при интерактивном изменении видимости колонки ТП непосредственно перед выполнением изменения видимости. 
	
КонецПроцедуры

Процедура тпКнопка_ПриИзмененииШириныКолонки(тп)
	Если флСообщения=1 Тогда
		сообщить("ПриИзмененииШириныКолонки");
	КонецЕсли;
	// 
	//Параметры: нет
	// 
	//Описание: Событие вызывается при интерактивном изменении ширины одной или нескольких колонок. 
	
КонецПроцедуры
//------------------------------
Процедура тпКнопка_ПриРедактированииЗначения(тп,Стр,Кол,Рег,_Знач)
	Если флСообщения=1 Тогда
		сообщить("ПриРедактированииЗначения");
	КонецЕсли;
	
	//Таб.УстановитьЗначение(ТП.ТекущаяСтрока,ТП.ТекущаяКолонка.Имя,_Знач);
    
	//ТП.ОбновитьСтроки();
	
//	Если Кол.Имя="ЦенаИзКатегории" Тогда
//		Если (ДатаДок>=Константа.ДатаНачалаИспользованияПрайсовПоставщиков)
//		И (Номенклатура.ВидНоменклатуры<>Перечисление.ВидыНоменклатуры.Услуга) Тогда
//				
//			ВыбПоставщик=Номенклатура.Поставщик;
//			Если ПустоеЗначение(ВыбПоставщик)=1 Тогда
//				Предупреждение("Не указан поставщик в карточке товара!");
//				СтатусВозврата(0);
//			Иначе
//				Если ВвестиЧисло(БруттоЦена,"Введите брутто цену из каталога",17,2)=1 Тогда
//				Иначе
//					СтатусВозврата(0);
//					Возврат;
//				КонецЕсли;
//				БруттоЦена=_Знач;
//				///
//				Форма.Обновить();
//				ПолучитьСтрокуПоНомеру(СтрокаТЧ);
//				///
//				Спр=СоздатьОбъект("Справочник.ПрайсыПоставщиков");
//				Спр.ИспользоватьВладельца(ВыбПоставщик);
//				Конт=ВыбПоставщик;
//				ОткрытьПодбор("Справочник.ПрайсыПоставщиков",,Конт,0,ПрайсПоставщика);
//				УстановитьЗначениеВПодборе("ВыбБруттоЦена",БруттоЦена);
//			//	ПриРедактированииЦеныИзКатегории();
//			//	ТП_Обновить();
//				СтатусВозврата(0);
//
//			КонецЕсли;
//		КонецЕсли;
//		
//		
//		
////////////		
//		

//	ТП_Обновить();	
	
КонецПроцедуры // ПриРедактированииЗначения(Стр, Кол, Рег, Знач)
//------------------------------

//------------------------------
Процедура ТП_колонки(ТП)

//	ИмяКолонки="НомерСЕ";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = "Номер товара";
////	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.Видимость = 1;
//	Колонка.Ширина				=20;
//	
//	ИмяКолонки="НомерСК";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = "Номер товара в комплекте";
////	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.Видимость = 1;
//	Колонка.Ширина				=20;
//	
	//ИмяКолонки="НомерКомплекта";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.Видимость = 1;
	
//	ИмяКолонки="Наименование";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = ИмяКолонки;
//	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.ИзменятьВидимость = 0;
	
	
	ИмяКолонки="ПоСчету";
	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	Колонка.Заголовок         = ИмяКолонки;
	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	Колонка.ИзменятьВидимость = 0;
	Колонка.Ширина				=20;
	
	
	
	ИмяКолонки="СтатусДок";
	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	Колонка.Заголовок         = ИмяКолонки;
	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	Колонка.ИзменятьВидимость = 0;
	Колонка.Ширина				=10;
	
	ИмяКолонки="Склад";
	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	Колонка.Заголовок         = ИмяКолонки;
	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	Колонка.ИзменятьВидимость = 0;
	Колонка.Ширина				=10;

	ИмяКолонки="ДокКомпл";
	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	Колонка.Заголовок         = ИмяКолонки;
	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	Колонка.ИзменятьВидимость = 0;
	Колонка.Ширина				=20;
	
	//ИмяКолонки="ТовКод";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;

	//ИмяКолонки="ДатаПоставки";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=10;

	ИмяКолонки="ВидЗаявки";
	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	Колонка.Заголовок         = ИмяКолонки;
	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	Колонка.ИзменятьВидимость = 0;
	Колонка.Ширина				=10;

	//
	//ИмяКолонки="ЦенаИзКатегории";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Цена из кат.";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	//
	//ИмяКолонки="Цена";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	//	
	//ИмяКолонки="ЦенаСНДС";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Цена c НДС";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	//
	//
	//ИмяКолонки="ПроцентСкидки";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Скидки";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;	
	//ИмяКолонки="КоличествоНеПодвержденое";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "КолНач";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=10;
	

	//ИмяКолонки="Количество";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "КолФакт";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=10;
	
	//ИмяКолонки="Сумма";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Сумма без НДС";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	//	
	//ИмяКолонки="СуммаНДС";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.Видимость = 0;
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	
	//ИмяКолонки="СуммаНП";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.Видимость = 0;
	//Колонка.ИзменятьВидимость = 0;	
	//Колонка.Ширина				=50;
	//
	//ИмяКолонки="Всего";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Всего";
	//Колонка.Данные            = СокрЛП(Строка(ТП.Колонки.СуммаНДС+ТП.Колонки.Сумма));
	//Колонка.Видимость = 1;
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	////Формат(Сумма+?(СуммаВклНДС=1,0,СуммаНДС)+?(СуммаВклНП=1,0,СуммаНП),"Ч15.2.,")
	//
	//ИмяКолонки="фКартинка1";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Картинка 1";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=18;
	//Колонка.ИзменениеРазмера	=0;
	//
	//ИмяКолонки="фКартинка2";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Картинка 2";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=18;
	//Колонка.ИзменениеРазмера	=0;
	//
	//ИмяКолонки="фКартинка3";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Картинка 3";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=18;
	//Колонка.ИзменениеРазмера	=0;
	
//	ИмяКолонки="НомерСтрокиДокумента";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = ИмяКолонки;
//	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.Видимость = 1;
//	
//
//	
//	ИмяКолонки="НомерЕдиницыКомплекта";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = ИмяКолонки;
//	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.Видимость = 1;

КонецПроцедуры

//////////////////////////////////////////////////////////
Процедура ТП_Инициализация()
		ОчиститьОкноСообщений();
	
	оФорма = СоздатьОбъект("Форма");
	оФорма.УстановитьФорму(Форма);
	ТП = оФорма.СоздатьЭлементУправления("ТабличноеПоле", "тпКнопка_");
	// свойства ТП
	ТП.ВертСкроллер = 1; // 0-авто, 1-всегда, 2-никогда
	ТП.НачальноеПредставление = 0; // 0-с начала, 1-с конца
	ТП.РежимВыделенияСтроки = 2; // 0-ячейка, 1-строка, 2-строка=ЦветТекстаВыделения2 и ЦветФонаВыделения2
	ТП.РежимВыделения = 1; // 0-выдел. одной строки, 1-выдел. неск. строк
	ТП.ВертикальныеЛинии = 1;
	ТП.ГоризонтальныеЛинии = 1;
	ТП.ОтображатьЗаголовки = 1;
	ТП.СтильЗаголовков = 0; // 0-3D, 1-плоский
	ТП.СтильАктивногоЗаголовка = 1; // 0-не выделяется, 1-выделяется
	ТП.ТаймаутОбновления = 0; // Х сек, 0-не обновлять автоматически
	ТП.ТаймаутБыстрогоПоиска = 1000; // Х мсек, 0-автоматически не пытаться
	ТП.ИзменятьПозициюКолонок = 1;
	//тпСклады.ЦветЛиний = 0; // цвета по умолчанию
	//тпСклады.ЦветТекста = 0;
	//тпСклады.ЦветФона = 0;
	//тпСклады.ЦветТекстаВыделения = 0;
	//тпСклады.ЦветФонаВыделения = 0;
	//тпСклады.ЦветТекстаВыделения2 = 0;
	//тпСклады.ЦветФонаВыделения2 = 0;
	//тпСклады.ЦветФонаЧередованияСтрок = 0; // цвета по умолчанию
	глФабрика = СоздатьОбъект("ФабрикаОбъектов");
	ШрифтАриал10Жирный = глФабрика.Шрифт("Arial", 18, 1);
	ТП.Шрифт=ШрифтАриал10Жирный;
	ТП.ЧередованиеЦветовСтрок = 1;
	ТП.РазрешитьНачалоПеретаскивания = 1; // 1-разрешает ЭУ выступать источником перетаскивания, 0-запрещает
	ТП.РазрешитьПеретаскивание = 1; // 1-разрешает ЭУ выступать приемником перетаскивания, 0-запрещает
	ТП.ФиксацияСлева = 0; // кол-во фиксированных колонок
	ТП.ФиксацияСправа = 0;
	// колонки
	ТП_колонки(ТП);
	//// поставщик
	Источник=СоздатьОбъект("ПоставщикДанныхТЗ");
	Источник.УстТаблицуЗначений(ТабТП);
	ТП.ПоставщикДанных=Источник;
	
	
//	ТП.ОбновитьСтроки();
	ТП_Обновить();	
	// быстрый поиск
	//тп.ПоставщикДанных.Поля.Получить("Наименование").ТипБыстрогоПоиска = 1;
	
	// методы
	
//	ТП.АвтоШирина();
	Форма.ПанельИнструментов(0);
КонецПроцедуры


//}***ТП***


//}***Комплектация***

Функция ПроверкаПриема(пТекущийДокПоставки,пКомплектовщик="")
	Перем текст;
	
	пДок=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос=СоздатьОбъект("ODBCRecordSet");
	
	Если пКомплектовщик="" Тогда
		текст="";
	Иначе
		текст="|AND ($ПрихНаклМобил.Комплектовщик = :Комплектовщик)";
		Запрос.УстановитьТекстовыйПараметр("Комплектовщик",пКомплектовщик);
	КонецЕсли;
	
	//Если пПроведен=0 Тогда
	//	текст2="|	AND (Журнал.ISMARK = 0)";
	//ИначеЕсли пПроведен=1 Тогда	
	//	текст2="|	AND (Журнал.ISMARK = 1)";
	//КонецЕсли;
	
	ТекстЗапроса="SELECT ПрихНаклМобил.IDDOC [Ссылка $Документ.ПрихНаклМобил]
		|FROM _1SJOURN AS Журнал (NOLOCK)
		|	INNER JOIN $Документ.ПрихНаклМобил AS ПрихНаклМобил (NOLOCK) ON Журнал.IDDOC = ПрихНаклМобил.IDDOC
//		+текст2+"
		|	AND ($ПрихНаклМобил.ДокументОснование = $ВидДокумента36.ОжидаемаяПоставка + :ДокОсн)"
		+текст+"
		|";	

	//ТекстЗапроса="SELECT ПрихНаклМобил.IDDOC [Ссылка $Документ.ПрихНаклМобил]
	//	|	, $ПрихНаклМобил.ДокументОснование [ДокументОснование $Документ]
	//	|	, (Журнал.CLOSED & 1) ДокументПроведён
	//	|FROM $Документ.ПрихНаклМобил AS ПрихНаклМобил With (NOLOCK)
	//	|	LEFT OUTER JOIN _1SJOURN AS Журнал With (NOLOCK) ON ПрихНаклМобил.IDDOC = Журнал.IDDOC
	//	|WHERE ($ПрихНаклМобил.ДокументОснование = $ВидДокумента36.ОжидаемаяПоставка + :ДокОсн)
	//	|
	//	|
	//	|"
		
		
	
	Запрос.УстановитьТекстовыйПараметр("ДокОсн",пТекущийДокПоставки);
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,пДок);
	Возврат пДок;
КонецФункции
Функция ЗадачаНаВнешнююКоманду(пДок="",пКомплектовщик,Команда="")
	
	Если Команда="Новый" Тогда
	//	пДок=СоздатьОбъект("Документ.ПрихНаклМобил");
	//	пДок.Новый();
	//	пДок.Записать();
		
		
	//	Док=СоздатьОбъект("Документ.ПрихНаклМобил");
	//	Док.НайтиДокумент(пДок);
		сзПараметр= СоздатьОбъект("СписокЗначений");
			сзПараметр.ДобавитьЗначение(Команда,"Команда");
			сзПараметр.ДобавитьЗначение(пКомплектовщик,"пКомплектовщик");
			сзПараметр.ДобавитьЗначение(ТекущийДокПоставки,"пДокПоставки");
	//		сзПараметр.ДобавитьЗначение(ВзятьКонтекст(ТекущийДокумент()),"Конт");	
		Возврат ОткрытьФормуМодально("Документ.ПрихНаклМобил",сзПараметр);
	ИначеЕсли Команда="Открыть" Тогда
		Возврат ОткрытьФормуМодально(пДок,сзПараметр);
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

//{****Кнопки****
Процедура кнВыбратьДок()
	Перем ИТ;
	
//	ДокОсн = СоздатьОбъект("Документ.ОжидаемаяПоставка");
//	ДокОсн.НайтиПоНомеру("P1OT-00001");
	ИТ=ПроверкаПриема(ТекущийДокПоставки); //Внимание надо ввести комплектовщика.
	//ИТ.Показать();
	НайденДок=ПолучитьПустоеЗначение();
	Если ИТ.КоличествоСтрок()=0 Тогда
		ЗадачаНаВнешнююКоманду(,ТекКомплектовщик,"Новый");//нет документов
	Иначе
		ИТ.ВыбратьСтроки();
		Пока ИТ.ПолучитьСтроку() = 1 Цикл
			ДокументПР=ИТ.ПолучитьЗначение(,1);
			Если ДокументПР.Комплектовщик=ТекКомплектовщик Тогда
				НайденДок=ДокументПР;
				Прервать;
			КонецЕсли;			
		КонецЦикла;		
		
		Если ПустоеЗначение(НайденДок)=0 Тогда
			Док=НайденДок;
			ЗадачаНаВнешнююКоманду(Док,ТекКомплектовщик,"Открыть");//сущесвует такой документ
		Иначе
			//Док=ИТ.ПолучитьЗначение(1,1);
			//ЗадачаНаВнешнююКоманду(Док,ТекКомплектовщик,"Открыть");//сущесвует такой документ
			ЗадачаНаВнешнююКоманду(,ТекКомплектовщик,"Новый");//нет документов
		КонецЕсли;
	КонецЕсли;
	
	НастроитьОкна(0);
	ПередатьФокус = "тпДок_"; 
	Форма.Закрыть(0);

КонецПроцедуры
Процедура кнВыход()
	ТекущийСлой="слОбложка,слШапка";
	Форма.ИспользоватьСлой(ТекущийСлой,2);
КонецПроцедуры
Процедура кнЗакрыть()
	Перем расш;
	Форма.Закрыть(0);
	СтатусВозврата(0);
	ЗавершитьРаботуСистемы(0);
//	расш=СоздатьОбъект("РасширениеФормы");
//	расш.Закрыть();
КонецПроцедуры
//======================================================================
Процедура кнКомпл()
//	Окна = СоздатьОбъект("Окна");
//	Окна.Минимизировать(Форма);	
//	Окна.Максимизировать(Форма);
	
	ТекущийСлой="слКомплектация,слШапка";
	Форма.ИспользоватьСлой(ТекущийСлой,2);
	ПередатьФокус = "тпКнопка_"; 
	Форма.Закрыть(0);
КонецПроцедуры // кнКомпл
Процедура кнПрием()
	ТекущийСлой="слПриемТовара";
	Форма.ИспользоватьСлой(ТекущийСлой,2);
	ПередатьФокус = "тпДок_"; 
	Форма.Закрыть(0);

	
КонецПроцедуры
//======================================================================

Процедура кнБольше()
	рДатаПрихода=рДатаПрихода+1;
	Форма.Обновить();
		Форма.тСостояние.Заголовок("Состояние:");
		Форма.тКлиент.Заголовок("Пусто");
	
	ЗаполнитьТПДок(1);
	Форма.Обновить();
КонецПроцедуры

Процедура кнМеньше()
	рДатаПрихода=рДатаПрихода-1;
	
		Форма.тСостояние.Заголовок("Состояние:");
		Форма.тКлиент.Заголовок("Пусто");
	ЗаполнитьТПДок(1);
	Форма.Обновить();
КонецПроцедуры
Процедура кнСнять()

	ИТ=ПроверкаПриема(ТекущийДокПоставки);
	Если ИТ.КоличествоСтрок()>0 Тогда
		
//	КонецЕсли;
	
//	Если глПолучитьСостояниеДокумента(ТекущийДокПоставки)=УстановитьСостояние("ОтЛогиста","ОжидаемаяПоставка") Тогда	

		ДокКомп=СоздатьОбъект("Документ.СостояниеДок");
	//	НайденДокКомпл=0;
	//	ДокПодч=СоздатьОбъект("Документ");
	//	ДокПодч.ВыбратьПодчиненныеДокументы(ТекущийДокумент().ДатаДок,,ТекущийДокумент());
		//	Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
		////		Если (ДокПодч.Вид()="СостояниеДок") И (ДокПодч.Проведен()=1) Тогда
		//		Если ДокПодч.Вид()="СостояниеДок" Тогда
		//			ДокКомп.НайтиДокумент(ДокПодч.ТекущийДокумент());
		//			НайденДокКомпл=1;
		//		КонецЕсли;	
		//	КонецЦикла;	
		//	
	
		ДокКомп.Новый();
		ЗаполнитьШапку(ДокКомп); 
		ДокКомп.ДокументОснование=ТекущийДокПоставки;

		ДокКомп.СостояниеДок=УстановитьСостояние("Принят","ОжидаемаяПоставка");
		ДокКомп.АвтоВремяТекущее();
		ОбъектЗаписать(ДокКомп,);
		ДокКомп.АвтоВремяТекущее();
		ДокКомп.Провести(1);
		ЗаписьЖурналаРегистрации( "Состояние документа "+ДокКомп.НомерДок+" по ожидаемой поставке "+ТекущийДокПоставки.НомерДок,, "Ожидаемая поставка", ТекущийДокПоставки, 2 );
	Иначе
		Предупреждение("Нет приемных документов");
	КонецЕсли;	
	
КонецПроцедуры // кнСнять

//}****Кнопки****

//{****Инвентаризация****
Функция ПоискВСправочнике(пШтрихкод="")//включая подчиненые через выбор элементов
	Перем ИмяРекв,ПрефКода,ШтрихКодДляПоиска;

	ПрефКода=Лев(Строка(пШтрихКод),2); //поиск весового товара
	Вес=0;
	Если (ПрефКода="29") ИЛИ (ПрефКода="28") ИЛИ (ПрефКода="23") ИЛИ (ПрефКода="24")  ИЛИ (ПрефКода="25") Тогда
		//{ Обработка весового товара 
		//формируем строку со штрих-кодом для поиска
		//берем первые 8 чисел и добавляем нулями - такой штрих-код хранится у нас в базе данных
		ШтрихКодДляПоиска=глДополнитьСтрокуП(Лев(пШтрихКод,7),"0",13);
		
		ЧислоВес=Число(Сред(пШтрихКод,8,5));
		Если ЧислоВес<=99 Тогда
			Делитель=10;
		ИначеЕсли ЧислоВес<=999 Тогда
			Делитель=100;
		Иначе
			Делитель=1000;
		КонецЕсли;
		Вес = ЧислоВес/Делитель;
		//} Обработка весового товара
	Иначе
		ШтрихКодДляПоиска=пШтрихКод;
	КонецЕсли;
	
	спрТовар = СоздатьОбъект("Справочник.Номенклатура");
	спрПодч=СоздатьОбъект("Справочник.ШтрихКоды");
	
	ИмяРекв = "Штрихкод";
	ИмяРеквКод = "КодТовара";
	ФлагГлобПоиска = 1; 
	Если спрТовар.НайтиПоРеквизиту(ИмяРекв,СокрЛП(ШтрихКодДляПоиска),ФлагГлобПоиска)=1 Тогда
		Возврат(спрТовар.ТекущийЭлемент());
 	ИначеЕсли спрТовар.НайтиПоРеквизиту(ИмяРеквКод,Прав(СокрЛП(ШтрихКодДляПоиска),7),ФлагГлобПоиска)=1 Тогда
 		Возврат(спрТовар.ТекущийЭлемент());
	ИначеЕсли спрПодч.НайтиПоКоду(СокрЛП(ШтрихКодДляПоиска))=1 Тогда
 		Возврат(спрПодч.ТекущийЭлемент().Владелец);
 	КонецЕсли;	
	// ничего не найдено
	Возврат(ПолучитьПустоеЗначение(спрТовар));
КонецФункции 
Функция ПоискПоШтрихкоду(пШтрихкод="")
	Если ПустоеЗначение(пШтрихкод)=1 Тогда
//		Предупреждение("Штрих кода нет в справочнике",0);
		Возврат(0);
	КонецЕсли;
	
	спрТовар=ПоискВСправочнике(пШтрихкод);	
	Если ПустоеЗначение(спрТовар)=0 Тогда

		текстЗаголовка=пШтрихкод+",| "+спрТовар.Наименование+", "+спрТовар.КодТовара; 
		Форма.тТовар.Заголовок(текстЗаголовка);
		Возврат(1);
	КонецЕсли;
	
	Предупреждение("Штрих кода нет в справочнике",3);
	Возврат(0);
	
КонецФункции
//======================================================================

Процедура кнИнвент()
	ТекущийСлой="слИнвентаризации";
	Форма.ИспользоватьСлой(ТекущийСлой,2);
//	ПередатьФокус = "тпДок_"; 
//	Форма.Закрыть(0);	
КонецПроцедуры // кнИнвент

Процедура кнСканирование()
	ТекущийСлой="слШтрихкод";
	Форма.ИспользоватьСлой(ТекущийСлой,2);
	
КонецПроцедуры // кнСканирование


//======================================================================
Процедура кнВводШтрихкода()
	Перем фПоиска;
	Форма.тТовар.Заголовок("Пусто");
	фПоиска=ПоискПоШтрихкоду(СокрЛП(пвШтрихкод));
	Если фПоиска=1 Тогда
		ТекущийСлой="слИнвентаризации";
		Форма.ИспользоватьСлой(ТекущийСлой,2);
	Иначе
//		ТекущийСлой=слТаблицы;
//		Форма.ИспользоватьСлой(ТекущийСлой,2);
////		Форма.кнМеню.Заголовок("Товар");
//		ПередатьФокус = "тпКнопка_"; 
//		Форма.Закрыть(0);
//		//кнМеню();
//	//	Форма.ИспользоватьСлой(ТекущийСлой,2);
//	//	ТП.ТекущаяСтрока=Таб_ТекущаяСтрока;
//	//	ТП_Обновить();		
	КонецЕсли;;
КонецПроцедуры // кнВводШтрихкода()

Процедура кнСбросШтрихкода()
	пвШтрихкод="";
	ПередатьФокус = "пвШтрихкод"; 
	Форма.Закрыть(0);
КонецПроцедуры
//======================================================================
Процедура кнМеню()
	ТекущийСлой="слОбложка";
	Форма.ИспользоватьСлой(ТекущийСлой,2);
КонецПроцедуры // кнМеню

//======================================================================
Процедура кнЗакрытьслШтрихкод()
	ТекущийСлой="слИнвентаризации";
	Форма.ИспользоватьСлой(ТекущийСлой,2);	
КонецПроцедуры // кнЗакрытьслШтрихкод

//}****Инвентаризация****

Процедура ВыводКлиента(док)
	Перем текстЗаголовка;
	Если ПустоеЗначение(док)=1 Тогда
		текстЗаголовка="Состояние:";
		Форма.тСостояние.Заголовок(текстЗаголовка);
		Форма.тКлиент.Заголовок("Пусто");
		Возврат;
	КонецЕсли;
	ИТ=ПроверкаПриема(док); //непроведеных
//	ИТ.Показать();
//	ИТпроведеных=ПроверкаПриема(док,"",1);
//	ИТпроведеных.Показать();
//	ИТ.Показать();
	текстЗаголовка=Строка(док.ДатаПрихода)+". "+док.Клиент.Наименование;
	Форма.тКлиент.Заголовок(текстЗаголовка);

	Если ИТ.КоличествоСтрок()=0 Тогда
		текстЗаголовка="Состояние: не принят";
	Иначе
		
		ИТ.ВыбратьСтроки();
		Пока ИТ.ПолучитьСтроку() = 1 Цикл
			ДокументПР=ИТ.ПолучитьЗначение(,1);
			Если ДокументПР.Проведен()=1 Тогда
				текстЗаголовка="Состояние: принимается";
				Прервать;
			Иначе
				текстЗаголовка="Состояние: в работе";
			КонецЕсли;			
		КонецЦикла;
	КонецЕсли;
	//Если ИТпроведеных.КоличествоСтрок()>0 Тогда
	//	текстЗаголовка="Состояние: закончен прием";
	//КонецЕсли;

	Форма.тСостояние.Заголовок(текстЗаголовка);

КонецПроцедуры
Процедура НастроитьОкна(Показать=1)
	Перем меню;
	
	Окна = СоздатьОбъект("Окна");
	Окна.ВключитьМодальныйРежим();
	Окна.Максимизировать();
	
	Если Показать<>1 Тогда
		меню = Окна.ПолучитьМеню();
	КонецЕсли;
   
    а="";
 //   меню.ВыбратьЗначение(а);
	стр="";	
	Для Номер = 1 По Меню.РазмерСписка() Цикл
		меню.ПолучитьЗначение(Номер, стр); //получить значение и представление
		Окна.ВидимостьМеню(стр, Показать);
	КонецЦикла;
	Окна.ПоказыватьПанели(Показать);
	Если Показать<>1 Тогда
//		Окна.Минимизировать(Форма);
//		Окна.Максимизировать(Форма);
	КонецЕсли;
	
КонецПроцедуры


//{***ТПДок***

Процедура НастройкаТПДок()
	
	Колонка = тпДок.Колонки.Добавить("Клиент"); Колонка.Данные = "Клиент"; Колонка.Заголовок = "Клиент"; 
	Колонка.ЗнакУпорядочивания = 1;
	Колонка.Ширина=20;

//	Колонка = тпДок.Колонки.Добавить("СостояниеДок"); Колонка.Данные = "СостояниеДок"; Колонка.Заголовок = "Состояние"; 
//	Колонка.ЗнакУпорядочивания = 1;
//	Колонка.Ширина=20;

	
//	Колонка = тпДок.Колонки.Добавить("ДатаП"); Колонка.Данные = "ДатаП"; Колонка.Заголовок = "Дата"; 
////	Колонка.ЗнакУпорядочивания = 1;
//	Колонка.Ширина=20;

//	Колонка = тпДок.Колонки.Добавить("Документ_ном"); Колонка.Данные = "Документ_ном"; Колонка.Заголовок = "ном"; 
//	Колонка.ЗнакУпорядочивания = 1;
//	Колонка.Ширина=20;
	

	
//	Колонка = тпДок.Колонки.Добавить("Ссылка"); Колонка.Данные = "Ссылка"; Колонка.Заголовок = "Документ"; 
//	Колонка.ЗнакУпорядочивания = 1;
//	Колонка.Ширина=20;	
	
КонецПроцедуры
Процедура ЗаполнитьТПДок(Обновить=0)
	
	Если Обновить=0 Тогда
		Источник = СоздатьОбъект("ПоставщикДанныхODBC.MSSQL"); 
		Источник.БазаДанных =  СоздатьОбъект("ODBCDataBase"); 
	КонецЕсли;
	
	
	//ТекстЗапроса="SELECT Журнал.IDDOC as [Документ $Документ]
	//|, NullIf(Cast(Left(Журнал.DATE_TIME_IDDOC, 8) AS datetime), '17530101') as Документ_дата
	//|, $ЗаказПоставщику.Клиент as [Клиент $Справочник.Контрагенты]
	//|, Журнал.DOCNO as Документ_ном
	//|FROM _1SJOURN AS Журнал
	//|INNER JOIN $Документ.ЗаказПоставщику AS ЗаказПоставщику ON Журнал.IDDOC = ЗаказПоставщику.IDDOC
	////|WHERE (Журнал.IDDOCDEF = $ВидДокумента.ЗаказПоставщику)
	////|ORDER BY Cast(Left(Журнал.DATE_TIME_IDDOC, 8) AS datetime) DESC
	//|";
	
	//ТекстЗапроса="SELECT ОжидаемаяПоставка.IDDOC AS [Ссылка $Документ.ОжидаемаяПоставка]
	//|	, NullIf($ОжидаемаяПоставка.ДатаПрихода, '17530101') AS ДатаПрихода
	//|FROM $Документ.ОжидаемаяПоставка AS ОжидаемаяПоставка
	//|WHERE ($ОжидаемаяПоставка.ДатаПрихода >= ?ДатаНач(8)) AND 
	//|($ОжидаемаяПоставка.ДатаПрихода <= ?ДатаКон(8))
	//|";	

	//ТекстЗапроса="SELECT ОжидаемаяПоставка.IDDOC AS [Ссылка $Документ.ОжидаемаяПоставка]
	//|	, NullIf($ОжидаемаяПоставка.ДатаПрихода, '17530101') AS ДатаП
	//|	, $ОжидаемаяПоставка.Клиент AS [Клиент $Справочник.Контрагенты]
	//|	, Журнал.DOCNO AS Документ_ном
	//|FROM _1SJOURN AS Журнал
	//|INNER JOIN $Документ.ОжидаемаяПоставка AS ОжидаемаяПоставка ON Журнал.IDDOC = ОжидаемаяПоставка.IDDOC
	//|WHERE ($ОжидаемаяПоставка.ДатаПрихода >= ?ДатаНач(8)) AND 
	//|($ОжидаемаяПоставка.ДатаПрихода <= ?ДатаКон(8))
	//|";	

	ТекстЗапроса="SELECT СостояниеДокументаОстатки.Док AS [Ссылка $Документ]
	|	, СостояниеДокументаОстатки.СостояниеДок AS [СостояниеДок $Справочник.СостоянияДокументов]
	|	, NullIf($ОжидаемаяПоставка.ДатаПрихода, '17530101') AS ДатаП
	|	, $ОжидаемаяПоставка.Клиент AS [Клиент $Справочник.Контрагенты]
	|	, $СпрК.ПоАлфавиту AS КлиентНаим
//	|	, СостояниеДокументаОстатки.СостояниеДок AS [СостДок $Справочник.СостоянияДокументов]
//	|	, Журнал.DOCNO AS Документ_ном
	|FROM $РегистрОстатки.СостояниеДокумента(,
//	|	LEFT JOIN $Документ.ОжидаемаяПоставка AS ОжидаемаяПоставка ON Док = $ВидДокумента36.ОжидаемаяПоставка + ОжидаемаяПоставка.IDDOC
//	|	LEFT JOIN _1SJOURN AS Журнал ON ОжидаемаяПоставка.IDDOC = Журнал.IDDOC,
	|	,(СостояниеДок =?Сост(14,9))
	|	,Док,) AS СостояниеДокументаОстатки (NOLOCK)
	|LEFT JOIN $Документ.ОжидаемаяПоставка AS ОжидаемаяПоставка (NOLOCK) ON СостояниеДокументаОстатки.Док = $ВидДокумента36.ОжидаемаяПоставка + ОжидаемаяПоставка.IDDOC
//	|LEFT JOIN _1SJOURN AS Журнал ON ОжидаемаяПоставка.IDDOC = Журнал.IDDOC AND Журнал.IDDOCDEF = $ВидДокумента.ОжидаемаяПоставка
	|INNER JOIN $Справочник.Контрагенты AS СпрК (NOLOCK) ON СпрК.ID = $ОжидаемаяПоставка.Клиент
	|WHERE ($ОжидаемаяПоставка.ДатаПрихода = ?ДатаНач(8))
	|";		

	Источник.УстТекстЗапроса(ТекстЗапроса);
	сост=УстановитьСостояние("ОтЛогиста","ОжидаемаяПоставка");
	Источник.Параметры.Установить("Сост",сост);
	Источник.Параметры.Установить("ДатаНач",рДатаПрихода);
	Источник.УстКлючПорядка("КлиентНаим ASC,ДатаП,Ссылка"); 
	Источник.УстИДПоле("Ссылка");	

//	Источник.Параметры.Установить("ДатаНач",рДатаНач);
//	Источник.Параметры.Установить("ДатаКон",рДатаКон);


	
	Поле = Источник.Поля.Добавить("Ссылка");
 	Поле.Автоудаление = 0;
	Поле.ТипБыстрогоПоиска = 1;
	
	Поле = Источник.Поля.Добавить("Клиент");
 	Поле.Автоудаление = 0;
	Поле.ТипБыстрогоПоиска = 1;
	
	//Поле = Источник.Поля.Добавить("Документ_ном");
 	//Поле.Автоудаление = 0;
	//Поле.ТипБыстрогоПоиска = 1;	
	
	Поле = Источник.Поля.Добавить("ДатаП");
 	Поле.Автоудаление = 0;
	Поле.ТипБыстрогоПоиска = 1;

//	Поле = Источник.Поля.Добавить("СостояниеДок");
 //	Поле.Автоудаление = 0;
//	Поле.ТипБыстрогоПоиска = 1;
	

	
	
	тпДок.ТаймаутОбновления  = 30;
	тпДок.РазрешитьПеретаскивание = 0; 
	тпДок.РазрешитьНачалоПеретаскивания= 0; 
	тпДок.РежимВыделенияСтроки = 1;
	тпДок.ИзменятьПозициюКолонок = 0;
	тпДок.РежимВыделенияСтроки = 0;
	
	тпДок.ПоставщикДанных = Источник; 
	тпДок.ПоставщикДанных.Обновить(); 
	тпДок.ОбновитьСтроки();



	
	
КонецПроцедуры

Процедура тпДок_Выбор(_ТП, _Кол, ТипРегиона)
	ТекущийДокПоставки=_Кол;	
	ВыводКлиента(ТекущийДокПоставки);
	
//	ПроверкаПриема(ТекущийДокПоставки);
	
//	Форма.кнМеню.Заголовок("Таблица");
//	ТекущийСлой="СлойТП,Кнопки,слТовар";	
//	Форма.ИспользоватьСлой(ТекущийСлой,2);	
//	ТП.ТекущаяСтрока=Таб_ТекущаяСтрока;
//	ТП_Обновить();

//	кнМеню();

	
//	кнМеню();
//	ОткрытьФормуМодально(_Кол,,0);
	ПередатьФокус = "кнВыбратьДок"; 
	Форма.Закрыть(0);

КонецПроцедуры
Процедура тпДок_ПриАктивизацииСтроки(тп)
//	ТекущийДокПоставки=ТП.Клиент;	
//	ВыводКлиента(ТекущийДокПоставки);
//ТекущийДокПоставки = ТП.ДанныеСтроки.Получить("Ссылка");
//ВыводКлиента(ТекущийДокПоставки);
	ТекущийДокПоставки=ТП.ТекущиеДанные.Получить("Ссылка");
	ВыводКлиента(ТекущийДокПоставки);
КонецПроцедуры
//}***ТПДок***


Процедура ПриОткрытии()
	НастроитьПривязки();
	Если ПустоеЗначение(Форма.Параметр)=0 Тогда
		ТекКомплектовщик=Форма.Параметр;
	Иначе
		спр=СоздатьОбъект("Справочник.Комплектовщики");
		стр=123;
		Если спр.НайтиПоРеквизиту("Пароль",стр,1)=1 Тогда
			ТекКомплектовщик = спр.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;
	ТекущийСлой="слОбложка,слШапка";
	Форма.ИспользоватьСлой(ТекущийСлой,2);
	
		
КонецПроцедуры
Процедура ПослеОткрытия()
	
	Если ИмяПользователя() = "Sklad" Тогда
		НастроитьОкна(0);	
	КонецЕсли;
	
	Ф=СоздатьОбъект("Форма");
	Ф.УстановитьФорму(Форма);
	тпДок=Ф.СоздатьЭлементУправления("ТабличноеПоле","тпДок_");
	
	ЗаполнитьТПДок();
	НастройкаТПДок();
	
	Если ИмяПользователя() = "Sklad" Тогда
		НастроитьОкна(0);	
	КонецЕсли;

	ПередатьФокус = "кнПрием"; 
	Форма.Закрыть(0);
	
	гСервис = СоздатьОбъект("Сервис");
	гСервис.ПерехватКлавиатуры(1);
	
	//ТП
	ТП_Инициализация();
//	ТП1_Инициализация();
//	ТП2_Инициализация();
//	ТП_Обновить();

	Если ИмяПользователя() = "Sklad" Тогда
		Окна = СоздатьОбъект("Окна");
		Окна.Максимизировать(Форма);
	КонецЕсли;
	
КонецПроцедуры	

Процедура ПриЗакрытии()
	//{ЛожноеЗакрытие Установить Фокус
	Если ПустоеЗначение(ПередатьФокус) = 0 тогда 
		Активизировать(ПередатьФокус); 
		СтатусВозврата(0); 
		ПередатьФокус = ""; 
		Возврат; 
	КонецЕсли; 
	//}ЛожноеЗакрытие Установить Фокус
	
//	Сервис = СоздатьОбъект("Сервис");
//	Сервис.УдалитьШрифт(МойШрифт);	
	
//	НастроитьОкна(1);
//	Записать();

	Форма.Закрыть(0);
//	СтатусВозврата(0);
//	ЗавершитьРаботуСистемы(0);	
	
	
КонецПроцедуры

//======================================================================

Процедура ПриНажатииКнопкиКлавиатуры(КодКлавиши, Alt, Shift, Ctrl, Символ, ФСО)
	//ФСО = 0;
	Если КодКлавиши = 120 Тогда
		//Если ТекущийСлой=слТовара Тогда
		//	кнНазад();
		//КонецЕсли;
		кнМеньше();
		Форма.Обновить();
	КонецЕсли;
	
	Если КодКлавиши =119 Тогда
		//Если ТекущийСлой=слТовара Тогда
		//	кнВперед();
		//КонецЕсли;	
		кнБольше();
		Форма.Обновить();
	КонецЕсли;


	
//	Форма.тИнфо.Заголовок(КодКлавиши);
//	Форма.Обновить();
КонецПроцедуры

рДатаПоставки=ТекущаяДата();
рДатаПрихода=ТекущаяДата();
ТабТП	=СоздатьОбъект("ТаблицаЗначений");
ТабТП1	=СоздатьОбъект("ТаблицаЗначений");
ТабТП2	=СоздатьОбъект("ТаблицаЗначений");