
///<namespace name = "Классы общего назначения">

///<class name = "Стек"
///Автор = "Диркс Алексей">
класс Стек = классСтек@MD
{
	///<method name = "Положить">
	///<Синтаксис>Положить(Значение)</Синтаксис>
	///<Описание>Положить значение в стек.</Описание>
	///<sig>
	void Положить(Неопределенный Значение);
	///</sig>
	///</method>
	
	///<method name = "Взять" Тип = "Неопределенный">
	///<Синтаксис>Взять()</Синтаксис>
	///<Описание>Возвращает значение с вершины стека, и уменьшает размер стека.</Описание>
	///<returns type = "Неопределенный"></returns>
	///<sig>
	Неопределенный Взять();
	///</sig>
	///</method>
	
	///<method name = "Вершина" Тип = "Неопределенный">
	///<Синтаксис>Вершина()</Синтаксис>
	///<Описание>Возвращает значение с вершины стека. Стек при этом не уменьшается</Описание>
	///<returns type = "Неопределенный"></returns>
	///<sig>
	Неопределенный Вершина();
	///</sig>
	///</method>
	
	///<method name = "Размер" Тип = "Число">
	///<Синтаксис>Размер()</Синтаксис>
	///<Описание>Возвращает текущую глубину стека.</Описание>
	///<returns type = "Число"></returns>
	///<sig>
	Число Размер();
	///</sig>
	///</method>
};
///</class>


///<class name = "ТаблицаСГруппировками"
//{
///Описание = "Класс предназначен для организации таблицы с горизонтальными и вертикальными группировками, которые можно интерактивно сворачивать/разворачивать. Группировки могут быть вложенными. Исходными данными для отрисовки служит плоская таблица с числовыми данными, и структура групп, настраиваемая методами ДобавитьГруппу_..., ДобавитьПоказатель_...
///Для отрисовки классу нужно передать шаблон таблицы, в котором есть горизонтальная секция 'Строка', и вертикальные секции 'Знак', 'ЗаголовокСтроки' и 'Значение'. Установить шаблон таблицы можно примерно так:
///  оТаб.Таблица.ИсходнаяТаблица('МояТаблица');"
///БазовыеКлассы = "ПолеТабличногоДокумента"
///ИспользуетКлассы = "Стек"
///Автор = "Диркс Алексей">
класс ТаблицаСГруппировками = классТаблицаСГруппировками@MD : ПолеТабличногоДокумента
{
	///<method name = "Инит">
	///<Синтаксис>Инит(КонтекстФормы, ИдентификаторРеквизита, тзДанные)</Синтаксис>
	///<Описание>Начальная инициализация объекта. Этот метод должен вызываться в момент, когда форма уже создана (например, в обработчиках событий FormEx ПослеСозданияФормы() или ПослеОткрытия()).</Описание>
	///<param name = "КонтекстФормы" type = "ГрупповойКонтекст">Контекст формы, на которой нужно создать визуальный контрол.</param>
	///<param name = "ИдентификаторРеквизита" type = "Строка">Идентификатор реквизита формы (это должна быть кнопка), на месте которого будет создан визуальный контрол.</param>
	///<param name = "тзДанные" type = "ТаблицаЗначений">Таблица, из которой будут браться данные при визуализации.</param>
	///<sig>
	void Инит(ГрупповойКонтекст КонтекстФормы, Строка ИдентификаторРеквизита, ТаблицаЗначений тзДанные);
	///</sig>
	///</method>
	
	///<method name = "ДобавитьГруппу_Горизонталь" Тип = "Число">
	///<Синтаксис>ДобавитьГруппу_Горизонталь(Идентификатор, Представление, [РазмерШрифта = -1], [ЦветФона = -1])</Синтаксис>
	///<Описание>Добавляет новую горизонтальную группу на текущем уровне дерева. Каждая группа должна иметь свой уникальный идентификатор. Уникальность не контролируется, поэтому надо быть аккуратнее.
	///После заполнения группы обязательно нужно вызвать метод ЗавершитьГруппу_Горизонталь().</Описание>
	///<param name = "Идентификатор" type = "Строка">Идентификатор группы, будет использован для расшифровок.</param>
	///<param name = "Представление" type = "Строка">Представление группы, будет использован при визуализации, в качестве заголовка группы.</param>
	///<param name = "РазмерШрифта" type = "Число">Необязательный параметр. Размер шрифта в пунктах. По умолчанию -1.</param>
	///<param name = "ЦветФона" type = "Число">Необязательный параметр. Цвет фона группы, в формате RGB. По умолчанию -1 - прозрачный цвет.</param>
	///<returns type = "Число">1 - успех, 0 - ошибка</returns>
	///<sig>
	Число ДобавитьГруппу_Горизонталь(Строка Идентификатор, Строка Представление, Число РазмерШрифта = -1, Число ЦветФона = -1);
	///</sig>
	///</method>
	
	///<method name = "ЗавершитьГруппу_Горизонталь" Тип = "Число">
	///<Синтаксис>ЗавершитьГруппу_Горизонталь()</Синтаксис>
	///<Описание>Метод парный к ДобавитьГруппу_Горизонталь(), своего рода 'закрывающая скобка'. Обязательно должен вызываться после завершения формирования раздела.</Описание>
	///<returns type = "Число">1 - успех, 0 - ошибка</returns>
	///<sig>
	Число ЗавершитьГруппу_Горизонталь();
	///</sig>
	///</method>
	
	///<method name = "ДобавитьПоказатель_Горизонталь" Тип = "Число">
	///<Синтаксис>ДобавитьПоказатель_Горизонталь(Идентификатор, Представление, НомерСтрокиДанных, [РазмерШрифта = -1], [ЦветФона = -1])</Синтаксис>
	///<Описание>Добавляет строку с показателем в текущую группу.</Описание>
	///<param name = "Идентификатор" type = "Строка">Идентификатор показателя, будет использован для расшифровок.</param>
	///<param name = "Представление" type = "Строка">Представление показателя, будет использован при визуализации, в качестве заголовка строки.</param>
	///<param name = "НомерСтрокиДанных" type = "Число">Номер строки в таблице данных, из которой нужно брать информацию для этого показателя.</param>
	///<param name = "РазмерШрифта" type = "Число">Необязательный параметр. Размер шрифта в пунктах. По умолчанию -1.</param>
	///<param name = "ЦветФона" type = "Число">Необязательный параметр. Цвет фона строки, в формате RGB. По умолчанию -1 - прозрачный цвет.</param>
	///<returns type = "Число">1 - успех, 0 - ошибка</returns>
	///<sig>
	Число ДобавитьПоказатель_Горизонталь(Строка Идентификатор, Строка Представление, Число НомерСтрокиДанных, Число РазмерШрифта = -1, Число ЦветФона = -1);
	///</sig>
	///</method>
	
	///<method name = "ДобавитьГруппу_Вертикаль" Тип = "Число">
	///<Синтаксис>ДобавитьГруппу_Вертикаль(Идентификатор, Представление, [РазмерШрифта = -1], [ЦветФона = -1)]</Синтаксис>
	///<Описание>Аналогичен методу ДобавитьГруппу_Горизонталь().</Описание>
	///<returns type = "Число">1 - успех, 0 - ошибка</returns>
	///<sig>
	Число ДобавитьГруппу_Вертикаль(Строка Идентификатор, Строка Представление, Число РазмерШрифта = -1, Число ЦветФона = -1);
	///</sig>
	///</method>
	
	///<method name = "ЗавершитьГруппу_Вертикаль" Тип = "Число">
	///<Синтаксис>ЗавершитьГруппу_Вертикаль()</Синтаксис>
	///<Описание>Аналогичен методу ЗавершитьГруппу_Горизонталь().</Описание>
	///<returns type = "Число">1 - успех, 0 - ошибка</returns>
	///<sig>
	Число ЗавершитьГруппу_Вертикаль();
	///</sig>
	///</method>
	
	///<method name = "ДобавитьПоказатель_Вертикаль" Тип = "Число">
	///<Синтаксис>ДобавитьПоказатель_Вертикаль(Идентификатор, Представление, НомерКолонкиДанных)</Синтаксис>
	///<Описание>Аналогичен методу ДобавитьПоказатель_Горизонталь().</Описание>
	///<returns type = "Число">1 - успех, 0 - ошибка</returns>
	///<sig>
	Число ДобавитьПоказатель_Вертикаль(Строка Идентификатор, Строка Представление, Число НомерКолонкиДанных);
	///</sig>
	///</method>
	
	///<method name = "РассчитатьИтоги_Горизонталь">
	///<Синтаксис>РассчитатьИтоги_Горизонталь()</Синтаксис>
	///<Описание>Формирует вспомогательную таблицу с итогами. Метод должен вызываться пере первой отрисовкой, и при изменениях в таблице с данными.</Описание>
	///<sig>
	void РассчитатьИтоги();
	///</sig>
	///</method>
	
	///<method name = "Показать" Тип = "Число">
	///<Синтаксис>Показать()</Синтаксис>
	///<Описание>Полная отрисовка таблицы. При отрисовки таблицы в ячейки записываются расшифровки, чтобы их можно было использовать в процедуре ОбработкаЯчейкиТаблицы().
	///Типы ячеек, и расшифровки к ним:
	///   - ячейка с данными: 'Яч' + РазделительСтрок + НомерСтрокиДанных + РазделительСтрок + НомерКолонкиДанных;
	///   - заголовок горизонтальной группы: 'Грп' + РазделительСтрок + ИдентификаторГруппы, где ИдентификаторГруппы складывается из префикса 'ГорГрп' и полного пути к группе (например 'ГорГрп/Группа1/Группа1_1');
	///   - заголовок вертикальной группы: 'Грп' + РазделительСтрок + ИдентификаторГруппы, где ИдентификаторГруппы складывается из префикса 'ВертГрп' и полного пути к группе (например 'ВертГрп/ГруппаВ1/ГруппаВ1_1');
	///   - ячейка с символом разворачивания по всем горизонтальным группам заданного уровня: 'ГорГрпВсе' + РазделительСтрок + Уровень;
	///   - ячейка с символом разворачивания по всем вертикальным группам заданного уровня: 'ГорГрпВсе' + РазделительСтрок + Уровень;
	///   - ячейка с символом разворачивания для всей таблицы: 'ГрпВсе'
	///</Описание>
	///<returns type = "Число">1 - успех, 0 - ошибка</returns>
	///<sig>
	Число Показать();
	///</sig>
	///</method>
	
	///<method name = "СвернутьВсе_Горизонталь">
	///<Синтаксис>СвернутьВсе_Горизонталь(Уровень)</Синтаксис>
	///<Описание>Сворачивает все горизонтальные группы заданного уровня</Описание>
	///<sig>
	void СвернутьВсе_Горизонталь(Число Уровень);
	///</sig>
	///</method>
	
	///<method name = "РазвернутьВсе_Горизонталь">
	///<Синтаксис>РазвернутьВсе_Горизонталь(Уровень)</Синтаксис>
	///<Описание>Разворачивает все горизонтальные группы заданного уровня</Описание>
	///<sig>
	void РазвернутьВсе_Горизонталь(Число Уровень);
	///</sig>
	///</method>
	
	///<method name = "СвернутьВсе_Вертикаль">
	///<Синтаксис>СвернутьВсе_Вертикаль(Уровень)</Синтаксис>
	///<Описание>Сворачивает все вертикальные группы заданного уровня</Описание>
	///<sig>
	void СвернутьВсе_Вертикаль(Число Уровень);
	///</sig>
	///</method>
	
	///<method name = "РазвернутьВсе_Вертикаль">
	///<Синтаксис>РазвернутьВсе_Вертикаль(Уровень)</Синтаксис>
	///<Описание>Разворачивает все вертикальные группы заданного уровня</Описание>
	///<sig>
	void РазвернутьВсе_Вертикаль(Число Уровень);
	///</sig>
	///</method>
	
	///<method name = "СвернутьВсе">
	///<Синтаксис>СвернутьВсе()</Синтаксис>
	///<Описание>Сворачивает все горизонтальные и вертикальные группы.</Описание>
	///<sig>
	void СвернутьВсе();
	///</sig>
	///</method>

	///<method name = "РазвернутьВсе">
	///<Синтаксис>РазвернутьВсе()</Синтаксис>
	///<Описание>Разворачивает все горизонтальные и вертикальные группы.</Описание>
	///<sig>
	void РазвернутьВсе();
	///</sig>
	///</method>

	///<method name = "ПереключитьСостояние" Тип = "Число">
	///<Синтаксис>ПереключитьСостояние(ПолныйПутьКУзлу)</Синтаксис>
	///<Описание>Переключение состояния указанной группы (свернуто/развернуто). Перерисовка таблицы при этом не происходит, и нужно вызывать её явно.</Описание>
	///<returns type = "Число">-1 - ошибка, или узел является терминальным. 0 или 1 - состояние узла после выполнения метода.</returns>
	///<param name = "ПолныйПутьКУзлу" type = "Строка">Полный путь к узлу, состоящий из идентификаторов групп, разделенных символом '/'. Первым элементом пути должен быть 'Гор' или 'Верт'. Обычно путь берётся из расшифровки ячейки, при двойном клике на неё. Расшифровки заполняются методом Показать().</param>
	///<sig>
	Число ПереключитьСостояние(Строка ПолныйПутьКУзлу);
	///</sig>
	///</method>
	
	///<method name = "ПереключитьСостояниеВсе_Горизонталь">
	///<Синтаксис>ПереключитьСостояниеВсе_Горизонталь(Уровень)</Синтаксис>
	///<Описание>Переключает состояние всех горизонтальных групп заданного уровня</Описание>
	///<sig>
	Число ПереключитьСостояниеВсе_Горизонталь(Число Уровень);
	///</sig>
	///</method>
	
	///<method name = "ПереключитьСостояниеВсе_Вертикаль">
	///<Синтаксис>ПереключитьСостояниеВсе_Вертикаль(Уровень)</Синтаксис>
	///<Описание>Переключает состояние всех вертикальных групп заданного уровня</Описание>
	///<sig>
	Число ПереключитьСостояниеВсе_Вертикаль(Число Уровень);
	///</sig>
	///</method>
	
	///<method name = "ПереключитьСостояниеВсе">
	///<Синтаксис>ПереключитьСостояниеВсе()</Синтаксис>
	///<Описание>Сворачивает/разворачивает все группы.</Описание>
	///<sig>
	Число ПереключитьСостояниеВсе();
	///</sig>
	///</method>
};
///</class>
//}


класс Общие.Форма.Привязки3 = классОбщиеФормаПривязки3@MD : РасширениеФормы
{
	Число Добавить(Строка ИмяАтр, ...);
	Число Привязка(Строка ИмяАтр, ...);
	void МинимальныеРазмеры(Строка ИмяАтр, Число МинШирина = -1, Число МинВысота = -1);
	void КонтролироватьРазмеры(Строка ИмяАтр, Число флаг);
	void ДобавитьВертСплиттер(Строка стрАтрибутСплиттер, Строка стрАтрибутыСлева, Строка стрАтрибутыСправа, Число Ширина = 5);
	void ДобавитьГорСплиттер(Строка стрАтрибутСплиттер, Строка стрАтрибутыСверху, Строка стрАтрибутыСнизу, Число Высота = 5);
	ИндексированнаяТаблица СостояниеСплиттеров();
	void ВосстановитьСостояниеСплиттеров(Неопределенный итСостояние);
	void ПриНажатииЛевойКнопки(Число Сост, Число ЛевоМ, Число ВерхМ, Неопределенный ФСО = 0);
	void ПриОтжатииЛевойКнопки(Число Сост, Число ЛевоМ, Число ВерхМ, Неопределенный ФСО = 0);
	void ПриДвиженииМыши(Число Сост, Число ЛевоМ, Число ВерхМ, Неопределенный ФСО = 0);
};


///</namespace>

