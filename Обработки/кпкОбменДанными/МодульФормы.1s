// - нужно предусмотреть выгрузку нескольких документов группы кладовщиков; При этом в РМК должна работать фильтрация документов при авторизации

Перем Дата1, Дата2;
Перем Версия;		//версия обработки обмена данными
Перем КПКОбъект;
Перем КаталогPPC;	//каталог хранния файлов для КПК
Перем СписокЗащитыОтЗацикливания;

Перем ЗагруженV7Plus;   
Перем V7SysInfo;

Перем Т_;	//символ табуляции

////////////////////////////////////////////////////////////////////////////////////////////
//Идентификаторы для загрузки/выгрузки данных
//

//////////////////
//Идентификаторы для тега Ref_System (константы)
Перем GUID_SYSTEM_AGENTNAME;
Перем GUID_SYSTEM_AGENTID;
Перем GUID_SYSTEM_FIRMID;
Перем GUID_SYSTEM_MSTOREID;
Перем GUID_SYSTEM_SHDATEBG;
Перем GUID_SYSTEM_SHDATEND;
Перем GUID_SYSTEM_TIMEUNLD;
Перем GUID_SYSTEM_DISCOUNTS;
Перем GUID_SYSTEM_AMNTPRECISION;
Перем GUID_SYSTEM_MONEYNAME;
Перем GUID_SYSTEM_FLAGS;
Перем GUID_SYSTEM_PRICECOUNT;
Перем GUID_SYSTEM_VATRATE;
Перем GUID_SYSTEM_TIMEDLVDISP;
Перем GUID_SYSTEM_DSCNTRECISION;
Перем GUID_SYSTEM_PRICEPACKTIME;
Перем GUID_SYSTEM_AUTHOR_TEL;
Перем GUID_SYSTEM_GOODS_PICT_PATH;
Перем GUID_SYSTEM_WEIGHT_UNIT;
Перем GUID_SYSTEM_MERCH; 
Перем GUID_SYSTEM_USE_UNITS;
Перем GUID_SYSTEM_PHOTOS_PATH; 
Перем GUID_SYSTEM_GPSTRACK_TIME; 
Перем GUID_SYSTEM_MINPRICECODE; 
Перем GUID_SYSTEM_DOCFLAGS;
Перем GUID_SYSTEM_PRICEFLAGS;
Перем GUID_SYSTEM_PRLFLAGS;
Перем GUID_SYSTEM_SAVESCRIPT;
Перем GUID_SYSTEM_UDATA_PATH;
Перем GUID_SYSTEM_SELROUTESONLY;
Перем GUID_SYSTEM_ROUTEDAYS_BACK;
Перем GUID_SYSTEM_ROUTEDAYS_FWD;

//////////////////
//Предопределенные идентификаторы тега Ref_AttrTypes
Перем GUID_ATTRTYP_COMMENT;	
Перем GUID_ATTRTYP_PAYMNTTYPE;
Перем GUID_ATTRTYP_PRICETYPE;
Перем GUID_ATTRTYP_GOODSPROP;
Перем GUID_ATTRTYP_GOODSCAT;
Перем GUID_ATTRTYP_QUERY;
Перем GUID_ENUM_CLIENTS_COLORS;
Перем GUID_ENUM_CLIENTS_WARNINGS;
Перем GUID_ENUM_DOC_CAT;
Перем GUID_ENUM_DOC_CAT_COLORS;     
Перем GUID_ENUM_PLAN_OF_SALES_TYPES; 
Перем GUID_ENUM_ACDISCOUNTS;    
Перем GUID_SYSTEM_SUMPREC;
Перем GUID_ENUM_CLIENTS_TPOINTS_CAT;
Перем GUID_ENUM_RATINGCAT;          
Перем GUID_SYSTEM_RATINGNAME;
Перем GUID_SYSTEM_CLIENTINFOSCRIPT;
Перем GUID_SYSTEM_TPOINTINFOSCRIPT;
Перем GUID_SYSTEM_DOCINFOSCRIPT;      
Перем GUID_SYSTEM_DIVPERIOD;
Перем GUID_SYSTEM_MSG_PATH;
Перем GUID_SYSTEM_GPSTRACK;
Перем GUID_SYSTEM_UNITSCOUNT;
Перем GUID_SYSTEM_ROUTE_FLAGS;  
Перем GUID_SYSTEM_PLANBYGOODSEL;
Перем GUID_SYSTEM_PRICE_TRANSCYCLE; 
Перем GUID_SYSTEM_PRICECODES_LIST;
Перем GUID_SYSTEM_EXCHFLAGS;  
Перем GUID_SYSTEM_USE_AGREEMENTS;
	
//////////////////
//Идентификаторы перечислений, добавляемых программистом исходя из особенностей задачи.
//Количество таких перечислений не ограничено.
Перем MY_GUID_ENUM_TPTYPE;   // перечисление "Вид торговой точки"(задействован в справочнике торговых точек)
Перем MY_GUID_ENUM_DLVTYPE;  // перечисление "Вид доставки"(задействован в документе "Заявка")
Перем MY_GUID_ENUM_VISIT;    // перечисление "Результат посещения" (задействован в документе "Посещение")
Перем MY_GUID_ENUM_GTD;		 // перечисление "Номер ГТД"
Перем MY_GUID_ENUM_STRANA;	 // перечисление "Страны-производители"

//////////////////
//Идентификаторы скриптов
Перем GUID_SCRIPT_CLIENTINFO;	//идентификатор скрипта для окна информации о клиенте
Перем GUID_SCRIPT_TPOINTINFO;	//идентификатор скрипта для окна информации о торговой точке

//
//Идентификаторы для загрузки/выгрузки данных
////////////////////////////////////////////////////////////////////////////////////////////

Перем АгентИнфо;

//Для ускорения загрузки/выгрузки данных заранее создаются объекты для следующих переменных:
Перем м_ДокРН;
Перем м_ДокПН;
Перем м_ДокИнв;
Перем м_ДокМерч;
Перем м_ДокПКО;
Перем м_ДокРКО;
Перем м_ДокПосещ;
Перем м_ДокЗадание;
Перем м_ДокПоиска;

Перем м_СпрАгенты;
Перем м_СпрФирм;
Перем м_СпрКл;
Перем м_СпрТТ;
Перем м_СпрСк;
Перем м_СпрТов;
Перем м_СпрЕд;
Перем м_СпрТипЦен;
Перем м_СпрКпкДок; //*
Перем м_СпрПосещ;
Перем м_СпрЗапросы;
Перем м_СпрФото;

//Виды документов в КПК (тип - "Строка"):
Перем АПВидДокЗаявка;
Перем АПВидДокРеализация;
Перем АПВидДокРеализацияР;
Перем АПВидДокСчетФ;
Перем АПВидДокПКО;
Перем АПВидДокРКО;
Перем АПВидДокМерч;
Перем АПВидДокПосещение;
Перем АПВидДокПеремещение;
Перем АПВидДокПоступление;
Перем АПВидДокИнвентаризация;

Перем списСоотвВидовДок; //список соответствий видов документов Агент+ и ЦБД (тип - "СписокЗначений")

//Переменные для почты
Перем ПочтаДата1,ПочтаДата2; //интервал получаемых писем в почте
Перем ЗначениеПометки, ЗначениеНеПометки; 

Перем ТаблицаКатегорий;   
Перем ИспТочек;      
Перем РежимЕд;  
Перем СписКлиентовАгента;  
Перем ПапкаЛога;     
Перем КоличествоПопыток;   
Перем ПаузаМеждуПопытками; 
Перем ОтветитьНаЗапрос;
Перем СписокИдФотоЗаданий;
Перем ТипОбмена;   
Перем тзТипыЦен;   
Перем ПланАгента;
       
//////////////////////////
Перем МобильноеПриложение; 
Перем ВидАгентПлюс15, ВидАгентПлюсМТ;  
Перем DOMDocument, rootNode;  
Перем НастройкиАгента;  
Перем ИспГПС;

Перем ИдФактАдрес;  
Перем ИдЮрАдрес;	
Перем ИдТелефон;    			
Перем ИдАдресТТ;		
Перем ИдРабочийТелефонКЛ;
Перем ИдМобильныйТелефонКЛ;
Перем ИдАдресЭлПочтыКЛ; 
Перем СписокТиповКИ;  
Перем СоответствиеСпрЗагр;
Перем СоответствиеДокЗагр;

Перем СписокКлиентов; 
Перем СписокТТ; 
Перем СписокКЛ;
Перем ВалютаАгента;
Перем СписокАгентов;
////////////////////////////
//                   
Функция ВыгрузитьДанныеНаАПСервер(Агент, ОтветнаяВыгрузка = 0) Далее
//Функция ВыгрузитьДанныеНаФТП(Агент)  Далее   
Функция ВыполнитьОперациюДляОбъекта(Объект, ВидОперации) Далее       
Функция XMLЗагрузитьДанныеДляМобильнойТорговли(ФайлЗагрузки,ВыбАгент) Далее  

Процедура УстановитьМобильноеПриложение(Агент) Далее      
Процедура ВыгрузитьДанныеДляМобильнойТорговли() Далее  
Процедура ВыгрузитьПодтверждения(РодительскийУзел, ЗаписатьОбъявление = 0) Далее    
//Процедура ВыгрузитьПодтвержденияСправочников(РодительскийУзел) Далее   
Функция ПолучитьОбъектПоИдентификатору(ИмяСпр, Ид) Далее
Процедура кнОбновитьИзАПСервераВыбор() Далее
//******************************************************************************      
Процедура ДобавитьЗаписьВЛогОбмена(ТекстСообщения = "", СсылкаНаОбъект = "", ТипСобытия = "")
		             
	СпрЛог = СоздатьОбъект("Справочник.кпкИсторияОбменаДанными");
	
	СпрЛог.Новый();      
	
	Если ТипСобытия = "" Тогда
		стрТипСобытия = "Обычное";
	ИначеЕсли ТипСобытия = "i" Тогда           
		стрТипСобытия = "Информация"; 
	ИначеЕсли ТипСобытия = "!" Тогда           
		стрТипСобытия = "Внимание";
	ИначеЕсли ТипСобытия = "!!" Тогда           
		стрТипСобытия = "Важное"; 
	ИначеЕсли ТипСобытия = "!!!" Тогда           
		стрТипСобытия = "Ошибка";
	КонецЕсли;

	СпрЛог.Наименование   = стрТипСобытия;
	СпрЛог.Дата           = ТекущаяДата(); 
	СпрЛог.Время          = ТекущееВремя();
	СпрЛог.ТекстСобытия   = ТекстСообщения;
	СпрЛог.Пользователь   = Пользователь;
	СпрЛог.Агент          = АгентИнфо;  
	СпрЛог.ТипОбмена      = ТипОбмена; 
	
	Если СсылкаНаОбъект <> "" Тогда	              
		ТипЗнач = ТипЗначенияСтр(СсылкаНаОбъект);					
		СпрЛог.НазначитьТип("СсылкаНаОбъект", ТипЗнач + "." + СсылкаНаОбъект.Вид());  
		Если ТипЗнач = "Документ" Тогда
			СпрЛог.СсылкаНаОбъект = СсылкаНаОбъект.ТекущийДокумент();  
		Иначе                                                          
			СпрЛог.СсылкаНаОбъект = СсылкаНаОбъект.ТекущийЭлемент();  
		КонецЕсли;
	КонецЕсли;  	
	
	Если ВыполнитьОперациюДляОбъекта(СпрЛог, "запись") = 0 Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры //ДобавитьЗаписьВЛогОбмена()

//******************************************************************************
//Процедура оповещения пользователей о событиях обмена
Процедура ОповеститьОСобытии(ТекстСообщения, ВидСообщения = "", ОтражатьВЛоге = 1, Ссылка = "")
	
	Сообщить(ТекстСообщения, ВидСообщения);
	
	Если ОтражатьВЛоге = 1 Тогда
		ДобавитьЗаписьВЛогОбмена(ТекстСообщения, Ссылка, ВидСообщения);
	КонецЕсли;
	
КонецПроцедуры   

//******************************************************************************
Процедура СформироватьОтчетПоИсторииОбмена()   
	
	Попытка 
		
		Отчет = "кпкИсторияОбменаДанными";
		
		Если Метаданные.Отчет(Отчет).Выбран() = 1 Тогда
			ОткрытьФорму("Отчет." + Отчет, Контекст);    		
		Иначе
			ИмяФайла = СокрЛП(ВРег(Отчет));
			Пока ФС.СуществуетФайл(ИмяФайла) = 0 Цикл 
				Если Прав(ИмяФайла,4) <> ".ERT" Тогда
					ИмяФайла = ИмяФайла + ".ERT";
				ИначеЕсли Найти(ИмяФайла, "EXTFORMS\") = 0 Тогда
					ИмяФайла = КаталогИБ() + "EXTFORMS\" + ИмяФайла;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;     
			
			Если ФС.СуществуетФайл(ИмяФайла) = 1 Тогда
				ОткрытьФорму("Отчет#", Контекст, ИмяФайла);
			КонецЕсли   			
		КонецЕсли;  		

	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры //СформироватьОтчетПоИсторииОбмена()    
//
//******************************************************************************
Процедура ОткрытьСписокЗагруженныхДокументов()         
	
	СписокОтбор = СоздатьОбъект("СписокЗначений");
	
	СписокОтбор.ДобавитьЗначение(ТекущаяДата(), "ДатаДок"); 
	СписокОтбор.ДобавитьЗначение(ВыбАгент,      "АгентАвтор");
	 
	ОткрытьФорму("Обработка.кпкСписокЗагруженныхДокументовСКПК", СписокОтбор);
	
КонецПроцедуры //ОткрытьСписокЗагруженныхДокументов() 

////******************************************************************************
//Функция ВернутьСкидку(Процент)
//	РезСк = ПолучитьПустоеЗначение("Справочник.Скидки");
//	м_спрСк.ВыбратьЭлементы();
//	Пока м_спрСк.ПолучитьЭлемент() = 1 Цикл
//		Если м_спрСк.Процент = Процент Тогда
//			РезСк = м_спрСк.ТекущийЭлемент();
//			Прервать;
//		КонецЕсли;
//	КонецЦикла;
//	Возврат РезСк;
//КонецФункции        

//******************************************************************************
Функция ПолучитьСправочныеДанные(Спр)        	                                         
	
	Если (Найти(Спр.Вид(), "кпк") > 0) и (Метаданные.Справочник(Спр.Вид()).Реквизит("Идентификатор").Выбран() = 1) Тогда   	
		Возврат Спр; 
	Иначе                                    
		ПолноеИмяСпрКпк = "Справочник.кпк" + Спр.Вид();		
		ИмяСпр = "кпк" + Спр.Вид();
	КонецЕсли;
	
	Если Метаданные.Справочник(ИмяСпр).Выбран() = 0 Тогда  		
		РезИнфо = ПолучитьПустоеЗначение("Справочник.кпкИдентификаторыОбъектов");		
		СпрИнфо = СоздатьОбъект("Справочник.кпкИдентификаторыОбъектов");         	    
	Иначе                                                                        		
		РезИнфо = ПолучитьПустоеЗначение(ПолноеИмяСпрКпк);                       		
		СпрИнфо = СоздатьОбъект(ПолноеИмяСпрКпк);    		                     		
	КонецЕсли;  
	
	Если Метаданные.Справочник(СпрИнфо.Вид()).Реквизит("Ссылка").Выбран() = 1  Тогда		
		Если СпрИнфо.НайтиПоРеквизиту("Ссылка", Спр, 1) = 1 Тогда
			РезИнфо = СпрИнфо.ТекущийЭлемент();                
			Если ПустаяСтрока(РезИнфо.Идентификатор) = 1 Тогда			
				Если СпрИнфо.НайтиЭлемент(РезИнфо.ТекущийЭлемент()) = 1 Тогда
					СпрИнфо.Идентификатор = глАПСоздатьИдентификатор();
					СпрИнфо.Записать(); 
					ОповеститьОСобытии("Создан идентификатор для элемента справочника: " + Строка(Спр), "!", 1, Спр);				
				КонецЕсли;
			КонецЕсли;
		Иначе         
			ОповеститьОСобытии("Данные для " + Строка(Спр) + " отсутствуют в справочнике: """ + СпрИнфо.ПредставлениеВида() + """!", "!", 1, Спр);		
		КонецЕсли;  
	КонецЕсли; 
	
	Возврат РезИнфо;   	

КонецФункции //ПолучитьСправочныеДанные  

//******************************************************************************
Функция ПолучитьДанныеАгента(Агент)
	РезАгентИнфо = ПолучитьПустоеЗначение("Справочник.кпкАгенты");
	СпрАгенты = СоздатьОбъект("Справочник.кпкАгенты");
	Если СпрАгенты.НайтиПоРеквизиту("Ссылка", Агент, 1) = 1 Тогда
		РезАгентИнфо = СпрАгенты.ТекущийЭлемент();
	Иначе           
		ОповеститьОСобытии("По агенту " + Строка(Агент) + " отсутствуют данные в справочнике ""Агенты""!", 1, Агент);	
	КонецЕсли;
	Возврат РезАгентИнфо;
КонецФункции            
            
//******************************************************************************

// Функция выполняет укзанную операцию с переданным объектом
// и возвращает значение типа Булево в результате выполнения
// операции
//
Функция ВыполнитьОперациюДляОбъекта(Объект, ВидОперации)  
	
	флОперацияВыполнена = 0;
		
	Для Сч = 1 По КоличествоПопыток Цикл
		Попытка
			Если ВидОперации = "запись" Тогда				
				Объект.Записать();
			ИначеЕсли ВидОперации = "проведение" Тогда
				Объект.Провести(); 				
			ИначеЕсли ВидОперации = "создание" Тогда
				Если ТипЗначения(Объект) = 12 Тогда
					Объект.Новый();
				ИначеЕсли ТипЗначения(Объект) = 11 Тогда    
					Объект.Новый();
				КонецЕсли;
			КонецЕсли;
			флОперацияВыполнена = 1;
			Прервать;
		Исключение     
			
			Сообщить("------------------------------------------------------" + РазделительСтрок + ОписаниеОшибки());
			
			// Пауза снизит нагрузку на сервер и позволит другим пользователям закончить операции,
			// которые идут в транзакции.			
			Предупреждение("В данный момент нет возможности выполнить " + ВидОперации + " для объекта """ + 
							Строка(Объект) + """" +  РазделительСтрок + "Повторная попытка будет произведена через " + 
							ПаузаМеждуПопытками + " секунд", ПаузаМеждуПопытками); 
			
			ТекстСообщения = "Не удалось выполнить " + ВидОперации + " для объекта """ + Строка(Объект) + """";
			
			ОповеститьОСобытии(ТекстСообщения, "!!!", 1, Объект);						
		КонецПопытки;  						
	КонецЦикла;        	
	
	// Сохраняем в лог в случае невыполненной операции
	Если флОперацияВыполнена = 0 Тогда 		
		ОповеститьОСобытии("Не удалось выполнить " + ВидОперации + " объекта""" + Строка(Объект) + """!", "!!!", 1, Объект); 
	КонецЕсли;	
		
	Возврат флОперацияВыполнена;
			
КонецФункции //ВыполнитьОперациюДляОбъекта()    

//******************************************************************************
Функция ЗаписатьСправочныеДанные(Спр)    
	
	Если (Найти(Спр.Вид(), "кпк") > 0) и (Метаданные.Справочник(Спр.Вид()).Реквизит("Идентификатор").Выбран() = 1) Тогда   	
		ПолноеИмяСпрКпк = "Справочник." + Спр.Вид();	
		ИмяСпр = Спр.Вид();
	Иначе                                    
		ПолноеИмяСпрКпк = "Справочник.кпк" + Спр.Вид();		
		ИмяСпр = "кпк" + Спр.Вид();
	КонецЕсли;
	
	Если Метаданные.Справочник(ИмяСпр).Выбран() = 0 Тогда		
		СпрИнфо = СоздатьОбъект("Справочник.кпкИдентификаторыОбъектов");		
	Иначе                                                    		
		СпрИнфо = СоздатьОбъект(ПолноеИмяСпрКпк);
	КонецЕсли;                                               
	
	СпрИнфо.Новый(); 
	Если Метаданные.Справочник(СпрИнфо.Вид()).Реквизит("Ссылка").Выбран() = 1  Тогда
		СпрИнфо.Ссылка 	      = Спр.ТекущийЭлемент();                                   
	КонецЕсли;
	СпрИнфо.Идентификатор = глАПСоздатьИдентификатор();
	СпрИнфо.Наименование  = Строка(СпрИнфо.Ссылка);
	
	Если ВыполнитьОперациюДляОбъекта(СпрИнфо, "запись") = 0 Тогда 						
		Возврат 0;			
	КонецЕсли; 
	
	ОповеститьОСобытии("Данные для " + Строка(Спр) + " записаны во вспомогательный справочник для синхронизации объектов!", "i", 1, СпрИнфо);		
	
	Возврат СпрИнфо.ТекущийЭлемент();	

КонецФункции //ЗаписатьСправочныеДанные  
//
////******************************************************************************
////Функция НайтиКорень(Док)
////	СписокЗащитыОтЗацикливания=СоздатьОбъект("СписокЗначений");
////	СписокЗащитыОтЗацикливания.ДобавитьЗначение(Док);
////	
////	ВД=Док.Вид();
////	КореньДок=0;
////	
////	Для Н=1 По Метаданные.Документ(ВД).РеквизитШапки() Цикл
////		РеквДок=Док.ПолучитьАтрибут(Метаданные.Документ(ВД).РеквизитШапки(Н));
////		Если ТипЗначенияСтр(РеквДок)="Документ" Тогда
////			Если ПустоеЗначение(РеквДок)=0 Тогда
////				Если СписокЗащитыОтЗацикливания.НайтиЗначение(РеквДок)>0 Тогда
////					Продолжить;
////				КонецЕсли;
////				КореньДок=РеквДок;
////				Прервать;
////			КонецЕсли;
////		КонецЕсли;
////	КонецЦикла;
////	
////	Если ПустоеЗначение(КореньДок) = 0 Тогда
////		Возврат КореньДок;
////	КонецЕсли;
////КонецФункции 

//******************************************************************************
Функция ПолучитьАгентаПоДокументу(Док)  
	
	//РезАгент = ПолучитьПустоеЗначение("Справочник.Пользователи");
	//
	//СпрДок = СоздатьОбъект("Справочник.кпкДокументы");
	//
	//Если СпрДок.НайтиПоРеквизиту("Документ", Док, 1) = 1 Тогда
	//	РезАгент = СпрДок.АгентАвтор; 
	//Иначе 
	//	Если глЕстьРеквизитШапки("ДокОснование", Док.Вид()) = 1 Тогда
	//		Докум = Док.ДокОснование;
	//		Если СпрДок.НайтиПоРеквизиту("Документ", Докум, 1) = 1 Тогда
	//			РезАгент = СпрДок.АгентАвтор; 
	//		КонецЕсли;	
	//	КонецЕсли;	
	//	//КореньДок = НайтиКорень(Док);
	//	//Докум = КореньДок;
	//	//Если СпрДок.НайтиПоРеквизиту("Документ", Докум, 1) = 1 Тогда
	//	//	РезАгент = СпрДок.АгентАвтор; 
	//	//КонецЕсли;	
	//КонецЕсли;    
	
	Предупреждение("Заглушка: ПолучитьАгентаПоДокументу(Док)");
	РезАгент = "";
	Возврат РезАгент; 
	
КонецФункции //ПолучитьАгентаПоДокументу

//******************************************************************************
Функция ПолучитьСкладПоДокументу(Док)  
	
	РезСклад = ПолучитьПустоеЗначение("Справочник.Пользователи");
	
	СпрДок = СоздатьОбъект("Справочник.кпкДокументы");
	
	Если СпрДок.НайтиПоРеквизиту("Документ", Док, 1) = 1 Тогда
		РезСклад = СпрДок.Документ.Склад; 
	//Иначе 
	//	Если глЕстьРеквизитШапки("ДокОснование", Док.Вид()) = 1 Тогда
	//		Докум = Док.ДокОснование;
	//		Если СпрДок.НайтиПоРеквизиту("Документ", Докум, 1) = 1 Тогда
	//			РезАгент = СпрДок.АгентАвтор; 
	//		КонецЕсли;	
	//	КонецЕсли;	
	//	//КореньДок = НайтиКорень(Док);
	//	//Докум = КореньДок;
	//	//Если СпрДок.НайтиПоРеквизиту("Документ", Докум, 1) = 1 Тогда
	//	//	РезАгент = СпрДок.АгентАвтор; 
	//	//КонецЕсли;	
	КонецЕсли;
	
	Возврат РезСклад; 
	
КонецФункции //ПолучитьАгентаПоДокументу


////******************************************************************************
//Функция ПолучитьКатегориюПоДокументу(Док, ЭтоДолг = 0)
//	
//	РезКатегория = ПолучитьПустоеЗначение("Справочник.кпкКатегорииДокументов");
//	
//	СпрДок = СоздатьОбъект("Справочник.кпкДокументы");
//
//	Если СпрДок.НайтиПоРеквизиту("Документ", Док, 1) = 1 Тогда
//		РезКатегория  = ?(ЭтоДолг = 1, СпрДок.КатегорияДляДолга, СпрДок.Категория);
//	КонецЕсли; 
//	
//	Возврат РезКатегория;
//	
//КонецФункции
//
////******************************************************************************
//// АППолучитьСписокТоваровИзАссортимента(СписТоваров, Ассортимент)
////
//// Параметры: 
////	СписТоваров - список товаров (результат)
////  Ассортимент - элемент справочника "Ассортименты" или список значений, содержащий ассортименты
////
//// Возвращаемое значение:
////  Нет
////
//// Описание:
////  Возвращает в параметре СписТоваров список товаров, закрепленный за ассортиментом 
////
//Процедура АППолучитьСписокТоваровИзАссортимента(СписТоваров, Ассортимент) Экспорт
//	
//	Если ТипЗначенияСтр(СписТоваров) <> "СписокЗначений" Тогда
//	    СписТоваров = СоздатьОбъект("СписокЗначений");
//	КонецЕсли;
//	
//	Спр = СоздатьОбъект("Справочник.кпкАссортиментыПодч");
//	
//	Если ТипЗначенияСтр(Ассортимент) <> "СписокЗначений" Тогда
//		Если Ассортимент.Выбран() = 1 Тогда
//			Спр.ИспользоватьВладельца(Ассортимент);
//			Спр.ВыбратьЭлементы();
//			Пока Спр.ПолучитьЭлемент() = 1 Цикл
//			    Если Спр.ПометкаУдаления() = 0 Тогда
//			        СписТоваров.ДобавитьЗначение(Спр.Номенклатура,"");
//			    КонецЕсли;
//			КонецЦикла;
//		КонецЕсли;
//	Иначе
//		Для Поз = 1 По Ассортимент.РазмерСписка() Цикл
//			Асс = Ассортимент.ПолучитьЗначение(Поз);
//			Если Асс.Выбран() = 1 Тогда
//				Спр.ИспользоватьВладельца(Асс);
//				Спр.ВыбратьЭлементы();
//				Пока Спр.ПолучитьЭлемент() = 1 Цикл
//				    Если Спр.ПометкаУдаления() = 0 Тогда
//				        СписТоваров.ДобавитьЗначение(Спр.Номенклатура,"");
//				    КонецЕсли;
//				КонецЦикла;
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//	
//КонецПроцедуры // АППолучитьСписокТоваровИзАссортимента()
//
////******************************************************************************
//// АПВернутьЦенуТовара()
//// Возвращает значение цены товара
//// Параметры:
//// Товар   - товар, для которого вернуть цену (значение типа "Справочник.Номенклатура")
//// ТипЦены - тип цены товара (значение типа "Справочник.ТипыЦен"), 
//// СпрЦен  - объект типа "Справочник.Цены" для ускорения поиска цены
//// ДатаЦены- дата, на которую извлечь цену (цены хранятся в периодическом реквизите "Цена" справочника "Цены")
//// флПЦены - равен 1, если требуется вернуть персональную цену товара для клиента
//// СпрПЦен - объект типа "Справочник.ПерсональныеЦены" для ускорения поиска персональной ценыцены
//// Контрагент - клиент, для которого возвращается персональная цена (значение типа "Справочник.Контрагенты")
//Функция АПВернутьЦенуТовара(Товар, ТипЦены, ЕдиницаЦены, СпрЦен = 0, ДатаЦены = 0, флПЦены = 0, СпрПЦен = 0, Контрагент = 0) Экспорт
//	
//	Если СпрЦен = 0 Тогда
//	    СпрЦен = СоздатьОбъект("Справочник.Цены");
//	КонецЕсли;
//	
//	Если ДатаЦены <> 0 Тогда
//	    СпрЦен.ИспользоватьДату(ДатаЦены);
//	Иначе
//		ДатаЦены = РабочаяДата();
//	КонецЕсли;       
//	
//	Если флПЦены <> 0 Тогда
//		Если СпрПЦен = 0 Тогда
//		    СпрПЦен = СоздатьОбъект("Справочник.кпкПерсональныеЦены");
//		КонецЕсли;
//		СпрПЦен.ИспользоватьВладельца(Товар);
//		Если СпрПЦен.НайтиПоРеквизиту("Контрагент",Контрагент,0) = 1 Тогда
//		    Возврат СпрПЦен.Цена;
//		КонецЕсли;
//	КонецЕсли;          
//	
//	СпрЦен.ИспользоватьВладельца(Товар);
//	
//	Если ТипЦены.Выбран() = 1 Тогда		
//		
//		Если ТипЦены.Рассчитывается = 1 Тогда
//			БазовыйТип = ТипЦены.БазовыйТипЦен;
//			Если СпрЦен.НайтиПоРеквизиту("ТипЦен",БазовыйТип,0) = 1 Тогда
//			    БазоваяЦена   = СпрЦен.Цена;                               
//				КоэфЦены      = СпрЦен.Единица.Коэффициент; 
//				БазоваяВалюта = СпрЦен.Валюта;
//				Если КоэфЦены = 0 Тогда
//					Цена = 0;
//				Иначе					
//					Цена = глПересчет(БазоваяЦена, БазоваяВалюта, ДатаЦены, ВалютаАгента, ДатаЦены);
//					Цена = глОкруглить(Цена * (100 + ТипЦены.Процент) / 100, ТипЦены.ПорядокОкругления);							
//					//Цена = (БазоваяЦена + БазоваяЦена * ТипЦены.Процент/100)*(ЕдиницаЦены.Коэффициент/КоэфЦены);				
//				КонецЕсли;				
//			Иначе
//				Возврат 0;
//			КонецЕсли;
//		Иначе
//			Если СпрЦен.НайтиПоРеквизиту("ТипЦен",ТипЦены,0) = 1 Тогда  
//				КоэфЦены = СпрЦен.Единица.Коэффициент;
//				Если КоэфЦены = 0 Тогда
//					Возврат 0;
//				Иначе
//			    	Цена = СпрЦен.Цена * (ЕдиницаЦены.Коэффициент/КоэфЦены);
//					Цена = глПересчет(Цена, СпрЦен.Валюта, ДатаЦены, ВалютаАгента, ДатаЦены);     
//				КонецЕсли;
//			Иначе
//				Возврат  0;
//			КонецЕсли;
//		КонецЕсли;        
//		
//		Возврат Окр(Цена, 2, 1);
//	
//	КонецЕсли;  
//	
//	Возврат 0;
//	
//КонецФункции // АПВернутьЦенуТовара()
//
////******************************************************************************
//// АППересчетСуммы()
////
//// Параметры: 
////  
////
//// Возвращаемое значение:
////  Нет
////
//// Описание:
////  Процедура пересчета суммы одной строки или всех строк документа
////
//Процедура АППересчетСуммы(Конт, ОбновлениеЦены = 0, ОбновлениеЕдиницы = 0, РаботаСоСтрокой = 0) Экспорт
//
//	СпрЦен  = СоздатьОбъект("Справочник.Цены");
//	СпрПЦен = СоздатьОбъект("Справочник.кпкПерсональныеЦены");
//	СпрЦен.ИспользоватьДату(Конт.ДатаДок);
//	
//	Если РаботаСоСтрокой = 1 Тогда
//	    НомерСтроки = Конт.НомерСтроки;
//	КонецЕсли;
//
//	ЕстьНДС 		= глЕстьРеквизитМнЧ("СуммаНДС",		  Конт.Вид());
//	ЕстьСкидка 		= глЕстьРеквизитШапки("Скидка",       Конт.Вид());
//	ЕстьРеквУчетНДС = глЕстьРеквизитШапки("УчитыватьНДС", Конт.Вид());
//	ЕстьПерсЦены	= глЕстьРеквизитШапки("флПерсЦены",   Конт.Вид());
//
//	Если ЕстьПерсЦены = 1 Тогда
//	    Контрагент = Конт.Контрагент;
//		флПерсЦены = Конт.флПерсЦены;
//	Иначе
//		Контрагент = 0;
//		флПерсЦены = 0;
//	КонецЕсли;
//	
//	Если ЕстьРеквУчетНДС = 1 Тогда
//	    УчетНДС = Конт.УчитыватьНДС;
//	Иначе
//		УчетНДС = 1;
//	КонецЕсли;
//	
//	Если ЕстьСкидка = 1 Тогда
//	    СкидкаДок = Конт.Скидка.Процент;
//	КонецЕсли;
//	
//	Если Метаданные.Документ(Конт.Вид()).РеквизитШапки("ТипЦен").Выбран() = 1 Тогда
//	    ТипЦен = Конт.ТипЦен;
//	Иначе
//		ТипЦен = глЗначениеПоУмолчанию("ОсновнойТипЦенПродажи");
//	КонецЕсли;
//
//	Конт.ВыбратьСтроки();
//	
//	Пока Конт.ПолучитьСтроку() = 1 Цикл
//	   
//		Если РаботаСоСтрокой = 1 Тогда
//	        Конт.ПолучитьСтрокуПоНомеру(НомерСтроки);
//		КонецЕсли;
//
//		Товар = Конт.Номенклатура;
//		ТоварИнфо = ПолучитьСправочныеДанные(Товар);
//		
//		Если ТоварИнфо.Выбран() = 0 Тогда
//			ТоварИнфо = ЗаписатьСправочныеДанные(Товар);
//		КонецЕсли;
//	
//		Если ЕстьСкидка = 1 Тогда
//			Если ТоварИнфо.ОграничениеСкидки = 0 Тогда
//			    СкидкаПозиции = СкидкаДок;
//			ИначеЕсли Товар.ОграничениеСкидки > 0 Тогда // положительное ограничение скидки
//			    СкидкаПозиции = Мин(ТоварИнфо.ОграничениеСкидки, СкидкаДок);
//			ИначеЕсли СкидкаДок > 0 Тогда // отрицательное ограничение скидки, проверяем положительная ли скидка в документе
//				СкидкаПозиции = Макс(СкидкаДок + ТоварИнфо.ОграничениеСкидки, 0);
//			КонецЕсли;
//		КонецЕсли;
//		
//		Если ОбновлениеЦены = 1 Тогда
//			Конт.Цена = АПВернутьЦенуТовара(Товар, ТипЦен, Конт.Единица, СпрЦен, 0, флПерсЦены, СпрПЦен, Контрагент);
//		КонецЕсли;		
//		
//		Если ОбновлениеЕдиницы <> 0 Тогда
//			Если ОбновлениеЕдиницы = 1 Тогда
//				Конт.Единица	= Товар.БазоваяЕдиница;
//			КонецЕсли;
//			Конт.Коэффициент = Конт.Единица.Коэффициент;
//		КонецЕсли;                                         
//		
//		Если ЕстьСкидка = 1 Тогда
//			Конт.Сумма  = Окр(Конт.Цена * (1 - СкидкаПозиции/100),2) * Конт.Количество ;
//		Иначе
//			Конт.Сумма  = Конт.Цена * Конт.Количество;
//		КонецЕсли;
//		
//		Если ЕстьНДС = 1 Тогда
//		    Конт.СуммаНДС = Конт.Сумма * глВыделяемыйНДС(Товар.СтавкаНДС) * УчетНДС;
//		КонецЕсли;
//		
//		Если РаботаСоСтрокой = 1 Тогда
//			Прервать;
//		КонецЕсли;  
//		
//	КонецЦикла;
//	
//КонецПроцедуры // АППересчетСуммы()
//
////******************************************************************************
//Функция АПСтавкаНДС(Ставка)   Экспорт
//	
//	Если ПустоеЗначение(Ставка)=1 Тогда
//		Возврат 0;
//	ИначеЕсли(Ставка=Перечисление.СтавкиНДС.БезНДС) Тогда
//		Возврат 0;
//	ИначеЕсли (Ставка=Перечисление.СтавкиНДС.НДС10) Тогда
//		Возврат 10;
//	ИначеЕсли (Ставка=Перечисление.СтавкиНДС.НДС18) Тогда
//		Возврат 18;
//	Иначе
//		ОповеститьОСобытии("Неверная ставка НДС", "!", 0);
//		Возврат 0;
//	КонецЕсли; 
//	
//КонецФункции // АПСТавкаНДС(Ставка)      
//
//******************************************************************************
Функция АППредставлениеДок(Док) Экспорт
	Возврат Док.ПредставлениеВида() + " № " + СокрЛП(Док.НомерДок) + " от " + Строка(Док.ДатаДок);
КонецФункции
//
////******************************************************************************
//Функция АПСуммаДокумента(Док) Экспорт
//	Если Метаданные.Документ(Док.Вид()).РеквизитТабличнойЧасти("Сумма").Выбран() = 1 Тогда
//	    Возврат СокрЛ(Формат(Док.Итог("Сумма"),"Ч15.2"));
//	ИначеЕсли Метаданные.Документ(Док.Вид()).РеквизитШапки("Сумма").Выбран() = 1 Тогда
//		Возврат СокрЛ(Формат(Док.Сумма,"Ч15.2"));
//	Иначе
//		Возврат "";
//	КонецЕсли;
//КонецФункции     
//
////******************************************************************************
//Процедура ПересчетСуммыВзаиморасчетов(Док)
//	
//	Если ПустоеЗначение(Док.Договор.ВалютаВзаиморасчетов) = 1 Тогда
//		Если Док.СуммаВзаиморасчетов<>0 Тогда
//			Док.СуммаВзаиморасчетов = 0;
//		КонецЕсли;		
//	Иначе    		                     
//		
//		Если (Док.Вид() = "ПКО") или (Док.Вид() = "РКО") Тогда
//			
//			СуммаВзаиморасчетовДок = Док.Сумма;  
//			
//		Иначе
//		
//			СуммаВзаиморасчетовДок	= Док.Итог("Сумма")
//								  	  + ?(Док.СуммаВклНП  = 1,0, Док.Итог("СуммаНП"))
//								  	  + ?(Док.СуммаВклНДС = 1,0, Док.Итог("СуммаНДС"));
//		КонецЕсли;
//								 
//		Если глЕстьРеквизитШапки("СуммаВзаиморасчетов", Док.Вид()) = 1 Тогда		
//			
//			Док.СуммаВзаиморасчетов	= глПересчет(СуммаВзаиморасчетовДок, Док.Валюта, Док.Курс, 
//												 Док.Договор.ВалютаВзаиморасчетов, Док.ДатаДок,Док.Кратность);			
//		КонецЕсли;                                                              
//		
//	КонецЕсли;  
//
//КонецПроцедуры // ПересчетСуммыВзаиморасчетов()
//
////******************************************************************************
//Функция АППодробноеПредставлениеДок(Док) Экспорт
//	
//	СтрСуммаДок = АПСуммаДокумента(Док);
//	
//	Если СтрСуммаДок <> "" Тогда
//	    СтрСуммаДок = ", Сумма: "+СтрСуммаДок;
//	КонецЕсли;
//	
//	Если глЕстьРеквизитШапки("Контрагент", Док.Вид()) = 1 Тогда
//	    КлиентДок = ", Клиент: " + СокрЛП(Док.Контрагент);
//	Иначе
//		КлиентДок = "";
//	КонецЕсли;
//	
//	ОписаниеДокумента = АППредставлениеДок(Док.ТекущийДокумент()) + ?(Док.Проведен() = 1, " (проведен)", "") + СтрСуммаДок + КлиентДок;
//	
//	Возврат ОписаниеДокумента; 
//	
//КонецФункции // АППодробноеПредставлениеДок()

//******************************************************************************
//Показывает внизу окна обработки строку состояния
Процедура ОкноСостояние(Стр = "", Знак = "")
	Если Найти(Знак,"!")<>0 Тогда
	    Форма.ИнфоТекст.Цвет(255,0,0); //красный
	Иначе
		Форма.ИнфоТекст.Цвет(0,0,128); //синий
	КонецЕсли;
	Форма.ИнфоТекст.Заголовок(Стр);
	Форма.Обновить(0);
	Состояние(Стр);
КонецПроцедуры // ОкноСостояние() 

//******************************************************************************
//Преобразует значение типа "Дата" в строку формата XML в виде "ГГГГ-ММ-ДД"
Функция ДатаВФорматеXML(Знач Дата_)
    Перем ПромДата;
	Если Число(Дата_) < 1 Тогда
	    Дата_ = '01.01.2000';
	КонецЕсли;
	ПромДата=Формат(Дата_,"ДГГГГММДД");
	Возврат Лев(ПромДата,4)+"-"+Сред(ПромДата,5,2)+"-"+Прав(ПромДата,2);
КонецФункции //ДатаВФорматеXML() 

//****************************************************************************** 
//Преобразует значение типа "Строка" в строку формата XML в виде "ЧЧ-ММ-СС"
Функция ВремяВФорматеXML(Знач Время_)    
	Возврат Лев(Время_,2)+":"+Сред(Время_,4,2)+":"+Прав(Время_,2);
КонецФункции //ВремяВФорматеXML() 

//****************************************************************************** 
Функция ИзвлечьДатуИзXML(Дата_)                                                  	
	Поз = Найти(Дата_,"-");
	Если Поз = 0 Тогда
	    Возврат "";
	Иначе
    	Возврат Дата(Число(Лев(Дата_,Поз-1)), Число(Сред(Дата_,Поз+1,2)), Число(Сред(Дата_,Поз+4,2)) );
	КонецЕсли;
КонецФункции

//******************************************************************************
Функция ИзвлечьВремяИзXML(Дата_)
	Поз = Найти(Дата_," ");
	Если Поз = 0 Тогда
	    Возврат "";
	Иначе
		ПромВремя = Сред(Дата_, Поз+1);
    	Возврат СтрЗаменить(ПромВремя, "-", ":");
	КонецЕсли;
КонецФункции

//******************************************************************************
Функция ДатаВремяXMLВФормат1С(ДатаВремя, ТипВозврата = 0)
   
	Дата_ = ИзвлечьДатуИзXML(ДатаВремя);
	
	СимвРазделителяА15 = " ";		
	СимвРазделителяМТ  = "T";
	
	ПозПробела = Найти(ДатаВремя," ");
	
	Если ПозПробела = 0 Тогда
		ПозПробела = Найти(ДатаВремя, СимвРазделителяМТ);
	КонецЕсли;    
	
	Если ПозПробела = 0 Тогда 
	    Время_= "";
	Иначе
		Время_= Сред(ДатаВремя,ПозПробела + 1, 2) + ":" + Сред(ДатаВремя,ПозПробела + 4,2);
	КонецЕсли;   
	
	Если ТипВозврата = 0 Тогда	
		Возврат Строка(Дата_) + " " + Время_;
	ИначеЕсли ТипВозврата = 1 Тогда	
		Возврат Строка(Дата_);
	ИначеЕсли ТипВозврата = 2 Тогда	
		Возврат Время_;
	КонецЕсли;
	
КонецФункции //ДатаВремяXMLВФормат1С

//******************************************************************************
Функция УбратьСимволыКонцаСтроки(Стр)
	Результат = СокрЛП(Стр);
	Результат = СтрЗаменить(Результат, РазделительСтрок, "");
	Возврат Результат;
КонецФункции

//******************************************************************************
//Убирает из строки символы, запрещенные для имен файлов.
//Запрещенные символы заменяются на английские символы.
Функция УбратьЗапрещенныеСимволыФС(ИмяФ)
	Результат = СокрЛП(ИмяФ);
	Результат = СтрЗаменить(Результат,".","p");
	Результат = СтрЗаменить(Результат,"*","s");
	Результат = СтрЗаменить(Результат,":","d");
	Результат = СтрЗаменить(Результат,"-","m");
	Результат = СтрЗаменить(Результат,"\","l");
	Результат = СтрЗаменить(Результат,"/","k");
	Возврат Результат;
КонецФункции

////******************************************************************************
//Функция УбратьЗаменителиHTML(СтрHTML)
//    Если ПустоеЗначение(СтрHTML) = 1 Тогда
//        Возврат "";
//	Иначе
//		Результат = СтрЗаменить(СтрHTML,	"&lt;",		"<");
//		Результат = СтрЗаменить(Результат,	"&amp;",	"&");
//		Результат = СтрЗаменить(Результат,	"&gt;",		">");
//		Результат = СтрЗаменить(Результат,	"&apos;",	"'");
//		Результат = СтрЗаменить(Результат,	"&quot;",	"""");
//		Возврат Результат;
//	КонецЕсли;
//КонецФункции //УбратьЗаменителиHTML(СтрHTML)                                    
//
////******************************************************************************
//Функция УбратьНечитаемыеСимволы(лСтрока)
//	
//	НовСтрока = СтрЗаменить(лСтрока, РазделительСтрок, "");
//	НовСтрока = СтрЗаменить(НовСтрока, """", "'");
//	
//	Возврат СокрЛП(НовСтрока);
//	
//КонецФункции //УбратьНечитаемыеСимволы()                                        
//
////******************************************************************************
//Функция СгенерироватьНовыйGUID()	
//		
//	Идентификатор = V7SysInfo.СоздатьGUID();
//
//	Возврат Идентификатор;	
//	
//КонецФункции
//
////******************************************************************************
////функция возвращает путь каталога файла
//Функция ВернутьКаталогФайла(Знач ИмяФ)
//	Перем РазмерФ,АтрибФ;
//    Если ПустоеЗначение(ИмяФ)=1 Тогда
//        Возврат "";
//	КонецЕсли;
//	ИмяФ=СокрЛП(ИмяФ);
//	Если Прав(ИмяФ,2)="\\" Тогда
//	    Возврат ИмяФ;
//	КонецЕсли;
//	Если ФС.СуществуетФайл(ИмяФ)=1 Тогда
//	    //проверим, не является ли файл каталогом
//		ФС.АтрибутыФайла(ИмяФ,РазмерФ,АтрибФ);
//		Если СтрДлина(АтрибФ)>3 Тогда
//		    Если Сред(АтрибФ,4,1)="1" Тогда //это каталог
//		        Возврат ИмяФ;
//		    КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//	//убираем имя файла на конце
//	ПромИмяФ=ИмяФ; ПромПоз=0;
//	Поз=Найти(ПромИмяФ,"\");
//	Пока Поз<>0 Цикл
//		ПромПоз=ПромПоз+Поз;
//		ПромИмяФ=Прав(ПромИмяФ,СтрДлина(ПромИмяФ)-Поз);
//		Поз=Найти(ПромИмяФ,"\");
//	КонецЦикла;
//	Если ПромПоз=0 Тогда
//	    Возврат "";
//	Иначе
//		Возврат Лев(ИмяФ,ПромПоз);
//	КонецЕсли;
//КонецФункции  

//******************************************************************************
//функция возвращает имя файла, извлекая его из полного пути к файлу
Функция ВернутьИмяФайла(Знач ИмяФ)
    Если ПустоеЗначение(ИмяФ)=1 Тогда
        Возврат "";
	КонецЕсли;
	ИмяФ=СокрЛП(ИмяФ);
	//ищем имя файла на конце
	ПромИмяФ=ИмяФ; ПромПоз=0;
	Поз=Найти(ПромИмяФ,"\");
	Пока Поз<>0 Цикл
		ПромПоз=ПромПоз+Поз;
		ПромИмяФ=Прав(ПромИмяФ,СтрДлина(ПромИмяФ)-Поз);
		Поз=Найти(ПромИмяФ,"\");
	КонецЦикла;
	Если (ПромПоз=0) Или (Прав(ИмяФ,1) = "\") Тогда
	    Возврат "";
	Иначе
		Возврат Сред(ИмяФ,ПромПоз+1);
	КонецЕсли;
КонецФункции

////******************************************************************************
//// Возвращает уникальное имя файла в данном каталоге, если переданное в параметре 
//// имя файла само является уникальным, то возвращается переданное имя файла
//Функция ВернутьУникальныйФайл(Каталог, ИмяФайла)
//	Счетчик = 0;
//	ПозТочки = Найти(ИмяФайла, ".");
//	Если ПозТочки <> 0 Тогда
//		Имя 		= Лев(ИмяФайла, ПозТочки - 1);
//		Расширение  = Сред(ИмяФайла, ПозТочки);
//	Иначе
//		Имя 		= ИмяФайла;
//		Расширение  = "";
//	КонецЕсли;
//	Результат = ИмяФайла;
//	Пока 1 = 1 Цикл
//		ПутьИФайл = Каталог + Результат;
//		Если ФС.СуществуетФайл(ПутьИФайл) = 0 Тогда
//			Прервать;
//		Иначе
//			Счетчик 	= Счетчик + 1;
//			Результат   = Имя + "_" + Строка(Счетчик) + Расширение;
//		КонецЕсли;
//	КонецЦикла;
//	Возврат Результат;
//КонецФункции 

//******************************************************************************
Функция ВернутьИмяФайлаИсторииПродаж()
	Возврат КаталогPPC + "hist" + УбратьЗапрещенныеСимволыФС(ВыбАгент.Код) + ".dat";
КонецФункции //ВернутьФайлИсторииПродаж

//******************************************************************************
Функция ВернутьИмяФайлаВыгрузки()
	Если ВыбАгент.Выбран() = 1 Тогда
		Если МобильноеПриложение = ВидАгентПлюсМТ Тогда
			Возврат КаталогPPC + УбратьЗапрещенныеСимволыФС(ВыбАгент.Код) + ".xml";			
		Иначе
			//Если СписВидВыгрузки.ПолучитьЗначение(СписВидВыгрузки.ТекущаяСтрока()) <> "История" Тогда
				Возврат КаталогPPC + УбратьЗапрещенныеСимволыФС(ВыбАгент.Код) + ".dat";
			//Иначе
			//	Возврат ВернутьИмяФайлаИсторииПродаж();
			//КонецЕсли;                                     
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

////******************************************************************************
////Возвращает код состояния (статуса) документа: 1 - проведен, 2 - записан, 3 - помечен на удаление
//Функция ВернутьСостояниеДок(Док)
//	Если Док.Проведен() = 1 Тогда
//	    Возврат 1;
//	ИначеЕсли Док.ПометкаУдаления() = 1 Тогда
//		Возврат 3;
//	Иначе
//		Возврат 2;
//	КонецЕсли;
//КонецФункции // ВернутьСостояниеДок()

//******************************************************************************
Процедура ВыбАгентВыбор(ОбновитьРеквизиты = 1) 
	
	Если ОбновитьРеквизиты = 1 Тогда     
		
		ВыбАссортимент  = ПолучитьПустоеЗначение("Справочник.кпкАссортименты");
		ВыбСклад        = ПолучитьПустоеЗначение("Справочник.кпкСписокСкладов");
		
		Если ВыбАгент.Выбран() = 1 Тогда
			АгентИнфо = ПолучитьДанныеАгента(ВыбАгент);
			Если АгентИнфо.Выбран() = 1 Тогда
				ВыбАссортимент  = АгентИнфо.Ассортимент;
				ВыбСклад  	    = АгентИнфо.Склад;
				Если АгентИнфо.Валюта.Выбран() = 1 Тогда
					ВалютаАгента = АгентИнфо.Валюта;
				Иначе                               
					ВалютаАгента = Константа.БазоваяВалюта;
				КонецЕсли;	
			КонецЕсли;			
		КонецЕсли;
		
		ОкноСостояние(); 
		
		УстановитьМобильноеПриложение(ВыбАгент);
		
	КонецЕсли; 
	
КонецПроцедуры //ВыбАгентВыбор    
	
////******************************************************************************    
//Процедура ВидимостьПериодаЗаданий()                                               
//	        
//	флЗ = флВыгружатьЗадания;
//	Форма.НачДатаЗадания.Видимость(флЗ); 
//	Форма.НадписьПо.Видимость(флЗ);    
//	Форма.КонДатаЗадания.Видимость(флЗ); 
//	Форма.ВыбПериода.Видимость(флЗ); 
//	
//	Форма.флВыгружатьЗадания.Заголовок(?(флЗ=1, "Выгружать задания за период с:", "Выгружать задания"));
//	
//КонецПроцедуры //ВидимостьПериодаЗаданий()	 
//
////******************************************************************************
//Процедура ПриНачалеВыбораЗначения(ИдЭлемента, ФлагСтОбр)  
//	
//	Если ИдЭлемента = "ВыбАгент" Тогда
//		
//		ФлагСтОбр = 0;
//		
//		Поз = 0;
//		ВыбЗнач = ПолучитьПустоеЗначение("Справочник.ФизическиеЛица");
//		Если СписокАгентов.ВыбратьЗначение(ВыбЗнач, "Выберите агента", Поз, 60) = 1 Тогда  
//			ВыбАгент = ВыбЗнач;
//		КонецЕсли;   
//		
//		ВыбАгентВыбор();
//		
//	КонецЕсли;        	
//	
//КонецПроцедуры //ПриНачалеВыбораЗначения

//******************************************************************************
Процедура ПриВыбореЗакладки(Зак,ЗначЗак)

	Если ЗначЗак="Обмен" Тогда
	    Форма.ИспользоватьСлой("Выгрузка,Общий",2);  		
	//ИначеЕсли ЗначЗак="Фильтр" Тогда
	//	Форма.ИспользоватьСлой("Фильтр,Общий",2);
	ИначеЕсли ЗначЗак="Настройки" Тогда
		Форма.ИспользоватьСлой("Настройки,Общий",2);
	//	ВидимостьПериодаЗаданий();
	//ИначеЕсли ЗначЗак="Почта" Тогда
	//	Форма.ИспользоватьСлой("Почта,Общий",2);
	//	Форма.кнВыгрузить.Видимость(1);   
	//	Форма.кнЗагрузить.Видимость(1);  
	//	Форма.кнОтчет.Видимость(1); 	 
	//	Форма.кнСписДокументов.Видимость(1); 		
	//ИначеЕсли ЗначЗак="ФТП" Тогда
	//	Форма.ИспользоватьСлой("ФТП,Общий",2);
	//	Форма.кнВыгрузить.Видимость(1);   
	//	Форма.кнЗагрузить.Видимость(1);  
	//	Форма.кнОтчет.Видимость(1); 	
	//	Форма.кнСписДокументов.Видимость(1); 	
	ИначеЕсли ЗначЗак="Сервер" Тогда
		Форма.ИспользоватьСлой("Сервер,Общий",2);
		Форма.кнДействия.Видимость(1); 
		кнОбновитьИзАПСервераВыбор();
		//Форма.кнВыгрузить.Видимость(1);   
		//Форма.кнЗагрузить.Видимость(1);  
		//Форма.кнОтчет.Видимость(1); 
		//Форма.кнСписДокументов.Видимость(1); 	
	//ИначеЕсли ЗначЗак="СтартНомера" Тогда
	//	Форма.ИспользоватьСлой("СтартНомера,Общий",2);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПривыбореЗакладки()            

////*****************************************************************************
//Функция НайтиПланАгента()  
//	
//	ДокПлан = ПолучитьПустоеЗначение("Документ");
//    Док = СоздатьОбъект("Документ.кпкПланПосещений");
//	Для Поз = 1 По 2 Цикл //ищем план в текущем месяце, если не находим - в предыдущем (на случай, если администратор забыл ввести планы на новый месяц)
//		Если Поз = 1 Тогда
//		    ДатаНач = НачМесяца(ТекущаяДата());
//		Иначе
//			ДатаНач = ДобавитьМесяц(ДатаНач, -1);
//		КонецЕсли;                                      
//		Док.ОбратныйПорядок(1);
//		Док.ВыбратьДокументы(ДатаНач, КонМесяца(ДатаНач));
//		Пока Док.ПолучитьДокумент() = 1 Цикл
//		    Если Док.Проведен() = 1 Тогда
//		        Если Док.Агент = ВыбАгент Тогда
//		            ДокПлан = Док.ТекущийДокумент();
//					Прервать;
//		        КонецЕсли;
//		    КонецЕсли;
//		КонецЦикла;
//		Если ДокПлан.Выбран() = 1 Тогда
//		    Прервать;
//		КонецЕсли;
//	КонецЦикла;  
//	
//	Возврат ДокПлан;
//	
//КонецФункции //НайтиПланАгента()    
//
////****************************************************************************** 
//
//Процедура ПолучитьДатуПоследнегоТрекаИзФайла(ИмяФайлаТреков, СтруктураТрека) 
//	
//	СтруктураТрека.ДобавитьЗначение(""); 
//	СтруктураТрека.ДобавитьЗначение("");
//	
//	// Проверка папки хранения треков
//	ПапкаТреков = СокрЛП(Константа.кпкПапкаТреков); 
//	
//	Если ПустаяСтрока(ПапкаТреков) = 1 Тогда
//		ОповеститьОСобытии("Укажите значение константы ""Папка треков"" на форме настройки констант для Агент+!" + РазделительСтрок + 
//				 		   "Выгрузка последнего созданного трека не произведена!", "!", 0);
//		Возврат;
//	КонецЕсли;
//	
//	Если ФС.СуществуетФайл(ПапкаТреков) = 0 Тогда		
//		ОповеститьОСобытии("Не найден каталог, указанный в константе ""Папка треков""!" + РазделительСтрок + 
//				 		   "Выгрузка последнего созданного трека не произведена!", "!", 0);
//		Возврат;   
//	КонецЕсли; 	
//	
//	ТекстФайла = СоздатьОбъект("Текст");
//	
//	ПолноеИмяФ = ПапкаТреков + "\" + ИмяФайлаТреков;
//	
//	Если ФС.СуществуетФайл(ПолноеИмяФ) = 0 Тогда		
//		ОповеститьОСобытии("Не найден файл трека """ + ПолноеИмяФ + """!" + РазделительСтрок + 
//				 		   "Выгрузка последнего созданного трека не произведена!", "!");
//		Возврат;   
//	КонецЕсли; 	
//	
//	Попытка 		
//		ТекстФайла.Открыть(ПолноеИмяФ); 						
//	Исключение 
//		ОповеститьОСобытии("Не удалось прочитать файл трека " + ПолноеИмяФ, "!");		
//		ОповеститьОСобытии(ОписаниеОшибки(), "!");
//		ОповеститьОСобытии("Выгрузка последнего созданного трека не произведена!", "!");
//		Возврат;
//	КонецПопытки;		                            
//	
//	ВсегоСтрок = ТекстФайла.КоличествоСтрок();
//	
//	// Будем считать, что в последней строке содержится последний записанный трек
//	СтрокаПослТрека = ТекстФайла.ПолучитьСтроку(ВсегоСтрок);   
//	
//	Если ПустаяСтрока(СтрокаПослТрека) = 1 Тогда               
//		СтрокаПослТрека = ТекстФайла.ПолучитьСтроку(ВсегоСтрок-1);   
//	КонецЕсли;
//	
//	РасширениеФайла = Прав(ИмяФайлаТреков, 3);
//	
//	Если РасширениеФайла = "txt" Тогда
//		
//		ПозДаты = Найти(СтрокаПослТрека, СимволТабуляции);                                 
//		
//		Если ПозДаты > 0 Тогда 			
//			ДатаВремяИзФайла = СокрЛП(Лев(СтрокаПослТрека, ПозДаты));			
//			ДатаТрека        = ДатаВремяXMLВФормат1С(ДатаВремяИзФайла);
//			
//			Поз = Найти(ДатаТрека, " ");
//			Если Поз > 0 Тогда
//				СтруктураТрека.УстановитьЗначение(1, Лев(ДатаТрека, Поз-1));	 
//				СтруктураТрека.УстановитьЗначение(2, Сред(ДатаТрека, Поз+1));	
//			КонецЕсли; 
//			
//		КонецЕсли;	
//		
//	ИначеЕсли РасширениеФайла = "plt" Тогда
//		
//		СчЗп = 0;
//		ПозЗп = Найти(СтрокаПослТрека, ",");
//		// После 5-й по счету запятой следует дата
//		Пока ПозЗп > 0 Цикл
//			СчЗп = СчЗп + 1;			
//			СтрокаПослТрека = Сред(СтрокаПослТрека, ПозЗп + 1);
//			ПозЗп = Найти(СтрокаПослТрека, ",");
//			Если СчЗп = 5 Тогда				
//				Прервать;
//			КонецЕсли;
//		КонецЦикла;
//		
//		ПозЗп = Найти(СтрокаПослТрека, ",");
//		Если ПозЗп > 0 Тогда
//		
//			ДатаТрека = Лев(СтрокаПослТрека, ПозЗп-1); 
//			ВремяТрека = Сред(СтрокаПослТрека, ПозЗп+1, 6);
//			
//			День  = Лев(ДатаТрека, 2);
//			Месяц = Сред(ДатаТрека, 3,2);
//			Год   = Прав(ДатаТрека, 2);
//						
//			ДатаТрека = День + "." + Месяц + "." + Год; 
//			
//			СтруктураТрека.УстановитьЗначение(1, ДатаТрека);	 
//			СтруктураТрека.УстановитьЗначение(2, ВремяТрека);
//		КонецЕсли;
//	
//	КонецЕсли;
//	
//КонецПроцедуры //ПолучитьДатуПоследнегоТрекаИзФайла()
//
////****************************************************************************** 
//Функция ПолучитьСтруктуруПоследнегоТрека()
//	
//	СтруктураТрека = СоздатьОбъект("СписокЗначений");
//	
//	СпрТрек = СоздатьОбъект("Справочник.кпкГПСТреки");
//	
//	СпрТрек.ИспользоватьВладельца(ВыбАгент);
//	
//	СпрТрек.ПорядокРеквизита("ДатаСоздания");
//	
//	СпрТрек.ОбратныйПорядок(1);
//	
//	СпрТрек.ВыбратьЭлементы(1);
//	
//	РежимЗагрузкиТреков = Константа.кпкРежимЗагрузкиТреков;
//	
//	Если СпрТрек.ПолучитьЭлемент() = 1 Тогда 				
//		Если РежимЗагрузкиТреков = 0 Тогда						
//			СтруктураТрека.ДобавитьЗначение(СпрТрек.ДатаСоздания);			 
//			СтруктураТрека.ДобавитьЗначение(СпрТрек.ВремяСоздания);			
//		Иначе			
//			Если ПустаяСтрока(СпрТрек.ИмяФайлаТреков) = 0 Тогда
//				ПолучитьДатуПоследнегоТрекаИзФайла(СокрЛП(СпрТрек.ИмяФайлаТреков), СтруктураТрека);									
//			КонецЕсли;
//		КонецЕсли;		
//	КонецЕсли;  
//	
//	Возврат СтруктураТрека;    	
//	
//КонецФункции //ПолучитьСтруктуруПоследнегоТрека()
//
////****************************************************************************** 
//
//// Процедура формирует таблицу типов цен номенклатуры
//// для выгрузки в мобильное устройство
//// 
//Функция СформироватьТаблицуВыгружаемыхТиповЦен() 
//	
//	тзТипыЦен.УдалитьСтроки();        
//	
//	СписДоступныхТиповЦен = СоздатьОбъект("СписокЗначений");
//	                                                    
//	//0 - все цены; 
//	//1- цена основного дог-ра;
//	//2 - цены всех дог-ов;
//	//3 - тип цен из списка;
//	ДоступностьТиповЦен = АгентИнфо.ДоступностьТиповЦен;
//	
//	Если ДоступностьТиповЦен = 1 Тогда 
//	
//		Спр = СоздатьОбъект("Справочник.ТипыЦен");
//		Стр = СокрЛП(АгентИнфо.ДоступныеТипыЦен.ТипыЦен) + ",";
//	
//		Если Стр <> "," Тогда
//			Пока Стр <> "" Цикл
//				Поз  = Найти(Стр, ",");
//				Код1 = Лев(Стр, Поз-1);
//				Стр  = Прав(Стр, СтрДлина(Стр)-Поз);
//				Спр.НайтиПоКоду(Код1);
//				Если Спр.Выбран() = 0 Тогда 
//					Продолжить;              					
//				Иначе
//					СписДоступныхТиповЦен.ДобавитьЗначение(Спр.ТекущийЭлемент());					
//				КонецЕсли;
//			КонецЦикла;
//		КонецЕсли;   
//		
//	КонецЕсли;	                                   
//
//	Спр = СоздатьОбъект("Справочник.кпкТипыЦен");
//	Спр.ПорядокРеквизита("КпкКод");
//	ТекКод = -1;	
//	Спр.ВыбратьЭлементы();
//	
//	Пока Спр.ПолучитьЭлемент() = 1 Цикл  
//		
//		ТекТипЦены = Спр.ТекущийЭлемент().Ссылка;
//	
//		Если (Спр.ПометкаУдаления() = 1) или (Спр.КпкВыгружать = 0) или (Спр.кпкКод = 0) Тогда
//			Продолжить;
//		КонецЕсли;    
//		
//		Если СписДоступныхТиповЦен.РазмерСписка() > 0 Тогда
//			
//			Если СписДоступныхТиповЦен.НайтиЗначение(ТекТипЦены) = 0 Тогда 	Продолжить; КонецЕсли; 
//			
//		Иначе
//			Если ТекКод <> Спр.КпкКод Тогда //проверяем уникальность реквизита "КпкКод"
//				ТекКод = Спр.КпкКод;
//			Иначе				
//				ОповеститьОСобытии("В справочнике ""Настройка типов цен"" нарушена уникальность кода в реквизите ""Код в МУ""! " + 
//								   "Восстановите уникальность кодов в справочнике, а затем повторите выгрузку!","!!!");
//				тзТипыЦен.УдалитьСтроки();
//				Возврат 0;
//			КонецЕсли;                                        
//			
//		КонецЕсли;                                        
//		
//		Если тзТипыЦен.КоличествоСтрок() = 31 Тогда 			
//			ОповеститьОСобытии("Указано более 32 типов цен для выгрузки. В мобильное устройство допускается выгрузка не более 32 типов цен!");  		
//			тзТипыЦен.УдалитьСтроки();
//			Возврат 0;
//		КонецЕсли;
//		
//		тзТипыЦен.НоваяСтрока();
//		тзТипыЦен.ТипЦены = ТекТипЦены; 
//		тзТипыЦен.Код 	  = Спр.кпкКод;       		
//		
//	КонецЦикла;  	
//	
//	Возврат 1;
//
//КонецФункции //СформироватьТаблицуВыгружаемыхТиповЦен   
//
////******************************************************************************
//Процедура УстановитьРеквизитыДокумента(Эл, Док, СписокПараметров = 0)  
//	
//	Если МобильноеПриложение = ВидАгентПлюсМТ Тогда  
//		Если СписокПараметров <> 0 Тогда
//			ИдФирмы       = СписокПараметров.Получить("Фирма"); 
//			ИдКонтрагента = СписокПараметров.Получить("Контрагент");
//			ИдТочки       = СписокПараметров.Получить("ТоргТочка");			
//			ИдДоговора    = СписокПараметров.Получить("Договор");			 
//			СуммаДок      = Число(СписокПараметров.Получить("СуммаДок"));			
//		КонецЕсли;
//	Иначе   		
//		ИдФирмы         = Эл.ПолучитьАтрибут("FirmID");
//		ИдКонтрагента   = Эл.ПолучитьАтрибут("ClientID");	
//		ИдТочки    		= Эл.ПолучитьАтрибут("TPointID"); 	
//		ИдДоговора 		= Эл.ПолучитьАтрибут("AgreementID"); 
//		СуммаДок 		= Число(Эл.ПолучитьАтрибут("Sum"));
//	КонецЕсли;
//	
//	Фирма      = ПолучитьОбъектПоИдентификатору("Фирмы",       		ИдФирмы); 
//	Контрагент = ПолучитьОбъектПоИдентификатору("Контрагенты", 		ИдКонтрагента); 
//	ТоргТочка  = ПолучитьОбъектПоИдентификатору("кпкТорговыеТочки", ИдТочки);              	
//		
//	Договор = ПолучитьПустоеЗначение("Справочник.Договоры");
//	
//	Если Константа.кпкИспользоватьДоговоры = 1 Тогда
//		Договор = ПолучитьОбъектПоИдентификатору("Договоры", ИдДоговора);   
//	КонецЕсли;
//	
//	Если ПустоеЗначение(Договор) = 1 Тогда			
//		Договор = Контрагент.ОсновнойДоговор; 			
//	КонецЕсли; 
//	
//
//	Перезапись = Док.Выбран();
//	
//	Если Перезапись = 0 Тогда 		
//		
//		Если глЕстьРеквизитШапки("Фирма", Док.Вид()) = 1 Тогда			
//			Если Фирма.Выбран() = 0 Тогда
//				м_СпрФирм.НайтиЭлемент(глЗначениеПоУмолчанию("ОсновнаяФирма"));
//				Док.Фирма = м_СпрФирм.ТекущийЭлемент();
//			Иначе
//				Док.Фирма = Фирма; 
//			КонецЕсли;		
//		КонецЕсли; 
//		
//		Если глЕстьРеквизитШапки("Контрагент", Док.Вид()) = 1 Тогда
//			Док.Контрагент = Контрагент;
//		КонецЕсли; 	
//		
//		Если ИспТочек = 1 Тогда	
//			Если глЕстьРеквизитШапки("ТоргТочка", Док.Вид()) = 1 Тогда
//				Док.кпкТоргТочка = ТоргТочка;
//			ИначеЕсли глЕстьРеквизитШапки("кпкТоргТочка", Док.Вид()) = 1 Тогда 
//				Док.кпкТоргТочка = ТоргТочка;
//			КонецЕсли; 
//		КонецЕсли;  
//		
//		Если глЕстьРеквизитШапки("Договор", Док.Вид()) = 1 Тогда
//			Док.Договор = Договор; 			
//		КонецЕсли; 
//		
//		Если глЕстьРеквизитШапки("Сумма", Док.Вид()) = 1 Тогда							
//			Если СуммаДок < 0 Тогда
//				Док.Сумма = СуммаДок*(-1);
//			Иначе
//				Док.Сумма = СуммаДок;			 
//			КонецЕсли;
//		КонецЕсли;  
//		
//	Иначе      
//		
//		Если глЕстьРеквизитШапки("Фирма", Док.Вид()) = 1 Тогда
//			Если (Фирма.Выбран() = 1) и (Док.Фирма <> Фирма) Тогда 
//				Док.Фирма = Фирма;
//				ОповеститьОСобытии("В документе " + АППредставлениеДок(Док.ТекущийДокумент()) + " изменена фирма", "i", 1, Док);		
//			КонецЕсли;         
//		КонецЕсли;        
//		
//		Если глЕстьРеквизитШапки("Контрагент", Док.Вид()) = 1 Тогда
//			Если (Контрагент.Выбран() = 1) и (Док.Контрагент <> Контрагент) Тогда
//				Док.Контрагент = Контрагент;
//				ОповеститьОСобытии("В документе " + АППредставлениеДок(Док.ТекущийДокумент()) + " изменен клиент", "i", 1, Док);		
//			КонецЕсли;   
//		КонецЕсли;   
//		
//		Если глЕстьРеквизитШапки("Договор", Док.Вид()) = 1 Тогда
//			Если (Договор.Выбран() = 1) и (Док.Договор <> Договор) Тогда 
//				Док.Договор = Договор;
//				ОповеститьОСобытии("В документе " + АППредставлениеДок(Док.ТекущийДокумент()) + " изменен договор", "i", 1, Док);		
//			КонецЕсли;     
//		КонецЕсли;    
//		
//		Если ИспТочек = 1 Тогда	
//			Если глЕстьРеквизитШапки("ТоргТочка", Док.Вид()) = 1 Тогда
//				Если (ТоргТочка.Выбран() = 1) и (Док.ТоргТочка <> ТоргТочка) Тогда
//					Док.ТоргТочка = ТоргТочка;
//					ОповеститьОСобытии("В документе " + АППредставлениеДок(Док.ТекущийДокумент()) + " изменена торговая точка", "i", 1, Док);		
//				КонецЕсли;        	    
//			ИначеЕсли глЕстьРеквизитШапки("кпкТоргТочка", Док.Вид()) = 1 Тогда 
//				Если (ТоргТочка.Выбран() = 1) и (Док.кпкТоргТочка <> ТоргТочка) Тогда
//					Док.кпкТоргТочка = ТоргТочка;
//					ОповеститьОСобытии("В документе " + АППредставлениеДок(Док.ТекущийДокумент()) + " изменена торговая точка", "i", 1, Док);		
//				КонецЕсли;        	    
//			КонецЕсли; 
//		КонецЕсли;                                                    
//		
//		Если глЕстьРеквизитШапки("Сумма", Док.Вид()) = 1 Тогда				
//			Если Док.Сумма <> СуммаДок Тогда
//				Если СуммаДок < 0 Тогда
//					Док.Сумма = СуммаДок*(-1);
//				Иначе
//					Док.Сумма = СуммаДок;			 
//				КонецЕсли;
//				ОповеститьОСобытии("В документе " + АППредставлениеДок(Док.ТекущийДокумент()) + " изменена сумма.", "i", 1, Док);
//			КонецЕсли; 
//		КонецЕсли;                                                
//		
//	КонецЕсли; 
//		
//	Если ВалютаАгента.Выбран() = 1 Тогда
//		Валюта = ВалютаАгента;
//	ИначеЕсли Договор.Выбран() = 1 Тогда
//		Док.Договор = Договор;
//		Валюта = Договор.ВалютаВзаиморасчетов;		
//	Иначе
//		Валюта = глЗначениеПоУмолчанию("ОсновнаяВалютаВзаиморасчетов");	
//	КонецЕсли; 	
//	
//	Если Валюта.Выбран() = 1 Тогда 
//		Если глЕстьРеквизитШапки("Валюта", Док.Вид()) = 1 Тогда
//			Док.Валюта 	  = Валюта;                      
//			Док.Курс 	  = Валюта.Курс.Получить(ТекущаяДата());
//			Док.Кратность = Валюта.Кратность.Получить(ТекущаяДата());
//		КонецЕсли; 		
//	КонецЕсли;         
//	
//	Если глЕстьРеквизитШапки("УчитыватьНДС", Док.Вид()) = 1 Тогда
//		Если Док.Фирма.ЮрЛицо.УчитыватьНДС = 1 Тогда
//			Док.УчитыватьНДС = 1;
//			Док.СуммаВклНДС	 = 1;
//		КонецЕсли; 
//	КонецЕсли;
//	
//КонецПроцедуры //УстановитьРеквизитыДокумента
//
////****************************************************************************** 
//
//Процедура УстановитьТипЦеныВДокументе(Эл, Док) 
//	
//	Если МобильноеПриложение = ВидАгентПлюс15 Тогда
//		
//		КодТипЦен = Число(Эл.ПолучитьАтрибут("PriceType")); 
//		
//		НомСтр = 0;
//		
//		Если тзТипыЦен.НайтиЗначение(КодТипЦен, НомСтр, "Код") > 0 Тогда					
//			тзТипыЦен.ПолучитьСтрокуПоНомеру(НомСтр);
//			ТипЦены = тзТипыЦен.ТипЦены;                                                     
//		КонецЕсли;
//		
//	Иначе
//		
//		ТипЦены = Док.ТипЦен;		
//		
//	КонецЕсли;
//	
//	Если ПустоеЗначение(ТипЦены) = 0 Тогда 
//	    Док.ТипЦен = ТипЦены;		
//	Иначе
//		ОповеститьОСобытии("В документе ""Заявка"" в мобильном устройстве указан неизвестный тип цен с кодом " + 
//							Строка(КодТипЦен) + ". Будет проставлен тип цены по умолчанию из договора.", "!");
//					
//		ТипЦеныДог = Док.Договор.ТипЦен;
//		Если ПустоеЗначение(ТипЦеныДог) = 1 Тогда 
//			Док.ТипЦен = глЗначениеПоУмолчанию("ОсновнойТипЦенПродажи");; 
//		Иначе
//			Док.ТипЦен = ТипЦеныДог; 
//		КонецЕсли;		
//	КонецЕсли;
//
//КонецПроцедуры //УстановитьТипЦеныВДокументе()
//
////****************************************************************************** 
//Функция ПолучитьКодТипаЦеныВКПК(ТипЦены, Объект)   
//	
//	Если ТипЦены.Выбран() = 0 Тогда		
//	    Возврат 0;
//	КонецЕсли;
//	
//	НомСтр  = 0;	
//	КодЦены	= 0;
//	Если тзТипыЦен.НайтиЗначение(ТипЦены, НомСтр, "ТипЦены") > 0 Тогда					
//		тзТипыЦен.ПолучитьСтрокуПоНомеру(НомСтр);
//		КодЦены = тзТипыЦен.Код;                                                     
//	КонецЕсли;
//	
//	Если КодЦены <> 0 Тогда 
//	    Возврат КодЦены;		
//	Иначе                                       
//			
//		ТипОбъекта = ТипЗначения(Объект);
//		Если ТипОбъекта = 11 Тогда 
//			СтрТипОбъекта = "элементе справочника " + Объект.Вид();
//		ИначеЕсли ТипОбъекта = 12 Тогда   
//			СтрТипОбъекта = "документе";  
//		Иначе                             
//			СтрТипОбъекта = "константе";  
//		КонецЕсли;    
//		
//		ДоступностьТиповЦен = АгентИнфо.ДоступностьТиповЦен;
//		
//		Если ДоступностьТиповЦен = 1 Тогда 
//			ОповеститьОСобытии("В выгружаемом списке типов цен для агента """ + ВыбАгент + """ не найден тип цены """ + Строка(ТипЦены) + """. Используется в " + СтрТипОбъекта + ": " + Строка(Объект), "!", 1, Объект);					
//		Иначе
//			ОповеститьОСобытии("В справочнике ""Настройка типов цен"" не найден тип цены """ + Строка(ТипЦены) + """. Используется в " + СтрТипОбъекта + ": " + Строка(Объект), "!", 1, Объект);								
//		КонецЕсли;
//		
//		Возврат 0;
//		
//	КонецЕсли;
//
//КонецФункции //ПолучитьКодТипаЦеныВКПК() 
//          
////******************************************************************************
//Процедура ЗаполнитьТаблицуКатегорий() 
//	
//	ТаблицаКатегорий.УдалитьСтроки();   
//	
//	Спр = СоздатьОбъект("Справочник.ЗначенияСвойств");
//	Спр.ИспользоватьВладельца(Константа.ВидСвойстваНоменклатуры);
//	Спр.ВыбратьЭлементы();   	
//	
//	пКод = 0;
//	Пока Спр.ПолучитьЭлемент() = 1 Цикл
//		Если (Спр.ПометкаУдаления() = 0) Тогда
//			пКод = пКод + 1; 			
//
//			ТаблицаКатегорий.НоваяСтрока();
//			ТаблицаКатегорий.Номер		  = пКод;
//			ТаблицаКатегорий.Наименование = Спр.Наименование;  
//			ТаблицаКатегорий.Категория    = Спр.ТекущийЭлемент();			
//		КонецЕсли;
//	КонецЦикла;  
//	
//КонецПроцедуры //ЗаполнитьТаблицуКатегорий() 

//******************************************************************************
//Возвращает идентификатор документа
Функция ВернутьИдентификаторДок(Док)

	Если м_СпрКПКДок.НайтиПоРеквизиту("Документ", Док, 1) = 1 Тогда
		ИдДок	= СокрП(м_СпрКпкДок.Идентификатор);
	Иначе
		ИдДок	= глАПСоздатьИдентификатор();
		м_СпрКпкДок.Новый();
		м_СпрКпкДок.Идентификатор 	= ИдДок;
		м_СпрКпкДок.ДатаДок 		= Док.ДатаДок;		
		м_СпрКпкДок.Документ 		= Док.ТекущийДокумент();		      
		
		//Если глЕстьРеквизитШапки("Агент", Док.Вид()) = 1 Тогда
		//	м_СпрКпкДок.АгентАвтор = Док.Агент;
		//КонецЕсли;	
		//
		//Если м_СпрКпкДок.АгентАвтор.Выбран() = 0 Тогда
		//	СпрДок = СоздатьОбъект("Справочник.кпкДокументы");				
		//	Если глЕстьРеквизитШапки("ДокОснование", Док.Вид()) = 1 Тогда
		//		Докум = Док.ДокОснование;
		//		Если СпрДок.НайтиПоРеквизиту("Документ", Докум, 1) = 1 Тогда
		//			м_СпрКпкДок.АгентАвтор = СпрДок.АгентАвтор; 
		//		КонецЕсли;	
		//	Иначе
		//		м_СпрКпкДок.АгентАвтор = ВыбАгент;
		//	КонецЕсли;	 
		//КонецЕсли;		
		
		Если ВыполнитьОперациюДляОбъекта(м_СпрКпкДок, "запись") = 0 Тогда 						
			Возврат 0;			
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат ИдДок;   
	
КонецФункции //ВернутьИдентификаторДок  

//******************************************************************************      
// Начало Список процедур и функций для обмена данными с приложением Агент Плюс: МТ
//******************************************************************************
Процедура УстановитьМобильноеПриложение(Агент)
	   	    
	МобильноеПриложение = "";
	Если Агент.Выбран() = 1 Тогда
		АгентИнфо = ПолучитьДанныеАгента(Агент);
		Если АгентИнфо.Выбран() = 1 Тогда
			МобильноеПриложение = ?(АгентИнфо.МобильноеПриложение.Выбран()=1, АгентИнфо.МобильноеПриложение, "");	
		КонецЕсли;			
	КонецЕсли;
	
Конецпроцедуры

////******************************************************************************
//Функция ДополнитьСлешВПуть(Каталог) 
//	      
//	Если Прав(Каталог, 1) <> "\" Тогда
//		Каталог = Каталог + "\";
//	КонецЕсли;                  	
//	
//КонецФункции  
//
////******************************************************************************      
//// Окончание Список процедур и функций для обмена данными с приложением Агент Плюс: МТ
////******************************************************************************
//
//    
////******************************************************************************
//// Процедуры выгрузки данных
////******************************************************************************
//Процедура ВыгрузкаМаршрутов(Текст, ПланАгента, ТДопКлиенты)
//	
//	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_Routes" + Т_ + "Struct:=RouteID,ClientID,=TPointID,RouteTime,=Comment");
//	ДокМ = СоздатьОбъект("Документ.КпкМаршрут");
//	ДокПлан = ПланАгента;
//	
//	//ищем в каждой дате документ "Маршрут" для выбранного торг. агента
//	Для ДатаМ = ДатаМ1 По ДатаМ2 Цикл
//		ЕстьМаршрут = 0;
//		ДокМ.ВыбратьДокументы(ДатаМ,ДатаМ);
//		Пока ДокМ.ПолучитьДокумент() = 1 Цикл
//		    Если (ДокМ.Агент = ВыбАгент) И (ДокМ.Проведен() = 1) Тогда
//				Если ДокМ.ДокОснование.Выбран() = 1 Тогда
//					Если ДокМ.ДокОснование.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;					
//				КонецЕсли;
//		        ЕстьМаршрут = 1;
//				Прервать;
//		    КонецЕсли;
//		КонецЦикла;
//	
//		ДеньXML = ДатаВФорматеXML(ДатаМ);
//		
//		Если ЕстьМаршрут = 1 Тогда
//		   
//			ДокМ.ВыбратьСтроки();
//			
//			Пока ДокМ.ПолучитьСтроку() = 1 Цикл  
//				
//				Клиент = ДокМ.Контрагент;
//				
//				КлиентИнфо = ПолучитьСправочныеДанные(Клиент);
//				Если ПустоеЗначение(КлиентИнфо) = 1 Тогда
//					КлиентИнфо = ЗаписатьСправочныеДанные(Клиент);
//				КонецЕсли; 					
//				
//				Если ИспТочек = 1 Тогда         					
//					Если ДокМ.ТоргТочка.Выбран() = 1 Тогда
//						Парам = ДокМ.ТоргТочка; 					
//						Клиент = Парам.Владелец;
//						
//						ИмяПарам = "ТоргТочка";	
//						ИдПар = Парам.Идентификатор;     
//					Иначе                                
//						Парам = ДокМ.Контрагент; 											
//						
//						ИмяПарам = "Клиент";	
//						ИдПар = КлиентИнфо.Идентификатор;     
//					КонецЕсли;
//				Иначе
//					Парам = ДокМ.Контрагент;
//					
//					ИмяПарам = "Клиент";
//					ИдПар = КлиентИнфо.Идентификатор;										
//				КонецЕсли;  
//							
//				Если Парам.Выбран() = 0 Тогда
//					Продолжить;
//				КонецЕсли;
//				
//				//Включаем в таблицу клиента и торг. точку, чтобы при выгрузке клиентов и точек они были выгружены
//				Стр = "";
//				Если ТДопКлиенты.НайтиЗначение(Парам, Стр, ИмяПарам) = 0 Тогда
//					ТДопКлиенты.НоваяСтрока();
//					ТДопКлиенты.УстановитьЗначение(ТДопКлиенты.НомерСтроки, ИмяПарам, Парам);
//					ТДопКлиенты.Должник   = 0;
//					ТДопКлиенты.Клиент = Клиент;
//				КонецЕсли;
//				
//				Время = ДеньXML;
//				Если ДокМ.ИспользоватьВремя = 1 Тогда
//				    Время = Время + " " + СтрЗаменить(ДокМ.Время,":","-");
//				КонецЕсли;
//				
//			    Текст.ДобавитьСтроку(" " + Т_ + СокрП(КлиентИнфо.Идентификатор) + Т_ 
//				+ СокрП(ИдПар) + Т_ + Время + Т_ + СокрЛП(ДокМ.Напоминание));
//			КонецЦикла;
//			
//		ИначеЕсли ДокПлан.Выбран() = 1 Тогда //если нет документа "Маршрут", то выгружаем маршрут на основе плана 
//			       
//			Если ДатаМ < ДокПлан.ДатаДок Тогда
//				Продолжить;
//			КонецЕсли;
//			
//			ДатаКол = ДатаМ - ДокПлан.ДатаДок + 1;
//			
//			Если (ДатаКол < 1) или (ДатаКол > 31) Тогда  
//				Продолжить;    
//			КонецЕсли; 			
//			
//			Колонка = "Д" + Строка(ДатаКол);
//			ДокПлан.ВыбратьСтроки();
//			
//			Пока ДокПлан.ПолучитьСтроку() = 1 Цикл
//			    Посещение = ДокПлан.ПолучитьАтрибут(Колонка);
//				Если ПустоеЗначение(Посещение) = 1 Тогда
//				    Продолжить;
//				КонецЕсли; 
//				
//				Клиент = ДокПлан.Контрагент;
//				
//				КлиентИнфо = ПолучитьСправочныеДанные(Клиент);
//				Если ПустоеЗначение(КлиентИнфо) = 1 Тогда
//					КлиентИнфо = ЗаписатьСправочныеДанные(Клиент);
//				КонецЕсли;   
//					
//				Если ИспТочек = 1 Тогда	  
//					Если ДокПлан.ТоргТочка.Выбран() = 1 Тогда
//						Парам = ДокПлан.ТоргТочка;
//						ИдПар = Парам.Идентификатор;
//					Иначе                           
//						Парам = ДокПлан.Контрагент;
//						ИдПар = КлиентИнфо.Идентификатор;					
//					КонецЕсли;
//				Иначе 
//					Парам = ДокПлан.Контрагент;
//					ИдПар = КлиентИнфо.Идентификатор;					
//				КонецЕсли;
//				
//				Если Парам.Выбран() = 0 Тогда
//					Продолжить;
//				КонецЕсли;     				
//				
//				Время = ДеньXML;
//			    Текст.ДобавитьСтроку(" " + Т_ + СокрП(КлиентИнфо.Идентификатор) + Т_ 
//				+ СокрП(ИдПар) + Т_ + Время + Т_ + "");
//			КонецЦикла; 
//			
//		ИначеЕсли НомерДняНедели(ДатаМ) < 6 Тогда //если дата не выходной, выводим сообщение
//			ОповеститьОСобытии("Не выгружен маршрут на дату " + Строка(ДатаМ), "i", 0);
//		КонецЕсли;
//		
//	КонецЦикла;
//
//	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_Routes");
//	
//КонецПроцедуры //ВыгрузкаМаршрутов()
//
////******************************************************************************
////Процеура предназначена для выгрузки в КПК описания скриптов заполнения документов
////Скрипты заполнения документов вызываются в КПК из контекстного меню табличной части документов
//Процедура ВыгрузкаОписанийСкриптовЗаполненияДокументов(Текст)
//	Текст.ДобавитьСтроку("<Begin>" +Т_+ "Ref_FillDocScripts" +Т_+ "Struct:DocList,Name,Message,FileNameAndFunct");
//	Текст.ДобавитьСтроку("Order" +Т_+ "Сред. продажи минус наличие" +Т_+ "Заполнить документ согласно средних данных истории продаж и наличия товара в точке?" +Т_+ "FillDocuments.lua:FillOrder");
//	Текст.ДобавитьСтроку("Order" +Т_+ "Сред. прод. минус налич.(в упак.)" +Т_+ "Заполнить документ согласно средних данных истории продаж и наличия товара в точке (с округлением до упаковок)?" +Т_+ "FillDocuments.lua:FillOrderPack");
//	Текст.ДобавитьСтроку("Sale,RSale" +Т_+ "Сред. продажи минус наличие" +Т_+ "Заполнить документ согласно средних данных истории продаж и наличия товара в точке?" +Т_+ "FillDocuments.lua:FillSale");
//	Текст.ДобавитьСтроку("Sale,RSale" +Т_+ "Сред. прод. минус налич.(в упак.)" +Т_+ "Заполнить документ согласно средних данных истории продаж и наличия товара в точке (с округлением до упаковок)?" +Т_+ "FillDocuments.lua:FillSalePack");
//	Текст.ДобавитьСтроку("Move"  +Т_+ "Нет в машине, но есть в офисе" +Т_+ "Заполнить документ товарами, которых нет в машине, но есть в офисе (с округлением до упаковок)?" +Т_+ "FillDocuments.lua:FillMovePack");
//	Текст.ДобавитьСтроку("<End>" +Т_+ "Ref_FillDocScripts");
//КонецПроцедуры
//
////******************************************************************************
////Процеура предназначена для выгрузки в КПК описания скриптов печати документов
////Поддержка печати используется при "торговле с колес" в Агент+ конфигурации "Инвент"
////Процедура так же выгружает привязку печатных форм к фирмам документов (формирует 
////дополнительный тэг Ref_FirmsPrnLinks)
//Процедура ВыгрузкаОписанийСкриптовПечати(Текст)
//    
//	/////////////////////////////////////////////////////////////////////////
//	//Выгрузка описаний скриптов печатных форм документов	
//	/////////////////////////////////////////////////////////////////////////
//	
//	Текст.ДобавитьСтроку("<Begin>" +Т_+ "Ref_PrnScripts" +Т_+ "Struct:ObjCode,Name,FileName,Copyes,=ScriptName,=TextMode");
//	
//	Спр = СоздатьОбъект("Справочник.КпкПечатныеФормы");
//	
//	Спр.ВыбратьЭлементы();
//	Пока Спр.ПолучитьЭлемент() = 1 Цикл
//	    Если Спр.ПометкаУдаления() = 1 Тогда
//	        Продолжить;
//		КонецЕсли;
//		Стр = СокрЛП(Спр.ВидДокументаВКПК) +Т_+ СокрЛП(Спр.Наименование) +Т_+ СокрЛП(Спр.Скрипт)
//			+Т_+ Строка(Спр.ЧислоКопий) +Т_+ СокрЛП(Спр.Код) +Т_+ Строка(Спр.Текстовая);
//		Текст.ДобавитьСтроку(Стр);
//	КонецЦикла;
//
//	Текст.ДобавитьСтроку("<End>" +Т_+ "Ref_PrnScripts");
//
//	/////////////////////////////////////////////////////////////////////////
//	//Выгрузка привязки печатных форм документов к фирмам
//	/////////////////////////////////////////////////////////////////////////
//	
//	ПеречВидыПечФормОбщие = Перечисление.КпкВидыПечатныхФорм.Общие;
//	
//	Текст.ДобавитьСтроку("<Begin>" +Т_+ "Ref_FirmsPrnLinks" +Т_+ "Struct:FirmID,ScriptName");
//	
//	СпрФ = СоздатьОбъект("Справочник.Фирмы");
//	СпрФ.ВыбратьЭлементы();
//	Пока СпрФ.ПолучитьЭлемент() = 1 Цикл
//		ФирмаИнфо = ПолучитьСправочныеДанные(СпрФ);
//		Если ФирмаИнфо.Выбран() = 0 Тогда
//			ФирмаИнфо = ЗаписатьСправочныеДанные(СпрФ);
//		КонецЕсли;
//	    Если СпрФ.ПометкаУдаления() = 1 Тогда
//	        Продолжить;
//		ИначеЕсли ФирмаИнфо.КпкВыгружать = 0 Тогда
//			Продолжить;
//		КонецЕсли;
//		ИдФирмы 		= СокрП(ФирмаИнфо.Идентификатор);
//		ВидФормыФирмы 	= ФирмаИнфо.КпкВидПечатныхФорм;
//		Если ВидФормыФирмы.Выбран() = 0 Тогда
//		    ВидФормыФирмы = Перечисление.КпкВидыПечатныхФорм.Официальные;
//		КонецЕсли;
//		
//		// Выгружаются привязки форм в два прохода:
//		// на первом проходе выгружаются привязки, специфичные для фирмы
//		// на втором - привязки, общие для всех фирм.
//		Для Поз = 1 По 2 Цикл
//			Спр.ВыбратьЭлементы();
//			Пока Спр.ПолучитьЭлемент() = 1 Цикл
//			    Если Спр.ПометкаУдаления() = 1 Тогда
//			        Продолжить;
//				ИначеЕсли Спр.ВидФормы <> ВидФормыФирмы Тогда
//					Продолжить;
//				КонецЕсли;
//				Текст.ДобавитьСтроку(ИдФирмы +Т_+ СокрЛП(Спр.Код));
//			КонецЦикла;
//			Если ВидФормыФирмы = ПеречВидыПечФормОбщие Тогда
//			    Прервать; //может быть и такое, что за фирмой закреплены только общие формы
//			Иначе
//				ВидФормыФирмы = ПеречВидыПечФормОбщие;
//			КонецЕсли;
//		КонецЦикла;
//		
//	КонецЦикла;
//	
//	Текст.ДобавитьСтроку("<End>" +Т_+ "Ref_FirmsPrnLinks");
//	
//КонецПроцедуры
//
//
////******************************************************************************
////Процеура предназначена для выгрузки в КПК описания скриптов отчетов для возможности
////добавления в Агент+ собственных отчетов
////Поддержка скриптов отчетов доступна (пока) только в Агент+ "Инвент"
//Процедура ВыгрузкаОписанийСкриптовОтчетов(Текст)
//	
//	Текст.ДобавитьСтроку("<Begin>" +Т_+ "Ref_RepScripts" + Т_+ "Struct:Name,FileName,=TextMode");
//	                                                       
//	Для Поз = 0 По 1 Цикл
//		Если Поз = 0 Тогда
//			Кнц = ".lua";
//		Иначе
//			Кнц = "_txt.lua";
//		КонецЕсли;
//		
//		//Ссылка на файл скрипта формирования отчета "Реестр кассовых ордеров"
//		Текст.ДобавитьСтроку("Реестр кассовых ордеров"  + Т_+ "RepCashList"   + Кнц +Т_+ Строка(Поз));
//		                                                
//		//Ссылка на файл скрипта формирования отчета "Остатки товаров"
//		Текст.ДобавитьСтроку("Остатки товаров" 		    + Т_+ "RepGoodsList"  + Кнц +Т_+ Строка(Поз));
//		
//		//Ссылка на файл скрипта формирования отчета "Взаиморасчеты с клиентом"
//		Текст.ДобавитьСтроку("Взаиморасчеты с клиентом" + Т_+ "RepSettlement" + Кнц +Т_+ Строка(Поз));
//		
//		//Ссылка на файл скрипта формирования отчета "Взаиморасчеты с клиентом"
//		Текст.ДобавитьСтроку("Прайс-лист" 			    + Т_+ "RepPriceList"  + Кнц +Т_+ Строка(Поз));
//		
//		Текст.ДобавитьСтроку("Отчет по заявкам"  		+ Т_+ "RepOrder"	  + Кнц +Т_+ Строка(Поз));
//		
//		Текст.ДобавитьСтроку("Отчет по продажам" 		+ Т_+ "RepSale"		  + Кнц +Т_+ Строка(Поз));
//	
//		Текст.ДобавитьСтроку("Остатки и цены товаров" 	+ Т_+ "RepGoodsList2" + Кнц +Т_+ Строка(Поз));
//		
//		Текст.ДобавитьСтроку("Оборотная ведомость" 		+ Т_+ "RepOborotka"   + Кнц +Т_+ Строка(Поз));
//				
//		//Ссылка на файл скрипта формирования отчета "Просроченные сертификаты"
//		//Добавлен, начиная с версии ПО "Агент Плюс" 1.5.19f 	
//		Текст.ДобавитьСтроку("Просроченные сертификаты" + Т_+ "RepSertif"     + Кнц +Т_+ Строка(Поз));
//		
//	КонецЦикла;
//	
//	Текст.ДобавитьСтроку("<End>" +Т_+ "Ref_RepScripts");
//КонецПроцедуры
//
////******************************************************************************
////Процеура предназначена для выгрузки в КПК скидок
////За выгрузку скидок отвечает тэг Ref_Discounts
//Процедура ВыгрузкаСкидок(Текст)
//	
//	Текст.ДобавитьСтроку("<Begin>" +Т_+ "Ref_Discounts" +Т_+ "Struct:Discount,=Barcode");
//	
//	Спр = СоздатьОбъект("Справочник.Скидки");
//	Спр.ВыбратьЭлементы();
//	
//	Пока Спр.ПолучитьЭлемент() = 1 Цикл
//		
//		Если Спр.ПометкаУдаления() = 1 Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		//Текст.ДобавитьСтроку(Строка(Спр.Процент) +Т_+ СокрЛП(Спр.ШтрихКод) ); 
//		Текст.ДобавитьСтроку(Строка(Спр.Процент) +Т_+ СокрЛП("") );
//		
//	КонецЦикла;
//	
//	Текст.ДобавитьСтроку("<End>" +Т_+ "Ref_Discounts");   
//	
//КонецПроцедуры  
//
////******************************************************************************
//
//Процедура ЗаполнитьТаблицуЗначениямиИзДокумента(Док, ТЗ, ТЗФакт)
//	
//	Док.ВыбратьСтроки();                       
//	
//	Пока Док.ПолучитьСтроку() = 1 Цикл             
//		                         
//		Стр = 0;
//		
//		ТЗ.НоваяСтрока();
//		ТЗ.Категория = Док.КатегорияНоменклатуры; 
//		ТЗ.СуммаПлан = Док.Сумма; 
//		ТЗ.КоличествоПлан = Док.Количество;		
//		ТЗ.ТипПлана = Строка(Док.ТипПлана.Код);  
//		
//		Если ТЗФакт.НайтиЗначение(Док.КатегорияНоменклатуры, Стр, ) = 1 Тогда   
//			ТЗФакт.ПолучитьСтрокуПоНомеру(Стр);
//			ТЗ.СуммаФакт = ТЗФакт.СуммаФакт; 
//			ТЗ.КоличествоФакт = ТЗФакт.КоличествоФакт;				                                 
//		Иначе                                                                    
//			ТЗ.СуммаФакт = 0; 
//			ТЗ.КоличествоФакт = 0;				                                 			
//		КонецЕсли;		
//		
//	КонецЦикла;                                
//	
//КонецПроцедуры //ЗаполнитьТаблицуЗначениямиИзДокумента
//
////******************************************************************************
//// Функция получает плановые и фактические данные по продажам категорий номенклатуры
////
//Функция ПолучитьПланФактныеДанные()   
//	
//	НачДата = НачМесяца(ТекущаяДата());
//	КонДата = КонМесяца(ТекущаяДата());
//	 
//	ТЗФакт = создатьобъект("ТаблицаЗначений");
//	
//	ТЗФакт.НоваяКолонка("Категория", "Справочник.ЗначенияСвойств",,,,,,);                                                       
//	ТЗФакт.НоваяКолонка("СуммаФакт", "Число", 15, 2,,,,); 
//	ТЗФакт.НоваяКолонка("КоличествоФакт", "Число", 15, 2,,,,);
//	
//	Если КонДата>ПолучитьДатуТА() Тогда
//		КонДата = ПолучитьДатуТА();
//	КонецЕсли; 
//	
//	Если НачДата>КонДата Тогда
//		НачДата = КонДата;
//	КонецЕсли;
//	
//	//Создание объекта типа Запрос
//	Запрос = СоздатьОбъект("Запрос");
//	ТекстЗапроса = 
//	"//{{ЗАПРОС(Сформировать)  
//	|Период с НачДата по КонДата; 	
//	|Обрабатывать НеПомеченныеНаУдаление;
//	|Док = Регистр.Продажи.ТекущийДокумент;	 
//	|Категория = Регистр.Продажи.Номенклатура.ОсновноеСвойство.ЗначениеСвойства;	
//	|ПродСтоимость = Регистр.Продажи.ПродСтоимость; 
//	|Количество = Регистр.Продажи.Количество;
//	|Условие(Док.Вид() = ""Реализация""); 	
//	|Функция СуммаФакт = Сумма(ПродСтоимость); 
//	|Функция КоличествоФакт = Сумма(Количество);	
//	|Группировка Док;	 	
//	|Группировка Категория;	 	
//	|"//}}ЗАПРОС
//	;       
//	
//	// Если ошибка в запросе, то выход из процедуры
//	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
//		Возврат 0;
//	КонецЕсли; 	        
//	
//	СпрДок = СоздатьОбъект("Справочник.кпкДокументы");
//	
//	Пока Запрос.Группировка(1) = 1 Цикл	
//		
//		ДокАгент = ПолучитьАгентаПоДокументу(Запрос.Док);
//		
//		Если ДокАгент = ВыбАгент Тогда  
//			
//			Пока Запрос.Группировка(2) = 1 Цикл       
//				ТЗФакт.НоваяСтрока();
//				ТЗФакт.Категория = Запрос.Категория;; 
//				ТЗФакт.СуммаФакт = Запрос.СуммаФакт;
//				ТЗФакт.КоличествоФакт = Запрос.КоличествоФакт;         									
//			КонецЦикла;
//			
//		КонецЕсли;						
//		
//	КонецЦикла;   
//	  
//    ТЗФакт.Свернуть("Категория","СуммаФакт, КоличествоФакт");     
//	
//	ТЗ = СоздатьОбъект("ТаблицаЗначений");
//	
//	ТЗ.НоваяКолонка("Категория", "Справочник.ЗначенияСвойств",,,,,,);                                                       
//	ТЗ.НоваяКолонка("СуммаФакт", "Число", 15, 2,,,,); 
//	ТЗ.НоваяКолонка("КоличествоФакт", "Число", 15, 2,,,,); 
//	ТЗ.НоваяКолонка("СуммаПлан", "Число", 15, 2,,,,); 
//	ТЗ.НоваяКолонка("КоличествоПлан", "Число", 15, 2,,,,); 
//	ТЗ.НоваяКолонка("ТипПлана", "Число", 15, 2,,,,);
//	
//	Док = СоздатьОбъект("Документ.кпкПланПродаж");
//	Док.ВыбратьДокументы(НачДата,КонДата);
//	
//	Пока Док.ПолучитьДокумент() = 1 Цикл
//	
//		Если Док.Проведен() = 1 Тогда
//			
//			Если (Док.ТипПлана.Выбран() = 0) или (Док.Агент.Выбран() = 0) Тогда			
//				Продолжить;								
//			КонецЕсли;  
//			
//			Если Док.Агент <> ВыбАгент Тогда
//				Продолжить;
//			КонецЕсли;
//			
//			ЗаполнитьТаблицуЗначениямиИзДокумента(Док.ТекущийДокумент(), ТЗ, ТЗФакт);		
//						
//		КонецЕсли;
//	КонецЦикла;   
//	
//	Возврат ТЗ;
//	
//КонецФункции //ПолучитьПланФактныеДанные()  
//
////******************************************************************************
//Функция ПолучитьЕдиницуПоКоду(Товар, Код)   
//	                                          
//	СпрЕд = СоздатьОбъект("Справочник.Единицы");
//	               
//	СпрЕд.ИспользоватьВладельца(Товар);
//	СпрЕд.ПорядокРеквизита("Коэффициент");
//	СпрЕд.ВыбратьЭлементы(1);
//	
//	Сч = 0;                             
//	
//	Пока СпрЕд.ПолучитьЭлемент() = 1 Цикл
//		
//		Если СпрЕд.Коэффициент = 0 Тогда
//			Продолжить;
//		КонецЕсли;  
//		
//		Если Сч = Код Тогда
//			Возврат СпрЕд.ТекущийЭлемент();  
//		КонецЕсли; 
//		
//		Сч = Сч + 1;		
//	КонецЦикла;     
//	
//	Если Сч = 0 Тогда
//		Возврат Товар.ОсновнаяЕдиница;
//	КонецЕсли;  	
//
//КонецФункции //ПолучитьЕдиницуПоКоду()    
//
////******************************************************************************
////Процеура предназначена для выгрузки в КПК планов продаж товаров и результатов исполнения планов
//Процедура ВыгрузкаПлановПродаж(Текст)
//	
//	Текст.ДобавитьСтроку("<Begin>" +Т_+ "Ref_PlanOfSales" +Т_+ "Struct:ObjID,Name,Code,GoodsCat,PlanSum,PlanAmt,PlanSumF,PlanAmtF");
//	      
//	ТЗ = ПолучитьПланФактныеДанные();	
//	//////////////////
//	//////////////////
//	                                 
//	ТЗ.ВыбратьСтроки();
//	
//	Пока ТЗ.ПолучитьСтроку() = 1 Цикл
//			      
//		КодПл = ТЗ.ТипПлана;
//				
//		Идент = глАПСоздатьИдентификатор();
//		
//		Стр = 0;  
//		
//		Катег = ТЗ.Категория.Наименование + "                                                                                ";
//		
//		Если ТаблицаКатегорий.НайтиЗначение(Лев(Катег, 50),Стр,) = 1 Тогда
//			ТаблицаКатегорий.ПолучитьСтрокуПоНомеру(Стр);
//			Кат = Строка(ТаблицаКатегорий.Номер);
//		Иначе                            
//			Кат = "";
//		КонецЕсли;	
//		
//		Текст.ДобавитьСтроку(Строка(Идент) +Т_+ "" +Т_+ КодПл +Т_+ Кат +Т_+ Строка(ТЗ.СуммаПлан) +Т_+ Строка(ТЗ.КоличествоПлан) +Т_+ Строка(ТЗ.СуммаФакт) +Т_+ Строка(ТЗ.КоличествоФакт));
//		
//	КонецЦикла;
//	
//	Текст.ДобавитьСтроку("<End>" +Т_+ "Ref_PlanOfSales");
//	
//КонецПроцедуры //ВыгрузкаПлановПродаж
//
////******************************************************************************   
//
////Процедура предназначена для выгрузки в КПК описания дополнительных реквизитов
////справочников и документов. Дополнительные реквизиты создаются
////программистом исходя из задачи.
//Процедура ВыгрузкаСтруктурТаблиц(Текст)
//	
//	//коды поддерживаемых типов реквизитов:
//	ТипЧисло	= "1";  //для этого типа в параметре Size указывается количество знаков после запятой (от 0 до 4)
//	ТипСтрока	= "2";  //для этого типа в параметре Size указывается максимальный размер строки (до 255 символов)
//	ТипДата		= "3";
//	ТипПеречисл	= "10"; //Перечисление
//	ТипБулево	= "20"; //Булево
//	
//	// Можно использовать необязательный параметр ColWidth. В нем указывается ширина колонки
//	// в пикселях для каждого дополнительного  реквизита табличной части документов
//	Текст.ДобавитьСтроку("<Begin>" +Т_+ "Ref_TblStruct" +Т_+ "Struct:TblCD,FormOrder,Name,Present,Type,TypeID,Size,Flags,=ColWidth");  
//    
//	//Параметр Flags используется для указания режимов редкатирования реквизитов пользователем.
//	//Значения параметра:
//	//	1 - реквизит "обязательный" (показывается при редактировании красным)
//	//	2 - запрет изменения реквизита (только для существующего объекта, для создаваемого объекта изменение реквизита разрешено)
//
//	//описание дополнительных реквизитов справочника "Фирмы": (создаются программистом исходя из задачи)
//	//описанные ниже названия полей указываются в параметрах тега Ref_Firms
//	Текст.ДобавитьСтроку("Firms"   +Т_+ "1"  + Т_+ "FNAME" 	  + Т_+ "Полн.наименование"+Т_+ ТипСтрока +Т_+ "" +Т_+ "128"+Т_+ "0"+Т_+ "");
//	Текст.ДобавитьСтроку("Firms"   +Т_+ "2"  + Т_+ "INN" 	  + Т_+ "ИНН"  			   +Т_+ ТипСтрока +Т_+ "" +Т_+ "32" +Т_+ "0"+Т_+ "");
//	Текст.ДобавитьСтроку("Firms"   +Т_+ "3"  + Т_+ "KPP" 	  + Т_+ "КПП"  			   +Т_+ ТипСтрока +Т_+ "" +Т_+ "32" +Т_+ "0"+Т_+ "");
//	Текст.ДобавитьСтроку("Firms"   +Т_+ "4"  + Т_+ "OKPO" 	  + Т_+ "ОКПО"  		   +Т_+ ТипСтрока +Т_+ "" +Т_+ "16" +Т_+ "0"+Т_+ "");
//	Текст.ДобавитьСтроку("Firms"   +Т_+ "5"  + Т_+ "BANK" 	  + Т_+ "Банк"  		   +Т_+ ТипСтрока +Т_+ "" +Т_+ "64" +Т_+ "0"+Т_+ "");
//	Текст.ДобавитьСтроку("Firms"   +Т_+ "6"  + Т_+ "BIK" 	  + Т_+ "БИК"  			   +Т_+ ТипСтрока +Т_+ "" +Т_+ "32" +Т_+ "0"+Т_+ "");
//	Текст.ДобавитьСтроку("Firms"   +Т_+ "7"  + Т_+ "BANKADR"  + Т_+ "Адрес банка"  	   +Т_+ ТипСтрока +Т_+ "" +Т_+ "64" +Т_+ "0"+Т_+ "");
//	Текст.ДобавитьСтроку("Firms"   +Т_+ "8"  + Т_+ "KSCHET"   + Т_+ "Кор.счет"  	   +Т_+ ТипСтрока +Т_+ "" +Т_+ "32" +Т_+ "0"+Т_+ "");
//	Текст.ДобавитьСтроку("Firms"   +Т_+ "9"  + Т_+ "RSCHET"   + Т_+ "Расч.счет"  	   +Т_+ ТипСтрока +Т_+ "" +Т_+ "32" +Т_+ "0"+Т_+ "");
//	Текст.ДобавитьСтроку("Firms"   +Т_+ "10" + Т_+ "DIREKTOR" + Т_+ "Директор"  	   +Т_+ ТипСтрока +Т_+ "" +Т_+ "64" +Т_+ "0"+Т_+ "");
//	Текст.ДобавитьСтроку("Firms"   +Т_+ "11" + Т_+ "GLBUH" 	  + Т_+ "Гл.бухгалтер"     +Т_+ ТипСтрока +Т_+ "" +Т_+ "64" +Т_+ "0"+Т_+ "");     	
//	Текст.ДобавитьСтроку("Firms"   +Т_+ "12" + Т_+ "IP" 	  + Т_+ "ИП"  			   +Т_+ ТипЧисло  +Т_+ "" +Т_+ "1"  +Т_+ "0"+Т_+ "");	
//	Текст.ДобавитьСтроку("Firms"   +Т_+ "13" + Т_+ "REKV" 	  + Т_+ "Реквизиты ИП"     +Т_+ ТипСтрока +Т_+ "" +Т_+ "64" +Т_+ "0"+Т_+ "");
//	
//	//описание дополнительных реквизитов справочника "Клиенты": (создаются программистом исходя из задачи)
//	//описанные ниже названия полей указываются в параметрах тега Ref_Clients
//	Текст.ДобавитьСтроку("Clients" +Т_+ "1"  +Т_+ "INN" 	 +Т_+ "ИНН" 			   +Т_+ ТипСтрока +Т_+ "" +Т_+ "21" +Т_+ "1"+Т_+ ""); //Flags = 1 - обязательный реквизит
//	Текст.ДобавитьСтроку("Clients" +Т_+ "2"  +Т_+ "KPP" 	 +Т_+ "КПП" 			   +Т_+ ТипСтрока +Т_+ "" +Т_+ "9"  +Т_+ "1"+Т_+ ""); //Flags = 1 - обязательный реквизит
//	Текст.ДобавитьСтроку("Clients" +Т_+ "3"  +Т_+ "FNAME" 	 +Т_+ "Полн.наименование"  +Т_+ ТипСтрока +Т_+ "" +Т_+ "128"+Т_+ "0"+Т_+ "");
//	Текст.ДобавитьСтроку("Clients" +Т_+ "4"  +Т_+ "MSALES" 	 +Т_+ "Оборот продаж" 	   +Т_+ ТипЧисло  +Т_+ "" +Т_+ "2"  +Т_+ "2"+Т_+ ""); //Flags = 2 - запрет изменения
//	Текст.ДобавитьСтроку("Clients" +Т_+ "5"  +Т_+ "SROKDOG"  +Т_+ "Договор до" 		   +Т_+ ТипДата   +Т_+ "" +Т_+ ""   +Т_+ "0"+Т_+ "");
//	Текст.ДобавитьСтроку("Clients" +Т_+ "6"  +Т_+ "VIP" 	 +Т_+ "VIP-клиент" 		   +Т_+ ТипБулево +Т_+ "" +Т_+ ""   +Т_+ "0"+Т_+ "");
//	Текст.ДобавитьСтроку("Clients" +Т_+ "7"  +Т_+ "CLKONKUR" +Т_+ "Клиент конкурентов" +Т_+ ТипБулево +Т_+ "" +Т_+ ""   +Т_+ "0"+Т_+ "");
//	Текст.ДобавитьСтроку("Clients" +Т_+ "8"  +Т_+ "BANK" 	 +Т_+ "Банк"  			   +Т_+ ТипСтрока +Т_+ "" +Т_+ "64" +Т_+ "0"+Т_+ "");
//	Текст.ДобавитьСтроку("Clients" +Т_+ "9"  +Т_+ "BIK" 	 +Т_+ "БИК"  			   +Т_+ ТипСтрока +Т_+ "" +Т_+ "32" +Т_+ "0"+Т_+ "");	
//	Текст.ДобавитьСтроку("Clients" +Т_+ "10" +Т_+ "KSCHET" 	 +Т_+ "Кор.счет"  		   +Т_+ ТипСтрока +Т_+ "" +Т_+ "32" +Т_+ "0"+Т_+ "");
//	Текст.ДобавитьСтроку("Clients" +Т_+ "11" +Т_+ "RSCHET" 	 +Т_+ "Расч.счет"  		   +Т_+ ТипСтрока +Т_+ "" +Т_+ "32" +Т_+ "0"+Т_+ "");
//	
//	//описание дополнительных реквизитов справочника "Торговые точки": (создаются программистом исходя из задачи)
//	//описанные ниже названия полей указываются в параметрах тега Ref_TPoints
//	Текст.ДобавитьСтроку("TPoints" +Т_+ "1" +Т_+ "TPTYPE" 	+Т_+ "Тип точки" +Т_+ ТипПеречисл +Т_+ MY_GUID_ENUM_TPTYPE +Т_+ "" +Т_+ "0"+Т_+ "");
//	Текст.ДобавитьСтроку("TPoints" +Т_+ "2" +Т_+ "WORKTIME" +Т_+ "Время работы" +Т_+ ТипСтрока +Т_+ " " +Т_+ "64" +Т_+ "0"+Т_+ "");
//	
//	//описание дополнительных реквизитов справочника "Номенклатура" (в КПК - "Price"): (создаются программистом исходя из задачи)
//	//описанные ниже названия полей указываются в параметрах тега Ref_Price
//	Текст.ДобавитьСтроку("Price"   +Т_+ "1" +Т_+ "GTD" 		+Т_+ "ГТД"				+Т_+ ТипПеречисл+Т_+ MY_GUID_ENUM_GTD 	+Т_+ ""+Т_+ "0"+Т_+ "");
//	Текст.ДобавитьСтроку("Price"   +Т_+ "2" +Т_+ "STRANA" 	+Т_+ "Страна-произв."	+Т_+ ТипПеречисл+Т_+ MY_GUID_ENUM_STRANA+Т_+ ""+Т_+ "0"+Т_+ "");
//	
//	//описание дополнительных реквизитов справочника "Сертификаты": (создаются программистом исходя из задачи)
//	//описанные ниже названия полей указываются в параметрах тега Ref_Sertif
//	Текст.ДобавитьСтроку("Sertif" +Т_+ "1" +Т_+ "BLANKN" 	+Т_+ "Бланк №"			+Т_+ ТипСтрока+Т_+ "" +Т_+ "32" +Т_+ "0"+Т_+ "");
//	Текст.ДобавитьСтроку("Sertif" +Т_+ "2" +Т_+ "ADRES" 	+Т_+ "Адрес"			+Т_+ ТипСтрока+Т_+ "" +Т_+ "64" +Т_+ "0"+Т_+ "");
//	
//	//описание дополнительных реквизитов справочника "Склады": (создаются программистом исходя из задачи)
//	//описанные ниже названия полей указываются в параметрах тега Ref_Stores
//	Текст.ДобавитьСтроку("Stores" +Т_+ "1" +Т_+ "AVTOSKLAD" +Т_+ "Передвижной склад"+Т_+ ТипБулево+Т_+ "" +Т_+ ""   +Т_+ "0"+Т_+ "");
//	Текст.ДобавитьСтроку("Stores" +Т_+ "2" +Т_+ "TONNAJ" 	+Т_+ "Тоннаж"			+Т_+ ТипЧисло +Т_+ "" +Т_+ "3"  +Т_+ "0"+Т_+ "");
//	Текст.ДобавитьСтроку("Stores" +Т_+ "3" +Т_+ "TEHOSM" 	+Т_+ "Техосмотр"		+Т_+ ТипДата  +Т_+ "" +Т_+ ""   +Т_+ "0"+Т_+ "");
//	
//	//описание дополнительных реквизитов документа "Заявка"
//	//Текст.ДобавитьСтроку("Order"  +Т_+ "1" +Т_+ "SERTIF" 	 +Т_+ "Сертификаты" 			   + Т_+ ТипБулево   + Т_+ " " + Т_ + ""   + Т_ + "0" + Т_ + "");
//	//Текст.ДобавитьСтроку("Order"  +Т_+ "2" +Т_+ "REPORT" 	 +Т_+ "Отчет по взаиморасчетам" + Т_+ ТипБулево   + Т_+ " " + Т_ + ""   + Т_ + "0" + Т_ + "");
//	//Текст.ДобавитьСтроку("Order"  +Т_+ "3" +Т_+ "SROK" 	 +Т_+ "Оплата до" 			   + Т_+ ТипДата     + Т_+ " " + Т_ + ""   + Т_ + "0" + Т_ + "");
//	//Текст.ДобавитьСтроку("Order"  +Т_+ "4" +Т_+ "ADRES" 	 +Т_+ "Альтерн.адрес доставки"  + Т_+ ТипСтрока   + Т_+ " " + Т_ + "64" + Т_ + "0" + Т_ + "");
//	//Текст.ДобавитьСтроку("Order"  +Т_+ "5" +Т_+ "DOSTAVKA" +Т_+ "Вид доставки" 		   + Т_+ ТипПеречисл + Т_+ MY_GUID_ENUM_DLVTYPE + Т_ + "0" + Т_+ "0"+ Т_ + "");   //Flags = 1 - обязательный реквизит	
//	
//	//описание дополнительных реквизитов документа "Реализация"
//	//Текст.ДобавитьСтроку("Sale"   +Т_+ "1" +Т_+ "DOSTAVKA"  +Т_+ "Вид доставки"			+Т_+ ТипПеречисл+Т_+ MY_GUID_ENUM_DLVTYPE +Т_+ "0" +Т_+ "0" + Т_ + "");
//	//Текст.ДобавитьСтроку("Sale"   +Т_+ "2" +Т_+ "ADRES" 	+Т_+ "Альтерн.адрес доставки"+Т_+ТипСтрока	+Т_+ " " +Т_+ "64" +Т_+ "0" + Т_ + "");
//	//Текст.ДобавитьСтроку("Sale"   +Т_+ "3" +Т_+ "DOSTAVLEN" +Т_+ "Товар доставлен"		+Т_+ ТипБулево 	+Т_+ " " +Т_+ "" +Т_+ "0" + Т_ + "");
//	
//	//описание дополнительных реквизитов документа "Мерчендайзинг"
//	Текст.ДобавитьСтроку("Merch"  +Т_+ "1" +Т_+ "FKAT_A" 	+Т_+ "Фейсинг A (категория товаров ""A"")" + Т_+ ТипЧисло + Т_+ "" +Т_+ "0" +Т_+ "0" + Т_ + ""); 
//	Текст.ДобавитьСтроку("Merch"  +Т_+ "2" +Т_+ "FKAT_B" 	+Т_+ "Фейсинг B (категория товаров ""B"")" + Т_+ ТипЧисло + Т_+ "" +Т_+ "0" +Т_+ "0" + Т_ + "");
//	Текст.ДобавитьСтроку("Merch"  +Т_+ "3" +Т_+ "FKAT_C" 	+Т_+ "Фейсинг C (категория товаров ""C"")" + Т_+ ТипЧисло + Т_+ "" +Т_+ "0" +Т_+ "0" + Т_ + "");
//	Текст.ДобавитьСтроку("Merch"  +Т_+ "4" +Т_+ "FKAT_RP"	+Т_+ "Фейсинг РП (рекламная продукция)"    + Т_+ ТипЧисло + Т_+ "" +Т_+ "0" +Т_+ "0" + Т_ + ""); 
//	
//	//описание дополнительных реквизитов документа "Посещение"                                                                                
//	Текст.ДобавитьСтроку("Visit"  +Т_+ "1" +Т_+ "VISIT" +Т_+ "Результат посещения" +Т_+ ТипПеречисл +Т_+ MY_GUID_ENUM_VISIT +Т_+ "" +Т_+ "1" + Т_ + "10"); //Flags = 1 - обязательный реквизит
//
//	// Для поддержки дополнительных реквизитов табличных частей документов расширены 
//	// возможности данного тэга – для параметра TblCD предусмотрены следующие новые значения: 
//	// TOrder, TSale, TRSale, TMerch, TMove, TArrival, TInventory для описания дополнительных 
//	// реквизитов (соответственно) документов вида: "Заявка", "Реализация", "Реализация розничная", 
//	// "Мерчендайзинг", "Перемещение", "Поступление" и " Инвентаризация".
//	
//	// Пример:
//	// Описание дополнительных реквизитов табличной части документа "Заявка" (создаются программистом исходя из задачи)
//	//Текст.ДобавитьСтроку("TOrder"  + Т_ + "1" + Т_ + "Marks"     + Т_ + ""         +  Т_ + ТипЧисло  + Т_ + "" + Т_ + "0" + Т_ + "0" + Т_ + "30");
//	//Текст.ДобавитьСтроку("TOrder"  + Т_ + "2" + Т_ + "Date_Del"  + Т_ + "Дата поставки" +  Т_ + ТипДата   + Т_ + "" + Т_ + "0" + Т_ + "0");
//	//Текст.ДобавитьСтроку("TOrder"  + Т_ + "3" + Т_ + "Confirm"   + Т_ + "Подтвержден"   +  Т_ + ТипБулево + Т_ + "" + Т_ + "0" + Т_ + "0");
//	
//	Текст.ДобавитьСтроку("<End>" +Т_+ "Ref_TblStruct");	  
//	
//КонецПроцедуры //ВыгрузкаСтруктурТаблиц()
//
////******************************************************************************
//Процедура ВыгрузкаСкриптов(Текст)
//	
//	Текст.ДобавитьСтроку("<Begin>" +Т_+ "Ref_Scripts" +Т_+ "Struct:ObjectID,Script");
//	
//	//скрипт для окна "Информация о клиенте"
//	Текст.ДобавитьСтроку(GUID_SCRIPT_CLIENTINFO +Т_+ "[Name]|Кредит: [Credit], Скидка: [Discount]%|Долг: [Debt]|");
//	Текст.ДобавитьСтроку("*" +Т_+ "VIP: [_VIP]; Клиент конкурентов: [_CLKONKUR]|-------|");
//	Текст.ДобавитьСтроку("*" +Т_+ "Тел.: [Tel]|Адрес: [Addr]|ИНН: [_INN], КПП: [_KPP]|[_FNAME]|");
//	Текст.ДобавитьСтроку("*" +Т_+ "Продажи прошл. месяца: [_MSALES]|Срок договора: [_SROKDOG]");
//	
//	//скрипт для окна "Информация о торговой точке"
//	Текст.ДобавитьСтроку(GUID_SCRIPT_TPOINTINFO +Т_+ "[Name]|Категория: [Category]|Зона: [Zone]|-------|");
//	Текст.ДобавитьСтроку("*" +Т_+ "Адрес: [Addr]|Тел: [Tel]|Конт. лицо: [Contact]|-------|");
//	Текст.ДобавитьСтроку("*" +Т_+ "Тип: [_TPTYPE]|Время работы: [_WORKTIME]");
//	
//	Текст.ДобавитьСтроку("<End>" +Т_+ "Ref_Scripts");	
//КонецПроцедуры
//
////******************************************************************************
//// ЗаполнитьТаблицуНумератовров()
////
//// Описание:
////  Вызывается для заполнения таблицы стартовых номеров нумераторов в закладке
////	"Стартовые номера". Значения этой таблицы выгружаются в файле выгрузки
////	в процедуре ВыгрузкаСтартовыхНомеровНумераторов()
////
////  Стартовый номер для каждого нумератора автоматически определяется путем
////	имитации создания нового документа в ЦБД, к которому прикреплен нумератор.
////
//Процедура ЗаполнитьТаблицуСтартовыхНомеров()
//	Перем ВидДок1С;
//	
//	СпрНум 	= СоздатьОбъект("Справочник.КпкНумераторы");
//	СпрФирм = СоздатьОбъект("Справочник.Фирмы");
//	
//	//заполненние таблицы	
//    Т =  ТабСтартНом; //для читабельности кода
//	Если Т.КоличествоКолонок() < 1 Тогда
//	    Т.Очистить();
//		Т.НоваяКолонка("Нумератор","Справочник",,,"Нумератор",16);  //Название нумератора
//		Т.НоваяКолонка("КодНум","Число",,,"Код нумератора",9);  	//код нумератора
//		Т.НоваяКолонка("СтартНом","Строка",,,"Старт.номер",15);  	//стартовый номер
//		Т.НоваяКолонка("Фирма","Справочник",,,"Фирма",16);  		//Фирма
//	Иначе
//		Т.УдалитьСтроки();
//	КонецЕсли;  
//	
//	Если ВыбАгент.Выбран() = 0 Тогда
//	    Возврат; //невозможно определить префикс нумерации документов для торгового агента
//	КонецЕсли;
//	
//	АгентИнфо = ПолучитьДанныеАгента(ВыбАгент);
//	
//	ОкноСостояние("Формирование стартовых номеров документов...");
//	
//	СпрНум.ВыбратьЭлементы();
//	Пока СпрНум.ПолучитьЭлемент() = 1 Цикл
//		Если СпрНум.ПометкаУдаления() = 1 Тогда
//		    Продолжить;
//		ИначеЕсли СпрНум.Код = 0 Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		АПВидДок = СокрЛП(СпрНум.ВидыДокументовВКпк);
//		Если ПустоеЗначение(АПВидДок) = 1 Тогда
//		    Продолжить;
//		КонецЕсли;
//		Поз = Найти(АПВидДок,",");
//		Если Поз <> 0 Тогда //если нумератор привязан к нескольким видам документов, то выделяем первый вид документа в списке
//		    АПВидДок = Лев(АПВидДок, Поз-1);
//		КонецЕсли;
//		//Получили вид документа в КПК, определяем соответствующий ему вид документа в ЦБД
//		Поз = списСоотвВидовДок.НайтиЗначение(АПВидДок);
//		Если Поз = 0 Тогда
//		    Продолжить;
//		КонецЕсли;
//		
//		списСоотвВидовДок.ПолучитьЗначение(Поз, ВидДок1С);
//		Док = СоздатьОбъект("Документ." + ВидДок1С);
//		Док.Новый(); //новый документ нужного используем для определения свободного номера для документов данного вида
//		ПрефиксАгента = СокрЛП(АгентИнфо.КпкПрефиксНомераДок); //первая часть префикса номера
//		
//		//в цикле ниже определяем первый свободный номер в ЦБД с префиксом для каждой фирмы
//		//все полученные свободные номера заносятся в таблицу значений
//		СпрФирм.ВыбратьЭлементы();
//		Пока СпрФирм.ПолучитьЭлемент() = 1 Цикл
//			СпрФ = СпрФирм.ТекущийЭлемент();
//			ФирмаИнфо = ПолучитьСправочныеДанные(СпрФ);
//			Если ФирмаИнфо.Выбран() = 0 Тогда
//				ФирмаИнфо = ЗаписатьСправочныеДанные(СпрФ);
//			КонецЕсли;
//			Если СпрФирм.ПометкаУдаления() = 1 Тогда
//			    Продолжить;
//			ИначеЕсли ФирмаИнфо.КпкВыгружать = 0 Тогда
//				Продолжить;
//			КонецЕсли;
//			Префикс = ПрефиксАгента + СокрЛП(СпрФирм.ЮрЛицо.ПрефиксНомеровДокументов);
//			Док.УстановитьНовыйНомер(Префикс);
//			СтартНомерДок = Док.НомерДок;
//			//получили стартовый номер документа для нумератора с учетом префикса фирмы
//			Т.НоваяСтрока();
//			Т.Нумератор = СпрНум.ТекущийЭлемент();
//			Т.КодНум	= СпрНум.Код;
//			Т.СтартНом	= СтартНомерДок;
//			Т.Фирма		= СпрФирм.ТекущийЭлемент();
//		КонецЦикла;
//	    
//	КонецЦикла;
//	
//	ОкноСостояние("");
//	
//КонецПроцедуры // ЗаполнитьТаблицуСтартовыхНомеров()
//
////******************************************************************************
////Выгружаются описания нумераторов - длины номеров и списки видов документов,
////к которым они привязаны (один нумератор может быть привязан к нескольким видам
////документов). Тип номеров в нумераторах всегда текстовый.
////Вся информация хранится в справочнике "КпкНумераторы".
////
////Процедура выгружает только описания нумераторов, стартовые номера нумераторов
////выгружаются процедурой ВыгрузкаСтартовыхНомеровНумераторов().
//Процедура ВыгрузкаНумераторов(Текст)
//	
//	Спр = СоздатьОбъект("Справочник.КпкНумераторы");
//	
//	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_Numerators" + Т_ + "Struct:NumCode,NumSize,DocList");
//	
//	Спр.ВыбратьЭлементы();
//	Пока Спр.ПолучитьЭлемент() = 1 Цикл
//		Если Спр.ПометкаУдаления() = 1 Тогда
//		    Продолжить;
//		КонецЕсли;
//	    Текст.ДобавитьСтроку(Строка(Спр.Код) +Т_+ СокрЛП(Спр.ДлинаНомера) +Т_+ СокрЛП(Спр.ВидыДокументовВКпк));
//	КонецЦикла;
//	
//	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_Numerators");
//	
//КонецПроцедуры
//
////******************************************************************************
////Выгружать статовые номера следует не каждый раз при выгрузке, а только если
////это указано явно пользователем.
//Процедура ВыгрузкаСтартовыхНомеровНумераторов(Текст)
//	
//	Если флСтартНомера = 0 Тогда
//	    Возврат;
//	КонецЕсли;
//	
//	Если флОбновлятьТабСтартНом = 1 Тогда
//		ЗаполнитьТаблицуСтартовыхНомеров();
//	Иначе
//		//На всякий случай для последующих выгрузок устанавливаем флаг флОбновлятьТабСтартНом,
//		//чтобы избежать случайной выгрузки одинаковых префиксов номеров разным агентам.
//		флОбновлятьТабСтартНом = 1; 
//	КонецЕсли;
//	
//	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_NumStarts" + Т_ + "Struct:NumCode,StartNumber");
//	
//	Т = ТабСтартНом; //для читабельности кода	
//	
//	Т.ВыбратьСтроки();
//	Пока Т.ПолучитьСтроку() = 1 Цикл
//	    Текст.ДобавитьСтроку(Строка(Т.КодНум) +Т_+ СокрЛП(Т.СтартНом));
//	КонецЦикла;
//	
//	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_NumStarts");
//	
//КонецПроцедуры
//
////******************************************************************************
//// Выгружает в файл выгрузки команды для КПК
//Процедура ВыгрузкаКомандКПК(Текст)
//	
//	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_Commands" + Т_ + "Struct:CmdCode,Arg");
//	 
//	Спр = СоздатьОбъект("Справочник.КпкКомандыКПК");
//	Спр.ВыбратьЭлементы();
//	Пока Спр.ПолучитьЭлемент() = 1 Цикл
//	    Если Спр.ПометкаУдаления() = 1 Тогда
//	        Продолжить;
//		ИначеЕсли Спр.Активна = 0 Тогда
//			Продолжить; 		
//		КонецЕсли;
//		
//		ПозАгента = Найти(СокрЛП(Спр.Агенты), АгентИнфо.Код);
//		
//		Если ПозАгента = 0 Тогда Продолжить; КонецЕсли;			
//		
//		Текст.ДобавитьСтроку(СокрЛП(Спр.Наименование) +Т_+ СокрП(Спр.Параметр));
//		
//	КонецЦикла;
//	
//	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_Commands");
//	
//КонецПроцедуры //ВыгрузкаКомандКПК
//
////******************************************************************************
//Процедура ВыгрузкаПеречислений(Текст) 
//	
//	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_AttrTypes" + Т_ + "Struct:AttrID,Code,Name,=DocList,=AddValue");
//
//	//Значения параметра GUID_ATTRTYP_COMMENT ("Комментарий") название параметра (его представление в документе) можно изменять
//	Текст.ДобавитьСтроку(GUID_ATTRTYP_COMMENT+ Т_ + "-1" + Т_ + "Комментарий:" + Т_ + " " + Т_ + " "); 	// для всех документов
//	Текст.ДобавитьСтроку("*" + Т_ + "1" + Т_ + "СРОЧНО!"	+ Т_ + "Order" + Т_ + " "); // только для заявки
//	Текст.ДобавитьСтроку("*" + Т_ + "2" + Т_ + "Самовывоз"	+ Т_ + "Order" + Т_ + " ");	// только для заявки
//	Текст.ДобавитьСтроку("*" + Т_ + "3" + Т_ + "Акция"	   	+ Т_ + "Order" + Т_ + " "); // только для заявки
//	Текст.ДобавитьСтроку("*" + Т_ + "4" + Т_ + "Клиент:  , Маг:  , Адр:  , Тел:" + Т_ + " " + Т_ + " "); // для всех документов
//	Текст.ДобавитьСтроку("*" + Т_ + "5" + Т_ + "Заявка на погрузку" + Т_ + "Order" + Т_ + " "); // только для заявки, этот комментарий используется, если торговый агент покупает товар себе
//	Текст.ДобавитьСтроку("*" + Т_ + "6" + Т_ + "Брак!" 		+ Т_ + "Arrival" + Т_ + " "); // только для документа "Поступление"
//
//	//Значения параметра GUID_ATTRTYP_PRICETYPE ("Типы цен")
//	ТекGUID = GUID_ATTRTYP_PRICETYPE;	
//	
//	СтрТиповЦен = "";
//	Для Поз = 1 По тзТипыЦен.КоличествоСтрок() Цикл
//		тзТипыЦен.ПолучитьСтрокуПоНомеру(Поз);
//		Текст.ДобавитьСтроку(ТекGUID + Т_ + Число(тзТипыЦен.Код) + Т_ + СокрЛП(тзТипыЦен.ТипЦены) + Т_ + "Order,Sale,RSale,Arrival,Inventory" + Т_ + "");
//		ТекGUID = "*";
//	КонецЦикла;    	
//
//	//Значения параметра GUID_ATTRTYP_PAYMNTTYPE ("Вид оплаты") название параметра (его представление в документе) можно изменять
//	Текст.ДобавитьСтроку(GUID_ATTRTYP_PAYMNTTYPE	+ Т_ + "-1" + Т_ + "Вид оплаты:" + Т_ + "Order,Sale,RSale,Cash,Arrival" + Т_ + " ");// только для документов "Заявка", "Касс. ордер", "Реализация", "Реализация Розн.", "Поступление" для всех типов цен
//	Текст.ДобавитьСтроку("*"	+ Т_ + "1" + Т_ + "Наличными"	+ Т_ + "Order,Sale,RSale,Cash,Arrival" + Т_ + " ");// только для заявки, реализации, реализации розничной, кассового ордера, поступления; применимы все типы цен
//	Текст.ДобавитьСтроку("*"	+ Т_ + "2" + Т_ + "Безналичн."	+ Т_ + "Order,Sale,Arrival" 	 + Т_ + "");  // только для заявки, реализации, поступления; возможный тип цен только с кодом 4
//	Текст.ДобавитьСтроку("*"	+ Т_ + "3" + Т_ + "Взаимозачет" + Т_ + "Order,Sale,Arrival"      + Т_ + "")  ;// только для заявки и реализации, поступления; возможные типы цен с кодами 2 и 3
//	Текст.ДобавитьСтроку("*"	+ Т_ + "4" + Т_ + "Спец.цена"   + Т_ + "Order,Sale,Cash,Arrival" + Т_ + " "); // только для заявки, реализации, кассового ордера, поступления; применимы все типы цен
//	
//	////выгрузка расцветок клиентов
//	//ТекGUID = GUID_ENUM_CLIENTS_COLORS;
//	//Спр = СоздатьОбъект("Справочник.кпкСтатусыКонтрагентов");
//	//Спр.ВыбратьЭлементы();
//	//Пока Спр.ПолучитьЭлемент() = 1 Цикл
//	//    Если (Спр.ПометкаУдаления() = 1) Или (Число(Спр.Код) = 0) Тогда
//	//		Продолжить;
//	//	КонецЕсли;
//	//	Если Спр.КпкЦвет.Выбран() = 1 Тогда
//	//	    Цвет = Спр.КпкЦвет.Код;
//	//	Иначе
//	//		Цвет = "000000";
//	//	КонецЕсли;
//	//	Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Спр.Код) + Т_ + СокрП(Цвет) + Т_ + "" + Т_ + "");
//    //   	ТекGUID = "*";
//	//КонецЦикла;
//	   
//	//выгрузка предупреждений для клиентов - предупреждения показываются при выборе клиента в документе
//	ТекGUID = GUID_ENUM_CLIENTS_WARNINGS;
//	Спр = СоздатьОбъект("Справочник.кпкСтатусыКонтрагентов");
//	Спр.ВыбратьЭлементы();
//	Пока Спр.ПолучитьЭлемент() = 1 Цикл
//	    Если (Спр.ПометкаУдаления() = 1) Или (Число(Спр.Код) = 0) Тогда
//			Продолжить;
//		ИначеЕсли ПустоеЗначение(Спр.Предупреждение) = 1 Тогда
//			Продолжить;
//		КонецЕсли;       
//		Если Спр.КпкЦвет.Выбран() = 1 Тогда
//			Цвет = "#" + СокрЛП(Спр.КпкЦвет.Код);    
//		Иначе
//			Цвет = "";
//		КонецЕсли;
//		Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Спр.Код) + Т_ + СокрП(Спр.Предупреждение) + Т_ + "" + Т_ + Цвет);
//       	ТекGUID = "*";
//	КонецЦикла;
//	
//	//свойства номенклатуры
//	//ТекGUID = GUID_ATTRTYP_GOODSPROP;	
//	//Спр = СоздатьОбъект("Справочник.ЗначенияСвойств");
//	//Спр.ВыбратьЭлементы(0);
//	//Пока Спр.ПолучитьЭлемент() = 1 Цикл
//	//    Если (Спр.ПометкаУдаления() = 0) И (Спр.КпкКод > 0) И (Спр.КпкКод < 33) Тогда
//	//		Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Спр.КпкКод) + Т_ + СокрП(Спр.Наименование) + Т_ + "" + Т_ + "");
//	//       	ТекGUID = "*";
//	//    КонецЕсли;
//	//КонецЦикла;
//	
//	//запросы, которые можно отправлять из КПК при мобильном доступе к центральной БД
//	ТекGUID = GUID_ATTRTYP_QUERY;
//	Спр = СоздатьОбъект("Справочник.КпкЗапросы");
//	Спр.ПорядокКодов();
//	Спр.ВыбратьЭлементы();
//	Пока Спр.ПолучитьЭлемент() = 1 Цикл
//	    Если (Спр.ПометкаУдаления() = 0) Тогда
//			Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Спр.Код) + Т_ + СокрП(Спр.Наименование) + Т_ + "" + Т_ + "");
//	       	ТекGUID = "*";
//	    КонецЕсли;
//	КонецЦикла;
//	
//	//////////////////////////////////////////////////
//	//Выгрузка перечислений (списков), задаваемых программистом исходя из задачи
//	//////////////////////////////////////////////////
//	
//	//виды доставки
//	ТекGUID = MY_GUID_ENUM_DLVTYPE;
//	Переч = Перечисление.кпкВидыДоставки;
//	СчетчикЦикла = 0;
//	Для Поз = 1 По Переч.КоличествоЗначений() Цикл
//		ТекЗнач = Переч.ЗначениеПоНомеру(Поз);
//		Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Поз) + Т_ + СокрП(Строка(ТекЗнач)) + Т_ + "" + Т_ + "");
//       	ТекGUID = "*";
//	КонецЦикла;
//	
//	//типы результатов посещений
//	ТекGUID = MY_GUID_ENUM_VISIT;
//	Спр = СоздатьОбъект("Справочник.кпкРезультатыПосещения");
//	Спр.ПорядокКодов();
//	Спр.ВыбратьЭлементы();
//	Пока Спр.ПолучитьЭлемент() = 1 Цикл
//	    Если (Спр.ПометкаУдаления() = 0) И (Число(Спр.Код) > 0) Тогда
//			Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Спр.Код) + Т_ + СокрП(Спр.Наименование) + Т_ + "" + Т_ + "");
//	       	ТекGUID = "*";
//	    КонецЕсли;
//	КонецЦикла;
//	
//	//типы торговых точек   
//	Если ИспТочек = 1 Тогда
//		ТекGUID = MY_GUID_ENUM_TPTYPE;
//		Спр = СоздатьОбъект("Справочник.кпкТипыТоргТочек");
//		Спр.ПорядокКодов();
//		Спр.ВыбратьЭлементы();
//		Пока Спр.ПолучитьЭлемент() = 1 Цикл
//			Если (Спр.ПометкаУдаления() = 0) И (Число(Спр.Код) > 0) Тогда
//				Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Спр.Код) + Т_ + СокрП(Спр.Наименование) + Т_ + "" + Т_ + "");
//				ТекGUID = "*";
//			КонецЕсли;
//		КонецЦикла;            
//	КонецЕсли;
//	
//	//категории номенклатуры   	
//	Если ПустоеЗначение(Константа.ВидСвойстваНоменклатуры) = 0  Тогда  		
//		
//		ТекGUID = GUID_ATTRTYP_GOODSCAT;
//	    
//		ЗаполнитьТаблицуКатегорий();   
//		
//		ТаблицаКатегорий.ВыбратьСтроки();
//		
//		Пока ТаблицаКатегорий.ПолучитьСтроку() = 1 Цикл 
//			
//			Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(ТаблицаКатегорий.Номер) + Т_ + СокрП(ТаблицаКатегорий.Наименование) + Т_ + "" + Т_ + "");
//			ТекGUID = "*"; 
//			
//		КонецЦикла;  
//		
//	Иначе            
//		
//		Предупреждение("Перед выгрузкой категорий номенклатуры выберите в настройках параметров учета 
//			            |вид свойства для Номенклатуры", 60);	
//		
//	КонецЕсли;
//		
//	//ГТД
//	ТекGUID = MY_GUID_ENUM_GTD;
//	Спр = СоздатьОбъект("Справочник.ГТД");
//	Спр.ВыбратьЭлементы();                 
//	СчГТД = 0;	
//	Пока Спр.ПолучитьЭлемент() = 1 Цикл
//	    Если (Спр.ПометкаУдаления() = 0) Тогда   
//			СчГТД = СчГТД + 1;
//			Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(СчГТД) + Т_ + СокрП(Спр.Наименование) + Т_ + "" + Т_ + "");
//	       	ТекGUID = "*";
//	    КонецЕсли;
//	КонецЦикла;
//	
//	//Страны-производители
//	ТекGUID = MY_GUID_ENUM_STRANA;
//	Спр = СоздатьОбъект("Справочник.ОКСМ");
//	Спр.ВыбратьЭлементы();
//	Пока Спр.ПолучитьЭлемент() = 1 Цикл
//	    Если (Спр.ПометкаУдаления() = 0) И (Число(Спр.Код) > 0) Тогда
//			Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Спр.Код) + Т_ + СокрП(Спр.Наименование) + Т_ + "" + Т_ + "");
//	       	ТекGUID = "*";
//	    КонецЕсли;
//	КонецЦикла;
//
//	
//	////////////////////////////////////////////////////////
//	//Выгрузка анкетных вопросов
//	////////////////////////////////////////////////////////
//	
//	//просто добавляем заголовок анкеты (используется просто случайный идентификатор):
//	Текст.ДобавитьСтроку("F07C563C-8EC9-44FA-8EDA-CBECBA4DF43B" + Т_ + "0" + Т_ + "---АНКЕТА---" + Т_ + "Visit"+ Т_ + "");
//	
//	//Выгрузка вопросов и вариантов ответов
//	
//	//Использована идея Урсалова Константина, (ООО Сандора): 
//	//реализация дополнительных реквизитов в виде справочников
//	
//	СпрВопр = СоздатьОбъект("Справочник.кпкВопросыАнкеты");
//	СпрОтв	= СоздатьОбъект("Справочник.кпкОтветыАнкеты");
//	СпрВопр.ВыбратьЭлементыПоРеквизиту("КпкВыгружать", 1);
//	СпрВопр.ПорядокКодов();
//	СпрВопр.ВыбратьЭлементы();
//	Пока СпрВопр.ПолучитьЭлемент() = 1 Цикл
//		Если (СпрВопр.ПометкаУдаления() = 1) Или (СпрВопр.КпкВыгружать = 0) Тогда
//			Продолжить;
//		КонецЕсли;
//		Обязателен = ?(СпрВопр.КпкОбязательный = 1, ",!", "");
//		Текст.ДобавитьСтроку(СокрП(СпрВопр.Идентификатор) + Т_ + "0" + Т_ + СокрП(СпрВопр.Наименование) + Т_ + "Visit"+ Обязателен + Т_ + "");
//		СпрОтв.ИспользоватьВладельца(СпрВопр.ТекущийЭлемент());
//		СпрОтв.ПорядокКодов();
//		СпрОтв.ВыбратьЭлементы();
//		Пока СпрОтв.ПолучитьЭлемент() = 1 Цикл
//			Если СпрОтв.ПометкаУдаления() = 1 Тогда
//				Продолжить;
//			КонецЕсли;
//			Текст.ДобавитьСтроку("*" + Т_ + Строка(СпрОтв.Код) + Т_ + СокрП(СпрОтв.Наименование) + Т_ + "Visit" + Т_ + "");
//		КонецЦикла;
//	КонецЦикла;  	
//	
//	// категории документов
//	ТекGUID = GUID_ENUM_DOC_CAT;
//	Спр = СоздатьОбъект("Справочник.КпкКатегорииДокументов");
//	Спр.ВыбратьЭлементы();
//	Пока Спр.ПолучитьЭлемент() = 1 Цикл
//	    Если (Спр.ПометкаУдаления() = 0) И (Число(Спр.Код) > 0) Тогда  
//			Если Спр.Цвет.Выбран() = 1 Тогда
//				Цвет = "#" + СокрЛП(Спр.Цвет.Код);     			
//			Иначе
//				Цвет = "";
//			КонецЕсли;      
//			Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Спр.Код) + Т_ + СокрП(Спр.Наименование) + Т_ + "" + Т_ + Цвет);
//	       	ТекGUID = "*";
//	    КонецЕсли;
//	КонецЦикла;
//
//	////цвета категорий документов
//	//ТекGUID = GUID_ENUM_DOC_CAT_COLORS;
//	//Спр = СоздатьОбъект("Справочник.КпкКатегорииДокументов");
//	//Спр.ВыбратьЭлементы();
//	//Пока Спр.ПолучитьЭлемент() = 1 Цикл
//	//    Если (Спр.ПометкаУдаления() = 0) И (Число(Спр.Код) > 0) Тогда
//	//		Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Спр.Код) + Т_ + СокрЛП(Спр.Цвет.Код) + Т_ + "" + Т_ + "");
//	//       	ТекGUID = "*";
//	//    КонецЕсли;
//	//КонецЦикла;      
//	
//	// названия типов планов продаж
//	ТекGUID = GUID_ENUM_PLAN_OF_SALES_TYPES;            
//	
//	Спр = СоздатьОбъект("Справочник.кпкТипыПланаПродаж");
//	Спр.ВыбратьЭлементы();
//	Пока Спр.ПолучитьЭлемент() = 1 Цикл		
//		Если Спр.ПометкаУдаления() = 1 Тогда
//			Продолжить;								
//		КонецЕсли;       	
//		
//		Текст.ДобавитьСтроку(ТекGUID +Т_+ Строка(Число(Спр.Код)) +Т_+ СокрЛП(Спр.Наименование) + Т_ + "" + Т_ + "");
//		ТекGUID = "*";   
//		//   
//	КонецЦикла;	 
//	
//	// Категории клиентов (торг точек)
//	ТекGUID = GUID_ENUM_CLIENTS_TPOINTS_CAT;
//	Спр = СоздатьОбъект("Справочник.кпкКатегорииТоргТочек");
//	Спр.ВыбратьЭлементы();
//	Пока Спр.ПолучитьЭлемент() = 1 Цикл
//	    Если (Спр.ПометкаУдаления() = 0) И (Число(Спр.Код) > 0) Тогда
//			Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Спр.Код) + Т_ + СокрП(Спр.Наименование) + Т_ + "" + Т_ + "");
//	       	ТекGUID = "*";
//	    КонецЕсли;
//	КонецЦикла;    
//	
//	// Рейтинги товаров
//	ТекGUID = GUID_ENUM_RATINGCAT;
//	Спр = СоздатьОбъект("Справочник.кпкРейтингиНоменклатуры");
//	Спр.ВыбратьЭлементы();
//	Пока Спр.ПолучитьЭлемент() = 1 Цикл
//	    Если (Спр.ПометкаУдаления() = 0) И (Число(Спр.Код) > 0) Тогда 
//			Если Спр.Цвет.Выбран() = 1 Тогда
//				Цвет = "#" + СокрЛП(Спр.Цвет.Код);     			
//			Иначе
//				Цвет = "";
//			КонецЕсли;                                          			
//			Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Спр.Код) + Т_ + СокрП(Спр.Наименование) + Т_ + "" + Т_ + Цвет);
//	       	ТекGUID = "*";
//	    КонецЕсли;
//	КонецЦикла;
//	
//	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_AttrTypes"); 
//	
//КонецПроцедуры //ВыгрузкаПеречислений()   
//
////******************************************************************************
//// Процедура выгружает в КПК ссылки описания файлов фотографий, закрепленные за документами (сами файлы фотографий в КПК не копируются)
//// В данном случае процедура используется для выгрузки в КПК подтверждений к загруженным ранее в ЦБД фотографиям
//Процедура ВыгрузкаФотографий(Текст) 
//	
//	Текст.ДобавитьСтроку("<Begin>" +Т_+ "Ref_Photos" +Т_+ "Struct:ObjID,ObjType,TimeCrt,FileName,=Comment");
//
//	Спр 	= СоздатьОбъект("Справочник.КпкСправочники"); //информацию о подтверждаемых фотографиях берем из протоколов загрузки справочников с КПК
//	СпрДок  = СоздатьОбъект("Справочник.КпкДокументы");   //этот справочник нужен для получения идентификатора документа, к которому привязано фото
//	
//	ДатаП1 = ТекущаяДата() - 6;
//	ДатаП2 = ТекущаяДата(); //интервал подтверждений к полученным из КПК фотографиям - неделя
//	
//	ТекGUID = "-";
//	
//	Для День = ДатаП1 По ДатаП2 Цикл
//		Спр.ВыбратьЭлементыПоРеквизиту("ДатаСобытия",День,0,0);
//		Пока Спр.ПолучитьЭлемент() = 1 Цикл
//			Если Спр.Агент <> ВыбАгент Тогда
//			    Продолжить;
//			КонецЕсли;
//		    ЭлемФото = Спр.ЭлементСпр;
//			Если ЭлемФото.Выбран() = 0 Тогда
//			    Продолжить;
//			ИначеЕсли ЭлемФото.Вид() <>"кпкФотоКДокументам" Тогда
//				Продолжить;
//			КонецЕсли;
//			Док = ЭлемФото.Док;
//			Если Док.Выбран() = 0 Тогда
//				Продолжить;
//			ИначеЕсли СпрДок.НайтиПоРеквизиту("Документ", Док, 1) = 0 Тогда
//				Продолжить;
//			КонецЕсли;
//			ИдДок = СокрП(СпрДок.Идентификатор);
//			Если ИдДок  = ТекGUID Тогда
//				ВыгрИд  = "*";
//			Иначе
//				ВыгрИд  = ИдДок;
//				ТекGUID = ИдДок;
//			КонецЕсли;			
//			ВремяФото 	= ДатаВФорматеXML(ЭлемФото.ДатаСозд) + " " + СтрЗаменить(ЭлемФото.ВремяСозд,":","-");
//			ИмяФайла    = СокрП(ЭлемФото.ФайлКПК);
//			Коммент		= СокрЛП(ЭлемФото.Комментарий);
//			Текст.ДобавитьСтроку(ВыгрИд + Т_ + "1" + Т_+ ВремяФото + Т_ + ИмяФайла + Т_ + УбратьСимволыКонцаСтроки(Коммент));
//		КонецЦикла;
//	КонецЦикла;
//	
//	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_Photos");    
//	
//КонецПроцедуры //ВыгрузкаФотографий() 
//
////******************************************************************************
//Процедура ВыгрузкаПодтверждений(Текст)               
//	
//	Текст.ДобавитьСтроку("<Begin>" +Т_+ "Ref_Confirm" +Т_+ "Struct:DocID,DocState,DocNumber,=Category");
//	
//	Док = СоздатьОбъект("Документ");   
//	
//	Интервал = Константа.кпкИнтервалПодтверждений;
//	
//	Док.ВыбратьДокументы(ТекущаяДата() - Интервал, ТекущаяДата());
//	
//	ВидыДок = "ЗаявкаПокупателя,Реализация,ПКО,РКО,кпкМерчендайзинг,кпкПосещение,ПеремещениеТМЦ,ВозвратОтПокупателя,ОтчетККМ,кпкЗаданиеАгента,ПоступлениеТМЦ";
//	
//	Пока Док.ПолучитьДокумент() = 1 Цикл
//		АгентАвтор = ПолучитьАгентаПоДокументу(Док);
//		Если АгентАвтор <> ВыбАгент Тогда
//		    Продолжить;
//		КонецЕсли;
//		ВидДок = Док.Вид();
//		Если Найти(ВидыДок,ВидДок) = 0 Тогда
//		    Продолжить;
//		ИначеЕсли м_СпрКПКДок.НайтиПоРеквизиту("Документ", Док.ТекущийДокумент(), 1) = 0 Тогда		
//			Продолжить;
//		КонецЕсли;
//		ИдДок = СокрП(м_СпрКПКДок.Идентификатор);
//		СостДок = ВернутьСостояниеДок(Док.ТекущийДокумент());
//		Если Док.Проведен() = 1 Тогда		    
//			Если Док.Вид() = "кпкЗаданиеАгента" Тогда 
//				Если (ПустоеЗначение(Док.ДатаНачала) = 0) и (ПустоеЗначение(Док.ДатаОкончания) = 0) Тогда
//					// Означает, что документ уже был загружен с КПК и нужно запретить его редактирование					
//					СостДок = СостДок + ?(Док.ОбновитьЗаданиеВКПК = 1, 0, 8 + 128);				
//				Иначе
//					СостДок = СостДок + ?(Док.ОбновитьЗаданиеВКПК = 1, 0, 128);     
//				КонецЕсли;				  				
//			Иначе
//				СостДок = СостДок + 8;//запрещаем изменение документа в КПК			
//			КонецЕсли;			
//		КонецЕсли;  
//		
//		Если Док.ПометкаУдаления() = 1 Тогда
//			СостДок = СостДок + 512; // запрет изменения остатков
//		КонецЕсли;
//		
//		Если Док.Категория.Выбран() = 1 Тогда
//			КатегорияДок = Строка(Док.Категория.Код);
//		Иначе
//			КатегорияДок = "0";
//		КонецЕсли;
//		Текст.ДобавитьСтроку(ИдДок + Т_+ Строка(СостДок) + Т_+ СокрЛП(Док.НомерДок) + Т_+ КатегорияДок);
//	КонецЦикла;
//	Текст.ДобавитьСтроку("<End>"+Т_+ "Ref_Confirm");
//	                          
//	// Нужно также выгрузить подтверждения к фотографиям	
//	ВыгрузкаФотографий(Текст);
//	
//КонецПроцедуры  //ВыгрузкаПодтверждений()  
//
////******************************************************************************
//Процедура ВыгрузкаСистемнойКонстантыСпискаТиповЦен(Текст)  
//	
//	СформироватьТаблицуВыгружаемыхТиповЦен();
//	
//	СтрТиповЦен = "";
//	Для Поз = 1 По тзТипыЦен.КоличествоСтрок() Цикл
//		тзТипыЦен.ПолучитьСтрокуПоНомеру(Поз);
//		СтрТиповЦен = СтрТиповЦен + Строка(тзТипыЦен.Код) + ",";			
//	КонецЦикла;
//	
//	СтрТиповЦен = Лев(СтрТиповЦен, СтрДлина(СтрТиповЦен) - 1); // Убрали последнюю запятую	
//	
//	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_System" + Т_ + "Struct:ObjID,Value");	
//	
//	// Константа предусмотрена для случая, если требуется указывать в списках типов цен коды, со значением кода больше, чем 32.
//	// В качестве значения этой константы указывается список всех используемых кодов типов цен, разделенных через запятую. Эту константу желательно указывать в начале файла выгрузки данных 
//	// (по крайней мере, перед тэгами выгрузки перечислений Ref_AttrTypes, клиентов Ref_Clients и торговых точек Ref_TPoints, где используются списки типов цен). Сделано это для того, чтобы 
//	// программа заранее знала об используемых кодах типов цен, чтобы правильно конвертировать списки кодов типов цен во внутреннее представление в БД.
//	// Например, если в БД используются типы цен с кодами: 1, 5, 10, 1021, 99, 87, 66, то в в значение константы нужно уставноить следующую строку:
//	// "1, 5, 10, 1021, 99, 87, 66". Порядок кодов в константе не имеет значения, он может быть как угодно перемешан. Главное, чтобы этих значений было не больше 32.		    
//	Текст.ДобавитьСтроку(GUID_SYSTEM_PRICECODES_LIST + Т_ + СтрТиповЦен);   
//	
//	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_System");   	
//
//КонецПроцедуры //ВыгрузкаСистемнойКонстантыСпискаТиповЦен()	
//
////******************************************************************************
//Процедура ВыгрузкаКонстант(Текст, ВыгрузкаТолькоВремени = 0, КолФото = 0)     
//	
//	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_System" + Т_ + "Struct:ObjID,Value");	
//
//	Если ВыгрузкаТолькоВремени = 0 Тогда
//		Текст.ДобавитьСтроку(GUID_SYSTEM_AGENTNAME	   + Т_+ СокрЛП(ВыбАгент.Наименование));
//		Текст.ДобавитьСтроку(GUID_SYSTEM_AGENTID	   + Т_+ СокрП(АгентИнфо.Идентификатор));
//		ФирмаПоУмолчанию = ?(АгентИнфо.Фирма.Выбран() = 1, АгентИнфо.Фирма, глЗначениеПоУмолчанию("ОсновнаяФирма"));
//		ФирмаИнфо = ПолучитьСправочныеДанные(ФирмаПоУмолчанию);
//		Если ФирмаИнфо.Выбран() = 0 Тогда
//			ФирмаИнфо = ЗаписатьСправочныеДанные(ФирмаПоУмолчанию);
//		КонецЕсли;
//		Текст.ДобавитьСтроку(GUID_SYSTEM_FIRMID  	   + Т_+ СокрП(ФирмаИнфо.Идентификатор));
//		ПередвижнойСклад = АгентИнфо.ПередвижнойСклад;
//		ПередвижнойСкладИнфо = ПолучитьСправочныеДанные(ПередвижнойСклад);
//		Если ПередвижнойСкладИнфо.Выбран() = 0 Тогда
//			ПередвижнойСкладИнфо = ЗаписатьСправочныеДанные(ПередвижнойСклад);
//		КонецЕсли;                                            
//		             
//		Если ВалютаАгента.Выбран() = 1 Тогда			
//			Валюта =  ВалютаАгента;	
//		Иначе
//			Валюта = Константа.ВалютаУпрУчета;
//		КонецЕсли;
//	
//		НаимВалюты = Валюта.Наименование;                           
//		
//		Текст.ДобавитьСтроку(GUID_SYSTEM_MSTOREID 	   + Т_ +  СокрП(ПередвижнойСкладИнфо.Идентификатор));//идентификатор передвижного склада, закрепленного за агентом	
//		Текст.ДобавитьСтроку(GUID_SYSTEM_AMNTPRECISION + Т_ + "3");   //количество знаков после запятой в количестве товара при вводе весового товара в документ
//		Текст.ДобавитьСтроку(GUID_SYSTEM_MONEYNAME	   + Т_ + НаимВалюты); //название национальной валюты, если константа не указана, то по умолчанию "Руб"		
//		Текст.ДобавитьСтроку(GUID_SYSTEM_FLAGS 		   + Т_ + "discount=6 fltgoods=2");	  		
//		// Значение константы выше описывается так:
//		// Параметр "discount":
//		// Испрользуется стандартный алгоритм рассчета скидки, скидка используется только в заголовочной части, расчет скидки от суммы строки документа
//		// Параметр "fltgoods":
//		// По умолчанию для клиентов и торговых точек фильтр товаров в окне подбдора товаров устанавливается как "скрывать не отвечающие условию фильтра товары"
//		// Значения параметра могут быть следующими:
//		// 0 - не использовать фильтр товаров для клиентов и торговых точек
//		// 1 - использовать фильтр товаров для клиентов и торговых точек - товары, отвечающие фильтру, показываются в окне подбора подчеркнутыми
//		// 2 - использовать фильтр товаров для клиентов и торговых точек - товары, не отвечающие фильтру, не показываются в каталоге
//		// Если требуется установить условие проверки свойств товаров в режим "Или", то к значению выше нужно прибавить число 4, иначе будет установлен режим "И"
//		
//		Текст.ДобавитьСтроку(GUID_SYSTEM_SUMPREC 	   + Т_ + "2"); // Количество знаков после запятой для вывода суммовых значений. Значение этой константы
//																	// используется в т.ч. при расчете цен со скидками и налогов. Точность может указываться 
//																	// от 0 до 4. Если константа не указана в файле выгрузки, то ее значение приравнивается к 2.	 		        
//		
//		Текст.ДобавитьСтроку(GUID_SYSTEM_VATRATE	   + Т_+ "18"); // ставка НДС по умолчанию, если константа не задана, то считается 18%
//		Текст.ДобавитьСтроку(GUID_SYSTEM_TIMEDLVDISP   + Т_+ "24"); // для документа "Заявка" - отсрочка доставки товара (в часах) от текущего времени - используется для установки в документе времени доставки товара "по умолчанию"
//		Текст.ДобавитьСтроку(GUID_SYSTEM_DSCNTRECISION + Т_+ "3");  // количество знаков после запятой для скидок в документах при вводе скидок в виде чисел (на точность скидок при выборе из списка значение этой константы не влияет)
//		Текст.ДобавитьСтроку(GUID_SYSTEM_PRICEPACKTIME + Т_+ "60"); // рекомендуемое время на упаковку прайс листа в КПК (в секундах)
//		Текст.ДобавитьСтроку(GUID_SYSTEM_AUTHOR_TEL    + Т_+ "+7(8512)61-17-48 (поддержка)");// телефонный номер технической поддержки разработчика. Партнер, например, может указать свой контактный телефон
//		
//		ПапкаКартинок = СокрЛП(Константа.КпкПапкаКартинокТоваров);
//		Текст.ДобавитьСтроку(GUID_SYSTEM_GOODS_PICT_PATH + Т_+ ПапкаКартинок); //путь к папке с картинками товаров в КПК  
//		
//		ПапкаФото = СокрЛП(Константа.КпкПапкаФотоКДокуметам);
//		Текст.ДобавитьСтроку(GUID_SYSTEM_PHOTOS_PATH     + Т_+ ПапкаФото); //путь к папке с фотографиями документов в КПК, сделанными пользователем в КПК
//		Текст.ДобавитьСтроку(GUID_SYSTEM_WEIGHT_UNIT     + Т_+ СокрЛП(Константа.ЕдиницаВеса));
//		Текст.ДобавитьСтроку(GUID_SYSTEM_MERCH 		     + Т_+ "Мерченд:"); //подпись к строке мерчендайзинга
//		
//		Текст.ДобавитьСтроку(GUID_SYSTEM_DISCOUNTS 	     + Т_ + "");// означает, что используются скидки из тэга Ref_Discounts
//		
//		// Возможные значения константы GUID_SYSTEM_DISCOUNTS:
//		// 1. Список значений скидок через запятую (например: "0, 1.5, 3") 
//		//						 - список скидок берется из значения константы и переносится в документ для выбора скидок из списка
//		// 2. "" (пустая строка) - скидка проставляется агентом в КПК в документах явно в виде числового значения
//		// 3. "Ref_Discounts" 	 - список скидок берется из тэга Ref_Discounts файла выгрузки, скидки в КПК выбираются в докуменете из списка как в п 1.
//		//						 кроме этого доступно чтение скидок сканером штрих-кода с карт скидок клиентов
//				
//		Текст.ДобавитьСтроку(GUID_SYSTEM_USE_UNITS 	+ Т_ + Строка(РежимЕд));  			 // если требуется, чтобы в КПК в табличных частях всех документов можно было указывать 
//																					     // помимо количеств товаров еще и единицы измерения товаров, то нужно установить значение 
//																					     // этой константы равным 1. В противном случае в табличных частях всех документов в качестве 
//																					     // единицы измерения количества считается базовая единица измерения товара.																	  
//	    
//		//Текст.ДобавитьСтроку(GUID_SYSTEM_PRLFLAGS 	+ Т_ + "HIDST0,NO1CLICK");  	 // В качестве значения константы указывается список дополнительных параметров настройки окна подбора
//																						 // товаров (прайс-листа), параметры перечисляются через запятую. Список названий возможных параметров:
//																		 		 		 // HIDST0 – скрывать в окне подбора товаров товары с нулевым остатком. 
//																				 		 // NO1CLICK – запретить активацию выбора товара одним касанием стилуса. 
//																				 		 // Если этот параметр не передан в КПК то одиночное касание стилусом клетки "Количество" или "Мерчендайзинг" в окне подбора 
//																				 		 // сразу вызывает окно ввода количество. Если этот параметр передан в КПК,  то окно ввода количеств вызывается только двойным
//																				 		 // касанием стилуса нужной клетки.
//																			 
//		//Текст.ДобавитьСтроку(GUID_SYSTEM_SAVESCRIPT  + Т_ + "Save.lua:SaveDocument");   // указывается название скрипта и функции языка программирования Lua, которые будут вызываться всегда при попытке записи 
//																				 		  // пользователем любого документа. Например:
//																				 		  // SaveDoc.lua:SaveDocument … что означает, что будет запускаться функция SaveDocument из скрипта SaveDoc.lua.
//																				 		  // Если константа в файле не указана, или указано ее пустое значение, то скрипт не вызывается. Эта функция в Lua может возвращать значения:
//																				 		  // 0 – запретить проведение документа;
//																				 		  // 1 – разрешить проведение документа.
//																				 		  // Т.о. функция может быть использована для проверки содержимого документа, но используя средства языка Lua функция может и вносить изменения 
//																				 		  // документ. Одним из примеров такого применения функции является задача расчета накопительных скидок																					  
//		
//		
//		Если (КолФото > 0) и (флФайлыКартинок = 1) Тогда		
//			Если ПустаяСтрока(ПапкаКартинок) = 0 Тогда		
//				Текст.ДобавитьСтроку(GUID_SYSTEM_UDATA_PATH   + Т_ + ПапкаКартинок);   		  // Путь к папке пользовательских данных, куда Агент+ будет распаковывать архив пользовательских данных UDataFromCDB.zip 
//				// (если этот файл содержится внутри архива From1C.zip). В качестве пользовательских данных, например, в КПК можно передавать 
//				// готовые отчеты в формате Excel, сформированные в настольной учетной системе
//				// В данном примере передаем туда фотографии картинок товаров из ЦБД
//			Иначе																			  
//				ОповеститьОСобытии("Не указано значение константы ""Папка картинок товаров!" + РазделительСтрок +
//				         		   "Выгрузка картинок товаров не будет произведена", "!", 0);			
//			КонецЕсли;																						  
//		КонецЕсли;	
//																				 		  
//		Текст.ДобавитьСтроку(GUID_SYSTEM_UDATA_PATH   + Т_ + ПапкаКартинок); // Путь к папке пользовательских данных, куда Агент+ будет распаковывать архив пользовательских данных UDataFromCDB.zip 
//																					  	  // (если этот файл содержится внутри архива From1C.zip). В качестве пользовательских данных, например, в КПК можно передавать 
//																					  	  // готовые отчеты в формате Excel, сформированные в настольной учетной системе																					  
//
//		//Текст.ДобавитьСтроку(GUID_SYSTEM_SELROUTESONLY   + Т_ + "Order,Sale,RSale");  // указывается список видов документов, для которых резрешить выбор клиентов и торговых точек 	
//																		  				  // только из маршрутов (в окне выбора клиентов показывается только закладка "Маршрут"). Если 
//		  																				  // константа в файле выгрузки не указана, или указано пустое значение, то для всех документов 
//																						  // разрешен выбор клиентов и из списка клиентов и из маршрутов.
//	
//		//Текст.ДобавитьСтроку(GUID_SYSTEM_ROUTEDAYS_BACK   + Т_ + "");                   // кол-во дней назад от текущей даты, в пределах которых разрешается выбор пунктов маршрутов в документ.
//																						  // Если выбираемый пункт маршрута попадает в данный интервал, то он остается в документе выбранным, иначе в документ 
//																						  // переносится только клиент и торговая точка из пункта маршрута. Константу удобно использовать для закрытия пунктов 
//																						  // маршрутов "задним числом" (если это допустимо для пользователей).
//	
//		//Текст.ДобавитьСтроку(GUID_SYSTEM_ROUTEDAYS_FWD   + Т_ + "");                    // Количество дней вперед от текущей даты, в пределах которых разрешается выбор пунктов маршрутов в документ 
//																					  	  // (смотрите описание предыдущей константы). Константу удобно использовать для закрытия пунктов маршрутов "передним 
//																					 	  // числом" (если это допустимо для пользователей).	
//    	// Описание выгрузки новых констант для 20-го релиза ПО Агент+
//	
//		//Текст.ДобавитьСтроку(GUID_SYSTEM_DOCFLAGS + Т_ + "DT_QLIST,DT_NOINTFILL,AUTOMERCH");    // указывается список дополнительных параметров настройки документов (перечисляются через запятую). 
//																					              // Список названий возможных параметров:
//																					          	  // DT_QLIST – при подборе товаров запрашивать значения основных реквизитов документа ("Количество" 
//																				                  // и "Цена" – в зависимости от параметров подбора) единым списком, т.е. запрашивать значения реквизитов
//																					              // в отдельном окне, где они показываются списком. 
//																						          // NOPRNSAVED - запрет печати непроведенных документов;
//																						          // DT_NOINTFILL - отключение от использования встроенного алгоритма заполнения документов;
//																						          // AUTOMERCH - для документов "Заявка", "Реализация" и "Реализация розничная" принудительно 
//																						          // создавать документ "Мерчендайзинг" (в случае, как только пользователь начинает пытаться 
//																						   	      // заполнять табличную часть этих документов).
//
//																						 
//		//Текст.ДобавитьСтроку(GUID_SYSTEM_CLIENTINFOSCRIPT + Т_ + "APSample.lua:ClientInfo");  // Название скрипта и функции языка программирования Lua, которые будут вызываться при попытке
//																						        // выбора клиента в документе для генерации текстовой информации о клиенте, которая
//																						  	    // выводится в желтом окне подсказки.
//		
//		//Текст.ДобавитьСтроку(GUID_SYSTEM_TPOINTINFOSCRIPT + Т_ + "APSample.lua:TPointInfo");  // Название скрипта и функции языка программирования Lua, которые будут вызываться при попытке
//																						  	    // выбора торговой точки в документе для генерации текстовой информации о торговой точке, которая
//																						  	    // выводится в желтом окне подсказки. 
//		
//		//Текст.ДобавитьСтроку(GUID_SYSTEM_DOCINFOSCRIPT    + Т_ + "APSample.lua:DocInfo");     // Название скрипта и функции языка программирования Lua, которые будут вызываться в журнале 
//																						  	    // документов при попытке позиционирования курсора на каком-либо документе.
//		
//																						  
//		Текст.ДобавитьСтроку(GUID_SYSTEM_RATINGNAME          + Т_ + "Рейтинг");           	    // Название, которое используется для подписи заголовка колонки "Рейтинг" в окне подбора товаров.
//																						  	    // Если константа в файле не указана, то в заголовке выводится слово "Рейтинг".
//																						  	  
//		Текст.ДобавитьСтроку(GUID_SYSTEM_GPSTRACK            + Т_ + "TRACKGPSTIME"); 			// Параметр, определяющий настройки ведения GPS-трекинга.
//																							    // В нее заносится список названий, определяющие настройки ведения GPS-трека(перечисляются через запятую). 
//																							    // Значения названий могут быть следующими: 
//																						        // TRACKSPEED — в файле трекинга будет записываться скорость;
//																						  	    // TRACKGPSTIME – в файле трекинга будет записываться время, полученное из GPS данных, 
//																						  	    // иначе, по умолчанию, будет записываться локальное время КПК.
//		
//		Текст.ДобавитьСтроку(GUID_SYSTEM_PLANBYGOODSEL      + Т_ + "1");  					    // В нее заносится вариант расчета процента выполнения плана продаж при подборе
//																							    // товаров (1 — используется вариант расчета, определенный текущим открытым планом;
//																							    // 2 — расчет только по сумме; 3 — расчет только по количеству).
//																							  
//    	Текст.ДобавитьСтроку(GUID_SYSTEM_PRICE_TRANSCYCLE   + Т_ + "1");					    // В нее можно заносить значение, определяющее через какое количество записей при 
//																							    // загрузке данных прайс-листа производить транзакцию в базе данных (по умолчанию константа
//																							    // равняется 1023).																  
//																							  
//		ДатаОстатков = Формат(НачМесяца(ТекущаяДата()), "ДДДММГГГГ");	
//	
//		Текст.ДобавитьСтроку(GUID_SYSTEM_DIVPERIOD      + Т_ + ДатаОстатков);                 // Указывается дата и время, начиная с которого в Агент+ нужно фиксировать остатки по регистру
//																							  // товаров в разрезе декад месяца. До указанной даты остатки по регистру фиксируются в разрезе
//																							  // месяцев. Если константа не указана, то датой начала периодов по декадам считается первое число 
//																							  // предыдущего месяца.
//	
//		//Текст.ДобавитьСтроку(GUID_SYSTEM_MSG_PATH       + Т_ + "");                           // Путь, куда будут сохраняться html-файлы, распакованные из Messages.zip.
//	
//		
//		Текст.ДобавитьСтроку(GUID_SYSTEM_ROUTE_FLAGS    + Т_ + "");                           // Флаги для работы с маршрутами. Если установить 1, то флажки при отображении 
//																						      // маршрутов будут проставляться только в том случае, если все документы в этом 																							  
//																							  // узле проведены         
//		
//		Текст.ДобавитьСтроку(GUID_SYSTEM_EXCHFLAGS      + Т_ + "NOEXP_NACTDOCS,CHECK_MATRIX");           				 
//		// В качестве значения константы указывается список дополнительных параметров 
//		//настройки обмена данными. Список названий возможных параметров:
//		//EXP_STOCK – включение режима "выгрузки остатков товаров". Если режим включен, то в xml-файл выгрузки данных Агент+ будет выгружать данные по текущим остаткам товаров в БД КПК. 
//		// Данный параметр удобно применять в задачах синхронизации остатков товаров между ЦБД и БД КПК.
//		//NOEXP_NACTDOCS – включение запрета экспорта из КПК непроведенных документов (по умолчанию отключено).
//		//CHECK_MATRIX – включение режима проверки матрицы товаров в процессе ее загрузки в КПК из тэга Ref_MatrixOfGoods (по умолчанию отключено).
//		
//		ИспользованиеДоговоров = Константа.кпкИспользоватьДоговоры;
//		
//		Текст.ДобавитьСтроку(GUID_SYSTEM_USE_AGREEMENTS + Т_ + Число(ИспользованиеДоговоров));
//																									  
//	КонецЕсли;   
//	
//	Если ИспГПС = 1 Тогда
//		ДатаВремяТрека = ПолучитьСтруктуруПоследнегоТрека();  	
//		Если ДатаВремяТрека.РазмерСписка() <> 0 Тогда                         
//			ДатаСоздания   = ДатаВФорматеXML(ДатаВремяТрека.ПолучитьЗначение(1)); 
//			ВремяСоздания  = ВремяВФорматеXML(ДатаВремяТрека.ПолучитьЗначение(2));
//			ДатаВремяТрека = ДатаСоздания + " " +  ВремяСоздания;
//		КонецЕсли; 	         
//		// Добавляем также в выгрузку дату и время последнего трека с КПК
//		Текст.ДобавитьСтроку(GUID_SYSTEM_GPSTRACK_TIME + Т_+ ДатаВремяТрека);	
//	КонецЕсли;
//	
//	ВремяВыгрузки = Формат(ТекущаяДата(),"ДДДММГГГГ") + " " + ТекущееВремя();
//	ВремяВыгрузки = ДатаВФорматеXML(ТекущаяДата()) + " " + СтрЗаменить(ТекущееВремя(),":","-");
//	Текст.ДобавитьСтроку(GUID_SYSTEM_TIMEUNLD 	+Т_+ ВремяВыгрузки);	//выгружаем системное время выгрузки
//	
//	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_System");
//
//КонецПроцедуры //ВыгрузкаКонстант()
//
////******************************************************************************
//// Выгрузка штрих-кодов для товаров, попавших в запрос
//Процедура ВыгрузкаШтрихКодов(Текст, Запрос)
//
//	СпрЕд = СоздатьОбъект("Справочник.Единицы");
//	Запрос.вНачалоВыборки();
//	СписЕд = СоздатьОбъект("СписокЗначений");
//	
//	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_Barcodes" + Т_ + "Struct:GoodsID,Name,=UnitCode");
//	
//	Пока Запрос.Группировка("Товар") = 1 Цикл
//		Товар = Запрос.Товар;
//		Если Товар.ЭтоГруппа() = 1 Тогда
//		    Продолжить;
//		ИначеЕсли Товар.Выбран() = 0 Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		ТоварИнфо	= ПолучитьСправочныеДанные(Товар);
//		Если ТоварИнфо.Выбран() = 0 Тогда
//			ТоварИнфо = ЗаписатьСправочныеДанные(Товар);
//		КонецЕсли;
//		
//		ИдТовара = СокрП(ТоварИнфо.Идентификатор);
//		
//		КолВыгрЕдиниц = 3;	
//	
//		СписЕд.УдалитьВсе();
//		СчетчикЕдиниц = 0;                 
//		
//		СпрЕд.ИспользоватьВладельца(Товар);		
//		СпрЕд.ВыбратьЭлементы();
//		Пока (СпрЕд.ПолучитьЭлемент() = 1) И (СчетчикЕдиниц < КолВыгрЕдиниц) Цикл
//			Если СпрЕд.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;
//			СписЕд.ДобавитьЗначение(СпрЕд.Коэффициент, Лев(СокрП(СпрЕд.ОКЕИ), 3));
//			СчетчикЕдиниц = СчетчикЕдиниц + 1; 		    
//		КонецЦикла;
//		СписЕд.Сортировать();//сортируем список единиц по возрастанию коэффициента
//		
//		СпрЕд.ВыбратьЭлементы();
//		Пока СпрЕд.ПолучитьЭлемент() = 1 Цикл
//			Если СпрЕд.ПометкаУдаления() = 1 Тогда
//			    Продолжить;
//			ИначеЕсли ПустоеЗначение(СпрЕд.ШтрихКод) = 1 Тогда
//				Продолжить;
//			КонецЕсли;
//			КодЕдиницы = СписЕд.НайтиЗначение(СпрЕд.Коэффициент) - 1;
//			Если КодЕдиницы < 0 Тогда
//			    КодЕдиницы = 0;
//			КонецЕсли;
//			Текст.ДобавитьСтроку(ИдТовара + Т_ + СокрП(СпрЕд.ШтрихКод) + Т_ + Строка(КодЕдиницы));
//		    ИдТовара = "*";
//		КонецЦикла;
//	    
//	КонецЦикла;
//	
//	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_Barcodes");	
//	
//КонецПроцедуры // ВыгрузкаШтрихКодов(Текст)
//
////******************************************************************************
//Процедура ВыгрузкаФирм(Текст)
//	
//	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_Firms" + Т_ + "Struct:FirmID,Name,=CodesList,=Addr,=Tel,=UseVAT,=UseSF,=DocPrefix,_FNAME,_INN,_KPP,_OKPO,_BANK,_BIK,_BANKADR,_KSCHET,_RSCHET,_DIREKTOR,_GLBUH,_IP,_REKV");
//	//Выше названия параметров, начинающиеся с подчеркивания - это дополнительные параметры, описываемые в тэге Ref_TblStruct
//	
//	ОснФирма = АгентИнфо.Фирма;
//	Если ОснФирма.Выбран() = 0 Тогда
//	    ОснФирма = глЗначениеПоУмолчанию("ОсновнаяФирма");
//	КонецЕсли; 
//	
//	Спр = СоздатьОбъект("Справочник.Фирмы");
//	Спр.ИспользоватьДату(ТекущаяДата());
//	Спр.ВыбратьЭлементы();   
//	
//	Сч = 0;
//	Пока Спр.ПолучитьЭлемент() = 1 Цикл
//		
//		ФирмаИнфо = ПолучитьСправочныеДанные(Спр);
//		Если ФирмаИнфо.Выбран() = 0 Тогда
//			ФирмаИнфо = ЗаписатьСправочныеДанные(Спр);
//		КонецЕсли;
//		
//		Если ОснФирма = Спр.ТекущийЭлемент() Тогда
//		ИначеЕсли (Спр.ПометкаУдаления() = 1) Или (ФирмаИнфо.КпкВыгружать = 0) Тогда
//		    Продолжить;
//		КонецЕсли;		          
//		
//		ИдФирмы = СокрП(ФирмаИнфо.Идентификатор);
//		Если ПустоеЗначение(ИдФирмы) = 1 Тогда
//		    Продолжить;
//		КонецЕсли; 
//		
//		Сч = Сч + 1;
//		
//		ВидыОплат = "";  
//		// Можно устанавливать ограничение доступности видов
//		// оплаты в зависимости от статуса фирмы в МУ.
//		// В данном примере отклбючено. Чтобы включить эту
//		// настройку, нужно раскомментировать текст ниже:
//		//
//		//Если ФирмаИнфо.Статус = Перечисление.кпкСтатусФирмы.ЧП Тогда
//		//    ВидыОплат = "1,4";
//		//ИначеЕсли ФирмаИнфо.Статус = Перечисление.кпкСтатусФирмы.ООО Тогда
//		//	ВидыОплат = "1,2,4";
//		//ИначеЕсли ФирмаИнфо.Статус = Перечисление.кпкСтатусФирмы.Концерн Тогда
//		//	ВидыОплат = "1,2,3,4";
//		//КонецЕсли;
//		
//		ВидыОплат = Т_ + ВидыОплат;
//		
//		ЮрЛицо = Спр.ЮрЛицо;
//		
//		КрНаим	 = Т_ + СокрЛП(Спр.Наименование); 
//		
//		ИспНДС = 0;
//		
//		Если ЮрЛицо.Выбран() = 1 Тогда
//			ПолнНаим = ?(ПустоеЗначение(ЮрЛицо.ПолнНаименование) = 0, СокрЛП(ЮрЛицо.ПолнНаименование), СокрЛП(ЮрЛицо.Наименование));			
//			  
//			ПолнНаим = Т_ + УбратьСимволыКонцаСтроки(ПолнНаим);
//			
//			ИННКПП = Сокрлп(ЮрЛицо.ИНН);
//			
//			ЭтоИП  = ЮрЛицо.ИндивидуальныйПредприниматель; // 0 - "Юр. лицо", 1 - "ИП"
//			Если ЭтоИП  = 1 Тогда  
//				ЭтоИП 	  =	Т_ + 1; 				
//				Реквизиты = Т_ + "№ " + СокрЛП(ЮрЛицо.СвидетельствоСерияНомер) + " от " + Строка(ЮрЛицо.СвидетельствоДатаВыдачи) + " г.";                 
//			Иначе				
//				ЭтоИП 	  =	Т_ + 0;
//				Реквизиты =	Т_ + "";
//			КонецЕсли;    
//			
//			ИспНДС = ЮрЛицо.УчитыватьНДС; 
//			
//			Разделитель = Найти(ИННКПП, "\");
//			Если Разделитель <> 0 Тогда
//				// найден разделитель
//				ИНН = Т_ + Лев(ИННКПП, Разделитель - 1);
//				КПП = Т_ + СокрЛП(Сред(ИННКПП, Разделитель + 1));
//			Иначе
//				ИНН = Т_ + СокрЛП(ИННКПП);
//				КПП = Т_ + "";
//			КонецЕсли;          
//			
//			ОКПО	 = Т_ + СокрЛП(ЮрЛицо.ОКПО);
//			Адр 	 = Т_ + СокрЛП(ЮрЛицо.ЮрАдрес);
//			Тел		 = Т_ + СокрЛП(ЮрЛицо.Телефоны);
//			Дир		 = Т_ + СокрЛП(ЮрЛицо.Руководитель.Получить(ТекущаяДата()));
//			Бух		 = Т_ + СокрЛП(ЮрЛицо.ГлБухгалтер.Получить(ТекущаяДата()));
//		Иначе
//			ПолнНаим = Т_;
//			ИНН		 = Т_;
//			КПП		 = Т_;
//			ОКПО	 = Т_;
//			Адр 	 = Т_;
//			Тел		 = Т_;
//			Дир		 = Т_;
//			Бух		 = Т_;
//		КонецЕсли;      
//				
//		ИспНДС	 = Т_ + Строка(ИспНДС + 2 * ФирмаИнфо.КпкУчитыватьНДСРозница); //в справочнике фирм хранится два признака учета НДС - для опта и розницы
//		ИспСФ	 = Т_ + Строка(ФирмаИнфо.КпкИспСчетаФактуры);
//		
//		Префикс	 = Т_ +	СокрЛП(АгентИнфо.КпкПрефиксНомераДок) + ?(ЮрЛицо.Выбран() = 1, СокрЛП(ЮрЛицо.ПрефиксНомеровДокументов), "");
//		//^^^ Префикс номеров документов в КПК образуется из двух частей - префикса для агента и префикса для фирмы.
//		//	  Автонумерация документов в КПК обязательна только в случае "торговли с колес", если же отключена
//		//	  автонуимерация, то номера документам присваиваиваются в ЦБД при их загрузке из КПК.
//		//    Автонумерация документов заданного вида отключается, если этому виду документов присвоен нумератор
//		//	  с кодом 0. Коды нумераторов видам документов присваиваются при помощи справочника 1С "КпкНумераторы".
//		//	  ВНИМАНИЕ!!! Указание пустого префикса автонумерацию документов в КПК не отключает!
//		
//		Счет	 = Спр.ОсновнойСчет;
//		Если Счет.Выбран() = 1 Тогда
//			Банк	 = Т_ + СокрЛП(Счет.Банк.Наименование);
//			БИК	 	 = Т_ + СокрЛП(Счет.Банк.Код);
//			АдрБанка = Т_ + СокрЛП(Счет.Банк.Местонахождение);
//			КСчет 	 = Т_ + СокрЛП(Счет.Банк.КоррСчет);
//			РСчет 	 = Т_ + СокрЛП(Счет.НомерСчета);
//		Иначе
//			Банк	 = Т_;
//			БИК	 	 = Т_;
//			АдрБанка = Т_;
//			КСчет 	 = Т_;
//			РСчет 	 = Т_;
//		КонецЕсли;
//
//		Текст.ДобавитьСтроку(ИдФирмы + КрНаим + ВидыОплат + Адр + Тел + ИспНДС + ИспСФ + Префикс +
//							 ПолнНаим + ИНН + КПП + ОКПО + Банк + Бик + АдрБанка + КСчет + РСчет + 
//							 Дир + Бух + ЭтоИП + Реквизиты);
//	КонецЦикла;
//	
//	Текст.ДобавитьСтроку("<End>"+ Т_ + "Ref_Firms");
//	
//	Если Сч = 0 Тогда
//		ОповеститьОСобытии("В мобильное устройство не было выгружено ни одной фирмы. Проверьте заполнение справочника ""Настройка фирм""", "!");	    
//	КонецЕсли;
//		
//КонецПроцедуры // ВыгрузкаФирм()                    
//
////******************************************************************************
//Процедура ВыгрузкаСкладов(Текст)
//
//	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_Stores" + Т_ + "Struct:ObjID,Name,_AVTOSKLAD,_TONNAJ,_TEHOSM");
//	
//	Спр = СоздатьОбъект("Справочник.Склады");
//	Спр.ВыбратьЭлементы();
//	Пока Спр.ПолучитьЭлемент() = 1 Цикл
//		
//		СпрИнфо = ПолучитьСправочныеДанные(Спр);
//		Если СпрИнфо.Выбран() = 0 Тогда
//			СпрИнфо = ЗаписатьСправочныеДанные(Спр);
//		КонецЕсли;
//
//		Если (Спр.ПометкаУдаления() = 1) Или (СпрИнфо.КпкВыгружать = 0) Тогда
//		    Продолжить;
//		КонецЕсли;
//				
//		Ид = СокрП(СпрИнфо.Идентификатор);
//		Если ПустоеЗначение(Ид) = 1 Тогда
//		    Продолжить;
//		КонецЕсли;
//		
//		Наим 		= Т_+ СокрП(Спр.Наименование);
//		АвтоСклад   = Т_+ Строка(СпрИнфо.КпкПередвижной);
//		Тоннаж		= Т_+ Строка(СпрИнфо.Тоннаж);
//		ТехОсмотр	= Т_+  ДатаВФорматеXML(СпрИнфо.ТехОсмотр);
//		
//		//Struct:ObjID,Name,_AVTOSKLAD,_TONNAJ,_TEHOSM
//		Текст.ДобавитьСтроку(Ид + Наим + АвтоСклад + Тоннаж + ТехОсмотр);
//	КонецЦикла;
//	
//	Текст.ДобавитьСтроку("<End>"+ Т_ + "Ref_Stores");
//	
//КонецПроцедуры // ВыгрузкаСкладов()
//
////******************************************************************************
////Выгрузка в КПК расходных накладных, созданных на основании заявок агента
//Процедура ВыгрузкаРасходныхНакладных(Текст, ТДопКлиенты, ТДопТовары)
//	
//	ОкноСостояние("Расчет расх. накладных...");
//	
//	Док = СоздатьОбъект("Документ");
//	
//	//Начало тэга с описанием его структуры:
//	Текст.ДобавитьСтроку("<Begin>" +Т_+ "Doc_Sale" + Т_
//		+ "Struct:DocID,DocState,DocFlags,TimeCrt,DocNumber,FirmID,ClientID,=TPointID,DocSum,=DocVAT,=Discount,Comment,=PaymntType,=PriceType,=PayDate,MDocID,=SFNumber,=UseVAT");
//	//Описание структуры вложенных тэгов Lines (табличная часть документа):
//	Текст.ДобавитьСтроку("<Sub>" +Т_+ "Lines" +Т_+ "Struct:GoodsID,Amount,Price,Sum,=VAT");
//	
//	Кол = 0;
//	
//	Док.ВыбратьДокументы(ТекущаяДата()-10, ТекущаяДата()); //просматриваем документы за последние 10 дней
//	Пока Док.ПолучитьДокумент() = 1 Цикл
//		АгентАвтор = ПолучитьАгентаПоДокументу(Док);
//		Если АгентАвтор <> ВыбАгент Тогда
//		    Продолжить;
//		КонецЕсли;
//	    Если Док.Вид() <> "Реализация" Тогда
//	        Продолжить;
//		КонецЕсли;
//		
//		Кол = Кол + 1;                               
//		
//	    Состояние("Выгрузка расходных накладных: " + Кол);
//		
//		Клиент 		= Док.Контрагент;
//		ТоргТочка 	= Док.кпкТоргТочка;
//
//		КлиентИнфо = ПолучитьСправочныеДанные(Клиент);
//		Если КлиентИнфо.Выбран() = 0 Тогда
//			КлиентИнфо = ЗаписатьСправочныеДанные(Клиент);
//		КонецЕсли;
//		
//		ИдКлиента	= Т_+ СокрП(КлиентИнфо.Идентификатор);
//		Если ТоргТочка.Выбран() = 1 Тогда
//	        ИдТоргТочки = Т_+ СокрП(ТоргТочка.Идентификатор);
//		Иначе
//			ИдТоргТочки = ИдКлиента;
//		КонецЕсли; 
//			
//		ФирмаИнфо = ПолучитьСправочныеДанные(Док.Фирма);
//		Если ФирмаИнфо.Выбран() = 0 Тогда
//			ФирмаИнфо = ЗаписатьСправочныеДанные(Док.Фирма);
//		КонецЕсли;
//	
//		ИдФирмы = Т_+ СокрП(ФирмаИнфо.Идентификатор);
//		
//		ИдДок 	= ВернутьИдентификаторДок(Док.ТекущийДокумент());
//		
//		Скидка = Док.Скидка;
//		Если Скидка.Выбран() = 1 Тогда
//			Процент = Скидка.Процент;
//		Иначе
//			Процент = "";
//		КонецЕсли;
//		
//		ТипЦенИнфо = ПолучитьСправочныеДанные(Док.ТипЦен);
//		Если ТипЦенИнфо.Выбран() = 0 Тогда
//			ТипЦенИнфо = ЗаписатьСправочныеДанные(Док.ТипЦен);
//		КонецЕсли;
//		
//		НомерДок	= Т_+ СокрЛП(Док.НомерДок);
//		ДатаВремяДок= Т_+ ДатаВФорматеXML(Док.ДатаДок) + " " + СтрЗаменить(Док.ПолучитьВремя(),":","-");
//		Комментарий = Т_+ СокрЛП(УбратьСимволыКонцаСтроки(Док.Комментарий));
//		СостДок 	= Т_+ ?(Док.Проведен() = 1, "1", "2");
//		СуммаДок	= Т_+ Строка(Док.Итог("Сумма"));
//		СуммаНДС	= Т_+ Строка(Док.Итог("СуммаНДС"));
//		Скидка 		= Т_+ Строка(Процент);
//		СрокДок		= Т_+ ДатаВФорматеXML(Док.ДатаОплаты);		
//		ДатаОплаты  = Т_+ ДатаВФорматеXML(Док.ДатаОплаты);
//		ТипЦен		= Т_+ ПолучитьКодТипаЦеныВКПК(Док.ТипЦен, Док);
//		//ВидОплаты	= Т_+ Строка(Док.ВидОплаты.ПорядковыйНомер());
//		ВидОплаты	= Т_ + "";
//		ИдДокЗв 	= Т_+ ?(Док.ДокОснование.Выбран() = 1, ВернутьИдентификаторДок(Док.ДокОснование), "");
//		НомерСФ		= Т_+ "0";
//		УчетНДС		= Т_+ Строка(Док.УчитыватьНДС); 		
//		
//		АгентИнфо = ПолучитьДанныеАгента(АгентАвтор);
//		
//		Если Док.Склад <> АгентИнфо.ПередвижнойСклад Тогда
//			СостДокВЦБД	= Т_+ Строка(ВернутьСостояниеДок(Док) + 8 + 512);//Документ будет запрещен для редактирования и остатки не будут изменены;		      
//		Иначе
//			СостДокВЦБД = Т_+ Строка(ВернутьСостояниеДок(Док) + 8);//Документ будет запрещен для редактирования
//		КонецЕсли;         
//		
//		//Выгружаем заголовок
//		Текст.ДобавитьСтроку(ИдДок + СостДок + СостДокВЦБД + ДатаВремяДок + НомерДок + ИдФирмы + ИдКлиента + 
//							 ИдТоргТочки + СуммаДок + СуммаНДС + Скидка + Комментарий + ВидОплаты + ТипЦен + 
//							 ДатаОплаты + ИдДокЗв + НомерСФ + УчетНДС);
//			
//		//Выгружаем табличную часть
//		Текст.ДобавитьСтроку("<Begin>" + Т_ + "Lines");
//		Док.ВыбратьСтроки();
//		Пока Док.ПолучитьСтроку() = 1 Цикл
//		    Если Док.Номенклатура.Выбран() = 0 Тогда
//		        Продолжить;
//			КонецЕсли;  
//			
//			Стр = 0;
//			Если ТДопТовары.НайтиЗначение(Док.Номенклатура,Стр,"Товар") = 0 Тогда
//			    ТДопТовары.НоваяСтрока(); 
//				ТДопТовары.Товар = Док.Номенклатура;
//			КонецЕсли;
//			
//			ТоварИнфо = ПолучитьСправочныеДанные(Док.Номенклатура);
//			Если ТоварИнфо.Выбран() = 0 Тогда
//				ТоварИнфо = ЗаписатьСправочныеДанные(Док.Номенклатура);
//			КонецЕсли;
//			ИдТовара = СокрП(ТоварИнфо.Идентификатор);
//			Кол		 = Строка(Док.Количество*Док.Коэффициент);
//			Цена 	 = Строка(Док.Цена);
//			Сумма	 = Строка(Док.Сумма);
//			НДС 	 = Строка(Док.СуммаНДС);
//			//"Struct:GoodsID,Amount,Price,Sum,=VAT"
//			Текст.ДобавитьСтроку(ИдТовара  + Т_ + Кол + Т_ + Цена + Т_ + Сумма + Т_ + НДС);
//		КонецЦикла;
//		Текст.ДобавитьСтроку("<End>" + Т_ + "Lines");
//		
//		//Включаем в таблицу клиентов и торговые точки из выгружаемых накладных, 
//		//чтоб затем этих клиентов и точки выгрузить в КПК
//		
//		Стр = 0;
//		Если ТоргТочка.Выбран() = 1 Тогда
//			Если ТДопКлиенты.НайтиЗначение(ТоргТочка, Стр, "ТоргТочка") = 0 Тогда
//			    ТДопКлиенты.НоваяСтрока();
//				ТДопКлиенты.Клиент    = ТоргТочка.Владелец;
//				ТДопКлиенты.Должник   = 0;
//				ТДопКлиенты.ТоргТочка = ТоргТочка;
//			КонецЕсли;
//		ИначеЕсли Клиент.Выбран() = 1 Тогда
//			Если ТДопКлиенты.НайтиЗначение(Клиент, Стр, "Клиент") = 0 Тогда
//			    ТДопКлиенты.НоваяСтрока();
//				ТДопКлиенты.Клиент    = Клиент;
//				ТДопКлиенты.Должник   = 0;
//				ТДопКлиенты.ТоргТочка = 0;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Текст.ДобавитьСтроку("<End>" + Т_ + "Doc_Sale");
//	
//КонецПроцедуры // ВыгрузкаРасходныхНакладных()
//   
////******************************************************************************
////Выгрузка в КПК документов перемещений
////Документы "Перемещение" для КПК выступают в роли погрузочных и разгрузочных складских документов.
////Докумепты "Перемещение" в КПК используются только в случае "торговли с колес"
////В таблице ТДопТовары возвращаются указанные в документах "Перемещение" товары
//Процедура ВыгрузкаПеремещений(Текст, ТДопТовары)
//	
//	Если СрокПеремещений = 0 Тогда //если в диалоге не указан срок создания документов перемещений, то не выгружаем их сосвем
//	    Возврат;
//	КонецЕсли;
//	
//	//возможные типы перемещений;
//	ТипЗагрузкаВМашину 	= 1;
//	ТипВыгрузкаИзМашины = 2;
//	
//	СкладАгента = АгентИнфо.ПередвижнойСклад;
//	Если СкладАгента.Выбран() = 0 Тогда
//		ОповеститьОСобытии("За агентом не закреплен автомобиль. Выгрузка документов перемещений не произведена.", "!");
//	    Возврат;
//	КонецЕсли;
//	
//	ОкноСостояние("Выгрузка перемещений...");
//	
//	Док = СоздатьОбъект("Документ");
//
//	ДопРеквизиты = 	"";
//	//Начало тэга с описанием его структуры:
//	Текст.ДобавитьСтроку("<Begin>" +Т_+ "Doc_Move" + Т_
//		+ "Struct:DocID,DocState,DocFlags,TimeCrt,DocNumber,=Category,FirmID,StoreID,DocSum,MoveType,Comment,MDocID"
//		+ ДопРеквизиты);		
//	//Описание структуры вложенных тэгов Lines (табличная часть документа):
//	Текст.ДобавитьСтроку("<Sub>" +Т_+ "Lines" +Т_+ "Struct:GoodsID,Amount,Price,Sum,=VAT");
//	
//	Кол = 0;
//	
//	ДатаПервПеремещения = ТекущаяДата()-(СрокПеремещений-1);
//	
//	Док.ВыбратьДокументы(ДатаПервПеремещения, ТекущаяДата()); //просматриваем документы за последние три дня
//	Пока Док.ПолучитьДокумент() = 1 Цикл
//	    Если Док.Вид() <> "ПеремещениеТМЦ" Тогда
//	        Продолжить;
//		ИначеЕсли Док.Проведен() = 0 Тогда
//			Продолжить;
//		КонецЕсли;
//		                
//		// Выгружаем только перемещения, связанные со складом (автомобилем) агента 
//		Если (Док.Склад <> СкладАгента) И (Док.СкладПолучатель <> СкладАгента) Тогда
//		    Продолжить; 
//		КонецЕсли;
//		
//		Кол = Кол + 1;
//	    Состояние("Выгрузка перемещений: "+Кол);
//		
//		//определяем тип перемещения
//		Если Док.СкладПолучатель = СкладАгента Тогда
//			ТипПеремещения = ТипЗагрузкаВМашину;
//			СкладИнфо = ПолучитьСправочныеДанные(Док.Склад);
//			Если СкладИнфо.Выбран() = 0 Тогда
//				СкладИнфо = ЗаписатьСправочныеДанные(Док.Склад);
//			КонецЕсли;
//			ИдСклада = СокрП(СкладИнфо.Идентификатор);
//		Иначе
//			ТипПеремещения = ТипВыгрузкаИзМашины;
//			СкладПолучательИнфо = ПолучитьСправочныеДанные(Док.СкладПолучатель);
//			Если СкладПолучательИнфо.Выбран() = 0 Тогда
//				СкладПолучательИнфо = ЗаписатьСправочныеДанные(Док.СкладПолучатель);
//			КонецЕсли;
//			ИдСклада = СокрП(СкладПолучательИнфо.Идентификатор);
//		КонецЕсли;
//
//		ФирмаИнфо = ПолучитьСправочныеДанные(Док.Фирма);
//		Если ФирмаИнфо.Выбран() = 0 Тогда
//			ФирмаИнфо = ЗаписатьСправочныеДанные(Док.Фирма);
//		КонецЕсли;
//		ИдФирмы = СокрП(ФирмаИнфо.Идентификатор);
//		
//		ИдДок 	= ВернутьИдентификаторДок(Док.ТекущийДокумент());
//		
//		НеОбновлять = флТолькоНовыеПеремещения * 256;
//		
//		КатегорияДок = ПолучитьКатегориюПоДокументу(Док);
//		//КодКатегории = ?(Док.Категория.Выбран() = 1, Строка(Док.Категория.Код), "0");
//		Если КатегорияДок.Код <> 0 Тогда
//			КодКатегории = КатегорияДок.Код; 
//		КонецЕсли;	
//		
//		НомерДок	= СокрЛП(Док.НомерДок);
//		ДатаВремяДок= ДатаВФорматеXML(Док.ДатаДок) + " " + СтрЗаменить(Док.ПолучитьВремя(),":","-");
//		Комментарий = СокрЛП(Док.Комментарий);
//		СостДок 	= ?(Док.Проведен() = 1, "1", "2"); 
//		СуммаДок	= Строка(Док.Итог("Сумма"));
//		СостДокВЦБД = Строка(ВернутьСостояниеДок(Док) + 8 + НеОбновлять);//Документ будет запрещен для редактирования
//						//в строке выше +8 означает, что документ будеи запрещен для редактирования в КПК
//						//Если "НеОбновлять" = 256, то если документ уже есть в КПК, он загружен не будет (иначе - он будет обновлен)
//		ИдДокОсн 	= ?(Док.ДокОснование.Выбран() = 1, ВернутьИдентификаторДок(Док.ДокОснование), "");
//		ТипПерем	= Строка(ТипПеремещения);
//
//		//Выгружаем заголовок
//		//"Struct:DocID,DocState,DocFlags,TimeCrt,DocNumber,FirmID,StoreID,DocSum,MoveType,Comment,MDocID"
//		//+ Доп. реквизиты: нет
//		ДопРеквизиты = "";
//		Текст.ДобавитьСтроку(ИдДок +Т_+ СостДок +Т_+ СостДокВЦБД +Т_+ ДатаВремяДок +Т_+ НомерДок +Т_
//			+ КодКатегории  +Т_+ ИдФирмы +Т_+ ИдСклада +Т_+ СуммаДок +Т_+ ТипПерем +Т_+ УбратьСимволыКонцаСтроки(Комментарий) +Т_+ ИдДокОсн + ДопРеквизиты);	   
//			
//		//Выгружаем табличную часть
//		Текст.ДобавитьСтроку("<Begin>" + Т_ + "Lines");
//		Док.ВыбратьСтроки();
//		Пока Док.ПолучитьСтроку() = 1 Цикл
//			Товар = Док.Номенклатура;
//		    Если Товар.Выбран() = 0 Тогда
//		        Продолжить;
//			КонецЕсли;
//			
//			Стр = 0;
//			Если ТДопТовары.НайтиЗначение(Товар,Стр,"Товар") = 0 Тогда
//			    ТДопТовары.НоваяСтрока(); ТДопТовары.Товар = Товар;
//			КонецЕсли;
//			
//			ТоварИнфо = ПолучитьСправочныеДанные(Товар);
//			Если ТоварИнфо.Выбран() = 0 Тогда
//				ТоварИнфо = ЗаписатьСправочныеДанные(Товар);
//			КонецЕсли;
//			ИдТовара = СокрП(ТоварИнфо.Идентификатор);
//			Кол		 = Строка(Док.Количество*Док.Коэффициент);
//			Цена 	 = Строка(Док.Цена);
//			Сумма	 = Строка(Док.Сумма);
//			НДС 	 = Строка(Док.СуммаНДС);
//			//"Struct:GoodsID,Amount,Price,Sum,=VAT"
//			Текст.ДобавитьСтроку(ИдТовара  + Т_ + Кол + Т_ + Цена + Т_ + Сумма + Т_ + НДС);
//		КонецЦикла;
//		Текст.ДобавитьСтроку("<End>" + Т_ + "Lines");
//		
//	КонецЦикла;
//	
//	Текст.ДобавитьСтроку("<End>" + Т_ + "Doc_Move");
//	
//КонецПроцедуры // ВыгрузкаПеремещений()
//
////******************************************************************************
//Процедура ВыгрузкаВзаиморасчетов(Текст, ТДопКлиенты)
//	
//	ОкноСостояние("Расчет взаиморасчетов...");
//	
//	ТекстЗапроса = "
//	|Договор		= Регистр.Покупатели.Договор;	
//	|КредДокумент	= Регистр.Покупатели.КредДокумент;
//	|Долг			= Регистр.Покупатели.СуммаРуб;
//	|Функция КонДолг = КонОст(Долг);
//	|Группировка Договор;
//	|Группировка КредДокумент;           	
//	|Условие(КредДокумент.Вид() = ""Реализация"");	
//	|";    
//	
//	Запрос = СоздатьОбъект("Запрос");
//	
//	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
// 		ОповеститьОСобытии("Не выполнился запрос по взаиморасчетам!", "!!!");
//		Возврат;
//	КонецЕсли;
//	
//	ОкноСостояние("Выгрузка взаиморасчетов...");
//	
//	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Doc_Debt" + Т_ + "Struct:DocID,DocState,DocFlags,TimeCrt,DocNumber,=Category,FirmID,ClientID,=TPointID,DocSum,Comment,=DocDescr,FullSum,PayDate");
//	Кол = 0; 
//	
//	//СрокОплаты = РабочаяДата() + 3;  //выгружаем только те долги, которые уже просрочены или будут просрочены в ближайшие три дня
//	
//	Пока Запрос.Группировка("Договор") = 1 Цикл
//		Клиент 	   = Запрос.Договор.Владелец;
//		КлиентИнфо = ПолучитьСправочныеДанные(Клиент);
//		Если КлиентИнфо.Выбран() = 0 Тогда
//			КлиентИнфо = ЗаписатьСправочныеДанные(Клиент);
//		КонецЕсли;		
//		ИдКлиента	= СокрП(КлиентИнфо.Идентификатор);
//		Пока Запрос.Группировка("КредДокумент") = 1 Цикл
//			
//			КредДок = Запрос.КредДокумент;
//			Если КредДок.Выбран() = 0 Тогда
//			    Продолжить;
//			ИначеЕсли Запрос.КонДолг<0 Тогда
//			    Продолжить;
//			КонецЕсли;      
//			     
//			СрокОплаты = РабочаяДата();
//			Если Запрос.Договор.НеКонтролироватьКредит = 0 Тогда
//				СрокОплаты = РабочаяДата() + Запрос.Договор.ГлубинаКредита; 
//			КонецЕсли;
//			
//			ВидДок = КредДок.Вид();				
//			Если КредДок.ДатаОплаты > СрокОплаты Тогда
//			    Продолжить;
//			КонецЕсли;
//			
//			АгентАвтор = ПолучитьАгентаПоДокументу(КредДок);
//			Если АгентАвтор <> ВыбАгент Тогда
//			    Продолжить;
//			КонецЕсли;
//			
//			//А+ (релиз 15, 26.11.04) добавлено:
//			ВысокаяВажность = ?((КредДок.ДатаОплаты + 100) < СрокОплаты, 64, 0); //если равно 64, то документ в КПК будет выделен красным цветом, НО ...
//			//^^^ ... Но обратите внимание, если Вы в КПК используете категории документов, то выделение документов 
//			// красным цветом становится возможным только при помощи соответствующей цветовой категории
//			// документа, выгружаемой в параметре Category тэга, если же режим использования цветовых 
//			// категорий в КПК отключен, то документы с флагом 64 (как приведено в строке кода выше) будут
//			// выделяться красным цветом.                          
//			
//			КатегорияДок = ПолучитьКатегориюПоДокументу(КредДок, 1);
//			Если КатегорияДок.Код <> 0 Тогда
//				КодКатегории = КатегорияДок.Код; 
//			КонецЕсли;
//			
//			ФирмаИнфо = ПолучитьСправочныеДанные(КредДок.Фирма);
//			Если ФирмаИнфо.Выбран() = 0 Тогда
//				ФирмаИнфо = ЗаписатьСправочныеДанные(КредДок.Фирма);
//			КонецЕсли;
//			ИдФирмы = СокрП(ФирмаИнфо.Идентификатор);
//			
//			Кол = Кол + 1;
//			Если Кол % 10 = 0 Тогда
//			    Состояние("Выгрузка взаиморасчетов: "+Кол);
//			КонецЕсли;                                                                                
//			
//			ТоргТочка = ПолучитьПустоеЗначение("Справочник.кпкТорговыеТочки");
//			
//			Если глЕстьРеквизитШапки("кпкТоргТочка", ВидДок) = 1 Тогда
//				ТоргТочка = КредДок.кпкТоргТочка; 
//			    Если ТоргТочка.Выбран() = 1 Тогда
//			        ИдТоргТочки = СокрП(ТоргТочка.Идентификатор);
//				Иначе
//					ИдТоргТочки = ИдКлиента;
//				КонецЕсли;
//			Иначе
//				ИдТоргТочки = ИдКлиента;//идентификатором клиента обозначаются "пустые" торговые точки				
//			КонецЕсли;
//			
//			//Проверяем идентификатор документа, если идентификатора нет, то идентификатор создаем
//			ИдДолга = ВернутьИдентификаторДок(КредДок);
//			
//			НомерДок	= СокрЛП(КредДок.НомерДок);
//			ДатаВремяДок= ДатаВФорматеXML(КредДок.ДатаДок) + " " + СтрЗаменить(КредДок.ПолучитьВремя(),":","-");
//			Долг		= Строка(Запрос.КонДолг);
//			Комментарий = СтрЗаменить(СокрЛП(КредДок.Комментарий),"""","'");
//			СостДок 	= ?(КредДок.Проведен() = 1, "1", "2");
//			СуммаДок	= Строка(КредДок.Итог("Сумма"));
//			СрокДок		= ДатаВФорматеXML(КредДок.ДатаОплаты);
//			СостДокВЦБД = Строка(ВернутьСостояниеДок(КредДок) + 8 + ВысокаяВажность);// +8 означает, что документ будет запрещен для редактирования
//			
//			//DocID,DocState,DocFlags,TimeCrt,DocNumber,FirmID,ClientID,=TPointID,DocSum,Comment,=DocDescr,FullSum,PayDate
//			Текст.ДобавитьСтроку(ИдДолга +Т_+ СостДок +Т_+ СостДокВЦБД +Т_+ ДатаВремяДок +Т_
//				+ НомерДок +Т_+ КодКатегории +Т_+ ИдФирмы +Т_+ ИдКлиента +Т_+ ИдТоргТочки +Т_+ Долг +Т_
//				+ УбратьСимволыКонцаСтроки(Комментарий) +Т_+ КредДок.ПредставлениеВида() +Т_+ СуммаДок +Т_+ СрокДок);
//				
//			Стр = "";
//			Если ПустоеЗначение(ТоргТочка) = 0 Тогда
//				Если ТДопКлиенты.НайтиЗначение(ТоргТочка, Стр, "ТоргТочка") = 0 Тогда
//				    ТДопКлиенты.НоваяСтрока();
//					ТДопКлиенты.Клиент    = ТоргТочка.Владелец;
//					ТДопКлиенты.Должник 	= 1;
//					ТДопКлиенты.ТоргТочка = ТоргТочка;
//				КонецЕсли;
//			Иначе
//				Если ТДопКлиенты.НайтиЗначение(Клиент, Стр, "Клиент") = 0 Тогда
//				    ТДопКлиенты.НоваяСтрока();
//					ТДопКлиенты.Клиент    = Клиент;
//					ТДопКлиенты.Должник 	= 1;
//					ТДопКлиенты.ТоргТочка = 0;
//				КонецЕсли;
//			КонецЕсли;
//			
//		КонецЦикла;
//	КонецЦикла;
//	
//	Текст.ДобавитьСтроку("<End>" + Т_ + "Doc_Debt");
//	
//	ОкноСостояние();
//	
//КонецПроцедуры //ВыгрузкаВзаиморасчетов()
//
//
////******************************************************************************
//Процедура ВыгрузкаКлиента(Текст, Клиент, РегВзаиморасчеты, ДатаПеорРекв, ИдРодителя)
//	
//	КлиентИнфо = ПолучитьСправочныеДанные(Клиент);
//	Если ПустоеЗначение(КлиентИнфо) = 1 Тогда
//		КлиентИнфо = ЗаписатьСправочныеДанные(Клиент);
//	КонецЕсли;                                  	
//	ИдКлиента = СокрП(КлиентИнфо.Идентификатор);
//	НаимКлиента = Т_ + СокрЛП(Клиент.Наименование);
//	
//	Если Клиент.ЭтоГруппа() = 1 Тогда
//		
//		ДопРеквизиты = Т_ + "" + Т_ + "" + Т_+ "" + Т_+ "" + Т_+ ""
//		+ Т_+ "" + Т_ + "" + Т_ + "" + Т_ + "" + Т_ + "" + Т_ + "" + Т_ + "1" + Т_ + ИдРодителя;		     
//		
//		Текст.ДобавитьСтроку(ИдКлиента + НаимКлиента + Т_ + ""+ Т_ + "" + Т_ + "" + Т_ + "" + Т_ + "" 
//		+ Т_ + "" + Т_ + "" + Т_ + "" + Т_ + "" + Т_ + "" + Т_ + "" + Т_ + "" + Т_ + "" + Т_ + "" + ДопРеквизиты); 		
//		
//	Иначе
//		
//		ОснДог = Клиент.ОсновнойДоговор;
//		ЮрФизЛицо = Клиент.ЮрФизЛицо;  		
//		
//		Если ПустоеЗначение(ИдКлиента) = 1 Тогда 
//			ОповеститьОСобытии("Для контрагента " + СокрЛП(Клиент) + " не заполнен идентификатор в справочнике ""Настройка контрагентов""" +  
//							   "Выгрузка контрагента " + СокрЛП(Клиент) + " пропущена", "!", 1, Клиент);
//			СтатусВозврата(0);
//		КонецЕсли;
//		
//		Долг = Т_ + Строка(РегВзаиморасчеты.СводныйОстаток(, ОснДог, , , , "СуммаРуб"));
//		Если ОснДог.Выбран() = 1 Тогда
//			Кредит		= Т_ + Строка(ОснДог.СуммаКредита);
//			Скидка  	= Т_ + Строка(ОснДог.Скидка.Процент);
//		Иначе
//			Кредит		= Т_;
//			Скидка  	= Т_;
//		КонецЕсли;
//		
//		СрокДоговора = "";                              
//		
//		НаимКлиента = СокрП(Клиент.Наименование);  	
//		НаимКлиента = Т_ + УбратьСимволыКонцаСтроки(НаимКлиента);
//		
//		Если ЮрФизЛицо.Выбран() = 1 Тогда
//			Адрес	= Т_ + УбратьСимволыКонцаСтроки(ЮрФизЛицо.ФактАдрес);
//			Телефон	= Т_ + УбратьСимволыКонцаСтроки(ЮрФизЛицо.Телефоны);
//			ИННКПП  = Сокрлп(ЮрФизЛицо.ИНН);
//			Разделитель = Найти(ИННКПП, "\");
//			Если Разделитель <> 0 Тогда
//				// найден разделитель
//				ИНН = Лев(ИННКПП, Разделитель - 1);
//				КПП = СокрЛП(Сред(ИННКПП, Разделитель + 1));
//			Иначе
//				ИНН = СокрЛП(ИННКПП);
//				КПП= "";
//			КонецЕсли;
//			ПолнНаименование = УбратьСимволыКонцаСтроки(ЮрФизЛицо.ПолнНаименование);
//		Иначе
//			Адрес		= Т_;
//			Телефон		= Т_;
//			ИНН			= "";
//			КПП			= "";
//			ПолнНаименование = "";
//		КонецЕсли;
//		
//		Если КлиентИнфо.Выбран() = 1 Тогда
//			ПерсЦены	= Т_ + Строка(КлиентИнфо.флПерсЦены);	
//			КатегТов	= Т_;
//		Иначе
//			КлиентИнфо	= ЗаписатьСправочныеДанные(Клиент);
//			ПерсЦены	= Т_;
//			КатегТов	= Т_;
//		КонецЕсли;
//		СвойстваТов	= Т_ + Строка(0);//признак "Не использовать в фильтре свойства"
//		
//		//допускается выгрузка списка кодов видов оплат, перечисляемых через запятую, как это сделано при выгрузке фирм
//		ВидОплаты = Т_ + ?(КлиентИнфо.ВидОплаты.Выбран() = 0, " ", Строка(КлиентИнфо.ВидОплаты.ПорядковыйНомер()));
//				
//		ИндивидЦена = Т_ + "";	
//		Если КлиентИнфо.ИспользоватьТипЦеныОснДог = 1 Тогда
//			Если ОснДог.ТипЦен.Выбран() = 1 Тогда // Использование типа цен из основного договора контрагента	 
//				ТипЦеныИнфо = ПолучитьСправочныеДанные(ОснДог.ТипЦен);
//				Если ПустоеЗначение(ТипЦеныИнфо) = 1 Тогда
//					ТипЦеныИнфо = ЗаписатьСправочныеДанные(ОснДог.ТипЦен);
//				КонецЕсли;                    
//			КонецЕсли;                   
//			ИндивидЦена = Т_ + ПолучитьКодТипаЦеныВКПК(ОснДог.ТипЦен, ОснДог); 					
//		ИначеЕсли КлиентИнфо.ИндивидуальнаяЦена.Выбран() = 1 Тогда
//			ИндивидЦена = Т_ + ПолучитьКодТипаЦеныВКПК(КлиентИнфо.ИндивидуальнаяЦена.Ссылка, Клиент);						
//		КонецЕсли;                				
//		
//		Если КлиентИнфо.ДоступныВсеЦены = 1 Тогда //клиенту разрешен отпуск товаров по любым типам цен			
//			ТипыЦен = Т_ + ""; // означает "все возможные цены", но в этом параметре можно перечислять допустимые типы цен через запятую
//		Иначе //клиенту разрешен отпуск товаров только по одной индивидуальной цене из справочника кпкКонтрагенты
//			ТипыЦен = ИндивидЦена;
//		КонецЕсли;
//		
//		КодСтатуса  = Т_ + ?(КлиентИнфо.Статус.Выбран() = 0, "0", Строка(КлиентИнфо.Статус.Код));
//			
//		Если КлиентИнфо.ОсновнаяФирма.Выбран() = 1 Тогда			      		
//			ОсновнаяФирмаИнфо = ПолучитьСправочныеДанные(КлиентИнфо.ОсновнаяФирма);
//			Если ОсновнаяФирмаИнфо.Выбран() = 1 Тогда
//				ИдФирмы = Т_ + СокрП(ОсновнаяФирмаИнфо.Идентификатор);
//			Иначе
//  				ИдФирмы = Т_ + "";
// 			КонецЕсли;			
//		Иначе
//			ИдФирмы = Т_ + "";
//		КонецЕсли;    
//		
//		Категория = Т_ + СокрЛП(КлиентИнфо.Категория.Код);
//		
//		ОснСчет = Клиент.ОсновнойСчет;
//		
//		Банк     = Т_ + ""; 
//		БИК 	 = Т_ + "";	
//		КСчет    = Т_ + "";
//		РСчет    = Т_ + "";
//		Если ОснСчет.Выбран() = 1 Тогда
//			Если ОснСчет.Банк.Выбран() = 1 Тогда
//				Банк     = Т_ + СокрЛП(ОснСчет.Банк.Наименование); 
//				БИК 	 = Т_ + СокрЛП(ОснСчет.Банк.Код);			
//				КСчет    = Т_ + СокрЛП(ОснСчет.Банк.КоррСчет);
//			КонецЕсли;
//			РСчет    = Т_ + СокрЛП(ОснСчет.НомерСчета);	
//		КонецЕсли;	                
//		
//		//дополнительные реквизиты клиента:
//		ДопРеквизиты = Т_ + ИНН + Т_ + КПП + Т_+ СокрП(Лев(ПолнНаименование,128))
//		+ Т_+ Строка(КлиентИнфо.ОборотПродаж.Получить(ДатаПеорРекв)) +Т_+ ДатаВФорматеXML(СрокДоговора)
//		+ Т_+ Строка(КлиентИнфо.VIP) + Т_+ Строка(КлиентИнфо.КлиентКонкурентов) + Банк + БИК + КСчет +
//		РСчет + Т_ + "0" + Т_ + ИдРодителя;
//		
//		Текст.ДобавитьСтроку(ИдКлиента + НаимКлиента + Кредит + Долг + Скидка + Телефон + КодСтатуса 
//		+ Адрес + ВидОплаты + ТипыЦен + ИндивидЦена + ИдФирмы + ПерсЦены + КатегТов + СвойстваТов + Категория + ДопРеквизиты);
//		
//	КонецЕсли;
//	
//КонецПроцедуры // ВыгрузкаКлиента()      
//
////******************************************************************************
//Процедура ВыгрузкаТоргТочки(Текст, ТоргТочка,ИдКлиента)
//	
//	НаимТочки 	= СокрЛП(?(ПустоеЗначение(ТоргТочка.ПолнНаименование) = 0, ТоргТочка.ПолнНаименование, ТоргТочка.Наименование));
//	
//	НаимТочки = УбратьСимволыКонцаСтроки(НаимТочки);
//	
//	ИдТочки		= СокрП(ТоргТочка.Идентификатор);
//	Если ТоргТочка.Владелец.Выбран() = 0 Тогда
//	    Возврат;
//	КонецЕсли;  
//	
//	Адрес		= СтрЗаменить(УбратьСимволыКонцаСтроки(ТоргТочка.Адрес),"""","'");
//	Зона		= СтрЗаменить(СокрЛП(ТоргТочка.Зона),"""","'");
//	Телефон		= СтрЗаменить(СокрЛП(ТоргТочка.Телефоны),"""","'");
//	Категория   = СокрЛП(ТоргТочка.Категория.Код);
//	   
//	Контакты = "";
//	СпрКЛ = СоздатьОбъект("Справочник.кпкКонтактныеЛица");
//	СпрКЛ.ИспользоватьВладельца(ТоргТочка);
//	СпрКЛ.ВыбратьЭлементы();
//	Пока СпрКЛ.ПолучитьЭлемент() = 1 Цикл 
//		Если СпрКЛ.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;
//		Контакты = Контакты + СокрЛП(СпрКЛ.Наименование) + ";";    
//	КонецЦикла; 
//	
//	Контакты = Лев(Контакты, СтрДлина(Контакты) - 1); // Убрали последнюю запятую
//	
//	Контакт	= УбратьНечитаемыеСимволы(Лев(Контакты, 128));
//	
//	Если ТоргТочка.ОснКатегорияНоменклатуры.Выбран() = 1 Тогда
//		
//		лКатегория = ТоргТочка.ОснКатегорияНоменклатуры.Наименование + "                                                                                ";
//		
//		Стр = 0;
//		Если ТаблицаКатегорий.НайтиЗначение(Лев(лКатегория,50),Стр,) = 1 Тогда
//			ТаблицаКатегорий.ПолучитьСтрокуПоНомеру(Стр);
//			КатегТов = Строка(ТаблицаКатегорий.Номер);
//		Иначе                            
//			КатегТов = "";
//		КонецЕсли;					  
//		
//	Иначе
//		КатегТов = "";
//	КонецЕсли;
//	
//	СвойстваТов	= Строка(0);//признак "Не использовать в фильтре свойства"	
//	
//	ВидОплаты 	= ?(ТоргТочка.ВидОплаты.Выбран() = 0, " ", Строка(ТоргТочка.ВидОплаты.ПорядковыйНомер()));
//	Если ТоргТочка.ДоступныВсеЦены = 1 Тогда //торг. точке разрешен отпуск товаров по любым типам цен
//		ТипыЦен = " "; //означает "все возможные цены", но в этом параметре можно перечислять допустимые типы цен через запятую
//		Если ТоргТочка.ИндивидуальнаяЦена.Выбран() = 1 Тогда
//	    	ИндивидЦена = ПолучитьКодТипаЦеныВКПК(ТоргТочка.ИндивидуальнаяЦена.Ссылка, ТоргТочка);
//		Иначе
//			ИндивидЦена = "0";
//		КонецЕсли;
//	Иначе //торг. точке разрешен отпуск товаров только по одной индивидуальной цене
//		Если ТоргТочка.ИндивидуальнаяЦена.Выбран() = 1 Тогда
//	    	ИндивидЦена = ПолучитьКодТипаЦеныВКПК(ТоргТочка.ИндивидуальнаяЦена.Ссылка, ТоргТочка);
//			ТипыЦен 	= ИндивидЦена;
//		Иначе
//			ТипыЦен  	= " "; //означает "все возможные цены", но в этом параметре можно перечислять допустимые типы цен через запятую
//			ИндивидЦена = "0";
//		КонецЕсли;
//	КонецЕсли;
//	
//	//дополнительные реквизиты торговой точки:
//	ДопРеквизиты= Т_+ Строка(ТоргТочка.ТипТочки.Код) +Т_+ СокрП(ТоргТочка.ВремяРаботы);
//	
//    Текст.ДобавитьСтроку(ИдКлиента +Т_+ ИдТочки +Т_+ НаимТочки + Т_
//	+ Адрес +Т_+ Зона +Т_+ Телефон + Т_+ Категория + Т_ + Контакт +Т_
//	+ ВидОплаты +Т_+ ТипыЦен +Т_+ ИндивидЦена +Т_+ КатегТов + Т_ + СвойстваТов + ДопРеквизиты);        
//	
//КонецПроцедуры // ВыгрузкаТоргТочки()
//
////******************************************************************************
//// ВключитьНовыхКлиентовИТоргТочки(ТДопКлиенты)
////
//// Параметры: 
////  
////
//// Возвращаемое значение:
////  Нет
////
//// Описание:
////  Включает в таблицу ТДопКлиенты клиентов и торговые точки, созданные в КПК
////  и загруженные в ЦБД - в целях подтверждения загрузки из КПК новых клиентов
////	и торговых точек
//Процедура ВключитьНовыхКлиентовИТоргТочки(ТДопКлиенты)
//                                                     
//	// Информацию о новых клиентах и торг.точках получаем из протоколов загрузки справочников с КПК
//	Спр = СоздатьОбъект("Справочник.КпкСправочники");
//	ДатаП1 = ТекущаяДата() - 6;
//	ДатаП2 = ТекущаяДата(); //интервал создания элементов спавочников в КПК - неделя
//	
//	Для День = ДатаП1 По ДатаП2 Цикл
//		Спр.ВыбратьЭлементыПоРеквизиту("ДатаСобытия",День,0,0);
//		Пока Спр.ПолучитьЭлемент() = 1 Цикл
//			Если Спр.Агент <> ВыбАгент Тогда
//			    Продолжить;
//			КонецЕсли;
//		    Элемент = Спр.ЭлементСпр;
//			Если (Элемент.Выбран() = 0) или (Элемент.ПометкаУдаления() = 1) Тогда  Продолжить; КонецЕсли;
//			ВидСпр = Элемент.Вид();
//			Стр = 0;
//			Если ВидСпр = "Контрагенты" Тогда
//				Если ТДопКлиенты.НайтиЗначение(Элемент, Стр, "Клиент") = 0 Тогда
//					ТДопКлиенты.НоваяСтрока();
//					ТДопКлиенты.Клиент    	= Элемент;
//					ТДопКлиенты.Должник 	= 0;
//					ТДопКлиенты.ТоргТочка 	= 0;
//				КонецЕсли;
//			ИначеЕсли ВидСпр = "кпкТорговыеТочки" Тогда 
//				Если ИспТочек = 1 Тогда
//					Если ТДопКлиенты.НайтиЗначение(Элемент, Стр, "ТоргТочка") = 0 Тогда
//						ТДопКлиенты.НоваяСтрока();
//						ТДопКлиенты.Клиент    	= Элемент.Владелец;
//						ТДопКлиенты.Должник 	= 0;
//						ТДопКлиенты.ТоргТочка 	= Элемент;
//					КонецЕсли;             
//				КонецЕсли;             
//			КонецЕсли;
//		КонецЦикла;
//	КонецЦикла;
//  	
//КонецПроцедуры // ВключитьНовыхКлиентовИТоргТочки()
//
////******************************************************************************
////Выгрузка сертификатов в файл выгрузки в КПК
//Процедура ВыгрузкаСертификатов(Текст)
//
//	ОкноСостояние("Выгрузка сертификатов...");
//	РегВзаиморасчеты = Регистр.Покупатели;
//	ДатаПеорРекв 	 = РабочаяДата();
//	
//    СписТоваров = СоздатьОбъект("СписокЗначений");   
//	
//	АППолучитьСписокТоваровИзАссортимента(СписТоваров, ВыбАссортимент);
//	
//	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_Sertif" + Т_ + "Struct:SertifID,Name,OrgSertif,DateBgn,DateEnd,_BLANKN,_ADRES");
//	
//	ТекДата = ТекущаяДата();
//	ТекстЗапроса = "
//	|Обрабатывать НеПомеченныеНаУдаление;
//	|ТекСертиф 		= Справочник.кпкСертификаты.ТекущийЭлемент;
//	|ДатаОкончания 	= Справочник.кпкСертификаты.ТекущийЭлемент.ДатаОкончания;
//	|Группировка ТекСертиф Без Упорядочивания Без Групп;
//	|Условие(ТекДата <= ДатаОкончания);
//	|Без итогов;";
//	
//	Запрос = СоздатьОбъект("Запрос");
//	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
//	    Возврат;
//	КонецЕсли;
//	
//	Пока Запрос.Группировка() = 1 Цикл
//		Срт 	= Запрос.ТекСертиф;
//		ИдСертиф= СокрП(Срт.Идентификатор);		
//		Номер  	= Т_+ СокрЛП(Срт.Наименование);
//		Бланк  	= Т_+ СокрЛП(Срт.Бланк);
//		Адрес  	= Т_+ УбратьСимволыКонцаСтроки(Срт.Адрес);
//		ОргСрт 	= Т_+ СокрЛП(Срт.ОрганСертификации);
//		ДатаН	= Т_+ ДатаВФорматеXML(Срт.ДатаНачала);
//		ДатаК	= Т_+ ДатаВФорматеXML(Срт.ДатаОкончания);
//							//"Struct:SertifID,Name,OrgSertif,DateBgn,DateEnd,_BLANKN,_ADRES"
//	    Текст.ДобавитьСтроку(ИдСертиф + Номер + ОргСрт + ДатаН + ДатаК + Бланк + Адрес);
//	КонецЦикла;
//	
//	Текст.ДобавитьСтроку("<End>" + Т_+ "Ref_Sertif");
//	
//	ОкноСостояние("");
//	
//КонецПроцедуры //ВыгрузкаСертификатов()  
//       
////******************************************************************************
//Процедура ВыгрузкаДоговоровКонтрагентов(Текст, ТабКлиентов)
//	                     
//	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_Agreements" + Т_ + "Struct:ObjID,FirmID,ClientID,=TPointID,Name,CodesList," +
//						 "PaymntType,PriceTypes,PriceType,TimeBegin,TimeEnd,=Status,=FltGdsCat,=FltGdsProp,=Comment");
//	
//	СписКлиентов = СоздатьОбъект("СписокЗначений");
//	
//	ТабКлиентов.Выгрузить(СписКлиентов,,,"Клиент");
//	
//	ТекстЗапроса = "
//	|Обрабатывать НеПомеченныеНаУдаление;
//	|Договор 		= Справочник.Договоры.ТекущийЭлемент;
//	|Клиент 		= Справочник.Договоры.Владелец;
//	|Группировка Договор Без Упорядочивания;
//	|Условие(Клиент В (СписКлиентов));
//	|Без итогов;";
//	
//	Запрос = СоздатьОбъект("Запрос");
//	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
//	    Возврат;
//	КонецЕсли;
//	
//	Пока Запрос.Группировка() = 1 Цикл
//	        
//		Договор   = Запрос.Договор;
//		Клиент    = Запрос.Клиент;
//		Фирма     = ?(АгентИнфо.Фирма.Выбран() = 1, АгентИнфо.Фирма, глЗначениеПоУмолчанию("ОсновнаяФирма"));
//				
//		ДоговорИнфо = ПолучитьСправочныеДанные(Договор);
//		Если ПустоеЗначение(ДоговорИнфо) = 1 Тогда
//			ДоговорИнфо = ЗаписатьСправочныеДанные(Договор);
//		КонецЕсли;                             
//				   		
//		КлиентИнфо = ПолучитьСправочныеДанные(Клиент);
//		Если ПустоеЗначение(КлиентИнфо) = 1 Тогда
//			КлиентИнфо = ЗаписатьСправочныеДанные(Клиент);
//		КонецЕсли;                             
//				  		
//		ФирмаИнфо = ПолучитьСправочныеДанные(Фирма);
//		Если ФирмаИнфо.Выбран() = 0 Тогда
//			ФирмаИнфо = ЗаписатьСправочныеДанные(Фирма);
//		КонецЕсли;
//	
//		ИдДоговора  = СокрЛП(ДоговорИнфо.Идентификатор);	
//		ИдКлиента   = СокрЛП(КлиентИнфо.Идентификатор);	 
//		ИдФирмы     = СокрЛП(ФирмаИнфо.Идентификатор);				
//		ИдТоргТочки = "";
//		
//		Наименование = УбратьНечитаемыеСимволы(Договор.Наименование);
//		
//		ВидыОплат 	   = "";
//		ВидОплатыУмолч = "";
//		     
//		ТипЦеныУмолч = "";
//		Если Договор.ТипЦен.Выбран() = 1 Тогда
//			ТипЦеныУмолч 	 = ПолучитьКодТипаЦеныВКПК(Договор.ТипЦен, Договор);
//		КонецЕсли;  
//		
//		ТипыЦен = "";
//		
//		ДатаНачала     = "";
//		ДатаОкончания  = "";
//		
//		Статус 		  = "";
//		СписКатегорий = "";
//		СписСвойств   = "";
//		Комментарий   = "";
//		
//		Текст.ДобавитьСтроку(ИдДоговора + Т_ + ИдФирмы + Т_ + ИдКлиента + Т_ + ИдТоргТочки + Т_ +
//		Наименование + Т_ + ВидыОплат + Т_ + ВидОплатыУмолч + Т_ + ТипыЦен + Т_ + ТипЦеныУмолч + Т_ + 
//		ДатаНачала + Т_ + ДатаОкончания + Т_ + Статус + Т_ + СписКатегорий + Т_ + СписСвойств + Т_ + Комментарий);
//				
//	КонецЦикла;
//	
//	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_Agreements");
//	
//КонецПроцедуры // ВыгрузкаДоговоровКонтрагентов()
//
////******************************************************************************
////Параметры:
////	Текст 		- текстовый файл
////	ПланАгента 	- документ "КпкПланПосещений" (может быть "не выбранным")
////	ТДопКлиенты	- должники, числящиеся за агентом или клиенты из документов "Маршрут" (таблица значений), т.е. клиенты, которых нет в плане посещений
//// Описание:
////  Процедура выгрузки клиентов и торговых точек в КПК
//Процедура ВыгрузкаКлиентов(Текст, ПланАгента, ТДопКлиенты)
//
//	ОкноСостояние("Выгрузка клиентов...");
//	РегВзаиморасчеты = Регистр.Покупатели;
//	ДатаПеорРекв 	 = РабочаяДата();
//	
//	//В таблицу ТДопКлиенты включаем клиентов и торговые точки, 
//	//которые были недавно созданы в КПК торговго агента.
//	ВключитьНовыхКлиентовИТоргТочки(ТДопКлиенты);
//
//	Если АгентИнфо.Контрагент.Выбран() = 1 Тогда 
//		//агент может выступать и сам как клиент, например, в случае
//		//оформленеия заявок на погрузку в машину (при "торговле с колес")
//	    Стр = 0;
//		Если ТДопКлиенты.НайтиЗначение(АгентИнфо.Контрагент,Стр,"Клиент") = 0 Тогда
//		    ТДопКлиенты.НоваяСтрока();
//			ТДопКлиенты.Клиент = АгентИнфо.Контрагент;
//		КонецЕсли;
//	КонецЕсли;
//	
//	ТДопКлиенты.Сортировать("+Клиент,+ТоргТочка");
//	
//	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_Clients" + Т_ + "Struct:ClientID,Name,Credit,Debt,Discount,Tel,=BlockSales,=Addr," + 
//						 "=CodesList,=PriceTypes,=PriceType,=FirmID,=UsePPrices,=FltGdsCat,=FltGdsProp,=Category,_INN,_KPP,_FNAME,_MSALES," + 
//						 "_SROKDOG,_VIP,_CLKONKUR,_BANK,_BIK,_KSCHET,_RSCHET,=IsFolder,=FolderID");
//	
//	//Обратите внимание: в конце описания структуры тега идут параметры: 
//	//"_INN,_OKPO,_FNAME,_MSALES,_SROKDOG" - это дополнительные реквизиты справочника "Клиенты", указанные в тэге "Ref_TblStruct"
//	//Тэг "Ref_TblStruct" выгружается процедурой ВыгрузкаСтруктурТаблиц()
//	//Названия дополнительных параметров обазательно начинаются с символа "подчеркивания"!
//	
//	Если ПланАгента.Выбран() = 0 Тогда //Выгрузка всех клиентов
//		
//		СпрТТ=СоздатьОбъект("Справочник.кпкТорговыеТочки"); 
//		
//		ТекстЗапроса = "
//		|Обрабатывать НеПомеченныеНаУдаление;
//		|ТекКлиент = Справочник.Контрагенты.ТекущийЭлемент;
//		|Группировка ТекКлиент Без Упорядочивания;
//		|//Условие(ТекКлиент В СписКлиентов); можно предусмотреть здесь фильтр, например, чтоб в КПК не попали поставщики
//		|Без итогов;";
//		Запрос = СоздатьОбъект("Запрос");
//	 	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
//	 		ОповеститьОСобытии("Не выполнился запрос по клиентам!", "!!!");
//			Возврат;
//		КонецЕсли;
//		
//		//выгружаемых клиентов запомним в таблице значений Т
//		Т = СоздатьОбъект("ТаблицаЗначений");
//		Т.НоваяКолонка("Клиент");
//		
//		ТекИдРодителя = 0;
//		
//		Пока Запрос.Группировка() = 1 Цикл
//			
//			Клиент = Запрос.ТекКлиент;
//			
//			Если Клиент.Родитель.Выбран() = 1 Тогда
//				РодительИнфо = ПолучитьСправочныеДанные(Клиент.Родитель);
//				Если ПустоеЗначение(РодительИнфо) = 1 Тогда
//					РодительИнфо = ЗаписатьСправочныеДанные(Клиент.Родитель);
//				КонецЕсли;                             
//				ИдРодителя = СокрЛП(РодительИнфо.Идентификатор);	
//			Иначе			                                    
//				ИдРодителя = "";				
//			КонецЕсли;
//			
//			Если ИдРодителя = ТекИдРодителя Тогда
//				ИдРодителя = "*";
//			Иначе
//				ТекИдРодителя = ИдРодителя;
//			КонецЕсли; 			
//			
//			ВыгрузкаКлиента(Текст, Клиент, РегВзаиморасчеты, ДатаПеорРекв, ИдРодителя);
//			Т.НоваяСтрока();
//			Т.Клиент = Клиент; //запоминаем выгруженных клиентов
//		КонецЦикла;
//		
//		Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_Clients");
//		
//		//Вывгружаем торговые точки выгруженных клиентов
//		Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_TPoints" + Т_ + "Struct:ClientID,TPointID,Name,Addr,=Zone,=Tel,=Category," + 
//						     "=Contact,=CodesList,=PriceTypes,=PriceType,=FltGdsCat,=FltGdsProp,_TPTYPE,_WORKTIME");
//		//Обратите внимание: в конце описания структуры тега идут параметры: 
//		//"_TPTYPE,_WORKTIME" - это дополнительные реквизиты справочника "Торговые точки", указанные в тэге "Ref_TblStruct"
//		//Тэг "Ref_TblStruct" выгружается процедурой ВыгрузкаСтруктурТаблиц()
//		//Названия дополнительных параметров обазательно начинаются с символа "подчеркивания" !
//		
//		Т.ВыбратьСтроки();
//		Пока Т.ПолучитьСтроку() = 1 Цикл
//			Клиент 		= Т.Клиент;
//			КлиентИнфо = ПолучитьСправочныеДанные(Клиент);
//			Если ПустоеЗначение(КлиентИнфо) = 1 Тогда
//				КлиентИнфо = ЗаписатьСправочныеДанные(Клиент);
//			КонецЕсли;
//			ИдКлиента	= СокрП(КлиентИнфо.Идентификатор);  
//			
//			Если ИспТочек = 1 Тогда
//				СпрТТ.ИспользоватьВладельца(Клиент);
//				СпрТТ.ВыбратьЭлементы();
//				Пока СпрТТ.ПолучитьЭлемент()=1 Цикл
//					Если СпрТТ.ПометкаУдаления()=1 Тогда
//						Продолжить;
//					КонецЕсли;
//					ВыгрузкаТоргТочки(Текст, СпрТТ.ТекущийЭлемент(),ИдКлиента);
//					ИдКлиента = "*";
//				КонецЦикла;    
//			КонецЕсли;
//		КонецЦикла;
//		
//		Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_TPoints");
//		
//	Иначе	//Выгрузка по плану посещений
//		
//		//выгружаемых клиентов запомним в таблице значений Т
//		Т = СоздатьОбъект("ТаблицаЗначений");
//		Т.НоваяКолонка("Клиент");
//		
//		ПланАгента.ВыбратьСтроки();
//		Пока ПланАгента.ПолучитьСтроку() = 1 Цикл			
//			Клиент = ПланАгента.Контрагент;
//		    Если Клиент.Выбран() = 1 Тогда    				
//				Стр = 0;
//		        Если Т.НайтиЗначение(Клиент,Стр,"Клиент") = 0 Тогда
//					Т.НоваяСтрока();
//					Т.Клиент = Клиент;
//					ВыгрузкаКлиента(Текст, Клиент, РегВзаиморасчеты, ДатаПеорРекв, "");
//		        КонецЕсли;
//		    КонецЕсли;
//		КонецЦикла;
//		
//		Если ТДопКлиенты.КоличествоСтрок() <> 0 Тогда
//			//Если есть клиенты-должники, числящиеся за агентом, 
//			//или клиенты вне плана посещений из-за документов "Маршрут", то выгружаем и их
//			ТДопКлиенты.ВыбратьСтроки();
//		    Пока ТДопКлиенты.ПолучитьСтроку() = 1 Цикл
//		        Стр = 0;
//				Если Т.НайтиЗначение(ТДопКлиенты.Клиент,Стр,"Клиент") = 0 Тогда
//				    Т.НоваяСтрока();
//					Т.Клиент = ТДопКлиенты.Клиент;
//					ВыгрузкаКлиента(Текст, Т.Клиент, РегВзаиморасчеты, ДатаПеорРекв, "");
//					Если ТДопКлиенты.Должник = 1 Тогда
//					    ОповеститьОСобытии("Выгружен дополнительно должник: " + ТДопКлиенты.Клиент, "i", 0);
//					КонецЕсли;
//				КонецЕсли;
//		    КонецЦикла;
//		    Т.Сортировать("+Клиент");
//		КонецЕсли;
//		
//		Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_Clients");
//		
//		//Выгружаем торговые точки
//		
//		Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_TPoints" + Т_ + "Struct:ClientID,TPointID,Name,Addr,=Zone,=Tel,=Category,=Contact,=CodesList,=PriceTypes,=PriceType,=FltGdsCat,=FltGdsProp,_TPTYPE,_WORKTIME" );
//		                  
//		Если ИспТочек = 1 Тогда
//			ТТТ = СоздатьОбъект("ТаблицаЗначений"); //Таблица выгруженных Торговых Точек
//			ТТТ.НоваяКолонка("ТоргТочка");
//			ПланАгента.ВыбратьСтроки();
//			Пока ПланАгента.ПолучитьСтроку() = 1 Цикл
//				ТоргТочка  = ПланАгента.ТоргТочка;
//				Клиент = ПланАгента.Контрагент;
//				КлиентИнфо = ПолучитьСправочныеДанные(Клиент);
//				Если ПустоеЗначение(КлиентИнфо) = 1 Тогда
//					КлиентИнфо = ЗаписатьСправочныеДанные(Клиент);
//				КонецЕсли;
//				ИдКлиента  = СокрП(КлиентИнфо.Идентификатор);
//				Если ТоргТочка.Выбран() = 1 Тогда
//					ВыгрузкаТоргТочки(Текст, ПланАгента.ТоргТочка, ИдКлиента);
//					ТТТ.НоваяСтрока();
//					ТТТ.ТоргТочка = ТоргТочка;
//				КонецЕсли;
//			КонецЦикла;            
//		КонецЕсли;
//		
//		//Если есть торговые точки-должники, числящиеся за агентом, 
//		//или торговые точки вне плана посещений из-за документов "Маршрут", то выгружаем и их
//		
//		Если ТДопКлиенты.КоличествоСтрок() <> 0 Тогда
//			ТДопКлиенты.ВыбратьСтроки();
//		    Пока ТДопКлиенты.ПолучитьСтроку() = 1 Цикл
//				Если ТДопКлиенты.Клиент.Выбран() = 1 Тогда
//					Стр = 0;  
//					Если ИспТочек = 1 Тогда
//						Если ТТТ.НайтиЗначение(ТДопКлиенты.ТоргТочка,Стр,"ТоргТочка") = 0 Тогда    
//							
//							Если ТДопКлиенты.ТоргТочка.Выбран() = 1 Тогда
//								Клиент = ТДопКлиенты.ТоргТочка.Владелец;     	
//							Иначе	                                            
//								Клиент = ТДопКлиенты.Клиент;     	
//							КонецЕсли;
//							КлиентИнфо = ПолучитьСправочныеДанные(Клиент);
//							Если ПустоеЗначение(КлиентИнфо) = 1 Тогда
//								КлиентИнфо = ЗаписатьСправочныеДанные(Клиент);
//							КонецЕсли;
//							ИдКлиента = СокрП(КлиентИнфо.Идентификатор); 
//							Если ТДопКлиенты.ТоргТочка.Выбран() = 1 Тогда
//								ВыгрузкаТоргТочки(Текст, ТДопКлиенты.ТоргТочка, ИдКлиента);
//							КонецЕсли;       	
//						
//						КонецЕсли;             
//					КонецЕсли;
//				КонецЕсли;
//		    КонецЦикла;
//		КонецЕсли;
//		
//		Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_TPoints");
//		
//	КонецЕсли;
// 	
//	Если Константа.кпкИспользоватьДоговоры = 1 Тогда
//		Состояние("Выгрузка договоров контрагентов...");
//		ВыгрузкаДоговоровКонтрагентов(Текст, Т); 
//	КонецЕсли;
//    
//	ОкноСостояние("");
//	
//КонецПроцедуры // ВыгрузкаКлиентов(Текст)
//
////******************************************************************************
////Выгружает персональные цены клиента
//Процедура ВыгрузитьПерсЦеныКлиента(Текст, Клиент, СпрПерсЦен, Счетчик)
//	
//	КлиентИнфо = ПолучитьСправочныеДанные(Клиент);
//	Если КлиентИнфо.Выбран()= 0 Тогда
//		КлиентИнфо = ЗаписатьСправочныеДанные(Клиент);
//	КонецЕсли;
//
//	ИдКлиента = СокрЛП(КлиентИнфо.Идентификатор);
//	Если ИдКлиента = "" Тогда
//	    Возврат;
//	КонецЕсли;
//	
//	Спр = СпрПерсЦен; //для удобства читабельности
//	Спр.ВыбратьЭлементыПоРеквизиту("Контрагент",Клиент.ТекущийЭлемент(),0,0);
//	Пока Спр.ПолучитьЭлемент() = 1 Цикл
//		ТоварИнфо = ПолучитьСправочныеДанные(Спр.Владелец);
//		Если ТоварИнфо.Выбран()= 0 Тогда
//			ТоварИнфо = ЗаписатьСправочныеДанные(Спр.Владелец);
//		КонецЕсли;
//		ИдТовара = СокрЛП(ТоварИнфо.Идентификатор);
//		Если ИдТовара = "" Тогда
//		    Продолжить;
//		КонецЕсли;
//		Скидка = Спр.Скидка.Процент;
//		Цена   = Спр.Цена;
//		Текст.ДобавитьСтроку(ИдКлиента +Т_+ ИдТовара +Т_+ Строка(Цена) +Т_+ Строка(Скидка) );
//		ИдКлиента = "*";
//		Счетчик = Счетчик + 1;
//		Если Счетчик % 100 = 0 Тогда
//		    Состояние("Выгрузка персональных цен: "+Строка(Счетчик));
//		КонецЕсли;
//	КонецЦикла;
//	
//КонецПроцедуры // ВыгрузитьПерсЦеныКлиента(Текст)	
//
////******************************************************************************
//Процедура ВыгрузкаПерсональныхЦен(Текст, ПланАгента, ТДопКлиенты)
//
//	Если Константа.кпкИспользоватьПерсЦены = 0 Тогда
//	    Возврат;
//	КонецЕсли;
//	
//	ОкноСостояние("Выгрузка персональных цен...");
//	СпрПерсЦен = СоздатьОбъект("Справочник.кпкПерсональныеЦены");
//
//	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_PersonalPrices" + Т_ + "Struct:ClientID,GoodsID,Price,=Discount");
//	КолКл = 0; КолПерсЦен = 0;
//	
//	Если ПланАгента.Выбран() = 0 Тогда //Выгрузка для всех клиентов
//		СпрКл = СоздатьОбъект("Справочник.Контрагенты");
//		СпрКл.ВыбратьЭлементы();
//		Пока СпрКл.ПолучитьЭлемент() = 1 Цикл
//			КолКл = КолКл + 1;
//			Если КолКл % 10 = 0 Тогда
//			    Состояние("Обработка клиентов: " + Строка(КолКл));
//			КонецЕсли;
//		    Если (СпрКл.ЭтоГруппа() = 1) Или (СпрКл.ПометкаУдаления() = 1) Тогда
//		        Продолжить;
//			КонецЕсли;
//			ВыгрузитьПерсЦеныКлиента(Текст, СпрКл.ТекущийЭлемент(), СпрПерсЦен, КолПерсЦен);
//		КонецЦикла;
//	Иначе	//Выгрузка по плану посещений
//		//выгружаемых клиентов запомним в таблице значений Т
//		Т = СоздатьОбъект("ТаблицаЗначений");
//		Т.НоваяКолонка("Клиент");
//		
//		ПланАгента.ВыбратьСтроки();
//		Пока ПланАгента.ПолучитьСтроку() = 1 Цикл
//			Клиент = ПланАгента.Контрагент;
//		    Если Клиент.Выбран() = 1 Тогда				
//				Стр = 0;
//		        Если Т.НайтиЗначение(Клиент,Стр,"Клиент") = 0 Тогда
//					Т.НоваяСтрока();
//					Т.Клиент = Клиент;
//		        КонецЕсли;
//		    КонецЕсли;
//		КонецЦикла;
//		
//		Т.ВыбратьСтроки();
//		Пока Т.ПолучитьСтроку() = 1 Цикл
//			ВыгрузитьПерсЦеныКлиента(Текст, Т.Клиент, СпрПерсЦен, КолПерсЦен);
//		КонецЦикла;
//		
//		//Если есть клиенты-должники, числящиеся за агентом, 
//		//или клиенты вне плана посещений из-за документов "Маршрут", то выгружаем цены и для них
//		ТДопКлиенты.ВыбратьСтроки();
//	    Пока ТДопКлиенты.ПолучитьСтроку() = 1 Цикл
//	        Стр = 0;
//			Если Т.НайтиЗначение(ТДопКлиенты.Клиент,Стр,"Клиент") = 0 Тогда
//				ВыгрузитьПерсЦеныКлиента(Текст, ТДопКлиенты.Клиент, СпрПерсЦен, КолПерсЦен);
//			КонецЕсли;
//	    КонецЦикла;
//		
//	КонецЕсли;
//		
//	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_PersonalPrices"); 
//	
//	ОкноСостояние("");
//	
//КонецПроцедуры //ВыгрузкаПерсональныхЦен()
//
////******************************************************************************
//// СократитьНаименование()
//Процедура СократитьНаименование(Наим)     
//	
//	УбратьСимволыКонцаСтроки(Наим);
//	
//	Наим = Лев(Наим, 1) + НРег(Сред(Наим, 2));//понижаем регистр кроме первой буквы
//	Наим = СтрЗаменить(Наим,"   "," ");		//для сокращения наименования заменяем тройной пробел на одинарный
//	Наим = СтрЗаменить(Наим,"  "," ");		//... двойной пробел на одинарный
//	Наим = СтрЗаменить(Наим,". ",".");		//... ". " на "."
//	Наим = СтрЗаменить(Наим,"""","'");		//заменяем двойную кавычку на одинарную
//	
//	Если СтрДлина(Наим) <= 20 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Наим = СтрЗаменить(Наим,"для ","д/");
//	Наим = СтрЗаменить(Наим," г ","г ");
//	Наим = СтрЗаменить(Наим," г.","г.");
//	Наим = СтрЗаменить(Наим," мл","мл");
//	Наим = СтрЗаменить(Наим,", ",",");
//	Наим = СтрЗаменить(Наим," (","(");
//	Наим = СтрЗаменить(Наим,") ",")");
//	Наим = СтрЗаменить(Наим," )",")");
//	Наим = СтрЗаменить(Наим,"( ","(");
//	Наим = СтрЗаменить(Наим," -","-");
//	Наим = СтрЗаменить(Наим,"- ","-");
//	Наим = СтрЗаменить(Наим," +","+");
//	Наим = СтрЗаменить(Наим,"+ ","+");
//	Наим = СтрЗаменить(Наим," шт ","шт ");
//	Наим = СтрЗаменить(Наим," шт.","шт.");
//	Наим = СтрЗаменить(Наим," гр ","г ");
//	Наим = СтрЗаменить(Наим," /","/");
//	Наим = СтрЗаменить(Наим,"/ ","/");
//	Наим = СтрЗаменить(Наим,".,",".");
//	Наим = СтрЗаменить(Наим,",.",".");
//	Наим = СтрЗаменить(Наим," кг","кг");   
//
//КонецПроцедуры // СократитьНаименование()  
//
////******************************************************************************
////выгрузка номенклатуры
////В таблице ТДопТовары в процедуру передается список товаров, обязательных к выгрузке
////вне зависимости от того были они в ассортименте или нет.
////Такие товары возникают при ТСК, когда в КПК выгружаются документы "Перемещение",
////товарный состав в которых может отличаться от ассортимента товаров, закрепленного
////за агентом
//Процедура ВыгрузкаНоменклатуры(Текст, ТДопТовары)
//	
//	Перем НазвЕдиницы;
//	
//	ОкноСостояние("Расчет остатков товаров...");
//	
//	СпрЕд 	= СоздатьОбъект("Справочник.Единицы");
//	СпрЦен	= СоздатьОбъект("Справочник.Цены");
//	СписЕд	= СоздатьОбъект("СписокЗначений");
//	СпрСвТов= СоздатьОбъект("Справочник.СвойстваНоменклатуры");
//	
//	СпрЦен.ИспользоватьДату(ТекущаяДата());
//	
//    СписТоваров = СоздатьОбъект("СписокЗначений");
//	АППолучитьСписокТоваровИзАссортимента(СписТоваров, ВыбАссортимент);  
//	
//	СписВыбСкладов = СоздатьОбъект("СписокЗначений");
//
//	Если ВыбСклад.Выбран() = 0 Тогда		
//		ОповеститьОСобытии("У агента " + Строка(ВыбАгент) + " не указан список складов. Выгрузка остатков будет произведена по всем складам!", "!", 1);				
//	Иначе
//		
//		Спр = СоздатьОбъект("Справочник.Склады");
//		Стр = СокрЛП(ВыбСклад.Склады)+",";
//		Если Стр<>"," Тогда
//			Пока Стр<>"" Цикл
//				Поз  = Найти(Стр,",");
//				Код1 = Лев(Стр,Поз-1);
//				Стр  = Прав(Стр,СтрДлина(Стр)-Поз);
//				Спр.НайтиПоКоду(Код1);
//				Если Спр.Выбран() = 0 Тогда
//					ОповеститьОСобытии("При выгрузке справочника ""Список складов"" произошла ошибка: " +
//									   "перезаполните элемент справочника с наименованием" + СокрЛП(ВыбСклад.Наименование) + "!", "!!!", 1, ВыбСклад);
//				Иначе
//					СписВыбСкладов.ДобавитьЗначение(Спр.ТекущийЭлемент());
//				КонецЕсли;
//			КонецЦикла;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	СписОбязательныхТоваров = СоздатьОбъект("СписокЗначений");
//	СпОТ = СписОбязательныхТоваров; //для читабельности
//	ЕстьОбязательныеТовары = 0;
//	Если (ТДопТовары <> 0) Тогда
//		Если ТДопТовары.КоличествоСтрок() <> 0 Тогда
//		    ТДопТовары.Выгрузить(СпОТ,,,"Товар");
//			ЕстьОбязательныеТовары = 1;
//			Если СписТоваров.РазмерСписка() <> 0 Тогда
//				//переносим список СписОбязательныхТоваров в СписТоваров				
//				КолОбТоваров = СпОТ.РазмерСписка();
//				Для Поз = 1 По КолОбТоваров Цикл
//					Товар = СпОТ.ПолучитьЗначение(Поз);
//					Если СписТоваров.Принадлежит(Товар) = 0 Тогда
//					    СписТоваров.ДобавитьЗначение(Товар,"");
//					КонецЕсли;
//				КонецЦикла;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//	
//	ВсегоЦен = тзТипыЦен.КоличествоСтрок();
//	
//	Если ВсегоЦен = 0 Тогда
//	    ОповеститьОСобытии("Справочник ""Настройка типов цен"" к выгрузке в мобильное устройство не подготовлен! Выгрузка номенклатуры не произведена!", "!");
//		Возврат;
//	КонецЕсли;
//	
//	ВсегоМаксЦен = Мин(Всегоцен, 32);
//	
//	ЕстьСклады = СписВыбСкладов.РазмерСписка();
//	
//	ДатаКонца = ПолучитьДатуТА();
//	
//	СтрПериод = ?(ТекущаяДата()>= ПолучитьДатуТА(),"", 
//	"Период с ДатаКонца по ДатаКонца;"); 	
//	
//	ТекстЗапроса = "
//	|" + СтрПериод + "	
//	|Товар	   =   Регистр.ОстаткиТМЦ.Номенклатура, Регистр.РезервыТМЦ.Номенклатура, Справочник.Номенклатура.ТекущийЭлемент; 
//	|Склад	   =   Регистр.ОстаткиТМЦ.Склад, Регистр.РезервыТМЦ.Склад;
//	|Кол	   =   Регистр.ОстаткиТМЦ.Количество;
//	|КолРезерв =   Регистр.РезервыТМЦ.Количество;
//	|Группировка Товар упорядочить по Товар.Наименование все ВошедшиеВЗапрос;   	 
//	|Группировка Склад;   	
//	|Условие(Товар в СписТоваров);";
//	
//	Если ЕстьСклады <> 0 Тогда   			
//		ТекстЗапроса = ТекстЗапроса + "
//		|Условие(Склад В (СписВыбСкладов));";
//	КонецЕсли;	
//	
//	Если ЕстьОбязательныеТовары = 1 Тогда
//	    //добавляем специальную функцию "Пустая", чтобы обязательные товары были 
//		//включены в прайс вне зависимости от их остатка на складе			
//		ТекстЗапроса = ТекстЗапроса + "	
//		|Функция Пустая = Сумма(1) когда (Товар В СпОТ);";	
//	КонецЕсли;  
//	
//	ТекстЗапроса = ТекстЗапроса + "	
//	|Функция КонКол    = КонОст(Кол);
//	|Функция КонРезерв = КонОст(КолРезерв);";
//
//	Если флНулевыеОстатки = 1 Тогда
//		ТекстЗапроса = ТекстЗапроса + "		
//		|Функция Счётчик = Счётчик();";	
//	КонецЕсли;
//
//	Запрос = СоздатьОбъект("Запрос");
//	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
//		Возврат;
//	КонецЕсли;  
//	
//	//ТЗ = СоздатьОбъект("ТаблицаЗначений");
//	//Запрос.Выгрузить(ТЗ);
//	//ТЗ.ВыбратьСтроку(); 	                    
//
//	ОкноСостояние("Выгрузка остатков товаров...");   
//
//	СтрВидовЦен = "Price1,";
//	Для Поз = 2 По ВсегоЦен Цикл    		
//		СтрВидовЦен = СтрВидовЦен + "=Price" + СокрЛП(Поз) + ",";		
//	КонецЦикла;
//	
//	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_System" + Т_ + "Struct:ObjID,Value");
//	Текст.ДобавитьСтроку(GUID_SYSTEM_PRICECOUNT	+ Т_ + Строка(ВсегоМаксЦен)); //выгружаем в константе количество типов цен
//	
//	//в демо-конфигурации задействовано 5 типов цен (т.е. ВсегоМаксЦен = 5),
//	//максимально возможное же количество типов цен в Агент+: 32 
//	//Если константа GUID_SYSTEM_PRICECOUNT не указана, то по умолчанию считается, что ее значение 10  
//	
//	//Если требуется использовать в КПК контроль минимально допустимых значений цен, 
//	//то нужно выгрузить в КПК код минимально допустимой цены. 
//	//В КПК есть возможность контроля значений цен при оформлении документов продаж, 
//	//например, чтобы не допустить продажи товара по заниженной цене, но предоставить 
//	//пользователю ручной ввод значений цен в табличной части документа.
//	//Для этих целей используется константа GUID_SYSTEM_MINPRICECODE. Использование константы НЕОБЯЗАТЕЛЬНО.
//	КодМинЦены = 0; 
//	ТипМинЦены = Константа.КпкМинЦена;
//	Если ТипМинЦены.Выбран() = 1 Тогда
//		Если ТипМинЦены.КпкВыгружать = 1 Тогда
//			КодМинЦены = ПолучитьКодТипаЦеныВКПК(ТипМинЦены.Ссылка, "Минимальный тип цены в КПК");
//		КонецЕсли;		
//	КонецЕсли;
//	Текст.ДобавитьСтроку(GUID_SYSTEM_MINPRICECODE + Т_ + Строка(КодМинЦены)); //выгружаем в константе минимального типа цен
//	
//	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_System");   
//	
//	КолВыгрЕдиниц = 3;	
//	
//	СтрЕдИзм = "";	
//	Для Сч = 0 По КолВыгрЕдиниц-1 Цикл
//		СтрЕдИзм = СтрЕдИзм + "=Unit" + Строка(Сч) + ",";
//	КонецЦикла;	    
//	
//	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_Price" + Т_ + "Mode:Full" + Т_ 
//					     + "Struct:GoodsID,FolderID,IsFolder,Name,=Code,=NameUnits," + СтрЕдИзм + "=MinAmount," 
//						 + СтрВидовЦен + "Rest,=RDiscount,=Action,=Weight,=Weight0,=PropList,=Comment,=VAT,=Category,"
//						 +"=SertifID,=StockUnit,=PriceUnit,_GTD,_STRANA");
//		// "=StockUnit" - код базовой (учетной) единицы измерения,
//		// "=PriceUnit" - код единицы измерения, за которой закреплены цены товара		
//		// последние два реквизита - дополнительные				
//	
//	Кол = 0; ДатаЦен = РабочаяДата();
//	
//	ТекИдРодителя = "!";
//	
//	Пока Запрос.Группировка("Товар") = 1 Цикл
//		Товар		= Запрос.Товар; 
//		Родитель	= Товар.Родитель;
//		ТоварИнфо	= ПолучитьСправочныеДанные(Товар);
//		Если ТоварИнфо.Выбран() = 0 Тогда
//			ТоварИнфо = ЗаписатьСправочныеДанные(Товар);
//		КонецЕсли;
//		Если Родитель.Выбран() = 1 Тогда
//			РодительИнфо = ПолучитьСправочныеДанные(Родитель);
//			Если РодительИнфо.Выбран() = 0 Тогда
//				РодительИнфо = ЗаписатьСправочныеДанные(Родитель);
//			КонецЕсли;
//		КонецЕсли;
//		ИдТовара	= СокрП(ТоварИнфо.Идентификатор);   		
//		ИдРодителя	= ?(Родитель.Выбран() = 1, СокрП(РодительИнфо.Идентификатор), "");
//		Если ИдРодителя = ТекИдРодителя Тогда
//		    ИдРодителя = "*";
//		Иначе
//			ТекИдРодителя = ИдРодителя;
//		КонецЕсли;      		
//		ПризнГруппа = Товар.ЭтоГруппа();
//		НаимТовара	= СокрП(Товар.Наименование);
//		КодТовара	= СокрП(Товар.Код); // <- обратите внимание - параметр "Code" относится так же и к группам товаров, включение его только для товаров вызовет ошибку!
//		
//		Если ПризнГруппа = 0 Тогда //выгружается товар, а не группа  
//			
//			Остаток = Запрос.КонКол; 
//			
//			Если флУчитыватьРезервы = 1 Тогда 				
//				Остаток = Запрос.КонКол - Запрос.КонРезерв;				
//				Если (флНулевыеОстатки = 0) и (Остаток <=0) Тогда 
//					ТекИдРодителя = "*";
//					Продолжить; 
//				КонецЕсли;				
//			КонецЕсли;
//			
//			СократитьНаименование(НаимТовара);           
//		          
//			// Выгружаем единицы измерения
//		    СписЕд.УдалитьВсе();
//			СчетчикЕд = 0;
//			СпрЕд.ИспользоватьВладельца(Товар);
//			СпрЕд.ПорядокРеквизита("Коэффициент");
//			СпрЕд.ВыбратьЭлементы();
//			Вес = 0; МинКоэф = 100000;   
//			
//			НазванияЕд 	= "";	//строка названий единиц через запятую
//			Коэффициенты= "";	//строка размерностей единиц через знак табуляции 
//			
//			Пока (СпрЕд.ПолучитьЭлемент() = 1) и (СчетчикЕд < КолВыгрЕдиниц) Цикл
//				Если СпрЕд.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;
//				Если СпрЕд.Коэффициент <> 0 Тогда
//					Если СпрЕд.Коэффициент < МинКоэф Тогда //запоминаем вес минимальной единицы измерения
//						МинКоэф = СпрЕд.Коэффициент;
//						Вес 	= СпрЕд.Вес;
//					КонецЕсли;
//				КонецЕсли;  
//				
//				НазванияЕд = НазванияЕд + Лев(СокрЛП(СпрЕд.ОКЕИ), 3) + ",";				
//				Коэффициенты = Коэффициенты + СпрЕд.Коэффициент + Т_;
//				
//				СчетчикЕд = СчетчикЕд + 1;      				
//			КонецЦикла;               					
//
//			// Добавляем кол-во единиц до кол-ва, указанного в константе  
//			Для Поз = 1 По КолВыгрЕдиниц Цикл
//				Если Поз > СчетчикЕд Тогда
//					Если Поз = 1 Тогда // у товара не оказалось ни одной единицы измерения
//					    НазванияЕд 	 = "Шт,";
//						Коэффициенты = "1" + Т_;
//					Иначе // у товара есть не все единицы измерения, размерность отсутствующих единиц указываем как "0"
//						Коэффициенты = Коэффициенты + "0" + Т_;  
//						НазванияЕд   = НазванияЕд + ",";
//					КонецЕсли;				
//				КонецЕсли;
//			КонецЦикла;   			
//			
//			НазванияЕд = Лев(НазванияЕд, СтрДлина(НазванияЕд) - 1); // Убрали последнюю запятую
//		
//			 
//			// {
//			/////////////////
//			PriceUnit = "0"; // Единица, к которой привязана цена, присваиваем единицу с кодом 1							 
//			StockUnit = "0"; // Единица хранения остатков, присваиваем единицу с кодом 1
//							 // это, как правило, базовая единица измерения 			   						
//			
//			
//			ЕдЦены = Товар.БазоваяЕдиница; 	   	  // Принимаем, что в качестве единицы измерения, 
//												  // которая будет привязана к цене, будет выступать
//												  // базовая единица     
//			СтрЦены   = "";												  
//			Для Поз = 1 По ВсегоЦен Цикл		
//				
//				тзТипыЦен.ПолучитьСтрокуПоНомеру(Поз);
//								
//				Цена = АПВернутьЦенуТовара(Товар, тзТипыЦен.ТипЦены, ЕдЦены, СпрЦен);
//                			
//				СтрЦены = СтрЦены + Строка(Цена) + Т_;
//				
//			КонецЦикла;
//            ///////////////////     
//			// }    		
//			
//			//готовим строку свойств номенклатуры
//			Свойства = "";
//			// Временно не выгружаем
//			//СпрСвТов.ИспользоватьВладельца(Товар);
//			//СпрСвТов.ВыбратьЭлементы();
//			//Пока СпрСвТов.ПолучитьЭлемент() = 1 Цикл     
//			//	Если СпрСвТов.ПометкаУдаления() = 0 Тогда
//			//	    КпкКод = СпрСвТов.ЗначениеСвойства.КпкКод;
//			//		Если (КпкКод > 0) И (КпкКод < 33) Тогда
//			//		    Свойства = Свойства + Строка(КпкКод) + ",";
//			//		КонецЕсли;
//			//	КонецЕсли;
//			//КонецЦикла;
//			//Если Свойства <> "" Тогда
//			//    Свойства = Лев(Свойства, СтрДлина(Свойства) - 1); //убрали последнюю запятую
//			//КонецЕсли;
//			
//			//теперь в переменной Свойства у нас список кодов свойств товара через запятую
//			
//			//Категория = ТоварИнфо.ОсновноеСвойство;
//			//Если Категория.Выбран() = 1 Тогда
//			//	КодКатегории = Категория.Код;
//			//Иначе
//			//	КодКатегории = "";
//			//КонецЕсли;                             
//			
//			МинКолДок = ТоварИнфо.МинДокКоличество; //минимальное допустимое количество в документе
//			
//			Категория = Товар.ОсновноеСвойство.ЗначениеСвойства.Наименование + "                                                                                ";
//						                                     
//			Стр = 0;
//			Если ТаблицаКатегорий.НайтиЗначение(Лев(Категория,50),Стр,) = 1 Тогда
//				ТаблицаКатегорий.ПолучитьСтрокуПоНомеру(Стр);
//				КодКатегории = ТаблицаКатегорий.Номер;
//			Иначе                            
//				КодКатегории = "";
//			КонецЕсли;    			
//			
//			Сертификат = ТоварИнфо.Сертификат;
//			Если Сертификат.Выбран() = 1 Тогда
//				СертификатИД = Сертификат.Идентификатор;
//			Иначе
//				СертификатИД = "";
//			КонецЕсли;
//			
//			ГТД = Товар.НомерГТД;
//			Если ГТД.Выбран() = 1 Тогда
//				КодГТД = ГТД.Код;
//			Иначе
//				КодГТД = "";
//			КонецЕсли;
//
//			Страна = Товар.СтранаПроисхождения;
//			Если Страна.Выбран() = 1 Тогда
//				КодСтраны = Страна.Код;
//			Иначе
//				КодСтраны = "";
//			КонецЕсли;
//
//			ДопСтрока= Т_ + НазванияЕд + Т_ + Коэффициенты + Строка(МинКолДок) + Т_
//			+ СтрЦены + Строка(Остаток) + Т_
//			+ Строка(ТоварИнфо.ОграничениеСкидки) + Т_ 
//			+ Строка(ТоварИнфо.Акция) + Т_ 
//			+ Строка(Товар.Весовой) + Т_
//			+ Строка(Вес) + Т_
//			+ Свойства + Т_
//			+ УбратьСимволыКонцаСтроки(Товар.Комментарий) + Т_
//			+ Строка(АПСТавкаНДС(Товар.СтавкаНДС))+ Т_
//			+ Строка(Число(КодКатегории))+ Т_
//			+ СокрП(СертификатИД)+ Т_
//			+ Строка(StockUnit)+ Т_   
//			+ Строка(PriceUnit)+ Т_  			            
//			+ Строка(Число(КодГТД))+ Т_
//			+ Строка(Число(КодСтраны))
//		Иначе	//выгружается группа товаров
//			ДопСтрока = "";
//		КонецЕсли;
//		Текст.ДобавитьСтроку(ИдТовара + Т_ + ИдРодителя + Т_ + Строка(ПризнГруппа)
//				+ Т_ + НаимТовара + Т_ + КодТовара + ДопСтрока);
//	
//		Кол = Кол + 1;
//		
//		Если Кол % 100 = 0 Тогда
//		    Состояние("Выгрузка прайса: " + Кол);
//		КонецЕсли; 
//		
//	КонецЦикла;
//	
//	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_Price");
//	
//	ОкноСостояние();
//	
//	Если флВыгружатьШтрихКоды = 1 Тогда    //требуется выгрузить штрих-коды
//	    ВыгрузкаШтрихКодов(Текст, Запрос); //выгрузка штрих-кодов для товаров, попавших в запрос
//	КонецЕсли;
//	
//КонецПроцедуры //ВыгрузкаНоменклатуры          
//
////*****************************************************************************
//Процедура ВыгрузкаОписанийКартинокТоваров(Текст, КолФото)
//             
//	Если флФайлыКартинок = 0 Тогда
//		Возврат;
//	КонецЕсли;   	
//	
//	ИмяВремКаталогаКартинок = КаталогВременныхФайлов() + "GoodsPictFrom1C\";
//	
//	Если ФС.СуществуетФайл(ИмяВремКаталогаКартинок) = 0 Тогда
//		ФС.СоздатьКаталог(ИмяВремКаталогаКартинок);
//	КонецЕсли;
//	
//	КаталогКартинокНаДиске = КаталогИБ() + "Pictures\Goods\";
//	Если ФС.СуществуетФайл(КаталогКартинокНаДиске) = 0 Тогда
//		ФС.СоздатьКаталог(КаталогКартинокНаДиске);
//	КонецЕсли;	
//	    
//	ФС.УстТекКаталог(ИмяВремКаталогаКартинок);
//	Если ФС.НайтиПервыйФайл("*.PNG") = 1 Тогда  
//		Попытка
//			ФС.УдалитьКаталог(ИмяВремКаталогаКартинок);
//		Исключение
//			ОповеститьОСобытии("Невозможно удалить временные файлы из каталога " + ИмяВремКаталогаКартинок + РазделительСтрок +
//							   "Выгрузка картинок товаров не будет произведена!", "!");
//			Возврат;
//		КонецПопытки;
//	КонецЕсли;
//	
//	Т = СоздатьОбъект("ТаблицаЗначений");
//	Т.НоваяКолонка("Товар");
//	Т.НоваяКолонка("Приоритет");
//	Т.НоваяКолонка("Картинка");
//	
//	Спр = СоздатьОбъект("Справочник.КпкКартинкиТоваров");
//	Спр.ВыбратьЭлементы(0);
//	Пока Спр.ПолучитьЭлемент() = 1 Цикл
//		Товар = Спр.Владелец;
//		Если Товар.ПометкаУдаления() = 0 Тогда
//			Если ПустоеЗначение(Спр.Файл) = 1 Тогда
//				Продолжить;
//			КонецЕсли;
//			Т.НоваяСтрока();
//			Т.Товар 	= Товар;
//			Т.Приоритет = Спр.Основная;
//			Т.Картинка  = Спр.ТекущийЭлемент();		 
//		КонецЕсли;
//	КонецЦикла;
//
//	Т.Сортировать("Товар+, Приоритет-"); 
//	
//	СтрДляАрхива = "";
//	
//	Текст.ДобавитьСтроку("<Begin>" +Т_+ "Ref_GoodsPictures" +Т_+ "Struct:GoodsID,Name,FileName,=Comment");
//	ТекТовар = "" ;
//	Т.ВыбратьСтроки();
//	Пока Т.ПолучитьСтроку() = 1 Цикл
//		Товар = Т.Товар;
//		Если ТекТовар <> Товар Тогда
//			ТоварИнфо = ПолучитьСправочныеДанные(Товар);
//			Если ТоварИнфо.Выбран() = 0 Тогда
//				ТоварИнфо = ЗаписатьСправочныеДанные(Товар);
//			КонецЕсли;
//			ИдТовара = СокрП(ТоварИнфо.Идентификатор);	
//			ТекТовар = Товар;
//		КонецЕсли;
//	
//		ЭлемКарт = Т.Картинка;
//		
//		Наим = СокрЛП(ЭлемКарт.Наименование);
//		Файл = СокрЛП(ЭлемКарт.Файл);
//		Комм = СокрЛП(ЭлемКарт.Комментарий);
//		
//		Текст.ДобавитьСтроку(ИдТовара + Т_ + Наим + Т_+ Файл + Т_ + УбратьСимволыКонцаСтроки(Комм));
//		
//		ИдТовара = "*"; 
//		
//		ПолноеИмяФайла = КаталогКартинокНаДиске + СокрЛП(Файл);
//		
//		КолФото = КолФото + 1;
//		
//		СтрДляАрхива = СтрДляАрхива + Файл + Т_ + ПолноеИмяФайла + Т_;	
//	КонецЦикла;
//	
//	Если ПустаяСтрока(СтрДляАрхива) = 0 Тогда
//		// Убираем последний табулятор
//		СтрДляАрхива = Лев(СтрДляАрхива, СтрДлина(СтрДляАрхива)-1);		
//		КПКОбъект.АрхУпаковать(ИмяВремКаталогаКартинок + "UDataFromCDB.zip", СтрДляАрхива);
//	КонецЕсли;	
//	
//	Текст.ДобавитьСтроку("<End>" +Т_+ "Ref_GoodsPictures"); 
//	
//КонецПроцедуры //ВыгрузкаОписанийКартинокТоваров
//
////******************************************************************************
//Процедура ВыгрузитьЗаголовокФайла(Текст)
//	ДопНазваниеБД = ?(ПустоеЗначение(Константа.КПКНазваниеБД) = 0, Т_ + СокрЛП(Константа.КПКНазваниеБД), "");
//	Текст.ДобавитьСтроку("agentp_data" + Т_ + "to_ppc" + ДопНазваниеБД);
//	Текст.ДобавитьСтроку("// Файл выгрузки для отправки в КПК");
//КонецПроцедуры //ВыгрузитьЗаголовокФайла
//
////******************************************************************************
//// ВыгрузитьИсториюПродаж()
////
//// Параметры: 
////  
////
//// Возвращаемое значение:
////  1 - нормальное завершение выгрузки
//// Описание:
////  Выгружает историю продаж, так же всегда выгружает заголовок файла!
////
//Функция ВыгрузкаИсторииПродаж(Текст, ВидВыгрузки, ПланАгента)
//
//	Если ВидВыгрузки = "ИсторияИзФайла" Тогда //должны получить историю из файла автовыгрузки истории продаж
//		//проверяем, существует ли файл выгрузки истории продаж
//		ИмяФайлаИстории = ВернутьИмяФайлаИсторииПродаж();
//		Если ФС.СуществуетФайл(ИмяФайлаИстории) = 1 Тогда //файл автовыгрузки истории существует
//		    Текст.Открыть(ИмяФайлаИстории); //таким способом подключаем историю из файла автовыгрузки истории продаж
//			Стр = Текст.ПолучитьСтроку(Текст.КоличествоСтрок());
//			Если ПустоеЗначение(Стр) = 1 Тогда
//			    Текст.УдалитьСтроку(Текст.КоличествоСтрок());
//			КонецЕсли;
//			Возврат 1;//означает, что истрия продаж включена
//		Иначе //файл автовыгрузки истории не существует, поэтому выгружаем только заголовок 
//			//Если в КПК в Агент+ несколько баз данных, то должны указать название БД для которой выгружаются данные:
//			ВыгрузитьЗаголовокФайла(Текст);
//			Возврат 2;//означает, что истрия продаж не включена
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Если Дата2 > ПолучитьДатуТА() Тогда
//	    Дата2 = ПолучитьДатуТА();
//		ОповеститьОСобытии("Дата конца периода при выгрузке истории продаж установлена на ТА (" + Строка(Дата2) + ")", "i", 0);
//	КонецЕсли;
//
//	Если Дата2 < Дата1 Тогда
//		Предупреждение("Неверный интервал выгрузка истории продаж!", 5);
//		Возврат 0;
//	КонецЕсли;
//
//	КолДней = Дата2 - Дата1 + 1;
//	
//	Если КолДней < КолИнтер Тогда
//		Предупреждение("Количество интервалов разбиения должно быть не более числа дней периода отчета!",5);
//		Возврат 0;
//	КонецЕсли;
//	
//	Если КолИнтер <= 0 Тогда
//		Предупреждение("Неверное количество интервалов разбиения!",5);
//		Возврат 0;
//	КонецЕсли;
//	
//	ПрибИнтервал = Цел(КолДней / КолИнтер);
//	РазмерыИнтервалов = СоздатьОбъект("СписокЗначений");
//	Если ПрибИнтервал * КолИнтер = КолДней Тогда
//		Для Поз = 1 По КолИнтер Цикл
//			РазмерыИнтервалов.ДобавитьЗначение(ПрибИнтервал);
//		КонецЦикла;
//	Иначе
//		Остаток = КолДней - ПрибИнтервал * КолИнтер;
//		Для Поз = 1 По КолИнтер Цикл
//			Если Поз <= Остаток Тогда //приписываем по одному дню от имеющегося остатка на каждый интервал, пока остаток не исчерпан
//				РазмерыИнтервалов.ДобавитьЗначение(ПрибИнтервал + 1);
//			Иначе
//				РазмерыИнтервалов.ДобавитьЗначение(ПрибИнтервал);
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//
//	////////////////////////////////////////////////////
//	//Подготовка текста запроса для получения истории продаж за интервал
//	//
//	// 
//	
//	Если (ПланАгента.Выбран() = 0) Тогда 		
//		ТекстГруппировки = "Группировка Клиент Без Упорядочивания Без Групп;"; // добавляем группировку по клиенту, т.к. на клиента могут быть оформлены
//						    						  						   // документы без указания торговой точки, и тогда группировка		
//													  						   // просто по точкам не даст определить на какого клиента были продажи	  														   							  														   
//		Если ИспТочек = 1 Тогда
//			ТекстГруппировки = ТекстГруппировки +  
//			"Группировка ТоргТочка;";					
//		Иначе                                                                                   
//			ТекстГруппировки = ТекстГруппировки +  
//			"Группировка Клиент;";					
//		КонецЕсли;	
//	Иначе
//		Если ИспТочек = 1 Тогда
//			ТекстГруппировки = "Группировка ТоргТочка;";			
//		Иначе                                                                      
//			ТекстГруппировки = "Группировка Клиент Без Упорядочивания Без Групп;";
//		КонецЕсли;					  														
//	КонецЕсли;
//
//	    	
//	ТекстЗапроса = "
//	|Период с Дата01 По Дата02;
//	|Товар		= Регистр.ОстаткиТМЦ.Номенклатура;
//	|Клиент		= Регистр.ОстаткиТМЦ.ТекущийДокумент.Реализация.Контрагент;	//здесь потребуется проставить вид расходного документа
//	|ТоргТочка 	= Регистр.ОстаткиТМЦ.ТекущийДокумент.Реализация.кпкТоргТочка;	//в соответствии с конфигурацией 1С
//	|Количество	= Регистр.ОстаткиТМЦ.Количество;
//	|"
//	+ ТекстГруппировки + " 		
//	|Группировка Товар Без Упорядочивания Без Групп;
//	|Функция Кол = Расход(Количество);
//	|";
//	
//	// Если в Вашей конфигурации в табличной части документов, отвечающих за продажи клиентам, 
//	// нет реквизита "Коэффициент", (т.е. графа "Количество" документа всегда содержит количество 
//	// в базовых единицах измерения), то лучше использовать более быстрый вариант запроса:
//	//ТекстЗапроса = "
//	//|Период с Дата01 По Дата02;
//	//|Товар  	= Документ.Реализация.Номенклатура;	//здесь потребуется проставить вид расходного документа
//	//|Клиент 	= Документ.Реализация.Контрагент;	//в соответствии с конфигурацией 1С
//	//|ТоргТочка= Документ.Реализация.ТоргТочка;	//если несколько видов расходных документов, то перечислить
//	//|Кол    	= Документ.Реализация.Количество;   //эти документы здесь через запятую, указав пути к реквизиту
//	//|" 
//	//+ 	?(	ПланАгента.Выбран() = 0, 
//	//		"Группировка Клиент Без Упорядочивания Без Групп;", //добавляем группировку по клиенту, т.к. на клиента могут быть оформлены
//	//		""													//документы без указания торговой точки, и тогда группировка
//	//	)														//просто по точкам не даст определить на какого клиента были продажи
//	//+ "
//	//|Группировка ТоргТочка Без Упорядочивания;
//	//|Группировка Товар Без Упорядочивания Без Групп;
//	//|";
//	//Алгоритмы ниже менять не потребуется.	
//	
//	Если ПланАгента.Выбран() = 0 Тогда
//	    ОповеститьОСобытии("Не найден план агента! Будет произведена выгрузка ВСЕХ клиентов и торговых точек", "!", 1);
//	Иначе //выгрузка торговых точек из плана
//		СписТочек = СоздатьОбъект("СписокЗначений");
//		Если ИспТочек = 1 Тогда
//			ПланАгента.ВыгрузитьТабличнуюЧасть(СписТочек, "ТоргТочка"); 
//			Если СписТочек.РазмерСписка() <> 0 Тогда
//		    	ТекстЗапроса = ТекстЗапроса + "Условие (ТоргТочка в СписТочек);";
//			КонецЕсли;
//		Иначе                                                       
//			ПланАгента.ВыгрузитьТабличнуюЧасть(СписТочек, "Контрагент"); 
//			Если СписТочек.РазмерСписка() <> 0 Тогда
//		    	ТекстЗапроса = ТекстЗапроса + "Условие (Клиент в СписТочек);";
//			КонецЕсли;
//		КонецЕсли;
//		
//	КонецЕсли;    
//	
//	Если ВыбАссортимент.Выбран() = 0 Тогда
//		ОповеститьОСобытии("Не указан ассортимент товаров. Будет произведена выгрузка ВСЕХ товаров", "!", 1);
//	Иначе
//	    СписТоваров = СоздатьОбъект("СписокЗначений");
//		АППолучитьСписокТоваровИзАссортимента(СписТоваров, ВыбАссортимент);
//		Если СписТоваров.РазмерСписка() <> 0 Тогда
//		    ТекстЗапроса = ТекстЗапроса + "Условие (Товар в СписТоваров);";
//		КонецЕсли;
//	КонецЕсли;
//	//
//	//Подготовка текста запроса для получения истории продаж за интервал
//	//
//	////////////////////////////////////////////////////	
//	
//	Т = СоздатьОбъект("ТаблицаЗначений");//таблица торговых точек с историей продаж
//	Т.НоваяКолонка("Клиент");			//владельцы торговых точек
//	Т.НоваяКолонка("ТоргТочка");		//торговые точки
//	Т.НоваяКолонка("История"); 			//История продаж торговой точки (тип - "Таблица значений")
//	
//	///////////////////////////////////////////////////////////
//	//Расчет и выгрузка истории продаж
//	
//	//Расчет и выгрузка истории продаж
//	ОкноСостояние("Расчет истории продаж...");	
//	
//	Дата01 = Дата1;
//	Для Поз = 1 По КолИнтер Цикл //цикл перебора интервалов
//		
//		НомерПериодаСтр = Строка(Поз);
//		Дата02 = Дата01 + РазмерыИнтервалов.ПолучитьЗначение(Поз) - 1;
//		
//		Запрос = СоздатьОбъект("Запрос");
//		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
//			Возврат 0;
//		КонецЕсли;    
//		
//		//Табл = СоздатьОбъект("ТаблицаЗначений");
//		//Запрос.Выгрузить(Табл);
//		//Табл.ВыбратьСтроку();
//		
//		Если ПланАгента.Выбран() = 0 Тогда //если нет плана агента, то у нас в начале запроса включена группировка по клиенту
//			
//			Пока Запрос.Группировка(1) = 1 Цикл
//				Клиент = Запрос.Клиент;       
//				ТекстГруп = ?(ИспТочек = 1, "ТоргТочка", "Клиент");
//				Пока (Запрос.Группировка(2) = 1) Цикл
//					ТоргТочка	=	Запрос.ТоргТочка;	
//					Стр = 0;       
//					Пар		    =	Запрос.ПолучитьАтрибут(ТекстГруп);
//					Если Т.НайтиЗначение(Пар, Стр, ТекстГруп) = 0 Тогда					
//						Т.НоваяСтрока(); 
//						Т.ТоргТочка = ТоргТочка; 
//						Т.Клиент    = Клиент;
//						Т.История	= СоздатьОбъект("ТаблицаЗначений");
//						ТИстория 	= Т.История;
//						ТИстория.НоваяКолонка("Товар");				
//						Для ПромПоз = 1 По КолИнтер Цикл 
//							ТИстория.НоваяКолонка("ПродКол"+Строка(ПромПоз),"Число",10,0); 
//						КонецЦикла;
//					Иначе
//						Т.ПолучитьСтрокуПоНомеру(Стр);
//						ТИстория = Т.История;
//					КонецЕсли;
//					
//					//ТИстория - хранит историю продаж текущей точки за все периоды
//					Пока Запрос.Группировка("Товар") = 1 Цикл
//						Товар = Запрос.Товар; ПроданоКол = Запрос.Кол;
//						Стр=0;
//						Если ТИстория.НайтиЗначение(Товар, Стр, "Товар") = 0 Тогда //если товар еще не внесен в таблицу продаж
//						    ТИстория.НоваяСтрока(); ТИстория.Товар = Товар; Стр = ТИстория.НомерСтроки;
//						КонецЕсли;
//						ТИстория.УстановитьЗначение(Стр, "ПродКол" + НомерПериодаСтр, ПроданоКол);//запоминаем продажу за интервал
//					КонецЦикла;
//				КонецЦикла; 	
//			КонецЦикла;
//			
//		Иначе  
//			
//		    ТекстГруп = ?(ИспТочек = 1, "ТоргТочка", "Клиент");
//						
//			Пока Запрос.Группировка(ТекстГруп) = 1 Цикл
//				ТоргТочка	=	Запрос.ТоргТочка;
//				Стр = 0;
//				Клиент		= 	?(ИспТочек = 1, ТоргТочка.Владелец, Запрос.Клиент); 
//				Пар		    =	Запрос.ПолучитьАтрибут(ТекстГруп);
//				Если Т.НайтиЗначение(Пар,Стр,ТекстГруп) = 0 Тогда
//					Т.НоваяСтрока(); 
//					Т.ТоргТочка = ТоргТочка; 
//					Т.Клиент    = Клиент;
//					Т.История	= СоздатьОбъект("ТаблицаЗначений");
//					ТИстория 	= Т.История;
//					ТИстория.НоваяКолонка("Товар");				
//					Для ПромПоз=1 По КолИнтер Цикл 
//						ТИстория.НоваяКолонка("ПродКол"+Строка(ПромПоз),"Число",10,0); 
//					КонецЦикла;
//				Иначе
//					Т.ПолучитьСтрокуПоНомеру(Стр);
//					ТИстория = Т.История;
//				КонецЕсли;
//				
//				//ТИстория - хранит историю продаж текущей точки за все периоды
//				Пока Запрос.Группировка("Товар") = 1 Цикл
//					Товар = Запрос.Товар; ПроданоКол = Запрос.Кол;
//					Стр=0;
//					Если ТИстория.НайтиЗначение(Товар, Стр, "Товар") = 0 Тогда //если товар еще не внесен в таблицу продаж
//					    ТИстория.НоваяСтрока(); ТИстория.Товар = Товар; Стр = ТИстория.НомерСтроки;
//					КонецЕсли;
//					ТИстория.УстановитьЗначение(Стр, "ПродКол" + НомерПериодаСтр, ПроданоКол);//запоминаем продажу за интервал
//				КонецЦикла;
//			КонецЦикла;
//			
//		КонецЕсли;
//		
//		Дата01 = Дата02 + 1;
//		
//	КонецЦикла; //цикл перебора интервалов
//	
//	//Выгрузка истории продаж
//	
//	ОкноСостояние("Выгрузка истории продаж...");
//
//	//История продаж в нашей обработке всегда выгружается первой, поэтому начинаем с вывода заголовка файла
//
//	ВыгрузитьЗаголовокФайла(Текст);
//	
//	//Выгружаем информацию о периоде истории продаж
//	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_System" + Т_ + "Struct:ObjID,Value");
//	Текст.ДобавитьСтроку(GUID_SYSTEM_SHDATEBG + Т_ + ДатаВФорматеXML(Дата1));
//	Текст.ДобавитьСтроку(GUID_SYSTEM_SHDATEND + Т_ + ДатаВФорматеXML(Дата2));
//	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_System");	
//	
//	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_Sales" + Т_ + "Struct:TPointID,GoodsID,Sales");
//	
//	Т.Сортировать("+Клиент,+ТоргТочка");
//	
//	КолСтрок = 0; ДатаПеорРекв = РабочаяДата();
//	Т.ВыбратьСтроки();
//	Пока Т.ПолучитьСтроку() = 1 Цикл //цикл перебора торговых точек
//		Клиент 	   = Т.Клиент;
//		КлиентИнфо = ПолучитьСправочныеДанные(Клиент);
//		Если КлиентИнфо.Выбран() = 0 Тогда
//			КлиентИнфо = ЗаписатьСправочныеДанные(Клиент);
//		КонецЕсли;
//		ИдКлиента 	= СокрП(КлиентИнфо.Идентификатор);
//		ТоргТочка 	= Т.ТоргТочка;
//		ИдТоргТочки	= ?(ТоргТочка.Выбран() = 1, СокрП(ТоргТочка.Идентификатор), ИдКлиента);//если торговая точка не выбрана, берем идентификатор клиента
//		ТИстория 	= Т.История;
//		ТИстория.Сортировать("+Товар");
//		ТИстория.ВыбратьСтроки();
//		Пока ТИстория.ПолучитьСтроку()=1 Цикл //цикл перебора истории продаж
//		    Товар = ТИстория.Товар;
//			ТоварИнфо = ПолучитьСправочныеДанные(Товар);
//			Если ТоварИнфо.Выбран() = 0 Тогда
//				ТоварИнфо = ЗаписатьСправочныеДанные(Товар);
//			КонецЕсли;
//			Стр = ИдТоргТочки + Т_ + СокрП(ТоварИнфо.Идентификатор) + Т_;
//			ИдТоргТочки = "*";
//			Для Поз=1 По КолИнтер Цикл
//				ПроданоКол = ТИстория.ПолучитьЗначение(ТИстория.НомерСтроки, "ПродКол" + Строка(Поз));
//				Стр = Стр + Строка(ПроданоКол) + " ";
//			КонецЦикла;
//		    Текст.ДобавитьСтроку(СокрП(Стр));
//			КолСтрок = КолСтрок + 1;
//			Если КолСтрок % 100 = 0 Тогда
//			    Состояние("Выведено позиций продаж: " + КолСтрок);
//			КонецЕсли;
//		КонецЦикла;
//	КонецЦикла;
//
//	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_Sales");
//	ОкноСостояние();
//	
//	Возврат 1; //означает, что истрия продаж включена
//	
//КонецФункции // ВыгрузитьИсториюПродаж()    
//
////******************************************************************************
//Процедура ВыгрузкаМатрицТоваров(Текст)      	                                                
//	
//	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_MatrixOfGoods" + Т_ + "Struct:ObjID,Category,GoodsID,RatingCat,=Rating");
//		
//	Док = СоздатьОбъект("Документ.кпкМатрицаТоваров");
//	Док.ВыбратьДокументы(НачГода(ТекущаяДата()), КонГода(ТекущаяДата())); 
//	
//	Пока Док.ПолучитьДокумент() = 1 Цикл
//	
//		Если Док.Проведен() = 0 Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		ПозАгента = Найти(СокрЛП(Док.Агенты), АгентИнфо.Код);
//			
//		Если ПозАгента = 0 Тогда Продолжить; КонецЕсли; 
//		
//		Если (ТекущаяДата()>Док.НачПериода) и ((ПустоеЗначение(Док.КонПериода) = 1) или (ТекущаяДата()<=Док.КонПериода)) Тогда				                                  
//			
//			Если Док.КатегорияКлиента.Выбран() = 1 Тогда
//				Категория = Т_ + СокрЛП(Док.КатегорияКлиента.Код); 
//			Иначе                                              
//				Категория = Т_ + ""; 
//			КонецЕсли;
//			
//			Док.ВыбратьСтроки();
//			
//			Пока Док.ПолучитьСтроку() = 1 Цикл
//				
//				ИдМатрицы = СокрЛП(Док.Идентификатор); 
//				
//				Если ПустоеЗначение(СокрЛП(ИдМатрицы)) = 1 Тогда
//					Продолжить;
//				КонецЕсли;
//				
//				ТоварИнфо	= ПолучитьСправочныеДанные(Док.Номенклатура);
//				Если ТоварИнфо.Выбран() = 0 Тогда
//					ТоварИнфо = ЗаписатьСправочныеДанные(Док.Номенклатура);
//				КонецЕсли;						
//				
//				Если Док.Номенклатура.ЭтоГруппа() = 1 Тогда
//					
//					ИдМатрицыГруппы = СокрЛП(ТоварИнфо.Идентификатор);
//					   
//					Сч = 1;
//					Спр = СоздатьОбъект("Справочник.Номенклатура");
//					Спр.ИспользоватьРодителя(Док.Номенклатура);
//					Спр.ВыбратьЭлементы();
//					Пока Спр.ПолучитьЭлемент() = 1 Цикл
//						Если Спр.ПометкаУдаления() = 0 Тогда							                         
//							
//							// Берем 3 символа, имея в виду, что кол-во товаров в группе не превышает 999 позиций
//							КонСтр = Прав("000" + Строка(Сч), 3); 
//							                            
//							НачСтр = Лев(ИдМатрицыГруппы, СтрДлина(ИдМатрицыГруппы)-3);							
//							
//							ТоварИнфо	= ПолучитьСправочныеДанные(Спр.ТекущийЭлемент());
//							Если ТоварИнфо.Выбран() = 0 Тогда
//								ТоварИнфо = ЗаписатьСправочныеДанные(Спр.ТекущийЭлемент());
//							КонецЕсли;
//							
//							ИдМатрицы	 = НачСтр + КонСтр; 
//							ИдТовара     = Т_ + СокрЛП(ТоварИнфо.Идентификатор);
//							Рейтинг	     = Т_ + СокрЛП(Док.Рейтинг.Код); 
//							ЗначРейтинга = Т_ + СокрЛП(Док.ЗначениеРейтинга); 						
//							
//							Текст.ДобавитьСтроку(ИдМатрицы + Категория + ИдТовара + Рейтинг + ЗначРейтинга); 						
//							
//							Сч = Сч + 1;							
//						КонецЕсли;
//					КонецЦикла;
//					
//				Иначе							
//					
//					ИдТовара	 = Т_ + СокрЛП(ТоварИнфо.Идентификатор); 
//					Рейтинг	     = Т_ + СокрЛП(Док.Рейтинг.Код); 
//					ЗначРейтинга = Т_ + СокрЛП(Док.ЗначениеРейтинга); 						
//					
//					Текст.ДобавитьСтроку(ИдМатрицы + Категория + ИдТовара + Рейтинг + ЗначРейтинга); 						
//					
//				КонецЕсли;                                        						
//				
//			КонецЦикла; 					
//			
//		КонецЕсли;  				
//		
//	КонецЦикла;                       
//	
//	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_MatrixOfGoods");
//	ОкноСостояние("");      	
//	
//КонецПроцедуры //ВыгрузкаМатрицТоваров() 
//
////******************************************************************************   
//Процедура ВыгрузкаСообщенийДляАгента(ВыгрузитьТему, Текст)
//	
//	Если ВыгрузитьТему = 1 Тогда
//	
//		Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_MsgThemes" + Т_ + "Struct:MsgID,DateTime,Theme,Color,=Flags,=ObjID");
//			    
//		СпрСообщений = СоздатьОбъект("Справочник.кпкТемыСообщений");
//		
//		СпрСообщений.ВыбратьЭлементы();
//		
//		Пока СпрСообщений.ПолучитьЭлемент() = 1 Цикл
//
//			Если (СпрСообщений.ПометкаУдаления() = 1) или (СпрСообщений.ВыгружатьВКПК = 0) Тогда Продолжить; КонецЕсли;
//			 
//			ПозАгента = Найти(СокрЛП(СпрСообщений.Агенты), АгентИнфо.Код);
//			
//			Если ПозАгента = 0 Тогда Продолжить; КонецЕсли;   
//			
//			ИдТемы	       = СокрЛП(СпрСообщений.Идентификатор);
//			ДатаВремя      = ДатаВФорматеXML(СпрСообщений.ДатаСоздания);
//			Тема 		   = СокрЛП(СпрСообщений.Наименование);    		
//			Если СпрСообщений.Цвет.Выбран() = 1 Тогда
//				Цвет = СпрСообщений.Цвет.Код;  
//			Иначе                                        
//				Цвет = "#000000";  
//			КонецЕсли;
//			ПризнПрочтения = "0"; // если 0 - будет снят признак прочтения, если 1 - не будет снят
//			ОбъектСсылка   = ?(СпрСообщений.Документ.Выбран()=1, ВернутьИдентификаторДок(СпрСообщений.Документ), "");
//			
//			Текст.ДобавитьСтроку(ИдТемы + Т_ + ДатаВремя + Т_ + Тема + Т_ + Цвет + Т_ + ПризнПрочтения + Т_ + ОбъектСсылка);			
//		КонецЦикла;
//		
//		Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_MsgThemes");
//		
//	Иначе
//		
//		Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_MsgBody" + Т_ + "Struct:MsgID,Text");   		
//		
//		СпрСообщений = СоздатьОбъект("Справочник.кпкСообщения");
//		
//		СпрСообщений.ВыбратьЭлементы(0);
//		
//		Пока СпрСообщений.ПолучитьЭлемент() = 1 Цикл
//		
//			Если СпрСообщений.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;
//			
//			ИдТемы 		   = СокрЛП(СпрСообщений.Владелец.Идентификатор);
//			ТекстСообщения = УбратьНечитаемыеСимволы(СпрСообщений.ТекстСообщения);
//				
//			Текст.ДобавитьСтроку(ИдТемы + Т_ + ТекстСообщения);   			
//		КонецЦикла;
//		
//		Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_MsgBody");
//		
// 	КонецЕсли;
//	
//КонецПроцедуры //ВыгрузкаСообщенийДляАгента()            
//
////******************************************************************************   
//Процедура ДобавитьСтрокуДляЗаданияВФайлВыгрузки(лДок, Текст, ЭтоГруппа)   	                                                
//	
//	Если ТипЗначения(лДок) = 11 Тогда  
//		ТипЗнчЗадания  = лДок.ТипЗадания;
//		Наим	   	   = Т_ + УбратьНечитаемыеСимволы(лДок.Наименование);			
//		Коммент	   	   = Т_ + "";
//		Код		       = Т_ + "0";
//		Флаги          = Т_ + "0";
//	Иначе
//		ТипЗнчЗадания  = лДок.Задание.ТипЗадания;
//		Наим	   	   = Т_ + УбратьНечитаемыеСимволы(лДок.Задание.Наименование);			
//		Коммент	   	   = Т_ + УбратьНечитаемыеСимволы(лДок.ТабКомментарий);
//		Код		       = Т_ + СокрЛП(лДок.НомерСтроки);  
//		Флаги          = Т_ + лДок.Обязательная;
//	КонецЕсли;
//	
//	ТипЗадания = "";
//	
//	Если ЭтоГруппа = 1 Тогда
//		ТипЗадания = 0;
//	ИначеЕсли ТипЗначения(ТипЗнчЗадания) = 1 Тогда
//		ТипЗадания = 1;
//	ИначеЕсли (ТипЗначения(ТипЗнчЗадания) = 2) Тогда
//		ТипЗадания = 2;
//	ИначеЕсли ТипЗначения(ТипЗнчЗадания) = 3 Тогда
//		ТипЗадания = 3;
//		// Если к качестве типа задания передается какое-то перечисление,
//		// созданное программно, то в качестве код типа задания следует
//		// указать 10
//		//ИначеЕсли ТипЗнч(ТипЗнчЗадания) = Тип("Перечисление") Тогда
//		//	ТипЗадания = 10;
//	ИначеЕсли ТипЗначения(ТипЗнчЗадания) = 0 Тогда
//		ТипЗадания = 20;
//	ИначеЕсли ТипЗначения(ТипЗнчЗадания) = 10 Тогда
//		ИдПеречисления = ТипЗнчЗадания.Идентификатор();
//		ТипЗадания = Метаданные.Перечисление(ТипЗнчЗадания.Вид()).Значение(ИдПеречисления).Комментарий;  		
//	КонецЕсли;
//	
//	СтрТипЗадания  = Строка(ТипЗадания);
//	// Нужно передать идентификатор перечисления в случае, если в параметре Type
//	// указан тип "Перечисление", которое создается программно		
//	ИдПеречисления = Т_ + ""; 			
//	
//	Текст.ДобавитьСтроку(СтрТипЗадания + Наим + Коммент + Код + ИдПеречисления + Флаги);
//	
//КонецПроцедуры //ДобавитьСтрокуДляЗаданияВФайлВыгрузки
// 
////******************************************************************************   
//Процедура ВыгрузкаЗаданийДляАгента(Текст)
//	
//	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Doc_Task" + Т_	+ "Struct:DocID,DocState,DocFlags,TimeCrt," +
//	"DocNumber,FirmID,ClientID,TPointID,=Category,Comment,=RouteID");
//	
//	Текст.ДобавитьСтроку("<Sub>" +Т_+ "Lines" +Т_+ "Struct:Type,Name,Comment,Code,=TypeID,=Flags");       		
//	
//	Док = СоздатьОбъект("Документ.кпкЗаданиеАгента");
//	
//	Док.ВыбратьДокументы(НачДатаЗадания, КонДатаЗадания); 
//	
//	Пока Док.ПолучитьДокумент() = 1 Цикл
//		
//		Если (Док.Проведен() = 0) или (Док.Агент <> ВыбАгент) или (Док.ПометкаУдаления() = 1) Тогда
//			Продолжить;
//		КонецЕсли;                              
//		
//		Состояние("Выгрузка заданий...");
//		
//		// Читаем группы список элементов групп	
//		СписокГрупп = СоздатьОбъект("СписокЗначений");
//		Спр = СоздатьОбъект("Справочник.кпкВидыЗаданий");
//		Стр = СокрЛП(Док.СтрГруппы) + ",";
//		Если Стр<>"," Тогда
//			Пока Стр<>"" Цикл
//				Поз  = Найти(Стр, ",");
//				Код1 = Лев(Стр, Поз-1);
//				Стр  = Прав(Стр, СтрДлина(Стр)-Поз);
//				Спр.НайтиПоКоду(Код1, 2);
//				Если Спр.Выбран() = 0 Тогда
//					ОповеститьОСобытии("При выгрузке заданий произошла ошибка: перезаполните документ ""Задание агента №" + 
//										Строка(Док.НомерДок) + " от  " +  Строка(Док.ДатаДок) + """!", "!", 1, Док);
//				Иначе
//					СписокГрупп.ДобавитьЗначение(Спр.ТекущийЭлемент(), Спр.ЭтоГруппа());
//				КонецЕсли;
//			КонецЦикла;
//		КонецЕсли;  		
//		
//		ИдДок 	  = ВернутьИдентификаторДок(Док.ТекущийДокумент());			 						
//		Клиент 	  = Док.Контрагент;
//		ТоргТочка = Док.кпкТоргТочка;
//		
//		КлиентИнфо = ПолучитьСправочныеДанные(Клиент);
//		Если КлиентИнфо.Выбран() = 0 Тогда
//			КлиентИнфо = ЗаписатьСправочныеДанные(Клиент);
//		КонецЕсли;
//		
//		ФирмаИнфо = ПолучитьСправочныеДанные(Док.Фирма);
//		Если ФирмаИнфо.Выбран() = 0 Тогда
//			ФирмаИнфо = ЗаписатьСправочныеДанные(Док.Фирма);
//		КонецЕсли;
//		
//		ИдКлиента	= Т_ + СокрП(КлиентИнфо.Идентификатор);
//		ИдФирмы     = Т_ + СокрП(ФирмаИнфо.Идентификатор);
//		Если ТоргТочка.Выбран() = 1 Тогда
//			ИдТоргТочки = Т_ + СокрП(ТоргТочка.Идентификатор);
//		Иначе
//			ИдТоргТочки = ИдКлиента;
//		КонецЕсли; 		
//		
//		НомерДок	 = Т_ + СокрЛП(Док.НомерДок);
//		ДатаВремяДок = Т_ + ДатаВФорматеXML(Док.ДатаДок);
//		Комментарий  = Т_ + УбратьНечитаемыеСимволы(Док.Комментарий);
//		СостДок 	 = Т_ + "2";
//		       
//		// Признак принудительного обновления документа в КПК
//		ПризнакОбновления = ?(Док.ОбновитьЗаданиеВКПК = 1, 0, 128);  
//		// Цирфа 128 означает, что задание будет загружено в КПК только в одном из перечисленных случаев:
//        // 1. Документ ранее отсутствовал в БД КПК.
//		// 2. Документ присутствует в БД КПК, документ доступен для редактирования пользователем
//		//    и документ еще не изменялся пользователем.
//		СостДокВЦБД  = Т_ + (ВернутьСостояниеДок(Док) + ПризнакОбновления);
//		КодКат 		 = Т_ + СокрЛП(Док.Категория.Код);
//		
//		ИдМаршрута = Т_ + "";
//		Если (Док.ДокОснование.Выбран() = 1) и (Док.ДокОснование.Вид() = "кпкМаршрут") Тогда
//			ИдМаршрута = Т_ + СокрЛП(Док.ДокОснование.Идентификатор); 				
//		КонецЕсли;
//		
//		// Заполняем заголовок тега
//		Текст.ДобавитьСтроку(ИдДок + СостДок + СостДокВЦБД + ДатаВремяДок + НомерДок +
//		ИдФирмы + ИдКлиента + ИдТоргТочки + КодКат + Комментарий + ИдМаршрута);		
//		 
//		// Заполняем дерево заданий
//		СписокГрупп.СортироватьПоПредставлению(); 
//		
//		ТабЗаданий = СоздатьОбъект("ТаблицаЗначений");
//	
//		Док.ВыгрузитьТабличнуюЧасть(ТабЗаданий);  
//		        
//		// Если задание без групп
//		Если (СписокГрупп.РазмерСписка() = 0) и (ТабЗаданий.КоличествоСтрок() <> 0) Тогда
//			
//			Текст.ДобавитьСтроку("<Begin>" + Т_ + "Lines");
//			
//			// Обходим строки документа
//			ТабЗаданий.ВыбратьСтроки();
//			
//			Пока ТабЗаданий.ПолучитьСтроку() = 1 Цикл
//				
//				ДобавитьСтрокуДляЗаданияВФайлВыгрузки(ТабЗаданий, Текст, 0);
//				
//			КонецЦикла;
//			
//			Текст.ДобавитьСтроку("<End>" + Т_ + "Lines");  			
//			
//		Иначе     			
//
//			Для Сч = 1 По СписокГрупп.РазмерСписка() Цикл      
//				
//				ТекГруппа = СписокГрупп.ПолучитьЗначение(Сч);
//				
//				Текст.ДобавитьСтроку("<Begin>" + Т_ + "Lines");
//				
//				НомСтр = 0;
//				Если ТабЗаданий.НайтиЗначение(ТекГруппа, НомСтр,"ГруппаЗаданий") = 1 Тогда  
//					ПризнГруппы = 1;
//				Иначе               
//					ПризнГруппы = 0;
//				КонецЕсли;
//				
//				// Добавляем строку для группы
//				ДобавитьСтрокуДляЗаданияВФайлВыгрузки(ТекГруппа, Текст, ПризнГруппы); 
//				
//				// Обходим строки документа
//				ТабЗаданий.ВыбратьСтроки();
//				
//				Пока ТабЗаданий.ПолучитьСтроку() = 1 Цикл
//					
//					Если ТабЗаданий.ГруппаЗаданий <> ТекГруппа Тогда Продолжить; КонецЕсли;
//					
//					ДобавитьСтрокуДляЗаданияВФайлВыгрузки(ТабЗаданий, Текст, 0);
//					
//				КонецЦикла;
//				
//				Текст.ДобавитьСтроку("<End>" + Т_ + "Lines");
//				
//			КонецЦикла;   
//			
//		КонецЕсли;
//		
//	КонецЦикла; 	
//	
//	Текст.ДобавитьСтроку("<End>" + Т_ + "Doc_Task");
//
//КонецПроцедуры //ВыгрузкаЗаданийДляАгента()    
//
////******************************************************************************
////В параметре СписВыпЗапросов передается список выполненных запросов
//Функция ВыгрузкаЗапросов(Текст, СписВыпЗапросов, ТДопКлиенты)
//	
//	Результат = 1;
//	КолЗапр = 0;
//	
//	Спр = СоздатьОбъект("Справочник.КпкЗапросыАгентов");
//	Спр.ИспользоватьВладельца(ВыбАгент);
//	
//	ЕстьИстория = 0;                                    
//	
//	СпрЗ = СоздатьОбъект("Справочник.КпкЗапросы"); 	
//	Если СпрЗ.НайтиПоРеквизиту("ВидЗапроса", Перечисление.кпкВидыЗапросов.ИсторияПродаж, 0) = 1 Тогда		
//		//если есть запрос истории продаж, выгружаем ее первой (т.к. выгрузка истории продаж выгружает и заголовок файла)
//		Если Спр.НайтиПоРеквизиту("Запрос",СпрЗ.ТекущийЭлемент(),0) = 1 Тогда
//			Если (Спр.ПометкаУдаления() = 0) И (Спр.Активен <> 0) Тогда   
//				ПланАгента = НайтиПланАгента();
//				Результат = ВыгрузкаИсторииПродаж(Текст, "История", ПланАгента);
//				Если Результат = 0 Тогда
//					Возврат 0;
//				КонецЕсли;
//				КолЗапр = КолЗапр + 1;
//				ЕстьИстория = 1;
//			КонецЕсли;
//		КонецЕсли;         
//	КонецЕсли;      	
//
//	Если ЕстьИстория = 0 Тогда
//	    ВыгрузитьЗаголовокФайла(Текст); //если история продаж не выгружалась, выгружаем и заголовок файла
//	КонецЕсли;       
//	
//	Спр.ВыбратьЭлементы();
//	Пока Спр.ПолучитьЭлемент() = 1 Цикл
//	   
//		Если Спр.ПометкаУдаления() = 1 Тогда
//	        Продолжить;
//		ИначеЕсли Спр.Активен = 0 Тогда
//			Продолжить;
//		ИначеЕсли СписВыпЗапросов.НайтиЗначение(Спр.Запрос) <> 0 Тогда
//		    Продолжить;
//		КонецЕсли; 
//		
//		ВыгрузкаСистемнойКонстантыСпискаТиповЦен(Текст);
//		
//		ВидЗапроса = СокрЛП(Спр.Запрос.ВидЗапроса);
//		
//		Если ВидЗапроса = "ИсторияПродаж" Тогда
//			// история продаж была уже выгружена до входа в цикл, ничего не делаем
//		ИначеЕсли ВидЗапроса = "Взаиморасчеты" Тогда
//			ПланАгента = НайтиПланАгента();
//			ВыгрузкаВзаиморасчетов(Текст, ТДопКлиенты);						
//			ВыгрузкаКлиентов(Текст, ПланАгента, ТДопКлиенты);	            			
//			КолЗапр = КолЗапр + 1;
//		ИначеЕсли ВидЗапроса = "Маршруты" Тогда
//			ПланАгента = НайтиПланАгента();
//			ВыгрузкаМаршрутов(Текст, ПланАгента, ТДопКлиенты);
//			КолЗапр = КолЗапр + 1;
//		ИначеЕсли ВидЗапроса = "Номенклатура" Тогда   
//			ВыгрузкаПеречислений(Текст);
//			ВыгрузкаНоменклатуры(Текст, 0);
//			КолЗапр = КолЗапр + 1;   
//		ИначеЕсли ВидЗапроса = "Задания" Тогда   			
//			ВыгрузкаЗаданийДляАгента(Текст);
//			КолЗапр = КолЗапр + 1;  
//		КонецЕсли;
//		
//		Спр.Активен = 0;
//		Если ВыполнитьОперациюДляОбъекта(Спр, "запись") = 0 Тогда 						
//			Возврат 0;			
//		КонецЕсли;
//	КонецЦикла;
//	
//	ВидВыгрузки = СписВидВыгрузки.ПолучитьЗначение(СписВидВыгрузки.ТекущаяСтрока());
//	Если (КолЗапр = 0) И (ВидВыгрузки = "Запрос") Тогда
//	    ОповеститьОСобытии("Запросов от агента не поступало!", "i", 0);
//		Результат = 0;
//	Иначе
//		//добавляем в файл время выгрузки данных
//		ВыгрузкаКонстант(Текст, "Время");
//	КонецЕсли;      
//	
//	Возврат Результат;
//	
//КонецФункции // ВыгрузкаЗапросов()
//
////******************************************************************************
//// ПолучитьОстатки(СписТоваров, ТолькоОстатки, ОстаткиТМЦ, ОстаткиПартий)
////
//// Параметры: 
////  СписТоваров		- список значений, содержащий товары для установки фильтра
////                    по ним.
////  ТолькоОстатки	- установить фильтр только по номенклатуре, которая
////                    присутствует в составе
////  ОстаткиТМЦ		- выходной параметр. Таблица значений с остатками регистра 
////                    ОстаткиТМЦ
////  РегПартии		- выходной параметр. Таблица значений с остатками регистра 
////                    ПартииНаличие.
////
//// Возвращаемое значение:
////  Нет.
////
//// Описание:
////  Формирует таблицы значений из остатков регистров ОстаткиТМЦ и ПартииНаличие
////
//Процедура ПолучитьОстатки(СкладАгента, ОстаткиТМЦ, СписТоваров)
//	
//	ВремРегистры	= СоздатьОбъект("Регистры");
//	РегОстатки		= ВремРегистры.ОстаткиТМЦ;
//	РегОстатки.УстановитьЗначениеФильтра("Склад", СкладАгента, 1);
//	
//	Если ПустоеЗначение(СписТоваров) = 0 Тогда
//		РегОстатки.УстановитьЗначениеФильтра("Номенклатура", СписТоваров, 2);		
//	КонецЕсли;
//	
//	Если ТекущаяДата() < ПолучитьДатуТА() Тогда
//		РегОстатки.ВременныйРасчет();
//		ВремРегистры.РассчитатьРегистрыПо(ТекущаяДата());
//	КонецЕсли;
//	
//	ОстаткиТМЦ	= СоздатьОбъект("ТаблицаЗначений");
//	РегОстатки.ВыгрузитьИтоги(ОстаткиТМЦ, 1, 1);
//	
//КонецПроцедуры // ПолучитьОстатки()  
//
////******************************************************************************
//Процедура ВыгрузкаОстатковПоПередвижномуСкладу(Текст, ТДопТовары)
//	
//	Перем ТаблОстатков, СписТоваров;
//	
//	СкладАгента = АгентИнфо.ПередвижнойСклад;
//	Если СкладАгента.Выбран() = 0 Тогда
//		ОповеститьОСобытии("На указан передвижной склад агента! Обновление остатков по" +  
//						   " передвижному складу не будет выполнено!", "!", 1);
//		Возврат;
//	КонецЕсли;   	
//		
//	ПолучитьОстатки(СкладАгента, ТаблОстатков, СписТоваров);
//	
//	ОснФирма = глЗначениеПоУмолчанию("ОсновнаяФирма");
//	
//	Если ОснФирма.Выбран() = 1 Тогда      		
//		ФирмаИнфо = ПолучитьСправочныеДанные(ОснФирма);
//		Если ФирмаИнфо.Выбран() = 0 Тогда
//			ФирмаИнфо = ЗаписатьСправочныеДанные(ОснФирма);
//		КонецЕсли;
//		ИдФирмы = Т_ + СокрП(ФирмаИнфо.Идентификатор);  	
//	Иначе   
//		кпкСпрФирм	= СоздатьОбъект("Справочник.кпкФирмы");
//		кпкСпрФирм.ВыбратьЭлементы();
//		Пока кпкСпрФирм.ПолучитьЭлемент() = 1 Цикл
//			Если кпкСпрФирм.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;
//			ИдФирмы = Т_ + кпкСпрФирм.Идентификатор;
//			Прервать;
//		КонецЦикла; 
//	КонецЕсли;
//
//	ИдДок = глАПСоздатьИдентификатор();;
//	
//	НомерДок = "";
//	
//	НомерДок	  = Т_ + "1";            
//	ДатаВремяДок  = Т_ + ДатаВФорматеXML(ТекущаяДата())  + " " + СтрЗаменить(ТекущееВремя(),":","-");;
//	Комментарий   = Т_ + "Выравнивание остатков";
//	СостДок 	  = Т_ + "1"; // документ проведен
//	ВидОперации   = Т_ + "2"; // устанавливаем режим изменения остатков при проведении в КПК
//	СуммаДок	  = Т_ + "";
//	ДокОсн		  = Т_ + "";     		
//	Рез 		  = 1  + 2048;		
//	КодКат 		  = Т_ + "";
//	
//	СостДокВЦБД = Т_ + (1 + 8 + 2048);	//Документ проведен, запрещен для редактирования, полная установка остатков
//	
//	Текст.ДобавитьСтроку(СокрЛП(ИдДок) + СостДок + СостДокВЦБД + ДатаВремяДок + НомерДок +
//						 ИдФирмы + ВидОперации + СуммаДок + Комментарий + ДокОсн);
//	               
//	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Lines");		
//	
//	ТаблОстатков.ВыбратьСтроки();
//	Пока ТаблОстатков.ПолучитьСтроку() = 1 Цикл   		
//		
//		Ном = ТаблОстатков.Номенклатура;  
//		
//		Стр = 0;
//		Если ТДопТовары.НайтиЗначение(Ном, Стр, "Товар") = 0 Тогда
//		    ТДопТовары.НоваяСтрока(); 
//			ТДопТовары.Товар = Ном;
//		КонецЕсли;
//		
//		ТоварИнфо = ПолучитьСправочныеДанные(Ном);
//		Если ТоварИнфо.Выбран() = 0 Тогда
//			ТоварИнфо = ЗаписатьСправочныеДанные(Ном);
//		КонецЕсли;		
//		ИдТовара	= СокрП(ТоварИнфо.Идентификатор);   		
//		
//		Кол		  = ТаблОстатков.Количество;			
//		УчКол	  = 0;    			
//		СтрКол	  = Строка(Кол);		
//		Цена 	  = "";
//		Сумма 	  = "";
//		Текст.ДобавитьСтроку(Строка(ИдТовара) + Т_ + СтрКол + Т_ + СтрКол + Т_ + Цена + Т_ + Сумма);
//	
//	КонецЦикла;  
//	
//	Текст.ДобавитьСтроку("<End>" + Т_ + "Lines");			
//	
//	//Текст.ДобавитьСтроку("<End>" + Т_ + "Doc_Inventory");
//	
//КонецПроцедуры //ВыгрузкаОстатковПоПередвижномуСкладу()      
//  
////******************************************************************************
//Процедура ВыгрузкаИнвентаризаций(Текст, ТДопТовары)
//	
//	СкладАгента = АгентИнфо.ПередвижнойСклад;
//	Если СкладАгента.Выбран() = 0 Тогда	
//		Возврат;
//	КонецЕсли;   	
//	
//	СрокИнвентаризаций = Константа.кпкСрокИнвентаризаций;
//	
//	Если СрокИнвентаризаций = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Текст.ДобавитьСтроку("<Begin>" +Т_+ "Doc_Inventory" + Т_	+ "Struct:DocID,DocState,DocFlags,TimeCrt,DocNumber,FirmID,InvType,DocSum,Comment,MDocID");
//	Текст.ДобавитьСтроку("<Sub>" +Т_+ "Lines" +Т_+ "Struct:GoodsID,AmountDB,Amount,Price,Sum");
//		
//	Док = СоздатьОбъект("Документ.ИнвентаризацияТМЦ");
//		
//	Док.ВыбратьДокументы(ТекущаяДата()-СрокИнвентаризаций, ТекущаяДата());
//	
//	Пока Док.ПолучитьДокумент() = 1 Цикл
//	    
//		Если Док.Склад <> СкладАгента Тогда
//		    Продолжить;
//		КонецЕсли;
//	    
//		Кол = Кол + 1;
//	    Состояние("Выгрузка инвентаризаций: " + Кол);
//			
//		ФирмаИнфо = ПолучитьСправочныеДанные(Док.Фирма);
//		Если ФирмаИнфо.Выбран() = 0 Тогда
//			ФирмаИнфо = ЗаписатьСправочныеДанные(Док.Фирма);
//		КонецЕсли;
//	                                                        
//		ИдДок 		 = ВернутьИдентификаторДок(Док.ТекущийДокумент());     		
//		ИдФирмы 	 = Т_ + СокрП(ФирмаИнфо.Идентификатор);				
//		НомерДок	 = Т_ + СокрЛП(Док.НомерДок); 		
//		ДатаВремяДок = Т_ + ДатаВФорматеXML(Док.ДатаДок) + " " + СтрЗаменить(Док.ПолучитьВремя(),":","-");
//		Комментарий  = Т_ + СокрЛП(УбратьСимволыКонцаСтроки(Док.Комментарий));		
//		СуммаДок     = Т_ + Строка(Док.Итог("Сумма"));      		
//		Тип 		 = Т_ + ?(Док.кпкВидОперации = 0, "1", "2"); 		
//		ДокОсн		 = Т_ + "";                        
//		
//		Если Док.кпкВидОперации = Перечисление.кпкВидыИнвентаризаций.ИзменятьОстатки Тогда
//			Тип = Т_ + "2"; 
//		Иначе
//			Тип = Т_ + "1";			
//		КонецЕсли;
//		                          
//		Пер = Перечисление.кпкВидыВыгрузкиИнвентаризаций;
//		Если Док.кпкВидВыгрузки = Пер.ЧастичнаяУстановкаОстатков Тогда // Частичная установка остатков
//			ДопФлагиВыгр = 1024;
//		ИначеЕсли Док.кпкВидВыгрузки = Пер.ПолнаяУстановкаОстатков Тогда // Полная установка остатков
//			ДопФлагиВыгр = 2048;
//		Иначе 
//			ДопФлагиВыгр = 0; // Обычная выгрузка
//		КонецЕсли; 		                                                                        
//	
//		Если Док.ПометкаУдаления() = 1 Тогда						
//			СостДокВЦБД = 3; 
//			СостДок 	= Т_ + "2";
//		Иначе						
//			СостДокВЦБД = 1;                    			     
//			СостДок 	= Т_ + "1";
//		КонецЕсли; 
//		                  
//		// Запрет редактирования в КПК
//		СостДокВЦБД = СостДокВЦБД + 8 + ДопФлагиВыгр;
//		
//		Текст.ДобавитьСтроку(ИдДок + СостДок + Т_ + СостДокВЦБД + ДатаВремяДок + НомерДок + 
//						     ИдФирмы + Тип + СуммаДок + Комментарий + ДокОсн);
//	
//		Текст.ДобавитьСтроку("<Begin>" + Т_ + "Lines");  
//		
//		Док.ВыбратьСтроки();
//		Пока Док.ПолучитьСтроку() = 1 Цикл	   
//			
//			Ном = Док.Номенклатура;	
//			
//			Если Ном.Выбран() = 0 Тогда
//		        Продолжить;
//			КонецЕсли;  
//			
//			Стр = 0;
//			Если ТДопТовары.НайтиЗначение(Ном, Стр, "Товар") = 0 Тогда
//			    ТДопТовары.НоваяСтрока(); 
//				ТДопТовары.Товар = Ном;
//			КонецЕсли;
//			
//			ТоварИнфо = ПолучитьСправочныеДанные(Ном);
//			Если ТоварИнфо.Выбран() = 0 Тогда
//				ТоварИнфо = ЗаписатьСправочныеДанные(Ном);
//			КонецЕсли;
//			
//			ИдТовара = СокрЛП(ТоварИнфо.Идентификатор);
//			Кол		 = Строка(Док.Количество*Док.Коэффициент);
//			Цена 	 = Строка(Док.Цена);
//			УчКол	 = Строка(Док.КоличествоУчет*Док.Коэффициент);					
//			Сумма 	 = Строка(Док.Сумма); 
//			
//			Текст.ДобавитьСтроку(Строка(ИдТовара) + Т_ + УчКол + Т_ + Кол + Т_ + Цена + Т_ + Сумма);			
//		КонецЦикла;
//		
//		Текст.ДобавитьСтроку("<End>" + Т_ + "Lines");
//		
//	КонецЦикла;  
//	
//	Если флОбновитьОстПередвижнойСклад = 1 Тогда				
//		ВыгрузкаОстатковПоПередвижномуСкладу(Текст, ТДопТовары);
//	КонецЕсли;	  				
//	
//	Текст.ДобавитьСтроку("<End>" + Т_ + "Doc_Inventory");
//		
//КонецПроцедуры //ВыгрузкаИнвентаризаций()
//
////******************************************************************************
////Функция возвращает путь к exe-файлу запуска Агент+ в КПК
//Функция ПолучитьПутьЗапускаАгентПлюсВКПК(ИнициироватьRAPI = 0)
//	
//	Если ИнициироватьRAPI = 1 Тогда
//		Результат = КПКОбъект.CeRapiInit();
//		Если Результат <> 0 Тогда
//			ОповеститьОСобытии("Ошибка инициализации мобильного устройства: " + КПКОбъект.CeErrDescription(Результат), "!", 0);
//			Возврат "";
//		КонецЕсли;
//	КонецЕсли;   
//	
//	Если МобильноеПриложение = ВидАгентПлюсМТ Тогда	
//		ПутьАгентП = "\Program Files\agentp2\aplbrs.exe";
//	Иначе	                           
//		ПутьВРеестре = "Software\AgentPlus\AgentP";	
//		ПутьАгентП = КПКОбъект.CeRegQueryValue("HKEY_LOCAL_MACHINE",ПутьВРеестре,"StartupFile");
//		Если ПустоеЗначение(ПутьАгентП) = 1 Тогда
//			ПутьАгентП = "\Program Files\AgentPlus\AgentP\AgentPlus.exe";			
//		КонецЕсли; 
//	КонецЕсли;                                                           
//	
//	Результат = КПКОбъект.CeFileExists(ПутьАгентП);
//  
//	Если ИнициироватьRAPI = 1 Тогда
//	    КПКОбъект.CeRapiUnInit();
//	КонецЕсли;
//	
//	Если ПустоеЗначение(ПутьАгентП) = 1 Тогда
//	    ОповеститьОСобытии("Не удалось определить путь установки Агент+ на КПК! Возможно Агент+ на КПК не установлен!", "!", 0);
//	КонецЕсли;
//	
//	Возврат ПутьАгентП;
//
//КонецФункции 	
//
////******************************************************************************
//Функция КомандаПолученияДанныхСКПК()
//	ОкноСостояние("Отправка команды в КПК...");
//    Результат = КПКОбъект.CeRapiInit();
//	Если Результат = 0 Тогда
//		ПутьАгентП = ПолучитьПутьЗапускаАгентПлюсВКПК();
//		Если ПустоеЗначение(ПутьАгентП) = 1 Тогда
//			КПКОбъект.CeRapiUnInit();			
//		    ОкноСостояние("");
//			Возврат 0;
//		КонецЕсли;
//		Если ПустоеЗначение(Константа.КПКНазваниеБД) = 0 Тогда //если на КПК несколько баз данных
//			КПКОбъект.CeExecute(ПутьАгентП,"export " + СокрЛП(Константа.КПКНазваниеБД));
//		Иначе
//		    КПКОбъект.CeExecute(ПутьАгентП,"export");
//		КонецЕсли;
//		КПКОбъект.CeRapiUnInit();
//		//Ждем три секунды
//		Секунд = 3;
//		ТекВремя = ТекущееВремя();
//		Пока Секунд > 0 Цикл
//			ПромТекВремя = ТекущееВремя();
//		    Если ПромТекВремя <> ТекВремя Тогда
//		        ТекВремя = ПромТекВремя;
//				Секунд = Секунд - 1;
//		    КонецЕсли;
//		КонецЦикла;
//		ОкноСостояние("");
//		Возврат 1;
//	Иначе
//		ОкноСостояние("КПК: "+КПКОбъект.CeErrDescription(Результат),"!");
//	КонецЕсли;
//	Возврат ?(Результат = 0, 1, 0);
//КонецФункции //КомандаПолученияДанныхСКПК()
//
//
////******************************************************************************
//Функция КомандаОтправкиДанныхВКПК()
//    Результат = КПКОбъект.CeRapiInit();
//	Если Результат = 0 Тогда
//		ПутьАгентП = ПолучитьПутьЗапускаАгентПлюсВКПК();
//		Если ПустоеЗначение(ПутьАгентП) = 1 Тогда
//			КПКОбъект.CeRapiUnInit();
//		    Возврат 0;
//		КонецЕсли;
//		КПКОбъект.CeExecute(ПутьАгентП,"import");
//		КПКОбъект.CeRapiUnInit();
//	Иначе
//		ОкноСостояние("КПК: "+КПКОбъект.CeErrDescription(Результат),"!");
//	КонецЕсли;
//	Возврат ?(Результат = 0, 1, 0);
//КонецФункции //КомандаОтправкиДанныхВКПК()

//
////******************************************************************************
//// ОтправкаФайла()
////
//// Параметры: 
////  
////
//// Возвращаемое значение:
////  0 - произошли ошибки
////  1 - отправка файла прошла успешно
//// Описание:
////  Отправка файла в КПК при прямом подключении.
////
//Функция ОтправкаФайла(ИмяФайла, ОтветнаяВыгрузка = 0)
//	
//	РезултатВыгрузки = 0;
//	
//	//ВидВыгрузки 	= СписВидВыгрузки.ПолучитьЗначение(СписВидВыгрузки.ТекущаяСтрока());
//	СпособОбмена 	= списСпособОбмена.ПолучитьЗначение(списСпособОбмена.ТекущаяСтрока());
//	
//	Если (флАвтоОбменСКПК = 1) И (СпособОбмена = "ПрямоеПодключение") Тогда //должны передать файл в КПК
//		ОкноСостояние("Выгрузка в КПК...");
//		Результат = КПКОбъект.CeRapiInit();
//		
//		Если Результат <> 0 Тогда
//			ОкноСостояние("КПК: " + КПКОбъект.ErrDescription(Результат), "!");
//			Предупреждение("Данные в КПК не выгружены!");
//			Возврат 0;
//		КонецЕсли;
//		
//		ДлинаРасширения = ?(ВРег(Прав(ИмяФайла,3)) = "CRP", 7, 3); //если файл имеет расширение ".crp" то это двойное расширение, например "Petrov.dat.crp"
//		
//		Если МобильноеПриложение = ВидАгентПлюсМТ Тогда     		                                    
//			ФайлПолучательВКПК = "\Program Files\agentp2\exchange\FromCDB." + Прав(ИмяФайла, ДлинаРасширения);
//		Иначе
//			ФайлПолучательВКПК = "\My Documents\Personal\From1C." + Прав(ИмяФайла, ДлинаРасширения);
//		КонецЕсли;
//		
//		Результат = КПКОбъект.CePutFile(ИмяФайла, ФайлПолучательВКПК);
//		
//		Если Результат=0 Тогда
//			//Если ВидВыгрузки = "ИсторияИзФайла" Тогда //значит делали подключение истории продаж из файла автовыгрузки
//			//	ИмяФайлаИстории = ВернутьИмяФайлаИсторииПродаж();
//			//	Если ФС.СуществуетФайл(ИмяФайлаИстории) = 1 Тогда
//			//	    ФС.ПереименоватьФайл(ИмяФайлаИстории, Лев(ИмяФайлаИстории, СтрДлина(ИмяФайлаИстории)-3) + "old", 1);
//			//	КонецЕсли;
//			//КонецЕсли;
//			ОкноСостояние("Выгрузка данных в мобильное устройство завершена.");
//			РезултатВыгрузки = 1;
//		Иначе
//			ОкноСостояние("Выгрузка данных мобильное устройство не произведена!", "!");
//			ОповеститьОСобытии("Причина: " + КПКОбъект.ErrDescription(Результат), "!");
//		КонецЕсли;
//		
//		КПКОбъект.CeRapiUnInit();
//		
//		Если РезултатВыгрузки = 1 Тогда
//			Если ОтветнаяВыгрузка = 1 Тогда
//				РезултатВыгрузки = КомандаОтправкиДанныхВКПК();
//			Иначе
//				//Если Вопрос("Послать в КПК команду на загрузку данных?",4) = 6 Тогда
//					РезултатВыгрузки = КомандаОтправкиДанныхВКПК();
//				//КонецЕсли; 
//			КонецЕсли;
//		КонецЕсли;
//	Иначе
//		РезултатВыгрузки = 1;
//		ОкноСостояние("Выгрузка данных успешно завершена");
//	КонецЕсли;
//	
//	Возврат РезултатВыгрузки;
//	
//КонецФункции // ОтправкаФайла()   
//
////******************************************************************************
//Процедура ВключитьВыполненныйЗапросВСписок(ВидЗапроса, Спис)
//	Если м_СпрЗапросы.НайтиПоРеквизиту("ВидЗапроса",ВидЗапроса,1) = 1 Тогда
//		Если Спис.НайтиЗначение(м_СпрЗапросы.ТекущийЭлемент()) = 0 Тогда
//		    Спис.ДобавитьЗначение(м_СпрЗапросы.ТекущийЭлемент());
//		КонецЕсли;
//	КонецЕсли;
//КонецПроцедуры

//******************************************************************************
// 
//
// Параметры: 
//	ИмяФайла - имя файла для выгрузки данных
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Основная процедура выгрузки данных для КПК
//
Процедура ВыгрузитьДанные(ИмяФайла = "", ОтветнаяВыгрузка = 0)	 
	
	ТипОбмена = 1;
	          
	//Если ОтветитьНаЗапрос = 1 Тогда
	//	ВидВыгрузки = СписВидВыгрузки.ПолучитьЗначение(СписВидВыгрузки.ТекущаяСтрока());
	//КонецЕсли;
	СпособОбмена 	= списСпособОбмена.ПолучитьЗначение(списСпособОбмена.ТекущаяСтрока());
	ИмяФайла 		= ВернутьИмяФайлаВыгрузки();
	
	СписВыпЗапросов = СоздатьОбъект("СписокЗначений"); 
	
	Текст = СоздатьОбъект("Текст");
	Текст.КодоваяСтраница(0); //Win кодировка

	м_СпрКпкДок = СоздатьОбъект("Справочник.КпкДокументы");
	//м_СпрЗапросы= СоздатьОбъект("Справочник.КпкЗапросы");
	м_ДокПоиска = СоздатьОбъект("Документ");
	м_ДокРн		= СоздатьОбъект("Документ.РасходнаяНакладная");
	м_ДокПн		= СоздатьОбъект("Документ.ПриходнаяНакладная");
	м_ДокИнв	= СоздатьОбъект("Документ.СличительнаяВедомость");
	
	////Таблица ТДопКлиенты - это список дополинтельных клиентов и их торговых точек вне плана;
	////либо должников, которых, возможно, нет в плане, но долги агент с них должен забрать,
	////либо внеплановых клиентов из маршрутов,
	////либо клиентов, созданных в КПК, которые выгружаются в КПК для подтверждения факта загрузки в ЦБД.
	//ТДопКлиенты = СоздатьОбъект("ТаблицаЗначений"); 
	//ТДопКлиенты.НоваяКолонка("Клиент","Справочник");
	//ТДопКлиенты.НоваяКолонка("Должник","Число",1,0); //признак, что клиент является должником
	//ТДопКлиенты.НоваяКолонка("ТоргТочка","Справочник");
	
	////таблица ТДопТовары используется, чтобы учесть при выгрузке прайса товары, выгруженные в 
	////в документах "Перемещение", "Реализация", "Инвентаризация".
	////Используется "таблица значений", а не "список значенй", т.к. 1С 7.7 работает со списками
	////медленней, чем с таблицами
	//ТДопТовары = СоздатьОбъект("ТаблицаЗначений");
	//ТДопТовары.НоваяКолонка("Товар","Справочник"); 
	
	//Результат = СформироватьТаблицуВыгружаемыхТиповЦен();  
	//
	//Если Результат = 0 Тогда
	//    ОповеститьОСобытии("Справочник ""Типы цен"" к выгрузке в мобильное устройство не подготовлен! Выгрузка номенклатуры не будет произведена!", "!");		
	//КонецЕсли;
	//           
	//КолФото = 0;     
	ОтветитьНаЗапрос = 0;

	Если ОтветитьНаЗапрос = 1 Тогда    		
	    //Результат = ВыгрузкаЗапросов(Текст, СписВыпЗапросов, ТДопКлиенты); 
		//ВыгрузкаПодтверждений(Текст);
		//ОтветитьНаЗапрос = 0;
	//ИначеЕсли ОтветнаяВыгрузка = 1 Тогда
	//	ОповеститьОСобытии("Выгрузка ответных данных...", "", 1);
	//		
	//	Если МобильноеПриложение = ВидАгентПлюсМТ Тогда 
	//		ВыгрузитьПодтверждения(rootNode, 1);			
	//	Иначе
	//		ВыгрузитьЗаголовокФайла(Текст);
	//		ВыгрузкаПодтверждений(Текст);
	//		ВыгрузкаКонстант(Текст, 1);  
	//	КонецЕсли;		
	Иначе   
		//ПланАгента = НайтиПланАгента();
		//Результат = ВыгрузкаИсторииПродаж(Текст, ВидВыгрузки, ПланАгента);
		//Если Результат = 0 Тогда
		//    Возврат;
		//ИначеЕсли Результат = 1 Тогда
		//	ВключитьВыполненныйЗапросВСписок("ИсторияПродаж", СписВыпЗапросов);
		//КонецЕсли;
		
		//Если ВидВыгрузки <> "История" Тогда //значит выгружаем всю оставшуюся информацию
			
			//ПланАгента = НайтиПланАгента();
				
			//Если МобильноеПриложение = ВидАгентПлюсМТ Тогда
				ВыгрузитьДанныеДляМобильнойТорговли();
			//Иначе 		
			//	
			//	ВыгрузкаСистемнойКонстантыСпискаТиповЦен(Текст);				
			//	ВыгрузкаСтруктурТаблиц(Текст);
			//	ВыгрузкаСкриптов(Текст);
			//	ВыгрузкаПеремещений(Текст,ТДопТовары);
			//	ВыгрузкаРасходныхНакладных(Текст, ТДопКлиенты, ТДопТовары);						
			//	ВыгрузкаМаршрутов(Текст, ПланАгента, ТДопКлиенты);	ВключитьВыполненныйЗапросВСписок("Маршруты", СписВыпЗапросов);
			//	ВыгрузкаВзаиморасчетов(Текст, ТДопКлиенты);			
			//	ВыгрузкаКлиентов(Текст, ПланАгента, ТДопКлиенты);				
			//	ВыгрузкаПеречислений(Текст);
			//	ВыгрузкаИнвентаризаций(Текст, ТДопТовары);
			//	ВыгрузкаНоменклатуры(Текст,ТДопТовары);				
			//	ВключитьВыполненныйЗапросВСписок("Номенклатура", СписВыпЗапросов);
			//	ВыгрузкаПерсональныхЦен(Текст, ПланАгента, ТДопКлиенты);
			//	ВыгрузкаОписанийКартинокТоваров(Текст, КолФото);
			//	ВыгрузкаФирм(Текст);
			//	ВыгрузкаСкладов(Текст);
			//	ВыгрузкаСертификатов(Текст);						
			//	ВыгрузкаПодтверждений(Текст);						
			//	ВключитьВыполненныйЗапросВСписок("Подтверждения", СписВыпЗапросов);
			//	//ВыгрузкаЗапросов(Текст, СписВыпЗапросов, ПланАгента, ТДопКлиенты);
			//	ВыгрузкаНумераторов(Текст);					// обязательно для ТСК (торговля с колес), но необязательно для СЗ (сбор заявок)
			//	ВыгрузкаСтартовыхНомеровНумераторов(Текст); // обязательно для ТСК, но необязательно для СЗ
			//	ВыгрузкаОписанийСкриптовПечати(Текст);  	// используется при "торговле с колес"
			//	ВыгрузкаОписанийСкриптовОтчетов(Текст); 	// используется при "торговле с колес"
			//	ВыгрузкаОписанийСкриптовЗаполненияДокументов(Текст);
			//	ВыгрузкаКонстант(Текст, 0, КолФото); 			
			//	ВыгрузкаСкидок(Текст);
			//	ВыгрузкаКомандКПК(Текст);
			//	ВыгрузкаФотографий(Текст);  			
			//	Если Константа.кпкИспользоватьПланыПродаж = 1 Тогда
			//		ВыгрузкаПлановПродаж(Текст);  
			//	КонецЕсли;			
			//	ВыгрузкаМатрицТоваров(Текст); 			
			//	ВыгрузкаСообщенийДляАгента(1, Текст);
			//	ВыгрузкаСообщенийДляАгента(0, Текст);
			//	Если флВыгружатьЗадания = 1 Тогда				
			//		ВыгрузкаЗаданийДляАгента(Текст);	
			//	КонецЕсли;                           			                                                			 
			//КонецЕсли;                           			                                                			
			
		//КонецЕсли;
	КонецЕсли;
	
	//Если МобильноеПриложение <> ВидАгентПлюсМТ Тогда	
	//	Текст.Записать(ИмяФайла);                      
	//КонецЕсли;
	
	//Если ВидВыгрузки = "История" Тогда //был вызов для выгрузки только истории продаж
	//	Возврат;
	//КонецЕсли;
	//
	//Если Результат <> 0 Тогда
	    ОкноСостояние("Данные выгружены.");
	//Иначе
	//	ОкноСостояние("Данные не выгружены!","!");
	//	Возврат;
	//КонецЕсли;
	
	Если флАрхив = 1 Тогда
		ОкноСостояние("Упаковка...");
		
		СтрАрхивКартинок = "";
		
		//Если флФайлыКартинок = 1 Тогда
		//	Если КолФото > 0 Тогда
		//		// Добавляем в архив картинки товаров
		//		ИмяВремКаталогаКартинок = КаталогВременныхФайлов() + "GoodsPictFrom1C\";				
		//		ПолныйПутьКАрхиву	    = ИмяВремКаталогаКартинок + "UDataFromCDB.zip";  				
		//		Если ФС.СуществуетФайл(ПолныйПутьКАрхиву) = 1 Тогда
		//			СтрАрхивКартинок = Т_ + "UDataFromCDB.zip" + Т_ + ПолныйПутьКАрхиву
		//		КонецЕсли; 				
		//	КонецЕсли;
		//КонецЕсли; 		
				
		ПутьИмяАрхива = Лев(ИмяФайла, СтрДлина(ИмяФайла) - 3) + "zip"; //файл вида <Код агента>.zip   
		
		Если МобильноеПриложение = ВидАгентПлюсМТ Тогда     		                                    
			ИмяВАрхиве = "FromCDB." + Прав(ИмяФайла, 3);
		Иначе
			ИмяВАрхиве = "From1C."  + Прав(ИмяФайла, 3);
		КонецЕсли;
		
		Пароль = "";//СокрП(АгентИнфо.КпкПарольZip); //А+ (релиз 15, 08.12.04)
		КПКОбъект.АрхУстПароль(Пароль);//если пароль пустой, то архив пакуется без пароля  
		
		Если ПустаяСтрока(СтрАрхивКартинок) = 0 Тогда
			Результат = КПКОбъект.АрхУпаковать(ПутьИмяАрхива, ИмяВАрхиве + Т_ + ИмяФайла + СтрАрхивКартинок);
		Иначе
			Результат = КПКОбъект.АрхУпаковать(ПутьИмяАрхива, ИмяВАрхиве + Т_ + ИмяФайла);
		КонецЕсли;
		
		Если Результат<>0 Тогда
		    ОкноСостояние(КПКОбъект.ErrDescription(Результат),"!");
			Возврат;
		Иначе
			ИмяФайла = ПутьИмяАрхива; //архив успешно записан
			//А+ { (релиз 15, 08.12.04)
			//Если ПустоеЗначение(Пароль) = 0 Тогда
			//    ОповеститьОСобытии("Подготовленный zip-архив защищен паролем!", "i", 1);
			//КонецЕсли;
			//А+ } (релиз 15, 08.12.04)
		КонецЕсли;
	КонецЕсли;        
	
	//Если МобильноеПриложение <> ВидАгентПлюсМТ Тогда     		                                    		
	//	Если Константа.КпкШифроватьДанные <> 0 Тогда //шифруем файл
	//		ШифрованныйФайл = ИмяФайла + ".crp"; //если файл зашифрован, то его расширение: ".dat.crp", иначе: ".dat"
	//		КПКОбъект.ШифрУстПароль(СокрП(Константа.КпкКриптоПароль));
	//		Результат = КПКОбъект.ЗашифроватьФайл(ИмяФайла, ШифрованныйФайл);
	//		Если Результат<>0 Тогда
	//			ОкноСостояние(КПКОбъект.ErrDescription(Результат),"!");
	//			Возврат;
	//		Иначе
	//			ФС.УдалитьФайл(ИмяФайла);
	//			ИмяФайла = ШифрованныйФайл; //файл успешно зашифрован
	//		КонецЕсли;
	//	КонецЕсли; 
	//КонецЕсли;

	ОкноСостояние();       
	
	//Если СпособОбмена = "ПрямоеПодключение" Тогда
	//    ОтправкаФайла(ИмяФайла, ОтветнаяВыгрузка);
	//КонецЕсли;
	
КонецПроцедуры // ВыгрузитьДанные()

//_____________________________________________________________________________
//Функция НайтиНепровПодчиненный(ДокОснование,ИскВидДок)
//	ПромДок = СоздатьОбъект("Документ");
//    ПромДок.ВыбратьПодчиненныеДокументы(,,ДокОснование);
//	Пока ПромДок.ПолучитьДокумент() = 1 Цикл
//	    Если ПромДок.Вид() = ИскВидДок Тогда
//	        Если (ПромДок.Проведен() = 0) И (ПромДок.ПометкаУдаления() = 0) Тогда
//				Возврат ПромДок.ТекущийДокумент();
//	        КонецЕсли;
//	    КонецЕсли;
//	КонецЦикла;
//	Возврат ПолучитьПустоеЗначение("Документ");
//КонецФункции //
//
//_____________________________________________________________________________
Функция НайтиДокументПоИдентификатору(Идент)
	Если м_СпрКпкДок.НайтиПоРеквизиту("Идентификатор",Идент,1) = 1 Тогда     		
	    Возврат м_СпрКпкДок.Документ;		
	Иначе                                              
		Возврат ПолучитьПустоеЗначение("Документ");		
	КонецЕсли;
КонецФункции

//_____________________________________________________________________________
//Функция ДокументГотовКПерезаписи(Док)
//	Результат = 0;
//	Если Док.Блокировка() = 1 Тогда
//	    ОповеститьОСобытии("Обновляемый документ " + АППредставлениеДок(Док) + " заблокирован!", "!", 1, Док);
//	Иначе
//		Если Док.Проведен() = 1 Тогда
//		    Док.СделатьНеПроведенным();
//			Если Док.Проведен() = 1 Тогда
//			    ОповеститьОСобытии("Не удалось отменить проведение у обновляемого документа!", "!", 1, Док);
//			Иначе
//				Результат = 1;
//			КонецЕсли;
//		Иначе
//			Результат = 1;
//		КонецЕсли;
//	КонецЕсли;
//	Возврат Результат;
//КонецФункции 
//
////_____________________________________________________________________________
//// Функция получает значение задания по переданным параметрам
//// Параметры:
//// 		ТипЗадания   - тип задания, в зависимости от которого нужно получить значение				
////		СтрРезультат - строковое значение результата, которое нужно преобразовать, 
//// 					   в зависимости от параметра ТипЗадания
////   
//Функция ВернутьНужноеЗначенияЗадания(ТипЗадания, СтрРезультат)
//	 
//	СписокДок = СоздатьОбъект("СписокЗначений"); 
//	
//	НужныйРезультат = "";
//	Если ТипЗадания = 101 Тогда	// сделать фото	
//		НужныйРезультат = СтрРезультат;
//	ИначеЕсли ТипЗадания = 102 Тогда // обменяться данными
//		НужныйРезультат = Число(СтрРезультат);			
//	ИначеЕсли ТипЗадания = 201 Тогда		
//		СписокДок.ДобавитьЗначение("ЗаказПокупателя");
//	ИначеЕсли ТипЗадания = 202 Тогда
//		СписокДок.ДобавитьЗначение("ПриходныйКассовыйОрдер");
//		СписокДок.ДобавитьЗначение("РасходныйКассовыйОрдер");
//	ИначеЕсли ТипЗадания = 203 Тогда
//		СписокДок.ДобавитьЗначение("кпкМерчендайзинг");
//	ИначеЕсли ТипЗадания = 204 Тогда
//		СписокДок.ДобавитьЗначение("кпкПосещение");
//	ИначеЕсли ТипЗадания = 205 Тогда
//		СписокДок.ДобавитьЗначение("РеализацияТоваровУслуг");
//	ИначеЕсли ТипЗадания = 207 Тогда
//		СписокДок.ДобавитьЗначение("ПеремещениеТоваров");
//	ИначеЕсли ТипЗадания = 208 Тогда
//		СписокДок.ДобавитьЗначение("ВозвратТоваровОтПокупателя");
//		СписокДок.ДобавитьЗначение("ПоступлениеТоваровУслуг");
//	ИначеЕсли ТипЗадания = 209 Тогда
//		СписокДок.ДобавитьЗначение("ОтчетОРозничныхПродажах");
//	ИначеЕсли ТипЗадания = 210 Тогда
//		СписокДок.ДобавитьЗначение("ИнвентаризацияТоваровНаСкладе");
//	КонецЕсли;
//	
//	Если НужныйРезультат = "" Тогда		
//		НужныйДок = НайтиДокументПоИдентификатору(СокрЛП(СтрРезультат));
//		Если НужныйДок.Выбран() = 1 Тогда  
//			НужныйРезультат = НужныйДок;		
//		КонецЕсли;
//	КонецЕсли;
//	
//	Возврат НужныйРезультат;
//		
//КонецФункции //ВернутьНужноеЗначенияЗадания()
//
//_____________________________________________________________________________
Функция XMLИнициализацияДок(ЭлДок, Док, ПредставлениеДокВКПК, Идентификатор, DocState, СредиПодчиненных = 0)
	
	Результат = 0;
	
	//Если МобильноеПриложение = ВидАгентПлюсМТ Тогда      
		Идентификатор 	= ЭлДок.ПолучитьАтрибут("GUID");
	//Иначе
	//	Идентификатор 	= ЭлДок.ПолучитьАтрибут("DocID");
	//КонецЕсли;
	
	//Если Док.Вид() = "СчетФактураВыданный" Тогда 
	//	//с указанным иднтификатором в ЦБД загружается документ "Реализация"
	//	//чтобы избежать дублирования иденитификатора, меняем местами внутри него 
	//	//последние две четверки цифр
	//	ПервЧастьИд = Лев(Идентификатор, СтрДлина(Идентификатор) - 8);
	//	ВторЧастьИд = Сред(Идентификатор, СтрДлина(Идентификатор) - 7, 4);
	//	ТретЧастьИд = Прав(Идентификатор, 4);
	//	Идентификатор = ПервЧастьИд + ТретЧастьИд + ВторЧастьИд;
	//КонецЕсли;
	
	ПромДок	= НайтиДокументПоИдентификатору(Идентификатор);
	
	Если МобильноеПриложение = ВидАгентПлюсМТ Тогда  		
		ДатаСозд  = ЭлДок.ПолучитьАтрибут("dt");
		DocState  = Число(ЭлДок.ПолучитьАтрибут("IsPost")); 
		//ИдФирмы	  = ЭлДок.ПолучитьАтрибут("A01");    
		
		ДатаСоздания  = Дата(ДатаВремяXMLВФормат1С(ДатаСозд, 1)); 
		ВремяСоздания = ДатаВремяXMLВФормат1С(ДатаСозд, 2);
	//Иначе
	//	ВремяСозд 		= ЭлДок.ПолучитьАтрибут("TimeCrt");       
	//	ДатаСоздания	= ИзвлечьДатуИзXML(ВремяСозд);
	//	ВремяСоздания	= ИзвлечьВремяИзXML(ВремяСозд);//если для реквизита "КпкВремяСоздания" используется 5 символов, то следует указать: Лев(ИзвлечьВремяИзXML(ВремяСозд),5)
	//
	//	DocState  = Число(ЭлДок.ПолучитьАтрибут("DocState")); 
	//	ИдФирмы	  = ЭлДок.ПолучитьАтрибут("FirmID");
	КонецЕсли;                                             	
	
	ПредставлениеДокВКПК = ПредставлениеДокВКПК + " от " + Строка(ДатаСоздания) + " " + ВремяСоздания+")";        
	
	//СпрФирм = СоздатьОбъект("Справочник.кпкФирмы");
	//Если СпрФирм.НайтиПоРеквизиту("Идентификатор",ИдФирмы,1) = 0 Тогда
	//	м_СпрФирм.НайтиЭлемент(глЗначениеПоУмолчанию("ОсновнаяФирма"));
	//Иначе
	//	м_СпрФирм.НайтиЭлемент(СпрФирм.ТекущийЭлемент().Ссылка);   		
	//КонецЕсли;    
		
	Если ПромДок.Выбран() = 0 Тогда //значит записываем новый документ  		
		Сообщить("Создание нового документа_XMLИнициализацияДок");
		
		Док.Новый();
		
		//Док.Автор = глПользователь;
		//                                                     		
		//Если МобильноеПриложение = ВидАгентПлюсМТ Тогда 
		//	Если Док.Вид() <> "ПКО" Тогда 
		//		НомерДок = ЭлДок.ПолучитьАтрибут("DocNumber");//номер документа в КПК
		//	ИначеЕсли Док.Вид() <> "РКО" Тогда                                       
		//		НомерДок = ЭлДок.ПолучитьАтрибут("A010");//номер документа в КПК
		//	КонецЕсли;
		//Иначе	
		//	Если Док.Вид() <> "СчетФактураВыданный" Тогда 
		//		НомерДок = ЭлДок.ПолучитьАтрибут("Num");//номер документа в КПК
		//	Иначе
		//		НомерДок = ЭлДок.ПолучитьАтрибут("SFNum");//номер документа в КПК
		//	КонецЕсли;	
		//КонецЕсли;
		//
		//Если ПустоеЗначение(НомерДок) = 0 Тогда //если у документа в КПК указан номер, пытаемся его присвоить документу в 1С			
		//	Если Константа.кпкИспользоватьАвтонумерациюДокументов = 0 Тогда			
		//		Док.НомерДок = НомерДок;
		//	Иначе   					   
		//		Если глЕстьРеквизитШапки("Фирма", Док.Вид()) = 1 Тогда 				
		//			ЮрЛицоФирмы = м_СпрФирм.ТекущийЭлемент().ЮрЛицо;
		//			ПрефиксЮрЛицаФирмы = ?(СокрЛП(ЮрЛицоФирмы.ПрефиксНомеровДокументов)="","0",СокрЛП(ЮрЛицоФирмы.ПрефиксНомеровДокументов));
		//			Док.УстановитьНовыйНомер(СокрЛП(Константа.ПрефиксИБ) + ПрефиксЮрЛицаФирмы);
		//			Док.ЮрЛицо = ЮрЛицоФирмы; 				
		//		КонецЕсли;				
		//	КонецЕсли;
		//КонецЕсли;
		Результат = 1;
	ИначеЕсли ПромДок.Вид() = Док.Вид() Тогда //иначе перезаписываем существующий документ
		Док.НайтиДокумент(ПромДок);
		
		//Если Док.Вид() = "кпкЗаданиеАгента" Тогда
		//	Если ДокументГотовКПерезаписи(Док) = 0 Тогда
		//		ОповеститьОСобытии("Документ " + ПредставлениеДокВКПК + " не обновлен!", "!", 1, Док);
		//		Результат = 0;  
		//	Иначе               
		//		Результат = 1;  
		//	КонецЕсли;          			
		//Иначе
			//Если флОбновлять = 0 Тогда
			//	ОповеститьОСобытии("Документ " + ПредставлениеДокВКПК + " уже был загружен ранее как документ " + 
			//					    АППредставлениеДок(Док.ТекущийДокумент()), "!", 1, Док);
			//	Результат = 0;
			//Иначе
				//ОписаниеДокумента = АППодробноеПредставлениеДок(Док.ТекущийДокумент());
				//Если Вопрос("Обновить документ " + ОписаниеДокумента + " согласно документа в КПК """
				//			+ ПредставлениеДокВКПК + """?","Да+Нет", 30) = "Да" Тогда
					Результат = 1;
				//КонецЕсли;
			//	Если Результат = 1 Тогда
			//		Если ДокументГотовКПерезаписи(Док) = 0 Тогда
			//			ОповеститьОСобытии("Документ " + ПредставлениеДокВКПК + " не обновлен!", "!", 1, Док);
			//			Результат = 0;
			//		КонецЕсли;
			//	КонецЕсли;
			//КонецЕсли;       
		//КонецЕсли; 
		
	Иначе
		ОповеститьОСобытии("В БД обнаружен идентификатор для документа """ + Док.Вид() + """, ссылающийся на документ другого вида!" +
							РазделительСтрок + "Требуется корректировка справочника ""Идентификаторы документов КПК"" - идентификатор: " +
							Идентификатор + " !", "!", 1, Док);       						
		ОповеститьОСобытии("Документ " + ПредставлениеДокВКПК + " не загружен!", "!!!", 1, Док);
		Результат = 0;
	КонецЕсли;

	Если Результат = 1 Тогда
		
		//ДокОснование = ПолучитьПустоеЗначение("Документ");
		//
		//Если МобильноеПриложение = ВидАгентПлюс15 Тогда  		
		//	ИдДокОсн = ЭлДок.ПолучитьАтрибут("MDocID");				
		//Иначе                                     
		//	Если (Док.Вид() = "ПКО") или (Док.Вид() = "РКО") Тогда
		//		ИдДокОсн  = ЭлДок.ПолучитьАтрибут("A09");					
		//	КонецЕсли;
		//КонецЕсли;		
		//
		//Если ПустоеЗначение(ИдДокОсн) = 0 Тогда //есть документ-основание
		//	ДокОснование = НайтиДокументПоИдентификатору(ИдДокОсн);
		//	Если ДокОснование.Выбран() = 0 Тогда
		//	    ОповеститьОСобытии("Не найден документ-основание к документу " + ПредставлениеДокВКПК + 
		//						   "(загружается как " + АППредставлениеДок(Док.ТекущийДокумент())+")!", "!", 1, Док);				
		//	КонецЕсли;
		//КонецЕсли;
		//
		//Если (СредиПодчиненных = 1) И (ДокОснование.Выбран() = 1) Тогда
		//	Если Док.Выбран() = 0 Тогда
		//		//ищем среди подчиненных документу-основанию непроведенный документ загружаемого вида
		//		ДокПодч = НайтиНепровПодчиненный(ДокОснование,Док.Вид());
		//		Если ДокПодч.Выбран() = 1 Тогда //есть у основания непроведенный документ загружаемого вида
		//		    Док.НайтиДокумент(ДокПодч);
		//			Если Док.ДатаДок <> РабочаяДата() Тогда
		//			    Док.ДатаДок = РабочаяДата();
		//			КонецЕсли;
		//			СредиПодчиненных = 2; //признак, что идет перезапись непроведенного документа найденного в дереве подчинения
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;
		//
		//Если глЕстьРеквизитШапки("КпкДатаСоздания", Док.Вид()) = 1 Тогда
		//	Док.КпкДатаСоздания 	= ДатаСоздания;
		//КонецЕсли;   
		//
		//Если глЕстьРеквизитШапки("КпкВремяСоздания", Док.Вид()) = 1 Тогда
		//	Док.КпкВремяСоздания	= ВремяСоздания;
		//КонецЕсли;  
		//
		//Комментарий = УбратьЗаменителиHTML(ЭлДок.ПолучитьАтрибут("Comment"));
		//Если ПустоеЗначение(Комментарий) = 0 Тогда
		//    Док.Комментарий = Комментарий;
		//КонецЕсли;
		//
		//Если глЕстьРеквизитШапки("ДокОснование", Док.Вид()) = 1 Тогда
		//	Док.ДокОснование = ДокОснование;
		//КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // XMLИнициализацияДок

////******************************************************************************
////функция возвращает новый номер документа, изменяя его первые цифры 
//Функция НовыйНомер(Код,Знач КодЗамены)
//
//	Перем НовыйКод,ДелНаЦел,Ост;
//
//	СтрокаСимволовЗаменыКодов="0123456789АБВГДЕЖЗИКЛМНОПРСТУФХЦЧШЩЫЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ";
//	ДлСтрокаСимволовЗаменыКодов=СтрДлина(СтрокаСимволовЗаменыКодов);
//	
//    НовыйКод="";
//	Пока 1=1 Цикл
//		ДелНаЦел	=	Цел(КодЗамены/ДлСтрокаСимволовЗаменыКодов);
//	    Ост			=	КодЗамены % ДлСтрокаСимволовЗаменыКодов ;
//		КодЗамены	=	ДелНаЦел * ДлСтрокаСимволовЗаменыКодов;
//		НовыйКод	=	Сред(СтрокаСимволовЗаменыКодов,Ост+1,1) + НовыйКод;
//		Если ДелНаЦел = 0 Тогда
//		    Прервать;
//		КонецЕсли;
//	КонецЦикла;   
//	
//	Возврат НовыйКод + Прав(Код, СтрДлина(Код)-СтрДлина(НовыйКод));
//	
//КонецФункции
//
////******************************************************************************
////Функция записывает новый документ, если возникает конфликт номеров документов,
////то номер автоматически корректируется
////Возвращает 1, если документ успешно записан
//Функция ЗаписьДокументаСКоррекциейНомера(Док)
//    
//	НомерДок  = Док.НомерДок; 
//	ВидДок    = Док.Вид();
//	ДатаДок   = Док.ДатаДок;
//	КодЗамены = 0;
//	
//	Пока м_ДокПоиска.НайтиПоНомеру(НомерДок, ДатаДок, ВидДок)=1 Цикл
//	    НомерДок  = НовыйНомер(НомерДок,КодЗамены);
//		КодЗамены = КодЗамены + 1;
//	КонецЦикла;
//	
//	Если КодЗамены<>0 Тогда //значит был обнаружен документ с таким же номером
//		СтарыйНомер  = Док.НомерДок;
//		Док.НомерДок = НомерДок;
//	КонецЕсли;
//	
//	Попытка 
//		Если ВыполнитьОперациюДляОбъекта(Док, "запись") = 0 Тогда 						
//			Возврат 0;			
//		КонецЕсли;	
//
//		Если КодЗамены<>0 Тогда
//			Стр = Шаблон("Произведена замена номера у документа [ВидДок] № [СтарыйНомер] от [Док.ДатаДок] на № [Док.НомерДок].");
//			ОповеститьОСобытии(Стр, "!", 1, Док);
//		КонецЕсли;
//		Возврат 1;
//	Исключение
//		Стр = ОписаниеОшибки(); 
//		ОповеститьОСобытии(Стр, "!");
//		Возврат 0;
//	КонецПопытки;  
//	
//КонецФункции //ЗаписьДокументаСКоррекциейНомера()
//
//_____________________________________________________________________________
Функция ЗаписьДокумента(Док, Идентификатор, DocState, ЭлДок)
	
	Перезапись = Док.Выбран();
	
	//Если (Перезапись = 0) и (Константа.кпкИспользоватьАвтонумерациюДокументов = 0) Тогда
	//	//Если возникнет конфликт номеров при записи документа с тем же номером, что и в КПК,
	//	//то номер документа будет автоматически скорректирован (по возможности с сохранением
	//	//числовой концовки номера.
	//	//Эта функция пытается записать документ, но проверяет конфликт номеров и корректирует
	//	//номер, если такой конфликт возник.
	//	Если ЗаписьДокументаСКоррекциейНомера(Док) = 0 Тогда 
	//	    Возврат 0;
	//	КонецЕсли;
	//Иначе
		Если ВыполнитьОперациюДляОбъекта(Док, "запись") = 0 Тогда 						
			Возврат 0;			
		КонецЕсли;	
	//КонецЕсли;   	
	//
	//Категория = ПолучитьПустоеЗначение("Справочник.кпкКатегорииДокументов");
	//
	//Если МобильноеПриложение = ВидАгентПлюсМТ Тогда
	//	
		ДатаСозд 	= ЭлДок.ПолучитьАтрибут("dt");
	//	ИдКатегории = ЭлДок.ПолучитьАтрибут("A012");
	//	
		ДатаСоздания = Дата(ДатаВремяXMLВФормат1С(ДатаСозд, 1)); 
		ВремяСоздания = ДатаВремяXMLВФормат1С(ДатаСозд, 2);		
	//	
	//	СпособСоздания = Перечисление.кпкСпособыСозданияВКПК.Вручную; 
	//	
	//	Категория = ПолучитьОбъектПоИдентификатору("кпкКатегорииДокументов",  ИдКатегории);  
	//	
	//Иначе
	//	
	//	ВремяСозд 		= ЭлДок.ПолучитьАтрибут("TimeCrt");
	//	ДатаСоздания	= ИзвлечьДатуИзXML(ВремяСозд);
	//	ВремяСоздания	= ИзвлечьВремяИзXML(ВремяСозд);//если для реквизита "КпкВремяСоздания" используется 5 символов, то следует указать: Лев(ИзвлечьВремяИзXML(ВремяСозд),5)
	//	
	//	ГПСШирота		= Число(ЭлДок.ПолучитьАтрибут("GPSLatitude"));
	//	ГПСДолгота		= Число(ЭлДок.ПолучитьАтрибут("GPSLongitude"));
	//	
	//	СтрСпособСоздания = СокрЛП(ЭлДок.ПолучитьАтрибут("ModeCrt")); 
	//	
	//	Если СтрСпособСоздания = "User" Тогда
	//		СпособСоздания = Перечисление.кпкСпособыСозданияВКПК.Вручную;
	//	ИначеЕсли СтрСпособСоздания = "Copy" Тогда
	//		СпособСоздания = Перечисление.кпкСпособыСозданияВКПК.Скопирован;
	//	ИначеЕсли СтрСпособСоздания = "Sub" Тогда
	//		СпособСоздания = Перечисление.кпкСпособыСозданияВКПК.ВведенНаОсновании;
	//	ИначеЕсли СтрСпособСоздания = "Load" Тогда
	//		СпособСоздания = Перечисление.кпкСпособыСозданияВКПК.ЗагруженИзЦБД;
	//	КонецЕсли; 
	//	
	//КонецЕсли;

	ПромДок = НайтиДокументПоИдентификатору(Идентификатор);
	Если (Док.Выбран() = 1) И (ПромДок.Выбран() = 0) Тогда  	
		м_СпрКпкДок.Новый();
		м_СпрКпкДок.Идентификатор 	   = Идентификатор;
		м_СпрКпкДок.Документ 		   = Док.ТекущийДокумент();
		м_СпрКпкДок.кпкДатаСоздания    = ДатаСоздания;
		м_СпрКпкДок.кпкВремяСоздания   = ВремяСоздания;
		м_СпрКпкДок.АгентАвтор 		   = ВыбАгент;    
		м_СпрКпкДок.ДатаДок   		   = Док.ТекущийДокумент().ДатаДок;
		//м_СпрКпкДок.ГПСШирота 		   = ГПСШирота;
		//м_СпрКпкДок.ГПСДолгота 		   = ГПСДолгота; 
		//м_СпрКпкДок.СпособСозданияВКПК = СпособСоздания; 
		//м_СпрКпкДок.Категория 		   = Категория;
		Если ВыполнитьОперациюДляОбъекта(м_СпрКпкДок, "запись") = 0 Тогда 						
			Возврат 0;			
		КонецЕсли;		
	КонецЕсли;
	
	ОповеститьОСобытии(?(Перезапись = 0, "Создан","Перезаписан") + " документ " +  
		       		   АППредставлениеДок(Док.ТекущийДокумент()) + ?(DocState <> 1," (в КПК не проведен)", ""), "i", 1, Док);
   
	МожноПроводить = 1;
	Если глЕстьРеквизитШапки("Клиент", Док.Вид()) = 1 Тогда
		Если Док.Клиент.Выбран() = 0 Тогда
			ОповеститьОСобытии("В документе " + АППредставлениеДок(Док.ТекущийДокумент()) + " не указан клиент!", "!", 1, Док);
			МожноПроводить = 0;
		КонецЕсли;
	КонецЕсли;                                                    
	
	Если ИспТочек = 1 Тогда
		Если глЕстьРеквизитШапки("кпкТоргТочка", Док.Вид()) = 1 Тогда
			Если Док.кпкТоргТочка.Выбран()=0 Тогда
				ОповеститьОСобытии("В документе " + АППредставлениеДок(Док.ТекущийДокумент()) + " не указана торговая точка!", "!", 1, Док);
			КонецЕсли;
		КонецЕсли;             
	КонецЕсли;  	

	Если Док.Выбран() = 1 Тогда
	    ЗаписьЖурналаРегистрации("КПК: Загружен документ","Документ","Запись",Док.ТекущийДокумент(), 3);
	КонецЕсли;
	
	Если (МожноПроводить = 1) И (Док.Выбран() = 1)  Тогда //и (флПроводитьДок = 1)    	       				
		Если ВыполнитьОперациюДляОбъекта(Док, "проведение") = 0 Тогда
			ОповеститьОСобытии("Документ " + АППредставлениеДок(Док.ТекущийДокумент()) + " не удалось провести!", "!", 1, Док);
		КонецЕсли;  	
	КонецЕсли;
	
	Возврат Док.Выбран();
	
КонецФункции //ЗаписьДокумента()     
//
////_____________________________________________________________________________
////Загрузка документа "СчетаФактура" в ЦБД
////Создание в КПК документов такого вида возможно только в случае "Торговли с колес"
////Документ на самом деле в КПК не создается, а регистрируется как дополнение к документу
////реализации (при этом для счета-фактуры в КПК генерируются номера)
//Функция XMLЗагрузкаСчетаФактуры(Эл, ДокОсн)
//	Док = СоздатьОбъект("Документ.СчетФактураВыданный");;
//	
//	ПредставлениеДокВКПК = "Счет-фактура"; Идентификатор = ""; DocState = 0;
//	
//	Если XMLИнициализацияДок(Эл, Док, ПредставлениеДокВКПК, Идентификатор, DocState) = 0
//	Тогда
//	    Возврат 0;
//	КонецЕсли;
//	
//	Перезапись = Док.Выбран();
//	
//	//Реквизиты берем не из XML, а из документа-основания - т.е. из загруженного до этого
//	//документа "Реализация"
//	
//	Док.ДокОснование = ДокОсн;
//	Док.Фирма = ДокОсн.Фирма;
//	
//	Док.ДатаДок 	= 	ДокОсн.ДатаДок;
//	//Док.Агент		=	ВыбАгент;
//	Док.АвтоВремяТекущее();
//	Док.Контрагент	= 	ДокОсн.Контрагент;
//	
//	  
//	//Если требуется перенос табличной части в счет-фактуру из документа-основания,
//	//то потребуется следующий код:
//	//заполняем табличную часть
//	//Если Док.КоличествоСтрок() <> 0 Тогда //если документ перезаписывается
//	//    Док.УдалитьСтроки();
//	//КонецЕсли;
//	
//	//ДокОсн.ВыбратьСтроки();
//	//Пока ДокОсн.ПолучитьСтроку() = 1 Цикл
//	//   Док.НоваяСтрока();
//	//   ...
//	//КонецЦикла;
//	
//	Возврат ЗаписьДокумента(Док, Идентификатор, DocState, Эл);
//	
//КонецФункции //XMLЗагрузкаСчетаФактуры(Эл, ДокОсн)    
//
//
////_____________________________________________________________________________
//
//// ЗаполнениеПоИтогам()
////
//// Параметры:
////  Нет
////
//// Возвращаемое значение:
////  Нет
////
//// Описание:
////  Заполняет табличную часть по документу-основанию (Заявка), если он указан,
////  остатками по данной Заявке (недоотгруженными товарами), если основания нет,
////  то заполняется всеми остатками Заявок по данному договору с данной фирмой
////  (или группой фирм, в зависимости от настройки контроля остатков).
////
//Функция ЗаполнениеПоИтогам(Док)
//	
//	// При заполнении на основании Заявки цены, суммы и скидки надо брать из основания
//	ТаблицаДокумента = СоздатьОбъект("ТаблицаЗначений");
//	Док.ДокОснование.ВыгрузитьТабличнуюЧасть(ТаблицаДокумента);
//	
//	ВалютаОсн  	 = Док.ДокОснование.Валюта;
//	КурсОсн      = Док.ДокОснование.Курс;
//	КратностьОсн = Док.ДокОснование.Кратность;  	
//	
//	Док.УдалитьСтроки();
//	
//	ТаблицаДокумента.ВыбратьСтроки();  
//	
//	Пока ТаблицаДокумента.ПолучитьСтроку()=1 Цикл
//		
//		ТекНоменклатура = ТаблицаДокумента.Номенклатура;
//		
//		Отпустить = ТаблицаДокумента.Количество/ТаблицаДокумента.Коэффициент;
//		
//		Если (ТекНоменклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга)
//		или (ТекНоменклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Работа) Тогда		  
//			Продолжить;
//		КонецЕсли;       
//		
//		Док.НоваяСтрока();
//		Док.СтавкаНДС 	= ТаблицаДокумента.СтавкаНДС;
//		Док.СтавкаНП 	= ТаблицаДокумента.СтавкаНП;
//		Док.Номенклатура= ТаблицаДокумента.Номенклатура;
//		Док.Единица 	= ТаблицаДокумента.Единица;
//		Док.Коэффициент = ТаблицаДокумента.Коэффициент;
//		Док.Количество 	= Отпустить;
//		Док.Цена 		= глПересчет(ТаблицаДокумента.Цена, ВалютаОсн, КурсОсн, Док.Валюта, Док.Курс, КратностьОсн, Док.Кратность);
//		ВремСумма 		= ТаблицаДокумента.Сумма * Док.Количество / ТаблицаДокумента.Количество; // для учета скидок в документе основании
//		Док.Сумма		= глПересчет(ВремСумма, ВалютаОсн, КурсОсн, Док.Валюта, Док.Курс, КратностьОсн, Док.Кратность);
//		
//		глПересчетТаблЧасти(Док,"Сумма");	
//		
//	КонецЦикла; // по строкам основания
//	
//	ОснованиеСумма = Док.ДокОснование.Итог("Сумма");
//	Док.СуммаВзаиморасчетов	= ?(ОснованиеСумма = 0, 0, Док.ДокОснование.СуммаВзаиморасчетов * Док.Итог("Сумма") / ОснованиеСумма);
//		
//	Если Док.КоличествоСтрок() = 0 Тогда
//		Возврат "Все заказанные товары либо получены, либо их нет в наличии!";
//	КонецЕсли;
//	
//	Возврат "";	// успешное завершение
//	
//КонецФункции // ЗаполнениеПоИтогам()
//
////_____________________________________________________________________________
////Создание реализации на основании заявки
//Функция СоздатьРеализациюНаОснованииЗаявки(ДокОснование)   
//	
//	Док = м_ДокРН;
//	
//	Если ДокОснование.Выбран() = 0 Тогда
//		Предупреждение("Документ-основание не выбран!",10);
//		Возврат 0;
//	КонецЕсли; 
//	
//	парДок = ДокОснование.ТекущийДокумент();
//	
//	ТекстЗапроса = 
//	"//{{ЗАПРОС(Документы по заявке) 
//	|ОбрабатыватьДокументы все;
//	|ТекДок = Документ.Реализация.ТекущийДокумент;
//	|ДокОсн =  Документ.Реализация.ДокОснование; 
//	|Группировка ТекДок; 
//	|Группировка ДокОсн;
//	|Условие(ДокОсн = парДок);
//	|"//}}ЗАПРОС   
//	;              
//	ЗапросДок = СоздатьОбъект("Запрос"); //запрос получения резервов товаров по заявке в основании документа
//	Если ЗапросДок.Выполнить(ТекстЗапроса) = 0 Тогда
//		Возврат 0;
//	КонецЕсли;	 	           
//
//	Если ЗапросДок.Группировка(1) = 1 Тогда	  
//		Док = СоздатьОбъект("Документ.Реализация");		
//		Если Док.НайтиДокумент(ЗапросДок.ТекДок) = 0 Тогда
//			Возврат 0;			
//		КонецЕсли;		
//	Иначе
//		Док.Новый();    
//	КонецЕсли;  
//	
//	Док.КодОперации	 = Перечисление.КодыОпераций.Продажа; 
//		
//	глЗаполнитьШапкуНаОсн(Док, ДокОснование.ТекущийДокумент());
//	
//	Док.ДатаОплаты = глБанковскаяДата(Док.ДатаДок, Док.Договор.ГлубинаКредита);
//	
//	// По умолчанию выписываем в той же валюте и по тому же курсу, что и документ-основание
//	Док.Валюта    	 = ДокОснование.Валюта;
//	Док.Курс      	 = ДокОснование.Курс;
//	Док.Кратность 	 = ДокОснование.Кратность;
//	Док.Фирма     	 = ДокОснование.Фирма;  
//	Док.кпкТоргТочка = ДокОснование.кпкТоргТочка;
//		
//	// нужно заполнить склад по умолчанию 	
//	Если АгентИнфо.ОсновнойСклад.Выбран() = 1 Тогда		
//		Док.Склад = АгентИнфо.ОсновнойСклад;		
//	Иначе 			
//		ВремСклад = глЗначениеПоУмолчанию("ОсновнойСклад");
//		Если ВремСклад.РозничныйСклад = 0 Тогда
//			Док.Склад = ВремСклад;
//		КонецЕсли;			
//	КонецЕсли; 
//	
//	Результат = ЗаполнениеПоИтогам(Док);
//	Если ПустоеЗначение(Результат) = 0 Тогда
//		ОповеститьОСобытии(Результат);
//		Возврат 0;
//	Иначе
//		Попытка         
//			
//			Если ВыполнитьОперациюДляОбъекта(Док, "запись") = 0 Тогда 							
//				Возврат 0;			
//			КонецЕсли;	
//						
//			Если (Док.Выбран() = 1) И (флПроводитьДок = 1) Тогда
//				Если ВыполнитьОперациюДляОбъекта(Док, "проведение") = 0 Тогда
//					ОповеститьОСобытии("Документ " + АППредставлениеДок(Док.ТекущийДокумент()) + " не удалось провести!", "!", 1, Док);
//				КонецЕсли;
//			КонецЕсли;
//			
//			ОповеститьОСобытии("Создан документ " + АППредставлениеДок(Док.ТекущийДокумент()) +  
//							   " на основании документа " + АППредставлениеДок(Док.ДокОснование), "i", 1, Док);    
//			
//		Исключение
//			Возврат 0;
//		КонецПопытки;
//	КонецЕсли;   	
//
//КонецФункции //СоздатьРеализациюНаОснованииЗаявки()    
//
////_____________________________________________________________________________
////Загрузка документа "Реализация" в ЦБД
////Создание в КПК документов такого вида возможно только в случае "Торговли с колес"
//Функция XMLЗагрузкаРеализации(Эл, ПередвижнойСклад, ЭтоЗаявка)
//
//	Док = СоздатьОбъект("Документ.Реализация");;
//	СпрСкл = СоздатьОбъект("Справочник.Склады");
//	
//	ПредставлениеДокВКПК = "Реализация"; Идентификатор = ""; DocState = 0;
//	
//	Если XMLИнициализацияДок(Эл, Док, ПредставлениеДокВКПК, Идентификатор, DocState) = 0
//	Тогда
//	    Возврат 0;
//	КонецЕсли;
//	
//	Перезапись = Док.Выбран();
//	
//	Если ПередвижнойСклад.Выбран() = 0 Тогда
//	    СкладАгента = АгентИнфо.ПередвижнойСклад;	
//	Иначе
//		СкладАгента = ПередвижнойСклад;
//	КонецЕсли;
//	
//	ИдФирмы	  	= Эл.ПолучитьАтрибут("FirmID");
//	
//	НомерСчф	= Эл.ПолучитьАтрибут("SFNum"); //номер счета-фактуры (если номер пустой - счет-фактура не создавалась)
//	
//	Если ЭтоЗаявка = 1 Тогда 				
//		Если АгентИнфо.ОсновнойСклад.Выбран() = 1 Тогда
//			Док.Склад = АгентИнфо.ОсновнойСклад;		
//		Иначе 			
//			ВремСклад = глЗначениеПоУмолчанию("ОсновнойСклад");
//			Если ВремСклад.РозничныйСклад = 0 Тогда
//				Док.Склад = ВремСклад;
//			КонецЕсли;			
//		КонецЕсли;   		
//	Иначе
//		Док.Склад = СкладАгента; 
//	КонецЕсли;	
//
//	Док.КодОперации = Перечисление.КодыОпераций.Продажа;
//	
//	ВидОплаты = Число(Эл.ПолучитьАтрибут("PmntType")); 
//			// 1 - наличными
//			// 2 - безналичными
//			// 3 - взаимозачет (как описывали в процедуре "ВыгрузкаДопРеквизитов(Текст)" )
//	// Добавить
//	//Если ВидОплаты = 1 Тогда
//	//    Док.ВидОплаты = Перечисление.ВидыОплат.Наличными
//	//ИначеЕсли (ВидОплаты = 2) Тогда
//	//	Док.ВидОплаты = Перечисление.ВидыОплат.Безнал;
//	//ИначеЕсли (ВидОплаты = 3) Тогда
//	//	Док.ВидОплаты = Перечисление.ВидыОплат.Взаимозачет;
//	//КонецЕсли;                
//	
//	НДССверху = 1; 	 
//
//	УстановитьТипЦеныВДокументе(Эл, Док);  
//	
//	НДССверху  = Док.ТипЦен.ЦенаВклНДС;
//	
//	Если НДССверху = 1 тогда
//    	Док.СуммаВклНДС = 0;         
//    Иначе
//        Док.СуммаВклНДС = 1;          
//    КонецЕСли;   
//	
//	Док.ДатаДок 	= 	РабочаяДата();	
//	Док.АвтоВремяТекущее();  
//	
//	УстановитьРеквизитыДокумента(Эл, Док);    
//	
//	СкидкаДок = Число(Эл.ПолучитьАтрибут("Discount"));
//	
//	Если СкидкаДок<>0 Тогда
//		Скидка = ВернутьСкидку(СкидкаДок);
//		Если ПустоеЗначение(Скидка) = 1 Тогда
//			ОповеститьОСобытии("В документе " + ПредставлениеДокВКПК + "указана скидка " +
//							   Строка(СкидкаДок) + "%, отсутствующая в справочнике ""Скидки""!", "!", 1, Док);
//		Иначе
//			Док.Скидка = Скидка;
//		КонецЕсли;             
//	КонецЕсли;
//	   
//	// Если заявка загружается в качестве реализации
//	Если ЭтоЗаявка = 1 Тогда
//		ВремСклад	= глЗначениеПоУмолчанию("ОсновнойСклад");
//		Если ВремСклад.РозничныйСклад = 0 Тогда
//			Док.Склад 		= ВремСклад	// нужно заполнить склад по умолчанию
//		КонецЕсли; 		
//		Док.ДатаОплаты		= Док.ДатаДок + 7; // проставляем по умолчанию дату оплаты + 7 дней		
//	Иначе                                                                		
//		Док.Склад 			= СкладАгента;
//		Док.ДатаОплаты		= ИзвлечьДатуИзXML(Эл.ПолучитьАтрибут("PayDate"));
//		Док.УчитыватьНДС    = Число(Эл.ПолучитьАтрибут("UseVAT"));
//	КонецЕсли;
//	              
//	//заполняем табличную часть
//	Если Док.КоличествоСтрок() <> 0 Тогда //если документ перезаписывается
//	    Док.УдалитьСтроки();
//	КонецЕсли;
//	
//	//Цикл получения дополнительных реквизитов
//	Выборка = Эл.ВыбратьУзлы("Attr");
//	Для Сч = 0 По Выборка.КоличествоУзлов() - 1 Цикл
//		ВнутрЭл	= Выборка.ПолучитьУзел(Сч);
//		ИдРекв 	= ВнутрЭл.ПолучитьАтрибут("AID");
//		ЗначРекв= ВнутрЭл.ПолучитьАтрибут("Val");
//		//Если ИдРекв = "DOSTAVKA" Тогда 		//вид доставки
//		//    Код = 	Число(ЗначРекв);
//		//	Если (Код > 0) И (Код <= Перечисление.ВидыДоставки.КоличествоЗначений()) Тогда
//		//	    Док.ВидДоставки = Перечисление.ВидыДоставки.ЗначениеПоНомеру(Код);
//		//	КонецЕсли;
//		//ИначеЕсли ИдРекв = "DOSTAVLEN" Тогда   //напоминание о распечатке отчета для клиента
//		//	Док.флДоставлен = Число(ЗначРекв);
//		//ИначеЕсли ИдРекв = "ADRES" Тогда    //альтернативный адрес доставки
//		//	Док.АльтАдресДоставки = ЗначРекв;
//		//КонецЕсли;
//	КонецЦикла;
//	
//	//Цикл получения строк
//	Выборка = Эл.ВыбратьУзлы("Line");
//	Для Сч = 0 По Выборка.КоличествоУзлов() - 1 Цикл
//		ВнутрЭл	= Выборка.ПолучитьУзел(Сч);
//		Док.НоваяСтрока();
//		ИдТовара = ВнутрЭл.ПолучитьАтрибут("GdsID");
//		СпрТов = СоздатьОбъект("Справочник.кпкНоменклатура");
//		Если СпрТов.НайтиПоРеквизиту("Идентификатор",ИдТовара,1) = 0 Тогда
//		    ОповеститьОСобытии("Не удалось найти товар с идентификатором " + ИдТовара, "!");
//		КонецЕсли;
//		Товар 			= СпрТов.ТекущийЭлемент().Ссылка;
//		Док.Номенклатура= Товар;
//		Док.Количество 	= Число(ВнутрЭл.ПолучитьАтрибут("Amnt"));		
//		Док.Цена	    = Число(ВнутрЭл.ПолучитьАтрибут("Price"));		
//		Док.Сумма	    = Число(ВнутрЭл.ПолучитьАтрибут("Sum"));  
//		Если Док.УчитыватьНДС = 1 Тогда              
//			Док.СуммаНДС  = Число(ВнутрЭл.ПолучитьАтрибут("VAT"));
//			Док.СтавкаНДС = Док.Номенклатура.СтавкаНДС;
//		КонецЕсли; 		  
//		
//		//Если включен режим работы с единицами измерения в табличной части документа
//		Если ЭтоЗаявка = 1 Тогда 			      			                         			
//			Если РежимЕд = 1 Тогда
//				UCode = ВнутрЭл.ПолучитьАтрибут("UCode"); 
//				UDim  = ВнутрЭл.ПолучитьАтрибут("UDim");
//				Док.Единица 	= ПолучитьЕдиницуПоКоду(Товар, Число(UCode));
//				Док.Коэффициент = UDim;
//			Иначе
//				Док.Единица 	= Товар.БазоваяЕдиница;		//с КПК количество поступает всегда в базовых единицах
//				Док.Коэффициент = Док.Единица.Коэффициент;
//			КонецЕсли;
//		Иначе
//			Док.Единица 	= Товар.БазоваяЕдиница;		//с КПК количество поступает всегда в базовых единицах
//			Док.Коэффициент = Док.Единица.Коэффициент; 			
//		КонецЕсли;
//		
//	КонецЦикла;    
//	
//	ПересчетСуммыВзаиморасчетов(Док);
//	
//	Результат = ЗаписьДокумента(Док, Идентификатор, DocState, Эл);
//	
//	Если (Результат = 1) И (ПустоеЗначение(НомерСчф) = 0) Тогда
//	    //нужно записать и счет-фактуру
//		Возврат XMLЗагрузкаСчетаФактуры(Эл, Док.ТекущийДокумент());
//	Иначе
//		Возврат Результат;
//	КонецЕсли;
//	
//КонецФункции // XMLЗагрузкаРеализации()
//
////_____________________________________________________________________________
////Загрузка документа "Заявка" в ЦБД
//Функция XMLЗагрузкаЗаявки(Эл, ПередвижнойСклад)
//	
//	РежимЗагрузки = Константа.кпкРежимЗагрузкиЗаявок;
//	// 1 - загружать в док. "Заявка";
//	// 2 - загружать в док. "Реализация";
//	// 3 - создавать на основании "Заявки" док. "Реализация"
//	   
//	Если РежимЗагрузки = 2 Тогда           
//		Если XMLЗагрузкаРеализации(Эл, ПередвижнойСклад, 1) = 1 Тогда 				
//			Возврат 1;
//		Иначе
//			Возврат 0;
//		КонецЕсли;
//	Иначе
//		Док = м_ДокЗв;          			
//	КонецЕсли;       		                                     
//	
//	ПредставлениеДокВКПК = "Заявка"; Идентификатор = ""; DocState = 0;
//	 
//	Если XMLИнициализацияДок(Эл, Док, ПредставлениеДокВКПК, Идентификатор, DocState) = 0
//	Тогда
//	    Возврат 0;
//	КонецЕсли;
//	   
//	ВидОперации = Константа.кпкВидОперацииЗаявок;
//	
//	Если ПустоеЗначение(ВидОперации) = 1 Тогда
//		Док.ВидОперации = Перечисление.ВидыОперацийЗаявок.Неподтвержденная;
//	Иначе
//		Док.ВидОперации = ВидОперации;
//	КонецЕсли;                       
//	
//	Если Док.ВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад Тогда
//		Если АгентИнфо.ОсновнойСклад.Выбран()= 1 Тогда
//			Док.Склад = АгентИнфо.ОсновнойСклад;	    		
//		Иначе
//			ОповеститьОСобытии("У агента " + ВыбАгент + " не указан основной склад. Для документа " + 
//					 		   ПредставлениеДокВКПК + " не будет заполнено значение склада!", "!", 1, Док);
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	ВидОплаты = Число(Эл.ПолучитьАтрибут("PmntType")); 
//			// 1 - наличными
//			// 2 - безналичными
//			// 3 - взаимозачет (как описывали в процедуре "ВыгрузкаДопРеквизитов(Текст)")
//	// Добавить
//	//Если ВидОплаты = 1 Тогда
//	//    Док.ВидОплаты = Перечисление.ВидыОплат.Наличными
//	//ИначеЕсли (ВидОплаты = 2) Тогда
//	//	Док.ВидОплаты = Перечисление.ВидыОплат.Безнал;
//	//ИначеЕсли (ВидОплаты = 3) Тогда
//	//	Док.ВидОплаты = Перечисление.ВидыОплат.Взаимозачет; 	
//	//КонецЕсли;                                 
//	
//	НДССверху = 1;
//	
//	УстановитьТипЦеныВДокументе(Эл, Док);   
//
//	НДССверху  = Док.ТипЦен.ЦенаВклНДС;
//	
//	Если НДССверху = 1 тогда
//    	Док.СуммаВклНДС = 0;         
//    Иначе
//        Док.СуммаВклНДС = 1;          
//    КонецЕСли;    
//	
//	Док.ДатаДок 	= 	РабочаяДата();	
//	Док.АвтоВремяТекущее();
//	
//	УстановитьРеквизитыДокумента(Эл, Док); 
//	
//	СкидкаДок = Число(Эл.ПолучитьАтрибут("Discount"));
//	
//	Если СкидкаДок<>0 Тогда
//		Скидка = ВернутьСкидку(СкидкаДок);
//		Если ПустоеЗначение(Скидка) = 1 Тогда
//			ОповеститьОСобытии("В документе " + ПредставлениеДокВКПК + "указана скидка " + 
//					 		   Строка(СкидкаДок) + "%, отсутствующая в справочнике ""Скидки""!", "!", 1, Док);
//		Иначе
//			Док.Скидка = Скидка;
//		КонецЕсли;             
//	КонецЕсли;
//	
//	Док.ДатаОплаты	=	Док.ДатаДок + 7; //В этой конфигурации для простоты всем клиентам по умолчанию установлен срок оплаты 7 дней
//	
//	ВремяДост 			= Эл.ПолучитьАтрибут("TimeDlv");
//	Док.ДатаОтгрузки 	= ИзвлечьДатуИзXML(ВремяДост);
//	Док.кпкВремяОтгрузки	= СтрЗаменить(Прав(ВремяДост,5),"-",":"); 
//	
//	//заполняем табличную часть
//	Если Док.КоличествоСтрок() <> 0 Тогда //если документ перезаписывается
//	    Док.УдалитьСтроки();
//	КонецЕсли;
//	
//	//Цикл получения дополнительных реквизитов
//	Выборка = Эл.ВыбратьУзлы("Attr");
//	Для Сч = 0 По Выборка.КоличествоУзлов() - 1 Цикл
//		ВнутрЭл	= Выборка.ПолучитьУзел(Сч);
//		ИдРекв = ВнутрЭл.ПолучитьАтрибут("AID");
//		//Если ИдРекв = "DOSTAVKA" Тогда 		//вид доставки
//		//    Код = 	Число(ВнутрЭл.ПолучитьАтрибут("Val"));
//		//	Если (Код > 0) И (Код <= Перечисление.ВидыДоставки.КоличествоЗначений()) Тогда
//		//	    Док.ВидДоставки = Перечисление.ВидыДоставки.ЗначениеПоНомеру(Код);
//		//	КонецЕсли;
//		//ИначеЕсли ИдРекв = "SERTIF" Тогда   //напоминание о распечатке приложения "Перечень Сертификатов"
//		//    Код = 	Число(ВнутрЭл.ПолучитьАтрибут("Val"));
//		//	Док.флСертификаты = ?(Код = 1, 1, 0); 
//		//ИначеЕсли ИдРекв = "REPORT" Тогда   //напоминание о распечатке отчета для клиента
//		//    Код = 	Число(ВнутрЭл.ПолучитьАтрибут("Val"));
//		//	Док.Отчет = ?(Код = 1, 1, 0);
//		//ИначеЕсли ИдРекв = "ADRES" Тогда    //альтернативный адрес доставки
//		//	Док.АльтАдресДоставки = ВнутрЭл.ПолучитьАтрибут("Val");
//		//КонецЕсли;
//	КонецЦикла;
//	
//	//Цикл получения строк
//	Выборка = Эл.ВыбратьУзлы("Line");
//	Для Сч = 0 По Выборка.КоличествоУзлов() - 1 Цикл
//		ВнутрЭл	= Выборка.ПолучитьУзел(Сч);
//		Док.НоваяСтрока();
//		ИдТовара = ВнутрЭл.ПолучитьАтрибут("GdsID");
//		СпрТов = СоздатьОбъект("Справочник.кпкНоменклатура");
//		Если СпрТов.НайтиПоРеквизиту("Идентификатор",ИдТовара,1) = 0 Тогда
//		    ОповеститьОСобытии("Не удалось найти товар с идентификатором " + ИдТовара, "!!!");
//		КонецЕсли;
//		Товар 			= СпрТов.ТекущийЭлемент().Ссылка;
//		Док.Номенклатура= Товар;
//		Док.Количество 	= Число(ВнутрЭл.ПолучитьАтрибут("Amnt"));		
//		Если Док.УчитыватьНДС = 1 Тогда              			
//			Док.СтавкаНДС   = Док.Номенклатура.СтавкаНДС;
//		КонецЕсли;                                       
//		
//		// Если включен режим работы с единицами измерения в табличной части документа		
//		Если РежимЕд = 1 Тогда
//			UCode = ВнутрЭл.ПолучитьАтрибут("UCode"); 
//			UDim  = ВнутрЭл.ПолучитьАтрибут("UDim");
//			Док.Единица 	= ПолучитьЕдиницуПоКоду(Товар, Число(UCode));
//			Док.Коэффициент = UDim;
//		Иначе		
//			Док.Единица     = Товар.БазоваяЕдиница;		//с КПК количество поступает всегда в базовых единицах
//			Док.Коэффициент = Док.Единица.Коэффициент;
//		КонецЕсли;
//		
//		// Если нужно получить доп. реквизиты табл части документа, то
//		// их следует использовать точно такой же синтаксис, за исключением того,
//		// что перед обращанием к параметру стоит писать символ "_"
//		//       
//		// Пример получения доп. реквизита таб части "Баллы"
//		// Баллы 	= Число(ВнутрЭл.ПолучитьАтрибут("_Balls"));  		
//
//		АППересчетСуммы(Док, 1, 0, 1);//пересчитываем сумму заново, на случай если в БД была у товара изменена цена
//		
//		//Если требуется загружать заявки без пересчета суммы, то вместо верхней строчки следует указать следующие строки:		
//		//Док.Цена       = Число(ВнутрЭл.ПолучитьАтрибут("Price"));          
//		//Док.Сумма      = Число(ВнутрЭл.ПолучитьАтрибут("Sum"));	        
//		//Если Док.УчитыватьНДС = 1 Тогда              
//		//	Док.СуммаНДС    = Число(ВнутрЭл.ПолучитьАтрибут("VAT"));
//		//	Док.СтавкаНДС   = Док.Номенклатура.СтавкаНДС;
//			//Если НДССверху = 1 тогда
//			//	Док.СуммаНДС = Док.Сумма*(АПСтавкаНДС(Док.СтавкаНДС)/100);
//			//Иначе            
//			//	Док.СуммаНДС = Док.Сумма/(Док.Сумма+Док.Сумма*(АПСТавкаНДС(Док.СтавкаНДС)/100))*АПСтавкаНДС(Док.СтавкаНДС);
//			//КонецЕсли;
//		//КонецЕсли;  
//	
//		// Пересчитывает сумму в валюте взаиморасчетов.
//		ПересчетСуммыВзаиморасчетов(Док);
//		
//	КонецЦикла;    
//	
//	Если РежимЗагрузки = 3 Тогда
//		Если ЗаписьДокумента(Док, Идентификатор, DocState, Эл) = 1 Тогда		
//			Возврат СоздатьРеализациюНаОснованииЗаявки(Док);				
//		Иначе
//			Возврат 0;
//		КонецЕсли;
//	Иначе		
//		Возврат ЗаписьДокумента(Док, Идентификатор, DocState, Эл);
//	КонецЕсли;
//	
//КонецФункции // XMLЗагрузкаЗаявки(Эл)
//
////_____________________________________________________________________________
////Загрузка документа "ОтчетККМ" в ЦБД
////Создание в КПК документов такого вида возможно только в случае "Торговли с колес"
//Функция XMLЗагрузкаРеализацииРозничной(Эл, ПередвижнойСклад)
//
//	Док = СоздатьОбъект("Документ.ОтчетККМ");;
//	СпрСкл = СоздатьОбъект("Справочник.Склады");
//	
//	ПредставлениеДокВКПК = "Реализация розн."; Идентификатор = ""; DocState = 0;
//	
//	Если XMLИнициализацияДок(Эл, Док, ПредставлениеДокВКПК, Идентификатор, DocState) = 0
//	Тогда
//	    Возврат 0;
//	КонецЕсли;
//	
//	Перезапись = Док.Выбран();
//	
//	Если ПередвижнойСклад.Выбран() = 0 Тогда
//	    СкладАгента = АгентИнфо.ПередвижнойСклад;	
//	Иначе
//		СкладАгента = ПередвижнойСклад;
//	КонецЕсли;
//	
//	Если АгентИнфо.Касса.Выбран() = 0 Тогда
//	    КассаАгента = глЗначениеПоУмолчанию("ОсновнаяКасса");	
//	Иначе
//		КассаАгента = АгентИнфо.Касса;
//	КонецЕсли;
//	
//	ИдФирмы	  	= Эл.ПолучитьАтрибут("FirmID");
//	
//	СпрФирм = СоздатьОбъект("Справочник.кпкФирмы");
//	Если СпрФирм.НайтиПоРеквизиту("Идентификатор",ИдФирмы,1) = 0 Тогда
//		м_СпрФирм.НайтиЭлемент(глЗначениеПоУмолчанию("ОсновнаяФирма"));
//	Иначе
//		м_СпрФирм.НайтиЭлемент(СпрФирм.ТекущийЭлемент().Ссылка);
//	КонецЕсли;
//
//	Если Перезапись = 0 Тогда
//		Док.Фирма = м_СпрФирм.ТекущийЭлемент();
//	ИначеЕсли Док.Фирма <> м_СпрФирм.ТекущийЭлемент() Тогда
//		Док.Фирма = м_СпрФирм.ТекущийЭлемент();
//	КонецЕсли;
//	
//	Док.Склад = СкладАгента;
//	
//	ВидОплаты = Число(Эл.ПолучитьАтрибут("PmntType")); 
//			// 1 - наличными
//			// 2 - безналичными
//			// 3 - взаимозачет (как описывали в процедуре "ВыгрузкаДопРеквизитов(Текст)" )
//	// Добавить
//	//Если ВидОплаты = 1 Тогда
//	//    Док.ВидОплаты = Перечисление.ВидыОплат.Наличными
//	//ИначеЕсли (ВидОплаты = 2) Тогда
//	//	Док.ВидОплаты = Перечисление.ВидыОплат.Безнал;
//	//ИначеЕсли (ВидОплаты = 3) Тогда
//	//	Док.ВидОплаты = Перечисление.ВидыОплат.Взаимозачет;
//	//КонецЕсли;
//	
//	КодТипЦен = Число(Эл.ПолучитьАтрибут("PriceType"));
//	СпрТипЦен = СоздатьОбъект("Справочник.кпкТипыЦен");  
//	
//	НДССверху = 1;
//	
//	УстановитьТипЦеныВДокументе(Эл, Док);   
//
//	НДССверху  = Док.ТипЦен.ЦенаВклНДС;
//	
//	Если НДССверху = 1 тогда
//    	Док.СуммаВклНДС = 0;         
//    Иначе
//        Док.СуммаВклНДС = 1;          
//    КонецЕсли;    	
//	
//	Док.ДатаДок = РабочаяДата();
//	Док.АвтоВремяТекущее();
//	
//	УстановитьРеквизитыДокумента(Эл, Док); 
//	
//	Док.Касса = КассаАгента;
//	СкидкаДок = Число(Эл.ПолучитьАтрибут("Discount"));
//	
//	Если СкидкаДок<>0 Тогда
//		Скидка = ВернутьСкидку(СкидкаДок);
//		Если ПустоеЗначение(Скидка) = 1 Тогда
//			ОповеститьОСобытии("В документе " + ПредставлениеДокВКПК + "указана скидка "
//								+ Строка(СкидкаДок) + "%, отсутствующая в справочнике ""Скидки""!", "!", 1, Док);
//		Иначе
//			Док.Скидка = Скидка;
//		КонецЕсли;             
//	КонецЕсли;
//
//	//заполняем табличную часть
//	Если Док.КоличествоСтрок() <> 0 Тогда //если документ перезаписывается
//	    Док.УдалитьСтроки();
//	КонецЕсли;
//	
//	//Цикл получения дополнительных реквизитов
//	Выборка = Эл.ВыбратьУзлы("Attr");
//	Для Сч = 0 По Выборка.КоличествоУзлов() - 1 Цикл
//		ВнутрЭл	= Выборка.ПолучитьУзел(Сч);
//		ИдРекв 	= ВнутрЭл.ПолучитьАтрибут("AID");
//		ЗначРекв= ВнутрЭл.ПолучитьАтрибут("Val");
//		//Если ИдРекв = "..." Тогда
//        //    //...
//		//ИначеЕсли ИдРекв = "..." Тогда
//		//	//...
//		//ИначеЕсли ИдРекв = "..." Тогда
//		//	//...
//		//КонецЕсли;
//	КонецЦикла;
//	
//	Док.УчитыватьНДС = Число(Эл.ПолучитьАтрибут("UseVAT"));
//	
//	//Цикл получения строк
//	Выборка = Эл.ВыбратьУзлы("Line");
//	Для Сч = 0 По Выборка.КоличествоУзлов() - 1 Цикл
//		ВнутрЭл	= Выборка.ПолучитьУзел(Сч);
//		Док.НоваяСтрока();
//		ИдТовара = ВнутрЭл.ПолучитьАтрибут("GdsID");
//		СпрТов = СоздатьОбъект("Справочник.кпкНоменклатура");
//		Если СпрТов.НайтиПоРеквизиту("Идентификатор",ИдТовара,1) = 0 Тогда
//		    ОповеститьОСобытии("Не удалось найти товар с идентификатором " + ИдТовара, "!!!");
//		КонецЕсли;
//		Товар 			= СпрТов.ТекущийЭлемент().Ссылка;
//		Док.Номенклатура= Товар;
//		Док.Количество 	= Число(ВнутрЭл.ПолучитьАтрибут("Amnt"));		
//		Док.Цена	    = Число(ВнутрЭл.ПолучитьАтрибут("Price"));		
//		Док.Сумма	    = Число(ВнутрЭл.ПолучитьАтрибут("Sum")); 
//		Если Док.УчитыватьНДС = 1 Тогда              
//			Док.СуммаНДС    = Число(ВнутрЭл.ПолучитьАтрибут("VAT"));
//			Док.СтавкаНДС = Док.Номенклатура.СтавкаНДС;
//		КонецЕсли;       
//		
//		// Если включен режим работы с единицами измерения в табличной части документа 		
//		Если РежимЕд = 1 Тогда
//			UCode = ВнутрЭл.ПолучитьАтрибут("UCode"); 
//			UDim  = ВнутрЭл.ПолучитьАтрибут("UDim");
//			Док.Единица 	= ПолучитьЕдиницуПоКоду(Товар, Число(UCode));
//			Док.Коэффициент = UDim;
//		Иначе		
//			Док.Единица 	= Товар.БазоваяЕдиница;		//с КПК количество поступает всегда в базовых единицах
//			Док.Коэффициент = Док.Единица.Коэффициент;
//		КонецЕсли;
//		
//	КонецЦикла;
//    
//	ПересчетСуммыВзаиморасчетов(Док);
//	
//	Результат = ЗаписьДокумента(Док, Идентификатор, DocState, Эл);
//	
//	Возврат Результат;
//	
//КонецФункции  // XMLЗагрузкаРеализацииРозничной()  
//
////_____________________________________________________________________________
////Загрузка документа "Поступление" в ЦБД (в данной конфигурации 1С загружается в ЦБД
////как документ "Возврат от покупателя")
////Создание в КПК документов такого вида возможно только в случае "Торговли с колес"
//Функция XMLЗагрузкаПоступления(Эл, ПередвижнойСклад)   
//	
//	РежимЗагрузки = Константа.кпкРежимЗагрузкиДокументовПоступления;
//        
//	Если РежимЗагрузки = 0 Тогда
//		Док = СоздатьОбъект("Документ.ВозвратОтПокупателя");
//	Иначе                                                   
//		Док = СоздатьОбъект("Документ.ПоступлениеТМЦ");
//	КонецЕсли;     
//	
//	СпрСкл = СоздатьОбъект("Справочник.Склады");
//	
//	ПредставлениеДокВКПК = "Поступление"; Идентификатор = ""; DocState = 0;
//	
//	Если XMLИнициализацияДок(Эл, Док, ПредставлениеДокВКПК, Идентификатор, DocState) = 0
//	Тогда
//	    Возврат 0;
//	КонецЕсли;
//	
//	Перезапись = Док.Выбран();
//	
//	Если ПередвижнойСклад.Выбран() = 0 Тогда
//	    СкладАгента = АгентИнфо.ПередвижнойСклад;	
//	Иначе
//		СкладАгента = ПередвижнойСклад;
//	КонецЕсли;
//	
//	ИдФирмы = Эл.ПолучитьАтрибут("FirmID");
//	
//	СпрФирм = СоздатьОбъект("Справочник.кпкФирмы");
//	Если СпрФирм.НайтиПоРеквизиту("Идентификатор",ИдФирмы,1) = 0 Тогда
//		м_СпрФирм.НайтиЭлемент(глЗначениеПоУмолчанию("ОсновнаяФирма"));
//	Иначе
//		м_СпрФирм.НайтиЭлемент(СпрФирм.ТекущийЭлемент().Ссылка);
//	КонецЕсли;	
//	
//	Если Перезапись = 0 Тогда
//		Док.Фирма = м_СпрФирм.ТекущийЭлемент();
//	ИначеЕсли Док.Фирма <> м_СпрФирм.ТекущийЭлемент() Тогда
//		Док.Фирма = м_СпрФирм.ТекущийЭлемент();
//	КонецЕсли;
//	
//	Док.Склад = СкладАгента;
//	
//	ВидОплаты = Число(Эл.ПолучитьАтрибут("PmntType")); 
//			// 1 - наличными
//			// 2 - безналичными
//			// 3 - взаимозачет 
//			// 4 - спец. цена (все как описывали в процедуре "ВыгрузкаПеречислений(Текст)" )
//	// Добавить
//	//Если ВидОплаты = 1 Тогда
//	//    Док.ВидОплаты = Перечисление.ВидыОплат.Наличными
//	//ИначеЕсли (ВидОплаты = 2) Тогда
//	//	Док.ВидОплаты = Перечисление.ВидыОплат.Безнал;
//	//ИначеЕсли (ВидОплаты = 3) Тогда
//	//	Док.ВидОплаты = Перечисление.ВидыОплат.Взаимозачет;
//	//ИначеЕсли (ВидОплаты = 4) Тогда
//	//	Док.ВидОплаты = Перечисление.ВидыОплат.СпецЦена;
//	//КонецЕсли;    	
//		
//	НДССверху = 1;
//	
//	УстановитьТипЦеныВДокументе(Эл, Док);   
//
//	НДССверху  = Док.ТипЦен.ЦенаВклНДС;
//	
//	Если НДССверху = 1 тогда
//    	Док.СуммаВклНДС = 0;         
//    Иначе
//        Док.СуммаВклНДС = 1;          
//    КонецЕсли;    	
//		
//	Док.ДатаДок 	= 	РабочаяДата();	
//	Док.АвтоВремяТекущее();
//	
//	УстановитьРеквизитыДокумента(Эл, Док);
//	
//	Если РежимЗагрузки = 0 Тогда
//		Док.КодОперации = глКО.ВозвратОтПокупателя;		
//	Иначе       
//		Док.КодОперации = глКО.Закупка;
//	КонецЕсли;  	
//	
//	//заполняем табличную часть
//	Если Док.КоличествоСтрок() <> 0 Тогда //если документ перезаписывается
//	    Док.УдалитьСтроки();
//	КонецЕсли;
//	
//	//Цикл получения дополнительных реквизитов (в данной конфигурации 1С у документа доп. реквизитов нет.)
//	Выборка = Эл.ВыбратьУзлы("Attr");
//	Для Сч = 0 По Выборка.КоличествоУзлов() - 1 Цикл
//		ВнутрЭл	= Выборка.ПолучитьУзел(Сч);
//		ИдРекв 	= ВнутрЭл.ПолучитьАтрибут("AID");
//		ЗначРекв= ВнутрЭл.ПолучитьАтрибут("Val");
//		Если ИдРекв = "<Название рекв1>" Тогда
//			//
//		ИначеЕсли ИдРекв = "<Название рекв1>" Тогда
//			// ... и т.д.
//		КонецЕсли;
//	КонецЦикла;
//	
//	//Цикл получения строк
//	Выборка = Эл.ВыбратьУзлы("Line");
//	Для Сч = 0 По Выборка.КоличествоУзлов() - 1 Цикл
//		ВнутрЭл	= Выборка.ПолучитьУзел(Сч);
//		Док.НоваяСтрока();
//		ИдТовара = ВнутрЭл.ПолучитьАтрибут("GdsID");
//		СпрТов = СоздатьОбъект("Справочник.кпкНоменклатура");
//		Если СпрТов.НайтиПоРеквизиту("Идентификатор",ИдТовара,1) = 0 Тогда
//		    ОповеститьОСобытии("Не удалось найти товар с идентификатором " + ИдТовара, "!!!");
//		КонецЕсли;
//		Товар 			 = СпрТов.ТекущийЭлемент().Ссылка;
//		Док.Номенклатура = Товар;
//		Док.Количество 	 = Число(ВнутрЭл.ПолучитьАтрибут("Amnt"));		
//		Док.Цена	     = Число(ВнутрЭл.ПолучитьАтрибут("Price"));		
//		Док.Сумма	     = Число(ВнутрЭл.ПолучитьАтрибут("Sum"));
//		Док.СуммаНДС     = Число(ВнутрЭл.ПолучитьАтрибут("VAT")); 
//		
//		Если РежимЗагрузки = 1 Тогда
//			Док.ВидТМЦ = Перечисление.ВидыТМЦ.Товар;		    
//		КонецЕсли;
//	
//		// Если включен режим работы с единицами измерения в табличной части документа	
//		Если РежимЕд = 1 Тогда
//			UCode = ВнутрЭл.ПолучитьАтрибут("UCode"); 
//			UDim  = ВнутрЭл.ПолучитьАтрибут("UDim");
//			Док.Единица 	= ПолучитьЕдиницуПоКоду(Товар, Число(UCode));
//			Док.Коэффициент = UDim;
//		Иначе		
//			Док.Единица     = Товар.БазоваяЕдиница;		//с КПК количество поступает всегда в базовых единицах
//			Док.Коэффициент = Док.Единица.Коэффициент;
//		КонецЕсли;		
//	КонецЦикла;
//	
//	Док.УчитыватьНДС = ?(Док.Итог("СуммаНДС") <> 0, 1, 0); 
//	
//	ПересчетСуммыВзаиморасчетов(Док);
//
//	Результат = ЗаписьДокумента(Док, Идентификатор, DocState, Эл);
//	
//	Возврат Результат;
//	
//КонецФункции // XMLЗагрузкаПоступления()
//
////_____________________________________________________________________________
////Загрузка документа "Перемещение" в ЦБД
////Создание в КПК документов такого вида возможно только в случае "Торговли с колес"
//Функция XMLЗагрузкаПеремещения(Эл, ПередвижнойСклад)
//          
//	Док = СоздатьОбъект("Документ.ПеремещениеТМЦ");
//	СпрСкл = СоздатьОбъект("Справочник.Склады");
//	
//	ПредставлениеДокВКПК = "Перемещение"; Идентификатор = ""; DocState = 0;
//	
//	Если XMLИнициализацияДок(Эл, Док, ПредставлениеДокВКПК, Идентификатор, DocState) = 0
//	Тогда
//	    Возврат 0;
//	КонецЕсли;
//	
//	Если ПередвижнойСклад.Выбран() = 0 Тогда
//	    СкладАгента = АгентИнфо.ПередвижнойСклад;	
//	Иначе
//		СкладАгента = ПередвижнойСклад;
//	КонецЕсли;
//	
//	Перезапись = Док.Выбран();
//	
//	ИдФирмы	  	= Эл.ПолучитьАтрибут("FirmID");
//	ИдСклада 	= Эл.ПолучитьАтрибут("StoreID");
//	
//	СпрСклКПК = СоздатьОбъект("Справочник.кпкСклады");
//	Если СпрСклКПК.НайтиПоРеквизиту("Идентификатор",ИдСклада,1) = 0 Тогда
//		СпрСкл.НайтиЭлемент(глЗначениеПоУмолчанию("ОсновнойСклад"));
//	Иначе
//		СпрСкл.НайтиЭлемент(СпрСклКПК.ТекущийЭлемент().Ссылка);
//	КонецЕсли;
//
//	СпрФирм = СОздатьОбъект("Справочник.кпкФирмы");
//	Если СпрФирм.НайтиПоРеквизиту("Идентификатор",ИдФирмы,1) = 0 Тогда
//		м_СпрФирм.НайтиЭлемент(глЗначениеПоУмолчанию("ОсновнаяФирма"));
//	Иначе
//		м_СпрФирм.НайтиЭлемент(СпрФирм.ТекущийЭлемент().Ссылка);
//	КонецЕсли;
//	
//	Фирма = м_СпрФирм.ТекущийЭлемент();
//	Если Перезапись = 0 Тогда
//		Док.Фирма = Фирма;   
//	ИначеЕсли Док.Фирма <> Фирма Тогда
//		Док.Фирма = Фирма;
//	КонецЕсли;       
//	
//	Если Перезапись = 0 Тогда
//		Док.ФирмаПолучатель = Фирма;
//	ИначеЕсли Док.ФирмаПолучатель <> Фирма Тогда
//		Док.ФирмаПолучатель = Фирма;
//	КонецЕсли;
//	
//	ВидПеремещ = Число(Эл.ПолучитьАтрибут("MoveType")); 
//			// 1 - Загрузка в машину
//			// 2 - Выгрузка из машины
//	Если ВидПеремещ = 1 Тогда //Загрузка в машину
//	    Док.Склад 			= СпрСкл.ТекущийЭлемент();
//		Док.СкладПолучатель = СкладАгента;
//	ИначеЕсли ВидПеремещ = 2 Тогда //Выгрузка из машины
//	    Док.Склад 			= СкладАгента;
//		Док.СкладПолучатель = СпрСкл.ТекущийЭлемент();
//	Иначе
//		ОповеститьОСобытии("В документе " + ПредставлениеДокВКПК + "указан неизвестный тип перемещения!", "!!!");
//	КонецЕсли;
//	
//	Док.ДатаДок 	= 	РабочаяДата();  
//	Док.АвтоВремяТекущее();
//		
//	Счет   = Фирма.ОсновнойСчет;
//	Валюта = глРубли;
//	Док.Валюта = Валюта;
//	Док.Курс = Валюта.Курс.Получить(ТекущаяДата());
//	Док.Кратность = Валюта.Кратность.Получить(ТекущаяДата());
//	
//	Док.ТипЦен = глЗначениеПоУмолчанию("ОсновнойТипЦенПродажи"); 
//	
//	//заполняем табличную часть
//	Если Док.КоличествоСтрок() <> 0 Тогда //если документ перезаписывается
//	    Док.УдалитьСтроки();
//	КонецЕсли;
//	
//	//Цикл получения дополнительных реквизитов (в данной конфигурации у долкумента "Перемещение" доп. реквизиты не используются)
//	Выборка = Эл.ВыбратьУзлы("Attr");
//	Для Сч = 0 По Выборка.КоличествоУзлов() - 1 Цикл
//		ВнутрЭл	= Выборка.ПолучитьУзел(Сч);
//		ИдРекв 	= ВнутрЭл.ПолучитьАтрибут("AID");
//		ЗначРекв= ВнутрЭл.ПолучитьАтрибут("Val");
//		//Если ИдРекв = "..." Тогда 
//		//	//присвоение значения реквизиту документа
//		//ИначеЕсли ИдРекв = "..." Тогда
//		//	//присвоение значения реквизиту документа
//		//ИначеЕсли ИдРекв = "..." Тогда
//		//	// и т.д.
//		//КонецЕсли;
//	КонецЦикла;
//	
//	//Цикл получения строк
//	Выборка = Эл.ВыбратьУзлы("Line");
//	Для Сч = 0 По Выборка.КоличествоУзлов() - 1 Цикл
//		ВнутрЭл	= Выборка.ПолучитьУзел(Сч);
//		Док.НоваяСтрока();
//		ИдТовара = ВнутрЭл.ПолучитьАтрибут("GdsID");
//		СпрТов = СоздатьОбъект("Справочник.кпкНоменклатура");
//		Если СпрТов.НайтиПоРеквизиту("Идентификатор", ИдТовара, 1) = 0 Тогда
//		    ОповеститьОСобытии("Не удалось найти товар с идентификатором " + ИдТовара, "!!!");
//		КонецЕсли;
//		Товар 			 = СпрТов.ТекущийЭлемент().Ссылка;
//		Док.Номенклатура = Товар;
//		Док.Количество 	 = Число(ВнутрЭл.ПолучитьАтрибут("Amnt"));
//		
//		// { Арт 2008-12-15   		
//		// Если включен режим работы с единицами измерения в табличной части документа		
//		Если РежимЕд = 1 Тогда
//			UCode = ВнутрЭл.ПолучитьАтрибут("UCode"); 
//			UDim  = ВнутрЭл.ПолучитьАтрибут("UDim");
//			Док.Единица 	= ПолучитьЕдиницуПоКоду(Товар, Число(UCode));
//			Док.Коэффициент = UDim;
//		Иначе		
//			Док.Единица     = Товар.БазоваяЕдиница;		//с КПК количество поступает всегда в базовых единицах
//			Док.Коэффициент = Док.Единица.Коэффициент;
//		КонецЕсли;
//		// Арт 2008-12-15 }  	
//		
//		АППересчетСуммы(Док, 1, 0, 1);//пересчитываем сумму заново, на случай если в БД была у товара изменена цена
//	КонецЦикла;
//	
//	Возврат ЗаписьДокумента(Док, Идентификатор, DocState, Эл);
//	
//КонецФункции // XMLЗагрузкаПеремещения()
//
//
////_____________________________________________________________________________
////Загрузка документа "Инвентаризация" в ЦБД
////Создание в КПК документов такого вида возможно только в случае "Торговли с колес"
//Функция XMLЗагрузкаИнвентаризации(Эл, ПередвижнойСклад)
//          
//	Док = СоздатьОбъект("Документ.ИнвентаризацияТМЦ");
//	
//	ПредставлениеДокВКПК = "Инвентаризация"; Идентификатор = ""; DocState = 0;
//	
//	Если XMLИнициализацияДок(Эл, Док, ПредставлениеДокВКПК, Идентификатор, DocState) = 0
//	Тогда
//	    Возврат 0;
//	КонецЕсли;
//	
//	Док.ВидОперации = Перечисление.ВидыИнвентаризаций.ПоСкладу;
//	
//	Если ПередвижнойСклад.Выбран() = 0 Тогда
//	    СкладАгента = АгентИнфо.ПередвижнойСклад;	
//	Иначе
//		СкладАгента = ПередвижнойСклад;
//	КонецЕсли;
//	
//	Перезапись = Док.Выбран();
//	
//	ИдФирмы	  	= Эл.ПолучитьАтрибут("FirmID");
//	СпрФирм = СОздатьОбъект("Справочник.кпкФирмы");
//	Если СпрФирм.НайтиПоРеквизиту("Идентификатор",ИдФирмы,1) = 0 Тогда
//		м_СпрФирм.НайтиЭлемент(глЗначениеПоУмолчанию("ОсновнаяФирма"));
//	Иначе
//		м_СпрФирм.НайтиЭлемент(СпрФирм.ТекущийЭлемент().Ссылка);
//	КонецЕсли;
//	
//	Если Перезапись = 0 Тогда
//		Док.Фирма = м_СпрФирм.ТекущийЭлемент();
//	ИначеЕсли Док.Фирма <> м_СпрФирм.ТекущийЭлемент() Тогда
//		Док.Фирма = м_СпрФирм.ТекущийЭлемент();
//	КонецЕсли;
//	
//	Док.Склад = ПередвижнойСклад;
//	
//	ВидИнвент = Число(Эл.ПолучитьАтрибут("InvType")); 
//			// 1 - Не изменять остатки
//			// 2 - Изменять остатки
//	// Добавить
//	//Если ВидИнвент = 1 Тогда
//	//    Док.ВидОперации = Перечисление.ВидыИнвентаризаций.НеИзменятьОстатки;
//	//ИначеЕсли ВидИнвент = 2 Тогда //Выгрузка из машины
//	//    Док.ВидОперации = Перечисление.ВидыИнвентаризаций.ИзменятьОстатки;
//	//Иначе
//	//	Сообщить("В документе " + ПредставлениеДокВКПК + "указан неизвестный тип инвентаризации!","!");
//	//КонецЕсли;
//	
//	Док.ДатаДок 	= 	РабочаяДата();	
//	Док.АвтоВремяТекущее();  	
//
//	//заполняем табличную часть
//	Если Док.КоличествоСтрок() <> 0 Тогда //если документ перезаписывается
//	    Док.УдалитьСтроки();
//	КонецЕсли;
//	
//	//Цикл получения дополнительных реквизитов (в данной конфигурации у долкумента "Инвентаризация" доп. реквизиты не используются)
//	Выборка = Эл.ВыбратьУзлы("Attr");
//	Для Сч = 0 По Выборка.КоличествоУзлов() - 1 Цикл
//		ВнутрЭл	= Выборка.ПолучитьУзел(Сч);
//		ИдРекв 	= ВнутрЭл.ПолучитьАтрибут("AID");
//		ЗначРекв= ВнутрЭл.ПолучитьАтрибут("Val");
//		//Если ИдРекв = "..." Тогда 
//		//	//присвоение значения реквизиту документа
//		//ИначеЕсли ИдРекв = "..." Тогда
//		//	//присвоение значения реквизиту документа
//		//ИначеЕсли ИдРекв = "..." Тогда
//		//	// и т.д.
//		//КонецЕсли;
//	КонецЦикла;
//	
//	//Цикл получения строк
//	Выборка = Эл.ВыбратьУзлы("Line");
//	Для Сч = 0 По Выборка.КоличествоУзлов() - 1 Цикл
//		ВнутрЭл	= Выборка.ПолучитьУзел(Сч);
//		Док.НоваяСтрока();
//		ИдТовара = ВнутрЭл.ПолучитьАтрибут("GdsID");
//		СпрТов = СоздатьОбъект("Справочник.кпкНоменклатура");
//		Если СпрТов.НайтиПоРеквизиту("Идентификатор",ИдТовара,1) = 0 Тогда
//		    ОповеститьОСобытии("Не удалось найти товар с идентификатором " + ИдТовара, "!!!");
//		КонецЕсли;
//		Товар 			    = СпрТов.ТекущийЭлемент().Ссылка;
//		Док.Номенклатура	= Товар;
//		Док.Количество 		= Число(ВнутрЭл.ПолучитьАтрибут("Amnt"));
//		Док.КоличествоУчет 	= Число(ВнутрЭл.ПолучитьАтрибут("AmntDB")); 
//		Док.Цена	        = Число(ВнутрЭл.ПолучитьАтрибут("Price"));		
//		
//		// { Арт 2008-12-15   		
//		// Если включен режим работы с единицами измерения в табличной части документа	
//		Если РежимЕд = 1 Тогда
//			UCode = ВнутрЭл.ПолучитьАтрибут("UCode"); 
//			UDim  = ВнутрЭл.ПолучитьАтрибут("UDim");
//			Док.Единица 	= ПолучитьЕдиницуПоКоду(Товар, Число(UCode));
//			Док.Коэффициент = UDim;
//		Иначе		
//			Док.Единица     = Товар.БазоваяЕдиница;		//с КПК количество поступает всегда в базовых единицах
//			Док.Коэффициент = Док.Единица.Коэффициент;
//		КонецЕсли;
//		// Арт 2008-12-15 }  	
//		
//		АППересчетСуммы(Док, 0, 0, 1);
//		Док.СуммаУчет 		= Док.Цена * Док.КоличествоУчет;
//	КонецЦикла;
//	
//	Возврат ЗаписьДокумента(Док, Идентификатор, DocState, Эл);
//	
//КонецФункции // XMLЗагрузкаПеремещения()    
//
////******************************************************************************
////Используется для загрузки из КПК прих. кассового ордер и расх. кассового ордера
//Функция XMLЗагрузкаОрдера(Эл)
//    
//	СуммаДок = Число(Эл.ПолучитьАтрибут("Sum"));  
//	
//	Если СуммаДок >= 0 Тогда
//	    Док = м_ДокПКО;
//	Иначе
//		Док = м_ДокРКО;
//		СуммаДок = -СуммаДок;
//	КонецЕсли;
//	
//	Если АгентИнфо.Касса.Выбран() = 0 Тогда
//	    КассаАгента = глЗначениеПоУмолчанию("ОсновнаяКасса");	
//	Иначе
//		КассаАгента = АгентИнфо.Касса;
//	КонецЕсли;
//	
//	ПредставлениеДокВКПК = "Касс. ордер"; Идентификатор = ""; DocState = 0;
//	СредиПодчиненных = 1; //признак, что нужно по документу-основанию загружаемого документа 
//						  //найти в дереве непроведенный Ордер и сделать загрузку в этот документ
//	Если XMLИнициализацияДок(Эл, Док, ПредставлениеДокВКПК, Идентификатор, DocState, СредиПодчиненных) = 0
//	Тогда
//	    Возврат 0;
//	КонецЕсли;
//	//Если при выходе из XMLИнициализацияДок СредиПодчиненных = 2, это значит, что записывается ордер в существующий в дереве документ
//	
//	//Если найден непроведенный ордер среди подчиненных,
//	//и сумма у него отличается от загружаемого ордера, 
//	//то требуется загрузка нового ордера, а сумма уже существующего ордера корректируется
//	Если (СредиПодчиненных = 2) И (Док.Сумма <> СуммаДок) Тогда 
//	    Если СуммаДок < Док.Сумма Тогда	//клиент заплатил меньше, чем должен
//	        ДолгКлиента = Док.Сумма;
//			НоваяСумма = ДолгКлиента - СуммаДок;
//			ТекДок = Док.ТекущийДокумент();
//			Если Док.НайтиДокумент(ТекДок) = 1 Тогда //сбрасываем загруженные функцией XMLИнициализацияДок реквизиты 
//				Док.ДатаДок = РабочаяДата();
//				Док.Сумма = НоваяСумма; 
//				
//				Если ВыполнитьОперациюДляОбъекта(Док, "запись") = 0 Тогда						
//					Возврат 0;			
//				КонецЕсли;	
//			    
//				ОповеститьОСобытии("Скорректирована сумма ордера (задолженность клиента) " + АППредставлениеДок(Док.ТекущийДокумент()), "i", 1, Док);
//				//инициируем документ заново но уже без поиска среди подчиненных
//				ПредставлениеДокВКПК = "Касс. ордер";
//				Если XMLИнициализацияДок(Эл, Док, ПредставлениеДокВКПК, Идентификатор, DocState, 0) = 0
//				Тогда
//				    Возврат 0;
//				КонецЕсли;
//			Иначе
//				 ОповеститьОСобытии("Ошибка при поиске документа" + ПредставлениеДокВКПК + "!", "!");
//				 Возврат 0;
//			КонецЕсли;
//		Иначе //случай, когда  СуммаДок > Док.Сумма (переплата клиентом) пока не рассматриваем
//			
//	    КонецЕсли;
//	КонецЕсли;
//	
//	Перезапись = Док.Выбран();
//	
//	ИдФирмы	  			= Эл.ПолучитьАтрибут("FirmID");
//	
//	СуммаНДС 			= Число(Эл.ПолучитьАтрибут("DocVAT"));
//
//	ИдФирмы	  	= Эл.ПолучитьАтрибут("FirmID");
//	СпрФирм = СоздатьОбъект("Справочник.кпкФирмы");
//	Если СпрФирм.НайтиПоРеквизиту("Идентификатор",ИдФирмы,1) = 0 Тогда
//		м_СпрФирм.НайтиЭлемент(глЗначениеПоУмолчанию("ОсновнаяФирма"));
//	Иначе
//		м_СпрФирм.НайтиЭлемент(СпрФирм.ТекущийЭлемент().Ссылка);
//	КонецЕсли;
//	
//	Если Док.Вид() = "ПКО" Тогда
//		Док.КодОперации = глКО.ОплатаОтПокупателя;
//	Иначе	
//		Док.КодОперации = глКО.ВозвратОплатыПокупателю;
//	КонецЕсли;
//	
//	Если Перезапись = 0 Тогда 		
//		Если м_СпрФирм.Выбран() = 0 Тогда
//		    м_СпрФирм.НайтиЭлемент(глЗначениеПоУмолчанию("ОсновнаяФирма"));
//		КонецЕсли;
//		Док.Фирма = м_СпрФирм.ТекущийЭлемент();		
//		Док.Сумма = СуммаДок;		
//	Иначе
//		Если (Док.Фирма <> м_СпрФирм.ТекущийЭлемент()) И (м_СпрФирм.Выбран() = 1) Тогда
//			Док.Фирма = м_СпрФирм.ТекущийЭлемент();
//		КонецЕсли;
//		Если Док.Сумма <> СуммаДок Тогда
//		    Док.Сумма = СуммаДок;
//			ОповеститьОСобытии("В документе " + АППредставлениеДок(Док.ТекущийДокумент()) + " изменена сумма.", "i", 1, Док);
//		КонецЕсли;  	
//	КонецЕсли; 
//	
//	ПересчетСуммыВзаиморасчетов(Док);
//	
//	УстановитьРеквизитыДокумента(Эл, Док);
//    
//	Док.Касса =   КассаАгента;
//	
//	ВидОплаты = Число(Эл.ПолучитьАтрибут("PmntType")); 
//	//Вид оплаты в ПКО и РКО не используется
//	
//	Возврат ЗаписьДокумента(Док, Идентификатор, DocState, Эл);
//	
//КонецФункции //XMLЗагрузкаОрдера()
//
////_____________________________________________________________________________
//Функция XMLЗагрузкаМерчендайзинга(Эл)
//
//	Док = м_ДокМерч;
//	
//	ПредставлениеДокВКПК = "Мерчендайзинг"; Идентификатор = ""; DocState = 0;
//	
//	Если XMLИнициализацияДок(Эл, Док, ПредставлениеДокВКПК, Идентификатор, DocState) = 0
//	Тогда
//	    Возврат 0;
//	КонецЕсли;
//	
//	Перезапись = Док.Выбран();
//	
//	ИдФирмы	  			= Эл.ПолучитьАтрибут("FirmID");
//	ИдКлиента 			= Эл.ПолучитьАтрибут("ClientID");
//	ИдТочки   			= Эл.ПолучитьАтрибут("TPointID");
//
//	ИдФирмы	  	= Эл.ПолучитьАтрибут("FirmID");
//	СпрФирм = СоздатьОбъект("Справочник.кпкФирмы");
//	Если СпрФирм.НайтиПоРеквизиту("Идентификатор",ИдФирмы,1) = 0 Тогда
//		м_СпрФирм.НайтиЭлемент(глЗначениеПоУмолчанию("ОсновнаяФирма"));
//	Иначе
//		м_СпрФирм.НайтиЭлемент(СпрФирм.ТекущийЭлемент().Ссылка);
//	КонецЕсли;       
//	
//	СпрКл = СоздатьОбъект("Справочник.кпкКонтрагенты");
//	Если СпрКл.НайтиПоРеквизиту("Идентификатор",ИдКлиента,1) = 1 Тогда
//		м_СпрКл.НайтиЭлемент(СпрКл.ТекущийЭлемент().Ссылка);
//	Иначе                               
//		м_СпрКл = СоздатьОбъект("Справочник.Контрагенты");   
//	КонецЕсли;        
//	
//	м_СпрТТ.НайтиПоРеквизиту("Идентификатор",ИдТочки,1);
//	
//	Если Перезапись = 0 Тогда
//		Док.Фирма = м_СпрФирм.ТекущийЭлемент();
//	ИначеЕсли Док.Фирма <> м_СпрФирм.ТекущийЭлемент() Тогда
//		Док.Фирма = м_СпрФирм.ТекущийЭлемент();
//	КонецЕсли;
//	
//	Док.ДатаДок 	= 	РабочаяДата();
//	Док.Агент		=	ВыбАгент;
//	Док.АвтоВремяТекущее();
//	Док.Контрагент	= 	м_СпрКл.ТекущийЭлемент();    
//	Если ИспТочек = 1 Тогда	
//		Док.кпкТоргТочка 	= 	м_СпрТТ.ТекущийЭлемент(); 
//	КонецЕсли;
//	
//	//заполняем табличную часть
//	Если Док.КоличествоСтрок() <> 0 Тогда //если документ перезаписывается
//	    Док.УдалитьСтроки();
//	КонецЕсли;
//	
//	//Цикл получения дополнительных реквизитов
//	Выборка = Эл.ВыбратьУзлы("Attr");
//	Для Сч = 0 По Выборка.КоличествоУзлов() - 1 Цикл
//		ВнутрЭл	= Выборка.ПолучитьУзел(Сч);
//		ИдРекв = ВнутрЭл.ПолучитьАтрибут("AID");
//		Количество = Число(ВнутрЭл.ПолучитьАтрибут("Val"));		
//		Если ИдРекв = "FKAT_A" Тогда
//			Док.ФейсингКатегорииA 	= Количество;
//		ИначеЕсли ИдРекв = "FKAT_B" Тогда
//			Док.ФейсингКатегорииB 	= Количество;
//		ИначеЕсли ИдРекв = "FKAT_C" Тогда
//			Док.ФейсингКатегорииC 	= Количество;
//		ИначеЕсли ИдРекв = "FKAT_RP" Тогда
//			Док.ФейсингРП 			= Количество;
//		КонецЕсли;
//	КонецЦикла;
//	
//	//Цикл получения строк
//	Выборка = Эл.ВыбратьУзлы("Line");
//	Для Сч = 0 По Выборка.КоличествоУзлов() - 1 Цикл
//		ВнутрЭл	= Выборка.ПолучитьУзел(Сч);
//		Док.НоваяСтрока();
//		ИдТовара = ВнутрЭл.ПолучитьАтрибут("GdsID");
//		СпрТов = СоздатьОбъект("Справочник.кпкНоменклатура");
//		Если СпрТов.НайтиПоРеквизиту("Идентификатор",ИдТовара,1) = 0 Тогда
//		    ОповеститьОСобытии("Не удалось найти товар с идентификатором " + ИдТовара, "!!!");
//		КонецЕсли;
//		Товар 			= СпрТов.ТекущийЭлемент().Ссылка;
//		Док.Номенклатура= Товар;
//		Док.Количество 	= Число(ВнутрЭл.ПолучитьАтрибут("Amnt"));		
//		Док.Цена	    = Число(ВнутрЭл.ПолучитьАтрибут("Price"));		
//		Док.Сумма	    = Число(ВнутрЭл.ПолучитьАтрибут("Sum"));  
//		
//		// { Арт 2008-12-15   		
//		// Если включен режим работы с единицами измерения в табличной части документа	
//	   	Если РежимЕд = 1 Тогда
//			UCode = ВнутрЭл.ПолучитьАтрибут("UCode"); 
//			UDim  = ВнутрЭл.ПолучитьАтрибут("UDim");
//			Док.Единица 	= ПолучитьЕдиницуПоКоду(Товар, Число(UCode));
//			Док.Коэффициент = UDim;
//		Иначе		
//			Док.Единица     = Товар.БазоваяЕдиница;		//с КПК количество поступает всегда в базовых единицах
//			Док.Коэффициент = Док.Единица.Коэффициент;
//		КонецЕсли;
//		// Арт 2008-12-15 }  	
//		
//	КонецЦикла;
//	
//	Возврат ЗаписьДокумента(Док, Идентификатор, DocState, Эл);
//	
//КонецФункции // XMLЗагрузкаМерчендайзинга(Эл)
//
//
////_____________________________________________________________________________
//Функция XMLЗагрузкаПосещения(Эл)
//
//	Док = м_ДокПосещ;
//	
//	ПредставлениеДокВКПК = "Посещение"; Идентификатор = ""; DocState = 0;
//	
//	Если XMLИнициализацияДок(Эл, Док, ПредставлениеДокВКПК, Идентификатор, DocState) = 0
//	Тогда
//	    Возврат 0;
//	КонецЕсли;
//	
//	Перезапись = Док.Выбран();
//	
//	ИдФирмы	  			= Эл.ПолучитьАтрибут("FirmID");
//	ИдКлиента 			= Эл.ПолучитьАтрибут("ClientID");
//	ИдТочки   			= Эл.ПолучитьАтрибут("TPointID");
//
//	СпрФирм = СоздатьОбъект("Справочник.кпкФирмы");
//	Если СпрФирм.НайтиПоРеквизиту("Идентификатор",ИдФирмы,1) = 0 Тогда
//		м_СпрФирм.НайтиЭлемент(глЗначениеПоУмолчанию("ОсновнаяФирма"));
//	Иначе
//		м_СпрФирм.НайтиЭлемент(СпрФирм.ТекущийЭлемент().Ссылка);
//	КонецЕсли;
//	СпрКл = СоздатьОбъект("Справочник.кпкКонтрагенты");
//	Если СпрКл.НайтиПоРеквизиту("Идентификатор",ИдКлиента,1) = 1 Тогда
//		м_СпрКл.НайтиЭлемент(СпрКл.ТекущийЭлемент().Ссылка); 
//	Иначе                               
//		м_СпрКл = СоздатьОбъект("Справочник.Контрагенты");   
//	КонецЕсли;                                               
//	
//	м_СпрТТ.НайтиПоРеквизиту("Идентификатор",ИдТочки,1);
//	
//	Если Перезапись = 0 Тогда
//		Док.Фирма = м_СпрФирм.ТекущийЭлемент();
//	ИначеЕсли Док.Фирма <> м_СпрФирм.ТекущийЭлемент() Тогда
//		Док.Фирма = м_СпрФирм.ТекущийЭлемент();
//	КонецЕсли;
//	
//	Док.ДатаДок 	= 	РабочаяДата();
//	Док.Агент		=	ВыбАгент;
//	Док.АвтоВремяТекущее();
//	Док.Контрагент	= 	м_СпрКл.ТекущийЭлемент();
//	Если ИспТочек = 1 Тогда	
//		Док.кпкТоргТочка 	= 	м_СпрТТ.ТекущийЭлемент(); 
//	КонецЕсли;
//
//
//	СпрВопр = СоздатьОбъект("Справочник.кпкВопросыАнкеты");
//	СпрОтв	= СоздатьОбъект("Справочник.кпкОтветыАнкеты");
//	
//	//Цикл получения дополнительных реквизитов
//	Выборка = Эл.ВыбратьУзлы("Attr");
//	Для Сч = 0 По Выборка.КоличествоУзлов() - 1 Цикл
//		ВнутрЭл	= Выборка.ПолучитьУзел(Сч);
//		ИдРекв 	= ВнутрЭл.ПолучитьАтрибут("AID");
//		Код 	= Число(ВнутрЭл.ПолучитьАтрибут("Val"));		
//		Если ИдРекв = "VISIT" Тогда
//			Если м_СпрПосещ.НайтиПоКоду(Код) = 1 Тогда
//			    Док.Результат = м_СпрПосещ.ТекущийЭлемент();
//			КонецЕсли;
//		ИначеЕсли СпрВопр.НайтиПоРеквизиту("Идентификатор", ИдРекв, 1) = 1 Тогда
//			СпрОтв.ИспользоватьВладельца(СпрВопр.ТекущийЭлемент());
//			Если СпрОтв.НайтиПоКоду(Код, 1) = 1 Тогда
//			    Док.НоваяСтрока();
//				Док.Вопрос 	= СпрВопр.ТекущийЭлемент();
//				Док.Ответ	= СпрОтв.ТекущийЭлемент();
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Возврат ЗаписьДокумента(Док, Идентификатор, DocState, Эл);
//	
//КонецФункции // XMLЗагрузкаПосещения(Эл) 
//
////_____________________________________________________________________________
//Функция XMLЗагрузкаЗаданий(Эл)
//		
//	Док = м_ДокЗадание;  
//	
//	ПредставлениеДокВКПК = "Задание"; Идентификатор = ""; DocState = 0;
//
//	Если XMLИнициализацияДок(Эл, Док, ПредставлениеДокВКПК, Идентификатор, DocState) = 0
//	Тогда
//	    Возврат 0;
//	КонецЕсли;	     
//	
//	Док.Комментарий    = СокрЛП(Эл.ПолучитьАтрибут("Comment"));	
//
//	ДатаВремяНачала    = Эл.ПолучитьАтрибут("TimeBegin");
//	ДатаВремяОкончания = Эл.ПолучитьАтрибут("TimeEnd");	
//	
//	Док.ДатаНачала	   = ИзвлечьДатуИзXML(ДатаВремяНачала);
//	Док.ВремяНачала	   = ИзвлечьВремяИзXML(ДатаВремяНачала); 	
//	
//	Док.ДатаОкончания  = ИзвлечьДатуИзXML(ДатаВремяОкончания);
//	Док.ВремяОкончания = ИзвлечьВремяИзXML(ДатаВремяОкончания);
//	
//	Если Док.ОбновитьЗаданиеВКПК = 1 Тогда
//		Док.ОбновитьЗаданиеВКПК = 0;
//	КонецЕсли;         
//	
//	СпрЗадания = СоздатьОбъект("Справочник.кпкВидыЗаданий"); 	
//	
//	ТабЗаданий = СоздатьОбъект("ТаблицаЗначений");    
//		
//	Док.ВыгрузитьТабличнуюЧасть(ТабЗаданий);
//	
//	СписокИдФотоЗаданий.УдалитьВсе();
//		
//	// Цикл получения строк
//	Выборка = Эл.ВыбратьУзлы("Line");
//	Для Сч = 0 По Выборка.КоличествоУзлов() - 1 Цикл
//		
//		ВнутрЭл	= Выборка.ПолучитьУзел(Сч);		
//		
//		НаимЗадания = СокрЛП(ВнутрЭл.ПолучитьАтрибут("Name"));	
//		ТипЗадания  = Число(ВнутрЭл.ПолучитьАтрибут("Type"));	
//		
//		Если ТипЗадания = 0 Тогда Продолжить; КонецЕсли;
//		
//		Если СпрЗадания.НайтиПоНаименованию(НаимЗадания, 0) = 0 Тогда
//			ОповеститьОСобытии("Не найдено задание с наименованием """ + НаимЗадания + """ в справочнике ""Виды заданий""", "!");
//			Продолжить;
//		КонецЕсли; 		
//		
//		НомСтр = 0;
//		Если ТабЗаданий.НайтиЗначение(СпрЗадания.ТекущийЭлемент(), НомСтр, "Задание") = 0 Тогда		
//			ОповеститьОСобытии("Не найдено задание """ + НаимЗадания + """ в документе " + Строка(Док), "!");
//			Продолжить;
//		КонецЕсли;    	
//		
//		Результат = ВнутрЭл.ПолучитьАтрибут("Val");
//		
//		Если ПустаяСтрока(Результат) = 1 Тогда
//			Продолжить;
//		КонецЕсли;  
//			
//		Если (ТипЗадания = 1) или (ТипЗадания = 20) Тогда // число или булево
//			НужныйТип = "Число";
//			НужныйРезультат = Число(Результат); 			
//		ИначеЕсли ТипЗадания = 2 Тогда // строка   
//			НужныйТип = "Строка";
//			НужныйРезультат = СокрЛП(Результат);
//		ИначеЕсли ТипЗадания = 3 Тогда // дата     
//			НужныйТип = "Дата";
//			Если Результат <> "1900-01-01" Тогда
//				НужныйРезультат = ИзвлечьДатуИзXML(Результат);    
//			КонецЕсли;	
//		//ИначеЕсли ТипЗадания = 10 Тогда // перечисление 
//		//	НужныйТип = "";
//		//	НужныйРезультат = Результат;		
//		Иначе // предопределенные типы				
//			НужныйРезультат = ВернутьНужноеЗначенияЗадания(ТипЗадания, Результат);				
//			Если ТипЗначения(НужныйРезультат) = 1 Тогда // обмен данными   	
//				НужныйТип = "Число";
//			ИначеЕсли ТипЗначения(НужныйРезультат) = 2 Тогда // справочник фото				
//				СписокИдФотоЗаданий.ДобавитьЗначение(НужныйРезультат); 				
//				// Ищем текущую фотографию среди загруженных ранее
//				СпрФото = м_СпрФото;
//				Если СпрФото.НайтиПоРеквизиту("Идентификатор", НужныйРезультат, 1) = 1 Тогда  
//					НужныйТип = "Справочник." + СпрФото.Вид();                					
//					НужныйРезультат = СпрФото.ТекущийЭлемент();
//				КонецЕсли;                                                    				
//			ИначеЕсли ТипЗначения(НужныйРезультат) = 12 Тогда // документ
//				НужныйТип = "Документ." + НужныйРезультат.Вид();
//			КонецЕсли;     	                                                   			
//		КонецЕсли; 		    		
//		ТабЗаданий.УстановитьЗначение(НомСтр, "Результат", НужныйРезультат);		
//	КонецЦикла;                                       
//	
//	Док.ЗагрузитьТабличнуюЧасть(ТабЗаданий);
//	
//	Док.ВыбратьСтроки();
//	Пока Док.ПолучитьСтроку() = 1 Цикл  
//		Если ТипЗначения(Док.Результат) = 11 Тогда
//			ОповеститьОСобытии(Док.Результат, "i", 1, Док);			
//			НужныйТип = "Справочник." + Док.Результат.Вид();
//			Док.НазначитьТип("Результат", НужныйТип);
//		КонецЕсли;		
//	КонецЦикла; 
//               
//	ОповеститьОСобытии("Перезаписан документ " + АППредставлениеДок(Док.ТекущийДокумент()), "i", 1, Док);
//   
//	Результат = ВыполнитьОперациюДляОбъекта(Док, "проведение");								
//	
//	Если Результат <> 0 Тогда                        
//		ДокДляЗагрузки  = СоздатьОбъект("Документ.кпкЗаданиеАгента"); 
//		СпрФотоДлЗаписи = СоздатьОбъект("Справочник.кпкФотоКДокументам");
//		// Нужно указать для загруженных ранее фото
//		// документ задания, на который они ссылаются
//		Для Сч = 1 По СписокИдФотоЗаданий.РазмерСписка() Цикл
//			ТекИд = СписокИдФотоЗаданий.ПолучитьЗначение(1);
//			Если ПустаяСтрока(ТекИд) = 0 Тогда  
//				Спр = м_СпрФото;
//				Спр.ВыбратьЭлементыПоРеквизиту("Идентификатор", ТекИд, 0, 0);
//				Пока Спр.ПолучитьЭлемент() = 1 Цикл   
//					Если ДокДляЗагрузки.НайтиДокумент(Док) = 1 Тогда						
//						Если СпрФотоДлЗаписи.НайтиЭлемент(Спр.ТекущийЭлемент()) = 1 Тогда							
//							СпрФотоДлЗаписи.Док = ДокДляЗагрузки.ТекущийДокумент();
//							Если ВыполнитьОперациюДляОбъекта(СпрФотоДлЗаписи, "запись") = 0 Тогда						
//								Возврат 0;			
//							КонецЕсли;							
//						КонецЕсли;                                                          						
//					КонецЕсли;
//				КонецЦикла;				
//			КонецЕсли;	                             
//		КонецЦикла;
//	КонецЕсли;
//	          
//	Возврат Результат;
//		
//КонецФункции //ЗагрузкаЗаданий() 
//
////_____________________________________________________________________________
////АП 25.04.05 - добавлен новый параметр "Представление"
//Функция ЗаписатьВПротоколЗагрузкуЭлемСпр(Спр, Знач Представление = "", флЗаписыватьСправочныеДанные = 0, Новый = "")
//	
//	Если Новый = "" Тогда	
//		Новый = ?(Спр.Выбран() = 1, 0, 1);
//	КонецЕсли;
//	
//	ПромСпр = СоздатьОбъект("Справочник.кпкСправочники");	
//
//	Если Представление = "" Тогда
//	    Представление = СокрП(Спр.Наименование);
//	КонецЕсли;
//	
//    Попытка
//		ТекЭл = Спр.ТекущийЭлемент();
//		Наим = Представление;
//		Если Метаданные.Справочник(Спр.Вид()).Владелец.Выбран() = 1 Тогда
//			Владелец = СокрЛП(Спр.Владелец);
//		Иначе
//			Владелец = 0;
//		КонецЕсли;
//	
//		Если ВыполнитьОперациюДляОбъекта(Спр, "запись") = 0 Тогда		
//			Возврат 0;			
//		КонецЕсли;
//		
//		Если флЗаписыватьСправочныеДанные = 1 Тогда
//			СпрИнфо = ПолучитьСправочныеДанные(Спр);		
//			Если ПустоеЗначение(СпрИнфо) = 1 Тогда
//				СпрИнфо = ЗаписатьСправочныеДанные(Спр);
//			КонецЕсли;
//		КонецЕсли;
//		
//		Если Новый = 1 Тогда			
//			ТекЭл = Спр.ТекущийЭлемент();
//			ОповеститьОСобытии("Записан новый элемент справочника """ + Спр.ПредставлениеВида() + """ ("""+Наим+""")","i", 1, ТекЭл);
//		Иначе
//			ОповеститьОСобытии("Обновлен элемент справочника """ + Спр.ПредставлениеВида() + """ ("""+Наим+""")","i", 1, ТекЭл);
//		КонецЕсли;
//	
//		//Если Владелец <> 0 Тогда
//		//    ОповеститьОСобытии("(владелец: """ + СокрЛП(Владелец)+""")","i");
//		//КонецЕсли; 
//		//
//		ПромСпр.Новый();
//		ПромСпр.Агент 		= ВыбАгент;
//		ПромСпр.ЭлементСпр  = ТекЭл;
//		ПромСпр.ДатаСобытия = ТекущаяДата();
//		ПромСпр.Наименование = ?(Новый = 1, "Записан новый элемент", "Обновлен элемент");
//		
//		Если ВыполнитьОперациюДляОбъекта(ПромСпр, "запись") = 0 Тогда			
//			Возврат 0;			
//		КонецЕсли;
//		
//		Возврат 1; 
//		
//	Исключение
//		ОповеститьОСобытии("Ошибка: " + ОписаниеОшибки(), "!!!");
//		Если Новый = 1 Тогда
//		    ОповеститьОСобытии("Не удалось записать новый элемент справочника """ + Спр.Вид()+""", наим.: """ + Представление + """ !", "!!!", 1, Спр);
//		Иначе
//			ОповеститьОСобытии("Не удалось обновить элемент справочника """ + Спр.Вид()+""", наим.: """ + Представление + """ !", "!!!", 1, Спр);
//		КонецЕсли;
//		Возврат 0;
//	КонецПопытки;  
//	
//КонецФункции 
//
////_____________________________________________________________________________
//Функция XMLЗагрузкаЗапросов(Корень)
//	
//	Спр 	= м_СпрЗапросы;
//	СпрЛог 	= СоздатьОбъект("Справочник.кпкЗапросыАгентов");
//	
//	ВыборкаЗапросов = Корень.ВыбратьУзлы("Query");
//	КолЗапр = 0;
//	
//	Для Сч = 0 По ВыборкаЗапросов.КоличествоУзлов() - 1 Цикл
//		
//		Эл	= ВыборкаЗапросов.ПолучитьУзел(Сч);
//		
//		QType = Число(Эл.ПолучитьАтрибут("QType"));
//		Если Спр.НайтиПоКоду(QType) = 0 Тогда
//		    ОповеститьОСобытии("В справочнике запросов не найден запрос с кодом " + Строка(QType), "!");
//			Продолжить;
//		КонецЕсли;
//		
//		КолЗапр = КолЗапр + 1;
//		
//		СпрЛог.ИспользоватьВладельца(ВыбАгент);
//		
//		Если СпрЛог.НайтиПоРеквизиту("Запрос", Спр.ТекущийЭлемент(), 0) = 0 Тогда
//		    СпрЛог.Новый();
//			СпрЛог.Запрос = Спр.ТекущийЭлемент();
//		КонецЕсли;
//		
//		Если СпрЛог.Активен <> 1 Тогда
//		    СпрЛог.Активен = 1;
//			Если ВыполнитьОперациюДляОбъекта(СпрЛог, "запись") = 0 Тогда			
//				Возврат 0;			
//			КонецЕсли;		
//		КонецЕсли;  		
//		
//		ОтветитьНаЗапрос = 1;
//		
//	КонецЦикла;
//	
//	Если КолЗапр <> 0 Тогда
//	    ОповеститьОСобытии("Загружено запросов: " + КолЗапр, "i");
//	КонецЕсли;
//	
//	Возврат 1;
//
//КонецФункции //XMLЗагрузкаЗапросов()
//
////_____________________________________________________________________________
//Функция XMLЗагрузкаСпрКлиента(Эл)
//	
//	Спр 	= м_СпрКл;
//	ТипЦен	= СоздатьОбъект("Справочник.ТипыЦен");
//	СпрД	= СоздатьОбъект("Справочник.Договоры");
//	СпрЮЛ	= СоздатьОбъект("Справочник.ЮрЛица");
//	Идент	= Эл.ПолучитьАтрибут("ObjectID");
//	Статус 	= Число(Эл.ПолучитьАтрибут("RefState"));
//	Наименование = Эл.ПолучитьАтрибут("Name"); 
//	КодКатегории = Число(Эл.ПолучитьАтрибут("Category"));
//	СуммаКредита = Число(Эл.ПолучитьАтрибут("Credit"));
//	Новый = 0;
//	
//	СпрКл = СоздатьОбъект("Справочник.кпкКонтрагенты");
//	Если СпрКл.НайтиПоРеквизиту("Идентификатор", Идент, 1) = 0 Тогда
//		//Статус принимает значения: 1 - элемент в КПК создан, 2 - отредкактирован существующий элемент		
//		Если Статус = 1 Тогда
//			Новый = 1;
//		ИначеЕсли Статус = 2 Тогда
//			ОповеститьОСобытии("Не найден элемент справочника """ + Спр.Вид() + """ (идентификатор: " + Идент + ", наименование: """ + Наименование + """)!","!");
//			ОповеститьОСобытии("Элемент справочника был отредактирован в КПК и будет загружен как новый элемент.", "!");
//			Новый = 1;
//		Иначе
//			Возврат 0;
//		КонецЕсли;
//	Иначе
//		Спр.НайтиЭлемент(СпрКл.ТекущийЭлемент().Ссылка);
//	КонецЕсли;
//	
//	Если Новый = 1 Тогда
//		Спр.ИспользоватьРодителя(ВыбГруппаКлиентов);
//		Спр.Новый();
//		Спр.Идентификатор = Идент;
//	                      
//		Спр.Наименование = Наименование;
//
//		СпрЮЛ.Новый();
//		СпрЮЛ.Наименование = Наименование;
//		СпрЮЛ.ЮрАдрес	 = Эл.ПолучитьАтрибут("Addr");
//		СпрЮЛ.ФактАдрес	 = Эл.ПолучитьАтрибут("Addr");
//		СпрЮЛ.Телефоны	 = Эл.ПолучитьАтрибут("Tel");
//		СпрЮЛ.ИНН = Эл.ПолучитьАтрибут("_INN") + " / " + Эл.ПолучитьАтрибут("_KPP");
//		СпрЮЛ.ПолнНаименование = Эл.ПолучитьАтрибут("_FNAME");
//		
//		Если ВыполнитьОперациюДляОбъекта(СпрЮЛ, "запись") = 0 Тогда 			
//			Возврат 0;			
//		КонецЕсли;	
//		
//		Спр.ЮрФизЛицо = СпрЮЛ.ТекущийЭлемент();
//
//		Если ВыполнитьОперациюДляОбъекта(Спр, "запись") = 0 Тогда 						
//			Возврат 0;			
//		КонецЕсли;	
//
//		СпрД.Новый();
//		
//		СпрД.Наименование = ВыбАгент.Наименование;
//
//		КодТипа = СокрЛП(Эл.ПолучитьАтрибут("PryceType"));	
//		ТипЦен.НайтиПоКоду(КодТипа);
//		
//		СпрД.ТипЦен = ТипЦен.ТекущийЭлемент();
//		
//		Процент = Число(Эл.ПолучитьАтрибут("Discount"));
//		
//		Если ПустоеЗначение(Процент) = 0 Тогда			
//			Скидка = ВернутьСкидку(Процент);
//			Если ПустоеЗначение(Скидка) = 1 Тогда
//				ОповеститьОСобытии("В справочнике скидок не найдена скидка со ставкой " + Строка(Скидка) + "% ! У клиента """+Наименование+""" оставлена непроставленная скидка!","!");
//				Если Новый = 0 Тогда
//					СпрД.Скидка = 0; //очистка скидки
//				КонецЕсли;
//			Иначе
//				СпрД.Скидка = м_спрСк.ТекущийЭлемент();
//			КонецЕсли;    
//		КонецЕсли;   
//		
//		СпрД.ВалютаВзаиморасчетов = глЗначениеПоУмолчанию("ОсновнаяВалютаВзаиморасчетов"); 
//		СпрД.СуммаКредита 		  = СуммаКредита;
//		
//		СпрД.Владелец = Спр.ТекущийЭлемент();
//		
//		Если ВыполнитьОперациюДляОбъекта(СпрД, "запись") = 0 Тогда 						
//			Возврат 0;			
//		КонецЕсли;	
//		
//		Спр.ОсновнойДоговор = СпрД.ТекущийЭлемент();
//				
//		Если ВыполнитьОперациюДляОбъекта(Спр, "запись") = 0 Тогда 						
//			Возврат 0;			
//		КонецЕсли;                    
//		
//		СпрКл.Новый();
//		СпрКл.Ссылка = Спр.ТекущийЭлемент();
//		СпрКл.Идентификатор = Идент;  
//		Если КодКатегории <> 0 Тогда
//			СпрКатегории = СоздатьОбъект("Справочник.кпкКатегорииТоргТочек");
//			Если СпрКатегории.НайтиПоКоду(КодКатегории) = 1 Тогда
//				Спр.Категория = СпрКатегории.ТекущийЭлемент();
//			КонецЕсли;
//		КонецЕсли;
//		
//	Иначе
//	
//		КодТипа = СокрЛП(Эл.ПолучитьАтрибут("PryceType"));	
//		ТипЦен.НайтиПоКоду(КодТипа);
//		
//		Спр.ОсновнойДоговор.ТипЦен = ТипЦен.ТекущийЭлемент();
//		
//		Спр.Наименование = Наименование;
//	
//		Спр.ЮрФизЛицо.Наименование = Наименование;
//		Спр.ЮрФизЛицо.ЮрАдрес	 = Эл.ПолучитьАтрибут("Addr");
//		Спр.ЮрФизЛицо.ФактАдрес	 = Эл.ПолучитьАтрибут("Addr");
//		Спр.ЮрФизЛицо.Телефоны	 = Эл.ПолучитьАтрибут("Tel");
//		//Спр.Кредит		 = Число(Эл.ПолучитьАтрибут("Credit"));
//		Процент = Число(Эл.ПолучитьАтрибут("Discount"));  
//		
//		Скидка = ВернутьСкидку(Процент);
//		Если ПустоеЗначение(Скидка) = 1 Тогда
//		    ОповеститьОСобытии("В справочнике скидок не найдена скидка со ставкой " + Строка(Скидка) + "% ! У клиента """+Наименование+""" оставлена непроставленная скидка!","!");
//			Если Новый = 0 Тогда
//			    Спр.ОсновнойДоговор.Скидка = 0; //очистка скидки
//			КонецЕсли;
//		Иначе
//			Спр.ОсновнойДоговор.Скидка = м_спрСк.ТекущийЭлемент();
//		КонецЕсли;
//		
//		Спр.ОсновнойДоговор.СуммаКредита = СуммаКредита;
//		
//		//загружаем дополнительные реквизиты справочника
//		СрокДоговора = Эл.ПолучитьАтрибут("_SROKDOG");
//		//Спр.СрокДоговора = ИзвлечьДатуИзXML(СрокДоговора);
//		Спр.ЮрФизЛицо.ИНН = Эл.ПолучитьАтрибут("_INN") + " / " + Эл.ПолучитьАтрибут("_KPP");
//		Спр.ЮрФизЛицо.ПолнНаименование = Эл.ПолучитьАтрибут("_FNAME");   
//		
//		КлиентИнфо = ПолучитьСправочныеДанные(Спр);
//		
//		Если КлиентИнфо.Выбран() = 1 Тогда 
//			Если КодКатегории <> 0 Тогда
//				СпрКатегории = СоздатьОбъект("Справочник.кпкКатегорииТоргТочек");
//				Если СпрКатегории.НайтиПоКоду(КодТипа) = 1 Тогда
//					КлиентИнфо.Категория = СпрКатегории.ТекущийЭлемент();
//				КонецЕсли;
//			КонецЕсли;			
//			Если ВыполнитьОперациюДляОбъекта(КлиентИнфо, "запись") = 0 Тогда 						
//				Возврат 0;			
//			КонецЕсли;
//		КонецЕсли; 
//		
//	КонецЕсли;
//
//	Рез = ЗаписатьВПротоколЗагрузкуЭлемСпр(Спр, "", 1);
//
//	СпрИнфо = СоздатьОбъект("Справочник.кпкКонтрагенты");
//	Если СпрИнфо.НайтиПоРеквизиту("Ссылка", Спр, 1) = 1 Тогда
//		СпрИнфо.Идентификатор = Идент;
//		Если ВыполнитьОперациюДляОбъекта(СпрИнфо, "запись") = 0 Тогда 						
//			Возврат 0;			
//		КонецЕсли;
//	КонецЕсли;                                                                                                               
//	
//	Возврат Рез;	
//	
//КонецФункции // XMLЗагрузкаСпрКлиента(Эл)
//
////_____________________________________________________________________________
//Функция XMLЗагрузкаСпрТоргТочки(Эл)
//
//	Спр 	= м_СпрТТ;
//	СпрКл	= м_СпрКл;
//	Идент	= Эл.ПолучитьАтрибут("ObjectID");
//	ИдентВл	= Эл.ПолучитьАтрибут("ParentID");
//
//	Статус 	= Число(Эл.ПолучитьАтрибут("RefState"));
//	Наименование = Эл.ПолучитьАтрибут("Name");
//	Новый = 0;
//	     
//	кпкСпрКл = СоздатьОбъект("Справочник.кпкКонтрагенты");
//	Если кпкСпрКл.НайтиПоРеквизиту("Идентификатор", ИдентВл, 1) = 0 Тогда
//	    ОповеститьОСобытии("Не найден элемент справочника """ + кпкСпрКл.Вид() + """ (идентификатор: " + ИдентВл + ")!","!");
//		ОповеститьОСобытии("Торговая точка """ + Наименование + """ не "+?(Статус = 1,"создана","обновлена") + "!", "!");
//		Возврат 0;
//	КонецЕсли;
//	СпрКл.НайтиЭлемент(кпкСпрКл.ТекущийЭлемент().Ссылка);
//	
//	Если Спр.НайтиПоРеквизиту("Идентификатор", Идент, 1) = 0 Тогда
//		//Статус принимает значения: 1 - элемент в КПК создан, 2 - отредкактирован существующий элемент		
//		Если Статус = 1 Тогда
//			Новый = 1;
//		ИначеЕсли Статус = 2 Тогда
//			ОповеститьОСобытии("Не найден элемент справочника """ + Спр.Вид()+""" (идентификатор: " + Идент + ", наименование: """+Наименование+""")!","!");
//			ОповеститьОСобытии("Элемент справочника был отредактирован в КПК и будет загружен как новый элемент.","!");
//			Новый = 1;
//		Иначе
//			Возврат 0;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если Новый = 1 Тогда //создан в КПК новый элемент
//		Спр.ИспользоватьВладельца(СпрКл.ТекущийЭлемент());
//		Спр.Новый();
//		Спр.Идентификатор 	= Идент;
//	КонецЕсли;
//	
//	Спр.АгентАвтор	   = ВыбАгент;	
//	Спр.Наименование   = Наименование;
//	Спр.Адрес		   = Эл.ПолучитьАтрибут("Addr");
//	Спр.Телефоны	   = Эл.ПолучитьАтрибут("Tel");	
//	КодКатагории	   = Эл.ПолучитьАтрибут("Category");
//	КонтактноеЛицо 	   = Эл.ПолучитьАтрибут("Contact");	
//	
//	Если КодКатагории <> 0 Тогда
//		СпрКатегории = СоздатьОбъект("Справочник.кпкКатегорииТоргТочек");
//		Если СпрКатегории.НайтиПоКоду(КодКатагории) = 1 Тогда
//			Спр.Категория = СпрКатегории.ТекущийЭлемент();
//		КонецЕсли;
//	КонецЕсли;
//	
//	//загружаем дополнительные реквизиты справочника
//	КодТипа = Число(Эл.ПолучитьАтрибут("_TPTYPE"));
//	Если КодТипа<>0 Тогда
//		СпрТипТочки = СоздатьОбъект("Справочник.кпкТипыТоргТочек");
//		Если СпрТипТочки.НайтиПоКоду(КодТипа) = 1 Тогда
//		    Спр.ТипТочки = СпрТипТочки.ТекущийЭлемент();
//		КонецЕсли;
//	КонецЕсли;
//
//	Спр.ВремяРаботы = Эл.ПолучитьАтрибут("_WORKTIME");
//	
//	ТекЭлСпр = Спр.ТекущийЭлемент();
//    
//	Рез = ЗаписатьВПротоколЗагрузкуЭлемСпр(Спр);          
//	
//	Если ПустаяСтрока(КонтактноеЛицо) = 0 Тогда
//		
//		// Добавляем контактное лицо
//		СпрКЛ = СоздатьОбъект("Справочник.кпкКонтактныеЛица");  
//		
//		Если Спр.Выбран() = 0 Тогда
//			
//			Если м_СпрТТ.НайтиЭлемент(ТекЭлСпр) = 1 Тогда
//				
//				СпрКЛ.ИспользоватьВладельца(м_СпрТТ.ТекущийЭлемент());
//				
//			Иначе
//				
//				Возврат Рез;
//				
//			КонецЕсли;                                            
//			
//		Иначе
//			
//			СпрКЛ.ИспользоватьВладельца(Спр.ТекущийЭлемент());
//			
//		КонецЕсли;                                            		
//		
//		
//		Если СпрКЛ.НайтиПоНаименованию(КонтактноеЛицо, 1) = 0 Тогда	
//			СпрКЛ.Новый();		
//			СпрКЛ.Наименование  = КонтактноеЛицо; 
//			СпрКЛ.Идентификатор = глАПСоздатьИдентификатор();    
//			
//			РезКЛ = ЗаписатьВПротоколЗагрузкуЭлемСпр(СпрКЛ);
//		Иначе
//			ОповеститьОСобытии("Контактное лицо с наименованием: " + КонтактноеЛицо + " уже есть в списке контактных лиц для торговой точки: " + Строка(Спр.ТекущийЭлемент()),"i");
//		КонецЕсли;    
//		
//	КонецЕсли;
//	
//	Возврат Рез;	
//	
//КонецФункции // XMLЗагрузкаСпрТоргТочки(Эл)
//
////_____________________________________________________________________________
//Функция XMLЗагрузкаСпрШтрихКода(Эл)
//
//	Спр 	= м_СпрЕд;
//	кпкСпр	= СоздатьОбъект("Справочник.кпкЕдиницы");
//	СпрТов	= м_СпрТов;
//	кпкСпрТов = СоздатьОбъект("Справочник.кпкНоменклатура");
//	Идент	= Эл.ПолучитьАтрибут("ObjectID");
//
//	Статус 	= Число(Эл.ПолучитьАтрибут("RefState"));
//	ШтрихКод= Эл.ПолучитьАтрибут("Name");
//	Новый 	= 0;
//	          
//	Если кпкСпрТов.НайтиПоРеквизиту("Идентификатор", Идент, 1) = 0 Тогда
//	    ОповеститьОСобытии("Не найден элемент справочника """+СпрТов.Вид()+""" (идентификатор: "+Идент+")!","!");
//		ОповеститьОСобытии("Штрих-код """+ШтрихКод+""" не "+?(Статус = 1,"создан","обновлен")+"!","!");
//		Возврат 0;
//	КонецЕсли;
//	
//	СпрТов = кпкСпрТов.Ссылка.ТекущийЭлемент();
//	Спр.ИспользоватьВладельца(СпрТов.ТекущийЭлемент());
//	
//	СписЕд = СоздатьОбъект("СписокЗначений"); 
//	РазмерСпис = 0;
//	Спр.ИспользоватьВладельца(СпрТов.ТекущийЭлемент());
//	Спр.ВыбратьЭлементы();
//	Пока (Спр.ПолучитьЭлемент() = 1) И (РазмерСпис < 3) Цикл
//		СпрИнфо = ПолучитьСправочныеДанные(Спр);
//		Если ПустоеЗначение(СпрИнфо) = 1 Тогда
//			Продолжить;
//		КонецЕсли;
//	    //Если СпрИнфо.КпкВыгружать = 1 Тогда
//	        СписЕд.ДобавитьЗначение( Спр.ТекущийЭлемент(), Формат(Спр.Коэффициент, "Ч10.3"));
//			РазмерСпис = РазмерСпис + 1;
//	    //КонецЕсли;
//	КонецЦикла;
//	СписЕд.СортироватьПоПредставлению(); //сортируем список единиц по возрастанию коэффициента
//	
//	НомерЕдиницыВСписке = Число(Эл.ПолучитьАтрибут("Unit")) + 1;
//	
//	Если Спр.НайтиПоРеквизиту("ШтрихКод", ШтрихКод, 0) = 0 Тогда
//		//Статус принимает значения: 1 - элемент в КПК создан, 2 - отредкактирован существующий элемент		
//		Если Статус = 1 Тогда
//			Новый = 1;
//			Если НомерЕдиницыВСписке <= РазмерСпис Тогда
//			    ТекЕдиница = СписЕд.ПолучитьЗначение(НомерЕдиницыВСписке);
//				Если ПустоеЗначение(ТекЕдиница.ШтрихКод) = 1 Тогда
//				    //Присваиваем штрих-код той единице измерения, которой штрих-код еще не назначен, но по
//					//размерности она совпадает с размерностью единицы, которой в КПК присвоен штрих-код.
//					Спр.НайтиЭлемент(ТекЕдиница);
//				КонецЕсли;
//			КонецЕсли;
//		ИначеЕсли Статус = 2 Тогда
//			ОповеститьОСобытии("Не найден элемент справочника """+Спр.Вид()+""" (штрих-код: "+ШтрихКод+")!","!");
//			ОповеститьОСобытии("Элемент справочника был отредактирован в КПК и будет загружен как новый элемент.","!");
//			Новый = 1;
//		Иначе
//			Возврат 0;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если Спр.Выбран() = 1 Тогда //единица измерения с таким штрих-кодом уже существует
//	    Новый = 0;
//		ТекЕдиница = Спр.ТекущийЭлемент();
//	КонецЕсли;
//	
//	Если Новый = 1 Тогда //создан в КПК новый элемент
//		Спр.Новый();
//	Иначе
//		Спр.НайтиЭлемент(ТекЕдиница);
//	КонецЕсли;
//	
//	Если РазмерСпис = 0 Тогда
//	    Спр.Коэффициент = 1;
//		Спр.ОКЕИ = СпрТов.БазоваяЕдиница;
//	ИначеЕсли НомерЕдиницыВСписке > РазмерСпис Тогда
//		ЭлемЕдиница = СписЕд.ПолучитьЗначение(РазмерСпис);
//		Спр.ОКЕИ 	= ЭлемЕдиница.ОКЕИ;
//		Спр.Коэффициент = ЭлемЕдиница.Коэффициент;
//	Иначе
//		ЭлемЕдиница = СписЕд.ПолучитьЗначение(НомерЕдиницыВСписке);
//		Спр.ОКЕИ 	= ЭлемЕдиница.ОКЕИ;
//		Спр.Коэффициент = ЭлемЕдиница.Коэффициент;
//	КонецЕсли;
//	
//	Спр.ШтрихКод = ШтрихКод;
//	
//	Возврат ЗаписатьВПротоколЗагрузкуЭлемСпр(Спр, ШтрихКод);	
//	
//КонецФункции // XMLЗагрузкаСпрШтрихКода(Эл)
//
////_____________________________________________________________________________
//Функция XMLЗагрузкаСпрНоменклатуры(Эл)
//	
//	Спр		 = СоздатьОбъект("Справочник.Номенклатура"); 
//	СпрГр	 = СоздатьОбъект("Справочник.Номенклатура");
//	кпкСпр	 = СоздатьОбъект("Справочник.кпкНоменклатура"); 
//	кпкСпрГр = СоздатьОбъект("Справочник.кпкНоменклатура");
//	
//	Идент		 = Эл.ПолучитьАтрибут("ObjectID");
//	ИдентВл		 = Эл.ПолучитьАтрибут("ParentID");
//	Статус 		 = Число(Эл.ПолучитьАтрибут("RefState"));
//	Наименование = Эл.ПолучитьАтрибут("Name");	
//	Код			 = СокрЛП(Эл.ПолучитьАтрибут("Code"));  	
//	Комментарий  = Эл.ПолучитьАтрибут("Comment");  
//	СтавкаНДС    = Число(Эл.ПолучитьАтрибут("VATRate"));	
//	Акция 	     = Число(Эл.ПолучитьАтрибут("Action"));
//	Весовой		 = Число(Эл.ПолучитьАтрибут("Weight"));   
//	Вес	         = Число(Эл.ПолучитьАтрибут("Weight0"));  	
//	КодГТД 	  	 = Число(Эл.ПолучитьАтрибут("_GTD")); 
//	КодСтраны    = Эл.ПолучитьАтрибут("_STRANA");  	                                          
//	КодКатегории = Число(Эл.ПолучитьАтрибут("Category")); 
//	   
//	Новый = 0;
//	Если Статус = 1 Тогда // элемент справочника создан в КПК
//		Если кпкСпр.НайтиПоРеквизиту("Идентификатор", Идент, 1) = 1 Тогда
//			ОповеститьОСобытии("В мобильном приложении добавлен новый элемент справочника """ + Спр.Вид() + """ (идентификатор: " + Идент + "). Элемент с таким идентификатором уже был загружен ранее! Элемент будет обновлен!", "i");
//		Иначе
//			ОповеститьОСобытии("В мобильном приложении добавлен новый элемент справочника """ + Спр.Вид() + """ (идентификатор: " + Идент + "). В ЦБД будет создан новый элемент справочника", "i");
//			Новый = 1;
//		КонецЕсли;
//	ИначеЕсли Статус = 2 Тогда // обновлен
//		Если кпкСпр.НайтиПоРеквизиту("Идентификатор", Идент, 1) = 1 Тогда
//			ОповеститьОСобытии("В мобильном приложении изменен элемент справочника """ + Спр.Вид() + """ (идентификатор: " + Идент + ")! Будет произведено обновление данного элемент справочника в ЦБД","i");
//		Иначе
//			ОповеститьОСобытии("В мобильном приложении изменен элемент справочника """ + Спр.Вид() + """ (идентификатор: " + Идент + ")! Элемент с таким идентификатором на найден в ЦБД! Номенклатура не будет обновлена","i");
//			Возврат 0;
//		КонецЕсли;  		
//	КонецЕсли;      
//	
//	Если кпкСпрГр.НайтиПоРеквизиту("Идентификатор", ИдентВл, 1) = 0 Тогда
//	    ОповеститьОСобытии("Не найдена группа справочника """ + кпкСпр.Вид()+""" (идентификатор: " + ИдентВл+")!","!");
//		ОповеститьОСобытии("Номенклатура: """ + Наименование+""" не "+?(Статус = 1,"будет добавлена в ЦБД","будет обновлена в ЦБД")+"!","!");
//		Возврат 0;
//	КонецЕсли;
//	
//	Если Новый = 1 Тогда 		
//		Если СпрГр.НайтиЭлемент(кпкСпрГр.ТекущийЭлемент().Ссылка) = 1 Тогда
//			ГруппаСпр = кпкСпрГр.ТекущийЭлемент();
//			Спр.ИспользоватьРодителя(ГруппаСпр);
//			Спр.Новый();                    
//		Иначе
//			ОповеститьОСобытии("В справочнике ""Номенклатура"" не найдена группа элементов: " + Строка(кпкСпр.ТекущийЭлемент().Ссылка) + "!","i");
//			Возврат 0;
//		КонецЕсли;
//	Иначе
//		Если Спр.НайтиЭлемент(кпкСпр.ТекущийЭлемент().Ссылка) = 0 Тогда
//			ОповеститьОСобытии("В справочнике ""Номенклатура"" не найден элемент: " + Строка(кпкСпр.ТекущийЭлемент().Ссылка) + "!","i");
//			Возврат 0;
//		КонецЕсли;	
//	КонецЕсли; 
//	
//	Если ПустоеЗначение(Код) = 0 Тогда
//		СпрПоискаКода = м_СпрТов;
//		Если СпрПоискаКода.НайтиПоКоду(Код) = 1 Тогда
//		    Если СпрПоискаКода.ТекущийЭлемент() <> Спр.ТекущийЭлемент() Тогда //такой код уже существует
//				ОповеститьОСобытии("Код товара """ + Код + """ в справочнике """ + СпрПоискаКода.Вид() + 
//								   """ уже существует! Товар будет загружен под кодом """ + СокрЛП(Спр.Код) + """","!");
//		        Код = "";
//		    КонецЕсли;
//		КонецЕсли;
//		Если ПустоеЗначение(Код) = 0 Тогда //если код не был очищен, значит можем его записать в справочник
//			Спр.Код = Код;
//	    КонецЕсли;
//	КонецЕсли;
//	
//	Спр.Наименование 	 = Наименование;  
//	Спр.ПолнНаименование = Наименование; 
//	Спр.Весовой			 = Весовой;	
//	
//	Спр.Комментарий  = Комментарий;
//	СтавкаНДС =  СтавкаНДС;
//	Если СтавкаНДС = 18 Тогда
//	    Спр.СтавкаНДС = Перечисление.СтавкиНДС.НДС18;
//	ИначеЕсли СтавкаНДС = 10 Тогда
//		Спр.СтавкаНДС = Перечисление.СтавкиНДС.НДС10;
//	ИначеЕсли СтавкаНДС = 0 Тогда
//		Спр.СтавкаНДС = Перечисление.СтавкиНДС.БезНДС;
//	Иначе
//		Спр.СтавкаНДС = Перечисление.СтавкиНДС.НДС18;
//	КонецЕсли;
//
//	СпрГТД = СоздатьОбъект("Справочник.ГТД");  	
//	СпрГТД.ВыбратьЭлементы();                 
//	СчГТД = 0;	
//	Пока СпрГТД.ПолучитьЭлемент() = 1 Цикл
//		Если (СпрГТД.ПометкаУдаления() = 0) Тогда   
//			СчГТД = СчГТД + 1;  			
//			Если СчГТД = КодГТД Тогда   
//				Спр.НомерГТД = СпрГТД.ТекущийЭлемент();						
//			КонецЕсли;  			
//		КонецЕсли;
//	КонецЦикла;
//		
//	// Проставляем страну
//	СпрСтран = СоздатьОбъект("Справочник.ОКСМ");
//	Если СпрСтран.НайтиПоКоду(КодСтраны) = 1 Тогда	
//		Спр.СтранаПроисхождения = СпрСтран.ТекущийЭлемент();						
//	КонецЕсли;     
//	
//	НужноСоздатьЕдИзмерения = 0;
//	Если Спр.Выбран() = 0 Тогда
//	    НужноСоздатьЕдИзмерения = 1;
//	Иначе
//		НужноСоздатьЕдИзмерения = 0;
//	КонецЕсли;   	                 
//	
//	Результат = ЗаписатьВПротоколЗагрузкуЭлемСпр(Спр);	
//	
//	
//	Если Новый = 1 Тогда
//		СпрИнфо	= ЗаписатьСправочныеДанные(Спр);		
//	Иначе
//		СпрИнфо = ПолучитьСправочныеДанные(Спр);              		
//	КонецЕсли;
//	                                                          
//	Если СпрИнфо.Выбран() = 1 Тогда
//		Если кпкСпр.НайтиЭлемент(СпрИнфо.ТекущийЭлемент()) = 1 Тогда	
//			кпкСпр.Акция = Акция;                   
//			кпкСпр.Идентификатор = Идент;	   
//			Если ВыполнитьОперациюДляОбъекта(кпкСпр, "запись") = 0 Тогда 						
//				Возврат 0;			
//			КонецЕсли;  
//		КонецЕсли; 
//	КонецЕсли;
//	
//	ЗаполнитьТаблицуКатегорий();
//	
//	Если Спр.Выбран() = 1 Тогда
//		Стр = 0;
//		Если ТаблицаКатегорий.НайтиЗначение(КодКатегории,Стр, "Номер") = 1 Тогда
//			ТаблицаКатегорий.ПолучитьСтрокуПоНомеру(Стр);
//			НаимКатегории = СокрЛП(ТаблицаКатегорий.Наименование);
//			
//			СпрЗнач = СоздатьОбъект("Справочник.ЗначенияСвойств");     
//			СпрЗнач.ИспользоватьВладельца(Константа.ВидСвойстваНоменклатуры);
//			
//			Если СпрЗнач.НайтиПоНаименованию(НаимКатегории) = 1 Тогда
//			
//				ЗначениеСвойства = СпрЗнач.ТекущийЭлемент();
//				
//				СпрСвойства = СоздатьОбъект("Справочник.СвойстваНоменклатуры");
//				СпрСвойства.ИспользоватьВладельца(Спр.ТекущийЭлемент()); 
//				
//				Если СпрСвойства.НайтиПоРеквизиту("ВидСвойства", Константа.ВидСвойстваНоменклатуры, 0) = 0 Тогда									
//					СпрСвойства.Новый();
//					СпрСвойства.ВидСвойства 	 = Константа.ВидСвойстваНоменклатуры;     					
//				КонецЕсли;                                                                
//				
//				СпрСвойства.ЗначениеСвойства = ЗначениеСвойства;     
//				Если ВыполнитьОперациюДляОбъекта(СпрСвойства, "запись") = 0 Тогда					
//					Возврат 0;			
//				КонецЕсли;	
//
//				Если Спр.ОсновноеСвойство.Выбран() = 0 Тогда					
//					Спр.ОсновноеСвойство = СпрСвойства.ТекущийЭлемент();
//					Если ВыполнитьОперациюДляОбъекта(Спр, "запись") = 0 Тогда 									
//						Возврат 0;			
//					КонецЕсли;						
//				КонецЕсли;
//				
//			КонецЕсли;   		
//		КонецЕсли;		
//	КонецЕсли;		
//	 
//	МинКоэф = 0;
//	Если (НужноСоздатьЕдИзмерения = 1) И (Результат = 1) Тогда
//		СпрОКЕИ = СоздатьОбъект("Справочник.ОКЕИ");
//		СпрЕд = м_СпрЕд;
//		СпрОКЕИ.НайтиПоНаименованию("шт",0);
//		СпрЕд.ИспользоватьВладельца(Спр.ТекущийЭлемент());
//		СпрЕд.Новый();
//		СпрЕд.Коэффициент = Число(Эл.ПолучитьАтрибут("Unit0"));
//		СпрЕд.ОКЕИ = СпрОКЕИ.ТекущийЭлемент(); 
//		СпрЕд.Вес = Вес;                       
//		МинКоэф = СпрЕд.Коэффициент;
//		Если ВыполнитьОперациюДляОбъекта(СпрЕд, "запись") = 0 Тогда 			
//			Возврат 0;			
//		КонецЕсли;			
//		Спр.БазоваяЕдиница = СпрЕд.ТекущийЭлемент();
//		Если ВыполнитьОперациюДляОбъекта(Спр, "запись") = 0 Тогда 						
//			Возврат 0;			
//		КонецЕсли;	
//		
//		Коэфф2 = Число(Эл.ПолучитьАтрибут("Unit1"));
//		Если Коэфф2 <> 0 Тогда
//			СпрОКЕИ.НайтиПоНаименованию("уп",0);
//			СпрЕд.ИспользоватьВладельца(Спр.ТекущийЭлемент());
//			СпрЕд.Новый();
//			СпрЕд.Коэффициент = Коэфф2;
//			СпрЕд.ОКЕИ = СпрОКЕИ.ТекущийЭлемент();
//			СпрЕд.Вес = Вес*(СпрЕд.Коэффициент/МинКоэф);
//			Если ВыполнитьОперациюДляОбъекта(СпрЕд, "запись") = 0 Тогда 						
//				Возврат 0;			
//			КонецЕсли;	
//			
//			Коэфф3 = Число(Эл.ПолучитьАтрибут("Unit2"));
//			Если Коэфф3 <> 0 Тогда
//				СпрОКЕИ.НайтиПоНаименованию("кор",0);
//				СпрЕд.ИспользоватьВладельца(Спр.ТекущийЭлемент());
//				СпрЕд.Новый();
//				СпрЕд.Коэффициент = Коэфф3;
//				СпрЕд.ОКЕИ = СпрОКЕИ.ТекущийЭлемент();
//				СпрЕд.Вес = Вес*(СпрЕд.Коэффициент/МинКоэф);
//				Если ВыполнитьОперациюДляОбъекта(СпрЕд, "запись") = 0 Тогда 						
//					Возврат 0;			
//				КонецЕсли;	
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;         
//	
//	Возврат Результат;	
//	
//КонецФункции // XMLЗагрузкаСпрНоменклатуры(Эл)
//
////_____________________________________________________________________________
//// Процедура загрузки фотографи, принятой с КПК
//Функция XMLЗагрузкаФотографии(Эл, парТипФото)
//
//	Спр		= м_СпрФото;
//	СпрДок  = м_СпрКпкДок;
//	
//	ПапкаВремФото 	= КаталогВременныхФайлов() + "Photos1C\"; // в этой папке у нас уже содержатся распакованные фото из файла выгрузки
//	ПапкаФото 		= ВернутьКаталогФото(); // в эту папку будем копировать файл фото
//	
//	Идент	= Эл.ПолучитьАтрибут("ObjectID");
//	ТипФото = Число(Эл.ПолучитьАтрибут("ObjectType"));	
//	Если ТипФото <> парТипФото Тогда
//		Возврат 0;
//	КонецЕсли;
//	
//	ФайлКПК = Эл.ПолучитьАтрибут("FileName");
//
//	Статус 	  = Число(Эл.ПолучитьАтрибут("RefState")); // для фотографий параметр пока зарезервирован
//	Коммент	  = Эл.ПолучитьАтрибут("Comment");
//	ВремяСозд = Эл.ПолучитьАтрибут("TimeCrt"); 
//	
//	Найден = 0;
//	ИдентификаторФото = "";
//	Если ТипФото = 2 Тогда // фото документов "Задания"
//		ИдентификаторФото = Идент;
//		Если Спр.НайтиПоРеквизиту("ФайлКПК", ФайлКПК, 1) = 1 Тогда
//			Найден = 1;
//		КонецЕсли;  
//	Иначе 		
//		Если СпрДок.НайтиПоРеквизиту("Идентификатор", Идент, 1) = 0 Тогда
//			ОповеститьОСобытии("Не найден документ, на который ссылается загружаемое фото (идентификатор документа: " + Идент+", фото: """ + ФайлКПК + """)!", "!");
//			ОповеститьОСобытии("Фотография """ + ФайлКПК + """ не  загружена!","!");
//			Возврат 0;
//		КонецЕсли;
//		
//		Док = СпрДок.Документ;
//		Если Док.Выбран() = 0 Тогда
//			ОповеститьОСобытии("Не выбран документ в справочнике ""Документы(КПК)"" (идентификатор документа: " + Идент + """)!","!");
//			ОповеститьОСобытии("Фотография """ + ФайлКПК + """ не  загружена!","!");
//			Возврат 0;
//		КонецЕсли;   		
//		
//		Спр.ВыбратьЭлементыПоРеквизиту("Док", Док, 0, 0);
//		Пока Спр.ПолучитьЭлемент() = 1 Цикл
//			Если СокрЛП(Спр.ФайлКПК) = ФайлКПК Тогда
//				Найден = 1;
//				Прервать;
//			КонецЕсли;
//		КонецЦикла;  		
//	КонецЕсли;
//	
//	Если Найден = 1 Тогда
//		ОповеститьОСобытии("Фотография """ + ФайлКПК + """ уже была ранее загружена.","i");
//		Возврат 0;
//	КонецЕсли;
//		
//	Если Найден = 0 Тогда // фото загружается впервые
//		Спр.Новый();
//		Спр.ФайлКПК 	  = ФайлКПК;
//		Спр.ФайлЦБД		  = ВернутьУникальныйФайл(ПапкаФото, ФайлКПК); // файл при копировании приходится переименовывать, чтобы не допустить совпадения имен файлов загруженных от других агентов
//		Спр.Комментарий   = Коммент;
//		Спр.ДатаСозд	  = ИзвлечьДатуИзXML(ВремяСозд);
//		Спр.ВремяСозд	  = ИзвлечьВремяИзXML(ВремяСозд);
//		Спр.Док			  = Док;
//		Спр.Наименование  = Коммент + ". " + Спр.ФайлЦБД; 
//		Спр.Идентификатор = ИдентификаторФото;
//		ФС.КопироватьФайл(ПапкаВремФото + ФайлКПК, ПапкаФото + СокрП(Спр.ФайлЦБД), 0);
//	КонецЕсли;
//		
//	Результат = ЗаписатьВПротоколЗагрузкуЭлемСпр(Спр, ФайлКПК);		
//	
//	Возврат Результат;  
//	
//КонецФункции //XMLЗагрузкаФотографии(Эл)                                                        
//            
////******************************************************************************
//Функция ЗагрузкаДанныхТрека(ФайлТрека)    
//	 	 
//	РежимЗагрузкиТреков = Константа.кпкРежимЗагрузкиТреков;   
//	           
//	СпрТреки = СоздатьОбъект("Справочник.кпкГПСТреки");
//	СпрТреки.ИспользоватьВладельца(ВыбАгент);
//	    
//	// Сохраняем целиком файл с треком
//	Если РежимЗагрузкиТреков = 1 Тогда   			
//		
//		// Проверка папки хранения треков
//		ПапкаТреков = СокрЛП(Константа.кпкПапкаТреков); 
//		
//		Если ПустоеЗначение(ПапкаТреков) = 1 Тогда
//			ОповеститьОСобытии("Укажите значение константы ""Папка треков"" на форме настройки констант для Агент+!", "!", 1);
//			Возврат 0;
//		КонецЕсли;
//					 			
//		Если ФС.СуществуетФайл(ПапкаТреков) = 0 Тогда		
//			ОповеститьОСобытии("Не найден каталог, указанный в константе ""Папка треков""!", "!", 1);
//			Возврат 0;   
//		КонецЕсли;   		
//		
//		АгентИнфо = ПолучитьДанныеАгента(ВыбАгент);
//		Если АгентИнфо.Выбран() = 1 Тогда
//			ИдАгента = СокрЛП(АгентИнфо.Идентификатор);
//		Иначе
//			Возврат 0;
//		КонецЕсли;
//		
//		Попытка    				
//			СтрДата  = СтрЗаменить(Строка(ТекущаяДата()), ".", "");   			                                                      
//			СтрВремя = СтрЗаменить(Строка(ТекущееВремя()), ":", "");
//		
//			ИмяФ = "Track_" + СтрДата + СтрВремя + "_" + Строка(ИдАгента) + ".txt";
//			ПутьКФайлуТрека = ПапкаТреков + "\" + ИмяФ;
//			ФС.КопироватьФайл(ФайлТрека, ПутьКФайлуТрека, 0);  			
//		Исключение			
//			ОповеститьОСобытии("Не удалось скопировать файл треков!", "!");			
//			ОповеститьОСобытии(ОписаниеОшибки(), "!");	
//			Возврат 0; 			
//		КонецПопытки;      
//		               
//		Если СпрТреки.НайтиПоРеквизиту("Ключ", ИмяФ, 0) = 1 Тогда
//			// Данный файл уже был загружен ранее
//			Возврат 1;
//		КонецЕсли;
//		
//		СпрТреки.Новый(); 
//		СпрТреки.Владелец       = ВыбАгент;	
//		СпрТреки.ДатаСоздания   = ТекущаяДата();
//		СпрТреки.ВремяСоздания  = ТекущееВремя();				
//		СпрТреки.ИмяФайлаТреков = ИмяФ;		 
//		СпрТреки.Ключ           = ИмяФ;		
//		Если ВыполнитьОперациюДляОбъекта(СпрТреки, "запись") = 0 Тогда 						
//			Возврат 0;			
//		КонецЕсли;	
//
//	Иначе
//		
//		ТекстФайл = СоздатьОбъект("Текст");	        
//		
//		Попытка 		
//			ТекстФайл.Открыть(ФайлТрека); 						
//		Исключение 
//			ОповеститьОСобытии("Не удалось открыть файл трека " + ФайлТрека, "!");
//		КонецПопытки;		                            
//		
//		Для п = 1 По ТекстФайл.КоличествоСтрок() Цикл  				
//			
//			СтрокаТекста = СокрЛП(ТекстФайл.ПолучитьСтроку(п));												
//			ПозДаты      = Найти(СтрокаТекста, СимволТабуляции);                                 
//			
//			Если ПозДаты>0 Тогда
//			
//				Широта  = 0;
//				Долгота = 0;
//				
//				Создавать = 0;				
//				
//				ДатаВремя = СокрЛП(Лев(СтрокаТекста, ПозДаты));
//				
//				ДатаСоздания = ИзвлечьДатуИзXML(ДатаВремя);
//				ВремяСоздания = ИзвлечьВремяИзXML(ДатаВремя);  
//				
//				//Вычисляем широту
//				СтрокаТекста = Прав(СтрокаТекста, СтрДлина(СтрокаТекста) - ПозДаты);
//				ПозШир = Найти(СтрокаТекста, СимволТабуляции);           
//				Если ПозШир > 0 Тогда                                      
//					Широта  = Число(СтрЗаменить(Лев(СтрокаТекста, ПозШир), ",", "."));                            						
//				КонецЕсли;  
//				
//				// Вычисляем долготу и скорость
//				СтрокаТекста = Сред(СтрокаТекста, ПозШир+1);
//				
//				ПозДол = Найти(СтрокаТекста, СимволТабуляции);           
//				
//				Если ПозДол > 0 Тогда                                      
//					Долгота  = Число(СтрЗаменить(Лев(СтрокаТекста, ПозДол), ",", "."));
//					Скорость = Число(СтрЗаменить(Сред(СтрокаТекста, ПозДол+1), ",", "."));
//				Иначе						
//					Долгота  = Число(СтрЗаменить(СтрокаТекста, ",", "."));
//				КонецЕсли;  				
//				
//				КлючЗаписи = Строка(ДатаСоздания) + "_" + Строка(ВремяСоздания) + "_" + СокрЛП(Широта) + "_" + СокрЛП(Долгота);
//				
//				Если СпрТреки.НайтиПоРеквизиту("Ключ", КлючЗаписи, 0) = 1 Тогда					
//					Продолжить;
//				КонецЕсли;
//				
//				СпрТреки.Новый(); 
//				СпрТреки.Владелец      = ВыбАгент;
//				СпрТреки.ГПСШирота     = Широта; 
//				СпрТреки.ГПСДолгота    = Долгота;
//				СпрТреки.ДатаСоздания  = ДатаСоздания;
//				СпрТреки.ВремяСоздания = ВремяСоздания;				 
//				СпрТреки.Ключ 		   = КлючЗаписи;				 
//				СпрТреки.Скорость 	   = Скорость;				
//				Если ВыполнитьОперациюДляОбъекта(СпрТреки, "запись") = 0 Тогда 						
//					Продолжить;			
//				КонецЕсли;				
//				
//			КонецЕсли;
//
//		КонецЦикла;	
//		 		
//	КонецЕсли;  
//	
//	Возврат 1;
//	
//КонецФункции //ЗагрузкаДанныхТрека()
// 
//******************************************************************************   

Процедура ОчиститьПапкуВременныхФото()

	ПапкаВремФото = КаталогВременныхФайлов() + "Photos1C";
	Если ФС.СуществуетФайл(ПапкаВремФото) = 0 Тогда
		ФС.СоздатьКаталог(ПапкаВремФото);
		Возврат;
	КонецЕсли;
	Спис = СоздатьОбъект("СписокЗначений");
	МаскаФ = ПапкаВремФото + "\*.*";
	ИмяФ = ФС.НайтиПервыйФайл(МаскаФ);
	Пока ПустоеЗначение(ИмяФ) = 0 Цикл
		Спис.ДобавитьЗначение(ИмяФ,"");
		ИмяФ = ФС.НайтиСледующийФайл(); 
	КонецЦикла;
	КолФайлов = Спис.РазмерСписка();
	Если КолФайлов <> 0 Тогда
		Состояние("Удаление файлов...");
		Для Поз = 1 По КолФайлов Цикл
			ФС.УдалитьФайл(Спис.ПолучитьЗначение(Поз));
		КонецЦикла;
		Состояние("");
	КонецЕсли;
	
КонецПроцедуры
//
////_____________________________________________________________________________
//Функция XMLЗагрузкаДанных(ФайлЗагрузки, ФайлТрека)
//   
//	Если ЗагруженV7Plus = 0 Тогда
//        ОповеститьОСобытии("Загрузка данных в формате XML невозможна, т.к. не загружена компонента V7Plus.dll!", "!!!");
//		Возврат 0;
//	КонецЕсли;
//
//	Анализатор		=	СоздатьОбъект("AddIn.XMLParser");
//	XML_Документ	=	Анализатор.СоздатьДокумент();
//	
//	Если ПустоеЗначение(XML_Документ) = 1 Тогда	
//		ОповеститьОСобытии("Формат файла не XML!","!");
//		Возврат 0; 
//	КонецЕсли;
//
//	XML_Документ.Загрузить(ФайлЗагрузки);
//	УзелAgentP	= XML_Документ.ВыбратьУзел("//AgentPlus");
//	Если ПустоеЗначение(УзелAgentP) = 1 Тогда
//	    ОповеститьОСобытии("Файл не является файлом выгрузки данных с КПК!", "!!!");
//		Возврат 0; 
//	КонецЕсли;
//	
//	Destination = УзелAgentP.ПолучитьАтрибут("Destination");
//	Если Destination<>"ToMainDB" Тогда
//	    ОповеститьОСобытии("Файл не является файлом выгрузки данных с КПК!", "!!!");
//		Возврат 0;
//	КонецЕсли;
//	
//	DB = УзелAgentP.ПолучитьАтрибут("DB");
//	Если ПустоеЗначение(Константа.КПКНазваниеБД) = 0 Тогда
//	    НазваниеБД = ВРег(СокрЛП(Константа.КПКНазваниеБД));
//		Если ВРег(DB) <> НазваниеБД Тогда
//			ОповеститьОСобытии("Данные, выгруженные из КПК, предназначены для другой базы данных!","!");
//			ОповеститьОСобытии("Название базы данных в файле выгрузки: " + DB, "i");
//			Возврат 0;
//		КонецЕсли;
//	КонецЕсли;  
//	
//	ОтветитьНаЗапрос = 0;
//
//	ТекАгент	= 0;
//	Agent 		= УзелAgentP.ПолучитьАтрибут("Agent");
//	AgentID 	= УзелAgentP.ПолучитьАтрибут("AgentID");
//	ОповеститьОСобытии("Агент: " + Agent, "i");
//	Если м_СпрАгенты.НайтиПоРеквизиту("Идентификатор", AgentID, 1) = 1 Тогда
//		АгентИнфо = м_СпрАгенты.ТекущийЭлемент();
//		ВыбАгент = АгентИнфо.Ссылка;
//	Иначе
//	    ОповеститьОСобытии("Торговый агент в справочнике не найден","!");
//		ОповеститьОСобытии("Код агента: " + AgentID, "i");
//	КонецЕсли;
//	
//	MStoreID 	= УзелAgentP.ПолучитьАтрибут("MStoreID"); //идентификатор передвижного склада (автомобиля) закрепленного за агентом
//	СпрСкл = СоздатьОбъект("Справочник.кпкСклады");
//	Если СпрСкл.НайтиПоРеквизиту("Идентификатор", MStoreID, 1) = 1 Тогда
//	    ПередвижнойСклад = СпрСкл.ТекущийЭлемент().Ссылка;
//	Иначе
//		ПередвижнойСклад = ПолучитьПустоеЗначение("Справочник.Склады");
//	КонецЕсли;
//	
//	TimeLoadedData = УзелAgentP.ПолучитьАтрибут("TimeLoadedData");
//	ОповеститьОСобытии("Время загрузки данных в КПК: " + ДатаВремяXMLВФормат1С(TimeLoadedData),"i");
//	
//	//Загрузка созданных/отредактированных в КПК элементов справочников
//	ВыборкаСпр = УзелAgentP.ВыбратьУзлы("Ref");
//	Для Сч = 0 По ВыборкаСпр.КоличествоУзлов() - 1 Цикл
//		Эл		= ВыборкаСпр.ПолучитьУзел(Сч);
//		ВидСпр 	= Эл.ПолучитьАтрибут("RefType");
//		Если ВидСпр = "Client" Тогда
//			XMLЗагрузкаСпрКлиента(Эл);
//		ИначеЕсли ВидСпр = "TPoint" Тогда
//			Если ИспТочек = 1 Тогда
//				XMLЗагрузкаСпрТоргТочки(Эл);
//			КонецЕсли;
//		ИначеЕсли ВидСпр = "BarCode" Тогда
//			XMLЗагрузкаСпрШтрихКода(Эл);
//		ИначеЕсли ВидСпр = "Price" Тогда
//			XMLЗагрузкаСпрНоменклатуры(Эл);
//		КонецЕсли;
//	КонецЦикла;   
//	 
//	СформироватьТаблицуВыгружаемыхТиповЦен();
//		
//	//Загрузка документов
//	ВыборкаДокументов = УзелAgentP.ВыбратьУзлы("Doc");
//	
//	КолДок = 0;  
//	 
//	// Загружаем сначала фото, которые созданы из документов Задания
//	ВыборкаСпр = УзелAgentP.ВыбратьУзлы("Ref");
//	КолФото = 0;
//	Для Сч = 0 По ВыборкаСпр.КоличествоУзлов() - 1 Цикл
//		Эл		= ВыборкаСпр.ПолучитьУзел(Сч);
//		ВидСпр 	= Эл.ПолучитьАтрибут("RefType");
//		Если ВидСпр = "Photos" Тогда			
//			Если XMLЗагрузкаФотографии(Эл, 2) = 1 Тогда
//				КолФото = КолФото + 1;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;  	
//	
//	Для Сч = 0 По ВыборкаДокументов.КоличествоУзлов() - 1 Цикл
//		
//		Эл = ВыборкаДокументов.ПолучитьУзел(Сч);
//		
//		DocState = Число(Эл.ПолучитьАтрибут("DocState"));
//		Если DocState <> 1 Тогда //загружаем только проведенные документы
//		    Продолжить;
//		КонецЕсли;
//		
//		Операция	= Эл.ПолучитьАтрибут("DocType");
//		Если Операция = "Order" Тогда //заявка
//			Если XMLЗагрузкаЗаявки(Эл, ПередвижнойСклад) = 0 Тогда
//			    Продолжить;
//			КонецЕсли;
//		ИначеЕсли Операция = "Sale" Тогда //реализация
//			Если XMLЗагрузкаРеализации(Эл, ПередвижнойСклад, 0) = 0 Тогда
//			    Продолжить;
//			КонецЕсли;
//		ИначеЕсли Операция = "RSale" Тогда //реализация
//			Если XMLЗагрузкаРеализацииРозничной(Эл, ПередвижнойСклад) = 0 Тогда
//			    Продолжить;
//			КонецЕсли;
//		ИначеЕсли Операция = "Arrival" Тогда //возврат от покупателя (поступление)
//			Если XMLЗагрузкаПоступления(Эл, ПередвижнойСклад) = 0 Тогда
//			    Продолжить;
//			КонецЕсли;
//		ИначеЕсли Операция = "Cash" Тогда //приходный или расходный ордер
//			Если XMLЗагрузкаОрдера(Эл) = 0 Тогда
//			    Продолжить;
//			КонецЕсли;
//		ИначеЕсли Операция = "Merch" Тогда //мерчендайзинг
//			Если XMLЗагрузкаМерчендайзинга(Эл) = 0 Тогда
//			    Продолжить;
//			КонецЕсли;
//		ИначеЕсли Операция = "Visit" Тогда //посещение
//			Если XMLЗагрузкаПосещения(Эл) = 0 Тогда
//			    Продолжить;
//			КонецЕсли;
//		ИначеЕсли Операция = "Move" Тогда //перемещение
//			Если XMLЗагрузкаПеремещения(Эл, ПередвижнойСклад) = 0 Тогда
//			    Продолжить;
//			КонецЕсли;
//		ИначеЕсли Операция = "Inventory" Тогда //инвентаризация
//			Если XMLЗагрузкаИнвентаризации(Эл, ПередвижнойСклад) = 0 Тогда
//			    Продолжить;
//			КонецЕсли; 
//		ИначеЕсли Операция = "Task" Тогда //инвентаризация
//			Если XMLЗагрузкаЗаданий(Эл) = 0 Тогда
//			    Продолжить;
//			КонецЕсли;
//		КонецЕсли;
//		
//		КолДок = КолДок + 1;
//		
//	КонецЦикла;  
//	                                           
//	// Загружаем фото, после загрузки остальных документов, 
//	// т.к. они могут ссылаться на загружаемые документы
//	ВыборкаСпр = УзелAgentP.ВыбратьУзлы("Ref");
//	Для Сч = 0 По ВыборкаСпр.КоличествоУзлов() - 1 Цикл
//		Эл		= ВыборкаСпр.ПолучитьУзел(Сч);
//		ВидСпр 	= Эл.ПолучитьАтрибут("RefType");
//		Если ВидСпр = "Photos" Тогда
//			
//			Если XMLЗагрузкаФотографии(Эл, 1) = 1 Тогда
//				КолФото = КолФото + 1;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;    
//	
//	Если КолФото <> 0 Тогда // из файла были загружены ссылки на фотографии и сами фотографии, нужно удалить файлы из временной папки
//		ОчиститьПапкуВременныхФото();		
//	КонецЕсли;
//	
//	XMLЗагрузкаЗапросов(УзелAgentP);
//	
//	Если ФС.СуществуетФайл(ФайлТрека) = 1 Тогда 
//		Состояние("Загрузка данных по трекам перемещения...");
//		Результат = ЗагрузкаДанныхТрека(ФайлТрека);
//		ФС.УдалитьФайл(ФайлТрека);                            
//		Состояние("");
//	КонецЕсли;
//	
//	ОповеститьОСобытии("Загрузка завершена. Загружено документов: " + КолДок, "i");
//	
//	Если КолФото <> 0 Тогда
//		ОповеститьОСобытии("Загружено фотографий: " + КолФото, "i");
//	КонецЕсли;
//	
//	ФС.УдалитьФайл(ФайлЗагрузки);
//	
//	Возврат 1;
//	
//КонецФункции //XMLЗагрузкаДанных()

//******************************************************************************
// ЗагрузитьДанные()
//
// Параметры: 
//  
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Основная процедура загрузки данных с КПК
//
Функция ЗагрузитьДанные(Знач ФайлЗагрузки = "", Агент = 0) 
	
	ТипОбмена = 2;
	
	СпособОбмена = списСпособОбмена.ПолучитьЗначение(списСпособОбмена.ТекущаяСтрока());	
	
	Если МобильноеПриложение = ВидАгентПлюсМТ Тогда	
		КаталогОбменаНаКПК = "\Program Files\agentp2\exchange\";
	Иначе	               
		КаталогОбменаНаКПК = "\My Documents\Personal\";
	КонецЕсли;     
	
	
	Если МобильноеПриложение = ВидАгентПлюсМТ Тогда
		оИмяФайла = "ToCDB";		
	Иначе                   
		оИмяФайла = "To1C";		
	КонецЕсли;		
	
	Если (флАвтоОбменСКПК = 1) И (СпособОбмена = "ПрямоеПодключение") Тогда
		
		Если Константа.КпкШифроватьДанные <> 0 Тогда
		    ПослРасширение = ".crp";
		Иначе
			ПослРасширение = "";
		КонецЕсли;	
        		
		Если флАрхив = 1 Тогда
			ИмяФайла = оИмяФайла + ".zip" + ПослРасширение;
		Иначе
			ИмяФайла = оИмяФайла + ".xml" + ПослРасширение;
		КонецЕсли;    
//		
//		Результат = КПКОбъект.CeRapiInit();
//		Если Результат <> 0 Тогда
//			СтрОшибки = КПКОбъект.ErrDescription(Результат);
//		    Предупреждение(СтрОшибки,10);
//			Возврат 0;
//		КонецЕсли;
//		
//		ФайлНаКПК = КаталогОбменаНаКПК + ИмяФайла;
//		Результат = КПКОбъект.CeFileExists(ФайлНаКПК);
//		
//		Если Результат = 100 Тогда
//			КПКОбъект.CeRapiUnInit();
//		    Предупреждение("Файл загрузки (""" + ИмяФайла + """) на КПК не существует!", 10);
//			ОповеститьОСобытии("Повторите попытку еще раз, если ситуация повторится, то проверьте настройки в КПК: ", "!", 0);
//			Если флАрхив = 1 Тогда
//			    ОповеститьОСобытии("режим использования архивов ZIP на нем должен быть ВКЛЮЧЕН.", "", 0);
//			Иначе
//				ОповеститьОСобытии("режим использования архивов ZIP на нем должен быть ВЫКЛЮЧЕН.", "", 0);
//			КонецЕсли;
//			Возврат 0;
//		ИначеЕсли Результат = 3 Тогда
//			КПКОбъект.CeRapiUnInit();
//			Предупреждение("КПК не подключен!", 10);
//			Возврат 0;
//		КонецЕсли;
//		
//		Если ФайлЗагрузки = "" Тогда
//		    ФайлЗагрузки = КаталогВременныхФайлов() + ИмяФайла;
//		КонецЕсли;
//		
//		Результат = КПКОбъект.CeGetFile(ФайлНаКПК, ФайлЗагрузки);
//		Если Результат<>0 Тогда
//			СтрОшибки = КПКОбъект.ErrDescription(Результат);
//			ОповеститьОСобытии(СтрОшибки, "!", 0);
//		    Предупреждение(СтрОшибки + ". Данные с КПК не получены!", 10);
//			Возврат 0;
//		КонецЕсли;
//	
//	    //Результат = КПКОбъект.CeDeleteFile(ФайлНаКПК);
//		
//		КПКОбъект.CeRapiUnInit();
//		
	Иначе //тестовая загрузка из файла в корне диска C:  		
	//	Каталог  = "";     
	//	ИмяФайла = "";
	//	Стр = "Файл загрузки c КПК (*.zip, *.xml, *.crp)|*.zip; *.xml; *.crp";
	//	Если ФС.ВыбратьФайл(0, ИмяФайла, Каталог, "Выберите файл", Стр, , ) = 1 Тогда		
	//		ФайлЗагрузки = Каталог + ИмяФайла;
	//	Иначе
	//		ОповеститьОСобытии("Файл загрузки не выбран!", "!", 0);
	//		Возврат 0;
	//	КонецЕсли;                        			
	//
	//	Если ФС.СуществуетФайл(ФайлЗагрузки) = 0 Тогда
	//		ОповеститьОСобытии("Файл загрузки не найден!", "!", 0);
	//		Возврат 0;
	//	КонецЕсли;
	//	ОповеститьОСобытии("Загрузка из файла " + ФайлЗагрузки, "i", 0);
	КонецЕсли;
	
	Если ВРег(Прав(ФайлЗагрузки,3)) = "CRP" Тогда //зашифрованный файл
	    //расшифровываем файл
		РасшифрованныйФайл = Лев(ФайлЗагрузки, СтрДлина(ФайлЗагрузки) - 4);
		КПКОбъект.ШифрУстПароль(СокрП(Константа.КпкКриптоПароль));
		Результат = КПКОбъект.РасшифроватьФайл(ФайлЗагрузки, РасшифрованныйФайл);
		Если Результат<>0 Тогда
		    ОкноСостояние(КПКОбъект.ErrDescription(Результат),"!");
			Возврат 0;
		Иначе
			ФС.УдалитьФайл(ФайлЗагрузки);
			ФайлЗагрузки = РасшифрованныйФайл; //файл успешно расшифрован
		КонецЕсли;
	КонецЕсли;
	
	Если ВРег(Прав(ФайлЗагрузки,3)) = "ZIP" Тогда //архивированный файл
		//Определяем пароль расшифровки архива, пароль привязан к каждому агенту
		Если Агент = 0 Тогда
		    Агент = ВыбАгент;
		КонецЕсли;
		АгентИнфоЛок = ПолучитьДанныеАгента(Агент);
		Если ПустоеЗначение(АгентИнфоЛок) = 1 Тогда
			Пароль = "";
		Иначе
			Пароль = СокрП(АгентИнфоЛок.КпкПарольZip);
		КонецЕсли;  
		
		ПапкаРаспаковки = КаталогВременныхФайлов();
		АрхивФото = ПапкаРаспаковки + "PhotosToCDB.zip";
		Если ФС.СуществуетФайл(АрхивФото) = 1 Тогда
			ФС.УдалитьФайл(АрхивФото);
		КонецЕсли;

		ОчиститьПапкуВременныхФото();
		
		ОкноСостояние("Распаковка...");    
		
		ПапкаРаспаковки = КаталогВременныхФайлов();
		КПКОбъект.АрхУстПароль(Пароль);
		Результат = КПКОбъект.АрхРаспаковать(ФайлЗагрузки, ПапкаРаспаковки);
		Если Результат<>0 Тогда
			ОкноСостояние(КПКОбъект.CeErrDescription(Результат),"!");
			ОповеститьОСобытии("Ошибка распаковки!", "!!!");
			Возврат 0;
		КонецЕсли;  		
		
		Если ФС.СуществуетФайл(АрхивФото) = 1 Тогда // значит в архиве с файлом загрузки был и архив фотографий
			ОповеститьОСобытии("Файл загрузки содержит архив фотографий.","i");
			КПКОбъект.АрхУстПароль("");
			Результат = КПКОбъект.АрхРаспаковать(АрхивФото, ПапкаРаспаковки + "Photos1C");
			Если Результат <> 0 Тогда
				ОповеститьОСобытии("Ошибка распаковки архива фотографий: " + АрхивФото, "!!!");
			КонецЕсли;
		КонецЕсли;
		
		ОкноСостояние("");
		
		//определяем файл, который был распакован
		ФайлЗагрузки = ПапкаРаспаковки + оИмяФайла + ".xml";
		Если ФС.СуществуетФайл(ФайлЗагрузки) = 0 Тогда
			ОповеститьОСобытии("В архиве не найдено файлов выгрузки!", "!");
			Возврат 0;
		КонецЕсли;  
		
	КонецЕсли;            
	       
	ОтветнаяВыгрузка = 1;
	
	ОкноСостояние("Загрузка...");
//	
	м_ДокИнв	 = СоздатьОбъект("Документ.Инвентаризация");
	м_ДокРН		 = СоздатьОбъект("Документ.РасходнаяНакладная");
	м_ДокПН		 = СоздатьОбъект("Документ.ПриходнаяНакладная");
//	м_ДокМерч	 = СоздатьОбъект("Документ.кпкМерчендайзинг");
//	м_ДокПКО	 = СоздатьОбъект("Документ.ПКО");
//	м_ДокРКО	 = СоздатьОбъект("Документ.РКО");
//	м_ДокПосещ	 = СоздатьОбъект("Документ.кпкПосещение");
//	м_ДокЗадание = СоздатьОбъект("Документ.кпкЗаданиеАгента");
//	м_ДокПоиска  = СоздатьОбъект("Документ");
//	
//
//	м_СпрАгенты  = СоздатьОбъект("Справочник.кпкАгенты");
//	м_СпрФирм	 = СоздатьОбъект("Справочник.Фирмы");
//	м_СпрКл		 = СоздатьОбъект("Справочник.Контрагенты");
//	м_СпрТТ		 = СоздатьОбъект("Справочник.кпкТорговыеТочки");
//	м_СпрСк		 = СоздатьОбъект("Справочник.Скидки");
//	м_СпрТов	 = СоздатьОбъект("Справочник.Номенклатура");
//	м_СпрЕд		 = СоздатьОбъект("Справочник.Единицы");
//	м_СпрТипЦен	 = СоздатьОбъект("Справочник.ТипыЦен");
	м_СпрКпкДок	 = СоздатьОбъект("Справочник.кпкДокументы");
//	м_СпрПосещ	 = СоздатьОбъект("Справочник.кпкРезультатыПосещения");
//	м_СпрЗапросы = СоздатьОбъект("Справочник.кпкЗапросы");       
//	м_СпрФото	 = СоздатьОбъект("Справочник.кпкФотоКДокументам");
	
	//Если МобильноеПриложение = ВидАгентПлюсМТ Тогда            
		
		Результат = XMLЗагрузитьДанныеДляМобильнойТорговли(ФайлЗагрузки,ВыбАгент);	
    
	//Иначе
	//	
	//	Результат = XMLЗагрузкаДанных(ФайлЗагрузки, ФайлТрека);	
	//	
	//КонецЕсли;
//	
//	~М1:
//	
	Если ОтветнаяВыгрузка = 1 Тогда
	
		Состояние("Выгрузка ответных данных...");		
		
		СпособОбмена = списСпособОбмена.ПолучитьЗначение(списСпособОбмена.ТекущаяСтрока());	
		Если СпособОбмена = "ПрямоеПодключение"Тогда 
			ВыгрузитьДанные(ИмяФайла, 1);                          
		ИначеЕсли СпособОбмена = "Сервер" Тогда 
			ВыгрузитьДанныеНаАПСервер(ВыбАгент, 1);    
		КонецЕсли;
		
	КонецЕсли;
	
	ОкноСостояние();   	
	
	Возврат Результат;

КонецФункции // ЗагрузитьДанные()  

//******************************************************************************
// Возвращает строку, предсталяющую собой путь к сетевой папке обмена данными с Агент+ Сервером
// Если возвращается пустая строка, то это означает ошибку
// Если параметр "Принудительно" не пустой, то значение папки обмена устанавливается заново из константы "кпкАпсПапкаОбменаССервером"
Функция АпсПолучитьПапкуОбменаССервером(Принудительно = 0)
	
	//Если Принудительно = 0 Тогда
	//    ПапкаСервера = КПКОбъект.АпсПапкаОбмена();
	//Иначе
		ПапкаСервера = "";
	//КонецЕсли;
	
	Если ПустоеЗначение(ПапкаСервера) = 1 Тогда
		ПапкаСервера = СокрЛП(Константа.кпкАпсПапкаОбменаССервером);
		Если ПустоеЗначение(ПапкаСервера) = 1 Тогда
		    ОповеститьОСобытии("Не определена папка обмена данными для ""Агент Плюс СОД""!","!");
			ОповеститьОСобытии("Причина - пустое значение константы ""Папка обмена""!","!");
			Возврат "";
		КонецЕсли;
		
		КПКОбъект.АпсУстПапкуОбмена(ПапкаСервера);
		ПапкаСервера = КПКОбъект.АпсПапкаОбмена();
		Если ПустоеЗначение(ПапкаСервера) = 1 Тогда
		    ОповеститьОСобытии("Не удалось установить папку обмена данными для ""Агент Плюс СОД""!", "!!!");
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПапкаСервера;
	
КонецФункции

//******************************************************************************
//  Вызывается при выборе флажка "Включить автообмен" ("флАвтообменССервером") (флажок на закладке "Агент+ Сервер")
//  При выборе флажка включается режим оповещения Агент+ сервером 1С:Предприятия о поступлении новых данных с КПК.
//  Оповещение проводится через обработчик внешних событий 1С:Предприятия, т.е. через предопределенную процедуру 
//	ОбработкаВнешнегоСобытия()
Процедура флАвтообменССерверомВыбор()
	
	Если флАвтообменССервером = 1 Тогда
		ПапкаОбмена = АпсПолучитьПапкуОбменаССервером(1);
		Если ПустоеЗначение(ПапкаОбмена) = 1 Тогда
		    Возврат;
		КонецЕсли;		

	    КпкОбъект.АпсВключитьСервер(); // включение оповещения
	Иначе
		КпкОбъект.АпсОтключитьСервер();// отключение оповещения
	КонецЕсли;
	
КонецПроцедуры // флАвтообменССерверомВыбор()

//******************************************************************************
//Вызывается для установки / снятия доступности элементов диалога обработки, отвечающих
//за работу с Агент+ Сервером
Процедура ВклДоступностьРаботыССервером(Режим)
	Форма.флАвтообменССервером.Доступность(Режим);
	Форма.кнОбновитьИзСервера.Доступность(Режим);	
	флАвтообменССервером = Режим; 
	флАвтообменССерверомВыбор()	
КонецПроцедуры

//******************************************************************************
Процедура списСпособОбменаВыбор()  
	
	ТекЗначение = списСпособОбмена.ПолучитьЗначение(списСпособОбмена.ТекущаяСтрока());   
	
	//Поз = Форма.Закладки.НайтиЗначение("Почта");
	//Если ТекЗначение = "Почта" Тогда
	//	Если Поз = 0 Тогда
	//	    Форма.Закладки.ДобавитьЗначение("Почта","Почта");		
	//	КонецЕсли;
	//ИначеЕсли Поз<> 0 Тогда
	//	Форма.Закладки.УдалитьЗначение(Поз);
	//КонецЕсли;
	//
	//Поз = Форма.Закладки.НайтиЗначение("ФТП");
	//Если ТекЗначение = "ФТП" Тогда
	//	Если Поз = 0 Тогда
	//	    Форма.Закладки.ДобавитьЗначение("ФТП","ФТП");		
	//	КонецЕсли;
	//ИначеЕсли Поз<> 0 Тогда
	//	Форма.Закладки.УдалитьЗначение(Поз);
	//КонецЕсли;
	//
	Поз = Форма.Закладки.НайтиЗначение("Сервер");
	Если ТекЗначение = "Сервер" Тогда
		Если Поз = 0 Тогда
		    Форма.Закладки.ДобавитьЗначение("Сервер","Агент Плюс СОД");		
			Если ПустоеЗначение(Константа.кпкАпсПапкаОбменаССервером) = 1 Тогда
				ОчиститьОкноСообщений();
			    ОповеститьОСобытии("Не установлено значение константы ""Папка обмена с сервером""." + 
								   "Обмен данными через службу ""Агент Плюс СОД"" невозможен!", "!", 1);
				ВклДоступностьРаботыССервером(0);
			Иначе
				ВклДоступностьРаботыССервером(1);				
				флАвтообменССерверомВыбор();     				
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Поз<> 0 Тогда
		Форма.Закладки.УдалитьЗначение(Поз);	
	КонецЕсли;
	
КонецПроцедуры // списСпособОбменаВыбор()

////******************************************************************************
//Процедура кнАгентОпределитьВыбор(Подключить = 1) 
//	
//	Если Подключить = 1 Тогда
//	    Результат = КПКОбъект.CeRapiInit();
//	Иначе
//		Результат = 0;
//	КонецЕсли;      
//	
//	Если Результат = 0 Тогда
//		
//		ПутьВРеестре = "Software\AgentPlus\AgentP";
//		
//		ВыбАгент   	= 0;
//		ИдАгента 	= КПКОбъект.CeRegQueryValue("HKEY_LOCAL_MACHINE",ПутьВРеестре,"AgentID");
//		ИмяАгента	= КПКОбъект.CeRegQueryValue("HKEY_LOCAL_MACHINE",ПутьВРеестре,"Agent");
//		
//		Если ПустоеЗначение(ИдАгента)=0 Тогда
//			Спр = СоздатьОбъект("Справочник.кпкАгенты");
//			Если Спр.НайтиПоРеквизиту("Идентификатор",ИдАгента,1)=1 Тогда
//				ВыбАгент = Спр.ТекущийЭлемент().Ссылка;
//				списСпособОбмена.ТекущаяСтрока(1); //устанавливаем способ обмена как "Прямое подключение"
//				списСпособОбменаВыбор();
//			Иначе
//				ОповеститьОСобытии("В КПК установлен идентификатор агента """ + ИдАгента + """." + 
//								   "В справочнике ""Агенты"" элемента с таким кодом не существует!", "!", 0);
//				ОповеститьОСобытии("Наименование агента в КПК: " + ИмяАгента, "i", 0);
//			КонецЕсли;
//		КонецЕсли;
//		
//		ВыбАгентВыбор();
//		Если Подключить = 1 Тогда
//			КПКОбъект.CeRapiUnInit();
//		КонецЕсли;
//	Иначе
//		ОкноСостояние("КПК: " + КПКОбъект.CeErrDescription(Результат),"!");
//	КонецЕсли; 
//	
//КонецПроцедуры //кнАгентОпределитьВыбор
//
//******************************************************************************
Процедура ОткрытьКарточкуАгента() 	
	
	Если ВыбАгент.Выбран() = 1 Тогда		
		АгентИнфо = ПолучитьДанныеАгента(ВыбАгент);
		Если АгентИнфо.Выбран() = 1 Тогда
			ОткрытьФормуМодально(АгентИнфо, Контекст);
			ВыбАгентВыбор();
		КонецЕсли;				
	КонецЕсли;
	
КонецПроцедуры

////******************************************************************************
//Функция ОтправитьПисьмо(Адрес, Заголовок="", Файл="", Текст="") Экспорт
//	
//	Попытка
//		Почта = СоздатьОбъект("AddIn.V7Mail");
//	Исключение 
//		Предупреждение("Не удалось создать объект Addin.V7Mail!");
//		Возврат 0;
//	КонецПопытки;
//	
//	Если ТипЗначенияСтр(Адрес) = "Справочник" Тогда
//		Адрес = СокрЛП(Адрес.ЭлПочта);
//		Если ПустоеЗначение(Адрес) = 1 Тогда
//			Предупреждение("Не задан адрес получателя!");
//			Возврат 0;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если (ТипЗначенияСтр(Файл) <> "СписокЗначений") И (ПустоеЗначение(Файл) = 0) Тогда
//		Если Фс.СуществуетФайл(СокрЛП(Файл)) = 0 Тогда
//			ОповеститьОСобытии("Файл не существует - " + СокрЛП(Файл), "!");
//			Возврат 0;
//		КонецЕсли; 
//	КонецЕсли;
//	
//	Попытка
//		Почта.Подключиться(); // Параметры подключения: 
//						      // ("1C", <ИмяАбонента>, <Пароль>, <КаталогПочтовогоУзла>)			
//						      // ("MAPI", <КонфигурацияПодключения>, <Пароль>)
//
//		Почта.НовоеСообщение();
//		        
//		ФлАдресЗадан = 0;
//		Если ТипЗначенияСтр(Адрес) = "СписокЗначений" Тогда
//			Для СчАдресов = 1 По Адрес.РазмерСписка() Цикл
//			    СтрАдрес = Адрес.ПолучитьЗначение(СчАдресов);
//				//СтрАдрес = ?(Лев(СтрАдрес, 5)="SMTP:", СтрАдрес, "SMTP:" + СтрАдрес);
//				Почта.ДобавитьАдрес(СтрАдрес);
//				ФлАдресЗадан = 1;
//			КонецЦикла;
//		ИначеЕсли ПустоеЗначение(Адрес) = 0 Тогда
//			//СтрАдрес = ?(Лев(Адрес, 5)="SMTP:", Адрес, "SMTP:" + Адрес);
//			Почта.ДобавитьАдрес(Адрес);
//			ФлАдресЗадан = 1;
//		КонецЕсли;
//		
//		Если ФлАдресЗадан = 0 Тогда
//			Предупреждение("Не задан адрес получателя!");
//			Возврат 0;
//		КонецЕсли;
//		
//		Если ТипЗначенияСтр(Файл) = "СписокЗначений" Тогда
//			Для СчФайлов = 1 По Файл.РазмерСписка() Цикл
//			    СтрФайл = СокрЛП(Файл.ПолучитьЗначение(СчФайлов));
//				Если Фс.СуществуетФайл(СтрФайл) = 0 Тогда
//					Предупреждение("Файл не существует - " + СокрЛП(СтрФайл));
//					Возврат 0;
//				КонецЕсли;
//				Почта.ДобавитьФайл(СтрФайл);
//			КонецЦикла;
//		ИначеЕсли ПустоеЗначение(Файл) = 0 Тогда
//				Почта.ДобавитьФайл(СокрЛП(Файл))
//		КонецЕсли;
//		
//		Почта.Заголовок		= Заголовок;
//		Почта.Текст			= Текст;
//		Почта.Послать();
//		Почта.Отключиться();
//		
//	Исключение
//		Предупреждение("Неудачная попытка! Отправка письма по эл. почте не произведена!");
//		Возврат 0;
//	КонецПопытки;
//	
//	Возврат 1;
//	
//КонецФункции		//	глОтправитьПисьмо()
//
////******************************************************************************
//// ПочтаОтправитьПисьмо()
////
//// Параметры: 
////  
////
//// Возвращаемое значение:
////  1 - письмо отправлено
////	0 - письмо не отправлено
//// Описание:
////  Отправка письма для текущего выбранного агента.
////  Для отправки писем нескольким агентам функция вызывается циклически
//Функция ПочтаОтправитьПисьмо(ИмяФайла)
//	Если ПустоеЗначение(АгентИнфо.КпкПочта) = 1 Тогда
//	    Возврат 0;
//	КонецЕсли;
//	//Имя файла в письме всегда должно быть вида From1C.X
//	
//	Если (Найти(ВРег(ИмяФайла),"FROM1C.") = 0) Тогда  //надо сделать копию файла с переименованием в вид From1C.X
//	    Путь = КаталогВременныхФайлов();
//		ИмяФайлаБезПути = ВернутьИмяФайла(ИмяФайла);
//		ПозТочки = Найти(ИмяФайлаБезПути,"."); //ищем первую точку и затем подменяем имя файла на From1C.X (X - прежнее расширение)
//		ФайлВложения = Путь + "From1C" + Сред(ИмяФайлаБезПути, ПозТочки);
//		ФС.КопироватьФайл(ИмяФайла, ФайлВложения, 0);
//	Иначе
//		ФайлВложения = ИмяФайла;
//	КонецЕсли;
//	Адрес 		= СокрЛП(АгентИнфо.КпкПочта);
//	Тема 		= "AgentPlus Dest=ToPPC Agent="+СокрЛП(ВыбАгент); //Тема сообщения должна начинаться с "AgentPlus" !
//	Сообщение   = "AgentPlus!";
//	ОповеститьОСобытии("Отправка письма на адрес: " + Адрес, "i");
//	Результат = ОтправитьПисьмо(Адрес, Тема, ФайлВложения, Сообщение);
//	//Отправка оповещения по SMS
//	//Если (Результат = 1) И (ПустоеЗначение(АгентИнфо.СмсПочта) = 0) Тогда
//	//	Адрес 		= СокрЛП(АгентИнфо.СмсПочта);
//	//	Тема 		= "Agent+: Vam otpravlena pochta!";
//	//	Сообщение   = "Vam otpravlena pochta!";
//	//	ОповеститьОСобытии("Отправка SMS-сообщения на адрес: " + Адрес,"i");
//	//	ОтправитьПисьмо(Адрес, Тема, "", Сообщение);
//	//КонецЕсли;
//	Возврат Результат;
//КонецФункции // ПочтаОтправитьПисьмо()
//
////******************************************************************************
//// ПочтаОтправить()
////
//// Параметры: 
////  
////
//// Возвращаемое значение:
////  Нет
////
//// Описание:
////  ТекстОписания
////
//Процедура ПочтаОтправить(РежимОтправки)
//
//	Перем ИмяФайла;
//	
//	Если ВыбАгент.Выбран() = 0 Тогда
//		Если РежимОтправки = "Интерактивно" Тогда
//		    Если Вопрос("Внимание! Агент не выбран! Почта будет разослана ВСЕМ агентам! Продолжить?",4,15)<>6 Тогда
//		        Возврат;
//			КонецЕсли;
//		КонецЕсли;
//		Спр = СоздатьОбъект("Справочник.кпкАгенты");
//		Спр.ВыбратьЭлементы();
//		Кол = 0;		
//		Пока Спр.ПолучитьЭлемент()=1 Цикл
//			Если (Спр.ЭтоГруппа() = 1) Тогда
//			    Продолжить;
//			ИначеЕсли ПустоеЗначение(Спр.кпкПочта) = 1 Тогда
//				Продолжить;
//			КонецЕсли;
//			ВыбАгент = Спр.Ссылка;
//			ВыбАгентВыбор();
//			Кол = Кол + 1;
//			ОповеститьОСобытии(Строка(Кол) + ". Расчет данных для агента " + СокрЛП(ВыбАгент.Наименование),"i");
//			ВыгрузитьДанные(ИмяФайла);
//			Если ПочтаОтправитьПисьмо(ИмяФайла) = 1 Тогда
//				ЗаписьЖурналаРегистрации("Отправлено письмо для " + СокрЛП(ВыбАгент.Наименование),"Отчет/Обработка","Завершение",,3);
//			КонецЕсли;
//		КонецЦикла;
//	ИначеЕсли ПустоеЗначение(АгентИнфо.КпкПочта) = 1 Тогда
//		Предупреждение("У выбранного агента не указан адрес электронной почты!",10);
//	Иначе
//		ВыгрузитьДанные(ИмяФайла);
//		Если ПочтаОтправитьПисьмо(ИмяФайла) = 0 Тогда
//		    ОповеститьОСобытии("Письмо не отправлено!", "!!!");
//		КонецЕсли;
//	КонецЕсли; 
//	
//КонецПроцедуры // ПочтаОтправить()     
//
////******************************************************************************
//// ПочтаПолучитьДатуИВремя(ПочтаВремя,ДатаПисьма,ВремяПисьма)
////
//// Параметры: 
////  ПочтаВремя,ДатаПисьма,ВремяПисьма
////
//// Возвращаемое значение:
////  Нет
////
//// Описание:
////  ТекстОписания
////
//Функция ПочтаПолучитьДатуИВремя(ПочтаВремя,ДатаПисьма,ВремяПисьма)
//	Год 	= Число(Лев(ПочтаВремя,4));
//	Месяц 	= Число(Сред(ПочтаВремя,6,2));
//	День	= Число(Сред(ПочтаВремя,9,2));
//	ДатаПисьма 	= Дата(Год,Месяц,День);
//	ВремяПисьма = Прав(ПочтаВремя,5);
//КонецФункции // ПочтаПолучитьДатуИВремя()
//
//
////******************************************************************************
//// кнОбновитьПочтуВыбор()
////
//// Параметры: 
////  
////
//// Возвращаемое значение:
////  Нет
////
//// Описание:
////  ТекстОписания
////
//Процедура кнОбновитьПочтуВыбор()
//
//	Перем ДатаПисьма, ВремяПисьма;
//	
//	Попытка
//		Почта = СоздатьОбъект("AddIn.V7Mail");
//	Исключение 
//		Предупреждение("Не удалось создать объект Addin.V7Mail!");
//		Возврат;
//	КонецПопытки;
//	
//	ТабПочта.УдалитьСтроки();
//
//	Почта.Подключиться(); // Параметры подключения: 
//						  // ("1C", <ИмяАбонента>, <Пароль>, <КаталогПочтовогоУзла>)			
//						  // ("MAPI", <КонфигурацияПодключения>, <Пароль>)
//	
//	Почта.ВыбратьСообщения();
//	
//	Пока Почта.ПолучитьСообщение() = 1 Цикл
//		ПочтаВремя = Почта.ДатаОтправки;
//		ПочтаПолучитьДатуИВремя(ПочтаВремя,ДатаПисьма,ВремяПисьма);
//		Если (ДатаПисьма<ПочтаДата1) Или (ДатаПисьма>ПочтаДата2) Тогда
//		    Продолжить;
//		КонецЕсли;
//	    Тема = Почта.Заголовок;
//		Если Найти(Тема,"AgentPlus") = 0 Тогда
//			Продолжить;
//		КонецЕсли;
//		Если ВыбАгент.Выбран() = 1 Тогда
//		    Если Найти(Тема, "AgentID="+СокрП(АгентИнфо.Идентификатор)+" ") = 0 Тогда
//		        Продолжить;
//		    КонецЕсли;
//		КонецЕсли;
//		ТабПочта.НоваяСтрока();
//		ТабПочта.Пометка 	= ЗначениеПометки;
//		ТабПочта.ОтпрДата 	= ДатаПисьма;
//		ТабПочта.ОтпрВремя 	= ВремяПисьма;
//		ТабПочта.Отправитель= Почта.АдресОтправителя();
//		ТабПочта.Тема		= Тема;
//		ТабПочта.ВремяВнутр	= ПочтаВремя;
//	КонецЦикла;
//	
//	Почта.Отключиться();
//
//	Если (ВыбАгент.Выбран() = 1) И (ТабПочта.КоличествоСтрок() = 0) Тогда
//	    ОповеститьОСобытии("От выбранного торгового агента нет непрочитанных писем!", "!", 0);
//		ОповеститьОСобытии("Если хотите получить почту от всех агентов, уберите агента в закладке" + 
//						   """Обмен данными"" и повторите попытку.","i", 0);
//	КонецЕсли;
//	
//КонецПроцедуры // кнОбновитьПочтуВыбор()     
//
////******************************************************************************
////Подключение к FTP-серверу
////Возвращает 0, если возникли ошибки и 1, если ошибок нет
//Функция ПодключениеКФТП()
//
//	ОчиститьОкноСообщений();
//	
//	Сервер 	= СокрЛП(Константа.кпкФтпСервер);
//	Логин 	= СокрЛП(Константа.кпкФтпПользователь);
//	Пароль 	= СокрЛП(Константа.кпкФтпПароль);
//	
//	Если (ПустоеЗначение(Сервер) = 1) Или 
//		 (ПустоеЗначение(Логин)  = 1) Или 
//		 (ПустоеЗначение(Пароль) = 1) 
//	Тогда
//	    ОповеститьОСобытии("В константах не выставлены все параметры соединения с FTP-сервером! Работа с FTP невозможна!", "!!!");
//		Возврат 0;
//	КонецЕсли;
//	
//	Результат = КпкОбъект.FtpOpenSession();
//	Если Результат <> 0 Тогда
//	    ОповеститьОСобытии(КПКОбъект.ErrDescription(Результат),"!");
//		Возврат 0;
//	КонецЕсли;
//	
//	ОповеститьОСобытии("Подключение к FTP-серверу...", "i");
//	Результат = КпкОбъект.FtpConnect(Сервер,Логин,Пароль);
//	Если Результат <> 0 Тогда
//		КпкОбъект.FtpCloseSession();
//	    ОповеститьОСобытии(КПКОбъект.ErrDescription(Результат),"!");
//		Возврат 0;
//	КонецЕсли;
//	
//	ОповеститьОСобытии("К FTP-серверу подключился.", "i");
//
//	Возврат 1;
//	
//КонецФункции // ПодключениеКФТП()
//
//
////******************************************************************************
//// кнОбновитьИзФТПВыбор()
//Процедура кнОбновитьИзФТПВыбор()
//	
//	ТабФТП.УдалитьСтроки();
//	
//	Если ПодключениеКФТП() = 0 Тогда
//	    Возврат;
//	КонецЕсли;	
//	
//	Если Константа.КпкШифроватьДанные <> 0 Тогда
//	    ПослРасширение = ".crp";
//	Иначе
//		ПослРасширение = "";
//	КонецЕсли;
//	
//	Если флАрхив = 1 Тогда
//	    ИмяФайла = "To1C.zip" + ПослРасширение;
//	Иначе
//		ИмяФайла = "To1C.xml" + ПослРасширение;
//	КонецЕсли;
//
//	Обработано = 0;
//	ГотовоАгентов = 0;
//	Спр = СоздатьОбъект("Справочник.кпкАгенты");	
//	Спр.ВыбратьЭлементы();
//	Пока Спр.ПолучитьЭлемент() = 1 Цикл
//	    Если Спр.ПометкаУдаления() = 1 Тогда
//	        Продолжить;
//		КонецЕсли;
//		ФтпПапка = СокрЛП(Спр.КпкФтпПапка);
//		Если ПустоеЗначение(ФтпПапка) = 1 Тогда
//		    Продолжить;
//		КонецЕсли;
//		
//		Состояние("Обарботано агентов: "+Строка(Обработано));
//
//		ТабФТП.НоваяСтрока();
//		ТабФТП.Агент 	= Спр.ТекущийЭлемент();
//		ТабФТП.ФтпПапка	= ФтпПапка;
//		
//		Если (Прав(ФтпПапка,1) <> "\") Или (Прав(ФтпПапка,1) <> "/") Тогда
//		    ФтпПапка = ФтпПапка + "/";
//		КонецЕсли;
//		
//		ИмяФайлаНаСервере = ФтпПапка + ИмяФайла;//регистр важно соблюдать, т.к. на UNIX-FTP серверах регистр в имени файла имеет значение!!!
//		
//		Результат = КпкОбъект.ФтпСуществуетФайл(ИмяФайлаНаСервере);//FtpFileExists
//		Если Результат = 0 Тогда //файл существует
//			ТабФТП.Данные 	= "Есть";
//			ТабФТП.Пометка  = ЗначениеПометки;
//			ГотовоАгентов = ГотовоАгентов + 1;
//		Иначе
//			ТабФТП.Пометка  = ЗначениеНеПометки;
//		КонецЕсли;
//		ТабФТП.ТекущаяСтрока(ТабФТП.НомерСтроки);
//		Обработано = Обработано + 1;
//	КонецЦикла;
//	
//	КпкОбъект.FtpCloseSession();
//	Если ГотовоАгентов = 0 Тогда
//	    ОповеститьОСобытии("Таблица обновлена. Новых данных от агентов не поступило.", "i", 0);
//	Иначе
//		ВыбАгент = 0;
//		ВыбАгентВыбор();
//		ОповеститьОСобытии("Таблица обновлена. Готов к загрузке данных от " + Строка(ГотовоАгентов) + " агентов.", "i", 0);
//	КонецЕсли;
//
//КонецПроцедуры // кнОбновитьИзФТПВыбор()
//
//******************************************************************************
// кнОбновитьИзАПСервераВыбор()
Процедура кнОбновитьИзАПСервераВыбор()
	
	ОчиститьОкноСообщений();
	ТабСерв.УдалитьСтроки();
	
	ПапкаОбмена = КПКОбъект.АпсПапкаОбмена();
	Если ПустоеЗначение(ПапкаОбмена) = 1 Тогда
	    ПапкаОбмена = СокрЛП(Константа.кпкАпсПапкаОбменаССервером);
		Если ПустоеЗначение(ПапкаОбмена) = 1 Тогда
		    ОповеститьОСобытии("Не установлено значение константы ""Папка обмена с сервером""! Получение данных от сервера невозможно!","!", 0);
			Возврат;
		Иначе
			КПКОбъект.АпсУстПапкуОбмена(ПапкаОбмена);
		КонецЕсли;
	КонецЕсли;
	
	Спис 	= СоздатьОбъект("СписокЗначений");
	СпрАг 	= СоздатьОбъект("Справочник.кпкАгенты");
	СпрКПК 	= СоздатьОбъект("Справочник.МУ");
	
	ГотовоАгентов = 0;
	КолКПК = КПКОбъект.АпсПолучитьКоличествоКПК();
	СчетчикЦикла = 0;
	Для Поз = 0 По КолКПК - 1 Цикл
		СтрИнфо = КПКОбъект.АпсПолучитьКПКИнфо(Поз);
		Если ПустоеЗначение(СтрИнфо) = 1 Тогда
		    Продолжить;
		КонецЕсли;
		Спис.ИзСтрокиСРазделителями(СтрИнфо);
		// В списке следующие значения:
		//1-й - иденифмкато КПК
		//2-й - псевдоним торгового агента (владельца КПК)
		//3-й - директория обмена данными 
		//4-й - имя полученного с КПК файла с директорией
		//5-й - время сеанса
		//6-й - контрольная сумма полученного файла
		ИдКПК = Спис.ПолучитьЗначение(1);
		Если СпрКПК.НайтиПоРеквизиту("Идентификатор", ИдКПК, 1) = 0 Тогда
		    ОповеститьОСобытии("В справочнике ""КПК"" не найден КПК с идентификатором """ + ИдКПК + """!", "!", 0);
			Продолжить;
		КонецЕсли;
		
		Если СпрАг.НайтиПоРеквизиту("КпкМодель",СпрКПК.ТекущийЭлемент(), 1) = 0 Тогда
		    ОповеститьОСобытии("В справочнике ""Агенты"" не найден владелец КПК """ + СокрЛП(СпрКПК.Наименование)+""" (идентификатор КПК: """+ИдКПК+""") !", "!", 0);
			Продолжить;
		КонецЕсли;
		
		ТабСерв.НоваяСтрока();
		ТабСерв.Агент 	= СпрАг.ТекущийЭлемент();
		ТабСерв.Папка	= Спис.ПолучитьЗначение(3);
		ФайлДанных = Спис.ПолучитьЗначение(4);

		Если ПустоеЗначение(ФайлДанных) = 0 Тогда

			ТабСерв.Данные 	= "Есть";
			ТабСерв.Пометка  = ЗначениеПометки;
			ГотовоАгентов = ГотовоАгентов + 1;
			
			ВремяСеансаXML = Спис.ПолучитьЗначение(5);
			ДатаСаенса = ИзвлечьДатуИзXML(ВремяСеансаXML);
			ВремяСеанса= ИзвлечьВремяИзXML(ВремяСеансаXML);
			Если ДатаСаенса = ТекущаяДата() Тогда
			    СтрВремя = ВремяСеанса;
			Иначе
				СтрВремя = Строка(ДатаСаенса) + " " + ВремяСеанса;
			КонецЕсли;
			ТабСерв.Получено = СтрВремя; //выводим время получения файла

		Иначе
			ТабСерв.Пометка  = ЗначениеНеПометки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ГотовоАгентов = 0 Тогда
	    ОповеститьОСобытии("Таблица обновлена. Новых данных от агентов не поступило.", "i", 0);
	Иначе
		ВыбАгент = 0;
		ВыбАгентВыбор();
		ОповеститьОСобытии("Таблица обновлена. Готов к загрузке данных от "+Строка(ГотовоАгентов) + " агентов.", "i", 0);
	КонецЕсли;

КонецПроцедуры // кнОбновитьИзАПСервераВыбор()
//
////******************************************************************************
//// ПочтаПолучитьКодАгнта(Тема)
////
//// Параметры: 
////  
////
//// Возвращаемое значение:
////  Нет
////
//// Описание:
////  ТекстОписания
////
//Функция ПочтаПолучитьКодАгента(Тема)
//	Поз = Найти(Тема,"AgentID=");
//	Если Поз = 0 Тогда
//	    Возврат "";
//	КонецЕсли;
//	КодАгента = СокрЛП(Сред(Тема, Поз+8, 36));
//	Поз = Найти(КодАгента," ");
//	Если Поз = 0 Тогда
//	    Возврат КодАгента;
//	Иначе
//		Возврат Лев(КодАгента,Поз-1);
//	КонецЕсли;
//КонецФункции // ПочтаПолучитьКодАгнта(Тема)()
//
//
////******************************************************************************
//// ПочтаПолучитьИмяАгента(Тема)
////
//// Параметры: 
////  Тема
////
//// Возвращаемое значение:
////  Нет
////
//// Описание:
////  ТекстОписания
////
//Функция ПочтаПолучитьИмяАгента(Тема)
//	Поз = Найти(Тема,"Agent=");
//	Если Поз = 0 Тогда
//	    Возврат "";
//	КонецЕсли;
//	ИмяАгента = СокрЛП(Сред(Тема, Поз+6));
//	//ищем первый пробел
//	ПозПробела = Найти(ИмяАгента, " ");
//	Если ПозПробела<>0 Тогда
//	    ИмяАгента = Лев(ИмяАгента, ПозПробела - 1);
//	КонецЕсли;
//    Возврат ИмяАгента;
//КонецФункции // ПочтаПолучитьИмяАгента()
//
//
////******************************************************************************
//// ПочтаПолучить()
////
//// Параметры: 
////  
////
//// Возвращаемое значение:
////  Нет
////
//// Описание:
////  ТекстОписания
////
//Процедура ПочтаПолучить()  
//	
//	Перем ИмяФайла, Путь;     
//	
//	Если ТабПочта.КоличествоСтрок() = 0 Тогда
//		Поз = Форма.Закладки.НайтиЗначение("Почта");
//		Если Поз = 0 Тогда
//			ОповеститьОСобытии("Не найдена закладка ""Почта""!", "!", 0);
//		    Возврат;
//		КонецЕсли;
//	    ПриВыбореЗакладки(0,"Почта");
//		Форма.Закладки.ТекущаяСтрока(Поз);
//		Форма.Обновить();
//		Если Вопрос("Сначала требуется получить почту! Получить почту?", 4, 10) <> 6 Тогда
//			Возврат;
//		КонецЕсли;
//		кнОбновитьПочтуВыбор();
//		Если ТабПочта.КоличествоСтрок() = 0 Тогда
//		    Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	ТабИдент = СоздатьОбъект("ТаблицаЗначений");
//	ТабИдент.НоваяКолонка("Идентификатор");
//	ТабПочта.ВыбратьСтроки();
//	Пока ТабПочта.ПолучитьСтроку() = 1 Цикл
//	    Если ТабПочта.Пометка <> ЗначениеПометки Тогда
//	        Продолжить;
//		КонецЕсли;
//		ТабИдент.НоваяСтрока();
//		ТабИдент.Идентификатор = ТабПочта.ВремяВнутр + ТабПочта.Отправитель + ТабПочта.Тема;
//	КонецЦикла;
//	
//	Если ТабИдент.КоличествоСтрок() = 0 Тогда
//	    ОповеститьОСобытии("Не выбрано ни одного письма для загрузки данных!", "!");
//		Возврат;
//	КонецЕсли;
//	
//	Попытка
//		Почта = СоздатьОбъект("AddIn.V7Mail");
//	Исключение 
//		Предупреждение("Не удалось создать объект Addin.V7Mail!");
//		Возврат;
//	КонецПопытки;
//	
//	Путь = КаталогВременныхФайлов();
//	
//	КолПисем = 0;
//	
//	Почта.Подключиться(); // Параметры подключения: 
//						  // ("1C", <ИмяАбонента>, <Пароль>, <КаталогПочтовогоУзла>)			
//						  // ("MAPI", <КонфигурацияПодключения>, <Пароль>)
//
//	Почта.ВыбратьСообщения();
//	Пока Почта.ПолучитьСообщение() = 1 Цикл  
//		
//		ПочтаВремя 	= Почта.ДатаОтправки;
//	    Тема 		= Почта.Заголовок;
//		Отправитель	= Почта.АдресОтправителя();
//		Идентификатор = ПочтаВремя  + Отправитель + Тема;
//		Стр = 0;
//		Если ТабИдент.НайтиЗначение(Идентификатор,Стр,"Идентификатор") = 0 Тогда
//		    Продолжить;
//		КонецЕсли;
//		Почта.ПрочитатьСообщение(1);
//		Пока Почта.ПолучитьФайл(ИмяФайла,Путь) = 1 Цикл
//			КолПисем = КолПисем + 1;
//			ФайлЛокально = Путь + ИмяФайла;
//			ОповеститьОСобытии("Файл загрузки: " + ФайлЛокально,"");
//			//получен файл зарузки
//			ИдАгента = ПочтаПолучитьКодАгента(Тема);  			
//			м_СпрАгенты = СоздатьОбъект("Справочник.кпкАгенты");			
//			Если м_СпрАгенты.НайтиПоРеквизиту("Идентификатор",ИдАгента,1) = 1 Тогда
//			    Агент = м_СпрАгенты.ТекущийЭлемент();
//			Иначе
//				ОповеститьОСобытии("Не найден агент с идентификатором " + ИдАгента + "(Агент: " + ПочтаПолучитьИмяАгента(Тема), "!");
//				Возврат;
//			КонецЕсли;
//			
//			Результат = ЗагрузитьДанные(ФайлЛокально,Агент);
//			Если Результат = 0 Тогда
//				ИмяАгента = ПочтаПолучитьИмяАгента(Тема);
//			    ОповеститьОСобытии("Данные для пользователя """ + ИмяАгента + """ не загружены!", "!");
//			КонецЕсли;
//		КонецЦикла;
//	КонецЦикла;
//	
//	Почта.Отключиться();   
//	
//	ОповеститьОСобытии("Обработано писем: "+Строка(КолПисем), "i");
//	
//КонецПроцедуры // ПочтаПолучить()   
//
////******************************************************************************
//// ВыгрузитьДанныеНаФТП(Агент)
////
//// Параметры: 
////  
////
//// Возвращаемое значение:
////  1 - нет ошибок
////
//// Описание:
////  Выгружает на FTP-сервер данные по одному агенту
////
//Функция ВыгрузитьДанныеНаФТП(Агент)
//	
//	Перем ИмяФайла;
//  
//	Если Агент.Вид() <> "кпкАгенты" Тогда
//		АгентФТП = ПолучитьДанныеАгента(Агент);
//	Иначе
//		АгентФТП = Агент;
//	КонецЕсли;
//		
//	ФТППапка = СокрЛП(АгентФТП.КпкФтпПапка);
//	НаимАгента = СокрЛП(АгентФТП.Ссылка);
//	Если ПустоеЗначение(ФТППапка) = 1 Тогда
//		ОповеститьОСобытии("У агента """ + НаимАгента + """ не указана FTP-папка!", "!");
//		Возврат 0;
//	КонецЕсли;
//	Если (Прав(ФтпПапка,1) <> "\") Или (Прав(ФтпПапка,1) <> "/") Тогда
//	    ФтпПапка = ФтпПапка + "/";
//	КонецЕсли;
//
//	ВыбАгент = АгентФТП.Ссылка;  
//	
//	ВыбАгентВыбор();
//	
//	ВыгрузитьДанные(ИмяФайла);  
//	
//	Если ПодключениеКФТП() = 0 Тогда
//	    Возврат 0;
//	КонецЕсли;	
//	
//	ИмяФайлаБезПути = ВернутьИмяФайла(ИмяФайла);
//	ПозТочки = Найти(ИмяФайлаБезПути,"."); //ищем первую точку и затем подменяем имя файла на From1C.X (X - прежнее расширение)
//	ИмяФайлаНаСервере = "From1C" + Сред(ИмяФайлаБезПути, ПозТочки); //регистр важно соблюдать, т.к. на UNIX-FTP серверах регистр в имени файла имеет значение!!!
//	
//	ИмяФайлаФТП = ФтпПапка + ИмяФайлаНаСервере;
//	Результат = КпкОбъект.FtpPutFile(ИмяФайла, ИмяФайлаФТП);
//	Если Результат <> 0 Тогда
//		ОповеститьОСобытии("Данные для торгового агента """ + НаимАгента + """ не отправлены!", "!");
//	    ОповеститьОСобытии("Причина: " + КПКОбъект.ErrDescription(Результат), "i");
//		КпкОбъект.FtpDeleteFile(ИмяФайлаФТП);
//		Возврат 0;
//	Иначе 
//		фРезультат = КпкОбъект.FtpFileExists(ИмяФайлаФТП);		                                                  
//		Если фРезультат = 0 Тогда
//			ОповеститьОСобытии("Данные для торгового агента """ + НаимАгента + """ успешно выгружены!", "i");
//			Возврат 1;		
//		Иначе                                                           
//			ОповеститьОСобытии("Причина: " + КПКОбъект.ErrDescription(Результат), "");
//			Возврат 0;
//		КонецЕсли;  		
//	КонецЕсли;  
//	
//КонецФункции // ВыгрузитьДанныеНаФТП(ВыбАгент)
//
////******************************************************************************
//// ФТПОтправить()
////
//// Параметры: 
////  
////
//// Возвращаемое значение:
////  Нет
////
//// Описание:
////  ТекстОписания
////
//Процедура ФТПОтправить(ПолнаяОтправка)
//
//	Перем ИмяФайла;
//	
//	Если (ПолнаяОтправка = 0) И (ВыбАгент.Выбран() = 0) Тогда
//		ЕстьДанные = 0;
//		ТабФТП.ВыбратьСтроки();
//		Пока ТабФТП.ПолучитьСтроку() = 1 Цикл
//		    Если ТабФТП.Пометка = ЗначениеПометки Тогда
//		        ЕстьДанные = ЕстьДанные + 1;
//		    КонецЕсли;
//		КонецЦикла;
//		
//		Если ЕстьДанные = 0 Тогда
//			Если Вопрос("В таблице загрузки/выгрузки данных в закладке ""ФТП"" нет помеченных агентов! Провести полную отправку данных для всех агентов?",4,10)<>6 Тогда
//				Поз = Форма.Закладки.НайтиЗначение("ФТП");
//				Если Поз = 0 Тогда
//					ОповеститьОСобытии("Не найдена закладка ""ФТП""!", "!", 0);
//				    Возврат;
//				КонецЕсли;
//			    ПриВыбореЗакладки(0,"ФТП");
//				Форма.Закладки.ТекущаяСтрока(Поз);
//				Форма.Обновить();
//				Возврат;
//			КонецЕсли;
//			ПолнаяОтправка = 1;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Если (ВыбАгент.Выбран() = 1) И (ПолнаяОтправка = 0) Тогда //отправка данных только для выбранного агента
//		//принимаем данные с сервера и грузим в БД 1С
//		ВыгрузитьДанныеНаФТП(ВыбАгент);
//	ИначеЕсли ПолнаяОтправка = 0 Тогда //отправка данных для выбранных агентов в закладке "FTP"
//		Обработано = 0;
//		
//		ТабФТП.ВыбратьСтроки();
//		Пока ТабФТП.ПолучитьСтроку() = 1 Цикл
//			Если ТабФТП.Пометка <> ЗначениеПометки Тогда
//				Продолжить;
//			КонецЕсли;
//			Обработано = Обработано + 1;
//			ОповеститьОСобытии(Строка(Обработано) + ". Обработка данных пользователя: " + СокрЛП(ТабФТП.Агент.Наименование),"i");
//			НомерСтроки = ТабФТП.НомерСтроки; //запоминаем текущей строки чтоб ее восстановаить после обновления формы (ошибка 1С!)
//			ВыгрузитьДанныеНаФТП(ТабФТП.Агент.Ссылка);
//			ТабФТП.ПолучитьСтрокуПоНомеру(НомерСтроки); //<- ошибка в 1С! После обновления формы меняется номер текущей строки в таблице!!!			
//		КонецЦикла;
//		
//		ВыбАгент = 0; 	//после загрузки этот реквизит меняется на последнего загруженного торгового агента
//		ВыбАгентВыбор();//сбрасываем его, чтобы повторная попытка пользователем загрузить все данные не реагировала только на этого агента
//	Иначе //отправка данных всем торговым агентам
//		Обработано = 0;
//		Спр = СоздатьОбъект("Справочник.кпкАгенты");
//		Спр.ВыбратьЭлементы();
//		Пока Спр.ПолучитьЭлемент() = 1 Цикл
//		    Если Спр.ПометкаУдаления() = 1 Тогда
//		        Продолжить;
//			КонецЕсли;
//			ФтпПапка = СокрЛП(Спр.КпкФтпПапка);
//			Если ПустоеЗначение(ФтпПапка) = 1 Тогда
//			    Продолжить;
//			КонецЕсли;
//			Обработано = Обработано + 1;
//			ОповеститьОСобытии(Строка(Обработано) + ". Обработка данных пользователя: " + СокрЛП(Спр.Наименование), "i");
//			ВыгрузитьДанныеНаФТП(Спр.ТекущийЭлемент().Ссылка);
//		КонецЦикла;
//		
//		ВыбАгент = 0; 	//после загрузки этот реквизит меняется на последнего загруженного торгового агента
//		ВыбАгентВыбор();//сбрасываем его, чтобы повторная попытка пользователем загрузить все данные не реагировала только на этого агента
//	
//	КонецЕсли;
//	
//	КпкОбъект.FtpCloseSession();
//	
//	ОповеститьОСобытии("Операция завершена.", "i");
//	
//КонецПроцедуры // ФТПОтправить()  
//
////******************************************************************************
//// ЗагрузитьДанныеСФТП()
//// Описание:
////  Принимает файл с ФТП-сервера и загружает по нему данные в БД 1С
////  Подразумевается, что вход на FTP-сервер уже выполнен
//Функция ЗагрузитьДанныеСФТП(Агент)
//
//	Если Константа.КпкШифроватьДанные <> 0 Тогда
//	    ПослРасширение = ".crp";
//	Иначе
//		ПослРасширение = "";
//	КонецЕсли;
//	
//	Если флАрхив = 1 Тогда
//	    ИмяФайла = "To1C.zip" + ПослРасширение;
//	Иначе
//		ИмяФайла = "To1C.xml" + ПослРасширение;
//	КонецЕсли;
//
//	Если Агент.Вид() <> "кпкАгенты" Тогда
//		АгентФТП = ПолучитьДанныеАгента(Агент);
//	Иначе
//		АгентФТП = Агент;
//	КонецЕсли;
//
//	ФТППапка = СокрЛП(АгентФТП.КпкФтпПапка);
//	НаимАгента = СокрЛП(АгентФТП.Ссылка);
//
//	Путь = КаталогВременныхФайлов();
//	
//	Если ПустоеЗначение(ФТППапка) = 1 Тогда
//		ОповеститьОСобытии("У агента """+НаимАгента+""" не указана FTP-папка!","!");
//		Возврат 0;
//	КонецЕсли;
//	Если (Прав(ФтпПапка,1) <> "\") Или (Прав(ФтпПапка,1) <> "/") Тогда
//	    ФтпПапка = ФтпПапка + "/";
//	КонецЕсли;
//	
//	ИмяФайлаФТП   = ФтпПапка + ИмяФайла;
//	ФайлЛокальный = Путь + ИмяФайла;
//	Результат = КпкОбъект.FtpGetFile(ФайлЛокальный, ИмяФайлаФТП);
//	
//	Если Результат <> 0 Тогда
//		ОповеститьОСобытии("Данные от торгового агента """ + НаимАгента + """ не загружены!","!");
//	    ОповеститьОСобытии("Причина: " + КПКОбъект.ErrDescription(Результат), "i");
//		Возврат 0;
//	КонецЕсли;
//	
//	Результат = ЗагрузитьДанные(ФайлЛокальный, Агент);
//	Если Результат = 0 Тогда
//	    ОповеститьОСобытии("Данные для пользователя """ + НаимАгента + """ не загружены!", "!");
//		Возврат 0;		
//	Иначе
//		КпкОбъект.FtpDeleteFile(ИмяФайлаФТП);
//		Возврат 1;
//	КонецЕсли;
//КонецФункции // ЗагрузитьДанныеСФТП()
//
//
////******************************************************************************
//// ФТППолучить()
////
//// Параметры: 
////  ПолнаяЗагрузка: 0 - провести загрузку только для агентов, выбранных в закладке "FTP"
////					1 - провести загрузку всех данных с FTP-сервера (содержимое таблицы игнорируется)
////
//// Возвращаемое значение:
////  Нет
////
//// Описание:
////  Принимает файлы с FTP-сервера 
////
//Процедура ФТППолучить(ПолнаяЗагрузка)
//	
//	Если (ПолнаяЗагрузка = 0) И (ВыбАгент.Выбран() = 0) Тогда
//		ЕстьДанные = 0;
//		ТабФТП.ВыбратьСтроки();
//		Пока ТабФТП.ПолучитьСтроку() = 1 Цикл
//		    Если ПустоеЗначение(ТабФТП.Данные) = 0 Тогда
//		        ЕстьДанные = ЕстьДанные + 1;
//		    КонецЕсли;
//		КонецЦикла;
//		
//		Если ЕстьДанные = 0 Тогда
//			Если Вопрос("Таблица данных загрузки/выгрузки в закладке ""ФТП"" пустая! Провести полную загрузку данных с сервера от всех агентов?",4,10)<>6 Тогда
//				Поз = Форма.Закладки.НайтиЗначение("ФТП");
//				Если Поз = 0 Тогда
//					ОповеститьОСобытии("Не найдена закладка ""ФТП""!", "!", 0);
//				    Возврат;
//				КонецЕсли;
//			    ПриВыбореЗакладки(0, "ФТП");
//				Форма.Закладки.ТекущаяСтрока(Поз);
//				Форма.Обновить();
//				Возврат;
//			КонецЕсли;
//			ПолнаяЗагрузка = 1;
//		КонецЕсли;
//		
//	КонецЕсли;
//
//	Если ПодключениеКФТП() = 0 Тогда
//	    Возврат;
//	КонецЕсли;	
//
//	Если (ВыбАгент.Выбран() = 1) И (ПолнаяЗагрузка = 0) Тогда //загрузка данных только для выбранного агента
//		//принимаем данные с сервера и грузим в БД 1С
//		ЗагрузитьДанныеСФТП(ВыбАгент);
//	ИначеЕсли ПолнаяЗагрузка = 0 Тогда //загрузка данных согласно таблицы 
//		Обработано = 0;
//		
//		ТабФТП.ВыбратьСтроки();
//		Пока ТабФТП.ПолучитьСтроку() = 1 Цикл
//			Если ТабФТП.Пометка <> ЗначениеПометки Тогда
//				Продолжить;
//			КонецЕсли;
//			Обработано = Обработано + 1;
//			ОповеститьОСобытии(Строка(Обработано) + ". Обработка данных пользователя: " + СокрЛП(ТабФТП.Агент.Наименование),"i");
//			НомерСтроки = ТабФТП.НомерСтроки; //запоминаем текущей строки чтоб ее восстановаить после обновления формы (ошибка 1С!)
//			ЗагрузитьДанныеСФТП(ТабФТП.Агент.Ссылка);
//			ТабФТП.ПолучитьСтрокуПоНомеру(НомерСтроки); //<- ошибка в 1С! После обновления формы меняется номер текущей строки в таблице!!!			
//		КонецЦикла;
//		
//		ВыбАгент = 0; 	//после загрузки этот реквизит меняется на последнего загруженного торгового агента
//		ВыбАгентВыбор();//сбрасываем его, чтобы повторная попытка пользователем загрузить все данные не реагировала только на этого агента
//		
//	Иначе //загрузка данных от всех агентов с FTP-сервера
//		Обработано = 0;
//		Спр = СоздатьОбъект("Справочник.кпкАгенты");
//		Спр.ВыбратьЭлементы();
//		Пока Спр.ПолучитьЭлемент() = 1 Цикл
//		    Если Спр.ПометкаУдаления() = 1 Тогда
//		        Продолжить;
//			КонецЕсли;
//			ФтпПапка = СокрЛП(Спр.КпкФтпПапка);
//			Если ПустоеЗначение(ФтпПапка) = 1 Тогда
//			    Продолжить;
//			КонецЕсли;
//			Обработано = Обработано + 1;
//			ОповеститьОСобытии(Строка(Обработано) + ". Обработка данных пользователя: " + СокрЛП(Спр.Наименование), "i");
//			ЗагрузитьДанныеСФТП(Спр.ТекущийЭлемент().Ссылка);
//		КонецЦикла;
//		
//		ВыбАгент = 0; 	//после загрузки этот реквизит меняется на последнего загруженного торгового агента
//		ВыбАгентВыбор();//сбрасываем его, чтобы повторная попытка пользователем загрузить все данные не реагировала только на этого агента
//		
//	КонецЕсли;
//
//	КпкОбъект.FtpCloseSession();
//	
//	ОповеститьОСобытии("Операция завершена.","i");
//	
//КонецПроцедуры //ФТППолучить()

//******************************************************************************
// ВыгрузитьДанныеНаАПСервер(Агент)
//
// Параметры: 
//  
//
// Возвращаемое значение:
//  1 - нет ошибок
//
// Описание:
//  Выгружает на Агент+ сервер данные по одному агенту
//
Функция ВыгрузитьДанныеНаАПСервер(Агент, ОтветнаяВыгрузка = 0)
	
	Перем ИмяФайла;
	
	ПапкаСервера = АпсПолучитьПапкуОбменаССервером();
	Если ПустоеЗначение(ПапкаСервера) = 1 Тогда
		Возврат 0;
	КонецЕсли;

	Если Агент.Вид() <> "кпкАгенты" Тогда
		АгентСервер = ПолучитьДанныеАгента(Агент);
	Иначе
		АгентСервер = Агент;
	КонецЕсли;

	НаимАгента = СокрЛП(АгентСервер.Ссылка);
	Если АгентСервер.КпкМодель.Выбран() = 0 Тогда
		ОповеститьОСобытии("У агента """ + НаимАгента + """ не указан КПК!", "!");
	    Возврат 0;
	КонецЕсли;

	ИдКПК = СокрП(АгентСервер.КпкМодель.Идентификатор);
	Если ПустоеЗначение(ИдКПК) = 1 Тогда
		ОповеститьОСобытии("У агента """ + НаимАгента + """ указан КПК с пустым иденификатором!","!");
	    Возврат 0;
	КонецЕсли;
	
	Спис = СоздатьОбъект("СписокЗначений");
	// Получаем папку обмена агента на основе идентификатора КПК (чтобы избежать конфликта 
	// настроек в 1С и на сервере, принимаем настройки сервера как приоритетные)
	СтрИнфо = КПКОбъект.АпсПолучитьКПКИнфо(ИдКПК); 
	Если ПустоеЗначение(СтрИнфо) = 1 Тогда
		ОповеститьОСобытии("Данные для пользователя """ + НаимАгента + """ не выгружены! Проверьте настройки " + 
						   "для ""Агент Плюс СОД"" или сгенерируйте их заново, после чего перезапутите службу ""Агент Плюс СОД""", "!");
	    Возврат 0;
	КонецЕсли;
	Спис.ИзСтрокиСРазделителями(СтрИнфо);
	// В списке следующие значения:
	//1-й - иденифмкатор КПК
	//2-й - псевдоним торгвого агента (владельца КПК)
	//3-й - директория обмена данными 
	//4-й - имя полученного с КПК файла с директорией
	//5-й - время сеанса
	//6-й - контрольная сумма полученного файла
	
	ПапкаАгента = ПапкаСервера + Спис.ПолучитьЗначение(3) + "\";
	
	ВыбАгент = АгентСервер.Ссылка; 
	
	ВыбАгентВыбор();
	
	ВыгрузитьДанные(ИмяФайла, ОтветнаяВыгрузка); 
	
	ИмяФайлаБезПути = ВернутьИмяФайла(ИмяФайла);
	ПозТочки = Найти(ИмяФайлаБезПути,"."); //ищем первую точку и затем подменяем имя файла на From1C.X (X - прежнее расширение)
	ИмяФайлаНаСервере = "From1C" + Сред(ИмяФайлаБезПути, ПозТочки);
	
	ИмяФайлаАПС = ПапкаАгента + ИмяФайлаНаСервере;
	ФС.КопироватьФайл(ИмяФайла, ИмяФайлаАПС, 0);
                  
	ОповеститьОСобытии("Данные для пользователя """ + НаимАгента + """ успешно выгружены", "i");
	
	Возврат 1;
	
КонецФункции // ВыгрузитьДанныеНаАПСервер(ВыбАгент)      

//******************************************************************************
// АПСОтправить()
//
// Параметры: 
//  
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  отправляет данные на Агент+ сервер по всем агентам или выборочно согласно выбранных 
//  агентов на закладке "Агент+ сервер"
//
Процедура АПСОтправить(ПолнаяОтправка)

	Перем ИмяФайла;
	
	Если (ПолнаяОтправка = 0) И (ВыбАгент.Выбран() = 0) Тогда
		ЕстьДанные = 0;
		ТабСерв.ВыбратьСтроки();
		Пока ТабСерв.ПолучитьСтроку() = 1 Цикл
		    Если ТабСерв.Пометка = ЗначениеПометки Тогда
		        ЕстьДанные = ЕстьДанные + 1;
		    КонецЕсли;
		КонецЦикла;
		
		Если ЕстьДанные = 0 Тогда
			Если Вопрос("В таблице загрузки/выгрузки данных в закладке ""Агент Плюс СОД"" нет помеченных агентов! Провести полную отправку данных для всех агентов?",4,10)<>6 Тогда
				Поз = Форма.Закладки.НайтиЗначение("Сервер");
				Если Поз = 0 Тогда
					ОповеститьОСобытии("Не найдена закладка ""Агент Плюс СОД""!", "!", 0);
				    Возврат;
				КонецЕсли;
			    ПриВыбореЗакладки(0,"Сервер");
				Форма.Закладки.ТекущаяСтрока(Поз);
				Форма.Обновить();
				Возврат;
			КонецЕсли;
			ПолнаяОтправка = 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ВыбАгент.Выбран() = 1) И (ПолнаяОтправка = 0) Тогда //отправка данных только для выбранного агента
		//принимаем данные с сервера и грузим в БД 1С
		ВыгрузитьДанныеНаАПСервер(ВыбАгент);
	ИначеЕсли ПолнаяОтправка = 0 Тогда //отправка данных для выбранных агентов в закладке "Агент Сервер"
		Обработано = 0;
		
		ТабСерв.ВыбратьСтроки();
		Пока ТабСерв.ПолучитьСтроку() = 1 Цикл
			Если ТабСерв.Пометка <> ЗначениеПометки Тогда
				Продолжить;
			КонецЕсли;
			Обработано = Обработано + 1;
			ОповеститьОСобытии(Строка(Обработано) + ". Обработка данных пользователя: " + СокрЛП(ТабСерв.Агент.Наименование),"i");
			НомерСтроки = ТабСерв.НомерСтроки; //запоминаем текущей строки чтоб ее восстановаить после обновления формы (ошибка 1С!)
			ВыгрузитьДанныеНаАПСервер(ТабСерв.Агент);
			ТабСерв.ПолучитьСтрокуПоНомеру(НомерСтроки); //<- ошибка в 1С! После обновления формы меняется номер текущей строки в таблице!!!			
		КонецЦикла;
		
		ВыбАгент = 0; 	//после загрузки этот реквизит меняется на последнего загруженного торгового агента
		ВыбАгентВыбор();//сбрасываем его, чтобы повторная попытка пользователем загрузить все данные не реагировала только на этого агента
	Иначе //отправка данных всем торговым агентам
		Обработано = 0;
		Спр = СоздатьОбъект("Справочник.кпкАгенты");
		Спр.ВыбратьЭлементы();
		Пока Спр.ПолучитьЭлемент() = 1 Цикл
		    Если Спр.ПометкаУдаления() = 1 Тогда
		        Продолжить;
			КонецЕсли;
			Папка = СокрЛП(Спр.КпкАпсПапка);
			Если ПустоеЗначение(Папка) = 1 Тогда
			    Продолжить;
			ИначеЕсли Спр.КпкМодель.Выбран() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Обработано = Обработано + 1;
			ОповеститьОСобытии(Строка(Обработано) + ". Обработка данных пользователя: " + СокрЛП(Спр.Наименование),"i");
			ВыгрузитьДанныеНаАПСервер(Спр.ТекущийЭлемент().Ссылка);
		КонецЦикла;
		
		ВыбАгент = 0; 	//после загрузки этот реквизит меняется на последнего загруженного торгового агента
		ВыбАгентВыбор();//сбрасываем его, чтобы повторная попытка пользователем загрузить все данные не реагировала только на этого агента
	
	КонецЕсли;
	
	ОповеститьОСобытии("Операция завершена","i");
	
КонецПроцедуры // АПСОтправить() 

//******************************************************************************
// ЗагрузитьДанныеСАПСервера()
// Описание:
//  Принимает файл с Агент+ сервера и загружает по нему данные в БД 1С
//  Если значение параметра "Режим" равно "ОтветитьНаЗапрос", то сразу после загрузки
//  данных в БД 1С формируется ответ на запрос пользователя КПК (если он есть)
Функция ЗагрузитьДанныеСАПСервера(Агент)
    
	ПапкаСервера = АпсПолучитьПапкуОбменаССервером();
	Если ПустоеЗначение(ПапкаСервера) = 1 Тогда
		Возврат 0;
	КонецЕсли;

	Если Агент.Вид() <> "кпкАгенты" Тогда
		АгентСервер = ПолучитьДанныеАгента(Агент);
	Иначе
		АгентСервер = Агент;
	КонецЕсли;  	                
	
	ВыбАгент = Агент;  
	
	ВыбАгентВыбор();
	
	УстановитьМобильноеПриложение(Агент);
	
	НаимАгента = СокрЛП(АгентСервер.Ссылка);
	Если АгентСервер.КпкМодель.Выбран() = 0 Тогда
		ОповеститьОСобытии("У агента """ + НаимАгента + """ не указан КПК!","!");
	    Возврат 0;
	КонецЕсли;

	ИдКПК = СокрП(АгентСервер.КпкМодель.Идентификатор);
	Если ПустоеЗначение(ИдКПК) = 1 Тогда
		ОповеститьОСобытии("У агента """ + НаимАгента + """ указан КПК с пустым иденификатором!","!");
	    Возврат 0;
	КонецЕсли;
	
	Спис = СоздатьОбъект("СписокЗначений");
	СтрИнфо = КПКОбъект.АпсПолучитьКПКИнфо(ИдКПК); //получаем данные на основе идентификатора КПК
	Если ПустоеЗначение(СтрИнфо) = 1 Тогда
		ОповеститьОСобытии("Данные для пользователя """ + НаимАгента + """ не загружены!","!");
	    Возврат 0;
	КонецЕсли;
	Спис.ИзСтрокиСРазделителями(СтрИнфо);
	// В списке следующие значения:
	//1-й - иденифмкатор КПК
	//2-й - псевдоним торгвого агента (владельца КПК)
	//3-й - директория обмена данными 
	//4-й - имя полученного с КПК файла с директорией
	//5-й - время сеанса
	//6-й - контрольная сумма полученного файла
	ИмяФайла = Спис.ПолучитьЗначение(4);
	Если ПустоеЗначение(ИмяФайла) = 1 Тогда
		ОповеститьОСобытии("Данные от агента """ + НаимАгента + """ на сервере отсутствуют.","i");
	    Возврат 0;
	КонецЕсли;
	ФайлАгента = ПапкаСервера + ИмяФайла;
	Если ФС.СуществуетФайл(ФайлАгента) = 0 Тогда
		ОповеститьОСобытии("Данные от агента """ + НаимАгента + """ на сервере отсутствуют.","i");
	    Возврат 0;
	КонецЕсли;
	
	Путь = КаталогВременныхФайлов();
	ФайлЛокальный = Путь + ВернутьИмяФайла(ФайлАгента);
	ФС.КопироватьФайл(ФайлАгента,ФайлЛокальный, 0); 
	
	Если ВРег(Прав(ФайлАгента, 3)) = "TXT" Тогда
		ФС.УдалитьФайл(ФайлАгента + ".clt");
	КонецЕсли;
	
	//обязательно оповещаем сервер о получении файла загрузки 1С:Предприятием!!!
	КпкОбъект.АпсПроцессЗавершен(ИдКПК); //оповещение всегда проходит на основании идентификатора КПК!
	
	Результат = ЗагрузитьДанные(ФайлЛокальный, Агент);
	Если Результат = 0 Тогда
	    ОповеститьОСобытии("Данные для пользователя """ + НаимАгента + """ не загружены!","!");
		Возврат 0;		
	КонецЕсли; 
	
КонецФункции // ЗагрузитьДанныеСАПСервера() 

//******************************************************************************
// АПСПолучить()
//
// Параметры: 
//  ПолнаяЗагрузка: 0 - провести загрузку только для агентов, выбранных в закладке "Агент+ Сервер"
//					1 - провести загрузку всех данных с Агент+ сервера (содержимое таблицы в закладке игнорируется)
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Принимает файлы с Агент+ сервера 
//
Процедура АПСПолучить(ПолнаяЗагрузка)
	
	ПапкаСервера = АпсПолучитьПапкуОбменаССервером(1);
	Если ПустоеЗначение(ПапкаСервера) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если (ПолнаяЗагрузка = 0) И (ВыбАгент.Выбран() = 0) Тогда
		ЕстьДанные = 0;
		ТабСерв.ВыбратьСтроки();
		Пока ТабСерв.ПолучитьСтроку() = 1 Цикл
		    Если ПустоеЗначение(ТабСерв.Данные) = 0 Тогда
		        ЕстьДанные = ЕстьДанные + 1;
		    КонецЕсли;
		КонецЦикла;
		
		Если ЕстьДанные = 0 Тогда
			Если Вопрос("Таблица данных загрузки/выгрузки в закладке ""Агент Плюс СОД"" пустая! Провести полную загрузку данных с сервера от всех агентов?",4,10)<>6 Тогда
				Поз = Форма.Закладки.НайтиЗначение("Сервер");
				Если Поз = 0 Тогда
					ОповеститьОСобытии("Не найдена закладка ""Агент Плюс СОД""!","!", 0);
				    Возврат;
				КонецЕсли;
			    ПриВыбореЗакладки(0,"Сервер");
				Форма.Закладки.ТекущаяСтрока(Поз);
				Форма.Обновить();
				Возврат;
			КонецЕсли;
			ПолнаяЗагрузка = 1;
		КонецЕсли;
	КонецЕсли;

	Если (ВыбАгент.Выбран() = 1) И (ПолнаяЗагрузка = 0) Тогда //загрузка данных только для выбранного агента
		//принимаем данные с сервера и грузим в БД 1С
		ЗагрузитьДанныеСАПСервера(ВыбАгент);
	ИначеЕсли ПолнаяЗагрузка = 0 Тогда //загрузка данных согласно таблицы 
		Обработано = 0;
		
		ТабСерв.ВыбратьСтроки();
		Пока ТабСерв.ПолучитьСтроку() = 1 Цикл
			Если ТабСерв.Пометка <> ЗначениеПометки Тогда
				Продолжить;
			КонецЕсли;
			Обработано = Обработано + 1;
			ОповеститьОСобытии(Строка(Обработано) + ". Обработка данных пользователя: " + СокрЛП(ТабСерв.Агент.Наименование),"i");
			НомерСтроки = ТабСерв.НомерСтроки; //запоминаем текущей строки чтоб ее восстановаить после обновления формы (ошибка 1С!)
			ЗагрузитьДанныеСАПСервера(ТабСерв.Агент.Ссылка);
			ТабСерв.ПолучитьСтрокуПоНомеру(НомерСтроки); //<- ошибка в 1С! После обновления формы меняется номер текущей строки в таблице!!!			
		КонецЦикла;
		
		ВыбАгент = 0; 	//после загрузки этот реквизит меняется на последнего загруженного торгового агента
		ВыбАгентВыбор();//сбрасываем его, чтобы повторная попытка пользователем загрузить все данные не реагировала только на этого агента
		
	Иначе //загрузка данных от всех агентов с Агент+ сервера (значения в таблице игнорируются)
		Обработано = 0;
		Спр = СоздатьОбъект("Справочник.кпкАгенты");
		Спр.ВыбратьЭлементы();
		Пока Спр.ПолучитьЭлемент() = 1 Цикл
		    Если Спр.ПометкаУдаления() = 1 Тогда
		        Продолжить;
			КонецЕсли;
			Папка = СокрЛП(Спр.КпкАпсПапка);
			Если ПустоеЗначение(Папка) = 1 Тогда
			    Продолжить;
			ИначеЕсли Спр.КпкМодель.Выбран() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Обработано = Обработано + 1;
			ОповеститьОСобытии(Строка(Обработано) + ". Обработка данных пользователя: " + СокрЛП(Спр.Наименование),"i");
			ЗагрузитьДанныеСАПСервера(Спр.ТекущийЭлемент().Ссылка);
		КонецЦикла;
		
		ВыбАгент = 0; 	//после загрузки этот реквизит меняется на последнего загруженного торгового агента
		ВыбАгентВыбор();//сбрасываем его, чтобы повторная попытка пользователем загрузить все данные не реагировала только на этого агента
		
	КонецЕсли;

	ОповеститьОСобытии("Операция завершена.","i");
	
КонецПроцедуры //АПСПолучить()     

//******************************************************************************
Процедура кнВыгрузитьНажание()
	
	СпособОбмена = списСпособОбмена.ПолучитьЗначение(списСпособОбмена.ТекущаяСтрока());
	
	ОчиститьОкноСообщений();  
	
	ТипОбмена = 1;
	
	//Если СпособОбмена = "Почта" Тогда
	//	ПочтаОтправить("Интерактивно");
	//ИначеЕсли СпособОбмена = "ФТП" Тогда
	//	ФТПОтправить(0);
	Если СпособОбмена = "Сервер" Тогда
		АПСОтправить(0);
	ИначеЕсли СпособОбмена = "ПрямоеПодключение" Тогда
			
		Если ВыбАгент.Выбран() = 1 Тогда
		    ВыгрузитьДанные();
		Иначе
			ОчиститьОкноСообщений();
			ОповеститьОСобытии("Возможно, программа ""Агент+"" на КПК не настроена.","", 0);
			ОповеститьОСобытии("Выберите закладку ""Настройки"" и нажмите кнопку ""Настройка Агент+ на КПК...""", "", 0);
			ОповеститьОСобытии("В окне настроек обязательно укажите торгового агента!", "!", 0);
		КонецЕсли;  
		
	КонецЕсли;
	
КонецПроцедуры //кнВыгрузитьНажание

//******************************************************************************
Процедура кнЗагрузитьНажатие()     
		
	СпособОбмена = списСпособОбмена.ПолучитьЗначение(списСпособОбмена.ТекущаяСтрока());
	
	ОчиститьОкноСообщений();  
	
	ТипОбмена = 0;
	
	Если СпособОбмена = "Сервер" Тогда
		АПСПолучить(0);
	ИначеЕсли СпособОбмена = "ПрямоеПодключение" Тогда
		Если ВыбАгент.Выбран() = 1 Тогда		
			Если ЗагрузитьДанные() = 0 Тогда //произошла ошибка
		    	Возврат;
			Иначе
				ОкноСостояние("Загрузка документов успешно завершена.");
			КонецЕсли;
		Иначе
			ОчиститьОкноСообщений();
			ОповеститьОСобытии("Возможно, программа ""Агент+"" на КПК не настроена.","", 0);
			ОповеститьОСобытии("Выберите закладку ""Настройки"" и нажмите кнопку ""Настройка Агент+ на КПК...""", "", 0);
			ОповеститьОСобытии("В окне настроек обязательно укажите торгового агента!", "!", 0);
		КонецЕсли;  
	КонецЕсли;

//	СпособОбмена = списСпособОбмена.ПолучитьЗначение(списСпособОбмена.ТекущаяСтрока());
//	
//	ОчиститьОкноСообщений();  
//	
//	ТипОбмена = 0;
//	
//	Если СпособОбмена = "Почта" Тогда
//		ПочтаПолучить();
//	ИначеЕсли СпособОбмена = "ФТП" Тогда
//		ФТППолучить(0);
//	ИначеЕсли СпособОбмена = "Сервер" Тогда
//		АПСПолучить(0);
//	ИначеЕсли СпособОбмена = "ПрямоеПодключение" Тогда
//		Если флАвтоОбменСКПК = 1 Тогда
//			Результат = КПКОбъект.CeRapiInit();
//			Если Результат = 0 Тогда
//				Если МобильноеПриложение <> ВидАгентПлюсМТ Тогда
//					ОкноСостояние("Определение агента в КПК...");
//					кнАгентОпределитьВыбор(0);					
//				КонецЕсли;                    
//				
//				ОкноСостояние();
//				
//				Если Константа.КпкШифроватьДанные <> 0 Тогда
//				    ПослРасширение = ".crp";
//				Иначе
//					ПослРасширение = "";
//				КонецЕсли;
//				
//				НачИмя = ?(МобильноеПриложение = ВидАгентПлюсМТ, "ToCDB", "To1C");
//				
//				Если флАрхив = 1 Тогда
//				    ИмяФайла = НачИмя + ".zip" + ПослРасширение;
//				Иначе
//					ИмяФайла = НачИмя + ".xml" + ПослРасширение;
//				КонецЕсли;
//					
//				Если МобильноеПриложение = ВидАгентПлюсМТ Тогда	
//					ПутьКФайлуОбмена = "\Program Files\agentp2\exchange\" + ИмяФайла;
//				Иначе	               
//					ПутьКФайлуОбмена = "\My Documents\Personal\" + ИмяФайла;
//				КонецЕсли;     
//				
//				Результат = КПКОбъект.CeFileExists(ПутьКФайлуОбмена);    				
//
//			КонецЕсли;
//			
//			Если Результат = 0 Тогда			
//				ОкноСостояние("Найден файл данных на КПК.");
//			ИначеЕсли Результат <> 100 Тогда
//				ОкноСостояние("КПК: " + КПКОбъект.ErrDescription(Результат),"!");
//			Иначе
//				ОкноСостояние("Файл данных на КПК не существует.");
//				Если КомандаПолученияДанныхСКПК() = 0 Тогда
//			    	Возврат;
//				КонецЕсли;
//			КонецЕсли; 
//			
//			Результат = КПКОбъект.CeRapiUnInit();
//			
//		КонецЕсли;
//		
//		Если ВыбАгент.Выбран() = 1 Тогда		
//			Если ЗагрузитьДанные() = 0 Тогда //произошла ошибка
//		    	Возврат;
//			Иначе
//				ОкноСостояние("Загрузка документов успешно завершена.");
//			КонецЕсли;
//		Иначе
//			ОчиститьОкноСообщений();
//			ОповеститьОСобытии("Возможно, программа ""Агент+"" на КПК не настроена.","", 0);
//			ОповеститьОСобытии("Выберите закладку ""Настройки"" и нажмите кнопку ""Настройка Агент+ на КПК...""", "", 0);
//			ОповеститьОСобытии("В окне настроек обязательно укажите торгового агента!", "!", 0);
//		КонецЕсли;  
//		
//	КонецЕсли;  	
//
//
////	Перем Выб;
////	
////	СпособОбмена = списСпособОбмена.ПолучитьЗначение(списСпособОбмена.ТекущаяСтрока());
////	
////	ОчиститьОкноСообщений();
////	Меню = СоздатьОбъект("СписокЗначений");
////	
////	Если СпособОбмена = "Почта" Тогда
////		Меню.ДобавитьЗначение("ПочтаПолучить","Загрузить из почты");
////		Меню.ДобавитьЗначение("ПочтаОтправить","Отправить по почте");
////	ИначеЕсли СпособОбмена = "ФТП" Тогда
////		Меню.ДобавитьЗначение("ФтпПолучить","Загрузить c FTP");
////		Меню.ДобавитьЗначение("ФтпОтправить","Отправить по FTP");
////	ИначеЕсли СпособОбмена = "Сервер" Тогда
////		Меню.ДобавитьЗначение("СерверПолучить","Загрузить c Агент+ Сервера");
////		Меню.ДобавитьЗначение("СерверОтправить","Отправить на Агент+ Сервер");
////	ИначеЕсли СпособОбмена = "ПрямоеПодключение" Тогда
////		Если флАвтоОбменСКПК = 1 Тогда
////			Результат = КПКОбъект.CeRapiInit();
////			Если Результат = 0 Тогда
////				//Если флПроверятьАгента = 1 Тогда
////					ОкноСостояние("Определение агента в КПК...");
////					кнАгентОпределитьВыбор(0);
////					ОкноСостояние();
////				//КонецЕсли;
////				
////				Если Константа.КпкШифроватьДанные <> 0 Тогда
////				    ПослРасширение = ".crp";
////				Иначе
////					ПослРасширение = "";
////				КонецЕсли;
////				
////				Если флАрхив = 1 Тогда
////				    ИмяФайла = "To1C.zip" + ПослРасширение;
////				Иначе
////					ИмяФайла = "To1C.xml" + ПослРасширение;
////				КонецЕсли;
////				
////			    Результат = КПКОбъект.CeFileExists("\My Documents\Personal\" + ИмяФайла);
////			КонецЕсли;
////			Если Результат = 0 Тогда
////				Меню.ДобавитьЗначение("Загрузка","Загрузка данных с КПК");
////				ОкноСостояние("Найден файл данных на КПК.");
////			ИначеЕсли Результат <> 100 Тогда
////				ОкноСостояние("КПК: " + КПКОбъект.ErrDescription(Результат),"!");
////			Иначе
////				ОкноСостояние("Файл данных на КПК не существует.");
////				Меню.ДобавитьЗначение("КомандаЗагрузка","Загрузка данных с КПК (послать команду)");
////			КонецЕсли;
////			Результат = КПКОбъект.CeRapiUnInit();
////		Иначе			
////			//Если (ФС.СуществуетФайл("C:\To1C.dat") = 1) Или (ФС.СуществуетФайл("C:\To1C.xml") = 1) Тогда //тестовый файл загрузки данных			
////			Меню.ДобавитьЗначение("Загрузка","Загрузка данных с КПК");
////			//КонецЕсли;
////		КонецЕсли;
////		
////		Если ВыбАгент.Выбран() = 1 Тогда
////		    Меню.ДобавитьЗначение("Выгрузка","Выгрузка данных в КПК");
////		Иначе
////			ОчиститьОкноСообщений();
////			ОповеститьОСобытии("Возможно, программа ""Агент+"" на КПК не настроена.","", 0);
////			ОповеститьОСобытии("Выберите закладку ""Настройки"" и нажмите кнопку ""Настройка Агент+ на КПК...""", "", 0);
////			ОповеститьОСобытии("В окне настроек обязательно укажите торгового агента!", "!", 0);
////		КонецЕсли;
////	КонецЕсли;
////	
////	Если Меню.РазмерСписка() = 0 Тогда
////		Предупреждение("Для выгрузки данных в КПК с этого компьютера, "
////		+ "укажите торгового представителя в текущем окне."
////		+ РазделительСтрок 
////		+ "Для загрузки данных с КПК, запустите на КПК программу Агент+ и выберите "
////		+ "пункты меню ""Файл / Выгрузить данные""." ,60);
////		Возврат;
////	КонецЕсли;
////
////	Если Меню.ВыбратьЗначение(Выб,"",,,1) = 0 Тогда
////		ОкноСостояние();
////	    Возврат;
////	КонецЕсли;
////	
////	Если (Выб = "КомандаЗагрузка") Или (Выб = "Загрузка") Тогда
////		Если Выб = "КомандаЗагрузка" Тогда //сначала шлем комаду в КПК
////			Если КомандаПолученияДанныхСКПК() = 0 Тогда
////			    Возврат;
////			КонецЕсли;
////		КонецЕсли;
////		Если ЗагрузитьДанные() = 0 Тогда //произошла ошибка
////		    Возврат;
////		Иначе
////			ОкноСостояние("Загрузка документов успешно завершена.");
////		КонецЕсли;
////	ИначеЕсли Выб = "Выгрузка" Тогда
////		ВыгрузитьДанные();
////	ИначеЕсли Выб = "ПочтаПолучить" Тогда
////	    ПочтаПолучить();
////	ИначеЕсли Выб = "ПочтаОтправить" Тогда
////		ПочтаОтправить("Интерактивно");
////	ИначеЕсли Выб = "ФтпПолучить" Тогда
////		ФТППолучить(0);
////	ИначеЕсли Выб = "ФтпОтправить" Тогда
////		ФТПОтправить(0);
////	ИначеЕсли Выб = "СерверПолучить" Тогда
////		АПСПолучить(0);
////	ИначеЕсли Выб = "СерверОтправить" Тогда
////		АПСОтправить(0);
////	КонецЕсли;
	
КонецПроцедуры //кнЗагрузитьНажатие
//
////******************************************************************************
//Процедура кнОбновитьНомераДокВыбор()
//	Если ВыбАгент.Выбран() = 0 Тогда
//	    Предупреждение("Не выбран торговый агент. Получение списка стартовых номеров невозможно!",10);
//	    Возврат;
//	КонецЕсли;
//	ЗаполнитьТаблицуСтартовыхНомеров();
//КонецПроцедуры
//
////******************************************************************************
//Процедура кнСначалаСтартНомВыбор()
//	
//	Если Вопрос("Установить все стартовые номера в 1?",4,10) = 6 Тогда
//	    Т =  ТабСтартНом; //для читабельности кода
//		Т.ВыбратьСтроки();
//		Пока Т.ПолучитьСтроку() = 1 Цикл
//			СтартНом = Т.СтартНом;
//			//Для справки: 
//			//в Агент+ поддерживаются номера до 25 символов длиной
//			//разрядность номера (нумерная часть) - до 18 знаков, длина префикса - до 15 символов
//			//(естественно, что если для нумерной чати выделяется, например, 18 знаков, 
//			//то для префикса остается 7 знаков (7+18=25)).
//			ДлинаНом = СтрДлина(СтартНом);
//			НовыйНомер = "";
//			//просматриваем номер справа налево	и заменяем все цифры на знак "0" (кроме последней цифры)
//			Для Поз = 0 По ДлинаНом - 1  Цикл
//				ПозСимв = ДлинаНом - Поз;
//				КодС = КодСимв(Сред(СтартНом,ПозСимв,1));
//				Если (КодС < 48) Или (КодС > 57) Тогда
//				    Прервать; //номерная часть закончилась
//				КонецЕсли;
//				Если Поз = 0 Тогда
//				    НовыйНомер = "1";
//				Иначе
//					НовыйНомер = "0" + НовыйНомер;
//				КонецЕсли;
//			КонецЦикла;
//			Если ПозСимв <> 0 Тогда
//			    НовыйНомер = Лев(СтартНом,ПозСимв) + НовыйНомер;
//			КонецЕсли;
//			Т.СтартНом = НовыйНомер;
//		КонецЦикла;
//	КонецЕсли;
//	
//КонецПроцедуры //
//
////******************************************************************************
////Вызывается при попытке активации строки таблицы стартовых номеров
////в закладке "Стартовые номера"
//Процедура ТабСтартНомВыбор()
//	
//	Т =  ТабСтартНом; //для читабельности кода
//	
//	Если Т.КодНум = 0 Тогда
//	    Предупреждение("Нумерация включена только у документов с ненулевым нумератором.",20);
//		Возврат;
//	КонецЕсли;
//	
//	СтартНом = Т.СтартНом;
//	Если ВвестиСтроку(СтартНом,"Введите стартовый номер",20,,30) = 0 Тогда
//	    Возврат;
//	КонецЕсли;
//	
//	Если ПустоеЗначение(СтартНом) = 1 Тогда
//	    Предупреждение("Нельзя вводить пустые номера!",10);
//		Возврат;
//	КонецЕсли;
//	
//	Длина = СтрДлина(СтартНом);
//	Если Длина < 2 Тогда
//	    Предупреждение("Введен короткий номер!",10);
//		Возврат;
//	КонецЕсли;
//	Т.СтартНом 	= СтартНом;  
//	
//КонецПроцедуры // ТабСтартНомВыбор()
//
////******************************************************************************
////Вызывается при выборе/снятии флажка "Стартовые номера документов"
//Процедура флСтартНомераВыбор()
//	флОбновлятьТабСтартНом = 1;
//	Поз = Форма.Закладки.НайтиЗначение("СтартНомера");
//	Если флСтартНомера = 1 Тогда
//		Если Поз = 0 Тогда
//		    Форма.Закладки.ДобавитьЗначение("СтартНомера","Стартовые номера");		
//		КонецЕсли;
//		ЗаполнитьТаблицуСтартовыхНомеров();
//	ИначеЕсли Поз<> 0 Тогда
//		Форма.Закладки.УдалитьЗначение(Поз);
//	КонецЕсли;
//КонецПроцедуры   
//
////******************************************************************************
//Процедура ПометкаДанныхВыбор(Т)
//	Перем Выб;
//	Меню=СоздатьОбъект("СписокЗначений");
//	Меню.ДобавитьЗначение(ЗначениеПометки,"Пометить все");
//	Меню.ДобавитьЗначение(ЗначениеНеПометки,"Снять со всех");
//	Меню.ДобавитьЗначение(-1,"Инвертировать все");
//	Если Меню.ВыбратьЗначение(Выб,"",,,1)=0 Тогда
//	    Возврат;
//	КонецЕсли;
//    Т.ВыбратьСтроки();
//	Пока Т.ПолучитьСтроку()=1 Цикл
//		Если Выб = -1 Тогда
//			Т.Пометка = ?(Т.Пометка = ЗначениеПометки, ЗначениеНеПометки, ЗначениеПометки);
//		Иначе
//			Т.Пометка = Выб;
//		КонецЕсли;
//	КонецЦикла;
//КонецПроцедуры  
//
//******************************************************************************
Процедура ТабВыбор(Т)
	Т.Пометка = ?(Т.Пометка = ЗначениеПометки, ЗначениеНеПометки, ЗначениеПометки);
КонецПроцедуры  
//
////******************************************************************************
//Процедура кнВосстФайлИсторииВыбор()
//	Если ВыбАгент.Выбран()=0 Тогда
//	    Предупреждение("Выберите торгового представителя в закладке ""Обмен данными""!");
//		Возврат;
//	КонецЕсли;
//	ИмяФайлаИстории = ВернутьИмяФайлаИсторииПродаж();
//	СтароеИмяФайлаИстории = Лев(ИмяФайлаИстории,СтрДлина(ИмяФайлаИстории)-3)+"old";
//	Если ФС.СуществуетФайл(СтароеИмяФайлаИстории)=0 Тогда
//	    Предупреждение("Старый файл истории """+СтароеИмяФайлаИстории+""" не обнаружен. Восстановление невозможно.");
//		Возврат;
//	Иначе
//		ФС.ПереименоватьФайл(СтароеИмяФайлаИстории,ИмяФайлаИстории,1);
//		Предупреждение("Восстановление успешно завершено.");
//	КонецЕсли;
//КонецПроцедуры 
//
////******************************************************************************
//Процедура кнНастройкаАгентПВыбор()      
//	
//	Если ВыбАгент.Выбран() = 1 Тогда      
//		
//		Если АгентИнфо.МобильноеПриложение.Выбран() = 0 Тогда
//			
//			Предупреждение("Необходимо указать мобильное приложение, с которым работает агент!", 60);
//			СтатусВозврата(0); 
//			Возврат;
//			
//		Иначе   
//					
//			Если МобильноеПриложение = Перечисление.кпкМобильныеПриложения.АгентПлюс15 Тогда
//				
//				Если ФС.СуществуетФайл(КаталогИБ() + "ExtForms\КПКНастройкаАгентПлюс.ert") = 0 Тогда
//					ОповеститьОСобытии("Нет файла: " + КаталогИБ() + "ExtForms\КПКНастройкаАгентПлюс.ert", "!", 0);
//					ОповеститьОСобытии("Не найдена обработка для настройки Агент+ на КПК!", "!", 0);
//				Иначе
//					//Конт = 0;
//					ОткрытьФормуМодально("Отчет", ВыбАгент, КаталогИБ() + "ExtForms\КПКНастройкаАгентПлюс.ert");
//				КонецЕсли; 
//				
//			ИначеЕсли МобильноеПриложение = Перечисление.кпкМобильныеПриложения.АгентПлюсМТ Тогда				
//				
//				СпрНастройки = СоздатьОбъект("Справочник.кпкНастройкиАгентов");		                     
//				СпрНастройки.ИспользоватьВладельца(АгентИнфо);
//				
//				Если СпрНастройки.ВыбратьЭлементы(1) = 1 Тогда			
//					Пока СпрНастройки.ПолучитьЭлемент() = 1 Цикл				
//						ОткрытьФорму(СпрНастройки.ТекущийЭлемент(),Контекст, 0);			    
//					КонецЦикла;      			
//				Иначе                                                           			
//					ОткрытьФормуМодально("Элемент.кпкНастройкиАгентов", Контекст, , , АгентИнфо);		    
//				КонецЕсли;    		
//				
//			КонецЕсли;  			
//			
//		КонецЕсли;   		
//		
//	Иначе    
//		
//		Предупреждение("Укажиге агента на форме!", 60);  
//		
//	КонецЕсли;  
//	
//КонецПроцедуры //кнНастройкаАгентПВыбор      

//******************************************************************************
// Предопределенная процедура
Процедура ОбработкаВнешнегоСобытия(ИмяИсточника, Событие, Данные)
	
	Если ИмяИсточника <> "APServer" Тогда
	    Возврат;
	КонецЕсли; 
	      
	ТекЗначение = списСпособОбмена.ПолучитьЗначение(списСпособОбмена.ТекущаяСтрока());
    
	Если ТекЗначение <> "Сервер" Тогда
	    Возврат;
	КонецЕсли;
	 
	//поступило оповещение от Агент+ Сервер
	
	Если Событие = "NewDataFromServer" Тогда //пришли данные от пользователя КПК на сервер
		Спис = СоздатьОбъект("СписокЗначений");
		Спис.ИзСтрокиСРазделителями(Данные);
		
		// В списке следующие значения:
		//1-й - иденифмкато КПК
		//2-й - псевдоним торгвого агента (владельца КПК)
		//3-й - директория обмена данными 
		//4-й - имя полученного с КПК файла с директорией
		//5-й - время сеанса
		//6-й - контрольная сумма полученного файла
		ИдКПК = Спис.ПолучитьЗначение(1);
		Псевдоним = Спис.ПолучитьЗначение(2);
		
		ОповеститьОСобытии("-------------------------------", "", 0);
		ОповеститьОСобытии(ТекущееВремя() + ": поступили данные от агента """ + Псевдоним+ """ (КПК: " + ИдКПК + ")","i");
				
		СпрКПК = СоздатьОбъект("Справочник.МУ");
		СпрАг  = СоздатьОбъект("Справочник.кпкАгенты");
		
		Если СпрКПК.НайтиПоРеквизиту("Идентификатор", ИдКПК, 1) = 0 Тогда
		    ОповеститьОСобытии("В справочнике ""КПК"" не найден КПК с идентификатором """+ИдКПК+"""!", "!");
			Возврат;
		КонецЕсли;
		
		Если СпрАг.НайтиПоРеквизиту("КпкМодель",СпрКПК.ТекущийЭлемент(), 1) = 0 Тогда
		    ОповеститьОСобытии("В справочнике ""Агенты"" не найден владелец КПК """+СокрЛП(СпрКПК.Наименование)+""" (идентификатор КПК: """+ИдКПК+""") !", "!");
			Возврат;
		КонецЕсли;
		
		ОповеститьОСобытии("Начало загрузки данных для агента: " + СокрЛП(СпрАг.Наименование), "i");
		Если ЗагрузитьДанныеСАПСервера(СпрАг.ТекущийЭлемент().Ссылка) = 1 Тогда
		    ОповеститьОСобытии("Данные загружены", "i");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ОбработкаВнешнегоСобытия()    

//******************************************************************************
// ОбработкаПараметраФормы(Параметр)
Процедура ОбработкаПараметраФормы(Параметр)
	
	Если ТипЗначенияСтр(Параметр) <> "СписокЗначений" Тогда
	    Возврат;
	КонецЕсли;
	
	ИмяИсточника= Параметр.Получить("ИмяИсточника");
	Событие 	= Параметр.Получить("Событие");
	Данные 		= Параметр.Получить("Данные");
	
	ОбработкаВнешнегоСобытия(ИмяИсточника, Событие, Данные);
	
КонецПроцедуры 

////******************************************************************************
//Процедура флНачМесяцаВыбор()
//	Форма.ДатаМ1.Доступность(?(флНачМесяца = 1, 0, 1));
//	Если флНачМесяца = 1 Тогда
//	    ДатаМ1 = НачМесяца(ДатаМ1);
//	КонецЕсли;
//КонецПроцедуры
//
////******************************************************************************
//Процедура ОбработкаВыбораЗначения(ВыбЗнач,ИдентРекв,ФлагСтандОбр)
//	
//	Если ИдентРекв = "ВыбГруппаКлиентов" Тогда
//	    Если ВыбЗнач.ЭтоГруппа() = 0 Тогда
//	        Предупреждение("Разрешается только выбор групп клиентов!",10);
//			ФлагСтандОбр = 0;
//		Иначе
//			Константа.КПКГруппаНовыхКлиентов = ВыбЗнач;
//	    КонецЕсли;
//	КонецЕсли;
//	
//КонецПроцедуры // ОбработкаВыбораЗначения()
//
////******************************************************************************
//// ПроверкаСправочникаНумераторов()
////
//// Параметры: 
////  
////
//// Возвращаемое значение:
////  Нет
////
//// Описание:
////  ТекстОписания
////
//Процедура ПроверкаСправочникаНумераторов()
//	
//	Если Метаданные.Справочник("кпкНумераторы").Выбран() = 0 Тогда
//	    Возврат;
//	КонецЕсли;
//	
//	Спр = СоздатьОбъект("Справочник.кпкНумераторы");
//	Если Спр.ВыбратьЭлементы() = 1 Тогда
//	    Возврат; //значит справочник не пустой
//	КонецЕсли;
//	
//	НачатьТранзакцию();
//	Спр.Новый(); Спр.Код = 0; Спр.Наименование = "<Не выбнан>"; Спр.ВидыДокументовВКпк = ""; 
//	Спр.Записать();
//	
//	Спр.Новый(); Спр.Код = 1; Спр.Наименование = "Заявки"; Спр.ВидыДокументовВКпк 	= АПВидДокЗаявка; 
//	Спр.ДлинаНомера = 10; Спр.Записать();
//	
//	Спр.Новый(); Спр.Код = 2; Спр.Наименование = "Продажи"; Спр.ВидыДокументовВКпк 	= АПВидДокРеализация; 
//	Спр.ДлинаНомера = 10; Спр.Записать();
//	
//	Спр.Новый(); Спр.Код = 3; Спр.Наименование = "Счета-фактуры";Спр.ВидыДокументовВКпк = АПВидДокСчетФ; 
//	Спр.ДлинаНомера = 10; Спр.Записать();
//	
//	Спр.Новый(); Спр.Код = 4; Спр.Наименование = "ПКО"; Спр.ВидыДокументовВКпк 		= АПВидДокПКО; 
//	Спр.ДлинаНомера = 10; Спр.Записать();
//	
//	Спр.Новый(); Спр.Код = 5; Спр.Наименование = "РКО"; Спр.ВидыДокументовВКпк 		= АПВидДокРКО; 
//	Спр.ДлинаНомера = 10; Спр.Записать();
//	
//	Спр.Новый(); Спр.Код = 6; Спр.Наименование = "Мерчендайзинг"; Спр.ВидыДокументовВКпк = АПВидДокМерч; 
//	Спр.ДлинаНомера = 10; Спр.Записать();
//	
//	Спр.Новый(); Спр.Код = 7; Спр.Наименование = "Посещение"; Спр.ВидыДокументовВКпк= АПВидДокПосещение; 
//	Спр.ДлинаНомера = 10; Спр.Записать();
//	
//	Спр.Новый(); Спр.Код = 8; Спр.Наименование = "Перемещение"; Спр.ВидыДокументовВКпк= АПВидДокПеремещение; 
//	Спр.ДлинаНомера = 10; Спр.Записать();
//	
//	ЗафиксироватьТранзакцию();
//	
//КонецПроцедуры // ПроверкаСправочникаНумераторов()     
//
////******************************************************************************
//// Начало Процедуры выгрузки данных для Агент Плюс: Мобильная торговля
////****************************************************************************** 
//
//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПИСИ "Msxml2.DOMDocument.4.0"
//////////////////////////////////////////////////////////////////////////////////

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция СоздатьУзел(name)
	
	newNode = DOMDocument.createNode(1, name, "");
	
	Возврат newNode;

КонецФункции // СоздатьУзел()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура УстановитьАтрибут(element, name, value)
    
	element.setAttribute(name, Строка(value));
	
КонецПроцедуры // УстановитьАтрибут()

////******************************************************************************
////
////
//// Параметры:
////
//// Возвращаемое значение:
//// 
//// Описание:
////
//Процедура ЗаписатьЭлемент(node, name, value = "")
//	
//	childNode = DOMDocument.createNode(1, name, "");
//	childNode.text = Строка(value);
//	node.appendChild(childNode);
//    
//КонецПроцедуры // ЗаписатьЭлемент() 

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ДобавитьПодчиненный(parentNode, childNode)
	
	parentNode.appendChild(childNode);

КонецПроцедуры // ДобавитьПодчиненный()   
       
//******************************************************************************
Функция ДатаВремяВФорматXMLИз1С(лДатаВремя = "") Экспорт
	
	ДатаВремя = ?(лДатаВремя = "", ТекущаяДата(), лДатаВремя); 
	    
	НужноеВремя = "";
	
	ПозВремя = Найти(лДатаВремя, " ");
	
	Если ПозВремя > 0 Тогда 
		НужнаяДата = ДатаВФорматеXML(Лев(ДатаВремя, ПозВремя));	
		ВремяСтр = Сред(лДатаВремя, ПозВремя + 1);
		НужноеВремя = ВремяВФорматеXML(ВремяСтр);
	Иначе
		НужнаяДата = ДатаВФорматеXML(ДатаВремя);	
	КонецЕсли;
	
	Если НужноеВремя = "" Тогда
		НужноеЗначение = НужнаяДата;
	Иначе	
		НужноеЗначение = НужнаяДата + "T" + НужноеВремя;
	КонецЕсли;
	
	Возврат НужноеЗначение;
	
КонецФункции //ДатаВремяВФорматXMLИз1СМТ()

//******************************************************************************
Функция ПолучитьТекущуюДату()
	
	ТекДатаВремя = ДатаВремяВФорматXMLИз1С(Строка(ТекущаяДата()) + " " + Строка(ТекущееВремя()));
	
	Возврат ТекДатаВремя;
	
КонецФункции //ПолучитьТекущуюДату()

//******************************************************************************
Функция ПолучитьСтатусЦБД(Док)
	
	Перем СтатусДокумента;
	//*?*

	Если Док.Проведен() = 1 Тогда
		СтатусДокумента = "cf16bcd2-6b49-419c-926d-8e9f5f6b596b";
	ИначеЕсли Док.ПометкаУдаления() = 1 Тогда
		СтатусДокумента = "9c81410c-02e8-4299-9c53-f28658e974c8";
	Иначе
		СтатусДокумента = "ae4fd9db-ed1e-4c1a-bb98-26e1e2fd2268";
	КонецЕсли;
		
	Возврат СтатусДокумента;
	
КонецФункции //ПолучитьСтатусЦБД    

//******************************************************************************
Функция ПреобразоватьЗначениеВСтрокуДляXML(Значение)   
	
	Если ТипЗначения(Значение) = 2 Тогда
		ПреобразованноеЗначение = СокрЛП(Значение);
	ИначеЕсли ТипЗначения(Значение) = 1 Тогда
		ПреобразованноеЗначение = Строка(Значение);	
	ИначеЕсли ТипЗначения(Значение) = 3 Тогда
		ПреобразованноеЗначение = ДатаВремяВФорматXMLИз1С(Значение);
	ИначеЕсли ТипЗначения(Значение) = 11 Тогда  
		Если ПустоеЗначение(Значение) = 0 Тогда   
			
			//ОбъектИнфо = ПолучитьСправочныеДанные(Значение);
			//Если ОбъектИнфо.Выбран() = 0 Тогда
			//	ОбъектИнфо = ЗаписатьСправочныеДанные(Значение);
			//КонецЕсли;
			ПреобразованноеЗначение = СокрЛП(Значение.Идентификатор);		 			
		Иначе     
			ПреобразованноеЗначение = "";
		КонецЕсли;		
	Иначе    		
		ПреобразованноеЗначение = Значение;
	КонецЕсли; 
	
	ЗнАтрибута = СтрЗаменить(ПреобразованноеЗначение, РазделительСтрок, "#рс#");
	ЗнАтрибута = СтрЗаменить(ПреобразованноеЗначение, СимволТабуляции,  "#ст#");   	
		
	Возврат ЗнАтрибута;
	
КонецФункции //ПреобразоватьЗначениеВСтрокуДляXML()
 
//******************************************************************************
Процедура ДобавитьПоле(Элемент, Имя, Значение)  
	
	УстановитьАтрибут(Элемент, Имя, ПреобразоватьЗначениеВСтрокуДляXML(Значение));
	
КонецПроцедуры // ДобавитьПоле()      

//******************************************************************************
Процедура ЗаписатьЭлементВДокументОбмена(РодительскийУзел, СтруктураПолей, ЗакрытьУзел = 1, УзелЭлемента = 0)
	    
	Перем ИмяПоля;
	
	УзелЭлемента = СоздатьУзел("ITEM");
	
	Для Сч = 1 По СтруктураПолей.РазмерСписка() Цикл  		
		ТекЗнач = СтруктураПолей.ПолучитьЗначение(Сч, ИмяПоля); 
		ДобавитьПоле(УзелЭлемента, ИмяПоля, ТекЗнач);
	КонецЦикла;
	
	Если ЗакрытьУзел = 1 Тогда
		ДобавитьПодчиненный(РодительскийУзел, УзелЭлемента); // Закрываем узел   
	КонецЕсли;
	
КонецПроцедуры //ЗаписатьЭлементВДокументОбмена                                 

//****************************************************************************** 
Процедура ДобавитьПустойЭлементВXML(РодительскийУзел, Имя)
	
	Узел = СоздатьУзел(Имя);
	
	ДобавитьПодчиненный(РодительскийУзел, Узел); // Закрываем узел		         
	
КонецПроцедуры //ДобавитьПустойЭлементВXML		
  
//****************************************************************************** 
Функция ПолучитьСтруктуруПредопределенныхПолейСправочника(Объект, СоздаватьИдентификатор = 0)
	
	СтруктураПолей = СоздатьОбъект("СписокЗначений");
	
	Если СоздаватьИдентификатор = 1 Тогда
		СтруктураПолей.ДобавитьЗначение(глАПСоздатьИдентификатор(), "GUID");
	Иначе   		  
		Если (Метаданные.Справочник(Объект.Вид()).Реквизит("Идентификатор").Выбран() = 0)
			или (Найти(ВРег(Объект.Вид()), "КПК") = 0) Тогда
			//ОбъектИнфо = ПолучитьСправочныеДанные(Объект);
			//Если ОбъектИнфо.Выбран() = 0 Тогда
			//	ОбъектИнфо = ЗаписатьСправочныеДанные(Объект);
			//КонецЕсли;		
			СтруктураПолей.ДобавитьЗначение(СокрЛП(Объект.Идентификатор), "GUID");
		Иначе     
			СтруктураПолей.ДобавитьЗначение(СокрЛП(Объект.Идентификатор), "GUID");
		КонецЕсли;
	КонецЕсли;              	                      
	
	СтруктураПолей.ДобавитьЗначение(Объект.ПометкаУдаления(), "IsDeleted");
	СтруктураПолей.ДобавитьЗначение(Объект.Наименование, 	  "Name");
	
	Возврат СтруктураПолей
	
КонецФункции //ПолучитьСтруктуруПредопределенныхПолейСправочника

//****************************************************************************** 
Функция ПолучитьСтруктуруПредопределенныхПолейДокумента(ТекДокумент, СоздаватьИдентификатор = 0)
	
	СтруктураПолей = СоздатьОбъект("СписокЗначений");
	
	Если СоздаватьИдентификатор = 1 Тогда
		СтруктураПолей.ДобавитьЗначение(глАПСоздатьИдентификатор(), "GUID");
	Иначе
		ИдДок = ВернутьИдентификаторДок(ТекДокумент);        
		СтруктураПолей.ДобавитьЗначение(ИдДок, "GUID");
	КонецЕсли;
	                                
	ДатаВремяДок = ДатаВремяВФорматXMLИз1С(Строка(ТекДокумент.ДатаДок) + " " + Строка(ТекДокумент.ПолучитьВремя()));
	СтруктураПолей.ДобавитьЗначение(ДатаВремяДок, 					"dt");
	СтруктураПолей.ДобавитьЗначение(ТекДокумент.ПометкаУдаления(),  "IsDeleted");
	СтруктураПолей.ДобавитьЗначение(ТекДокумент.Проведен(), 		"IsPost"); 
	
	Возврат СтруктураПолей
	
КонецФункции //ПолучитьСтруктуруПредопределенныхПолейДокумента
 
////****************************************************************************** 
//Процедура ВыгрузитьПростойСправочник(Идентификатор, ИмяСпр, РодительскийУзел, СписЭлементов = 0, Владелец = 0) 
//	
//	Спр = СоздатьОбъект("Справочник." + ИмяСпр);
//	
//	УзелСправочника = СоздатьУзел("CATALOG"); 	
//	
//	ДобавитьПоле(УзелСправочника, "GUID", Идентификатор); 		
//	
//	// Передаем команду на очистку справочника перед загрузкой
//	Если флОчищатьСправочникиПередЗагрузкой = 1 Тогда
//		ДобавитьПоле(УзелСправочника, "KILLALL", "1");                	
//	КонецЕсли;	
//	
//	ДобавитьПустойЭлементВXML(УзелСправочника, "GROUPS");// Выгрузка элементов справочника
//	
//	УзелЭлементов = СоздатьУзел("ELEMENTS");  
//	
//	    Если Владелец <> 0 Тогда  
//			Спр.ИспользоватьВладельца(Владелец);
//		КонецЕсли;
//	
//		Спр.ВыбратьЭлементы(1);
//	    
//		Пока Спр.ПолучитьЭлемент() = 1 Цикл			
//			
//			Если (Спр.ПометкаУдаления() = 1) или (Спр.Выбран() = 0) Тогда Продолжить; КонецЕсли;	        	
//			      
//			Если СписЭлементов <> 0 Тогда
//				Если СписЭлементов.РазмерСписка() > 0 Тогда
//					Если СписЭлементов.НайтиЗначение(Спр.ТекущийЭлемент()) = 0 Тогда
//						Продолжить;	
//					КонецЕсли; 
//				КонецЕсли; 
//			КонецЕсли;
//			
//			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Спр.ТекущийЭлемент());
//			ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);   
//			
//		КонецЦикла; 
//	
//	ДобавитьПодчиненный(УзелСправочника, УзелЭлементов); // Закрываем узел ELEMENTS  	                                 
//	
//	ДобавитьПодчиненный(РодительскийУзел, УзелСправочника); // Закрываем узел CATALOG     
//	
//КонецПроцедуры //ВыгрузитьПростойСправочник   
//
////****************************************************************************** 
//
//////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ ДЛЯ ВЫГРУЗКИ ДАННЫХ ДЛЯ ПРИЛОЖЕНИЯ МОБИЛЬНАЯ ТОРГОВЛЯ
//////////////////////////////////////////////////////////////////
//
//Процедура ВыгрузитьВидыКонтактнойИнформации(РодительскийУзел)
//	
//	УзелСправочника = СоздатьУзел("CATALOG");
//	
//	ДобавитьПоле(УзелСправочника, "GUID", "564e0eca-c498-4d28-83d7-4bdeaec558e2");
//	
//	 	ДобавитьПоле(УзелСправочника, "KILLALL", "1");                	
//		
//		ДобавитьПустойЭлементВXML(УзелСправочника, "GROUPS");// Выгрузка элементов справочника
//		
//		УзелЭлементов = СоздатьУзел("ELEMENTS"); 
//		
//		// Фактический адрес контрагента   		                     		
//		СтруктураПолей = СоздатьОбъект("СписокЗначений");
//		
//		СтруктураПолей.ДобавитьЗначение(ИдФактАдрес,       				 "GUID");		
//		СтруктураПолей.ДобавитьЗначение("0", 				 			 "IsDeleted");
//		СтруктураПолей.ДобавитьЗначение("Фактический адрес", 			 "Name");
//	    СтруктураПолей.ДобавитьЗначение(СписокТиповКИ.Получить("Адрес"), "A02");
//		
//		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);				
//		
//		// Юридический адрес контрагента                             		                 
//		СтруктураПолей.УдалитьВсе();
//		СтруктураПолей.ДобавитьЗначение(ИдЮрАдрес,       			 	 "GUID");
//		СтруктураПолей.ДобавитьЗначение("0", 				 			 "IsDeleted");
//		СтруктураПолей.ДобавитьЗначение("Юридический адрес", 			 "Name");
//	    СтруктураПолей.ДобавитьЗначение(СписокТиповКИ.Получить("Адрес"), "A02");
//		
//		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);				
//		
//		// Телефон             		
//		СтруктураПолей.УдалитьВсе();
//		СтруктураПолей.ДобавитьЗначение(ИдТелефон,       	 				"GUID");   			;
//		СтруктураПолей.ДобавитьЗначение("0", 				 				"IsDeleted");
//		СтруктураПолей.ДобавитьЗначение("Телефон", 			 			  	"Name");
//	    СтруктураПолей.ДобавитьЗначение(СписокТиповКИ.Получить("Телефон"), 	"A02");
//		
//		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);	
//		
//		// Адрес торговой точки                             
//		СтруктураПолей.УдалитьВсе();
//		СтруктураПолей.ДобавитьЗначение(ИдАдресТТ,       	 			 "GUID");		
//		СтруктураПолей.ДобавитьЗначение("0", 				 			 "IsDeleted");
//		СтруктураПолей.ДобавитьЗначение("Адрес торговой точки", 		 "Name");
//	    СтруктураПолей.ДобавитьЗначение(СписокТиповКИ.Получить("Адрес"), "A02");
//		
//		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);
//		
//		// Рабочий телефон КЛ   
//		СтруктураПолей.УдалитьВсе();
//		СтруктураПолей.ДобавитьЗначение(ИдРабочийТелефонКЛ,       	 		"GUID");		
//		СтруктураПолей.ДобавитьЗначение("0", 				 				"IsDeleted");
//		СтруктураПолей.ДобавитьЗначение("Рабочий телефон", 			 		"Name");
//	    СтруктураПолей.ДобавитьЗначение(СписокТиповКИ.Получить("Телефон"),  "A02");
//		
//		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);
//		
//		// Мобильный телефон КЛ
//		СтруктураПолей.УдалитьВсе();
//		СтруктураПолей.ДобавитьЗначение(ИдМобильныйТелефонКЛ,       		"GUID");		
//		СтруктураПолей.ДобавитьЗначение("0", 				 				"IsDeleted");
//		СтруктураПолей.ДобавитьЗначение("Мобильный телефон", 				"Name");
//	    СтруктураПолей.ДобавитьЗначение(СписокТиповКИ.Получить("Телефон"),  "A02");
//		
//		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);
//		
//		// Адрес электронной почты КЛ
//		СтруктураПолей.УдалитьВсе();                                                     
//		СтруктураПолей.ДобавитьЗначение(ИдАдресЭлПочтыКЛ,       						 "GUID");		
//		СтруктураПолей.ДобавитьЗначение("0", 				 							 "IsDeleted");
//		СтруктураПолей.ДобавитьЗначение("Электронная почта", 							 "Name");
//	    СтруктураПолей.ДобавитьЗначение(СписокТиповКИ.Получить("АдресЭлектроннойПочты"), "A02");
//		
//		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);		
//			
//		ДобавитьПодчиненный(УзелСправочника, УзелЭлементов); // Закрываем узел ELEMENTS  	                                 
//	
//	ДобавитьПодчиненный(РодительскийУзел, УзелСправочника); // Закрываем узел CATALOG     
//	
//КонецПроцедуры // ВыгрузитьВидыКонтактнойИнформации()
//
////******************************************************************************
//Процедура ВыгрузитьДоговорыКонтагентов(РодительскийУзел) 
//    
//	// Выгружаем группы клиентов 	
//	ТекстЗапроса = "
//	|Обрабатывать НеПомеченныеНаУдаление;
//	|Договор = Справочник.Договоры.ТекущийЭлемент;  
//	|Клиент = Справочник.Договоры.Владелец; 	
//	|Группировка Договор Без Упорядочивания; 		
//	|Условие (Клиент В (СписокКлиентов));";				  
//		
//	Запрос = СоздатьОбъект("Запрос"); 
//	
//	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
//		ОповеститьОСобытии("Не выполнен запрос по договорам!", "!!!");
//		Возврат;
//	КонецЕсли;	
//	
//	Таб = СоздатьОбъект("ТаблицаЗначений");
//	Запрос.Выгрузить(Таб);  		
//	КолЭлементов = Таб.КоличествоСтрок();   	
//	
//	УзелСправочника = СоздатьУзел("CATALOG"); 	
//	
//	ДобавитьПоле(УзелСправочника, "GUID", "735a9ce5-dcc1-4d1a-8f8d-643a50a6befc"); 		
//	
//	// Передаем команду на очистку справочника перед загрузкой
//	Если флОчищатьСправочникиПередЗагрузкой = 1 Тогда
//		ДобавитьПоле(УзелСправочника, "KILLALL", "1");                	
//	КонецЕсли;	
//	
//	ДобавитьПустойЭлементВXML(УзелСправочника, "GROUPS");// Выгрузка элементов справочника
//	
//	УзелЭлементов = СоздатьУзел("ELEMENTS");   
//	
//	Пока Запрос.Группировка() = 1 Цикл    
//		
//		Договор = Запрос.Договор;  
//		     
//		Если (Договор.ЭтоГруппа() = 1) или (Договор.Выбран() = 0) Тогда Продолжить; КонецЕсли;
//		
//		ДоговорИнфо = ПолучитьСправочныеДанные(Договор);
//		Если ПустоеЗначение(ДоговорИнфо) = 1 Тогда
//			ДоговорИнфо = ЗаписатьСправочныеДанные(Договор);
//		КонецЕсли;                     
//		
//		ОснФирма = ?(АгентИнфо.Фирма.Выбран()=1, АгентИнфо.Фирма, глЗначениеПоУмолчанию("ОсновнаяФирма"));
//		
//		СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Договор);						
//		
//		СтруктураПолей.ДобавитьЗначение(Договор.Владелец, 	"A02");
//		СтруктураПолей.ДобавитьЗначение("", 			  	"A03");
//		СтруктураПолей.ДобавитьЗначение("", 				"A04");
//		СтруктураПолей.ДобавитьЗначение(ОснФирма, 			"A05"); 	
//		Если ПолучитьКодТипаЦеныВКПК(Договор.ТипЦен, Договор) <> 0 Тогда
//			СтруктураПолей.ДобавитьЗначение(Договор.ТипЦен, 	"A06");
//		КонецЕсли;
//		
//		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);
//		
//	КонецЦикла; 		
//	
//	ДобавитьПодчиненный(УзелСправочника, УзелЭлементов); // Закрываем узел ELEMENTS  	                                 
//	
//	ДобавитьПодчиненный(РодительскийУзел, УзелСправочника); // Закрываем узел CATALOG     
//	                                    
//КонецПроцедуры // ВыгрузитьДоговорыКонтагентов
//
////****************************************************************************** 
//Процедура ВыгрузитьКонтактныеЛица(РодительскийУзел, СписокТТ)  
//	
//	ТекстЗапроса = "
//	|Обрабатывать НеПомеченныеНаУдаление;
//	|КЛ = Справочник.кпкКонтактныеЛица.ТекущийЭлемент; 
//	|ТоргТочка = Справочник.кпкКонтактныеЛица.Владелец;
//	|Группировка КЛ Без Упорядочивания; 
//	|Условие (ТоргТочка В (СписокТТ));";
//	
//	Запрос = СоздатьОбъект("Запрос"); 
//	
//	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
//		ОповеститьОСобытии("Не выполнен запрос по торговым точкам!", "!!!");
//		Возврат;
//	КонецЕсли;   	
//		
//	УзелСправочника = СоздатьУзел("CATALOG"); 	
//	
//	ДобавитьПоле(УзелСправочника, "GUID", "cf387a58-4655-41b5-a460-85884d1f20d0"); 		
//	
//	// Передаем команду на очистку справочника перед загрузкой
//	Если флОчищатьСправочникиПередЗагрузкой = 1 Тогда
//		ДобавитьПоле(УзелСправочника, "KILLALL", "1");                	
//	КонецЕсли;	
//	
//	ДобавитьПустойЭлементВXML(УзелСправочника, "GROUPS");// Выгрузка элементов справочника
//	
//	УзелЭлементов = СоздатьУзел("ELEMENTS");   
//	
//	Пока Запрос.Группировка("КЛ") = 1 Цикл      
//		
//		КЛ = Запрос.КЛ;
//	
//		СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(КЛ);
//		
//		СтруктураПолей.ДобавитьЗначение(Запрос.ТоргТочка, "A04");
//			
//		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);  
//		
//		СписокКЛ.ДобавитьЗначение(КЛ);
//		
//	КонецЦикла;   
//	
//	ДобавитьПодчиненный(УзелСправочника, УзелЭлементов); // Закрываем узел ELEMENTS  	                                 
//	
//	ДобавитьПодчиненный(РодительскийУзел, УзелСправочника); // Закрываем узел CATALOG     				
//	
//КонецПроцедуры //ВыгрузитьКонтактныеЛица 
//                                            
////******************************************************************************  
//Процедура ВыгрузитьТорговыеТочки(РодительскийУзел)
//	
//	ОкноСостояние(""); 	
//	
//    УзелСправочника = СоздатьУзел("CATALOG"); 	
//	
//	ДобавитьПоле(УзелСправочника, "GUID", "d3dbb02e-681e-4fc2-ad0e-8ef1234e9f48"); 
//	
//	Если ИспТочек = 1 Тогда			
//		
//		// Выгружаем группы клиентов 	
//		ТекстЗапроса = "
//		|Обрабатывать НеПомеченныеНаУдаление;
//		|ТоргТочка = Справочник.кпкТорговыеТочки.ТекущийЭлемент; 
//		|Клиент = Справочник.кпкТорговыеТочки.Владелец;
//		|Группировка ТоргТочка Без Упорядочивания; 
//		|Условие (Клиент В (СписокКлиентов));";				  
//		
//		Запрос = СоздатьОбъект("Запрос"); 
//		
//		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
//			ОповеститьОСобытии("Не выполнен запрос по торговым точкам!", "!!!");
//			Возврат;
//		КонецЕсли;  
//		
//		Таб = СоздатьОбъект("ТаблицаЗначений");
//		Запрос.Выгрузить(Таб);  		
//		КолЭлементов = Таб.КоличествоСтрок(); 
//		
//		// Передаем команду на очистку справочника перед загрузкой
//		Если флОчищатьСправочникиПередЗагрузкой = 1 Тогда
//			ДобавитьПоле(УзелСправочника, "KILLALL", "1");                	
//		КонецЕсли;	
//		
//		ДобавитьПустойЭлементВXML(УзелСправочника,"GROUPS");
//		
//		УзелЭлементов = СоздатьУзел("ELEMENTS");  
//		
//		СписокТТ = СоздатьОбъект("СписокЗначений");
//		
//		Пока Запрос.Группировка("ТоргТочка") = 1 Цикл    
//			
//			ТоргТочка = Запрос.ТоргТочка;
//			
//			Если ТоргТочка.Выбран() = 0 Тогда Продолжить; КонецЕсли;
//			
//			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(ТоргТочка);   
//			
//			НаимТочки 	= СокрЛП(?(ПустоеЗначение(ТоргТочка.ПолнНаименование) = 0, ТоргТочка.ПолнНаименование, ТоргТочка.Наименование));			
//			СтруктураПолей.Установить("Name", НаимТочки);
//			
//			СтруктураПолей.ДобавитьЗначение(Запрос.Клиент, 		 "A02"); 
//			СтруктураПолей.ДобавитьЗначение(ТоргТочка.Категория, "A05");
//			СтруктураПолей.ДобавитьЗначение(ТоргТочка.ТипТочки,  "A06");
//			
//			ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);  			
//			
//			СписокТТ.ДобавитьЗначение(ТоргТочка);
//			
//			СчЭлементов = СчЭлементов + 1;                              
//			
//			ПроцентВыгрузки = Окр(СчЭлементов/КолЭлементов*100, 0);		
//			
//			ОкноСостояние("Выгрузка торговых точек: " + ПроцентВыгрузки + "%");				
//			
//		КонецЦикла; 
//		
//		ДобавитьПодчиненный(УзелСправочника, УзелЭлементов); // Закрываем узел ELEMENTS  		         		
//		
//	Иначе
//		
//		ДобавитьПоле(УзелСправочника, "KILLALL", "1");                	
//		
//	КонецЕсли;
//	
//	ДобавитьПодчиненный(РодительскийУзел, УзелСправочника); // Закрываем узел CATALOG 
//
//	ВыгрузитьКонтактныеЛица(РодительскийУзел, СписокТТ);			
//
//КонецПроцедуры //ВыгрузитьТорговыеТочки


//****************************************************************************** 
Процедура ВыгрузитьПользователей(РодительскийУзел) 
	
	//ОкноСостояние(""); 	
	
	ТекстЗапроса = "SELECT Комплектовщики.ID [Пользователь $Справочник.Комплектовщики]
	|					, $Комплектовщики.Сотрудник [Сотрудник $Справочник.Сотрудники]
	|				FROM $Справочник.Комплектовщики AS Комплектовщики (NOLOCK)
	|				WHERE (Комплектовщики.ISMARK = 0) AND ($Комплектовщики.Сотрудник <> $ПустойИд) AND $Комплектовщики.ПерсональныйКод > '0'
	|";

	ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");	
	Таб = СоздатьОбъект("ТаблицаЗначений");
	Таб = ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса);
	//// Выгружаем склады	
	//ТекстЗапроса = "
	//|Обрабатывать НеПомеченныеНаУдаление;
	//|Агент = Справочник.кпкАгенты.ТекущийЭлемент; 
	//|Пользователь = Справочник.кпкАгенты.Ссылка.ТекущийЭлемент; 
	//|Группировка Пользователь Без Упорядочивания;"; 
	
	//Запрос = СоздатьОбъект("Запрос"); 
	//
	//Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
	//	ОповеститьОСобытии("Не выполнен запрос по Пользователям!", "!!!");
	//	Возврат;
	//КонецЕсли;  			
	
//	Запрос.Выгрузить(Таб);  		
	
	//Таб.ВыбратьСтроку();
	
	КолЭлементов = Таб.КоличествоСтрок();
	
	УзелСправочника = СоздатьУзел("CATALOG"); 	
	
	ДобавитьПоле(УзелСправочника, "GUID", "5e53ebd5-bcd6-4aa4-a70c-cd5b3e67e8a8"); 	
	ДобавитьПоле(УзелСправочника, "Comment", "Справочник.кпкАгенты");
	
	// Передаем команду на очистку клиентов перед загрузкой
	Если флОчищатьСправочникиПередЗагрузкой = 1 Тогда
		ДобавитьПоле(УзелСправочника, "KILLALL", "1");                	
	КонецЕсли;	
	
	// Выгрузка элементов справочника
	УзелЭлементов = СоздатьУзел("ELEMENTS");   
	
	Таб.ВыбратьСтроки();
	Пока Таб.ПолучитьСтроку() = 1 Цикл
		
		ТекПользователь =  Таб.Пользователь;    
		
		Если ПустоеЗначение(ТекПользователь ) = 1 Тогда Продолжить; КонецЕсли;
		
		Если ТекПользователь .ЭтоГруппа() = 1 Тогда Продолжить; КонецЕсли;
		
		//СкладИнфо = ПолучитьСправочныеДанные(Склад);
		//Если ПустоеЗначение(СкладИнфо) = 1 Тогда
		//	СкладИнфо = ЗаписатьСправочныеДанные(Склад);
		//КонецЕсли;                                  	
		
		СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(ТекПользователь );
		СтруктураПолей.Установить("Name",Translate_Descr(СокрЛП(ТекПользователь.Наименование)) );
		СтруктураПолей.ДобавитьЗначение(Константа.ОсновнойСклад,  						"A01"); 
		
		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);  
		
		СчЭлементов = СчЭлементов + 1;   
		
		ПроцентВыгрузки = Окр(СчЭлементов/КолЭлементов*100, 0);		
		
		ОкноСостояние("Выгрузка пользователей: " + ПроцентВыгрузки + "%");						
		
	КонецЦикла; 		
	
	ДобавитьПодчиненный(УзелСправочника, УзелЭлементов); // Закрываем узел ELEMENTS  	                                 
	
	ДобавитьПодчиненный(РодительскийУзел, УзелСправочника); // Закрываем узел CATALOG     
	
КонецПроцедуры //ВыгрузитьПользователей()                                                


////****************************************************************************** 
Процедура ВыгрузитьКлиентов(РодительскийУзел, ТДопКлиенты) 
	
	//РегВзаиморасчеты = Регистр.Покупатели;
	//ДатаПеорРекв 	 = РабочаяДата();
	
	//В таблицу ТДопКлиенты включаем клиентов и торговые точки, 
	//которые были недавно созданы в КПК торговго агента.
	//ВключитьНовыхКлиентовИТоргТочки(ТДопКлиенты);

	//Если АгентИнфо.Контрагент.Выбран() = 1 Тогда 
	//	//агент может выступать и сам как клиент, например, в случае
	//	//оформленеия заявок на погрузку в машину (при "торговле с колес")
	//    Стр = 0;
	//	Если ТДопКлиенты.НайтиЗначение(АгентИнфо.Контрагент,Стр,"Клиент") = 0 Тогда
	//	    ТДопКлиенты.НоваяСтрока();
	//		ТДопКлиенты.Клиент = АгентИнфо.Контрагент;
	//	КонецЕсли;
	//КонецЕсли; 
	
	//Если ПланАгента.Выбран() = 1 Тогда // Выгрузка клиентов из плана посещений
	//	
	//	//выгружаемых клиентов запомним в таблице значений Т
	//	
	//	ПланАгента.ВыбратьСтроки();
	//	Пока ПланАгента.ПолучитьСтроку() = 1 Цикл			
	//		Клиент = ПланАгента.Контрагент;
	//	    Если Клиент.Выбран() = 1 Тогда    				
	//			Стр = 0;
	//	        Если СписокКлиентов.НайтиЗначение(Клиент) = 0 Тогда
	//				СписокКлиентов.ДобавитьЗначение(Клиент);					
	//	        КонецЕсли;
	//	    КонецЕсли;
	//	КонецЦикла;
	//	
	//	Если ТДопКлиенты.КоличествоСтрок() <> 0 Тогда
	//		//Если есть клиенты-должники, числящиеся за агентом, 
	//		//или клиенты вне плана посещений из-за документов "Маршрут", то выгружаем и их
	//		ТДопКлиенты.ВыбратьСтроки();
	//	    Пока ТДопКлиенты.ПолучитьСтроку() = 1 Цикл
	//			Если ТДопКлиенты.Клиент.Выбран() = 1 Тогда    				
	//				Стр = 0;       				
	//				Если СписокКлиентов.НайтиЗначение(ТДопКлиенты.Клиент) = 0 Тогда
	//					СписокКлиентов.ДобавитьЗначение(ТДопКлиенты.Клиент);							        
	//					Если ТДопКлиенты.Должник = 1 Тогда
	//						ОповеститьОСобытии("Выгружен дополнительно должник: " + ТДопКлиенты.Клиент, "i", 0);
	//					КонецЕсли;
	//				КонецЕсли; 
	//			КонецЕсли;
	//		КонецЦикла;   		   
	//	КонецЕсли;
	//		
	//КонецЕсли;	
	
	//ОкноСостояние(""); 	
	
	// Выгружаем группы клиентов 	
	ТекстЗапроса = "
	|Обрабатывать НеПомеченныеНаУдаление;
	|ТекКлиент = Справочник.Контрагенты.ТекущийЭлемент; 
	|Родитель = Справочник.Контрагенты.Родитель;
	|Группировка ТекКлиент Без Упорядочивания;"; 
	
//+ 2011.12.31
	Если ТДопКлиенты.РазмерСписка() <> 0 Тогда // Выгрузка только ис списка клиентов из Плана			
		ТекстЗапроса = ТекстЗапроса + "Условие (ТекКлиент В (ТДопКлиенты));";		
	Иначе
		Возврат;
	КонецЕсли; 
//- 2011.12.31
	
	Запрос = СоздатьОбъект("Запрос"); 
	
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		ОповеститьОСобытии("Не выполнен запрос по клиентам!", "!!!");
		Возврат;
	КонецЕсли;  			
	
	Таб = СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(Таб);  		
	
	//Таб.ВыбратьСтроку();
	
	КолЭлементов = Таб.КоличествоСтрок();
	
	УзелСправочника = СоздатьУзел("CATALOG"); 	
	
	ДобавитьПоле(УзелСправочника, "GUID", "2eb644bd-e697-491a-bb1e-689c83fc2845"); 		//9450980f-fb59-47e3-bae2-aa3c58441b1a
	ДобавитьПоле(УзелСправочника, "Comment", "Справочник.Контрагенты");
	
	// Передаем команду на очистку клиентов перед загрузкой
	Если флОчищатьСправочникиПередЗагрузкой = 1 Тогда
		ДобавитьПоле(УзелСправочника, "KILLALL", "1");                	
	КонецЕсли;	
	
	// Выгрузка групп контрагентов	
	УзелГрупп = СоздатьУзел("GROUPS"); 	
	
	УзелГруппы = СоздатьУзел("GROUP"); 	
	
	ДобавитьПоле(УзелГруппы, "GUID", "972e26d8-f3ab-4490-99cc-bdf4ad7b1b7f"); //1e18c8db-08f6-47da-874b-100d6e109ab8
	
	УзелЭлементовГруппы = СоздатьУзел("ELEMENTS"); 	
	
	Пока Запрос.Группировка() = 1 Цикл 
		
		Клиент = Запрос.ТекКлиент;  
		
		Если ПустоеЗначение(Клиент) = 1 Тогда Продолжить; КонецЕсли; 		
		
		Если Клиент.ЭтоГруппа() = 0 Тогда Продолжить; КонецЕсли;
		
		КлиентИнфо = ПолучитьСправочныеДанные(Клиент);
		Если ПустоеЗначение(КлиентИнфо) = 1 Тогда
			КлиентИнфо = ЗаписатьСправочныеДанные(Клиент);
		КонецЕсли;                             
		
		СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Клиент);						
		
		СтруктураПолей.ДобавитьЗначение(Клиент.Родитель, "ParId"); 
		
		ЗаписатьЭлементВДокументОбмена(УзелЭлементовГруппы, СтруктураПолей);																		
		
	КонецЦикла;  	
	
	ДобавитьПодчиненный(УзелГруппы, УзелЭлементовГруппы); // Закрываем узел ELEMENTS
	
	ДобавитьПодчиненный(УзелГрупп, УзелГруппы); // Закрываем узел GROUP 
	
	ДобавитьПодчиненный(УзелСправочника, УзелГрупп); // Закрываем узел GROUPS
	
	// Выгружаем элементы справочника
	Запрос.вНачалоВыборки();
	
	// Выгрузка элементов справочника
	УзелЭлементов = СоздатьУзел("ELEMENTS");   
	
	Пока Запрос.Группировка() = 1 Цикл    
		
		Клиент = Запрос.ТекКлиент;    
		
		Если ПустоеЗначение(Клиент) = 1 Тогда Продолжить; КонецЕсли;
		
		Если Клиент.ЭтоГруппа() = 1 Тогда Продолжить; КонецЕсли;
		
		КлиентИнфо = ПолучитьСправочныеДанные(Клиент);
		Если ПустоеЗначение(КлиентИнфо) = 1 Тогда
			КлиентИнфо = ЗаписатьСправочныеДанные(Клиент);
		КонецЕсли;                                  	
		
		СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Клиент);
		
		СтруктураПолей.ДобавитьЗначение(Клиент.Родитель,  						"A02"); 
		//СтруктураПолей.ДобавитьЗначение(Клиент.ОсновнойДоговор.Скидка.Процент,  "A05");
		//СтруктураПолей.ДобавитьЗначение(КлиентИнфо.Статус, 	 				    "A06");
		//СтруктураПолей.ДобавитьЗначение(Клиент.ОсновнойДоговор, 				"A08");
		СтруктураПолей.ДобавитьЗначение(Клиент.Родитель,  						"GrpId0");
		
		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);  
		
		СчЭлементов = СчЭлементов + 1;   
		
		ПроцентВыгрузки = Окр(СчЭлементов/КолЭлементов*100, 0);		
		
		ОкноСостояние("Выгрузка контрагентов: " + ПроцентВыгрузки + "%");						
		
	КонецЦикла; 		
	
	ДобавитьПодчиненный(УзелСправочника, УзелЭлементов); // Закрываем узел ELEMENTS  	                                 
	
	ДобавитьПодчиненный(РодительскийУзел, УзелСправочника); // Закрываем узел CATALOG     
	
	//Если Константа.кпкИспользоватьДоговоры = 1 Тогда
	//	ОкноСостояние("Выгрузка договоров контрагентов...");			
	//	ВыгрузитьДоговорыКонтагентов(РодительскийУзел); 
	//КонецЕсли;      
		
	//ОкноСостояние("Выгрузка торговых точек...");
	//ВыгрузитьТорговыеТочки(РодительскийУзел);		
	
КонецПроцедуры //ВыгрузитьКлиентов()                                                

//****************************************************************************** 
Процедура ВыгрузитьСклады(РодительскийУзел, СписокСклады) 
	
	//ОкноСостояние(""); 	
	
	// Выгружаем склады	
	ТекстЗапроса = "SELECT МестаХранения.ID [ТекСклад $Справочник.МестаХранения]
	|				FROM $Справочник.МестаХранения AS МестаХранения (NOLOCK)
	|				WHERE (МестаХранения.ISMARK = 0)
	|						AND ($МестаХранения.ДляКомплектации = 1)
	|						AND ($МестаХранения.МестоКомплектации <> $ПустойИд)
	|						AND ISFOLDER = 2 
	|";
	
	//ТекстЗапроса = "
	//|Обрабатывать НеПомеченныеНаУдаление;
	//|ТекСклад = Справочник.МестаХранения.ТекущийЭлемент; 
	//|Группировка ТекСклад Без Упорядочивания;"; 
	//
	//Если ПланАгента.Выбран() = 1 Тогда // Выгрузка только ис списка клиентов из Плана			
//		ТекстЗапроса = ТекстЗапроса + "Условие (ТекСклад В СписокСклады);";				  
	//КонецЕсли; 
	
//	Запрос = СоздатьОбъект("Запрос"); 
	
	//Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
	//	ОповеститьОСобытии("Не выполнен запрос по складам!", "!!!");
	//	Возврат;
	//КонецЕсли;  			

	ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");	
	Таб = СоздатьОбъект("ТаблицаЗначений");
	Таб = ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса);
	
	//Таб = СоздатьОбъект("ТаблицаЗначений");
	//Запрос.Выгрузить(Таб);  		
	//Таб.ВыбратьСтроку();
	
	КолЭлементов = Таб.КоличествоСтрок();
	
	УзелСправочника = СоздатьУзел("CATALOG"); 	
	
	ДобавитьПоле(УзелСправочника, "GUID", "827fe44f-b53a-492f-9feb-89e068e9f3c6"); 		//9450980f-fb59-47e3-bae2-aa3c58441b1a
	ДобавитьПоле(УзелСправочника, "Comment", "Справочник.МестаХранения");
	
	// Передаем команду на очистку клиентов перед загрузкой
	Если флОчищатьСправочникиПередЗагрузкой = 1 Тогда
		ДобавитьПоле(УзелСправочника, "KILLALL", "1");                	
	КонецЕсли;	
	
	//// Выгрузка групп контрагентов	
	//УзелГрупп = СоздатьУзел("GROUPS"); 	
	//
	//УзелГруппы = СоздатьУзел("GROUP"); 	
	//
	//ДобавитьПоле(УзелГруппы, "GUID", "972e26d8-f3ab-4490-99cc-bdf4ad7b1b7f"); //1e18c8db-08f6-47da-874b-100d6e109ab8
	//
	//УзелЭлементовГруппы = СоздатьУзел("ELEMENTS"); 	
	//
	//Пока Запрос.Группировка() = 1 Цикл 
	//	
	//	Клиент = Запрос.ТекКлиент;  
	//	
	//	Если ПустоеЗначение(Клиент) = 1 Тогда Продолжить; КонецЕсли; 		
	//	
	//	Если Клиент.ЭтоГруппа() = 0 Тогда Продолжить; КонецЕсли;
	//	
	//	КлиентИнфо = ПолучитьСправочныеДанные(Клиент);
	//	Если ПустоеЗначение(КлиентИнфо) = 1 Тогда
	//		КлиентИнфо = ЗаписатьСправочныеДанные(Клиент);
	//	КонецЕсли;                             
	//	
	//	СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Клиент);						
	//	
	//	СтруктураПолей.ДобавитьЗначение(Клиент.Родитель, "ParId"); 
	//	
	//	ЗаписатьЭлементВДокументОбмена(УзелЭлементовГруппы, СтруктураПолей);																		
	//	
	//КонецЦикла;  	
	//
	//ДобавитьПодчиненный(УзелГруппы, УзелЭлементовГруппы); // Закрываем узел ELEMENTS
	//
	//ДобавитьПодчиненный(УзелГрупп, УзелГруппы); // Закрываем узел GROUP 
	//
	//ДобавитьПодчиненный(УзелСправочника, УзелГрупп); // Закрываем узел GROUPS
	
	//// Выгружаем элементы справочника
	//Запрос.вНачалоВыборки();
	
	// Выгрузка элементов справочника
	УзелЭлементов = СоздатьУзел("ELEMENTS");   
	
	Таб.ВыбратьСтроки();
	Пока Таб.ПолучитьСтроку() = 1 Цикл
		
		Склад = Таб.ТекСклад;    
		
		Если ПустоеЗначение(Склад) = 1 Тогда Продолжить; КонецЕсли;
		
		Если Склад.ЭтоГруппа() = 1 Тогда Продолжить; КонецЕсли;
		
		//СкладИнфо = ПолучитьСправочныеДанные(Склад);
		//Если ПустоеЗначение(СкладИнфо) = 1 Тогда
		//	СкладИнфо = ЗаписатьСправочныеДанные(Склад);
		//КонецЕсли;                                  	
		
		СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Склад);
		
		СтруктураПолей.Установить("Name",Translate_Descr(Склад.Наименование));

		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);  
		
		СчЭлементов = СчЭлементов + 1;   
		
		ПроцентВыгрузки = Окр(СчЭлементов/КолЭлементов*100, 0);		
		
		ОкноСостояние("Выгрузка складов: " + ПроцентВыгрузки + "%");						
		
	КонецЦикла; 		
	
	ДобавитьПодчиненный(УзелСправочника, УзелЭлементов); // Закрываем узел ELEMENTS  	                                 
	
	ДобавитьПодчиненный(РодительскийУзел, УзелСправочника); // Закрываем узел CATALOG     
	
	//PR пока не используем 
	//здесь нужно будет выгрузить из справочника Складские адреса группы, где на первом уровне 
	Возврат;
	
	
//==== Пролеты
	УзелСправочника = СоздатьУзел("CATALOG"); 	
	
	ДобавитьПоле(УзелСправочника, "GUID", "ca5bceba-b5bc-4342-b187-d9b51e2e0b28"); 		
	
	// Передаем команду на очистку клиентов перед загрузкой
	Если флОчищатьСправочникиПередЗагрузкой = 1 Тогда
		ДобавитьПоле(УзелСправочника, "KILLALL", "1");                	
	КонецЕсли;	
	
	// Выгрузка элементов справочника
	УзелЭлементов = СоздатьУзел("ELEMENTS");   
	
	СчетчикЦикла = 0;
	Для СчетчикЦикла = 1 по СписокСклады.РазмерСписка() Цикл
		Склад = СписокСклады.ПолучитьЗначение(СчетчикЦикла);	
		Если ПустоеЗначение(Склад) = 1 Тогда Продолжить; КонецЕсли;

		СпрПролеты = СоздатьОбъект("Справочник.пкПролеты");
		СпрПролетыОбъект = СоздатьОбъект("Справочник.пкПролеты");
		СпрПролеты.ИспользоватьВладельца(Склад);
		СпрПролеты.ВыбратьЭлементы();
		Пока СпрПролеты.ПолучитьЭлемент() = 1 Цикл
		    Если СпрПролеты.ПометкаУдаления() = 1 Тогда
		        Продолжить;
		    КонецЕсли;
            СпрПролетыОбъект.НайтиЭлемент(СпрПролеты.ТекущийЭлемент());
			Если ПустоеЗначение(СпрПролетыОбъект.Идентификатор) = 1 Тогда
			    СпрПролетыОбъект.Идентификатор = глАПСоздатьИдентификатор();  
				СпрПролетыОбъект.Записать();
			КонецЕсли;
			
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Склад);
			СтруктураПолей = СоздатьОбъект("СписокЗначений");
			СтруктураПолей.ДобавитьЗначение(СпрПролетыОбъект.Идентификатор, "GUID");
			СтруктураПолей.ДобавитьЗначение(СпрПролетыОбъект.ПометкаУдаления(), "IsDeleted");
			СтруктураПолей.ДобавитьЗначение(СпрПролетыОбъект.Код, "Name");
			
			ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);  
			
		КонецЦикла;	
	КонецЦикла;    
	
	ДобавитьПодчиненный(УзелСправочника, УзелЭлементов); // Закрываем узел ELEMENTS  	                                 
	ДобавитьПодчиненный(РодительскийУзел, УзелСправочника); // Закрываем узел CATALOG     

//==== Стеллажи
	УзелСправочника = СоздатьУзел("CATALOG"); 	
	
	ДобавитьПоле(УзелСправочника, "GUID", "c3eb29fc-c0f0-4149-83e7-74a7e3bf01b8"); 		
	
	// Передаем команду на очистку клиентов перед загрузкой
	Если флОчищатьСправочникиПередЗагрузкой = 1 Тогда
		ДобавитьПоле(УзелСправочника, "KILLALL", "1");                	
	КонецЕсли;	
	
	// Выгрузка элементов справочника
	УзелЭлементов = СоздатьУзел("ELEMENTS");   
	
	//Заполнение справочника
	СпрСтелажи = СоздатьОбъект("Справочник.пкСтеллажи");
	СчетчикЭлементов = Перечисление.пкСтеллажы.КоличествоЗначений();
	СчетчикЦикла = 0;
	Для СчетчикЦикла = 1 По СчетчикЭлементов Цикл
		Значение = СокрЛП(Перечисление.пкСтеллажы.ЗначениеПоНомеру(СчетчикЦикла));
		Если СпрСтелажи.НайтиПоНаименованию(Значение,0,1) = 1  Тогда
		    Если ПустоеЗначение(СпрСтелажи.Идентификатор) = 1 Тогда
				СпрСтелажи.Идентификатор = глАПСоздатьИдентификатор();
				СпрСтелажи.Записать();   
		    КонецЕсли;
		Иначе
			СпрСтелажи.Новый();
			СпрСтелажи.Владелец = АгентИнфо.Склад;
			СпрСтелажи.Код = Значение;
			СпрСтелажи.Наименование = Значение; 
		    СпрСтелажи.Идентификатор = глАПСоздатьИдентификатор();
			СпрСтелажи.Записать();
			Сообщить(""+Значение);		
		КонецЕсли;
	КонецЦикла;
	
	
	СпрСтелажи.ИспользоватьВладельца(АгентИнфо.Склад);
	СпрСтелажи.ВыбратьЭлементы();
	Пока СпрСтелажи.ПолучитьЭлемент() = 1 Цикл
		Если СпрСтелажи.ПометкаУдаления() = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СпрСтелажи);
		
		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);  
		
		СчЭлементов = СчЭлементов + 1;   
		
	КонецЦикла;	
	
	ДобавитьПодчиненный(УзелСправочника, УзелЭлементов); // Закрываем узел ELEMENTS  	                                 
	ДобавитьПодчиненный(РодительскийУзел, УзелСправочника); // Закрываем узел CATALOG     

//==== Этажи
	УзелСправочника = СоздатьУзел("CATALOG"); 	
	
	ДобавитьПоле(УзелСправочника, "GUID", "f58c532c-9128-4f39-9f5f-ae3304135499"); 		
	
	// Передаем команду на очистку клиентов перед загрузкой
	Если флОчищатьСправочникиПередЗагрузкой = 1 Тогда
		ДобавитьПоле(УзелСправочника, "KILLALL", "1");                	
	КонецЕсли;	
	
	// Выгрузка элементов справочника
	УзелЭлементов = СоздатьУзел("ELEMENTS");   
	
	//Заполнение справочника
	СпрЭтажи = СоздатьОбъект("Справочник.пкЭтажи");
	СчетчикЭлементов = Перечисление.пкЭтажи.КоличествоЗначений();
	СчетчикЦикла = 0;
	Для СчетчикЦикла = 1 По СчетчикЭлементов Цикл
		Значение = СокрЛП(Перечисление.пкЭтажи.ЗначениеПоНомеру(СчетчикЦикла));
		Если СпрЭтажи.НайтиПоНаименованию(Значение,0,1) = 1 Тогда
		    Если ПустоеЗначение(СпрЭтажи.Идентификатор) = 1 Тогда
				СпрЭтажи.Идентификатор = глАПСоздатьИдентификатор();
				СпрЭтажи.Записать();   
		    КонецЕсли;
		Иначе
			СпрЭтажи.Новый();
			СпрЭтажи.Владелец = АгентИнфо.Склад;
			СпрЭтажи.Код = Значение;
			СпрЭтажи.Наименование = Значение; 
		    СпрЭтажи.Идентификатор = глАПСоздатьИдентификатор();
			СпрЭтажи.Записать();
			Сообщить(""+Значение);		
		КонецЕсли;
	КонецЦикла;
	
	
	СчетчикЦикла = 0;
	СпрЭтажи = СоздатьОбъект("Справочник.пкЭтажи");
	СпрЭтажи.ИспользоватьВладельца(АгентИнфо.Склад);
	СпрЭтажи.ВыбратьЭлементы();
	Пока СпрЭтажи.ПолучитьЭлемент() = 1 Цикл
		Если СпрЭтажи.ПометкаУдаления() = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СпрЭтажи);
		
		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);  
		
		СчЭлементов = СчЭлементов + 1;   
		
	КонецЦикла;	
	
	ДобавитьПодчиненный(УзелСправочника, УзелЭлементов); // Закрываем узел ELEMENTS  	                                 
	ДобавитьПодчиненный(РодительскийУзел, УзелСправочника); // Закрываем узел CATALOG     
	


	
КонецПроцедуры //ВыгрузитьСклады()                                                

//+ 2013.04.02
Функция пкФормат(пЧисло,Вес=0) Экспорт
	Если Вес=1 тогда
		Возврат Формат(пЧисло, "Ч15.3") ;
	иначе
		Возврат Формат(пЧисло, "Ч15.2") ;
	КонецЕсли ;
КонецФункции

Процедура ВыгрузитьЕдиницыИзмерения(РодительскийУзел, СписокТоваров)
	УзелСправочника = СоздатьУзел("CATALOG"); 	
	
	ДобавитьПоле(УзелСправочника, "GUID", "d806b583-b5e1-4568-b299-2f81a9a5a051"); 	
	ДобавитьПоле(УзелСправочника, "Comment", "Справочник.Единицы");
	// Передаем команду на очистку клиентов перед загрузкой
	Если флОчищатьСправочникиПередЗагрузкой = 1 Тогда
		ДобавитьПоле(УзелСправочника, "KILLALL", "1");                	
	КонецЕсли;	
	// Выгрузка элементов справочника
	УзелЭлементов = СоздатьУзел("ELEMENTS");   
    
	ТекстЗапроса = "SELECT Единицы.ID [Единица $Справочник.Единицы]
	|					, Единицы.PARENTEXT [Товар $Справочник.Номенклатура]
	|					, ЕдиницыКласс.ID [ЕдиницаПоКлассификатору $Справочник.ЕдиницыПеревод]
	|					, $Номенклатура.Вес*$Единицы.Коэффициент Вес
	|					, $Единицы.Коэффициент Коэффициент
	|				FROM $Справочник.Единицы AS Единицы (NOLOCK)
	|				INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON Единицы.PARENTEXT = Номенклатура.ID 
	|				INNER JOIN $Справочник.ЕдиницыПеревод ЕдиницыКласс (NOLOCK) ON $Единицы.Единица = $ЕдиницыКласс.Единица
	|				WHERE (Единицы.ISMARK = 0) AND ($Номенклатура.ВидТовара <> $Перечисление.ВидыТоваров.Услуга)
	|						AND (Номенклатура.ISMARK = 0)
	|						AND ($Номенклатура.ПоАлфавиту NOT LIKE :СимвАрх)
	|";

	ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");	
	ЗапросСКЛ.УстановитьТекстовыйПараметр("СимвАрх",Константа.СимволАрхивТоваров+"%");
	Таб = СоздатьОбъект("ТаблицаЗначений");
	Таб = ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса);

	
	ТекстЗапроса = "
	|//{{ЗАПРОС(ТМЦ)
	|Обрабатывать НеПомеченныеНаУдаление;
	|Товар = Справочник.Единицы.Владелец;
	|Коэффициент = Справочник.Единицы.Коэффициент;
	|Единица = Справочник.Единицы.ТекущийЭлемент;
	|ЕдиницаПоКлассификатору = Справочник.Единицы.Единица;
	|ШтрихКод = Справочник.Единицы.ШтрихКод;
	|ВидТовара = Справочник.Номенклатура.ВидТовара;
	|Вес = Справочник.Единицы.Вес;
	|Группировка Единица;
	|Условие(Товар в СписокТоваров);
	|Условие(ВидТовара <> Перечисление.ВидыТоваров.Услуга);
	|"//}}ЗАПРОС
    ;
//	Запрос = СоздатьОбъект("Запрос"); 
	
	//Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
	//	ОповеститьОСобытии("Не выполнен запрос по единицам измерения!", "!!!");
	//	Возврат;
	//КонецЕсли; 

	КолЭлементов = Таб.КоличествоСтрок();
	
	ПроцентВыгрузки = 0;
	СчЭлементов = 0;

	Таб.ВыбратьСтроки();
	Пока Таб.ПолучитьСтроку() = 1 Цикл
		
		СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Таб.Единица);	
		СтруктураПолей.Установить("Code",СокрЛП(Таб.Единица.Код)); 
		СтруктураПолей.Установить("Name",СокрЛП(Таб.Единица));
		СтруктураПолей.Установить("A01",пкФормат(Таб.Коэффициент));
		СтруктураПолей.Установить("A02",Таб.ЕдиницаПоКлассификатору);
		СтруктураПолей.Установить("A03",Таб.Товар);
		СтруктураПолей.Установить("A04",пкФормат(Таб.Вес,1));
		//СтруктураПолей.Установить("A05",пкФормат(Стр.Объем));
		
		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);																		
		
		СчЭлементов = СчЭлементов + 1;   
		ПроцентВыгрузки = Окр(СчЭлементов/КолЭлементов*100, 0);		
		ОкноСостояние("Выгрузка единиц измерения: " + ПроцентВыгрузки + "%");
		
	КонецЦикла ;
	ДобавитьПодчиненный(УзелСправочника, УзелЭлементов); // Закрываем узел ELEMENTS  	                                 
	ДобавитьПодчиненный(РодительскийУзел, УзелСправочника); // Закрываем узел CATALOG     
КонецПроцедуры

//****************************************************************************** 
Процедура ВыгрузитьШтрихКоды(РодительскийУзел, СписокТоваров)
	УзелСправочника = СоздатьУзел("CATALOG"); 	
	
	ДобавитьПоле(УзелСправочника, "GUID", "0111699f-711d-4510-9e29-4a05eea74879"); 	
	ДобавитьПоле(УзелСправочника, "Comment", "Справочник.ШтрихКоды");
	// Передаем команду на очистку клиентов перед загрузкой
	Если флОчищатьСправочникиПередЗагрузкой = 1 Тогда
		ДобавитьПоле(УзелСправочника, "KILLALL", "1");                	
	КонецЕсли;	
	// Выгрузка элементов справочника
	УзелЭлементов = СоздатьУзел("ELEMENTS");   
    
	//ТекстЗапроса = "
	//|//{{ЗАПРОС(ТМЦ)
	//|Обрабатывать НеПомеченныеНаУдаление;
	//|Товар = Справочник.Номенклатура.ТекущийЭлемент;
	//|ШтрихКод = Справочник.Номенклатура.ШтрихКод;
	//|Группировка Товар;
	//|Условие(Товар в СписокТоваров);
	//|"//}}ЗАПРОС
    //;

	ТекстЗапроса="SELECT ШтрихКоды.PARENTEXT [Товар $Справочник.Номенклатура]
	|					, Единицы.ID [Единица $Справочник.Единицы]
//	|					, $Номенклатура.БазоваяЕдиницаИзмерения [Единица $Перечисление.ЕдиницыИзмерения]
	|					, $ШтрихКоды.ШтрихКод ШтрихКод
	|			  FROM $Справочник.ШтрихКоды AS ШтрихКоды (NOLOCK)
	|			  INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON ШтрихКоды.PARENTEXT = Номенклатура.ID
	|			  INNER JOIN $Справочник.ЕдиницыПеревод ЕдиницыКласс (NOLOCK) ON $Номенклатура.БазоваяЕдиницаИзмерения = $ЕдиницыКласс.Единица
	|			  INNER JOIN $Справочник.Единицы Единицы (NOLOCK) ON $ЕдиницыКласс.Единица = $Единицы.Единица AND Единицы.PARENTEXT = Номенклатура.ID AND Единицы.ISMARK = 0
	|			  WHERE (ШтрихКоды.ISMARK = 0) AND 	($Номенклатура.ПоАлфавиту NOT LIKE :СимвАрх)

	|			  UNION
	|			  SELECT Номенклатура.ID [Товар $Справочник.Номенклатура]
	|					, Единицы.ID [Единица $Справочник.Единицы]
//	|					, $Номенклатура.БазоваяЕдиницаИзмерения [Единица $Перечисление.ЕдиницыИзмерения]
	|					, $Номенклатура.ШтрихКод ШтрихКод
	|			  FROM $Справочник.Номенклатура AS Номенклатура (NOLOCK)
	|			  INNER JOIN $Справочник.ЕдиницыПеревод ЕдиницыКласс (NOLOCK) ON $Номенклатура.БазоваяЕдиницаИзмерения = $ЕдиницыКласс.Единица
	|			  INNER JOIN $Справочник.Единицы Единицы (NOLOCK) ON $ЕдиницыКласс.Единица = $Единицы.Единица AND Единицы.PARENTEXT = Номенклатура.ID AND Единицы.ISMARK = 0
	|			  WHERE (Номенклатура.ISMARK = 0) AND (Номенклатура.ISFOLDER = 2) 
	|					AND $Номенклатура.ШтрихКод > '0' AND 	($Номенклатура.ПоАлфавиту NOT LIKE :СимвАрх)
	|";

	ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");	
	ЗапросСКЛ.УстановитьТекстовыйПараметр("СимвАрх",Константа.СимволАрхивТоваров+"%");
	Таб = СоздатьОбъект("ТаблицаЗначений");
	Таб = ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса);
	
	//ТекстЗапроса = "
	//|//{{ЗАПРОС(ТМЦ)
	//|Обрабатывать НеПомеченныеНаУдаление;
	//|Товар = Справочник.Единицы.Владелец;
	//|Единица = Справочник.Единицы.ТекущийЭлемент;
	//|ШтрихКод = Справочник.Единицы.ШтрихКод;
	//|ВидТовара = Справочник.Номенклатура.ВидТовара;
	//|Группировка Единица;
	//|Условие(Товар в СписокТоваров);
	//|Условие(ВидТовара <> Перечисление.ВидыТоваров.Услуга);
	//|"//}}ЗАПРОС
    //;
	//Запрос = СоздатьОбъект("Запрос"); 
	//
	//Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
	//	ОповеститьОСобытии("Не выполнен запрос по номенклатуре!", "!!!");
	//	Возврат;
	//КонецЕсли; 

	ПроцентВыгрузки = 0;
	СчЭлементов = 0;
	
	КолЭлементов = Таб.КоличествоСтрок();
	Таб.ВыбратьСтроки();
	Пока Таб.ПолучитьСтроку() = 1 Цикл

		СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Таб.Товар);						
		СтруктураПолей.Установить("Code",СокрЛП(Таб.Штрихкод)); 
		СтруктураПолей.Установить("A01",Таб.Товар);
		СтруктураПолей.Установить("A02",Таб.Единица);
		СтруктураПолей.Установить("A03","");
		СтруктураПолей.Установить("A04","");
		
		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);																		
		
		СчЭлементов = СчЭлементов + 1;   
		ПроцентВыгрузки = Окр(СчЭлементов/КолЭлементов*100, 0);		
		ОкноСостояние("Выгрузка штрихкодов: " + ПроцентВыгрузки + "%");
		
	КонецЦикла ;
	ДобавитьПодчиненный(УзелСправочника, УзелЭлементов); // Закрываем узел ELEMENTS  	                                 
	ДобавитьПодчиненный(РодительскийУзел, УзелСправочника); // Закрываем узел CATALOG     
КонецПроцедуры
//- 2013.04.02

////****************************************************************************** 
Процедура ВыгрузитьНоменклатуру(РодительскийУзел, СписокТоваров) 
	
	//ОкноСостояние(""); 	
	
	ТекстЗапроса = "SELECT Номенклатура.ID [ТекТовар $Справочник.Номенклатура]
	|			   FROM $Справочник.Номенклатура AS Номенклатура (NOLOCK)
	|			   WHERE (Номенклатура.ISMARK = 0)
	|					AND ($Номенклатура.ПоАлфавиту NOT LIKE :СимвАрх)
	|					AND ISFOLDER = 1
	|";
	
	ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");
	ЗапросСКЛ.УстановитьТекстовыйПараметр("СимвАрх",Константа.СимволАрхивТоваров+"%");	
	ТабГруппы = СоздатьОбъект("ТаблицаЗначений");
	ТабГруппы = ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса);

	ТекстЗапроса = "SELECT Номенклатура.ID [ТекТовар $Справочник.Номенклатура]
	|			   FROM $Справочник.Номенклатура AS Номенклатура (NOLOCK)
	|			   WHERE (Номенклатура.ISMARK = 0)
	|					AND ($Номенклатура.ПоАлфавиту NOT LIKE :СимвАрх)
	|					AND ISFOLDER = 2
	|";
	
	ЗапросСКЛ.УстановитьТекстовыйПараметр("СимвАрх",Константа.СимволАрхивТоваров+"%");
	Таб = СоздатьОбъект("ТаблицаЗначений");
	Таб = ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса);

	
	// Выгружаем группы клиентов
	//ТекстЗапроса = "
	//|Обрабатывать НеПомеченныеНаУдаление;
	//|ТекТовар = Справочник.Номенклатура.ТекущийЭлемент; 
	////|ТекЕдиница = Справочник.Номенклатура.БазоваяЕдиницаИзмерения;
	//|Группировка ТекТовар Без Упорядочивания;"; 
	
	//Если ПланАгента.Выбран() = 1 Тогда // Выгрузка только ис списка клиентов из Плана			
//		ТекстЗапроса = ТекстЗапроса + "Условие (ТекТовар В СписокТоваров);";				  
	//КонецЕсли; 
	//СписокТоваров.ВыбратьЗначение(1);
	
//	Запрос = СоздатьОбъект("Запрос"); 
	
	//Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
	//	ОповеститьОСобытии("Не выполнен запрос по номенклатуре!", "!!!");
	//	Возврат;
	//КонецЕсли; 
	
	
	//Таб = СоздатьОбъект("ТаблицаЗначений");
	//Запрос.Выгрузить(Таб);  		
	
	//Таб.ВыбратьСтроку();
	
	КолЭлементов = Таб.КоличествоСтрок();
	
	УзелСправочника = СоздатьУзел("CATALOG"); 	
	
	ДобавитьПоле(УзелСправочника, "GUID", "3a007c3f-2033-4dac-b703-4deb26e89818"); 		//9450980f-fb59-47e3-bae2-aa3c58441b1a
	ДобавитьПоле(УзелСправочника, "Comment", "Справочник.Номенклатура");
	
	// Передаем команду на очистку клиентов перед загрузкой
	Если флОчищатьСправочникиПередЗагрузкой = 1 Тогда
		ДобавитьПоле(УзелСправочника, "KILLALL", "1");                	
	КонецЕсли;	
	
	// Выгрузка групп номенклатуры	
	УзелГрупп = СоздатьУзел("GROUPS"); 	
	
	УзелГруппы = СоздатьУзел("GROUP"); 	
	
	ДобавитьПоле(УзелГруппы, "GUID", "e0640ed6-9ea4-4199-88cb-a277bc427677"); //1e18c8db-08f6-47da-874b-100d6e109ab8
	
	УзелЭлементовГруппы = СоздатьУзел("ELEMENTS"); 	
	
	ТабГруппы.ВыбратьСтроки();
	Пока ТабГруппы.ПолучитьСтроку() = 1 Цикл 
		
		Товар = ТабГруппы.ТекТовар;
		
		Если ПустоеЗначение(Товар) = 1 Тогда Продолжить; КонецЕсли; 		
		
//		Если Товар.ЭтоГруппа() = 0 Тогда Продолжить; КонецЕсли;
		
		//ТоварИнфо = ПолучитьСправочныеДанные(Товар);
		//Если ПустоеЗначение(ТоварИнфо) = 1 Тогда
		//	ТоварИнфо = ЗаписатьСправочныеДанные(Товар);
		//КонецЕсли;                             
		
		СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Товар);						
		
		СтруктураПолей.ДобавитьЗначение(Товар.Родитель, "ParId"); 
		
		СтруктураПолей.Установить("Name",Translate_Descr(Товар.Наименование));
		
		ЗаписатьЭлементВДокументОбмена(УзелЭлементовГруппы, СтруктураПолей);																		
		
	КонецЦикла;  	
	
	ДобавитьПодчиненный(УзелГруппы, УзелЭлементовГруппы); // Закрываем узел ELEMENTS
	
	ДобавитьПодчиненный(УзелГрупп, УзелГруппы); // Закрываем узел GROUP 
	
	ДобавитьПодчиненный(УзелСправочника, УзелГрупп); // Закрываем узел GROUPS
	
	// Выгружаем элементы справочника
//	Запрос.вНачалоВыборки();
	
	// Выгрузка элементов справочника
	УзелЭлементов = СоздатьУзел("ELEMENTS");   
	
	ПроцентВыгрузки = 0;
	СчЭлементов = 0;
	Таб.ВыбратьСтроки();
	Пока Таб.ПолучитьСтроку() = 1 Цикл
		
		Товар = Таб.ТекТовар;    
		
		Если ПустоеЗначение(Товар) = 1 Тогда Продолжить; КонецЕсли;
		                      
//		Если Товар.ЭтоГруппа() = 1 Тогда Продолжить; КонецЕсли;
		
		//ТоварИнфо = ПолучитьСправочныеДанные(Товар);
		//Если ПустоеЗначение(ТоварИнфо) = 1 Тогда
		//	ТоварИнфо = ЗаписатьСправочныеДанные(Товар);
		//КонецЕсли;                                  	
		
		СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Товар);
		
		СтруктураПолей.Установить("Name",Translate_Descr(Товар.Наименование));

		СтруктураПолей.ДобавитьЗначение(Число(Товар.Код),  			 			"Code");
		//СтруктураПолей.ДобавитьЗначение(Товар.Родитель,  							"A02"); 
		//СтруктураПолей.ДобавитьЗначение(СокрЛП(Товар.Штрихкод),						"A05");
		////СтруктураПолей.ДобавитьЗначение(КлиентИнфо.Статус, 	 				    "A06");
		////СтруктураПолей.ДобавитьЗначение(Клиент.ОсновнойДоговор, 					"A08");
		//СтруктураПолей.ДобавитьЗначение(Товар.Родитель,  							"GrpId0");
//+ 2013.04.02
		СтруктураПолей.ДобавитьЗначение(СокрЛП(Товар.БазоваяЕдиницаИзмерения),							"A01"); 
//- 2013.04.02
//		СтруктураПолей.ДобавитьЗначение(глПолучитьАдресИзСправочникаМеста(Товар,РабочаяДата()),			"A02");
	//PR - здесь нужно вытащить адрес товара в справочнике складские адреса
		СтруктураПолей.ДобавитьЗначение("",																"A02"); 
		СтруктураПолей.ДобавитьЗначение(Товар.Вес,														"A03"); 
		//спрМестаЭлемент = глПолучитьМестоИзСправочникаМеста(Товар);
		//Если спрМестаЭлемент.Выбран() = 1 Тогда
		//	СтруктураПолей.ДобавитьЗначение(спрМестаЭлемент.Остаток,									"A04"); 
		//КонецЕсли;
		СтруктураПолей.ДобавитьЗначение(глСвободныйОстатокТовараНаСкладе(Товар,Константа.ОсновнойСклад),"A04"); 
		СтруктураПолей.ДобавитьЗначение(СокрЛП(Товар.Штрихкод),											"A05");
		
		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);  
		
		СчЭлементов = СчЭлементов + 1;   
		
		ПроцентВыгрузки = Окр(СчЭлементов/КолЭлементов*100, 0);		
		
		ОкноСостояние("Выгрузка номенклатуры: " + ПроцентВыгрузки + "% - "+СчЭлементов+"/"+КолЭлементов);
		
	КонецЦикла; 		
	
	ДобавитьПодчиненный(УзелСправочника, УзелЭлементов); // Закрываем узел ELEMENTS  	                                 
	
	ДобавитьПодчиненный(РодительскийУзел, УзелСправочника); // Закрываем узел CATALOG     
	
КонецПроцедуры //ВыгрузитьНоменклатуру()                                                


////****************************************************************************** 
//Процедура ВыгрузитьОрганизации(РодительскийУзел)
//	
//	УзелСправочника = СоздатьУзел("CATALOG"); 	
//	
//	ДобавитьПоле(УзелСправочника, "GUID", "0e3cbaea-5467-45cd-8c86-fb1777da435b"); 
//	
//	ДобавитьПустойЭлементВXML(УзелСправочника,"GROUPS");
//	
//	УзелЭлементов = СоздатьУзел("ELEMENTS");   
//	
//	ОснФирма = АгентИнфо.Фирма;
//	Если ОснФирма.Выбран() = 0 Тогда
//	    ОснФирма = глЗначениеПоУмолчанию("ОсновнаяФирма");
//	КонецЕсли; 
//			  
//	Сч = 0;
//	Спр = СоздатьОбъект("Справочник.Фирмы");
//	Спр.ИспользоватьДату(ТекущаяДата());
//	Спр.ВыбратьЭлементы();
//	Пока Спр.ПолучитьЭлемент() = 1 Цикл  
//			
//		ФирмаИнфо = ПолучитьСправочныеДанные(Спр);
//		Если ФирмаИнфо.Выбран() = 0 Тогда
//			ФирмаИнфо = ЗаписатьСправочныеДанные(Спр);
//		КонецЕсли;   		
//		
//		Если ОснФирма = Спр.ТекущийЭлемент() Тогда
//		ИначеЕсли (Спр.ПометкаУдаления() = 1) Или (ФирмаИнфо.КпкВыгружать = 0) Тогда
//		    Продолжить;
//		КонецЕсли;			          
//		
//		ИдФирмы = СокрП(ФирмаИнфо.Идентификатор);
//		Если ПустоеЗначение(ИдФирмы) = 1 Тогда
//		    Продолжить;
//		КонецЕсли; 
//		
//		Сч = Сч + 1;
//		
//		ЮрЛицо = Спр.ЮрЛицо;
//		
//		КрНаим	 = СокрЛП(Спр.Наименование); 
//		
//		ИспНДС = 0;
//	
//		Если ЮрЛицо.Выбран() = 1 Тогда
//			ПолнНаим = ?(ПустоеЗначение(ЮрЛицо.ПолнНаименование) = 0, СокрЛП(ЮрЛицо.ПолнНаименование), СокрЛП(ЮрЛицо.Наименование));						  
//			ПолнНаим = Т_ + УбратьСимволыКонцаСтроки(ПолнНаим);
//			
//			ИННКПП = Сокрлп(ЮрЛицо.ИНН);
//			
//			Разделитель = Найти(ИННКПП, "\");
//			Если Разделитель <> 0 Тогда
//				// найден разделитель
//				ИНН = Лев(ИННКПП, Разделитель - 1);
//				КПП = СокрЛП(Сред(ИННКПП, Разделитель + 1));
//			Иначе
//				ИНН = СокрЛП(ИННКПП);
//				КПП = "";
//			КонецЕсли;          
//			
//			Адр 	 = Т_ + СокрЛП(ЮрЛицо.ЮрАдрес);
//			Тел		 = Т_ + СокрЛП(ЮрЛицо.Телефоны);			
//			
//			ИспНДС	 = Строка(ЮрЛицо.УчитыватьНДС);    			
//		Иначе
//			ПолнНаим = "";
//			ИНН		 = "";
//			КПП		 = "";
//			Адр 	 = "";
//			Тел		 = "";			
//		КонецЕсли;      
//		
//		Префикс	 = СокрЛП(ЮрЛицо.ПрефиксНомеровДокументов);			
//		
//		СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Спр.ТекущийЭлемент());
//		СтруктураПолей.ДобавитьЗначение(ИспНДС,  "A02");
//		СтруктураПолей.ДобавитьЗначение(Адр, 	 "A03");
//		СтруктураПолей.ДобавитьЗначение(Тел, 	 "A04");
//		СтруктураПолей.ДобавитьЗначение(ИНН,     "A05");		
//		СтруктураПолей.ДобавитьЗначение(КПП,     "A06");
//		СтруктураПолей.ДобавитьЗначение("",      "A07");		
//		СтруктураПолей.ДобавитьЗначение(Адр, 	 "A09");
//		СтруктураПолей.ДобавитьЗначение(Префикс, "A010");
//	
//		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);  								
//	
//	КонецЦикла;
//	
//	ДобавитьПодчиненный(УзелСправочника, УзелЭлементов); // Закрываем узел ELEMENTS  		         		
//
//	ДобавитьПодчиненный(РодительскийУзел, УзелСправочника); // Закрываем узел CATALOG
//	
//	Если Сч = 0 Тогда
//		ОповеститьОСобытии("В мобильное устройство не было выгружено ни одной фирмы. Проверьте заполнение справочника ""Настройка фирм""", "!");	    
//	КонецЕсли;
//	
//КонецПроцедуры //ВыгрузитьОрганизации 
//
////****************************************************************************** 
//Процедура ВыгрузитьЕдиницыИзмерения(РодительскийУзел, СпОТ, СписТоваров) 
//	
//	ТекстЗапроса = "  
//	|Обрабатывать НеПомеченныеНаУдаление;
//	|Единица   =   Справочник.Единицы.ТекущийЭлемент; 
//	|Товар	   =   Справочник.Единицы.Владелец;
//	|Группировка Единица;";
//	                                      
//	ТекстУсловия = 	"Условие(Товар в СписТоваров);";
//	
//	Если СпОТ.РазмерСписка() <> 0 Тогда
//		ТекстУсловия = 	"Условие((Товар в СписТоваров) или (Товар в СпОТ));";
//	КонецЕсли;
//	          
//	ТекстЗапроса = ТекстЗапроса + ТекстУсловия; 
//	
//	Запрос = СоздатьОбъект("Запрос"); 
//	
//	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
//		ОповеститьОСобытии("Не выполнен запрос по договорам!", "!!!");
//		Возврат;
//	КонецЕсли;	  
//
//	УзелСправочника = СоздатьУзел("CATALOG"); 	
//	
//	ДобавитьПоле(УзелСправочника, "GUID", "80452c60-b442-4da9-a048-42f63270ca14"); 		
//	
//	// Передаем команду на очистку справочника перед загрузкой
//	Если флОчищатьСправочникиПередЗагрузкой = 1 Тогда
//		ДобавитьПоле(УзелСправочника, "KILLALL", "1");                	
//	КонецЕсли;	
//	
//	ДобавитьПустойЭлементВXML(УзелСправочника, "GROUPS");// Выгрузка элементов справочника
//	
//	УзелЭлементов = СоздатьУзел("ELEMENTS");   
//	
//	Пока Запрос.Группировка("Единица") = 1 Цикл    
//		
//		Единица = Запрос.Единица;  
//		     
//		Если Единица.Выбран() = 0 Тогда Продолжить; КонецЕсли;
//	
//		СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Единица);
//		
//		СтруктураПолей.ДобавитьЗначение(Единица.Коэффициент, 	"A02");
//		СтруктураПолей.ДобавитьЗначение(Единица.Владелец, 		"A03");
//		СтруктураПолей.ДобавитьЗначение(Единица.Вес, 			"A04");
//		
//		СтруктураПолей.УстановитьЗначение(4, Единица.ОКЕИ.Наименование, "Name");		
//		
//		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);
//		
//	КонецЦикла; 		
//	
//	ДобавитьПодчиненный(УзелСправочника, УзелЭлементов); // Закрываем узел ELEMENTS  	                                 
//	
//	ДобавитьПодчиненный(РодительскийУзел, УзелСправочника); // Закрываем узел CATALOG     
//	
//КонецПроцедуры //ВыгрузитьЕдиницыИзмерения
//
////******************************************************************************  
//Процедура ВыгрузитьНоменклатуру(РодительскийУзел, СписокНоменклатуры)    
//		
//	ОкноСостояние("Расчет остатков товаров...");
//	
//	СпрЕд 	= СоздатьОбъект("Справочник.Единицы");
//	СпрЦен	= СоздатьОбъект("Справочник.Цены");
//	СписЕд	= СоздатьОбъект("СписокЗначений");
//	СпрСвТов= СоздатьОбъект("Справочник.СвойстваНоменклатуры");
//	
//	СпрЦен.ИспользоватьДату(ТекущаяДата());
//	
//    СписТоваров = СоздатьОбъект("СписокЗначений");
//	АППолучитьСписокТоваровИзАссортимента(СписТоваров, ВыбАссортимент);  
//	
//	СписВыбСкладов = СоздатьОбъект("СписокЗначений");
//
//	Если ВыбСклад.Выбран() = 0 Тогда		
//		ОповеститьОСобытии("У агента " + Строка(ВыбАгент) + " не указан список складов. Выгрузка остатков будет произведена по всем складам!", "!", 1);				
//	Иначе  		
//		Спр = СоздатьОбъект("Справочник.Склады");
//		Стр = СокрЛП(ВыбСклад.Склады)+",";
//		Если Стр<>"," Тогда
//			Пока Стр<>"" Цикл
//				Поз  = Найти(Стр,",");
//				Код1 = Лев(Стр,Поз-1);
//				Стр  = Прав(Стр,СтрДлина(Стр)-Поз);
//				Спр.НайтиПоКоду(Код1);
//				Если Спр.Выбран() = 0 Тогда
//					ОповеститьОСобытии("При выгрузке справочника ""Список складов"" произошла ошибка: " +
//									   "перезаполните элемент справочника с наименованием" + СокрЛП(ВыбСклад.Наименование) + "!", "!!!", 1, ВыбСклад);
//				Иначе
//					СписВыбСкладов.ДобавитьЗначение(Спр.ТекущийЭлемент());
//				КонецЕсли;
//			КонецЦикла;
//		КонецЕсли;		
//	КонецЕсли;
//	
//	СписОбязательныхТоваров = СоздатьОбъект("СписокЗначений");
//	СпОТ = СписОбязательныхТоваров; //для читабельности
//	ЕстьОбязательныеТовары = 0;
//	Если (ТДопТовары <> 0) Тогда
//		Если ТДопТовары.КоличествоСтрок() <> 0 Тогда
//		    ТДопТовары.Выгрузить(СпОТ,,,"Товар");
//			ЕстьОбязательныеТовары = 1;
//			Если СписТоваров.РазмерСписка() <> 0 Тогда
//				//переносим список СписОбязательныхТоваров в СписТоваров				
//				КолОбТоваров = СпОТ.РазмерСписка();
//				Для Поз = 1 По КолОбТоваров Цикл
//					Товар = СпОТ.ПолучитьЗначение(Поз);
//					Если СписТоваров.Принадлежит(Товар) = 0 Тогда
//					    СписТоваров.ДобавитьЗначение(Товар,"");
//					КонецЕсли;
//				КонецЦикла;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;     
//	
//	ВсегоЦен = тзТипыЦен.КоличествоСтрок();
//	
//	Если ВсегоЦен = 0 Тогда
//	    ОповеститьОСобытии("Справочник ""Типы цен"" к выгрузке в КПК не подготовлен! Выгрузка номенклатуры не произведена!", "!");
//		Возврат;
//	КонецЕсли;
//	
//	ЕстьСклады = СписВыбСкладов.РазмерСписка();
//	
//	ДатаКонца = ПолучитьДатуТА();
//	
//	СтрПериод = ?(ТекущаяДата()>= ПолучитьДатуТА(),"", 
//	"Период с ДатаКонца по ДатаКонца;"); 	
//	
//	ТекстЗапроса = "
//	|" + СтрПериод + "	
//	|Товар	   =   Регистр.ОстаткиТМЦ.Номенклатура, Регистр.РезервыТМЦ.Номенклатура, Справочник.Номенклатура.ТекущийЭлемент; 
//	|Склад	   =   Регистр.ОстаткиТМЦ.Склад, Регистр.РезервыТМЦ.Склад;
//	|Кол	   =   Регистр.ОстаткиТМЦ.Количество;
//	|КолРезерв =   Регистр.РезервыТМЦ.Количество;
//	|Группировка Товар упорядочить по Товар.Наименование все ВошедшиеВЗапрос;   	 
//	|Группировка Склад;   	
//	|Условие(Товар в СписТоваров);";
//	
//	Если ЕстьСклады <> 0 Тогда   			
//		ТекстЗапроса = ТекстЗапроса + "
//		|Условие(Склад В (СписВыбСкладов));";
//	КонецЕсли;	
//	
//	Если ЕстьОбязательныеТовары = 1 Тогда
//	    //добавляем специальную функцию "Пустая", чтобы обязательные товары были 
//		//включены в прайс вне зависимости от их остатка на складе			
//		ТекстЗапроса = ТекстЗапроса + "	
//		|Функция Пустая = Сумма(1) когда (Товар В СпОТ);";	
//	КонецЕсли;  
//	
//	ТекстЗапроса = ТекстЗапроса + "	
//	|Функция КонКол    = КонОст(Кол);
//	|Функция КонРезерв = КонОст(КолРезерв);";
//
//	Если флНулевыеОстатки = 1 Тогда
//		ТекстЗапроса = ТекстЗапроса + "		
//		|Функция Счётчик = Счётчик();";	
//	КонецЕсли;
//
//	Запрос = СоздатьОбъект("Запрос");
//	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
//		Возврат;
//	КонецЕсли;       
//	
//	Таб = СоздатьОбъект("ТаблицаЗначений");
//	Запрос.Выгрузить(Таб);
//	//Таб.ВыбратьСтроку();
//	
//	ОкноСостояние("Выгрузка остатков товаров...");  	
//	
//	УзелСправочника = СоздатьУзел("CATALOG"); 	
//	
//	ДобавитьПоле(УзелСправочника, "GUID", "d6d52ada-0f38-4112-af3c-2f1e425a43d1"); 		
//	
//	// Передаем команду на очистку клиентов перед загрузкой
//	Если флОчищатьСправочникиПередЗагрузкой = 1 Тогда
//		ДобавитьПоле(УзелСправочника, "KILLALL", "1");                	
//	КонецЕсли;	
//	
//	// Выгрузка группировок справочника номенклатура	
//	УзелГрупп = СоздатьУзел("GROUPS"); 	
//	                
//	// Объявление группировки по иерархии
//	УзелГруппы = СоздатьУзел("GROUP"); 	
//	
//	ДобавитьПоле(УзелГруппы, "GUID", "8e502a85-8dd4-41cf-a7a4-17ab50872d36");
//	                    
//	// Элементы группировки иерархии
//	УзелЭлементовГруппы = СоздатьУзел("ELEMENTS");
//	             
//	КолЭлементов = 0;
//	
//	Пока Запрос.Группировка("Товар") = 1 Цикл
//		                 
//		Товар = Запрос.Товар;  
//		
//		Если Товар.ЭтоГруппа() = 0 Тогда
//			КолЭлементов = КолЭлементов + 1;		
//			Продолжить;
//		КонецЕсли;
//		
//		СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Товар);						
//		
//		СтруктураПолей.ДобавитьЗначение(Товар.Родитель, "ParId");
//		
//		ЗаписатьЭлементВДокументОбмена(УзелЭлементовГруппы, СтруктураПолей);																		
//		
//	КонецЦикла;  	
//	
//	ДобавитьПодчиненный(УзелГруппы, УзелЭлементовГруппы); // Закрываем узел ELEMENTS
//	
//	ДобавитьПодчиненный(УзелГрупп, УзелГруппы);			 // Закрываем узел GROUP  	
//	
//	// Выгрузка группировок по категориям     	
//	Если ПустоеЗначение(Константа.ВидСвойстваНоменклатуры) = 0  Тогда  		
//			
//		ЗаполнитьТаблицуКатегорий();   
//		
//		Если ТаблицаКатегорий.КоличествоСтрок() > 0 Тогда   			
//			
//			// Объявление группировки по категориям номенклатуры
//			УзелГруппы = СоздатьУзел("GROUP"); 	
//			
//			ДобавитьПоле(УзелГруппы, "GUID", "e42da5b9-e29b-43e1-b7e3-9b500879d6b7");
//			
//			// Элементы группировки иерархии
//			УзелЭлементовГруппы = СоздатьУзел("ELEMENTS");			
//			
//			ТаблицаКатегорий.ВыбратьСтроки();             
//			
//			Пока ТаблицаКатегорий.ПолучитьСтроку() = 1 Цикл   				
//				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(ТаблицаКатегорий.Категория);						 
//				ЗаписатьЭлементВДокументОбмена(УзелЭлементовГруппы, СтруктураПолей);								
//			КонецЦикла;  			
//
//		КонецЕсли; 		
//		
//		ДобавитьПодчиненный(УзелГруппы, УзелЭлементовГруппы); // Закрываем узел ELEMENTS
//		
//		ДобавитьПодчиненный(УзелГрупп, УзелГруппы);			 // Закрываем узел GROUP 
//		
//	Иначе            
//		
//		ОповеститьОСобытии("Перед выгрузкой категорий номенклатуры выберите в настройках параметров учета вид свойства для номенклатуры", "!");			
//		
//	КонецЕсли;  	
//	
//	ДобавитьПодчиненный(УзелСправочника, УзелГрупп); 	 // Закрываем узел GROUPS
//	
//	// Выгружаем элементы справочника
//	Запрос.вНачалоВыборки();    
//	
//	// Выгрузка элементов справочника
//	УзелЭлементов = СоздатьУзел("ELEMENTS");	
//	
//	СчЭлементов = 0;
//	
//	Пока Запрос.Группировка("Товар") = 1 Цикл    
//		
//		ТекНоменклатура = Запрос.Товар;		
//		БазЕдиница = ТекНоменклатура.БазоваяЕдиница; 
//		//ОснЕдиница = ТекНоменклатура.ОсновнаяЕдиница;
//		
//		Если ТекНоменклатура.ЭтоГруппа() = 1 Тогда Продолжить; КонецЕсли; 
//		
//		СчЭлементов = СчЭлементов + 1;
//		
//		ПроцентВыгрузки = Окр(СчЭлементов/КолЭлементов*100, 0);		
//		
//		ОкноСостояние("Выгрузка номенклатуры: " + ПроцентВыгрузки + "%");			
//			
//		СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(ТекНоменклатура);						
//		
//		СтрКод = ""; 
//		                   
//		Если НастройкиАгента.РежимОтображенияКода = 1 Тогда			
//			СтрКод = ТекНоменклатура.Код;
//		ИначеЕсли  НастройкиАгента.РежимОтображенияКода = 2 Тогда					
//			СтрКод = ТекНоменклатура.Артикул;
//		КонецЕсли;  
//
//		Категория = ТекНоменклатура.ОсновноеСвойство.ЗначениеСвойства;
//		
//		Остаток = Запрос.КонКол; 
//		
//		Если флУчитыватьРезервы = 1 Тогда 				
//			Остаток = Запрос.КонКол - Запрос.КонРезерв;					
//		КонецЕсли;
//		
//		СтруктураПолей.ДобавитьЗначение(СтрКод, 								 		 "Code");
//		СтруктураПолей.ДобавитьЗначение(ТекНоменклатура.Родитель, 					     "A02");
//		СтруктураПолей.ДобавитьЗначение(глНачисляемыйНДС(ТекНоменклатура.СтавкаНДС)*100, "A04");
//		СтруктураПолей.ДобавитьЗначение(Категория, 			 				 			 "A05");
//		СтруктураПолей.ДобавитьЗначение(БазЕдиница, 				 					 "A06");
//		СтруктураПолей.ДобавитьЗначение("0", 		  									 "A08");
//		СтруктураПолей.ДобавитьЗначение(Остаток, 	     				 		     	 "A011");
//		СтруктураПолей.ДобавитьЗначение(БазЕдиница, 				 					 "A013");		
//		СтруктураПолей.ДобавитьЗначение(ТекНоменклатура.Родитель, 						 "GrpId0");	
//		СтруктураПолей.ДобавитьЗначение(Категория, 										 "GrpId1");
//
//		// Во втором параметре передается Ложь - это означает,
//		// что не закрывает тег "Item", его закрытие производится ниже 
//		УзелЭлемента  = 0;
//		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей, 0, УзелЭлемента);
//		
//		//Заполняем табличные части справочника  
//		УзелТабЧастей = СоздатьУзел("TABLES");   
//		 
//			ИспМногУчет = НастройкиАгента.ИспользоватьМногоскладскойУчет;
//			
//			Если ИспМногУчет = 1 Тогда
//			  
//				//Заполняем табличную часть остатков		
//				УзелТЧОстатки = СоздатьУзел("TABLE");
//				
//					ДобавитьПоле(УзелТЧОстатки, "GUID", "af0a6972-4bca-4652-a3cf-8ebc1ed1ee0d");
//				 				
//					Пока Запрос.Группировка("Склад") = 1 Цикл  
//						   
//						ОстатокСклада = Запрос.КонКол;
//						Если флУчитыватьРезервы = 1 Тогда 				
//							ОстатокСклада = Запрос.КонКол - Запрос.КонРезерв;					
//						КонецЕсли;
//						
//						СтруктураПолей = СоздатьОбъект("СписокЗначений");
//						СтруктураПолей.ДобавитьЗначение(глАПСоздатьИдентификатор(), "GUID"); 
//						СтруктураПолей.ДобавитьЗначение(ТекНоменклатура, 			"CtlgId"); 
//						СтруктураПолей.ДобавитьЗначение(Запрос.Склад,  	 			"A01");
//						СтруктураПолей.ДобавитьЗначение(ОстатокСклада,   			"A02");					
//						
//						ЗаписатьЭлементВДокументОбмена(УзелТЧОстатки, СтруктураПолей);
//						
//					КонецЦикла;
//			
//				ДобавитьПодчиненный(УзелТабЧастей, УзелТЧОстатки); 	 // Закрываем узел TABLE
//		
//			КонецЕсли;
//
//			//Заполняем табличную часть с ценами
//			УзелТЧЦены = СоздатьУзел("TABLE");
//			
//			ДобавитьПоле(УзелТЧЦены, "GUID", "7f72aed2-94f7-4165-b112-c7a69fea70cc");  
//					
//				ЕдЦены = БазЕдиница;				  // Принимаем, что в качестве единицы измерения, 
//													  // которая будет привязана к цене, будет выступать
//													  // базовая единица     
//				Для Поз = 1 По ВсегоЦен Цикл	
//					
//					тзТипыЦен.ПолучитьСтрокуПоНомеру(Поз);  					
//					ТекТипЦены = тзТипыЦен.ТипЦены;
//								
//					Цена = АПВернутьЦенуТовара(ТекНоменклатура, ТекТипЦены, ЕдЦены, СпрЦен);
//        				
//					СтруктураПолей = СоздатьОбъект("СписокЗначений");
//					СтруктураПолей.ДобавитьЗначение(глАПСоздатьИдентификатор(), "GUID"); 
//					СтруктураПолей.ДобавитьЗначение(ТекНоменклатура, 			"CtlgId");
//					СтруктураПолей.ДобавитьЗначение(ТекТипЦены,  	 			"A01");					 
//					СтруктураПолей.ДобавитьЗначение(ЕдЦены,  		 			"A02");					
//					СтруктураПолей.ДобавитьЗначение(Цена,  		 	 			"A03");					
//				
//					ЗаписатьЭлементВДокументОбмена(УзелТЧЦены, СтруктураПолей);
//					
//				КонецЦикла;
//				
//			ДобавитьПодчиненный(УзелТабЧастей, УзелТЧЦены); 	 // Закрываем узел TABLE
//
//		ДобавитьПодчиненный(УзелЭлемента, УзелТабЧастей); 	 // Закрываем узел TABLES
//
//		// Закрыаем тег ITEM, который был открыт при вызове
//		// процедуры "ЗаписатьЭлементВДокументОбмена" 		
//		ДобавитьПодчиненный(УзелЭлементов, УзелЭлемента); // Закрываем узел ITEM  		         		
//		                                    
//	КонецЦикла;
//	
//	ДобавитьПодчиненный(УзелСправочника, УзелЭлементов); // Закрываем узел ELEMENTS  		         		
//
//	ДобавитьПодчиненный(РодительскийУзел, УзелСправочника); // Закрываем узел CATALOG  	
//		
//	ОкноСостояние("Выгрузка единиц измерения...");			
//	ВыгрузитьЕдиницыИзмерения(РодительскийУзел, СпОТ, СписТоваров);		
//	
//КонецПроцедуры // ВыгрузитьНоменклатуру() 
//
////****************************************************************************** 
//Процедура ВыгрузитьКонтактнуюИнформацию(РодительскийУзел)
//	
//	// Производим выгрузку контактной информации в один справочник
//	// по всем объектам: контрагентам, торговым точкам и контактным лицам
//   	
//	УзелСправочника = СоздатьУзел("CATALOG"); 	
//	
//	ДобавитьПоле(УзелСправочника, "GUID", "85b62882-0156-4881-85ba-b8fef05c867b"); 
//	
//	ДобавитьПоле(УзелСправочника, "KILLALL", "1");                	
//	
//	ДобавитьПустойЭлементВXML(УзелСправочника,"GROUPS");
//	
//	УзелЭлементов = СоздатьУзел("ELEMENTS");     	
//                       
//	// Выгружаем контактную информацию по клиентам
//	Для Сч = 1 По СписокКлиентов.РазмерСписка() Цикл
//		
//		ТекКлиент = СписокКлиентов.ПолучитьЗначение(Сч);
//		
//		// Фактический адрес
//		СтруктураПолей = СоздатьОбъект("СписокЗначений");
//		
//		СтруктураПолей.ДобавитьЗначение(глАПСоздатьИдентификатор(),		"GUID");		
//		СтруктураПолей.ДобавитьЗначение("0", 							"IsDeleted");
//		СтруктураПолей.ДобавитьЗначение(ТекКлиент, 						"A01"); 
//		СтруктураПолей.ДобавитьЗначение(СписокТиповКИ.Получить("Адрес"),"A04");
//		СтруктураПолей.ДобавитьЗначение(ИдФактАдрес, 				    "A05");
//		ФактАдрес = "";
//		Если ТекКлиент.ЮрФизЛицо.Выбран() = 1 Тогда
//			ФактАдрес = глПредставлениеАдреса(ТекКлиент.ЮрФизЛицо.ФактАдрес);
//		КонецЕсли;
//		СтруктураПолей.ДобавитьЗначение(ФактАдрес,  "A06");						
//	
//		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);  			
//	        
//		/////////////////////////////////////////////////////////////////////////
//		     
//		// Юридический адрес
//		СтруктураПолей.Установить("GUID", глАПСоздатьИдентификатор());		
//		СтруктураПолей.Установить("A05", ИдЮрАдрес);    
//		ЮрАдрес = "";
//		Если ТекКлиент.ЮрФизЛицо.Выбран() = 1 Тогда
//			ЮрАдрес = глПредставлениеАдреса(ТекКлиент.ЮрФизЛицо.ЮрАдрес);
//		КонецЕсли;
//		СтруктураПолей.Установить("A06", ЮрАдрес);						
//	
//		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);  			
//	             
//		/////////////////////////////////////////////////////////////////////////
//		  
//		// Телефоны
//		СтруктураПолей.Установить("GUID", глАПСоздатьИдентификатор());		
//		СтруктураПолей.Установить("A04",  СписокТиповКИ.Получить("Телефон"));		
//		СтруктураПолей.Установить("A05",  ИдТелефон);  
//		Телефоны = "";
//		Если ТекКлиент.ЮрФизЛицо.Выбран() = 1 Тогда
//			Телефоны = ТекКлиент.ЮрФизЛицо.Телефоны;
//		КонецЕсли;
//		СтруктураПолей.Установить("A06",  Телефоны);						
//	    
//		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);
//		
//	КонецЦикла;      
//	
//	// Выгружаем контактную информацию по торговым точкам
//	Для Сч = 1 По СписокТТ.РазмерСписка() Цикл
//		
//		ТекТТ = СписокТТ.ПолучитьЗначение(Сч);
//		
//		// Адрес
//		СтруктураПолей = СоздатьОбъект("СписокЗначений");
//		
//		СтруктураПолей.ДобавитьЗначение(глАПСоздатьИдентификатор(),		"GUID");		
//		СтруктураПолей.ДобавитьЗначение("0", 							"IsDeleted");
//		СтруктураПолей.ДобавитьЗначение(ТекТТ, 							"A02"); 
//		
//		СтруктураПолей.ДобавитьЗначение(СписокТиповКИ.Получить("Адрес"),"A04");
//		СтруктураПолей.ДобавитьЗначение(ИдАдресТТ, 				    	"A05");
//		СтруктураПолей.ДобавитьЗначение(ТекТТ.Адрес, 				 	"A06");						
//	
//		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);  			
//	   	             
//		/////////////////////////////////////////////////////////////////////////
//		  
//		// Телефоны		
//		СтруктураПолей.Установить("GUID", глАПСоздатьИдентификатор()); 
//		СтруктураПолей.Установить("A04", СписокТиповКИ.Получить("Телефон"));
//		СтруктураПолей.Установить("A05", ИдТелефон);                                                
//		СтруктураПолей.Установить("A06", ТекТТ.Телефоны);
//		
//		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);
//		
//	КонецЦикла;              
//	
//	// Выгружаем контактную информацию по контактным лицам
//	Для Сч = 1 По СписокКЛ.РазмерСписка() Цикл
//		
//		ТекКЛ = СписокКЛ.ПолучитьЗначение(Сч);
//		
//		// Телефон рабочий
//		СтруктураПолей = СоздатьОбъект("СписокЗначений");
//		
//		СтруктураПолей.ДобавитьЗначение(глАПСоздатьИдентификатор(),		"GUID");		
//		СтруктураПолей.ДобавитьЗначение("0", 							"IsDeleted");
//		СтруктураПолей.ДобавитьЗначение(ТекКЛ, 							"A03"); 
//		
//		СтруктураПолей.ДобавитьЗначение(СписокТиповКИ.Получить("Телефон"),  "A04");
//		СтруктураПолей.ДобавитьЗначение(ИдРабочийТелефонКЛ, 			 	"A05");
//		СтруктураПолей.ДобавитьЗначение(ТекКЛ.ТелефонРабочий, 				"A06");						
//	
//		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);  			
//	   	             
//		/////////////////////////////////////////////////////////////////////////
//		  
//		// Телефон мобильный		
//		СтруктураПолей.Установить("GUID", глАПСоздатьИдентификатор()); 		
//		СтруктураПолей.Установить("A05",  ИдМобильныйТелефонКЛ);                                                
//		СтруктураПолей.Установить("A06",  ТекКЛ.ТелефонМобильный);
//		
//		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей); 
//		
//		// Электронная почта
//		СтруктураПолей.Установить("GUID", глАПСоздатьИдентификатор()); 
//		СтруктураПолей.Установить("A04",  СписокТиповКИ.Получить("АдресЭлектроннойПочты"));
//		СтруктураПолей.Установить("A05",  ИдАдресЭлПочтыКЛ);                                                
//		СтруктураПолей.Установить("A06",  ТекКЛ.ЭлектроннаяПочта);
//		
//		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);
//		
//	КонецЦикла;  	
//	
//	ДобавитьПодчиненный(УзелСправочника, УзелЭлементов); // Закрываем узел ELEMENTS  		         		
//
//	ДобавитьПодчиненный(РодительскийУзел, УзелСправочника); // Закрываем узел CATALOG 
//	
//КонецПроцедуры //ВыгрузитьКонтактнуюИнформацию
//
////****************************************************************************** 
//Процедура ВыгрузитьВзаиморасчеты(РодительскийУзел, ТДопКлиенты)
//	
//	УзелДокументов = СоздатьУзел("DOCUMENT"); 	
//	
//	ДобавитьПоле(УзелДокументов, "GUID", "a93aadfa-2a35-40fe-b88a-3768825cdd31"); 		
//	
//	// Удаляем все документы перед загрузкой
//	ДобавитьПоле(УзелДокументов, "KILLALL", "1");                	
//	
//	УзелДокумента = СоздатьУзел("ELEMENTS");	
//	
//	ОкноСостояние("Расчет взаиморасчетов...");
//	
//	ТекстЗапроса = "
//	|Договор		= Регистр.Покупатели.Договор;	
//	|КредДокумент	= Регистр.Покупатели.КредДокумент;
//	|Долг			= Регистр.Покупатели.СуммаРуб;
//	|Функция КонДолг = КонОст(Долг);
//	|Группировка Договор;
//	|Группировка КредДокумент;           	
//	|Условие(КредДокумент.Вид() = ""Реализация"");	
//	|";    
//	
//	Запрос = СоздатьОбъект("Запрос");
//	
//	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
//		ОповеститьОСобытии("Не выполнился запрос по взаиморасчетам!", "!!!");
//		Возврат;
//	КонецЕсли;
//	
//	//ТЗ = СоздатьОбъект("ТаблицаЗначений");   	
//	//Запрос.Выгрузить(Тз);
//	//Тз.ВыбратьСтроку();	
//	
//	ОкноСостояние("Выгрузка взаиморасчетов...");
//	
//	Кол = 0; 
//	
//	Пока Запрос.Группировка("Договор") = 1 Цикл
//		
//		Договор = Запрос.Договор;
//		Клиент 	= Договор.Владелец;
//		
//		Пока Запрос.Группировка("КредДокумент") = 1 Цикл
//			
//			КредДок = Запрос.КредДокумент;
//			Если КредДок.Выбран() = 0 Тогда
//			    Продолжить;
//			ИначеЕсли Запрос.КонДолг < 0 Тогда
//			    Продолжить;
//			КонецЕсли;      
//			     
//			СрокОплаты = РабочаяДата();			
//			// Соблюдаем условие глубины кредита по договору
//			Если Запрос.Договор.НеКонтролироватьКредит = 0 Тогда
//				СрокОплаты = РабочаяДата() + Запрос.Договор.ГлубинаКредита; 
//			КонецЕсли;
//			
//			ВидДок = КредДок.Вид();				
//			Если КредДок.ДатаОплаты > СрокОплаты Тогда
//			    Продолжить;
//			КонецЕсли;
//			
//			АгентАвтор = ПолучитьАгентаПоДокументу(КредДок);
//			Если АгентАвтор <> ВыбАгент Тогда
//			    Продолжить;
//			КонецЕсли;     
//			
//			Кол = Кол + 1;
//			Если Кол % 10 = 0 Тогда
//			    Состояние("Выгрузка взаиморасчетов: "+ Кол);
//			КонецЕсли; 		
//			
//			Фирма  		 = КредДок.Фирма; 
//			КатегорияДок = ПолучитьКатегориюПоДокументу(КредДок, 1);
//			
//			ТоргТочка = ПолучитьПустоеЗначение("Справочник.кпкТорговыеТочки");
//			Если глЕстьРеквизитШапки("кпкТоргТочка", ВидДок) = 1 Тогда
//				ТоргТочка = КредДок.кпкТоргТочка; 
//			КонецЕсли;
//			
//			НомерДок	= СокрЛП(КредДок.НомерДок);
//			ДатаВремяДок= ДатаВремяВФорматXMLИз1С(Строка(КредДок.ДатаДок) + " " + Строка(КредДок.ПолучитьВремя()));
//			Долг		= Запрос.КонДолг;
//			Комментарий = СокрЛП(КредДок.Комментарий);
//			СостДок 	= ?(КредДок.Проведен() = 1, "1", "0");
//			СуммаДок	= Строка(КредДок.Итог("Сумма"));
//			СрокДок		= КредДок.ДатаОплаты;
//			
//			СтруктураПолей = СоздатьОбъект("СписокЗначений");
//			СтруктураПолей.ДобавитьЗначение(глАПСоздатьИдентификатор(), "GUID");			
//			СтруктураПолей.ДобавитьЗначение(ДатаВремяДок, 				"dt");
//			СтруктураПолей.ДобавитьЗначение("0",  						"IsDeleted");
//			СтруктураПолей.ДобавитьЗначение(СостДок, 					"IsPost"); 
//			
//			СтруктураПолей.ДобавитьЗначение(КатегорияДок, "A01");
//			СтруктураПолей.ДобавитьЗначение(Фирма, 	      "A02");
//			СтруктураПолей.ДобавитьЗначение(Клиент,	  	  "A03");
//			СтруктураПолей.ДобавитьЗначение(ТоргТочка,    "A04");
//			СтруктураПолей.ДобавитьЗначение(Договор, 	  "A05");
//			СтруктураПолей.ДобавитьЗначение(СрокДок, 	  "A06");
//			СтруктураПолей.ДобавитьЗначение(СуммаДок, 	  "A07");
//			СтруктураПолей.ДобавитьЗначение(Комментарий,  "A08");
//		
//			ЗаписатьЭлементВДокументОбмена(УзелДокумента, СтруктураПолей);
//			
//			Стр = "";
//			Если ТоргТочка.Выбран() = 1 Тогда
//				Если ТДопКлиенты.НайтиЗначение(ТоргТочка, Стр, "ТоргТочка") = 0 Тогда
//					ТДопКлиенты.НоваяСтрока();
//					ТДопКлиенты.Клиент    = ТоргТочка.Владелец;
//					ТДопКлиенты.Должник   = 1;
//					ТДопКлиенты.ТоргТочка = ТоргТочка;
//				КонецЕсли;
//			Иначе
//				Если ТДопКлиенты.НайтиЗначение(Клиент, Стр, "Клиент") = 0 Тогда
//				    ТДопКлиенты.НоваяСтрока();
//					ТДопКлиенты.Клиент    = Клиент;
//					ТДопКлиенты.Должник   = 1;
//					ТДопКлиенты.ТоргТочка = "";
//				КонецЕсли;
//			КонецЕсли;
//			
//		КонецЦикла;  
//		
//	КонецЦикла;       		
//	
//	ДобавитьПодчиненный(УзелДокументов, УзелДокумента); // Закрываем узел ELEMENTS  		         		
//
//	ДобавитьПодчиненный(РодительскийУзел, УзелДокументов); // Закрываем узел DOCUMENT 			
//	
//КонецПроцедуры //ВыгрузитьВзаиморасчеты()
//****************************************************************************** 
Процедура ВыгрузитьИнвентаризации(РодительскийУзел, СписокСклады, СписокТоваров)
	
	ИнтервалДокументов = Константа.кпкИнтервалВыгрузкиДокументов;
	
	ОкноСостояние("Выгрузка инвентаризаций...");
		
	УзелДокументов = СоздатьУзел("DOCUMENT"); 	
	
	ДобавитьПоле(УзелДокументов, "GUID", "6ef7ce16-b211-4ada-bfd2-6161f918f999"); 		
	ДобавитьПоле(УзелДокументов, "Comment", "Документ.Инвентаризация");
	
	УзелДокумента = СоздатьУзел("ELEMENTS");   
		
	Док = СоздатьОбъект("Документ.Инвентаризация");	
	
	Кол = 0;
	
	Док.ВыбратьДокументы(РабочаяДата()-ИнтервалДокументов, РабочаяДата()); //просматриваем документы за последние 10 дней

	Пока Док.ПолучитьДокумент() = 1 Цикл
		Если Док.КоличествоСтрок() = 0 Тогда
		    Продолжить;
		КонецЕсли;
		
		лСклад = Док.Склад; // Склад отправитель
		
		АгентИнфо = ПолучитьДанныеАгента(ВыбАгент);
		
		Если лСклад <> АгентИнфо.Склад Тогда
		    Продолжить;
		КонецЕсли;
	  		
		Кол = Кол + 1;
	    Состояние("Выгрузка инвентаризаций: " + Кол);
		
		Фирма		= Док.Фирма;   

		СписокСклады.Установить(СокрЛП(Док.Склад),Док.Склад);
		
        ИтогВес = 0;
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл 
			ИтогВес = ИтогВес + Док.Единица.Вес;
		КонецЦикла;
		               
		ИдДок = ВернутьИдентификаторДок(Док);
		
		Если ПустоеЗначение(ИдДок) = 1 Тогда Продолжить; КонецЕсли;
		
		СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейДокумента(Док.ТекущийДокумент());
		
		СтруктураПолей.ДобавитьЗначение(Док.НомерДок, 							    "DocNumber");					
		СтруктураПолей.ДобавитьЗначение(Док.Комментарий,								"A01");
		СтруктураПолей.ДобавитьЗначение(Док.Итог("пкСтрокаИзменена"), 					"A02");
		СтруктураПолей.ДобавитьЗначение(Док.КоличествоСтрок(), 							"A03");
		
		// Во втором параметре передается Ложь - это означает,
		// что не закрывает тег "Item", его закрытие производится ниже	               		
		УзелЭлементаДок  = 0;
		ЗаписатьЭлементВДокументОбмена(УзелДокумента, СтруктураПолей, 0, УзелЭлементаДок);
		
		УзелТабЧастей = СоздатьУзел("TABLES"); 		
		
		УзелТабЧасти = СоздатьУзел("TABLE"); 	
		
		ДобавитьПоле(УзелТабЧасти, "GUID", "ad55d5a6-ca4e-4208-9465-4cc8b41b92fb"); 		
		
		Док.ВыбратьСтроки();  
		
		Пока Док.ПолучитьСтроку() = 1 Цикл 			
			
			СписокТоваров.Установить(СокрЛП(Док.Товар),Док.Товар);
			
			СтруктураПолей = СоздатьОбъект("СписокЗначений");
			СтруктураПолей.ДобавитьЗначение(глАПСоздатьИдентификатор(), 					"GUID");
			СтруктураПолей.ДобавитьЗначение(ИдДок, 					    					"DocId");
			СтруктураПолей.ДобавитьЗначение(Док.Товар,										"A01");			
//			СтруктураПолей.ДобавитьЗначение(?(ПустоеЗначение(Док.пкАдрес) = 1, глПолучитьАдресИзСправочникаМеста(Док.Товар,Док.ДатаДок),Док.пкАдрес),	"A02");
			СтруктураПолей.ДобавитьЗначение(Док.Количество,		 							"A03");
			СтруктураПолей.ДобавитьЗначение(Док.ИнвКоличество,								"A04");
			СтруктураПолей.ДобавитьЗначение(СокрЛП(Док.Единица),							"A05");
			СтруктураПолей.ДобавитьЗначение(Док.Количество-Док.ИнвКоличество,				"A06");
			СтруктураПолей.ДобавитьЗначение(Док.Товар.Код,		 							"A07");
			СтруктураПолей.ДобавитьЗначение(Док.пкСтрокаИзменена,							"A08");
			ЗаписатьЭлементВДокументОбмена(УзелТабЧасти, СтруктураПолей);			
			
		КонецЦикла;   
		
		ДобавитьПодчиненный(УзелТабЧастей, УзелТабЧасти); // Закрываем узел TABLE  		         		 
		
		ДобавитьПодчиненный(УзелЭлементаДок, УзелТабЧастей); // Закрываем узел TABLES  
		
		// Закрыаем тег ITEM, который был открыт при вызове
		// процедуры "ЗаписатьЭлементВДокументОбмена" 		
		ДобавитьПодчиненный(УзелДокумента, УзелЭлементаДок); // Закрываем узел ITEM  		         		
		
	КонецЦикла;
			
	ДобавитьПодчиненный(УзелДокументов, УзелДокумента); // Закрываем узел ELEMENTS  		         		

	ДобавитьПодчиненный(РодительскийУзел, УзелДокументов); // Закрываем узел DOCUMENT 
	
КонецПроцедуры //ВыгрузитьИнвентаризации 


//****************************************************************************** 
Процедура ВыгрузитьПеремещения(РодительскийУзел, СписокСклады, СписокТоваров)
	
	ИнтервалДокументов = Константа.кпкИнтервалВыгрузкиДокументов;
	
	ОкноСостояние("Выгрузка перемещений...");
		
	УзелДокументов = СоздатьУзел("DOCUMENT"); 	
	
	ДобавитьПоле(УзелДокументов, "GUID", "ee73ab20-6f8b-470d-ba55-11ff87a0836d"); 		
	ДобавитьПоле(УзелДокументов, "Comment", "Документ.Перемещение");
	
	УзелДокумента = СоздатьУзел("ELEMENTS");   
		
	Док = СоздатьОбъект("Документ.Перемещение");	
	
	Кол = 0;
	
	Док.ВыбратьДокументы(РабочаяДата()-ИнтервалДокументов, РабочаяДата()); //просматриваем документы за последние 10 дней

	Пока Док.ПолучитьДокумент() = 1 Цикл
		Если Док.Проведен() = 0 Тогда
		    Продолжить;
		КонецЕсли;
		
		лСклад = Док.Склад; // Склад отправитель
		лСкладНовый = Док.НовыйСклад;
		
		АгентИнфо = ПолучитьДанныеАгента(ВыбАгент);
		
		Если (лСклад <> АгентИнфо.Склад) и (лСкладНовый <> АгентИнфо.Склад) Тогда
		    Продолжить;
		КонецЕсли;
	  		
		Кол = Кол + 1;
	    Состояние("Выгрузка перемещений: " + Кол);
		
		Фирма		= Док.Фирма;   

		СписокСклады.Установить(СокрЛП(Док.Склад),Док.Склад);
		СписокСклады.Установить(СокрЛП(Док.НовыйСклад),Док.НовыйСклад);
		
        ИтогВес = 0;
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл 
			ИтогВес = ИтогВес + Док.Единица.Вес;
		КонецЦикла;
		               
		ИдДок = ВернутьИдентификаторДок(Док);
		
		Если ПустоеЗначение(ИдДок) = 1 Тогда Продолжить; КонецЕсли;
		
		СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейДокумента(Док.ТекущийДокумент());
		
		СтруктураПолей.ДобавитьЗначение(Док.НомерДок, 							    "DocNumber");					
		СтруктураПолей.ДобавитьЗначение(?(лСклад = АгентИнфо.Склад,лСкладНовый,лСклад),	"A01");
		СтруктураПолей.ДобавитьЗначение(Док.КоличествоСтрок(), 							"A02");
	//	СтруктураПолей.ДобавитьЗначение(лСкладНовый, 									"A03");
		СтруктураПолей.ДобавитьЗначение(ИтогВес, 										"A04");
		СтруктураПолей.ДобавитьЗначение(Док.Комментарий, 								"A05");
		СтруктураПолей.ДобавитьЗначение(?(лСклад = АгентИнфо.Склад, 1, 2),				"A07");  //1 - расход, 2 - приход
		
		// Во втором параметре передается Ложь - это означает,
		// что не закрывает тег "Item", его закрытие производится ниже	               		
		УзелЭлементаДок  = 0;
		ЗаписатьЭлементВДокументОбмена(УзелДокумента, СтруктураПолей, 0, УзелЭлементаДок);
		
		УзелТабЧастей = СоздатьУзел("TABLES"); 		
		
		УзелТабЧасти = СоздатьУзел("TABLE"); 	
		
		ДобавитьПоле(УзелТабЧасти, "GUID", "0c36d8b7-a757-4516-80bb-7efa440f11f2"); 		
		
		Док.ВыбратьСтроки();  
		
		Пока Док.ПолучитьСтроку() = 1 Цикл 			
			
			СписокТоваров.Установить(СокрЛП(Док.Товар),Док.Товар);
			
			СтруктураПолей = СоздатьОбъект("СписокЗначений");
			СтруктураПолей.ДобавитьЗначение(глАПСоздатьИдентификатор(), "GUID");
			СтруктураПолей.ДобавитьЗначение(ИдДок, 					    "DocId");
			СтруктураПолей.ДобавитьЗначение(Док.Товар,					"A01");			
			СтруктураПолей.ДобавитьЗначение(Док.пкАдрес, 				"A02");
			СтруктураПолей.ДобавитьЗначение(Док.пкАдресПолучатель, 		"A03");
			СтруктураПолей.ДобавитьЗначение(Док.Единица, 				"A04");
			СтруктураПолей.ДобавитьЗначение(Док.Количество, 			"A05");
			СтруктураПолей.ДобавитьЗначение(Док.Единица.Вес, 			"A06");
			СтруктураПолей.ДобавитьЗначение(Док.Товар.Код,		 		"A07");
			ЗаписатьЭлементВДокументОбмена(УзелТабЧасти, СтруктураПолей);			
			
		КонецЦикла;   
		
		ДобавитьПодчиненный(УзелТабЧастей, УзелТабЧасти); // Закрываем узел TABLE  		         		 
		
		ДобавитьПодчиненный(УзелЭлементаДок, УзелТабЧастей); // Закрываем узел TABLES  
		
		// Закрыаем тег ITEM, который был открыт при вызове
		// процедуры "ЗаписатьЭлементВДокументОбмена" 		
		ДобавитьПодчиненный(УзелДокумента, УзелЭлементаДок); // Закрываем узел ITEM  		         		
		
	КонецЦикла;
			
	ДобавитьПодчиненный(УзелДокументов, УзелДокумента); // Закрываем узел ELEMENTS  		         		

	ДобавитьПодчиненный(РодительскийУзел, УзелДокументов); // Закрываем узел DOCUMENT 
	
КонецПроцедуры //ВыгрузитьПеремещения 


//****************************************************************************** 
Процедура ВыгрузитьПоступления(РодительскийУзел, ТДопКлиенты, СписокСклады, СписокТоваров)
	
	ИнтервалДокументов = Константа.кпкИнтервалВыгрузкиДокументов;
	
	ОкноСостояние("Выгрузка поступлений...");
		
	УзелДокументов = СоздатьУзел("DOCUMENT"); 	
	
	ДобавитьПоле(УзелДокументов, "GUID", "f9a73994-c09d-4260-a871-a3679ba0f2d4"); 		
	ДобавитьПоле(УзелДокументов, "Comment", "Документ.ПриходнаяНакладная");
	
	УзелДокумента = СоздатьУзел("ELEMENTS");   
		
	Док = СоздатьОбъект("Документ.ПриходнаяНакладная");	
	
	Кол = 0;
	
	Док.ВыбратьДокументы(РабочаяДата()-ИнтервалДокументов, РабочаяДата()); //просматриваем документы за последние 10 дней

	Пока Док.ПолучитьДокумент() = 1 Цикл
		Если Док.Проведен() = 0 Тогда
		    Продолжить;
		КонецЕсли;
		
		//лСклад = ПолучитьСкладПоДокументу(Док);
		лСклад = Док.Склад; //Менять
		
		АгентИнфо = ПолучитьДанныеАгента(ВыбАгент);
		
		Если Док.Склад <> Константа.пкСкладРезерв Тогда
			Если лСклад <> АгентИнфо.Склад Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
	  		
		Кол = Кол + 1;
	    Состояние("Выгрузка поступлений: " + Кол);
		
		Клиент 		= Док.Контрагент;
		Склад	 	= Док.Склад;
		Фирма		= Док.Фирма;   

		ТДопКлиенты.Установить(Клиент,Клиент);
		СписокСклады.Установить(СокрЛП(Док.Склад),Док.Склад);
		
		ИдДок = ВернутьИдентификаторДок(Док);
		
		Если ПустоеЗначение(ИдДок) = 1 Тогда Продолжить; КонецЕсли;
		
		спСклады = СоздатьОбъект("СписокЗначений");
        Если Док.Склад = Константа.пкСкладРезерв Тогда
			Док.ВыбратьСтроки();
			Пока Док.ПолучитьСтроку() = 1 Цикл
				Если Док.пкСкладВСтроке.Выбран() = 1 Тогда
					спСклады.ДобавитьЗначение(Док.пкСкладВСтроке);
				КонецЕсли;
			КонецЦикла;
		Иначе
			спСклады.ДобавитьЗначение(Док.Склад);
		КонецЕсли;
		
		Для сч = 1 по спСклады.РазмерСписка() Цикл
			ТекущийСклад = спСклады.ПолучитьЗначение(сч);
			
			Если ТекущийСклад <> АгентИнфо.Склад Тогда
				Продолжить;
			КонецЕсли;
			
			ИтогВес = 0;
			Док.ВыбратьСтроки();
			Пока Док.ПолучитьСтроку() = 1 Цикл 
				Если Док.Склад = Константа.пкСкладРезерв Тогда
				    Если Док.пкСкладВСтроке = ТекущийСклад Тогда
						ИтогВес = ИтогВес + Док.Единица.Вес;
				    КонецЕсли;
				Иначе
					ИтогВес = ИтогВес + Док.Единица.Вес;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейДокумента(Док.ТекущийДокумент());
			
			СтруктураПолей.ДобавитьЗначение(Док.НомерДок, 							    "DocNumber");					
			СтруктураПолей.ДобавитьЗначение(Клиент, 									"A01");
			СтруктураПолей.ДобавитьЗначение(ТекущийСклад, 								"A02");
			СтруктураПолей.ДобавитьЗначение(Док.КоличествоСтрок(), 						"A03");
			СтруктураПолей.ДобавитьЗначение(ИтогВес, 									"A04");
			СтруктураПолей.ДобавитьЗначение(Док.Комментарий, 							"A05");
			
			// Во втором параметре передается Ложь - это означает,
			// что не закрывает тег "Item", его закрытие производится ниже	               		
			УзелЭлементаДок  = 0;
			ЗаписатьЭлементВДокументОбмена(УзелДокумента, СтруктураПолей, 0, УзелЭлементаДок);
			
			УзелТабЧастей = СоздатьУзел("TABLES"); 		
			
			УзелТабЧасти = СоздатьУзел("TABLE"); 	
			
			ДобавитьПоле(УзелТабЧасти, "GUID", "d3c00565-5167-4329-a167-9ab9b2d7c9c4");		
			
			Док.ВыбратьСтроки();  
			
			Пока Док.ПолучитьСтроку() = 1 Цикл 			
				
				Если Док.пкСкладВСтроке <> АгентИнфо.Склад Тогда
					Продолжить;
				КонецЕсли;
				
				СписокТоваров.Установить(СокрЛП(Док.Товар),Док.Товар);
				
				СтруктураПолей = СоздатьОбъект("СписокЗначений");
				СтруктураПолей.ДобавитьЗначение(глАПСоздатьИдентификатор(), "GUID");
				СтруктураПолей.ДобавитьЗначение(ИдДок, 					    "DocId");
				СтруктураПолей.ДобавитьЗначение(Док.Товар,					"A01");			
				СтруктураПолей.ДобавитьЗначение(Док.пкАдрес, 				"A02");
				СтруктураПолей.ДобавитьЗначение(Док.Товар.Код,		 		"A05");
				СтруктураПолей.ДобавитьЗначение(Док.Единица, 				"A06");
				СтруктураПолей.ДобавитьЗначение(Док.Единица.Вес, 			"A07");
				СтруктураПолей.ДобавитьЗначение(Док.Количество, 			"A08");
				ЗаписатьЭлементВДокументОбмена(УзелТабЧасти, СтруктураПолей);			
				
			КонецЦикла;   
			
			ДобавитьПодчиненный(УзелТабЧастей, УзелТабЧасти); // Закрываем узел TABLE  		         		 
			
			ДобавитьПодчиненный(УзелЭлементаДок, УзелТабЧастей); // Закрываем узел TABLES  
			
			// Закрыаем тег ITEM, который был открыт при вызове
			// процедуры "ЗаписатьЭлементВДокументОбмена" 		
			ДобавитьПодчиненный(УзелДокумента, УзелЭлементаДок); // Закрываем узел ITEM  		         		
		КонецЦикла;
		
	КонецЦикла;
			
	ДобавитьПодчиненный(УзелДокументов, УзелДокумента); // Закрываем узел ELEMENTS  		         		

	ДобавитьПодчиненный(РодительскийУзел, УзелДокументов); // Закрываем узел DOCUMENT 
	
КонецПроцедуры //ВыгрузитьЗаказыПокупателей 

//****************************************************************************** 
Процедура ВыгрузитьРеализации(РодительскийУзел, ТДопКлиенты, СписокСклады, СписокТоваров)
	
	ИнтервалДокументов = Константа.кпкИнтервалВыгрузкиДокументов;
	
	ОкноСостояние("Выгрузка реализаций...");
		
	УзелДокументов = СоздатьУзел("DOCUMENT"); 	
	
	ДобавитьПоле(УзелДокументов, "GUID", "d098d773-0b1c-4351-b9e4-5789fe50418f"); 		
	ДобавитьПоле(УзелДокументов, "Comment", "Документ.РасходнаяНакладная");
	
	УзелДокумента = СоздатьУзел("ELEMENTS");   
		
	Док = СоздатьОбъект("Документ.РасходнаяНакладная");	
	
	Кол = 0;
	
	Док.ВыбратьДокументы(РабочаяДата()-ИнтервалДокументов, РабочаяДата()); //просматриваем документы за последние 10 дней

	Пока Док.ПолучитьДокумент() = 1 Цикл
		Если Док.Проведен() = 0 Тогда
		    Продолжить;
		КонецЕсли;
		
		//лСклад = ПолучитьСкладПоДокументу(Док);
		лСклад = Док.Склад; //Менять
		
		АгентИнфо = ПолучитьДанныеАгента(ВыбАгент);
		
		Если лСклад <> АгентИнфо.Склад Тогда
		    Продолжить;
		КонецЕсли;
	  	





		Кол = Кол + 1;
	    Состояние("Выгрузка реализаций: " + Кол);
		
		Клиент 		= Док.Контрагент;
		Склад	 	= Док.Склад;
		Фирма		= Док.Фирма;   

		ТДопКлиенты.Установить(Клиент,Клиент);
		СписокСклады.Установить(СокрЛП(Док.Склад),Док.Склад);
		
		//
		//СуммаДокумента = Док.Итог("Сумма") + ?(Док.СуммаВклНП=1,0,Док.Итог("СуммаНП"))+?(Док.СуммаВклНДС=1,0,Док.Итог("СуммаНДС"));
      	//
		//ИтогВес = Док.Итог("Вес");
        ИтогВес = 0;
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл 
			ИтогВес = ИтогВес + Док.Единица.Вес;
		КонецЦикла;
		               
		ИдДок = ВернутьИдентификаторДок(Док);
		
		Если ПустоеЗначение(ИдДок) = 1 Тогда Продолжить; КонецЕсли;
		
		СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейДокумента(Док.ТекущийДокумент());
		
		СтруктураПолей.ДобавитьЗначение(Док.НомерДок, 							    "DocNumber");					
		СтруктураПолей.ДобавитьЗначение(Клиент, 									"A01");
		СтруктураПолей.ДобавитьЗначение(Склад, 										"A02");
		СтруктураПолей.ДобавитьЗначение(Док.КоличествоСтрок(), 						"A03");
		СтруктураПолей.ДобавитьЗначение(ИтогВес, 									"A04");
		СтруктураПолей.ДобавитьЗначение(Док.Комментарий, 							"A05");
		
		// Во втором параметре передается Ложь - это означает,
		// что не закрывает тег "Item", его закрытие производится ниже	               		
		УзелЭлементаДок  = 0;
		ЗаписатьЭлементВДокументОбмена(УзелДокумента, СтруктураПолей, 0, УзелЭлементаДок);
		
		УзелТабЧастей = СоздатьУзел("TABLES"); 		
		
		УзелТабЧасти = СоздатьУзел("TABLE"); 	
		
		ДобавитьПоле(УзелТабЧасти, "GUID", "7084d846-49e5-466c-aeaa-33f504238126"); //*?*"0738e61b-f06f-464a-8483-4249e0254819"		
		
		Док.ВыбратьСтроки();  
		
		Пока Док.ПолучитьСтроку() = 1 Цикл 			
			
			//СтавкаНДС = глНачисляемыйНДС(Док.СтавкаНДС*100);
			СписокТоваров.Установить(СокрЛП(Док.Товар),Док.Товар);
			
			СтруктураПолей = СоздатьОбъект("СписокЗначений");
			СтруктураПолей.ДобавитьЗначение(глАПСоздатьИдентификатор(), "GUID");
			СтруктураПолей.ДобавитьЗначение(ИдДок, 					    "DocId");
			СтруктураПолей.ДобавитьЗначение(Док.Товар,					"A01");			
			СтруктураПолей.ДобавитьЗначение(Док.пкАдрес,				"A02");
			СтруктураПолей.ДобавитьЗначение(Док.Единица, 				"A03");
			СтруктураПолей.ДобавитьЗначение(Док.Количество, 			"A04");
			СтруктураПолей.ДобавитьЗначение(Док.Товар.Код,		 		"A07");
			//СтруктураПолей.ДобавитьЗначение(Док.Цена, 				"A05");
			//СтруктураПолей.ДобавитьЗначение(Док.Сумма, 				"A06");
			//СтруктураПолей.ДобавитьЗначение(Док.СуммаНДС, 			"A07");
			СтруктураПолей.ДобавитьЗначение(Док.Единица.Вес, 			"A06");
			//СтруктураПолей.ДобавитьЗначение(Док.Скидка.Процент, 		"A09");
			//СтруктураПолей.ДобавитьЗначение(СтавкаНДС, 					"A010");
			//СтруктураПолей.ДобавитьЗначение(Док.Склад, 					"A05");			
			ЗаписатьЭлементВДокументОбмена(УзелТабЧасти, СтруктураПолей);			
			
		КонецЦикла;   
		
		ДобавитьПодчиненный(УзелТабЧастей, УзелТабЧасти); // Закрываем узел TABLE  		         		 
		
		ДобавитьПодчиненный(УзелЭлементаДок, УзелТабЧастей); // Закрываем узел TABLES  
		
		// Закрыаем тег ITEM, который был открыт при вызове
		// процедуры "ЗаписатьЭлементВДокументОбмена" 		
		ДобавитьПодчиненный(УзелДокумента, УзелЭлементаДок); // Закрываем узел ITEM  		         		
		
	КонецЦикла;
			
	ДобавитьПодчиненный(УзелДокументов, УзелДокумента); // Закрываем узел ELEMENTS  		         		

	ДобавитьПодчиненный(РодительскийУзел, УзелДокументов); // Закрываем узел DOCUMENT 
	
КонецПроцедуры //ВыгрузитьРеализации 

////****************************************************************************** 
//Процедура ВыгрузитьМаршруты(РодительскийУзел, ТДопКлиенты, ПланАгента)    	       
//
//	Док = СоздатьОбъект("Документ.КпкМаршрут");   
//	
//	ДокПлан = ПланАгента;  
//	
//	ТабМаршрутов = СоздатьОбъект("ТаблицаЗначений");
//	ТабМаршрутов.НоваяКолонка("День");
//	ТабМаршрутов.НоваяКолонка("Клиент"); 
//	ТабМаршрутов.НоваяКолонка("ТоргТочка");  
//	ТабМаршрутов.НоваяКолонка("Время");  
//	ТабМаршрутов.НоваяКолонка("Напоминание"); 
//
//	ОкноСостояние("Обработка маршрутов...");	
//	
//	//ищем в каждой дате документ "Маршрут" для выбранного торг. агента
//	Для ДатаМ = ДатаМ1 По ДатаМ2 Цикл
//	
//		ЕстьМаршрут = 0;
//		
//		Док.ВыбратьДокументы(ДатаМ, ДатаМ);
//		Пока Док.ПолучитьДокумент() = 1 Цикл
//		    Если (Док.Агент = ВыбАгент) И (Док.Проведен() = 1) Тогда
//				Если Док.ДокОснование.Выбран() = 1 Тогда
//					Если Док.ДокОснование.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;					
//				КонецЕсли;
//		        ЕстьМаршрут = 1;
//				Прервать;
//		    КонецЕсли;
//		КонецЦикла;  
//			
//		Если ЕстьМаршрут = 1 Тогда 
//			
//			Док.ВыбратьСтроки();
//			
//			Пока Док.ПолучитьСтроку() = 1 Цикл  				
//				ТабМаршрутов.НоваяСтрока();
//				ТабМаршрутов.День		 = ДатаМ; 
//				ТабМаршрутов.Клиент 	 = Док.Контрагент;
//				ТабМаршрутов.ТоргТочка 	 = Док.ТоргТочка;
//				ТабМаршрутов.Время 		 = Док.Время; 
//				ТабМаршрутов.Напоминание = Док.Напоминание; 
//			КонецЦикла;    
//	 		
//		ИначеЕсли ДокПлан.Выбран() = 1 Тогда //если нет документа "Маршрут", то выгружаем маршрут на основе плана 
//			       
//			Если ДатаМ < ДокПлан.ДатаДок Тогда
//				Продолжить;
//			КонецЕсли;
//			
//			ДатаКол = ДатаМ - ДокПлан.ДатаДок + 1;
//			
//			Если (ДатаКол < 1) или (ДатаКол > 31) Тогда  
//				Продолжить;    
//			КонецЕсли; 			
//			
//			Колонка = "Д" + Строка(ДатаКол);
//			
//			ДокПлан.ВыбратьСтроки();
//			
//			Пока ДокПлан.ПолучитьСтроку() = 1 Цикл   			    
//				Посещение = ДокПлан.ПолучитьАтрибут(Колонка);
//				
//				Если ПустоеЗначение(Посещение) = 1 Тогда
//				    Продолжить;
//				КонецЕсли; 
//				
//				ТабМаршрутов.НоваяСтрока();
//				ТабМаршрутов.День		 = ДатаМ; 
//				ТабМаршрутов.Клиент 	 = ДокПлан.Контрагент;
//				ТабМаршрутов.ТоргТочка 	 = ДокПлан.ТоргТочка;
//				ТабМаршрутов.Время 		 = ""; 
//				ТабМаршрутов.Напоминание = ""; 				    
//			КонецЦикла;   
//			
//		ИначеЕсли НомерДняНедели(ДатаМ) < 6 Тогда //если дата не выходной, выводим сообщение 
//			
//			ОповеститьОСобытии("Не выгружен маршрут на дату " + Строка(ДатаМ), "i", 0);    
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//			      
//	Состояние("Выгрузка маршрутов...");   
//	
//	// Обрабатываем таблицу маршрутов
//	ТабМаршрутов.Сортировать("День, Время");
//	
//	УзелДокументов = СоздатьУзел("DOCUMENT"); 	
//	
//	ДобавитьПоле(УзелДокументов, "GUID", "43920fa1-745d-4499-84af-7000672ceeff"); 		
//	
//	// Очищаем все маршруты перед загрузкой их в БД МУ	
//	ДобавитьПоле(УзелДокументов, "KILLALL", "1"); 	    
//	
//	УзелДокумента = СоздатьУзел("ELEMENTS");   
//	
//	Кол 	 = 0;  
//	ПредДень = "";
//	
//	ТабМаршрутов.ВыбратьСтроки();
//	
//	УзелЭлементаДок = 0; 	
//	УзелТабЧасти    = 0;
//	УзелТабЧастей   = 0;  
//	
//	ЗакрытьТеги = 0;
//	
//	Пока ТабМаршрутов.ПолучитьСтроку() = 1 Цикл   
//		
//		Клиент    = ТабМаршрутов.Клиент; 
//		ТоргТочка = ТабМаршрутов.ТоргТочка; 
//		ДеньМ     = ТабМаршрутов.День;      
//		
//		Парам 	 = Клиент;
//		ИмяПарам = "Клиент";
//		
//		Если Клиент.Выбран() = 0 Тогда Продолжить; КонецЕсли;
//		
//		Если ИспТочек = 1 Тогда
//			Если (ТоргТочка.Выбран() = 0) и (Клиент.Выбран() = 0) Тогда Продолжить; КонецЕсли;                                                     
//			Если ТоргТочка.Выбран() = 1 Тогда
//				Парам = ТоргТочка; 
//				ИмяПарам = "ТоргТочка";          
//			Иначе                                
//				Парам = Клиент; 
//				ИмяПарам = "Клиент";          
//			КонецЕсли;
//		КонецЕсли;		
//		
//		Если ДеньМ <> ПредДень Тогда // выгружаем новый документ   
//			
//			Если ПредДень <> "" Тогда 
//				
//				ЗакрытьТеги = 0;
//				
//				ДобавитьПодчиненный(УзелТабЧастей, УзелТабЧасти); 	 // Закрываем узел TABLE  		         		 				
//				
//				ДобавитьПодчиненный(УзелЭлементаДок, УзелТабЧастей); // Закрываем узел TABLES                        				
//				
//				// Закрыаем тег ITEM, который был открыт при вызове
//				// процедуры "ЗаписатьЭлементВДокументОбмена" 		
//				ДобавитьПодчиненный(УзелДокумента, УзелЭлементаДок); // Закрываем узел ITEM  
//				
//			КонецЕсли;	
//                    
//			ИдДок = глАПСоздатьИдентификатор();   
//			
//			ДатаДок = ДатаВремяВФорматXMLИз1С(Строка(ДеньМ) + " 00:00:00");
//			
//			СтруктураПолей = СоздатьОбъект("СписокЗначений");
//            
//			СтруктураПолей.ДобавитьЗначение(ИдДок, 	 "GUID");						
//			СтруктураПолей.ДобавитьЗначение(ДатаДок, "dt");
//			СтруктураПолей.ДобавитьЗначение("0",  	 "IsDeleted");
//			СтруктураПолей.ДобавитьЗначение("1", 	 "IsPost");      		
//			
//			// Во втором параметре передается Ложь - это означает,
//			// что не закрывает тег "Item", его закрытие производится ниже
//			
//			УзелЭлементаДок  = 0;
//			
//			ЗаписатьЭлементВДокументОбмена(УзелДокумента, СтруктураПолей, 0, УзелЭлементаДок);				
//			
//			УзелТабЧастей = СоздатьУзел("TABLES"); 		
//	
//			УзелТабЧасти = СоздатьУзел("TABLE"); 	
//	
//			ДобавитьПоле(УзелТабЧасти, "GUID", "ed832712-a167-4b9e-87f1-5127e6f70814");										
//			
//			ЗакрытьТеги = 1;
//								
//		КонецЕсли;		
//		
//		//Включаем в таблицу клиента и торг. точку, чтобы при выгрузке клиентов и точек они были выгружены
//		Стр = "";
//		Если ТДопКлиенты.НайтиЗначение(Парам, Стр, ИмяПарам) = 0 Тогда
//			ТДопКлиенты.НоваяСтрока();
//			ТДопКлиенты.УстановитьЗначение(ТДопКлиенты.НомерСтроки, ИмяПарам, Парам);
//			ТДопКлиенты.Должник   = 0;
//			ТДопКлиенты.Клиент = Клиент;
//		КонецЕсли;    		
//		
//		ДеньXML = ДатаВФорматеXML(ТабМаршрутов.День);    
//		
//		Время = ДеньXML;
//		Если ПустаяСтрока(ТабМаршрутов.Время) = 0 Тогда
//		    Время = Время + " " + СтрЗаменить(ТабМаршрутов.Время, ":", "-");
//		КонецЕсли;  
//		
//		СтруктураПолей = СоздатьОбъект("СписокЗначений");
//		СтруктураПолей.ДобавитьЗначение(глАПСоздатьИдентификатор(), 		"GUID");   
//		СтруктураПолей.ДобавитьЗначение(ИдДок, 								"DocId");
//		СтруктураПолей.ДобавитьЗначение(Клиент,								"A01");			
//		СтруктураПолей.ДобавитьЗначение(ТоргТочка, 							"A02");
//		СтруктураПолей.ДобавитьЗначение(ТабМаршрутов.Время, 				"A03");
//		СтруктураПолей.ДобавитьЗначение(СокрЛП(ТабМаршрутов.Напоминание),	"A04");   				
//		
//		ЗаписатьЭлементВДокументОбмена(УзелТабЧасти, СтруктураПолей);			
//		
//		Кол = Кол + 1;                          
//		
//		ПредДень = ДеньМ;
//	 			
//		Состояние("Выгрузка маршрутов: " + Кол);
//	        
//	КонецЦикла;          
//	  
//	// Нужно закрыть открытые теги, если не было смены дней
//	Если ЗакрытьТеги = 1 Тогда
//		
//		ДобавитьПодчиненный(УзелТабЧастей, УзелТабЧасти); 	 // Закрываем узел TABLE  		         		 				
//		
//		ДобавитьПодчиненный(УзелЭлементаДок, УзелТабЧастей); // Закрываем узел TABLES                        				
//		
//		// Закрыаем тег ITEM, который был открыт при вызове
//		// процедуры "ЗаписатьЭлементВДокументОбмена" 		
//		ДобавитьПодчиненный(УзелДокумента, УзелЭлементаДок); // Закрываем узел ITEM  
//	КонецЕсли;
//	
//
//	ДобавитьПодчиненный(УзелДокументов, УзелДокумента); // Закрываем узел ELEMENTS  		         		
//	
//	ДобавитьПодчиненный(РодительскийУзел, УзелДокументов); // Закрываем узел DOCUMENT       	
//	
//КонецПроцедуры //ВыгрузитьМаршруты
//       
////****************************************************************************** 
//Процедура ВыгрузитьПодтвержденияЗаказовПокупателей(РодительскийУзел)        	
//	
//	Док = СоздатьОбъект("Документ");   
//	
//	Интервал = Константа.кпкИнтервалПодтверждений;
//	
//	Док.ВыбратьДокументы(ТекущаяДата() - Интервал, ТекущаяДата());
//	
//	ВидыДок = "ЗаявкаПокупателя,Реализация,ПКО,РКО,кпкМерчендайзинг,кпкПосещение,ПеремещениеТМЦ,ВозвратОтПокупателя,ОтчетККМ,кпкЗаданиеАгента,ПоступлениеТМЦ";
//	
//	УзелДок = СоздатьУзел("DOCUMENT"); 	
//	
//		ДобавитьПоле(УзелДок, "GUID", "e01e1f5c-d6e4-46e8-b923-3758b0d79bde"); 		
//	
//		УзелПодтверждений = СоздатьУзел("CONFIRMATIONS"); 	
//		
//			Пока Док.ПолучитьДокумент() = 1 Цикл
//			
//				АгентАвтор = ПолучитьАгентаПоДокументу(Док);
//				
//				Если АгентАвтор <> ВыбАгент Тогда
//				    Продолжить;
//				КонецЕсли;   
//				
//				ВидДок = Док.Вид();
//			
//				Если Найти(ВидыДок, ВидДок) = 0 Тогда
//				    Продолжить;
//				ИначеЕсли м_СпрКПКДок.НайтиПоРеквизиту("Документ", Док.ТекущийДокумент(), 1) = 0 Тогда		
//					Продолжить;
//				КонецЕсли;
//				
//				Если м_СпрКПКДок.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;
//				
//				ИдДок = СокрП(м_СпрКПКДок.Идентификатор);                
//				
//				Если ПустаяСтрока(ИдДок) = 1 Тогда Продолжить; КонецЕсли;
//			
//				СтруктураПолей = СоздатьОбъект("СписокЗначений");
//				СтруктураПолей.ДобавитьЗначение(ИдДок, "GUID");
//				ЗаписатьЭлементВДокументОбмена(УзелПодтверждений, СтруктураПолей);   
//				
//			КонецЦикла;   
//		
//		ДобавитьПодчиненный(УзелДок, УзелПодтверждений); // Закрываем узел CONFIRMATIONS  	                                 
//	
//	ДобавитьПодчиненный(РодительскийУзел, УзелДок); // Закрываем узел DOCUMENT  
//	
//КонецПроцедуры //ВыгрузитьПодтвержденияЗаказовПокупателей
//
////****************************************************************************** 
//// Выгрузка дополнительной информации
//// В данной процедуре выгружаются следующие справочники:
//// 		1. Типы цен
////      2. Склады
////      3. Категории документов
////      4. Категории номенклатуры
////      5. Статусы контрагентов
////      6. Категории контрагентов
////      6. Типы торговых точек
////
//Процедура ВыгрузитьДополнительнуюИнформацию(РодительскийУзел)
//	
//	// Выгрузка типов цен 	
//	УзелСправочника = СоздатьУзел("CATALOG"); 	
//	
//	ДобавитьПоле(УзелСправочника, "GUID", "00f1ffe7-e16e-4ff4-9ef1-b8d0c54bdf59"); 		
//	
//	// Передаем команду на очистку справочника перед загрузкой
//	Если флОчищатьСправочникиПередЗагрузкой = 1 Тогда
//		ДобавитьПоле(УзелСправочника, "KILLALL", "1");                	
//	КонецЕсли;	
//	
//	ДобавитьПустойЭлементВXML(УзелСправочника, "GROUPS");// Выгрузка элементов справочника
//	
//	УзелЭлементов = СоздатьУзел("ELEMENTS");   
//	
//	Для Поз = 1 По тзТипыЦен.КоличествоСтрок()  Цикл
//		тзТипыЦен.ПолучитьСтрокуПоНомеру(Поз);
//		СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(тзТипыЦен.ТипЦены);
//		СтруктураПолей.ДобавитьЗначение(тзТипыЦен.ТипЦены.ЦенаВклНДС, "A02");
//		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);   			
//	КонецЦикла;
//	
//
//	ДобавитьПодчиненный(УзелСправочника, УзелЭлементов); // Закрываем узел ELEMENTS  	                                 
//	
//	ДобавитьПодчиненный(РодительскийУзел, УзелСправочника); // Закрываем узел CATALOG  
//		
//	//////////////////////////////////////////////////
//	
//	// Выгрузка складов		
//	СписВыбСкладов = СоздатьОбъект("СписокЗначений");
//
//	Если ВыбСклад.Выбран() = 1 Тогда		
//		Спр = СоздатьОбъект("Справочник.Склады");
//		Стр = СокрЛП(ВыбСклад.Склады)+",";
//		Если Стр<>"," Тогда
//			Пока Стр<>"" Цикл
//				Поз  = Найти(Стр,",");
//				Код1 = Лев(Стр,Поз-1);
//				Стр  = Прав(Стр,СтрДлина(Стр)-Поз);
//				Спр.НайтиПоКоду(Код1);
//				Если Спр.Выбран() = 0 Тогда
//					ОповеститьОСобытии("При выгрузке справочника ""Список складов"" произошла ошибка: " +
//									   "перезаполните элемент справочника с наименованием" + СокрЛП(ВыбСклад.Наименование) + "!", "!!!", 1, ВыбСклад);
//				Иначе    					
//					СпрИнфо = ПолучитьСправочныеДанные(Спр);
//					Если СпрИнфо.Выбран() = 0 Тогда
//						СпрИнфо = ЗаписатьСправочныеДанные(Спр);
//					КонецЕсли;
//					
//					Если ПустоеЗначение(СпрИнфо.Идентификатор) = 1 Тогда
//						Продолжить;
//					КонецЕсли;
//				
//					СписВыбСкладов.ДобавитьЗначение(Спр.ТекущийЭлемент());
//				КонецЕсли;
//			КонецЦикла;
//		КонецЕсли;		
//	КонецЕсли;
//	
//	ВыгрузитьПростойСправочник("2516ffce-f46f-4326-be00-438ef0871d30", "Склады", РодительскийУзел, СписВыбСкладов);   
//	
//	//////////////////////////////////////////////////
//	
//	// Выгрузка категорий документов	
//	ВыгрузитьПростойСправочник("f997f837-8721-4896-8fe8-3497c6c38206", "кпкКатегорииДокументов", РодительскийУзел);
//    //////////////////////////////////////////////////
//	                                       
//	// Выгрузка категорий номенклатуры	
//	Если ПустоеЗначение(Константа.ВидСвойстваНоменклатуры) = 0  Тогда  				
//		ВыгрузитьПростойСправочник("41598c02-f788-48a7-a039-645ef74bd57f", "ЗначенияСвойств", РодительскийУзел, 0, Константа.ВидСвойстваНоменклатуры);
//	КонецЕсли;
//	
//    //////////////////////////////////////////////////
//	
//	// Выгрузка статусов контрагентов		
//	УзелСправочника = СоздатьУзел("CATALOG"); 	
//	
//	ДобавитьПоле(УзелСправочника, "GUID", "74046d94-b25d-4f3a-b553-27b7fdd3c60c"); 		
//	
//	// Передаем команду на очистку справочника перед загрузкой
//	Если флОчищатьСправочникиПередЗагрузкой = 1 Тогда
//		ДобавитьПоле(УзелСправочника, "KILLALL", "1");                	
//	КонецЕсли;	
//	
//	ДобавитьПустойЭлементВXML(УзелСправочника, "GROUPS");// Выгрузка элементов справочника
//	
//	УзелЭлементов = СоздатьУзел("ELEMENTS");   
//	    
//	Спр = СоздатьОбъект("Справочник.кпкСтатусыКонтрагентов");
//	 
//	Спр.ВыбратьЭлементы();
//	Пока Спр.ПолучитьЭлемент() = 1 Цикл	
//		Если Спр.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;
//		СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Спр);
//		СтруктураПолей.ДобавитьЗначение(Спр.Предупреждение, "A02");
//		ЗаписатьЭлементВДокументОбмена(УзелЭлементов, СтруктураПолей);   			
//	КонецЦикла;
//	
//	ДобавитьПодчиненный(УзелСправочника, УзелЭлементов); // Закрываем узел ELEMENTS  	                                 
//	
//	ДобавитьПодчиненный(РодительскийУзел, УзелСправочника); // Закрываем узел CATALOG  
//
//	//////////////////////////////////////////////////  
//		
//	// Выгрузка категорий торговых точек
//	ВыгрузитьПростойСправочник("c75131a9-f98e-4443-b790-3ada6137440b", "кпкКатегорииТоргТочек", РодительскийУзел);
//	
//	//////////////////////////////////////////////////
//   	
//	// Выгрузка типов торговых точек
//	ВыгрузитьПростойСправочник("edb6b6c0-922f-42d2-8868-cbeb347d8c74", "кпкТипыТоргТочек", РодительскийУзел);
//
//	//////////////////////////////////////////////////
//	
//КонецПроцедуры //ВыгрузитьДополнительнуюИнформацию       
//
////****************************************************************************** 
//Процедура ДобавитьКонстанту(РодительскийУзел, Идентификатор, Значение)   
//	
//	УзелКонстанта = СоздатьУзел("ITEM");
//	
//	ДобавитьПоле(УзелКонстанта, "GUID", Идентификатор); 
//	ДобавитьПоле(УзелКонстанта, "VALUE", Значение);
//			  
//	ДобавитьПодчиненный(РодительскийУзел, УзелКонстанта);
//	
//КонецПроцедуры // ДобавитьКонстанту() 

//****************************************************************************** 
Процедура ВыгрузкаКонстантМТ(РодительскийУзел)
	 	
	УзелКонстант = СоздатьУзел("ELEMENTS");

//	// Общие константы	 
//	
//	// Валюта 
//	ДобавитьКонстанту(УзелКонстант, "d2b5508c-7453-4a52-b803-a846992a485d", СокрЛП(ВалютаАгента));
//
//	// Единица измерения веса                                                                         
//	ДобавитьКонстанту(УзелКонстант, "13af34a5-664d-4aad-a29c-eefc04fefca9", СокрЛП(Константа.ЕдиницаВеса));
//	
//	// Пересчет в базовые единицы измерения                                  
//	ДобавитьКонстанту(УзелКонстант, "0d0b118f-a77d-4a90-adfb-c79e5eb08cdb", Строка(?(РежимЕд = 0, 1, 0)));
//	
//	// Использовать характеристики
//	ДобавитьКонстанту(УзелКонстант, "6e9470db-c618-4bf8-b510-d1e39e2217f6", "0");
//	
//	// Префикс нумерации документов
//	ДобавитьКонстанту(УзелКонстант, "c21ed754-43d4-423d-bdb6-8d2f36b9f8d1", СокрЛП(АгентИнфо.КпкПрефиксНомераДок));
//	
//	// Использовать торговые точки
//	ДобавитьКонстанту(УзелКонстант, "8c52bbbf-8bbb-447d-b18b-06860d372818", Строка(Константа.кпкРежимТоргТочек));	
//	 
//	// Использовать договоры
//	ДобавитьКонстанту(УзелКонстант, "b201164e-e265-4c1d-b3d0-0579bcd1fda6", Строка(Константа.кпкИспользоватьДоговоры));	
//	
//	
//	// Индивидумальные настройки агента
//	
//	Если АгентИнфо.Выбран() = 1 Тогда
//		
//		// Основная фирма
//		ФирмаИнфо = ПолучитьСправочныеДанные(АгентИнфо.Фирма);
//		
//		Если ФирмаИнфо.Выбран() = 0 Тогда
//			ФирмаИнфо = ЗаписатьСправочныеДанные(АгентИнфо.Фирма);
//		КонецЕсли;	 
//		
//		Если (ФирмаИнфо.ПометкаУдаления() = 0) и (ФирмаИнфо.КпкВыгружать = 1) Тогда		
//			ДобавитьКонстанту(УзелКонстант, "13faf2a0-3d1e-469e-bc53-cdada6ac1375", СокрЛП(ФирмаИнфо.Идентификатор));
//		КонецЕсли;	
//		
//		// Основной склад                                        
//		СкладИнфо = ПолучитьСправочныеДанные(АгентИнфо.ОсновнойСклад);
//		Если СкладИнфо.Выбран() = 0 Тогда
//			СкладИнфо = ЗаписатьСправочныеДанные(АгентИнфо.ОсновнойСклад);
//		КонецЕсли;	
//		Если (СкладИнфо.ПометкаУдаления() = 0) и (СкладИнфо.КпкВыгружать = 1) Тогда		
//			ДобавитьКонстанту(УзелКонстант, "86ba5dad-16d0-46b8-9d8d-3eab2cf08685", СокрЛП(СкладИнфо.Идентификатор));		
//		КонецЕсли; 
//		
//		Если ПустаяСтрока(НастройкиАгента) = 0 Тогда    
//			        
//			// Наименование агента
//			ДобавитьКонстанту(УзелКонстант, "a2e1cc68-0624-45a6-8057-efd35259b9fe", СокрЛП(ВыбАгент.Наименование));	 
//			// Идентификатор агента
//			ДобавитьКонстанту(УзелКонстант, "79c698db-3c55-465e-acfe-4741acdd5655", СокрЛП(АгентИнфо.Идентификатор));	 
//			// Идентификатор КПК
//			ДобавитьКонстанту(УзелКонстант, "90c4c934-85a6-449e-a519-d5ae44da667b", СокрЛП(АгентИнфо.кпкМодель.Идентификатор));	 
//			// Разрешить редактирование товаров
//			ДобавитьКонстанту(УзелКонстант, "3abcd996-1632-46f6-8855-cb25759bc304", "0");	 
//			// Разрешить редактирование цен
//			ДобавитьКонстанту(УзелКонстант, "690b5736-e1b9-41ef-a132-807acad31687", НастройкиАгента.РедактироватьЦены);	 
//			// Разрешить создание клиентов
//			ДобавитьКонстанту(УзелКонстант, "73355324-f463-428a-91d2-2868dd35a168", НастройкиАгента.СозданиеКлиентов);	 
//			// Разрешить редактирование клиентов
//			ДобавитьКонстанту(УзелКонстант, "5616d1e9-bfa3-40fc-baba-852d16b5e774", НастройкиАгента.РедактированиеКлиентов);	 
//			// Разрешить создание торговых точек
//			ДобавитьКонстанту(УзелКонстант, "b69ec9a6-565f-4e3e-844f-0060c5975fed", НастройкиАгента.СозданиеТоргТочек);	 
//			// Разрешить редактирование торговых точек
//			ДобавитьКонстанту(УзелКонстант, "f52e3c06-48d6-4809-ae16-13c61e78eabd", НастройкиАгента.РедактированиеТоргТочек);	 
//			// Разрешить создание договоров
//			ДобавитьКонстанту(УзелКонстант, "abc5b73a-f477-406b-89c5-e9aab3b4f1e1", НастройкиАгента.СозданиеДоговоров);	 
//			// Разрешить редактиование договоров
//			ДобавитьКонстанту(УзелКонстант, "36767a2e-4df5-43b5-9813-893bf6f65a7f", НастройкиАгента.РедактированиеДоговоров);	 
//			// Разрешить изменять скидку
//			ДобавитьКонстанту(УзелКонстант, "4a6b2c4c-445b-4985-a509-10fb1a2d57ce", НастройкиАгента.РедактироватьСкидки);	 
//			// Проверять минимальное количество
//			ДобавитьКонстанту(УзелКонстант, "ad21d2f3-5797-49a1-aeeb-ef15dfc671a0", НастройкиАгента.ПроверятьМинКоличество);	 
//			// Не изменять остатки
//			ДобавитьКонстанту(УзелКонстант, "072ec906-bd0b-4b75-afa8-bece1434f1eb", НастройкиАгента.НеИзменятьОстатки);	 
//			// Запретить отрицательные остатки
//			ДобавитьКонстанту(УзелКонстант, "711587ed-1589-4e69-a7f7-09ade3fb5888", НастройкиАгента.РазрешитьОтрицательныеОстатки);	 
//			// Показывать колонку веса
//			ДобавитьКонстанту(УзелКонстант, "0de4a49f-691b-4910-95bf-6f25a281d9e1", НастройкиАгента.ПоказыватьКолонкуВеса);	 
//			// Проверять дату доставки
//			ДобавитьКонстанту(УзелКонстант, "07066b23-0099-43cc-99ab-7edf987fd359", НастройкиАгента.ПроверятьДатуДоставки);	 
//			// Проверять выбор фирмы
//			ДобавитьКонстанту(УзелКонстант, "dc63708b-9257-48dc-9f16-d9846ac7d5fe", НастройкиАгента.ПроверятьВыборФирмы);	 
//			// Проверять выбор клиента
//			ДобавитьКонстанту(УзелКонстант, "b8396958-7d13-4633-a6c3-c8d639cbf9e6", НастройкиАгента.ПроверятьВыборКлиента);	 
//			// Проверять выбор торговой точки
//			ДобавитьКонстанту(УзелКонстант, "f984e263-b838-489e-a1d4-f775db7ede98", НастройкиАгента.ПроверятьВыборТоргТочки);				 			
//			// Проверять выбор договора
//			ДобавитьКонстанту(УзелКонстант, "56649629-21e4-4116-aec6-e794f12c62fe", НастройкиАгента.ПроверятьВыборДоговора);				 			
//			// Редактировать подтвержденные документы
//			ДобавитьКонстанту(УзелКонстант, "8deb5086-fb67-436e-a5f7-5118ce0dc09e", НастройкиАгента.РедактироватьПодтвержденныеДокументы);		 
//			// Скрывать список складов
//			ДобавитьКонстанту(УзелКонстант, "018dd98c-d617-4d35-b5c0-efdabf6b37a2", НастройкиАгента.СкрыватьСписокСкладов); 
//			// Признак отображения кодов товаров
//			ДобавитьКонстанту(УзелКонстант, "d902c64a-9a7a-40d1-8067-e4bb6b309534", НастройкиАгента.ОтображатьКодТовара);			
//			// Склады в табличной части документов
//			ДобавитьКонстанту(УзелКонстант, "63b7d515-ce1d-4f91-b65e-1293495a07e1", НастройкиАгента.ИспользоватьМногоскладскойУчет); 			
//			// Использовать расширенную форму ввода количества
//			ДобавитьКонстанту(УзелКонстант, "619d132f-4a21-4db6-99cb-240f254e218d", НастройкиАгента.РасширеннаяФормаВводаКоличества); 
//			// Сверять сумму оплаты в кассовых документах
//			ДобавитьКонстанту(УзелКонстант, "ef7c73d2-d745-4e04-a5f1-afcbbcb72f05", НастройкиАгента.ПроверятьСуммуКасса);          
//			// Указывать документ-основание в кассовых документах
//			ДобавитьКонстанту(УзелКонстант, "ccd3f25e-a29b-419f-b8a2-d58e380efae2", НастройкиАгента.КассаУказыватьДокументОснование);   			                                                                                                                            
//			// Идентификатор фактического адреса
//			ДобавитьКонстанту(УзелКонстант, "1b3d41b2-eb00-4f25-a476-6a668c5e69f0", ИдФактАдрес); 
//			// Настройка видимости закладок журнала
//			ДобавитьКонстанту(УзелКонстант, "61a474b1-21d0-4047-b2d5-7213a7294050", НастройкиАгента.НастройкаЖурнала);    			
//						
//			// Временно не используемые константы			
//			// Использовать персональные цены
//			//ДобавитьКонстанту(УзелКонстант, "c5b563df-6ff8-4801-b19d-6a8dcb9cb95e", НастройкиАгента.ИспользоватьПерсональныеЦены);				
//			
//			// Работа с маршрутами 
//			ДобавитьКонстанту(УзелКонстант, "99eeeef3-015a-4727-8166-65f2dcceab29", НастройкиАгента.РаботаСМаршрутами); 
//			
//			// Приоритет по маршрутам
//			ДобавитьКонстанту(УзелКонстант, "8e0a70a1-476c-4c7b-a8a7-0c9ce334fc68", НастройкиАгента.ПриоритетПоМаршрутам);			
//			
//		КонецЕсли;                                                                                                                      
//		
//	КонецЕсли;
	
	ДобавитьПодчиненный(РодительскийУзел, УзелКонстант); // Закрываем узел ELEMENTS
	
КонецПроцедуры // ВыгрузкаКонстантМТ  

//****************************************************************************** 
Процедура ИнициализацияСлужебныхДанныхДляМТ()
	
	//ИдФактАдрес 		 = "4D2E41C0-4855-48B1-9E1B-A10505475F20";  
	//ИдЮрАдрес		 	 = "06DC7C8F-D7FF-43DF-90C0-3E0C2027539A";	
	//ИдТелефон 			 = "5154AD2A-DFEA-430D-9581-A1C7314F5E01";    			
	//ИдАдресТТ 			 = "9A36E6D8-52A5-4422-9161-D5C8EA394FE9";		
	//ИдРабочийТелефонКЛ 	 = "92C86952-0130-4369-951D-4FBA945F8BF5";
	//ИдМобильныйТелефонКЛ = "8408F269-2AB6-4539-A2A3-78D480510F97";
	//ИдАдресЭлПочтыКЛ 	 = "44303DB8-241F-443E-9CFD-88992EF8EAA6";  
	//
	//СписокТиповКИ = СоздатьОбъект("СписокЗначений");   
	//
	//СписокТиповКИ.ДобавитьЗначение("a4d0f540-64ed-4f3e-b2bb-818da38f5ab2", "Адрес");
	//СписокТиповКИ.ДобавитьЗначение("52477200-af54-405b-9888-14b8bded0e19", "АдресЭлектроннойПочты");  								    
	//СписокТиповКИ.ДобавитьЗначение("2c2cfc86-e2a0-414d-a116-5acadac53437", "ВебСтраница");
	//СписокТиповКИ.ДобавитьЗначение("e45419b3-0cfd-47ce-8b24-7037a1e86aed", "Другое");
	//СписокТиповКИ.ДобавитьЗначение("8fc8f351-14f0-48eb-952a-38bb313b28d5", "Телефон");     
	//
	СоответствиеСпрЗагр = СоздатьОбъект("СписокЗначений");
	                                                             
	СоответствиеСпрЗагр.ДобавитьЗначение("Контрагенты", 		 "2eb644bd-e697-491a-bb1e-689c83fc2845");	
	СоответствиеСпрЗагр.ДобавитьЗначение("Номенклатура", 		 "3a007c3f-2033-4dac-b703-4deb26e89818");
	СоответствиеСпрЗагр.ДобавитьЗначение("Пользователи", 		 "5e53ebd5-bcd6-4aa4-a70c-cd5b3e67e8a8");	
	СоответствиеСпрЗагр.ДобавитьЗначение("МестаХранения", 		 "827fe44f-b53a-492f-9feb-89e068e9f3c6"); 
	
	СоответствиеДокЗагр = СоздатьОбъект("СписокЗначений");
	                                                             
	СоответствиеДокЗагр.ДобавитьЗначение("Инвентаризация", 		 "6ef7ce16-b211-4ada-bfd2-6161f918f999");	
	СоответствиеДокЗагр.ДобавитьЗначение("РасходнаяНакладная", 	 "d098d773-0b1c-4351-b9e4-5789fe50418f");	
	СоответствиеДокЗагр.ДобавитьЗначение("ПриходнаяНакладная", 	 "f9a73994-c09d-4260-a871-a3679ba0f2d4");	
	//СоответствиеДокЗагр.ДобавитьЗначение("Касса", 			     "749be2e0-9b00-4d7b-9d4d-88ca53327511");
	
КонецПроцедуры //ИнициализацияСлужебныхДанныхДляМТ()

//****************************************************************************** 
Процедура ВыгрузитьДанныеДляМобильнойТорговли()  
    
	м_СпрКпкДок  = СоздатьОбъект("Справочник.КпкДокументы");
//	м_СпрЗапросы = СоздатьОбъект("Справочник.КпкЗапросы");
	м_ДокПоиска  = СоздатьОбъект("Документ");
	м_ДокЗв		 = СоздатьОбъект("Документ.РасходнаяНакладная");	 
	м_ДокИнв	 = СоздатьОбъект("Документ.СличительнаяВедомость");	 
	
	// Получаем список настроек агента			
//	СпрНастройки = СоздатьОбъект("Справочник.кпкНастройкиАгентов");		                     
//	СпрНастройки.ИспользоватьВладельца(АгентИнфо);		
//	Если СпрНастройки.ВыбратьЭлементы(1) = 1 Тогда			
//		Пока СпрНастройки.ПолучитьЭлемент() = 1 Цикл				
//			НастройкиАгента = СпрНастройки.ТекущийЭлемент();
//		КонецЦикла;      			
//	КонецЕсли;    
//
//	Если ПустаяСтрока(НастройкиАгента) = 1 Тогда  
//		ОповеститьОСобытии("Не указаны настройки для агента: " + ВыбАгент + "! Необходимо заполнить список настроек агента " + 
//						   "(кнопка ""Настройки"" на форме элемента справочника ""Агенты"")"); 
//		Возврат;
//		
//	КонецЕсли; 
	
	ТДопКлиенты = СоздатьОбъект("СписокЗначений");
	СписокСклады = СоздатьОбъект("СписокЗначений");
	СписокТоваров = СоздатьОбъект("СписокЗначений");
	
	////Таблица ТДопКлиенты - это список дополинтельных клиентов и их торговых точек вне плана;
	////либо должников, которых, возможно, нет в плане, но долги агент с них должен забрать,
	////либо внеплановых клиентов из маршрутов,
	////либо клиентов, созданных в КПК, которые выгружаются в КПК для подтверждения факта загрузки в ЦБД.
	//ТДопКлиенты = СоздатьОбъект("ТаблицаЗначений"); 
	//ТДопКлиенты.НоваяКолонка("Клиент",    "Справочник");
	//ТДопКлиенты.НоваяКолонка("Должник",   "Число", 1, 0); //признак, что клиент является должником
	//ТДопКлиенты.НоваяКолонка("ТоргТочка", "Справочник");
	//
	////таблица ТДопТовары используется, чтобы учесть при выгрузке прайса товары, выгруженные в 
	////в документах "Перемещение", "Реализация", "Инвентаризация".
	////Используется "таблица значений", а не "список значенй", т.к. 1С 7.7 работает со списками
	////медленней, чем с таблицами
	//ТДопТовары = СоздатьОбъект("ТаблицаЗначений");
	//ТДопТовары.НоваяКолонка("Товар","Справочник"); 
	
	//Результат = СформироватьТаблицуВыгружаемыхТиповЦен();  
	//
	//Если Результат = 0 Тогда
	//    ОповеститьОСобытии("Справочник ""Типы цен"" к выгрузке в КПК не подготовлен! Выгрузка номенклатуры не будет произведена!", "!");		
	//КонецЕсли;	
	                
	ИмяФайлаДанных = ВернутьИмяФайлаВыгрузки();
	
	DOMDocument = СоздатьОбъект("Msxml2.DOMDocument.4.0");
	
	rootNode = DOMDocument.createNode(1, "DATA", "");    
		
	// Константы
	УзелКонстанты = СоздатьУзел("CONSTANTS");
	
	// Выгружаем список констант							
	ОкноСостояние("Выгрузка констант...");			                                                                                                    
	
	ИнициализацияСлужебныхДанныхДляМТ();
    
	ВыгрузкаКонстантМТ(УзелКонстанты);
	
	УзелУдаленияКонстант = СоздатьУзел("KILLEDS");	
	// Внутрь этого тега следует передавать константы, которые
	// необходимо удалить в мобильном устройстве    	
	ДобавитьПодчиненный(УзелКонстанты, УзелУдаленияКонстант); // Закрываем узел KILLEDS      
	
	ДобавитьПодчиненный(rootNode, УзелКонстанты); // Закрываем узел CONSTANT      
	
	ОкноСостояние("Выгрузка подтверждений документов...");					
	ВыгрузитьПодтверждения(rootNode);

	// Выгружаем документы	
	ОкноСостояние("Выгрузка документов...");
	
	УзелДокументов = СоздатьУзел("DOCUMENTS");
   
		// Если нет необходимости выгружать целиком документы, 		
		// то можно включить в выгрузку просто выгрузку подтверждений.
		// В этом случае нужно закомментировать процедуру ВыгрузитьЗаказыПокупателей
		// и оставить только процедуру ВыгрузитьПодтвержденияДокументов()  
	
	ОкноСостояние("Выгрузка инвентаризаций...");
	Сообщить("Выгрузка инвентаризаций...");
//	ВыгрузитьИнвентаризации(УзелДокументов, СписокСклады, СписокТоваров);       

	ОкноСостояние("Выгрузка поступлений (на размещение)...");
	Сообщить("Выгрузка поступлений (на размещение)...");
//	(ВыгрузитьПоступленияУзелДокументов, ТДопКлиенты, СписокСклады, СписокТоваров);		

	ОкноСостояние("Выгрузка реализаций (на отбор)...");
	Сообщить("Выгрузка реализаций (на отбор)...");
//	ВыгрузитьРеализации(УзелДокументов, ТДопКлиенты, СписокСклады, СписокТоваров);		

	ДобавитьПодчиненный(rootNode, УзелДокументов); // Закрываем узел DOCUMENTS   
	
	// Выгружаем справочные данные	
	ОкноСостояние("Выгрузка справочников...");   
	
	УзелСправочников = СоздатьУзел("CATALOGS");
	    	
	//ОкноСостояние("Выгрузка организаций...");	
	//ВыгрузитьОрганизации(УзелСправочников);        
	
	СписокКлиентов = СоздатьОбъект("СписокЗначений"); 
	СписокТТ	   = СоздатьОбъект("СписокЗначений"); 
	СписокКЛ	   = СоздатьОбъект("СписокЗначений");
	       
	ОкноСостояние("Выгрузка пользователей...");		
	Сообщить("Выгрузка пользователей...");		
	ВыгрузитьПользователей(УзелСправочников);		

	ОкноСостояние("Выгрузка складов...");		
	Сообщить("Выгрузка складов...");		
	ВыгрузитьСклады(УзелСправочников, СписокСклады);		

	ОкноСостояние("Выгрузка контрагентов...");		
	Сообщить("Выгрузка контрагентов...");		
//	ВыгрузитьКлиентов(УзелСправочников, ТДопКлиенты);		
        
//		//ОкноСостояние("Выгрузка контактной информации...");
//        //
//		//ВыгрузитьВидыКонтактнойИнформации(УзелСправочников);
//		//ВыгрузитьКонтактнуюИнформацию(УзелСправочников);   	
//		//
	ОкноСостояние("Выгрузка номенклатуры...");			
	Сообщить("Выгрузка номенклатуры...");			
	ВыгрузитьНоменклатуру(УзелСправочников, СписокТоваров);		
		
//+ 2013.04.02
	ОкноСостояние("Выгрузка единиц измерения...");			
	Сообщить("Выгрузка единиц измерения...");			
	ВыгрузитьЕдиницыИзмерения(УзелСправочников, СписокТоваров);		

	ОкноСостояние("Выгрузка штрихкодов...");			
	Сообщить("Выгрузка штрихкодов...");			
	ВыгрузитьШтрихКоды(УзелСправочников, СписокТоваров);		
//- 2013.04.02
	
//		//ОкноСостояние("Выгрузка дополнительной информации...");		
//		//ВыгрузитьДополнительнуюИнформацию(УзелСправочников);

	ДобавитьПодчиненный(rootNode, УзелСправочников); // Закрываем узел CATALOGS   
	
	///////////////////////////////////////////////////////////////////////
    
	DOMDocument.appendChild(rootNode);
	DOMDocument.save(ИмяФайлаДанных);
	
	ИмяФайла = ИмяФайлаДанных;
	
	Состояние("");
		
КонецПроцедуры //ВыгрузитьДанныеДляКПК
 
////******************************************************************************   
//Процедура ВыгрузитьПодтвержденияДокументов(РодительскийУзел)
//	
//   	УзелДокументов = СоздатьУзел("DOCUMENTS");   		
//   	
//	ВыгрузитьПодтвержденияЗаказовПокупателей(УзелДокументов);
//   	
//	ДобавитьПодчиненный(РодительскийУзел, УзелДокументов); // Закрываем узел DOCUMENTS      
//	
//КонецПроцедуры //ВыгрузитьПодтвержденияДокументов 
//
////******************************************************************************   
//Процедура ВыгрузитьПодтвержденияСправочников(РодительскийУзел)    
//	
//	Спр = СоздатьОбъект("Справочник.кпкСправочники");
//	
//	ДатаП1 = ТекущаяДата() - Константа.кпкИнтервалПодтверждений;
//	ДатаП2 = ТекущаяДата();       
//	
//	Таб = СоздатьОбъект("ТаблицаЗначений"); 
//	Таб.НоваяКолонка("ВидСпр"); 
//	Таб.НоваяКолонка("ЭлементСпр");
//	
//	Для День = ДатаП1 По ДатаП2 Цикл
//		
//		Спр.ВыбратьЭлементыПоРеквизиту("ДатаСобытия", День, 0, 0);
//		
//		Пока Спр.ПолучитьЭлемент() = 1 Цикл
//			
//			Если Спр.Агент <> ВыбАгент Тогда		
//				Продолжить;
//			КонецЕсли;
//			
//		    ЭлемСпр = Спр.ЭлементСпр;
//			Если ЭлемСпр.Выбран() = 0 Тогда
//			    Продолжить;
//			КонецЕсли;	
//			                                
//			Поз = 0;
//			
//			Если Таб.НайтиЗначение(ЭлемСпр, Поз, "ЭлементСпр") = 1 Тогда Продолжить; КонецЕсли;
//			          
//			Таб.НоваяСтрока();
//			Таб.ВидСпр 	   = ЭлемСпр.Вид(); 
//			Таб.ЭлементСпр = ЭлемСпр;
//			
//			Таб.Сортировать("ВидСпр"); 
//			
//		КонецЦикла;
//		
//	КонецЦикла;        
//	
//	//Таб.ВыбратьСтроку();
//	
//	Таб.ВыбратьСтроки();
//		
//	ПредСпр = ""; 
//	
//	ЗакрытьТеги = 0;   
//	
//	УзелСправочников = СоздатьУзел("CATALOGS");
//	
//	УзелСпр = 0; 
//	УзелПодтверждений = 0;
//	
//	Пока Таб.ПолучитьСтроку() = 1 Цикл   
//		
//		НайдПоз = СоответствиеСпрЗагр.НайтиЗначение(Таб.ВидСпр); 
//		
//		Если НайдПоз = 0 Тогда Продолжить; КонецЕсли;		     
//		
//		ИдСпр = "";
//		
//		СоответствиеСпрЗагр.ПолучитьЗначение(НайдПоз, ИдСпр); 
//		
//		Если ПредСпр <> Таб.ВидСпр Тогда                
//			
//			Если ПредСпр <> "" Тогда 
//				
//				ЗакрытьТеги = 0;
//				
//				ДобавитьПодчиненный(УзелСпр, УзелПодтверждений); // Закрываем узел CONFIRMATIONS  	    
//				
//				ДобавитьПодчиненный(УзелСправочников, УзелСпр); // Закрываем узел CATALOG  	    
//				
//			КонецЕсли;  
//			
//			УзелСпр = СоздатьУзел("CATALOG");
//			
//			ДобавитьПоле(УзелСпр, "GUID", ИдСпр);						
//			
//			УзелПодтверждений = СоздатьУзел("CONFIRMATIONS");
//			
//			ЗакрытьТеги = 1;			
//		
//		КонецЕсли;			
//		
//		СтруктураПолей = СоздатьОбъект("СписокЗначений");
//		СтруктураПолей.ДобавитьЗначение(Таб.ЭлементСпр, "GUID");
//		ЗаписатьЭлементВДокументОбмена(УзелПодтверждений, СтруктураПолей);
//				
//		ПредСпр = Таб.ВидСпр;
//		
//	КонецЦикла; 	
//	
//	// Нужно закрыть открытые теги, если не было смены дней
//	Если ЗакрытьТеги = 1 Тогда
//		
//		ДобавитьПодчиненный(УзелСпр, УзелПодтверждений); // Закрываем узел CONFIRMATIONS  	    
//				
//		ДобавитьПодчиненный(УзелСправочников, УзелСпр); // Закрываем узел CATALOG  	    
//		
//	КонецЕсли;   
//	
//	ДобавитьПодчиненный(РодительскийУзел, УзелСправочников); // Закрываем узел CATALOGS       	
//		
//КонецПроцедуры //ВыгрузитьПодтвержденияСправочников  
                                                    
//****************************************************************************** 
Процедура ВыгрузитьПодтверждения(РодительскийУзел, ЗаписатьОбъявление = 0) 
	
	//Если ЗаписатьОбъявление = 1 Тогда
	//	
	//	ИмяФайлаДанных = ВернутьИмяФайлаВыгрузки();
	//
	//	DOMDocument = СоздатьОбъект("Msxml2.DOMDocument.4.0");
	//
	//	rootNode = DOMDocument.createNode(1, "DATA", "");    
	//	
	//	ВыгрузитьПодтвержденияДокументов(rootNode); 
	//	
	//	ВыгрузитьПодтвержденияСправочников(rootNode);
	//			 		
	//	DOMDocument.appendChild(rootNode);
	//	DOMDocument.save(ИмяФайлаДанных);  
	//	
	//	ИмяФайла = ИмяФайлаДанных;
	//
	//Иначе 
	//	
	//	ВыгрузитьПодтвержденияДокументов(РодительскийУзел); 
	//
	//	ВыгрузитьПодтвержденияСправочников(РодительскийУзел);
	//	
	//КонецЕсли;
	
КонецПроцедуры //ВыгрузитьПодтвержденияДокументов
			
////****************************************************************************** 
//// Процедуры загрузки данных
//****************************************************************************** 

Функция ПолучитьОбъектПоИдентификатору(ИмяСпр, Ид)        	                                         
	
	лИмяСпр = ИмяСпр;
	
	Спр = СоздатьОбъект("Справочник." + ИмяСпр);
	
	пЗначение = ПолучитьПустоеЗначение("Справочник." + ИмяСпр);
	
	Если (Найти(ИмяСпр, "кпк") > 0) и (Метаданные.Справочник(ИмяСпр).Реквизит("Идентификатор").Выбран() = 1) Тогда   			
		Если Спр.НайтиПоРеквизиту("Идентификатор", Ид, 1) = 1 Тогда
			Если Метаданные.Справочник(Спр.Вид()).Реквизит("Ссылка").Выбран() = 1  Тогда		
				Ссылка = Спр.ТекущийЭлемент().Ссылка;			
				ТекЭлемент = Спр.НайтиЭлемент(Ссылка);
				Возврат ТекЭлемент;                      			
			Иначе                                                   
				Возврат Спр.ТекущийЭлемент();                      			
			КонецЕсли;				
		Иначе    
			Возврат пЗначение;
		КонецЕсли;                               		
	Иначе                                        	
		ПолноеИмяСпрКпк = "Справочник.кпк" + Спр.Вид();			
		лИмяСпр = "кпк" + Спр.Вид();              		
	КонецЕсли;   
	
	Если Метаданные.Справочник(лИмяСпр).Выбран() = 0 Тогда  				
		СпрИнфо = СоздатьОбъект("Справочник.кпкИдентификаторыОбъектов");         	    
	Иначе                                                                        				
		СпрИнфо = СоздатьОбъект(ПолноеИмяСпрКпк);    		                     		
	КонецЕсли;  
	
	Если Метаданные.Справочник(СпрИнфо.Вид()).Реквизит("Ссылка").Выбран() = 1  Тогда		
		Если Метаданные.Справочник(СпрИнфо.Вид()).Реквизит("Идентификатор").Выбран() = 1  Тогда							
			Если СпрИнфо.НайтиПоРеквизиту("Идентификатор", Ид, 1) = 1 Тогда
				Если Спр.НайтиЭлемент(СпрИнфо.Ссылка) = 1 Тогда				
					Возврат Спр.ТекущийЭлемент();				
				КонецЕсли;				
			КонецЕсли;     
		КонецЕсли;  		
	КонецЕсли; 
	
	Возврат пЗначение;   	

КонецФункции //ПолучитьОбъектПоИдентификатору  
//
////****************************************************************************** 
//Процедура УстановитьИдентификаторОбъекта(Спр, ИдОбъекта)	
//	
//	ИмяСпр = Спр.Вид();
//	
//	ТекЭлемент = Спр.ТекущийЭлемент();
//	
//	СпрИнфо = СоздатьОбъект("Справочник." + ИмяСпр);  
//	
//	ПолноеИмяСпрКпк = "Справочник." + Спр.Вид();			
//	лИмяСпр = ИмяСпр;              		
//	
//	Если (Найти(ИмяСпр, "кпк") > 0) и (Метаданные.Справочник(ИмяСпр).Реквизит("Идентификатор").Выбран() = 1) Тогда   							
//		
//		Если СпрИнфо.НайтиЭлемент(ТекЭлемент) = 1 Тогда  			
//			СпрИнфо.Идентификатор = ИдОбъекта; 
//		Иначе              
//			СпрИнфо.Новый();
//			СпрИнфо.Идентификатор = ИдОбъекта; 			
//		КонецЕсли;	
//		
//		Если Метаданные.Справочник(СпрИнфо.Вид()).Реквизит("Ссылка").Выбран() = 1  Тогда					
//			СпрИнфо.Ссылка 		  = ТекЭлемент;
//		КонецЕсли;
//		
//		ВыполнитьОперациюДляОбъекта(СпрИнфо, "запись");		
//	Иначе                                        	
//		ПолноеИмяСпрКпк = "Справочник.кпк" + Спр.Вид();			
//		лИмяСпр = "кпк" + Спр.Вид();              		
//	КонецЕсли;   
//	
//	Если Метаданные.Справочник(лИмяСпр).Выбран() = 0 Тогда  				
//		СпрИнфо = СоздатьОбъект("Справочник.кпкИдентификаторыОбъектов");         	    
//	Иначе                                                                        				
//		СпрИнфо = СоздатьОбъект(ПолноеИмяСпрКпк);    		                     		
//	КонецЕсли;  
//	
//	Если Метаданные.Справочник(СпрИнфо.Вид()).Реквизит("Ссылка").Выбран() = 1  Тогда		
//		Если Метаданные.Справочник(СпрИнфо.Вид()).Реквизит("Идентификатор").Выбран() = 1  Тогда							
//			Если СпрИнфо.НайтиЭлемент(ТекЭлемент) = 1 Тогда				
//				СпрИнфо.Идентификатор = ИдОбъекта;
//			Иначе                                 
//				СпрИнфо.Новый();
//				СпрИнфо.Идентификатор = ИдОбъекта; 
//				СпрИнфо.Ссылка 		  = ТекЭлемент;				
//			КонецЕсли;			                   
//			
//			ВыполнитьОперациюДляОбъекта(СпрИнфо, "запись");		
//		КонецЕсли;  		
//	КонецЕсли; 
//	
//КонецПроцедуры //УстановитьИдентификаторОбъекта  
//
//****************************************************************************** 
Процедура ЗагрузитьСправочники(Эл, ИмяСпр)
//	
//	Спр = СоздатьОбъект("Справочник." + ИмяСпр);
//	
//	ВыборкаЭлементов = Эл.ВыбратьУзел("ELEMENTS");
//	
//	Если ПустоеЗначение(ВыборкаЭлементов) = 0 Тогда            
//		
//		Элементы = ВыборкаЭлементов.ВыбратьУзлы("ITEM");
//		
//		Для Сч = 0 По Элементы.КоличествоУзлов() - 1 Цикл
//			
//			Эл = Элементы.ПолучитьУзел(Сч);  
//			
//			ИдОбъекта = Эл.ПолучитьАтрибут("GUID");
//			
//			СсылкаОбъекта = ПолучитьОбъектПоИдентификатору(ИмяСпр, ИдОбъекта);
//			
//			ЭтоНовый = ПустоеЗначение(СсылкаОбъекта);
//			
//			Если ЭтоНовый = 1 Тогда							
//				Спр.Новый();   								
//			Иначе				
//				Если Спр.НайтиЭлемент(СсылкаОбъекта) = 0 Тогда Продолжить; КонецЕсли;
//			КонецЕсли; 
//			
//			// Загрузка спаравочника "Контрагенты"
//			Если ИмяСпр = "Контрагенты" Тогда
//				
//				ПометкаУдаления = Число(Эл.ПолучитьАтрибут("IsDeleted"));												
//				Наименование 	= Эл.ПолучитьАтрибут("Name");  				
//				ИдРодителя 		= Эл.ПолучитьАтрибут("GrpId0");			
//				Скидка 			= Число(Эл.ПолучитьАтрибут("A05"));   
//				ИдСтатуса 		= Эл.ПолучитьАтрибут("A06");  
//				ИдДоговора 		= Эл.ПолучитьАтрибут("A08"); 
//				
//				Спр.Наименование = Наименование;
//				
//				Если ВыполнитьОперациюДляОбъекта(Спр, "запись") = 0 Тогда 						
//					Продолжить;			
//				КонецЕсли;	
//				
//				Спр.Родитель 		= ПолучитьОбъектПоИдентификатору("Контрагенты", ИдРодителя);  
//				Спр.ОсновнойДоговор = ПолучитьОбъектПоИдентификатору("Договоры", ИдДоговора);   
//				
//				СпрДог = СоздатьОбъект("Справочник.Договоры");
//				Если СпрДог.НайтиЭлемент(Спр.ОсновнойДоговор) = 1 Тогда
//					Если Скидка<>0 Тогда 						
//						Скидка = ВернутьСкидку(Скидка);
//						Если ПустоеЗначение(Скидка) = 1 Тогда
//							ОповеститьОСобытии("Для контрагента " + Спр.Наименование + "указана скидка " + 
//							Строка(Скидка) + "%, отсутствующая в справочнике ""Скидки""!", "!");
//						Иначе
//							СпрДог.Скидка = Скидка;
//						КонецЕсли;             
//					КонецЕсли;                 
//				КонецЕсли;   
//				
//				Если ВыполнитьОперациюДляОбъекта(Спр, "запись") = 0 Тогда 						
//					Продолжить;			
//				КонецЕсли;
//				
//				Если ПометкаУдаления = 1 Тогда
//					Спр.Удалить(0);				
//				КонецЕсли;
//				
//				КлиентИнфо = ПолучитьСправочныеДанные(Спр);
//				Если КлиентИнфо.Выбран() = 0 Тогда
//					КлиентИнфо = ЗаписатьСправочныеДанные(Спр);
//				КонецЕсли;  
//				
//				СпрИнфо = СоздатьОбъект("Справочник.кпкКонтрагенты");  
//				
//				Если СпрИнфо.НайтиЭлемент(КлиентИнфо) = 1 Тогда			
//					СпрИнфо.Статус = ПолучитьОбъектПоИдентификатору("кпкСтатусыКонтрагентов", ИдСтатуса);
//					ВыполнитьОперациюДляОбъекта(СпрИнфо, "запись");
//				КонецЕсли; 					
//				
//				// Загрузка спаравочника "Договоры"					
//			ИначеЕсли ИмяСпр = "Договоры" Тогда      
//				
//				ПометкаУдаления = Эл.ПолучитьАтрибут("IsDeleted");												
//				Наименование 	= Эл.ПолучитьАтрибут("Name");  				
//				ИдКонтрагента 	= Эл.ПолучитьАтрибут("A02");			
//				ИдТипаЦены 		= Эл.ПолучитьАтрибут("A06"); 
//				//ДатаЗаключения 	= ДатаВремяXMLВФормат1С(Эл.ПолучитьАтрибут("A03"));   
//				//СрокДействия 		= ДатаВремяXMLВФормат1С(Эл.ПолучитьАтрибут("A04")); 
//				//ИдОрганизации 	= Эл.ПолучитьАтрибут("A05"); 				
//				
//				Владелец = ПолучитьОбъектПоИдентификатору("Контрагенты", ИдКонтрагента);
//				Если ПустоеЗначение(Владелец) = 1 Тогда Продолжить;	КонецЕсли;
//				                                 
//				Спр.Владелец 	 = Владелец;
//				Спр.Наименование = Наименование; 				
//				Спр.ТипЦен 	 	 = ПолучитьОбъектПоИдентификатору("ТипыЦен", ИдТипаЦены);
//				
//				Если ЭтоНовый = 1 Тогда          
//					Спр.ВалютаВзаиморасчетов = глЗначениеПоУмолчанию("ОсновнаяВалютаВзаиморасчетов");					
//				КонецЕсли;           
//				
//				Если ВыполнитьОперациюДляОбъекта(Спр, "запись") = 0 Тогда 						
//					Продолжить;			
//				КонецЕсли;
//				
//				Если ПометкаУдаления = 1 Тогда
//					Спр.Удалить(0);				
//				КонецЕсли;
//				
//			// Загрузка спаравочника "Торговые точки"					
//			ИначеЕсли ИмяСпр = "кпкТорговыеТочки" Тогда   
//				
//				ПометкаУдаления = Эл.ПолучитьАтрибут("IsDeleted");												
//				Наименование 	= Эл.ПолучитьАтрибут("Name");  				
//				ИдКонтрагента 	= Эл.ПолучитьАтрибут("A02");			
//				ИдКатегории		= Эл.ПолучитьАтрибут("A05");  
//				ИдТипТоргТочки	= Эл.ПолучитьАтрибут("A06");  
//				Комментарий 	= Эл.ПолучитьАтрибут("A07"); 
//				
//				Владелец = ПолучитьОбъектПоИдентификатору("Контрагенты", ИдКонтрагента);
//				Если ПустоеЗначение(Владелец) = 1 Тогда Продолжить;	КонецЕсли;
//				                                 
//				Спр.Владелец 	     = Владелец;
//				Спр.Наименование 	 = Наименование; 				
//				Спр.ПолнНаименование = Наименование; 
//				
//				Если ЭтоНовый = 1 Тогда					
//					Спр.АгентАвтор = ВыбАгент;					
//				КонецЕсли;                                                                      
//				
//				Спр.ТипТочки 	= ПолучитьОбъектПоИдентификатору("кпкТипыТоргТочек", ИдТипТоргТочки); 
//				Спр.Категория 	= ПолучитьОбъектПоИдентификатору("кпкКатегорииТоргТочек", ИдКатегории); 
//				
//				Если ВыполнитьОперациюДляОбъекта(Спр, "запись") = 0 Тогда 						
//					Продолжить;			
//				КонецЕсли;    
//				
//				Если ПометкаУдаления = 1 Тогда
//					Спр.Удалить(0);				
//				КонецЕсли;
//			
//			// Загрузка справочника "Контактные лица"					
//			ИначеЕсли ИмяСпр = "кпкКонтактныеЛица" Тогда   
//				
//				ПометкаУдаления = Эл.ПолучитьАтрибут("IsDeleted");												
//				Наименование 	= Эл.ПолучитьАтрибут("Name");  				
//				ДатаРождения 	= ДатаВремяXMLВФормат1С(Эл.ПолучитьАтрибут("A02"));			
//				ИдКонтрагента	= Эл.ПолучитьАтрибут("A03");  
//				ИдТоргТочки		= Эл.ПолучитьАтрибут("A04");  
//				Комментарий 	= Эл.ПолучитьАтрибут("A05"); 
//				
//				Владелец = ПолучитьОбъектПоИдентификатору("кпкТорговыеТочки", ИдТоргТочки);
//				
//				Если ПустоеЗначение(Владелец) = 1 Тогда Продолжить;	КонецЕсли;
//				
//				Спр.Наименование 	 = Наименование;  				
//				Спр.Владелец 	 	 = Владелец;				
//				Спр.ДатаРождения 	 = ДатаРождения; 				
//				
//				Если ВыполнитьОперациюДляОбъекта(Спр, "запись") = 0 Тогда 						
//					Продолжить;			
//				КонецЕсли;
//				
//			КонецЕсли;
//			
//			Рез = ЗаписатьВПротоколЗагрузкуЭлемСпр(Спр, "", 0, ЭтоНовый);			
//			
//			Если ЭтоНовый = 1 Тогда							
//				УстановитьИдентификаторОбъекта(Спр, ИдОбъекта); 
//			КонецЕсли;
//			
//		КонецЦикла;       
//		
//	КонецЕсли;
			
КонецПроцедуры //ЗагрузитьСправочники  


//******************************************************************************  
Функция ЗагрузитьДокументИнвентаризация(Эл, ИмяДок) 
	
	Док = м_ДокИнв;
	
	Проведен = Число(Эл.ПолучитьАтрибут("IsPost"));					
	ДатаДок  = ДатаВремяXMLВФормат1С(Эл.ПолучитьАтрибут("dt"));
	НомерДок = СокрЛП(Эл.ПолучитьАтрибут("DocNumber"));
	ВидДок 	 = Док.Вид();
	                                            
	ГруппаТоваров 		= Эл.ПолучитьАтрибут("A01");      
	КоличествоСтрокФакт = Эл.ПолучитьАтрибут("A02");      
	КоличествоСтрокПлан = Эл.ПолучитьАтрибут("A03");      
	ОтклонениеСтрок		= Эл.ПолучитьАтрибут("A05");      
	СтатусИнв		    = Эл.ПолучитьАтрибут("A06");      
	//ИдФирмы 	  = Эл.ПолучитьАтрибут("A02");      
	//ИдКонтрагента = Эл.ПолучитьАтрибут("A03");      
	//ИдТоргТочки   = Эл.ПолучитьАтрибут("A04");      
	//ИдДоговора    = Эл.ПолучитьАтрибут("A05");      	
	//СкидкаДок     = Число(Эл.ПолучитьАтрибут("A06"));          
	//ИдТипЦены     = Эл.ПолучитьАтрибут("A07");     
	//СуммаДок	  = Число(Эл.ПолучитьАтрибут("A08"));
	//ДатаДоставки  = ДатаВремяXMLВФормат1С(Эл.ПолучитьАтрибут("A010"));
	//Комментарий   = Эл.ПолучитьАтрибут("A011");
	//ИдКатегории   = Эл.ПолучитьАтрибут("A012"); 
//
//	ТипЦены	= ПолучитьОбъектПоИдентификатору("ТипыЦен", ИдТипЦены);
//	
//	РежимЗагрузки = Константа.кпкРежимЗагрузкиЗаявок;
//	// 1 - загружать в док. "Заявка";
//	// 2 - загружать в док. "Реализация";
//	// 3 - создавать на основании "Заявки" док. "Реализация"
//	
//	ПередвижнойСклад = АгентИнфо.ПередвижнойСклад;
//	
//	Если РежимЗагрузки = 2 Тогда           
//		Если XMLЗагрузкаРеализации(Эл, ПередвижнойСклад, 1) = 1 Тогда 				
//			Возврат 1;
//		Иначе
//			Возврат 0;
//		КонецЕсли;
//	Иначе
	//	Док = м_ДокЗв;          			
	//КонецЕсли;       	                                     
		
	ПредставлениеДокВКПК = "Инвентаризация"; 
	Идентификатор = ""; 
	DocState = 0;
	 
	Если XMLИнициализацияДок(Эл, Док, ПредставлениеДокВКПК, Идентификатор, DocState) = 0 Тогда
	    Возврат 0;
	КонецЕсли; 
	
	Найден = Док.Выбран();
	   
	//Если АгентИнфо.ОсновнойСклад.Выбран()= 1 Тогда
	//	Док.МестоНахождения = АгентИнфо.ОсновнойСклад;	    		
	//Иначе
	//	ОповеститьОСобытии("У агента " + ВыбАгент + " не указан основной склад. Для документа " + 
	//			 		   ПредставлениеДокВКПК + " не будет заполнено значение склада!", "!", 1, Док);
	//КонецЕсли;
	
	ВыборкаТабЧастей = Эл.ВыбратьУзел("TABLES");
	
	Если ПустоеЗначение(ВыборкаТабЧастей) = 0 Тогда  
		
		ВыбТЧ = ВыборкаТабЧастей.ВыбратьУзлы("TABLE");
		
		Для Сч = 0 По ВыбТЧ.КоличествоУзлов() - 1 Цикл
			
			ЭлТабЧастей = ВыбТЧ.ПолучитьУзел(Сч);  
			
			ИдТЧ = ЭлТабЧастей.ПолучитьАтрибут("GUID");
			
			// Загружаем табличную часть товаров
			Если ИдТЧ = "AD55D5A6-CA4E-4208-9465-4CC8B41B92FB" Тогда 								
				
				Элементы = ЭлТабЧастей.ВыбратьУзлы("ITEM");
				
				Для Сч = 0 По Элементы.КоличествоУзлов() - 1 Цикл
					
					ЭлТЧ = Элементы.ПолучитьУзел(Сч);  
					
					ИдОбъекта = ЭлТЧ.ПолучитьАтрибут("GUID"); 					
					
					ИдНоменклатуры   			= ЭлТЧ.ПолучитьАтрибут("A01");					
					АдресРазмещения  			= ЭлТЧ.ПолучитьАтрибут("A02");					
					Количество		 			= Число(ЭлТЧ.ПолучитьАтрибут("A03"));
					КоличествоФакт	 			= Число(ЭлТЧ.ПолучитьАтрибут("A04"));
					НаименованиеЕдиницыИзм	 	= ЭлТЧ.ПолучитьАтрибут("A05");

					Отклонение		 			= Число(ЭлТЧ.ПолучитьАтрибут("A06"));
					Код				 			= Число(ЭлТЧ.ПолучитьАтрибут("A07"));
					СтрокаИзменена	 			= Число(ЭлТЧ.ПолучитьАтрибут("A08"));
					
					Если (ПустоеЗначение(НаименованиеЕдиницыИзм) = 1) и (ПустоеЗначение(Код) = 0) Тогда
					    НоваяСтрока = 1;
					КонецЕсли;
					Номенклатура 	= ПолучитьОбъектПоИдентификатору("Номенклатура", ИдНоменклатуры);  
					//Единица			= ПолучитьОбъектПоИдентификатору("Единицы", 	 ИдЕдиницыИзм);  
					Если НоваяСтрока = 1 Тогда
						Док.НоваяСтрока();
						СпрЗапасы = СоздатьОбъект("Справочник.Номенклатура"); 
						Если СпрЗапасы.НайтиПоКоду(Код,0) = 1 Тогда
							Док.Запас			= СпрЗапасы.ТекущийЭлемент(); 
							Док.Родитель		= СпрЗапасы.Родитель;
							//Док.СрокГодности	= СпрЗапасы.СрокГодности;
							//Док.СтрокаДобавлена = 1;
							Если ПустоеЗначение(АдресРазмещения) = 0 Тогда
								Док.пкАдрес			= АдресРазмещения;
							Иначе
//								Док.пкАдрес			= глПолучитьАдресИзСправочникаМеста(Док.Запас,Док.ДатаДок);
							КонецЕсли;
							//Док.МестоНахожденияСтрПосле = глПолучитьСкладПоАдресу(Док.АдресДо);
							Цена 					= Док.Запас.ЦенаУровня4.Получить(Док.ДатаДок);
							Док.ИнвКоличество 		= КоличествоФакт;	
							//Док.Стоимость 			= ;	
							Док.пкСтрокаИзменена	= СтрокаИзменена;
							//ДокументИнвентаризацияПриИзмененииКоличествоФакт(Док); 
						Иначе
							Сообщить("Ошибка! Не найден товар по коду: "+Код,"!!!");
							Продолжить;
						КонецЕсли;
					ИначеЕсли ПустоеЗначение(Номенклатура) = 1 Тогда
						ОповеститьОСобытии("Не удалось найти товар с идентификатором " + ИдНоменклатуры, "!!!"); 
						Сообщить("ЗагрузитьДокументИнвентаризация - нужно добавить процедуру поиска запаса");
						Док.НоваяСтрока();
						Док.ИнвКоличество 	 	= КоличествоФакт;		
						Док.пкСтрокаИзменена	= СтрокаИзменена;
					Иначе
						Док.ВыбратьСтроки();
						Пока Док.ПолучитьСтроку() = 1 Цикл
							Если Док.Товар	= Номенклатура Тогда     //!!! не должно быть одинаковых товаров в одно ТЧ
								Если Док.пкАдрес <> АдресРазмещения Тогда 			// поменялся адрес
									Док.пкАдрес = АдресРазмещения;
								КонецЕсли;
								Если Док.ИнвКоличество <> КоличествоФакт Тогда  	// поменялось количество
									Док.ИнвКоличество 	 	= КоличествоФакт;		
								//	ДокументИнвентаризацияПриИзмененииКоличествоФакт(Док);  
								КонецЕсли;
								Док.пкСтрокаИзменена	= СтрокаИзменена;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;	
				
				// Пересчитывает сумму в валюте взаиморасчетов.
				//ПересчетСуммыВзаиморасчетов(Док); 										
				
			КонецЕсли;			
			
		КонецЦикла;				
		
	КонецЕсли;  
	
	//Если РежимЗагрузки = 3 Тогда
	//	Если ЗаписьДокумента(Док, Идентификатор, Проведен, Эл) = 1 Тогда		
	//		Возврат СоздатьРеализациюНаОснованииЗаявки(Док);				
	//	Иначе
	//		Возврат 0;
	//	КонецЕсли;
	//Иначе		
		Возврат ЗаписьДокумента(Док, Идентификатор, Проведен, Эл);
	//КонецЕсли;
	
КонецФункции // ЗагрузитьДокументИнвентаризация

//******************************************************************************  
Функция ЗагрузитьДокументРеализация(Эл, ИмяДок) 
	
	Док = м_ДокРН;
	
	Проведен = Число(Эл.ПолучитьАтрибут("IsPost"));					
	ДатаДок  = ДатаВремяXMLВФормат1С(Эл.ПолучитьАтрибут("dt"));
	НомерДок = СокрЛП(Эл.ПолучитьАтрибут("DocNumber"));
	ВидДок 	 = Док.Вид();
	                                            
	ИдКлиент		= Эл.ПолучитьАтрибут("A01");      
	ИдСклад 		= Эл.ПолучитьАтрибут("A02");      
	КоличествоСтрок = Эл.ПолучитьАтрибут("A03");      
	Вес				= Эл.ПолучитьАтрибут("A05");      
	Комментарий		= Эл.ПолучитьАтрибут("A06");      
	//ИдФирмы 	  = Эл.ПолучитьАтрибут("A02");      
	//ИдКонтрагента = Эл.ПолучитьАтрибут("A03");      
	//ИдТоргТочки   = Эл.ПолучитьАтрибут("A04");      
	//ИдДоговора    = Эл.ПолучитьАтрибут("A05");      	
	//СкидкаДок     = Число(Эл.ПолучитьАтрибут("A06"));          
	//ИдТипЦены     = Эл.ПолучитьАтрибут("A07");     
	//СуммаДок	  = Число(Эл.ПолучитьАтрибут("A08"));
	//ДатаДоставки  = ДатаВремяXMLВФормат1С(Эл.ПолучитьАтрибут("A010"));
	//Комментарий   = Эл.ПолучитьАтрибут("A011");
	//ИдКатегории   = Эл.ПолучитьАтрибут("A012"); 
//
//	ТипЦены	= ПолучитьОбъектПоИдентификатору("ТипыЦен", ИдТипЦены);
//	
//	РежимЗагрузки = Константа.кпкРежимЗагрузкиЗаявок;
//	// 1 - загружать в док. "Заявка";
//	// 2 - загружать в док. "Реализация";
//	// 3 - создавать на основании "Заявки" док. "Реализация"
//	
//	ПередвижнойСклад = АгентИнфо.ПередвижнойСклад;
//	
//	Если РежимЗагрузки = 2 Тогда           
//		Если XMLЗагрузкаРеализации(Эл, ПередвижнойСклад, 1) = 1 Тогда 				
//			Возврат 1;
//		Иначе
//			Возврат 0;
//		КонецЕсли;
//	Иначе
	//	Док = м_ДокЗв;          			
	//КонецЕсли;       	                                     
		
	ПредставлениеДокВКПК = "РасходнаяНакладная"; 
	Идентификатор = ""; 
	DocState = 0;
	 
	Если XMLИнициализацияДок(Эл, Док, ПредставлениеДокВКПК, Идентификатор, DocState) = 0 Тогда
	    Возврат 0;
	КонецЕсли; 
	
	Найден = Док.Выбран();
	   
	//Если АгентИнфо.ОсновнойСклад.Выбран()= 1 Тогда
	//	Док.МестоНахождения = АгентИнфо.ОсновнойСклад;	    		
	//Иначе
	//	ОповеститьОСобытии("У агента " + ВыбАгент + " не указан основной склад. Для документа " + 
	//			 		   ПредставлениеДокВКПК + " не будет заполнено значение склада!", "!", 1, Док);
	//КонецЕсли;
	
	тз = СоздатьОбъект("ТаблицаЗначений");
	тз.НоваяКолонка("СлужебнаяТекущаяСтрока",5,"Строка",50,,"СлужебнаяТек",10);     
	тз.НоваяКолонка("Служебная",5,"Строка",50,,"Служебная",10);     
	тз.НоваяКолонка("НомСтроки","Число",,,"№",2,,);
	тз.НоваяКолонка("Код",,,,"Код",4,,);
	тз.НоваяКолонка("Количество",,,,"Количество",5,,);  
	тз.НоваяКолонка("Товар",,,,"Товар",30,,);
	тз.НоваяКолонка("пкАдрес",,,,"пкАдрес",6,,);
	тз.НоваяКолонка("Единица",,,,"Ед.",3,,);
	ЕстьИзменения = 0;
	ЕстьИзмененияАдреса = 0;
	
	ВыборкаТабЧастей = Эл.ВыбратьУзел("TABLES");
	
	Если ПустоеЗначение(ВыборкаТабЧастей) = 0 Тогда  
		
		ВыбТЧ = ВыборкаТабЧастей.ВыбратьУзлы("TABLE");
		
		Для Сч = 0 По ВыбТЧ.КоличествоУзлов() - 1 Цикл
			
			ЭлТабЧастей = ВыбТЧ.ПолучитьУзел(Сч);  
			
			ИдТЧ = ЭлТабЧастей.ПолучитьАтрибут("GUID");
			
			// Загружаем табличную часть товаров
			Если ИдТЧ = "7084D846-49E5-466C-AEAA-33F504238126" Тогда 								
				
				Элементы = ЭлТабЧастей.ВыбратьУзлы("ITEM");
				
				Для Сч = 0 По Элементы.КоличествоУзлов() - 1 Цикл
					
					ЭлТЧ = Элементы.ПолучитьУзел(Сч);  
					
					ИдОбъекта = ЭлТЧ.ПолучитьАтрибут("GUID"); 					
					
					ИдНоменклатуры   			= ЭлТЧ.ПолучитьАтрибут("A01");					
					АдресРазмещения  			= ЭлТЧ.ПолучитьАтрибут("A02");					
					НаименованиеЕдиницыИзм		= Число(ЭлТЧ.ПолучитьАтрибут("A03"));
					Количество		 			= Число(ЭлТЧ.ПолучитьАтрибут("A05"));
					//НаименованиеЕдиницыИзм	 	= ЭлТЧ.ПолучитьАтрибут("A05");

					Вес		 					= Число(ЭлТЧ.ПолучитьАтрибут("A06"));
					Код				 			= Число(ЭлТЧ.ПолучитьАтрибут("A07"));
					//СтрокаИзменена	 			= Число(ЭлТЧ.ПолучитьАтрибут("A08"));
					
					Номенклатура 	= ПолучитьОбъектПоИдентификатору("Номенклатура", ИдНоменклатуры);  
					//Единица			= ПолучитьОбъектПоИдентификатору("Единицы", 	 ИдЕдиницыИзм);  
					
					
					Док.ВыбратьСтроки();
					Пока Док.ПолучитьСтроку() = 1 Цикл
						Если Док.Товар	= Номенклатура Тогда     //!!! не должно быть одинаковых товаров в одно ТЧ
							Если Док.пкАдрес <> АдресРазмещения Тогда 			// поменялся адрес
								Док.пкАдрес = АдресРазмещения;
//								глПрописатьАдрес(Док);   
								ЕстьИзмененияАдреса = 1; 
							КонецЕсли;
							тз.НоваяСтрока();
							Если Количество = 0 Тогда  	// поменялось количество
								тз.Служебная				= "BRUSH["+глПолучитьЦвет(255,0,0)+"]";
								ЕстьИзменения = 1; 
							ИначеЕсли Док.Количество <> Количество Тогда 
								тз.Служебная				= "BRUSH["+глПолучитьЦвет(176,224,230)+"]";
								ЕстьИзменения = 1;                      
							КонецЕсли;
							тз.СлужебнаяТекущаяСтрока	= "FONTSET_S["+глСистемныйШрифтЖирный+"]";
							тз.НомСтроки	= Док.НомерСтроки;
							тз.пкАдрес 		= АдресРазмещения;
							тз.Код 			= Док.Товар.Код;
							тз.Товар 		= Док.Товар;
							тз.Единица 		= Док.Единица;
							тз.Количество 	= Количество;     
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;	
			КонецЕсли;			
			
		КонецЦикла;				
		
	КонецЕсли;  
    
	Если ЕстьИзмененияАдреса = 1  Тогда
	    Док.Записать();
	КонецЕсли;
	Если ЕстьИзменения = 1 Тогда
		Конт = СоздатьОбъект("СписокЗначений");
		Конт.ДобавитьЗначение("РМК");								
		Конт.ДобавитьЗначение(Док);
		Конт.ДобавитьЗначение(тз);  
		тз.ВыбратьСтроку();
		
		ОткрытьФорму("Обработка.пкРедактированиеРеализации",Конт);

	    ЗаписьЖурналаРегистрации("КПК: Загружен документ","Документ","Запись",Док.ТекущийДокумент(), 3);
		Возврат 1;
	КонецЕсли;
	
	//Если РежимЗагрузки = 3 Тогда
	//	Если ЗаписьДокумента(Док, Идентификатор, Проведен, Эл) = 1 Тогда		
	//		Возврат СоздатьРеализациюНаОснованииЗаявки(Док);				
	//	Иначе
	//		Возврат 0;
	//	КонецЕсли;
	//Иначе		
		Возврат ЗаписьДокумента(Док, Идентификатор, Проведен, Эл);
	//КонецЕсли;
	
КонецФункции // ЗагрузитьДокументРеализация

//******************************************************************************  
Функция ЗагрузитьДокументПоступления(Эл, ИмяДок) 
	
	Док = м_ДокПН;
	
	Проведен = Число(Эл.ПолучитьАтрибут("IsPost"));					
	ДатаДок  = ДатаВремяXMLВФормат1С(Эл.ПолучитьАтрибут("dt"));
	НомерДок = СокрЛП(Эл.ПолучитьАтрибут("DocNumber"));
	ВидДок 	 = Док.Вид();
	                                            
	ИдКлиент		= Эл.ПолучитьАтрибут("A01");      
	ИдСклад 		= Эл.ПолучитьАтрибут("A02");      
	КоличествоСтрок = Эл.ПолучитьАтрибут("A03");      
	Вес				= Эл.ПолучитьАтрибут("A05");      
	Комментарий		= Эл.ПолучитьАтрибут("A06");      
	//ИдФирмы 	  = Эл.ПолучитьАтрибут("A02");      
	//ИдКонтрагента = Эл.ПолучитьАтрибут("A03");      
	//ИдТоргТочки   = Эл.ПолучитьАтрибут("A04");      
	//ИдДоговора    = Эл.ПолучитьАтрибут("A05");      	
	//СкидкаДок     = Число(Эл.ПолучитьАтрибут("A06"));          
	//ИдТипЦены     = Эл.ПолучитьАтрибут("A07");     
	//СуммаДок	  = Число(Эл.ПолучитьАтрибут("A08"));
	//ДатаДоставки  = ДатаВремяXMLВФормат1С(Эл.ПолучитьАтрибут("A010"));
	//Комментарий   = Эл.ПолучитьАтрибут("A011");
	//ИдКатегории   = Эл.ПолучитьАтрибут("A012"); 
//
//	ТипЦены	= ПолучитьОбъектПоИдентификатору("ТипыЦен", ИдТипЦены);
//	
//	РежимЗагрузки = Константа.кпкРежимЗагрузкиЗаявок;
//	// 1 - загружать в док. "Заявка";
//	// 2 - загружать в док. "Реализация";
//	// 3 - создавать на основании "Заявки" док. "Реализация"
//	
//	ПередвижнойСклад = АгентИнфо.ПередвижнойСклад;
//	
//	Если РежимЗагрузки = 2 Тогда           
//		Если XMLЗагрузкаРеализации(Эл, ПередвижнойСклад, 1) = 1 Тогда 				
//			Возврат 1;
//		Иначе
//			Возврат 0;
//		КонецЕсли;
//	Иначе
	//	Док = м_ДокЗв;          			
	//КонецЕсли;       	                                     
		
	ПредставлениеДокВКПК = "ПриходнаяНакладная"; 
	Идентификатор = ""; 
	DocState = 0;
	 
	Если XMLИнициализацияДок(Эл, Док, ПредставлениеДокВКПК, Идентификатор, DocState) = 0 Тогда
	    Возврат 0;
	КонецЕсли; 
	
	Найден = Док.Выбран();
	   
	//Если АгентИнфо.ОсновнойСклад.Выбран()= 1 Тогда
	//	Док.МестоНахождения = АгентИнфо.ОсновнойСклад;	    		
	//Иначе
	//	ОповеститьОСобытии("У агента " + ВыбАгент + " не указан основной склад. Для документа " + 
	//			 		   ПредставлениеДокВКПК + " не будет заполнено значение склада!", "!", 1, Док);
	//КонецЕсли;
	
	ВыборкаТабЧастей = Эл.ВыбратьУзел("TABLES");
	
	Если ПустоеЗначение(ВыборкаТабЧастей) = 0 Тогда  
		
		ВыбТЧ = ВыборкаТабЧастей.ВыбратьУзлы("TABLE");
		
		Для Сч = 0 По ВыбТЧ.КоличествоУзлов() - 1 Цикл
			
			ЭлТабЧастей = ВыбТЧ.ПолучитьУзел(Сч);  
			
			ИдТЧ = ЭлТабЧастей.ПолучитьАтрибут("GUID");
			
			// Загружаем табличную часть товаров
			Если ИдТЧ = "D3C00565-5167-4329-A167-9AB9B2D7C9C4" Тогда 								
				
				Элементы = ЭлТабЧастей.ВыбратьУзлы("ITEM");
				
				Для Сч = 0 По Элементы.КоличествоУзлов() - 1 Цикл
					
					ЭлТЧ = Элементы.ПолучитьУзел(Сч);  
					
					ИдОбъекта = ЭлТЧ.ПолучитьАтрибут("GUID"); 					
					
					ИдНоменклатуры   			= ЭлТЧ.ПолучитьАтрибут("A01");					
					АдресРазмещения  			= ЭлТЧ.ПолучитьАтрибут("A02");					
					Код				 			= Число(ЭлТЧ.ПолучитьАтрибут("A05"));
					НаименованиеЕдиницыИзм	 	= ЭлТЧ.ПолучитьАтрибут("A06");
					Вес		 					= Число(ЭлТЧ.ПолучитьАтрибут("A07"));
					Количество		 			= Число(ЭлТЧ.ПолучитьАтрибут("A08"));
					
					Номенклатура 	= ПолучитьОбъектПоИдентификатору("Номенклатура", ИдНоменклатуры);  
					//Единица			= ПолучитьОбъектПоИдентификатору("Единицы", 	 ИдЕдиницыИзм);  
					
					// *.* тут добавить корр. Адреса в Приходе + ввод на основании "Перемещения" - если склад "Размещение" иначе только корр. адреса
					// в приходе + установить кладовщика разместившего товар;
		
					//Док.ВыбратьСтроки();
					//Пока Док.ПолучитьСтроку() = 1 Цикл
					//	Если Док.Товар	= Номенклатура Тогда     //!!! не должно быть одинаковых товаров в одно ТЧ
					//		Если Док.пкАдрес <> АдресРазмещения Тогда 			// поменялся адрес
					//			Док.пкАдрес = АдресРазмещения;
					//			глПрописатьАдрес(Док);   
					//			ЕстьИзмененияАдреса = 1; 
					//		КонецЕсли;
					//		тз.НоваяСтрока();
					//		Если Количество = 0 Тогда  	// поменялось количество
					//			тз.Служебная				= "BRUSH["+глПолучитьЦвет(255,0,0)+"]";
					//			ЕстьИзменения = 1; 
					//		ИначеЕсли Док.Количество <> Количество Тогда 
					//			тз.Служебная				= "BRUSH["+глПолучитьЦвет(176,224,230)+"]";
					//			ЕстьИзменения = 1;                      
					//		КонецЕсли;
					//		тз.СлужебнаяТекущаяСтрока	= "FONTSET_S["+глСистемныйШрифтЖирный+"]";
					//		тз.НомСтроки	= Док.НомерСтроки;
					//		тз.пкАдрес 		= АдресРазмещения;
					//		тз.Код 			= Док.Товар.Код;
					//		тз.Товар 		= Док.Товар;
					//		тз.Единица 		= Док.Единица;
					//		тз.Количество 	= Количество;     
					//		Прервать;
					//	КонецЕсли;
					//КонецЦикла;
				КонецЦикла;	
			КонецЕсли;			
			
		КонецЦикла;				
		
	КонецЕсли;  
    
//	Если ЕстьИзмененияАдреса = 1  Тогда
//	    Док.Записать();
//	КонецЕсли;
//	Если ЕстьИзменения = 1 Тогда
//		Конт = СоздатьОбъект("СписокЗначений");
//		Конт.ДобавитьЗначение("РМК");								
//		Конт.ДобавитьЗначение(Док);
//		Конт.ДобавитьЗначение(тз);  
//		тз.ВыбратьСтроку();
//		
//		ОткрытьФорму("Обработка.пкРедактированиеРеализации",Конт);
//
//	    ЗаписьЖурналаРегистрации("КПК: Загружен документ","Документ","Запись",Док.ТекущийДокумент(), 3);
//		Возврат 1;
//	КонецЕсли;
	
	//Если РежимЗагрузки = 3 Тогда
	//	Если ЗаписьДокумента(Док, Идентификатор, Проведен, Эл) = 1 Тогда		
	//		Возврат СоздатьРеализациюНаОснованииЗаявки(Док);				
	//	Иначе
	//		Возврат 0;
	//	КонецЕсли;
	//Иначе		
		Возврат ЗаписьДокумента(Док, Идентификатор, Проведен, Эл);
	//КонецЕсли;
	
КонецФункции // 


////******************************************************************************  
//Функция ЗагрузитьДокументЗаказ(Эл, ИмяДок) 
//	
//	Док = м_ДокЗв;
//	
//	Проведен = Число(Эл.ПолучитьАтрибут("IsPost"));					
//	ДатаДок  = ДатаВремяXMLВФормат1С(Эл.ПолучитьАтрибут("dt"));
//	НомерДок = СокрЛП(Эл.ПолучитьАтрибут("DocNumber"));
//	ВидДок 	 = Док.Вид();
//	                                            
//	ИдФирмы 	  = Эл.ПолучитьАтрибут("A02");      
//	ИдКонтрагента = Эл.ПолучитьАтрибут("A03");      
//	ИдТоргТочки   = Эл.ПолучитьАтрибут("A04");      
//	ИдДоговора    = Эл.ПолучитьАтрибут("A05");      	
//	СкидкаДок     = Число(Эл.ПолучитьАтрибут("A06"));          
//	ИдТипЦены     = Эл.ПолучитьАтрибут("A07");     
//	СуммаДок	  = Число(Эл.ПолучитьАтрибут("A08"));
//	ДатаДоставки  = ДатаВремяXMLВФормат1С(Эл.ПолучитьАтрибут("A010"));
//	Комментарий   = Эл.ПолучитьАтрибут("A011");
//	ИдКатегории   = Эл.ПолучитьАтрибут("A012"); 
//
//	ТипЦены	= ПолучитьОбъектПоИдентификатору("ТипыЦен", ИдТипЦены);
//	
//	РежимЗагрузки = Константа.кпкРежимЗагрузкиЗаявок;
//	// 1 - загружать в док. "Заявка";
//	// 2 - загружать в док. "Реализация";
//	// 3 - создавать на основании "Заявки" док. "Реализация"
//	
//	ПередвижнойСклад = АгентИнфо.ПередвижнойСклад;
//	
//	Если РежимЗагрузки = 2 Тогда           
//		Если XMLЗагрузкаРеализации(Эл, ПередвижнойСклад, 1) = 1 Тогда 				
//			Возврат 1;
//		Иначе
//			Возврат 0;
//		КонецЕсли;
//	Иначе
//		Док = м_ДокЗв;          			
//	КонецЕсли;       	                                     
//		
//	ПредставлениеДокВКПК = "Заявка"; 
//	Идентификатор = ""; 
//	DocState = 0;
//	 
//	Если XMLИнициализацияДок(Эл, Док, ПредставлениеДокВКПК, Идентификатор, DocState) = 0 Тогда
//	    Возврат 0;
//	КонецЕсли; 
//	
//	Перезапись = Док.Выбран();
//	   
//	ВидОперации = Константа.кпкВидОперацииЗаявок;
//	
//	Если ПустоеЗначение(ВидОперации) = 1 Тогда
//		Док.ВидОперации = Перечисление.ВидыОперацийЗаявок.Неподтвержденная;
//	Иначе
//		Док.ВидОперации = ВидОперации;
//	КонецЕсли;                       
//	
//	Если Док.ВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад Тогда
//		Если АгентИнфо.ОсновнойСклад.Выбран()= 1 Тогда
//			Док.Склад = АгентИнфо.ОсновнойСклад;	    		
//		Иначе
//			ОповеститьОСобытии("У агента " + ВыбАгент + " не указан основной склад. Для документа " + 
//					 		   ПредставлениеДокВКПК + " не будет заполнено значение склада!", "!", 1, Док);
//		КонецЕсли;
//		
//	КонецЕсли; 
//	
//	НДССверху  = Док.ТипЦен.ЦенаВклНДС;
//	
//	Если НДССверху = 1 тогда
//    	Док.СуммаВклНДС = 0;         
//    Иначе
//        Док.СуммаВклНДС = 1;          
//    КонецЕСли;    
//	
//	Док.ДатаДок 	= 	РабочаяДата();	
//	Док.АвтоВремяТекущее();    
//	
//	Док.ТипЦен = ТипЦены;
//	
//	УстановитьТипЦеныВДокументе(Эл, Док); 
//	
//	СписокПараметров = СоздатьОбъект("СписокЗначений");
//	СписокПараметров.ДобавитьЗначение(ИдФирмы, 	     "Фирма"); 
//	СписокПараметров.ДобавитьЗначение(ИдКонтрагента, "Контрагент"); 
//	СписокПараметров.ДобавитьЗначение(ИдТоргТочки,   "ТоргТочка");
//	СписокПараметров.ДобавитьЗначение(ИдДоговора,    "Договор"); 
//	СписокПараметров.ДобавитьЗначение(СуммаДок,      "СуммаДок");
//	
//	УстановитьРеквизитыДокумента(Эл, Док, СписокПараметров); 
//                                  
//	Если СкидкаДок<>0 Тогда
//		Скидка = ВернутьСкидку(СкидкаДок);
//		Если ПустоеЗначение(Скидка) = 1 Тогда
//			ОповеститьОСобытии("В документе " + ПредставлениеДокВКПК + "указана скидка " + 
//					 		   Строка(СкидкаДок) + "%, отсутствующая в справочнике ""Скидки""!", "!", 1, Док);
//		Иначе
//			Док.Скидка = Скидка;
//		КонецЕсли;             
//	КонецЕсли;
//	                                    
//	//В этой конфигурации для простоты всем клиентам по умолчанию установлен срок оплаты 7 дней	
//	Док.ДатаОплаты   = Док.ДатаДок + 7; 
//	Док.ДатаОтгрузки = ДатаДоставки;
//	
//	//заполняем табличную часть
//	Если Док.КоличествоСтрок() <> 0 Тогда //если документ перезаписывается
//		Док.УдалитьСтроки();
//	КонецЕсли;
//	
//	ВыборкаТабЧастей = Эл.ВыбратьУзел("TABLES");
//	
//	Если ПустоеЗначение(ВыборкаТабЧастей) = 0 Тогда  
//		
//		ВыбТЧ = ВыборкаТабЧастей.ВыбратьУзлы("TABLE");
//		
//		Для Сч = 0 По ВыбТЧ.КоличествоУзлов() - 1 Цикл
//			
//			ЭлТабЧастей = ВыбТЧ.ПолучитьУзел(Сч);  
//			
//			ИдТЧ = ЭлТабЧастей.ПолучитьАтрибут("GUID");
//			
//			// Загружаем табличную часть товаров
//			Если ИдТЧ = "0738E61B-F06F-464A-8483-4249E0254819" Тогда 								
//				
//				Элементы = ЭлТабЧастей.ВыбратьУзлы("ITEM");
//				
//				Для Сч = 0 По Элементы.КоличествоУзлов() - 1 Цикл
//					
//					ЭлТЧ = Элементы.ПолучитьУзел(Сч);  
//					
//					ИдОбъекта = ЭлТЧ.ПолучитьАтрибут("GUID"); 					
//					
//					ИдНоменклатуры   = ЭлТЧ.ПолучитьАтрибут("A01");					
//					ИдЕдиницыИзм	 = ЭлТЧ.ПолучитьАтрибут("A03");
//					Количество		 = Число(ЭлТЧ.ПолучитьАтрибут("A04"));
//					Цена			 = Число(ЭлТЧ.ПолучитьАтрибут("A05"));
//					Сумма			 = Число(ЭлТЧ.ПолучитьАтрибут("A06"));
//					СуммаСНДС		 = Число(ЭлТЧ.ПолучитьАтрибут("A07"));
//					Вес				 = Число(ЭлТЧ.ПолучитьАтрибут("A08"));
//					Скидка			 = Число(ЭлТЧ.ПолучитьАтрибут("A09"));
//					СтавкаНДС		 = Число(ЭлТЧ.ПолучитьАтрибут("A010"));
//					ИдСклад			 = ЭлТЧ.ПолучитьАтрибут("A011"); 
//					
//					Номенклатура 	= ПолучитьОбъектПоИдентификатору("Номенклатура", ИдНоменклатуры);  
//					Единица			= ПолучитьОбъектПоИдентификатору("Единицы", 	 ИдЕдиницыИзм);  
//					
//					Док.НоваяСтрока();
//					
//					Если ПустоеЗначение(Номенклатура) = 1 Тогда
//						ОповеститьОСобытии("Не удалось найти товар с идентификатором " + ИдНоменклатуры, "!!!");
//					КонецЕсли;
//					
//					Док.Номенклатура = Номенклатура;
//					Док.Количество 	 = Количество;		
//					Если Док.УчитыватьНДС = 1 Тогда              			
//						Док.СтавкаНДС   = Док.Номенклатура.СтавкаНДС;
//					КонецЕсли;                                       
//					
//					// Если включен режим работы с единицами измерения в табличной части документа		
//					Если РежимЕд = 1 Тогда
//						Док.Единица 	= Единица;
//						Док.Коэффициент = Единица.Коэффициент;
//					Иначе		
//						Док.Единица     = Номенклатура.БазоваяЕдиница;		//с КПК количество поступает всегда в базовых единицах
//						Док.Коэффициент = Док.Единица.Коэффициент;
//					КонецЕсли;
//					
//					АППересчетСуммы(Док, 1, 0, 1); // пересчитываем сумму заново, на случай если в БД была у товара изменена цена    
//										
//					//Если требуется загружать заявки без пересчета суммы, то вместо верхней строчки следует указать следующие строки:		
//					//Док.Цена       = Цена;          
//					//Док.Сумма      = Сумма;	        
//					
//					//Если Док.УчитыватьНДС = 1 Тогда              
//					//	Док.СуммаНДС    = СуммаСНДС;
//					//	Док.СтавкаНДС   = Док.Номенклатура.СтавкаНДС;
//					//	Если НДССверху = 1 тогда
//					//		Док.СуммаНДС = Док.Сумма*(АПСтавкаНДС(Док.СтавкаНДС)/100);
//					//	Иначе            
//					//		Док.СуммаНДС = Док.Сумма/(Док.Сумма+Док.Сумма*(АПСТавкаНДС(Док.СтавкаНДС)/100))*АПСтавкаНДС(Док.СтавкаНДС);
//					//	КонецЕсли;
//					//КонецЕсли;    
//					
//				КонецЦикла;	
//				
//				// Пересчитывает сумму в валюте взаиморасчетов.
//				ПересчетСуммыВзаиморасчетов(Док); 										
//				
//			КонецЕсли;			
//			
//		КонецЦикла;				
//		
//	КонецЕсли;  
//	
//	Если РежимЗагрузки = 3 Тогда
//		Если ЗаписьДокумента(Док, Идентификатор, Проведен, Эл) = 1 Тогда		
//			Возврат СоздатьРеализациюНаОснованииЗаявки(Док);				
//		Иначе
//			Возврат 0;
//		КонецЕсли;
//	Иначе		
//		Возврат ЗаписьДокумента(Док, Идентификатор, Проведен, Эл);
//	КонецЕсли;
//	
//КонецФункции // ЗагрузитьДокументЗаказ
//
////******************************************************************************  
//Функция  ЗагрузитьДокументКасса(Эл, ИмяДок) 
//	
//	Проведен = Число(Эл.ПолучитьАтрибут("IsPost"));					
//	ДатаДок  = ДатаВремяXMLВФормат1С(Эл.ПолучитьАтрибут("dt"));
//	НомерДок = СокрЛП(Эл.ПолучитьАтрибут("DocNumber"));
//	                                            
//	ИдФирмы 	  = Эл.ПолучитьАтрибут("A01");      
//	ИдКонтрагента = Эл.ПолучитьАтрибут("A02");      
//	ИдТоргТочки   = Эл.ПолучитьАтрибут("A03");      
//	ИдДоговора    = Эл.ПолучитьАтрибут("A04");      	
//	Комментарий   = Эл.ПолучитьАтрибут("A06");
//	СуммаДок	  = Число(Эл.ПолучитьАтрибут("A07")); 
//	ЭтоРКО	      = Число(Эл.ПолучитьАтрибут("A08"));
//	ДокОснование  = Эл.ПолучитьАтрибут("A09");           
//	НомерРКО      = Число(Эл.ПолучитьАтрибут("A010"));          
//	
//	Если ЭтоРКО = 0 Тогда		
//		ПредставлениеДокВКПК = "Приходный кассовый ордер"; 
//	    Док = м_ДокПКО;
//	Иначе
//		ПредставлениеДокВКПК = "Расходный кассовый ордер";    	
//		Док = м_ДокРКО;                                         		
//	КонецЕсли;  
//	
//	ВидДок 	= Док.Вид();
//	
//	Если АгентИнфо.Касса.Выбран() = 0 Тогда
//	    КассаАгента = глЗначениеПоУмолчанию("ОсновнаяКасса");	
//	Иначе
//		КассаАгента = АгентИнфо.Касса;
//	КонецЕсли;
//	
//	Идентификатор = ""; DocState = 0;
//
//	СредиПодчиненных = 1; //признак, что нужно по документу-основанию загружаемого документа 
//						  //найти в дереве непроведенный Ордер и сделать загрузку в этот документ
//	Если XMLИнициализацияДок(Эл, Док, ПредставлениеДокВКПК, Идентификатор, DocState, СредиПодчиненных) = 0 Тогда
//	    Возврат 0;
//	КонецЕсли;
//	
//	//Если при выходе из XMLИнициализацияДок СредиПодчиненных = 2, это значит, что записывается ордер в существующий в дереве документ
//	
//	//Если найден непроведенный ордер среди подчиненных,
//	//и сумма у него отличается от загружаемого ордера, 
//	//то требуется загрузка нового ордера, а сумма уже существующего ордера корректируется
//	Если (СредиПодчиненных = 2) И (Док.Сумма <> СуммаДок) Тогда 
//	    Если СуммаДок < Док.Сумма Тогда	//клиент заплатил меньше, чем должен
//	        ДолгКлиента = Док.Сумма;
//			НоваяСумма = ДолгКлиента - СуммаДок;
//			ТекДок = Док.ТекущийДокумент();
//			Если Док.НайтиДокумент(ТекДок) = 1 Тогда //сбрасываем загруженные функцией XMLИнициализацияДок реквизиты 
//				Док.ДатаДок = РабочаяДата();
//				Док.Сумма = НоваяСумма; 
//				
//				Если ВыполнитьОперациюДляОбъекта(Док, "запись") = 0 Тогда						
//					Возврат 0;			
//				КонецЕсли;	
//			    
//				ОповеститьОСобытии("Скорректирована сумма ордера (задолженность клиента) " + АППредставлениеДок(Док.ТекущийДокумент()), "i", 1, Док);
//				//инициируем документ заново но уже без поиска среди подчиненных				
//				Если XMLИнициализацияДок(Эл, Док, ПредставлениеДокВКПК, Идентификатор, DocState, 0) = 0 Тогда
//				    Возврат 0;
//				КонецЕсли;
//			Иначе
//				 ОповеститьОСобытии("Ошибка при поиске документа" + ПредставлениеДокВКПК + "!", "!");
//				 Возврат 0;
//			КонецЕсли;
//		Иначе //случай, когда  СуммаДок > Док.Сумма (переплата клиентом) пока не рассматриваем
//			
//	    КонецЕсли;
//	КонецЕсли;
//	
//	Перезапись = Док.Выбран();
//	   
//	Если Док.Вид() = "ПКО" Тогда
//		Док.КодОперации = глКО.ОплатаОтПокупателя;
//	Иначе	
//		Док.КодОперации = глКО.ВозвратОплатыПокупателю;
//	КонецЕсли;
//	
//	СписокПараметров = СоздатьОбъект("СписокЗначений");
//	СписокПараметров.ДобавитьЗначение(ИдФирмы, 	     "Фирма"); 
//	СписокПараметров.ДобавитьЗначение(ИдКонтрагента, "Контрагент"); 
//	СписокПараметров.ДобавитьЗначение(ИдТоргТочки,   "ТоргТочка");
//	СписокПараметров.ДобавитьЗначение(ИдДоговора,    "Договор"); 
//	СписокПараметров.ДобавитьЗначение(СуммаДок,      "СуммаДок");
//	
//	УстановитьРеквизитыДокумента(Эл, Док, СписокПараметров); 
//
//	ПересчетСуммыВзаиморасчетов(Док);
//	
//	Док.Касса 		= КассаАгента; 
//	Док.Комментарий = Комментарий;
//	
//	ЗаписьДокумента(Док, Идентификатор, Проведен, Эл);      
//	
//КонецФункции // ЗагрузитьДокументКасса
//      
//******************************************************************************
Процедура ЗагрузитьДокумент(Эл, ИмяДок, Кол)   
	
	ВыборкаЭлементов = Эл.ВыбратьУзел("ELEMENTS");
	
	Если ПустоеЗначение(ВыборкаЭлементов) = 0 Тогда            
		
		Элементы = ВыборкаЭлементов.ВыбратьУзлы("ITEM");
		
		Для Сч = 0 По Элементы.КоличествоУзлов() - 1 Цикл
			
			Эл = Элементы.ПолучитьУзел(Сч);  
	
			Проведен = Число(Эл.ПолучитьАтрибут("IsPost"));					
			ДатаДок  = Строка(ДатаВремяXMLВФормат1С(Эл.ПолучитьАтрибут("dt")));
			НомерДок = СокрЛП(Эл.ПолучитьАтрибут("DocNumber"));
					
			//Если Проведен = 0 Тогда
			//	ОповеститьОСобытии("Пропущена загрузка документа " + ИмяДок + " №: " + НомерДок + " от: " + ДатаДок + ". Документ не проведен в мобильном устройстве!");										
			//	Продолжить;
			//КонецЕсли; 	
         
			Если ИмяДок = "Инвентаризация" Тогда    								
				Если ЗагрузитьДокументИнвентаризация(Эл, ИмяДок) = 0 Тогда
			    	Продолжить;
				КонецЕсли;   
				Кол = Кол + 1;
			ИначеЕсли ИмяДок = "РасходнаяНакладная" Тогда    								
				Если ЗагрузитьДокументРеализация(Эл, ИмяДок) = 0 Тогда
			    	Продолжить;
				КонецЕсли;   
			//	Кол = Кол + 1;
			//ИначеЕсли ИмяДок = "Касса" Тогда    				
			//	Если ЗагрузитьДокументКасса(Эл, ИмяДок) = 0 Тогда
			//    	Продолжить;
			//	КонецЕсли;    
			//	Кол = Кол + 1;					
			КонецЕсли;
					
		КонецЦикла;   
		
	КонецЕсли; 
	
КонецПроцедуры //ЗагрузитьДокумент
//
////******************************************************************************
//Процедура ЗагрузкаКонтактнойИнформации(Эл) 
//	
//	ВыборкаЭлементов = Эл.ВыбратьУзел("ELEMENTS");
//	
//	Если ПустоеЗначение(ВыборкаЭлементов) = 0 Тогда            
//		
//		Элементы = ВыборкаЭлементов.ВыбратьУзлы("ITEM");
//		
//		Для Сч = 0 По Элементы.КоличествоУзлов() - 1 Цикл
//			
//			Эл = Элементы.ПолучитьУзел(Сч);  
//					
//			ПометкаУдаления  = Эл.ПолучитьАтрибут("IsDeleted");												
//			Наименование 	 = Эл.ПолучитьАтрибут("Name");  				
//			ИдКонтрагент     = Эл.ПолучитьАтрибут("A01");
//			ИдТорговаяТочка  = Эл.ПолучитьАтрибут("A02");
//			ИдКонтактноеЛицо = Эл.ПолучитьАтрибут("A03");
//			ИдТип 		     = Эл.ПолучитьАтрибут("A04");
//			ИдВид 		     = Эл.ПолучитьАтрибут("A05");
//			Представление    = Эл.ПолучитьАтрибут("A06");
//			
//			ТекТип = "";
//			     
//			Если ПустаяСтрока(ИдКонтрагент) = 0 Тогда 
//				
//				Спр = СоздатьОбъект("Справочник.Контрагенты"); 
//				
//				СсылкаОбъекта = ПолучитьОбъектПоИдентификатору("Контрагенты", ИдКонтрагент);
//				
//				Если Спр.НайтиЭлемент(СсылкаОбъекта) = 0 Тогда Продолжить; КонецЕсли; 
//				
//				Если Спр.ЮрФизЛицо.Выбран() = 1 Тогда                                 
//					
//					СпрЮрЛица = СоздатьОбъект("Справочник.ЮрЛица"); 
//					СпрФизЛица = СоздатьОбъект("Справочник.ФизЛица"); 
//					
//					Если СпрЮрЛица.НайтиЭлемент(Спр.ЮрФизЛицо) = 1 Тогда
//						НайдПоз = СписокТиповКИ.НайтиЗначение(НРег(ИдТип));
//						Если НайдПоз > 0 Тогда
//							СписокТиповКИ.ПолучитьЗначение(НайдПоз, ТекТип);
//							Если ТекТип = "Адрес" Тогда								
//								Если ИдВид = ИдФактАдрес Тогда 
//									СпрЮрЛица.ФактАдрес = Представление;
//								ИначеЕсли ИдВид = ИдЮрАдрес Тогда
//									СпрЮрЛица.ЮрАдрес = Представление
//								КонецЕсли;
//							ИначеЕсли ТекТип = "Телефон" Тогда
//								Если ИдВид = ИдТелефон Тогда 
//									СпрЮрЛица.Телефоны = Представление 
//								КонецЕсли;
//							КонецЕсли;										
//						КонецЕсли;		
//						
//						Если ВыполнитьОперациюДляОбъекта(СпрЮрЛица, "запись") = 0 Тогда 						
//							Продолжить;								
//						КонецЕсли;
//						
//					ИначеЕсли СпрФизЛица.НайтиЭлемент(Спр.ЮрФизЛицо) = 1 Тогда  
//						
//						НайдПоз = СписокТиповКИ.НайтиЗначение(НРег(ИдТип));
//						Если НайдПоз > 0 Тогда
//							СписокТиповКИ.ПолучитьЗначение(НайдПоз, ТекТип);
//							Если ТекТип = "Адрес" Тогда								
//								Если ИдВид = ИдФактАдрес Тогда 
//									СпрФизЛица.ФактАдрес = Представление;
//								ИначеЕсли ИдВид = ИдЮрАдрес Тогда
//									СпрФизЛица.ЮрАдрес = Представление
//								КонецЕсли;
//							ИначеЕсли ТекТип = "Телефон" Тогда
//								Если ИдВид = ИдТелефон Тогда 
//									СпрФизЛица.Телефоны = Представление 
//								КонецЕсли;
//							КонецЕсли;										
//						КонецЕсли;		
//						
//						Если ВыполнитьОперациюДляОбъекта(СпрФизЛица, "запись") = 0 Тогда 						
//							Продолжить;								
//						КонецЕсли;   						
//						
//					КонецЕсли; 					
//					
//				КонецЕсли;          				
//				
//			ИначеЕсли ПустаяСтрока(ИдТорговаяТочка) = 0 Тогда
//				
//				Спр = СоздатьОбъект("Справочник.кпкТорговыеТочки"); 
//				
//				СсылкаОбъекта = ПолучитьОбъектПоИдентификатору("кпкТорговыеТочки", ИдТорговаяТочка);
//				
//				Если Спр.НайтиЭлемент(СсылкаОбъекта) = 0 Тогда Продолжить; КонецЕсли; 
//				   
//				НайдПоз = СписокТиповКИ.НайтиЗначение(НРег(ИдТип));
//				Если НайдПоз > 0 Тогда
//					СписокТиповКИ.ПолучитьЗначение(НайдПоз, ТекТип);
//					Если ТекТип = "Адрес" Тогда								
//						Если ИдВид = ИдАдресТТ Тогда 
//							Спр.Адрес = Представление;
//						КонецЕсли;
//					ИначеЕсли ТекТип = "Телефон" Тогда
//						Если ИдВид = ИдТелефон Тогда 
//							Спр.Телефоны = Представление 
//						КонецЕсли;
//					КонецЕсли; 						   
//				КонецЕсли;		
//				
//				Если ВыполнитьОперациюДляОбъекта(Спр, "запись") = 0 Тогда 						
//					Продолжить;								
//				КонецЕсли;
//				
//			ИначеЕсли ПустаяСтрока(ИдКонтактноеЛицо) = 0 Тогда  				
//
//				Спр = СоздатьОбъект("Справочник.кпкКонтактныеЛица"); 
//				
//				СсылкаОбъекта = ПолучитьОбъектПоИдентификатору("кпкКонтактныеЛица", ИдКонтактноеЛицо);
//				
//				Если Спр.НайтиЭлемент(СсылкаОбъекта) = 0 Тогда Продолжить; КонецЕсли;  
//				       
//				НайдПоз = СписокТиповКИ.НайтиЗначение(НРег(ИдТип));
//				Если НайдПоз > 0 Тогда
//					СписокТиповКИ.ПолучитьЗначение(НайдПоз, ТекТип);
//					Если ТекТип = "Телефон" Тогда
//						Если ИдВид = ИдРабочийТелефонКЛ Тогда 
//							Спр.ТелефонРабочий = Представление;  
//						ИначеЕсли ИдВид = ИдМобильныйТелефонКЛ Тогда 
//							Спр.ТелефонМобильный = Представление; 								
//						КонецЕсли;               
//					ИначеЕсли ТекТип = "АдресЭлектроннойПочты" Тогда
//						Если ИдВид = ИдАдресЭлПочтыКЛ Тогда 
//							Спр.ЭлектроннаяПочта = Представление; 
//						КонецЕсли; 							          
//					КонецЕсли; 							              							                                                  								
//				КонецЕсли;		
//				
//				Если ВыполнитьОперациюДляОбъекта(Спр, "запись") = 0 Тогда 						
//					Продолжить;								
//				КонецЕсли;
//				
//			КонецЕсли;
//			
//			ТекстСообщения = "Записана контактная информация для объекта справочника """ + Спр.Вид() + """: " + Строка(СсылкаОбъекта);				
//			ОповеститьОСобытии(ТекстСообщения, "i", 1, СсылкаОбъекта);			
//			
//		КонецЦикла;	
//		
//	КонецЕсли;   
//
//КонецПроцедуры //ЗагрузкаКонтактнойИнформации

//******************************************************************************
Функция XMLЗагрузитьДанныеДляМобильнойТорговли(ФайлЗагрузки,ВыбАгент)   
	
	Если ЗагруженV7Plus = 0 Тогда
        ОповеститьОСобытии("Загрузка данных в формате XML невозможна, т.к. не загружена компонента V7Plus.dll!", "!!!");
		Возврат 0;
	КонецЕсли;

	Анализатор		=	СоздатьОбъект("AddIn.XMLParser");
	
	XML_Документ	=	Анализатор.СоздатьДокумент();
	
	Если ПустоеЗначение(XML_Документ) = 1 Тогда	
		ОповеститьОСобытии("Формат файла не XML!","!");
		Возврат 0; 
	КонецЕсли;

	XML_Документ.Загрузить(ФайлЗагрузки);
	
	ОтветитьНаЗапрос = 0;
	
	ВыборкаДанных = XML_Документ.ВыбратьУзел("DATA");
	Если ПустоеЗначение(ВыборкаДанных) = 1 Тогда
		ОповеститьОСобытии("Файл не является файлом выгрузки данных с КПК!", "!!!");
		Возврат 0; 
	КонецЕсли;    

	ИнициализацияСлужебныхДанныхДляМТ();
	
	ВыборкаКонстант = ВыборкаДанных.ВыбратьУзел("CONSTANTS");
	
	//АгентИд = "";
	//Если ПустоеЗначение(ВыборкаКонстант) = 0 Тогда
	//	
	//	ВыборкаЭлементов = ВыборкаКонстант.ВыбратьУзел("ELEMENTS");
	//	
	//	Если ПустоеЗначение(ВыборкаЭлементов) = 0 Тогда            
	//		
	//		Элементы = ВыборкаЭлементов.ВыбратьУзлы("ITEM");
	//		
	//		Для Сч = 0 По Элементы.КоличествоУзлов() - 1 Цикл
	//			
	//			Эл = Элементы.ПолучитьУзел(Сч);  
	//			
	//			ИдЭлемента = Эл.ПолучитьАтрибут("GUID");
	//			
	//			Если Нрег(ИдЭлемента) = "79c698db-3c55-465e-acfe-4741acdd5655" Тогда
	//				АгентИд  = ВРЕГ(Эл.ПолучитьАтрибут("Value"));							
	//				Прервать;
	//			КонецЕсли;
	//			
	//		КонецЦикла;	
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли; 
	
//	Если м_СпрАгенты.НайтиПоРеквизиту("Идентификатор", АгентИд, 1) = 1 Тогда
	//Если ВыбАгент.Выбран() = 1 Тогда
	//	Сообщить(""+ВыбАгент);
//		АгентИнфо = м_СпрАгенты.ТекущийЭлемент();
//		АгентИзФайла = АгентИнфо.Ссылка;
//		
//		Если ВыбАгент <> АгентИзФайла Тогда			
//			Если АгентИзФайла <> ВыбАгент Тогда
//				ОповеститьОСобытии("Получен файл загрузки от агента: " + АгентИзФайла, "i");
//				ВыбАгент = АгентИзФайла;
//			КонецЕсли;				
//		КонецЕсли; 
//		
	//КонецЕсли; 
	
	ОповеститьОСобытии("Начало загрузки данных от пользователя: " + ВыбАгент.Наименование, "i");
	         
	// Выполняем загрузку данных по справочникам
	
	ВыборкаСпр = ВыборкаДанных.ВыбратьУзел("CATALOGS");
	
	Если ПустоеЗначение(ВыборкаСпр) = 0 Тогда  
		
		ВыбСправочник = ВыборкаСпр.ВыбратьУзлы("CATALOG");
		
		Для Сч = 0 По ВыбСправочник.КоличествоУзлов() - 1 Цикл
			
			Эл = ВыбСправочник.ПолучитьУзел(Сч);  
			
			ИдСпр = Эл.ПолучитьАтрибут("GUID");
			
			ИмяСпр = СоответствиеСпрЗагр.Получить(НРег(ИдСпр));
			
			Если ПустоеЗначение(ИмяСпр) = 1 Тогда Продолжить; КонецЕсли;
			
			//Если ИмяСпр = "КонтактнаяИнформация" Тогда
			//	ЗагрузкаКонтактнойИнформации(Эл)
			//Иначе
			//	ЗагрузитьСправочники(Эл, ИмяСпр);
			//КонецЕсли;			
			
		КонецЦикла;	
		
	КонецЕсли;   
	
	// Выполняем загрузку данных по документам  
	
	КолДок = 0;  
	
	ВыборкаДок = ВыборкаДанных.ВыбратьУзел("DOCUMENTS");
	
	Если ПустоеЗначение(ВыборкаДок) = 0 Тогда  
		
		ВыбДокумент = ВыборкаДок.ВыбратьУзлы("DOCUMENT");
		
		Для Сч = 0 По ВыбДокумент.КоличествоУзлов() - 1 Цикл
			
			Эл = ВыбДокумент.ПолучитьУзел(Сч);  
			
			ИдДок = Эл.ПолучитьАтрибут("GUID");
			
			ИмяДок = СоответствиеДокЗагр.Получить(НРег(ИдДок));
			
			Если ПустоеЗначение(ИмяДок) = 1 Тогда Продолжить; КонецЕсли;
			
			ЗагрузитьДокумент(Эл, ИмяДок, КолДок); 
			
		КонецЦикла;	
		
	КонецЕсли;  	
		
	ОповеститьОСобытии("Данные от пользователя: " + ВыбАгент + " успешно загружены!", "i");
	   	
	ОповеститьОСобытии("Загружено документов: " + КолДок, "i");
	
	ФС.УдалитьФайл(ФайлЗагрузки);
	
	Возврат 1;   	
	
КонецФункции //XMLЗагрузитьДанныеДляМобильнойТорговли  
	
//****************************************************************************** 
// Окончание Процедуры выгрузки данных для Мобильной торговли
//******************************************************************************

//******************************************************************************
//Процедура всегда запускается при открытии обработки
//Инициалдизирует переменные, используемые при загрузке и выгрузке данных в КПК/из КПК
Процедура ИнициализацияСлужебныхДанных()
	//идентификаторы констант в БД Агент+
	//НЕ ИЗМЕНЯТЬ!!!
	

//Пользователи 
//5e53ebd5-bcd6-4aa4-a70c-cd5b3e67e8a8
//
//Склады
//827fe44f-b53a-492f-9feb-89e068e9f3c6
//
//Номенклатура
//3a007c3f-2033-4dac-b703-4deb26e89818
//
//Размещение
//f9a73994-c09d-4260-a871-a3679ba0f2d4
//
//Отбор
//d098d773-0b1c-4351-b9e4-5789fe50418f

	GUID_SYSTEM_AGENTNAME		= "5E53EBD5-BCD6-4AA4-A70C-CD5B3E67E8A8"; //Пользователи
	GUID_SYSTEM_AGENTID			= "A2F737BD-37CD-4F08-910B-9E2A130226D4";
	GUID_SYSTEM_FIRMID			= "30AC90F6-99D2-439F-8AA2-007FF391DEA4";
	GUID_SYSTEM_MSTOREID		= "2AEBEC0B-20B0-46f1-99D9-20661AEDA77A";
	GUID_SYSTEM_SHDATEBG 		= "3935BEAE-9F40-4BA5-BA9E-03F860CC1750";
	GUID_SYSTEM_SHDATEND		= "3343E400-1577-4DDE-9A82-BF1E53267FD6";
	GUID_SYSTEM_TIMEUNLD		= "5A9D4A4C-CC7A-49F8-8C4E-6E23B964CACB";
	GUID_SYSTEM_DISCOUNTS		= "AA82CC96-4485-4351-98D8-BCF2EFFB5F7D";
	GUID_SYSTEM_AMNTPRECISION	= "0980573E-CA63-4C1D-941D-09218063BF40";
	GUID_SYSTEM_MONEYNAME		= "28C8F78E-61BB-4F8A-AA5E-E242B680067B";
	GUID_SYSTEM_FLAGS 			= "A44AFE59-9F8B-47D8-BB94-4CB447170EF2";
	GUID_SYSTEM_PRICECOUNT		= "8166BF59-8507-45B3-AF14-A3D111DBC61C";
	GUID_SYSTEM_VATRATE			= "EE7AE207-9BE2-4494-85C8-433DB1AEA735";
	GUID_SYSTEM_TIMEDLVDISP 	= "24EB38BB-DD8E-4816-9A29-9DA53EEB6BAE";
	GUID_SYSTEM_DSCNTRECISION	= "2841B875-1306-4DE7-BE2D-1954747BC7DA";
	GUID_SYSTEM_PRICEPACKTIME	= "F83718D6-C6E8-404A-AFF5-B4D3A3F9503F";
	GUID_SYSTEM_AUTHOR_TEL		= "2D9C4ED7-6CC4-4145-8721-F344BC24E1FA";
	GUID_SYSTEM_GOODS_PICT_PATH = "FA6B30C2-1D7F-46EC-8EAD-0979D2965747";
	GUID_SYSTEM_WEIGHT_UNIT		= "CF527139-1867-4A66-8C44-ABD2D9AE202C";
	GUID_SYSTEM_MERCH			= "3A27217E-46BD-449E-8C95-574076DB9087";  
	GUID_SYSTEM_USE_UNITS		= "E2D6F319-4907-4CA8-8B6C-85D67F106861";
	GUID_SYSTEM_PHOTOS_PATH 	= "E40BC509-0B89-4AF6-A441-A108774C9482";
	// { Арт 2007-12-26 начало	                                                                 
	GUID_SYSTEM_GPSTRACK_TIME 	= "EDB9AF7D-5B7C-4242-B061-FE396394BA2F";	
	// Арт 2007-12-26 }
	                                                                                                 
	//{ Арт 2008-05-12
	GUID_SYSTEM_MINPRICECODE    = "E99E0731-B47A-46A0-B472-FE5DFB6C79FE";
	// Арт 2008-05-12 }   
	
	
	//{ Арт 2008-12-09 
    GUID_SYSTEM_DOCFLAGS    	= "93EC37AA-EFDB-40E2-A051-C943D943FF93";
	GUID_SYSTEM_PRICEFLAGS      = "5EB0785D-81BA-49E3-A4BC-3CC635AE1EF6";
	GUID_SYSTEM_SAVESCRIPT      = "44E13801-92B7-412D-B6DE-B24BEA890B12";
	GUID_SYSTEM_UDATA_PATH      = "7C3AD3D6-93D9-4C98-B82E-A39DAF16A905";
	GUID_SYSTEM_SELROUTESONLY   = "BC379782-2F6C-4013-8782-B7D0CDDF78BA";
	GUID_SYSTEM_ROUTEDAYS_BACK  = "9868068C-59C8-4759-8C12-F31A691AB042";
	GUID_SYSTEM_ROUTEDAYS_FWD   = "4FFC95CF-2F7B-482D-9F58-DF23C74B68CD";
	GUID_SYSTEM_PRLFLAGS	    = "5EB0785D-81BA-49E3-A4BC-3CC635AE1EF6";
	// Арт 2008-12-09 } 
	                      	       
	//{ Арт 2009-04-29                                                   
	GUID_SYSTEM_SUMPREC	        = "1CECF82E-8FE6-4FD2-BF34-5505293F25BB";
	// Арт 2009-04-29}   
	
	// { Арт 2009-08-04 
	GUID_SYSTEM_CLIENTINFOSCRIPT  = "345F6B09-2789-48CE-872C-3285E960CE0C";  // название скрипта, который будут вызываться при попытке выбора клиента в документе  
	GUID_SYSTEM_TPOINTINFOSCRIPT  = "7EF14974-66DD-4FE5-8B1C-18C3934F2CD6";  // название скрипта, который будут вызываться при попытке выбора торг. точки в документе 
    GUID_SYSTEM_DOCINFOSCRIPT     = "B9548427-A68B-40BB-91DF-0BC7DEE652E4";  // название скрипта, который будут вызываться в журнале документов при позиционировании на док-те.      
	GUID_SYSTEM_RATINGNAME        = "8C6E97FF-B7F1-475B-8E5A-6B34F972316C";	 // название колонки "Рейтинг"
	// Арт 2009-08-04 }
	
	GUID_SYSTEM_GPSTRACK		  = "02FFDF61-FDE0-494A-89DE-4423A653EF2E";  // флаг, определяющий настройки ведения GPS-трекинга
	GUID_SYSTEM_PLANBYGOODSEL     = "0C4172D9-FE75-4646-94EF-B91EC2F8AB6A";  // вариант расчета процента выполнения плана продаж
	GUID_SYSTEM_PRICE_TRANSCYCLE  = "6D05A8AB-4C38-4624-AC4B-510A7EC57EF7";       	
	GUID_SYSTEM_DIVPERIOD 		  = "F64CC9F6-115F-4A54-BE91-64BE761553BA";  // дата и время, начиная с которого нужно фиксировать остатки по регистру товаров в разрезе декад месяца
    GUID_SYSTEM_MSG_PATH          = "A5A1512E-5970-47EB-9BEE-164952F6D9B3";  // путь, куда будут сохраняться html-файлы, распакованные из Messages.zip
	                                 
	GUID_SYSTEM_UNITSCOUNT        = "9B736675-EA66-4BE9-A3A8-2DC3F8DBD491";  // количество выгружаемых единиц измерения
	GUID_SYSTEM_ROUTE_FLAGS       = "7A0AF9CF-BF4C-4BAD-880D-822EA007CAD5";
	GUID_SYSTEM_PRICECODES_LIST   = "C4A4187F-7445-461F-99EE-92E9299BE03A"; // константа для указания коды типов цен, код которых больше 32 
	GUID_SYSTEM_EXCHFLAGS 		  = "994F5CCB-A675-443C-BEA1-A99E3FF827AD"; // константа, влияющая на настройки обмена данными в КПК
	GUID_SYSTEM_USE_AGREEMENTS    = "289F00A5-542A-436E-BE3D-AAF894581BDE"; // константа, определяющая признак использования договоров в КПК
		
	//идентификаторы предопределенных типов реквизитов для документов
	GUID_ATTRTYP_COMMENT	= "A1F1127E-BB91-41DE-87F5-4A00E5C4C409"; //Комментарий к документу
	GUID_ATTRTYP_PAYMNTTYPE	= "60277704-5AB1-4FC5-BF78-9B032723B8B7"; //Вид оплаты документа
	GUID_ATTRTYP_PRICETYPE	= "08449B6B-75CA-464A-8D29-42EE6E94E08F"; //Тип цен
	GUID_ATTRTYP_QUERY		= "1CABA333-1D1D-4F41-86C8-B175E9CEB6B3"; //Запросы из КПК при мобильном доступе к ЦБД

	//идентификатор для реквизита "Свойство" для товаров прайс-листа
	GUID_ATTRTYP_GOODSPROP		= "4FD62396-E3F5-409F-A84E-A390D6876766";
	//идентификатор для реквизита "Категория" для товаров прайс-листа
	GUID_ATTRTYP_GOODSCAT		= "3B4E9F70-9F00-4C15-99B8-81E1DF95DC2C";
	//рацсветки клиентов в окне выбора клиентов
	GUID_ENUM_CLIENTS_COLORS	= "51DA11C0-6B6A-4EE7-BB9E-CB9E5515B536";
	//предупреждения для клиентов в окне выбора клиентов
	GUID_ENUM_CLIENTS_WARNINGS  = "3C1B73C4-7956-4CA2-84C0-118E20847BB6";

	//идентификаторы перечислений, добавляются/задаются программистом
    MY_GUID_ENUM_TPTYPE  		= "5BB29DAF-6769-423A-AEAF-AEFE111736A0"; //типы торговых точек
	MY_GUID_ENUM_DLVTYPE 		= "1124A28B-63EE-4F01-9AFA-37594D06CCCB"; //виды доставки
	MY_GUID_ENUM_VISIT	 		= "FC233E4A-DA80-4481-B280-76CE1855CA9C"; //виды результатов посещений
	
	GUID_ENUM_DOC_CAT			= "03DE83E1-5F17-453A-AD25-AEDFE8CE4D08"; 	// категории документов
	GUID_ENUM_DOC_CAT_COLORS	= "AEFBC3B3-E5A8-4F14-BBBD-6F0D9579D518";	// цвета категорий документов    
	 
	//{ Арт 2008-02-22 
	GUID_ENUM_PLAN_OF_SALES_TYPES ="A1E96461-4933-41EA-86DB-5EBC60B8287B";
	 // Арт 2008-02-22 }
	 
	MY_GUID_ENUM_GTD			  = "EA2D47CD-0E34-4176-8EBF-F4A9AAF2716D"; // перечисление "Номер ГТД"
	MY_GUID_ENUM_STRANA			  = "2BA57449-AECB-4C00-BDA0-E08120251AC7"; // перечисление "Страны-производители"
	
	//{ Арт 2008-12-09 
	GUID_ENUM_ACDISCOUNTS 		  = "FBC2150D-712C-4DAC-B8E5-C3BDEBD03F79"; // описания сводов накопительных скидок
	//  Арт 2008-11-01 }   
	
	//{ Арт 2009-07-30 
	GUID_ENUM_CLIENTS_TPOINTS_CAT = "61D57F23-197E-465D-BE1D-5213E4BF6390";  // категории клиентов (торг.точек)
	GUID_ENUM_RATINGCAT           = "5B01A7CD-C621-4D7D-A26D-8EDA16AB42BA";  // рейтинги товаров            	
	//  Арт 2009-07-30 } 	
	
	//идентификаторы скриптов представления элементов справочников справочников
	GUID_SCRIPT_CLIENTINFO  = "CC56ADA6-3584-40A1-A83E-B5B1F5FA8648";
	GUID_SCRIPT_TPOINTINFO  = "5BD7E0A7-4B93-4962-8A62-1DF6F40FB56C";
	
	//Значения видов документов не менять!!!
	//Виды документов в КПК:
	//АПВидДокЗаявка	 	= "Order";
	//АПВидДокРеализация 	= "Sale";
	//АПВидДокРеализацияР	= "RSale";   //Реализация розничная
	//АПВидДокСчетФ 		= "InvFact"; //виртуальный вид документа, в КПК исползуется только для корректной нумерации документов
	//АПВидДокПКО 		= "Cash";
	//АПВидДокРКО 		= "OutCash"; //виртуальный вид документа, в КПК исползуется только для корректной нумерации документов
	//АПВидДокМерч 		= "Merch";
	//АПВидДокПосещение	= "Visit";
	//АПВидДокПеремещение = "Move";
	//АПВидДокПоступление = "Arrival";
	//АПВидДокИннвентаризация	= "Inventory";
	//
	//списСоотвВидовДок = СоздатьОбъект("СписокЗначений"); //список соответствий видов документов Агент+ и ЦБД
	//
	////Нижеследующие значения требуется выставить в соответствии с видами документов в Вашей конфигурации 1С
	//списСоотвВидовДок.ДобавитьЗначение(АПВидДокЗаявка, 			"ЗаявкаПокупателя");
	//списСоотвВидовДок.ДобавитьЗначение(АПВидДокРеализация, 		"Реализация");
	//списСоотвВидовДок.ДобавитьЗначение(АПВидДокРеализацияР,		"ОтчетККМ");
	//списСоотвВидовДок.ДобавитьЗначение(АПВидДокСчетФ, 			"СчетФактураВыданный");
	//списСоотвВидовДок.ДобавитьЗначение(АПВидДокПКО, 			"ПКО");
	//списСоотвВидовДок.ДобавитьЗначение(АПВидДокРКО, 			"РКО");
	//списСоотвВидовДок.ДобавитьЗначение(АПВидДокМерч, 			"кпкМерчендайзинг");
	//списСоотвВидовДок.ДобавитьЗначение(АПВидДокПосещение, 		"кпкПосещение");
	//списСоотвВидовДок.ДобавитьЗначение(АПВидДокПеремещение, 	"ПеремещениеТМЦ");
	//списСоотвВидовДок.ДобавитьЗначение(АПВидДокПоступление,     "ВозвратОтПокупателя");
	//списСоотвВидовДок.ДобавитьЗначение(АПВидДокИннвентаризация, "ИнвентаризацияТМЦ");
	//
	////процедура должна вызываться только после инициализации переменных вида АПВидДок...
	//ПроверкаСправочникаНумераторов();
	
КонецПроцедуры 

////******************************************************************************
//// ПриПовторномОткрытии()
//// предопределенная процедура
//Процедура ПриПовторномОткрытии()
//  	Параметр = Форма.Параметр;
//  	ОбработкаПараметраФормы(Параметр);
//КонецПроцедуры
  
//******************************************************************************
Процедура ПодготовкаФормы()
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Обмен",    "Обмен данными");
	//Форма.Закладки.ДобавитьЗначение("Фильтр",   "Фильтр");
	Форма.Закладки.ДобавитьЗначение("Настройки","Настройки");
	ПриВыбореЗакладки(1,"Обмен");
	списСпособОбменаВыбор();
	
КонецПроцедуры // ПодготовкаФормы()  

//******************************************************************************
// ПриОткрытии()
Процедура ПриОткрытии()
	
	НаборПрав = ВРег(НазваниеНабораПрав(1));
	Если (НаборПрав = "") Или (Найти(НаборПрав, "АДМИНИСТРАТОР") <> 0) Тогда
		Доступ = 1;
	Иначе
		Доступ = 0;
	КонецЕсли;
	
	//Форма.флОбновлять.Доступность(Доступ);
	//Форма.флСтартНомера.Доступность(Доступ);
	//Форма.СрокПеремещений.Доступность(Доступ);
	//Форма.флТолькоНовыеПеремещения.Доступность(Доступ);
	
	//параметры выгрузки документов "Перемещение"
	//СрокПеремещений 			= Константа.КпкСрокПеремещений;
	//флТолькоНовыеПеремещения	= 1;
	//
	//ВыбГруппаКлиентов = Константа.КПКГруппаНовыхКлиентов;
	
	ИнициализацияСлужебныхДанных();
	
	//флОбновлятьТабСтартНом 	= 1;
	//флВыгружатьШтрихКоды	= 1;
	
	//Если Метаданные.Константа("кпкДатаИсторииПродаж").Выбран() = 1 Тогда
	//    Дата2 = Константа.кпкДатаИсторииПродаж;
	//	Если Число(Дата2) < 1 Тогда
    //        Дата2 = ПолучитьДатуТА();
	//	КонецЕсли;
	//Иначе
		Дата2 = ПолучитьДатуТА();
	//КонецЕсли;
	            
	Если (ПустоеЗначение(Дата1) = 1) Тогда
		Дата1 = ДобавитьМесяц(Дата2, -2) + 1;	
	КонецЕсли;                          
	
	//Если ПустоеЗначение(КолИнтер) = 1 Тогда	
	//	КолИнтер = 4;
	//КонецЕсли;
	
	//глубинаМаршрутов = 14; //выгружаем маршруты на две недели вперед
	//
	//Если (ПустоеЗначение(ДатаМ1) = 1) или (НачМесяца(ТекущаяДата()) <> НачМесяца(ДатаМ1)) Тогда	
	//	ДатаМ1 = ТекущаяДата();                 
	//КонецЕсли;
	//
	//Если (ПустоеЗначение(ДатаМ2) = 1) Тогда	
	//	ДатаМ2 = ДатаМ1 + глубинаМаршрутов;     
	//КонецЕсли;      
	//
	//Если ТекущаяДата() > ДатаМ2 Тогда
	//	ДатаМ2 = КонМесяца(ТекущаяДата());
	//КонецЕсли;
	
	//ДатаМ2 = Мин(КонМесяца(ДатаМ1), ДатаМ2);
	
	//флНачМесяца = 1;	//сделано для удобства демонстрации
	//флНачМесяцаВыбор(); //
		
	//ПочтаДата1 = ТекущаяДата();
	//ПочтаДата2 = ПочтаДата1;
	//
	флАвтоОбменСКПК 	 = 1;	
	флАрхив			  	 = 1;	
	
	ЗначениеПометки = 2; 
	ЗначениеНеПометки = 1;  
	
	//ВидимостьПериодаЗаданий();
	//  	
	//Если ПустоеЗначение(НачДатаЗадания) = 1 Тогда	
	//	НачДатаЗадания = ТекущаяДата();     
	//КонецЕсли; 
	//
	//Если ПустоеЗначение(КонДатаЗадания) = 1 Тогда	
	//	КонДатаЗадания = ТекущаяДата();     
	//КонецЕсли;
	
	//ТабПочта.Очистить();
	//ТабПочта.НоваяКолонка("Пометка","Число",1,0,"",4);
	//ТабПочта.НоваяКолонка("ОтпрДата","Дата",,,"Дата",12);
	//ТабПочта.НоваяКолонка("ОтпрВремя","Строка",5,,"Время",9);
	//ТабПочта.НоваяКолонка("Отправитель","Строка",,,"Отправитель",20);
	//ТабПочта.НоваяКолонка("Тема","Строка",,,"Тема",30);
	//ТабПочта.НоваяКолонка("ВремяВнутр","Строка");
	//ТабПочта.ВыводитьПиктограммы("Пометка");
	//ТабПочта.ВидимостьКолонки("ВремяВнутр",0);
	//ТабПочта.Фиксировать(0,1);
	//
	//ТабФТП.Очистить();
	//ТабФТП.НоваяКолонка("Пометка","Число",1,0,"",4);
	//ТабФТП.НоваяКолонка("Агент","Справочник",,,"Агент",30);
	//ТабФТП.НоваяКолонка("Данные","Строка",,,"Есть данные",16);
	//ТабФТП.НоваяКолонка("ФтпПапка","Строка",,,"FTP-Папка",20);
	//ТабФТП.ВыводитьПиктограммы("Пометка");
	//ТабФТП.Фиксировать(0,1);
	//
	ТабСерв.Очистить();
	ТабСерв.НоваяКолонка("Пометка","Число",1,0,"",4);
	ТабСерв.НоваяКолонка("Агент","Справочник",,,"Пользователь",25);
	ТабСерв.НоваяКолонка("Данные","Строка",,,"Есть данные",16);
	ТабСерв.НоваяКолонка("Папка","Строка",,,"Папка",10);
	ТабСерв.НоваяКолонка("Получено","Строка",,,"Получено В",15);
	ТабСерв.ВыводитьПиктограммы("Пометка");
	ТабСерв.Фиксировать(0,1);
	
	КаталогPPC = КаталогИБ() + "PocketPC";//каталог файлов для КПК
	Если ФС.СуществуетФайл(КаталогPPC) = 0 Тогда
	    ФС.СоздатьКаталог(КаталогPPC);
	КонецЕсли;
	КаталогPPC = КаталогPPC + "\";
	КПКОбъект  = 0;
	
	//списВидВыгрузки.ДобавитьЗначение("Все",			  "Все данные (с расчетом истории продаж)");
	//списВидВыгрузки.ДобавитьЗначение("ИсторияИзФайла","Все данные (история продаж из автовыгрузки)");
	//списВидВыгрузки.ДобавитьЗначение("История",		  "Только история продаж");
	//списВидВыгрузки.ДобавитьЗначение("Запрос",		  "Только запрошенные данные"); 
	//
	//Если Метаданные.Константа("кпкДатаИсторииПродаж").Выбран() = 1 Тогда
	//	списВидВыгрузки.ТекущаяСтрока(1);
	//Иначе     
	//	списВидВыгрузки.ТекущаяСтрока(2);
	//КонецЕсли;
	
	списСпособОбмена.ДобавитьЗначение("ПрямоеПодключение", "Прямое подключение КПК к компьютеру");
	//списСпособОбмена.ДобавитьЗначение("Почта", 	"Электронная почта");
	//списСпособОбмена.ДобавитьЗначение("ФТП", 	"FTP");
	списСпособОбмена.ДобавитьЗначение("Сервер", "Агент Плюс СОД");
	
	Если Константа.КпкСпособОбмена > 3 Тогда
		Константа.КпкСпособОбмена = 0;
	КонецЕсли;    
	
	СписокАгентов = СоздатьОбъект("СписокЗначений"); 
	
	Спр = СоздатьОбъект("Справочник.кпкАгенты");
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент() = 1 Цикл
		Если Спр.ПометкаУдаления() = 1 Тогда
			Продолжить;
		КонецЕсли;
		Если Спр.Ссылка.Выбран() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СписокАгентов.ДобавитьЗначение(Спр.ТекущийЭлемент().Ссылка);
	КонецЦикла;
	
	Форма.Заголовок(" - (Ver. " + Версия + ")", 1);
	
	списСпособОбмена.ТекущаяСтрока(Константа.кпкСпособОбмена + 1);   
	
	Параметр = Форма.Параметр;
	ТипПараметра = ТипЗначенияСтр(Параметр);
	Если ТипПараметра = "Строка" Тогда //открытие формы со строковым параметром (открытие из программного модуля)
		Параметр = ВРег(Параметр);
	    Если (Параметр = "ИСТОРИЯ_ПРОДАЖ") Или (Параметр = "ИСТОРИЯПРОДАЖ") Тогда //автовыгрузка истории продаж
			//ЗаписьЖурналаРегистрации("Запуск автовыгрузки истории продаж.","Отчет/Обработка","Запуск",,3);
			//СписВидВыгрузки.ТекущаяСтрока(3);//выгрузка только истории
			//ОповеститьОСобытии("Выгрузка истории продаж для КПК (версия " + Версия + "):","i");
	        //СтатусВозврата(0);
			//Спр = СоздатьОбъект("Справочник.кпкАгенты");
			//Кол = 0;
			//Спр.ВыбратьЭлементы();
			//Пока Спр.ПолучитьЭлемент() = 1 Цикл
			//	Если (Спр.ЭтоГруппа() = 1) Тогда
			//	    Продолжить;
			//	КонецЕсли;
			//	ВыбАгент = Спр.ТекущийЭлемент();
			//	ВыбАгентВыбор();
			//	Кол = Кол + 1;
			//	ОповеститьОСобытии(Строка(Кол) + ". Выгрузка истории продаж для агента " + СокрЛП(ВыбАгент.Наименование) + " в файл: " + СимволТабуляции + ВернутьИмяФайлаВыгрузки(),"i");
			//	ВыгрузитьДанные();
			//	ЗаписьЖурналаРегистрации("Выгружена история продаж для "+СокрЛП(ВыбАгент.Наименование),"Отчет/Обработка","Завершение",,3);
			//КонецЦикла;
			//ОповеститьОСобытии("Выгрузка истории продаж завершена.","i");
			//ЗаписьЖурналаРегистрации("Завершение автовыгрузки истории продаж.","Отчет/Обработка","Завершение",,3);
			//Возврат;
		ИначеЕсли (Найти(Параметр,"ОТПРАВИТЬ") <> 0) Или (Найти(Параметр,"ПРИНЯТЬ") <> 0) Или (Найти(Параметр,"АВТО") <> 0) Тогда //авторассылка или автоприем по мобильному обмену
			СтатусВозврата(0);
			
			Если Найти(Параметр,"ОТПРАВИТЬ") <> 0 Тогда
			    Рассылка 	= 1;
				Прием 	 	= 0;
			ИначеЕсли Найти(Параметр,"ПРИНЯТЬ") <> 0 Тогда
			    Рассылка 	= 0;
				Прием 	 	= 1;
			Иначе
			    Рассылка 	= 0;
				Прием 	 	= 0;
			КонецЕсли;
			
			Результат = 1;
//			Результат = ЗагрузитьКомпоненту(КПКОбъект, "APPlus.dll");
			Если Результат = 0 Тогда
			    Возврат;
			КонецЕсли;    
			
			ЗагруженV7Plus = 1;
			Если ЗагруженV7Plus = 0 Тогда
			    Возврат;
			КонецЕсли;  
			
			V7SysInfo = СоздатьОбъект("AddIn.V7SysInfo");

			КПКОбъект = СоздатьОбъект("AddIn.CeDataExch");
			
			//Если Найти(Параметр,"ПОЧТА") <> 0 Тогда //для почты в этой конфигурации поддержиается только рассылка
			//	списСпособОбмена.ТекущаяСтрока(2); //обмен через почту
			//	ЗаписьЖурналаРегистрации("Запуск email-рассылки для КПК.","Отчет/Обработка","Запуск",,3);
			//ИначеЕсли (Найти(Параметр,"FTP") <> 0) Или (Найти(Параметр,"ФТП") <> 0) Тогда
			//	списСпособОбмена.ТекущаяСтрока(3); //обмен через FTP
			//	Если Рассылка = 1 Тогда
			//	    ЗаписьЖурналаРегистрации("Запуск ftp-рассылки для КПК.","Отчет/Обработка","Запуск",,3);
			//	Иначе
			//		ЗаписьЖурналаРегистрации("Запуск ftp-приема для КПК.","Отчет/Обработка","Запуск",,3);
			//	КонецЕсли;
			//ИначеЕсли (Найти(Параметр,"АПС") <> 0) Или (Найти(Параметр,"СЕРВЕР") <> 0) Тогда
				списСпособОбмена.ТекущаяСтрока(2); //обмен через Агент+ Сервер
				Если Рассылка = 1 Тогда
				    ЗаписьЖурналаРегистрации("Запуск сервер-рассылки для КПК.","Отчет/Обработка","Запуск",,3);
				ИначеЕсли Прием = 1 Тогда
					ЗаписьЖурналаРегистрации("Запуск сервер-приема для КПК.","Отчет/Обработка","Запуск",,3);
				Иначе
					//Агент+ Сервер будет оповещять 1С:Прдеприятие о получении новых данных через обработчик внешних событий
					ЗаписьЖурналаРегистрации("Запуск автооповещения от сервера для КПК.","Отчет/Обработка","Запуск",,3);
				КонецЕсли;
			//Иначе
			//	ОповеститьОСобытии("Неизвестный параметр запуска обработки обмена данными! Обработка не запущена!", "!!!");
			//	Возврат;
			//КонецЕсли;
			
			СпособОбмена = списСпособОбмена.ПолучитьЗначение(списСпособОбмена.ТекущаяСтрока());
			//Если СпособОбмена = "Почта" Тогда
			//    ПочтаОтправить("Рассылка"); //для почты в этой конфигурации поддержиается только рассылка
			//ИначеЕсли СпособОбмена = "ФТП" Тогда
			//	Если Рассылка = 1 Тогда
			//		ФТПОтправить(1);//полная отправка данных
			//	Иначе
			//		ФТППолучить(1);//полная загрузка данных
			//	КонецЕсли;
			//ИначеЕсли СпособОбмена = "Сервер" Тогда
				//ВНИМАНИЕ!!! Имейте в виду, что Агент+ Сервер позволяет так же и оповещять 1С:Прдеприятие о получении новых данных через обработчик внешних событий
				Если Рассылка = 1 Тогда
					АПСОтправить(1);//полная отправка данных
				ИначеЕсли Прием = 1 Тогда
					АПСПолучить(1);//полная загрузка данных
				Иначе // Включение автооповещение от сервера
					ПодготовкаФормы();					
					флАвтообменССервером = 1;
					флАвтообменССерверомВыбор();
				КонецЕсли;
			//КонецЕсли;
			
			Если (Рассылка = 1) Или (Прием = 1) Тогда
			    ЗаписьЖурналаРегистрации("Завершение мобильного обмена для КПК.","Отчет/Обработка","Запуск",,3);
			Иначе
				СтатусВозврата(1);
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли; 
		
	Иначе //обычное открытие формы или открытие с параметром типа "СписокЗначений"
		
		КомпонентаЗагружена = 1; //ЗагрузитьКомпоненту(КПКОбъект, "APPlus.dll");
		Если КомпонентаЗагружена = 0 Тогда
			флАвтоОбменСКПК = 0;			
			Форма.флАвтоОбменСКПК.Доступность(0);			
		КонецЕсли;  
		
		ЗагруженV7Plus = 1; //ЗагрузитьКомпоненту(V7SysInfo, "V7Plus.dll");

		Если ЗагруженV7Plus = 0 Тогда
		    ОповеститьОСобытии("Поддержка формата обменами данных XML и почты не возможна!", "!!!", 0);
		Иначе
		    V7SysInfo = СоздатьОбъект("AddIn.V7SysInfo");
		КонецЕсли;

		КПКОбъект = СоздатьОбъект("AddIn.CeDataExch");
		
	КонецЕсли;     
	
	ПодготовкаФормы();
	
	//Форма.ВыбГруппаКлиентов.ВыборГруппы(1);
	
	Если Константа.КпкСпособОбмена = 3 Тогда	
		флАвтообменССерверомВыбор();
	КонецЕсли;
	
	Если ТипПараметра = "СписокЗначений" Тогда
		ОбработкаПараметраФормы(Параметр);
	КонецЕсли; 
	
КонецПроцедуры // ПриОткрытии()

// ===============================
// Назначение:
//		
// Аргументы:
//		
Процедура кнДействия()
	Значение = "";
	спВопрос = СоздатьОбъект("СписокЗначений"); 
	спВопрос.ДобавитьЗначение("Отчет ""Журнал обмена""");
	спВопрос.ДобавитьЗначение("Открыть список загруженных документов");
	Если спВопрос.ВыбратьЗначение(Значение,,,,1) = 1 Тогда
		Если Значение = "Журнал обмена" Тогда
			СформироватьОтчетПоИсторииОбмена();
		ИначеЕсли Значение = "Список загруженных документов" Тогда   
			ОткрытьСписокЗагруженныхДокументов();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //кнДействия


/////////////////////////////////////////////////////////////////// 
///////////////////////////////////////////////////////////////////

Т_		= СимволТабуляции;
Версия 	= "0.0.1";   

ТаблицаКатегорий = СоздатьОбъект("ТаблицаЗначений");

ТаблицаКатегорий.НоваяКолонка("Номер", 	      "Число", 3, 0); 
ТаблицаКатегорий.НоваяКолонка("Наименование", "Строка", 50, 0); 
ТаблицаКатегорий.НоваяКолонка("Категория",    "Справочник");

//ИспТочек = Константа.кпкРежимТоргТочек; 
//РежимЕд  = Константа.кпкРежимИспользованияЕдИзм;              

КоличествоПопыток   = 2;   
ПаузаМеждуПопытками = 5;  
                     
флВыгружатьШтрихКоды = 1;
флОчищатьСправочникиПередЗагрузкой = 1;

СписокИдФотоЗаданий = СоздатьОбъект("СписокЗначений");

ВидАгентПлюс15 = Перечисление.кпкМобильныеПриложения.АгентПлюс15; 
ВидАгентПлюсМТ = Перечисление.кпкМобильныеПриложения.АгентПлюсМТ;  
ВидАгентПлюсРМК = Перечисление.кпкМобильныеПриложения.РМК;

ТипОбмена = 0;      

//тзТипыЦен = СоздатьОбъект("ТаблицаЗначений");
//тзТипыЦен.НоваяКолонка("ТипЦены");	
//тзТипыЦен.НоваяКолонка("Код");	     

//ИспГПС = Константа.кпкИспользоватьГПС;    

НастройкиАгента = "";