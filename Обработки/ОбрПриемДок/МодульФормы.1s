//*******************************************
Перем тпДок, Источник;
Перем ТекущийСлой;
Перем ТекКомплектовщик;
Перем ТекущийДокПоставки;
Перем ПередатьФокус;
Перем ТекущийДокПоставкиСтар;

Процедура НастроитьОкна(Показать=1) Далее
Процедура кнСбросШтрихкода() Далее
Процедура ЗаполнитьТПДок(Обновить=0) Далее
	
Функция УстановитьСостояние(Сост,ДокВид)
	спрСост=СоздатьОбъект("Справочник.СостоянияДокументов");
	спрСост.НайтиПоНаименованию(ДокВид); 
	спрСост.ИспользоватьРодителя(спрСост.ТекущийЭлемент());
	спрСост.НайтиПоНаименованию(Сост,1);
	Возврат спрСост.ТекущийЭлемент();
КонецФункции
Функция ПроверкаПриема(пТекущийДокПоставки,пКомплектовщик="")
	Перем текст;
	
	пДок=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос=СоздатьОбъект("ODBCRecordSet");
	
	Если пКомплектовщик="" Тогда
		текст="";
	Иначе
		текст="|AND ($ПрихНаклМобил.Комплектовщик = :Комплектовщик)";
		Запрос.УстановитьТекстовыйПараметр("Комплектовщик",пКомплектовщик);
	КонецЕсли;
	
	//Если пПроведен=0 Тогда
	//	текст2="|	AND (Журнал.ISMARK = 0)";
	//ИначеЕсли пПроведен=1 Тогда	
	//	текст2="|	AND (Журнал.ISMARK = 1)";
	//КонецЕсли;
	
	ТекстЗапроса="SELECT ПрихНаклМобил.IDDOC [Ссылка $Документ.ПрихНаклМобил]
		|FROM _1SJOURN AS Журнал
		|	INNER JOIN $Документ.ПрихНаклМобил AS ПрихНаклМобил ON Журнал.IDDOC = ПрихНаклМобил.IDDOC
//		+текст2+"
		|	AND ($ПрихНаклМобил.ДокументОснование = $ВидДокумента36.ОжидаемаяПоставка + :ДокОсн)"
		+текст+"
		|";	

	//ТекстЗапроса="SELECT ПрихНаклМобил.IDDOC [Ссылка $Документ.ПрихНаклМобил]
	//	|	, $ПрихНаклМобил.ДокументОснование [ДокументОснование $Документ]
	//	|	, (Журнал.CLOSED & 1) ДокументПроведён
	//	|FROM $Документ.ПрихНаклМобил AS ПрихНаклМобил With (NOLOCK)
	//	|	LEFT OUTER JOIN _1SJOURN AS Журнал With (NOLOCK) ON ПрихНаклМобил.IDDOC = Журнал.IDDOC
	//	|WHERE ($ПрихНаклМобил.ДокументОснование = $ВидДокумента36.ОжидаемаяПоставка + :ДокОсн)
	//	|
	//	|
	//	|"
		
		
	
	Запрос.УстановитьТекстовыйПараметр("ДокОсн",пТекущийДокПоставки);
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,пДок);
	Возврат пДок;
КонецФункции
Функция ЗадачаНаВнешнююКоманду(пДок="",пКомплектовщик,Команда="")
	
	Если Команда="Новый" Тогда
	//	пДок=СоздатьОбъект("Документ.ПрихНаклМобил");
	//	пДок.Новый();
	//	пДок.Записать();
		
		
	//	Док=СоздатьОбъект("Документ.ПрихНаклМобил");
	//	Док.НайтиДокумент(пДок);
		сзПараметр= СоздатьОбъект("СписокЗначений");
			сзПараметр.ДобавитьЗначение(Команда,"Команда");
			сзПараметр.ДобавитьЗначение(пКомплектовщик,"пКомплектовщик");
			сзПараметр.ДобавитьЗначение(ТекущийДокПоставки,"пДокПоставки");
	//		сзПараметр.ДобавитьЗначение(ВзятьКонтекст(ТекущийДокумент()),"Конт");	
		Возврат ОткрытьФормуМодально("Документ.ПрихНаклМобил",сзПараметр);
		
	ИначеЕсли Команда="Открыть" Тогда
		Возврат ОткрытьФормуМодально(пДок,сзПараметр);
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции


//{****Кнопки****
Процедура кнВыбратьДок()
	Перем ИТ;
	
//	ДокОсн = СоздатьОбъект("Документ.ОжидаемаяПоставка");
//	ДокОсн.НайтиПоНомеру("P1OT-00001");
	ИТ=ПроверкаПриема(ТекущийДокПоставки); //Внимание надо ввести комплектовщика.
	//ИТ.Показать();
	НайденДок=ПолучитьПустоеЗначение();
	Если ИТ.КоличествоСтрок()=0 Тогда
		ЗадачаНаВнешнююКоманду(,ТекКомплектовщик,"Новый");//нет документов
	Иначе
		ИТ.ВыбратьСтроки();
		Пока ИТ.ПолучитьСтроку() = 1 Цикл
			ДокументПР=ИТ.ПолучитьЗначение(,1);
			Если ДокументПР.Комплектовщик=ТекКомплектовщик Тогда
				НайденДок=ДокументПР;
				Прервать;
			КонецЕсли;			
		КонецЦикла;		
		
		Если ПустоеЗначение(НайденДок)=0 Тогда
			Док=НайденДок;
			ЗадачаНаВнешнююКоманду(Док,ТекКомплектовщик,"Открыть");//сущесвует такой документ
		Иначе
			//Док=ИТ.ПолучитьЗначение(1,1);
			//ЗадачаНаВнешнююКоманду(Док,ТекКомплектовщик,"Открыть");//сущесвует такой документ
			ЗадачаНаВнешнююКоманду(,ТекКомплектовщик,"Новый");//нет документов
		КонецЕсли;
	КонецЕсли;
	
	НастроитьОкна(0);
	ПередатьФокус = "тпДок_"; 
	Форма.Закрыть(0);

КонецПроцедуры
Процедура кнВыход()
	ТекущийСлой="слОбложка";
	Форма.ИспользоватьСлой(ТекущийСлой,2);
КонецПроцедуры
Процедура кнЗакрыть()
	Перем расш;
	Форма.Закрыть(0);
	СтатусВозврата(0);
	ЗавершитьРаботуСистемы(0);
//	расш=СоздатьОбъект("РасширениеФормы");
//	расш.Закрыть();
КонецПроцедуры

Процедура кнПрием()
	ТекущийСлой="слПриемТовара";
	Форма.ИспользоватьСлой(ТекущийСлой,2);
	ПередатьФокус = "тпДок_"; 
	Форма.Закрыть(0);

КонецПроцедуры
//======================================================================
Процедура кнКомплектация()
	ОткрытьФормуМодально("Обработка.ОбрКомплДокМобил",ТекКомплектовщик,);	
КонецПроцедуры // кнКомплектация

//======================================================================


Процедура кнИнвентаризСлВед()
	ОткрытьФормуМодально("Обработка.ОбрИнвентаризМобил",ТекКомплектовщик,);
КонецПроцедуры // кнИнвент

Процедура кнОпрПоШтрихкоду()
	ТекущийСлой="слИнвентаризации";
	Форма.ИспользоватьСлой(ТекущийСлой,2);
//	ПередатьФокус = "тпДок_"; 
//	Форма.Закрыть(0);	
КонецПроцедуры // кнИнвент

Процедура кнИнвент()
	ТекущийСлой="слВыборИнвентаризации";
	Форма.ИспользоватьСлой(ТекущийСлой,2);
//	ПередатьФокус = "тпДок_"; 
//	Форма.Закрыть(0);	
КонецПроцедуры // кнИнвент


//======================================================================
Процедура ОтправитьСообщениеСтаршимОператрам()

	спр=СоздатьОбъект("Справочник.Должности");
	спр.НайтиПоКоду(37,); //galvenais operators PPD sklad


	л_ИТ=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос=СоздатьОбъект("ODBCRecordSet");
	
	
	ТекстЗапроса="SELECT Сотрудники.ID [Ссылка $Справочник.Сотрудники]
		|FROM $Справочник.Сотрудники AS Сотрудники With (NOLOCK)
		|WHERE ($Сотрудники.Должность = :Должность)
		|	AND (Сотрудники.ISMARK = 0)
		|";	
	
	Запрос.УстановитьТекстовыйПараметр("Должность",спр.ТекущийЭлемент());
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,л_ИТ);
//	л_ИТ.Показать();
	л_ИТ.ВыбратьСтроки();
	Пока л_ИТ.ПолучитьСтроку() = 1 Цикл
		Заголовок = Шаблон("Prijem tovara skanerom");
		ТекстСообщения=Шаблон("[ТекущееВремя()]. [ТекКомплектовщик]. Klients. [ТекущийДокПоставки.Клиент.ПоАлфавиту] ozidaemaja postavka [ТекущийДокПоставки.НомерДок] tovar prinjat" );
		Рез=глОтправитьСообщение(Заголовок,ТекстСообщения,л_ИТ.Ссылка,"Email");	
//		Рез=глОтправитьСообщение(Заголовок,ТекстСообщения,,"Email");
	КонецЦикла;
		

	
КонецПроцедуры // ОтправитьСообщениеСтаршимОператрам
Процедура кнСнять()

	ИТ=ПроверкаПриема(ТекущийДокПоставки);
	Если ИТ.КоличествоСтрок()>0 Тогда
		Если ТекущийДокПоставкиСтар=ТекущийДокПоставки Тогда
			Возврат;
		КонецЕсли;
//	КонецЕсли;
	
		Если глПолучитьСостояниеДокумента(ТекущийДокПоставки)=УстановитьСостояние("Принят","ОжидаемаяПоставка") Тогда
			Предупреждение("Документ уже принят");
			ЗаполнитьТПДок();
			Форма.Обновить();
			Возврат;
		КонецЕсли;
	
		ДокКомп=СоздатьОбъект("Документ.СостояниеДок");
	//	НайденДокКомпл=0;
	//	ДокПодч=СоздатьОбъект("Документ");
	//	ДокПодч.ВыбратьПодчиненныеДокументы(ТекущийДокумент().ДатаДок,,ТекущийДокумент());
		//	Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
		////		Если (ДокПодч.Вид()="СостояниеДок") И (ДокПодч.Проведен()=1) Тогда
		//		Если ДокПодч.Вид()="СостояниеДок" Тогда
		//			ДокКомп.НайтиДокумент(ДокПодч.ТекущийДокумент());
		//			НайденДокКомпл=1;
		//		КонецЕсли;	
		//	КонецЦикла;	
		//	
	
		ДокКомп.Новый();
		ЗаполнитьШапку(ДокКомп); 
		ДокКомп.ДокументОснование=ТекущийДокПоставки;

		ДокКомп.СостояниеДок=УстановитьСостояние("Принят","ОжидаемаяПоставка");
		ДокКомп.АвтоВремяТекущее();
		ОбъектЗаписать(ДокКомп,);
		ДокКомп.АвтоВремяТекущее();
		ДокКомп.Провести(1);
		
		
		ОтправитьСообщениеСтаршимОператрам();
		ТекущийДокПоставкиСтар=ТекущийДокПоставки;
		ЗаписьЖурналаРегистрации( "Состояние документа "+ДокКомп.НомерДок+" по ожидаемой поставке "+ТекущийДокПоставки.НомерДок,, "Ожидаемая поставка", ТекущийДокПоставки, 2 );
	Иначе
		Предупреждение("Нет приемных документов");
	КонецЕсли;	
	ЗаполнитьТПДок();
	Форма.Обновить();
	
КонецПроцедуры // кнСнять

//}****Кнопки****

//{****Инвентаризация****

Функция ПоискВесовогоКода(п_Код)

	ТекстЗапроса="SELECT Номенклатура.ID [Ссылка $Справочник.Номенклатура]
		|FROM $Справочник.Номенклатура AS Номенклатура With (NOLOCK)
		|WHERE ($Номенклатура.ВесовойКод = :пКод)
		|";
	ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");
	ЗапросСКЛ.УстановитьТекстовыйПараметр("пКод",п_Код);
	л_КодТовара = ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	
	Возврат л_КодТовара;
КонецФункции // ПоискВесовогоКода
Функция ПоискВесовогоКодаSQL(п_Код)

	л_КодТовара="";
	
	ТекстЗапроса="SELECT  ID [Товар $Справочник.Номенклатура]
		|FROM RTPOS_CA.dbo.foodlv_items
		|WHERE (GLID = :пКод)
		|";
	ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");
	ЗапросСКЛ.УстановитьТекстовыйПараметр("пКод",п_Код);
	л_КодТовара = ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	
	Возврат л_КодТовара;
КонецФункции // ПоискВесовогоКода


Функция ПоискВСправочнике(пШтрихкод="")//включая подчиненые через выбор элементов
	Перем ИмяРекв,ПрефКода,ШтрихКодДляПоиска;

	//если в строке штрихкода спереди идут 0 (ставятся, если вес меньше 1 кг)
	Если Лев(Строка(пШтрихКод),2)="02" Тогда
		позСтр=Найти(пШтрихКод,"2"); //если весовой товар
		Если позСтр>0 Тогда
			длинаСтр=СтрДлина(пШтрихКод);
			БезНулей=Прав(пШтрихКод,длинаСтр-позСтр+1);
			пШтрихКод=БезНулей;			
		КонецЕсли;
	КонецЕсли;
	
	ПрефКода=Лев(Строка(пШтрихКод),2); //поиск весового товара

	Вес=0;
		//{ Обработка весового товара 
	Если (ПрефКода="29") ИЛИ (ПрефКода="28") ИЛИ (ПрефКода="23") ИЛИ (ПрефКода="24")  ИЛИ (ПрефКода="25")  Тогда

		Сообщить("Штрихкод:"+пШтрихКод);
		л_Товар=ПоискВесовогоКода(Число(Сред(пШтрихКод,3,6)));
		Сообщить("Весовой код:"+Сред(пШтрихКод,3,6));
		Сообщить(л_Товар);
		Если ПустоеЗначение(л_Товар)=0 Тогда
			Если л_Товар.Выбран()=1 Тогда
				Возврат л_Товар;
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли (ПрефКода="21") ИЛИ (ПрефКода="22")ИЛИ (ПрефКода="26") Тогда
		Сообщить("Штрихкод:"+пШтрихКод);
		л_Товар=ПоискВесовогоКодаSQL(Число(Сред(пШтрихКод,3,6)));
		Сообщить("Весовой код:"+Сред(пШтрихКод,3,6));
		Сообщить(л_Товар);
		Если ПустоеЗначение(л_Товар)=0 Тогда
			Если л_Товар.Выбран()=1 Тогда
				Возврат л_Товар;
			КонецЕсли;
		КонецЕсли;	
//} Обработка весового товара		
	Иначе
		ШтрихКодДляПоиска=пШтрихКод;
	КонецЕсли;

	
	спрТовар = СоздатьОбъект("Справочник.Номенклатура");
	спрПодч=СоздатьОбъект("Справочник.ШтрихКоды");
	
	ИмяРекв = "Штрихкод";
	ИмяРеквКод = "КодТовара";
	ФлагГлобПоиска = 1; 
	Если спрТовар.НайтиПоРеквизиту(ИмяРекв,СокрЛП(ШтрихКодДляПоиска),ФлагГлобПоиска)=1 Тогда
		Возврат(спрТовар.ТекущийЭлемент());
 	ИначеЕсли спрТовар.НайтиПоРеквизиту(ИмяРеквКод,Прав(СокрЛП(ШтрихКодДляПоиска),7),ФлагГлобПоиска)=1 Тогда
 		Возврат(спрТовар.ТекущийЭлемент());
	ИначеЕсли спрПодч.НайтиПоКоду(СокрЛП(ШтрихКодДляПоиска))=1 Тогда
 		Возврат(спрПодч.ТекущийЭлемент().Владелец);
 	КонецЕсли;	
	// ничего не найдено
	Возврат(ПолучитьПустоеЗначение(спрТовар));
КонецФункции 




//Функция ПоискВСправочнике(пШтрихкод="")//включая подчиненые через выбор элементов
//	Перем ИмяРекв,ПрефКода,ШтрихКодДляПоиска;
//
//	ПрефКода=Лев(Строка(пШтрихКод),2); //поиск весового товара
//	Вес=0;
//	Если (ПрефКода="29") ИЛИ (ПрефКода="28") ИЛИ (ПрефКода="23") ИЛИ (ПрефКода="24")  ИЛИ (ПрефКода="25") Тогда
//		//{ Обработка весового товара 
//		//формируем строку со штрих-кодом для поиска
//		//берем первые 8 чисел и добавляем нулями - такой штрих-код хранится у нас в базе данных
//		ШтрихКодДляПоиска=глДополнитьСтрокуП(Лев(пШтрихКод,7),"0",13);
//		
//		ЧислоВес=Число(Сред(пШтрихКод,8,5));
//		Если ЧислоВес<=99 Тогда
//			Делитель=10;
//		ИначеЕсли ЧислоВес<=999 Тогда
//			Делитель=100;
//		Иначе
//			Делитель=1000;
//		КонецЕсли;
//		Вес = ЧислоВес/Делитель;
//		//} Обработка весового товара
//	Иначе
//		ШтрихКодДляПоиска=пШтрихКод;
//	КонецЕсли;
//
//	
//	спрТовар = СоздатьОбъект("Справочник.Номенклатура");
//	спрПодч=СоздатьОбъект("Справочник.ШтрихКоды");
//	
//	ИмяРекв = "Штрихкод";
//	ФлагГлобПоиска = 1; 
//	Если спрТовар.НайтиПоРеквизиту(ИмяРекв,СокрЛП(ШтрихКодДляПоиска),ФлагГлобПоиска)=1 Тогда
//		Возврат(спрТовар.ТекущийЭлемент());
// 	ИначеЕсли спрПодч.НайтиПоКоду(СокрЛП(ШтрихКодДляПоиска))=1 Тогда
// 		Возврат(спрПодч.ТекущийЭлемент().Владелец);
// 	КонецЕсли;	
//	// ничего не найдено
//	Возврат(ПолучитьПустоеЗначение(спрТовар));
//КонецФункции 

Функция ПоискПоШтрихкоду(пШтрихкод="")
	Если ПустоеЗначение(пШтрихкод)=1 Тогда
//		Предупреждение("Штрих кода нет в справочнике",0);
		Возврат(0);
	КонецЕсли;
	
	спрТовар=ПоискВСправочнике(пШтрихкод);	
	Если ПустоеЗначение(спрТовар)=0 Тогда

		текстЗаголовка=пШтрихкод+",| "+спрТовар.Наименование+", "+спрТовар.КодТовара; 
		Форма.тТовар.Заголовок(текстЗаголовка);
		Возврат(1);
	КонецЕсли;
	
	Предупреждение("Штрих кода нет в справочнике",3);
	Возврат(0);
	
КонецФункции
//======================================================================



Процедура кнСканирование()
	ТекущийСлой="слШтрихкод";
	Форма.ИспользоватьСлой(ТекущийСлой,2);
	кнСбросШтрихкода();		
КонецПроцедуры // кнСканирование


//======================================================================
Процедура кнВводШтрихкода()
	Перем фПоиска;
	Форма.тТовар.Заголовок("Пусто");
	фПоиска=ПоискПоШтрихкоду(СокрЛП(пвШтрихкод));
	Если фПоиска=1 Тогда
		ТекущийСлой="слИнвентаризации";
		Форма.ИспользоватьСлой(ТекущийСлой,2);
	Иначе
//		ТекущийСлой=слТаблицы;
//		Форма.ИспользоватьСлой(ТекущийСлой,2);
////		Форма.кнМеню.Заголовок("Товар");
//		ПередатьФокус = "тпКнопка_"; 
//		Форма.Закрыть(0);
//		//кнМеню();
//	//	Форма.ИспользоватьСлой(ТекущийСлой,2);
//	//	ТП.ТекущаяСтрока=Таб_ТекущаяСтрока;
//	//	ТП_Обновить();		
	КонецЕсли;;
КонецПроцедуры // кнВводШтрихкода()

Процедура кнСбросШтрихкода()
	пвШтрихкод="";
	ПередатьФокус = "пвШтрихкод"; 
	Форма.Закрыть(0);
КонецПроцедуры
//======================================================================
Процедура кнМеню()
	ТекущийСлой="слОбложка";
	Форма.ИспользоватьСлой(ТекущийСлой,2);
КонецПроцедуры // кнМеню

//======================================================================
Процедура кнЗакрытьслШтрихкод()
	ТекущийСлой="слИнвентаризации";
	Форма.ИспользоватьСлой(ТекущийСлой,2);	
КонецПроцедуры // кнЗакрытьслШтрихкод

//}****Инвентаризация****


Процедура ВыводКлиента(док)
	Перем текстЗаголовка;
	Если ПустоеЗначение(док)=1 Тогда
		текстЗаголовка="Состояние:";
		Форма.тСостояние.Заголовок(текстЗаголовка);
		Форма.тКлиент.Заголовок("Пусто");
		Возврат;
	КонецЕсли;
	ИТ=ПроверкаПриема(док); //непроведеных
//	ИТ.Показать();
//	ИТпроведеных=ПроверкаПриема(док,"",1);
//	ИТпроведеных.Показать();
//	ИТ.Показать();
	текстЗаголовка=Строка(док.ДатаПрихода)+". "+док.Клиент.Наименование;
	Форма.тКлиент.Заголовок(текстЗаголовка);

	Если ИТ.КоличествоСтрок()=0 Тогда
		текстЗаголовка="Состояние: не принят";
	Иначе
		
		ИТ.ВыбратьСтроки();
		Пока ИТ.ПолучитьСтроку() = 1 Цикл
			ДокументПР=ИТ.ПолучитьЗначение(,1);
			Если ДокументПР.Проведен()=1 Тогда
				текстЗаголовка="Состояние: принимается";
				Прервать;
			Иначе
				текстЗаголовка="Состояние: в работе";
			КонецЕсли;			
		КонецЦикла;
	КонецЕсли;
	//Если ИТпроведеных.КоличествоСтрок()>0 Тогда
	//	текстЗаголовка="Состояние: закончен прием";
	//КонецЕсли;

	Форма.тСостояние.Заголовок(текстЗаголовка);

КонецПроцедуры
Процедура НастроитьОкна(Показать=1)
	Перем меню;
	Окна = СоздатьОбъект("Окна");
	//Окна.ВключитьМодальныйРежим();
	Окна.Максимизировать();
	
	Если Показать<>1 Тогда
		меню = Окна.ПолучитьМеню();
	КонецЕсли;
   
    а="";
 //   меню.ВыбратьЗначение(а);
	стр="";	
	Для Номер = 1 По Меню.РазмерСписка() Цикл
		меню.ПолучитьЗначение(Номер, стр); //получить значение и представление
		Окна.ВидимостьМеню(стр, Показать);
	КонецЦикла;
	Окна.ПоказыватьПанели(Показать);
	Если Показать<>1 Тогда
	//	Окна.Минимизировать(Форма);
		Окна.Максимизировать(Форма);
	КонецЕсли;
	
КонецПроцедуры


//{***ТП2***

Процедура НастройкаТПДок()
	
	Колонка = тпДок.Колонки.Добавить("Клиент"); Колонка.Данные = "Клиент"; Колонка.Заголовок = "Клиент"; 
	Колонка.ЗнакУпорядочивания = 1;
	Колонка.Ширина=20;

//	Колонка = тпДок.Колонки.Добавить("СостояниеДок"); Колонка.Данные = "СостояниеДок"; Колонка.Заголовок = "Состояние"; 
//	Колонка.ЗнакУпорядочивания = 1;
//	Колонка.Ширина=20;

	
//	Колонка = тпДок.Колонки.Добавить("ДатаП"); Колонка.Данные = "ДатаП"; Колонка.Заголовок = "Дата"; 
////	Колонка.ЗнакУпорядочивания = 1;
//	Колонка.Ширина=20;

//	Колонка = тпДок.Колонки.Добавить("Документ_ном"); Колонка.Данные = "Документ_ном"; Колонка.Заголовок = "ном"; 
//	Колонка.ЗнакУпорядочивания = 1;
//	Колонка.Ширина=20;
	

	
//	Колонка = тпДок.Колонки.Добавить("Ссылка"); Колонка.Данные = "Ссылка"; Колонка.Заголовок = "Документ"; 
//	Колонка.ЗнакУпорядочивания = 1;
//	Колонка.Ширина=20;	
	
КонецПроцедуры
Процедура ЗаполнитьТПДок(Обновить=0)
	
	Если Обновить=0 Тогда
		Источник = СоздатьОбъект("ПоставщикДанныхODBC.MSSQL"); 
		Источник.БазаДанных =  СоздатьОбъект("ODBCDataBase"); 
	КонецЕсли;
	
	
	//ТекстЗапроса="SELECT Журнал.IDDOC as [Документ $Документ]
	//|, NullIf(Cast(Left(Журнал.DATE_TIME_IDDOC, 8) AS datetime), '17530101') as Документ_дата
	//|, $ЗаказПоставщику.Клиент as [Клиент $Справочник.Контрагенты]
	//|, Журнал.DOCNO as Документ_ном
	//|FROM _1SJOURN AS Журнал
	//|INNER JOIN $Документ.ЗаказПоставщику AS ЗаказПоставщику ON Журнал.IDDOC = ЗаказПоставщику.IDDOC
	////|WHERE (Журнал.IDDOCDEF = $ВидДокумента.ЗаказПоставщику)
	////|ORDER BY Cast(Left(Журнал.DATE_TIME_IDDOC, 8) AS datetime) DESC
	//|";
	
	//ТекстЗапроса="SELECT ОжидаемаяПоставка.IDDOC AS [Ссылка $Документ.ОжидаемаяПоставка]
	//|	, NullIf($ОжидаемаяПоставка.ДатаПрихода, '17530101') AS ДатаПрихода
	//|FROM $Документ.ОжидаемаяПоставка AS ОжидаемаяПоставка
	//|WHERE ($ОжидаемаяПоставка.ДатаПрихода >= ?ДатаНач(8)) AND 
	//|($ОжидаемаяПоставка.ДатаПрихода <= ?ДатаКон(8))
	//|";	

	//ТекстЗапроса="SELECT ОжидаемаяПоставка.IDDOC AS [Ссылка $Документ.ОжидаемаяПоставка]
	//|	, NullIf($ОжидаемаяПоставка.ДатаПрихода, '17530101') AS ДатаП
	//|	, $ОжидаемаяПоставка.Клиент AS [Клиент $Справочник.Контрагенты]
	//|	, Журнал.DOCNO AS Документ_ном
	//|FROM _1SJOURN AS Журнал
	//|INNER JOIN $Документ.ОжидаемаяПоставка AS ОжидаемаяПоставка ON Журнал.IDDOC = ОжидаемаяПоставка.IDDOC
	//|WHERE ($ОжидаемаяПоставка.ДатаПрихода >= ?ДатаНач(8)) AND 
	//|($ОжидаемаяПоставка.ДатаПрихода <= ?ДатаКон(8))
	//|";	

	ТекстЗапроса="SELECT СостояниеДокументаОстатки.Док AS [Ссылка $Документ]
	|	, СостояниеДокументаОстатки.СостояниеДок AS [СостояниеДок $Справочник.СостоянияДокументов]
	|	, NullIf($ОжидаемаяПоставка.ДатаПрихода, '17530101') AS ДатаП
	|	, $ОжидаемаяПоставка.Клиент AS [Клиент $Справочник.Контрагенты]
	|	, $СпрК.ПоАлфавиту AS КлиентНаим
//	|	, СостояниеДокументаОстатки.СостояниеДок AS [СостДок $Справочник.СостоянияДокументов]
//	|	, Журнал.DOCNO AS Документ_ном
	|FROM $РегистрОстатки.СостояниеДокумента(,
//	|	LEFT JOIN $Документ.ОжидаемаяПоставка AS ОжидаемаяПоставка ON Док = $ВидДокумента36.ОжидаемаяПоставка + ОжидаемаяПоставка.IDDOC
//	|	LEFT JOIN _1SJOURN AS Журнал ON ОжидаемаяПоставка.IDDOC = Журнал.IDDOC,
	|	,(СостояниеДок =?Сост(14,9))
	|	,Док,) AS СостояниеДокументаОстатки
	|LEFT JOIN $Документ.ОжидаемаяПоставка AS ОжидаемаяПоставка (NOLOCK) ON СостояниеДокументаОстатки.Док = $ВидДокумента36.ОжидаемаяПоставка + ОжидаемаяПоставка.IDDOC
//	|LEFT JOIN _1SJOURN AS Журнал ON ОжидаемаяПоставка.IDDOC = Журнал.IDDOC AND Журнал.IDDOCDEF = $ВидДокумента.ОжидаемаяПоставка
	|INNER JOIN $Справочник.Контрагенты AS СпрК (NOLOCK) ON СпрК.ID = $ОжидаемаяПоставка.Клиент
	|WHERE ($ОжидаемаяПоставка.ДатаПрихода = ?ДатаНач(8))
	|";		

	Источник.УстТекстЗапроса(ТекстЗапроса);
	сост=УстановитьСостояние("ОтЛогиста","ОжидаемаяПоставка");
	Источник.Параметры.Установить("Сост",сост);
	Источник.Параметры.Установить("ДатаНач",рДатаПрихода);
	Источник.УстКлючПорядка("КлиентНаим ASC,ДатаП,Ссылка"); 
	Источник.УстИДПоле("Ссылка");	

//	Источник.Параметры.Установить("ДатаНач",рДатаНач);
//	Источник.Параметры.Установить("ДатаКон",рДатаКон);


	
	Поле = Источник.Поля.Добавить("Ссылка");
 	Поле.Автоудаление = 0;
	Поле.ТипБыстрогоПоиска = 1;
	
	Поле = Источник.Поля.Добавить("Клиент");
 	Поле.Автоудаление = 0;
	Поле.ТипБыстрогоПоиска = 1;
	
	//Поле = Источник.Поля.Добавить("Документ_ном");
 	//Поле.Автоудаление = 0;
	//Поле.ТипБыстрогоПоиска = 1;	
	
	Поле = Источник.Поля.Добавить("ДатаП");
 	Поле.Автоудаление = 0;
	Поле.ТипБыстрогоПоиска = 1;

//	Поле = Источник.Поля.Добавить("СостояниеДок");
 //	Поле.Автоудаление = 0;
//	Поле.ТипБыстрогоПоиска = 1;
	

	
	
	тпДок.ТаймаутОбновления  = 30;
	тпДок.РазрешитьПеретаскивание = 0; 
	тпДок.РазрешитьНачалоПеретаскивания= 0; 
	тпДок.РежимВыделенияСтроки = 1;
	тпДок.ИзменятьПозициюКолонок = 0;
	тпДок.РежимВыделенияСтроки = 0;
	
	тпДок.ПоставщикДанных = Источник; 
	тпДок.ПоставщикДанных.Обновить(); 
	тпДок.ОбновитьСтроки();



	
	
КонецПроцедуры

Процедура тпДок_Выбор(_ТП, _Кол, ТипРегиона)
	ТекущийДокПоставки=_Кол;	
	ВыводКлиента(ТекущийДокПоставки);
	
//	ПроверкаПриема(ТекущийДокПоставки);
	
//	Форма.кнМеню.Заголовок("Таблица");
//	ТекущийСлой="СлойТП,Кнопки,слТовар";	
//	Форма.ИспользоватьСлой(ТекущийСлой,2);	
//	ТП.ТекущаяСтрока=Таб_ТекущаяСтрока;
//	ТП_Обновить();

//	кнМеню();

	
//	кнМеню();
//	ОткрытьФормуМодально(_Кол,,0);
	ПередатьФокус = "кнВыбратьДок"; 
	Форма.Закрыть(0);

КонецПроцедуры
Процедура тпДок_ПриАктивизацииСтроки(тп)
//	ТекущийДокПоставки=ТП.Клиент;	
//	ВыводКлиента(ТекущийДокПоставки);
//ТекущийДокПоставки = ТП.ДанныеСтроки.Получить("Ссылка");
//ВыводКлиента(ТекущийДокПоставки);
	ТекущийДокПоставки=ТП.ТекущиеДанные.Получить("Ссылка");
	ВыводКлиента(ТекущийДокПоставки);
КонецПроцедуры
//}***ТП2***

Процедура ПриОткрытии()

	Если ПустоеЗначение(Форма.Параметр)=0 Тогда
		ТекКомплектовщик=Форма.Параметр;
	КонецЕсли;
	
	Если ПустоеЗначение(ТекКомплектовщик)=1 Тогда
		спр=СоздатьОбъект("Справочник.Комплектовщики");
		спр.НайтиПоКоду("006");
		ТекКомплектовщик=спр.ТекущийЭлемент();
	КонецЕсли;
	
	
	ТекущийСлой="слОбложка";
	Форма.ИспользоватьСлой(ТекущийСлой,2);
	

	Предупреждение("Hi "+ТекКомплектовщик);
		
КонецПроцедуры
Процедура ПослеОткрытия()

	НастроитьОкна(0);	

	Ф=СоздатьОбъект("Форма");
	Ф.УстановитьФорму(Форма);
	тпДок=Ф.СоздатьЭлементУправления("ТабличноеПоле","тпДок_");
	
	ЗаполнитьТПДок();
	НастройкаТПДок();
	
	НастроитьОкна(0);	
	
	ПередатьФокус = "кнПрием"; 
	Форма.Закрыть(0);
	
	гСервис = СоздатьОбъект("Сервис");
	гСервис.ПерехватКлавиатуры(1);
КонецПроцедуры	

Процедура ПриЗакрытии()
	//{ЛожноеЗакрытие Установить Фокус
	Если ПустоеЗначение(ПередатьФокус) = 0 тогда 
		Активизировать(ПередатьФокус); 
		СтатусВозврата(0); 
		ПередатьФокус = ""; 
		Возврат; 
	КонецЕсли; 
	//}ЛожноеЗакрытие Установить Фокус
	
//	Сервис = СоздатьОбъект("Сервис");
//	Сервис.УдалитьШрифт(МойШрифт);	
	
//	НастроитьОкна(1);
//	Записать();
	Форма.Закрыть(0);
	
	
	
КонецПроцедуры

Процедура кнБольше()
	рДатаПрихода=рДатаПрихода+1;
	Форма.Обновить();
		Форма.тСостояние.Заголовок("Состояние:");
		Форма.тКлиент.Заголовок("Пусто");
	
	ЗаполнитьТПДок(1);
	Форма.Обновить();
КонецПроцедуры

Процедура кнМеньше()
	рДатаПрихода=рДатаПрихода-1;
	
		Форма.тСостояние.Заголовок("Состояние:");
		Форма.тКлиент.Заголовок("Пусто");
	
	ЗаполнитьТПДок(1);
	Форма.Обновить();
КонецПроцедуры

//======================================================================

Процедура ПриНажатииКнопкиКлавиатуры(КодКлавиши, Alt, Shift, Ctrl, Символ, ФСО)
	//ФСО = 0;
	Если КодКлавиши = 120 Тогда
		//Если ТекущийСлой=слТовара Тогда
		//	кнНазад();
		//КонецЕсли;
		кнМеньше();
		Форма.Обновить();
	КонецЕсли;
	
	Если КодКлавиши =119 Тогда
		//Если ТекущийСлой=слТовара Тогда
		//	кнВперед();
		//КонецЕсли;	
		кнБольше();
		Форма.Обновить();
	КонецЕсли;


	
//	Форма.тИнфо.Заголовок(КодКлавиши);
//	Форма.Обновить();
КонецПроцедуры

рДатаПрихода=ТекущаяДата();
