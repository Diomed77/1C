Перем Обновлять;
//Не обрабатывать Инсталлятором МОД
Перем МасВыгрШ[200]; //максимальное число реквизитов = 200 //данный массив введен для обеспечения макс. скорости !!!
Перем МасТаблиц[10];//таблица текущего уровня объектов правил выгрузки-загрузки
Перем ТипСозданияТаблицы,ИмяПервогоУровня;//служебные перемнные для заполнения таблиц работы МОД при работе в упрощенном режиме
Перем ВерсияМОД,МОДИнфо,ИДДляОтладки;
Перем НомерПодтвержденногоПакетаЗагрузки,МаксНомерПакетаВыгрузки,НомерПодтвержденногоПакета;
Перем НомерПакетаВыгрузки;
Перем ДаДа,НетНет;
Перем Конт;
Перем Т,ДублирIDD;
Перем СписокПериодическихРеквизитов;
Перем СписокНомеровПериодическихРеквизитов;//это надо для номера реквизита по порядку следования в выгрузке
Перем СписокПравил;//динамическая структура выгр данных
Перем ТаблицаПравил;
Перем ТаблицаЗагрузки;//на самом деле это интерпретация  т.к. 1С не умеет работать с памятью при исп. таблицы значений
Перем ТаблицаВыгрузки;
Перем СписокВидовСпр;//нужен при выгрузке и загрузке реквизитов у которых тип справочник
//для реквизитов типа документ не надо т.к. поиск по IDD можно вести сразу для всех видов доков
// а для справочников увы нет...
Перем СписокВторогоЦикла,СписокВторогоЦикла2;
Перем глобФлагВторогоЦикла;
Перем ГлобДок;//глобальный объект типа документ нужен для поиска
Перем ГлобДокЗагрВыгрузки;//а это для загрузки документов
Перем МаксУровень;//максимально допустимый уровень вложенности данных
Перем НомерПОС;//для нумерации порядка записи объектов в файл пакетов
Перем глСчетчикПОС;//счетчик изменения переменной НомерПОС, по умолчанию всегда = -1,а для шаблонов = +1
Перем СписокПодчиненных;
Перем КолТаблицЗначений;
Перем СписокЗагрузки;
Перем МожноЗакрывать;//Можно закрывать файлы dbf - для доступа другим программа
//(закрытие происходит автоматически при обновлении формы)

Перем ИмяТекстовогоФайла,ПерваяИнициализация;

Перем ФлИдентифID;//идентификация объекта сначала по IDD
Перем МаксДатаВыгрДокумента;
Перем ДокументОперации;//название вида документа у операции

Перем ПришлоТолькоПодтверждение;

Перем МаксКолОбъектовВПакете;//ограничение на размер пакета !!!
Перем НоваяВерсияШапки;//флаг показывает , что версия шапки пакета изменилась

Перем МОДДлинаIDДокумента;
Перем МОДДлинаID;

Перем СписокОбъектовЗамены;//для сопоставления перечислений в разных базах !!
Перем СопоставлятьПеречисления;//если 1, то ф функции получить объект будут споставляться
//перечисления, если 0 , то нет - это нужно только когда загружаем шаблон и правила загрузки не используются
Перем СписСправочникПеречисление;//если вид справочника есть в этом списке, то возвращаем его представление, как
//строковое значение представления
Перем СписСчетов;
Перем РежимНастройки,РасширенныйРежим;
//Перем ПриоритетностьБазы;
Перем СписокПроводимыхДокументов;//документы которые перепроводятся при загрузке заново мы будем проводить без транзакции !!
Перем ПутьКБазеПриВыгрузке,ПутьКБазеПриЗагрузке;
//Перем ФайлШаблона;
Перем ИспользоватьФТП,ВстроеннаяАрхивация,ПередачаПоПочте,ИмяМОД;
Перем ЗагрузкаИнфо,ВыгрузкаИнфо,ОбщиеИнфо;//Переменные для статуса состояния работы обмена
Перем глВыражение;//переменная, которой функция Получить() присваивает переданной ей значение (этот механизм используется при интерпретации выражений)
Перем НоваяШапкаПакетов;//константа равная строке "Новая шапка пакетов"
Перем ИдентичнаяКонфигурация;//константа равная строке "Идентичная конфигурация"
Перем СписокВыборочнойВыгрузки;//список значений с объектами для выгрузки (режим выгрузки должен быть равен 4)
Перем ОбработкаПримера;//флаг, сигнализирующий что выгружается или загружается пример
Перем СписокИзмененияИД;//список объектов ИД, которых надо изменить после загрузки


Перем ОткрытьДругуюФорму;
ПЕрем ИДДБазы;

Перем ИнфоПрогрессора,НомерПрогрессора,МаксНомерПрогрессора,ТекПрогрессора,ТекстДляПрогрессора,НачНомерПрогрессора,ДатаНачПрогрессора,ВремяНачПрогрессора ;
                                                 
Перем МетаДатаВорк;

Процедура ЗаполнитьСтруктуруПравил(ВыбБаза,Тип) Далее//заполнить таблицу правил исходя из метаданных текущей конфигурации
Процедура ПросмотрСуперТаблицы(Знач Значен) Далее

процедура ЗаписатьВЛогОшибку(Сообщение,Объект="")
	ЗаписьЖурналаРегистрации("Ошибка менеджера обмена","Ошибки менеджера обмена",Сообщение,Объект,5);
КонецПроцедуры	


//**************************************************
//Преобразует переданный параметр так, как этого хочет SQL
Функция глПреобразоватьВФорматСКЛ(чегоПреобразовывать) Экспорт
	Тип=ТипЗначения(чегоПреобразовывать);
	Если Тип=1 Тогда //Число
		Возврат Строка(чегоПреобразовывать);
	ИначеЕсли Тип=2 ТОгда //Строка
		Возврат "'"+чегоПреобразовывать+"'";
	ИначеЕсли Тип=3 ТОгда   //Дата
		Возврат "'"+ДатаГод(чегоПреобразовывать)+прав("0"+ДатаМесяц(чегоПреобразовывать),2)+прав("0"+ДатаЧисло(чегоПреобразовывать),2)+"'";
	КонецЕсли;            
	Возврат "";
КонецФункции
//**************************************************
//Исполняет ТекстСКЛ и возвращает 1 если все хорошо, иначе 0.
//Если ОписыватьОшибку=1 Тогда выдаст сообщение об ошибке. По умолчанию 1
Функция глИсполнитьСКЛ(ТекстСКЛ,ВидИнструкции=0) Экспорт
	ОДБСКвери=СоздатьОбъект( "ODBCRecordSet" );
	Если ВидИнструкции=0 Тогда
		ОДБСКвери.ВыполнитьСкалярный(ТекстСКЛ);
		Возврат "";
	Иначе
		Возврат ОДБСКвери.ВыполнитьИнструкцию(ТекстСКЛ);
	КонецЕсли;
КонецФункции

//_____________________________________________________________________________
Функция Абс(Сум)
	Если Сум<0 Тогда
		Возврат -Сум;
	Иначе
		Возврат Сум;
	КонецЕсли;    
КонецФункции //Абс

//***************************************************************************************************************
//Перем ИнфоПрогрессора,НомерПрогрессора,МаксНомерПрогрессора,ТекПрогрессора,ТекстДляПрогрессора,НачНомерПрогрессора;
Процедура Прогрессор(Знач Номер=0,Знач МаксНомер=10,Знач НачНомер=0,Текст="")
	Перем Точность;
	Точность=1;
	Если Номер=0 Тогда //инициализация
		ТекПрогрессора="";
		МаксНомерПрогрессора=МаксНомер-НачНомер;
		Если МаксНомерПрогрессора=0 Тогда
			МаксНомерПрогрессора=1;
		КонецЕсли;
		НомерПрогрессора=0;
		ТекстДляПрогрессора=Текст+" ";
		НачНомерПрогрессора=НачНомер;
		ИнфоПрогрессора=Текст;
		//Если Текст<>"" Тогда
		//	Форма.ИспользоватьСлой("Прогрессор",1);
		//Иначе
		//	Форма.ИспользоватьСлой("Прогрессор",0);
		//КонецЕсли;
		Состояние(ТекПрогрессора+" "+ИнфоПрогрессора);
		Возврат;
	КонецЕсли;
	Номер=Номер-НачНомерПрогрессора;
	Если Окр(Номер/МаксНомерПрогрессора,Точность)=Окр(НомерПрогрессора/МаксНомерПрогрессора,Точность) Тогда
		Возврат;//не изменилось !!
	КонецЕсли;
	НомерПрогрессора=Номер;
	ИнфоПрогрессора=ТекстДляПрогрессора;
	Пока СтрДлина(ТекПрогрессора)<10*Номер/МаксНомерПрогрессора Цикл
		ТекПрогрессора=ТекПрогрессора+"|||";
	КонецЦикла;
	Состояние(ТекПрогрессора+"("+Цел(100*Номер/МаксНомерПрогрессора)+"%) "+ИнфоПрогрессора);
КонецПроцедуры //Прогрессор
//***************************************************************************************************************
//***************************************************************************************************************


//_____________________________________________________________________________
Процедура ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,Знач Реквизит,Знач Тип0,Знач Уровень=1) Далее 

//***************************************************
Процедура ЗафиксирватьЖурналРегистрации()
	
	ТекстЗапроса="if not object_id('tempDb..#JournReg') is null 
			|begin
			  |if object_id('_JournReg') is null
			  |begin
			  |create table _JournReg([IDD] char("+МОДДлинаID+") default(''),
			  |						[TIP] Tinyint default(0),
			  |						[VIDD] char(50) default(''),
			  |						[_DATE] smalldatetime, 
			  |						[_TIME] char(8) default('00:00:00'),
			  |						[VigrZagr] Tinyint default(0),
			  |						[IDDDB] char(17) default(''),
			  |						[NMAR] Text)   --not making action reason
			  |CREATE INDEX TIP ON _JournReg (TIP);
			  |CREATE INDEX VIDD ON _JournReg (VIDD);
			  |CREATE INDEX _DATE ON _JournReg (_DATE);
			  |end
			  |INSERT INTO _JournReg ([IDD], [TIP], [VIDD], [_DATE], [_TIME], [VigrZagr], [IDDDB], [NMAR]) 
			  |Select [IDD], [TIP], [VIDD], [_DATE], [_TIME], [VigrZagr], [IDDDB], [NMAR] From #JournReg;
			  |Drop table #JournReg
			|end";
	глИсполнитьСКЛ(ТекстЗапроса,0);
КонецПроцедуры
//******************************************************************
//Алгортим Успеха Начало
//                                                                  
Процедура ДобавитьВЖурналРегистрации(Объект,ВыгрЗагр,ИДДДБ="",ПричинаНепроведения="")
	
	//Журнал регитрации лежит под СКЛ, причем заполняем мы временную таблицу
	
	ТекстЗапроса="if object_id('tempDb..#JournReg') is null
	|begin
			  |create table #JournReg([IDD] char("+МОДДлинаID+") default(''),
			  |						[TIP] Tinyint default(0),
			  |						[VIDD] char(50) default(''),
			  |						[_DATE] smalldatetime, 
			  |						[_TIME] char(8) default('00:00:00'),
			  |						[VigrZagr] Tinyint default(0),
			  |						[IDDDB] char(17) default(''),
  			  |						[NMAR] Text)   --not making action reason
	|end
			|INSERT INTO #JournReg ([IDD], [TIP], [VIDD], [_DATE], [_TIME], [VigrZagr], [NMAR], [IDDDB]) values (";
	
	//ЖурналРегистрации.Добавить();             
	//Если (ТипЗначения(Объект)=12) или (ТипЗначения(Объект)=11) тогда
	//	Если (ТипЗначенияСтр(Объект)="Операция") тогда
	//		ЖурналРегистрации.IDD = Объект.Документ.IDD;
	//		ЖурналРегистрации.TIP = 96;
	//		ЖурналРегистрации.VIDD = Объект.Документ.Вид();
	//	Иначе
	//		ЖурналРегистрации.IDD = Объект.IDD;
	//		ЖурналРегистрации.TIP = ТипЗначения(Объект);   
	//		ЖурналРегистрации.VIDD = Объект.Вид();
	//	КонецЕсли;
	//ИначеЕсли (ТипЗначения(Объект)=2) тогда//Константа
	//	ЖурналРегистрации.IDD = ЛЕВ(Объект,МОДДлинаID);
	//	ЖурналРегистрации.TIP = 95;         
	//	ЖурналРегистрации.VIDD= Объект;
	//ИначеЕсли (ТипЗначения(Объект)=15) тогда//Счет
	//	ЖурналРегистрации.IDD = Объект.Код;
	//	ЖурналРегистрации.TIP = 94;    
	//	ЖурналРегистрации.VIDD = "Счет."+Объект.ПланСчетов();
	//Иначе
	//	ЖурналРегистрации.IDD = "";
	//	ЖурналРегистрации.TIP = ТипЗначения(Объект);
	//	ЖурналРегистрации.VIDD = Строка(Объект);
	//КонецЕсли;
	//ЖурналРегистрации._DATE = РабочаяДата(); 
	//ЖурналРегистрации._TIME = ТекущееВремя();
	//ЖурналРегистрации.VigrZagr = ВыгрЗагр;
	//ЖурналРегистрации.IDDDB = ?(ИДДДБ="",Прав("0000000"+База.IDD,7)+НомерПакетаЗагрузки,ИДДДБ);
	//ЖурналРегистрации.Записать();                                                              
	
	Если (ТипЗначения(Объект)=12) или (ТипЗначения(Объект)=11) тогда
		Если (ТипЗначенияСтр(Объект)="Операция") тогда
			ТекстЗапроса = ТекстЗапроса+глПреобразоватьВФорматСКЛ(Объект.Документ.IDD)+", ";
			ТекстЗапроса = ТекстЗапроса+глПреобразоватьВФорматСКЛ(96)+", ";
			ТекстЗапроса = ТекстЗапроса+глПреобразоватьВФорматСКЛ(Объект.Документ.Вид())+", ";
		Иначе
			ТекстЗапроса = ТекстЗапроса+глПреобразоватьВФорматСКЛ(Объект.IDD)+", ";
			ТекстЗапроса = ТекстЗапроса+глПреобразоватьВФорматСКЛ(ТипЗначения(Объект))+", ";   
			ТекстЗапроса = ТекстЗапроса+глПреобразоватьВФорматСКЛ(Объект.Вид())+", ";
		КонецЕсли;
	ИначеЕсли (ТипЗначения(Объект)=2) тогда//Константа
		ТекстЗапроса = ТекстЗапроса+глПреобразоватьВФорматСКЛ(ЛЕВ(Объект,МОДДлинаID))+", ";
		ТекстЗапроса = ТекстЗапроса+глПреобразоватьВФорматСКЛ(95)+", ";         
		ТекстЗапроса = ТекстЗапроса+глПреобразоватьВФорматСКЛ(Объект)+", ";
	ИначеЕсли (ТипЗначения(Объект)=15) тогда//Счет
		ТекстЗапроса = ТекстЗапроса+глПреобразоватьВФорматСКЛ(Объект.Код)+", ";
		ТекстЗапроса = ТекстЗапроса+глПреобразоватьВФорматСКЛ(94)+", ";    
		ТекстЗапроса = ТекстЗапроса+глПреобразоватьВФорматСКЛ("Счет."+Объект.ПланСчетов())+", ";
	Иначе
		ТекстЗапроса = ТекстЗапроса+глПреобразоватьВФорматСКЛ("")+", ";
		ТекстЗапроса = ТекстЗапроса+глПреобразоватьВФорматСКЛ(ТипЗначения(Объект))+", ";
		ТекстЗапроса = ТекстЗапроса+глПреобразоватьВФорматСКЛ(Строка(Объект))+", ";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса+глПреобразоватьВФорматСКЛ(РабочаяДата())+", "; 
	ТекстЗапроса = ТекстЗапроса+глПреобразоватьВФорматСКЛ(ТекущееВремя())+", ";
	ТекстЗапроса = ТекстЗапроса+глПреобразоватьВФорматСКЛ(ВыгрЗагр)+", ";
	ТекстЗапроса = ТекстЗапроса+глПреобразоватьВФорматСКЛ(ПричинаНепроведения)+", ";
	ТекстЗапроса = ТекстЗапроса+глПреобразоватьВФорматСКЛ(?(ИДДДБ="",Прав("0000000"+База.IDD,7)+НомерПакетаЗагрузки,ИДДДБ))+")";
    
	глИсполнитьСКЛ(ТекстЗапроса,0);

КонецПроцедуры         

//Алгортим Успеха Конец
//******************************************************************

Функция ДобавлениеОбъектаВПакет(Док,ВыгрБаза=0,НомерВыгрПакета=0)
	Перем БДПакет;
	Если ОткрытьФайлМОДПоИмени(БДПакет,"Пакеты","_tran2")=0 Тогда //это открывается временный файл !!!
		Возврат 0;
	КонецЕсли;
	
	НомерПОС=0;
	Если ВыгрБаза=0 Тогда
		ВыгрБаза=База;
	КонецЕсли;
	Если НомерВыгрПакета=0 Тогда
		НомерВыгрПакета=НомерПакетаВыгрузки;
	КонецЕсли;
	НомерПакетаИБазы=Прав("0000000"+Сокрп(ВыгрБаза.IDD),7)+Сокрлп(НомерВыгрПакета);
	
	//Рез=ДобавитьВПакетОбъектСПроверкой(БДПакет,НомерПакетаИБазы,Док,12);
	МаксУровень=4;
	НомерЗаписи=БДПакет.НомерЗаписи();
	БДПакет.ТекущийИндекс("IDD");
	Док.IDD="0"+Док.IDD;
	ДобавитьВПакетСВложеннымиДанными(БДПакет,НомерПакетаИБазы,Док,12);
	БДПакет.ТекущийИндекс("IDDDB");
	БДПакет.Перейти(НомерЗаписи);
	Возврат 1;
КонецФункции //ПриВыгрузкеДокумента






//_____________________________________________________________________________
Процедура М_Состояние(ЧтоТо)
	Состояние(ЧтоТо);
	//	Состояние(""+ТекПрогрессора+" "+ИнфоПрогрессора+" "+ЧтоТо);
КонецПроцедуры //М_Состояние








//Просмотр любого dbf-файла
Процедура Просмотр(ИмяБазы,ЧислоПросмотраСтрок=0)
	Перем Название,Тип,Длина,Точность;
	Перем БазаДБФ;
	Перем Выр,Уник,Убыв,Фильт;
	Номер=0;
	ФайлЦДХ=Лев(ИмяБазы,Найти(ИмяБазы,"."))+"cdx";
	БазаДБФ=СоздатьОбъект("XBase");
	//	БазаДБФ.КодоваяСтраница(КодСтр);
	Если ФС.СуществуетФайл(ФайлЦДХ)=1 Тогда
		БазаДБФ.ОткрытьФайл(ИмяБазы,ФайлЦДХ);
	Иначе
		БазаДБФ.ОткрытьФайл(ИмяБазы);
	КонецЕсли;
	Если БазаДБФ.Открыта()=0 Тогда
		Сообщить("Ошибка - база: "+ИмяБазы+" не открыта !"); 
		ЗаписатьВЛогОшибку("Ошибка открытия базы "+ИмяБазы);
		Возврат;
	КонецЕсли;
	ТекИндекс="";
	Таб=СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("ТаблицаДБФ");
	БазаДБФ.Первая();
	Если БазаДБФ.ВКонце()=0 Тогда
		Для А=1 по БазаДБФ.КоличествоПолей() Цикл
			БазаДБФ.ОписаниеПоля(А,Название,Тип,Длина,Точность);
			Если А=1 Тогда
				Таб.ВывестиСекцию("Описание|Столбик");
			Иначе
				Таб.ПрисоединитьСекцию("Описание|Столбец");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Прогрессор(0,?(ЧислоСтрокДБФ=0,БазаДБФ.КоличествоЗаписей(),ЧислоСтрокДБФ),0,"Вывод строк");
	Пока БазаДБФ.ВКонце()=0 Цикл
		Номер=Номер+1;
		Для А=1 по БазаДБФ.КоличествоПолей() Цикл
			Данные=БазаДБФ.ПолучитьЗначениеПоля(А);
			Если А=1 Тогда
				Таб.ВывестиСекцию("Строка|Столбик");
			Иначе
				Таб.ПрисоединитьСекцию("Строка|Столбец");
			КонецЕсли;
		КонецЦикла;
		БазаДБФ.Следующая();
		Если ЧислоПросмотраСтрок<>0 Тогда
			Если Номер>=ЧислоПросмотраСтрок Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		Прогрессор(БазаДБФ.НомерЗаписи());
	КонецЦикла;
	Таб.ВывестиСекцию("ШапкаИндекса");
	Для А=1 По БазаДБФ.КоличествоИндексов() Цикл
		БазаДБФ.ОписаниеИндекса(А,Название,Выр,Уник,Убыв,Фильт);
		Таб.ВывестиСекцию("Индекс");
		Ош=БазаДБФ.КодОшибки();
		Если Ош<>0 Тогда
			Сообщить("Ошибка № "+Ош); 
			ЗаписатьВЛогОшибку("Ошибка при работе с DBF. Код ошибки "+Ош);
		КонецЕсли;
	КонецЦикла;
	БазаДБФ.ЗакрытьФайл();
	Прогрессор(0);
	Таб.Опции(0,0,2,1);
	Таб.Показать("База_"+ИмяБазы,"");
КонецПроцедуры
//_____________________________________________________________________________
//Процедура для облегчения написания кода транзакции dbf-х файлов
Процедура КопироватьФайлДБФ(ИзФайла,ВФайл)
	Фс.УдалитьФайл(КаталогБазыДанных()+ВФайл+".cdx");
	Фс.УдалитьФайл(КаталогБазыДанных()+ВФайл+".dbf");//потому что вдруг такого вообще нет !!
	ФС.КопироватьФайл(КаталогБазыДанных()+ИзФайла+".dbf",КаталогБазыДанных()+ВФайл+".dbf",0);
	ФС.КопироватьФайл(КаталогБазыДанных()+ИзФайла+".cdx",КаталогБазыДанных()+ВФайл+".cdx",0);
КонецПроцедуры //КопироватьФайлДБФ
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Функция ОтпечатокДата(Стр) Экспорт
	Возврат Дата(сред(стр,1,4),сред(стр,5,2),сред(стр,7,2));
КонецФункции

Функция ОтпечатокВСтроку(Стр,фдата = "ДДДММГГ") Экспорт
	Возврат Формат(ОтпечатокДата(стр),фдата);
КонецФункции

//Новые процедуры
Процедура КопироватьСправочникВФайлДБФ(ИзСправочника,ВФайл)
	Перем База;  
	
	ИДСпр="SC"+МетаДатаВорк.ИДОбъекта(Метаданные.Справочник(ИзСправочника));
	//Сообщить("Таблица sc"+ИдСпр);
	
	//Спр=СоздатьОбъект("Справочник."+СокрЛП(ИзСправочника));
	//Создаем ДБФ
	
	Если ИзСправочника="ИзмененияМОД" Тогда
		
		ОткрытьФайлМОДПоИмени(База,"Изменения",ВФайл);
		
		ТекстЗапроса = "SELECT Спр.CODE [Kodd], 
					|          Спр.DESCR [VIDD], 
					|          $Спр.TIP [Tip],
					|          $Спр.DATE [_Date]
					|   FROM $Справочник."+ИзСправочника+" Спр (nolock) 
					|   WHERE $Спр.USER=0";
		//
		состояние("Запрос к серверу ...");	
		//Сообщить(ТекстЗапроса);
		Табл=глИсполнитьСКЛ(ТекстЗапроса,1);

		Табл.ВыбратьСтроки();
		Пока Табл.ПолучитьСтроку()=1 Цикл
			База.Добавить();
			База.IDD	= Табл.Kodd;
			База.TIP	= Табл.Tip;
			База.VIDD 	= Табл.VIDD;
			База.DATE	= Табл._Date;
			База.Записать();
		КонецЦикла;

	ИначеЕсли ИзСправочника="УдаленияМОД" Тогда       
		ОткрытьФайлМОДПоИмени(База,"Удаления",ВФайл);

		ТекстЗапроса = "SELECT Спр.CODE [Kodd], $Спр.TIP [Tip], Спр.DESCR [VIDD] From $Справочник."+ИзСправочника+" Спр (nolock) where $Спр.USER=0";
		//
		состояние("Запрос к серверу ...");	
		//Сообщить(ТекстЗапроса);
		Табл=глИсполнитьСКЛ(ТекстЗапроса,1);
		
		состояние("Заполнение временных dbf...");
		                 
		Табл.ВыбратьСтроки();
		Пока Табл.ПолучитьСтроку()=1 Цикл
			База.Добавить();
			База.IDD	= Табл.Kodd;
			База.TIP	= Табл.Tip;
			База.VIDD 	= Табл.VIDD;
			База.Записать();
		КонецЦикла;

	ИначеЕсли	ИзСправочника="Пакеты" Тогда
		//Спр.ВыбратьЭлементы();
		ОткрытьФайлМОДПоИмени(База,"Пакеты",ВФайл);
		
		ТекстЗапроса = "SELECT Спр.CODE [Kodd], $Спр.TIP [Tip], Спр.DESCR [VIDD], $Спр.DATE1 [_Date1], $Спр.DATE2 [_Date2],  $Спр.POS [POS], $Спр.IDDDB [IDDB] From $Справочник."+ИзСправочника+" Спр (nolock)";
	
		Табл=глИсполнитьСКЛ(ТекстЗапроса,1);
             
		состояние("Заполнение временных dbf...");
		
		Табл.ВыбратьСтроки();
		Пока Табл.ПолучитьСтроку()=1 Цикл
			База.Добавить();
			База.IDD	= Табл.Kodd;
			База.TIP	= Табл.Tip;
			База.VIDD 	= Табл.VIDD;
			База.DATE1	= Табл._DATE1_;
			База.DATE2	= Табл._DATE2_;
			База.IDDDB	= Табл._IDDB;
			База.POS	= Табл.POS;
			База.Записать();
		КонецЦикла;
	Иначе
		Сообщить("Тип справочника не опознан");
		ЗаписатьВЛогОшибку("При добавлении в dbf данных не опознан тип служебного справочника "+ИзСправочника);
	КонецЕсли;        
	
	База.ЗакрытьФайл();	
	
КонецПроцедуры 
//-----------------------------------------------------------------------------
Процедура КопироватьФайлДБФВСправочник(ИзФайла,ВСправочник)
	Перем База;
	Перем Сч,НомТран;
	Спр=СоздатьОбъект("Справочник."+СокрЛП(ВСправочник));
	//Чистим справочник  (пользовательские записи не трогаем)

	ИДСпр="SC"+МетаДатаВорк.ИДОбъекта(Метаданные.Справочник(ВСправочник));

	Если ВСправочник<>"ЖурналРегистрации" Тогда
		                      
		Если ВСправочник<>"Пакеты" Тогда
		
			ТекстЗапроса = "DELETE FROM $Справочник."+ВСправочник+" where $Справочник."+ВСправочник+".USER=0";

		Иначе 
			ТекстЗапроса = "DELETE FROM $Справочник."+ВСправочник;
		КонецЕсли;
		                    
		глИсполнитьСКЛ(ТекстЗапроса,0);
		
	КонецЕсли;
	//Теперь перенесем информацию в справочник	
	Состояние("Копируем в справочник "+ВСправочник);
	
	Если ВСправочник="ИзмененияМОД" Тогда            
		//Открываем ДБФ
		
		ОткрытьФайлМОДПоИмени(База,"Изменения",ИзФайла);
		База.Первая();
		Пока База.ВКонце()=0 Цикл 
		//	
		//ТекстЗапроса = "Insert into "+ИдСпр+" (, ) where "+USER+"=0";
			глСоздатьНовыйОбъект(Спр);
			Спр.Код=База.IDD;
			Спр.TIP=База.TIP;
			Спр.User=0;
			Спр.Наименование=База.VIDD;
			Спр.DATE=База.DATE;
			Спр.Записать();
			База.Следующая();
		КонецЦикла;
	ИначеЕсли ВСправочник="УдаленияМОД" Тогда               
		//Открываем ДБФ
		ОткрытьФайлМОДПоИмени(База,"Удаления",ИзФайла);
		База.Первая();
		Пока База.ВКонце()=0 Цикл			
			глСоздатьНовыйОбъект(Спр);
			Спр.Код=База.IDD;
			Спр.TIP=База.TIP;
			Спр.User=0;
			Спр.Наименование=База.VIDD;
			Спр.Записать();   
			База.Следующая();
		КонецЦикла;
	ИначеЕсли	ВСправочник="Пакеты" Тогда      
		//Открываем ДБФ
		ОткрытьФайлМОДПоИмени(База,"Пакеты",ИзФайла);			
		База.Первая();
		Пока База.ВКонце()=0 Цикл			
			глСоздатьНовыйОбъект(Спр);
			Спр.Код=База.IDD;
			Спр.TIP=База.TIP;
			Спр.Наименование=База.VIDD;
			Спр.POS=База.POS;
			Спр.DATE1=База.DATE1;
			Спр.DATE2=База.DATE2;
			Спр.IDDDB=База.IDDDB;
			Спр.Записать();
			База.Следующая();
		КонецЦикла;
	ИначеЕсли ВСправочник="ЖурналРегистрации" Тогда
		//Открываем ДБФ
		ОткрытьФайлМОДПоИмени(База,"ЖурналРегистрации",ИзФайла);			
		База.Первая();
		Пока База.ВКонце()=0 Цикл			
			глСоздатьНовыйОбъект(Спр);
			Спр.Код=База.IDD;
			Спр.TIP=База.TIP;
			Спр.Наименование=База.VIDD;
			Спр._Date=База._Date;
			Спр._Time=База._Time;
			Спр.VigrZagr=База.VigrZagr;
			Спр.IDDDB=База.IDDDB;
			Спр.Записать();                  
			База.Следующая();
		КонецЦикла;
	Иначе
		Сообщить("Тип справочника не опознан");  
		ЗаписатьВЛогОшибку("При загрузки из dbf данных не опознан тип служебного справочника "+ВСправочник);

	КонецЕсли;        
	
	База.ЗакрытьФайл();	
	
КонецПроцедуры

//_____________________________________________________________________________
Функция ПолучитьУникальныйIDD()
	Константа.УникальныйIDD=Число(Константа.УникальныйIDD)+1;
	Возврат Прав("0000000"+СокрЛП(Константа.IDD),7)+прав("0000000000"+СокрЛП(Константа.УникальныйIDD),10);
КонецФункции //
//_____________________________________________________________________________



//Интерпретатор для таблицы значений !!!!!
//Пришлось написать т.к. стандартный объект ТаблицаЗначений потребляет много ресурсов и при
//большом количестве таких таблиц происходит некорректное действие 1С-Предприятия (просто вылетат и иногда  вместе с Конфигуратором !?)
//_____________________________________________________________________________
Функция ПолучитьОбъект_ТаблицаЗначений()
	Перем Список;
	Список=СоздатьОбъект("СписокЗначений");
	Возврат Список;
КонецФункции //ПолучитьОбъект

//_____________________________________________________________________________
Процедура Таб_ВставитьКолонку(Список,ИмяКолонки)
	Перем Спис1;
	Спис1=СоздатьОбъект("СписокЗначений");
	Список.ДобавитьЗначение(Спис1,ИмяКолонки);
КонецПроцедуры //ВставитьКолонку(Список,ИмяКолонки)
//_____________________________________________________________________________

//_____________________________________________________________________________
Функция Таб_ПолучитьЗначение(Список,НомерСтроки,ИмяКолонки)
	Перем Спис1;
	Спис1=Список.Получить(ИмяКолонки);
	Попытка
		Возврат Спис1.ПолучитьЗначение(НомерСтроки);
	Исключение   
		Сообщить("Ошибка: "+НомерСтроки+ИмяКолонки);
	КонецПопытки;
	//Попытка
	//Исключение
	//	Возврат "";
//		Список.ВыбратьЗначение("","");
//		Спис1.ВыбратьЗначение("","");
//		Возврат Спис1.ПолучитьЗначение(НомерСтроки);
//	КонецПопытки;
КонецФункции //ПолучитьЗначение

//_____________________________________________________________________________
Функция Таб_ПолучитьЗначение2(Список,НомерСтроки,НомерКолонки)
	Перем Спис1;
	Если Число(НомерКолонки)=0 Тогда
		Спис1=Список.Получить(НомерКолонки);
	Иначе
		Спис1=Список.ПолучитьЗначение(НомерКолонки);
	КонецЕсли;
	Если Число(НомерСтроки)=0 Тогда
		Возврат Спис1.Получить(НомерСтроки);
	Иначе
		Возврат Спис1.ПолучитьЗначение(НомерСтроки);
	КонецЕсли;
КонецФункции //ПолучитьЗначение

//_____________________________________________________________________________
Функция Таб_НайтиЗначение(Список,Значение,НомерСтроки,ИмяКолонки)
	Перем Спис1;
	Спис1=Список.Получить(ИмяКолонки);
	НомерСтроки=Спис1.НайтиЗначение(Значение);
	Рез=?(НомерСтроки=0,0,1);
	Возврат Рез;
КонецФункции //Таб_НайтиЗначение

//_____________________________________________________________________________

Процедура Таб_УстановитьЗначение(Список,НомерСтроки,ИмяКолонки,Значение)
	Перем Спис1;
	Спис1=Список.Получить(ИмяКолонки);
	Спис1.УстановитьЗначение(НомерСтроки,Значение);
КонецПроцедуры //Таб_УстановитьЗначение
//_____________________________________________________________________________
Функция  Таб_НоваяСтрока(Список)
	Перем Спис1,А1;
	Для А1=1 По Список.РазмерСписка()	Цикл
		Спис1=Список.ПолучитьЗначение(А1);
		Спис1.ДобавитьЗначение("");
	КонецЦикла;
	Возврат Спис1.РазмерСписка();
КонецФункции

//_____________________________________________________________________________

Функция  Таб_КоличествоСтрок(Список)
	Перем Спис1;
	Если ТипЗначенияСтр(Список)="СписокЗначений" Тогда
		Если Список.РазмерСписка()>0 Тогда
			Спис1=Список.ПолучитьЗначение(1);
			Возврат Спис1.РазмерСписка();
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
КонецФункции

//_____________________________________________________________________________
Процедура Таб_УдалитьСтроки(Список)
	Перем Спис1,А1;
	Если ТипЗначенияСтр(Список)="СписокЗначений" Тогда
		Для А1=1 По Список.РазмерСписка()	Цикл
			Спис1=Список.ПолучитьЗначение(А1);
			Спис1.УдалитьВсе();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры //УдалитьСтроки
//_____________________________________________________________________________











//Просмотр интерпретируемой таблицы значения (т.е. когда на самом деле это список списков)
Процедура ПросмотрТаблицы(ТабПросмотра)
	Значен=ТабПросмотра;
	
	Рез=1;
	Стр=1;
	Пока Рез=1 Цикл
		Если ТипЗначенияСтр(Значен)="ТаблицаЗначений" Тогда
			Рез=Значен.ВыбратьСтроку(Стр,"Это таблица !");
			Если Рез=1 Тогда
				Попытка
					Значен=Значен.ПолучитьЗначение(Стр,"Указатель");
				Исключение
					//М_Сообщить("!!!!!!");
				КонецПопытки;
			КонецЕсли;
		ИначеЕсли ТипЗначенияСтр(Значен)="СписокЗначений" Тогда
			//преобразовываем список в таблицу !!!!!
			Если ТипЗначенияСтр(Значен)="СписокЗначений" Тогда
				Таб=СоздатьОбъект("ТаблицаЗначений");
				Для А2=1 По Значен.РазмерСписка() Цикл
					Ст="";
					ЧтоТо=Значен.ПолучитьЗначение(А2,Ст);
					Ст=СтрЗаменить(Ст," ","_");
					Ст=СтрЗаменить(Ст,"#","_");
					Таб.ВставитьКолонку(Ст);
				КонецЦикла;
				Для А1=1 По Таб_КоличествоСтрок(Значен)  Цикл
					Таб.НоваяСтрока();
					Для А2=1 По Значен.РазмерСписка() Цикл//количество столбцов
						Зн=Таб_ПолучитьЗначение2(Значен,А1,А2);
						Таб.УстановитьЗначение(А1,А2,Зн);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			Рез=Таб.ВыбратьСтроку(Стр,"Это таблица !");
			Если Рез=1 Тогда
				Попытка
					Значен=Таб.ПолучитьЗначение(Стр,"Указатель");
				Исключение
				КонецПопытки;
			КонецЕсли;
		Иначе
			Если ФлагВыбрТабл=1 Тогда
				Значен=ТаблицаПравил;
			Иначе
				Значен=ТаблицаЗагрузки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
//_____________________________________________________________________________









//Вывод наэкран обычных сообщений - при условии что проставлен флаг ВыводитьСообщения
Функция М_Сообщить(ЧтоТо,КакТо="",Реж="")
	Если Реж="" Тогда
		Реж=ВыводитьСообщения;
	КонецЕсли;
	Если Реж=1 Тогда
		Сообщить(ЧтоТо,КакТо);
	КонецЕсли;
КонецФункции //My_Сообщить



//_____________________________________________________________________________
Процедура ОбработатьСкрипт(ИмяФайлаНач,ИмяФайлаКон)
	//делаем из файла скрипта-источника файл скрипт-рабочий
	//такие скрипты нужны для большей гибкости вызова внешних программ
	Если ФС.СуществуетФайл(ИмяФайлаНач)=0 Тогда
		М_Сообщить("Файл шаблон скрипта "+ИмяФайлаНач+" не найден"); 
		ЗаписатьВЛогОшибку("Файл шаблон скрипта "+ИмяФайлаНач+" не найден");

		Возврат;
	КонецЕсли;
	
	Если Сокрлп(ИмяФайлаКон)="" Тогда
		М_Сообщить("Не задано имя рабочего файла скрипта !");
		ЗаписатьВЛогОшибку("не задано имя рабочего файла скрипта");

		Возврат;
	КонецЕсли;
	
	ТКон=СоздатьОбъект("Текст");
	ТКон.КодоваяСтраница(1);
	ТНач=СоздатьОбъект("Текст");
	ТНач.КодоваяСтраница(1);
	ТНач.Открыть(ИмяФайлаНач);
	Для А=1 По ТНач.КоличествоСтрок() Цикл
		Стр=ТНач.ПолучитьСтроку(А);
		Если Найти(Стр,"[")<>0 Тогда
			Стр=Шаблон(Стр);
		КонецЕсли;
		ТКон.ДобавитьСтроку(Стр);
	КонецЦикла;
	ТКон.Записать(ИмяФайлаКон);
КонецПроцедуры //ОбработатьСкрипт


Процедура ОбъединитьИзмененияПозже(пВремя1,пВремя2)
	
	Если (ТекущееВремя()>=пВремя1) И (ТекущееВремя()<пВремя2) Тогда
		ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");
		ТекстЗапроса = "SELECT Count(*) FROM $Справочник.ИзмененияМОДПозже";
		ВсегоПозже = ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
		Спр_ = СоздатьОбъект("Справочник.ИзмененияМОД");
		СпрПозже = СоздатьОбъект("Справочник.ИзмененияМОДПозже");
		СпрПозже.ВыбратьЭлементы();
		С=0;
		Пока СпрПозже.ПолучитьЭлемент() = 1 Цикл
			
			С=С+1;
			Состояние("Переносим Позже->MOD: "+С+"/"+ВсегоПозже);
			Спр_.Новый();
			Спр_.TIP = СпрПозже.TIP;
			Спр_.DATE = СпрПозже.DATE;
			Спр_.User = СпрПозже.User;
			Спр_.IDD = СпрПозже.IDD;
			Спр_.Записать();
			СпрПозже.Удалить(1);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//***********************************************************************************
//Собираем все файлы в кучу
//***********************************************************************************
//Функция КопироватьВОднуБазу(Режим)
//	Перем База1,База2;
//	Хорошо=1;
//	Если Режим="Изменения" Тогда
//		ПодИмя="tran1";
//	Иначе
//		ПодИмя="tran3";
//	КонецЕсли;
//	Если ОткрытьФайлМОДПоИмени(База1,Режим,ПодИмя)<>1 Тогда
//		Предупреждение("Ошибка открытия файла "+ПодИмя+". Возможно файл занят другим пользователем.
//		|Повторите попытку через некоторое время !",10);
//		Возврат 0;
//	КонецЕсли;
//	Для А=1 По 20 Цикл
//		ИмяФ=КаталогБазыДанных()+ПодИмя+А+".dbf";
//		ИмяCDX=КаталогБазыДанных()+ПодИмя+А+".cdx";
//		Если (Сокрлп(ИмяФайлаБДМОД)<>Сокрлп(ИмяФ))
//		И (Сокрлп(ИмяФайлаБДУдаленийМОД)<>Сокрлп(ИмяФ)) Тогда
//			Если ФС.СуществуетФайл(ИмяФ)=1 Тогда
//				База2=СоздатьОбъект("XBase");
//				База2.ОткрытьФайл(ИмяФ);
//				Фс.УдалитьФайл(ИмяCDX);
//				М_Состояние("Копирование из:"+ИмяФ);
//				Если База2.Открыта()=1 Тогда
//					База2.Первая();
//					Пока База2.ВКонце()=0 Цикл
//						База1.Добавить();
//						База1.IDD=База2.IDD;
//						База1.TIP=База2.TIP;
//						База1.VIDD=База2.VIDD;
//						Если Режим="Изменения" Тогда
//							База1.DATE=База2.DATE;
//						КонецЕсли;
//						База1.Записать();
//						База2.Следующая();
//					КонецЦикла;
//					База2.ОчиститьФайл();
//					База2.ЗакрытьФайл();
//				Иначе
//					Хорошо=0;
//					М_Сообщить("Внимание dbf-файл с именем "+ПодИмя+А+".dbf заблокирована другим пользователем. Данные о его работе выгружаться не будут !");
//				КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;
//	База1.ЗакрытьФайл();
//	Возврат Хорошо;
//КонецФункции
//_____________________________________________________________________________
Функция КопироватьВОднуБазу(Режим)
	Перем ОК;
	//Запрос=СоздатьОбъект("Запрос");
	Если Режим="Изменения" Тогда
	ИначеЕсли Режим="Удаления" Тогда
	Иначе
		Возврат 0;
	КонецЕсли;
	ТекстЗапроса = "UPDATE Спр
					|SET $Спр.USER=0 
					|FROM $Справочник." + Режим+"МОД Спр
					|where $Спр.USER=1";
	состояние("Запрос к серверу ...");	
	глИсполнитьСКЛ(ТекстЗапроса,0);
	Возврат 1;	
КонецФункции
//-----------------------------------------------------------------------------
Функция СоединитьФайлыИзмененийИУдалений()

	//ИзмененияПОЗЖЕ

	ОбъединитьИзмененияПозже("02:00:00","12:00:00");	
	//Изменения
	Рез=КопироватьВОднуБазу("Изменения");
	//Удаления
	Рез=Рез+КопироватьВОднуБазу("Удаления");
	Рез=?(Рез=2,1,0);
	Возврат Рез;
КонецФункции //СоединитьФайлыИзмененийИУдалений

//_____________________________________________________________________________

Функция НайтиДокументПоIDD(Док,Спр_ИД) //поиск по IDD документа у 1С в этом плане есть неоднозначное выполнение команды, которое надо обойти
	Перем Ид;
	Ид=Лев(Сокрлп(Спр_ИД)+"                              ",МОДДлинаIDДокумента);
	Рез=Док.ВыбратьПоЗначению(,,"IDD",Ид);
	Если Рез=1 Тогда
		Док.ПолучитьДокумент();
		Если Сокрлп(Док.IDD)=Сокрлп(Спр_ИД) Тогда
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 0;
КонецФункции //НайтиДокументПоIDD

//_____________________________________________________________________________
Функция ПолучитьПредставлениеОбъекта(ЧтоТо)
	НомерТипа=ТипЗначения(ЧтоТо);
	Если НомерТипа=12 Тогда //документ
		Рез="Д-"+ЧтоТо.IDD;
		Возврат Рез;
	ИначеЕсли НомерТипа=11 Тогда //справочник
		Вид=ЧтоТо.Вид();
		Если СписСправочникПеречисление.НайтиЗначение(Вид)=0 Тогда
			Номер=Число(СписокВидовСпр.Получить(Вид));
			Если Сокрлп(Вид)<>"" Тогда
				//а вот тут - то надо нам и смотреть на синхронизацию по другому реквизиту
				надоДобавить=ЧтоТо.IDD;
				//Спр=СоздатьОбъект("Справочник.ПравилаВыгрузки");
				//Спр.НайтиПоНаименованию()
				Рез="С"+Номер+"-"+ЧтоТо.IDD;
				Возврат Рез;
			Иначе
				Возврат "";
			КонецЕсли;
		Иначе
			//данный справочник надо представлять при выгрузке как перечисление
			Рез="{""Перечисление"","""+Вид+""","""+ЧтоТо.Наименование+"""}";
			Возврат Рез;
		КонецЕсли;
		
	Иначе
		Если ПустоеЗначение(ЧтоТо)=1 Тогда
			Возврат "#";
		КонецЕсли;
		
		
		
		Если НомерТипа=2 Тогда
			//многострочные тексты превращаем в одну строку:
			Рез="#"+Сокрп(СтрЗаменить(ЧтоТо,РазделительСтрок,"$-Нов.стр-$"));
			Рез=СтрЗаменить(Рез,Симв(10),"$-Нов.стр-$");
			Возврат Рез;
		ИначеЕсли НомерТипа=3 Тогда //дата
			Рез="D"+Число(ЧтоТо);
			Возврат Рез;
		ИначеЕсли (НомерТипа>9)И(НомерТипа<18) Тогда
			Возврат ЗначениеВСтроку(ЧтоТо);
		Иначе
			Рез="#"+Сокрп(ЧтоТо);
			Возврат Рез;
		КонецЕсли;
	КонецЕсли;
КонецФункции //ПолучитьПредставлениеОбъекта

//_____________________________________________________________________________
Функция ПолучитьОбъект(Зн) //,Об,Реквизит)
	Перем СтрСпр[2];
	//Если надо вернуть справочник или документ , а его нет , то ставим глобФлагВторогоЦикла = 1
	Л=Лев(Зн,1);
	Если Лев(Зн,2)="#$" Тогда // специальный формат                   
		Стр=Сред(Зн,3);
		//Разбиваем строку по составляющим
		Для А=1 по 2 цикл
        	Поз=Найти(Стр,"%");
			СтрСпр[А]=Лев(Стр,Поз-1);
			Стр=Сред(Стр,Поз+1);
		КонецЦикла;                                                              
		Попытка       
			
			Спр=СоздатьОбъект("Справочник."+СтрСпр[1]);

			Если СтрСпр[2]="Код" Тогда
				Если Метаданные.Справочник(СтрСпр[1]).ТипКода= "Числовой" Тогда
					Стр=Число(Стр);
				КонецЕсли;
				Спр.НайтиПоКоду(Стр);
					
			ИначеЕсли СтрСпр[2]="Наименование" Тогда
				Спр.НайтиПоНаименованию(Стр);
			Иначе
				Если стрСпр[1]="Контрагенты" Тогда
					Если (СтрСпр[2]="ИНН") Тогда
					    Если Метаданные.Справочник("Контрагенты").Реквизит("ДляВыгрузки").Выбран()=1 Тогда
					        Спр.ВыбратьЭлементыПоРеквизиту("ИНН",СокрЛП(Стр),0,0);
							Пока Спр.ПолучитьЭлемент()=1 Цикл
							    Если Спр.ДляВыгрузки=1 Тогда
							        Возврат спр.ТекущийЭлемент();
							    КонецЕсли;
							КонецЦикла;
					    КонецЕсли;
					КонецЕсли;		    
				КонецЕсли;
                
				Если Метаданные.Справочник(СтрСпр[1]).Реквизит(СтрСпр[2]).Тип="Число" Тогда
					Стр=Число(СокрЛП(Стр));
				ИначеЕсли Метаданные.Справочник(СтрСпр[1]).Реквизит(СтрСпр[2]).Тип="Строка" Тогда
					Стр=СокрЛП(Строка(Стр));
				ИначеЕсли Метаданные.Справочник(СтрСпр[1]).Реквизит(СтрСпр[2]).Тип="Дата" Тогда
					Стр=Дата(Стр);
				КонецЕсли;

				Спр.НайтиПоРеквизиту(СтрСпр[2],Стр,1);
				
//				Спр.НайтиПоРеквизиту(СтрСпр[2],Шаблон("["+Метаданные.Справочник(СтрСпр[1]).Реквизит(СтрСпр[2]).Тип+"("++")]"),1);
			КонецЕсли;
			Возврат Спр.ТекущийЭлемент();
		Исключение                       
			Сообщить("Ошибка при загрузке специализированной строки "+зн+"
			|Проверьте правильность заполнения правил выгрузки. Ошибка: "+ОписаниеОшибки());
			Возврат "";
		КонецПопытки;
	ИначеЕсли Л="#" Тогда
		Стр=Сред(Зн,2);
		Рез=СтрЗаменить(Стр,"$-Нов.стр-$",РазделительСтрок);
		Возврат Рез;
	ИначеЕсли Лев(Зн,2)="Д-" Тогда
		ИД=Сред(Зн,3);
		Если Сокрлп(ИД)="" Тогда
			Возврат "";
		КонецЕсли;
		Если НайтиДокументПоIDD(ГлобДок,ИД)=1 Тогда
			Возврат ГлобДок.ТекущийДокумент();
		Иначе
			глобФлагВторогоЦикла=1;
			Возврат "";
		КонецЕсли;
	ИначеЕсли Л="С" Тогда
		Если СписокВидовСпр=0 Тогда
			Возврат "";
		КонецЕсли;
		А1=Найти(Зн,"-");
		Ном=Число(Сред(Зн,2,А1-2));
		Если Ном=0 Тогда
			Возврат ""; //такой вид справочника даже не выгружался из периф-й базы !!
		КонецЕсли;
		Спр_ИД=Сокрлп(Сред(Зн,А1+1));
		Вид=СписокВидовСпр.ПолучитьЗначение(Ном);
		Если Вид="-" Тогда
			Возврат "";//здесь мы такой вид вообще не загружаем - следовательно второй цикл ничего не даст
			//случай если это критический параметр - Владелец, то мы проверим его на месте
		КонецЕсли;
		Спр=СоздатьОбъект("Справочник."+Вид);
		Если Спр_ИД="" Тогда
			Возврат "";
		КонецЕсли;         
		Если Спр.НайтиПоРеквизиту("IDD",Спр_ИД,1)=1 Тогда
			Возврат Спр.ТекущийЭлемент();
		Иначе
			глобФлагВторогоЦикла=1;
			Возврат "";
		КонецЕсли;
	ИначеЕсли Л="D" Тогда //дата
		Возврат Дата(Число(Сред(Зн,2)));
	ИначеЕсли Л="$" Тогда //                    
		Стр=Сред(Зн,2);
		//Разбиваем строку по составляющим
		Для А=1 по 2 цикл
        	Поз=Найти(Стр,"%");
			СтрСпр[А]=Лев(Стр,Поз-1);
			Стр=Сред(Стр,Поз+1);
		КонецЦикла;                                                              
		Попытка
			Спр=СоздатьОбъект("Справочник."+СтрСпр[1]);
			Спр.НайтиПоРеквизиту(СтрСпр[2],Шаблон("["+Метаданные.Справочник(СтрСпр[1]).Реквизит(СтрСпр[2]).Тип+"("+Стр+")]"),1);
			Возврат Спр.ТекущийЭлемент();
		Исключение                       
			Сообщить("Ошибка при загрузке специализированной строки "+зн+"
			|Проверьте правильность заполнения правил выгрузки");
			Возврат "";
		КонецПопытки;
	Иначе
		Если СопоставлятьПеречисления=1 Тогда //т.е.обычная загрузка, а не шаблон
			//смотрим может надо подменить что-нибудь на что-нибудь ?  												:)
			Зн=Сокрлп(Зн);
			Если Сред(Зн,3,4)="Счет" Тогда
				Результат=СписСчетов.Получить(Зн);
			Иначе
				Результат=СписокОбъектовЗамены.Получить(Зн);
			КонецЕсли;
			
			Если ПустоеЗначение(Результат)=1 Тогда
				Результат=ЗначениеИзСтроки(Зн);
			КонецЕсли;
			
			Возврат Результат;       
		КонецЕсли;
		
	КонецЕсли;
	Если Л="{" Тогда
		Возврат ЗначениеИзСтроки(Зн);
	КонецЕсли;
	Возврат "";
КонецФункции //ПолучитьОбъект(Зн)






//_____________________________________________________________________________

Процедура ПроверкаУстановленияАтрибута(Спр,Реквизит,Атрибут,История=0)
	ТипНадо=0;
	Тип=ТипЗначения(Атрибут);
	Если История=0 Тогда
	Надо=Спр.ПолучитьАтрибут(Реквизит);
	ТипНадо=ТипЗначения(Надо);
	Если Тип=ТипНадо Тогда
	    Возврат;
	ИначеЕсли (Тип<10)И(ТипНадо<10) Тогда
	    Возврат;
	КонецЕсли;
	КонецЕсли;
	//смотрим какой тип у Атрибута и пытаемся такой же присвоить реквизиту
	СтрТип=ТипЗначенияСтр(Атрибут);
	Длина=0;Точность=0;
	Если (Тип>9)И(Тип<13) Тогда
		СтрТип=СтрТип+"."+Атрибут.Вид();
	ИначеЕсли Тип=1 Тогда //число
		Длина=17;
		Точность=3;
	ИначеЕсли Тип=2 Тогда //строка
		Длина=СтрДлина(Атрибут)+10;
	КонецЕсли;
	Если История=0 Тогда
		Попытка
			Спр.НазначитьТип(Реквизит,СтрТип,Длина,Точность);
		Исключение
//			Сообщить("Ошибка назначения типа для реквизита="+Реквизит+"    "+СтрТип+"  "+Длина+"  "+Точность+"   Надо="+Надо+"  Атрибут="+Атрибут+" ТипНадо="+ТипНадо+" Тип="+Тип);
			//Спр.НазначитьТип(Реквизит,СтрТип,Длина,Точность);
		КонецПопытки;
		Спр.УстановитьАтрибут(Реквизит,Атрибут);
	Иначе
		Спр.НазначитьТип(СтрТип,Длина,Точность);
	КонецЕсли;
КонецПроцедуры //ПроверкаУстановленияАтрибута(Спр,Реквизит,Атрибут)

//_____________________________________________________________________________

Процедура ПроведениеДокумента(Конт) //также вызывается из глобального модуля при проведении документа (когда загружаются движения документа)
	Вид=Конт.Вид();
	Если Метаданные.Документ(Вид).Выбран()=1 Тогда
		Если Метаданные.Документ(Вид).БухгалтерскийУчет=1 Тогда
			
			Если ТипЗначенияСтр(СписокОперацийПроведения)="СписокЗначений" Тогда
				Если ТипЗначения(Конт)=12 Тогда //загружаем операции
					Опер=СоздатьОбъект("Операция");
					Опер.НайтиОперацию(Конт);
				Иначе
					Опер=Конт.Операция;//это проводится документ
				КонецЕсли;
				//сначала все удалим !!
				Пока Опер.КоличествоПроводок()>0 Цикл
					Опер.ВыбратьПроводки();
					Опер.ПолучитьПроводку();
					Опер.УдалитьПроводку();
				КонецЦикла;
				
				СписокОпер=СписокОперацийПроведения.Получить("Атрибуты операции");
				ТабПроводок=СписокОперацийПроведения.Получить("Атрибуты проводки");
				ПроводкиВключены=Опер.ВключитьПроводки();
				Если ТипЗначенияСтр(СписокОпер)="СписокЗначений" Тогда
					Для А=1 По СписокОпер.РазмерСписка() Цикл
						Стр="";
						Зн=СписокОпер.ПолучитьЗначение(А,Стр);
						Если Лев(Стр,1)="#" Тогда 
							Если Сокрлп(Стр)="#ПроводкиВключены" Тогда
								ПроводкиВключены=Зн;
							КонецЕсли;
						Иначе
							Если СтрДлина(Стр)>1 Тогда
								Опер.УстановитьАтрибут(Стр,Зн);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если ТипЗначенияСтр(ТабПроводок)="ТаблицаЗначений" Тогда
					Для А=1 По ТабПроводок.КоличествоСтрок() Цикл
						ТипПроводки=ТабПроводок.ПолучитьЗначение(А,"ТипПроводки"); //тип проводки !!!
						Если ТипПроводки=1 Тогда
							Опер.НоваяПроводка();
						Иначе
							Опер.НоваяКорреспонденция();
						КонецЕсли;
						Для Колонка=1 По ТабПроводок.КоличествоКолонок()-1 Цикл
							Зн=ТабПроводок.ПолучитьЗначение(А,Колонка);
							Наименование=ТабПроводок.ПолучитьПараметрыКолонки(Колонка);
							Если СтрДлина(Наименование)>1 Тогда
								Наименование=СтрЗаменить(Наименование,"_",".");
								Рез=Найти(Наименование,".");
								Если Рез<>0 Тогда //типа Дебет.Счет , Дебет.Субконто1 ..
									Если Прав(Наименование,4)="Счет" Тогда
										Если Лев(Наименование,1)="Д" Тогда
											Опер.Дебет.Счет=Зн;
										Иначе
											Опер.Кредит.Счет=Зн;
										КонецЕсли;
									Иначе
										НомерСубк=Число(Прав(Наименование,1));
										Если НомерСубк<>0 Тогда
											Если Лев(Наименование,1)="Д" Тогда
												Опер.Дебет.Субконто(НомерСубк,Зн);
											Иначе
												Опер.Кредит.Субконто(НомерСубк,Зн);
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;
								Иначе
									Опер.УстановитьАтрибут(Наименование,Зн);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
//					ПросмотрТаблицы(ТабПроводок);
					ТабПроводок.УдалитьСтроки();
				КонецЕсли;
				Опер.ВключитьПроводки(ПроводкиВключены);
				Опер.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
		
		Если (СписокРегистровПроведения.РазмерСписка()=0) и (Таб_КоличествоСтрок(ТаблицаСправочниковПроведения)=0) Тогда
			Возврат ;//движения не подгружены (т.е. не выгружены из
			//базы-источника, тем не ненее мы не проводим документы на месте,
			//а делаем проведенными, хотя регистры они не двигают
		КонецЕсли;
		Если Метаданные.Документ(Вид).ОперативныйУчет=1 Тогда
			//делаем движения регистров
			Для А=1 По СписокРегистровПроведения.РазмерСписка() Цикл//регистры
				ИмяРегистра="";
				Табл=СписокРегистровПроведения.ПолучитьЗначение(А,ИмяРегистра);
				ИмяРегистра=СтрЗаменить(ИмяРегистра,"#","");
				Если ТипЗначенияСтр(Табл)="СписокЗначений" Тогда
					Рег=Конт.Регистр.ПолучитьАтрибут(ИмяРегистра);
					Тип=0;
					Для АТабл=1 По Таб_КоличествоСтрок(Табл) Цикл
						ТекСтр=АТабл;
						Для АА=1 По Табл.РазмерСписка() Цикл
							Наименование="";
							Табл.ПолучитьЗначение(АА,Наименование);
							Зн=Таб_ПолучитьЗначение(Табл,ТекСтр,Наименование);
							Если Наименование="НомерСтроки" Тогда
								Рег.ПривязыватьСтроку(Зн);
							ИначеЕсли Наименование="Признак_МОД" Тогда
								Тип=Зн;
							Иначе
								Рег.УстановитьАтрибут(Наименование,Зн);
								ПроверкаУстановленияАтрибута(Рег,Наименование,Зн);
							КонецЕсли;
						КонецЦикла;
						Если Тип=1 Тогда
							Рег.ДвижениеПриходВыполнить();
						Иначе
							Рег.ДвижениеРасходВыполнить();
						КонецЕсли;
					КонецЦикла;
					Таб_УдалитьСтроки(Табл);
				КонецЕсли;//табл значен
			КонецЦикла;
		КонецЕсли;
		
		////делаем движения по периодическим реквизитам справочников
		Спр=ТаблицаСправочниковПроведения;
		Для А=1 По Таб_КоличествоСтрок(Спр) Цикл
			Справ=Таб_ПолучитьЗначение(Спр,А,"Справочник");
			Реквизит=Таб_ПолучитьЗначение(Спр,А,"Наименование");
			Значение=Таб_ПолучитьЗначение(Спр,А,"Значение");
			ДатаУст=Таб_ПолучитьЗначение(Спр,А,"ДатаУст");
			Конт.УстановитьРеквизитСправочника(Справ,
			Реквизит,Значение,ДатаУст);
		КонецЦикла;
		Таб_УдалитьСтроки(ТаблицаСправочниковПроведения);
	КонецЕсли;
КонецПроцедуры //ПроведениеДокумента
//_____________________________________________________________________________







//процедуры ФОРМЫ
//_____________________________________________________________________________
Процедура ПриУстановкеТипаВыборочно()//при выборочной выгрузке предоставить
	//возможность выбора любого документа и справочника
	Ном=ТипОбъектаВыборочно.ТекущаяСтрока();
	Если Ном=0 Тогда
		Возврат;
	КонецЕсли;
	Имя=ТипОбъектаВыборочно.ПолучитьЗначение(Ном);
	Если Имя="Справочник" Тогда
		Форма.ОбъектВыборочно.НазначитьТип("");
	КонецЕсли;
	Форма.ОбъектВыборочно.НазначитьТип(Имя);
	Форма.ОбъектВыборочноВладелец.Доступность(0);
	Если Лев(Имя,1)="С" Тогда//справочник
		ОбъектВыборочно.ВыборГруппы(1);
		Если Сокрлп(ОбъектВыборочно.Вид())<>"" Тогда
			Если ТипЗначения(ОбъектВыборочно.Владелец)<>11 Тогда
				Форма.ОбъектВыборочноВладелец.Доступность(0);
			Иначе
				НазначитьВид(ОбъектВыборочноВладелец,ОбъектВыборочно.Владелец.Вид());
				Форма.ОбъектВыборочноВладелец.НеИзменятьВид(1);
				Форма.ОбъектВыборочноВладелец.Доступность(1);
			КонецЕсли;
		Иначе
			ОбъектВыборочноВладелец="";
		КонецЕсли;
		Если ОбъектВыборочно.Выбран()=1 Тогда
			ОбъектВыборочноВладелец=ОбъектВыборочно.Владелец;
		КонецЕсли;
	ИначеЕсли Лев(Имя,1)="Д" Тогда//документ
		Форма.ОбъектВыборочноВладелец.Доступность(0);
		ОбъектВыборочноВладелец="";
	КонецЕсли;
КонецПроцедуры


//_____________________________________________________________________________
//при интеракт. выборе режима:  1)синхронизация; 2)за период; 3)выборочно
Процедура ПриУстановкеРежимаВыгрузки()
	
	Если РежимВыгрузки=1 Тогда//синхронизация
		Форма.ИспользоватьСлой("ВсеЗаПериод",0);
		Форма.ИспользоватьСлой("Выборочно",0);
	ИначеЕсли РежимВыгрузки=2 Тогда//за период
		Форма.ИспользоватьСлой("ВсеЗаПериод",1);
		Форма.ИспользоватьСлой("Выборочно",0);
	ИначеЕсли РежимВыгрузки=3 Тогда//выборочно
		Форма.ИспользоватьСлой("ВсеЗаПериод",1);
		Форма.ИспользоватьСлой("Выборочно",1);
		ПриУстановкеТипаВыборочно();
	КонецЕсли;
КонецПроцедуры

//_____________________________________________________________________________

Процедура СделатьВидимыми(Видим)//управление видимостью элементов диалога
	
	Форма.СписокПакетов.Доступность(Видим);
	Форма.РежимВыгрузки.Доступность(Видим);
	Форма.РежимВыгрузки2.Доступность(Видим);
	Форма.РежимВыгрузки3.Доступность(Видим);
	Форма.ДатаН.Доступность(Видим);
	Форма.ДатаК.Доступность(Видим);
	Форма.ТипОбъектаВыборочно.Доступность(Видим);
	Форма.ОбъектВыборочно.Доступность(Видим);
	Форма.ТекстВыгрузки.Доступность(Видим);
	//	Форма.ЗагружатьСОдинаковымиКодами.Доступность(Видим);
	//	Форма.СоздаватьНовоеНаименование.Доступность(Видим);
	//	Форма.ЗагружатьСОдинаковымиНомерами.Доступность(Видим);
	Если Видим=0 Тогда
		//		НомерПакета=0;
		//		НомерПакетаВыгрузки=0;
		РежимВыгрузки=0;
		ДатаН=Дата(0);
		ДатаК=Дата(0);
		ОбъектВыборочно="";
		ТекстВыгрузки="";
		ЗагружатьСОдинаковымиКодами=0;
		СоздаватьНовоеНаименование=0;
		ЗагружатьСОдинаковымиНомерами=0;
		ТекстЗагрузки="";
	КонецЕсли;
	
КонецПроцедуры

//_____________________________________________________________________________
Процедура ЕстьВыгрузкаЗагрузка()//при выборе флажков Выгрузка/Загрузка
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.УдалитьВсе();
	Форма.Закладки.ДобавитьЗначение("Общие","Общие");
	Если (Выгрузка=1)  Тогда
		Форма.Закладки.ДобавитьЗначение("Выгрузка");
	КонецЕсли;
	Если (Загрузка=1)  Тогда
		Форма.Закладки.ДобавитьЗначение("Загрузка");
	КонецЕсли;
	Форма.Закладки.ДобавитьЗначение("Инициализация","Инициализация");
	Форма.Закладки.ДобавитьЗначение("Настройка","Сервис");
	Форма.Закладки.ДобавитьЗначение("Подтверждение","Подтверждение");
	Форма.Закладки.ДобавитьЗначение("ОПрограмме","О программе");
КонецПроцедуры


//_____________________________________________________________________________

Процедура ЗаполнитьСписокПакетов(А1="",А2="")
	СписокПакетов.УдалитьВсе();
	Если МаксНомерПакетаВыгрузки<1 Тогда
		МаксНомерПакетаВыгрузки=1;
	КонецЕсли;
	//	Если База.Выбран()=1 Тогда
	НомП=Число(НомерПодтвержденногоПакетаЗагрузки);
	НомЗ=Число(МаксНомерПакетаВыгрузки);
	Если А1="" Тогда
		Ном1=НомП+1;
		Ном2=НомЗ;
	Иначе
		Ном1=А1;
		Ном2=А2;
	КонецЕсли;
	
	Если Ном2>НомЗ Тогда
		Ном2=НомЗ;
	КонецЕсли;
	
	Если Ном1<=НомП Тогда
		Ном1=НомП+1;
		//		Иначе
		//			СписокПакетов.ДобавитьЗначение(Ном1,"-меньше-");
	КонецЕсли;
	Если Ном1>Ном2 Тогда
		Ном1=Ном2;
	КонецЕсли;
	
	Для А=Ном1 По Ном2 Цикл
		Стр=А;
		Если (А>НомП)И(А<НомЗ) Тогда
			Стр=""+А+" ?";
		ИначеЕсли (А<=НомП) Тогда
			Стр=""+А+" +";
		КонецЕсли;
		СписокПакетов.ДобавитьЗначение(А,Стр);
	КонецЦикла;
	//Если Ном2<НомЗ Тогда
	//СписокПакетов.ДобавитьЗначение(Ном2,"-больше-");
	//КонецЕсли;
	Если А1="" Тогда
		Рез=СписокПакетов.НайтиЗначение(НомЗ);
		СписокПакетов.ТекущаяСтрока(?(Рез=0,1,Рез));
		НомерПакетаВыгрузки=НомЗ;
	КонецЕсли;
КонецПроцедуры //ЗаполнитьСписокПакетов

//_____________________________________________________________________________
Процедура ПриВыбореСпискаПакетов()
	А=СписокПакетов.ТекущаяСтрока();
	Если А=0 Тогда
		Возврат;
	КонецЕсли;
	Стр="";
	Зн=СписокПакетов.ПолучитьЗначение(А,Стр);
	Если Стр="-больше-" Тогда
		ЗаполнитьСписокПакетов(Зн,Зн+50);
		СписокПакетов.ТекущаяСтрока(2);
	ИначеЕсли Стр="-меньше-" Тогда
		ЗаполнитьСписокПакетов(Зн-50,Зн);
		СписокПакетов.ТекущаяСтрока(СписокПакетов.РазмерСписка()-1);
	КонецЕсли;
	НомерПакетаВыгрузки=Зн;
КонецПроцедуры //ПриВыбореСпискаПакетов()
//_____________________________________________________________________________

//_____________________________________________________________________________
Процедура ОчиститьКаталог(Путь,Маска="*.*")
	//процедура гарантированного возврата чистого каталога (если такого нет, то создается !!)
	Если ФС.СУществуетФайл(Путь)=1 Тогда
		//предварительно очищаем !!
		Имя=ФС.НайтиПервыйФайл(Путь+"\"+Маска);
		Пока Сокрлп(Имя)<>"" Цикл    
			Имя=ФС.НайтиСледующийФайл();  
			Если (Имя<>".")И(Имя<>"..") Тогда
				ФС.УдалитьФайл(Путь+"\"+Имя);
			КонецЕсли;
		КонецЦикла;
		//теперь каталог чист...
	Иначе
		ФС.СоздатьКаталог(Путь);
	КонецЕсли;
КонецПроцедуры //ОчиститьКаталог

//_____________________________________________________________________________
Функция ПолучитьНомерПакетаВыгрузки(ТекБаза,Спр=0)
	//эта функция находит первый элемент в справочнике периферийных баз, с IDD = ТекБаза.IDD	
	//и вернет его следующий пакет выгрузки
	//основная цель это найти ведущий элемент, по которому ведется сквозная нумерация пакетов
	//когда для одной базы мы указываем несколько сценариев обмена (при этом базы имеют один ИД)
	Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
	Рез=Спр.НайтиПоРеквизиту("IDD",ТекБаза.IDD,1);
	Если (Рез=1)И(ТекБаза.IDD<>ИДДляОтладки) Тогда
		Возврат Спр.НомерПакетаВыгрузки;
	Иначе   
		Спр.НайтиЭлемент(ТекБаза);	//позиционируемся на сами себя - т.к. это исключение из правил
		Возврат ТекБаза.НомерПакетаВыгрузки;//не нашли ???
	КонецЕсли;
КонецФункции 

//_____________________________________________________________________________
Функция ПолучитьНомерПодтвержденногоПакетаЗагрузки(ТекБаза,Спр=0)
	//эта функция находит первый элемент в справочнике периферийных баз, с IDD = База.IDD	
	//и вернет его следующий пакет выгрузки
	//основная цель это найти ведущий элемент, по которому ведется сквозная нумерация пакетов
	//когда для одной базы мы указываем несколько сценариев обмена (при этом базы имеют один ИД)
	Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
	Рез=Спр.НайтиПоРеквизиту("IDD",ТекБаза.IDD,1);
	Если (Рез=1)И(ТекБаза.IDD<>ИДДляОтладки) Тогда
		Возврат Спр.НомерПодтвержденногоПакетаЗагрузки;
	Иначе   
		Спр.НайтиЭлемент(ТекБаза);	//позиционируемся на сами себя - т.к. это исключение из правил
		Возврат ТекБаза.НомерПодтвержденногоПакетаЗагрузки;//не нашли ???
	КонецЕсли;
КонецФункции 



//_____________________________________________________________________________
Функция ПолучитьВладельцаПравил(КакаяТоБаза)
	//эта функция находит правила обмена для базы
	Если КакаяТоБаза.ПравилаОбмена.Выбран()=1 Тогда
		Возврат КакаяТоБаза.ПравилаОбмена;
	Иначе
		Возврат КакаяТоБаза;
	КонецЕсли;
КонецФункции



//_____________________________________________________________________________
//при интеракт. выборе базы для обмена
Процедура УстановитьБазу()
	Если База.Выбран()=1 Тогда
		Если База.ЭтоГруппа()=0 Тогда
			
			Путь="";Имя="";
			РасположениеФайла(Путь,Имя);
			ПутьКОбработке=Сокрлп(Путь+Имя);
			Если ПутьКОбработке="" Тогда
				Если База.ФорматXML=1 Тогда
					ОткрытьДругуюФорму=1;
					Форма.Закрыть();
				КонецЕсли;
			КонецЕсли;
			
			
			МиграцияИзменений=База.МиграцияИзменений;
			МаксКолОбъектовВПакете=База.КоличествоОбъектовВПакете;
			ВыгружатьШапкуПакетовОтдельно=База.ВыгружатьШапкуПакетовОтдельно;
			
			МаксКолОбъектовВПакете=?(МаксКолОбъектовВПакете<1,5000,МаксКолОбъектовВПакете);
			
			ПризнакПолученияMD=База.ПризнакПолученияMD;
			ПризнакОтправленияMD=База.ПризнакОтправленияMD;
			
			РегистрацияПриЗагрузке=База.РегистрацияПриЗагрузке;
			НеИзменятьИДПриЗагрузке=База.НеИзменятьИДПриЗагрузке;
			ИспользоватьТранзакцию=База.ИспользоватьТранзакцию;
			
			
			Попытка//- проверка для облегчения обновления версии Менеджера
				ПриоритетностьБазы=База.ПриоритетностьБазы;
			Исключение
				ПриоритетностьБазы=1;
			КонецПопытки;
			
			Выгрузка=База.Выгрузка;
			НомерПакетаВыгрузки=ПолучитьНомерПакетаВыгрузки(База);//вызов функции, которая сама 
			//определит какой элемент создавался первым (если есть два элемента баз с одинаковым IDD)
			Если НомерПакетаВыгрузки<1 Тогда
				НомерПакетаВыгрузки=1;
			КонецЕсли;
			МаксНомерПакетаВыгрузки=НомерПакетаВыгрузки;
			РежимВыгрузки=База.РежимВыгрузки;
			ДатаН=?(РежимВыгрузки=1,'01.01.1970',База.ДатаНачалаПриВыгрузке);
			ДатаК=?(РежимВыгрузки=1,РабочаяДата(),База.ДатаКонцаПриВыгрузке);
			СПодчиненными=База.СПодчиненнымиПриВыборочнойВыгрузке;
			ТекстВыгрузки=База.ТекстПриВыгрузке;
			
			НомерПодтвержденногоПакетаЗагрузки=ПолучитьНомерПодтвержденногоПакетаЗагрузки(База);
			Если НомерПодтвержденногоПакетаЗагрузки>=МаксНомерПакетаВыгрузки Тогда
				НомерПодтвержденногоПакетаЗагрузки=МаксНомерПакетаВыгрузки-1;
			КонецЕсли;
			
			Загрузка=База.Загрузка;
			НомерПакета=База.НомерПакетаЗагрузки;
			
			ИспользоватьФТП=База.ИспользоватьФТП;
			ПередачаПоПочте=База.ПередачаПоПочте;
			ВстроеннаяАрхивация=База.ВстроеннаяАрхивация;
			
			ПутьКБазеПриВыгрузке=Сокрлп(База.ПутьКБазеПриВыгрузке);
			ПутьКБазеПриЗагрузке=Сокрлп(База.ПутьКБазеПриЗагрузке);
			
			Если СтрДлина(ПутьКБазеПриВыгрузке)<>2 Тогда
				Если ФС.СуществуетФайл(ПутьКБазеПриВыгрузке)=0 Тогда
					М_Сообщить("Не найден путь к каталогу выгрузки "+ПутьКБазеПриВыгрузке,"I",Выгрузка); 
					ЗаписатьВЛогОшибку("Не найден элемент путь к каталогу выгрузки "+ПутьКБазеПриВыгрузке);
					Если НЕ((СтрДлина(ПутьКБазеПриВыгрузке)=2) И (Прав(ПутьКБазеПриВыгрузке,2)=":")) Тогда
						ПутьКБазеПриВыгрузке=КаталогИБ()+"OUT_"+База.IDD;
						Если ФС.СуществуетФайл(ПутьКБазеПриВыгрузке)=0 Тогда
							ФС.СоздатьКаталог(ПутьКБазеПриВыгрузке);
						КонецЕсли;
					КонецЕсли;
					М_Сообщить("Для выгрузки будет использован каталог "+ПутьКБазеПриВыгрузке,,Выгрузка); 
					ЗаписатьВЛогОшибку("Для выгрузки будет использован каталог "+ПутьКБазеПриВыгрузке);
					Попытка
						Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
						Спр.НайтиЭлемент(База);
						Спр.ПутьКБазеПриВыгрузке=ПутьКБазеПриВыгрузке;
						Спр.Записать();
					Исключение    
						ЗаписатьВЛогОшибку("Ошибка при записи в справочник ПереферийныеБазы",База);
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрДлина(ПутьКБазеПриЗагрузке)<>2 Тогда
			Если ФС.СУществуетФайл(ПутьКБазеПриЗагрузке)=0 Тогда
				М_Сообщить("Не найден путь к каталогу загрузки "+ПутьКБазеПриЗагрузке,"I",Загрузка); 
				ЗаписатьВЛогОшибку("Не найден элемент путь к каталогу загрузки "+ПутьКБазеПриЗагрузке);
				Если НЕ((СтрДлина(ПутьКБазеПриЗагрузке)=2) И (Прав(ПутьКБазеПриЗагрузке,2)=":")) Тогда
					ПутьКБазеПриЗагрузке=КаталогИБ()+"IN_"+База.IDD;
					Если ФС.СУществуетФайл(ПутьКБазеПриЗагрузке)=0 Тогда
						ФС.СоздатьКаталог(ПутьКБазеПриЗагрузке);
					КонецЕсли;
				КонецЕсли;
				М_Сообщить("Для загрузки будет использован каталог "+ПутьКБазеПриЗагрузке,,Загрузка);   
				ЗаписатьВЛогОшибку("Для загрузки будет использован каталог "+ПутьКБазеПриЗагрузке);
				Попытка
				Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
				Спр.НайтиЭлемент(База);
				Спр.ПутьКБазеПриЗагрузке=ПутьКБазеПриЗагрузке;
				Спр.Записать();
				Исключение 
				ЗаписатьВЛогОшибку("Ошибка при записи в справочник ПереферийныеБазы",База);
				КонецПопытки;
			КонецЕсли;
			КонецЕсли;
			НомерПакета=?(НомерПакета<1,1,НомерПакета);
			
			НомерПакетаЗагрузки=НомерПакета;
			
			
			ЕстьВыгрузкаЗагрузка();
			
			СделатьВидимыми(1);
			
			Если ТипЗначения(База.ОбъектПриВыборочнойВыгрузке)<>0 Тогда//что-то уже было
				Если ТипЗначения(База.ОбъектПриВыборочнойВыгрузке)=11 Тогда
					ИмяОб=База.ОбъектПриВыборочнойВыгрузке.Вид();
					НомС=ТипОбъектаВыборочно.НайтиЗначение("Справочник"+?(Сокрлп(ИмяОб)="","",".")+ИмяОб);
					Форма.ОбъектВыборочно.НазначитьТип("Справочник"+?(Сокрлп(ИмяОб)="","",".")+ИмяОб);
					ТипОбъектаВыборочно.ТекущаяСтрока(НомС);
				КонецЕсли;
				Если ТипЗначения(База.ОбъектПриВыборочнойВыгрузке)=12 Тогда
					ИмяОб=База.ОбъектПриВыборочнойВыгрузке.Вид();
					НомС=ТипОбъектаВыборочно.НайтиЗначение("Документ"+?(Сокрлп(ИмяОб)="","",".")+ИмяОб);
					Форма.ОбъектВыборочно.НазначитьТип("Документ"+?(Сокрлп(ИмяОб)="","",".")+ИмяОб);
					ТипОбъектаВыборочно.ТекущаяСтрока(НомС);
				КонецЕсли;
				ОбъектВыборочно=База.ОбъектПриВыборочнойВыгрузке;
			КонецЕсли;
			
			ЗаполнитьСписокПакетов();
		Иначе//группа баз
			СделатьВидимыми(0);
		КонецЕсли;
	Иначе//все базы
		СделатьВидимыми(0);
	КонецЕсли;
КонецПроцедуры

//_____________________________________________________________________________


Процедура НеобходимыеЗакладки()
	Форма.Закладки.ДобавитьЗначение("Общие","Общие");
	Форма.Закладки.ДобавитьЗначение("Инициализация","Инициализация");
	Форма.Закладки.ДобавитьЗначение("Подтверждение","Подтверждение");
	Форма.Закладки.ДобавитьЗначение("Настройка","Сервис");
	Форма.Закладки.ДобавитьЗначение("ОПрограмме","О программе");
	Форма.ИспользоватьСлой("Общие");
	ЕстьВыгрузкаЗагрузка();
КонецПроцедуры



//_____________________________________________________________________________
Процедура СформироватьСписокПериодическихРеквизитов()
	СписокПериодическихРеквизитов=СоздатьОбъект("СписокЗначений");
	СписокНомеровПериодическихРеквизитов=СоздатьОбъект("СписокЗначений");
	//по справочникам
	Для ф=1 по Метаданные.Справочник() Цикл
		Для а=1 по Метаданные.Справочник(ф).Реквизит() Цикл
			П=Метаданные.Справочник(ф).Реквизит(а).Периодический;
			Если П=1 Тогда
				ИмяСпр=Метаданные.Справочник(ф).Идентификатор;
				ИмяРекв=Метаданные.Справочник(ф).Реквизит(а).Идентификатор;
				СписокПериодическихРеквизитов.ДобавитьЗначение(1,ИмяСпр+"."+ИмяРекв);
				СписокНомеровПериодическихРеквизитов.ДобавитьЗначение(0,ИмяСпр+"."+ИмяРекв);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	//констаны тоже бывают периодическими
	ИмяСпр="Константа";
	Для ф=1 по Метаданные.Константа() Цикл
		П=Метаданные.Константа(ф).Периодический;
		Если П=1 Тогда
			ИмяРекв=Метаданные.Константа(ф).Идентификатор;
			СписокПериодическихРеквизитов.ДобавитьЗначение(1,ИмяСпр+"."+ИмяРекв);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //СформироватьСписокПериодическихРеквизитов

//_____________________________________________________________________________




//_____________________________________________________________________________
Процедура УстановитьРеквизитыТаблицыПриВыгрузке(Табл1,Вид,П);
	А_Номер=Таб_НоваяСтрока(Табл1);
	Таб_УстановитьЗначение(Табл1,А_Номер,"Наименование",Вид.Наименование);
	Таб_УстановитьЗначение(Табл1,А_Номер,"ВклУсловие",Вид.ВклУсловие);
	Таб_УстановитьЗначение(Табл1,А_Номер,"ВклЗначение",Вид.ВклЗначение);
	Таб_УстановитьЗначение(Табл1,А_Номер,"Условие",Вид.Условие);
	Таб_УстановитьЗначение(Табл1,А_Номер,"Значение",Вид.Значение);
	Таб_УстановитьЗначение(Табл1,А_Номер,"История",?(П=1,ДаДА,"-"));
	Если (Вид.ВклУсловие=ДаДа)ИЛИ(Вид.ВклЗначение=ДаДа) Тогда
		глМОДБылФильтрВыгрузки=1;
	КонецЕсли;
КонецПроцедуры

//_____________________________________________________________________________
Функция ПолучитьОбъект_ТаблицаЗначенийДляВыгрузки()
	Табл1=ПолучитьОбъект_ТаблицаЗначений();
	Таб_ВставитьКолонку(Табл1,"Наименование");
	Таб_ВставитьКолонку(Табл1,"ВклУсловие");
	Таб_ВставитьКолонку(Табл1,"Условие");
	Таб_ВставитьКолонку(Табл1,"ВклЗначение");
	Таб_ВставитьКолонку(Табл1,"Значение");
	Таб_ВставитьКолонку(Табл1,"История");
	
	//Табл1=СоздатьОбъект("ТаблицаЗначений");
	//Табл1.ВставитьКолонку("Наименование","Строка",100);
	//Табл1.ВставитьКолонку("ВклУсловие","Строка",1);
	//Табл1.ВставитьКолонку("Условие");
	//Табл1.ВставитьКолонку("ВклЗначение","Строка",1);
	//Табл1.ВставитьКолонку("Значение");
	//Табл1.ВставитьКолонку("История","Строка",1);
	Возврат Табл1;
КонецФункции


//***     ***     ***     *** *****  *** *** ***  ***    ***      *** *****            ***   ***
//***     ***     ***    ***    ***  *** *** ***  ***  ***       ***    ***           ***********
//***     ***     ***   ***     ***  ***     ***  ******        ***     ***           ***********
//***     ***     ***   ***     ***  ***     ***  ******        ***     ***          *************
//***     ***     ***   ***********  ***     ***  ******        ***********          *************
//***     ***     ***   *** *** ***  ***     ***  ***   ***     *** *** ***         ***************
//*** *** *** *** ***   ***     ***  ***     ***  ***     ***   ***     *** *      *****************       *
//*** *** *** *** ***   ***     ***  ***     ***  ***      ***  ***     ***  ******************************
//*** *** *** *** ***   ***     ***  ***     ***  ***      ***  ***     ***    **************************
//
//++  ++  ++      +++    ++++++  ++++++++      ++++
//++  ++  ++     ++ ++  ++   ++  ++    ++     ++ ++
//++  ++  ++    ++  ++   ++++++  ++    ++    ++  ++
//++  ++  ++    ++  ++    ++ ++  ++    ++    ++++++
//++  ++  ++   ++   ++   ++  ++  ++    ++   ++   ++
//++++++++++  ++    ++  ++   ++  ++    ++  ++    ++
//_____________________________________________________________________________

//_____________________________________________________________________________
//создаем шапку пакета, отражающую структуру
//выгружаемой информации; шапка строится по справочнику "ПравилаВыгрузки"
Функция ВыгрузитьШапку(ВыгрБаза,РежТолькоШапка=0,УстИмяФайла="")
	//Сначала проверим на различные ошибки ...
	ИмяФайлаШапки=КаталогИБ()+"header"+ИмяКомпьютера()+".mod";
	М_Сообщить("Выгружаем шапку...");
	Если ВыгрБаза.Выбран()=0 Тогда
		Сообщить("Ошибка:не выбрана база !","!!!");  
		ЗаписатьВЛогОшибку("Ошибка при создании пакета. Не выбрана база приемник");
		Возврат 0;
	КонецЕсли;
	
	Если ВыгрБаза.ЭтоГруппа()=1 Тогда
		Сообщить("Ошибка:выбрана группа баз !","!!!"); 
		ЗаписатьВЛогОшибку("Ошибка при создании пакета. В качестве  базы приемника выбрана группа баз");
		Возврат 0;
	КонецЕсли;
	
	Если Лев(Сокрлп(Сокрп(ВыгрБаза.IDD)),7)=Лев(Сокрлп(Константа.IDD),7) Тогда
		Если РежимНастройки=0 Тогда
		Сообщить("Для базы "+ВыгрБаза+" номер IDD  совпадает с IDD вашей базы - выгрузка не производится !","!!!");
		ЗаписатьВЛогОшибку("Для базы "+ВыгрБаза+" номер IDD  совпадает с IDD вашей базы - выгрузка не производится !");
		Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	
	
	                   
	СформироватьСписокПериодическихРеквизитов();//для каждой базы формируем заново
	
	//теперь формируем заголовок и шапку
	
	Т=СоздатьОбъект("Текст");
	МаксДатаВыгрДокумента=Дата(0);
	//смотрим - может уже такая база недавно выгружалась ...
	
	Если глВыгрБазаМОДВыгр=ВыгрБаза Тогда
		Если ФС.СуществуетФайл(ИмяФайлаШапки)=1 Тогда
			Если РежТолькоШапка=1 Тогда //из формы списка правил выгрузки была подана команда выгрузить только шапку ...
				Т.Открыть(ИмяФайлаШапки);
				Если УстИмяФайла="" Тогда
					ИмяФайла=СокрЛП(ПутьКБазеПриВыгрузке)+"\header.mod";
				Иначе
					ИмяФайла=УстИмяФайла;
				КонецЕсли;
				Т.Записать(ИмяФайла);
				Возврат 1;
			КонецЕсли;
			
			Если ВыгружатьШапкуПакетовОтдельно=1 Тогда
				//выгружаем только заголовок
				Т=СоздатьОбъект("Текст");
				Для А=1 По 32 Цикл Т.ДобавитьСтроку(" "); КонецЦикла;
				Т.ЗаменитьСтроку(14,НоваяШапкаПакетов);// 14
				Т.ЗаменитьСтроку(15,"header.mod");// 15
				
			Иначе
				Т.Открыть(ИмяФайлаШапки);
				Т.ЗаменитьСтроку(15," ");// 15
			КонецЕсли;
			СписокПравил=глСписокПравилМОД;
			СписокВидовСпр=глСписокВидовСпрМОД;
			Т.ЗаменитьСтроку(1,ВерсияПротоколаМОД);// 1 номер версии протокола
			Т.ЗаменитьСтроку(2,Константа.IDD);// 2
			Т.ЗаменитьСтроку(3,Сокрп(ВыгрБаза.IDD));// 3
			Т.ЗаменитьСтроку(5,Строка(НомерПакетаЗагрузки-1)); //5
			Т.ЗаменитьСтроку(6,ТекстВыгрузки);// 6
			Т.ЗаменитьСтроку(11,ТекущаяДата());// 11- Дата выгрузки
			Т.ЗаменитьСтроку(12,ТекущееВремя());// 12- Время начала выгрузки
			Если НоваяВерсияШапки=0 Тогда
				Т.ЗаменитьСтроку(14," ");// 14 - версия шапки старая !!!
			КонецЕсли;
			
			//_____________________________________________________________________________
			//работа Менеджера в упрощенном режиме 
			Спр=СоздатьОбъект("Справочник.ПравилаВыгрузки");
			Спр.ИспользоватьВладельца(ПолучитьВладельцаПравил(ВыгрБаза));
			Рез=Спр.ВыбратьЭлементы();
			Спр=0;
			Если Рез=0 Тогда
				Т.ЗаменитьСтроку(14,ИдентичнаяКонфигурация);// 14
			КонецЕсли;
			
			НоваяВерсияШапки=0;
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	
	
	//Нет не выгружали - заново формируем заголовок и шапку
	Т.ДобавитьСтроку(ВерсияПротоколаМОД);// 1 номер версии протокола
	Т.ДобавитьСтроку(Константа.IDD);// 2
	Т.ДобавитьСтроку(Сокрп(ВыгрБаза.IDD));// 3
	Т.ДобавитьСтроку(" ");
	Т.ДобавитьСтроку(Строка(НомерПакетаЗагрузки-1)); //5
	Т.ДобавитьСтроку(ТекстВыгрузки);// 6
	Т.ДобавитьСтроку(" ");// 7 - место для количества элементов справочников
	Т.ДобавитьСтроку(" ");// 8 - место для количества  документов
	Т.ДобавитьСтроку(" ");// 9 - Дата последнего оперативного проведенного документа
	Т.ДобавитьСтроку(" ");// 10- Дата последенего бухгалтерского провед. документа
	Т.ДобавитьСтроку(ТекущаяДата());// 11- Дата выгрузки
	Т.ДобавитьСтроку(ТекущееВремя());// 12- Время начала выгрузки
	Т.ДобавитьСтроку(" ");// 13- Время конца выгрузки
	Т.ДобавитьСтроку(НоваяШапкаПакетов);//14 - сигнал в периферийную базу о том, что надо заново заполнить правила загрузки
	// т.к. у нас изменились правила выгрузки
	НоваяВерсияШапки=1;//эту переменную мы устанавливаем потому, что первый вызов текущей процедуры
	//пакетов не выгружает (он служит для заполения правил, которые необходимы при выборочной выгрузке)
	
	Если ВыгружатьШапкуПакетовОтдельно=1 Тогда
		Т.ДобавитьСтроку("header.mod");// 15     - признак того, что шапка передается отдельным файлом
	Иначе
		Т.ДобавитьСтроку(" ");// 15
	КонецЕсли;
	
	Т.ДобавитьСтроку(Сокрп(СтрЗаменить(ВыгрБаза.Описание,РазделительСтрок,"$-Нов.стр-$")));// 16  -  Описание правил обмена из базы источника
	
	Для Ц=17 по 32 Цикл
		Т.ДобавитьСтроку(" ");
	КонецЦикла;
	
	
	
	СписокПравил=СоздатьОбъект("СписокЗначений");
	СписокВидовСпр=СоздатьОбъект("СписокЗначений");
	
	//_____________________________________________________________________________
	//работа Менеджера в упрощенном режиме 
	Спр=СоздатьОбъект("Справочник.ПравилаВыгрузки");
	Спр.ИспользоватьВладельца(ПолучитьВладельцаПравил(ВыгрБаза));
	Рез=Спр.ВыбратьЭлементы();
	Спр=0;
	Если Рез=0 Тогда
		Т.ЗаменитьСтроку(14,ИдентичнаяКонфигурация);// 14
		ЗаполнитьСтруктуруПравил(ПолучитьВладельцаПравил(ВыгрБаза),"Выгрузка");
		
		глМОДБылФильтрВыгрузки=0;
		Для А=1 по Метаданные.Справочник() Цикл
			СписокВидовСпр.ДобавитьЗначение(А,Метаданные.Справочник(А).Идентификатор);
		КонецЦикла;
		
		//подготавливаем для быстрой выгрузки в следующий раз
		глСписокПравилМОД=СписокПравил;
		глСписокВидовСпрМОД=СписокВидовСпр;
		Т.Записать(ИмяФайлаШапки);
		глВыгрБазаМОДВыгр=ВыгрБаза;
		Возврат 1;
	КонецЕсли;
	//_____________________________________________________________________________
	
	
	М_Состояние(ВыгрБаза.Наименование+" - заполнение шапки выгрузки.");
	
	глСписокПравилМОД=0;
	глСписокВидовСпрМОД=0;
	
	глМОДБылФильтрВыгрузки=0;
	
	СпрРод=СоздатьОбъект("Справочник.ПравилаВыгрузки");
	СпрРод.ИспользоватьВладельца(ПолучитьВладельцаПравил(ВыгрБаза));
	СпрРод.ПорядокКодов();
	СпрРод.ВыбратьЭлементы();
	Т.ДобавитьСтроку(0);//количество типов
	НомерСтрКолТипов=Т.КоличествоСтрок();       //<----- запоминаем позицию
	КолТипов=0;
	Прогрессор(0,17,0,"Выгрузка шапки");
	ДляПрогрессора=0;
	Пока СпрРод.ПолучитьЭлемент(0)=1 Цикл //выбираем верхний уровень т.е. Документы,Справочники ...
		ДляПрогрессора=ДляПрогрессора+2;
		Прогрессор(ДляПрогрессора);
		КолТипов=КолТипов+1;
		Т.ДобавитьСтроку(СпрРод.Наименование);
		Т.ДобавитьСтроку(0);//количество видов объектов данного типа
		НомерСтрКолВидов=Т.КоличествоСтрок();       //<----- запоминаем позицию
		КолВидов=0;
		Если (СпрРод.ПризнакВыгрузки=ДаДа) Тогда
			Спр2=СоздатьОбъект("Справочник.ПравилаВыгрузки");
			Родитель=СпрРод.ТекущийЭлемент();
			Если Родитель.ЭтоГруппа()=0 Тогда
				Продолжить;
			КонецЕсли;
			Спр2.ИспользоватьРодителя(Родитель);
			Спр2.ИспользоватьВладельца(ПолучитьВладельцаПравил(ВыгрБаза));
			Спр2.ПорядокКодов();
			Спр2.ВыбратьЭлементы();
			
			
			ТипОбъекта=СпрРод.Наименование;
			Если ТипОбъекта="Справочники" Тогда
				Тип="11";
			ИначеЕсли ТипОбъекта="Документы" Тогда
				Тип="12";
			Иначе
				Тип=ТипОбъекта;
			КонецЕсли;
			
			Если ТипОбъекта="Константы" Тогда
				Табл1=ПолучитьОбъект_ТаблицаЗначенийДляВыгрузки()
			ИначеЕсли ТипОбъекта="Виды расчетов" Тогда
				Табл1=ПолучитьОбъект_ТаблицаЗначенийДляВыгрузки()
			ИначеЕсли ТипОбъекта="Календари" Тогда
				Табл1=ПолучитьОбъект_ТаблицаЗначенийДляВыгрузки()
			Иначе
				Табл1=СоздатьОбъект("ТаблицаЗначений");
				Табл1.ВставитьКолонку("Указатель");
				Табл1.ВставитьКолонку("Наименование","Строка",100);
				Табл1.ВставитьКолонку("Движения","Строка",1);
			КонецЕсли;
			Если ТипОбъекта<>"Перечисления"  Тогда //для перечислений не надо создавать динамической структуры!!!
				СписокПравил.ДобавитьЗначение(Табл1,ТипОбъекта);
			КонецЕсли;
			
			Пока Спр2.ПолучитьЭлемент(0)=1 Цикл //выбираем виды н-р РасходнаяНакл,ПриходнаяНакл...или для спр. Номенклатура,Контрагенты
				Если (Спр2.ПризнакВыгрузки=ДаДа) Тогда
					КолВидов=КолВидов+1;
					Вид=Спр2.ТекущийЭлемент();
					ИмяВида=Сокрлп(Вид.Синоним);
					ИмяВида=?(ИмяВида="",Вид.Наименование,ИмяВида);
					Т.ДобавитьСтроку(Сокрп(ИмяВида));//название вида объекта
					Если Вид.ЭтоГруппа()=0 Тогда
						//возможно это константы и т.д.
						
						Ключ="Константа."+Вид.Наименование;
						П=?(СписокПериодическихРеквизитов.Получить(Ключ)=1,1,0);//проверка на периодичность реквизита
						//т.к. в правилах может быть неправильно из-за н-р. изменения конфигурации
						Если (П=1) И (Сокрлп(Вид.История)<>ДаДА) Тогда
							П=0;СписокПериодическихРеквизитов.Установить(Ключ,0);
						КонецЕсли;
						Т.ДобавитьСтроку(П);//тип 1 - периодический 0 - нет
						
						УстановитьРеквизитыТаблицыПриВыгрузке(Табл1,Вид,П);
						
					Иначе
						
						Спр=СоздатьОбъект("Справочник.ПравилаВыгрузки");
						Спр.ИспользоватьРодителя(Вид);
						Спр.ИспользоватьВладельца(ПолучитьВладельцаПравил(ВыгрБаза));
						Спр.ПорядокКодов();
						Спр.ВыбратьЭлементы();
						
						
						
						// а теперь заходим внутрь вида
						Если (ТипОбъекта="Справочники")ИЛИ(ТипОбъекта="Операции")ИЛИ(ТипОбъекта="Перечисления")  Тогда
							//здесь у нас обрабатываются 3-х уровневые справочники
							
							Табл=ПолучитьОбъект_ТаблицаЗначенийДляВыгрузки();
							
							Табл1.НоваяСтрока();
							Табл1.Указатель=Табл;
							Табл1.Наименование=Вид.Наименование;
							Табл1.Движения=Вид.Движения;
							
							
							СписокВидовСпр.ДобавитьЗначение(КолВидов,Вид.Наименование);
							Т.ДобавитьСтроку(0);//Количество реквизита справочника
							НомерСтрКолРеквизитов=Т.КоличествоСтрок(); //<----- запоминаем позицию
							КолРеквизитов=0;
							Пока Спр.ПолучитьЭлемент(0)=1 Цикл
								Если (Спр.ПризнакВыгрузки=ДаДа) Тогда
									КолРеквизитов=КолРеквизитов+1;
									//здесь нас ожидают сразу элементы
									
									Имя=?(Сокрлп(Спр.Синоним)="",Спр.Наименование,Спр.Синоним);
									Т.ДобавитьСтроку(Сокрп(Имя));//название реквизита справочника
									
									Если (ТипОбъекта="Справочники") Тогда
										Ключ=Вид.Наименование+"."+Спр.Наименование;
										П=?(СписокПериодическихРеквизитов.Получить(Ключ)=1,1,0);//проверка на периодичность реквизита
										//т.к. в правилах может быть неправильно из-за н-р. изменения конфигурации
										Если (П=1) И (Сокрлп(Спр.История)<>ДаДА) Тогда
											П=0;СписокПериодическихРеквизитов.Установить(Ключ,0);
										КонецЕсли;
										Если П=1 Тогда//это нужно для выгрузки движений по справочникам
											СписокНомеровПериодическихРеквизитов.Установить(Ключ,КолРеквизитов);
										КонецЕсли;
										Т.ДобавитьСтроку(П);//тип 1 - периодический 0 - нет
									КонецЕсли;
									
									УстановитьРеквизитыТаблицыПриВыгрузке(Табл,Спр,П);
									
								КонецЕсли;
							КонецЦикла;
							Т.ЗаменитьСтроку(НомерСтрКолРеквизитов,КолРеквизитов);
						Иначе
							//а здесь 4-х уровневые объекты...
							
							Список2=СоздатьОбъект("СписокЗначений");
							//						Список.ДобавитьЗначение(Список2,Вид.Наименование);
							Табл1.НоваяСтрока();
							Табл1.Указатель=Список2;  //ссылка на список
							Табл1.Наименование=Вид.Наименование;
							Табл1.Движения=Вид.Движения;
							
							Т.ДобавитьСтроку(0);//Количество реквизита
							НомерСтрКолПодВидов=Т.КоличествоСтрок(); //<----- запоминаем позицию КолПодВидов
							КолПодВидов=0;
							
							
							Пока Спр.ПолучитьЭлемент(0)=1 Цикл
								Если (Спр.ПризнакВыгрузки=ДаДа) Тогда
									//здесь опять цикл по группам
									КолПодВидов=КолПодВидов+1;
									
									Имя=Сокрлп(?(Сокрлп(Спр.Синоним)="",Спр.Наименование,Спр.Синоним));
									Т.ДобавитьСтроку(Имя);
									Т.ДобавитьСтроку(0);//Количество реквизита
									НомерСтрКолРеквизитов=Т.КоличествоСтрок(); //<----- запоминаем позицию
									КолРеквизитов=0;
									
									
									Табл=ПолучитьОбъект_ТаблицаЗначенийДляВыгрузки();
									
									Список2.ДобавитьЗначение(Табл,Спр.ТекущийЭлемент().Наименование);
									
									СпрРекв=СоздатьОбъект("Справочник.ПравилаВыгрузки");
									Родит1=Спр.ТекущийЭлемент();
									Если Родит1.ЭтоГруппа()=0 Тогда
										Продолжить;
									КонецЕсли;
									СпрРекв.ИспользоватьРодителя(Родит1);
									СпрРекв.ИспользоватьВладельца(ПолучитьВладельцаПравил(ВыгрБаза));
									СпрРекв.ПорядокКодов();
									СпрРекв.ВыбратьЭлементы();
									
									
									
									
									Пока СпрРекв.ПолучитьЭлемент(1)=1 Цикл
										Если (СпрРекв.ПризнакВыгрузки=ДаДа) Тогда
											КолРеквизитов=КолРеквизитов+1;
											//здесь нас ожидают элементы
											Имя=?(Сокрлп(СпрРекв.Синоним)="",СпрРекв.Наименование,СпрРекв.Синоним);
											Т.ДобавитьСтроку(Сокрп(Имя));//название реквизита документа,регистра ...
											
											УстановитьРеквизитыТаблицыПриВыгрузке(Табл,СпрРекв,"");
											
										КонецЕсли;
									КонецЦикла;
									Т.ЗаменитьСтроку(НомерСтрКолРеквизитов,""+КолРеквизитов);
								КонецЕсли;
							КонецЦикла;
							
							Т.ЗаменитьСтроку(НомерСтрКолПодВидов,""+КолПодВидов);
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Т.ЗаменитьСтроку(НомерСтрКолВидов,""+КолВидов+"          "+Число(Т.КоличествоСтрок()+1));
	КонецЦикла;
	
	Т.ЗаменитьСтроку(НомерСтрКолТипов,""+КолТипов+"          "+Число(Т.КоличествоСтрок()+1));
	Т.ЗаменитьСтроку(13,ТекущееВремя());
	Если РежТолькоШапка=1 Тогда //выгружаем только шапку ...
		Если УстИмяФайла="" Тогда
			ИмяФайла=СокрЛП(ПутьКБазеПриВыгрузке)+"\header.mod";
		Иначе
			ИмяФайла=УстИмяФайла;
		КонецЕсли;
		Т.Записать(ИмяФайла);
		Прогрессор(0);
		Возврат 1;
	КонецЕсли;
	
	//подготавливаем для быстрой выгрузки в следующий раз
	глСписокПравилМОД=СписокПравил;
	глСписокВидовСпрМОД=СписокВидовСпр;
	Т.Записать(ИмяФайлаШапки);
	глВыгрБазаМОДВыгр=ВыгрБаза;
	
	
	
	Если ВыгружатьШапкуПакетовОтдельно=1 Тогда
		//режим при котором шапка отправляется отдельно от пакетов
		ИмяФайла=СокрЛП(ПутьКБазеПриВыгрузке)+"\header.mod";
		Т.Записать(ИмяФайла);//запись отдельного файла шапки
		//отделяем заголовок от шапки
		Т2=Т;
		Т=СоздатьОбъект("Текст");
		Для А=1 По 32 Цикл
			Т.ДобавитьСтроку(Т2.ПолучитьСтроку(А));
		КонецЦикла;
		//итак в объекте Т - только один заголовок
	КонецЕсли;
	
	Прогрессор(0);
	Возврат 1;
КонецФункции
//_____________________________________________________________________________





//_____________________________________________________________________________
Функция ФильтрВыгрузки(Таб1,А,Атрибут)
	//********** условия
	Если глМОДБылФильтрВыгрузки<>1 Тогда
		Возврат 1;
	КонецЕсли;
	ВклУсловие=Таб_ПолучитьЗначение(Таб1,А,"ВклУсловие");
	Если ВклУсловие=ДаДа Тогда
		Условие=Таб_ПолучитьЗначение(Таб1,А,"Условие");
		Если ТипЗначенияСтр(Условие)="Число" Тогда
			Атрибут=Число(Атрибут);
		ИначеЕсли ТипЗначенияСтр(Условие)="Строка" Тогда
			Атрибут=Сокрлп(Строка(Атрибут));
			Условие=Сокрлп(Условие);
		ИначеЕсли ТипЗначенияСтр(Условие)="Дата" Тогда
			Атрибут=Дата(Атрибут);
		ИначеЕсли ТипЗначения(Условие)=0 Тогда
			Условие=Число(Условие);
		КонецЕсли;
		
		Если Атрибут<>Условие Тогда
			Возврат 0;// не загружаем !!!!
		КонецЕсли;
	КонецЕсли;
	
	
	//********* значения
	ВклЗначение=Таб_ПолучитьЗначение(Таб1,А,"ВклЗначение");
	Если ВклЗначение=ДаДА Тогда
		Атрибут=Таб_ПолучитьЗначение(Таб1,А,"Значение");
	КонецЕсли;
	
	Возврат 1;
КонецФункции


//_____________________________________________________________________________
Функция ФильтрЗагрузки(Таб1,А,Атрибут,ПрисвоеноНовоеЗначение)
	ПрисвоеноНовоеЗначение=0;
	Если глМОДБылФильтрЗагрузки<>1 Тогда
		Возврат 1;
	КонецЕсли;
	//********** условия
	ВклУсловие=Таб_ПолучитьЗначение(Таб1,А,"ВклУсловие");
	Если ВклУсловие=ДаДа Тогда
		Условие=Таб_ПолучитьЗначение(Таб1,А,"Условие");
		Если ТипЗначенияСтр(Условие)="Число" Тогда
			Атрибут=Число(Атрибут);
		ИначеЕсли ТипЗначенияСтр(Условие)="Строка" Тогда
			Атрибут=Сокрлп(Строка(Атрибут));
			Условие=Сокрлп(Условие);
		ИначеЕсли ТипЗначенияСтр(Условие)="Дата" Тогда
			Атрибут=Дата(Атрибут);
		ИначеЕсли ТипЗначения(Условие)=0 Тогда
			Условие=Число(Условие);
		КонецЕсли;
		Если Атрибут<>Условие Тогда
			Возврат 0;// не загружаем !!!!
		КонецЕсли;
	КонецЕсли;
	
	
	//********* значения
	ВклЗначение=Таб_ПолучитьЗначение(Таб1,А,"ВклЗначение");
	Если ВклЗначение=ДаДА Тогда
		Значение=Таб_ПолучитьЗначение(Таб1,А,"Значение");
		ПрисвоеноНовоеЗначение=1;
		Атрибут=Значение;
	КонецЕсли;
	
	Возврат 1;
КонецФункции



//_____________________________________________________________________________
Процедура ВыгрузитьСчет(Объект,ТаблицаСчетов,БДПакетов="")
	НачКолСтрок=Т.КоличествоСтрок();
	Если ТипЗначенияСтр(ТаблицаСчетов)<>"ТаблицаЗначений" Тогда
		Возврат;
	КонецЕсли;
	
	Счет=ЗначениеИзСтроки(Объект);
	Если ТипЗначенияСтр(Счет)<>"Счет" Тогда
		Возврат;
	КонецЕсли;
	
	НомерПланаСчетов=0;
	ПланСчетов=Счет.Вид();//ПланСчетов().Идентификатор();
	Рез=ТаблицаСчетов.НайтиЗначение(ПланСчетов,НомерПланаСчетов,"Наименование");
	Если Рез=0 Тогда//т.е. не разрешено выгружать
		Возврат;
	КонецЕсли;
	СписокСчетов=ТаблицаСчетов.ПолучитьЗначение(НомерПланаСчетов,"Указатель");
	
	КодСчета=Счет.Код;
	
	СЗ=СписокСчетов.Получить(КодСчета); //здесь мы ищем счет в списке значений по представлению !!!
	Рез=СписокСчетов.НайтиЗначение(СЗ);
	Если Рез=0 Тогда//т.е. не разрешено выгружать
		Возврат;
	КонецЕсли;
	НомерСчета=Рез;   

	//Алгортим Успеха Начало
	//
	ДобавитьВЖурналРегистрации(Счет,1,БДПакетов.IDDDB);
	//
	//Алгортим Успеха Конец	
	
	М_Состояние("Счет   "+Счет);
	М_Сообщить("Выгружается счет "+Счет);
	
	Т.ДобавитьСтроку(94); //Счет
	НомерКолВидаОбъекта=Т.КоличествоСтрок(); //<------ запоминаем позицию
	Т.ДобавитьСтроку(НомерПланаСчетов);//Номер плана счетов по порядку (как он идет в шапке) 
	Т.ДобавитьСтроку(НомерСчета);//Номер счета по порядку (как он идет в шапке) 
	Т.ДобавитьСтроку(Счет.Код);//Код счета
	Т.ДобавитьСтроку(Счет.Наименование);//Наименование счета
	Т.ДобавитьСтроку(Счет.ЭтоГруппа());//Признак группы (0,1)
	Т.ДобавитьСтроку(Счет.ЗаданВКонфигурации());//Признак создания в конфигураторе (0,1)
	Т.ДобавитьСтроку(Счет.Валютный);
	Т.ДобавитьСтроку(Счет.Количественный);
	Т.ДобавитьСтроку(Счет.Забалансовый);
	Т.ДобавитьСтроку(Счет.Активный);
	Для А=1 По 5 Цикл
		Т.ДобавитьСтроку(ЗначениеВСтроку(Счет.ВидСубконто(А)));
		Т.ДобавитьСтроку(Счет.ТолькоОбороты(А));
		Т.ДобавитьСтроку(Счет.УчетПоСумме(А));
		Т.ДобавитьСтроку(Счет.УчетПоВалютнойСумме(А));
		Т.ДобавитьСтроку(Счет.УчетПоКоличеству(А));
	КонецЦикла;
	
	
	Т.ЗаменитьСтроку(НомерКолВидаОбъекта,"94          "+Число(Т.КоличествоСтрок()+1));//ссылка на следующую строку если мы не хотим загружать этот объект
КонецПроцедуры //ВыгрузитьСчет

//_____________________________________________________________________________

Процедура ВыгрузитьКонстанту(Реквизит,БДПакеты,ТаблицаКонстант)
	НачКолСтрок=Т.КоличествоСтрок();
	НомерВида=0;
	Если ТипЗначенияСтр(ТаблицаКонстант)<>"СписокЗначений" Тогда
		Возврат;//константы не выгружаются вообще
	КонецЕсли;
	Рез=Таб_НайтиЗначение(ТаблицаКонстант,Реквизит,НомерВида,"Наименование");
	Если Рез=0 Тогда//т.е. не разрешено выгружать
		Возврат;
	КонецЕсли;

	//******************************************************************
	//Алгортим Успеха Начало
	//
	ДобавитьВЖурналРегистрации(Реквизит,1,БДПакеты.IDDDB);
	//
	//Алгортим Успеха Конец
	//******************************************************************
	
	//	М_Состояние("Константа."+Реквизит);
	М_Сообщить("Выгружается константа "+Реквизит);
	
	Т.ДобавитьСтроку(95); //константа
	НомерКолВидаОбъекта=Т.КоличествоСтрок(); //<------ запоминаем позицию
	Т.ДобавитьСтроку(НомерВида);
	
	Если Лев(Реквизит,1)="@" Тогда //значит этот реквизит считается специальным образом
		Стр=Сред(Реквизит,2);
		//Обычное задание выражения
		Шаблон("[Получить("+Стр+")]");Атрибут=глВыражение;
		Если ФильтрВыгрузки(ТаблицаКонстант,НомерВида,Атрибут)=0 Тогда
			//возвращаемся на начальную позицию
			А=Т.КоличествоСтрок();
			Пока А>НачКолСтрок Цикл
				Т.УдалитьСтроку(А);
				А=Т.КоличествоСтрок();
			КонецЦикла;
			Возврат;
		КонецЕсли;
		Т.ДобавитьСтроку(ПолучитьПредставлениеОбъекта(Атрибут));
	Иначе
		История=Таб_ПолучитьЗначение(ТаблицаКонстант,НомерВида,"История");
		Если История<>ДаДа Тогда
			Если Число(Метаданные.Константа(Реквизит).Периодический)=0 Тогда
				Атрибут=Константа.ПолучитьАтрибут(Реквизит);
			Иначе    //константа периодическая, а надо выгрузить как непериодическую !!
				Пер=СоздатьОбъект("Периодический");
				Пер.ИспользоватьОбъект(Реквизит);
				Атрибут=Пер.ЗначениеНаДату(РабочаяДата());
			КонецЕсли;
			Если ФильтрВыгрузки(ТаблицаКонстант,НомерВида,Атрибут)=0 Тогда
				//возвращаемся на начальную позицию
				А=Т.КоличествоСтрок();
				Пока А>НачКолСтрок Цикл
					Т.УдалитьСтроку(А);
					А=Т.КоличествоСтрок();
				КонецЦикла;
				Возврат;
			КонецЕсли;
			Т.ДобавитьСтроку(ПолучитьПредставлениеОбъекта(Атрибут));
		Иначе
			//выгружаем список периодических реквизитов
			Т.ДобавитьСтроку(0);
			КолИстории=0;
			НомерИстории=Т.КоличествоСтрок(); //<----- запоминаем позицию
			Пер=СоздатьОбъект("Периодический");
			Пер.ИспользоватьОбъект(Реквизит);
			Пер.ВыбратьЗначения(БДПакеты.DATE1,БДПакеты.DATE2);
			Было=0;
			Пока Пер.ПолучитьЗначение()=1 Цикл
				КолИстории=КолИстории+1;
				Атрибут=Пер.Значение;
				Т.ДобавитьСтроку(ПолучитьПредставлениеОбъекта(Атрибут));
				Т.ДобавитьСтроку(Пер.ДатаЗнач);
				Было=1;
			КонецЦикла;
			Если Было=0 Тогда
				Пер.ВыбратьЗначения('01.01.1980',БДПакеты.DATE2);
				Если Пер.ПолучитьЗначение()=1 Тогда
					КолИстории=1;
					Атрибут=Пер.Значение;
					Т.ДобавитьСтроку(ПолучитьПредставлениеОбъекта(Атрибут));
					Т.ДобавитьСтроку(Пер.ДатаЗнач);
				КонецЕсли;
			КонецЕсли;
			Т.ЗаменитьСтроку(НомерИстории,КолИстории);
		КонецЕсли;
	КонецЕсли;
	
	Т.ЗаменитьСтроку(НомерКолВидаОбъекта,"95          "+Число(Т.КоличествоСтрок()+1));//ссылка на следующую строку если мы не хотим загружать этот объект
	
КонецПроцедуры


//_____________________________________________________________________________

Процедура ВыгрузитьСправочник(Вид,БДПакеты,Таб1)
	ПервыйНомерВида =0;
	Если ТипЗначенияСтр(Таб1)<>"ТаблицаЗначений" Тогда
		Возврат;
	КонецЕсли;
	Рез=Таб1.НайтиЗначение(Вид,ПервыйНомерВида ,"Наименование");
	Если Рез=0 Тогда
		Возврат;
	КонецЕсли;
	
	Для НомерВида=ПервыйНомерВида По Таб1.КоличествоСтрок() Цикл
		НачКолСтрок=Т.КоличествоСтрок();
		//нам нужно выгрузить текущий элемент столько раз сколько его видов
		//создано в правилах выгрузки, т.к. таблица отсортирована по наименованию
		//то достаточно пройтись в цикле до первого неравного текущему виду справочнику
		//	Сообщить(""+Таб1.ПолучитьЗначение(НомерВида,"Наименование")+"    "+Вид);
		Если Таб1.ПолучитьЗначение(НомерВида,"Наименование")<>Вид Тогда
			Возврат;//не равен - значит конец цикла
		КонецЕсли;
		
		Табл=Таб1.ПолучитьЗначение(НомерВида,"Указатель");//т.е. это таблица реквизитов
		Кол=Таб_КоличествоСтрок(Табл);
		Если Кол>0 Тогда
			Спр=СоздатьОбъект("Справочник."+Вид);
			Спр.ИспользоватьДату(РабочаяДата());
			Если Спр.НайтиПоРеквизиту("IDD",Сокрлп(БДПакеты.IDD),1)=1 Тогда
				Если ПриВыгрузкеСправочника(Спр)=0 Тогда
					Возврат;
				КонецЕсли;   
				//******************************************************************
				//Алгортим Успеха Начало
				//
				ДобавитьВЖурналРегистрации(Спр,1,БДПакеты.IDDDB);
				//
				//Алгортим Успеха Конец				
				
				//			М_Состояние(Вид+" "+Спр.Наименование);
				Т.ДобавитьСтроку(11); //справочник
				НомерКолВидаОбъекта=Т.КоличествоСтрок(); //<------ запоминаем позицию
				Т.ДобавитьСтроку(НомерВида);//номер вида справочника как он идет в шапке
				Т.ДобавитьСтроку(БДПакеты.IDD);
				Т.ДобавитьСтроку(1); //существует !!
				Для А=1 По Кол Цикл
					
					История="";
					Атрибут="";
					Реквизит=Таб_ПолучитьЗначение(Табл,А,"Наименование");
					Если Лев(Реквизит,1)="#" Тогда //значит это доп реквизит
						Атрибут=0;
						Если Реквизит="#ЭтоГруппа" Тогда
							Атрибут=Спр.ЭтоГруппа();
						ИначеЕсли Реквизит="#ПомеченНаУдаление" Тогда
							Атрибут=Спр.ПометкаУдаления()
						КонецЕсли;
					Иначе
						Если Лев(Реквизит,1)="@" Тогда //значит этот реквизит считается специальным образом
							Если Сред(Реквизит,2,4)="IDD=" Тогда
								//Здесь возможен вариант, что мы на ходу меняем ИД объекта (когда, например, выгружаем один справочник в несколько)
								//Поэтому заменим сам ИД объекта 
								Стр=Сред(Реквизит,6);
								Рез=Шаблон("["+Стр+"]");
								Т.ЗаменитьСтроку(НомерКолВидаОбъекта+2,Рез);
								Атрибут=Рез;
							Иначе
								//Обычное задание выражения
								Стр=Сред(Реквизит,2);
								Шаблон("[Получить("+Стр+")]");Атрибут=глВыражение;
							КонецЕсли;
						Иначе
							История=Таб_ПолучитьЗначение(Табл,А,"История");
							Попытка
								Атрибут=Спр.ПолучитьАтрибут(Реквизит);
							Исключение
								М_Сообщить("Неправильное имя реквизита "+Вид+", Реквизит:"+Реквизит);
								ЗаписатьВЛогОшибку("Неправильное имя реквизита "+Вид+", Реквизит:"+Реквизит,Спр);
								История="";
								Атрибут="";
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
					
					
					Если История=ДаДа Тогда
						//выгружаем список периодических реквизитов
						Т.ДобавитьСтроку(0);
						КолИстории=0;
						НомерИстории=Т.КоличествоСтрок(); //<----- запоминаем позицию
						Использование=Метаданные.Справочник(Вид).Реквизит(Реквизит).Использование;
						//определяем для какого типа справочника нельзя использовать этот реквизит
						//цифра 0 - означает не использовать для элемента
						//цифра 1 - означает не использовать для группы
						//цифра 2 - означает использование для всех типов
						Использование=?(Использование="ДляЭлемента",1,?(Использование="ДляГруппы",0,2));
						
						Если Спр.ЭтоГруппа()<>Использование Тогда
							Пер=СоздатьОбъект("Периодический");
							Пер.ИспользоватьОбъект(Реквизит,Спр.ТекущийЭлемент());
							Пер.ВыбратьЗначения(БДПакеты.DATE1,БДПакеты.DATE2);
							Было=0;
							Пока Пер.ПолучитьЗначение()=1 Цикл
								//движения вызванные документом пропускаем !!  // а может ненадо ???
								Если Пер.ТекущийДокумент().Выбран()=1 Тогда
//									Продолжить;
								КонецЕсли;
								КолИстории=КолИстории+1;
								Атрибут=Пер.Значение;
								Т.ДобавитьСтроку(ПолучитьПредставлениеОбъекта(Атрибут));
								Т.ДобавитьСтроку(Пер.ДатаЗнач);
								Было=1;
							КонецЦикла;
							Если Было=0 Тогда
								Пер.ВыбратьЗначения('01.01.1980',БДПакеты.DATE2);
								Если Пер.ПолучитьЗначение()=1 Тогда
									КолИстории=1;
									Атрибут=Пер.Значение;
									Т.ДобавитьСтроку(ПолучитьПредставлениеОбъекта(Атрибут));
									Т.ДобавитьСтроку(Пер.ДатаЗнач);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						Т.ЗаменитьСтроку(НомерИстории,КолИстории);
						
					Иначе// непериодический тип реквизита или выгрузка как непериодич рекв !!
						
						Если ФильтрВыгрузки(Табл,А,Атрибут)=0 Тогда
							//возвращаемся на начальную позицию
							А=Т.КоличествоСтрок();
							Пока А>НачКолСтрок Цикл
								Т.УдалитьСтроку(А);
								А=Т.КоличествоСтрок();
							КонецЦикла;
							Перейти ~СледующийСправочник;
						КонецЕсли;
						Т.ДобавитьСтроку(ПолучитьПредставлениеОбъекта(Атрибут));
					КонецЕсли;
					
				КонецЦикла;
				Т.ЗаменитьСтроку(НомерКолВидаОбъекта,"11          "+Число(Т.КоличествоСтрок()+1));//ссылка на следующую строку если мы не хотим загружать этот объект
				М_Сообщить("Выгружен "+Спр.Вид()+",  "+Спр.Наименование+"  ,"+Спр.Код);
			Иначе
				//не существует
				Стр="";
				Если Таб_НайтиЗначение(Табл,"#Удален",Стр,"Наименование")=1 Тогда
					//т.е. если разрешено передавать информацию об удаленных объектах
					Т.ДобавитьСтроку("11          "+Число(Т.КоличествоСтрок()+5)); //справочник
					Т.ДобавитьСтроку(НомерВида);//номер вида справочника как он идет в шапке
					Т.ДобавитьСтроку(БДПакеты.IDD);
					Т.ДобавитьСтроку(0);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		~СледующийСправочник:
		Спр=0;
	КонецЦикла;
	
КонецПроцедуры //ВыгрузитьСправочник
//_____________________________________________________________________________

//_____________________________________________________________________________
Процедура ВыгрузитьДокумент(Вид="",БДПакеты,Таб1)
	Перем ЦиклДокумента;
	ПервыйНомерВида =0;
	Если ТипЗначенияСтр(Таб1)<>"ТаблицаЗначений" Тогда
		Возврат;
	КонецЕсли;
	Рез=Таб1.НайтиЗначение(Вид,ПервыйНомерВида ,"Наименование");
	Если Рез=0 Тогда
		Возврат;
	КонецЕсли;
	
	Для НомерВида=ПервыйНомерВида По Таб1.КоличествоСтрок() Цикл
		//нам нужно выгрузить текущий элемент столько раз сколько его видов
		//создано в правилах выгрузки, т.к. таблица отсортирована по наименованию
		//то достаточно пройтись в цикле до первого неравного текущему виду справочнику
		Если Таб1.ПолучитьЗначение(НомерВида,"Наименование")<>Вид Тогда
			Возврат;//не равен - значит конец цикла
		КонецЕсли;
		
		
		Список=Таб1.ПолучитьЗначение(НомерВида,"Указатель");//т.е. это список
		Движения=Таб1.ПолучитьЗначение(НомерВида,"Движения");
		
		Табл=Список.Получить("Шапка");
		Если ТипЗначенияСтр(Табл)<>"СписокЗначений" Тогда
			М_Сообщить("Документы вида "+Вид+" не выгружаются - т.к. не указана шапка для выгрузки!"); 
			ЗаписатьВЛогОшибку("Документы вида "+Вид+" не выгружаются - т.к. не указана шапка для выгрузки!"); 
			Возврат;
		КонецЕсли;
		
		
		
		
		Док=СоздатьОбъект("Документ");
		ИД=БДПакеты.IDD;
		Если НайтиДокументПоIDD(Док,ИД)=1 Тогда
			
			ЧислоЦикловПоДокументу=1;
			Рез=Таб_НайтиЗначение(Табл,"#ВыгрузитьПоКоличествуСтрок","","Наименование");
			Если Рез=1 Тогда
				ЧислоЦикловПоДокументу=Док.КоличествоСтрок();
			КонецЕсли;
			
			Для ЦиклДокумента=1 По ЧислоЦикловПоДокументу Цикл
				НачКолСтрок=Т.КоличествоСтрок();
				Табл=Список.Получить("Шапка");
				
				
				Если ТипЗначенияСтр(Табл)="СписокЗначений" Тогда
					Если ПриВыгрузкеДокумента(Док)=0 Тогда
						Возврат;
					КонецЕсли;
					
					
					Если Вид<>Док.Вид() Тогда
						Сообщить("Ошибка уникальности кодов в документе "+Док.ТекущийДокумент()+" с IDD = "+ИД,"!");
						Сообщить("Несовпадение вида записанного в журнале регистраций с видом первого найденного по IDD документа.","!");
						ЗаписатьВЛогОшибку("Ошибка уникальности кодов в документе "+Док.ТекущийДокумент()+" с IDD = "+ИД,Док.ТекущийДокумент());
						ЗаписатьВЛогОшибку("Несовпадение вида записанного в журнале регистраций с видом первого найденного по IDD документа.",Док.ТекущийДокумент());
						Возврат;
					КонецЕсли;     
					
					//******************************************************************
					//Алгортим Успеха Начало
					//
					ДобавитьВЖурналРегистрации(Док,1,БДПакеты.IDDDB);
					//
					//Алгортим Успеха Конец
					//******************************************************************					
					
					Т.ДобавитьСтроку(12); //документ
					НомерКолВидаОбъекта=Т.КоличествоСтрок(); //<------ запоминаем позицию
					Т.ДобавитьСтроку(НомерВида);//номер вида справочника как он идет в шапке
					Т.ДобавитьСтроку(БДПакеты.IDD);
					Т.ДобавитьСтроку(1); //существует !!
					Кол=Таб_КоличествоСтрок(Табл);
					//шапка
					Для А=1 По Кол Цикл
						Реквизит=Таб_ПолучитьЗначение(Табл,А,"Наименование");
						Атрибут="";
						Если Лев(Реквизит,1)="#" Тогда //значит это доп реквизит
							Если Реквизит="#ПомеченНаУдаление" Тогда
								Атрибут=Док.ПометкаУдаления();
							ИначеЕсли Реквизит="#ДатаДок" Тогда
								Атрибут=Док.ДатаДок;
							ИначеЕсли Реквизит="#ВремяДокумента" Тогда
								Атрибут=Док.ПолучитьВремя();
							ИначеЕсли Реквизит="#Проведен" Тогда
								Атрибут=Док.Проведен();
							КонецЕсли;
							
						Иначе
							
							Если Лев(Реквизит,1)="@" Тогда //значит этот реквизит считается специальным образом
								Если Сред(Реквизит,2,4)="IDD=" Тогда
									//Здесь возможен вариант, что мы на ходу меняем ИД объекта (когда, например, выгружаем один справочник в несколько)
									//Поэтому заменим сам ИД объекта 
									Стр=Сред(Реквизит,6);
									Рез=Шаблон("["+Стр+"]");
									Т.ЗаменитьСтроку(НомерКолВидаОбъекта+2,Рез);
									Атрибут=Рез;
								Иначе
									//Обычное задание выражения
									Стр=Сред(Реквизит,2);
									Шаблон("[Получить("+Стр+")]");Атрибут=глВыражение;
								КонецЕсли;
							Иначе
								
								Попытка
									Атрибут=Док.ПолучитьАтрибут(Реквизит);
								Исключение
									М_Сообщить("Неправильное имя реквизита шапки "+Док.Вид()+" Реквизит:"+Реквизит+" документа "+Вид+" IDD = "+ИД);
									ЗаписатьВЛогОшибку("Неправильное имя реквизита шапки "+Док.Вид()+" Реквизит:"+Реквизит+" документа "+Вид+" IDD = "+ИД,Док.ТекущийДокумент());
									Атрибут="";
								КонецПопытки;
								
							КонецЕсли;
						КонецЕсли;
						Если ФильтрВыгрузки(Табл,А,Атрибут)=0 Тогда
							//возвращаемся на начальную позицию
							А=Т.КоличествоСтрок();
							Пока А>НачКолСтрок Цикл
								Т.УдалитьСтроку(А);
								А=Т.КоличествоСтрок();
							КонецЦикла;
							Перейти ~СледующийДокумент;
						КонецЕсли;
						Т.ДобавитьСтроку(ПолучитьПредставлениеОбъекта(Атрибут));
						
						
					КонецЦикла;
					
					//табличная часть
					Табл=Список.Получить("Табличная часть");
					Если ТипЗначенияСтр(Табл)="СписокЗначений" Тогда
						Кол=Таб_КоличествоСтрок(Табл);
						КоличествоСтрок=Док.КоличествоСтрок();
						Рез=Таб_НайтиЗначение(Табл,"#Выгружать","","Наименование");
						ЧислоОбязательныхЦиклов=0;
						Если Рез=1 Тогда
							КоличествоСтрок=1; 
							ЧислоОбязательныхЦиклов=1;
						КонецЕсли;
						
						Т.ДобавитьСтроку(КоличествоСтрок); //число строк в табл части
						Док.ВыбратьСтроки();
						Пока (Док.ПолучитьСтроку()=1)ИЛИ(ЧислоОбязательныхЦиклов>0) Цикл
							Для А=1 По Кол Цикл
								Атрибут="";
								Реквизит=Таб_ПолучитьЗначение(Табл,А,"Наименование");
								Если Лев(Реквизит,1)="#" Тогда
									//М_Сообщить("Недопустимое имя реквизита в табличной части правил выгрузки документа "+Док.Вид()+" с именем "+Реквизит);  
									ЗаписатьВЛогОшибку("Недопустимое имя реквизита в табличной части правил выгрузки документа "+Док.Вид()+" с именем "+Реквизит,Док.ТекущийДокумент());
									Атрибут="";
								ИначеЕсли Лев(Реквизит,1)="@" Тогда //значит этот реквизит считается специальным образом
									//Обычное задание выражения
									Стр=Сред(Реквизит,2);
									Шаблон("[Получить("+Стр+")]");Атрибут=глВыражение;
								Иначе
									Попытка
										Атрибут=Док.ПолучитьАтрибут(Реквизит);
									Исключение
										М_Сообщить("Неправильное имя реквизита табл. части "+Док.Вид()+" Реквизит:"+Реквизит); 
										ЗаписатьВЛогОшибку("Неправильное имя реквизита табл. части "+Док.Вид()+" Реквизит:"+Реквизит.Док.ТекущийДокумент());
										Атрибут="";
									КонецПопытки;
								КонецЕсли;
								
								Если ФильтрВыгрузки(Табл,А,Атрибут)=0 Тогда
									//возвращаемся на начальную позицию
									А=Т.КоличествоСтрок();
									Пока А>НачКолСтрок Цикл
										Т.УдалитьСтроку(А);
										А=Т.КоличествоСтрок();
									КонецЦикла;
									Перейти ~СледующийДокумент;
								КонецЕсли;                                           
								Т.ДобавитьСтроку(ПолучитьПредставлениеОбъекта(Атрибут));
							КонецЦикла;
							Если ЧислоОбязательныхЦиклов>0 Тогда
								Прервать;//прошли только один цикл
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;//проверка табличного типа
					
					Т.ЗаменитьСтроку(НомерКолВидаОбъекта,"12          "+Число(Т.КоличествоСтрок()+1));//ссылка на следующую строку если мы не хотим загружать этот объект
					М_Сообщить("Выгружен "+Док.Вид()+" "+Док.НомерДок+" "+Док.ДатаДок);
					
					
					//Выгружаем движения регистров
					//_____________________________________________________________________________
					Если (Док.Проведен()=1)И(Движения=ДаДА) Тогда
						Если Метаданные.Документ(Док.Вид()).ОперативныйУчет=1 Тогда
							
							Регистры=СписокПравил.Получить("Регистры");
							Если ТипЗначенияСтр(Регистры)="ТаблицаЗначений" Тогда
								Кол=Регистры.КоличествоСтрок();
								Если Кол>0 Тогда
									Т.ДобавитьСтроку("98");//выгружаем регистры
									НомерКолВидаОбъекта=Т.КоличествоСтрок(); //<------ запоминаем позицию
									Для Ц=1 По Кол Цикл
										Название=Регистры.ПолучитьЗначение(Ц,"Наименование");
										Список=Регистры.ПолучитьЗначение(Ц,"Указатель");
										Рег=СоздатьОбъект("Регистр."+Название);
										Т.ДобавитьСтроку(Ц);//номер регистра
										Т.ДобавитьСтроку(0);
										Кол1=Т.КоличествоСтрок();//<------- запоминаем позицию
										КолвоДвиж=0;//количество движений документа Док по регистру Рег
										Рег.ВыбратьДвиженияДокумента(Док.ТекущийДокумент());
										Пока Рег.ПолучитьДвижение()>0 Цикл
											КолвоДвиж=КолвоДвиж+1;
											Для ААА=1 По Список.РазмерСписка() Цикл
												ТаблицаРегистра=Список.ПолучитьЗначение(ААА);
												Для ЦЦ=1 По Таб_КоличествоСтрок(ТаблицаРегистра) Цикл
													Наименование=Таб_ПолучитьЗначение(ТаблицаРегистра,ЦЦ,"Наименование");
													Если Лев(Наименование,1)="#" Тогда 
														Если Наименование="#НомерСтроки" Тогда//НомерСтроки
															Т.ДобавитьСтроку(Рег.НомерСтроки());
														Иначе
															Т.ДобавитьСтроку("");
														КонецЕсли;
													Иначе
														Если Лев(Наименование,1)="@" Тогда //значит этот реквизит считается специальным образом
															Стр=Сред(Наименование,2);
															Рез=Шаблон("[ПолучитьПредставлениеОбъекта("+Стр+")]");
															Т.ДобавитьСтроку(Рез);
														Иначе
															ПР=Рег.ПолучитьАтрибут(Наименование);
															Т.ДобавитьСтроку(ПолучитьПредставлениеОбъекта(ПР));
														КонецЕсли;
													КонецЕсли;
												КонецЦикла;
											КонецЦикла;
											Т.ДобавитьСтроку(?(Рег.Приход=1,1,0));//вид
										КонецЦикла;
										Т.ЗаменитьСтроку(Кол1,КолвоДвиж);// <---- записываем количество движений регистра
									КонецЦикла;
									Т.ЗаменитьСтроку(НомерКолВидаОбъекта,"98          "+Число(Т.КоличествоСтрок()+1));//ссылка на следующую строку если мы не хотим загружать этот объект
								КонецЕсли;//если есть движения
							КонецЕсли;//если тип ТаблицаЗначений
							
						КонецЕсли;//ОперативныйУчет
						
						//движения справочников
						Т.ДобавитьСтроку("97");//выгружаем период. реквизиты справочников, установленные документом
						НомерКолВидаОбъекта=Т.КоличествоСтрок(); //<------ запоминаем позицию
						Т.ДобавитьСтроку(0);
						Кол1=Т.КоличествоСтрок();//<------- запоминаем позицию
						КолвоДвиж=0;//количество движений документа Док по справочникам
						Период=СоздатьОбъект("Периодический");
						Период.ВыбратьПоДокументу(Док.ТекущийДокумент());
						Пока Период.ПолучитьЗначение()=1  Цикл
							Спр=Период.ТекущийОбъект();
							Реквизит=Период.ТекущийРеквизит();
							Вид=Спр.Вид();
							НомерВида=СписокВидовСпр.Получить(Вид);
							НомерРеквизита=СписокНомеровПериодическихРеквизитов.Получить(Сокрлп(Реквизит));
							Если Число(НомерРеквизита)=0 Тогда
								Продолжить; //т.е. эти реквизиты выгружать нельзя
							КонецЕсли;
							
							Т.ДобавитьСтроку(НомерВида);
							Т.ДобавитьСтроку(Спр.IDD);//IDD справочника
							Т.ДобавитьСтроку(НомерРеквизита);//какой реквизит
							Т.ДобавитьСтроку(ПолучитьПредставлениеОбъекта(Период.Значение));
							Т.ДобавитьСтроку("#"+Период.ДатаЗнач);
							КолвоДвиж=КолвоДвиж+1;
						КонецЦикла;
						Т.ЗаменитьСтроку(Кол1,КолвоДвиж);// <---- записываем количество движений по справочникам
						Т.ЗаменитьСтроку(НомерКолВидаОбъекта,"97          "+Число(Т.КоличествоСтрок()+1));//ссылка на следующую строку если мы не хотим загружать этот объект
						
						
						
						
						//Выгружаем движения журнала расчетов
						//_____________________________________________________________________________
						Если Метаданные.Документ(Док.Вид()).Расчет=1 Тогда
							
							Журналы=СписокПравил.Получить("Журналы расчетов");
							Если ТипЗначенияСтр(Журналы)="ТаблицаЗначений" Тогда
								Кол=Журналы.КоличествоСтрок();
								Если Кол>0 Тогда
									Т.ДобавитьСтроку("99");//выгружаем движения журнала расчетов
									НомерКолВидаОбъекта=Т.КоличествоСтрок(); //<------ запоминаем позицию
									Для Ц=1 По Кол Цикл
										Название=Журналы.ПолучитьЗначение(Ц,"Наименование");
										Список=Журналы.ПолучитьЗначение(Ц,"Указатель");
										ЖР=СоздатьОбъект("ЖурналРасчетов."+Название);
										СписокЖР=СоздатьОбъект("СписокЗначений");
										Т.ДобавитьСтроку(Ц);//номер по порядку журнала расчета
										Т.ДобавитьСтроку(0);
										Кол1=Т.КоличествоСтрок();//<------- запоминаем позицию
										КолвоДвиж=0;//количество движений журнала Док
										ЖР.ВыбратьЗаписиПоДокументу(Док.ТекущийДокумент());
										Пока ЖР.ПолучитьЗапись()>0 Цикл
											КолвоДвиж=КолвоДвиж+1;
											СписокЖР.ДобавитьЗначение(КолвоДвиж,ЗначениеВСтрокуВнутр(ЖР.ТекущаяЗапись()));
											Для ААА=1 По Список.РазмерСписка() Цикл //атрибуты
												Наименование="";
												Список.ПолучитьЗначение(ААА,Наименование);
												
												Если Лев(Наименование,1)="#" Тогда
													Атрибут="";
													Если Наименование="#ПериодРегистрации" Тогда
														Атрибут=ЖР.ПериодРегистрации.ДатаНачала;
													ИначеЕсли Наименование="#ПервичнаяЗапись" Тогда
														Атрибут=СписокЖР.Получить(ЗначениеВСтрокуВнутр(ЖР.ПервичнаяЗапись));
													КонецЕсли;
													Т.ДобавитьСтроку(ПолучитьПредставлениеОбъекта(Атрибут));
												ИначеЕсли Лев(Наименование,1)="@" Тогда //значит этот реквизит считается специальным образом
													Стр=Сред(Наименование,2);
													Рез=Шаблон("[ПолучитьПредставлениеОбъекта("+Стр+")]");
													Т.ДобавитьСтроку(Рез);
												Иначе
													Атрибут=ЖР.ПолучитьАтрибут(Наименование);
													Т.ДобавитьСтроку(ПолучитьПредставлениеОбъекта(Атрибут));
												КонецЕсли;
											КонецЦикла;
										КонецЦикла;
										Т.ЗаменитьСтроку(Кол1,КолвоДвиж);// <---- записываем количество движений регистра
									КонецЦикла;
									Т.ЗаменитьСтроку(НомерКолВидаОбъекта,"99          "+Число(Т.КоличествоСтрок()+1));//ссылка на следующую строку если мы не хотим загружать этот объект
								КонецЕсли;//если есть движения
							КонецЕсли;//если тип ТаблицаЗначений
						КонецЕсли;//если разрешена выгрузка журнала расчетов
					КонецЕсли;//если выгружаем движения
					
					
					//выгружаем операции
					Если Метаданные.Документ(Док.Вид()).Выбран()=1 Тогда
						Если (Метаданные.Документ(Док.Вид()).БухгалтерскийУчет=1)И(Движения=ДаДА) Тогда
							Операции=СписокПравил.Получить("Операции");
							Если ТипЗначенияСтр(Операции)="ТаблицаЗначений" Тогда
								Опер=Док.Операция;
								Если Опер.Выбрана()=1 Тогда
									Т.ДобавитьСтроку("96");//выгружаем операции
									НомерКолВидаОбъекта=Т.КоличествоСтрок(); //<------ запоминаем позицию
									//выгружаем Атрибуты операции
									Номер="";
									Если Операции.НайтиЗначение("Атрибуты операции",Номер,"Наименование")=1 Тогда
										Таб=Операции.ПолучитьЗначение(Номер,"Указатель");
										
										Для А_Таб=1 По Таб_КоличествоСтрок(Таб) Цикл
											Наименование=Таб_ПолучитьЗначение(Таб,А_Таб,"Наименование");
											Если Лев(Наименование,1)="#" Тогда 
												Если Сокрлп(Наименование)="#ПроводкиВключены" Тогда
													ПР=Опер.ВключитьПроводки();
												Иначе
													ПР="";
												КонецЕсли;
												Т.ДобавитьСтроку(ПолучитьПредставлениеОбъекта(ПР));
											ИначеЕсли Лев(Наименование,1)="@" Тогда //значит этот реквизит считается специальным образом
												Стр=Сред(Наименование,2);
												Рез=Шаблон("[ПолучитьПредставлениеОбъекта("+Стр+")]");
												Т.ДобавитьСтроку(Рез);
											Иначе
												ПР=Опер.ПолучитьАтрибут(Наименование);
												Т.ДобавитьСтроку(ПолучитьПредставлениеОбъекта(ПР));
											КонецЕсли;
										КонецЦикла;
									КонецЕсли;
									
									//выгружаем Атрибуты проводки
									Номер="";
									Если Операции.НайтиЗначение("Атрибуты проводки",Номер,"Наименование")=1 Тогда
										Т.ДобавитьСтроку(Опер.КоличествоПроводок());
										Таб=Операции.ПолучитьЗначение(Номер,"Указатель");
										КолПров=0;
										Опер.ВыбратьПроводки();
										Пока Опер.ПолучитьПроводку()=1 Цикл
											
											Для А_Таб=1 По Таб_КоличествоСтрок(Таб) Цикл
												Наименование=Таб_ПолучитьЗначение(Таб,А_Таб,"Наименование");
												Рез=Найти(Наименование,".");
												Если Рез<>0 Тогда //типа Дебет.Счет , Дебет.Субконто1 ..
													Если Прав(Наименование,4)="Счет" Тогда
														Если Лев(Наименование,1)="Д" Тогда
															ПР=Опер.Дебет.Счет;
														Иначе
															ПР=Опер.Кредит.Счет;
														КонецЕсли;
													Иначе
														НомерСубк=Число(Прав(Наименование,1));
														Если НомерСубк<>0 Тогда
															Если Лев(Наименование,1)="Д" Тогда
																ПР=Опер.Дебет.Субконто(НомерСубк);
															Иначе
																ПР=Опер.Кредит.Субконто(НомерСубк);
															КонецЕсли;
														Иначе
															ПР="";
														КонецЕсли;
													КонецЕсли;
												Иначе
													Если Лев(Наименование,1)<>"#" Тогда
														ПР=Опер.ПолучитьАтрибут(Наименование);
													КонецЕсли;
												КонецЕсли;
												Т.ДобавитьСтроку(ПолучитьПредставлениеОбъекта(ПР));
											КонецЦикла;
										КонецЦикла;
									КонецЕсли;
									Т.ЗаменитьСтроку(НомерКолВидаОбъекта,"96          "+Число(Т.КоличествоСтрок()+1));//ссылка на следующую строку если мы не хотим загружать этот объект
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;//бух учет и если выгружаем движения
						
					КонецЕсли;//документ опред-го вида ...
					
				КонецЕсли;//проверка списка значений
				Если Число(МаксДатаВыгрДокумента)<Число(Док.ДатаДок) Тогда
					МаксДатаВыгрДокумента=Док.ДатаДок;
				КонецЕсли;
				~СледующийДокумент:
			КонецЦикла;//число циклов по документу
		Иначе
			//не существует
			Стр="";
			Если Таб_НайтиЗначение(Табл,"#Удален",Стр,"Наименование")=1 Тогда
				//т.е. если разрешено передавать информацию об удаленных объектах
				Т.ДобавитьСтроку("12          "+Число(Т.КоличествоСтрок()+5)); //документ
				Т.ДобавитьСтроку(НомерВида);//номер вида справочника как он идет в шапке
				Т.ДобавитьСтроку(БДПакеты.IDD);
				Т.ДобавитьСтроку(0);
			КонецЕсли;
		КонецЕсли;
		
		//		~СледующийДокумент:
		Док=0; 
	КонецЦикла;
КонецПроцедуры //ВыгрузитьДокумент

//_____________________________________________________________________________

//Выгружаем данные с номерами "ЧтоВыгрузить", помечая их номерами "КакПометить"
Функция ВыгрузитьТело(БДПакеты,ВыгрБаза,КакПометить,ЧтоВыгрузить,НомерПакета=1)
	
	ТаблицаСправочников=СписокПравил.Получить("Справочники");
	ТаблицаДокументов=СписокПравил.Получить("Документы");
	ТаблицаКонстант=СписокПравил.Получить("Константы");
	ТаблицаСчетов=СписокПравил.Получить("Планы счетов");
	
	//подготавливаем список видов справочников, которые должны выгружаться
	//как перечисления
	СписСправочникПеречисление=СоздатьОбъект("СписокЗначений");
	Если ТипЗначенияСтр(ТаблицаСправочников)="ТаблицаЗначений" Тогда
		ТаблицаСправочников.ВыбратьСтроки();
		Пока ТаблицаСправочников.ПолучитьСтроку()=1 Цикл
			Если ТаблицаСправочников.Движения=ДаДА Тогда
				СписСправочникПеречисление.ДобавитьЗначение(ТаблицаСправочников.Наименование);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	
	М_Сообщить("Выгружаем данные ...");
	Ключ=Прав("0000000"+Сокрлп(ВыгрБаза.IDD),7)+Сокрлп(ЧтоВыгрузить);
	Стр="";
	БазаПакет=Прав("0000000"+Сокрлп(ВыгрБаза.IDD),7)+Сокрлп(КакПометить);
	
	//*********** расчет длины пакета для прогрессора
	БДПакеты.ТекущийИндекс("IDDDB");
	Рез=БДПакеты.Найти(Ключ,0);
	Ном=БДПакеты.НомерЗаписи();
	Если (Ном=0)ИЛИ(Рез=0) Тогда
		М_Сообщить("Нет данных в пакете "+НомерПакета);
		ЗаписатьВЛогОшибку("Нет данных в пакете "+НомерПакета);
		Возврат 0;
	КонецЕсли;
	БДПакеты.ТекущийИндекс("POS");
	БДПакеты.Первая();
	КонНомер=1;
	М_Состояние("Расчет длины пакета "+НомерПакета);
	Пока БДПакеты.ВКонце()=0 Цикл
		Если Сокрп(БДПакеты.IDDDB)=Ключ Тогда
			КонНомер=КонНомер+1;
		КонецЕсли;
		БДПакеты.Следующая();
	КонецЦикла;
	//************************************************
	Прогрессор(0,КонНомер,0,"Выгрузка пакета № "+НомерПакета);
	М_Состояние(ВыгрБаза.Наименование+" - заполнение пакета данными.");
	
	БДПакеты.ТекущийИндекс("POS");
	БДПакеты.Первая();
	ДляПрогрессора=0;
	
	Пока БДПакеты.ВКонце()=0 Цикл
		Если Сокрлп(БДПакеты.IDDDB)=Ключ Тогда
			ДляПрогрессора=ДляПрогрессора+1;
			Прогрессор(ДляПрогрессора);//********* прогрессор
			Тип=Строка(БДПакеты.TIP);
			Вид=Сокрлп(БДПакеты.VIDD);
			Если Тип="11" Тогда
				ВыгрузитьСправочник(Вид,БДПакеты,ТаблицаСправочников);
			ИначеЕсли Тип="12" Тогда
				ВыгрузитьДокумент(Вид,БДПакеты,ТаблицаДокументов);
			ИначеЕсли Тип="95" Тогда
				ВыгрузитьКонстанту(Вид,БДПакеты,ТаблицаКонстант);
			ИначеЕсли Тип="94" Тогда
				ВыгрузитьСчет(Вид,ТаблицаСчетов,БДПакеты);
			Иначе
				М_Сообщить("Игнорируется выгрузка "+Тип+" "+Вид+"  IDD = "+БДПакеты.VIDD);//для отладки
				ЗаписатьВЛогОшибку("Игнорируется выгрузка "+Тип+" "+Вид+"  IDD = "+БДПакеты.VIDD);
			КонецЕсли;
			Если Сокрп(БДПакеты.IDDDB)<>Сокрп(БазаПакет) Тогда
				БДПакеты.IDDDB=БазаПакет;
				БДПакеты.Записать();
			КонецЕсли;
		КонецЕсли;
		БДПакеты.Следующая();
	КонецЦикла;
	
	М_Состояние("Выгрузка тела данных закончена ...");
	Прогрессор(0);
	Возврат 1;
КонецФункции //ВыгрузитьТело(ВыгрБаза)
//_____________________________________________________________________________



















//*****************************************************************************
//*****************************************************************************
//*****************************************************************************
//*****************************************************************************
//*****************************************************************************
//**************  ЗАГРУЗКА ** ЗАГРУЗКА ** ЗАГРУЗКА ** ЗАГРУЗКА ****************
//**************  ЗАГРУЗКА ** ЗАГРУЗКА ** ЗАГРУЗКА ** ЗАГРУЗКА ****************
//**************  ЗАГРУЗКА ** ЗАГРУЗКА ** ЗАГРУЗКА ** ЗАГРУЗКА ****************
//*****************************************************************************
//*****************************************************************************
//*****************************************************************************
//*****************************************************************************




//_____________________________________________________________________________
Функция ПолучитьТаблРеквизитов()
	Таб2=ПолучитьОбъект_ТаблицаЗначений();//реквизиты
	Таб_ВставитьКолонку(Таб2,"Наименование");
	
	Таб_ВставитьКолонку(Таб2,"ВклУсловие");
	Таб_ВставитьКолонку(Таб2,"ВклЗначение");
	Таб_ВставитьКолонку(Таб2,"Значение");
	Таб_ВставитьКолонку(Таб2,"Условие");
	Таб_ВставитьКолонку(Таб2,"Движения");
	Таб_ВставитьКолонку(Таб2,"Синхронизация");
	Таб_ВставитьКолонку(Таб2,"ВклОбновление");
	
	Возврат Таб2;
КонецФункции

//_____________________________________________________________________________
Функция ЗаполнитьСтроку(Табл,Спр)
	Если Спр.ЭтоГруппа()=0 Тогда
		Если Табл.РазмерСписка()<8 Тогда
			Таб_ВставитьКолонку(Табл,"ВклУсловие");
			Таб_ВставитьКолонку(Табл,"ВклЗначение");
			Таб_ВставитьКолонку(Табл,"Значение");
			Таб_ВставитьКолонку(Табл,"Условие");
			Таб_ВставитьКолонку(Табл,"Движения");
			Таб_ВставитьКолонку(Табл,"Синхронизация");
			Таб_ВставитьКолонку(Табл,"История");
			Таб_ВставитьКолонку(Табл,"ВклОбновление");
		КонецЕсли;
	КонецЕсли;
	
	НомСтр=Таб_НоваяСтрока(Табл);
	Имя=Сокрп(Спр.Наименование);
	Синоним=Сокрп(Спр.Синоним);
	Синоним=?(Синоним="",Имя,Синоним);
	Таб_УстановитьЗначение(Табл,НомСтр,"Наименование",Имя);
	Таб_УстановитьЗначение(Табл,НомСтр,"Синоним",Синоним);
	
	Если Спр.ЭтоГруппа()=0 Тогда
		
		Таб_УстановитьЗначение(Табл,НомСтр,"ВклУсловие",Спр.ВклУсловие);
		Таб_УстановитьЗначение(Табл,НомСтр,"ВклЗначение",Спр.ВклЗначение);
		
		Таб_УстановитьЗначение(Табл,НомСтр,"Условие",Спр.Условие);
		Таб_УстановитьЗначение(Табл,НомСтр,"Значение",Спр.Значение);
		
		Таб_УстановитьЗначение(Табл,НомСтр,"История",Спр.История);
		Таб_УстановитьЗначение(Табл,НомСтр,"Синхронизация",Спр.Синхронизация);
		
		Таб_УстановитьЗначение(Табл,НомСтр,"ВклОбновление",Спр.ВклОбновление);
		
		
		Если (Спр.ВклУсловие=ДаДа)ИЛИ(Спр.ВклЗначение=ДаДа) Тогда
			глМОДБылФильтрЗагрузки=1;
		КонецЕсли;
		
		
	Иначе
		
		Таб_УстановитьЗначение(Табл,НомСтр,"Движения",Спр.Движения);
		
		Табл1=ПолучитьОбъект_ТаблицаЗначений();
		Таб_ВставитьКолонку(Табл1,"Указатель");
		Таб_ВставитьКолонку(Табл1,"Наименование");
		Таб_ВставитьКолонку(Табл1,"Синоним");
		
		Таб_ВставитьКолонку(Табл1,"Движения");
		
		Таб_УстановитьЗначение(Табл,НомСтр,"Указатель",Табл1);
	КонецЕсли;
	
	Возврат Табл1;
КонецФункции //ЗаполнитьСтроку(Табл,Спр)

//_____________________________________________________________________________

Процедура ЗаполнитьТаблицуПравилДляШаблона(ЗагрБаза)
	//это имитация загрузки из справочника правил
	//т.к. пользователи могут загружать шаблоны в пустые базы !!
	ТаблицаПравил=ПолучитьОбъект_ТаблицаЗначений();
	Таб_ВставитьКолонку(ТаблицаПравил,"Указатель");
	Таб_ВставитьКолонку(ТаблицаПравил,"Наименование");
	Таб_ВставитьКолонку(ТаблицаПравил,"Синоним");
	Таб_ВставитьКолонку(ТаблицаПравил,"Движения");
	Табл=ТаблицаПравил;
	
	СисокНуль=ТаблицаПравил;
	
	//документы
	НомСтр=Таб_НоваяСтрока(Табл);
	Имя="Документы";
	Синоним=Имя;
	Таб_УстановитьЗначение(Табл,НомСтр,"Наименование",Имя);
	Таб_УстановитьЗначение(Табл,НомСтр,"Синоним",Синоним);
	Табл1=ПолучитьОбъект_ТаблицаЗначений();
	Таб_ВставитьКолонку(Табл1,"Указатель");
	Таб_ВставитьКолонку(Табл1,"Наименование");
	Таб_ВставитьКолонку(Табл1,"Синоним");
	Таб_ВставитьКолонку(Табл1,"Движения");
	Таб_УстановитьЗначение(Табл,НомСтр,"Указатель",Табл1);
	
	Для А=1 По Метаданные.Документ() Цикл
		НомСтр=Таб_НоваяСтрока(Табл1);
		Имя=Метаданные.Документ(А).Идентификатор;
		Синоним=Имя;
		Таб_УстановитьЗначение(Табл1,НомСтр,"Наименование",Имя);
		Таб_УстановитьЗначение(Табл1,НомСтр,"Синоним",Синоним);
		Таб_УстановитьЗначение(Табл1,НомСтр,"Указатель",СисокНуль);
	КонецЦикла;
	
	//справочники
	НомСтр=Таб_НоваяСтрока(Табл);
	Имя="Справочники";
	Синоним=Имя;
	Таб_УстановитьЗначение(Табл,НомСтр,"Наименование",Имя);
	Таб_УстановитьЗначение(Табл,НомСтр,"Синоним",Синоним);
	Табл1=ПолучитьОбъект_ТаблицаЗначений();
	Таб_ВставитьКолонку(Табл1,"Указатель");
	Таб_ВставитьКолонку(Табл1,"Наименование");
	Таб_ВставитьКолонку(Табл1,"Синоним");
	Таб_ВставитьКолонку(Табл1,"Движения");
	Таб_УстановитьЗначение(Табл,НомСтр,"Указатель",Табл1);
	
	Для А=1 По Метаданные.Справочник() Цикл
		НомСтр=Таб_НоваяСтрока(Табл1);
		Имя=Метаданные.Справочник(А).Идентификатор;
		Синоним=Имя;
		Таб_УстановитьЗначение(Табл1,НомСтр,"Наименование",Имя);
		Таб_УстановитьЗначение(Табл1,НомСтр,"Синоним",Синоним);
		ИмяСправочника=Имя;
		//		Если (Имя="ПравилаЗагрузки") или (Имя="ПравилаВыгрузки") или (Имя="ПериферийныеБазы") Тогда
		Если 1=1 Тогда
			Табл2=ПолучитьТаблРеквизитов();
			Таб_ВставитьКолонку(Табл2,"Синоним");
			Таб_ВставитьКолонку(Табл2,"История");
			Таб_УстановитьЗначение(Табл1,НомСтр,"Указатель",Табл2);
			НомСтр=Таб_НоваяСтрока(Табл2);
			Имя="#ПомеченНаУдаление";
			Синоним=Имя;
			Таб_УстановитьЗначение(Табл2,НомСтр,"Наименование",Имя);
			Таб_УстановитьЗначение(Табл2,НомСтр,"Синоним",Синоним);
			
			НомСтр=Таб_НоваяСтрока(Табл2);
			Имя="#ЭтоГруппа";
			Синоним=Имя;
			Таб_УстановитьЗначение(Табл2,НомСтр,"Наименование",Имя);
			Таб_УстановитьЗначение(Табл2,НомСтр,"Синоним",Синоним);
			
			НомСтр=Таб_НоваяСтрока(Табл2);
			Имя="#Удален";
			Синоним=Имя;
			Таб_УстановитьЗначение(Табл2,НомСтр,"Наименование",Имя);
			Таб_УстановитьЗначение(Табл2,НомСтр,"Синоним",Синоним);
			
			НомСтр=Таб_НоваяСтрока(Табл2);
			Имя="Код";
			Синоним=Имя;
			Таб_УстановитьЗначение(Табл2,НомСтр,"Наименование",Имя);
			Таб_УстановитьЗначение(Табл2,НомСтр,"Синоним",Синоним);
			
			НомСтр=Таб_НоваяСтрока(Табл2);
			Имя="Наименование";
			Синоним=Имя;
			Таб_УстановитьЗначение(Табл2,НомСтр,"Наименование",Имя);
			Таб_УстановитьЗначение(Табл2,НомСтр,"Синоним",Синоним);
			Если (ИмяСправочника<>"ПравилаЗагрузки") и (ИмяСправочника<>"ПравилаВыгрузки") И (ИмяСправочника<>"ПериферийныеБазы")
				И (ИмяСправочника<>"ИзмененияМОД") и (ИмяСправочника<>"УдаленияМОД") и (ИмяСправочника<>"Пакеты") и (ИмяСправочника<>"ЖурналРегистрации") Тогда
				Таб_УстановитьЗначение(Табл2,НомСтр,"Синхронизация",ДаДа);
			КонецЕсли;
			
			
			НомСтр=Таб_НоваяСтрока(Табл2);
			Имя="Родитель";
			Синоним=Имя;
			Таб_УстановитьЗначение(Табл2,НомСтр,"Наименование",Имя);
			Таб_УстановитьЗначение(Табл2,НомСтр,"Синоним",Синоним);
			
			НомСтр=Таб_НоваяСтрока(Табл2);
			Имя="Владелец";
			Синоним=Имя;
			Таб_УстановитьЗначение(Табл2,НомСтр,"Наименование",Имя);
			Таб_УстановитьЗначение(Табл2,НомСтр,"Синоним",Синоним);
			
			Для А1=1 По Метаданные.Справочник(А).Реквизит() Цикл
				Имя=Метаданные.Справочник(А).Реквизит(А1).Идентификатор;
				Если Имя<>"IDD" Тогда
					НомСтр=Таб_НоваяСтрока(Табл2);
					Синоним=Имя;
					Таб_УстановитьЗначение(Табл2,НомСтр,"Наименование",Имя);
					Таб_УстановитьЗначение(Табл2,НомСтр,"Синоним",Синоним);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			Таб_УстановитьЗначение(Табл1,НомСтр,"Указатель",СисокНуль);
		КонецЕсли;
	КонецЦикла;
	//ПросмотрТаблицы(ТаблицаПравил);
	
КонецПроцедуры //ЗаполнитьТаблицуПравилДляШапки

//_____________________________________________________________________________

Процедура ЗаполнитьТаблицуПравилИзСпр(ЗагрБаза)
	М_Состояние("Заполняем динамическую структуру правил ...");
	Прогрессор(0,17,0,"Структура");
	ТаблицаПравил=ПолучитьОбъект_ТаблицаЗначений();
	Таб_ВставитьКолонку(ТаблицаПравил,"Указатель");
	Таб_ВставитьКолонку(ТаблицаПравил,"Наименование");
	Таб_ВставитьКолонку(ТаблицаПравил,"Синоним");
	Таб_ВставитьКолонку(ТаблицаПравил,"Движения");
	
	
	глМОДБылФильтрЗагрузки=0;
	
	Табл=ТаблицаПравил;
	Спр1=СоздатьОбъект("Справочник.ПравилаЗагрузки");
	Спр1.ИспользоватьВладельца(ПолучитьВладельцаПравил(ЗагрБаза));
	Спр1.ПорядокКодов();
	Спр1.ВыбратьЭлементы();
	КолПргр=0;
	Пока Спр1.ПолучитьЭлемент(0)=1 Цикл //выбираем верхний уровень т.е. Документы,Справочники ...
		КолПргр=КолПргр+2;
		Прогрессор(КолПргр);
		Если Спр1.ПризнакЗагрузки=ДаДа Тогда
			Родитель=Спр1.ТекущийЭлемент();
			Табл1=ЗаполнитьСтроку(Табл,Родитель);
			Если Родитель.ЭтоГруппа()=0 Тогда
				Продолжить;
			КонецЕсли;
			Спр2=СоздатьОбъект("Справочник.ПравилаЗагрузки");
			Спр2.ИспользоватьРодителя(Родитель);
			Спр2.ИспользоватьВладельца(ПолучитьВладельцаПравил(ЗагрБаза));
			Спр2.ПорядокКодов();
			Спр2.ВыбратьЭлементы();
			Пока Спр2.ПолучитьЭлемент(0)=1 Цикл
				Если Спр2.ПризнакЗагрузки=ДаДа Тогда
					Родитель=Спр2.ТекущийЭлемент();
					Табл2=ЗаполнитьСтроку(Табл1,Родитель);
					Если Родитель.ЭтоГруппа()=0 Тогда
						Продолжить;
					КонецЕсли;
					Спр3=СоздатьОбъект("Справочник.ПравилаЗагрузки");
					Спр3.ИспользоватьРодителя(Родитель);
					Спр3.ИспользоватьВладельца(ПолучитьВладельцаПравил(ЗагрБаза));
					Спр3.ПорядокКодов();
					Спр3.ВыбратьЭлементы();
					Пока Спр3.ПолучитьЭлемент(0)=1 Цикл
						Если Спр3.ПризнакЗагрузки=ДаДа Тогда //для групп типа шапка,табл часть ... не проверяем
							//							Сообщить(Спр3.Наименование);
							Родитель=Спр3.ТекущийЭлемент();
							Если Родитель.ЭтоГруппа()=0 Тогда
								Табл3=ЗаполнитьСтроку(Табл2,Родитель);
								Продолжить;
							КонецЕсли;
							Родитель=Спр3.ТекущийЭлемент();
							Табл3=ЗаполнитьСтроку(Табл2,Родитель);
							Спр4=СоздатьОбъект("Справочник.ПравилаЗагрузки");
							Спр4.ИспользоватьРодителя(Родитель);
							Спр4.ИспользоватьВладельца(ПолучитьВладельцаПравил(ЗагрБаза));
							Спр4.ПорядокКодов();
							Спр4.ВыбратьЭлементы();
							Пока Спр4.ПолучитьЭлемент(0)=1 Цикл
								Если Спр4.ПризнакЗагрузки=ДаДа Тогда
									Родитель=Спр4.ТекущийЭлемент();
									ЗаполнитьСтроку(Табл3,Родитель);//последний уровень
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//_____________________________________________________________________________

Функция ЗаполнитьБлокРеквизитов(Табл,Кол,Реж=0)
	//если Реж=1 то это описание рекв справочника ,0  - документа, рег-ра и прочее
	// т.е. просто названия реквизита
	Колич=Число(Т.ПолучитьСтроку(Кол));//количество реквизитов
	//Сообщить("Колич="+Колич+"     "+Кол);
	для А=1 По Колич Цикл
		Кол=Кол+1;
		Прогрессор(Кол);//****** прогрессор
		Наименование=Сокрлп(Т.ПолучитьСтроку(Кол));
		НомСтр=Таб_НоваяСтрока(Табл);
		Таб_УстановитьЗначение(Табл,НомСтр,"Наименование",Наименование);
		Если Реж=1 Тогда
			Прогрессор(Кол);//****** прогрессор
			Кол=Кол+1;
			Пер=Число(Т.ПолучитьСтроку(Кол));
			Таб_УстановитьЗначение(Табл,НомСтр,"Периодичность",Пер);
		КонецЕсли;
	КонецЦикла;
	Кол=Кол+1;
	Прогрессор(Кол);//****** прогрессор
	Возврат "";
КонецФункции//ЗаполнитьБлокРеквизитов

//_____________________________________________________________________________

Функция ЗаполнитьТаблицуЗагрузкиИзФайла(Кол,ЗагрБаза,КолСлед)
	М_Состояние("Чтение шапки пакета.");
	ТаблицаЗагрузки=ПолучитьОбъект_ТаблицаЗначений();
	Таб_ВставитьКолонку(ТаблицаЗагрузки,"Указатель");
	Таб_ВставитьКолонку(ТаблицаЗагрузки,"Наименование");
	
	
	Т2=Т;    //запоминаем текущее состояние
	ИмяФ=Т.ПолучитьСтроку(15);
	Если Сокрлп(ИмяФ)<>"" Тогда
		ИмяТекстовогоФайла=СокрЛП(ПутьКБазеПриЗагрузке)+"\"+Сокрлп(ИмяФ);
		Если ФС.СуществуетФайл(ИмяТекстовогоФайла)=0 Тогда
			Сообщить("Внимание нет файла шапки:"+ИмяФ+" - необходимо выгрузить из базы "+ЗагрБаза.Наименование+" шапку пакетов !");
			ЗаписатьВЛогОшибку("Ошибка при загрузки пакета. Внимание нет файла шапки:"+ИмяФ+" - необходимо выгрузить из базы "+ЗагрБаза.Наименование+" шапку пакетов !");
			Возврат 0;
		КонецЕсли;
		Т=СоздатьОбъект("Текст");
		Т.Открыть(ИмяТекстовогоФайла);
		КолСлед=Кол;
	КонецЕсли;
	
	Прогрессор(0,Число(Прав(Т.ПолучитьСтроку(Кол),10)),33,"Загрузка шапки");
	КоличЦЦ=Число(Т.ПолучитьСтроку(Кол));
	Кол=Кол+1;
	Для ЦЦ=1 по КоличЦЦ Цикл
		ИмяТипаОбъекта=Сокрлп(Т.ПолучитьСтроку(Кол));
		Кол=Кол+1;
		Если ИмяТипаОбъекта="Перечисления" Тогда
			Кол=Число(Прав(Т.ПолучитьСтроку(Кол),10));
			Продолжить;
		ИначеЕсли ИмяТипаОбъекта="Календари" Тогда
			Кол=Число(Прав(Т.ПолучитьСтроку(Кол),10));
			Продолжить;
		ИначеЕсли ИмяТипаОбъекта="Виды расчетов" Тогда
			Кол=Число(Прав(Т.ПолучитьСтроку(Кол),10));
			Продолжить;
		КонецЕсли;
		
		Если ИмяТипаОбъекта="Константы" Тогда
			ТабВидов=ПолучитьТаблРеквизитов();
			Таб_ВставитьКолонку(ТабВидов,"Периодичность");
			Таб_ВставитьКолонку(ТабВидов,"История");
		Иначе
			ТабВидов=ПолучитьОбъект_ТаблицаЗначений();
			Таб_ВставитьКолонку(ТабВидов,"Указатель");
			Таб_ВставитьКолонку(ТабВидов,"Наименование");
			Таб_ВставитьКолонку(ТабВидов,"Движения");
			Таб_ВставитьКолонку(ТабВидов,"Статус");
		КонецЕсли;
		
		НомСтр=Таб_НоваяСтрока(ТаблицаЗагрузки);
		Таб_УстановитьЗначение(ТаблицаЗагрузки,НомСтр,"Наименование",ИмяТипаОбъекта);
		Таб_УстановитьЗначение(ТаблицаЗагрузки,НомСтр,"Указатель",ТабВидов);
		
		КоличВидов=Число(Т.ПолучитьСтроку(Кол));
		Кол=Кол+1;
		Для АА=1 По КоличВидов Цикл
			Имя=Сокрлп(Т.ПолучитьСтроку(Кол));
			Кол=Кол+1;
			Если (ИмяТипаОбъекта="Справочники")ИЛИ(ИмяТипаОбъекта="Операции") Тогда
				Таб2=ПолучитьТаблРеквизитов();
				
				Если ИмяТипаОбъекта="Справочники" Тогда
					Таб_ВставитьКолонку(Таб2,"Периодичность");
					Таб_ВставитьКолонку(Таб2,"История");
				КонецЕсли;
				
				НомСтр=Таб_НоваяСтрока(ТабВидов);
				Таб_УстановитьЗначение(ТабВидов,НомСтр,"Наименование",Имя);
				Таб_УстановитьЗначение(ТабВидов,НомСтр,"Указатель",Таб2);
				
				ЗаполнитьБлокРеквизитов(Таб2,Кол,?(ИмяТипаОбъекта="Справочники",1,0));
			ИначеЕсли ИмяТипаОбъекта="Константы"Тогда
				Наименование=Сокрлп(Т.ПолучитьСтроку(Кол-1));
				//			Сообщить(Наименование);
				Пер=Число(Т.ПолучитьСтроку(Кол));
				НомСтр=Таб_НоваяСтрока(ТабВидов);
				Таб_УстановитьЗначение(ТабВидов,НомСтр,"Наименование",Имя);
				Кол=Кол+1;
				Таб_УстановитьЗначение(ТабВидов,НомСтр,"Периодичность",Пер);
				
			Иначе
				Таб1=ПолучитьОбъект_ТаблицаЗначений();//папка шапки, табл части документа
				Таб_ВставитьКолонку(Таб1,"Указатель");
				Таб_ВставитьКолонку(Таб1,"Наименование");
				
				НомСтр=Таб_НоваяСтрока(ТабВидов);
				Таб_УстановитьЗначение(ТабВидов,НомСтр,"Наименование",Имя);
				Таб_УстановитьЗначение(ТабВидов,НомСтр,"Указатель",Таб1);
				
				
				КолПодВидов=Число(Т.ПолучитьСтроку(Кол));
				Кол=Кол+1;
				Для А3=1 По КолПодВидов Цикл
					Имя=Сокрлп(Т.ПолучитьСтроку(Кол));
					Кол=Кол+1;
					НомСтр=Таб_НоваяСтрока(Таб1);
					Таб_УстановитьЗначение(Таб1,НомСтр,"Наименование",Имя);
					Указатель=ПолучитьТаблРеквизитов();
					Таб_УстановитьЗначение(Таб1,НомСтр,"Указатель",Указатель);
					
					ЗаполнитьБлокРеквизитов(Указатель,Кол,0);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Т=Т2;//Возвращаем ранее сохраненное значение
КонецФункции

//_____________________________________________________________________________

Процедура СопоставитьТаблицуРеквизитов(Табл_Правил,Табл_Загрузки,Вид="",Тип="",Знач Индекс,Имя)
	ТекСтр=Индекс;
	Стр="";
	Если Таб_НайтиЗначение(Табл_Правил,Имя,Стр,"Синоним")=1 Тогда
		Для А=1 По Табл_Загрузки.РазмерСписка() Цикл
			ИмяКолонки="";
			Табл_Загрузки.ПолучитьЗначение(А,ИмяКолонки);
			Если (ИмяКолонки="Периодичность") Тогда
				//не копируем этот столбец
			ИначеЕсли (ИмяКолонки="Наименование")И((Тип="Справочники")ИЛИ(Тип="Документы")) Тогда
				//тоже не копируем этот столбец
				//иначе копируем т.е. в таблице загрузке проставляются правильные(как они названы в нашей конф.)
				//реквизиты, но при этом нет возможности сопоставлять один реквизит нескольким (у регистров и операций)
				//для документов и справочников сопоставлять по нескольким реквизитам можно.
			ИначеЕсли ИмяКолонки="История" Тогда
				История=Таб_ПолучитьЗначение(Табл_Правил,Стр,"История");
				Ключ=Вид+"."+Таб_ПолучитьЗначение(Табл_Правил,Стр,"Наименование");
				П=?(СписокПериодическихРеквизитов.Получить(Ключ)=1,1,0);//проверка на периодичность реквизита
				История=?(П=1,История,"-");
				Таб_УстановитьЗначение(Табл_Загрузки,Индекс,"История",История);
			Иначе
				Зн=Таб_ПолучитьЗначение(Табл_Правил,Стр,ИмяКолонки);
				Таб_УстановитьЗначение(Табл_Загрузки,ТекСтр,ИмяКолонки,Зн);//Табл_Загрузки.УстановитьЗначение(ТекСтр,ИмяКолонки,Зн);
			КонецЕсли;
		КонецЦикла;
		
		Если Тип="Справочники" Тогда
			Статус=1; //если = 1 , то удаляем из загрузки этот реквизит
			ИмяРеквизита=Имя;
			Если Метаданные.Справочник(Вид).Выбран()=1 Тогда
				Статус=0;
				Если ИмяРеквизита="Родитель" Тогда
					Статус=?(Число(Метаданные.Справочник(Вид).КоличествоУровней)>1,0,1);
				ИначеЕсли ИмяРеквизита="#ЭтоГруппа" Тогда
					Статус=?(Число(Метаданные.Справочник(Вид).КоличествоУровней)>1,0,1);
				ИначеЕсли ИмяРеквизита="Владелец" Тогда
					Владелец=Метаданные.Справочник(Вид).Владелец;
					Если Владелец.Выбран()=1 Тогда
						Статус=0;
					Иначе
						Статус=1;
					КонецЕсли;
				КонецЕсли;
			Иначе
			КонецЕсли;
			Если Статус=1 Тогда
				Таб_УстановитьЗначение(Табл_Загрузки,Индекс,"Наименование","-");
			КонецЕсли;
		ИначеЕсли Тип="Документы" Тогда
			Статус=0; //если = 1 , то удаляем из загрузки этот реквизит
			Если Имя="#Проведен" Тогда
				Статус=?(Число(Метаданные.Документ(Вид).РазрешитьПроведение)=1,0,1);
				Если Статус=1 Тогда
					Таб_УстановитьЗначение(Табл_Загрузки,Индекс,"Наименование","-");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе           
		Таб_УстановитьЗначение(Табл_Загрузки,Индекс,"Наименование","-");//			Табл_Загрузки.Наименование="-"; //только изменяем наименование т.к. строки удалять нельзя - на них ссылается загрузка !!
	КонецЕсли;
КонецПроцедуры //СопоставитьТаблицуРеквизитов

//_____________________________________________________________________________

Процедура СопоставлениеТаблиц(ТаблицаПравил,ТаблицаЗагрузки)
	М_Состояние("Производим сопоставление данных для загрузки ...");
	Для АА1=1 По Таб_КоличествоСтрок(ТаблицаЗагрузки) Цикл
		Имя=Сокрлп(Таб_ПолучитьЗначение(ТаблицаЗагрузки,АА1,"Наименование"));
		ИмяТипа=Имя;
		Стр="";
		Если Таб_НайтиЗначение(ТаблицаПравил,Имя,Стр,"Наименование")=1 Тогда //есть такой тип объекта Н-р Документы ...
			ТабП1=Таб_ПолучитьЗначение(ТаблицаПравил,Стр,"Указатель");
			ТабЗ1=Таб_ПолучитьЗначение(ТаблицаЗагрузки,АА1,"Указатель");
			
			Прогрессор(0,Таб_КоличествоСтрок(ТабЗ1),0,"Обработка: "+Имя);//****** прогрессор
			Для АА2=1 По Таб_КоличествоСтрок(ТабЗ1) Цикл //таблица  видов объектов
				Прогрессор(АА2);//************* прогрессор !!!
				Имя=Сокрлп(Таб_ПолучитьЗначение(ТабЗ1,АА2,"Наименование"));
				Стр="";
				Если Таб_НайтиЗначение(ТабП1,Имя,Стр,"Синоним")=1 Тогда //нашли такой вид объекта Н-р РасходнаяНакладная ...
					Зн=Таб_ПолучитьЗначение(ТабП1,Стр,"Наименование");//Зн=ТабП1.ПолучитьЗначение(Стр,"Наименование");
					ВидОбъекта=Зн;
					
					Если (ИмяТипа<>"Документы")И(ИмяТипа<>"Справочники") Тогда //разные виды документов и справочников можно загружать в один вид !!
						Таб_УстановитьЗначение(ТабЗ1,АА2,"Наименование",Зн);//ТабЗ1.Наименование=Зн;
					КонецЕсли;
					
					Если ИмяТипа="Константы" Тогда
						СопоставитьТаблицуРеквизитов(ТабП1,ТабЗ1,"Константа","",АА2,Имя);
						Продолжить;
					КонецЕсли;
					
					
					ТабП2=Таб_ПолучитьЗначение(ТабП1,Стр,"Указатель");//ТабП2=ТабП1.ПолучитьЗначение(Стр,"Указатель");
					ТабЗ2=Таб_ПолучитьЗначение(ТабЗ1,АА2,"Указатель");//ТабЗ2=ТабЗ1.Указатель;
					
					Движения=Таб_ПолучитьЗначение(ТабП1,Стр,"Движения");//ТабЗ1.Движения=ТабП1.ПолучитьЗначение(Стр,"Движения"); //это надо только для документов ....
					Таб_УстановитьЗначение(ТабЗ1,АА2,"Движения",Движения);
					
					
					//здесь записываем статус
					Если ИмяТипа="Документы" Тогда
						Если Метаданные.Документ(ВидОбъекта).Выбран()=1 Тогда
							Статус=Число(Метаданные.Документ(ВидОбъекта).КонтрольУникальности);
							Статус2=?(Число(Метаданные.Документ(ВидОбъекта).АвтоНумерация)=0,2,0);//если возвращет 2 , то надо самостоятельно устанавливать новый номер дока !!
							ВозврСтатус=?(Статус=1,2,Статус2);
							Таб_УстановитьЗначение(ТабЗ1,АА2,"Статус",ВозврСтатус);
						КонецЕсли;
					КонецЕсли;
					
					Если ИмяТипа="Справочники" Тогда
						Если Метаданные.Справочник(ВидОбъекта).Выбран()=1 Тогда
							ВозврСтатус=Число(Метаданные.Справочник(ВидОбъекта).КонтрольУникальности)*
							(2+Число(Метаданные.Справочник(ВидОбъекта).АвтоНумерация));
							Таб_УстановитьЗначение(ТабЗ1,АА2,"Статус",ВозврСтатус);
						КонецЕсли;
					КонецЕсли;
					
					
					
					Для АА3=1 По Таб_КоличествоСтрок(ТабЗ2) Цикл //реквизиты или еще раз папки
						Имя=Таб_ПолучитьЗначение(ТабЗ2,АА3,"Наименование");//Имя=ТабЗ2.Наименование;
						Стр="";
						Если Таб_НайтиЗначение(ТабП2,Имя,Стр,"Синоним")=1 Тогда
							Стр2="";
							ТабЗ2.ПолучитьЗначение(1,Стр2);
							Если Стр2="Указатель" Тогда //это папка
								//для папок изменяем наименование загружаемой группы на синоним в нашей базе
								Зн=Таб_ПолучитьЗначение(ТабП2,Стр,"Наименование");//Зн=ТабП2.ПолучитьЗначение(Стр,"Наименование");
								Таб_УстановитьЗначение(ТабЗ2,АА3,"Наименование",Зн);//ТабЗ2.Наименование=Зн;
								
								ТабП3=Таб_ПолучитьЗначение(ТабП2,Стр,"Указатель");//ТабП3=ТабП2.ПолучитьЗначение(Стр,"Указатель");
								ТабЗ3=Таб_ПолучитьЗначение(ТабЗ2,АА3,"Указатель");//ТабЗ3=ТабЗ2.Указатель;
								
								Для АА4=1 По Таб_КоличествоСтрок(ТабЗ3) Цикл //папки Н-р Шапка,ресурсы,измерения ...
									Имя=Таб_ПолучитьЗначение(ТабЗ3,АА4,"Наименование");//Имя=ТабЗ3.Наименование;
									//реквизиты документов, регистров
									СопоставитьТаблицуРеквизитов(ТабП3,ТабЗ3,ВидОбъекта,ИмяТипа,АА4,Имя);
								КонецЦикла;
								
							Иначе //реквизиты справочников
								СопоставитьТаблицуРеквизитов(ТабП2,ТабЗ2,ВидОбъекта,ИмяТипа,АА3,Имя);
							КонецЕсли;
						Иначе
							Таб_УстановитьЗначение(ТабЗ2,АА3,"Наименование","-");
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					Таб_УстановитьЗначение(ТабЗ1,АА2,"Наименование","-");
				КонецЕсли;
			КонецЦикла;
		Иначе
			Таб_УстановитьЗначение(ТаблицаЗагрузки,АА1,"Наименование","-");
		КонецЕсли;
	КонецЦикла;
	Прогрессор(0);
КонецПроцедуры //СопоставлениеТаблиц(ТаблицаПравил,ТаблицаЗагрузки)

//_____________________________________________________________________________


Функция ЗагрузитьШапку(ЗагрБаза,Кол,ИмяТекстовогоФайла,ЗагружатьВсе=0)//создать шапку пакета, отражающую структуру
	//выгружаемой информации; шапка строится по справочнику "ПравилаЗагрузки"
	//_____________________________________________________________________________
	//формируем заголовок
	
	Т=СоздатьОбъект("Текст");
	
	Файл=ИмяТекстовогоФайла;
	Если ФС.СуществуетФайл(Файл)=1 Тогда
		Попытка
			Т.Открыть(Файл);//здесь возможна ошибка - перехватываем
		Исключение
			ЗаписатьВЛогОшибку("Ошибка доступа к файлу пакета "+ИмяТекстовогоФайла);
			Возврат 0; //т.е. скорее всего нет доступа !!!!!                                   
			
		КонецПопытки;
	Иначе
		Сообщить("Пакет  "+ИмяТекстовогоФайла+" отсутствует в каталоге загрузки!!!");  
		ЗаписатьВЛогОшибку("Пакет  "+ИмяТекстовогоФайла+" отсутствует в каталоге загрузки!!!");
		Возврат 0;
	КонецЕсли;
	
	
	Кол=1;//здесь - IDD источника и приемника
	ЗагрВерсияПротоколаМОД=Т.ПолучитьСтроку(1);
	Если Сокрлп(ЗагрВерсияПротоколаМОД)<>Сокрлп(ВерсияПротоколаМОД) Тогда
		Предупреждение("Внимание протокол загружаемого пакета не поддерживается.
		|Обновите версию Менеджера ! Справки : lider@pb.ru ",10);
		Возврат 0;
	КонецЕсли;
	Если ЗагружатьВсе=0 Тогда
		ИДКому=Число(Т.ПолучитьСтроку(3));
		ИДОтКого=Т.ПолучитьСтроку(2);
		Если (ЗагрБаза.IDD<>ИДДляОтладки)И(РежимНастройки=0) Тогда //зарезервированный код базы - для отладки !
			Если ИДКому<>0 Тогда //т.е. если ноль то это для всех !!
				Если ИДКому<>Число(Константа.IDD) Тогда
					Сообщить("Этот пакет не предназначен для вашей базы - загрузка прервана ","!!!");
					М_Сообщить("(Пакет предназначен для базы с IDD = "+Число(ИДКому)+", IDD вашей базы = "+Число(Константа.IDD)+")");
					ЗаписатьВЛогОшибку("(Пакет предназначен для базы с IDD = "+Число(ИДКому)+", IDD вашей базы = "+Число(Константа.IDD)+")");
					Возврат 0;
				КонецЕсли;
				
				
				Если Число(ИДОтКого)<>Число(Сокрп(ЗагрБаза.IDD)) Тогда
					Сообщить("Этот пакет не от той базы которую вы выбрали - загрузка прервана ","!!!");
					М_Сообщить("(Пакет из базы с IDD = "+Число(ИДОтКого)+", вы выбрали базу с IDD = "+Число(ЗагрБаза.IDD)+")"); 
					ЗаписатьВЛогОшибку("(Пакет из базы с IDD = "+Число(ИДОтКого)+", вы выбрали базу с IDD = "+Число(ЗагрБаза.IDD)+")");
					Возврат 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ДатаЗагрДокументов=Дата(Сокрлп(Т.ПолучитьСтроку(9)));
		//проверяем, установлена ли компонента бухгалтерии
		Попытка
			Дата2=КонецРассчитанногоПериодаБИ();
		Исключение
			Дата2='01.01.2090'; //здесь ставим большую дату, чтобы не мешала !!
		КонецПопытки;
		
		Если Сокрлп(Дата2)="" Тогда//компонента бух учет установлена, но в конфигурации не используется
			Дата2='01.01.2090';
		КонецЕсли;
		
		
		Если ДатаЗагрДокументов>Дата2 Тогда
			Сообщить("Дата загр.документов = "+ДатаЗагрДокументов+",  ДатаБИ="+Дата2);
			Сообщить("Возможно не открыт период.","I"); 
			ЗаписатьВЛогОшибку("Дата загр.документов = "+ДатаЗагрДокументов+",  ДатаБИ="+Дата2+" Возможно не открыт период");
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗагрузки=Т.ПолучитьСтроку(6);
	Если Сокрлп(ТекстЗагрузки)<>"" Тогда
		Сообщить("****************************************************************************************************");
		Сообщить("Поступило сообщение из базы "+ЗагрБаза.Наименование+" :","I");
		Сообщить(ТекстЗагрузки);
		Сообщить("****************************************************************************************************");
	КонецЕсли;
	НомерПодтвержденногоПакета=Число(Т.ПолучитьСтроку(5));
	Если Сокрлп(Т.ПолучитьСтроку(4))="Подтверждение" Тогда
		М_Сообщить("Только подтверждение ..."+НомерПодтвержденногоПакета);
		Возврат  "Подтверждение";
	КонецЕсли;
	
	
	
	//_____________________________________________________________________________
	//Читаем шапку
	//Смотрим надо ли заново формировать список правил загрузки...
	Если ЗагружатьВсе=0 Тогда
		Если глВыгрБазаМОДЗагр=ЗагрБаза Тогда
			Если Сокрлп(Т.ПолучитьСтроку(14))<>НоваяШапкаПакетов Тогда //т.е. и в периферийной базе правила выгрузки не менялись !!
				ТаблицаПравил=_ТаблицаПравилМОД;
				ТаблицаЗагрузки=_ТаблицаЗагрузкиМОД;
				Стр=Т.ПолучитьСтроку(33);
				Кол=Число(Прав(Стр,10));// позиция след-го объекта т.е. если встретится неизвестный объект, то мы его просто пропустим
				ИмяФ=Т.ПолучитьСтроку(15); //если задается какое-то имя файла в этом месте - то значит это началась не шапка , а тело данных
				Если Сокрлп(ИмяФ)<>"" Тогда
					Кол=33;
				КонецЕсли;
				Если Сокрлп(Т.ПолучитьСтроку(14))=ИдентичнаяКонфигурация Тогда
					Кол=33;
				КонецЕсли;
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	
	СформироватьСписокПериодическихРеквизитов();//для каждой базы формируем заново
	
	Если ПустоеЗначение(ЗагрБаза)=0 Тогда
		Спр=СоздатьОбъект("Справочник.ПравилаЗагрузки");
		Спр.ИспользоватьВладельца(ПолучитьВладельцаПравил(ЗагрБаза));
		Рез=Спр.ВыбратьЭлементы();
		Спр=0;
	Иначе
		Рез=1;
	КонецЕсли;
	Если Рез=1 Тогда
		//_____________________________________________________________________________
		
		Если (ПустоеЗначение(ЗагрБаза)=0)И(Сокрлп(Т.ПолучитьСтроку(14))=ИдентичнаяКонфигурация) Тогда
			Сообщить("В базе источнике "+ЗагрБаза+" установлен режим идентичной конфигурации.","!!!");
			Сообщить("Для успешной загрузки нужно установить аналогичный режим в нашей базе (т.е. удалить правила загрузки)","!!!"); 
			ЗаписатьВЛогОшибку("В базе источнике "+ЗагрБаза+" установлен режим идентичной конфигурации. Для успешной загрузки нужно удалить правила загрузки");
			Возврат 0;
		КонецЕсли;
		
		
		Если ЗагружатьВсе=0 Тогда
			ЗаполнитьТаблицуПравилИзСпр(ЗагрБаза);
		Иначе
			ЗаполнитьТаблицуПравилДляШаблона(ЗагрБаза);
		КонецЕсли;
		//Динамическая структура сформирована - теперь пройдемся по тексту
		
		//здесь надо сопоставить по синонимам и переместить по порядку загрузки
		Кол=33;
		Стр=Т.ПолучитьСтроку(Кол);
		КолСлед=Число(Прав(Стр,10));// позиция след-го объекта т.е. если встретится неизвестный объект, то мы его просто пропустим
		
		Рез=ЗаполнитьТаблицуЗагрузкиИзФайла(Кол,ЗагрБаза,КолСлед);
		Если Рез=0 Тогда
			Возврат 0;
		КонецЕсли;
		Кол=КолСлед;
		
		СопоставлениеТаблиц(ТаблицаПравил,ТаблицаЗагрузки);
		//_____________________________________________________________________________
	Иначе
		
		Если Сокрлп(Т.ПолучитьСтроку(14))<>ИдентичнаяКонфигурация Тогда
			Сообщить("В базе источнике "+ЗагрБаза+" не установлен режим идентичной конфигурации.","!!!");
			Сообщить("Для успешной загрузки нужно установить аналогичный режим в нашей базе (т.е. заполнить правила загрузки)","!!!");
			ЗаписатьВЛогОшибку("В базе источнике "+ЗагрБаза+" не установлен режим идентичной конфигурации.Для успешной загрузки нужно заполнить правила загрузки");
			Возврат 0;
		КонецЕсли;
		
		ЗаполнитьСтруктуруПравил(ПолучитьВладельцаПравил(ЗагрБаза),"Загрузка");
		Кол=33;
	КонецЕсли;
	
	
	Если ЗагружатьВсе=0 Тогда
		глВыгрБазаМОДЗагр=ЗагрБаза;
		_ТаблицаПравилМОД=ТаблицаПравил;
		_ТаблицаЗагрузкиМОД=ТаблицаЗагрузки;
	КонецЕсли;
	
	
	Возврат 1;
КонецФункции




//_____________________________________________________________________________

//создать новый код для загружаемого элемента справочника и проверка корректности кода 
//если Справ задан , то сверяем найденный со значением Спр (т.е. на равенство с самим собой)
Функция СоздатьНовыйКод(ВидСправочника,Спр,Подчиненность)
	ПЕрем ДлинаКода;
	СтКод=Спр.Код;
	Об1=СоздатьОбъект("Справочник."+ВидСправочника);
	
	СерииКодов=?(Метаданные.Справочник(ВидСправочника).СерииКодов="ВПределахПодчинения",1,0);
	
	ТипКода=Метаданные.Справочник(ВидСправочника).ТипКода;
	Если ТипКода="Числовой" Тогда
		//подгонка под нужный тип кода т.к. в разных базах они могут быть разными т.е. числом и строкой
		СтКод=Число(СтКод);
	Иначе
		СтКод=Сокрлп(СтКод);
		СтКод=?(СтКод="","0",СтКод);
	КонецЕсли;
	
	
	Если Подчиненность=1 Тогда
		Об1.ИспользоватьВладельца(Спр.Владелец);
	КонецЕсли;
	
	Если СерииКодов=1 Тогда
		Об1.ИспользоватьРодителя(Спр.Родитель);
	КонецЕсли;
	
	Если Об1.НайтиПоКоду(СтКод,СерииКодов)=0 Тогда
		Возврат СтКод;
	Иначе
		Если Об1.ТекущийЭлемент()=Спр.ТекущийЭлемент() Тогда //мы нашли самого себя т.е. это перезаписывание кода !!!
			Возврат СтКод;
		КонецЕсли;
	КонецЕсли;
	
	
	Если ТипКода="Текстовый" Тогда
		ДлинаКода=Число(Метаданные.Справочник(ВидСправочника).ДлинаКода);
		Код=Сокрлп(Лев(СтКод,ДлинаКода-2));
		Ном=0;
		Пока Об1.НайтиПоКоду(Прав(Код+Ном,ДлинаКода),СерииКодов)=1 Цикл
			Если Об1.ТекущийЭлемент()=Спр.ТекущийЭлемент() Тогда //мы нашли самого себя т.е. это перезаписывание кода !!!
				Возврат ""+Код+Ном;
			КонецЕсли;
			Ном=Ном+1;
		КонецЦикла;
		Возврат СтрЗаменить(""+Код+Ном," ","_");
	Иначе//Числовой
		Код=СтКод;
		Вход=0;
		Пока Об1.НайтиПоКоду(Код,СерииКодов)=1 Цикл
			Если Об1.ТекущийЭлемент()=Спр.ТекущийЭлемент() Тогда //мы нашли самого себя т.е. это перезаписывание кода !!!
				Возврат Код;
			КонецЕсли;
			Код=Число(Код)+1;
			Если Вход=0 Тогда
				Вход=1;
				Об2=СоздатьОбъект("Справочник."+ВидСправочника);
				глСоздатьНовыйОбъект(Об2);
				Код=Об2.Код;
				Об2=0;
			КонецЕсли;
		КонецЦикла;
		Возврат Код;
	КонецЕсли;
КонецФункции

//_____________________________________________________________________________

//создать новый номер для загружаемого документа
Функция СоздатьНовыйНомер(ВидДокумента,ДатаДок,СамДокумент=0,Знач СтарыйНомер="");//,СтНомер,ТипНомера,ДлинаНомера)
	Об1=СоздатьОбъект("Документ."+ВидДокумента);	// Это чтоб номер подгонять
	Об2=СоздатьОбъект("Документ");					// А это чтоб искать среди всех с заданным нумератором (см. ниже)          //***** вставка от Алексея Городецкого  :)
	
	//*************** подгонка под нужный тип номера документа - т.к. в разных базах они могут быть разными т.е. числом и строкой
	глСоздатьНовыйОбъект(Об1);
	Об1.НомерДок=СтарыйНомер;
	Номер=Об1.НомерДок;
	//***************
	Номер=?(Сокрлп(Номер)="",1,Номер);
	Если Сокрлп(ДатаДок)="" Тогда
		ДатаДок=РабочаяДата();
	КонецЕсли;
	
	Нумератор=Метаданные.Документ(ВидДокумента).Нумератор; // Получим нумератор
	Если Нумератор.Выбран()=1 Тогда
		ИдентНумератора=Нумератор.Идентификатор;
	Иначе
		ИдентНумератора=ВидДокумента;
	КонецЕсли;
	
	Пока Об2.НайтиПоНомеру(Номер,ДатаДок,ИдентНумератора)=1 Цикл
		Если Об2.ТекущийДокумент()=СамДокумент Тогда
			Возврат Номер;
		КонецЕсли;
		Номер=Число(Номер)+1;
	КонецЦикла;
	Возврат Номер;
КонецФункции

//_____________________________________________________________________________
Функция НадоЗагружатьОбъект(Спр_ИД,СписокИзмененныхОбъектов,ПриоритетЗагрузки)
	//Если объект изменен в нашей и в периферийной базе одновременно, то
	//для обеспечения синхронности баз нужно решить чьи изменения
	//имеют больший приоритет.
	//В этой функции приоритет определяется по номеру базы - у кого номер меньше - у того
	//больший приоритет !
	//Одинаковые номера баз невозможны т.к. это проверяется при выгрузке пакета.
	
	Если ПриоритетЗагрузки=0 Тогда
		//загружаем вседа т.к. наша база имеет более низкий приоритет
		Возврат 1;
	Иначе
		//смотрим может мы этот объект изменяли сами
		Рез=СписокИзмененныхОбъектов.НайтиЗначение(Спр_ИД);
		Если Рез=0 Тогда
			Возврат 1;//нет не изменяли
		Иначе
			Возврат 0;//изменяли !!!
		КонецЕсли;
	КонецЕсли;
КонецФункции //НадоЗагружатьОбъект



//_____________________________________________________________________________


Функция ПровестиДокумент(Док,ЗагрузкаДвижений)
	Если Сокрлп(Док.Вид())=ДокументОперации Тогда
		М_Сообщить("Проводится документ: "+Док.ДатаДок+" "+Док.ТекущийДокумент());
		ПроведениеДокумента(Док);
		Док=0;
		Возврат "--нормально проведен--";
	Иначе
		Попытка
			Если Метаданные.Документ(Док.Вид()).ОперативныйУчет=1 Тогда
				Если НачМесяца(Док.ДатаДок)>НачМесяца(ПолучитьДатуТА()) Тогда
					Сообщить("Устанавливаем новую ТА на дату "+Док.ДатаДок);
					Попытка
						УстановитьТАна(Док.ТекущийДокумент());
					Исключение
						Если МонопольныйРежим()=0 Тогда
							Сообщить("Зайдите в программу в МОНОПОЛЬНОМ РЕЖИМЕ и повторите загрузку","I"); 
							ЗаписатьВЛогОшибку("Повторите загрузку в монопольном режиме!"); 
						КонецЕсли;
						УстановитьТАна(Док.ТекущийДокумент());
						Возврат "Невозможно установить ТА на "+Док.ДатаДок;
					КонецПопытки;
					Если Число(Док.ДатаДок)>Число(ПолучитьДатуТА()) Тогда//неудачная попытка установления нового периода
						Сообщить("Закройте все открытые формы документов и повторите загрузку !","I");
						ЗаписатьВЛогОшибку("Закройте все открытые формы документов и повторите загрузку !");
						Док.Ошибка();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Исключение
			ЗагрузкаДвижений=0;
		КонецПопытки;
	КонецЕсли;
	
	Если ЗагрузкаДвижений=0 Тогда                                              
		// документы бех дублирований
		Если СписокПроводимыхДокументов.НайтиЗначение(Док.ТекущийДокумент())=0 Тогда
			СписокПроводимыхДокументов.ДобавитьЗначение(Док.ТекущийДокумент());
		КонецЕсли;
		//		Док=0;
		Возврат "Движения документа не загружаются";
	КонецЕсли;
	
	М_Сообщить("Проводится документ: "+Док.ДатаДок+" "+Док.ТекущийДокумент());
	Попытка
		НеРегистрироватьИзмененияМОД=1;
		ПроведениеПоАлгоритмуМОД=ЗагрузкаДвижений;
		ОбработкаОбменДанными="Обработка.ОбменДанными#";
		ПЕремИмяОбработки=ОбработкаОбменДанными;
		Док.Провести();
		ОбработкаОбменДанными=ПЕремИмяОбработки;
		НеРегистрироватьИзмененияМОД=0;
		ПроведениеПоАлгоритмуМОД=0; 
		ОшибкаПроведения = "--нормально проведен--";
	Исключение
		ОбработкаОбменДанными=ПЕремИмяОбработки;
		НеРегистрироватьИзмененияМОД=0;
		ПроведениеПоАлгоритмуМОД=0;
		Сообщить("Ошибка проведения документа !","!!!"); 
		ЗаписатьВЛогОшибку("Ошибка проведения документа",Док.ТекущийДокумент());
		ОшибкаПроведения = ОписаниеОшибки();
		Док.Ошибка();
	КонецПопытки;
	//надо добавить описание ошибки в журнал регистарации
	Док=0;
	Возврат ОшибкаПроведения;
КонецФункции //ПровестиДокумент(Док)

//_____________________________________________________________________________

//_____________________________________________________________________________
Процедура МиграцияИзменений(ВыгрБаза,ИД,Тип,Вид,Дата1,Дата2)
	Перем БДПакеты;
	Если МиграцияИзменений=1 Тогда
		//изменения пришедшие в нашу базу надо опять зарегистрировать для того, чтобы они
		//мигрировали далее (необходимо понимать, что если административно не ограничить миграцию, то
		//данные будут передаваться бесконечно)
		//в данной процедуре элементы мигрируют во все базы, за исключением той откуда пришли
		//БДМОД=0;БДУдаленийМОД=0;БДПакетыМОД=0;
		Если ОткрытьФайлМОД(БДПакеты,"Пакеты","_tran2")=0 Тогда 
			Сообщить("Ошибка открытия базы ""Пакеты"" - миграция в другие базы не производится","!");
			ЗаписатьВЛогОшибку("Ошибка открытия базы ""Пакеты"" - миграция в другие базы не производится");
			Возврат;
		КонецЕсли;
		Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
		Спр.ВыбратьЭлементы();
		Пока Спр.ПолучитьЭлемент()=1 Цикл
			Если Спр.Выгрузка=1 Тогда
				Если Спр.ТекущийЭлемент()<>ВыгрБаза Тогда
					М_Сообщить("Регистрируется объект "+Вид+"  "+ИД+" для выгрузки в базу "+Спр.Наименование);
					БДПакеты.Добавить();
					БДПакеты.IDD=Ид;
					БДПакеты.TIP=Тип;
					БДПакеты.VIDD=Вид;
					БДПакеты.DATE1=Дата1;
					БДПакеты.DATE2=Дата2;
					БДПакеты.POS=1;
					БДПакеты.IDDDB=""+Спр.IDD+"_";
					БДПакеты.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры //



//_____________________________________________________________________________

Функция ЗагрузитьДокумент(ЗагрБаза,Таб,ТабПравил,Кол,СписокИзмененныхОбъектов,ПриоритетЗагрузки,ЦиклЗагрузки)
	Перем Док;
	глобФлагВторогоЦикла=0;//Это означает что данный загружаемый документ пока второй раз загружать не надо !!
	Если (Таб=0)ИЛИ(ТабПравил=0) Тогда
		Возврат 0;
	КонецЕсли;
	Кол=Кол+1;
	НомерВида=Число(Т.ПолучитьСтроку(Кол));
	Кол=Кол+1;
	Спр_ИД=Сокрлп(Т.ПолучитьСтроку(Кол));
	Если НадоЗагружатьОбъект(Спр_ИД,СписокИзмененныхОбъектов,ПриоритетЗагрузки)=0 Тогда//может быть этот объект изменяли и мы - тогда надо проверить на приоритет загрузки
		Возврат 0;
	КонецЕсли;
	Спр_ИД=Лев(Сокрлп(Спр_ИД)+"                    ",МОДДлинаIDДокумента);//=17
	
	Кол=Кол+1;
	ФизСущ=Число(Т.ПолучитьСтроку(Кол));
	
	ТабТаблиц=Таб_ПолучитьЗначение(Таб,НомерВида,"Указатель");//таблица таблиц
	Вид=Таб_ПолучитьЗначение(Таб,НомерВида,"Наименование");
	
	
	Движения=Таб_ПолучитьЗначение(Таб,НомерВида,"Движения");
	СтатусНомераДок=Число(Таб_ПолучитьЗначение(Таб,НомерВида,"Статус"));
	Номер="";
	Таб_НайтиЗначение(ТабТаблиц,"Шапка",Номер,"Наименование");
	Если Число(Номер)=0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Таб1=Таб_ПолучитьЗначение(ТабТаблиц,Номер,"Указатель");//таблица реквизитов загрузки
	
	
	//Вид - вид пришедшего документа
	НомерВида2="";
	Рез=Таб_НайтиЗначение(ТабПравил,Вид,НомерВида2,"Синоним");
	ПричинаНепроведения="";
	
	Если Рез=0 Тогда
		Возврат 0;
	Иначе
		//а теперь Вид - вид документа в нашей конфигурации
		
		Вид=Таб_ПолучитьЗначение(ТабПравил,НомерВида2,"Наименование");
		
		
		ТабТаблиц2=Таб_ПолучитьЗначение(ТабПравил,НомерВида2,"Указатель");//вид
		
		Номер="";
		Рез=Таб_НайтиЗначение(ТабТаблиц2,"Шапка",Номер,"Наименование");
		Если Рез=0 Тогда
			Возврат 0;
		КонецЕсли;
		Таб2=Таб_ПолучитьЗначение(ТабТаблиц2,Номер,"Указатель");//таблица настоящих реквизитов
		
		Спис2=Таб2.Получить("Наименование");//список настоящих имен реквизитов, которые есть в нашей конф...
		СписС=Таб2.Получить("Синоним");//список синонимов настоящих реквизитов, которые есть в нашей конф...
		
		
		
		Док_ИДД="000";
		Док_Вид="";
		//М_Сообщить(Вид);
		Результат=0;
		Удалить=0;
		//как будем идентифицировать
		Номер="";
		ИмяИДРеквизита="IDD";
		ИД=Спр_ИД;
		ДатаДок=РабочаяДата();//для задания интервала при поиске по номеру
		Если Таб_НайтиЗначение(Таб1,ДаДА,Номер,"Синхронизация")=1 Тогда
			ИмяИДРеквизита=Сокрлп(Таб_ПолучитьЗначение(Таб1,Номер,"Наименование"));
			Если (ИмяИДРеквизита<>"-")И(ФизСущ=1) Тогда
				Кол1=Кол;//сейчас мы находимся на позиц физ сущность
				//ищем значение ИД
				Для А=1 По Номер Цикл
					Кол1=Кол1+1;
					Зн=Т.ПолучитьСтроку(Кол1);
					Если Сокрлп(Таб_ПолучитьЗначение(Таб1,А,"Наименование"))="#ДатаДок" Тогда
						ДатаДок=ПолучитьОбъект(Зн);
					КонецЕсли;
					
					Если А=Номер Тогда //мы дошли до нужного реквизита
						ИД=ПолучитьОбъект(Зн);
						Если Сокрлп(ИД)="" Тогда
							М_Сообщить("ВНИМАНИЕ значение реквизита по которому происходит синхронизация из периф-й базы
							| было выгружено пустым. Синхронизация проводится по ""внутреннему"" IDD ..."); 
							ЗаписатьВЛогОшибку("ВНИМАНИЕ значение реквизита по которому происходит синхронизация из периф-й базы
							| было выгружено пустым. Синхронизация проводится по ""внутреннему"" IDD "+Спр_ИД);
							ИмяИДРеквизита="IDD";//Возвращаем старое значение
							ИД=Спр_ИД;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Иначе
				М_Сообщить("ВНИМАНИЕ для документа "+Вид+" синхронизация по реквизиту невозможна т.к. этот документ
				| удален в периферийной базе.  Синхронизация проводится по ""внутреннему"" IDD ...");  
				ЗаписатьВЛогОшибку("ВНИМАНИЕ для документа "+Вид+" синхронизация по реквизиту невозможна т.к. этот документ
				| удален в периферийной базе.  Синхронизация проводится по ""внутреннему"" IDD "+Спр_ИД);
			КонецЕсли;
		КонецЕсли;
		
		
		Док=СоздатьОбъект("Документ");
		Найден=0;
		Если ФлИдентифID=1 Тогда
			Найден=НайтиДокументПоIDD(Док,Спр_ИД);
		КонецЕсли;
		
		Если Найден=0 Тогда
			Если ИмяИДРеквизита="НомерДок" Тогда
				Нумератор=Метаданные.Документ(Вид).Нумератор; // Получим нумератор
				Если Нумератор.Выбран()=1 Тогда
					ИдентНумератора=Нумератор.Идентификатор;
				Иначе
					ИдентНумератора=Вид;
				КонецЕсли;
				Найден=Док.ВыбратьПоНомеру(ИД,ДатаДок,ИдентНумератора);
				Док.ПолучитьДокумент();
			Иначе
				Найден=Док.ВыбратьПоЗначению(,,ИмяИДРеквизита,ИД);
				Док.ПолучитьДокумент();
			КонецЕсли;
		КонецЕсли;
		
		Если Найден=1 Тогда
			Если Док.Блокировка(1)=0 Тогда   //сначала заблокируем
				глобФлагВторогоЦикла=1;
				Сообщить("Документ "+Вид+" "+Док.НомерДок+" от "+Док.ДатаДок+" заблокирован т.е. открыт пользователем."); 
				ЗаписатьВЛогОшибку("Документ "+Вид+" "+Док.НомерДок+" от "+Док.ДатаДок+" заблокирован т.е. открыт пользователем.",Док.ТекущийДокумент());
				ОтменитьТранзакцию();
				Док.ОшибкаБлокировки();//Закройте указанный выше документ и повторите загрузку ...
				Перейти ~Выход;
			КонецЕсли;
			Док.Блокировка(0);              //а теперь разблокируем  т.к. корректно не выполняется функция Блокировка() (без параметра) !!!
		КонецЕсли;
		
		Проведен=0;
		ВремяДокумента=ТекущееВремя();
		ДатаДок=РабочаяДата();
		ПомеченНаУдаление=0;
		Если Найден=1 Тогда
			//итак документ найден : делаем проверку на совпадение видов
			Если Сокрлп(Док.Вид())<>Вид Тогда
				Сообщить("ВНИМАНИЕ: загружаемый документ "+Вид+" с IDD = "+Спр_ИД+" уже есть в нашей базе, но другого вида : "+Док.Вид()+"   - не загружаем !!","!!!");
				ЗаписатьВЛогОшибку("ВНИМАНИЕ: загружаемый документ "+Вид+" с IDD = "+Спр_ИД+" уже есть в нашей базе, но другого вида : "+Док.Вид()+"   - не загружаем !!",Док.ТекущийДокумент());
				Возврат 0;
			КонецЕсли;
			
			
			//заменяем старый IDD объекта на новый !!
				Если Док.IDD<>Спр_ИД Тогда
					//после загрузки, этому объекту вернем
					//старое значение и зарегистрируем его как измененный
					СписокИзмененияИД.ДобавитьЗначение(Док.ТекущийДокумент(),Док.IDD);
					Док.IDD=Спр_ИД;
				КонецЕсли;
			
			
			//надо удалить все строчки
			Проведен=Док.Проведен();//т.е. если реквизит #проведен не передавался, то он остается таким, каким был в нашей базе
			//т.е. если проведен , то обновляется и проводится
			
			
			ВремяДокумента=Док.ПолучитьВремя();
			ДатаДок=Док.ДатаДок;
			ПомеченНаУдаление=Док.ПометкаУдаления();
			
		Иначе
			Если ФизСущ=1 Тогда
				Док=СоздатьОбъект("Документ."+Вид);
				глСоздатьНовыйОбъект(Док);
				М_Сообщить("Создан новый документ с IDD = "+Спр_ИД);
			Иначе
				//он не существует и не в периф. базе и не у нас
				Перейти ~Выход;
			КонецЕсли;
			Док.IDD=Спр_ИД;
		КонецЕсли;


		БылНомер=Док.НомерДок;
		Если Найден=0 Тогда
			БылНомер="***такого номера нет****";
		КонецЕсли;
		
		//********************************************* собственно только сейчас загружаем реквизиты документа
		
		//Создадим список предварительно загруженных реквизитов
		Список=СоздатьОбъект("СписокЗначений");  //значение реквизита
		СписокН=СоздатьОбъект("СписокЗначений"); //наименование
		
		Если ФизСущ=1 Тогда
			Для А=1 По Таб_КоличествоСтрок(Таб1) Цикл
				Кол=Кол+1;
				Зн=Т.ПолучитьСтроку(Кол);
				
				Реквизит=Таб_ПолучитьЗначение(Таб1,А,"Наименование");
				Список.ДобавитьЗначение(""+Зн+" ");
				СписокН.ДобавитьЗначение(Реквизит);
			КонецЦикла;
			
		Иначе			//не существует
			Стр="";
			Если Таб_НайтиЗначение(Таб1,"#Удален",Стр,"Наименование")=1 Тогда
				//т.е. если разрешено удалять объекты
				Список.ДобавитьЗначение(ПолучитьПредставлениеОбъекта(1));
				СписокН.ДобавитьЗначение("#Удален");
			КонецЕсли;
		КонецЕсли;
		
		
		Для АПравил=1 По Спис2.РазмерСписка() Цикл
			Реквизит=Спис2.ПолучитьЗначение(АПравил);
			Синоним=СписС.ПолучитьЗначение(АПравил);
			А=СписокН.НайтиЗначение(Синоним);
			Если А<>0 Тогда
				Зн=Список.ПолучитьЗначение(А);
			Иначе
				Зн="";
			КонецЕсли;
			
			
			Если Лев(Реквизит,1)="#" Тогда //значит это доп реквизит
				//вообще доп реквизиты с префиксом # должны идти до обычных реквизитов !!
				
				Атрибут=ПолучитьОбъект(Зн);
				ПрисвоеноНовоеЗначение=0;
				Если ФильтрЗагрузки(Таб2,АПравил,Атрибут,ПрисвоеноНовоеЗначение)=0 Тогда
					Возврат 0;
				КонецЕсли;
				
				Если Реквизит="#Удален" Тогда
					Удалить=Число(Атрибут);
				ИначеЕсли Реквизит="#ПомеченНаУдаление" Тогда
					ПомеченНаУдаление=Число(Атрибут);
				ИначеЕсли Реквизит="#ВремяДокумента" Тогда
					ВремяДокумента=Атрибут;
				ИначеЕсли Реквизит="#ДатаДок" Тогда
					ДатаДок=Атрибут;
				ИначеЕсли Реквизит="#Проведен" Тогда
					Проведен=Число(Атрибут);
				КонецЕсли;
				
			ИначеЕсли Лев(Реквизит,1)="@" Тогда //значит этот реквизит считается специальным образом
				//Обычное задание выражения
				Атрибут=ПолучитьОбъект(Зн);
				Стр=Сред(Реквизит,Найти(Реквизит,"=")+1);
				Шаблон("[Получить("+Стр+")]");Атрибут=глВыражение;
				Реквизит=Сред(Реквизит,2,Найти(Реквизит,"=")-2);
				
				ПрисвоеноНовоеЗначение=0;
				Если ФильтрЗагрузки(Таб2,АПравил,Атрибут,ПрисвоеноНовоеЗначение)=0 Тогда
					Возврат 0;//вообще не загружаем элемент
				КонецЕсли;
				Попытка
					Док.УстановитьАтрибут(Реквизит,Атрибут);
				Исключение
					Сообщить("Неправильное наименование реквизита шапки с именем: "+Реквизит+" в правилах загрузки документа вида: "+Вид);
					ЗаписатьВЛогОшибку("Неправильное наименование реквизита шапки с именем: "+Реквизит+" в правилах загрузки документа вида: "+Вид,Док.ТекущийДокумент());
					продолжить;
				КонецПопытки;
				
				ПроверкаУстановленияАтрибута(Док,Реквизит,Атрибут); 
				
			Иначе
				//нормальные реквизиты шапки ...
				Атрибут=ПолучитьОбъект(Зн);
				ПрисвоеноНовоеЗначение=0;
				Если ФильтрЗагрузки(Таб2,АПравил,Атрибут,ПрисвоеноНовоеЗначение)=0 Тогда
					Возврат 0;
				КонецЕсли;
				Если (А=0)И(ПрисвоеноНовоеЗначение=0) Тогда
					//не изменяем Атрибут !!
					Продолжить;
				КонецЕсли;
				
				Попытка
					Док.УстановитьАтрибут(Реквизит,Атрибут);
				Исключение
					Сообщить("Неправильное наименование реквизита шапки с именем: "+Реквизит+" в правилах загрузки документа вида: "+Вид);
					ЗаписатьВЛогОшибку("Неправильное наименование реквизита шапки с именем: "+Реквизит+" в правилах загрузки документа вида: "+Вид,Док.ТекущийДокумент());
					
					продолжить;
				КонецПопытки;
				
				ПроверкаУстановленияАтрибута(Док,Реквизит,Атрибут);
			КонецЕсли;
		КонецЦикла;
		
		
			
			Пока Док.КоличествоСтрок() <> 0 Цикл
				Док.ВыбратьСтроки();
				Док.ПолучитьСтроку();
				Док.УдалитьСтроку();
			КонецЦикла;
			
		
		
		
		
		//табличная часть !!!
		Номер="";
		Рез=Таб_НайтиЗначение(ТабТаблиц,"Табличная часть",Номер,"Наименование");
		Если Рез<>0 Тогда
			Таб1=Таб_ПолучитьЗначение(ТабТаблиц,Номер,"Указатель");//таблица реквизитов
			
			
			Номер="";
			Рез=Таб_НайтиЗначение(ТабТаблиц2,"Табличная часть",Номер,"Наименование");
			Если Рез<>0 Тогда
				Таб2=Таб_ПолучитьЗначение(ТабТаблиц2,Номер,"Указатель");//таблица настоящих реквизитов
				Спис2=Таб2.Получить("Наименование");//список настоящих имен реквизитов, которые есть в нашей конф...
				СписС=Таб2.Получить("Синоним");//список синонимов настоящих реквизитов, которые есть в нашей конф...
				
				Кол=Кол+1;
				КолСтрок=Число(Т.ПолучитьСтроку(Кол));
				Для АА=1 По КолСтрок Цикл
					Док.НоваяСтрока();
					Список=СоздатьОбъект("СписокЗначений");//.УдалитьВсе();
					СписокН=СоздатьОбъект("СписокЗначений");//СписокН.УдалитьВсе();
					Для А=1 По Таб_КоличествоСтрок(Таб1) Цикл
						Кол=Кол+1;
						Если ФизСущ=1 Тогда
							Зн=Т.ПолучитьСтроку(Кол);
						Иначе
							Зн=" ";
						КонецЕсли;
						Реквизит=Таб_ПолучитьЗначение(Таб1,А,"Наименование");
						Список.ДобавитьЗначение(""+Зн+" ");
						СписокН.ДобавитьЗначение(Реквизит);
					КонецЦикла;
					
					
					Для АПравил=1 По Спис2.РазмерСписка() Цикл
						Реквизит=Спис2.ПолучитьЗначение(АПравил);
						Синоним=СписС.ПолучитьЗначение(АПравил);
						А=СписокН.НайтиЗначение(Синоним);
						Если А<>0 Тогда
							Зн=Список.ПолучитьЗначение(А);
						Иначе
							Зн="";
						КонецЕсли;
						
						
						
						Если Лев(Реквизит,1)="@" Тогда //значит этот реквизит считается специальным образом
							//Обычное задание выражения
							Атрибут=ПолучитьОбъект(Зн);
							Стр=Сред(Реквизит,Найти(Реквизит,"=")+1);
							Шаблон("[Получить("+Стр+")]");Атрибут=глВыражение;
							Реквизит=Сред(Реквизит,2,Найти(Реквизит,"=")-2);
							
							ПрисвоеноНовоеЗначение=0;
							Если ФильтрЗагрузки(Таб2,АПравил,Атрибут,ПрисвоеноНовоеЗначение)=0 Тогда
								Возврат 0;//вообще не загружаем элемент
							КонецЕсли;
							Попытка
								Док.УстановитьАтрибут(Реквизит,Атрибут);
							Исключение
								Сообщить("Неправильное наименование реквизита табл.части с именем: "+Реквизит+" в правилах загрузки документа вида: "+Вид);
								ЗаписатьВЛогОшибку("Неправильное наименование реквизита табл.части с именем: "+Реквизит+" в правилах загрузки документа вида: "+Вид,Док.ТекущийДокумент());
								продолжить;
							КонецПопытки;
							ПроверкаУстановленияАтрибута(Док,Реквизит,Атрибут);
							
						Иначе
							Атрибут=ПолучитьОбъект(Зн);
							ПрисвоеноНовоеЗначение=0;
							Если ФильтрЗагрузки(Таб2,АПравил,Атрибут,ПрисвоеноНовоеЗначение)=0 Тогда
								Возврат 0;
							КонецЕсли;
							
							
							Попытка
								Док.УстановитьАтрибут(Реквизит,Атрибут);
							Исключение
								Сообщить("Неправильное наименование реквизита табл.части с именем: "+Реквизит+" в правилах загрузки документа вида: "+Вид);
								ЗаписатьВЛогОшибку("Неправильное наименование реквизита табл.части с именем: "+Реквизит+" в правилах загрузки документа вида: "+Вид,Док.ТекущийДокумент());
								
								продолжить;
							КонецПопытки;
							
							ПроверкаУстановленияАтрибута(Док,Реквизит,Атрибут);
							
						КонецЕсли;
						
					КонецЦикла;//по реквизитам табл части
				КонецЦикла;//по строкам документа
			КонецЕсли;//проверка1 на наличие табличной части документа
		КонецЕсли;//проверка2 на наличие табличной части документа
		
		
		//Блок проверки корректности номера документа
		ЗагружНомер=Сокрлп(Док.НомерДок);
		БылоИзменениеНомера=0;
		Если (СтатусНомераДок>0) ИЛИ (ЗагружНомер="") Тогда
			Если ЗагружНомер<>БылНомер Тогда
				НовыйНомер=Сокрлп(СоздатьНовыйНомер(Вид,ДатаДок,Док.ТекущийДокумент(),Док.НомерДок));
				Док.НомерДок=НовыйНомер;
				Если РегистрацияПриЗагрузке=1 Тогда
					Если ЗагружНомер<>НовыйНомер Тогда//т.е. присвоили новый номер
						БылоИзменениеНомера=1;//Зарегистрируем изменение после записи
						ЗаписатьВЛогОшибку("При загрузке изменили номер документа",Док.ТекущийДокумент());
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
		Если ПриЗаписиДокумента(Док)=0 Тогда
			Возврат 0;//-значит пользователь в своей обработке запретил записывать документ
		КонецЕсли;
		
		Док_ИДД=Док.IDD;
		Док_Вид=Док.Вид();
		
		Попытка
			Док.Записать();
		Исключение
			Сообщить("Ошибка при записи документа "+Вид+", "+Док.НомерДок+" от "+Док.ДатаДок+", СтатусНомераДок= "+СтатусНомераДок);
			ЗаписатьВЛогОшибку("Ошибка при записи документа "+Вид+", "+Док.НомерДок+" от "+Док.ДатаДок+", СтатусНомераДок= "+СтатусНомераДок);
			Док.Записать();//обратитесь к разработчикам !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		КонецПопытки;
		          
		
			Если Док.Проведен()=1 Тогда
				Попытка
					НеРегистрироватьИзмененияМОД=1;//т.е. не фиксируем в журнале изменений
					ПроведениеПоАлгоритмуМОД=1;
					Док.СделатьНеПроведенным();
					НеРегистрироватьИзмененияМОД=0;
					ПроведениеПоАлгоритмуМОД=0;
					Если Док.Проведен()=1 Тогда
						Сообщить("Ошибка: документ нельзя сделать непроведенным "+Док.Вид()+" "+Док.НомерДок+" "+Док.ДатаДок);
						ЗаписатьВЛогОшибку("Ошибка: документ нельзя сделать непроведенным "+Док.Вид()+" "+Док.НомерДок+" "+Док.ДатаДок,Док.ТекущийДокумент());
						Возврат 0;
					КонецЕсли;
				Исключение
					НеРегистрироватьИзмененияМОД=0;//Попытка отменить проведение оказалась неудачной
					//следовательно надо сделать аналогичные вещи в периферийных базах
					//чтобы базы были идентичными
					ПриИзмененииОбъекта(Док.ТекущийДокумент(),Док.ТекущийДокумент(),Док.ДатаДок,1);
					ПроведениеПоАлгоритмуМОД=0;
					Сообщить("Ошибка при отмене проведения документа "+Док.Вид()+" "+Док.НомерДок+" "+Док.ДатаДок);
					ЗаписатьВЛогОшибку("Ошибка при отмене проведения документа ",Док.ТекущийДокумент());
					Возврат 0;
					//Док.СделатьНеПроведенным();
				КонецПопытки;
			Иначе
				Если Док.ПометкаУдаления()=1 Тогда
					Док.СнятьПометкуУдаления();
				КонецЕсли;
				
				Если Сокрлп(Док.Вид())=ДокументОперации Тогда
					//убиваем все проводки !!
					Опер=СоздатьОбъект("Операция");
					Если Опер.НайтиОперацию(Док)=1 Тогда
						Пока Опер.КоличествоПроводок()>0 Цикл
							Опер.ВыбратьПроводки();
							Опер.ПолучитьПроводку();
							Опер.УдалитьПроводку();
						КонецЦикла;  
						Опер.Записать();
						Док.НайтиДокумент(Док.ТекущийДокумент());
					КонецЕсли;
					Опер=0;
				КонецЕсли;
			КонецЕсли;
			
	

        //Проверка - надо ли регистрировать изменение номера (если оно было)
		Если БылоИзменениеНомера=1 Тогда
				НеРегистрироватьИзмененияМОД=0;
				ПриИзмененииОбъекта(Док,Док,Док.ДатаДок);//регистрируем для миграции во все базы - в т.ч. и обратно
		КонецЕсли;

		//если документ пришел из периферийной базы помеченным на удаление - то этот факт
		//надо зафиксировать т.к. пользователь может воспользоваться процедурой "Удаление помеченных объектов"
		Если ПомеченНаУдаление=1 Тогда
			ПриУдаленииОбъекта(Док.ТекущийДокумент());
		КонецЕсли;
		
		
		Док.УстановитьВремя(Число(Сред(ВремяДокумента,1,2)),Число(Сред(ВремяДокумента,4,2)),Число(Сред(ВремяДокумента,7,2)));
		Док.ДатаДок=ДатаДок;
		Док.Записать();
		
		М_Сообщить("Записан документ "+Вид+", "+Док.НомерДок+" от "+Док.ДатаДок);
		Если Проведен=0 Тогда
			Если ПомеченНаУдаление=1 Тогда
				Если Док.ПометкаУдаления()=0 Тогда
					Док.Удалить(0);
				КонецЕсли;
			Иначе
				Если Док.ПометкаУдаления()=1 Тогда
					Док.СнятьПометкуУдаления();
				КонецЕсли;
			КонецЕсли;
			
			//для документа типа операция,то загружаем проводки
			Если (Движения=ДаДа)И(Сокрлп(Док.Вид())=ДокументОперации) Тогда
				Результат=Док;
			КонецЕсли;
			
		Иначе
			Если Движения=ДаДа Тогда
				Результат=Док;
			Иначе
				ПричинаНепроведения=ПровестиДокумент(Док,0);//Проводим без движений т.е. перепрводим при загрузке
				
				//******************************************************************
				//Алгортим Успеха Начало
				//
				ДобавитьВЖурналРегистрации(Док.ТекущийДокумент(),0,,ПричинаНепроведения);
				//
				//Алгортим Успеха Конец
				//******************************************************************		
				
				Результат=0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;//проверка  вида (<>"-")
	

	
	Если Найден=1 Тогда
		Если Удалить=1 Тогда
			Док.НайтиДокумент(Док.ТекущийДокумент());
			Док.Удалить(1);
		КонецЕсли;
	КонецЕсли;
	~Выход:
	
	Если ЦиклЗагрузки<3 Тогда
		Если глобФлагВторогоЦикла=1 Тогда
			СписокВторогоЦикла.ДобавитьЗначение(Спр_ИД);
			Результат=0;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбработкаПримера=1 Тогда
		Если ТипЗначения(Док)=12 Тогда
			МОДПерем1.ДобавитьЗначение(Док.ТекущийДокумент());
		КонецЕсли;
	КонецЕсли;
	
	МиграцияИзменений(ЗагрБаза,Док_ИДД,12,Док_Вид,РабочаяДата(),РабочаяДата());
	Возврат Результат;
КонецФункции //ЗагрузитьДокумент



//_____________________________________________________________________________
Процедура ЗагрузитьСчет(ВыгрБаза,Таб,Кол,СписокИзмененныхОбъектов,ПриоритетЗагрузки)
	Если (Таб=0) Тогда
		Возврат;
	КонецЕсли;
	Кол=Кол+1;
	НомерПланаСчетов=Число(Т.ПолучитьСтроку(Кол));//Номер плана счетов по порядку (как он идет в шапке) 
	Кол=Кол+1;
	НомерСчета=Число(Т.ПолучитьСтроку(Кол));//Номер счета по порядку (как он идет в шапке) 
	Кол=Кол+1;
	КодСчетаПБ=Сокрлп(Т.ПолучитьСтроку(Кол));//Код счета из периф. базы
	Кол=Кол+1;
	Наименование=Сокрлп(Т.ПолучитьСтроку(Кол));//Наименование счета
	Кол=Кол+1;
	ПризнакГруппы=Число(Т.ПолучитьСтроку(Кол));//Признак группы (0,1)
	Кол=Кол+1;
	ПризнакКонфигуратора=Число(Т.ПолучитьСтроку(Кол));//Признак создания в конфигураторе (0,1)
	Кол=Кол+1;
	Валютный=Число(Т.ПолучитьСтроку(Кол));
	Кол=Кол+1;
	Количественный=Число(Т.ПолучитьСтроку(Кол));
	Кол=Кол+1;
	Забалансовый=Число(Т.ПолучитьСтроку(Кол));
	Кол=Кол+1;
	Активный=Число(Т.ПолучитьСтроку(Кол));
	
	
	
	//	М_Состояние("Счет  "+Наименование);
	//Кол=Кол+1;
	//ФизСущ=Число(Т.ПолучитьСтроку(Кол));
	ТабПланаСчетов=Таб_ПолучитьЗначение(Таб,НомерПланаСчетов,"Указатель");//таблица с видами план-счетов
	ЗагружатьСчета=Таб_ПолучитьЗначение(Таб,НомерПланаСчетов,"Движения");
	Если ЗагружатьСчета<>ДаДа Тогда
		Возврат;
	КонецЕсли;  
	
	ИмяПланСчетов=Таб_ПолучитьЗначение(Таб,НомерПланаСчетов,"Наименование");
	Если ИмяПланСчетов="-" Тогда
		Возврат;
	КонецЕсли;
	
	ПланСчетов=ПланыСчетов.ЗначениеПоИдентификатору(ИмяПланСчетов);
	Попытка
	КодСчета=Таб_ПолучитьЗначение(ТабПланаСчетов,НомерСчета,"Наименование");
	Исключение
	КодСчета=КодСчетаПБ;
	КонецПопытки;
	
	Счет=СоздатьОбъект("Счет");
	Счет.ИспользоватьПланСчетов(ПланСчетов);
	Рез=0;
	Если КодСчета<>"-" Тогда
		Рез=Счет.НайтиПоКоду(КодСчета);
	КонецЕсли;
	Если Рез=1 Тогда
		Если Счет.ЗаданВКонфигурации()=1 Тогда
			М_Сообщить("Счет "+Счет.Код+" "+Счет.Наименование+" задан в конфигураторе, поэтому загрузить нельзя !");
			ЗаписатьВЛогОшибку("Счет "+Счет.Код+" "+Счет.Наименование+" задан в конфигураторе, поэтому загрузить нельзя !",Счет.ТекущийСчет());
			Возврат;
		КонецЕсли;
		
		Если Счет.ЭтоГруппа()<>ПризнакГруппы Тогда
			М_Сообщить("Счет "+Счет.Код+" "+Счет.Наименование+" имеет разные признаки группы с периферийной базой, поэтому загрузить нельзя !");
			ЗаписатьВЛогОшибку("Счет "+Счет.Код+" "+Счет.Наименование+" имеет разные признаки группы с периферийной базой, поэтому загрузить нельзя !",Счет.ТекущийСчет());
			Возврат;
		КонецЕсли;
		
		Если НадоЗагружатьОбъект(Счет.Код,СписокИзмененныхОбъектов,ПриоритетЗагрузки)=0 Тогда//может быть этот объект изменяли и мы , а  тогда надо проверить на приоритет загрузки
			Возврат;
		КонецЕсли;
		//далее обновление .... 
	Иначе
		//здесь загружаем только новые
		Если Счет.НайтиПоКоду(КодСчетаПБ)=1 Тогда
			М_Сообщить("Счет "+КодСчетаПБ+" "+Наименование+" не задан в правилах загрузки, поэтому не загружаем !");
			Возврат;//уже есть такой,но не задан в правилах загрузки как загружаемый ... 
		КонецЕсли;
		Счет.Новый(ПризнакГруппы);
		М_Сообщить("Создан новый счет "+КодСчетаПБ+" "+Наименование);
	КонецЕсли;
	
	
	
	Счет.Код=КодСчетаПБ;
	Счет.Наименование=Наименование;
	
	Счет.Валютный=Валютный;
	Счет.Количественный=Количественный;
	Счет.Забалансовый=Забалансовый;
	Счет.Активный=Активный;
	
	Для А=1 По 5 Цикл
		Кол=Кол+1;
		Зн=ЗначениеИзСтроки(Т.ПолучитьСтроку(Кол));
		Счет.ВидСубконто(А,Зн);
		Кол=Кол+1;
		Зн=Число(Т.ПолучитьСтроку(Кол));
		Счет.ТолькоОбороты(А,Зн);
		Кол=Кол+1;
		Зн=Число(Т.ПолучитьСтроку(Кол));
		Счет.УчетПоСумме(А,Зн);
		Кол=Кол+1;
		Зн=Число(Т.ПолучитьСтроку(Кол));
		Счет.УчетПоВалютнойСумме(А,Зн);
		Кол=Кол+1;
		Зн=Число(Т.ПолучитьСтроку(Кол));
		Счет.УчетПоКоличеству(А,Зн);
	КонецЦикла;
	
	
	Счет.Записать();
	       
	//******************************************************************
	//Алгортим Успеха Начало
	//
	ДобавитьВЖурналРегистрации(Счет.ТекущийСчет(),0);
	//
	//Алгортим Успеха Конец
	//******************************************************************
	
	М_Сообщить("Загружен счет "+Счет.Код+" "+Счет.Наименование);
	МиграцияИзменений(ВыгрБаза,Счет.Код,94,ЗначениеВСтроку(Счет),РабочаяДата(),РабочаяДата());
КонецПроцедуры //ЗагрузитьСчет
//_____________________________________________________________________________

Процедура ЗагрузитьКонстанту(ВыгрБаза,ТабКонстант,Кол,СписокИзмененныхОбъектов,ПриоритетЗагрузки)
	глобФлагВторогоЦикла=0;//Это означает что второй раз загружать не надо !!
	Если ТабКонстант=0 Тогда
		Возврат;
	КонецЕсли;
	Кол=Кол+1;
	НомерВида=Число(Т.ПолучитьСтроку(Кол));
	
	Реквизит=Таб_ПолучитьЗначение(ТабКонстант,НомерВида,"Наименование");
	Если Реквизит="-" Тогда
		Возврат;//загружать нельзя
	КонецЕсли;
	
	Если НадоЗагружатьОбъект(Реквизит,СписокИзмененныхОбъектов,ПриоритетЗагрузки)=0 Тогда//может быть этот объект изменяли и мы , а  тогда надо проверить на приоритет загрузки
		Возврат;
	КонецЕсли;     
	//******************************************************************
	//Алгортим Успеха Начало
	//
	ДобавитьВЖурналРегистрации(Реквизит,0);
	//
	//Алгортим Успеха Конец
	//******************************************************************	
	
	//	М_Состояние("Константа."+Реквизит);
	М_Сообщить("Загружается константа "+Реквизит);
	Кол=Кол+1;
	П=Таб_ПолучитьЗначение(ТабКонстант,НомерВида,"Периодичность");
	История=Таб_ПолучитьЗначение(ТабКонстант,НомерВида,"История");
	Дата1=РабочаяДата();
	Дата2=РабочаяДата();
	Если (П=1)И(История=ДаДа) Тогда
		КолПериод=Число(Т.ПолучитьСтроку(Кол));
		Пер=СоздатьОбъект("Периодический");
		Пер.ИспользоватьОбъект(Реквизит);
		Для АА=1 По КолПериод Цикл
			Кол=Кол+1;
			Пер.Значение=ПолучитьОбъект(Т.ПолучитьСтроку(Кол));
			Кол=Кол+1;
			Пер.ДатаЗнач=Т.ПолучитьСтроку(Кол);
			Пер.Записать();
			Если АА=1 Тогда
				Дата1=Пер.ДатаЗнач;
			ИначеЕсли АА=КолПериод Тогда
				Дата2=Пер.ДатаЗнач;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если П=1 Тогда  //пришла периодическая константа, но загружаем как непериодическую - последнее значение
			КолПериод=Число(Т.ПолучитьСтроку(Кол));
			Если КолПериод=0 Тогда
				Возврат;
			КонецЕсли;
			Кол=Кол+КолПериод*2-1;
		КонецЕсли;
		Зн=Т.ПолучитьСтроку(Кол);
		Атрибут=ПолучитьОбъект(Зн);
		ПрисвоеноНовоеЗначение=0;
		Если ФильтрЗагрузки(ТабКонстант,НомерВида,Атрибут,ПрисвоеноНовоеЗначение)=0 Тогда
			Возврат;//вообще не загружаем элемент
		КонецЕсли;
		
		Если Число(Метаданные.Константа(Реквизит).Периодический)=0 Тогда
			Константа.УстановитьАтрибут(Реквизит,Атрибут);
		Иначе    //константа периодическая, а надо загрузить как непериодическую !!
			Пер=СоздатьОбъект("Периодический");
			Пер.ИспользоватьОбъект(Реквизит);
			Пер.Значение=Атрибут;
			ПЕр.ДатаЗнач=РабочаяДата();
			Пер.Записать();
		КонецЕсли;
	КонецЕсли;
	МиграцияИзменений(ВыгрБаза,Реквизит,95,Реквизит,Дата1,Дата2);
КонецПроцедуры
//_____________________________________________________________________________

Процедура ЗагрузитьЭлементСправочника(ЗагрБаза,Таб,ТабПравил,Кол,СписокИзмененныхОбъектов,ПриоритетЗагрузки)
	глобФлагВторогоЦикла=0;//Это означает что данный загружаемый справочник второй раз загружать не надо !!
	Если (Таб=0)ИЛИ(ТабПравил=0) Тогда
		Возврат;
	КонецЕсли;
	Дата1=РабочаяДата();
	Дата2=РабочаяДата();
	Кол=Кол+1;
	НомерВида=Число(Т.ПолучитьСтроку(Кол));
	Кол=Кол+1;
	Спр_ИД=Сокрлп(Т.ПолучитьСтроку(Кол));
	Если НадоЗагружатьОбъект(Спр_ИД,СписокИзмененныхОбъектов,ПриоритетЗагрузки)=0 Тогда//может быть этот объект изменяли и мы , а  тогда надо проверить на приоритет загрузки
		Возврат;
	КонецЕсли;
	Кол=Кол+1;
	ФизСущ=Число(Т.ПолучитьСтроку(Кол));
	
	Таб1=Таб_ПолучитьЗначение(Таб,НомерВида,"Указатель");//таблица реквизитов
	
	Вид =Таб_ПолучитьЗначение(Таб,НомерВида,"Наименование");
	СтатусКода=Таб_ПолучитьЗначение(Таб,НомерВида,"Статус");
	
	
	
	НомерВида2="";
	Рез=Таб_НайтиЗначение(ТабПравил,Вид,НомерВида2,"Синоним");
	Если Рез=0 Тогда
		Возврат ;
	Иначе
		//а теперь Вид - вид справочника в нашей конфигурации
		Вид=Таб_ПолучитьЗначение(ТабПравил,НомерВида2,"Наименование");
		
		//************
		
		
		//************
		
		
		Таб2=Таб_ПолучитьЗначение(ТабПравил,НомерВида2,"Указатель");
		Спис2=Таб2.Получить("Наименование");//список настоящих имен реквизитов, которые есть в нашей конф...
		СписС=Таб2.Получить("Синоним");//список синонимов настоящих реквизитов, которые есть в нашей конф...
		СписОб=Таб2.Получить("ВклОбновление");
		
		Если Спис2.РазмерСписка()=0 Тогда
			//если в правилах загрузки не задан ни один реквизит, то не загружаем этот справочник
			//такая ситуация возникает, если мы хотим передавать ссылки на справочники, но не хотим передавать их самих
			Возврат;
		КонецЕсли;
		
		Спр=СоздатьОбъект("Справочник."+Вид);
		Спр.ИспользоватьДату(РабочаяДата());
		
		//как будем идентифицировать
		Номер="";
		ИмяИДРеквизита="IDD";
		ИД=Спр_ИД;
		Владелец=0;//владелец у подчиненного справочника для синхронизации не по IDD
		Подчиненность=Метаданные.Справочник(Вид).Владелец.Выбран();
		                
		Найден=0;
		                                               
		//Если синхронизируемся по реквизиту, то по IDD искать не надо.
		//Алгоритм Успеха
		Если Таб_НайтиЗначение(Таб1,ДаДА,Номер,"Синхронизация")=0 Тогда
			Найден=Спр.НайтиПоРеквизиту("IDD",Спр_ИД,1);             
		КонецЕсли;       
		//Алгоритм Успеха
		
		Если Найден=0 Тогда
			Если Таб_НайтиЗначение(Таб1,ДаДА,Номер,"Синхронизация")=1 Тогда
				//смотрим какой тип справочника, если это подчиненный, то надо бы найти его владельца !!
				ИмяИДРеквизита=Сокрлп(Таб_ПолучитьЗначение(Таб1,Номер,"Наименование"));
				Если (ИмяИДРеквизита<>"-")И(ФизСущ=1) Тогда
					Кол1=Кол;//сейчас мы находимся на позиц физ сущность
					//ищем значение ИД
					Для А=1 По Таб_КоличествоСтрок(Таб1) Цикл
						П=Таб_ПолучитьЗначение(Таб1,А,"Периодичность");
						Если П=1 Тогда
							КолПериод=Число(Т.ПолучитьСтроку(Кол1+1));
							Кол1=Кол1+КолПериод*2;
							Зн=Т.ПолучитьСтроку(Кол1);//значение т.е. если установлена синхронизация по реквизиту, который
							//в периф. базе явл-ся периодич, то синхр по последнему выгр значению
							Кол1=Кол1+1;   //Дата установки
						Иначе
							Кол1=Кол1+1;
							Зн=Т.ПолучитьСтроку(Кол1);
						КонецЕсли;
						
						Если Подчиненность=1 Тогда//для такого справочника надо еще найти владельца
							Реквизит=Сокрлп(Таб_ПолучитьЗначение(Таб1,А,"Наименование"));
							Если Реквизит="Владелец" Тогда
								Владелец=ПолучитьОбъект(Зн);
							КонецЕсли;
						КонецЕсли;
						
						Если А=Номер Тогда //мы дошли до нужного реквизита
							ИД=ПолучитьОбъект(Зн);
							Если Сокрлп(ИД)="" Тогда
								М_Сообщить("ВНИМАНИЕ значение реквизита по которому происходит синхронизация из периф-й базы
								| было выгружено пустым. Синхронизация проводится по ""внутреннему"" IDD ..."); 
								ЗаписатьВЛогОшибку("ВНИМАНИЕ значение реквизита по которому происходит синхронизация из периф-й базы
								| было выгружено пустым. Синхронизация проводится по ""внутреннему"" IDD"); 
								ИмяИДРеквизита="IDD";//Возвращаем старое значение
								ИД=Спр_ИД;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			
			Если Подчиненность=1 Тогда
				Если ТипЗначения(Владелец)=11 Тогда
					Спр.ИспользоватьВладельца(Владелец);
				КонецЕсли;
			КонецЕсли;
			Если ИмяИДРеквизита="Наименование" Тогда
				Найден=Спр.НайтиПоНаименованию(ИД,Подчиненность,1);
			ИначеЕсли ИмяИДРеквизита="Код" Тогда
				Найден=Спр.НайтиПоКоду(ИД,Подчиненность);
			ИначеЕсли  ИмяИДРеквизита="IDD" Тогда
				Найден=Спр.НайтиПоРеквизиту(ИмяИДРеквизита,ИД,1-Подчиненность);
			Иначе	
					
				//Здесь может возникнуть коллизия в случае неуникальности
				//выбранного реквизита. Пробуем разрешить эту проблему при 
				//помощи доп. реквизита "ДляВыгрузки" (тип число.1.0). Т.е. 
				//будем переносить в тот элемент, у которого этот реквизит =1
				
				//Сначала проверимся на наличие означенного реквизита
				
				Если Метаданные.Справочник(Спр.Вид()).Реквизит("ДляВыгрузки").Выбран()=1 Тогда
					Найден=Спр.ВыбратьЭлементыПоРеквизиту(ИмяИДРеквизита,ИД,Подчиненность);
					ТекСпр=Спр.ТекущийЭлемент();
					Если Найден=1 Тогда
						Пока Спр.ПолучитьЭлемент()=1 Цикл
							Если Спр.ДляВыгрузки=1 Тогда
								//Находим нужный элемент и прерываем цикл
								ТекСпр=Спр.ТекущийЭлемент();
								Прервать;
							КонецЕсли;	
						КонецЦикла;
						Спр.НайтиЭлемент(ТекСпр);
					КонецЕсли;	
				Иначе	  
					//Здесь делать нечего - умываем руки (считаем, что уникальность
					//обеспечена)
					Найден=Спр.НайтиПоРеквизиту(ИмяИДРеквизита,ИД,1-Подчиненность);
				КонецЕсли;		
			КонецЕсли;
		КонецЕсли;
		
		
		
		
		
		Если Найден=1 Тогда
			Если Спр.Блокировка(1)=0 Тогда    //сначала заблокируем
				глобФлагВторогоЦикла=1;
				Сообщить("Справочник "+Вид+" "+Спр.Наименование+" код "+Спр.Код+" заблокирован т.е. открыт  пользователем.");
				ЗаписатьВЛогОшибку("Справочник "+Вид+" "+Спр.Наименование+" код "+Спр.Код+" заблокирован т.е. открыт  пользователем.",Спр.ТекущийЭлемент());
				ОтменитьТранзакцию();
				Спр.ОшибкаБлокировки();//Закройте указанный выше справочник и повторите загрузку ...
				Перейти ~Выход;
			КонецЕсли;
			Спр.Блокировка(0);              //а теперь разблокируем
		КонецЕсли;
		
		КолСтарт=Кол;//Запоминаем позицию для повторного цикла прохода - загрузки периодических реквизитов
		НадоЗагрПериод=0;//если = 1 то встретился хотя бы один периодич реквизит
		НовыйСпр=0;
		ЭтоГруппа=0;
		
		//реквизитыпо умолчанию
		ПомеченНаУдаление=0;
		Если Найден=1 Тогда
			ПомеченНаУдаление=Спр.ПометкаУдаления();
		КонецЕсли;
		Удалить=0;
		
		БылКод=Спр.Код;
		Если Найден=0 Тогда
			БылКод="***такого кода нет***";
		КонецЕсли;
		
		
		
		//********************************************* собственно только сейчас загружаем реквизиты	справочника
		
		
		//Создадим список предварительно загруженных реквизитов
		Список=СоздатьОбъект("СписокЗначений");  //значение реквизита
		СписокН=СоздатьОбъект("СписокЗначений"); //наименование
		
		РодительСпр="";
		
		Если ФизСущ=1 Тогда
			Для А=1 По Таб_КоличествоСтрок(Таб1) Цикл
				П=Таб_ПолучитьЗначение(Таб1,А,"Периодичность");
				Если П=1 Тогда
					КолПериод=Число(Т.ПолучитьСтроку(Кол+1));
					Если КолПериод<>0 Тогда
						Кол=Кол+КолПериод*2;
						Зн=Т.ПолучитьСтроку(Кол);//т.е. если у нас реквизит не периодич,
						//а в периф период, то загруж посл. значение
					Иначе
						Зн="";//не выгружались совсем
					КонецЕсли;
					Кол=Кол+1;
				Иначе
					Кол=Кол+1;
					Зн=Т.ПолучитьСтроку(Кол);
				КонецЕсли;
				
				Реквизит=Таб_ПолучитьЗначение(Таб1,А,"Наименование");
				Если Реквизит="Родитель" Тогда
					РодительСпр=ПолучитьОбъект(Зн);
				КонецЕсли;
				Список.ДобавитьЗначение(""+Зн+" ");
				СписокН.ДобавитьЗначение(Реквизит);
			КонецЦикла;
			
		Иначе			//не существует
			Стр="";
			Если Таб_НайтиЗначение(Таб1,"#Удален",Стр,"Наименование")=1 Тогда
				//т.е. если разрешено удалять объекты
				Список.ДобавитьЗначение(ПолучитьПредставлениеОбъекта(1));
				СписокН.ДобавитьЗначение("#Удален");
			КонецЕсли;
		КонецЕсли;
		
		Если Найден=1 Тогда
			//заменяем старый IDD объекта на новый !!
				Если Спр.IDD<>Спр_ИД Тогда
					//после загрузки, этому объекту вернем
					//старое значение и зарегистрируем его как измененный
					СписокИзмененияИД.ДобавитьЗначение(Спр.ТекущийЭлемент(),Спр.IDD);
				КонецЕсли;
			Спр.IDD=Спр_ИД;
		КонецЕсли;
		Если РодительСпр="" Тогда
			РодительСпр=Спр.Родитель;
		КонецЕсли;
		//пройдемся по реквизитам текущего справочника нашей базы
		//и смотрим что можно загрузить из пришедшего пакета     
		ТекНайден=Найден;
		//Если (Обновлять=1) ИЛИ (Найден=0) Тогда
			Для АПравил=1 По Спис2.РазмерСписка() Цикл
				Реквизит=Спис2.ПолучитьЗначение(АПравил);//реквизит в который надо что-то загрузить
				Синоним=СписС.ПолучитьЗначение(АПравил);//его синоним в файле загрузки т.е. с какого рекв периф базы загружать
				Обновлять=СписОб.ПолучитьЗначение(АПравил);
				
				Если (Обновлять<>ДаДа) И (ТекНайден=1) Тогда
					Продолжить;
				КонецЕсли;	
				
				А=СписокН.НайтиЗначение(Синоним);
				П=0;
				Если А>0 Тогда
					Зн=Список.ПолучитьЗначение(А);
					П=Таб_ПолучитьЗначение(Таб1,А,"Периодичность");
					История=Таб_ПолучитьЗначение(Таб1,А,"История");
				Иначе
					Зн="";
					История=0;
					П=0;
				КонецЕсли;
				//если синоним проставлен неправильно, то загружается пустое значение
				
				//если сопоставляется 	периодический реквизит из загружаемой базы нескольким непериодич реквизитам тек. базе, то берется посл. значение
				
				Если (П=1)И(История=ДаДа) Тогда
					НадоЗагрПериод=1;
					//если в периф-й и у нас периодич тип ,то загрузим потом - после записи справочника
				Иначе
					//здесь загружаем только непериодические реквизиты (периодичность - как задана в нашей базе)
					Если Лев(Реквизит,1)="#" Тогда //значит это доп реквизит
						//вообще доп реквизиты с префиксом # должны идти до обычных реквизитов !!
						Атрибут=ПолучитьОбъект(Зн);
						ПрисвоеноНовоеЗначение=0;
						Если ФильтрЗагрузки(Таб2,АПравил,Атрибут,ПрисвоеноНовоеЗначение)=0 Тогда
							Возврат;//вообще не загружаем элемент
						КонецЕсли;
						
						Если Реквизит="#Удален" Тогда
							Удалить=Число(Атрибут);
						ИначеЕсли Реквизит="#ЭтоГруппа" Тогда
							ЭтоГруппа=Число(Атрибут);
							Если Найден=1 Тогда
								Если ЭтоГруппа<>Спр.ЭтоГруппа() Тогда
									Если Сокрлп(Спр.IDD)=Спр_ИД Тогда
										М_Сообщить("ВНИМАНИЕ в периферийной базе элемент справочника "+Вид+" с IDD = "+Спр_ИД+?(ЭтоГруппа=1," является группой "," не является группой")+",
										|а в нашей базе элемент с IDD = "+Спр.IDD +?(Спр.ЭтоГруппа()=1," является группой"," является элементом ")+" загрузку пропускаем !");
										ЗаписатьВЛогОшибку("ВНИМАНИЕ в периферийной базе элемент справочника "+Вид+" с IDD = "+Спр_ИД+?(ЭтоГруппа=1," является группой "," не является группой")+",
										|а в нашей базе элемент с IDD = "+Спр.IDD +?(Спр.ЭтоГруппа()=1," является группой"," является элементом ")+" загрузку пропускаем !",спр.ТекущийЭлемент());
										Перейти ~Выход;//здесь ничего не поделаешь !!!!!
									КонецЕсли;
									//попытаемся исправить - создаем новый справочник ! (т.к. IDD разный , то не фатально);
									Найден=0;//т.е. говорим , что мы такой не нашли
								Иначе
									//все в порядке !!
									Продолжить;
								КонецЕсли;
								//а если не найден, то когда будем создавать новый - мы создадим првильно конечно-же
							КонецЕсли;
						ИначеЕсли Реквизит="#ПомеченНаУдаление" Тогда
							ПомеченНаУдаление=Число(Атрибут);
						КонецЕсли;
						
						
					Иначе
						Если Найден=0 Тогда //не найден - создаем новый элемент !!!!
							Если ЭтоГруппа=1 Тогда
								Попытка
									глСоздатьНовуюГруппу(Спр);
								Исключение
									Сообщить("Ошибка на "+Спр.Вид());
									ЗаписатьВЛогОшибку("Ошибка при создании новой группы справочника "+спр.вид());
									глСоздатьНовуюГруппу(Спр); //обратитесь к разработчику !!
								КонецПопытки;
								М_Сообщить("Создана новая группа справочника "+Вид+" с IDD = "+Спр_ИД+" имя = "+Спр.Наименование+"  "+Спр.IDD);
							Иначе
								глСоздатьНовыйОбъект(Спр);
								М_Сообщить("Создан новый элемент справочника "+Вид+" с IDD = "+Спр_ИД);
							КонецЕсли;
							Найден=1;//т.е. вот мы уже спозиционировались на новый элемент !!
							НовыйСпр=1;
							Спр.IDD=Спр_ИД;
						КонецЕсли;
						
						Если Лев(Реквизит,1)="@" Тогда //значит этот реквизит считается специальным образом
							//Обычное задание выражения
							Атрибут=ПолучитьОбъект(Зн);
							Стр=Сред(Реквизит,Найти(Реквизит,"=")+1);
							Шаблон("[Получить("+Стр+")]");Атрибут=глВыражение;
							Реквизит=Сред(Реквизит,2,Найти(Реквизит,"=")-2);
							
							ПрисвоеноНовоеЗначение=0;
							Если ФильтрЗагрузки(Таб2,АПравил,Атрибут,ПрисвоеноНовоеЗначение)=0 Тогда
								Возврат;//вообще не загружаем элемент
							КонецЕсли;
							Если нрег(Реквизит)="родитель" Тогда
								Попытка
									Спр.Родитель=Атрибут;
									РодительСпр=Атрибут;
								Исключение
									Сообщить("Ошибка на "+Вид+":   Реквизит="+Реквизит+",  Атрибут="+Атрибут+", тип "+ТипЗначения(Атрибут));
									ЗаписатьВЛогОшибку("Ошибка при попытке назначить родителя для элемента справочника",Спр.ТекущийЭлемент());
									Спр.Родитель=Атрибут;
								КонецПопытки;
							Иначе
								Спр.УстановитьАтрибут(Реквизит,Атрибут);
								ПроверкаУстановленияАтрибута(Спр,Реквизит,Атрибут);
							КонецЕсли;
							Продолжить;
						КонецЕсли;
						
						
						Атрибут=ПолучитьОбъект(Зн);
						ПрисвоеноНовоеЗначение=0;
						Если ФильтрЗагрузки(Таб2,АПравил,Атрибут,ПрисвоеноНовоеЗначение)=0 Тогда
							Возврат;//вообще не загружаем элемент
						КонецЕсли;
						Если (А=0)И(ПрисвоеноНовоеЗначение=0) Тогда
							//не изменяем Атрибут !!
							Продолжить;
						КонецЕсли;
						
						Если Реквизит="Владелец" Тогда
							Если ТипЗначения(Атрибут)=11 Тогда
								Если Атрибут.ЭтоГруппа()=0 Тогда
									Спр.Владелец=Атрибут;
								КонецЕсли;
							КонецЕсли;
						ИначеЕсли Реквизит="Родитель" Тогда
							Если ТипЗначения(Атрибут)=11 Тогда
								Если Атрибут.ЭтоГруппа()=1 Тогда
									Если Атрибут<>Спр.ТекущийЭлемент() Тогда
										Если Атрибут.ПринадлежитГруппе(Спр.ТекущийЭлемент())=0 Тогда
											Попытка
												Спр.Родитель=Атрибут;
												РодительСпр=Атрибут;
											Исключение
												Сообщить("Ошибка на "+Вид+":   Реквизит="+Реквизит+",  Атрибут="+Атрибут+", тип "+ТипЗначения(Атрибут));
												ЗаписатьВЛогОшибку("Ошибка при попытке назначить родителя для элемента справочника",Спр.ТекущийЭлемент());
												Спр.Родитель=Атрибут;
											КонецПопытки;
										Иначе
											глобФлагВторогоЦикла=1;//может его просто еще не загрузили
										КонецЕсли;
									КонецЕсли;	
								КонецЕсли;
							Иначе
								Спр.Родитель="";
							КонецЕсли;
						Иначе
							Попытка
								Спр.УстановитьАтрибут(Реквизит,Атрибут);
								ПроверкаУстановленияАтрибута(Спр,Реквизит,Атрибут);
							Исключение
								Сообщить("Ошибка на "+Вид+":   Реквизит="+Реквизит+",  Атрибут="+Атрибут+", тип "+ТипЗначения(Атрибут));
								ЗаписатьВЛогОшибку("Ошибка при заполнении реквизита "+реквизит,Спр.ТекущийЭлемент());
								Спр.УстановитьАтрибут(Реквизит,Атрибут);
								ПроверкаУстановленияАтрибута(Спр,Реквизит,Атрибут);
							КонецПопытки;
						КонецЕсли;
						
					КонецЕсли;//конец проверки типа реквизита
				КонецЕсли;//конец проверки на историю !!
			КонецЦикла;
		//КонецЕсли;
		
		
		
		Если Найден=1 Тогда
			Если Удалить=1 Тогда
				Если НовыйСпр=0 Тогда
					Спр.НайтиЭлемент(Спр.ТекущийЭлемент());
					Спр.Удалить(1);
				КонецЕсли;
			Иначе
				
				
				
				Если Подчиненность=1 Тогда //для подчиненных справочников должен быть выбран владелец
					Если Спр.Владелец.Выбран()=0 Тогда
						глобФлагВторогоЦикла=1;
						//							Сообщить("Нет владельца "+Вид+" "+Спр.Вид()+"  "+Спр.ТекущийЭлемент());
						Перейти ~Выход;
					КонецЕсли;
				КонецЕсли;
				
				
				//проверка корректности кода !!!
				БылоИзменениеКода=0;
				Если СтатусКода>0 Тогда
					ЗагружКод=Сокрлп(Спр.Код);
					Если БылКод<>ЗагружКод Тогда
						НовыйКод=Сокрлп(СоздатьНовыйКод(Вид,Спр,Подчиненность));
						Спр.Код=НовыйКод;
						Если РегистрацияПриЗагрузке=1 Тогда
							Если ЗагружКод<>НовыйКод Тогда//т.е. присвоили новый номер
								БылоИзменениеКода=1;//Зарегистрируем изменение после записи
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				
				
				
				
				Если ПриЗаписиСправочника(Спр)=0 Тогда
					Возврат ;// - значит пользователь в своей обработке запретил записывать документ
				КонецЕсли;
				
				попытка
					Спр.Записать();
				Исключение
					Сообщить("  "+Вид+": имя = "+Спр.Наименование+"; код = "+Спр.Код+"; IDD = "+Спр.IDD+"; владелец="+Спр.Владелец+"; группа="+Спр.Родитель);
					ЗаписатьВЛогОшибку("Ошибка при записи элемента "+Вид+": имя = "+Спр.Наименование+"; код = "+Спр.Код+"; IDD = "+Спр.IDD+"; владелец="+Спр.Владелец+"; группа="+Спр.Родитель);
					Спр.Записать(); //Обратитесь к разработчику !!!!!
				КонецПопытки;
				                
				//******************************************************************
				//Алгортим Успеха Начало
				//
				ДобавитьВЖурналРегистрации(Спр.ТекущийЭлемент(),0);
				//
				//Алгортим Успеха Конец
				//******************************************************************				
				
				
				//Если код изменился, то смотрим надо ли регистрировать изменение
				Если БылоИзменениеКода=1 Тогда
					НеРегистрироватьИзмененияМОД=0;
					ПриИзмененииОбъекта(Спр,Спр,РабочаяДата());//регистрируем для миграции во все базы - в т.ч. и обратно
				КонецЕсли;
				
				
				
				//если документ пришел из периферийной базы помеченным на удаление - то этот факт
				//надо зафиксировать т.к. пользователь может воспользоваться процедурой "Удаление помеченных объектов"
				Если ПомеченНаУдаление=1 Тогда
					ПриУдаленииОбъекта(Спр.ТекущийЭлемент());
				КонецЕсли;
				
				
				Если Спр.Выбран()=0 Тогда//на всякие пожарные
					Спр.НайтиПоРеквизиту("IDD",Спр_ИД,1);
				КонецЕсли;
				М_Сообщить("Записан справочник "+Спр.Вид()+", "+Спр.Наименование+" ,"+Спр.Код);
				
				Если ПомеченНаУдаление=1 Тогда //надо поставить если не стоит пометка
					Если Спр.ПометкаУдаления()=0 Тогда
						Спр.Удалить(0);//ставим пометку
					КонецЕсли;
				Иначе
					Если Спр.ПометкаУдаления()=1 Тогда //надо снять если стоит пометка
						Спр.СнятьПометкуУдаления();
					КонецЕсли;
				КонецЕсли;
				
				//если реквизит периодический и загр-ся история, то условия и значения замены не действуют !!!
				//аналогично и для выгрузки !!!
				
				//сопоставление одного загружаемого реквизита для нескольких периодических реквизитов в текущем справочнике не действует
				//т.е.можно сопоставить только один реквизит
				
				Если НадоЗагрПериод=1 Тогда
					//справочник записан, загружаем историю !!
					Кол=КолСтарт;
					Для А=1 По Таб_КоличествоСтрок(Таб1) Цикл
						П=Таб_ПолучитьЗначение(Таб1,А,"Периодичность");
						История=Таб_ПолучитьЗначение(Таб1,А,"История");
						Если П=1 Тогда
							Кол=Кол+1;
							КолПериод=Число(Т.ПолучитьСтроку(Кол));
							Если КолПериод<>0 Тогда
								Зн=Т.ПолучитьСтроку(Кол);
								Если (Спр.ЭтоГруппа()=0)И(История=ДаДа) Тогда
									Реквизит=Таб_ПолучитьЗначение(Таб1,А,"Наименование");
									Рез=СписС.НайтиЗначение(Реквизит);
									Если Рез=0 Тогда
										Кол=Кол+КолПериод*2;//вообще-то мы здесь не бываем !!
										Продолжить;
									КонецЕсли;
									Реквизит=Спис2.ПолучитьЗначение(Рез);
									Если Реквизит="-" Тогда
										Кол=Кол+КолПериод*2;//вообще-то мы здесь не бываем !!
										Продолжить;
									КонецЕсли;
									Пер=СоздатьОбъект("Периодический");
									Пер.ИспользоватьОбъект(Реквизит,Спр.ТекущийЭлемент());
									Для АА=1 По КолПериод Цикл
										Кол=Кол+1;
										Атрибут=ПолучитьОбъект(Т.ПолучитьСтроку(Кол));
										Пер.Значение=Атрибут;
										Если Пер.Значение<>Атрибут Тогда
											ПроверкаУстановленияАтрибута(Пер,"Значение",Атрибут,1);
											Пер.Значение=Атрибут;
										КонецЕсли;
										Кол=Кол+1;
										Пер.ДатаЗнач=Т.ПолучитьСтроку(Кол);
										Пер.Записать();
										Если АА=1 Тогда
											Дата1=Пер.ДатаЗнач;
										ИначеЕсли АА=КолПериод Тогда
											Дата2=Пер.ДатаЗнач;
										КонецЕсли;
									КонецЦикла;
									
								Иначе
									// если у нас реквизит не периодич, а в периф период, то загруж посл. значение
									Кол=Кол+КолПериод*2;
								КонецЕсли;
							КонецЕсли;
						Иначе
							Кол=Кол+1;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;//конец проверки на то, что загружаем ли этот вид вообще
	~Выход:
	Если глобФлагВторогоЦикла=1 Тогда
		//		СписокВторогоЦикла.ДобавитьЗначение(Спр_ИД,Вид+"  "+Спр.Наименование+"  "+Спр_ИД);
		СписокВторогоЦикла.ДобавитьЗначение(Спр_ИД);//,Вид+"  "+Спр.Наименование+"  "+Спр_ИД);
	КонецЕсли;
	МиграцияИзменений(ЗагрБаза,Спр.IDD,11,Спр.Вид(),Дата1,Дата2);
	
	Если ОбработкаПримера=1 Тогда
		Если ТипЗначения(Спр)=11 Тогда
			МОДПерем1.ДобавитьЗначение(Спр.ТекущийЭлемент());
		КонецЕсли;
	КонецЕсли;
	Спр=0;
КонецПроцедуры //ЗагрузитьЭлементСправочника

//_____________________________________________________________________________

Процедура ЗагрузитьДвиженияРегистров(Таб,Кол)
	Если Таб=0 Тогда
		Возврат;
	КонецЕсли;
	Для АТаб=1 По Таб_КоличествоСтрок(Таб) Цикл
		Кол=Кол+1;
		НомерВида=Число(Т.ПолучитьСтроку(Кол));
		Кол=Кол+1;
		КолДвижений=Число(Т.ПолучитьСтроку(Кол));
		Таб1=Таб_ПолучитьЗначение(Таб,АТаб,"Указатель");
		Вид=Таб_ПолучитьЗначение(Таб,АТаб,"Наименование");
		Если Вид<>"-" Тогда
			Регистры=СписокРегистровПроведения.Получить(Вид);
			Таб_УдалитьСтроки(Регистры);
		КонецЕсли;
		Вид=СтрЗаменить(Вид,"#","");
		АРег=0;
		Для А=1 По КолДвижений Цикл
			Если Вид<>"-" Тогда
				АРег=Таб_НоваяСтрока(Регистры);
			КонецЕсли;
			Для АТаб1=1 По Таб_КоличествоСтрок(Таб1) Цикл//по ресурсам, измер, рекв
				ТабРекв=Таб_ПолучитьЗначение(Таб1,АТаб1,"Указатель");
				Для АТабРекв=1 По Таб_КоличествоСтрок(ТабРекв) Цикл//по реквизитам
					НомА=АТабРекв;
					Наименование=Таб_ПолучитьЗначение(ТабРекв,АТабРекв,"Наименование");
					Кол=Кол+1;
					Если Наименование<>"-" Тогда
						Если Лев(Наименование,1)="#" Тогда 
							Если Наименование="#НомерСтроки" Тогда
								Зн=Число(Т.ПолучитьСтроку(Кол));
								Наименование="НомерСтроки";
							Иначе
								Продолжить;
							КонецЕсли;
						ИначеЕсли Лев(Наименование,1)="@" Тогда //значит этот реквизит считается специальным образом
							Реквизит=Наименование;
							//Обычное задание выражения
							Атрибут=ПолучитьОбъект(Зн);
							Стр=Сред(Реквизит,Найти(Реквизит,"=")+1);
							Шаблон("[Получить("+Стр+")]");Атрибут=глВыражение;
							Наименование=Сред(Реквизит,2,Найти(Реквизит,"=")-2);
							Зн=Атрибут;
						Иначе
							Зн=ПолучитьОбъект(Т.ПолучитьСтроку(Кол));
						КонецЕсли;
						
						Если Вид<>"-" Тогда
							ПрисвоеноНовоеЗначение=0;
							Если ФильтрЗагрузки(ТабРекв,НомА,Зн,ПрисвоеноНовоеЗначение)=0 Тогда
								Регистры=СписокРегистровПроведения.Получить(Вид);
								Таб_УдалитьСтроки(Регистры);
								Вид="-";//этот вид больше не загружаем
								//т.е. невыполнение условия загрузки ведет к
								//отмене загрузки только данног вида регистра
								Продолжить;
							КонецЕсли;
							Таб_УстановитьЗначение(Регистры,А,Наименование,Зн);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Кол=Кол+1;
			Если Вид<>"-" Тогда
				Таб_УстановитьЗначение(Регистры,А,"Признак_МОД",Число(Т.ПолучитьСтроку(Кол)));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры //ЗагрузитьДвиженияРегистров(ТабРег,Кол)




Процедура ЗагрузитьДвиженияЖурналаРасчетов(Док,Кол)
	Перем МАсПроверкиЖР[10];
	МАсПроверкиЖР[1]="Документ";
	МАсПроверкиЖР[2]="РодительскийДокумент";
	МАсПроверкиЖР[3]="Объект";
	МАсПроверкиЖР[4]="ВидРасч";
	МАсПроверкиЖР[5]="ДатаНачала";
	МАсПроверкиЖР[6]="ДатаОкончания";
	
	Номер="";
	Рез=Таб_НайтиЗначение(ТаблицаЗагрузки,"Журналы расчетов",Номер,"Наименование");
	Если Рез=0 Тогда
		Возврат;
	КонецЕсли;
	Таб=Таб_ПолучитьЗначение(ТаблицаЗагрузки,Номер,"Указатель");
	
	
	Для АТаб=1 По Таб_КоличествоСтрок(Таб) Цикл
		Кол=Кол+1;
		НомерВида=Число(Т.ПолучитьСтроку(Кол));
		Кол=Кол+1;
		КолДвижений=Число(Т.ПолучитьСтроку(Кол));
		ТабРекв=Таб_ПолучитьЗначение(Таб,АТаб,"Указатель");
		КолРеквизитов=Таб_КоличествоСтрок(ТабРекв);
		Вид=Таб_ПолучитьЗначение(Таб,АТаб,"Наименование");
		
		Если Вид="-" Тогда
			Кол=Кол+КолРеквизитов*КолДвижений;
			Продолжить;
		КонецЕсли;
		
		ЖР=СоздатьОбъект("ЖурналРасчетов."+Вид);
		ТекПериод=ЖР.ТекущийПериод();
		
		СписокЖР=СоздатьОбъект("СписокЗначений");
		
		ЖР.ВыбратьЗаписиПоДокументу(Док.ТекущийДокумент());
		Пока ЖР.ПолучитьЗапись()>0 Цикл
			ЖР.УдалитьЗапись();
			ЖР.ВыбратьЗаписиПоДокументу(Док.ТекущийДокумент());
		КонецЦикла;
		
		
		
		Для А=1 По КолДвижений Цикл
			
			//ищем реквизит со значением периода регистрации
			Кол2=Кол;
			Для АТабРекв=1 По КолРеквизитов Цикл//по реквизитам
				Наименование=Таб_ПолучитьЗначение(ТабРекв,АТабРекв,"Наименование");
				Кол2=Кол2+1;
				Если Наименование="#ПериодРегистрации" Тогда
					Зн=ПолучитьОбъект(Т.ПолучитьСтроку(Кол2));
					Период=ЖР.ПериодПоДате(Зн);
					Если Сокрлп(ТекПериод)<>Сокрлп(Период) Тогда
						Рез=ЖР.УстановитьТекущийПериод(Период,0);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			
			
			//остальные реквизиты
			ЖР.Новая();
			СписПроверкиЖР=СоздатьОбъект("СписокЗначений"); 
			Для АТабРекв=1 По КолРеквизитов Цикл//по реквизитам
				Наименование=Таб_ПолучитьЗначение(ТабРекв,АТабРекв,"Наименование");
				Кол=Кол+1;
				Если Наименование<>"-" Тогда
					Зн=ПолучитьОбъект(Т.ПолучитьСтроку(Кол));
					Если Лев(Наименование,1)="#" Тогда
						Если Наименование="#ПервичнаяЗапись" Тогда
							Если Число(Зн)>0 Тогда
								Если СписокЖР.РазмерСписка()>=Число(Зн) Тогда
									Если Число(Зн)>1 Тогда
										ЖР.УстановитьРеквизит("ПервичнаяЗапись",СписокЖР.ПолучитьЗначение(Число(Зн)));
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли Лев(Наименование,1)="@" Тогда //значит этот реквизит считается специальным образом
						//Обычное задание выражения
						Реквизит=Наименование;
						Атрибут=Зн;
						Стр=Сред(Реквизит,Найти(Реквизит,"=")+1);
						Шаблон("[Получить("+Стр+")]");Атрибут=глВыражение;
						Наименование=Сред(Реквизит,2,Найти(Реквизит,"=")-2);
						Зн=Атрибут;
						ЖР.УстановитьРеквизит(Наименование,Зн);//   УстановитьАтрибут
						СписПроверкиЖР.Установить(Наименование,Зн);
					Иначе
						ЖР.УстановитьРеквизит(Наименование,Зн);//   УстановитьАтрибут
						СписПроверкиЖР.Установить(Наименование,Зн);
					КонецЕсли;
					//					Сообщить(Наименование+" = "+Т.ПолучитьСтроку(Кол)+" = "+Зн);
				КонецЕсли;
			КонецЦикла;
			
			Беда=0;
			Для ААА=1 По 6 Цикл
				Наименование=МАсПроверкиЖР[ААА];
				Рез=ПустоеЗначение(СписПроверкиЖР.Получить(Наименование));
				Если Рез=1 Тогда
					Сообщить("При загрузке документа "+Док+" в движениях по ЖР "+Вид+" не загружен обязательный реквизит "+Наименование+" - загрузку данного движения пропускаем (объект записи "+СписПроверкиЖР.Получить("Объект")+")","I");
					ЗаписатьВЛогОшибку("При загрузке документа "+Док+" в движениях по ЖР "+Вид+" не загружен обязательный реквизит "+Наименование+" - загрузку данного движения пропускаем (объект записи "+СписПроверкиЖР.Получить("Объект")+")");
					СписокВторогоЦикла.ДобавитьЗначение(Док.IDD);//,Вид+"  "+Спр.Наименование+"  "+Спр_ИД);
				    Беда=1;
					//Прервать;
				КонецЕсли;
			КонецЦикла;
			
			
			Если Беда=0 Тогда
			ЖР.Записать();
			СписокЖР.ДобавитьЗначение(ЖР.ТекущаяЗапись());
			КонецЕсли;
			
			Период=ЖР.ТекущийПериод();
			Если Сокрлп(ТекПериод)<>Сокрлп(Период) Тогда
				ЖР.УстановитьТекущийПериод(ТекПериод,0);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры //ЗагрузитьДвиженияРегистров(ТабРег,Кол)

//_____________________________________________________________________________


Процедура ЗагрузитьДвиженияСправочников(Таб,ТабПравил,Кол)
	Если Таб=0 Тогда
		Возврат;
	КонецЕсли;
	Кол=Кол+1;
	КолДвижений=Число(Т.ПолучитьСтроку(Кол));
	Таб_УдалитьСтроки(ТаблицаСправочниковПроведения);
	Для А=1 По КолДвижений Цикл
		Кол=Кол+1;
		НомерВида=Число(Т.ПолучитьСтроку(Кол));
		Кол=Кол+1;
		Спр_ИД=Сокрлп(Т.ПолучитьСтроку(Кол));
		Кол=Кол+1;
		НомерРеквизита=Число(Т.ПолучитьСтроку(Кол));
		Кол=Кол+1;
		Зн=Т.ПолучитьСтроку(Кол);
		Кол=Кол+1;
		ДатаЗн=Т.ПолучитьСтроку(Кол);
		
		
		ТаблРекв=Таб_ПолучитьЗначение(Таб,НомерВида,"Указатель");
		Вид=Таб_ПолучитьЗначение(Таб,НомерВида,"Наименование");
		
		
		НомерВида2="";
		Таб_НайтиЗначение(ТабПравил,Вид,НомерВида2,"Наименование");
		Таб2=Таб_ПолучитьЗначение(ТабПравил,НомерВида2,"Указатель");
		Спис2=Таб2.Получить("Наименование");//список настоящих имен реквизитов, которые есть в нашей конф...
		СписС=Таб2.Получить("Синоним");//список синонимов настоящих реквизитов, которые есть в нашей конф...
		
		
		Если (Вид<>"-") И (Сокрлп(Вид)<>"") Тогда
			Спр=СоздатьОбъект("Справочник."+Вид);
			Найден=Спр.НайтиПоРеквизиту("IDD",Спр_ИД,1);
			Элемент=Спр.ТекущийЭлемент();
			Если Найден=0 Тогда
				М_Сообщить("При загрузке движений справочников  не найден справочник "+Вид+" с IDD "+Спр_ИД);
				ЗаписатьВЛогОшибку("При загрузке движений справочников  не найден справочник "+Вид+" с IDD "+Спр_ИД);
				Продолжить;
			КонецЕсли;
			
			ИмяРеквизита=Таб_ПолучитьЗначение(ТаблРекв,НомерРеквизита,"Наименование");
			История=Таб_ПолучитьЗначение(ТаблРекв,НомерРеквизита,"История");
			
			Рез=СписС.НайтиЗначение(ИмяРеквизита);
			Если Рез=0 Тогда
				Продолжить;
			КонецЕсли;
			ИмяРеквизита=Спис2.ПолучитьЗначение(Рез);
			
			
			Если (ИмяРеквизита<>"-")И(История=ДАДА) Тогда
				НомСтр=Таб_НоваяСтрока(ТаблицаСправочниковПроведения);
				Таб_УстановитьЗначение(ТаблицаСправочниковПроведения,НомСтр,"Справочник",Элемент);
				Таб_УстановитьЗначение(ТаблицаСправочниковПроведения,НомСтр,"Наименование",ИмяРеквизита);
				Таб_УстановитьЗначение(ТаблицаСправочниковПроведения,НомСтр,"Значение",ПолучитьОбъект(Зн));
				Таб_УстановитьЗначение(ТаблицаСправочниковПроведения,НомСтр,"ДатаУст",ДатаЗн);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры //ЗагрузитьДвиженияСправочников

//_____________________________________________________________________________
Процедура ЗагрузитьДвиженияОпераций(ТабОпер,СписокОпер,ТабПроводок,Док,Кол,СписЗамены)
	Если Метаданные.Документ(Док.Вид()).БухгалтерскийУчет=0 Тогда
		Возврат;
	КонецЕсли;
	Если ТабОпер=0 Тогда
		Возврат;
	КонецЕсли;
	Кол=Кол+1;
	
	ТабПроводок.УдалитьСтроки();
	
	Номер="";
	Рез=Таб_НайтиЗначение(ТабОпер,"Атрибуты операции",Номер,"Наименование");
	Если Рез=1 Тогда
		Таб2=Таб_ПолучитьЗначение(ТабОпер,Номер,"Указатель");
		Для КолТаб2=1 По Таб_КоличествоСтрок(Таб2) Цикл
			Наименование=Таб_ПолучитьЗначение(Таб2,КолТаб2,"Наименование");
			Зн=Т.ПолучитьСтроку(Кол);
			Атрибут=ПолучитьОбъект(Зн);
			
			Если Лев(Наименование,1)="@" Тогда //значит этот реквизит считается специальным образом
				//Обычное задание выражения
				Реквизит=Наименование;
				Атрибут=Зн;
				Стр=Сред(Реквизит,Найти(Реквизит,"=")+1);
				Шаблон("[Получить("+Стр+")]");Атрибут=глВыражение;
				Наименование=Сред(Реквизит,2,Найти(Реквизит,"=")-2);
			КонецЕсли;
			
			ПрисвоеноНовоеЗначение=0;
			Если ФильтрЗагрузки(Таб2,КолТаб2,Атрибут,ПрисвоеноНовоеЗначение)=0 Тогда
				Возврат ;//далее не загружаем (....)
			КонецЕсли;
			СписокОпер.УстановитьЗначение(КолТаб2,Атрибут,Наименование,1);
			Кол=Кол+1;
		КонецЦикла;
	КонецЕсли;
	
	
	БылаПроводка=0;
	ВсегоСуммаПроводки=0;
	СуммаПроводки=0;
	Номер="";
	Рез=Таб_НайтиЗначение(ТабОпер,"Атрибуты проводки",Номер,"Наименование");
	Если Рез=1 Тогда
		Таб2=Таб_ПолучитьЗначение(ТабОпер,Номер,"Указатель");
		КолПроводок=Число(Т.ПолучитьСтроку(Кол));
		Кол=Кол+1;
		Для А=1 По КолПроводок Цикл
			ТабПроводок.НоваяСтрока();
			НомерПроводки=ТабПроводок.КоличествоСтрок();
			Для КолТаб2=1 По Таб_КоличествоСтрок(Таб2) Цикл
				Зн=Т.ПолучитьСтроку(Кол);
				Атрибут=ПолучитьОбъект(Зн);
				
				Реквизит=Таб_ПолучитьЗначение(Таб2,КолТаб2,"Наименование");	
				Если Лев(Реквизит,1)="@" Тогда //значит этот реквизит считается специальным образом
					//Обычное задание выражения
					Стр=Сред(Реквизит,Найти(Реквизит,"=")+1);
					Шаблон("[Получить("+Стр+")]");Атрибут=глВыражение;
				КонецЕсли;
				
				
				ПрисвоеноНовоеЗначение=0;
				Если ФильтрЗагрузки(Таб2,КолТаб2,Атрибут,ПрисвоеноНовоеЗначение)=0 Тогда
					ТабПроводок.УдалитьСтроки();
					Возврат; // пока ...
				КонецЕсли;
				ТабПроводок.УстановитьЗначение(НомерПроводки,КолТаб2,Атрибут);
				Кол=Кол+1;
			КонецЦикла;
			
			
			
			//Подставляем значения субконто из плана счетов по умолчанию
			КолСчета=0;
			ВалСчета=0;
			ЗабалСчет=0;
			ВсегоСчетов=0;
			Счет="";
			Для Ц=1 По 2 Цикл
				Если Ц=1 Тогда
					ДебКред="Дебет";
				Иначе
					ДебКред="Кредит";
				КонецЕсли;    
				Попытка
					Счет=ТабПроводок.ПолучитьЗначение(НомерПроводки,ДебКред+"_Счет");
				Исключение
					Продолжить;
				КонецПопытки;
				Если ТипЗначения(Счет)=15 Тогда //Счет
					КолСчета=КолСчета+Счет.Количественный;
					ВалСчета=ВалСчета+Счет.Валютный;
					ЗабалСчет=ЗабалСчет+Счет.Забалансовый;
					ВсегоСчетов=ВсегоСчетов+1;
				КонецЕсли;
				
				
				Для АА=1 По 5 Цикл
					ИмяКолонки=ДебКред+"_Субконто"+АА;
					Попытка
						Имя=Счет.ВидСубконто(АА,).Идентификатор();
						Рез=СписЗамены.Получить(ЗначениеВСтроку(Счет)+Имя);
						Если ПустоеЗначение(Рез)<>1 Тогда
							ТабПроводок.УстановитьЗначение(НомерПроводки,ИмяКолонки,Рез);
						КонецЕсли; 
					Исключение //нет такой колонки (т.к. разные конфигурации)
						ТабПроводок.ВставитьКолонку(ИмяКолонки,ТабПроводок.КоличествоКолонок());
						ТабПроводок.УстановитьЗначение(НомерПроводки,ИмяКолонки,Рез);
					КонецПопытки;
				КонецЦикла;
			КонецЦикла;
			
			Попытка
				ТекСумма=Число(ТабПроводок.Сумма);
			Исключение
				ТекСумма=0;
			КонецПопытки;
			//хитрый алгоритм для определения - является ли текущая проводка сложной
			Если (ЗабалСчет=0)И(ВсегоСчетов=1) И (БылаПроводка=1)И(Абс(СуммаПроводки)<Абс(ВсегоСуммаПроводки)) Тогда
				ТабПроводок.ТипПроводки=0;//новая корреспонденция
				СуммаПроводки=СуммаПроводки+ТекСумма;
			Иначе
				ТабПроводок.ТипПроводки=1;//новая проводка
				БылаПроводка=1;
				ВсегоСуммаПроводки=ТекСумма;
				СуммаПроводки=0;
			КонецЕсли;
			
			//проверяем на корректность проводок 
			// - если счета забалансовый и балансовый, то разбиваем на две проводки
			// первая проводка - забалансовая, вторая балансовая и счет 00
			// - если счета не количественные, то количество = 0
			// - если счета не валютные, то валютная сумма = 0
			
			Если КолСчета=0 Тогда
				Попытка
					ТабПроводок.Количество=0;	
				Исключение
				КонецПопытки;
			КонецЕсли;
			Если ВалСчета=0 Тогда
				Попытка
					ТабПроводок.ВалСумма=0;	
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			Если ВсегоСчетов=2 Тогда
				Если ЗабалСчет=1 Тогда
					//надо разбить проводки
					ДебетСчет=ТабПроводок.ПолучитьЗначение(НомерПроводки,"Дебет_Счет");
					КредитСчет=ТабПроводок.ПолучитьЗначение(НомерПроводки,"Кредит_Счет");
					Если ДебетСчет.Забалансовый=1 Тогда
						Счет=ДебетСчет;
						ДебКред="Дебет";
						ДрДебКред="Кредит";
					Иначе
						Счет=КредитСчет;
						ДебКред="Кредит";
						ДрДебКред="Дебет";
					КонецЕсли;
					
					//копируем проводку
					ТабПроводок.НоваяСтрока();
					Для КопА=1 По ТабПроводок.КоличествоКолонок() Цикл
						Зн=ТабПроводок.ПолучитьЗначение(НомерПроводки,КопА);
						ТабПроводок.УстановитьЗначение(НомерПроводки+1,КопА,Зн);
					КонецЦикла;
					
					ТабПроводок.УстановитьЗначение(НомерПроводки,ДебКред+"_Счет",СчетПоКоду("00"));
					ТабПроводок.УстановитьЗначение(НомерПроводки+1,ДрДебКред+"_Счет","");
					
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры 

//_____________________________________________________________________________


Процедура ЗаполнитьСписокВидовСпр(ТабПравил)
	//заполняем список СписокВидовСпр - это список видов справочников пришедших к нам из
	//периферийной базы в порядке следования в описании шапки, но виды справочников перифериных
	//баз заменены на их аналоги в нашей базе
	Номер="";
	Если Таб_НайтиЗначение(ТаблицаЗагрузки,"Справочники",Номер,"Наименование")=1 Тогда
		Таб=Таб_ПолучитьЗначение(ТаблицаЗагрузки,Номер,"Указатель");
		СписокВидовСпр2=Таб.Получить("Наименование");
		СписокВидовСпр=СоздатьОбъект("СписокЗначений");
		Для А=1 По 	СписокВидовСпр2.РазмерСписка() Цикл
			Вид=СписокВидовСпр2.ПолучитьЗначение(А);
			НомерВида2="";
			Рез=Таб_НайтиЗначение(ТабПравил,Вид,НомерВида2,"Синоним");
			Если Рез=1 Тогда
				Вид=Таб_ПолучитьЗначение(ТабПравил,НомерВида2,"Наименование");
			Иначе
				Вид="-";
			КонецЕсли;
			СписокВидовСпр.ДобавитьЗначение(Вид);
		КонецЦикла;
	Иначе
		СписокВидовСпр=0;
	КонецЕсли;
КонецПроцедуры //ЗаполнитьСписокВидовСпр

//_____________________________________________________________________________
//Собираем всю информацию об изменениях в файле пакетов
//берем все изменения сделаные пользователем между сеансами обмена,
//если эти изменения уже отправили в пакетах, но подтверждение еще 
//не пришло,то они тоже учитываются.
//Т.о. изменения берем из файла tran1 и частично из пакетного файла tran2
Процедура ЗаполнитьСписокИзмененныхОбъектов(ВыгрБаза,СписокИзмененныхОбъектов,ПриоритетЗагрузки)
	Перем БДПакеты;
	Если ПустоеЗначение(ВыгрБаза)=0 Тогда
		Если ПриоритетностьБазы=1 Тогда
			ПриоритетЗагрузки=0;//загружаем все объекты независимо от того изменяли ли мы их сами
		Иначе
			Если ОткрытьФайлМОДПоИмени(БДПакеты,"Пакеты","_tran2")=0 Тогда //это открывается временный файл !!!
				Предупреждение("Ошибка открытия базы ""Пакеты"" - возможно она занята другим пользователем",10);
				Возврат ;
			КонецЕсли;
			БДПакеты.ТекущийИндекс("IDDDB");
			Для А=ПолучитьНомерПодтвержденногоПакетаЗагрузки(ВыгрБаза) По МаксНомерПакетаВыгрузки Цикл
				АА=А;
				Если А=МаксНомерПакетаВыгрузки Тогда
				   АА="_"; 
				КонецЕсли;
				Ключ=Прав("0000000"+Сокрп(ВыгрБаза.IDD),7)+АА;
				Рез=БДПакеты.Найти(Ключ);
				Если Рез=1 Тогда
					Пока Сокрп(БДПакеты.IDDDB)=Ключ Цикл//т.е. проходим по всему участку
						СписокИзмененныхОбъектов.ДобавитьЗначение(БДПакеты.IDD);
						БДПакеты.Следующая();
						Если БДПакеты.ВКонце()=1 Тогда     //т.к. может этот участок был последним ...
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			БДПакеты.ЗакрытьФайл();
			
			Если ОткрытьФайлМОДПоИмени(БДПакеты,"Изменения","_tran1")=0 Тогда //это открывается временный файл !!!
				Предупреждение("Ошибка открытия базы ""Изменения"" - возможно она занята другим пользователем",10);
				Возврат ;
			КонецЕсли;
			БДПакеты.Первая();
			Пока БДПакеты.ВКонце()=0 Цикл
				СписокИзмененныхОбъектов.ДобавитьЗначение(БДПакеты.IDD);
				БДПакеты.Следующая();
			КонецЦикла;
			БДПакеты.ЗакрытьФайл();
			
			ПриоритетЗагрузки=1;//не загружаем т.к. мы сами их изменяли
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ЗаполнитьСписок


//_____________________________________________________________________________
Процедура ЗагрузитьТело(ВыгрБаза,Кол,НомерЦикла,НомерПакета=1)
	Перем Док,БДПакеты,ПриоритетЗагрузки,СписокИзмененныхОбъектов;
	Попытка
	ИДДБазы=ВыгрБаза.IDD;
	Исключение
	ИДДБазы="1234567";
	КонецПопытки;
	Если Т.КоличествоСтрок()<=Кол Тогда
		Возврат;
	КонецЕсли;
	М_Состояние("Загружаем данные из пакета...");
	
	
	
	СписокИзмененныхОбъектов=СоздатьОбъект("СписокЗначений");
	ЗаполнитьСписокИзмененныхОбъектов(ВыгрБаза,СписокИзмененныхОбъектов,ПриоритетЗагрузки);
	
	
	НачалоДанных=Кол;
	ПроведениеПоАлгоритмуМОД=0;
	ТаблицаСправочниковПроведения=ПолучитьОбъект_ТаблицаЗначений();
	СписокРегистровПроведения=СоздатьОбъект("СписокЗначений");
	
	
	
	//Для оптимизации заранее позиционируемся на таблицу справочников , документов и регистров
	ТабРег=0;ТабСпр=0;ТабДок=0;ТабПравилСпр=0;ТабПравилРег=0;ТабПравилДок=0;ТабКонстант=0;ТабПланаСчетов=0;
	Номер="";
	Рез=Таб_НайтиЗначение(ТаблицаЗагрузки,"Справочники",Номер,"Наименование");
	Если Рез=1 Тогда
		ТабСпр=Таб_ПолучитьЗначение(ТаблицаЗагрузки,Номер,"Указатель");
		Таб_ВставитьКолонку(ТаблицаСправочниковПроведения,"Справочник");
		Таб_ВставитьКолонку(ТаблицаСправочниковПроведения,"Наименование");
		Таб_ВставитьКолонку(ТаблицаСправочниковПроведения,"Значение");
		Таб_ВставитьКолонку(ТаблицаСправочниковПроведения,"ДатаУст");
	КонецЕсли;
	
	
	Номер="";
	Рез=Таб_НайтиЗначение(ТаблицаЗагрузки,"Константы",Номер,"Наименование");
	Если Рез=1 Тогда
		ТабКонстант=Таб_ПолучитьЗначение(ТаблицаЗагрузки,Номер,"Указатель");
	КонецЕсли;
	
	
	Номер="";
	Рез=Таб_НайтиЗначение(ТаблицаЗагрузки,"Планы счетов",Номер,"Наименование");
	Если Рез=1 Тогда
		ТабПланаСчетов=Таб_ПолучитьЗначение(ТаблицаЗагрузки,Номер,"Указатель");
	КонецЕсли;
	
	Номер="";
	Рез=Таб_НайтиЗначение(ТаблицаПравил,"Справочники",Номер,"Наименование");
	Если Рез=1 Тогда
		ТабПравилСпр=Таб_ПолучитьЗначение(ТаблицаПравил,Номер,"Указатель");
	КонецЕсли;
	
	
	Номер="";
	Рез=Таб_НайтиЗначение(ТаблицаЗагрузки,"Документы",Номер,"Наименование");
	Если Рез=1 Тогда
		ТабДок=Таб_ПолучитьЗначение(ТаблицаЗагрузки,Номер,"Указатель");
	КонецЕсли;
	
	Номер="";
	Рез=Таб_НайтиЗначение(ТаблицаПравил,"Документы",Номер,"Наименование");
	Если Рез=1 Тогда
		ТабПравилДок=Таб_ПолучитьЗначение(ТаблицаПравил,Номер,"Указатель");
	КонецЕсли;
	
	
	
	
	Номер="";
	Рез=Таб_НайтиЗначение(ТаблицаЗагрузки,"Регистры",Номер,"Наименование");
	Если Рез=1 Тогда
		ТабРег=Таб_ПолучитьЗначение(ТаблицаЗагрузки,Номер,"Указатель");
		//формируем структуру таблиц движений регистров !!
		Для АРег=1 По Таб_КоличествоСтрок(ТабРег) Цикл//по видам регистров
			Вид=Таб_ПолучитьЗначение(ТабРег,АРег,"Наименование");//Вид=ТабРег.Наименование;
			Если Вид<>"-" Тогда
				Таб3=Таб_ПолучитьЗначение(ТабРег,АРег,"Указатель");//Таб3=ТабРег.Указатель;
				ТабДвижений=ПолучитьОбъект_ТаблицаЗначений();
				СписокРегистровПроведения.ДобавитьЗначение(ТабДвижений,Вид);
				Для А3=1 По Таб_КоличествоСтрок(Таб3) Цикл//по ресурсам, измер, рекв
					ТабРекв=Таб_ПолучитьЗначение(Таб3,А3,"Указатель");//ТабРекв=Таб3.Указатель;
					
					Для АРекв=1 По Таб_КоличествоСтрок(ТабРекв) Цикл//по ресурсам, измер, рекв
						Наименование=Таб_ПолучитьЗначение(ТабРекв,АРекв,"Наименование");//ТабРекв=Таб3.Указатель;
						Если Наименование<>"-" Тогда
							Если Лев(Наименование,1)="#" Тогда 
								Если Наименование="#НомерСтроки" Тогда
									Наименование="НомерСтроки";
								Иначе
									Продолжить;
								КонецЕсли;
							ИначеЕсли Лев(Наименование,1)="@" Тогда //значит этот реквизит считается специальным образом
								Реквизит=Наименование;
								Наименование=Сред(Реквизит,2,Найти(Реквизит,"=")-2);
							КонецЕсли;
							Таб_ВставитьКолонку(ТабДвижений,Наименование);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				Таб_ВставитьКолонку(ТабДвижений,"Признак_МОД");//1- приход 0 - расход
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	
	//_____________________________________________________________________________
	//проходим по всей таблице загрузки регистров и в случае обнаружения дублей присваиваем другие наименования
	Таб=ТабРег;
	Спис=СоздатьОбъект("СписокЗначений");
	Для АТаб=1 По Таб_КоличествоСтрок(Таб) Цикл
		Вид=Таб_ПолучитьЗначение(Таб,АТаб,"Наименование");
		Рез=Спис.НайтиЗначение(Вид);
		Если Рез=0 Тогда
			Спис.ДобавитьЗначение(Вид,"");
		Иначе
			Стр="";
			Спис.ПолучитьЗначение(Рез,Стр);
			Стр=Стр+"#";
			Таб_УстановитьЗначение(Таб,АТаб,"Наименование",""+Вид+Стр);
		КонецЕсли;
	КонецЦикла;
	
	//аналогично по таблице регистров
	Спис=СоздатьОбъект("СписокЗначений");
	Для А=1 По СписокРегистровПроведения.РазмерСписка() Цикл
		Вид="";
		Зн=СписокРегистровПроведения.ПолучитьЗначение(А,Вид);
		Рез=Спис.НайтиЗначение(Вид);
		Если Рез=0 Тогда
			Спис.ДобавитьЗначение(Вид,"");
		Иначе
			Стр="";
			Спис.ПолучитьЗначение(Рез,Стр);
			Стр=Стр+"#";
			СписокРегистровПроведения.УстановитьЗначение(А,Зн,""+Вид+Стр);
		КонецЕсли;
	КонецЦикла;
	//_____________________________________________________________________________
	
	
	
	
	
	
	
	
	
	
	
	
	
	СписокОперацийПроведения=0;
	СписокОпер=0;
	ТабПроводок=0;
	
	//предварительное формирование структуры списка операций проведения
	ТабОпер=0;
	Если ДокументОперации<>"" Тогда
		СписокОперацийПроведения=СоздатьОбъект("СписокЗначений");
		СписокОпер=СоздатьОбъект("СписокЗначений");
		ТабПроводок=СоздатьОбъект("ТаблицаЗначений");
		Номер="";
		Рез=Таб_НайтиЗначение(ТаблицаЗагрузки,"Операции",Номер,"Наименование");
		Если Рез=1 Тогда
			СписокОперацийПроведения.ДобавитьЗначение(СписокОпер,"Атрибуты операции");
			СписокОперацийПроведения.ДобавитьЗначение(ТабПроводок,"Атрибуты проводки");
			
			ТабОпер=Таб_ПолучитьЗначение(ТаблицаЗагрузки,Номер,"Указатель");
			Номер="";
			Рез=Таб_НайтиЗначение(ТабОпер,"Атрибуты операции",Номер,"Наименование");
			Если Рез=1 Тогда
				Таб2=Таб_ПолучитьЗначение(ТабОпер,Номер,"Указатель");
				Для КолТаб2=1 По Таб_КоличествоСтрок(Таб2) Цикл
					Наименование=Таб_ПолучитьЗначение(Таб2,КолТаб2,"Наименование");
					Если Лев(Наименование,1)="@" Тогда //значит этот реквизит считается специальным образом
						Реквизит=Наименование;
						Наименование=Сред(Реквизит,2,Найти(Реквизит,"=")-2);
					КонецЕсли;
					СписокОпер.ДобавитьЗначение("",Наименование);
				КонецЦикла;
			КонецЕсли;
			
			
			Номер="";
			Рез=Таб_НайтиЗначение(ТабОпер,"Атрибуты проводки",Номер,"Наименование");
			Если Рез=1 Тогда
				Таб2=Таб_ПолучитьЗначение(ТабОпер,Номер,"Указатель");
				Для КолТаб2=1 По Таб_КоличествоСтрок(Таб2) Цикл
					Наименование=Таб_ПолучитьЗначение(Таб2,КолТаб2,"Наименование");
					Если Лев(Наименование,1)="@" Тогда //значит этот реквизит считается специальным образом
						Реквизит=Наименование;
						Наименование=Сред(Реквизит,2,Найти(Реквизит,"=")-2);
					КонецЕсли;
					
					Наименование=СтрЗаменить(Наименование,".","_");
					Наименование=СтрЗаменить(Наименование,"-","_");
					Наименование=СтрЗаменить(Наименование,"#","_");
					ТабПроводок.ВставитьКолонку(Наименование);
				КонецЦикла;
				ТабПроводок.ВставитьКолонку("ТипПроводки");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	
	СписокОбъектовЗамены=СоздатьОбъект("СписокЗначений");
	СписСчетов=СоздатьОбъект("СписокЗначений");
	СписЗамены=СоздатьОбъект("СписокЗначений");
	//_____________________________________________________________________________
	//работа Менеджера в упрощенном режиме 
	Если ПустоеЗначение(ВыгрБаза)=0 Тогда
		Спр=СоздатьОбъект("Справочник.ПравилаЗагрузки");
		СписокВидовСпр=СоздатьОбъект("СписокЗначений");
		Спр.ИспользоватьВладельца(ПолучитьВладельцаПравил(ВыгрБаза));
		Рез=Спр.ВыбратьЭлементы();
		Спр=0;
	Иначе
		Рез=1;	
	КонецЕсли;
	Если Рез=0 Тогда
		глМОДБылФильтрВыгрузки=0;
		Для А=1 по Метаданные.Справочник() Цикл
			СписокВидовСпр.ДобавитьЗначение(Метаданные.Справочник(А).Идентификатор);
		КонецЦикла;
	Иначе	
		
		
		
		
		
		
		//------------------------------------------------------------------------------------------
		//подготавливаем список соответствий перечислений
		//в качестве значения будет стоять перичисление нашей базы,
		//а в качестве строкого представления внутреннее строковое значение перечисления в периферийной базе
		Номер="";Вкл="";
		Рез=Таб_НайтиЗначение(ТаблицаПравил,"Перечисления",Номер,"Наименование");
		Если Рез=1 Тогда
			ТабПеречислений=Таб_ПолучитьЗначение(ТаблицаПравил,Номер,"Указатель");
			Для А=1 По Таб_КоличествоСтрок(ТабПеречислений) Цикл//по видам перечислений
				Имя=Таб_ПолучитьЗначение(ТабПеречислений,А,"Наименование");
				Синоним=Таб_ПолучитьЗначение(ТабПеречислений,А,"Синоним");
				ТабЗначений=Таб_ПолучитьЗначение(ТабПеречислений,А,"Указатель");
				Для АА=1 По Таб_КоличествоСтрок(ТабЗначений) Цикл//по значениям перечислений
					Если глМОДБылФильтрЗагрузки=1 Тогда
						Вкл=Таб_ПолучитьЗначение(ТабЗначений,АА,"ВклЗначение");
					КонецЕсли;
					
					ИмяЗначения=Таб_ПолучитьЗначение(ТабЗначений,АА,"Наименование");
					СинонимЗначения=Таб_ПолучитьЗначение(ТабЗначений,АА,"Синоним");
					
					Если Вкл=ДаДА Тогда
						//ПЕРЕЧИСЛЕНИЕ -> ОБЪЕКТ
						Зн=Таб_ПолучитьЗначение(ТабЗначений,АА,"Значение");
						УНас=ЗначениеВСтроку(Зн);
					Иначе
						//ПЕРЕЧИСЛЕНИЕ -> ПЕРЕЧИСЛЕНИЕ
						УНас="{""Перечисление"","""+Имя+""","""+ИмяЗначения+"""}";
					КонецЕсли;
					
					НеУНАС="{""Перечисление"","""+Синоним+""","""+СинонимЗначения+"""}";
					СписокОбъектовЗамены.ДобавитьЗначение(ЗначениеИзСтроки(УНас),НеУНас);//т.е. если ошибка в правилах - то оставляем на совести пользователя !!
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		//------------------------------------------------------------------------------------------
		
		
		
		
		
		
		//------------------------------------------------------------------------------------------
		//подготавливаем список соответствий видов расчетов и календарей
		//в качестве значения будет стоять объект нашей базы,
		//а в качестве строкого представления внутреннее строковое значение объекта в периферийной базе
		Номер="";Вкл="";
		Рез=Таб_НайтиЗначение(ТаблицаПравил,"Виды расчетов",Номер,"Наименование");
		Если Рез=1 Тогда
			ТабЗначений=Таб_ПолучитьЗначение(ТаблицаПравил,Номер,"Указатель");
			Для АА=1 По Таб_КоличествоСтрок(ТабЗначений) Цикл//по значениям перечислений
				ИмяЗначения=Таб_ПолучитьЗначение(ТабЗначений,АА,"Наименование");
				СинонимЗначения=Таб_ПолучитьЗначение(ТабЗначений,АА,"Синоним");
				//СОПОСТАВЛЕНИЕ:
				УНас="{""ВидРасчета"","""+ИмяЗначения+"""}";
				НеУНАС="{""ВидРасчета"","""+СинонимЗначения+"""}";
				СписокОбъектовЗамены.ДобавитьЗначение(ЗначениеИзСтроки(УНас),НеУНас);//т.е. если ошибка в правилах - то оставляем на совести пользователя !!
				//				Сообщить("УНас="+УНас+"   НеУНАС="+НеУНАС+"  Доб="+ЗначениеИзСтроки(УНас));
			КонецЦикла;
		КонецЕсли;
		//------------------------------------------------------------------------------------------
		
		
		//------------------------------------------------------------------------------------------
		//аналогично Календари
		Номер="";Вкл="";
		Рез=Таб_НайтиЗначение(ТаблицаПравил,"Календари",Номер,"Наименование");
		Если Рез=1 Тогда
			ТабЗначений=Таб_ПолучитьЗначение(ТаблицаПравил,Номер,"Указатель");
			Для АА=1 По Таб_КоличествоСтрок(ТабЗначений) Цикл//по значениям перечислений
				ИмяЗначения=Таб_ПолучитьЗначение(ТабЗначений,АА,"Наименование");
				СинонимЗначения=Таб_ПолучитьЗначение(ТабЗначений,АА,"Синоним");
				//СОПОСТАВЛЕНИЕ:
				УНас="{""Календарь"","""+ИмяЗначения+"""}";
				НеУНАС="{""Календарь"","""+СинонимЗначения+"""}";
				СписокОбъектовЗамены.ДобавитьЗначение(ЗначениеИзСтроки(УНас),НеУНас);//т.е. если ошибка в правилах - то оставляем на совести пользователя !!
				//				Сообщить("УНас="+УНас+"   НеУНАС="+НеУНАС+"  Доб="+ЗначениеИзСтроки(УНас));
			КонецЦикла;
		КонецЕсли;
		//------------------------------------------------------------------------------------------
		
		
		
		
		ЗаполнитьСписокВидовСпр(ТабПравилСпр);
		
		
		//------------------------------------------------------------------------------------------
		//подготавливаем список соответствий плана счетов
		//в качестве значения будет стоять счет нашей базы,
		//а в качестве строкого представления внутреннее строковое значение счета в периферийной базе
		Номер="";
		Рез=Таб_НайтиЗначение(ТаблицаПравил,"Планы счетов",Номер,"Наименование");
		//{"Счет","Новый","41"}
		
		Если Рез=1 Тогда
			ТабПланСчетов=Таб_ПолучитьЗначение(ТаблицаПравил,Номер,"Указатель");
			Для А=1 По Таб_КоличествоСтрок(ТабПланСчетов) Цикл//по видам план-счетов
				Имя=Таб_ПолучитьЗначение(ТабПланСчетов,А,"Наименование");
				Синоним=Таб_ПолучитьЗначение(ТабПланСчетов,А,"Синоним");
				ТабСчетов=Таб_ПолучитьЗначение(ТабПланСчетов,А,"Указатель");
				Для АА=1 По Таб_КоличествоСтрок(ТабСчетов) Цикл//по счетам
					ИмяЗначения=Таб_ПолучитьЗначение(ТабСчетов,АА,"Наименование");
					СинонимЗначения=Таб_ПолучитьЗначение(ТабСчетов,АА,"Синоним");
					
					УНас="{""Счет"","""+Имя+""","""+ИмяЗначения+"""}";
					НеУНАС="{""Счет"","""+Синоним+""","""+СинонимЗначения+"""}";
					СписСчетов.ДобавитьЗначение(ЗначениеИзСтроки(УНас),НеУНас);//т.е. если ошибка в правилах - то оставляем на совести пользователя !!
					
					//зайдем внутрь и посмотрим надо ли заполнять список замены субконто на значения
					Если глМОДБылФильтрЗагрузки=1 Тогда
						ТабСубконто=Таб_ПолучитьЗначение(ТабСчетов,АА,"Указатель");
						Для ААА=1 По Таб_КоличествоСтрок(ТабСубконто) Цикл//по счетам
							ВклЗначение=Таб_ПолучитьЗначение(ТабСубконто,ААА,"ВклЗначение");
							Если ВклЗначение=ДаДа Тогда
								Наименование=Таб_ПолучитьЗначение(ТабСубконто,ААА,"Наименование");
								Значение=Таб_ПолучитьЗначение(ТабСубконто,ААА,"Значение");
								СписЗамены.ДобавитьЗначение(Значение,УНас+Наименование);
							КонецЕсли;
						КонецЦикла;   
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
	
	
	
	//------------------------------------------------------------------------------------------
	
	ЦиклЗагрузки=НомерЦикла;
	Прогрессор(0,Т.КоличествоСтрок(),НачалоДанных,"Данные пакета № "+НомерПакета+" ("+"цикл "+НомерЦикла+")");//************ прогрессор
	Кол=НачалоДанных;
	КолСлед=НачалоДанных;
	Док=0;
	Пока Кол<Т.КоличествоСтрок() Цикл
		Прогрессор(Кол);//*********** прогрессор !!
		
		//*************** позиционируемся !!!!!!
		Кол=КолСлед;
		Если Кол>=Т.КоличествоСтрок() Тогда   Прервать;		КонецЕсли; //<---------- выход
		Стр=Т.ПолучитьСтроку(Кол);
		Тип=Число(Стр);
		КолСлед=Число(Прав(Стр,10));// позиция след-го объекта т.е. если встретится неизвестный объект, то мы его просто пропустим
		
		//************ для второго и более циклов загружаем только нужные объекты
		Если ЦиклЗагрузки>1 Тогда
			Если (Тип=11)ИЛИ(Тип=12) Тогда
				Если СписокВторогоЦикла2.НайтиЗначение(Сокрлп(Т.ПолучитьСтроку(Кол+2)))=0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//загружаем данные
		Если Тип=11 Тогда//справочник
			ЗагрузитьЭлементСправочника(ВыгрБаза,ТабСпр,ТабПравилСпр,Кол,СписокИзмененныхОбъектов,ПриоритетЗагрузки);
		ИначеЕсли Тип=12 Тогда//документ
			Док=0;//удаляем ссылку на предыдущий документ
			Док=ЗагрузитьДокумент(ВыгрБаза,ТабДок,ТабПравилДок,Кол,СписокИзмененныхОбъектов,ПриоритетЗагрузки,ЦиклЗагрузки);
			Если ТипЗначения(Док)=12 Тогда
				Тип=98;
				Пока (Тип>95)И(Тип<=99) Цикл
					
					//*************** позиционируемся !!!!!!
					Кол=КолСлед;
					Если Кол>=Т.КоличествоСтрок() Тогда   Прервать;		КонецЕсли; //<---------- выход
					Стр=Т.ПолучитьСтроку(Кол);
					Тип=Число(Стр);
					КолСлед=Число(Прав(Стр,10));// позиция след-го объекта т.е. если встретится неизвестный объект, то мы его просто пропустим
					
					Если Тип=98 Тогда //движения регистров
						ЗагрузитьДвиженияРегистров(ТабРег,Кол);
					ИначеЕсли Тип=97 Тогда//периодические реквизиты справочников,установленные документом
						ЗагрузитьДвиженияСправочников(ТабСпр,ТабПравилСпр,Кол);
					ИначеЕсли Тип=96 Тогда//проводки
						ЗагрузитьДвиженияОпераций(ТабОпер,СписокОпер,ТабПроводок,Док,Кол,СписЗамены);
					ИначеЕсли Тип=99 Тогда//журналы расчетов
						ЗагрузитьДвиженияЖурналаРасчетов(Док,Кол);
					КонецЕсли;//тип объекта
				КонецЦикла;
				КолСлед=Кол;
				
				ОшибкаПроведения=ПровестиДокумент(Док,1);//проводим документ с загрузкой  движений
				
				//******************************************************************
				//Алгортим Успеха Начало
				//
				ДобавитьВЖурналРегистрации(Док.ТекущийДокумент(),0,,ОшибкаПроведения);
				//
				//Алгортим Успеха Конец
				//******************************************************************		

			КонецЕсли;
		ИначеЕсли Тип=95 Тогда//константа
			ЗагрузитьКонстанту(ВыгрБаза,ТабКонстант,Кол,СписокИзмененныхОбъектов,ПриоритетЗагрузки);
		ИначеЕсли Тип=94 Тогда//счет
			ЗагрузитьСчет(ВыгрБаза,ТабПланаСчетов,Кол,СписокИзмененныхОбъектов,ПриоритетЗагрузки);
		ИначеЕсли Тип<90 Тогда
			Сообщить("Ошибка загрузки пакета "+НомерПакета+" в цикле "+НомерЦикла+" при загрузке из базы "+ВыгрБаза,"!");
			Сообщить("Неопознанный загружаемый объект , тип = "+тип+" строка пакета = "+Кол,"I");
			Сообщить("Загрузка из данного пакета прервана","I");  
			ЗаписатьВЛогОшибку("Ошибка загрузки пакета "+НомерПакета+" в цикле "+НомерЦикла+" при загрузке из базы "+ВыгрБаза);
			ЗаписатьВЛогОшибку("Неопознанный загружаемый объект , тип = "+тип+" строка пакета = "+Кол);
			ЗаписатьВЛогОшибку("Загрузка из данного пакета прервана");
			Возврат;
		КонецЕсли;//тип объекта
	КонецЦикла;//по всему тексту
	
	ПроведениеПоАлгоритмуМОД=0;
	Прогрессор(0);//прогрессор
КонецПроцедуры //ЗагрузитьТело

//_____________________________________________________________________________

















Процедура ДобавитьОдинУдаленный(БДИзменения,БДУдаления)//добавить в базу изменений запись
	//об одном  помеченном на удаление объекте .
	//(Это чтобы отследить ситуацию с удалением помеченных объектов)
	Если Число(БДУдаления.TIP)=11 Тогда
		Попытка
			Об=СоздатьОбъект("Справочник."+СокрЛП(БДУдаления.VIDD));
			Об.НайтиПоРеквизиту("IDD",БДУдаления.IDD,1);
		Исключение
			Возврат;	
		КонецПопытки;
	ИначеЕсли Число(БДУдаления.TIP)=12 Тогда
		НайтиДокументПоIDD(ГлобДок,БДУдаления.IDD);
		Об=ГлобДок;
	ИначеЕсли Число(БДУдаления.TIP)=94 Тогда
		БДУдаления.Удалить();//счет
		Возврат;
	Иначе
		М_Сообщить("Ошибка № 100 (Тип объекта=" + БДУдаления.TIP+")   - пропускаем (обратитесь к разработчикам:ivan@pb.ru)");
		ЗаписатьВЛогОшибку("Ошибка № 100 (Тип объекта=" + БДУдаления.TIP+")   - пропускаем (обратитесь к разработчикам:ivan@pb.ru)");
		БДУдаления.Удалить();//непонятный тип
		Возврат;
	КонецЕсли;
	
	Если Об.Выбран()=1 Тогда
		Если Об.ПометкаУдаления()=1 Тогда
			Возврат; //ничего не изменилось с этим объектом
		КонецЕсли;
	КонецЕсли;
	
	//либо объект удален совсем, либо снят с пометки на удаление
	БДИзменения.Добавить();
	БДИзменения.IDD=БДУдаления.IDD;
	БДИзменения.TIP=БДУдаления.TIP;
	БДИзменения.VIDD=БДУдаления.VIDD;
	БДИзменения.DATE=РабочаяДата();
	БДИзменения.Записать();
	БДУдаления.Удалить();
	
КонецПроцедуры

//_____________________________________________________________________________


Процедура ДобавитьУдаленныеОбъектыВ_БазуИзменений(БДИзменения,БДУдаления)
	//Здесь мы в базу изменений добавляем записи об удаленных элементах
	
	//открываем dbf
	БДУдаления.ПоказыватьУдаленные(0);
	
	//добавляем то, что нужно, в базу изменений
	БДУдаления.Первая();
	Пока БДУдаления.ВКонце()=0 Цикл
		ДобавитьОдинУдаленный(БДИзменения,БДУдаления);
		БДУдаления.Следующая();
	КонецЦикла;
	
	БДУдаления.Сжать();
	//БДУдаления.ЗакрытьФайл();
	
КонецПроцедуры

//_____________________________________________________________________________

Процедура ПереформироватьПакет(БДПакеты,ВыгрБаза,ВЫгрПакет,НеотправлПакет="_")
	//одновременно здесь отслеживаем максимальную длину пакета !!!!!!!!!
	//здесь обязательно надо,чтобы ВЫгрПакет<>НеотправлПакет
	Если Сокрлп(ВЫгрПакет)=Сокрлп(НеотправлПакет) Тогда
		Сообщить("Пакет "+ВЫгрПакет+" и так уже переоформирован !");//по идее здесь мы не должны никогда быть (но на всякий случай).                                   - Чем 1С не шутит ;-)
		Возврат;
	КонецЕсли;
	
	Док=СоздатьОбъект("Документ");
	М_Состояние("Переформирование пакета для отправки ...");
	НомерПакетаИБазы=Прав("0000000"+Сокрп(Сокрп(ВыгрБаза.IDD)),7)+Сокрлп(ВЫгрПакет);
	БДПакеты.ТекущийИндекс("IDDDB");
	Ключ=Прав("0000000"+Сокрп(ВыгрБаза.IDD),7)+НеотправлПакет;
	
	ТекНомер=0;
	Пока БДПакеты.Найти(Ключ,0)=1 Цикл
		//мы спозиционировались на первом элементе участка ненужных пакетов
		пока Сокрп(БДПакеты.IDDDB)=Ключ Цикл
			БДПакеты.IDDDB=НомерПакетаИБазы;//т.е. проходим по всему участку
			БДПакеты.Записать();
			БДПакеты.Следующая();
			Если БДПакеты.ВКонце()=1 Тогда     //т.к. может этот участок был последним ...
				Прервать;
			КонецЕсли;
			
			//собственно вот само отслеживание
			Если БДПакеты.Tip=12 Тогда
				ТекНомер=ТекНомер+1; 
				
				Ид=Лев(Сокрлп(БДПакеты.IDD)+"                              ",МОДДлинаIDДокумента);
				Рез=Док.ВыбратьПоЗначению(,,"IDD",Ид);
				Если Рез=1 Тогда
					Док.ПолучитьДокумент();
					ТекНомер=ТекНомер+Док.КоличествоСтрок();
				КонецЕсли;			
				
			Иначе
				ТекНомер=ТекНомер+1;
			КонецЕсли;
			
			Если ТекНомер>=МаксКолОбъектовВПакете Тогда
				ТекНомер=0;
				НомерПакетаВыгрузки=НомерПакетаВыгрузки+1;
				МаксНомерПакетаВыгрузки=НомерПакетаВыгрузки;
				НомерПакетаИБазы=Прав("0000000"+Сокрп(Сокрп(ВыгрБаза.IDD)),7)+Сокрлп(НомерПакетаВыгрузки);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

//_____________________________________________________________________________
Процедура СформироватьНовыйПакет(БДИзменения,БДПакеты,ВыгрБаза,ВЫгрПакет="_")
	ПЕрем Список;
	М_Состояние("Создание нового пакета...");
	Прогрессор(0,БДИзменения.КоличествоЗаписей(),0,ВыгрБаза.Наименование);
	//	БДИзменения.ТекущийИндекс("POS");
	НомерПакетаИБазы=Прав("0000000"+Сокрп(ВыгрБаза.IDD),7)+Сокрлп(ВЫгрПакет);
	БДИзменения.Первая();
	БДПакеты.ТекущийИндекс("IDD");
	БДПакеты.АвтоСохранение(0);
	КолПрогрессора=0;
	ПОС=1000;
	Пока БДИзменения.ВКонце()=0 Цикл
		КолПрогрессора=КолПрогрессора+1;
		Прогрессор(КолПрогрессора);
		Ключ=НомерПакетаИБазы+Сокрлп(БДИзменения.IDD);
		Нашли=БДПакеты.Найти(Ключ,0);
		Если Нашли=1 Тогда
			Если БДИзменения.TIP<>12 Тогда
				//для периодических реквизитов записываем период их изменения
				ДатаИзменения=БДИзменения.DATE;
				Если БДПакеты.DATE1>ДатаИзменения Тогда
					БДПакеты.DATE1=ДатаИзменения;//т.е. Дата изменения реквизита вылазеит за границы уже введенных величин
				ИначеЕсли БДПакеты.DATE2<ДатаИзменения Тогда
					БДПакеты.DATE2=ДатаИзменения;//аналогично , но теперь провер. верх. границу
				КонецЕсли;
				БДПакеты.Записать();
			КонецЕсли;
			Если (БДИзменения.TIP<>БДПакеты.TIP)ИЛИ(БДПакеты.VIDD<>БДИзменения.VIDD) Тогда
			 	Нашли=0;//защита от отмены транзакции при регистрации объектов   
			КонецЕсли;
		Иначе
			БДПакеты.Добавить();
		КонецЕсли;
		
		Если Нашли=0 Тогда
			ПОС=ПОС+1;
			БДПакеты.IDD=БДИзменения.IDD;
			БДПакеты.TIP=БДИзменения.TIP;
			БДПакеты.VIDD=БДИзменения.VIDD;
			БДПакеты.DATE1=БДИзменения.DATE;
			БДПакеты.DATE2=БДИзменения.DATE;
			БДПакеты.POS=ПОС;
			БДПакеты.IDDDB=НомерПакетаИБазы;
			БДПакеты.Записать();
		КонецЕсли;
		
		
		БДИзменения.Следующая();
	КонецЦикла;
	Прогрессор(0);
КонецПроцедуры

//_____________________________________________________________________________
Функция ДобавитьВПакет(БДПакеты,НомерПакетаИБазы,Реквизит,Тип)
	
	Если Сокрлп(Реквизит.IDD)="" Тогда
		Константа.УникальныйIDD=Строка(Число(Константа.УникальныйIDD)+1);
		НовыйIDD=Прав("0000000"+СокрЛП(Константа.IDD),7)+прав("0000000000"+СокрЛП(Константа.УникальныйIDD),10);
		Если Тип=12 Тогда
			ГлобДокЗагрВыгрузки.НайтиДокумент(Реквизит);
			ГлобДокЗагрВыгрузки.IDD=НовыйIDD;
			ГлобДокЗагрВыгрузки.Записать();
			ГлобДокЗагрВыгрузки.НайтиДокумент(Реквизит);
			Реквизит=ГлобДокЗагрВыгрузки.ТекущийДокумент();
		Иначе
			Спр2=СоздатьОбъект("Справочник."+Реквизит.Вид());
			Спр2.НайтиЭлемент(Реквизит);
			Спр2.IDD=НовыйIDD;
			Спр2.Записать();
			Спр2.НайтиЭлемент(Реквизит);
			Реквизит=Спр2.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;
	
	БДПакеты.Ключ.IDD=Реквизит.IDD;
	БДПакеты.Ключ.IDDDB=НомерПакетаИБазы;
	Рез=БДПакеты.НайтиПоКлючу(0);
	
	
	Если Рез=1 Тогда
		Если Сокрлп(БДПакеты.VIDD)<>Сокрлп(Реквизит.Вид()) Тогда
			Рез=0;//нашли такой же IDD, но это другой вид
			//вообще таких случаев не должно быть, за исключением ситуаций,
			//когда передавались два справочника в один
		КонецЕсли;
	КонецЕсли;
	
	Если Рез=0 Тогда
		БДПакеты.Добавить();
		БДПакеты.IDD=Реквизит.IDD;
		БДПакеты.TIP=Тип;
		БДПакеты.VIDD=Реквизит.Вид();
		БДПакеты.DATE1=ДатаН;
		БДПакеты.DATE2=ДатаК;
		БДПакеты.POS=НомерПОС;
		БДПакеты.IDDDB=НомерПакетаИБазы;
		БДПакеты.Записать();
		НомерПОС=НомерПОС+глСчетчикПОС;
		Возврат 1;
	Иначе
		БДПакеты.POS=НомерПОС;
		БДПакеты.Записать();
		НомерПОС=НомерПОС+глСчетчикПОС;
	КонецЕсли;
	Возврат 0;
КонецФункции //ДобавитьВПакет(БДПакеты,Реквизит)

//_____________________________________________________________________________
Процедура ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,Знач Реквизит,Знач Тип0,Знач Уровень=1)
	Перем А,А1,А2,СписокВыгрОб;
	ЦиклДокумента=0;
	//В данной процедуре выгружаем все реквизиты имеющие тип справочника или тип документ
	//в файл пакетов,причем рекурсивно т.е. у этого объекта тоже выгружаем реквизиты
	
	Если Реквизит.Выбран()=0 Тогда
		Возврат;
	КонецЕсли;
	Если Уровень>МаксУровень Тогда
		Возврат;//предельное число !!
	КонецЕсли;
	
	//собственно здесь все просто и комментарии не нужны, только замечу что:
	//информацию о доступных реквизитах объекта берем из таблицы правил выгрузки
	Если ДобавитьВПакет(БДПакеты,НомерПакетаИБазы,Реквизит,Тип0)=1 Тогда
		// а теперь надо пройтись по этому элементу
		СписокВыгрОб=СоздатьОбъект("СписокЗначений");
		Если Тип0=11 Тогда //справочник
			Вид=Реквизит.Вид();
			Спр=СоздатьОбъект("Справочник."+Вид);
			Спр.ИспользоватьДату(ДатаК);
			Спр.НайтиЭлемент(Реквизит);
			Таб1=СписокПравил.Получить("Справочники");
			Если ТипЗначенияСтр(Таб1)="ТаблицаЗначений" Тогда
				Номер="";
				Таб1.НайтиЗначение(Вид,Номер,"Наименование");
				Если Число(Номер)>0 Тогда
					Табл=Таб1.ПолучитьЗначение(Номер,"Указатель");//т.е. это таблица реквизитов
					Для А=1 По Таб_КоличествоСтрок(Табл) Цикл
						Реквизит=Таб_ПолучитьЗначение(Табл,А,"Наименование");
						Если Лев(Реквизит,1)="#" Тогда
							Атрибут=0;
							Если Реквизит="#ЭтоГруппа" Тогда
								Атрибут=Спр.ЭтоГруппа();
							ИначеЕсли Реквизит="#ПомеченНаУдаление" Тогда
								Атрибут=Спр.ПометкаУдаления()
							КонецЕсли;
							
							Если ФильтрВыгрузки(Табл,А,Атрибут)=0 Тогда
								Продолжить;
							КонецЕсли;
						Иначе
							
							Если Лев(Реквизит,1)="@" Тогда
								//Обычное задание выражения
								Если Сред(Реквизит,2,4)<>"IDD=" Тогда
									Стр=Сред(Реквизит,2);
									Шаблон("[Получить("+Стр+")]");Атрибут=глВыражение;
								КонецЕсли;
							Иначе
								
								Если Реквизит="Владелец" Тогда
									Атрибут=Спр.Владелец;
								ИначеЕсли Реквизит="Родитель" Тогда
									Атрибут=Спр.Родитель;
								Иначе
									Попытка//проверка нужна на случай если пользователь неправильно ввел наименование реквизита
										//или реквизит был удален из конфигурации , а правила потом не изменяли
										Атрибут=Спр.ПолучитьАтрибут(Реквизит);
									Исключение
										Сообщить("Неправильное имя реквизита "+Реквизит+" у справочника "+Спр.Вид());
										ЗаписатьВЛогОшибку("Неправильное имя реквизита "+Реквизит+" у справочника ",Спр.ТекущийЭлемент());
										Продолжить;
									КонецПопытки;
								КонецЕсли;
							КонецЕсли;
							
							
							Если ФильтрВыгрузки(Табл,А,Атрибут)=0 Тогда
								Продолжить;
							КонецЕсли;
							Тип1=ТипЗначения(Атрибут);
							Если (Тип1=11)Или(Тип1=12) Тогда
								СписокВыгрОб.ДобавитьЗначение(Атрибут,Тип1);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				Иначе
					М_Сообщить("Вид "+Вид+" в периферийную базу не выгружается !!");
					
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Тип0=12 Тогда //документы
			//по документам
			Таб1=СписокПравил.Получить("Документы");
			
			Если ТипЗначенияСтр(Таб1)="ТаблицаЗначений" Тогда
				Вид=Реквизит.Вид();
				Если Вид=ДокументОперации Тогда
					//пройдемся по проводкам и выловим субконто !!!
					Опер=СоздатьОбъект("Операция");
					Рез=Опер.НайтиОперацию(Реквизит);
					Если Рез=1 Тогда
						Опер.ВыбратьПроводки();
						Пока Опер.ПолучитьПроводку()=1 Цикл
							//Дебет
							Счет=Опер.Дебет.Счет;
							Если Счет.Выбран()=1 Тогда
								Для А=1 По Счет.КоличествоСубконто() Цикл
									Субконто=Опер.Дебет.Субконто(А); 
									Тип3=ТипЗначения(Субконто);
									Если (Тип3=11)Или(Тип3=12) Тогда
										СписокВыгрОб.ДобавитьЗначение(Субконто,Тип3);
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							//Кредит
							Счет=Опер.Кредит.Счет;
							Если Счет.Выбран()=1 Тогда
								Для А=1 По Счет.КоличествоСубконто() Цикл
									Субконто=Опер.Кредит.Субконто(А); 
									Тип3=ТипЗначения(Субконто);
									Если (Тип3=11)Или(Тип3=12) Тогда
										СписокВыгрОб.ДобавитьЗначение(Субконто,Тип3);
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;	
				КонецЕсли;
				Док=СоздатьОбъект("Документ");//здесь нельзя использовать ГлобДокЗагрВыгрузки из-за рекурсий !!!
				Док.НайтиДокумент(Реквизит);
				Номер="";
				Таб1.НайтиЗначение(Вид,Номер,"Наименование");
				Если Число(Номер)>0 Тогда
					Список=Таб1.ПолучитьЗначение(Номер,"Указатель");
					
					Шапка=Список.Получить("Шапка");
					//					Если ТипЗначенияСтр(Шапка)="ТаблицаЗначений" Тогда
					Для А1=1 По Таб_КоличествоСтрок(Шапка) Цикл
						Реквизит=Таб_ПолучитьЗначение(Шапка,А1,"Наименование");
						Если Лев(Реквизит,1)="#" Тогда
							
							Атрибут="";
							Если Реквизит="#ПомеченНаУдаление" Тогда
								Атрибут=Док.ПометкаУдаления();
							ИначеЕсли Реквизит="#ДатаДок" Тогда
								Атрибут=Док.ДатаДок;
							ИначеЕсли Реквизит="#ВремяДокумента" Тогда
								Атрибут=Док.ПолучитьВремя();
							ИначеЕсли Реквизит="#Проведен" Тогда
								Атрибут=Док.Проведен();
							КонецЕсли;
							Если ФильтрВыгрузки(Шапка,А1,Атрибут)=0 Тогда
								Возврат;
							КонецЕсли;
						Иначе
							Если Лев(Реквизит,1)="@" Тогда
								//Обычное задание выражения
								Если Сред(Реквизит,2,4)<>"IDD=" Тогда
									Стр=Сред(Реквизит,2);
									Шаблон("[Получить("+Стр+")]");Атрибут=глВыражение;
								КонецЕсли;
							Иначе
								
								Попытка//проверка нужна на случай если пользователь неправильно ввел наименование реквизита
									//или реквизит был удален из конфигурации , а правила потом не изменяли
									Атрибут=Док.ПолучитьАтрибут(Реквизит);
								Исключение
									Сообщить("Неправильное задание реквизита шапки "+Реквизит+" у документа "+Док.Вид());
									ЗаписатьВЛогОшибку("Неправильное задание реквизита шапки "+Реквизит+" у документа ",Док.ТекущийДокумент());
									Продолжить;
								КонецПопытки;
							КонецЕсли;
							
							Если ФильтрВыгрузки(Шапка,А1,Атрибут)=0 Тогда
								Возврат;
							КонецЕсли;
							Тип2=ТипЗначения(Атрибут);
							
							Если (Тип2=11)Или(Тип2=12) Тогда
								СписокВыгрОб.ДобавитьЗначение(Атрибут,Тип2);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					//КонецЕсли;//Шапка=ТаблицаЗначений
					
					ТабЧасть=Список.Получить("Табличная часть");
					//Если ТипЗначенияСтр(ТабЧасть)="ТаблицаЗначений" Тогда
					Док.ВыбратьСтроки();
					Пока Док.ПолучитьСтроку()=1 Цикл
						Для А1=1 По Таб_КоличествоСтрок(ТабЧасть) Цикл
							Реквизит=Таб_ПолучитьЗначение(ТабЧасть,А1,"Наименование");
							Если Лев(Реквизит,1)="#" Тогда
							ИначеЕсли Лев(Реквизит,1)="@" Тогда
								//Обычное задание выражения
								Стр=Сред(Реквизит,2);
								Шаблон("[Получить("+Стр+")]");Атрибут=глВыражение;
							Иначе
								
								Попытка//проверка нужна на случай если пользователь неправильно ввел наименование реквизита
									//или реквизит был удален из конфигурации , а правила потом не изменяли
									Атрибут=Док.ПолучитьАтрибут(Реквизит);
								Исключение
									Сообщить("Неправильное имя реквизита табличной части "+Реквизит+" у документа "+Док.Вид());
									ЗаписатьВЛогОшибку("Неправильное имя реквизита табличной части "+Реквизит+" у документа ",Док.ТекущийДокумент());
									Продолжить;
								КонецПопытки;
							КонецЕсли;
							Если ФильтрВыгрузки(ТабЧасть,А1,Атрибут)=0 Тогда
								Продолжить;
							КонецЕсли;
							Тип2=ТипЗначения(Атрибут);
							Если (Тип2=11)Или(Тип2=12) Тогда
								СписокВыгрОб.ДобавитьЗначение(Атрибут,Тип2);
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					//КонецЕсли;	//ТабЧасть=ТаблицаЗначений
				Иначе
					М_Сообщить("Вид "+Вид+" в периферийную базу не выгружается !!");
				КонецЕсли;//Номер>0
			КонецЕсли;	//Таб1=ТаблицаЗначений
			
		КонецЕсли;
		Для А=1 По СписокВыгрОб.РазмерСписка() Цикл
			Стр="";
			Атрибут=СписокВыгрОб.ПолучитьЗначение(А,Стр);
			Тип1=Число(Стр);
			ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,Атрибут,Тип1,Уровень+1);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры //ДобавитьВПакетСВложеннымиДанными

//_____________________________________________________________________________
Процедура ДобавитьВсеПодчиненныеЭлементы(БДПакеты,НомерПакетаИБазы,ТекСпр);
	Если СПодчиненными=1 Тогда
		Для А=1 По СписокПодчиненных.РазмерСписка() Цикл
			Стр="";
			Если Сокрлп(СписокПодчиненных.ПолучитьЗначение(А,Стр))=Сокрлп(ТекСпр.Вид()) Тогда
				Спр=СоздатьОбъект("Справочник."+Стр);
				Спр.ИспользоватьВладельца(ТекСпр);
				Спр.ВыбратьЭлементы();
				Пока Спр.ПолучитьЭлемент()=1 Цикл
					Атрибут=Спр.ТекущийЭлемент();
					ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,Атрибут,ТипЗначения(Атрибут),0);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры //ДобавитьВсеПодчиненныеЭлементы
//_____________________________________________________________________________
Процедура СоздатьНовыйПакетСИнформациейВыборочно(ВыгрБаза,БДПакеты,ВЫгрПакет,НачНомер=0)
	М_Состояние("Выгрузка выборочных данных в пакет ...");
	Если ДатаК<ДатаН Тогда
		ДатаК=ДатаН;
	КонецЕсли;
	НомерПОС=1000000+НачНомер;//при каждой записи уменьшаем на единицу
	//это из-за того, что реквизит записывается позже элемента,в котором он вызывается
	//поэтому далее мы будем сортировать по полю POS
	
	МаксУровень=ВыгрБаза.КоличествоУровнейВложенности;
	БДПакеты.ТекущийИндекс("IDD");
	БДПакеты.АвтоСохранение(0);
	НомерПакетаИБазы=Прав("0000000"+Сокрп(ВыгрБаза.IDD),7)+Сокрлп(ВЫгрПакет);
	Тип=ТипЗначения(ОбъектВыборочно);
	Если (Тип>10)И(Тип<13) Тогда
		Если Тип=11 Тогда
			Если ОбъектВыборочно.Выбран()=1 Тогда
				Если ОбъектВыборочно.ЭтоГруппа()=1 Тогда
					Спр=СоздатьОбъект("Справочник."+ОбъектВыборочно.Вид());
					Спр.ИспользоватьВладельца(ОбъектВыборочно.Владелец);
					Спр.ИспользоватьРодителя(ОбъектВыборочно);
					Спр.ВыбратьЭлементы();
					Пока Спр.ПолучитьЭлемент()=1 Цикл
						Атрибут=Спр.ТекущийЭлемент();
						ДобавитьВсеПодчиненныеЭлементы(БДПакеты,НомерПакетаИБазы,Атрибут);
						ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,Атрибут,ТипЗначения(Атрибут),0);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбъектВыборочно.Выбран()=1 Тогда
			Атрибут=ОбъектВыборочно;
			ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,Атрибут,ТипЗначения(Атрибут),0);
			Если тип=11 Тогда
				ДобавитьВсеПодчиненныеЭлементы(БДПакеты,НомерПакетаИБазы,Атрибут);
			ИначеЕсли тип=12 Тогда
				Если СПодчиненными=1 Тогда
					Док=СоздатьОбъект("Документ");
					Док.ВыбратьПодчиненныеДокументы(ДатаН,ДатаК,Атрибут);
					Пока Док.ПолучитьДокумент()=1 Цикл
						Атрибут=Док.ТекущийДокумент();
						ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,Атрибут,ТипЗначения(Атрибут),0);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			Имя1=ТипОбъектаВыборочно.ПолучитьЗначение(ТипОбъектаВыборочно.ТекущаяСтрока());
			Если Тип=11 Тогда
				Если Имя1="Справочник" Тогда //вылавливаем ситуацию когда выгружаются все виды
					КонЦикл=Метаданные.Справочник();
				Иначе
					КонЦикл=1;
					Имя=Имя1;
				КонецЕсли;
				Для А=1 По КонЦикл Цикл
					Если Имя1="Справочник" Тогда  //выгружаются все виды справочников кроме правил и баз
						Ст=Метаданные.Справочник(А).Идентификатор;
						Если (ст="ПравилаЗагрузки") или (ст="ПравилаВыгрузки") или (ст="ПериферийныеБазы")
							или (ст="ИзмененияМОД") или (ст="УдаленияМОД") или (ст="Пакеты") или (ст="ЖурналРегистрации")Тогда
							Продолжить;
						КонецЕсли;
						//теперь смотрим, надо ли выгружать данный вид согласно правилам выгрузки т.к. например справочник Населенные пункты или улицы
						//в комплексной явно не надо !!!
						Таб1=СписокПравил.Получить("Справочники");
						Если ТипЗначенияСтр(Таб1)<>"ТаблицаЗначений" Тогда
							Продолжить;
						КонецЕсли;
						
						Номер="";
						Таб1.НайтиЗначение(ст,Номер,"Наименование");
						Если Число(Номер)=0 Тогда
							Продолжить;
						КонецЕсли;
						
						
						
						Имя="Справочник."+Ст;
					КонецЕсли;
					Спр=СоздатьОбъект(Имя);
					Режим=0;
					Если Имя1<>"Справочник" Тогда
						Если ТипЗначения(ОбъектВыборочно.Владелец)=11 Тогда
							Если ОбъектВыборочно.Владелец.Выбран()=1 Тогда
								Если ОбъектВыборочноВладелец.Вид()=ОбъектВыборочно.Владелец.Вид() Тогда
									Спр.ИспользоватьВладельца(ОбъектВыборочноВладелец);
									Режим=1;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Спр.ВыбратьЭлементы(Режим);
					Пока Спр.ПолучитьЭлемент()=1 Цикл
						Атрибут=Спр.ТекущийЭлемент();
						ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,Атрибут,ТипЗначения(Атрибут),0);
					КонецЦикла;
				КонецЦикла;
			ИначеЕсли Тип=12 Тогда
				
				Док=СоздатьОбъект(Имя1);
				Док.ВыбратьДокументы(ДатаН,ДатаК);
				Пока Док.ПолучитьДокумент()=1 Цикл
					Атрибут=Док.ТекущийДокумент();
					ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,Атрибут,ТипЗначения(Атрибут),0);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекСтр=ТипОбъектаВыборочно.ТекущаяСтрока();
		Если ТекСтр=0 Тогда
			Возврат;
		КонецЕсли;
		Имя=ТипОбъектаВыборочно.ПолучитьЗначение(ТипОбъектаВыборочно.ТекущаяСтрока());
		Если Имя="Константы" Тогда
			Для ф=1 по Метаданные.Константа() Цикл
				П=Метаданные.Константа(ф).Периодический;
				Имя=Метаданные.Константа(ф).Идентификатор;
				Если П=1 Тогда
					Пер=СоздатьОбъект("Периодический");
					Пер.ИспользоватьОбъект(Имя);
					Атрибут=Пер.ЗначениеНаДату(РабочаяДата());
				Иначе
					Атрибут=Константа.ПолучитьАтрибут(Имя);
				КонецЕсли;
				Тип=ТипЗначения(Атрибут);
				
				БДПакеты.Добавить();
				БДПакеты.IDD=Имя;
				БДПакеты.TIP=95;
				БДПакеты.VIDD=Имя;
				БДПакеты.DATE1=ДатаН;
				БДПакеты.DATE2=ДатаК;
				БДПакеты.POS=НомерПОС;
				БДПакеты.IDDDB=НомерПакетаИБазы;
				БДПакеты.Записать();
				НомерПОС=НомерПОС+глСчетчикПОС;
				
				Если (Тип=11)Или(Тип=12) Тогда
					ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,Атрибут,Тип,0);
				КонецЕсли;
				
				
				
			КонецЦикла;
			
		ИначеЕсли Имя="Планы счетов" Тогда
			НомерПОСПлана=1;
			
			Попытка
				Для Ц=1 по ПланыСчетов.КоличествоЗначений() Цикл
					Об=СоздатьОбъект("Счет");
					Об.ИспользоватьПланСчетов(ПланыСчетов.ЗначениеПоНомеру(Ц));
					Об.ВыбратьСчета();
					Пока Об.ПолучитьСчет()>0 Цикл
						Счет=Об.ТекущийСчет();
						БДПакеты.Добавить();
						БДПакеты.IDD=Счет.Код;
						БДПакеты.TIP=94;
						БДПакеты.VIDD=ЗначениеВСтроку(Счет);
						БДПакеты.DATE1=ДатаН;
						БДПакеты.DATE2=ДатаК;
						БДПакеты.POS=1;
						БДПакеты.IDDDB=НомерПакетаИБазы;
						БДПакеты.Записать();
					КонецЦикла;
				КонецЦикла;
			Исключение
			КонецПопытки;
			
			
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //СоздатьНовыйПакетСИнформациейВыборочно



//_____________________________________________________________________________
Процедура УдалитьИнформациюОПакете(БДПакеты,Ключ);
	М_Состояние("Удаляется информация о пакете "+Ключ);
	БДПакеты.ТекущийИндекс("IDDDB");
	БДПакеты.ПоказыватьУдаленные(0);
	Пока БДПакеты.Найти(Ключ,0)=1 Цикл
		//мы спозиционировались на первом элементе участка ненужных пакетов
		пока Сокрп(БДПакеты.IDDDB)=Ключ Цикл
			БДПакеты.Удалить();                  //т.е. удаляем весь участок
			БДПакеты.Следующая();
			Если БДПакеты.ВКонце()=1 Тогда     //т.к. может этот участок был последним ...
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры //

//_____________________________________________________________________________
Процедура ЗаписатьВФайлБД(БДПакеты,ВыгрОбъект,НомерПакетаИБазы)
	Если ВыгрОбъект.Выбран()=1 Тогда
		БДПакеты.Добавить();
		БДПакеты.IDD=ВыгрОбъект.IDD;
		БДПакеты.TIP=ТипЗначения(ВыгрОбъект);
		БДПакеты.VIDD=ВыгрОбъект.Вид();
		БДПакеты.DATE1=ДатаН;
		БДПакеты.DATE2=ДатаК;
		БДПакеты.POS=0;
		БДПакеты.IDDDB=НомерПакетаИБазы;
		БДПакеты.Записать();
	КонецЕсли;
КонецПроцедуры //ЗаписатьВБазу

//_____________________________________________________________________________
Функция СформироватьЗаПериод(БДПакеты,НомерПакетаИБазы)
	Перем Счет;
	Состояние("Формирование списка всех объектов базы");
	//планы счетов
	Попытка
		Для Ц=1 по ПланыСчетов.КоличествоЗначений() Цикл
			Об=СоздатьОбъект("Счет");
			Об.ИспользоватьПланСчетов(ПланыСчетов.ЗначениеПоНомеру(Ц));
			Об.ВыбратьСчета();
			Пока Об.ПолучитьСчет()>0 Цикл
				Счет=Об.ТекущийСчет();
				БДПакеты.Добавить();
				БДПакеты.IDD=Счет.Код;
				БДПакеты.TIP=94;
				БДПакеты.VIDD=ЗначениеВСтроку(Счет);
				БДПакеты.DATE1=ДатаН;
				БДПакеты.DATE2=ДатаК;
				БДПакеты.POS=0;
				БДПакеты.IDDDB=НомерПакетаИБазы;
				БДПакеты.Записать();
			КонецЦикла;
		КонецЦикла;
	Исключение
	КонецПопытки;

	Константа_УникальныйIDD=Число(Константа.УникальныйIDD)+1;
	Константа_IDD=Прав("0000000"+СокрЛП(Константа.IDD),7);
	
	//справочники	
	Для ы=1 по Метаданные.Справочник() Цикл
//		НачатьТранзакцию();
		КолПрогрессора=КолПрогрессора+10;
		Прогрессор(КолПрогрессора);//**************** прогрессор
		Ст=Метаданные.Справочник(ы).Идентификатор;
		Если (ст<>"ПравилаЗагрузки") и (ст<>"ПравилаВыгрузки") и (ст<>"ПериферийныеБазы")
			и (ст<>"ИзмененияМОД") и (ст<>"УдаленияМОД") и (ст<>"Пакеты") и (ст<>"ЖурналРегистрации")Тогда
			Спр=СоздатьОбъект("Справочник."+Ст);
			М_Состояние("Обработка "+Ст);
			Спр.ВыбратьЭлементы(0);
			Пока Спр.ПолучитьЭлемент()>0 Цикл
				Если Сокрлп(Спр.IDD)="" Тогда
					Константа_УникальныйIDD=Константа_УникальныйIDD+1;
					Спр.IDD=Сокрлп(Константа_IDD+прав("0000000000"+Константа_УникальныйIDD,10));
					Спр.Записать();
				КонецЕсли;
				ЗаписатьВФайлБД(БДПакеты,Спр.ТекущийЭлемент(),НомерПакетаИБазы);
			КонецЦикла;
		КонецЕсли;
//		ЗафиксироватьТранзакцию();
	КонецЦикла;


	
	//документы
	Док=СоздатьОбъект("Документ");
	М_Состояние("Обработка документов...");
	Док.ВыбратьДокументы(ДатаН,ДатаК);
	Пока Док.ПолучитьДокумент()>0 Цикл
		Если Сокрлп(Док.IDD)="" Тогда
			Константа_УникальныйIDD=Константа_УникальныйIDD+1;
			Док.IDD=Сокрлп(Константа_IDD+прав("0000000000"+Константа_УникальныйIDD,10));
			Док.Записать();
		КонецЕсли;
		ЗаписатьВФайлБД(БДПакеты,Док.ТекущийДокумент(),НомерПакетаИБазы);
	КонецЦикла;


	Константа.УникальныйIDD=Строка(Число(Константа_УникальныйIDD)+1);
	
	//константы
	Для А=1 по Метаданные.Константа() Цикл
		ИмяКонстанты=Метаданные.Константа(А).Идентификатор;
		БДПакеты.Добавить();
		БДПакеты.IDD=ИмяКонстанты;
		БДПакеты.TIP=95;
		БДПакеты.VIDD=ИмяКонстанты;
		БДПакеты.DATE1=ДатаН;
		БДПакеты.DATE2=ДатаК;
		БДПакеты.POS=0;
		БДПакеты.IDDDB=НомерПакетаИБазы;
		БДПакеты.Записать();
	КонецЦикла;
	Возврат 1;		
КонецФункции
//-----------------------------------------------------------------------------
Процедура РегистрироватьИзмененияСправочников(БД)
	
	//Перем ВидРеквДок[2];
	//
	//ВидРеквДок[1]="Шапка";
	//ВидРеквДок[2]="Табличная часть";
	
	БДДоп=СоздатьОбъект("ТаблицаЗначений");
	БДДоп.НоваяКолонка("IDD");
	БДДоп.НоваяКолонка("VIDD");
	БДДоп.НоваяКолонка("Date");
	
	Док=СоздатьОбъект("Документ");
	БД.Первая(); 
	//Получим все возможные к выгрузке документы
	//Это необходимо для увеличения скорости выгрузки
	//СписВыгрДокументов=СоздатьОбъект("СписокЗначений");

	СпрБазы=СоздатьОбъект("Справочник.ПериферийныеБазы");
	
	Спр=СоздатьОбъект("Справочник.ПравилаВыгрузки");
//	СпрБазы.ВыбратьЭлементы();
//	Пока СпрБазы.ПолучитьЭлемент()=1 Цикл
	//а щас мы выгружаем в конкретную базу, поэтому не будем перебирать все базы, а только для текущей
	СпрБазы.НайтиЭлемент(База);
	Спр.ИспользоватьВладельца(СпрБазы.ТекущийЭлемент());
	
	//запомним все реквизиты документа, которые надо выгружать
	спр1=СоздатьОбъект("Справочник.ПравилаВыгрузки");
	Спр1.ИспользоватьВладельца(СпрБазы.ТекущийЭлемент());
	//еще один справочник, он нам нужен, чтобы не портить выборку более высокого уровня
	
	табВыгрДокументов=СоздатьОбъект("ТаблицаЗначений"); 
	табВыгрДокументов.НоваяКолонка("видДок");
	табВыгрДокументов.НоваяКолонка("спРекв");
	табВыгрДокументов.НоваяКолонка("тУсловий");
	//** PR **/
	Спис=СоздатьОбъект("ТаблицаЗначений");
	Спис.НоваяКолонка("Рекв");
	Спис.НоваяКолонка("Род");
	//** PR **/

	ТаблУсловий=СоздатьОбъект("ТаблицаЗначений"); 
	ТаблУсловий.НоваяКолонка("Рекв");
	ТаблУсловий.НоваяКолонка("ЗнРекв");
	
//PR	Спис=СоздатьОбъект("СписокЗначений"); 
	Если Спр.НайтиПоНаименованию("Документы",1)=1 Тогда
		Спр.ИспользоватьРодителя(Спр.ТекущийЭлемент());
		Спр.ВыбратьЭлементы(1);
		Пока Спр.ПолучитьЭлемент()=1 Цикл
			Если Спр.Уровень()<>2 Тогда
				Продолжить;
			КонецЕсли;	
			Если Спр.ПризнакВыгрузки=ДаДа Тогда
//PR				спис.УдалитьВсе();
				ТаблУсловий.УдалитьСтроки();
				Спис.УдалитьСтроки();
				//Для А=1 По 2 Цикл
				спр1.использоватьРодителя(Спр.ТекущийЭлемент());
				Спр1.ВыбратьЭлементы();
				Пока Спр1.ПолучитьЭлемент()=1 Цикл
					Если Спр1.ЭтоГруппа()=1 Тогда
						Продолжить;
					КонецЕсли;
					//Если СокрЛП(Спр1.Наименование)=ВидРеквДок[А] Тогда
					//Спр1.ИспользоватьРодителя(Спр1.ТекущийЭлемент());
					//Спр1.ВыбратьЭлементы();
					//Пока Спр1.ПолучитьЭлемент()=1 Цикл
					Если Спр1.ВклУсловие=ДаДа Тогда
					    //Проверим условие, если не совпало (не будет выгружаться документ) - очистим список
						ТаблУсловий.НоваяСтрока();
						ТаблУсловий.Рекв=СокрЛП(Спр1.Наименование);
						ТаблУсловий.ЗнРекв=Спр1.Условие;
					КонецЕсли;
					
					Если (Спр1.ПризнакВыгрузки=ДаДа) и (Найти("|#|@|",Лев(СокрЛп(Спр1.Наименование),1))=0) Тогда
//PR						Спис.ДобавитьЗначение(СокрЛП(Спр1.Наименование),Спр1.Родитель.Наименование);            
						//** PR **/
						Спис.НоваяСтрока();
						Спис.Рекв=СокрЛП(Спр1.Наименование);
						Спис.Род=Спр1.Родитель.Наименование;
						//** PR **/
						
					КонецЕсли;
					//КонецЦикла; 
					//Прервать;
					//КонецЕсли;
				КонецЦикла;
				//КонецЦикла;
				табВыгрДокументов.НоваяСтрока();
				табВыгрДокументов.видДок=СокрЛП(Спр.Наименование);
				Сп=СоздатьОбъект("ТаблицаЗначений");
				Спис.Выгрузить(Сп);

				табВыгрДокументов.спРекв=Сп;
				ТУ=СоздатьОбъект("ТаблицаЗначений");
				ТаблУсловий.Выгрузить(ТУ);
				табВыгрДокументов.тУсловий=ТУ;
			КонецЕсли;	
		КонецЦикла;                                        
	КонецЕсли;
	//СписВыгрДокументов.ВыбратьЗначение("");
	
	БД.Первая();
	Пока БД.ВКонце()=0 Цикл
		Состояние("Регистрация изменений справочников... "+БД.НомерЗаписи()+"/"+БД.КоличествоЗаписей());
		Если Строка(БД.TIP)="12" Тогда
			//Это документ
			ИД=БД.IDD;
			Если НайтиДокументПоIDD(Док,ИД)=1 Тогда
				//Теперь будем регистрировать все элементы справочников как 
				//измененые                          
				ВидДок=СокрЛП(Строка(БД.VIDD));
				нстр=0;
				Если табВыгрДокументов.НайтиЗначение(ВидДок,Нстр,"видДок")=0 Тогда
					БД.Следующая();
					Продолжить;
				КонецЕсли;
				
				Спис=СоздатьОбъект("ТаблицаЗначений");
				спис = табВыгрДокументов.ПолучитьЗначение(Нстр,"спРекв");
				тУсл = табВыгрДокументов.ПолучитьЗначение(Нстр,"тУсловий");
				
				НеВыгружать=Нет;
				тУсл.ВыбратьСтроки();
				Пока тУсл.ПолучитьСтроку()=1 Цикл
					Попытка
					    Если Док.ПолучитьАтрибут(тУсл.Рекв)<>тУсл.знРекв Тогда
							НеВыгружать=Да;
					        Прервать;
					    КонецЕсли;
					Исключение
						Сообщить(ОписаниеОшибки());
						Сообщить(Шаблон("Документ: [Док.Вид] Атрибут: [тУсл.Рекв]"));
						//ВызватьИсключение;
					КонецПопытки;
				КонецЦикла;           
				
				Если НеВыгружать=Да Тогда
					БД.Следующая();
				    Продолжить;
				КонецЕсли;
				
				Для ы=1 по Метаданные.Документ(ВидДок).РеквизитШапки() Цикл
					Тип=Метаданные.Документ(ВидДок).РеквизитШапки(ы).Тип;
					Если  Тип="Справочник" Тогда
						Имя=Метаданные.Документ(ВидДок).РеквизитШапки(ы).Идентификатор;
						
						Если спис.НайтиЗначение(Имя,,"Рекв")=0 Тогда
//PR						Если спис.НайтиЗначение(Имя)=0 Тогда
						    Продолжить;
						КонецЕсли;
						
						Попытка
							Аттр=Док.ПолучитьАтрибут(Имя);
						Исключение                        
							Сообщить("Документ: "+Док+ " имя: "+имя);
							Аттр=Док.ПолучитьАтрибут(Имя);
						КонецПопытки;
						//Надо проверить, а заполнен ли реквизит и если да, есть ли у него ИДД
						Если Аттр.Выбран()=0 Тогда
							Продолжить;
						КонецЕсли;
						Если Метаданные.Справочник(Аттр.Вид()).Реквизит("IDD").Выбран()=0 Тогда
							Продолжить;
						КонецЕсли;
						
						БДДоп.НоваяСтрока();
						БДДоп.IDD=Аттр.IDD;
						БДДоп.VIDD=Аттр.Вид();
						БДДоп.Date=Док.ДатаДок;
					КонецЕсли;
				КонецЦикла;	
				Если Док.Вид()="ДвиженияДенежныхСредств" Тогда
					Док.ВыбратьСтроки();
					Пока Док.ПолучитьСтроку()=1 Цикл
						Для ы=1 по Метаданные.Документ(ВидДок).РеквизитТабличнойЧасти() Цикл
							Тип=Метаданные.Документ(ВидДок).РеквизитТабличнойЧасти(ы).Тип;
							Если  Тип="Справочник" Тогда
								Имя=Метаданные.Документ(ВидДок).РеквизитТабличнойЧасти(ы).Идентификатор;

								Если спис.НайтиЗначение(Имя,,"Рекв")=0 Тогда
//PR								Если спис.НайтиЗначение(Имя)=0 Тогда
						    		Продолжить;
								КонецЕсли;
								
								Попытка
									Аттр=Док.ПолучитьАтрибут(Имя);
								Исключение
									Сообщить(ОписаниеОшибки());
									Сообщить("Ошибка получения атрибута: "+Имя+" в документе "+Док+" ("+ИД+")");
									ВызватьИсключение;
								КонецПопытки;
								
								Если Аттр.Выбран()=0 Тогда
									Продолжить;
								КонецЕсли;
								
								Если Метаданные.Справочник(Аттр.Вид()).Реквизит("IDD").Выбран()=0 Тогда
									Продолжить;
								КонецЕсли;
								БДДоп.НоваяСтрока();
								БДДоп.IDD=Аттр.IDD;
								БДДоп.VIDD=Аттр.Вид();
								БДДоп.Date=Док.ДатаДок;
							КонецЕсли;
						КонецЦикла;						
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;	        

		КонецЕсли;	
		БД.Следующая();
	КонецЦикла;	        
	
	СписВыгрДокументов=0;
	БДДоп.Свернуть("IDD,VIDD,Date","");
	//Теперь алаверды
	                   
	
	БДДоп.ВыбратьСтроки();
	Пока БДДоп.ПолучитьСтроку()=1 Цикл
		БД.Добавить();
		БД.IDD=БДДоп.IDD;
		БД.TIP=11;
		БД.VIDD=БДДоп.VIDD;
		БД.Date=БДДоп.Date;
		БД.Записать();
	КонецЦикла;
КонецПроцедуры
//_____________________________________________________________________________

Функция ВыгрузитьИзмененияВОднуБазу(ВыгрБаза)
	ПЕрем БДИзменения,БДУдаления,БДПакеты;
	//НоваяВыгрузка
	ИмяТекстовогоФайла=СокрЛП(ПутьКБазеПриВыгрузке)+"\"+СокрЛП(НомерПакетаВыгрузки)+".mod";
	Если СтрДлина(Сокрлп(ПутьКБазеПриВыгрузке))>2 Тогда
		Если ФС.СуществуетФайл(ПутьКБазеПриВыгрузке)=0 Тогда
			Предупреждение("В базе "+ВыгрБаза+" неправильно задан путь выгрузки !
			| Данные выгружаться не будут.",10);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	М_Сообщить("Открываем базы");
	
	//БДМОД=0;БДУдаленийМОД=0;БДПакетыМОД=0;
	//открываем файлы где копятся изменения и где фиксируются все удаления
	Если ОткрытьФайлМОДПоИмени(БДИзменения,"Изменения","_tran1")=0 Тогда
		Предупреждение("Ошибка открытия базы ""Изменений"" - возможно она занята другим пользователем",10);
		Возврат 0;
	КонецЕсли;
	Если ОткрытьФайлМОДПоИмени(БДУдаления,"Удаления","_tran3")=0 Тогда
		Предупреждение("Ошибка открытия базы ""Удалений"" - возможно она занята другим пользователем",10);
		Возврат 0;
	КонецЕсли;
	Если ОткрытьФайлМОДПоИмени(БДПакеты,"Пакеты","_tran2")=0 Тогда //это открывается временный файл !!!
		Предупреждение("Ошибка открытия базы ""Пакеты"" - возможно она занята другим пользователем",10);
		Возврат 0;
	КонецЕсли;
	
	М_Сообщить("Обрабатывем удаленные объекты...");
	//добавляем удаленные объекты в базу изменений
	
	ДобавитьУдаленныеОбъектыВ_БазуИзменений(БДИзменения,БДУдаления);
	
	//Для всех баз формируем пакеты
	//если уже есть пакеты с пустыми номерами (т.е. = "_") для отправки, то задаем им номера
	//Алгоритм Успеха
	Если флРегИзмСпр=0 Тогда
		состояние("Регистрация изменений справочников...");
		РегистрироватьИзмененияСправочников(БДИзменения); 
	КонецЕсли;
	Состояние("Выгрузка шапки...");
	//Алгоритм Успеха
	
	НоваяВерсияШапки=0;//флаг изменения версии шапки
	ВыгрузитьШапку(ВыгрБаза);//для заполнения правил выгрузки !!
	
	
	//Смотрим режим работы
	Если МаксНомерПакетаВыгрузки=НомерПакетаВыгрузки Тогда
		//это формируется новый пакет
		Если РежимВыгрузки=1 Тогда
			//пройдемся по всем базам и допишем все изменения в базу пакетов
			Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
			//формируем пустые номера пакетов для баз отличных от заданных и с конкретным номером - в ином случае
			Спр.ВыбратьЭлементы();
			Пока Спр.ПолучитьЭлемент()=1 Цикл
				Если (Спр.Выгрузка=1)или(ВыгрБаза=Спр.ТекущийЭлемент()) Тогда
					М_Сообщить("Подготавливаем данные для базы "+Спр.Наименование);
					НомПакета="_";
					СформироватьНовыйПакет(БДИзменения,БДПакеты,Спр.ТекущийЭлемент(),НомПакета);
				КонецЕсли;
			КонецЦикла;
//			БДИзменения.ОчиститьФайл();
			
			//**************** переформирование пакета и контроль длины
			//Изменяем пакеты с номерами "_" в номера 	НомерПакетаВыгрузки
			//одновременно, если число объектов в пакете превысило допустимый размер,
			//то будет сформирован новый пакет и т.д. ...
			ИзНомеров="_";
			ВНомера=НомерПакетаВыгрузки;
			ПереформироватьПакет(БДПакеты,ВыгрБаза,ВНомера,ИзНомеров);
			//****************
		ИначеЕсли РежимВыгрузки=2 Тогда
			//если режим выгрузки за период,то
			М_Сообщить("Режим выгрузки за период...");
			НомерПакетаВыгрузки=МаксНомерПакетаВыгрузки;//т.е. всегда создаем новый пакет !!!
			НомерПакетаИБазы=Прав("0000000"+Сокрп(Сокрп(ВыгрБаза.IDD)),7)+"П";
			Рез=СформироватьЗаПериод(БДПакеты,НомерПакетаИБазы);
			Если Рез=0 Тогда
				Возврат 0;
			КонецЕсли;
			
			
			//**************** переформирование пакета и контроль длины
			//Изменяем пакеты с номерами "_" в номера 	НомерПакетаВыгрузки
			//одновременно, если число объектов в пакете превысило допустимый размер,
			//то будет сформирован новый пакет и т.д. ...
			ИзНомеров="П";
			ВНомера=НомерПакетаВыгрузки;
			ПереформироватьПакет(БДПакеты,ВыгрБаза,ВНомера,ИзНомеров);
			//****************
		ИначеЕсли РежимВыгрузки=3 Тогда
			//если режим выгрузки выборочно
			М_Сообщить("Режим выборочной выгрузки ...");
			НомерПакетаВыгрузки=МаксНомерПакетаВыгрузки;//т.е. всегда создаем новый пакет !!!
			
			СоздатьНовыйПакетСИнформациейВыборочно(ВыгрБаза,БДПакеты,"В");
			
			
			//**************** переформирование пакета и контроль длины
			//Изменяем пакеты с номерами "_" в номера 	НомерПакетаВыгрузки
			//одновременно, если число объектов в пакете превысило допустимый размер,
			//то будет сформирован новый пакет и т.д. ...
			ИзНомеров="В";
			ВНомера=НомерПакетаВыгрузки;
			ПереформироватьПакет(БДПакеты,ВыгрБаза,ВНомера,ИзНомеров);
			//****************
		ИначеЕсли РежимВыгрузки=4 Тогда
			//если режим выгрузки по списку значения
			М_Сообщить("Режим выгрузки по списку значения ...");
			Если ТипЗначенияСтр(СписокВыборочнойВыгрузки)<>"СписокЗначений" Тогда
				М_Сообщить("Не указан список выгрузки объектов. Выгрузка отменена.");     
				ЗаписатьВЛогОшибку("Не указан список выгрузки объектов. Выгрузка отменена.");     
				Возврат 0;
			КонецЕсли;	
			
			КолВыгрузки=СписокВыборочнойВыгрузки.РазмерСписка();
			Если КолВыгрузки<1 Тогда
				М_Сообщить("Список выгрузки пустой. Выгрузка отменена.");
				ЗаписатьВЛогОшибку("Список выгрузки пустой. Выгрузка отменена.");
				Возврат 0;
			КонецЕсли;	     
			
			НомерПакетаВыгрузки=МаксНомерПакетаВыгрузки;//т.е. всегда создаем новый пакет !!!
			НомерПакетаИБазы=Прав("0000000"+Сокрп(Сокрп(ВыгрБаза.IDD)),7)+"С";
			
			Для А=1 По КолВыгрузки Цикл
				ВыгрОбъект=СписокВыборочнойВыгрузки.ПолучитьЗначение(А);
				ЗаписатьВФайлБД(БДПакеты,ВыгрОбъект,НомерПакетаИБазы);				
			КонецЦикла;
			
			//**************** переформирование пакета и контроль длины
			//Изменяем пакеты с номерами "_" в номера 	НомерПакетаВыгрузки
			//одновременно, если число объектов в пакете превысило допустимый размер,
			//то будет сформирован новый пакет и т.д. ...
			ИзНомеров="С";
			ВНомера=НомерПакетаВыгрузки;
			ПереформироватьПакет(БДПакеты,ВыгрБаза,ВНомера,ИзНомеров);
		КонецЕсли;
		
		//заполняем переменные цикла выгрузки (т.е. какие пакеты собственно надо выгружать)
		//Одновременно смотрим может надо повторить предыдущие пакеты
		НомерОт=НомерПодтвержденногоПакетаЗагрузки+1;
		НомерДо=НомерПакетаВыгрузки;
		
		ПропускатьДо=ПолучитьНомерПакетаВыгрузки(ВыгрБаза);
		ПропускатьОт=ПропускатьДо-ВыгрБаза.КоличествоЦиклов+1;
		
	Иначе
		//это повтор ранее выгруженного пакета
		М_Сообщить("Режим повтора пакета № "+НомерПакетаВыгрузки+" ...");
		//выгружаем только какой-то один пакет (ручной повтор выгрузки)
		НомерОт=НомерПакетаВыгрузки;
		НомерДо=НомерПакетаВыгрузки;
		
		ПропускатьОт=НомерДо;//ставим одинаковые параметры - т.е. на самом деле ничего не пропускаем
		ПропускатьДо=НомерДо;
		
	КонецЕсли;
	
	
	
	
	РежимОтправкиПакетов=1;//эта переменная отслеживает режим как нам послать подтверждение о том, что пакет
	//из периферийной базы до нас дошел
	//0-создаем отдельный пакет подтверждения (где будет только один  заголовок)
	//1-создаем новый пакет в периф базу с новыми данными
	
	Для ААА=НомерОт По НомерДо Цикл
		Если (ААА>=ПропускатьОт)И(ААА<ПропускатьДо) Тогда
			//	Сообщить("Пропущен пакет № "+ААА);
			Продолжить;
		КонецЕсли;
		
		М_Сообщить("Выгружаем пакет № "+ААА);
		Если ВыгрузитьШапку(ВыгрБаза)=0 Тогда
			Продолжить;
		Иначе
			
			КакПомечать=ААА;
			КакиеВыгружать=ААА;
			Рез=ВыгрузитьТело(БДПакеты,ВыгрБаза,КакПомечать,КакиеВыгружать,ААА);
			Если Рез=0 Тогда
				Если НомерДо=ААА Тогда //это последний пакет - данных нет - выгрузим только подтверждение  !!
					РежимОтправкиПакетов=0;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбработкаПримера=1 Тогда
			ПодИмяПакета="sample";
		Иначе
			ПодИмяПакета=СокрЛП(ААА);
		КонецЕсли;
		ИмяТекстовогоФайла=СокрЛП(ПутьКБазеПриВыгрузке)+"\"+ПодИмяПакета+".mod";
		Т.ЗаменитьСтроку(13,ТекущееВремя());
		//выгружаем даты встретившихся документов - причем берем дату независимо от принадлежности документа к определенному типу учета
		Т.ЗаменитьСтроку(9,Строка(МаксДатаВыгрДокумента));  //т.к. могут быть ситуации, когда из накладной
		Т.ЗаменитьСтроку(10,Строка(МаксДатаВыгрДокумента));//оперативного учета будет делаться бух. накладная
		Т.ЗаменитьСтроку(Т.КоличествоСтрок(),Т.ПолучитьСтроку(Т.КоличествоСтрок())+"        ");
		Т.Записать(ИмяТекстовогоФайла);
		М_Сообщить("Записываем файл "+ИмяТекстовогоФайла);
		Если Фс.СуществуетФайл(ИмяТекстовогоФайла)=0 Тогда
			Т.Записать(КаталогИБ()+ПодИмяПакета+".mod");
			Сообщить("Ошибка записи. Пакет "+ПодИмяПакета+" записан в каталог "+КаталогИБ()); 
			ЗаписатьВЛогОшибку("Ошибка записи. Пакет "+ПодИмяПакета+" записан в каталог "+КаталогИБ()); 
		КонецЕсли;
		Т=0;
	КонецЦикла;
	
	Если РежимОтправкиПакетов=0 Тогда
			//выгружаем подтверждение
			Т=СоздатьОбъект("Текст");
			Т.ДобавитьСтроку(ВерсияПротоколаМОД);// 1 номер версии протокола
			Т.ДобавитьСтроку(Константа.IDD);// 2
			Т.ДобавитьСтроку(Сокрп(ВыгрБаза.IDD));// 3
			Т.ДобавитьСтроку("Подтверждение");// 4
			Т.ДобавитьСтроку(Строка(НомерПакетаЗагрузки-1)); //5
			Для А=6 По 32 Цикл
				Т.ДобавитьСтроку("   ");
			КонецЦикла;
			ИмяТекстовогоФайла=СокрЛП(ПутьКБазеПриВыгрузке)+"\"+СокрЛП(НомерПакетаВыгрузки)+".mod";
			Т.Записать(ИмяТекстовогоФайла);
			М_Сообщить("Выгрузили только подтверждение о последнем загруженном пакете из периферийной базы","I");
	КонецЕсли;
	Если ВыгрБаза.КоличествоЦиклов=0 Тогда //это режим без подтверждения пакетов
		//поэтому удаляем информацию о пакете
		Для АА=Число(ПолучитьНомерПодтвержденногоПакетаЗагрузки(ВыгрБаза))-2 По НомерПакетаВыгрузки Цикл
			Ключ=Прав("0000000"+Сокрлп(Сокрп(ВыгрБаза.IDD)),7)+Сокрлп(Строка(АА));
			УдалитьИнформациюОПакете(БДПакеты,Ключ);
		КонецЦикла;
		БДПакеты.Сжать();
		НомерПодтвержденногоПакетаЗагрузки=НомерПакетаВыгрузки;
	КонецЕсли;
	
	БДПакеты.ЗакрытьФайл();
	БДИзменения.ЗакрытьФайл();
	БДУдаления.ЗакрытьФайл();
	Возврат 1;
КонецФункции

//_____________________________________________________________________________

//_____________________________________________________________________________
Функция ВыгрузитьВФТП()
	//подготавливаем файл с командами ftp
	ВременныйСкриптФайл="InetFTP.tmp";
	Т=СоздатьОбъект("Текст");
	Т.ДобавитьСтроку("open "+Сокрлп(База.АдресСервера));
	Т.ДобавитьСтроку(Сокрлп(База.Логин));
	Т.ДобавитьСтроку(Сокрлп(База.Пароль));
	Т.ДобавитьСтроку("prompt");
	Т.ДобавитьСтроку("binary");
	Т.ДобавитьСтроку("mkdir "+Сокрлп(База.КаталогВыгрузки));
	Т.ДобавитьСтроку("cd "+Сокрлп(База.КаталогВыгрузки));
	Т.ДобавитьСтроку("put flag.mod"); //посылаем проверочный флаг
	Т.ДобавитьСтроку("mput *.mod");//get 
	Т.ДобавитьСтроку("mput *.a??");//get 
	Т.ДобавитьСтроку("get flag.mod flag2.mod");//считываем - его
	Т.ДобавитьСтроку("quit");//выход
	
	Т.Записать(ПутьКБазеПриВыгрузке+"\"+ВременныйСкриптФайл);
	
	ФайлФлага=ПутьКБазеПриВыгрузке+"\flag.mod";
	ФайлФлага2=ПутьКБазеПриВыгрузке+"\flag2.mod";
	Т=СоздатьОбъект("Текст");
	Т.ДобавитьСтроку("=Проверка связи=");
	Т.Записать(ФайлФлага);
	Если ФС.СУществуетФайл(ФайлФлага2)=1 Тогда
		ФС.УдалитьФайл(ФайлФлага2);
	КонецЕсли;
	
	Фс.УстТекКаталог(ПутьКБазеПриВыгрузке);
	Команда="ftp -s:"""+ВременныйСкриптФайл+""">ftp_out.log";
	КомандаСистемы(Команда);
	Фс.УдалитьФайл(ПутьКБазеПриВыгрузке+"\"+ВременныйСкриптФайл);
	Рез=ФС.СУществуетФайл(ФайлФлага2); //если файл существует, то соединение было успешное
	Возврат Рез;
КонецФункции 


//_____________________________________________________________________________
Процедура ЗаполнитьИнфоМОД()
	Перем Мас[5];
	Мас[1]="Изм.";
	Мас[2]="Пер.";
	Мас[3]="Выб.";
	
	//выгрузка
	ВыгрузкаИнфо="";
	Если Выгрузка=1 Тогда
		ВыгрузкаИнфо="Выгрузка:";
		ВыгрузкаИнфо=ВыгрузкаИнфо+Мас[РежимВыгрузки];
		Если РежимВыгрузки>1 Тогда
			ВыгрузкаИнфо=ВыгрузкаИнфо+Лев(Строка(ДатаН),5);
			ВыгрузкаИнфо=ВыгрузкаИнфо+"- "+Лев(Строка(ДатаК),5);
		КонецЕсли;
		ВыгрузкаИнфо=ВыгрузкаИнфо+?(ПризнакОтправленияMD=1," MD ","     ");
		ВыгрузкаИнфо=ВыгрузкаИнфо+?(ВыгружатьШапкуПакетовОтдельно=1,"Ш.отд.","Ш.вн.");
	КонецЕсли;
	
	//загрузка
	ЗагрузкаИнфо="";
	Если Загрузка=1 Тогда
		ЗагрузкаИнфо="Загрузка:";
		ЗагрузкаИнфо=ЗагрузкаИнфо+?(ПриоритетностьБазы=1,"Приор.","     ");
		ЗагрузкаИнфо=ЗагрузкаИнфо+?(МиграцияИзменений=1,"Мигр.","     ");
		ЗагрузкаИнфо=ЗагрузкаИнфо+?(ИспользоватьТранзакцию=1,"Общ.транз.","Част.транз.");
		ЗагрузкаИнфо=ЗагрузкаИнфо+?(ПризнакПолученияMD=1,"MD","    ");
	КонецЕсли;
	
	//Общие парамметры
	ОбщиеИнфо="Общие:     ";
	ОбщиеИнфо=ОбщиеИнфо+?(База.ВстроеннаяАрхивация=1,"Архивация","      ");
	ОбщиеИнфо=ОбщиеИнфо+?(База.ИспользоватьФТП=1," FTP","");
	ОбщиеИнфо=ОбщиеИнфо+?(База.ПередачаПоПочте=1," E-Mail","");
	
	
	Форма.Обновить();
КонецПроцедуры //ЗаполнитьИнфоМОД
//_____________________________________________________________________________

Функция Выгрузить()
	ЗаполнитьИнфоМОД();
	М_Состояние("Подготовка выгрузки изменений ...");
	Форма.ИспользоватьСлой("Инфо",1);
	НомерПакетаВыгрузкиДляАрхива=НомерПакетаВыгрузки;
	Рез=ВыгрузитьИзмененияВОднуБазу(База);
	Если Рез=0 Тогда
		Возврат 0;
	КонецЕсли;
	
	
	
	ИмяТекстовогоФайла=СокрЛП(ПутьКБазеПриВыгрузке)+"\"+Сокрлп(Строка(НомерПакетаВыгрузки))+".mod";
	
	Если ПризнакОтправленияMD=1 Тогда
		А0="";А1="";А2="";А3="";А4="";
		ФайлИсточникMD=КаталогБазыДанных()+"1cv7.md";
		Фс.АтрибутыФайла(ФайлИсточникMD,А0,А1,А2,А3,А4);
		Версия=Сокрлп(""+Сокрлп(А0)+Сокрлп(А1)+Сокрлп(А2)+Сокрлп(А4));
		СтараяВерсия=Сокрлп(База.MD);
		Если Версия<>СтараяВерсия Тогда
			Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
			Спр.НайтиЭлемент(База);
			Спр.MD=Версия;
			Спр.Записать();
			ФайлMD=СокрЛП(ПутьКБазеПриВыгрузке)+"\1cv7.md";
			Фс.УдалитьФайл(ФайлMD);
			ФС.КопироватьФайл(ФайлИсточникMD,ФайлMD,0);
			М_Сообщить("Скопирован md-файл в каталог выгрузки пакетов...");
		КонецЕсли;
	КонецЕсли;
	
	Если (Сокрлп(База.СкриптШаблонВыгрузки)<>"")И(Сокрлп(База.СкриптРабочийВыгрузки)<>"") Тогда
		ОбработатьСкрипт(База.СкриптШаблонВыгрузки,База.СкриптРабочийВыгрузки);
	КонецЕсли;
	
	Если ВстроеннаяАрхивация=1 Тогда
		//выполняем архивирование и удаление пакетов
		ФС.УстТекКаталог(ПутьКБазеПриВыгрузке);
		//подготовка имен и ключей ...
		ИмяАрхива=База.ПрефиксАрхиваВыгрузки;//
		ИмяАрхива=Сокрлп(ИмяАрхива)+Строка(НомерПакетаВыгрузкиДляАрхива)+".arj";
		Размер="";
		Если База.РазмерАрхива>9 Тогда
			Размер=" -v"+Сокрлп(База.РазмерАрхива)+"k";
		КонецЕсли;
		Пароль="";
		Если Сокрлп(База.ПарольАрхива)<>"" Тогда
			Пароль=" -g"+Сокрп(База.ПарольАрхива);
		КонецЕсли;
		
		//перенос файлов в архив
		Команда=""""+КаталогИБ()+"arj.exe"""+" m"+Размер+Пароль+" -y "+ИмяАрхива+" *.mod *.md";
		КомандаСистемы(Команда);
		
	КонецЕсли;
	
	Если СокрЛП(База.КомандаПриВыгрузке)<>"" Тогда
		КомандаСистемы(База.КомандаПриВыгрузке);
	КонецЕсли;
	Если ИспользоватьФТП=1 Тогда
		//передача через Интернет
		Состояние("Отправление пакетов по FTP");
		Пока ВыгрузитьВФТП()=0 Цикл
			Сообщить("Соединение не получилось !");
			Рез=Вопрос("Выгрузка на ftp-сервер не удалась.
			|Повторить попытку ?",1,50);
			Если Рез=2 Тогда //нажата кнопка отмена !!
				ЗаписатьВЛогОшибку("Неудачная попытка соединение по ftp");
				Возврат 0;  
				
			КонецЕсли;
		КонецЦикла;
		ОчиститьКаталог(ПутьКБазеПриВыгрузке);	
	ИначеЕсли ПередачаПоПочте=1 Тогда
		Состояние("Отправление пакетов по E-Mail");
		Попытка
			Почта=СоздатьОбъект("Mod.Mail");
		Исключение
			//объект еще не инициализирован, т.е. первая отправка почты из МОД
			//при исталляции МОД соответствующая программа работы с E-Mail должна
			//быть записана в каталог ИБ
			Состояние("Первичный запуск программы E-Mail");
			ЗапуститьПриложение(КаталогИБ()+"MODMail.exe");
			Для А=1 По 3 Цикл
				Время=ТекущееВремя();
				Пока Время=ТекущееВремя() Цикл
				КонецЦикла;
			КонецЦикла;
			Состояние("Отправление пакетов по E-Mail");
			
			//дубль два !
			Попытка
				Почта=СоздатьОбъект("Mod.Mail");
			Исключение
				Сообщить("Невозможно создать OLE-объект для работы с электронной почтой !","!");
				Сообщить("Отправка по E-Mail невозможна !","!"); 
				ЗаписатьВЛогОшибку("Невозможно создать OLE-объект для работы с электронной почтой ! Отправка по E-Mail невозможна !");
				Возврат 0;
			КонецПопытки;
		КонецПопытки;
		
		Почта.Подключиться(Сокрлп(Константа.IDD),Сокрлп(Константа.ПарольМОД),"","");
		Почта.НовоеСообщение();
		ОбратныйАдрес=База.ОбратныйАдрес;
		Почта.ОбратныйАдрес=Константа.IDD+"@pb.ru";
		Почта.ДобавитьАдрес(База.АдресПолучателя);
		
		
		Почта.Заголовок=База.ЗаголовокДляОтправки;
		Почта.Текст="Пакеты Менеджера обмена данными ("+ТекущаяДата()+")";
		Почта.ИмяОтправителя=ИмяМОД+"-ИД-"+Константа.IDD;


		//присоединяем пакеты МОД
		Стр=Сокрлп(ФС.НайтиПервыйФайл(Сокрлп(ПутьКБазеПриВыгрузке)+"\*.mod"));
		Пока Стр<>"" Цикл
			Почта.ДобавитьФайл(Сокрлп(ПутьКБазеПриВыгрузке)+"\"+Стр);
			Стр=Сокрлп(ФС.НайтиСледующийФайл());
		КонецЦикла;
		
		//присоединяем архивы МОД
		Стр=Сокрлп(ФС.НайтиПервыйФайл(Сокрлп(ПутьКБазеПриВыгрузке)+"\*.a??"));
		Пока Стр<>"" Цикл
			Почта.ДобавитьФайл(Сокрлп(ПутьКБазеПриВыгрузке)+"\"+Стр);
			Стр=Сокрлп(ФС.НайтиСледующийФайл());
		КонецЦикла;
		
		
		
		//посылаем по почте базе с номером IDD
		Почта.Послать(База.IDD);
		
		УспешноеЗавершение=Почта.УспешноеЗавершение();
		Почта.Отключиться();
		Почта=0;
		
		//Если УспешноеЗавершение=0 Тогда
		//	Сообщить("Ошибка при передаче !");
		//	Возврат 0;//произошла какая-то ошибка
		//КонецЕсли;
		//все пакеты отправлены по E-Mail - удаляем их из нашей базы
		ОчиститьКаталог(ПутьКБазеПриВыгрузке);	
	КонецЕсли;
	
	
	//увеличиваем счетчик пакетов
	Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
	Спр.НайтиЭлемент(База);
	Если НомерПакетаВыгрузки=МаксНомерПакетаВыгрузки Тогда
		НомерПакетаВыгрузки=НомерПакетаВыгрузки+1;
		МаксНомерПакетаВыгрузки=НомерПакетаВыгрузки;
		База=Спр.ТекущийЭлемент();
		//а теперь позиционируемся на ведущий элемент (по которому ведется сквозная нумерация пакетов)
		ПолучитьНомерПакетаВыгрузки(Спр.ТекущийЭлемент(),Спр);
		Спр.НомерПакетаВыгрузки=НомерПакетаВыгрузки;
		Спр.НомерПодтвержденногоПакетаЗагрузки=НомерПодтвержденногоПакетаЗагрузки;
		Спр.Записать();
		
		ЗаполнитьСписокПакетов();
	КонецЕсли;//иначе повтор ранее отосланного пакета
	М_Сообщить("Выгрузка данных завершена");
	Возврат 1;
КонецФункции //Выгрузить

//_____________________________________________________________________________

Функция Подтверждение(ВыгрБаза="",Знач Номер="",Интерактивно=0)
	ПЕрем БДПакеты;
	Если ВыгрБаза="" Тогда
		ВыгрБаза=База;
		Если База.Выбран()=0 Тогда
			Предупреждение("Не выбрана база, из которой получено подтверждение !",10);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Если Номер="" Тогда
		Номер=НомерПакетаВыгрузки;
	КонецЕсли;
	
	Если Номер=0 Тогда
		Возврат 1;
	КонецЕсли;
	
	Если Номер>=МаксНомерПакетаВыгрузки Тогда
		Номер=МаксНомерПакетаВыгрузки-1;
	КонецЕсли;
	
	Если Интерактивно=0 Тогда
	    ПодПрефикс="_";
	Иначе
	    ПодПрефикс="";
	КонецЕсли;    
	//БДМОД=0;БДУдаленийМОД=0;БДПакетыМОД=0;
	Если ОткрытьФайлМОДПоИмени(БДПакеты,"Пакеты",ПодПрефикс+"tran2")=0 Тогда
		Предупреждение("Ошибка открытия базы ""Пакеты"" - возможно она занята другим приложением",10);
		Возврат 0;
	КонецЕсли;
	
	М_Состояние(ВыгрБаза.Наименование+" - удаление подтвержденных пакетов.");
	
	//здесь цикл для того, чтобы удалить более ранние пакеты
	Для АА=ПолучитьНомерПодтвержденногоПакетаЗагрузки(ВыгрБаза)-2 По Номер Цикл
		Ключ=Прав("0000000"+Сокрлп(Сокрп(ВыгрБаза.IDD)),7)+Сокрлп(Строка(АА));
		УдалитьИнформациюОПакете(БДПакеты,Ключ);
	КонецЦикла;
	
	БДПакеты.Сжать();
	БДПакеты=0;
	
	Спр="";
	Если Число(ПолучитьНомерПодтвержденногоПакетаЗагрузки(ВыгрБаза,Спр))<Номер Тогда
		Спр.НомерПодтвержденногоПакетаЗагрузки=Номер;
		НомерПодтвержденногоПакетаЗагрузки=Номер;
	КонецЕсли;//иначе повтор ранее отосланного пакета
	Спр.Записать();
	ЗаполнитьСписокПакетов();
	Возврат 1;
КонецФункции//УстноеПодтверждени

//_____________________________________________________________________________
Функция ЗагрузитьИзФТП()
	//подготавливаем файл с командами ftp
	ВременныйСкриптФайл="InetFTP.tmp";
	Т=СоздатьОбъект("Текст");
	Т.ДобавитьСтроку("open "+Сокрлп(База.АдресСервера));
	Т.ДобавитьСтроку(Сокрлп(База.Логин));
	Т.ДобавитьСтроку(Сокрлп(База.Пароль));
	Т.ДобавитьСтроку("prompt");
	Т.ДобавитьСтроку("binary");
	Т.ДобавитьСтроку("mkdir "+Сокрлп(База.КаталогЗагрузки));
	Т.ДобавитьСтроку("cd "+Сокрлп(База.КаталогЗагрузки));
	//	Т.ДобавитьСтроку("get flag.mod"); //получаем проверочный флаг
	Т.ДобавитьСтроку("mget *");
	Т.ДобавитьСтроку("quit");//выход
	Т.Записать(ПутьКБазеПриЗагрузке+"\"+ВременныйСкриптФайл);
	
	ФайлФлага=ПутьКБазеПриЗагрузке+"\flag.mod";
	Если ФС.СУществуетФайл(ФайлФлага)=1 Тогда
		ФС.УдалитьФайл(ФайлФлага);
	КонецЕсли;
	
	Фс.УстТекКаталог(ПутьКБазеПриЗагрузке);
	Команда="ftp -s:"""+ВременныйСкриптФайл+""">ftp_in.log";
	КомандаСистемы(Команда);
	
	Рез=ФС.СУществуетФайл(ФайлФлага); //если файл существует, то соединение было успешное
	Если Рез=1 Тогда //надо очистить каталог ftp
		ВременныйСкриптФайл="InetFTP.tmp";
		Т=СоздатьОбъект("Текст");
		Т.ДобавитьСтроку("open "+Сокрлп(База.АдресСервера));
		Т.ДобавитьСтроку(Сокрлп(База.Логин));
		Т.ДобавитьСтроку(Сокрлп(База.Пароль));
		Т.ДобавитьСтроку("prompt");
		Т.ДобавитьСтроку("binary");
		Т.ДобавитьСтроку("mkdir "+Сокрлп(База.КаталогЗагрузки));
		Т.ДобавитьСтроку("cd "+Сокрлп(База.КаталогЗагрузки));
		Т.ДобавитьСтроку("mdelete *");
		Т.ДобавитьСтроку("quit");//выход
		Т.Записать(ПутьКБазеПриЗагрузке+"\"+ВременныйСкриптФайл);
		
		Команда="ftp -s:"""+ВременныйСкриптФайл+""">ftp_del.log";
		КомандаСистемы(Команда);
	КонецЕсли;
	Фс.УдалитьФайл(ПутьКБазеПриЗагрузке+"\"+ВременныйСкриптФайл);
	
	Возврат Рез;
КонецФункции 
//_____________________________________________________________________________


Процедура Загрузить()
	ЗаполнитьИнфоМОД();
	Форма.ИспользоватьСлой("Инфо",1);
	
	
	СопоставлятьПеречисления=1;
	ПришлоТолькоПодтверждение=0;
	ИмяТекстовогоФайла=СокрЛП(ПутьКБазеПриЗагрузке)+"\"+СокрЛП(Строка(Число(НомерПакетаЗагрузки)))+".mod";
	
	
	Если (Сокрлп(База.СкриптШаблонЗагрузки)<>"")И(Сокрлп(База.СкриптРабочийЗагрузки)<>"") Тогда
		ОбработатьСкрипт(База.СкриптШаблонЗагрузки,База.СкриптРабочийЗагрузки);
	КонецЕсли;
	
	Если СокрЛП(База.КомандаПриЗагрузке)<>"" Тогда
		КомандаСистемы(База.КомандаПриЗагрузке);
	КонецЕсли;
	Если ИспользоватьФТП=1 Тогда
		//прием из Интернета
		Состояние("Прием пакетов по FTP");
		Пока ЗагрузитьИзФТП()=0 Цикл
			Сообщить("Соединение не получилось !");
			Рез=Вопрос("Загрузка из ftp-сервера не удалась или нет данных.
			|Повторить попытку ?",1,50);
			Если Рез=2 Тогда //нажата кнопка отмена !! 
				ЗаписатьВЛогОшибку("неудачная попытка соединения по ftp");
				Возврат ;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ПередачаПоПочте=1 Тогда
		Состояние("Прием пакетов по E-Mail");
		Попытка
				Почта=СоздатьОбъект("Mod.Mail");
		Исключение
			//объект еще не инициализирован, т.е. первая отправка почты из МОД
			//при исталляции МОД соответствующая программа работы с E-Mail должна
			//быть записана в каталог ИБ
			Состояние("Первичный запуск программы E-Mail");
			ЗапуститьПриложение(КаталогИБ()+"MODMail.exe");
			Для А=1 По 3 Цикл
				Время=ТекущееВремя();
				Пока Время=ТекущееВремя() Цикл
				КонецЦикла;
			КонецЦикла;
			Состояние("Прием пакетов по E-Mail");
			
			//дубль два !
			Попытка
				Почта=СоздатьОбъект("Mod.Mail");
			Исключение
				Сообщить("Невозможно создать OLE-объект для работы с электронной почтой !","!");
				Сообщить("Получение пакетов по E-Mail невозможно !","!"); 
				ЗаписатьВЛогОшибку("Невозможно создать OLE-объект для работы с электронной почтой ! Получение пакетов по E-Mail невозможно !");
				Возврат ;
			КонецПопытки;
		КонецПопытки;
		
		Почта.Подключиться(Сокрлп(Константа.IDD),Сокрлп(Константа.ПарольМОД),ПутьКБазеПриЗагрузке,"");
		Если Почта.ЧислоСообщений()>0 Тогда
		Почта.ВыбратьСообщения();
		Пока Почта.ПолучитьСообщение()=1 Цикл
			ОтКуда=Почта.АдресОтправителя();
			Если Найти(ОтКуда,ИмяМОД+"-ИД-"+?(База.IDD=ИДДляОтладки,"",База.IDD))=0 Тогда //почта не из базы, с которой осуществляется обмен
				Продолжить;
			КонецЕсли;
			
			Заголовок=Почта.Заголовок;
			ЗаголовокДляПолучения=Сокрлп(База.ЗаголовокДляПолучения);
			Если ПустоеЗначение(ЗаголовокДляПолучения)=0 Тогда
				Если Найти(Заголовок,ЗаголовокДляПолучения)=0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Почта.ПрочитатьСообщение(1);
			Текст=Почта.Текст;
		КонецЦикла;
		
		//	УспешноеЗавершение=Почта.УспешноеЗавершение(); 
		//	Если УспешноеЗавершение=0 Тогда
		//		Сообщить("Ошибка при приеме почты !");
		//	    Возврат ;//произошла какая-то ошибка
		//	КонецЕсли;
		
		ОчиститьКаталог(ПутьКБазеПриЗагрузке,"*.mme");
		Иначе
		Сообщить("В почтовом ящике нет новых писем.");
		КонецЕсли;
		Почта.Отключиться();
		Почта=0;        
	КонецЕсли;
	
	
	Если ВстроеннаяАрхивация=1 Тогда
		//выполняем разархивирование пакетов
		ФС.УстТекКаталог(ПутьКБазеПриЗагрузке);
		//подготовка имен и ключей ...
		ИмяАрхива=База.ПрефиксАрхиваЗагрузки;
		ИмяАрхива=Сокрлп(ИмяАрхива)+"*.arj";
		Размер=" -v";
		Пароль="";
		Если Сокрлп(База.ПарольАрхива)<>"" Тогда
			Пароль=" -g"+Сокрп(База.ПарольАрхива);
		КонецЕсли;
		
		//перенос файлов из архива
		Команда=""""+КаталогИБ()+"arj.exe"""+" e -d"+Размер+Пароль+" -y "+ИмяАрхива;
		КомандаСистемы(Команда);
		
	КонецЕсли;
	
	
	Если ПризнакПолученияMD=1 Тогда
		ФайлИсточникMD=СокрЛП(ПутьКБазеПриЗагрузке)+"\"+"1cv7.md";
		Если ФС.СуществуетФайл(ФайлИсточникMD)=1 Тогда
			Сообщить("Внимание в каталоге загрузки обнаружен новый файл конфигурации (MD-файл) !!");
		КонецЕсли;
	КонецЕсли;
	
	
	СписокИзмененияИД=СоздатьОбъект("СписокЗначений");
	СписокПроводимыхДокументов=СоздатьОбъект("СписокЗначений");
	Если ИспользоватьТранзакцию=1 Тогда
		М_Сообщить("Открываем транзакцию загрузки данных");
		НачатьТранзакцию();//данные
	КонецЕсли;
	//кучу пакетов находящихся в каталоге загрузки загружаем в несколько циклов
	//поэтому вводим переменную - с какого номера повторять загрузку при след-м цикле
	//т.е. если в пакете не встретилось незагруженных ссылок и небыло таких же перед ним, то
	//след-й цикл начинаем как минимум со следующего
	НачНомерПакетаЗагрузки=НомерПакетаЗагрузки;
	Для НомерЦикла=1 По 3 Цикл
		СписокВторогоЦикла=СоздатьОбъект("СписокЗначений");
		НомерПакетаЗагрузки=НачНомерПакетаЗагрузки;
		Если База.IDD="0000000" Тогда
			ИмяФ=Сокрлп(ФС.НайтиПервыйФайл(СокрЛП(ПутьКБазеПриЗагрузке)+"\*.mod"));
			Если ИмяФ="" Тогда
				Перейти ~ОтменаЗагрузки;
			КонецЕсли;
			//есть какой-то текстовый файл
			ИмяТекстовогоФайла=КаталогВременныхФайлов()+"packet.tmp";
			//копируем в temp-каталог
			ФС.УдалитьФайл(ИмяТекстовогоФайла);
			ФС.КопироватьФайл(ИмяФ,ИмяТекстовогоФайла,0);
		Иначе
			ИмяТекстовогоФайла=СокрЛП(ПутьКБазеПриЗагрузке)+"\"+СокрЛП(Строка(Число(НомерПакетаЗагрузки)))+".mod";
		КонецЕсли;
		
		Если ОбработкаПримера=1 Тогда
			ИмяТекстовогоФайла=СокрЛП(ПутьКБазеПриЗагрузке)+"\sample.mod";
			НомерПакетаЗагрузки="sample.mod";
		КонецЕсли;
		
		Если ФС.СуществуетФайл(ИмяТекстовогоФайла)=0 Тогда
			Перейти ~ОтменаЗагрузки;
		КонецЕсли;
		
		Пока ФС.СуществуетФайл(ИмяТекстовогоФайла)=1 Цикл
			Если ИспользоватьТранзакцию=1 Тогда
				М_Сообщить("Открываем транзакцию загрузки данных");
				НачатьТранзакцию();//данные
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации("Начало загрузки пакета № "+НомерПакетаЗагрузки,"Загрузка",База.Наименование);
			М_Сообщить("Загружается пакет "+ИмяТекстовогоФайла);
			Кол=1;
			Рез=ЗагрузитьШапку(База,Кол,ИмяТекстовогоФайла); //мы находимся на позиции загрузки данных
			Если Рез=0 Тогда //ошибка загрузки
				Перейти ~ОтменаЗагрузки;
			КонецЕсли;
			Если Рез=1 Тогда //это пришли данные и их надо загрузить
				ЗагрузитьТело(База,Кол,НомерЦикла,НомерПакетаЗагрузки);
			КонецЕсли;
			Если НомерПодтвержденногоПакета>=Число(База.НомерПодтвержденногоПакетаЗагрузки) Тогда
				Если Подтверждение(База,НомерПодтвержденногоПакета)=0 Тогда
					М_Сообщить("Произошла ошибка при попытке подтвердить пакет № "+НомерПодтвержденногоПакетаЗагрузки+"
					|Попробуйте произвести устное подтверждение перейдя на закладку ""Подтверждение""","I");  
					ЗаписатьВЛогОшибку("Произошла ошибка при попытке подтвердить пакет № "+НомерПодтвержденногоПакетаЗагрузки);
				Иначе
					М_Сообщить("Получено подтверждение о выгр пакете "+НомерПодтвержденногоПакета);
				КонецЕсли;
			КонецЕсли;
			ЗаписьЖурналаРегистрации("Окончание загрузки пакета № "+НомерПакетаЗагрузки,"Загрузка",База.Наименование);
			
			//увеличиваем счетчик загр пакетов
			НомерПакетаЗагрузки=НомерПакетаЗагрузки+1;
			ИмяТекстовогоФайла=СокрЛП(ПутьКБазеПриЗагрузке)+"\"+СокрЛП(Строка(Число(НомерПакетаЗагрузки)))+".mod";
			Если СписокВторогоЦикла.РазмерСписка()=0 Тогда
				НачНомерПакетаЗагрузки=НомерПакетаЗагрузки;
			КонецЕсли;
			Если ИспользоватьТранзакцию=1 Тогда
				М_Сообщить("Фиксируем транзакцию загрузки данных");
				ЗафиксироватьТранзакцию();
			КонецЕсли;
			Если ОбработкаПримера=1 Тогда
			    Прервать;
			КонецЕсли;
		КонецЦикла;//по пакетам
		
		//подменяем список
		СписокВторогоЦикла2=СписокВторогоЦикла;
		Если СписокВторогоЦикла2.РазмерСписка()=0 Тогда
			Прервать;//не нужны больше допоплнительные циклы
		КонецЕсли;
		НуженДопЦикл=1;
		СписокВторогоЦикла=СоздатьОбъект("СписокЗначений");
	КонецЦикла;//по доп циклам
	
	
	//записываем в справочник номер загружаемого пакета
	Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
	Спр.НайтиЭлемент(База);
	Спр.НомерПакетаЗагрузки=НомерПакетаЗагрузки;
	Спр.Записать();
	Если ИспользоватьТранзакцию=1 Тогда
		Попытка
			М_Сообщить("Фиксируем транзакцию загрузки данных");
			ЗафиксироватьТранзакцию();
		Исключение
			НомерПакетаЗагрузки=Спр.НомерПакетаЗагрузки;
			Сообщить("Ошибка загрузки пакетов с данными из базы " +Спр.Наименование); 
			ЗаписатьВЛогОшибку("Ошибка загрузки пакетов с данными из базы " +Спр.Наименование)  ;
			НомерПакетаЗагрузки=База.НомерПакетаЗагрузки;
			Перейти ~ОтменаЗагрузки;
		КонецПопытки;
		
	КонецЕсли;
	
	//восстанавливаем ИД-коды объектов
	Стр_ИД="";
	НеРегистрироватьИзмененияМОД=0;
	КоличествоИзмененийИД=СписокИзмененияИД.РазмерСписка();
	Если НеИзменятьИДПриЗагрузке=1 Тогда
	Для А=1 по КоличествоИзмененийИД Цикл
		Зн=СписокИзмененияИД.ПолучитьЗначение(А,Стр_ИД);
		Если ТипЗначения(Зн)=11 Тогда
			Спр=СоздатьОбъект("Справочник."+Зн.Вид());
			Спр.НайтиЭлемент(Зн);
			Если Спр.Выбран()=1 Тогда
				Спр.IDD=Стр_ИД;
				Спр.Записать();
			КонецЕсли;
			//ПриИзмененииОбъекта(Спр.ТекущийЭлемент(),Спр.ТекущийЭлемент(),РабочаяДата(),1);
		ИначеЕсли ТипЗначения(Зн)=12 Тогда
			Док=СоздатьОбъект("Документ");
			Док.НайтиДокумент(Зн);
			Если Док.Выбран()=1 Тогда
				Док.IDD=Стр_ИД;
				Док.Записать();
			КонецЕсли;
			//ПриИзмененииОбъекта(Док.ТекущийДокумент(),Док.ТекущийДокумент(),Док.ДатаДок,1);
		КонецЕсли;
	КонецЦикла;
	Иначе
	Если КоличествоИзмененийИД>0 Тогда
	//если с данной базой обмен происходит только в качестве загрузки
	//и при этом стоит режим синхронизации по реквизиту, то у объектов
	//могут меняться ИДД и эти изменения надо передать в базу источник
	//надо доделать...	
	//Если Выгрузка=0 Тогда
	//	//если пользователь и не думает обмениваться с базой источником,
	//	//то надо ему напомнить
	//	Сообщить("При загрузке было произведено изменение IDD кодов.","I");
	//	Сообщить("Рекомендуем выполнить выгрузку ""Изменений IDD-кодов"" в базу источник","I");
	//КонецЕсли;
	
	КонецЕсли;
	КонецЕсли;
	СписокИзмененияИД=0; //обнуляем список
	
	
	//теперь без транзакции проводим документы (у которых стоит признак не загружать движения, а проводить)
	
	Если СписокПроводимыхДокументов.РазмерСписка()>0 Тогда
		М_Сообщить("Проводим загруженные документы");
	КонецЕсли;
	
	СписокПроводимыхДокументов.Сортировать(0,1);
	Для А=1 по СписокПроводимыхДокументов.РазмерСписка() Цикл
		НеРегистрироватьИзмененияМОД=1;
		ПроведениеПоАлгоритмуМОД=0;
		Док=СоздатьОбъект("Документ");
		Док.НайтиДокумент(СписокПроводимыхДокументов.ПолучитьЗначение(А));
		М_Сообщить("Проводится документ: "+Док.ДатаДок+" "+Док.ТекущийДокумент());
		ОшибкаПроведения="--нормально проведен--";
		Попытка
			ПЕремИмяОбработки=ОбработкаОбменДанными;
			Док.Провести();
			ОбработкаОбменДанными=ПЕремИмяОбработки;
		Исключение
			ОбработкаОбменДанными=ПЕремИмяОбработки;
			Сообщить("Ошибка проведения документа "+Док.ТекущийДокумент(),"!"); 
			ЗаписатьВЛогОшибку("Ошибка проведения документа ",Док.ТекущийДокумент());
			НеРегистрироватьИзмененияМОД=0;
			ПриИзмененииОбъекта(Док.ТекущийДокумент(),Док.ТекущийДокумент(),Док.ДатаДок,1);
			НеРегистрироватьИзмененияМОД=1;
			Сообщить("Признак непроведенного документа будет отправлен в периферийную базу");
			ОшибкаПроведения = ОписаниеОшибки();
		КонецПопытки; 
		//А вот тут надо писать запрос по обновлению журанала регистрации
		
		ТекстЗапроса="if not object_id('tempDb..#JournReg') is null 
			|begin 
					|Update #JournReg
					|Set NMAR = "+глПреобразоватьВФорматСКЛ(ОшибкаПроведения)+"
					|Where IDD = "+глПреобразоватьВФорматСКЛ(Док.IDD)+"
			|end";
		глИсполнитьСКЛ(ТекстЗапроса,0);

	КонецЦикла;
	НеРегистрироватьИзмененияМОД=0;
	
	
	//удаляем файл, который только что загружали
	Если База.IDD="0000000" Тогда
		ИмяФ=Сокрлп(ФС.НайтиПервыйФайл(СокрЛП(ПутьКБазеПриЗагрузке)+"\*.mod"));
		ФС.УдалитьФайл(ИмяФ);
	КонецЕсли;
	
	
	Если СписокВторогоЦикла2.РазмерСписка()<>0 Тогда
		ЗаписьЖурналаРегистрации("№№ "+НачНомерПакетаЗагрузки+"-"+(НомерПакетаЗагрузки-1)+" не загрузились ссылки:","Не загружены ссылки",База.Наименование);
		Для А=1 По СписокВторогоЦикла2.РазмерСписка() Цикл
			ЗаписьЖурналаРегистрации(СписокВторогоЦикла2.ПолучитьЗначение(А),"Не загружены ссылки",База.Наименование);
		КонецЦикла;
	КонецЕсли;
	
	М_Сообщить("Загрузка данных завершена !");
	Возврат;
	
	~ОтменаЗагрузки:
	Попытка
		ОтменитьТранзакцию();
	Исключение
	КонецПопытки;
	
	М_Сообщить("Загрузка отменена, данные не изменялись !");
КонецПроцедуры

//_____________________________________________________________________________

Функция Обмен()       
	Перем БДРегистрация;
	ТекущаяБаза=База;
	глСчетчикПОС=-1;
	Рез=1;
//	ОткрытьФайлМОДПоИмени(БДРегистрация,"ЖурналРегистрации","_JReg");
	Если ТекущаяБаза.Выбран()=1 Тогда
		Если ТекущаяБаза.ЭтоГруппа()=0 Тогда//в одну базу
			Если Загрузка=1 Тогда
				Загрузить();
			КонецЕсли;
			Если Выгрузка=1 Тогда
				Рез=Выгрузить();
			КонецЕсли;
		Иначе//в группу баз
			ППБ=СоздатьОбъект("Справочник.ПериферийныеБазы");
			ППБ.ИспользоватьРодителя(ТекущаяБаза);
			ППБ.ВыбратьЭлементы();
			Пока ППБ.ПолучитьЭлемент()=1 Цикл
				Если (ППБ.ЭтоГруппа()=0)  Тогда
					База=ППБ.ТекущийЭлемент();
					УстановитьБазу();
					Если Загрузка=1 Тогда
						Загрузить();
					КонецЕсли;
					
					Если Выгрузка=1 Тогда
						Рез=Выгрузить();
						Если Рез=0 Тогда
							//		    Возврат 0;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе	//во все базы
		//Если Вопрос("Вы действительно хотите произвести выгрузку во ВСЕ периферийные бызы?" +РазделительСтрок+
		//"Если нет, выберите базу выгрузки (или группу баз)",4,10)<>7 Тогда
		ППБ=СоздатьОбъект("Справочник.ПериферийныеБазы");
		ППБ.ВыбратьЭлементы();
		Пока ППБ.ПолучитьЭлемент()=1 Цикл
			      
			Если ППБ.ПометкаУдаления()=1 Тогда
				Продолжить;
			КонецЕсли;
			
			Если (ППБ.ЭтоГруппа()=0)  Тогда
				База=ППБ.ТекущийЭлемент();
				УстановитьБазу();
				
				Если Загрузка=1 Тогда
					Загрузить();
				КонецЕсли;
				
				Если Выгрузка=1 Тогда
					Рез=Выгрузить();
					Если Рез=0 Тогда
						//Возврат 0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		//КонецЕсли;
	КонецЕсли;
	База=ТекущаяБаза;  
	
//	ЖурналРегистрации.ЗакрытьФайл();
	Возврат Рез;
КонецФункции

//_____________________________________________________________________________

Функция ЗакрытьДБФ()
	Если МожноЗакрывать=1 Тогда
		Форма.ИспользоватьСлой("Инфо",0);
		Если ТипЗначенияСтр(БДМОД)="XBASE" Тогда
			Если БДМОД.Открыта()=1 Тогда
				БДМОД.ЗакрытьФайл();
			КонецЕсли;
		КонецЕсли;
		Если ТипЗначенияСтр(БДУдаленийМОД)="XBASE" Тогда
			Если БДУдаленийМОД.Открыта()=1 Тогда
				БДУдаленийМОД.ЗакрытьФайл();
			КонецЕсли;
		КонецЕсли;
		Если ТипЗначенияСтр(БДПакетыМОД)="XBASE" Тогда
			Если БДПакетыМОД.Открыта()=1 Тогда
				БДПакетыМОД.ЗакрытьФайл();
			КонецЕсли;
		КонецЕсли;
		Прогрессор(0);
	КонецЕсли;
	Возврат "";
КонецФункции//ЗакрытьДБФ

//_____________________________________________________________________________

Процедура Сформировать()
	Рез=СоединитьФайлыИзмененийИУдалений();
	Если Рез=0 Тогда
		Рез=Вопрос("Продолжить выгрузку",1,10);
		Если Рез<>1 Тогда
			Возврат ;
		КонецЕсли;
	КонецЕсли;
	//транзакция .....
	//ЗакрытьДБФ();
	
	М_Состояние("Подготовка к транзакции...");
	
	Если Выгрузка=1 Тогда
		Состояние("Копируем справочник изменений");
		КопироватьСправочникВФайлДБФ("ИзмененияМОД","_tran1");
		Состояние("Копируем справочник пакетов");             
		КопироватьСправочникВФайлДБФ("Пакеты","tran2");
		КопироватьФайлДБФ("tran2","_tran2");
		Состояние("Копируем справочник удалений");
		КопироватьСправочникВФайлДБФ("УдаленияМОД","_tran3"); 
		//КопироватьСправочникВФайлДБФ("ЖурналРегистрации","_JReg");
	КонецЕсли;
	М_Состояние("Подготовка к транзакции закончена");
	
	Если Обмен()=1 Тогда
		Сообщить("Копирование справочников");
		М_Состояние("Зафиксирование транзакции...");
		ЗакрытьДБФ();        
		БДИзменения="";
		ОткрытьФайлМОДПоИмени(БДИзменения,"Изменения","_tran1");
		БДИзменения.ОчиститьФайл();
		БДИзменения.ЗакрытьФайл();
		
		ОткрытьФайлМОДПоИмени(БДИзменения,"Пакеты","_tran2");
		БДИзменения.ОчиститьФайл();
		БДИзменения.ЗакрытьФайл();
		
		ОткрытьФайлМОДПоИмени(БДИзменения,"Удаления","_tran3");
		БДИзменения.ОчиститьФайл();
		БДИзменения.ЗакрытьФайл();

		
		Если Выгрузка=1 Тогда 
			
			Состояние("Копируем файл изменений");                        
			КопироватьФайлДБФВСправочник("_tran1","ИзмененияМОД");
			Состояние("Копируем файл пакетов");
			КопироватьФайлДБФ("_tran2","tran2");
			Состояние("Копируем файл удалений");
			КопироватьФайлДБФВСправочник("_tran3","УдаленияМОД");
		КонецЕсли;                             
		Состояние("Копируем файл регистрации");
		ЗафиксирватьЖурналРегистрации();
		//КопироватьФайлДБФВСправочник("_JReg","ЖурналРегистрации");
		Сообщить("Копирование справочников завершено");
	КонецЕсли;
	ЗакрытьДБФ();
	
	Фс.УдалитьФайл(КаталогБазыДанных()+"_tran3.cdx");
	Фс.УдалитьФайл(КаталогБазыДанных()+"_tran3.dbf");
	Фс.УдалитьФайл(КаталогБазыДанных()+"_tran2.cdx");
	Фс.УдалитьФайл(КаталогБазыДанных()+"_tran2.dbf");
	Фс.УдалитьФайл(КаталогБазыДанных()+"_tran1.cdx");
	Фс.УдалитьФайл(КаталогБазыДанных()+"_tran1.dbf"); 
	//Фс.УдалитьФайл(КаталогБазыДанных()+"_JReg.cdx");
	//Фс.УдалитьФайл(КаталогБазыДанных()+"_JReg.dbf");	
	//эти файлы на выходе всегда пустые: - не всегда !!!!!
	//		Фс.УдалитьФайл(КаталогБазыДанных()+"tran1.cdx");
	//		Фс.УдалитьФайл(КаталогБазыДанных()+"tran1.dbf");
	

	
	ТаблицаЗагрузки=0;
	СписокЗагрузки=0;
	ТаблицаПравил=0;
	СписокПравил=0;
	СписокРегистровПроведения=0;
	СписокОперацийПроведения=0;
	ТаблицаСправочниковПроведения=0;
	Т=0;
	
КонецПроцедуры //Сформировать

//_____________________________________________________________________________
//для выборочной выгрузки:

Процедура ОбъектыВыборочнойВыгрузки()
	
	ТипОбъектаВыборочно.ДобавитьЗначение("Константы");
	ТипОбъектаВыборочно.ДобавитьЗначение("Планы счетов");
	
	ТипОбъектаВыборочно.ДобавитьЗначение("Документ");
	Для ф=1 по Метаданные.Документ() Цикл
		ТипОбъектаВыборочно.ДобавитьЗначение("Документ."+Метаданные.Документ(ф).Идентификатор);
	КонецЦикла;
	
	ТипОбъектаВыборочно.ДобавитьЗначение("Справочник");
	Для ф=1 по Метаданные.Справочник() Цикл
		ТипОбъектаВыборочно.ДобавитьЗначение("Справочник."+Метаданные.Справочник(ф).Идентификатор);
		//		Справочник.ДобавитьЗначение(Метаданные.Справочник(ф).Идентификатор);
	КонецЦикла;
	//	ТипОбъектаВыборочно.Сортировать();
	
	//Ном=Число(ВосстановитьЗначение("НомерСправочникаЗаполененияПБ"));
	//Если (Ном>0)И(Ном<=Метаданные.Справочник()) Тогда
	//    Справочник.ТекущаяСтрока(Ном);
	//КонецЕсли;
КонецПроцедуры //ОбъектыВыборочнойВыгрузки
//_____________________________________________________________________________

Процедура ПриПовторномОткрытии()
	Если ПроведениеПоАлгоритмуМОД=1 Тогда
		Если ТипЗначенияСтр(Форма.Параметр)="ГрупповойКонтекст" Тогда
			ПроведениеДокумента(Форма.Параметр);
			СтатусВозврата(0);       //вообще-то мы здесь не бываем ...
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
	Если СокрЛП(Форма.Параметр)<>"" Тогда
		Если ТипЗначения(Форма.Параметр)<>11 Тогда
			//т.к. форма была открыта пользователем, то запоминаем значения элементов,
			//чтобы потом можно было их восстановить
			_Ном=ТипОбъектаВыборочно.ТекущаяСтрока();
			_РежимВыгрузки=РежимВыгрузки;
			_База=База;
			_ОбъектВыборочно=ОбъектВыборочно;
			_Выгрузка=Выгрузка;
			_Загрузка=Загрузка;
			База=Форма.Параметр.База;
			УстановитьБазу();
			РежимВыгрузки=3;
			Выгрузка=1;
			ТипОбъектаВыборочно.УдалитьВсе();
			ТипОбъектаВыборочно.ДобавитьЗначение(ТипЗначенияСтр(Форма.Параметр.Объект)+"."+Форма.Параметр.Объект.Вид(),ТипЗначенияСтр(Форма.Параметр.Объект)+"."+Форма.Параметр.Объект.Вид());
			ТипОбъектаВыборочно.ТекущаяСтрока(1);
			Имя=ТипЗначенияСтр(Форма.Параметр.Объект);
			Форма.ОбъектВыборочно.НазначитьТип(Имя);
			ОбъектВыборочно=Форма.Параметр.Объект;
			Сформировать();
			//восстанавливаем элементы формы
			ТипОбъектаВыборочно.УдалитьВсе();
			ОбъектыВыборочнойВыгрузки();
			База=_База;
			УстановитьБазу();
			Если _Ном>0 Тогда
				Если _Ном<=ТипОбъектаВыборочно.РазмерСписка() Тогда
					ТипОбъектаВыборочно.ТекущаяСтрока(_Ном);
				КонецЕсли;
			КонецЕсли;
			РежимВыгрузки=_РежимВыгрузки;
			Имя=ТипЗначенияСтр(_ОбъектВыборочно);
			Форма.ОбъектВыборочно.НазначитьТип(Имя);
			ОбъектВыборочно=_ОбъектВыборочно;
			Выгрузка=_Выгрузка;
			Загрузка=_Загрузка;
		КонецЕсли;
		СтатусВозврата(0);//закрываем форму !!
		Возврат; //и выходим
	ИначеЕсли СокрЛП(Форма.Параметр)<>"" Тогда
	КонецЕсли;
	Исключение
	КонецПопытки;
	Если СокрЛП(Форма.Параметр)="Сформировать()" Тогда
		Сформировать();
	КонецЕсли;
КонецПроцедуры

//_____________________________________________________________________________


Процедура ЗаполнитьСписокПодчиненныхСправочников();
	СписокПодчиненных=СоздатьОбъект("СписокЗначений");
	Для А=1 По Метаданные.Справочник() Цикл
		Если Метаданные.Справочник(А).Владелец.Выбран()=1 Тогда
			ИмяСпр=Метаданные.Справочник(А).Идентификатор;
			ИмяПодч=Метаданные.Справочник(А).Владелец.Идентификатор;
			СписокПодчиненных.ДобавитьЗначение(""+ИмяПодч,""+ИмяСпр);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //

//_____________________________________________________________________________


//_____________________________________________________________________________

Процедура ПриВыбореЗакладки(Ном,Значен)
	Форма.ДляНастр2.Видимость(0);
	Форма.ДляНастр3.Видимость(0);
	Форма.ИспользоватьСлой(Значен);
	Если Значен="Общие" Тогда
	ИначеЕсли Значен="Выгрузка" Тогда
		ПриУстановкеРежимаВыгрузки();
	ИначеЕсли Значен="Инициализация" Тогда
		Форма.ДляНастр3.Видимость(РасширенныйРежим);
	ИначеЕсли Значен="Подтверждение" Тогда
		Форма.СписокПакетов.Видимость(1);
		Форма.База.Видимость(1);
		Форма.бб.Видимость(1);
	ИначеЕсли Значен="Настройка" Тогда
		//		Форма.База.Видимость(1);
		Форма.ДляНастр2.Видимость(РежимНастройки);
	КонецЕсли;
КонецПроцедуры

//_____________________________________________________________________________

Процедура ДопСлойВыгрузки()
	Форма.ИспользоватьСлой("ВыгрузкаДоп");
КонецПроцедуры //ДопСлойВыгрузки()

//_____________________________________________________________________________

Процедура СлойРепликация()
	Форма.ИспользоватьСлой("Репликация");
КонецПроцедуры
//_____________________________________________________________________________

Процедура НазадСлойРепликация()
	Форма.ИспользоватьСлой("Инициализация");
КонецПроцедуры
//_____________________________________________________________________________

Процедура НазадИзДопСлойВыгрузки()
	Форма.ИспользоватьСлой("Выгрузка");
	ПриУстановкеРежимаВыгрузки();
КонецПроцедуры

//_____________________________________________________________________________

Процедура ДопСлойНастройки()
	Форма.ИспользоватьСлой("Доп");
КонецПроцедуры

//_____________________________________________________________________________

Процедура НазадИзДопСлойНастройки()
	Форма.ИспользоватьСлой("Настройка");
КонецПроцедуры



Процедура ОбработкаПодбора(об,конт)
	Перем МойIDD;
	об1=СоздатьОбъект(ТипЗначенияСтр(Об)+"."+Об.Вид());
	Если ТипЗначенияСтр(Об)="Документ" Тогда
		Об1.НайтиДокумент(Об.ТекущийДокумент());
	Иначе
		Об1.НайтиЭлемент(Об.ТекущийЭлемент());
	КонецЕсли;
	МойIDD=Сокрлп(Об.IDD);
	ВвестиСтроку(МойIDD,"Введите новый IDD",30,);
	Если МойIDD<>Об.IDD Тогда
		Об1.IDD=Сокрлп(МойIDD);
		ОБ1.Записать();
	КонецЕсли;
КонецПроцедуры

//_____________________________________________________________________________

Процедура ОткрытьИзменениеОбъектов()
	Перем Объект;
	Перем Объект1;
	Сз=СоздатьОбъект("СписокЗначений");
	Сз.ДобавитьЗначение("Документ","Документ");
	Сз.ДобавитьЗначение("Справочник","Справочник");
	Если Сз.ВыбратьЗначение(Объект,"",,,1)=1 Тогда
		Сз.УдалитьВсе();
		Если Объект="Документ" Тогда
			Для ы=1 по Метаданные.Документ() Цикл
				Сз.ДобавитьЗначение(Метаданные.Документ(ы).Идентификатор,Метаданные.Документ(ы).Идентификатор);
			КонецЦикла;
		Иначе
			Для ы=1 по Метаданные.Справочник() Цикл
				Сз.ДобавитьЗначение(Метаданные.Справочник(ы).Идентификатор,Метаданные.Справочник(ы).Идентификатор);
			КонецЦикла;
		КонецЕсли;
		Если Сз.ВыбратьЗначение(Объект1,"",,,)=1 Тогда
			ОткрытьПодбор(Объект+"."+Объект1,,Конт,,	);
			Если Объект="Справочник" Тогда
				Конт.ВыборГруппы(1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


//_____________________________________________________________________________
//присвоение всем объектам НАШЕЙ базы своего IDD
Процедура Инициализация()
	Если Число(IDD)<>0 Тогда
		Форма.IDD.Доступность(0);
	Иначе
		Предупреждение("Присвойте базе IDD !",10);
		Возврат;
	КонецЕсли;
	
	Если ПерваяИнициализация<>1 Тогда
		Если Вопрос("Вы действительно хотите выполнить инициализацию базы ?",4,10)=7 Тогда
			Возврат;
		КонецЕсли;
		
		Если ФлНовый=1 Тогда
			Если Вопрос("ВНИМАНИЕ ВЫ ВЫБРАЛИ РЕЖИМ УСТАНОВЛЕНИЯ НОВЫХ IDD ДЛЯ ВСЕХ ЭЛЕМЕНТОВ ! Отменить ?",4,20)<>7 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	//******* для прогрессора
	ЧислоДат=0;
	ЧислоДата1=0;
	Док=СоздатьОбъект("Документ");
	Рез=Док.ВыбратьДокументы(ДатаНач,ДатаКон);
	Если Рез<>0 Тогда
		Док.ПолучитьДокумент();
		ЧислоДата1=Число(Док.ДатаДок);
		Док=СоздатьОбъект("Документ");
		Док.ОбратныйПорядок(1);
		Рез=Док.ВыбратьДокументы(ДатаНач,ДатаКон);
		Док.ПолучитьДокумент();
		ЧислоДата2=Число(Док.ДатаДок);
		ЧислоДат=ЧислоДата2-ЧислоДата1;
	КонецЕсли;
	ЧислоСпр=10*Метаданные.Справочник();
	Прогрессор(0,ЧислоДат+ЧислоСпр,0,"Инициализация");
	
	КолПрогрессора=1;	//******* для прогрессора
	
	Константа_УникальныйIDD=Число(Константа.УникальныйIDD)+1;
	Константа_IDD=Прав("0000000"+СокрЛП(Константа.IDD),7);
	
	
	Если РежимИниц=1 Тогда
		Попытка
			Для Ц=1 по ПланыСчетов.КоличествоЗначений() Цикл
				Об=СоздатьОбъект("Счет");
				Об.ИспользоватьПланСчетов(ПланыСчетов.ЗначениеПоНомеру(Ц));
				Об.ВыбратьСчета();
				Пока Об.ПолучитьСчет()>0 Цикл
					Счет=Об.ТекущийСчет();
					ПриИзмененииОбъекта(Счет,Счет, РабочаяДата());					
				КонецЦикла;
			КонецЦикла;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	
	//фиксируем транзакцию через каждые 500 документов
	КолДоков=0;
	КолДоковОбработано=0;
	НачатьТранзакцию();
	Док=СоздатьОбъект("Документ");
	М_Состояние("Обработка документов...");
	Док.ВыбратьДокументы(ДатаНач,ДатаКон);
	Пока Док.ПолучитьДокумент()>0 Цикл
		КолПрогрессора=Число(Док.ДатаДок)-ЧислоДата1+1;
		Прогрессор(КолПрогрессора);//**************** прогрессор
		Если (Сокрлп(Док.IDD)="")ИЛИ(ФлНовый=1) Тогда //т.е. изменяем только пустые IDD !!//надо бы потом сделать проверку на уникальность ...
			Константа_УникальныйIDD=Константа_УникальныйIDD+1;
			Док.IDD=Сокрлп(Константа_IDD+прав("0000000000"+Константа_УникальныйIDD,10));
			//Если Прав(Сокрлп(Док.НомерДок),5)="00000" Тогда//ошибка номера
			//Док.УстановитьНовыйНомер();
			//КонецЕсли;
			Попытка
				Док.Записать();
			Исключение
				Сообщить("Ошибка в "+Док.ТекущийДокумент()+" номер док="+Док.НомерДок+"! ...","!");  
				ЗаписатьВЛогОшибку("Ошибка при записи документа "+Док.ТекущийДокумент()+" номер док="+Док.НомерДок);
			КонецПопытки;
			КолДоков=КолДоков+1;
			Если КолДоков>=500 Тогда
				М_Состояние("Фиксируем транзакцию ");
				ЗафиксироватьТранзакцию();
				КолДоковОбработано=КолДоковОбработано+КолДоков;
				М_Состояние("Обработано документов :"+КолДоковОбработано+" "+Док.ДатаДок);
				НачатьТранзакцию();
				КолДоков=0;
			КонецЕсли;
			
		КонецЕсли;
		Если РежимИниц=1 Тогда
			ПриИзмененииОбъекта(Док,Док,Док.ДатаДок,0);
		КонецЕсли;
	КонецЦикла;
	Константа.УникальныйIDD=Строка(Число(Константа_УникальныйIDD)+1);
	ЗафиксироватьТранзакцию();
	
	Для ы=1 по Метаданные.Справочник() Цикл
		НачатьТранзакцию();
		КолПрогрессора=КолПрогрессора+10;
		Прогрессор(КолПрогрессора);//**************** прогрессор
		Ст=Метаданные.Справочник(ы).Идентификатор;
		Если (ст<>"ПравилаЗагрузки") и (ст<>"ПравилаВыгрузки") и (ст<>"ПериферийныеБазы")
			и (ст<>"ИзмененияМОД") и (ст<>"УдаленияМОД") и (ст<>"Пакеты") и (ст<>"ЖурналРегистрации")Тогда
				Если Метаданные.Справочник(ы).Реквизит("IDD").Выбран()=0 Тогда
					Продолжить;
				КонецЕсли;
			Спр=СоздатьОбъект("Справочник."+Ст);
			М_Состояние("Обработка "+Ст);
			Спр.ВыбратьЭлементы(0);
			Пока Спр.ПолучитьЭлемент()>0 Цикл
				Если (Сокрлп(Спр.IDD)="")ИЛИ(ФлНовый=1) Тогда
					Константа_УникальныйIDD=Константа_УникальныйIDD+1;
					Спр.IDD=Сокрлп(Константа_IDD+прав("0000000000"+Константа_УникальныйIDD,10));
					Попытка
						Спр.Записать();
					Исключение
						Сообщить("Ошибка на : "+Спр.Вид()+", владелец "+Спр.Владелец+", элемент="+Спр.ТекущийЭлемент()+",  код="+Спр.Код+" . Внимание: найдите данный элемент справочника вручную и измените код !!");
						ЗаписатьВЛогОшибку("Ошибка при записи элемента справочника ",спр.ТекущийЭлемент());
					КонецПопытки;
				КонецЕсли;
				
				Если РежимИниц=1 Тогда
					ПриИзмененииОбъекта(Спр,Спр,'01.01.1976',0);//для периодических реквизитов надо задавать период выгрузки
					ПриИзмененииОбъекта(Спр,Спр,РабочаяДата(),0);//у нас период равен: 01.01.1976 - рабочая дата
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		Константа.УникальныйIDD=Строка(Число(Константа_УникальныйIDD)+1);
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
	
	
	Если РежимИниц=1 Тогда
		Прогрессор(0,Метаданные.Константа(),0);//**************** прогрессор
		НачатьТранзакцию();
		Для А=1 по Метаданные.Константа() Цикл
			Прогрессор(А);
			ИмяКонстанты=Метаданные.Константа(А).Идентификатор;
			ПриИзмененииОбъекта(ИмяКонстанты, ИмяКонстанты,'01.01.1976');
			ПриИзмененииОбъекта(ИмяКонстанты, ИмяКонстанты,РабочаяДата());
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		Прогрессор(0);
	КонецЕсли;
	
	IDD=Константа.IDD;
	Форма.IDD.Доступность(0);
	//	Прогрессор(0);
	Если ТипЗначенияСтр(БДМОД)="XBASE" Тогда
		Если БДМОД.Открыта()=1 Тогда
			БДМОД.ЗакрытьФайл();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//_____________________________________________________________________________

Процедура ПриЗакрытии()
	Если ОткрытьДругуюФорму=1 Тогда
		Спис=СоздатьОбъект("СписокЗначений"); 
		Спис.ДобавитьЗначение(База,"База");
		Спис.ДобавитьЗначение("Ручное открытие","Команда");
//		ОткрытьФорму("Обработка",Спис,КаталогИБ()+"Extforms\ОбменДаннымиXML.ert");
		ОткрытьФорму("Обработка.ОбменДаннымиXML",Спис);
	КонецЕсли;
КонецПроцедуры //ПриЗакрытии
//_____________________________________________________________________________
//_____________________________________________________________________________
Процедура ОткрытьТекст()
	Т=СоздатьОбъект("Текст");
	Файл=СокрЛП(ПутьКБазеПриЗагрузке)+"\"+СокрЛП(Строка(Число(НомерПакетаЗагрузки)))+".mod";
	Если ФС.СуществуетФайл(Файл)=1 Тогда
		Т.Открыть(Файл);
	Иначе
		Предупреждение("Пакет № "+НомерПакетаЗагрузки+" отсутствует в каталоге загрузки!!!",10);
		Возврат;
	КонецЕсли;
	Т.Показать();
КонецПроцедуры //ОткрытьТекст
//_____________________________________________________________________________
//Процедура ВыбратьФайлШаблона()
//	Перем Каталог,Файл;
//	Файл=ФайлШаблона;
//	Рез=ФС.ВыбратьФайл(0,Файл,Каталог,"Выберите файл шаблона","Менеджер обмена данными(*.mod)|*.mod","*.mod");
//	Если Рез=1 Тогда
//		ФайлШаблона=Каталог+Файл;
//	КонецЕсли;
//КонецПроцедуры //ВыбратьФайлШаблона
//_____________________________________________________________________________

Процедура ВыбратьФайлЗагрузки()
	ПЕрем Каталог,ИмяФайла,Номер;
	Каталог=ПутьКБазеПриЗагрузке;
	ИмяФайла=Строка(НомерПакетаЗагрузки)+".mod";
	ФС.ВыбратьФайл(0,ИмяФайла,Каталог,"Выберите файл пакета загрузки","Менеджер обмена данными(*.mod)|*.mod","*.mod");
	Каталог=ПутьКБазеПриЗагрузке;
	Если ФС.СуществуетФайл(Каталог+"\"+ИмяФайла)=1 Тогда
		Номер=Число(ИмяФайла);
		Если Номер>0 Тогда
			НомерПакетаЗагрузки=Номер;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ВыбратьФайлЗагрузки
//_____________________________________________________________________________
//_____________________________________________________________________________
Процедура 	ДобавитьВТаблицуВыгрузкиШаблона(Табл2,Имя)
	А_Табл2=Таб_НоваяСтрока(Табл2);
	Таб_УстановитьЗначение(Табл2,А_Табл2,"Наименование",Имя);
	Т.ДобавитьСтроку(Имя);
	Т.ДобавитьСтроку(0);
КонецПроцедуры //ДобавитьВТаблицуВыгрузкиШаблона(Табл2,Имя);

Процедура ЗаполнитьСписокПравилДляШаблона()
	СписокПравил=СоздатьОбъект("СписокЗначений");
	
	Т.ДобавитьСтроку("2");
	Т.ДобавитьСтроку("Документы");
	
	//документы
	Таб=СоздатьОбъект("ТаблицаЗначений");
	Таб.ВставитьКолонку("Указатель");
	Таб.ВставитьКолонку("Наименование");
	Таб.ВставитьКолонку("Движения");
	СписокПравил.ДобавитьЗначение(Таб,"Документы");
	Т.ДобавитьСтроку(0);
	НомСтрКолВидов=Т.КоличествоСтрок();
	Для А=1 По Метаданные.Документ() Цикл
		Таб.НоваяСтрока();
		Имя=Метаданные.Документ(А).Идентификатор;
		Таб.Наименование=Имя;
		Таб.Указатель=СписокПравил;
		Т.ДобавитьСтроку(Имя);
		Т.ДобавитьСтроку(0);
	КонецЦикла;
	Т.ЗаменитьСтроку(НомСтрКолВидов,""+Метаданные.Документ()+"          "+Число(Т.КоличествоСтрок()+1));
	
	Т.ДобавитьСтроку("Справочники");
	//справочники
	Таб=СоздатьОбъект("ТаблицаЗначений");
	Таб.ВставитьКолонку("Указатель");
	Таб.ВставитьКолонку("Наименование");
	Таб.ВставитьКолонку("Движения");
	СписокПравил.ДобавитьЗначение(Таб,"Справочники");
	СписокВидовСпр=СоздатьОбъект("СписокЗначений");
	
	ТаблНулл=ПолучитьОбъект_ТаблицаЗначенийДляВыгрузки();
	
	
	Т.ДобавитьСтроку(0);
	НомСтрКолВидов=Т.КоличествоСтрок();
	Для А=1 По Метаданные.Справочник() Цикл
		Таб.НоваяСтрока();
		Имя=Метаданные.Справочник(А).Идентификатор;
		СписокВидовСпр.ДобавитьЗначение(А,Имя);
		
		
		Таб.Наименование=Имя;
		Таб.Указатель=ТаблНулл;
		Т.ДобавитьСтроку(Имя);
		//		Если (Имя="ПравилаЗагрузки") или (Имя="ПравилаВыгрузки") или (Имя="ПериферийныеБазы") Тогда
		Если 1=1 Тогда
			Табл2=ПолучитьОбъект_ТаблицаЗначенийДляВыгрузки();
			Таб.Указатель=Табл2;
			Т.ДобавитьСтроку((6+Метаданные.Справочник(А).Реквизит()));
			
			ДобавитьВТаблицуВыгрузкиШаблона(Табл2,"#ПомеченНаУдаление");
			ДобавитьВТаблицуВыгрузкиШаблона(Табл2,"#ЭтоГруппа");
			ДобавитьВТаблицуВыгрузкиШаблона(Табл2,"#Удален");
			ДобавитьВТаблицуВыгрузкиШаблона(Табл2,"Код");
			ДобавитьВТаблицуВыгрузкиШаблона(Табл2,"Наименование");
			ДобавитьВТаблицуВыгрузкиШаблона(Табл2,"Родитель");
			ДобавитьВТаблицуВыгрузкиШаблона(Табл2,"Владелец");
			
			Для А1=1 По Метаданные.Справочник(А).Реквизит() Цикл
				Имя=Метаданные.Справочник(А).Реквизит(А1).Идентификатор;
				Если Имя<>"IDD" Тогда
					ДобавитьВТаблицуВыгрузкиШаблона(Табл2,Имя);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			Т.ДобавитьСтроку(0);
		КонецЕсли;
	КонецЦикла;
	Т.ЗаменитьСтроку(НомСтрКолВидов,""+Метаданные.Справочник()+"          "+Число(Т.КоличествоСтрок()+1));
КонецПроцедуры //ЗаполнитьСписокПравилДляШаблона

//_____________________________________________________________________________

Процедура ЗагрузитьШаблон(ФайлШаблона)
	ИмяТекстовогоФайла=ФайлШаблона;
	
	Кол=1;
	Рез=ЗагрузитьШапку(База,Кол,ИмяТекстовогоФайла,1); //мы находимся на позиции загрузки данных
	Если Рез<>1 Тогда
		Сообщить("Ошибка загрузки шапки шаблона ...");
		ЗаписатьВЛОгОшибку("Ошибка загрузки шапки шаблона ...")   ;
		Возврат;
	КонецЕсли;
	СопоставлятьПеречисления=0;//т.к. это шаблон, то не надо !
	
	
	//загрузка тела
	НачатьТранзакцию();
	Для НомерЦикла=1 По 3 Цикл
		Кол2=Кол;
		СписокВторогоЦикла=СоздатьОбъект("СписокЗначений");
		ЗагрузитьТело(База,Кол2,НомерЦикла);
		//подменяем список
		СписокВторогоЦикла2=СписокВторогоЦикла;
		Если СписокВторогоЦикла2.РазмерСписка()=0 Тогда
			Прервать;//не нужны больше допоплнительные циклы
		КонецЕсли;
	КонецЦикла;
	
	
	
	
	//найдем загруженный шаблон и очистим значение еого IDD-кода
	Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
	ИД="9999999";//зарезервированный код для шаблона
	Найден=Спр.НайтиПоРеквизиту("IDD",ИД,0);
	//если какая-то ошибка
	Если Найден=0 Тогда
		//		Предупреждение("Ошибка загрузки шаблона",10); //загружалась старая версия шаблона
		Перейти ~Выход;
		Возврат;
	КонецЕсли;
	Спр.IDD="";
	ВыгрБаза=Спр.ТекущийЭлемент();
	Спр.Записать();
	
	УникальныйИД=Число(Константа.УникальныйIDD);
	КонстантаИД=Прав("0000000"+СокрЛП(Константа.IDD),7);
	//Изменяем IDD всех правил загруженного шаблона
	Состояние("Подготовка IDD кодов для загружаемого шаблона правил");
	Спр=СоздатьОбъект("Справочник.ПравилаВыгрузки");
	Спр.ИспользоватьВладельца(ПолучитьВладельцаПравил(ВыгрБаза));
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()=1 Цикл
		УникальныйИД=УникальныйИД+1;
		Спр.IDD=КонстантаИД+прав("0000000000"+СокрЛП(УникальныйИД),10);
		Спр.Записать();
	КонецЦикла;
	
	Спр=СоздатьОбъект("Справочник.ПравилаЗагрузки");
	Спр.ИспользоватьВладельца(ПолучитьВладельцаПравил(ВыгрБаза));
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()=1 Цикл
		УникальныйИД=УникальныйИД+1;
		Спр.IDD=КонстантаИД+прав("0000000000"+СокрЛП(УникальныйИД),10);
		Спр.Записать();
	КонецЦикла;
	Состояние("Подготовка IDD кодов завершена");
	
	Константа.УникальныйIDD=УникальныйИД;
	
	
	~Выход:	
	ЗафиксироватьТранзакцию();
	
	
	
	ТаблицаЗагрузки=0;
	СписокЗагрузки=0;
	ТаблицаПравил=0;
	СписокПравил=0;
	СписокРегистровПроведения=0;
	СписокОперацийПроведения=0;
	ТаблицаСправочниковПроведения=0;
	Т=0;
КонецПроцедуры //ЗагрузитьШаблон

//_____________________________________________________________________________


//***************************************************************************************************************
//**************БЫСТРАЯ ВЫГРУЗКА И ЗАГРУЗКА ШАБЛОНОВ ************************************************************
//***************************************************************************************************************
//_____________________________________________________________________________
Функция ПодготовкаВыгрузкиСправочника(Вид)
	КолРеквизитов=Метаданные.Справочник(Вид).Реквизит();
	Для А=1 По КолРеквизитов Цикл
		МасВыгрШ[А]=Метаданные.Справочник(Вид).Реквизит(А);
	КонецЦикла;	
	Возврат КолРеквизитов;
КонецФункции //ПодготовкаВыгрузкиСправочника

//_____________________________________________________________________________
//выгрузка одного элемента справочника
Процедура ВыгрузитьОдинСправочник(Т,Спр,КолРеквизитов,Вид)
	//Сообщить(""+Спр.Уровень()+" "+Спр.Наименование);
	//выгружаем вид справочника
	Т.ДобавитьСтроку(Вид);
	//уровень
	Т.ДобавитьСтроку(Спр.Уровень());
	//признак группы
	Т.ДобавитьСтроку(Спр.ЭтоГруппа());
	//выгружаем наименование справочника
	Т.ДобавитьСтроку(Спр.Наименование);
	//выгружаем код справочника
	Т.ДобавитьСтроку(Спр.Код);
	//выгружаем число основных реквизитов
	Т.ДобавитьСтроку(КолРеквизитов);
	//основные реквизиты
	Для А=1 По  КолРеквизитов Цикл
		Атрибут=Спр.ПолучитьАтрибут(МасВыгрШ[А]);
		Зн=ЗначениеВСтроку(Атрибут);
		Если ПустоеЗначение(Атрибут)=1  Тогда
			Если СтрДлина(Зн)<3 Тогда
				Зн="{}";
			КонецЕсли;
		КонецЕсли;
		Т.ДобавитьСтроку(Зн);
	КонецЦикла;	
	
КонецПроцедуры //ВыгрузитьОдинСправочник

//_____________________________________________________________________________
Процедура ВыгрузитьВесьСправочник(Т,Вид,ВыбрБаза,КолСпр,А)
	Спр=СоздатьОбъект("Справочник."+Вид);
	Спр.ИспользоватьВладельца(ВыбрБаза);
	Спр.ПорядокКодов();
	
	Спр.ВыбратьЭлементы();
	
	КолРеквизитов=ПодготовкаВыгрузкиСправочника(Вид);//заполняем массив выгружаемых реквизитов у данного типа справочника
	Пока Спр.ПолучитьЭлемент()=1 Цикл
		А=А+1;
		Если Спр.ПометкаУдаления()=0 Тогда
			Состояние("Выгрузка шаблона "+Цел(100*А/КолСпр)+" %");
			ВыгрузитьОдинСправочник(Т,Спр,КолРеквизитов,Вид);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //ВыгрузитьВесьСправочник


//_____________________________________________________________________________
//Выгрузка шаблонов в МОД с одинаковой версией
Процедура БыстраяВыгрузкаШаблона(ВыбрБаза,ФайлШаблона)
	//Прогрессор(0,
	НачатьТранзакцию();
	Т=СоздатьОбъект("Текст");
	Т.ДобавитьСтроку("1.001:Шаблон");
	Для А=2 По 32 Цикл
		Т.ДобавитьСтроку(" ");
	КонецЦикла;
	ОписаниеБазы=СтрЗаменить(ВыбрБаза.Описание,РазделительСтрок,"$-Нов.стр-$");
	Т.ЗаменитьСтроку(16,ОписаниеБазы);
	
	
	//ПозицияСледОбъекта=Т.КоличествоСтрок();
	Вид=ВыбрБаза.Вид();
	КолРеквизитов=ПодготовкаВыгрузкиСправочника(Вид);//заполняем массив выгружаемых реквизитов у данного типа справочника
	Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
	Спр.НайтиЭлемент(ВыбрБаза);
	Спр.Описание="";//обнуляем, но не записываем !!!
	ВыгрузитьОдинСправочник(Т,Спр,КолРеквизитов,Вид);
	//Т.ЗаменитьСтроку(ПозицияСледОбъекта,ВыбрБаза.Вид());
	
	КолСпр=0;
	Спр=СоздатьОбъект("Справочник.ПравилаВыгрузки");
	Спр.ИспользоватьВладельца(ВыбрБаза);
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()=1 Цикл
		КолСпр=КолСпр+1;
	КонецЦикла;
	Спр=СоздатьОбъект("Справочник.ПравилаЗагрузки");
	Спр.ИспользоватьВладельца(ВыбрБаза);
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()=1 Цикл
		КолСпр=КолСпр+1;
	КонецЦикла;
	НачА=0;
	ВыгрузитьВесьСправочник(Т,"ПравилаВыгрузки",ВыбрБаза,КолСпр,НачА);
	ВыгрузитьВесьСправочник(Т,"ПравилаЗагрузки",ВыбрБаза,КолСпр,НачА);
	Т.Записать(ФайлШаблона);
	ЗафиксироватьТранзакцию();
КонецПроцедуры //БыстраяВыгрузкаШаблона



//_____________________________________________________________________________
Процедура ЗагрузитьОдинСправочник(Спр,Т,Кол,КолРеквизитовУНас,Владелец="",Родитель="")
	//Вид справочника
	//Вид=Т.ПолучитьСтроку(Кол+0);
	//уровень
	//уровень=Т.ПолучитьСтроку(Кол+1);
	//признак группы
	ЭтоГруппа=Число(Т.ПолучитьСтроку(Кол+2));
	Если ЭтоГруппа=0 Тогда
		глСоздатьНовыйОбъект(Спр);
	Иначе
		глСоздатьНовуюГруппу(Спр);
	КонецЕсли;
	//наименование справочника
	Зн=Т.ПолучитьСтроку(Кол+3);
	Спр.Наименование=Зн;
	//код справочника
	Зн=Т.ПолучитьСтроку(Кол+4);
	Спр.Код=Зн;
	
	
	Если Владелец<>"" Тогда
		Спр.Владелец=Владелец;
	КонецЕсли;
	
	Если Родитель<>"" Тогда
		Спр.Родитель=Родитель;
	КонецЕсли;
	
	
	//число основных реквизитов
	КолРеквизитовЗагр=Число(Т.ПолучитьСтроку(Кол+5));
	КолРеквизитов=Мин(КолРеквизитовУНас,КолРеквизитовЗагр);
	
	//основные реквизиты
	Кол=Кол+6;
	Для А=1 По  КолРеквизитов Цикл
		Зн=Т.ПолучитьСтроку(Кол);
		Атрибут=ЗначениеИзСтроки(Зн);
		Реквизит=Сокрлп(МасВыгрШ[А]);
		Если (Реквизит="Условие")ИЛИ(Реквизит="Значение") ИЛИ (Реквизит="ОбъектПриВыборочнойВыгрузке")Тогда
			Тип=ТипЗначения(Атрибут);
			СтрТип=ТипЗначенияСтр(Атрибут);
			Длина=0;Точность=0;
			Если (Тип>9)И(Тип<13) Тогда
				СтрТип=СтрТип+"."+Атрибут.Вид();
			ИначеЕсли Тип=1 Тогда //число
				Длина=17;
			ИначеЕсли Тип=2 Тогда //строка
				Длина=25;//больше все равно нельзя из-за ограничения самой 1С !!!
			КонецЕсли;
			Спр.НазначитьТип(Реквизит,СтрТип,Длина,Точность);
		КонецЕсли;
		Спр.УстановитьАтрибут(Реквизит,Атрибут);
		Кол=Кол+1;
	КонецЦикла;	
	
	//если было обновление МОД, то надо корректно обрабатывать старые шаблоны
	Если КолРеквизитовЗагр>КолРеквизитовУНас Тогда
		Кол=Кол+КолРеквизитовЗагр-КолРеквизитовУНас;
	КонецЕсли;
	
	Спр.Записать();
КонецПроцедуры //ЗагрузитьОдинСправочник

//_____________________________________________________________________________
Процедура ЗагрузитьВесьСправочник(Т,НуженВид,Кол,Владелец)
	Перем Родители[11];//родители по уровням
	Родители[1]="";//родитель для первого уровня всегда равен ""
	КолСтрок=Т.КоличествоСтрок();
	Вид=Т.ПолучитьСтроку(Кол);
	Если Вид<>НуженВид Тогда
		Возврат;
	КонецЕсли;
	Спр=СоздатьОбъект("Справочник."+Вид);
	КолРеквизитовУНас=ПодготовкаВыгрузкиСправочника(Вид);
	Пока Кол<КолСтрок Цикл
		Вид=Т.ПолучитьСтроку(Кол);
		Если Вид<>НуженВид Тогда
			Возврат;
		КонецЕсли;
		
		Уровень=Число(Т.ПолучитьСтроку(Кол+1));
		ЗагрузитьОдинСправочник(Спр,Т,Кол,КолРеквизитовУНас,Владелец,Родители[Уровень]);
		Если Спр.ЭтоГруппа()=1 Тогда
			Родители[Уровень+1]=Спр.ТекущийЭлемент();
		КонецЕсли;
		
		Состояние(""+Цел(Кол*100/КолСтрок)+"%");
	КонецЦикла;
КонецПроцедуры //ЗагрузитьВесьСправочник

//_____________________________________________________________________________
Процедура БыстраяЗагрузкаШаблона(ФайлШаблона)
	Перем КолРеквизитовУНас;
	Т=СоздатьОбъект("Текст");
	Т.Открыть(ФайлШаблона);
	Стр=Т.ПолучитьСтроку(1);
	Если Стр="1.001:Шаблон" Тогда
		НачатьТранзакцию();
		Кол=33;
		ОписаниеБазы=СтрЗаменить(Т.ПолучитьСтроку(16),"$-Нов.стр-$",РазделительСтрок);
		Вид=Т.ПолучитьСтроку(Кол);//Вид="ПериферийныеБазы";
		Спр=СоздатьОбъект("Справочник."+Вид);
		КолРеквизитовУНас=ПодготовкаВыгрузкиСправочника(Вид);
		ЗагрузитьОдинСправочник(Спр,Т,Кол,КолРеквизитовУНас);
		Спр.Описание=ОписаниеБазы;
		Спр.Записать();
		ЗагрузитьВесьСправочник(Т,"ПравилаВыгрузки",Кол,Спр.ТекущийЭлемент());
		ЗагрузитьВесьСправочник(Т,"ПравилаЗагрузки",Кол,Спр.ТекущийЭлемент());
		ЗафиксироватьТранзакцию();
	Иначе
		//	Сообщить("Неверный формат шаблона "+Стр);
		ЗагрузитьШаблон(ФайлШаблона);//старый формат !!!
	КонецЕсли;
КонецПроцедуры //БыстраяЗагрузкаШаблона

//***************************************************************************************************************
//***************************************************************************************************************
//***************************************************************************************************************






Процедура ИсправитьИДБазы()
	СписокИД=СоздатьОбъект("СписокЗначений");
	СписокОбъектов=СоздатьОбъект("СписокЗначений");
	Для А=1 по Метаданные.Справочник() Цикл
		Имя=Метаданные.Справочник(А).Идентификатор;
		М_Состояние("Анализ справочников "+Имя);
		Если Имя<>"ПериферийныеБазы" Тогда
			Спр=СоздатьОбъект("Справочник."+Имя);
			Спр.ВыбратьЭлементы();
			
			Пока Спр.ПолучитьЭлемент()=1 Цикл
				Если Сокрлп(Спр.IDD)="" Тогда //у объекта пустой IDD - надо его присвоить
					СписокОбъектов.ДобавитьЗначение(Спр.ТекущийЭлемент());
					Продолжить;
				КонецЕсли;
				ИД=Спр.IDD;
				Если СписокИД.НайтиЗначение(ИД)<>0 Тогда //такой объект в списке уже есть - значит налицо повторение IDD
					СписокОбъектов.ДобавитьЗначение(Спр.ТекущийЭлемент());
				Иначе//пока еще нет в списке такого IDD
					СписокИД.ДобавитьЗначение(ИД);
				КонецЕсли;  
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	
	
	М_Состояние("Анализ документов");
	СисокДок=СоздатьОбъект("СписокЗначений");
	
	
	Док=СоздатьОбъект("Документ");
	Док.ВыбратьДокументы(,);
	Пока Док.ПолучитьДокумент()>0 Цикл
		Если Сокрлп(Док.IDD)="" Тогда //у объекта пустой IDD - надо его присвоить
			СписокОбъектов.ДобавитьЗначение(Док.ТекущийДокумент());
			Продолжить;
		КонецЕсли;
		ИД=Док.IDD;
		Если СписокИД.НайтиЗначение(ИД)<>0 Тогда //такой объект в списке уже есть - значит налицо повторение IDD
			СписокОбъектов.ДобавитьЗначение(Док.ТекущийДокумент());
		Иначе//пока еще нет в списке такого IDD
			СписокИД.ДобавитьЗначение(ИД);
		КонецЕсли;  
	КонецЦикла;
	СписокИД=0;
	
	
	
	М_Состояние("Изменение IDD у объектов");
	КолОбъектов=0;
	НачатьТранзакцию();
	Док=СоздатьОбъект("Документ");
	Для А=1 По СписокОбъектов.РазмерСписка() Цикл
		Объект=СписокОбъектов.ПолучитьЗначение(А);
		Если ТипЗначения(Объект)=11 Тогда//справочник
			Спр=СоздатьОбъект("Справочник."+Объект.Вид());
			Спр.НайтиЭлемент(Объект);
			Сообщить("Установлен IDD на элемент "+Спр.Вид()+" "+Спр.Наименование+", код="+Спр.Код);
			Об=Спр;
		Иначе //12 - документ
			Док.НайтиДокумент(Объект);
			Сообщить("Установлен IDD на документ "+Док.Вид()+" № "+Док.НомерДок+" от "+Док.ДатаДок);
			Об=Док;
		КонецЕсли;
		
		Константа.УникальныйIDD=Число(Константа.УникальныйIDD)+1;
		Об.IDD=Прав("0000000"+СокрЛП(Константа.IDD),7)+прав("0000000000"+СокрЛП(Константа.УникальныйIDD),10);
		Об.Записать();
		
		
		
		
		//фиксируем транзакцию через каждые 1000 объектов
		КолОбъектов=КолОбъектов+1;
		Если КолОбъектов>=1000 Тогда
			М_Состояние("Фиксируем транзакцию ");
			ЗафиксироватьТранзакцию();
			М_Состояние("Обработано объектов :"+А);
			НачатьТранзакцию();
			КолОбъектов=0;
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры



Процедура НайтиПоИДД()
	Стр=ВосстановитьЗначение("ДляПоискаПоИД");
	
	Если СтрДлина(Стр)<>17 Тогда
		Стр="0000000000000000000";
	КонецЕсли;
	
	Если ВвестиСтроку(Стр,"Введите IDD ",17)=0 Тогда
		Возврат;    
	КонецЕсли;
	
	СохранитьЗначение("ДляПоискаПоИД",Стр);
	Ном=0;
	Таб=СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Таблица");
	Таб.ВывестиСекцию("Отчет");
	
	Нашли=0;
	Спр=СоздатьОбъект("Документ");
	Рез=Спр.ВыбратьПоЗначению(,,"IDD",стр);
	Пока Спр.ПолучитьДокумент()=1 Цикл
		Если ДублирIDD=0 Тогда
			ОткрытьФорму(Спр.ТекущийДокумент());
		Иначе
			Ном=Ном+1;
			ЧтоТо=Спр.ТекущийДокумент();
			Таб.ВывестиСекцию("Строка");
		КонецЕсли;
		Нашли=1;
	КонецЦикла;
	
	Для ы=1 по Метаданные.Справочник() Цикл
		Имя=Метаданные.Справочник(ы).Идентификатор;
		Если Имя="ПериферийныеБазы" Тогда
			Продолжить;
		КонецЕсли;
		Спр=СоздатьОбъект("Справочник."+Имя);
		СпрВыбор=СоздатьОбъект("Справочник."+Имя);
		Попытка
			Спр.ВыбратьЭлементыПоРеквизиту("IDD",стр,0,0);
		Исключение
			Сообщить("Нет реквизита IDD у справочника "+Имя);
			ЗаписатьВЛОгОшибку("Нет реквизита IDD у справочника "+Имя);
		КонецПопытки;
		Пока Спр.ПолучитьЭлемент()=1 Цикл
			Если ДублирIDD=0 Тогда
				ОткрытьФорму(Спр.ТекущийЭлемент());
				//СпрВыбор.НайтиЭлемент(Спр.ТекущийЭлемент());
				//Если Спр.Владелец.Выбран()=1 Тогда
				//Спр.ИспользоватьВладельца(Спр.Владелец);
				//КонецЕсли;
				//СпрВыбор.Выбрать("Найденный элемент "+Спр.Наименование+" (IDD="+Стр+")","Привет !!");
			Иначе
				Ном=Ном+1;
				ЧтоТо=Спр.ТекущийЭлемент();
				Таб.ВывестиСекцию("Строка");
			КонецЕсли;
			Нашли=1;
		КонецЦикла;
	КонецЦикла;
	
	Если Нашли=0 Тогда
		Предупреждение("Элемента с IDD = "+Стр+" нет !",10);
		Возврат;
	КонецЕсли;
	
	
	Если ДублирIDD=1 Тогда
		Таб.ТолькоПросмотр(1);
		Таб.Опции(0,0,0,0,"ПараметрыОтчМенеджераIDD");
		Таб.Показать("IDD Объектов");
	КонецЕсли;
	
КонецПроцедуры //НайтиПоИДД
//_____________________________________________________________________________


Процедура ОбработкаЯчейкиТаблицы(Объект, СтандартнаяОбработка, Таблица)
	СтандартнаяОбработка = 0;
	ОбработкаПодбора(Объект,"");
КонецПроцедуры




Процедура ПриЗаписиКонстанты(Имя, Значение);
	Если РасширенныйРежим=1 Тогда
		Если Имя="ПериодРепликацииМОД" Тогда
			//		ОбработкаОжидания("ЗагрузкаПакетовМОД",Значение);
			ОбработкаОжидания("РепликацияМОД",Значение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры




//_____________________________________________________________________________







Процедура проба()
	//	ФлагВыбрТабл=1;
	Если ФлагВыбрТабл=1 Тогда
		Значен=_ТаблицаПравилМОД;
	Иначе
		Значен=_ТаблицаЗагрузкиМОД;
	КонецЕсли;
	
	//	Значен=ТаблицаЗагрузки;
	ПросмотрТаблицы(Значен);
КонецПроцедуры //проба

//_____________________________________________________________________________

Процедура проба2()
	ПросмотрСуперТаблицы(глСписокПравилМОД);
КонецПроцедуры //проба

//_____________________________________________________________________________
Процедура ПросмотрСуперТаблицы(Знач Значен)
	Рез=1;
	Стр=1;
	Пока Рез=1 Цикл
		Если ТипЗначенияСтр(Значен)="ТаблицаЗначений" Тогда
			Рез=Значен.ВыбратьСтроку(Стр,"Это настоящая таблица !");
			Если Рез=1 Тогда
				Попытка
					Значен=Значен.ПолучитьЗначение(Стр,"Указатель");
				Исключение
					Значен=СписокПравил;
				КонецПопытки;
			КонецЕсли;
		ИначеЕсли ТипЗначенияСтр(Значен)="СписокЗначений" Тогда
			Стр="";
			Если Значен.РазмерСписка()>0 Тогда
				ТипСтр=ТипЗначенияСтр(Значен.ПолучитьЗначение(1,Стр));
			Иначе
				ТипСтр="";
			КонецЕсли;
//			Сообщить(ТипСтр);
			Если (Стр="Указатель")ИЛИ(стр="Наименование") Тогда
				ПросмотрТаблицы(Значен);Рез=0;
			Иначе
				Рез=Значен.ВыбратьЗначение(Значен,"Привет !!");
			КонецЕсли;
			
		Иначе
			Значен=СписокПравил;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //ПросмотрСуперТаблицы

//_____________________________________________________________________________
Процедура ОбработкаВводаIDD()
	ИДНашейБазы=Число(IDD);
	ПерваяИнициализация=1;
	Если Число(ИДНашейБазы)=0 Тогда
		IDD="";
		Предупреждение("Неправильно введен номер базы !",10);
	Иначе
		Константа.IDD=Прав("0000000"+ИДНашейБазы,7);
	КонецЕсли;
КонецПроцедуры //ОбработкаВводаIDD



//_____________________________________________________________________________

Процедура ВыборФайла(Имя)
	Если ФС.ВыбратьФайл(1,Имя,КаталогДБФ,"Выбери файл ДБФ !","Файлы Менеджера|tran*.dbf|*.dbf|*.dbf|Все файлы(*.*)|*.*","")=0 Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры




//************************************************************************************
//Функции, которые вызываются при интерпретации выражений
//************************************************************************************
//_____________________________________________________________________________
//Назначение: Присвоить глобальной переменной (в рамках обработки) переданной значение
//Возвращает пустую строку
Функция Получить(Выражение) 
	глВыражение=Выражение;
	Возврат "";    
КонецФункции //Получить


//_____________________________________________________________________________
//Назначение:
//вернуть заданный реквизит их заданонго номера строки документа. 
//Часто применяется при конвертации табличной части документа в шапочную.
Функция ПолучитьРеквизитИзСтрокиДокумента(Докум,НомерСтроки,Реквизит)
	Док = СоздатьОбъект("Документ");
	Док.НайтиДокумент(Докум.ТекущийДокумент());
	Если Док.Выбран() > 0 Тогда
		Если Док.ПолучитьСтрокуПоНомеру(НомерСтроки) = 1 Тогда
			Рез = Док.ПолучитьАтрибут(Реквизит);
			Возврат Рез;
		Иначе
			Возврат "";
		КонецЕсли;	
	Иначе
		Возврат "";
	КонецЕсли;	
КонецФункции	

//_____________________________________________________________________________
//Назначение:
//найти элемент справочника заданного вида по заданному имени
Функция НайтиСпр(Вид,Имя,Режим=0,Владелец=0,Родитель=0,Создавать=0)
	Перем Спр;
	Спр=СоздатьОбъект("Справочник."+Вид);
	Если Владелец<>0 Тогда
		Спр.ИспользоватьВладельца(Владелец);
	КонецЕсли;
	Рез=Спр.НайтиПоНаименованию(Имя,Режим,1);
	Если Рез=1 Тогда 
		Возврат Спр.ТекущийЭлемент();
	Иначе
		Если Создавать=1 Тогда
			Подчиненность=0;
			глСоздатьНовыйОбъект(Спр);
			Если Владелец<>0 Тогда
				Спр.Владелец=Владелец;
				Подчиненность=1;
			КонецЕсли;
			Если Родитель<>0 Тогда
				Спр.Родитель=Родитель;
			КонецЕсли;
			Спр.Наименование=Имя;
			Спр.Код=СоздатьНовыйКод(Вид,Спр,Подчиненность);
			Спр.IDD=ПолучитьУникальныйIDD();
			Спр.Записать();
			М_Сообщить("Создан новый справочник "+Вид+"  "+Имя+",  "+Спр.Код);
			Возврат Спр.ТекущийЭлемент();
		Иначе
			Возврат "";
		КонецЕсли;
		
	КонецЕсли;
КонецФункции

//_____________________________________________________________________________
//Назначение:
//Найти справочник заданного вида по ИД коду
Функция НайтиСпрПоИД(Вид,Спр_ИД)
	Перем Спр;
	Спр=СоздатьОбъект("Справочник."+Вид);
	Если Спр.НайтиПоРеквизиту("IDD",Спр_ИД,1)=1 Тогда
		Возврат Спр.ТекущийЭлемент();
	КонецЕсли;
	Возврат "";
КонецФункции

//_____________________________________________________________________________
//Назначение:
//Найти справочник заданного вида по ИД коду
Функция СпрПоИД(Вид,Спр_ИД)
	Возврат НайтиСпрПоИД(Вид,Спр_ИД);
КонецФункции


//_____________________________________________________________________________
//Назначение:
//найти справочник заданного вида, у которого реквизит с именем Реквизит имеет значение 
//Значение. Если задан владелец, то поиск производится внутри подчинения. 
//Если задана дата, то для периодических реквизитов значение ищется на дату ДатаЗначения 
Функция СпрПоРекв(Вид,Реквизит,Значение,Владелец=0,ДатаЗначения=0)
	Перем Спр;
	Спр=СоздатьОбъект("Справочник."+Вид);
	Если Владелец<>0 Тогда
		Попытка
			Спр.ИспользоватьВладельца(Владелец.ТекущийЭлемент());
		Исключение
			Спр.ИспользоватьВладельца(Владелец);
		КонецПопытки;
	КонецЕсли;
	Если ДатаЗначения=0 Тогда
		Спр.ИспользоватьДату(РабочаяДата());
	Иначе
		Спр.ИспользоватьДату(ДатаЗначения);
	КонецЕсли;
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()=1 Цикл
		Если Спр.ПолучитьАтрибут(Реквизит)=Значение Тогда
			Возврат Спр.ТекущийЭлемент();
		КонецЕсли;
	КонецЦикла;
	Возврат "";
КонецФункции 


//_____________________________________________________________________________
//Назначение:
//присвоить переменной А, передаваемое по ссылке значение переменной Б,
//передаваемое по значению.
Функция Присвоить(А,Знач Б)
	А=Б;    
	Возврат "";
КонецФункции

//_____________________________________________________________________________
//Назначение:
//поменять местами значения переменных
Функция Поменять(А,Б)
	Перем С;
	С=А;А=Б;Б=С;
	Возврат "";
КонецФункции //Поменять




//_____________________________________________________________________________
//Назначение:
//Вернуть итог по колонке таблицы документа,
//передаваемое по значению: имя колонки табличной части (реквизита)
Функция Итог(Док,Реквизит)
	Таб="";
	Док.ВыгрузитьТабличнуюЧасть(Таб,Реквизит);
	Возврат Таб.Итог(Реквизит);
КонецФункции

//************************************************************************************
//************************************************************************************
                 
Процедура ПриОткрытии()
	Если ПроведениеПоАлгоритмуМОД=1 Тогда
		Если ТипЗначенияСтр(Форма.Параметр)="ГрупповойКонтекст" Тогда
			ПроведениеДокумента(Форма.Параметр);
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	                      
	МетаДатаВорк		= CreateObject("MetaDataWork");
	
	Если Число(Константа.IDD)=0 Тогда//не было инициализации
		Предупреждение("Выполните инициализацию базы - закладка ""Инициализация"" !",10);
	КонецЕсли;
	
	Если Сокрлп(База.Вид())="" Тогда
		НазначитьВид(База,"ПериферийныеБазы");
	КонецЕсли;
	Форма.База.НеИзменятьВид(1);
	
	ЗаполнитьСписокПодчиненныхСправочников();
	
	//****** константы !!!!!!
	
	ДатаРегИзм=Константа.ДатаРегистрацииИзменений;
	IDDПрефиксИБ=Константа.IDDПрефиксИБ;
	РегистрацияИзменений=Константа.РегистрацияИзменений;
	НеРегистрироватьГрИзм=Константа.НеРегистрироватьГрИзм;
	Попытка
		Если РасширенныйРежим=1 Тогда
			ПериодРепликацииМОД=Константа.ПериодРепликацииМОД;
			ИмяКомпьютераРепликацииМОД=Константа.ИмяКомпьютераРепликацииМОД;
		КонецЕсли;
	Исключение
		РасширенныйРежим=0;
	КонецПопытки;
	
	ОбработкаПримера=0;
	//******
	СписокВыборочнойВыгрузки=0;
	Если СокрЛП(Форма.Параметр)<>"" Тогда
		Если ТипЗначения(Форма.Параметр)=11 Тогда
			База=Форма.Параметр;
			ОбъектыВыборочнойВыгрузки();
			УстановитьБазу();
			Сформировать();
		ИначеЕсли ТипЗначенияСтр(Форма.Параметр)="СписокЗначений" Тогда
			ВыводитьСообщения=1;
			Команда=Форма.Параметр.Получить("Команда");
			Если Сокрлп(Команда)="Выгрузка шаблона" Тогда
				ФайлШаблона=Форма.Параметр.Получить("ФайлШаблона");
				База=Форма.Параметр.Получить("База");
				ВыбрБаза=База;
				БыстраяВыгрузкаШаблона(ВыбрБаза,ФайлШаблона);
			ИначеЕсли Сокрлп(Команда)="Загрузка шаблона" Тогда
				ФайлШаблона=Форма.Параметр.Получить("ФайлШаблона");
				База="";
				БыстраяЗагрузкаШаблона(ФайлШаблона);
			ИначеЕсли Сокрлп(Команда)="Выгрузка шапки" Тогда
				База=Форма.Параметр.Получить("База");
				ФайлШапки=Форма.Параметр.Получить("ФайлШапки");
				УстановитьБазу();
				ВыгрузитьШапку(База,1,Сокрлп(ФайлШапки));
			ИначеЕсли Сокрлп(Команда)="Список выгрузки" Тогда
				База=Форма.Параметр.Получить("База");
				УстановитьБазу();
				СписокВыборочнойВыгрузки=Форма.Параметр.Получить("Список");
				РежимВыгрузки=4;
				ЗнЗагрузки=Форма.Параметр.Получить("Загрузка");
				Загрузка=?(ЗнЗагрузки=1,1,0); 
				ЗнВыгрузки=Форма.Параметр.Получить("Выгрузка");
				Выгрузка=?(ЗнВыгрузки=0,0,1); //т.е. если не заданы режимы (выгрузки и/или загрузка), то только выгрузка
				ОбработкаПримера=Форма.Параметр.Получить("Пример");
				Если ОбработкаПримера=1 Тогда
					МОДПерем1=СоздатьОбъект("СписокЗначений"); 
				КонецЕсли;
				Сформировать();
			ИначеЕсли Сокрлп(Команда)="Загрузка-Выгрузка" Тогда
				База=Форма.Параметр.Получить("База");//при таком вызове загрузка и выгрузка назначаются отдельно
				ОбъектыВыборочнойВыгрузки();
				УстановитьБазу();
				Загрузка=Форма.Параметр.Получить("Загрузка");
				Выгрузка=Форма.Параметр.Получить("Выгрузка");
				ОбработкаПримера=Форма.Параметр.Получить("Пример");
				Если ОбработкаПримера=1 Тогда
					МОДПерем1=СоздатьОбъект("СписокЗначений"); 
				КонецЕсли;
				Сформировать();
			ИначеЕсли Сокрлп(Команда)="Ручное открытие" Тогда
				База=Форма.Параметр.Получить("База");
				Форма.IDD.Доступность(0);
				Форма.ИспользоватьЗакладки(1);
				Форма.Закладки.УдалитьВсе();
				НеобходимыеЗакладки();
				
				ОбъектыВыборочнойВыгрузки();
				УстановитьБазу();
				Возврат;
			Иначе 
				Сообщить("Недопустимая команда вызова обработки обмена данными !","I");
				ЗаписатьВЛогОшибку("Недопустимая команда вызова обработки обмена данными !");
			КонецЕсли;
		Иначе//Если ТипЗначения(Форма.Параметр)=100 Тогда
			База=Форма.Параметр.База;
			УстановитьБазу();
			РежимВыгрузки=3;
			ТипОбъектаВыборочно.УдалитьВсе();
			ТипОбъектаВыборочно.ДобавитьЗначение(ТипЗначенияСтр(Форма.Параметр.Объект)+"."+Форма.Параметр.Объект.Вид(),ТипЗначенияСтр(Форма.Параметр.Объект)+"."+Форма.Параметр.Объект.Вид());
			ТипОбъектаВыборочно.ТекущаяСтрока(1);
			Имя=ТипЗначенияСтр(Форма.Параметр.Объект);
			Форма.ОбъектВыборочно.НазначитьТип(Имя);
			ОбъектВыборочно=Форма.Параметр.Объект;
			Сформировать();
		КонецЕсли;
		СтатусВозврата(0);//закрываем форму !!
		Возврат; //и выходим
	Иначе
		
		//некоторые манипуляции с формой ...
		Если Число(Константа.IDD)<>0 Тогда
			Форма.IDD.Доступность(0);
		Иначе
			Форма.IDD.Доступность(1);
		КонецЕсли;
		Форма.ИспользоватьЗакладки(1);
		Форма.Закладки.УдалитьВсе();
		НеобходимыеЗакладки();
		ОбъектыВыборочнойВыгрузки();
		//ЗаполнитьСписокПакетов();
		УстановитьБазу();
	КонецЕсли;
	РазрешитьРепликациюМОД=РазрешитьРепликациюМОД-1;
КонецПроцедуры //При открытии


//_____________________________________________________________________________

//_____________________________________________________________________________
Процедура КопироватьФайл(Источник,Приемник,СоздКаталог=0)
	Перем Атр,ИмяФайла;
	Если ФС.СуществуетФайл(Источник)=1 Тогда
		ФС.АтрибутыФайла(Источник,"",Атр);
		Если Сред(Атр,4,1)="1" Тогда//это каталог
			Сообщить("Каталог "+Источник);
			Если СоздКаталог=1 Тогда
				ФС.СоздатьКаталог(Приемник);
			КонецЕсли;
			ИмяФайла=ФС.НайтиПервыйФайл(Источник+"\*.*");
			Пока Сокрлп(ИмяФайла)<>"" Цикл
				Если (ИмяФайла<>".")И(ИмяФайла<>"..") Тогда
					КопироватьФайл(Источник+"\"+ИмяФайла,Приемник+"\"+ИмяФайла,1);
				КонецЕсли;
				ИмяФайла=ФС.НайтиСледующийФайл();
			КонецЦикла;
		Иначе
			Состояние("Копируется "+Источник);
			ФС.КопироватьФайл(Источник,Приемник,0);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры //КопироватьФайл

//_____________________________________________________________________________

Процедура СозданиеКопииБазы()
	Перем Каталог,Файл;
	Если Фс.СуществуетФайл(КаталогИБ()+"1Cv7.DBA")=1 Тогда
		Предупреждение("Эта функция в SQL-й версии не поддерживается",30);
		Возврат;
	КонецЕсли;
	
	Если Фс.СуществуетФайл(КаталогИБ()+"arj.exe")=0 Тогда
		Предупреждение("Для возможности выполнения этой функции в каталоге 
		|базы данных должен присутствовать файл arj.exe",30);
		Возврат;
	КонецЕсли;
	Если МонопольныйРежим()=1 Тогда
		Предупреждение("Для создания копии периферийной базы необходимо 
		|войти в программу в немонопольном режиме",10);
		Возврат;
	КонецЕсли;
	Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
	Спр.НайтиЭлемент(База);
	Если Спр.Выбрать("","Выберите базу для которой нужно создать копию !")=0 Тогда
		Возврат;
	КонецЕсли;
	Если ФС.ВыбратьФайл(1,Файл,Каталог,"Выберите файл архива для копии базы","*.arj|*.arj","*.*|*.*")=0 Тогда
		Возврат;
	КонецЕсли;
	
	ФайлАрхива=Каталог+Файл;
	//создаем специальный файл первичной загрзки IDD в константу периферийной базы
	Т=СоздатьОбъект("Текст");
	Т.ДобавитьСтроку("ID");
	Т.ДобавитьСтроку(Спр.IDD);
	ИмяФайлаМаркера=КаталогИБ()+"tran5.dbf";
	
	Т.Записать(ИмяФайлаМаркера);
	
	ФС.УдалитьФайл(ФайлАрхива);
	Попытка
		ФС.УстТекКаталог(КаталогИБ());
		//	Команда="pkzip.exe -a -p -r -xsyslog\*.* -xnew_stru\*.* -x*.cdx -x*.lst -x*.lck -x*.cfg """+ФайлАрхива+""""+" *.*";
		Команда="arj a -v1400k -r -y -x*.cdx -x*.lck -x*.lst -xnew_stru\*.* """+ФайлАрхива+"""";
		//	Сообщить(Команда);
		КомандаСистемы(Команда);
		
		
		ФС.УдалитьФайл(ИмяФайлаМаркера);
		Если ФС.СуществуетФайл(ФайлАрхива)=1 Тогда
			Предупреждение("Создан архив "+ФайлАрхива+" 
			|для периферийной базы с IDD="+Спр.IDD+".
			|Далее следует транспортировать архивную базу
			|на удаленный компьютер. Создать каталог и разархивировать
			|в нем базу, применив команду: arj x -v -y "+Файл+".
			|После этого запустить 1С-Предприятие в монопольном режиме.",0);
		КонецЕсли;
		
	Исключение
		ФС.УдалитьФайл(ИмяФайлаМаркера);
	КонецПопытки
КонецПроцедуры //СозданиеКопииБазы

//_____________________________________________________________________________
Функция ЭлементМетаданных(Уровень,Имя,ПредСпр,Группа=0,Истор=0,Движ=1,Статус=0)
	Перем НомСтр;
	Движ=?(Движ=1,ДаДа,"");
	Истор=?(Истор=1,ДаДа,"");
	Табл=МасТаблиц[Уровень];
	
	Если ТипСозданияТаблицы=1 Тогда
		//присваиваем значения таблицы
		НомСтр=Таб_НоваяСтрока(Табл);
		Таб_УстановитьЗначение(Табл,НомСтр,"Наименование",Имя);
		Таб_УстановитьЗначение(Табл,НомСтр,"Синоним",Имя);
		Таб_УстановитьЗначение(Табл,НомСтр,"Движения",Движ);
		Таб_УстановитьЗначение(Табл,НомСтр,"Периодичность",Движ);
		Таб_УстановитьЗначение(Табл,НомСтр,"История",Истор);
		Таб_УстановитьЗначение(Табл,НомСтр,"Статус",Статус);
		
		//если это группа, то создаем новую таблицу
		Если Группа=1 Тогда
			Табл1=ПолучитьОбъект_ТаблицаЗначений();
			Таб_ВставитьКолонку(Табл1,"Указатель");
			Таб_ВставитьКолонку(Табл1,"Наименование");
			Таб_ВставитьКолонку(Табл1,"Синоним");
			Таб_ВставитьКолонку(Табл1,"Движения");
			Таб_ВставитьКолонку(Табл1,"История");
			Таб_ВставитьКолонку(Табл1,"Синхронизация");
			Таб_ВставитьКолонку(Табл1,"Статус");
			Таб_ВставитьКолонку(Табл1,"Периодичность");
			
			Таб_УстановитьЗначение(Табл,НомСтр,"Указатель",Табл1);
			
			МасТаблиц[Уровень+1]=Табл1;
		КонецЕсли;
	Иначе //формируем таблицу для выгрузки
		Если Группа=0 Тогда //последний уровень всегда инт табл
			Если ИмяПервогоУровня="Журналы расчетов" Тогда
				Табл.ДобавитьЗначение(Имя,Имя);
			Иначе
			//присваиваем значения таблицы
			НомСтр=Таб_НоваяСтрока(Табл);
			Таб_УстановитьЗначение(Табл,НомСтр,"Наименование",Имя);
			Таб_УстановитьЗначение(Табл,НомСтр,"История",Истор);
			Табл1=0;	
			КонецЕсли;
		ИначеЕсли Уровень=1 Тогда
			Если Имя="Константы" Тогда //2-й уровень будет инт табл
				Табл1=ПолучитьОбъект_ТаблицаЗначений();
				Таб_ВставитьКолонку(Табл1,"Указатель");
				Таб_ВставитьКолонку(Табл1,"Наименование");
				Таб_ВставитьКолонку(Табл1,"История");
			Иначе //2-й уровень будет табл значений
				Табл1=СоздатьОбъект("ТаблицаЗначений");
				Табл1.ВставитьКолонку("Указатель");
				Табл1.ВставитьКолонку("Наименование");
				Табл1.ВставитьКолонку("Движения","Строка",1);
			КонецЕсли;
			ИмяПервогоУровня=Имя;
			Табл.ДобавитьЗначение(Табл1,Имя);
		ИначеЕсли Уровень=2 Тогда
			Если (ИмяПервогоУровня="Операции") 
			ИЛИ(ИмяПервогоУровня="Справочники")
			ИЛИ(ИмяПервогоУровня="Перечисления") 
//			ИЛИ(ИмяПервогоУровня="Журналы расчетов") 
			Тогда //3-й уровень будет инт. таблица значений
				Табл1=ПолучитьОбъект_ТаблицаЗначений();
				Таб_ВставитьКолонку(Табл1,"Указатель");
				Таб_ВставитьКолонку(Табл1,"Наименование");
				Таб_ВставитьКолонку(Табл1,"История");
				Таб_ВставитьКолонку(Табл1,"Синхронизация");
			иначе //3-й уровень будет список
				Табл1=СоздатьОбъект("СписокЗначений");
			КонецЕсли;
			Табл.НоваяСтрока();
			Табл.Указатель=Табл1;
			Табл.Наименование=Имя;
			Табл.Движения=Движ;
		ИначеЕсли Уровень=3 Тогда
			//4-й уровень будет инт. таблица значений
			Табл1=ПолучитьОбъект_ТаблицаЗначений();
			Таб_ВставитьКолонку(Табл1,"Указатель");
			Таб_ВставитьКолонку(Табл1,"Наименование");
			Таб_ВставитьКолонку(Табл1,"История");
			Таб_ВставитьКолонку(Табл1,"Синхронизация");
			Табл.ДобавитьЗначение(Табл1,Имя);
		КонецЕсли;
		МасТаблиц[Уровень+1]=Табл1;
	КонецЕсли;	
	Возврат 1;
КонецФункции //ЭлементМетаданных

//_____________________________________________________________________________
Процедура ЗаполнитьСтруктуруПравил(ВыбБаза,Тип)//заполнить справочник исходя из текущей конфигурации
	Параметр=ВыбБаза;
	Если ПустоеЗначение(Параметр)=1 Тогда
		Возврат;
	КонецЕсли;
	
	глМОДБылФильтрВыгрузки=0;
	глМОДБылФильтрЗагрузки=0;
	
	
	Таб=ПолучитьОбъект_ТаблицаЗначений();
	Таб_ВставитьКолонку(Таб,"Указатель");
	Таб_ВставитьКолонку(Таб,"Наименование");
	Таб_ВставитьКолонку(Таб,"Синоним");
	Таб_ВставитьКолонку(Таб,"Движения");
	Таб_ВставитьКолонку(Таб,"История");
	Таб_ВставитьКолонку(Таб,"Периодичность");
	Таб_ВставитьКолонку(Таб,"Статус");
	
	ИмяПервогоУровня="";
	
	Если Тип="Загрузка" Тогда
		Вид="ПравилаЗагрузки";
		ТипСозданияТаблицы=1;
		ТаблицаЗагрузки=Таб;
		ТаблицаПравил=Таб;
		МасТаблиц[1]=Таб;
	Иначе
		Вид="ПравилаВыгрузки";
		ТипСозданияТаблицы=2;
		СписокПравил=СоздатьОбъект("СписокЗначений");
		МасТаблиц[1]=СписокПравил;
		//	ТаблицаВыгрузки1=Таб;
	КонецЕсли;
	
	
	
	//Планы счетов
	Для М1=1 По 1 Цикл
		//	Прогрессор(2);//************ прогрессор
		Попытка
			Состояние("Заполнение плана счетов");
			Если Метаданные.ДокументОперации.Выбран()=1 Тогда
				Спр=СоздатьОбъект("Справочник."+Вид);
				Имя="Планы счетов";
				Если ЭлементМетаданных(1,Имя,"",1)=0 Тогда
					Продолжить;
				КонецЕсли;
				РодительСпр=Спр.ТекущийЭлемент();
				Ц=ПланыСчетов.КоличествоЗначений();
				Для Ц=1 по ПланыСчетов.КоличествоЗначений() Цикл
					Имя=ПланыСчетов.ЗначениеПоНомеру(Ц).Идентификатор();
					Если ЭлементМетаданных(2,Имя,РодительСпр,1,0,1)=0 Тогда
						Продолжить;
					КонецЕсли;
					ТекПлан=Спр.ТекущийЭлемент();
					Об=СоздатьОбъект("Счет");
					Об.ИспользоватьПланСчетов(ПланыСчетов.ЗначениеПоИдентификатору(Имя));
					Об.ВыбратьСчета();
					Пока Об.ПолучитьСчет()>0 Цикл
						Имя=Строка(Об.ТекущийСчет());
						Если ЭлементМетаданных(3,Имя,ТекПлан,1,0,0)=0 Тогда
							Продолжить;
						КонецЕсли;
						ТекСчет=Спр.ТекущийЭлемент();
						Для ЦЦ=1 по Об.КоличествоСубконто() Цикл
							Спр.ИспользоватьРодителя(ТекСчет);
							Спр.ВключатьПодчиненные(0);
							Субк=Об.ВидСубконто(ЦЦ,);
							Имя=Субк.Идентификатор();
							ЭлементМетаданных(4,Имя,ТекСчет,0);
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	
	
	//Операции
	//	Прогрессор(4);//************ прогрессор
	Для М1=1 По 1 Цикл
		Состояние("Заполнение операций");
		Спр=СоздатьОбъект("Справочник."+Вид);
		Имя="Операции";
		Если ЭлементМетаданных(1,Имя,"",1)=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для М2=1 По 1 Цикл
			ТекДок=Спр.ТекущийЭлемент();
			Имя="Атрибуты операции";
			Если ЭлементМетаданных(2,Имя,ТекДок,1)=0 Тогда
				Продолжить;
			КонецЕсли;
			ТекДок1=Спр.ТекущийЭлемент();//"Атрибуты операции"
			
			Спр1=СоздатьОбъект("Справочник."+Вид);
			
			ЭлементМетаданных(3,"СуммаОперации",ТекДок1,0);
			
			ЭлементМетаданных(3,"Содержание",ТекДок1,0);
			
			ЭлементМетаданных(3,"#ПроводкиВключены",ТекДок1,0);
			
			
			
			Для А=1 По Метаданные.РеквизитОперации() Цикл
				Имя=Метаданные.РеквизитОперации(А).Идентификатор;
				//Тип=Метаданные.РеквизитОперации(А).//Тип;
				//Вид=Метаданные.РеквизитОперации(А).Вид;
				//Длина=Метаданные.РеквизитОперации(А).//Длина;
				//Точность=Метаданные.РеквизитОперации(А).//Точность;
				ЭлементМетаданных(3,Имя,ТекДок1,0);
				//ЗаписатьТипы(Спр1,//Тип+"."+Вид,//Длина,//Точность);
			КонецЦикла;
		КонецЦикла;	
		
		
		Для М2=1 По 1 Цикл
			Имя="Атрибуты проводки";
			Если ЭлементМетаданных(2,Имя,ТекДок,1)=0 Тогда
				Продолжить;
			КонецЕсли;
			ТекДок1=Спр.ТекущийЭлемент();//"Атрибуты проводки"
			
			Спр1=СоздатьОбъект("Справочник."+Вид);
			
			ЭлементМетаданных(3,"Сумма",ТекДок1,0);
			//Длина=Число(Метаданные.ДлинаСуммыПроводки);
			//Точность=Число(Метаданные.ТочностьСуммыПроводки);
			//ЗаписатьТипы(Спр1,"Число",//Длина,//Точность);
			
			ЭлементМетаданных(3,"ВалСумма",ТекДок1,0);
			//Длина=Число(Метаданные.ДлинаВалютнойСуммыПроводки);
			//Точность=Число(Метаданные.ТочностьВалютнойСуммыПроводки);
			//ЗаписатьТипы(Спр1,"Число",//Длина,//Точность);
			
			ЭлементМетаданных(3,"Валюта",ТекДок1,0);
			//ЗаписатьТипы(Спр1,"Справочник."+Метаданные.Валюта,"","");
			
			
			ЭлементМетаданных(3,"Количество",ТекДок1,0);
			//Длина=Число(Метаданные.ДлинаКоличестваПроводки);
			//Точность=Число(Метаданные.ТочностьКоличестваПроводки);
			//ЗаписатьТипы(Спр1,"Число",//Длина,//Точность);
			
			Для А=1 По Метаданные.РеквизитПроводки() Цикл
				Имя=Метаданные.РеквизитПроводки(А).Идентификатор;
				//Тип=Метаданные.РеквизитПроводки(А).//Тип;
				//Вид=Метаданные.РеквизитПроводки(А).Вид;
				//Длина=Метаданные.РеквизитПроводки(А).//Длина;
				//Точность=Метаданные.РеквизитПроводки(А).//Точность;
				ЭлементМетаданных(3,Имя,ТекДок1,0);
				//ЗаписатьТипы(Спр1,//Тип+"."+Вид,//Длина,//Точность);
			КонецЦикла;
			
			
			ЭлементМетаданных(3,"Дебет.Счет",ТекДок1,0);
			//ЗаписатьТипы(Спр1,"Счет","","");
			
			
			Для А=1 По Метаданные.МаксимальноеКоличествоСубконто Цикл
				Имя="Дебет.Субконто"+А;
				ЭлементМетаданных(3,Имя,ТекДок1,0);
			КонецЦикла;
			
			ЭлементМетаданных(3,"Кредит.Счет",ТекДок1,0);
			//ЗаписатьТипы(Спр1,"Счет","","");
			
			Для А=1 По Метаданные.МаксимальноеКоличествоСубконто Цикл
				Имя="Кредит.Субконто"+А;
				ЭлементМетаданных(3,Имя,ТекДок1,0);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;	
	
	
	
	//Документы
	//	Прогрессор(6);//************ прогрессор
	Состояние("Заполнение документов");
	Спр=СоздатьОбъект("Справочник."+Вид);
	
	Для М1=1 По 1 Цикл
		Имя="Документы";
		Если ЭлементМетаданных(1,Имя,"",1)=0 Тогда
			Продолжить;
		КонецЕсли;
		Док0=Спр.ТекущийЭлемент();
		
		
		Для ы=1 по Метаданные.Документ() Цикл
			Имя=Метаданные.Документ(ы).Идентификатор;
			
			Статус=Число(Метаданные.Документ(ы).КонтрольУникальности);
			Статус2=?(Число(Метаданные.Документ(ы).АвтоНумерация)=0,2,0);//если возвращет 2 , то надо самостоятельно устанавливать новый номер дока !!
			ВозврСтатус=?(Статус=1,2,Статус2);
			
			Если ЭлементМетаданных(2,Имя,Док0,1,,,ВозврСтатус)=0 Тогда
				Продолжить;
			КонецЕсли;
			
			//шапка
			Для М2=1 По 1 Цикл
				ТекДок=Спр.ТекущийЭлемент();//Документ
				Если ЭлементМетаданных(3,"Шапка",ТекДок,1)=0 Тогда
					Продолжить;
				КонецЕсли;
				ТекДок1=Спр.ТекущийЭлемент();//"Шапка"
				
				ЭлементМетаданных(4,"#ДатаДок",ТекДок1,0);
				//ЗаписатьТипы(Спр,"Дата");
				
				ЭлементМетаданных(4,"#ВремяДокумента",ТекДок1,0);
				
				ЭлементМетаданных(4,"#Проведен",ТекДок1,0);
				//ЗаписатьТипы(Спр,"Число",1,0);
				
				ЭлементМетаданных(4,"#Удален",ТекДок1,0);
				//ЗаписатьТипы(Спр,"Число",1,0);
				
				ЭлементМетаданных(4,"#ПомеченНаУдаление",ТекДок1,0);
				//ЗаписатьТипы(Спр,"Число",1,0);
				
				ЭлементМетаданных(4,"НомерДок",ТекДок1,0);
				//ТипНомера=Метаданные.Документ(ы).ТипНомера;
				//Тип=?(ТипНомера="Числовой","Число","Строка");
				//ДлинаНомера=Метаданные.Документ(ы).ДлинаНомера;
				//ЗаписатьТипы(Спр,//Тип,ДлинаНомера,0);
				
				Для у=1 по Метаданные.ОбщийРеквизитДокумента() Цикл
					Имя=Метаданные.ОбщийРеквизитДокумента(у).Идентификатор;
					
					Если СокрЛП(Имя)<>"IDD" Тогда
						//Тип=Метаданные.ОбщийРеквизитДокумента(у).//Тип;
						////Вид=Метаданные.ОбщийРеквизитДокумента(у).Вид;
						//Длина=Метаданные.ОбщийРеквизитДокумента(у).//Длина;
						//Точность=Метаданные.ОбщийРеквизитДокумента(у).//Точность;
						//Сортировка=Метаданные.ОбщийРеквизитДокумента(у).Сортировка;
						ЭлементМетаданных(4,Имя,ТекДок1,0);
						//ЗаписатьТипы(Спр,//Тип+"."+Вид,//Длина,//Точность);
					КонецЕсли;
				КонецЦикла;
				
				//другие реквизиты
				Спр1=СоздатьОбъект("Справочник."+Вид);
				Спр1.ИспользоватьВладельца(Параметр);
				Для ыы=1 по Метаданные.Документ(ы).РеквизитШапки() Цикл
					//Тип=Метаданные.Документ(ы).РеквизитШапки(ыы).//Тип;
					//Вид=Метаданные.Документ(ы).РеквизитШапки(ыы).Вид;
					//Длина=Метаданные.Документ(ы).РеквизитШапки(ыы).//Длина;
					//Точность=Метаданные.Документ(ы).РеквизитШапки(ыы).//Точность;
					Имя=Метаданные.Документ(ы).РеквизитШапки(ыы).Идентификатор;
					ЭлементМетаданных(4,Имя,ТекДок1,0);
					//ЗаписатьТипы(Спр,//Тип+"."+Вид,//Длина,//Точность);
				КонецЦикла;
			КонецЦикла;
			
			
			//Табл. часть
			Для М2=1 По 1 Цикл
				Если ЭлементМетаданных(3,"Табличная часть",ТекДок,1)=0 Тогда
					Продолжить;
				КонецЕсли;
				ТекДок1=Спр.ТекущийЭлемент();//"Табличная часть"
				
				Для ыы=1 по Метаданные.Документ(ы).РеквизитТабличнойЧасти() Цикл
					//Тип=Метаданные.Документ(ы).РеквизитТабличнойЧасти(ыы).//Тип;
					////Вид=Метаданные.Документ(ы).РеквизитТабличнойЧасти(ыы).Вид;
					//Длина=Метаданные.Документ(ы).РеквизитТабличнойЧасти(ыы).//Длина;
					//Точность=Метаданные.Документ(ы).РеквизитТабличнойЧасти(ыы).//Точность;
					Имя=Метаданные.Документ(ы).РеквизитТабличнойЧасти(ыы).Идентификатор;
					ЭлементМетаданных(4,Имя,ТекДок1,0);
					//ЗаписатьТипы(Спр,//Тип+"."+Вид,//Длина,//Точность);
				КонецЦикла;
				ЭлементМетаданных(4,"НомерСтроки",ТекДок1,0);
				//ЗаписатьТипы(Спр,"Число",5,0);
			КонецЦикла;
		КонецЦикла;//М2;
	КонецЦикла;//М1
	
	
	
	Для М1=1 По 1 Цикл
		//Справочники
		//Прогрессор(8);//************ прогрессор
		Состояние("Заполнение справочников");
		Спр=СоздатьОбъект("Справочник."+Вид);
		
		Если ЭлементМетаданных(1,"Справочники","",1)=0 Тогда
			Продолжить;
		КонецЕсли;
		ТекСпр=Спр.ТекущийЭлемент();//справочники
		
		Для ы=1 по Метаданные.Справочник() Цикл
			Имя=Метаданные.Справочник(ы).Идентификатор;
			Если (Имя="ПравилаЗагрузки") или (Имя="ПравилаВыгрузки") или (Имя="ПериферийныеБазы") или 
				(Имя="ИзмененияМОД") или (Имя="УдаленияМОД") или (Имя="Пакеты") или (Имя="ЖурналРегистрации") Тогда
				Продолжить;
			КонецЕсли;
			
			Статус=Число(Метаданные.Справочник(ы).КонтрольУникальности)*(2+Число(Метаданные.Справочник(ы).АвтоНумерация));
			
			
			Если ЭлементМетаданных(2,Имя,ТекСпр,1,0,0,Статус)=0 Тогда
				Продолжить;
			КонецЕсли;
			
			//Реквизиты
			ТекСпр1=Спр.ТекущийЭлемент();//Вид справочника
			
			ЭлементМетаданных(3,"#Удален",ТекСпр1,0);
			//ЗаписатьТипы(Спр,"Число",1,0);
			
			ЭлементМетаданных(3,"#ЭтоГруппа",ТекСпр1,0);
			//ЗаписатьТипы(Спр,"Число",1,0);
			
			ЭлементМетаданных(3,"#ПомеченНаУдаление",ТекСпр1,0);
			//ЗаписатьТипы(Спр,"Число",1,0);
			
			ЭлементМетаданных(3,"Родитель",ТекСпр1,0);
			//ЗаписатьТипы(Спр,"Справочник."+ТекСпр1.Наименование);
			
			ЭлементМетаданных(3,"Владелец",ТекСпр1,0);
			//Влад=Метаданные.Справочник(ы).Владелец;
			//Если Влад.Выбран()=1 Тогда
			//ЗаписатьТипы(Спр,"Справочник."+Влад.Идентификатор);
			//КонецЕсли;
			
			ЭлементМетаданных(3,"Код",ТекСпр1,0);
			//Тип=?(Метаданные.Справочник(ы).ТипКода="Числовой","Число","Строка");
			//Длина=Метаданные.Справочник(ы).ДлинаКода;
			//ЗаписатьТипы(Спр,//Тип,//Длина);
			
			ЭлементМетаданных(3,"Наименование",ТекСпр1,0);
			//Длина=Метаданные.Справочник(ы).ДлинаНаименования;
			//ЗаписатьТипы(Спр,"Строка",//Длина);
			
			//остальные реквизиты
			Для ыы=1 по Метаданные.Справочник(ы).Реквизит() Цикл
				Имя=Метаданные.Справочник(ы).Реквизит(ыы).Идентификатор;
				Периодический=Число(Метаданные.Справочник(ы).Реквизит(ыы).Периодический);
				Если СокрЛП(Имя)<>"IDD" Тогда
					ЭлементМетаданных(3,Имя,ТекСпр1,0,Периодический);
					//Тип=Метаданные.Справочник(ы).Реквизит(ыы).//Тип;
					////Вид=Метаданные.Справочник(ы).Реквизит(ыы).Вид;
					//Длина=Метаданные.Справочник(ы).Реквизит(ыы).//Длина;
					//Точность=Метаданные.Справочник(ы).Реквизит(ыы).//Точность;
					//ЗаписатьТипы(Спр,//Тип+"."+Вид,//Длина,//Точность);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;//М1
	
	
	Для М1=1 По 1 Цикл
		//Регистры
		Состояние("Заполнение регистров");
		Если Метаданные.Регистр()>0 Тогда
			Если ЭлементМетаданных(1,"Регистры","",1)=0 Тогда
				Продолжить;
			КонецЕсли;
			Рег0=Спр.ТекущийЭлемент();//Регистр
			Для ы=1 по Метаданные.Регистр() Цикл
				Имя=Метаданные.Регистр(ы).Идентификатор;
				Если ЭлементМетаданных(2,Имя,Рег0,1)=0 Тогда
					Продолжить;
				КонецЕсли;
				ТекРег=Спр.ТекущийЭлемент();//Вид регистров
				
				ЭлементМетаданных(3,"Измерения",ТекРег,1);
				
				ТекРег1=Спр.ТекущийЭлемент();//Измерения
				
				
				Для ыы=1 по Метаданные.Регистр(ы).Измерение() Цикл
					//Тип=Метаданные.Регистр(ы).Измерение(ыы).//Тип;
					////Вид=Метаданные.Регистр(ы).Измерение(ыы).Вид;
					//Длина=Метаданные.Регистр(ы).Измерение(ыы).//Длина;
					//Точность=Метаданные.Регистр(ы).Измерение(ыы).//Точность;
					Имя=Метаданные.Регистр(ы).Измерение(ыы).Идентификатор;
					ЭлементМетаданных(4,Имя,ТекРег1,0);
					//ЗаписатьТипы(Спр,//Тип+"."+Вид,//Длина,//Точность);
				КонецЦикла;
				
				ЭлементМетаданных(4,"#НомерСтроки",ТекРег1,0);
				//ЗаписатьТипы(Спр,"Число",5,0);
				
				ЭлементМетаданных(3,"Ресурсы",ТекРег,1);
				ТекРег1=Спр.ТекущийЭлемент();//"Ресурсы"
				
				Для ыы=1 по Метаданные.Регистр(ы).Ресурс() Цикл
					//Тип=Метаданные.Регистр(ы).Ресурс(ыы).//Тип;
					////Вид=Метаданные.Регистр(ы).Ресурс(ыы).Вид;
					//Длина=Метаданные.Регистр(ы).Ресурс(ыы).//Длина;
					//Точность=Метаданные.Регистр(ы).Ресурс(ыы).//Точность;
					Имя=Метаданные.Регистр(ы).Ресурс(ыы).Идентификатор;
					ЭлементМетаданных(4,Имя,ТекРег1,0);
					//ЗаписатьТипы(Спр,//Тип+"."+Вид,//Длина,//Точность);
				КонецЦикла;
				
				ЭлементМетаданных(3,"Реквизиты",ТекРег,1);
				ТекРег1=Спр.ТекущийЭлемент();//"Ресурсы"
				
				Для ыы=1 по Метаданные.Регистр(ы).Реквизит() Цикл
					//Тип=Метаданные.Регистр(ы).Реквизит(ыы).//Тип;
					////Вид=Метаданные.Регистр(ы).Реквизит(ыы).Вид;
					//Длина=Метаданные.Регистр(ы).Реквизит(ыы).//Длина;
					//Точность=Метаданные.Регистр(ы).Реквизит(ыы).//Точность;
					Имя=Метаданные.Регистр(ы).Реквизит(ыы).Идентификатор;
					ЭлементМетаданных(4,Имя,ТекРег1,0);
					//ЗаписатьТипы(Спр,//Тип+"."+Вид,//Длина,//Точность);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;//М1
	
	
	Для М1=1 По 1 Цикл
		//Перечисления
		Спр=СоздатьОбъект("Справочник."+Вид);
		Если ЭлементМетаданных(1,"Перечисления","",1)=0 Тогда
			Продолжить;
		КонецЕсли;
		РодительСпр1=Спр.ТекущийЭлемент();	
		
		Для А=1 по Метаданные.Перечисление() Цикл
			Имя=Метаданные.Перечисление(А).Идентификатор;
			Если ЭлементМетаданных(2,Имя,РодительСпр1,1)=0 Тогда
				Продолжить;
			КонецЕсли;
			
			РодительСпр2=Спр.ТекущийЭлемент();	//вид перечисления
			
			Для АА=1 по Метаданные.Перечисление(А).Значение() Цикл
				Имя=Метаданные.Перечисление(А).Значение(АА).Идентификатор;
				ЭлементМетаданных(3,Имя,РодительСпр2,0);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;//М1
	
	
	Для М1=1 По 1 Цикл
		//	Константы
		Спр=СоздатьОбъект("Справочник."+Вид);
		Если ЭлементМетаданных(1,"Константы","",1)=0 Тогда
			Продолжить;
		КонецЕсли;
		РодительСпр=Спр.ТекущийЭлемент();	
		
		Для А=1 по Метаданные.Константа() Цикл
			Имя=Метаданные.Константа(А).Идентификатор;
			Периодический=Число(Метаданные.Константа(А).Периодический);
			Если (Имя<>"IDD") и (Имя<>"УникальныйIDD") и (Имя<>"ИмяКомпьютераРепликацииМОД") Тогда
				Если ЭлементМетаданных(2,Имя,РодительСпр,0,Периодический)=0 Тогда
					Продолжить;
				КонецЕсли;
				
				//Тип=Метаданные.Константа(А).//Тип;
				////Вид=Метаданные.Константа(А).Вид;
				//Длина=Метаданные.Константа(А).//Длина;
				//Точность=Метаданные.Константа(А).//Точность;
				
				//ЗаписатьТипы(Спр,//Тип+"."+Вид,//Длина,//Точность);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;//М1
	
	
	Для М1=1 По 1 Цикл
		//журналы расчетов	
		Если Метаданные.ЖурналРасчетов()>0 Тогда
			Состояние("Заполнение журнала расчета");
			Спр=СоздатьОбъект("Справочник."+Вид);
			Имя="Журналы расчетов";
			Если ЭлементМетаданных(1,Имя,"",1,0,0)=0 Тогда
				Продолжить;
			КонецЕсли;
			РодительСпр=Спр.ТекущийЭлемент();
			Для А=1 По Метаданные.ЖурналРасчетов() Цикл
				Имя=Метаданные.ЖурналРасчетов(А).Идентификатор;
				
				Если ЭлементМетаданных(2,Имя,РодительСпр,1)=0 Тогда
					Продолжить;
				КонецЕсли;
				ТекСпр=Спр.ТекущийЭлемент();
				
				
				
				ЭлементМетаданных(3,"Документ",ТекСпр,0,0,0);
				//ЗаписатьТипы(Спр,"Документ");
				
				ЭлементМетаданных(3,"РодительскийДокумент",ТекСпр,0,0,0);
				//ЗаписатьТипы(Спр,"Документ");
				
				ЭлементМетаданных(3,"Объект",ТекСпр,0,0,0);
				
				//ЗаписатьТипы(Спр,"Справочник");
				
				ЭлементМетаданных(3,"ВидРасч",ТекСпр,0,0,0);
				//ЗаписатьТипы(Спр,"ВидРасчета");
				
				ЭлементМетаданных(3,"ДатаНачала",ТекСпр,0,0,0);
				//ЗаписатьТипы(Спр,"Дата");
				
				ЭлементМетаданных(3,"ДатаОкончания",ТекСпр,0,0,0);
				//ЗаписатьТипы(Спр,"Дата");
				
				ЭлементМетаданных(3,"Сторно",ТекСпр,0,0,0);
				//ЗаписатьТипы(Спр,"Число",1,0);
				
				ЭлементМетаданных(3,"Рассчитана",ТекСпр,0,0,0);
				//ЗаписатьТипы(Спр,"Число",1,0);
				
				ЭлементМетаданных(3,"Исправлена",ТекСпр,0,0,0);
				//ЗаписатьТипы(Спр,"Число",1,0);
				
				ЭлементМетаданных(3,"Фиксирована",ТекСпр,0,0,0);
				//ЗаписатьТипы(Спр,"Число",1,0);
				
				ЭлементМетаданных(3,"Перерасчет",ТекСпр,0,0,0);
				//ЗаписатьТипы(Спр,"Число",1,0);
				
				ЭлементМетаданных(3,"#ПервичнаяЗапись",ТекСпр,0,0,0);
				//ЗаписатьТипы(Спр,"Число",3,0);
				
				ЭлементМетаданных(3,"Результат",ТекСпр,0,0,0);
				//Длина=Метаданные.ЖурналРасчетов(А).ДлинаРезультата;
				//Точность=Метаданные.ЖурналРасчетов(А).ТочностьРезультата;
				//ЗаписатьТипы(Спр,"Число",//Длина,//Точность);
				
				
				
				ЭлементМетаданных(3,"#ПериодРегистрации",ТекСпр,0,0,0);
				
				
				
				//Реквизиты
				Для АА=1 по Метаданные.ЖурналРасчетов(А).Реквизит() Цикл
					Имя=Метаданные.ЖурналРасчетов(А).Реквизит(АА).Идентификатор;
					ЭлементМетаданных(3,Имя,ТекСпр,0,0,0);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;			
	КонецЦикла;//М1
КонецПроцедуры



КаталогДБФ=КаталогИБ();


ДаДа="Х";
НетНет="";

ФлИдентифID=1;

//заранее 1 раз обявляем объекты - это нужно для рационального использования памяти
ГлобДок=СоздатьОбъект("Документ");
ГлобДокЗагрВыгрузки=СоздатьОбъект("Документ");
КолТаблицЗначений=0;

МожноЗакрывать=1;

Форма.КнопкаПоУмолчанию("КнОбмен");

Если Метаданные.ДокументОперации.Выбран()=1 Тогда
	ДокументОперации=Сокрлп(Метаданные.ДокументОперации.Идентификатор);
Иначе
	ДокументОперации="";
КонецЕсли;

//********* кусок из глобального модуля - продублирован для обеспечения совместимости версий Менеджера
МОДДлинаID=17;
МОДДлинаIDДокумента=17;


НомерПодтвержденногоПакетаЗагрузки=0;
МаксНомерПакетаВыгрузки=0;
НомерПодтвержденногоПакета=0;

ВыводитьСообщения=0;
ФайлШаблона="c:\shablon.mod";


ДублирIDD=0;


МаксКолОбъектовВПакете=1000;//объектов типа справочник, 
//объекты типа документ считаются как 1+количество строк в табличной части


РасширенныйРежим=0;
IDD=Константа.IDD;
ИспользоватьФТП=0;
ВстроеннаяАрхивация=0;
ИДДляОтладки="1234567";

ИспользоватьТранзакцию=1;

НоваяШапкаПакетов="Новая шапка пакетов";
ИдентичнаяКонфигурация="Идентичная конфигурация";
ИмяМОД="DataExchangeManager";
ПерваяИнициализация=0;
СписокИзмененияИД=СоздатьОбъект("СписокЗначений");


ВерсияПротоколаМОД="1.04";
ВерсияМОД="1.093"; // от 26.12.2000г  
СписокВыборочнойВыгрузки=0;
глСчетчикПОС=-1;


МОДИнфо=
"Менеджер обмена данными "+ВерсияМОД+"
|Copyright© 'ПиБи' 1999 - 2000 
|www.pb.ru, lider@pb.ru
|
|Протокол пакета обмена "+ВерсияПротоколаМОД+"
|
|Лицензия на МОД № " +IDD+"
|Информационная база: "+КаталогИБ();

РежимНастройки=0;

//Обновлять=1;
