//*******************************************
Перем тпДок, Источник;
Перем ТекущийСлой,ТекущаяЗакладка;
Перем ТекКомплектовщик;
Перем ТекущаяДокЗаявка;
Перем ТекущийДокПоставки;
Перем ПередатьФокус;
Перем пСтатус1,пСтатус2,пСтатус3,пСтатус4;
Перем сп;

//*****Выбор маршрута*****
Перем п_слПриемТовара,п_слНаправления;
Перем ТП,флСообщения,фл_Направления,Таб,ШрифтАриал10Жирный,ТекущееНаправление, ТекущийМаршрЛист;

Процедура НастроитьОкна(Показать=1) Далее
Процедура ЗаполнитьТПДок(Обновить=0) Далее

//*****Выбор маршрута*****
Процедура ВыводКлиента(док) Далее

//Функция ПолучитьСостояниеДок(Сост,ДокВид)
//	спрСост=СоздатьОбъект("Справочник.СостоянияДокументов");
//	спрСост.НайтиПоНаименованию(ДокВид); 
//	спрСост.ИспользоватьРодителя(спрСост.ТекущийЭлемент());
//	спрСост.НайтиПоНаименованию(Сост,1);
//	Возврат спрСост.ТекущийЭлемент();
//КонецФункции

//======================================================================
//Процедура СменитьСостояниеДокумента(пТекущийДок,пСост)
//	
//	СостДок=СоздатьОбъект("Документ.СостояниеДок");
//	СостДок.Новый();
//	ЗаполнитьШапку(СостДок); 
//	СостДок.ДокументОснование=пТекущийДок;
//	СостДок.СостояниеДок=ПолучитьСостояниеДок(пСост,пТекущийДок.Вид());
//	СостДок.АвтоВремяТекущее();
//	ОбъектЗаписать(СостДок,);
//	СостДок.АвтоВремяТекущее();
//	СостДок.Провести(1);
//	ЗаписьЖурналаРегистрации( "Состояние документа "+СостДок.НомерДок+" "+пТекущийДок.НомерДок,,пТекущийДок.Вид(), пТекущийДок, 2 );
//		
//КонецПроцедуры // СменитьСостояниеДокумента

Процедура НастроитьПривязки()
	
	УправлениеФормой = СоздатьОбъект("УправлениеФормой");
	Привязки = УправлениеФормой.ПривязкаЭлементов;
	//Сплиттер = УправлениеФормой.Сплиттер;
//	оПривязки.Добавить("тпЗаявки", "НН", "Форма", "ПЛ", "Форма");
//	оПривязки.Добавить("рЗаявкиКомпл", "НН", "Форма", "ПЛ", "Форма");
//	оПривязки.Добавить("тпЗаявкиАннул", "НН", "Форма", "ПП", "Форма");
//	оПривязки.Добавить("рЗаявкиРазукомл", "НН", "Форма", "ПП", "Форма");
////	оПривязки.Добавить("тСплиттер", "ВН", "Форма", "ПП", "Форма");
//	оПривязки.Добавить("кнПечать", "ВН", "Форма", "НН", "Форма");
//	оПривязки.Добавить("кнЗакрыть", "ВН", "Форма", "НН", "Форма");
//	оПривязки.Добавить("тпИстория", "НН", "Форма", "ПП", "Форма");
//	оПривязки.Добавить("кнПечатьИст", "ВН", "Форма", "НН", "Форма");
//	оПривязки.Добавить("тПринтер", "ВН", "Форма", "НН", "Форма");
//	оПривязки.Добавить("спПринтеров", "ВН", "Форма", "НН", "Форма");     
//	оПривязки.Добавить("чПечатьАвто", "ВН", "Форма", "НН", "Форма");
//	оПривязки.Добавить("МестоКомпл", "ВН", "Форма", "НН", "Форма");     

	//Привязки//:УправлениеФормой.Привязка
	
	//Привязки.УстановитьСплиттерПоАтрибутам("Сплиттер",Привязки.ВертикальныйСплиттер,"тпЗаявки,рЗаявкиКомпл","тпЗаявкиАннул,рЗаявкиРазукомл");
	
	Привязки.УстановитьГраницыПоФорме("тпДок_",1,1,1,1);
	Привязки.УстановитьГраницыПоФорме("тпКнопка_",1,1,1,1);
	
//	Привязки.УстановитьГраницыПоФорме("тпМЛ",1,1,1,1);
//	Привязки.УстановитьГраницыПоФорме("рЗаявкиКомпл",1,1,1,1);
	//Привязки.УстановитьГраницыПоФорме("Сплиттер",0,1,1,1);
//	Привязки.УстановитьГраницыПоФорме("тпЗаявкиАннул",0,1,1,1);
//	Привязки.УстановитьГраницыПоФорме("рЗаявкиРазукомл",0,1,1,1);
	Привязки.УстановитьГраницыПоФорме("кнВыбратьДок",1,0,0,1);
	Привязки.УстановитьГраницыПоФорме("кнЗаморозитьДок",1,0,0,1);
	Привязки.УстановитьГраницыПоФорме("кнПровестиЗаявку",1,0,0,1);
	Привязки.УстановитьГраницыПоФорме("кнНазначитьЗаявку",1,0,0,1);	




	Привязки.УстановитьГраницыПоФорме("кнВыбратьДок1",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кнВыходНаправление",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кнВыборФильтра",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("фл_БезМор",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("фл_Бумага",0,1,0,1);
	
	Привязки.УстановитьГраницыПоФорме("кнВыход",0,1,0,1);
//	Привязки.УстановитьГраницыПоФорме("тпИстория",1,1,1,1);
	Привязки.УстановитьГраницыПоФорме("кнМеньше",1,0,0,1);
	Привязки.УстановитьГраницыПоФорме("кнБольше",1,0,0,1);

	Привязки.УстановитьГраницыПоФорме("рДатаПрихода",1,0,0,1);
	Привязки.УстановитьГраницыПоФорме("МестоКомпл",1,0,0,1);
//	Привязки.УстановитьГраницыПоФорме("чПечатьАвто",1,0,0,1);
//	Привязки.УстановитьГраницыПоФорме("флСпецЗаказыПривязка",1,0,0,1);
//	Привязки.УстановитьГраницыПоФорме("МестоКомпл",1,0,0,1);
	
//	Привязки.УстановитьГраницыПоФорме("фУскорение",1,0,0,1);
//	Привязки.УстановитьГраницыПоФорме("кнОбновить",1,0,0,1);
	
	
	Привязки.Привязать();

КонецПроцедуры


Функция ПроверкаПриема(пТекущаяДокЗаявка,пКомплектовщик="")
	Перем текст;
	
	пДок=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос=СоздатьОбъект("ODBCRecordSet");
	
	Если пКомплектовщик="" Тогда
		текст="";
	Иначе
		текст="|AND ($ПрихНаклМобил.Комплектовщик = :Комплектовщик)";
		Запрос.УстановитьТекстовыйПараметр("Комплектовщик",пКомплектовщик);
	КонецЕсли;
	
	ТекстЗапроса="	SELECT КомплектацияМобил.IDDOC [Ссылка $Документ.КомплектацияМобил]
		|FROM $Документ.КомплектацияМобил AS КомплектацияМобил
		|WHERE ($КомплектацияМобил.ПоСчету = :пСчет)
		|";	
			
	Запрос.УстановитьТекстовыйПараметр("пСчет",пТекущаяДокЗаявка);
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,пДок);
	Возврат пДок;
КонецФункции

Функция ЗадачаНаВнешнююКоманду(пДок="",пКомплектовщик,Команда="")
	
	сзПараметр= СоздатьОбъект("СписокЗначений");
	сзПараметр.ДобавитьЗначение(Команда,"Команда");
	сзПараметр.ДобавитьЗначение(пКомплектовщик,"пКомплектовщик");
	сзПараметр.ДобавитьЗначение(ТекущаяДокЗаявка,"пДок");
	//сзПараметр.ДобавитьЗначение(ВзятьКонтекст(ТекущийДокумент()),"Конт");	

	Если Команда="Новый" Тогда
		Возврат ОткрытьФормуМодально("Документ.КомплектацияМобил",сзПараметр);
	ИначеЕсли 	Команда="НовыйБригадир" Тогда
		Возврат ОткрытьФормуМодально("Документ.КомплектацияМобил",сзПараметр);
	ИначеЕсли Команда="Открыть" Тогда
		Возврат ОткрытьФормуМодально(пДок,сзПараметр);
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции


//{*****Выбор маршрута*****\\

//{ТП
Процедура ТП_совмещениеТЧ(ТП_ТекСтрока)
//	СтрокаТЧ=Таб.ПолучитьЗначение(ТП_ТекСтрока,"НомерСтрокиДокумента");
	//ВыбратьСтроки();
//	ПолучитьСтрокуПоНомеру(СтрокаТЧ);
КонецПроцедуры	
Процедура ТП_Обновить()

	ТП.ОбновитьСтроки();
//	ТП.АвтоШирина();
	Форма.Обновить();
КонецПроцедуры

Процедура тпКнопка_ПриВыводеСтроки(тп, ОформлениеСтроки, ДанныеСтроки, ТипРегиона)
	Если флСообщения=1 Тогда
		сообщить("ПриВыводеСтроки");
	КонецЕсли;
	
	Если фл_Направления=1 Тогда
//		Если ТП.Колонки.МаршрутНаправление.Видимость = 1 Тогда
//		  ОформлениеСтроки.Ячейки.МаршрутНаправление.УстановитьТекст(ДанныеСтроки.МаршрутНаправление.Код+"   "+ДанныеСтроки.МаршрутНаправление.Наименование);
//		КонецЕсли;

		Если ТП.Колонки.Связка.Видимость = 1 Тогда
			Если ПустоеЗначение(ДанныеСтроки.Связка)=0 Тогда
				ОформлениеСтроки.Ячейки.Связка.УстановитьТекст(ДанныеСтроки.Связка.НомерДок);
			Иначе
				ОформлениеСтроки.Ячейки.Связка.УстановитьТекст("Пусто");
			КонецЕсли; 
  		КонецЕсли;

 	КонецЕсли;
	
	//Если ДанныеСтроки.Количество=ДанныеСтроки.КоличествоНеПодвержденое Тогда
	//	ОформлениеСтроки.ЦветФона = глПолучитьЦвет(0,255,0);
	//	//<ПолучитьЦвет(R,G,B)>
	//КонецЕсли;
	//Если ДанныеСтроки.Количество<>ДанныеСтроки.КоличествоНеПодвержденое Тогда
	//	ОформлениеСтроки.ЦветФона = глПолучитьЦвет(255,0,0);
	//	//<ПолучитьЦвет(R,G,B)>
	//КонецЕсли;		
			//Параметры:
	//
	//ОформлениеСтроки - тип: ОформлениеСтроки. Объект для управления оформлением выводимой строки табличного поля. 
	//ДанныеСтроки - тип: ДанныеСтроки. Данные (коллекция значений полей) выводимой строки табличного поля. 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает при выводе (отображении) строки табличного поля.
	
КонецПроцедуры
Процедура тпКнопка_Выбор(тп, Стр, Колонка, ТипРегиона)
	Если флСообщения=1 Тогда
		сообщить("Выбор");
	КонецЕсли;

	Таб_ТекущаяСтрока=ТП.ТекущаяСтрока;
//	Таб_ТекущаяКолонка=п_НижОграничитель;
//	ВыводТовара(Таб_ТекущаяСтрока);
//	ВыводИнфо();	
//	ПередатьФокус = "кнТовар"; 
//	Форма.Закрыть(0);
	
	//Параметры:
	//
	//Строка - тип: определяется поставищком данных. Значение, идентифицирующее строку ТП. 
	//Колонка - тип: КолонкаТабличногоПоля 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает при двойном клике на строке табличного поля, или нажатии клавиши Enter.
	
	//зн = тпСклады.ТекущиеДанные.Получить("Наименование").ТекущийЭлемент();
	//тпСклады.РедактироватьЗначение(1,Колонка,3,зн,0,0,"ВыбРеквизит","0x00000020"); 
	//Форма.ВыбРеквизит.НазначитьТип("Справочник.Склады");
	
КонецПроцедуры
Процедура тпКнопка_ПриАктивизацииСтроки(тп)
	Если флСообщения=1 Тогда 
		сообщить("ПриАктивизацииСтроки");
	КонецЕсли;
		Таб_ТекущаяСтрока=ТП.ТекущаяСтрока;
		Таб.ПолучитьСтрокуПоНомеру(Таб_ТекущаяСтрока);
	
	Если фл_Направления=0 Тогда
		ТекущийТовар=Таб.СчетСтрокиТовар;
	ИначеЕсли фл_Направления=1 Тогда		
		ТекущееНаправление=Таб.МаршрутНаправление;
		ТекущийМаршрЛист=Таб.Связка;
//		Сообщить(ТекущееНаправление);
//		Сообщить(ТекущийМаршрЛист);
	КонецЕсли;	
//	Форма.т_Товар.Заголовок(?(ПустоеЗначение(ТекущийТовар)=1,"Пусто",ТекущийТовар.Код+" "+ТекущийТовар.Наименование));
	л_ЗаголовокТНапр=?(ПустоеЗначение(ТекущееНаправление)=1,"Пусто",ТекущееНаправление.Наименование);
	л_ЗаголовокТМЛ=?(ПустоеЗначение(ТекущийМаршрЛист)=1,"Пусто",ТекущийМаршрЛист.НомерДок);
	
	Форма.т_Направление.Заголовок(?(л_ЗаголовокТМЛ="Пусто",л_ЗаголовокТНапр,л_ЗаголовокТМЛ));
	
//	Таб_ТекущаяКолонка=п_НижОграничитель;
//	ВыводТовара(Таб_ТекущаяСтрока);	
//	ВыводИнфо();

	
	//ОбновитьКартинки();
	
	//Описание: Возникает, когда любая строка становится текущей.
	
КонецПроцедуры
Процедура тпКнопка_ПриАктивизацииКолонки(тп)
	Если флСообщения=1 Тогда
		сообщить("ПриАктивизацииКолонки");
	КонецЕсли;
	// Описание: Возникает, когда любая колонка становится текущей.
	
КонецПроцедуры
Процедура тпКнопка_ПриАктивизацииЯчейки(тп)
	Если флСообщения=1 Тогда
		сообщить("ПриАктивизацииЯчейки");
	КонецЕсли;
	// Описание: Возникает, когда ячейка становится текущей. Порядок прохождения событий: ПриАктивизацииСтроки, ПриАктивизацииКолонки, ПриАктивизацииЯчейки.
	
КонецПроцедуры
Процедура тпКнопка_ПриВыбореЗаголовка(тп, Колонка)
	Если флСообщения=1 Тогда
		сообщить("ПриВыбореЗаголовка");
	КонецЕсли;
	//Параметры:
	//
	//Колонка - тип: КолонкаТабличногоПоля. Колонка, заголовок которой выбран. 
	//Описание: Возникает, когда пользователь выбирает мышью заголовок колонки.
	
КонецПроцедуры
Процедура тпКнопка_ПриКонтекстномМеню(тп, ТипРегиона, Колонка, Стр)
	Если флСообщения=1 Тогда
		сообщить("ПриКонтекстномМеню");
	КонецЕсли;
	//Параметры:
	//
	//ТипРегиона - тип: ТипыРегионовТП 
	// ТипыРегионовТП
	// Тип: Перечисление
	// 
	// Значения: 0 - регион не задан 
	// 1 - заголовок 
	// 2 - шапка 
	// 3 - строки (основная часть) 
	// 4 - подвал  
	//
	//Колонка - тип: КолонкаТабличногоПоля. Колонка табличного поля, на которой было вызвано контекстное меню. 
	//Строка - тип: определяется поставищком данных. Значение, идентифицирующее строку ТП. 
	//Описание: Возникает, когда необходимо отобразить контекстное меню.
	
	//тут делаем что надо
КонецПроцедуры
Процедура тпКнопка_ПриВыбореФлажка(тп, Стр, Колонка, ТипРегиона)
	Если флСообщения=1 Тогда
		сообщить("ПриВыбореФлажка");
	КонецЕсли;
	
	//Параметры:
	//
	//Строка - тип: определяется поставищком данных. Значение, идентифицирующее строку ТП. 
	//Колонка - тип: КолонкаТабличногоПоля 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает, когда пользователь изменяет значение флажка.
	
КонецПроцедуры
Процедура тпКнопка_НачалоПеретаскивания(тп, ДопустимыеДействия, Значение, Колонка, ТипРегиона, ТипЦели)
	Если флСообщения=1 Тогда
		сообщить("НачалоПеретаскивания");
	КонецЕсли;
	//
	//Параметры:
	//
	//ДопустимыеДействия - тип: Число. (Выход) Список допустимых действий перетаскивания. Список задается как сумма следующих значений:
	//
	//1 - копирование (Copy) 
	//2 - перетаскивание (Move) 
	//4 - связывание (Link) 
	//Значение по-умолчанию 1. Если необходимо разрешить другие действия, нужно изменить значение этого параметра на выходе из обработчика события. Если передать 0, т.е. не определить ни одного действия, Перетаскивание не начнется.
	//
	//Значение - тип: определяется поставщиком данных. (Вход) Значение, идентифицирующее строку табличного поля. (Выход) Значение, которое будет представлять перетаскиваемые данные.
	//
	//Колонка - тип: КолонкаТабличногоПоля
	//
	//ТипРегиона - тип: ТипыРегионовТП
	//
	//ТипЦели - тип: Число. (Выход) Определяет логическую область отображения перетаскиваемых данных в ТП.
	//
	//0 - не задано 
	//1 - ячейка 
	//2 - строка 
	//3 - колонка 
	//Это значение используется для определения области ТП, в которой не нужно формировать события проверки перетаскивания, в том случае когда ЭУ-приемником является то же ТП, что и источник.
	//
	//Описание: Возникает в ЭУ источнике данных, когда пользователь начинает перетаскивание (Drag&Drop).
	
КонецПроцедуры
Процедура тпКнопка_ОкончаниеПеретаскивания(тп, Действие, Значение, Колонка, ТипРегиона)
	Если флСообщения=1 Тогда
		сообщить("ОкончаниеПеретаскивания");
	КонецЕсли;
	//
	//Параметры:
	//
	//Действие - тип: Число. Действие - результат операции перетаскивания. Допустимые действия:
	//
	//0 - нет действия 
	//1 - копирование (Copy) 
	//2 - перетаскивание (Move) 
	//4 - связывание (Link) 
	//Значение - тип: Любой. Значение, представляющее перетаскиваемые данные. Это значение было задано в событии НачалоПеретаскивания|НачалоПеретаскивания. 
	//Колонка - тип: КолонкаТабличногоПоля 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает в ЭУ источнике данных, когда завершается операция перетаскивания (Drag&Drop).
	//
	//Обычная обработка: в случае операции 2 (перетаскивания или Move) нужно удалить перетаскиваемые данные. В параметре Действие ЭУ источник данных всегда получит одно из тех действий, которое он определил для себя в событии НачалоПеретаскивания / DragStart.
	//
	//Порядок прохождения событий: 
	//НачалоПеретаскивания|НачалоПеретаскивания - в источнике, 
	//ПроверкаПеретаскивания|ПроверкаПеретаскивания - в назначении, 
	//Перетаскивание|Перетаскивание - в назначении, 
	//ОкончаниеПеретаскивания - в источнике. 
КонецПроцедуры
Процедура тпКнопка_ПроверкаПеретаскивания(тп, Действие, Значение, СтрокаТП, КолонкаТП, ТипРегионаТП, ТипЦели)
	Если флСообщения=1 Тогда
		сообщить("ПроверкаПеретаскивания");
	КонецЕсли;
	//
	//Параметры:
	//
	//Действие - тип: Число. (Выход) Действие которое произойдет при совершении перетаскивания. По-умолчанию 0. Допустимые действия:
	//
	//0 - нет действия 
	//1 - копирование (Copy) 
	//2 - перетаскивание (Move) 
	//4 - связывание (Link) 
	//Значение - тип: Любой. Значение, представляющее перетаскиваемые данные. Это значение было задано в обработчике события НачалоПеретаскивания|НачалоПеретаскивания.
	//
	//СтрокаТП - тип: Любой. Значение представляющее строку табличного поля, в которую идет перетаскивание (находится под курсором). Обеспечивается поставщиком данных.
	//
	//
	//КолонкаТП - тип: КолонкаТабличногоПоля. Колонка табличного поля, в которую идет перетаскивание (находится под курсором). 
	//ТипРегионаТП - тип: ТипыРегионовТП. Тип региона, в который идет перетаскивание. 
	//ТипЦели - тип: Число. (Выход) Определяет логическую область приемника перетаскиваемых данных, которая подсвечивается рамкой. Значение по-умолчанию: если ЭУ источник данных - табличное поле, то значение, заданное в обработчике события НачалоПеретаскивания|НачалоПеретаскивания; если источник данных - некий другой ЭУ, то значение равно 0.
	//
	//0 - не задано 
	//1 - ячейка 
	//2 - строка 
	//3 - колонка 
	//Описание: Возникает в ЭУ назначения перетаскивания для определения действия, которое произойдет при совершении операции перетаскивания. (Drag&Drop)
	//
	//Главное назначение события - проверить возможность совершения операции перетаскивания и определить Действие. Событие возникает всякий раз, когда изменяется строка или колонка ТП. Если строка или колонка не определяются под курсором мыши, то значения соответствующих параметров будут равны пустому значению.
	
КонецПроцедуры
Процедура тпКнопка_Перетаскивание(тп, Действие, Значение, СтрокаТП, КолонкаТП, ТипРегионаТП)
	Если флСообщения=1 Тогда
		сообщить("Перетаскивание");
	КонецЕсли;
	//
	//Параметры:
	//
	//Действие - тип: Число. Действие, которое нужно выполнить для совершения перетаскивания. Равно значению параметра Действие на выходе из события ПроверкаПеретаскивания / DragCheck. Допустимые действия:
	//
	//1 - копирование (Copy) 
	//2 - перетаскивание (Move) 
	//4 - связывание (Link) 
	//Значение - тип: Любой. Значение, представляющее перетаскиваемые данные. Это значение было задано в обработчике события НачалоПеретаскивания|НачалоПеретаскивания.
	//
	//СтрокаТП - тип: Любой. Значение представляющее строку табличного поля, в которую идет перетаскивание (находится под курсором). Обеспечивается поставщиком данных.
	//
	//
	//КолонкаТП - тип: КолонкаТабличногоПоля. Колонка табличного поля, в которую идет перетаскивание (находится под курсором). 
	//ТипРегионаТП - тип: ТипыРегионовТП. Тип региона, в который идет перетаскивание. 
	//Описание: Возникает в ЭУ назначения, когда совершается операция перетаскивания (Drag&Drop).
	//
	//Если строка или колонка не определяются под курсором мыши, то значения соответствующих параметров будут равны пустому значению.
	
КонецПроцедуры
Процедура тпКнопка_ПриУничтожении(тп) 
	Если флСообщения=1 Тогда
		сообщить("ПриУничтожении");
	КонецЕсли;
	//Параметры: нет 
	//Описание: Событие вызывается при уничтожении контрола, с которым связано ТП, до уничтожения самого ТП. 
	
КонецПроцедуры
Процедура тпКнопка_ПриНачалеБыстрогоПоиска(тп, чТипБыстрогоПоиска, чФСО)
	Если флСообщения=1 Тогда
		сообщить("ПриНачалеБыстрогоПоиска");
	КонецЕсли;
	// 
	//Параметры: 
	//чТипБыстрогоПоиска, тип: Число 
	//Тип быстрого поиска: 
	//1 - текстовый быстрый поиск 
	//
	//чФСО, тип: Число 
	//Доступ: чтение и запись
	//
	//Флаг стандартной обработки. Возможные значения для установки: 
	//1 - быстрый поиск разрешен 
	//0 - быстрый поиск запрещен 
	//Значение по умолчанию: 1
	// 
	//Описание: Событие вызывается до инициализации окна быстрого поиска и позволяет управлять разрешением на его создание.
	// 
	
КонецПроцедуры
Процедура тпКнопка_ПриБыстромПоиске(тп, чТипБыстрогоПоиска, нДанные, чФСО)
	Если флСообщения=1 Тогда
		сообщить("ПриБыстромПоиске");
	КонецЕсли;
	// 
	//Параметры: 
	//чТипБыстрогоПоиска, тип: Число 
	//Тип быстрого поиска: 
	//1 - текстовый быстрый поиск 
	//
	//нДанные, тип: для текстового быстрого поиска - Строка 
	//Доступ: чтение и запись
	//
	//Данные, введенные в окне быстрого поиска
	//
	//
	//чФСО, тип: Число 
	//Флаг стандартной обработки. Возможные значения для установки: 
	//1 - быстрый поиск разрешен 
	//0 - быстрый поиск запрещен 
	//Значение по умолчанию: 1
	// 
	//Описание: Событие вызывается до выполнения системной процедуры быстрого поиска и позволяет организовать специальные алгоритмы поиска.
	//Возможна трансформация данных с последующей системной обработкой, а также полная замена системной обработки на собственную. 
	
КонецПроцедуры
Процедура тпКнопка_ПриОкончанииБыстрогоПоиска(тп, флРезультат, флПерепозиционировано)
	Если флСообщения=1 Тогда
		сообщить("ПриОкончанииБыстрогоПоиска");
	КонецЕсли;
	// 
	//Параметры: 
	//флРезультат, тип: Число 
	//Причина закрытия окна быстрого поиска. 
	//1 - закрытие клавишей ENTER 
	//0 - отмена быстрого поиска (любым способом) 
	//
	//флПерепозиционировано, тип: Число 
	//Флаг, отражающий факт перепозиционирования непосредственно перед закрытием окна БП 
	//1 - ТП было перепозиционировано 
	//0 - ТП не было перепозиционировано 
	// 
	//Описание: Событие вызывается после закрытия окна быстрого поиска.
	
	
КонецПроцедуры
Процедура тпКнопка_ПриПеремещенииКолонки(тп, Колонка, чСдвиг, чФСО)
	Если флСообщения=1 Тогда
		сообщить("ПриПеремещенииКолонки");
	КонецЕсли;
	// 
	//Параметры: Колонка, тип: КолонкаТабличногоПоля
	//
	//
	//чСдвиг, тип: Число 
	//Предлагаемый сдвиг колонки
	//
	//
	//чФСО, тип: Число 
	//Флаг стандартной обработки. Возможные значения для установки: 
	//1 - перемещение колонки разрешено 
	//0 - перемещение колонки запрещено 
	//Значение по умолчанию: 1
	// 
	//Описание: Событие вызывается при интерактивном перемещении колонки ТП непосредственно перед выполнением перемещения. 
	
КонецПроцедуры
Процедура тпКнопка_ПриИзмененииВидимостиКолонки(тп, Колонка, флВидимость, чФСО)
	Если флСообщения=1 Тогда
		сообщить("ПриИзмененииВидимостиКолонки");
	КонецЕсли;
	// 
	//Параметры: Колонка, тип: КолонкаТабличногоПоля
	//
	//
	//флВидимость, тип: Число 
	//Предлагаемое значение флага видимости колонки
	//
	//
	//чФСО, тип: Число 
	//Флаг стандартной обработки. Возможные значения для установки: 
	//1 - изменение видимости колонки разрешено 
	//0 - изменение видимости колонки запрещено 
	//Значение по умолчанию: 1
	// 
	//Описание: Событие вызывается при интерактивном изменении видимости колонки ТП непосредственно перед выполнением изменения видимости. 
	
КонецПроцедуры
Процедура тпКнопка_ПриИзмененииШириныКолонки(тп)
	Если флСообщения=1 Тогда
		сообщить("ПриИзмененииШириныКолонки");
	КонецЕсли;
	// 
	//Параметры: нет
	// 
	//Описание: Событие вызывается при интерактивном изменении ширины одной или нескольких колонок. 
	
КонецПроцедуры
Процедура тпКнопка_ПриРедактированииЗначения(тп,Стр,Кол,Рег,_Знач)
	Если флСообщения=1 Тогда
		сообщить("ПриРедактированииЗначения");
	КонецЕсли;
	
	Таб.УстановитьЗначение(ТП.ТекущаяСтрока,ТП.ТекущаяКолонка.Имя,_Знач);
    
	ТП.ОбновитьСтроки();
	ТП_совмещениеТЧ(ТП.ТекущаяСтрока);
	

	ТП_Обновить();	
	
КонецПроцедуры // ПриРедактированииЗначения(Стр, Кол, Рег, Знач)
//------------------------------

Процедура ТП_колонки(ТП,фл_Направления=0)

	Если фл_Направления=0 Тогда

		ИмяКолонки="СчетСтрокиТовар";
		Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
		Колонка.Заголовок         = "Товар";
		Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
		Колонка.ИзменятьВидимость = 0;
		Колонка.Ширина				=45;	
	
		ИмяКолонки="КоличествоСчетСтрокиТовар";
		Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
		Колонка.Заголовок         = "Количество заявок";
		Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
		Колонка.ИзменятьВидимость = 0;
		Колонка.Ширина				=20;
	
		ИмяКолонки="СуммаКоличество";
		Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
		Колонка.Заголовок         = "Общее количество";
		Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
		Колонка.ИзменятьВидимость = 0;
		Колонка.Ширина				=20;

	
		ИмяКолонки="Единица";
		Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
		Колонка.Заголовок         = ИмяКолонки;
		Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
		Колонка.ИзменятьВидимость = 0;
		Колонка.Ширина				=20;
	ИначеЕсли фл_Направления=1 Тогда
		ИмяКолонки="МаршрутНаправлениеТекст";
		Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
		Колонка.Заголовок         = "Напр.";
		Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
		Колонка.ИзменятьВидимость = 0;
		Колонка.Ширина				=30;	
		
		ИмяКолонки="Связка";
		Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
		Колонка.Заголовок         = "Маршр.лист";
		Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
		Колонка.ИзменятьВидимость = 0;
		Колонка.Ширина				=15;		
	КонецЕсли;
	
	
	
КонецПроцедуры

//////////////////////////////////////////////////////////
Процедура ТП_Инициализация()
	//	ОчиститьОкноСообщений();
	
	оФорма = СоздатьОбъект("Форма");
	оФорма.УстановитьФорму(Форма);
	ТП = оФорма.СоздатьЭлементУправления("ТабличноеПоле", "тпКнопка_");
	// свойства ТП
	ТП.ВертСкроллер = 1; // 0-авто, 1-всегда, 2-никогда
	ТП.НачальноеПредставление = 0; // 0-с начала, 1-с конца
	ТП.РежимВыделенияСтроки = 2; // 0-ячейка, 1-строка, 2-строка=ЦветТекстаВыделения2 и ЦветФонаВыделения2
	ТП.РежимВыделения = 1; // 0-выдел. одной строки, 1-выдел. неск. строк
	ТП.ВертикальныеЛинии = 1;
	ТП.ГоризонтальныеЛинии = 1;
	ТП.ОтображатьЗаголовки = 1;
	ТП.СтильЗаголовков = 0; // 0-3D, 1-плоский
	ТП.СтильАктивногоЗаголовка = 1; // 0-не выделяется, 1-выделяется
	ТП.ТаймаутОбновления = 0; // Х сек, 0-не обновлять автоматически
	ТП.ТаймаутБыстрогоПоиска = 1000; // Х мсек, 0-автоматически не пытаться
	ТП.ИзменятьПозициюКолонок = 1;
	//тпСклады.ЦветЛиний = 0; // цвета по умолчанию
	//тпСклады.ЦветТекста = 0;
	//тпСклады.ЦветФона = 0;
	//тпСклады.ЦветТекстаВыделения = 0;
	//тпСклады.ЦветФонаВыделения = 0;
	//тпСклады.ЦветТекстаВыделения2 = 0;
	//тпСклады.ЦветФонаВыделения2 = 0;
	//тпСклады.ЦветФонаЧередованияСтрок = 0; // цвета по умолчанию

	ТП.Шрифт=ШрифтАриал10Жирный;
	ТП.ЧередованиеЦветовСтрок = 1;
	ТП.РазрешитьНачалоПеретаскивания = 1; // 1-разрешает ЭУ выступать источником перетаскивания, 0-запрещает
	ТП.РазрешитьПеретаскивание = 1; // 1-разрешает ЭУ выступать приемником перетаскивания, 0-запрещает
	ТП.ФиксацияСлева = 0; // кол-во фиксированных колонок
	ТП.ФиксацияСправа = 0;

	ТП_колонки(ТП,фл_Направления);
	Источник=СоздатьОбъект("ПоставщикДанныхТЗ");
	Источник.УстТаблицуЗначений(Таб);
	ТП.ПоставщикДанных=Источник;
	
	
//	ТП.ОбновитьСтроки();
	ТП_Обновить();	
	// быстрый поиск
	//тп.ПоставщикДанных.Поля.Получить("Наименование").ТипБыстрогоПоиска = 1;
	
	// методы
	
//	ТП.АвтоШирина();
	Форма.ПанельИнструментов(0);
КонецПроцедуры




//}ТП




Функция ЗагрузкаИТ(пНаправление)
	л_ИТ=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос=СоздатьОбъект("ODBCRecordSet");

	Если пНаправление=0 Тогда
		л_текст="";
		Если ПустоеЗначение(ТекущееНаправление)=0 Тогда
			л_текст="WHERE (СпрМН.ID = :МаршрутНаправление)";
			Запрос.УстановитьТекстовыйПараметр("МаршрутНаправление",ТекущееНаправление);
		КонецЕсли;
		
		ТекстЗапроса="SELECT $СчетСтроки.Товар [СчетСтрокиТовар $Справочник.Номенклатура]
			|	, $СчетСтроки.Единица [Единица $Справочник.Единицы]
			|	, Count($СчетСтроки.Товар) КоличествоСчетСтрокиТовар
			|	, Sum($СчетСтроки.Количество) СуммаКоличество
			|FROM $РегистрОстатки.КомплектацияЗаявок(,,
			|		(ДатаПоставки = :пДата)
			|		AND (Статус = :пСтатус)
			|		AND (МестоКомплектации = :пСклад),
			|		ПоСчету,) AS КомплектацияЗаявокОстатки
			|	LEFT OUTER JOIN $ДокументСтроки.Счет AS СчетСтроки ON КомплектацияЗаявокОстатки.ПоСчету = СчетСтроки.IDDOC
			|	LEFT OUTER JOIN $Документ.Счет AS Счет ON КомплектацияЗаявокОстатки.ПоСчету = Счет.IDDOC
			|	LEFT OUTER JOIN $Справочник.МаршрутыНаправления СпрМН (NOLOCK) ON СпрМН.ID = $Счет.МаршрутНаправление
			| 	"+л_текст+"
			|GROUP BY $СчетСтроки.Товар
			|	, $СчетСтроки.Единица
			|ORDER BY КоличествоСчетСтрокиТовар DESC
			|";	
			
	ИначеЕсли пНаправление=1 Тогда
		ТекстЗапроса="SELECT СпрМН.ID [МаршрутНаправление $Справочник.МаршрутыНаправления]
			|	, RTRIM(СпрМН.CODE) + ' ' + RTRIM(СпрМН.DESCR) as МаршрутНаправлениеТекст
			|	,$СвязкаДокументов.Связка [Связка $Неопределенный]
			|FROM $РегистрОстатки.КомплектацияЗаявок(,,
			|		(ДатаПоставки = :пДата)
			|		AND (Статус = :пСтатус)
			|		AND (МестоКомплектации = :пСклад),
			|		ПоСчету,) AS КомплектацияЗаявокОстатки
			|	LEFT OUTER JOIN $Справочник.СвязкаДокументов AS СвязкаДокументов ON $ВидДокумента36.Счет + КомплектацияЗаявокОстатки.ПоСчету = $СвязкаДокументов.Док
			|	LEFT OUTER JOIN $Документ.Счет AS Счет ON КомплектацияЗаявокОстатки.ПоСчету = Счет.IDDOC
			|	LEFT OUTER JOIN $Справочник.МаршрутыНаправления СпрМН (NOLOCK) ON СпрМН.ID = $Счет.МаршрутНаправление
//			|GROUP BY $СвязкаДокументов.Связка
//			|	,СпрМН.ID
			|";	
	КонецЕсли;
	
	
	Запрос.УстановитьТекстовыйПараметр("пДата",рДатаПрихода);
	Запрос.УстановитьТекстовыйПараметр("пСтатус",1);
	Запрос.УстановитьТекстовыйПараметр("пСклад",МестоКомпл);

	
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,л_ИТ);
	
	Возврат л_ИТ;
КонецФункции


Процедура кнВыборФильтра()
		Форма.ИспользоватьЗакладки(0);
		ТекущийДокПоставки=ПолучитьПустоеЗначение();
		ВыводКлиента(ТекущийДокПоставки);
//		Если фл_Направления=0 Тогда
			фл_Направления=1;
//		Иначе
//			фл_Направления=0;
//		КонецЕсли;
		ИТ=ЗагрузкаИТ(фл_Направления);
//		ИТ.Показать();
		ИТ.Выгрузить(Таб);	
		Таб.Свернуть("МаршрутНаправление,Связка,МаршрутНаправлениеТекст",);
		Таб.Сортировать("МаршрутНаправлениеТекст",);
		ТП_Инициализация();
		
		ТекущийСлой=п_слНаправления;
		Форма.ИспользоватьСлой(ТекущийСлой,2);
		ТП_Обновить();		
	
КонецПроцедуры // ТП_Загрузка


Процедура кнВыбрать()
	Форма.ИспользоватьЗакладки(1);
	Если ТекущийСлой=п_слНаправления Тогда
		Если фл_Направления=1 Тогда
			ТекущийСлой=п_слПриемТовара;
			Форма.ИспользоватьСлой(ТекущийСлой,2);	
	
			Форма.тКлиент.Заголовок("Пусто");
			Форма.тСостояние.Заголовок("Пусто");
			тригерФильтр=0;
			ЗаполнитьТПДок(тригерФильтр);
			ПередатьФокус = "тпДок_"; 
			Форма.Закрыть(0);			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // кнВыбрать
Процедура кнВыходНаправление()
//	ТекущийСлой="слОбложка";
//	Форма.ИспользоватьСлой(ТекущийСлой,2);
	Форма.ИспользоватьЗакладки(1);
	Если ТекущийСлой=п_слНаправления Тогда
		Если фл_Направления=1 Тогда
			ТекущееНаправление=ПолучитьПустоеЗначение();	
			ТекущийМаршрЛист=ПолучитьПустоеЗначение();	
			
			ТекущийСлой=п_слПриемТовара;
			Форма.ИспользоватьСлой(ТекущийСлой,2);	
		
			Форма.т_Направление.Заголовок("Пусто");
			Форма.тСостояние.Заголовок("Пусто");
			Форма.тКлиент.Заголовок("Пусто");
			тригерФильтр=0;
			ЗаполнитьТПДок(тригерФильтр);
			Форма.Обновить();					
		КонецЕсли;
	КонецЕсли;


КонецПроцедуры



//}*****Выбор маршрута*****\\






//======================================================================
Функция СоздатьКомплектациюЗаявки(пДок)
//Создаем комплектацию заявки
	ДокКомп=СоздатьОбъект("Документ.КомплектацияЗаявки");
	
	НайденДокКомпл=0;
	ДокПодч=СоздатьОбъект("Документ");
	ДокПодч.ВыбратьПодчиненныеДокументы(пДок.ДатаДок,,пДок);
	Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
		Если (ДокПодч.Вид()="КомплектацияЗаявки") И (ДокПодч.Проведен()=1) И (ДокПодч.ПометкаУдаления()=0) Тогда
			ДокКомп.НайтиДокумент(ДокПодч.ТекущийДокумент());
			НайденДокКомпл=1;
			Прервать;
		КонецЕсли;	
	КонецЦикла;

	Если ПустоеЗначение(РозничныйТорговыйСклад)=1 Тогда
		РозничныйТорговыйСклад=Константа.ОсновнойСклад;
	КонецЕсли;
			
	Если НайденДокКомпл=0 Тогда
//		Предупреждение(Пользователь,0);

		ДокКомп=СоздатьОбъект("Документ.КомплектацияЗаявки");
		ДокКомп.Новый();
		ЗаполнитьШапку(ДокКомп);
		
		ДокКомп.ПоСчету=пДок;
//		Предупреждение(РозничныйТорговыйСклад,0);
		ДокКомп.МестоКомплектации=РозничныйТорговыйСклад.МестоКомплектации;
//		Предупреждение("Шапка заполнена",0);
		ДокКомп.ВидЗаявки=пДок.ВидЗаявки;
		ДокКомп.ВидУстройства=Перечисление.ВидыУстройств.CASIO;
		ДокКомп.АвтоВремяТекущее();
		
		ОбъектЗаписать(ДокКомп,);

		Попытка
			ДокКомп.Провести(1);
		Исключение
//				Если ДокКомп.Провести(1)=0 Тогда
			ЗаписьЖурналаРегистрации( "Ошибка. Комплектация заявки не создалась "+ДокКомп.НомерДок+" по заявке "+пДок.НомерДок,, "Комплектация заявок", пДок.ТекущийДокумент(), 2 );
			Возврат 0;
//				КонецЕсли;			
		КонецПопытки;
//		Если ДокКомп.Провести(1)=0 Тогда
//			ЗаписьЖурналаРегистрации( "Ошибка. Комплектация заявки не создалась "+ДокКомп.НомерДок+" по заявке "+пДок.НомерДок,, "Комплектация заявок", пДок.ТекущийДокумент(), 2 );
//			Возврат 0;
//		КонецЕсли;

		ЗаписьЖурналаРегистрации( "Комплектация заявки создалась "+ДокКомп.НомерДок+" по заявке "+пДок.НомерДок,, "Комплектация заявок", пДок.ТекущийДокумент(), 2 );
		Возврат 1;
	ИначеЕсли НайденДокКомпл=1 Тогда
//		ДокКомп=СоздатьОбъект("Документ.КомплектацияЗаявки");
//		ДокКомп.НайтиДокумент(ТекущийДокПоставки);	
		
//		ДокКомп.Новый();
		ЗаполнитьШапку(ДокКомп);
		
		ДокКомп.ПоСчету=пДок;
//		Предупреждение(РозничныйТорговыйСклад,0);
		ДокКомп.МестоКомплектации=РозничныйТорговыйСклад.МестоКомплектации;
//		Предупреждение("Шапка заполнена",0);
		ДокКомп.ВидЗаявки=пДок.ВидЗаявки;
		ДокКомп.ВидУстройства=Перечисление.ВидыУстройств.CASIO;
		ДокКомп.АвтоВремяТекущее();
		
		ОбъектЗаписать(ДокКомп,);

		Попытка
			ДокКомп.Провести(1);
		Исключение
//				Если ДокКомп.Провести(1)=0 Тогда
			ЗаписьЖурналаРегистрации( "Ошибка. Комплектация заявки не создалась "+ДокКомп.НомерДок+" по заявке "+пДок.НомерДок,, "Комплектация заявок", пДок.ТекущийДокумент(), 2 );
			Возврат 0;
//				КонецЕсли;			
		КонецПопытки;		
		Возврат 1;
	КонецЕсли;
КонецФункции // СоздатьКомплектациюЗаявки

Функция СоздатьКомплектациюЗаявкиСтар(пДок)
//Создаем комплектацию заявки
	ДокКомп=СоздатьОбъект("Документ.КомплектацияЗаявки");
	
	НайденДокКомпл=0;
	ДокПодч=СоздатьОбъект("Документ");
	ДокПодч.ВыбратьПодчиненныеДокументы(пДок.ДатаДок,,пДок);
	Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
		Если (ДокПодч.Вид()="КомплектацияЗаявки") И (ДокПодч.Проведен()=1) Тогда
			ДокКомп.НайтиДокумент(ДокПодч.ТекущийДокумент());
			НайденДокКомпл=1;
		КонецЕсли;	
	КонецЦикла;

	Если ПустоеЗначение(РозничныйТорговыйСклад)=1 Тогда
		РозничныйТорговыйСклад=Константа.ОсновнойСклад;
	КонецЕсли;
			
	Если НайденДокКомпл=0 Тогда
//		Предупреждение(Пользователь,0);

		ДокКомп=СоздатьОбъект("Документ.КомплектацияЗаявки");
		ДокКомп.Новый();
		ЗаполнитьШапку(ДокКомп);
		
		ДокКомп.ПоСчету=пДок;
//		Предупреждение(РозничныйТорговыйСклад,0);
		ДокКомп.МестоКомплектации=РозничныйТорговыйСклад.МестоКомплектации;
//		Предупреждение("Шапка заполнена",0);
		ДокКомп.ВидЗаявки=пДок.ВидЗаявки;
		ДокКомп.ВидУстройства=Перечисление.ВидыУстройств.CASIO;
		ДокКомп.АвтоВремяТекущее();
		
		л_1=ДокКомп.Записать();
//		Предупреждение(л_1,0);
//		ОбъектЗаписать(ДокКомп,);
//		ДокКомп.АвтоВремяТекущее();
	
	//	ДокКомп.УстановитьВремя(Часы_,Мин_,Сек_+1);
		л_2=ДокКомп.Провести(1);
		
//		Предупреждение(л_2,0);
		ЗаписьЖурналаРегистрации( "Комплектация "+ДокКомп.НомерДок+" по заявке "+пДок.НомерДок,, "Комплектация заявок", пДок.ТекущийДокумент(), 2 );
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции // СоздатьКомплектациюЗаявки
Функция СоздатьКомплектациюЗаявкиФакт(пДок)
//Создаем комплектацию заявки
	ДокКомпФакт=СоздатьОбъект("Документ.КомплектацияЗаявкиФакт");
	ДокКомплектацияМобил=СоздатьОбъект("Документ.КомплектацияМобил");
	
	НайденДокКомплФакт=0;
	НайденКомплектацияМобил=0;
	
	ДокПодч=СоздатьОбъект("Документ");
	ДокПодч.ВыбратьПодчиненныеДокументы(пДок.ДатаДок,,пДок);
	Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
		Если (ДокПодч.Вид()="КомплектацияЗаявкиФакт") И (ДокПодч.Проведен()=1) Тогда
			ДокКомпФакт.НайтиДокумент(ДокПодч.ТекущийДокумент());
			НайденДокКомплФакт=1;
		ИначеЕсли (ДокПодч.Вид()="КомплектацияМобил") И (ДокПодч.Проведен()=1) Тогда
			ДокКомплектацияМобил.НайтиДокумент(ДокПодч.ТекущийДокумент());
			НайденКомплектацияМобил=1;			
		КонецЕсли;	
		
		
	КонецЦикла;

		
	Если (НайденДокКомплФакт=0)И(НайденКомплектацияМобил=1) Тогда
		ДокКомпФакт.Новый();
		ЗаполнитьШапку(ДокКомпФакт); 
		
//		ДокКомпФакт.Новый();
//		ДокКомпФакт.НомерДок = ;
//		ДокКомпФакт.ДатаДок = ;
		ДокКомпФакт.ПоСчету = ДокКомплектацияМобил.ПоСчету;
		ДокКомпФакт.Комплектовщик = ТекКомплектовщик;
		ДокКомпФакт.СкладЗагрузки = ДокКомплектацияМобил.СкладЗагрузки;
		ДокКомпФакт.Аннулировать = ДокКомплектацияМобил.Аннулировать;
		ДокКомпФакт.НомерОриг = ДокКомплектацияМобил.НомерОриг;
		ДокКомпФакт.Фирма = ДокКомплектацияМобил.Фирма;
		ДокКомпФакт.Автор = ДокКомплектацияМобил.Автор;
		ДокКомпФакт.Основание = ДокКомплектацияМобил.Основание;
//		ДокКомпФакт.ТипУчета = ДокКомплектацияМобил.ТипУчета;
//		ДокКомпФакт.ФинУчет = ДокКомплектацияМобил.ФинУчет;
		ДокКомпФакт.ТоварШапки = ДокКомплектацияМобил.ТоварШапки;
//		ДокКомпФакт.IDD = ;
		ДокКомпФакт.НеВыгружать = ДокКомплектацияМобил.НеВыгружать;
		
		ДокКомплектацияМобил.ВыбратьСтроки();
		Пока ДокКомплектацияМобил.ПолучитьСтроку() = 1 Цикл
			ДокКомпФакт.НоваяСтрока();
			ДокКомпФакт.Количество = ДокКомплектацияМобил.Количество;
			ДокКомпФакт.Товар = ДокКомплектацияМобил.Товар;
			ДокКомпФакт.ТовКод = ДокКомплектацияМобил.ТовКод;
			ДокКомпФакт.Коэффициент = ДокКомплектацияМобил.Коэффициент;
			ДокКомпФакт.Единица = ДокКомплектацияМобил.Единица;
			ДокКомпФакт.КоличествоФакт = ДокКомплектацияМобил.КоличествоФакт;
			ДокКомпФакт.КоличествоФактБазЕд = ДокКомплектацияМобил.КоличествоФакт*ДокКомпФакт.Коэффициент ;
			ДокКомпФакт.СутьПретензии = ДокКомплектацияМобил.СутьПретензии;
			ДокКомпФакт.ТоварЗамена = ДокКомплектацияМобил.ТоварЗамена;
			ДокКомпФакт.НомерСтрокиЗамены = ДокКомплектацияМобил.НомерСтрокиЗамены;
			ДокКомпФакт.СрокРеализ = ДокКомплектацияМобил.СрокРеализ;
			ДокКомпФакт.ВидУведомления = ДокКомплектацияМобил.ВидУведомления;
			ДокКомпФакт.СрокРеализДоп = ДокКомплектацияМобил.СрокРеализДоп;
		КонецЦикла;

		ДокКомпФакт.АвтоВремяТекущее();
		ОбъектЗаписать(ДокКомпФакт,);
		ДокКомпФакт.АвтоВремяТекущее();

		
	//	ДокКомп.УстановитьВремя(Часы_,Мин_,Сек_+1);
		ДокКомпФакт.Провести(1);
		ЗаписьЖурналаРегистрации( "Комплектация "+ДокКомпФакт.НомерДок+" по заявке "+пДок.НомерДок,, "Комплектация заявок", пДок.ТекущийДокумент(), 2 );
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции // СоздатьКомплектациюЗаявки

//{****Кнопки****


Процедура кнПровестиЗаявку()

	Перем ИТ;
	
	Если ПустоеЗначение(ТекущаяДокЗаявка)=1 Тогда
		Возврат;
	КонецЕсли;

	Если ТекущаяДокЗаявка.ВидЗаявки<>Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка Тогда
		Сообщить("Не проводится, вид заявки "+ТекущаяДокЗаявка.ВидЗаявки);
		Возврат;
	КонецЕсли;
	

	л_СостояниеЗаявки=глПолучитьСостояниеЗаявки(ТекущаяДокЗаявка,0);
	Если (л_СостояниеЗаявки.Наименование="Ожидает компл.") Тогда
			л_Счет=СоздатьОбъект("Документ.Счет");
			л_Счет.НайтиДокумент(ТекущаяДокЗаявка);
			Если л_Счет.Провести(2)=1 Тогда
				Сообщить("Заявка успешно провелась");
			Иначе
				Сообщить("Заявка не провелась");
			КонецЕсли;;		
	Иначе
		Предупреждение("Заявка не проводится, имеет статус:"+л_СостояниеЗаявки,5);	
	КонецЕсли;

	ЗаполнитьТПДок(2);
	Форма.Обновить();						
КонецПроцедуры

Процедура кнЗаморозитьДок()

	Если ПустоеЗначение(ТекущаяДокЗаявка)=1 Тогда
		Возврат;
	КонецЕсли;	
	
	СпрСост = СоздатьОбъект("Справочник.БлокировкиДок");
	СпрСост.НайтиПоРеквизиту("Док",ТекущаяДокЗаявка,0);

	Если СпрСост.Выбран()=1 Тогда
		Если СпрСост.Блокировка=0 Тогда
			СпрСост.Блокировка=1;
		ИначеЕсли СпрСост.Блокировка=1 Тогда
			СпрСост.Блокировка=0;
		КонецЕсли;
		СпрСост.Записать();
	Иначе
		СпрСост.Новый();
		СпрСост.Наименование=ТекущаяДокЗаявка.Вид();
		СпрСост.Дата=ТекущаяДата();
		СпрСост.Время=ТекущееВремя();
		СпрСост.Пользователь=Пользователь;
		СпрСост.Док=ТекущаяДокЗаявка;
		СпрСост.СостояниеДок=Константа.СостояниеИзмененияДок;
		СпрСост.Блокировка=1;
		СпрСост.Записать();		
	КонецЕсли;

	
	
	
	ЗаполнитьТПДок(1);
	Форма.Обновить();						
КонецПроцедуры

Процедура кнВыбратьДок()
	Перем ИТ;
	
	Если ПустоеЗначение(ТекущаяДокЗаявка)=1 Тогда
		Возврат;
	КонецЕсли;

	Если Вопрос("Снять комплектацию с заявки ?",1,0)=2 Тогда
		Возврат;
	КонецЕсли;

	
	л_СостояниеЗаявки=глПолучитьСостояниеЗаявки(ТекущаяДокЗаявка,0);
	//Если (л_СостояниеЗаявки.Наименование="КомплектуетсяМоб")
	//или (л_СостояниеЗаявки.Наименование="Ожидает отгрузки")
	//или (л_СостояниеЗаявки.Наименование="Ожидает компл.") Тогда
		ДокПодч=СоздатьОбъект("Документ");
		ДокПодч.ВыбратьПодчиненныеДокументы(ТекущаяДокЗаявка.ДатаДок,,ТекущаяДокЗаявка);
		Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
			Если (ДокПодч.Вид()="КомплектацияМобил") И (ДокПодч.ПометкаУдаления()=0) Тогда
				ОбъектУдалить(ДокПодч,0);
			ИначеЕсли (ДокПодч.Вид()="КомплектацияЗаявки") И (ДокПодч.ПометкаУдаления()=0) Тогда
				ОбъектУдалить(ДокПодч,0);
			ИначеЕсли (ДокПодч.Вид()="КомплектацияЗаявкиФакт") И (ДокПодч.ПометкаУдаления()=0) Тогда
				ОбъектУдалить(ДокПодч,0);
			ИначеЕсли (ДокПодч.Вид()="КомплектацияМобилПланшет") И (ДокПодч.ПометкаУдаления()=0) Тогда
				ОбъектУдалить(ДокПодч,0);	
			КонецЕсли;	

			л_Счет=СоздатьОбъект("Документ.Счет");
			л_Счет.НайтиДокумент(ТекущаяДокЗаявка);
			л_Счет.Комплектовщик=ПолучитьПустоеЗначение();
			л_Счет.Записать();
		КонецЦикла;	
//	КонецЕсли;

	ЗаполнитьТПДок(1);
	Форма.Обновить();
КонецПроцедуры

Процедура кнВыход()
//	ТекущийСлой="слОбложка";
//	Форма.ИспользоватьСлой(ТекущийСлой,2);
	Форма.Закрыть(0);
КонецПроцедуры
Процедура кнЗакрыть()
	Перем расш;
	Форма.Закрыть(0);
	СтатусВозврата(0);
	ЗавершитьРаботуСистемы(0);
//	расш=СоздатьОбъект("РасширениеФормы");
//	расш.Закрыть();
КонецПроцедуры

Процедура кнПрием()
	ТекущийСлой="п_слПриемТовара";
	Форма.ИспользоватьСлой(ТекущийСлой,2);
	ПередатьФокус = "тпДок_"; 
	Форма.Закрыть(0);

КонецПроцедуры
//======================================================================
Процедура кнКомплектация()
	//ОткрытьФорму("Обработка.ОбрКомплДок",ТекКомплектовщик,);	
	ТекущийСлой="п_слПриемТовара";
	Форма.ИспользоватьСлой(ТекущийСлой,2);	
КонецПроцедуры // кнКомплектация

//======================================================================

Процедура кнСнять()

	Если ПустоеЗначение(ТекущаяДокЗаявка)=1 Тогда
		Возврат;
	КонецЕсли;
	
	ИТ=ПроверкаПриема(ТекущаяДокЗаявка);
	Если ИТ.КоличествоСтрок()>0 Тогда
		СоздатьКомплектациюЗаявкиФакт(ТекущаяДокЗаявка);
	Иначе
		Предупреждение("Нет комплектации");
	КонецЕсли;	
	ЗаполнитьТПДок(1);
	Форма.Обновить();
КонецПроцедуры // кнСнять
//}****Кнопки****

//{****Инвентаризация****

Функция ПоискВесовогоКода(п_Код)

	ТекстЗапроса="SELECT Номенклатура.ID [Ссылка $Справочник.Номенклатура]
		|FROM $Справочник.Номенклатура AS Номенклатура With (NOLOCK)
		|WHERE ($Номенклатура.ВесовойКод = :пКод)
		|";
	ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");
	ЗапросСКЛ.УстановитьТекстовыйПараметр("пКод",п_Код);
	л_КодТовара = ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	
	Возврат л_КодТовара;
КонецФункции // ПоискВесовогоКода
Функция ПоискВесовогоКодаSQL(п_Код)

	л_КодТовара="";
	
	ТекстЗапроса="SELECT  ID [Товар $Справочник.Номенклатура]
		|FROM RTPOS_CA.dbo.foodlv_items
		|WHERE (GLID = :пКод)
		|";
	ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");
	ЗапросСКЛ.УстановитьТекстовыйПараметр("пКод",п_Код);
	л_КодТовара = ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	
	Возврат л_КодТовара;
КонецФункции // ПоискВесовогоКода


Функция ПоискВСправочнике(пШтрихкод="")//включая подчиненые через выбор элементов
	Перем ИмяРекв,ПрефКода,ШтрихКодДляПоиска;

	//если в строке штрихкода спереди идут 0 (ставятся, если вес меньше 1 кг)
	Если Лев(Строка(пШтрихКод),2)="02" Тогда
		позСтр=Найти(пШтрихКод,"2"); //если весовой товар
		Если позСтр>0 Тогда
			длинаСтр=СтрДлина(пШтрихКод);
			БезНулей=Прав(пШтрихКод,длинаСтр-позСтр+1);
			пШтрихКод=БезНулей;			
		КонецЕсли;
	КонецЕсли;
	
	ПрефКода=Лев(Строка(пШтрихКод),2); //поиск весового товара

	Вес=0;
		//{ Обработка весового товара 
	Если (ПрефКода="29") ИЛИ (ПрефКода="28") ИЛИ (ПрефКода="23") ИЛИ (ПрефКода="24")  ИЛИ (ПрефКода="25")  Тогда

		Сообщить("Штрихкод:"+пШтрихКод);
		л_Товар=ПоискВесовогоКода(Число(Сред(пШтрихКод,3,6)));
		Сообщить("Весовой код:"+Сред(пШтрихКод,3,6));
		Сообщить(л_Товар);
		Если ПустоеЗначение(л_Товар)=0 Тогда
			Если л_Товар.Выбран()=1 Тогда
				Возврат л_Товар;
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли (ПрефКода="21") ИЛИ (ПрефКода="22")ИЛИ (ПрефКода="26") Тогда
		Сообщить("Штрихкод:"+пШтрихКод);
		л_Товар=ПоискВесовогоКодаSQL(Число(Сред(пШтрихКод,3,6)));
		Сообщить("Весовой код:"+Сред(пШтрихКод,3,6));
		Сообщить(л_Товар);
		Если ПустоеЗначение(л_Товар)=0 Тогда
			Если л_Товар.Выбран()=1 Тогда
				Возврат л_Товар;
			КонецЕсли;
		КонецЕсли;	
//} Обработка весового товара		
	Иначе
		ШтрихКодДляПоиска=пШтрихКод;
	КонецЕсли;

	
	спрТовар = СоздатьОбъект("Справочник.Номенклатура");
	спрПодч=СоздатьОбъект("Справочник.ШтрихКоды");
	
	ИмяРекв = "Штрихкод";
	ФлагГлобПоиска = 1; 
	Если спрТовар.НайтиПоРеквизиту(ИмяРекв,СокрЛП(ШтрихКодДляПоиска),ФлагГлобПоиска)=1 Тогда
		Возврат(спрТовар.ТекущийЭлемент());
 	ИначеЕсли спрПодч.НайтиПоКоду(СокрЛП(ШтрихКодДляПоиска))=1 Тогда
 		Возврат(спрПодч.ТекущийЭлемент().Владелец);
 	КонецЕсли;	
	// ничего не найдено
	Возврат(ПолучитьПустоеЗначение(спрТовар));
КонецФункции 




Функция ПоискПоШтрихкоду(пШтрихкод="")
	Если ПустоеЗначение(пШтрихкод)=1 Тогда
//		Предупреждение("Штрих кода нет в справочнике",0);
		Возврат(0);
	КонецЕсли;
	
	спрТовар=ПоискВСправочнике(пШтрихкод);	
	Если ПустоеЗначение(спрТовар)=0 Тогда

		текстЗаголовка=пШтрихкод+",| "+спрТовар.Наименование+", "+спрТовар.КодТовара; 
		Форма.тТовар.Заголовок(текстЗаголовка);
		Возврат(1);
	КонецЕсли;
	
	Предупреждение("Штрих кода нет в справочнике",3);
	Возврат(0);
	
КонецФункции
//======================================================================

Процедура кнИнвент()
	ТекущийСлой="слИнвентаризации";
	Форма.ИспользоватьСлой(ТекущийСлой,2);
//	ПередатьФокус = "тпДок_"; 
//	Форма.Закрыть(0);	
КонецПроцедуры // кнИнвент

Процедура кнСканирование()
	ТекущийСлой="слШтрихкод";
	Форма.ИспользоватьСлой(ТекущийСлой,2);
	
КонецПроцедуры // кнСканирование


//======================================================================
Процедура кнВводШтрихкода()
	Перем фПоиска;
	Форма.тТовар.Заголовок("Пусто");
	фПоиска=ПоискПоШтрихкоду(СокрЛП(пвШтрихкод));
	Если фПоиска=1 Тогда
		ТекущийСлой="слИнвентаризации";
		Форма.ИспользоватьСлой(ТекущийСлой,2);
	Иначе
//		ТекущийСлой=слТаблицы;
//		Форма.ИспользоватьСлой(ТекущийСлой,2);
////		Форма.кнМеню.Заголовок("Товар");
//		ПередатьФокус = "тпКнопка_"; 
//		Форма.Закрыть(0);
//		//кнМеню();
//	//	Форма.ИспользоватьСлой(ТекущийСлой,2);
//	//	ТП.ТекущаяСтрока=Таб_ТекущаяСтрока;
//	//	ТП_Обновить();		
	КонецЕсли;;
КонецПроцедуры // кнВводШтрихкода()

Процедура кнСбросШтрихкода()
	пвШтрихкод="";
	ПередатьФокус = "пвШтрихкод"; 
	Форма.Закрыть(0);
КонецПроцедуры
//======================================================================
Процедура кнМеню()
	ТекущийСлой="слОбложка";
	Форма.ИспользоватьСлой(ТекущийСлой,2);
КонецПроцедуры // кнМеню

//======================================================================
Процедура кнЗакрытьслШтрихкод()
	ТекущийСлой="слИнвентаризации";
	Форма.ИспользоватьСлой(ТекущийСлой,2);	
КонецПроцедуры // кнЗакрытьслШтрихкод

//}****Инвентаризация****


Процедура ВыводКлиента(док)
	Перем текстЗаголовка;
	Если ПустоеЗначение(док)=1 Тогда
		текстЗаголовка="Пусто";
		Форма.тСостояние.Заголовок(текстЗаголовка);
		Форма.тКлиент.Заголовок("Пусто");
		Возврат;
	КонецЕсли;
	текстЗаголовка=док.Клиент.Наименование;
	Форма.тКлиент.Заголовок(текстЗаголовка);
	
	л_ЗаголовокТНапр=?(ПустоеЗначение(ТекущееНаправление)=1,"Пусто",ТекущееНаправление.Наименование);
	л_ЗаголовокТМЛ=?(ПустоеЗначение(ТекущийМаршрЛист)=1,"Пусто",ТекущийМаршрЛист.НомерДок);

	Форма.т_Направление.Заголовок(?(л_ЗаголовокТМЛ="Пусто",л_ЗаголовокТНапр,л_ЗаголовокТМЛ));

	л_СостояниеЗаявки=глПолучитьСостояниеЗаявки(док,0);
	Если л_СостояниеЗаявки.Наименование="КомплектуетсяМоб" Тогда
		текстЗаголовка="КомплМоб";
	Иначе
		текстЗаголовка=л_СостояниеЗаявки.Наименование;
	КонецЕсли;
	
	Форма.тСостояние.Заголовок(текстЗаголовка);

КонецПроцедуры
Процедура НастроитьОкна2(Показать=1)
	Перем меню;
	Окна = СоздатьОбъект("Окна");
	Окна.ВидимостьМеню("Та&блица", 0);
	 Окна.ВидимостьМеню("&Действия", 0);	
	//Окна.ВключитьМодальныйРежим();
//	Окна.Максимизировать();
	
//	Если Показать<>1 Тогда
//		меню = Окна.ПолучитьМеню();
//	КонецЕсли;
   
    а="";
 //   меню.ВыбратьЗначение(а);
	стр="";	
//	Для Номер = 1 По Меню.РазмерСписка() Цикл
//		меню.ПолучитьЗначение(Номер, стр); //получить значение и представление
//		Окна.ВидимостьМеню(стр, Показать);
//	КонецЦикла;
//	Окна.ПоказыватьПанели(Показать);
//	Если Показать<>1 Тогда
	//	Окна.Минимизировать(Форма);
//		Окна.Максимизировать(Форма);
//	КонецЕсли;
	
КонецПроцедуры
Процедура НастроитьОкна(Показать=1)
	Перем меню;
	Окна = СоздатьОбъект("Окна");
	//Окна.ВключитьМодальныйРежим();
	Окна.Максимизировать();
	
	Если Показать<>1 Тогда
		меню = Окна.ПолучитьМеню();
	КонецЕсли;
   
    а="";
 //   меню.ВыбратьЗначение(а);
	стр="";	
	Для Номер = 1 По Меню.РазмерСписка() Цикл
		меню.ПолучитьЗначение(Номер, стр); //получить значение и представление
		Окна.ВидимостьМеню(стр, Показать);
	КонецЦикла;
	Окна.ПоказыватьПанели(Показать);
	Если Показать<>1 Тогда
	//	Окна.Минимизировать(Форма);
		Окна.Максимизировать(Форма);
	КонецЕсли;
	
КонецПроцедуры


//{***ТП2***

Процедура НастройкаТПДок()
	
	Колонка = тпДок.Колонки.Добавить("МаршрутНаправление"); Колонка.Данные = "МаршрутНаправление"; Колонка.Заголовок = "МаршрутНаправление"; 
	Колонка.ЗнакУпорядочивания = 1;
//	Колонка.Ширина=20;

	Колонка = тпДок.Колонки.Добавить("Статус"); Колонка.Данные ="Статус"; Колонка.Заголовок = "Статус"; 
	Колонка.ЗнакУпорядочивания = 1;
//	Колонка.Ширина=20;	

	Колонка = тпДок.Колонки.Добавить("Документ_ном"); Колонка.Данные = "Документ_ном"; Колонка.Заголовок = "Документ"; 
	Колонка.ЗнакУпорядочивания = 1;
//	Колонка.Ширина=20;	


	Колонка = тпДок.Колонки.Добавить("ВидДоставки"); Колонка.Данные = "ВидДоставки"; Колонка.Заголовок = "ВидДоставки"; 
	Колонка.ЗнакУпорядочивания = 1;
//	Колонка.Ширина=20;

	
//	Колонка = тпДок.Колонки.Добавить("ДатаП"); Колонка.Данные = "ДатаП"; Колонка.Заголовок = "Дата"; 
//	Колонка.ЗнакУпорядочивания = 1;
//	Колонка.Ширина=20;

	Колонка = тпДок.Колонки.Добавить("Комплектовщик"); Колонка.Данные = "Комплектовщик"; Колонка.Заголовок = "Комплектовщик"; 
	Колонка.ЗнакУпорядочивания = 1;
//	Колонка.Ширина=20;
	

	
	
КонецПроцедуры
Процедура ЗаполнитьТПДок(Обновить=0)

	ТекущаяДокЗаявка=ПолучитьПустоеЗначение();
	Если Обновить=0 Тогда
		Источник = СоздатьОбъект("ПоставщикДанныхODBC.MSSQL"); 
		Источник.БазаДанных =  СоздатьОбъект("ODBCDataBase"); 
	КонецЕсли;

	ТекстУсловия = "= Счет.IDDOC";	
	ТекстУсловия1="";
	Если Обновить=2 Тогда
		ТекстУсловия1="(ПоСчету IN (SELECT Счет.IDDOC AS [Ссылка $Документ.Счет]
			|FROM $Документ.Счет AS Счет
			|	LEFT OUTER JOIN $ДокументСтроки.Счет AS СчетСтроки ON Счет.IDDOC = СчетСтроки.IDDOC
			|WHERE ($Счет.ДатаПоставки = ?пДатаПоставки(8))
			|	AND ($СчетСтроки.Количество <> $СчетСтроки.Резерв)) 
			|)AND"
	КонецЕсли;	
	
		л_Склад=СоздатьОбъект("Справочник.МестаХранения");
		л_Склад.НайтиПоКоду(35,0);

	л_фильтрТовар="";
	Если ПустоеЗначение(ТекущееНаправление)=0 Тогда
		Если ПустоеЗначение(ТекущийМаршрЛист)=0 Тогда
			л_фильтрТовар="LEFT OUTER JOIN $ДокументСтроки.МаршрутныйЛист AS МаршрутныйЛистСтроки ON КомплектацияЗаявокОстатки.ПоСчету = $МаршрутныйЛистСтроки.Счет
							|	WHERE (МаршрутныйЛистСтроки.IDDOC = ?пМаршрЛист(14,9))";
		Иначе
			л_фильтрТовар="WHERE (СпрМН.ID = ?пМаршрутНаправление(14,9))";				
		КонецЕсли;
	КонецЕсли;		
	
	//фильтр морозильника		
	Если фл_БезМор=1 Тогда
		Если л_фильтрТовар="" Тогда
			л_фильтрТовар="WHERE ($Счет.КодМестаКомплектации <> '0E')";
		Иначе
			л_фильтрТовар=л_фильтрТовар+"AND ($Счет.КодМестаКомплектации <> '0E')"
		КонецЕсли;	
	КонецЕсли;		
	
	//
	
	пДок=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос=СоздатьОбъект("ODBCRecordSet");
	
	ТекстЗапроса="SELECT КомплектацияЗаявокОстатки.ПоСчету AS [Ссылка $Документ.Счет]
		|	, КомплектацияЗаявокОстатки.Статус AS [Статус $Справочник.СостоянияДокументов]
		|	, $Счет.Комплектовщик AS [Комплектовщик $Справочник.Комплектовщики]
		|	, $Счет.Маршрут AS Маршрут
	//	|	, $Счет.МаршрутНаправление AS [МаршрутНаправление $Справочник.МаршрутыНаправления]
		|	, RTRIM(СпрМН.CODE) + ' ' + RTRIM(СпрМН.DESCR) as МаршрутНаправление
		|	, $Счет.Склад AS [СчетСклад $Справочник.МестаХранения]
		|	, Журнал.DOCNO AS Документ_ном
		|	, $Счет.ВидДоставки AS [ВидДоставки $Перечисление.ВидыДоставки]
		|FROM $РегистрОстатки.КомплектацияЗаявок(,,
		|		("+ТекстУсловия1+"(Статус = ?пСтатус1(14,9))
		|		OR (Статус = ?пСтатус2(14,9))
		|		OR (Статус = ?пСтатус3(14,9))
		|		OR (Статус = ?пСтатус4(14,9)))
		|		AND (ДатаПоставки = ?пДатаПоставки(8))
		|		AND (МестоКомплектации = ?пСклад(14,9)),
		|		(ПоСчету, Статус),) AS КомплектацияЗаявокОстатки
	//	|	LEFT OUTER JOIN $Документ.Счет AS Счет ON КомплектацияЗаявокОстатки.ПоСчету = Счет.IDDOC
 		|	INNER JOIN $Документ.Счет AS Счет ON КомплектацияЗаявокОстатки.ПоСчету "+ТекстУсловия+"		
		|	LEFT OUTER JOIN _1SJOURN AS Журнал ON Счет.IDDOC = Журнал.IDDOC
		|	LEFT JOIN $Справочник.МаршрутыНаправления СпрМН (NOLOCK) ON СпрМН.ID = $Счет.МаршрутНаправление
		|	"+л_фильтрТовар;

	Источник.УстТекстЗапроса(ТекстЗапроса);
//	сост=ПолучитьСостояниеДок("Ожидает компл.","Заявки");
	Источник.Параметры.Установить("пСтатус1",пСтатус1);
	Источник.Параметры.Установить("пСтатус2",пСтатус2);	
	Источник.Параметры.Установить("пСтатус3",пСтатус3);	
	Источник.Параметры.Установить("пСтатус4",пСтатус4);		
//	Источник.Параметры.Установить("пСклад",Константа.ОсновнойСклад);
	Источник.Параметры.Установить("пСклад",МестоКомпл);
	Источник.Параметры.Установить("пДатаПоставки",рДатаПрихода);
	
	Если ПустоеЗначение(ТекущееНаправление)=0 Тогда
		Если ПустоеЗначение(ТекущийМаршрЛист)=0 Тогда
//			Источник.Параметры.Установить("пМаршрутНаправление",ТекущееНаправление);
			Источник.Параметры.Установить("пМаршрЛист",ТекущийМаршрЛист);
		Иначе
			Источник.Параметры.Установить("пМаршрутНаправление",ТекущееНаправление);
		КонецЕсли;
		
	КонецЕсли;		
	
//	Источник.Параметры.Установить("ВыбКомплектовщик",ТекКомплектовщик);	
	Источник.УстКлючПорядка("МаршрутНаправление ASC,Ссылка"); 
	Источник.УстИДПоле("Ссылка");	

//	Источник.Параметры.Установить("ДатаНач",рДатаНач);
//	Источник.Параметры.Установить("ДатаКон",рДатаКон);


	
	Поле = Источник.Поля.Добавить("МаршрутНаправление");
 	Поле.Автоудаление = 0;
	Поле.ТипБыстрогоПоиска = 1;
	
	Поле = Источник.Поля.Добавить("Комплектовщик");
	Поле.Автоудаление = 0;
	Поле.ТипБыстрогоПоиска = 1;
	
	Поле = Источник.Поля.Добавить("Документ_ном");
 	Поле.Автоудаление = 0;
	Поле.ТипБыстрогоПоиска = 1;	
	
	Поле = Источник.Поля.Добавить("ВидДоставки");
 	Поле.Автоудаление = 0;
	Поле.ТипБыстрогоПоиска = 1;

//	Поле = Источник.Поля.Добавить("СостояниеДок");
 //	Поле.Автоудаление = 0;
//	Поле.ТипБыстрогоПоиска = 1;
	

//	тпДок.ФиксацияСлева  = 1;
	тпДок.АвтоШирина();
	
	тпДок.ТаймаутОбновления  = 30;
	тпДок.РазрешитьПеретаскивание = 0; 
	тпДок.РазрешитьНачалоПеретаскивания= 0; 
	тпДок.РежимВыделенияСтроки = 1;
	тпДок.РежимВыделения = 1;
	тпДок.ИзменятьПозициюКолонок = 0;
//	тпДок.РежимВыделенияСтроки = 0;
	
	тпДок.ПоставщикДанных = Источник; 
	тпДок.ПоставщикДанных.Обновить(); 
	тпДок.ОбновитьСтроки();



	
	
КонецПроцедуры

//======================================================================
Процедура тпДок_ПриВыводеСтроки(тп, ОформлениеСтроки, ДанныеСтроки, ТипРегиона)

	Если ТП.Колонки.Количество()>1 Тогда
		Если ТП.Колонки.Статус.Видимость = 1 Тогда
			Если ДанныеСтроки.Индекс("Ссылка")<>-1 Тогда
				л_СостояниеЗаявки=глПолучитьСостояниеЗаявки(ДанныеСтроки.Ссылка,1);
				Если л_СостояниеЗаявки="Изменение" Тогда
					ОформлениеСтроки.Ячейки.Статус.УстановитьТекст("Заблокированная");
				Иначе
					ОформлениеСтроки.Ячейки.Статус.УстановитьТекст(л_СостояниеЗаявки);
				КонецЕсли;
			
			КонецЕсли;
		КонецЕсли
	КонецЕсли;
КонецПроцедуры // тпДок_ПриВыводеСтроки

Процедура тпДок_Выбор(_ТП, _Кол, ТипРегиона)
	ТекущаяДокЗаявка=_Кол;
	
//	ВыводКлиента(ТекущаяДокЗаявка);
	ОткрытьФорму(ТекущаяДокЗаявка);
//	ПередатьФокус = "кнВыбратьДок"; 
//	Форма.Закрыть(0);

КонецПроцедуры
Процедура тпДок_ПриАктивизацииСтроки(тп)
	ТекущаяДокЗаявка=ТП.ТекущиеДанные.Получить("Ссылка");
	ВыводКлиента(ТекущаяДокЗаявка);
КонецПроцедуры
//}***ТП2***

Процедура ПриОткрытии()
		
	Если ПустоеЗначение(РозничныйТорговыйСклад)=1 Тогда
		РозничныйТорговыйСклад=Константа.ОсновнойСклад;	
	КонецЕсли;		
	МестоКомпл=РозничныйТорговыйСклад.МестоКомплектации;
	
	//ТекущийСлой="п_слПриемТовара";
	ТекущийСлой="слПриемТовара,слКнопки";
	Форма.ИспользоватьСлой(ТекущийСлой,2);
	
КонецПроцедуры
Процедура ПослеОткрытия()

//	УправлениеФормой = СоздатьОбъект("УправлениеФормой");
//	Привязки = УправлениеФормой.ПривязкаЭлементов;
//	Привязки.УстановитьГраницыПоФорме("тпДок_",1,1,1,1);
//	Привязки.Привязать();
	
	НастроитьПривязки();

	Ф=СоздатьОбъект("Форма");
	Ф.УстановитьФорму(Форма);
	тпДок=Ф.СоздатьЭлементУправления("ТабличноеПоле","тпДок_");
	
	ЗаполнитьТПДок();
	НастройкаТПДок();

	
	
//	ПередатьФокус = "кнПрием"; 
//	Форма.Закрыть(0);
	
	гСервис = СоздатьОбъект("Сервис");
	гСервис.ПерехватКлавиатуры(1);
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Все","Все");
	Форма.Закладки.ДобавитьЗначение("ОжидКомпл","ОжидКомпл");
	Форма.Закладки.ДобавитьЗначение("КомплектМоб","КомплектМоб");
	Форма.Закладки.ДобавитьЗначение("ОжидОтгрузки","ОжидОтгрузки");
	Форма.Закладки.ДобавитьЗначение("БезРезерва","БезРезерва");
	
//	Сообщить(Форма.Закладки.ТекущаяСтрока());
	
КонецПроцедуры	

Процедура ПриВыбореЗакладки( пНом, пЗнач )
	БезСозданияКомпл=0;
	Форма.тСостояние.Заголовок("Пусто");
	Форма.тКлиент.Заголовок("Пусто");	
	Если пЗнач = "Все" Тогда
		пСтатус1=1;
		пСтатус2=12;
		пСтатус3=3;
		пСтатус4=?(фл_Бумага=1,2,12);;
		ЗаполнитьТПДок(1);
		Форма.Обновить();
	ИначеЕсли пЗнач = "ОжидКомпл" Тогда
		пСтатус1=1;
		пСтатус2=1;
		пСтатус3=1;
		пСтатус4=1;
		ЗаполнитьТПДок(1);
		Форма.Обновить();
	ИначеЕсли пЗнач = "КомплектМоб" Тогда
		пСтатус1=12;
		пСтатус2=12;
		пСтатус3=12;
		пСтатус4=?(фл_Бумага=1,2,12);
		ЗаполнитьТПДок(1);
		Форма.Обновить();
	ИначеЕсли пЗнач = "ОжидОтгрузки" Тогда
		пСтатус1=3;
		пСтатус2=3;
		пСтатус3=3;
		пСтатус4=3;
		ЗаполнитьТПДок(1);
		Форма.Обновить();
	ИначеЕсли пЗнач = "БезРезерва" Тогда
		пСтатус1=1;
		пСтатус2=12;
		пСтатус3=3;
		пСтатус4=?(фл_Бумага=1,2,12);;
		ЗаполнитьТПДок(2);
		Форма.Обновить();		
	КонецЕсли;
//	Сообщить(Форма.Закладки.ТекущаяСтрока());

//	Сообщить(л_зн);
КонецПроцедуры

//======================================================================
Процедура флБумагаУстановить()
//	ЗаполнитьТПДок(1);
	л_зн="";
	Форма.Закладки.ПолучитьЗначение(Форма.Закладки.ТекущаяСтрока(),л_зн);
	ПриВыбореЗакладки( 0, л_зн );
//	Форма.Обновить();
КонецПроцедуры // флБумагаУстановить

Процедура ПриЗакрытии()
	//{ЛожноеЗакрытие Установить Фокус
	Если ПустоеЗначение(ПередатьФокус) = 0 тогда 
		Активизировать(ПередатьФокус); 
		СтатусВозврата(0); 
		ПередатьФокус = ""; 
		Возврат; 
	КонецЕсли; 
	//}ЛожноеЗакрытие Установить Фокус
	
	Форма.Закрыть(0);
КонецПроцедуры

Процедура кнБольше()
	рДатаПрихода=рДатаПрихода+1;
	Форма.Обновить();
		Форма.тСостояние.Заголовок("Пусто");
		Форма.тКлиент.Заголовок("Пусто");
	
	ЗаполнитьТПДок(1);
	Форма.Обновить();
КонецПроцедуры

Процедура кнМеньше()
	рДатаПрихода=рДатаПрихода-1;
	
		Форма.тСостояние.Заголовок("Пусто");
		Форма.тКлиент.Заголовок("Пусто");
	
	ЗаполнитьТПДок(1);
	Форма.Обновить();
КонецПроцедуры

//======================================================================

Процедура ВыбратьДок()
	Перем ИТ;
	
	Если ПустоеЗначение(ТекущийДокПоставки)=1 Тогда
		Возврат;
	КонецЕсли;
	
	л_СостояниеЗаявки=глПолучитьСостояниеЗаявки(ТекущийДокПоставки,0);
	

	л_Счет=СоздатьОбъект("Документ.Счет");
	л_Счет.НайтиДокумент(ТекущийДокПоставки);
	
//проверка наличия подчиненых
	ДокПодч=СоздатьОбъект("Документ");
	ДокПодч.ВыбратьПодчиненныеДокументы(ТекущийДокПоставки.ДатаДок,,ТекущийДокПоставки);
	Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
		Если (ДокПодч.Вид()="КомплектацияМобил") И (ДокПодч.ПометкаУдаления()=0) Тогда
		КонецЕсли;	
	КонецЦикла;		

	Если л_СостояниеЗаявки.Наименование="Ожидает компл." Тогда

		Если СоздатьКомплектациюЗаявки(ТекущийДокПоставки)=0 Тогда
			ТекущийДокПоставки=ПолучитьПустоеЗначение();
			тпДок.ОбновитьСтроки();
			ТекущийДокПоставки=тпДок.ТекущиеДанные.Получить("Ссылка");			
	
			ПередатьФокус = "тпДок_"; 
			Форма.Закрыть(0);
			Возврат;
		Иначе
			л_Счет=СоздатьОбъект("Документ.Счет");
			л_Счет.НайтиДокумент(ТекущийДокПоставки);
			л_Счет.Комплектовщик=ТекКомплектовщик;

			Попытка 
				л_Счет.Записать();
			Исключение 
				ЗаписьЖурналаРегистрации( "Ошибка. Запись счета. "+ОписаниеОшибки()+"  "+ТекКомплектовщик+" по заявке "+л_Счет.НомерДок,, "Комплектация заявок", л_Счет.ТекущийДокумент(), 2 );
				ТекстЗапросаСчет="UPDATE Док SET $Док.Комплектовщик=:ТекКомплектовщик FROM $Документ.Счет Док WHERE Док.IDDOC=:Документ";
				Запрос=СоздатьОбъект("ODBCRecordSet");        
				Мета=СоздатьОбъект("MetaDataWork");
				Запрос.УстановитьТекстовыйПараметр("Документ",л_Счет.ТекущийДокумент());
				Запрос.УстановитьТекстовыйПараметр("ТекКомплектовщик",ТекКомплектовщик);
				
				Запрос.ВыполнитьСкалярный(ТекстЗапросаСчет);
		
			КонецПопытки;          
		
			текстЗаголовка="КомплМоб";
			Форма.тСостояние.Заголовок(текстЗаголовка);
			ЗадачаНаВнешнююКоманду(,ТекКомплектовщик,"НовыйБригадир");	
			ЗаписьЖурналаРегистрации( "Комплектация началась "+ТекКомплектовщик+" по заявке "+л_Счет.НомерДок,, "Комплектация заявок", л_Счет.ТекущийДокумент(), 2 );

		КонецЕсли;
	КонецЕсли;

	тпДок.ОбновитьСтроки();

	Попытка
		ТекущийДокПоставки=тпДок.ТекущиеДанные.Получить("Ссылка");
	Исключение
		ТекущийДокПоставки=ПолучитьПустоеЗначение();
	КонецПопытки;

	ПередатьФокус = "тпДок_"; 
	Форма.Закрыть(0);

КонецПроцедуры


Процедура кнНазначитьЗаявку()
	сп = СоздатьОбъект("СписокЗначений");
	для н=0 по тпДок.ВыделенныеСтроки.Количество()-1 цикл 
		док=тпДок.ВыделенныеСтроки.Получить(н);
		СостояниеЗаявки=глПолучитьСостояниеЗаявки(док);
		Если (СостояниеЗаявки="Ожидает компл.")  Тогда
			Если сп.НайтиЗначение(док)=0 Тогда
				сп.ДобавитьЗначение(тпДок.ВыделенныеСтроки.Получить(н));
			КонецЕсли;
		Иначе
			Предупреждение("Заявка находится в состоянии <"+ СостояниеЗаявки+">!","10");
			Возврат;
		КонецЕсли;
	конеццикла;
	Если сп.РазмерСписка() = 0 Тогда
		Сообщить("Нечего назначать!");
		Возврат;
	КонецЕсли;	

	спр=СоздатьОбъект("Справочник.Комплектовщики");
	Если спр.Выбрать("",)=1 Тогда
		ТекКомплектовщик=спр.ТекущийЭлемент();
		Для н = 1 по сп.РазмерСписка() Цикл
			ТекущийДокПоставки = сп.ПолучитьЗначение(н);
			ВыбратьДок();
		КонецЦикла;			
	КонецЕсли;;
	
КонецПроцедуры // кнНазначитьЗаявку

Процедура ПриНажатииКнопкиКлавиатуры(КодКлавиши, Alt, Shift, Ctrl, Символ, ФСО)
	//ФСО = 0;
	Если КодКлавиши = 120 Тогда
		//Если ТекущийСлой=слТовара Тогда
		//	кнНазад();
		//КонецЕсли;
		кнМеньше();
		Форма.Обновить();
	КонецЕсли;
	
	Если КодКлавиши =119 Тогда
		//Если ТекущийСлой=слТовара Тогда
		//	кнВперед();
		//КонецЕсли;	
		кнБольше();
		Форма.Обновить();
	КонецЕсли;


	
//	Форма.тИнфо.Заголовок(КодКлавиши);
//	Форма.Обновить();
КонецПроцедуры

п_слНаправления="слНаправления,слКнопки";
п_слПриемТовара="слПриемТовара,слКнопки";

глФабрика = СоздатьОбъект("ФабрикаОбъектов");
ШрифтАриал10Жирный = глФабрика.Шрифт("Arial LV", 12, 1);
фл_Направления=1;
ТекущееНаправление=ПолучитьПустоеЗначение();
Таб=СоздатьОбъект("ТаблицаЗначений");

рДатаПрихода=ТекущаяДата();
пСтатус1=1;
пСтатус2=12;
пСтатус3=3;
пСтатус4=2;

фл_БезМор=0;