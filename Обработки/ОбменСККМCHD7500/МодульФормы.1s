Перем КолККМ;
Перем ПутьВыгрузки, ПутьЗагрузки;
Перем Автомат;
перем ТабПлатежей;
Перем ДатаОтчета;      
Перем НомерЗагружаемойКассы; //Номер кассы является минутой установки всех документов данной кассы
перем таблДатЧеков,ТаблДок;
Перем итГруппыСкидок;
Перем СтавкиНДС;
Перем итКассы;
Перем ТабСтатистики;
Перем кЧастноеЛицоРесторан;

Процедура ПровестиДоки() Далее

Функция семПолучитьДопКодКлиента( пКарта ) 
	MetaDataWork = СоздатьОбъект( "MetaDataWork" );
        ODBCDatabase = СоздатьОбъект( "ODBCDatabase" );
	ConnectionString = "Driver={SQL Server};Server="+кСерверVDB+";UID=sa; PWD=vlrevlor;Database=intranet;";	
	Если ODBCDatabase.Соединение( ConnectionString ) = 0 Тогда
		Сообщить( "Ошибка соединения с базой данных.", "!" );
		Сообщить( ODBCDatabase.ПолучитьОписаниеОшибки(),"I" );
		Возврат 0;
	КонецЕсли;
	ODBCRecordSet = СоздатьОбъект( "ODBCRecordSet" );
	ODBCRecordSet.УстБД( ODBCDatabase );
	ТекстЗапроса=Шаблон("select dbo.Get_IDKEY_MCN([пКарта])");
	Если ODBCRecordSet.Открыть( ТекстЗапроса ) = 0 Тогда
		Сообщить( "Ошибка выполнения запроса..", "!" );
		Сообщить( ТекстЗапроса,"I" );
		Возврат 0;
	КонецЕсли;
	Возврат ODBCRecordSet.ПолучитьЗначение(1);
КонецФункции

Функция семПолучитьКлиента( пНомерКарты )
	Если пНомерКарты = 0 Тогда
		Возврат кЧастноеЛицоРесторан;
	КонецЕсли;
	Если ( пНомерКарты >= 30000000 ) и ( пНомерКарты < 40000000 ) Тогда
		Возврат Константа.СобственноеФизЛицо;
	КонецЕсли;
	ДопКод = семПолучитьДопКодКлиента( пНомерКарты );
	Если Число(ДопКод) = 0 Тогда
		Возврат кЧастноеЛицоРесторан;
	КонецЕсли;
	спр = СоздатьОбъект( "Справочник.Контрагенты" );
	Если спр.НайтиПоРеквизиту("ДопКод",ДопКод,1) = 1 Тогда
		Возврат спр.ТекущийЭлемент();
	Иначе
		Сообщить( "Ошибка определения клиента.","!" );
		Сообщить( "Не найден клиент по доп. коду "+ДопКод,"I" );
		Возврат "";
	КонецЕсли;
КонецФункции


Процедура ОчиститьФлагИзменения()
	MetaDataWork = СоздатьОбъект( "MetaDataWork" );
	ODBCRecordSet = СоздатьОбъект( "ODBCRecordSet" );
	ODBCRecordSet.УстБД1С();
	полеФлИзменен = "SP"+MetaDataWork.ИДРеквизитаСправочника("Номенклатура","ФлИзменен");
	таблНоменклатура = MetaDataWork.ИмяТаблицыСправочника("Номенклатура");
	ТекстЗапроса=Шаблон("UPDATE [таблНоменклатура] SET [полеФлИзменен]=0 WHERE [полеФлИзменен]=1");
	Если ODBCRecordSet.Выполнить( ТекстЗапроса ) = 0 Тогда
		Сообщить( "Ошибка выполнения запроса..", "!" );
		Сообщить( ТекстЗапроса,"I" );
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьВидСкидкиКлиенту(Конт)
	
		ДатаЦены = Конт.ДатаДок;
		Контра = Конт.Клиент;
		Если Контра<>Константа.ЧастноеЛицо Тогда

			СкидкаПр=ПолучитьАкцСкидкуТовара(Конт.Товар,Конт.КатегорияЦены,ДатаЦены ,,,1);
			Если ПустоеЗначение( Контра.ДопКод ) = 0 Тогда
				
				СкидкаПрDEAR=ПолучитьАкцСкидкуТовара(Конт.Товар,Конт.КатегорияЦены,ДатаЦены,,,1);
				
				СкидкаПЛ = семПолучитьСкидкуПЛ( 1, Контра.ДопКод, ДатаЦены );
				Если СкидкаПЛ >СкидкаПрDEAR Тогда
					Возврат Перечисление.ВидСкидки.КлиентDEAR;
				ИначеЕсли СкидкаПрDEAR>СкидкаПр Тогда
					Возврат Перечисление.ВидСкидки.АкционныйТоварDEAR;
				Иначе
					Возврат Перечисление.ВидСкидки.АкционныйТовар;
				КонецЕсли;
			Иначе
				// затем скидка клиенту вне зависимости от товара (из справочника "Контрагенты")
				Контра.ИспользоватьДату("");
				СкидкаКл = Контра.КлиентСкидка.Получить(ДатаЦены);
				Если  СкидкаКл>СкидкаПр  Тогда
					Возврат Перечисление.ВидСкидки.Клиент;
				ИначеЕсли СкидкаПр>0 Тогда
					Возврат Перечисление.ВидСкидки.АкционныйТовар;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СкидкаПр=ПолучитьАкцСкидкуТовара(Конт.Товар,Конт.КатегорияЦены,ДатаЦены ,,,1);
			Если СкидкаПр>0 Тогда
				Возврат Перечисление.ВидСкидки.АкционныйТовар;
			КонецЕсли;
		КонецЕсли;
	
КонецФункции

Функция семПолучитьГруппуПЛ( пДеп, пДопКод, пДата ) 
	MetaDataWork = СоздатьОбъект( "MetaDataWork" );
        ODBCDatabase = СоздатьОбъект( "ODBCDatabase" );
	ConnectionString = "Driver={SQL Server};Server=Trade1;UID=sa; PWD=vlrevlor;Database=intranet;";	
	Если ODBCDatabase.Соединение( ConnectionString ) = 0 Тогда
		Сообщить( "Ошибка соединения с базой данных.", "!" );
		Сообщить( ODBCDatabase.ПолучитьОписаниеОшибки(),"I" );
		Возврат 0;
	КонецЕсли;
	ODBCRecordSet = СоздатьОбъект( "ODBCRecordSet" );
	ODBCRecordSet.УстБД( ODBCDatabase );
	промДата = MetaDataWork.ПолучитьСтрИзДаты(пДата);
	ТекстЗапроса=Шаблон("select dbo.Get_VDB_POSGR([пДеп],[пДопКод],'[промДата]')");
	Если ODBCRecordSet.Открыть( ТекстЗапроса ) = 0 Тогда
		Сообщить( "Ошибка выполнения запроса..", "!" );
		Сообщить( ТекстЗапроса,"I" );
		Возврат 0;
	КонецЕсли;
	Возврат ODBCRecordSet.ПолучитьЗначение(1);
КонецФункции

                                     
Функция семПолучитьСкидкуПЛ( пДеп, пДопКод, пДата ) 
	MetaDataWork = СоздатьОбъект( "MetaDataWork" );
        ODBCDatabase = СоздатьОбъект( "ODBCDatabase" );
	ConnectionString = "Driver={SQL Server};Server="+кСерверVDB+";UID=sa; PWD=vlrevlor;Database=intranet;";	
	Если ODBCDatabase.Соединение( ConnectionString ) = 0 Тогда
		Сообщить( "Ошибка соединения с базой данных.", "!" );
		Сообщить( ODBCDatabase.ПолучитьОписаниеОшибки(),"I" );
		Возврат 0;
	КонецЕсли;
	ODBCRecordSet = СоздатьОбъект( "ODBCRecordSet" );
	ODBCRecordSet.УстБД( ODBCDatabase );
	промДата = MetaDataWork.ПолучитьСтрИзДаты(пДата);
	ТекстЗапроса=Шаблон("select dbo.Get_VDB_Disc([пДеп],[пДопКод],'[промДата]')");
	Если ODBCRecordSet.Открыть( ТекстЗапроса ) = 0 Тогда
		Сообщить( "Ошибка выполнения запроса..", "!" );
		Сообщить( ТекстЗапроса,"I" );
		Возврат 0;
	КонецЕсли;
	Возврат ODBCRecordSet.ПолучитьЗначение(1);
КонецФункции

Функция семПолучитьСкидкуКлиента( Клиент )
	Если ПустоеЗначение( Клиент.ДопКод ) = 0 Тогда
		Возврат семПолучитьСкидкуПЛ( 1, Клиент.ДопКод, РабочаяДата() );
	Иначе
		Возврат Клиент.КлиентСкидка.Получить(РабочаяДата())
	КонецЕсли;
КонецФункции

//_____________________________________________________________________________
Процедура ДобавитьДокВТаблицу(Док,ВремяМин=18)
	Если Док.Выбран()=0 Тогда
		Возврат;
	КонецЕсли;  
	
	Если ТаблДоков.НайтиЗначение(Док,,"Док")=1 Тогда
		Возврат;
	КонецЕсли;
	ТаблДоков.НоваяСтрока();
	ТаблДоков.Док=Док.ТекущийДокумент();
	ТаблДоков.Пик=?(Док.Проведен()=1,2,?(Док.ПометкаУдаления()=1,7,1));
	ТаблДоков.Вид=Док.ПредставлениеВида();
	ТаблДоков.НДок=Док.НомерДок;
	ТаблДоков.ДДок=Док.ДатаДок;
	ТаблДоков.ВремяМин=ВремяМин;
	//ТаблДоков.ВДок=Док.ВремяПродажи;
	//ТаблДоков.Сумма=Док.Итог("Сумма");
КонецПроцедуры //ДобавитьДокВТаблицу(Док)
//_____________________________________________________________________________
Процедура ОткрДок()
	Если ТаблДоков.КоличествоСтрок()>0 Тогда
		ОткрытьФорму(ТаблДоков.Док,,0);     
	КонецЕсли;
КонецПроцедуры //ОткрДок


Процедура ПереносНарядовНаСборкуИПродаж()

	//*******
	//*Делаем перенос документов НарядНаСборку, по партиям которых были продажи в течение одного дня
	//*Необходимо для того, чтобы можно было закрыть Наряды без минуса в случае когда приход товара происходит в течение дня, 
	//*а товар по факту продан раньше и наряд сделан в то же время. 
	//*Все касается только Сервисных центров
	//*******
	
	Сообщить("Запускаем процедуру переноски нарядов...");
	Запрос = СоздатьОбъект("ODBCRecordSet");

	ТекстЗапроса="SELECT Жур.IDDOC [Док $Документ]
	|					, Жур.IDDOCDEF [Док_вид $ВидДокумента]
	|			  FROM _1sjourn Жур (NOLOCK)
	|			  LEFT JOIN $Документ.НарядНаСборку AS НарядНаСборку With (NOLOCK) ON НарядНаСборку.IDDOC = Жур.IDDOC 
	|			  LEFT JOIN $Документ.НарядНаРазукомплектацию AS НарядНаРазукомплектацию With (NOLOCK) ON НарядНаРазукомплектацию.IDDOC = Жур.IDDOC 
	|			  WHERE (Жур.DATE_TIME_IDDOC BETWEEN :Нач AND :Нач~) AND IDDOCDEF IN ($ВидДокумента.НарядНаСборку,$ВидДокумента.НарядНаРазукомплектацию)
	|				 	AND COALESCE($НарядНаСборку.Склад,$НарядНаРазукомплектацию.Склад) IN (SELECT ID FROM $Справочник.МестаХранения WHERE DESCR LIKE '%centrs%')
	|";
	Запрос.УстановитьТекстовыйПараметр("Нач",выбДата);
	табл = СоздатьОбъект("ТаблицаЗначений");
	табл = Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
	ТаблДоков.УдалитьСтроки();
	
	
	Док=СоздатьОбъект("Документ");	
	табл.ВыбратьСтроки();
	с=0;
	Пока табл.ПолучитьСтроку() = 1 Цикл

		с=с+1;
		Док.НайтиДокумент(табл.Док);
		//запишем документ 
		Попытка           
			Док.АвтоВремяОтключить();
			Док.Записать();
			Док.СделатьНеПроведенным();
			Док.УстановитьВремя(22,01,00);
			Док.Записать();
		Исключение
			
		КонецПопытки;     

		ДобавитьДокВТаблицу(Док,"01");
	КонецЦикла;
		
	
	ТекстЗапроса = "SELECT ПартииТоваров.IDDOC [Док $Документ]
	|					, ПартииТоваров.IDDOCDEF [Док_вид $ВидДокумента]
	|					, НарядНаСборку.IDDOC [НарядНаСборкуСсылка $Документ.НарядНаСборку]
	|				FROM $Регистр.ПартииТоваров AS ПартииТоваров
	|				INNER JOIN $Документ.НарядНаСборку AS НарядНаСборку With (NOLOCK) ON $ПартииТоваров.ПрихДокумент = $ВидДокумента36.НарядНаСборку + НарядНаСборку.IDDOC
	|				INNER JOIN _1SJOURN AS ЖурналН With (NOLOCK) ON НарядНаСборку.IDDOC = ЖурналН .IDDOC AND ЖурналН .IDDOCDEF = $ВидДокумента.НарядНаСборку
	|				WHERE (ПартииТоваров.DATE_TIME_IDDOC BETWEEN :Нач AND :Нач~) AND LEFT(ЖурналН.DATE_TIME_IDDOC,8)=LEFT(ПартииТоваров.DATE_TIME_IDDOC,8)
	|					  AND ПартииТоваров.IDDOCDEF IN ($ВидДокумента.РасходнаяНакладная,$ВидДокумента.РасходнаяНакладнаяНал,$ВидДокумента.Списание)
	|				      AND $ПартииТоваров.Склад IN (SELECT ID FROM $Справочник.МестаХранения WHERE DESCR LIKE '%centrs%')
	|";
	
	ДокНарядыНаСборку = СоздатьОбъект("Документ.НарядНаСборку");
	ДокНарядыНаРазборку = СоздатьОбъект("Документ.НарядНаРазукомплектацию");
	
	Запрос.УстановитьТекстовыйПараметр("Нач",выбДата);
	табл = СоздатьОбъект("ТаблицаЗначений");
	табл = Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
	
	Док=СоздатьОбъект("Документ");	
	табл.ВыбратьСтроки();
	с=0;
	Пока табл.ПолучитьСтроку() = 1 Цикл

		с=с+1;
		Док.НайтиДокумент(табл.Док);
		//запишем документ 
		Попытка           
			Док.АвтоВремяОтключить();
			Док.Записать();
			Док.СделатьНеПроведенным();
			Док.УстановитьВремя(22,02,00);
			Док.Записать();
		Исключение
			
		КонецПопытки;     

		ДобавитьДокВТаблицу(Док,"02");
		
	КонецЦикла;
	
	ПровестиДоки();
	

КонецПроцедуры

Процедура ПровестиДоки() 
	Перем Часы,Минуты,Секунды;
	
	глНуженСписокТоваров=1;
	глСписокТоваров.УдалитьСтроки();
	
	СписокДоковТ=СоздатьОбъект("ТаблицаЗначений");  
	Док = СоздатьОбъект("Документ");
	ДокТА = СоздатьОбъект("Документ"); 
	
	// Проверка дат чеков
	табл = СоздатьОбъект( "ТаблицаЗначений" );
	ТаблДоков.Выгрузить(табл,,,"ДДок");
	
	Если ПустоеЗначение(табл)=1 Тогда
		Возврат;
	КонецЕсли;
	табл.НоваяКолонка("Сч","Число");
	табл.Заполнить(1,,,"Сч");
	табл.Свернуть("ДДок","Сч");
	табл.Сортировать("-Сч");
	ДатаОтчета = табл.ПолучитьЗначение(1,"ДДок");
	Если табл.КоличествоСтрок() > 1 Тогда
		Польз=СоздатьОбъект("Справочник.Пользователи");
		Польз.ВыбратьЭлементыПоРеквизиту("ПолучатьСообщенияЗагрузкиККМ",1,0,0);
		Блокнот=СоздатьОбъект("Справочник.Блокнот");
		Пока Польз.ПолучитьЭлемент()=1 Цикл
			Если Блокнот.НайтиПоКоду(СокрЛП(Польз.Код),0) = 0 Тогда Продолжить; КонецЕсли;
			Если Блокнот.ЭтоГруппа() = 0 Тогда Продолжить; КонецЕсли;
			Если Блокнот.Выбран()=1 Тогда
				Блокнот.ИспользоватьРодителя(Блокнот.ТекущийЭлемент());
				глСоздатьНовыйОбъект(Блокнот);
				Блокнот.Наименование = "Загрузка из кассы за "+Строка(РабочаяДата()-1);
				Блокнот.__Дата = РабочаяДата()-1;
				Блокнот.Время="08:00:00";
				Блокнот.Автор = Пользователь;
				Если Блокнот.Родитель.Выбран()=0 Тогда Блокнот.УстановитьНовыйКод("Всем"); КонецЕсли;
				Блокнот.Запись=Шаблон( "В Z отчете за [ДатаОтчета] есть документы за другую дату." );
				Блокнот.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТаблДоков.Выгрузить(СписокДоковТ,,,"Док,ВремяМин");
	СписокДоковТ.Свернуть("ВремяМин,Док","");
	//	СписокДоковТ.Сортировать("Док",1);
	
//	СписокДоковТ.ВыбратьСтроки();
//	Пока СписокДоковТ.ПолучитьСтроку()=1 Цикл
//		Если Док.НайтиДокумент(СписокДоковТ.Док)=1 Тогда
//			Попытка          
//				//	Док.УстановитьВремя(22,Лев(Док.ВремяПродажи,2),Сред(Док.ВремяПродажи,4,2));
////				Док.УстановитьВремя(22,18,00);
//				Док.Записать();
//			Исключение
//				Сообщить(ОписаниеОшибки());
//			КонецПопытки;
//		КонецЕсли;
//	КонецЦикла;
	
	СписокДоковТ.Сортировать("ВремяМин,Док",1);
	
		кБлокироватьВМарочномПустойТовар=0;
		СРИ=Константа.РегистрацияИзменений;
		ПервыйДок=1;	
		глРазрОтрицОстатки=Да; 
		предМин=0;
		СписокДоковТ.ПолучитьСтрокуПоНомеру(СписокДоковТ.КоличествоСтрок());
		ПоследнийДокумент = СписокДоковТ.Док;
		СписокДоковТ.ВыбратьСтроки();
		Пока СписокДоковТ.ПолучитьСтроку()=1 Цикл  
			//ДокТА.НайтиДокумент(СписокДоковТ.Док);
			//ДокТА.ПолучитьВремя(Часы,Минуты,Секунды);
			Минуты=СписокДоковТ.ВремяМин;
			//Если МонопольныйРежим()=1 Тогда
			//	Если предМин<>Минуты Тогда
			//		УстановитьТАНа(СписокДоковТ.Док); //переносим ТА в монопольном режиме на документы
			//		предМин=Минуты;
			//	КонецЕсли;
			//КонецЕсли;
			Док.НайтиДокумент(СписокДоковТ.Док);
			Если Док.Проведен() = 0 Тогда
				Сообщить("Проводится документ"+СписокДоковТ.НомерСтроки+"/"+СписокДоковТ.КоличествоСтрок()+": "+Док);
				Док.Провести();
			КонецЕсли;

		КонецЦикла; 
		Константа.РегистрацияИзменений=СРИ;
		глРазрОтрицОстатки=Нет;
		кБлокироватьВМарочномПустойТовар=1;

		//Если МонопольныйРежим()=1 Тогда
		//	Док=СоздатьОбъект("Документ");
		//	Док.УстановитьФильтр(1,0,0,2,0,0);
		//	Док.ОбратныйПорядок(1);
		//	Док.ВыбратьДокументы(ПолучитьДатуТА(),);
		//	Док.ПолучитьДокумент();
		//	УстановитьТАПо(Док.ТекущийДокумент()); 
		//КонецЕсли;
	
	СписокТоваров=СоздатьОбъект("ТаблицаЗначений");
	
	глСписокТоваров.Выгрузить(СписокТоваров,,,"Товар");
	
	Док=СоздатьОбъект("Документ.РасходнаяНакладнаяНал");
	Док.ВыбратьДокументы(ДатаОтчета,ДатаОтчета);
	Док.ПолучитьДокумент();
	
	глСписокТоваров.ВыбратьСтроки();
	Пока глСписокТоваров.ПолучитьСтроку()=1 Цикл
		глСписокТоваров.Счетчик=1;
	КонецЦикла;
	
	глСписокТоваров.Свернуть("Склад,Блюдо,Товар,","Счетчик,КолБлюд,Количество,Остаток");
	глСписокТоваров.Сортировать("+Склад,Блюдо,Товар");
	
	глНуженСписокТоваров=0;
	Если глСписокТоваров.КоличествоСтрок()>0 Тогда
		Рег=СоздатьОбъект("Регистр.ОстаткиТоваров");
		Рег.ВременныйРасчет();
		Рег.УстановитьЗначениеФильтра("Товар",СписокТоваров,2);
//		РассчитатьРегистрыНА(Док.ТекущийДокумент());
		
		Таб2=СоздатьОбъект("Таблица");
		Таб2.ИсходнаяТаблица("СписокНепроведенныхТоваров");
		Таб2.ВывестиСекцию("Шапка");
		
		глСписокТоваров.ВыбратьСтроки();
		глСписокТоваров.Остаток=глСписокТоваров.Остаток/глСписокТоваров.Счетчик;
		СтарСклад=""; 
		СтарБлюдо="";
		Пока глСписокТоваров.ПолучитьСтроку()=1 Цикл
			Если СтарСклад<>глСписокТоваров.Склад Тогда
				Таб2.ВывестиСекцию("Склад");	
				СтарСклад=глСписокТоваров.Склад;
			КонецЕсли;
			
			Если СтарБлюдо<>глСписокТоваров.Блюдо Тогда
				Таб2.ВывестиСекцию("Блюдо");	
				СтарБлюдо=глСписокТоваров.Блюдо;
			КонецЕсли;
			
			ПолныйОст=Рег.СводныйОстаток(глСписокТоваров.Товар,,,"ОстатокТовара");
			Таб2.ВывестиСекцию("Товар");
		КонецЦикла;
		Таб2.ПараметрыСтраницы(1,,,,,,,,,1);
		//		Таб2.Защита(Константа.ФлагЗащитыТаблиц);
		//		Таб2.ТолькоПросмотр(1);
		Таб2.Записать(КаталогИБ()+"\Кассы\"+Формат(ДатаОтчета,"Д ГГГГММДД"));
		//		Таб2.Показать("Список непроведенных товаров","");
	КонецЕсли;
	
КонецПроцедуры	

Процедура ПереносТабВДок(Докум,Табл)               
	Если Табл.КоличествоСтрок() = 0 Тогда
		Если Докум.Выбран() = 1 Тогда
			Док = СоздатьОбъект("Документ");
			Док.НайтиДокумент(Докум);
			Док.Удалить(1);
			Докум = "";
		КонецЕсли;     
		Возврат;
	КонецЕсли;
	Док = СоздатьОбъект("Документ." + Докум.Вид());
	Если Докум.Выбран() = 0 Тогда
		Док.Новый();
		Док.ДатаДок = Константа.ДатаСлужебныхДокументов;
	Иначе
		Док.НайтиДокумент(Докум);
		Док.УдалитьСтроки();
	КонецЕсли;
	Док.ЗагрузитьТабличнуюЧасть(Табл);
	ОбъектЗаписать(Док,);
	Докум = Док.ТекущийДокумент();
КонецПроцедуры   //ПереносТабВДок 


Процедура УстановитьКампанииНаДокумент(пДок,итТабл)

	ТабСтатистики.УдалитьСтроки();
	
	нДок = СокрЛП(пДок.НомерДок);
	итТабл.УстановитьФильтр(нДок,нДок,"иЧек");
	итТабл.ВыбратьСтроки("иЧек");
	Пока итТабл.ПолучитьСтроку("иЧек") = 1 Цикл
		итКампании = итТабл.тзПотомки;
		итКампании.ВыбратьСтроки();
		Пока итКампании.ПолучитьСтроку() = 1 Цикл
			
			пКритерий = итКампании.Кампания;
			Если ПустоеЗначение(пКритерий)=0 Тогда
				поз=0;
				Если ТабСтатистики.НайтиЗначение(пКритерий.Владелец,поз,"Критерий")=1 Тогда
					ТабСтатистики.ПолучитьСтрокуПоНомеру(поз);
				Иначе
					ТабСтатистики.НоваяСтрока();
					ТабСтатистики.Критерий = пКритерий.Владелец;
				КонецЕсли;
				ТабСтатистики.Значение = пКритерий;
			КонецЕсли;
			
			пДок.НомерКарты = итКампании.НомерКарты;
			
		КонецЦикла;		
	КонецЦикла;
	
	СтатИнформ = пДок.СтатИнформ;
	ПереносТабВДок(СтатИнформ,ТабСтатистики);
	пДок.СтатИнформ = СтатИнформ;
	
КонецПроцедуры



//***************************************************************
//новая загрузка с новых кассовых систем RTPO
Процедура ЗагрузкаДанныхНов(Тип=0)

	Знак=1;
	Если Тип<0 Тогда
		Знак=-1;
	КонецЕсли;

	кВечерняяУценкаСкидка 	= Константа.POSВечерняяУценкаСкидка;
	кУцененныйТовар 		= Константа.POSУцененныйТоварСкидка;
	
	СписокДок=СоздатьОбъект("СписокЗначений");
	СписокСообщений="";
	нстр=0;
	
	Запрос=СоздатьОбъект( "ODBCRecordSet" );
	ТекстЗапроса="SELECT TenderPOS.z_report ДатаПродажи
	|					,CONVERT(VARCHAR,TenderPOS.timestamp,108) as ВремяПродажи
	|					,id_line НомерСтроки
	|					,COALESCE(POS_doc_times.time_minutes,55) ВремяДокМин1С
	|					,CASE WHEN :ДатаНач<'20110317' THEN fiscal_no ELSE TenderPOS.ID END НомерЧека
	|					,POS_Location.id_location МестоТорговли
	|					,id_market НомерКассы
	|					,TenderPOS.id_global КодКассы
	|					,Кассы.ID [Касса $Справочник.Кассы]
	|					,$Кассы.Агент [Агент $Справочник.Сотрудники]
	|					,$Кассы.Склад [Склад $Справочник.МестаХранения]
	|					,(SELECT TOP 1 ID COLLATE Latvian_CI_AS as ID FROM $Справочник.Сотрудники Спр WHERE $Спр.ПерсональныйКод COLLATE Latvian_CI_AS = operator_pk) [Продавец $Справочник.Сотрудники]
	|					,operator_pk КассирПК
	|					,customer_card Карта
	|					,CASE WHEN customer_type=2 THEN :ФизЛицо 
	|						  WHEN customer_type=3 THEN :ФизЛицо2 
	|						  WHEN customer_type=4 THEN customer_id
	|						  WHEN customer_type=5 THEN (SELECT TOP 1 ID COLLATE Latvian_CI_AS as ID FROM $Справочник.Контрагенты СпрК WHERE RTRIM($СпрК.Рег_номер) COLLATE Latvian_CI_AS =RTRIM(customer_id) AND $СпрК.ДляВыгрузки = 1 AND ISMARK = 0)
	|					      ELSE (SELECT TOP 1 ID COLLATE Latvian_CI_AS as ID FROM $Справочник.Контрагенты СпрК WHERE $СпрК.ДопКод =RTRIM(customer_id)) 
	|					 END [Клиент $Справочник.Контрагенты]
	|					,TenderLinesPOS.id_item [Товар $Справочник.Номенклатура]
	|					,CASE WHEN disc_type < 90 THEN 0 ELSE 1 END ТипСкидки
	|					,TenderLinesPOS.disc_type ТипСкидкиPOS
	|					,price_type [КатегорияЦены $Справочник.КатегорииЦен]
	|					,price_cat ЦенаПоКатегории
	|					,vat_type [СтавкаНДС $Перечисление.ЗначенияНДС]
	|					,price_line ЦенаБезНДС
	|					,quant Количество
	|					,discount_line/(1+vat_rate/100) СкидкаБезНДС
	|					,amount_line Всего
	|					,ROUND(amount_line*vat_rate/(100+vat_rate),2) НДС
	|					,disc_rate ПроцентСкидки
	|			  FROM TRADE1.RTPOS_CA.dbo.Tender TenderPOS
	|			  INNER JOIN $Справочник.Кассы Кассы ON Кассы.CODE=TenderPOS.id_global AND Кассы.ISFOLDER=2
	|			  INNER JOIN TRADE1.RTPOS_CA.dbo.Tender_lines TenderLinesPOS ON TenderLinesPOS.id_tender=TenderPOS.id
	|			  INNER JOIN TRADE1.RTPOS_CA.dbo.POS_Location POS_Location ON POS_Location.id_global=TenderPOS.id_global
	|			  LEFT JOIN TRADE1.RTPOS_CA.dbo.POS_doc_times POS_doc_times ON POS_doc_times.id_location=POS_Location.id_location AND POS_doc_times.id_type = :ТипПродажи
	|			  WHERE z_report IS NOT NULL AND type =:ТипПродажи -- только обычные продажи
	|					AND deleted = 0 --только не удаленные
	|					AND TenderPOS.z_report BETWEEN :ДатаНач AND DATEADD(day,1,:ДатаНач)
	|			  ORDER BY POS_Location.id_location, НомерКассы, type, TenderPOS.timestamp
	|";
	
	
	Запрос.УстановитьТекстовыйПараметр("ТипПродажи",Тип);
	Запрос.УстановитьТекстовыйПараметр("ФизЛицо",Константа.СобственноеФизЛицо);
	Запрос.УстановитьТекстовыйПараметр("ФизЛицо2",Константа.СобственноеФизЛицо2);
	Запрос.УстановитьТекстовыйПараметр("ДатаНач",выбДата);

	итКассы=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,итКассы);
	
	Если НазваниеНабораПрав()="Администратор" Тогда
	//	итКассы.Показать("");
	КонецЕсли;
	
	Если Тип = 2 Тогда
		Если выбДата<'17.02.12' Тогда
			//списания по 2-й категории - добавляем группировку не по номеру чека, а по Кассиру
			итКассы.Группировать("КодКассы : КодКассы; КассирПК: КассирПК; НомерСтроки : НомерЧека,НомерСтроки","Количество,СкидкаБезНДС,Всего,НДС");
		Иначе
			//списания по 2-й категории - добавляем группировку не по Кассиру, а по типу скидки
			итКассы.Группировать("КодКассы : КодКассы; ТипСкидки: ТипСкидки; НомерСтроки : НомерЧека,НомерСтроки","Количество,СкидкаБезНДС,Всего,НДС");
		КонецЕсли;
	Иначе
		итКассы.Группировать("НомерКассы : НомерКассы; НомерЧека : НомерЧека; НомерСтроки : НомерСтроки","Количество,СкидкаБезНДС,Всего,НДС");
	КонецЕсли;
	
	ТекстЗапросаОплаты="SELECT ДатаПродажи
	|						   , НомерЧека
	|						   , НомерКассы
	|						   , КодКассы
	|						   , Касса [Касса $Справочник.Кассы]
	|						   , ТипПлатежа
	|						   , Валюта [Валюта $Справочник.Валюты]
	|						   , СуммаПлатежа
	|						   , СуммаПлатежаВал
	|					FROM (
	|						SELECT TenderPOS.z_report ДатаПродажи
	|							,CASE WHEN :ДатаНач<'20110317' THEN TenderPOS.fiscal_no ELSE TenderPOS.ID END НомерЧека
	|							,id_market НомерКассы
	|							,id_global КодКассы
	|							,Кассы.ID Касса
	|							,TenderPaymentsPOS.ID ТипПлатежа
	|						    ,СпрВ.ID Валюта
	|							,SUM(amount) СуммаПлатежа
	|							,SUM(amount_curr) СуммаПлатежаВал
	|					  	FROM TRADE1.RTPOS_CA.dbo.Tender TenderPOS
	|					  	INNER JOIN TRADE1.RTPOS_CA.dbo.Tender_payments TenderPaymentsPOS ON TenderPaymentsPOS.id_tender=TenderPOS.id
	|					  	INNER JOIN $Справочник.Кассы Кассы ON Кассы.CODE COLLATE Latvian_CI_AS =TenderPOS.id_global AND Кассы.ISFOLDER=2
	|					  	LEFT JOIN $Справочник.Валюты СпрВ ON TenderPaymentsPOS.ID = СпрВ.DESCR COLLATE Latvian_CI_AS
	|					  	WHERE z_report IS NOT NULL AND type =:ТипПродажи -- только обычные продажи 
	|								AND TenderPOS.z_report BETWEEN :ДатаНач AND DATEADD(day,1,:ДатаНач)
	|					  	GROUP BY TenderPOS.z_report
	|								, CASE WHEN :ДатаНач<'20110317' THEN TenderPOS.fiscal_no ELSE TenderPOS.ID END
	|								, id_market
	|								, id_global
	|								, Кассы.ID
	|								, TenderPaymentsPOS.ID
	|								, СпрВ.ID
	|						 ) ОплатыЧеков
	|					  ORDER BY НомерКассы, НомерЧека
	|";
	
	Запрос.УстановитьТекстовыйПараметр("ТипПродажи",Тип);
	Запрос.УстановитьТекстовыйПараметр("ДатаНач",выбДата);

	итОплаты=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос.ВыполнитьИнструкцию(ТекстЗапросаОплаты,итОплаты);
	итОплаты.ДобавитьИндекс("иКассаЧек","НомерКассы,НомерЧека");


	ТекстЗапросаКампании="SELECT ID_Tender НомерЧека
	|						   , campaign КампанияID
	|						   , СпрЗК.ID [Кампания $Справочник.ЗначенияСтатКритериев]
	|						   , СпрЗК.PARENTEXT [Критерий $Справочник.СтатКритерии]
	|						   , TenderBonuss.ID НомерКарты
	|						   , TenderBonuss.Bonuss
	|					FROM TRADE1.RTPOS_CA.dbo.Tender_Bonuss TenderBonuss
	|					INNER JOIN TRADE1.RTPOS_CA.dbo.Tender TenderPOS ON TenderPOS.ID = TenderBonuss.ID_Tender
	|					INNER JOIN $Справочник.ЗначенияСтатКритериев СпрЗК ON СпрЗК.Code = TenderBonuss.campaign
	|					WHERE TenderPOS.z_report BETWEEN :ДатаНач AND DATEADD(day,1,:ДатаНач)
	|";
	
	Запрос.УстановитьТекстовыйПараметр("ДатаНач",выбДата);
	итКампании=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос.ВыполнитьИнструкцию(ТекстЗапросаКампании,итКампании);
	итКампании.ДобавитьИндекс("иЧек","НомерЧека");
	итКампании.Группировать("НомерЧека : НомерЧека; Кампания : *Кампания; НомерКарты : НомерКарты","Bonuss");
	//итКампании.Показать("");
	
	
	НачалоЗагрузки_=_GetPerformanceCounter();	
	сзКлюч=СоздатьОбъект("СписокЗначений");
	итКассы.Сортировать("МестоТорговли,НомерКассы,ВремяПродажи");
	итКассы.ВыбратьСтроки();
	Пока итКассы.ПолучитьСтроку() = 1 Цикл //по местам торговли
		НомерЗагружаемойКассы=итКассы.НомерКассы;
//		Состояние("Загрузка документов из кассы "+итКассы.НомерСтроки+"/"+итКассы.КоличествоСтрок()+": "+НомерЗагружаемойКассы);
		итЧеки=итКассы.тзПотомки;
		итЧеки.ВыбратьСтроки();
		Пока итЧеки.ПолучитьСтроку() = 1 Цикл
		
			Состояние("Загрузка документов из кассы "+итКассы.НомерСтроки+"/"+итКассы.КоличествоСтрок()+": "+НомерЗагружаемойКассы+" чек: "+итЧеки.НомерСтроки+"/"+итЧеки.КоличествоСтрок());
			Начало_=_GetPerformanceCounter();
			Если выбДата<'17.03.2011' Тогда
				НомерДок_=Строка(итЧеки.НомерКассы)+"-"+Строка(итЧеки.НомерЧека);
			Иначе
				Если Тип = 2 Тогда
					//номер документа = правая часть перс. кода + ДДММГГ
					Если выбДата<'17.02.12' Тогда
						НомерДок_=Лев(""+итКассы.КодКассы+"-"+Прав(итЧеки.КассирПК,5)+"-"+СтрЗаменить(Формат(выбДата,"Д ДДММГГ"),".",""),Метаданные.Документ("Списание").ДлинаНомера);
					Иначе
						//номер документа по новому
						НомерДок_=Лев(""+итКассы.КодКассы+"-"+Строка(итЧеки.ТипСкидки)+"-"+СтрЗаменить(Формат(выбДата,"Д ДДММГГ"),".",""),Метаданные.Документ("Списание").ДлинаНомера);						
					КонецЕсли;
					Сообщить(НомерДок_);
				Иначе
					НомерДок_=Строка(итЧеки.НомерЧека);
				КонецЕсли;
			КонецЕсли;
			
			Если Тип<=0 Тогда
				Док = СоздатьОбъект("Документ.РасходнаяНакладнаяНал");
			ИначеЕсли (Тип=1) или (Тип=2) или (Тип=5) Тогда
				Док = СоздатьОбъект("Документ.Списание");
			ИначеЕсли Тип=4 Тогда
				Док = СоздатьОбъект("Документ.МарочныйОтчет");
			КонецЕсли;
			
			Док.НайтиПоНомеру(НомерДок_,выбДата);

			Если Док.Выбран()=0 Тогда
				глСоздатьНовыйОбъект(Док);
				ЗаполнитьШапку(Док);
				Док.IDD=ПолучитьУникальныйIDD();
				Док.ДатаДок=выбДата;
				Док.НомерДок=НомерДок_; 
				
			Иначе     
				Если Док.Проведен()=1 Тогда
					Продолжить;
				КонецЕсли;
				Док.УдалитьСтроки();					
			КонецЕсли;                

			Если ПустоеЗначение(итЧеки.Клиент) = 1 Тогда
				пКлиент = Константа.ЧастноеЛицо;
			Иначе
				пКлиент = итЧеки.Клиент;
			КонецЕсли;
			
			Если глЕстьРеквизитШапки("НомерКарты",Док.Вид())=1 Тогда
				Док.НомерКарты=итЧеки.Карта;
			КонецЕсли;
			
			Если ПустоеЗначение( пКлиент ) = 0 Тогда
				Док.Клиент=пКлиент;
				Если глЕстьРеквизитШапки("КлГруппа",Док.Вид())=1 Тогда
					Док.КлГруппа=пКлиент.КлГруппа;
				КонецЕсли;
			КонецЕсли;
			
			сзКлюч.УдалитьВсе();
			сзКлюч.ДобавитьЗначение(НомерЗагружаемойКассы);
			сзКлюч.ДобавитьЗначение(итЧеки.НомерЧека);

			Если Тип<=0 Тогда
				Док.Валюта=Рубли;
				Док.Дата_Курса=Док.ДатаДок;
				Док.Курс=КурсДляВалюты(Рубли,Док.ДатаДок);
				Док.ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа;
				Док.БН=Да;

				Док.СтавкаНДС=итЧеки.СтавкаНДС;
				Док.ВремяПродажи=Лев(итЧеки.ВремяПродажи,5);

				Док.ВидПлатежа=Перечисление.ВидыПлатежа.Наличные;
				Док.ВалютаПлатежа="";
				Док.ВалютаПлатежа1="";
				Док.Получено=0;
				Док.Получено1=0;
				Док.ПолученоКарта=0;
				Док.ПолученоПодарочнаяКарта=0;
				Док.ПодарочнаяКарта="";
				Док.СуммаПлатежа=0;
				
				итОплаты.Подмножество(сзКлюч,2,"иКассаЧек");
				итОплаты.ВыбратьСтроки("иКассаЧек");
				Пока итОплаты.ПолучитьСтроку("иКассаЧек") = 1 Цикл
					Если (итОплаты.ТипПлатежа="CC") Тогда //была оплата по CC
						Док.ВидПлатежа=Перечисление.ВидыПлатежа.Карта;
						Док.ПолученоКарта=Знак*итОплаты.СуммаПлатежа;
					ИначеЕсли (итОплаты.ТипПлатежа="Cash") Тогда // была оплата наличными
						Док.ВалютаПлатежа=Константа.БазоваяВалюта;
						Док.Получено=Знак*итОплаты.СуммаПлатежа;
						Док.СуммаПлатежа=Знак*итОплаты.СуммаПлатежа;
					ИначеЕсли (итОплаты.ТипПлатежа="SDK") Тогда // принесли подарочные карты, купленные у SONORO
						Док.ВидПлатежа=Перечисление.ВидыПлатежа.ПодарочнаяКарта;
						Док.ПодарочнаяКарта="SDK";//СокрЛП(Док.ПодарочнаяКарта)+СокрЛП(итОплаты.НомерКарты);
						Док.ПолученоПодарочнаяКарта=Знак*Док.ПолученоПодарочнаяКарта+Знак*итОплаты.СуммаПлатежа;
					ИначеЕсли (итОплаты.ТипПлатежа="DK") Тогда // принесли подарочные карты, купленные у REATONa
						Док.ВидПлатежа=Перечисление.ВидыПлатежа.ПодарочнаяКарта;
						Док.ПодарочнаяКарта="DK";//СокрЛП(Док.ПодарочнаяКарта)+СокрЛП(итОплаты.НомерКарты);
						Док.ПолученоПодарочнаяКарта=Знак*Док.ПолученоПодарочнаяКарта+итОплаты.СуммаПлатежа;
					ИначеЕсли ПустоеЗначение(итОплаты.Валюта)=0 Тогда //была оплата валютой наличными
						Док.ВидПлатежа=Перечисление.ВидыПлатежа.Наличные;
						Док.УстановитьАтрибут("ВалютаПлатежа"+?((итОплаты.ТипПлатежа="EUR") ИЛИ (итОплаты.ТипПлатежа="LVL"),"",1),итОплаты.Валюта);
						Док.УстановитьАтрибут("Получено"+?((итОплаты.ТипПлатежа="EUR") ИЛИ (итОплаты.ТипПлатежа="LVL"),"",1),Знак*итОплаты.СуммаПлатежаВал);
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли Тип=1 Тогда //списание по 1-й категории
				Док.КатегорияСписания=Перечисление.КатегорииСписания.Категория1;
				док.Основание="(1)Reklўmas nolЅkos izlietotie produkti";
				Док.СтавкаНДС=Перечисление.ЗначенияНДС.НДС0;
			ИначеЕсли Тип=2 Тогда //списание по 1-й категории
				Док.КатегорияСписания=Перечисление.КатегорииСписания.Категория2;
				док.Основание="(2) Nocenotas preces norakst®єana";
				Док.СтавкаНДС=Перечисление.ЗначенияНДС.НДС0;
				Док.Клиент = Константа.ЧастноеЛицо;
				Если глЕстьРеквизитШапки("КлГруппа",Док.Вид())=1 Тогда
					Док.КлГруппа=пКлиент.КлГруппа;
				КонецЕсли;
			ИначеЕсли Тип=5 Тогда //списание по 5-й категории
				Док.КатегорияСписания=Перечисление.КатегорииСписания.Категория5;
				док.Основание="(5) Beidzies realizўcijas termiґs";
				Док.СтавкаНДС=Перечисление.ЗначенияНДС.НДС0;
				Док.Клиент = "";
				Если глЕстьРеквизитШапки("КлГруппа",Док.Вид())=1 Тогда
					Док.КлГруппа="";
				КонецЕсли;
			ИначеЕсли Тип=4 Тогда //продажа за безнал Марочный отчет
				док.Нал=Нет;	
				док.ДатаСмены=док.ДатаДок;
				док.ДатаОплаты=семПолучитьДатуОплаты( док.КлГруппа, Перечисление.ВидыКлиентов.Покупатель, док.ДатаДок);
				Док.Валюта=Рубли;
				Док.Дата_Курса=Док.ДатаДок;
				Док.Курс=КурсДляВалюты(Рубли,Док.ДатаДок);
			КонецЕсли;

			Док.НомерДок=НомерДок_;
			
			Если Тип=1 Тогда
				Док.СкидкаНакл = семПолучитьСкидкуКлиента( док.Клиент );
			КонецЕсли;
			
			Док.Фирма=Константа.ОсновнаяФирма;
			Если глЕстьРеквизитШапки("ККМ",Док.Вид())=1 Тогда
				Док.ККМ=итЧеки.Касса;
			ИначеЕсли глЕстьРеквизитШапки("Касса",Док.Вид())=1 Тогда
				Док.Касса=итЧеки.Касса;
			КонецЕсли;
			
			Док.Склад=?(итЧеки.Склад.Выбран()=1,итЧеки.Склад,Константа.РозничныйСклад);
			
			Если ПустоеЗначение(итЧеки.Агент)=0 Тогда
				Док.Агент=итЧеки.Агент;
			КонецЕсли;      
			
			Если глЕстьРеквизитШапки("Продавец",Док.Вид())=1 Тогда
				Док.Продавец=итЧеки.Продавец;
			КонецЕсли;

			Док.КатегорияЦены=итЧеки.КатегорияЦены;
			
			итСтроки=итЧеки.тзПотомки;
			итСтроки.ВыбратьСтроки();
			Пока итСтроки.ПолучитьСтроку()=1 Цикл
			
				ДатаОтчета=Док.ДатаДок;
				Док.НоваяСтрока();
				Док.Товар=итСтроки.Товар;
				Док.ТовКод=Док.Товар.Код;
				Док.Количество=Знак*итСтроки.Количество;
				Док.Единица	=глБазоваяЕдиницаИзмерения(Док.Товар);
				Док.Коэффициент=1;

				Если глЕстьРеквизитМнЧ("РознЦена",Док.Вид())=1 Тогда
					Док.РознЦена=итСтроки.ЦенаПоКатегории;
				КонецЕсли;				

				Если (Тип<=0) Тогда
					Док.Всего=знак*итСтроки.Всего;
					Док.НДС=знак*итСтроки.НДС;
					Док.Сумма=Док.Всего-Док.НДС;
				ИначеЕсли Тип=4 Тогда
					Док.НДС=итСтроки.НДС;
					Док.Сумма=итСтроки.Всего;
				ИначеЕсли Тип=1 Тогда
					Док.Всего=Число(итСтроки.Всего)-Число(итСтроки.НДС);
					Док.НДС=0;
					Док.Сумма=Док.Всего-Док.НДС;
				ИначеЕсли Тип=2 Тогда
					Док.Всего=Число(итСтроки.Всего);
					Док.НДС=0;
					Док.Сумма=Док.Всего;
				ИначеЕсли Тип=5 Тогда
					Док.Всего=Число(итСтроки.Всего);
					Док.НДС=0;
					Док.Сумма=итСтроки.Всего;
				КонецЕсли;

				Док.Цена=Абс_(Док.Сумма/?(Док.Количество=0,1,Док.Количество));
				
				Если глЕстьРеквизитМнЧ("ЦенаСНДС",Док.Вид())=1 Тогда
					Док.ЦенаСНДС=Абс_(Док.Всего/?(Док.Количество=0,1,Док.Количество));
				КонецЕсли;

				Если глЕстьРеквизитМнЧ("Скидка",Док.Вид())=1 Тогда
					Док.Скидка=итСтроки.СкидкаБезНДС;
				КонецЕсли;				
				ЦенаСкидка=Док.Цена;

				Если (глЕстьРеквизитМнЧ("ВидСкидки",Док.Вид())=1) И (Число(итСтроки.СкидкаБезНДС)>0) Тогда
					Если СокрЛП(ТаблДок.Карта)="1" Тогда
						Док.ВидСкидки = Перечисление.ВидСкидки.АкционныйТовар;
					Иначе
						Док.ВидСкидки = ПолучитьВидСкидкиКлиенту(Док);
					КонецЕсли;
					
					Если глЕстьРеквизитШапки("ККМ",Док.Вид())=1 Тогда
						ККМ=Док.ККМ;
					ИначеЕсли глЕстьРеквизитШапки("Касса",Док.Вид())=1 Тогда
						ККМ=Док.Касса;
					КонецЕсли;

					
					Если (Док.Клиент = Константа.СобственноеФизЛицо) ИЛИ (Док.Клиент = Константа.СобственноеФизЛицо2) Тогда
						Док.ВидСкидки = Перечисление.ВидСкидки.СотрудникКарта;
					КонецЕсли;
					
					Попытка
						Если (Док.Товар.ПодлежитУценке=1) И (ККМ.ВечерняяУценка=1) И (Число(итСтроки.ПроцентСкидки)=кВечерняяУценкаСкидка) Тогда
							Док.ВидСкидки = Перечисление.ВидСкидки.ТоварВечерняяУценка;
						КонецЕсли;
					Исключение
					КонецПопытки;
					
					
					Если (Число(итСтроки.ПроцентСкидки)>=(кУцененныйТовар-1)) Тогда
						Док.ВидСкидки = Перечисление.ВидСкидки.ТоварУцененныйТовар;
					КонецЕсли;

				КонецЕсли;
				
				

				Если глЕстьРеквизитМнЧ("СтавкаНДС_Т",Док.Вид())=1 Тогда
					Док.СтавкаНДС_Т=итСтроки.СтавкаНДС;
				КонецЕсли;				
				
			КонецЦикла; //итСтроки цикл по строкам документа

			//запишем документ 
			Попытка           
				Док.АвтоВремяОтключить();
				Док.Записать();
				Если Док.Проведен()=0 Тогда
					Док.УстановитьВремя(22,итЧеки.ВремяДокМин1С,00);
					//Док.УстановитьВремя(22,Лев(Док.ВремяПродажи,2),Сред(Док.ВремяПродажи,4,2));
				КонецЕсли;
				Док.Записать();
			Исключение
				Сообщить("Ошибка при записи документа "+Док.НомерДок);
				Сообщить(ОписаниеОшибки());
//				глУстановитьНовыйНомер(Док,"Z-");
//				Док.Записать();
			КонецПопытки;     
			
			Если Тип<=0 Тогда
				УстановитьКампанииНаДокумент(Док,итКампании);
				Док.Записать();
			КонецЕсли;
	
			Если (Тип<=0) ИЛИ (Тип=4) Тогда //добавляем только расходные за нал и марочные отчеты
				ДобавитьДокВТаблицу(Док,итЧеки.ВремяДокМин1С);
			КонецЕсли;
			
			Конец_=_GetPerformanceCounter();
			//Сообщить("Время загрузки документа "+Док+": "+(Конец_-Начало_)+" мс");
			
		КонецЦикла; //цикл по чекам
		
	КонецЦикла; //Цикл по кассам 

	Польз=СоздатьОбъект("Справочник.Пользователи");
	Польз.ВыбратьЭлементыПоРеквизиту("ПолучатьСообщенияЗагрузкиККМ",1,0,0);
	Блокнот=СоздатьОбъект("Справочник.Блокнот");
	
	Пока Польз.ПолучитьЭлемент()=1 Цикл
		//Блокнот.НайтиПоКоду(СокрЛП(Польз.Код),0);
		Если Блокнот.НайтиПоКоду(СокрЛП(Польз.Код),0) = 0 Тогда Продолжить; КонецЕсли;
		Если Блокнот.ЭтоГруппа() = 0 Тогда Продолжить; КонецЕсли;
		
		Если Блокнот.Выбран()=1 Тогда
			Блокнот.ИспользоватьРодителя(Блокнот.ТекущийЭлемент());
			глСоздатьНовыйОбъект(Блокнот);
			Блокнот.Наименование = "Загрузка из кассы за "+Строка(РабочаяДата()-1);
			Блокнот.__Дата = РабочаяДата()-1;
			Блокнот.Время="08:00:00";
			Блокнот.Автор = Пользователь;
			Если Блокнот.Родитель.Выбран()=0 Тогда
				Блокнот.УстановитьНовыйКод("Всем");
			КонецЕсли;
			
			Блокнот.Запись=СписокСообщений;
			Блокнот.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //ЗагрузкаДанных

Процедура ПроверкаНаличияКлиентов()

	
	АгентПоУмолчанию = СоздатьОбъект("Справочник.Сотрудники");
	АгентПоУмолчанию.НайтиПоКоду("PPT-PGG6",0);
	
	Запрос=СоздатьОбъект("ODBCRecordSet");	
	ТекстЗапроса = "SELECT DISTINCT RTRIM(customer_id) РегНомер,
	|					   EU_VAT.country Страна,
	|					   EU_VAT.Name Наименование,
	|					   EU_VAT.Addr Адрес
	|			  	FROM TRADE1.RTPOS_CA.dbo.Tender TenderPOS
	|			  	INNER JOIN $Справочник.Кассы Кассы ON Кассы.CODE=TenderPOS.id_global AND Кассы.ISFOLDER=2
	|			  	INNER JOIN TRADE1.RTPOS_CA.dbo.POS_Location POS_Location ON POS_Location.id_global=TenderPOS.id_global
	|				INNER JOIN TRADE1.INTRANET.dbo.eu_vat_req EU_VAT ON EU_VAT.NUMBER = RTRIM(customer_id)
	|				WHERE z_report IS NOT NULL AND type =0 -- только обычные продажи
	|					AND TenderPOS.z_report BETWEEN :ДатаНач AND DATEADD(day,1,:ДатаНач)
	|					AND customer_type=5
	|					AND RTRIM(customer_id) NOT IN (SELECT RTRIM($СпрК.Рег_номер) COLLATE Latvian_CI_AS FROM $Справочник.Контрагенты СпрК WHERE $СпрК.ДляВыгрузки = 1 AND ISMARK = 0)
	|					AND EU_VAT.valid = '1'
	|";

	Запрос.УстановитьТекстовыйПараметр("ДатаНач",выбДата);
	ТаблКлиентов=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
	
	Спр  = СоздатьОбъект("Справочник.Контрагенты");
	СпрК = СоздатьОбъект("Справочник.Контрагенты");
	СпрК.НайтиПоКоду("124",0); // группа Юридические лица в рознице
	Если СпрК.Выбран()=0 Тогда
		Сообщить("Не найдена группа клиентов с кодом 124!");
		Возврат;
	КонецЕсли;

	СпрКVIP = СоздатьОбъект("Справочник.Контрагенты");
	СпрКVIP.НайтиПоКоду("123_SK",0); // SPECKARTES
	Если СпрКVIP.Выбран()=0 Тогда
		Сообщить("Не найдена группа клиентов с кодом 123_SK!");
		Возврат;
	КонецЕсли;

	Спр.ИспользоватьРодителя(СпрК.ТекущийЭлемент());
	ТаблКлиентов.ВыбратьСтроки();
	Пока ТаблКлиентов.ПолучитьСтроку()=1 Цикл
		
		Поз1=0;
		Поз2=0;
		Поз1=Найти(ТаблКлиентов.Наименование,"""");
		КлиенНаим=ТаблКлиентов.Наименование;
		Если Поз1>0 Тогда
			КлиенНаим=Сред(ТаблКлиентов.Наименование,Поз1+1);
			Поз2=Найти(КлиенНаим,"""");
		КонецЕсли;
		
		Если Поз2>0 Тогда
			КлиенНаим=Лев(КлиенНаим,Поз2-1);
		КонецЕсли;
		
		Если Спр.НайтиПоРеквизиту("Рег_Номер",СокрЛП(ТаблКлиентов.РегНомер),1)=0 Тогда
			
			Спр.ИспользоватьДату(ДатаОтчета);
			Спр.Новый();
			//Спр.УстановитьНовыйКод(СпрК.Код);
	//		Сообщить("Код клиента: "+Спр.Код);
			Спр.ВидКонтрагента			= Перечисление.ВидыКонтрагентов.Организация;		
			Спр.ВалютаВзаиморасчетов	= Константа.ВалютаВзаиморасчетов;
			Спр.ВалютаКредита			= Константа.ОсновнаяВалюта;
			Спр.ВалютаКредитаПоставщика	= Константа.ОсновнаяВалюта;
			Спр.КатегорияКредита 		= Константа.ОснКатегорияКредита.Получить(ДатаОтчета);
			Спр.КатегорияКредитаТек		= Спр.КатегорияКредита;
			Спр.ПризнакИмпорта			= Перечисление.Булево.Нет;
			Спр.Специализация			= Константа.ОснСпециализацияПрочихЮридЛиц;
			Спр.Страна					= Константа.СтранаРезидент;
			Спр.КатегорияЦены			= Константа.РозничнаяКатегорияЦены;
			Спр.ВидКлиента				= Перечисление.ВидыКлиентов.Покупатель;
			Спр.ВидОтсрочкиКредита 		= Перечисление.ВидыОтсрочкиКредита.Дни;
			Спр.ВидОтсрочкиКредитаПоставщика = Перечисление.ВидыОтсрочкиКредита.Дни;
			
			ПолнНаименование = СокрЛП(СтрЗаменить(ТаблКлиентов.Наименование,"""",""));
			Если Найти(ПолнНаименование,"SIA")>0 Тогда
				ПолнНаименование = СокрЛП(СтрЗаменить(ПолнНаименование,"SIA",""));
				ПолнНаименование = ПолнНаименование+ " SIA";
			КонецЕсли;

			Если Найти(ПолнНаименование,"Sabiedriba ar ierobezotu atbildibu")>0 Тогда
				ПолнНаименование = СокрЛП(СтрЗаменить(ПолнНаименование,"Sabiedriba ar ierobezotu atbildibu",""));
				ПолнНаименование = ПолнНаименование+ " SIA";
			КонецЕсли;
			
			Спр.Наименование 			= ПолнНаименование;
			Спр.ПолноеНаименование 		= ПолнНаименование;
			Спр.ЮридическийАдрес		= СокрЛП(ТаблКлиентов.Адрес);
			Спр.ИНН						= СокрЛП(ТаблКлиентов.РегНомер);
			Спр.Рег_номер				= СокрЛП(ТаблКлиентов.РегНомер);
			Спр.ДляВыгрузки				= 1;
			Спр.ПоАлфавиту				= Translate_Descr(Спр.Наименование);
			Спр.СуммаКредита			= 0;
			Спр.СуммаКредитаПоставщика  = 0;
			Спр.Глубина					= 0;
			Спр.ГлубинаКредитаПоставщика= 0;
			Спр.РазрПроведениеНакл		= 0;
			Спр.ЗапретВыпискиНакл		= 0;
			Спр.КлиентСкидка 			= 0;
			Спр.НеПлательщик			= 0;
			Спр.Агент					= АгентПоУмолчанию.ТекущийЭлемент();
			ОбъектЗаписать(Спр,);
			Сообщить("Добавлено новое юридическое лицо: "+КлиенНаим+" ("+Спр.Рег_номер+")");
			ЗаписьЖурналаРегистрации("Добавлено новое юридическое лицо: "+КлиенНаим+" ("+Спр.Рег_номер+")","Справочник","Создан новый элемент",Спр.ТекущийЭлемент(),2);
		КонецЕсли;
	КонецЦикла;
	
	//проверяем наличие в базе 1С клиентов VDB, которые были добавлены через Walletzilla
	ТекстЗапроса="SELECT ID
	|				      ,f.IDKEY
	|				      ,[NAME]
	|				      ,[SURNAME]
	|				      ,[BDATE]
	|				      ,[NDATE]
	|				      ,[TEL1]
	|				      ,[TEL2]
	|				      ,[TELM]
	|				      ,[TELIM]
	|				      ,[TELIP]
	|				      ,[EMAIL]
	|				      ,[KOMTEL]
	|				      ,[KOMEMAIL]
	|				      ,[KOMMAIL]
	|				      ,[id_moderacija]
	|				      ,[wz_id]
	|					  ,mcard_stat.num CARDNUM
	|					  ,CASE WHEN id_rezidents=0 THEN 1 ELSE 0 END Резидент
	|					  ,vdb_category.category Статус
	|			  FROM [intranet].[dbo].[fizpersona] f
	|
//	|			  INNER JOIN [intranet].[dbo].[mcard] mc on mc.id_parent = f.id and mc.dexp IS NULL OR DEXP > GETDATE() 
	|			  INNER JOIN [intranet].[dbo].[w_fpmcardcurrstat] mcard_stat ON mcard_stat.idkey = f.idkey AND mcard_stat.id_mcardstat = 8
	|			  INNER JOIN [intranet].[dbo].vdb_category vdb_category on vdb_category.id_category = f.id_category
	|			  WHERE id_moderacija = 1
//	|				  and IDKEY NOT IN (SELECT $Спр.ДопКод FROM $Справочник.Контрагенты Спр (NOLOCK) WHERE $Спр.ВидКонтрагента=$Перечисление.ВидыКонтрагентов.ЧастноеЛицо AND $Спр.ДопКод>0)
//	|				  and wz_id>0
	|";
	

	Запрос.УстановитьТекстовыйПараметр("ДатаНач",выбДата);
	ТаблКлиентов=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
	
	Спр  = СоздатьОбъект("Справочник.Контрагенты");
	СпрК2 = СоздатьОбъект("Справочник.Контрагенты");
	СпрК2.НайтиПоКоду("123_NE",0); // группа Loyalty Cards не резиденты
	Если СпрК2.Выбран()=0 Тогда
		Сообщить("Не найдена группа клиентов с кодом 123_NE!");
		Возврат;
	КонецЕсли;
	
	СпрК = СоздатьОбъект("Справочник.Контрагенты");
	СпрК.НайтиПоКоду("123",0); // группа Loyalty Cards
	Если СпрК.Выбран()=0 Тогда
		Сообщить("Не найдена группа клиентов с кодом 123!");
		Возврат;
	КонецЕсли;
	
	ТаблКлиентов.ВыбратьСтроки();
	Пока ТаблКлиентов.ПолучитьСтроку()=1 Цикл

		Состояние("Обрабатывается: "+ТаблКлиентов.НомерСтроки+"/"+ТаблКлиентов.КоличествоСтрок());
		КлиенНаим = Врег(СокрЛП(ТаблКлиентов.NAME)+" "+СокрЛП(ТаблКлиентов.SURNAME));
		КлиенНаимПолн = СокрЛП(ТаблКлиентов.NAME)+" "+СокрЛП(ТаблКлиентов.SURNAME);
		Спр.ИспользоватьДату(ДатаОтчета);
		Спр.НайтиПоРеквизиту("ДопКод",ТаблКлиентов.IDKEY,1);

		Если ТаблКлиентов.Статус =  'VIP' Тогда
			Спр.ИспользоватьРодителя(СпрКVIP.ТекущийЭлемент());
		Иначе
			Если ТаблКлиентов.Резидент=0 Тогда
				Спр.ИспользоватьРодителя(СпрК2.ТекущийЭлемент());
			Иначе
				Спр.ИспользоватьРодителя(СпрК.ТекущийЭлемент());
			КонецЕсли;
		КонецЕсли;		
		
		
		
		Если Спр.Выбран()=0 Тогда
			Спр.Новый();
			
			Спр.СуммаКредита			= 0;
			Спр.СуммаКредитаПоставщика  = 0;
			Спр.Глубина					= 0;
			Спр.ГлубинаКредитаПоставщика= 0;
			Спр.РазрПроведениеНакл		= 0;
			Спр.ЗапретВыпискиНакл		= 0;
			Спр.КлиентСкидка 			= 0;
			Спр.НеПлательщик			= 0;
			Спр.ДопКод					= ТаблКлиентов.IDKEY;
			Спр.ВидКонтрагента			= Перечисление.ВидыКонтрагентов.ЧастноеЛицо;		
			Спр.ВалютаВзаиморасчетов	= Константа.ВалютаВзаиморасчетов;
			Спр.ВалютаКредита			= Константа.ОсновнаяВалюта;
			Спр.ВалютаКредитаПоставщика	= Константа.ОсновнаяВалюта;
			Спр.ПризнакИмпорта			= Перечисление.Булево.Нет;
			Спр.Важность				= Перечисление.КатегорииВажности.КатA;
			Спр.Страна					= Константа.СтранаРезидент;
			Спр.КатегорияЦены			= Константа.РозничнаяКатегорияЦены;
			Спр.ВидКлиента				= Перечисление.ВидыКлиентов.Покупатель;
			Спр.ИНН						= Константа.ОсновнаяФирма.Код+СокрЛП(Спр.Код);
			Спр.Рег_номер				= СокрЛП(Спр.ИНН);
			Спр.Наименование 			= КлиенНаим;
			Спр.ПолноеНаименование 		= СокрЛП(СтрЗаменить(КлиенНаимПолн,"""",""));
			Спр.ПоАлфавиту				= Translate_Descr(КлиенНаим);
			Спр.ДляВыгрузки				= 1;
			Спр.Карта					= ТаблКлиентов.CARDNUM;
			Спр.Агент					= АгентПоУмолчанию.ТекущийЭлемент();

			ОбъектЗаписать(Спр,);
			Сообщить("Добавлено новое физическое лицо: "+КлиенНаим+" ("+Спр.Рег_номер+")");
			ЗаписьЖурналаРегистрации("Добавлено новое физическое лицо: "+КлиенНаим+" ("+Спр.Рег_номер+")","Справочник","Создан новый элемент",Спр.ТекущийЭлемент(),2);

		ИначеЕсли (Спр.Выбран()=1) И ((СокрЛП(Спр.Наименование) <> КлиенНаим) или (СокрЛП(Спр.Карта) <> СокрЛП(ТаблКлиентов.CARDNUM))) Тогда
//		ИначеЕсли (Спр.Выбран()=1) И (СокрЛП(Спр.Карта) <> СокрЛП(ТаблКлиентов.CARDNUM)) Тогда
			
			Спр.Наименование 			= КлиенНаим;
			Спр.ПолноеНаименование 		= СокрЛП(СтрЗаменить(КлиенНаимПолн,"""",""));
			Спр.ПоАлфавиту				= Translate_Descr(КлиенНаим);
			Спр.Карта					= СокрЛП(ТаблКлиентов.CARDNUM);
			Если ПустоеЗначение(Спр.Агент)=1 Тогда
				Спр.Агент				= АгентПоУмолчанию.ТекущийЭлемент();
			КонецЕсли;
			Попытка
				Спр.Записать();
			Исключение
				ЗаписьЖурналаРегистрации(Шаблон("Ошибка записи клиента [Спр] c кодом [Спр.Код]"),"Справочник","Не записан клиент",Спр.ТекущийЭлемент(),2);
				Сообщить(ОписаниеОшибки());
				Сообщить(Шаблон("Ошибка записи клиента [Спр] c кодом [Спр.Код]"));
			КонецПопытки;
			
	//		Сообщить("Код клиента: "+Спр.Код);
		КонецЕсли;

	КонецЦикла;
	
	
КонецПроцедуры



Процедура ЗагрузкаДанных()

	ТаблДок=СоздатьОбъект("ТаблицаЗначений");
	ТаблДок.НоваяКолонка("Штрихкод");
	ТаблДок.НоваяКолонка("Товар");
	ТаблДок.НоваяКолонка("Карта");
	ТаблДок.НоваяКолонка("_Дата");
	ТаблДок.НоваяКолонка("Время");
	ТаблДок.НоваяКолонка("Цена","Число",17,5);
	ТаблДок.НоваяКолонка("Скидка","Число",17,5);
	ТаблДок.НоваяКолонка("Всего","Число",17,5);
	ТаблДок.НоваяКолонка("Количество",15,3);
	ТаблДок.НоваяКолонка("СтавкаНДС");
	ТаблДок.НоваяКолонка("НомерКассы");
	ТаблДок.НоваяКолонка("НомерКассира");
	ТаблДок.НоваяКолонка("НомерЧека");
	
//	ЗагрузкаДанныхСтар();

	НачалоЗагрузки_=_GetPerformanceCounter();

	ПроверкаНаличияКлиентов();
	
	ЗагрузкаДанныхНов(0); //обычные продажи
	ЗагрузкаДанныхНов(-1); //обычные продажи - возвраты
	ЗагрузкаДанныхНов(1); //списания по 1-й категории
	ЗагрузкаДанныхНов(2); //списания по 2-й категории
	ЗагрузкаДанныхНов(5); //списания по 5-й категории
	ЗагрузкаДанныхНов(4); //продажи за безналичный расчет
	
	Если ПроводитьДок=1 Тогда
		Если выбДата=(РабочаяДата()-1) Тогда
			глНеНужнаПроверкаИтогов=1;
			Сообщить("Документы будут проведены задним числом с актуальными итогами!");
		КонецЕсли;
		ПровестиДоки();
		глНеНужнаПроверкаИтогов=0;
	КонецЕсли;

	КонецЗагрузки_=_GetPerformanceCounter();
	Сообщить("Время загрузки кассовых чеков: "+(КонецЗагрузки_-НачалоЗагрузки_)+" мс");
	
КонецПроцедуры

Процедура ЗагрузкаМарочныеОтчеты()
	
	ТаблДоков.УдалитьСтроки();
	

	База=СоздатьОбъект("ODBCDataBase");
	ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");	
	ИмяСервера="""R-TRADE"".RK7_REATON";
	//{ Запрос по чекам
	ТекстЗапроса="		SELECT -- Получает проданные блюда
					|	  CONVERT(VARCHAR,GLOBALSHIFTS00.SHIFTNUM) + '_' + LTRIM(CONVERT(VARCHAR,CASHES00.SIFR)) + '_' + LTRIM(CONVERT(VARCHAR,СпрСклады.CODE)) + '_' + LTRIM(CONVERT(VARCHAR,СпрКассы.CODE)) НомерДок,
//					|	  CONVERT(VARCHAR,CASHES00.CODE)+'_'+ LTRIM(CONVERT(VARCHAR,TaxParts.Visit)) НомерЧека1С,
					|	  RIGHT(CONVERT(VARCHAR,CASHES00.SIFR),1)+'_'+ LTRIM(CONVERT(VARCHAR,TaxParts.Visit)) НомерЧека1С,

					|	  GLOBALSHIFTS00.SHIFTNUM AS НомерСмены,
					|	  GLOBALSHIFTS00.SHIFTDATE AS ДатаСмены,
					|	  TaxParts.BASEFORTAX AS [СуммаБезНДС $Число],
					|	  TaxParts.SUM AS [НДС $Число],
					|	  TaxParts.BASEFORTAX+TaxParts.SUM AS [Сумма $Число],
					|	  TaxParts.TAXRATE AS TAXRATE,
					|	  'Блюдо' Тип,
					|	  СпрТ.ID [Товар $Справочник.Номенклатура],
					|	  SessionDishes00.QUANTITY AS Количество,
					|	  MENUITEMS00.NAME AS Prece,
					|	  MENUITEMS00.CODE  AS ТоварКод,  
					|	  СпрСтанции.ID [Станция $Справочник.Станции],
					|	  СпрКассы.ID [Касса $Справочник.Кассы],
					|	  COALESCE($СпрСкладыТоваров.Склад,СпрСтанции.Склад) [Склад $Справочник.МестаХранения],
					|	  CURRENCIES00.NAME AS CurrName,
					|	  (SELECT TOP 1 ID FROM $Справочник.ВалютыРК СпрВР (NOLOCK) WHERE ISMARK=0 AND (DESCR = СпрВалюты.DESCR OR DESCR = CURRENCIES00.NAME OR ($СпрВР.КодРК = CURRENCIES00.EXTCODE AND LEN(CURRENCIES00.EXTCODE)>=4) )) [ВалютаРК $Справочник.ВалютыРК],
					|	  CURRENCYTYPES00.NAME AS CurrType,
					|	  CURRENCYTYPES00.CURRENCYFORMAT AS PayType,
					|	  CASE WHEN (CURRENCYTYPES00.CURRENCYFORMAT = 5) AND (CURRENCIES00.NAME NOT LIKE 'D_vanu karte%' AND CURRENCIES00.NAME NOT LIKE 'Bile_u serviss%') THEN 1 ELSE 0 END ВидПлатежаКредит,
					|     СпрКлиенты.ID [Клиент $Справочник.Контрагенты],
					|	  Orders00.OPENTIME AS STARTDATE,
					|	  Convert(Varchar(8),Orders00.OPENTIME,108) AS STARTTIME,
					|	  Orders00.ENDSERVICE AS CLOSEDATE,
					|	  Convert(Varchar(8),Orders00.ENDSERVICE,108) AS CLOSETIME,
					|	  PrintChecks00.CHECKNUM AS CHECKNUM,
					|	  RESTAURANTS00.NAME AS RESTAURANTNAME,
					|	  Orders00.ORDERNAME AS НомерЗаказа,
					|	  Orders00.GUESTSCOUNT AS КолвоГостей,
					|	  DishDiscounts00.CARDCODE AS CARDCODE,
					|	  1 КолСтрок
					|	FROM "+ИмяСервера+".dbo.TAXPARTS TaxParts
					|	LEFT JOIN "+ИмяСервера+".dbo.PayBindings PayBindings00
					|	  ON (PayBindings00.Visit = TaxParts.Visit) AND (PayBindings00.MidServer = TaxParts.MidServer) AND (PayBindings00.UNI = TaxParts.BindingUNI)
					|	LEFT JOIN "+ИмяСервера+".dbo.CurrLines CurrLines00
					|	  ON (CurrLines00.Visit = PayBindings00.Visit) AND (CurrLines00.MidServer = PayBindings00.MidServer) AND (CurrLines00.UNI = PayBindings00.CurrUNI)
					|	LEFT JOIN "+ИмяСервера+".dbo.PrintChecks PrintChecks00
					|	  ON (PrintChecks00.Visit = CurrLines00.Visit) AND (PrintChecks00.MidServer = CurrLines00.MidServer) AND (PrintChecks00.UNI = CurrLines00.CheckUNI)
					|	LEFT JOIN "+ИмяСервера+".dbo.Orders Orders00
					|	  ON (Orders00.Visit = PrintChecks00.Visit) AND (Orders00.MidServer = PrintChecks00.MidServer) AND (Orders00.IdentInVisit = PrintChecks00.OrderIdent)
					|	LEFT JOIN "+ИмяСервера+".dbo.DISHDISCOUNTS DishDiscounts00
					|	  ON (DishDiscounts00.Visit = PrintChecks00.Visit) AND (DishDiscounts00.MidServer = PrintChecks00.MidServer) AND (DishDiscounts00.ORDERIDENT = PrintChecks00.OrderIdent) AND DishDiscounts00.PDSTRANSACTION = 1
					|	LEFT JOIN "+ИмяСервера+".dbo.GLOBALSHIFTS GLOBALSHIFTS00
					|	  ON (GLOBALSHIFTS00.MidServer = Orders00.MidServer) AND (GLOBALSHIFTS00.ShiftNum = Orders00.iCommonShift)
					|	LEFT JOIN "+ИмяСервера+".dbo.SaleObjects SaleObjects00
					|	  ON (SaleObjects00.Visit = PayBindings00.Visit) AND (SaleObjects00.MidServer = PayBindings00.MidServer) AND (SaleObjects00.DishUNI = PayBindings00.DishUNI) AND (SaleObjects00.ChargeUNI = PayBindings00.ChargeUNI)
					|	LEFT JOIN "+ИмяСервера+".dbo.SessionDishes SessionDishes00
					|	  ON (SessionDishes00.Visit = SaleObjects00.Visit) AND (SessionDishes00.MidServer = SaleObjects00.MidServer) AND (SessionDishes00.UNI = SaleObjects00.DishUNI)
					|	LEFT JOIN "+ИмяСервера+".dbo.MENUITEMS MENUITEMS00
					|	  ON (MENUITEMS00.SIFR = SessionDishes00.Sifr)
					|	LEFT JOIN "+ИмяСервера+".dbo.TAXDISHTYPES TAXDISHTYPES00
					|	  ON (TAXDISHTYPES00.SIFR = SaleObjects00.iTaxDishType)
					|	LEFT JOIN "+ИмяСервера+".dbo.CASHES CASHES00
					|	  ON (CASHES00.SIFR = PrintChecks00.iPrintStation)
					|	LEFT JOIN "+ИмяСервера+".dbo.CURRENCIES CURRENCIES00
					|	  ON (CURRENCIES00.SIFR = CurrLines00.Sifr)
					|	LEFT JOIN "+ИмяСервера+".dbo.CURRENCYTYPES CURRENCYTYPES00
					|	  ON (CURRENCYTYPES00.SIFR = CurrLines00.iHighLevelType)
					|	LEFT JOIN "+ИмяСервера+".dbo.Shifts Shifts00
					|	  ON (Shifts00.MidServer = PrintChecks00.MidServer) AND (Shifts00.iStation = PrintChecks00.iCloseStation) AND (Shifts00.ShiftNum = PrintChecks00.iShift)
					|	LEFT JOIN "+ИмяСервера+".dbo.CASHGROUPS CASHGROUPS00
					|	  ON (CASHGROUPS00.SIFR = TaxParts.Midserver)
					|	LEFT JOIN "+ИмяСервера+".dbo.RESTAURANTS RESTAURANTS00
					|	  ON (RESTAURANTS00.SIFR = CASHGROUPS00.Restaurant)
					|	LEFT JOIN "+ИмяСервера+".dbo.ORDERVOIDS ORDERVOIDS00
					|	  ON (ORDERVOIDS00.SIFR = PrintChecks00.iVoid)
					|	LEFT JOIN "+ИмяСервера+".dbo.CASHGROUPS CASHGROUPS01
					|	  ON (CASHGROUPS01.SIFR = CurrLines00.Midserver)
					|	LEFT JOIN $Справочник.Номенклатура СпрТ (NOLOCK) ON $СпрТ.КодДляРозницы = MENUITEMS00.CODE AND СпрТ.ISMARK = 0
					|	LEFT JOIN $Справочник.Кассы СпрКассы (NOLOCK) ON $СпрКассы.HostName = RTRIM(CASHES00.NETNAME) AND СпрКассы.ISMARK = 0
					|	LEFT JOIN (SELECT ID, DESCR, $ПоследнееЗначение.Станции.Склад(Спр.ID,GETDATE()) Склад, $ПоследнееЗначение.Станции.Касса(Спр.ID,GETDATE()) Касса 
					|			   FROM $Справочник.Станции Спр(NOLOCK) WHERE ISMARK = 0) СпрСтанции ON СпрСтанции.DESCR = CASHES00.NETNAME
					|	LEFT JOIN $Справочник.СкладыТовара СпрСкладыТоваров (NOLOCK) ON $СпрСкладыТоваров.Станция = СпрСтанции.ID AND СпрСкладыТоваров.PARENTEXT = СпрТ.ID AND СпрСкладыТоваров.ISMARK = 0
					|	LEFT JOIN $Справочник.Валюты СпрВалюты (NOLOCK) ON CONVERT(INT,СпрВалюты.CODE) = CURRENCIES00.CODE AND CURRENCYTYPES00.CURRENCYFORMAT = 0
					|	LEFT JOIN $Справочник.МестаХранения СпрСклады (NOLOCK) ON СпрСклады.ID = COALESCE($СпрСкладыТоваров.Склад,СпрСтанции.Склад) AND СпрСклады.ISMARK = 0
					|	LEFT JOIN $Справочник.Контрагенты СпрКлиенты (NOLOCK) ON СпрКлиенты.CODE = CONVERT(VARCHAR(10),CURRENCIES00.EXTCODE) AND CURRENCYTYPES00.CURRENCYFORMAT = 5
					|	WHERE GLOBALSHIFTS00.SHIFTDATE BETWEEN :ДатаНач AND :ДатаНач AND PrintChecks00.DELETED = 0 --только не удаленные
					|	ORDER BY TaxParts.Visit
					|";


	ТекстЗапроса2 = "	SELECT -- получаем проданные Модификаторы
					|	  CONVERT(VARCHAR,GLOBALSHIFTS00.SHIFTNUM) + '_' + LTRIM(CONVERT(VARCHAR,CASHES00.SIFR)) + '_' + LTRIM(CONVERT(VARCHAR,СпрСклады.CODE)) + '_' + LTRIM(CONVERT(VARCHAR,СпрКассы.CODE)) НомерДок,
					|	  CONVERT(VARCHAR,CASHES00.CODE)+'_'+ LTRIM(CONVERT(VARCHAR,TaxParts.Visit)) НомерЧека1С,
					|	  GLOBALSHIFTS00.SHIFTNUM AS НомерСмены,
					|	  GLOBALSHIFTS00.SHIFTDATE AS ДатаСмены,
					|	  0 AS [СуммаБезНДС $Число],
					|	  0 AS [НДС $Число],
					|	  0 AS [Сумма $Число],
					|	  0 AS TAXRATE,
					|	  'Модификатор' Тип,
					|	  СпрТ.ID [Товар $Справочник.Номенклатура],
					|	  DishModifiers00.MODICNT AS Количество,
					|	  MODIFIERS.NAME AS Prece,
					|	  MODIFIERS.CODE  AS ТоварКод,  
					|	  СпрСтанции.ID [Станция $Справочник.Станции],
					|	  СпрКассы.ID [Касса $Справочник.Кассы],
					|	  COALESCE($СпрСкладыТоваров.Склад,СпрСтанции.Склад) [Склад $Справочник.МестаХранения],
					|	  CURRENCIES00.NAME AS CurrName,
					|	  (SELECT ID FROM $Справочник.ВалютыРК СпрВР (NOLOCK) WHERE ISMARK=0 AND (DESCR = СпрВалюты.DESCR OR DESCR = CURRENCIES00.NAME)) [ВалютаРК $Справочник.ВалютыРК],
					|	  CURRENCYTYPES00.NAME AS CurrType,
					|	  CURRENCYTYPES00.CURRENCYFORMAT AS PayType,
					|	  CASE WHEN CURRENCYTYPES00.CURRENCYFORMAT = 5 THEN 1 ELSE 0 END ВидПлатежаКредит,
					|     CASE WHEN CURRENCYTYPES00.CURRENCYFORMAT = 5 THEN СпрКлиенты.ID ELSE :ЧастноеЛицо END [Клиент $Справочник.Контрагенты],
					|	  Orders00.OPENTIME AS STARTDATE,
					|	  Convert(Varchar(8),Orders00.OPENTIME,108) AS STARTTIME,
					|	  Orders00.ENDSERVICE AS CLOSEDATE,
					|	  Convert(Varchar(8),Orders00.ENDSERVICE,108) AS CLOSETIME,
					|	  PrintChecks00.CHECKNUM AS CHECKNUM,
					|	  RESTAURANTS00.NAME AS RESTAURANTNAME,
					|	  Orders00.ORDERNAME AS НомерЗаказа,
					|	  Orders00.GUESTSCOUNT AS КолвоГостей,
					|	  0 AS CARDCODE
					|	FROM "+ИмяСервера+".dbo.TAXPARTS TaxParts
					|	LEFT JOIN "+ИмяСервера+".dbo.PayBindings PayBindings00
					|	  ON (PayBindings00.Visit = TaxParts.Visit) AND (PayBindings00.MidServer = TaxParts.MidServer) AND (PayBindings00.UNI = TaxParts.BindingUNI)
					|	LEFT JOIN "+ИмяСервера+".dbo.CurrLines CurrLines00
					|	  ON (CurrLines00.Visit = PayBindings00.Visit) AND (CurrLines00.MidServer = PayBindings00.MidServer) AND (CurrLines00.UNI = PayBindings00.CurrUNI)
					|	LEFT JOIN "+ИмяСервера+".dbo.PrintChecks PrintChecks00
					|	  ON (PrintChecks00.Visit = CurrLines00.Visit) AND (PrintChecks00.MidServer = CurrLines00.MidServer) AND (PrintChecks00.UNI = CurrLines00.CheckUNI)
					|	LEFT JOIN "+ИмяСервера+".dbo.Orders Orders00
					|	  ON (Orders00.Visit = PrintChecks00.Visit) AND (Orders00.MidServer = PrintChecks00.MidServer) AND (Orders00.IdentInVisit = PrintChecks00.OrderIdent)
					|	LEFT JOIN "+ИмяСервера+".dbo.DISHDISCOUNTS DishDiscounts00
					|	  ON (DishDiscounts00.Visit = PrintChecks00.Visit) AND (DishDiscounts00.MidServer = PrintChecks00.MidServer) AND (DishDiscounts00.ORDERIDENT = PrintChecks00.OrderIdent)
					|	LEFT JOIN "+ИмяСервера+".dbo.GLOBALSHIFTS GLOBALSHIFTS00
					|	  ON (GLOBALSHIFTS00.MidServer = Orders00.MidServer) AND (GLOBALSHIFTS00.ShiftNum = Orders00.iCommonShift)
					|	LEFT JOIN "+ИмяСервера+".dbo.SaleObjects SaleObjects00
					|	  ON (SaleObjects00.Visit = PayBindings00.Visit) AND (SaleObjects00.MidServer = PayBindings00.MidServer) AND (SaleObjects00.DishUNI = PayBindings00.DishUNI) AND (SaleObjects00.ChargeUNI = PayBindings00.ChargeUNI)
					|	LEFT JOIN "+ИмяСервера+".dbo.SessionDishes SessionDishes00
					|	  ON (SessionDishes00.Visit = SaleObjects00.Visit) AND (SessionDishes00.MidServer = SaleObjects00.MidServer) AND (SessionDishes00.UNI = SaleObjects00.DishUNI)
					|	INNER JOIN "+ИмяСервера+".dbo.DISHMODIFIERS DishModifiers00
					|	  ON (DishModifiers00.Visit = SaleObjects00.Visit) AND (DishModifiers00.MidServer = SaleObjects00.MidServer) AND (DishModifiers00.DishUNI = SaleObjects00.DishUNI)
					|	LEFT JOIN "+ИмяСервера+".dbo.MODIFIERS MODIFIERS
					|	  ON (MODIFIERS.SIFR = DishModifiers00.Sifr)
					|	LEFT JOIN "+ИмяСервера+".dbo.MENUITEMS MENUITEMS00
					|	  ON (MENUITEMS00.SIFR = SessionDishes00.Sifr)
					|	LEFT JOIN "+ИмяСервера+".dbo.TAXDISHTYPES TAXDISHTYPES00
					|	  ON (TAXDISHTYPES00.SIFR = SaleObjects00.iTaxDishType)
					|	LEFT JOIN "+ИмяСервера+".dbo.CASHES CASHES00
					|	  ON (CASHES00.SIFR = PrintChecks00.iPrintStation)
					|	LEFT JOIN "+ИмяСервера+".dbo.CURRENCIES CURRENCIES00
					|	  ON (CURRENCIES00.SIFR = CurrLines00.Sifr)
					|	LEFT JOIN "+ИмяСервера+".dbo.CURRENCYTYPES CURRENCYTYPES00
					|	  ON (CURRENCYTYPES00.SIFR = CurrLines00.iHighLevelType)
					|	LEFT JOIN "+ИмяСервера+".dbo.Shifts Shifts00
					|	  ON (Shifts00.MidServer = PrintChecks00.MidServer) AND (Shifts00.iStation = PrintChecks00.iCloseStation) AND (Shifts00.ShiftNum = PrintChecks00.iShift)
					|	LEFT JOIN "+ИмяСервера+".dbo.CASHGROUPS CASHGROUPS00
					|	  ON (CASHGROUPS00.SIFR = TaxParts.Midserver)
					|	LEFT JOIN "+ИмяСервера+".dbo.RESTAURANTS RESTAURANTS00
					|	  ON (RESTAURANTS00.SIFR = CASHGROUPS00.Restaurant)
					|	LEFT JOIN "+ИмяСервера+".dbo.ORDERVOIDS ORDERVOIDS00
					|	  ON (ORDERVOIDS00.SIFR = PrintChecks00.iVoid)
					|	LEFT JOIN "+ИмяСервера+".dbo.CASHGROUPS CASHGROUPS01
					|	  ON (CASHGROUPS01.SIFR = CurrLines00.Midserver)
					|	LEFT JOIN $Справочник.Номенклатура СпрТ (NOLOCK) ON $СпрТ.КодДляРозницы = MODIFIERS.CODE AND СпрТ.ISMARK = 0
					|	LEFT JOIN $Справочник.Кассы СпрКассы (NOLOCK) ON $СпрКассы.HostName = RTRIM(CASHES00.NETNAME) AND СпрКассы.ISMARK = 0
					|	LEFT JOIN (SELECT ID, DESCR, $ПоследнееЗначение.Станции.Склад(Спр.ID,GETDATE()) Склад, $ПоследнееЗначение.Станции.Касса(Спр.ID,GETDATE()) Касса 
					|			   FROM $Справочник.Станции Спр(NOLOCK) WHERE ISMARK = 0) СпрСтанции ON СпрСтанции.DESCR = CASHES00.NETNAME
					|	LEFT JOIN $Справочник.СкладыТовара СпрСкладыТоваров (NOLOCK) ON $СпрСкладыТоваров.Станция = СпрСтанции.ID AND СпрСкладыТоваров.PARENTEXT = СпрТ.ID AND СпрСкладыТоваров.ISMARK = 0
					|	LEFT JOIN $Справочник.Валюты СпрВалюты (NOLOCK) ON CONVERT(INT,СпрВалюты.CODE) = CURRENCIES00.CODE AND CURRENCYTYPES00.CURRENCYFORMAT = 0
					|	LEFT JOIN $Справочник.МестаХранения СпрСклады (NOLOCK) ON СпрСклады.ID = COALESCE($СпрСкладыТоваров.Склад,СпрСтанции.Склад) AND СпрСклады.ISMARK = 0
					|	LEFT JOIN $Справочник.Контрагенты СпрКлиенты (NOLOCK) ON СпрКлиенты.CODE = CONVERT(VARCHAR(10),CURRENCIES00.EXTCODE) AND CURRENCYTYPES00.CURRENCYFORMAT = 5
					|	WHERE GLOBALSHIFTS00.SHIFTDATE BETWEEN :ДатаНач AND :ДатаНач AND LEN(MODIFIERS.CODE)>=4 AND PrintChecks00.DELETED = 0 --только не удаленные
					|	ORDER BY TaxParts.Visit
					|";

	ЗапросСКЛ.УстановитьТекстовыйПараметр("ДатаНач",выбДата);
	итТабл=СоздатьОбъект("ИндексированнаяТаблица");
	ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итТабл);

	
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ДатаНач",выбДата);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ЧастноеЛицо",Константа.ЧастноеЛицо);
	итТабл2=СоздатьОбъект("ИндексированнаяТаблица");
	ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса2,итТабл2);
	
	//}
	//итТабл.Показать("");
	//Возврат;
	
	Сообщить(итТабл.КоличествоСтрок());
	итТабл.Объединить(итТабл2);
	Сообщить(итТабл.КоличествоСтрок());
	итКассы=СоздатьОбъект("ИндексированнаяТаблица");
	итДокПоВидамПлатежа=СоздатьОбъект("ИндексированнаяТаблица");
	итДокОЧ=СоздатьОбъект("ИндексированнаяТаблица");
	итДокПоВидамПлатежа.Загрузить(итТабл);
	итДокОЧ.Загрузить(итТабл);
	итКассы.Загрузить(итТабл);
	//итТабл.Показать("");
	итТабл.Группировать("НомерЧека1С:НомерЧека1С; ТоварКод:ТоварКод","СуммаБезНДС,НДС,Сумма,КолвоГостей,Количество,КолСтрок");
	
	итКассы.Группировать("Касса:Касса","СуммаБезНДС,НДС,Сумма");
	//итКассы.Показать("");
	Сообщить(Шаблон("Кол-во чеков: [итТабл.КоличествоСтрок()]"));

	
//	итТабл.Свернуть("НомерДок,Склад,Касса,CurrType","СуммаБезНДС,НДС,Сумма");
//	итТабл.Показать("");
	ДокЧек=СоздатьОбъект("Документ.Чек");

	//{ Загрузка чеков
	итТабл.ВыбратьСтроки();
	Пока итТабл.ПолучитьСтроку() = 1 Цикл
		Состояние(Шаблон("[итТабл.НомерСтроки]/[итТабл.КоличествоСтрок()]"));
		Если ДокЧек.НайтиПоНомеру(итТабл.НомерЧека1С,итТабл.ДатаСмены)=1 Тогда
			Если ДокЧек.Проведен()=1 Тогда
				Сообщить("Найден проведенный чек "+ДокЧек);
				Продолжить;
			КонецЕсли;
			ДокЧек.УдалитьСтроки();
		Иначе
			глСоздатьНовыйОбъект(ДокЧек);
			ДокЧек.НомерДок=итТабл.НомерЧека1С;
			ДокЧек.IDD=ПолучитьУникальныйIDD();
		КонецЕсли;
		
		ДокЧек.СистемныйНомер	= итТабл.CHECKNUM;
		ДокЧек.СуммаЧека		= итТабл.Сумма;
		ДокЧек.ОплатаБаз		= итТабл.Сумма;
		ДокЧек.ДатаДок			= итТабл.ДатаСмены;
		ДокЧек.ДатаСмены		= итТабл.ДатаСмены;
		ДокЧек.ДатаРеал			= итТабл.ДатаСмены;
//		ДокЧек.Удален			= итТабл.DELETED;
		ДокЧек.ВремяОткрытия	= итТабл.STARTTIME;
		ДокЧек.ВремяЗакрытия	= итТабл.CLOSETIME;
		ДокЧек.КоличествоГостей	= итТабл.КолвоГостей;
		ДокЧек.Станция			= итТабл.Станция;
		ДокЧек.НомерКарты 		= итТабл.CARDCODE;
		ДокЧек.Валюта			= итТабл.ВалютаРК;
		ДокЧек.ТипВалюты		= итТабл.ВалютаРК.Тип;
		ДокЧек.Курс				= 1;
		ДокЧек.ИспользоватьНП	= Перечисление.Булево.Нет;
		ДокЧек.Клиент = семПолучитьКлиента( ДокЧек.НомерКарты );                                         
		ДокЧек.ОплатаОриг		= ДокЧек.ОплатаБаз;
		//ДокЧек.Стол=Число(СтолЧ);
		//ДокЧек.Кассир=Кассир;
		//ДокЧек.Официант=Официант;
		//ДокЧек.Менеджер=Менеджер;
		
//		ДокЧек.ТипВалюты=СпрВал.Тип;
//		ДокЧек.Скидка=Число(СкидкаЧека);
		
		итТовары= итТабл.тзПотомки;
		итТовары.ВыбратьСтроки();
		Пока итТовары.ПолучитьСтроку() = 1 Цикл
			Если ПустоеЗначение(итТовары.Товар)=1 Тогда
				Сообщить(Шаблон("Не найден товар [итТовары.Prece] с кодом [итТовары.ТоварКод]!"));
			КонецЕсли;
			ДокЧек.НоваяСтрока();
			ДокЧек.ТовКод=итТовары.ТоварКод;
			ДокЧек.Товар = итТовары.Товар;
			ДокЧек.Количество = итТовары.Количество/итТовары.КолСтрок;
			ДокЧек.Сумма = итТовары.Сумма;
			ДокЧек.Цена = итТовары.Сумма/?(итТовары.Количество=0,1,итТовары.Количество);
		КонецЦикла;

		ДокЧек.Записать();
		Если ДокЧек.Проведен()=0 Тогда
			ДокЧек.УстановитьВремя(22,58,00);
		КонецЕсли;
		
		ДобавитьДокВТаблицу(ДокЧек,58);
	КонецЦикла;

	ПровестиДоки();

	//}
	
	
	//{ Загрузка оплаты чеков
	ТаблДоков.УдалитьСтроки();
	итДокОЧ.Группировать("НомерДок:НомерДок; ВалютаРК:ВалютаРК","СуммаБезНДС,НДС,Сумма,КолвоГостей,Количество");
	итДокОЧ.ВыбратьСтроки();
	Пока итДокОЧ.ПолучитьСтроку() = 1 Цикл
		ДатаСмены=итДокОЧ.ДатаСмены;
		Состояние(Шаблон("[итТабл.НомерСтроки]/[итТабл.КоличествоСтрок()]"));

		док = СоздатьОбъект("Документ.ОплатаЧеков");
		док.ВыбратьДокументы( ДатаСмены, ДатаСмены );          
		ЕстьДок=0;	
		Пока док.ПолучитьДокумент() = 1 Цикл
			Если док.ПометкаУдаления() = 1 Тогда
				Продолжить;
			КонецЕсли;
			Если ( док.Касса = итДокОЧ.Касса ) и ( док.Склад = итДокОЧ.Склад )  Тогда
				Если Док.Проведен()=1 Тогда
					Сообщить( "За выбранную дату существует Оплата чеков "+док.НомерДок, 1);
					ЕстьДок=1;	
				Иначе
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;		       

		Если ЕстьДок = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Док.Выбран()=1 Тогда
			докОЧ=СоздатьОбъект("Документ.ОплатаЧеков");
			докОЧ.НайтиДокумент(док.ТекущийДокумент());
			докОЧ.УдалитьСтроки();
		Иначе
			докОЧ=СоздатьОбъект("Документ.ОплатаЧеков");	
			глСоздатьНовыйОбъект(докОЧ);
			докОЧ.IDD=ПолучитьУникальныйIDD();
		КонецЕсли;
		
		докОЧ.ДатаДок=ДатаСмены;
		докОЧ.ДатаСмены=ДатаСмены;
		докОЧ.Фирма=Константа.ОсновнаяФирма;
		докОЧ.ТипУчета=0; 
		докОЧ.Склад = итДокОЧ.Склад; 
		докОЧ.Касса = итДокОЧ.Касса; 
		итВалюты=итДокОЧ.тзПотомки;
		итВалюты.ВыбратьСтроки();
		Пока итВалюты.ПолучитьСтроку() = 1 Цикл
			докОЧ.НоваяСтрока();
			докОЧ.ВалютаРК = итВалюты.ВалютаРК;
			докОЧ.Сумма = итВалюты.Сумма;
			докОЧ.СуммаТоваров=итВалюты.Сумма;
			докОЧ.СуммаТоваровБезНдс=итВалюты.СуммаБезНДС;
			докОЧ.СуммаТоваров10=0;
			докОЧ.СуммаТоваров20=0;
			докОЧ.СуммаУслуг=0;
			докОЧ.СуммаУслугБезНДС=0;
			докОЧ.СуммаУслуг10=0;
			докОЧ.СуммаУслуг20=0;
		КонецЦикла;
		
		ОбъектЗаписать(докОЧ, );
		
		Если докОЧ.Проведен()=0 Тогда
			докОЧ.УстановитьВремя(23,00,00);
		КонецЕсли;
		
		ДобавитьДокВТаблицу(докОЧ,00);
		
	КонецЦикла;
	
	ПровестиДоки();
	//}
	
	//{ Загрузка марочных отчетов в разреще видов платежей - клиентов за безналичный загружаем в отдельные марочные отчеты
	ТаблДоков.УдалитьСтроки();
	докМО=СоздатьОбъект("Документ.МарочныйОтчет");
	итДокПоВидамПлатежа.Группировать("ВидПлатежаКредит:ВидПлатежаКредит;Клиент:Клиент;НомерДок:НомерДок; ТоварКод:ТоварКод","СуммаБезНДС,НДС,Сумма,КолвоГостей,Количество");
	итДокПоВидамПлатежа.ВыбратьСтроки();
	Пока итДокПоВидамПлатежа.ПолучитьСтроку() = 1 Цикл
		ДатаСмены=итДокПоВидамПлатежа.ДатаСмены;
		Состояние(Шаблон("[итТабл.НомерСтроки]/[итТабл.КоличествоСтрок()]"));
//		КлиентЧек 	= ?(ПустоеЗначение(итДокПоВидамПлатежа.Клиент)=1,Константа.ЧастноеЛицо,итДокПоВидамПлатежа.Клиент);
		БезНалЧек 		= ?(итДокПоВидамПлатежа.ВидПлатежаКредит=1,Нет,Да);
		итДокКлиенты=итДокПоВидамПлатежа.тзПотомки;
		итДокКлиенты.ВыбратьСтроки();
		Пока итДокКлиенты.ПолучитьСтроку() = 1 Цикл
             КлиентЧек = итДокКлиенты.Клиент;
		 	 КлиентЧек 	= ?(ПустоеЗначение(КлиентЧек)=1,Константа.ЧастноеЛицо,КлиентЧек);
		
			итДок=итДокКлиенты.тзПотомки;
			итДок.ВыбратьСтроки();
			Пока итДок.ПолучитьСтроку() = 1 Цикл
			
				док = СоздатьОбъект("Документ.МарочныйОтчет");
				док.ВыбратьДокументы( ДатаСмены, ДатаСмены );          
				ЕстьМО=0;	
				Пока док.ПолучитьДокумент() = 1 Цикл
					Если ( ( док.Загружен <> 0 ) и ( док.Касса = итДок.Касса ) и ( док.Склад = итДок.Склад ) и ( док.Нал = БезНалЧек ) и ( док.Клиент = КлиентЧек) и ( док.ПометкаУдаления() = 0 ) ) Тогда
						Если Док.Проведен()=1 Тогда
							Сообщить( "За выбранную дату существует Марочный отчет по клиенту "+кЧастноеЛицоРесторан, 1);
							ЕстьМО=1;	
						Иначе
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;		       
				Если ЕстьМО=1 Тогда Продолжить; КонецЕсли;	

				Если Док.Выбран()=1 Тогда
				//Если докМО.НайтиПоНомеру(итДок.НомерДок,ДатаСмены)=1 Тогда
				//	Если докМО.Проведен()=1 Тогда
				//		Продолжить;
				//	КонецЕсли;
					докМО.НайтиДокумент(Док.ТекущийДокумент());
					докМО.УдалитьСтроки();
				Иначе
					глСоздатьНовыйОбъект(докМО);
		//			докМО.НомерДок=итДок.НомерДок;
					докМО.ДатаДок=ДатаСмены;
					докМО.IDD=ПолучитьУникальныйIDD();
				КонецЕсли;
			
				//Загрузка МарочныхОтчетов 
				докМО.ДатаСмены=ДатаСмены;
				докМО.Склад=итДок.Склад;
				докМО.Валюта=Константа.БазоваяВалюта_R_Keeper;
				докМО.Дата_Курса=ДатаСмены;
				докМО.Курс=КурсДляВалюты(докМО.Валюта,ДатаСмены);
				докМО.Клиент=КлиентЧек;
				докМО.КлГруппа=?(КлиентЧек.КлГруппа.Выбран()=0,КлиентЧек,КлиентЧек.КлГруппа);
				докМО.Нал=БезНалЧек;
				докМО.Фирма=Константа.ОсновнаяФирма;
				докМО.ТипУчета=0;
				докМО.ИспользоватьНП=Перечисление.Булево.Да;
				докМО.Загружен=1;
				докМО.Касса = итДок.Касса;
				докМО.Агент = итДок.Касса.Агент;
				докМО.КатегорияЦены = итДок.Касса.РестораннаяКатегорияЦены;

				итТовары=итДок.тзПотомки;
				итТовары.ВыбратьСтроки();
				Пока итТовары.ПолучитьСтроку() = 1 Цикл
					Если ПустоеЗначение(итТовары.Товар)=1 Тогда
						Сообщить(Шаблон("Не найден товар [итТовары.Prece] с кодом [итТовары.ТоварКод]!"));
						Если итТовары.Сумма=0 Тогда
							//если товар без суммы тогда просто пропускаем и не загружаем в марочный отчет
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					докМО.НоваяСтрока();
					докМО.ТовКод = итТовары.ТоварКод;
					докМО.Товар = итТовары.Товар;
					докМО.Количество = итТовары.Количество;
					докМО.Сумма = итТовары.Сумма;  
					докМО.Цена = ?( итТовары.Количество<>0, Окр(итТовары.Сумма/итТовары.Количество,2,1), 0 );
					докМО.СуммаНП = 0;
					докМО.НДС=(докМО.Сумма-докМО.СуммаНП)*  ((ПроцентНДС(докМО.Товар.СтавкаНДС)/(100+ПроцентНДС(докМО.Товар.СтавкаНДС))));
					докМО.Единица=глБазоваяЕдиницаИзмерения(докМО.Товар);
					докМО.Коэффициент=докМО.Единица.Коэффициент;
				КонецЦикла;
	
				Если  докМО.КоличествоСтрок()=0 Тогда
					Предупреждение("Марочный отчет пустой, проверьте чеки за выбранную дату !");
				Иначе
					//Закомментировано Инсталлятором МОД:МарочныйОтчетНов.Записать();
					//Начало текста, вставленного Инсталлятором МОД
					ОбъектЗаписать(докМО, );
					//Конец текста, вставленного Инсталлятором МОД
					//ОткрытьФорму(докМО.ТекущийДокумент());
				КонецЕсли;	
				
				докМО.Записать();
				Если докМО.Проведен()=0 Тогда
					докМО.УстановитьВремя(23,01,00);
				КонецЕсли;
				
				ДобавитьДокВТаблицу(докМО,01);
		
			КонецЦикла; //по чекам
			
		КонецЦикла; //по клиентам
		
	КонецЦикла; //по видам платежа
	
	Если ПроводитьДок=1 Тогда
		ПровестиДоки();
	КонецЕсли;
	
	//}
		
КонецПроцедуры

//******************************************************************************
// КонтрольныйСимволEAN(ШтрКод, Тип)
//
// Параметры:
//  ШтрКод - 12-символьный штрих-код (без контрольной цифры)
//  Тип    - тип штрихкода: 13 - EAN13, 8 - EAN8
//
// Возвращаемое значение: 
//  Контрольный символ 
//
// Описание: 
//  Функция вычисляет контрольный символ кода EAN
//
Функция КонтрольныйСимволEAN(ШтрКод, Тип)
	
	Четн = 0;
	Нечетн = 0;
	
	Если Тип = 13 Тогда
		КолвоИтераций = 6;
	Иначе
		КолвоИтераций = 4;
	КонецЕсли;
	
	Для Индекс = 1 По КолвоИтераций Цикл
		Четн = Четн + Сред(ШтрКод, 2 * Индекс, 1);
		Нечетн = Нечетн + Сред(ШтрКод, 2 * Индекс - 1, 1);
	КонецЦикла;
	
	Если Тип = 13 Тогда
		Четн = Четн * 3;
	Иначе
		Нечетн = Нечетн * 3;
	КонецЕсли;
	
	КонтЦифра = 10 - (Четн + Нечетн) % 10;
	
	Возврат ?(КонтЦифра = 10, "0", Строка(КонтЦифра));
	
КонецФункции // КонтрольныйСимволEAN()

//******************************************************************************
// ПроверитьШтрихкод(Штрихкод)
//
// Параметры: 
//  Штрихкод - штриховой код, который нужно проверить
//
// Возвращаемое значение:
//  1 - штрихкод имеет верный формат, 0 - нет.
//
// Описание:
//  Проеверяет штрихкод на соответствие кодировке EAN 13 и EAN 8.
//
Функция ПроверитьШтрихкод(Штрихкод)
	
	ДлинаКода = СтрДлина(Штрихкод);
	Рез = 0;
	
	//	Если ТолькоЦифры(Штрихкод) = 1 Тогда
	// штрихкод должен состоять из цифр
	
	Если (ДлинаКода = 13) ИЛИ (ДлинаКода = 8) Тогда
		Если КонтрольныйСимволEAN(Лев(Штрихкод,12), 13) = Прав(Штрихкод, 1) Тогда
			Рез = 1;
		КонецЕсли;
	КонецЕсли;
	//КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // ПроверитьШтрихкод()          
                                        
//*******************************************
Функция ГруппаКлиента(Клиент, ПромДата="")
	Если ПустоеЗначение( Клиент.ДопКод ) = 0 Тогда
		Возврат семПолучитьГруппуПЛ( 1, Клиент.ДопКод, ?(ПустоеЗначение(ПромДата)=1,РабочаяДата(),ПромДата));
	КонецЕсли;
КонецФункции


//_____________________________________________________________________________
Процедура ПриЗакрытии() //предопределенная
	глНеНужнаПроверкаИтогов=0;
КонецПроцедуры //ПриЗакрытии     

//_____________________________________________________________________________
Процедура ПриОткрытии() //предопределенная

	выбДата=РабочаяДата()-1;	
	Если ПустоеЗначение(Форма.Параметр)=0 Тогда
		Если ТипЗначенияСтр(Форма.Параметр)="СписокЗначений" Тогда
			Команда=Форма.Параметр.Получить("Команда");
			Если Сокрлп(Команда)="Загрузка" Тогда
				ПроводитьДок=1;  
				ЗагрузкаДанных();
				ПереносНарядовНаСборкуИПродаж();
				ЗагрузкаМарочныеОтчеты();
			КонецЕсли;
		КонецЕсли;
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры //ПриОткрытии 
//***************************************************************
//                  

ТаблДоков.НоваяКолонка("Пик","Число",,,"",5); 
ТаблДоков.НоваяКолонка("Док","Документ");
ТаблДоков.НоваяКолонка("Вид","Строка",50,,"Документ",30);
ТаблДоков.НоваяКолонка("ВремяМин","Строка",2);
ТаблДоков.НоваяКолонка("НДок",,,,"Номер",15);
ТаблДоков.НоваяКолонка("ДДок","Дата",,,"Дата",15);  
ТаблДоков.НоваяКолонка("ВДок","Строка",0,,"Время",15); 
ТаблДоков.НоваяКолонка("Сумма","Число",,,"Сумма",15,"Ч015.2,",2);
ТаблДоков.ВыводитьПиктограммы("Пик",1);
ТаблДоков.Фиксировать(,1);
ТаблДоков.ВидимостьКолонки("Док",0);

итКассы=СоздатьОбъект("ИндексированнаяТаблица");
Запрос=СоздатьОбъект("ODBCRecordSet");
ТекстЗапроса="SELECT Кассы.ID [Ссылка $Справочник.Кассы]
|					, $Кассы.Склад [Склад $Справочник.МестаХранения]
|					, $ПоследнееЗначение.Кассы.НомерОтдела(Кассы.ID, GETDATE()) НомерОтдела
|			  FROM $Справочник.Кассы AS Кассы
|			  WHERE ($Кассы.ТипККМ = :ТипККМ)";

Запрос.УстановитьТекстовыйПараметр("ТипККМ",Перечисление.ТипыККМ.CHD7500POS);
Запрос.ВыполнитьИнструкцию(ТекстЗапроса,итКассы);
итКассы.ДобавитьИндекс("иНомерОтдела","НомерОтдела");

//СтавкиНДС.ДобавитьЗначение(Перечисление.ЗначенияНДС.безНДС,"A");
//СтавкиНДС.ДобавитьЗначение(Перечисление.ЗначенияНДС.НДС5,"C");
//СтавкиНДС.ДобавитьЗначение(Перечисление.ЗначенияНДС.ЛьготнаяСтавкаНДС,"C");
//СтавкиНДС.ДобавитьЗначение(Перечисление.ЗначенияНДС.ОсновнаяСтавкаНДС,"B");
//СтавкиНДС.ДобавитьЗначение(Перечисление.ЗначенияНДС.ОсновнаяСтавкаНДСНов,"B");

таблДатЧеков = СоздатьОбъект( "ТаблицаЗначений" );
таблДатЧеков.НоваяКолонка("НомерЧека"); 
таблДатЧеков.НоваяКолонка("Дата"); 

ДатаНачала=РабочаяДата();
ДатаКонца=ДатаНачала;
ПоПереоценкам=1;
Автомат=0;
ДатаОтчета=РабочаяДата()-1;
ВыгружатьКлиентов=0;
ВыгружатьРаботников=0;
КолККМ=18;

//******************************************************************************
ТабСтатистики=СоздатьОбъект("ТаблицаЗначений");
ТабСтатистики.НоваяКолонка("Критерий","Справочник.СтатКритерии",,,"Критерий",,,1);
ТабСтатистики.НоваяКолонка("Значение","Справочник.ЗначенияСтатКритериев",,,"Значение критерия",,,1);
кЧастноеЛицоРесторан = Константа.ЧастноеЛицоРесторан;