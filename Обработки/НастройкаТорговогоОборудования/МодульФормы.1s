//----------------------
// номер страницы мастера
Перем НомерСтраницы; 
// последняя страница мастера
Перем Последняя;      
Перем ВыбСклад;
Перем Настройка;      
Перем Позиция;
Перем НачальнаяСтрокаНастройки;
// *****************************************************************************
// заполнение списка дисплеев покупателя
Процедура ЗаполнитьСпискокИзПеречисления(пСписок, пВидПеречисления)
	// очищаем 
	пСписок.УдалитьВсе(); 	
	// заполняем
	Для Индекс = 1 По Перечисление.ПолучитьАтрибут(пВидПеречисления).КоличествоЗначений() Цикл
		пСписок.ДобавитьЗначение(Перечисление.ПолучитьАтрибут(пВидПеречисления).ЗначениеПоНомеру(Индекс));		
	КонецЦикла;	
КонецПроцедуры

// *****************************************************************************
Процедура УстановкаРозничногоСклада(ВыбСклад)
	// данная процедура предоставляет выбор розничного склада
	Перем Позиция;	
	Склад			= СоздатьОбъект("Справочник.МестаХранения");
	СписокСкладов	= СоздатьОбъект("СписокЗначений");	
	Склад.ВыбратьЭлементы();
	Пока Склад.ПолучитьЭлемент() = 1 Цикл             		
		Если (Склад.ВидСклада = Перечисление.ВидыСкладов.Розничный) ИЛИ (ПустоеЗначение(Склад.МестоКомплектации)=0) Тогда
			СписокСкладов.ДобавитьЗначение(Склад.ТекущийЭлемент(), Склад.Наименование);			
		КонецЕсли;                                                                     		
	КонецЦикла;                                                                        	
	Если СписокСкладов.РазмерСписка()=0 Тогда
		Предупреждение("В справочнике складов нет ни одного розничного склада!");      		
	Иначе
		СписокСкладов.ВыбратьЗначение(ВыбСклад, "Выберите Склад", Позиция, , 1);			
	КонецЕсли;                                                                  	
КонецПроцедуры

//******************************************************************************
// ДИСПЛЕЙ ПОКУПАТЕЛЯ        
//******************************************************************************
// срабатываем при измении флажка "Работа с дисплеем покупателя"
Процедура ИспользованиеДП()
		
	Форма.СписокТиповДисплеяПокупателя.Доступность(УстРаботаСДисплеемПокупателя);
	Форма.ПодпДиспл.Доступность(УстРаботаСДисплеемПокупателя);
	
    Форма.ДисплейПокупателяКоордX.Доступность(УстРаботаСДисплеемПокупателя);
	Форма.ДисплейПокупателяКоордY.Доступность(УстРаботаСДисплеемПокупателя);
    Форма.ДисплейПокупателяШирина.Доступность(УстРаботаСДисплеемПокупателя);
	Форма.ДисплейПокупателяВысота.Доступность(УстРаботаСДисплеемПокупателя);
    Форма.ДисплейПокупателяШиринаОкна.Доступность(УстРаботаСДисплеемПокупателя);
	Форма.ДисплейПокупателяВысотаОкна.Доступность(УстРаботаСДисплеемПокупателя);
 
	// параметры окна бегущей строки
    Форма.ДисплейПокупателяКоордXБС.Доступность(УстРаботаСДисплеемПокупателя);
	Форма.ДисплейПокупателяКоордYБС.Доступность(УстРаботаСДисплеемПокупателя);
    Форма.ДисплейПокупателяШиринаБС.Доступность(УстРаботаСДисплеемПокупателя);
	Форма.ДисплейПокупателяВысотаБС.Доступность(УстРаботаСДисплеемПокупателя);
    Форма.ДисплейПокупателяШиринаОкнаБС.Доступность(УстРаботаСДисплеемПокупателя);
	Форма.ДисплейПокупателяВысотаОкнаБС.Доступность(УстРаботаСДисплеемПокупателя);
 
	Форма.ДисплейПокупателяЗадержкаПовтораБС.Доступность(УстРаботаСДисплеемПокупателя);
	Форма.ДисплейПокупателяЗадержкаПоказаБС.Доступность(УстРаботаСДисплеемПокупателя);

	Форма.ДисплейПокупателяТекстБС.Доступность(УстРаботаСДисплеемПокупателя);
КонецПроцедуры

// *****************************************************************************
// СКАНЕР ШТРИХКОДА  
// *****************************************************************************
Процедура ИспользованиеСканераШК()
	Форма.УстШтрихкодИмеетПрефикс.Доступность(УстРаботаСоСканеромШтрихКода);
КонецПроцедуры

// *****************************************************************************
// ПРИНТЕР ЭТИКЕТОК        
// *****************************************************************************
Процедура ИспользованиеПринтераЭтикеток()
	Форма.СписокТиповПринтеровЭтикеток.Доступность(УстРаботаСПринтеромЭтикеток);
	Форма.ПодпПринтерЭтикеток.Доступность(УстРаботаСПринтеромЭтикеток);
КонецПроцедуры

// *****************************************************************************
// ТЕРМИНАЛ СБОРА ДАННЫХ     
// *****************************************************************************
Процедура ИспользованиеТерминала()
	Форма.СписокТиповТерминалов.Доступность(УстРаботаСТерминалом);
	Форма.ПодпТерминал.Доступность(УстРаботаСТерминалом);
КонецПроцедуры

// *****************************************************************************
// ВЕСЫ             
// *****************************************************************************
Процедура ИспользованиеВесов()
	Форма.СписокТиповВесов.Доступность(УстРаботаСВесами);
	Форма.ПодпВесов.Доступность(УстРаботаСВесами);
КонецПроцедуры

// *****************************************************************************
// РАБОТА С ККМ
// *****************************************************************************
// формирует представление ККМ для показа
Функция ПредставлениеККМ(ККМ)
	Возврат ?(ПустоеЗначение(ККМ) = 1, "" , "№" + ККМ.Код + "; " + ККМ.ТипККМ + "; " + ККМ.Наименование);
КонецФункции

// *****************************************************************************
Процедура ЗаполнитьСписокКасс(Режим, Список)
	
	СпрККМ	= СоздатьОбъект("Справочник.Кассы");   	
	СпрККМ.ВыбратьЭлементы();
	Пока СпрККМ.ПолучитьЭлемент() = 1 Цикл		
	    Если СпрККМ.РежимККМ = Режим Тогда
	        // режим работы ККМ совпадает с требуемым
			Список.ДобавитьЗначение(СпрККМ.ТекущийЭлемент(), ПредставлениеККМ(СпрККМ));						
		КонецЕсли;                                                                              		
	КонецЦикла;                                                                                 	
КонецПроцедуры

// *****************************************************************************
// НЕАВТОМАТИЗИРОВАННАЯ ККМ         
//******************************************************************************
Процедура ИспользованиеНеавтоматизированнойККМ()
	// использование неавтоматизированной ККМ предполагает отсутствие всех других  	
	Если УстРаботаНеавтоматизированнойККМ = 1 Тогда  		
		Форма.СписокНеавтККМ.Доступность(1);         
		
		// фискальный регистратор недоступен
		УстРаботаСФискальнымРегистратором	= 0;
		Форма.УстРаботаСФискальнымРегистратором.Доступность(0);
		Форма.СписокФР.Доступность(0);
		Форма.ПодпФР.Доступность(0);

		// ККМ OFFLine недоступна
		УстРаботаККМвOFFLine				= 0;
		Форма.УстРаботаККМвOFFLine.Доступность(0);
		Форма.СписокККМвOFFLine.Доступность(0);
		Форма.ДобавитьOFFLine.Доступность(0);
		Форма.УдалитьOFFLine.Доступность(0);
		Форма.ПодпТиповККМвOFFLine.Доступность(0);

		// ККМ OnLine недоступна
		УстРаботаККМвOnLine					= 0;
		Форма.УстРаботаККМвOnLine.Доступность(0);
		Форма.СписокККМвOnLine.Доступность(0);
		Форма.ДобавитьOnLine.Доступность(0);
		Форма.УдалитьOnLine.Доступность(0);
		Форма.ПодпТиповККМвOnLine.Доступность(0);		
	Иначе                                        		
		Форма.СписокНеавтККМ.Доступность(0);
		Форма.ПодпНеавтКММ.Доступность(0);       
		
		Форма.УстРаботаСФискальнымРегистратором.Доступность(1);
		Форма.УстРаботаККМвOFFLine.Доступность(1);
		Форма.УстРаботаККМвOnLine.Доступность(1);		
	КонецЕсли;                  	
КонецПроцедуры

// *****************************************************************************
// ФИСКАЛЬНЫЙ РЕГИСТАРТОР    
// *****************************************************************************
Процедура ИспользованиеФР()   	
	Форма.СписокФР.Доступность(УстРаботаСФискальнымРегистратором);
	Форма.ПодпФР.Доступность(УстРаботаСФискальнымРегистратором);	
КонецПроцедуры

// *****************************************************************************
// ККМ OFFLine           
// *****************************************************************************
Процедура ИспользованиеККМвOFFLine()       	
	Форма.СписокККМвOFFLine.Доступность(УстРаботаККМвOFFLine);
	Форма.ДобавитьOFFLine.Доступность(УстРаботаККМвOFFLine);
	Форма.УдалитьOFFLine.Доступность(УстРаботаККМвOFFLine);
	Форма.УдалитьOFFLine.Доступность(СписокККМвOFFLine.РазмерСписка() * УстРаботаККМвOFFLine);
	Форма.ПодпТиповККМвOFFLine.Доступность(УстРаботаККМвOFFLine);	
КонецПроцедуры

// *****************************************************************************
Процедура ДобавитьOFFLine()
	Перем ВыбККМ, СписокВыбораККМвOFFLine;   	
	СписокВыбораККМвOFFLine	= СоздатьОбъект("СписокЗначений");
	ЗаполнитьСписокКасс(Перечисление.РежимыККМ.OffLine, СписокВыбораККМвOFFLine);
	
	Если СписокВыбораККМвOFFLine.РазмерСписка() = 0 Тогда
		Предупреждение("Не зарегистрированно ни одной ККМ, работающей в режиме OFF-line");
		Возврат;
	КонецЕсли;   	
	Если СписокВыбораККМвOFFLine.ВыбратьЗначение(ВыбККМ,"Выберите ККМ",Позиция,,1)<=0 Тогда
		Возврат;
	КонецЕсли;   	
	Если СписокККМвOFFLine.НайтиЗначение(ВыбККМ)<>0 Тогда
		Предупреждение("Выбранная ККМ уже присутствует в списке активных ККМ OFF-line");
		Возврат;
	КонецЕсли; 	
	СписокККМвOFFLine.ДобавитьЗначение(ВыбККМ,ПредставлениеККМ(ВыбККМ));
	
	Если СписокККМвOFFLine.РазмерСписка()=0 Тогда
		Форма.УдалитьOFFLine.Доступность(0);		
	Иначе
		Форма.УдалитьOFFLine.Доступность(1);		
	КонецЕсли;                              	
	Форма.Обновить();                       	
КонецПроцедуры

// *****************************************************************************
Процедура УдалитьOFFLine()                  	
	ТекСтр	= СписокККМвOFFLine.ТекущаяСтрока();	
	Если (ТекСтр < 1) ИЛИ (ТекСтр > СписокККМвOFFLine.РазмерСписка()) Тогда		
		Предупреждение("Укажите курсором удаляемое значение!");
		Возврат;                                                           		
	КонецЕсли;                                                             	
	СписокККМвOFFLine.УдалитьЗначение(СписокККМвOFFLine.ТекущаяСтрока(), 1);	
	Если СписокККМвOFFLine.РазмерСписка() = 0 Тогда
		Форма.УдалитьOFFLine.Доступность(0);       		
	КонецЕсли;                                     	
	Форма.Обновить();                              	
КонецПроцедуры

// *****************************************************************************
// ККМ OnLine                                      
// *****************************************************************************
Процедура ИспользованиеККМвOnLine()                	
	Форма.СписокККМвOnLine.Доступность(УстРаботаККМвOnLine);
	Форма.ДобавитьOnLine.Доступность(УстРаботаККМвOnLine);
	Форма.УдалитьOnLine.Доступность(УстРаботаККМвOnLine);
	Форма.УдалитьOnLine.Доступность(СписокККМвOnLine.РазмерСписка() * УстРаботаККМвOnLine);
	Форма.ПодпТиповККМвOnLine.Доступность(УстРаботаККМвOnLine);
КонецПроцедуры

// *****************************************************************************
Процедура ДобавитьOnLine()
	Перем ВыбККМ, СписокВыбораККМвOnLine;                      	
	СписокВыбораККМвOnLine	= СоздатьОбъект("СписокЗначений");
	ЗаполнитьСписокКасс(Перечисление.РежимыККМ.OnLine, СписокВыбораККМвOnLine);  	
	Если СписокВыбораККМвOnLine.РазмерСписка() = 0 Тогда
		Предупреждение("Не зарегистрированно ни одной ККМ, работающей в режиме ON-line");
		Возврат;
	КонецЕсли;                                                                   	
	Если СписокВыбораККМвOnLine.ВыбратьЗначение(ВыбККМ, "Выберите ККМ", Позиция, , 1) <= 0 Тогда
		Возврат;
	КонецЕсли;                                                                   	
	Если СписокККМвOnLine.НайтиЗначение(ВыбККМ)<>0 Тогда
		Предупреждение("Выбранная ККМ уже присутствует в списке активных ККМ ON-line");
		Возврат;
	КонецЕсли;                                                                   	
	СписокККМвOnLine.ДобавитьЗначение(ВыбККМ, ПредставлениеККМ(ВыбККМ));
	
	Если СписокККМвOnLine.РазмерСписка()=0 Тогда
		Форма.УдалитьOnLine.Доступность(0);
	Иначе
		Форма.УдалитьOnLine.Доступность(1);
	КонецЕсли;            	
	Форма.Обновить();     	
КонецПроцедуры

// *****************************************************************************
Процедура УдалитьOnLine()   	
	ТекСтр	= СписокККМвOnLine.ТекущаяСтрока();	
	Если (ТекСтр < 1) ИЛИ (ТекСтр > СписокККМвOnLine.РазмерСписка()) Тогда
		Предупреждение("Укажите курсором удаляемое значение!");
		Возврат;
	КонецЕсли;                                 	
	СписокККМвOnLine.УдалитьЗначение(СписокККМвOnLine.ТекущаяСтрока(), 1);	
	Если СписокККМвOnLine.РазмерСписка() = 0 Тогда
		Форма.УдалитьOnLine.Доступность(0);
	КонецЕсли;                             	
	Форма.Обновить();                      	
КонецПроцедуры

//******************************************************************************
// ПРОЦЕДУРЫ ПЕРЕКЛЮЧЕНИЕ СЛОЕВ ФОРМЫ   
// *****************************************************************************
Процедура ДоступностьКнопок()           	
	// утстанавливает доступность кнопок
	Форма.Назад.Доступность(1);
	Форма.Готово.Доступность(1);
	Форма.Вперед.Доступность(1);
	
	Если НомерСтраницы = 1 Тогда
		Форма.Назад.Доступность(0);
	ИначеЕсли НомерСтраницы = Последняя Тогда
		Форма.Вперед.Доступность(0);
	КонецЕсли;                       	
КонецПроцедуры

//******************************************************************************
Процедура Вперед()      	
	// скрываем текущую страницу
	Форма.ИспользоватьСлой("Слой" + НомерСтраницы, 0);  	
	// увеличиваем на 1 номер страницы
	НомерСтраницы	= НомерСтраницы + 1;                	
	// показываем следующую страницу
	Форма.ИспользоватьСлой("Слой" + НомерСтраницы, 1);  	
	// меняем заголовок формы
	Форма.Заголовок("Шаг "+НомерСтраницы,1);            	
	// это нужно для восстановления текущей доступности кнопок
	ДоступностьКнопок();                  	
КонецПроцедуры

//******************************************************************************
Процедура Назад()                         
	// скрываем текущую страницу
	Форма.ИспользоватьСлой("Слой"+НомерСтраницы,0);	
	// уменьшаем на 1 номер страницы
	НомерСтраницы	= НомерСтраницы - 1;           	
	// показываем предыдущую страницу
	Форма.ИспользоватьСлой("Слой" + НомерСтраницы, 1);	
	// меняем заголовок формы
	Форма.Заголовок("Шаг " + НомерСтраницы,1);        	
	// это нужно для восстановления текуще й доступности кнопок
	ДоступностьКнопок();                              	
КонецПроцедуры

// *****************************************************************************
Процедура Выполнить()
	
	// отключаем работающее оборудование
	ОткрытьФорму("Обработка.ПодключениеТорговогоОборудования"+"#","Отключить");
	Настройка	= СоздатьОбъект("СписокЗначений");                             
	// СКЛАД ****************************************
	Настройка.Установить("РозничныйТорговыйСклад",ВыбСклад);
	
	Настройка.Установить("РозничнаяКатегорияЦены",ВыбКатегорияЦены);
	// ДИСПЛЕЙ ПОКУПАТЕЛЯ ****************************************             	
	Если УстРаботаСДисплеемПокупателя = 1 Тогда
		РаботаСДисплеемПокупателя	= 1;
	Иначе
		РаботаСДисплеемПокупателя	= 0;
	КонецЕсли;   	
	Настройка.Установить("РаботаСДисплеемПокупателя",	РаботаСДисплеемПокупателя);	
	ТипДисплеяПокупателя	= 
		СписокТиповДисплеяПокупателя.ПолучитьЗначение(СписокТиповДисплеяПокупателя.ТекущаяСтрока());
	Настройка.Установить("ТипДисплеяПокупателя", ТипДисплеяПокупателя);            
	// СКАНЕР ШТРИХКОДА ****************************************  	
	Если УстРаботаСоСканеромШтрихКода = 1 Тогда
		РаботаСоСканеромШтрихКода	= 1;
	Иначе
		РаботаСоСканеромШтрихКода	= 0;
	КонецЕсли;                                                    	
	Настройка.Установить("РаботаСоСканеромШтрихКода", РаботаСоСканеромШтрихКода);	
	ШтрихкодИмеетПрефикс	= УстШтрихкодИмеетПрефикс;
	Настройка.Установить("ШтрихкодИмеетПрефикс", ШтрихкодИмеетПрефикс);          
	// ПРИНТЕР ЭТИКЕТОК ****************************************  	
	Если УстРаботаСПринтеромЭтикеток = 1 Тогда
		РаботаСПринтеромЭтикеток	= 1;
	Иначе
		РаботаСПринтеромЭтикеток	= 0;
	КонецЕсли;                                                    	
	Настройка.Установить("РаботаСПринтеромЭтикеток", РаботаСПринтеромЭтикеток);
	НомерСтроки	= СписокТиповПринтеровЭтикеток.ТекущаяСтрока();	
	Если НомерСтроки > 0 Тогда
	    ТипПринтераЭтикеток	= СписокТиповПринтеровЭтикеток.ПолучитьЗначение(НомерСтроки);
	Иначе
		ТипПринтераЭтикеток	= "";
	КонецЕсли;                                                 	
	Настройка.Установить("ТипПринтераЭтикеток", ТипПринтераЭтикеток);
	// ТЕРМИНАЛ СБОРА ДАННЫХ **************************************** 	
	Если УстРаботаСтерминалом = 1 Тогда
		РаботаСтерминалом	= 1;
	Иначе
		РаботаСтерминалом	= 0;
	КонецЕсли;       	
	Настройка.Установить("РаботаСтерминалом", РаботаСтерминалом);
	НомерСтроки	= СписокТиповТерминалов.ТекущаяСтрока();	
	Если НомерСтроки > 0 Тогда
	    ТипТерминала	= СписокТиповТерминалов.ПолучитьЗначение(НомерСтроки);
	Иначе
		ТипТерминала	= "";
	КонецЕсли;                                          	
	Настройка.Установить("ТипТерминала", ТипТерминала); 
	// ВЕСЫ ****************************************    	
	Если УстРаботаСвесами = 1 Тогда
		РаботаСвесами	= 1;
	Иначе
		РаботаСвесами	= 0;
	КонецЕсли;                                          	
	Настройка.Установить("РаботаСвесами", РаботаСвесами);
	НомерСтроки	= СписокТиповВесов.ТекущаяСтрока();  	
	Если НомерСтроки > 0 Тогда
	    ТипВесов	= СписокТиповВесов.ПолучитьЗначение(НомерСтроки);
	Иначе
		ТипВесов	= "";
	КонецЕсли;                                       	
	Настройка.Установить("ТипВесов", ТипВесов);      
	// НЕАВТОМАТИЗИРОВАННАЯ ККМ ****************************************
	Если УстРаботаНеавтоматизированнойККМ = 1 Тогда
		РаботаНеавтоматизированнойККМ	= 1;
	Иначе
		РаботаНеавтоматизированнойККМ	= 0;
	КонецЕсли;                                       	
	Настройка.Установить("РаботаНеавтоматизированнойККМ", РаботаНеавтоматизированнойККМ);
	НомерСтроки	= СписокНеавтККМ.ТекущаяСтрока();    	
	Если НомерСтроки > 0 Тогда
	    ТекНеавтККМ	= СписокНеавтККМ.ПолучитьЗначение(НомерСтроки);
	Иначе
		ТекНеавтККМ	= "";
	КонецЕсли;     	
	Настройка.Установить("НеавтоматизированнаяККМ", ТекНеавтККМ);
	// ФИСКАЛЬНЫЙ РЕГИСТАРТОР ****************************************
	Если УстРаботаСФискальнымРегистратором = 1 Тогда
		РаботаСФискальнымРегистратором	= 1;    		
	Иначе
		РаботаСФискальнымРегистратором	= 0;    		
	КонецЕсли;                                  	
	Настройка.Установить("РаботаСФискальнымРегистратором", РаботаСФискальнымРегистратором);
	НомерСтроки	= СписокФР.ТекущаяСтрока();  	
	Если НомерСтроки > 0 Тогда
	    ТекККМфр	= СписокФР.ПолучитьЗначение(НомерСтроки);
	Иначе
		ТекККМфр	= "";
	КонецЕсли;                               	
	Настройка.Установить("ККМФискальногоРегистратора", ТекККМфр);   
	// ККМ OFFLine ****************************************
	Если УстРаботаККМвOFFLine	= 1 Тогда
		РаботаККМвOFFLine	= 1;
	Иначе
		РаботаККМвOFFLine	= 0;
	КонецЕсли;    	
	Настройка.Установить("РаботаККМвOFFLine", РаботаККМвOFFLine);
	// ККМ OnLine ****************************************
	Если УстРаботаККМвOnLine = 1 Тогда
		РаботаККМвOnLine	= 1;
	Иначе
		РаботаККМвOnLine	= 0;
	КонецЕсли;                   	
	Настройка.Установить("РаботаККМвOnLine", РаботаККМвOnLine);
	// добавим строку настроек дисплея покупателя
	ПараметрыДП	= СоздатьОбъект("СписокЗначений");             	
	// параметры окна
    ПараметрыДП.ДобавитьЗначение(ДисплейПокупателяКоордX, "ДисплейПокупателяКоордX");
	ПараметрыДП.ДобавитьЗначение(ДисплейПокупателяКоордY, "ДисплейПокупателяКоордY");
    ПараметрыДП.ДобавитьЗначение(ДисплейПокупателяШирина, "ДисплейПокупателяШирина");
	ПараметрыДП.ДобавитьЗначение(ДисплейПокупателяВысота, "ДисплейПокупателяВысота");
    ПараметрыДП.ДобавитьЗначение(ДисплейПокупателяШиринаОкна, "ДисплейПокупателяШиринаОкна");
	ПараметрыДП.ДобавитьЗначение(ДисплейПокупателяВысотаОкна, "ДисплейПокупателяВысотаОкна"); 
	// параметры окна бегущей строки
    ПараметрыДП.ДобавитьЗначение(ДисплейПокупателяКоордXБС, "ДисплейПокупателяКоордXБС");
	ПараметрыДП.ДобавитьЗначение(ДисплейПокупателяКоордYБС, "ДисплейПокупателяКоордYБС");
    ПараметрыДП.ДобавитьЗначение(ДисплейПокупателяШиринаБС, "ДисплейПокупателяШиринаБС");
	ПараметрыДП.ДобавитьЗначение(ДисплейПокупателяВысотаБС, "ДисплейПокупателяВысотаБС");
    ПараметрыДП.ДобавитьЗначение(ДисплейПокупателяШиринаОкнаБС, "ДисплейПокупателяШиринаОкнаБС");
	ПараметрыДП.ДобавитьЗначение(ДисплейПокупателяВысотаОкнаБС, "ДисплейПокупателяВысотаОкнаБС");  
	ПараметрыДП.ДобавитьЗначение(ДисплейПокупателяЗадержкаПовтораБС, "ДисплейПокупателяЗадержкаПовтораБС");
	ПараметрыДП.ДобавитьЗначение(ДисплейПокупателяЗадержкаПоказаБС , "ДисплейПокупателяЗадержкаПоказаБС");
	ПараметрыДП.ДобавитьЗначение(ДисплейПокупателяТекстБС, "ДисплейПокупателяТекстБС");                   	
	// ЗАПИСЫВАЕМ НАСТРОЙКИ ****************************************
	ФайлНастройки	= СоздатьОбъект("Текст");
	ФайлНастройки.Открыть(ИмяФайлаНастройки);
    ФайлНастройки.ЗаменитьСтроку(НачальнаяСтрокаНастройки + 1, ЗначениеВСтрокуВнутр(Настройка));
    ФайлНастройки.ЗаменитьСтроку(НачальнаяСтрокаНастройки + 2, ЗначениеВСтрокуВнутр(СписокККМвOFFLine));
    ФайлНастройки.ЗаменитьСтроку(НачальнаяСтрокаНастройки + 3,ЗначениеВСтрокуВнутр(СписокККМвOnLine));
	ФайлНастройки.ЗаменитьСтроку(НачальнаяСтрокаНастройки + 4, ЗначениеВСтрокуВнутр(ПараметрыДП));    
	// ЗАПИСЫВАЕМ ****************************************
	Попытка
		//ОбъектЗаписать(ФайлНастройки, ИмяФайлаНастройки); 
		//Закомментировано Инсталлятором МОД:ФайлНастройки.Записать(ИмяФайлаНастройки);
	//Начало текста, вставленного Инсталлятором МОД
	ОбъектЗаписать(ФайлНастройки, ИмяФайлаНастройки);
	//Конец текста, вставленного Инсталлятором МОД

	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	Сообщить("Записан файл настройки торгового оборудования: " + ИмяФайлаНастройки);
	// подключаем оборудование
	ОткрытьФорму("Обработка.ПодключениеТорговогоОборудования"+"#","Подключить");
КонецПроцедуры

// *****************************************************************************
Функция ИнициализацияДП()
	// ДОБАВИМ СТРОКУ НАСТРОЕК ДИСПЛЕЯ ПОКУПАТЕЛЯ
	ПараметрыДП	= СоздатьОбъект("СписокЗначений"); 	
	// параметры окна
    ПараметрыДП.ДобавитьЗначение(0     , "ДисплейПокупателяКоордX");
	ПараметрыДП.ДобавитьЗначение(0     , "ДисплейПокупателяКоордY");
    ПараметрыДП.ДобавитьЗначение(20    , "ДисплейПокупателяШирина");
	ПараметрыДП.ДобавитьЗначение(2     , "ДисплейПокупателяВысота");
    ПараметрыДП.ДобавитьЗначение(20    , "ДисплейПокупателяШиринаОкна");
	ПараметрыДП.ДобавитьЗначение(2     , "ДисплейПокупателяВысотаОкна");    
	// параметры окна бегущей строки
    ПараметрыДП.ДобавитьЗначение(0     , "ДисплейПокупателяКоордXБС");
	ПараметрыДП.ДобавитьЗначение(0     , "ДисплейПокупателяКоордYБС");
    ПараметрыДП.ДобавитьЗначение(20    , "ДисплейПокупателяШиринаБС");
	ПараметрыДП.ДобавитьЗначение(1     , "ДисплейПокупателяВысотаБС");
    ПараметрыДП.ДобавитьЗначение(45    , "ДисплейПокупателяШиринаОкнаБС");
	ПараметрыДП.ДобавитьЗначение(1     , "ДисплейПокупателяВысотаОкнаБС");
 
	ПараметрыДП.ДобавитьЗначение(500   , "ДисплейПокупателяЗадержкаПовтораБС");
	ПараметрыДП.ДобавитьЗначение(150   , "ДисплейПокупателяЗадержкаПоказаБС");

	ПараметрыДП.ДобавитьЗначение("Добро пожаловать !!!", "ДисплейПокупателяТекстБС");
	
	Возврат ПараметрыДП;     
КонецФункции

//******************************************************************************
// начальное создание файла настройки
Процедура Инициализация()
    // файл настройки содержит 3 строки
	// 1 - имя каталога ИБ
	// 2 - список всевозможных настроек оборудования
	// 3 - список ККМ Off-Line.
	// 4 - список ККМ Off-Line.  	
	ФайлНастройки	= СоздатьОбъект("Текст");
	
	Склад		= СоздатьОбъект("Справочник.МестаХранения");
	Касса		= СоздатьОбъект("Справочник.Кассы");	
    // строка с основными настройками
	Настройка	= СоздатьОбъект("СписокЗначений");

	Настройка.ДобавитьЗначение(Склад	, "РозничныйТорговыйСклад");
	
    Настройка.ДобавитьЗначение(0		, "РаботаСДисплеемПокупателя");
    Настройка.ДобавитьЗначение(""		, "ТипДисплеяПокупателя");

    Настройка.ДобавитьЗначение(0		, "РаботаСоСканеромШтрихКода");
    Настройка.ДобавитьЗначение(0		, "ШтрихкодИмеетПрефикс");

    Настройка.ДобавитьЗначение(0		, "РаботаСПринтеромЭтикеток");
    Настройка.ДобавитьЗначение(""		, "ТипПринтераЭтикеток");

    Настройка.ДобавитьЗначение(0		, "РаботаСтерминалом");
    Настройка.ДобавитьЗначение(""		, "ТипТерминала");

    Настройка.ДобавитьЗначение(0		, "РаботаСвесами");
    Настройка.ДобавитьЗначение(""		, "ТипВесов");

    Настройка.ДобавитьЗначение(0		, "РаботаСФискальнымРегистратором");
    Настройка.ДобавитьЗначение(Касса	, "ККМФискальногоРегистратора");

	Настройка.ДобавитьЗначение(0		, "РаботаККМвOFFLine");
    Настройка.ДобавитьЗначение(0		, "РаботаККМвOnLine");

    ФайлНастройки.ДобавитьСтроку(КаталогИБ());
    ФайлНастройки.ДобавитьСтроку(ЗначениеВСтрокуВнутр(Настройка));       
	// строка списка ККМ в режиме Off-Line
    ФайлНастройки.ДобавитьСтроку(ЗначениеВСтрокуВнутр(СписокККМвOnLine));  
    // строка списка ККМ в режиме On-Line
	ФайлНастройки.ДобавитьСтроку(ЗначениеВСтрокуВнутр(СписокККМвOnLine));
	// строка мписка параметров дисплея
	ФайлНастройки.ДобавитьСтроку(ЗначениеВСтрокуВнутр(ИнициализацияДП()));	
	// запишем файл
	Попытка
		
		//Закомментировано Инсталлятором МОД:ФайлНастройки.Записать(ИмяФайлаНастройки);
	//Начало текста, вставленного Инсталлятором МОД
	ОбъектЗаписать(ФайлНастройки, ИмяФайлаНастройки);
	//Конец текста, вставленного Инсталлятором МОД

			
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;	
	Сообщить("Создан файл настройки торгового оборудования: " + ИмяФайлаНастройки);
	НачальнаяСтрокаНастройки	= ФайлНастройки.КоличествоСтрок() - 4;
	
КонецПроцедуры

// *****************************************************************************
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// *****************************************************************************
Процедура ПриОткрытии()  	
	//Открытие файла настройки торгового оборудования	
	НачальнаяСтрокаНастройки	= глСуществуетФайлНастройки();
	Если НачальнаяСтрокаНастройки = 0 Тогда
		Инициализация(); 		
	КонецЕсли;           
    ФайлНастройки	= СоздатьОбъект("Текст");
	ФайлНастройки.Открыть(ИмяФайлаНастройки);	
	// зачитываем настройки из 2-й строки
	Настройка	= ЗначениеИзСтрокиВнутр(ФайлНастройки.ПолучитьСтроку(НачальнаяСтрокаНастройки + 1));
	// получаем имя текущего розничного склада
	ВыбСклад	= Настройка.Получить("РозничныйТорговыйСклад");
	
	ВыбКатегорияЦены = Настройка.Получить("РозничнаяКатегорияЦены");
	
	// *****************************************************************************
	// ДИСПЛЕЙ ПОКУПАТЕЛЯ
	
	ТекРаботаСДисплеемПокупателя	= Настройка.Получить("РаботаСДисплеемПокупателя");
	Если ТекРаботаСДисплеемПокупателя = 1 Тогда
		УстРаботаСДисплеемПокупателя	= 1;  		
	Иначе
		УстРаботаСДисплеемПокупателя	= 0;  		
	КонецЕсли;                                	
	// заполним список дисплеев
	ЗаполнитьСпискокИзПеречисления(СписокТиповДисплеяПокупателя, "ТипыДисплеевПокупателя");	
	ТипДисплеяПокупателя	= Настройка.Получить("ТипДисплеяПокупателя");
	НомерСтрокиСписка		= СписокТиповДисплеяПокупателя.НайтиЗначение(ТипДисплеяПокупателя);	
	Если ПустоеЗначение(НомерСтрокиСписка) = 1 Тогда
	    НомерСтрокиСписка	= 1;  		
	КонецЕсли;                    	
	СписокТиповДисплеяПокупателя.ТекущаяСтрока(НомерСтрокиСписка);
	ИспользованиеДП();            
	// *****************************************************************************
	// СКАНЕР ШТРИХКОДА           	
	ТекРаботаСоСканеромШтрихКода	= Настройка.Получить("РаботаСоСканеромШтрихКода");
	Если ТекРаботаСоСканеромШтрихКода = 1 Тогда
		УстРаботаСоСканеромШтрихКода	= 1;		
	Иначе
		УстРаботаСоСканеромШтрихКода	= 0;		
	КонецЕсли;                              	
	ТекШтрихкодИмеетПрефикс	= Настройка.Получить("ШтрихкодИмеетПрефикс");
    УстШтрихкодИмеетПрефикс	= ТекШтрихкодИмеетПрефикс;
	ИспользованиеСканераШК();               	
	// *****************************************************************************
	// ПРИНТЕР ЭТИКЕТОК
	
	ТекРаботаСПринтеромЭтикеток	= Настройка.Получить("РаботаСПринтеромЭтикеток");	
	Если ТекРаботаСПринтеромЭтикеток = 1 Тогда
		УстРаботаСПринтеромЭтикеток	= 1;
	Иначе
		УстРаботаСПринтеромЭтикеток	= 0;
	КонецЕсли;                                                                   	
	// заполним список принтеров
	ЗаполнитьСпискокИзПеречисления(СписокТиповПринтеровЭтикеток, "ТипыПринтеровЭтикеток");	
	ТипПринтераЭтикеток	= Настройка.Получить("ТипПринтераЭтикеток");
	НомерСтрокиСписка	= СписокТиповПринтеровЭтикеток.НайтиЗначение(ТипПринтераЭтикеток);	
	Если НомерСтрокиСписка = 0 Тогда
	    НомерСтрокиСписка	= 1;
	КонецЕсли;                                                                            	
	СписокТиповПринтеровЭтикеток.ТекущаяСтрока(НомерСтрокиСписка);
	ИспользованиеПринтераЭтикеток();                                                      	
	// *****************************************************************************
	// ТЕРМИНАЛ СБОРА ДАННЫХ
	
	ТекРаботаСтерминалом	= Настройка.Получить("РаботаСтерминалом");
	Если ТекРаботаСтерминалом = 1 Тогда
	    УстРаботаСтерминалом	= 1;
	Иначе
		УстРаботаСтерминалом	= 0;
	КонецЕсли;
	// заполним список типов терминалов
	//ЗаполнитьСпискокИзПеречисления(СписокТиповТерминалов, "ТипыТерминаловСбораДанных");
	ТипТерминала		= Настройка.Получить("ТипТерминала");
	НомерСтрокиСписка	= СписокТиповТерминалов.НайтиЗначение(ТипТерминала);
	Если НомерСтрокиСписка = 0 Тогда
	    НомерСтрокиСписка	= 1;
	КонецЕсли;
	СписокТиповТерминалов.ТекущаяСтрока(НомерСтрокиСписка);
	ИспользованиеТерминала();
	// *****************************************************************************
	// ВЕСЫ
	
	ТекРаботаСвесами	= Настройка.Получить("РаботаСвесами");
	Если ТекРаботаСвесами = 1 Тогда
	    УстРаботаСвесами	= 1;
	Иначе
		УстРаботаСвесами	= 0;
	КонецЕсли;
	// заполним список типов терминалов
	//ЗаполнитьСпискокИзПеречисления(СписокТиповВесов, "ТипыВесов");
	ТипВесов			= Настройка.Получить("ТипВесов");
	НомерСтрокиСписка	= СписокТиповВесов.НайтиЗначение(ТипВесов);
	Если НомерСтрокиСписка = 0 Тогда
	    НомерСтрокиСписка	= 1;
	КонецЕсли;
	СписокТиповВесов.ТекущаяСтрока(НомерСтрокиСписка);
	ИспользованиеВесов();
	// *****************************************************************************
	// НЕАВТОМАТИЗИРОВАННАЯ ККМ

	ТекРаботаНеавтоматизированнойККМ	= Настройка.Получить("РаботаНеавтоматизированнойККМ");
	Если ТекРаботаНеавтоматизированнойККМ = 1 Тогда
		УстРаботаНеавтоматизированнойККМ	= 1;
	Иначе
		УстРаботаНеавтоматизированнойККМ	= 0;
	КонецЕсли;
	СписокНеавтККМ.ДобавитьЗначение(ПолучитьПустоеЗначение("Справочник.ККМ"), "<ККМ не выбрана>");
	ЗаполнитьСписокКасс(Перечисление.РежимыККМ.НеавтККМ, СписокНеавтККМ);
	ТекНеавтККМ			= Настройка.Получить("НеавтоматизированнаяККМ");
	НомерСтрокиСписка	= СписокНеавтККМ.НайтиЗначение(ТекНеавтККМ);
	Если НомерСтрокиСписка = 0 Тогда
	    НомерСтрокиСписка	= 1;
	КонецЕсли;
	СписокНеавтККМ.ТекущаяСтрока(НомерСтрокиСписка);
	ИспользованиеНеавтоматизированнойККМ();
	// *****************************************************************************
	// ФИСКАЛЬНЫЙ РЕГИСТРАТОР
	ТекРаботаСФискальнымРегистратором	= Настройка.Получить("РаботаСФискальнымРегистратором");
	Если ТекРаботаСФискальнымРегистратором = 1 Тогда
		УстРаботаСФискальнымРегистратором	= 1;
	Иначе
		УстРаботаСФискальнымРегистратором	= 0;
	КонецЕсли;
	СписокФР.ДобавитьЗначение(ПолучитьПустоеЗначение("Справочник.Кассы"), "<ККМ не выбрана>");
	ЗаполнитьСписокКасс(Перечисление.РежимыККМ.ФР, СписокФР);
	ТекККМфр			= Настройка.Получить("ККМФискальногоРегистратора");
	НомерСтрокиСписка	= СписокФР.НайтиЗначение(ТекККМфр);
	Если НомерСтрокиСписка = 0 Тогда
	    НомерСтрокиСписка	= 1;
	КонецЕсли;
	СписокФР.ТекущаяСтрока(НомерСтрокиСписка);
	ИспользованиеФР();
	// *****************************************************************************
	// ККМ OFFLine
	
	ТекРаботаККМвOFFLine	= Настройка.Получить("РаботаККМвOFFLine");
	Если ТекРаботаККМвOFFLine = 1 Тогда
		УстРаботаККМвOFFLine	= 1;
	Иначе
		УстРаботаККМвOFFLine	= 0;
	КонецЕсли;
	// восстановим список ККМ
	ПредСписокККМвOFFLine	= ЗначениеИзСтрокиВнутр(ФайлНастройки.ПолучитьСтроку(НачальнаяСтрокаНастройки + 2));
	Для Индекс = 1 По ПредСписокККМвOFFLine.РазмерСписка() Цикл
		ККМ	= ПредСписокККМвOFFLine.ПолучитьЗначение(Индекс);
		СписокККМвOFFLine.ДобавитьЗначение(ККМ, ПредставлениеККМ(ККМ));
	КонецЦикла;
	ИспользованиеККМвOFFLine();
	// *****************************************************************************
	// ККМ ONLine
	
	ТекРаботаККМвOnLine	= Настройка.Получить("РаботаККМвOnLine");
	Если ТекРаботаККМвOnLine = 1 Тогда
		УстРаботаККМвOnLine	= 1;
	Иначе
		УстРаботаККМвOnLine	= 0;
	КонецЕсли;
	// восстановим список ККМ
	ПредСписокККМвOnLine	= ЗначениеИзСтрокиВнутр(ФайлНастройки.ПолучитьСтроку(НачальнаяСтрокаНастройки + 3));
	Для Индекс = 1 По ПредСписокККМвOnLine.РазмерСписка() Цикл
		ККМ	= ПредСписокККМвOnLine.ПолучитьЗначение(Индекс);
		СписокККМвOnLine.ДобавитьЗначение(ККМ, ПредставлениеККМ(ККМ));
	КонецЦикла;
	ИспользованиеККМвOnLine();
	// ВОССТАНОВИМ ПАРАМЕТРЫ ДИСПЛЕЯ ПОКУПАТЕЛЯ
	ПараметрыДисплеяПокупателя	= ЗначениеИзСтрокиВнутр(ФайлНастройки.ПолучитьСтроку(НачальнаяСтрокаНастройки + 4));
	Если ТипЗначения(ПараметрыДисплеяПокупателя) = 0 Тогда
		// в строке не содержаться настройки
	    ПараметрыДисплеяПокупателя	= ИнициализацияДП();
		Если НачальнаяСтрокаНастройки + 4 > ФайлНастройки.КоличествоСтрок() Тогда
		    ФайлНастройки.ДобавитьСтроку(ЗначениеВСтрокуВнутр(ПараметрыДисплеяПокупателя));
		Иначе
			ФайлНастройки.ВставитьСтроку(НачальнаяСтрокаНастройки + 4, ЗначениеВСтрокуВнутр(ПараметрыДисплеяПокупателя));
		КонецЕсли;
	
		//Закомментировано Инсталлятором МОД:ФайлНастройки.Записать(ИмяФайлаНастройки);
	//Начало текста, вставленного Инсталлятором МОД
	ОбъектЗаписать(ФайлНастройки, ИмяФайлаНастройки);
	//Конец текста, вставленного Инсталлятором МОД

	
	КонецЕсли;
	// параметры окна
    ДисплейПокупателяКоордX	= ПараметрыДисплеяПокупателя.Получить("ДисплейПокупателяКоордX");
	ДисплейПокупателяКоордY	= ПараметрыДисплеяПокупателя.Получить("ДисплейПокупателяКоордY");
    ДисплейПокупателяШирина	= ПараметрыДисплеяПокупателя.Получить("ДисплейПокупателяШирина");
	ДисплейПокупателяВысота	= ПараметрыДисплеяПокупателя.Получить("ДисплейПокупателяВысота");
    ДисплейПокупателяШиринаОкна	= ПараметрыДисплеяПокупателя.Получить("ДисплейПокупателяШиринаОкна");
	ДисплейПокупателяВысотаОкна	= ПараметрыДисплеяПокупателя.Получить("ДисплейПокупателяВысотаОкна");
	// параметры окна бегущей строки
    ДисплейПокупателяКоордXБС	= ПараметрыДисплеяПокупателя.Получить("ДисплейПокупателяКоордXБС");
	ДисплейПокупателяКоордYБС	= ПараметрыДисплеяПокупателя.Получить("ДисплейПокупателяКоордYБС");
    ДисплейПокупателяШиринаБС	= ПараметрыДисплеяПокупателя.Получить("ДисплейПокупателяШиринаБС");
	ДисплейПокупателяВысотаБС	= ПараметрыДисплеяПокупателя.Получить("ДисплейПокупателяВысотаБС");
    ДисплейПокупателяШиринаОкнаБС	= ПараметрыДисплеяПокупателя.Получить("ДисплейПокупателяШиринаОкнаБС");
	ДисплейПокупателяВысотаОкнаБС	= ПараметрыДисплеяПокупателя.Получить("ДисплейПокупателяВысотаОкнаБС");
 
	ДисплейПокупателяЗадержкаПовтораБС	= ПараметрыДисплеяПокупателя.Получить("ДисплейПокупателяЗадержкаПовтораБС");
	ДисплейПокупателяЗадержкаПоказаБС	= ПараметрыДисплеяПокупателя.Получить("ДисплейПокупателяЗадержкаПоказаБС");

	ДисплейПокупателяТекстБС	= ПараметрыДисплеяПокупателя.Получить("ДисплейПокупателяТекстБС");
	// ***************************************************************************** 
	// ОБРАБОТКА ОТКРЫТИЯ НА НУЖНОМ СЛОЕ
	ТипЗнач	= ТипЗначения(Форма.Параметр);
	Если ТипЗнач = 1 Тогда
		// передали число
		НомерСтраницы	= Форма.Параметр;
	ИначеЕсли ТипЗнач	= 2 Тогда
		// передали строку
		НомерСтраницы	= Число(Форма.Параметр);
	КонецЕсли;
	
	Если ТипЗначения(НомерСтраницы) = 1 Тогда
	    // номер страницы может находиться в диапозоне 1-5
		Если  (НомерСтраницы<1) ИЛИ (НомерСтраницы>5) Тогда
			// не попал в диапозон
			НомерСтраницы = 1;    
		КонецЕсли;
	Иначе
		НомерСтраницы	= 1;	// по умолчанию номер страницы равен 1
	КонецЕсли;
	
	Форма.ИспользоватьСлой("Общий", 2);
	Форма.ИспользоватьСлой("Слой" + НомерСтраницы, 1);
	ДоступностьКнопок();
КонецПроцедуры

//******************************************************************************
// ТЕЛО МОДУЛЯ

Последняя	= 4;

