Перем КолККМ;
Перем ПутьВыгрузки, ПутьЗагрузки;
Перем Автомат;
перем ТабПлатежей;
Перем ДатаОтчета;      
Перем НомерЗагружаемойКассы; //Номер кассы является минутой установки всех документов данной кассы
перем таблДатЧеков,ТаблДок;
Перем итГруппыСкидок;
Перем СтавкиНДС;
Перем итКассы;

Процедура ОчиститьФлагИзменения()
	MetaDataWork = СоздатьОбъект( "MetaDataWork" );
	ODBCRecordSet = СоздатьОбъект( "ODBCRecordSet" );
	ODBCRecordSet.УстБД1С();
	полеФлИзменен = "SP"+MetaDataWork.ИДРеквизитаСправочника("Номенклатура","ФлИзменен");
	таблНоменклатура = MetaDataWork.ИмяТаблицыСправочника("Номенклатура");
	ТекстЗапроса=Шаблон("UPDATE [таблНоменклатура] SET [полеФлИзменен]=0 WHERE [полеФлИзменен]=1");
	Если ODBCRecordSet.Выполнить( ТекстЗапроса ) = 0 Тогда
		Сообщить( "Ошибка выполнения запроса..", "!" );
		Сообщить( ТекстЗапроса,"I" );
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьВидСкидкиКлиенту(Конт)
	
		ДатаЦены = Конт.ДатаДок;
		Контра = Конт.Клиент;
		СкидкаПр=ПолучитьАкцСкидкуТовара(Конт.Товар,Конт.КатегорияЦены,ДатаЦены );
		Если СкидкаПр>0 Тогда
			Возврат Перечисление.ВидСкидки.АкционныйТовар;
		ИначеЕсли Контра<>Константа.ЧастноеЛицо Тогда
		
			Если ПустоеЗначение( Контра.ДопКод ) = 0 Тогда
				СкидкаПЛ = семПолучитьСкидкуПЛ( 1, Контра.ДопКод, ДатаЦены );
				Если СкидкаПЛ > 0 Тогда
					Возврат Перечисление.ВидСкидки.Клиент;
				КонецЕсли;
			Иначе
				// затем скидка клиенту вне зависимости от товара (из справочника "Контрагенты")
				Контра.ИспользоватьДату("");
				Если Контра.КлиентСкидка.Получить(ДатаЦены) > 0 Тогда
					Возврат Перечисление.ВидСкидки.Клиент;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
КонецФункции

Функция семПолучитьГруппуПЛ( пДеп, пДопКод, пДата ) 
	MetaDataWork = СоздатьОбъект( "MetaDataWork" );
        ODBCDatabase = СоздатьОбъект( "ODBCDatabase" );
	ConnectionString = "Driver={SQL Server};Server=Trade1;UID=sa; PWD=vlrevlor;Database=intranet;";	
	Если ODBCDatabase.Соединение( ConnectionString ) = 0 Тогда
		Сообщить( "Ошибка соединения с базой данных.", "!" );
		Сообщить( ODBCDatabase.ПолучитьОписаниеОшибки(),"I" );
		Возврат 0;
	КонецЕсли;
	ODBCRecordSet = СоздатьОбъект( "ODBCRecordSet" );
	ODBCRecordSet.УстБД( ODBCDatabase );
	промДата = MetaDataWork.ПолучитьСтрИзДаты(пДата);
	ТекстЗапроса=Шаблон("select dbo.Get_VDB_POSGR([пДеп],[пДопКод],'[промДата]')");
	Если ODBCRecordSet.Открыть( ТекстЗапроса ) = 0 Тогда
		Сообщить( "Ошибка выполнения запроса..", "!" );
		Сообщить( ТекстЗапроса,"I" );
		Возврат 0;
	КонецЕсли;
	Возврат ODBCRecordSet.ПолучитьЗначение(1);
КонецФункции

                                     
Функция семПолучитьСкидкуПЛ( пДеп, пДопКод, пДата ) 
	MetaDataWork = СоздатьОбъект( "MetaDataWork" );
        ODBCDatabase = СоздатьОбъект( "ODBCDatabase" );
	ConnectionString = "Driver={SQL Server};Server="+кСерверVDB+";UID=sa; PWD=vlrevlor;Database=intranet;";	
	Если ODBCDatabase.Соединение( ConnectionString ) = 0 Тогда
		Сообщить( "Ошибка соединения с базой данных.", "!" );
		Сообщить( ODBCDatabase.ПолучитьОписаниеОшибки(),"I" );
		Возврат 0;
	КонецЕсли;
	ODBCRecordSet = СоздатьОбъект( "ODBCRecordSet" );
	ODBCRecordSet.УстБД( ODBCDatabase );
	промДата = MetaDataWork.ПолучитьСтрИзДаты(пДата);
	ТекстЗапроса=Шаблон("select dbo.Get_VDB_Disc([пДеп],[пДопКод],'[промДата]')");
	Если ODBCRecordSet.Открыть( ТекстЗапроса ) = 0 Тогда
		Сообщить( "Ошибка выполнения запроса..", "!" );
		Сообщить( ТекстЗапроса,"I" );
		Возврат 0;
	КонецЕсли;
	Возврат ODBCRecordSet.ПолучитьЗначение(1);
КонецФункции

Функция семПолучитьСкидкуКлиента( Клиент )
	Если ПустоеЗначение( Клиент.ДопКод ) = 0 Тогда
		Возврат семПолучитьСкидкуПЛ( 1, Клиент.ДопКод, РабочаяДата() );
	Иначе
		Возврат Клиент.КлиентСкидка.Получить(РабочаяДата())
	КонецЕсли;
КонецФункции

//_____________________________________________________________________________
Процедура ДобавитьДокВТаблицу(Док,ВремяМин=18)
	Если Док.Выбран()=0 Тогда
		Возврат;
	КонецЕсли;  
	
	Если ТаблДоков.НайтиЗначение(Док,,"Док")=1 Тогда
		Возврат;
	КонецЕсли;
	ТаблДоков.НоваяСтрока();
	ТаблДоков.Док=Док.ТекущийДокумент();
	ТаблДоков.Пик=?(Док.Проведен()=1,2,?(Док.ПометкаУдаления()=1,7,1));
	ТаблДоков.Вид=Док.ПредставлениеВида();
	ТаблДоков.НДок=Док.НомерДок;
	ТаблДоков.ДДок=Док.ДатаДок;
	ТаблДоков.ВремяМин=ВремяМин;
	//ТаблДоков.ВДок=Док.ВремяПродажи;
	ТаблДоков.Сумма=Док.Итог("Сумма");
КонецПроцедуры //ДобавитьДокВТаблицу(Док)
//_____________________________________________________________________________
Процедура ОткрДок()
	Если ТаблДоков.КоличествоСтрок()>0 Тогда
		ОткрытьФорму(ТаблДоков.Док,,0);     
	КонецЕсли;
КонецПроцедуры //ОткрДок

Процедура ПровестиДоки() 
	Перем Часы,Минуты,Секунды;
	
	глНуженСписокТоваров=1;
	глСписокТоваров.УдалитьСтроки();
	
	СписокДоковТ=СоздатьОбъект("ТаблицаЗначений");  
	Док = СоздатьОбъект("Документ");
	ДокТА = СоздатьОбъект("Документ"); 
	
	// Проверка дат чеков
	табл = СоздатьОбъект( "ТаблицаЗначений" );
	ТаблДоков.Выгрузить(табл,,,"ДДок");
	
	Если ПустоеЗначение(табл)=1 Тогда
		Возврат;
	КонецЕсли;
	табл.НоваяКолонка("Сч","Число");
	табл.Заполнить(1,,,"Сч");
	табл.Свернуть("ДДок","Сч");
	табл.Сортировать("-Сч");
	ДатаОтчета = табл.ПолучитьЗначение(1,"ДДок");
	Если табл.КоличествоСтрок() > 1 Тогда
		Польз=СоздатьОбъект("Справочник.Пользователи");
		Польз.ВыбратьЭлементыПоРеквизиту("ПолучатьСообщенияЗагрузкиККМ",1,0,0);
		Блокнот=СоздатьОбъект("Справочник.Блокнот");
		Пока Польз.ПолучитьЭлемент()=1 Цикл
			Если Блокнот.НайтиПоКоду(СокрЛП(Польз.Код),0) = 0 Тогда Продолжить; КонецЕсли;
			Если Блокнот.ЭтоГруппа() = 0 Тогда Продолжить; КонецЕсли;
			Если Блокнот.Выбран()=1 Тогда
				Блокнот.ИспользоватьРодителя(Блокнот.ТекущийЭлемент());
				глСоздатьНовыйОбъект(Блокнот);
				Блокнот.Наименование = "Загрузка из кассы за "+Строка(РабочаяДата()-1);
				Блокнот.__Дата = РабочаяДата()-1;
				Блокнот.Время="08:00:00";
				Блокнот.Автор = Пользователь;
				Если Блокнот.Родитель.Выбран()=0 Тогда Блокнот.УстановитьНовыйКод("Всем"); КонецЕсли;
				Блокнот.Запись=Шаблон( "В Z отчете за [ДатаОтчета] есть документы за другую дату." );
				Блокнот.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТаблДоков.Выгрузить(СписокДоковТ,,,"Док,ВремяМин");
	СписокДоковТ.Свернуть("ВремяМин,Док","");
	//	СписокДоковТ.Сортировать("Док",1);
	
//	СписокДоковТ.ВыбратьСтроки();
//	Пока СписокДоковТ.ПолучитьСтроку()=1 Цикл
//		Если Док.НайтиДокумент(СписокДоковТ.Док)=1 Тогда
//			Попытка          
//				//	Док.УстановитьВремя(22,Лев(Док.ВремяПродажи,2),Сред(Док.ВремяПродажи,4,2));
////				Док.УстановитьВремя(22,18,00);
//				Док.Записать();
//			Исключение
//				Сообщить(ОписаниеОшибки());
//			КонецПопытки;
//		КонецЕсли;
//	КонецЦикла;
	
	СписокДоковТ.Сортировать("ВремяМин,Док",1);
	
		СРИ=Константа.РегистрацияИзменений;
		ПервыйДок=1;	
		глРазрОтрицОстатки=Да; 
		предМин=0;
		СписокДоковТ.ПолучитьСтрокуПоНомеру(СписокДоковТ.КоличествоСтрок());
		ПоследнийДокумент = СписокДоковТ.Док;
		СписокДоковТ.ВыбратьСтроки();
		Пока СписокДоковТ.ПолучитьСтроку()=1 Цикл  
			//ДокТА.НайтиДокумент(СписокДоковТ.Док);
			//ДокТА.ПолучитьВремя(Часы,Минуты,Секунды);
			Минуты=СписокДоковТ.ВремяМин;
			Если МонопольныйРежим()=1 Тогда
				Если предМин<>Минуты Тогда
					УстановитьТАНа(СписокДоковТ.Док); //переносим ТА в монопольном режиме на документы
					предМин=Минуты;
					
	//				Док.ВыбратьДокументы(СписокДоковТ.Док.ДатаДок,ПоследнийДокумент.ДатаДок);
	//				Пока Док.ПолучитьДокумент() = 1 Цикл
	//					Если Док.ПометкаУдаления() = 1 Тогда
	//						Продолжить;
	//					КонецЕсли;       
	//					Док.ПолучитьВремя(Часы,Минуты,Секунды);
	//					Если Док.Проведен() = 0 Тогда
	//						Если (Док.Вид() <> "РасходнаяНакладнаяНал") И (Док.Вид() <> "МарочныйОтчет") Тогда
	//							Продолжить;
	//						КонецЕсли;
	//						Если Часы <> 22 Тогда
	//							Продолжить;
	//						Иначе
	////							Если Минуты <> 18 Тогда
	////								Продолжить;
	////							Иначе
	//								Если Секунды <> 0 Тогда
	//									Продолжить;
	//								Иначе
	//									Попытка 
	//										Если Константа.РегистрацияИзменений=0 Тогда
	//											Константа.РегистрацияИзменений=1;
	//										КонецЕсли;
	//										Если Док.ДатаДок = ДатаОтчета Тогда
	//											Док.Провести();
	//										КонецЕсли;
	//										//Док.Провести();
	//									Исключение 
	//										Сообщить(ОписаниеОшибки());
	//									КонецПопытки							 		
	//								КонецЕсли;
	////							КонецЕсли;
	//						КонецЕсли;
	//					Иначе   
	//						Если (Док.Вид() <> "РасходнаяНакладнаяНал") И (Док.Вид() <> "МарочныйОтчет") Тогда
	//							Если Часы <> 22 Тогда
	//								Продолжить;
	//							Иначе
	////								Если Минуты <> 18 Тогда
	////									Продолжить;
	////								Иначе
	//									Если Секунды <> 0 Тогда
	//										Продолжить;
	//									Иначе
	//										Попытка 
	//										Если Константа.РегистрацияИзменений=0 Тогда
	//											Константа.РегистрацияИзменений=1;
	//										КонецЕсли;											
	//										Если Док.ДатаДок = ДатаОтчета Тогда
	//											Док.Провести();
	//										КонецЕсли;
	//										Исключение 
	//											Сообщить(ОписаниеОшибки());
	//										КонецПопытки							 		
	//									КонецЕсли;
	////								КонецЕсли;
	//							КонецЕсли;
	//						Иначе
	//							Продолжить;
	//						КонецЕсли;	
	//					КонецЕсли;
	//				КонецЦикла;	
	//				Прервать;
				КонецЕсли;
			КонецЕсли;
			Док.НайтиДокумент(СписокДоковТ.Док);
			Если Док.Проведен() = 0 Тогда
				Сообщить("Проводится документ"+СписокДоковТ.НомерСтроки+"/"+СписокДоковТ.КоличествоСтрок()+": "+Док);
				Док.Провести();
			КонецЕсли;

		КонецЦикла; 
		Константа.РегистрацияИзменений=СРИ;
		глРазрОтрицОстатки=Нет;

		Если МонопольныйРежим()=1 Тогда
			Док=СоздатьОбъект("Документ");
			Док.УстановитьФильтр(1,0,0,2,0,0);
			Док.ОбратныйПорядок(1);
			Док.ВыбратьДокументы(ПолучитьДатуТА(),);
			Док.ПолучитьДокумент();
			УстановитьТАПо(Док.ТекущийДокумент()); 
		КонецЕсли;
	
	СписокТоваров=СоздатьОбъект("ТаблицаЗначений");
	
	глСписокТоваров.Выгрузить(СписокТоваров,,,"Товар");
	
	Док=СоздатьОбъект("Документ.РасходнаяНакладнаяНал");
	Док.ВыбратьДокументы(ДатаОтчета,ДатаОтчета);
	Док.ПолучитьДокумент();
	
	глСписокТоваров.ВыбратьСтроки();
	Пока глСписокТоваров.ПолучитьСтроку()=1 Цикл
		глСписокТоваров.Счетчик=1;
	КонецЦикла;
	
	глСписокТоваров.Свернуть("Склад,Блюдо,Товар,","Счетчик,КолБлюд,Количество,Остаток");
	глСписокТоваров.Сортировать("+Склад,Блюдо,Товар");
	
	глНуженСписокТоваров=0;
	Если глСписокТоваров.КоличествоСтрок()>0 Тогда
		Рег=СоздатьОбъект("Регистр.ОстаткиТоваров");
		Рег.ВременныйРасчет();
		Рег.УстановитьЗначениеФильтра("Товар",СписокТоваров,2);
		РассчитатьРегистрыНА(Док.ТекущийДокумент());
		
		Таб2=СоздатьОбъект("Таблица");
		Таб2.ИсходнаяТаблица("СписокНепроведенныхТоваров");
		Таб2.ВывестиСекцию("Шапка");
		
		глСписокТоваров.ВыбратьСтроки();
		глСписокТоваров.Остаток=глСписокТоваров.Остаток/глСписокТоваров.Счетчик;
		СтарСклад=""; 
		СтарБлюдо="";
		Пока глСписокТоваров.ПолучитьСтроку()=1 Цикл
			Если СтарСклад<>глСписокТоваров.Склад Тогда
				Таб2.ВывестиСекцию("Склад");	
				СтарСклад=глСписокТоваров.Склад;
			КонецЕсли;
			
			Если СтарБлюдо<>глСписокТоваров.Блюдо Тогда
				Таб2.ВывестиСекцию("Блюдо");	
				СтарБлюдо=глСписокТоваров.Блюдо;
			КонецЕсли;
			
			ПолныйОст=Рег.СводныйОстаток(глСписокТоваров.Товар,,,"ОстатокТовара");
			Таб2.ВывестиСекцию("Товар");
		КонецЦикла;
		Таб2.ПараметрыСтраницы(1,,,,,,,,,1);
		//		Таб2.Защита(Константа.ФлагЗащитыТаблиц);
		//		Таб2.ТолькоПросмотр(1);
		Таб2.Записать(КаталогИБ()+"\Кассы\"+Формат(ДатаОтчета,"Д ГГГГММДД"));
		//		Таб2.Показать("Список непроведенных товаров","");
	КонецЕсли;
	
КонецПроцедуры	
//***************************************************************
Процедура ЗагрузкаВидаПлатежей()
	
	ТаблицаКарт=СоздатьОбъект("ТаблицаЗначений");
	ТаблицаКарт.НоваяКолонка("Док","Документ.РасходнаяНакладнаяНал");
	ТаблицаКарт.НоваяКолонка("Карта");
	
	ТаблицаПлатежей=СоздатьОбъект("ТаблицаЗначений");
	ТаблицаПлатежей.НоваяКолонка("Док","Документ.РасходнаяНакладнаяНал");
	ТаблицаПлатежей.НоваяКолонка("ТипПлатежа","Число",2);
	ТаблицаПлатежей.НоваяКолонка("СуммаПлатежа","Число",17,2);
	ТаблицаПлатежей.НоваяКолонка("НомерКарты","Число",19,0);
	ТаблицаПлатежей.НоваяКолонка("ВалютаПлатежа","Число",2,0);
	ТаблицаПлатежей.НоваяКолонка("СуммаПлатежаВал","Число",17,2);
	
	спрКл=СоздатьОбъект("Справочник.Контрагенты");
	Для инд_=1 По КолККМ Цикл
		//		КомандаСистемы(ПутьЗагрузки+"\z-report.bat "+строка(т)); 
		
		ТаблицаПлатежей.УдалитьСтроки();
		
		Если ФС.СуществуетФайл(ПутьЗагрузки+"\till"+инд_+"t101.txt")=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Т=СоздатьОбъект("Текст");
		Т.Открыть(ПутьЗагрузки+"\till"+инд_+"t2.txt");
		
		Для А=1 По Т.КоличествоСтрок() Цикл
			//			Состояние("Загрузка данных из текстового файла: "+Цел(А/Т.КоличествоСтрок()*100)+"%...");
			Стр=Т.ПолучитьСтроку(А);
			
			Если Лев(Стр,1)="#" Тогда
				Продолжить; //это комментарий
			КонецЕсли;                       
			Если ПустаяСтрока(Стр)=1 Тогда
				Продолжить;
			КонецЕсли;
			сз=СоздатьОбъект("СписокЗначений");
			Стр=СтрЗаменить(Стр,";",",");
			//			Стр=СтрЗаменить(Стр,"""""","""");
			сз.ИзСтрокиСРазделителями(стр);
			//Сообщить(сз.РазмерСписка());
			//Карта=СокрЛП(сз.ПолучитьЗначение(1));
			НомерЧека=Число(сз.ПолучитьЗначение(8));
			// сем \\
			//докДата	=Дата(Лев( сз.ПолучитьЗначение(4), 10 ));
			докДата = Дата(Лев(Строка(сз.ПолучитьЗначение(4)),2)+"."+Сред(Строка(сз.ПолучитьЗначение(4)),3,2)+"."+Сред(Строка(сз.ПолучитьЗначение(4)),5,4));
			// сем //

			Док = СоздатьОбъект("Документ.РасходнаяНакладнаяНал");
			Док.НайтиПоНомеру(НомерЧека,докДата,);
			Если ТаблДоков.НайтиЗначение(Док.ТекущийДокумент(),,"Док")=0 Тогда
				Продолжить;
			КонецЕсли;
			                                                                 
			Карта = Док.НомерКарты;
			Если ПустоеЗначение(Карта)=0 Тогда
				//Док.НомерКарты=Карта;
				Если Лев( СокрЛП( Карта), 3 ) = "730" Тогда
					пКлиент = Константа.СобственноеФизЛицо;
				ИначеЕсли спрКл.НайтиПоРеквизиту("Карта",Карта,1) = 1 Тогда
					пКлиент = спрКл.ТекущийЭлемент();
				Иначе
					пКлиент = "";
				КонецЕсли;
				Если ПустоеЗначение(пКлиент) = 0 Тогда
					Док.Клиент = пКлиент;
					Док.КлГруппа = пКлиент.КлГруппа;
				КонецЕсли;
				//Если (спрКл.НайтиПоРеквизиту("Карта",Карта,1)=1) И (Док.Проведен()=0) Тогда
				//	Док.Клиент=спрКл.ТекущийЭлемент();
				//	Док.КлГруппа=спрКл.КлГруппа;
				//	Док.Записать();
				//КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Т=СоздатьОбъект("Текст");
		Т.Открыть(ПутьЗагрузки+"\till"+инд_+"t101.txt");
		
		Если Т.КоличествоСтрок()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Состояние("Обработка кассы: "+инд_);
		Для А=1 По Т.КоличествоСтрок() Цикл
			//			Состояние("Загрузка данных из текстового файла: "+Цел(А/Т.КоличествоСтрок()*100)+"%...");
			Стр=Т.ПолучитьСтроку(А);
			Если Лев(Стр,1)="#" Тогда
				Продолжить; //это комментарий
			КонецЕсли;                       
			Если ПустаяСтрока(Стр)=1 Тогда
				Продолжить;
			КонецЕсли;
			сз=СоздатьОбъект("СписокЗначений");
			Стр=СтрЗаменить(Стр,";",",");
			//			Стр=СтрЗаменить(Стр,"""""","""");
			сз.ИзСтрокиСРазделителями(стр);
			//Сообщить(сз.РазмерСписка());
			НомерЧека=Число(сз.ПолучитьЗначение(1));
			ТипПлатежа=Число(сз.ПолучитьЗначение(2));
			СуммаПлатежа=Число(сз.ПолучитьЗначение(3));
			НомерКарты=СокрЛП(сз.ПолучитьЗначение(4));
			ВалютаПлатежа=СокрЛП(сз.ПолучитьЗначение(7));
			
			СуммаПлатежаВалС=СокрЛП(сз.ПолучитьЗначение(8));
			
			Рез=Найти(СуммаПлатежаВалС,".");
			СуммаПлатежаВал=Число(СуммаПлатежаВалС)/100;
			
			//			НомерДок_=Прав(Строка(инд_) + "-" + Строка(НомерЧека),Метаданные.Документ("РасходнаяНакладнаяНал").ДлинаНомера);
			
			НомерДок_=Строка(НомерЧека);                  
			
			Док = СоздатьОбъект("Документ.РасходнаяНакладнаяНал");
			
			Если (СуммаПлатежа<=0) И (ТипПлатежа=1) Тогда
				Продолжить;
			КонецЕсли;
			
			НомСтр = 0;
			Если таблДатЧеков.НайтиЗначение(НомерЧека,НомСтр,"НомерЧека") = 1 Тогда
				_Дата = таблДатЧеков.ПолучитьЗначение(НомСтр,"Дата");
			Иначе
				Сообщить("Не найдена дата документа с номером: "+НомерДок_);
				Продолжить;
			КонецЕсли;
			Если ПустоеЗначение(_Дата) = 1 Тогда
				Сообщить("Не найдена дата документа с номером: "+НомерДок_);
				Продолжить;
			КонецЕсли;
			
			
			Если Док.НайтиПоНомеру(НомерДок_,_Дата,)=1 Тогда
				
				Если ТаблДоков.НайтиЗначение(Док.ТекущийДокумент(),,"Док")=0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Док.Проведен()=0 Тогда
					ТаблицаПлатежей.НоваяСтрока();
					ТаблицаПлатежей.Док=Док.ТекущийДокумент();
					ТаблицаПлатежей.ТипПлатежа=ТипПлатежа;
					ТаблицаПлатежей.СуммаПлатежа=СуммаПлатежа;
					ТаблицаПлатежей.НомерКарты=Число(НомерКарты);
					Если ТипПлатежа=5 Тогда //Наличные
						ТаблицаПлатежей.ВалютаПлатежа=ВалютаПлатежа;
						ТаблицаПлатежей.СуммаПлатежаВал=СуммаПлатежаВал;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Сообщить("Не найден документ с номером: "+НомерДок_);
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаПлатежей.Свернуть("Док,ТипПлатежа,НомерКарты,ВалютаПлатежа","СуммаПлатежа,СуммаПлатежаВал");
		ТаблицаПлатежей.ВыбратьСтроки();
		Пока ТаблицаПлатежей.ПолучитьСтроку()=1 Цикл
			
			Если Док.НайтиДокумент(ТаблицаПлатежей.Док)=0 Тогда
				Сообщить("Не найден документ "+Док);
			КонецЕсли;
			                                                        
			//PR 31.01.08 Begin
			//привязываем номер карты клиента, если есть
			Если (ТаблицаПлатежей.ТипПлатежа=7) Тогда            
				Если (ПустоеЗначение(ТаблицаПлатежей.НомерКарты)=0) И (Док.НомерКарты<>ТаблицаПлатежей.НомерКарты) Тогда
					Док.НомерКарты= ТаблицаПлатежей.НомерКарты;
				КонецЕсли;
			КонецЕсли;   
			//PR 31.01.08 End
			
			Если (ТаблицаПлатежей.ТипПлатежа=3) ИЛИ (ТаблицаПлатежей.ТипПлатежа=4) Тогда
				Док.ВидПлатежа=Перечисление.ВидыПлатежа.Карта;
				Док.ПолученоКарта=ТаблицаПлатежей.СуммаПлатежа;
			ИначеЕсли (ТаблицаПлатежей.ТипПлатежа=2) Тогда
				Док.ВидПлатежа=Перечисление.ВидыПлатежа.ПодарочнаяКарта;
				Если ПустоеЗначение(Док.ПодарочнаяКарта)=0 Тогда
					Док.ПодарочнаяКарта=СокрЛП(Док.ПодарочнаяКарта)+",";
				КонецЕсли;
				Док.ПодарочнаяКарта=СокрЛП(Док.ПодарочнаяКарта)+СокрЛП(ТаблицаПлатежей.НомерКарты);
				Док.ПолученоПодарочнаяКарта=Док.ПолученоПодарочнаяКарта+ТаблицаПлатежей.СуммаПлатежа;
			ИначеЕсли (ТаблицаПлатежей.ТипПлатежа=1) ИЛИ (ТаблицаПлатежей.ТипПлатежа=5) Тогда
				Док.ВидПлатежа=Перечисление.ВидыПлатежа.Наличные;
				
				Если ТаблицаПлатежей.ВалютаПлатежа=0 Тогда
					Док.ВалютаПлатежа=Константа.БазоваяВалюта;
					Док.Получено=ТаблицаПлатежей.СуммаПлатежа;
					Док.СуммаПлатежа=ТаблицаПлатежей.СуммаПлатежа;
				Иначе
					Док.Получено=0;
					Док.ВалютаПлатежа="";
					СпрВал=СоздатьОбъект("Справочник.Валюты");
					Если СпрВал.НайтиПоКоду(ТаблицаПлатежей.ВалютаПлатежа)=1 Тогда
						Док.УстановитьАтрибут("ВалютаПлатежа"+?(ТаблицаПлатежей.ВалютаПлатежа=1,"",ТаблицаПлатежей.ВалютаПлатежа-1),СпрВал.ТекущийЭлемент());
						Док.УстановитьАтрибут("Получено"+?(ТаблицаПлатежей.ВалютаПлатежа=1,"",ТаблицаПлатежей.ВалютаПлатежа-1),ТаблицаПлатежей.СуммаПлатежаВал);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Попытка  
				Если Док.Проведен()=0 Тогда
					//Док.УстановитьВремя(22,Лев(Док.ВремяПродажи,2),Сред(Док.ВремяПродажи,4,2));
					Док.УстановитьВремя(22,18,00);
				КонецЕсли;
				Док.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
			Если Док.Проведен()=0 Тогда
				ДобавитьДокВТаблицу(Док.ТекущийДокумент());
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;    
	
КонецПроцедуры //



//***************************************************************
Процедура ЗагрузитьОтложенныйЧек()
	
	Если СписокОтложенныхЧеков.РазмерСписка()=0 Тогда
		Предупреждение("Список номеров чеков - пустой!");
		Возврат;
	КонецЕсли;
	
	Док=СоздатьОбъект("Документ.Списание");
	
	Если Док.Выбран()=0 Тогда
		глСоздатьНовыйОбъект(Док);
		ЗаполнитьШапку(Док);
		Док.IDD=ПолучитьУникальныйIDD();
		//		Док.НомерДок=НомерЧекаСписания;
		Док.КатегорияСписания=Перечисление.КатегорииСписания.Категория1;
		Док.СтавкаНДС=Перечисление.ЗначенияНДС.безНДС;
		Док.КатегорияЦены=Константа.РозничнаяКатегорияЦены;
	КонецЕсли;                
	
	ТТовары=СоздатьОбъект("ТаблицаЗначений");
	ТТовары.НоваяКолонка("Товар","Справочник.Товары");
	ТТовары.НоваяКолонка("Всего","Число",17,2);
	ТТовары.НоваяКолонка("Скидка","Число",17,3);
	ТТовары.НоваяКолонка("Количество","Число",17,3);
	
	Для т1=1 По СписокОтложенныхЧеков.РазмерСписка() Цикл
		
		НомерЧекаСписания=СокрЛП(СписокОтложенныхЧеков.ПолучитьЗначение(т1));
		
		Чек=СоздатьОбъект("Текст");
		Чек.ДобавитьСтроку(НомерЧекаСписания);
		Чек.Записать(ПутьЗагрузки+"\check.txt");
		ФС.УстТекКаталог(ПутьЗагрузки);
		Пока ФС.СуществуетФайл("check.txt")=1 Цикл
		КонецЦикла;
		
		СписокДок=СоздатьОбъект("СписокЗначений");
		Состояние("Загрузка отложенного чека из кассы");
		
		Если ФС.СуществуетФайл(ПутьЗагрузки+"\"+НомерЧекаСписания+".txt")=0 Тогда
			Предупреждение("Не найден отложенный чек с номером "+НомерЧекаСписания);
			Возврат;
		КонецЕсли;  
		
		Чек=0;
		Т=СоздатьОбъект("Текст");
		Т.Открыть(ПутьЗагрузки+"\"+НомерЧекаСписания+".txt");
		
		Если ПустоеЗначение(Док.Основание)=0 Тогда
			Док.Основание=СокрЛП(Док.Основание)+"/";
		КонецЕсли;
		Док.Основание=СокрЛП(Док.Основание)+СокрЛП(НомерЧекаСписания);
		
		Если СписокОтложенныхЧеков.РазмерСписка()=1 Тогда
			Док.НайтиПоНомеру(НомерЧекаСписания);
			
			Если Док.Выбран()=0 Тогда
				глСоздатьНовыйОбъект(Док);    
				ЗаполнитьШапку(Док);
				Док.IDD=ПолучитьУникальныйIDD();
				Док.НомерДок=НомерЧекаСписания;
				Док.КатегорияСписания=Перечисление.КатегорииСписания.Категория1;
				Док.СтавкаНДС=Перечисление.ЗначенияНДС.безНДС;
				Док.КатегорияЦены=Константа.РозничнаяКатегорияЦены;
			Иначе     
				Если Док.Проведен()=1 Тогда
					Предупреждение("Документ с таким номером уже есть в системе и проведен!");
					Возврат;
				КонецЕсли;
				Док.УдалитьСтроки();
			КонецЕсли;                
			
		КонецЕсли;
		
		//	Док.IDD=ПолучитьУникальныйIDD();
		//	Док.ДатаДок=ТаблДок._Дата;
		//	Док.НомерДок=НомерДок_; 
		
		Для А=1 По Т.КоличествоСтрок() Цикл
			//Состояние("Загрузка данных из текстового файла: "+Цел(А/Т.КоличествоСтрок()*100)+"%...");
			Стр=Т.ПолучитьСтроку(А);
			Если Лев(Стр,1)="#" Тогда
				Продолжить; //это комментарий
			КонецЕсли;
			Если ПустаяСтрока(Стр)=1 Тогда
				Продолжить;
			КонецЕсли;
			сз=СоздатьОбъект("СписокЗначений");
			Стр=СтрЗаменить(Стр,";",""",""");
			Стр=СтрЗаменить(Стр,"""""","""");
			сз.ИзСтрокиСРазделителями(стр);
			//Сообщить(сз.РазмерСписка());
			Если сз.РазмерСписка()<>17 Тогда
				Сообщить("Определено нестандартное количество параметров в строке № "+А);
				СписокСообщений=СписокСообщений+РазделительСтрок+"Определено нестандартное количество параметров в строке № "+А;
				Продолжить;
			КонецЕсли;         
			//зн="";
			//сз.ВыбратьЗначение(зн);
			
			ДатаВр		=СокрЛП(сз.ПолучитьЗначение(2));
			Док.ДатаДок	=Дата(Лев(ДатаВр,10));		
			
			//			Док.НоваяСтрока();
			ТовКод	=Число(сз.ПолучитьЗначение(1));
			Карта	=СокрЛП(сз.ПолучитьЗначение(3));
			НомерКассы	=Число(сз.ПолучитьЗначение(14));
			
			спрКассиры = СоздатьОбъект("Справочник.Сотрудники");
			спрКл =СоздатьОбъект("Справочник.Контрагенты");
			спрТов=СоздатьОбъект("Справочник.Номенклатура");
			СпрКассы=СоздатьОбъект("Справочник.Кассы");
			//спрКассы.НайтиПоНаименованию("KRASTA",0,1);
			//Группа = спрКассы.ТекущийЭлемент();
			//спрКассы.ИспользоватьРодителя( Группа );

			Если итКассы.НайтиСтроку("иНомерОтдела",НомерКассы,,1)>0 Тогда
//			Если СпрКассы.НайтиПоРеквизиту("НомерОтдела",НомерКассы,0)=1 Тогда
//				Док.Склад=?(СпрКассы.Склад.Выбран()=1,СпрКассы.Склад,Константа.РозничныйСклад);
				Док.Склад=?(итКассы.Склад.Выбран()=1,итКассы.Склад,Константа.РозничныйСклад);	
			Иначе    
				Сообщить("Не обнаружена касса с номером отдела "+НомерКассы);
				Док.Склад=Константа.РозничныйСклад;	
			КонецЕсли;

			Док.Агент=Док.Склад.Агент;

			//прописываем в отдельный реквизит продавца
			//Если спрКассиры.НайтиПоРеквизиту("КодPOS",Число(сз.ПолучитьЗначение(15)),1)=1 Тогда 
			//	Док.Продавец=спрКассиры.ТекущийЭлемент();
			//КонецЕсли;

			
			Если ПустаяСтрока( СокрЛП( Карта) ) = 0 Тогда
				//Док.НомерКарты=Карта;
				Если Лев( СокрЛП( Карта ), 3 ) = "730" Тогда
					пКлиент = Константа.СобственноеФизЛицо;
				ИначеЕсли спрКл.НайтиПоРеквизиту("Карта",Карта,1) = 1 Тогда
					пКлиент = спрКл.ТекущийЭлемент();
				Иначе
					пКлиент = "";
				КонецЕсли;
				Если ПустоеЗначение(пКлиент) = 0 Тогда
					Док.Клиент = пКлиент;
					Док.СкидкаНакл = семПолучитьСкидкуКлиента( пКлиент );
				КонецЕсли;
				//Если спрКл.НайтиПоРеквизиту("Карта",Карта,1)=0 Тогда
				//Иначе
				//	Док.Клиент=спрКл.ТекущийЭлемент();
				//	//Док.СкидкаНакл=спрКл.КлиентСкидка.Получить(Док.ДатаДок);
				//	Док.СкидкаНакл = семПолучитьСкидкуКлиента( спрКл.ТекущийЭлемент() )
				//КонецЕсли;
			КонецЕсли;
			
			Если спрТов.НайтиПоРеквизиту("ШтрихКод",ТовКод,1)=1 Тогда
				Найден=1;  
			ИначеЕсли спрТов.НайтиПоРеквизиту("КодДляРозницы",ТовКод,1)=1 Тогда
				Найден=1;
			Иначе
				Сообщить("Не найден товар с кодом "+ТовКод);
				Продолжить;
			КонецЕсли;
			
			ТТовары.НоваяСтрока();
			ТТовары.Товар=спрТов.ТекущийЭлемент();
			ТТовары.Всего=Число(сз.ПолучитьЗначение(7)); //Всего
			ТТовары.Скидка=Число(сз.ПолучитьЗначение(6)); //Всего
			ТТовары.Количество=Число(сз.ПолучитьЗначение(8));
			
		КонецЦикла; 
		
		ФС.УдалитьФайл(ПутьЗагрузки+"\"+НомерЧекаСписания+".txt");
	КонецЦикла;
	
	ТТовары.Свернуть("Товар","Всего,Скидка,Количество");
	
	ТТовары.ВыбратьСтроки();
	Пока ТТовары.ПолучитьСтроку()=1 Цикл         
		Если ТТовары.Количество<=0 Тогда
			Продолжить;
		КонецЕсли;
		Док.НоваяСтрока();
		Док.Товар		=ТТовары.Товар;
		Док.ТовКод		=Док.Товар.Код;
		Док.Всего		=ТТовары.Всего;
		Док.Количество	=ТТовары.Количество;
		Док.Цена		=Док.Всего/Док.Количество;
		Док.Единица	=глБазоваяЕдиницаИзмерения(Док.Товар);
		Док.Коэффициент=1;

		ПроцНДС=ПроцентНДС(Док.Товар.СтавкаНДС);
		Док.НДС			=Окр(Док.Всего*(ПроцНДС/(100+ПроцНДС)),2);
		Док.Сумма		=Док.Всего-Док.НДС;
		Док.Цена		=Абс_(Док.Сумма/?(Док.Количество=0,1,Док.Количество));
		Док.ЦенаСНДС	=Абс_(Док.Всего/?(Док.Количество=0,1,Док.Количество));
		НДСскидки = ТТовары.Скидка*(ПроцНДС/(100+ПроцНДС));
		Док.Скидка = ТТовары.Скидка - НДСскидки;
		
		ЦенаСкидка=ЦенаТовараПоКатегории(Док,Константа.РозничнаяКатегорияЦены,1);
		Если СокрЛП(Карта)="1" Тогда
			Док.ВидСкидки = Перечисление.ВидСкидки.АкционныйТовар;
		Иначе     
			Если Док.Скидка<>0 Тогда
				Док.ВидСкидки = Перечисление.ВидСкидки.Документ;;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
	//    Док.Форма.Обновить(); 
	ПриИзмененииСкидкиДокумента(Док,1);
	Док.Записать();       
	Если Док.ДатаДок<ПолучитьДатуТА() Тогда
		Док.УстановитьВремя(22,0,0);       
	Иначе
		Док.АвтоВремяПослеТА();       
	КонецЕсли;
	Док.Записать();
	ОткрытьФорму(Док.ТекущийДокумент());
	
КонецПроцедуры //

//***************************************************************
Процедура ЗагрузкаДанныхСтар()
	таблДатЧеков.УдалитьСтроки();
	
	СписокДок=СоздатьОбъект("СписокЗначений");
	СписокСообщений="";
	нстр=0;
	Для инд_=1 по КолККМ Цикл
		//		КомандаСистемы(ПутьЗагрузки+"\z-report.bat "+строка(т)); 
		Состояние("Загрузка документов из кассы: "+инд_);
		
		таблКарт=СоздатьОбъект("ТаблицаЗначений");
		таблКарт.НоваяКолонка("Карта");
		таблКарт.НоваяКолонка("НомерЧека");
		Если ФС.СуществуетФайл(ПутьЗагрузки+"\till"+инд_+"t2.txt") = 1 Тогда
			Т=СоздатьОбъект("Текст");
			Т.Открыть(ПутьЗагрузки+"\till"+инд_+"t2.txt");
			Для А=1 По Т.КоличествоСтрок() Цикл
				Стр=Т.ПолучитьСтроку(А);
				Если Лев(Стр,1)="#" Тогда Продолжить; КонецЕсли; //это комментарий
				Если ПустаяСтрока(Стр)=1 Тогда Продолжить; КонецЕсли;
				сз=СоздатьОбъект("СписокЗначений");
				Стр=СтрЗаменить(Стр,";",""",""");
				Стр=СтрЗаменить(Стр,"""""","""");
				сз.ИзСтрокиСРазделителями(стр);
				таблКарт.НоваяСтрока();
				таблКарт.Карта = СокрЛП(сз.ПолучитьЗначение(1)); 
				таблКарт.НомерЧека = Число(сз.ПолучитьЗначение(8));
			КонецЦикла; 
		КонецЕсли;   
		//таблКарт.ВыбратьСтроку();

		Если ФС.СуществуетФайл(ПутьЗагрузки+"\till"+инд_+"t3.txt")=0 Тогда
			Продолжить;
		КонецЕсли;   
		
		НомерЗагружаемойКассы = КолККМ;
		
		Т=СоздатьОбъект("Текст");
		Т.Открыть(ПутьЗагрузки+"\till"+инд_+"t3.txt");
		
		Если Т.КоличествоСтрок()=0 Тогда
			СписокСообщений=СписокСообщений+РазделительСтрок+"В Кассе "+инд_+" не было никаких чеков. Проверьте!";
			Продолжить;
		КонецЕсли;
		
		Для А=1 По Т.КоличествоСтрок() Цикл
			//Состояние("Загрузка данных из текстового файла: "+Цел(А/Т.КоличествоСтрок()*100)+"%...");
			Стр=Т.ПолучитьСтроку(А);
			Если Лев(Стр,1)="#" Тогда
				Продолжить; //это комментарий
			КонецЕсли;
			Если ПустаяСтрока(Стр)=1 Тогда
				Продолжить;
			КонецЕсли;
			сз=СоздатьОбъект("СписокЗначений");
			Стр=СтрЗаменить(Стр,";",""",""");
			Стр=СтрЗаменить(Стр,"""""","""");
			сз.ИзСтрокиСРазделителями(стр);
			//Сообщить(сз.РазмерСписка());
			Если сз.РазмерСписка()<>17 Тогда
				Сообщить("Определено нестандартное количество параметров в строке № "+А);
				СписокСообщений=СписокСообщений+РазделительСтрок+"Определено нестандартное количество параметров в строке № "+А;
				Продолжить;
			КонецЕсли;         
			//зн="";
			//сз.ВыбратьЗначение(зн);
			ТаблДок.НоваяСтрока();
			ТаблДок.ШтрихКод	=Число(сз.ПолучитьЗначение(1));
			//ТаблДок.Карта		=СокрЛП(сз.ПолучитьЗначение(3)); 
			НомСтр = 0;
			Если таблКарт.НайтиЗначение(Число(сз.ПолучитьЗначение(16)),НомСтр,"НомерЧека") = 1 Тогда
				ТаблДок.Карта =таблКарт.ПолучитьЗначение(НомСтр,"Карта"); 
			Иначе
				ТаблДок.Карта = 0; 
			КонецЕсли;
			ДатаВр				=СокрЛП(сз.ПолучитьЗначение(2));
			_Дата				=Дата(Лев(ДатаВр,10));
			_Время				=Прав(ДатаВр,5);
			ТаблДок._Дата  		=_Дата;
			ТаблДок.Время		=_Время;
			ТаблДок.Цена		=Число(сз.ПолучитьЗначение(4));
			ТаблДок.Скидка		=Абс_(Число(сз.ПолучитьЗначение(6)));
			ТаблДок.Всего		=Число(сз.ПолучитьЗначение(7));
			ТаблДок.Количество	=Число(сз.ПолучитьЗначение(8));
			ТаблДок.СтавкаНДС	=СокрЛП(сз.ПолучитьЗначение(10));
			ТаблДок.НомерКассы	=Число(сз.ПолучитьЗначение(14));
			ТаблДок.НомерКассира=Число(сз.ПолучитьЗначение(15));
			ТаблДок.НомерЧека	=Число(сз.ПолучитьЗначение(16));
			
			таблДатЧеков.НоваяСтрока();
			таблДатЧеков.НомерЧека	=Число(сз.ПолучитьЗначение(16));
			таблДатЧеков.Дата = Дата(Лев(сз.ПолучитьЗначение(2),10));
		КонецЦикла; 
		//ТаблДок.ВыбратьСтроку();
		// можно формировать документы
		
		ТаблДок.Свернуть("ШтрихКод,карта,_Дата,Время,СтавкаНДС,НомерЧека,НомерКассира,НомерКассы","Цена,Скидка,Всего,Количество");
		
		ТаблДок.Сортировать("НомерЧека");
		
		
		спрКассиры=СоздатьОбъект("Справочник.Сотрудники");
		спрКл=СоздатьОбъект("Справочник.Контрагенты");
		спрТов=СоздатьОбъект("Справочник.Номенклатура");
		//спрКассы=СоздатьОбъект("Справочник.Кассы");
		//спрКассы = СоздатьОбъект("Справочник.Кассы");
		//спрКассы.НайтиПоНаименованию("KRASTA",0,1);
		//Группа = спрКассы.ТекущийЭлемент();
		//спрКассы.ИспользоватьРодителя( Группа );
		
		Док = СоздатьОбъект("Документ.РасходнаяНакладнаяНал");
		стар_НомерЧека="";
		былДок=0;
		ТаблДок.ВыбратьСтроки();
		Пока ТаблДок.ПолучитьСтроку()=1 Цикл
			
			Если ТаблДок.Количество=0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если стар_НомерЧека<>ТаблДок.НомерЧека Тогда
				Если былДок=1 Тогда
					Попытка           
						Если Док.Проведен()=0 Тогда
							//Док.УстановитьВремя(22,Лев(Док.ВремяПродажи,2),Сред(Док.ВремяПродажи,4,2));
							Док.УстановитьВремя(22,НомерЗагружаемойКассы,00);
						КонецЕсли;
						Док.Записать();
					Исключение
						глУстановитьНовыйНомер(Док,"Z-");
						Док.Записать();
					КонецПопытки;     
					ДобавитьДокВТаблицу(Док);
					БылДок=0;
					Попытка
						//						Док.Провести();
					Исключение
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;
				
				//				НомерДок_Стар=Прав(Строка(ТаблДок.НомерКассы) + "-" + Строка(ТаблДок.НомерЧека),Метаданные.Документ("РасходнаяНакладнаяНал").ДлинаНомера);				
				НомерДок_=Строка(ТаблДок.НомерЧека);                  
				
				Док = СоздатьОбъект("Документ.РасходнаяНакладнаяНал");
				Док.НайтиПоНомеру(НомерДок_,ТаблДок._Дата);
				
				Если Док.Выбран()=0 Тогда
					глСоздатьНовыйОбъект(Док);            
					Док.БН=Да;
					Док.IDD=ПолучитьУникальныйIDD();
					Док.ДатаДок=ТаблДок._Дата;
					Док.НомерДок=НомерДок_; 
				Иначе     
					Если Док.Проведен()=1 Тогда
						Продолжить;
					КонецЕсли;
					Док.УдалитьСтроки();					
				КонецЕсли;                
				
				//Прописываем ставку НДС последнего товара в документа, думая что все ставки одинаковые в чеке
								
//				СтавкаНДС=ТаблДок.СтавкаНДС;
				
				Док.СтавкаНДС=глВернутьСтавкуНДС_POS(ТаблДок.СтавкаНДС,"СтавкаНДС",ТаблДок._Дата);
				Док.СтавкаНДС_Т=Док.СтавкаНДС;
				
				//Если (Док.ДатаДок>='01.01.09') И (Док.ДатаДок<'01.01.11') Тогда
				//	Если СтавкаНДС="A" Тогда
				//		Док.СтавкаНДС=Перечисление.ЗначенияНДС.безНДС;
				//	ИначеЕсли СтавкаНДС="C" Тогда
				//		Док.СтавкаНДС=Перечисление.ЗначенияНДС.ЛьготнаяСтавкаНДС;
				//	Иначе             
				//		Док.СтавкаНДС=Константа.ОсновнаяСтавкаНДС;
				//	КонецЕсли;
				//Иначе
				//	Если СтавкаНДС="A" Тогда
				//		Док.СтавкаНДС=Перечисление.ЗначенияНДС.безНДС;
				//	ИначеЕсли СтавкаНДС="C" Тогда
				//		Док.СтавкаНДС=Перечисление.ЗначенияНДС.НДС5;
				//	Иначе             
				//		Док.СтавкаНДС=Перечисление.ЗначенияНДС.ОсновнаяСтавкаНДС;
				//	КонецЕсли;
				//КонецЕсли;
				
				
				Док.ВидПлатежа=Перечисление.ВидыПлатежа.Наличные;
				Док.ВалютаПлатежа=Константа.БазоваяВалюта;
				Док.Получено=0;
				Док.ПолученоКарта=0;
				Док.ПолученоПодарочнаяКарта=0;
				Док.ПодарочнаяКарта="";
				Док.СуммаПлатежа=0;
				
				стар_НомерЧека=ТаблДок.НомерЧека;
				
				Док.НомерДок=НомерДок_;
				
				Док.ВремяПродажи=ТаблДок.Время;
				
				Если ПустаяСтрока( СокрЛП( ТаблДок.Карта ) ) = 1 Тогда
					пКлиент = Константа.ЧастноеЛицо;
				Иначе
					Док.НомерКарты=ТаблДок.Карта;
					Если Лев( СокрЛП( ТаблДок.Карта ), 3 ) = "730" Тогда
						пКлиент = Константа.СобственноеФизЛицо;
					ИначеЕсли спрКл.НайтиПоРеквизиту("Карта", ТаблДок.Карта, 1 ) = 1 Тогда
						пКлиент=спрКл.ТекущийЭлемент();
					Иначе
						пКлиент = Константа.ЧастноеЛицо;
					КонецЕсли;
				КонецЕсли;
				Если ПустоеЗначение( пКлиент ) = 0 Тогда
					Док.Клиент=пКлиент;
					Док.КлГруппа=пКлиент.КлГруппа;
				КонецЕсли;
				
				Док.Фирма=Константа.ОсновнаяФирма;
				Если итКассы.НайтиСтроку("иНомерОтдела",ТаблДок.НомерКассы,,1)>0 Тогда				
//				Если СпрКассы.НайтиПоРеквизиту("НомерОтдела",ТаблДок.НомерКассы,0)=1 Тогда
					Док.ККМ=итКассы.Ссылка;
//					Док.Склад=?(СпрКассы.Склад.Выбран()=1,СпрКассы.Склад,Константа.РозничныйСклад);
					Док.Склад=?(итКассы.Склад.Выбран()=1,итКассы.Склад,Константа.РозничныйСклад);
				Иначе    
					Сообщить("Не обнаружена касса с номером отдела "+ТаблДок.НомерКассы);
					СписокСообщений=СписокСообщений+РазделительСтрок+"Не обнаружена касса с номером отдела "+ТаблДок.НомерКассы;
					Док.Склад=Константа.РозничныйСклад;	
				КонецЕсли;
				              
				//PR 31.08.07 Begin
				Если ПустоеЗначение(Док.ККМ.Агент)=0 Тогда
					Док.Агент=Док.ККМ.Агент;
				ИначеЕсли спрКассиры.НайтиПоРеквизиту("КодPOS",ТаблДок.НомерКассира,1)=1 Тогда //если по нелепой случайности не заполнено поле агент в кассах 
					//				    Док.Продавец=спрКассиры.ТекущийЭлемент();
					Док.Агент=спрКассиры.ТекущийЭлемент();
				КонецЕсли;      
				//PR 31.08.07 End
				//PR 14.07.08 Begin
				//прописываем в отдельный реквизит продавца
				Если спрКассиры.НайтиПоРеквизиту("КодPOS",ТаблДок.НомерКассира,1)=1 Тогда 
					Док.Продавец=спрКассиры.ТекущийЭлемент();
				КонецЕсли;
				
				//PR 14.07.08 End
				
				
				//				Док.СтавкаНДС=Константа.ОсновнаяСтавкаНДС;
				Док.Валюта=Рубли;
				Док.Дата_Курса=Док.ДатаДок;
				Док.Курс=КурсДляВалюты(Рубли,Док.ДатаДок);
				Док.ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа;
				Док.КатегорияЦены=Константа.РозничнаяКатегорияЦены;
			КонецЕсли;
			
			Найден=0;
			
			Если спрТов.НайтиПоРеквизиту("ШтрихКод",ТаблДок.ШтрихКод,1)=1 Тогда
				Найден=1;  
			ИначеЕсли спрТов.НайтиПоРеквизиту("КодДляРозницы",ТаблДок.ШтрихКод,1)=1 Тогда
				Найден=1;
			Иначе
				Сообщить("Не найден товар со штрих-кодом "+ТаблДок.ШтрихКод+" для кассы Nr. "+инд_+" ("+Док.НомерДок+")");
				СписокСообщений=СписокСообщений+РазделительСтрок+"Не найден товар со штрих-кодом "+ТаблДок.ШтрихКод+" для кассы Nr. "+инд_+" ("+Док.НомерДок+")";
				былДок=1;
				Продолжить;
			КонецЕсли;
			
			Если Найден=0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДатаОтчета=Док.ДатаДок;
			Если Найден=1 Тогда
				былДок=1;
				Док.НоваяСтрока();
				Док.Товар=спрТов.ТекущийЭлемент();
				Док.ТовКод=СпрТов.Код;
				//Если ПустоеЗначение(Док.Товар.ОтделКассы)=0 Тогда
				//	Док.Склад=Док.Товар.ОтделКассы;
				//КонецЕсли;
			КонецЕсли;
			
			Док.Количество=ТаблДок.Количество;
			Док.Единица	=глБазоваяЕдиницаИзмерения(Док.Товар);
			Док.Коэффициент=1;
			Док.РознЦена=ЦенаТовараПоКатегории(Док,Константа.РозничнаяКатегорияЦены,1);
			//			Док.РознЦена=ТаблДок.Цена*(1-ПроцентНДС(Док.СтавкаНДС)/(100+ПроцентНДС(Док.СтавкаНДС)));
			Док.Всего=ТаблДок.Всего;
			
			ПроцНДС=ПроцентНДС(Док.Товар.СтавкаНДС);
			Док.НДС=ТаблДок.Всего*(ПроцНДС/(100+ПроцНДС));
			Док.Сумма=Док.Всего-Док.НДС;
			Док.Цена=Абс_(Док.Сумма/?(Док.Количество=0,1,Док.Количество));
			Док.ЦенаСНДС=Абс_(Док.Всего/?(Док.Количество=0,1,Док.Количество));
			НДСскидки = ТаблДок.Скидка*(ПроцНДС/(100+ПроцНДС));
			Док.Скидка=ТаблДок.Скидка-НДСскидки;
			ЦенаСкидка=Док.РознЦена;
			
			Если СокрЛП(ТаблДок.Карта)="1" Тогда
				Док.ВидСкидки = Перечисление.ВидСкидки.АкционныйТовар;
			Иначе
				Док.ВидСкидки = ЦенаСоСкидкой(Док,ЦенаСкидка);
			КонецЕсли;
			
			//			Док.Скидка = Окр(Док.Сумма,2,1)-Док.Цена*Док.Количество*Док.Коэффициент;
		КонецЦикла;
		
		Если былДок=1 Тогда
			
			Док.АвтоВремяОтключить();
			Попытка
				Если Док.Проведен()=0 Тогда
					//Док.УстановитьВремя(22,Лев(Док.ВремяПродажи,2),Сред(Док.ВремяПродажи,4,2)); 
					Док.УстановитьВремя(22,18,00);
				КонецЕсли;
				Док.Записать();
			Исключение
				глУстановитьНовыйНомер(Док,"Z-");
				Док.Записать();
			КонецПопытки;
			ДобавитьДокВТаблицу(Док);
		КонецЕсли;
		
	КонецЦикла; //Цикл по POSам 
	
	Польз=СоздатьОбъект("Справочник.Пользователи");
	Польз.ВыбратьЭлементыПоРеквизиту("ПолучатьСообщенияЗагрузкиККМ",1,0,0);
	Блокнот=СоздатьОбъект("Справочник.Блокнот");
	
	Пока Польз.ПолучитьЭлемент()=1 Цикл
		//Блокнот.НайтиПоКоду(СокрЛП(Польз.Код),0);
		Если Блокнот.НайтиПоКоду(СокрЛП(Польз.Код),0) = 0 Тогда Продолжить; КонецЕсли;
		Если Блокнот.ЭтоГруппа() = 0 Тогда Продолжить; КонецЕсли;
		
		Если Блокнот.Выбран()=1 Тогда
			Блокнот.ИспользоватьРодителя(Блокнот.ТекущийЭлемент());
			глСоздатьНовыйОбъект(Блокнот);
			Блокнот.Наименование = "Загрузка из кассы за "+Строка(РабочаяДата()-1);
			Блокнот.__Дата = РабочаяДата()-1;
			Блокнот.Время="08:00:00";
			Блокнот.Автор = Пользователь;
			Если Блокнот.Родитель.Выбран()=0 Тогда
				Блокнот.УстановитьНовыйКод("Всем");
			КонецЕсли;
			
			Блокнот.Запись=СписокСообщений;
			Блокнот.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагрузкаВидаПлатежей();
	
КонецПроцедуры //ЗагрузкаДанных

//***************************************************************
//новая загрузка с новых кассовых систем RTPO
Процедура ЗагрузкаДанныхНов(Тип=0)

	Знак=1;
	Если Тип<0 Тогда
		Знак=-1;
	КонецЕсли;
	
	СписокДок=СоздатьОбъект("СписокЗначений");
	СписокСообщений="";
	нстр=0;
		
	Запрос=СоздатьОбъект( "ODBCRecordSet" );
	ТекстЗапроса="SELECT TenderPOS.z_report ДатаПродажи
	|					,CONVERT(VARCHAR,TenderPOS.timestamp,108) as ВремяПродажи
	|					,id_line НомерСтроки
	|					,COALESCE(POS_doc_times.time_minutes,55) ВремяДокМин1С
	|					,CASE WHEN :ДатаНач<'20110317' THEN fiscal_no ELSE TenderPOS.ID END НомерЧека
	|					,POS_Location.id_location МестоТорговли
	|					,id_market НомерКассы
	|					,TenderPOS.id_global КодКассы
	|					,Кассы.ID [Касса $Справочник.Кассы]
	|					,$Кассы.Агент [Агент $Справочник.Сотрудники]
	|					,$Кассы.Склад [Склад $Справочник.МестаХранения]
	|					,(SELECT TOP 1 ID COLLATE Latvian_CI_AS as ID FROM $Справочник.Сотрудники Спр WHERE $Спр.ПерсональныйКод COLLATE Latvian_CI_AS = operator_pk) [Продавец $Справочник.Сотрудники]
	|					,customer_card Карта
	|					,CASE WHEN customer_type=2 THEN :ФизЛицо 
	|						  WHEN customer_type=3 THEN :ФизЛицо2 
	|						  WHEN customer_type=4 THEN customer_id
	|						  WHEN customer_type=5 THEN $ПустойИД
	|					      ELSE (SELECT TOP 1 ID COLLATE Latvian_CI_AS as ID FROM $Справочник.Контрагенты СпрК WHERE $СпрК.ДопКод =customer_id) 
	|					 END [Клиент $Справочник.Контрагенты]
	|					,TenderLinesPOS.id_item [Товар $Справочник.Номенклатура]
	|					,price_type [КатегорияЦены $Справочник.КатегорииЦен]
	|					,price_cat ЦенаПоКатегории
	|					,vat_type [СтавкаНДС $Перечисление.ЗначенияНДС]
	|					,price_line ЦенаБезНДС
	|					,quant Количество
	|					,discount_line/(1+vat_rate/100) СкидкаБезНДС
	|					,amount_line Всего
	|					,amount_line*vat_rate/(100+vat_rate) НДС
	|			  FROM TRADE1.RTPOS_CA.dbo.Tender TenderPOS
	|			  INNER JOIN $Справочник.Кассы Кассы ON Кассы.CODE=TenderPOS.id_global AND Кассы.ISFOLDER=2
	|			  INNER JOIN TRADE1.RTPOS_CA.dbo.Tender_lines TenderLinesPOS ON TenderLinesPOS.id_tender=TenderPOS.id
	|			  INNER JOIN TRADE1.RTPOS_CA.dbo.POS_Location POS_Location ON POS_Location.id_global=TenderPOS.id_global
	|			  LEFT JOIN TRADE1.RTPOS_CA.dbo.POS_doc_times POS_doc_times ON POS_doc_times.id_location=POS_Location.id_location AND POS_doc_times.id_type = :ТипПродажи
	|			  WHERE z_report IS NOT NULL AND type =:ТипПродажи -- только обычные продажи
	|					AND deleted = 0 --только не удаленные
	|					AND TenderPOS.z_report BETWEEN :ДатаНач AND DATEADD(day,1,:ДатаНач)
	|			  ORDER BY POS_Location.id_location, НомерКассы, type, TenderPOS.timestamp
	|";
	
	
	Запрос.УстановитьТекстовыйПараметр("ТипПродажи",Тип);
	Запрос.УстановитьТекстовыйПараметр("ФизЛицо",Константа.СобственноеФизЛицо);
	Запрос.УстановитьТекстовыйПараметр("ФизЛицо2",Константа.СобственноеФизЛицо2);
	Запрос.УстановитьТекстовыйПараметр("ДатаНач",выбДата);

	итКассы=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,итКассы);
	итКассы.Группировать("НомерКассы : НомерКассы; НомерЧека : НомерЧека; НомерСтроки : НомерСтроки","Количество,СкидкаБезНДС,Всего,НДС");
	
	ТекстЗапросаОплаты="SELECT ДатаПродажи
	|						   , НомерЧека
	|						   , НомерКассы
	|						   , КодКассы
	|						   , Касса [Касса $Справочник.Кассы]
	|						   , ТипПлатежа
	|						   , Валюта [Валюта $Справочник.Валюты]
	|						   , СуммаПлатежа
	|						   , СуммаПлатежаВал
	|					FROM (
	|						SELECT TenderPOS.z_report ДатаПродажи
	|							,CASE WHEN :ДатаНач<'20110317' THEN TenderPOS.fiscal_no ELSE TenderPOS.ID END НомерЧека
	|							,id_market НомерКассы
	|							,id_global КодКассы
	|							,Кассы.ID Касса
	|							,TenderPaymentsPOS.ID ТипПлатежа
	|						    ,СпрВ.ID Валюта
	|							,SUM(amount) СуммаПлатежа
	|							,SUM(amount_curr) СуммаПлатежаВал
	|					  	FROM TRADE1.RTPOS_CA.dbo.Tender TenderPOS
	|					  	INNER JOIN TRADE1.RTPOS_CA.dbo.Tender_payments TenderPaymentsPOS ON TenderPaymentsPOS.id_tender=TenderPOS.id
	|					  	INNER JOIN $Справочник.Кассы Кассы ON Кассы.CODE COLLATE Latvian_CI_AS =TenderPOS.id_global AND Кассы.ISFOLDER=2
	|					  	LEFT JOIN $Справочник.Валюты СпрВ ON TenderPaymentsPOS.ID = СпрВ.DESCR COLLATE Latvian_CI_AS
	|					  	WHERE z_report IS NOT NULL AND type =:ТипПродажи -- только обычные продажи 
	|								AND TenderPOS.z_report BETWEEN :ДатаНач AND DATEADD(day,1,:ДатаНач)
	|					  	GROUP BY TenderPOS.z_report
	|								, CASE WHEN :ДатаНач<'20110317' THEN TenderPOS.fiscal_no ELSE TenderPOS.ID END
	|								, id_market
	|								, id_global
	|								, Кассы.ID
	|								, TenderPaymentsPOS.ID
	|								, СпрВ.ID
	|						 ) ОплатыЧеков
	|					  ORDER BY НомерКассы, НомерЧека
	|";
	
	Запрос.УстановитьТекстовыйПараметр("ТипПродажи",Тип);
	Запрос.УстановитьТекстовыйПараметр("ДатаНач",выбДата);

	итОплаты=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос.ВыполнитьИнструкцию(ТекстЗапросаОплаты,итОплаты);
	итОплаты.ДобавитьИндекс("иКассаЧек","НомерКассы,НомерЧека");

	
	НачалоЗагрузки_=_GetPerformanceCounter();	
	сзКлюч=СоздатьОбъект("СписокЗначений");
	итКассы.Сортировать("МестоТорговли,НомерКассы,ВремяПродажи");
	итКассы.ВыбратьСтроки();
	Пока итКассы.ПолучитьСтроку() = 1 Цикл //по местам торговли
		
		НомерЗагружаемойКассы=итКассы.НомерКассы;
//		Состояние("Загрузка документов из кассы "+итКассы.НомерСтроки+"/"+итКассы.КоличествоСтрок()+": "+НомерЗагружаемойКассы);
		итЧеки=итКассы.тзПотомки;
		итЧеки.ВыбратьСтроки();
		Пока итЧеки.ПолучитьСтроку() = 1 Цикл
		
			Состояние("Загрузка документов из кассы "+итКассы.НомерСтроки+"/"+итКассы.КоличествоСтрок()+": "+НомерЗагружаемойКассы+" чек: "+итЧеки.НомерСтроки+"/"+итЧеки.КоличествоСтрок());
			Начало_=_GetPerformanceCounter();
			Если выбДата<'17.03.2011' Тогда
				НомерДок_=Строка(итЧеки.НомерКассы)+"-"+Строка(итЧеки.НомерЧека);
			Иначе
				НомерДок_=Строка(итЧеки.НомерЧека);
			КонецЕсли;
			
			Если Тип<=0 Тогда
				Док = СоздатьОбъект("Документ.РасходнаяНакладнаяНал");
			ИначеЕсли (Тип=1) или (Тип=2) Тогда
				Док = СоздатьОбъект("Документ.Списание");
			ИначеЕсли Тип=4 Тогда
				Док = СоздатьОбъект("Документ.МарочныйОтчет");
			КонецЕсли;
			
			Док.НайтиПоНомеру(НомерДок_,выбДата);

			Если Док.Выбран()=0 Тогда
				глСоздатьНовыйОбъект(Док);
				ЗаполнитьШапку(Док);
				Док.IDD=ПолучитьУникальныйIDD();
				Док.ДатаДок=выбДата;
				Док.НомерДок=НомерДок_; 
				
			Иначе     
				Если Док.Проведен()=1 Тогда
					Продолжить;
				КонецЕсли;
				Док.УдалитьСтроки();					
			КонецЕсли;                

			Если ПустоеЗначение(итЧеки.Клиент) = 1 Тогда
				пКлиент = Константа.ЧастноеЛицо;
			Иначе
				пКлиент = итЧеки.Клиент;
			КонецЕсли;
			
			Если глЕстьРеквизитШапки("НомерКарты",Док.Вид())=1 Тогда
				Док.НомерКарты=итЧеки.Карта;
			КонецЕсли;
			
			Если ПустоеЗначение( пКлиент ) = 0 Тогда
				Док.Клиент=пКлиент;
				Если глЕстьРеквизитШапки("КлГруппа",Док.Вид())=1 Тогда
					Док.КлГруппа=пКлиент.КлГруппа;
				КонецЕсли;
			КонецЕсли;
			
			сзКлюч.УдалитьВсе();
			сзКлюч.ДобавитьЗначение(НомерЗагружаемойКассы);
			сзКлюч.ДобавитьЗначение(итЧеки.НомерЧека);

			Если Тип<=0 Тогда
				Док.Валюта=Рубли;
				Док.Дата_Курса=Док.ДатаДок;
				Док.Курс=КурсДляВалюты(Рубли,Док.ДатаДок);
				Док.ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа;
				Док.БН=Да;

				Док.СтавкаНДС=итЧеки.СтавкаНДС;
				Док.ВремяПродажи=итЧеки.ВремяПродажи;

				Док.ВидПлатежа=Перечисление.ВидыПлатежа.Наличные;
				Док.ВалютаПлатежа=Константа.БазоваяВалюта;
				Док.Получено=0;
				Док.ПолученоКарта=0;
				Док.ПолученоПодарочнаяКарта=0;
				Док.ПодарочнаяКарта="";
				Док.СуммаПлатежа=0;
				
				итОплаты.Подмножество(сзКлюч,2,"иКассаЧек");
				итОплаты.ВыбратьСтроки("иКассаЧек");
				Пока итОплаты.ПолучитьСтроку("иКассаЧек") = 1 Цикл
					Если (итОплаты.ТипПлатежа="CC") Тогда //была оплата по CC
						Док.ВидПлатежа=Перечисление.ВидыПлатежа.Карта;
						Док.ПолученоКарта=Знак*итОплаты.СуммаПлатежа;
					ИначеЕсли (итОплаты.ТипПлатежа="Cash") Тогда // была оплата наличными
						Док.ВалютаПлатежа=Константа.БазоваяВалюта;
						Док.Получено=Знак*итОплаты.СуммаПлатежа;
						Док.СуммаПлатежа=Знак*итОплаты.СуммаПлатежа;
					ИначеЕсли (итОплаты.ТипПлатежа="SDK") Тогда // принесли подарочные карты, купленные у SONORO
						Док.ВидПлатежа=Перечисление.ВидыПлатежа.ПодарочнаяКарта;
						Док.ПодарочнаяКарта="SDK";//СокрЛП(Док.ПодарочнаяКарта)+СокрЛП(итОплаты.НомерКарты);
						Док.ПолученоПодарочнаяКарта=Знак*Док.ПолученоПодарочнаяКарта+Знак*итОплаты.СуммаПлатежа;
					ИначеЕсли (итОплаты.ТипПлатежа="DK") Тогда // принесли подарочные карты, купленные у SONORO
						Док.ВидПлатежа=Перечисление.ВидыПлатежа.ПодарочнаяКарта;
						Док.ПодарочнаяКарта="DK";//СокрЛП(Док.ПодарочнаяКарта)+СокрЛП(итОплаты.НомерКарты);
						Док.ПолученоПодарочнаяКарта=Знак*Док.ПолученоПодарочнаяКарта+итОплаты.СуммаПлатежа;
					ИначеЕсли ПустоеЗначение(итОплаты.Валюта)=0 Тогда //была оплата валютой наличными
						Док.ВидПлатежа=Перечисление.ВидыПлатежа.Наличные;
						Док.Получено=0;
						Док.ВалютаПлатежа="";
						Док.УстановитьАтрибут("ВалютаПлатежа"+?(итОплаты.ТипПлатежа="EUR","",1),итОплаты.Валюта);
						Док.УстановитьАтрибут("Получено"+?(итОплаты.ТипПлатежа="EUR","",1),Знак*итОплаты.СуммаПлатежаВал);
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли Тип=1 Тогда //списание по 1-й категории
				Док.КатегорияСписания=Перечисление.КатегорииСписания.Категория1;
				док.Основание="(1)Reklўmas nolЅkos izlietotie produkti";
				Док.СтавкаНДС=Перечисление.ЗначенияНДС.безНДС;
			ИначеЕсли Тип=2 Тогда //списание по 1-й категории
				Док.КатегорияСписания=Перечисление.КатегорииСписания.Категория2;
				док.Основание="(2) Nocenotas preces norakst®єana";
				Док.СтавкаНДС=Перечисление.ЗначенияНДС.безНДС;
			ИначеЕсли Тип=4 Тогда //продажа за безнал Марочный отчет
				док.Нал=Нет;	
				док.ДатаСмены=док.ДатаДок;
				док.ДатаОплаты=семПолучитьДатуОплаты( док.КлГруппа, Перечисление.ВидыКлиентов.Покупатель, док.ДатаДок);
				Док.Валюта=Рубли;
				Док.Дата_Курса=Док.ДатаДок;
				Док.Курс=КурсДляВалюты(Рубли,Док.ДатаДок);
				
			КонецЕсли;

			Док.НомерДок=НомерДок_;
			
			Если Тип=1 Тогда
				Док.СкидкаНакл = семПолучитьСкидкуКлиента( док.Клиент );
			КонецЕсли;
			
			Док.Фирма=Константа.ОсновнаяФирма;
			Если глЕстьРеквизитШапки("ККМ",Док.Вид())=1 Тогда
				Док.ККМ=итЧеки.Касса;
			ИначеЕсли глЕстьРеквизитШапки("Касса",Док.Вид())=1 Тогда
				Док.Касса=итЧеки.Касса;
			КонецЕсли;
			
			Док.Склад=?(итЧеки.Склад.Выбран()=1,итЧеки.Склад,Константа.РозничныйСклад);
			
			Если ПустоеЗначение(итЧеки.Агент)=0 Тогда
				Док.Агент=итЧеки.Агент;
			КонецЕсли;      
			
			Если глЕстьРеквизитШапки("Продавец",Док.Вид())=1 Тогда
				Док.Продавец=итЧеки.Продавец;
			КонецЕсли;

			Док.КатегорияЦены=итЧеки.КатегорияЦены;
			
			итСтроки=итЧеки.тзПотомки;
			итСтроки.ВыбратьСтроки();
			Пока итСтроки.ПолучитьСтроку()=1 Цикл
			
				ДатаОтчета=Док.ДатаДок;
				Док.НоваяСтрока();
				Док.Товар=итСтроки.Товар;
				Док.ТовКод=Док.Товар.Код;
				Док.Количество=Знак*итСтроки.Количество;
				Док.Единица	=глБазоваяЕдиницаИзмерения(Док.Товар);
				Док.Коэффициент=1;

				Если глЕстьРеквизитМнЧ("РознЦена",Док.Вид())=1 Тогда
					Док.РознЦена=итСтроки.ЦенаПоКатегории;
				КонецЕсли;				

				Если (Тип<=0) Тогда
					Док.Всего=знак*итСтроки.Всего;
					Док.НДС=знак*итСтроки.НДС;
					Док.Сумма=Док.Всего-Док.НДС;
				ИначеЕсли Тип=4 Тогда
					Док.НДС=итСтроки.НДС;
					Док.Сумма=итСтроки.Всего;
				ИначеЕсли Тип=1 Тогда
					Док.Всего=Число(итСтроки.Всего)-Число(итСтроки.НДС);
					Док.НДС=0;
					Док.Сумма=Док.Всего-Док.НДС;
				ИначеЕсли Тип=2 Тогда
					Док.Всего=Число(итСтроки.Всего);
					Док.НДС=0;
					Док.Сумма=Док.Всего;
				КонецЕсли;

				Док.Цена=Абс_(Док.Сумма/?(Док.Количество=0,1,Док.Количество));
				
				Если глЕстьРеквизитМнЧ("ЦенаСНДС",Док.Вид())=1 Тогда
					Док.ЦенаСНДС=Абс_(Док.Всего/?(Док.Количество=0,1,Док.Количество));
				КонецЕсли;

				Если глЕстьРеквизитМнЧ("Скидка",Док.Вид())=1 Тогда
					Док.Скидка=итСтроки.СкидкаБезНДС;
				КонецЕсли;				
				ЦенаСкидка=Док.Цена;

				Если (глЕстьРеквизитМнЧ("ВидСкидки",Док.Вид())=1) И (Число(итСтроки.СкидкаБезНДС)>0) Тогда
					Если СокрЛП(ТаблДок.Карта)="1" Тогда
						Док.ВидСкидки = Перечисление.ВидСкидки.АкционныйТовар;
					Иначе
						Док.ВидСкидки = ПолучитьВидСкидкиКлиенту(Док);
					КонецЕсли;
				КонецЕсли;

				Если глЕстьРеквизитМнЧ("СтавкаНДС_Т",Док.Вид())=1 Тогда
					Док.СтавкаНДС_Т=итСтроки.СтавкаНДС;
				КонецЕсли;				
				
			КонецЦикла; //итСтроки цикл по строкам документа

			//запишем документ 
			Попытка           
				Док.АвтоВремяОтключить();
				Док.Записать();
				Если Док.Проведен()=0 Тогда
					Док.УстановитьВремя(22,итЧеки.ВремяДокМин1С,00);
					//Док.УстановитьВремя(22,Лев(Док.ВремяПродажи,2),Сред(Док.ВремяПродажи,4,2));
				КонецЕсли;
				Док.Записать();
			Исключение
				глУстановитьНовыйНомер(Док,"Z-");
				Док.Записать();
			КонецПопытки;     
			
			Если (Тип<=0) ИЛИ (Тип=4) Тогда //добавляем только расходные за нал и марочные отчеты
				ДобавитьДокВТаблицу(Док,итЧеки.ВремяДокМин1С);
			КонецЕсли;
			
			Конец_=_GetPerformanceCounter();
			//Сообщить("Время загрузки документа "+Док+": "+(Конец_-Начало_)+" мс");
			
		КонецЦикла; //цикл по чекам
		
	КонецЦикла; //Цикл по кассам 

	Польз=СоздатьОбъект("Справочник.Пользователи");
	Польз.ВыбратьЭлементыПоРеквизиту("ПолучатьСообщенияЗагрузкиККМ",1,0,0);
	Блокнот=СоздатьОбъект("Справочник.Блокнот");
	
	Пока Польз.ПолучитьЭлемент()=1 Цикл
		//Блокнот.НайтиПоКоду(СокрЛП(Польз.Код),0);
		Если Блокнот.НайтиПоКоду(СокрЛП(Польз.Код),0) = 0 Тогда Продолжить; КонецЕсли;
		Если Блокнот.ЭтоГруппа() = 0 Тогда Продолжить; КонецЕсли;
		
		Если Блокнот.Выбран()=1 Тогда
			Блокнот.ИспользоватьРодителя(Блокнот.ТекущийЭлемент());
			глСоздатьНовыйОбъект(Блокнот);
			Блокнот.Наименование = "Загрузка из кассы за "+Строка(РабочаяДата()-1);
			Блокнот.__Дата = РабочаяДата()-1;
			Блокнот.Время="08:00:00";
			Блокнот.Автор = Пользователь;
			Если Блокнот.Родитель.Выбран()=0 Тогда
				Блокнот.УстановитьНовыйКод("Всем");
			КонецЕсли;
			
			Блокнот.Запись=СписокСообщений;
			Блокнот.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //ЗагрузкаДанных

Процедура ЗагрузкаДанных()

	ТаблДок=СоздатьОбъект("ТаблицаЗначений");
	ТаблДок.НоваяКолонка("Штрихкод");
	ТаблДок.НоваяКолонка("Товар");
	ТаблДок.НоваяКолонка("Карта");
	ТаблДок.НоваяКолонка("_Дата");
	ТаблДок.НоваяКолонка("Время");
	ТаблДок.НоваяКолонка("Цена","Число",17,5);
	ТаблДок.НоваяКолонка("Скидка","Число",17,5);
	ТаблДок.НоваяКолонка("Всего","Число",17,5);
	ТаблДок.НоваяКолонка("Количество",15,3);
	ТаблДок.НоваяКолонка("СтавкаНДС");
	ТаблДок.НоваяКолонка("НомерКассы");
	ТаблДок.НоваяКолонка("НомерКассира");
	ТаблДок.НоваяКолонка("НомерЧека");
	
//	ЗагрузкаДанныхСтар();

	НачалоЗагрузки_=_GetPerformanceCounter();

	ЗагрузкаДанныхНов(0); //обычные продажи
	ЗагрузкаДанныхНов(-1); //обычные продажи - возвраты
	ЗагрузкаДанныхНов(1); //списания по 1-й категории
	ЗагрузкаДанныхНов(4); //продажи за безналичный расчет
	
	Если ПроводитьДок=1 Тогда
		Если выбДата=(РабочаяДата()-1) Тогда
			глНеНужнаПроверкаИтогов=1;
			Сообщить("Документы будут проведены задним числом с актуальными итогами!");
		КонецЕсли;
		ПровестиДоки();
		глНеНужнаПроверкаИтогов=0;
	КонецЕсли;

	КонецЗагрузки_=_GetPerformanceCounter();
	Сообщить("Время загрузки кассовых чеков: "+(КонецЗагрузки_-НачалоЗагрузки_)+" мс");
	
КонецПроцедуры

//******************************************************************************
// КонтрольныйСимволEAN(ШтрКод, Тип)
//
// Параметры:
//  ШтрКод - 12-символьный штрих-код (без контрольной цифры)
//  Тип    - тип штрихкода: 13 - EAN13, 8 - EAN8
//
// Возвращаемое значение: 
//  Контрольный символ 
//
// Описание: 
//  Функция вычисляет контрольный символ кода EAN
//
Функция КонтрольныйСимволEAN(ШтрКод, Тип)
	
	Четн = 0;
	Нечетн = 0;
	
	Если Тип = 13 Тогда
		КолвоИтераций = 6;
	Иначе
		КолвоИтераций = 4;
	КонецЕсли;
	
	Для Индекс = 1 По КолвоИтераций Цикл
		Четн = Четн + Сред(ШтрКод, 2 * Индекс, 1);
		Нечетн = Нечетн + Сред(ШтрКод, 2 * Индекс - 1, 1);
	КонецЦикла;
	
	Если Тип = 13 Тогда
		Четн = Четн * 3;
	Иначе
		Нечетн = Нечетн * 3;
	КонецЕсли;
	
	КонтЦифра = 10 - (Четн + Нечетн) % 10;
	
	Возврат ?(КонтЦифра = 10, "0", Строка(КонтЦифра));
	
КонецФункции // КонтрольныйСимволEAN()

//******************************************************************************
// ПроверитьШтрихкод(Штрихкод)
//
// Параметры: 
//  Штрихкод - штриховой код, который нужно проверить
//
// Возвращаемое значение:
//  1 - штрихкод имеет верный формат, 0 - нет.
//
// Описание:
//  Проеверяет штрихкод на соответствие кодировке EAN 13 и EAN 8.
//
Функция ПроверитьШтрихкод(Штрихкод)
	
	ДлинаКода = СтрДлина(Штрихкод);
	Рез = 0;
	
	//	Если ТолькоЦифры(Штрихкод) = 1 Тогда
	// штрихкод должен состоять из цифр
	
	Если (ДлинаКода = 13) ИЛИ (ДлинаКода = 8) Тогда
		Если КонтрольныйСимволEAN(Лев(Штрихкод,12), 13) = Прав(Штрихкод, 1) Тогда
			Рез = 1;
		КонецЕсли;
	КонецЕсли;
	//КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // ПроверитьШтрихкод()          
                                        
//**********************
Функция ПолучитьГрупповыеСкидкиТоваров()
	
	ODBCRecordSet = СоздатьОбъект( "ODBCRecordSet" );
                              
   	ТекстЗапроса="-- удаление временной таблицы
	|IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE 
	|ID=OBJECT_ID('tempdb..#ТоварыГруппыСкидок') AND sysstat & 0xf = 3 )
	|DROP TABLE #ТоварыГруппыСкидок;";
	ODBCRecordSet.ВыполнитьСкалярный(ТекстЗапроса);
	                          
   	ТекстЗапроса="  SELECT Спр.ID Товар,
	|				       $ПоследнееЗначение.Номенклатура.ГруппаСкидкиКасса(Спр.ID,GETDATE()) ГруппаСкидки,
	|				       $ПоследнееЗначение.Номенклатура.ГруппаСкидкиКасса(Спр.ID,GETDATE()-1) ГруппаСкидкиБыла,
	|				       $ПоследнееЗначение.Номенклатура.ГруппаСкидкиКасса(Спр.ParentID,GETDATE()) ГруппаСкидкиГр,
	|				       $ПоследнееЗначение.Номенклатура.ГруппаСкидкиКасса(Спр.ParentID,GETDATE()-1) ГруппаСкидкиГрБыла
	|				INTO #ТоварыГруппыСкидок
	|				FROM $Справочник.Номенклатура Спр
	|				WHERE isfolder=2 and $Спр.ПоАлфавиту NOT LIKE 'aa%' AND ISMARK=0
	|					  AND $Спр.ДляРозницы = 1 AND 
	|					  $Спр.ВидТовара IN ($Перечисление.ВидыТоваров.Блюдо,$Перечисление.ВидыТоваров.Товар,$Перечисление.ВидыТоваров.Услуга)
	|				ORDER BY $Спр.ПоАлфавиту";
	ODBCRecordSet.ВыполнитьСкалярный(ТекстЗапроса);	
	                     
	
	ТекстЗапроса="	SELECT Товар [Товар $Справочник.Номенклатура],
	|				       CASE WHEN ГруппаСкидки>ГруппаСкидкиГр THEN ГруппаСкидки ELSE ГруппаСкидкиГр END ГруппаСкидок
	|				FROM #ТоварыГруппыСкидок Спр
	|";
				
	
	ODBCRecordSet.ВыполнитьСкалярный(ТекстЗапроса);	
	
	табл=СоздатьОбъект("ИндексированнаяТаблица");
	ODBCRecordSet.ВыполнитьИнструкцию(ТекстЗапроса,табл);
	табл.ДобавитьИндекс("Товар","*Товар");
	
	Возврат табл;

КонецФункции

//******************************************************
Процедура ВыгрузитьГрупповыеСкидкиТоваров( ТаблТоваров, СписокТоваров = "" )

	ODBCRecordSet = СоздатьОбъект( "ODBCRecordSet" );
                              
   	ТекстЗапроса="-- удаление временной таблицы
	|IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE 
	|ID=OBJECT_ID('tempdb..#ТоварыГруппыСкидок') AND sysstat & 0xf = 3 )
	|DROP TABLE #ТоварыГруппыСкидок;";
	ODBCRecordSet.ВыполнитьСкалярный(ТекстЗапроса);
	                          
   	ТекстЗапроса="  SELECT Спр.ID Товар,
	|				       COALESCE($ПоследнееЗначение.Номенклатура.ГруппаСкидкиКасса(Спр.ID,GETDATE()),0) ГруппаСкидки,
	|				       COALESCE($ПоследнееЗначение.Номенклатура.ГруппаСкидкиКасса(Спр.ID,:ВыбДата),0) ГруппаСкидкиБыла,
	|				       COALESCE($ПоследнееЗначение.Номенклатура.ГруппаСкидкиКасса(Спр.ParentID,GETDATE()),0) ГруппаСкидкиГр,
	|				       COALESCE($ПоследнееЗначение.Номенклатура.ГруппаСкидкиКасса(Спр.ParentID,:ВыбДата),0) ГруппаСкидкиГрБыла
	|				INTO #ТоварыГруппыСкидок
	|				FROM $Справочник.Номенклатура Спр
	|				WHERE isfolder=2 and $Спр.ПоАлфавиту NOT LIKE 'aa%' AND ISMARK=0
	|					  AND $Спр.ДляРозницы = 1 AND 
	|					  $Спр.ВидТовара IN ($Перечисление.ВидыТоваров.Блюдо,$Перечисление.ВидыТоваров.Товар,$Перечисление.ВидыТоваров.Услуга)
	|				ORDER BY $Спр.ПоАлфавиту";
	
	ODBCRecordSet.УстановитьТекстовыйПараметр("ВыбДата",РабочаяДата()-1);
	ODBCRecordSet.ВыполнитьСкалярный(ТекстЗапроса);	
	
	ТекстЗапроса="	SELECT Товар [Товар $Справочник.Номенклатура],
	|				       CASE WHEN ГруппаСкидки>ГруппаСкидкиГр THEN ГруппаСкидки ELSE ГруппаСкидкиГр END ГруппаСкидки
	|				FROM #ТоварыГруппыСкидок Спр
	|				WHERE ГруппаСкидки<>ГруппаСкидкиБыла OR ГруппаСкидкиГр<>ГруппаСкидкиГрБыла
	|";
				
	табл = ODBCRecordSet.ВыполнитьИнструкцию(ТекстЗапроса);
                                      
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку() = 1 Цикл
		Состояние("Заполнение таблицы товаров групповыми скидками: "+табл.НомерСтроки+"/"+табл.КоличествоСтрок());
		ПроцентНДС=1+ПроцентНДС(табл.Товар.СтавкаНДС)/100;
		
		товарГруппаСкидок=0;
		Если итГруппыСкидок.НайтиСтроку("Товар",табл.Товар,,1)>0 Тогда
			товарГруппаСкидок=итГруппыСкидок.ГруппаСкидок;
		КонецЕсли;
	
		
		Цена = ЦенаТовараПоКатегорииДляТовара(табл.Товар,выбКатегорияЦен)*ПроцентНДС;
		ТаблТоваров.НоваяСтрока();
		ТаблТоваров.Товар=табл.Товар;
		ТаблТоваров.СтавкаНДС=табл.Товар.СтавкаНДС;
		ТаблТоваров.ШтрихКод=СокрЛП(табл.Товар.КодДляРозницы); 
		ТаблТоваров.Наименование=СокрЛП(табл.Товар.НаименованиеДляЦенника);
		ТаблТоваров.Цена=Окр(Цена,2);
		ВидСкидки="";
		ТаблТоваров.ЦенаСоСк=Окр(Цена * (1-глПроцентСкидки(ТаблТоваров.Товар,,выбКатегорияЦен,ВидСкидки)/100),2);
		ТаблТоваров.Цена=ТаблТоваров.ЦенаСоСк;

		Цена = семПолучитьЦенуТовара( ТаблТоваров.Товар, выбКатегорияЦен,РабочаяДата() );
		Если ПустоеЗначение( Цена ) = 0 Тогда
			ТаблТоваров.ЗапретСкидкиНаТовар = Цена.ЗапретСкидки;
		КонецЕсли;
		
		Если ВидСкидки=Перечисление.ВидСкидки.АкционныйТовар Тогда
			ТаблТоваров.ЗапретСкидкиНаТовар=1;
		КонецЕсли;
		
		ТаблТоваров.грТоваров=?(ТаблТоваров.ЗапретСкидкиНаТовар=1,"9999",?(товарГруппаСкидок=0,"1111",Строка(товарГруппаСкидок))); //номер группы скидок 
		
		ТаблТоваров.Весовой=?(табл.Товар.БазоваяЕдиницаИзмерения=Перечисление.ЕдиницыИзмерения.Килограмм,1,0);
		Если ТаблТоваров.Товар.ПометкаУдаления()=1 Тогда
			ТаблТоваров.Действие="E";
		Иначе
			ТаблТоваров.Действие="A";
		КонецЕсли; 
		Цена=ТаблТоваров.Цена;
		ЦенаСоСк=ТаблТоваров.ЦенаСоСк;
		Если ПроверитьШтрихкод(СокрЛП(табл.Товар.ШтрихКод))=1 Тогда
			ТаблТоваров.НоваяСтрока();
			ТаблТоваров.Товар=табл.Товар;
			ТаблТоваров.СтавкаНДС=табл.Товар.СтавкаНДС;
			ТаблТоваров.грТоваров=?(ТаблТоваров.ЗапретСкидкиНаТовар=1,"9999",?(товарГруппаСкидок=0,"1111",Строка(товарГруппаСкидок))); //номер группы скидок 
			ТаблТоваров.ШтрихКод=СокрЛП(табл.Товар.ШтрихКод); 
			ТаблТоваров.Наименование=СокрЛП(табл.Товар.НаименованиеДляЦенника);
			ТаблТоваров.ЦенаСоСк=ЦенаСоСк;
			ТаблТоваров.Цена=ЦенаСоСк;
			ТаблТоваров.Весовой=?((табл.Товар.БазоваяЕдиницаИзмерения=Перечисление.ЕдиницыИзмерения.Килограмм)
			ИЛИ (табл.Товар.БазоваяЕдиницаИзмерения=Перечисление.ЕдиницыИзмерения.Грамм)
			ИЛИ (табл.Товар.БазоваяЕдиницаИзмерения=Перечисление.ЕдиницыИзмерения.Тонна),1,0);
			Если табл.Товар.ПометкаУдаления()=1 Тогда
				ТаблТоваров.Действие="E";
			Иначе
				ТаблТоваров.Действие="A";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	                     
	//ТаблТоваров.ВыбратьСтроку();
	//сп = СоздатьОбъект( "СписокЗначений" );
	//сп.Установить("Данные",табл);
	//Имя = "ПечатьТаблицыЗначений.ert"; Путь = "";
	//РасположениеФайла(Путь);
	//ОткрытьФорму("Отчет",сп,Путь+Имя);
КонецПроцедуры

//**************************************************
Процедура семВыгрузитьАкционныеТовары( ТаблТоваров )

	ODBCRecordSet = СоздатьОбъект( "ODBCRecordSet" );
        
	ТекстЗапроса="
	|SELECT
	|	Спр.PARENTEXT as [Товар $Справочник.Номенклатура]
	|FROM 
	|	$Справочник.АкционныеСкидкиТоваров as Спр
	|INNER JOIN  $Справочник.Номенклатура СпрН ON СпрН.ID = Спр.PARENTEXT
	|WHERE 
	|	$Спр.ДатаНачала <= :ДатаСкидки 
	|	AND $Спр.ДатаКонца >= :ДатаСкидкиКонца
	|	AND $Спр.КатегорияЦен = :КатегорияЦен 
	|	AND Спр.ISMARK  & 1 = 0              
	|   AND $СпрН.ДляРозницы = 1
	|	AND $Спр.УпрАналитика = $ПустойИД
	|";
	ODBCRecordSet.УстановитьТекстовыйПараметр("КатегорияЦен", выбКатегорияЦен);  
	ODBCRecordSet.УстановитьТекстовыйПараметр("ДатаСкидки", РабочаяДата());       
	//искусственно занижаем правую границу, чтобы выгрузить те товары, по которым недавно закончился срок действия акции
	ODBCRecordSet.УстановитьТекстовыйПараметр("ДатаСкидкиКонца", РабочаяДата()-1);
	табл = ODBCRecordSet.ВыполнитьИнструкцию(ТекстЗапроса);
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку() = 1 Цикл
		Состояние("Заполнение таблицы акционными товаров: "+табл.НомерСтроки+"/"+табл.КоличествоСтрок());
		ПроцентНДС=1+ПроцентНДС(табл.Товар.СтавкаНДС)/100;
		
		товарГруппаСкидок=0;
		Если итГруппыСкидок.НайтиСтроку("Товар",табл.Товар,,1)>0 Тогда
			товарГруппаСкидок=итГруппыСкидок.ГруппаСкидок;
		КонецЕсли;

		Цена = ЦенаТовараПоКатегорииДляТовара(табл.Товар,выбКатегорияЦен)*ПроцентНДС;
		ТаблТоваров.НоваяСтрока();
		ТаблТоваров.Товар=табл.Товар;
		ТаблТоваров.СтавкаНДС=табл.Товар.СтавкаНДС;
		ТаблТоваров.ШтрихКод=СокрЛП(табл.Товар.КодДляРозницы); 
		ТаблТоваров.Наименование=СокрЛП(табл.Товар.НаименованиеДляЦенника);
		ТаблТоваров.Цена=Окр(Цена,2);
		ВидСкидки="";
		ТаблТоваров.ЦенаСоСк=Окр(Цена * (1-глПроцентСкидки(ТаблТоваров.Товар,,выбКатегорияЦен,ВидСкидки)/100),2);
		ТаблТоваров.Цена=ТаблТоваров.ЦенаСоСк;

		Цена = семПолучитьЦенуТовара( ТаблТоваров.Товар, выбКатегорияЦен, РабочаяДата() );
		Если ПустоеЗначение( Цена ) = 0 Тогда
			ТаблТоваров.ЗапретСкидкиНаТовар = Цена.ЗапретСкидки;
		КонецЕсли;
		Если ВидСкидки=Перечисление.ВидСкидки.АкционныйТовар Тогда
			ТаблТоваров.ЗапретСкидкиНаТовар=1;
		КонецЕсли;
		
		ТаблТоваров.грТоваров=?(ТаблТоваров.ЗапретСкидкиНаТовар=1,"9999",?(товарГруппаСкидок=0,"1111",Строка(товарГруппаСкидок))); //номер группы скидок из справочника
		
		ТаблТоваров.Весовой=?(табл.Товар.БазоваяЕдиницаИзмерения=Перечисление.ЕдиницыИзмерения.Килограмм,1,0);
		Если ТаблТоваров.Товар.ПометкаУдаления()=1 Тогда
			ТаблТоваров.Действие="E";
		Иначе
			ТаблТоваров.Действие="A";
		КонецЕсли; 
		Цена=ТаблТоваров.Цена;
		ЦенаСоСк=ТаблТоваров.ЦенаСоСк;
		Если ПроверитьШтрихкод(СокрЛП(табл.Товар.ШтрихКод))=1 Тогда
			ТаблТоваров.НоваяСтрока();
			ТаблТоваров.Товар=табл.Товар;
			ТаблТоваров.СтавкаНДС=табл.Товар.СтавкаНДС;
			ТаблТоваров.грТоваров=?(ТаблТоваров.ЗапретСкидкиНаТовар=1,"9999",?(товарГруппаСкидок=0,"1111",Строка(товарГруппаСкидок))); //номер группы скидок из справочника
			ТаблТоваров.ШтрихКод=СокрЛП(табл.Товар.ШтрихКод); 
			ТаблТоваров.Наименование=СокрЛП(табл.Товар.НаименованиеДляЦенника);
			ТаблТоваров.ЦенаСоСк=ЦенаСоСк;
			ТаблТоваров.Цена=ЦенаСоСк;
			ТаблТоваров.Весовой=?((табл.Товар.БазоваяЕдиницаИзмерения=Перечисление.ЕдиницыИзмерения.Килограмм)
			ИЛИ (табл.Товар.БазоваяЕдиницаИзмерения=Перечисление.ЕдиницыИзмерения.Грамм)
			ИЛИ (табл.Товар.БазоваяЕдиницаИзмерения=Перечисление.ЕдиницыИзмерения.Тонна),1,0);
			Если табл.Товар.ПометкаУдаления()=1 Тогда
				ТаблТоваров.Действие="E";
			Иначе
				ТаблТоваров.Действие="A";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//сп = СоздатьОбъект( "СписокЗначений" );
	//сп.Установить("Данные",табл);
	//Имя = "ПечатьТаблицыЗначений.ert"; Путь = "";
	//РасположениеФайла(Путь);
	//ОткрытьФорму("Отчет",сп,Путь+Имя);
КонецПроцедуры

//*******************************************
Функция ГруппаКлиента(Клиент, ПромДата="")
	Если ПустоеЗначение( Клиент.ДопКод ) = 0 Тогда
		Возврат семПолучитьГруппуПЛ( 1, Клиент.ДопКод, ?(ПустоеЗначение(ПромДата)=1,РабочаяДата(),ПромДата));
	КонецЕсли;
КонецФункции


//*******************************************
Процедура Сформировать()
	
	Если Форма.Закладки.ТекущаяСтрока()=2 Тогда
		ЗагрузкаДанных(); 
		Возврат;
	КонецЕсли;
	
	ТаблТоваров=СоздатьОбъект("ТаблицаЗначений"); 
	ТаблТоваров.НоваяКолонка("Товар"); 
	ТаблТоваров.НоваяКолонка("СтавкаНДС"); 
	ТаблТоваров.НоваяКолонка("ШтрихКод"); 
	ТаблТоваров.НоваяКолонка("грТоваров");
	ТаблТоваров.НоваяКолонка("Наименование");
	ТаблТоваров.НоваяКолонка("ЦенаСоСк");
	ТаблТоваров.НоваяКолонка("Цена");
	ТаблТоваров.НоваяКолонка("Весовой");
	ТаблТоваров.НоваяКолонка("Действие");
	ТаблТоваров.НоваяКолонка("ЗапретСкидкиНаТовар");
	
	ТаблКлиентов=СоздатьОбъект("ТаблицаЗначений"); 
	ТаблКлиентов.НоваяКолонка("Клиент"); 
	ТаблКлиентов.НоваяКолонка("Карта"); 
	ТаблКлиентов.НоваяКолонка("грСкидок"); 
	ТаблКлиентов.НоваяКолонка("Наименование");
	ТаблКлиентов.НоваяКолонка("Адрес1"); 
	ТаблКлиентов.НоваяКолонка("Адрес2");
	ТаблКлиентов.НоваяКолонка("Адрес3");
	ТаблКлиентов.НоваяКолонка("ИдентПоКарте");
	ТаблКлиентов.НоваяКолонка("Скидка");
	ТаблКлиентов.НоваяКолонка("СтрПроцентов","Строка");
	ТаблКлиентов.НоваяКолонка("Действие");
	
	ТаблСкидок=СоздатьОбъект("ТаблицаЗначений"); 
	ТаблСкидок.НоваяКолонка("ЭтоКодТовара"); 
	ТаблСкидок.НоваяКолонка("ШтрихКод");  
	ТаблСкидок.НоваяКолонка("Товар"); 
	ТаблСкидок.НоваяКолонка("Карта");
	ТаблСкидок.НоваяКолонка("Скидка");   
	ТаблСкидок.НоваяКолонка("Действие");   
	ТаблСкидок.НоваяКолонка("СтрПроцентов","Строка");
	ТаблСкидок.НоваяКолонка("грТоваров");
	ТаблСкидок.НоваяКолонка("ДатаНачала");
	ТаблСкидок.НоваяКолонка("ДатаКонца");
	
	
	ТаблВалют=СоздатьОбъект("ТаблицаЗначений"); 
	ТаблВалют.НоваяКолонка("НомерВал"); 
	ТаблВалют.НоваяКолонка("Десятичные");
	ТаблВалют.НоваяКолонка("Курс");
	ТаблВалют.НоваяКолонка("Наименование");
	ТаблВалют.НоваяКолонка("ПолнНаименование");
	ТаблВалют.НоваяКолонка("Действие");
	
	списВидов=СоздатьОбъект("СписокЗначений"); 
	для А=1 по списВидовТоваров.РазмерСписка() Цикл
		Если списВидовТоваров.Пометка(А)=1 Тогда
			СписВидов.ДобавитьЗначение(списВидовТоваров.ПолучитьЗначение(А));
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапросаПереоценка=	"//{{ЗАПРОС(НоменклатураПереоценки)
	|Период с ДатаНачала по ДатаКонца;
	|ТекущийЭлемент = Документ.ПереоценкаТоваров.Товар,Документ.КалькуляционнаяКарта.ТоварШапки;
	|ВидТовара = Документ.ПереоценкаТоваров.Товар.ВидТовара,Документ.КалькуляционнаяКарта.ТоварШапки.ВидТовара;
	|СтавкаНДС = Документ.ПереоценкаТоваров.Товар.СтавкаНДС,Документ.КалькуляционнаяКарта.ТоварШапки.СтавкаНДС;
	|ШтрихКод = Документ.ПереоценкаТоваров.Товар.ШтрихКод,Документ.КалькуляционнаяКарта.ТоварШапки.ШтрихКод;
	|КодДляРозницы = Документ.ПереоценкаТоваров.Товар.КодДляРозницы,Документ.КалькуляционнаяКарта.ТоварШапки.КодДляРозницы;
	|ДляРозницы = Документ.ПереоценкаТоваров.Товар.ДляРозницы,Документ.ПереоценкаТоваров.Товар.ДляРозницы;
	|ГруппаСкидок = Документ.ПереоценкаТоваров.Товар.ГруппаСкидкиКасса,Документ.ПереоценкаТоваров.Товар.ГруппаСкидкиКасса;
	|БазоваяЕдиницаИзмерения = Документ.ПереоценкаТоваров.Товар.БазоваяЕдиницаИзмерения,Документ.КалькуляционнаяКарта.ТоварШапки.БазоваяЕдиницаИзмерения;
	|НаименованиеДляЦенника = Документ.ПереоценкаТоваров.Товар.НаименованиеДляЦенника,Документ.КалькуляционнаяКарта.ТоварШапки.НаименованиеДляЦенника;
	|КатегорияЦены = Документ.ПереоценкаТоваров.КатегорияЦены,Документ.КалькуляционнаяКарта.КатегорияЦены;
	|УстановкаЦеныРеализации = Документ.КалькуляционнаяКарта.УстановкаЦеныРеализации;
	|Группировка ТекущийЭлемент без групп;
	|Функция Всего=Счётчик();
	|Условие(ВидТовара в списВидов);
	|Условие(ДляРозницы=1);
	|Условие(КатегорияЦены = выбКатегорияЦен);
	|Условие(УстановкаЦеныРеализации = Перечисление.УстанЦенРеализ.Автоматически);
	|"//}}ЗАПРОС            
	;       
	
	Запрос=СоздатьОбъект("Запрос");
	ТекстЗапроса=	"//{{ЗАПРОС(Номенклатура)
	|ТекущийЭлемент = Справочник.Номенклатура.ТекущийЭлемент;
	|ВидТовара = Справочник.Номенклатура.ВидТовара;
	|ШтрихКод = Справочник.Номенклатура.ШтрихКод;
	|СтавкаНДС = Справочник.Номенклатура.СтавкаНДС;
	|КодДляРозницы = Справочник.Номенклатура.КодДляРозницы;
	|ДляРозницы = Справочник.Номенклатура.ДляРозницы;
	|ГруппаСкидок = Справочник.Номенклатура.ГруппаСкидкиКасса;
    |ФлИзменен = Справочник.Номенклатура.ФлИзменен;
	|БазоваяЕдиницаИзмерения = Справочник.Номенклатура.БазоваяЕдиницаИзмерения;
	|НаименованиеДляЦенника = Справочник.Номенклатура.НаименованиеДляЦенника;
	|Группировка ТекущийЭлемент без групп упорядочить по ТекущийЭлемент.Код;
	|Функция Всего=Счётчик();
	|Условие(ВидТовара в списВидов);	
	|Условие(ДляРозницы=1);
	|"//}}ЗАПРОС            
	;       

	Если (ВсеТовары=0) И (ПоПереоценкам=0) Тогда
		ТекстЗапроса=ТекстЗапроса + "Условие(ТекущийЭлемент в СписТоваров);";
	ИначеЕсли (ПоПереоценкам=1) Тогда
		ТекстЗапроса=ТекстЗапросаПереоценка;
	Иначе
		ТекстЗапроса=ТекстЗапроса + "Условие(ФлИзменен = 1);";	
	КонецЕсли;

	ТаблТоваровВыг=СоздатьОбъект("ТаблицаЗначений");	
	
//	Если ПоПереоценкам=1 Тогда
//		Если Запрос.Выполнить(ТекстЗапроса)=0 Тогда
//			Сообщить("С запросом по товарам все плохо");
//			Возврат;
//		КонецЕсли;                                      
//
//		Запрос.Выгрузить(ТаблТоваров);
//	Иначе
		
		Запрос=СоздатьОбъект("ODBCRecordSet");
		ТекстЗапроса="SELECT Спр.ID [ТекущийЭлемент $Справочник.Номенклатура],
		|					 $Спр.ШтрихКод ШтрихКод,
		|					 $Спр.СтавкаНДС [СтавкаНДС $Перечисление.ЗначенияНДС],
		|					 $Спр.КодДляРозницы КодДляРозницы,
		|					 $ПоследнееЗначение.Номенклатура.ГруппаСкидкиКасса(Спр.ID,GETDATE()) ГруппаСкидок,
		|					 $Спр.БазоваяЕдиницаИзмерения [БазоваяЕдиницаИзмерения $Перечисление.ЕдиницыИзмерения],
		|					 $Спр.НаименованиеДляЦенника НаименованиеДляЦенника
		|			   FROM $Справочник.Номенклатура Спр
		|			   INNER JOIN $Справочник.Цены СпрЦ ON СпрЦ.PARENTEXT=Спр.ID AND  $СпрЦ.КатегорияЦены=:КатегорияЦены ";
		
		Если ПоПереоценкам=1 Тогда
			ТекстЗапроса = ТекстЗапроса + "INNER JOIN (SELECT COALESCE($ДокПC.Товар,$ОбщийРеквизит.ТоварШапки) Товар
			|										   FROM _1sjourn Журнал (NOLOCK)
			|										   LEFT JOIN $ДокументСтроки.ПереоценкаТоваров ДокПC (NOLOCK) ON ДокПC.IDDOC=Журнал.IDDOC
			|										   INNER JOIN $Документ.ПереоценкаТоваров ДокП (NOLOCK) ON ДокП.IDDOC=ДокПC.IDDOC AND $ДокП.КатегорияЦены=:КатегорияЦены
			|										   LEFT JOIN $Документ.КалькуляционнаяКарта ДокК (NOLOCK) ON ДокК.IDDOC=Журнал.IDDOC AND $ДокК.УстановкаЦеныРеализации=$Перечисление.УстанЦенРеализ.Автоматически 
			|																											AND $ДокК.КатегорияЦены=:КатегорияЦены
			|											WHERE Журнал.DATE_TIME_IDDOC BETWEEN :Нач AND :Кон~ AND Журнал.IDDOCDEF IN ($ВидДокумента.ПереоценкаТоваров,$ВидДокумента.КалькуляционнаяКарта)
			|										  ) Переоценки ON Переоценки.Товар = Спр.ID ";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "   WHERE $Спр.ДляРозницы=1 AND $Спр.ВидТовара IN (SELECT Val FROM #ВидыТоваров)";
		Запрос.УложитьСписокОбъектов(СписВидов,"#ВидыТоваров");

		Запрос.УстановитьТекстовыйПараметр("КатегорияЦены",выбКатегорияЦен);
		Запрос.УстановитьТекстовыйПараметр("Нач",ДатаНачала);
		Запрос.УстановитьТекстовыйПараметр("Кон",ДатаКонца);
		Если (ВсеТовары=0) И (ПоПереоценкам=0) Тогда
			Запрос.УложитьСписокОбъектов(списТоваров,"#Товары","Номенклатура");
			ТекстЗапроса=ТекстЗапроса + "AND Спр.ID IN (SELECT Val FROM #Товары)";
		ИначеЕсли ПоПереоценкам=0 Тогда
			ТекстЗапроса=ТекстЗапроса + "AND $Спр.ФлИзменен=1";
		КонецЕсли;

		ТекстЗапроса=ТекстЗапроса + "ORDER BY Спр.CODE";	
		
		ТаблТоваровВыг=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);		
				
//		ТаблТоваров.ВыбратьСтроку();
//	КонецЕсли;


	                 
	ЗапросКлиент=СоздатьОбъект("ODBCRecordSet");
	//ЗапросКлиент=СоздатьОбъект("Запрос");
	//ТекстЗапросаКлиент=	"//{{ЗАПРОС(СформироватьКлиент)
	//|ТекущийЭлемент = Справочник.Контрагенты.ТекущийЭлемент;
	//|Карта = Справочник.Контрагенты.Карта;
	////	|КлиентСкидка = Справочник.Контрагенты.КлиентСкидка;
	//|Группировка ТекущийЭлемент без групп;
	//|Функция Всего=Счётчик();
	//|Условие(ПустаяСтрока(Карта) = 0);
	//|Условие(ТекущийЭлемент в списКлиентов);
	//|"//}}ЗАПРОС
	//;

	ТекстЗапросаКлиент=" SELECT Спр.ID [Клиент $Справочник.Контрагенты],           
	|							Спр.DESCR [Наименование],
	|							$Спр.Адрес1 [Адрес1],
	|							$Спр.Адрес2 [Адрес2],
	|							$Спр.Адрес3 [Адрес3],
	|							Спр.ISMARK ПометкаУдаления,
	|							$Спр.Карта Карта,
	|							NULLIF($Спр.СрокИспользованияКарты,'17530101') [СрокИспользованияКарты],
	|			    	      	intranet.dbo.Get_VDB_POSGR(1, $Спр.Допкод, GETDATE()) ГруппаСкидки,
	|						  	CASE WHEN $Спр.Допкод>0 THEN intranet.dbo.Get_VDB_Disc(1, $Спр.Допкод, GETDATE())
	|								   					  ELSE  $ПоследнееЗначение.Контрагенты.КлиентСкидка(Спр.ID,GETDATE()) 
	|							  END Скидка
	|					 FROM $Справочник.Контрагенты Спр
	|					 WHERE $Спр.Карта>'1' AND (NULLIF($Спр.СрокИспользованияКарты,'17530101') > (GETDATE()-30)  OR (NULLIF($Спр.СрокИспользованияКарты,'17530101') IS NULL)) ";
	ЗапросКлиент.УстановитьТекстовыйПараметр("ПустаяДата", Дата(1753,1,1));
	
	//получим все групповые скидки товаров
	
	итГруппыСкидок=ПолучитьГрупповыеСкидкиТоваров();
	
	
	состояние("Заполнение промежуточной таблицы товаров...");
	
	Всего=ТаблТоваровВыг.КоличествоСтрок();
	с=0;
	ТаблТоваровВыг.ВыбратьСтроки();
	Пока ТаблТоваровВыг.ПолучитьСтроку()=1 Цикл
		
		с=с+1;
		Состояние("Обработано: "+с+"/"+Всего);
		Если ПустоеЗначение(ТаблТоваровВыг.ТекущийЭлемент)=1 Тогда
			Продолжить;
		КонецЕсли;	
		
		ПроцентНДС=1+ПроцентНДС(ТаблТоваровВыг.СтавкаНДС)/100;


		ВидСкидки="";
		            
		Цена=ЦенаТовараПоКатегорииДляТовара(ТаблТоваровВыг.ТекущийЭлемент,выбКатегорияЦен)*ПроцентНДС;
		ЦенаСоСк=Окр(Цена * (1-глПроцентСкидки(ТаблТоваровВыг.ТекущийЭлемент,,выбКатегорияЦен,ВидСкидки)/100),2);
            
		Цена_ = семПолучитьЦенуТовара( ТаблТоваровВыг.ТекущийЭлемент, выбКатегорияЦен, РабочаяДата() );
		Если ПустоеЗначение( Цена_ ) = 0 Тогда
			ЗапретСкидкиНаТовар = Цена_.ЗапретСкидки;
		КонецЕсли;
		
		Если ВидСкидки=Перечисление.ВидСкидки.АкционныйТовар Тогда
			ЗапретСкидкиНаТовар=1;
		КонецЕсли;             
		    
		товарГруппаСкидок=0;
		Если итГруппыСкидок.НайтиСтроку("Товар",ТаблТоваровВыг.ТекущийЭлемент,,1)>0 Тогда
			товарГруппаСкидок=итГруппыСкидок.ГруппаСкидок;
		КонецЕсли;
		
		
		ТаблТоваров.НоваяСтрока();
		ТаблТоваров.ЗапретСкидкиНаТовар = ЗапретСкидкиНаТовар;
		ТаблТоваров.Товар=ТаблТоваровВыг.ТекущийЭлемент;
		ТаблТоваров.СтавкаНДС=ТаблТоваровВыг.СтавкаНДС;
//		ТаблТоваров.грТоваров=?(ТаблТоваровВыг.ЗапретСкидкиНаТовар=1,"0",?(ТаблТоваровВыг.ГруппаСкидок=0,"1111",Строка(ТаблТоваровВыг.ГруппаСкидок))); //номер группы скидок из справочника
		ТаблТоваров.грТоваров=?(ТаблТоваров.ЗапретСкидкиНаТовар=1,"9999",?(товарГруппаСкидок=0,"1111",Строка(товарГруппаСкидок))); //номер группы скидок из справочника
		ТаблТоваров.ШтрихКод=СокрЛП(ТаблТоваровВыг.КодДляРозницы); 
		ТаблТоваров.Наименование=СокрЛП(ТаблТоваровВыг.НаименованиеДляЦенника);
		ТаблТоваров.Цена=Цена;
		
		ТаблТоваров.ЦенаСоСк=ЦенаСоСк;                    
		ТаблТоваров.Цена=ТаблТоваров.ЦенаСоСк;
		
		
		
		ТаблТоваров.Весовой=?(ТаблТоваровВыг.БазоваяЕдиницаИзмерения=Перечисление.ЕдиницыИзмерения.Килограмм,1,0);
		Если (ТаблТоваровВыг.ТекущийЭлемент.ПометкаУдаления()=1) ИЛИ (УдалениеИзКассы=1) Тогда
			ТаблТоваров.Действие="E";
		Иначе
			ТаблТоваров.Действие="A";
		КонецЕсли; 
		
		Цена=ТаблТоваров.Цена;
		ЦенаСоСк=ТаблТоваров.ЦенаСоСк;
		Если ПроверитьШтрихкод(СокрЛП(ТаблТоваровВыг.ТекущийЭлемент.ШтрихКод))=1 Тогда
			ТаблТоваров.НоваяСтрока();
			ТаблТоваров.ЗапретСкидкиНаТовар = ЗапретСкидкиНаТовар;
			ТаблТоваров.Товар=ТаблТоваровВыг.ТекущийЭлемент;
			ТаблТоваров.СтавкаНДС=ТаблТоваровВыг.СтавкаНДС;
			ТаблТоваров.грТоваров=?(ТаблТоваров.ЗапретСкидкиНаТовар=1,"9999",?(товарГруппаСкидок=0,"1111",Строка(товарГруппаСкидок))); //номер группы скидок из справочника
			ТаблТоваров.ШтрихКод=СокрЛП(ТаблТоваровВыг.ШтрихКод); 
			ТаблТоваров.Наименование=СокрЛП(ТаблТоваровВыг.НаименованиеДляЦенника);
			ТаблТоваров.Цена=Цена;
			ТаблТоваров.ЦенаСоСк=ЦенаСоСк;
			ТаблТоваров.Весовой=?((ТаблТоваровВыг.БазоваяЕдиницаИзмерения=Перечисление.ЕдиницыИзмерения.Килограмм)
			ИЛИ (ТаблТоваровВыг.БазоваяЕдиницаИзмерения=Перечисление.ЕдиницыИзмерения.Грамм)
			ИЛИ (ТаблТоваровВыг.БазоваяЕдиницаИзмерения=Перечисление.ЕдиницыИзмерения.Тонна),1,0);
			Если (ТаблТоваровВыг.ТекущийЭлемент.ПометкаУдаления()=1) ИЛИ (УдалениеИзКассы=1) Тогда
				ТаблТоваров.Действие="E";
			Иначе
				ТаблТоваров.Действие="A";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	                        
	//выгружаем всегда на автомате группы скидок и акционные скидки на товары
	Если флАкционныеТовары=1 Тогда
		ВыгрузитьГрупповыеСкидкиТоваров(ТаблТоваров);
		семВыгрузитьАкционныеТовары(ТаблТоваров);
	КонецЕсли;

	ТаблКлиентов_=ЗапросКлиент.ВыполнитьИнструкцию(ТекстЗапросаКлиент);
	
	//Если ЗапросКлиент.Выполнить(ТекстЗапросаКлиент)=0 Тогда
	//	Сообщить("С запросом по клиентам все плохо");
	//	Возврат;
	//КонецЕсли;                                      
	
	СпрАкц=СоздатьОбъект("Справочник.АкционныеСкидкиКлиентов");

	Всего=ТаблКлиентов_.КоличествоСтрок();
	состояние("Заполнение промежуточной таблицы клиентов...");
	ТаблКлиентов_.ВыбратьСтроки();
	Пока (ТаблКлиентов_.ПолучитьСтроку()=1) И (ВыгружатьКлиентов=1) Цикл
		
		с=с+1;
		Состояние("Обработано: "+с+"/"+Всего);
		
		Клиент=ТаблКлиентов_.Клиент;
		//КлиентСкидка=Клиент.КлиентСкидка.Получить(РабочаяДата());
		//КлиентСкидка = семПолучитьСкидкуКлиента( Клиент );   
		КлиентСкидка = ТаблКлиентов_.Скидка;
		
		Если Число(ТаблКлиентов_.СрокИспользованияКарты) <> 0 Тогда
			Если (РабочаяДата()-ТаблКлиентов_.СрокИспользованияКарты >30 ) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ТаблКлиентов.НоваяСтрока();
		ТаблКлиентов.Клиент=Клиент;
		ТаблКлиентов.Карта=СокрЛП(ТаблКлиентов_.Карта);
		ТаблКлиентов.Наименование=СокрЛП(ТаблКлиентов_.Наименование);
		ТаблКлиентов.Адрес1=СокрЛП(ТаблКлиентов_.Адрес1);
		ТаблКлиентов.Адрес2=СокрЛП(ТаблКлиентов_.Адрес2);
		ТаблКлиентов.Адрес3=СокрЛП(ТаблКлиентов_.Адрес3);
		ТаблКлиентов.ИдентПоКарте=1;
		ТаблКлиентов.грСкидок = ТаблКлиентов_.ГруппаСкидки;
		
		//СпрАкц.ИспользоватьВладельца(ТаблКлиентов.Клиент);
		//СпрАкц.ВыбратьЭлементы(1);
		//Если СпрАкц.ПолучитьЭлемент()=0 Тогда
		//	ТаблКлиентов.Скидка=КлиентСкидка;
		//	ТаблКлиентов.грСкидок="";
		//	ТаблКлиентов.СтрПроцентов=СтрЗаменить(Формат(КлиентСкидка,"Ч6.2"),".","");
		//Иначе                        
		//	//			ТаблКлиентов.грСкидок=ТаблКлиентов.Карта;
		//	ТаблКлиентов.Скидка=0;
		//КонецЕсли;
		
		ТаблКлиентов.Скидка=КлиентСкидка;
		
		Если ТаблКлиентов_.ПометкаУдаления=1 Тогда
			ТаблКлиентов.Действие="E";
		Иначе
			ТаблКлиентов.Действие="A";
		КонецЕсли;
		
		// сем \\
		Если Число(ТаблКлиентов_.СрокИспользованияКарты) <> 0 Тогда
			Если (РабочаяДата()-ТаблКлиентов_.СрокИспользованияКарты <30 ) Тогда
				ТаблКлиентов.Действие="E";
			КонецЕсли;
		КонецЕсли;
		// сем //

		//PR Begin
		//		спец скидки для фестиваля - группа скидок назначается у товара;
		//Если ПустоеЗначение(Клиент.ДопКод)=0 Тогда //только для клиентов ПКП
		//	ТаблСкидок.НоваяСтрока();
		//	ТаблСкидок.ШтрихКод=2500;
		//	ТаблСкидок.карта=ТаблКлиентов.Карта;
		//	ТаблСкидок.Скидка=25*100; //скидка клиента 25% для товаров данной группы
		//	ТаблСкидок.ЭтоКодТовара=0;
		//	ТаблСкидок.Действие="A"; //добавление скидки
		//КонецЕсли;

		//PR Begin
		//		спец скидки 20% - группа скидок назначается у товара;

	
		Если Лев(ТаблКлиентов.грСкидок,3)="VIP" Тогда
		Иначе
			//Если ПустоеЗначение(Клиент.ДопКод)=0 Тогда //только для клиентов ПКП
			//	ТаблСкидок.НоваяСтрока();
			//	ТаблСкидок.ШтрихКод=2000;
			//	ТаблСкидок.карта=ТаблКлиентов.Карта;
			//	ТаблСкидок.Скидка=20*100; //скидка клиента 20% для товаров данной группы
			//	ТаблСкидок.ЭтоКодТовара=0;
			//	ТаблСкидок.Действие="A"; //добавление скидки
			//КонецЕсли;
		КонецЕсли;		
		// PR End
		
		
		//		Продолжить;
		Если Лев(ТаблКлиентов.грСкидок,3)="VIP" Тогда
		Иначе
			//ТаблСкидок.НоваяСтрока();
			//ТаблСкидок.ШтрихКод=1111;
			//ТаблСкидок.карта=ТаблКлиентов.Карта;
			//ТаблСкидок.Скидка=КлиентСкидка*100; //скидка клиента
			//ТаблСкидок.ЭтоКодТовара=0;
			//Если КлиентСкидка=0 Тогда
			//	ТаблСкидок.Действие="E"; //удаление скидки
			//Иначе
			//	ТаблСкидок.Действие="A"; //добавление скидки
			//КонецЕсли;
			
	//		Если ПустоеЗначение(Клиент.ДопКод)=0 Тогда //только для клиентов ПКП
	//			ТаблСкидок.НоваяСтрока();
	//			ТаблСкидок.ШтрихКод=1000;
	//			ТаблСкидок.карта=ТаблКлиентов.Карта;
	//			ТаблСкидок.Скидка=10*100; //скидка клиента 15% для товаров данной группы
	//			ТаблСкидок.ЭтоКодТовара=0;
	//			ТаблСкидок.Действие="A"; //добавление скидки
	//		КонецЕсли;
	//
	//
	//		Если ПустоеЗначение(Клиент.ДопКод)=0 Тогда //только для клиентов ПКП
	//			ТаблСкидок.НоваяСтрока();
	//			ТаблСкидок.ШтрихКод=1500;
	//			ТаблСкидок.карта=ТаблКлиентов.Карта;
	//			ТаблСкидок.Скидка=15*100; //скидка клиента 15% для товаров данной группы
	//			ТаблСкидок.ЭтоКодТовара=0;
	//			ТаблСкидок.Действие="A"; //добавление скидки
	//		КонецЕсли;
			
		КонецЕсли;

		//не будем исполоьзовать акционные цены клиентов  в кассах
		//СпрАкц.ИспользоватьВладельца(ТаблКлиентов.Клиент);
		//СпрАкц.ВыбратьЭлементы(1);
		//Пока СпрАкц.ПолучитьЭлемент()=1 Цикл
		//	
		//	Тов=СпрАкц.Товар;
		//	
		//	Если Тов.ДляРозницы=1 Тогда
		//		
		//		Если ((РабочаяДата()>=СпрАкц.ДатаНачала) И (РабочаяДата()<=СпрАкц.ДатаКонца)) И
		//		(СпрАкц.ПометкаУдаления()=0) Тогда
		//		ИначеЕсли ((РабочаяДата()-СпрАкц.ДатаКонца)>10) Тогда
		//			Продолжить;; //Удаление скидок, если акция закончилась
		//		КонецЕсли;
		//		
		//		ТаблСкидок.НоваяСтрока();
		//		ТаблСкидок.ЭтоКодТовара=1;
		//		ТаблСкидок.ШтрихКод=Тов.КодДляРозницы;
		//		ТаблСкидок.карта=ТаблКлиентов.Карта;
		//		ТаблСкидок.Скидка=СпрАкц.ПроцентСкидки*100;
		//		
		//		Если ((РабочаяДата()>=СпрАкц.ДатаНачала) И (РабочаяДата()<=СпрАкц.ДатаКонца)) И
		//		(СпрАкц.ПометкаУдаления()=0) Тогда
		//			ТаблСкидок.Действие="A"; //добавление скидки
		//		ИначеЕсли ((РабочаяДата()-СпрАкц.ДатаКонца)<10) Тогда
		//			ТаблСкидок.Действие="E"; //Удаление скидок, если акция закончилась
		//		КонецЕсли;
		//		
		//		ДатаНачала_=Формат(СпрАкц.ДатаНачала,"Д ГГГГММДД");
		//		ДатаКонца_=Формат(СпрАкц.ДатаКонца,"Д ГГГГММДД");
		//		
		//		ТаблСкидок.ДатаНачала=Прав(ДатаНачала_,2)+Сред(ДатаНачала_,5,2)+Лев(ДатаНачала_,4);
		//		ТаблСкидок.ДатаКонца=Прав(ДатаКонца_,2)+Сред(ДатаКонца_,5,2)+Лев(ДатаКонца_,4);
		//		
		//		Если ПроверитьШтрихкод(СокрЛП(Тов.ШтрихКод))=1 Тогда
		//			ТаблСкидок.НоваяСтрока();
		//			ТаблСкидок.ШтрихКод=Тов.ШтрихКод;
		//			ТаблСкидок.ЭтоКодТовара=1;
		//			ТаблСкидок.карта=ТаблКлиентов.Карта;
		//			ТаблСкидок.Скидка=СпрАкц.ПроцентСкидки*100;
		//			Если ((РабочаяДата()>=СпрАкц.ДатаНачала) И (РабочаяДата()<=СпрАкц.ДатаКонца)) И
		//			(СпрАкц.ПометкаУдаления()=0) Тогда
		//				ТаблСкидок.Действие="A"; //добавление скидки
		//			Иначе
		//				ТаблСкидок.Действие="E"; //Удаление скидок, если акция закончилась
		//			КонецЕсли;
		//			
		//			ТаблСкидок.ДатаНачала=Прав(ДатаНачала_,2)+Сред(ДатаНачала_,5,2)+Лев(ДатаНачала_,4);
		//			ТаблСкидок.ДатаКонца=Прав(ДатаКонца_,2)+Сред(ДатаКонца_,5,2)+Лев(ДатаКонца_,4);
		//			
		//		КонецЕсли;
		//	КонецЕсли;
		//	
		//КонецЦикла;
		
	КонецЦикла;
	
	//все... заполнили клиентов и товары, теперь попробуем проставить для них цены. 
	// это очень долго, но что делать
	
	состояние("Заполнение промежуточной таблицы валют...");
	спр=СоздатьОбъект("Справочник.Валюты");      
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()=1 Цикл
		//спр.ИспользоватьДату(РабочаяДата());
		Если НЕ((Число(Спр.Код)=1)
		ИЛИ (Число(Спр.Код)=2)) Тогда
			Продолжить;
		КонецЕсли;
		Таблвалют.НоваяСтрока();		ТаблВалют.НомерВал=Спр.Код; 
		ТаблВалют.Десятичные=4;
		ТаблВалют.Курс=Число(Формат(КурсДляВалюты(Спр.ТекущийЭлемент(),РабочаяДата()),"Ч(0)7.5"))*10000;
		ТаблВалют.Наименование=СокрЛП(Спр.Наименование);
		ТаблВалют.ПолнНаименование=СокрЛП(Спр.ПолноеНаименование);
		Если Спр.ПометкаУдаления()=1 Тогда
			ТаблВалют.Действие="E"; 
		Иначе
			ТаблВалют.Действие="A";
		КонецЕсли; 
	КонецЦикла;  
	
	состояние("Формирование выходного файла txt...");
	
	//все теперь генерим сам файл
	Текст=СоздатьОбъект("Текст");                    
	
	Если ВыгружатьКлиентов=1 Тогда
		
		//	Текст.КодоваяСтраница(0);
		Текст.ДобавитьСтроку("# Клиенты");
		ТаблКлиентов.ВыбратьСтроки();
		Пока ТаблКлиентов.ПолучитьСтроку() = 1 Цикл
			//КлиентГруппа = семПолучитьГруппуПЛ( 1, ТаблКлиентов.Клиент.ДопКод, РабочаяДата());
			
			Если Лев(ТаблКлиентов.грСкидок,3)="VIP" Тогда
				Текст.ДобавитьСтроку("C;"
				+ТаблКлиентов.Действие+";"
				+WinToDos(ТаблКлиентов.Карта)+";;" 
				+WinToDos(ТаблКлиентов.Наименование)+";" 
				+WinToDos(ТаблКлиентов.Адрес1)+";"
				+WinToDos(ТаблКлиентов.Адрес2)+";"
				+WinToDos(ТаблКлиентов.Адрес3)+";;"
//				+WinToDos(ТаблКлиентов.грСкидок)+";;"
				//+WinToDos(ТаблКлиентов.Карта)+";"
				+WinToDos(Окр(ТаблКлиентов.Скидка*100,0,1))
				+";;1;;;1;;;;;;;;;;;;;;;1;;;"
				);
			
			Иначе
				Текст.ДобавитьСтроку("C;"
				+ТаблКлиентов.Действие+";"
				+WinToDos(ТаблКлиентов.Карта)+";;" 
				+WinToDos(ТаблКлиентов.Наименование)+";" 
				+WinToDos(ТаблКлиентов.Адрес1)+";"
				+WinToDos(ТаблКлиентов.Адрес2)+";"
				+WinToDos(ТаблКлиентов.Адрес3)+";"
				+WinToDos(ТаблКлиентов.грСкидок)+";"
//				+WinToDos(ТаблКлиентов.Карта)+";"
	//			+WinToDos(Окр(ТаблКлиентов.Скидка*100,0,1))+";;1;;;1;;;;;;;;;;;;;;;1;;;"
				+";;1;;;1;;;;;;;;;;;;;;;1;;;"
				);
				
				
			КонецЕсли;
		КонецЦикла;                   
		
		Текст.ДобавитьСтроку("# Скидки");
		ТаблСкидок.ВыбратьСтроки();
		Пока ТаблСкидок.ПолучитьСтроку() = 1 Цикл
			Текст.ДобавитьСтроку("P;"
			+ТаблСкидок.Действие+";"
			+ТаблСкидок.Карта+";" 
			+СокрЛП(ТаблСкидок.ШтрихКод)+";2;"
			+ТаблСкидок.Скидка+";1;"+ТаблСкидок.ЭтоКодТовара+";;;;;;;"+ТаблСкидок.ДатаНачала+";"+ТаблСкидок.ДатаКонца+";0700;2400;1;1;1;1;1;1;1;"
			);
		КонецЦикла;                   
		
	КонецЕсли;
	
	
	Текст.ДобавитьСтроку("# Валюты");
	Таблвалют.ВыбратьСтроки();
	Пока Таблвалют.ПолучитьСтроку() = 1 Цикл
		Текст.ДобавитьСтроку("F;"
		+Таблвалют.Действие+";"
		+WinToDos(Таблвалют.НомерВал)+";" 
		+Таблвалют.Десятичные+";" 
		+Таблвалют.Курс+";;" 
		
		+WinToDos(Таблвалют.Наименование)+";"
		+WinToDos(Таблвалют.ПолнНаименование)+";"
		);
	КонецЦикла;
	
	
	Текст.ДобавитьСтроку("# Товары");
	ТаблТоваров.ВыбратьСтроки();
	Пока ТаблТоваров.ПолучитьСтроку() = 1 Цикл
		НДС_="B";
		рез=0;
		
		НДС_=глВернутьСтавкуНДС_POS(ТаблТоваров.СтавкаНДС,"Код",РабочаяДата());
		//рез=СтавкиНДС.НайтиЗначение(ТаблТоваров.СтавкаНДС);
		//Если рез>0 Тогда
		//	СтавкиНДС.ПолучитьЗначение(рез,НДС_);
		//КонецЕсли;
		
		Текст.ДобавитьСтроку("V;"
		+ТаблТоваров.Действие+";"
		+WinToDos(ТаблТоваров.ШтрихКод)+";" 
		+WinToDos(ТаблТоваров.Наименование)+";1;"
		+WinToDos(ТаблТоваров.грТоваров)+";"
		+Окр(ТаблТоваров.ЦенаСоСк*100,0,1)+";;"
		+Окр(ТаблТоваров.Цена*100,0,1)+";;;;"+НДС_+";;;;;;;"
		+ТаблТоваров.ЗапретСкидкиНаТовар+";;"
		+ТаблТоваров.Весовой+";;;"
		);
	КонецЦикла;                   

	
	Если ВыгружатьРаботников=1 Тогда
		
		Состояние( "Выгрузка скидок ..." );
		Текст.ДобавитьСтроку("# Скидки");
		ODBCDatabase = СоздатьОбъект("ODBCDatabase"); 
		ConnectionString = "Driver={SQL Server};Server="+кСерверVDB+";UID=sa; PWD=vlrevlor;Database=intranet;";	
		Если ODBCDatabase.Соединение(ConnectionString) = 0 Тогда Возврат; КонецЕсли; 
		ODBCRecordSet = СоздатьОбъект( "ODBCRecordSet" );
		ODBCRecordSet.УстБД(ODBCDatabase);
		ТекстЗапроса="
		|SELECT cmd
		|FROM pos_7500_exp
		|ORDER BY npk
		|";
		табл = ODBCRecordSet.ВыполнитьИнструкцию(ТекстЗапроса);
		табл.ВыбратьСтроки();
		Пока табл.ПолучитьСтроку() = 1 Цикл
			Текст.ДобавитьСтроку(СокрЛП(табл.cmd));
		КонецЦикла;
   	КонецЕсли;
     
   	
//   	ТаблТоваров.ВыбратьСтроку();
		
	Сообщить("Выгружено: "+ТаблТоваров.КоличествоСтрок()+" кодов товаров");
	ТаблТоваров.Свернуть("Товар","");
	Сообщить("из них уникальных позиций:  "+ТаблТоваров.КоличествоСтрок());
	
	Текст.Записать(ПутьВыгрузки);
	
	Сообщить("Записан файл "+ПутьВыгрузки+" !!!");
	
	
КонецПроцедуры

//*******************************************
Процедура ВыгрузитьВременныеЦены()
	
	ТаблТоваров=СоздатьОбъект("ТаблицаЗначений"); 
	ТаблТоваров.НоваяКолонка("Товар"); 
	ТаблТоваров.НоваяКолонка("ШтрихКод"); 
	ТаблТоваров.НоваяКолонка("грТоваров");
	ТаблТоваров.НоваяКолонка("Наименование");
	ТаблТоваров.НоваяКолонка("ЦенаСоСк");
	ТаблТоваров.НоваяКолонка("Цена");
	ТаблТоваров.НоваяКолонка("Весовой");
	ТаблТоваров.НоваяКолонка("Действие");
	
	ТаблКлиентов=СоздатьОбъект("ТаблицаЗначений");
	ТаблКлиентов.НоваяКолонка("Клиент");
	ТаблКлиентов.НоваяКолонка("Карта");
	ТаблКлиентов.НоваяКолонка("Наименование");
	ТаблКлиентов.НоваяКолонка("Адрес1"); 
	ТаблКлиентов.НоваяКолонка("Адрес2");
	ТаблКлиентов.НоваяКолонка("Адрес3");
	ТаблКлиентов.НоваяКолонка("ИдентПоКарте");
	ТаблКлиентов.НоваяКолонка("Действие");
	
	ТаблСкидок=СоздатьОбъект("ТаблицаЗначений"); 
	ТаблСкидок.НоваяКолонка("ШтрихКод");  
	ТаблСкидок.НоваяКолонка("Товар"); 
	ТаблСкидок.НоваяКолонка("Карта");
	ТаблСкидок.НоваяКолонка("Скидка");   
	ТаблСкидок.НоваяКолонка("Действие");   
	ТаблСкидок.НоваяКолонка("СтрПроцентов","Строка");
	ТаблСкидок.НоваяКолонка("грТоваров");
	
	списВидов=СоздатьОбъект("СписокЗначений"); 
	для А=1 по списВидовТоваров.РазмерСписка() Цикл
		Если списВидовТоваров.Пометка(А)=1 Тогда
			СписВидов.ДобавитьЗначение(списВидовТоваров.ПолучитьЗначение(А));
		КонецЕсли;
	КонецЦикла;
	
	Запрос=СоздатьОбъект("Запрос");
	ТекстЗапроса=	"//{{ЗАПРОС(Номенклатура)
	|ТекущийЭлемент = Справочник.Номенклатура.ТекущийЭлемент;
	|ВидТовара = Справочник.Номенклатура.ВидТовара;
	|ШтрихКод = Справочник.Номенклатура.ШтрихКод;
	|СтавкаНДС = Справочник.Номенклатура.СтавкаНДС;
	|КодДляРозницы = Справочник.Номенклатура.КодДляРозницы;
	|ДляРозницы = Справочник.Номенклатура.ДляРозницы;
	|БазоваяЕдиницаИзмерения = Справочник.Номенклатура.БазоваяЕдиницаИзмерения;
	|НаименованиеДляЦенника = Справочник.Номенклатура.НаименованиеДляЦенника;
	|Группировка ТекущийЭлемент без групп упорядочить по ТекущийЭлемент.Код;
	|Условие(ВидТовара в списВидов);	
	|Условие(ДляРозницы=1);
	|"//}}ЗАПРОС            
	;       
	
	ТекстЗапроса=ТекстЗапроса + "Условие(ТекущийЭлемент в СписТоваров);";
	
	Если Запрос.Выполнить(ТекстЗапроса)=0 Тогда
		Сообщить("С запросом по товарам все плохо");
		Возврат;
	КонецЕсли;                                      
	
	состояние("Заполнение промежуточной таблицы товаров...");
	Пока Запрос.Группировка()=1 Цикл
		Если ПустоеЗначение(Запрос.ТекущийЭлемент)=1 Тогда
			Продолжить;
		КонецЕсли;	
		
		ПроцентНДС=1+ПроцентНДС(Запрос.СтавкаНДС)/100;
		
		ТаблСкидок.НоваяСтрока();
		ТаблСкидок.ШтрихКод=Запрос.КодДляРозницы;
		ТаблСкидок.карта="1";
		ТаблСкидок.Скидка=Скидка*100;
		Если УдалениеСкидок=1 Тогда
			ТаблСкидок.Действие="E";
		Иначе
			ТаблСкидок.Действие="A";
		КонецЕсли;
		
	КонецЦикла;
	
	//все... заполнили клиентов и товары, теперь попробуем проставить для них цены. 
	// это очень долго, но что делать
	
	состояние("Формирование выходного файла txt...");
	
	//все теперь генерим сам файл
	Текст=СоздатьОбъект("Текст");                    
	//	Текст.КодоваяСтраница(0);
	
	Текст.ДобавитьСтроку("# Клиенты");
	Текст.ДобавитьСтроку("C;A;1;;Akcijas prece;;;;1;;;1;;;0;;;;;;;;;;;;;;;;;;");
	Текст.ДобавитьСтроку("# Скидки");
	ТаблСкидок.ВыбратьСтроки();
	Пока ТаблСкидок.ПолучитьСтроку() = 1 Цикл
		Текст.ДобавитьСтроку("P;"
		+ТаблСкидок.Действие+";"
		+WinToDos(ТаблСкидок.Карта)+";" 
		+СокрЛП(ТаблСкидок.ШтрихКод)+";2;"
		+WinToDos(ТаблСкидок.Скидка)+";1;1;;;;;;;;;"+Лев(ВремяС,2)+Прав(ВремяС,2)+";"+Лев(ВремяПо,2)+Прав(ВремяПо,2)+";;;;;;;;;;"
		);
	КонецЦикла;                   
	
	Текст.Записать(ПутьВыгрузки);
	
	Сообщить("Записан файл "+ПутьВыгрузки+" !!!");
	
КонецПроцедуры


//***********************************************
//Функия ищет в списке элемент и возвращает 1 в случае вхождения, 0 иначе (аналог "в" в запросе) 
//Создана потому, что запрос постоянно вызывал невосстановимую ошибку базы данных
Функция НайтиВСписке(СписокДляВыбора,ЭлементВыбора) 	//теперь не используется
	Если СписокДляВыбора.РазмерСписка()=0 Тогда
		Возврат 1;
	КонецЕсли;    
	Для А=1 По СписокДляВыбора.РазмерСписка() Цикл
		Зн = СписокДляВыбора.ПолучитьЗначение(А);
		Если Зн.ЭтоГруппа()=1 Тогда
			Если ЭлементВыбора.ПринадлежитГруппе(Зн)=1 Тогда
				Возврат 1;
			КонецЕсли;          
		КонецЕсли;
		Если Зн = ЭлементВыбора Тогда
			Возврат 1;
		КонецЕсли;
	КонецЦикла;
	Возврат 0;
КонецФункции

//*******************************************
Процедура ДобавитьНовый(Куда,ТипОбъекта,Режим)		
	Спр = СоздатьОбъект(ТипОбъекта);
	Если Куда.РазмерСписка()>0 Тогда
		Спр.НайтиЭлемент(Куда.ПолучитьЗначение(Куда.ТекущаяСтрока()));
	КонецЕсли;
	Результат = 1;
	Пока Результат = 1 Цикл 
		Спр.ВыборГруппы(1);
		выб = Спр.Выбрать("Выбор","ДляВыбора");
		Результат = ?(Режим = 1,0,Мин(Выб,Результат));
		Если Выб = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если (Куда.РазмерСписка()>0) и (НайтиВСписке(Куда,Спр.ТекущийЭлемент())=1) тогда
			Предупреждение("Этот элемент в списке уже есть!!!");
			Продолжить;
		КонецЕсли;
		Куда.ДобавитьЗначение(Спр.ТекущийЭлемент());
		Куда.ТекущаяСтрока(Куда.РазмерСписка());
	КонецЦикла;
КонецПроцедуры
//*******************************************
Процедура УдалитьСтарый(Откуда,Режим)
	Если Откуда.РазмерСписка()=0 Тогда
		Возврат;
	КонецЕсли;
	Если Режим = 2 Тогда
		Откуда.УдалитьВсе();
	Иначе
		НомСтр = Откуда.ТекущаяСтрока(); 
		Откуда.УдалитьЗначение(Откуда.ТекущаяСтрока());
		Если НомСтр>1 Тогда
			Откуда.ТекущаяСтрока(НомСтр-1);
		Иначе
			Если Откуда.РазмерСписка()>0 Тогда
				Откуда.ТекущаяСтрока(1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;		
КонецПроцедуры 
//_____________________________________________________________________________
Процедура ПриВыбореЗакладки(Номер,Значение) //предопределенная
	Если Значение=1 Тогда
		Форма.ИспользоватьСлой("Основной,Выгрузка",2);
	Иначе
		Форма.ИспользоватьСлой("Основной,Загрузка",2);
	КонецЕсли;	
КонецПроцедуры //ПриВыбореЗакладки
//_____________________________________________________________________________
Процедура ВыбратьФайл(Режим)   
	Перем ИмяФ, Кат;
	Кат=КаталогИБ();
	Если Режим="Выгрузка" Тогда 
		имяФ=ПутьВыгрузки;
		Если ФС.ВыбратьФайл(1,имяФ,Кат,"Выгрузка в ККМ","Текстовые файлы (*.txt)|*.txt","txt")=1 Тогда
			ПутьВыгрузки=кат+ИмяФ;
		КонецЕсли;                
	Иначе
		имяФ=ПутьЗагрузки;     
		Если ФС.ВыбратьКаталог(Кат,"Загрузка из ККМ",) = 1 Тогда
			//	    Если ФС.ВыбратьФайл(0,имяФ,Кат,"Загрузка из ККМ","Текстовые файлы (*.txt)|*.txt","txt")=1 Тогда
			ПутьЗагрузки=кат;
		КонецЕсли;                
	КонецЕсли;                       
КонецПроцедуры //УказатьФайл
//_____________________________________________________________________________
Процедура ПриЗакрытии() //предопределенная
	глНеНужнаПроверкаИтогов=0;
	СохранитьЗначение("ПутьВыгрузки",ПутьВыгрузки); 
	СохранитьЗначение("ПутьЗагрузки",ПутьЗагрузки);
КонецПроцедуры //ПриЗакрытии     

//_____________________________________________________________________________
Процедура ПриОткрытии() //предопределенная
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.Установить("Выгрузка",1);
	Форма.Закладки.Установить("Загрузка",2);
	Форма.Закладки.ТекущаяСтрока(2);
	ПриВыбореЗакладки(2,2); 
	выбКатегорияЦен=Константа.РозничнаяКатегорияЦены;
	выбДата=РабочаяДата()-1;
	
	ПутьВыгрузки = СокрЛП(Константа.ПутьВыгрузкиДляCHD7500);
	ПутьЗагрузки = СокрЛП(Константа.ПутьЗагрузкиДляCHD7500);
	
	Для А=1 По Перечисление.ВидыТоваров.КоличествоЗначений() Цикл
		СписВидовТоваров.ДобавитьЗначение(Перечисление.ВидыТоваров.ЗначениеПоНомеру(А));
		Если Найти("Блюдо,Товар",Перечисление.ВидыТоваров.ЗначениеПоНомеру(А).Идентификатор())>0 Тогда
			списВидовТоваров.Пометка(А,1);
		КонецЕсли;
	КонецЦикла;    
	
	Если ПустоеЗначение(Форма.Параметр)=0 Тогда
		Если ТипЗначенияСтр(Форма.Параметр)="СписокЗначений" Тогда
			
			ВыгружатьКлиентов=1;
			ВыгружатьРаботников=1;
			Команда=Форма.Параметр.Получить("Команда");
			Если СокрЛП(Команда)="Выгрузка" Тогда
				ПоПереоценкам=Число(Форма.Параметр.Получить("ПоПереоценкам"));
				ВсеТовары=Число(Форма.Параметр.Получить("ВсеТовары"));
				флАкционныеТовары = Число(Форма.Параметр.Получить("АкционныеТовары"));
				ДатаНачала=РабочаяДата();
				ДатаКонца=ДатаНачала;
				
				Сформировать();    
				ОчиститьФлагИзменения();
				//ФлИзм=MDW.ИДРеквизитаСправочника("Номенклатура","ФлИзменен");
				//ТекстЗапроса="UPDATE SC"+MDW.ИДСправочника("Номенклатура")+" SET SP"+ФлИзм+"=0 WHERE SP"+ФлИзм+"=1";
				//глИсполнитьСКЛ(ТекстЗапроса);
				
			ИначеЕсли Сокрлп(Команда)="Загрузка" Тогда
				ПроводитьДок=1;  
				ЗагрузкаДанных();
			КонецЕсли;
			
		КонецЕсли;
		
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры //ПриОткрытии 
//***************************************************************
//                  

Процедура ДобавитьВСписокОтложенных()
	
	Если ПустоеЗначение(НомерЧекаСписания)=0 Тогда
		Если СписокОтложенныхЧеков.НайтиЗначение(СокрЛП(НомерЧекаСписания))=0 Тогда
			СписокОтложенныхЧеков.ДобавитьЗначение(СокрЛП(НомерЧекаСписания));
		КонецЕсли;      
	КонецЕсли;
	
КонецПроцедуры

ТаблДоков.НоваяКолонка("Пик","Число",,,"",5); 
ТаблДоков.НоваяКолонка("Док","Документ");
ТаблДоков.НоваяКолонка("Вид","Строка",50,,"Документ",30);
ТаблДоков.НоваяКолонка("ВремяМин","Строка",2);
ТаблДоков.НоваяКолонка("НДок",,,,"Номер",15);
ТаблДоков.НоваяКолонка("ДДок","Дата",,,"Дата",15);  
ТаблДоков.НоваяКолонка("ВДок","Строка",0,,"Время",15); 
ТаблДоков.НоваяКолонка("Сумма","Число",,,"Сумма",15,"Ч015.2,",2);
ТаблДоков.ВыводитьПиктограммы("Пик",1);
ТаблДоков.Фиксировать(,1);
ТаблДоков.ВидимостьКолонки("Док",0);

итКассы=СоздатьОбъект("ИндексированнаяТаблица");
Запрос=СоздатьОбъект("ODBCRecordSet");
ТекстЗапроса="SELECT Кассы.ID [Ссылка $Справочник.Кассы]
|					, $Кассы.Склад [Склад $Справочник.МестаХранения]
|					, $ПоследнееЗначение.Кассы.НомерОтдела(Кассы.ID, GETDATE()) НомерОтдела
|			  FROM $Справочник.Кассы AS Кассы
|			  WHERE ($Кассы.ТипККМ = :ТипККМ)";

Запрос.УстановитьТекстовыйПараметр("ТипККМ",Перечисление.ТипыККМ.CHD7500POS);
Запрос.ВыполнитьИнструкцию(ТекстЗапроса,итКассы);
итКассы.ДобавитьИндекс("иНомерОтдела","НомерОтдела");

//СтавкиНДС.ДобавитьЗначение(Перечисление.ЗначенияНДС.безНДС,"A");
//СтавкиНДС.ДобавитьЗначение(Перечисление.ЗначенияНДС.НДС5,"C");
//СтавкиНДС.ДобавитьЗначение(Перечисление.ЗначенияНДС.ЛьготнаяСтавкаНДС,"C");
//СтавкиНДС.ДобавитьЗначение(Перечисление.ЗначенияНДС.ОсновнаяСтавкаНДС,"B");
//СтавкиНДС.ДобавитьЗначение(Перечисление.ЗначенияНДС.ОсновнаяСтавкаНДСНов,"B");

таблДатЧеков = СоздатьОбъект( "ТаблицаЗначений" );
таблДатЧеков.НоваяКолонка("НомерЧека"); 
таблДатЧеков.НоваяКолонка("Дата"); 

ДатаНачала=РабочаяДата();
ДатаКонца=ДатаНачала;
ПоПереоценкам=1;
Автомат=0;
ДатаОтчета=РабочаяДата()-1;
ВыгружатьКлиентов=0;
ВыгружатьРаботников=0;
КолККМ=18;
Форма.ВсеТовары.Доступность(?(НазваниеНабораПрав()="Администратор",1,0));
