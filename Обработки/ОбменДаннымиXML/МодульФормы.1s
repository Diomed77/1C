//Не обрабатывать Инсталлятором МОД
Перем ВыбрБаза;
Перем ПравилаВыгрузки,ПравилаВыгрузки1,ПравилаВыгрузки2;//вспомогательные переменные используется при выгрузке данных
Перем ХМЛ;

Перем ВремФайлЗаголовка;

//просто глобальные переменные
Перем Пакет;//обрабатываемый пакет с данными
Перем ЗагружаемыйИДД;
Перем СписокЖР;

Перем ЦиклДокумента;
Перем РабочДата;


Перем МассивТипов1С[100];

//переменные, которые надо обнулять при каждом запуске загрузки !!!
Перем ЗагружатьСправочникИзПакета,ЗагружатьДокументИзПакета;


//переменные, которые надо обнулять при каждом запуске выгрузки !!!
//Перем СписокПроводимыхДокументов;

//Перед выгрузкой должны быть заранее подготовлены списки:
Перем СписокПовторов,СписокПеречислений,СписСинонимов;


//А перед загрузкой следующие списки:
Перем СписокСоответствийВидов,СписокСоответствийЗначений;

Перем УникальныйИДД;

Перем ИДДБазы;





//ПЕрем ПроведениеПоАлгоритмуМОД,НеРегистрироватьИзмененияМОД; 
Перем ТипСозданияТаблицы,ИмяПервогоУровня;//служебные перемнные для заполнения таблиц работы МОД при работе в упрощенном режиме
Перем ВерсияМОД,МОДИнфо,ИДДляОтладки;
Перем НомерПодтвержденногоПакетаЗагрузки,МаксНомерПакетаВыгрузки,НомерПодтвержденногоПакета;
Перем НомерПакетаВыгрузки;
Перем ДаДа,НетНет;
Перем Конт;
Перем Т,ДублирIDD;

Перем ГлобДок;//глобальный объект типа документ нужен для поиска
Перем ГлобДокЗагрВыгрузки;//а это для загрузки документов
Перем МаксУровень;//максимально допустимый уровень вложенности данных
Перем СписокПодчиненных;
Перем КолТаблицЗначений;
Перем СписокЗагрузки;
Перем МожноЗакрывать;//Можно закрывать файлы dbf - для доступа другим программа
//(закрытие происходит автоматически при обновлении формы)

Перем ИмяТекстовогоФайла,ПерваяИнициализация;

Перем ФлИдентифID;//идентификация объекта сначала по IDD
Перем МаксДатаВыгрДокумента;
Перем ДокументОперации;//название вида документа у операции

Перем ПришлоТолькоПодтверждение;

Перем МаксКолОбъектовВПакете;//ограничение на размер пакета !!!
Перем НоваяВерсияШапки;//флаг показывает , что версия шапки пакета изменилась

Перем МОДДлинаIDДокумента;
Перем МОДДлинаID;

Перем СписокОбъектовЗамены;//для сопоставления перечислений в разных базах !!
Перем СопоставлятьПеречисления;//если 1, то ф функции получить объект будут споставляться
//перечисления, если 0 , то нет - это нужно только когда загружаем шаблон и правила загрузки не используются
//строковое значение представления
Перем РежимНастройки,РасширенныйРежим;
Перем СписокПроводимыхДокументов;//документы которые перепроводятся при загрузке заново мы будем проводить без транзакции !!
Перем ПутьКБазеПриВыгрузке,ПутьКБазеПриЗагрузке;
Перем ИспользоватьФТП,ВстроеннаяАрхивация,ПередачаПоПочте,ИмяМОД;
Перем ЗагрузкаИнфо,ВыгрузкаИнфо,ОбщиеИнфо;//Переменные для статуса состояния работы обмена
Перем глВыражение;//переменная, которой функция Получить() присваивает переданной ей значение (этот механизм используется при интерпретации выражений)
Перем НоваяШапкаПакетов;//константа равная строке "Новая шапка пакетов"
Перем СписокВыборочнойВыгрузки;//список значений с объектами для выгрузки (режим выгрузки должен быть равен 4)
Перем ОбработкаПримера;//флаг, сигнализирующий что выгружается или загружается пример
Перем СписокИзмененияИД;//список объектов ИД, которых надо изменить после загрузки



Перем ОткрытьДругуюФорму;


Перем ИнфоПрогрессора,НомерПрогрессора,МаксНомерПрогрессора,ТекПрогрессора,ТекстДляПрогрессора,НачНомерПрогрессора,ДатаНачПрогрессора,ВремяНачПрогрессора ;




Процедура ПросмотрДерева(Дерево,Имя="") Далее
Функция ЗагрузитьСправочник(ПравилаОбмена,Элемент) Далее
Функция ЗагрузитьДокумент(ПравилаОбмена,Элемент) Далее
Функция ПолучитьПравилаЗагрузки(ПервыйРодитель,Имя) Далее
Функция ПолучитьПолныйПуть(Спр,Реж=0) Далее
Функция ПолучитьПравилаВыгрузки(ПервыйРодитель,Знач Имя,НомерПовтора=1) Далее

Функция ПолучитьУникальныйIDD() Далее



Процедура МиграцияИзменений(ВыгрБаза,ИД,Тип,Вид,Дата1,Дата2) Далее
Функция ОдноСлово(Стр) Далее
Функция ПолучитьВладельцаПравил(КакаяТоБаза) Далее



//_____________________________________________________________________________
//Вывод на экран обычных сообщений - при условии что проставлен флаг ВыводитьСообщения
Функция М_Сообщить(ЧтоТо,КакТо="",Реж="")
	Если Реж="" Тогда
		Реж=ВыводитьСообщения;
	КонецЕсли;
	Если Реж=1 Тогда
		Сообщить(ЧтоТо,КакТо);
	КонецЕсли;
КонецФункции //My_Сообщить


//_____________________________________________________________________________
Функция Абс(Сум)
Если Сум<0 Тогда
    Возврат -Сум;
Иначе
    Возврат Сум;
КонецЕсли;    
КонецФункции //Абс


//***************************************************************************************************************
//Перем ИнфоПрогрессора,НомерПрогрессора,МаксНомерПрогрессора,ТекПрогрессора,ТекстДляПрогрессора,НачНомерПрогрессора;
Процедура Прогрессор(Знач Номер=0,Знач МаксНомер=10,Знач НачНомер=0,Текст="")
	Перем Точность;
	Точность=1;
	Если Номер=0 Тогда //инициализация
		ТекПрогрессора="";
		МаксНомерПрогрессора=МаксНомер-НачНомер;
		Если МаксНомерПрогрессора=0 Тогда
			МаксНомерПрогрессора=1;
		КонецЕсли;
		НомерПрогрессора=0;
		ТекстДляПрогрессора=Текст+" ";
		НачНомерПрогрессора=НачНомер;
		ИнфоПрогрессора=Текст;
		//Если Текст<>"" Тогда
		//	Форма.ИспользоватьСлой("Прогрессор",1);
		//Иначе
		//	Форма.ИспользоватьСлой("Прогрессор",0);
		//КонецЕсли;
		Состояние(ТекПрогрессора+" "+ИнфоПрогрессора);
		Возврат;
	КонецЕсли;
	Номер=Номер-НачНомерПрогрессора;
	Если Окр(Номер/МаксНомерПрогрессора,Точность)=Окр(НомерПрогрессора/МаксНомерПрогрессора,Точность) Тогда
		Возврат;//не изменилось !!
	КонецЕсли;
	НомерПрогрессора=Номер;
	ИнфоПрогрессора=ТекстДляПрогрессора;
	Пока СтрДлина(ТекПрогрессора)<10*Номер/МаксНомерПрогрессора Цикл
		ТекПрогрессора=ТекПрогрессора+"|||";
	КонецЦикла;
	Состояние(ТекПрогрессора+"("+Цел(100*Номер/МаксНомерПрогрессора)+"%) "+ИнфоПрогрессора);
КонецПроцедуры //Прогрессор
//***************************************************************************************************************
//***************************************************************************************************************


//_____________________________________________________________________________
Процедура М_Состояние(ЧтоТо)
	Состояние(ЧтоТо);
//	Состояние(""+ТекПрогрессора+" "+ИнфоПрогрессора+" "+ЧтоТо);
КонецПроцедуры //М_Состояние






//******************************XML  вставка******************************
//******************************XML  вставка******************************
//******************************XML  вставка******************************
//глВыгрБазаМОДЗагр
Процедура ПодготовкаПовторовПриВыгрузке()
	Перем ПредИмя[10];
	Перем Повторы[10];
	Если глВыгрБазаМОДВыгр="" Тогда
	    глВыгрБазаМОДВыгр=0;
		глБазаВыгрузкиМОДXML="";
	КонецЕсли;
	
	Если глБазаВыгрузкиМОДXML=ВыбрБаза Тогда
		СписокПовторов=глСписокПравилМОДдляXML.Получить("СписокПовторов");
		СписСинонимов=глСписокПравилМОДдляXML.Получить("СписСинонимов");
		СписокПеречислений=глСписокПравилМОДдляXML.Получить("СписокПеречислений");
	Иначе
		Состояние("Подготовка правил выгрузки...");
		СписокПовторов=СоздатьОбъект("СписокЗначений"); 
		СписСинонимов=СоздатьОбъект("СписокЗначений"); 
		ПравилаВыгрузки.ИспользоватьВладельца(ПолучитьВладельцаПравил(ВыбрБаза));
		ПравилаВыгрузки.ИспользоватьРодителя("");
		ПравилаВыгрузки.ПорядокНаименований();
		ПравилаВыгрузки.ВыбратьЭлементы();
		Выбирать=1;
		НомерПовторения=1;
		ПредУровень=0;
		Пока ПравилаВыгрузки.ПолучитьЭлемент(Выбирать)=1 Цикл
			Выбирать=ПравилаВыгрузки.ЭтоГруппа();
			//проверяем корректность заполнения синонимов
			Синоним=Сокрлп(ПравилаВыгрузки.Синоним);
			Если ПустоеЗначение(Синоним)=1 Тогда
				ПравилаВыгрузки.Синоним=ПравилаВыгрузки.Наименование;
				ПравилаВыгрузки.Записать();
			КонецЕсли;
			Если Выбирать=1 Тогда
				Имя=ПравилаВыгрузки.Наименование;
				Уровень=ПравилаВыгрузки.Уровень();
				ПризнакВыгрузки=ПравилаВыгрузки.ПризнакВыгрузки;
				Если ПризнакВыгрузки=ДаДА Тогда
					Если Синоним<>Имя Тогда
						ПолноеНаименование=ПравилаВыгрузки.ПолноеНаименование();
						Рез=СписСинонимов.Получить(ПолноеНаименование);
						Если ПустоеЗначение(Рез)=1 Тогда
							СписСинонимов.ДобавитьЗначение(Синоним,ПолноеНаименование);
						КонецЕсли;
					КонецЕсли;
				Иначе
					Выбирать=0;    
				КонецЕсли;
				Если Имя=ПредИмя[Уровень] Тогда
					Если ПризнакВыгрузки=ДаДА Тогда
						Если Уровень>ПредУровень Тогда
							Повторы[Уровень]=1;
							Продолжить;
						Иначе
							Повторы[Уровень]=Число(Повторы[Уровень])+1;
						КонецЕсли;
						СписокПовторов.ДобавитьЗначение(ПравилаВыгрузки.ТекущийЭлемент(),ПолучитьПолныйПуть(ПравилаВыгрузки)+Повторы[Уровень]);
					КонецЕсли;
				Иначе
					Повторы[Уровень]=1;
					ПредИмя[Уровень]=Имя;
				КонецЕсли;
				ПредУровень=Уровень;
			КонецЕсли;
		КонецЦикла;
		//СписокПовторов.ВыбратьЗначение("","");
		//СписСинонимов.ВыбратьЗначение("","");
		
		//подготавливаем список видов справочников, которые должны выгружаться
		//как перечисления
		СписокПеречислений=СоздатьОбъект("СписокЗначений");
		Для А=1 По 100 Цикл
			Рез=ПолучитьПравилаВыгрузки("","Справочники",А);
			Если Рез=1 Тогда
				ПравилаВыгрузки.ВыбратьЭлементы();
				Пока ПравилаВыгрузки.ПолучитьЭлемент(0)=1 Цикл
					Если ПравилаВыгрузки.ПризнакВыгрузки=ДаДа Тогда
						Если ПравилаВыгрузки.Движения=ДаДА Тогда
							СписокПеречислений.ДобавитьЗначение(ПравилаВыгрузки.Наименование);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли Рез=-1 Тогда 
				Прервать;
			КонецЕсли;//иначе если Рез=0 - продолжить
		КонецЦикла;
		//СписСправочникПеречисление.ВыбратьЗначение("","");
	
	Если ТипЗначенияСтр(глСписокПравилМОДдляXML)<>"СписокЗначений" Тогда
	    глСписокПравилМОДдляXML=СоздатьОбъект("СписокЗначений"); 
	КонецЕсли;
	глСписокПравилМОДдляXML.Установить("СписокПовторов",СписокПовторов);
	глСписокПравилМОДдляXML.Установить("СписСинонимов",СписСинонимов);
	глСписокПравилМОДдляXML.Установить("СписокПеречислений",СписокПеречислений);
	глБазаВыгрузкиМОДXML=ВыбрБаза;
	Состояние("...");
	КонецЕсли;
КонецПроцедуры 



//_____________________________________________________________________________
Процедура ПодготовкаПовторовПриЗагрузке()
//для загрузки:	
	Если глВыгрБазаМОДЗагр="" Тогда
	    глВыгрБазаМОДЗагр=0;
		глБазаЗагрузкиМОДXML="";
	КонецЕсли;
	Если глБазаЗагрузкиМОДXML=ВыбрБаза Тогда
		СписокСоответствийВидов=глСписокПравилМОДдляXML.Получить("СписокСоответствийВидов");
		СписокСоответствийЗначений=глСписокПравилМОДдляXML.Получить("СписокСоответствийЗначений");
	Иначе
	Состояние("Подготовка правил загрузки...");
	СписокСоответствийВидов=СоздатьОбъект("СписокЗначений");
	СписокСоответствийЗначений=СоздатьОбъект("СписокЗначений"); 
	Спр=СоздатьОбъект("Справочник.ПравилаЗагрузки");
	Спр.ИспользоватьВладельца(ПолучитьВладельцаПравил(ВыбрБаза));
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент(0)=1 Цикл
		Если Спр.ЭтоГруппа()=1 Тогда
			Если Спр.ПризнакЗагрузки=ДаДа Тогда
				Имя=Спр.Наименование;
				Выбирать=0;Добавлять=0;Добавлять2=0;
				Если Имя="Перечисления" Тогда
					Тип="10";Добавлять=1;Выбирать=1;
				ИначеЕсли Имя="Справочники" Тогда
					Тип="11";Добавлять=1;
				ИначеЕсли Имя="Документы" Тогда
					Тип="12";Добавлять=1;
				ИначеЕсли Имя="Календари" Тогда
					Тип="13";Добавлять2=1;
				ИначеЕсли Имя="Виды расчетов" Тогда
					Тип="14";Добавлять2=1;
				ИначеЕсли Имя="Планы счетов" Тогда
					Тип="15";Добавлять=1;Выбирать=1;
				Иначе
					Продолжить;
				КонецЕсли;
				Спр2=СоздатьОбъект("Справочник.ПравилаЗагрузки");
				Спр2.ИспользоватьВладельца(ПолучитьВладельцаПравил(ВыбрБаза));
				Спр2.ИспользоватьРодителя(Спр.ТекущийЭлемент());
				Спр2.ВыбратьЭлементы();
				Пока Спр2.ПолучитьЭлемент(0)=1 Цикл
					Если Спр2.ПризнакЗагрузки=ДаДа Тогда
						Если Добавлять=1 Тогда
							Если Спр2.Наименование<>Сокрлп(Спр2.Синоним) Тогда
								СписокСоответствийВидов.ДобавитьЗначение(Спр2.Наименование,Тип+Сокрлп(Спр2.Синоним));
							КонецЕсли;
						КонецЕсли;
						Если Добавлять2=1 Тогда
							Если Спр2.Наименование<>Сокрлп(Спр2.Синоним) Тогда
								СписокСоответствийЗначений.ДобавитьЗначение(Спр2.Наименование,Тип+Сокрлп(Спр2.Синоним));
							КонецЕсли;
						КонецЕсли;
						Если Выбирать=1 Тогда
							Спр3=СоздатьОбъект("Справочник.ПравилаЗагрузки");
							Спр3.ИспользоватьВладельца(ПолучитьВладельцаПравил(ВыбрБаза));
							Спр3.ИспользоватьРодителя(Спр2.ТекущийЭлемент());
							Спр3.ВыбратьЭлементы();
							Пока Спр3.ПолучитьЭлемент(0)=1 Цикл
								Если Спр3.ПризнакЗагрузки=ДаДа Тогда
									Если Спр3.Наименование<>Сокрлп(Спр3.Синоним) Тогда
										СписокСоответствийЗначений.ДобавитьЗначение(Спр3.Наименование,Тип+Сокрлп(Спр3.Синоним));
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;					
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ТипЗначенияСтр(глСписокПравилМОДдляXML)<>"СписокЗначений" Тогда
	    глСписокПравилМОДдляXML=СоздатьОбъект("СписокЗначений"); 
	КонецЕсли;
	глСписокПравилМОДдляXML.Установить("СписокСоответствийВидов",СписокСоответствийВидов);
	глСписокПравилМОДдляXML.Установить("СписокСоответствийЗначений",СписокСоответствийЗначений);
	глБазаЗагрузкиМОДXML=ВыбрБаза;
	Состояние("...");
	КонецЕсли;
//СписокСоответствийВидов.ВыбратьЗначение("","");
КонецПроцедуры //Процедура ПодготовкаПовторовПриЗагрузке


















//_____________________________________________________________________________
//создать новый номер для загружаемого документа
Функция СоздатьНовыйНомер(ВидДокумента,ДатаДок,СамДокумент=0,Знач СтарыйНомер="");//,СтНомер,ТипНомера,ДлинаНомера)
	Об1=СоздатьОбъект("Документ."+ВидДокумента);	// Это чтоб номер подгонять
	Об2=СоздатьОбъект("Документ");					// А это чтоб искать среди всех с заданным нумератором (см. ниже)          //***** вставка от Алексея Городецкого  :)
	
	//*************** подгонка под нужный тип номера документа - т.к. в разных базах они могут быть разными т.е. числом и строкой
	глСоздатьНовыйОбъект(Об1);
	Об1.НомерДок=СтарыйНомер;
	Номер=Об1.НомерДок;
	//***************
	Номер=?(Сокрлп(Номер)="",1,Номер);
	Если Сокрлп(ДатаДок)="" Тогда
		ДатаДок=РабочаяДата();
	КонецЕсли;
	
	Нумератор=Метаданные.Документ(ВидДокумента).Нумератор; // Получим нумератор
	Если Нумератор.Выбран()=1 Тогда
	    ИдентНумератора=Нумератор.Идентификатор;
	Иначе
		ИдентНумератора=ВидДокумента;
	КонецЕсли;
	
	Пока Об2.НайтиПоНомеру(Номер,ДатаДок,ИдентНумератора)=1 Цикл
		Если Об2.ТекущийДокумент()=СамДокумент Тогда
			Возврат Номер;
		КонецЕсли;
		Номер=Число(Номер)+1;
	КонецЦикла;
	Возврат Номер;
КонецФункции

//_____________________________________________________________________________
//создать новый код для загружаемого элемента справочника и проверка корректности кода 
//если Справ задан , то сверяем найденный со значением Спр (т.е. на равенство с самим собой)
Функция СоздатьНовыйКод(ВидСправочника,Спр,Подчиненность,Мета)
	Перем Спр1,Спр2;
	СтКод=Спр.Код;
	Спр1=СоздатьОбъект("Справочник."+ВидСправочника);
	                   
	СерииКодов=?(Мета.СерииКодов="ВПределахПодчинения",1,0);
	
	ТипКода=Мета.ТипКода;
	Если ТипКода="Числовой" Тогда
	  //подгонка под нужный тип кода т.к. в разных базах они могут быть разными т.е. числом и строкой
	  СтКод=Число(СтКод);
		Иначе
	  СтКод=Сокрлп(СтКод);
	  СтКод=?(СтКод="","0",СтКод);
	КонецЕсли;


	Если Подчиненность=1 Тогда
	    Спр1.ИспользоватьВладельца(Спр.Владелец);
	КонецЕсли;
	
	Если СерииКодов=1 Тогда
		Спр1.ИспользоватьРодителя(Спр.Родитель);
	КонецЕсли;
	
	Если Спр1.НайтиПоКоду(СтКод,СерииКодов)=0 Тогда
		Возврат СтКод;
	Иначе
		Если Спр1.ТекущийЭлемент()=Спр.ТекущийЭлемент() Тогда //мы нашли самого себя т.е. это перезаписывание кода !!!
			Возврат СтКод;
		КонецЕсли;
	КонецЕсли;
	
		
	Если ТипКода="Текстовый" Тогда
		ДлинаКода=Мета.ДлинаКода;
		Код=Сокрлп(Лев(СтКод,ДлинаКода-2));
		Ном=0;
		Пока Спр1.НайтиПоКоду(Прав(Код+Ном,ДлинаКода),СерииКодов)=1 Цикл
				Если Спр1.ТекущийЭлемент()=Спр.ТекущийЭлемент() Тогда //мы нашли самого себя т.е. это перезаписывание кода !!!
					Возврат ""+Код+Ном;
				КонецЕсли;
				Ном=Ном+1;
		КонецЦикла;
		Возврат СтрЗаменить(""+Код+Ном," ","_");
	Иначе//Числовой
		Код=СтКод;
		Вход=0;
		Пока Спр1.НайтиПоКоду(Код,СерииКодов)=1 Цикл
			Если Спр1.ТекущийЭлемент()=Спр.ТекущийЭлемент() Тогда //мы нашли самого себя т.е. это перезаписывание кода !!!
					Возврат Код;
			КонецЕсли;
			Код=Число(Код)+1;
			Если Вход=0 Тогда
			    Вход=1;
				Спр2=СоздатьОбъект("Справочник."+ВидСправочника);
				глСоздатьНовыйОбъект(Спр2);
				Код=Спр2.Код;
				Спр2=0;
			КонецЕсли;
		КонецЦикла;
		Возврат Код;
	КонецЕсли;
КонецФункции






//_____________________________________________________________________________
//поиск документа по его IDD (у 1С в этом плане есть неоднозначное 
//выполнение команды, которое надо обойти)
Функция НайтиДокументПоIDD(Док,ИДДПоиска) 
	Перем Ид;
	Ид=Лев(Сокрлп(ИДДПоиска)+"                 ",17);
	Рез=Док.ВыбратьПоЗначению(,,"IDD",Ид);
	Если Рез=1 Тогда
		Рез=Док.ПолучитьДокумент();
	КонецЕсли;
	Возврат Рез;
КонецФункции //НайтиДокументПоIDD

//_____________________________________________________________________________
//функция выдает строковое представление любого объекта хранения данных 1С
Функция ПолучитьПредставлениеОбъекта(Объект,Тип,Вид)
	Тип=ТипЗначения(Объект);
	Если Тип<10 Тогда
		Возврат ""+Объект;
	ИначеЕсли Тип=10 Тогда //Перечисление
		Вид=Объект.Вид();
		Рез=СписСинонимов.Получить("Перечисления/"+Вид);
		Если ПустоеЗначение(Рез)=0 Тогда
			Вид=Рез;
		КонецЕсли;
		Возврат Объект.Идентификатор();
	ИначеЕсли Тип=11 Тогда //Справочник
		Попытка
		Если НеВыгружатьИДД=0 Тогда
			Вид=Объект.Вид();
			Рез=СписСинонимов.Получить("Справочники/"+Вид);
			Если ПустоеЗначение(Рез)=0 Тогда
				Вид=Рез;
			КонецЕсли;
			Если СписокПеречислений.НайтиЗначение(Объект.Вид())>0 Тогда
				Тип=10;
				Возврат Объект.Наименование;
			Иначе
				Возврат Объект.IDD;
			КонецЕсли;
		Иначе
			Возврат Объект.Наименование;
		КонецЕсли;
		Исключение
			Возврат "";
		КонецПопытки;
	ИначеЕсли Тип=12 Тогда //Документ
		Если НеВыгружатьИДД=0 Тогда
			Возврат Объект.IDD;
		Иначе
			Возврат Объект.НомерДок;
		КонецЕсли;
	ИначеЕсли Тип=13 Тогда //Календарь
		Возврат Объект.Вид();
	ИначеЕсли Тип=14 Тогда //Вид расчета
		Возврат Объект.Код;
	ИначеЕсли Тип=15 Тогда //Счет
		Вид=Объект.Вид();
		Рез=СписСинонимов.Получить("Планы счетов/"+Вид);
		Если ПустоеЗначение(Рез)=0 Тогда
			Вид=Рез;
		КонецЕсли;
		Возврат Объект.Код;
	ИначеЕсли Тип=16 Тогда //Виды субконто
		Возврат Объект.Идентификатор();
	ИначеЕсли Тип=17 Тогда //План счетов
		Возврат Объект.Идентификатор();
	Иначе
		//	Сообщить("Тип="+Тип+"  "+Объект);
		Возврат "";
	КонецЕсли;
КонецФункции //





//_____________________________________________________________________________
//Возвращает справочник заданного вида по его ИДД, если такого справочника нет,
//то производится попытка его загрузки из пакета с данными при Загружать=1
Функция ПолучитьСправочник(Стр,Вид)
	Перем Рез;
	Если (Сокрлп(Стр)<>"")И(Сокрлп(Вид)<>"") Тогда
		Спр=СоздатьОбъект("Справочник."+Вид);
		Если Сокрлп(РеквизитИдентификации)="IDD" Тогда
			Рез=Спр.НайтиПоРеквизиту("IDD",Стр,1);
		Иначе
			Рез=0;
		КонецЕсли;
		Если Рез=0 Тогда
			//причем справочник загружаем  в рамках не более 5-х рекурсий - т.е. защита от зацикливания
			Если ЗагружатьСправочникИзПакета<5 Тогда
				Если Стр=ЗагружаемыйИДД Тогда //проверка от загрузки самого себя, например, когда в справочнике есть на себя ссылка 
				    Возврат "";
				КонецЕсли;
				//наверно еще не загружен - загружаем
				ОдинЭлемент=СписокДоступаКИДД.Получить(Стр);
				Если ТипЗначенияСтр(ОдинЭлемент)<>"OLE.IXMLDOMNode" Тогда
				    Возврат "";
				КонецЕсли;
				
				Справочники=ПолучитьПравилаЗагрузки("","Справочники");
				ПравилаОбмена=ПолучитьПравилаЗагрузки(Справочники,Вид);
				Если ПравилаОбмена="" Тогда
				    Возврат "";
				КонецЕсли;
				ЗагружатьСправочникИзПакета=ЗагружатьСправочникИзПакета+1;
				ЗагруженныйСпр=ЗагрузитьСправочник(ПравилаОбмена,ОдинЭлемент);
				ЗагружатьСправочникИзПакета=ЗагружатьСправочникИзПакета-1;
				Если ЗагруженныйСпр<>0 Тогда
				    Возврат ЗагруженныйСпр;
				КонецЕсли;
			КонецЕсли;
			//пробуем теперь ...
		//	Рез=Спр.НайтиПоРеквизиту("IDD",Стр,1);
		Иначе
			Возврат Спр.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;
	Возврат "";
КонецФункции //ПолучитьСправочник


//_____________________________________________________________________________
//Возвращает справочник заданного вида по его ИДД, если такого справочника нет,
//то производится попытка его загрузки из пакета с данными при Загружать=1
Функция ПолучитьДокумент(Стр,ПримерЗначения)
	Если Сокрлп(Стр)<>"" Тогда
		Док=СоздатьОбъект("Документ");
		Рез=НайтиДокументПоIDD(Док,Стр);
		Если Рез=1 Тогда
			Возврат Док.ТекущийДокумент();
		КонецЕсли;
		
		Если ЗагружатьДокументИзПакета<3 Тогда
			Если Стр=ЗагружаемыйИДД Тогда
			    Возврат "";
			КонецЕсли;
			//наверно еще не загружен - загружаем
			ОдинЭлемент=СписокДоступаКИДД.Получить(Стр);
			Если ТипЗначенияСтр(ОдинЭлемент)<>"OLE.IXMLDOMNode" Тогда
				Возврат "";
			КонецЕсли;
			
			Вид=ПримерЗначения.Вид();
			Документы=ПолучитьПравилаЗагрузки("","Документы");
			ПравилаОбмена=ПолучитьПравилаЗагрузки(Документы,Вид);
			Если ПравилаОбмена="" Тогда
			    Возврат "";
			КонецЕсли;
			ЗагружатьДокументИзПакета=ЗагружатьДокументИзПакета+1;
			ЗагрузитьДокумент(ПравилаОбмена,ОдинЭлемент);
			ЗагружатьДокументИзПакета=ЗагружатьДокументИзПакета-1;
			//пробуем теперь ...
			Рез=НайтиДокументПоIDD(Док,Стр);
			Если Рез=1 Тогда
				Возврат Док.ТекущийДокумент();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат "";
КонецФункции //ПолучитьДокумент


//_____________________________________________________________________________
Функция НайтиВНашейКонфигурации(Список,Тип,Вид)
	//найдем аналогичный вид в нашей конфигурации
	Рез=Список.Получить(""+Тип+Вид);
	Если ПустоеЗначение(Рез)=0 Тогда
		//нашли аналог значения в нашей конфигурации
		Возврат Рез;
	КонецЕсли;
	//не нашли - значит в нашей конфигурации аналогичное значение
	Возврат Вид;
КонецФункции //НайтиВНашейКонфигурации



//_____________________________________________________________________________
//Функция возвращает объект 1С из строкового представления, 
//полученного функцией ПолучитьПредставлениеОбъекта
Функция ПолучитьОбъект(Стр,ПримерЗначения,ЭлементДерева,УстТип=0,Вид="")
	Перем Спр;
	Тип=ТипЗначения(ПримерЗначения);
	УстТип=0;
	
	//определяем к какому типу будем преобразвывать данные:
	//если тип в нашей базе нулевой (неопределенный), то смотрим
	//какой тип был в другой базе
	Если Тип=0 Тогда
		Тип=Число(ЭлементДерева.getAttribute("Type"));
		Если Тип=0 Тогда
			Возврат Стр;
		КонецЕсли; 
		//выставляем признак, что перед присвоением типа реквезита надо присвоить ему тип
		УстТип=?(Тип=17,0,Тип); //тип ПланСчетов не присваивается - как не пытайся из-за глюка 1С ничего не выйдет :)

	//здесь были строковые данные (число, строка, дата) -  далее не проверяем - просто загружаем данные !!!
	ИначеЕсли Тип=1 Тогда
		Возврат Число(Стр);
	ИначеЕсли Тип=2 Тогда
		Возврат Стр;
	ИначеЕсли Тип=3 Тогда
		Возврат Дата(Стр);
	КонецЕсли;
    
	
	//для объектов типа перечисление, справочники, документы, счета найдем их виды
	Если ((Тип>9)И(Тип<13))ИЛИ(Тип=15) Тогда
		//найдем вид в периферийной базе
		Вид=Сокрлп(ЭлементДерева.getAttribute("Vid"));
		Если Вид<>"" Тогда
			//найдем аналогичный вид в нашей конфигурации
			Вид=НайтиВНашейКонфигурации(СписокСоответствийВидов,Тип,Вид);
		ИначеЕсли Тип<>12 Тогда
			Тип=ТипЗначения(ПримерЗначения);
			Если ((Тип>9)И(Тип<13))ИЛИ(Тип=15) Тогда
				Вид=ПримерЗначения.Вид();
			Иначе
				Возврат "";
			КонецЕсли;
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
	Попытка
	Если Тип=10 Тогда //перечисления
		Пер=Перечисление.ПолучитьАтрибут(Вид);
		Стр=НайтиВНашейКонфигурации(СписокСоответствийЗначений,Тип,Стр);
		Возврат Пер.ЗначениеПоИдентификатору(Стр);//!
	ИначеЕсли Тип=11 Тогда //справочники
		Возврат ПолучитьСправочник(Стр,Вид);
	ИначеЕсли Тип=12 Тогда //документы
		Возврат ПолучитьДокумент(Стр,ПримерЗначения);
	ИначеЕсли Тип=13 Тогда //Календарь
		Стр=НайтиВНашейКонфигурации(СписокСоответствийЗначений,Тип,Стр);
		Возврат Календари.ПолучитьАтрибут(Стр);//!
	ИначеЕсли Тип=14 Тогда //Вид расчета
		Стр=НайтиВНашейКонфигурации(СписокСоответствийЗначений,Тип,Стр);
		Возврат ВидРасчета.ПолучитьАтрибут(Стр);//!
	ИначеЕсли Тип=15 Тогда //Счет
		 Счет=СоздатьОбъект("Счет."+Вид);
		 Стр=НайтиВНашейКонфигурации(СписокСоответствийЗначений,Тип,Стр);
		 Рез=Счет.НайтиПоКоду(Стр);
		 Если Рез=1 Тогда
		     Возврат  Счет.ТекущийСчет();
		 КонецЕсли;
	ИначеЕсли Тип=16 Тогда //Виды субконто
	    Возврат  ВидыСубконто.ЗначениеПоИдентификатору(Стр);//!
	ИначеЕсли Тип=17 Тогда //План счетов
	    Возврат  ПланыСчетов.ЗначениеПоИдентификатору(Стр);//!
	КонецЕсли;
	Исключение
	Возврат "";
	КонецПопытки;

	Если Тип=1 Тогда
		Возврат Число(Стр);
	ИначеЕсли Тип=3 Тогда
		Возврат Дата(Стр);
	КонецЕсли;
	Возврат Стр;
КонецФункции //ПолучитьОбъект



//_____________________________________________________________________________
//основное назначение:
//1.Создание многоуровневых элементов, т.е. если, например, в переменной ИмяРеквизита
//	указано "Шапка/Владелец/Контрагент", то надо создать три вложенных 
//	в друг-друга элемента Шапка,Владелец,Контрагент
//2.Если в переменной ИмяРеквизита стоит один символ "*", то элемент не создается
//3.Если в переменной ИмяРеквизита в начале или в конце составной части присутствует 
//  символ "@", то  создается атрибут со значением Атрибут
//Возвращает: созданный элемент, если он создавался или ничего ("") если присваивался атрибут
Функция СоздатьЭлемент(Знач ИмяРеквизита,ПервыйЭлемент=-1,РодительЭлемента="",Атрибут="")
	Перем Реквизит,Родитель;
	//проверяем на признак атрибута
	Если Лев(ИмяРеквизита,1)="@" Тогда
		Зн=ПолучитьПредставлениеОбъекта(Атрибут,0,"");
		РодительЭлемента.setAttribute(Сред(ИмяРеквизита,2),Зн);
		ПредИмяЭлементаДереваВыгрузкиXML="";
		Возврат "";
	Иначе
		Если ПервыйЭлемент=-1 Тогда
			//самое что ни на есть обычное создание элемента
			ПредИмяЭлементаДереваВыгрузкиXML="";
			Возврат ХМЛ.createElement(ИмяРеквизита);
		Иначе
			//более сложнее:
			
			//проверим на несоздание нового элемента
			Если ИмяРеквизита="*" Тогда
				ПервыйЭлемент=РодительЭлемента;
				Возврат РодительЭлемента;
			КонецЕсли;
			//проверяем на признак задания элемента с заданным путем
			Рез=Найти(ИмяРеквизита,"/");
			Если Рез>0 Тогда
				Родитель=РодительЭлемента;
				ПервыйЭлемент=РодительЭлемента;
				Для А=1 По СтрЧислоВхождений(ИмяРеквизита,"/") Цикл
					Ном=Найти(ИмяРеквизита,"/");
					ТекИмя=Лев(ИмяРеквизита,Ном-1);
					ПредРодитель=Родитель;
					//смотрим - может такой элемент есть в дереве
					Родитель=Родитель.getElementsByTagName(ТекИмя);
				    КолЭлементов=Родитель.length;
					Если КолЭлементов=0 Тогда //нет, тогда создаем элемент
						Родитель=ХМЛ.createElement(ТекИмя);
						Если ПервыйЭлемент=РодительЭлемента Тогда
							ПервыйЭлемент=Родитель;
							РодительЭлемента=ПредРодитель;
						КонецЕсли;
					Иначе //есть такой в дереве - используем самый последний
						Родитель=Родитель.item(КолЭлементов-1);
					КонецЕсли;
					ИмяРеквизита=Сред(ИмяРеквизита,Ном+1);
				КонецЦикла;
				
				//проверяем на признак задания атрибута
				Если Лев(ИмяРеквизита,1)="@" Тогда
					Зн=ПолучитьПредставлениеОбъекта(Атрибут,0,"");
					Родитель.setAttribute(Сред(ИмяРеквизита,2),Зн);       //присваиваем значение атрибута
					Если ПервыйЭлемент<>РодительЭлемента Тогда
					РодительЭлемента.appendChild(ПервыйЭлемент); //и добавляем дочернее дерево
					КонецЕсли;
					Возврат "";
				Иначе
					Реквизит=ХМЛ.createElement(ИмяРеквизита);
					Родитель.appendChild(Реквизит);
					Возврат Реквизит;
				КонецЕсли;
			Иначе
				ПервыйЭлемент=ХМЛ.createElement(ИмяРеквизита);
				Возврат ПервыйЭлемент;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
КонецФункции //СоздатьЭлемент


//_____________________________________________________________________________
//основное назначение - запись в специализированные атрибуты добавочной информации
//о типе и виде выгружаемого объекта - актуально при передаче м/у конфигурациями 1С
//с неопределенными типами реквизитов
Процедура ДобавитьЭлемент(Элемент,ИмяРеквизита,Атрибут,Реквизит=0)
		РодРеквизит=0;
		Реквизит=СоздатьЭлемент(ИмяРеквизита,РодРеквизит,Элемент,Атрибут);
		Если Реквизит="" Тогда
		    Возврат;//это был атрибут
		КонецЕсли;
		Если ПустоеЗначение(Атрибут)=0 Тогда
			Тип=0;Вид="";
			Зн=ПолучитьПредставлениеОбъекта(Атрибут,Тип,Вид);
			Реквизит.appendChild(ХМЛ.createTextNode(Зн));
			Если НеВыгружатьИДД=0 Тогда
			Реквизит.setAttribute("Type",Тип);
			Если Вид<>"" Тогда
				Реквизит.setAttribute("Vid",Вид);
			КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если Элемент<>РодРеквизит Тогда
			Попытка
			Элемент.appendChild(РодРеквизит);
			Исключение
			Сообщить("Ошибка при создании реквизита дерева XML с именем "+ИмяРеквизита);
			Элемент.appendChild(РодРеквизит);//****** Вероятно ошибка настройки правил выгрузки ******
			КонецПопытки;
		КонецЕсли;
КонецПроцедуры //ДобавитьЭлемент






//_____________________________________________________________________________
Функция ФильтрВыгрузки(Атрибут)
	//********** условия
	Если ПравилаВыгрузки.ВклУсловие=ДаДа Тогда
		Условие=ПравилаВыгрузки.Условие;
		Если ТипЗначенияСтр(Условие)="Число" Тогда
			Атрибут=Число(Атрибут);
		ИначеЕсли ТипЗначенияСтр(Условие)="Строка" Тогда
			Атрибут=Сокрлп(Строка(Атрибут));
			Условие=Сокрлп(Условие);
		ИначеЕсли ТипЗначенияСтр(Условие)="Дата" Тогда
			Атрибут=Дата(Атрибут);
		ИначеЕсли ТипЗначения(Условие)=0 Тогда
			Условие=Число(Условие);
		КонецЕсли;
		
		Если Атрибут<>Условие Тогда
			Возврат 0;// не загружаем !!!!
		КонецЕсли;
	КонецЕсли;
	
	
	//********* значения
	Если ПравилаВыгрузки.ВклЗначение=ДаДА Тогда
		Атрибут=ПравилаВыгрузки.Значение;
	КонецЕсли;
	Возврат 1;
КонецФункции




//_____________________________________________________________________________
Функция ФильтрЗагрузки(Атрибут,ПравилаЗагрузки)
	//********** условия
	Если ПравилаЗагрузки.ВклУсловие=ДаДа Тогда
		Условие=ПравилаЗагрузки.Условие;
		Если ТипЗначенияСтр(Условие)="Число" Тогда
			Атрибут=Число(Атрибут);
		ИначеЕсли ТипЗначенияСтр(Условие)="Строка" Тогда
			Атрибут=Сокрлп(Строка(Атрибут));
			Условие=Сокрлп(Условие);
		ИначеЕсли ТипЗначенияСтр(Условие)="Дата" Тогда
			Атрибут=Дата(Атрибут);
		ИначеЕсли ТипЗначения(Условие)=0 Тогда
			Условие=Число(Условие);
		КонецЕсли;
		Если Атрибут<>Условие Тогда
			Возврат 0;// не загружаем !!!!
		КонецЕсли;
	КонецЕсли;
	
	
	//********* значения
	Если ПравилаЗагрузки.ВклЗначение=ДаДА Тогда
		Значение=ПравилаЗагрузки.Значение;
		ПрисвоеноНовоеЗначение=1;
		Атрибут=Значение;
	КонецЕсли;
	
	Возврат 1;
КонецФункции


//_____________________________________________________________________________
Процедура ВыгрузитьИсторию(РеквизитХМЛ,Реквизит,Дата1,Дата2,Спр="")
	Перем Периодический;
	Пер=СоздатьОбъект("Периодический");
	Если Спр="" Тогда
		Пер.ИспользоватьОбъект(Реквизит);
	Иначе
		Пер.ИспользоватьОбъект(Реквизит,Спр.ТекущийЭлемент());
	КонецЕсли;
	Пер.ВыбратьЗначения(Дата1,Дата2);
	Было=0;
	Пока Пер.ПолучитьЗначение()=1 Цикл
		//движения вызванные документом пропускаем 
		Если Пер.ТекущийДокумент().Выбран()=1 Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьЭлемент(РеквизитХМЛ,"Периодический",Пер.Значение,Периодический);
		Периодический.setAttribute("Дата",Пер.ДатаЗнач);
		Было=1;
	КонецЦикла;
	//защита от ошибки начального ввода значений типа перечисления в 1С !!!
	Если Было=0 Тогда
		Пер.ВыбратьЗначения('01.01.1980','01.01.1980');
		Если Пер.ПолучитьЗначение()=1 Тогда
			ДобавитьЭлемент(РеквизитХМЛ,"Периодический",Пер.Значение,Периодический);
			Периодический.setAttribute("Дата",Пер.ДатаЗнач);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры 


//_____________________________________________________________________________
Функция ВыгрузитьСтрокуДанных(ЭлементДереваВыгрузки,Вид,Спр,РеквизитИДД,Дата1=0,Дата2=0,ПроверятьГруппы=0)
	ПравилаВыгрузки.ПорядокКодов();
	ПравилаВыгрузки.ВыбратьЭлементы();
	Док=Спр;Рег=Спр;ЖР=Спр;Опер=Спр;
	Пока ПравилаВыгрузки.ПолучитьЭлемент()=1 Цикл
		Если ПроверятьГруппы=1 Тогда 
			Если ПравилаВыгрузки.ЭтоГруппа()=1 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ПравилаВыгрузки.ПризнакВыгрузки=ДаДА Тогда
			Реквизит=ПравилаВыгрузки.Наименование;
			ЛевРеквизит=Лев(Реквизит,1);
			Если ЛевРеквизит="#" Тогда //значит это доп. реквизит
				Атрибут=0;
				Если Реквизит="#ПомеченНаУдаление" Тогда
					Атрибут=Спр.ПометкаУдаления();
				ИначеЕсли Реквизит="#ДатаДок" Тогда
					Атрибут=Док.ДатаДок;
				ИначеЕсли Реквизит="#ВремяДокумента" Тогда
					Атрибут=Док.ПолучитьВремя();
				ИначеЕсли Реквизит="#Проведен" Тогда
					Атрибут=Док.Проведен();
				ИначеЕсли Реквизит="#ЭтоГруппа" Тогда
					Атрибут=Спр.ЭтоГруппа();
				ИначеЕсли Реквизит="#НомерСтроки" Тогда
					Атрибут=Рег.НомерСтроки();
				ИначеЕсли Реквизит="#ТекущийДокумент" Тогда
					Атрибут=Рег.ТекущийДокумент();
				ИначеЕсли Реквизит="#Документ" Тогда
					Док=СоздатьОбъект("Документ");  //так сложно - из-за кривизны 1С !!!
					Атрибут=Опер.Документ;
					Док.НайтиДокумент(Атрибут);
					Атрибут=Док.ТекущийДокумент();
				ИначеЕсли Реквизит="#ЭтоПриход" Тогда
					Атрибут=?(Рег.Приход=1,1,0);
				ИначеЕсли Реквизит="#ПериодРегистрации" Тогда
					Атрибут=ЖР.ПериодРегистрации.ДатаНачала;
				ИначеЕсли Реквизит="#ПервичнаяЗапись" Тогда
					Атрибут=СписокЖР.Получить(ЗначениеВСтрокуВнутр(ЖР.ПервичнаяЗапись));
				ИначеЕсли Реквизит="#ПроводкиВключены" Тогда
					Атрибут=Опер.ВключитьПроводки();
				ИначеЕсли Реквизит="#СложнаяПроводка" Тогда
					Атрибут=Опер.СложнаяПроводка();
				Иначе
					Атрибут=0;
				КонецЕсли;
			Иначе
				Если ЛевРеквизит="@" Тогда //значит этот реквизит считается специальным образом
					Если Сред(Реквизит,2,4)="IDD=" Тогда
						//Здесь возможен вариант, что мы на ходу меняем ИД объекта (когда, например, выгружаем один справочник в несколько)
						//Поэтому заменим сам ИД объекта 
						Стр=Сред(Реквизит,6);
						Рез=Шаблон("["+Стр+"]");
						РеквизитИДД.removeChild(РеквизитИДД.firstChild);
						РеквизитИДД.appendChild(ХМЛ.createTextNode(Рез));
						Атрибут=Рез;
					Иначе
						//Обычное задание выражения
						Стр=Сред(Реквизит,2);
						Шаблон("[Получить("+Стр+")]");Атрибут=глВыражение;
					КонецЕсли;
				Иначе
					Рез=Найти(Реквизит,".");
					Если Рез>0 Тогда //реквизиты для проводок
						Если Прав(Реквизит,4)="Счет" Тогда
							Если Лев(Реквизит,1)="Д" Тогда
								Атрибут=Опер.Дебет.Счет;
							Иначе
								Атрибут=Опер.Кредит.Счет;
							КонецЕсли;
						Иначе
							НомерСубк=Число(Прав(Реквизит,1));
							Если НомерСубк<>0 Тогда
								Если Лев(Реквизит,1)="Д" Тогда
									Атрибут=Опер.Дебет.Субконто(НомерСубк);
								Иначе
									Атрибут=Опер.Кредит.Субконто(НомерСубк);
								КонецЕсли;
							Иначе
								Атрибут="";
							КонецЕсли;
						КонецЕсли;
						
					Иначе
						Попытка
							Атрибут=Спр.ПолучитьАтрибут(Реквизит);
						Исключение
							М_Сообщить("Неправильное имя реквизита "+Вид+", Реквизит:"+Реквизит);
							Продолжить;
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ФильтрВыгрузки(Атрибут)=0 Тогда
				Возврат 0;
			КонецЕсли;
			
			
			Синоним=Сокрп(ПравилаВыгрузки.Синоним);
			Синоним=СтрЗаменить(Синоним,"#","_");
			
			//			Сообщить("Атрибут="+Атрибут+"  "+ПустоеЗначение(Атрибут));
			РеквизитХМЛ=0;
			ЭлементХМЛ=ЭлементДереваВыгрузки;
			ДобавитьЭлемент(ЭлементХМЛ,Синоним,Атрибут,РеквизитХМЛ);
			
			Если ПравилаВыгрузки.История=ДаДа Тогда
				//выгружаем список периодических реквизитов
				Использование=Метаданные.Справочник(Вид).Реквизит(Реквизит).Использование;
				//определяем для какого типа справочника нельзя использовать этот реквизит
				//цифра 0 - означает не использовать для элемента
				//цифра 1 - означает не использовать для группы
				//цифра 2 -ы означает использование для всех типов
				НеИспользование=?(Использование="ДляЭлемента",1,?(Использование="ДляГруппы",0,2));
				
				Если Спр.ЭтоГруппа()<>НеИспользование Тогда
					ВыгрузитьИсторию(РеквизитХМЛ,Реквизит,Дата1,Дата2,Спр)
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат 1;
КонецФункции //ВыгрузитьСтрокуДанных

//_____________________________________________________________________________
//загружаем список периодических реквизитов
Функция ЗагрузитьИсторию(ЭлементДанных,ПравилаЗагрузки,Спр,Вид,Дата1=0,Дата2=0)
	Перем ВидДанных;
	Мета=Метаданные.Справочник(Вид);
	ПравилаЗагрузки.ПорядокКодов();
	ПравилаЗагрузки.ВыбратьЭлементы();
	Пока ПравилаЗагрузки.ПолучитьЭлемент()=1 Цикл
		Если ПравилаЗагрузки.История=ДаДА Тогда
			Если ПравилаЗагрузки.ПризнакЗагрузки=ДаДА Тогда
				Реквизит=ПравилаЗагрузки.Наименование;
				Использование=Мета.Реквизит(Реквизит).Использование;
				//определяем для какого типа справочника нельзя использовать этот реквизит
				//цифра 0 - означает не использовать для элемента
				//цифра 1 - означает не использовать для группы
				//цифра 2 -ы означает использование для всех типов
				НеИспользование=?(Использование="ДляЭлемента",1,?(Использование="ДляГруппы",0,2));
				
				Если Спр.ЭтоГруппа()<>НеИспользование Тогда
					Синоним=Сокрп(ПравилаЗагрузки.Синоним);
					Синоним=СтрЗаменить(Синоним,"#","_");
					Дерево=ЭлементДанных.getElementsByTagName(Синоним);
					Если Дерево.length>0 Тогда
						Пер=СоздатьОбъект("Периодический");
						Пер.ИспользоватьОбъект(Реквизит,Спр.ТекущийЭлемент());
						УстанавливатьТип=0;
						ПериодДерево=Дерево.item(0).getElementsByTagName("Периодический");
						
						Для А=1 По ПериодДерево.length Цикл
							Элемент=ПериодДерево.NextNode();
							Дети=Элемент.childNodes;
							
							Если Дети.length>0 Тогда
								Значение=Дети.item(0).nodeValue;
								ПерЗначение=ПолучитьОбъект(Значение,ПравилаЗагрузки.Значение,Элемент,УстанавливатьТип,ВидДанных);
								ПерДатаЗнач=Элемент.getAttribute("Дата");

								Если УстанавливатьТип>0 Тогда
									ВидДанных=?(ВидДанных="","","."+ВидДанных);
									Попытка
									Пер.НазначитьТип(МассивТипов1С[УстанавливатьТип]+ВидДанных);
									Исключение //скорее всего в правилах загрузки неправильно установлени тип реквизита...
									КонецПопытки;
								КонецЕсли;

								Пер.Значение=ПерЗначение;
								Пер.ДатаЗнач=ПерДатаЗнач;
								
								Пер.Записать();
								Если А=1 Тогда
									Дата1=Пер.ДатаЗнач;
								Иначе
									Дата2=Пер.ДатаЗнач;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
Возврат 1;    
КонецФункции //ЗагрузитьИсторию




//_____________________________________________________________________________
Функция ЗагрузитьСтрокуДанных(ЭлементДанных,ПравилаЗагрузки,Спр,Вид,ПомеченНаУдаление=0,Удален=0,Подчиненность=0,ВремяДокумента="",Проведен=0,ДатаДок=0,Приход=0,НомерСтроки=0,СложнаяПроводка=0,ЖурналРасчетов=0,ПроводкиВключены=0,РодительскийДокумент="",ОбъектЗаписи="")
	Перем ВидДанных;
	ПравилаЗагрузки.ПорядокКодов();
	ПравилаЗагрузки.ВыбратьЭлементы();
	Док=Спр;Рег=Спр;ЖР=Спр;Опер=Спр;
	Пока ПравилаЗагрузки.ПолучитьЭлемент()=1 Цикл
		Если ПравилаЗагрузки.ЭтоГруппа()=0 Тогда
			Если ПравилаЗагрузки.ПризнакЗагрузки=ДаДА Тогда
				Если ПравилаЗагрузки.История<>ДаДА Тогда
					Реквизит=ПравилаЗагрузки.Наименование;
					Синоним=Сокрп(ПравилаЗагрузки.Синоним);
					
					Если Лев(Синоним,1)="#" Тогда
						Синоним=СтрЗаменить(Синоним,"#","_");
					КонецЕсли;
					
					УстанавливатьТип=0;
					БылРеквизит=0;
					//пробуем получить как элемент
					Дерево=ЭлементДанных.SelectNodes(Синоним);
					Если Дерево.length>0 Тогда
						Элемент=Дерево.item(0);
						Дети=Элемент.childNodes;
						Если Дети.length>0 Тогда
							Значение=Дети.item(0).nodeValue;
							БылРеквизит=1;
						КонецЕсли;
					Иначе
						//пробуем получить как атрибут
						
						//смотрим - может задание с путем
						КолВхождений=СтрЧислоВхождений(Синоним,"/");
						Если КолВхождений=0 Тогда
							//нет сложного задания путей
							Элемент=ЭлементДанных;
							Значение=ЭлементДанных.getAttribute(Синоним);
							БылРеквизит=1;
						Иначе
							//есть сложное задание:
							//ищем самый правый символ "/", чтобы отделить атрибут от выражения
							ПодСиноним=Синоним;НомерПозСимвола=0;
							Для А=1 По КолВхождений Цикл
								Рез=Найти(ПодСиноним,"/");
								ПодСиноним=Сред(ПодСиноним,Рез+1);
								НомерПозСимвола=НомерПозСимвола+Рез;
							КонецЦикла;
							Выражение=Лев(Синоним,НомерПозСимвола-1);
							Синоним=Сред(Синоним,НомерПозСимвола+1);
							//делаем выборку нужного элемента дерева
							Дерево=ЭлементДанных.SelectNodes(Выражение);
							Если Дерево.length>0 Тогда
								Элемент=Дерево.item(0);
								Значение=Элемент.getAttribute(Синоним);
								БылРеквизит=1;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					
					Если БылРеквизит=1 Тогда
						Атрибут=ПолучитьОбъект(Значение,ПравилаЗагрузки.Значение,Элемент,УстанавливатьТип,ВидДанных);
					Иначе
						Атрибут="";
					КонецЕсли;
					
					Если Лев(Реквизит,1)<>"@" Тогда
						Если ФильтрЗагрузки(Атрибут,ПравилаЗагрузки)=0 Тогда
							Возврат 0;
						КонецЕсли;
					КонецЕсли;
					
					
					Если Лев(Реквизит,1)="#" Тогда //значит это доп. реквизит
						Если Реквизит="#ПомеченНаУдаление" Тогда
							ПомеченНаУдаление=Число(Атрибут);
						ИначеЕсли Реквизит="#Удален" Тогда
							Удален=Число(Атрибут);
						ИначеЕсли Реквизит="#ДатаДок" Тогда
							ДатаДок=Атрибут;
						ИначеЕсли Реквизит="#ВремяДокумента" Тогда
							ВремяДокумента=Атрибут;
						ИначеЕсли Реквизит="#Проведен" Тогда
							Проведен=Число(Атрибут);
						ИначеЕсли Реквизит="#ЭтоГруппа" Тогда
						ИначеЕсли Реквизит="#ТекущийДокумент" Тогда
						ИначеЕсли Реквизит="#Документ" Тогда
						ИначеЕсли Реквизит="#ЭтоПриход" Тогда
							Приход=Число(Атрибут);
						ИначеЕсли Реквизит="#ПериодРегистрации" Тогда
						ИначеЕсли Реквизит="#ПервичнаяЗапись" Тогда
							ЖР.УстановитьРеквизит("ПервичнаяЗапись",СписокЖР.Получить(Число(Атрибут)));
						ИначеЕсли Реквизит="#ПроводкиВключены" Тогда
							ПроводкиВключены=Число(Атрибут);
						ИначеЕсли Реквизит="#СложнаяПроводка" Тогда
							СложнаяПроводка=Число(Атрибут);
						ИначеЕсли Реквизит="#НомерСтроки" Тогда
							НомерСтроки=Число(Атрибут);
						КонецЕсли;
					ИначеЕсли Лев(Реквизит,1)="@" Тогда //значит этот реквизит считается специальным образом
						//Проверяем как задана обработка выражений
						ТипРеквизита=0;
						Для А=2 По СтрДлина(Реквизит) Цикл
							Если Сред(Реквизит,А,1)="=" Тогда
								ТипРеквизита=1;//надо присвоить реквизиту объекта какое-то значение
								Прервать;
							ИначеЕсли КодСимв(Сред(Реквизит,А,1))<65 Тогда
								ТипРеквизита=2;//ничего присваивать не надо
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если ТипРеквизита=1 Тогда
							Стр=Сред(Реквизит,А+1);
							Шаблон("[Получить("+Стр+")]");Атрибут=глВыражение;
							Реквизит=Сред(Реквизит,2,Найти(Реквизит,"=")-2);
							
							Если УстанавливатьТип>0 Тогда
								Спр.НазначитьТип(Реквизит,МассивТипов1С[УстанавливатьТип]+"."+ВидДанных);
							КонецЕсли;
							Попытка
								Если ЖурналРасчетов=0 Тогда
								Спр.УстановитьАтрибут(Реквизит,Атрибут);
								Иначе
								Спр.УстановитьРеквизит(Реквизит,Атрибут);
								Если Реквизит="РодительскийДокумент" Тогда
								    РодительскийДокумент=Атрибут;
								ИначеЕсли Реквизит="Объект" Тогда
									ОбъектЗаписи=Атрибут;
								КонецЕсли;
								
								КонецЕсли;
							Исключение
								Сообщить("В правилах загрузки объекта "+Вид+" некорректно задано имя реквизита "+Реквизит,"!");
								Продолжить;
							КонецПопытки;
						ИначеЕсли ТипРеквизита=2 Тогда //просто какая-то процедура
							Стр=Сред(Реквизит,2);
							Шаблон("[Получить("+Стр+")]");Атрибут=глВыражение;
						КонецЕсли;
						//а теперь проверяем фильтр
						Если ФильтрЗагрузки(Атрибут,ПравилаЗагрузки)=0 Тогда
							Возврат 0;
						КонецЕсли;
						
					Иначе
						Рез=Найти(Реквизит,".");
						Если Рез>0 Тогда //реквизиты для проводок
							Если Прав(Реквизит,4)="Счет" Тогда
								Если Лев(Реквизит,1)="Д" Тогда
									Опер.Дебет.Счет=Атрибут;
								Иначе
									Опер.Кредит.Счет=Атрибут;
								КонецЕсли;
							Иначе
								НомерСубк=Число(Прав(Реквизит,1));
								Если НомерСубк<>0 Тогда
									Если Лев(Реквизит,1)="Д" Тогда
										Опер.Дебет.Субконто(НомерСубк,Атрибут);
									Иначе
										Опер.Кредит.Субконто(НомерСубк,Атрибут);
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
							Продолжить;
						ИначеЕсли ТипЗначения(Спр)=11 Тогда
							Если Реквизит="Владелец" Тогда
								Если ТипЗначения(Атрибут)=11 Тогда
									Если Атрибут.ЭтоГруппа()=0 Тогда
										Спр.Владелец=Атрибут;
									КонецЕсли;
								КонецЕсли;
								Продолжить;
							ИначеЕсли Реквизит="Родитель" Тогда
								Если ТипЗначения(Атрибут)=11 Тогда
									Если Атрибут.ЭтоГруппа()=1 Тогда
										Если Атрибут<>Спр.ТекущийЭлемент() Тогда //защита от зависания 1С
											Если Атрибут.ПринадлежитГруппе(Спр.ТекущийЭлемент())=0 Тогда
												Спр.Родитель=Атрибут; 
											КонецЕсли;
										КонецЕсли;	
									КонецЕсли;
								ИначеЕсли ТипЗначения(Атрибут)=2 Тогда
									Спр.Родитель=""   
								КонецЕсли;
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						
						Если УстанавливатьТип>0 Тогда
							Попытка
								Спр.НазначитьТип(Реквизит,МассивТипов1С[УстанавливатьТип]+"."+ВидДанных);
							Исключение //скорее всего в правилах загрузки неправильно установлени тип реквизита...
							КонецПопытки;
						КонецЕсли;
						Попытка
							Если ЖурналРасчетов=0 Тогда
								Спр.УстановитьАтрибут(Реквизит,Атрибут);
							Иначе
								ЖР.УстановитьРеквизит(Реквизит,Атрибут);
								Если Реквизит="РодительскийДокумент" Тогда
									РодительскийДокумент=Атрибут;
									
								ИначеЕсли Реквизит="Объект" Тогда
									ОбъектЗаписи=Атрибут;
									
								КонецЕсли;
							КонецЕсли;
						Исключение
							Сообщить("В правилах загрузки объекта "+Вид+" некорректно задано имя реквизита "+Реквизит,"!");
							Продолжить;
						КонецПопытки;
					КонецЕсли;
					//КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат 1;
КонецФункции //ЗагрузитьСтрокуДанных










//_____________________________________________________________________________
Функция ПолучитьПолныйПуть(Спр,Реж=0)
    ПредРодитель=Спр.Родитель;
	Если Реж=0 Тогда
	Стр=Спр.Наименование;
	Иначе
	Стр=Сокрлп(Спр.Синоним);
	КонецЕсли;
	Пока ПредРодитель.Выбран()=1 Цикл
	   Стр=Сокрлп(ПредРодитель.Синоним)+"/"+Стр; 
	   ПредРодитель=ПредРодитель.Родитель;
	КонецЦикла;
//    Сообщить(Стр);
	Возврат Стр;
КонецФункции //ПолучитьПолныйПуть







//_____________________________________________________________________________
//Получаем правила выгрузки для элемента метаданных с заданным именем Имя
//при этом учитываются возможные дублирования (повторы) в правилах его выгрузки
Функция ПолучитьПравилаВыгрузки(ПервыйРодитель,Знач Имя,НомерПовтора=1)
	Если НомерПовтора=1 Тогда
		ПравилаВыгрузки.ИспользоватьВладельца(ПолучитьВладельцаПравил(ВыбрБаза));
		ПравилаВыгрузки.ИспользоватьРодителя(ПервыйРодитель);
		Рез=ПравилаВыгрузки.НайтиПоНаименованию(Имя,,1);
		Если Рез=0 Тогда
			Возврат 0;
		ИначеЕсли ПравилаВыгрузки.ПризнакВыгрузки<>ДаДА Тогда
			Возврат 0;
		КонецЕсли;
		Если ПравилаВыгрузки.ЭтоГруппа()=1 Тогда
			ПравилаВыгрузки.ИспользоватьРодителя(ПравилаВыгрузки.ТекущийЭлемент());
		КонецЕсли;
	Иначе
		//смотрим - есть ли у данного вида повторы в правилах выгрузки
		Если ПустоеЗначение(ПервыйРодитель)=0 Тогда
			Имя=ПолучитьПолныйПуть(ПервыйРодитель,1)+"/"+Имя;
		КонецЕсли;
		ПравилаВида=СписокПовторов.Получить(Имя+НомерПовтора);
		Если ПустоеЗначение(ПравилаВида)=1 Тогда
			Возврат -1;
		КонецЕсли;
		ПравилаВыгрузки.НайтиЭлемент(ПравилаВида);
		Если ПравилаВыгрузки.ЭтоГруппа()=1 Тогда
			ПравилаВыгрузки.ИспользоватьРодителя(ПравилаВида);
		КонецЕсли;
	КонецЕсли;
	Возврат 1;
КонецФункции //ПолучитьПравилаВыгрузки



//_____________________________________________________________________________
//Получаем правила pfгрузки для элемента метаданных с заданным именем Имя
Функция ПолучитьПравилаЗагрузки(ПервыйРодитель,Имя)
	Перем ПравилаЗагрузки;
	ПравилаЗагрузки=СоздатьОбъект("Справочник.ПравилаЗагрузки");
	ПравилаЗагрузки.ИспользоватьВладельца(ПолучитьВладельцаПравил(ВыбрБаза));
	ПравилаЗагрузки.ИспользоватьРодителя(ПервыйРодитель);
	Рез=ПравилаЗагрузки.НайтиПоНаименованию(Имя,,1);
	Если Рез=1 Тогда
		Если ПравилаЗагрузки.ПризнакЗагрузки=ДаДА Тогда
			Возврат ПравилаЗагрузки.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;
	Возврат "";
КонецФункции //ПолучитьПравилаВыгрузки




//_____________________________________________________________________________
//Выгружаем движения регистров по заданному документу
Функция ВыгрузитьДвиженияРегистровДокумента(ПравилаОбмена,ДокументХМЛ,Док)
	ПравилаВида=ПравилаОбмена.ТекущийЭлемент();
	ПравилаВыгрузки.ИспользоватьВладельца(ПолучитьВладельцаПравил(ВыбрБаза));
	ПравилаВыгрузки.ИспользоватьРодителя(ПравилаВида);
	Вид=ПравилаВида.Наименование;
	Рег=СоздатьОбъект("Регистр."+Вид);
	Рег.ВыбратьДвиженияДокумента(Док.ТекущийДокумент());
	Было=0;
	Пока Рег.ПолучитьДвижение()>0 Цикл
			ТаблицаХМЛ=СоздатьЭлемент("Движение_регистра");
			Если ВыгрузитьСтрокуДанных(ТаблицаХМЛ,Вид,Рег,"",,,1)=1 Тогда
				Было=1;
				ДокументХМЛ.appendChild(ТаблицаХМЛ);
			КонецЕсли;
	КонецЦикла;
	Возврат Было;
КонецФункции//ВыгрузитьДвиженияРегистровДокумента


//_____________________________________________________________________________
//Выгружаем движения журнала расчета по заданному документу
Функция ВыгрузитьДвиженияЖарналаДокумента(ПравилаОбмена,ДокументХМЛ,Док)
	ПравилаВида=ПравилаОбмена.ТекущийЭлемент();
	Вид=ПравилаВида.Наименование;
	СписокЖР=СоздатьОбъект("СписокЗначений");
	КолвоДвиж=0;
	ЖР=СоздатьОбъект("ЖурналРасчетов."+Вид);
	ЖР.ВыбратьЗаписиПоДокументу(Док.ТекущийДокумент());
	Пока ЖР.ПолучитьЗапись()>0 Цикл
		КолвоДвиж=КолвоДвиж+1;
		СписокЖР.ДобавитьЗначение(КолвоДвиж,ЗначениеВСтрокуВнутр(ЖР.ТекущаяЗапись()));
		ТаблицаХМЛ=СоздатьЭлемент("Движение_журнала");
		ПравилаВыгрузки.ИспользоватьВладельца(ПолучитьВладельцаПравил(ВыбрБаза));
		ПравилаВыгрузки.ИспользоватьРодителя(ПравилаВида);
		Если ВыгрузитьСтрокуДанных(ТаблицаХМЛ,Вид,ЖР,"")=1 Тогда
			ДокументХМЛ.appendChild(ТаблицаХМЛ);
		КонецЕсли;
	КонецЦикла;
    Возврат ?(КолвоДвиж=0,0,1);
КонецФункции//ВыгрузитьДвиженияЖарналаДокумента



//_____________________________________________________________________________
//Выгружаем движения справочников по заданному документу
Процедура ВыгрузитьДвиженияСправочниковДокумента(ДокументХМЛ,Док)
	Период=СоздатьОбъект("Периодический");
	Период.ВыбратьПоДокументу(Док.ТекущийДокумент());
	Пока Период.ПолучитьЗначение()=1  Цикл
		Движение=СоздатьЭлемент("Движение_справочника");
		Спр=Период.ТекущийОбъект();
		Реквизит=Период.ТекущийРеквизит();
		Реквизит=Сред(Реквизит,Найти(Реквизит,".")+1);
		ДобавитьЭлемент(Движение,"_ТекущийДокумент",Док.ТекущийДокумент());
		ДобавитьЭлемент(Движение,"Справочник",Спр);
		ДобавитьЭлемент(Движение,"Реквизит",Реквизит);
		ДобавитьЭлемент(Движение,"Дата",Период.ДатаЗнач);
		ДобавитьЭлемент(Движение,"Значение",Период.Значение);
		ДокументХМЛ.appendChild(Движение);
	КонецЦикла;
КонецПроцедуры 





//_____________________________________________________________________________
//Выгружаем сам документ
Процедура ВыгрузитьДокумент(Документы,Вид,ИДД)
	ПравилаВида=ПравилаВыгрузки.ТекущийЭлемент();
	
	//создаем новый элемент документа XML
	ИмяУзлаДокумента=СтрЗаменить(Сокрлп(ПравилаВида.Синоним)," ","_");
	РодДокументХМЛ=0;
	ДокументХМЛ=СоздатьЭлемент(ИмяУзлаДокумента,РодДокументХМЛ,Документы);
	РеквизитИДД=0;
	Если НеВыгружатьИДД=0 Тогда
		ДобавитьЭлемент(ДокументХМЛ,"IDD",ИДД,РеквизитИДД);
	КонецЕсли;
	
	Док=СоздатьОбъект("Документ");
	Если НайтиДокументПоIDD(Док,ИДД)=1 Тогда
		Если ПриВыгрузкеДокумента(Док)=0 Тогда
			Возврат ;
		КонецЕсли;
		
		//выгружаем шапку или табличную часть столько раз, сколько они встретятся в правилах выгрузки
		ПравилаВыгрузки1.ИспользоватьВладельца(ПолучитьВладельцаПравил(ВыбрБаза));
		ПравилаВыгрузки1.ИспользоватьРодителя(ПравилаВида);
		ПравилаВыгрузки1.ВыбратьЭлементы();//цикл по измерениям, ресурсам, реквизитам
		Пока ПравилаВыгрузки1.ПолучитьЭлемент(0)=1 Цикл
			Если ПравилаВыгрузки1.ПризнакВыгрузки=ДаДА Тогда
				ПравилаВыгрузки.ИспользоватьВладельца(ПолучитьВладельцаПравил(ВыбрБаза));
				ПравилаВыгрузки.ИспользоватьРодителя(ПравилаВыгрузки1.ТекущийЭлемент());
				ИмяУзла=СтрЗаменить(Сокрлп(ПравилаВыгрузки1.Синоним)," ","_");
				Если ПравилаВыгрузки1.Наименование="Шапка" Тогда
					РодШапкаХМЛ=0;
					ШапкаХМЛ=СоздатьЭлемент(ИмяУзла,РодШапкаХМЛ,ДокументХМЛ);
						Если ВыгрузитьСтрокуДанных(ШапкаХМЛ,Вид,Док,РеквизитИДД)=1 Тогда
							Если ДокументХМЛ<>РодШапкаХМЛ Тогда
								ДокументХМЛ.appendChild(РодШапкаХМЛ);
							КонецЕсли;
						Иначе
							Возврат;
						КонецЕсли;
				Иначе
					Док.ВыбратьСтроки();
					Пока Док.ПолучитьСтроку()=1 Цикл
						РодТаблицаХМЛ=0;
						ТаблицаХМЛ=СоздатьЭлемент(ИмяУзла,РодТаблицаХМЛ,ДокументХМЛ);
						Если ВыгрузитьСтрокуДанных(ТаблицаХМЛ,Вид,Док,РеквизитИДД)=1 Тогда
							Если ДокументХМЛ<>РодТаблицаХМЛ Тогда
								ДокументХМЛ.appendChild(РодТаблицаХМЛ);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;		
		
		
		
		//выгружаем движения документа
		Если (ПравилаВида.Движения=ДаДа)И(Док.Проведен()=1) Тогда
			//по регистрам
			Если Метаданные.Документ(Док.Вид()).ОперативныйУчет=1 Тогда
				Для А=1 По 100 Цикл
					Рез=ПолучитьПравилаВыгрузки("","Регистры",А);
					Если Рез=1 Тогда
						ПравилаТипа=ПравилаВыгрузки.ТекущийЭлемент();
						РодРегистры=0;
						Регистры=СоздатьЭлемент(СтрЗаменить(Сокрлп(ПравилаВыгрузки.Синоним)," ","_"),РодРегистры,Пакет);
						Если Пакет<>РодРегистры Тогда
						Пакет.appendChild(РодРегистры);
						КонецЕсли;
						ПравилаВыгрузки1.ИспользоватьВладельца(ПолучитьВладельцаПравил(ВыбрБаза));
						ПравилаВыгрузки1.ИспользоватьРодителя(ПравилаТипа);
						ПравилаВыгрузки1.ПорядокКодов();
						ПравилаВыгрузки1.ВыбратьЭлементы();
						Пока ПравилаВыгрузки1.ПолучитьЭлемент(0)=1 Цикл
							Если ПравилаВыгрузки1.ПризнакВыгрузки=ДаДА Тогда
								ИмяУзла=СтрЗаменить(Сокрлп(ПравилаВыгрузки1.Синоним)," ","_");
								РодВидРегистра=0;
								ВидРегистра=СоздатьЭлемент(ИмяУзла,РодВидРегистра,Регистры);
								Если ВыгрузитьДвиженияРегистровДокумента(ПравилаВыгрузки1,ВидРегистра,Док)=1 Тогда
									Если Регистры<>РодВидРегистра Тогда
										Регистры.appendChild(РодВидРегистра);
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли Рез=-1 Тогда 
						Прервать;
					КонецЕсли;//иначе если Рез=0 - продолжить
				КонецЦикла;
			КонецЕсли;
			
			//по справочникам
			ВыгрузитьДвиженияСправочниковДокумента(ДокументХМЛ,Док);
			
			//по журналу расчетов
			Если Метаданные.Документ(Док.Вид()).Расчет=1 Тогда
				Для А=1 По 100 Цикл
					Рез=ПолучитьПравилаВыгрузки("","Журналы расчетов",А);
					Если Рез=1 Тогда
						ПравилаТипа=ПравилаВыгрузки.ТекущийЭлемент();
						РодЖурналы=0;
						Журналы=СоздатьЭлемент(СтрЗаменить(Сокрлп(ПравилаВыгрузки.Синоним)," ","_"),РодЖурналы,Пакет);
						ПравилаВыгрузки1.ИспользоватьВладельца(ПолучитьВладельцаПравил(ВыбрБаза));
						ПравилаВыгрузки1.ИспользоватьРодителя(ПравилаТипа);
						ПравилаВыгрузки1.ПорядокКодов();
						ПравилаВыгрузки1.ВыбратьЭлементы();
						Было=0;
						Пока ПравилаВыгрузки1.ПолучитьЭлемент(0)=1 Цикл
							Если ПравилаВыгрузки1.ПризнакВыгрузки=ДаДА Тогда
								ИмяУзла=СтрЗаменить(Сокрлп(ПравилаВыгрузки1.Синоним)," ","_");
								РодВидЖурналы=0;
								ВидЖурнала=СоздатьЭлемент(ИмяУзла,РодВидЖурналы,Журналы);
								Если ВыгрузитьДвиженияЖарналаДокумента(ПравилаВыгрузки1,ВидЖурнала,Док)=1 Тогда
									Если Журналы<>РодВидЖурналы Тогда
										Журналы.appendChild(РодВидЖурналы);
									КонецЕсли;
									Было=1;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						Если Было=1 Тогда
							Если Пакет<>РодЖурналы Тогда
								Пакет.appendChild(РодЖурналы);
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли Рез=-1 Тогда 
						Прервать;
					КонецЕсли;//иначе если Рез=0 - продолжить
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		//по операциям
		Если (ПравилаВида.Движения=ДаДа) И (Метаданные.Документ(Док.Вид()).БухгалтерскийУчет=1) Тогда
			Опер=Док.Операция;
			Если Опер.Выбрана()=1 Тогда
			Для А=1 По 100 Цикл
				Рез=ПолучитьПравилаВыгрузки("","Операции",А);
				Если Рез=1 Тогда
					ПравилаТипа=ПравилаВыгрузки.ТекущийЭлемент();
					РодОперации=0;
					Операции=СоздатьЭлемент(СтрЗаменить(Сокрлп(ПравилаВыгрузки.Синоним)," ","_"),РодОперации,Пакет);
					Если Пакет<>РодОперации Тогда
						Пакет.appendChild(РодОперации);
					КонецЕсли;
					Документ=СоздатьЭлемент("Документ");
					Операции.appendChild(Документ);
					ПравилаВыгрузки1.ИспользоватьВладельца(ПолучитьВладельцаПравил(ВыбрБаза));
					ПравилаВыгрузки1.ИспользоватьРодителя(ПравилаТипа);
					ПравилаВыгрузки1.ПорядокКодов();
					ПравилаВыгрузки1.ВыбратьЭлементы();
					Пока ПравилаВыгрузки1.ПолучитьЭлемент(0)=1 Цикл
						Если ПравилаВыгрузки1.ПризнакВыгрузки=ДаДА Тогда
							ИмяУзла=СтрЗаменить(Сокрлп(ПравилаВыгрузки1.Синоним)," ","_");
							ПравилаВыгрузки.ИспользоватьВладельца(ПолучитьВладельцаПравил(ВыбрБаза));
							ПравилаВыгрузки.ИспользоватьРодителя(ПравилаВыгрузки1.ТекущийЭлемент());
							Если ПравилаВыгрузки1.Наименование="Атрибуты операции" Тогда
								РодЭлемент=0;
								Элемент=СоздатьЭлемент(ИмяУзла,РодЭлемент,Документ);
								Если ВыгрузитьСтрокуДанных(Элемент,"Атрибуты операции",Опер,"")=1 Тогда
									Если Документ<>РодЭлемент Тогда
										Документ.appendChild(РодЭлемент);
									КонецЕсли;
								КонецЕсли;
							Иначе
								Опер.ВыбратьПроводки();
								Пока Опер.ПолучитьПроводку()=1 Цикл
									РодЭлемент=0;
									Элемент=СоздатьЭлемент(ИмяУзла,РодЭлемент,Документ);
									Если ВыгрузитьСтрокуДанных(Элемент,"Атрибуты проводки",Опер,"")=1 Тогда
										ДобавитьЭлемент(Элемент,"_СложнаяПроводка",Опер.СложнаяПроводка());
										Если Документ<>РодЭлемент Тогда
											Документ.appendChild(РодЭлемент);
										КонецЕсли;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли Рез=-1 Тогда 
					Прервать;
				КонецЕсли;//иначе если Рез=0 - продолжить
			КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		
	Иначе
		//такой документ не существует 
		//получаем первые попавшиеся правила выгрузки шапки документа
		Для А=1 По 100 Цикл  
			Рез=ПолучитьПравилаВыгрузки(ПравилаВида,"Шапка",А);
			Если Рез<>0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ИмяШапки=СтрЗаменить(Сокрлп(ПравилаВыгрузки.Синоним)," ","_");
		Если ПравилаВыгрузки.НайтиПоНаименованию("#Удален",,1)=1 Тогда
			Если ПравилаВыгрузки.ПризнакВыгрузки=ДаДА Тогда
				РодШапкаХМЛ=0;
				ШапкаХМЛ=СоздатьЭлемент(ИмяШапки,РодШапкаХМЛ,ДокументХМЛ);
				Если ДокументХМЛ<>РодШапкаХМЛ Тогда
					ДокументХМЛ.appendChild(РодШапкаХМЛ);
				КонецЕсли;
				ИмяУзла=СтрЗаменить(Сокрлп(ПравилаВыгрузки.Синоним),"#","_");
				ДобавитьЭлемент(ДокументХМЛ,ИмяУзла,1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	М_Сообщить("Выгружен "+Вид+",  "+Док.НомерДок+"  ,"+Док.ДатаДок);
	Если РодДокументХМЛ<>Документы Тогда
		Документы.appendChild(РодДокументХМЛ);
	КонецЕсли;
КонецПроцедуры //ВыгрузитьДокумент
















//_____________________________________________________________________________
Процедура ВыгрузитьСправочник(Справочники,Вид,ИДД,Дата1,Дата2)
	//создаем новый элемент документа XML
	РодЭлементХМЛ=0;
	ЭлементХМЛ=СоздатьЭлемент(Сокрлп(ПравилаВыгрузки.Синоним),РодЭлементХМЛ,Справочники);
	РеквизитИДД=0;
	Если НеВыгружатьИДД=0 Тогда
		ДобавитьЭлемент(ЭлементХМЛ,"IDD",ИДД,РеквизитИДД);
	КонецЕсли;

	Спр=СоздатьОбъект("Справочник."+Вид);
	Спр.ИспользоватьДату(РабочаяДата());
	Если Спр.НайтиПоРеквизиту("IDD",ИДД,1)=1 Тогда
		Если ПриВыгрузкеСправочника(Спр)=0 Тогда
			Возврат ;
		КонецЕсли;
		Если ВыгрузитьСтрокуДанных(ЭлементХМЛ,Вид,Спр,РеквизитИДД,Дата1,Дата2)=0 Тогда
		    Возврат ;
		КонецЕсли;
	Иначе
		//не существует
		Если ПравилаВыгрузки.НайтиПоНаименованию("#Удален",,1)=1 Тогда
			Если ПравилаВыгрузки.ПризнакВыгрузки=ДаДА Тогда
				ДобавитьЭлемент(ЭлементХМЛ,"_Удален",1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	М_Сообщить("Выгружен "+Вид+",  "+Спр.Наименование+"  ,"+Спр.Код);

	Если РодЭлементХМЛ<>Справочники Тогда
		Справочники.appendChild(РодЭлементХМЛ);
	КонецЕсли;
КонецПроцедуры //ВыгрузитьСправочник
//_____________________________________________________________________________






//_____________________________________________________________________________
//процедура проведения документа в режиме загрузки движений
//выполняется всегда на новой копии обработки обмена!!!
Процедура ПроведениеДокумента(Док,Дерево,ТекБаза)
	Перем ПустойПример;
	ВыбрБаза=ТекБаза;
	Вид=Сокрлп(Док.Вид());
	ИДД=Док.IDD;
	ПравилаЗагрузки=СоздатьОбъект("Справочник.ПравилаЗагрузки");ПравилаЗагрузки.ПорядокКодов();
	ПравилаЗагрузки2=СоздатьОбъект("Справочник.ПравилаЗагрузки");ПравилаЗагрузки2.ПорядокКодов();
	Если Сокрлп(ТипЗначенияСтр(Дерево))="OLE.IXMLDOMDocument" Тогда
		
		//по регистрам
		Если Метаданные.Документ(Вид).ОперативныйУчет=1 Тогда
			Справочники=ПолучитьПравилаЗагрузки("","Регистры");
			Если Справочники<>"" Тогда
				ПравилаЗагрузки.ИспользоватьРодителя(Справочники);
				ПравилаЗагрузки.ИспользоватьВладельца(ПолучитьВладельцаПравил(ТекБаза));
				ПравилаЗагрузки.ВыбратьЭлементы();
				Пока ПравилаЗагрузки.ПолучитьЭлемент(0)=1 Цикл
					Если ПравилаЗагрузки.ПризнакЗагрузки=ДаДА Тогда
						ИмяРегистра=ПравилаЗагрузки.Наименование;
						ПравилаЗагрузки2.ИспользоватьВладельца(ПолучитьВладельцаПравил(ТекБаза));
						ПравилаЗагрузки2.ИспользоватьРодителя(ПравилаЗагрузки.ТекущийЭлемент());
						Если ПравилаЗагрузки2.НайтиПоНаименованию("Измерения",,1)=1 Тогда
							ПравилаЗагрузки2.ИспользоватьРодителя(ПравилаЗагрузки2.ТекущийЭлемент());
							Если ПравилаЗагрузки2.НайтиПоНаименованию("#ТекущийДокумент",,1)=1 Тогда
								Синоним2=СтрЗаменить(Сокрлп(ПравилаЗагрузки2.Синоним),"#","_");
								Выражение1="*/"+Сокрлп(Справочники.Синоним)+"/"+Сокрлп(ПравилаЗагрузки.Синоним)+"/Движение_регистра["+Синоним2+"="""+ИДД+"""]";
								ДеревоЗапроса=Дерево.SelectNodes(Выражение1);
								КоличествоДвижений=ДеревоЗапроса.length;
								Если КоличествоДвижений>0 Тогда
									//ПросмотрДерева(ДеревоЗапроса);
									ПравилаЗагрузки2.ИспользоватьРодителя(ПравилаЗагрузки.ТекущийЭлемент());
									Рег=Док.Регистр.ПолучитьАтрибут(ИмяРегистра);
									ДеревоЗапроса.reset();
									Приход=0;
									Для А=1 По КоличествоДвижений Цикл
										Элемент=ДеревоЗапроса.NextNode();
										НомерСтроки=0;
										Если ЗагрузитьСтрокуДанных(Элемент,ПравилаЗагрузки2,Рег,ИмяРегистра,,,,,,,Приход,НомерСтроки)=0 Тогда
											Прервать; //по этому регистру не загружаем
										КонецЕсли;
										Рег.ПривязыватьСтроку(НомерСтроки);
										Если Приход=1 Тогда
											Рег.ДвижениеПриходВыполнить();
										Иначе
											Рег.ДвижениеРасходВыполнить();
										КонецЕсли;
									КонецЦикла;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		
		////делаем движения по периодическим реквизитам справочников
		Справочники=ПолучитьПравилаЗагрузки("","Документы");
		Если Справочники<>"" Тогда
			ПравилаЗагрузки.ИспользоватьРодителя(Справочники);
			ПравилаЗагрузки.ИспользоватьВладельца(ПолучитьВладельцаПравил(ТекБаза));
			Если ПравилаЗагрузки.НайтиПоНаименованию(Вид,,1)=1 Тогда
				Выражение1="*/"+Сокрлп(Справочники.Синоним)+"/"+Сокрлп(ПравилаЗагрузки.Синоним)+"/Движение_справочника[_ТекущийДокумент="""+ИДД+"""]";
				ДеревоЗапроса=Дерево.SelectNodes(Выражение1);
				КоличествоДвижений=ДеревоЗапроса.length;
				Если КоличествоДвижений>0 Тогда
					//ПросмотрДерева(ДеревоЗапроса);
					ПравилаЗагрузки2.ИспользоватьРодителя(ПравилаЗагрузки.ТекущийЭлемент());
					Рег=Док.Регистр.ПолучитьАтрибут(ИмяРегистра);
					ДеревоЗапроса.reset();
					Для А=1 По КоличествоДвижений Цикл
						Элемент=ДеревоЗапроса.NextNode();
						Эл=Элемент.getElementsByTagName("Справочник").item(0);Зн=Эл.text;
						Справ=ПолучитьОбъект(Зн,ПустойПример,Эл);
						Эл=Элемент.getElementsByTagName("Реквизит").item(0);Зн=Эл.text;
						Реквизит=ПолучитьОбъект(Зн,ПустойПример,Эл);
						Эл=Элемент.getElementsByTagName("Дата").item(0);Зн=Эл.text;
						ДатаУст=ПолучитьОбъект(Зн,ПустойПример,Эл);
						Эл=Элемент.getElementsByTagName("Значение").item(0);Зн=Эл.text;
						Значение=ПолучитьОбъект(Зн,ПустойПример,Эл);
						Док.УстановитьРеквизитСправочника(Справ,Реквизит,Значение,ДатаУст);
						//Попытка
						//Исключение
						//КонецПопытки;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
	Если Метаданные.Документ(Вид).Расчет=1 Тогда
		//по журналу расчетов
		Справочники=ПолучитьПравилаЗагрузки("","Журналы расчетов");
		Если Справочники<>"" Тогда
			ПравилаЗагрузки.ИспользоватьРодителя(Справочники);
			ПравилаЗагрузки.ИспользоватьВладельца(ПолучитьВладельцаПравил(ТекБаза));
			ПравилаЗагрузки.ВыбратьЭлементы();
			Пока ПравилаЗагрузки.ПолучитьЭлемент(0)=1 Цикл
				Если ПравилаЗагрузки.ПризнакЗагрузки=ДаДА Тогда
					ИмяЖурнала=ПравилаЗагрузки.Наименование;
					
					ЖР=СоздатьОбъект("ЖурналРасчетов."+ИмяЖурнала);
					ТекПериод=ЖР.ТекущийПериод();
					СписокЖР=СоздатьОбъект("СписокЗначений");
					ЖР.ВыбратьЗаписиПоДокументу(Док.ТекущийДокумент());
					Пока ЖР.ПолучитьЗапись()>0 Цикл
						ЖР.УдалитьЗапись();
						ЖР.ВыбратьЗаписиПоДокументу(Док.ТекущийДокумент());
					КонецЦикла;   
					
					ПравилаЗагрузки2.ИспользоватьВладельца(ПолучитьВладельцаПравил(ТекБаза));
					ПравилаЗагрузки2.ИспользоватьРодителя(ПравилаЗагрузки.ТекущийЭлемент());
					Если ПравилаЗагрузки2.НайтиПоНаименованию("Документ",,1)=1 Тогда
						Синоним2=Сокрлп(ПравилаЗагрузки2.Синоним);
						Выражение1="*/"+СтрЗаменить(Сокрлп(Справочники.Синоним)," ","_")+"/"+Сокрлп(ПравилаЗагрузки.Синоним)+"/Движение_журнала["+Синоним2+"="""+ИДД+"""]";
						ДеревоЗапроса=Дерево.SelectNodes(Выражение1);
						КоличествоДвижений=ДеревоЗапроса.length;
						Если КоличествоДвижений>0 Тогда
							//ПросмотрДерева(ДеревоЗапроса);
							СинонимПериодРегистрации="";
							Если ПравилаЗагрузки2.НайтиПоНаименованию("#ПериодРегистрации",,1)=1 Тогда
								СинонимПериодРегистрации=СтрЗаменить(Сокрлп(ПравилаЗагрузки2.Синоним),"#","_");
							КонецЕсли;
							ДеревоЗапроса.reset();
							Для А=1 По КоличествоДвижений Цикл
								Элемент=ДеревоЗапроса.NextNode();
								
								//определяем значение периода регистрации
								Если СинонимПериодРегистрации<>"" Тогда
									Попытка
									Эл=Элемент.getElementsByTagName(СинонимПериодРегистрации).item(0);Зн=Эл.text;
									Атрибут=ПолучитьОбъект(Зн,ПравилаЗагрузки2.Значение,Эл);
									Период=ЖР.ПериодПоДате(Атрибут);
									Если Сокрлп(ТекПериод)<>Сокрлп(Период) Тогда
										Рез=ЖР.УстановитьТекущийПериод(Период,0);
									КонецЕсли;
									Исключение //реквизит не был выгружен
									КонецПопытки;
								КонецЕсли;
								
								ЖР.Новая();
								РодительскийДокумент="";
								ОбъектЗаписи="";
								Если ЗагрузитьСтрокуДанных(Элемент,ПравилаЗагрузки2,ЖР,ИмяЖурнала,,,,,,,,,,1,,РодительскийДокумент,ОбъектЗаписи)=0 Тогда
									Прервать; //по этому журналу не загружаем
								КонецЕсли;
								
								//проверка на дорогу...
								Если ПустоеЗначение(РодительскийДокумент)=1 Тогда
									Сообщить("При загрузке документа "+Док+" в движениях по ЖР "+ИмяЖурнала+" не загружен обязательный реквизит ""РодительскийДокумент"" - загрузку данного движения пропускаем (объект записи "+ОбъектЗаписи+")","I");
									Продолжить;
								КонецЕсли;
								
								ЖР.Записать();
								СписокЖР.ДобавитьЗначение(ЖР.ТекущаяЗапись(),А);
								
							
								Период=ЖР.ТекущийПериод();
								Если Сокрлп(ТекПериод)<>Сокрлп(Период) Тогда
									ЖР.УстановитьТекущийПериод(ТекПериод,0);
								КонецЕсли;
								
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	//загружаем операции
	Если Метаданные.Документ(Вид).БухгалтерскийУчет=1 Тогда
		Справочники=ПолучитьПравилаЗагрузки("","Операции");
		Если Справочники<>"" Тогда
			СинонимОперации=СтрЗаменить(Сокрлп(Справочники.Синоним)," ","_");
			ПравилаЗагрузки.ИспользоватьРодителя(Справочники);
			ПравилаЗагрузки.ИспользоватьВладельца(ПолучитьВладельцаПравил(ТекБаза));
			
			
			СинонимСложнаяПроводка="";
			Если ПравилаЗагрузки.НайтиПоНаименованию("Атрибуты проводки",,1)=1 Тогда
				ПравилаЗагрузки2.ИспользоватьВладельца(ПравилаЗагрузки.Владелец);
				ПравилаЗагрузки2.ИспользоватьРодителя(ПравилаЗагрузки.ТекущийЭлемент());
				Если ПравилаЗагрузки2.НайтиПоНаименованию("#СложнаяПроводка",,1)=1 Тогда
					СинонимСложнаяПроводка=СтрЗаменить(Сокрлп(ПравилаЗагрузки2.Синоним),"#","_");
				КонецЕсли;
			КонецЕсли;
			
			
			
			Если ПравилаЗагрузки.НайтиПоНаименованию("Атрибуты операции",,1)=1 Тогда
				Если ПравилаЗагрузки.ПризнакЗагрузки=ДаДа Тогда
					АтрибутыОперации=ПравилаЗагрузки.ТекущийЭлемент();
					СинонимАтрибутыОперации=СтрЗаменить(Сокрлп(ПравилаЗагрузки.Синоним)," ","_");
					ПравилаЗагрузки.ИспользоватьРодителя(АтрибутыОперации);
					Если ПравилаЗагрузки.НайтиПоНаименованию("#Документ",,1)=1 Тогда
						СинонимДокумент=СтрЗаменить(Сокрлп(ПравилаЗагрузки.Синоним),"#","_");
						Выражение1="*/"+СинонимОперации+"/Документ["+СинонимАтрибутыОперации+"/"+СинонимДокумент+"="""+ИДД+"""]";
						ДеревоЗапроса=Дерево.SelectNodes(Выражение1);
						Если ДеревоЗапроса.length>0 Тогда
							Движения=ДеревоЗапроса.item(0);
							//ПросмотрДерева(ДеревоЗапроса);
							   
							Если ТипЗначения(Док)=12 Тогда //загружаем операции
								Опер=СоздатьОбъект("Операция");
								Опер.НайтиОперацию(Док);
							Иначе
								Опер=Док.Операция;//это проводится документ
							КонецЕсли;
							//сначала все удаляем
							Пока Опер.КоличествоПроводок()>0 Цикл
								Опер.ВыбратьПроводки();
								Опер.ПолучитьПроводку();
								Опер.УдалитьПроводку();
							КонецЦикла;
							
							
							
							ПроводкиВключены=0;
							ПравилаЗагрузки2.ИспользоватьВладельца(ПолучитьВладельцаПравил(ТекБаза));
							ПравилаЗагрузки.ИспользоватьРодителя(Справочники);
							ПравилаЗагрузки.ВыбратьЭлементы();
							Пока ПравилаЗагрузки.ПолучитьЭлемент(0)=1 Цикл
								Если ПравилаЗагрузки.ПризнакЗагрузки=ДаДа Тогда
									Синоним=СтрЗаменить(Сокрлп(ПравилаЗагрузки.Синоним)," ","_");
									Проводки=Движения.getElementsByTagName(Синоним);
									КоличествоДвижений=Проводки.length;
									Если КоличествоДвижений>0 Тогда
										ПравилаЗагрузки2.ИспользоватьРодителя(ПравилаЗагрузки.ТекущийЭлемент());
										Для А=1 По КоличествоДвижений Цикл
											Элемент=Проводки.nextNode();
											Если ПравилаЗагрузки.Наименование="Атрибуты операции" Тогда
												Если ЗагрузитьСтрокуДанных(Элемент,ПравилаЗагрузки2,Опер,"Операции",,,,,,,,,,,ПроводкиВключены)=0 Тогда
													Прервать; //по этому журналу не загружаем
												КонецЕсли;
											Иначе
												
												СложнаяПроводка=0;	 

												Если СинонимСложнаяПроводка<>"" Тогда
													Попытка
													Эл=Элемент.getElementsByTagName(СинонимСложнаяПроводка).item(0);Зн=Эл.text;
													СложнаяПроводка=Число(ПолучитьОбъект(Зн,ПустойПример,Эл));
													Исключение
													КонецПопытки;
												КонецЕсли;	
												
												Если СложнаяПроводка=1 Тогда
													Опер.НоваяКорреспонденция();
												Иначе
													Опер.НоваяПроводка();
												КонецЕсли;
												Если ЗагрузитьСтрокуДанных(Элемент,ПравилаЗагрузки2,Опер,"Операции",,,,,,,,,,0)=0 Тогда
													Прервать; //по этому журналу не загружаем
												КонецЕсли;
											КонецЕсли;
										КонецЦикла;
									КонецЕсли;
								КонецЕсли;
								
							КонецЦикла;
							Опер.ВключитьПроводки(ПроводкиВключены);
							Опер.Записать();
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	КонецЕсли;
	Возврат;
КонецПроцедуры //ПроведениеДокумента
  
Процедура ПровестиДокумент(Док,ЗагрузкаДвижений)
	Если Сокрлп(Док.Вид())=ДокументОперации Тогда
		М_Сообщить("Проводится документ "+Док.ТекущийДокумент());
		ПроведениеДокумента(Док,Пакет,ВыбрБаза);
		Возврат;
	Иначе
		Попытка
			Если Метаданные.Документ(Док.Вид()).ОперативныйУчет=1 Тогда
				Если НачМесяца(Док.ДатаДок)>НачМесяца(ПолучитьДатуТА()) Тогда
					Сообщить("Устанавливаем новую ТА на дату "+Док.ДатаДок);
					Попытка
						УстановитьТАна(Док.ТекущийДокумент());
					Исключение
						Если МонопольныйРежим()=0 Тогда
							Сообщить("Зайдите в программу в МОНОПОЛЬНОМ РЕЖИМЕ и повторите загрузку","I");
						Иначе
							Сообщить("Закройте все открытые формы документов и повторите загрузку !","I");
						КонецЕсли;
//						УстановитьТАна(Док.ТекущийДокумент());
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		Исключение
			ЗагрузкаДвижений=0;
		КонецПопытки;
	КонецЕсли;
	
	Если ЗагрузкаДвижений=0 Тогда
		СписокПроводимыхДокументов.ДобавитьЗначение(Док.ТекущийДокумент());
		Возврат;
	КонецЕсли;
	
	
	М_Сообщить("Проводится документ "+Док.ТекущийДокумент());
	НеРегистрироватьИзмененияМОД=1;
	ПроведениеПоАлгоритмуМОД=ЗагрузкаДвижений;
	ПЕремИмяОбработки=ОбработкаОбменДанными;
	ОбработкаОбменДанными="Обработка.ОбменДаннымиXML#";
//	ОбработкаОбменДанными="Обработка#";
//	ФайлОбработкиОбменаДанными=КаталогИБ()+"ExtForms\ОбменДаннымиXML.ert";
	ПЕрем1=МОДПерем1;
	ПЕрем2=МОДПерем2;
	МОДПерем1=Пакет;
	МОДПерем2=ВыбрБаза;
	Док.Провести();
	МОДПерем1=ПЕрем1;
	МОДПерем2=ПЕрем2;
	ОбработкаОбменДанными=ПЕремИмяОбработки;
	НеРегистрироватьИзмененияМОД=0;
	ПроведениеПоАлгоритмуМОД=0;
КонецПроцедуры //ПровестиДокумент(Док)


//_____________________________________________________________________________
//загрузить элемент справочника вместе с историей из элемента дерева по правилам обмена
Функция ЗагрузитьСправочник(ПравилаОбмена,Элемент)
	Перем ПравилаЗагрузки,Спр,ИДД;
	ПравилаЗагрузки=СоздатьОбъект("Справочник.ПравилаЗагрузки");
	ПравилаЗагрузки.ПорядокКодов();
	ПравилаЗагрузки.ИспользоватьВладельца(ПолучитьВладельцаПравил(ВыбрБаза));
	ПравилаЗагрузки.ИспользоватьРодителя(ПравилаОбмена);
	Вид=ПравилаОбмена.Наименование;
	Спр=СоздатьОбъект("Справочник."+Вид);
	Спр.ИспользоватьДату(РабочаяДата());
	 
	
	//определяем свойства справочника, заданные в текущей конфигурации
	Мета=Метаданные.Справочник(Вид);
	Подчиненность=Мета.Владелец.Выбран();
	КонтрольУникальности=Мета.КонтрольУникальности;

	
	//как будем идентифицировать: IDD, Код, Наименование, Реквизит ???
	Попытка//если нет реквизита IDD, значит идентификация происходит по другому полю !
	ИДД=Сокрлп(Элемент.getElementsByTagName("IDD").item(0).text);
	Найден=Спр.НайтиПоРеквизиту("IDD",ИДД,1);
	Исключение
	Найден=0;
	ИДД="";
	КонецПопытки;
	ЗагружаемыйИДД=ИДД;//присваиваем глобальную переменную текущего загружаемого объекта

	Если Найден=0 Тогда
		Рез=ПравилаЗагрузки.ВыбратьЭлементыПоРеквизиту("Синхронизация",ДаДа,1,0);
		Если Рез=1 Тогда
			Если Подчиненность=1 Тогда //если данный справочник имеет владельца
				Рез=ПравилаЗагрузки.НайтиПоНаименованию("Владелец",,1);
				Если Рез=0 Тогда
					Сообщить("Внимание: неправильно настроены правила загрузки справочника "+Вид+" в базе "+ВыбрБаза,"!");
					Сообщить("        : в справочнике загрузки долженен быть указан реквизит Владелец - загрузку пропускаем");
					Возврат 0;
				КонецЕсли;
				Если ПравилаЗагрузки.ПризнакЗагрузки<>ДаДа Тогда
					Сообщить("Внимание: неправильно настроены правила загрузки справочника "+Вид+" в базе "+ВыбрБаза,"!");
					Сообщить("        : в справочнике загрузки реквизит Владелец должен быть разрешенным для загрузки - загрузку пропускаем");
					Возврат 0;
				КонецЕсли;
				СинонимВладельца=Сокрлп(ПравилаЗагрузки.Синоним);
				ДеревоВл=Элемент.getElementsByTagName(СинонимВладельца);
				Если ДеревоВл.length=0 Тогда
					Сообщить("Внимание: вероятно неправильно настроены правила загрузки или выгрузки справочника "+Вид+" в базе "+ВыбрБаза,"!");
					Сообщить("        : загружаемый пакет должен иметь элемент "+СинонимВладельца+" - загрузку пропускаем");
					Возврат 0;
				КонецЕсли;
				ЭлементВл=ДеревоВл.item(0);
				Зн=ЭлементВл.text;
				Владелец=ПолучитьОбъект(Зн,Спр.Владелец,ЭлементВл);//11,Мета.Идентификатор
				Если ПустоеЗначение(Владелец)=1 Тогда
					Сообщить("Внимание: вероятно неправильно настроены правила загрузки или выгрузки справочника "+Вид+" в базе "+ВыбрБаза,"!");
					Сообщить("        : загружаемый пакет должен иметь значение реквизита Владелец ("+СинонимВладельца+"), который бы присутствовал либо в нашей базе либо в пакете");
					Возврат 0;
				КонецЕсли;
				
				Спр.ИспользоватьВладельца(Владелец);
			КонецЕсли;
			
			
			ПравилаЗагрузки.ВыбратьЭлементыПоРеквизиту("Синхронизация",ДаДа,1,0);
			Пока ПравилаЗагрузки.ПолучитьЭлемент()=1 Цикл
				ИмяИДРеквизита=ПравилаЗагрузки.Наименование;
				Синоним=Сокрлп(ПравилаЗагрузки.Синоним);
				
				    

					//пробуем получить как атрибут
					Зн=Элемент.getAttribute(Синоним);
					Если ПустоеЗначение(Зн)=1 Тогда
						ЭлементСинхронизации=Элемент.SelectNodes(Синоним);
						Если ЭлементСинхронизации.length=0 Тогда
							Продолжить;
						КонецЕсли;
						ЭлСинхр=ЭлементСинхронизации.item(0);
						Зн=ЭлСинхр.text;
					Иначе
						ЭлСинхр=Элемент;
					КонецЕсли;
				
				Атрибут=ПолучитьОбъект(Зн,ПравилаЗагрузки.Значение,ЭлСинхр);
				
				
				Если ИмяИДРеквизита="Наименование" Тогда
					Найден=Спр.НайтиПоНаименованию(Атрибут,Подчиненность,1);
				ИначеЕсли ИмяИДРеквизита="Код" Тогда
					Найден=Спр.НайтиПоКоду(Атрибут,Подчиненность);
				Иначе
					Найден=Спр.НайтиПоРеквизиту(ИмяИДРеквизита,Атрибут,1-Подчиненность);
				КонецЕсли;
				Если Найден=0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	
	//Определяем реквизиты по умолчанию
	ЭтоГруппа=0;
	ПомеченНаУдаление=0;
	Удален=0;
	
	//проверяем блокировку объекта
	Если Найден=1 Тогда
		Если ИДД="" Тогда
		    ИДД=Спр.IDD;
		КонецЕсли;
		Если Спр.Блокировка(1)=0 Тогда    //сначала заблокируем
			Сообщить("Справочник "+Вид+" "+Спр.Наименование+" код "+Спр.Код+" заблокирован т.е. открыт  пользователем.");
			ОтменитьТранзакцию();
			Спр.ОшибкаБлокировки();//Закройте указанный выше справочник и повторите загрузку ...
			Возврат 0;
		КонецЕсли;
		Спр.Блокировка(0);              //а теперь разблокируем
		ПомеченНаУдаление=Спр.ПометкаУдаления();
		ЭтоГруппа=Спр.ЭтоГруппа();
		
		//проверяем нало ли заменять старый IDD объекта на новый
		Если НеИзменятьИДПриЗагрузке=1 Тогда
			Если Спр.IDD<>ИДД Тогда
				//после загрузки, этому объекту вернем
				//старое значение и зарегистрируем его как измененный
				СписокИзмененияИД.ДобавитьЗначение(Спр.ТекущийЭлемент(),Спр.IDD);
			КонецЕсли;
		КонецЕсли;
		Спр.IDD=ИДД;
	Иначе
		//если не найден, то создаем новый справочник
		Если ИДД="" Тогда
		    ИДД=ПолучитьУникальныйIDD();//присвоим новый ИДД
		КонецЕсли;
		
		//предварительно определяем, что это: группа или элемент
		Рез=ПравилаЗагрузки.НайтиПоНаименованию("#ЭтоГруппа",,1);
		Если Рез=1 Тогда
			СинонимГр=СтрЗаменить(Сокрлп(ПравилаЗагрузки.Синоним),"#","_");
			ДеревоГр=Элемент.getElementsByTagName(СинонимГр);
			Если ДеревоГр.length>0 Тогда
				ЭтоГруппа=Число(ДеревоГр.item(0).text);
			КонецЕсли;
		КонецЕсли;
		
		//итак создаем
		Если ЭтоГруппа=0 Тогда
			глСоздатьНовыйОбъект(Спр);
		Иначе
			Попытка
				глСоздатьНовуюГруппу(Спр);
			Исключение
				Сообщить("Ошибка на "+Спр.Вид());
				глСоздатьНовуюГруппу(Спр); //обратитесь к разработчику !!
			КонецПопытки;
		КонецЕсли;
		Спр.IDD=ИДД;
	КонецЕсли;
	
	
	БылКод=Спр.Код;
	Если Найден=0 Тогда
	     БылКод="***такого кода нет***";
	КонецЕсли;

	Если ЗагрузитьСтрокуДанных(Элемент,ПравилаЗагрузки,Спр,Вид,ПомеченНаУдаление,Удален)=0 Тогда
 		Возврат 0;
	КонецЕсли;
	
	Если Удален=1 Тогда
		Сообщить("Удаляется справочник "+Вид+"  "+Спр.Наименование+" с кодом "+Спр.Код+" (IDD="+ИДД+")");
		Если Спр.НайтиЭлемент(Спр.ТекущийЭлемент())=1 Тогда
			Спр.Удалить(1);
		КонецЕсли;
		Возврат 1;
	КонецЕсли;
	
	
	Если Подчиненность=1 Тогда //для подчиненных справочников должен быть выбран владелец
		Если Спр.Владелец.Выбран()=0 Тогда
			Сообщить("Не найден владелец для справочника "+Вид+"  "+Спр.Наименование+" с кодом "+Спр.Код+" (IDD="+ИДД+") - загрузку пропускаем","!");
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	
	//проверка корректности кода !!!
	БылоИзменениеКода=0;
	Если КонтрольУникальности=1 Тогда
		ЗагружКод=Сокрлп(Спр.Код);
		Если БылКод<>ЗагружКод Тогда
			НовыйКод=Сокрлп(СоздатьНовыйКод(Вид,Спр,Подчиненность,Мета));
			Спр.Код=НовыйКод;
			Если РегистрацияПриЗагрузке=1 Тогда
				Если ЗагружКод<>НовыйКод Тогда//т.е. присвоили новый номер
					БылоИзменениеКода=1;//Зарегистрируем изменение после записи
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	Если ПриЗаписиСправочника(Спр)=0 Тогда
		Возврат 0;// - значит пользователь в своей обработке запретил записывать
	КонецЕсли;
	
	
	попытка
		Спр.Записать();
	Исключение
		Сообщить(ОписаниеОшибки(),"!!!");
		Сообщить("Ошибка в справочнике "+Вид+" "+Спр.Наименование+" с кодом "+Спр.Код+" (IDD="+Спр.IDD+", Владелец="+Спр.Владелец+", группа="+Спр.Родитель+")");
		Возврат 0;
	КонецПопытки;


	
	Если Спр.Выбран()=0 Тогда//на всякие пожарные
		Спр.НайтиПоРеквизиту("IDD",ИДД,1);
	КонецЕсли;
	
	//Если код изменился, то смотрим надо ли регистрировать изменение
	Если БылоИзменениеКода=1 Тогда
		НеРегистрироватьИзмененияМОД=0;
		ПриИзмененииОбъекта(Спр,Спр,РабочДата);//регистрируем для миграции во все базы - в т.ч. и обратно
	КонецЕсли;
	
	
	
	//если документ пришел из периферийной базы помеченным на удаление - то этот факт
	//надо зафиксировать т.к. пользователь может воспользоваться процедурой "Удаление помеченных объектов"
	Если ПомеченНаУдаление=1 Тогда
		ПриУдаленииОбъекта(Спр.ТекущийЭлемент());
	КонецЕсли;
	
	
	Если ПомеченНаУдаление=1 Тогда //надо поставить если не стоит пометка
		Если Спр.ПометкаУдаления()=0 Тогда
			Спр.Удалить(0);//ставим пометку
		КонецЕсли;
	Иначе
		Если Спр.ПометкаУдаления()=1 Тогда //надо снять если стоит пометка
			Спр.СнятьПометкуУдаления();
		КонецЕсли;
	КонецЕсли;
    
	//загрузим все периодические реквизиты
	Дата1=РабочДата;
	Дата2=РабочДата;
	ЗагрузитьИсторию(Элемент,ПравилаЗагрузки,Спр,Вид,Дата1,Дата2);
	МиграцияИзменений(ВыбрБаза,ИДД,11,Вид,Дата1,Дата2);


	Если ОбработкаПримера=1 Тогда
		Если ТипЗначения(Спр)=11 Тогда
	    МОДПерем1.ДобавитьЗначение(Спр.ТекущийЭлемент());
		КонецЕсли;
	КонецЕсли;
	
				
	Если Найден=0 Тогда
		М_Сообщить("Создан и записан "+Вид+" "+Спр.Наименование+" с кодом "+Спр.Код);
	Иначе
		М_Сообщить("Записан "+Вид+" "+Спр.Наименование+" с кодом "+Спр.Код);
	КонецЕсли;	
Возврат Спр.ТекущийЭлемент();	
КонецФункции //ЗагрузитьСправочник






//_____________________________________________________________________________
//загрузить документ вместе с историей из элемента дерева по правилам обмена
Функция ЗагрузитьДокумент(ПравилаОбмена,Элемент)
	Перем ПравилаЗагрузки,Док,ИДД;
	ПравилаШапки=ПолучитьПравилаЗагрузки(ПравилаОбмена,"Шапка");
	ПравилаЗагрузки=СоздатьОбъект("Справочник.ПравилаЗагрузки");
	ПравилаЗагрузки.ПорядокКодов();
	ПравилаЗагрузки.ИспользоватьВладельца(ПолучитьВладельцаПравил(ВыбрБаза));
	ПравилаЗагрузки.ИспользоватьРодителя(ПравилаШапки);
	Вид=ПравилаОбмена.Наименование;
	Док=СоздатьОбъект("Документ");
	
	
	
	//определяем свойства документа, заданные в текущей конфигурации
	Мета=Метаданные.Документ(Вид);
	РазрешитьПроведение=Мета.РазрешитьПроведение;
	КонтрольУникальности=Мета.КонтрольУникальности;
	
	//как будем идентифицировать: IDD, НомерДок, Реквизит ???
	Попытка//если нет реквизита IDD, значит идентификация происходит по другому полю !
		ИДД=Сокрлп(Элемент.getElementsByTagName("IDD").item(0).text);
		Найден=НайтиДокументПоIDD(Док,ИДД);
	Исключение
		Найден=0;
		ИДД="";
	КонецПопытки;
	ЗагружаемыйИДД=ИДД;//присваиваем глобальную переменную текущего загружаемого объекта
	
	Если Найден=0 Тогда
		Рез=ПравилаЗагрузки.ВыбратьЭлементыПоРеквизиту("Синхронизация",ДаДа,1,0);
		Если Рез=1 Тогда
			Пока ПравилаЗагрузки.ПолучитьЭлемент()=1 Цикл
				ИмяИДРеквизита=ПравилаЗагрузки.Наименование;
				Синоним=Сокрлп(ПравилаЗагрузки.Синоним);
				


					//пробуем получить как атрибут
					Зн=Элемент.getAttribute(Синоним);
					Если ПустоеЗначение(Зн)=1 Тогда
						ЭлементСинхронизации=Элемент.SelectNodes(Синоним);
						Если ЭлементСинхронизации.length=0 Тогда
							Продолжить;
						КонецЕсли;
						ЭлСинхр=ЭлементСинхронизации.item(0);
						Зн=ЭлСинхр.text;
					Иначе
						ЭлСинхр=Элемент;
					КонецЕсли;

				
					Атрибут=ПолучитьОбъект(Зн,ПравилаЗагрузки.Значение,ЭлСинхр);
					
					Если ИмяИДРеквизита="НомерДок" Тогда
						Попытка
							ДатаДок=Элемент.getElementsByTagName("ДатаДок").text;
						Исключение
							ДатаДок=Элемент.getAttribute("ДатаДок");
							Если ПустоеЗначение(ДатаДок)=1 Тогда
								ДатаДок=РабочДата;
							КонецЕсли;
						КонецПопытки;
						Нумератор=Метаданные.Документ(Вид).Нумератор; // Получим нумератор
						Если Нумератор.Выбран()=1 Тогда
							ИдентНумератора=Нумератор.Идентификатор;
						Иначе
							ИдентНумератора=Вид;
						КонецЕсли;
						Найден=Док.ВыбратьПоНомеру(Атрибут,ДатаДок,ИдентНумератора);
						Док.ПолучитьДокумент();
					Иначе
						Найден=Док.ВыбратьПоЗначению(,,ИмяИДРеквизита,Атрибут);
						Док.ПолучитьДокумент();
					КонецЕсли;
					Если Найден=0 Тогда
						Прервать;
					КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	
	
	//Определяем реквизиты по умолчанию
	Удален=0;
	Проведен=0;
	ВремяДокумента=ТекущееВремя();
	ПомеченНаУдаление=0;
	
	Если Найден=1 Тогда
		Если ИДД="" Тогда
			ИДД=Док.IDD;
		КонецЕсли;
		//итак документ найден : делаем проверку на совпадение видов
		Если Док.Вид()<>Вид Тогда
			Сообщить("ВНИМАНИЕ: загружаемый документ "+Вид+" с IDD = "+ИДД+" уже есть в нашей базе, но другого вида : "+Док.Вид()+"   - не загружаем !!","!!!");
			Возврат 0;
		КонецЕсли;
		
		
		
		//проверяем блокировку объекта
		Если Док.Блокировка(1)=0 Тогда    //сначала заблокируем
			Сообщить("Документ "+Вид+" "+Док.НомерДок+" от "+Док.ДатаДок+" заблокирован т.е. открыт пользователем.");
			ОтменитьТранзакцию();
			Док.ОшибкаБлокировки();//Закройте указанный выше справочник и повторите загрузку ...
			Возврат 0;
		КонецЕсли;
		Док.Блокировка(0);              //а теперь разблокируем
		
		ПомеченНаУдаление=Док.ПометкаУдаления();
		Проведен=Док.Проведен();
		ВремяДокумента=Док.ПолучитьВремя();
		ДатаДок=Док.ДатаДок;
		
		
		//заменяем старый IDD объекта на новый !!
		Если НеИзменятьИДПриЗагрузке=1 Тогда
			Если Док.IDD<>ИДД Тогда
				//после загрузки, этому объекту вернем
				//старое значение и зарегистрируем его как измененный
				СписокИзмененияИД.ДобавитьЗначение(Док.ТекущийДокумент(),Док.IDD);
			КонецЕсли;
		КонецЕсли;
		
		
	Иначе
		Если ИДД="" Тогда
		    ПолучитьУникальныйIDD();//присвоим новый ИДД
		КонецЕсли;
		//если не найден, то создаем новый документ
		Док=СоздатьОбъект("Документ."+Вид);
		глСоздатьНовыйОбъект(Док);
		ДатаДок=РабочДата;
	КонецЕсли;
	Док.IDD=ИДД;
	
	
	БылНомер=Док.НомерДок;
	Если Найден=0 Тогда
		БылНомер="***такого номера нет****";
	КонецЕсли;
	
	//загружаем реквизиты шапки
	Если ПравилаШапки<>"" Тогда
		Синоним=Сокрлп(ПравилаШапки.Синоним);
		Если Синоним="*" Тогда
			ЭлементДанных=Элемент;
		Иначе
			Дерево=Элемент.SelectNodes(Синоним);
			Если Дерево.length>0 Тогда
				ЭлементДанных=Дерево.item(0);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗагрузитьСтрокуДанных(ЭлементДанных, ПравилаЗагрузки, Док, Вид, ПомеченНаУдаление, Удален, , ВремяДокумента, Проведен,ДатаДок)=0 Тогда
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Если Удален=1 Тогда
		Сообщить("Удаляется документ "+Вид+" "+Док.НомерДок+" "+Док.ДатаДок);
		Если Док.НайтиДокумент(Док.ТекущийДокумент())=1 Тогда
			Док.Удалить(1);
		КонецЕсли;
		Возврат 1;
	КонецЕсли;
	
	
	
	
	ПравилаТаблицы=ПолучитьПравилаЗагрузки(ПравилаОбмена,"Табличная часть");
	//загружаем табличную часть
	Если ПравилаТаблицы<>"" Тогда
		//удаляем старую табличную часть
		Пока Док.КоличествоСтрок() <> 0 Цикл
			Док.ВыбратьСтроки();
			Док.ПолучитьСтроку();
			Док.УдалитьСтроку();
		КонецЦикла;
		
		
		ПравилаЗагрузки=СоздатьОбъект("Справочник.ПравилаЗагрузки");
		ПравилаЗагрузки.ПорядокКодов();
		ПравилаЗагрузки.ИспользоватьВладельца(ПолучитьВладельцаПравил(ВыбрБаза));
		ПравилаЗагрузки.ИспользоватьРодителя(ПравилаТаблицы);
		
		Синоним=Сокрлп(ПравилаТаблицы.Синоним);
		Если Найти(Синоним," ")>0 Тогда
			Если ОдноСлово(СтрЗаменить(Синоним," ",""))=1 Тогда
				Синоним=СтрЗаменить(Синоним," ","_");
			КонецЕсли;
		КонецЕсли;
		//Дерево=Элемент.getElementsByTagName(Синоним);
		Дерево=Элемент.SelectNodes(Синоним);
		КолСтрок=Дерево.length;
//		ПросмотрДерева(Дерево);
		Дерево.reset();
		Для А=1 По КолСтрок Цикл
			ТаблЭлемент=Дерево.nextNode();
			Док.НоваяСтрока();
			Если ЗагрузитьСтрокуДанных(ТаблЭлемент, ПравилаЗагрузки, Док, Вид)=0 Тогда
				Возврат 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
		//Блок проверки корректности номера документа
		ЗагружНомер=Сокрлп(Док.НомерДок);
		БылоИзменениеНомера=0;
		Если (КонтрольУникальности=1) ИЛИ (ЗагружНомер="") Тогда
			Если ЗагружНомер<>БылНомер Тогда
				НовыйНомер=Сокрлп(СоздатьНовыйНомер(Вид,ДатаДок,Док.ТекущийДокумент(),Док.НомерДок));
				Док.НомерДок=НовыйНомер;
				Если РегистрацияПриЗагрузке=1 Тогда
					Если ЗагружНомер<>НовыйНомер Тогда//т.е. присвоили новый номер
						БылоИзменениеНомера=1;//Зарегистрируем изменение после записи
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	

	
	Если ПриЗаписиДокумента(Док)=0 Тогда
		Возврат 0;//значит пользователь в своей обработке запретил записывать документ
	КонецЕсли;
	
	
	Попытка
		Док.Записать();
	Исключение
		Сообщить(ОписаниеОшибки(),"!!!");
		Сообщить("Ошибка при записи документа "+Вид+", "+Док.НомерДок+" от "+Док.ДатаДок+", КонтрольУникальности="+КонтрольУникальности);
		Возврат 0;
	КонецПопытки;
	


        //Проверка - надо ли регистрировать изменение номера (если оно было)
		Если БылоИзменениеНомера=1 Тогда
			НеРегистрироватьИзмененияМОД=0;
			ПриИзмененииОбъекта(Док,Док,Док.ДатаДок);//регистрируем для миграции во все базы - в т.ч. и обратно
		КонецЕсли;

	
	//если документ пришел из периферийной базы помеченным на удаление - то этот факт
	//надо зафиксировать т.к. пользователь может воспользоваться процедурой "Удаление помеченных объектов"
	Если (ПомеченНаУдаление=1)И(Док.ПометкаУдаления()=0) Тогда 
		ПриУдаленииОбъекта(Док.ТекущийДокумент());
	КонецЕсли;
	
	Если Док.Проведен()=1 Тогда
		Попытка
			НеРегистрироватьИзмененияМОД=1;//т.е. не фиксируем в журнале изменений
			ПроведениеПоАлгоритмуМОД=1;
			Док.СделатьНеПроведенным();
			НеРегистрироватьИзмененияМОД=0;
			ПроведениеПоАлгоритмуМОД=0;
			Если Док.Проведен()=1 Тогда
				Сообщить("Ошибка: документ нельзя сделать непроведенным "+Док.Вид()+" "+Док.НомерДок+" "+Док.ДатаДок);
				Возврат 0;
			КонецЕсли;
		Исключение
			НеРегистрироватьИзмененияМОД=0;//Попытка отменить проведение оказалась неудачной
			//следовательно надо сделать аналогичные вещи в периферийных базах
			//чтобы базы были идентичными
			ПриИзмененииОбъекта(Док.ТекущийДокумент(),Док.ТекущийДокумент(),Док.ДатаДок,1);
			ПроведениеПоАлгоритмуМОД=0;
			Сообщить("Ошибка при отмене проведения документа "+Док.Вид()+" "+Док.НомерДок+" "+Док.ДатаДок);
			Возврат 0;
		КонецПопытки;
	Иначе
		Если Док.ПометкаУдаления()=1 Тогда
			Док.СнятьПометкуУдаления();
		КонецЕсли;
		
		Если Док.Вид()=ДокументОперации Тогда
			//убиваем все проводки !!
			Опер=СоздатьОбъект("Операция");
			Опер.НайтиОперацию(Док);
			Пока Опер.КоличествоПроводок()>0 Цикл
				Опер.ВыбратьПроводки();
				Опер.ПолучитьПроводку();
				Опер.УдалитьПроводку();
			КонецЦикла;  
			Опер.Записать();
			Опер=0;
			Док.НайтиДокумент(Док.ТекущийДокумент());
		КонецЕсли;
	КонецЕсли;
	
	
	
	
	Док.УстановитьВремя(Число(Сред(ВремяДокумента,1,2)),Число(Сред(ВремяДокумента,4,2)),Число(Сред(ВремяДокумента,7,2)));
	Док.ДатаДок=ДатаДок;
	Док.Записать();
	
	
	Движения=ПравилаОбмена.Движения;
	Если (Проведен=0)ИЛИ(ПомеченНаУдаление=1) Тогда
		Если ПомеченНаУдаление=1 Тогда
			Если Док.ПометкаУдаления()=0 Тогда
				Док.Удалить(0);
			КонецЕсли;
		Иначе
			Если Док.ПометкаУдаления()=1 Тогда
				Док.СнятьПометкуУдаления();
			КонецЕсли;
		КонецЕсли;
		
		//для документа типа операция,то загружаем проводки
		Если (Движения=ДаДа)И(Сокрлп(Док.Вид())=ДокументОперации) Тогда
			Результат=Док;
		КонецЕсли;
		
	Иначе
		Если Движения=ДаДа Тогда
			ПровестиДокумент(Док,1);
		Иначе
			ПровестиДокумент(Док,0);//Проводим без движений т.е. перепрводим при загрузке
			Результат=1;
		КонецЕсли;
	КонецЕсли;
	
	//если это операция - то загружаем движения
	Если Вид=ДокументОперации Тогда
		Если Движения=ДаДа Тогда
		ПроведениеДокумента(Док,Пакет,ВыбрБаза);
		КонецЕсли;
	КонецЕсли;
	
	
	МиграцияИзменений(ВыбрБаза,ИДД,12,Вид,РабочДата,РабочДата);
	
	Если ОбработкаПримера=1 Тогда
		Если ТипЗначения(Док)=12 Тогда
			МОДПерем1.ДобавитьЗначение(Док.ТекущийДокумент());
		КонецЕсли;
	КонецЕсли;
	
	
	Если Найден=0 Тогда
		М_Сообщить("Создан и записан документ "+Вид+" № "+Док.НомерДок+" от "+Док.ДатаДок);
	Иначе
		М_Сообщить("Записан документ "+Вид+" № "+Док.НомерДок+" от "+Док.ДатаДок);
	КонецЕсли;	
	Возврат Док.ТекущийДокумент();	
КонецФункции  //ЗагрузитьДокумент


       











Процедура ПросмотрВеткиДерева(Дерево,Таб,КолТаб=0,ВыводитьСостояние=0)
	Размер=Дерево.length;
	
	Для А=0 По Размер-1 Цикл  
		Если ВыводитьСостояние=1 Тогда
		    Состояние("Выведено "+Цел(100*А/Размер)+" %");
		КонецЕсли;
		Элемент=Дерево.Item(А);
		Тип=Элемент.NodeType;
		Если Тип=1 Тогда
			//Сообщить(Таб+Элемент.nodeName+"  "+Элемент.nodeValue+СтрАтр);
			ИмяУзла=Элемент.nodeName;
			ЗначУзла=Элемент.nodeValue;
			ЗначПредставление=Элемент;
			Таб.ВывестиСекцию("Строка|Начало");
			Для С=1 По КолТаб Цикл
			Таб.ПрисоединитьСекцию("Пусто|Значение");
			КонецЦикла;
			Таб.ПрисоединитьСекцию("Строка|Значение");
			
			КоллекцияАтрибутов=Элемент.Attributes;
			КолАтрибутов=КоллекцияАтрибутов.length;
			Если КолАтрибутов>0 Тогда
				Для Б=0 По КолАтрибутов-1 Цикл
					Атрибут=КоллекцияАтрибутов.Item(Б);
					ИмяАтрибута=Атрибут.nodeName;
					ЗначАтрибута=Атрибут.nodeValue;
					Таб.ПрисоединитьСекцию("Строка|Атрибут");
				КонецЦикла;
			КонецЕсли;
			
			
			//Если ФлРаскрывать=1 Тогда
				ПросмотрВеткиДерева(Элемент.ChildNodes,Таб,КолТаб+1,ВыводитьСостояние-1);
			//КонецЕсли;
		Иначе
			Если Тип=3 Тогда
			ИмяУзла="";
			Иначе
			ИмяУзла=Элемент.nodeName+":";
			КонецЕсли;
			ЗначУзла=Элемент.nodeValue;
			ЗначПредставление=Элемент;
			Таб.ВывестиСекцию("Текст|Начало");
			Для С=1 По КолТаб Цикл
			Таб.ПрисоединитьСекцию("Пусто|Значение");
			КонецЦикла;
			Таб.ПрисоединитьСекцию("Текст|Значение");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПросмотрДерева(Дерево,Имя="")
	Тип=ТипЗначенияСтр(Дерево);
	Таб=СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("XML");
	Таб.ВывестиСекцию("Заголовок");
	Если Тип="OLE.IXMLDOMNode" Тогда
		ПромотрДерева=Дерево.childNodes;
	Иначе
		ПромотрДерева=Дерево;
	КонецЕсли;
	ПросмотрВеткиДерева(ПромотрДерева,Таб,,?(ПромотрДерева.length>1,1,2));
	Таб.ТолькоПросмотр(0);
	Таб.Опции(0,0,0,0);
	Таб.Показать("Дерево XML "+Имя);
	Таб=0;
КонецПроцедуры
//_____________________________________________________________________________






//_____________________________________________________________________________
Функция НовыйПакет()
  	Т=СоздатьОбъект("Текст");
  	Т.ДобавитьСтроку("<?xml version=""1.0"" encoding=""windows-1251"" standalone=""yes"" ?><"+Сокрлп(ЭлементДокументаМОД)+"/>");
  	Т.Записать(ВремФайлЗаголовка);Т=0;
	ХМЛ.resolveExternals=0;
  	ХМЛ.load(ВремФайлЗаголовка);
  	Узел=ХМЛ.DocumentElement;
  	Если НеВыгружатьИДД=0 Тогда
	  	Узел.setAttribute("SourseIDD",Константа.IDD);
  	КонецЕсли;
    Возврат Узел;
КонецФункции //НовыйПакет
























//******************************XML  вставка******************************
//******************************XML  вставка******************************
//******************************XML  вставка******************************











//Просмотр любого dbf-файла
Процедура Просмотр(ИмяБазы,ЧислоПросмотраСтрок=0)
	Перем Название,Тип,Длина,Точность;
	Перем БазаДБФ;
	Перем Выр,Уник,Убыв,Фильт;
	Номер=0;
	ФайлЦДХ=Лев(ИмяБазы,Найти(ИмяБазы,"."))+"cdx";
	БазаДБФ=СоздатьОбъект("XBase");
	//	БазаДБФ.КодоваяСтраница(КодСтр);
	Если ФС.СуществуетФайл(ФайлЦДХ)=1 Тогда
		БазаДБФ.ОткрытьФайл(ИмяБазы,ФайлЦДХ);
	Иначе
		БазаДБФ.ОткрытьФайл(ИмяБазы);
	КонецЕсли;
	Если БазаДБФ.Открыта()=0 Тогда
		Сообщить("Ошибка - база: "+ИмяБазы+" не открыта !");
		Возврат;
	КонецЕсли;
	ТекИндекс="";
	Таб=СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("ТаблицаДБФ");
	БазаДБФ.Первая();
	Если БазаДБФ.ВКонце()=0 Тогда
		Для А=1 по БазаДБФ.КоличествоПолей() Цикл
			БазаДБФ.ОписаниеПоля(А,Название,Тип,Длина,Точность);
			Если А=1 Тогда
				Таб.ВывестиСекцию("Описание|Столбик");
			Иначе
				Таб.ПрисоединитьСекцию("Описание|Столбец");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Прогрессор(0,?(ЧислоСтрокДБФ=0,БазаДБФ.КоличествоЗаписей(),ЧислоСтрокДБФ),0,"Вывод строк");
	Пока БазаДБФ.ВКонце()=0 Цикл
		Номер=Номер+1;
		Для А=1 по БазаДБФ.КоличествоПолей() Цикл
			Данные=БазаДБФ.ПолучитьЗначениеПоля(А);
			Если А=1 Тогда
				Таб.ВывестиСекцию("Строка|Столбик");
			Иначе
				Таб.ПрисоединитьСекцию("Строка|Столбец");
			КонецЕсли;
		КонецЦикла;
		БазаДБФ.Следующая();
		Если ЧислоПросмотраСтрок<>0 Тогда
			Если Номер>=ЧислоПросмотраСтрок Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		Прогрессор(БазаДБФ.НомерЗаписи());
	КонецЦикла;
	Таб.ВывестиСекцию("ШапкаИндекса");
	Для А=1 По БазаДБФ.КоличествоИндексов() Цикл
		БазаДБФ.ОписаниеИндекса(А,Название,Выр,Уник,Убыв,Фильт);
		Таб.ВывестиСекцию("Индекс");
		Ош=БазаДБФ.КодОшибки();
		Если Ош<>0 Тогда
			Сообщить("Ошибка № "+Ош);
		КонецЕсли;
	КонецЦикла;
	БазаДБФ.ЗакрытьФайл();
	Прогрессор(0);
	Таб.Опции(0,0,2,1);
	Таб.Показать("База_"+ИмяБазы,"");
КонецПроцедуры







//_____________________________________________________________________________
//Процедура для облегчения написания кода транзакции dbf-х файлов
Процедура КопироватьФайлДБФ(ИзФайла,ВФайл)
	Фс.УдалитьФайл(КаталогБазыДанных()+ВФайл+".cdx");
	Фс.УдалитьФайл(КаталогБазыДанных()+ВФайл+".dbf");//потому что вдруг такого вообще нет !!
	ФС.КопироватьФайл(КаталогБазыДанных()+ИзФайла+".dbf",КаталогБазыДанных()+ВФайл+".dbf",0);
	ФС.КопироватьФайл(КаталогБазыДанных()+ИзФайла+".cdx",КаталогБазыДанных()+ВФайл+".cdx",0);
КонецПроцедуры //КопироватьФайлДБФ




//_____________________________________________________________________________
Функция ПолучитьУникальныйIDD()
	УникальныйИДД=УникальныйИДД+1;
	Возврат IDD+прав("0000000000"+СокрП(УникальныйИДД),10);
КонецФункции //
//_____________________________________________________________________________












//_____________________________________________________________________________
Процедура ОбработатьСкрипт(ИмяФайлаНач,ИмяФайлаКон)
	//делаем из файла скрипта-источника файл скрипт-рабочий
	//такие скрипты нужны для большей гибкости вызова внешних программ
	Если ФС.СуществуетФайл(ИмяФайлаНач)=0 Тогда
		М_Сообщить("Файл шаблон скрипта "+ИмяФайлаНач+" не найден");
		Возврат;
	КонецЕсли;
	
	Если Сокрлп(ИмяФайлаКон)="" Тогда
		М_Сообщить("Не задано имя рабочего файла скрипта !");
		Возврат;
	КонецЕсли;
	
	ТКон=СоздатьОбъект("Текст");
	ТКон.КодоваяСтраница(1);
	ТНач=СоздатьОбъект("Текст");
	ТНач.КодоваяСтраница(1);
	ТНач.Открыть(ИмяФайлаНач);
	Для А=1 По ТНач.КоличествоСтрок() Цикл
		Стр=ТНач.ПолучитьСтроку(А);
		Если Найти(Стр,"[")<>0 Тогда
			Стр=Шаблон(Стр);
		КонецЕсли;
		ТКон.ДобавитьСтроку(Стр);
	КонецЦикла;
	ТКон.Записать(ИмяФайлаКон);
КонецПроцедуры //ОбработатьСкрипт




//***********************************************************************************
//Собираем все файлы в кучу
//***********************************************************************************
Функция КопироватьВОднуБазу(Режим)
	Перем База1,База2;
	Хорошо=1;
	Если Режим="Изменения" Тогда
		ПодИмя="tran1";
	Иначе
		ПодИмя="tran3";
	КонецЕсли;
	Если ОткрытьФайлМОДПоИмени(База1,Режим,ПодИмя)<>1 Тогда
		Предупреждение("Ошибка открытия файла "+ПодИмя+". Возможно файл занят другим пользователем.
		|Повторите попытку через некоторое время !",10);
		Возврат 0;
	КонецЕсли;
	Для А=1 По 20 Цикл
		ИмяФ=КаталогБазыДанных()+ПодИмя+А+".dbf";
		ИмяCDX=КаталогБазыДанных()+ПодИмя+А+".cdx";
		Если (Сокрлп(ИмяФайлаБДМОД)<>Сокрлп(ИмяФ))
		И (Сокрлп(ИмяФайлаБДУдаленийМОД)<>Сокрлп(ИмяФ)) Тогда
			Если ФС.СуществуетФайл(ИмяФ)=1 Тогда
				База2=СоздатьОбъект("XBase");
				База2.ОткрытьФайл(ИмяФ);
				Фс.УдалитьФайл(ИмяCDX);
				М_Состояние("Копирование из:"+ИмяФ);
				Если База2.Открыта()=1 Тогда
					База2.Первая();
					Пока База2.ВКонце()=0 Цикл
						База1.Добавить();
						База1.IDD=База2.IDD;
						База1.TIP=База2.TIP;
						База1.VIDD=База2.VIDD;
						Если Режим="Изменения" Тогда
							База1.DATE=База2.DATE;
						КонецЕсли;
						База1.Записать();
						База2.Следующая();
					КонецЦикла;
					База2.ОчиститьФайл();
					База2.ЗакрытьФайл();
				Иначе
					Хорошо=0;
					М_Сообщить("Внимание dbf-файл с именем "+ПодИмя+А+".dbf заблокирована другим пользователем. Данные о его работе выгружаться не будут !");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	База1.ЗакрытьФайл();
	Возврат Хорошо;
КонецФункции
//_____________________________________________________________________________

Функция СоединитьФайлыИзмененийИУдалений()
	//Изменения
	Рез=КопироватьВОднуБазу("Изменения");
	//Удаления
	Рез=Рез+КопироватьВОднуБазу("Удаления");
	Рез=?(Рез=2,1,0);
	Возврат Рез;
КонецФункции //СоединитьФайлыИзмененийИУдалений

//_____________________________________________________________________________






//процедуры ФОРМЫ
//_____________________________________________________________________________
Процедура ПриУстановкеТипаВыборочно()//при выборочной выгрузке предоставить
	//возможность выбора любого документа и справочника
	Ном=ТипОбъектаВыборочно.ТекущаяСтрока();
	Если Ном=0 Тогда
		Возврат;
	КонецЕсли;
	Имя=ТипОбъектаВыборочно.ПолучитьЗначение(Ном);
	Если Имя="Справочник" Тогда
		Форма.ОбъектВыборочно.НазначитьТип("");
	КонецЕсли;
	Форма.ОбъектВыборочно.НазначитьТип(Имя);
	Форма.ОбъектВыборочноВладелец.Доступность(0);
	Если Лев(Имя,1)="С" Тогда//справочник
		ОбъектВыборочно.ВыборГруппы(1);
		Если Сокрлп(ОбъектВыборочно.Вид())<>"" Тогда
			Если ТипЗначения(ОбъектВыборочно.Владелец)<>11 Тогда
				Форма.ОбъектВыборочноВладелец.Доступность(0);
			Иначе
				НазначитьВид(ОбъектВыборочноВладелец,ОбъектВыборочно.Владелец.Вид());
				Форма.ОбъектВыборочноВладелец.НеИзменятьВид(1);
				Форма.ОбъектВыборочноВладелец.Доступность(1);
			КонецЕсли;
		Иначе
			ОбъектВыборочноВладелец="";
		КонецЕсли;
		Если ОбъектВыборочно.Выбран()=1 Тогда
			ОбъектВыборочноВладелец=ОбъектВыборочно.Владелец;
		КонецЕсли;
	ИначеЕсли Лев(Имя,1)="Д" Тогда//документ
		Форма.ОбъектВыборочноВладелец.Доступность(0);
		ОбъектВыборочноВладелец="";
	КонецЕсли;
КонецПроцедуры


//_____________________________________________________________________________
//при интеракт. выборе режима:  1)синхронизация; 2)за период; 3)выборочно
Процедура ПриУстановкеРежимаВыгрузки()
	
	Если РежимВыгрузки=1 Тогда//синхронизация
		Форма.ИспользоватьСлой("ВсеЗаПериод",0);
		Форма.ИспользоватьСлой("Выборочно",0);
	ИначеЕсли РежимВыгрузки=2 Тогда//за период
		Форма.ИспользоватьСлой("ВсеЗаПериод",1);
		Форма.ИспользоватьСлой("Выборочно",0);
	ИначеЕсли РежимВыгрузки=3 Тогда//выборочно
		Форма.ИспользоватьСлой("ВсеЗаПериод",1);
		Форма.ИспользоватьСлой("Выборочно",1);
		ПриУстановкеТипаВыборочно();
	КонецЕсли;
КонецПроцедуры

//_____________________________________________________________________________

Процедура СделатьВидимыми(Видим)//управление видимостью элементов диалога
	
	Форма.СписокПакетов.Доступность(Видим);
	Форма.РежимВыгрузки.Доступность(Видим);
	Форма.РежимВыгрузки2.Доступность(Видим);
	Форма.РежимВыгрузки3.Доступность(Видим);
	Форма.ДатаН.Доступность(Видим);
	Форма.ДатаК.Доступность(Видим);
	Форма.ТипОбъектаВыборочно.Доступность(Видим);
	Форма.ОбъектВыборочно.Доступность(Видим);
	Форма.ТекстВыгрузки.Доступность(Видим);
	//	Форма.ЗагружатьСОдинаковымиКодами.Доступность(Видим);
	//	Форма.СоздаватьНовоеНаименование.Доступность(Видим);
	//	Форма.ЗагружатьСОдинаковымиНомерами.Доступность(Видим);
	Если Видим=0 Тогда
		//		НомерПакета=0;
		//		НомерПакетаВыгрузки=0;
		РежимВыгрузки=0;
		ДатаН=Дата(0);
		ДатаК=Дата(0);
		ОбъектВыборочно="";
		ТекстВыгрузки="";
		ЗагружатьСОдинаковымиКодами=0;
		СоздаватьНовоеНаименование=0;
		ЗагружатьСОдинаковымиНомерами=0;
		ТекстЗагрузки="";
	КонецЕсли;
	
КонецПроцедуры

//_____________________________________________________________________________
Процедура ЕстьВыгрузкаЗагрузка()//при выборе флажков Выгрузка/Загрузка
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.УдалитьВсе();
	Форма.Закладки.ДобавитьЗначение("Общие","Общие");
	Если (Выгрузка=1)  Тогда
		Форма.Закладки.ДобавитьЗначение("Выгрузка");
	КонецЕсли;
	Если (Загрузка=1)  Тогда
		Форма.Закладки.ДобавитьЗначение("Загрузка");
	КонецЕсли;
	Форма.Закладки.ДобавитьЗначение("Инициализация","Инициализация");
	Форма.Закладки.ДобавитьЗначение("Настройка","Сервис");
	Форма.Закладки.ДобавитьЗначение("Подтверждение","Подтверждение");
	Форма.Закладки.ДобавитьЗначение("ОПрограмме","О программе");
КонецПроцедуры


//_____________________________________________________________________________

Процедура ЗаполнитьСписокПакетов(А1="",А2="")
	СписокПакетов.УдалитьВсе();
	Если МаксНомерПакетаВыгрузки<1 Тогда
		МаксНомерПакетаВыгрузки=1;
	КонецЕсли;
	//	Если База.Выбран()=1 Тогда
	НомП=Число(НомерПодтвержденногоПакетаЗагрузки);
	НомЗ=Число(МаксНомерПакетаВыгрузки);
	Если А1="" Тогда
		Ном1=НомП+1;
		Ном2=НомЗ;
	Иначе
		Ном1=А1;
		Ном2=А2;
	КонецЕсли;
	
	Если Ном2>НомЗ Тогда
		Ном2=НомЗ;
	КонецЕсли;
	
	Если Ном1<=НомП Тогда
		Ном1=НомП+1;
		//		Иначе
		//			СписокПакетов.ДобавитьЗначение(Ном1,"-меньше-");
	КонецЕсли;
	Если Ном1>Ном2 Тогда
		Ном1=Ном2;
	КонецЕсли;
	
	Для А=Ном1 По Ном2 Цикл
		Стр=А;
		Если (А>НомП)И(А<НомЗ) Тогда
			Стр=""+А+" ?";
		ИначеЕсли (А<=НомП) Тогда
			Стр=""+А+" +";
		КонецЕсли;
		СписокПакетов.ДобавитьЗначение(А,Стр);
	КонецЦикла;
	//Если Ном2<НомЗ Тогда
	//СписокПакетов.ДобавитьЗначение(Ном2,"-больше-");
	//КонецЕсли;
	Если А1="" Тогда
		Рез=СписокПакетов.НайтиЗначение(НомЗ);
		СписокПакетов.ТекущаяСтрока(?(Рез=0,1,Рез));
		НомерПакетаВыгрузки=НомЗ;
	КонецЕсли;
КонецПроцедуры //ЗаполнитьСписокПакетов

//_____________________________________________________________________________
Процедура ПриВыбореСпискаПакетов()
	А=СписокПакетов.ТекущаяСтрока();
	Если А=0 Тогда
		Возврат;
	КонецЕсли;
	Стр="";
	Зн=СписокПакетов.ПолучитьЗначение(А,Стр);
	Если Стр="-больше-" Тогда
		ЗаполнитьСписокПакетов(Зн,Зн+50);
		СписокПакетов.ТекущаяСтрока(2);
	ИначеЕсли Стр="-меньше-" Тогда
		ЗаполнитьСписокПакетов(Зн-50,Зн);
		СписокПакетов.ТекущаяСтрока(СписокПакетов.РазмерСписка()-1);
	КонецЕсли;
	НомерПакетаВыгрузки=Зн;
КонецПроцедуры //ПриВыбореСпискаПакетов()
//_____________________________________________________________________________

//_____________________________________________________________________________
Процедура ОчиститьКаталог(Путь,Маска="*.*")
	//процедура гарантированного возврата чистого каталога (если такого нет, то создается !!)
	Если ФС.СУществуетФайл(Путь)=1 Тогда
		//предварительно очищаем !!
		Имя=ФС.НайтиПервыйФайл(Путь+"\"+Маска);
		Пока Сокрлп(Имя)<>"" Цикл    
			Имя=ФС.НайтиСледующийФайл();  
			Если (Имя<>".")И(Имя<>"..") Тогда
				ФС.УдалитьФайл(Путь+"\"+Имя);
			КонецЕсли;
		КонецЦикла;
		//теперь каталог чист...
	Иначе
		ФС.СоздатьКаталог(Путь);
	КонецЕсли;
КонецПроцедуры //ОчиститьКаталог

//_____________________________________________________________________________
Функция ПолучитьНомерПакетаВыгрузки(База,Спр=0)
//эта функция находит первый элемент в справочнике периферийных баз, с IDD = База.IDD	
//и вернет его следующий пакет выгрузки
//основная цель это найти ведущий элемент, по которому ведется сквозная нумерация пакетов
//когда для одной базы мы указываем несколько сценариев обмена (при этом базы имеют один ИД)
Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
Рез=Спр.НайтиПоРеквизиту("IDD",База.IDD,1);
Если (Рез=1)И(База.IDD<>ИДДляОтладки) Тогда
Возврат Спр.НомерПакетаВыгрузки;
Иначе   
Спр.НайтиЭлемент(База);	//позиционируемся на сами себя - т.к. это исключение из правил
Возврат База.НомерПакетаВыгрузки;//не нашли ???
КонецЕсли;
КонецФункции 




//_____________________________________________________________________________
Функция ПолучитьВладельцаПравил(КакаяТоБаза)
//эта функция находит правила обмена для базы
Если КакаяТоБаза.ПравилаОбмена.Выбран()=1 Тогда
    Возврат КакаяТоБаза.ПравилаОбмена;
Иначе
	Возврат КакаяТоБаза;
КонецЕсли;
КонецФункции



//_____________________________________________________________________________
//при интеракт. выборе базы для обмена
Процедура УстановитьБазу()
	Если База.Выбран()=1 Тогда
		Если База.ЭтоГруппа()=0 Тогда
                     
			Путь="";Имя="";
			РасположениеФайла(Путь,Имя);
			ПутьКОбработке=Сокрлп(Путь+Имя);
			Если ПутьКОбработке="" Тогда
				Если База.ФорматXML=0 Тогда
					ОткрытьДругуюФорму=1;
					Форма.Закрыть();
				КонецЕсли;
			КонецЕсли;
			
			
			МиграцияИзменений=База.МиграцияИзменений;
			МаксКолОбъектовВПакете=База.КоличествоОбъектовВПакете;
			ВыгружатьШапкуПакетовОтдельно=База.ВыгружатьШапкуПакетовОтдельно;
			
			МаксКолОбъектовВПакете=?(МаксКолОбъектовВПакете<1,5000,МаксКолОбъектовВПакете);
			
			ПризнакПолученияMD=База.ПризнакПолученияMD;
			ПризнакОтправленияMD=База.ПризнакОтправленияMD;
			
			РегистрацияПриЗагрузке=База.РегистрацияПриЗагрузке;
			НеИзменятьИДПриЗагрузке=База.НеИзменятьИДПриЗагрузке;
			ИспользоватьТранзакцию=База.ИспользоватьТранзакцию;
			
			НеВыгружатьИДД=База.НеВыгружатьИДД;
			ЭлементДокументаМОД=База.ЭлементДокументаМОД;
			Если Сокрлп(ЭлементДокументаМОД)="" Тогда
			    ЭлементДокументаМОД="MOD";
			КонецЕсли;
			
			Попытка//- проверка для облегчения обновления версии Менеджера
				ПриоритетностьБазы=База.ПриоритетностьБазы;
			Исключение
				ПриоритетностьБазы=1;
			КонецПопытки;
			
			Выгрузка=База.Выгрузка;
			НомерПакетаВыгрузки=ПолучитьНомерПакетаВыгрузки(База);//вызов функции, которая сама 
			//определит какой элемент создавался первым (если есть два элемента баз с одинаковым IDD)
			Если НомерПакетаВыгрузки<1 Тогда
				НомерПакетаВыгрузки=1;
			КонецЕсли;
			МаксНомерПакетаВыгрузки=НомерПакетаВыгрузки;
			РежимВыгрузки=База.РежимВыгрузки;
			ДатаН=?(РежимВыгрузки=1,'01.01.1970',База.ДатаНачалаПриВыгрузке);
			ДатаК=?(РежимВыгрузки=1,РабочаяДата(),База.ДатаКонцаПриВыгрузке);
			СПодчиненными=База.СПодчиненнымиПриВыборочнойВыгрузке;
			ТекстВыгрузки=База.ТекстПриВыгрузке;
			
			НомерПодтвержденногоПакетаЗагрузки=База.НомерПодтвержденногоПакетаЗагрузки;
			Если НомерПодтвержденногоПакетаЗагрузки>=МаксНомерПакетаВыгрузки Тогда
				НомерПодтвержденногоПакетаЗагрузки=МаксНомерПакетаВыгрузки-1;
			КонецЕсли;
			
			Загрузка=База.Загрузка;
			НомерПакета=База.НомерПакетаЗагрузки;
			
			ИспользоватьФТП=База.ИспользоватьФТП;
			ПередачаПоПочте=База.ПередачаПоПочте;
			ВстроеннаяАрхивация=База.ВстроеннаяАрхивация;
			
			ПутьКБазеПриВыгрузке=Сокрлп(База.ПутьКБазеПриВыгрузке);
			ПутьКБазеПриЗагрузке=Сокрлп(База.ПутьКБазеПриЗагрузке);
			
			Если СтрДлина(ПутьКБазеПриВыгрузке)<>2 Тогда
			Если ФС.СуществуетФайл(ПутьКБазеПриВыгрузке)=0 Тогда
				М_Сообщить("Не найден путь к каталогу выгрузки "+ПутьКБазеПриВыгрузке,"I",Выгрузка);
				Если НЕ((СтрДлина(ПутьКБазеПриВыгрузке)=2) И (Прав(ПутьКБазеПриВыгрузке,2)=":")) Тогда
					ПутьКБазеПриВыгрузке=КаталогИБ()+"OUT_"+База.IDD;
					Если ФС.СУществуетФайл(ПутьКБазеПриВыгрузке)=0 Тогда
						ФС.СоздатьКаталог(ПутьКБазеПриВыгрузке);
					КонецЕсли;
				КонецЕсли;
				М_Сообщить("Для выгрузки будет использован каталог "+ПутьКБазеПриВыгрузке,,Выгрузка);
			КонецЕсли;
			КонецЕсли;
			
			Если СтрДлина(ПутьКБазеПриЗагрузке)<>2 Тогда
			Если ФС.СУществуетФайл(ПутьКБазеПриЗагрузке)=0 Тогда
				М_Сообщить("Не найден путь к каталогу загрузки "+ПутьКБазеПриЗагрузке,"I",Загрузка);
				Если НЕ((СтрДлина(ПутьКБазеПриЗагрузке)=2) И (Прав(ПутьКБазеПриЗагрузке,2)=":")) Тогда
					ПутьКБазеПриЗагрузке=КаталогИБ()+"IN_"+База.IDD;
					Если ФС.СУществуетФайл(ПутьКБазеПриЗагрузке)=0 Тогда
						ФС.СоздатьКаталог(ПутьКБазеПриЗагрузке);
					КонецЕсли;
				КонецЕсли;
				М_Сообщить("Для загрузки будет использован каталог "+ПутьКБазеПриЗагрузке,,Загрузка);
			КонецЕсли;
			КонецЕсли;
			НомерПакета=?(НомерПакета<1,1,НомерПакета);
			
			НомерПакетаЗагрузки=НомерПакета;
			
			
			ЕстьВыгрузкаЗагрузка();
			
			СделатьВидимыми(1);
			
			Если ТипЗначения(База.ОбъектПриВыборочнойВыгрузке)<>0 Тогда//что-то уже было
				Если ТипЗначения(База.ОбъектПриВыборочнойВыгрузке)=11 Тогда
					ИмяОб=База.ОбъектПриВыборочнойВыгрузке.Вид();
					НомС=ТипОбъектаВыборочно.НайтиЗначение("Справочник"+?(Сокрлп(ИмяОб)="","",".")+ИмяОб);
					Форма.ОбъектВыборочно.НазначитьТип("Справочник"+?(Сокрлп(ИмяОб)="","",".")+ИмяОб);
					ТипОбъектаВыборочно.ТекущаяСтрока(НомС);
				КонецЕсли;
				Если ТипЗначения(База.ОбъектПриВыборочнойВыгрузке)=12 Тогда
					ИмяОб=База.ОбъектПриВыборочнойВыгрузке.Вид();
					НомС=ТипОбъектаВыборочно.НайтиЗначение("Документ"+?(Сокрлп(ИмяОб)="","",".")+ИмяОб);
					Форма.ОбъектВыборочно.НазначитьТип("Документ"+?(Сокрлп(ИмяОб)="","",".")+ИмяОб);
					ТипОбъектаВыборочно.ТекущаяСтрока(НомС);
				КонецЕсли;
				ОбъектВыборочно=База.ОбъектПриВыборочнойВыгрузке;
			КонецЕсли;
			
			ЗаполнитьСписокПакетов();
		Иначе//группа баз
			СделатьВидимыми(0);
		КонецЕсли;
	Иначе//все базы
		СделатьВидимыми(0);
	КонецЕсли;
КонецПроцедуры

//_____________________________________________________________________________


Процедура НеобходимыеЗакладки()
	Форма.Закладки.ДобавитьЗначение("Общие","Общие");
	Форма.Закладки.ДобавитьЗначение("Инициализация","Инициализация");
	Форма.Закладки.ДобавитьЗначение("Подтверждение","Подтверждение");
	Форма.Закладки.ДобавитьЗначение("Настройка","Сервис");
	Форма.Закладки.ДобавитьЗначение("ОПрограмме","О программе");
	Форма.ИспользоватьСлой("Общие");
	ЕстьВыгрузкаЗагрузка();
КонецПроцедуры





//***     ***     ***     *** *****  *** *** ***  ***    ***      *** *****
//***     ***     ***    ***    ***  *** *** ***  ***  ***       ***    ***
//***     ***     ***   ***     ***  ***     ***  ******        ***     ***
//***     ***     ***   ***     ***  ***     ***  ******        ***     ***
//***     ***     ***   ***********  ***     ***  ******        ***********
//***     ***     ***   *** *** ***  ***     ***  ***   ***     *** *** ***
//*** *** *** *** ***   ***     ***  ***     ***  ***     ***   ***     ***
//*** *** *** *** ***   ***     ***  ***     ***  ***      ***  ***     ***
//*** *** *** *** ***   ***     ***  ***     ***  ***      ***  ***     ***

//_____________________________________________________________________________
//создаем шапку пакета, отражающую структуру
//выгружаемой информации; шапка строится по справочнику "ПравилаВыгрузки"
Функция ВыгрузитьШапку(ВыгрБаза,РежТолькоШапка=0,УстИмяФайла="")
	Возврат 1;
КонецФункции
//_____________________________________________________________________________






//_____________________________________________________________________________
//Выгружаем данные с номерами "ЧтоВыгрузить", помечая их номерами "КакПометить"
Функция ВыгрузитьТело(БДПакеты,ВыгрБаза,КакПометить,ЧтоВыгрузить,НомерПакета=1)
	ВыбрБаза=ВыгрБаза;
	ПодготовкаПовторовПриВыгрузке();
	М_Сообщить("Выгружаем данные ...");
	Ключ=Прав("0000000"+Сокрлп(ВыгрБаза.IDD),7)+Сокрлп(ЧтоВыгрузить);
	Стр="";
	БазаПакет=Прав("0000000"+Сокрлп(ВыгрБаза.IDD),7)+Сокрлп(КакПометить);
	
	//*********** расчет длины пакета для прогрессора
	БДПакеты.ТекущийИндекс("IDDDB");
	Рез=БДПакеты.Найти(Ключ,0);
	Ном=БДПакеты.НомерЗаписи();
	Если (Ном=0)ИЛИ(Рез=0) Тогда
		М_Сообщить("Нет данных в пакете "+НомерПакета);
		Возврат 0;
	КонецЕсли;
	БДПакеты.ТекущийИндекс("IDDDB");
	БДПакеты.Первая();
	БДПакеты.Найти(Ключ,0);
	КонНомер=1;
	М_Состояние("Расчет длины пакета "+НомерПакета);
	Пока БДПакеты.ВКонце()=0 Цикл
		Если Сокрп(БДПакеты.IDDDB)<>Ключ Тогда
			Прервать;
		КонецЕсли;
		КонНомер=КонНомер+1;
		БДПакеты.Следующая();
	КонецЦикла;
	//************************************************
	Прогрессор(0,КонНомер,0,"Выгрузка пакета № "+НомерПакета);
	М_Состояние(ВыгрБаза.Наименование+" - заполнение пакета данными.");
	
	БДПакеты.ТекущийИндекс("IDDDB");
	БДПакеты.Первая();
	БДПакеты.Найти(Ключ,0);
	ДляПрогрессора=0;
	
	ЕстьДокументы=ПолучитьПравилаВыгрузки("","Документы");
	ДокументыПравила=ПравилаВыгрузки.ТекущийЭлемент();
	ЕстьСправочники=ПолучитьПравилаВыгрузки("","Справочники");
	СправочникиПравила=ПравилаВыгрузки.ТекущийЭлемент();

	РодСправочники=0;
	Если ЕстьСправочники=1 Тогда
		Справочники=СоздатьЭлемент(Сокрлп(СправочникиПравила.Синоним),РодСправочники,Пакет);
		Если Пакет<>Справочники Тогда
			Пакет.appendChild(РодСправочники);
		КонецЕсли;
	КонецЕсли;
	РодДокументы=0;
	Если ЕстьДокументы=1 Тогда
		Документы=СоздатьЭлемент(Сокрлп(ДокументыПравила.Синоним),РодДокументы,Пакет);
		Если Пакет<>Документы Тогда
			Пакет.appendChild(РодДокументы);
		КонецЕсли;
	КонецЕсли;
	
	Пока БДПакеты.ВКонце()=0 Цикл
		Если Сокрп(БДПакеты.IDDDB)<>Ключ Тогда
			Прервать;
		КонецЕсли;
			ДляПрогрессора=ДляПрогрессора+1;
			Прогрессор(ДляПрогрессора);//********* прогрессор
			Тип=Строка(БДПакеты.TIP);
			Вид=Сокрлп(БДПакеты.VIDD);
			Если Тип="11" Тогда
				Если ЕстьСправочники=1 Тогда
				Для А=1 По 100 Цикл
					Рез=ПолучитьПравилаВыгрузки(СправочникиПравила,Вид,А);
					Если Рез=1 Тогда
						ВыгрузитьСправочник(Справочники,Вид,БДПакеты.IDD,БДПакеты.DATE1,БДПакеты.DATE2);
					ИначеЕсли Рез=-1 Тогда 
						Прервать;
					КонецЕсли;//иначе если Рез=0 - продолжить
				КонецЦикла;
				КонецЕсли;
			ИначеЕсли Тип="12" Тогда
				Если ЕстьДокументы=1 Тогда
				Для А=1 По 100 Цикл
					Рез=ПолучитьПравилаВыгрузки(ДокументыПравила,Вид,А);
					Если Рез=1 Тогда
						ВыгрузитьДокумент(Документы,Вид,БДПакеты.IDD);
					ИначеЕсли Рез=-1 Тогда 
						Прервать;
					КонецЕсли;//иначе если Рез=0 - продолжить
				КонецЦикла;
				КонецЕсли;
			ИначеЕсли Тип="95" Тогда
				//ВыгрузитьКонстанту(Вид,БДПакеты,ТаблицаКонстант);
			ИначеЕсли Тип="94" Тогда
				//ВыгрузитьСчет(Вид,ТаблицаСчетов);
			КонецЕсли;
			Если Сокрп(БДПакеты.IDDDB)<>Сокрп(БазаПакет) Тогда
				БДПакеты.IDDDB=БазаПакет;
				БДПакеты.Записать();
			КонецЕсли;
		БДПакеты.Следующая();
	КонецЦикла;
	М_Состояние("Выгрузка тела данных закончена ...");
	Прогрессор(0);
	Возврат 1;
КонецФункции //ВыгрузитьТело(ВыгрБаза)
//_____________________________________________________________________________



















//*****************************************************************************
//*****************************************************************************
//*****************************************************************************
//*****************************************************************************
//*****************************************************************************
//**************  ЗАГРУЗКА ** ЗАГРУЗКА ** ЗАГРУЗКА ** ЗАГРУЗКА ****************
//**************  ЗАГРУЗКА ** ЗАГРУЗКА ** ЗАГРУЗКА ** ЗАГРУЗКА ****************
//**************  ЗАГРУЗКА ** ЗАГРУЗКА ** ЗАГРУЗКА ** ЗАГРУЗКА ****************
//*****************************************************************************
//*****************************************************************************
//*****************************************************************************
//*****************************************************************************






//_____________________________________________________________________________
Функция НадоЗагружатьОбъект(Спр_ИД,СписокИзмененныхОбъектов,ПриоритетЗагрузки)
	//Если объект изменен в нашей и в периферийной базе одновременно, то
	//для обеспечения синхронности баз нужно решить чьи изменения
	//имеют больший приоритет.
	//В этой функции приоритет определяется по номеру базы - у кого номер меньше - у того
	//больший приоритет !
	//Одинаковые номера баз невозможны т.к. это проверяется при выгрузке пакета.
	
	Если ПриоритетЗагрузки=0 Тогда
		//загружаем вседа т.к. наша база имеет более низкий приоритет
		Возврат 1;
	Иначе
		//смотрим может мы этот объект изменяли сами
		Рез=СписокИзмененныхОбъектов.НайтиЗначение(Спр_ИД);
		Если Рез=0 Тогда
			Возврат 1;//нет не изменяли
		Иначе
			Возврат 0;//изменяли !!!
		КонецЕсли;
	КонецЕсли;
КонецФункции //НадоЗагружатьОбъект





//_____________________________________________________________________________
Процедура МиграцияИзменений(ВыгрБаза,ИД,Тип,Вид,Дата1,Дата2)
	Перем БДПакеты;
	Если МиграцияИзменений=1 Тогда
		//изменения пришедшие в нашу базу надо опять зарегистрировать для того, чтобы они
		//мигрировали далее (необходимо понимать, что если административно не ограничить миграцию, то
		//данные будут передаваться бесконечно)
		//в данной процедуре элементы мигрируют во все базы, за исключением той откуда пришли
		Если ОткрытьФайлМОД(БДПакеты,"Пакеты","tran2")=0 Тогда 
			Сообщить("Ошибка открытия базы ""Пакеты"" - миграция в другие базы не производится","!");
			Возврат;
		КонецЕсли;
		Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
		Спр.ВыбратьЭлементы();
		Пока Спр.ПолучитьЭлемент()=1 Цикл
			Если Спр.Выгрузка=1 Тогда
				Если Спр.ТекущийЭлемент()<>ВыгрБаза Тогда
					БДПакеты.Добавить();
					БДПакеты.IDD=Ид;
					БДПакеты.TIP=Тип;
					БДПакеты.VIDD=Вид;
					БДПакеты.DATE1=Дата1;
					БДПакеты.DATE2=Дата2;
					БДПакеты.POS=1;
					БДПакеты.IDDDB=""+Спр.IDD+"_";
					БДПакеты.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры //






//_____________________________________________________________________________
//функция определяет является ли данное выражение одним словом (в этом случае возвращается 1)
//или является каким-то выражением (возвращается 0)
Функция ОдноСлово(Стр)
	 Стр1=ВРЕГ(СтрЗаменить(Стр,"_",""));
	 Стр2=НРег(Стр1);
	 Для А=1 По СтрДлина(Стр1) Цикл
	     Если Сред(Стр1,А,1)=Сред(Стр2,А,1) Тогда
		 	Возврат 0;
		 КонецЕсли;
	 КонецЦикла;
	Возврат 1;
КонецФункции //ОдноСлово


//_____________________________________________________________________________
Процедура ЗагрузитьДанные(ИмяТипа,ПравилаОбмена,Дерево)
	Состояние("Загрузка данных");
	Размер=Дерево.length;
	ТекстСостояния=""+ИмяТипа+"."+ПравилаОбмена.Наименование+", кол:"+Размер+", загр.% ";
	Для А=1 По Размер Цикл  
		Элемент=Дерево.NextNode();
		Тип=Элемент.NodeType;
		Состояние(ТекстСостояния+Цел(100*А/Размер));
		Если Тип=1 Тогда
			//ЗначУзла=Элемент.nodeValue;
			ИмяУзла=Элемент.nodeName;
			//Состояние("Загружается "+ИмяУзла);
			Если ИмяТипа="Справочники" Тогда
				ЗагрузитьСправочник(ПравилаОбмена,Элемент);
			ИначеЕсли ИмяТипа="Документы" Тогда
				ЗагрузитьДокумент(ПравилаОбмена,Элемент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Состояние("Загрузка завершена");
КонецПроцедуры //ЗагрузитьДанные




//_____________________________________________________________________________
Процедура ЗагрузитьТип(ИмяТипа)
	Перем ПравилаЗагрузки;
	ПравилаЗагрузки=СоздатьОбъект("Справочник.ПравилаЗагрузки");
	Справочники=ПолучитьПравилаЗагрузки("",ИмяТипа);
	Если Справочники<>"" Тогда
		Выражение=Сокрлп(Справочники.Синоним);
		Если Выражение="" Тогда
			Выражение=Сокрлп(ПравилаЗагрузки.Наименование);
		КонецЕсли;
	    КорневойЭлемент=Пакет.DocumentElement;
		ДеревоЗапроса=КорневойЭлемент.SelectNodes(Выражение);
		КолЭлементов=ДеревоЗапроса.length;
		Если КолЭлементов>0 Тогда
			ПравилаЗагрузки.ИспользоватьРодителя(Справочники);
			ПравилаЗагрузки.ИспользоватьВладельца(ПолучитьВладельцаПравил(ВыбрБаза));
			ПравилаЗагрузки.ВыбратьЭлементы();
			Пока ПравилаЗагрузки.ПолучитьЭлемент(0)=1 Цикл
				Если ПравилаЗагрузки.ПризнакЗагрузки=ДаДА Тогда
					Выражение=Сокрлп(ПравилаЗагрузки.Синоним);
					Если Выражение="" Тогда
						Выражение=Сокрлп(ПравилаЗагрузки.Наименование);
					КонецЕсли;
					Для А=1 По КолЭлементов Цикл
						ЭлементВторгоУровня=ДеревоЗапроса.item(А-1);
						Дерево=ЭлементВторгоУровня.SelectNodes(Выражение);
						ЗагрузитьДанные(ИмяТипа,ПравилаЗагрузки.ТекущийЭлемент(),Дерево);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ЗагрузитьТип



//_____________________________________________________________________________
Процедура ОптимизацияДоступаКИДД()
	Состояние("Оптимизация доступа к IDD объектов");
	СписокДоступаКИДД=СоздатьОбъект("СписокЗначений");
	Если Сокрлп(РеквизитИдентификации)="" Тогда
	    РеквизитИдентификации="IDD";
	КонецЕсли;
	//если реквизит идентификации представлен как элеиент
	Выражение="//*["+Сокрлп(РеквизитИдентификации)+"]";
	Элементы=Пакет.SelectNodes(Выражение);
	Размер=Элементы.length;
	Для А=1 По Размер Цикл
    ОдинЭлемент=Элементы.item(А-1);
	ИДД=Сокрлп(ОдинЭлемент.getElementsByTagName(Сокрлп(РеквизитИдентификации)).item(0).text);
	СписокДоступаКИДД.ДобавитьЗначение(ОдинЭлемент,ИДД);
	КонецЦикла;

	
	//если реквизит идентификации представлен как атрибут
	Выражение="//*[@"+Сокрлп(РеквизитИдентификации)+"]";
	Элементы=Пакет.SelectNodes(Выражение);
	Размер=Элементы.length;
	Для А=1 По Размер Цикл
    ОдинЭлемент=Элементы.item(А-1);
	ИДД=Сокрлп(ОдинЭлемент.getAttribute(Сокрлп(РеквизитИдентификации)));
	СписокДоступаКИДД.ДобавитьЗначение(ОдинЭлемент,ИДД);
	КонецЦикла;
	Состояние("...");
КонецПроцедуры //ОптимизацияДоступаКИДД


//_____________________________________________________________________________
Процедура ЗагрузитьТело(ТекБаза,НомерПакета=1)
	УникальныйИДД=Число(Константа.УникальныйIDD);
	ИДДБазы=ТекБаза.IDD;
	ВыбрБаза=ТекБаза;
	ПодготовкаПовторовПриЗагрузке();
	ОптимизацияДоступаКИДД();
	ЗагрузитьТип("Справочники");
	ЗагрузитьТип("Документы");
	ПроведениеПоАлгоритмуМОД=0;
	СписокДоступаКИДД=0;
	Константа.УникальныйIDD=УникальныйИДД+1;
КонецПроцедуры //ЗагрузитьТело

//_____________________________________________________________________________

















Процедура ДобавитьОдинУдаленный(БДИзменения,БДУдаления)//добавить в базу изменений запись
	//об одном  помеченном на удаление объекте .
	//(Это чтобы отследить ситуацию с удалением помеченных объектов)
	Если Число(БДУдаления.TIP)=11 Тогда
		Попытка
		Об=СоздатьОбъект("Справочник."+СокрЛП(БДУдаления.VIDD));
		Об.НайтиПоРеквизиту("IDD",БДУдаления.IDD,1);
		Исключение
		Возврат;	
		КонецПопытки;
	ИначеЕсли Число(БДУдаления.TIP)=12 Тогда
		НайтиДокументПоIDD(ГлобДок,БДУдаления.IDD);
		Об=ГлобДок;
	ИначеЕсли Число(БДУдаления.TIP)=94 Тогда
		БДУдаления.Удалить();//счет
		Возврат;
	Иначе
		М_Сообщить("Ошибка № 100 (Тип объекта=" + БДУдаления.TIP+")   - пропускаем (обратитесь к разработчикам:ivan@pb.ru)");
		БДУдаления.Удалить();//непонятный тип
		Возврат;
	КонецЕсли;
	
	Если Об.Выбран()=1 Тогда
		Если Об.ПометкаУдаления()=1 Тогда
			Возврат; //ничего не изменилось с этим объектом
		КонецЕсли;
	КонецЕсли;
	
	//либо объект удален совсем, либо снят с пометки на удаление
	БДИзменения.Добавить();
	БДИзменения.IDD=БДУдаления.IDD;
	БДИзменения.TIP=БДУдаления.TIP;
	БДИзменения.VIDD=БДУдаления.VIDD;
	БДИзменения.DATE=РабочаяДата();
	БДИзменения.Записать();
	БДУдаления.Удалить();
	
КонецПроцедуры

//_____________________________________________________________________________


Процедура ДобавитьУдаленныеОбъектыВ_БазуИзменений(БДИзменения,БДУдаления)
	//Здесь мы в базу изменений добавляем записи об удаленных элементах
	
	//открываем dbf
	БДУдаления.ПоказыватьУдаленные(0);
	
	//добавляем то, что нужно, в базу изменений
	БДУдаления.Первая();
	Пока БДУдаления.ВКонце()=0 Цикл
		ДобавитьОдинУдаленный(БДИзменения,БДУдаления);
		БДУдаления.Следующая();
	КонецЦикла;
	
	БДУдаления.Сжать();
	//БДУдаления.ЗакрытьФайл();
	
КонецПроцедуры

//_____________________________________________________________________________

Процедура ПереформироватьПакет(БДПакеты,ВыгрБаза,ВЫгрПакет,НеотправлПакет="_")
	//одновременно здесь отслеживаем максимальную длину пакета !!!!!!!!!
	//здесь обязательно надо,чтобы ВЫгрПакет<>НеотправлПакет
	Если Сокрлп(ВЫгрПакет)=Сокрлп(НеотправлПакет) Тогда
		Сообщить("Пакет "+ВЫгрПакет+" и так уже переоформирован !");//по идее здесь мы не должны никогда быть (но на всякий случай).                                   - Чем 1С не шутит ;-)
		Возврат;
	КонецЕсли;
	
	Док=СоздатьОбъект("Документ");
	М_Состояние("Переформирование пакета для отправки ...");
	НомерПакетаИБазы=Прав("0000000"+Сокрп(Сокрп(ВыгрБаза.IDD)),7)+Сокрлп(ВЫгрПакет);
	БДПакеты.ТекущийИндекс("IDDDB");
	Ключ=Прав("0000000"+Сокрп(ВыгрБаза.IDD),7)+НеотправлПакет;
	
	ТекНомер=0;
	Пока БДПакеты.Найти(Ключ,0)=1 Цикл
		//мы спозиционировались на первом элементе участка ненужных пакетов
		пока Сокрп(БДПакеты.IDDDB)=Ключ Цикл
			БДПакеты.IDDDB=НомерПакетаИБазы;//т.е. проходим по всему участку
			БДПакеты.Записать();
			БДПакеты.Следующая();
			Если БДПакеты.ВКонце()=1 Тогда     //т.к. может этот участок был последним ...
				Прервать;
			КонецЕсли;
			
			//собственно вот само отслеживание
			Если БДПакеты.Tip=12 Тогда
				ТекНомер=ТекНомер+1; 
				
				Ид=Лев(Сокрлп(БДПакеты.IDD)+"                              ",МОДДлинаIDДокумента);
				Рез=Док.ВыбратьПоЗначению(,,"IDD",Ид);
				Если Рез=1 Тогда
					Док.ПолучитьДокумент();
					ТекНомер=ТекНомер+Док.КоличествоСтрок();
				//Иначе
				//	Сообщить("Не нашли !!!");
				КонецЕсли;			
				
			Иначе
				ТекНомер=ТекНомер+1;
			КонецЕсли;
			
			Если ТекНомер>=МаксКолОбъектовВПакете Тогда
				ТекНомер=0;
				НомерПакетаВыгрузки=НомерПакетаВыгрузки+1;
				МаксНомерПакетаВыгрузки=НомерПакетаВыгрузки;
				НомерПакетаИБазы=Прав("0000000"+Сокрп(Сокрп(ВыгрБаза.IDD)),7)+Сокрлп(НомерПакетаВыгрузки);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

//_____________________________________________________________________________
Процедура СформироватьНовыйПакет(БДИзменения,БДПакеты,ВыгрБаза,ВЫгрПакет="_")
	ПЕрем Список;
	М_Состояние("Создание нового пакета...");
	Прогрессор(0,БДИзменения.КоличествоЗаписей(),0,ВыгрБаза.Наименование);
	//	БДИзменения.ТекущийИндекс("POS");
	НомерПакетаИБазы=Прав("0000000"+Сокрп(ВыгрБаза.IDD),7)+Сокрлп(ВЫгрПакет);
	БДИзменения.Первая();
	БДПакеты.ТекущийИндекс("IDD");
	БДПакеты.АвтоСохранение(0);
	КолПрогрессора=0;
	ПОС=1000;
	Пока БДИзменения.ВКонце()=0 Цикл
		КолПрогрессора=КолПрогрессора+1;
		Прогрессор(КолПрогрессора);
		Ключ=НомерПакетаИБазы+Сокрлп(БДИзменения.IDD);
		Нашли=БДПакеты.Найти(Ключ,0);
		Если Нашли=1 Тогда
			Если БДИзменения.TIP<>12 Тогда
				//для периодических реквизитов записываем период их изменения
				ДатаИзменения=БДИзменения.DATE;
				Если БДПакеты.DATE1>ДатаИзменения Тогда
					БДПакеты.DATE1=ДатаИзменения;//т.е. Дата изменения реквизита вылазеит за границы уже введенных величин
				ИначеЕсли БДПакеты.DATE2<ДатаИзменения Тогда
					БДПакеты.DATE2=ДатаИзменения;//аналогично , но теперь провер. верх. границу
				КонецЕсли;
				БДПакеты.Записать();
			КонецЕсли;
			Если (БДИзменения.TIP<>БДПакеты.TIP)ИЛИ(БДПакеты.VIDD<>БДИзменения.VIDD) Тогда
			 	Нашли=0;//защита от отмены транзакции при регистрации объектов   
			КонецЕсли;
		Иначе
			БДПакеты.Добавить();
		КонецЕсли;
		
		Если Нашли=0 Тогда
			ПОС=ПОС+1;
			БДПакеты.IDD=БДИзменения.IDD;
			БДПакеты.TIP=БДИзменения.TIP;
			БДПакеты.VIDD=БДИзменения.VIDD;
			БДПакеты.DATE1=БДИзменения.DATE;
			БДПакеты.DATE2=БДИзменения.DATE;
			БДПакеты.POS=ПОС;
			БДПакеты.IDDDB=НомерПакетаИБазы;
			БДПакеты.Записать();
		КонецЕсли;
		
		
		БДИзменения.Следующая();
	КонецЦикла;
	Прогрессор(0);
КонецПроцедуры

//_____________________________________________________________________________
Функция ДобавитьВПакет(БДПакеты,НомерПакетаИБазы,Реквизит,Тип)
	
	Если Сокрлп(Реквизит.IDD)="" Тогда
		Константа.УникальныйIDD=Строка(Число(Константа.УникальныйIDD)+1);
		НовыйIDD=Прав("0000000"+СокрЛП(Константа.IDD),7)+прав("0000000000"+СокрЛП(Константа.УникальныйIDD),10);
		Если Тип=12 Тогда
			ГлобДокЗагрВыгрузки.НайтиДокумент(Реквизит);
			ГлобДокЗагрВыгрузки.IDD=НовыйIDD;
			ГлобДокЗагрВыгрузки.Записать();
			ГлобДокЗагрВыгрузки.НайтиДокумент(Реквизит);
			Реквизит=ГлобДокЗагрВыгрузки.ТекущийДокумент();
		Иначе
			Спр2=СоздатьОбъект("Справочник."+Реквизит.Вид());
			Спр2.НайтиЭлемент(Реквизит);
			Спр2.IDD=НовыйIDD;
			Спр2.Записать();
			Спр2.НайтиЭлемент(Реквизит);
			Реквизит=Спр2.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;
	
	БДПакеты.Ключ.IDD=Реквизит.IDD;
	БДПакеты.Ключ.IDDDB=НомерПакетаИБазы;
	Рез=БДПакеты.НайтиПоКлючу(0);
	
	
	Если Рез=1 Тогда
		Если Сокрлп(БДПакеты.VIDD)<>Сокрлп(Реквизит.Вид()) Тогда
			Рез=0;//нашли такой же IDD, но это другой вид
			//вообще таких случаев не должно быть, за исключением ситуаций,
			//когда передавались два справочника в один
		КонецЕсли;
	КонецЕсли;
	
	Если Рез=0 Тогда
		БДПакеты.Добавить();
		БДПакеты.IDD=Реквизит.IDD;
		БДПакеты.TIP=Тип;
		БДПакеты.VIDD=Реквизит.Вид();
		БДПакеты.DATE1=ДатаН;
		БДПакеты.DATE2=ДатаК;
		БДПакеты.POS=0;
		БДПакеты.IDDDB=НомерПакетаИБазы;
		БДПакеты.Записать();
		Возврат 1;
	Иначе
		БДПакеты.POS=0;
		БДПакеты.Записать();
	КонецЕсли;
	Возврат 0;
КонецФункции //ДобавитьВПакет(БДПакеты,Реквизит)


//_____________________________________________________________________________
Функция ВключитьВСписокВыгрузки(Док,Список)
	Спр=Док;
	ПравилаВыгрузки.ВыбратьЭлементы();
	Пока ПравилаВыгрузки.ПолучитьЭлемент()=1 Цикл
	Если ПравилаВыгрузки.ПризнакВыгрузки=ДаДа Тогда
		Реквизит=ПравилаВыгрузки.Наименование;
		Если Лев(Реквизит,1)="#" Тогда
			Атрибут=0;
			Если Реквизит="#ЭтоГруппа" Тогда
				Атрибут=Спр.ЭтоГруппа();
			ИначеЕсли Реквизит="#ПомеченНаУдаление" Тогда
				Атрибут=Спр.ПометкаУдаления()
			ИначеЕсли Реквизит="#ДатаДок" Тогда
				Атрибут=Док.ДатаДок;
			ИначеЕсли Реквизит="#ВремяДокумента" Тогда
				Атрибут=Док.ПолучитьВремя();
			ИначеЕсли Реквизит="#Проведен" Тогда
				Атрибут=Док.Проведен();
			КонецЕсли;
		Иначе
			
			Если Лев(Реквизит,1)="@" Тогда
				//Обычное задание выражения
				Если Сред(Реквизит,2,4)<>"IDD=" Тогда
					Стр=Сред(Реквизит,2);
					Шаблон("[Получить("+Стр+")]");Атрибут=глВыражение;
				КонецЕсли;
			Иначе
				Попытка//проверка нужна на случай если пользователь неправильно ввел наименование реквизита
					//или реквизит был удален из конфигурации , а правила потом не изменяли
					Атрибут=Спр.ПолучитьАтрибут(Реквизит);
				Исключение
					Сообщить("Неправильное имя реквизита "+Реквизит+" в "+Спр.Вид());
					Продолжить;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
		
		Если ФильтрВыгрузки(Атрибут)=0 Тогда
			Возврат 0;
		КонецЕсли;
		Тип1=ТипЗначения(Атрибут);
		Если (Тип1=11)Или(Тип1=12) Тогда
			Список.ДобавитьЗначение(Атрибут,Тип1);
		КонецЕсли;
	КонецЕсли;
	КонецЦикла;		
	Возврат 1;
КонецФункции 


             



//_____________________________________________________________________________
Процедура ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,Знач Реквизит,Знач Тип0,Знач Уровень=1)
	Перем А,А1,А2,СписокВыгрОб;
	ЦиклДокумента=0;
	//В данной процедуре выгружаем все реквизиты имеющие тип справочника или тип документ
	//в файл пакетов,причем рекурсивно т.е. у этого объекта тоже выгружаем реквизиты
	
	Если Реквизит.Выбран()=0 Тогда
		Возврат;
	КонецЕсли;

	
	Если Уровень>МаксУровень Тогда
		///М_Сообщить("Недостаточно уровней вложенности при выгрузке "+Реквизит.Вид()+"  "+Реквизит,"I");
		Возврат;//предельное число !!
	КонецЕсли;
	
	//собственно здесь все просто и комментарии не нужны, только замечу что:
	//информацию о доступных реквизитах объекта берем из таблицы правил выгрузки
	Если ДобавитьВПакет(БДПакеты,НомерПакетаИБазы,Реквизит,Тип0)=1 Тогда
		// а теперь надо пройтись по этому элементу
		СписокВыгрОб=СоздатьОбъект("СписокЗначений");
		Если Тип0=11 Тогда //справочник
			Вид=Реквизит.Вид();
			Спр=СоздатьОбъект("Справочник."+Вид);
			Спр.ИспользоватьДату(ДатаК);
			Спр.НайтиЭлемент(Реквизит);
			Рез=ПолучитьПравилаВыгрузки("","Справочники");
			Если Рез=1 Тогда
				Если ПравилаВыгрузки.НайтиПоНаименованию(Вид,,1)=1 Тогда
					ПравилаВыгрузки.ИспользоватьРодителя(ПравилаВыгрузки.ТекущийЭлемент());
					Если ВключитьВСписокВыгрузки(Спр,СписокВыгрОб)=0 Тогда
						Возврат;
					КонецЕсли;
				Иначе
					М_Сообщить("Вид "+Вид+" в периферийную базу не выгружается !!");
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Тип0=12 Тогда //документы
			//по документам
			Док=СоздатьОбъект("Документ");
			Док.НайтиДокумент(Реквизит);
			Рез=ПолучитьПравилаВыгрузки("","Документы");
			Вид=Реквизит.Вид();
			Если Рез=1 Тогда
				Если ПравилаВыгрузки.НайтиПоНаименованию(Вид,,1)=1 Тогда
					Если Вид=ДокументОперации Тогда
						//пройдемся по проводкам и выловим субконто !!!
						Опер=СоздатьОбъект("Операция");
						Рез=Опер.НайтиОперацию(Реквизит);
						Если Рез=1 Тогда
							Опер.ВыбратьПроводки();
							Пока Опер.ПолучитьПроводку()=1 Цикл
								//Дебет
								Счет=Опер.Дебет.Счет;
								Если Счет.Выбран()=1 Тогда
									Для А=1 По Счет.КоличествоСубконто() Цикл
										Субконто=Опер.Дебет.Субконто(А); 
										Тип3=ТипЗначения(Субконто);
										Если (Тип3=11)Или(Тип3=12) Тогда
											СписокВыгрОб.ДобавитьЗначение(Субконто,Тип3);
										КонецЕсли;
									КонецЦикла;
								КонецЕсли;
								//Кредит
								Счет=Опер.Кредит.Счет;
								Если Счет.Выбран()=1 Тогда
									Для А=1 По Счет.КоличествоСубконто() Цикл
										Субконто=Опер.Кредит.Субконто(А); 
										Тип3=ТипЗначения(Субконто);
										Если (Тип3=11)Или(Тип3=12) Тогда
											СписокВыгрОб.ДобавитьЗначение(Субконто,Тип3);
										КонецЕсли;
									КонецЦикла;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;	
					КонецЕсли;
					
					
					
					ПравилаВыгрузки1.ИспользоватьВладельца(ПолучитьВладельцаПравил(ВыбрБаза));
					ПравилаВыгрузки1.ИспользоватьРодителя(ПравилаВыгрузки.ТекущийЭлемент());
					ПравилаВыгрузки1.ВыбратьЭлементы();
					Пока ПравилаВыгрузки1.ПолучитьЭлемент(0)=1 Цикл
						Если ПравилаВыгрузки1.ПризнакВыгрузки=ДаДа Тогда
							ПравилаВыгрузки.ИспользоватьРодителя(ПравилаВыгрузки1.ТекущийЭлемент());
							Если ПравилаВыгрузки1.Наименование="Шапка" Тогда
								Если ВключитьВСписокВыгрузки(Док,СписокВыгрОб)=0 Тогда
									Возврат;
								КонецЕсли;
							Иначе
								Док.ВыбратьСтроки();
								Пока Док.ПолучитьСтроку()=1 Цикл
									Если ВключитьВСписокВыгрузки(Док,СписокВыгрОб)=0 Тогда
										Возврат;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;		
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Для А=1 По СписокВыгрОб.РазмерСписка() Цикл
			Стр="";
			Атрибут=СписокВыгрОб.ПолучитьЗначение(А,Стр);
			Тип1=Число(Стр);
			ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,Атрибут,Тип1,Уровень+1);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры //ДобавитьВПакетСВложеннымиДанными

//_____________________________________________________________________________
Процедура ДобавитьВсеПодчиненныеЭлементы(БДПакеты,НомерПакетаИБазы,ТекСпр);
	Если СПодчиненными=1 Тогда
		Для А=1 По СписокПодчиненных.РазмерСписка() Цикл
			Стр="";
			Если Сокрлп(СписокПодчиненных.ПолучитьЗначение(А,Стр))=Сокрлп(ТекСпр.Вид()) Тогда
				Спр=СоздатьОбъект("Справочник."+Стр);
				Спр.ИспользоватьВладельца(ТекСпр);
				Спр.ВыбратьЭлементы();
				Пока Спр.ПолучитьЭлемент()=1 Цикл
					Атрибут=Спр.ТекущийЭлемент();
					ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,Атрибут,ТипЗначения(Атрибут),0);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры //ДобавитьВсеПодчиненныеЭлементы
//_____________________________________________________________________________
Процедура СоздатьНовыйПакетСИнформациейВыборочно(ВыгрБаза,БДПакеты,ВЫгрПакет,НачНомер=0)
	М_Состояние("Выгрузка выборочных данных в пакет ...");
	Если ДатаК<ДатаН Тогда
		ДатаК=ДатаН;
	КонецЕсли;
	//это из-за того, что реквизит записывается позже элемента,в котором он вызывается
	//поэтому далее мы будем сортировать по полю POS
	
	МаксУровень=ВыгрБаза.КоличествоУровнейВложенности;
	БДПакеты.ТекущийИндекс("IDD");
	БДПакеты.АвтоСохранение(0);
	НомерПакетаИБазы=Прав("0000000"+Сокрп(ВыгрБаза.IDD),7)+Сокрлп(ВЫгрПакет);
	Тип=ТипЗначения(ОбъектВыборочно);
	Если (Тип>10)И(Тип<13) Тогда
		Если Тип=11 Тогда
			Если ОбъектВыборочно.Выбран()=1 Тогда
				Если ОбъектВыборочно.ЭтоГруппа()=1 Тогда
					Спр=СоздатьОбъект("Справочник."+ОбъектВыборочно.Вид());
					Спр.ИспользоватьВладельца(ОбъектВыборочно.Владелец);
					Спр.ИспользоватьРодителя(ОбъектВыборочно);
					Спр.ВыбратьЭлементы();
					Пока Спр.ПолучитьЭлемент()=1 Цикл
						Атрибут=Спр.ТекущийЭлемент();
						ДобавитьВсеПодчиненныеЭлементы(БДПакеты,НомерПакетаИБазы,Атрибут);
						ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,Атрибут,ТипЗначения(Атрибут),0);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбъектВыборочно.Выбран()=1 Тогда
			Атрибут=ОбъектВыборочно;
			ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,Атрибут,ТипЗначения(Атрибут),0);
			Если тип=11 Тогда
				ДобавитьВсеПодчиненныеЭлементы(БДПакеты,НомерПакетаИБазы,Атрибут);
			ИначеЕсли тип=12 Тогда
				Если СПодчиненными=1 Тогда
					Док=СоздатьОбъект("Документ");
					Док.ВыбратьПодчиненныеДокументы(ДатаН,ДатаК,Атрибут);
					Пока Док.ПолучитьДокумент()=1 Цикл
						Атрибут=Док.ТекущийДокумент();
						ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,Атрибут,ТипЗначения(Атрибут),0);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			Имя1=ТипОбъектаВыборочно.ПолучитьЗначение(ТипОбъектаВыборочно.ТекущаяСтрока());
			Если Тип=11 Тогда
				Если Имя1="Справочник" Тогда //вылавливаем ситуацию когда выгружаются все виды
					КонЦикл=Метаданные.Справочник();
				Иначе
					КонЦикл=1;
					Имя=Имя1;
				КонецЕсли;
				Для А=1 По КонЦикл Цикл
					Если Имя1="Справочник" Тогда  //выгружаются все виды справочников кроме правил и баз
						Ст=Метаданные.Справочник(А).Идентификатор;
						Если (ст="ПравилаЗагрузки") или (ст="ПравилаВыгрузки") или (ст="ПериферийныеБазы") Тогда
							Продолжить;
						КонецЕсли;
						//теперь смотрим, надо ли выгружать данный вид согласно правилам выгрузки т.к. например справочник Населенные пункты или улицы
						//в комплексной явно не надо !!!
						Если ПолучитьПравилаВыгрузки("","Справочники")=0 Тогда
						    Продолжить;
						КонецЕсли;
						Если ПолучитьПравилаЗагрузки(ПравилаВыгрузки.ТекущийЭлемент(),Ст)=0 Тогда
						    Продолжить;
						КонецЕсли;
						Имя="Справочник."+Ст;
					КонецЕсли;
					Спр=СоздатьОбъект(Имя);
					Режим=0;
					Если Имя1<>"Справочник" Тогда
						Если ТипЗначения(ОбъектВыборочно.Владелец)=11 Тогда
							Если ОбъектВыборочно.Владелец.Выбран()=1 Тогда
								Если ОбъектВыборочноВладелец.Вид()=ОбъектВыборочно.Владелец.Вид() Тогда
									Спр.ИспользоватьВладельца(ОбъектВыборочноВладелец);
									Режим=1;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Спр.ВыбратьЭлементы(Режим);
					Пока Спр.ПолучитьЭлемент()=1 Цикл
						Атрибут=Спр.ТекущийЭлемент();
						ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,Атрибут,ТипЗначения(Атрибут),0);
					КонецЦикла;
				КонецЦикла;
			ИначеЕсли Тип=12 Тогда
				
				Док=СоздатьОбъект(Имя1);
				Док.ВыбратьДокументы(ДатаН,ДатаК);
				Пока Док.ПолучитьДокумент()=1 Цикл
					Атрибут=Док.ТекущийДокумент();
					ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,Атрибут,ТипЗначения(Атрибут),0);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекСтр=ТипОбъектаВыборочно.ТекущаяСтрока();
		Если ТекСтр=0 Тогда
			Возврат;
		КонецЕсли;
		Имя=ТипОбъектаВыборочно.ПолучитьЗначение(ТипОбъектаВыборочно.ТекущаяСтрока());
		Если Имя="Константы" Тогда
			Для ф=1 по Метаданные.Константа() Цикл
				П=Метаданные.Константа(ф).Периодический;
				Имя=Метаданные.Константа(ф).Идентификатор;
				Если П=1 Тогда
					Пер=СоздатьОбъект("Периодический");
					Пер.ИспользоватьОбъект(Имя);
					Атрибут=Пер.ЗначениеНаДату(РабочаяДата());
				Иначе
					Атрибут=Константа.ПолучитьАтрибут(Имя);
				КонецЕсли;
				Тип=ТипЗначения(Атрибут);
				
				БДПакеты.Добавить();
				БДПакеты.IDD=Имя;
				БДПакеты.TIP=95;
				БДПакеты.VIDD=Имя;
				БДПакеты.DATE1=ДатаН;
				БДПакеты.DATE2=ДатаК;
				БДПакеты.POS=0;
				БДПакеты.IDDDB=НомерПакетаИБазы;
				БДПакеты.Записать();

				Если (Тип=11)Или(Тип=12) Тогда
					ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,Атрибут,Тип,0);
				КонецЕсли;
				
				
				
			КонецЦикла;
			
		ИначеЕсли Имя="Планы счетов" Тогда
			НомерПОСПлана=1;
			
			Попытка
				Для Ц=1 по ПланыСчетов.КоличествоЗначений() Цикл
					Об=СоздатьОбъект("Счет");
					Об.ИспользоватьПланСчетов(ПланыСчетов.ЗначениеПоНомеру(Ц));
					Об.ВыбратьСчета();
					Пока Об.ПолучитьСчет()>0 Цикл
						Счет=Об.ТекущийСчет();
						БДПакеты.Добавить();
						БДПакеты.IDD=Счет.Код;
						БДПакеты.TIP=94;
						БДПакеты.VIDD=ЗначениеВСтроку(Счет);
						БДПакеты.DATE1=ДатаН;
						БДПакеты.DATE2=ДатаК;
						БДПакеты.POS=1;
						БДПакеты.IDDDB=НомерПакетаИБазы;
						БДПакеты.Записать();
					КонецЦикла;
				КонецЦикла;
			Исключение
			КонецПопытки;
			
			
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //СоздатьНовыйПакетСИнформациейВыборочно



//_____________________________________________________________________________
Процедура УдалитьИнформациюОПакете(БДПакеты,Ключ);
	М_Состояние("Удаляется информация о пакете "+Ключ);
	БДПакеты.ТекущийИндекс("IDDDB");
	БДПакеты.ПоказыватьУдаленные(0);
	Пока БДПакеты.Найти(Ключ,0)=1 Цикл
		//мы спозиционировались на первом элементе участка ненужных пакетов
		пока Сокрп(БДПакеты.IDDDB)=Ключ Цикл
			БДПакеты.Удалить();                  //т.е. удаляем весь участок
			БДПакеты.Следующая();
			Если БДПакеты.ВКонце()=1 Тогда     //т.к. может этот участок был последним ...
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры //

//_____________________________________________________________________________
Процедура ЗаписатьВФайлБД(БДПакеты,ВыгрОбъект,НомерПакетаИБазы)
	БДПакеты.Добавить();
	БДПакеты.IDD=ВыгрОбъект.IDD;
	БДПакеты.TIP=ТипЗначения(ВыгрОбъект);
	БДПакеты.VIDD=ВыгрОбъект.Вид();
	БДПакеты.DATE1=ДатаН;
	БДПакеты.DATE2=ДатаК;
	БДПакеты.POS=0;
	БДПакеты.IDDDB=НомерПакетаИБазы;
	БДПакеты.Записать();
КонецПроцедуры //ЗаписатьВБазу

//_____________________________________________________________________________
Функция СформироватьЗаПериод(БДПакеты,НомерПакетаИБазы)
	Состояние("Формирование списка всех объектов базы");
	//планы счетов
	Попытка
		Для Ц=1 по ПланыСчетов.КоличествоЗначений() Цикл
			Об=СоздатьОбъект("Счет");
			Об.ИспользоватьПланСчетов(ПланыСчетов.ЗначениеПоНомеру(Ц));
			Об.ВыбратьСчета();
			Пока Об.ПолучитьСчет()>0 Цикл
				Счет=Об.ТекущийСчет();
				БДПакеты.Добавить();
				БДПакеты.IDD=Счет.Код;
				БДПакеты.TIP=94;
				БДПакеты.VIDD=ЗначениеВСтроку(Счет);
				БДПакеты.DATE1=ДатаН;
				БДПакеты.DATE2=ДатаК;
				БДПакеты.POS=0;
				БДПакеты.IDDDB=НомерПакетаИБазы;
				БДПакеты.Записать();
			КонецЦикла;
		КонецЦикла;
	Исключение
	КонецПопытки;

	Константа_УникальныйIDD=Число(Константа.УникальныйIDD)+1;
	Константа_IDD=Прав("0000000"+СокрЛП(Константа.IDD),7);
	
	//справочники	
	Для ы=1 по Метаданные.Справочник() Цикл
//		НачатьТранзакцию();
		КолПрогрессора=КолПрогрессора+10;
		Прогрессор(КолПрогрессора);//**************** прогрессор
		Ст=Метаданные.Справочник(ы).Идентификатор;
		Если (ст<>"ПравилаЗагрузки") и (ст<>"ПравилаВыгрузки") и (ст<>"ПериферийныеБазы") Тогда
			Спр=СоздатьОбъект("Справочник."+Ст);
			М_Состояние("Обработка "+Ст);
			Спр.ВыбратьЭлементы(0);
			Пока Спр.ПолучитьЭлемент()>0 Цикл
				Если Сокрлп(Спр.IDD)="" Тогда
					Константа_УникальныйIDD=Константа_УникальныйIDD+1;
					Спр.IDD=Сокрлп(Константа_IDD+прав("0000000000"+Константа_УникальныйIDD,10));
					Спр.Записать();
				КонецЕсли;
				ЗаписатьВФайлБД(БДПакеты,Спр.ТекущийЭлемент(),НомерПакетаИБазы);
			КонецЦикла;
		КонецЕсли;
//		ЗафиксироватьТранзакцию();
	КонецЦикла;


	
	//документы
	Док=СоздатьОбъект("Документ");
	М_Состояние("Обработка документов...");
	Док.ВыбратьДокументы(ДатаН,ДатаК);
	Пока Док.ПолучитьДокумент()>0 Цикл
		Если Сокрлп(Док.IDD)="" Тогда
			Константа_УникальныйIDD=Константа_УникальныйIDD+1;
			Док.IDD=Сокрлп(Константа_IDD+прав("0000000000"+Константа_УникальныйIDD,10));
			Док.Записать();
		КонецЕсли;
		ЗаписатьВФайлБД(БДПакеты,Док.ТекущийДокумент(),НомерПакетаИБазы);
	КонецЦикла;


	Константа.УникальныйIDD=Строка(Число(Константа_УникальныйIDD)+1);
	
	//константы
	Для А=1 по Метаданные.Константа() Цикл
		ИмяКонстанты=Метаданные.Константа(А).Идентификатор;
		БДПакеты.Добавить();
		БДПакеты.IDD=ИмяКонстанты;
		БДПакеты.TIP=95;
		БДПакеты.VIDD=ИмяКонстанты;
		БДПакеты.DATE1=ДатаН;
		БДПакеты.DATE2=ДатаК;
		БДПакеты.POS=0;
		БДПакеты.IDDDB=НомерПакетаИБазы;
		БДПакеты.Записать();
	КонецЦикла;
	Возврат 1;		
КонецФункции 
//_____________________________________________________________________________

Функция ВыгрузитьИзмененияВОднуБазу(ВыгрБаза)
	ПЕрем БДИзменения,БДУдаления,БДПакеты;
	//НоваяВыгрузка
	ИмяТекстовогоФайла=СокрЛП(ПутьКБазеПриВыгрузке)+"\"+СокрЛП(НомерПакетаВыгрузки)+".xml";
	Если СтрДлина(Сокрлп(ПутьКБазеПриВыгрузке))>2 Тогда
		Если ФС.СуществуетФайл(ПутьКБазеПриВыгрузке)=0 Тогда
			Предупреждение("В базе "+ВыгрБаза+" неправильно задан путь выгрузки !
			| Данные выгружаться не будут.",10);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	//открываем файлы где копятся изменения и где фиксируются все удаления
	//БДМОД=0;БДУдаленийМОД=0;БДПакетыМОД=0;
	Если ОткрытьФайлМОДПоИмени(БДИзменения,"Изменения","_tran1")=0 Тогда
		Предупреждение("Ошибка открытия базы ""Изменений"" - возможно она занята другим пользователем",10);
		Возврат 0;
	КонецЕсли;
	Если ОткрытьФайлМОДПоИмени(БДУдаления,"Удаления","_tran3")=0 Тогда
		Предупреждение("Ошибка открытия базы ""Удалений"" - возможно она занята другим пользователем",10);
		Возврат 0;
	КонецЕсли;
	Если ОткрытьФайлМОДПоИмени(БДПакеты,"Пакеты","_tran2")=0 Тогда //это открывается временный файл !!!
		Предупреждение("Ошибка открытия базы ""Пакеты"" - возможно она занята другим пользователем",10);
		Возврат 0;
	КонецЕсли;
	
	М_Сообщить("Обрабатывем удаленные объекты...");
	//добавляем удаленные объекты в базу изменений
	ДобавитьУдаленныеОбъектыВ_БазуИзменений(БДИзменения,БДУдаления);
	
	//Для всех баз формируем пакеты
	//если уже есть пакеты с пустыми номерами (т.е. = "_") для отправки, то задаем им номера
	
	ВыбрБаза=ВыгрБаза;
	ХМЛ=СоздатьОбъект("Microsoft.XMLDOM");
	Пакет=НовыйПакет();
	
	
	//Смотрим режим работы
	Если МаксНомерПакетаВыгрузки=НомерПакетаВыгрузки Тогда
		//это формируется новый пакет
		Если РежимВыгрузки=1 Тогда
			//пройдемся по всем базам и допишем все изменения в базу пакетов
			Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
			//формируем пустые номера пакетов для баз отличных от заданных и с конкретным номером - в ином случае
			Спр.ВыбратьЭлементы();
			Пока Спр.ПолучитьЭлемент()=1 Цикл
				Если (Спр.Выгрузка=1)или(ВыгрБаза=Спр.ТекущийЭлемент()) Тогда
					М_Сообщить("Подготавливаем данные для базы "+Спр.Наименование);
					НомПакета="_";
					СформироватьНовыйПакет(БДИзменения,БДПакеты,Спр.ТекущийЭлемент(),НомПакета);
				КонецЕсли;
			КонецЦикла;
			БДИзменения.ОчиститьФайл();
			
			//**************** переформирование пакета и контроль длины
			//Изменяем пакеты с номерами "_" в номера 	НомерПакетаВыгрузки
			//одновременно, если число объектов в пакете превысило допустимый размер,
			//то будет сформирован новый пакет и т.д. ...
			ИзНомеров="_";
			ВНомера=НомерПакетаВыгрузки;
			ПереформироватьПакет(БДПакеты,ВыгрБаза,ВНомера,ИзНомеров);
			//****************
		ИначеЕсли РежимВыгрузки=2 Тогда
			//если режим выгрузки за период,то
			М_Сообщить("Режим выгрузки за период...");
			НомерПакетаВыгрузки=МаксНомерПакетаВыгрузки;//т.е. всегда создаем новый пакет !!!
			НомерПакетаИБазы=Прав("0000000"+Сокрп(Сокрп(ВыгрБаза.IDD)),7)+"П";
			Рез=СформироватьЗаПериод(БДПакеты,НомерПакетаИБазы);
			Если Рез=0 Тогда
			    Возврат 0;
			КонецЕсли;
			
			
			//**************** переформирование пакета и контроль длины
			//Изменяем пакеты с номерами "_" в номера 	НомерПакетаВыгрузки
			//одновременно, если число объектов в пакете превысило допустимый размер,
			//то будет сформирован новый пакет и т.д. ...
			ИзНомеров="П";
			ВНомера=НомерПакетаВыгрузки;
			ПереформироватьПакет(БДПакеты,ВыгрБаза,ВНомера,ИзНомеров);
			//****************
		ИначеЕсли РежимВыгрузки=3 Тогда
			//если режим выгрузки выборочно
			М_Сообщить("Режим выборочной выгрузки ...");
			НомерПакетаВыгрузки=МаксНомерПакетаВыгрузки;//т.е. всегда создаем новый пакет !!!
			СоздатьНовыйПакетСИнформациейВыборочно(ВыгрБаза,БДПакеты,"В");
			
			//**************** переформирование пакета и контроль длины
			//Изменяем пакеты с номерами "_" в номера 	НомерПакетаВыгрузки
			//одновременно, если число объектов в пакете превысило допустимый размер,
			//то будет сформирован новый пакет и т.д. ...
			ИзНомеров="В";
			ВНомера=НомерПакетаВыгрузки;
			ПереформироватьПакет(БДПакеты,ВыгрБаза,ВНомера,ИзНомеров);
			//****************
		ИначеЕсли РежимВыгрузки=4 Тогда
			//если режим выгрузки по списку значения
			М_Сообщить("Режим выгрузки по списку значения ...");
			Если ТипЗначенияСтр(СписокВыборочнойВыгрузки)<>"СписокЗначений" Тогда
			М_Сообщить("Не указан список выгрузки объектов. Выгрузка отменена.");
			    Возврат 0;
			КонецЕсли;	

			КолВыгрузки=СписокВыборочнойВыгрузки.РазмерСписка();
			Если КолВыгрузки<1 Тогда
				М_Сообщить("Список выгрузки пустой. Выгрузка отменена.");
			    Возврат 0;
			КонецЕсли;	

			НомерПакетаВыгрузки=МаксНомерПакетаВыгрузки;//т.е. всегда создаем новый пакет !!!
			НомерПакетаИБазы=Прав("0000000"+Сокрп(Сокрп(ВыгрБаза.IDD)),7)+"С";
			
			Для А=1 По КолВыгрузки Цикл
				ВыгрОбъект=СписокВыборочнойВыгрузки.ПолучитьЗначение(А);
				ЗаписатьВФайлБД(БДПакеты,ВыгрОбъект,НомерПакетаИБазы);				
			КонецЦикла;
			
			//**************** переформирование пакета и контроль длины
			//Изменяем пакеты с номерами "_" в номера 	НомерПакетаВыгрузки
			//одновременно, если число объектов в пакете превысило допустимый размер,
			//то будет сформирован новый пакет и т.д. ...
			ИзНомеров="С";
			ВНомера=НомерПакетаВыгрузки;
			ПереформироватьПакет(БДПакеты,ВыгрБаза,ВНомера,ИзНомеров);
		КонецЕсли;
		
		//заполняем переменные цикла выгрузки (т.е. какие пакеты собственно надо выгружать)
		//Одновременно смотрим может надо повторить предыдущие пакеты
		НомерОт=НомерПодтвержденногоПакетаЗагрузки+1;
		НомерДо=НомерПакетаВыгрузки;
		
		ПропускатьДо=ПолучитьНомерПакетаВыгрузки(ВыгрБаза);
		ПропускатьОт=ПропускатьДо-ВыгрБаза.КоличествоЦиклов+1;
		
	Иначе
		//это повтор ранее выгруженного пакета
		М_Сообщить("Режим повтора пакета № "+НомерПакетаВыгрузки+" ...");
		//выгружаем только какой-то один пакет (ручной повтор выгрузки)
		НомерОт=НомерПакетаВыгрузки;
		НомерДо=НомерПакетаВыгрузки;
		
		ПропускатьОт=НомерДо;//ставим одинаковые параметры - т.е. на самом деле ничего не пропускаем
		ПропускатьДо=НомерДо;
		
	КонецЕсли;
	
	
	
	
	РежимОтправкиПакетов=0;//эта переменная отслеживает режим как нам послать подтверждение о том, что пакет
	//из периферийной базы до нас дошел
	//0-создаем новый пакет в периф базу с новыми данными
	//1-новых данных нет, но подтверждение пошлем вместе с повтором старых пакетов
	//2-создаем отдельный пакет подтверждения (где будет только один  заголовок -
	//  в периф базе такой пакет изменяет только номер подтвержденного пакета, а номер пакета загрузки не изменяет !!)
	
	Для ААА=НомерОт По НомерДо Цикл
		Если (ААА>=ПропускатьОт)И(ААА<ПропускатьДо) Тогда
			//	Сообщить("Пропущен пакет № "+ААА);
			Продолжить;
		КонецЕсли;
		
		М_Сообщить("Выгружаем пакет № "+ААА);
		Пакет=НовыйПакет();
		
		КакПомечать=ААА;
		КакиеВыгружать=ААА;
		Рез=ВыгрузитьТело(БДПакеты,ВыгрБаза,КакПомечать,КакиеВыгружать,ААА);
		Если Рез=0 Тогда
			Если НомерДо=ААА Тогда //это последний пакет - данных нет - выгрузим только подтверждение  !!
				Если РежимОтправкиПакетов=0 Тогда//т.е. повторной выгрузка пакетов нет !!
					РежимОтправкиПакетов=2;
				КонецЕсли;
			КонецЕсли;
			Продолжить;
		Иначе
			Если НомерДо=ААА Тогда //это последний пакет и есть данные - выгрузим подтверждение  вместе с ними !!
				РежимОтправкиПакетов=0;
			Иначе //это не послеедний пакет , но с данными - выгрузим подтв. с ними
				РежимОтправкиПакетов=1;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбработкаПримера=1 Тогда
			ПодИмяПакета="sample";
		Иначе
			ПодИмяПакета=СокрЛП(ААА);
		КонецЕсли;
			ИмяТекстовогоФайла=СокрЛП(ПутьКБазеПриВыгрузке)+"\"+ПодИмяПакета+".xml";
		М_Сообщить("Записываем файл "+ИмяТекстовогоФайла);
		ХМЛ.save(ИмяТекстовогоФайла);
		Если Фс.СуществуетФайл(ИмяТекстовогоФайла)=0 Тогда
			ХМЛ.save(КаталогИБ()+ПодИмяПакета+".xml");
			Сообщить("Произошла непонятная ошибка. Пакет "+ПодИмяПакета+" записан в каталог "+КаталогИБ());
		КонецЕсли;
	КонецЦикла;
	
	Если РежимОтправкиПакетов=1 Тогда//нет изменений и не пришел новый пакет , но только повторяем старые пакеты
		Результат=2;//Цифра 2 означает, что счетчик выгруженных пакетов увеличивать не надо
		М_Сообщить("Выгрузили повторно старые пакеты (вместе с подтверждением о последнем загруженном
		| пакете из периферийной базы), новый пакет не создавали.","I");
		Перейти ~Выход;//новый пакет не формируем
	ИначеЕсли РежимОтправкиПакетов=2 Тогда//пришел новый пакет, нет изменений и нет необходимости выгружать повторные пакеты
		//смотрим может это пришло только подтверждение без данных тогда подтверждение о подтвержд. высылать не надо !
		Если ПришлоТолькоПодтверждение<>1 Тогда
			//выгружаем подтверждение
			//ИмяТекстовогоФайла=СокрЛП(ПутьКБазеПриВыгрузке)+"\"+СокрЛП(НомерПакетаВыгрузки)+".mod";
			//Т.Записать(ИмяТекстовогоФайла);
			//
			//М_Сообщить("Выгрузили только подтверждение о последнем загруженном пакете из периферийной базы,
			//| новый пакет не создавали.","I");
		КонецЕсли;
		
		Результат=0;
		Перейти ~Выход;
	КонецЕсли;
	
	Если ВыгрБаза.КоличествоЦиклов=0 Тогда //это режим без подтверждения пакетов
		//поэтому удаляем информацию о пакете
		Для АА=Число(ПолучитьНомерПакетаВыгрузки(ВыгрБаза))-10 По НомерПакетаВыгрузки Цикл
			Ключ=Прав("0000000"+Сокрлп(Сокрп(ВыгрБаза.IDD)),7)+Сокрлп(Строка(АА));
			УдалитьИнформациюОПакете(БДПакеты,Ключ);
		КонецЦикла;
		БДПакеты.Сжать();
		
		Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
		Спр.НайтиЭлемент(ВыгрБаза);
		Спр.НомерПодтвержденногоПакетаЗагрузки=НомерПакетаВыгрузки;
		НомерПодтвержденногоПакетаЗагрузки=НомерПакетаВыгрузки;
		Спр.Записать();
	КонецЕсли;
	
	Результат=1;
	~Выход:
	
	БДПакеты.ЗакрытьФайл();
	БДИзменения.ЗакрытьФайл();
	БДУдаления.ЗакрытьФайл();
	
	//	ФС.УдалитьФайл(КаталогИБ()+"temp2.tmp");
	Возврат Результат;
КонецФункции

//_____________________________________________________________________________

//_____________________________________________________________________________
Функция ВыгрузитьВФТП()
	//подготавливаем файл с командами ftp
	ВременныйСкриптФайл="InetFTP.tmp";
	Т=СоздатьОбъект("Текст");
	Т.ДобавитьСтроку("open "+Сокрлп(База.АдресСервера));
	Т.ДобавитьСтроку(Сокрлп(База.Логин));
	Т.ДобавитьСтроку(Сокрлп(База.Пароль));
	Т.ДобавитьСтроку("prompt");
	Т.ДобавитьСтроку("binary");
	Т.ДобавитьСтроку("mkdir "+Сокрлп(База.КаталогВыгрузки));
	Т.ДобавитьСтроку("cd "+Сокрлп(База.КаталогВыгрузки));
	Т.ДобавитьСтроку("put flag.mod"); //посылаем проверочный флаг
	Т.ДобавитьСтроку("mput *.mod");//get 
	Т.ДобавитьСтроку("mput *.a??");//get 
	Т.ДобавитьСтроку("get flag.mod flag2.mod");//считываем - его
	Т.ДобавитьСтроку("quit");//выход
	
	Т.Записать(ПутьКБазеПриВыгрузке+"\"+ВременныйСкриптФайл);
	
	ФайлФлага=ПутьКБазеПриВыгрузке+"\flag.mod";
	ФайлФлага2=ПутьКБазеПриВыгрузке+"\flag2.mod";
	Т=СоздатьОбъект("Текст");
	Т.ДобавитьСтроку("=Проверка связи=");
	Т.Записать(ФайлФлага);
	Если ФС.СУществуетФайл(ФайлФлага2)=1 Тогда
		ФС.УдалитьФайл(ФайлФлага2);
	КонецЕсли;
	
	Фс.УстТекКаталог(ПутьКБазеПриВыгрузке);
	Команда="ftp -s:"""+ВременныйСкриптФайл+""">ftp_out.log";
	КомандаСистемы(Команда);
	Фс.УдалитьФайл(ПутьКБазеПриВыгрузке+"\"+ВременныйСкриптФайл);
	Рез=ФС.СУществуетФайл(ФайлФлага2); //если файл существует, то соединение было успешное
	Возврат Рез;
КонецФункции 

//_____________________________________________________________________________
Процедура ЗаполнитьИнфоМОД()
	Перем Мас[5];
	Мас[1]="Изм.";
	Мас[2]="Пер.";
	Мас[3]="Выб.";
	
	//выгрузка
	ВыгрузкаИнфо="";
	Если Выгрузка=1 Тогда
		ВыгрузкаИнфо="Выгрузка:";
		ВыгрузкаИнфо=ВыгрузкаИнфо+Мас[РежимВыгрузки];
		Если РежимВыгрузки>1 Тогда
			ВыгрузкаИнфо=ВыгрузкаИнфо+Лев(Строка(ДатаН),5);
			ВыгрузкаИнфо=ВыгрузкаИнфо+"- "+Лев(Строка(ДатаК),5);
		КонецЕсли;
		ВыгрузкаИнфо=ВыгрузкаИнфо+?(ПризнакОтправленияMD=1," MD ","     ");
		ВыгрузкаИнфо=ВыгрузкаИнфо+?(ВыгружатьШапкуПакетовОтдельно=1,"Ш.отд.","Ш.вн.");
	КонецЕсли;
	
	//загрузка
	ЗагрузкаИнфо="";
	Если Загрузка=1 Тогда
		ЗагрузкаИнфо="Загрузка:";
		ЗагрузкаИнфо=ЗагрузкаИнфо+?(ПриоритетностьБазы=1,"Приор.","     ");
		ЗагрузкаИнфо=ЗагрузкаИнфо+?(МиграцияИзменений=1,"Мигр.","     ");
		ЗагрузкаИнфо=ЗагрузкаИнфо+?(ИспользоватьТранзакцию=1,"Общ.транз.","Част.транз.");
		ЗагрузкаИнфо=ЗагрузкаИнфо+?(ПризнакПолученияMD=1,"MD","    ");
	КонецЕсли;
	
	//Общие парамметры
	ОбщиеИнфо="Общие:     ";
	ОбщиеИнфо=ОбщиеИнфо+?(База.ВстроеннаяАрхивация=1,"Архивация","      ");
	ОбщиеИнфо=ОбщиеИнфо+?(База.ИспользоватьФТП=1," FTP","");
	ОбщиеИнфо=ОбщиеИнфо+?(База.ПередачаПоПочте=1," E-Mail","");
	
	
	Форма.Обновить();
КонецПроцедуры //ЗаполнитьИнфоМОД
//_____________________________________________________________________________

Функция Выгрузить()
	ЗаполнитьИнфоМОД();
	М_Состояние("Подготовка выгрузки изменений ...");
	Форма.ИспользоватьСлой("Инфо",1);
	НомерПакетаВыгрузкиДляАрхива=НомерПакетаВыгрузки;
	Рез=ВыгрузитьИзмененияВОднуБазу(База);
	Если Рез=1 Тогда
	ИначеЕсли Рез=0 Тогда
		Возврат 0;
	КонецЕсли;
	
	
	
	ИмяТекстовогоФайла=СокрЛП(ПутьКБазеПриВыгрузке)+"\"+Сокрлп(Строка(НомерПакетаВыгрузки))+".xml";
	
	Если ПризнакОтправленияMD=1 Тогда
		А0="";А1="";А2="";А3="";А4="";
		ФайлИсточникMD=КаталогБазыДанных()+"1cv7.md";
		Фс.АтрибутыФайла(ФайлИсточникMD,А0,А1,А2,А3,А4);
		Версия=Сокрлп(""+Сокрлп(А0)+Сокрлп(А1)+Сокрлп(А2)+Сокрлп(А4));
		СтараяВерсия=Сокрлп(База.MD);
		Если Версия<>СтараяВерсия Тогда
			Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
			Спр.НайтиЭлемент(База);
			Спр.MD=Версия;
			Спр.Записать();
			ФайлMD=СокрЛП(ПутьКБазеПриВыгрузке)+"\1cv7.md";
			Фс.УдалитьФайл(ФайлMD);
			ФС.КопироватьФайл(ФайлИсточникMD,ФайлMD,0);
			М_Сообщить("Скопирован md-файл в каталог выгрузки пакетов...");
		КонецЕсли;
	КонецЕсли;
	
	Если (Сокрлп(База.СкриптШаблонВыгрузки)<>"")И(Сокрлп(База.СкриптРабочийВыгрузки)<>"") Тогда
		ОбработатьСкрипт(База.СкриптШаблонВыгрузки,База.СкриптРабочийВыгрузки);
	КонецЕсли;
	
	Если ВстроеннаяАрхивация=1 Тогда
		//выполняем архивирование и удаление пакетов
		ФС.УстТекКаталог(ПутьКБазеПриВыгрузке);
		//подготовка имен и ключей ...
		ИмяАрхива=База.ПрефиксАрхиваВыгрузки;//
		ИмяАрхива=Сокрлп(ИмяАрхива)+Строка(НомерПакетаВыгрузкиДляАрхива)+".arj";
		Размер="";
		Если База.РазмерАрхива>9 Тогда
			Размер=" -v"+Сокрлп(База.РазмерАрхива)+"k";
		КонецЕсли;
		Пароль="";
		Если Сокрлп(База.ПарольАрхива)<>"" Тогда
			Пароль=" -g"+Сокрп(База.ПарольАрхива);
		КонецЕсли;
		
		//перенос файлов в архив
		Команда=""""+КаталогИБ()+"arj.exe"""+" m"+Размер+Пароль+" -y "+ИмяАрхива+" *.xml *.md";
		КомандаСистемы(Команда);
		                        
		
	КонецЕсли;
	
	Если СокрЛП(База.КомандаПриВыгрузке)<>"" Тогда
		КомандаСистемы(База.КомандаПриВыгрузке);
	КонецЕсли;
	Если ИспользоватьФТП=1 Тогда
		//передача через Интернет
		Состояние("Отправление пакетов по FTP");
		Пока ВыгрузитьВФТП()=0 Цикл
			Сообщить("Соединение не получилось !");
			Рез=Вопрос("Выгрузка на ftp-сервер не удалась.
			|Повторить попытку ?",1,50);
			Если Рез=2 Тогда //нажата кнопка отмена !!
				Возврат 0;
			КонецЕсли;
		КонецЦикла;
		ОчиститьКаталог(ПутьКБазеПриВыгрузке);	
	ИначеЕсли ПередачаПоПочте=1 Тогда
		Состояние("Отправление пакетов по E-Mail");
		Попытка
			Почта=СоздатьОбъект("Mod.Mail");
		Исключение
			//объект еще не инициализирован, т.е. первая отправка почты из МОД
			//при исталляции МОД соответствующая программа работы с E-Mail должна
			//быть записана в каталог ИБ
			Состояние("Первичный запуск программы E-Mail");
			ЗапуститьПриложение(КаталогИБ()+"MODMail.exe");
			Для А=1 По 3 Цикл
				Время=ТекущееВремя();
				Пока Время=ТекущееВремя() Цикл
				КонецЦикла;
			КонецЦикла;
			Состояние("Отправление пакетов по E-Mail");
			
			//дубль два !
			Попытка
				Почта=СоздатьОбъект("Mod.Mail");
			Исключение
				Сообщить("Невозможно создать OLE-объект для работы с электронной почтой !","!");
				Сообщить("Отправка по E-Mail невозможна !","!");
				Возврат 0;
			КонецПопытки;
		КонецПопытки;
		
		Почта.Подключиться(Сокрлп(Константа.IDD),Сокрлп(Константа.ПарольМОД),"","");
		Почта.НовоеСообщение();
		ОбратныйАдрес=База.ОбратныйАдрес;
		Почта.ОбратныйАдрес=Константа.IDD+"@pb.ru";
		Почта.ДобавитьАдрес(База.АдресПолучателя);
		
		
		Почта.Заголовок=База.ЗаголовокДляОтправки;
		Почта.Текст="Пакеты Менеджера обмена данными ("+ТекущаяДата()+")";
		Почта.ИмяОтправителя=ИмяМОД+"-ИД-"+Константа.IDD;


		//присоединяем пакеты МОД
		Стр=Сокрлп(ФС.НайтиПервыйФайл(Сокрлп(ПутьКБазеПриВыгрузке)+"\*.mod"));
		Пока Стр<>"" Цикл
			Почта.ДобавитьФайл(Сокрлп(ПутьКБазеПриВыгрузке)+"\"+Стр);
			Стр=Сокрлп(ФС.НайтиСледующийФайл());
		КонецЦикла;
		
		//присоединяем архивы МОД
		Стр=Сокрлп(ФС.НайтиПервыйФайл(Сокрлп(ПутьКБазеПриВыгрузке)+"\*.a??"));
		Пока Стр<>"" Цикл
			Почта.ДобавитьФайл(Сокрлп(ПутьКБазеПриВыгрузке)+"\"+Стр);
			Стр=Сокрлп(ФС.НайтиСледующийФайл());
		КонецЦикла;
		
		
		
		//посылаем по почте базе с номером IDD
		Почта.Послать(База.IDD);
		
		УспешноеЗавершение=Почта.УспешноеЗавершение();
		Почта.Отключиться();
		Почта=0;
		
		//Если УспешноеЗавершение=0 Тогда
		//	Сообщить("Ошибка при передаче !");
		//	Возврат 0;//произошла какая-то ошибка
		//КонецЕсли;
		//все пакеты отправлены по E-Mail - удаляем их из нашей базы
		ОчиститьКаталог(ПутьКБазеПриВыгрузке);	
	КонецЕсли;
	
	
	//увеличиваем счетчик пакетов
	Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
	Спр.НайтиЭлемент(База);
	Если НомерПакетаВыгрузки=МаксНомерПакетаВыгрузки Тогда
		НомерПакетаВыгрузки=НомерПакетаВыгрузки+1;
		МаксНомерПакетаВыгрузки=НомерПакетаВыгрузки;
		База=Спр.ТекущийЭлемент();
		//а теперь позиционируемся на ведущий элемент (по которому ведется сквозная нумерация пакетов)
		ПолучитьНомерПакетаВыгрузки(Спр.ТекущийЭлемент(),Спр);
		Спр.НомерПакетаВыгрузки=НомерПакетаВыгрузки;
		Спр.Записать();
		
		ЗаполнитьСписокПакетов();
	КонецЕсли;//иначе повтор ранее отосланного пакета
	М_Сообщить("Выгрузка данных завершена");
	Возврат 1;
КонецФункции //Выгрузить

//_____________________________________________________________________________

Функция Подтверждение(ВыгрБаза="",Знач Номер="",Интерактивно=0)
	ПЕрем БДПакеты;
	Если ВыгрБаза="" Тогда
		ВыгрБаза=База;
		Если База.Выбран()=0 Тогда
			Предупреждение("Не выбрана база, из которой получено подтверждение !",10);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Если Номер="" Тогда
		Номер=НомерПакетаВыгрузки;
	КонецЕсли;
	
	Если Номер=0 Тогда
		Возврат 1;
	КонецЕсли;
	
	Если Номер>=МаксНомерПакетаВыгрузки Тогда
		//	Сообщить("Пакет № "+Номер+" еще не выгружался (макс номер = "+Число(МаксНомерПакетаВыгрузки-1)+")","I");
		//	Возврат 0;
		Номер=МаксНомерПакетаВыгрузки-1;
	КонецЕсли;
	
	Если Интерактивно=0 Тогда
	    ПодПрефикс="_";
	Иначе
	    ПодПрефикс="";
	КонецЕсли;    
	Если ОткрытьФайлМОДПоИмени(БДПакеты,"Пакеты",ПодПрефикс+"tran2")=0 Тогда
		Предупреждение("Ошибка открытия базы ""Пакеты"" - возможно она занята другим приложением",10);
		Возврат 0;
	КонецЕсли;
	
	М_Состояние(ВыгрБаза.Наименование+" - удаление подтвержденных пакетов.");
	
	//здесь цикл для того, чтобы удалить более ранние пакеты
	Для АА=ВыгрБаза.НомерПодтвержденногоПакетаЗагрузки-10 По Номер Цикл
		Ключ=Прав("0000000"+Сокрлп(Сокрп(ВыгрБаза.IDD)),7)+Сокрлп(Строка(АА));
		УдалитьИнформациюОПакете(БДПакеты,Ключ);
	КонецЦикла;
	
	БДПакеты.Сжать();
	БДПакеты.ЗакрытьФайл();
	
	
	
	
	Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
	Спр.НайтиЭлемент(ВыгрБаза);
	Если Число(Спр.НомерПодтвержденногоПакетаЗагрузки)<Номер Тогда
		Спр.НомерПодтвержденногоПакетаЗагрузки=Номер;
		НомерПодтвержденногоПакетаЗагрузки=Номер;
	КонецЕсли;//иначе повтор ранее отосланного пакета
	Спр.Записать();
	ЗаполнитьСписокПакетов();
	Возврат 1;
КонецФункции//УстноеПодтверждени

//_____________________________________________________________________________
Функция ЗагрузитьИзФТП()
	//подготавливаем файл с командами ftp
	ВременныйСкриптФайл="InetFTP.tmp";
	Т=СоздатьОбъект("Текст");
	Т.ДобавитьСтроку("open "+Сокрлп(База.АдресСервера));
	Т.ДобавитьСтроку(Сокрлп(База.Логин));
	Т.ДобавитьСтроку(Сокрлп(База.Пароль));
	Т.ДобавитьСтроку("prompt");
	Т.ДобавитьСтроку("binary");
	Т.ДобавитьСтроку("mkdir "+Сокрлп(База.КаталогЗагрузки));
	Т.ДобавитьСтроку("cd "+Сокрлп(База.КаталогЗагрузки));
	//	Т.ДобавитьСтроку("get flag.mod"); //получаем проверочный флаг
	Т.ДобавитьСтроку("mget *");
	Т.ДобавитьСтроку("quit");//выход
	Т.Записать(ПутьКБазеПриЗагрузке+"\"+ВременныйСкриптФайл);
	
	ФайлФлага=ПутьКБазеПриЗагрузке+"\flag.mod";
	Если ФС.СУществуетФайл(ФайлФлага)=1 Тогда
		ФС.УдалитьФайл(ФайлФлага);
	КонецЕсли;
	
	Фс.УстТекКаталог(ПутьКБазеПриЗагрузке);
	Команда="ftp -s:"""+ВременныйСкриптФайл+""">ftp_in.log";
	КомандаСистемы(Команда);
	
	Рез=ФС.СУществуетФайл(ФайлФлага); //если файл существует, то соединение было успешное
	Если Рез=1 Тогда //надо очистить каталог ftp
		ВременныйСкриптФайл="InetFTP.tmp";
		Т=СоздатьОбъект("Текст");
		Т.ДобавитьСтроку("open "+Сокрлп(База.АдресСервера));
		Т.ДобавитьСтроку(Сокрлп(База.Логин));
		Т.ДобавитьСтроку(Сокрлп(База.Пароль));
		Т.ДобавитьСтроку("prompt");
		Т.ДобавитьСтроку("binary");
		Т.ДобавитьСтроку("mkdir "+Сокрлп(База.КаталогЗагрузки));
		Т.ДобавитьСтроку("cd "+Сокрлп(База.КаталогЗагрузки));
		Т.ДобавитьСтроку("mdelete *");
		Т.ДобавитьСтроку("quit");//выход
		Т.Записать(ПутьКБазеПриЗагрузке+"\"+ВременныйСкриптФайл);
		
		Команда="ftp -s:"""+ВременныйСкриптФайл+""">ftp_del.log";
		КомандаСистемы(Команда);
	КонецЕсли;
	Фс.УдалитьФайл(ПутьКБазеПриЗагрузке+"\"+ВременныйСкриптФайл);
	
	Возврат Рез;
КонецФункции 
//_____________________________________________________________________________


Процедура Загрузить()
	ЗаполнитьИнфоМОД();
	Форма.ИспользоватьСлой("Инфо",1);
	
	
	СопоставлятьПеречисления=1;
	ПришлоТолькоПодтверждение=0;
	ИмяТекстовогоФайла=СокрЛП(ПутьКБазеПриЗагрузке)+"\"+СокрЛП(Строка(Число(НомерПакетаЗагрузки)))+".xml";
	
	
	Если (Сокрлп(База.СкриптШаблонЗагрузки)<>"")И(Сокрлп(База.СкриптРабочийЗагрузки)<>"") Тогда
		ОбработатьСкрипт(База.СкриптШаблонЗагрузки,База.СкриптРабочийЗагрузки);
	КонецЕсли;
	
	Если СокрЛП(База.КомандаПриЗагрузке)<>"" Тогда
		КомандаСистемы(База.КомандаПриЗагрузке);
	КонецЕсли;
	Если ИспользоватьФТП=1 Тогда
		//прием из Интернета
		Состояние("Прием пакетов по FTP");
		Пока ЗагрузитьИзФТП()=0 Цикл
			Сообщить("Соединение не получилось !");
			Рез=Вопрос("Загрузка из ftp-сервера не удалась или нет данных.
			|Повторить попытку ?",1,50);
			Если Рез=2 Тогда //нажата кнопка отмена !!
				Возврат ;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ПередачаПоПочте=1 Тогда
		Состояние("Прием пакетов по E-Mail");
		Попытка
				Почта=СоздатьОбъект("Mod.Mail");
		Исключение
			//объект еще не инициализирован, т.е. первая отправка почты из МОД
			//при исталляции МОД соответствующая программа работы с E-Mail должна
			//быть записана в каталог ИБ
			Состояние("Первичный запуск программы E-Mail");
			ЗапуститьПриложение(КаталогИБ()+"MODMail.exe");
			Для А=1 По 3 Цикл
				Время=ТекущееВремя();
				Пока Время=ТекущееВремя() Цикл
				КонецЦикла;
			КонецЦикла;
			Состояние("Прием пакетов по E-Mail");
			
			//дубль два !
			Попытка
				Почта=СоздатьОбъект("Mod.Mail");
			Исключение
				Сообщить("Невозможно создать OLE-объект для работы с электронной почтой !","!");
				Сообщить("Получение пакетов по E-Mail невозможно !","!");
				Возврат ;
			КонецПопытки;
		КонецПопытки;
		
		Почта.Подключиться(Сокрлп(Константа.IDD),Сокрлп(Константа.ПарольМОД),ПутьКБазеПриЗагрузке,"");
		Если Почта.ЧислоСообщений()>0 Тогда
		Почта.ВыбратьСообщения();
		Пока Почта.ПолучитьСообщение()=1 Цикл
			ОтКуда=Почта.АдресОтправителя();
			Если Найти(ОтКуда,ИмяМОД+"-ИД-"+?(База.IDD=ИДДляОтладки,"",База.IDD))=0 Тогда //почта не из базы, с которой осуществляется обмен
				Продолжить;
			КонецЕсли;
			
			Заголовок=Почта.Заголовок;
			ЗаголовокДляПолучения=Сокрлп(База.ЗаголовокДляПолучения);
			Если ПустоеЗначение(ЗаголовокДляПолучения)=0 Тогда
				Если Найти(Заголовок,ЗаголовокДляПолучения)=0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Почта.ПрочитатьСообщение(1);
			Текст=Почта.Текст;
		КонецЦикла;
		
		//	УспешноеЗавершение=Почта.УспешноеЗавершение(); 
		//	Если УспешноеЗавершение=0 Тогда
		//		Сообщить("Ошибка при приеме почты !");
		//	    Возврат ;//произошла какая-то ошибка
		//	КонецЕсли;
		
		ОчиститьКаталог(ПутьКБазеПриЗагрузке,"*.mme");
		Иначе
		Сообщить("В почтовом ящике нет новых писем.");
		КонецЕсли;
		Почта.Отключиться();
		Почта=0;        
	КонецЕсли;
	
	
	Если ВстроеннаяАрхивация=1 Тогда
		//выполняем разархивирование пакетов
		ФС.УстТекКаталог(ПутьКБазеПриЗагрузке);
		//подготовка имен и ключей ...
		ИмяАрхива=База.ПрефиксАрхиваЗагрузки;
		ИмяАрхива=Сокрлп(ИмяАрхива)+"*.arj";
		Размер=" -v";
		Пароль="";
		Если Сокрлп(База.ПарольАрхива)<>"" Тогда
			Пароль=" -g"+Сокрп(База.ПарольАрхива);
		КонецЕсли;
		
		//перенос файлов из архива
		Команда=""""+КаталогИБ()+"arj.exe"""+" e -d"+Размер+Пароль+" -y "+ИмяАрхива;
		КомандаСистемы(Команда);
		
	КонецЕсли;
	
	
	Если ПризнакПолученияMD=1 Тогда
		ФайлИсточникMD=СокрЛП(ПутьКБазеПриЗагрузке)+"\"+"1cv7.md";
		Если ФС.СуществуетФайл(ФайлИсточникMD)=1 Тогда
			Сообщить("Внимание в каталоге загрузки обнаружен новый файл конфигурации (MD-файл) !!");
		КонецЕсли;
	КонецЕсли;
	
	Пакет=СоздатьОбъект("Microsoft.XMLDOM");
	
	СписокИзмененияИД=СоздатьОбъект("СписокЗначений");
	СписокПроводимыхДокументов=СоздатьОбъект("СписокЗначений");
	Если ИспользоватьТранзакцию=1 Тогда
		НачатьТранзакцию();//данные
	КонецЕсли;
	//кучу пакетов находящихся в каталоге загрузки загружаем в несколько циклов
	//поэтому вводим переменную - с какого номера повторять загрузку при след-м цикле
	//т.е. если в пакете не встретилось незагруженных ссылок и небыло таких же перед ним, то
	//след-й цикл начинаем как минимум со следующего
	Если База.IDD="0000000" Тогда
		ИмяФ=Сокрлп(ФС.НайтиПервыйФайл(СокрЛП(ПутьКБазеПриЗагрузке)+"\*.xml"));
		Если ИмяФ="" Тогда
			Перейти ~ОтменаЗагрузки;
		КонецЕсли;
		//есть какой-то текстовый файл
		ИмяТекстовогоФайла=КаталогВременныхФайлов()+"packet.tmp";
		//копируем в temp-каталог
		ФС.УдалитьФайл(ИмяТекстовогоФайла);
		ФС.КопироватьФайл(ИмяФ,ИмяТекстовогоФайла,0);
	Иначе
		ИмяТекстовогоФайла=СокрЛП(ПутьКБазеПриЗагрузке)+"\"+СокрЛП(Строка((НомерПакетаЗагрузки)))+".xml";
	КонецЕсли;
	
	Если ОбработкаПримера=1 Тогда
		ИмяТекстовогоФайла=СокрЛП(ПутьКБазеПриЗагрузке)+"\sample.xml";
		НомерПакетаЗагрузки="sample.xml";
	КонецЕсли;
	
	Если ФС.СуществуетФайл(ИмяТекстовогоФайла)=0 Тогда
		Перейти ~ОтменаЗагрузки;
	КонецЕсли;
	
	Пока ФС.СуществуетФайл(ИмяТекстовогоФайла)=1 Цикл
		Если ИспользоватьТранзакцию=0 Тогда
			НачатьТранзакцию();//данные
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации("Начало загрузки пакета № "+НомерПакетаЗагрузки,"Загрузка",База.Наименование);
		М_Сообщить("Загружается пакет "+ИмяТекстовогоФайла);
		Состояние("Загружается документ "+ИмяТекстовогоФайла);
		Пакет.resolveExternals=0;
		Пакет.load(ИмяТекстовогоФайла);
		
		ЗагрузитьТело(База,НомерПакетаЗагрузки);
		
		//Если НомерПодтвержденногоПакета>Число(База.НомерПодтвержденногоПакетаЗагрузки) Тогда
		//	Если Подтверждение(База,НомерПодтвержденногоПакета)=0 Тогда
		//		М_Сообщить("Произошла ошибка при попытке подтвердить пакет № "+НомерПодтвержденногоПакетаЗагрузки+"
		//		|Попробуйте произвести устное подтверждение перейдя на закладку ""Подтверждение""","I");
		//	Иначе
		//		М_Сообщить("Получено подтверждение о выгр пакете "+НомерПодтвержденногоПакета);
		//	КонецЕсли;
		//КонецЕсли;
		
		ЗаписьЖурналаРегистрации("Окончание загрузки пакета № "+НомерПакетаЗагрузки,"Загрузка",База.Наименование);
		
		//Если Рез="Подтверждение" Тогда
		//	ФС.УдалитьФайл(ИмяТекстовогоФайла);
		//	ПришлоТолькоПодтверждение=1;//это пришло только подтверждение, поэтому
		//	//если в нашей базе изменений нет, то больше ничего не выгружаем !!!
		//	ЗаписьЖурналаРегистрации("Подтверждение о доставке в пакете № "+НомерПакетаЗагрузки,"Загрузка",База.Наименование);
		//	Если ИспользоватьТранзакцию=0 Тогда
		//		ЗафиксироватьТранзакцию();
		//	КонецЕсли;
		//	Продолжить;
		//КонецЕсли;
		
		//увеличиваем счетчик загр пакетов
		Если Число(НомерПакетаЗагрузки)>0 Тогда
			НомерПакетаЗагрузки=Число(НомерПакетаЗагрузки)+1;
		КонецЕсли;
		ИмяТекстовогоФайла=СокрЛП(ПутьКБазеПриЗагрузке)+"\"+СокрЛП(Строка(Число(НомерПакетаЗагрузки)))+".xml";
		Если ИспользоватьТранзакцию=0 Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		Если ОбработкаПримера=1 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;//по пакетам
	
	Если Число(НомерПакетаЗагрузки)>0 Тогда
	//записываем в справочник номер загружаемого пакета
	Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
	Спр.НайтиЭлемент(База);
	Спр.НомерПакетаЗагрузки=НомерПакетаЗагрузки;
	Спр.Записать();
	КонецЕсли;
	Если ИспользоватьТранзакцию=1 Тогда
		Попытка
			ЗафиксироватьТранзакцию();
		Исключение
			НомерПакетаЗагрузки=Спр.НомерПакетаЗагрузки;
			Сообщить("Ошибка загрузки пакетов с данными из базы " +Спр.Наименование);
			НомерПакетаЗагрузки=База.НомерПакетаЗагрузки;
			Перейти ~ОтменаЗагрузки;
		КонецПопытки;
	КонецЕсли;
	
	//восстанавливаем ИД-коды объектов
	Стр_ИД="";
	НеРегистрироватьИзмененияМОД=0;
	Для А=1 по СписокИзмененияИД.РазмерСписка() Цикл
		Зн=СписокИзмененияИД.ПолучитьЗначение(А,Стр_ИД);
		Если ТипЗначения(Зн)=11 Тогда
			Спр=СоздатьОбъект("Справочник."+Зн.Вид());
			Спр.НайтиЭлемент(Зн);
			Если Спр.Выбран()=1 Тогда
				Спр.IDD=Стр_ИД;
				Спр.Записать();
			КонецЕсли;
			ПриИзмененииОбъекта(Спр.ТекущийЭлемент(),Спр.ТекущийЭлемент(),РабочаяДата(),1);//регистрируем для миграции во все базы - в т.ч. и обратно
		ИначеЕсли ТипЗначения(Зн)=12 Тогда
			Док=СоздатьОбъект("Документ");
			Док.НайтиДокумент(Зн);
			Если Док.Выбран()=1 Тогда
				Док.IDD=Стр_ИД;
				Док.Записать();
			КонецЕсли;
			ПриИзмененииОбъекта(Док.ТекущийДокумент(),Док.ТекущийДокумент(),Док.ДатаДок,1);
		КонецЕсли;
	КонецЦикла;
	СписокИзмененияИД=0; 
	
	
	//теперь без транзакции проводим документы (у которых стоит признак не загружать на движения , а проводить)
	Если СписокПроводимыхДокументов.РазмерСписка()>0 Тогда
		М_Сообщить("Проводим загруженные документы");
	КонецЕсли;
	
	СписокПроводимыхДокументов.Сортировать(0,1);
	Для А=1 по СписокПроводимыхДокументов.РазмерСписка() Цикл
		НеРегистрироватьИзмененияМОД=1;
		ПроведениеПоАлгоритмуМОД=0;
		Док=СоздатьОбъект("Документ");
		Док.НайтиДокумент(СписокПроводимыхДокументов.ПолучитьЗначение(А));
		М_Сообщить("Проводится документ "+Док.ТекущийДокумент());
		Попытка
			Док.Провести();
		Исключение
			Сообщить("Ошибка проведения документа "+Док.ТекущийДокумент(),"!");
			НеРегистрироватьИзмененияМОД=0;
			ПриИзмененииОбъекта(Док.ТекущийДокумент(),Док.ТекущийДокумент(),Док.ДатаДок,1);
			НеРегистрироватьИзмененияМОД=1;
			Сообщить("Признак непроведенного документа будет отправлен в периферийную базу");
		КонецПопытки;
	КонецЦикла;
	НеРегистрироватьИзмененияМОД=0;
	
	//удаляем файл, который только что загружали
	Если База.IDD="0000000" Тогда
		ИмяФ=Сокрлп(ФС.НайтиПервыйФайл(СокрЛП(ПутьКБазеПриЗагрузке)+"\*.xml"));
		ФС.УдалитьФайл(ИмяФ);
	КонецЕсли;
	
	
	М_Сообщить("Загрузка данных завершена !");
	Возврат;
	
	~ОтменаЗагрузки:
	Попытка
		ОтменитьТранзакцию();
	Исключение
	КонецПопытки;
	Пакет=0;
	М_Сообщить("Загрузка отменена, данные не изменялись !");
КонецПроцедуры

//_____________________________________________________________________________

Функция Обмен()
	ТекущаяБаза=База;
	Рез=1;
	Если ТекущаяБаза.Выбран()=1 Тогда
		Если ТекущаяБаза.ЭтоГруппа()=0 Тогда//в одну базу
			Если Загрузка=1 Тогда
				Загрузить();
			КонецЕсли;
			Если Выгрузка=1 Тогда
				Рез=Выгрузить();
			КонецЕсли;
		Иначе//в группу баз
			ППБ=СоздатьОбъект("Справочник.ПериферийныеБазы");
			ППБ.ИспользоватьРодителя(ТекущаяБаза);
			ППБ.ВыбратьЭлементы();
			Пока ППБ.ПолучитьЭлемент()=1 Цикл
				Если (ППБ.ЭтоГруппа()=0)  Тогда
					База=ППБ.ТекущийЭлемент();
					УстановитьБазу();
					Если Загрузка=1 Тогда
						Загрузить();
					КонецЕсли;
					
					Если Выгрузка=1 Тогда
						Рез=Выгрузить();
						Если Рез=0 Тогда
							//		    Возврат 0;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе	//во все базы
		//Если Вопрос("Вы действительно хотите произвести выгрузку во ВСЕ периферийные бызы?" +РазделительСтрок+
		//"Если нет, выберите базу выгрузки (или группу баз)",4,10)<>7 Тогда
		ППБ=СоздатьОбъект("Справочник.ПериферийныеБазы");
		ППБ.ВыбратьЭлементы();
		Пока ППБ.ПолучитьЭлемент()=1 Цикл
			Если (ППБ.ЭтоГруппа()=0)  Тогда
				База=ППБ.ТекущийЭлемент();
				УстановитьБазу();
				
				Если Загрузка=1 Тогда
					Загрузить();
				КонецЕсли;
				
				Если Выгрузка=1 Тогда
					Рез=Выгрузить();
					Если Рез=0 Тогда
						//Возврат 0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		//КонецЕсли;
	КонецЕсли;
	База=ТекущаяБаза;
	Возврат Рез;
КонецФункции

//_____________________________________________________________________________

Функция ЗакрытьДБФ()
	Если МожноЗакрывать=1 Тогда
		Форма.ИспользоватьСлой("Инфо",0);
		Если ТипЗначенияСтр(БДМОД)="XBASE" Тогда
			Если БДМОД.Открыта()=1 Тогда
				БДМОД.ЗакрытьФайл();
			КонецЕсли;
		КонецЕсли;
		Если ТипЗначенияСтр(БДУдаленийМОД)="XBASE" Тогда
			Если БДУдаленийМОД.Открыта()=1 Тогда
				БДУдаленийМОД.ЗакрытьФайл();
			КонецЕсли;
		КонецЕсли;
		Если ТипЗначенияСтр(БДПакетыМОД)="XBASE" Тогда
			Если БДПакетыМОД.Открыта()=1 Тогда
				БДПакетыМОД.ЗакрытьФайл();
			КонецЕсли;
		КонецЕсли;
	Прогрессор(0);
	КонецЕсли;
	Возврат "";
КонецФункции//ЗакрытьДБФ

//_____________________________________________________________________________

Процедура Сформировать()
	Рез=СоединитьФайлыИзмененийИУдалений();
	Если Рез=0 Тогда
		Рез=Вопрос("Продолжить выгрузку",1,10);
		Если Рез<>1 Тогда
			Возврат ;
		КонецЕсли;
	КонецЕсли;
	//транзакция .....
	ЗакрытьДБФ();
	М_Состояние("Подготовка к транзакции...");
	КопироватьФайлДБФ("tran1","_tran1");
	КопироватьФайлДБФ("tran2","_tran2");
	КопироватьФайлДБФ("tran3","_tran3");
	М_Состояние("Подготовка к транзакции закончена");
	
	Если Обмен()=1 Тогда
		М_Состояние("Зафиксирование транзакции...");
		ЗакрытьДБФ();
		КопироватьФайлДБФ("_tran1","tran1");
		КопироватьФайлДБФ("_tran2","tran2");
		КопироватьФайлДБФ("_tran3","tran3");
	КонецЕсли;
	ЗакрытьДБФ();
	
	Фс.УдалитьФайл(КаталогБазыДанных()+"_tran3.cdx");
	Фс.УдалитьФайл(КаталогБазыДанных()+"_tran3.dbf");
	Фс.УдалитьФайл(КаталогБазыДанных()+"_tran2.cdx");
	Фс.УдалитьФайл(КаталогБазыДанных()+"_tran2.dbf");
	Фс.УдалитьФайл(КаталогБазыДанных()+"_tran1.cdx");
	Фс.УдалитьФайл(КаталогБазыДанных()+"_tran1.dbf");
	//эти файлы на выходе всегда пустые: - не всегда !!!!!
	//		Фс.УдалитьФайл(КаталогБазыДанных()+"tran1.cdx");
	//		Фс.УдалитьФайл(КаталогБазыДанных()+"tran1.dbf");
	
	
	ТаблицаЗагрузки=0;
	СписокЗагрузки=0;
	ТаблицаПравил=0;
	СписокПравил=0;
	СписокРегистровПроведения=0;
	СписокОперацийПроведения=0;
	ТаблицаСправочниковПроведения=0;
	
КонецПроцедуры //Сформировать

//_____________________________________________________________________________
//для выборочной выгрузки:

Процедура ОбъектыВыборочнойВыгрузки()
	
	ТипОбъектаВыборочно.ДобавитьЗначение("Константы");
	ТипОбъектаВыборочно.ДобавитьЗначение("Планы счетов");
	
	ТипОбъектаВыборочно.ДобавитьЗначение("Документ");
	Для ф=1 по Метаданные.Документ() Цикл
		ТипОбъектаВыборочно.ДобавитьЗначение("Документ."+Метаданные.Документ(ф).Идентификатор);
	КонецЦикла;
	
	ТипОбъектаВыборочно.ДобавитьЗначение("Справочник");
	Для ф=1 по Метаданные.Справочник() Цикл
		ТипОбъектаВыборочно.ДобавитьЗначение("Справочник."+Метаданные.Справочник(ф).Идентификатор);
		//		Справочник.ДобавитьЗначение(Метаданные.Справочник(ф).Идентификатор);
	КонецЦикла;
	//	ТипОбъектаВыборочно.Сортировать();
	
	//Ном=Число(ВосстановитьЗначение("НомерСправочникаЗаполененияПБ"));
	//Если (Ном>0)И(Ном<=Метаданные.Справочник()) Тогда
	//    Справочник.ТекущаяСтрока(Ном);
	//КонецЕсли;
КонецПроцедуры //ОбъектыВыборочнойВыгрузки





//_____________________________________________________________________________
Процедура ЗаполнитьСписокПодчиненныхСправочников();
	СписокПодчиненных=СоздатьОбъект("СписокЗначений");
	Для А=1 По Метаданные.Справочник() Цикл
		Если Метаданные.Справочник(А).Владелец.Выбран()=1 Тогда
			ИмяСпр=Метаданные.Справочник(А).Идентификатор;
			ИмяПодч=Метаданные.Справочник(А).Владелец.Идентификатор;
			СписокПодчиненных.ДобавитьЗначение(""+ИмяПодч,""+ИмяСпр);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //

//_____________________________________________________________________________


//_____________________________________________________________________________

Процедура ПриВыбореЗакладки(Ном,Значен)
	Форма.ДляНастр2.Видимость(0);
	Форма.ДляНастр3.Видимость(0);
	Форма.ИспользоватьСлой(Значен);
	Если Значен="Общие" Тогда
	ИначеЕсли Значен="Выгрузка" Тогда
		ПриУстановкеРежимаВыгрузки();
	ИначеЕсли Значен="Инициализация" Тогда
		Форма.ДляНастр3.Видимость(РасширенныйРежим);
	ИначеЕсли Значен="Подтверждение" Тогда
		Форма.СписокПакетов.Видимость(1);
		Форма.База.Видимость(1);
		Форма.бб.Видимость(1);
	ИначеЕсли Значен="Настройка" Тогда
		//		Форма.База.Видимость(1);
		Форма.ДляНастр2.Видимость(РежимНастройки);
	КонецЕсли;
КонецПроцедуры

//_____________________________________________________________________________

Процедура ДопСлойВыгрузки()
	Форма.ИспользоватьСлой("ВыгрузкаДоп");
КонецПроцедуры //ДопСлойВыгрузки()

//_____________________________________________________________________________

Процедура СлойРепликация()
	Форма.ИспользоватьСлой("Репликация");
КонецПроцедуры
//_____________________________________________________________________________

Процедура НазадСлойРепликация()
	Форма.ИспользоватьСлой("Инициализация");
КонецПроцедуры
//_____________________________________________________________________________

Процедура НазадИзДопСлойВыгрузки()
	Форма.ИспользоватьСлой("Выгрузка");
	ПриУстановкеРежимаВыгрузки();
КонецПроцедуры

//_____________________________________________________________________________

Процедура ДопСлойНастройки()
	Форма.ИспользоватьСлой("Доп");
КонецПроцедуры

//_____________________________________________________________________________

Процедура НазадИзДопСлойНастройки()
	Форма.ИспользоватьСлой("Настройка");
КонецПроцедуры



Процедура ОбработкаПодбора(об,конт)
	Перем МойIDD;
	об1=СоздатьОбъект(ТипЗначенияСтр(Об)+"."+Об.Вид());
	Если ТипЗначенияСтр(Об)="Документ" Тогда
		Об1.НайтиДокумент(Об.ТекущийДокумент());
	Иначе
		Об1.НайтиЭлемент(Об.ТекущийЭлемент());
	КонецЕсли;
	МойIDD=Сокрлп(Об.IDD);
	ВвестиСтроку(МойIDD,"Введите новый IDD",30,);
	Если МойIDD<>Об.IDD Тогда
		Об1.IDD=Сокрлп(МойIDD);
		ОБ1.Записать();
	КонецЕсли;
КонецПроцедуры

//_____________________________________________________________________________

Процедура ОткрытьИзменениеОбъектов()
	Перем Объект;
	Перем Объект1;
	Сз=СоздатьОбъект("СписокЗначений");
	Сз.ДобавитьЗначение("Документ","Документ");
	Сз.ДобавитьЗначение("Справочник","Справочник");
	Если Сз.ВыбратьЗначение(Объект,"",,,1)=1 Тогда
		Сз.УдалитьВсе();
		Если Объект="Документ" Тогда
			Для ы=1 по Метаданные.Документ() Цикл
				Сз.ДобавитьЗначение(Метаданные.Документ(ы).Идентификатор,Метаданные.Документ(ы).Идентификатор);
			КонецЦикла;
		Иначе
			Для ы=1 по Метаданные.Справочник() Цикл
				Сз.ДобавитьЗначение(Метаданные.Справочник(ы).Идентификатор,Метаданные.Справочник(ы).Идентификатор);
			КонецЦикла;
		КонецЕсли;
		Если Сз.ВыбратьЗначение(Объект1,"",,,)=1 Тогда
			ОткрытьПодбор(Объект+"."+Объект1,,Конт,,	);
			Если Объект="Справочник" Тогда
				Конт.ВыборГруппы(1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


//_____________________________________________________________________________
//присвоение всем объектам НАШЕЙ базы своего IDD
Процедура Инициализация()
	Если Число(IDD)<>0 Тогда
		Форма.IDD.Доступность(0);
	Иначе
		Предупреждение("Присвойте базе IDD !",10);
		Возврат;
	КонецЕсли;
	
	Если ПерваяИнициализация<>1 Тогда
		Если Вопрос("Вы действительно хотите выполнить инициализацию базы ?",4,10)=7 Тогда
			Возврат;
		КонецЕсли;
		
		Если ФлНовый=1 Тогда
			Если Вопрос("ВНИМАНИЕ ВЫ ВЫБРАЛИ РЕЖИМ УСТАНОВЛЕНИЯ НОВЫХ IDD ДЛЯ ВСЕХ ЭЛЕМЕНТОВ ! Отменить ?",4,20)<>7 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	//******* для прогрессора
	ЧислоДат=0;
	ЧислоДата1=0;
	Док=СоздатьОбъект("Документ");
	Рез=Док.ВыбратьДокументы();
	Если Рез<>0 Тогда
		Док.ПолучитьДокумент();
		ЧислоДата1=Число(Док.ДатаДок);
		Док=СоздатьОбъект("Документ");
		Док.ОбратныйПорядок(1);
		Рез=Док.ВыбратьДокументы();
		Док.ПолучитьДокумент();
		ЧислоДата2=Число(Док.ДатаДок);
		ЧислоДат=ЧислоДата2-ЧислоДата1;
	КонецЕсли;
	ЧислоСпр=10*Метаданные.Справочник();
	Прогрессор(0,ЧислоДат+ЧислоСпр,0,"Инициализация");
	
	КолПрогрессора=1;	//******* для прогрессора
	
	Константа_УникальныйIDD=Число(Константа.УникальныйIDD)+1;
	Константа_IDD=Прав("0000000"+СокрЛП(Константа.IDD),7);
	
	
	Если РежимИниц=1 Тогда
	Попытка
		Для Ц=1 по ПланыСчетов.КоличествоЗначений() Цикл
			Об=СоздатьОбъект("Счет");
			Об.ИспользоватьПланСчетов(ПланыСчетов.ЗначениеПоНомеру(Ц));
			Об.ВыбратьСчета();
			Пока Об.ПолучитьСчет()>0 Цикл
				Счет=Об.ТекущийСчет();
				ПриИзмененииОбъекта(Счет,Счет, РабочаяДата());					
			КонецЦикла;
		КонецЦикла;
	Исключение
	КонецПопытки;
	КонецЕсли;
	
	
	//фиксируем транзакцию через каждые 500 документов
	КолДоков=0;
	КолДоковОбработано=0;
	НачатьТранзакцию();
	Док=СоздатьОбъект("Документ");
	М_Состояние("Обработка документов...");
	Док.ВыбратьДокументы(,);
	Пока Док.ПолучитьДокумент()>0 Цикл
		КолПрогрессора=Число(Док.ДатаДок)-ЧислоДата1+1;
		Прогрессор(КолПрогрессора);//**************** прогрессор
		Если (Сокрлп(Док.IDD)="")ИЛИ(ФлНовый=1) Тогда //т.е. изменяем только пустые IDD !!//надо бы потом сделать проверку на уникальность ...
			Константа_УникальныйIDD=Константа_УникальныйIDD+1;
			Док.IDD=Сокрлп(Константа_IDD+прав("0000000000"+Константа_УникальныйIDD,10));
			//Если Прав(Сокрлп(Док.НомерДок),5)="00000" Тогда//ошибка номера
			//Док.УстановитьНовыйНомер();
			//КонецЕсли;
			Попытка
				Док.Записать();
			Исключение
				Сообщить("Ошибка в "+Док.ТекущийДокумент()+" номер док="+Док.НомерДок+"! ...","!");
			КонецПопытки;
			КолДоков=КолДоков+1;
			Если КолДоков>=500 Тогда
				М_Состояние("Фиксируем транзакцию ");
				ЗафиксироватьТранзакцию();
				КолДоковОбработано=КолДоковОбработано+КолДоков;
				М_Состояние("Обработано документов :"+КолДоковОбработано+" "+Док.ДатаДок);
				НачатьТранзакцию();
				КолДоков=0;
			КонецЕсли;
			
		КонецЕсли;
		Если РежимИниц=1 Тогда
			ПриИзмененииОбъекта(Док,Док,Док.ДатаДок,0);
		КонецЕсли;
	КонецЦикла;
	Константа.УникальныйIDD=Строка(Число(Константа_УникальныйIDD)+1);
	ЗафиксироватьТранзакцию();
	
	Для ы=1 по Метаданные.Справочник() Цикл
		НачатьТранзакцию();
		КолПрогрессора=КолПрогрессора+10;
		Прогрессор(КолПрогрессора);//**************** прогрессор
		Ст=Метаданные.Справочник(ы).Идентификатор;
		Если (ст<>"ПравилаЗагрузки") и (ст<>"ПравилаВыгрузки") и (ст<>"ПериферийныеБазы") Тогда
			Спр=СоздатьОбъект("Справочник."+Ст);
			М_Состояние("Обработка "+Ст);
			Спр.ВыбратьЭлементы(0);
			Пока Спр.ПолучитьЭлемент()>0 Цикл
				Если (Сокрлп(Спр.IDD)="")ИЛИ(ФлНовый=1) Тогда
					Константа_УникальныйIDD=Константа_УникальныйIDD+1;
					Спр.IDD=Сокрлп(Константа_IDD+прав("0000000000"+Константа_УникальныйIDD,10));
					Попытка
						Спр.Записать();
					Исключение
						Сообщить("Ошибка на : "+Спр.Вид()+", владелец "+Спр.Владелец+", элемент="+Спр.ТекущийЭлемент()+",  код="+Спр.Код+" . Внимание: найдите данный элемент справочника вручную и измените код !!");
					КонецПопытки;
				КонецЕсли;
				
				Если РежимИниц=1 Тогда
						ПриИзмененииОбъекта(Спр,Спр,'01.01.1976',0);//для периодических реквизитов надо задавать период выгрузки
						ПриИзмененииОбъекта(Спр,Спр,РабочаяДата(),0);//у нас период равен: 01.01.1976 - рабочая дата
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		Константа.УникальныйIDD=Строка(Число(Константа_УникальныйIDD)+1);
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
	
	
	Если РежимИниц=1 Тогда
		Прогрессор(0,Метаданные.Константа(),0);//**************** прогрессор
		НачатьТранзакцию();
		Для А=1 по Метаданные.Константа() Цикл
			Прогрессор(А);
			ИмяКонстанты=Метаданные.Константа(А).Идентификатор;
			ПриИзмененииОбъекта(ИмяКонстанты, ИмяКонстанты,'01.01.1976');
			ПриИзмененииОбъекта(ИмяКонстанты, ИмяКонстанты,РабочаяДата());
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		Прогрессор(0);
	КонецЕсли;
	
	IDD=Константа.IDD;
	Форма.IDD.Доступность(0);
	//	Прогрессор(0);
	Если ТипЗначенияСтр(БДМОД)="XBASE" Тогда
		Если БДМОД.Открыта()=1 Тогда
			БДМОД.ЗакрытьФайл();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//_____________________________________________________________________________

Процедура ПриЗакрытии()
	Если ОткрытьДругуюФорму=1 Тогда
		Спис=СоздатьОбъект("СписокЗначений"); 
		Спис.ДобавитьЗначение(База,"База");
		Спис.ДобавитьЗначение("Ручное открытие","Команда");
//		ОткрытьФорму("Обработка",Спис,КаталогИБ()+"Extforms\ОбменДанными.ert");
		ОткрытьФорму("Обработка.ОбменДанными",Спис);
	КонецЕсли;
КонецПроцедуры //ПриЗакрытии


//_____________________________________________________________________________
Процедура ВыбратьФайлЗагрузки()
	ПЕрем Каталог,ИмяФайла,Номер;
	Каталог=ПутьКБазеПриЗагрузке;
	ИмяФайла=Строка(НомерПакетаЗагрузки)+".xml";
	ФС.ВыбратьФайл(0,ИмяФайла,Каталог,"Выберите файл пакета загрузки","Менеджер обмена данными(*.mod)|*.mod;*.xml","*.mod");
	Каталог=ПутьКБазеПриЗагрузке;
	Если ФС.СуществуетФайл(Каталог+"\"+ИмяФайла)=1 Тогда
		НомерПакетаЗагрузки=СтрЗаменить(ИмяФайла,".xml","");
	КонецЕсли;
КонецПроцедуры //ВыбратьФайлЗагрузки
//_____________________________________________________________________________



Процедура ИсправитьИДБазы()
	СписокИД=СоздатьОбъект("СписокЗначений");
	СписокОбъектов=СоздатьОбъект("СписокЗначений");
	Для А=1 по Метаданные.Справочник() Цикл
		Имя=Метаданные.Справочник(А).Идентификатор;
		М_Состояние("Анализ справочников "+Имя);
		Если Имя<>"ПериферийныеБазы" Тогда
			Спр=СоздатьОбъект("Справочник."+Имя);
			Спр.ВыбратьЭлементы();
			
			Пока Спр.ПолучитьЭлемент()=1 Цикл
				Если Сокрлп(Спр.IDD)="" Тогда //у объекта пустой IDD - надо его присвоить
					СписокОбъектов.ДобавитьЗначение(Спр.ТекущийЭлемент());
					Продолжить;
				КонецЕсли;
				ИД=Спр.IDD;
				Если СписокИД.НайтиЗначение(ИД)<>0 Тогда //такой объект в списке уже есть - значит налицо повторение IDD
					СписокОбъектов.ДобавитьЗначение(Спр.ТекущийЭлемент());
				Иначе//пока еще нет в списке такого IDD
					СписокИД.ДобавитьЗначение(ИД);
				КонецЕсли;  
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	
	
	М_Состояние("Анализ документов");
	СисокДок=СоздатьОбъект("СписокЗначений");
	
	
	Док=СоздатьОбъект("Документ");
	Док.ВыбратьДокументы(,);
	Пока Док.ПолучитьДокумент()>0 Цикл
		Если Сокрлп(Док.IDD)="" Тогда //у объекта пустой IDD - надо его присвоить
			СписокОбъектов.ДобавитьЗначение(Док.ТекущийДокумент());
			Продолжить;
		КонецЕсли;
		ИД=Док.IDD;
		Если СписокИД.НайтиЗначение(ИД)<>0 Тогда //такой объект в списке уже есть - значит налицо повторение IDD
			СписокОбъектов.ДобавитьЗначение(Док.ТекущийДокумент());
		Иначе//пока еще нет в списке такого IDD
			СписокИД.ДобавитьЗначение(ИД);
		КонецЕсли;  
	КонецЦикла;
	СписокИД=0;
	
	
	
	М_Состояние("Изменение IDD у объектов");
	КолОбъектов=0;
	НачатьТранзакцию();
	Док=СоздатьОбъект("Документ");
	Для А=1 По СписокОбъектов.РазмерСписка() Цикл
		Объект=СписокОбъектов.ПолучитьЗначение(А);
		Если ТипЗначения(Объект)=11 Тогда//справочник
			Спр=СоздатьОбъект("Справочник."+Объект.Вид());
			Спр.НайтиЭлемент(Объект);
			Сообщить("Установлен IDD на элемент "+Спр.Вид()+" "+Спр.Наименование+", код="+Спр.Код);
			Об=Спр;
		Иначе //12 - документ
			Док.НайтиДокумент(Объект);
			Сообщить("Установлен IDD на документ "+Док.Вид()+" № "+Док.НомерДок+" от "+Док.ДатаДок);
			Об=Док;
		КонецЕсли;
		
		Константа.УникальныйIDD=Число(Константа.УникальныйIDD)+1;
		Об.IDD=Прав("0000000"+СокрЛП(Константа.IDD),7)+прав("0000000000"+СокрЛП(Константа.УникальныйIDD),10);
		Об.Записать();
		
		
		
		
		//фиксируем транзакцию через каждые 1000 объектов
		КолОбъектов=КолОбъектов+1;
		Если КолОбъектов>=1000 Тогда
			М_Состояние("Фиксируем транзакцию ");
			ЗафиксироватьТранзакцию();
			М_Состояние("Обработано объектов :"+А);
			НачатьТранзакцию();
			КолОбъектов=0;
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры



Процедура НайтиПоИДД()
	Стр=ВосстановитьЗначение("ДляПоискаПоИД");
	
	Если СтрДлина(Стр)<>17 Тогда
		Стр="0000000000000000000";
	КонецЕсли;
	
	Если ВвестиСтроку(Стр,"Введите IDD ",17)=0 Тогда
		Возврат;    
	КонецЕсли;
	
	СохранитьЗначение("ДляПоискаПоИД",Стр);
	Ном=0;
	Таб=СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Таблица");
	Таб.ВывестиСекцию("Отчет");
	
	Нашли=0;
	Спр=СоздатьОбъект("Документ");
	Рез=Спр.ВыбратьПоЗначению(,,"IDD",стр);
	Пока Спр.ПолучитьДокумент()=1 Цикл
		Если ДублирIDD=0 Тогда
			ОткрытьФорму(Спр.ТекущийДокумент());
		Иначе
			Ном=Ном+1;
			ЧтоТо=Спр.ТекущийДокумент();
			Таб.ВывестиСекцию("Строка");
		КонецЕсли;
		Нашли=1;
	КонецЦикла;
	
	Для ы=1 по Метаданные.Справочник() Цикл
		Имя=Метаданные.Справочник(ы).Идентификатор;
		Если Имя="ПериферийныеБазы" Тогда
			Продолжить;
		КонецЕсли;
		Спр=СоздатьОбъект("Справочник."+Имя);
		СпрВыбор=СоздатьОбъект("Справочник."+Имя);
		Попытка
			Спр.ВыбратьЭлементыПоРеквизиту("IDD",стр,0,0);
		Исключение
			Сообщить("Нет реквизита IDD у справочника "+Имя);
		КонецПопытки;
		Пока Спр.ПолучитьЭлемент()=1 Цикл
			Если ДублирIDD=0 Тогда
				ОткрытьФорму(Спр.ТекущийЭлемент());
				//СпрВыбор.НайтиЭлемент(Спр.ТекущийЭлемент());
				//Если Спр.Владелец.Выбран()=1 Тогда
				//Спр.ИспользоватьВладельца(Спр.Владелец);
				//КонецЕсли;
				//СпрВыбор.Выбрать("Найденный элемент "+Спр.Наименование+" (IDD="+Стр+")","Привет !!");
			Иначе
				Ном=Ном+1;
				ЧтоТо=Спр.ТекущийЭлемент();
				Таб.ВывестиСекцию("Строка");
			КонецЕсли;
			Нашли=1;
		КонецЦикла;
	КонецЦикла;
	
	Если Нашли=0 Тогда
		Предупреждение("Элемента с IDD = "+Стр+" нет !",10);
		Возврат;
	КонецЕсли;
	
	
	Если ДублирIDD=1 Тогда
		Таб.ТолькоПросмотр(1);
		Таб.Опции(0,0,0,0,"ПараметрыОтчМенеджераIDD");
		Таб.Показать("IDD Объектов");
	КонецЕсли;
	
КонецПроцедуры //НайтиПоИДД
//_____________________________________________________________________________


Процедура ОбработкаЯчейкиТаблицы(Объект, СтандартнаяОбработка, Таблица)
	СтандартнаяОбработка = 0;
	ОбработкаПодбора(Объект,"");
КонецПроцедуры




Процедура ПриЗаписиКонстанты(Имя, Значение);
	Если РасширенныйРежим=1 Тогда
		Если Имя="ПериодРепликацииМОД" Тогда
			//		ОбработкаОжидания("ЗагрузкаПакетовМОД",Значение);
			ОбработкаОжидания("РепликацияМОД",Значение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры




//_____________________________________________________________________________








//_____________________________________________________________________________
Процедура ОбработкаВводаIDD()
	ИДНашейБазы=Число(IDD);
	ПерваяИнициализация=1;
	Если Число(ИДНашейБазы)=0 Тогда
		IDD="";
		Предупреждение("Неправильно введен номер базы !",10);
	Иначе
		Константа.IDD=Прав("0000000"+ИДНашейБазы,7);
	КонецЕсли;
КонецПроцедуры //ОбработкаВводаIDD



//_____________________________________________________________________________

Процедура ВыборФайла(Имя)
	Если ФС.ВыбратьФайл(1,Имя,КаталогДБФ,"Выбери файл ДБФ !","Файлы Менеджера|tran*.dbf|*.dbf|*.dbf|Все файлы(*.*)|*.*","")=0 Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры




//************************************************************************************
//Функции, которые вызываются при интерпретации выражений
//************************************************************************************
//_____________________________________________________________________________
//Назначение: Присвоить глобальной переменной (в рамках обработки) переданной значение
//Возвращает пустую строку
Функция Получить(Выражение) 
глВыражение=Выражение;
Возврат "";    
КонецФункции //Получить


//_____________________________________________________________________________
//Назначение:
//вернуть заданный реквизит их заданонго номера строки документа. 
//Часто применяется при конвертации табличной части документа в шапочную.
Функция ПолучитьРеквизитИзСтрокиДокумента(Докум,НомерСтроки,Реквизит)
	Док = СоздатьОбъект("Документ");
	Док.НайтиДокумент(Докум.ТекущийДокумент());
	Если Док.Выбран() > 0 Тогда
		Если Док.ПолучитьСтрокуПоНомеру(НомерСтроки) = 1 Тогда
			Рез = Док.ПолучитьАтрибут(Реквизит);
			Возврат Рез;
		Иначе
			Возврат "";
		КонецЕсли;	
	Иначе
		Возврат "";
	КонецЕсли;	
КонецФункции	

//_____________________________________________________________________________
//Назначение:
//найти элемент справочника заданного вида по заданному имени
Функция НайтиСпр(Вид,Имя,Режим=0,Владелец=0,Родитель=0,Создавать=0,ЭтоГруппа=0)
	Перем Спр;
	Спр=СоздатьОбъект("Справочник."+Вид);
	Если Владелец<>0 Тогда
		Спр.ИспользоватьВладельца(Владелец);
	КонецЕсли;
	Рез=Спр.НайтиПоНаименованию(Имя,Режим,1);
	Если Рез=1 Тогда
	    Если Спр.ЭтоГруппа()<>ЭтоГруппа Тогда
	        Рез=0;
	    КонецЕсли;
	КонецЕсли;
	Если Рез=1 Тогда 
		Возврат Спр.ТекущийЭлемент();
	Иначе
		Если Создавать=1 Тогда
			Подчиненность=0;
			Если ЭтоГруппа=0 Тогда
			глСоздатьНовыйОбъект(Спр);
			Иначе
			глСоздатьНовуюГруппу(Спр);
			КонецЕсли;
			Если Владелец<>0 Тогда
				Спр.Владелец=Владелец;
				Подчиненность=1;
			КонецЕсли;
			Если Родитель<>0 Тогда
				Спр.Родитель=Родитель;
			КонецЕсли;
			Мета=Метаданные.Справочник(Вид);
			Спр.Наименование=Имя;
			Спр.Код=СоздатьНовыйКод(Вид,Спр,Подчиненность,Мета);
			Спр.IDD=ПолучитьУникальныйIDD();
			Спр.Записать();
			М_Сообщить("Создан новый справочник "+Вид+"  "+Имя+",  "+Спр.Код);
			Возврат Спр.ТекущийЭлемент();
		Иначе
			Возврат "";
		КонецЕсли;
	    
	КонецЕсли;
КонецФункции

//_____________________________________________________________________________
//Назначение:
//Найти справочник заданного вида по ИД коду
Функция НайтиСпрПоИД(Вид,Спр_ИД)
	Перем Спр;
	Спр=СоздатьОбъект("Справочник."+Вид);
	Если Спр.НайтиПоРеквизиту("IDD",Спр_ИД,1)=1 Тогда
			Возврат Спр.ТекущийЭлемент();
	КонецЕсли;
	Возврат "";
КонецФункции

//_____________________________________________________________________________
//Назначение:
//Найти справочник заданного вида по ИД коду
Функция СпрПоИД(Вид,Спр_ИД)
	Возврат НайтиСпрПоИД(Вид,Спр_ИД);
КонецФункции


//_____________________________________________________________________________
//Назначение:
//найти справочник заданного вида, у которого реквизит с именем Реквизит имеет значение 
//Значение. Если задан владелец, то поиск производится внутри подчинения. 
//Если задана дата, то для периодических реквизитов значение ищется на дату ДатаЗначения 
Функция СпрПоРекв(Вид,Реквизит,Значение,Владелец=0,ДатаЗначения=0)
	Перем Спр;
	Спр=СоздатьОбъект("Справочник."+Вид);
	Если Владелец<>0 Тогда
		Попытка
		Спр.ИспользоватьВладельца(Владелец.ТекущийЭлемент());
		Исключение
		Спр.ИспользоватьВладельца(Владелец);
		КонецПопытки;
	КонецЕсли;
	Если ДатаЗначения=0 Тогда
	    Спр.ИспользоватьДату(РабочаяДата());
	Иначе
	    Спр.ИспользоватьДату(ДатаЗначения);
	КонецЕсли;
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()=1 Цикл
	    Если Спр.ПолучитьАтрибут(Реквизит)=Значение Тогда
	        Возврат Спр.ТекущийЭлемент();
	    КонецЕсли;
	КонецЦикла;
	Возврат "";
КонецФункции 


//_____________________________________________________________________________
//Назначение:
//присвоить переменной А, передаваемое по ссылке значение переменной Б,
//передаваемое по значению.
Функция Присвоить(А,Знач Б)
	А=Б;
	Возврат "";
КонецФункции

//_____________________________________________________________________________
//Назначение:
//поменять местами значения переменных
Функция Поменять(А,Б)
    Перем С;
	С=А;А=Б;Б=С;
	Возврат "";
КонецФункции //Поменять




//_____________________________________________________________________________
//Назначение:
//Вернуть итог по колонке таблицы документа,
//передаваемое по значению: имя колонки табличной части (реквизита)
Функция Итог(Док,Реквизит)
	Таб="";
	Док.ВыгрузитьТабличнуюЧасть(Таб,Реквизит);
	Возврат Таб.Итог(Реквизит);
КонецФункции

//************************************************************************************
//************************************************************************************
Процедура ПриПовторномОткрытии()
	Если ПроведениеПоАлгоритмуМОД=1 Тогда
		Если ТипЗначенияСтр(Форма.Параметр)="ГрупповойКонтекст" Тогда
			ПроведениеДокумента(Форма.Параметр,МОДПерем1,МОДПерем2);
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
	Если СокрЛП(Форма.Параметр)<>"" Тогда
		Если ТипЗначения(Форма.Параметр)<>11 Тогда
			//т.к. форма была открыта пользователем, то запоминаем значения элементов,
			//чтобы потом можно было их восстановить
			_Ном=ТипОбъектаВыборочно.ТекущаяСтрока();
			_РежимВыгрузки=РежимВыгрузки;
			_База=База;
			_ОбъектВыборочно=ОбъектВыборочно;
			_Выгрузка=Выгрузка;
			_Загрузка=Загрузка;
			База=Форма.Параметр.База;
			УстановитьБазу();
			РежимВыгрузки=3;
			Выгрузка=1;
			ТипОбъектаВыборочно.УдалитьВсе();
			ТипОбъектаВыборочно.ДобавитьЗначение(ТипЗначенияСтр(Форма.Параметр.Объект)+"."+Форма.Параметр.Объект.Вид(),ТипЗначенияСтр(Форма.Параметр.Объект)+"."+Форма.Параметр.Объект.Вид());
			ТипОбъектаВыборочно.ТекущаяСтрока(1);
			Имя=ТипЗначенияСтр(Форма.Параметр.Объект);
			Форма.ОбъектВыборочно.НазначитьТип(Имя);
			ОбъектВыборочно=Форма.Параметр.Объект;
			Сформировать();
			//восстанавливаем элементы формы
			ТипОбъектаВыборочно.УдалитьВсе();
			ОбъектыВыборочнойВыгрузки();
			База=_База;
			УстановитьБазу();
			Если _Ном>0 Тогда
				Если _Ном<=ТипОбъектаВыборочно.РазмерСписка() Тогда
					ТипОбъектаВыборочно.ТекущаяСтрока(_Ном);
				КонецЕсли;
			КонецЕсли;
			РежимВыгрузки=_РежимВыгрузки;
			Имя=ТипЗначенияСтр(_ОбъектВыборочно);
			Форма.ОбъектВыборочно.НазначитьТип(Имя);
			ОбъектВыборочно=_ОбъектВыборочно;
			Выгрузка=_Выгрузка;
			Загрузка=_Загрузка;
		КонецЕсли;
		СтатусВозврата(0);//закрываем форму !!
		Возврат; //и выходим
	ИначеЕсли СокрЛП(Форма.Параметр)<>"" Тогда
	КонецЕсли;
	Исключение
	КонецПопытки;
	Если СокрЛП(Форма.Параметр)="Сформировать()" Тогда
		Сформировать();
	КонецЕсли;
КонецПроцедуры



Процедура ПриОткрытии()
	Если ПроведениеПоАлгоритмуМОД=1 Тогда
		Если ТипЗначенияСтр(Форма.Параметр)="ГрупповойКонтекст" Тогда
			ПроведениеДокумента(Форма.Параметр,МОДПерем1,МОДПерем2);
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	
	
	Попытка
		ХМЛ=СоздатьОбъект("Microsoft.XMLDOM");
		ХМЛ=0;
	Исключение
		ЗагрузитьВнешнююКомпоненту("msxml.dll");
		ХМЛ=СоздатьОбъект("Microsoft.XMLDOM");
		Предупреждение("Неудачная попытка создания объекта XMLDOM",10);
		СтатусВозврата(0);
		Возврат;
	КонецПопытки;
	


	
	Если Число(Константа.IDD)=0 Тогда//не было инициализации
		Предупреждение("Выполните инициализацию базы - закладка ""Инициализация"" !",10);
	КонецЕсли;
	
	Если Сокрлп(База.Вид())="" Тогда
		НазначитьВид(База,"ПериферийныеБазы");
	КонецЕсли;
	Форма.База.НеИзменятьВид(1);
	
	ЗаполнитьСписокПодчиненныхСправочников();
	
	//****** константы !!!!!!
	РегистрацияИзменений=Константа.РегистрацияИзменений;
	НеРегистрироватьГрИзм=Константа.НеРегистрироватьГрИзм;
	Попытка
		Если РасширенныйРежим=1 Тогда
			ПериодРепликацииМОД=Константа.ПериодРепликацииМОД;
			ИмяКомпьютераРепликацииМОД=Константа.ИмяКомпьютераРепликацииМОД;
		КонецЕсли;
	Исключение
		РасширенныйРежим=0;
	КонецПопытки;
	
	ОбработкаПримера=0;
	//******
	СписокВыборочнойВыгрузки=0;
	Если СокрЛП(Форма.Параметр)<>"" Тогда
		Если ТипЗначения(Форма.Параметр)=11 Тогда
			База=Форма.Параметр;
			ОбъектыВыборочнойВыгрузки();
			УстановитьБазу();
			Сформировать();
		ИначеЕсли ТипЗначенияСтр(Форма.Параметр)="СписокЗначений" Тогда
			Команда=Форма.Параметр.Получить("Команда");
			Если Сокрлп(Команда)="Список выгрузки" Тогда
				База=Форма.Параметр.Получить("База");
				УстановитьБазу();
				СписокВыборочнойВыгрузки=Форма.Параметр.Получить("Список");
				РежимВыгрузки=4;
				ЗнЗагрузки=Форма.Параметр.Получить("Загрузка");
				Загрузка=?(ЗнЗагрузки=1,1,0); 
				ЗнВыгрузки=Форма.Параметр.Получить("Выгрузка");
				Выгрузка=?(ЗнВыгрузки=0,0,1); //т.е. если не заданы режимы (выгрузки и/или загрузка), то только выгрузка
				ОбработкаПримера=Форма.Параметр.Получить("Пример");
				Если ОбработкаПримера=1 Тогда
				    МОДПерем1=СоздатьОбъект("СписокЗначений"); 
				КонецЕсли;
				Сформировать();
			ИначеЕсли Сокрлп(Команда)="Загрузка-Выгрузка" Тогда
				База=Форма.Параметр.Получить("База");//при таком вызове загрузка и выгрузка назначаются отдельно
				ОбъектыВыборочнойВыгрузки();
				УстановитьБазу();
				Загрузка=Форма.Параметр.Получить("Загрузка");
				Выгрузка=Форма.Параметр.Получить("Выгрузка");
				ОбработкаПримера=Форма.Параметр.Получить("Пример");
				Если ОбработкаПримера=1 Тогда
				    МОДПерем1=СоздатьОбъект("СписокЗначений"); 
				КонецЕсли;
				Сформировать();
			ИначеЕсли Сокрлп(Команда)="Ручное открытие" Тогда
				База=Форма.Параметр.Получить("База");
				Форма.IDD.Доступность(0);
				Форма.ИспользоватьЗакладки(1);
				Форма.Закладки.УдалитьВсе();
				НеобходимыеЗакладки();
				
				ОбъектыВыборочнойВыгрузки();
				УстановитьБазу();
				Возврат;
			Иначе 
				Сообщить("Недопустимая команда вызова обработки обмена данными !","I");
			КонецЕсли;
		Иначе//Если ТипЗначения(Форма.Параметр)=100 Тогда
			База=Форма.Параметр.База;
			УстановитьБазу();
			РежимВыгрузки=3;
			ТипОбъектаВыборочно.УдалитьВсе();
			ТипОбъектаВыборочно.ДобавитьЗначение(ТипЗначенияСтр(Форма.Параметр.Объект)+"."+Форма.Параметр.Объект.Вид(),ТипЗначенияСтр(Форма.Параметр.Объект)+"."+Форма.Параметр.Объект.Вид());
			ТипОбъектаВыборочно.ТекущаяСтрока(1);
			Имя=ТипЗначенияСтр(Форма.Параметр.Объект);
			Форма.ОбъектВыборочно.НазначитьТип(Имя);
			ОбъектВыборочно=Форма.Параметр.Объект;
			Сформировать();
		КонецЕсли;
		СтатусВозврата(0);//закрываем форму !!
		Возврат; //и выходим
	Иначе
		
		//некоторые манипуляции с формой ...
		Если Число(Константа.IDD)<>0 Тогда
			Форма.IDD.Доступность(0);
		Иначе
			Форма.IDD.Доступность(1);
		КонецЕсли;
		Форма.ИспользоватьЗакладки(1);
		Форма.Закладки.УдалитьВсе();
		НеобходимыеЗакладки();
		ОбъектыВыборочнойВыгрузки();
		//ЗаполнитьСписокПакетов();
		УстановитьБазу();
	КонецЕсли;
	РазрешитьРепликациюМОД=РазрешитьРепликациюМОД-1;
КонецПроцедуры //При открытии


//_____________________________________________________________________________

//_____________________________________________________________________________
Процедура КопироватьФайл(Источник,Приемник,СоздКаталог=0)
	Перем Атр,ИмяФайла;
	Если ФС.СуществуетФайл(Источник)=1 Тогда
		ФС.АтрибутыФайла(Источник,"",Атр);
		Если Сред(Атр,4,1)="1" Тогда//это каталог
			Сообщить("Каталог "+Источник);
			Если СоздКаталог=1 Тогда
				ФС.СоздатьКаталог(Приемник);
			КонецЕсли;
			ИмяФайла=ФС.НайтиПервыйФайл(Источник+"\*.*");
			Пока Сокрлп(ИмяФайла)<>"" Цикл
				Если (ИмяФайла<>".")И(ИмяФайла<>"..") Тогда
					КопироватьФайл(Источник+"\"+ИмяФайла,Приемник+"\"+ИмяФайла,1);
				КонецЕсли;
				ИмяФайла=ФС.НайтиСледующийФайл();
			КонецЦикла;
		Иначе
			Состояние("Копируется "+Источник);
			ФС.КопироватьФайл(Источник,Приемник,0);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры //КопироватьФайл

//_____________________________________________________________________________

Процедура СозданиеКопииБазы()
	Перем Каталог,Файл;
	Если Фс.СуществуетФайл(КаталогИБ()+"1Cv7.DBA")=1 Тогда
		Предупреждение("Эта функция в SQL-й версии не поддерживается",30);
		Возврат;
	КонецЕсли;
	
	Если Фс.СуществуетФайл(КаталогИБ()+"arj.exe")=0 Тогда
		Предупреждение("Для возможности выполнения этой функции в каталоге 
		|базы данных должен присутствовать файл arj.exe",30);
		Возврат;
	КонецЕсли;
	Если МонопольныйРежим()=1 Тогда
		Предупреждение("Для создания копии периферийной базы необходимо 
		|войти в программу в немонопольном режиме",10);
		Возврат;
	КонецЕсли;
	Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
	Спр.НайтиЭлемент(База);
	Если Спр.Выбрать("","Выберите базу для которой нужно создать копию !")=0 Тогда
		Возврат;
	КонецЕсли;
	Если ФС.ВыбратьФайл(1,Файл,Каталог,"Выберите файл архива для копии базы","*.arj|*.arj","*.*|*.*")=0 Тогда
		Возврат;
	КонецЕсли;
	
	ФайлАрхива=Каталог+Файл;
	//создаем специальный файл первичной загрзки IDD в константу периферийной базы
	Т=СоздатьОбъект("Текст");
	Т.ДобавитьСтроку("ID");
	Т.ДобавитьСтроку(Спр.IDD);
	ИмяФайлаМаркера=КаталогИБ()+"tran5.dbf";
	
	Т.Записать(ИмяФайлаМаркера);
	
	ФС.УдалитьФайл(ФайлАрхива);
	Попытка
		ФС.УстТекКаталог(КаталогИБ());
		//	Команда="pkzip.exe -a -p -r -xsyslog\*.* -xnew_stru\*.* -x*.cdx -x*.lst -x*.lck -x*.cfg """+ФайлАрхива+""""+" *.*";
		Команда="arj a -v1400k -r -y -x*.cdx -x*.lck -x*.lst -xnew_stru\*.* """+ФайлАрхива+"""";
		//	Сообщить(Команда);
		КомандаСистемы(Команда);
		
		
		ФС.УдалитьФайл(ИмяФайлаМаркера);
		Если ФС.СуществуетФайл(ФайлАрхива)=1 Тогда
			Предупреждение("Создан архив "+ФайлАрхива+" 
			|для периферийной базы с IDD="+Спр.IDD+".
			|Далее следует транспортировать архивную базу
			|на удаленный компьютер. Создать каталог и разархивировать
			|в нем базу, применив команду: arj x -v -y "+Файл+".
			|После этого запустить 1С-Предприятие в монопольном режиме.",0);
		КонецЕсли;
		
	Исключение
		ФС.УдалитьФайл(ИмяФайлаМаркера);
	КонецПопытки
КонецПроцедуры //СозданиеКопииБазы



//_____________________________________________________________________________
Процедура XML()
	Перем Файл;
	Номер=НомерПакетаЗагрузки;
	Файл=ПутьКБазеПриЗагрузке+"\"+Строка(Номер)+".xml";
	Если Фс.СУществуетФайл(Файл)=0 Тогда
	    Предупреждение("Файл "+Файл+" не существует!",10);
		Возврат;
	КонецЕсли;
	Состояние("Создается объект OLE.IXMLDOMDocument");
	ХМЛ=СоздатьОбъект("Microsoft.XMLDOM");
	Состояние("Загружается документ "+Файл);
//	ХМЛ.validateOnParse=0;
	ХМЛ.resolveExternals=0;
	ХМЛ.load(Файл);
	Состояние("Производится обработка запроса ");
	ДеревоЗапроса=ХМЛ.SelectNodes(ВыражениеЗапросаXML);
	Состояние("Вывод результата");
	ПросмотрДерева(ДеревоЗапроса,"(Файл - "+Файл+")");
//	ПросмотрДерева(ХМЛ.documentElement,"(Файл - "+Файл+")");
КонецПроцедуры //XML

КаталогДБФ=КаталогИБ();


ДаДа="Х";
НетНет="";

ФлИдентифID=1;

//заранее 1 раз обявляем объекты - это нужно для рационального использования памяти
ГлобДок=СоздатьОбъект("Документ");
ГлобДокЗагрВыгрузки=СоздатьОбъект("Документ");
КолТаблицЗначений=0;

МожноЗакрывать=1;

Форма.КнопкаПоУмолчанию("КнОбмен");

//********* кусок из глобального модуля - продублирован для обеспечения совместимости версий Менеджера
МОДДлинаID=17;
МОДДлинаIDДокумента=17;


НомерПодтвержденногоПакетаЗагрузки=0;
МаксНомерПакетаВыгрузки=0;
НомерПодтвержденногоПакета=0;

ВыводитьСообщения=0;
ФайлШаблона="c:\shablon.mod";


ДублирIDD=0;


МаксКолОбъектовВПакете=1000;//объектов типа справочник, 
							//объекты типа документ считаются как 1+количество строк в табличной части


РасширенныйРежим=0;
IDD=Константа.IDD;
ИспользоватьФТП=0;
ВстроеннаяАрхивация=0;
ИДДляОтладки="1234567";

ИспользоватьТранзакцию=1;

НоваяШапкаПакетов="Новая шапка пакетов";
ИмяМОД="DataExchangeManager";
ПерваяИнициализация=0;
СписокИзмененияИД=СоздатьОбъект("СписокЗначений");








//XML
ВремФайлЗаголовка=КаталогИб()+"temp.xml";
ДаДа="Х";
ПравилаВыгрузки=СоздатьОбъект("Справочник.ПравилаВыгрузки"); ПравилаВыгрузки.ПорядокКодов();
ПравилаВыгрузки1=СоздатьОбъект("Справочник.ПравилаВыгрузки");ПравилаВыгрузки1.ПорядокКодов();
ПравилаВыгрузки2=СоздатьОбъект("Справочник.ПравилаВыгрузки");ПравилаВыгрузки2.ПорядокКодов();

СписокПовторов=СоздатьОбъект("СписокЗначений");
СписокПеречислений=СоздатьОбъект("СписокЗначений");
СписСинонимов=СоздатьОбъект("СписокЗначений");
СписокИзмененияИД=СоздатьОбъект("СписокЗначений");
СписокСоответствийВидов=СоздатьОбъект("СписокЗначений");
СписокСоответствийЗначений=СоздатьОбъект("СписокЗначений");
СписокПроводимыхДокументов=СоздатьОбъект("СписокЗначений"); 
МассивТипов1С[1]="Число";
МассивТипов1С[2]="Строка";
МассивТипов1С[3]="Дата";
МассивТипов1С[10]="Перечисление";
МассивТипов1С[11]="Справочник";
МассивТипов1С[12]="Документ";
МассивТипов1С[13]="Календарь";
МассивТипов1С[14]="ВидРасчета";
МассивТипов1С[15]="Счет";
МассивТипов1С[16]="ВидСубконто";
МассивТипов1С[17]="ПланСчетов";
РабочДата=РабочаяДата();
Если Метаданные.ДокументОперации.Выбран()=1 Тогда
	ДокументОперации=Сокрлп(Метаданные.ДокументОперации.Идентификатор);
Иначе
	ДокументОперации="-//-";
КонецЕсли;
ОбработкаПримера=0;









ЗагружатьДокументИзПакета=0;
ЗагружатьСправочникИзПакета=0;
ВыражениеЗапросаXML="*";

ВерсияПротоколаМОД="1.04";
ВерсияМОД="1.091XML"; // от 09.12.2000г  
СписокВыборочнойВыгрузки=0;

РеквизитИдентификации="IDD";

МОДИнфо=
"Менеджер обмена данными "+ВерсияМОД+"
|Copyright© 'ПиБи' 1999 - 2000 
|www.pb.ru, lider@pb.ru
|
|Протокол пакета обмена "+ВерсияПротоколаМОД+"
|
|Лицензия на МОД № " +IDD+"
|Информационная база: "+КаталогИБ();

РежимНастройки=0