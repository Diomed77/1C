Перем ОЧ;
Перем ОС;
Перем СписокНеНайденныхТоваров;
Перем СписокНаименований;

Перем СписокТовБезШифра;
Перем СписокШифров;
Перем СписокТовБезШиК;
Перем СписокШифровБезК;
Перем СписокКодов;
Перем СписокРодителей;

Перем СписокНовогоПерсонала;
Перем СписокКодовПерсонала;
Перем СписокДолжностей;

Перем СписокКодовПр;
Перем СписокПричин;
Перем СписокСпПр;

Перем КодыМод;
Перем СписокМод;

Перем СписокВалют;
Перем СписокКодовВалют;
Перем СписокШифровВалют;
Перем СписокТиповВалют;
Перем СписокКурсовВалют;

Перем СписокИзмКодов;
Перем СписокИзмКурсов;
Перем СлужебнаяПерем;


Перем ВидЗагрузки;
Перем ИнфСтрока;

Функция семПолучитьСклад( пТовар, пСтанция )
	спр = СоздатьОбъект( "Справочник.СкладыТовара" );
	спр.ИспользоватьВладельца( пТовар );
	Если спр.ВыбратьЭлементы( 1 ) = 1 Тогда
		Пока спр.ПолучитьЭлемент()=1 Цикл
			Если спр.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;
			Если спр.Станция = пСтанция Тогда
				Возврат спр.Склад;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;          
	Возврат пСтанция.Склад;
КонецФункции

Процедура семСоздатьМарочныйОтчет()
	//ТабЗагрузки "Клиент,Нал,Блюдо,Кол,Сум,Нп,Ст.Склад"
	докМО = СоздатьОбъект("Документ.МарочныйОтчет");
	табл = СоздатьОбъект( "ТаблицаЗначений" );
	ТабЗагрузки.Выгрузить( табл );
	табл.Свернуть( "Склад, Нал, Клиент", );
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку()=1 Цикл        
		// Проверка на дубли
		док = СоздатьОбъект("Документ.МарочныйОтчет");
		док.ВыбратьДокументы( ДатаСмены, ДатаСмены );          
		ЕстьМО=0;	
		Пока док.ПолучитьДокумент() = 1 Цикл
			Если ( ( док.Загружен <> 0 ) и ( док.Склад = табл.Склад ) и ( док.Нал = табл.Нал ) и ( док.Клиент = табл.Клиент ) и ( док.ПометкаУдаления() = 0 ) ) Тогда
				Предупреждение( "За выбранную дату существует Марочный отчет по клиенту "+табл.Клиент, 1);
				ЕстьМО=1;	
			КонецЕсли;
		КонецЦикла;		       
		Если ЕстьМО=1 Тогда Продолжить; КонецЕсли;	

		глСоздатьНовыйОбъект(докМО);
		докМО.IDD=ПолучитьУникальныйIDD();
		докМО.ДатаДок=ДатаСмены;
		докМО.ДатаСмены=ДатаСмены;
		докМО.Склад=табл.Склад;
		докМО.Валюта=Константа.БазоваяВалюта_R_Keeper;
		докМО.Дата_Курса=ДатаСмены;
		докМО.Курс=КурсДляВалюты(докМО.Валюта,ДатаСмены);
		докМО.Клиент=табл.Клиент; 
		докМО.КлГруппа=?(табл.Клиент.КлГруппа.Выбран()=0,табл.Клиент,табл.Клиент.КлГруппа); 
		докМО.Нал=табл.Нал;
		докМО.Фирма=Константа.ОсновнаяФирма;
		докМО.ТипУчета=0;
		докМО.ИспользоватьНП=Перечисление.Булево.Да;
		докМО.Загружен=1;

		ТабЗагрузки.ВыбратьСтроки();
		Пока ТабЗагрузки.ПолучитьСтроку()=1 Цикл
			Если ТабЗагрузки.Склад <> табл.Склад Тогда Продолжить; КонецЕсли;	
			//Если ТабЗагрузки.Ст <> табл.Ст Тогда Продолжить; КонецЕсли;	
			Если ТабЗагрузки.Нал <> табл.Нал Тогда Продолжить; КонецЕсли;	
			Если ТабЗагрузки.Клиент <> табл.Клиент Тогда Продолжить; КонецЕсли;	
			докМО.НоваяСтрока();
			докМО.ТовКод = ТабЗагрузки.Блюдо.Код;
			докМО.Товар = ТабЗагрузки.Блюдо;
			докМО.Количество = ТабЗагрузки.Кол;
			докМО.Сумма = ТабЗагрузки.Сум;  
			докМО.Цена = ?( докМО.Количество<>0, Окр(докМО.Сумма/докМО.Количество,2,1), 0 );
			докМО.СуммаНП = ТабЗагрузки.НП;
			докМО.НДС=(докМО.Сумма-докМО.СуммаНП)*  ((ПроцентНДС(докМО.Товар.СтавкаНДС)/(100+ПроцентНДС(докМО.Товар.СтавкаНДС))));
			докМО.Единица=глБазоваяЕдиницаИзмерения(докМО.Товар);
			докМО.Коэффициент=докМО.Единица.Коэффициент;
		КонецЦикла;

		Если   докМО.КоличествоСтрок()=0 Тогда
			Предупреждение("Марочный отчет пустой, проверьте чеки за выбранную дату !");
		Иначе
			//Закомментировано Инсталлятором МОД:МарочныйОтчетНов.Записать();
			//Начало текста, вставленного Инсталлятором МОД
			ОбъектЗаписать(докМО, );
			//Конец текста, вставленного Инсталлятором МОД
			ОткрытьФорму(докМО.ТекущийДокумент());
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура семСоздатьОплатуЧеков()
	ЕстьДокОЧ = 0;
	докОЧ = СоздатьОбъект( "Документ.ОплатаЧеков" );
	докОЧ.ВыбратьДокументы( ДатаСмены, ДатаСмены );
	Пока докОЧ.ПолучитьДокумент() = 1 Цикл
		Если докОЧ.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;
		НовСумма=0;
		Для н = 1 по ТабЗагрузки.КоличествоСтрок() Цикл
			НовСумма = НовСумма + ТабЗагрузки.ПолучитьЗначение( н , 5 );  
		КонецЦикла;
		Если докОЧ.Итог( "Сумма" ) <> НовСумма Тогда Предупреждение("Изменилась сумма документа !"); КонецЕсли;
		ЕстьДокОЧ=1;
	КонецЦикла;
	Если ЕстьДокОЧ=1 Тогда
		Предупреждение("За "+ДатаСмены+" уже существует Оплата чеков !",2);  
		ИнфСтрока="АСТОР: Ресторан";
		Форма.Обновить(1);
		Возврат;
	КонецЕсли;

	табл = СоздатьОбъект( "ТаблицаЗначений" );
	ТабЗагрузки.Выгрузить( табл );
	табл.Свернуть( "Склад", );
	
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку()=1 Цикл        
		докОЧ=СоздатьОбъект("Документ.ОплатаЧеков");
		глСоздатьНовыйОбъект(докОЧ);
		докОЧ.IDD=ПолучитьУникальныйIDD();
		докОЧ.ДатаДок=ДатаСмены;
		докОЧ.ДатаСмены=ДатаСмены;
		докОЧ.Фирма=Константа.ОсновнаяФирма;
		докОЧ.ТипУчета=0; 
		докОЧ.Склад = табл.Склад; 
		Для Счет = 1 По ТабЗагрузки.КоличествоСтрок() Цикл
			Если ТабЗагрузки.ПолучитьЗначение(Счет,11) <> табл.Склад Тогда Продолжить; КонецЕсли;
			РеквВал = "";
			докОЧ.НоваяСтрока();
			докОЧ.ВалютаРК = ТабЗагрузки.ПолучитьЗначение(Счет,1);
			докОЧ.Сумма = ТабЗагрузки.ПолучитьЗначение(Счет,2);
			докОЧ.СуммаТоваров=ТабЗагрузки.ПолучитьЗначение(Счет,3);
			докОЧ.СуммаТоваровБезНдс=ТабЗагрузки.ПолучитьЗначение(Счет,4);
			докОЧ.СуммаТоваров10=ТабЗагрузки.ПолучитьЗначение(Счет,5);
			докОЧ.СуммаТоваров20=ТабЗагрузки.ПолучитьЗначение(Счет,6);
			докОЧ.СуммаУслуг=ТабЗагрузки.ПолучитьЗначение(Счет,7);
			докОЧ.СуммаУслугБезНДС=ТабЗагрузки.ПолучитьЗначение(Счет,8);
			докОЧ.СуммаУслуг10=ТабЗагрузки.ПолучитьЗначение(Счет,9);
			докОЧ.СуммаУслуг20=ТабЗагрузки.ПолучитьЗначение(Счет,10);
		КонецЦикла;
		Если докОЧ.КоличествоСтрок() = 0 Тогда
			Предупреждение("Документ ""Оплата чеков"" пустой, проверте чеки за выбранную дату !");
		Иначе
			//Закомментировано Инсталлятором МОД:ОплатаЧековНов.Записать();
			//Начало текста, вставленного Инсталлятором МОД
			ОбъектЗаписать(докОЧ, );
			//Конец текста, вставленного Инсталлятором МОД
			ОткрытьФорму(докОЧ.ТекущийДокумент());
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура Ошибка()
	КомпДбф.ПоследняяОшибка(ОЧ,ОС);
	Если ОЧ<>0 Тогда
		Сообщить(""+ОЧ+"            "+ОС+"");   
		
	КонецЕсли;
КонецПроцедуры                              

Процедура СпрятатьКнопки()
	Если ФлагПолнойЗагрузки=0 Тогда
		Форма.ПодписьПоэтапной.Видимость(0); 
		Форма.КнПерсонал.Видимость(0);
		Форма.КнМодификаторы.Видимость(0);
		Форма.КнПричины.Видимость(0);
		Форма.КнВалюты.Видимость(0);
		Форма.КнМеню.Видимость(0);
		Форма.КнЧеки.Видимость(0);
		Форма.КнМО.Видимость(0);
		Форма.КнОЧ.Видимость(0);
	Иначе
		Форма.ПодписьПоэтапной.Видимость(1); 
		Форма.КнПерсонал.Видимость(1);
		Форма.КнМодификаторы.Видимость(1);
		Форма.КнПричины.Видимость(1);
		Форма.КнВалюты.Видимость(1);
		Форма.КнМеню.Видимость(1);
		Форма.КнЧеки.Видимость(1);
		Форма.КнМО.Видимость(1);
		Форма.КнОЧ.Видимость(1);
	КонецЕсли;	
КонецПроцедуры	



Процедура ПриОткрытии()
	Перем ДатаЗагр;
        Сообщить( "Обработка отключена.","!!!" );
        Сообщить( "Новая обработка находится в меню Обработки -> Дополнительные возможности -> ! Загрузка R-Keeper (новая).","I" );
	СтатусВозврата(0); 
	Возврат;
		
	Если ЕстьРесторан=0 Тогда
		Предупреждение("Не обнаружена компонента обмена данными !");
		СтатусВозврата(0); 
		Возврат;
	КонецЕсли; 
	//-----------------------------
	Если ЕстьКомпДБФ=0 Тогда
		Предупреждение("Не загружена компонента обмена данными !");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	Если КомпДБФ.ЕстьСоединение()=0 Тогда
		Предупреждение("Нет соединения с DBF-сервером !");    
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	Если ВвестиДату(ДатаЗагр,"Введите дату смены")=0 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;	
	ДеньД=ДатаЧисло(ДатаЗагр);
	МесяцД=ДатаМесяц(ДатаЗагр);
	ГодД=ДатаГод(ДатаЗагр);
	Если СтрДлина(СокрЛП(Строка(ДеньД)))=1 Тогда
		ПромДень="0"+СокрЛП(Строка(ДеньД));
	ИначеЕсли	СтрДлина(СокрЛП(Строка(ДеньД)))=2 Тогда
		ПромДень=СокрЛП(Строка(ДеньД));
	КонецЕсли;
	Если СтрДлина(СокрЛП(Строка(МесяцД)))=1 Тогда
		ПромМесяц="0"+СокрЛП(Строка(МесяцД));
	ИначеЕсли	СтрДлина(СокрЛП(Строка(МесяцД)))=2 Тогда
		ПромМесяц=СокрЛП(Строка(МесяцД));
	КонецЕсли;
	
	ПромГод=Прав(Строка(ГодД),4);
	ПромДата=ПромДень+ПромМесяц+ПромГод;
	КомпДБФ.ЗадатьДату(Число(ПромДень),Число(ПромМесяц),Число(ПромГод));
	ДатаСмены=ДатаЗагр;
	СпрятатьКнопки();
КонецПроцедуры

Функция ВремяВЧисло(СтрВремени)
	Часы=Лев(СтрВремени,2);
	Минуты=Прав(СтрВремени,2);
	СтрВ=Часы+"."+Минуты;
	ВремяЧисло=Число(СтрВ);
	Возврат(ВремяЧисло);
КонецФункции

Функция ПереводДаты(ДатаРК)
	Год=Сред(ДатаРк,1,4);
	Месяц=Сред(ДатаРК,5,2);
	День=Сред(ДатаРК,7,2);
	Дата_С=Дата(Число(Год),Число(Месяц),Число(День));
	Возврат Дата_С;
КонецФункции

//-------------------------------------------------------------
Процедура ЗагрузитьГруппы()
	Перем Блюдо;
	Перем Код;
	Перем ПрГр;
	Перем КодРКип;
	Перем Родитель;
	Перем КолЗ;
	
	~11:
	
	КомпДбф.КоличествоЗаписей("Меню",СлужебнаяПерем);
	Ошибка();
	
	НетРодителя=0;
	
	СпрТов=СоздатьОбъект("Справочник.Номенклатура");
	СпрШифр=СоздатьОбъект("Справочник.ШифрыРК");
	
	СпрТов.НайтиПоНаименованию("Блюда");
	Род=СпрТов.ТекущийЭлемент();
	КомпДбф.КоличествоЗаписей("Меню",КолЗ);
	
	Для Ном=0 по (КолЗ-1) Цикл
		КомпДбф.ПозицияЗаписи("Меню",Ном);
		Ошибка();
		КомпДбф.ПолеПоИмени("Меню","NAME",Блюдо);
		Ошибка();
		КомпДбф.ПолеПоИмени("Меню","SIFR",Код);
		Ошибка();
		КомпДбф.ПолеПоИмени("Меню","TREETYPE",ПрГр);
		Ошибка();
		КомпДбф.ПолеПоИмени("Меню","CODE",КодРКип);
		Ошибка();
		КомпДбф.ПолеПоИмени("Меню","PARENT",Родитель);
		Ошибка();
		
		Если ПрГР="T" Тогда
			Если  Число(Родитель)<>0 Тогда
				СпрТов.НайтиПоРеквизиту("КодРКГруппы",Число(Родитель),1);
				Родит=СпрТов.ТекущийЭлемент();
			КонецЕсли;
			Если СпрТов.НайтиПоРеквизиту("КодРКГруппы",Число(КодРКип),1)=1 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Число(Родитель)=0 Тогда
				СпрТов.ИспользоватьРодителя(Род);
				глСоздатьНовуюГруппу(СпрТов);
				СпрТов.Наименование=Блюдо;
				СпрТов.ПоАлфавиту=Translate_Descr(СпрТов.Наименование);
				СпрТов.КодРКГруппы=Число(КодРКип);
				//Закомментировано Инсталлятором МОД:СпрТов.Записать();
				//Начало текста, вставленного Инсталлятором МОД
				ОбъектЗаписать(СпрТов, );
				//Конец текста, вставленного Инсталлятором МОД
				
			Иначе
				Если СокрЛП(Родит.Наименование)="" Тогда
					НетРодителя=1;
					Продолжить;
				КонецЕсли;
				СпрТов.ИспользоватьРодителя(Родит);
				глСоздатьНовуюГруппу(СпрТов);
				СпрТов.Наименование=Блюдо;   
				СпрТов.ПоАлфавиту=Translate_Descr(СпрТов.Наименование);
				СпрТов.КодРКГруппы=Число(КодРКип);
				//Закомментировано Инсталлятором МОД:СпрТов.Записать();
				//Начало текста, вставленного Инсталлятором МОД
				ОбъектЗаписать(СпрТов, );
				//Конец текста, вставленного Инсталлятором МОД
				
			КонецЕсли;
			//КонецЕсли;
			//КонецЕсли;
			
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла; 
	Если НетРодителя=1 Тогда
		//	Перейти ~11;
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьЧеки()
	Перем НомерЧека;
	//{{MRG[ <-- ]
	//	Перем ТекНомерЧека;
	//}}MRG[ <-- ]
	Перем НомерЧекаСодерж;
	Перем Блюдо;
	Перем КолБл;
	Перем ЦенаБл;
	Перем СуммаБл;
	Перем Комп;
	
	Перем ДатаСм;
	Перем ДатаР;
	Перем ТотСум;
	
	Перем Кас;
	Перем Мен;
	Перем Оф;
	Перем Дел;
	
	Перем ВалютаЧека;
	Перем БазСум;
	Перем ОригСум;
	Перем КурсЧека;
	Перем СкидкаЧека;
	
	Перем ВрОткЧ;
	Перем ВрЗакЧ;
	Перем СтолЧ;
	Перем КолГастЧ;
	Перем СтанЧ;
	Перем ГрСтанЧ;
	
	Перем НСЧ;
	Перем Позиция;
	Перем НомЧ;
	
	Перем КолОплат;
	Перем КолВШапке;
	Перем ТекПозОплЧ;
	Перем КолЗапСодЧек;
	
	// налог с продаж
	Перем Налог;
	Перем СумНалог;
	Перем ИспНалог;
	//---------------
	ИнфСтрока="Загрузка чеков";
	Форма.Обновить(1);
	//
	КомпДбф.КоличествоЗаписей("Шапки чеков",СлужебнаяПерем);
	Ошибка();
	
	НомСтр=0;
	
	ДокЧек=СоздатьОбъект("Документ.Чек");
	ДокумЧек=СоздатьОбъект("Документ");
	СпрТов=СоздатьОбъект("Справочник.Номенклатура");
	СпрШифр=СоздатьОбъект("Справочник.ШифрыРК");
	СпрСотр=СоздатьОбъект("Справочник.Сотрудники");
	СпрВал=СоздатьОбъект("Справочник.ВалютыРК");
	СпрМод=СоздатьОбъект("Справочник.Модификаторы");
	СпрСт=СоздатьОбъект("Справочник.Станции");
	//	ПроНПвТЧ=Константа.ОсновнойНП.Получить(ДатаСмены)/(100+Константа.ОсновнойНП.Получить(ДатаСмены));
	
	НачатьТранзакцию();
	
	ПозШапки=0;
	ПозВЧеке=0;
	Д=ДатаЧисло(ДатаСмены);
	М=ДатаМесяц(ДатаСмены);
	Г=ДатаГод(ДатаСмены);
	СГ=Строка(Г);
	Если М<10 Тогда
		СМ="0"+Строка(М);
	Иначе
		СМ=Строка(М);
	КонецЕсли;
	Если Д<10 Тогда
		СД="0"+Строка(Д);
	Иначе
		СД=Строка(Д);
	КонецЕсли;
	СтрокаДаты=СГ+СМ+СД;
	КомпДбф.КоличествоЗаписей("Шапки чеков",КолВШапке);
	Ошибка();
	Если КолВШапке=0 Тогда
		//ТабЗагрузки.Очистить();
		//ТабЗагрузки.КоличествоКолонок(1);          
		//ТабЗагрузки.НоваяСтрока();
		//ТабЗагрузки.УстановитьЗначение(1,1,"Файл пустой"); 
		ИнфСтрока="Файл пустой";
		Форма.Обновить(1);
		Возврат;
	КонецЕсли;
	ТабЗагрузки.Очистить();
	ТабЗагрузки.КоличествоКолонок(8); 
	ТабЗагрузки.ВыводитьПиктограммы(1); 
	ТабЗагрузки.УстановитьПараметрыКолонки(1,,,,,3,,);
	//	Сообщить( СтрокаДаты );
	Если КомпДбф.НайтиЗаписьПоПолю("Шапки чеков","LOGICDATE",СтрокаДаты,"Head")=0 Тогда
		Сообщить("За выбранную дату чеков не существует");
		Возврат;
	КонецЕсли;
	
	
	КомпДбф.НайтиЗаписьПоПолю("Шапки чеков","LOGICDATE",СтрокаДаты,"H");
	Ошибка();
	КомпДбф.ТекущаяЗапись("Шапки чеков",Позиция);
	Ошибка();
	ПозШапки=Позиция;
	КомпДбф.ПолеПоИмени("Шапки чеков","SYS_NUM",НомЧ);
	Ошибка();
	КомпДбф.НайтиЗаписьПоПолю("Содержимое чеков","SYS_NUM",НомЧ,"H");
	Ошибка();
	КомпДбф.ТекущаяЗапись("Содержимое чеков",Позиция);
	Ошибка();
	ПозВЧеке=Позиция;
	
	
	// КомпДбф.ПерваяЗапись("Шапки чеков");
	
	~1:   Если ПозШапки>=КолВШапке Тогда
		Перейти ~3;
	КонецЕсли;
	
	КомпДбф.ПозицияЗаписи("Шапки чеков",ПозШапки);
	Ошибка();
	//    СОЗДАЕМ НОВЫЙ ЧЕК    //
	КомпДбф.ПолеПоИмени("Шапки чеков","SYS_NUM",НомерЧека);
	Ошибка();
	//{{MRG[ <-- ]
	//	КомпДбф.ПолеПоИмени("Шапки чеков","CNUM",ТекНомерЧека);
	//	Ошибка();
	//	
	//}}MRG[ <-- ]
	КомпДбф.ПолеПоИмени("Шапки чеков","LOGICDATE",ДатаСм);
	Ошибка();
	КомпДбф.ПолеПоИмени("Шапки чеков","REALDATE",ДатаР);
	Ошибка();
	КомпДбф.ПолеПоИмени("Шапки чеков","TOTAL",ТотСум);
	Ошибка();
	КомпДбф.ПолеПоИмени("Шапки чеков","CASHIER",Кас);
	Ошибка();
	КомпДбф.ПолеПоИмени("Шапки чеков","WAITER",Оф);
	Ошибка();
	КомпДбф.ПолеПоИмени("Шапки чеков","MANAGER",Мен);
	Ошибка();
	КомпДбф.ПолеПоИмени("Шапки чеков","DELETED",Дел);
	Ошибка();
	КомпДбф.ПолеПоИмени("Шапки чеков","OPENTIME",ВрОткЧ);
	Ошибка();
	КомпДбф.ПолеПоИмени("Шапки чеков","CLOSETIME",ВрЗакЧ);
	Ошибка();
	КомпДбф.ПолеПоИмени("Шапки чеков","TABLE",СтолЧ);
	Ошибка();
	КомпДбф.ПолеПоИмени("Шапки чеков","COVER",КолГастЧ);
	Ошибка();
	КомпДбф.ПолеПоИмени("Шапки чеков","UNIT",СтанЧ);
	Ошибка();
	КомпДбф.ПолеПоИмени("Шапки чеков","DEPART",ГрСтанЧ);
	Ошибка();
	
	// налог с продаж
	//	КомпДбф.ПолеПоИмени("Шапки чеков","TAXSUM",СумНалог);
	//	Ошибка();
	//---------------
	СпрСотр.НайтиПоРеквизиту("КодРК",Кас,1);
	Кассир=СпрСотр.ТекущийЭлемент();
	СпрСотр.НайтиПоРеквизиту("КодРК",Оф,1);
	Официант=СпрСотр.ТекущийЭлемент();
	СпрСотр.НайтиПоРеквизиту("КодРК",Мен,1);
	Менеджер=СпрСотр.ТекущийЭлемент();
	//------------------------------------------------
	//   конец смены
	Если Строка(ДатаСм)<>СтрокаДаты Тогда
		Перейти ~3;
	КонецЕсли;
	//------------------------------------------------
	Если ДокумЧек.ВыбратьПоЗначению('01.01.80',ТекущаяДата(),"СистемныйНомер",Число(НомерЧека))=1 Тогда
		Если ДокумЧек.ПометкаУдаления()<>1 Тогда
			Если ДокумЧек.СуммаЧека<>Число(ТотСум) Тогда
				НомПикт=5;
			Иначе
				НомПикт=2;
			КонецЕсли;	
			НомСтр=НомСтр+1;
			ТабЗагрузки.НоваяСтрока();       
			ТабЗагрузки.УстановитьЗначение(НомСтр,1,НомПикт);
			ТабЗагрузки.УстановитьЗначение(НомСтр,2,ДокумЧек.НомерДок);
			ТабЗагрузки.УстановитьЗначение(НомСтр,3,ДокумЧек.ДатаДок);
			ТабЗагрузки.УстановитьЗначение(НомСтр,4,ДокумЧек.СистемныйНомер);
			ТабЗагрузки.УстановитьЗначение(НомСтр,5,ДокумЧек.ДатаСмены);
			ТабЗагрузки.УстановитьЗначение(НомСтр,6,ДокумЧек.СуммаЧека);
			ТабЗагрузки.УстановитьЗначение(НомСтр,7,ДокумЧек.Стол);
			ТабЗагрузки.УстановитьЗначение(НомСтр,8,ДокумЧек.Удален);
			ПозШапки=ПозШапки+1;
			ПозВЧеке=ПозВЧеке;
			Перейти ~1;
		КонецЕсли;
	КонецЕсли;
	глСоздатьНовыйОбъект(ДокЧек);
	ДокЧек.IDD=ПолучитьУникальныйIDD();
	ДокЧек.СистемныйНомер=НомерЧека;
	//{{MRG[ <-- ]
	//	ДокЧек.ТекНомер=Число(ТекНомерЧека);
	//}}MRG[ <-- ]
	ДокЧек.СуммаЧека=Число(ТотСум);
	ДокЧек.ДатаДок=ПереводДаты(ДатаСМ);
	ДокЧек.ДатаСмены=ПереводДаты(ДатаСм);
	ДокЧек.ДатаРеал=ПереводДаты(ДатаР);
	ДокЧек.Кассир=Кассир;
	ДокЧек.Официант=Официант;
	ДокЧек.Менеджер=Менеджер;
	ДокЧек.Удален=Число(Дел);
	ДокЧек.ВремяОткрытия=ВремяВЧисло(ВрОткЧ);
	ДокЧек.ВремяЗакрытия=ВремяВЧисло(ВрЗакЧ);
	ДокЧек.Стол=Число(СтолЧ);
	ДокЧек.КоличествоГостей=Число(КолГастЧ);
	СпрСт.НайтиПоКоду(Число(СтанЧ));
	ДокЧек.Станция=СпрСт.ТекущийЭлемент();
	//ДокЧек.Станция=СтанЧ;
	ДокЧек.ГруппаСтанций=ГрСтанЧ;
	// налог с продаж
	//	ДокЧек.СуммаНалога=СумНалог;
	//---------------
	
	//  оплаты чеков  //
	ОплатаБаз=0;
	ОплатаОриг=0;
	
	КомпДбф.НайтиЗаписьПоПолю("Оплата чеков","SYS_NUM",Строка(НомерЧека),"H");
	Ошибка();
	
	КомпДбф.ПолеПоИмени("Оплата чеков","CURRENCY",ВалютаЧека);
	Ошибка();
	КомпДбф.ПолеПоИмени("Оплата чеков","BASESUMEQW",БазСум);
	Ошибка();
	КомпДбф.ПолеПоИмени("Оплата чеков","ORIGSUM",ОригСум);
	Ошибка();
	КомпДбф.ПолеПоИмени("Оплата чеков","KURS",КурсЧека);
	Ошибка();
	КомпДбф.ПолеПоИмени("Оплата чеков","DISCOUNT",СкидкаЧека);
	Ошибка();
	// налог с продаж
	//	КомпДбф.ПолеПоИмени("Оплата чеков","DOP3",ИспНалог);
	//	Ошибка();
	//---------------
	Нсч=НомерЧека;
	СпрВал.НайтиПоКоду(Число(ВалютаЧека));
	
	ДокЧек.Валюта=СпрВал.ТекущийЭлемент();
	ДокЧек.ТипВалюты=СпрВал.Тип;
	ДокЧек.Курс=Число(КурсЧека);
	ДокЧек.Скидка=Число(СкидкаЧека);
	// налог с продаж
	//	Если ИспНалог="T" Тогда
	ДокЧек.ИспользоватьНП=Перечисление.Булево.Да;
	//	Иначе
	//		ДокЧек.ИспользоватьНП=Перечисление.Булево.Нет;
	//	КонецЕсли;
	//---------------
	ОплатаБаз=Число(БазСум);
	ОплатаОриг=Число(ОригСум);
	
	Пока Строка(НомерЧека)=Строка(НСЧ) Цикл
		КомпДбф.КоличествоЗаписей("Оплата чеков",КолОплат);
		Ошибка();
		КомпДбф.ТекущаяЗапись("Оплата чеков",ТекПозОплЧ);
		Ошибка();
		Если (КолОплат-1)<=ТекПозОплЧ Тогда
			Перейти ~4;
		КонецЕсли;
		КомпДбф.СледующаяЗапись("Оплата чеков");
		Ошибка();
		КомпДбф.ПолеПоИмени("Оплата чеков","SYS_NUM",НСЧ);
		Ошибка();
		//КомпДбф.ПолеПоИмени("Оплата чеков","CURRENCY",ВалютаЧека);
		//Ошибка();
		КомпДбф.ПолеПоИмени("Оплата чеков","BASESUMEQW",БазСум);
		Ошибка();
		КомпДбф.ПолеПоИмени("Оплата чеков","ORIGSUM",ОригСум);
		Ошибка();
		//КомпДбф.ПолеПоИмени("Оплата чеков","KURS",КурсЧека);
		//Ошибка();
		//КомпДбф.ПолеПоИмени("Оплата чеков","DISCOUNT",СкидкаЧека);
		//Ошибка();
		Если  Строка(НомерЧека)=Строка(НСЧ) Тогда
			ОплатаБаз=ОплатаБаз+Число(БазСум);
			ОплатаОриг=ОплатаОриг+Число(ОригСум);
		КонецЕсли;
	КонецЦикла;
	
	~4: ДокЧек.ОплатаБаз=ОплатаБаз;
	ДокЧек.ОплатаОриг=ОплатаОриг;
	
	КомпДбф.КоличествоЗаписей("Содержимое чеков",КолЗапСодЧек);
	Ошибка();
	~2:       
	//
	Если (ПозВчеке+1)>КолЗапСодЧек Тогда
		//Закомментировано Инсталлятором МОД:ДокЧек.Записать();
		//Начало текста, вставленного Инсталлятором МОД
		ОбъектЗаписать(ДокЧек, );
		//Конец текста, вставленного Инсталлятором МОД
		
		ДокЧек.Провести();  
		//***
		НомСтр=НомСтр+1;
		ТабЗагрузки.НоваяСтрока();
		ТабЗагрузки.УстановитьЗначение(НомСтр,1,3);
		ТабЗагрузки.УстановитьЗначение(НомСтр,2,ДокЧек.НомерДок);
		ТабЗагрузки.УстановитьЗначение(НомСтр,3,ДокЧек.ДатаДок);
		ТабЗагрузки.УстановитьЗначение(НомСтр,4,ДокЧек.СистемныйНомер);
		ТабЗагрузки.УстановитьЗначение(НомСтр,5,ДокЧек.ДатаСмены);
		ТабЗагрузки.УстановитьЗначение(НомСтр,6,ДокЧек.СуммаЧека);
		ТабЗагрузки.УстановитьЗначение(НомСтр,7,ДокЧек.Стол);
		ТабЗагрузки.УстановитьЗначение(НомСтр,8,ДокЧек.Удален);
		//***
		//		~5:
		ПозШапки=ПозШапки+1;
		ПозВЧеке=ПозВЧеке;//+1;
		Перейти ~1;	
		
	КонецЕсли;	
	//
	КомпДбф.ПозицияЗаписи("Содержимое чеков",ПозВЧеке);
	Ошибка();
	КомпДБФ.Поле("Содержимое чеков",0,НомерЧекаСодерж);
	Ошибка();
	
	Если ((НомерЧекаСодерж=НомерЧека) и (Число(ПозВЧеке+1)<=Число(КолЗапСодЧек))) Тогда
		//  ЗАПОЛНЯЕМ ТАБЛИЧНУЮ ЧАСТЬ   //
		КомпДБФ.ПолеПоИмени("Содержимое чеков","SIFR",Блюдо);
		Ошибка();
		КомпДБФ.ПолеПоИмени("Содержимое чеков","QNT",КолБл);
		Ошибка();
		КомпДБФ.ПолеПоИмени("Содержимое чеков","PRICE",ЦенаБл);
		Ошибка();
		КомпДБФ.ПолеПоИмени("Содержимое чеков","PAYSUM",СуммаБл);
		Ошибка();
		КомпДБФ.ПолеПоИмени("Содержимое чеков","COMPONENT",Комп);
		Ошибка();
		// налог с продаж
		//	КомпДБФ.ПолеПоИмени("Содержимое чеков","NALOG",Налог);
		//	Ошибка();
		//---------------
		ДокЧек.НоваяСтрока();                                                         
		
		// Товар или Модификатор ???
		Если Комп="T" Тогда  //Модификатор !!!
			Если СпрМод.НайтиПоКоду(Число(Блюдо))=1 тогда
				ДокЧек.Модификатор=СпрМод.ТекущийЭлемент();
			КонецЕсли;
		Иначе          
			Сообщить(Число(Блюдо));
			Если СпрШифр.НайтиПоКоду(Число(Блюдо))=1 тогда
				ДокЧек.Товар=СпрШифр.Товар;     Сообщить(СпрШифр.Товар);
			КонецЕсли;
		КонецЕсли;
		ДокЧек.Количество=Число(КолБл);
		Если Число(КолБл)<>0 Тогда
			ДокЧек.Цена=Число(СуммаБл)/Число(КолБл);
		Иначе
			ДокЧек.Цена=Число(СуммаБл);
		КонецЕсли;
		ДокЧек.Сумма=Число(СуммаБл);
		// налог с продаж
		//	ДокЧек.СуммаНП=ДокЧек.Сумма*Налог;
		Если ДокЧек.Валюта.Тип=Перечисление.ТипыВалютРК.Наличные Тогда
			//	    ДокЧек.СуммаНП=ДокЧек.Сумма*ПроНПвТЧ;
		Иначе
			ДокЧек.СуммаНП=0;
		КонецЕсли;
		
		//---------------
		ПозВЧеке=ПозВЧеке+1;
		Перейти ~2;
	Иначе
		//Закомментировано Инсталлятором МОД:ДокЧек.Записать();
		//Начало текста, вставленного Инсталлятором МОД
		ОбъектЗаписать(ДокЧек, );
		//Конец текста, вставленного Инсталлятором МОД
		
		ДокЧек.Провести(); 
		//****
		НомСтр=НомСтр+1;
		ТабЗагрузки.НоваяСтрока();             
		ТабЗагрузки.УстановитьЗначение(НомСтр,1,3);
		ТабЗагрузки.УстановитьЗначение(НомСтр,2,ДокЧек.НомерДок);
		ТабЗагрузки.УстановитьЗначение(НомСтр,3,ДокЧек.ДатаДок);
		ТабЗагрузки.УстановитьЗначение(НомСтр,4,ДокЧек.СистемныйНомер);
		ТабЗагрузки.УстановитьЗначение(НомСтр,5,ДокЧек.ДатаСмены);
		ТабЗагрузки.УстановитьЗначение(НомСтр,6,ДокЧек.СуммаЧека);
		ТабЗагрузки.УстановитьЗначение(НомСтр,7,ДокЧек.Стол);
		ТабЗагрузки.УстановитьЗначение(НомСтр,8,ДокЧек.Удален);
		//****
		//		~5:
		ПозШапки=ПозШапки+1;
		ПозВЧеке=ПозВЧеке;
		Перейти ~1;
	КонецЕсли;
	~3:
	ЗафиксироватьТранзакцию();
	ИнфСтрока="АСТОР: Ресторан";
	Форма.Обновить(1);
КонецПроцедуры

Процедура ЗагрузитьМодификаторы()
	Перем КодМод;
	Перем ИмяМод;
	Перем ЦенаМод;
	Перем УдаленМод;
	Перем КолЗ; 
	
	ИнфСтрока="Загрузка модификаторов";
	Форма.Обновить(1);
	ВидЗагрузки="Модификаторы";
	
	КомпДбф.КоличествоЗаписей("Модификаторы",СлужебнаяПерем);
	Ошибка();
	
	ТабЗагрузки.Очистить();
	ТабЗагрузки.КоличествоКолонок(5); 
	ТабЗагрузки.ВыводитьПиктограммы(1); 
	ТабЗагрузки.УстановитьПараметрыКолонки(1,,,,,3,,);
	ТабЗагрузки.УстановитьПараметрыКолонки(2,,,,"Код",10,,);
	ТабЗагрузки.УстановитьПараметрыКолонки(3,,,,"Наименование",24,,);
	ТабЗагрузки.УстановитьПараметрыКолонки(4,,,,"Примечание",24,,);
	ТабЗагрузки.ВидимостьКолонки("5",0);
	НомСтр=0;
	СпрМод=СоздатьОбъект("Справочник.Модификаторы");
	//КомпДБФ.ЗадатьДату("050599");
	КомпДбф.КоличествоЗаписей("Модификаторы",КолЗ);
	Для Ном=0 по КолЗ-1 Цикл
		КомпДбф.ПозицияЗаписи("Модификаторы",Ном);
		Ошибка();
		КомпДбф.ПолеПоИмени("Модификаторы","SIFR",КодМод);
		Ошибка();
		КомпДбф.ПолеПоИмени("Модификаторы","NAME",ИмяМод);
		Ошибка();
		КомпДбф.ПолеПоИмени("Модификаторы","REALPRICE",ЦенаМод);
		Ошибка();
		КомпДбф.ПолеПоИмени("Модификаторы","DEL",УдаленМод);
		Ошибка();
		//Если УдаленМод="F" Тогда
		Если СпрМод.НайтиПоКоду(Число(КодМод),1)=1 Тогда
			НовыйЭл=0;
			НомерПикт=3;
			Если СпрМод.Наименование<>ИмяМод Тогда
				ПримечаниеМод=Строка(СпрМод.Наименование)+"   !!!";
			Иначе 
				ПримечаниеМод="ОК";
			КонецЕсли;
		Иначе
			ПримечаниеМод="Код не найден в справочнике !";
			НовыйЭл=1;
			НомерПикт=4;
		КонецЕсли; 
		//=====   
		Если ((ФлагВсех=0) И (НовыйЭл=0)) Тогда	 
			Продолжить;	
		КонецЕсли;	
		НомСтр=НомСтр+1;
		ТабЗагрузки.НоваяСтрока();
		ТабЗагрузки.УстановитьЗначение(НомСтр,1,НомерПикт);
		ТабЗагрузки.УстановитьЗначение(НомСтр,2,КодМод);
		ТабЗагрузки.УстановитьЗначение(НомСтр,3,ИмяМод);
		ТабЗагрузки.УстановитьЗначение(НомСтр,4,ПримечаниеМод);
		ТабЗагрузки.УстановитьЗначение(НомСтр,5,НовыйЭл);
		//=====
		
		//КонецЕсли;
	КонецЦикла;                      
	ИнфСтрока="АСТОР: Ресторан";
	Форма.Обновить(1);
КонецПроцедуры

Процедура УдалениеЧеков()
	ДЧ=СоздатьОбъект("Документ.Чек");
	ДЧ.ВыбратьДокументы(ДатаСмены,ДатаСмены);
	Пока ДЧ.ПолучитьДокумент()=1 Цикл
		//Закомментировано Инсталлятором МОД:Дч.Удалить();
		//Начало текста, вставленного Инсталлятором МОД
		ОбъектУдалить(Дч, );
		//Конец текста, вставленного Инсталлятором МОД
		
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузкаПерсонала()
	Перем КодПер;
	Перем ИмяПер;
	Перем ТипПер;
	Перем УдаленПер;
	Перем КолЗ;  
	
	ИнфСтрока="Загрузка персонала";
	Форма.Обновить(1);
	ВидЗагрузки="Персонал";
	СпрДолж=СоздатьОбъект("Справочник.Должности");      
	СпрСотр=СоздатьОбъект("Справочник.Сотрудники");
	КомпДбф.КоличествоЗаписей("Персонал",СлужебнаяПерем);
	Ошибка();   
	
	
	ТабЗагрузки.Очистить();
	ТабЗагрузки.КоличествоКолонок(7);
	ТабЗагрузки.ВыводитьПиктограммы(1); 
	ТабЗагрузки.УстановитьПараметрыКолонки(1,,,,,3,,); 
	ТабЗагрузки.УстановитьПараметрыКолонки(2,,,,"Код",10,,);
	ТабЗагрузки.УстановитьПараметрыКолонки(3,,,,"Наименование",24,,);
	ТабЗагрузки.УстановитьПараметрыКолонки(4,,,,"Должность",16,,);
	ТабЗагрузки.УстановитьПараметрыКолонки(5,,,,"Примечание",24,,);
	ТабЗагрузки.ВидимостьКолонки("6,7",0);
	НомСтр=0;
	
	КомпДбф.КоличествоЗаписей("Персонал",КолЗ);
	Для Ном=0 по (КолЗ-1) Цикл
		КомпДбф.ПозицияЗаписи("Персонал",Ном);
		Ошибка();
		КомпДбф.ПолеПоИмени("Персонал","SIFR",КодПер);
		Ошибка();
		КомпДбф.ПолеПоИмени("Персонал","NAME",ИмяПер);
		Ошибка();
		КомпДбф.ПолеПоИмени("Персонал","DEL",УдаленПер);
		Ошибка();
		КомпДбф.ПолеПоИмени("Персонал","TYPE",ТипПер);
		
		
		
		//	Если УдаленПер="F" Тогда
		Если СпрДолж.НайтиПоРеквизиту("ТипРК",ТипПер,1)=1 Тогда
			Должность=СпрДолж.Наименование;
		Иначе
			Должность="Не определен !!!";
		КонецЕсли;
		Если СпрСотр.НайтиПореквизиту("КодРК",КодПер,1)=1 Тогда  
			НовыйЭл=0;
			НомерПикт=3;
			ПримечаниеПер="ОК";
		Иначе         
			НовыйЭл=1;  
			НомерПикт=4;
			ПримечаниеПер="Код не найден в справочнике !";
		КонецЕсли;
		//КонецЕсли; 
		
		//=====   
		Если ((ФлагВсех=0) И (НовыйЭл=0)) Тогда	 
			Продолжить;	
		КонецЕсли;	
		НомСтр=НомСтр+1;
		ТабЗагрузки.НоваяСтрока(); 
		ТабЗагрузки.УстановитьЗначение(НомСтр,1,НомерПикт);
		ТабЗагрузки.УстановитьЗначение(НомСтр,2,КодПер);
		ТабЗагрузки.УстановитьЗначение(НомСтр,3,ИмяПер);
		ТабЗагрузки.УстановитьЗначение(НомСтр,4,Должность);
		ТабЗагрузки.УстановитьЗначение(НомСтр,5,ПримечаниеПер);
		ТабЗагрузки.УстановитьЗначение(НомСтр,6,ТипПер);
		ТабЗагрузки.УстановитьЗначение(НомСтр,7,НовыйЭл);
		//=====
	КонецЦикла;                  
	ИнфСтрока="АСТОР: Ресторан";
	Форма.Обновить(1);
КонецПроцедуры

Процедура ЗагрузитьМеню()
	Перем Блюдо;
	Перем Цена;
	Перем КолЗ;
	Перем КолП;
	Перем ПрГр;
	Перем Код;
	Перем Удален;
	Перем КодРКип;
	Перем Родитель;
	
	
	
	ВидЗагрузки="Меню";
	КомпДбф.КоличествоЗаписей("Меню",СлужебнаяПерем);
	Ошибка();
	
	
	СпрТов=СоздатьОбъект("Справочник.Номенклатура");
	СпрШифр=СоздатьОбъект("Справочник.ШифрыРК");
	
	ТабЗагрузки.Очистить();
	ТабЗагрузки.КоличествоКолонок(8);
	ТабЗагрузки.ВыводитьПиктограммы(1); 
	ТабЗагрузки.УстановитьПараметрыКолонки(1,,,,,3,,); 
	ТабЗагрузки.УстановитьПараметрыКолонки(2,,,,"Код",6,,);
	ТабЗагрузки.УстановитьПараметрыКолонки(3,,,,"Наименование",20,,);
	ТабЗагрузки.УстановитьПараметрыКолонки(4,,,,"Шифр",6,,);
	ТабЗагрузки.УстановитьПараметрыКолонки(5,,,,"Цена",9,,);    
	ТабЗагрузки.УстановитьПараметрыКолонки(6,,,,"Родитель",15,,);
	ТабЗагрузки.УстановитьПараметрыКолонки(7,,,,"Примечание",26,,);
	ТабЗагрузки.ВидимостьКолонки("8",0);
	НомСтр=0;
	
	КомпДбф.КоличествоЗаписей("Меню",КолЗ);
	
	КомпДбф.КоличествоПолей("Меню",КолП);
	Для Ном=0 по (КолЗ-1) Цикл
		КомпДбф.ПозицияЗаписи("Меню",Ном);
		Ошибка();
		КомпДбф.ПолеПоИмени("Меню","NAME",Блюдо);
		Ошибка();
		КомпДбф.ПолеПоИмени("Меню","SIFR",Код);
		Ошибка();
		//КомпДбф.ПолеПоИмени("Меню","DEL",Удален);
		//Ошибка();
		КомпДбф.ПолеПоИмени("Меню","PRICE",Цена);
		Ошибка();
		КомпДбф.ПолеПоИмени("Меню","TREETYPE",ПрГр);
		Ошибка();
		КомпДбф.ПолеПоИмени("Меню","PARENT",Родитель);
		Ошибка();
		КомпДбф.ПолеПоИмени("Меню","CODE",КодРКип);
		Ошибка();
		
		//	Если СокрЛП(Строка(ПрГР))="F" Тогда
		Если СокрЛП(Строка(ПрГР))<>"T" Тогда
			Если    СокрЛП(Строка(ПрГР))="" Тогда
				Продолжить;
			КонецЕсли;	 
			Если СпрШифр.НайтиПоКоду(Число(Код))=1  Тогда 
				Если СпрТов.НайтиПоРеквизиту("КодРК",Число(КодРКип),1)=1  Тогда  
					Если Число(КодРКип) = 0 Тогда
						Продолжить;
					КонецЕсли;
					//есть код   есть шифр
					//наименование
					ИмяСтар=СпрТов.Наименование;
					ИмяНов=ИмяСтар;
					//					ИмяНов=Блюдо;
					
					Если СокрЛП(ИмяСтар)<>СокрЛП(ИмяНов) Тогда
						НовыйЭл=11;  
						НомерПикт=2;
						Примечание="Изменено наименование !"; 
					Иначе 
						//						Если  СпрТов.РозничнаяЦена.Получить(ДатаСмены)<>Число(Цена) Тогда
						//							НовыйЭл=22;  
						//				            НомерПикт=1;
						//							Примечание="Изменена цена !";
						//						Иначе
						НовыйЭл=0;  
						НомерПикт=3;
						Примечание="ОК";
						//						КонецЕсли;
					КонецЕсли;
				Иначе
					// нет кода   есть шифр   
					// ситуация критическая !!! 
					НовыйЭл=3;  
					НомерПикт=5;
					Примечание="Не заполнен код RK !!!";
				КонецЕсли;
			Иначе
				Если СпрТов.НайтиПоРеквизиту("КодРК",Число(КодРКип),1)=1  Тогда 
					Если Число(КодРКип) = 0 Тогда
						Продолжить;
					КонецЕсли;					
					//Есть код   нет шифра 
					НовыйЭл=2;  
					НомерПикт=6;
					Примечание="Не заполнен шифр RK !!!";
				Иначе   
					Сообщить("Не найден товар с Шифром РК "+КодРКип);
					//Нет шифра  нет кода 
					НовыйЭл=1;
					НомерПикт=4;
					Примечание="Не заполнены шифр и код RK !!!";
				КонецЕсли;
			КонецЕсли; 
			
			//===== 
			СпрТов.НайтиПоРеквизиту("КодРКГруппы",Число(Родитель),1);
			РодительБл=СпрТов.ТекущийЭлемент();
			
			Если ((ФлагВсех=0) И (НовыйЭл=0)) Тогда	 
				Продолжить;	
			КонецЕсли;	
			НомСтр=НомСтр+1;
			ТабЗагрузки.НоваяСтрока(); 
			ТабЗагрузки.УстановитьЗначение(НомСтр,1,НомерПикт);
			ТабЗагрузки.УстановитьЗначение(НомСтр,2,КодРКип);
			ТабЗагрузки.УстановитьЗначение(НомСтр,3,Блюдо);
			ТабЗагрузки.УстановитьЗначение(НомСтр,4,Код);
			ТабЗагрузки.УстановитьЗначение(НомСтр,5,Цена);
			ТабЗагрузки.УстановитьЗначение(НомСтр,6,РодительБл); 
			ТабЗагрузки.УстановитьЗначение(НомСтр,7,Примечание);
			ТабЗагрузки.УстановитьЗначение(НомСтр,8,НовыйЭл);
			//=====			
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура УдалениеШифров()
	СпрШ=СоздатьОбъект("Справочник.ШифрыРК");
	СпрШ.ВыбратьЭлементы();
	Пока СпрШ.ПолучитьЭлемент()=1 Цикл
		//Закомментировано Инсталлятором МОД:СпрШ.Удалить();
		//Начало текста, вставленного Инсталлятором МОД
		ОбъектУдалить(СпрШ, );
		//Конец текста, вставленного Инсталлятором МОД
		
	КонецЦикла;
КонецПроцедуры

Процедура УдалениеМодификаторов()
	СпрМ=СоздатьОбъект("Справочник.Модификаторы");
	СпрМ.ВыбратьЭлементы();
	Пока СпрМ.ПолучитьЭлемент()=1 Цикл
		//Закомментировано Инсталлятором МОД:СпрМ.Удалить();
		//Начало текста, вставленного Инсталлятором МОД
		ОбъектУдалить(СпрМ, );
		//Конец текста, вставленного Инсталлятором МОД
		
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьПричины()
	Перем КодПР;
	Перем ИмяПР;
	Перем СпПр;
	Перем КолЗ;  
	
	ИнфСтрока="Загрузка причин удаления";
	Форма.Обновить(1);
	ВидЗагрузки="Причины";
	
	КомпДбф.КоличествоЗаписей("Причины удаления",СлужебнаяПерем);
	Ошибка();
	
	СпрПр=СоздатьОбъект("Справочник.ПричиныУдаления");
	ТабЗагрузки.Очистить();
	ТабЗагрузки.КоличествоКолонок(6);
	ТабЗагрузки.ВыводитьПиктограммы(1); 
	ТабЗагрузки.УстановитьПараметрыКолонки(1,,,,,3,,);
	ТабЗагрузки.УстановитьПараметрыКолонки(2,,,,"Код",10,,);
	ТабЗагрузки.УстановитьПараметрыКолонки(3,,,,"Наименование",24,,);
	ТабЗагрузки.УстановитьПараметрыКолонки(4,,,,"Примечание",24,,); 
	ТабЗагрузки.УстановитьПараметрыКолонки(5,,,,"Списывать",12,,);
	ТабЗагрузки.ВидимостьКолонки("6",0);
	НомСтр=0;
	КомпДбф.КоличествоЗаписей("Причины удаления",КолЗ);
	Для Ном=0 по (КолЗ-1) Цикл
		КомпДбф.ПозицияЗаписи("Причины удаления",Ном);
		Ошибка();
		КомпДбф.ПолеПоИмени("Причины удаления","SIFR",КодПР);
		Ошибка();
		КомпДбф.ПолеПоИмени("Причины удаления","NAME",ИмяПР);
		Ошибка();
		КомпДбф.ПолеПоИмени("Причины удаления","USED",СпПр);
		Ошибка();
		Если СпПр="T" Тогда
			Сп=Перечисление.Булево.Да;
		Иначе
			Сп=Перечисление.Булево.Нет;
		КонецЕсли;
		Если СпрПр.НайтиПоКоду(Число(КодПР))=1 Тогда
			НовыйЭл=0;
			НомерПикт=3;
			Примечание="ОК";
		Иначе
			Примечание="Код не найден в справочнике !";
			НовыйЭл=1;  
			НомерПикт=4;
		КонецЕсли;
		//=====   
		Если ((ФлагВсех=0) И (НовыйЭл=0)) Тогда	 
			Продолжить;	
		КонецЕсли;	
		НомСтр=НомСтр+1;
		ТабЗагрузки.НоваяСтрока();
		ТабЗагрузки.УстановитьЗначение(НомСтр,1,НомерПикт);
		ТабЗагрузки.УстановитьЗначение(НомСтр,2,КодПР);
		ТабЗагрузки.УстановитьЗначение(НомСтр,3,ИмяПр);
		ТабЗагрузки.УстановитьЗначение(НомСтр,4,Примечание);
		ТабЗагрузки.УстановитьЗначение(НомСтр,5,Сп);
		ТабЗагрузки.УстановитьЗначение(НомСтр,6,НовыйЭл);
		//=====
		
	КонецЦикла;                           
	ИнфСтрока="АСТОР: Ресторан";
	Форма.Обновить(1);
КонецПроцедуры

Процедура ЗагрузитьВалюты()
	Перем КолВ;
	Перем ШифрВ;
	Перем ИмяВ;
	Перем КодВ;
	Перем КурсВ;
	Перем ТипВ;
	Перем ДирВ;       
	
	ИнфСтрока="Загрузка валют";
	Форма.Обновить(1);
	ВидЗагрузки="Валюты";
	
	КомпДбф.КоличествоЗаписей("Валюты",СлужебнаяПерем);
	Ошибка();
	
	СпрВалРК=СоздатьОбъект("Справочник.ВалютыРК");
	ТабЗагрузки.Очистить();
	ТабЗагрузки.КоличествоКолонок(8);
	ТабЗагрузки.ВыводитьПиктограммы(1); 
	ТабЗагрузки.УстановитьПараметрыКолонки(1,,,,,3,,);
	ТабЗагрузки.УстановитьПараметрыКолонки(2,,,,"Код",8,,);
	ТабЗагрузки.УстановитьПараметрыКолонки(3,,,,"Наименование",18,,);
	ТабЗагрузки.УстановитьПараметрыКолонки(4,,,,"КодРК",8,,); 
	ТабЗагрузки.УстановитьПараметрыКолонки(5,,,,"Курс",12,,);
	ТабЗагрузки.УстановитьПараметрыКолонки(6,,,,"Тип",12,,); 
	ТабЗагрузки.УстановитьПараметрыКолонки(7,,,,"Примечание",20,,);
	
	ТабЗагрузки.ВидимостьКолонки("8",0);
	НомСтр=0;
	КомпДбф.КоличествоЗаписей("Валюты",КолВ);
	Для НомВал=0 по (КолВ-1) Цикл
		КомпДбф.ПозицияЗаписи("Валюты",НомВал);
		Ошибка();
		КомпДбф.ПолеПоИмени("Валюты","SIFR",ШифрВ);
		Ошибка();
		КомпДбф.ПолеПоИмени("Валюты","NAME",ИмяВ);
		Ошибка();
		КомпДбф.ПолеПоИмени("Валюты","CODE",КодВ);
		Ошибка();
		КомпДбф.ПолеПоИмени("Валюты","KURS",КурсВ);
		Ошибка();
		КомпДбф.ПолеПоИмени("Валюты","TIP",ТипВ);
		Ошибка();
		КомпДбф.ПолеПоИмени("Валюты","TREE",ДирВ);
		Ошибка();
		Если ДирВ<>"T" Тогда
			Курс=Число(КурсВ);
			Если Число(ТипВ)=1 Тогда
				ТипВал=Перечисление.ТипыВалютРК.Наличные;
			ИначеЕсли Число(ТипВ)=2 Тогда
				ТипВал=Перечисление.ТипыВалютРК.КредитныеКарты;
			ИначеЕсли Число(ТипВ)=3 Тогда
				ТипВал=Перечисление.ТипыВалютРК.Неплательщики;
			ИначеЕсли Число(ТипВ)=4 Тогда
				ТипВал=Перечисление.ТипыВалютРК.БезналичныеРасчеты;
			КонецЕсли;
			Если СпрВалРК.НайтиПоКоду(ШифрВ)=1 Тогда
				Если СпрВалРК.Курс.Получить(РабочаяДата())=Курс Тогда
					НовыйЭл=0; 
					НомерПикт=3;
					ПримечаниеВ="ОК";
				Иначе
					НовыйЭл=2;
					НомерПикт=5;
					ПримечаниеВ="Курс - "+СпрВалРК.Курс.Получить(РабочаяДата())+" !";
				КонецЕсли;
			Иначе             
				НовыйЭл=1;      
				НомерПикт=4;
				ПримечаниеВ="Код не найден в справочнике !!!";
			КонецЕсли; 
			//=====   
			Если ((ФлагВсех=0) И (НовыйЭл=0)) Тогда	 
				Продолжить;	
			КонецЕсли;	
			НомСтр=НомСтр+1;
			ТабЗагрузки.НоваяСтрока();             
			ТабЗагрузки.УстановитьЗначение(НомСтр,1,НомерПикт);
			ТабЗагрузки.УстановитьЗначение(НомСтр,2,ШифрВ);
			ТабЗагрузки.УстановитьЗначение(НомСтр,3,ИмяВ);
			ТабЗагрузки.УстановитьЗначение(НомСтр,4,КодВ);
			ТабЗагрузки.УстановитьЗначение(НомСтр,5,КурсВ);
			ТабЗагрузки.УстановитьЗначение(НомСтр,6,ТипВал);
			ТабЗагрузки.УстановитьЗначение(НомСтр,7,ПримечаниеВ);
			ТабЗагрузки.УстановитьЗначение(НомСтр,8,НовыйЭл);
			//=====	
		КонецЕсли;
	КонецЦикла;              
	ИнфСтрока="АСТОР: Ресторан";
	Форма.Обновить(1);
КонецПроцедуры



Процедура ВвестиМО()
	Перем РеквБлюда;
	Перем РеквВал;
	ЕстьДокЗаДату=0;
	МарОт=СоздатьОбъект("Документ.МарочныйОтчетРК");
	МарОт.ВыбратьДокументы(ДатаСмены,ДатаСмены);
	Пока МарОт.ПолучитьДокумент()=1 Цикл
		Если МарОт.ПометкаУдаления()=0 Тогда
			ЕстьДокЗаДату=1;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьДокЗаДату=1 Тогда
		Предупреждение("За "+ДатаСмены+" уже существует Марочный отчет !");
		Возврат;
	КонецЕсли;
	
	// Марочный отчет
	МарочныйОтчетНов=СоздатьОбъект("Документ.МарочныйОтчетРК");
	
	глСоздатьНовыйОбъект(МарочныйОтчетНов);
	МарочныйОтчетНов.IDD=ПолучитьУникальныйIDD();
	МарочныйОтчетНов.ДатаДок=ДатаСмены;
	МарочныйОтчетНов.ДатаСмены=ДатаСмены;
	МарочныйОтчетНов.Склад=Константа.СкладКухня;
	МарочныйОтчетНов.Валюта=Константа.БазоваяВалюта_R_Keeper;
	МарочныйОтчетНов.Дата_Курса=ДатаСмены;
	МарочныйОтчетНов.Курс=КурсДляВалюты(МарочныйОтчетНов.Валюта,ДатаСмены);
	МарочныйОтчетНов.Клиент=Константа.ОсновнойПокупатель;
	МарочныйОтчетНов.Фирма=Константа.ОсновнаяФирма;
	МарочныйОтчетНов.ТипУчета=0;
	//-----------------------------------
	
	
	//УдалитьВсе();
	МарочныйОтчетНов.ОплатаНал=0;
	МарочныйОтчетНов.ОплатаКредКард=0;
	МарочныйОтчетНов.ОплатаНеплат=0;
	МарочныйОтчетНов.ОплатаБезНал=0;
	СписокБлюд=СоздатьОбъект("СписокЗначений");
	СпрПрич=СоздатьОбъект("Справочник.ПричиныУдаления");
	ДокЧек=СоздатьОбъект("Документ.Чек");
	ДокЧек.ВыбратьДокументы(ДатаСмены,ДатаСмены);
	Пока ДокЧек.ПолучитьДокумент() = 1 Цикл
		УдЧек=ДокЧек.Удален;
		Если УдЧек>0 Тогда
			СпрПрич.НайтиПоКоду(УдЧек);
			Если СпрПрич.Списывать=Перечисление.Булево.Да Тогда
				Спис="СписыватьБезСуммы";
			Иначе
				Спис="НеСписывать";
			КонецЕсли;
		Иначе
			Спис="Списывать";
		КонецЕсли;
		Если Спис="НеСписывать" Тогда
			Продолжить;
		КонецЕсли;
		
		ОН=0;
		ОКК=0;
		ОНП=0;
		ОБН=0;
		Если ДокЧек.Проведен()=1 Тогда
			
			Если ДокЧек.ТипВалюты=Перечисление.ТипыВалютРК.Наличные Тогда
				ОН=ДокЧек.ОплатаБаз;
				ОКК=0;
				ОНП=0;
				ОБН=0;
			ИначеЕсли ДокЧек.ТипВалюты=Перечисление.ТипыВалютРК.КредитныеКарты Тогда
				ОН=0;
				ОКК=ДокЧек.ОплатаБаз;
				ОНП=0;
				ОБН=0;
			ИначеЕсли ДокЧек.ТипВалюты=Перечисление.ТипыВалютРК.Неплательщики Тогда
				ОН=0;
				ОКК=0;
				ОНП=ДокЧек.ОплатаБаз;
				ОБН=0;
			ИначеЕсли ДокЧек.ТипВалюты=Перечисление.ТипыВалютРК.БезналичныеРасчеты Тогда
				ОН=0;
				ОКК=0;
				ОНП=0;
				ОБН=ДокЧек.ОплатаБаз;
			КонецЕсли;
			
			Если Спис="СписыватьБезСуммы" Тогда
				ОН=0;
				ОКК=0;
				ОНП=0;
				ОБН=0;
			КонецЕсли;
			
			МарочныйОтчетНов.ОплатаНал=МарочныйОтчетНов.ОплатаНал+ОН;
			МарочныйОтчетНов.ОплатаКредКард=МарочныйОтчетНов.ОплатаКредКард+ОКК;
			МарочныйОтчетНов.ОплатаНеплат=МарочныйОтчетНов.ОплатаНеплат+ОНП;
			МарочныйОтчетНов.ОплатаБезНал=МарочныйОтчетНов.ОплатаБезНал+ОБН;
			СкидкаПоЧеку=ДокЧек.Скидка;
			
			ДокЧек.ВыбратьСтроки();
			Пока ДокЧек.ПолучитьСтроку()=1 Цикл
				Если ДокЧек.Товар.Выбран()=1 Тогда
					ЧекТовар=ДокЧек.Товар;
					ЧекКоличество=ДокЧек.Количество;
					ЧекСумма=ДокЧек.Сумма*(1-СкидкаПоЧеку);
					ЧекНалог=ДокЧек.СуммаНП;
					Если Спис="СписыватьБезСуммы" Тогда
						ЧекСумма=0;
						ЧекНалог=0;
					КонецЕсли;
				Иначе
					Если ДокЧек.Модификатор.Выбран()=1 Тогда
						Если ДокЧек.Модификатор.ПодлежитСписанию=Перечисление.Булево.Да Тогда
							ЧекТовар=ДокЧек.Модификатор.Товар;
							ЧекКоличество=ДокЧек.Количество*ДокЧек.Модификатор.Количество.Получить(ДокЧек.ДатаСмены);
							ЧекСумма=0;
							ЧекНалог=0;
						Иначе
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Позиция = 0;
				РеквБлюда = "";
				Если СписокБлюд.РазмерСписка() = 0 Тогда
					РеквБлюда = Строка(ЧекКоличество) +  "~" + Строка(ЧекСумма) + "~" + Строка(ЧекНалог);
					СписокБлюд.ДобавитьЗначение(ЧекТовар, РеквБлюда);
				Иначе
					Позиция =  СписокБлюд.НайтиЗначение(ЧекТовар);
					Если Позиция <> 0 Тогда
						СписокБлюд.ПолучитьЗначение(Позиция, РеквБлюда);
						Кол = Число(ВыбратьЗначение(РеквБлюда, 1, "~"));
						Сум = Число(ВыбратьЗначение(РеквБлюда, 2, "~"));
						Нал = Число(ВыбратьЗначение(РеквБлюда, 3, "~"));
						РеквБлюда = Строка(ЧекКоличество + Кол) + "~" + Строка(ЧекСумма + Сум)+ "~" + Строка(ЧекНалог + Нал);
						СписокБлюд.УстановитьЗначение(Позиция, ЧекТовар, РеквБлюда);
					Иначе
						РеквБлюда = Строка(ЧекКоличество) + "~" + Строка(ЧекСумма) + "~" + Строка(ЧекНалог);
						СписокБлюд.ДобавитьЗначение(ЧекТовар, РеквБлюда);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Для Счет = 1 По СписокБлюд.РазмерСписка() Цикл
		РеквБлюда = "";
		МарочныйОтчетНов.НоваяСтрока();
		МарочныйОтчетНов.Товар = СписокБлюд.ПолучитьЗначение(Счет, РеквБлюда);
		МарочныйОтчетНов.Количество = Число(ВыбратьЗначение(РеквБлюда, 1, "~"));
		МарочныйОтчетНов.Сумма = Число(ВыбратьЗначение(РеквБлюда, 2, "~"));
		МарочныйОтчетНов.СуммаНП = Число(ВыбратьЗначение(РеквБлюда, 3, "~"));
		МарочныйОтчетНов.НДС=(МарочныйОтчетНов.Сумма-МарочныйОтчетНов.СуммаНП)*  ((ПроцентНДС(МарочныйОтчетНов.Товар.СтавкаНДС)/(100+ПроцентНДС(МарочныйОтчетНов.Товар.СтавкаНДС))));
		МарочныйОтчетНов.Коэффициент=1;
		МарочныйОтчетНов.Единица=МарочныйОтчетНов.Товар.БазоваяЕдиницаИзмерения;
	КонецЦикла;
	СписокБлюд = 0;
	Если   МарочныйОтчетНов.КоличествоСтрок()=0 Тогда
		Предупреждение("Марочный отчет пустой, проверте чеки за выбранную дату !");
	Иначе
		//Закомментировано Инсталлятором МОД:МарочныйОтчетНов.Записать();
		//Начало текста, вставленного Инсталлятором МОД
		ОбъектЗаписать(МарочныйОтчетНов, );
		//Конец текста, вставленного Инсталлятором МОД
		
		ОткрытьФорму(МарочныйОтчетНов.ТекущийДокумент());
	КонецЕсли;
	
	// Оплата чеков
	ОплатаЧековНов=СоздатьОбъект("Документ.ОплатаЧеков");
	глСоздатьНовыйОбъект(ОплатаЧековНов);
	ОплатаЧековНов.IDD=ПолучитьУникальныйIDD();
	ОплатаЧековНов.ДатаДок=ДатаСмены;
	ОплатаЧековНов.ДатаСмены=ДатаСмены;
	ОплатаЧековНов.Фирма=Константа.ОсновнаяФирма;
	ОплатаЧековНов.ТипУчета=0;
	//-------------------------
	
	//	УдалитьВсе();
	СписокТов=СоздатьОбъект("СписокЗначений");
	СписокТовБ=СоздатьОбъект("СписокЗначений");
	СписокТов10=СоздатьОбъект("СписокЗначений");
	СписокТов20=СоздатьОбъект("СписокЗначений");
	СписокУсл=СоздатьОбъект("СписокЗначений");
	СписокУслБ=СоздатьОбъект("СписокЗначений");
	СписокУсл10=СоздатьОбъект("СписокЗначений");
	СписокУсл20=СоздатьОбъект("СписокЗначений");
	СписокВал=СоздатьОбъект("СписокЗначений");
	СпрПрич=СоздатьОбъект("Справочник.ПричиныУдаления");
	ДокЧек=СоздатьОбъект("Документ.Чек");
	ДокЧек.ВыбратьДокументы(ДатаСмены,ДатаСмены);
	Пока ДокЧек.ПолучитьДокумент() = 1 Цикл
		УдЧек=ДокЧек.Удален;
		Если УдЧек>0 Тогда
			СпрПрич.НайтиПоКоду(УдЧек);
			Если СпрПрич.Списывать=Перечисление.Булево.Да Тогда
				Спис="СписыватьБезСуммы";
			Иначе
				Спис="НеСписывать";
			КонецЕсли;
		Иначе
			Спис="Списывать";
		КонецЕсли;
		Если ((Спис="НеСписывать") Или (Спис="СписыватьБезСуммы")) Тогда
			Продолжить;
		КонецЕсли;
		Если ДокЧек.Проведен()=1 Тогда
			// Для взаиморасчетов
			_СуммаТоваров=0;
			_СуммаТоваров20=0;
			_СуммаТоваров10=0;
			_СуммаТоваровБез=0;
			_СуммаУслуг=0;
			_СуммаУслуг20=0;
			_СуммаУслуг10=0;
			_СуммаУслугБез=0;
			ДокЧек.ВыбратьСтроки();
			Пока ДокЧек.ПолучитьСтроку()=1 Цикл
				Товар=ДокЧек.Товар;
				СумТов=ДокЧек.Сумма;
				Если  Товар.ВидТовара=Перечисление.ВидыТоваров.Услуга Тогда
					_СуммаУслуг=_СуммаУслуг+СумТов;
					Если Товар.СтавкаНДС=Перечисление.ЗначенияНДС.ОсновнаяСтавкаНДС Тогда
						_СуммаУслуг20=_СуммаУслуг20+СумТов;
					ИначеЕсли  Товар.СтавкаНДС=Перечисление.ЗначенияНДС.ЛьготнаяСтавкаНДС Тогда
						_СуммаУслуг10=_СуммаУслуг10+СумТов;
					ИначеЕсли  Товар.СтавкаНДС=Перечисление.ЗначенияНДС.НДС0 Тогда
						_СуммаУслугБез=_СуммаУслугБез+СумТов;
					КонецЕсли;
				Иначе
					_СуммаТоваров=_СуммаТоваров+СумТов;
					Если Товар.СтавкаНДС=Перечисление.ЗначенияНДС.ОсновнаяСтавкаНДС Тогда
						_СуммаТоваров20=_СуммаТоваров20+СумТов;
					ИначеЕсли  Товар.СтавкаНДС=Перечисление.ЗначенияНДС.ЛьготнаяСтавкаНДС Тогда
						_СуммаТоваров10=_СуммаТоваров10+СумТов;
					ИначеЕсли  Товар.СтавкаНДС=Перечисление.ЗначенияНДС.НДС0 Тогда
						_СуммаТоваровБез=_СуммаТоваровБез+СумТов;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если ДокЧек.Валюта.Выбран()=1 Тогда
				ЧекВалюта=ДокЧек.Валюта;
				ЧекСумма=ДокЧек.ОплатаБаз;
			КонецЕсли;
		КонецЕсли;
		Позиция = 0;
		РеквВал = "";
		Если СписокВал.РазмерСписка() = 0 Тогда
			РеквВал =Строка(ЧекСумма);
			СписокВал.ДобавитьЗначение(ЧекВалюта, РеквВал);
			СписокТов.ДобавитьЗначение(_СуммаТоваров, "");
			СписокТовБ.ДобавитьЗначение(_СуммаТоваровБез, "");
			СписокТов10.ДобавитьЗначение(_СуммаТоваров10, "");
			СписокТов20.ДобавитьЗначение(_СуммаТоваров20, "");
			СписокУсл.ДобавитьЗначение(_СуммаУслуг, "");
			СписокУслБ.ДобавитьЗначение(_СуммаУслугБез, "");
			СписокУсл10.ДобавитьЗначение(_СуммаУслуг10, "");
			СписокУсл20.ДобавитьЗначение(_СуммаУслуг20, "");
		Иначе
			Позиция =  СписокВал.НайтиЗначение(ЧекВалюта);
			Если Позиция <> 0 Тогда
				СписокВал.ПолучитьЗначение(Позиция, РеквВал);
				Сум = Число(ВыбратьЗначение(РеквВал, 1, "~"));
				РеквВал =Строка(ЧекСумма + Сум);
				СписокВал.УстановитьЗначение(Позиция, ЧекВалюта, РеквВал);
				ТовПром=СписокТов.ПолучитьЗначение(Позиция, "");
				ТовБПром=СписокТовБ.ПолучитьЗначение(Позиция, "");
				Тов10Пром=СписокТов10.ПолучитьЗначение(Позиция, "");
				Тов20Пром=СписокТов20.ПолучитьЗначение(Позиция, "");
				УслПром=СписокУсл.ПолучитьЗначение(Позиция, "");
				УслБПром=СписокУслБ.ПолучитьЗначение(Позиция, "");
				Усл10ПРом=СписокУсл10.ПолучитьЗначение(Позиция, "");
				Усл20Пром=СписокУсл20.ПолучитьЗначение(Позиция, "");
				СумТоваров=ТовПром+_СуммаТоваров;
				СумТоваровБез=ТовБПром+_СуммаТоваровБез;
				СумТоваров10=Тов10Пром+_СуммаТоваров10;
				СумТоваров20=Тов20Пром+_СуммаТоваров20;
				СумУслуг=УслПром+_СуммаУслуг;
				СумУслугБез=УслБПром+_СуммаУслугБез;
				СумУслуг10=Усл10Пром+_СуммаУслуг10;
				СумУслуг20=Усл20Пром+_СуммаУслуг20;
				СписокТов.УстановитьЗначение(Позиция,СумТоваров, "");
				СписокТовБ.УстановитьЗначение(Позиция,СумТоваровБез, "");
				СписокТов10.УстановитьЗначение(Позиция,СумТоваров10, "");
				СписокТов20.УстановитьЗначение(Позиция,СумТоваров20, "");
				СписокУсл.УстановитьЗначение(Позиция,СумУслуг, "");
				СписокУслБ.УстановитьЗначение(Позиция,СумУслугБез, "");
				СписокУсл10.УстановитьЗначение(Позиция,СумУслуг10, "");
				СписокУсл20.УстановитьЗначение(Позиция,СумУслуг20, "");
			Иначе
				РеквВал =Строка(ЧекСумма);
				СписокВал.ДобавитьЗначение(ЧекВалюта, РеквВал);
				СписокТов.ДобавитьЗначение(_СуммаТоваров, "");
				СписокТовБ.ДобавитьЗначение(_СуммаТоваровБез, "");
				СписокТов10.ДобавитьЗначение(_СуммаТоваров10, "");
				СписокТов20.ДобавитьЗначение(_СуммаТоваров20, "");
				СписокУсл.ДобавитьЗначение(_СуммаУслуг, "");
				СписокУслБ.ДобавитьЗначение(_СуммаУслугБез, "");
				СписокУсл10.ДобавитьЗначение(_СуммаУслуг10, "");
				СписокУсл20.ДобавитьЗначение(_СуммаУслуг20, "");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Счет = 1 По СписокВал.РазмерСписка() Цикл
		РеквВал = "";
		ОплатаЧековНов.НоваяСтрока();
		ОплатаЧековНов.ВалютаРК = СписокВал.ПолучитьЗначение(Счет, РеквВал);
		ОплатаЧековНов.Сумма = Число(ВыбратьЗначение(РеквВал, 1, "~"));
		ОплатаЧековНов.СуммаТоваров=СписокТов.ПолучитьЗначение(Счет, РеквВал);
		ОплатаЧековНов.СуммаТоваровБезНдс=СписокТовБ.ПолучитьЗначение(Счет, РеквВал);
		ОплатаЧековНов.СуммаТоваров10=СписокТов10.ПолучитьЗначение(Счет, РеквВал);
		ОплатаЧековНов.СуммаТоваров20=СписокТов20.ПолучитьЗначение(Счет, РеквВал);
		ОплатаЧековНов.СуммаУслуг=СписокУсл.ПолучитьЗначение(Счет, РеквВал);
		ОплатаЧековНов.СуммаУслугБезНДС=СписокУслБ.ПолучитьЗначение(Счет, РеквВал);
		ОплатаЧековНов.СуммаУслуг10=СписокУсл10.ПолучитьЗначение(Счет, РеквВал);
		ОплатаЧековНов.СуммаУслуг20=СписокУсл20.ПолучитьЗначение(Счет, РеквВал);
	КонецЦикла;
	СписокВал = 0;
	СписокТов=0;
	СписокТовБ=0;
	СписокТов10=0;
	СписокТов20=0;
	СписокУсл=0;
	СписокУслБ=0;
	СписокУсл10=0;
	СписокУсл20=0;
	//-------------------------
	
	Если   ОплатаЧековНов.КоличествоСтрок()=0 Тогда
		Предупреждение("Документ ""Оплата чеков"" пустой, проверте чеки за выбранную дату !");
	Иначе
		//Закомментировано Инсталлятором МОД:ОплатаЧековНов.Записать();
		//Начало текста, вставленного Инсталлятором МОД
		ОбъектЗаписать(ОплатаЧековНов, );
		//Конец текста, вставленного Инсталлятором МОД
		
		ОткрытьФорму(ОплатаЧековНов.ТекущийДокумент());
	КонецЕсли;
	
КонецПроцедуры



Процедура Загрузить()  
	ИнфСтрока="Загрузка данных";
	Форма.Обновить(1);
	Если ВидЗагрузки="Персонал" Тогда
		СпрСотр=СоздатьОбъект("Справочник.Сотрудники");
		СпрДолж=СоздатьОбъект("Справочник.Должности");
		КолСотр=ТабЗагрузки.КоличествоСтрок();
		Для КолС=1 по КолСотр Цикл
			ИмяП=ТабЗагрузки.ПолучитьЗначение(КолС,3);
			КодП=ТабЗагрузки.ПолучитьЗначение(КолС,2);
			ТипП=ТабЗагрузки.ПолучитьЗначение(КолС,6);  
			ФлагЗагрузки=ТабЗагрузки.ПолучитьЗначение(КолС,7); 
			Если ФлагЗагрузки=1 Тогда
				СпрДолж.НайтиПоРеквизиту("ТипРК",ТипП,1);
				Д=СпрДолж.ТекущийЭлемент();
				глСоздатьНовыйОбъект(СпрСотр);
				СпрСотр.Код=СтрЗаменить(ИмяП," ","");
				СпрСотр.Наименование=ИмяП;
				СпрСотр.КодРК=Число(КодП);
				СпрСотр.Должность=Д;
				//Закомментировано Инсталлятором МОД:СпрСотр.Записать();
				//Начало текста, вставленного Инсталлятором МОД
				ОбъектЗаписать(СпрСотр, );
				//Конец текста, вставленного Инсталлятором МОД
				
				ТабЗагрузки.УстановитьЗначение(КолС,7,0);
				ТабЗагрузки.УстановитьЗначение(КолС,1,3);
				ТабЗагрузки.УстановитьЗначение(КолС,5,"ОК");
			КонецЕсли;
		КонецЦикла;  
	ИначеЕсли ВидЗагрузки="Модификаторы" Тогда
		СпрМод=СоздатьОбъект("Справочник.Модификаторы");
		КолМод=ТабЗагрузки.КоличествоСтрок();
		
		Для КМ=1 по КолМод Цикл
			КодМодНов=ТабЗагрузки.ПолучитьЗначение(КМ,2);
			ИмяМодНов=ТабЗагрузки.ПолучитьЗначение(КМ,3);
			ФлагЗагрузки=ТабЗагрузки.ПолучитьЗначение(КМ,5); 
			Если ФлагЗагрузки=1 Тогда
				глСоздатьНовыйОбъект(СпрМод);
				СпрМод.Код=Число(КодМодНов);
				СпрМод.Наименование=ИмяМодНов;
				СпрМод.ПодлежитСписанию=Перечисление.Булево.Нет;
				//Закомментировано Инсталлятором МОД:СпрМод.Записать();
				//Начало текста, вставленного Инсталлятором МОД
				ОбъектЗаписать(СпрМод, );
				//Конец текста, вставленного Инсталлятором МОД
				
				ТабЗагрузки.УстановитьЗначение(КМ,5,0);  
				ТабЗагрузки.УстановитьЗначение(КМ,1,3);     
				ТабЗагрузки.УстановитьЗначение(КМ,4,"ОК");
			КонецЕсли;
		КонецЦикла;		 
	ИначеЕсли ВидЗагрузки="Причины" Тогда	
		СпрПр=СоздатьОбъект("Справочник.ПричиныУдаления");
		КолПр=ТабЗагрузки.КоличествоСтрок();
		Для КП=1 по КолПр Цикл 
			ПрНов=ТабЗагрузки.ПолучитьЗначение(КП,3);
			КодНовПр=ТабЗагрузки.ПолучитьЗначение(КП,2);
			СпНов=ТабЗагрузки.ПолучитьЗначение(КП,5);  
			ФлагЗагрузки=ТабЗагрузки.ПолучитьЗначение(КП,6); 
			Если ФлагЗагрузки=1 Тогда	
				глСоздатьНовыйОбъект(СпрПр);
				СпрПР.Код=Число(КодНовПР);
				СпрПР.Наименование=ПРНов;
				СпрПР.Списывать=СПНов;
				//Закомментировано Инсталлятором МОД:СпрПр.Записать();
				//Начало текста, вставленного Инсталлятором МОД
				ОбъектЗаписать(СпрПр, );
				//Конец текста, вставленного Инсталлятором МОД
				
				ТабЗагрузки.УстановитьЗначение(КП,6,0);
				ТабЗагрузки.УстановитьЗначение(КП,1,3);
				ТабЗагрузки.УстановитьЗначение(КП,4,"ОК");
			КонецЕсли;	
		КонецЦикла;
	ИначеЕсли ВидЗагрузки="Валюты" Тогда			
		СпрВал=СоздатьОбъект("Справочник.ВалютыРК");
		КолВал=ТабЗагрузки.КоличествоСтрок();
		Для КВ=1 по КолВал Цикл
			ВалНов=ТабЗагрузки.ПолучитьЗначение(КВ,3);
			КодРКНов=ТабЗагрузки.ПолучитьЗначение(КВ,4);
			КодНов=ТабЗагрузки.ПолучитьЗначение(КВ,2);
			ТипНов=ТабЗагрузки.ПолучитьЗначение(КВ,6);
			КурсНов=ТабЗагрузки.ПолучитьЗначение(КВ,5);
			ФлагЗагрузки=ТабЗагрузки.ПолучитьЗначение(КВ,8); 
			Если ФлагЗагрузки=1 Тогда
				глСоздатьНовыйОбъект(СпрВал);
				СпрВал.Код=Число(КодНов);
				СпрВал.Наименование=ВалНов;
				СпрВал.КодРК=Число(КодРКНов);
				СпрВал.Тип=ТипНов;
				//Закомментировано Инсталлятором МОД:СпрВал.Записать();
				//Начало текста, вставленного Инсталлятором МОД
				ОбъектЗаписать(СпрВал, );
				//Конец текста, вставленного Инсталлятором МОД
				
				СпрВал.Курс.Установить(РабочаяДата(),КурсНов);  
				ТабЗагрузки.УстановитьЗначение(КВ,8,0);   
				ТабЗагрузки.УстановитьЗначение(КВ,1,3);
				ТабЗагрузки.УстановитьЗначение(КВ,7,"ОК");
			ИначеЕсли ФлагЗагрузки=2 Тогда 
				СпрВал.НайтиПоКоду(КодНов);
				СпрВал.Курс.Установить(РабочаяДата(),КурсНов);	
				ТабЗагрузки.УстановитьЗначение(КВ,8,0);   
				ТабЗагрузки.УстановитьЗначение(КВ,1,3);
				ТабЗагрузки.УстановитьЗначение(КВ,7,"ОК");	
				
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ВидЗагрузки="Меню" Тогда
		СпрШифр=СоздатьОбъект("Справочник.ШифрыРК");
		СпрТов=СоздатьОбъект("Справочник.Номенклатура");	
		СпрТов.НайтиПоНаименованию("Блюда");
		Род=СпрТов.ТекущийЭлемент();
		СпрТов.ИспользоватьРодителя(Род);
		Кол=ТабЗагрузки.КоличествоСтрок();
		Для ККК=1 по кол Цикл
			ТовНов=ТабЗагрузки.ПолучитьЗначение(ККК,3);
			ШифрНов=Число(ТабЗагрузки.ПолучитьЗначение(ККК,4));
			КодРКНов=Число(ТабЗагрузки.ПолучитьЗначение(ККК,2));
			РодитБл=ТабЗагрузки.ПолучитьЗначение(ККК,6);
			ЦенаНов=Число(ТабЗагрузки.ПолучитьЗначение(ККК,5));
			ФлагЗагрузки=ТабЗагрузки.ПолучитьЗначение(ККК,8);
			
			Если ФлагЗагрузки=1 Тогда
				СпрТов.ИспользоватьРодителя(РодитБл);
				глСоздатьНовыйОбъект(СпрТов);
				СпрТов.КодРК=КодРКНов;
				СпрТов.Наименование=Строка(ТовНов);
				СпрТов.ПоАлфавиту=Translate_Descr(СпрТов.Наименование);
				СпрТов.ВидТовара=Перечисление.ВидыТоваров.Блюдо;
				СпрТов.СтавкаНДС=Перечисление.ЗначенияНДС.ОсновнаяСтавкаНдс;
				СпрТов.ВалютаПродажи=Константа.БазоваяВалюта_R_Keeper;
				СпрТов.ВалютаЗакупки=Константа.БазоваяВалюта;
				СпрТов.ВалютаУчета=Константа.БазоваяВалюта;
				СпрТов.КоличествоКалькуляции=1;
				СпрТов.БазоваяЕдиницаИзмерения=Перечисление.ЕдиницыИзмерения.Порция;
				СпрТов.ЕдиницаКалькуляции=Перечисление.ЕдиницыИзмерения.Порция;
				//Закомментировано Инсталлятором МОД:СпрТов.Записать();
				//Начало текста, вставленного Инсталлятором МОД
				ОбъектЗаписать(СпрТов, );
				//Конец текста, вставленного Инсталлятором МОД
				
				глСоздатьНовыйОбъект(СпрШифр);
				СпрШифр.Код=ШифрНов;
				СпрШифр.Товар=СпрТов.ТекущийЭлемент();
				СпрШифр.КодРк=СпрТов.КодРК;
				//Закомментировано Инсталлятором МОД:СпрШифр.Записать();
				//Начало текста, вставленного Инсталлятором МОД
				ОбъектЗаписать(СпрШифр, );
				//Конец текста, вставленного Инсталлятором МОД
				
				ТабЗагрузки.УстановитьЗначение(ККК,8,0);   
				ТабЗагрузки.УстановитьЗначение(ККК,1,3);
				ТабЗагрузки.УстановитьЗначение(ККК,7,"ОК");
			ИначеЕсли ФлагЗагрузки=2 Тогда
				СпрТов.НайтиПоРеквизиту("КодРК",КодРКНов,1);
				Тов=СпрТов.ТекущийЭлемент();
				глСоздатьНовыйОбъект(СпрШифр);
				СпрШифр.Код=ШифрНов;
				СпрШифр.Товар=Тов;
				СпрШифр.КодРк=КодРКНов;
				//Закомментировано Инсталлятором МОД:СпрШифр.Записать();
				//Начало текста, вставленного Инсталлятором МОД
				ОбъектЗаписать(СпрШифр, );
				//Конец текста, вставленного Инсталлятором МОД
				
				ТабЗагрузки.УстановитьЗначение(ККК,8,0);   
				ТабЗагрузки.УстановитьЗначение(ККК,1,3);
				ТабЗагрузки.УстановитьЗначение(ККК,7,"ОК");
			ИначеЕсли ФлагЗагрузки=3 Тогда	
				// !!! //
			ИначеЕсли ФлагЗагрузки=11 Тогда
				СпрТов.НайтиПоРеквизиту("КодРК",КодРКНов,1);
				//				СпрТов.Наименование=ТовНов;  
				СпрТов.ПоАлфавиту=Translate_Descr(СпрТов.Наименование);				
				//Закомментировано Инсталлятором МОД:СпрТов.Записать();
				//Начало текста, вставленного Инсталлятором МОД
				ОбъектЗаписать(СпрТов, );
				//Конец текста, вставленного Инсталлятором МОД
				
				ТабЗагрузки.УстановитьЗначение(ККК,8,0);   
				ТабЗагрузки.УстановитьЗначение(ККК,1,3);
				ТабЗагрузки.УстановитьЗначение(ККК,7,"ОК");
			ИначеЕсли ФлагЗагрузки=22 Тогда		
				СпрТов.НайтиПоРеквизиту("КодРК",КодРКНов,1);
				//Тов=СпрТов.ТекущийЭлемент();
				СпрТов.РозничнаяЦена.Установить(ДатаСмены,Число(ЦенаНов));   
				//Тов.РозничнаяЦена=ЦенаНов;
				ТабЗагрузки.УстановитьЗначение(ККК,8,0);   
				ТабЗагрузки.УстановитьЗначение(ККК,1,3);
				ТабЗагрузки.УстановитьЗначение(ККК,7,"ОК");
			КонецЕсли;
		КонецЦикла;	 
	ИначеЕсли ВидЗагрузки="МарочныйОтчет" Тогда        
		//****************************************************
		семСоздатьМарочныйОтчет();
		//Возврат;
		//МарОт=СоздатьОбъект("Документ.МарочныйОтчет");
		//МарочныйОтчетНов=СоздатьОбъект("Документ.МарочныйОтчет");
		//ПромТаб=СоздатьОбъект("ТаблицаЗначений");
		//ТабЗагрузки.Выгрузить(ПромТаб);
		//ПромТаб.Свернуть("7, 2, 1",);
		//ПромТаб.ВыбратьСтроки();
		//Пока ПромТаб.ПолучитьСтроку()=1 Цикл        
		//	// Проверка на дубли
		//	МарОт=СоздатьОбъект("Документ.МарочныйОтчет");
		//	МарОт.ВыбратьДокументы(ДатаСмены,ДатаСмены);          
		//	ЕстьМО=0;	
		//	Пока МарОт.ПолучитьДокумент()=1 Цикл
		//		Если ((МарОт.Загружен<>0)  
		//		и (МарОт.Склад=ПромТаб.Ст.Склад)  
		//		и (МарОт.Нал=ПромТаб.Нал)  
		//		и (МарОт.Клиент=ПромТаб.Клиент) 
		//		и (МарОт.ПометкаУдаления()=0)) Тогда
		//			Предупреждение("За выбранную дату существует Марочный отчет по клиенту "+ПромТаб.Клиент, 1);
		//			ЕстьМО=1;	
		//		КонецЕсли;
		//	КонецЦикла;		       
		//	Если ЕстьМО=1 Тогда
		//		Продолжить;
		//	КонецЕсли;	
		//	//**********************
		//	МарочныйОтчетНов.Новый();
		//	МарочныйОтчетНов.IDD=ПолучитьУникальныйIDD();
		//	МарочныйОтчетНов.ДатаДок=ДатаСмены;
		//	МарочныйОтчетНов.ДатаСмены=ДатаСмены;
		//	МарочныйОтчетНов.Склад=ПромТаб.Ст.Склад;
		//	МарочныйОтчетНов.Валюта=Константа.БазоваяВалюта_R_Keeper;
		//	МарочныйОтчетНов.Дата_Курса=ДатаСмены;
		//	МарочныйОтчетНов.Курс=КурсДляВалюты(МарочныйОтчетНов.Валюта,ДатаСмены);
		//	МарочныйОтчетНов.Клиент=ПромТаб.Клиент; 
		//	МарочныйОтчетНов.КлГруппа=?(ПромТаб.Клиент.КлГруппа.Выбран()=0,ПромТаб.Клиент,ПромТаб.Клиент.КлГруппа); 
		//	МарочныйОтчетНов.Нал=ПромТаб.Нал;
		//	МарочныйОтчетНов.Фирма=Константа.ОсновнаяФирма;
		//	МарочныйОтчетНов.ТипУчета=0;
		//	МарочныйОтчетНов.ИспользоватьНП=Перечисление.Булево.Да;
		//	МарочныйОтчетНов.Загружен=1;
		//	// заполняем таб часть    
		//	ТабЗагрузки.ВыбратьСтроки();
		//	Пока ТабЗагрузки.ПолучитьСтроку()=1 Цикл
		//		Если ТабЗагрузки.Ст<>ПромТаб.Ст Тогда
		//			Продолжить;
		//		КонецЕсли;	
		//		Если ТабЗагрузки.Нал<>ПромТаб.Нал Тогда
		//			Продолжить;
		//		КонецЕсли;	
		//		Если ТабЗагрузки.Клиент<>ПромТаб.Клиент Тогда
		//			Продолжить;
		//		КонецЕсли;	
		//		МарочныйОтчетНов.НоваяСтрока();
		//		МарочныйОтчетНов.ТовКод = ТабЗагрузки.Блюдо.Код;
		//		МарочныйОтчетНов.Товар = ТабЗагрузки.Блюдо;
		//		МарочныйОтчетНов.Количество = ТабЗагрузки.Кол;
		//		МарочныйОтчетНов.Сумма = ТабЗагрузки.Сум;  
		//		Если МарочныйОтчетНов.Количество<>0 Тогда
		//			МарочныйОтчетНов.Цена = Окр(МарочныйОтчетНов.Сумма/МарочныйОтчетНов.Количество,2,1);
		//		Иначе
		//			МарочныйОтчетНов.Цена = 0;
		//		КонецЕсли;
		//		МарочныйОтчетНов.СуммаНП = ТабЗагрузки.НП;
		//		МарочныйОтчетНов.НДС=(МарочныйОтчетНов.Сумма-МарочныйОтчетНов.СуммаНП)*  ((ПроцентНДС(МарочныйОтчетНов.Товар.СтавкаНДС)/(100+ПроцентНДС(МарочныйОтчетНов.Товар.СтавкаНДС))));
		//		
		//		МарочныйОтчетНов.Единица=глБазоваяЕдиницаИзмерения(МарочныйОтчетНов.Товар);
		//		МарочныйОтчетНов.Коэффициент=МарочныйОтчетНов.Единица.Коэффициент;
		//		
		//		//				СпрЕдИзм=СоздатьОбъект("Справочник.Единицы");
		//		//				СпрЕдИзм.ИспользоватьВладельца(МарочныйОтчетНов.Товар);
		//		//				СпрЕдИзм.ВыбратьЭлементы();
		//		//				Пока СпрЕдИзм.ПолучитьЭлемент()>0 Цикл
		//		//					Если СпрЕдИзм.Единица=МарочныйОтчетНов.Товар.БазоваяЕдиницаИзмерения Тогда
		//		//						МарочныйОтчетНов.Единица=СпрЕдИзм.ТекущийЭлемент();
		//		//						МарочныйОтчетНов.Коэффициент=СпрЕдИзм.Коэффициент;
		//		//						Прервать;
		//		//					КонецЕсли;
		//		//				КонецЦикла;
		//	КонецЦикла;
		//	// ************************
		//	Если   МарочныйОтчетНов.КоличествоСтрок()=0 Тогда
		//		Предупреждение("Марочный отчет пустой, проверьте чеки за выбранную дату !");
		//	Иначе
		//		//Закомментировано Инсталлятором МОД:МарочныйОтчетНов.Записать();
		//		//Начало текста, вставленного Инсталлятором МОД
		//		ОбъектЗаписать(МарочныйОтчетНов, );
		//		//Конец текста, вставленного Инсталлятором МОД
		//		
		//		ОткрытьФорму(МарочныйОтчетНов.ТекущийДокумент());
		//	КонецЕсли;
		//КонецЦикла;	
		
		//****************************************************
		//ЕстьДокЗаДату=0;
		//МарОт=СоздатьОбъект("Документ.МарочныйОтчет");
		//МарОт.ВыбратьДокументы(ДатаСмены,ДатаСмены);
		//Пока МарОт.ПолучитьДокумент()=1 Цикл
		//	Если ((МарОт.Загружен<>0) и (МарОт.ПометкаУдаления()=0)) Тогда
		//		//** проверка **
		//		НовСумма=0;
		//		Для КолСтрМО=1 по ТабЗагрузки.КоличествоСтрок() Цикл
		//			НовСумма=НовСумма+ТабЗагрузки.ПолучитьЗначение(КолСтрМО,5);  
		//		КонецЦикла;
		//		Если МарОт.Итог("Сумма")<>НовСумма Тогда
		//		    Предупреждение("Изменилась сумма документа !");	
		//		КонецЕсли;
		//		
		//		//**************
		//		ЕстьДокЗаДату=1;
		//	КонецЕсли;
		//КонецЦикла;
		//Если ЕстьДокЗаДату=1 Тогда
		//	Предупреждение("За "+ДатаСмены+" уже существует Марочный отчет !",2);
		//	ИнфСтрока="1С-Рарус: Ресторан";
		//    Форма.Обновить(1);
		//	Возврат;
		//КонецЕсли;
		//
		//// Марочный отчет
		//МарочныйОтчетНов=СоздатьОбъект("Документ.МарочныйОтчет");
		//
		//МарочныйОтчетНов.Новый();
		//МарочныйОтчетНов.ДатаДок=ДатаСмены;
		//МарочныйОтчетНов.ДатаСмены=ДатаСмены;
		//МарочныйОтчетНов.Склад=Константа.СкладКухня;
		//МарочныйОтчетНов.Валюта=Константа.БазоваяВалюта_R_Keeper;
		//МарочныйОтчетНов.Дата_Курса=ДатаСмены;
		//МарочныйОтчетНов.Курс=КурсДляВалюты(МарочныйОтчетНов.Валюта,ДатаСмены);
		//МарочныйОтчетНов.Клиент=Константа.ОсновнойПокупатель;
		//МарочныйОтчетНов.Фирма=Константа.ОсновнаяФирма;
		//МарочныйОтчетНов.ТипУчета=1;
		//МарочныйОтчетНов.ИспользоватьНП=Перечисление.Булево.Да;
		//МарочныйОтчетНов.Загружен=1;
		//
		////МарочныйОтчетНов.ОплатаНал=0;
		////МарочныйОтчетНов.ОплатаКредКард=0;
		////МарочныйОтчетНов.ОплатаНеплат=0;
		////МарочныйОтчетНов.ОплатаБезНал=0;  
		//
		//Для Счет = 1 По ТабЗагрузки.КоличествоСтрок() Цикл
		//	МарочныйОтчетНов.НоваяСтрока();
		//	МарочныйОтчетНов.Товар = ТабЗагрузки.ПолучитьЗначение(Счет,2);
		//	МарочныйОтчетНов.Количество = ТабЗагрузки.ПолучитьЗначение(Счет,3);
		//	МарочныйОтчетНов.Сумма = ТабЗагрузки.ПолучитьЗначение(Счет,5);  
		//	Если МарочныйОтчетНов.Количество<>0 Тогда
		//		МарочныйОтчетНов.Цена = Окр(МарочныйОтчетНов.Сумма/МарочныйОтчетНов.Количество,2,1);
		//	Иначе
		//		МарочныйОтчетНов.Цена = 0;
		//	КонецЕсли;
		//	МарочныйОтчетНов.СуммаНП = ТабЗагрузки.ПолучитьЗначение(Счет,6);
		//	МарочныйОтчетНов.НДС=(МарочныйОтчетНов.Сумма-МарочныйОтчетНов.СуммаНП)*  ((ПроцентНДС(МарочныйОтчетНов.Товар.СтавкаНДС)/(100+ПроцентНДС(МарочныйОтчетНов.Товар.СтавкаНДС))));
		//	МарочныйОтчетНов.Коэффициент=1;
		//	МарочныйОтчетНов.Единица=МарочныйОтчетНов.Товар.БазоваяЕдиницаИзмерения;
		//КонецЦикла;
		////СписокБлюд = 0;
		//Если   МарочныйОтчетНов.КоличествоСтрок()=0 Тогда
		//	Предупреждение("Марочный отчет пустой, проверьте чеки за выбранную дату !");
		//Иначе
		//	МарочныйОтчетНов.Записать();
		//	ОткрытьФорму(МарочныйОтчетНов.ТекущийДокумент());
		//КонецЕсли;
		//
		//
	ИначеЕсли ВидЗагрузки="ОплатаЧеков" Тогда
		семСоздатьОплатуЧеков();
		//ЕстьОЧДату=0;
		//ОпЧ=СоздатьОбъект("Документ.ОплатаЧеков");
		//ОпЧ.ВыбратьДокументы(ДатаСмены,ДатаСмены);
		//Пока ОпЧ.ПолучитьДокумент()=1 Цикл
		//	Если ОпЧ.ПометкаУдаления()=0 Тогда
		//		//** проверка **
		//		НовСумма=0;
		//		Для КолСтрОЧ=1 по ТабЗагрузки.КоличествоСтрок() Цикл
		//			НовСумма=НовСумма+ТабЗагрузки.ПолучитьЗначение(КолСтрОЧ,5);  
		//		КонецЦикла;
		//		Если ОпЧ.Итог("Сумма")<>НовСумма Тогда
		//			Предупреждение("Изменилась сумма документа !");	
		//		КонецЕсли;
		//		//**************		
		//		
		//		ЕстьДокЗаДату=1;
		//	КонецЕсли;
		//КонецЦикла;
		//Если ЕстьДокЗаДату=1 Тогда
		//	Предупреждение("За "+ДатаСмены+" уже существует Оплата чеков !",2);  
		//	ИнфСтрока="АСТОР: Ресторан";
		//	Форма.Обновить(1);
		//	Возврат;
		//КонецЕсли;

		//ОплатаЧековНов=СоздатьОбъект("Документ.ОплатаЧеков");
		//ОплатаЧековНов.Новый();
		//ОплатаЧековНов.IDD=ПолучитьУникальныйIDD();
		//ОплатаЧековНов.ДатаДок=ДатаСмены;
		//ОплатаЧековНов.ДатаСмены=ДатаСмены;
		//ОплатаЧековНов.Фирма=Константа.ОсновнаяФирма;
		//ОплатаЧековНов.ТипУчета=0; 
		//Для Счет = 1 По ТабЗагрузки.КоличествоСтрок() Цикл
		//	РеквВал = "";
		//	ОплатаЧековНов.НоваяСтрока();
		//	ОплатаЧековНов.ВалютаРК = ТабЗагрузки.ПолучитьЗначение(Счет,1);
		//	ОплатаЧековНов.Сумма = ТабЗагрузки.ПолучитьЗначение(Счет,2);
		//	ОплатаЧековНов.СуммаТоваров=ТабЗагрузки.ПолучитьЗначение(Счет,3);
		//	ОплатаЧековНов.СуммаТоваровБезНдс=ТабЗагрузки.ПолучитьЗначение(Счет,4);
		//	ОплатаЧековНов.СуммаТоваров10=ТабЗагрузки.ПолучитьЗначение(Счет,5);
		//	ОплатаЧековНов.СуммаТоваров20=ТабЗагрузки.ПолучитьЗначение(Счет,6);
		//	ОплатаЧековНов.СуммаУслуг=ТабЗагрузки.ПолучитьЗначение(Счет,7);
		//	ОплатаЧековНов.СуммаУслугБезНДС=ТабЗагрузки.ПолучитьЗначение(Счет,8);
		//	ОплатаЧековНов.СуммаУслуг10=ТабЗагрузки.ПолучитьЗначение(Счет,9);
		//	ОплатаЧековНов.СуммаУслуг20=ТабЗагрузки.ПолучитьЗначение(Счет,10);
		//КонецЦикла;
		//Если   ОплатаЧековНов.КоличествоСтрок()=0 Тогда
		//	Предупреждение("Документ ""Оплата чеков"" пустой, проверте чеки за выбранную дату !");
		//Иначе
		//	//Закомментировано Инсталлятором МОД:ОплатаЧековНов.Записать();
		//	//Начало текста, вставленного Инсталлятором МОД
		//	ОбъектЗаписать(ОплатаЧековНов, );
		//	//Конец текста, вставленного Инсталлятором МОД
		//	
		//	ОткрытьФорму(ОплатаЧековНов.ТекущийДокумент());
		//КонецЕсли;
	Иначе           
		Возврат;
	КонецЕсли;	
	ИнфСтрока="АСТОР: Ресторан";
	Форма.Обновить(1);
КонецПроцедуры  

Процедура КнопкаМеню()  
	ИнфСтрока="Проверка групп";    
	Форма.Обновить(1);
	ЗагрузитьГруппы();
	ИнфСтрока="Загрузка меню"; 
	Форма.Обновить(1);
	ЗагрузитьМеню();
	
	ИнфСтрока="АСТОР: Ресторан"; 
	Форма.Обновить(1);
КонецПроцедуры	

Процедура   ЗагрузитьМарочныйОтчет() 
	ИнфСтрока="Загрузка марочного отчета";
	Форма.Обновить(1);
	ВидЗагрузки="МарочныйОтчет";
	ТабЗагрузки.Очистить();               
	
	//ТабЗагрузки.КоличествоКолонок(7); 
	//ТабЗагрузки.УстановитьПараметрыКолонки(1,,,,"№",4,,);
	//ТабЗагрузки.УстановитьПараметрыКолонки(2,,,,"Блюдо",36,,);
	//ТабЗагрузки.УстановитьПараметрыКолонки(3,,,,"Кол-во",9,,);
	//ТабЗагрузки.УстановитьПараметрыКолонки(4,,,,"Ед.",9,,);   
	//ТабЗагрузки.УстановитьПараметрыКолонки(5,,,,"Сумма",16,,);
	//ТабЗагрузки.УстановитьПараметрыКолонки(6,,,,"НП",10,,);  
	//ТабЗагрузки.УстановитьПараметрыКолонки(7,,,,"Станция",10,,);      
	// перпишем
	ТабЗагрузки.НоваяКолонка("Клиент",,,,"Клиент",8,,); 
	ТабЗагрузки.НоваяКолонка("Нал",,,,"Нал",3,,);
	ТабЗагрузки.НоваяКолонка("Ном",,,,"№",4,,);
	ТабЗагрузки.НоваяКолонка("Блюдо",,,,"Блюдо",36,,);
	ТабЗагрузки.НоваяКолонка("Кол",,,,"Кол-во",9,,);
	ТабЗагрузки.НоваяКолонка("Ед",,,,"Ед.",9,,);   
	ТабЗагрузки.НоваяКолонка("Сум",,,,"Сумма",16,,);
	ТабЗагрузки.НоваяКолонка("Нп",,,,"НП",10,,);  
	ТабЗагрузки.НоваяКолонка("Ст",,,,"Станция",10,,);
	ТабЗагрузки.НоваяКолонка("Склад",,,,"Склад",10,,);
	//************
	СпрПрич=СоздатьОбъект("Справочник.ПричиныУдаления");
	ДокЧек=СоздатьОбъект("Документ.Чек");
	ДокЧек.ВыбратьДокументы(ДатаСмены,ДатаСмены);
	Пока ДокЧек.ПолучитьДокумент() = 1 Цикл         
		
		Если ДокЧек.ПометкаУдаления()=1 Тогда
			Продолжить;
		КонецЕсли;
		УдЧек=ДокЧек.Удален;
		Если УдЧек>0 Тогда
			СпрПрич.НайтиПоКоду(УдЧек);
			Если СпрПрич.Списывать=Перечисление.Булево.Да Тогда
				Спис="СписыватьБезСуммы";
			Иначе
				Спис="НеСписывать";
			КонецЕсли;
		Иначе
			Спис="Списывать";
		КонецЕсли;
		Если Спис="НеСписывать" Тогда
			Продолжить;
		КонецЕсли; 
		//***********************************************************
		//<<Алгоритм Успеха>> (begin)
		_Нал = ?((ДокЧек.Валюта.Тип = Перечисление.ТипыВалютРК.Наличные) ИЛИ (ДокЧек.Валюта.Тип = Перечисление.ТипыВалютРК.КредитныеКарты) ИЛИ (ДокЧек.Валюта.Тип = Перечисление.ТипыВалютРК.ПодарочныеКарты), Да, Нет);
		_Клиент = ?(_Нал = Да, Константа.ЧастноеЛицо, ?(ДокЧек.Валюта.Клиент.Выбран()=1, ДокЧек.Валюта.Клиент, Константа.ОсновнойПокупатель));
		//<<Алгоритм Успеха>> (end) 
		//************************************************************
		СкидкаПоЧеку=ДокЧек.Скидка;
		
		ДокЧек.ВыбратьСтроки();
		Пока ДокЧек.ПолучитьСтроку()=1 Цикл
			Если ДокЧек.Товар.Выбран()=1 Тогда
				ЧекТовар=ДокЧек.Товар;
				ЧекКоличество=ДокЧек.Количество;
				ЧекСумма=ДокЧек.Сумма*(1-СкидкаПоЧеку);
				ЧекНалог=ДокЧек.СуммаНП;                 
				ЧекСтанция=ДокЧек.Станция;
				Если Спис="СписыватьБезСуммы" Тогда
					ЧекСумма=0;
					ЧекНалог=0;
				КонецЕсли;
			Иначе      
				Продолжить;	
			КонецЕсли;
			Если ДокЧек.Модификатор.Выбран()=1 Тогда
				Если ДокЧек.Модификатор.ПодлежитСписанию=Перечисление.Булево.Да Тогда
					ЧекТовар=ДокЧек.Модификатор.Товар;
					//Количество с учетом введенной ед. списания
					ЧекКоличество=ДокЧек.Количество*(ДокЧек.Модификатор.Количество.Получить(ДокЧек.ДатаСмены)*ДокЧек.Модификатор.Коэффициент);
					ЧекСумма=0;
					ЧекНалог=0;       
					ЧекСтанция=ДокЧек.Станция; 
				Иначе
					Продолжить;  
				КонецЕсли;
			КонецЕсли;
			//---
			// заполним таблицу
			НомСтр=НомСтр+1;
			ТабЗагрузки.НоваяСтрока();                                
			//***********************************************************
			//<<Алгоритм Успеха>> (begin)
			ТабЗагрузки.Клиент 	= _Клиент;
			ТабЗагрузки.Нал		= _Нал;			
			//<<Алгоритм Успеха>> (end) 
			//************************************************************
			ТабЗагрузки.Ном=НомСтр;
			ТабЗагрузки.Блюдо=ЧекТовар;
			ТабЗагрузки.Кол=ЧекКоличество;
			ТабЗагрузки.Ед=ЧекТовар.БазоваяЕдиницаИзмерения;
			ТабЗагрузки.Сум=ЧекСумма;
			ТабЗагрузки.Нп=ЧекНалог;   
			ТабЗагрузки.Ст=ЧекСтанция;   	  
			ТабЗагрузки.Склад = семПолучитьСклад( ЧекТовар, ЧекСтанция );   	  
			
			//---
		КонецЦикла;	
		
		
	КонецЦикла;	
	ТабЗагрузки.Свернуть("1,2,4,9,10","5,7,8");
	//***********************************************************
	//<<Алгоритм Успеха>> (begin)
	ТабЗагрузки.Сортировать("+2,1");	
	//<<Алгоритм Успеха>> (end) 
	//************************************************************
	
КонецПроцедуры

Процедура ЗагрузитьМарочныйОтчет_()  
	Перем СтрДубль;
	ИнфСтрока="Загрузка марочного отчета";
	Форма.Обновить(1);
	ВидЗагрузки="МарочныйОтчет";
	
	ТабЗагрузки.Очистить();
	ТабЗагрузки.КоличествоКолонок(7); 
	ТабЗагрузки.УстановитьПараметрыКолонки(1,,,,"№",4,,);
	ТабЗагрузки.УстановитьПараметрыКолонки(2,,,,"Блюдо",36,,);
	ТабЗагрузки.УстановитьПараметрыКолонки(3,,,,"Кол-во",9,,);
	ТабЗагрузки.УстановитьПараметрыКолонки(4,,,,"Ед.",9,,);   
	ТабЗагрузки.УстановитьПараметрыКолонки(5,,,,"Сумма",16,,);
	ТабЗагрузки.УстановитьПараметрыКолонки(6,,,,"НП",10,,);  
	ТабЗагрузки.УстановитьПараметрыКолонки(7,,,,"Станция",10,,); 
	НомСтр=0;
	СпрПрич=СоздатьОбъект("Справочник.ПричиныУдаления");
	ДокЧек=СоздатьОбъект("Документ.Чек");
	ДокЧек.ВыбратьДокументы(ДатаСмены,ДатаСмены);
	Пока ДокЧек.ПолучитьДокумент() = 1 Цикл
		УдЧек=ДокЧек.Удален;
		Если УдЧек>0 Тогда
			СпрПрич.НайтиПоКоду(УдЧек);
			Если СпрПрич.Списывать=Перечисление.Булево.Да Тогда
				Спис="СписыватьБезСуммы";
			Иначе
				Спис="НеСписывать";
			КонецЕсли;
		Иначе
			Спис="Списывать";
		КонецЕсли;
		Если Спис="НеСписывать" Тогда
			Продолжить;
		КонецЕсли; 
		
		СкидкаПоЧеку=ДокЧек.Скидка;
		
		ДокЧек.ВыбратьСтроки();
		Пока ДокЧек.ПолучитьСтроку()=1 Цикл
			Если ДокЧек.Товар.Выбран()=1 Тогда
				ЧекТовар=ДокЧек.Товар;
				ЧекКоличество=ДокЧек.Количество;
				ЧекСумма=ДокЧек.Сумма*(1-СкидкаПоЧеку);
				ЧекНалог=ДокЧек.СуммаНП;                 
				ЧекСтанция=ДокЧек.Станция;
				Если Спис="СписыватьБезСуммы" Тогда
					ЧекСумма=0;
					ЧекНалог=0;
				КонецЕсли;
			Иначе
				Если ДокЧек.Модификатор.Выбран()=1 Тогда
					Если ДокЧек.Модификатор.ПодлежитСписанию=Перечисление.Булево.Да Тогда
						ЧекТовар=ДокЧек.Модификатор.Товар;
						ЧекКоличество=ДокЧек.Количество*ДокЧек.Модификатор.Количество.Получить(ДокЧек.ДатаСмены);
						ЧекСумма=0;
						ЧекНалог=0;       
						ЧекСтанция=ДокЧек.Станция;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Позиция = 0;
			Если ТабЗагрузки.КоличествоСтрок() = 0 Тогда
				НомСтр=НомСтр+1;
				ТабЗагрузки.НоваяСтрока();
				ТабЗагрузки.УстановитьЗначение(НомСтр,1,НомСтр);
				ТабЗагрузки.УстановитьЗначение(НомСтр,2,ЧекТовар);
				ТабЗагрузки.УстановитьЗначение(НомСтр,3,ЧекКоличество);
				ТабЗагрузки.УстановитьЗначение(НомСтр,4,ЧекТовар.БазоваяЕдиницаИзмерения);
				ТабЗагрузки.УстановитьЗначение(НомСтр,5,ЧекСумма);
				ТабЗагрузки.УстановитьЗначение(НомСтр,6,ЧекНалог);   
				ТабЗагрузки.УстановитьЗначение(НомСтр,7,ЧекСтанция);   
			Иначе
				Позиция=ТабЗагрузки.НайтиЗначение(ЧекТовар,СтрДубль,2);
				Если Позиция <> 0 Тогда
					ПромКол=ТабЗагрузки.ПолучитьЗначение(СтрДубль,3);
					ПромСум=ТабЗагрузки.ПолучитьЗначение(СтрДубль,5);
					ПромНал=ТабЗагрузки.ПолучитьЗначение(СтрДубль,6);
					ТабЗагрузки.УстановитьЗначение(СтрДубль,3,ЧекКоличество+ПромКол);
					ТабЗагрузки.УстановитьЗначение(СтрДубль,5,ЧекСумма+ПромСум);
					ТабЗагрузки.УстановитьЗначение(СтрДубль,6,ЧекНалог+ПромНал);
				Иначе
					НомСтр=НомСтр+1;      
					ТабЗагрузки.НоваяСтрока();
					ТабЗагрузки.УстановитьЗначение(НомСтр,1,НомСтр);
					ТабЗагрузки.УстановитьЗначение(НомСтр,2,ЧекТовар);
					ТабЗагрузки.УстановитьЗначение(НомСтр,3,ЧекКоличество);     
					ТабЗагрузки.УстановитьЗначение(НомСтр,4,ЧекТовар.БазоваяЕдиницаИзмерения);
					ТабЗагрузки.УстановитьЗначение(НомСтр,5,ЧекСумма);
					ТабЗагрузки.УстановитьЗначение(НомСтр,6,ЧекНалог);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры            


Процедура ЗагрузитьОплатуЧеков()
	ИнфСтрока="Загрузка оплаты чеков";
	Форма.Обновить(1);
	ВидЗагрузки="ОплатаЧеков";
	
	ТабЗагрузки.Очистить();  
	ТабЗагрузки.НоваяКолонка("Валюта",,,,"Валюта",48,,);
	ТабЗагрузки.НоваяКолонка("Сумма",,,,"Сумма",24,,);
	ТабЗагрузки.НоваяКолонка("СумТов",,,,"СумТов",10,,);   
	ТабЗагрузки.НоваяКолонка("СумТовБезНДС",,,,"СумТовБезНДС",10,,);
	ТабЗагрузки.НоваяКолонка("СумТов10",,,,"СумТов10",10,,);
	ТабЗагрузки.НоваяКолонка("СумТов20",,,,"СумТов20",10,,);
	ТабЗагрузки.НоваяКолонка("СумУсл",,,,"СумУсл",10,,);
	ТабЗагрузки.НоваяКолонка("СумУслБезНДС",,,,"СумУслБезНДС",10,,);
	ТабЗагрузки.НоваяКолонка("СумУсл10",,,,"СумУсл10",10,,);
	ТабЗагрузки.НоваяКолонка("СумУсл20",,,,"СумУсл20",10,,);   
	ТабЗагрузки.НоваяКолонка("Склад",,,,"Склад",20,,);
	ТабЗагрузки.НоваяКолонка("Товар",,,,"Товар",20,,);
	
	СпрПрич=СоздатьОбъект("Справочник.ПричиныУдаления");
	ДокЧек=СоздатьОбъект("Документ.Чек");
	ДокЧек.ВыбратьДокументы(ДатаСмены,ДатаСмены);
	Пока ДокЧек.ПолучитьДокумент() = 1 Цикл
		УдЧек=ДокЧек.Удален;
		Если УдЧек>0 Тогда
			СпрПрич.НайтиПоКоду(УдЧек);
			Если СпрПрич.Списывать=Перечисление.Булево.Да Тогда
				// -- Рыстенко
				// Спис="СписыватьБезСуммы";
				Спис="Списывать";
			Иначе
				Спис="НеСписывать";
			КонецЕсли;
		Иначе
			Спис="Списывать";
		КонецЕсли;
		Если ((Спис="НеСписывать") Или (Спис="СписыватьБезСуммы")) Тогда
			Продолжить;
		КонецЕсли;
		Если ДокЧек.Проведен()=1 Тогда
			// Для взаиморасчетов
			_СуммаТоваров=0;
			_СуммаТоваров20=0;
			_СуммаТоваров10=0;
			_СуммаТоваровБез=0;
			_СуммаУслуг=0;
			_СуммаУслуг20=0;
			_СуммаУслуг10=0;
			_СуммаУслугБез=0;
			ДокЧек.ВыбратьСтроки();    
			ЧекСумма=0;
			Пока ДокЧек.ПолучитьСтроку()=1 Цикл
				Товар=ДокЧек.Товар;
				СумТов=ДокЧек.Сумма; 
				ЧекСумма=ЧекСумма+СумТов;
				Если  Товар.ВидТовара=Перечисление.ВидыТоваров.Услуга Тогда
					_СуммаУслуг=_СуммаУслуг+СумТов;
					Если Товар.СтавкаНДС=Перечисление.ЗначенияНДС.ОсновнаяСтавкаНДС Тогда
						_СуммаУслуг20=_СуммаУслуг20+СумТов;
					ИначеЕсли  Товар.СтавкаНДС=Перечисление.ЗначенияНДС.ЛьготнаяСтавкаНДС Тогда
						_СуммаУслуг10=_СуммаУслуг10+СумТов;
					ИначеЕсли  Товар.СтавкаНДС=Перечисление.ЗначенияНДС.НДС0 Тогда
						_СуммаУслугБез=_СуммаУслугБез+СумТов;
					КонецЕсли;
				Иначе
					_СуммаТоваров=_СуммаТоваров+СумТов;
					Если Товар.СтавкаНДС=Перечисление.ЗначенияНДС.ОсновнаяСтавкаНДС Тогда
						_СуммаТоваров20=_СуммаТоваров20+СумТов;
					ИначеЕсли  Товар.СтавкаНДС=Перечисление.ЗначенияНДС.ЛьготнаяСтавкаНДС Тогда
						_СуммаТоваров10=_СуммаТоваров10+СумТов;
					ИначеЕсли  Товар.СтавкаНДС=Перечисление.ЗначенияНДС.НДС0 Тогда
						_СуммаТоваровБез=_СуммаТоваровБез+СумТов;
					КонецЕсли;
				КонецЕсли;
				_Склад = семПолучитьСклад( Товар, ДокЧек.Станция );   	  
			КонецЦикла;
			Если ДокЧек.Валюта.Выбран()=1 Тогда
				ЧекВалюта=ДокЧек.Валюта;
			КонецЕсли;
		КонецЕсли;
		
		НомСтр=НомСтр+1;
		ТабЗагрузки.НоваяСтрока();
		ТабЗагрузки.Валюта=ЧекВалюта;
		ТабЗагрузки.Сумма=ЧекСумма;
		ТабЗагрузки.СумТов=_СуммаТоваров;
		ТабЗагрузки.СумТовБезНДС=_СуммаТоваровБез;
		ТабЗагрузки.СумТов10=_СуммаТоваров10;
		ТабЗагрузки.СумТов20=_СуммаТоваров20;
		ТабЗагрузки.СумУсл=_СуммаУслуг;
		ТабЗагрузки.СумУслБезНДС=_СуммаУслугБез;
		ТабЗагрузки.СумУсл10=_СуммаУслуг10;
		ТабЗагрузки.СумУсл20=_СуммаУслуг20;
		ТабЗагрузки.Склад=_Склад;
		ТабЗагрузки.Товар = Товар;
	КонецЦикла;       
	//ТабЗагрузки.Свернуть("Склад,Валюта","Сумма,СумТов,СумТовБезНДС,СумТов10,СумТов20,СумУсл,СумУслБезНДС,СумУсл10,СумУсл20");
КонецПроцедуры	

Процедура семЗагрузитьОплатуЧеков()
	ИнфСтрока="Загрузка оплаты чеков";
	Форма.Обновить(1);
	ВидЗагрузки="ОплатаЧеков";
	
	ТабЗагрузки.Очистить();  
	ТабЗагрузки.НоваяКолонка("Валюта",,,,"Валюта",48,,);
	ТабЗагрузки.НоваяКолонка("Сумма",,,,"Сумма",24,,);
	ТабЗагрузки.НоваяКолонка("СумТов",,,,"СумТов",10,,);   
	ТабЗагрузки.НоваяКолонка("СумТовБезНДС",,,,"СумТовБезНДС",10,,);
	ТабЗагрузки.НоваяКолонка("СумТов10",,,,"СумТов10",10,,);
	ТабЗагрузки.НоваяКолонка("СумТов20",,,,"СумТов20",10,,);
	ТабЗагрузки.НоваяКолонка("СумУсл",,,,"СумУсл",10,,);
	ТабЗагрузки.НоваяКолонка("СумУслБезНДС",,,,"СумУслБезНДС",10,,);
	ТабЗагрузки.НоваяКолонка("СумУсл10",,,,"СумУсл10",10,,);
	ТабЗагрузки.НоваяКолонка("СумУсл20",,,,"СумУсл20",10,,);   
	ТабЗагрузки.НоваяКолонка("Склад",,,,"Склад",20,,);
	//ТабЗагрузки.НоваяКолонка("Товар",,,,"Товар",20,,);
	
	спрПричин = СоздатьОбъект( "Справочник.ПричиныУдаления" );
	докЧек = СоздатьОбъект( "Документ.Чек" );
	докЧек.ВыбратьДокументы( ДатаСмены, ДатаСмены );
	Пока ДокЧек.ПолучитьДокумент() = 1 Цикл
		
		УдЧек = ДокЧек.Удален;
		Если УдЧек > 0 Тогда
			спрПричин.НайтиПоКоду( УдЧек );
			Если спрПричин.Списывать = Перечисление.Булево.Да Тогда
				Спис = "Списывать";
			Иначе
				Спис = "НеСписывать";
			КонецЕсли;
		Иначе
			Спис = "Списывать";
		КонецЕсли;
		Если ( ( Спис = "НеСписывать" ) или ( Спис = "СписыватьБезСуммы" ) ) Тогда Продолжить; КонецЕсли;
		
		Если ДокЧек.Проведен()=1 Тогда
			Если ДокЧек.Валюта.Выбран()=1 Тогда ЧекВалюта = ДокЧек.Валюта; КонецЕсли;
			// Для взаиморасчетов
			_СуммаТоваров=0;
			_СуммаТоваров20=0;
			_СуммаТоваров10=0;
			_СуммаТоваровБез=0;
			_СуммаУслуг=0;
			_СуммаУслуг20=0;
			_СуммаУслуг10=0;
			_СуммаУслугБез=0;
			ЧекСумма=0;

			ДокЧек.ВыбратьСтроки();    
			Пока ДокЧек.ПолучитьСтроку()=1 Цикл
				Товар=ДокЧек.Товар;
				СумТов=ДокЧек.Сумма; 
				ЧекСумма=СумТов;
				Если  Товар.ВидТовара=Перечисление.ВидыТоваров.Услуга Тогда
					_СуммаУслуг=СумТов;
					Если Товар.СтавкаНДС=Перечисление.ЗначенияНДС.ОсновнаяСтавкаНДС Тогда
						_СуммаУслуг20=СумТов;
					ИначеЕсли  Товар.СтавкаНДС=Перечисление.ЗначенияНДС.ЛьготнаяСтавкаНДС Тогда
						_СуммаУслуг10=СумТов;
					ИначеЕсли  Товар.СтавкаНДС=Перечисление.ЗначенияНДС.НДС0 Тогда
						_СуммаУслугБез=СумТов;
					КонецЕсли;
				Иначе
					_СуммаТоваров=СумТов;
					Если Товар.СтавкаНДС=Перечисление.ЗначенияНДС.ОсновнаяСтавкаНДС Тогда
						_СуммаТоваров20=СумТов;
					ИначеЕсли  Товар.СтавкаНДС=Перечисление.ЗначенияНДС.ЛьготнаяСтавкаНДС Тогда
						_СуммаТоваров10=СумТов;
					ИначеЕсли  Товар.СтавкаНДС=Перечисление.ЗначенияНДС.НДС0 Тогда
						_СуммаТоваровБез=СумТов;
					КонецЕсли;
				КонецЕсли;
				_Склад = семПолучитьСклад( Товар, ДокЧек.Станция );   	  
				НомСтр=НомСтр+1;
				ТабЗагрузки.НоваяСтрока();
				ТабЗагрузки.Валюта=ЧекВалюта;
				ТабЗагрузки.Сумма=ЧекСумма;
				ТабЗагрузки.СумТов=_СуммаТоваров;
				ТабЗагрузки.СумТовБезНДС=_СуммаТоваровБез;
				ТабЗагрузки.СумТов10=_СуммаТоваров10;
				ТабЗагрузки.СумТов20=_СуммаТоваров20;
				ТабЗагрузки.СумУсл=_СуммаУслуг;
				ТабЗагрузки.СумУслБезНДС=_СуммаУслугБез;
				ТабЗагрузки.СумУсл10=_СуммаУслуг10;
				ТабЗагрузки.СумУсл20=_СуммаУслуг20;
				ТабЗагрузки.Склад=_Склад;
				//ТабЗагрузки.Товар = Товар;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;       
	ТабЗагрузки.Свернуть("Склад,Валюта","Сумма,СумТов,СумТовБезНДС,СумТов10,СумТов20,СумУсл,СумУслБезНДС,СумУсл10,СумУсл20");
КонецПроцедуры	

Процедура КнопкаЗагрузить()
	Если ФлагПолнойЗагрузки=1 Тогда
		Загрузить();	
	Иначе          
		ЗагрузкаПерсонала();
		Загрузить();
		ЗагрузитьМодификаторы();
		Загрузить();
		ЗагрузитьПричины();
		Загрузить();
		ЗагрузитьВалюты();
		Загрузить(); 
		КнопкаМеню();
		Загрузить(); 
		ЗагрузитьЧеки();
		//	   Загрузить();
		ЗагрузитьМарочныйОтчет();
		Загрузить();
		//ЗагрузитьОплатуЧеков();
		семЗагрузитьОплатуЧеков();
		Загрузить();
		ТабЗагрузки.Очистить();
		ТабЗагрузки.КоличествоКолонок(1);
		ТабЗагрузки.УстановитьПараметрыКолонки(1,,,,"АСТОР: Ресторан",,,);
		ТабЗагрузки.Новаястрока();
		ТабЗагрузки.УстановитьЗначение(1,1,"Загрузка данных из ""R-KEEPER"" в ""АСТОР: Ресторан"" завершена");
	КонецЕсли;	
КонецПроцедуры	

ФлагВсех=1;
ФлагПолнойЗагрузки=0;
ИнфСтрока="АСТОР: Ресторан";

