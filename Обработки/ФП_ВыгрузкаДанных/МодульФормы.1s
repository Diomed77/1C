//Переменные Финансового планирования
Перем СтарыйВариантБюджета;
Перем СтараяДатаВыгрузки;
Перем РС;

//Переменные выгрузки данных текст
Перем СписокВыгруженныхСписков;
Перем СтрРазделительСтрок;
Перем ТекстВыгрузки;

//Переменные выгрузки данных xml

Перем	гПутьОбъекта_ПравилаКонвертации;

Перем	гСтрПуть;
Перем	гИмяФайла;

Перем	гСчетчикВыгруженныхОбъектов;

Перем	СписокСписковВыгруженныхОбъектов;

Перем	ТабВыгруженныхОбъектов;
Перем 	ТабВидовДокументов;


Перем	гСписокПараметров;

Перем	гXMLАнализатор;
Перем	гФайлДанных;
Перем	гПравила;

Перем	гПутьОбъекта_ИсполняемыйКод;

Перем	гТабОбъектов;	//	таблица интерактивно заданных объектов выгрузки

Перем	гТабКэшПравил;
Перем	гТабКэшРеквизитов;
Перем	гТабКэшРеквизитовЗначений;
Перем	гТабКэшПараметровЗагрузки;

Перем	ФормКолвоБуферизуемыхОбъектов;

Перем	ФормФлЗапоминатьСсылки;

//Прочие переменные 
Перем МД;
Перем СправОтбора;
Перем СписокФильтров; 
Перем ИтБУ;

//**************************************************************************************************
//----	Начало предварительного описания функций	------------------------------------------------
//**************************************************************************************************

Функция	ДополнительныеПреобразования(Вид="", Ид="", Источник="", Приемник="", СписокПараметровПравила="")		Далее
Функция	Выгрузить(Источник, ИдПравила="", УзелСсылки=0, ПараметрыПравила="", Знач ТипПриемника="", Знач ВидПриемника="")	Далее
Функция	ПроверитьГруппуУсловий(Знач Условия, Знач Объект, Знач ТипУсловия="И")									Далее
Функция	УсловияВыполняются(Знач Условия, Знач Объект, ИдПравилаДок="")											Далее
Функция	ПолучитьИдОбъектаИсточника(Источник, ИдСинхронизирующегоРеквизита="")									Далее
Функция ПолучитьЗначениеМетодом(Источник, Метод)																Далее
Функция ДобавитьРеквизит(Таб, Источник, ТаблицаИсточника, Приемник="", Знач Зн="#Получить", Знач СпособЗагрузкиПоУмолчанию="", СписокДопПараметровПравила="")	Далее
Функция НайтиПравило(Источник, Правило="", ИдПравила="", ТипПриемника="", ВидПриемника="", ИдПравилаДок="") Далее
Функция НайтиПравилоДляАтрибутаЗначения(Знач Источник, Правило="", ИдПравила="", ПравилоАтрибутаЗначения="") Далее

//******************************************************************************
//	ПолучитьВалютуВыгрузки
//
//	Параметры:
//	ВалютаВыгрузки - валюта фин. планирования.
//
//	Возвращаемое значение:
//	(Справочник "Валюты") - валюты по которой выгружаются итоги.
//
//	Описание:
//	Функция определяет валюту текущей конфигурации, соответствующую валюте
//  фин. планирования

Функция ПолучитьВалютуВыгрузки(ВалютаВыгрузки);
	
	Справ = СоздатьОбъект("Справочник.ФП_Справочники");
	Справ.ИспользоватьРодителя(Справ.ТекущийЭлемент(),0);
	Справ.ВыбратьЭлементы(1);
	Пока Справ.ПолучитьЭлемент(1) = 1 Цикл 
		Если Справ.ТекущийЭлемент() = ВалютаВыгрузки Тогда
			Возврат Справ.ТекущийЭлемент().Валюта;
		КонецЕсли;
		
	КонецЦикла;
	
	Сообщить("Не установлено соответствие для валюты " + ВалютаВыгрузки.Код + " " + ВалютаВыгрузки.Наименование+".", "!!");
	Возврат ПолучитьПустоеЗначение("Справочник.Валюты");
	
КонецФункции // ПолучитьВалютуВыгрузки() 

//******************************************************************************
//	ПолучитьВалютуФинПланирования
//
//	Параметры:
//	ВалютаВыгрузки (Справочник "Валюты") - валюты по которой выгружаются итоги.
//
//	Возвращаемое значение:
//	(строка) - валюта фин. планирования.
//
//	Описание:
//	Функция определяет валюту конфиг. фин. планирования, соответствующую валюте
//  текущей конфигурации, по которой рассчитываются итоги.

Функция ПолучитьВалютуФинПланирования(ВалютаВыгрузки);
	
	Справ = СоздатьОбъект("Справочник.ФП_Справочники");
	Если Справ.НайтиПоНаименованию("Валюты") = 0 Тогда
		Предупреждение("Не загружены справочники из конфигурации ""Финансовое планирование""!");
		Возврат "";
	КонецЕсли;
	
	Справ.ИспользоватьРодителя(Справ.ТекущийЭлемент(),0);
	Справ.ВыбратьЭлементы(1);
	Пока Справ.ПолучитьЭлемент(1) = 1 Цикл 
		Если Справ.Валюта = ВалютаВыгрузки Тогда
			Возврат Справ.ТекущийЭлемент();
		КонецЕсли;
		
	КонецЦикла;
	
	Сообщить("Не установлено соответствие для валюты " + ВалютаВыгрузки.Код + " " + ВалютаВыгрузки.Наименование+".", "!!");
	Возврат ПолучитьПустоеЗначение("Справочник.ФП_Справочники");
	
КонецФункции // ПолучитьВалютуФинПланирования()

//**************************************************************************************************
//----	Начало процедур и функций для выгрузки проводок
//**************************************************************************************************

Процедура ОткрытьФайлДляПросмотра(ИмяФайла)
	
	Если ФС.СуществуетФайл(ИмяФайла) = 1 Тогда 
		ЗапуститьПриложение(ИмяФайла);
	Иначе 
		Предупреждение("Файл с таким именем не существует!");					
	КонецЕсли;    
	
КонецПроцедуры		//	ОткрытьФайлДляПросмотра()

//--------------------------------------------------------------------------------------------------

Процедура ВыборФайла(ИмяФайла, Фильтр="xml")
	
	Каталог = "";
	Стр = "Файл настройки (*." + Фильтр + ")|*." + Фильтр + "";

	Если ФС.ВыбратьФайл(0, ИмяФайла, Каталог, "Выберите файл", Стр, , ) = 1 Тогда
	    ИмяФайла = Каталог + ИмяФайла;
	КонецЕсли;
	
КонецПроцедуры		//	ВыборФайла()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция КаталогРодитель(Знач Стр)
	                            
	Если ПустоеЗначение(Стр) = 1 Тогда Возврат("") КонецЕсли;
	
	Стр	=	СокрЛП(Стр);
	
	Если Прав(Стр, 1) = "\" Тогда
		Стр = Лев(Стр, СтрДлина(Стр)-1);
	КонецЕсли;
	
	Если Найти(Стр, "\") > 0 Тогда
		Пока 1=1 Цикл
			Если Прав(Стр, 1) = "\" Тогда Прервать КонецЕсли;
			Стр = Лев(Стр, СтрДлина(Стр)-1);
		КонецЦикла;
	КонецЕсли;

	Возврат(Стр);
	
КонецФункции

//--------------------------------------------------------------------------------------------------

Функция НайтиПервыйСуществующийФайл(СписокВозможныхМест)
	
	Для Сч = 1 По СписокВозможныхМест.РазмерСписка() Цикл
		ПолноеИмя	=	СписокВозможныхМест.ПолучитьЗначение(Сч);
		Если Фс.СуществуетФайл(ПолноеИмя) = 1 Тогда	Возврат(ПолноеИмя)	КонецЕсли;
	КонецЦикла;

	Возврат("");

КонецФункции		//	НайтиПервыйСуществующийФайл()

//--------------------------------------------------------------------------------------------------

Процедура ЗаписатьОшибку(Содержание, Маркер="")
                        
	Сообщить(Содержание, Маркер);
	
КонецПроцедуры		//	ЗаписатьОшибку()

//--------------------------------------------------------------------------------------------------

Функция ЗагрузитьПравилаКонвертации()
	                                        
	Состояние("Выполняется загрузка правил конвертации...");
	
	гПравила		=	гXMLАнализатор.СоздатьДокумент();
	
	Попытка
		гПравила.Загрузить(гПутьОбъекта_ПравилаКонвертации);
		гПравила.Проверить();
	Исключение
		Предупреждение(ОписаниеОшибки());
		Возврат(0);
	КонецПопытки;
	
	Возврат(1);
	
КонецФункции		//	ЗагрузитьПравилаКонвертации()

Функция ПривестиКТипу(Зн, Тип)
	
    Если		Тип = "Дата"	Тогда
		Возврат	Дата(Зн);                                  
	ИначеЕсли	Тип = "Число"	Тогда
		Возврат	Число(Зн);
	Иначе
		Возврат	НРег(СокрЛП(Зн));
	КонецЕсли;
	
КонецФункции

//--------------------------------------------------------------------------------------------------
                                                                                                    
Процедура УстановитьАтрибут(Элемент, ИдАтрибута, ЗнАтрибута, Проверить=1);
	
	Если	Проверить = 1 Тогда
		Если ПустоеЗначение(ЗнАтрибута) = 0 Тогда
			ЗнАтрибута	=	СтрЗаменить(ЗнАтрибута,	РазделительСтрок,	"#рс#" );
			ЗнАтрибута	=	СтрЗаменить(ЗнАтрибута,	СимволТабуляции,	"#ст#" );
			Элемент.УстановитьАтрибут(ИдАтрибута, ЗнАтрибута);
		КонецЕсли;
	Иначе
		ЗнАтрибута	=	СтрЗаменить(ЗнАтрибута,	РазделительСтрок,	"#рс#" );
		ЗнАтрибута	=	СтрЗаменить(ЗнАтрибута,	СимволТабуляции,	"#ст#" );
		Элемент.УстановитьАтрибут(ИдАтрибута, ЗнАтрибута);
	КонецЕсли;
	
КонецПроцедуры		//	УстановитьАтрибут()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция ПодобратьЗначениеПоТипу(Объект, ТипЗнач, ВидЗнач, НомерСубконтоИсточника="")
	
	Если  		ТипЗначенияСтр(Объект) = "СписокЗначений" Тогда
		
		Для Сч = 1 По Объект.РазмерСписка() Цикл
			Значение = Объект.ПолучитьЗначение(Сч);
			Если ТипЗначенияСтр(Значение) = ТипЗнач	Тогда
				Если Найти("Строка,Число,Дата", ТипЗнач) = 0 Тогда
				    Если Значение.Вид() = ВидЗнач Тогда	Возврат(Значение)	КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли  	ТипЗначенияСтр(Объект) = "Справочник" Тогда
	                                                       
		ОбъектМД	=	Метаданные.Справочник(Объект.Вид());
		
		Если ПустоеЗначение(НомерСубконтоИсточника) = 0 Тогда
			ИдРеквизита	=	"Субконто" + СокрЛП(НомерСубконтоИсточника);
			Если ОбъектМД.Реквизит(ИдРеквизита).Выбран() = 1 Тогда
				Возврат	Объект.ПолучитьАтрибут(ИдРеквизита);
			КонецЕсли;
		КонецЕсли;
		
		Для Сч = 1 По ОбъектМД.Реквизит() Цикл
		    РеквМД	=	ОбъектМД.Реквизит(Сч);
			Если РеквМД.Тип = "Неопределенный" Тогда
				Значение = Объект.ПолучитьАтрибут(РеквМД.Идентификатор);
				Если ТипЗначенияСтр(Значение) = ТипЗнач	Тогда
					Если Найти("Строка,Число,Дата", ТипЗнач) = 0 Тогда
					    Если Значение.Вид() = ВидЗнач Тогда	Возврат(Значение)	КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли	ТипЗначенияСтр(Объект) = "Документ" Тогда
		
		ОбъектМД	=	Метаданные.Документ(Объект.Вид());
		
		Если ПустоеЗначение(НомерСубконтоИсточника) = 0 Тогда
			ИдРеквизита	=	"Субконто" + СокрЛП(НомерСубконтоИсточника);
			Если		ОбъектМД.РеквизитШапки(ИдРеквизита).Выбран() = 1 Тогда
				Возврат	Объект.ПолучитьАтрибут(ИдРеквизита);
			ИначеЕсли	ОбъектМД.РеквизитТабличнойЧасти(ИдРеквизита).Выбран() = 1 Тогда
				Возврат	Объект.ПолучитьАтрибут(ИдРеквизита);
			КонецЕсли;
		КонецЕсли;
		
		Для Сч = 1 По ОбъектМД.РеквизитШапки() Цикл
		    РеквМД	=	ОбъектМД.РеквизитШапки(Сч);
			Если РеквМД.Тип = "Неопределенный" Тогда
				Значение = Объект.ПолучитьАтрибут(РеквМД.Идентификатор);
				Если ТипЗначенияСтр(Значение) = ТипЗнач	Тогда
					Если Найти("Строка,Число,Дата", ТипЗнач) = 0 Тогда
					    Если Значение.Вид() = ВидЗнач Тогда	Возврат(Значение)	КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Сч = 1 По ОбъектМД.РеквизитТабличнойЧасти() Цикл
		    РеквМД	=	ОбъектМД.РеквизитТабличнойЧасти(Сч);
			Если РеквМД.Тип = "Неопределенный" Тогда
				Значение = Объект.ПолучитьАтрибут(РеквМД.Идентификатор);
				Если ТипЗначенияСтр(Значение) = ТипЗнач	Тогда
					Если Найти("Строка,Число,Дата", ТипЗнач) = 0 Тогда
					    Если Значение.Вид() = ВидЗнач Тогда	Возврат(Значение)	КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат("");

КонецФункции		//	ПодобратьЗначениеПоТипу()

//-------------------------------------------------------------------------------------------------- 
             
Функция ВыделитьПрефикс(Знач Стр, ЧисловаяЧасть="", Режим="")
    
	Стр		=	СокрЛП(Стр);
	Префикс	=	Стр;
	Длина	=	СтрДлина(Стр);
	
	Для Сч = 1 По Длина Цикл
		ЧисловаяЧасть	=	Число(Стр);
		
	    Если (ЧисловаяЧасть > 0) И (СтрДлина(ЧисловаяЧасть) = Длина - Сч + 1) Тогда 
			Префикс	=	Лев(Префикс, Сч - 1);
			
			Пока Прав(Префикс, 1) = "0" Цикл
			    Префикс = Лев(Префикс, СтрДлина(Префикс)-1);
			КонецЦикла;
			
			Прервать;		    				
	    Иначе
			Стр = Прав(Стр, Длина - Сч);
		КонецЕсли;
		
		Если ЧисловаяЧасть < 0 Тогда	ЧисловаяЧасть = - ЧисловаяЧасть		КонецЕсли;
			
	КонецЦикла;
	              
	Если Режим = "Число" Тогда
	    Возврат(ЧисловаяЧасть);
	Иначе
		Возврат(Префикс);
	КонецЕсли;

КонецФункции		//	ВыделитьПрефикс()

//--------------------------------------------------------------------------------------------------

Функция ДополнитьНулями(Стр, Длина)
                            
	Стр			=	СокрЛП(Стр);
	//Добавить	=	Длина - СтрДлина(Стр);
	
	//Если	Добавить > 0	Тогда
		
		ЧисловаяЧасть	=	"";
		Результат		=	ВыделитьПрефикс(Стр, ЧисловаяЧасть);
		Пока Длина - СтрДлина(Результат) - СтрДлина(ЧисловаяЧасть) > 0 Цикл
		    Результат	=	Результат + "0";
		КонецЦикла;
		Результат	=	Результат + Строка(ЧисловаяЧасть);
		
		Возврат(Результат);
		
	//Иначе
	//	Возврат	Стр;
	//КонецЕсли;
	
КонецФункции		//	ДополнитьНулями()

//--------------------------------------------------------------------------------------------------

Функция ПроверитьУсловие(Знач Условие, Знач Объект)
	
	Возврат 1;
	
КонецФункции		//	ПроверитьУсловие()

//--------------------------------------------------------------------------------------------------

Функция ПроверитьГруппуУсловий(Знач Условия, Знач Объект, Знач ТипУсловия="И")
	
	Если ПустоеЗначение(Условия)	= 1				Тогда	Возврат(1)								КонецЕсли;
	Если ПустоеЗначение(ТипУсловия) = 1				Тогда	ТипУсловия = "И"						КонецЕсли;
	
	Если ТипЗначенияСтр(Объект)		= "Справочник"	Тогда	Объект.ИспользоватьДату(НачИнтервала, 1)КонецЕсли;
	                                                                     
	ВыборкаУсловий	=	Условия.ВыбратьУзлы("Условие");
	Для СчУсловий = 0 По ВыборкаУсловий.КоличествоУзлов() - 1 Цикл
		Условие		=	ВыборкаУсловий.ПолучитьУзел(СчУсловий);
		Результат	=	ПроверитьУсловие(Условие, Объект);
		Если		(ТипУсловия = "И")		И	(Результат=0)	Тогда	Возврат(0);
		ИначеЕсли	(ТипУсловия = "Или")	И	(Результат=1)	Тогда	Возврат(1);
		ИначеЕсли	(ТипУсловия = "Не")		И	(1-Результат=1)	Тогда	Возврат(1);
		КонецЕсли;
	КонецЦикла;
	
	ВыборкаГрупп	=	Условия.ВыбратьУзлы("ГруппаУсловий");
	Для СчГрупп = 0 По ВыборкаГрупп.КоличествоУзлов() - 1 Цикл
		ГруппаУсловий	=	ВыборкаГрупп.ПолучитьУзел(СчГрупп);
		ТипУсл			=	ГруппаУсловий.ПолучитьАтрибут("ТипУсловия");
		Результат		=	ПроверитьГруппуУсловий(ГруппаУсловий, Объект, ТипУсл);
		Если		(ТипУсловия = "И")		И	(Результат=0)	Тогда	Возврат(0);
		ИначеЕсли	(ТипУсловия = "Или")	И	(Результат=1)	Тогда	Возврат(1);
		ИначеЕсли	(ТипУсловия = "Не")		И	(1-Результат=1)	Тогда	Возврат(1);
		КонецЕсли;
	КонецЦикла;
	
	Если		ТипУсловия = "И"	Тогда	Возврат(1);
	ИначеЕсли	ТипУсловия = "Или"	Тогда	Возврат(0);
	ИначеЕсли	ТипУсловия = "Не"	Тогда	Возврат(0);
	КонецЕсли;
	
КонецФункции

//--------------------------------------------------------------------------------------------------

Процедура ЗагрузитьПараметрыЗагрузки(Правило, Ид="")
                                     
	Если		(ПустоеЗначение(Ид) = 1)	И (ПустоеЗначение(Правило) = 0)	Тогда
		Ид		=	Правило.ПолучитьАтрибут("ПараметрыЗагрузки");
	КонецЕсли;
	Если	ПустоеЗначение(Ид) = 1		Тогда
		гТабКэшПараметровЗагрузки.ПолучитьСтрокуПоНомеру(1);	//	в первой строке описаны параметры по умолчанию
		Возврат;
	КонецЕсли;
	
	НомСтр	=	"";
	
	Если  гТабКэшПараметровЗагрузки.НайтиЗначение(Ид, НомСтр, "Ид") = 0 Тогда

		ПараметрыЗагрузки	=	гПравила.ВыбратьУзел("//ПараметрыЗагрузки[@Ид=""" + СокрЛП(Ид) + """]");
		
		Если ПустоеЗначение(ПараметрыЗагрузки) = 1 Тогда
			ЗаписатьОшибку("Не найдены параметры загрузки. Ид = " + Ид + "!", "!!");
			гТабКэшПараметровЗагрузки.ПолучитьСтрокуПоНомеру(1);
			Возврат;
		КонецЕсли;
		
		гТабКэшПараметровЗагрузки.НоваяСтрока();
		гТабКэшПараметровЗагрузки.Ид							=	Ид;
	    
		ДатаУстановки											=	Дата(ПараметрыЗагрузки.ПолучитьАтрибут("Дата"));
		гТабКэшПараметровЗагрузки.Дата							=	?(ПустоеЗначение(ДатаУстановки)=1, НачИнтервала, ДатаУстановки);

		СпособЗагрузки											=	ПараметрыЗагрузки.ПолучитьАтрибут("СпособЗагрузки");
		гТабКэшПараметровЗагрузки.СпособЗагрузки				=	?(ПустоеЗначение(СпособЗагрузки)=1, "ЗамещатьНеПустыми", СпособЗагрузки);
		
		гТабКэшПараметровЗагрузки.ПравилоОпераций				=	ПараметрыЗагрузки.ПолучитьАтрибут("ПравилоОпераций");
		
		гТабКэшПараметровЗагрузки.СтатусУдаления				=	ПараметрыЗагрузки.ПолучитьАтрибут("СтатусУдаления");
		гТабКэшПараметровЗагрузки.СтатусПроводок				=	ПараметрыЗагрузки.ПолучитьАтрибут("СтатусПроводок");
		гТабКэшПараметровЗагрузки.СтатусПроведения				=	ПараметрыЗагрузки.ПолучитьАтрибут("СтатусПроведения");
		гТабКэшПараметровЗагрузки.СтатусРасчетныхДокументов		=	ПараметрыЗагрузки.ПолучитьАтрибут("СтатусРасчетныхДокументов");
		
		гТабКэшПараметровЗагрузки.ДатаТекущегоПериодаЖР			=	Дата(ПараметрыЗагрузки.ПолучитьАтрибут("ДатаТекущегоПериодаЖР"));
	
		гТабКэшПараметровЗагрузки.ЗамещатьНайденные				=	Число(ПараметрыЗагрузки.ПолучитьАтрибут("ЗамещатьНайденные"));
		гТабКэшПараметровЗагрузки.НовыеНеСоздавать				=	Число(ПараметрыЗагрузки.ПолучитьАтрибут("НовыеНеСоздавать"));
		
		гТабКэшПараметровЗагрузки.ЗагружатьОперации				=	Число(ПараметрыЗагрузки.ПолучитьАтрибут("ЗагружатьОперации"));
		гТабКэшПараметровЗагрузки.ЗагружатьЗаписиЖР				=	Число(ПараметрыЗагрузки.ПолучитьАтрибут("ЗагружатьЗаписиЖР"));
		                            	
	Иначе
		
		гТабКэшПараметровЗагрузки.ПолучитьСтрокуПоНомеру(НомСтр);
		
	КонецЕсли;
	
КонецПроцедуры		//	ЗагрузитьПараметрыЗагрузки()

//--------------------------------------------------------------------------------------------------   

Функция ДополнительныеПреобразования(Вид="", Ид="", Источник="", Приемник="", СписокПараметровПравила="")

	Если Вид = "" Тогда

		Возврат(1);

	ИначеЕсли Вид = "Условие" Тогда

		Если Ид = "" Тогда
			Возврат(1);
		КонецЕсли;

	ИначеЕсли Вид = "ПравилоВыборкиОбъектов" Тогда

		Если Ид = "" Тогда
			Возврат(1);
		КонецЕсли;

	ИначеЕсли Вид = "ПравилоРеквизита" Тогда

		Если Ид = "" Тогда
			Возврат(1);
		КонецЕсли;

	ИначеЕсли Вид = "ПравилоЗначения" Тогда

		Если Ид = "" Тогда
			Возврат(1);
		КонецЕсли;

	ИначеЕсли Вид = "ПравилоРеквизитаЗначения" Тогда

		Если Ид = "" Тогда
			Возврат(1);
		КонецЕсли;

	КонецЕсли;

	Возврат(0);

КонецФункции		//	ДополнительныеПреобразования()

//--------------------------------------------------------------------------------------------------

Функция УсловияВыполняются(Знач Условия, Знач Объект, ИдПравилаДок="")
	
	Если ПустоеЗначение(Условия.ПолучитьАтрибут("ЕстьПроцедура")) = 0 Тогда
		Возврат ДополнительныеПреобразования("Условие", Условия.ПолучитьАтрибут("Ид"), Объект, , ИдПравилаДок);
	КонецЕсли;
	
	Если ПроверитьГруппуУсловий(Условия, Объект) = 0 Тогда Возврат(0) КонецЕсли;	//	проверка одиночных условий
	
	ВыборкаГрупп	=	Условия.ВыбратьУзлы("ГруппаУсловий");
	Для СчГрупп = 0 По ВыборкаГрупп.КоличествоУзлов() - 1 Цикл
		ГруппаУсловий	=	ВыборкаГрупп.ПолучитьУзел(СчГрупп);
		ТипУсловия		=	ГруппаУсловий.ПолучитьАтрибут("ТипУсловия");
		Если ПроверитьГруппуУсловий(ГруппаУсловий, Объект, ТипУсловия) = 0 Тогда Возврат(0) КонецЕсли;
	КонецЦикла;
	
	Возврат(1);
	
КонецФункции

//--------------------------------------------------------------------------------------------------

Процедура ЗагрузитьПравилоРеквизитов(Правило, Таб)
                                       
	Таб.НоваяСтрока();
	
	Источник					=	Правило.ВыбратьУзел("Источник");
	Приемник					=	Правило.ВыбратьУзел("Приемник");
	
	Таб.Ид						=	Правило.ПолучитьАтрибут("Ид");
	Таб.Преобразование			=	Правило.ПолучитьАтрибут("Преобразование");
	Таб.Правило					=	Правило.ПолучитьАтрибут("Правило");
	Таб.ЕстьПроцедура			=	Правило.ПолучитьАтрибут("ЕстьПроцедура");
	Таб.ПараметрыПравила		=	Правило.ПолучитьАтрибут("ПараметрыПравила");
	Таб.ПолучитьИзПараметров	=	Правило.ПолучитьАтрибут("ПолучитьИзПараметров");
	Таб.СпособВыгрузки			=	Правило.ПолучитьАтрибут("СпособВыгрузки");
	Таб.СпособЗагрузки			=	Правило.ПолучитьАтрибут("СпособЗагрузки");
	
	Условия						=	Правило.ВыбратьУзел("Условия");
	
	Если ПустоеЗначение(Источник) = 0 Тогда
		Таб.Источник_Ид				=	Источник.ПолучитьАтрибут("Ид");
		Таб.Источник_ТипАтрибута	=	Источник.ПолучитьАтрибут("ТипАтрибута");
		Таб.Источник_Тип			=	Источник.ПолучитьАтрибут("Тип");
		Таб.Источник_Вид			=	Источник.ПолучитьАтрибут("Вид");
		//Таб.Источник_Длина		=	Источник.ПолучитьАтрибут("Длина");
	КонецЕсли;

	Если ПустоеЗначение(Приемник) = 0 Тогда
		Таб.Приемник_Ид				=	Приемник.ПолучитьАтрибут("Ид");
		Таб.Приемник_ТипАтрибута	=	Приемник.ПолучитьАтрибут("ТипАтрибута");
		Таб.Приемник_Тип			=	Приемник.ПолучитьАтрибут("Тип");
		Таб.Приемник_Вид			=	Приемник.ПолучитьАтрибут("Вид");
		Таб.Приемник_Длина			=	Приемник.ПолучитьАтрибут("Длина");
	КонецЕсли;
	
	Если ПустоеЗначение(Условия) = 0 Тогда
		Таб.Условия	=	Условия;
		Если (ПустоеЗначение(Условия.ПолучитьАтрибут("ЗаданыПоРеквизиту")) = 1) И (Таб.Источник_ТипАтрибута <> "К") И (Таб.Источник_ТипАтрибута <> "ПК") Тогда
			Таб.ВидУсловия	=	1;
		Иначе
			Таб.ВидУсловия	=	2;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры		//	ЗагрузитьПравилоРеквизитов()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция СистемноеПредставлениеОбъекта(Источник)
    
	//	Необходимо позиционироваться на объекты, т.к.
	//	если Источник - реквизит неопределенного типа,
	//	то ЗначениеВСтрокуВнутр - возвращает НЕСТАНДАРТНОЕ
	//	строковое представление !!!
	
	Тип	=	ТипЗначенияСтр(Источник);
	Стр	=	СокрЛП(Источник);
	
	Если		(Стр = "<Объект не найден>") Или (Стр = "") Тогда
		
		Возврат("");	//	Объект не существует в ИБ
		
	ИначеЕсли	Тип = "Справочник"	Тогда
		
		Об = СоздатьОбъект("Справочник." + Источник.Вид());
		Об.НайтиЭлемент(Источник);
		Возврат	ЗначениеВСтрокуВнутр(Об.ТекущийЭлемент());
		
	ИначеЕсли	Тип = "Документ"	Тогда
		
		Возврат	ЗначениеВСтрокуВнутр(Источник);
		
	Иначе
		
		Об	=	Источник;
		Возврат	ЗначениеВСтрокуВнутр(Об);
		
	КонецЕсли;
	
КонецФункции		//	СистемноеПредставлениеОбъекта()

//--------------------------------------------------------------------------------------------------

Функция СоздатьУзелСсылки(Источник, ТабРеквизитовПоиска, ПараметрыПравила)
	
	Если ТабРеквизитовПоиска.КоличествоСтрок() = 0 Тогда
		Возврат(1);
	КонецЕсли;
    
	
	XML_DOM					=	гXMLАнализатор.СоздатьДокумент();
	УзелСсылки				=	XML_DOM.СоздатьУзел(1, "Ссылка");
	     
	ТипИсточника			=	?(ТипЗначенияСтр(Источник)<>"СписокЗначений",ТипЗначенияСтр(Источник),Источник.Получить("ТипОбъекта"));
	
	Если (ТипИсточника = "Справочник") Или (ТипИсточника = "Счет") Тогда
		Если Источник.ЭтоГруппа()=0 тогда
			
			ЭтоГруппа	=	Источник.ЭтоГруппа();
			УстановитьАтрибут(УзелСсылки,	"ЭтоГруппа",	ЭтоГруппа);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ТабРеквизитовПоиска.КоличествоСтрок() > 0 Тогда
		ТабРеквизитовПоиска.ВыбратьСтроки();
		Пока ТабРеквизитовПоиска.ПолучитьСтроку() = 1 Цикл
			Результат	=	ДобавитьРеквизит(ТабРеквизитовПоиска, Источник,, УзелСсылки, "#Получить", "Поиск", ПараметрыПравила);
			Если Результат = "#Прервать" Тогда Прервать КонецЕсли;
		КонецЦикла;
	Иначе
		УстановитьАтрибут(УзелСсылки, "СистемныйИд", УзелСсылки.ПреобразоватьВ_ИД(СистемноеПредставлениеОбъекта(Источник)));
	КонецЕсли;
	
	Возврат(УзелСсылки);
	
КонецФункции	//	СоздатьУзелСсылки()
                        
//--------------------------------------------------------------------------------------------------

Функция ОбъектУжеВыгружен(Источник, ТабРеквизитовПоиска, ИдПравила, УзелСсылки, Режим=0, ПараметрыПравила="", НовыеНеСоздавать=0, НеСинхронизироватьПоДопПараметрам=0)
	
	Перем	НомСтр;
		
	//СписокВыгруженныхОбъектов = СписокСписковВыгруженныхОбъектов.Получить(ИдПравила);

	Если ТабВыгруженныхОбъектов.НайтиЗначение(ИдПравила, НомСтр, "ИдПравила") = 0 Тогда
		Если Режим = "Проведение" Тогда Возврат(0) КонецЕсли;
		ТабВыгруженныхОбъектов.НоваяСтрока();
		ТабВыгруженныхОбъектов.ИдПравила	=	ИдПравила;
		ТабВыгруженныхОбъектов.ТабОбъектов	=	СоздатьОбъект("ТаблицаЗначений");
		ТабОбъектов							=	ТабВыгруженныхОбъектов.ТабОбъектов;
		ТабОбъектов.НоваяКолонка("Объект");
		Если ФормФлЗапоминатьСсылки = 1 Тогда
			ТабОбъектов.НоваяКолонка("Ссылка",	"Строка");
		КонецЕсли;
	Иначе
		ТабОбъектов							=	ТабВыгруженныхОбъектов.ПолучитьЗначение(НомСтр, "ТабОбъектов");
	КонецЕсли;
	
	//Если ТипЗначенияСтр(СписокВыгруженныхОбъектов) <> "СписокЗначений" Тогда
	//	Если Режим = "Проведение" Тогда Возврат(0) КонецЕсли;
	//	СписокВыгруженныхОбъектов = СоздатьОбъект("СписокЗначений");
	//	СписокСписковВыгруженныхОбъектов.Установить(ИдПравила, СписокВыгруженныхОбъектов);
	//КонецЕсли;
                                                       
	
	Если ПустоеЗначение(СокрЛП(Источник)) = 1 Тогда
		СистПредставление = ИдПравила + ?(ПустоеЗначение(ПараметрыПравила)=0, ЗначениеВСтрокуВнутр(ПараметрыПравила), "");
	Иначе
		Если (ПустоеЗначение(ПараметрыПравила)=0) И (НеСинхронизироватьПоДопПараметрам=0) Тогда
			
			//Тип	=	ТипЗначенияСтр(Источник);
			//Если		СокрЛП(Источник) = "<Объект не найден>" Тогда
			//	//	Объект не существует в ИБ
			//	Об					=	Источник;
			//	СистПредставление	=	"";
			//ИначеЕсли	Тип = "Справочник"	Тогда
			//	Об = СоздатьОбъект("Справочник." + Источник.Вид());
			//	Об.НайтиЭлемент(Источник);
			//	СистПредставление	=	ЗначениеВСтрокуВнутр(Об.ТекущийЭлемент());
			//ИначеЕсли	Тип = "Документ"	Тогда
			//	Об = СоздатьОбъект("Документ");
			//	Об.НайтиДокумент(Источник);
			//	СистПредставление	=	ЗначениеВСтрокуВнутр(Об.ТекущийДокумент());
			//Иначе
			//	Об					=	Источник;
			//	СистПредставление	=	ЗначениеВСтрокуВнутр(Об);
			//КонецЕсли;
			//СистПредставление		=	СистПредставление + ЗначениеВСтрокуВнутр(ПараметрыПравила);
			                                                                                       
			СистПредставление		=	СистемноеПредставлениеОбъекта(Источник)+ ЗначениеВСтрокуВнутр(ПараметрыПравила);			
		Иначе
			СистПредставление	=	?(ТипЗначенияСтр(Источник)<>"СписокЗначений",Источник,Источник.Получить("Идентификатор"));
		КонецЕсли;
	КонецЕсли;

	
	НомСтр = "";
	Если ТабОбъектов.НайтиЗначение(СистПредставление, НомСтр, "Объект") = 0 Тогда
		
		Если Режим = "Проведение" Тогда Возврат(0) КонецЕсли;
		
		Если ФормФлЗапоминатьСсылки = 1 Тогда
			УзелСсылки				=	СоздатьУзелСсылки(Источник, ТабРеквизитовПоиска, ПараметрыПравила);
			
			ТабОбъектов.НоваяСтрока();
			ТабОбъектов.Объект	=	СистПредставление;
			
			Если УзелСсылки <> 1 Тогда
				ТабОбъектов.Ссылка	=	УзелСсылки.ПредставлениеXML;
				//ТабОбъектов.УстановитьЗначение(НомерНовойСтроки, "Ссылка", УзелСсылки.ПредставлениеXML);
			КонецЕсли;
		Иначе
			ТабОбъектов.НоваяСтрока();
			ТабОбъектов.Объект = СистПредставление;
		КонецЕсли;
		
		Если НовыеНеСоздавать = 1 Тогда Возврат(1) КонецЕсли;	//	в данном случае нам нужна только ссылка
		
		Возврат(0);
		
	ИначеЕсли	ФормФлЗапоминатьСсылки = 1	Тогда
		                            
		СтрСсылка	=	ТабОбъектов.ПолучитьЗначение(НомСтр, "Ссылка");
		Если ПустоеЗначение(СтрСсылка) = 0 Тогда
			XML_DOM		=	гXMLАнализатор.СоздатьДокумент();
			XML_DOM.ЗагрузитьИзСтроки(СтрСсылка);
			УзелСсылки	=	XML_DOM.ВыбратьУзел("Ссылка");
		КонецЕсли;
		
	Иначе
	    
		Если Режим = "Проведение" Тогда
			УзелСсылки = СоздатьУзелСсылки(Источник, ТабРеквизитовПоиска, ПараметрыПравила);
		КонецЕсли;
		
	КонецЕсли;
	    
	Возврат(1);
	
КонецФункции		//	ОбъектУжеВыгружен()

//--------------------------------------------------------------------------------------------------

Процедура ЗаписатьОбъектВФайл(XML_DOM);
    
	гСчетчикВыгруженныхОбъектов	=	гСчетчикВыгруженныхОбъектов + 1;
	
	XML_DOM.УстановитьАтрибут("Нпп", гСчетчикВыгруженныхОбъектов);
	
    гФайлДанных.ВключитьЭлемент(XML_DOM);
	                                   
	
	Если гСчетчикВыгруженныхОбъектов % ФормКолвоБуферизуемыхОбъектов = 0 Тогда
		гФайлДанных.Сбросить();
	КонецЕсли;
	
	Если гСчетчикВыгруженныхОбъектов % 10 = 0 Тогда	Состояние("Выгружено объектов:    " + гСчетчикВыгруженныхОбъектов) КонецЕсли;
	
КонецПроцедуры

//--------------------------------------------------------------------------------------------------

Функция ПометкаУдаления(Источник, СтатусУдаления)
                                
	Если ПустоеЗначение(Источник) = 1 Тогда Возврат(0) КонецЕсли;
	
	Если		СтатусУдаления	= "Авто"			Тогда
		
		Возврат(Источник.ПометкаУдаления());
		
	//ИначеЕсли СтатусУдаления	= "Пометить"		Тогда	// это можно прочитать из правил...
	//ИначеЕсли СтатусУдаления	= "СнятьПометку"	Тогда
	
	КонецЕсли;
	
	Возврат(0);
	
КонецФункции		//	ПометкаУдаления() 

//--------------------------------------------------------------------------------------------------

Процедура ЗагрузитьПравило(Правило, Ид="")
                                       
	Если		(ПустоеЗначение(Ид) = 1)	И (ПустоеЗначение(Правило) = 0)	Тогда
		Ид		=	Правило.ПолучитьАтрибут("Ид");
	ИначеЕсли	ПустоеЗначение(Ид) = 1		Тогда
		Возврат;
	КонецЕсли;
	
	НомСтр	=	"";
	
	Если  гТабКэшПравил.НайтиЗначение(Ид, НомСтр, "Ид") = 0 Тогда
		
		Если		ПустоеЗначение(Правило) = 1	Тогда
			Правило	=	гПравила.ВыбратьУзел("//Правило[@Ид=""" + Ид + """]");
		КонецЕсли;
		
		Источник									=	Правило.ВыбратьУзел("ОбъектИсточник");
		Приемник									=	Правило.ВыбратьУзел("ОбъектПриемник");
		
		гТабКэшПравил.НоваяСтрока();
		гТабКэшПравил.Ид							=	Ид;
		гТабКэшПравил.Правило						=	Правило;
		гТабКэшПравил.ПоСсылкам						=	Число(Правило.ПолучитьАтрибут("ПоСсылкам"));
		гТабКэшПравил.Преобразование				=	Правило.ПолучитьАтрибут("Преобразование");
		гТабКэшПравил.ПравилоПереадресации			=	Правило.ПолучитьАтрибут("Правило");
		гТабКэшПравил.ПараметрыЗагрузки				=	Правило.ПолучитьАтрибут("ПараметрыЗагрузки");
		гТабКэшПравил.ИдСинхронизирующегоРеквизита	=	Правило.ПолучитьАтрибут("ИдСинхронизирующегоРеквизита");
		
		Условия										=	Правило.ВыбратьУзел("Условия");
		Если ПустоеЗначение(Условия) = 0 Тогда
			гТабКэшПравил.Условия		=	Условия;
			гТабКэшПравил.ВидУсловия	=	1;
		КонецЕсли;
		                            	
		Если ПустоеЗначение(Источник) = 0 Тогда
			гТабКэшПравил.Источник_Тип				=	Источник.ПолучитьАтрибут("Тип");
			гТабКэшПравил.Источник_Вид				=	Источник.ПолучитьАтрибут("Вид");
		КонецЕсли;
	
		Если ПустоеЗначение(Приемник) = 0 Тогда
			гТабКэшПравил.Приемник_Тип				=	Приемник.ПолучитьАтрибут("Тип");
			гТабКэшПравил.Приемник_Вид				=	Приемник.ПолучитьАтрибут("Вид");
			Если гТабКэшПравил.Приемник_Тип = "ЖурналРасчетов" Тогда
				гТабКэшПравил.Уникальность			=	Приемник.ПолучитьАтрибут("Уникальность");
				гТабКэшПравил.ДатаОтсчета			=	Приемник.ПолучитьАтрибут("ДатаОтсчета");
			КонецЕсли;
		КонецЕсли;
		
		Приемник_Тип								=	гТабКэшПравил.Приемник_Тип;
		Источник_Тип								=	гТабКэшПравил.Источник_Тип;
		//Если ПустоеЗначение(Приемник_Тип) = 1 Тогда Возврат КонецЕсли;
		
		//-------------------------------------------
		
		гТабКэшПравил.ТабРеквизитовПоиска			=	СоздатьОбъект("ТаблицаЗначений");
		гТабКэшПравил.ТабРеквизитов					=	СоздатьОбъект("ТаблицаЗначений");
		гТабКэшПравил.ТабРеквизитовСтрок			=	СоздатьОбъект("ТаблицаЗначений");
		
		Реквизиты = Правило.ВыбратьУзлы("Реквизит[@СпособЗагрузки=""Поиск""]");
		Если ПустоеЗначение(Реквизиты.КоличествоУзлов()) = 0 Тогда
			гТабКэшПравил.ТабРеквизитовПоиска.Загрузить(гТабКэшРеквизитов);
			Для СчРеквизитов = 0 По Реквизиты.КоличествоУзлов() - 1 Цикл
				ЗагрузитьПравилоРеквизитов(Реквизиты.ПолучитьУзел(СчРеквизитов), гТабКэшПравил.ТабРеквизитовПоиска);
			КонецЦикла;
		КонецЕсли;
		
		Если		Приемник_Тип = "Справочник"	Тогда
        	Запрос	=	"Реквизит[(@СпособЗагрузки != ""Поиск"") or (not(@СпособЗагрузки))]";
		ИначеЕсли	Приемник_Тип = "Документ"	Тогда
			Запрос	=	"Реквизит[( (@СпособЗагрузки != ""Поиск"") or (not(@СпособЗагрузки)) ) and ( (Приемник/@ТипАтрибута != ""РТД"") or (not(Приемник)) ) and ( (@СпособВыгрузки != ""ПеребратьСтрокиДокумента"") or (not(СпособВыгрузки)) )]";
		ИначеЕсли	Приемник_Тип = "Операция"	Тогда
			Запрос	=	"Реквизит[ (Приемник/@ТипАтрибута = ""АО"") or (Приемник/@ТипАтрибута = ""РО"") ]";
		ИначеЕсли	(ПустоеЗначение(Приемник_Тип) = 1) И (Источник_Тип = "Документ")	Тогда
			Запрос	=	"Реквизит[(@СпособВыгрузки != ""ПеребратьСтрокиДокумента"")]";
		Иначе
			Запрос	=	"Реквизит";
		КонецЕсли;
		
		Реквизиты = Правило.ВыбратьУзлы(Запрос);
		Если ПустоеЗначение(Реквизиты.КоличествоУзлов()) = 0 Тогда
			гТабКэшПравил.ТабРеквизитов.Загрузить(гТабКэшРеквизитов);
			Для СчРеквизитов = 0 По Реквизиты.КоличествоУзлов() - 1 Цикл
				ЗагрузитьПравилоРеквизитов(Реквизиты.ПолучитьУзел(СчРеквизитов), гТабКэшПравил.ТабРеквизитов);
			КонецЦикла;
		КонецЕсли;
		
		Если		Приемник_Тип = "Документ"	Тогда
			Запрос	=	"Реквизит[( (@СпособЗагрузки != ""Поиск"") or (not(@СпособЗагрузки)) ) and ( (Приемник/@ТипАтрибута = ""РТД"") or (@СпособВыгрузки = ""ПеребратьСтрокиДокумента"") )]";
		ИначеЕсли	Приемник_Тип = "Операция"	Тогда
			//Запрос	=	"Реквизит[ (Приемник/@ТипАтрибута != ""АО"") and (Приемник/@ТипАтрибута != ""РО"") ]";
			Запрос	=	"Реквизит[( (Приемник/@ТипАтрибута != ""АО"") and (Приемник/@ТипАтрибута != ""РО"") ) or (@СпособВыгрузки = ""ПеребратьСтрокиДокумента"")]";
		ИначеЕсли	(ПустоеЗначение(Приемник_Тип) = 1) И (Источник_Тип = "Документ")	Тогда
			Запрос	=	"Реквизит[(@СпособВыгрузки = ""ПеребратьСтрокиДокумента"")]";
		Иначе
			Запрос	=	"";
		КонецЕсли;
		
		Если Запрос <> "" Тогда
			Реквизиты	=	Правило.ВыбратьУзлы(Запрос);
			Если ПустоеЗначение(Реквизиты.КоличествоУзлов()) = 0 Тогда
				гТабКэшПравил.ТабРеквизитовСтрок.Загрузить(гТабКэшРеквизитов);
				Для СчРеквизитов = 0 По Реквизиты.КоличествоУзлов() - 1 Цикл
					ЗагрузитьПравилоРеквизитов(Реквизиты.ПолучитьУзел(СчРеквизитов), гТабКэшПравил.ТабРеквизитовСтрок);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		гТабКэшПравил.ПолучитьСтрокуПоНомеру(НомСтр);
		Если		ПустоеЗначение(Правило) = 1	Тогда
			Правило	=	гТабКэшПравил.Правило;			//  нужно для поиска значений и др.
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры		//	ЗагрузитьПравило() 

//--------------------------------------------------------------------------------------------------

Функция ПодобратьПравилоПоТипамИЗначению(Знач Источник="", Правило="", ИдПравила="", Знач ТипИсточника="", Знач ВидИсточника="", Знач ТипПриемника="", Знач ВидПриемника="")
	          
	ЗагрузитьПравило(Правило, ИдПравила);
	
	Если ПустоеЗначение(Правило) = 0 Тогда
		Если гТабКэшПравил.ВидУсловия = 1 Тогда	//	т.е. условие задано
			Если УсловияВыполняются(гТабКэшПравил.Условия, Источник) = 0 Тогда Возврат(0) КонецЕсли;
		КонецЕсли;
		Возврат(1);
	КонецЕсли;

	
	Если (ПустоеЗначение(ТипИсточника) = 1) И (ПустоеЗначение(Источник) = 0) Тогда
		ТипИсточника	=	ТипЗначенияСтр(Источник);
		Попытка ВидИсточника = Источник.Вид() Исключение КонецПопытки;
	КонецЕсли;
		
	
	Запрос				=	"//Правило[";
	
	
	Если ПустоеЗначение(ТипИсточника) = 0 Тогда
		Запрос			=	Запрос +	"(ОбъектИсточник/@Тип = """ + ТипИсточника + """)";
		Если ПустоеЗначение(ВидИсточника) = 0 Тогда
			Запрос		=	Запрос + "and(ОбъектИсточник/@Вид = """ + ВидИсточника + """)";
		КонецЕсли;
		Если ПустоеЗначение(ТипПриемника) = 0 Тогда
			Запрос		=	Запрос + "and";
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(ТипПриемника) = 0 Тогда
		Запрос			=	Запрос +	"(ОбъектПриемник/@Тип = """ + ТипПриемника + """)";
		Если ПустоеЗначение(ВидПриемника) = 0 Тогда
			Запрос		=	Запрос + "and(ОбъектПриемник/@Вид = """ + ВидПриемника + """)";
		КонецЕсли;
	КонецЕсли;
	
	Запрос			=	Запрос + "]";
	                     
	ВыборкаПравил	=	гПравила.ВыбратьУзлы(Запрос);
	Для Сч = 0 По ВыборкаПравил.КоличествоУзлов() - 1 Цикл
		ВыбПравило	=	ВыборкаПравил.ПолучитьУзел(Сч);
		ИдПравила	=	"";
		ЗагрузитьПравило(ВыбПравило, ИдПравила);
		Если гТабКэшПравил.ВидУсловия = 1 Тогда	//	т.е. условие задано
			Если УсловияВыполняются(гТабКэшПравил.Условия, Источник) = 1 Тогда
				Правило	=	ВыбПравило;
				Возврат(1);
			КонецЕсли;
		Иначе
			Правило	=	ВыбПравило;
			Возврат(1);
		КонецЕсли;
	КонецЦикла;
		       
	
	ЗаписатьОшибку("Не найдено правило конвертации объекта:
					|		Объект: "		+	Источник		+ "
					|		ТипИсточника: " +	ТипИсточника	+ "
					|		ВидИсточника: " +	ВидИсточника	+ "
					|		ТипПриемника: " +	ТипПриемника	+ "
					|		ВидПриемника: " + 	ВидПриемника	);
	
	
	Возврат(0);
	
КонецФункции		//	ПодобратьПравилоПоТипамИЗначению()

//--------------------------------------------------------------------------------------------------

Функция НачальнаяИнициализация()
		
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Инициализация кэш-таблиц
	
	гТабКэшРеквизитов	=	СоздатьОбъект("ТаблицаЗначений");
	гТабКэшРеквизитов.НоваяКолонка("Ид",								"Строка");
	
	гТабКэшРеквизитов.НоваяКолонка("Источник_Ид",						"Строка");
	гТабКэшРеквизитов.НоваяКолонка("Источник_ТипАтрибута",				"Строка");
	гТабКэшРеквизитов.НоваяКолонка("Источник_Тип",						"Строка");
	гТабКэшРеквизитов.НоваяКолонка("Источник_Вид",						"Строка");
	
	гТабКэшРеквизитов.НоваяКолонка("Приемник_Ид",						"Строка");
	гТабКэшРеквизитов.НоваяКолонка("Приемник_ТипАтрибута",				"Строка");
	гТабКэшРеквизитов.НоваяКолонка("Приемник_Тип",						"Строка");
	гТабКэшРеквизитов.НоваяКолонка("Приемник_Вид",						"Строка");
	гТабКэшРеквизитов.НоваяКолонка("Приемник_Длина",					"Число");
	
	гТабКэшРеквизитов.НоваяКолонка("Преобразование",					"Строка");
	гТабКэшРеквизитов.НоваяКолонка("Правило",							"Строка");
	
	гТабКэшРеквизитов.НоваяКолонка("ЕстьПроцедура",						"Число");	//	так работает быстрее
	гТабКэшРеквизитов.НоваяКолонка("ПолучитьИзПараметров",				"Число");
	
	гТабКэшРеквизитов.НоваяКолонка("ПараметрыПравила",					"Строка");
	
	гТабКэшРеквизитов.НоваяКолонка("СпособВыгрузки",					"Строка");
	гТабКэшРеквизитов.НоваяКолонка("СпособЗагрузки",					"Строка");
	
	гТабКэшРеквизитов.НоваяКолонка("Условия");
	гТабКэшРеквизитов.НоваяКолонка("ВидУсловия", 						"Число");	// 0 - не задано, 1 - по объекту, 2 - по реквизиту
	
	гТабКэшРеквизитовЗначений	=	СоздатьОбъект("ТаблицаЗначений");
	гТабКэшРеквизитовЗначений.НоваяКолонка("Ид",						"Строка");
	
	гТабКэшРеквизитовЗначений.НоваяКолонка("Источник_Ид",				"Строка");
	гТабКэшРеквизитовЗначений.НоваяКолонка("Источник_Тип",				"Строка");
	гТабКэшРеквизитовЗначений.НоваяКолонка("Источник_Вид",				"Строка");
	
	гТабКэшРеквизитовЗначений.НоваяКолонка("Приемник_Ид",				"Строка");
	гТабКэшРеквизитовЗначений.НоваяКолонка("Приемник_Тип",				"Строка");
	гТабКэшРеквизитовЗначений.НоваяКолонка("Приемник_Вид",				"Строка");
	гТабКэшРеквизитовЗначений.НоваяКолонка("Приемник_Длина",			"Число");
	
	гТабКэшРеквизитовЗначений.НоваяКолонка("Преобразование",			"Строка");
	гТабКэшРеквизитовЗначений.НоваяКолонка("Правило",					"Строка");
	гТабКэшРеквизитовЗначений.НоваяКолонка("ЕстьПроцедура",				"Число");
	
	гТабКэшРеквизитовЗначений.НоваяКолонка("ПараметрыПравила",			"Строка");
	
	гТабКэшРеквизитовЗначений.НоваяКолонка("Условия");
	гТабКэшРеквизитовЗначений.НоваяКолонка("ВидУсловия", 				"Число");	// 1 - условие задано
	
	//--------------------
	
	гТабКэшПравил	=	СоздатьОбъект("ТаблицаЗначений");
	гТабКэшПравил.НоваяКолонка("Ид",									"Строка");
	
	гТабКэшПравил.НоваяКолонка("Правило");
	гТабКэшПравил.НоваяКолонка("Условия");
	гТабКэшПравил.НоваяКолонка("ВидУсловия", 							"Число");	// 1 - условие задано
	
	гТабКэшПравил.НоваяКолонка("ПоСсылкам",								"Число");
	
	гТабКэшПравил.НоваяКолонка("Источник_Тип",							"Строка");
	гТабКэшПравил.НоваяКолонка("Источник_Вид",							"Строка");
	
	гТабКэшПравил.НоваяКолонка("Приемник_Тип",							"Строка");
	гТабКэшПравил.НоваяКолонка("Приемник_Вид",							"Строка");
	
	гТабКэшПравил.НоваяКолонка("ИдСинхронизирующегоРеквизита",			"Строка");
	
	гТабКэшПравил.НоваяКолонка("Преобразование",						"Строка");
	гТабКэшПравил.НоваяКолонка("ПравилоПереадресации",					"Строка");
	гТабКэшПравил.НоваяКолонка("ПараметрыЗагрузки",						"Строка");
	
	гТабКэшПравил.НоваяКолонка("ТабРеквизитовПоиска",					"ТаблицаЗначений");
	гТабКэшПравил.НоваяКолонка("ТабРеквизитов",							"ТаблицаЗначений");
	гТабКэшПравил.НоваяКолонка("ТабРеквизитовСтрок",					"ТаблицаЗначений");
	
	//--------------------
	
	гТабКэшПараметровЗагрузки	=	СоздатьОбъект("ТаблицаЗначений");
	гТабКэшПараметровЗагрузки.НоваяКолонка("Ид",						"Строка");
	гТабКэшПараметровЗагрузки.НоваяКолонка("Дата",						"Дата");
	
	гТабКэшПараметровЗагрузки.НоваяКолонка("ЗамещатьНайденные",			"Число");
	гТабКэшПараметровЗагрузки.НоваяКолонка("НовыеНеСоздавать",			"Число");
	
	гТабКэшПараметровЗагрузки.НоваяКолонка("СпособЗагрузки",			"Строка");
	гТабКэшПараметровЗагрузки.НоваяКолонка("СтатусУдаления",			"Строка");
	гТабКэшПараметровЗагрузки.НоваяКолонка("СтатусПроводок",			"Строка");
	гТабКэшПараметровЗагрузки.НоваяКолонка("СтатусПроведения",			"Строка");
	гТабКэшПараметровЗагрузки.НоваяКолонка("СтатусРасчетныхДокументов",	"Строка");
	
	гТабКэшПараметровЗагрузки.НоваяКолонка("ДатаТекущегоПериодаЖР",		"Дата");
	
	гТабКэшПараметровЗагрузки.НоваяКолонка("ЗагружатьОперации",			"Число");
	гТабКэшПараметровЗагрузки.НоваяКолонка("ЗагружатьЗаписиЖР",			"Число");
	
	гТабКэшПараметровЗагрузки.НоваяКолонка("ПравилоОпераций");
	
		////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Поиск правил выгрузки данных (проводок, документов и др.)
	
	СписокВозможныхМест	=	СоздатьОбъект("СписокЗначений");
	СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()					+	"ExtForms\RAcTr_Fp.xml"	);
	СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()					+	"RAcTr_Fp.xml"	);
	
	гПутьОбъекта_ПравилаКонвертации			=	НайтиПервыйСуществующийФайл(СписокВозможныхМест);
	                               
	
	Если ПустоеЗначение(гПутьОбъекта_ПравилаКонвертации) = 1 Тогда
		Предупреждение("Не найден файл правил конвертации: RAcTr_Fp.xml
		                |
						|Следует разместить данный файл в каталоге
						|ExtForms информационной базы!");
		Возврат 0;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Поиск внешней компоненты V7Plus.dll
	
	СписокВозможныхМест	=	СоздатьОбъект("СписокЗначений");
	СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()					+	"v7plus.dll"	);
	СписокВозможныхМест.ДобавитьЗначение(	КаталогПрограммы()			+	"v7plus.dll"	);
	СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()	+	"ExtForms\"	+	"v7plus.dll"	);
	
	гПутьОбъекта_КомпонентаV7plus			=	НайтиПервыйСуществующийФайл(СписокВозможныхМест);

	Результат = Загрузчик.ЗагрузитьВК(СокрЛП(Константа.ПутьКВнешнимБиблиотекам)+"\v7plus.dll", "Addin.V7Mail=faa6ebe0-1069-11d4-a5ff-008048da0cd2
    												|Addin.V7SysInfo=046d5520-2c8f-11d4-a62a-008048da0cd2
    												|Addin.V7HttpReader=1e7bc440-1076-11d4-a635-004095e0ebd2
    												|Addin.XMLParser=bb45ed80-1ad7-11d4-a635-004095e0ebd2
    												|Addin.V7TextFile=921da8db-1e6f-4d61-8f49-a3127b799b19");
	
	гXMLАнализатор		=	СоздатьОбъект("AddIn.XMLParser");
	ВерсияАнализатора	=	гXMLАнализатор.ВерсияАнализатора;
	Если ВерсияАнализатора <> "2.0" Тогда
		Предупреждение("Для работы с программой необходимо обновить внешнюю компоненту v7plus.dll !");
	Возврат 0;
	КонецЕсли;

	
	ЗагрузитьПравилаКонвертации();
	

	//ФормДатаНач								=	РабочаяДата();
	//ФормДатаКон								=	РабочаяДата();
	
	
	ФормКолвоБуферизуемыхОбъектов			=	50;
	ФормФлЗапоминатьСсылки					=	1;
	
	
	гСписокПараметров						=	СоздатьОбъект("СписокЗначений");
	гТабОбъектов							=	СоздатьОбъект("ТаблицаЗначений");
	гТабОбъектов.НоваяКолонка("ИдПравила");
	гТабОбъектов.НоваяКолонка("СписокОбъектов");
	
	Возврат 1;
	
КонецФункции		//	НачальнаяИнициализация()

//--------------------------------------------------------------------------------------------------

Функция ПолучитьЗначениеМетодом(Источник, Метод)
                                        
	Если ПустоеЗначение(СокрЛП(Источник)) = 1 Тогда Возврат("") КонецЕсли;
	    
	Если		Метод = "Значение()"				Тогда
		Возврат		Источник;
	ИначеЕсли	Метод = "Вид()"						Тогда
		Возврат		Источник.Вид();
	ИначеЕсли	Метод = "ПометкаУдаления()"			Тогда
		Возврат		Источник.ПометкаУдаления();
	ИначеЕсли	Метод = "СистемноеПредставление()"	Тогда
		Возврат		ЗначениеВСтрокуВнутр(Источник);
	ИначеЕсли	Метод = "Код()"						Тогда
		Возврат		Источник.Код;
	КонецЕсли;
	
	
	ТипИсточника	=	ТипЗначенияСтр(Источник);
	
	
    Если		ТипИсточника = "Справочник"			Тогда
		      
		Если		Метод = "ТекущийЭлемент()"		Тогда
			Зн	=	Источник.ТекущийЭлемент();
		ИначеЕсли	Метод = "ЭтоГруппа()"			Тогда
			Зн	=	Источник.ЭтоГруппа();
		КонецЕсли;
		                                     
	ИначеЕсли	ТипИсточника = "Документ"			Тогда

		Если		Метод = "ТекущийДокумент()"		Тогда
			//Зн	=	Источник.ТекущийДокумент();
			Возврат(Источник);
		ИначеЕсли	Метод = "Проведен()"			Тогда
			Зн	=	Источник.Проведен();
		ИначеЕсли	Метод = "ПроводкиВключены()"	Тогда
			Зн	=	Источник.Операция.ВключитьПроводки();
		КонецЕсли;
		
	ИначеЕсли	ТипИсточника = "Перечисление"		Тогда
		
		Если			Метод = "ТекущееЗначение()"	Тогда
			Зн	=	Источник;
		ИначеЕсли		Метод = "Представление()"	Тогда
			Зн	=	Строка(Источник);
		ИначеЕсли		Метод = "Идентификатор()"	Тогда
			Зн	=	Источник.Идентификатор();
		ИначеЕсли		Метод = "ПорядковыйНомер()"	Тогда
			Зн	=	Источник.ПорядковыйНомер();
		КонецЕсли;
		
	ИначеЕсли	ТипИсточника = "Счет"				Тогда
		
		Если		Метод = "ТекущийСчет()"			Тогда
			Зн	=	Источник.ТекущийСчет();
		ИначеЕсли	Метод = "Родитель()"			Тогда
			Зн	=	Источник.Родитель();
		ИначеЕсли	Найти(Метод, "ВидСубконто") > 0	Тогда
			НомерСубконто	=	Число(Сред(Метод, 12, 1));
			Если НомерСубконто > МаксимальноеКоличествоСубконто() Тогда
				Возврат("");
			КонецЕсли;
			Зн	=	Источник.ВидСубконто(НомерСубконто);
		КонецЕсли;
	
	ИначеЕсли	ТипИсточника = "ВидСубконто"		Тогда
		
		Если		Метод = "Идентификатор()"		Тогда
			Зн	=	Источник.Идентификатор();
		ИначеЕсли	Метод = "Представление()"		Тогда
			Зн	=	Метаданные.ВидСубконто(Источник.Идентификатор()).Представление();
		ИначеЕсли	Метод = "ТипСубконто()"			Тогда
			Зн	=	Источник.ТипСубконто();
		ИначеЕсли	Метод = "ПорядковыйНомер()"		Тогда
			Зн	=	Источник.ПорядковыйНомер();
		КонецЕсли;
		
	ИначеЕсли	ТипИсточника = "Операция"			Тогда

		Если		Метод = "ПланСчетов()"			Тогда
			Если Источник.ПроводкаВыбрана() = 1 Тогда
				Зн	=	Источник.ПланСчетов().Идентификатор();
			Иначе
				ЗаписатьОшибку("Не выбрана проводка для получения плана счетов!", "!");
			КонецЕсли;
		ИначеЕсли	Метод = "ВидДокумента()"		Тогда
			Зн	=	Источник.Документ.Вид();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат(Зн);
	
КонецФункции		//	ПолучитьЗначениеМетодом()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция ВыполнитьПреобразование(СписокСтрокой, Знач Объект, Знач Реквизит="", ИдПравила="", Приемник_Длина=0)
	
	Если ПустоеЗначение(СписокСтрокой) = 1 Тогда Возврат("") КонецЕсли;
	
	Список	=	ЗначениеИзСтроки(СписокСтрокой);
	Если ТипЗначенияСтр(Список) <> "СписокЗначений" Тогда Возврат(СписокСтрокой) КонецЕсли;	//	Для простых строковых значений...

	Если Список.Получить("ОбъектИлиРеквизит") = "Реквизит" Тогда	Объект = Реквизит	КонецЕсли;

	Значение	=	Список.Получить("Значение");
	
	Если		Значение = "<Пустое значение>" Тогда
		Возврат("");
	ИначеЕсли	ПустоеЗначение(Значение) = 0 Тогда
		Значение	=	СтрЗаменить(Значение,	Симв(10),			"#рс#" );
		//Значение	=	СтрЗаменить(Значение,	СимволТабуляции,	"#ст#" );
		Возврат(Значение);
	КонецЕсли;
	
	СтрокаСумма	=	"";
	
	Для Сч = 1 По Список.РазмерСписка() Цикл
		
		Пред	=	"";
	    Зн		=	Список.ПолучитьЗначение(Сч, Пред);
		
		Если		Пред = "Атрибут"								Тогда
			
			Если Найти(Зн, "()") = 0 Тогда
				Если ТипЗначенияСтр(Объект) = "Справочник" Тогда
					Объект.ИспользоватьДату(НачИнтервала, 1);
				КонецЕсли;
				Объект	=	Объект.ПолучитьАтрибут(Зн);
			Иначе
				Объект	=	ПолучитьЗначениеМетодом(Объект, Зн);
			КонецЕсли;
			
		ИначеЕсли	Пред = "ИтогПоКолонке"							Тогда
			
			Объект	=	Объект.Итог(Зн);
			                     
		ИначеЕсли	Пред = "Конкатенация"							Тогда
			
			Если Найти(Зн, "()") = 0 Тогда
				СтрокаСумма	=	СтрокаСумма	+	СокрЛ(ПолучитьИдОбъектаИсточника(Объект.ПолучитьАтрибут(Зн)));
			Иначе
				СтрокаСумма	=	СтрокаСумма	+	СокрЛ(ПолучитьИдОбъектаИсточника(ПолучитьЗначениеМетодом(Объект, Зн)));
			КонецЕсли;
			
		ИначеЕсли	Пред = "ДополнитьНулями"						Тогда

			Если Найти(Зн, "()") = 0 Тогда
				Объект	=	Объект.ПолучитьАтрибут(Зн);
			Иначе
				Объект	=	ПолучитьЗначениеМетодом(Объект, Зн);
			КонецЕсли;
			
			Объект	=	ДополнитьНулями(Объект, Приемник_Длина);
			                      
		ИначеЕсли	Пред = "ПолучитьИзПараметров"					Тогда
			
			Возврат("#ПолучитьИзПараметров");
			
		ИначеЕсли	Найти(Пред, "ИспользоватьСубконтоСчета") > 0	Тогда
			
			Правило	=	"";
			Счет	=	Объект.ПолучитьАтрибут(Зн);
			Если ПустоеЗначение(Счет)					= 1	Тогда	Возврат("")	КонецЕсли;
			Если НайтиПравило(Счет, Правило, ИдПравила)	= 0	Тогда	Возврат("")	КонецЕсли;
			    
			ИдПравила			=	"";
			УзелЗначения		=	Правило.ВыбратьУзел("Значение[@Источник=""" + Счет.Код + """]");
			Если ПустоеЗначение(УзелЗначения) = 1 Тогда	ЗаписатьОшибку("Не найдено правило конвертации значения " + Счет, "!"); Возврат("");	КонецЕсли;
			
			НомерСубконто		=	СокрЛП(СтрЗаменить(Пред, "ИспользоватьСубконтоСчета_", ""));
			
			Запрос				=	"Реквизит[(Приемник/@НомерСубконто = """ + НомерСубконто + """)]";
			АтрибутыЗначения	=	УзелЗначения.ВыбратьУзлы(Запрос);
			КоличествоУзлов		=	АтрибутыЗначения.КоличествоУзлов();
			Если ПустоеЗначение(КоличествоУзлов) = 1 Тогда Возврат("") КонецЕсли;
			     
			СписокВозможныхЗначений	=	Реквизит;
			
			Для СчАтрибутов = 0 По КоличествоУзлов - 1 Цикл
				АтрибутЗначения	=	АтрибутыЗначения.ПолучитьУзел(СчАтрибутов);
				                                                            
				Если (ПустоеЗначение(Реквизит) = 1) Или (Реквизит = "#Получить") Или (ТипЗначенияСтр(СписокВозможныхЗначений) = "СписокЗначений") Тогда
					РеквИсточник	=	АтрибутЗначения.ВыбратьУзел("Источник");
					Если ПустоеЗначение(РеквИсточник) = 0 Тогда
						ТипРеквИсточника		=	РеквИсточник.ПолучитьАтрибут("Тип");
						ВидРеквИсточника		=	РеквИсточник.ПолучитьАтрибут("Вид");
						НомерСубконтоИсточника	=	РеквИсточник.ПолучитьАтрибут("НомерСубконто");
						Если ТипЗначенияСтр(СписокВозможныхЗначений) = "СписокЗначений" Тогда
							Реквизит		=	ПодобратьЗначениеПоТипу(СписокВозможныхЗначений, ТипРеквИсточника, ВидРеквИсточника);
						Иначе
							Реквизит		=	ПодобратьЗначениеПоТипу(Объект, ТипРеквИсточника, ВидРеквИсточника, НомерСубконтоИсточника);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				                        
				Усл	=	АтрибутЗначения.ВыбратьУзел("Условия");
				Если ПустоеЗначение(Усл) = 0 Тогда
					Если УсловияВыполняются(Усл, Реквизит) = 0 Тогда Продолжить	КонецЕсли;
				КонецЕсли;
				
				ИдПравила	=	"";
				НайтиПравилоДляАтрибутаЗначения(Реквизит, , ИдПравила, АтрибутЗначения);
				Возврат(Реквизит);
			КонецЦикла;
			
		ИначеЕсли	Найти("ОбъектИлиРеквизит,Значение", Пред) > 0	Тогда
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустоеЗначение(СтрокаСумма) = 1 Тогда
		Возврат(Объект);
	Иначе
		Возврат(СтрокаСумма);
	КонецЕсли;
	
КонецФункции		//	ВыполнитьПреобразование()

//--------------------------------------------------------------------------------------------------

Функция НайтиПравило(Источник, Правило="", ИдПравила="", ТипПриемника="", ВидПриемника="", ИдПравилаДок="")
	          
	ЗагрузитьПравило(Правило, ИдПравила);
	
	Если ПустоеЗначение(Правило) = 0 Тогда
		Если гТабКэшПравил.ВидУсловия = 1 Тогда	//	т.е. условие задано
			Если УсловияВыполняются(гТабКэшПравил.Условия, Источник, ИдПравилаДок) = 0 Тогда Возврат(0) КонецЕсли;
		КонецЕсли;
		Возврат(1);
	КонецЕсли;
	
	Вид				=	"";
	Запрос			=	"";
	
	Тип				=	?(ТипЗначенияСтр(Источник)<>"СписокЗначений",ТипЗначенияСтр(Источник),Источник.Получить("ТипОбъекта"));
	
	
	Если	ПустоеЗначение(Тип) = 1									Тогда Возврат(0) КонецЕсли;
	Если	(Тип = "Строка") И (ТипПриемника = "Неопределенный")	Тогда Возврат(0) КонецЕсли;
	
	
	Запрос			=	Запрос + "//Правило[(ОбъектИсточник/@Тип = """ + Тип + """)";
	
	Если (Найти("Строка,Число,Дата,Операция,Календарь,ВидСубконто,ВидРасчета", Тип) = 0) И (Тип <> "ПланСчетов") Тогда
		Вид			=	?(ТипЗначенияСтр(Источник)<>"СписокЗначений",Источник.Вид(),Источник.Получить("ВидОбъекта"));
		Запрос		=	Запрос + "and(ОбъектИсточник/@Вид = """ + Вид + """)";
	КонецЕсли;
	
	Если (ПустоеЗначение(ТипПриемника) = 0) И (ТипПриемника <> "Неопределенный") Тогда
		Запрос		=	Запрос + "and(ОбъектПриемник/@Тип = """ + ТипПриемника + """)";
		Если ПустоеЗначение(ВидПриемника) = 0 Тогда
			Запрос	=	Запрос + "and(ОбъектПриемник/@Вид = """ + ВидПриемника + """)";
		КонецЕсли;
	КонецЕсли;
	
	Запрос			=	Запрос + "]";
	                     
	ВыборкаПравил	=	гПравила.ВыбратьУзлы(Запрос);
	Для Сч = 0 По ВыборкаПравил.КоличествоУзлов() - 1 Цикл
		ВыбПравило	=	ВыборкаПравил.ПолучитьУзел(Сч);
		ИдПравила	=	"";
		ЗагрузитьПравило(ВыбПравило, ИдПравила);
		Если гТабКэшПравил.ВидУсловия = 1 Тогда	//	т.е. условие задано
			Если УсловияВыполняются(гТабКэшПравил.Условия, Источник, ИдПравилаДок) = 1 Тогда
				Правило	=	ВыбПравило;
				Возврат(1);
			КонецЕсли;
		Иначе
			Правило	=	ВыбПравило;
			Возврат(1);
		КонецЕсли;
	КонецЦикла;
		       
	
	Если Тип <> "ЖурналРасчетов" Тогда
		ЗаписатьОшибку("Не найдено правило конвертации объекта: " + Тип + "." + Вид + " - " + Источник, "!!");
	КонецЕсли;
	
	
	Возврат(0);
	
КонецФункции		//	НайтиПравило()

//--------------------------------------------------------------------------------------------------

Функция НайтиПравилоДляАтрибутаЗначения(Знач Источник, Правило="", ИдПравила="", ПравилоАтрибутаЗначения="")
	              
	Если (ПустоеЗначение(ИдПравила) = 1) И (ПустоеЗначение(ПравилоАтрибутаЗначения) = 0) Тогда
		ИдПравила	=	ПравилоАтрибутаЗначения.ПолучитьАтрибут("Правило");
	КонецЕсли;
	
	ЗагрузитьПравило(Правило, ИдПравила);
	
	Если ПустоеЗначение(Правило) = 0 Тогда
		Если гТабКэшПравил.ВидУсловия = 1 Тогда	//	т.е. условие задано
			Если УсловияВыполняются(гТабКэшПравил.Условия, Источник) = 0 Тогда Возврат(0) КонецЕсли;
		КонецЕсли;
		Возврат(1);
	КонецЕсли;
	
	Если ПустоеЗначение(ПравилоАтрибутаЗначения) = 1 Тогда Возврат(0) КонецЕсли;
	
	Запрос				=	"";
	Источник_Тип		=	"";
	Источник_Вид		=	"";
	Приемник_Тип		=	"";
	Приемник_Вид		=	"";
	
	УзелИсточник		=	ПравилоАтрибутаЗначения.ВыбратьУзел("Источник");
	УзелПриемник		=	ПравилоАтрибутаЗначения.ВыбратьУзел("Приемник");
	
	Если ПустоеЗначение(УзелИсточник) = 0 Тогда
		Источник_Тип	=	УзелИсточник.ПолучитьАтрибут("Тип");
		Источник_Вид	=	УзелИсточник.ПолучитьАтрибут("Вид");
	КонецЕсли;

	Если ПустоеЗначение(УзелПриемник) = 0 Тогда
		Приемник_Тип	=	УзелПриемник.ПолучитьАтрибут("Тип");
		Приемник_Вид	=	УзелПриемник.ПолучитьАтрибут("Вид");
	КонецЕсли;
	            
	Если ПустоеЗначение(Приемник_Тип) = 1 Тогда Возврат(0)								КонецЕсли;
	Если ПустоеЗначение(Источник_Тип) = 1 Тогда Источник_Тип = ?(ТипЗначенияСтр(Источник)<>"СписокЗначений",ТипЗначенияСтр(Источник),Источник.Получить("ТипОбъекта"));	КонецЕсли;
	Если ПустоеЗначение(Источник_Тип) = 1 Тогда Возврат(0) 								КонецЕсли;

	Запрос			=	Запрос + "//Правило[(ОбъектИсточник/@Тип = """ + Источник_Тип + """)";
	
	Если Найти("Строка,Число,Дата,Операция", Источник_Тип) = 0 Тогда
		Если ПустоеЗначение(Источник_Вид) = 1 Тогда Источник_Вид = ?(ТипЗначенияСтр(Источник)<>"СписокЗначений",ТипЗначенияСтр(Источник),Источник.Получить("ВидОбъекта")); КонецЕсли;
		Запрос		=	Запрос + "and(ОбъектИсточник/@Вид = """ + Источник_Вид + """)";
	КонецЕсли;
	
	Запрос			=	Запрос + "and(ОбъектПриемник/@Тип = """ + Приемник_Тип + """)";
	
	Если Найти("Строка,Число,Дата,Операция", Приемник_Тип) = 0 Тогда
		Если ПустоеЗначение(Приемник_Вид) = 1 Тогда Приемник_Вид = Источник_Вид КонецЕсли;
		Запрос		=	Запрос + "and(ОбъектПриемник/@Вид = """ + Приемник_Вид + """)";
	КонецЕсли;
	
	Запрос			=	Запрос + "]";
	                     
	ВыборкаПравил	=	гПравила.ВыбратьУзлы(Запрос);
	Для Сч = 0 По ВыборкаПравил.КоличествоУзлов() - 1 Цикл
		ВыбПравило	=	ВыборкаПравил.ПолучитьУзел(Сч);
		ИдПравила	=	"";
		ЗагрузитьПравило(ВыбПравило, ИдПравила);
		Если гТабКэшПравил.ВидУсловия = 1 Тогда	//	т.е. условие задано
			Если УсловияВыполняются(гТабКэшПравил.Условия, Источник) = 1 Тогда
				Правило	=	ВыбПравило;
				Возврат(1);
			КонецЕсли;
		Иначе
			Правило	=	ВыбПравило;
			Возврат(1);
		КонецЕсли;
	КонецЦикла;
		
	ЗаписатьОшибку("Не найдено правило конвертации атрибута значения: " + ПравилоАтрибутаЗначения.ПолучитьАтрибут("Имя") + " - " + Источник_Тип + "." + Источник_Вид + " - " + Источник, "!!");
	Возврат(0);
	
КонецФункции		//	НайтиПравилоДляАтрибутаЗначения()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция ПодготовитьТаблицуДляПроведения()
	
	гТабКэшПравил.НоваяКолонка("Порядок", "Строка");
	гТабКэшПравил.ВыбратьСтроки();
	Пока гТабКэшПравил.ПолучитьСтроку() = 1 Цикл
		Ид						=	гТабКэшПравил.Ид;
		Приемник_Вид			=	гТабКэшПравил.Приемник_Вид;
		гТабКэшПравил.Порядок	=	СтрЗаменить(Ид, Приемник_Вид + "_", "");
	КонецЦикла;
	
	
	гТабКэшПравил.Сортировать("Источник_Тип + , Источник_Вид + , Порядок +");
	              
	
	гТабКэшПравил.УдалитьКолонку("Порядок");
	
	
	КопияТабПравил	=	СоздатьОбъект("ТаблицаЗначений");
	гТабКэшПравил.Выгрузить(КопияТабПравил);
	
	
	ТабВидовДокументов	=	СоздатьОбъект("ТаблицаЗначений");
	ТабВидовДокументов.НоваяКолонка("ВидДокумента", "Строка");
	ТабВидовДокументов.НоваяКолонка("СписокПравил",	"СписокЗначений");	//	(НомерСтроки таблицы правил, ИдПравила)
	
	
	гТабКэшПравил.ВыбратьСтроки();
	Пока гТабКэшПравил.ПолучитьСтроку() = 1 Цикл
		Если гТабКэшПравил.Источник_Тип <> "Документ" Тогда Продолжить КонецЕсли;
		                                         
		ВидДокумента			=	гТабКэшПравил.Источник_Вид;
		ИдПравила				=	гТабКэшПравил.Ид;
		ПравилоПереадресации	=	гТабКэшПравил.ПравилоПереадресации;
		НомСтр					=	"";
		
		Если ТабВидовДокументов.НайтиЗначение(ВидДокумента, НомСтр, "ВидДокумента") = 0 Тогда
			ТабВидовДокументов.НоваяСтрока(1);
			ТабВидовДокументов.ВидДокумента	=	ВидДокумента;
			ТабВидовДокументов.СписокПравил	=	СоздатьОбъект("СписокЗначений");
		Иначе
			ТабВидовДокументов.ПолучитьСтрокуПоНомеру(НомСтр);
		КонецЕсли;
		ТабВидовДокументов.СписокПравил.ДобавитьЗначение(гТабКэшПравил.НомерСтроки, ИдПравила);
		        
		
		Если ПустоеЗначение(ПравилоПереадресации) = 0 Тогда
			НомПравилаПереадр	=	"";
			Если  КопияТабПравил.НайтиЗначение(ПравилоПереадресации, НомПравилаПереадр, "Ид") = 1 Тогда
				ТабВидовДокументов.СписокПравил.ДобавитьЗначение(НомПравилаПереадр, ПравилоПереадресации);
			КонецЕсли;
		КонецЕсли;                    
		
		
	КонецЦикла;
	
	Возврат(ТабВидовДокументов);
	
КонецФункции		//	ПодготовитьТаблицуДляПроведения()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция ЗаписатьПроведениеДокументаПоПравилу(Док, НомСтр)
    
	Перем	ТабРеквизитовПоиска;
	
	гТабКэшПравил.ПолучитьСтрокуПоНомеру( НомСтр );
	
	//Условия					=	гТабКэшПравил.Условия;
	//ВидУсловия				=	гТабКэшПравил.ВидУсловия;
	
	ИдПравила					=	гТабКэшПравил.Ид;
	ПараметрыЗагрузки			=	гТабКэшПравил.ПараметрыЗагрузки;
	//Правило					=	гТабКэшПравил.Правило;
	
	УзелСсылки					=	1;
	
	гТабКэшПравил.ТабРеквизитовПоиска.Выгрузить(ТабРеквизитовПоиска);
	
	
	Если		ОбъектУжеВыгружен(Док, ТабРеквизитовПоиска, ИдПравила, УзелСсылки, "Проведение") = 0 Тогда
		Возврат(0);		//	возможно документ выгружен по другому правилу
	ИначеЕсли	(ПустоеЗначение(УзелСсылки) = 1) Или (УзелСсылки = 1) Тогда
		Возврат(1); 	//	получить следующий документ из выборки
	КонецЕсли;
	
	
	ЗагрузитьПараметрыЗагрузки("", ПараметрыЗагрузки);
	
	//ЗамещатьНайденные			=	гТабКэшПараметровЗагрузки.ЗамещатьНайденные;
	СтатусПроведения			=	гТабКэшПараметровЗагрузки.СтатусПроведения;
	//ЗагружатьЗаписиЖР			=	гТабКэшПараметровЗагрузки.ЗагружатьЗаписиЖР;
	
		 
	ОбъектМД					=	Док.Получить("ВидОбъекта");
	XML_DOM						=	гXMLАнализатор.СоздатьДокумент();
	Приемник					=	XML_DOM.СоздатьУзел(1, "ПровестиДокумент");
	Приемник.ДобавитьПодчиненный(УзелСсылки);
	
    УстановитьАтрибут(Приемник, "Правило", ИдПравила);
	
	ЗаписатьОбъектВФайл(Приемник);
	
	Возврат(0);		//	существуют ситуации, когда один документ превращается в несколько по разным правилам...
		
КонецФункции		//	ЗаписатьПроведениеДокументаПоПравилу()


//--------------------------------------------------------------------------------------------------

Функция ПолучитьЗначениеКолонки(Таб, ИдКолонкиПоиска, ЗнПоиска, ИдКолонкиВозврата)

	НомСтр = "";
	Если Таб.НайтиЗначение(ЗнПоиска, НомСтр, ИдКолонкиПоиска) = 0 Тогда
		Возврат "";
	Иначе
		Возврат Таб.ПолучитьЗначение(НомСтр, ИдКолонкиВозврата);
	КонецЕсли;
	
КонецФункции

//--------------------------------------------------------------------------------------------------

Процедура ВыгрузитьДокумент(Источник, Приемник, ТабРеквизитов, ТабРеквизитовСтрок, ИдПравила, СпособЗагрузкиПоУмолчанию, ПараметрыПравила); 
	
	//-----------------		Реквизиты	----------------------
	ТаблицаШапкиДокумента=Источник.Получить("Шапка");
	ТаблицаШапкиДокумента.ПолучитьСтрокуПоНомеру(1);
	ТабРеквизитов.ВыбратьСтроки();
	Пока ТабРеквизитов.ПолучитьСтроку() = 1 Цикл
		Результат = ДобавитьРеквизит(ТабРеквизитов, Источник,ТаблицаШапкиДокумента, Приемник, "#Получить", СпособЗагрузкиПоУмолчанию, ПараметрыПравила);
		Если Результат = "#Прервать" Тогда Прервать КонецЕсли;
	КонецЦикла;
	
	//-----------------		Строки	----------------------
	
	Если ТабРеквизитовСтрок.КоличествоСтрок() > 0 Тогда
		    
	        ТаблицаДокумента=Источник.Получить("ТЧ");
			ТаблицаДокумента.ВыбратьСтроки();
			Пока ТаблицаДокумента.ПолучитьСтроку() = 1 Цикл
				Эл_Строка	=	Приемник.СоздатьПодчиненныйЭлемент("Строка");
				ТабРеквизитовСтрок.ВыбратьСтроки();
				Пока ТабРеквизитовСтрок.ПолучитьСтроку() = 1 Цикл
					Результат = ДобавитьРеквизит(ТабРеквизитовСтрок, Источник,ТаблицаДокумента, Эл_Строка, "#Получить", СпособЗагрузкиПоУмолчанию, ПараметрыПравила);
					Если (Результат = "#Прервать") Или (Результат = "#ПрерватьПереборСтрок") Тогда Прервать КонецЕсли;
				КонецЦикла;
				Если Результат = "#ПрерватьПереборСтрок" Тогда Прервать КонецЕсли;
			КонецЦикла;
		
	КонецЕсли;
	              
	ЗаписатьОбъектВФайл(Приемник); 
	
	ТабВидовДокументов	=	ПодготовитьТаблицуДляПроведения();
	
	СписокПравил	=	ПолучитьЗначениеКолонки(ТабВидовДокументов, "ВидДокумента", Источник.Получить("ВидОбъекта"), "СписокПравил");
	Если ПустоеЗначение(СписокПравил) = 0 Тогда 
		
		//СписокПравил.СортироватьПоПредставлению();
		
		Для СчПравил = 1 По СписокПравил.РазмерСписка() Цикл
			
			Если ЗаписатьПроведениеДокументаПоПравилу(Источник, СписокПравил.ПолучитьЗначение(СчПравил)) = 1 Тогда
				Прервать;	//	получить из выборки следующий документ
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры		//	ВыгрузитьДокумент()

//--------------------------------------------------------------------------------------------------

Функция ПолучитьИдОбъектаИсточника(Источник, ИдСинхронизирующегоРеквизита="")
    
	Если ПустоеЗначение(СокрЛП(Источник)) = 1 Тогда Возврат("") КонецЕсли;
	
	СтрИсточник		=	"";
	ТипИсточника	=	?(ТипЗначенияСтр(Источник)<>"СписокЗначений",ТипЗначенияСтр(Источник),Источник.Получить("ТипОбъекта"));

	Если		ТипИсточника	= "Число" 			Тогда	СтрИсточник	=	Строка(Источник);
	ИначеЕсли	ТипИсточника	= "Строка" 			Тогда	СтрИсточник	=	СокрП(Источник);
	ИначеЕсли 	ТипИсточника	= "Дата" 			Тогда	СтрИсточник	=	Формат(Источник, "ДДДММГГГГ");
	
	ИначеЕсли 	ТипИсточника	= "Перечисление"	Тогда	СтрИсточник	=	Источник.Идентификатор();
		
	ИначеЕсли 	ТипИсточника	= "ПланСчетов" 		Тогда	СтрИсточник	=	Источник.Идентификатор();
	ИначеЕсли 	ТипИсточника	= "ВидСубконто"		Тогда	СтрИсточник	=	Источник.Идентификатор();
	ИначеЕсли 	ТипИсточника	= "Календарь" 		Тогда	СтрИсточник	=	Источник.Вид();
	ИначеЕсли 	ТипИсточника	= "ВидРасчета" 		Тогда	СтрИсточник	=	Источник.Код;
		
	ИначеЕсли 	ТипИсточника	= "Счет" 			Тогда	СтрИсточник	=	Источник.Код;
		
	ИначеЕсли 	ТипИсточника	= "Справочник"		Тогда
		
		Если ПустоеЗначение(ИдСинхронизирующегоРеквизита) = 1 Тогда ИдСинхронизирующегоРеквизита = "Наименование"	КонецЕсли;
		СтрИсточник	=	СокрЛП(Источник.ПолучитьАтрибут(ИдСинхронизирующегоРеквизита));
		
	ИначеЕсли 	ТипИсточника	= "Документ"		Тогда

		//Если ПустоеЗначение(ИдСинхронизирующегоРеквизита) = 1 Тогда ИдСинхронизирующегоРеквизита = "НомерДок"		КонецЕсли;
		//СтрИсточник	=	СокрЛП(Источник.ПолучитьАтрибут(ИдСинхронизирующегоРеквизита));
		
		СтрИсточник	=		?(ТипЗначенияСтр(Источник)<>"СписокЗначений",СокрЛП(Источник),Источник.Получить("ТипОбъекта")+" "+Источник.Получить("ВидОбъекта"));
	
	Иначе
		
		ЗаписатьОшибку("Неизвестный тип объекта:   " + ТипИсточника);
		
	КонецЕсли;
	          
	Возврат(СтрИсточник);
	
КонецФункции		//	ПолучитьИдОбъектаИсточника()

//--------------------------------------------------------------------------------------------------
                                                                                           
Функция ПолучитьПараметрыПравила(СписокСтрокой, Знач Объект, Знач Реквизит="", СписокПараметровПравила="")

	СписокИсточник	=	ЗначениеИзСтроки(СписокСтрокой);
	Если ТипЗначенияСтр(СписокИсточник) <> "СписокЗначений" Тогда Возврат("") КонецЕсли;
	
	СписокПриемник	=	СоздатьОбъект("СписокЗначений");
    
	Для Сч = 1 По СписокИсточник.РазмерСписка() Цикл
		Атрибут		=	"";
		Значение	=	ВыполнитьПреобразование(СписокИсточник.ПолучитьЗначение(Сч, Атрибут), Объект, Реквизит);
		Если Значение = "#ПолучитьИзПараметров" Тогда
			Если ТипЗначенияСтр(СписокПараметровПравила) = "СписокЗначений" Тогда
				ЗначениеАтрибутаИзСписка = СписокПараметровПравила.Получить(Атрибут);
				Если ПустоеЗначение(ЗначениеАтрибутаИзСписка) = 0 Тогда
					СписокПриемник.ДобавитьЗначение(ЗначениеАтрибутаИзСписка, Атрибут);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ПустоеЗначение(Значение) = 0 Тогда
				СписокПриемник.ДобавитьЗначение(Значение, Атрибут);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат(СписокПриемник);
	
КонецФункции		//	ПолучитьПараметрыПравила() 

//--------------------------------------------------------------------------------------------------

Процедура УстановитьПараметрыПоУмолчанию()

	гТабКэшПараметровЗагрузки.НоваяСтрока();
	гТабКэшПараметровЗагрузки.Ид						=	"ПараметрыПоУмолчанию";
	гТабКэшПараметровЗагрузки.Дата						=	РабочаяДата();
	гТабКэшПараметровЗагрузки.ЗамещатьНайденные			=	1;
	гТабКэшПараметровЗагрузки.СпособЗагрузки			=	"ЗамещатьНеПустыми";
	гТабКэшПараметровЗагрузки.НовыеНеСоздавать			=	0;
	гТабКэшПараметровЗагрузки.СтатусУдаления			=	"Авто";
	гТабКэшПараметровЗагрузки.СтатусПроводок			=	"Авто";
	гТабКэшПараметровЗагрузки.СтатусПроведения			=	"Авто";
	гТабКэшПараметровЗагрузки.СтатусРасчетныхДокументов	=	"Авто";
	гТабКэшПараметровЗагрузки.ЗагружатьОперации			=	1;
	гТабКэшПараметровЗагрузки.ПравилоОпераций			=	"";
	гТабКэшПараметровЗагрузки.ЗагружатьЗаписиЖР			=	1;
	
КонецПроцедуры		//	УстановитьПараметрыПоУмолчанию()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция ДобавитьРеквизит(Таб, Источник, ТаблицаИсточника, Приемник="", Знач Зн="#Получить", Знач СпособЗагрузкиПоУмолчанию="", СписокДопПараметровПравила="")
	                                                       
	ИдПравилаРеквизитов		=	Таб.Ид;
	ВидУсловия				=	Таб.ВидУсловия;
	
	Если		ВидУсловия = 1 Тогда		//	условие задано по объекту
		Условия				=	Таб.Условия;
		Если УсловияВыполняются(Условия, Источник) = 0 Тогда Возврат("") КонецЕсли;
	ИначеЕсли	ВидУсловия = 2 Тогда			//	условие задано по значению реквизита
		Условия				=	Таб.Условия;
	КонецЕсли;
	
	
	ТипИсточника			=	?(ТипЗначенияСтр(Источник)<>"СписокЗначений",ТипЗначенияСтр(Источник),Источник.Получить("ТипОбъекта"));
	
	Источник_Ид				=	Таб.Источник_Ид;
	Источник_Тип			=	Таб.Источник_Тип;
	Источник_ТипАтрибута	=	Таб.Источник_ТипАтрибута;
	
	Приемник_Ид				=	Таб.Приемник_Ид;
	Приемник_ТипАтрибута	=	Таб.Приемник_ТипАтрибута;
	Приемник_Тип			=	Таб.Приемник_Тип;
	Приемник_Вид			=	Таб.Приемник_Вид;
	Приемник_Длина			=	Таб.Приемник_Длина;
	
	Преобразование			=	Таб.Преобразование;
	ПравилоВыгрузки			=	Таб.Правило;
	
	ЕстьПроцедура			=	Таб.ЕстьПроцедура;
	ПараметрыПравила		=	Таб.ПараметрыПравила;
	ПолучитьИзПараметров	=	Таб.ПолучитьИзПараметров;
	
	СпособЗагрузки			=	Таб.СпособЗагрузки;
	                         
	
	//-------------------------------------------
	
	
    Если		(ТипИсточника = "Справочник") Или (ТипИсточника = "Счет")	Тогда
		
		ЭтоГруппа		=	Источник.ЭтоГруппа();
		Если (Найти(Источник_ТипАтрибута, "Э") > 0) И (ЭтоГруппа = 1)	Тогда	Возврат("")	КонецЕсли;
		Если (Найти(Приемник_ТипАтрибута, "Э") > 0) И (ЭтоГруппа = 1)	Тогда	Возврат("")	КонецЕсли;
		
		
		Если	(	(Найти(Источник_ТипАтрибута, "Г") > 0)		Или
					(Найти(Приемник_ТипАтрибута, "Г") > 0)	)	И	(ЭтоГруппа = 0) Тогда
			//	Проверим: не указано ли уже в xml-объекте что это все-таки группа
			Если ПустоеЗначение(Приемник.ПолучитьАтрибут("ЭтоГруппа")) = 1 Тогда
				УзелДляПроверки	=	Приемник.ВыбратьУзел("Ссылка");
				Если ПустоеЗначение(УзелДляПроверки) = 0 Тогда
					Если ПустоеЗначение(УзелДляПроверки.ПолучитьАтрибут("ЭтоГруппа")) = 1 Тогда
						Возврат("");
					КонецЕсли;
				Иначе
					Возврат("");	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли	ТипИсточника = "Документ"		Тогда
		
		Если Источник_Ид = "ВремяДок" Тогда
			Зн	=	ТаблицаИсточника.ВремяДок;
		КонецЕсли;
		
	ИначеЕсли	ТипИсточника = "ЖурналРасчетов"	Тогда
		    
		ПервичнаяЗапись	=	Источник.ПервичнаяЗапись;	//	через две точки не работает!
		Если		Источник_Ид = "ДокументПервичнойЗаписи"		Тогда
			Если ПустоеЗначение(ПервичнаяЗапись) = 1 Тогда Возврат("") КонецЕсли;
			Зн	=	ПервичнаяЗапись.РодительскийДокумент;
			Если ПустоеЗначение(Зн) = 1 Тогда 	Возврат("") КонецЕсли;
		ИначеЕсли	Источник_Ид = "РегистрацияПервичнойЗаписи"	Тогда
			Если ПустоеЗначение(ПервичнаяЗапись) = 1 Тогда Возврат("") КонецЕсли;
			ПериодРегистрации	=	ПервичнаяЗапись.ПериодРегистрации;
			Зн					=	ПериодРегистрации.ДатаНачала;
		КонецЕсли;
		
	КонецЕсли;
    
	
	//-------------------------------------------
	           
	
	ПрерватьПослеОбработки	=	0;
	Если	ПустоеЗначение(ЕстьПроцедура) = 0 Тогда
		Зн	=	ДополнительныеПреобразования("ПравилоРеквизита", ИдПравилаРеквизитов, Источник, Приемник, СписокДопПараметровПравила);
		Если		Зн = 0 Тогда
			
			Возврат(0);
			
		ИначеЕсли	Зн = "#Прервать" Тогда
			
			Возврат("#Прервать");
			
		ИначеЕсли	Зн = "#ПрерватьПослеОбработки"	Тогда
			
			ЕстьПроцедура			=	0;
			ПрерватьПослеОбработки	=	1;
			
		ИначеЕсли	Зн = "#ПрерватьПереборСтрок"	Тогда
			
			Возврат("#ПрерватьПереборСтрок");
			
		КонецЕсли;
	КонецЕсли;
	                                             
	
	//-------------------------------------------
	
	
	ЗначениеИстории		=	"";
        
	Если	ПустоеЗначение(ЕстьПроцедура) = 1 Тогда
		
		Если		Источник_ТипАтрибута = "М"								Тогда
			Зн	=	ПолучитьЗначениеМетодом(Источник, Источник_Ид);
		ИначеЕсли	(Зн = "#Получить") И (ПустоеЗначение(Источник_Ид) = 0)	Тогда
			Если		(Найти("АО,РО", Источник_ТипАтрибута) > 0) И (ТипИсточника <> "Операция")	Тогда
				Зн		=	Источник.Операция.ПолучитьАтрибут(Источник_Ид);
			ИначеЕсли	Источник_ТипАтрибута = "ПК"	Тогда
				Врем	=	СоздатьОбъект("Периодический");
				Врем.ИспользоватьОбъект(Источник_Ид);
				Зн		=	Врем.ЗначениеНаДату( ?(ПустоеЗначение(КонИнтервала)=1, РабочаяДата(), КонИнтервала) );
			ИначеЕсли	Источник_ТипАтрибута = "К"	Тогда
				Зн		=	Константа.ПолучитьАтрибут(Источник_Ид);
			Иначе
				//Зн		=	Источник.ПолучитьАтрибут(Источник_Ид);
				
				//	Это помогает при отладке
				Попытка
					Если ТипЗначенияСтр(Источник)<>"СписокЗначений" тогда
						Зн		=	Источник.ПолучитьАтрибут(Источник_Ид);
					Иначе
						Если ТипЗначенияСтр(ТаблицаИсточника)="ТаблицаЗначений" тогда  // Передана шапка или ТЧ
						
						Зн		=   ТаблицаИсточника.ПолучитьЗначение(ТаблицаИсточника.НомерСтроки,Источник_Ид); 
						
					Иначе // Передан документ
						
						ТаблицаДокумента=Источник.Получить("Шапка");
						ТаблицаДокумента.ПолучитьСтрокуПоНомеру(1);
						Зн		=   ТаблицаДокумента.ПолучитьЗначение(ТаблицаДокумента.НомерСтроки,Источник_Ид);
						КонецЕсли;
					КонецЕсли;
				Исключение
					Сообщить("Неверное имя реквизита! Объект:  " + Источник + ";   Реквизит:  " + Источник_Ид + ";   Правило реквизита:  " + ИдПравилаРеквизитов);
				КонецПопытки;
			КонецЕсли;
		ИначеЕсли	ТипЗначенияСтр(Зн) = "Периодический" Тогда
			ЗначениеИстории	=	Зн;
			Зн				=	ЗначениеИстории.Значение;
			ДатаЗначения	=	ЗначениеИстории.ДатаЗнач;
		ИначеЕсли	ПустоеЗначение(ПолучитьИзПараметров) = 0	Тогда
			Если ТипЗначенияСтр(СписокДопПараметровПравила) = "СписокЗначений" Тогда
				Зн			=	СписокДопПараметровПравила.Получить(Приемник_Ид);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	
	
	Если ВидУсловия = 2 Тогда	//	т.е. условие задано по значению реквизита
		Если УсловияВыполняются(Условия, Зн) = 0 Тогда Возврат("") КонецЕсли;
	КонецЕсли;
	
	
	
	Если		ПустоеЗначение(Преобразование) = 0	Тогда
		Зн	=	ВыполнитьПреобразование(Преобразование, Источник, Зн, ПравилоВыгрузки, Приемник_Длина);
	КонецЕсли;
	
	
	Если	Зн = "#Получить" Тогда	// значит это виртуальный объект (которого нет в базе источнике)
		Зн				=	"";
	//ИначеЕсли	Найти("Строка,Дата,Число", Приемник_Тип) > 0 Тогда
		// Хорошо бы здесь в таком случае сразу ПолучитьИдОбъектаИсточника()
	ИначеЕсли	(СпособЗагрузки				=	"ЗамещатьНеПустыми")	Или 
				((СпособЗагрузкиПоУмолчанию	=	"ЗамещатьНеПустыми")	И	(ПустоеЗначение(СпособЗагрузки) = 1))	Тогда
		Если ПустоеЗначение(Зн) = 1 Тогда	Возврат("")	КонецЕсли;
	КонецЕсли;

	
	Если	ПустоеЗначение(ПараметрыПравила) = 0	Тогда
		ПараметрыПравила = ПолучитьПараметрыПравила(ПараметрыПравила, Источник, Зн, СписокДопПараметровПравила);
	КонецЕсли;
	
	
	
	УзелСсылки				=	1;		// означает что нам нужна ссылка
	Значение				=	Выгрузить(Зн, ПравилоВыгрузки, УзелСсылки, ПараметрыПравила, Приемник_Тип, Приемник_Вид);
	
	
	
	Если		Приемник_ТипАтрибута = "М"			Тогда
		
		Если		Приемник_Ид = "ЭтоГруппа()"			Тогда
			УстановитьАтрибут(Приемник, "ЭтоГруппа", Значение);
			Возврат("");
		ИначеЕсли	Приемник_Ид = "СистемноеПредставление()"	Тогда
			
		Иначе
			Возврат(Значение);
		КонецЕсли;
		
	КонецЕсли;
	
    
	
	Если ПустоеЗначение(Приемник_Ид)	= 1	Тогда	Возврат(Значение)	КонецЕсли;
	Если ПустоеЗначение(Приемник)		= 1	Тогда	Возврат(Значение)	КонецЕсли;
	
	
	
	//-------------- xml --------------
	
	Если ПустоеЗначение(ЗначениеИстории) = 1 Тогда
		Если (Приемник_ТипАтрибута = "К") Или (Приемник_ТипАтрибута = "ПК") Тогда
		    Реквизит	=	Приемник;
		Иначе
			Реквизит	=	Приемник.СоздатьПодчиненныйЭлемент("Реквизит");
		КонецЕсли;
		УстановитьАтрибут(Реквизит,	"Идентификатор",	Приемник_Ид);
		УстановитьАтрибут(Реквизит,	"Значение", 		Значение);
		Если СпособЗагрузки <> "Поиск" Тогда
			УстановитьАтрибут(Реквизит,	"СпособЗагрузки",	СпособЗагрузки);
		КонецЕсли;
	Иначе
		Если СпособЗагрузки <> "Поиск" Тогда
			УстановитьАтрибут(Приемник,	"СпособЗагрузки",	СпособЗагрузки);
		КонецЕсли;
		Реквизит	=	Приемник.СоздатьПодчиненныйЭлемент("История");
		УстановитьАтрибут(Реквизит,	"Дата",			Выгрузить(ДатаЗначения));
		УстановитьАтрибут(Реквизит,	"Значение",		Значение);
	КонецЕсли;
	
	
	Если 		Найти("АО,РО", Приемник_ТипАтрибута) = 0	Тогда
	ИначеЕсли	ТипИсточника <> "Операция"					Тогда
		УстановитьАтрибут(Реквизит,	"ЭтоРеквизитОперации", "1");
	КонецЕсли;
	
        
	Если УзелСсылки <> 1 Тогда	// значит узел ссылки создан
		Реквизит.ДобавитьПодчиненный(УзелСсылки);
	КонецЕсли;
	
	
	Если	(Приемник_Тип	=	"Неопределенный")	Или
			((ПустоеЗначение(Приемник_Вид) = 1)		И	(Найти("Справочник,Документ,Перечисление,Счет", Приемник_Тип) > 0)) Тогда
				
		Если  ПустоеЗначение(ПравилоВыгрузки) = 1 Тогда
			Т	=	ТипЗначенияСтр(Зн);
			Если (ПустоеЗначение(Зн) = 1) И (Т = "Строка") Тогда
				Приемник.УдалитьПодчиненный(Реквизит);
			Иначе
				УстановитьАтрибут(Реквизит,	"ТипЗначения", 	Т);
			КонецЕсли;
		ИначеЕсли ПустоеЗначение(НайтиПравило(Зн, , ПравилоВыгрузки)) = 0 Тогда
			УстановитьАтрибут(Реквизит,	"ТипЗначения", 	гТабКэшПравил.Приемник_Тип);
			УстановитьАтрибут(Реквизит,	"ВидЗначения", 	гТабКэшПравил.Приемник_Вид);
		КонецЕсли;
	КонецЕсли;
	
	
	Если ПрерватьПослеОбработки = 1 Тогда
		Возврат("#Прервать");
	Иначе
		Возврат("");
	КонецЕсли;
	
КонецФункции		//	ДобавитьРеквизит()

//--------------------------------------------------------------------------------------------------
                                                                                 
Процедура ВыгрузитьОбъектСправочника(Источник, Приемник, ТабРеквизитов, ИдПравила, СпособЗагрузкиПоУмолчанию, ПараметрыПравила)
	    
	ТипИсточника	=	ТипЗначенияСтр(Источник);
	                                                                  
	ТабРеквизитов.ВыбратьСтроки();
	Пока ТабРеквизитов.ПолучитьСтроку() = 1 Цикл
	    ФлНеВыгружатьИсторию		=	1;
		СпособВыгрузки				=	ТабРеквизитов.СпособВыгрузки;
		
		Если ТипИсточника = "Справочник" Тогда
			ЭтоГруппа				=	Источник.ЭтоГруппа();
			
			Источник_ТипАтрибута	=	ТабРеквизитов.Источник_ТипАтрибута;
			Приемник_ТипАтрибута 	=	ТабРеквизитов.Приемник_ТипАтрибута;
		      
			Если 	(Найти(Источник_ТипАтрибута, "Э") > 0) И (ЭтоГруппа = 1)	Тогда Продолжить КонецЕсли;
			Если	(Найти(Источник_ТипАтрибута, "Г") > 0) И (ЭтоГруппа = 0)	Тогда Продолжить КонецЕсли;
			
		КонецЕсли;
		
		Если ФлНеВыгружатьИсторию = 1 Тогда
			Результат = ДобавитьРеквизит(ТабРеквизитов, Источник,, Приемник, "#Получить", СпособЗагрузкиПоУмолчанию, ПараметрыПравила);
			Если Результат = "#Прервать" Тогда Прервать КонецЕсли;
		КонецЕсли;
	КонецЦикла;		//	по правилам реквизитов
	
	ЗаписатьОбъектВФайл(Приемник);
	
КонецПроцедуры		//	ВыгрузитьОбъектСправочника() 

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция ВыгрузитьПоПравилу(Знач Источник="", Правило="", ИдПравила="", УзелСсылки=1, ПараметрыПравила="", Знач ТипПриемника="", Знач ВидПриемника="", НеСинхронизироватьПоДопПараметрам=0)
	  
	Перем	ТабРеквизитов;
	Перем	ТабРеквизитовПоиска;
	Перем	ТабРеквизитовСтрок;
	
	Если НайтиПравило(Источник, Правило, ИдПравила, ТипПриемника, ВидПриемника) = 0	Тогда	Возврат("")	КонецЕсли;

	
	ТипИсточника			=	?(ТипЗначенияСтр(Источник)<>"СписокЗначений",ТипЗначенияСтр(Источник),Источник.Получить("ТипОбъекта"));
	Если (ТипПриемника = "") Или (ТипПриемника = "Неопределенный") Тогда
		ТипПриемника		=	гТабКэшПравил.Приемник_Тип;
	КонецЕсли;
	
	
	Преобразование			=	гТабКэшПравил.Преобразование;
	ПравилоПереадресации	=	гТабКэшПравил.ПравилоПереадресации;
	
	Если ПустоеЗначение(Преобразование)			= 0	Тогда	Источник =	ВыполнитьПреобразование(Преобразование, Источник)		КонецЕсли;
	Если ПустоеЗначение(ПравилоПереадресации)	= 0	Тогда	Возврат		Выгрузить(Источник, ПравилоПереадресации, УзелСсылки)	КонецЕсли;
	
	
	Если 		ТипПриемника	=	"Справочник"	Тогда	Тег	=	"ОбъектСправочника";
	ИначеЕсли 	ТипПриемника	=	"Документ"		Тогда	Тег	=	"Документ";
	ИначеЕсли 	ПустоеЗначение(ТипПриемника) = 1	Тогда	//	???
		//Тег			=	ТипИсточника;
		Тег				=	"ОбъектСправочника";
		ТипПриемника	=	ТипИсточника;
	Иначе
	    //-------	Найдем идентифицирующее значение объекта ----------------
		
		ИдСинхронизирующегоРеквизита	=	гТабКэшПравил.ИдСинхронизирующегоРеквизита;
		ИдОбъектаИсточника				=	ПолучитьИдОбъектаИсточника(Источник, ИдСинхронизирующегоРеквизита);	// на пустое не проверяем специально
		//УзелЗначения					=	Правило.ВыбратьУзел("Значение[@Источник=""" + ИдОбъектаИсточника + """]");
		//Если ПустоеЗначение(УзелЗначения) = 0 Тогда Возврат(УзелЗначения.ПолучитьАтрибут("Приемник")) КонецЕсли;

		ВыборкаУзловЗначений			=	Правило.ВыбратьУзлы("Значение[@Источник=""" + ИдОбъектаИсточника + """]");
		КолвоУзлов						=	ВыборкаУзловЗначений.КоличествоУзлов();
		УзелНайден						=	0;
		Если		КолвоУзлов = 1 Тогда
			УзелНайден		=	1;
			УзелЗначения	=	ВыборкаУзловЗначений.ПолучитьУзел(0);
			//Возврат ВыборкаУзловЗначений.ПолучитьУзел(0).ПолучитьАтрибут("Приемник");
		ИначеЕсли	КолвоУзлов > 1 Тогда	//	в таком случае считаем что условия заданы обязательно
			Для Сч = 0 По КолвоУзлов - 1 Цикл
				УзелЗначения	=	ВыборкаУзловЗначений.ПолучитьУзел(Сч);
				Если УсловияВыполняются(УзелЗначения.ВыбратьУзел("Условия"), Источник) = 1 Тогда
					УзелНайден	=	1;
					Прервать;
					//Возврат УзелЗначения.ПолучитьАтрибут("Приемник");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если УзелНайден = 1 Тогда
			Если ПустоеЗначение(УзелЗначения.ПолучитьАтрибут("ЕстьПроцедура")) = 1 Тогда
				Возврат УзелЗначения.ПолучитьАтрибут("Приемник");
			Иначе
				ИдПравилаЗначения	=	УзелЗначения.ПолучитьАтрибут("Ид");
				Зн					=	ДополнительныеПреобразования("ПравилоЗначения", ИдПравилаЗначения, Источник, УзелЗначения.ПолучитьАтрибут("Приемник"));	// на всякий случай передадим туда значение приемника
				Возврат(Зн);
			КонецЕсли;
		КонецЕсли;
		   
		//	В значениях не нашли, тогда попробуем правила реквизитов посмотреть
		
		гТабКэшПравил.ТабРеквизитов.Выгрузить(ТабРеквизитов);
		
        ТабРеквизитов.ВыбратьСтроки();
        Пока ТабРеквизитов.ПолучитьСтроку() = 1 Цикл
			Результат	=	ДобавитьРеквизит(ТабРеквизитов, Источник,, , , , ПараметрыПравила);		//	обработка методов со стороны приемника
			Если ПустоеЗначение(Результат) = 0 Тогда	Возврат(Результат)	КонецЕсли;
        КонецЦикла;
		                                         
		Если		ПустоеЗначение(Преобразование) = 0		Тогда
			Возврат(Источник);
		ИначеЕсли	ПустоеЗначение(ИдОбъектаИсточника) = 0	Тогда
			ЗаписатьОшибку("Не найдено соответствие для значения источника:  " + ТипИсточника + "." + гТабКэшПравил.Источник_Вид + "." + ИдОбъектаИсточника,  "!");
		КонецЕсли;
		
		Возврат("");
	КонецЕсли;
    
	
	// если объект не виртуальный и источник пустой
	Если	(ПустоеЗначение(гТабКэшПравил.Источник_Тип) = 0)	И
			(ПустоеЗначение(СокрЛП(Источник)) = 1)				И
			(ПустоеЗначение(ПараметрыПравила) = 1)				Тогда	Возврат("") КонецЕсли;
	
	                                                         
	гТабКэшПравил.ТабРеквизитов.Выгрузить(ТабРеквизитов);
	гТабКэшПравил.ТабРеквизитовПоиска.Выгрузить(ТабРеквизитовПоиска);
	гТабКэшПравил.ТабРеквизитовСтрок.Выгрузить(ТабРеквизитовСтрок);
	
	ПараметрыЗагрузки			=	гТабКэшПравил.ПараметрыЗагрузки;
	
	ЗагрузитьПараметрыЗагрузки("", ПараметрыЗагрузки);
	СтатусУдаления				=	гТабКэшПараметровЗагрузки.СтатусУдаления;
	СпособЗагрузкиПоУмолчанию	=	гТабКэшПараметровЗагрузки.СпособЗагрузки;
	НовыеНеСоздавать			=	гТабКэшПараметровЗагрузки.НовыеНеСоздавать;
	СтатусПроведения			=	гТабКэшПараметровЗагрузки.СтатусПроведения;
	
	
	Если ОбъектУжеВыгружен(Источник, ТабРеквизитовПоиска, ИдПравила, УзелСсылки, , ПараметрыПравила, НовыеНеСоздавать, НеСинхронизироватьПоДопПараметрам) = 1 Тогда Возврат("") КонецЕсли;
	
	
	Если ПустоеЗначение(Источник) = 0 Тогда
	    Если		ТипИсточника = "Справочник"	Тогда
			Источник.ИспользоватьДату(НачИнтервала, 1);
		ИначеЕсли	ТипИсточника = "Счет"		Тогда
			Источник.ИспользоватьДату(НачИнтервала);
		КонецЕсли;
	КонецЕсли;
	
	
	XML_DOM					=	гXMLАнализатор.СоздатьДокумент();
	Приемник				=	XML_DOM.СоздатьУзел(1, Тег);
	        
	Если (ПустоеЗначение(УзелСсылки) = 0) И (УзелСсылки <> 1) Тогда
		Приемник.ДобавитьПодчиненный(УзелСсылки);
		УзелСсылки	=	Приемник.ВыбратьУзел("Ссылка");
	КонецЕсли;
	
	
	УстановитьАтрибут(Приемник,	"Правило", ИдПравила);
	Если	(Найти("Справочник,Документ", ТипПриемника) > 0) И
			(Найти("Справочник,Документ", ТипИсточника) > 0) Тогда
		УстановитьАтрибут(Приемник,	"ПометитьНаУдаление",	0);
	КонецЕсли;
	
	
	Если 		(ТипПриемника	= "Справочник") И ((ТипИсточника="Справочник") ИЛИ (ТипИсточника="Счет"))		Тогда
		
		Если Источник.ЭтоГруппа()=0 тогда
			
			Если		ТипИсточника = "Справочник"	Тогда
				УстановитьАтрибут(Приемник,	"ЭтоГруппа", Источник.ЭтоГруппа());
			ИначеЕсли	ТипИсточника = "Счет"		Тогда
				УстановитьАтрибут(Приемник,	"ЭтоГруппа", Источник.ЭтоГруппа());
			КонецЕсли;
			ВыгрузитьОбъектСправочника(Источник, Приемник, ТабРеквизитов, ИдПравила, СпособЗагрузкиПоУмолчанию, ПараметрыПравила);
		
		КонецЕсли;
		
	ИначеЕсли 	ТипПриемника	= "Документ"		Тогда
		
		Если ТипИсточника = "Документ"	Тогда
			УстановитьАтрибут(Приемник,	"ОтменитьПроведение",	0);
		КонецЕсли;
		ВыгрузитьДокумент(Источник, Приемник, ТабРеквизитов, ТабРеквизитовСтрок, ИдПравила, СпособЗагрузкиПоУмолчанию, ПараметрыПравила);
		
	КонецЕсли;
    
	
	Возврат("");
	
КонецФункции		//	ВыгрузитьПоПравилу()

//--------------------------------------------------------------------------------------------------

Функция Выгрузить(Источник, ИдПравила="", УзелСсылки=0, ПараметрыПравила="", Знач ТипПриемника="", Знач ВидПриемника="")
	
	Если ПустоеЗначение(ИдПравила) = 0 Тогда
		Возврат	ВыгрузитьПоПравилу(Источник, , ИдПравила, УзелСсылки, ПараметрыПравила, ТипПриемника, ВидПриемника);
	КонецЕсли;
	
	
	Если (ПустоеЗначение(СокрЛП(Источник)) = 1) И (ТипПриемника <> "Неопределенный") Тогда
		Возврат("");
	КонецЕсли;
	
	
	ТипИсточника	=	?(ТипЗначенияСтр(Источник)<>"СписокЗначений",ТипЗначенияСтр(Источник),Источник.Получить("ТипОбъекта"));;
	
	Если		ПустоеЗначение(ТипПриемника) = 0	Тогда
		
		Если		Найти("Справочник,Документ,Неопределенный", ТипПриемника) = 0 Тогда
			Возврат	ПолучитьИдОбъектаИсточника(Источник);
		ИначеЕсли	(ТипПриемника = "Неопределенный") И (Найти("Справочник,Документ,Перечисление,Счет", ТипИсточника) = 0) Тогда
			Возврат	ПолучитьИдОбъектаИсточника(Источник);
		Иначе
			Возврат ВыгрузитьПоПравилу(Источник, , ИдПравила, УзелСсылки, ПараметрыПравила, ТипПриемника, ВидПриемника);
		КонецЕсли;
		
	ИначеЕсли	Найти("Справочник,Документ", ТипИсточника) = 0 Тогда
		
		Возврат	ПолучитьИдОбъектаИсточника(Источник);
		
	Иначе
		
		Возврат ВыгрузитьПоПравилу(Источник, , ИдПравила, УзелСсылки, ПараметрыПравила, ТипПриемника, ВидПриемника);
		
	КонецЕсли;
	
КонецФункции		//	Выгрузить()

//******************************************************************************
//	ПрисвоитьНовуюСсылку()
//
//	Описание:

Функция ПрисвоитьНовуюСсылку(Источник="Источник не задан", Ссылка)
	
	Если ПустоеЗначение(Источник) = 1 Тогда
		Ссылка = "";
		Возврат 0;
	КонецЕсли;
	
	СписокВыгруженныхОбъектов = СписокВыгруженныхСписков.Получить(Ссылка);
	
	Если ТипЗначенияСтр(СписокВыгруженныхОбъектов) <> "СписокЗначений" Тогда
		СписокВыгруженныхОбъектов = СоздатьОбъект("СписокЗначений");
		СписокВыгруженныхСписков.Установить(Ссылка, СписокВыгруженныхОбъектов);
	КонецЕсли;
	
	Позиция = СписокВыгруженныхОбъектов.НайтиЗначение(Источник);
	
	Если Позиция = 0 Тогда
		СписокВыгруженныхОбъектов.ДобавитьЗначение(Источник);
		Ссылка = Ссылка+"_"+СписокВыгруженныхОбъектов.РазмерСписка();
		Возврат 1;
	Иначе
		Ссылка = Ссылка+"_"+Позиция;
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПрисвоитьНовуюСсылку()

//******************************************************************************
//	ДобавитьПоле()
//
//	Описание:

Процедура ДобавитьПоле(СписокСтрок, Значение, ТипСтроки="", ДатаНомер=0)
	
	Если ТипЗначенияСтр(СписокСтрок) <> "СписокЗначений" Тогда
		СписокСтрок = СоздатьОбъект("СписокЗначений");
	КонецЕсли;
	
	Если ТипЗначенияСтр(ДатаНомер) = "Дата" Тогда
		ДатаЗначения = Формат(ДатаНомер, "ДДДММГГГГ");
		СтрДатаНомер = Формат(ДатаГод  (ДатаНомер), "Ч(0)4.0")+
		Формат(ДатаМесяц(ДатаНомер), "Ч(0)2.0")+
		Формат(ДатаЧисло(ДатаНомер), "Ч(0)2.0");
	Иначе
		ДатаЗначения = "";
		СтрДатаНомер = Формат(ДатаНомер, "Ч(0)4.0");
	КонецЕсли;
	
	СписокПолей = СписокСтрок.Получить(СтрДатаНомер);
	
	Если ТипЗначенияСтр(СписокПолей) <> "СписокЗначений" Тогда
		СписокПолей = СоздатьОбъект("СписокЗначений");
		СписокСтрок.Установить(СтрДатаНомер, СписокПолей);
		
		Если ПустаяСтрока(ТипСтроки) = 0 Тогда
			СписокПолей.ДобавитьЗначение("");
			СписокПолей.ДобавитьЗначение(ТипСтроки);
			СписокПолей.ДобавитьЗначение(ДатаЗначения);
		КонецЕсли;
	КонецЕсли;
	
	СписокПолей.ДобавитьЗначение(Значение);
	
КонецПроцедуры // ДобавитьПоле()

//******************************************************************************
//	ВыгрузитьСписокСтрок()
//
//	Описание:

Процедура ВыгрузитьСписокСтрок(СписокСтрок)
	
	СписокСтрок.СортироватьПоПредставлению();
	
	Для Номер = 1 По СписокСтрок.РазмерСписка() Цикл
		СписокПолей = СписокСтрок.ПолучитьЗначение(Номер);
		
		Стр = СписокПолей.ВСтрокуСРазделителями();
		Стр = СтрЗаменить(Стр, РазделительСтрок, СтрРазделительСтрок);
		
		ТекстВыгрузки.ДобавитьСтроку(Стр);
	КонецЦикла;
	
КонецПроцедуры // ВыгрузитьСписокСтрок()

//******************************************************************************
//	Справочник_Неопределенный
//
//	Параметры:
//	Источник (Строка) - идентификатор выгружаемого справочника
//	Объект (Справочник "ФП_Справочники") - значение выгружаемого справочника
//
//	Возвращаемое значение:
//	(строка) - ссылка на данный элемент.
//
//	Описание:
//	Функция формирует ссылку на элемент справочника, загруженного из конфигурации 
//  "Финансовое плинирование" и вносит в файл выгрузки данный элемент в виде кода и 
//  наименования.

Функция Справочник_Неопределенный(Источник, Объект)
	
	Перем СписокСтрок;
	
	Если ПустоеЗначение(Объект) = 1 Тогда
		Возврат "";
	КонецЕсли;
	
	Ссылка = "СПР";
	Если ПрисвоитьНовуюСсылку(Источник + "_" + Объект.Код, Ссылка) = 0 Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	ДобавитьПоле(СписокСтрок, Ссылка);
	ДобавитьПоле(СписокСтрок, "Элемент." + Источник);
	ДобавитьПоле(СписокСтрок, "");
	
	ДобавитьПоле(СписокСтрок, "?Код"         + "(Строка)" + Объект.Код);
	ДобавитьПоле(СписокСтрок, "Наименование" + "(Строка)" + Объект.Наименование);
	
	ВыгрузитьСписокСтрок(СписокСтрок);
	
	Возврат Ссылка;
	
КонецФункции // Справочник_Неопределенный()

//******************************************************************************
//	Документ_Остатки()
//
//	Параметры:
//	Источник (Таблица значений) - таблица сформированных итогов, для формирования 
//      табличной части документа.
//	Валюта (Справочник "ФП_ОтборДанных") - вид валюты по которой формируется выгружаемый
//      документ.
//
//	Описание:
//	Процедура формирует документ с движением остаточных итоговых данных в файл 
//  для загрузки в конфигурацию "Финансовое плинирование".

Процедура Документ_Остатки(Источник,Валюта)
	
	Перем СписокСтрок; 
    
	// XML
	
	Ссылка = "ОСТАТКИ"; 
	
	ВалютаДок=ПолучитьВалютуФинПланирования(Валюта);
	
	Если ВыгрузитьТекст=1 тогда
		
		// Текстовые поля
		
		ДобавитьПоле(СписокСтрок, Ссылка);
		ДобавитьПоле(СписокСтрок, "Документ.ПланПоказатели");
		ДобавитьПоле(СписокСтрок, "Проведен");
		
		НомерСтроки = 1;
		
		ДобавитьПоле(СписокСтрок, "?Комментарий"    + "(Строка)" 
													+ СокрЛП("Выгрузка из конфигурации "+МД.Представление()) 
													+ ?(ПустоеЗначение(ОбъектВыгрузки) = 0,РС + СокрП(ОбъектВыгрузки.Код) + " " + СокрП(ОбъектВыгрузки.Наименование),"")
													+ ?(СтрДлина(Комментарий)>0,РС+Комментарий,""));
		ДобавитьПоле(СписокСтрок, "ДатаДок"         + "(Дата)"   + Формат(НачИнтервала, "ДДДММГГГГ"));
		ДобавитьПоле(СписокСтрок, "?ВариантБюджета" + "(#)"      + Справочник_Неопределенный("ВариантыБюджетов", ВариантБюджета));
		ДобавитьПоле(СписокСтрок, "?ДатаПлан"       + "(Дата)"   + Формат(НачИнтервала, "ДДДММГГГГ"));
		ДобавитьПоле(СписокСтрок, "?ВалютаДок"      + "(#)"    	 + Справочник_Неопределенный("Валюты", ВалютаДок));
		
	КонецЕсли; 
	
	Если ВыгрузитьXML=1 тогда
		
		Эл_Правило	=	"";
		ИдПравила	=	"";
		ПодобратьПравилоПоТипамИЗначению( , Эл_Правило, ИдПравила, "Документ", "ПланПоказатели");
		
		ОбразДокумента=СоздатьОбъект("СписокЗначений");
		
		ТабШапки=СоздатьОбъект("ТаблицаЗначений");
		ТабШапки.НоваяКолонка("Комментарий");
		ТабШапки.НоваяКолонка("ДатаДок");
		ТабШапки.НоваяКолонка("ВремяДок");
		ТабШапки.НоваяКолонка("ВариантБюджета");
		ТабШапки.НоваяКолонка("ДатаПлан");
		ТабШапки.НоваяКолонка("ВалютаДок");
		
		ТабШапки.НоваяСтрока();
		ТабШапки.Комментарий = СокрЛП("Выгрузка из конфигурации "+МД.Представление()) + ?(ПустоеЗначение(ОбъектВыгрузки) = 0,РС + СокрП(ОбъектВыгрузки.Код) + " " + СокрП(ОбъектВыгрузки.Наименование),"")+?(СтрДлина(Комментарий)>0,РС+Комментарий,"");
		ТабШапки.ДатаДок=НачИнтервала;
		ТабШапки.ВремяДок       = Строка(ТекущееВремя());
		ТабШапки.ВариантБюджета=ВариантБюджета;
		ТабШапки.ДатаПлан=НачИнтервала;
		ТабШапки.ВалютаДок=ВалютаДок; 
		
		ОбразДокумента.Установить("ТипОбъекта","Документ");
		ОбразДокумента.Установить("ВидОбъекта","ПланПоказатели");
		ОбразДокумента.Установить("Шапка",ТабШапки);
		ОбразДокумента.Установить("Идентификатор","ПланПоказатели"+СокрЛП(ВариантБюджета)+СокрЛП(НачИнтервала)+СокрЛП(ВалютаДок)+СокрП(ОбъектВыгрузки.Код)+СокрП(ОбъектВыгрузки.Наименование));
		
		ТабСтрок=СоздатьОбъект("ТаблицаЗначений");
		ТабСтрок.НоваяКолонка("НомерСтроки");
		ТабСтрок.НоваяКолонка("Показатель");
		ТабСтрок.НоваяКолонка("СуммаДок");
		ТабСтрок.НоваяКолонка("Примечание");
		
	КонецЕсли;
	
	НомерСтроки = 1;
	НомерСтрокиДокумента=1;
	
	Источник.ВыбратьСтроки();
	Пока Источник.ПолучитьСтроку() = 1 Цикл
		
		Если Источник.ТипИтогов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Источник.Валюта <> Валюта Тогда
			Продолжить;
		КонецЕсли;
		
		Если Источник.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыгрузитьТекст=1 тогда
			
			ДобавитьПоле(СписокСтрок, "Показатель" + "(#)"      + Справочник_Неопределенный("Показатели", Источник.Показатель), "Строка", НомерСтроки);
			ДобавитьПоле(СписокСтрок, "СуммаДок"   + "(Число)"  + СокрЛП(Формат(Источник.Сумма, "Ч15.2")), "Строка", НомерСтроки);
			ДобавитьПоле(СписокСтрок, "Примечание" + "(Строка)" + СокрЛП(Источник.Примечание), "Строка", НомерСтроки);
			
		КонецЕсли;
		
		Если ВыгрузитьXML=1 тогда
			
			ТабСтрок.НоваяСтрока();
			ТабСтрок.НомерСтроки=НомерСтрокиДокумента;
			ТабСтрок.Показатель	=Источник.Показатель;
			ТабСтрок.СуммаДок	=Источник.Сумма;
			ТабСтрок.Примечание	=Источник.Примечание; 
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки+1;
		НомерСтрокиДокумента=НомерСтрокиДокумента+1;
	КонецЦикла;
	
	Если ВыгрузитьТекст=1 тогда
		ВыгрузитьСписокСтрок(СписокСтрок);
	КонецЕсли;
	
	Если ВыгрузитьXML=1 тогда
		ОбразДокумента.Установить("ТЧ",ТабСтрок);
		ВыгрузитьПоПравилу(ОбразДокумента, Эл_Правило, ИдПравила);
	КонецЕсли;
	
КонецПроцедуры // Документ_Остатки()

//******************************************************************************
//	Документ_Обороты()
//
//	Параметры:
//	Источник (Таблица значений) - таблица сформированных итогов, для формирования 
//      табличной части документа.
//	Валюта (Справочник "ФП_ОтборДанных") - вид валюты по которой формируется выгружаемый
//      документ.
//
//	Описание:
//	Процедура формирует документ с движением обортных итоговых данных в файл 
//  для загрузки в конфигурацию "Финансовое плинирование".

Процедура Документ_Обороты(Источник,Валюта)
	
	Перем СписокСтрок;
	
	Ссылка = "ОБОРОТЫ";
	
	ДатаДок=НачИнтервала;
	ВалютаДок=ПолучитьВалютуФинПланирования(Валюта);
	
	
	Если ВыгрузитьТекст=1 тогда
		// Текстовые поля
		
		ДобавитьПоле(СписокСтрок, Ссылка);
		ДобавитьПоле(СписокСтрок, "Документ.ПланПериод");
		ДобавитьПоле(СписокСтрок, "Проведен");
		
		ДобавитьПоле(СписокСтрок, "?Комментарий"    + "(Строка)" 
													+ СокрЛП("Выгрузка из конфигурации "+МД.Представление()) 
													+ ?(ПустоеЗначение(ОбъектВыгрузки) = 0,РС + СокрП(ОбъектВыгрузки.Код) + " " + СокрП(ОбъектВыгрузки.Наименование),"")
													+ ?(СтрДлина(Комментарий)>0,РС+Комментарий,""));
		ДобавитьПоле(СписокСтрок, "?ДатаДок"        + "(Дата)"   + Формат(ДатаДок, "ДДДММГГГГ"));
		ДобавитьПоле(СписокСтрок, "?ВариантБюджета" + "(#)"      + Справочник_Неопределенный("ВариантыБюджетов", ВариантБюджета));
		ДобавитьПоле(СписокСтрок, "?ДатаПлан"       + "(Дата)"   + Формат(ДатаДок, "ДДДММГГГГ"));
		ДобавитьПоле(СписокСтрок, "?ВалютаДок"      + "(#)"      + Справочник_Неопределенный("Валюты", ВалютаДок));
		
	КонецЕсли;
	
	Если ВыгрузитьXML=1 тогда
		
		//  Таблицы 
			
		Эл_Правило	=	"";
		ИдПравила	=	"";
		ПодобратьПравилоПоТипамИЗначению( , Эл_Правило, ИдПравила, "Документ", "ПланПериод");
		
		ОбразДокумента=СоздатьОбъект("СписокЗначений");
		
		ТабШапки=СоздатьОбъект("ТаблицаЗначений");
		ТабШапки.НоваяКолонка("Комментарий");
		ТабШапки.НоваяКолонка("ДатаДок");
		ТабШапки.НоваяКолонка("ВремяДок");
		ТабШапки.НоваяКолонка("ВариантБюджета");
		ТабШапки.НоваяКолонка("ДатаПлан");
		ТабШапки.НоваяКолонка("ВалютаДок");
		
		ТабШапки.НоваяСтрока();
		ТабШапки.Комментарий	= СокрЛП("Выгрузка из конфигурации "+МД.Представление()) + ?(ПустоеЗначение(ОбъектВыгрузки) = 0,РС + СокрП(ОбъектВыгрузки.Код) + " " + СокрП(ОбъектВыгрузки.Наименование),"")+?(СтрДлина(Комментарий)>0,РС+Комментарий,"");
		ТабШапки.ДатаДок		= ДатаДок;
		ТабШапки.ВремяДок       = Строка(ТекущееВремя());
		ТабШапки.ВариантБюджета = ВариантБюджета;
		ТабШапки.ДатаПлан		= ДатаДок;
		ТабШапки.ВалютаДок		= ВалютаДок;
		
		ОбразДокумента.Установить("ТипОбъекта","Документ");
		ОбразДокумента.Установить("ВидОбъекта","ПланПериод");
		ОбразДокумента.Установить("Шапка",ТабШапки);
		ОбразДокумента.Установить("Идентификатор","ПланПериод"+СокрЛП(ВариантБюджета)+СокрЛП(ДатаДок)+СокрЛП(ВалютаДок)+СокрП(ОбъектВыгрузки.Код)+СокрП(ОбъектВыгрузки.Наименование));
		
		ТабСтрок=СоздатьОбъект("ТаблицаЗначений");
		ТабСтрок.НоваяКолонка("НомерСтроки");
		ТабСтрок.НоваяКолонка("Статья");
		ТабСтрок.НоваяКолонка("ПоказательДебет"); 
		ТабСтрок.НоваяКолонка("ПоказательКредит");
		ТабСтрок.НоваяКолонка("Подразделение");
		ТабСтрок.НоваяКолонка("Проект");
		ТабСтрок.НоваяКолонка("СуммаДок");
		ТабСтрок.НоваяКолонка("Примечание");
		
	КонецЕсли;

	НомерСтроки = 1;
	НомерСтрокиДокумента=1;
	Источник.ВыбратьСтроки();
	Пока Источник.ПолучитьСтроку() = 1 Цикл
		
		Если Источник.Валюта <> Валюта Тогда
			Продолжить;
		КонецЕсли;
		
		Если Источник.ТипИтогов = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Источник.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Источник.ДатаСуммы<>ДатаДок тогда 
			
			ДатаДок=Источник.ДатаСуммы;
			
			Если ВыгрузитьТекст=1 тогда
				// Текстовый файл
				
				ДобавитьПоле(СписокСтрок, Ссылка,,НомерСтроки);
				ДобавитьПоле(СписокСтрок, "Документ.ПланПериод",,НомерСтроки);
				ДобавитьПоле(СписокСтрок, "Проведен",,НомерСтроки);
				
				ДобавитьПоле(СписокСтрок, "?Комментарий"    + "(Строка)" 
															+ СокрЛП("Выгрузка из конфигурации "+МД.Представление()) 
															+ ?(ПустоеЗначение(ОбъектВыгрузки) = 0,РС + СокрП(ОбъектВыгрузки.Код) + " " + СокрП(ОбъектВыгрузки.Наименование),"")
															+ ?(СтрДлина(Комментарий)>0,РС+Комментарий,""));
				ДобавитьПоле(СписокСтрок, "?ДатаДок"        + "(Дата)"   + Формат(ДатаДок, "ДДДММГГГГ"),,НомерСтроки);
				ДобавитьПоле(СписокСтрок, "?ВариантБюджета" + "(#)"      + Справочник_Неопределенный("ВариантыБюджетов", ВариантБюджета),,НомерСтроки);
				ДобавитьПоле(СписокСтрок, "?ДатаПлан"       + "(Дата)"   + Формат(ДатаДок, "ДДДММГГГГ"),,НомерСтроки);
				ДобавитьПоле(СписокСтрок, "?ВалютаДок"      + "(#)"      + Справочник_Неопределенный("Валюты", ВалютаДок),,НомерСтроки);	
				НомерСтроки=НомерСтроки+1;
				
			КонецЕсли;
					
			Если ВыгрузитьXML=1 тогда
				
				ОбразДокумента.Установить("ТЧ",ТабСтрок);
				
				ВыгрузитьПоПравилу(ОбразДокумента, Эл_Правило, ИдПравила);
				
				ТабШапки.УдалитьСтроки();
				ТабСтрок.УдалитьСтроки(); 
				ОбразДокумента.УдалитьВсе();
				
				ТабШапки.НоваяСтрока();
				ТабШапки.Комментарий=  СокрЛП("Выгрузка из конфигурации "+МД.Представление()) + ?(ПустоеЗначение(ОбъектВыгрузки) = 0,РС + СокрП(ОбъектВыгрузки.Код) + " " + СокрП(ОбъектВыгрузки.Наименование),"")+?(СтрДлина(Комментарий)>0,РС+Комментарий,"");
				ТабШапки.ДатаДок=ДатаДок;
				ТабШапки.ВремяДок=Строка(ТекущееВремя());
				ТабШапки.ВариантБюджета=ВариантБюджета;
				ТабШапки.ДатаПлан=ДатаДок;
				ТабШапки.ВалютаДок=ВалютаДок;
				
				ОбразДокумента.Установить("ТипОбъекта","Документ");
				ОбразДокумента.Установить("ВидОбъекта","ПланПериод");
				ОбразДокумента.Установить("Идентификатор","ПланПериод"+СокрЛП(ВариантБюджета)+СокрЛП(ДатаДок)+СокрЛП(ВалютаДок)+СокрП(ОбъектВыгрузки.Код)+СокрП(ОбъектВыгрузки.Наименование));
				ОбразДокумента.Установить("Шапка",ТабШапки);
				
				НомерСтроки=НомерСтроки+1;
				НомерСтрокиДокумента=1;
				
			КонецЕсли;

		КонецЕсли;	
		
		Если ВыгрузитьТекст=1 тогда
			
			ДобавитьПоле(СписокСтрок, "Статья"           + "(#)"      + Справочник_Неопределенный("Статьи", Источник.Статья), "Строка", НомерСтроки);
			ДобавитьПоле(СписокСтрок, "ПоказательДебет"  + "(#)"      + Справочник_Неопределенный("Показатели", Источник.ПоказательДебет), "Строка", НомерСтроки);
			ДобавитьПоле(СписокСтрок, "ПоказательКредит" + "(#)"      + Справочник_Неопределенный("Показатели", Источник.ПоказательКредит), "Строка", НомерСтроки);
			ДобавитьПоле(СписокСтрок, "Подразделение"    + "(#)"      + Справочник_Неопределенный("Подразделения", Источник.Подразделение), "Строка", НомерСтроки);
			ДобавитьПоле(СписокСтрок, "Проект"           + "(#)"      + Справочник_Неопределенный("Проекты", Источник.Проект), "Строка", НомерСтроки);
			ДобавитьПоле(СписокСтрок, "СуммаДок"         + "(Число)"  + СокрЛП(Формат(Источник.Сумма, "Ч15.2")), "Строка", НомерСтроки);
			ДобавитьПоле(СписокСтрок, "Примечание"       + "(Строка)" + СокрЛП(Источник.Примечание), "Строка", НомерСтроки);
			
		КонецЕсли;
		
		Если ВыгрузитьXML=1 тогда
			
			ТабСтрок.НоваяСтрока(); 
			ТабСтрок.НомерСтроки=НомерСтрокиДокумента;
			ТабСтрок.Статья=Источник.Статья;
			ТабСтрок.ПоказательДебет=Источник.ПоказательДебет; 
			ТабСтрок.ПоказательКредит=Источник.ПоказательКредит;
			ТабСтрок.Подразделение=Источник.Подразделение;
			ТабСтрок.Проект=Источник.Проект;
			ТабСтрок.СуммаДок=Источник.Сумма;
			ТабСтрок.Примечание=Источник.Примечание;
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки+1;
		НомерСтрокиДокумента=НомерСтрокиДокумента+1;
	КонецЦикла;
	
	Если ВыгрузитьТекст=1 тогда
		ВыгрузитьСписокСтрок(СписокСтрок);
	КонецЕсли;
	
	// XML
	
	Если ВыгрузитьXML=1 тогда
		ОбразДокумента.Установить("ТЧ",ТабСтрок);
		ВыгрузитьПоПравилу(ОбразДокумента, Эл_Правило, ИдПравила);
	КонецЕсли;
	
КонецПроцедуры // Документ_Обороты()

//******************************************************************************
//	ДобавитьИнтервал(Периодичность, ДатаИзПериода, Добавка)
//
//	Параметры:
//	Периодичность (Перечисление.Периодичность или строка) - период планирования.
//	ДатаИзПериода (дата) - любая дата из периода планирования.
//		К этой дате будет добавлено указанное количество периодов.
//	Добавка (целое число) - количество периодов, которе необходимо добавить.
//
//	Возвращаемое значение:
//	(дата) - вычисленная дата.
//
//	Описание:
//	Функция вычисляет дату, полученную добавлением к переменной ДатаИзПериода указанное 
//	количества периодов планирования (положительного или отрицательного).
//	Функция предназначена для "листания" циклов или периодов планирования.

Функция ДобавитьИнтервал(Периодичность, ДатаИзПериода, Знач Добавка) 
	
	НоваяДата = ДатаИзПериода;
	
	Если Периодичность = "День" Тогда
		НоваяДата = ДатаИзПериода+Добавка;
		
	ИначеЕсли Периодичность = "Декада" Тогда
		НовоеЧисло = Мин(ДатаЧисло(ДатаИзПериода), 30)+Добавка%3*10;
		НовыйМесяц = ДобавитьМесяц(ДатаИзПериода, Цел(Добавка/3));
		
		Если НовоеЧисло < 1 Тогда
			НовоеЧисло = НовоеЧисло+30;
			НовыйМесяц = ДобавитьМесяц(НовыйМесяц, -1);
			
		ИначеЕсли 30 < НовоеЧисло Тогда
			НовоеЧисло = НовоеЧисло-30;
			НовыйМесяц = ДобавитьМесяц(НовыйМесяц, 1);
		КонецЕсли;
		
		Если НовоеЧисло < ДатаЧисло(КонМесяца(НовыйМесяц)) Тогда
			НовоеЧисло = Формат(НовоеЧисло, "Ч(0)2.0");
			НовыйМесяц = Формат(НовыйМесяц, "ДДДММГГГГ");
			
			НоваяДата = Дата(НовоеЧисло+Сред(НовыйМесяц, 3));
		Иначе
			НоваяДата = КонМесяца(НовыйМесяц);
		КонецЕсли;
		
	ИначеЕсли Периодичность = "Месяц" Тогда
		НоваяДата = ДобавитьМесяц(ДатаИзПериода, Добавка);
		
	ИначеЕсли Периодичность = "Квартал" Тогда
		НоваяДата = ДобавитьМесяц(ДатаИзПериода, Добавка*3);
		
	ИначеЕсли Периодичность = "Полугодие" Тогда
		НоваяДата = ДобавитьМесяц(ДатаИзПериода, Добавка*6);
		
	ИначеЕсли Периодичность = "Год" Тогда
		НоваяДата = ДобавитьМесяц(ДатаИзПериода, Добавка*12);
		
	ИначеЕсли ПустоеЗначение(Периодичность) = 0 Тогда
		Сообщить("ДобавитьИнтервал(): не определена периодичность: """+Периодичность+""".", "I");
	КонецЕсли;
	
	Возврат НоваяДата;
	
КонецФункции // ДобавитьИнтервал()

//******************************************************************************
//	ГраницыИнтервала(Периодичность, ДатаИзПериода, НачПериода, КонПериода)
//
//	Параметры:
//	Периодичность (Перечисление.Периодичность или строка) - период планирования.
//	ДатаИзПериода (дата) - любая дата из периода планирования.
//	НачПериода (необязательный) - переменная, куда процедура запишет дату начала периода.
//	КонПериода (необязательный) - переменная, куда процедура запишет дату конца периода.
//
//	Возвращаемое значение:
//	(строка) - строковое представление периода планирования.
//
//	Описание:
//	Функция определяет даты начала и конца периода планирования, 
//	когда известна продолжительность этого периода и любая дата внутри него. 
//	Предназначена для определения границ цикла или периода планирования.

Функция ГраницыИнтервала(Знач Периодичность, Знач ДатаИзПериода, НачПериода=0, КонПериода=0) 
	
	Если Периодичность = "День" Тогда
		НачПериода = ДатаИзПериода; 
		КонПериода = ДатаИзПериода;
		СтрПериода = Формат(НачПериода, "ДДДММММГГГГ");
		
	ИначеЕсли Периодичность = "Декада" Тогда
		Если ДатаЧисло(ДатаИзПериода) < 11 Тогда
			НачПериода = НачМесяца(ДатаИзПериода);
			КонПериода = НачМесяца(ДатаИзПериода)+9; // 10-е число
			
		ИначеЕсли ДатаЧисло(ДатаИзПериода) < 21 Тогда 
			НачПериода = НачМесяца(ДатаИзПериода)+10; // 11-е число
			КонПериода = НачМесяца(ДатаИзПериода)+19; // 20-е число
			
		Иначе
			НачПериода = НачМесяца(ДатаИзПериода)+20; // 21-е число
			КонПериода = КонМесяца(ДатаИзПериода);
		КонецЕсли;
		СтрПериода = ""+ДатаЧисло(НачПериода)+"-"+Формат(КонПериода, "ДДДММММГГГГ");
		
	ИначеЕсли Периодичность = "Месяц" Тогда
		НачПериода = НачМесяца(ДатаИзПериода); 
		КонПериода = КонМесяца(ДатаИзПериода);
		СтрПериода = ПериодСтр(НачПериода, КонПериода);
		
	ИначеЕсли Периодичность = "Квартал" Тогда
		НачПериода = НачКвартала(ДатаИзПериода); 
		КонПериода = КонКвартала(ДатаИзПериода);
		СтрПериода = ПериодСтр(НачПериода, КонПериода);
		
	ИначеЕсли Периодичность = "Полугодие" Тогда
		НачПериода = НачГода(ДатаИзПериода);
		КонПериода = ДобавитьМесяц(КонГода(ДатаИзПериода), -6);
		СтрПериода = ПериодСтр(НачПериода, КонПериода);
		
		Если 6<ДатаМесяц(ДатаИзПериода) Тогда
			НачПериода = ДобавитьМесяц(НачПериода, 6);
			КонПериода = КонГода(КонПериода);
			СтрПериода = "2"+Сред(СтрПериода, 2);
		КонецЕсли;
		
	ИначеЕсли Периодичность = "Год" Тогда
		НачПериода = НачГода(ДатаИзПериода);
		КонПериода = КонГода(ДатаИзПериода);
		СтрПериода = ПериодСтр(НачПериода, КонПериода);
		
	Иначе
		НачПериода = '00.00.0000'; 
		КонПериода = '00.00.0000';
		СтрПериода = "";
		
		Если ПустоеЗначение(Периодичность) = 0 Тогда
			Сообщить("ГраницыИнтервала(): не определена периодичность: """+Периодичность+""".", "I");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрПериода;
	
КонецФункции // ГраницыИнтервала()

//******************************************************************************
//	ГраницыЦикла(ВариантБюджета, ДатаИзЦикла, НачЦикла, КонЦикла)
//
//	Параметры:
//	ВариантБюджета (Справочник.ВариантыБюджетов) - вариант бюджета, 
//		в котором определена цикличность планирования.
//	ДатаИзЦикла (дата) - любая дата из цикла планирования.
//	НачЦикла (необязательный) - переменная, куда процедура запишет дату начала цикла.
//	КонЦикла (необязательный) - переменная, куда процедура запишет дату конца цикла.
//
//	Возвращаемое значение:
//	(строка) - строковое представление цикла планирования.
//
//	Описание:
//	Функция определяет даты начала и конца цикла планирования, 
//	когда известна продолжительность этого цикла и любая дата внутри него. 
//	Предназначена для определения границ цикла планирования.

Функция ГраницыЦикла(ВариантБюджета, ДатаИзЦикла, НачЦикла=0, КонЦикла=0) 
	
	Если ВариантБюджета.Цикличность = "" Тогда
		// Границы цикла выравниваются по границам периодов планирования.
		ГраницыИнтервала(ВариантБюджета.Периодичность, ВариантБюджета.НачалоПлана, НачЦикла);
		ГраницыИнтервала(ВариантБюджета.Периодичность, ВариантБюджета.КонецПлана, , КонЦикла);
		
		Если (НачЦикла = '00.00.0000') ИЛИ (КонЦикла < НачЦикла) Тогда
			НачЦикла = '00.00.0000'; КонЦикла = '00.00.0000'; СтрЦикла = "";
		Иначе
			СтрЦикла = Формат(НачЦикла, "ДДДММГГГГ")+" - "+Формат(КонЦикла, "ДДДММГГГГ");
		КонецЕсли;
		
	Иначе
		СтрЦикла = ГраницыИнтервала(ВариантБюджета.Цикличность, ДатаИзЦикла, НачЦикла, КонЦикла);
	КонецЕсли;
	
	Возврат СтрЦикла;
	
КонецФункции // ГраницыЦикла()

//******************************************************************************
//	ГраницыПериода(ВариантБюджета, ДатаИзПериода, НачПериода, КонПериода)
//
//	Параметры:
//	ВариантБюджета (Справочник.ВариантыБюджетов) - вариант бюджета, 
//		в котором определена периодичность планирования.
//	ДатаИзПериода (дата) - любая дата из периода планирования.
//	НачПериода (необязательный) - переменная, куда процедура запишет дату начала периода.
//	КонПериода (необязательный) - переменная, куда процедура запишет дату конца периода.
//
//	Возвращаемое значение:
//	(строка) - строковое представление периода планирования.
//
//	Описание:
//	Функция определяет даты начала и конца периода планирования, 
//	когда известна продолжительность этого периода и любая дата внутри него. 
//	Предназначена для определения границ периода планирования.

Функция ГраницыПериода(ВариантБюджета, ДатаИзПериода, НачПериода=0, КонПериода=0) 
	
	Перем НачЦикла, КонЦикла;
	
	СтрПериода = ГраницыИнтервала(ВариантБюджета.Периодичность, ДатаИзПериода, НачПериода, КонПериода);
	
	// Если бюджет нерегулярный, тогда ДатаИзПериода должна лежать внутри цикла планирования.
	Если ВариантБюджета.Цикличность = "" Тогда
		ГраницыЦикла(ВариантБюджета, ДатаИзПериода, НачЦикла, КонЦикла);
		
		Если (ДатаИзПериода < НачЦикла) ИЛИ (КонЦикла < ДатаИзПериода) Тогда
			НачПериода = '00.00.0000'; КонПериода = '00.00.0000'; СтрПериода = "";
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрПериода;
	
КонецФункции // ГраницыПериода()

//******************************************************************************
//	ПроверкаИнтервала()
//
//	Описание:
//	Процедура проверяет и корректирует НачИнтервала и КонИнтервала.

Процедура ПроверкаИнтервала()
	
	Перем НачЦикла, КонЦикла;
	
	Если ВариантБюджета.Выбран() = 1 Тогда
		Если ВариантБюджета.Цикличность = "" Тогда
			ГраницыЦикла(ВариантБюджета, 0, НачЦикла, КонЦикла);
			
			НачИнтервала = Макс(НачЦикла, НачИнтервала); 
			КонИнтервала = Макс(НачЦикла, КонИнтервала); 
			
			НачИнтервала = Мин(НачИнтервала, КонЦикла);
			КонИнтервала = Мин(КонИнтервала, КонЦикла);
		КонецЕсли;
		
		ГраницыПериода(ВариантБюджета, НачИнтервала, НачИнтервала);
		ГраницыПериода(ВариантБюджета, КонИнтервала, , КонИнтервала);
	КонецЕсли;
	
КонецПроцедуры // ПроверкаИнтервала()

//******************************************************************************
//	ОбработкаНачИнтервала()
//
//	Параметры:
//	Добавка (число) - количество периодов, которые надо добавить (1 или -1)
//
//	Вызывается из формул элементов диалога:
//	ВариантБюджета
//	НачИнтервала
//	кнНачНазад
//	кнНачВперед
//
//	Описание:
//	Процедура "листает" НачИнтервала.
//	Процедура проверяет и корректирует КонИнтервала.

Процедура ОбработкаНачИнтервала(Добавка=0)
	
	НачИнтервала = ДобавитьИнтервал(ВариантБюджета.Периодичность, НачИнтервала, Добавка);
	
	КонИнтервала = Макс(НачИнтервала, КонИнтервала);
	
	ПроверкаИнтервала();
	
КонецПроцедуры // ОбработкаНачИнтервала()

//******************************************************************************
//	ОбработкаКонИнтервала()
//
//	Параметры:
//	Добавка (число) - количество периодов, которые надо добавить (1 или -1)
//
//	Вызывается из формул элементов диалога:
//	НачИнтервала
//	кнКонНазад
//	кнКонВперед
//
//	Описание:
//	Процедура "листает" КонИнтервала.
//	Процедура проверяет и корректирует КонИнтервала.

Процедура ОбработкаКонИнтервала(Добавка=0)
	
	КонИнтервала = ДобавитьИнтервал(ВариантБюджета.Периодичность, КонИнтервала, Добавка);
	
	НачИнтервала = Мин(НачИнтервала, КонИнтервала);
	
	ПроверкаИнтервала();
	
КонецПроцедуры // ОбработкаКонИнтервала() 


//******************************************************************************
//	СписокЗначенийФильтра()
//
//	Параметры:
//	АтрибутОтбора ("Строка") - значение реквизита "Атрибут" справочника "ФП_ОтборДанных".
//	ДополнительныеУсловия ("Строка") - дополнительные условия отбора, значение 
//         реквизита "ДополнительныеУсловия" справочника "ФП_ОтборДанных".
//	Операнд ("Строка") - значение реквизита "Операнд" справочника "ФП_ОтборДанных".
//
//	Возвращаемое значение:
//	Список условий по которым отбираются (рассчитываются) итоги.
//
//	Описание:
//  Формируется список значений условий отбора по которым рассчитываются итоги,
//  в соответствии со значением реквизита "Атрибут" справочника "ФП_ОтборДанных".

Функция СписокЗначенийФильтра(АтрибутОтбора, ДополнительныеУсловия = "", Операнд = "")
	
	СписокЗначенийФильтра = СписокФильтров.Получить(АтрибутОтбора+ДополнительныеУсловия+Операнд);
	Если ТипЗначенияСтр(СписокЗначенийФильтра)="СписокЗначений" Тогда
		Возврат СписокЗначенийФильтра;
	КонецЕсли;
	
	СписокЗначенийФильтра = СоздатьОбъект("СписокЗначений");
	Если СправОтбора.ВыбратьЭлементыПоРеквизиту("Атрибут",АтрибутОтбора) = 1 Тогда
		Пока СправОтбора.ПолучитьЭлемент() = 1 Цикл
			Если СправОтбора.ПометкаУдаления() = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПустаяСтрока(Операнд) = 0 Тогда
				Если СокрП(СправОтбора.Операнд) <> Операнд Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(ДополнительныеУсловия) = 0 Тогда
				Если СокрП(СправОтбора.ДополнительныеУсловия) <> ДополнительныеУсловия Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если Найти(АтрибутОтбора,".Вид()") > 0 Тогда
				Если СписокЗначенийФильтра.НайтиЗначение(СокрП(СправОтбора.ДополнительныеУсловия)) > 0 Тогда
					Продолжить;
				КонецЕсли;
				СписокЗначенийФильтра.ДобавитьЗначение(СокрП(СправОтбора.ДополнительныеУсловия));
				
			ИначеЕсли (ПустоеЗначение(СправОтбора.Значение) = 0) или (Сред(АтрибутОтбора,1,4) <> "Счет") Тогда
				Если Сред(АтрибутОтбора,1,8) = "Субконто" Тогда
					ЕстьЗначение = 0;
					Для Номер = 1 По СписокЗначенийФильтра.РазмерСписка() Цикл
						Представление = "";
						Значение = СписокЗначенийФильтра.ПолучитьЗначение(Номер,Представление);
						Если (Значение = СправОтбора.Значение) и (Представление = СокрП(СправОтбора.ДополнительныеУсловия)) Тогда
							ЕстьЗначение = 1;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если ЕстьЗначение = 1 Тогда
						Продолжить;
					КонецЕсли;
				ИначеЕсли СписокЗначенийФильтра.НайтиЗначение(СправОтбора.Значение) > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СписокЗначенийФильтра.ДобавитьЗначение(СправОтбора.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	СписокФильтров.Установить(АтрибутОтбора+ДополнительныеУсловия+Операнд,СписокЗначенийФильтра);
	Возврат СписокЗначенийФильтра;
	
КонецФункции // СписокЗначенийФильтра()

//******************************************************************************
// ТекстУсловийФильтра()
//
//	Параметры:
//	ТекстЗапроса ("Строка") - формируемый текст запроса.
//	ПеремЗапроса ("Строка") - переменная запроса по которой формируется условие.
//	АтрибутОтбора ("Строка") - значение реквизита "Атрибут" справочника "ФП_ОтборДанных".
//	ДополнительныеУсловия ("Строка") - дополнительные условия отбора, значение 
//         реквизита "ДополнительныеУсловия" справочника "ФП_ОтборДанных".
//
//	Описание:
//    Дополняет текст запроса дополнительными условиями, в 
//    соответствии с переданными параметрами.

Процедура ТекстУсловийФильтра(ТекстЗапроса, ПеремЗапроса, АтрибутОтбора, ДополнительныеУсловия = "",ТипОтбора)
	
	Если СписокЗначенийФильтра(АтрибутОтбора, ДополнительныеУсловия, "Равно").РазмерСписка() > 0 Тогда
		
		Если (ТипОтбора="Справочник") тогда
			
			УсловиеОтбора = "Условие    (" + ПеремЗапроса + " в СписокЗначенийФильтра(""" + АтрибутОтбора + """," + ?(ПустаяСтрока(ДополнительныеУсловия) = 0, 
			+"""" + ДополнительныеУсловия + """", "") + ",""Равно""));";
			
			Если Найти(ТекстЗапроса, УсловиеОтбора) = 0 Тогда
				ТекстЗапроса = ТекстЗапроса + РС + УсловиеОтбора;
			КонецЕсли;
			
		Иначе
			
			Для Индекс=1 по СписокЗначенийФильтра(АтрибутОтбора, ДополнительныеУсловия, "Равно").РазмерСписка() цикл
				
				Если Индекс=1 тогда
					
					УсловиеОтбора="Условие (("+ПеремЗапроса+"=СписокЗначенийФильтра(""" + АтрибутОтбора + """," + ?(ПустаяСтрока(ДополнительныеУсловия) = 0, +"""" 
					+ ДополнительныеУсловия + """", "") + ",""Равно"").ПолучитьЗначение("+Индекс+"))";
					
				Иначе
					УсловиеОтбора=УсловиеОтбора+" ИЛИ "+РС+"("+ПеремЗапроса+"=СписокЗначенийФильтра(""" + АтрибутОтбора + """," + ?(ПустаяСтрока(ДополнительныеУсловия) = 0, +"""" 
					+ ДополнительныеУсловия + """", "") + ",""Равно"").ПолучитьЗначение("+Индекс+"))";
					
				КонецЕсли;
				
			КонецЦикла;
			
			УсловиеОтбора=УсловиеОтбора+");";
			
			
			Если Найти(ТекстЗапроса, УсловиеОтбора) = 0 Тогда
				ТекстЗапроса = ТекстЗапроса + РС + УсловиеОтбора;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СписокЗначенийФильтра(АтрибутОтбора, ДополнительныеУсловия, "Не равно").РазмерСписка() > 0 Тогда
		
		Если (ТипОтбора="Справочник") тогда
			
			УсловиеОтбора = "Условие    (НЕ(" + ПеремЗапроса + " в СписокЗначенийФильтра(""" + АтрибутОтбора + """," + ?(ПустаяСтрока(ДополнительныеУсловия) = 0, 
			+"""" + ДополнительныеУсловия + """", "") + ",""Равно"")));";
			
			Если Найти(ТекстЗапроса, УсловиеОтбора) = 0 Тогда
				ТекстЗапроса = ТекстЗапроса + РС + УсловиеОтбора;
			КонецЕсли;
			
		Иначе
			
			Для Индекс=1 по СписокЗначенийФильтра(АтрибутОтбора, ДополнительныеУсловия, "Не равно").РазмерСписка() цикл
				
				Если Индекс=1 тогда
					
					УсловиеОтбора="Условие (("+ПеремЗапроса+"<>СписокЗначенийФильтра(""" + АтрибутОтбора + """," + ?(ПустаяСтрока(ДополнительныеУсловия) = 0, +"""" 
					+ ДополнительныеУсловия + """", "") + ",""Не равно"").ПолучитьЗначение("+Индекс+"))";
					
				Иначе
					
					УсловиеОтбора=УсловиеОтбора+" И "+РС+"("+ПеремЗапроса+"<>СписокЗначенийФильтра(""" + АтрибутОтбора + """," + ?(ПустаяСтрока(ДополнительныеУсловия) = 0, +"""" 
					+ ДополнительныеУсловия + """", "") + ",""Не равно"").ПолучитьЗначение("+Индекс+"))";
					
				КонецЕсли;
				
			КонецЦикла;
			
			УсловиеОтбора=УсловиеОтбора+");";
			
			
			Если Найти(ТекстЗапроса, УсловиеОтбора) = 0 Тогда
				ТекстЗапроса = ТекстЗапроса + РС + УсловиеОтбора;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры // ТекстУсловийФильтра()

//******************************************************************************
//	ЦиклПоСчетам()
//

Функция ЦиклПоСчетам(ИтБУ,ТипСуммы,ТипИтогов,Объект,ЕстьКоррСчета=0)
	
	СуммаИтог=0;
	
	Если ТипИтогов=1 тогда 
		
		СпрОтбор=СоздатьОбъект("Справочник.ФП_ОтборДанных");
		СпрОтбор.ИспользоватьВладельца(Объект);
		
		ИтБУ.ВыбратьСчета();
		Пока ИтБУ.ПолучитьСчет()=1 цикл
			ТипСальдо="";
			ТекущийУровень=ИтБУ.Счет.Уровень();
			ТекущийСчет=ИтБУ.Счет;
			Пока ТекущийУровень>0 цикл 
				СпрОтбор.ВыбратьЭлементы(1);
				Пока СпрОтбор.ПолучитьЭлемент()=1 цикл
					Если СпрОтбор.ТекущийЭлемент().Значение=ТекущийСчет тогда
						Если ТипСальдо="" тогда
							ТипСальдо=СокрЛП(СпрОтбор.ТекущийЭлемент().Атрибут);
						Иначе
							ТипСальдо=""
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если ТекущийУровень>1 тогда
					ТекущийСчет=ТекущийСчет.Родитель();
				КонецЕсли;
				ТекущийУровень=ТекущийУровень-1;
			КонецЦикла;
			Если ТипСальдо="СчетДебета" тогда
				СуммаИтог=СуммаИтог+ИтБУ.СНД(ТипСуммы);
			ИначеЕсли ТипСальдо="СчетКредита" тогда
				СуммаИтог=СуммаИтог-ИтБУ.СНК(ТипСуммы);	
			Иначе
				СуммаИтог=СуммаИтог+ИтБУ.СНД(ТипСуммы)-ИтБУ.СНК(ТипСуммы); 
			КонецЕсли;
		КонецЦикла;
		
	Иначе
	
		ИтБУ.ВыбратьСчета();
		Пока ИтБУ.ПолучитьСчет()=1 цикл
			Если ЕстьКоррСчета>0 тогда
				
				ИтБУ.ВыбратьКорСчета();
				Пока ИтБУ.ПолучитьКорСчет()=1 цикл
					СуммаИтог=СуммаИтог+?(ИтБУ.КорДО(ТипСуммы)<>0,ИтБУ.КорДО(ТипСуммы),0);
				КонецЦикла;
			Иначе
				СуммаИтог=СуммаИтог+?(ИтБУ.ДО(ТипСуммы)<>0,ИтБУ.ДО(ТипСуммы),0);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СуммаИтог;
	
КонецФункции // ЦиклПоСчетам() 


//******************************************************************************
//	ПроверкаСубконто()
//
Функция ПроверкаСубконто(СписокИсключаемых,Субконто)
	
	Исключать=0;
	
	Для Индекс=1 по СписокИсключаемых.РазмерСписка() цикл
		ТекСубконто=СписокИсключаемых.ПолучитьЗначение(Индекс);
		
		Если Субконто=ТекСубконто тогда
			
			Исключать=1;
			
		ИначеЕсли ТипЗначенияСтр(ТекСубконто)="Справочник" тогда
			
			Если Субконто.ПринадлежитГруппе(ТекСубконто)=1 тогда
				Исключать=1;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Исключать;
	
КонецФункции // ПроверкаСубконто() 
		
//******************************************************************************
//	ЦиклПоКорСубконто()
//

Функция ЦиклПоКорСубконто(ИтБУ,ТаблицаКорСубконто,ТипСуммы,ЕстьКоррСчета);
	
	СуммаИтог=0;
	
	Если ТаблицаКорСубконто.КоличествоСтрок()>0 тогда
		ИтБУ.ВыбратьКорСубконто(1);
		Пока ИтБУ.ПолучитьКорСубконто(1)=1 цикл
			ТаблицаКорСубконто.ПолучитьСтрокуПоНомеру(1);
			Если ПроверкаСубконто(ТаблицаКорСубконто.ЗначенияКорСубконто1,ИтБУ.КорСубконто(1))=1 тогда
				Продолжить;
			КонецЕсли;
			Если ТаблицаКорСубконто.КоличествоСтрок()>1 тогда
				ИтБУ.ВыбратьКорСубконто(2);
				Пока ИтБУ.ПолучитьКорСубконто(2)=1 цикл
					ТаблицаКорСубконто.ПолучитьСтрокуПоНомеру(2);
					Если ПроверкаСубконто(ТаблицаКорСубконто.ЗначенияКорСубконто1,ИтБУ.КорСубконто(2))=1 тогда
						Продолжить;
					КонецЕсли;
					Если ТаблицаКорСубконто.КоличествоСтрок()>2 тогда
						ИтБУ.ВыбратьКорСубконто(3);
						Пока ИтБУ.ПолучитьКорСубконто(3)=1 цикл
							ТаблицаКорСубконто.ПолучитьСтрокуПоНомеру(3);
							Если ПроверкаСубконто(ТаблицаКорСубконто.ЗначенияКорСубконто1,ИтБУ.КорСубконто(3))=1 тогда
								Продолжить;
							КонецЕсли;
							Если ТаблицаКорСубконто.КоличествоСтрок()>3 тогда
								ИтБУ.ВыбратьКорСубконто(4);
								Пока ИтБУ.ПолучитьКорСубконто(4)=1 цикл
									ТаблицаКорСубконто.ПолучитьСтрокуПоНомеру(4);
									Если ПроверкаСубконто(ТаблицаКорСубконто.ЗначенияКорСубконто1,ИтБУ.КорСубконто(4))=1 тогда
										Продолжить;
									КонецЕсли;
									Если ТаблицаКорСубконто.КоличествоСтрок()>4 тогда
										ИтБУ.ВыбратьКорСубконто(5);
										Пока ИтБУ.ПолучитьКорСубконто(5)=1 цикл
											ТаблицаКорСубконто.ПолучитьСтрокуПоНомеру(5);
											Если ПроверкаСубконто(ТаблицаКорСубконто.ЗначенияКорСубконто1,ИтБУ.КорСубконто(5))=1 тогда
												Продолжить;
											КонецЕсли;
											СуммаИтог=СуммаИтог+ЦиклПоСчетам(ИтБУ,ТипСуммы,2,,ЕстьКоррСчета);
										КонецЦикла;
									Иначе
										СуммаИтог=СуммаИтог+ЦиклПоСчетам(ИтБУ,ТипСуммы,2,,ЕстьКоррСчета);
									КонецЕсли;
								КонецЦикла;
							Иначе
								СуммаИтог=СуммаИтог+ЦиклПоСчетам(ИтБУ,ТипСуммы,2,,ЕстьКоррСчета);
							КонецЕсли;
						КонецЦикла;	
					Иначе
						СуммаИтог=СуммаИтог+ЦиклПоСчетам(ИтБУ,ТипСуммы,2,,ЕстьКоррСчета);
					КонецЕсли;
				КонецЦикла;		
			Иначе
				СуммаИтог=СуммаИтог+ЦиклПоСчетам(ИтБУ,ТипСуммы,2,,ЕстьКоррСчета);
			КонецЕсли;
		КонецЦикла;
	Иначе
		СуммаИтог=СуммаИтог+ЦиклПоСчетам(ИтБУ,ТипСуммы,2,,ЕстьКоррСчета);
	КонецЕсли;

	Возврат СуммаИтог;

КонецФункции // ЦиклПоКорСубконто() 	
	

//******************************************************************************
//	ПолучитьБухИтогиПоОбъекту()
//
//	Параметры:
//	Объект (справочник "ФП_ВыгрузкаДанных") - элемент по которому будет 
//		производится расчет итогов.
//	ВалютаВыгрузки (справочник "Валюты") - валюта по которой рассчитываются итоги.
//
//	Возвращаемое значение:
//	Рассчитанная сумма.
//
//	Описание:
//  Формирует условия расчета бухгалтерских итогов на основе данных 
//  справочника "ФП_ОтборДанных" по переданному Объекту.

Функция ПолучитьБухИтогиПоОбъекту(Объект)
	
	Состояние("Рассчитывается - " + СокрЛП(Объект.Код) + " " + СокрЛП(Объект.Наименование));
	
	ТабИтогов=СоздатьОбъект("ТаблицаЗначений");
	ТабИтогов.НоваяКолонка("ДатаНачПериода");
	ТабИтогов.НоваяКолонка("Сумма");
	ТабИтогов.НоваяКолонка("Валюта");
	
	СправВалют  = СоздатьОбъект("Справочник.Валюты");
	СправВалют.ВыбратьЭлементы(0);
	
	СпрОтбор=СоздатьОбъект("Справочник.ФП_ОтборДанных");
	СпрОтбор.ИспользоватьВладельца(Объект);
	
	СпрОтбор.ВыбратьЭлементы();
	Если СпрОтбор.ПолучитьЭлемент()=0 тогда
		Возврат ТабИтогов;
	КонецЕсли;
	
	ВалютныеИтоги=1;
	
	РабочийПланСчетов=СоздатьОбъект("Счет");
	
	Если Найти(Объект.ВидОбъекта,"Счет")>0 тогда
		РабочийПланСчетов.ИспользоватьПланСчетов(ПланыСчетов.ЗначениеПоИдентификатору(СтрЗаменить(Объект.ВидОбъекта,"ПланСчетов.","")));
	Иначе
		РабочийПланСчетов.ИспользоватьПланСчетов(ОсновнойПланСчетов());
	КонецЕсли;
	
	РабочийПланСчетов.ВыборГруппы(0);
	
	Если Объект.Показатель.Выбран()=1 Тогда
		ТипИтогов="Остатки";
	Иначе
		ТипИтогов="Обороты";
	КонецЕсли;
	
	ТаблицаСубконто=СоздатьОбъект("ТаблицаЗначений");
	ТаблицаСубконто.НоваяКолонка("ВидСубконто");
	ТаблицаСубконто.НоваяКолонка("ЗначенияСубконто");
	ТаблицаСубконто.НоваяКолонка("ЗначенияСубконто1");
	
	ТаблицаКорСубконто=СоздатьОбъект("ТаблицаЗначений");
	ТаблицаКорСубконто.НоваяКолонка("ВидСубконто");
	ТаблицаКорСубконто.НоваяКолонка("ЗначенияКорСубконто");
	ТаблицаКорСубконто.НоваяКолонка("ЗначенияКорСубконто1");
	
	СписокСчетов=СоздатьОбъект("СписокЗначений");
	СписокКорСчетов=СоздатьОбъект("СписокЗначений");
	
	СпрОтбор.ВыбратьЭлементы();
	Пока СпрОтбор.ПолучитьЭлемент()=1 цикл 
		Если ТипИтогов="Остатки" тогда
			Если Найти(СпрОтбор.Атрибут,"Счет")>0 тогда
				Если СокрЛП(СпрОтбор.Операнд)="Равно" тогда
					СписокСчетов.Установить(СпрОтбор.Значение.Код,СпрОтбор.Значение);
					ВалютныеИтоги=?(СпрОтбор.Значение.Валютный=0,0,ВалютныеИтоги);
				Иначе
					РабочийПланСчетов.ВыбратьСчета();
					Пока РабочийПланСчетов.ПолучитьСчет()=1 цикл
						Если (СпрОтбор.Значение.ЭтоГруппа()=0) и (РабочийПланСчетов.ТекущийСчет()<>СпрОтбор.Значение) тогда
							СписокСчетов.Установить(РабочийПланСчетов.ТекущийСчет().Код,РабочийПланСчетов.ТекущийСчет());
							ВалютныеИтоги=?(РабочийПланСчетов.ТекущийСчет().Валютный=0,0,ВалютныеИтоги);
						ИначеЕсли (СпрОтбор.Значение.ЭтоГруппа()=1) и (РабочийПланСчетов.ТекущийСчет().ПринадлежитГруппе(СпрОтбор.Значение)=0) тогда
							СписокСчетов.Установить(РабочийПланСчетов.ТекущийСчет().Код,РабочийПланСчетов.ТекущийСчет());
							ВалютныеИтоги=?(РабочийПланСчетов.ТекущийСчет().Валютный=0,0,ВалютныеИтоги);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли Найти(СпрОтбор.Атрибут,"Субконто")>0 тогда 
				
				НомСтр=0;
				
				Если ТаблицаСубконто.НайтиЗначение(СпрОтбор.ДополнительныеУсловия,НомСтр,"ВидСубконто")=0 тогда
					
					ТаблицаСубконто.НоваяСтрока();
					СписокСубконто=СоздатьОбъект("СписокЗначений");
					СписокСубконто1=СоздатьОбъект("СписокЗначений"); 
					
					Если СокрЛП(СпрОтбор.Операнд)="Равно" тогда
						СписокСубконто.ДобавитьЗначение(СпрОтбор.Значение);
					Иначе
						СписокСубконто1.ДобавитьЗначение(СпрОтбор.Значение);
					КонецЕсли;
					
					ТаблицаСубконто.ВидСубконто=СпрОтбор.ДополнительныеУсловия;
					ТаблицаСубконто.ЗначенияСубконто=СписокСубконто;
					ТаблицаСубконто.ЗначенияСубконто1=СписокСубконто1;
					
				Иначе
					
					ТаблицаСубконто.ПолучитьСтрокуПоНомеру(НомСтр);
					СписокСубконто=ТаблицаСубконто.ЗначенияСубконто;
					СписокСубконто1=ТаблицаСубконто.ЗначенияСубконто1; 
					
					Если СокрЛП(СпрОтбор.Операнд)="Равно" тогда
						СписокСубконто.ДобавитьЗначение(СпрОтбор.Значение);
					Иначе
						СписокСубконто1.ДобавитьЗначение(СпрОтбор.Значение);
					КонецЕсли;
					
					ТаблицаСубконто.ЗначенияСубконто=СписокСубконто;
					ТаблицаСубконто.ЗначенияСубконто1=СписокСубконто1;
					
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Найти(СпрОтбор.Атрибут,"СчетДебета")>0 тогда
				Если СокрЛП(СпрОтбор.Операнд)="Равно" тогда
					СписокСчетов.Установить(СпрОтбор.Значение.Код,СпрОтбор.Значение);
					ВалютныеИтоги=?(СпрОтбор.Значение.Валютный=0,0,ВалютныеИтоги);
				Иначе
					РабочийПланСчетов.ВыбратьСчета();
					Пока РабочийПланСчетов.ПолучитьСчет()=1 цикл
						Если (СпрОтбор.Значение.ЭтоГруппа()=0) и (РабочийПланСчетов.ТекущийСчет()<>СпрОтбор.Значение) тогда
							СписокСчетов.Установить(РабочийПланСчетов.ТекущийСчет().Код,РабочийПланСчетов.ТекущийСчет());
							ВалютныеИтоги=?(РабочийПланСчетов.ТекущийСчет().Валютный=0,0,ВалютныеИтоги);
						ИначеЕсли (СпрОтбор.Значение.ЭтоГруппа()=1) и (РабочийПланСчетов.ТекущийСчет().ПринадлежитГруппе(СпрОтбор.Значение)=0) тогда
							СписокСчетов.Установить(РабочийПланСчетов.ТекущийСчет().Код,РабочийПланСчетов.ТекущийСчет());
							ВалютныеИтоги=?(РабочийПланСчетов.ТекущийСчет().Валютный=0,0,ВалютныеИтоги);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли Найти(СпрОтбор.Атрибут,"СчетКредита")>0 тогда
				Если СокрЛП(СпрОтбор.Операнд)="Равно" тогда
					СписокКорСчетов.Установить(СпрОтбор.Значение.Код,СпрОтбор.Значение);
					ВалютныеИтоги=?(СпрОтбор.Значение.Валютный=0,0,ВалютныеИтоги);
				Иначе
					РабочийПланСчетов.ВыбратьСчета();
					Пока РабочийПланСчетов.ПолучитьСчет()=1 цикл
						Если (СпрОтбор.Значение.ЭтоГруппа()=0) и (РабочийПланСчетов.ТекущийСчет()<>СпрОтбор.Значение) тогда
							СписокКорСчетов.Установить(РабочийПланСчетов.ТекущийСчет().Код,РабочийПланСчетов.ТекущийСчет()); 
							ВалютныеИтоги=?(РабочийПланСчетов.ТекущийСчет().Валютный=0,0,ВалютныеИтоги);
						ИначеЕсли (СпрОтбор.Значение.ЭтоГруппа()=1) и (РабочийПланСчетов.ТекущийСчет().ПринадлежитГруппе(СпрОтбор.Значение)=0) тогда
							СписокКорСчетов.Установить(РабочийПланСчетов.ТекущийСчет().Код,РабочийПланСчетов.ТекущийСчет());
							ВалютныеИтоги=?(РабочийПланСчетов.ТекущийСчет().Валютный=0,0,ВалютныеИтоги);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;	
			ИначеЕсли Найти(СпрОтбор.Атрибут,"СубконтоДебета")>0 тогда 
				
				НомСтр=0;
				
				Если ТаблицаСубконто.НайтиЗначение(СпрОтбор.ДополнительныеУсловия,НомСтр,"ВидСубконто")=0 тогда
					
					ТаблицаСубконто.НоваяСтрока();
					СписокСубконто=СоздатьОбъект("СписокЗначений");
					СписокСубконто1=СоздатьОбъект("СписокЗначений"); 
					
					Если СокрЛП(СпрОтбор.Операнд)="Равно" тогда
						СписокСубконто.ДобавитьЗначение(СпрОтбор.Значение);
					Иначе
						СписокСубконто1.ДобавитьЗначение(СпрОтбор.Значение);
					КонецЕсли;
					
					ТаблицаСубконто.ВидСубконто=СпрОтбор.ДополнительныеУсловия;
					ТаблицаСубконто.ЗначенияСубконто=СписокСубконто;
					ТаблицаСубконто.ЗначенияСубконто1=СписокСубконто1;
					
				Иначе
					
					ТаблицаСубконто.ПолучитьСтрокуПоНомеру(НомСтр);
					
					СписокСубконто=ТаблицаСубконто.ЗначенияСубконто;
					СписокСубконто1=ТаблицаСубконто.ЗначенияСубконто1; 
					
					Если СокрЛП(СпрОтбор.Операнд)="Равно" тогда
						СписокСубконто.ДобавитьЗначение(СпрОтбор.Значение);
					Иначе
						СписокСубконто1.ДобавитьЗначение(СпрОтбор.Значение);
					КонецЕсли;
					
					ТаблицаСубконто.ЗначенияСубконто=СписокСубконто;
					ТаблицаСубконто.ЗначенияСубконто1=СписокСубконто1;
					
				КонецЕсли;
			
			ИначеЕсли Найти(СпрОтбор.Атрибут,"СубконтоКредита")>0 тогда 
				
				НомСтр=0;
				
				Если ТаблицаКорСубконто.НайтиЗначение(СпрОтбор.ДополнительныеУсловия,НомСтр,"ВидСубконто")=0 тогда
					
					ТаблицаКорСубконто.НоваяСтрока();
					СписокКорСубконто=СоздатьОбъект("СписокЗначений");
					СписокКорСубконто1=СоздатьОбъект("СписокЗначений"); 
					
					Если СокрЛП(СпрОтбор.Операнд)="Равно" тогда
						СписокКорСубконто.ДобавитьЗначение(СпрОтбор.Значение);
					Иначе
						СписокКорСубконто1.ДобавитьЗначение(СпрОтбор.Значение);
					КонецЕсли;
					
					ТаблицаКорСубконто.ВидСубконто=СпрОтбор.ДополнительныеУсловия;
					ТаблицаКорСубконто.ЗначенияКорСубконто=СписокКорСубконто;
					ТаблицаКорСубконто.ЗначенияКорСубконто1=СписокКорСубконто1;
					
				Иначе
					
					ТаблицаКорСубконто.ПолучитьСтрокуПоНомеру(НомСтр);
					
					СписокКорСубконто=ТаблицаКорСубконто.ЗначенияКорСубконто;
					СписокКорСубконто1=ТаблицаКорСубконто.ЗначенияКорСубконто1; 
					
					Если СокрЛП(СпрОтбор.Операнд)="Равно" тогда
						СписокКорСубконто.ДобавитьЗначение(СпрОтбор.Значение);
					Иначе
						СписокКорСубконто1.ДобавитьЗначение(СпрОтбор.Значение);
					КонецЕсли;
					
					ТаблицаКорСубконто.ЗначенияКорСубконто=СписокКорСубконто;
					ТаблицаКорСубконто.ЗначенияКорСубконто1=СписокКорСубконто1;
					
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла; 
	
	ИтБУ=СоздатьОбъект("БухгалтерскиеИтоги");
	
	Если Метаданные.РазделительУчета.Выбран() = 1 тогда
		Если (РазделительУчетаБух.Выбран()=1) Тогда
			ИтБУ.ИспользоватьРазделительУчета(РазделительУчетаБух);
		КонецЕсли;
	КонецЕсли;
	
	ИтБУ.Опции(1,1);
	ИтБУ.ВключатьСубсчета(0,0);
	Если Найти(Объект.ВидОбъекта,"Счет")>0 тогда
		ИтБУ.ИспользоватьПланСчетов(ПланыСчетов.ЗначениеПоИдентификатору(СтрЗаменить(Объект.ВидОбъекта,"ПланСчетов.","")));
	Иначе
		ИтБУ.ИспользоватьПланСчетов(ОсновнойПланСчетов());
	КонецЕсли;
	
	Если (ПустоеЗначение(Объект.ВалютаРасчетная) = 0) или (ПустоеЗначение(Объект.ВалютаБазовая)=0) тогда
		ЕстьВалюта=1;
	Иначе
		Сообщить("Для элемента отбора "+Объект.ПолноеНаименование()+"
		| не указана валюта выгрузки! Итоги не сформированы.","!");
		ЕстьВалюта=0;
	КонецЕсли;
	
	Пока ЕстьВалюта=1 цикл
		
		Если ПустоеЗначение(Объект.ВалютаРасчетная) = 0 тогда
			Если СправВалют.ПолучитьЭлемент()=1 тогда
				ВалютаВыгрузки=СправВалют.ТекущийЭлемент();
			Иначе
				ЕстьВалюта=0;
				Продолжить;
			КонецЕсли;
		Иначе
			ВалютаВыгрузки=ПолучитьВалютуВыгрузки(Объект.ВалютаБазовая);
			ЕстьВалюта=0;
		КонецЕсли;	
			
		Если СокрЛп(Объект.СуммаФакт)="Количество" тогда
			ТипСуммы=3; 
			ВалютаВыгрузки="";
		ИначеЕсли ВалютныеИтоги=0 тогда
			ВалютаВыгрузки="";
			ТипСуммы=1;
		Иначе	
			ТипСуммы=2;
		КонецЕсли;
	
		Если ТипИтогов="Остатки" тогда 
			ТаблицаСубконто.ВыбратьСтроки();
			Пока ТаблицаСубконто.ПолучитьСтроку()=1 цикл
				ИтБУ.ИспользоватьСубконто(ВидыСубконто.ЗначениеПоИдентификатору(ТаблицаСубконто.ВидСубконто),ТаблицаСубконто.ЗначенияСубконто);
			КонецЦикла; 
			ИтБУ.ВыполнитьЗапрос(НачИнтервала,КонИнтервала,СписокСчетов,,ВалютаВыгрузки,1,,);
		Иначе
			ТаблицаСубконто.ВыбратьСтроки();
			Пока ТаблицаСубконто.ПолучитьСтроку()=1 цикл
				ИтБУ.ИспользоватьСубконто(ВидыСубконто.ЗначениеПоИдентификатору(ТаблицаСубконто.ВидСубконто),ТаблицаСубконто.ЗначенияСубконто);
			КонецЦикла;
			ТаблицаКорСубконто.ВыбратьСтроки();
			Пока ТаблицаКорСубконто.ПолучитьСтроку()=1 цикл  
				ИтБУ.ИспользоватьКорСубконто(ВидыСубконто.ЗначениеПоИдентификатору(ТаблицаКорСубконто.ВидСубконто),ТаблицаКорСубконто.ЗначенияКорСубконто); 
			КонецЦикла; 
			Если СписокСчетов.РазмерСписка()>0 тогда
				ИтБУ.ВыполнитьЗапрос(НачИнтервала,КонИнтервала,СписокСчетов,СписокКорСчетов,ВалютаВыгрузки,2,ВариантБюджета.Периодичность,); 
			Иначе
				ИтБУ.ВыполнитьЗапрос(НачИнтервала,КонИнтервала,СписокКорСчетов,,ВалютаВыгрузки,1,ВариантБюджета.Периодичность,);
			КонецЕсли;
		КонецЕсли;
		
		Если ТипИтогов="Остатки" тогда
				
			СуммаИтог=0;
			
			Если ТаблицаСубконто.КоличествоСтрок()>0 тогда
				ИтБУ.ВыбратьСубконто(1);
				Пока ИтБУ.ПолучитьСубконто(1)=1 цикл
					ТаблицаСубконто.ПолучитьСтрокуПоНомеру(1);
					Если ПроверкаСубконто(ТаблицаСубконто.ЗначенияСубконто1,ИтБУ.Субконто(1))=1 тогда
						Продолжить;
					КонецЕсли;
					Если ТаблицаСубконто.КоличествоСтрок()>1 тогда
						ИтБУ.ВыбратьСубконто(2);
						Пока ИтБУ.ПолучитьСубконто(2)=1 цикл
							ТаблицаСубконто.ПолучитьСтрокуПоНомеру(2);
							Если ПроверкаСубконто(ТаблицаСубконто.ЗначенияСубконто1,ИтБУ.Субконто(2))=1 тогда
								Продолжить;
							КонецЕсли;
							Если ТаблицаСубконто.КоличествоСтрок()>2 тогда
								ИтБУ.ВыбратьСубконто(3);
								Пока ИтБУ.ПолучитьСубконто(3)=1 цикл
									ТаблицаСубконто.ПолучитьСтрокуПоНомеру(3);
									Если ПроверкаСубконто(ТаблицаСубконто.ЗначенияСубконто1,ИтБУ.Субконто(3))=1 тогда
										Продолжить;
									КонецЕсли;
									Если ТаблицаСубконто.КоличествоСтрок()>3 тогда
										ИтБУ.ВыбратьСубконто(4);
										Пока ИтБУ.ПолучитьСубконто(4)=1 цикл
											ТаблицаСубконто.ПолучитьСтрокуПоНомеру(4);
											Если ПроверкаСубконто(ТаблицаСубконто.ЗначенияСубконто1,ИтБУ.Субконто(4))=1 тогда
												Продолжить;
											КонецЕсли;
											Если ТаблицаСубконто.КоличествоСтрок()>4 тогда
												ИтБУ.ВыбратьСубконто(5);
												Пока ИтБУ.ПолучитьСубконто(5)=1 цикл
													ТаблицаСубконто.ПолучитьСтрокуПоНомеру(5);
													Если ПроверкаСубконто(ТаблицаСубконто.ЗначенияСубконто1,ИтБУ.Субконто(5))=1 тогда
														Продолжить;
													КонецЕсли;
													СуммаИтог=СуммаИтог+ЦиклПоСчетам(ИтБУ,1,ТипСуммы,Объект);
												КонецЦикла;
											Иначе
												СуммаИтог=СуммаИтог+ЦиклПоСчетам(ИтБУ,1,ТипСуммы,Объект);
											КонецЕсли;
										КонецЦикла;
									Иначе
										СуммаИтог=СуммаИтог+ЦиклПоСчетам(ИтБУ,1,ТипСуммы,Объект);
									КонецЕсли;
								КонецЦикла;	
							Иначе
								СуммаИтог=СуммаИтог+ЦиклПоСчетам(ИтБУ,1,ТипСуммы,Объект);
							КонецЕсли;
						КонецЦикла;		
					Иначе
						СуммаИтог=СуммаИтог+ЦиклПоСчетам(ИтБУ,1,ТипСуммы,Объект);
					КонецЕсли;
				КонецЦикла;
			Иначе
				СуммаИтог=СуммаИтог+ЦиклПоСчетам(ИтБУ,1,ТипСуммы,Объект);
			КонецЕсли;	
			
			Если СуммаИтог<>0 тогда
				ТабИтогов.НоваяСтрока();
				ТабИтогов.ДатаНачПериода=ИтБУ.НачДата;
				ТабИтогов.Сумма=СуммаИтог; 
				ТабИтогов.Валюта=?(ВалютаВыгрузки="",ПолучитьВалютуВыгрузки(Объект.ВалютаБазовая),ВалютаВыгрузки);
			КонецЕсли;
			
		Иначе
			
			ЕстьКоррСчета=СписокКорСчетов.РазмерСписка();
			ИтБУ.ВыбратьПериоды();
			Пока ИтБУ.ПолучитьПериод()=1 цикл
			   СуммаИтог=0;
			   Если ТаблицаСубконто.КоличествоСтрок()>0 тогда
				ИтБУ.ВыбратьСубконто(1);
				Пока ИтБУ.ПолучитьСубконто(1)=1 цикл
					ТаблицаСубконто.ПолучитьСтрокуПоНомеру(1);
					Если ПроверкаСубконто(ТаблицаСубконто.ЗначенияСубконто1,ИтБУ.Субконто(1))=1 тогда
						Продолжить;
					КонецЕсли;
					Если ТаблицаСубконто.КоличествоСтрок()>1 тогда
						ИтБУ.ВыбратьСубконто(2);
						Пока ИтБУ.ПолучитьСубконто(2)=1 цикл
							ТаблицаСубконто.ПолучитьСтрокуПоНомеру(2);
							Если ПроверкаСубконто(ТаблицаСубконто.ЗначенияСубконто1,ИтБУ.Субконто(2))=1 тогда
								Продолжить;
							КонецЕсли;
							Если ТаблицаСубконто.КоличествоСтрок()>2 тогда
								ИтБУ.ВыбратьСубконто(3);
								Пока ИтБУ.ПолучитьСубконто(3)=1 цикл
									ТаблицаСубконто.ПолучитьСтрокуПоНомеру(3);
									Если ТаблицаСубконто.ЗначенияСубконто1.НайтиЗначение(ИтБУ.Субконто(3))>0 тогда
										Продолжить;
									КонецЕсли;
									Если ТаблицаСубконто.КоличествоСтрок()>3 тогда
										ИтБУ.ВыбратьСубконто(4);
										Пока ИтБУ.ПолучитьСубконто(4)=1 цикл
											ТаблицаСубконто.ПолучитьСтрокуПоНомеру(4);
											Если ПроверкаСубконто(ТаблицаСубконто.ЗначенияСубконто1,ИтБУ.Субконто(4))=1 тогда
												Продолжить;
											КонецЕсли;
											Если ТаблицаСубконто.КоличествоСтрок()>4 тогда
												ИтБУ.ВыбратьСубконто(5);
												Пока ИтБУ.ПолучитьСубконто(5)=1 цикл
													ТаблицаСубконто.ПолучитьСтрокуПоНомеру(5);
													Если ПроверкаСубконто(ТаблицаСубконто.ЗначенияСубконто1,ИтБУ.Субконто(5))=1 тогда
														Продолжить;
													КонецЕсли;
													СуммаИтог=СуммаИтог+ЦиклПоКорСубконто(ИтБУ,ТаблицаКорСубконто,ТипСуммы,ЕстьКоррСчета);
												КонецЦикла;
											Иначе
												СуммаИтог=СуммаИтог+ЦиклПоКорСубконто(ИтБУ,ТаблицаКорСубконто,ТипСуммы,ЕстьКоррСчета);
											КонецЕсли;
										КонецЦикла;
									Иначе
										СуммаИтог=СуммаИтог+ЦиклПоКорСубконто(ИтБУ,ТаблицаКорСубконто,ТипСуммы,ЕстьКоррСчета);
									КонецЕсли;
								КонецЦикла;	
							Иначе
								СуммаИтог=СуммаИтог+ЦиклПоКорСубконто(ИтБУ,ТаблицаКорСубконто,ТипСуммы,ЕстьКоррСчета);
							КонецЕсли;
						КонецЦикла;		
					Иначе
						СуммаИтог=СуммаИтог+ЦиклПоКорСубконто(ИтБУ,ТаблицаКорСубконто,ТипСуммы,ЕстьКоррСчета);
					КонецЕсли;
				КонецЦикла;
			Иначе
				СуммаИтог=СуммаИтог+ЦиклПоКорСубконто(ИтБУ,ТаблицаКорСубконто,ТипСуммы,ЕстьКоррСчета);
			КонецЕсли;	
				
				Если СуммаИтог<>0 тогда
					ТабИтогов.НоваяСтрока();
					ТабИтогов.ДатаНачПериода=ИтБУ.НачДата;
					ТабИтогов.Сумма=СуммаИтог; 
					ТабИтогов.Валюта=?(ВалютаВыгрузки="",ПолучитьВалютуВыгрузки(Объект.ВалютаБазовая),ВалютаВыгрузки);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ТабИтогов.КоличествоСтрок()=0 тогда
		Сообщить(СокрЛП(Объект.Код)+": "+СокрЛП(Объект.Наименование)+" -
		|в отборе по бухгалтерским данным нет ни одного значения.","i"); 
	КонецЕсли;
	
	Возврат ТабИтогов;
	
КонецФункции // ПолучитьБухИтогиПоОбъекту()

//******************************************************************************
//	ПолучитьОперИтогиПоОбъекту()
//
//	Параметры:
//	Объект (справочник "ФП_ВыгрузкаДанных") - элемент по которому будет 
//		производится расчет итогов.
//	ВалютаВыгрузки (справочник "Валюты") - валюта по которой рассчитываются итоги.
//
//	Возвращаемое значение:
//	Рассчитанная сумма.
//
//	Описание:
//  Формирует текст запроса к регистрам на основе данных 
//  справочника "ФП_ОтборДанных" по переданному Объекту
//  и затем выполняет его (запрос). На основе выполненного 
//  запроса рассчитавается сумма.

Функция ПолучитьОперИтогиПоОбъекту(Объект)
	
	Состояние("Рассчитывается - " + СокрЛП(Объект.Код) + " " + СокрЛП(Объект.Наименование));
	СправОтбора = СоздатьОбъект("Справочник.ФП_ОтборДанных");
	СправОтбора.ИспользоватьВладельца(Объект); 
	
	СправВалют  = СоздатьОбъект("Справочник.Валюты");
	СправВалют.ВыбратьЭлементы(0); 
	
	ТабИтогов=СоздатьОбъект("ТаблицаЗначений");
	ТабИтогов.НоваяКолонка("ДатаНачПериода");
	ТабИтогов.НоваяКолонка("Сумма");
	ТабИтогов.НоваяКолонка("Валюта");
	
	Если (ПустоеЗначение(Объект.ВалютаРасчетная) = 0) или (ПустоеЗначение(Объект.ВалютаБазовая)=0) тогда
		ЕстьВалюта=1;
	Иначе
		Сообщить("Для элемента отбора "+Объект.ПолноеНаименование()+"
		| не указана валюта выгрузки! Итоги не сформированы.","!");
		ЕстьВалюта=0;
	КонецЕсли;
	
	Пока ЕстьВалюта=1 цикл
		
		Если ПустоеЗначение(Объект.ВалютаРасчетная) = 0 тогда
			Если СправВалют.ПолучитьЭлемент()=1 тогда
				ВалютаВыгрузки=СправВалют.ТекущийЭлемент();
			Иначе
				ЕстьВалюта=0;
				Продолжить;
			КонецЕсли;
		Иначе
			ВалютаВыгрузки=ПолучитьВалютуВыгрузки(Объект.ВалютаБазовая);
			ЕстьВалюта=0;
		КонецЕсли;
		
		Запрос=СоздатьОбъект("Запрос");
		МДРегистр = МД.Регистр(СтрЗаменить(Объект.ВидОбъекта,"Регистр.",""));
		
		ТекстЗапроса="//{{ЗАПРОС(ОперативныеИтоги)";
		
		Если ПустоеЗначение(Объект.Статья) = 0 Тогда
			ТекстЗапроса = ТекстЗапроса + РС + "ПЕРИОД С НачИнтервала По КонИнтервала;";
		Иначе
			ТекстЗапроса = ТекстЗапроса + РС + "ПЕРИОД С НачИнтервала По НачИнтервала;";
		КонецЕсли;
		
		// Сформируем переменные запроса
		ТекстЗапроса = ТекстЗапроса + РС + "ТекущийДокумент=" + МДРегистр.ПолныйИдентификатор() + ".ТекущийДокумент;";
		
		// сформируем внутренние переменные запроса на основе структуры регистра содержащего 
		// рассчитываемые итоги
		Для Номер = 1 По МДРегистр.Измерение() Цикл
			ТекстЗапроса = ТекстЗапроса + РС + МДРегистр.Измерение(Номер).Идентификатор + "=" + МДРегистр.Измерение(Номер).ПолныйИдентификатор() + ";";
		КонецЦикла;
		
		Для Номер = 1 По МДРегистр.Ресурс() Цикл
			ТекстЗапроса = ТекстЗапроса + РС + МДРегистр.Ресурс(Номер).Идентификатор + "=" + МДРегистр.Ресурс(Номер).ПолныйИдентификатор() + ";";
		КонецЦикла;
		
		Для Номер = 1 По МДРегистр.Реквизит() Цикл
			ТекстЗапроса = ТекстЗапроса + РС + МДРегистр.Реквизит(Номер).Идентификатор + "=" + МДРегистр.Реквизит(Номер).ПолныйИдентификатор() + ";";
		КонецЦикла; 
		
		// сформируем условия запроса
		СпрОтбора = СоздатьОбъект("Справочник.ФП_ОтборДанных");
		СпрОтбора.ИспользоватьВладельца(Объект);
		СпрОтбора.ВыбратьЭлементы(1);
		Пока СпрОтбора.ПолучитьЭлемент() = 1 Цикл
			Если СпрОтбора.ПометкаУдаления() = 1 Тогда
				Продолжить;
			КонецЕсли;
			ТекстУсловийФильтра(ТекстЗапроса, СокрП(СпрОтбора.Атрибут), СокрП(СпрОтбора.Атрибут),,ТипЗначенияСтр(СпрОтбора.Значение));
		КонецЦикла;
		
		// добавим в условия запроса способ определения валюты итогов (для расчетных валют)
		Если ПустоеЗначение(Объект.ВалютаРасчетная) = 0 Тогда
			ТекстЗапроса = ТекстЗапроса + РС + "Условие (" + СокрП(Объект.ВалютаРасчетная) + "=ВалютаВыгрузки);";
		КонецЕсли; 
		
		// сформируем расчетные функции запроса по ресурсам
		Для Номер = 1 По МДРегистр.Ресурс() Цикл
			Если МДРегистр.ТипРегистра = "Остатки" Тогда
				Если Найти(Объект.СуммаФакт,"Приход__" + МДРегистр.Ресурс(Номер).Идентификатор) > 0 Тогда
					ТекстЗапроса = ТекстЗапроса + РС + "Функция Приход__" + МДРегистр.Ресурс(Номер).Идентификатор + "=Приход(" + МДРегистр.Ресурс(Номер).Идентификатор + ");";
				КонецЕсли;
				Если Найти(Объект.СуммаФакт,"Расход__" + МДРегистр.Ресурс(Номер).Идентификатор) > 0 Тогда
					ТекстЗапроса = ТекстЗапроса + РС + "Функция Расход__" + МДРегистр.Ресурс(Номер).Идентификатор + "=Расход(" + МДРегистр.Ресурс(Номер).Идентификатор + ");";
				КонецЕсли;
				Если Найти(Объект.СуммаФакт,"НачОст__" + МДРегистр.Ресурс(Номер).Идентификатор) > 0 Тогда
					ТекстЗапроса = ТекстЗапроса + РС + "Функция НачОст__" + МДРегистр.Ресурс(Номер).Идентификатор + "=НачОст(" + МДРегистр.Ресурс(Номер).Идентификатор + ");";
				КонецЕсли;
				Если Найти(Объект.СуммаФакт,"КонОст__" + МДРегистр.Ресурс(Номер).Идентификатор) > 0 Тогда
					ТекстЗапроса = ТекстЗапроса + РС + "Функция КонОст__" + МДРегистр.Ресурс(Номер).Идентификатор + "=КонОст(" + МДРегистр.Ресурс(Номер).Идентификатор + ");";
				КонецЕсли;
			Иначе
				Если Найти(Объект.СуммаФакт,"Сумма__" + МДРегистр.Ресурс(Номер).Идентификатор) > 0 Тогда
					ТекстЗапроса = ТекстЗапроса + РС + "Функция Сумма__" + МДРегистр.Ресурс(Номер).Идентификатор + "=Сумма(" + МДРегистр.Ресурс(Номер).Идентификатор + ");";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// сформируем расчетные функции запроса по реквизитам
		Для Номер = 1 По МДРегистр.Реквизит() Цикл
			Если Найти(Объект.СуммаФакт,"Сумма__" + МДРегистр.Реквизит(Номер).Идентификатор) > 0 Тогда
				ТекстЗапроса = ТекстЗапроса + РС + "Функция Сумма__" + МДРегистр.Реквизит(Номер).Идентификатор + "=Сумма(" + МДРегистр.Реквизит(Номер).Идентификатор + ");";
			КонецЕсли;
		КонецЦикла;
		
		ТекстЗапроса=ТекстЗапроса+РС+"Группировка День;";
		
		Если Запрос.Выполнить(ТекстЗапроса)=0 Тогда
			Предупреждение("Запрос по " + СокрЛП(Объект.Код) + " " + СокрЛП(Объект.Наименование) + " не выполнен!");
			Возврат 0;
		КонецЕсли;
		
		СледПериод=НачИнтервала;
		
		Пока Запрос.Группировка("День")=1 цикл 
			
			Стр=ГраницыПериода(ВариантБюджета, Запрос.День, СледПериод, );
			ТабИтогов.НоваяСтрока();
			ТабИтогов.ДатаНачПериода=СледПериод;
			ТабИтогов.Валюта=ВалютаВыгрузки;
			ТабИтогов.Сумма=Запрос.ПолучитьАтрибут(СокрЛП(Объект.СуммаФакт));
			
		КонецЦикла;
		
		ТабИтогов.Свернуть("ДатаНачПериода,Валюта","Сумма");
		
	КонецЦикла;
	
	Если ТабИтогов.КоличествоСтрок()=0 тогда
		Сообщить(СокрЛП(Объект.Код)+": "+СокрЛП(Объект.Наименование)+" -
		|в отборе по оперативным данным нет ни одного значения.","i"); 
	КонецЕсли;
	
	Возврат ТабИтогов; 
	
	
КонецФункции // ПолучитьОперИтогиПоОбъекту()

//******************************************************************************
//	ОткрытьФайлВыгрузки()
//
//	Вызывается из формул элементов диалога:
//	кнопка "Открыть"
//
//	Описание:
//  Открывает на просмотр сформированный файл выгрузки в конфигурацию 
//  "Финансовое планирование".

Процедура ОткрытьФайлВыгрузки()
	
	Если ПустаяСтрока(ИмяФайлаВыгрузки) = 1 Тогда
		Предупреждение("Укажите имя файла выгрузки!");
	ИначеЕсли ФС.СуществуетФайл(ИмяФайлаВыгрузки) = 0 Тогда
		Предупреждение("Указанный файл выгрузки не существует!");
	Иначе
		ЗапуститьПриложение(ИмяФайлаВыгрузки);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФайлВыгрузки()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Процедура ИнициализацияВыгрузки()

	
	гСчетчикВыгруженныхОбъектов				=	0;
	
	ТабВыгруженныхОбъектов					=	СоздатьОбъект("ТаблицаЗначений");
	ТабВыгруженныхОбъектов.НоваяКолонка("ИдПравила",	"Строка");
	ТабВыгруженныхОбъектов.НоваяКолонка("ТабОбъектов",	"ТаблицаЗначений");
	
	гТабКэшРеквизитовЗначений.УдалитьСтроки();
	гТабКэшРеквизитов.УдалитьСтроки();
	гТабКэшПравил.УдалитьСтроки();
	гТабКэшПараметровЗагрузки.УдалитьСтроки();
	УстановитьПараметрыПоУмолчанию();

	ПравилаОбмена							=	гПравила.ВыбратьУзел("ПравилаОбмена");                                                                                  
	
	гФайлДанных								=	гXMLАнализатор.СоздатьПоследовательноЗаписываемыйДокумент();
	гФайлДанных.ИмяФайла					=	ФормИмяФайлаДанных;
	
	АтрибутыЭлемента						=	гФайлДанных.АтрибутыЭлемента;
	АтрибутыЭлемента.УстановитьАтрибут("ВерсияФормата",				"1.0");
	АтрибутыЭлемента.УстановитьАтрибут("ИдКонфигурацииПриемника",	ПравилаОбмена.ПолучитьАтрибут("ИдКонфигурацииПриемника"),	0);
	АтрибутыЭлемента.УстановитьАтрибут("ИдПравилКонвертации",		ПравилаОбмена.ПолучитьАтрибут("Ид"), 						0);
	АтрибутыЭлемента.УстановитьАтрибут("ДатаНачала",				ПолучитьИдОбъектаИсточника(НачИнтервала)  );
	АтрибутыЭлемента.УстановитьАтрибут("ДатаОкончания",				ПолучитьИдОбъектаИсточника(КонИнтервала)  );
	
	гФайлДанных.ОткрытьЭлемент("ФайлОбмена");
	                 	
	гФайлДанных.ВключитьЭлемент(ПравилаОбмена);
	гФайлДанных.Сбросить();	
	
КонецПроцедуры		//	ВыгрузитьНаборДанных()

//******************************************************************************
//	Сформировать()
//
//	Вызывается из формул элементов диалога:
//	кнопка "Сформировать"
//
//	Описание:
//  Инициализирует весь процесс расчета итогов (бухгалтерских и оперативных)
//  по данным справочников "ФП_ВыгрузкаДанных" и "ФП_ОтборДанных".
//  В случае если итоги рассчитались успешно создается файл выгрузки,
//  Который можно загрузить стандартным механизмом "Загрузка данных"
//  в конфигурацию "Финансовое планирование".

Процедура Сформировать()
	
	Перем НачЦикла;
	
	Если ПустоеЗначение(ВариантБюджета) = 1 Тогда
		Предупреждение("Не выбран вариант бюджета!");
		Возврат;
	КонецЕсли; 
	
	Если (ВыгрузитьТекст+ВыгрузитьXML)=0 тогда
		Предупреждение("Не выбран способ выгрузки!");
		Возврат;
	КонецЕсли;
		
	Если ВыгрузитьXML=1 тогда		
		Если НачальнаяИнициализация()=0 Тогда Возврат КонецЕсли;
	КонецЕсли;	
	
	Если Метаданные.ПланСчетов()>0 тогда
		
		Если КонецРассчитанногоПериодаБИ()<КонИнтервала тогда
			Предупреждение("За данный период бухгалтерские итоги не рассчитаны!");
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Метаданные.Регистр()>0 тогда
		Если ПолучитьДатуТА()<КонИнтервала тогда
			Предупреждение("Невозможно обращение к итогам после точки актуальности!");
			Возврат;
		КонецЕсли;	
	Иначе
		Предупреждение("В конфигурации нет источников для выгрузки!");
		Возврат;
	КонецЕсли; 
	
	Если ВыгрузитьXML=1 тогда
		ИнициализацияВыгрузки();
	КонецЕсли;
	
	ТекстВыгрузки = СоздатьОбъект("Текст");
	ТекстВыгрузки.ДобавитьСтроку("""ФорматФайла=1"",""РазделительСтрок="+СтрРазделительСтрок+"""");
	
	ТаблицаВыгрузки = СоздатьОбъект("ТаблицаЗначений");
	СпрВыгрузки = СоздатьОбъект("Справочник.ФП_ВыгрузкаДанных");
	МДВыгрузка = МД.Справочник("ФП_ВыгрузкаДанных");
	
	СписокВыгруженныхСписков = СоздатьОбъект("СписокЗначений");
	
	// Сумма - сумма итогов по варианту выгрузки
	ТаблицаВыгрузки.НоваяКолонка("Сумма","Число",15,2,"Итоги");
	// Валюта документа выгрузки итогов
	ТаблицаВыгрузки.НоваяКолонка("Валюта","Справочник.Валюты",,,"Валюта",5);
	// ТипИтогов - для остатков 1, для оборотов 0
	ТаблицаВыгрузки.НоваяКолонка("ТипИтогов","Число",1,,); 
	ТаблицаВыгрузки.НоваяКолонка("ДатаСуммы","Дата",,,); 
	
	ТаблицаВыгрузки.НоваяКолонка("Код","Строка",МДВыгрузка.ДлинаКода,,"Код");
	ТаблицаВыгрузки.НоваяКолонка("Наименование","Строка",МДВыгрузка.ДлинаНаименования,,"Наименование");
	Для Номер = 1 По МДВыгрузка.Реквизит() Цикл 
		МДРеквизит = МДВыгрузка.Реквизит(Номер);
		ТаблицаВыгрузки.НоваяКолонка(МДРеквизит.Идентификатор,МДРеквизит.Тип,МДРеквизит.Длина,МДРеквизит.Точность,МДРеквизит.Представление(),15);
	КонецЦикла;
	
	Если ОбъектВыгрузки.Выбран() = 1 тогда
		
		Если ОбъектВыгрузки.ЭтоГруппа() = 1 Тогда
			СпрВыгрузки.ИспользоватьРодителя(ОбъектВыгрузки);
			СпрВыгрузки.ВыбратьЭлементы(1);
			Пока СпрВыгрузки.ПолучитьЭлемент()=1 цикл 
				
				Если СпрВыгрузки.ТекущийЭлемент().ЭтоГруппа()=1 тогда
					Продолжить;
				КонецЕсли;
				
				СписокФильтров = СоздатьОбъект("СписокЗначений");
				Коэффициент    = СпрВыгрузки.ТекущийЭлемент().Коэффициент;
				
				Если Найти(СпрВыгрузки.ТекущийЭлемент().ВидОбъекта,"Регистр")>0 тогда
					ТабИтогов=ПолучитьОперИтогиПоОбъекту(СпрВыгрузки.ТекущийЭлемент());
				Иначе 
					ТабИтогов=ПолучитьБухИтогиПоОбъекту(СпрВыгрузки.ТекущийЭлемент());
				КонецЕсли; 
				
				СписокФильтров = 0;
				
				Если ТабИтогов.КоличествоСтрок()>0 Тогда 
					ТабИтогов.ВыбратьСтроки();
					Пока ТабИтогов.ПолучитьСтроку()=1 цикл
						ТаблицаВыгрузки.НоваяСтрока();
						ТаблицаВыгрузки.Код          = СпрВыгрузки.Код;
						ТаблицаВыгрузки.Наименование = СпрВыгрузки.Наименование;
						ТаблицаВыгрузки.ТипИтогов    = ПустоеЗначение(СпрВыгрузки.Статья);
						ТаблицаВыгрузки.Валюта       = ТабИтогов.Валюта;
						ТаблицаВыгрузки.Сумма        = ТабИтогов.Сумма*Коэффициент; 
						ТаблицаВыгрузки.ДатаСуммы    = ТабИтогов.ДатаНачПериода;
						
						Для Номер = 1 По МДВыгрузка.Реквизит() Цикл 
							МДРеквизит = МДВыгрузка.Реквизит(Номер);
							ТаблицаВыгрузки.УстановитьЗначение(ТаблицаВыгрузки.КоличествоСтрок(),МДРеквизит.Идентификатор,
							СпрВыгрузки.ПолучитьАтрибут(МДРеквизит.Идентификатор));
						КонецЦикла; 
					КонецЦикла;
					
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе 
			СпрВыгрузки.НайтиЭлемент(ОбъектВыгрузки);
			СписокФильтров = СоздатьОбъект("СписокЗначений");
			Коэффициент    = СпрВыгрузки.ТекущийЭлемент().Коэффициент;
			
			Если Найти(СпрВыгрузки.ТекущийЭлемент().ВидОбъекта,"Регистр")>0 тогда
				ТабИтогов=ПолучитьОперИтогиПоОбъекту(СпрВыгрузки.ТекущийЭлемент());
			Иначе 
				ТабИтогов=ПолучитьБухИтогиПоОбъекту(СпрВыгрузки.ТекущийЭлемент());
			КонецЕсли;  
			
			СписокФильтров = 0;
			
			Если (ТабИтогов.КоличествоСтрок()>0)  Тогда // и (ПустоеЗначение(ВалютаВыгрузки) = 0)
				ТабИтогов.ВыбратьСтроки();
				Пока ТабИтогов.ПолучитьСтроку()=1 цикл
					ТаблицаВыгрузки.НоваяСтрока();
					ТаблицаВыгрузки.Код          = СпрВыгрузки.Код;
					ТаблицаВыгрузки.Наименование = СпрВыгрузки.Наименование;
					ТаблицаВыгрузки.ТипИтогов    = ПустоеЗначение(СпрВыгрузки.Статья);
					ТаблицаВыгрузки.Валюта       = ТабИтогов.Валюта;
					ТаблицаВыгрузки.Сумма        = ТабИтогов.Сумма*Коэффициент; 
					ТаблицаВыгрузки.ДатаСуммы    = ТабИтогов.ДатаНачПериода;
					
					Для Номер = 1 По МДВыгрузка.Реквизит() Цикл 
						МДРеквизит = МДВыгрузка.Реквизит(Номер);
						ТаблицаВыгрузки.УстановитьЗначение(ТаблицаВыгрузки.КоличествоСтрок(),МДРеквизит.Идентификатор,
						СпрВыгрузки.ПолучитьАтрибут(МДРеквизит.Идентификатор));
					КонецЦикла; 
				КонецЦикла;
				
				
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		СпрВыгрузки.ВыбратьЭлементы(0); 
		Пока СпрВыгрузки.ПолучитьЭлемент()=1 цикл 
			
			Если СпрВыгрузки.ТекущийЭлемент().ЭтоГруппа()=1 тогда
				Продолжить;
			КонецЕсли;
			
			СписокФильтров = СоздатьОбъект("СписокЗначений");
			Коэффициент    = СпрВыгрузки.ТекущийЭлемент().Коэффициент;
			
			Если Найти(СпрВыгрузки.ТекущийЭлемент().ВидОбъекта,"Регистр")>0 тогда
				ТабИтогов=ПолучитьОперИтогиПоОбъекту(СпрВыгрузки.ТекущийЭлемент());
			Иначе 
				ТабИтогов=ПолучитьБухИтогиПоОбъекту(СпрВыгрузки.ТекущийЭлемент());
			КонецЕсли;  
			
			
			СписокФильтров = 0;
			
			Если (ТабИтогов.КоличествоСтрок()>0)  Тогда // и (ПустоеЗначение(ВалютаВыгрузки) = 0)
				ТабИтогов.ВыбратьСтроки();
				Пока ТабИтогов.ПолучитьСтроку()=1 цикл
					ТаблицаВыгрузки.НоваяСтрока();
					ТаблицаВыгрузки.Код          = СпрВыгрузки.Код;
					ТаблицаВыгрузки.Наименование = СпрВыгрузки.Наименование;
					ТаблицаВыгрузки.ТипИтогов    = ПустоеЗначение(СпрВыгрузки.Статья);
					ТаблицаВыгрузки.Валюта       = ТабИтогов.Валюта;
					ТаблицаВыгрузки.Сумма        = ТабИтогов.Сумма*Коэффициент; 
					ТаблицаВыгрузки.ДатаСуммы    = ТабИтогов.ДатаНачПериода;
					
					Для Номер = 1 По МДВыгрузка.Реквизит() Цикл 
						МДРеквизит = МДВыгрузка.Реквизит(Номер);
						ТаблицаВыгрузки.УстановитьЗначение(ТаблицаВыгрузки.КоличествоСтрок(),МДРеквизит.Идентификатор,
						СпрВыгрузки.ПолучитьАтрибут(МДРеквизит.Идентификатор));
					КонецЦикла; 
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;
	
	ТаблицаВыгрузки.Свернуть("ДатаСуммы,Валюта,ТипИтогов,Показатель,Статья,ПоказательДебет,ПоказательКредит,Подразделение,Проект,Примечание","Сумма");
	ТаблицаВыгрузки.Сортировать("ДатаСуммы+");
	Таблица = СоздатьОбъект("ТаблицаЗначений");
	Таблица.Загрузить(ТаблицаВыгрузки);
	Таблица.Свернуть("Валюта,ТипИтогов","Сумма");
	Таблица.ВыбратьСтроки();
	
	// Выгружаем документы в конфигурацию "Финансовое планирование"
	Пока Таблица.ПолучитьСтроку() = 1 Цикл
		
		Если Таблица.ТипИтогов = 1 Тогда
			Состояние("Выгружаются остатки");
			Документ_Остатки(ТаблицаВыгрузки, Таблица.Валюта);
		КонецЕсли;
		
		Если Таблица.ТипИтогов = 0 Тогда
			Состояние("Выгружаются обороты");
			Документ_Обороты(ТаблицаВыгрузки, Таблица.Валюта); 
		КонецЕсли;
		
	КонецЦикла;
	
	
	Если ТаблицаВыгрузки.КоличествоСтрок() > 0 Тогда
		ТекстВыгрузки.Записать(ИмяФайлаВыгрузки);
	КонецЕсли; 
	
	                
	//---------------------------------------------------------------------
	
	Если ВыгрузитьXML=1 тогда	
		гФайлДанных.ЗакрытьЭлемент();
		гФайлДанных.Сбросить();
		гФайлДанных.Завершить(); 
	КонецЕсли;	
	
	//гФлагВыгрузкаПроизведена	=	1;

	Предупреждение("Выгрузка данных завершена!");
	
КонецПроцедуры //Сформировать()

//******************************************************************************
//	Предопределенная процедура

Процедура ПриОткрытии() 
	
	СправФП=СоздатьОбъект("Справочник.ФП_Справочники");
	Если СправФП.НайтиПоНаименованию("Варианты Бюджетов") = 0 Тогда
		Предупреждение("Не загружены справочники из конфигурации ""Финансовое планирование""!");
		Возврат;
	КонецЕсли; 
	
	СправФП.ИспользоватьРодителя(СправФП.ТекущийЭлемент());
	СправФП.ВыбратьЭлементы();
	
	Если СправФП.ПолучитьЭлемент() = 1 Тогда
		ВариантБюджета = СправФП.ТекущийЭлемент();
		ГраницыЦикла(ВариантБюджета, РабочаяДата(), НачИнтервала, КонИнтервала);
	КонецЕсли;
	
	Если (Метаданные.РазделительУчета.Выбран() = 1)  Тогда
		Форма.РазделительУчетаБух.НазначитьТип(Метаданные.РазделительУчета);
	Иначе
		Форма.РазделительУчетаБух.Видимость(0);
		Форма.ОчиститьБух.Видимость(0);
		Форма.ТекстРУБух.Видимость(0);
	КонецЕсли;
	              	
КонецПроцедуры // ПриОткрытии 

//******************************************************************************
//	Предопределенная процедура

Процедура ПриНачалеВыбораЗначения(ЭлементДиалога, ФлагПродолжения)
	
	Перем Каталог,Фильтр;
	
	Если ЭлементДиалога = "ИмяФайлаВыгрузки" Тогда
		Если ФС.ВыбратьФайл(0, ИмяФайлаВыгрузки, Каталог, "Файл выгрузки", "Текстовые (*.txt)|*.txt", "txt") = 1 Тогда
			ИмяФайлаВыгрузки = Каталог+ИмяФайлаВыгрузки;
		КонецЕсли;
		
	ИначеЕсли (ЭлементДиалога = "ВариантБюджета") Тогда
		ОткрытьФорму("Справочник.ФП_Справочники.ВариантыБюджетов");
		ФлагПродолжения = 0;
	КонецЕсли;
	
	Если ЭлементДиалога = "ФормИмяФайлаДанных"	Тогда
	         
		ВыборФайла(ФормИмяФайлаДанных, "xml");
		
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************

МД = Метаданные;
РС = РазделительСтрок;

ДатаВыгрузки  = РабочаяДата();
ИмяФайлаВыгрузки = КаталогИБ()+"1sbtrans.txt";
ФормИмяФайлаДанных = КаталогИБ()	+	"DAcTr_Fp.xml";

СтрРазделительСтрок = "_НОВАЯ_СТРОКА_";
