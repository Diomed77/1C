Перем Конт; 
Перем ПереданДок,Таб,МыПечатаем;	
Перем ПроцНДСуслуг;

Перем СписокВидовРегистров; 
Перем СитуацииПроводок; 
Перем ОписательПроводок; 
Перем ТаблицаПроводок; 
Перем ТаблицаОпераций; 
Перем СписокДопПараметров; 
Перем Периодичность;
Перем Период, Кодировка;
Перем ПланСчетов;
Перем СчетДебета;
Перем СчетКредита;
Перем ТекДок;
Перем ДатаДок;
Перем ФирмаДок;
Перем АвторДок;
Перем ОснованиеДок;
Перем ТипУчетаДок;
Перем ФинУчетДок;
Перем КомментарийДок;
Перем ПриходРег;
Перем РасходРег;
Перем ФирмаРег;
Перем ТоварРег;
Перем СтатусРег;
Перем КонтрагентРег;
Перем ПоставщикРег;
Перем ПоставкаРег;
Перем ПрихДокументРег;
Перем ОстатокТовараРег;
Перем СтоимостьРег;
Перем ПродСтоимостьРег;
Перем НДСРег;
Перем СтоимостьНПРег;
Перем ОборотРег;
Перем НДСприходаРег;
Перем НДСрасходаРег;
Перем НПРег;
Перем КодОперацииРег;
Перем СубкДеб1;
Перем СубкДеб2;
Перем СубкДеб3;
Перем СубкКред1;
Перем СубкКред2;
Перем СубкКред3;
Перем СтавкаНДСРег;
Перем ВидУчетаНДСРег;
Перем ОблагаемаяБазаНДСРег;
Перем КлиентРег;
Перем ДоговорРег;
Перем СтавкаНПРег;
Перем ПоставщикКоммРег;
Перем ДоговорКоммРег;
Перем ВидОтгрузкиРег;
Перем КредДокументРег;
Перем ДолгРег;
Перем НеоплачСтоимостьРег;
Перем ОблагаемаяБазаНПРег;
Перем КомитентРег;
Перем ДоговорКомитентаРег;
Перем ДокПередачиРег;
Перем ВзаимозачетСРег;
Перем НДСУслугиРег;
Перем ВалютаДок;
Перем ВидОплатыДок;
Перем ДоговорДок;
Перем ДокументОснованиеДок;
Перем КлиентДок;
Перем КодКоррСчетаДок;
Перем ПриложениеДок;
Перем ПринятоОтДок;
Перем РежимОплатыДок;
Перем СтавкаНДСДок;
Перем СтавкаНПДок;
Перем СуммаДок;
Перем СкладДок;
Перем СкладПолучательДок;
Перем ТоварДок;
Перем КоличествоДок;
Перем ЕдиницаДок;
Перем КоэффициентДок;
Перем СписСписковВыгрОбъектов; 	// список, содержыт списки выгруженных объектов
Перем ТекстВыгрузкиДанных;		// текст, в который производится выгрузка
Перем СтрРазделительСтрок;		// строка, подменяющая симовл-разделитель строк
Перем СтрСодержаниеОперации;	// строка, Содержание Операции
Перем СкладРег;         
//---------------------
Перем ВыгружатьКнигуПродаж;
Перем ВыгружатьКнигуПокупок;
Перем ВыгружатьКассовуюКнигу;
//---------------------
Перем ТаблицаНДСприобретенныхТоваров;
Перем ТаблицаКнигиПродаж;
Перем ТаблицаКнигиПокупок;
//---------------------

Процедура ВыгрузитьОбъектСпособом(Объект, Способ, Ссылка="") Далее
Функция Выгрузить(Объект, Способ="") Далее 
Процедура ПечатьОперации(Операция) Далее
Процедура ВыгрузитьПроводки() Далее 
Процедура ВыгрузитьЗаписьКнигиПродаж(Запись, Ссылка) Далее
Процедура ВыгрузитьЗаписьКнигиПокупок(Запись, Ссылка) Далее
Процедура ВыгрузитьКассовыйОрдер(Ордер, Ссылка) Далее
//******************************************************************************
Функция ВозвратитьСтавкуНДСпоТовару(Товар)
	//
	// Параметры:
	// Товар - объект для считывания ставка НДС  
	//
	// Описание: функция возвращает строковое значение ставкиНДС. 
	Если Товар.СтавкаНДС=Перечисление.ЗначенияНДС.ОсновнаяСтавкаНДС Тогда
		Возврат 20;
	ИначеЕсли Товар.СтавкаНДС=Перечисление.ЗначенияНДС.ЛьготнаяСтавкаНДС Тогда
		Возврат 10;
	ИначеЕсли Товар.СтавкаНДС=Перечисление.ЗначенияНДС.безНДС Тогда
		Возврат "";
	КонецЕсли;      
КонецФункции	
//******************************************************************************
// Функция СубСчет41(Склад)
//
// Параметры:
// Склад - Элемент справочника "МестаХранения"
//
// Описание: функция возвращает строковое значение субсчета 41-го счета: "2" - если 
// тип склада, переданного в качестве параметра - "Бар" (т.е. розница), иначе - "1"
Функция СубСчет41(Склад)
	Скл=СоздатьОбъект("Справочник.МестаХранения");
	Скл.НайтиЭлемент(Склад);
	Если Скл.ТекущийЭлемент().ТипСклада=Перечисление.ТипыСкладов.Бар Тогда
		ССч="2"
	Иначе
		ССч="1"
	КонецЕсли;
	Возврат ССч;
КонецФункции //СубСч41(Склад)
//******************************************************************************
// Функция ИздержкиОбращения(ТипИздержкиОбращения)
// 
// Параметры:
// ТипИздержкиОбращения - строка с идентификатором значения перечисления СтатьиИздержек
//
// Описание: функция определяет по переданному параметру значение перечисления СтатьиИздержек и
// возвращает значение перечисления СтатьиИздержек
Функция ИздержкиОбращения(ТипИздержкиОбращения)
	Если ПустоеЗначение(ТипИздержкиОбращения)=1 Тогда
		ТипИздержкиОбращения="Прочие";
	КонецЕсли;
	
	СтатьяИздержек=Перечисление.СтатьиИздержек.ЗначениеПоИдентификатору(ТипИздержкиОбращения);
	
	Если ПустоеЗначение(СтатьяИздержек)=1 Тогда
		Сообщить("не определена статья издержек!");
		Возврат "";
	КонецЕсли;
	
	Возврат СтатьяИздержек;
КонецФункции

//******************************************************************************
// Функция ПолучитьСпособСубконто(ВидСубконто)
// 
// Параметры:
// ВидСубконто - строковое представление вида субконто Плана счетов 1С:Бухгалтерии 7.7  Ред.4.0
//
// Описание: функция определяет по переданным параметрам строковое значение 
// вида субконто Плана счетов 1С:Бухгалтерии 7.7  Ред.4.0 и
// возвращает найденное строковое значение
Функция ПолучитьСпособСубконто(ВидСубконто,Субконто)
	Если ВидСубконто="ПлатежиВБюджет" Тогда	
		Возврат "";	
	ИначеЕсли ВидСубконто="ПрибылиИУбытки" Тогда	
		Возврат "";	                            
	ИначеЕсли ВидСубконто="ВидыРасчетовСПокупателями" Тогда	
		Возврат "";	
	ИначеЕсли ВидСубконто="ВидыПлатежейВБюджет" Тогда	
		Возврат "";	
	ИначеЕсли ВидСубконто="Договоры" Тогда	
		Если ПустоеЗначение(Субконто)=1 Тогда
			Субконто="";
			Возврат "";
		Иначе	
			Возврат ВидСубконто;	
		КонецЕсли;
	Иначе	
		Возврат ВидСубконто;	
	КонецЕсли;
	
КонецФункции

//******************************************************************************
// Функция ПолучитьКодСубконто7_7(Счет,НомерСубконто)
// 
// Параметры:
// Счет - строковое представление кода счета плана счетов 1С:Бухгалтерии 7.7  Ред.4.0
// НомерСубконто - число, номер субконто счета 1С:Бухгалтерии 7.7  Ред.4.0
//
// Описание: функция определяет по переданным параметрам строковое значение 
// вида субконто Плана счетов 1С:Бухгалтерии 7.7  Ред.4.0 и
// возвращает найденное строковое значение
Функция ПолучитьКодСубконто7_7(Счет,НомерСубконто)
	
	// Описание используемого Плана счетов 1С:Бухгалтерии 7.7  Ред.4.0
	Если Счет="" Тогда
		Возврат "";
	КонецЕсли;
	Если Счет="00" Тогда
		Возврат "";
	КонецЕсли;
	
	Если Счет="004" Тогда
		Если НомерСубконто=1 Тогда
			Возврат "Номенклатура";
		ИначеЕсли НомерСубконто=2 Тогда
			Возврат "Контрагенты";
		Иначе
			Возврат "Договоры";
		КонецЕсли;
	КонецЕсли;
	Если Лев(Счет,2)="19" Тогда
		Если НомерСубконто=1 Тогда
			Если Счет="19.5" Тогда
				Возврат "";
			Иначе
				Возврат "Контрагенты";
			КонецЕсли;
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли; 
	//-- 20-й счет для проводок по общепиту -----
	Если Счет="20" Тогда
		Если НомерСубконто=1 Тогда
			Возврат "ВидыНоменклатуры";
		ИначеЕсли НомерСубконто=2 Тогда
			Возврат "СтатьиЗатратНаПроизводство";
		Иначе
			Возврат "Подразделения";
		КонецЕсли;
	КонецЕсли;
	//------------------------
	Если (Лев(Счет,2)="41") И (Счет<>"41.5") Тогда
		Если НомерСубконто=1 Тогда
			Возврат "Номенклатура";
		ИначеЕсли НомерСубконто=2 Тогда
			Возврат "МестаХранения";
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	Если (Счет="41.5") Тогда
		Если НомерСубконто=1 Тогда
			Возврат "Номенклатура";
		ИначеЕсли НомерСубконто=2 Тогда
			Возврат "Контрагенты";
		Иначе
			Возврат "Договоры";
		КонецЕсли;
	КонецЕсли;
	Если Лев(Счет,2)="42" Тогда
		Возврат "";
	КонецЕсли;
	Если Счет="44.1.1" Тогда
		Если НомерСубконто=1 Тогда
			Возврат "СтатьиИздержекОбращения";
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	Если Счет="45" Тогда
		Если НомерСубконто=1 Тогда
			Возврат "Контрагенты";
		ИначеЕсли НомерСубконто=2 Тогда
			Возврат "Договоры";
		Иначе
			Возврат "Номенклатура";
		КонецЕсли;
	КонецЕсли;
	Если Счет="50.1" Тогда
		Если НомерСубконто=1 Тогда
			Возврат "ДвиженияДенежныхСредств";
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	Если Счет="51" Тогда
		Если НомерСубконто=1 Тогда
			Возврат "БанковскиеСчета";
		ИначеЕсли НомерСубконто=2 Тогда
			Возврат "ДвиженияДенежныхСредств";
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	Если Лев(Счет,2)="60" Тогда
		Если НомерСубконто=1 Тогда
			Возврат "Контрагенты";
		ИначеЕсли НомерСубконто=2 Тогда
			Возврат "Договоры";
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	Если Лев(Счет,2)="62" Тогда
		Если НомерСубконто=1 Тогда
			Возврат "Контрагенты";
		ИначеЕсли НомерСубконто=2 Тогда
			Возврат "Договоры";
		Иначе
			Если (Счет="62.1") ИЛИ (Счет="62.3") ИЛИ (Счет="62.11") Тогда
				Возврат "ВидыРасчетовСПокупателями";
			Иначе
				Возврат "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Лев(Счет,2)="68" Тогда
		Если НомерСубконто=2 Тогда
			Если (Счет="68.4") Тогда
				Возврат "Бюджеты";
			Иначе
				Возврат "";
			КонецЕсли; 
		ИначеЕсли НомерСубконто=1 Тогда
			Возврат "ВидыПлатежейВБюджет";
		Иначе
			Возврат "";
		КонецЕсли;
		//
	КонецЕсли;
	Если Лев(Счет,2)="76" Тогда
		Если НомерСубконто=1 Тогда
			Если (Счет="76.1") ИЛИ (Счет="76.2") ИЛИ (Счет="76.3") ИЛИ (Счет="76.5") 
			ИЛИ (Счет="76.11") ИЛИ (Счет="76.22") ИЛИ (Счет="76.55") ИЛИ (Счет="76.АВ") Тогда
				Возврат "Контрагенты";
			ИначеЕсли (Счет="76.4") Тогда
				Возврат "Сотрудники";
			ИначеЕсли ((Счет="76.Н.1") или (Счет="76.Н.2") или (Счет="76.Н.3") или (Счет="76.Н.4")) Тогда
				Возврат "Контрагенты";
			КонецЕсли;
		ИначеЕсли НомерСубконто=2 Тогда
			Если (Счет="76.1") ИЛИ (Счет="76.2") ИЛИ (Счет="76.5") 
			ИЛИ (Счет="76.11") ИЛИ (Счет="76.22") ИЛИ (Счет="76.55") ИЛИ (Счет="76.Н.4") Тогда
				Возврат "Договоры";
			Иначе
				Возврат "";
			КонецЕсли;
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	Если Лев(Счет,2)="90" Тогда
		Если НомерСубконто=1 Тогда                                                                
			Возврат "ВидыНоменклатуры";                                     
		ИначеЕсли НомерСубконто=2 Тогда
			Если Счет="90.3" Тогда
				Возврат "СтавкиНДС";
			ИначеЕсли Счет="90.6" Тогда 
				Возврат "СтавкиНП";
			ИначеЕсли Счет="90.1.1" Тогда
				Возврат "СтавкиНДС";
			КонецЕсли; 
		ИначеЕсли НомерСубконто=3 Тогда	 
			Если Счет="90.1.1" Тогда
				Возврат "СтавкиНП";
			КонецЕсли;	
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;             
	Если (Счет="91.1") или (Счет="91.2") Тогда
		Если НомерСубконто=1 Тогда
			Возврат "ПрочиеДоходыИРасходы";
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	Если Счет="94" Тогда
		Возврат "";
	КонецЕсли;
	Если Счет="99" Тогда
		Если НомерСубконто=1 Тогда
			Возврат "ПрибылиИУбытки";
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	Если Счет="ПС" Тогда
		Если НомерСубконто=1 Тогда
			Возврат "Контрагенты";
		ИначеЕсли НомерСубконто=2 Тогда
			Возврат "Договоры";
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	Возврат "";
КонецФункции

//******************************************************************************
// Функция СубкКред2_ПоКоду_2()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкКред2 для
//   формируемой бух. проводки по коду 2 "Поступл. тов. на склад"
//   в ситуации ПоРегПартииТоваров
//                         ЗакупкаТовара
Функция СубкКред2_ПоКоду_2()
	//Договор=глДоговорДок(ТекДок);
	Возврат КлиентДок(ТекДок);
КонецФункции                                                                    
//******************************************************************************
// Функция Сумма_ПоКоду_35()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 35 "Зачтен НП аванса"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         СторнированиеАванса
//                         ОтгрузкаОплаченногоТовараКупленного
//                         ОтгрузкаОплаченногоТовараПринятого
//                         ВыполнениеОплаченнойУслуги
Функция Сумма_ПоКоду_35()
	//Если НЕ(Константа.ВыделятьНПсАванса=Да) Тогда
	//    Возврат 0;
	//КонецЕсли;
	Если КлиентРег.Вид()="ККМ" Тогда
		// в случае розницы проводку не делаем
		Возврат 0;
	КонецЕсли;
	//Если КодОперацииРег=СторнированиеАванса Тогда
	//	// запоминаем, что зачли аванс при сторнировании
	//Иначе
	//	Если ПустоеЗначение(СписокДопПараметров.Получить("ЗачлиАванс"))=0 Тогда
	//		Возврат 0;
	//	КонецЕсли;
	//КонецЕсли;
	Если КредДокументРег.Вид()="ПриходнаяНакладная" Тогда
		Возврат 0;  // отгрузка товара в счет ранее возвращенного
	КонецЕсли; 
	Если КредДокументРег.Вид()="ПриходныйОрдерТБ" Тогда 
		Если КредДокументРег.ТекущийДокумент().СтавкаНП>0 Тогда	
			УчСтавкаНП=КредДокументРег.ТекущийДокумент().СтавкаНП;
		Иначе
			УчСтавкаНП=0; 
		КонецЕсли;
	КонецЕсли;
	ПроцСтавкаНП=УчСтавкаНП;
	СуммаНП=(ДолгРег*ПроцСтавкаНП)/(100+ПроцСтавкаНП);
	Возврат СуммаНП;
КонецФункции
//******************************************************************************
// Функция СубкДеб2_ПоКоду_37()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкДеб2 для
//   формируемой бух. проводки по коду 37 "Зачт.предопл.покупателя"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ОтгрузкаОплаченногоТовараКупленного
//                         ВыполнениеОплаченнойУслуги
Функция СубкДеб2_ПоКоду_37()
	Если ПустоеЗначение(СписокДопПараметров.Получить("ЗачлиАванс"))=0 Тогда
		//ДоговорАванса=СписокДопПараметров.Получить("ДоговорАванса");
		Возврат КлиентРег;
	Иначе
		Возврат КлиентРег;
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция СубкКред2_ПоКоду_37()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкКред2 для
//   формируемой бух. проводки по коду 37 "Зачт.предопл.покупателя"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ОтгрузкаОплаченногоТовараКупленного
//                         ВыполнениеОплаченнойУслуги
Функция СубкКред2_ПоКоду_37()
	//Договор=глДоговорДок(ТекДок);
	Возврат КлиентДок(ТекДок);
КонецФункции
//******************************************************************************
// Функция СубкКред3_ПоКоду_37()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкКред3 для
//   формируемой бух. проводки по коду 37 "Зачт.предопл.покупателя"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ОтгрузкаОплаченногоТовараКупленного
//                         ВыполнениеОплаченнойУслуги
Функция СубкКред3_ПоКоду_37()
	Если КодОперацииРег=ОтгрузкаОплаченногоТовараКупленного Тогда
		Возврат "РасчетыЗаТовары";
	Иначе
		Возврат  "РасчетыЗаПродукциюРаботыУслуги";
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_37()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 37 "Зачт.предопл.покупателя"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ОтгрузкаОплаченногоТовараКупленного
//                         ВыполнениеОплаченнойУслуги
Функция Сумма_ПоКоду_37()
	//Если КредДокументРег.Вид()="МарочныйОтчет" Тогда
	//// в случае розницы проводку не делаем
	//  Возврат 0;
	//КонецЕсли;
	Если КредДокументРег.Вид()="ПриходнаяНакладная" Тогда
		Возврат 0;  // отгрузка товара в счет ранее возвращенного
	КонецЕсли;
	СписокДопПараметров.УдалитьВсе();
	Возврат ДолгРег;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_41()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 41 "Выделен НДС с предоплаты (по оплате)"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ОтгрузкаОплаченногоТовараКупленного
//                         ВыполнениеОплаченнойУслуги
Функция Сумма_ПоКоду_41()
	Если КлиентРег.Вид()="ККМ" Тогда
		// в случае розницы проводку не делаем
		Возврат 0;
	КонецЕсли;
	Если НЕ(ФирмаДок.МетодОпределенияВыручки.Получить(ДатаДок) =     Перечисление.МетодыОпределенияВыручки.ПоОплате) Тогда
		// в этом случае проводку не делаем
		Возврат 0;
	КонецЕсли;
	ПроцНДС = ПроцентНДС(СтавкаНДСРег);
	УчСтавкаНП=0; 
	ПроцСтавкаНП=УчСтавкаНП;
	Возврат (ДолгРег*100*ПроцНДС/(100+ПроцСтавкаНП))/(100+ПроцНДС);
КонецФункции
//******************************************************************************
// Функция СчетКредита_ПоКоду_50()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СчетКредита для
//   формируемой бух. проводки по коду 50 "Ввод ост.собств.тов"
//   в ситуации ПоРегПартииТоваров
//                         ВводПартииКупленныхТоваров
Функция СчетКредита_ПоКоду_50()
	Если ТекДок.Вид()="ОприходованиеИзлишков" тогда
		Возврат "91.1";
	Иначе
		Возврат "00";
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция СубкКред1_ПоКоду_50()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкКред1 для
//   формируемой бух. проводки по коду 50 "Ввод ост.собств.тов"
//   в ситуации ПоРегПартииТоваров
//                         ВводПартииКупленныхТоваров
Функция СубкКред1_ПоКоду_50()
	Если ТекДок.Вид()="ОприходованиеИзлишков" тогда
		Возврат "ПрочиеОперационныеДоходыРасходы";
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_51()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 51 "Зачтен НДС опл.товаров"
//   в ситуации ПоРегВзаиморасчетыПоставщиков
//                         ОтгрузкаОплаченногоТовараКупленного
//                         ОплатаТоваровИУслуг
Функция Сумма_ПоКоду_51() 
	Если КредДокументРег.Вид()="ВводОстатковКредита" Тогда
		СуммаНДСКЗачету=ДолгРег*ПроцентНДС(КредДокументРег.СтавкаНДС)/(100+ПроцентНДС(КредДокументРег.СтавкаНДС));
	Иначе
		СуммаНДСОтгр=?(ТекДок.Вид()="ПриходнаяНакладная",ТекДок.Итог("НДС"),КредДокументРег.ТекущийДокумент().Итог("НДС"));
		СуммаОтгр=?(ТекДок.Вид()="ПриходнаяНакладная",ТекДок.Итог("Сумма"),КредДокументРег.ТекущийДокумент().Итог("Сумма"));
		СуммаОпл=ДолгРег;
		СуммаНДСКЗачету=СуммаОпл/СуммаОтгр*СуммаНДСОтгр;
	КонецЕсли;
	Возврат СуммаНДСКЗачету;
КонецФункции
//******************************************************************************
// Функция СчетДебета_ПоКоду_57()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СчетДебета для
//   формируемой бух. проводки по коду 57 "Введены взаиморасч.покуп."
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ВводНачальныхВзаиморасчетов
Функция СчетДебета_ПоКоду_57()
	Если ПриходРег=1 Тогда
		Возврат "62.1";
	Иначе
		Возврат "00";
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция СчетКредита_ПоКоду_57()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СчетКредита для
//   формируемой бух. проводки по коду 57 "Введены взаиморасч.покуп."
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ВводНачальныхВзаиморасчетов
Функция СчетКредита_ПоКоду_57()
	Если РасходРег=1 Тогда
		Возврат "62.2";
	Иначе
		Возврат "00";
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция СубкДеб1_ПоКоду_57()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкДеб1 для
//   формируемой бух. проводки по коду 57 "Введены взаиморасч.покуп."
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ВводНачальныхВзаиморасчетов
Функция СубкДеб1_ПоКоду_57()
	Если ПриходРег=1 Тогда
		Возврат КлиентРег;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция СубкДеб2_ПоКоду_57()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкДеб2 для
//   формируемой бух. проводки по коду 57 "Введены взаиморасч.покуп."
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ВводНачальныхВзаиморасчетов
Функция СубкДеб2_ПоКоду_57()
	Если ПриходРег=1 Тогда
		Возврат КлиентРег;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция СубкДеб3_ПоКоду_57()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкДеб3 для
//   формируемой бух. проводки по коду 57 "Введены взаиморасч.покуп."
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ВводНачальныхВзаиморасчетов
Функция СубкДеб3_ПоКоду_57()
	Если ПриходРег=1 Тогда
		Если СчетДебета="62.1" Тогда
			Если ВидОтгрузкиРег=ОтгрузкаУслуги Тогда
				Возврат "РасчетыЗаПродукциюРаботыУслуги";
			Иначе
				Возврат "РасчетыЗаТовары";
			КонецЕсли;
		Иначе
			Возврат "";
		КонецЕсли;		
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция СубкКред1_ПоКоду_57()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкКред1 для
//   формируемой бух. проводки по коду 57 "Введены взаиморасч.покуп."
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ВводНачальныхВзаиморасчетов
Функция СубкКред1_ПоКоду_57()
	Если РасходРег=1 Тогда
		Возврат КлиентРег;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция СубкКред2_ПоКоду_57()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкКред2 для
//   формируемой бух. проводки по коду 57 "Введены взаиморасч.покуп."
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ВводНачальныхВзаиморасчетов
Функция СубкКред2_ПоКоду_57()
	Если РасходРег=1 Тогда
		Возврат КлиентРег;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_58()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 58 "Выделен НДС аванса"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ВводНачальныхВзаиморасчетов
Функция Сумма_ПоКоду_58()
	Если ПриходРег=1 Тогда
		Возврат 0;
	КонецЕсли;
	ПроцНДС=ПроцентНДС(СтавкаНДСРег);
	УчСтавкаНП=0;
	ПроцСтавкаНП=УчСтавкаНП;
	Возврат (ДолгРег*100*ПроцНДС/(100+ПроцСтавкаНП))/(100+ПроцНДС);
КонецФункции
//******************************************************************************
// Функция СчетДебета_ПоКоду_60()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СчетДебета для
//   формируемой бух. проводки по коду 60 "Введены взаиморасч.пост."
//   в ситуации ПоРегВзаиморасчетыПоставщиков
//                         ВводНачальныхВзаиморасчетов
Функция СчетДебета_ПоКоду_60()
	Если ПриходРег=1 Тогда
		Возврат "60.2";
	Иначе
		Возврат "00";
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция СчетКредита_ПоКоду_60()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СчетКредита для
//   формируемой бух. проводки по коду 60 "Введены взаиморасч.пост."
//   в ситуации ПоРегВзаиморасчетыПоставщиков
//                         ВводНачальныхВзаиморасчетов
Функция СчетКредита_ПоКоду_60()
	Если РасходРег=1 Тогда
		Возврат "60.1";
	Иначе
		Возврат "00";
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция СубкДеб1_ПоКоду_60()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкДеб1 для
//   формируемой бух. проводки по коду 60 "Введены взаиморасч.пост."
//   в ситуации ПоРегВзаиморасчетыПоставщиков
//                         ВводНачальныхВзаиморасчетов
Функция СубкДеб1_ПоКоду_60()
	Если ПриходРег=1 Тогда
		Возврат КлиентРег;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция СубкДеб2_ПоКоду_60()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкДеб2 для
//   формируемой бух. проводки по коду 60 "Введены взаиморасч.пост."
//   в ситуации ПоРегВзаиморасчетыПоставщиков
//                         ВводНачальныхВзаиморасчетов
Функция СубкДеб2_ПоКоду_60()
	Если ПриходРег=1 Тогда
		Возврат КлиентРег;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция СубкКред1_ПоКоду_60()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкКред1 для
//   формируемой бух. проводки по коду 60 "Введены взаиморасч.пост."
//   в ситуации ПоРегВзаиморасчетыПоставщиков
//                         ВводНачальныхВзаиморасчетов
Функция СубкКред1_ПоКоду_60()
	Если РасходРег=1 Тогда
		Возврат КлиентРег;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция СубкКред2_ПоКоду_60()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкКред2 для
//   формируемой бух. проводки по коду 60 "Введены взаиморасч.пост."
//   в ситуации ПоРегВзаиморасчетыПоставщиков
//                         ВводНачальныхВзаиморасчетов
Функция СубкКред2_ПоКоду_60()
	Если РасходРег=1 Тогда
		Возврат КлиентРег;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция СубкДеб2_ПоКоду_71()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкДеб2 для
//   формируемой бух. проводки по коду 71 "Сумма вознаграждения"
//   в ситуации ПоРегПартииТоваров
//                         ПродажаПринятогоТовара
//                         ПродажаПринятогоТовараВРозницу
//                         ПродажаРеализаторомПринятогоТовара
Функция СубкДеб2_ПоКоду_71()
	Возврат КонтрагентРег;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_71()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 71 "Сумма вознаграждения"
//   в ситуации ПоРегПартииТоваров
//                         ПродажаПринятогоТовара
//                         ПродажаПринятогоТовараВРозницу
//                         ПродажаРеализаторомПринятогоТовара
Функция Сумма_ПоКоду_71()
	Если ПустоеЗначение(КонтрагентРег)=1 Тогда
		Возврат 0;
	КонецЕсли;
	Возврат ОборотРег-СтоимостьРег-НПРег-НДСРег;
КонецФункции
//******************************************************************************
// Функция СчетДебета_ПоКоду_95()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СчетДебета для
//   формируемой бух. проводки по коду 95 "Реализация тов. по отп.цене"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ОтгрузкаОплаченногоТовараКупленного
//                         НеоплаченнаяОтгрузкаТовараКупленного
//                         ВосстановлениеОтгрузкиДругойСтавкой
Функция СчетДебета_ПоКоду_95()
	//Если КредДокументРег.Вид()="ПриходнаяНакладная" Тогда
	//	Возврат "76.5"; // реализация товара в счет ранее возвращенного
	//Иначе
	Возврат "62.1";
	//КонецЕсли;
КонецФункции
//******************************************************************************
// Функция СубкДеб3_ПоКоду_95()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкДеб3 для
//   формируемой бух. проводки по коду 95 "Реализация тов. по отп.цене"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ОтгрузкаОплаченногоТовараКупленного
//                         НеоплаченнаяОтгрузкаТовараКупленного
//                         ВосстановлениеОтгрузкиДругойСтавкой
Функция СубкДеб3_ПоКоду_95()
	Если СчетДебета="62.1" Тогда
		Возврат "РасчетыЗаТовары";
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_95()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 95 "Реализация тов. по отп.цене"
//   в ситуации ПоРегПартииТоваров
//                         ПродажаТовара
Функция Сумма_ПоКоду_95()
	Если ТоварРег.ВидТовара=Перечисление.ВидыТоваров.Услуга Тогда
		// эта проводка для товаров
		Возврат 0;
	КонецЕсли;
	Если ТекДок.Вид()="МарочныйОтчет" Тогда
		Возврат 0;
	КонецЕсли;
	Возврат ОборотРег;
КонецФункции
//******************************************************************************
// Функция СчетКредита_ПоКоду_99()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СчетКредита для
//   формируемой бух. проводки по коду 99 "Учтен НДС реализации"
//   в ситуации ПоРегПартииТоваров
//                         ПродажаТовара
Функция СчетКредита_ПоКоду_99()
	Если ФирмаРег.МетодОпределенияВыручки.Получить(ДатаДок)=Перечисление.МетодыОпределенияВыручки.ПоОтгрузке Тогда	//по отгрузке
		Возврат "68.2";
	Иначе 
		Возврат "76.Н.1";
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция СубкКред1_ПоКоду_99()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкКред1 для
//   формируемой бух. проводки по коду 99 "Учтен НДС реализации"
//   в ситуации ПоРегПартииТоваров
//                         ПродажаТовара
Функция СубкКред1_ПоКоду_99()
	Если СчетКредита="68.2" Тогда 
		Возврат "Налог";
	Иначе
		Возврат "НДС";
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция СубкКред2_ПоКоду_99()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкКред2 для
//   формируемой бух. проводки по коду 99 "Учтен НДС реализации"
//   в ситуации ПоРегПартииТоваров
//                         ПродажаТовара
Функция СубкКред2_ПоКоду_99()
	Если СчетКредита="76.Н.1" Тогда 
		Возврат КлиентДок(ТекДок);
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_99()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 99 "Учтен НДС реализации"
//   в ситуации ПоРегПартииТоваров
//                         ПродажаТовара
Функция Сумма_ПоКоду_99()
	Возврат НДСрасходаРег;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_100()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 100 "Зачтен НДС аванса"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         СторнированиеАванса
//                         ОтгрузкаОплаченногоТовараКупленного
//                         ОтгрузкаОплаченногоТовараПринятого
//                         ВыполнениеОплаченнойУслуги
Функция Сумма_ПоКоду_100()
	//Если КредДокументРег.Вид()="МарочныйОтчет" Тогда
	//	// в случае розницы проводку не делаем
	//	Возврат 0;
	//КонецЕсли;
	Если КредДокументРег.Вид()="ПриходнаяНакладная" Тогда
		Возврат 0;  // отгрузка товара в счет ранее возвращенного
	КонецЕсли;
	ПроцНДС = ПроцентНДС(СтавкаНДСРег);
	Если КредДокументРег.ДатаДок<=Дата("31.12.2000") Тогда
		РасчСтавкаНДС=ПроцНДС/(100+ПроцНДС);
	Иначе //по авансам выданным с 01.01.2001
		РасчСтавкаНДС=Окр(ПроцНДС/(100+ПроцНДС),4,1);
	КонецЕсли;
	УчСтавкаНП=0; 
	ПроцСтавкаНП=УчСтавкаНП;
	СуммаНДС=(ДолгРег*100/(100+ПроцСтавкаНП))* РасчСтавкаНДС;
	Возврат СуммаНДС;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_105()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 105 "Учет задолж.  покупателя комисс. товаров"
//   в ситуации ПоРегПартииТоваров
//                         ПродажаПринятогоТовара
Функция Сумма_ПоКоду_105()
	Если СтатусРег=Купленный Тогда
		Возврат 0;
	КонецЕсли;
	Возврат ОборотРег;
КонецФункции
//******************************************************************************
// Функция СубкДеб2_ПоКоду_136()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкДеб2 для
//   формируемой бух. проводки по коду 136 "Учтен аванс поставщику"
//   в ситуации ПоРегВзаиморасчетыПоставщиков
//                         ВыполнениеОплаченнойУслугиТранспорт
//                         ВыполнениеОплаченнойУслугиОплатаТруда
//                         ВыполнениеОплаченнойУслугиТопливо
//                         ВыполнениеОплаченнойУслугиХранение
//                         ВыполнениеОплаченнойУслугиРеклама
//                         ВыполнениеОплаченнойУслугиТара
//                         ВыполнениеОплаченнойУслугиПрочие
//                         ОтгрузкаОплаченногоТовараКупленного
Функция СубкДеб2_ПоКоду_136()
	Возврат КлиентДок(ТекДок);
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_136()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 136 "Учтен аванс поставщику"
//   в ситуации ПоРегВзаиморасчетыПоставщиков
//                         ВыполнениеОплаченнойУслугиТранспорт
//                         ВыполнениеОплаченнойУслугиОплатаТруда
//                         ВыполнениеОплаченнойУслугиТопливо
//                         ВыполнениеОплаченнойУслугиХранение
//                         ВыполнениеОплаченнойУслугиРеклама
//                         ВыполнениеОплаченнойУслугиТара
//                         ВыполнениеОплаченнойУслугиПрочие
//                         ОтгрузкаОплаченногоТовараКупленного
Функция Сумма_ПоКоду_136()
	Если КредДокументРег.Вид()="РасходнаяНакладная" Тогда
		Возврат 0;  // получение товара в счет ранее возвращенного
	Иначе
		Возврат ДолгРег;
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_150()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 150 "Поступил аванс Касса"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         АвансоваяВыплата
Функция Сумма_ПоКоду_150()
	Если НЕ((ТекДок.Вид()="ПриходныйОрдерТБ") ИЛИ (ТекДок.Вид()="РасходныйОрдерТБ")) Тогда
		Возврат 0;
	КонецЕсли;
	Возврат ДолгРег;
КонецФункции
//******************************************************************************
// Функция СубкДеб1_ПоКоду_151()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкДеб1 для
//   формируемой бух. проводки по коду 151 "Поступил аванс Банк"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         АвансоваяВыплата
Функция СубкДеб1_ПоКоду_151()
	Если (ТекДок.Вид()="ДвиженияДенежныхСредств") Тогда
		Возврат ТекДок.РасчетныйСчет;
	КонецЕсли;
	Возврат "";
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_151()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 151 "Поступил аванс Банк"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         АвансоваяВыплата
Функция Сумма_ПоКоду_151()
	Если НЕ(ТекДок.Вид()="ДвиженияДенежныхСредств") Тогда
		Возврат 0;
	КонецЕсли;
	Возврат ДолгРег;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_152()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 152 "Выделен НДС аванса"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         АвансоваяВыплата
Функция Сумма_ПоКоду_152()
	ПроцНДС=ПроцентНДС(СтавкаНДСРег);
	Если ТекДок.ДатаДок<=Дата("31.12.2000") Тогда
		РасчСтавкаНДС=ПроцНДС/(100+ПроцНДС);
	Иначе // с 01.01.2001
		РасчСтавкаНДС=Окр(ПроцНДС/(100+ПроцНДС),4,1);
	КонецЕсли;
	УчСтавкаНП=0;
	ПроцСтавкаНП=УчСтавкаНП;
	СуммаНДС=(ДолгРег*100/(100+ПроцСтавкаНП))* РасчСтавкаНДС;
	Возврат СуммаНДС;
КонецФункции   
//******************************************************************************
// Функция Сумма_ПоКоду_155()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 155 "Возвр.аванса покупателю Касса"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ВозвратАванса
Функция Сумма_ПоКоду_155()
	Если НЕ((ТекДок.Вид()="ПриходныйОрдерТБ") ИЛИ (ТекДок.Вид()="РасходныйОрдерТБ")) Тогда
		Возврат 0;
	КонецЕсли;
	Возврат ДолгРег;
КонецФункции
//******************************************************************************
// Функция СубкКред1_ПоКоду_156()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкКред1 для
//   формируемой бух. проводки по коду 156 "Возвр.аванса покупателю Банк"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ВозвратАванса
Функция СубкКред1_ПоКоду_156()
	Если (ТекДок.Вид()="ДвиженияДенежныхСредств") Тогда
		Возврат ТекДок.РасчетныйСчет;
	КонецЕсли;
	Возврат "";
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_156()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 156 "Возвр.аванса покупателю Банк"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ВозвратАванса
Функция Сумма_ПоКоду_156()
	Если НЕ(ТекДок.Вид()="ДвиженияДенежныхСредств") Тогда
		Возврат 0;
	КонецЕсли;
	Возврат ДолгРег;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_157()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 157 "Возвр.выдел.НДС аванса"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ВозвратАванса
Функция Сумма_ПоКоду_157()
	ПроцНДС=ПроцентНДС(СтавкаНДСРег);
	Если КредДокументРег.ДатаДок<=Дата("31.12.2000") Тогда
		РасчСтавкаНДС=ПроцНДС/(100+ПроцНДС);
	Иначе //  по авансам выданным с 01.01.2001
		РасчСтавкаНДС=Окр(ПроцНДС/(100+ПроцНДС),4,1);
	КонецЕсли;
	УчСтавкаНП=0;
	ПроцСтавкаНП=УчСтавкаНП;
	СуммаНДС=(ДолгРег*100/(100+ПроцСтавкаНП))* РасчСтавкаНДС;
	Возврат СуммаНДС;
КонецФункции  
//******************************************************************************
// Функция СчетКредита_ПоКоду_159()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СчетКредита для
//   формируемой бух. проводки по коду 159 "Поступила оплата Касса"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ОплатаУслуги
//                         ОплатаТовара
Функция СчетКредита_ПоКоду_159()
	Если КредДокументРег.Вид()="МарочныйОтчет" Тогда	
		Возврат "90.1.1";
	Иначе
		Возврат "62.1";
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция СубкКред1_ПоКоду_159()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкКред1 для
//   формируемой бух. проводки по коду 159 "Поступила оплата Касса"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ОплатаУслуги
//                         ОплатаТовара
Функция СубкКред1_ПоКоду_159()
	Если СчетКредита="90.1.1" Тогда
		Возврат "Товар";
	Иначе
		Возврат КлиентРег;
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция СубкКред2_ПоКоду_159()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкКред2 для
//   формируемой бух. проводки по коду 159 "Поступила оплата Касса"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ОплатаУслуги
//                         ОплатаТовара
Функция СубкКред2_ПоКоду_159()
	Если СчетКредита="90.1.1" Тогда
		Возврат "";
	Иначе
		Возврат КлиентРег;
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция СубкКред3_ПоКоду_159()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкКред3 для
//   формируемой бух. проводки по коду 159 "Поступила оплата Касса"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ОплатаУслуги
//                         ОплатаТовара
Функция СубкКред3_ПоКоду_159()
	Если СчетКредита="90.1.1" Тогда
		Возврат "";
	Иначе
		Если  КодОперацииРег=ОплатаУслуги Тогда
			Возврат  "РасчетыЗаПродукциюРаботыУслуги";
		Иначе
			Возврат "РасчетыЗаТовары";
		КонецЕсли;
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_159()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 159 "Поступила оплата Касса"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ОплатаУслуги
//                         ОплатаТовара
Функция Сумма_ПоКоду_159()
	Если НЕ((ТекДок.Вид()="ПриходныйОрдерТБ") ИЛИ (ТекДок.Вид()="РасходныйОрдерТБ")) Тогда
		Возврат 0;
	КонецЕсли;
	Возврат ДолгРег;
КонецФункции
//******************************************************************************
// Функция СубкДеб1_ПоКоду_160()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкДеб1 для
//   формируемой бух. проводки по коду 160 "Поступила оплата Банк"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ОплатаУслуги
//                         ОплатаТовара
Функция СубкДеб1_ПоКоду_160()
	Если (ТекДок.Вид()="ДвиженияДенежныхСредств") Тогда
		Возврат ТекДок.РасчетныйСчет;
	КонецЕсли;
	Возврат "";
КонецФункции
//******************************************************************************
// Функция СубкКред3_ПоКоду_160()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкКред3 для
//   формируемой бух. проводки по коду 160 "Поступила оплата Банк"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ОплатаУслуги
//                         ОплатаТовара
Функция СубкКред3_ПоКоду_160()
	Если  КодОперацииРег=ОплатаУслуги Тогда
		Возврат  "РасчетыЗаПродукциюРаботыУслуги";
	Иначе
		Возврат "РасчетыЗаТовары";
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_160()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 160 "Поступила оплата Банк"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ОплатаУслуги
//                         ОплатаТовара
Функция Сумма_ПоКоду_160()
	Если НЕ(ТекДок.Вид()="ДвиженияДенежныхСредств") Тогда
		Возврат 0;
	КонецЕсли;
	Возврат ДолгРег;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_163()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 163 "Выделен НП оплаты"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ОплатаУслуги
//                         ОплатаТовара
//                         ОтгрузкаОплаченногоТовараКупленного
Функция Сумма_ПоКоду_163()
	Если ТекДок.Вид()="ПриходныйОрдерТБ" Тогда 
		Если ТекДок.СтавкаНП>0 Тогда
			УчСтавкаНП=ТекДок.СтавкаНП;
		Иначе
			УчСтавкаНП=0; 
		КонецЕсли;
		ПроцСтавкаНП=УчСтавкаНП;
		СуммаНП=ДолгРег*ПроцСтавкаНП/(100+ПроцСтавкаНП);
	ИначеЕсли (ТекДок.Вид()="РасходнаяНакладная") Тогда
		Если Текдок.ИспользоватьНП=Перечисление.Булево.Да Тогда
			фУчетНП=1;
		Иначе
			фУчетНП=0;
		КонецЕсли;
		СуммаНПОтгр=ТекДок.Итог("СуммаНП");
		СуммаОтгр=ТекДок.Итог("Сумма");
		СуммаОпл=ДолгРег;
		СуммаНП=СуммаОпл/СуммаОтгр*СуммаНПОтгр;
	КонецЕсли;
	Возврат СуммаНП;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_164()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 164 "Выделен НДС оплаты"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ОплатаУслуги
//                         ОплатаТовара
Функция Сумма_ПоКоду_164()
	Если КлиентРег.Вид()="ККМ" Тогда
		// в случае розницы проводку не делаем
		Возврат 0;
	КонецЕсли;
	Если НЕ(ФирмаДок.МетодОпределенияВыручки.Получить(ДатаДок) =     Перечисление.МетодыОпределенияВыручки.ПоОплате) Тогда
		// в этом случае проводку не делаем
		Возврат 0;
	КонецЕсли;
	Если ТекДок.Вид()="ПриходныйОрдерТБ" Тогда 
		Если ТекДок.СтавкаНП>0 Тогда
			УчСтавкаНП=ТекДок.СтавкаНП;
		Иначе
			УчСтавкаНП=0; 
		КонецЕсли;
	КонецЕсли;
	ПроцНДС=ПроцентНДС(СтавкаНДСРег);
	ПроцСтавкаНП=УчСтавкаНП;
	СуммаНДС=(ДолгРег*100*ПроцНДС/(100+ПроцСтавкаНП))/(100+ПроцНДС);
	Возврат СуммаНДС;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_166()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 166 "Поступила оплата Касса за комм. тов."
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ОплатаТоваровПринятых
Функция Сумма_ПоКоду_166()
	Если НЕ((ТекДок.Вид()="ПриходныйОрдерТБ") ИЛИ (ТекДок.Вид()="РасходныйОрдерТБ")) Тогда
		Возврат 0;
	КонецЕсли;
	Возврат ДолгРег;
КонецФункции
//******************************************************************************
// Функция СубкДеб1_ПоКоду_167()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкДеб1 для
//   формируемой бух. проводки по коду 167 "Поступила оплата Банк за комм. тов."
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ОплатаТоваровПринятых
Функция СубкДеб1_ПоКоду_167()
	Если (ТекДок.Вид()="ДвиженияДенежныхСредств") Тогда
		Возврат ТекДок.РасчетныйСчет;
	КонецЕсли;
	Возврат "";
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_167()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 167 "Поступила оплата Банк за комм. тов."
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ОплатаТоваровПринятых
Функция Сумма_ПоКоду_167()
	Если НЕ(ТекДок.Вид()="ДвиженияДенежныхСредств") Тогда
		Возврат 0;
	КонецЕсли;
	Возврат ДолгРег;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_168()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 168 "Выделен НП с оплаты"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ОплатаТоваровПринятых
//                         ОтгрузкаОплаченногоТовараПринятого
Функция Сумма_ПоКоду_168()
	Если ТекДок.Вид()="ПриходныйОрдерТБ" Тогда 
		Если ТекДок.СтавкаНП>0 Тогда
			УчСтавкаНП=ТекДок.СтавкаНП;
		Иначе
			УчСтавкаНП=0; 
		КонецЕсли;
		ПроцСтавкаНП=УчСтавкаНП;
		СуммаНП=ДолгРег*ПроцСтавкаНП/(100+ПроцСтавкаНП);
	ИначеЕсли (ТекДок.Вид()="РасходнаяНакладная") или (ТекДок.Вид()="МарочныйОтчет") Тогда
		Если Текдок.ИспользоватьНП=Перечисление.Булево.Да Тогда
			фУчетНП=1;
		Иначе
			фУчетНП=0;
		КонецЕсли;
		СуммаНПОтгр=ТекДок.Итог("СуммаНП");
		СуммаОтгр=ТекДок.Итог("Сумма");
		СуммаОпл=ДолгРег;
		СуммаНП=СуммаОпл/СуммаОтгр*СуммаНПОтгр;
	КонецЕсли;
	Возврат СуммаНП;
КонецФункции 
//******************************************************************************
// Функция Сумма_ПоКоду_176()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 176 "Выпл.аванс поставщику Касса"
//   в ситуации ПоРегВзаиморасчетыПоставщиков
//                         АвансоваяВыплата
Функция Сумма_ПоКоду_176()
	Если НЕ((ТекДок.Вид()="ПриходныйОрдерТБ") ИЛИ (ТекДок.Вид()="РасходныйОрдерТБ")) Тогда
		Возврат 0;
	КонецЕсли;
	Возврат ДолгРег;
КонецФункции
//******************************************************************************
// Функция СубкКред1_ПоКоду_177()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкКред1 для
//   формируемой бух. проводки по коду 177 "Выпл.аванс поставщику Банк"
//   в ситуации ПоРегВзаиморасчетыПоставщиков
//                         АвансоваяВыплата
Функция СубкКред1_ПоКоду_177()
	Если (ТекДок.Вид()="ДвиженияДенежныхСредств") Тогда
		Возврат ТекДок.РасчетныйСчет;
	КонецЕсли;
	Возврат "";
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_177()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 177 "Выпл.аванс поставщику Банк"
//   в ситуации ПоРегВзаиморасчетыПоставщиков
//                         АвансоваяВыплата
Функция Сумма_ПоКоду_177()
	Если НЕ(ТекДок.Вид()="ДвиженияДенежныхСредств") Тогда
		Возврат 0;
	КонецЕсли;
	Возврат ДолгРег;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_180()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 180 "Возвр.аванса поставщиком Касса"
//   в ситуации ПоРегВзаиморасчетыПоставщиков
//                         ВозвратАванса
Функция Сумма_ПоКоду_180()
	Если НЕ((ТекДок.Вид()="ПриходныйОрдерТБ") ИЛИ (ТекДок.Вид()="РасходныйОрдерТБ")) Тогда
		Возврат 0;
	КонецЕсли;
	Возврат ДолгРег;
КонецФункции
//******************************************************************************
// Функция СубкДеб1_ПоКоду_181()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкДеб1 для
//   формируемой бух. проводки по коду 181 "Возвр.аванса поставщиком Банк"
//   в ситуации ПоРегВзаиморасчетыПоставщиков
//                         ВозвратАванса
Функция СубкДеб1_ПоКоду_181()
	Если (ТекДок.Вид()="ДвиженияДенежныхСредств") Тогда
		Возврат ТекДок.РасчетныйСчет;
	КонецЕсли;
	Возврат "";
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_181()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 181 "Возвр.аванса поставщиком Банк"
//   в ситуации ПоРегВзаиморасчетыПоставщиков
//                         ВозвратАванса
Функция Сумма_ПоКоду_181()
	Если НЕ(ТекДок.Вид()="ДвиженияДенежныхСредств") Тогда
		Возврат 0;
	КонецЕсли;
	Возврат ДолгРег;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_183()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 183 "Оплата поставщику Касса"
//   в ситуации ПоРегВзаиморасчетыПоставщиков
//                         ОплатаТоваровИУслуг
Функция Сумма_ПоКоду_183()
	Если НЕ((ТекДок.Вид()="ПриходныйОрдерТБ") ИЛИ (ТекДок.Вид()="РасходныйОрдерТБ")) Тогда
		Возврат 0;
	КонецЕсли;
	Возврат ДолгРег;
КонецФункции
//******************************************************************************
// Функция СубкКред1_ПоКоду_184()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкКред1 для
//   формируемой бух. проводки по коду 184 "Оплата поставщику Банк"
//   в ситуации ПоРегВзаиморасчетыПоставщиков
//                         ОплатаТоваровИУслуг
Функция СубкКред1_ПоКоду_184()
	Если (ТекДок.Вид()="ДвиженияДенежныхСредств") Тогда
		Возврат ТекДок.РасчетныйСчет;
	КонецЕсли;
	Возврат "";
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_184()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 184 "Оплата поставщику Банк"
//   в ситуации ПоРегВзаиморасчетыПоставщиков
//                         ОплатаТоваровИУслуг
Функция Сумма_ПоКоду_184()
	Если НЕ(ТекДок.Вид()="ДвиженияДенежныхСредств") Тогда
		Возврат 0;
	КонецЕсли;
	Возврат ДолгРег;
КонецФункции
//******************************************************************************
// Функция СубкКред1_ПоКоду_188()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкКред1 для
//   формируемой бух. проводки по коду 188 "Оплата комитенту Касса"
//   в ситуации ПоРегВзаиморасчетыПоставщиков
//                         ОплатаТоваровПринятых
Функция СубкКред1_ПоКоду_188()
	Возврат "ПриобретениеТоваровПродукцииРаботИУслуг" ;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_188()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 188 "Оплата комитенту Касса"
//   в ситуации ПоРегВзаиморасчетыПоставщиков
//                         ОплатаТоваровПринятых
Функция Сумма_ПоКоду_188()
	Если НЕ((ТекДок.Вид()="ПриходныйОрдерТБ") ИЛИ (ТекДок.Вид()="РасходныйОрдерТБ")) Тогда
		Возврат 0;
	КонецЕсли;
	Возврат ДолгРег;
КонецФункции
//******************************************************************************
// Функция СубкКред1_ПоКоду_189()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкКред1 для
//   формируемой бух. проводки по коду 189 "Оплата комитенту Банк"
//   в ситуации ПоРегВзаиморасчетыПоставщиков
//                         ОплатаТоваровПринятых
Функция СубкКред1_ПоКоду_189()
	Если (ТекДок.Вид()="ДвиженияДенежныхСредств") Тогда
		Возврат ТекДок.РасчетныйСчет;
	КонецЕсли;
	Возврат "";
КонецФункции
//******************************************************************************
// Функция СубкКред2_ПоКоду_189()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкКред2 для
//   формируемой бух. проводки по коду 189 "Оплата комитенту Банк"
//   в ситуации ПоРегВзаиморасчетыПоставщиков
//                         ОплатаТоваровПринятых
Функция СубкКред2_ПоКоду_189()
	Если (ТекДок.Вид()="ДвиженияДенежныхСредств") Тогда
		Возврат "ПриобретениеТоваровПродукцииРаботИУслуг" ;
	КонецЕсли;
	Возврат "";
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_189()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 189 "Оплата комитенту Банк"
//   в ситуации ПоРегВзаиморасчетыПоставщиков
//                         ОплатаТоваровПринятых
Функция Сумма_ПоКоду_189()
	Если НЕ(ТекДок.Вид()="ДвиженияДенежныхСредств") Тогда
		Возврат 0;
	КонецЕсли;
	Возврат ДолгРег;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_198()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 198 "Зачт.предопл.покуп. за комм."
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ОтгрузкаОплаченногоТовараПринятого
Функция Сумма_ПоКоду_198()
	СписокДопПараметров.УдалитьВсе();
	Возврат ДолгРег;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_206()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 206 "Выделен НП с предоплаты (по оплате)"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ОтгрузкаОплаченногоТовараКупленного
//                         ВыполнениеОплаченнойУслуги
Функция Сумма_ПоКоду_206()
	Если КредДокументРег.Вид()="ПриходныйОрдерТБ" Тогда 
		Если КредДокументРег.ТекущийДокумент().СтавкаНП>0 Тогда	
			УчСтавкаНП=КредДокументРег.ТекущийДокумент().СтавкаНП;
		Иначе
			УчСтавкаНП=0; 
		КонецЕсли;
	КонецЕсли;
	ПроцСтавкаНП=УчСтавкаНП;
	СуммаНП=(ДолгРег*ПроцСтавкаНП)/(100+ПроцСтавкаНП);
	Возврат СуммаНП;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_208()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 208 "Получен товар в счет ранее возвращенного"
//   в ситуации ПоРегВзаиморасчетыПоставщиков
//                         ВыполнениеОплаченнойУслугиТранспорт
//                         ВыполнениеОплаченнойУслугиОплатаТруда
//                         ВыполнениеОплаченнойУслугиТопливо
//                         ВыполнениеОплаченнойУслугиХранение
//                         ВыполнениеОплаченнойУслугиРеклама
//                         ВыполнениеОплаченнойУслугиТара
//                         ВыполнениеОплаченнойУслугиПрочие
//                         ОтгрузкаОплаченногоТовараКупленного
Функция Сумма_ПоКоду_208()
	Если КредДокументРег.Вид()="РасходнаяНакладная" Тогда
		Возврат ДолгРег;  // получение товара в счет ранее возвращенного
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_217()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 217 "Учтен аванс поставщику"
//   в ситуации ПоРегВзаиморасчетыПоставщиков
//                         ОтгрузкаОплаченногоТовараПринятого
Функция Сумма_ПоКоду_217()
	Если КредДокументРег.Вид()="РасходнаяНакладная" Тогда
		Возврат 0;  // получение товара в счет ранее возвращенного
	Иначе
		Возврат ДолгРег;
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция СубкКред1_ПоКоду_224()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкКред1 для
//   формируемой бух. проводки по коду 224 "(ПС) Введены взаиморасч.покуп."
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ВводНачальныхВзаиморасчетов
Функция СубкКред1_ПоКоду_224()
	Если ПриходРег=1 Тогда
		Возврат КлиентРег;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция СубкКред2_ПоКоду_224()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкКред2 для
//   формируемой бух. проводки по коду 224 "(ПС) Введены взаиморасч.покуп."
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ВводНачальныхВзаиморасчетов
Функция СубкКред2_ПоКоду_224()
	Если ПриходРег=1 Тогда
		Возврат КлиентРег;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_224()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 224 "(ПС) Введены взаиморасч.покуп."
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ВводНачальныхВзаиморасчетов
Функция Сумма_ПоКоду_224()
	Если ФирмаРег.МетодОпределенияВыручки.Получить(ДатаДок) =Перечисление.МетодыОпределенияВыручки.ПоОтгрузке Тогда
		// в этом случае проводку не делаем
		Возврат 0;
	КонецЕсли;
	Если ПриходРег=1 Тогда
		Если Не (ВидОтгрузкиРег=ОтгрузкаТоваровПринятых) Тогда
			Возврат ДолгРег;
		Иначе
			Возврат 0;
		КонецЕсли;		
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_227()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 227 "(ПС) Зачт.предопл.покупателя"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         НеоплаченнаяОтгрузкаТовараКупленного
Функция Сумма_ПоКоду_227()
	Если ФирмаРег.МетодОпределенияВыручки.Получить(ДатаДок) =Перечисление.МетодыОпределенияВыручки.ПоОтгрузке Тогда
		// в этом случае проводку не делаем
		Возврат 0;
	КонецЕсли;
	Если ВидОтгрузкиРег=ОтгрузкаУслуги Тогда
		// эта проводка для товаров
		Возврат 0;
	КонецЕсли;
	Если КредДокументРег.Вид()="ПриходнаяНакладная" Тогда
		Возврат 0; // реализация товара в счет ранее возвращенного
	КонецЕсли;
	Если Не (ВидОтгрузкиРег="П") Тогда
		Возврат 0;
	КонецЕсли;
	Возврат -ДолгРег;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_230()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 230 "(ПС) Поступила оплата"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ПогашениеДолгаВзаимозачетом
//                         ОплатаТовара
Функция Сумма_ПоКоду_230()
	Если ФирмаРег.МетодОпределенияВыручки.Получить(ДатаДок) =Перечисление.МетодыОпределенияВыручки.ПоОтгрузке Тогда
		// в этом случае проводку не делаем
		Возврат 0;
	КонецЕсли;
	Если НЕ((ТекДок.Вид()="ПриходныйОрдерТБ") 
	ИЛИ (ТекДок.Вид()="РасходныйОрдерТБ")
	ИЛИ (ТекДок.Вид()="РасходнаяРозничная")
	ИЛИ (ТекДок.Вид()="ОтчетКассовойСмены")
	ИЛИ (ТекДок.Вид()="ДвиженияДенежныхСредств")
	ИЛИ (ТекДок.Вид()="Взаимозачет")
	) Тогда
		Возврат 0;
	КонецЕсли;
	Возврат ДолгРег;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_238()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 238 "Учтен НДС при вводе нач. взаим. (по оплате)"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ВводНачальныхВзаиморасчетов
Функция Сумма_ПоКоду_238()
	Если КлиентРег.Вид()="ККМ" Тогда
		// в случае розницы проводку не делаем
		Возврат 0;
	КонецЕсли;
	Если НЕ(ФирмаДок.МетодОпределенияВыручки.Получить(ДатаДок) =Перечисление.МетодыОпределенияВыручки.ПоОплате) Тогда
		// в этом случае проводку не делаем
		Возврат 0;
	КонецЕсли;
	Если ПриходРег=0 Тогда
		Возврат 0;
	КонецЕсли;
	ПроцНДС = ПроцентНДС(СтавкаНДСРег);
	УчСтавкаНП=0;
	ПроцСтавкаНП=УчСтавкаНП;
	Возврат (ДолгРег*100*ПроцНДС/(100+ПроцСтавкаНП))/(100+ПроцНДС);
КонецФункции
//******************************************************************************
// Функция СчетКредита_ПоКоду_243()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СчетКредита для
//   формируемой бух. проводки по коду 243 "Учтен НДС вознаграждения"
//   в ситуации ПоРегПартииТоваров
//                         ПродажаПринятогоТовара
Функция СчетКредита_ПоКоду_243()
	Если ФирмаРег.МетодОпределенияВыручки.Получить(ДатаДок)=          Перечисление.МетодыОпределенияВыручки.ПоОтгрузке Тогда	//по отгрузке
		Возврат "68.2";
	Иначе     
		Возврат "76.Н.1";
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция СубкКред1_ПоКоду_243()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкКред1 для
//   формируемой бух. проводки по коду 243 "Учтен НДС вознаграждения"
//   в ситуации ПоРегПартииТоваров
//                         ПродажаПринятогоТовара
Функция СубкКред1_ПоКоду_243()
	Если ФирмаРег.МетодОпределенияВыручки.Получить(ДатаДок)=          Перечисление.МетодыОпределенияВыручки.ПоОтгрузке Тогда	//по отгрузке
		Возврат "Налог";
	Иначе
		Возврат "НДС";
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция СубкКред2_ПоКоду_243()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкКред2 для
//   формируемой бух. проводки по коду 243 "Учтен НДС вознаграждения после 2000г."
//   в ситуации ПоРегПартииТоваров
//                         ПродажаПринятогоТовара
Функция СубкКред2_ПоКоду_243()
	Если ФирмаРег.МетодОпределенияВыручки.Получить(ДатаДок)=          Перечисление.МетодыОпределенияВыручки.ПоОтгрузке Тогда	//по отгрузке
		Возврат "";
	Иначе
		Возврат КонтрагентРег;
	КонецЕсли;
КонецФункции  
//******************************************************************************
// Функция Сумма_ПоКоду_243()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 243 "Учтен НДС вознаграждения"
//   в ситуации ПоРегПартииТоваров
//                         ПродажаПринятогоТовара
Функция Сумма_ПоКоду_243()
	Если ТекДок.ДатаДок<=Дата("31.12.2000") Тогда
		Возврат 0;
	КонецЕсли;
	Если ПустоеЗначение(КонтрагентРег)=1 Тогда
		Возврат 0;
	КонецЕсли;
	Возврат (ОборотРег-СтоимостьРег-НПРег-НДСРег)/100*16.67;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_245()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 245 "Оплач НДС комм вознагр"
//   в ситуации ПоРегВзаиморасчетыПокупателей
//                         ОтгрузкаОплаченногоТовараПринятого
Функция Сумма_ПоКоду_245()
	Если ТекДок.ДатаДок<=Дата("31.12.2000") Тогда
		Возврат 0;
	КонецЕсли;
	Если ФирмаРег.МетодОпределенияВыручки.Получить(ДатаДок)=Перечисление.МетодыОпределенияВыручки.ПоОтгрузке Тогда	//по отгрузке
		Возврат 0;
	КонецЕсли;
	
	Если ПустоеЗначение(КонтрагентРег)=1 Тогда
		Возврат 0;
	КонецЕсли;
	Возврат (ОборотРег-СтоимостьРег-НПРег-НДСРег)/100*16.67;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_248()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 248 "(ПС) Зачт.предопл.покупателя"
//   в ситуации ПоРегПартииТоваров
//                         ПроданоРеализатором
//                         ПродажаКупленногоТовараВРозницу
//                         ПродажаТовара
Функция Сумма_ПоКоду_248()
	Если ФирмаРег.МетодОпределенияВыручки.Получить(ДатаДок) =Перечисление.МетодыОпределенияВыручки.ПоОтгрузке Тогда
		// в этом случае проводку не делаем
		Возврат 0;
	КонецЕсли;
	Возврат ОборотРег;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_249()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 249 "(ПС) Реализация тов. по отп.цене"
//   в ситуации ПоРегПартииТоваров
//                         ПроданоРеализатором
//                         ПродажаКупленногоТовараВРозницу
//                         ПродажаТовара
Функция Сумма_ПоКоду_249()
	Если ФирмаРег.МетодОпределенияВыручки.Получить(ДатаДок) =Перечисление.МетодыОпределенияВыручки.ПоОтгрузке Тогда
		// в этом случае проводку не делаем
		Возврат 0;
	КонецЕсли;
	Возврат ОборотРег
КонецФункции
//******************************************************************************
// Функция СчетДебета_ПоКоду_251()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СчетДебета для
//   формируемой бух. проводки по коду 251 "Введены ост. отданных товаров"
//   в ситуации ПоРегПартииТоваров
//                         ВводПартииОтданныхТоваров
Функция СчетДебета_ПоКоду_251()
	//Если СтатусРег=ОтданныйПринятый Тогда
	//	Возврат ("004");
	//Иначе
	Возврат ("45");
	//КонецЕсли;
КонецФункции
//******************************************************************************
// Функция СчетКредита_ПоКоду_251()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СчетКредита для
//   формируемой бух. проводки по коду 251 "Введены ост. отданных товаров"
//   в ситуации ПоРегПартииТоваров
//                         ВводПартииОтданныхТоваров
Функция СчетКредита_ПоКоду_251()
	//Если СтатусРег=ОтданныйПринятый Тогда
	//	Возврат (""); 
	//Иначе
	Возврат ("00");
	//КонецЕсли;
КонецФункции
//******************************************************************************
// Функция СубкДеб1_ПоКоду_251()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкДеб1 для
//   формируемой бух. проводки по коду 251 "Введены ост. отданных товаров"
//   в ситуации ПоРегПартииТоваров
//                         ВводПартииОтданныхТоваров
Функция СубкДеб1_ПоКоду_251()
	Если СчетДебета="004" Тогда
		Возврат ТоварРег;
	Иначе
		Возврат КонтрагентРег;
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция СубкДеб2_ПоКоду_251()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкДеб2 для
//   формируемой бух. проводки по коду 251 "Введены ост. отданных товаров"
//   в ситуации ПоРегПартииТоваров
//                         ВводПартииОтданныхТоваров
Функция СубкДеб2_ПоКоду_251()
	Если СчетДебета="004" Тогда
		Возврат КонтрагентРег;
	Иначе //45 - договор
		Возврат КонтрагентРег;
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция СубкДеб3_ПоКоду_251()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение СубкДеб3 для
//   формируемой бух. проводки по коду 251 "Введены ост. отданных товаров"
//   в ситуации ПоРегПартииТоваров
//                         ВводПартииОтданныхТоваров
Функция СубкДеб3_ПоКоду_251()
	Если СчетДебета="004" Тогда
		Возврат КонтрагентРег;
	Иначе //45 - товар
		Возврат ТоварРег;
	КонецЕсли;
КонецФункции
//******************************************************************************
// Функция Сумма_ПоКоду_251()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 251 "Введены ост. отданных товаров"
//   в ситуации ПоРегПартииТоваров
//                         ВводПартииОтданныхТоваров
Функция Сумма_ПоКоду_251()
	//Если СтатусРег=ОтданныйПринятый Тогда
	//	Возврат СтоимостьРег+НДСРег;
	//Иначе
	Возврат СтоимостьРег;
	//КонецЕсли;
КонецФункции 
//******************************************************************************
// Функция Сумма_ПоКоду_410()
// 
// Параметры - нет
// 
// Возвращает вычисленное значение Сумма для
//   формируемой бух. проводки по коду 410 "Оприходована продукция"
//   в ситуации ПоРегПартииТоваров
//                         СписаниеНаПроизводcтвоБлюда
Функция Сумма_ПоКоду_410()
	Если ТекДок.Вид()="МарочныйОтчет"  Тогда
		Возврат 0;
	КонецЕсли;
	Возврат СтоимостьРег;
КонецФункции
//******************************************************************************
// Функция РассчитатьПроводку(КодПроводки,ПараметрыВычислений)
// 
// Параметры:
// КодПроводки - код рассчитываемой проводки
// ПараметрыВычислений - список значений параметров расчета проводки
//
// Возвращает список значений рассчитанных операндов проводки
Функция РассчитатьПроводку(КодПроводки,ПараметрыВычислений)
	ПланСчетов=ПараметрыВычислений.Получить("ПланСчетов");
	СчетДебета=ПараметрыВычислений.Получить("СчетДебета");
	СчетКредита=ПараметрыВычислений.Получить("СчетКредита");
	ТекДок=ПараметрыВычислений.Получить("ТекДок");
	ДатаДок=ПараметрыВычислений.Получить("ДатаДок");
	ФирмаДок=ПараметрыВычислений.Получить("ФирмаДок");
	АвторДок=ПараметрыВычислений.Получить("АвторДок");
	ОснованиеДок=ПараметрыВычислений.Получить("ОснованиеДок");
	ТипУчетаДок=ПараметрыВычислений.Получить("ТипУчетаДок");
	ФинУчетДок=ПараметрыВычислений.Получить("ФинУчетДок");
	КомментарийДок=ПараметрыВычислений.Получить("КомментарийДок");
	ПриходРег=ПараметрыВычислений.Получить("ПриходРег");
	РасходРег=ПараметрыВычислений.Получить("РасходРег");
	ФирмаРег=ПараметрыВычислений.Получить("ФирмаРег");
	ТоварРег=ПараметрыВычислений.Получить("ТоварРег");
	СтатусРег=ПараметрыВычислений.Получить("СтатусРег");
	КонтрагентРег=ПараметрыВычислений.Получить("КонтрагентРег");
	ПоставщикРег=ПараметрыВычислений.Получить("ПоставщикРег");
	ПоставкаРег=ПараметрыВычислений.Получить("ПоставкаРег");
	ПрихДокументРег=ПараметрыВычислений.Получить("ПрихДокументРег");
	ОстатокТовараРег=ПараметрыВычислений.Получить("ОстатокТовараРег");
	СтоимостьРег=ПараметрыВычислений.Получить("СтоимостьРег");
	ПродСтоимостьРег=ПараметрыВычислений.Получить("ПродСтоимостьРег");
	НДСРег=ПараметрыВычислений.Получить("НДСРег");
	СтоимостьНПРег=ПараметрыВычислений.Получить("СтоимостьНПРег");
	ОборотРег=ПараметрыВычислений.Получить("ОборотРег");
	НДСприходаРег=ПараметрыВычислений.Получить("НДСприходаРег");
	НДСрасходаРег=ПараметрыВычислений.Получить("НДСрасходаРег");
	НПРег=ПараметрыВычислений.Получить("НПРег");
	КодОперацииРег=ПараметрыВычислений.Получить("КодОперацииРег");
	СубкДеб1=ПараметрыВычислений.Получить("СубкДеб1");
	СубкДеб2=ПараметрыВычислений.Получить("СубкДеб2");
	СубкДеб3=ПараметрыВычислений.Получить("СубкДеб3");
	СубкКред1=ПараметрыВычислений.Получить("СубкКред1");
	СубкКред2=ПараметрыВычислений.Получить("СубкКред2");
	СубкКред3=ПараметрыВычислений.Получить("СубкКред3");
	СтавкаНДСРег=ПараметрыВычислений.Получить("СтавкаНДСРег");
	ВидУчетаНДСРег=ПараметрыВычислений.Получить("ВидУчетаНДСРег");
	ОблагаемаяБазаНДСРег=ПараметрыВычислений.Получить("ОблагаемаяБазаНДСРег");
	КлиентРег=ПараметрыВычислений.Получить("КлиентРег");
	ДоговорРег=ПараметрыВычислений.Получить("ДоговорРег");
	СтавкаНПРег=ПараметрыВычислений.Получить("СтавкаНПРег");
	ПоставщикКоммРег=ПараметрыВычислений.Получить("ПоставщикКоммРег");
	ДоговорКоммРег=ПараметрыВычислений.Получить("ДоговорКоммРег");
	ВидОтгрузкиРег=ПараметрыВычислений.Получить("ВидОтгрузкиРег");
	КредДокументРег=ПараметрыВычислений.Получить("КредДокументРег");
	ДолгРег=ПараметрыВычислений.Получить("ДолгРег");
	НеоплачСтоимостьРег=ПараметрыВычислений.Получить("НеоплачСтоимостьРег");
	ОблагаемаяБазаНПРег=ПараметрыВычислений.Получить("ОблагаемаяБазаНПРег");
	КомитентРег=ПараметрыВычислений.Получить("КомитентРег");
	ДоговорКомитентаРег=ПараметрыВычислений.Получить("ДоговорКомитентаРег");
	ДокПередачиРег=ПараметрыВычислений.Получить("ДокПередачиРег");
	ВзаимозачетСРег=ПараметрыВычислений.Получить("ВзаимозачетСРег");
	НДСУслугиРег=ПараметрыВычислений.Получить("НДСУслугиРег");
	ВалютаДок=ПараметрыВычислений.Получить("ВалютаДок");
	ВидОплатыДок=ПараметрыВычислений.Получить("ВидОплатыДок");
	ДоговорДок=ПараметрыВычислений.Получить("ДоговорДок");
	ДокументОснованиеДок=ПараметрыВычислений.Получить("ДокументОснованиеДок");
	КлиентДок=ПараметрыВычислений.Получить("КлиентДок");
	КодКоррСчетаДок=ПараметрыВычислений.Получить("КодКоррСчетаДок");
	ПриложениеДок=ПараметрыВычислений.Получить("ПриложениеДок");
	ПринятоОтДок=ПараметрыВычислений.Получить("ПринятоОтДок");
	РежимОплатыДок=ПараметрыВычислений.Получить("РежимОплатыДок");
	СтавкаНДСДок=ПараметрыВычислений.Получить("СтавкаНДСДок");
	СтавкаНПДок=ПараметрыВычислений.Получить("СтавкаНПДок");
	СуммаДок=ПараметрыВычислений.Получить("СуммаДок");
	СкладДок=ПараметрыВычислений.Получить("СкладДок");
	СкладПолучательДок=ПараметрыВычислений.Получить("СкладПолучательДок");
	ТоварДок=ПараметрыВычислений.Получить("ТоварДок");
	КоличествоДок=ПараметрыВычислений.Получить("КоличествоДок");
	ЕдиницаДок=ПараметрыВычислений.Получить("ЕдиницаДок");
	КоэффициентДок=ПараметрыВычислений.Получить("КоэффициентДок");
	ИтогНДСДок=ПараметрыВычислений.Получить("ИтогНДСДок");
	// ----- Общепит -----
	СкладРег=ПараметрыВычислений.Получить("СкладРег");
	//Нужны параметры по ставке НДС 10,20,0 - СРАЗУ СУММУ
	Расшифровка=СоздатьОбъект("СписокЗначений");
	Если ПустоеЗначение(КодПроводки)=1 Тогда
		Сообщить("Не передан код проводки!");
		СтатусВозврата(0);
		Возврат Расшифровка;
	КонецЕсли;
	Попытка
		Если КодПроводки=2 Тогда  // "Поступл. тов. на склад" (ПоРегПартииТоваров)
			СчетДебета="41."+СубСчет41(СкладРег);
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="60.1";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=ТоварРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=СкладРег;
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1=КлиентДок(ТекДок);
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=СубкКред2_ПоКоду_2();
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(ОстатокТовараРег,"Количество");
			Расшифровка.ДобавитьЗначение(СтоимостьРег,"Сумма");
		ИначеЕсли КодПроводки=35 Тогда  // "Зачтен НП аванса" (ПоРегВзаиморасчетыПокупателей)
			СчетДебета="68.5";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="62.2";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1="Налог";
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкКред1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_35(),"Сумма");
		ИначеЕсли КодПроводки=37 Тогда  // "Зачт.предопл.покупателя" (ПоРегВзаиморасчетыПокупателей)
			СчетДебета="62.2";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="62.1";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=СубкДеб2_ПоКоду_37();
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=СубкКред2_ПоКоду_37();
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			СубкКред3=СубкКред3_ПоКоду_37();
			Расшифровка.ДобавитьЗначение(СубкКред3,"СубкКред3");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_37(),"Сумма");
		ИначеЕсли КодПроводки=41 Тогда  // "Выделен НДС с предоплаты (по оплате)" (ПоРегВзаиморасчетыПокупателей)  
			СчетДебета="76.Н.1";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="68.2";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкКред1="Налог";
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_41(),"Сумма");
		ИначеЕсли КодПроводки=50 Тогда  // "Ввод ост.собств.тов" (ПоРегПартииТоваров)
			СчетДебета="41."+СубСчет41(СкладРег);
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита=СчетКредита_ПоКоду_50();
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=ТоварРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=СкладРег;
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1=СубкКред1_ПоКоду_50();
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			Расшифровка.ДобавитьЗначение(ОстатокТовараРег,"Количество");
			Расшифровка.ДобавитьЗначение(СтоимостьРег,"Сумма");
		ИначеЕсли КодПроводки=51 Тогда  // "Зачтен НДС опл.товаров" (ПоРегНДСприобретенныхТоваров)
			СчетДебета="68.2";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="19.3";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1="Налог";
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкКред1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_51(),"Сумма");
		ИначеЕсли КодПроводки=52 Тогда  // "Введены ост.комис.тов." (ПоРегПартииТоваров)
			СчетДебета="004";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=ТоварРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=КонтрагентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкДеб3=КонтрагентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб3,"СубкДеб3");
			Расшифровка.ДобавитьЗначение(ОстатокТовараРег,"Количество");
			Расшифровка.ДобавитьЗначение(СтоимостьРег+НДСРег,"Сумма");
		ИначеЕсли КодПроводки=55 Тогда  // "Списаны товары" (ПоРегПартииТоваров)
			СчетДебета="94";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="41."+СубСчет41(СкладРег);
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкКред1=ТоварРег;
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=СкладРег;
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(ОстатокТовараРег,"Количество");
			Расшифровка.ДобавитьЗначение(СтоимостьРег,"Сумма");
		ИначеЕсли КодПроводки=57 Тогда  // "Введены взаиморасч.покуп." (ПоРегВзаиморасчетыПокупателей)
			СчетДебета=СчетДебета_ПоКоду_57();
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита=СчетКредита_ПоКоду_57();
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=СубкДеб1_ПоКоду_57();
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=СубкДеб2_ПоКоду_57();
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкДеб3=СубкДеб3_ПоКоду_57();
			Расшифровка.ДобавитьЗначение(СубкДеб3,"СубкДеб3");
			СубкКред1=СубкКред1_ПоКоду_57();
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=СубкКред2_ПоКоду_57();
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(ДолгРег,"Сумма");
		ИначеЕсли КодПроводки=58 Тогда  // "Выделен НДС аванса" (ПоРегВзаиморасчетыПокупателей)
			СчетДебета="76.АВ";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="00";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_58(),"Сумма");
		ИначеЕсли КодПроводки=60 Тогда  // "Введены взаиморасч.пост." (ПоРегВзаиморасчетыПоставщиков)
			СчетДебета=СчетДебета_ПоКоду_60();
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита=СчетКредита_ПоКоду_60();
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=СубкДеб1_ПоКоду_60();
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=СубкДеб2_ПоКоду_60();
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1=СубкКред1_ПоКоду_60();
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=СубкКред2_ПоКоду_60();
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(ДолгРег,"Сумма");
		ИначеЕсли КодПроводки=68 Тогда  // "Себест. отгр. товара" (ПоРегПартииТоваров)
			СчетДебета="90.2.1";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="41."+СубСчет41(СкладРег);
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1="Товар";
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкКред1=ТоварРег;
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=СкладРег;
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(ОстатокТовараРег,"Количество");
			Расшифровка.ДобавитьЗначение(СтоимостьРег,"Сумма");
		ИначеЕсли КодПроводки=69 Тогда  // "Продажа комисс. товаров" (ПоРегПартииТоваров)
			СчетДебета="";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="004";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкКред1=ТоварРег;
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=КонтрагентРег;
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			СубкКред3=КонтрагентРег;
			Расшифровка.ДобавитьЗначение(СубкКред3,"СубкКред3");
			Расшифровка.ДобавитьЗначение(ОстатокТовараРег,"Количество");
			Расшифровка.ДобавитьЗначение(СтоимостьРег+НДСРег,"Сумма");
		ИначеЕсли КодПроводки=71 Тогда  // "Сумма вознаграждения" (ПоРегПартииТоваров)
			СчетДебета="76.5";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="90.1.1";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КонтрагентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=СубкДеб2_ПоКоду_71();
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1="Услуга";
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкДеб2=ВозвратитьСтавкуНДСпоТовару(ТоварРег);
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2"); 
			СубкДеб3=ТоварРег.НалогСПродаж.Получить(ТекДок.ДатаДок);; 
			Расшифровка.ДобавитьЗначение(СубкДеб3,"СубкДеб3");
			//
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_71(),"Сумма");
		ИначеЕсли КодПроводки=95 Тогда  // "Реализация тов. по отп.цене" (ПоРегПартииТоваров)
			СчетДебета=СчетДебета_ПоКоду_95();
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="90.1.1";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КлиентДок(ТекДок);
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=КлиентДок(ТекДок);
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкДеб3=СубкДеб3_ПоКоду_95();
			Расшифровка.ДобавитьЗначение(СубкДеб3,"СубкДеб3");
			СубкКред1="Товар";
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1"); 
			СубкКред2=ВозвратитьСтавкуНДСпоТовару(ТоварРег);
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2"); 
			СубкКред3=ТоварРег.НалогСПродаж.Получить(ТекДок.ДатаДок);
			Расшифровка.ДобавитьЗначение(СубкКред3,"СубкКред3");
			//
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_95(),"Сумма");
		ИначеЕсли КодПроводки=99 Тогда  // "Учтен НДС реализации" (ПоРегПартииТоваров)
			СчетДебета="90.3";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита=СчетКредита_ПоКоду_99();
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1="Товар";
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2= ВозвратитьСтавкуНДСпоТовару(ТоварРег);
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1=СубкКред1_ПоКоду_99();
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=СубкКред2_ПоКоду_99();
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_99(),"Сумма");
		ИначеЕсли КодПроводки=100 Тогда  // "Зачтен НДС аванса" (ПоРегВзаиморасчетыПокупателей)
			СчетДебета="68.2";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="76.АВ";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкКред1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_100(),"Сумма");
		ИначеЕсли КодПроводки=105 Тогда  // "Учет задолж.  покупателя комисс. товаров" (ПоРегПартииТоваров)
			СчетДебета="62.4";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="76.5";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КлиентДок(ТекДок);
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=КлиентДок(ТекДок);
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1=КонтрагентРег;
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=КонтрагентРег;
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_105(),"Сумма");
		ИначеЕсли КодПроводки=106 Тогда  // "Учет НП при покупке комисс. товаров" (ПоРегПартииТоваров)
			СчетДебета="76.5";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="90.6";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КонтрагентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=КонтрагентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1="Товар";
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			Расшифровка.ДобавитьЗначение(НПРег,"Сумма");
		ИначеЕсли КодПроводки=136 Тогда  // "Учтен аванс поставщику" (ПоРегВзаиморасчетыПоставщиков)
			СчетДебета="60.1";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="60.2";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=СубкДеб2_ПоКоду_136();
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_136(),"Сумма");
		ИначеЕсли КодПроводки=138 Тогда  // "Возвр.товар от реализат." (ПоРегПартииТоваров)
			СчетДебета="41."+СубСчет41(СкладРег);
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="45";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=ТоварРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=СкладРег;
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1=КонтрагентРег;
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=КонтрагентРег;
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			СубкКред3=ТоварРег;
			Расшифровка.ДобавитьЗначение(СубкКред3,"СубкКред3");
			Расшифровка.ДобавитьЗначение(?((ПриходРег=1) И (СтатусРег=Купленный),ОстатокТовараРег,0),"Количество");
			Расшифровка.ДобавитьЗначение(?((ПриходРег=1) И (СтатусРег=Купленный),СтоимостьРег,0),"Сумма");
		ИначеЕсли КодПроводки=143 Тогда  // "Тов.передан на реализацию" (ПоРегПартииТоваров)   
			//Если ПродСтоимостьРег<>0 Тогда //в док. на реализацию форм. движение по списанию со склада - на них не форм. проводку
			СчетДебета="45";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="41."+СубСчет41(СкладРег);
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КонтрагентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=КонтрагентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкДеб3=ТоварРег;
			Расшифровка.ДобавитьЗначение(СубкДеб3,"СубкДеб3");
			СубкКред1=ТоварРег;
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=СкладРег;
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(?(ПриходРег=1,ОстатокТовараРег,0),"Количество");
			Расшифровка.ДобавитьЗначение(?(ПриходРег=1,СтоимостьРег+НДСРег,0),"Сумма"); 
			//КонецЕсли;
		ИначеЕсли КодПроводки=149 Тогда  // "Реализация по себест." (ПоРегПартииТоваров) 
			СчетДебета="90.2.1";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="45";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1="Товар";
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкКред1=КонтрагентРег;
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=КонтрагентРег;
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			СубкКред3=ТоварРег;
			Расшифровка.ДобавитьЗначение(СубкКред3,"СубкКред3");
			Расшифровка.ДобавитьЗначение(ОстатокТовараРег,"Количество");
			Расшифровка.ДобавитьЗначение(СтоимостьРег,"Сумма");     
		ИначеЕсли КодПроводки=150 Тогда  // "Поступил аванс Касса" (ПоРегВзаиморасчетыПокупателей)
			СчетДебета="50.1";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="62.2";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1="ВыручкаПоОбычнымВидамДеятельности";
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкКред1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_150(),"Сумма");
		ИначеЕсли КодПроводки=151 Тогда  // "Поступил аванс Банк" (ПоРегВзаиморасчетыПокупателей)
			СчетДебета="51";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="62.2";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=СубкДеб1_ПоКоду_151();
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2="ВыручкаПоОбычнымВидамДеятельности";
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_151(),"Сумма");
		ИначеЕсли КодПроводки=152 Тогда  // "Выделен НДС аванса" (ПоРегВзаиморасчетыПокупателей)
			СчетДебета="76.АВ";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="68.2";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкКред1="Налог";
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_152(),"Сумма");
		ИначеЕсли КодПроводки=155 Тогда  // "Возвр.аванса покупателю Касса" (ПоРегВзаиморасчетыПокупателей)
			СчетДебета="62.2";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="50.1";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1="ПрочиеВыплатыИПеречисления";
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_155(),"Сумма");
		ИначеЕсли КодПроводки=156 Тогда  // "Возвр.аванса покупателю Банк" (ПоРегВзаиморасчетыПокупателей)
			СчетДебета="62.2";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="51";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1=СубкКред1_ПоКоду_156();
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2="ПрочиеВыплатыИПеречисления";
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_156(),"Сумма");
		ИначеЕсли КодПроводки=157 Тогда  // "Возвр.выдел.НДС аванса" (ПоРегВзаиморасчетыПокупателей)
			СчетДебета="68.2";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="76.АВ";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1="Налог";
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкКред1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_157(),"Сумма");
		ИначеЕсли КодПроводки=159 Тогда  // "Поступила оплата Касса" (ПоРегВзаиморасчетыПокупателей)
			СчетДебета="50.1";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита=СчетКредита_ПоКоду_159();
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1="ВыручкаПоОбычнымВидамДеятельности";
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкКред1=СубкКред1_ПоКоду_159();
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=СубкКред2_ПоКоду_159();
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			СубкКред3=СубкКред3_ПоКоду_159();
			Расшифровка.ДобавитьЗначение(СубкКред3,"СубкКред3");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_159(),"Сумма");
		ИначеЕсли КодПроводки=160 Тогда  // "Поступила оплата Банк" (ПоРегВзаиморасчетыПокупателей)
			СчетДебета="51";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="62.1";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=СубкДеб1_ПоКоду_160();
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2="ВыручкаПоОбычнымВидамДеятельности";
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			СубкКред3=СубкКред3_ПоКоду_160();
			Расшифровка.ДобавитьЗначение(СубкКред3,"СубкКред3");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_160(),"Сумма");
		ИначеЕсли КодПроводки=163 Тогда  // "Выделен НП оплаты" (ПоРегВзаиморасчетыПокупателей)
			СчетДебета="76.Н.4";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="68.5";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");  
			СубкДеб2=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");  
			СубкКред1="Налог";
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_163(),"Сумма");
		ИначеЕсли КодПроводки=164 Тогда  // "Выделен НДС оплаты" (ПоРегВзаиморасчетыПокупателей)
			СчетДебета="76.Н.1";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="68.2";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1"); 
			СубкКред1="Налог";
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_164(),"Сумма");
		ИначеЕсли КодПроводки=166 Тогда  // "Поступила оплата Касса за комм. тов." (ПоРегВзаиморасчетыПокупателей)
			СчетДебета="50.1";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="62.4";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1="ВыручкаПоОбычнымВидамДеятельности";
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкКред1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_166(),"Сумма");
		ИначеЕсли КодПроводки=167 Тогда  // "Поступила оплата Банк за комм. тов." (ПоРегВзаиморасчетыПокупателей)
			СчетДебета="51";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="62.4";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=СубкДеб1_ПоКоду_167();
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2="ВыручкаПоОбычнымВидамДеятельности";
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_167(),"Сумма");
		ИначеЕсли КодПроводки=168 Тогда  // "Выделен НП с оплаты" (ПоРегВзаиморасчетыПокупателей)
			СчетДебета="76.5";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="68.5";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КомитентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=КомитентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1="Налог";
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_168(),"Сумма");
		ИначеЕсли КодПроводки=176 Тогда  // "Выпл.аванс поставщику Касса" (ПоРегВзаиморасчетыПоставщиков)
			СчетДебета="60.2";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="50.1";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1="ПриобретениеТоваровПродукцииРаботИУслуг";
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_176(),"Сумма");
		ИначеЕсли КодПроводки=177 Тогда  // "Выпл.аванс поставщику Банк" (ПоРегВзаиморасчетыПоставщиков)
			СчетДебета="60.2";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="51";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1=СубкКред1_ПоКоду_177();
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2="ПриобретениеТоваровПродукцииРаботИУслуг";
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_177(),"Сумма");
		ИначеЕсли КодПроводки=180 Тогда  // "Возвр.аванса поставщиком Касса" (ПоРегВзаиморасчетыПоставщиков)
			СчетДебета="50.1";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="60.2";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1="ПрочиеПоступления";
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкКред1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_180(),"Сумма");
		ИначеЕсли КодПроводки=181 Тогда  // "Возвр.аванса поставщиком Банк" (ПоРегВзаиморасчетыПоставщиков)
			СчетДебета="51";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="60.2";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=СубкДеб1_ПоКоду_181();
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2="ПрочиеПоступления";
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_181(),"Сумма");
		ИначеЕсли КодПроводки=183 Тогда  // "Оплата поставщику Касса" (ПоРегВзаиморасчетыПоставщиков)
			СчетДебета="60.1";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="50.1";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1="ПриобретениеТоваровПродукцииРаботИУслуг";
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_183(),"Сумма");
		ИначеЕсли КодПроводки=184 Тогда  // "Оплата поставщику Банк" (ПоРегВзаиморасчетыПоставщиков)
			СчетДебета="60.1";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="51";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1=СубкКред1_ПоКоду_184();
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2="ПриобретениеТоваровПродукцииРаботИУслуг";
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_184(),"Сумма");
		ИначеЕсли КодПроводки=188 Тогда  // "Оплата комитенту Касса" (ПоРегВзаиморасчетыПоставщиков)
			СчетДебета="76.5";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="50.1";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1=СубкКред1_ПоКоду_188();
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_188(),"Сумма");
		ИначеЕсли КодПроводки=189 Тогда  // "Оплата комитенту Банк" (ПоРегВзаиморасчетыПоставщиков)
			СчетДебета="76.5";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="51";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1=СубкКред1_ПоКоду_189();
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=СубкКред2_ПоКоду_189();
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_189(),"Сумма");
		ИначеЕсли КодПроводки=194 Тогда  // "Поступил товар на реализацию" (ПоРегПартииТоваров)
			СчетДебета="004";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=ТоварРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=КонтрагентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкДеб3=КонтрагентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб3,"СубкДеб3");
			Расшифровка.ДобавитьЗначение(ОстатокТовараРег,"Количество");
			Расшифровка.ДобавитьЗначение(СтоимостьРег+НДСРег,"Сумма");
		ИначеЕсли КодПроводки=198 Тогда  // "Зачт.предопл.покуп. за комм." (ПоРегВзаиморасчетыПокупателей)
			СчетДебета="62.2";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="62.4";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_198(),"Сумма");
		ИначеЕсли КодПроводки=202 Тогда  // "Учтен НП реализации" (ПоРегПартииТоваров)
			СчетДебета="90.6";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="76.Н.4";  
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1="Товар";
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=ТоварРег.НалогСПродаж.Получить(ТекДок.ДатаДок);; 
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1=КлиентДок(ТекДок);
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=КлиентДок(ТекДок);
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2"); 
			Расшифровка.ДобавитьЗначение(НПРег,"Сумма");
		ИначеЕсли КодПроводки=206 Тогда  // "Выделен НП с предоплаты (по оплате)" (ПоРегВзаиморасчетыПокупателей)
			СчетДебета="76.Н.4";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="68.5";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");   
			СубкДеб2=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1="Налог";
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_206(),"Сумма");
		ИначеЕсли КодПроводки=208 Тогда  // "Получен товар в счет ранее возвращенного" (ПоРегВзаиморасчетыПоставщиков)
			СчетДебета="60.1";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="76.2";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_208(),"Сумма");
		ИначеЕсли КодПроводки=217 Тогда  // "Учтен аванс поставщику" (ПоРегВзаиморасчетыПоставщиков)
			СчетДебета="76.5";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="60.2";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_217(),"Сумма");
		ИначеЕсли КодПроводки=224 Тогда  // "(ПС) Введены взаиморасч.покуп." (ПоРегВзаиморасчетыПокупателей)
			СчетДебета="";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="ПС";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкКред1=СубкКред1_ПоКоду_224();
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=СубкКред2_ПоКоду_224();
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_224(),"Сумма");
		ИначеЕсли КодПроводки=227 Тогда  // "(ПС) Зачт.предопл.покупателя" (ПоРегВзаиморасчетыПокупателей)
			СчетДебета="ПС";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_227(),"Сумма");
		ИначеЕсли КодПроводки=230 Тогда  // "(ПС) Поступила оплата" (ПоРегВзаиморасчетыПокупателей)
			СчетДебета="ПС";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_230(),"Сумма");
		ИначеЕсли КодПроводки=238 Тогда  // "Учтен НДС при вводе нач. взаим. (по оплате)" (ПоРегВзаиморасчетыПокупателей)
			СчетДебета="00";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="76.Н.1";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкКред1=КлиентРег;
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_238(),"Сумма");
		ИначеЕсли КодПроводки=243 Тогда  // "Учтен НДС вознаграждения" (ПоРегПартииТоваров)
			СчетДебета="90.3";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита=СчетКредита_ПоКоду_243();
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1="Услуга";
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=ВозвратитьСтавкуНДСпоТовару(ТоварРег);
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1=СубкКред1_ПоКоду_243();
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=СубкКред2_ПоКоду_243();
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_243(),"Сумма");
		ИначеЕсли КодПроводки=245 Тогда  // "Оплач НДС комм вознагр" (ПоРегПартииТоваров)
			СчетДебета="76.Н.1";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="68.2";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КонтрагентРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкКред1="Налог";
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_245(),"Сумма");
		ИначеЕсли КодПроводки=248 Тогда  // "(ПС) Зачт.предопл.покупателя" (ПоРегПартииТоваров)
			СчетДебета="ПС";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КлиентДок(ТекДок);
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=КлиентДок(ТекДок);
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_248(),"Сумма");
		ИначеЕсли КодПроводки=249 Тогда  // "(ПС) Реализация тов. по отп.цене" (ПоРегПартииТоваров)
			СчетДебета="";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="ПС";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкКред1=КлиентДок(ТекДок);
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=КлиентДок(ТекДок);
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_249(),"Сумма");
		ИначеЕсли КодПроводки=251 Тогда  // "Введены ост. отданных товаров" (ПоРегПартииТоваров)
			СчетДебета=СчетДебета_ПоКоду_251();
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита=СчетКредита_ПоКоду_251();
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=СубкДеб1_ПоКоду_251();
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=СубкДеб2_ПоКоду_251();
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкДеб3=СубкДеб3_ПоКоду_251();
			Расшифровка.ДобавитьЗначение(СубкДеб3,"СубкДеб3");
			Расшифровка.ДобавитьЗначение(ОстатокТовараРег,"Количество");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_251(),"Сумма");
			//Общепит--------------------------------------------------------------------------------------		
		ИначеЕсли КодПроводки=401 Тогда  // "Отпущено в производство" (ПоРегПартииТоваров)  
			Если (ТоварРег.ВидТовара<>Перечисление.ВидыТоваров.Блюдо) или ((ТоварРег.ВидТовара=Перечисление.ВидыТоваров.Блюдо) и (ПрихДокументРег.Вид()<>"МарочныйОтчет")) Тогда
				СчетДебета="20";  
				Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
				СчетКредита="41."+СубСчет41(СкладРег);
				Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
				СубкДеб1="Продукция";
				Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
				СубкДеб2=СтатьяЗатратНаПроизводство;
				Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
				СубкДеб3=Подразделение;
				Расшифровка.ДобавитьЗначение(СубкДеб3,"СубкДеб3");
				СубкКред1=ТоварРег;
				Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
				СубкКред2=СкладРег;
				Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
				Расшифровка.ДобавитьЗначение(ОстатокТовараРег,"Количество");
				Расшифровка.ДобавитьЗначение(СтоимостьРег,"Сумма");
			Иначе
				Расшифровка.УдалитьВсе();
			КонецЕсли; 
		ИначеЕсли КодПроводки=412 Тогда  // "Отпущено в производство" (ПоРегПартииТоваров)  
			Если ((ТоварРег.ВидТовара=Перечисление.ВидыТоваров.Блюдо) и (ПрихДокументРег.Вид()="ПеремещениеНаСкладГотовойПродукции")) Тогда
				СчетДебета="20";  
				Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
				СчетКредита="41."+СубСчет41(СкладРег);
				Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
				СубкДеб1="Продукция";
				Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
				СубкДеб2=СтатьяЗатратНаПроизводство;
				Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
				СубкДеб3=Подразделение;
				Расшифровка.ДобавитьЗначение(СубкДеб3,"СубкДеб3");
				СубкКред1=ТоварРег;
				Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
				СубкКред2=СкладРег;
				Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
				Расшифровка.ДобавитьЗначение(ОстатокТовараРег,"Количество");
				Расшифровка.ДобавитьЗначение(СтоимостьРег,"Сумма");
			Иначе
				Расшифровка.УдалитьВсе();
			КонецЕсли; 	
			
		ИначеЕсли КодПроводки=402 Тогда // "Выделен НДС" (ПоДокПриходнаяНакладная)
			СчетДебета="19.3";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="60.1";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=КлиентДок(ТекДок);
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкКред1=КлиентДок(ТекДок);
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=КлиентДок(ТекДок);
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(ИтогНДСДок,"Сумма");
		ИначеЕсли КодПроводки=403 Тогда  // "Списана себестоимость блюда" (ПоРегПартииТоваров)
			СчетДебета="90.2.1";
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="20";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1="Продукция";
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкКред1="Продукция";
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=СтатьяЗатратНаПроизводство;
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			СубкКред3=Подразделение;
			Расшифровка.ДобавитьЗначение(СубкКред3,"СубкКред3");
			Расшифровка.ДобавитьЗначение(СтоимостьРег,"Сумма");   
			//ИначеЕсли КодПроводки=407 Тогда  // "Произведено блюдо" (ПоРегПартииТоваров)
			//	СчетДебета="41."+СубСчет41(СкладПолучательДок);
			//	Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			//	СчетКредита="41."+СубСчет41(СкладДок);
			//	Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			//	СубкДеб1=ТоварДок;
			//	Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			//	СубкДеб2=СкладПолучательДок;
			//	Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			//	СубкКред1=ТоварДок;
			//	Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			//	СубкКред2=СкладДок;
			//	Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			//	Расшифровка.ДобавитьЗначение(КоличествоДок*КоэффициентДок,"Количество");
			//	Расшифровка.ДобавитьЗначение(СуммаДок,"Сумма"); 
		ИначеЕсли КодПроводки=407 Тогда  // "Произведено блюдо" (ПоРегПартииТоваров)
			СчетДебета="41."+СубСчет41(СкладРег);
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="41."+СубСчет41(ТекДок.Склад);
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=ТоварРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=СкладРег;
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1=ТоварРег;
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			СубкКред2=ТекДок.Склад;
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(ОстатокТовараРег,"Количество");
			Расшифровка.ДобавитьЗначение(СтоимостьРег,"Сумма"); 
			//ИначеЕсли КодПроводки=408 Тогда  // "Списана недостача" (ПоРегПартииТоваров)
			//	СчетДебета="94";
			//	Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			//	СчетКредита="41."+СубСчет41(СкладРег);
			//	Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			//	СубкКред1=ТоварРег;
			//	Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			//	СубкКред2=СкладРег;
			//	Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			//	Расшифровка.ДобавитьЗначение(ОстатокТовараРег,"Количество");
			//	Расшифровка.ДобавитьЗначение(СтоимостьРег,"Сумма");
		ИначеЕсли КодПроводки=409 Тогда  // "Оприходованы излишки" (ПоРегПартииТоваров)
			СчетДебета="41."+СубСчет41(СкладРег);
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="91.1";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=ТоварРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=СкладРег;
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1="ПрочиеОперационныеДоходыРасходы";
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			Расшифровка.ДобавитьЗначение(ОстатокТовараРег,"Количество");
			Расшифровка.ДобавитьЗначение(СтоимостьРег,"Сумма"); 
		ИначеЕсли КодПроводки=410 Тогда  // "Оприходована продукция" (ПоРегПартииТоваров)
			СчетДебета="41."+СубСчет41(СкладРег);
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="20";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=ТоварРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=СкладРег;
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1="Продукция";
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			
			СубкКред2=СтатьяЗатратНаПроизводство;
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(?(ТекДок.Вид()="МарочныйОтчет",0,ОстатокТовараРег),"Количество");
			Расшифровка.ДобавитьЗначение(Сумма_ПоКоду_410(),"Сумма");   
		ИначеЕсли КодПроводки=411 Тогда  // "Оприходована продукция" (ПоРегПартииТоваров)
			СчетДебета="41."+СубСчет41(СкладРег);
			Расшифровка.ДобавитьЗначение(СчетДебета,"СчетДебета");
			СчетКредита="20";
			Расшифровка.ДобавитьЗначение(СчетКредита,"СчетКредита");
			СубкДеб1=ТоварРег;
			Расшифровка.ДобавитьЗначение(СубкДеб1,"СубкДеб1");
			СубкДеб2=СкладРег;
			Расшифровка.ДобавитьЗначение(СубкДеб2,"СубкДеб2");
			СубкКред1="Продукция";
			Расшифровка.ДобавитьЗначение(СубкКред1,"СубкКред1");
			
			СубкКред2=СтатьяЗатратНаПроизводство;
			Расшифровка.ДобавитьЗначение(СубкКред2,"СубкКред2");
			Расшифровка.ДобавитьЗначение(?(ТекДок.Вид()<>"АктРазборки",0,ОстатокТовараРег),"Количество");
			Расшифровка.ДобавитьЗначение(?(ТекДок.Вид()<>"АктРазборки",0,СтоимостьРег),"Сумма");
		КонецЕсли;
	Исключение
		Сообщить("Ошибка в выражении: "+ОписаниеОшибки());
	КонецПопытки;
	Возврат Расшифровка;
КонецФункции

//******************************************************************************
// Процедура СформироватьПроводку(КодПроводки,ПараметрыВычислений)
// 
// Параметры:
// КодПроводки - код рассчитываемой проводки
// ПараметрыВычислений - список значений параметров расчета проводки
// 
// Процедура выполняет формирование образа бух. проводки в объекте ТаблицаПроводок
Процедура СформироватьПроводку(КодПроводки,ПараметрыВычислений)
	
	ПередаваемыеПараметрыВычислений=СоздатьОбъект("СписокЗначений");
	ПараметрыВычислений.Выгрузить(ПередаваемыеПараметрыВычислений);
	
	РезультатыВычислений=РассчитатьПроводку(Число(КодПроводки),ПередаваемыеПараметрыВычислений);
	Если РезультатыВычислений.РазмерСписка()=0 Тогда
		Возврат;	
	КонецЕсли;
	СчетДебета=РезультатыВычислений.Получить("СчетДебета");
	Если ПустоеЗначение(СчетДебета)=1 Тогда
		Если НЕ(ТипЗначенияСтр(СчетДебета)="Строка") Тогда
			Сообщить(" не определен СчетДебета !!! (проводка с кодом "+КодПроводки+")");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СчетКредита=РезультатыВычислений.Получить("СчетКредита");
	Если ПустоеЗначение(СчетКредита)=1 Тогда
		Если НЕ(ТипЗначенияСтр(СчетКредита)="Строка") Тогда
			Сообщить(" не определен СчетКредита !!! (проводка с кодом "+КодПроводки+")");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Сумма=Окр(РезультатыВычислений.Получить("Сумма"),2,1);
	ВалСумма=РезультатыВычислений.Получить("ВалСумма");
	Количество=РезультатыВычислений.Получить("Количество");
	Если (ПустоеЗначение(Сумма)=1) И (ПустоеЗначение(ВалСумма)=1) И (ПустоеЗначение(Количество)=1) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПроводок.НоваяСтрока();
	ТаблицаПроводок.СчетДебета=СчетДебета;
	ТаблицаПроводок.СчетКредита=СчетКредита;
	ТаблицаПроводок.Сумма=Сумма;
	ТаблицаПроводок.ВалСумма=ВалСумма;
	ТаблицаПроводок.Валюта=РезультатыВычислений.Получить("Валюта");
	ТаблицаПроводок.Количество=Количество;
	ТаблицаПроводок.Содержание=ОписательПроводок.Содержание;
	//ТаблицаПроводок.НомерЖурнала=ОписательПроводок.НомерЖурнала;
	ТаблицаПроводок.НомерЖурнала=ВыбрЖурнал;
	ТаблицаПроводок.ПланСчетов=ОписательПроводок.ПланСчетов;
	ТаблицаПроводок.Фирма=Конт.Фирма;
	
	ТаблицаПроводок.СубкДеб1=РезультатыВычислений.Получить("СубкДеб1"); //субконто дебета 1
	ТаблицаПроводок.СубкДеб2=РезультатыВычислений.Получить("СубкДеб2"); //субконто дебета 2
	ТаблицаПроводок.СубкДеб3=РезультатыВычислений.Получить("СубкДеб3"); //субконто дебета 3
	ТаблицаПроводок.СубкКред1=РезультатыВычислений.Получить("СубкКред1"); //субконто кредита 1
	ТаблицаПроводок.СубкКред2=РезультатыВычислений.Получить("СубкКред2"); //субконто кредита 2
	ТаблицаПроводок.СубкКред3=РезультатыВычислений.Получить("СубкКред3"); //субконто кредита 3
КонецПроцедуры

//******************************************************************************
// Функция СформироватьПараметрыАлгоритмов(КодПроводки,Рег=0)
// 
// Параметры:
// КодПроводки - код рассчитываемой проводки
// Рег - регистр, по движению которого формируется проводка (необязательный),
//       если не указан, значит проводка по документу
// 
// Возвращает список значений параметров формируемой бух. проводки
Функция СформироватьПараметрыАлгоритмов(КодПроводки,Рег=0)
	
	Поз=0;
	ОписательПроводок.НайтиЗначение(Число(КодПроводки),Поз,"КодПроводки");
	ОписательПроводок.ПолучитьСтрокуПоНомеру(Поз);
	
	ПараметрыВычислений=СоздатьОбъект("СписокЗначений"); 
	
	// ------ ОБЩИЕ ПАРАМЕТРЫ ПРОВОДКИ --------
	ПараметрыВычислений.ДобавитьЗначение(ОписательПроводок.ПланСчетов,"ПланСчетов");
	
	ПараметрыВычислений.ДобавитьЗначение("","СчетДебета");
	
	ПараметрыВычислений.ДобавитьЗначение("","СчетКредита");
	
	ПараметрыВычислений.ДобавитьЗначение(Конт,"ТекДок");
	
	ПараметрыВычислений.ДобавитьЗначение(Конт.ДатаДок,"ДатаДок");
	
	// ------ ОБЩИЕ РЕКВИЗИТЫ ДОКУМЕНТА --------
	Для Инд=1 По Метаданные.ОбщийРеквизитДокумента() Цикл
		Реквизит=Метаданные.ОбщийРеквизитДокумента(Инд).Идентификатор;
		ПараметрыВычислений.ДобавитьЗначение(Конт.ПолучитьАтрибут(Реквизит),Реквизит+"Док");
	КонецЦикла;
	
	Если ОписательПроводок.ПоДокПоРег>1 Тогда  // // по документу
		Если (ПустоеЗначение(ОписательПроводок.ВидДокумента)=0) Тогда
			
			// ------ РЕКВИЗИТЫ ШАПКИ ДОКУМЕНТА --------
			Для Инд=1 По Метаданные.Документ(СокрЛП(ОписательПроводок.ВидДокумента)).РеквизитШапки() Цикл
				Реквизит=Метаданные.Документ(СокрЛП(ОписательПроводок.ВидДокумента)).РеквизитШапки(Инд).Идентификатор;
				ПараметрыВычислений.ДобавитьЗначение(Конт.ПолучитьАтрибут(Реквизит),Реквизит+"Док");
			КонецЦикла;
			
			// выделим итоги по реквизитам Табл. части у которых ИтогПоКолонке="1"
			Для Инд=1 По Метаданные.Документ(СокрЛП(ОписательПроводок.ВидДокумента)).РеквизитТабличнойЧасти() Цикл
				Если Метаданные.Документ(СокрЛП(ОписательПроводок.ВидДокумента)).РеквизитТабличнойЧасти(Инд).ИтогПоКолонке=1 Тогда
					Реквизит=Метаданные.Документ(СокрЛП(ОписательПроводок.ВидДокумента)).РеквизитТабличнойЧасти(Инд).Идентификатор;
					ПараметрыВычислений.ДобавитьЗначение(Конт.Итог(Реквизит),"Итог"+Реквизит+"Док");
				КонецЕсли;
			КонецЦикла;
			
			Если ОписательПроводок.ПоВсемуПоСтрокам>1 Тогда   // по строкам
				
				// ------ РЕКВИЗИТЫ ТАБЛИЧНОЙ ЧАСТИ ДОКУМЕНТА ---------
				Для Инд=1 По Метаданные.Документ(СокрЛП(ОписательПроводок.ВидДокумента)).РеквизитТабличнойЧасти() Цикл
					Реквизит=Метаданные.Документ(СокрЛП(ОписательПроводок.ВидДокумента)).РеквизитТабличнойЧасти(Инд).Идентификатор;
					ПараметрыВычислений.ДобавитьЗначение(Конт.ПолучитьАтрибут(Реквизит),Реквизит+"Док");
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если (ПустоеЗначение(Рег)=0) Тогда
		Если ОписательПроводок.ПоДокПоРег=1 Тогда  // по регистру
			Если (ПустоеЗначение(ОписательПроводок.ВидРегистра)=0) Тогда
				
				// ------ ВИД ДВИЖЕНИЯ РЕГИСТРА --------
				ПараметрыВычислений.ДобавитьЗначение(Рег.Приход,"ПриходРег");
				ПараметрыВычислений.ДобавитьЗначение(Рег.Расход,"РасходРег");
				
				// ------ ИЗМЕРЕНИЯ РЕГИСТРА --------
				Для Инд=1 По Метаданные.Регистр(СокрЛП(ОписательПроводок.ВидРегистра)).Измерение() Цикл
					Реквизит=Метаданные.Регистр(СокрЛП(ОписательПроводок.ВидРегистра)).Измерение(Инд).Идентификатор;
					ПараметрыВычислений.ДобавитьЗначение(Рег.ПолучитьАтрибут(Реквизит),Реквизит+"Рег");
				КонецЦикла;
				
				// ------ РЕСУРСЫ РЕГИСТРА --------
				Для Инд=1 По Метаданные.Регистр(СокрЛП(ОписательПроводок.ВидРегистра)).Ресурс() Цикл
					Реквизит=Метаданные.Регистр(СокрЛП(ОписательПроводок.ВидРегистра)).Ресурс(Инд).Идентификатор;
					ПараметрыВычислений.ДобавитьЗначение(Рег.ПолучитьАтрибут(Реквизит),Реквизит+"Рег");
				КонецЦикла;
				
				// ------ РЕКВИЗИТЫ РЕГИСТРА --------
				Для Инд=1 По Метаданные.Регистр(СокрЛП(ОписательПроводок.ВидРегистра)).Реквизит() Цикл
					Реквизит=Метаданные.Регистр(СокрЛП(ОписательПроводок.ВидРегистра)).Реквизит(Инд).Идентификатор;
					ПараметрыВычислений.ДобавитьЗначение(Рег.ПолучитьАтрибут(Реквизит),Реквизит+"Рег");
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВычислений.ДобавитьЗначение("","СубкДеб1");
	ПараметрыВычислений.ДобавитьЗначение("","СубкДеб2");
	ПараметрыВычислений.ДобавитьЗначение("","СубкДеб3");
	ПараметрыВычислений.ДобавитьЗначение("","СубкКред1");
	ПараметрыВычислений.ДобавитьЗначение("","СубкКред2");
	ПараметрыВычислений.ДобавитьЗначение("","СубкКред3");
	
	Возврат ПараметрыВычислений;
КонецФункции
//******************************************************************************
// Процедура ФормироватьПроводки()
// 
// Параметры: нет
// 
// Выполняет формирование бух. проводок по документу
Процедура ФормироватьПроводки()
	Перем КодПроводки;
	
	СписокДопПараметров.УдалитьВсе();
	ВидДок=Конт.Вид();
	// Сначала проводки по всему документу
	Ситуация="ПоДок"+ВидДок+"ПоВсему";
	Поз=СитуацииПроводок.НайтиЗначение(Ситуация);
	Если ПустоеЗначение(Поз)=0 Тогда
		СитуацииПроводок.ПолучитьЗначение(Поз,КодПроводки);
		Если ПустоеЗначение(КодПроводки)=0 Тогда
			КодПроводки=Число(КодПроводки);
			ПараметрыВычислений=СформироватьПараметрыАлгоритмов(КодПроводки,);
			СформироватьПроводку(КодПроводки,ПараметрыВычислений);
			// могут быть еще проводки в этой ситуации
			Для Н=Поз+1 По СитуацииПроводок.РазмерСписка() Цикл
				СледСитуация=СитуацииПроводок.ПолучитьЗначение(Н,КодПроводки);
				Если СледСитуация<>Ситуация Тогда
					Прервать;				
				КонецЕсли;
				КодПроводки=Число(КодПроводки);
				ПараметрыВычислений=СформироватьПараметрыАлгоритмов(КодПроводки,);
				СформироватьПроводку(КодПроводки,ПараметрыВычислений);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//  проводки по строкам документа
	Ситуация="ПоДок"+ВидДок+"ПоСтрокам";
	Поз=СитуацииПроводок.НайтиЗначение(Ситуация);
	Если ПустоеЗначение(Поз)=0 Тогда
		СитуацииПроводок.ПолучитьЗначение(Поз,КодПроводки);
		Если ПустоеЗначение(КодПроводки)=0 Тогда
			КодПроводки=Число(КодПроводки);
			Конт.ВыбратьСтроки();
			Пока Конт.ПолучитьСтроку()=1 Цикл
				ПараметрыВычислений=СформироватьПараметрыАлгоритмов(КодПроводки,);
				СформироватьПроводку(КодПроводки,ПараметрыВычислений);
				// могут быть еще проводки в этой ситуации
				Для Н=Поз+1 По СитуацииПроводок.РазмерСписка() Цикл
					СледКодПроводки = КодПроводки;
					СледСитуация=СитуацииПроводок.ПолучитьЗначение(Н,СледКодПроводки);
					Если СледСитуация<>Ситуация Тогда
						Прервать;				
					КонецЕсли;
					СледКодПроводки=Число(СледКодПроводки);
					ПараметрыВычислений=СформироватьПараметрыАлгоритмов(СледКодПроводки,);
					СформироватьПроводку(СледКодПроводки,ПараметрыВычислений);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// подготовка к проведению по движениям регистров
	
	//ТаблицаНДСприобретенныхТоваров=СоздатьОбъект("ТаблицаЗначений");
	//ТаблицаНДСприобретенныхТоваров.НоваяКолонка("Поставка");
	//ТаблицаНДСприобретенныхТоваров.НоваяКолонка("СтавкаНДС");
	//ТаблицаНДСприобретенныхТоваров.НоваяКолонка("СуммаСписанНДСТовараПереданногоВРозницу","Число",19,5);
	//ТаблицаНДСприобретенныхТоваров.НоваяКолонка("СуммаСписанНДСВозвращенногоНеоплаченногоТовара","Число",19,5);
	//Рег=СоздатьОбъект("Регистр.НДСприобретенныхТоваров");
	//Рег.ВыбратьДвиженияДокумента(Конт);
	//Пока Рег.ПолучитьДвижение()=1 Цикл
	//	ТаблицаНДСприобретенныхТоваров.НоваяСтрока();
	//	ТаблицаНДСприобретенныхТоваров.Поставка=Рег.Поставка;
	//	ТаблицаНДСприобретенныхТоваров.СтавкаНДС=Рег.СтавкаНДС;
	//	Если Рег.КодОперации=СписанНДСТовараПереданногоВРозницу Тогда
	//		ТаблицаНДСприобретенныхТоваров.СуммаСписанНДСТовараПереданногоВРозницу=Рег.НДС;
	//		Продолжить;
	//	КонецЕсли;
	//	Если Рег.КодОперации=СписанНДСВозвращенногоНеоплаченногоТовара Тогда
	//		ТаблицаНДСприобретенныхТоваров.СуммаСписанНДСВозвращенногоНеоплаченногоТовара=Рег.НДС;
	//		Продолжить;
	//	КонецЕсли;
	//КонецЦикла;
	//ТаблицаНДСприобретенныхТоваров.Свернуть("Поставка,СтавкаНДС","СуммаСписанНДСТовараПереданногоВРозницу,СуммаСписанНДСВозвращенногоНеоплаченногоТовара");
	
	// Теперь проводки по движениям регистров
	Для Н=1 По СписокВидовРегистров.РазмерСписка() Цикл
		ВидРег=СписокВидовРегистров.ПолучитьЗначение(Н);
		
		Рег=СоздатьОбъект("Регистр."+ВидРег);
		
		Рег.ВыбратьДвиженияДокумента(Конт);
		Пока Рег.ПолучитьДвижение()=1 Цикл
			Если ВидРег<>"НДСприобретенныхТоваров" Тогда
				Если Рег.Фирма<>Конт.Фирма Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Ситуация="ПоРег"+ВидРег+"_"+Рег.КодОперации;
			Поз=СитуацииПроводок.НайтиЗначение(Ситуация);
			Если ПустоеЗначение(Поз)=0 Тогда
				СитуацииПроводок.ПолучитьЗначение(Поз,КодПроводки);
				Если ПустоеЗначение(КодПроводки)=0 Тогда
					КодПроводки=Число(КодПроводки);
					ПараметрыВычислений=СформироватьПараметрыАлгоритмов(КодПроводки,Рег);
					СформироватьПроводку(КодПроводки,ПараметрыВычислений);
					// могут быть еще проводки в этой ситуации
					Для М=Поз+1 По СитуацииПроводок.РазмерСписка() Цикл
						СледСитуация=СитуацииПроводок.ПолучитьЗначение(М,КодПроводки);
						Если СледСитуация<>Ситуация Тогда
							Прервать;				
						КонецЕсли;
						КодПроводки=Число(КодПроводки);
						ПараметрыВычислений=СформироватьПараметрыАлгоритмов(КодПроводки,Рег);
						СформироватьПроводку(КодПроводки,ПараметрыВычислений);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

//******************************************************************************
// Процедура ВыгрузитьПроводки()
// 
// Параметры: нет
// 
// Выполняет выгрузку бух. проводок 
Процедура ВыгрузитьПроводки()
	// Здесь формируется отчет, который использует регистры, критичные к
	// последовательности проведения документов
	// поэтому сравним установленные даты периода формируемого отчета с ГП
	Если ВыбрФирма.Выбран()=1 Тогда
		ВыбрФирма.ИспользоватьДату(ДатаКон);
		Если ВыбрФирма.МетодРасчетаСебестоимостиФинансовогоУчета.Выбран()=0 Тогда
			Предупреждение("   Фин. учет по фирме "+ВыбрФирма+" не ведется."+РазделительСтрок+"     Выгрузка проводок по ней не производится.");
			Возврат;
		КонецЕсли;
	Иначе
		Предупреждение("Выберите фирму!");
		Возврат;
	КонецЕсли;
	Если глПроверкаИнтервалаОтчета(ДатаНач,ДатаКон)=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДатаГод(ДатаНач)<>ДатаГод(ДатаКон) Тогда
		Предупреждение("Выбранный период включает даты разных лет");
		Возврат;
	КонецЕсли;
	
	Если МыПечатаем=0 тогда
		СтрСооб="выгрузка проводок не может быть произведена. Возможно, следует восстановить последовательность. Для этого можно воспользоваться проведением документов (пункт меню ""Операции"") либо групповой обработкой документов. Восстановить последовательность сейчас (это может занять продолжительное время)?.";
		
		ПозицияОтчета=?(ДатаКон<ПолучитьДатуТА(),ДатаКон,ПолучитьПозициюТА());
		
		//Если Последовательность.ОсновнаяПоследовательность.Проверить(ПозицияОтчета)=0 Тогда
		//	Результат = Вопрос("Дата конца формирования проводок установлена после"+РазделительСтрок+"Границы последовательности документов ("
		//	+Последовательность.ОсновнаяПоследовательность.Получить()+"), "+РазделительСтрок+СтрСооб,"Да+Нет");
		//	Если Результат="Нет" Тогда
		//		Возврат;
		//	ИначеЕсли Результат="Да" Тогда	
		//		Если глВосстановлениеПоследовательности()=0 Тогда
		//			Предупреждение("Не удалось восстановить последовательность.");
		//			Возврат;
		//		КонецЕсли;	
		//	КонецЕсли;	       
		//КонецЕсли;             
	КонецЕсли;//мы печатаем
	
	Если МыПечатаем=0 тогда
		Если ПустаяСтрока(ФайлВыгрузки)=1 Тогда
			Предупреждение("Не указан файл.");
			Возврат;
		ИначеЕсли ФС.СуществуетФайл(ФайлВыгрузки) = 1 Тогда
			Если Вопрос("Файл "+ФайлВыгрузки+" существует!"+РазделительСтрок+"Переписать?","Да+Нет") = "Нет" Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;                             
	Иначе // мы печатаем
		Таб=СоздатьОбъект("Таблица");
		Таб.ИсходнаяТаблица("ПечатьПроводок");
		ПечПланСчетов=" (План счетов 2001 г.)";
		Расшифровка=СоздатьОбъект("СписокЗначений");
		Расшифровка.Установить("Отчет","ВыборПланаСчетов");
		Таб.ВывестиСекцию("Заголовок");
		Таб.ВывестиСекцию("ШапкаПроводок");
	КонецЕсли; 
	
	ТекстВыгрузкиДанных = СоздатьОбъект("Текст");
	ТекстВыгрузкиДанных.КодоваяСтраница(?(СокрЛП(ВыбКодировка)="Windows",0,1));
	
	Периодичность = СокрЛП(ВыбПериод);
	
	
	//----------------------------
	Запрос=СоздатьОбъект("Запрос");
	ТекстЗапроса =
	"//{{ЗАПРОС(0)
	|Период с ДатаНач по ДатаКон;
	|ОбрабатыватьДокументы Проведенные;
	|ТекДок=
	|Документ.ПриходнаяНакладная.ТекущийДокумент,
	|Документ.МарочныйОтчет.ТекущийДокумент,
	|Документ.ПеремещениеНаСкладГотовойПродукции.ТекущийДокумент,
	|Документ.СличительнаяВедомость.ТекущийДокумент,
	|Документ.ПриходныйОрдерТБ.ТекущийДокумент,
	|Документ.ДвиженияДенежныхСредств.ТекущийДокумент,
	|Документ.Перемещение.ТекущийДокумент,
	|Документ.ВводОстатковКредита.ТекущийДокумент,
	|Документ.ВводОстатковРеализации.ТекущийДокумент,
	|Документ.ВводОстатковТоваров.ТекущийДокумент,
	|Документ.ДвиженияДенежныхСредств.ТекущийДокумент,
	|Документ.ИнвентаризацияРеализатора.ТекущийДокумент,
	|Документ.ОтчетРеализатора.ТекущийДокумент,
	|Документ.Перемещение.ТекущийДокумент,
	|Документ.ПриходнаяРеализатора.ТекущийДокумент,
	|Документ.ПриходныйОрдерТБ.ТекущийДокумент,
	|Документ.РасходнаяНакладная.ТекущийДокумент,
	|Документ.РасходнаяРеализатора.ТекущийДокумент,
	|Документ.РасходныйОрдерТБ.ТекущийДокумент,
	|Документ.РегистрацияСчета_фактуры.ТекущийДокумент,
	|Документ.СнятиеРезерва.ТекущийДокумент,
	|Документ.Списание.ТекущийДокумент,
	|Документ.Счет.ТекущийДокумент,
	|Документ.Счет_фактура.ТекущийДокумент,
	|Документ.Чек.ТекущийДокумент,
	|Документ.АктРазборки.ТекущийДокумент;
	|ДатаДок=
	|Документ.ПриходнаяНакладная.ДатаДок,
	|Документ.МарочныйОтчет.ДатаДок, 
	|Документ.ПеремещениеНаСкладГотовойПродукции.ДатаДок,
	|Документ.СличительнаяВедомость.ДатаДок,  
	|Документ.ПриходныйОрдерТБ.ДатаДок,
	|Документ.ДвиженияДенежныхСредств.ДатаДок,
	|Документ.Перемещение.ДатаДок,
	|Документ.ВводОстатковКредита.ДатаДок,
	|Документ.ВводОстатковРеализации.ДатаДок,
	|Документ.ВводОстатковТоваров.ДатаДок,
	|Документ.ДвиженияДенежныхСредств.ДатаДок,
	|Документ.ИнвентаризацияРеализатора.ДатаДок,
	|Документ.ОтчетРеализатора.ДатаДок,
	|Документ.Перемещение.ДатаДок,
	|Документ.ПриходнаяРеализатора.ДатаДок,
	|Документ.ПриходныйОрдерТБ.ДатаДок,
	|Документ.РасходнаяНакладная.ДатаДок,
	|Документ.РасходнаяРеализатора.ДатаДок,
	|Документ.РасходныйОрдерТБ.ДатаДок,
	|Документ.РегистрацияСчета_фактуры.ДатаДок,
	|Документ.СнятиеРезерва.ДатаДок,
	|Документ.Списание.ДатаДок,
	|Документ.Счет.ДатаДок,
	|Документ.Счет_фактура.ДатаДок,
	|Документ.Чек.ДатаДок,  
	|Документ.АктРазборки.ДатаДок;
	|";
	Если Периодичность<>"Документ" Тогда
		ТекстЗапроса=ТекстЗапроса+"
		|Группировка "+Периодичность+";
		|Группировка ДатаДок;";
	КонецЕсли;
	ТекстЗапроса=ТекстЗапроса+"
	|Группировка Документ;
	|";
	Если ПустоеЗначение(ПереданДок)=0 тогда
		ТекстЗапроса=ТекстЗапроса+"
		|Условие (ТекДок=ПереданДок);
		|";		
	КонецЕсли;
	
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Сообщить("В запросе ошибка.","!");
		Возврат;
	КонецЕсли;
	
	// первая служебная строка
	Стр="""ФорматФайла=1"",""РазделительСтрок="+СтрРазделительСтрок+"""";
	ТекстВыгрузкиДанных.ДобавитьСтроку(Стр);
	// вторая служебная строка - замещение ранее выгруженных операций
	Стр=""""",""Документ.Операция"",""ЗамещеныВсе"",""?ДатаНач()"+Выгрузить(ДатаНач)+""",""?ДатаКон()"+Выгрузить(ДатаКон)+""",""?Операция.Содержание()"+СтрСодержаниеОперации+"""";
	ТекстВыгрузкиДанных.ДобавитьСтроку(Стр);
	
	Если ВыгружатьКнигуПродаж=1 Тогда       
		// служебная строка - замещение ранее выгруженных записей книги продаж
		Стр=""""",""Документ.ЗаписьКнигиПродажТорг"",""ЗамещеныВсе"",""?ДатаНач()"+Выгрузить(ДатаНач)+""",""?ДатаКон()"+Выгрузить(ДатаКон)+"""";
		ТекстВыгрузкиДанных.ДобавитьСтроку(Стр);
	КонецЕсли;
	Если ВыгружатьКнигуПокупок=1 Тогда       
		// служебная строка - замещение ранее выгруженных записей книги покупок
		Стр=""""",""Документ.ЗаписьКнигиПокупокТорг"",""ЗамещеныВсе"",""?ДатаНач()"+Выгрузить(ДатаНач)+""",""?ДатаКон()"+Выгрузить(ДатаКон)+"""";
		ТекстВыгрузкиДанных.ДобавитьСтроку(Стр);
	КонецЕсли;
	
	Если ВыгружатьКассовуюКнигу=1 Тогда       
		Если Периодичность<>"Документ" Тогда
			Предупреждение("Кассовую книгу можно выгружать только при установке периодичности ""Документ""");
			Возврат;
		КонецЕсли;
		// служебная строка - замещение ранее выгруженных записей кассовой книги
		Стр=""""",""Документ.ПриходныйОрдерТорг"",""ЗамещеныВсе"",""?ДатаНач()"+Выгрузить(ДатаНач)+""",""?ДатаКон()"+Выгрузить(ДатаКон)+"""";
		ТекстВыгрузкиДанных.ДобавитьСтроку(Стр);
		Стр=""""",""Документ.РасходныйОрдерТорг"",""ЗамещеныВсе"",""?ДатаНач()"+Выгрузить(ДатаНач)+""",""?ДатаКон()"+Выгрузить(ДатаКон)+"""";
		ТекстВыгрузкиДанных.ДобавитьСтроку(Стр);
	КонецЕсли;
	
	ТаблицаПроводок.УдалитьСтроки();
	
	Если Периодичность<>"Документ" Тогда
		Пока Запрос.Группировка(Периодичность) = 1 Цикл
			ДатаОперации='01.01.1980';	
			Пока Запрос.Группировка("ДатаДок") = 1 Цикл
				Пока Запрос.Группировка("Документ") = 1 Цикл
					Конт=Запрос.Документ;
					Если ВыбрФирма.Выбран() = 1 Тогда
						Если Конт.Фирма<>ВыбрФирма Тогда 
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					Если ДатаОперации<Конт.ДатаДок Тогда 
						ДатаОперации=Конт.ДатаДок;
					КонецЕсли;
					Состояние("    "+Формат(Конт.ДатаДок,"ДДДММГГГГ")+" : "+Конт+" ");
					ФормироватьПроводки();
				КонецЦикла;
			КонецЦикла;
			
			ТаблицаПроводок.Свернуть("СчетДебета,СчетКредита,Содержание,Валюта,Фирма,ПланСчетов,НомерЖурнала,СубкДеб1,СубкДеб2,СубкДеб3,СубкКред1,СубкКред2,СубкКред3","Сумма,ВалСумма,Количество");		
			
			Если ТаблицаПроводок.КоличествоСтрок()>0 Тогда
				ТаблицаОпераций.УдалитьСтроки();
				ТаблицаОпераций.НоваяСтрока();
				ТаблицаОпераций.ДатаДок=ДатаОперации;
				ТаблицаОпераций.ВремяДок=ТекущееВремя();
				ТаблицаОпераций.Содержание=СтрСодержаниеОперации;
				ТаблицаОпераций.СуммаОперации=ТаблицаПроводок.Итог("Сумма");
				Если ПустоеЗначение(ВыбрФирма)=0 Тогда 
					ТаблицаОпераций.Фирма=ВыбрФирма;
				Иначе
					ТаблицаОпераций.Фирма=Константа.ОсновнаяФирма;
				КонецЕсли;
				ТаблицаОпераций.Автор=Пользователь;
				ТаблицаОпераций.ТаблицаПроводок=ТаблицаПроводок;
				Если МыПечатаем=1 тогда
					ПечатьОперации(ТаблицаОпераций);		
				Иначе
					ВыгрузитьОбъектСпособом(ТаблицаОпераций,"Операция");
				КонецЕсли;
			КонецЕсли;
			ТаблицаПроводок.УдалитьСтроки();
		КонецЦикла;
	Иначе
		Пока Запрос.Группировка("Документ") = 1 Цикл
			Конт=Запрос.Документ;
			Если ВыбрФирма.Выбран() = 1 Тогда
				Если Конт.Фирма<>ВыбрФирма Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Состояние("    "+Формат(Конт.ДатаДок,"ДДДММГГГГ")+" : "+Конт+" ");
			ФормироватьПроводки();
			ТаблицаПроводок.Свернуть("СчетДебета,СчетКредита,Содержание,Валюта,Фирма,ПланСчетов,НомерЖурнала,СубкДеб1,СубкДеб2,СубкДеб3,СубкКред1,СубкКред2,СубкКред3","Сумма,ВалСумма,Количество");
			
			Если  (ВыгружатьКассовуюКнигу=1) и 
			((Конт.Вид()="ПриходныйОрдерТБ") ИЛИ
			(Конт.Вид()="РасходныйОрдерТБ")
			) и (Конт.Проведен()=1) и (Конт.ТипУчета>Упр) Тогда
				ВыгрузитьКассовыйОрдер(Конт,"");   
			КонецЕсли; 
			
			Если ТаблицаПроводок.КоличествоСтрок()>0 Тогда
				ТаблицаОпераций.УдалитьСтроки();
				ТаблицаОпераций.НоваяСтрока();
				ТаблицаОпераций.ДатаДок=Конт.ДатаДок;
				ТаблицаОпераций.ВремяДок=Конт.ПолучитьВремя();
				ТаблицаОпераций.Содержание=СтрСодержаниеОперации; 
				ТаблицаОпераций.Комментарий=Конт.ПредставлениеВида()+" №"+Конт.НомерДок;
				ТаблицаОпераций.СуммаОперации=ТаблицаПроводок.Итог("Сумма");
				Если ПустоеЗначение(ВыбрФирма)=0 Тогда 
					ТаблицаОпераций.Фирма=ВыбрФирма;
				Иначе
					ТаблицаОпераций.Фирма=Константа.ОсновнаяФирма;
				КонецЕсли;
				ТаблицаОпераций.Автор=Пользователь;
				ТаблицаОпераций.ТаблицаПроводок=ТаблицаПроводок;
				Если МыПечатаем=1 тогда
					ПечатьОперации(ТаблицаОпераций);		
				Иначе
					ВыгрузитьОбъектСпособом(ТаблицаОпераций,"Операция");
				КонецЕсли;
			КонецЕсли;
			ТаблицаПроводок.УдалитьСтроки();
			
		КонецЦикла;
	КонецЕсли;        
	Если ВыгружатьКнигуПродаж=1 Тогда
		СписокПараметров=СоздатьОбъект("СписокЗначений");
		СписокПараметров.Установить("ДатаНачала",ДатаНач);
		СписокПараметров.Установить("ДатаКонца",ДатаКон);
		СписокПараметров.Установить("ВыбФирма",ВыбрФирма);
		ТаблицаКнигиПродаж.УдалитьСтроки();
		СписокПараметров.Установить("Таблица",ТаблицаКнигиПродаж);
		ОткрытьФорму("Отчет.КнигаПродаж#",СписокПараметров);
		ТаблицаКнигиПродаж.ВыбратьСтроки();
		Пока ТаблицаКнигиПродаж.ПолучитьСтроку()=1 Цикл
			ВыгрузитьЗаписьКнигиПродаж(ТаблицаКнигиПродаж, "");
		КонецЦикла;
	КонецЕсли;
	Если ВыгружатьКнигуПокупок=1 Тогда
		СписокПараметров=СоздатьОбъект("СписокЗначений");
		СписокПараметров.Установить("ДатаНачала",ДатаНач);
		СписокПараметров.Установить("ДатаКонца",ДатаКон);
		СписокПараметров.Установить("ВыбФирма",ВыбрФирма);
		ТаблицаКнигиПокупок.УдалитьСтроки();
		СписокПараметров.Установить("Таблица",ТаблицаКнигиПокупок);
		
		ОткрытьФорму("Журнал.ПолучаемыеСчетаФактуры#",СписокПараметров);
		
		ТаблицаКнигиПокупок.ВыбратьСтроки();
		Пока ТаблицаКнигиПокупок.ПолучитьСтроку()=1 Цикл
			ВыгрузитьЗаписьКнигиПокупок(ТаблицаКнигиПокупок, "");
		КонецЦикла;
	КонецЕсли;
	
	Если МыПечатаем=0 тогда
		//Закомментировано Инсталлятором МОД:ТекстВыгрузкиДанных.Записать(ФайлВыгрузки);
	//Начало текста, вставленного Инсталлятором МОД
	ОбъектЗаписать(ТекстВыгрузкиДанных, ФайлВыгрузки);
	//Конец текста, вставленного Инсталлятором МОД

		Сообщить("Выгрузка проводок ЗАВЕРШЕНА !");
	Иначе
		Таб.Опции(0, 0, 6, 0, "ИмяОпцийПечатиПровДок" , "ИмяРазмераОкнаПровДок" );
		Таб.ТолькоПросмотр(1);
		Таб.Показать("Проводки");
	КонецЕсли;
	СписСписковВыгрОбъектов.УдалитьВсе();
	
КонецПроцедуры


//**************************************************************************************************
//	ВыгрузитьСписокСписковПолей(СписСписков)
//
//	Параметры:
//	СписСписков - список, содержащий списки полей выгрузки
//
//	Описание:
//	Выгружает списки полей выгрузки в строки в ТекстВыгрузкиДанных.
//	Каждый список полей выгрузки преобразуется в отдельную строку.

Процедура ВыгрузитьСписокСписковПолей(СписСписков)
	
	// сортировка и выборка списков полей
	СписСписков.СортироватьПоПредставлению();
	Для Номер=1 по СписСписков.РазмерСписка() Цикл
		СписПолей=СписСписков.ПолучитьЗначение(Номер);
		
		// выгрузка списка полей в строку и подмена символа-разделителя строк
		Стр=СписПолей.ВСтрокуСРазделителями();
		Стр=СтрЗаменить(Стр, РазделительСтрок, СтрРазделительСтрок);
		
		ТекстВыгрузкиДанных.ДобавитьСтроку(Стр);
	КонецЦикла;
	
КонецПроцедуры // ВыгрузитьСписокСписковПолей()

//**************************************************************************************************
//	ВыгрузитьСклад(Элемент, Ссылка)
//
//	Параметры:
//	Элемент - элемент (группа) справочника, который должен быть выгружен в ТекстВыгрузкиДанных
//	Ссылка - ссылка, которая присвоена выгружаемому элементу
//
//	Описание:
//	Используется для выгрузки в конфигурацию 1С:Бухгалтерия Ред.4.0.

Процедура ВыгрузитьСклад(Элемент, Ссылка)
	// инициализация списков выгрузки справочника
	СписПолей=СоздатьОбъект("СписокЗначений");
	СписСписков=СоздатьОбъект("СписокЗначений"); 
	СписСписков.ДобавитьЗначение(СписПолей, "0");
	
	
	// первые три поля в строке выгрузки справочника
	СписПолей.ДобавитьЗначение(Ссылка, "");
	СписПолей.ДобавитьЗначение(?(Элемент.ЭтоГруппа()=1, "Группа.", "Элемент.")+Элемент.Вид(), "");
	СписПолей.ДобавитьЗначение(?(Элемент.ПометкаУдаления()=1, "Помечен", "Записан"), "");
	
	// Склады идентифицируются по наименованию
	// наименование; признак идентификации - если не задана уникальность кода
	СписПолей.ДобавитьЗначение("?Наименование()"+Выгрузить(Элемент.Наименование), "");
	
	ВыгрузитьСписокСписковПолей(СписСписков);
	
КонецПроцедуры // ВыгрузитьСклад()


//**************************************************************************************************
//	ВыгрузитьВалюту(Элемент, Ссылка)
//
//	Параметры:
//	Элемент - элемент (группа) справочника, который должен быть выгружен в ТекстВыгрузкиДанных
//	Ссылка - ссылка, которая присвоена выгружаемому элементу
//
//	Описание:
//	Используется для выгрузки в конфигурацию 1С:Бухгалтерия Ред.4.0.

Процедура ВыгрузитьВалюту(Элемент, Ссылка)
	
	Сообщить(" не задан способ выгрузки валюты");
	
КонецПроцедуры // ВыгрузитьВалюту()


//**************************************************************************************************
//	ВыгрузитьТовар(Элемент, Ссылка)
//
//	Параметры:
//	Элемент - элемент (группа) справочника, который должен быть выгружен в ТекстВыгрузкиДанных
//	Ссылка - ссылка, которая присвоена выгружаемому элементу
//
//	Описание:
//	Используется для выгрузки в конфигурацию 1С:Бухгалтерия Ред.4.0.

Процедура ВыгрузитьТовар(Элемент, Ссылка)
	
	// инициализация списков выгрузки справочника
	СписПолей=СоздатьОбъект("СписокЗначений");
	СписСписков=СоздатьОбъект("СписокЗначений"); 
	СписСписков.ДобавитьЗначение(СписПолей, "0");
	
	// первые три поля в строке выгрузки справочника
	СписПолей.ДобавитьЗначение(Ссылка, "");
	СписПолей.ДобавитьЗначение(?(Элемент.ЭтоГруппа()=1, "Группа.", "Элемент.")+"Номенклатура", "");
	СписПолей.ДобавитьЗначение(?(Элемент.ПометкаУдаления()=1, "Помечен", "Записан"), "");
	
	// код; признак идентификации по коду ("?") - всегда
	СписПолей.ДобавитьЗначение("?Код()"+Элемент.Код, "");
	// наименование; признак идентификации - если не задана уникальность кода
	СписПолей.ДобавитьЗначение("Наименование()"+Выгрузить(Элемент.Наименование), "");
	
	// родитель; 
	Если ПустоеЗначение(Элемент.Родитель)=0 Тогда
		СписПолей.ДобавитьЗначение("Родитель(#)"+Выгрузить(Элемент.Родитель,"Номенклатура"), "");
	КонецЕсли;	
	
	Если Элемент.ЭтоГруппа()=1 Тогда	
		ВыгрузитьСписокСписковПолей(СписСписков);
		Возврат;	
	КонецЕсли;	
	
	// здесь, если необходимо, надо описать выгрузку реквизитов	
	
	ВыгрузитьСписокСписковПолей(СписСписков);
	
КонецПроцедуры // ВыгрузитьТовар()

//**************************************************************************************************
//	ВыгрузитьКонтрагент(Элемент, Ссылка)
//
//	Параметры:
//	Элемент - элемент (группа) справочника, который должен быть выгружен в ТекстВыгрузкиДанных
//	Ссылка - ссылка, которая присвоена выгружаемому элементу
//
//	Описание:
//	Используется для выгрузки в конфигурацию 1С:Бухгалтерия Ред.4.0.

Процедура ВыгрузитьКонтрагент(Элемент, Ссылка)
	
	// инициализация списков выгрузки справочника
	СписПолей=СоздатьОбъект("СписокЗначений");
	СписСписков=СоздатьОбъект("СписокЗначений"); 
	СписСписков.ДобавитьЗначение(СписПолей, "0");
	
	// первые три поля в строке выгрузки справочника
	СписПолей.ДобавитьЗначение(Ссылка, "");
	СписПолей.ДобавитьЗначение(?(Элемент.ЭтоГруппа()=1, "Группа.", "Элемент.")+"Контрагенты", "");
	СписПолей.ДобавитьЗначение(?(Элемент.ПометкаУдаления()=1, "Помечен", "Записан"), "");
	Если Элемент.Вид()="ККМ" Тогда	
		// наименование; признак идентификации - если не задана уникальность кода
		СписПолей.ДобавитьЗначение("?Наименование()"+Выгрузить(СокрЛП(Элемент.Наименование)+" ("+Строка(Элемент.ТипККМ)+")"), "");
		ВыгрузитьСписокСписковПолей(СписСписков);
		Возврат;	
	КонецЕсли;	
	
	// наименование; признак идентификации - если не задана уникальность кода
	СписПолей.ДобавитьЗначение("?Наименование()"+Выгрузить(Элемент.Наименование), "");
	
	// родитель; 
	Если ПустоеЗначение(Элемент.Родитель)=0 Тогда
		СписПолей.ДобавитьЗначение("Родитель(#)"+Выгрузить(Элемент.Родитель,"Контрагенты"), "");
	КонецЕсли;	
	
	Если Элемент.ЭтоГруппа()=1 Тогда	
		ВыгрузитьСписокСписковПолей(СписСписков);
		Возврат;	
	КонецЕсли;	
	
	// Реквизиты; 
	СписПолей.ДобавитьЗначение("ВидКонтрагента()"+Выгрузить(Элемент.ВидКонтрагента), "");
	СписПолей.ДобавитьЗначение("ПолнНаименование()"+Выгрузить(Элемент.ПолноеНаименование), "");
	СписПолей.ДобавитьЗначение("ЮридическийАдрес()"+Выгрузить(Элемент.ЮридическийАдрес), "");
	СписПолей.ДобавитьЗначение("ПочтовыйАдрес()"+Выгрузить(Элемент.ПочтовыйАдрес), "");
	СписПолей.ДобавитьЗначение("Телефоны()"+Выгрузить(Элемент.Телефоны), "");
	СписПолей.ДобавитьЗначение("ИНН()"+Выгрузить(Элемент.ИНН), "");
	СписПолей.ДобавитьЗначение("ДокументСерия()"+Выгрузить(Элемент.ДокументСерия), "");
	СписПолей.ДобавитьЗначение("ДокументНомер()"+Выгрузить(Элемент.ДокументНомер), "");
	СписПолей.ДобавитьЗначение("ДокументКемВыдан()"+Выгрузить(Элемент.ДокументКемВыдан), "");
	СписПолей.ДобавитьЗначение("ДокументДатаВыдачи()"+Выгрузить(Элемент.ДокументДатаВыдачи), "");
	
	// здесь, если необходимо, надо описать выгрузку реквизитов	
	
	ВыгрузитьСписокСписковПолей(СписСписков);
	
КонецПроцедуры // ВыгрузитьКонтрагент()

//**************************************************************************************************
//	ВыгрузитьДоговор(Элемент, Ссылка)
//
//	Параметры:
//	Элемент - элемент (группа) справочника, который должен быть выгружен в ТекстВыгрузкиДанных
//	Ссылка - ссылка, которая присвоена выгружаемому элементу
//
//	Описание:
//	Используется для выгрузки в конфигурацию 1С:Бухгалтерия Ред.4.0.

Процедура ВыгрузитьДоговор(Элемент, Ссылка)
	
	// инициализация списков выгрузки справочника
	СписПолей=СоздатьОбъект("СписокЗначений");
	СписСписков=СоздатьОбъект("СписокЗначений"); 
	СписСписков.ДобавитьЗначение(СписПолей, "0");
	
	// первые три поля в строке выгрузки справочника
	СписПолей.ДобавитьЗначение(Ссылка, "");
	СписПолей.ДобавитьЗначение(?(Элемент.ЭтоГруппа()=1, "Группа.", "Элемент.")+"Договоры", "");
	СписПолей.ДобавитьЗначение(?(Элемент.ПометкаУдаления()=1, "Помечен", "Записан"), "");
	
	Если Элемент.Вид()="ККМ" Тогда	
		// наименование; признак идентификации - если не задана уникальность кода
		СписПолей.ДобавитьЗначение("?Наименование()"+Выгрузить(глИмяПустогоДоговора), "");
		// владелец; признак идентификации - если не задана уникальность кода во всем справочнике
		СписПолей.ДобавитьЗначение("?Владелец(#)"+Выгрузить(Элемент,"Контрагенты"), "");
		ВыгрузитьСписокСписковПолей(СписСписков);
		Возврат;	
	ИначеЕсли Элемент.Вид()="Контрагенты" Тогда	
		// наименование; признак идентификации - если не задана уникальность кода
		СписПолей.ДобавитьЗначение("?Наименование()"+Выгрузить(глИмяПустогоДоговора), "");
		// владелец; признак идентификации - если не задана уникальность кода во всем справочнике
		СписПолей.ДобавитьЗначение("?Владелец(#)"+Выгрузить(Элемент,"Контрагенты"), "");
		ВыгрузитьСписокСписковПолей(СписСписков);
		Возврат;	
	КонецЕсли;	
	
	// наименование; признак идентификации 
	СписПолей.ДобавитьЗначение("?Наименование()"+Выгрузить(Элемент.Наименование), "");
	
	// владелец; признак идентификации - если не задана уникальность кода во всем справочнике
	СписПолей.ДобавитьЗначение("?Владелец(#)"+Выгрузить(Элемент.Владелец,"Контрагенты"), "");
	
	ВыгрузитьСписокСписковПолей(СписСписков);
	
КонецПроцедуры // ВыгрузитьДоговор()

//**************************************************************************************************
//	ВыгрузитьИздержкиОбращения(Элемент, Ссылка)
//
//	Параметры:
//	Элемент - значение перечисления СтатьиИздержек, которое должно быть выгружено в ТекстВыгрузкиДанных
//	Ссылка - ссылка, которая присвоена выгружаемому значению
//
//	Описание:
//	Используется для выгрузки в конфигурацию 1С:Бухгалтерия ред.4.0.

Процедура ВыгрузитьИздержкиОбращения(Элемент, Ссылка)
	
	// инициализация списков выгрузки справочника
	СписПолей=СоздатьОбъект("СписокЗначений");
	СписСписков=СоздатьОбъект("СписокЗначений"); 
	СписСписков.ДобавитьЗначение(СписПолей, "0");
	
	// первые три поля в строке выгрузки справочника
	СписПолей.ДобавитьЗначение(Ссылка, "");
	СписПолей.ДобавитьЗначение("Элемент.СтатьиИздержекОбращения", "");
	СписПолей.ДобавитьЗначение("Записан", "");
	
	// наименование; признак идентификации 
	СписПолей.ДобавитьЗначение("?Наименование()"+Элемент, "");
	
	
	ВыгрузитьСписокСписковПолей(СписСписков);
	
КонецПроцедуры // ВыгрузитьИздержкиОбращения()

//**************************************************************************************************
//	ВыгрузитьДвиженияДенежныхСредств(Элемент, Ссылка)
//
//	Параметры:
//	Элемент - значение перечисления вид движения в бухгалтерии 4.0
//   - ВыручкаПоОбычнымВидамДеятельности
//   - ВыручкаПоПрочимОперациям
//   - ПриобретениеТоваровПродукцииРаботИУслуг
//   - ПрочиеВыплатыИПеречисления
//	Ссылка - ссылка, которая присвоена выгружаемому значению
//
//	Описание:
//	Используется для выгрузки в конфигурацию 1С:Бухгалтерия ред.4.0.

Процедура ВыгрузитьДвиженияДенежныхСредств(Элемент, Ссылка)
	
	// инициализация списков выгрузки справочника
	СписПолей=СоздатьОбъект("СписокЗначений");
	СписСписков=СоздатьОбъект("СписокЗначений"); 
	СписСписков.ДобавитьЗначение(СписПолей, "0");
	
	// первые три поля в строке выгрузки справочника
	СписПолей.ДобавитьЗначение(Ссылка, "");
	СписПолей.ДобавитьЗначение("Элемент.ДвиженияДенежныхСредств", "");
	СписПолей.ДобавитьЗначение("Записан", "");
	
	// наименование; признак идентификации 
	Если Элемент="ВыручкаПоОбычнымВидамДеятельности" Тогда
		НазваниеЭлемента="1С:Торговля-Выручка";
	ИначеЕсли Элемент="ПриобретениеТоваровПродукцииРаботИУслуг" Тогда
		НазваниеЭлемента="1С:Торговля-Оплата поставщику";
	ИначеЕсли Элемент="ПрочиеВыплатыИПеречисления" Тогда
		НазваниеЭлемента="1С:Торговля-Прочие выплаты";
	Иначе 
		НазваниеЭлемента="1С:Торговля-"+Элемент;
	КонецЕсли;
	СписПолей.ДобавитьЗначение("?Наименование()"+НазваниеЭлемента, "");
	// ВидДвижения, признак идентификации
	СписПолей.ДобавитьЗначение("?ВидДвижения()"+Элемент, "");
	// Разрез деятельности, признак идентификации
	СписПолей.ДобавитьЗначение("?РазрезДеятельности()Текущая", "");
	
	ВыгрузитьСписокСписковПолей(СписСписков);
	
КонецПроцедуры // ВыгрузитьДвиженияДенежныхСредств()

//************************************************************************************
//	ВыгрузитьПрочиеДоходыИРасходы(Элемент, Ссылка)
//
//	Параметры:
//	Элемент - значение перечисления ВидыПрочихДоходовИРасходов в бухгалтерии 4.0
//   - ПрибыльУбыткиПрошлыхЛет
//   - ВыбытиеАктивов
//   - ПрочиеОперационныеДоходыРасходы
//	Ссылка - ссылка, которая присвоена выгружаемому значению
//
//	Описание:
//	Используется для выгрузки в конфигурацию 1С:Бухгалтерия ред.4.0.

Процедура ВыгрузитьПрочиеДоходыИРасходы(Элемент, Ссылка)
	
	// инициализация списков выгрузки справочника
	СписПолей=СоздатьОбъект("СписокЗначений");
	СписСписков=СоздатьОбъект("СписокЗначений"); 
	СписСписков.ДобавитьЗначение(СписПолей, "0");
	
	// первые три поля в строке выгрузки справочника
	СписПолей.ДобавитьЗначение(Ссылка, "");
	СписПолей.ДобавитьЗначение("Элемент.ПрочиеДоходыИРасходы", "");
	СписПолей.ДобавитьЗначение("Записан", "");
	
	// наименование; признак идентификации 
	Если Элемент="ПрибыльУбыткиПрошлыхЛет" Тогда
		НазваниеЭлемента="1С:Торговля-приб./убытки прошлых лет";
	ИначеЕсли Элемент="ВыбытиеАктивов" Тогда
		НазваниеЭлемента="1С:Торговля-выбытие активов";
	ИначеЕсли Элемент="ПрочиеОперационныеДоходыРасходы" Тогда
		НазваниеЭлемента="1С:Торговля-операц. приб./убытки"; 
	ИначеЕсли Элемент="ПрочиеВнереализационныеДоходыРасходы" Тогда
		НазваниеЭлемента="1С:Торговля-внереал. приб./убытки"; 
	Иначе 
		НазваниеЭлемента="1С:Торговля-"+Элемент;
	КонецЕсли;
	СписПолей.ДобавитьЗначение("?Наименование()"+НазваниеЭлемента, "");
	// ВидыПрочихДоходовИРасходов, признак идентификации
	СписПолей.ДобавитьЗначение("?ВидПрочихДоходовИРасходов()"+Элемент, "");
	
	ВыгрузитьСписокСписковПолей(СписСписков);
	
КонецПроцедуры // ВыгрузитьПрочиеДоходыИРасходы()


//**************************************************************************************************
//	ВыгрузитьСтавки(Объект, Ссылка, ТипСтавки)
//
//	Параметры:
//	Элемент - число: значение ставки, которое должно быть выгружено в ТекстВыгрузкиДанных
//	Ссылка - ссылка, которая присвоена выгружаемому элементу
//	ТипСтавки - строковое значение типа ставки: "СтавкиНДС", "СтавкиНГСМ", "СтавкиНП"
//
//	Описание:
//	Используется для выгрузки в конфигурацию 1С:Бухгалтерия Ред.4.0.

Процедура ВыгрузитьСтавки(Элемент, Ссылка, ТипСтавки)
	
	// инициализация списков выгрузки справочника
	СписПолей=СоздатьОбъект("СписокЗначений");
	СписСписков=СоздатьОбъект("СписокЗначений"); 
	СписСписков.ДобавитьЗначение(СписПолей, "0");
	
	// первые три поля в строке выгрузки справочника
	СписПолей.ДобавитьЗначение(Ссылка, "");
	СписПолей.ДобавитьЗначение("Элемент."+ТипСтавки, "");
	СписПолей.ДобавитьЗначение("Записан", "");
	
	// наименование; признак идентификации 
	Если ПустоеЗначение(Элемент)=0 Тогда	
		СписПолей.ДобавитьЗначение("?Наименование()"+Выгрузить(Элемент)+"%", "");
	Иначе
		СписПолей.ДобавитьЗначение("?Наименование()Без налога ("+Сред(ТипСтавки,7)+")", "");
	КонецЕсли;	
	
	// Ставка; признак идентификации 
	СписПолей.ДобавитьЗначение("?Ставка()"+Выгрузить(Элемент), "");
	
	ВыгрузитьСписокСписковПолей(СписСписков);
	
КонецПроцедуры // ВыгрузитьСтавки()


//**************************************************************************************************
//	ВыгрузитьВидыНоменклатуры(Элемент, Ссылка)
//
//	Параметры:
//	Элемент - строка - наименование  вида номенклатуры
//	Ссылка - ссылка, которая присвоена выгружаемому элементу
//
//	Описание:
//	Используется для выгрузки в конфигурацию 1С:Бухгалтерия ред.4.0.

Процедура ВыгрузитьВидыНоменклатуры(Элемент, Ссылка)
	
	// инициализация списков выгрузки справочника
	СписПолей=СоздатьОбъект("СписокЗначений");
	СписСписков=СоздатьОбъект("СписокЗначений"); 
	СписСписков.ДобавитьЗначение(СписПолей, "0");
	
	// первые три поля в строке выгрузки справочника
	СписПолей.ДобавитьЗначение(Ссылка, "");
	СписПолей.ДобавитьЗначение("Элемент.ВидыНоменклатуры", "");
	СписПолей.ДобавитьЗначение("Записан", "");
	
	// Наименование, признак идентификации
	СписПолей.ДобавитьЗначение("?Наименование()1С:Торговля-"+Элемент, "");
	// Тип номенклатуры- значение перечисления - "Товар","Услуга"
	СписПолей.ДобавитьЗначение("ТипНоменклатуры()"+Элемент, "");
	
	ВыгрузитьСписокСписковПолей(СписСписков);
	
КонецПроцедуры // ВыгрузитьВидыНоменклатуры()

//**************************************************************************************************
//	ВыгрузитьОтложенныеНалоги(Элемент, Ссылка)
//
//	Параметры:
//	Элемент - строка - наименование  вида деятельности
//	Ссылка - ссылка, которая присвоена выгружаемому элементу
//
//	Описание:
//	Используется для выгрузки в конфигурацию 1С:Бухгалтерия Ред.4.0.

Процедура ВыгрузитьОтложенныеНалоги(Элемент, Ссылка)
	
	// инициализация списков выгрузки справочника
	СписПолей=СоздатьОбъект("СписокЗначений");
	СписСписков=СоздатьОбъект("СписокЗначений"); 
	СписСписков.ДобавитьЗначение(СписПолей, "0");
	
	// первые три поля в строке выгрузки справочника
	СписПолей.ДобавитьЗначение(Ссылка, "");
	СписПолей.ДобавитьЗначение("Элемент.ОтложенныеНалоги", "");
	СписПолей.ДобавитьЗначение("Записан", "");
	
	// Код; признак идентификации 
	СписПолей.ДобавитьЗначение("?Код()"+Выгрузить(Элемент), "");
	
	ВыгрузитьСписокСписковПолей(СписСписков);
	
КонецПроцедуры // ВыгрузитьОтложенныеНалоги()

//**************************************************************************************************
//	ВыгрузитьБанковскиеСчета(Элемент, Ссылка)
//
//	Параметры:
//	Элемент - элемент (группа) справочника, который должен быть выгружен в ТекстВыгрузкиДанных
//	Ссылка - ссылка, которая присвоена выгружаемому элементу
//
//	Описание:
//	Используется для выгрузки в конфигурацию 1С:Бухгалтерия Ред.4.0.

Процедура ВыгрузитьБанковскиеСчета(Элемент, Ссылка)
	
	// инициализация списков выгрузки справочника
	СписПолей=СоздатьОбъект("СписокЗначений");
	СписСписков=СоздатьОбъект("СписокЗначений"); 
	СписСписков.ДобавитьЗначение(СписПолей, "0");
	
	// первые три поля в строке выгрузки справочника
	СписПолей.ДобавитьЗначение(Ссылка, "");
	СписПолей.ДобавитьЗначение("Элемент.БанковскиеСчета", "");
	СписПолей.ДобавитьЗначение(?(Элемент.ПометкаУдаления()=1, "Помечен", "Записан"), "");
	
	// Номер; признак идентификации 
	СписПолей.ДобавитьЗначение("?Номер()"+Выгрузить(Элемент.Номер), "");
	СписПолей.ДобавитьЗначение("ТипСчета()"+Выгрузить(Элемент.ТипСчета), "");
	СписПолей.ДобавитьЗначение("ВидСчета()"+Выгрузить(Элемент.ВидСчета), "");
	СписПолей.ДобавитьЗначение("Наименование()"+Выгрузить(Элемент.Наименование), "");
	
	ВыгрузитьСписокСписковПолей(СписСписков);
	
КонецПроцедуры // ВыгрузитьБанковскиеСчета() 
//Общепит
//**************************************************************************************************
//	ВыгрузитьСтатьиЗатратНаПроизводство(Элемент, Ссылка)
//
//	Параметры:
//	Элемент - строка - наименование  вида деятельности
//	Ссылка - ссылка, которая присвоена выгружаемому элементу
//
//	Описание:
//	Используется для выгрузки в конфигурацию 1С:Бухгалтерия ред.4.0.

Процедура ВыгрузитьСтатьиЗатратНаПроизводство(Элемент, Ссылка)
	
	// инициализация списков выгрузки справочника
	СписПолей=СоздатьОбъект("СписокЗначений");
	СписСписков=СоздатьОбъект("СписокЗначений"); 
	СписСписков.ДобавитьЗначение(СписПолей, "0");
	
	// первые три поля в строке выгрузки справочника
	СписПолей.ДобавитьЗначение(Ссылка, "");
	СписПолей.ДобавитьЗначение("Элемент.СтатьиЗатратНаПроизводство", "");
	СписПолей.ДобавитьЗначение("Записан", "");
	
	// Код; признак идентификации 
	СписПолей.ДобавитьЗначение("?Код()"+Выгрузить(Элемент), "");
	
	ВыгрузитьСписокСписковПолей(СписСписков);
	
КонецПроцедуры // ВыгрузитьПодразделения() 
//**************************************************************************************************
//	ВыгрузитьПодразделения(Элемент, Ссылка)
//
//	Параметры:
//	Элемент - строка - наименование  вида деятельности
//	Ссылка - ссылка, которая присвоена выгружаемому элементу
//
//	Описание:
//	Используется для выгрузки в конфигурацию 1С:Бухгалтерия ред.4.0.

Процедура ВыгрузитьПодразделения(Элемент, Ссылка)
	
	// инициализация списков выгрузки справочника
	СписПолей=СоздатьОбъект("СписокЗначений");
	СписСписков=СоздатьОбъект("СписокЗначений"); 
	СписСписков.ДобавитьЗначение(СписПолей, "0");
	
	// первые три поля в строке выгрузки справочника
	СписПолей.ДобавитьЗначение(Ссылка, "");
	СписПолей.ДобавитьЗначение("Элемент.Подразделения", "");
	СписПолей.ДобавитьЗначение("Записан", "");
	
	// Код; признак идентификации 
	СписПолей.ДобавитьЗначение("?Код()"+Выгрузить(Элемент), "");
	
	ВыгрузитьСписокСписковПолей(СписСписков);
	
КонецПроцедуры // ВыгрузитьПодразделения() 

//**************************************************************************************************
//	Процедура ДобавитьПоляКорреспонденции()
//
//	Описание:
// Служебная процедура
//	Используется для выгрузки в конфигурацию 1С:Бухгалтерия Ред.4.0.

Процедура ДобавитьПоляКорреспонденции(СписПолей, Слово, ПланСчетов, Счет, Субконто1, Субконто2, Субконто3)
	// счет корреспонденции
	СписПолей.ДобавитьЗначение(Слово+"(Счет."+ПланСчетов+")"+Выгрузить(Счет), "");
	
	// субконто корреспонденции   
	ВидСубконто=ПолучитьКодСубконто7_7(Счет,1);
	Способ=ПолучитьСпособСубконто(ВидСубконто,Субконто1);
	Если ПустоеЗначение(ВидСубконто)=0 Тогда	
		СписПолей.ДобавитьЗначение(Слово+"."+ВидСубконто+"()"+Выгрузить(Субконто1, Способ), "");
		
		ВидСубконто=ПолучитьКодСубконто7_7(Счет,2);
		Способ=ПолучитьСпособСубконто(ВидСубконто,Субконто2);
		Если ПустоеЗначение(ВидСубконто)=0 Тогда	
			СписПолей.ДобавитьЗначение(Слово+"."+ВидСубконто+"()"+Выгрузить(Субконто2, Способ), "");
			
			ВидСубконто=ПолучитьКодСубконто7_7(Счет,3);
			Способ=ПолучитьСпособСубконто(ВидСубконто,Субконто3);
			Если ПустоеЗначение(ВидСубконто)=0 Тогда	
				СписПолей.ДобавитьЗначение(Слово+"."+ВидСубконто+"()"+Выгрузить(Субконто3, Способ), "");
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры // ДобавитьПоляКорреспонденции()

//**************************************************************************************************
//	Процедура СписокПолейПроводки()
//
//	Описание:
// Служебная процедура
//	Используется для выгрузки в конфигурацию 1С:Бухгалтерия Ред.4.0.

Функция СписокПолейПроводки(Проводка)
	
	СписПолей=СоздатьОбъект("СписокЗначений");
	
	// первые три поля проводки
	СписПолей.ИзСтрокиСРазделителями(""""",""Проводка"",""""");
	
	// сумма, количество, валюта и валютная сумма проводки
	СписПолей.ДобавитьЗначение("Сумма()"+Выгрузить(Проводка.Сумма), "");
	СписПолей.ДобавитьЗначение("Количество()"+Выгрузить(Проводка.Количество), "");
	Если ПустоеЗначение(Проводка.Валюта)=0 Тогда
		СписПолей.ДобавитьЗначение("Валюта()"+Выгрузить(Проводка.Валюта, "Валюта"), "");
		СписПолей.ДобавитьЗначение("ВалСумма()"+Выгрузить(Проводка.ВалСумма), "");
	КонецЕсли;	
	
	// счет и субконто дебета и кредита проводки
	ДобавитьПоляКорреспонденции(СписПолей, "Дебет", Проводка.ПланСчетов, Проводка.СчетДебета, 
	Проводка.СубкДеб1, Проводка.СубкДеб2, Проводка.СубкДеб3);
	ДобавитьПоляКорреспонденции(СписПолей, "Кредит", Проводка.ПланСчетов, Проводка.СчетКредита, 
	Проводка.СубкКред1, Проводка.СубкКред2, Проводка.СубкКред3);
	
	// реквизиты проводки
	СписПолей.ДобавитьЗначение("СодержаниеПроводки()"+Выгрузить(Проводка.Содержание), "");
	СписПолей.ДобавитьЗначение("НомерЖурнала()"+Выгрузить(Проводка.НомерЖурнала), "");
	
	Возврат(СписПолей);
	
КонецФункции // СписокПолейПроводки()

//**************************************************************************************************
//	Процедура ВыгрузитьОперацию()
//
//	Описание:
// Служебная процедура
//	Используется для выгрузки в конфигурацию 1С:Бухгалтерия Ред.4.0.

Процедура ВыгрузитьОперацию(Операция, Ссылка)
	
	// инициализация списков выгрузки документа
	СписПолей=СоздатьОбъект("СписокЗначений");
	СписСписков=СоздатьОбъект("СписокЗначений"); 
	СписСписков.ДобавитьЗначение(СписПолей, "0");
	
	// первое, второе и третье поля в строке выгрузки документа
	СписПолей.ДобавитьЗначение(Ссылка, "");
	СписПолей.ДобавитьЗначение("Документ.Операция", "");
	СписПолей.ДобавитьЗначение("Записан Включен", "");
	
	// номер; признак идентификации по номеру ("?") - всегда
	//СписПолей.ДобавитьЗначение("?НомерДок()"+Операция.НомерДок, "");
	// дата; признак идентификации по дате - всегда
	СписПолей.ДобавитьЗначение("ДатаДок()"+Выгрузить(Операция.ДатаДок), "");
	// время; признак идентификации не ставится
	СписПолей.ДобавитьЗначение("ВремяДок()"+Выгрузить(Операция.ВремяДок), "");
	
	
	// содержание и сумма операции
	СписПолей.ДобавитьЗначение("Операция.Содержание()"+Выгрузить(Операция.Содержание), "");
	СписПолей.ДобавитьЗначение("Операция.СуммаОперации()"+Выгрузить(Операция.СуммаОперации), "");
	СписПолей.ДобавитьЗначение("Комментарий()"+Выгрузить(Операция.Комментарий), "");
	// перебор проводок
	Проводка=Операция.ТаблицаПроводок;
	Проводка.ВыбратьСтроки();
	Пока Проводка.ПолучитьСтроку()=1 Цикл
		// инициализация и заполнение списка полей выгрузки проводок
		Стр=Проводка.НомерСтроки;
		СписСписков.ДобавитьЗначение(СписокПолейПроводки(Проводка), Стр);
	КонецЦикла;
	
	ВыгрузитьСписокСписковПолей(СписСписков);
	
КонецПроцедуры // ВыгрузитьОперацию()

//**************************************************************************************************
//	Процедура ВыгрузитьЗаписьКнигиПродаж()
//
//	Описание:                        
//  Запись - спозиционированная таблица записей
// 	Служебная процедура
//	Используется для выгрузки в конфигурацию 1С:Бухгалтерия ред.4.0.

Процедура ВыгрузитьЗаписьКнигиПродаж(Запись, Ссылка)
	
	// инициализация списков выгрузки документа
	СписПолей=СоздатьОбъект("СписокЗначений");
	СписСписков=СоздатьОбъект("СписокЗначений"); 
	СписСписков.ДобавитьЗначение(СписПолей, "0");
	
	// первое, второе и третье поля в строке выгрузки документа
	СписПолей.ДобавитьЗначение(Ссылка, "");
	СписПолей.ДобавитьЗначение("Документ.ЗаписьКнигиПродажТорг", "");
	СписПолей.ДобавитьЗначение("Проведен Включен", "");
	
	// номер; признак идентификации по номеру ("?") - всегда
	//СписПолей.ДобавитьЗначение("?НомерДок()"+Операция.НомерДок, "");
	// дата; признак идентификации по дате - всегда
	СписПолей.ДобавитьЗначение("ДатаДок()"+Выгрузить(Запись.ДатаЗаписи), "");
	СписПолей.ДобавитьЗначение("НомерДата()"+Выгрузить(Запись.НомерДата), "");
	СписПолей.ДобавитьЗначение("Контрагент()"+Выгрузить(Запись.Контрагент,"Контрагенты"), "");
	СписПолей.ДобавитьЗначение("Всего()"+Выгрузить(Запись.Всего), "");
	СписПолей.ДобавитьЗначение("СуммаБезНДС20()"+Выгрузить(Запись.СуммаБезНДС20), "");
	СписПолей.ДобавитьЗначение("НДС20()"+Выгрузить(Запись.НДС20), "");
	СписПолей.ДобавитьЗначение("СуммаБезНДС10()"+Выгрузить(Запись.СуммаБезНДС10), "");
	СписПолей.ДобавитьЗначение("НДС10()"+Выгрузить(Запись.НДС10), "");
	СписПолей.ДобавитьЗначение("СуммаСовсемБезНДС()"+Выгрузить(Запись.СуммаСовсемБезНДС), "");
	СписПолей.ДобавитьЗначение("СуммаНП()"+Выгрузить(Запись.СуммаНП), "");
	СписПолей.ДобавитьЗначение("ТипЗаписи()"+Выгрузить(Запись.ТипЗаписи), "");
	
	ВыгрузитьСписокСписковПолей(СписСписков);
КонецПроцедуры // ВыгрузитьЗаписьКнигиПродаж()

//**************************************************************************************************
//	Процедура ВыгрузитьЗаписьКнигиПокупок()
//
//	Описание:                        
//  Запись - спозиционированная таблица записей
// 	Служебная процедура
//	Используется для выгрузки в конфигурацию 1С:Бухгалтерия ред.4.0.

Процедура ВыгрузитьЗаписьКнигиПокупок(Запись, Ссылка)
	
	// инициализация списков выгрузки документа
	СписПолей=СоздатьОбъект("СписокЗначений");
	СписСписков=СоздатьОбъект("СписокЗначений"); 
	СписСписков.ДобавитьЗначение(СписПолей, "0");
	
	// первое, второе и третье поля в строке выгрузки документа
	СписПолей.ДобавитьЗначение(Ссылка, "");
	СписПолей.ДобавитьЗначение("Документ.ЗаписьКнигиПокупокТорг", "");
	СписПолей.ДобавитьЗначение("Проведен Включен", "");
	
	// номер; признак идентификации по номеру ("?") - всегда
	//СписПолей.ДобавитьЗначение("?НомерДок()"+Операция.НомерДок, "");
	// дата; признак идентификации по дате - всегда
	СписПолей.ДобавитьЗначение("ДатаДок()"+Выгрузить(Запись.ДатаЗаписи), "");
	СписПолей.ДобавитьЗначение("ДатаНомерСчетаФактуры()"+Выгрузить(Запись.ДатаНомерСчетаФактуры), "");
	СписПолей.ДобавитьЗначение("Контрагент()"+Выгрузить(Запись.Контрагент,"Контрагенты"), "");
	СписПолей.ДобавитьЗначение("Всего()"+Выгрузить(Запись.Всего), "");
	СписПолей.ДобавитьЗначение("СуммаБезНДС20()"+Выгрузить(Запись.СуммаБезНДС20), "");
	СписПолей.ДобавитьЗначение("НДС20()"+Выгрузить(Запись.НДС20), "");
	СписПолей.ДобавитьЗначение("СуммаБезНДС10()"+Выгрузить(Запись.СуммаБезНДС10), "");
	СписПолей.ДобавитьЗначение("НДС10()"+Выгрузить(Запись.НДС10), "");
	СписПолей.ДобавитьЗначение("СуммаСовсемБезНДС()"+Выгрузить(Запись.СуммаСовсемБезНДС), "");
	СписПолей.ДобавитьЗначение("ДатаОприходования()"+Выгрузить(Запись.ДатаОприходования), "");
	
	ВыгрузитьСписокСписковПолей(СписСписков);
КонецПроцедуры // ВыгрузитьЗаписьКнигиПокупок()

//**************************************************************************************************
//	Процедура ВыгрузитьКассовыйОрдер()
//
//	Описание:                        
//  Ордер - Значение агрегатного типа "Документ"
// 	Служебная процедура
//	Используется для выгрузки в конфигурацию 1С:Бухгалтерия ред.4.0.

Процедура ВыгрузитьКассовыйОрдер(Ордер, Ссылка)
	Перем СчетКассы, СчетНДС, СчетНП;
	СчетКассы	="50.1";
	СчетНДС		="68.2";
	СчетНП		="68.5";
	
	// инициализация списков выгрузки документа
	СписПолей=СоздатьОбъект("СписокЗначений");
	СписСписков=СоздатьОбъект("СписокЗначений"); 
	СписСписков.ДобавитьЗначение(СписПолей, "0");
	
	
	ПриходКасса=0;
	РасходКасса=0;
	ДвижениеДенежныхСредств="";
	КоррСчет="";
	СуммаНДС=0;
	СуммаНП=0;
	
	Если (Ордер.Вид()="ПриходныйОрдерТБ") и (Ордер.Клиент.Вид()="ККМ") Тогда
		КоррСчет=?(Ордер.КодКоррСчета=1,"62.4","62.1");
		ПриходКасса=Пересчет(Ордер.Сумма,?(Ордер.Валюта.Выбран()=1,Ордер.Валюта,Рубли),Ордер.ДатаДок,Рубли,Ордер.ДатаДок);
		ДвижениеДенежныхСредств="ВыручкаПоОбычнымВидамДеятельности";
	Иначе
		ТаблицаПроводок.ВыбратьСтроки();
		Пока ТаблицаПроводок.ПолучитьСтроку()=1 Цикл
			Если ТаблицаПроводок.СчетДебета=СчетКассы Тогда
				ПриходКасса=ПриходКасса+ТаблицаПроводок.Сумма;
				ДвижениеДенежныхСредств=ТаблицаПроводок.СубкДеб1;
				КоррСчет=ТаблицаПроводок.СчетКредита;
			ИначеЕсли ТаблицаПроводок.СчетКредита=СчетКассы Тогда
				РасходКасса=РасходКасса+ТаблицаПроводок.Сумма;   
				ДвижениеДенежныхСредств=ТаблицаПроводок.СубкКред1;
				КоррСчет=ТаблицаПроводок.СчетДебета;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// первое, второе и третье поля в строке выгрузки документа
	СписПолей.ДобавитьЗначение(Ссылка, "");
	Если Ордер.Вид()="ПриходныйОрдерТБ" Тогда
		СписПолей.ДобавитьЗначение("Документ.ПриходныйОрдерТорг", "");    
	ИначеЕсли Ордер.Вид()="РасходныйОрдерТБ" Тогда
		СписПолей.ДобавитьЗначение("Документ.РасходныйОрдерТорг", "");    
	КонецЕсли;
	СписПолей.ДобавитьЗначение("Проведен Включен", "");
	
	// номер; признак идентификации по номеру ("?") - всегда
	СписПолей.ДобавитьЗначение("НомерДок()"+Прав(Ордер.НомерДок,6), "");
	// дата; признак идентификации по дате - всегда
	СписПолей.ДобавитьЗначение("ДатаДок()"+Выгрузить(Ордер.ДатаДок), "");
	
	СписПолей.ДобавитьЗначение("КоррСчет"+"(Счет."+ПланСчетов+")"+КоррСчет, "");
	Если Ордер.Вид()="ПриходныйОрдерТБ" Тогда                                    
		СписПолей.ДобавитьЗначение("Сумма()"	+Выгрузить(ПриходКасса-РасходКасса, ""));
		СписПолей.ДобавитьЗначение("ПринятоОт()"+Выгрузить(Ордер.ПринятоОт), "");
	ИначеЕсли Ордер.Вид()="РасходныйОрдерТБ" Тогда
		СписПолей.ДобавитьЗначение("Выдать()"	+Выгрузить(Ордер.Выдать), "");              
		СписПолей.ДобавитьЗначение("Сумма()"	+Выгрузить(РасходКасса-ПриходКасса, ""));
	КонецЕсли;
	СписПолей.ДобавитьЗначение("Основание()"	+Выгрузить(Ордер.Основание), "");
	СписПолей.ДобавитьЗначение("Приложение()"	+Выгрузить(Ордер.Приложение), "");
	СписПолей.ДобавитьЗначение("Комментарий()"	+Ордер.ПредставлениеВида()+" №"+Ордер.НомерДок, "");
	Если ПустоеЗначение(ДвижениеДенежныхСредств)=0 Тогда
		СписПолей.ДобавитьЗначение("ДвижениеДенежныхСредств()"+Выгрузить(ДвижениеДенежныхСредств,"ДвиженияДенежныхСредств"),"");
	КонецЕсли;
	ВыгрузитьСписокСписковПолей(СписСписков);
КонецПроцедуры // ВыгрузитьКассовыйОрдер()


//**************************************************************************************************
//	Процедура ПечВидДоговора()
//
//	Описание:
// Служебная процедура
//	Используется для печати проводок

Функция ПечВидДоговора(Элемент)
	Если Элемент.Вид()="ККМ" Тогда	
		Возврат(глИмяПустогоДоговора);
	ИначеЕсли Элемент.Вид()="Контрагенты" Тогда	
		Возврат(глИмяПустогоДоговора);
	КонецЕсли;	
	Возврат(Элемент.Наименование);
КонецФункции

//**************************************************************************************************
//	Процедура ПечФорматСубконто()
//
//	Описание:
// Служебная процедура
//	Используется для печати проводок

Функция ПечФорматСубконто(Субконто,НомерСубконто,Счет)
	ВидСубконто=ПолучитьКодСубконто7_7(Счет,НомерСубконто);
	Если ВидСубконто="Договоры" тогда
		Возврат ПечВидДоговора(Субконто);
	Иначе     
		Возврат Субконто;
	КонецЕсли;
КонецФункции                        

//**************************************************************************************************
//	Процедура ПопробоватьУзнатьЕдиницу()
//
//	Описание:
// Служебная процедура
//	Используется для печати проводок

Функция ПопробоватьУзнатьЕдиницу(Проводка)
	ЕдКоличество="";
	ВидСубконто=ПолучитьКодСубконто7_7(Проводка.СчетДебета,1);
	Если ВидСубконто="Номенклатура" Тогда
		ЕдКоличество=Проводка.СубкДеб1.БазоваяЕдиница;
	КонецЕсли;
	ВидСубконто=ПолучитьКодСубконто7_7(Проводка.СчетДебета,2);
	Если ВидСубконто="Номенклатура" Тогда
		ЕдКоличество=Проводка.СубкДеб2.БазоваяЕдиница;
	КонецЕсли;
	ВидСубконто=ПолучитьКодСубконто7_7(Проводка.СчетДебета,3);
	Если ВидСубконто="Номенклатура" Тогда
		ЕдКоличество=Проводка.СубкДеб3.БазоваяЕдиница;
	КонецЕсли;
	Если ПустоеЗначение(ЕдКоличество)=1 Тогда
		ВидСубконто=ПолучитьКодСубконто7_7(Проводка.СчетКредита,1);
		Если ВидСубконто="Номенклатура" Тогда
			ЕдКоличество=Проводка.СубкКред1.БазоваяЕдиница;
		КонецЕсли;
		ВидСубконто=ПолучитьКодСубконто7_7(Проводка.СчетКредита,2);
		Если ВидСубконто="Номенклатура" Тогда
			ЕдКоличество=Проводка.СубкКред2.БазоваяЕдиница;
		КонецЕсли;
		ВидСубконто=ПолучитьКодСубконто7_7(Проводка.СчетКредита,3);
		Если ВидСубконто="Номенклатура" Тогда
			ЕдКоличество=Проводка.СубкКред3.БазоваяЕдиница;
		КонецЕсли;
	КонецЕсли;
	Возврат(ЕдКоличество);
КонецФункции
//**************************************************************************************************
//	Процедура ПечатьПроводки()
//
//	Описание:
// Служебная процедура
//	Используется для печати проводок

Функция ПечатьПроводки(Проводка)
	
	СекцияПроводка=Таб.ПолучитьСекцию("Проводка");
	СекцияПроводка.НомерПроводки=Проводка.НомерСтроки;
	СекцияПроводка.РазделительУчета = Проводка.Фирма;
	СекцияПроводка.СчетДт = Проводка.СчетДебета;
	СекцияПроводка.СубконтоДт1 = ПечФорматСубконто(Проводка.СубкДеб1,1,Проводка.СчетДебета);
	СекцияПроводка.СубконтоДт2 = ПечФорматСубконто(Проводка.СубкДеб2,2,Проводка.СчетДебета);
	СекцияПроводка.СубконтоДт3 = ПечФорматСубконто(Проводка.СубкДеб3,3,Проводка.СчетДебета);
	
	СекцияПроводка.СчетКт = Проводка.СчетКредита;
	СекцияПроводка.СубконтоКт1 = ПечФорматСубконто(Проводка.СубкКред1,1,Проводка.СчетКредита);
	СекцияПроводка.СубконтоКт2 = ПечФорматСубконто(Проводка.СубкКред2,2,Проводка.СчетКредита);
	СекцияПроводка.СубконтоКт3 = ПечФорматСубконто(Проводка.СубкКред3,3,Проводка.СчетКредита);
	ЕдКоличество="";
	
	Если (Проводка.Количество=0) Тогда
		ЕдКоличество="";
	Иначе
		ЕдКоличество=ПопробоватьУзнатьЕдиницу(Проводка);
	КонецЕсли;
	
	СекцияПроводка.ЕдКоличество = ЕдКоличество;
	
	Если ПустоеЗначение(Проводка.Валюта)=0 Тогда
		СекцияПроводка.ЕдВалСумма = Проводка.Валюта;
		СекцияПроводка.ВалСумма = Формат(Проводка.ВалСумма, "Ч 015.2");
	КонецЕсли;	
	
	СекцияПроводка.Количество = Формат(Проводка.Количество, "Ч 015.3.,");
	СекцияПроводка.Сумма = Формат(Проводка.Сумма, "Ч 015.2");
	СекцияПроводка.ЕдСумма = "руб";
	СекцияПроводка.Содержание = Проводка.Содержание;
	СекцияПроводка.ЖО = Проводка.НомерЖурнала;
	Таб.ВывестиСекцию(СекцияПроводка);
	// сумма, количество, валюта и валютная сумма проводки
	
КонецФункции // СписокПолейПроводки()

//**************************************************************************************************
//	Процедура ПечатьОперации()
//
//	Описание:
// Служебная процедура
// Используется для печати проводок

Процедура ПечатьОперации(Операция)
	
	// перебор проводок
	Проводка=Операция.ТаблицаПроводок;
	Проводка.ВыбратьСтроки();
	Пока Проводка.ПолучитьСтроку()=1 Цикл
		// печать проводок
		ПечатьПроводки(Проводка);
	КонецЦикла;                  
КонецПроцедуры // ПечатьОперации()

//**************************************************************************************************
//	ВыгрузитьОбъектСпособом(Объект, Способ, Ссылка)
//
//	Параметры:
//	Объект - объект, который необходимо выгрузить
//	Способ - некоторое значение, указывающее способ выгрузки объекта
//	Ссылка - ссылка, которая присвоена выгружаемому объекту
//
//	Описание:
//	Предназначена для выгрузки любых объектов.
//	Здесь должны быть прописаны алгоритмы выгрузки переданных 
//	объектов в зависимости от указанного способа.

Процедура ВыгрузитьОбъектСпособом(Объект, Способ, Ссылка="")
	
	Если Способ="Операция" Тогда
		ВыгрузитьОперацию(Объект, Ссылка);
		
	ИначеЕсли Способ="МестаХранения" Тогда
		ВыгрузитьСклад(Объект, Ссылка);
		
	ИначеЕсли Способ="Валюта" Тогда
		ВыгрузитьВалюту(Объект, Ссылка);
		
	ИначеЕсли Способ="Номенклатура" Тогда
		ВыгрузитьТовар(Объект, Ссылка);
		
	ИначеЕсли Способ="Контрагенты" Тогда
		ВыгрузитьКонтрагент(Объект, Ссылка);
		
	ИначеЕсли Способ="Договоры" Тогда
		ВыгрузитьДоговор(Объект, Ссылка);
		
	ИначеЕсли Способ="СтатьиИздержекОбращения" Тогда
		ВыгрузитьИздержкиОбращения(Объект, Ссылка);
		
	ИначеЕсли Способ="СтавкиНДС" Тогда
		ВыгрузитьСтавки(Объект, Ссылка, "СтавкиНДС");
		
	ИначеЕсли Способ="СтавкиНГСМ" Тогда
		ВыгрузитьСтавки(Объект, Ссылка, "СтавкиНГСМ");
		
	ИначеЕсли Способ="СтавкиНП" Тогда
		ВыгрузитьСтавки(Объект, Ссылка, "СтавкиНП");
		
	ИначеЕсли Способ="ОтложенныеНалоги" Тогда
		ВыгрузитьОтложенныеНалоги(Объект, Ссылка);
		
	ИначеЕсли Способ="БанковскиеСчета" Тогда
		ВыгрузитьБанковскиеСчета(Объект, Ссылка);
		
	ИначеЕсли Способ="ДвиженияДенежныхСредств" Тогда
		ВыгрузитьДвиженияДенежныхСредств(Объект, Ссылка);
		
	ИначеЕсли Способ="ПрочиеДоходыИРасходы" Тогда
		ВыгрузитьПрочиеДоходыИРасходы(Объект, Ссылка);
		
	ИначеЕсли Способ="ВидыНоменклатуры" Тогда
		ВыгрузитьВидыНоменклатуры(Объект, Ссылка); 
		//Общепит		
	ИначеЕсли Способ="СтатьиЗатратНаПроизводство" Тогда
		ВыгрузитьСтатьиЗатратНаПроизводство(Объект, Ссылка);
		
	ИначеЕсли Способ="Подразделения" Тогда
		ВыгрузитьПодразделения(Объект, Ссылка); 
	Иначе 
		Сообщить("!!! не задан Способ выгрузки субконто "+Способ+"; (ВыгрузитьОбъектСпособом)");
	КонецЕсли;
	
КонецПроцедуры // ВыгрузитьОбъектСпособом()

//**************************************************************************************************
//	ВыгрузитьОбъект(Объект, Способ)
//
//	Параметры:
//	Объект - объект, который необходимо выгрузить
//	Способ - некоторое значение, указывающее способ выгрузки объекта
//
//	Возвращаемое значение:
//	строка - ссылка на выгруженный объект
//
//	Описание:
//	Предназначена для организации выгрузки объектов, которые выгружаются 
//	отдельными строками, на которые могут ссылаться другие выгружаемые объекты.
//	Проверяет, не был ли уже выгружен данный объект данным способом;
//	запоминает выгружамые объекты в списках по способам выгрузки.

Функция ВыгрузитьОбъект(Объект, Способ)
	
	// список выгруженных объектов
	СписВыгрОбъектов=СписСписковВыгрОбъектов.Получить(Способ);
	Если ТипЗначенияСтр(СписВыгрОбъектов)<>"СписокЗначений" Тогда
		СписВыгрОбъектов=СоздатьОбъект("СписокЗначений");
		СписСписковВыгрОбъектов.ДобавитьЗначение(СписВыгрОбъектов, Способ);
	КонецЕсли;
	
	// поиск объекта среди уже выгруженных объектов
	Ссылка=СписВыгрОбъектов.НайтиЗначение(Объект);
	Если 0<Ссылка Тогда 
		Возврат(Способ+" "+Ссылка);	
	КонецЕсли;	
	
	// выгрузка и добавление объекта в список выгруженных
	СписВыгрОбъектов.ДобавитьЗначение(Объект, "");
	Ссылка=Способ+" "+СписВыгрОбъектов.РазмерСписка();
	ВыгрузитьОбъектСпособом(Объект, Способ, Ссылка);
	
	Возврат(Ссылка);
	
КонецФункции // ВыгрузитьОбъект()

//**************************************************************************************************
//	Выгрузить(Объект, Способ)
//
//	Параметры:
//	Объект - объект, который необходимо выгрузить
//	Способ - некоторое значение, указывающее способ выгрузки объекта
//
//	Возвращаемое значение:
//	если объект выгружается отдельной строкой - ссылка на нее
//	иначе - строковое представление объекта
//
//	Описание:
//	Предназначена для выгрузки значений реквизитов базовых и агрегатных типов.
//	Если способ выгрузки не указан - выгрузка происходит стандартным способом:
//	справочники и документы выгружаются процедурами ВыгрузитьСправочник(), 
//	ВыгрузитьДокумент(); остальные объекты преобразуются в строку.

Функция Выгрузить(Объект, Способ="")
	
	ТипОбъекта=ТипЗначенияСтр(Объект);
	СтрОбъект="";
	
	// получение строки выгрузки по указанному шаблону
	Если ПустоеЗначение(Способ)=0		Тогда СтрОбъект=ВыгрузитьОбъект(Объект, Способ);
		
		// если шаблон не указан:
		// объекты базовых типов преобразуются в строку
	ИначеЕсли ТипОбъекта="Число"		Тогда СтрОбъект=Строка(Объект);
	ИначеЕсли ТипОбъекта="Строка"		Тогда СтрОбъект=СокрП(Объект);
	ИначеЕсли ТипОбъекта="Дата"		Тогда СтрОбъект=Формат(Объект, "ДДДММГГГГ");
		
		// пустые агрегатные объекты преобразуются в пустую строку 
	ИначеЕсли 1=ПустоеЗначение(Объект) 	Тогда СтрОбъект="";
		
		// справочники и документы выгружаются отдельной строкой
	ИначеЕсли ТипОбъекта="Справочник"	Тогда СтрОбъект=ВыгрузитьОбъект(Объект, "Справочник");
	ИначеЕсли ТипОбъекта="Документ"	Тогда СтрОбъект=ВыгрузитьОбъект(Объект, "Документ");
		
		// прочие непустые объекты преобразуются в строку
	ИначеЕсли ТипОбъекта="Перечисление" Тогда 
		//для 4.2
		СтрОбъект=Объект.Идентификатор();
		Если СтрОбъект="Сотрудник" Тогда
			СтрОбъект="ЧастноеЛицо";	
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта="Счет" 		Тогда СтрОбъект=Объект.Код;
	ИначеЕсли ТипОбъекта="ПланСчетов" 	Тогда СтрОбъект=Объект.Идентификатор();
	ИначеЕсли ТипОбъекта="ВидСубконто" 	Тогда СтрОбъект=Объект.Идентификатор();
	ИначеЕсли ТипОбъекта="Календарь" 	Тогда СтрОбъект=Объект.Вид();
	ИначеЕсли ТипОбъекта="ВидРасчета" 	Тогда СтрОбъект=Объект.Код;
		
	Иначе Сообщить("Выгрузить(): неверный тип Объекта "+ТипОбъекта);
	КонецЕсли;
	
	Возврат(СтрОбъект);
	
КонецФункции // Выгрузить()

//******************************************************************************
//	КаталогФайла(Файл)
//
//	Параметры:
//	Файл - если передан, в него будет возвращено имя файла

//	Возвращаемое значение:
//	Строка - каталог файла выгрузки данных.
//
//	Описание:
//	Если каталог не существует, то пользователю предлагается его создать.

Функция КаталогФайла(Файл="")
	
	Каталог="";
	Файл=ФайлВыгрузки;
	Разд=Найти(Файл, "\");
	
	Пока 0<Разд Цикл 
		Каталог=Каталог+Лев(Файл, Разд);
		Файл=Сред(Файл, Разд+1);
		Разд=Найти(Файл, "\");
	КонецЦикла;
	Каталог=Каталог+".";
	
	Если (4<СтрДлина(Каталог)) И (ФС.СуществуетФайл(Каталог)=0) Тогда
		Если 6<>Вопрос("Указанный каталог не существует! Создать?",4) Тогда
			Каталог="";
		Иначе
			ФС.СоздатьКаталог(Каталог);
		КонецЕсли;
	КонецЕсли;
	
	Возврат(Каталог);
	
КонецФункции // КаталогФайла()
//**************************************************************************************************
//	Процедура ВызовКаталога()
//
//	Параметры:
//	Нет
//
//	Описание:
//	Предназначена для просмотра каталога.
//	Используется в формуле Кнопки.

Процедура ВызовКаталога()
	Каталог=КаталогФайла();
	Если Каталог<>"" Тогда 
		ЗапуститьПриложение(Каталог); 
	КонецЕсли; 
КонецПроцедуры

//******************************************************************************
//	Процедура ОткрФайл(ИмяФайла)
//
//	Параметры:
//	ИмяФайла - имя выбранного файла
//
//	Описание:
//	Предназначена для открытия файла выгрузки проводок.
//	может быьть использована в формуле Кнопки.

Процедура ОткрФайл(ИмяФайла)
	Если ФС.СуществуетФайл(ИмяФайла)=1 Тогда
		ЗапуститьПриложение(ИмяФайла);
	Иначе
		Предупреждение("Указанный файл не существует!", 5);
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
Процедура ПриОткрытии()	// предопределенная процедра
	ВыбрЖурнал = Константа.НомерЖурналаДляВыгрузкиПроводок;
	
	Если ПустаяСтрока(ФайлВыгрузки) = 1 Тогда
		ФайлВыгрузки = КаталогПользователя()+"1sbtrans.txt";
	КонецЕсли;
	
	Если ПустоеЗначение(Константа.АвансовыйПлатеж)=0 Тогда
		ПроцНДСуслуг=20;
	Иначе
		ПроцНДСуслуг=20;
	КонецЕсли;
	ПерПарам=Форма.Параметр;
	МыПечатаем=0;
	Если ПустоеЗначение(ПерПарам)=0 тогда 
		Если ТипЗначенияСтр(ПерПарам)="Документ" тогда
			МыПечатаем=1;
			ПереданДок=ПерПарам;
			ДатаНач=ПереданДок.ДатаДок;
			ДатаКон=ПереданДок.ДатаДок;
			ВыбрФирма=ПереданДок.Фирма;
			ВыбПериод="Документ";
			ВыгружатьКнигуПродаж=0;
			ВыгружатьКнигуПокупок=0;
			ВыгружатьКассовуюКнигу=0;
			ВыгрузитьПроводки();
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	
	Период=СоздатьОбъект("СписокЗначений");
	Период.ДобавитьЗначение("Документ");
	Период.ДобавитьЗначение("День");
	Период.ДобавитьЗначение("Неделя");
	Период.ДобавитьЗначение("Месяц");
	ВыбПериод="Документ";
	
	Кодировка=СоздатьОбъект("СписокЗначений");
	Кодировка.ДобавитьЗначение("Windows");
	Кодировка.ДобавитьЗначение("DOS");
	ВыбКодировка="Windows";
	
КонецПроцедуры
//**************************************************************************************************

Процедура ПриНачалеВыбораЗначения(Элемент, Продолжать) // предопределенная процедура
	
	Перем Файл;
	
	Если Элемент="ФайлВыгрузки" Тогда
		Каталог=КаталогФайла(Файл);
		Выбор=ФС.ВыбратьФайл(0, Файл, Каталог, "Выберите файл выгрузки", "Текстовые (*.txt)|*.txt", "txt");
		Если Выбор=1 Тогда
			ФайлВыгрузки=Каталог+Файл;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
ДатаКон = ПолучитьДатуТА();
ДатаНач = НачМесяца(ДатаКон);
ВыбрФирма = Константа.ОсновнаяФирма;
ВыбрФирма.ИспользоватьДату(ДатаКон);
СтрСодержаниеОперации = "Торговые операции";

СписокВидовРегистров=СоздатьОбъект("СписокЗначений");
СписокВидовРегистров.ДобавитьЗначение("ПартииТоваров");
СписокВидовРегистров.ДобавитьЗначение("ВзаиморасчетыПокупателей");
СписокВидовРегистров.ДобавитьЗначение("ВзаиморасчетыПоставщиков");
//СписокВидовРегистров.ДобавитьЗначение("НДСприобретенныхТоваров");

СитуацииПроводок=СоздатьОбъект("СписокЗначений");
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПокупателей_А","151"); // АвансоваяВыплата
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПокупателей_А","152"); // АвансоваяВыплата
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПокупателей_А","150"); // АвансоваяВыплата
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПокупателей_З","58"); // ВводНачальныхВзаиморасчетов
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПокупателей_З","57"); // ВводНачальныхВзаиморасчетов
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПокупателей_З","224"); // ВводНачальныхВзаиморасчетов
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПокупателей_З","238"); // ВводНачальныхВзаиморасчетов
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПокупателей_Й","156"); // ВозвратАванса
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПокупателей_Й","157"); // ВозвратАванса
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПокупателей_Й","155"); // ВозвратАванса
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПокупателей_К","41"); // ОтгрузкаОплаченногоТовараКупленного
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПокупателей_К","100"); // ОтгрузкаОплаченногоТовараКупленного
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПокупателей_К","37"); // ОтгрузкаОплаченногоТовараКупленного
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПокупателей_К","163"); // ОтгрузкаОплаченногоТовараКупленного
//СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПокупателей_Н","227"); // НеоплаченнаяОтгрузкаТовараКупленного
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПокупателей_П","160"); // ОплатаТовара
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПокупателей_П","163"); // ОплатаТовара
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПокупателей_П","230"); // ОплатаТовара
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПокупателей_П","159"); // ОплатаТовара
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПокупателей_П","164"); // ОплатаТовара
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПокупателей_Р","166"); // ОплатаТоваровПринятых
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПокупателей_Р","167"); // ОплатаТоваровПринятых
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПокупателей_Р","168"); // ОплатаТоваровПринятых
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПокупателей_Р","210"); // ОплатаТоваровПринятых
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПокупателей_Т","100"); // ОтгрузкаОплаченногоТовараПринятого
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПокупателей_Т","198"); // ОтгрузкаОплаченногоТовараПринятого
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПокупателей_Т","168"); // ОтгрузкаОплаченногоТовараПринятого
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПоставщиков_А","176"); // АвансоваяВыплата
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПоставщиков_А","177"); // АвансоваяВыплата
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПоставщиков_З","60"); // ВводНачальныхВзаиморасчетов 
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПоставщиков_Й","180"); // ВозвратАванса
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПоставщиков_Й","181"); // ВозвратАванса
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПоставщиков_К","208"); // ОтгрузкаОплаченногоТовараКупленного
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПоставщиков_К","136"); // ОтгрузкаОплаченногоТовараКупленного
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПоставщиков_К","51"); // ОтгрузкаОплаченногоТовараКупленного
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПоставщиков_О","184"); // ОплатаТоваровИУслуг
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПоставщиков_О","183"); // ОплатаТоваровИУслуг  
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПоставщиков_О","51"); // ОплатаТоваровИУслуг
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПоставщиков_Р","189"); // ОплатаТоваровПринятых
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПоставщиков_Р","188"); // ОплатаТоваровПринятых
СитуацииПроводок.ДобавитьЗначение("ПоРегВзаиморасчетыПоставщиков_Т","217"); // ОтгрузкаОплаченногоТовараПринятого
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_Г","50"); // ВводПартииКупленныхТоваров
//СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_Д","72"); // ПродажаПринятогоТовара
//СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_Д","209"); // ПродажаПринятогоТовара
//СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_Д","220"); // ПродажаПринятогоТовара
//СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_Д","221"); // ПродажаПринятогоТовара
//СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_Д","222"); // ПродажаПринятогоТовара
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_Д","69"); // ПродажаПринятогоТовара
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_Д","71"); // ПродажаПринятогоТовара
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_Д","105"); // ПродажаПринятогоТовара
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_Д","106"); // ПродажаПринятогоТовара
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_Д","243"); // ПродажаПринятогоТовара
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_Д","245"); // ПродажаПринятогоТовара
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_Е","138"); // ВозвратОтРеализатора
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_З","2"); // ЗакупкаТовара
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_И","249"); // ПроданоРеализатором
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_И","149"); // ПроданоРеализатором
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_И","248"); // ПроданоРеализатором
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_К","194"); // ПринятоНаРеализацию
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_П","248"); // ПродажаТовара
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_П","249"); // ПродажаТовара
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_П","68"); // ПродажаТовара
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_П","202"); // ПродажаТовара
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_П","99"); // ПродажаТовара
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_П","95"); // ПродажаТовара
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_С","55"); // СписаниеТовара
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_Р","143"); // ВыдачаНаРеализациюКупленного 
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_Ы","251"); // ВводПартииОтданныхТоваров
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_Я","52"); // ВводПартииПринятыхТоваров

СитуацииПроводок.ДобавитьЗначение("ПоДокПриходнаяНакладнаяПоВсему","402"); // ВыделенНДСПриЗакупке
//Общепит
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_z","401"); // СписаниеНаПроизводcтвоБлюда 
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_-","403"); // ПродажаБлюда 
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_-","412"); // ПередачаГотовогоБлюдаС41На20Счет 
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_-","99"); // ПродажаБлюда
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_-","202"); // ПродажаБлюда
//СитуацииПроводок.ДобавитьЗначение("ПоДокПеремещениеПоСтрокам","407"); // Перемещение    
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_%","407"); // Перемещение
//СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_С","408"); // СписаниеТовара
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_L","409"); // ОприходованиеИзлишков
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_*","410"); // ПроизводствоБлюда   
СитуацииПроводок.ДобавитьЗначение("ПоРегПартииТоваров_+","411"); // ПроизводствоБлюда

ОписательПроводок=СоздатьОбъект("ТаблицаЗначений");
ОписательПроводок.НоваяКолонка("КодПроводки");
ОписательПроводок.НоваяКолонка("Содержание");
ОписательПроводок.НоваяКолонка("ПланСчетов");
ОписательПроводок.НоваяКолонка("НомерЖурнала");
ОписательПроводок.НоваяКолонка("ПоДокПоРег");
ОписательПроводок.НоваяКолонка("ВидДокумента");
ОписательПроводок.НоваяКолонка("ПоВсемуПоСтрокам");
ОписательПроводок.НоваяКолонка("ВидРегистра");

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=2;
ОписательПроводок.Содержание="Поступл. тов. на склад";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=100;
ОписательПроводок.Содержание="Зачтен НДС аванса";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=35;
ОписательПроводок.Содержание="Зачтен НП аванса";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=37;
ОписательПроводок.Содержание="Зачт.предопл.покупателя";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=41;
ОписательПроводок.Содержание="Выделен НДС с предоплаты (по оплате)";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=50;
ОписательПроводок.Содержание="Ввод ост.собств.тов";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=51;
ОписательПроводок.Содержание="Зачтен НДС опл.товаров";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПоставщиков";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=52;
ОписательПроводок.Содержание="Введены ост.комис.тов.";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=55;
ОписательПроводок.Содержание="Списаны товары";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=57;
ОписательПроводок.Содержание="Введены взаиморасч.покуп.";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=58;
ОписательПроводок.Содержание="Выделен НДС аванса";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=60;
ОписательПроводок.Содержание="Введены взаиморасч.пост.";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПоставщиков";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=68;
ОписательПроводок.Содержание="Себест. отгр. товара";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=69;
ОписательПроводок.Содержание="Продажа комисс. товаров";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=71;
ОписательПроводок.Содержание="Сумма вознаграждения";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=72;
ОписательПроводок.Содержание="Учтен НДС вознаграждения до 2001";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=95;
ОписательПроводок.Содержание="Реализация тов. по отп.цене";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=99;
ОписательПроводок.Содержание="Учтен НДС реализации";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=105;
ОписательПроводок.Содержание="Учет задолж.  покупателя комисс. товаров";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=106;
ОписательПроводок.Содержание="Учет НП при покупке комисс. товаров";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=136;
ОписательПроводок.Содержание="Учтен аванс поставщику";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПоставщиков";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=138;
ОписательПроводок.Содержание="Возвр.товар от реализат.";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=143;
ОписательПроводок.Содержание="Тов.передан на реализацию";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=149;
ОписательПроводок.Содержание="Реализация по себест.";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=150;
ОписательПроводок.Содержание="Поступил аванс Касса";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=151;
ОписательПроводок.Содержание="Поступил аванс Банк";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=152;
ОписательПроводок.Содержание="Выделен НДС аванса";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=155;
ОписательПроводок.Содержание="Возвр.аванса покупателю Касса";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=156;
ОписательПроводок.Содержание="Возвр.аванса покупателю Банк";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=157;
ОписательПроводок.Содержание="Возвр.выдел.НДС аванса";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=159;
ОписательПроводок.Содержание="Поступила оплата Касса";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=160;
ОписательПроводок.Содержание="Поступила оплата Банк";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=163;
ОписательПроводок.Содержание="Выделен НП оплаты";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=164;
ОписательПроводок.Содержание="Выделен НДС оплаты";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=166;
ОписательПроводок.Содержание="Поступила оплата Касса за комм. тов.";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=167;
ОписательПроводок.Содержание="Поступила оплата Банк за комм. тов.";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=168;
ОписательПроводок.Содержание="Выделен НП с оплаты";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";


ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=176;
ОписательПроводок.Содержание="Выпл.аванс поставщику Касса";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПоставщиков";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=177;
ОписательПроводок.Содержание="Выпл.аванс поставщику Банк";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПоставщиков";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=180;
ОписательПроводок.Содержание="Возвр.аванса поставщиком Касса";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПоставщиков";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=181;
ОписательПроводок.Содержание="Возвр.аванса поставщиком Банк";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПоставщиков";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=183;
ОписательПроводок.Содержание="Оплата поставщику Касса";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПоставщиков";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=184;
ОписательПроводок.Содержание="Оплата поставщику Банк";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПоставщиков";







ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=188;
ОписательПроводок.Содержание="Оплата комитенту Касса";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПоставщиков";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=189;
ОписательПроводок.Содержание="Оплата комитенту Банк";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПоставщиков";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=194;
ОписательПроводок.Содержание="Поступил товар на реализацию";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

//ОписательПроводок.НоваяСтрока();
//ОписательПроводок.КодПроводки=197;
//ОписательПроводок.Содержание="Реализация тов. по отп.цене";
//ОписательПроводок.ПланСчетов="Основной";
//ОписательПроводок.НомерЖурнала="ТБ";
//ОписательПроводок.ПоДокПоРег=1;
//ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=198;
ОписательПроводок.Содержание="Зачт.предопл.покуп. за комм.";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=202;
ОписательПроводок.Содержание="Учтен НП реализации";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=206;
ОписательПроводок.Содержание="Выделен НП с предоплаты (по оплате)";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=208;
ОписательПроводок.Содержание="Получен товар в счет ранее возвращенного";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПоставщиков";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=209;
ОписательПроводок.Содержание="Учтен НДС с прод. цены до 2001";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=210;
ОписательПроводок.Содержание="Выделен НДС оплаты до 2001 г.";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=217;
ОписательПроводок.Содержание="Учтен аванс поставщику";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПоставщиков";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=220;
ОписательПроводок.Содержание="Учтен НДС на сумму вознаграждения до 2001";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=221;
ОписательПроводок.Содержание="Зачтен НДС на сумму вознагражден до 2001";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=222;
ОписательПроводок.Содержание="Учтен НДС вознаграждения до 2001";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=224;
ОписательПроводок.Содержание="(ПС) Введены взаиморасч.покуп.";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=227;
ОписательПроводок.Содержание="(ПС) Зачт.предопл.покупателя";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=230;
ОписательПроводок.Содержание="(ПС) Поступила оплата";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=238;
ОписательПроводок.Содержание="Учтен НДС при вводе нач. взаим. (по оплате)";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=242;
ОписательПроводок.Содержание="ОТКЛ Выделен НП с предоплаты (по отгрузке)";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=243;
ОписательПроводок.Содержание="Учтен НДС вознаграждения";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=245;
ОписательПроводок.Содержание="Оплач НДС комм вознагр";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";
//
//ОписательПроводок.НоваяСтрока();
//ОписательПроводок.КодПроводки=246;
//ОписательПроводок.Содержание="Выделен НДС оплаты (комисс.возн.)";
//ОписательПроводок.ПланСчетов="Основной";
//ОписательПроводок.НомерЖурнала="ТБ";
//ОписательПроводок.ПоДокПоРег=1;
//ОписательПроводок.ВидРегистра="ВзаиморасчетыПокупателей";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=248;
ОписательПроводок.Содержание="(ПС) Зачт.предопл.покупателя";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=249;
ОписательПроводок.Содержание="(ПС) Реализация тов. по отп.цене";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=251;
ОписательПроводок.Содержание="Введены ост. отданных товаров";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";


ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=412;
ОписательПроводок.Содержание="Передано от СГП в производство";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";



ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=401;
ОписательПроводок.Содержание="Отпущено в производство";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=402;
ОписательПроводок.Содержание="Выделен НДС прихода";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=2;
ОписательПроводок.ВидДокумента="ПриходнаяНакладная";	
ОписательПроводок.ПоВсемуПоСтрокам=1;

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=403;
ОписательПроводок.Содержание="Списана себестоимость блюда";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=404;
ОписательПроводок.Содержание="Поступила выручка в кассу";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=2;
ОписательПроводок.ВидДокумента="ПриходныйОрдерТБ";	
ОписательПроводок.ПоВсемуПоСтрокам=1;

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=405;
ОписательПроводок.Содержание="Выделен НДС";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=2;
ОписательПроводок.ВидДокумента="ПриходныйОрдерТБ";	
ОписательПроводок.ПоВсемуПоСтрокам=1;

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=406;
ОписательПроводок.Содержание="Выделен НП";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=2;
ОписательПроводок.ВидДокумента="ПриходныйОрдерТБ";	
ОписательПроводок.ПоВсемуПоСтрокам=1;

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=407;
ОписательПроводок.Содержание="Перемещение между складами";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";	
//ОписательПроводок.ПоВсемуПоСтрокам=2;

//ОписательПроводок.НоваяСтрока();
//ОписательПроводок.КодПроводки=408;
//ОписательПроводок.Содержание="Списана недостача";
//ОписательПроводок.ПланСчетов="Основной";
//ОписательПроводок.НомерЖурнала="ТБ";
//ОписательПроводок.ПоДокПоРег=1;
//ОписательПроводок.ВидРегистра="ПартииТоваров";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=409;
ОписательПроводок.Содержание="Оприходованы излишки";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=410;
ОписательПроводок.Содержание="Оприходована продукция";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

ОписательПроводок.НоваяСтрока();
ОписательПроводок.КодПроводки=411;
ОписательПроводок.Содержание="Оприходована продукция";
ОписательПроводок.ПланСчетов="Основной";
ОписательПроводок.НомерЖурнала="ТБ";
ОписательПроводок.ПоДокПоРег=1;
ОписательПроводок.ВидРегистра="ПартииТоваров";

ТаблицаПроводок=СоздатьОбъект("ТаблицаЗначений");
ТаблицаПроводок.НоваяКолонка("СчетДебета");
ТаблицаПроводок.НоваяКолонка("СчетКредита");
ТаблицаПроводок.НоваяКолонка("Содержание");
ТаблицаПроводок.НоваяКолонка("Сумма");
ТаблицаПроводок.НоваяКолонка("ВалСумма");
ТаблицаПроводок.НоваяКолонка("Валюта");
ТаблицаПроводок.НоваяКолонка("Количество");
ТаблицаПроводок.НоваяКолонка("Фирма");
ТаблицаПроводок.НоваяКолонка("ПланСчетов");
ТаблицаПроводок.НоваяКолонка("НомерЖурнала");
ТаблицаПроводок.НоваяКолонка("СубкДеб1");
ТаблицаПроводок.НоваяКолонка("СубкДеб2");
ТаблицаПроводок.НоваяКолонка("СубкДеб3");
ТаблицаПроводок.НоваяКолонка("СубкКред1");
ТаблицаПроводок.НоваяКолонка("СубкКред2");
ТаблицаПроводок.НоваяКолонка("СубкКред3");

ТаблицаОпераций=СоздатьОбъект("ТаблицаЗначений");
ТаблицаОпераций.НоваяКолонка("ДатаДок");
ТаблицаОпераций.НоваяКолонка("ВремяДок");
ТаблицаОпераций.НоваяКолонка("Содержание");
ТаблицаОпераций.НоваяКолонка("СуммаОперации");
ТаблицаОпераций.НоваяКолонка("Фирма");
ТаблицаОпераций.НоваяКолонка("Автор");
ТаблицаОпераций.НоваяКолонка("ТаблицаПроводок");
ТаблицаОпераций.НоваяКолонка("Комментарий");

ТаблицаКнигиПродаж=СоздатьОбъект("ТаблицаЗначений");
ТаблицаКнигиПродаж.НоваяКолонка("Контрагент");
ТаблицаКнигиПродаж.НоваяКолонка("НомерДата");
ТаблицаКнигиПродаж.НоваяКолонка("Всего");
ТаблицаКнигиПродаж.НоваяКолонка("СуммаБезНДС20");
ТаблицаКнигиПродаж.НоваяКолонка("НДС20");
ТаблицаКнигиПродаж.НоваяКолонка("СуммаБезНДС10");
ТаблицаКнигиПродаж.НоваяКолонка("НДС10");
ТаблицаКнигиПродаж.НоваяКолонка("СуммаСовсемБезНДС");
ТаблицаКнигиПродаж.НоваяКолонка("СуммаНП"); 
ТаблицаКнигиПродаж.НоваяКолонка("ДатаЗаписи"); 
ТаблицаКнигиПродаж.НоваяКолонка("ТипЗаписи"); 

ТаблицаКнигиПокупок=СоздатьОбъект("ТаблицаЗначений");
ТаблицаКнигиПокупок.НоваяКолонка("Контрагент");
ТаблицаКнигиПокупок.НоваяКолонка("ДатаНомерСчетаФактуры");
ТаблицаКнигиПокупок.НоваяКолонка("ДатаОприходования");
ТаблицаКнигиПокупок.НоваяКолонка("Всего");
ТаблицаКнигиПокупок.НоваяКолонка("СуммаБезНДС20");
ТаблицаКнигиПокупок.НоваяКолонка("НДС20");
ТаблицаКнигиПокупок.НоваяКолонка("СуммаБезНДС10");
ТаблицаКнигиПокупок.НоваяКолонка("НДС10");
ТаблицаКнигиПокупок.НоваяКолонка("СуммаСовсемБезНДС");
ТаблицаКнигиПокупок.НоваяКолонка("ДатаЗаписи"); 

СписокДопПараметров=СоздатьОбъект("СписокЗначений");

СписСписковВыгрОбъектов=СоздатьОбъект("СписокЗначений");

СтрРазделительСтрок="@@%%@@";
