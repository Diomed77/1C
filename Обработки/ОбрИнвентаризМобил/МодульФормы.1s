//*******************************************
Перем тпДок, Источник;
Перем ТекущийСлой;
Перем ТекКомплектовщик;
Перем ТекущийДокПоставки;
Перем ПередатьФокус;
Перем тригерФильтр;
Перем промКлГруппа;

Процедура НастроитьОкна(Показать=1) Далее
Процедура ЗаполнитьТПДок(Обновить=0) Далее
Процедура ВыводИнфо(док) Далее

Функция ПолучитьСостояниеДок(Сост,ДокВид)
	спрСост=СоздатьОбъект("Справочник.СостоянияДокументов");
	спрСост.НайтиПоНаименованию(ДокВид); 
	спрСост.ИспользоватьРодителя(спрСост.ТекущийЭлемент());
	спрСост.НайтиПоНаименованию(Сост,1);
	Возврат спрСост.ТекущийЭлемент();
КонецФункции

//======================================================================
//Процедура СменитьСостояниеДокумента(пТекущийДок,пСост)
//	
//	СостДок=СоздатьОбъект("Документ.СостояниеДок");
//	СостДок.Новый();
//	ЗаполнитьШапку(СостДок); 
//	СостДок.ДокументОснование=пТекущийДок;
//	СостДок.СостояниеДок=ПолучитьСостояниеДок(пСост,пТекущийДок.Вид());
//	СостДок.АвтоВремяТекущее();
//	ОбъектЗаписать(СостДок,);
//	СостДок.АвтоВремяТекущее();
//	СостДок.Провести(1);
//	ЗаписьЖурналаРегистрации( "Состояние документа "+СостДок.НомерДок+" "+пТекущийДок.НомерДок,,пТекущийДок.Вид(), пТекущийДок, 2 );
//		
//КонецПроцедуры // СменитьСостояниеДокумента


//Функция ПроверкаПриема(пТекущийДокПоставки,пКомплектовщик="")
//	Перем текст;
//	
//	пДок=СоздатьОбъект("ИндексированнаяТаблица");
//	Запрос=СоздатьОбъект("ODBCRecordSet");
//	
//	Если пКомплектовщик="" Тогда
//		текст="";
//	Иначе
//		текст="|AND ($ПрихНаклМобил.Комплектовщик = :Комплектовщик)";
//		Запрос.УстановитьТекстовыйПараметр("Комплектовщик",пКомплектовщик);
//	КонецЕсли;
//	
//	ТекстЗапроса="	SELECT КомплектацияМобил.IDDOC [Ссылка $Документ.КомплектацияМобил]
//		|FROM $Документ.КомплектацияМобил AS КомплектацияМобил
//		|WHERE ($КомплектацияМобил.ПоСчету = :пСчет)
//		|";	
//			
//	Запрос.УстановитьТекстовыйПараметр("пСчет",пТекущийДокПоставки);
//	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,пДок);
//	Возврат пДок;
//КонецФункции

Функция ЗадачаНаВнешнююКоманду(пДок="",пКомплектовщик,Команда="")
	
	сзПараметр= СоздатьОбъект("СписокЗначений");
	сзПараметр.ДобавитьЗначение(Команда,"Команда");
	сзПараметр.ДобавитьЗначение(пКомплектовщик,"пКомплектовщик");
	сзПараметр.ДобавитьЗначение(ТекущийДокПоставки,"пДок");
	//сзПараметр.ДобавитьЗначение(ВзятьКонтекст(ТекущийДокумент()),"Конт");	

	Если Команда="Новый" Тогда
		Возврат ОткрытьФормуМодально("Документ.ИнвентаризМобил",сзПараметр);
	ИначеЕсли Команда="Открыть" Тогда
		Возврат ОткрытьФормуМодально(пДок,сзПараметр);
	ИначеЕсли Команда="Просмотр" Тогда
		Возврат ОткрытьФормуМодально(пДок,сзПараметр);
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции
Функция ЗадачаНаВнешнююКоманду1(пДок="",пКомплектовщик,Команда="")
	
	сзПараметр= СоздатьОбъект("СписокЗначений");
	сзПараметр.ДобавитьЗначение(Команда,"Команда");
	сзПараметр.ДобавитьЗначение(пКомплектовщик,"пКомплектовщик");
	сзПараметр.ДобавитьЗначение(ТекущийДокПоставки,"пДок");
	//сзПараметр.ДобавитьЗначение(ВзятьКонтекст(ТекущийДокумент()),"Конт");	

	Если Команда="Новый" Тогда
		Возврат ОткрытьФормуМодально("Документ.КомплектацияМобил",сзПараметр);
	ИначеЕсли Команда="Открыть" Тогда
		Возврат ОткрытьФормуМодально(пДок,сзПараметр);
	ИначеЕсли Команда="Просмотр" Тогда
		Возврат ОткрытьФормуМодально(пДок,сзПараметр);
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции


//======================================================================
//{****Кнопки****
Процедура кнВыбратьДок()
	Перем ИТ;
	
	Если ПустоеЗначение(ТекущийДокПоставки)=1 Тогда
		Возврат;
	КонецЕсли;
	
	л_Состояние=глПолучитьСостояниеДокумента(ТекущийДокПоставки,0);
	л_НайденДокКомплМобил=0;
	
	
	Если ТекущийДокПоставки.Выбран()=1 Тогда
		ДокПодч=СоздатьОбъект("Документ");
		ДокПодч.ВыбратьПодчиненныеДокументы(ТекущийДокПоставки.ДатаДок,,ТекущийДокПоставки);
		Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
			Если (ДокПодч.Вид()="ИнвентаризМобил") И (ДокПодч.ПометкаУдаления()=0) Тогда
				Если ДокПодч.Комплектовщик=ТекКомплектовщик Тогда
					л_НайденДокКомплМобил=1;
					л_ДокументМобИнвентаризации=ДокПодч.ТекущийДокумент();
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;				
	КонецЕсли;



	Если л_НайденДокКомплМобил=1 Тогда
		ЗадачаНаВнешнююКоманду(л_ДокументМобИнвентаризации,ТекКомплектовщик,"Открыть");//сущесвует такой документ
	Иначе
		ЗадачаНаВнешнююКоманду(,ТекКомплектовщик,"Новый");//нет документов
	КонецЕсли;	
	
	

	тпДок.ОбновитьСтроки();
	ТекущийДокПоставки=тпДок.ТекущиеДанные.Получить("Док");
	ПередатьФокус = "тпДок_"; 
	Форма.Закрыть(0);

КонецПроцедуры
Процедура кнФильтрДок()
	ВыводИнфо(ТекущийДокПоставки);
	ЗаполнитьТПДок(тригерФильтр);
	Форма.Обновить();	
КонецПроцедуры // кнФильтрДок
Процедура кнФильтрДок1()

	тригерФильтр=тригерФильтр+1;
	Если тригерФильтр>3 Тогда
		тригерФильтр=1;
	КонецЕсли;
	
	Если тригерФильтр=3 Тогда
		текстЗаголовка="Состояние: Комплектуется";
	ИначеЕсли тригерФильтр=1 Тогда
		текстЗаголовка="Состояние: Ож.компл.";
	ИначеЕсли тригерФильтр=2 Тогда
		текстЗаголовка="Состояние: Ож.отгрузки";
	КонецЕсли;
	
	Форма.тКлиент.Заголовок("Пусто");
	Форма.тСостояние.Заголовок(текстЗаголовка);



	ЗаполнитьТПДок(тригерФильтр);
	ПередатьФокус = "тпДок_"; 
	Форма.Закрыть(0);	
	
КонецПроцедуры // кнФильтрДок
Процедура кнВыход()
//	ТекущийСлой="слОбложка";
//	Форма.ИспользоватьСлой(ТекущийСлой,2);
	Форма.Закрыть(0);
КонецПроцедуры
Процедура кнЗакрыть()
	Перем расш;
	Форма.Закрыть(0);
	СтатусВозврата(0);
	ЗавершитьРаботуСистемы(0);
//	расш=СоздатьОбъект("РасширениеФормы");
//	расш.Закрыть();
КонецПроцедуры

Процедура кнПрием()
	ТекущийСлой="слПриемТовара";
	Форма.ИспользоватьСлой(ТекущийСлой,2);
	ПередатьФокус = "тпДок_"; 
	Форма.Закрыть(0);

КонецПроцедуры
//======================================================================
Процедура кнКомплектация()
	//ОткрытьФорму("Обработка.ОбрКомплДок",ТекКомплектовщик,);	
	ТекущийСлой="слПриемТовара";
	Форма.ИспользоватьСлой(ТекущийСлой,2);	
КонецПроцедуры // кнКомплектация

//======================================================================

//Процедура кнСнять()
//
//	Если ПустоеЗначение(ТекущийДокПоставки)=1 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ИТ=ПроверкаПриема(ТекущийДокПоставки);
//	Если ИТ.КоличествоСтрок()>0 Тогда
//		СоздатьКомплектациюЗаявкиФакт(ТекущийДокПоставки);
//	Иначе
//		Предупреждение("Нет комплектации");
//	КонецЕсли;	
//	ЗаполнитьТПДок(тригерФильтр);
//	Форма.Обновить();
//КонецПроцедуры // кнСнять
//}****Кнопки****

//{****Инвентаризация****

Функция ПоискВесовогоКода(п_Код)

	ТекстЗапроса="SELECT Номенклатура.ID [Ссылка $Справочник.Номенклатура]
		|FROM $Справочник.Номенклатура AS Номенклатура With (NOLOCK)
		|WHERE ($Номенклатура.ВесовойКод = :пКод)
		|";
	ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");
	ЗапросСКЛ.УстановитьТекстовыйПараметр("пКод",п_Код);
	л_КодТовара = ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	
	Возврат л_КодТовара;
КонецФункции // ПоискВесовогоКода
Функция ПоискВесовогоКодаSQL(п_Код)

	л_КодТовара="";
	
	ТекстЗапроса="SELECT  ID [Товар $Справочник.Номенклатура]
		|FROM RTPOS_CA.dbo.foodlv_items
		|WHERE (GLID = :пКод)
		|";
	ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");
	ЗапросСКЛ.УстановитьТекстовыйПараметр("пКод",п_Код);
	л_КодТовара = ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	
	Возврат л_КодТовара;
КонецФункции // ПоискВесовогоКода


Функция ПоискВСправочнике(пШтрихкод="")//включая подчиненые через выбор элементов
	Перем ИмяРекв,ПрефКода,ШтрихКодДляПоиска;

	//если в строке штрихкода спереди идут 0 (ставятся, если вес меньше 1 кг)
	Если Лев(Строка(пШтрихКод),2)="02" Тогда
		позСтр=Найти(пШтрихКод,"2"); //если весовой товар
		Если позСтр>0 Тогда
			длинаСтр=СтрДлина(пШтрихКод);
			БезНулей=Прав(пШтрихКод,длинаСтр-позСтр+1);
			пШтрихКод=БезНулей;			
		КонецЕсли;
	КонецЕсли;
	
	ПрефКода=Лев(Строка(пШтрихКод),2); //поиск весового товара

	Вес=0;
		//{ Обработка весового товара 
	Если (ПрефКода="29") ИЛИ (ПрефКода="28") ИЛИ (ПрефКода="23") ИЛИ (ПрефКода="24")  ИЛИ (ПрефКода="25")  Тогда

		Сообщить("Штрихкод:"+пШтрихКод);
		л_Товар=ПоискВесовогоКода(Число(Сред(пШтрихКод,3,6)));
		Сообщить("Весовой код:"+Сред(пШтрихКод,3,6));
		Сообщить(л_Товар);
		Если ПустоеЗначение(л_Товар)=0 Тогда
			Если л_Товар.Выбран()=1 Тогда
				Возврат л_Товар;
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли (ПрефКода="21") ИЛИ (ПрефКода="22")ИЛИ (ПрефКода="26") Тогда
		Сообщить("Штрихкод:"+пШтрихКод);
		л_Товар=ПоискВесовогоКодаSQL(Число(Сред(пШтрихКод,3,6)));
		Сообщить("Весовой код:"+Сред(пШтрихКод,3,6));
		Сообщить(л_Товар);
		Если ПустоеЗначение(л_Товар)=0 Тогда
			Если л_Товар.Выбран()=1 Тогда
				Возврат л_Товар;
			КонецЕсли;
		КонецЕсли;	
//} Обработка весового товара		
	Иначе
		ШтрихКодДляПоиска=пШтрихКод;
	КонецЕсли;

	
	спрТовар = СоздатьОбъект("Справочник.Номенклатура");
	спрПодч=СоздатьОбъект("Справочник.ШтрихКоды");
	
	ИмяРекв = "Штрихкод";
	ИмяРеквКод = "КодТовара";
	ФлагГлобПоиска = 1; 
	Если спрТовар.НайтиПоРеквизиту(ИмяРекв,СокрЛП(ШтрихКодДляПоиска),ФлагГлобПоиска)=1 Тогда
		Возврат(спрТовар.ТекущийЭлемент());
 	ИначеЕсли спрТовар.НайтиПоРеквизиту(ИмяРеквКод,Прав(СокрЛП(ШтрихКодДляПоиска),7),ФлагГлобПоиска)=1 Тогда
 		Возврат(спрТовар.ТекущийЭлемент());
	ИначеЕсли спрПодч.НайтиПоКоду(СокрЛП(ШтрихКодДляПоиска))=1 Тогда
 		Возврат(спрПодч.ТекущийЭлемент().Владелец);
 	КонецЕсли;	
	// ничего не найдено
	Возврат(ПолучитьПустоеЗначение(спрТовар));
КонецФункции 




Функция ПоискПоШтрихкоду(пШтрихкод="")
	Если ПустоеЗначение(пШтрихкод)=1 Тогда
//		Предупреждение("Штрих кода нет в справочнике",0);
		Возврат(0);
	КонецЕсли;
	
	спрТовар=ПоискВСправочнике(пШтрихкод);	
	Если ПустоеЗначение(спрТовар)=0 Тогда

		текстЗаголовка=пШтрихкод+",| "+спрТовар.Наименование+", "+спрТовар.КодТовара; 
		Форма.тТовар.Заголовок(текстЗаголовка);
		Возврат(1);
	КонецЕсли;
	
	Предупреждение("Штрих кода нет в справочнике",3);
	Возврат(0);
	
КонецФункции
//======================================================================

Процедура кнИнвент()
	ТекущийСлой="слИнвентаризации";
	Форма.ИспользоватьСлой(ТекущийСлой,2);
//	ПередатьФокус = "тпДок_"; 
//	Форма.Закрыть(0);	
КонецПроцедуры // кнИнвент

Процедура кнСканирование()
	ТекущийСлой="слШтрихкод";
	Форма.ИспользоватьСлой(ТекущийСлой,2);
	
КонецПроцедуры // кнСканирование


//======================================================================
Процедура кнВводШтрихкода()
	Перем фПоиска;
	Форма.тТовар.Заголовок("Пусто");
	фПоиска=ПоискПоШтрихкоду(СокрЛП(пвШтрихкод));
	Если фПоиска=1 Тогда
		ТекущийСлой="слИнвентаризации";
		Форма.ИспользоватьСлой(ТекущийСлой,2);
	Иначе
//		ТекущийСлой=слТаблицы;
//		Форма.ИспользоватьСлой(ТекущийСлой,2);
////		Форма.кнМеню.Заголовок("Товар");
//		ПередатьФокус = "тпКнопка_"; 
//		Форма.Закрыть(0);
//		//кнМеню();
//	//	Форма.ИспользоватьСлой(ТекущийСлой,2);
//	//	ТП.ТекущаяСтрока=Таб_ТекущаяСтрока;
//	//	ТП_Обновить();		
	КонецЕсли;;
КонецПроцедуры // кнВводШтрихкода()

Процедура кнСбросШтрихкода()
	пвШтрихкод="";
	ПередатьФокус = "пвШтрихкод"; 
	Форма.Закрыть(0);
КонецПроцедуры
//======================================================================
Процедура кнМеню()
	ТекущийСлой="слОбложка";
	Форма.ИспользоватьСлой(ТекущийСлой,2);
КонецПроцедуры // кнМеню

//======================================================================
Процедура кнЗакрытьслШтрихкод()
	ТекущийСлой="слИнвентаризации";
	Форма.ИспользоватьСлой(ТекущийСлой,2);	
КонецПроцедуры // кнЗакрытьслШтрихкод

//}****Инвентаризация****


Процедура ВыводИнфо(док)
	Перем л_Состояние,л_Инфо;

	Если ПустоеЗначение(док)=1 Тогда
		л_Состояние="Состояние:";
		л_Инфо="Пусто";
		Форма.тСостояние.Заголовок(л_Состояние);
		Форма.тКлиент.Заголовок(л_Инфо);
		Возврат;
	КонецЕсли;

	л_НайденыПроведеные=0;
	л_НайденыНЕпроведеные=0;
	л_НайденКомплектовщик=0;
	Если док.Выбран()=1 Тогда
		ДокПодч=СоздатьОбъект("Документ");
		ДокПодч.ВыбратьПодчиненныеДокументы(док.ДатаДок,,док);
		Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
			Если (ДокПодч.Вид()="ИнвентаризМобил") И (ДокПодч.ПометкаУдаления()=0) Тогда
				Если ДокПодч.Проведен()=1 Тогда
					л_НайденыПроведеные=л_НайденыПроведеные+1;
				Иначе
					л_НайденыНЕпроведеные=л_НайденыНЕпроведеные+1;
				КонецЕсли;
				
				Если ДокПодч.Комплектовщик=ТекКомплектовщик Тогда
					л_НайденКомплектовщик=1;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;				
	КонецЕсли;

	Если (л_НайденыПроведеные<>0) или (л_НайденыНЕпроведеные<>0) Тогда
		л_Состояние="Состояние: В РАБОТЕ.";
	Иначе
		л_Состояние="Состояние: Не активно.";
	КонецЕсли;
	
	л_Инфо="Начато: "+л_НайденыНЕпроведеные+ "  Закончено: "+л_НайденыПроведеные;

	
	Форма.тКлиент.Заголовок(л_Инфо);
	Форма.тСостояние.Заголовок(л_Состояние);

КонецПроцедуры

Процедура НастроитьОкна2(Показать=1)
	Перем меню;
	Окна = СоздатьОбъект("Окна");
	Окна.ВидимостьМеню("Та&блица", 0);
	 Окна.ВидимостьМеню("&Действия", 0);	
	//Окна.ВключитьМодальныйРежим();
//	Окна.Максимизировать();
	
//	Если Показать<>1 Тогда
//		меню = Окна.ПолучитьМеню();
//	КонецЕсли;
   
    а="";
 //   меню.ВыбратьЗначение(а);
	стр="";	
//	Для Номер = 1 По Меню.РазмерСписка() Цикл
//		меню.ПолучитьЗначение(Номер, стр); //получить значение и представление
//		Окна.ВидимостьМеню(стр, Показать);
//	КонецЦикла;
//	Окна.ПоказыватьПанели(Показать);
//	Если Показать<>1 Тогда
	//	Окна.Минимизировать(Форма);
//		Окна.Максимизировать(Форма);
//	КонецЕсли;
	
КонецПроцедуры
Процедура НастроитьОкна(Показать=1)
	Перем меню;
	Окна = СоздатьОбъект("Окна");
	//Окна.ВключитьМодальныйРежим();
	Окна.Максимизировать();
	
	Если Показать<>1 Тогда
		меню = Окна.ПолучитьМеню();
	КонецЕсли;
   
    а="";
 //   меню.ВыбратьЗначение(а);
	стр="";	
	Для Номер = 1 По Меню.РазмерСписка() Цикл
		меню.ПолучитьЗначение(Номер, стр); //получить значение и представление
		Окна.ВидимостьМеню(стр, Показать);
	КонецЦикла;
	Окна.ПоказыватьПанели(Показать);
	Если Показать<>1 Тогда
	//	Окна.Минимизировать(Форма);
		Окна.Максимизировать(Форма);
	КонецЕсли;
	
КонецПроцедуры


//{***ТП2***

Процедура НастройкаТПДок()
	
	Колонка = тпДок.Колонки.Добавить("Док"); Колонка.Данные = "Док"; Колонка.Заголовок = "Документ"; 
	Колонка.ЗнакУпорядочивания = 1;
//	Колонка.Ширина=20;

//	Колонка = тпДок.Колонки.Добавить("ВидДоставки"); Колонка.Данные = "ВидДоставки"; Колонка.Заголовок = "ВидДоставки"; 
//	Колонка.ЗнакУпорядочивания = 1;
//	Колонка.Ширина=15;

	
//	Колонка = тпДок.Колонки.Добавить("ДатаП"); Колонка.Данные = "ДатаП"; Колонка.Заголовок = "Дата"; 
//	Колонка.ЗнакУпорядочивания = 1;
//	Колонка.Ширина=20;

//	Колонка = тпДок.Колонки.Добавить("Документ_ном"); Колонка.Данные = "Документ_ном"; Колонка.Заголовок = "ном"; 
//	Колонка.ЗнакУпорядочивания = 1;
//	Колонка.Ширина=20;
	

	
//	Колонка = тпДок.Колонки.Добавить("Документ_ном"); Колонка.Данные = "Документ_ном"; Колонка.Заголовок = "Документ"; 
//	Колонка.ЗнакУпорядочивания = 1;
//	Колонка.Ширина=20;	

//	тпДок.АвтоШирина();
	
	тпДок.ТаймаутОбновления  = 2;
	тпДок.РазрешитьПеретаскивание = 0; 
	тпДок.РазрешитьНачалоПеретаскивания= 0; 
	тпДок.РежимВыделенияСтроки = 1;
	тпДок.ИзменятьПозициюКолонок = 0;
	тпДок.РежимВыделенияСтроки = 0;



КонецПроцедуры
Процедура ЗаполнитьТПДок(Обновить=0)

	ТекущийДокПоставки=ПолучитьПустоеЗначение();
	Если Обновить=0 Тогда
		Источник = СоздатьОбъект("ПоставщикДанныхODBC.MSSQL"); 
		Источник.БазаДанных =  СоздатьОбъект("ODBCDataBase"); 
	КонецЕсли;
	
	Если Обновить=2 Тогда
		пСтатус1=3;
		пСтатус2=3;
	ИначеЕсли Обновить=3 Тогда	//только статус КомплектуетсяМоб
		пСтатус1=12;
		пСтатус2=12;		
	Иначе
		пСтатус1=1;
		пСтатус2=1; //12
	КонецЕсли;
	
	
//		л_Склад=СоздатьОбъект("Справочник.МестаХранения");
//		л_Склад.НайтиПоКоду(35,0);

	
//	пДок=СоздатьОбъект("ИндексированнаяТаблица");
//	Запрос=СоздатьОбъект("ODBCRecordSet");
	
	ТекстЗапроса="SELECT СостояниеДокументаОстатки.Док AS [Док $Документ]
		|	, СостояниеДокументаОстатки.СостояниеДок AS [СостояниеДок $Справочник.СостоянияДокументов]
		|	, NullIf($СличительнаяВедомость.Дата_Курса, '17530101') AS Дата_Курса
		|	, СличительнаяВедомость.IDDOC AS [Ссылка $Документ.СличительнаяВедомость]
		|FROM $РегистрОстатки.СостояниеДокумента(,,
		|		(СостояниеДок = ?пСостояние(14,9))
		|		AND (СостояниеДок = ?пСостояние(14,9)),
		|		(Док, СостояниеДок),) AS СостояниеДокументаОстатки
		|	LEFT OUTER JOIN $Документ.СличительнаяВедомость AS СличительнаяВедомость ON СостояниеДокументаОстатки.Док = $ВидДокумента36.СличительнаяВедомость + СличительнаяВедомость.IDDOC
//		|WHERE ($СличительнаяВедомость.Дата_Курса = ?пДатаДок(8))
//		|AND ($СличительнаяВедомость.Склад = ?пСклад(14,9))
		|	LEFT OUTER JOIN $Справочник.МестаХранения AS МестаХранения ON $СличительнаяВедомость.Склад = МестаХранения.ID
		|WHERE ($СличительнаяВедомость.Дата_Курса = ?пДатаДок(8))
		|	AND ($СличительнаяВедомость.Склад = МестаХранения.ID)
		|	AND ($МестаХранения.МестоКомплектации = ?Компл(14,9))
		|";	

	Источник.УстТекстЗапроса(ТекстЗапроса);
	сост=ПолучитьСостояниеДок("Общая","СличительнаяВедомость");
	Источник.Параметры.Установить("пДатаДок",рДатаПрихода);
//	Источник.Параметры.Установить("пСтатус2",пСтатус2);	
	Источник.Параметры.Установить("Компл",МестоКомпл);
	Источник.Параметры.Установить("пСостояние",сост);
//	Источник.Параметры.Установить("пДатаПоставки",рДатаПрихода);
//	Источник.Параметры.Установить("ВыбКомплектовщик",ТекКомплектовщик);	
	Источник.УстКлючПорядка("Дата_Курса ASC,Док"); 
	Источник.УстИДПоле("Док");	

//	Источник.Параметры.Установить("ДатаНач",рДатаНач);
//	Источник.Параметры.Установить("ДатаКон",рДатаКон);


	
//	Поле = Источник.Поля.Добавить("МаршрутНаправление");
//	Поле.Автоудаление = 0;
//	Поле.ТипБыстрогоПоиска = 1;
	
//	Поле = Источник.Поля.Добавить("Ссылка");
//	Поле.Автоудаление = 0;
//	Поле.ТипБыстрогоПоиска = 1;
	
	Поле = Источник.Поля.Добавить("Док");
 	Поле.Автоудаление = 0;
	Поле.ТипБыстрогоПоиска = 1;	
	
//	Поле = Источник.Поля.Добавить("ВидДоставки");
 //	Поле.Автоудаление = 0;
//	Поле.ТипБыстрогоПоиска = 1;

//	Поле = Источник.Поля.Добавить("СостояниеДок");
 //	Поле.Автоудаление = 0;
//	Поле.ТипБыстрогоПоиска = 1;
	

//	тпДок.ФиксацияСлева  = 1;
	
	тпДок.ПоставщикДанных = Источник; 
	тпДок.ПоставщикДанных.Обновить(); 
	тпДок.ОбновитьСтроки();



	
	
КонецПроцедуры
Процедура ЗаполнитьТПДок1(Обновить=0)

	ТекущийДокПоставки=ПолучитьПустоеЗначение();
	Если Обновить=0 Тогда
		Источник = СоздатьОбъект("ПоставщикДанныхODBC.MSSQL"); 
		Источник.БазаДанных =  СоздатьОбъект("ODBCDataBase"); 
	КонецЕсли;
	
	Если Обновить=2 Тогда
		пСтатус1=3;
		пСтатус2=3;
	ИначеЕсли Обновить=3 Тогда	//только статус КомплектуетсяМоб
		пСтатус1=12;
		пСтатус2=12;		
	Иначе
		пСтатус1=1;
		пСтатус2=1; //12
	КонецЕсли;
	
	
//		л_Склад=СоздатьОбъект("Справочник.МестаХранения");
//		л_Склад.НайтиПоКоду(35,0);

	
//	пДок=СоздатьОбъект("ИндексированнаяТаблица");
//	Запрос=СоздатьОбъект("ODBCRecordSet");
	
	ТекстЗапроса="SELECT КомплектацияЗаявокОстатки.ПоСчету AS [Ссылка $Документ.Счет]
		|	, КомплектацияЗаявокОстатки.Статус AS Статус
		|	, $Счет.Маршрут AS Маршрут
	//	|	, $Счет.МаршрутНаправление AS [МаршрутНаправление $Справочник.МаршрутыНаправления]
		|	, RTRIM(СпрМН.CODE) + ' ' + RTRIM(СпрМН.DESCR) as МаршрутНаправление
		|	, $Счет.Склад AS [СчетСклад $Справочник.МестаХранения]
		|	, Журнал.DOCNO AS Документ_ном
		|	, $Счет.ВидДоставки AS [ВидДоставки $Перечисление.ВидыДоставки]
		|FROM $РегистрОстатки.КомплектацияЗаявок(,,
		|		((Статус = ?пСтатус1(14,9))
		|		OR (Статус = ?пСтатус2(14,9)))
		|		AND (ДатаПоставки = ?пДатаПоставки(8))
		|		AND (МестоКомплектации = ?пСклад(14,9)),
		|		(ПоСчету, Статус),) AS КомплектацияЗаявокОстатки
	//	|	LEFT OUTER JOIN $Документ.Счет AS Счет ON КомплектацияЗаявокОстатки.ПоСчету = Счет.IDDOC
 		|	INNER JOIN $Документ.Счет AS Счет ON (КомплектацияЗаявокОстатки.ПоСчету = Счет.IDDOC) AND (($Счет.Комплектовщик = ?ВыбКомплектовщик(14,9)) OR ($Счет.Комплектовщик = $ПустойИд))		
		|	LEFT OUTER JOIN _1SJOURN AS Журнал ON Счет.IDDOC = Журнал.IDDOC
		|	LEFT JOIN $Справочник.МаршрутыНаправления СпрМН (NOLOCK) ON СпрМН.ID = $Счет.МаршрутНаправление
		|";	

	Источник.УстТекстЗапроса(ТекстЗапроса);
	сост=ПолучитьСостояниеДок("Ожидает компл.","Заявки");
	Источник.Параметры.Установить("пСтатус1",пСтатус1);
	Источник.Параметры.Установить("пСтатус2",пСтатус2);	
//	Источник.Параметры.Установить("пСклад",Константа.ОсновнойСклад);
	Источник.Параметры.Установить("пСклад",МестоКомпл);
	Источник.Параметры.Установить("пДатаПоставки",рДатаПрихода);
	Источник.Параметры.Установить("ВыбКомплектовщик",ТекКомплектовщик);	
	Источник.УстКлючПорядка("МаршрутНаправление ASC,Ссылка"); 
	Источник.УстИДПоле("Ссылка");	

//	Источник.Параметры.Установить("ДатаНач",рДатаНач);
//	Источник.Параметры.Установить("ДатаКон",рДатаКон);


	
	Поле = Источник.Поля.Добавить("МаршрутНаправление");
 	Поле.Автоудаление = 0;
	Поле.ТипБыстрогоПоиска = 1;
	
//	Поле = Источник.Поля.Добавить("Ссылка");
//	Поле.Автоудаление = 0;
//	Поле.ТипБыстрогоПоиска = 1;
	
	Поле = Источник.Поля.Добавить("Документ_ном");
 	Поле.Автоудаление = 0;
	Поле.ТипБыстрогоПоиска = 1;	
	
	Поле = Источник.Поля.Добавить("ВидДоставки");
 	Поле.Автоудаление = 0;
	Поле.ТипБыстрогоПоиска = 1;

//	Поле = Источник.Поля.Добавить("СостояниеДок");
 //	Поле.Автоудаление = 0;
//	Поле.ТипБыстрогоПоиска = 1;
	

//	тпДок.ФиксацияСлева  = 1;
	
	тпДок.ПоставщикДанных = Источник; 
	тпДок.ПоставщикДанных.Обновить(); 
	тпДок.ОбновитьСтроки();



	
	
КонецПроцедуры

//Функция ИТТПДок(Обновить=0)
//
//	л_ИТ = СоздатьОбъект("ИндексированнаяТаблица"); 
////	л_Запрос =  СоздатьОбъект("ODBCDataBase"); 
//	л_Запрос =  СоздатьОбъект("ODBCRecordSet"); 
//
//	Если Обновить=2 Тогда //Только Статус ОжОтгрузки
//		пСтатус1=3;
//		пСтатус2=3;
//	ИначеЕсли Обновить=3 Тогда	//только статус КомплектуетсяМоб
//		пСтатус1=12;
//		пСтатус2=12;		
//	Иначе
//		пСтатус1=1;
//		пСтатус2=12;
//	КонецЕсли;
//	
//	
//	//	л_Склад=СоздатьОбъект("Справочник.МестаХранения");
//	//	л_Склад.НайтиПоРеквизиту("МестоКомплектации");
//
//	
//	//пДок=СоздатьОбъект("ИндексированнаяТаблица");
//	//Запрос=СоздатьОбъект("ODBCRecordSet");
//	
//	ТекстЗапроса="SELECT КомплектацияЗаявокОстатки.ПоСчету  [Ссылка $Документ.Счет]
//		|	, КомплектацияЗаявокОстатки.Статус  Статус
//		|	, $Счет.Маршрут  Маршрут
//	//	|	, $Счет.МаршрутНаправление AS [МаршрутНаправление $Справочник.МаршрутыНаправления]
//		|	, RTRIM(СпрМН.CODE) + ' ' + RTRIM(СпрМН.DESCR)  МаршрутНаправление
//		|	, $Счет.Склад  [СчетСклад $Справочник.МестаХранения]
//		|	, Журнал.DOCNO  Документ_ном
//		|	, $Счет.ВидДоставки  [ВидДоставки $Перечисление.ВидыДоставки]
//		|FROM $РегистрОстатки.КомплектацияЗаявок(,,
//		|		((Статус = :пСтатус1)
//		|		OR (Статус = :пСтатус2))
//		|		AND (ДатаПоставки = :пДатаПоставки)
//		|		AND (МестоКомплектации = :пСклад),
//		|		(ПоСчету, Статус),)  КомплектацияЗаявокОстатки
//	//	|	LEFT OUTER JOIN $Документ.Счет AS Счет ON КомплектацияЗаявокОстатки.ПоСчету = Счет.IDDOC
// 		|	INNER JOIN $Документ.Счет  Счет ON (КомплектацияЗаявокОстатки.ПоСчету = Счет.IDDOC) AND (($Счет.Комплектовщик = :ВыбКомплектовщик) OR ($Счет.Комплектовщик = $ПустойИд))		
//		|	LEFT OUTER JOIN _1SJOURN  Журнал ON Счет.IDDOC = Журнал.IDDOC
//		|	LEFT JOIN $Справочник.МаршрутыНаправления СпрМН (NOLOCK) ON СпрМН.ID = $Счет.МаршрутНаправление
//		|";	
//
////	л_Запрос.УстТекстЗапроса(ТекстЗапроса);
//	сост=ПолучитьСостояниеДок("Ожидает компл.","Заявки");
//	л_Запрос.УстановитьТекстовыйПараметр("пСтатус1",пСтатус1);
//	л_Запрос.УстановитьТекстовыйПараметр("пСтатус2",пСтатус2);	
//	л_Запрос.УстановитьТекстовыйПараметр("пСклад",МестоКомпл);
//	л_Запрос.УстановитьТекстовыйПараметр("пДатаПоставки",рДатаПрихода);
//	л_Запрос.УстановитьТекстовыйПараметр("ВыбКомплектовщик",ТекКомплектовщик);	
//	л_Запрос.ВыполнитьИнструкцию(ТекстЗапроса,л_ИТ);
////	л_ИТ.УстКлючПорядка("МаршрутНаправление ASC,Ссылка"); 
////	л_ИТ.УстИДПоле("Ссылка");	
//
//	Возврат л_ИТ; 
//КонецФункции


//======================================================================
Процедура тпДок_ПриВыводеСтроки(тп, ОформлениеСтроки, ДанныеСтроки, ТипРегиона)

КонецПроцедуры // тпДок_ПриВыводеСтроки

Процедура тпДок_ПриВыводеСтроки1(тп, ОформлениеСтроки, ДанныеСтроки, ТипРегиона)

	Если ТП.Колонки.Количество()>1 Тогда
		Если ТП.Колонки.ВидДоставки.Видимость = 1 Тогда
			Если ДанныеСтроки.Индекс("ВидДоставки")<>-1 Тогда
				л_текстЯч="";
				Если ДанныеСтроки.ВидДоставки=Перечисление.ВидыДоставки.Самовывоз Тогда
					л_текстЯч="СВ";
				ИначеЕсли ДанныеСтроки.ВидДоставки=Перечисление.ВидыДоставки.Агент Тогда
					л_текстЯч="АГ";	
				ИначеЕсли ДанныеСтроки.ВидДоставки=Перечисление.ВидыДоставки.Доставка Тогда
					л_текстЯч="ДС";	
				ИначеЕсли ДанныеСтроки.ВидДоставки=Перечисление.ВидыДоставки.Поставщик Тогда
					л_текстЯч="ПС";	
				КонецЕсли;
				ОформлениеСтроки.Ячейки.ВидДоставки.УстановитьТекст(л_текстЯч);
			КонецЕсли;
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры // тпДок_ПриВыводеСтроки
Процедура тпДок_Выбор(_ТП, _Кол, ТипРегиона)
	ТекущийДокПоставки=_Кол;	
//	ВыводКлиента(ТекущийДокПоставки);
	
	ПередатьФокус = "кнВыбратьДок"; 
	Форма.Закрыть(0);

КонецПроцедуры
Процедура тпДок_ПриАктивизацииСтроки(тп)
//	ТекущийДокПоставки=ТП.Клиент;	
//	ВыводКлиента(ТекущийДокПоставки);
//ТекущийДокПоставки = ТП.ДанныеСтроки.Получить("Ссылка");
//ВыводКлиента(ТекущийДокПоставки);
	ТекущийДокПоставки=ТП.ТекущиеДанные.Получить("Док");
	ВыводИнфо(ТекущийДокПоставки);
//	ВыводКлиента(ТекущийДокПоставки);
КонецПроцедуры
//}***ТП2***

Процедура ПриОткрытии()
		
	Если ПустоеЗначение(Форма.Параметр)=0 Тогда
		ТекКомплектовщик=Форма.Параметр;
	КонецЕсли;
	
	Если ПустоеЗначение(ТекКомплектовщик)=1 Тогда
		спр=СоздатьОбъект("Справочник.Комплектовщики");
		спр.НайтиПоКоду("006");
		ТекКомплектовщик=спр.ТекущийЭлемент();
	КонецЕсли;
	
	Если ПустоеЗначение(РозничныйТорговыйСклад)=1 Тогда
		РозничныйТорговыйСклад=Константа.ОсновнойСклад;	
	КонецЕсли;		
	МестоКомпл=РозничныйТорговыйСклад.МестоКомплектации;
	
	ТекущийСлой="слПриемТовара";
	Форма.ИспользоватьСлой(ТекущийСлой,2);
	
//	Предупреждение(ТекКомплектовщик);	
КонецПроцедуры
Процедура ПослеОткрытия()

//	УправлениеФормой = СоздатьОбъект("УправлениеФормой");
//	Привязки = УправлениеФормой.ПривязкаЭлементов;
//	Привязки.УстановитьГраницыПоФорме("тпДок_",1,1,1,1);
//	Привязки.Привязать();
	Если Пользователь="Sklad" Тогда
		фПользователь=1;
	КонецЕсли;

	Если фПользователь=1 Тогда
		НастроитьОкна(фПользователь);// 1 для мобильного режима
	КонецЕсли;

	Ф=СоздатьОбъект("Форма");
	Ф.УстановитьФорму(Форма);
	тпДок=Ф.СоздатьЭлементУправления("ТабличноеПоле","тпДок_");
	
	ЗаполнитьТПДок();
	НастройкаТПДок();
	
	Если фПользователь=1 Тогда
		НастроитьОкна(фПользователь);// 1 для мобильного режима
	КонецЕсли;
	
	ПередатьФокус = "кнПрием"; 
	Форма.Закрыть(0);
	
	гСервис = СоздатьОбъект("Сервис");
	гСервис.ПерехватКлавиатуры(1);
КонецПроцедуры	

Процедура ПриЗакрытии()
	//{ЛожноеЗакрытие Установить Фокус
	Если ПустоеЗначение(ПередатьФокус) = 0 тогда 
		Активизировать(ПередатьФокус); 
		СтатусВозврата(0); 
		ПередатьФокус = ""; 
		Возврат; 
	КонецЕсли; 
	//}ЛожноеЗакрытие Установить Фокус
	
//	Сервис = СоздатьОбъект("Сервис");
//	Сервис.УдалитьШрифт(МойШрифт);	
	
//	НастроитьОкна(1);
//	Записать();

//	л_ИТ=ИТТПДок(3);
//	л_колСтрок=л_ИТ.КоличествоСтрок();
	///Если л_колСтрок>0 Тогда
//		Если Вопрос("Есть не закрытые заявки. Закрыть программу ?",1,0)=2 Тогда
//			Возврат;
//		КонецЕсли;	
//	КонецЕсли;
	Форма.Закрыть(0);
	
	
	
КонецПроцедуры

Процедура кнБольше()
	рДатаПрихода=рДатаПрихода+1;
	ВыводИнфо(ТекущийДокПоставки);
	ЗаполнитьТПДок(тригерФильтр);
	Форма.Обновить();
КонецПроцедуры

Процедура кнМеньше()
	рДатаПрихода=рДатаПрихода-1;
	ВыводИнфо(ТекущийДокПоставки);	
	ЗаполнитьТПДок(тригерФильтр);
	Форма.Обновить();
КонецПроцедуры

//======================================================================

Процедура ПриНажатииКнопкиКлавиатуры(КодКлавиши, Alt, Shift, Ctrl, Символ, ФСО)
	//ФСО = 0;
	Если КодКлавиши = 120 Тогда
		//Если ТекущийСлой=слТовара Тогда
		//	кнНазад();
		//КонецЕсли;
		кнМеньше();
		Форма.Обновить();
	КонецЕсли;
	
	Если КодКлавиши =119 Тогда
		//Если ТекущийСлой=слТовара Тогда
		//	кнВперед();
		//КонецЕсли;	
		кнБольше();
		Форма.Обновить();
	КонецЕсли;


	
//	Форма.тИнфо.Заголовок(КодКлавиши);
//	Форма.Обновить();
КонецПроцедуры

рДатаПрихода=ТекущаяДата();
тригерФильтр=1;