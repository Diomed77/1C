//Не обрабатывать Инсталлятором МОД
Перем ВыбрБаза;
Перем ХМЛ;

Перем ВремФайлЗаголовка;

//просто глобальные переменные
Перем Пакет;//обрабатываемый пакет с данными
Перем ЗагружаемыйИДД;
Перем СписокЖР;

Перем ЦиклДокумента;
Перем РабочДата;


Перем МассивТипов1С[100];

//переменные, которые надо обнулять при каждом запуске загрузки !!!


//переменные, которые надо обнулять при каждом запуске выгрузки !!!

//Перед выгрузкой должны быть заранее подготовлены списки:
Перем СписокПовторов,СписокПеречислений,СписСинонимов;


//А перед загрузкой следующие списки:
Перем УникальныйИДД;

Перем ИДДБазы;





//ПЕрем ПроведениеПоАлгоритмуМОД,НеРегистрироватьИзмененияМОД; 
Перем ТипСозданияТаблицы,ИмяПервогоУровня;//служебные перемнные для заполнения таблиц работы МОД при работе в упрощенном режиме
Перем ВерсияМОД,МОДИнфо,ИДДляОтладки;
Перем НомерПодтвержденногоПакетаЗагрузки,МаксНомерПакетаВыгрузки,НомерПодтвержденногоПакета;
Перем НомерПакетаВыгрузки;
Перем ДаДа,НетНет;
Перем Конт;
Перем ДублирIDD;

Перем ГлобДок;//глобальный объект типа документ нужен для поиска
Перем ГлобДокЗагрВыгрузки;//а это для загрузки документов
Перем МаксУровень;//максимально допустимый уровень вложенности данных
Перем СписокПодчиненных;
Перем КолТаблицЗначений;
Перем СписокЗагрузки;
Перем МожноЗакрывать;//Можно закрывать файлы dbf - для доступа другим программа
//(закрытие происходит автоматически при обновлении формы)

Перем ИмяТекстовогоФайла,ПерваяИнициализация;

Перем ФлИдентифID;//идентификация объекта сначала по IDD
Перем МаксДатаВыгрДокумента;
Перем ДокументОперации;//название вида документа у операции

Перем ПришлоТолькоПодтверждение;

Перем МаксКолОбъектовВПакете;//ограничение на размер пакета !!!
Перем НоваяВерсияШапки;//флаг показывает , что версия шапки пакета изменилась

Перем МОДДлинаIDДокумента;
Перем МОДДлинаID;

Перем СписокОбъектовЗамены;//для сопоставления перечислений в разных базах !!
Перем СопоставлятьПеречисления;//если 1, то ф функции получить объект будут споставляться
//перечисления, если 0 , то нет - это нужно только когда загружаем шаблон и правила загрузки не используются
//строковое значение представления
Перем РежимНастройки,РасширенныйРежим;
Перем СписокПроводимыхДокументов;//документы которые перепроводятся при загрузке заново мы будем проводить без транзакции !!
Перем ПутьКБазеПриВыгрузке,ПутьКБазеПриЗагрузке;
Перем ИспользоватьФТП,ВстроеннаяАрхивация,ПередачаПоПочте,ИмяМОД;
Перем ЗагрузкаИнфо,ВыгрузкаИнфо,ОбщиеИнфо;//Переменные для статуса состояния работы обмена
Перем глВыражение;//переменная, которой функция Получить() присваивает переданной ей значение (этот механизм используется при интерпретации выражений)
Перем НоваяШапкаПакетов;//константа равная строке "Новая шапка пакетов"
Перем СписокВыборочнойВыгрузки;//список значений с объектами для выгрузки (режим выгрузки должен быть равен 4)
Перем ОбработкаПримера;//флаг, сигнализирующий что выгружается или загружается пример
Перем СписокИзмененияИД;//список объектов ИД, которых надо изменить после загрузки



//Перем ОткрытьДругуюФорму;

ПЕрем ЗагружатьВсе;


Перем СостояниеПрогрессора,ИнфоПрогрессора,НомерПрогрессора,МаксНомерПрогрессора,ТекПрогрессора,ТекстДляПрогрессора,НачНомерПрогрессора,ДатаНачПрогрессора,ВремяНачПрогрессора ;




Перем ОбъектПериодический;//заранее создаем этот объект

//OLE OLE OLE OLE OLE OLE OLE OLE OLE OLE OLE OLE OLE OLE OLE OLE OLE OLE OLE OLE OLE OLE 
Перем ТЛист;
Перем ГлобСписокВторогоЦикла;//Содержит ИДД объектов из загружаемого пакета для их повторной загрузки
//OLE OLE OLE OLE OLE OLE OLE OLE OLE OLE OLE OLE OLE OLE OLE OLE OLE OLE OLE OLE OLE OLE 
Перем СписокИзмененныхОбъектов,ПриоритетЗагрузки;
Перем ИмяФайлаШапки;
Перем ИмяОлеКомпонентыМОД;





Функция Подтверждение(ВыгрБаза="",Знач Номер="",Интерактивно=0) Далее

Функция ПолучитьУникальныйIDD() Далее



Процедура МиграцияИзменений(ВыгрБаза,ИД,Тип,Вид,Дата1,Дата2) Далее
Функция ПолучитьВладельцаПравил(КакаяТоБаза) Далее
Функция ПолучитьПредставлениеОбъекта(Объект) Далее
Функция НадоЗагружатьОбъект(Спр_ИД) Далее



//_____________________________________________________________________________
//Вывод на экран обычных сообщений - при условии что проставлен флаг ВыводитьСообщения
Функция М_Сообщить(ЧтоТо,КакТо="",Реж="")
	Если Реж="" Тогда
		Реж=ВыводитьСообщения;
	КонецЕсли;
	Если Реж=1 Тогда
		Сообщить(ЧтоТо,КакТо);
	КонецЕсли;
КонецФункции //My_Сообщить



//***************************************************************************************************************
//Перем ИнфоПрогрессора,НомерПрогрессора,МаксНомерПрогрессора,ТекПрогрессора,ТекстДляПрогрессора,НачНомерПрогрессора;
Процедура Прогрессор(Знач Номер=0,Знач МаксНомер=10,Знач НачНомер=0,Текст="")
	Перем Точность;
	Точность=1;
	Если Номер=0 Тогда //инициализация
		ТекПрогрессора="";
		МаксНомерПрогрессора=МаксНомер-НачНомер;
		Если МаксНомерПрогрессора=0 Тогда
			МаксНомерПрогрессора=1;
		КонецЕсли;
		НомерПрогрессора=0;
		ТекстДляПрогрессора=Текст+" ";
		НачНомерПрогрессора=НачНомер;
		ИнфоПрогрессора=Текст;
		Состояние(ТекПрогрессора+" "+ИнфоПрогрессора);
		Возврат;
	КонецЕсли;
	Номер=Номер-НачНомерПрогрессора;
	Если Цел(100*Номер/МаксНомерПрогрессора)=Цел(100*НомерПрогрессора/МаксНомерПрогрессора) Тогда
			Возврат;//не изменилось !!
	КонецЕсли;
	НомерПрогрессора=Номер;
	ИнфоПрогрессора=ТекстДляПрогрессора;
	Пока СтрДлина(ТекПрогрессора)<10*Номер/МаксНомерПрогрессора Цикл
		ТекПрогрессора=ТекПрогрессора+"|||";
	КонецЦикла;
	СостояниеПрогрессора=ТекПрогрессора+"("+Цел(100*Номер/МаксНомерПрогрессора)+"%) "+ИнфоПрогрессора;
	Состояние(СостояниеПрогрессора);
КонецПроцедуры //Прогрессор
//***************************************************************************************************************
//***************************************************************************************************************



//_____________________________________________________________________________
Процедура ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,Знач Реквизит,Знач ТипРеквизита,Знач Уровень=0) Далее
Функция ДобавлениеОбъектаВПакет(Док,ВыгрБаза=0,НомерВыгрПакета=0)
	Перем БДПакет;
	Если ОткрытьФайлМОДПоИмени(БДПакет,"Пакеты","_tran2")=0 Тогда //это открывается временный файл !!!
		Возврат 0;
	КонецЕсли;
	Если ВыгрБаза=0 Тогда
		ВыгрБаза=База;
	КонецЕсли;
	Если НомерВыгрПакета=0 Тогда
		НомерВыгрПакета=НомерПакетаВыгрузки;
	КонецЕсли;
	НомерПакетаИБазы=Прав("0000000"+Сокрп(ВыгрБаза.IDD),7)+Сокрлп(НомерВыгрПакета);
	
	//Рез=ДобавитьВПакетОбъектСПроверкой(БДПакет,НомерПакетаИБазы,Док,12);
	МаксУровень=4;
	НомерЗаписи=БДПакет.НомерЗаписи();
	БДПакет.ТекущийИндекс("IDD");
	Док.IDD="0"+Док.IDD;
	ДобавитьВПакетСВложеннымиДанными(БДПакет,НомерПакетаИБазы,Док,12);
	БДПакет.ТекущийИндекс("IDDDB");
	БДПакет.Перейти(НомерЗаписи);
	Возврат 1;
КонецФункции //ПриВыгрузкеДокумента











//_____________________________________________________________________________
Процедура М_Состояние(ЧтоТо)
	Состояние(ЧтоТо);
//	Состояние(""+ТекПрогрессора+" "+ИнфоПрогрессора+" "+ЧтоТо);
КонецПроцедуры //М_Состояние


//_____________________________________________________________________________
Процедура ДобавитьАктивХ(ВыгрБаза,Вид,АктивХ)
	Если Вид="ПравилаВыгрузки" Тогда
		СписокАктивХ=глВыгрБазаМОДВыгр;
	Иначе
		СписокАктивХ=глВыгрБазаМОДЗагр;
	КонецЕсли;
	Если ТипЗначенияСтр(СписокАктивХ)<>"СписокЗначений" Тогда
		СписокАктивХ=СоздатьОбъект("СписокЗначений"); 
	КонецЕсли;
	
	УникальныйНомер=ЗначениеВСтрокуВнутр(ВыгрБаза)+Вид;
	СписокАктивХ.ДобавитьЗначение(АктивХ,УникальныйНомер);
	
	Если Вид="ПравилаВыгрузки" Тогда
		глВыгрБазаМОДВыгр=СписокАктивХ;
	Иначе
		глВыгрБазаМОДЗагр=СписокАктивХ;
	КонецЕсли;
КонецПроцедуры //ДобавитьАктивХ

//_____________________________________________________________________________
Функция ПолучитьАктивХ(ВыгрБаза,Вид,АктивХ)
	Если Вид="ПравилаВыгрузки" Тогда
		СписокАктивХ=глВыгрБазаМОДВыгр;
	Иначе
		СписокАктивХ=глВыгрБазаМОДЗагр;
	КонецЕсли;
	Если ТипЗначенияСтр(СписокАктивХ)="СписокЗначений" Тогда
		УникальныйНомер=ЗначениеВСтрокуВнутр(ВыгрБаза)+Вид;
		АктивХ=СписокАктивХ.Получить(УникальныйНомер);
		Если Сокрлп(ТипЗначенияСтр(АктивХ))="OLE.ITList" Тогда
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	АктивХ=СоздатьОбъект(ИмяОлеКомпонентыМОД);
	Возврат 0;
КонецФункции //ПолучитьАктивХ

//******************************XML  вставка******************************
//******************************XML  вставка******************************
//******************************XML  вставка******************************
//глВыгрБазаМОДЗагр
Процедура ПередачаПравилВОЛЕ(ВыгрБаза,Вид)
	Состояние("Передача справочника "+Вид+" в OLE объект");
	Если ВыгрБаза.Выбран()=1 Тогда
		Если ПолучитьАктивХ(ВыгрБаза,Вид,ТЛист)=1 Тогда
			Возврат;
		КонецЕсли;
		НачатьТранзакцию();
		Спр=СоздатьОбъект("Справочник."+Вид);
		Спр.ИспользоватьВладельца(ВыгрБаза);
		Спр.ПорядокКодов();
		Спр.ВыбратьЭлементы();
		ПредУровень=0;
		ВыборкаЭлементов=0;
		ЗаходитьВнутрь=1;
		ПапкаРегистров=0;//для регистров нам не нужно создавть отдельные папки для ресурсов, измерений и реквизитов
		Пока Спр.ПолучитьЭлемент(ЗаходитьВнутрь)=1 Цикл
			Если Вид="ПравилаВыгрузки" Тогда
				Если Спр.ПризнакВыгрузки<>"Х" Тогда
					ЗаходитьВнутрь=0;
					Продолжить;
				КонецЕсли;
			Иначе
				Если Спр.ПризнакЗагрузки<>"Х" Тогда
					ЗаходитьВнутрь=0;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ЗаходитьВнутрь=1;
			Уровень=Спр.Уровень();
			            
			Имя=Спр.Наименование;
			Если Уровень=1 Тогда
				Если Имя="Регистры" Тогда
					ПапкаРегистров=1;
				Иначе
					ПапкаРегистров=0;
				КонецЕсли;
				
			ИначеЕсли ПапкаРегистров=1 Тогда
				Если Уровень=3 Тогда
					Продолжить;
			    ИначеЕсли Уровень=4 Тогда
			        Уровень=3;
				КонецЕсли;
			КонецЕсли;
			
			
			Если (ВыборкаЭлементов=1)И(Уровень=ПредУровень) Тогда
				ТЛист.CancelAddChilds();
			КонецЕсли;
			Пока Уровень<ПредУровень Цикл
				ПредУровень=ПредУровень-1;
				ТЛист.Parent();
			КонецЦикла;
			ПредУровень=Уровень;
			
			
			
			ТЛист.Add(Имя);
			ТЛист.Synonym=Спр.Синоним;
			Если Спр.ВклУсловие="Х" Тогда
				ТЛист.OnCondition=Спр.ВклУсловие;
				ТЛист.Condition=ПолучитьПредставлениеОбъекта(Спр.Условие);
			КонецЕсли;
			
			Значение=Спр.Значение;
			Тип=ТипЗначения(Значение);
			ТЛист.TypeValue=Тип;
			Если (Тип>9)И(Тип<13) Тогда
			ТЛист.VidValue=Значение.Вид();
			КонецЕсли;
			
			Если Спр.ВклЗначение="Х" Тогда
				ТЛист.OnValue=Спр.ВклЗначение;
				ТЛист.Value=ПолучитьПредставлениеОбъекта(Значение);
			КонецЕсли;      
			ТЛист.History=Спр.История;
			ТЛист.Motion=Спр.Движения;
			
			Если Уровень=1 Тогда
				Если (Имя="Документы")
				ИЛИ(Имя="Планы счетов")	Тогда           
					ТЛист.MaxLevel=4;	
				ИначеЕсли (Имя="Константы")
				ИЛИ(Имя="Виды расчетов")
				ИЛИ(Имя="Календари")Тогда
					ТЛист.MaxLevel=2;	
					ТЛист.History="Х";
				Иначе
					ТЛист.MaxLevel=3;	
					Если (Имя="Справочники") 
					ИЛИ (Имя="Журналы расчетов") Тогда
						ТЛист.History="Х";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Вид="ПравилаЗагрузки" Тогда
				ТЛист.Synchronize=Спр.Синхронизация;
			КонецЕсли;
			
			Если Спр.ЭтоГруппа()=1 Тогда
				ТЛист.AddChilds();
				ВыборкаЭлементов=1;
			Иначе
				ВыборкаЭлементов=0;
			КонецЕсли;
		КонецЦикла;
		ОтменитьТранзакцию();
		ДобавитьАктивХ(ВыгрБаза,Вид,ТЛист);
	КонецЕсли;
КонецПроцедуры 

//_____________________________________________________________________________
//создать новый номер для загружаемого документа
Функция СоздатьНовыйНомер(ВидДокумента,ДатаДок,СамДокумент=0,Знач СтарыйНомер="");//,СтНомер,ТипНомера,ДлинаНомера)
	Об1=СоздатьОбъект("Документ."+ВидДокумента);	// Это чтоб номер подгонять
	Об2=СоздатьОбъект("Документ");					// А это чтоб искать среди всех с заданным нумератором (см. ниже)          //***** вставка от Алексея Городецкого  :)
	
	//*************** подгонка под нужный тип номера документа - т.к. в разных базах они могут быть разными т.е. числом и строкой
	глСоздатьНовыйОбъект(Об1);
	Об1.НомерДок=СтарыйНомер;
	Номер=Об1.НомерДок;
	//***************
	Номер=?(Сокрлп(Номер)="",1,Номер);
	Если Сокрлп(ДатаДок)="" Тогда
		ДатаДок=РабочДата;
	КонецЕсли;
	
	Нумератор=Метаданные.Документ(ВидДокумента).Нумератор; // Получим нумератор
	Если Нумератор.Выбран()=1 Тогда
	    ИдентНумератора=Нумератор.Идентификатор;
	Иначе
		ИдентНумератора=ВидДокумента;
	КонецЕсли;
	
	Пока Об2.НайтиПоНомеру(Номер,ДатаДок,ИдентНумератора)=1 Цикл
		Если Об2.ТекущийДокумент()=СамДокумент Тогда
			Возврат Номер;
		КонецЕсли;
		Номер=Число(Номер)+1;
	КонецЦикла;
	Возврат Номер;
КонецФункции

//_____________________________________________________________________________
//создать новый код для загружаемого элемента справочника и проверка корректности кода 
//если Справ задан , то сверяем найденный со значением Спр (т.е. на равенство с самим собой)
Функция СоздатьНовыйКод(ВидСправочника,Спр,Подчиненность,Мета)
	Перем Спр1,Спр2;
	СтКод=Спр.Код;
	Спр1=СоздатьОбъект("Справочник."+ВидСправочника);
	                   
	СерииКодов=?(Мета.СерииКодов="ВПределахПодчинения",1,0);
	
	ТипКода=Мета.ТипКода;
	Если ТипКода="Числовой" Тогда
	  //подгонка под нужный тип кода т.к. в разных базах они могут быть разными т.е. числом и строкой
	  СтКод=Число(СтКод);
		Иначе
	  СтКод=Сокрлп(СтКод);
	  СтКод=?(СтКод="","0",СтКод);
	КонецЕсли;


	Если Подчиненность=1 Тогда
	    Спр1.ИспользоватьВладельца(Спр.Владелец);
	КонецЕсли;
	
	Если СерииКодов=1 Тогда
		Спр1.ИспользоватьРодителя(Спр.Родитель);
	КонецЕсли;
	
	Если Спр1.НайтиПоКоду(СтКод,СерииКодов)=0 Тогда
		Возврат СтКод;
	Иначе
		Если Спр1.ТекущийЭлемент()=Спр.ТекущийЭлемент() Тогда //мы нашли самого себя т.е. это перезаписывание кода !!!
			Возврат СтКод;
		КонецЕсли;
	КонецЕсли;
	
		
	Если ТипКода="Текстовый" Тогда
		ДлинаКода=Мета.ДлинаКода;
		Код=Сокрлп(Лев(СтКод,ДлинаКода-2));
		Ном=0;
		Пока Спр1.НайтиПоКоду(Прав(Код+Ном,ДлинаКода),СерииКодов)=1 Цикл
				Если Спр1.ТекущийЭлемент()=Спр.ТекущийЭлемент() Тогда //мы нашли самого себя т.е. это перезаписывание кода !!!
					Возврат ""+Код+Ном;
				КонецЕсли;
				Ном=Ном+1;
		КонецЦикла;
		Возврат СтрЗаменить(""+Код+Ном," ","_");
	Иначе//Числовой
		Код=СтКод;
		Вход=0;
		Пока Спр1.НайтиПоКоду(Код,СерииКодов)=1 Цикл
			Если Спр1.ТекущийЭлемент()=Спр.ТекущийЭлемент() Тогда //мы нашли самого себя т.е. это перезаписывание кода !!!
					Возврат Код;
			КонецЕсли;
			Код=Число(Код)+1;
			Если Вход=0 Тогда
			    Вход=1;
				Спр2=СоздатьОбъект("Справочник."+ВидСправочника);
				глСоздатьНовыйОбъект(Спр2);
				Код=Спр2.Код;
				Спр2=0;
			КонецЕсли;
		КонецЦикла;
		Возврат Код;
	КонецЕсли;
КонецФункции






//_____________________________________________________________________________
//поиск документа по его IDD (у 1С в этом плане есть неоднозначное 
//выполнение команды, которое надо обойти)
Функция НайтиДокументПоIDD(Док,ИДДПоиска) 
	Перем Ид;
	Ид=Лев(Сокрлп(ИДДПоиска)+"                 ",17);
	Рез=Док.ВыбратьПоЗначению(,,"IDD",Ид);
	Если Рез=1 Тогда
		Рез=Док.ПолучитьДокумент();
	КонецЕсли;
	Возврат Рез;
КонецФункции //НайтиДокументПоIDD



//_____________________________________________________________________________
//функция выдает строковое представление любого объекта хранения данных 1С
Функция ПолучитьПредставлениеОбъекта(Объект)
	Тип=ТипЗначения(Объект);
	Если Тип<10 Тогда
		Возврат Строка(Тип)+":"+Строка(Объект);
	ИначеЕсли Тип=10 Тогда //Перечисление
		Возврат Строка(Тип)+"-"+Объект.Вид()+":"+Объект.Идентификатор();
	ИначеЕсли Тип=11 Тогда //Справочник
		Попытка 
			Возврат Строка(Тип)+"-"+Объект.Вид()+":"+Объект.IDD;
		Исключение
			Возврат Строка(Тип)+":";
		КонецПопытки;
	ИначеЕсли Тип=12 Тогда //Документ
			Возврат Строка(Тип)+":"+Объект.IDD;
	ИначеЕсли Тип=13 Тогда //Календарь
		Возврат Строка(Тип)+":"+Объект.Вид();
	ИначеЕсли Тип<16 Тогда //Вид расчета,Счет
		Возврат Строка(Тип)+":"+Объект.Код;
	ИначеЕсли Тип<18 Тогда //Виды субконто,План счетов
		Возврат Строка(Тип)+":"+Объект.Идентификатор();
	Иначе
		Возврат Строка(Тип)+":"+Строка(Объект);
	КонецЕсли;
КонецФункции//ПолучитьПредставлениеОбъекта



//_____________________________________________________________________________
//Функция возвращает объект 1С из строкового представления, 
//полученного функцией ПолучитьПредставлениеОбъекта
Функция ПолучитьОбъект(Стр,УстТип,ЕстьЗначение)
	Тип=ТЛист.TypeValue;
	УстТип=ТЛист.SetType*Тип;
	ЕстьЗначение=1;
	Если Тип=0 Тогда
		ЕстьЗначение=-1;
		УстТип=0;
		Возврат "";
	ИначеЕсли Тип=1 Тогда
		Возврат Число(Стр);
	ИначеЕсли Тип=2 Тогда
		Стр=СтрЗаменить(Стр," &Enter ",РазделительСтрок);
		Возврат Стр;
	ИначеЕсли Тип=3 Тогда
		Возврат Дата(Стр);
	КонецЕсли;
	
	Если Сокрлп(Стр)="" Тогда
		ЕстьЗначение=-1;//Значения и не должно быть - т.е. передано пустым
		Возврат "";
	ИначеЕсли Тип=10 Тогда //Перечисление
		Пер=Перечисление.ПолучитьАтрибут(ТЛист.VidValue);
		Возврат Пер.ЗначениеПоИдентификатору(Стр);
	ИначеЕсли Тип=11 Тогда //Справочник
		Спр=СоздатьОбъект("Справочник."+ТЛист.VidValue);
		ЕстьЗначение=Спр.НайтиПоРеквизиту("IDD",Стр,1);
			Если ЕстьЗначение=0 Тогда
				ГлобСписокВторогоЦикла.ДобавитьЗначение(Стр);
			КонецЕсли;
		Возврат Спр.ТекущийЭлемент();
	ИначеЕсли Тип=12 Тогда //Документ
		Док=СоздатьОбъект("Документ");
		ЕстьЗначение=НайтиДокументПоIDD(Док,Стр);
			Если ЕстьЗначение=0 Тогда
				ГлобСписокВторогоЦикла.ДобавитьЗначение(Стр);
			КонецЕсли;
		Возврат Док.ТекущийДокумент();
	ИначеЕсли Тип=13 Тогда //Календарь
		Возврат Календари.ПолучитьАтрибут(Стр);
	ИначеЕсли Тип=14 Тогда //Вид расчета
		Возврат ВидРасчета.ПолучитьАтрибут(Стр);
	ИначеЕсли Тип=15 Тогда //Счет
		 Счет=СоздатьОбъект("Счет");
//		 Счет=СоздатьОбъект("Счет."+ТЛист.VidValue);
		 Счет.НайтиПоКоду(Стр);
	     Возврат  Счет.ТекущийСчет();
	ИначеЕсли Тип=16 Тогда //Виды субконто
	    Возврат  ВидыСубконто.ЗначениеПоИдентификатору(Стр);
	ИначеЕсли Тип=17 Тогда //План счетов
	    Возврат  ПланыСчетов.ЗначениеПоИдентификатору(Стр);
	Иначе
		Возврат Стр;
	КонецЕсли;
КонецФункции //ПолучитьОбъект



//_____________________________________________________________________________
Процедура ВыгрузитьИсторию(Реквизит,Дата1,Дата2,Спр=0)
	Пер=ОбъектПериодический;
	Если Спр=0 Тогда//Значит это выгрузка константы
		Пер.ИспользоватьОбъект(Реквизит);
	Иначе
		Пер.ИспользоватьОбъект(Реквизит,Спр.ТекущийЭлемент());
	КонецЕсли;
	Пер.ВыбратьЗначения(Дата1,Дата2);
	Было=0;
	Пока Пер.ПолучитьЗначение()=1 Цикл
		//движения вызванные документом пропускаем 
		//Если Пер.ТекущийДокумент().Выбран()=1 Тогда
		//	Продолжить;
		//КонецЕсли;
		ТЛист.PeriodAdd(ПолучитьПредставлениеОбъекта(Пер.Значение),Строка(Пер.ДатаЗнач));
		Было=1;
	КонецЦикла;
	//защита от необычного первоначального ввода значений 
	//для реквизитов периодического типа 1С-движка
	Если Было=0 Тогда
		Пер.ВыбратьЗначения('01.01.1980','01.01.1980');
		Если Пер.ПолучитьЗначение()=1 Тогда
			ТЛист.PeriodAdd(ПолучитьПредставлениеОбъекта(Пер.Значение),Строка(Пер.ДатаЗнач));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры 


//_____________________________________________________________________________
Функция ВыгрузитьСтрокуДанных(Спр,РеквизитИДД="",Дата1=0,Дата2=0,Вид="")
	Перем Имя;
	Док=Спр;Рег=Спр;ЖР=Спр;Опер=Спр;
	//Имя=ТЛист.SetNextGet(1);
	//Пока Имя<>0 Цикл
	//	Попытка
	//    Имя=ТЛист.SetNextGet(ПолучитьПредставлениеОбъекта(Спр.ПолучитьАтрибут(Имя)));
	//	Исключение
	//	Сообщить(ОписаниеОшибки()+" ("+ТЛист.Name+")","I");
	//	КонецПопытки;
	//КонецЦикла;


	Пока ТЛист.AttrNext()=1 Цикл
		Попытка
		ТЛист.AttrValue=ПолучитьПредставлениеОбъекта(Спр.ПолучитьАтрибут(ТЛист.Name));
		Исключение
		Сообщить(ОписаниеОшибки()+" ("+ТЛист.Name+")","I");
		КонецПопытки;
	КонецЦикла;
	
	Пока ТЛист.FormulaNext()=1 Цикл
		Реквизит=ТЛист.Name;
		Если Сред(Реквизит,2,4)="IDD=" Тогда
			//Здесь возможен вариант, что мы на ходу меняем ИД объекта (когда, например, выгружаем один справочник в несколько)
			//Поэтому заменим сам ИД объекта 
			Стр=Сред(Реквизит,6);
		Иначе
			//Обычное задание выражения
			Стр=Сред(Реквизит,2);
		КонецЕсли;
			ТЛист.AttrValue=Шаблон("[ПолучитьПредставлениеОбъекта("+Стр+")]");
	КонецЦикла;
	Если Дата1<>0 Тогда
	Пока ТЛист.HistoryNext()=1 Цикл
		Реквизит=ТЛист.Name;
		//выгружаем список периодических реквизитов
		Использование=Метаданные.Справочник(Вид).Реквизит(Реквизит).Использование;
		//определяем для какого типа справочника нельзя использовать этот реквизит
		//цифра 0 - означает не использовать для элемента
		//цифра 1 - означает не использовать для группы
		//цифра 2 - означает использование для всех типов
		НеИспользование=?(Использование="ДляЭлемента",1,?(Использование="ДляГруппы",0,2));
		Если Спр.ЭтоГруппа()<>НеИспользование Тогда
			ВыгрузитьИсторию(Реквизит,Дата1,Дата2,Спр)
		КонецЕсли;
	КонецЦикла;
	КонецЕсли;
	Возврат 1;
КонецФункции //ВыгрузитьСтрокуДанных


//_____________________________________________________________________________
//загружаем список периодических реквизитов
Функция ЗагрузитьИсторию(Реквизит,Дата1,Дата2,Спр=0)
	Перем УстановитьТип,ЕстьЗначение;
	Рез=ТЛист.PeriodSelect();
	Пер=ОбъектПериодический;
	Если Спр=0 Тогда
		Пер.ИспользоватьОбъект(Реквизит);
	Иначе
		Пер.ИспользоватьОбъект(Реквизит,Спр.ТекущийЭлемент());
	КонецЕсли;
	Результат=1;//Возвращаемый рузультат загрузки
				//в этой переменной мы отслеживаем все ли объекты загружены (1) или не все (0)
	Если Рез=1 Тогда
		Было=0;
		Пока ТЛист.PeriodNext()=1 Цикл
			ПерЗначение=ПолучитьОбъект(ТЛист.PeriodValue,УстановитьТип,ЕстьЗначение);
			Если ЕстьЗначение=0 Тогда
				Результат=0;//Говорим что надо перегрузить этот объект
				Продолжить;
			КонецЕсли;
			ПерДатаЗнач=ТЛист.PeriodDate;
			Если УстановитьТип>0 Тогда
				Пер.НазначитьТип(МассивТипов1С[УстановитьТип]+"."+ТЛист.VidValue);
			КонецЕсли;
			
			Пер.ДатаЗнач=ПерДатаЗнач;
			Пер.Значение=ПерЗначение;
			Пер.Записать();
			Если Было=0 Тогда
				Дата1=Пер.ДатаЗнач;
				Было=1;
			Иначе
				Дата2=Пер.ДатаЗнач;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Рез=2 Тогда//у нас периодический реквизит, а пришел как непериодический
		//ищем последнее значение периодического реквизита в нашей базе и изменяем на новое значение
		ПерЗначение=ПолучитьОбъект(ТЛист.AttributValue,УстановитьТип,ЕстьЗначение);
		Пер.ОбратныйПорядок();
		Пер.ВыбратьЗначения();
		Если Пер.ПолучитьЗначение()=1 Тогда
			ПерДатаЗнач=Пер.ДатаЗнач;
		Иначе
			ПерДатаЗнач='01.01.1980';
		КонецЕсли;
		Пер.ДатаЗнач=ПерДатаЗнач;
		Пер.Значение=ПерЗначение;
		Пер.Записать();
		
		Дата1=ПерДатаЗнач;
		Дата2=Дата1;
		
	КонецЕсли;
	Возврат Результат;
КонецФункции //ЗагрузитьИсторию




//_____________________________________________________________________________
Функция ЗагрузитьСтрокуДанных(Спр,ЭтоЖР=0)//,ПомеченНаУдаление=0,Удален=0,Подчиненность=0,ВремяДокумента="",Проведен=0,ДатаДок=0,Приход=0,НомерСтроки=0,СложнаяПроводка=0,ЖурналРасчетов=0,ПроводкиВключены=0,РодительскийДокумент="",ОбъектЗаписи="")
	Перем ЕстьЗначение,УстановитьТип;
	Рег=Спр;ЖР=Спр;Док=Спр;Опер=Спр;
	Результат=1;
	Пока ТЛист.GetAttribut()=1 Цикл
		Реквизит=ТЛист.AttributName;
		Атрибут=ПолучитьОбъект(ТЛист.AttributValue,УстановитьТип,ЕстьЗначение);
		
		Если ЕстьЗначение=1 Тогда
			Если УстановитьТип>0 Тогда
				Попытка
				Спр.НазначитьТип(Реквизит,МассивТипов1С[УстановитьТип]+"."+ТЛист.VidValue);
				Исключение
				КонецПопытки;
			КонецЕсли;
			Если ЭтоЖР=0 Тогда
				Спр.УстановитьАтрибут(Реквизит,Атрибут);
			Иначе
				Спр.УстановитьРеквизит(Реквизит,Атрибут);
			КонецЕсли;
		ИначеЕсли ЕстьЗначение=0 Тогда
			//Беда - такой справочник или документ еще не загрузили
			Результат=0;
		КонецЕсли;
		//попытка
		//Исключение
		//	Сообщить("Ошибка на реквизите "+ТЛист.AttributName+" "+ОписаниеОшибки());
		//КонецПопытки;
	КонецЦикла;                        
	
	Пока ТЛист.GetFormula()=1 Цикл
		Атрибут=ТЛист.AttributValue;
		ТЛист.FormulaValue=Шаблон("[ПолучитьПредставлениеОбъекта("+ТЛист.FormulaName+")]");
		Реквизит=ТЛист.AttributName;
		Если Реквизит<>"" Тогда
			Атрибут=ПолучитьОбъект(ТЛист.AttributValue,УстановитьТип,ЕстьЗначение);
				Если ЭтоЖР=0 Тогда
					Спр.УстановитьАтрибут(Реквизит,Атрибут);
				Иначе
					ЖР.УстановитьРеквизит(Реквизит,Атрибут);
				КонецЕсли;
		КонецЕсли;
	КонецЦикла;                        
	Возврат Результат;
КонецФункции //ЗагрузитьСтрокуДанных













//_____________________________________________________________________________
//выгружаем один элемент справочника
Процедура ВыгрузитьСправочник(Вид,ИДД,Дата1,Дата2)
	Рез=ТЛист.FindPath("Справочники/"+Вид+"/");
	Если Рез=1 Тогда
		Спр=СоздатьОбъект("Справочник."+Вид);
		Спр.ИспользоватьДату(РабочДата);
		Если Спр.НайтиПоРеквизиту("IDD",ИДД,1)=1 Тогда
			Если ПриВыгрузкеСправочника(Спр)=0 Тогда
				Возврат ;
			КонецЕсли;
			ВыгрузитьСтрокуДанных(Спр,ИДД,Дата1,Дата2,Вид);
			ТЛист.AttrValueByName("#Удален",0);
			ТЛист.AttrValueByName("#ПомеченНаУдаление",Спр.ПометкаУдаления());
			ТЛист.AttrValueByName("#ЭтоГруппа",Спр.ЭтоГруппа());
		Иначе
			//не существует
			ТЛист.AttrValueByName("#Удален",1);
		КонецЕсли;
		Рез=ТЛист.Append("Справочники/"+Вид,11,ИДД);
		Если Рез=1 Тогда
			М_Сообщить("Выгружен: "+Вид+",  "+Спр.Наименование+"  ,"+Спр.Код);
		ИначеЕсли Рез=0 Тогда
			М_Сообщить("Отмена выгрузки: "+Вид+",  "+Спр.Наименование+"  ,"+Спр.Код);
		Иначе
			М_Сообщить("Выгружено "+Рез+" элемента(ов) справочника "+Вид+",  "+Спр.Наименование+"  ,"+Спр.Код);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ВыгрузитьСправочник



//_____________________________________________________________________________
//Выгружаем документ с движениями
Процедура ВыгрузитьДокумент(Вид,ИДД)
	Рез=ТЛист.FindPath("Документы/"+Вид+"/Шапка"+"/");
	Если Рез=1 Тогда
		Док=СоздатьОбъект("Документ");
		Если НайтиДокументПоIDD(Док,ИДД)=1 Тогда
			Если ПриВыгрузкеДокумента(Док)=0 Тогда
				Возврат ;
			КонецЕсли;
//Рез=ПравилаВыгрузки.НайтиПоНаименованию("#ВыгрузитьПоКоличествуСтрок");
			
			ВыгрузитьСтрокуДанных(Док,ИДД);
			ТЛист.AttrValueByName("#Удален",0);
			ТЛист.AttrValueByName("#ПомеченНаУдаление",Док.ПометкаУдаления());
			ТЛист.AttrValueByName("#ДатаДок",ПолучитьПредставлениеОбъекта(Док.ДатаДок));
			ТЛист.AttrValueByName("#ВремяДокумента",ПолучитьПредставлениеОбъекта(Док.ПолучитьВремя()));
			ТЛист.AttrValueByName("#Проведен",Док.Проведен());
		
			Рез=ТЛист.FindPath("Документы/"+Вид+"/Табличная часть/");
			Если Рез=1 Тогда
				Док.ВыбратьСтроки();
				Пока Док.ПолучитьСтроку()=1 Цикл
					ТЛист.NewLine();
					ВыгрузитьСтрокуДанных(Док,ИДД);
				КонецЦикла;
			КонецЕсли;


			Рез=ТЛист.Append("Документы/"+Вид,12,ИДД);
			Если Рез=1 Тогда
				М_Сообщить("Выгружен "+Вид+",  "+Док.НомерДок+"  ,"+Док.ДатаДок);
			ИначеЕсли Рез=0 Тогда
				М_Сообщить("Отмена выгрузки: "+Вид+",  "+Док.НомерДок+"  ,"+Док.ДатаДок);
			Иначе
				М_Сообщить("Выгружено "+Рез+" документа(ов) "+Вид+",  "+Док.НомерДок+"  ,"+Док.ДатаДок);
			КонецЕсли;
			
			Если Число(Рез)=0 Тогда //отмена выгрузки рез=0, удаление рез=строка (=>0)
				Возврат;
			КонецЕсли;

			
			//выгружаем движения документа
			ТЛист.FindPath("Документы/"+Вид);
			Если ТЛист.Motion=1 Тогда
			МетаДок=Метаданные.Документ(Вид);
			Если Док.Проведен()=1 Тогда
				//Выгружаем движения регистров по заданному документу
				Если МетаДок.ОперативныйУчет=1 Тогда
					Рез=ТЛист.FindPath("Регистры/");
					Если Рез=1 Тогда
						//т.к. заранее не знаем по каким регистрам есть движения , то организуем цикл
						Пока ТЛист.NextElement()=1 Цикл
							ИмяРегистра=ТЛист.Name;
							Рег=СоздатьОбъект("Регистр."+ИмяРегистра);
							Рез=Рег.ВыбратьДвиженияДокумента(Док.ТекущийДокумент());
							Если Рез=1 Тогда
								Пока Рег.ПолучитьДвижение()>0 Цикл
									ТЛист.NewLine();
									ВыгрузитьСтрокуДанных(Рег);
									ТЛист.AttrValueByName("#ЭтоПриход",Рег.Приход);
									ТЛист.AttrValueByName("#НомерСтроки",Рег.НомерСтроки());
								КонецЦикла;
							ТЛист.Append("Регистры/"+ИмяРегистра,98,"");
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;



				//Выгружаем движения справочников по заданному документу
				Пер=ОбъектПериодический;
				Рез=Пер.ВыбратьПоДокументу(Док.ТекущийДокумент());
				Если Рез=1 Тогда
					Пока Пер.ПолучитьЗначение()=1  Цикл
						Спр=Пер.ТекущийОбъект();
						Реквизит=Пер.ТекущийРеквизит();
						Реквизит=Сред(Реквизит,Найти(Реквизит,".")+1);
						ТЛист.AppendPeriodData(ПолучитьПредставлениеОбъекта(Спр),"2:"+Реквизит,ПолучитьПредставлениеОбъекта(Пер.Значение),"3:"+Пер.ДатаЗнач);
					КонецЦикла;
				КонецЕсли;
				
				
				
				
				//Выгружаем движения журнала расчета по заданному документу
				Если МетаДок.Расчет=1 Тогда
					Рез=ТЛист.FindPath("Журналы расчетов/");
					Если Рез=1 Тогда
						//т.к. заранее не знаем по каким журналам есть движения, то организуем цикл
						Пока ТЛист.NextElement()=1 Цикл
							ИмяЖурнала=ТЛист.Name;
							ЖР=СоздатьОбъект("ЖурналРасчетов."+ИмяЖурнала);
							Рез=ЖР.ВыбратьЗаписиПоДокументу(Док.ТекущийДокумент());
							Если Рез=1 Тогда
								СписокЖР=СоздатьОбъект("СписокЗначений");
								КолвоДвиж=0;
								Пока ЖР.ПолучитьЗапись()>0 Цикл
									КолвоДвиж=КолвоДвиж+1;
									СписокЖР.ДобавитьЗначение(КолвоДвиж,ЗначениеВСтрокуВнутр(ЖР.ТекущаяЗапись()));
									ТЛист.NewLine();
									ВыгрузитьСтрокуДанных(ЖР);
									ТЛист.AttrValueByName("#ПериодРегистрации","3:"+ЖР.ПериодРегистрации.ДатаНачала);
									ТЛист.AttrValueByName("#ПервичнаяЗапись",СписокЖР.Получить(ЗначениеВСтрокуВнутр(ЖР.ПервичнаяЗапись)));
								КонецЦикла;
								ТЛист.Append("Журналы расчетов/"+ИмяЖурнала,99,"");
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			//по операциям
			Если МетаДок.БухгалтерскийУчет=1 Тогда
				Рез=ТЛист.FindPath("Операции/");
				Если Рез=1 Тогда
					Опер=Док.Операция;
					Если Опер.Выбрана()=1 Тогда
						Рез=ТЛист.FindPath("Операции/Атрибуты операции/");
						Если Рез=1 Тогда
							ВыгрузитьСтрокуДанных(Опер);
							ТЛист.AttrValueByName("#ПроводкиВключены",Опер.ВключитьПроводки());
							
							Рез=ТЛист.FindPath("Операции/Атрибуты проводки/");
							Если Рез=1 Тогда
								Опер.ВыбратьПроводки();
								Пока Опер.ПолучитьПроводку()=1 Цикл
									ТЛист.NewLine();
									ВыгрузитьСтрокуДанных(Опер);
									ТЛист.AttrValueByName("#СложнаяПроводка",Опер.СложнаяПроводка());
									ДебетСчет=Опер.Дебет.Счет;
										ТЛист.AttrValueByName("Дебет.Счет",ПолучитьПредставлениеОбъекта(ДебетСчет));
										Для А=1 По 5 Цикл//ДебетСчет.КоличествоСубконто() Цикл
											ТЛист.AttrValueByName("Дебет.Субконто"+А,ПолучитьПредставлениеОбъекта(Опер.Дебет.Субконто(А)));
										КонецЦикла;
									КредитСчет=Опер.Кредит.Счет;
										ТЛист.AttrValueByName("Кредит.Счет",ПолучитьПредставлениеОбъекта(КредитСчет));
										Для А=1 По 5 Цикл//КредитСчет.КоличествоСубконто() Цикл
											ТЛист.AttrValueByName("Кредит.Субконто"+А,ПолучитьПредставлениеОбъекта(Опер.Кредит.Субконто(А)));
										КонецЦикла;
								КонецЦикла;
							КонецЕсли;
							ТЛист.Append("Операции",96,"");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		//такой документ не существует 
		ТЛист.AttrValueByName("#Удален",1);
		
		Рез=ТЛист.Append("Документы/"+Вид,12,ИДД);
			М_Сообщить("Выгружено "+Рез+" документа(ов) "+Вид+",  "+Док.НомерДок+"  ,"+Док.ДатаДок);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ВыгрузитьДокумент

//_____________________________________________________________________________
Процедура ВыгрузитьКонстанту(Реквизит,Дата1,Дата2)
	Рез=ТЛист.FindPath("Константы/"+Реквизит+"/");
	Если Рез=1 Тогда
		//для периодической константы
		Пока Рез=1 Цикл//цикл для повторяющихся реквизитов - т.к. для выгрузки историй нет системной поддержки !!!!
			Если ТЛист.History=1 Тогда
				ВыгрузитьИсторию(Реквизит,Дата1,Дата2);
			КонецЕсли;
			Рез=ТЛист.FindNext(Реквизит);
		КонецЦикла;
		
		//для непериодической константы
		Если Число(Метаданные.Константа(Реквизит).Периодический)=0 Тогда
			Атрибут=Константа.ПолучитьАтрибут(Реквизит);
		Иначе    //константа периодическая, а надо выгрузить как непериодическую !!
			Пер=ОбъектПериодический;
			Пер.ИспользоватьОбъект(Реквизит);
			Атрибут=Пер.ЗначениеНаДату(РабочДата);
		КонецЕсли;
		ТЛист.AttrValueByName(Реквизит,ПолучитьПредставлениеОбъекта(Атрибут));
		Рез=ТЛист.Append("Константы/"+Реквизит,95,"");
		Если Рез=1 Тогда
			М_Сообщить("Выгружена константа: "+Реквизит);
		ИначеЕсли Рез=0 Тогда
			М_Сообщить("Отмена выгрузки константы: "+Реквизит);
		Иначе
			М_Сообщить("Выгружено "+Рез+" констант(ы): "+Реквизит);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//_____________________________________________________________________________
Процедура ВыгрузитьСчет(Объект)
	Счет=ЗначениеИзСтроки(Объект);
	Если ТипЗначенияСтр(Счет)<>"Счет" Тогда
		Возврат;
	КонецЕсли;
	ПланСчетов=Счет.Вид();
	КодСчета=Счет.Код;
	Путь="Планы счетов/"+ПланСчетов+"/"+КодСчета;
	Рез=ТЛист.FindPath(Путь);
	Если Рез=1 Тогда
			ТЛист.Write(94,"TypeObject");
			ТЛист.Write("17:"+ПланСчетов,"ПланСчетов");
			ТЛист.Write("2:"+Счет.Код,"КодСчета");
			ТЛист.Write("2:"+Счет.Наименование,"НаименованиеСчета");
			ТЛист.Write("1:"+Счет.ЭтоГруппа(),"ПризнакГруппы");
			ТЛист.Write("1:"+Счет.ЗаданВКонфигурации(),"ЗаданВКонфигурации");
			ТЛист.Write("1:"+Счет.Валютный,"Валютный");
			ТЛист.Write("1:"+Счет.Количественный,"Количественный");
			ТЛист.Write("1:"+Счет.Забалансовый,"Забалансовый");
			ТЛист.Write("1:"+Счет.Активный,"Активный");
			Для А=1 По 5 Цикл
				ТЛист.Write(ПолучитьПредставлениеОбъекта(Счет.ВидСубконто(А)),"ВидСубконто"+А);
				ТЛист.Write("1:"+Счет.ТолькоОбороты(А),"ТолькоОбороты"+А);
				ТЛист.Write("1:"+Счет.УчетПоСумме(А),"УчетПоСумме"+А);
				ТЛист.Write("1:"+Счет.УчетПоВалютнойСумме(А),"УчетПоВалютнойСумме"+А);
				ТЛист.Write("1:"+Счет.УчетПоКоличеству(А),"УчетПоКоличеству"+А);
			КонецЦикла;
			М_Сообщить("Выгружен счет "+Счет);
	КонецЕсли;
КонецПроцедуры //ВыгрузитьСчет



//_____________________________________________________________________________
//процедура проведения документа в режиме загрузки движений
//выполняется всегда на новой копии обработки обмена!!!
Процедура ПроведениеДокумента(Док,ТекЛист)
	Состояние(Сокрлп(МОДПерем2)+" - проведение");
	ТЛист=ТекЛист;
	Вид=Сокрлп(Док.Вид());
	ИДД=Док.IDD;
	Если Сокрлп(ТипЗначенияСтр(ТЛист))="OLE.ITList" Тогда
		//по регистрам
		Мета=Метаданные.Документ(Вид);
		Если Мета.ОперативныйУчет=1 Тогда
			Рез=ТЛист.SelectChildObject();
			Если Рез=1 Тогда
				Пока ТЛист.GetChildObject(98)=1 Цикл
					Если ТЛист.SelectTable()=1 Тогда
						ИмяРегистра=ТЛист.Vid;
						Пока ТЛист.SelectTableAttribut()=1 Цикл
							Рег=Док.Регистр.ПолучитьАтрибут(ИмяРегистра);
							Рез=ЗагрузитьСтрокуДанных(Рег);
							
							Если ТЛист.GetAttributByName("#ЭтоПриход")=1 Тогда
								ЭтоПриход=Число(ТЛист.AttributValue);
							Иначе
								ЭтоПриход=1;
							КонецЕсли;
							
							Если ТЛист.GetAttributByName("#НомерСтроки")=1 Тогда
								НомерСтроки=Число(ТЛист.AttributValue);
							Иначе
								НомерСтроки=0;
							КонецЕсли;
							
							Если ТЛист.IsLoad()=1 Тогда
								Рег.ПривязыватьСтроку(НомерСтроки);
								Если ЭтоПриход=1 Тогда
									Рег.ДвижениеПриходВыполнить();
								Иначе
									Рег.ДвижениеРасходВыполнить();
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		
		////делаем движения по периодическим реквизитам справочников
		Рез=ТЛист.SelectChildObject();
		Если Рез=1 Тогда
			Пока ТЛист.GetChildObject(97)=1 Цикл
				Если ТЛист.SelectTable()=1 Тогда
					Пока ТЛист.SelectTableAttribut()=1 Цикл
						ТЛист.GetAttributByName("Справочник");
						Справочник=ПолучитьОбъект(ТЛист.AttributValue,0,0);
						ТЛист.GetAttributByName("Реквизит");
						Реквизит=ТЛист.AttributValue;
						ТЛист.GetAttributByName("Значение");
						Значение=ПолучитьОбъект(ТЛист.AttributValue,0,0);
						ТЛист.GetAttributByName("Дата");
						ДатаУст=Дата(ТЛист.AttributValue);
						Попытка
						Док.УстановитьРеквизитСправочника(Справочник,Реквизит,Значение,ДатаУст);
						Исключение//Значит нет таго справочника...
						КонецПопытки;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		
		//движения по журналу расчетов
		Если Мета.Расчет=1 Тогда
			Рез=ТЛист.SelectChildObject();
			Если Рез=1 Тогда
				Пока ТЛист.GetChildObject(99)=1 Цикл
					Если ТЛист.SelectTable()=1 Тогда
						НомДвижения=0;
						ИмяЖурнала=ТЛист.Vid;
						ЖР=СоздатьОбъект("ЖурналРасчетов."+ИмяЖурнала);
						ТекПериод=ЖР.ТекущийПериод();Период=ТекПериод;
						СписокЖР=СоздатьОбъект("СписокЗначений");
						ЖР.ВыбратьЗаписиПоДокументу(Док.ТекущийДокумент());
						Пока ЖР.ПолучитьЗапись()>0 Цикл
							ЖР.УдалитьЗапись();
							ЖР.ВыбратьЗаписиПоДокументу(Док.ТекущийДокумент());
						КонецЦикла;   
						
						
						Пока ТЛист.SelectTableAttribut()=1 Цикл
							НомДвижения=НомДвижения+1;
							Если ТЛист.GetAttributByName("#ПериодРегистрации")=1 Тогда
								ПериодРегистрации=Дата(ТЛист.AttributValue);
								Период=ЖР.ПериодПоДате(ПериодРегистрации);
								Если Сокрлп(ТекПериод)<>Сокрлп(Период) Тогда
									Рез=ЖР.УстановитьТекущийПериод(Период,0);
								КонецЕсли;
							КонецЕсли;
							
							
							
							ЖР.Новая();
							Если ТЛист.GetAttributByName("#ПервичнаяЗапись")=1 Тогда
								ЖР.УстановитьРеквизит("ПервичнаяЗапись",СписокЖР.Получить(Число(ТЛист.AttributValue)));
							КонецЕсли;
							    
							
							Рез=ЗагрузитьСтрокуДанных(ЖР,1);
							Если Рез=1 Тогда
								Если ТЛист.IsLoad()=1 Тогда
									ЖР.Записать();
									СписокЖР.ДобавитьЗначение(ЖР.ТекущаяЗапись(),НомДвижения);
									Период=ЖР.ТекущийПериод();
									Если Сокрлп(ТекПериод)<>Сокрлп(Период) Тогда
										ЖР.УстановитьТекущийПериод(ТекПериод,0);
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
										
		
		//загружаем операции
		Если Мета.БухгалтерскийУчет=1 Тогда
			Рез=ТЛист.SelectChildObject();
			Если Рез=1 Тогда
				Если ТЛист.GetChildObject(96)=1 Тогда
					Если ТипЗначения(Док)=12 Тогда //загружаем операции
						Опер=СоздатьОбъект("Операция");
						Опер.НайтиОперацию(Док);
					Иначе
						Опер=Док.Операция;//это проводится документ
					КонецЕсли;
					
					
					Рез=ТЛист.SelectAttribut();
					Если Рез=1 Тогда
						Рез=ЗагрузитьСтрокуДанных(Опер);
						Если ТЛист.GetAttributByName("#ПроводкиВключены")=1 Тогда
							ПроводкиВключены=Число(ТЛист.AttributValue);
							Опер.ВключитьПроводки(ПроводкиВключены);
						КонецЕсли;
					КонецЕсли;
					
					Если ТЛист.IsLoad()=0 Тогда
						Пока Опер.КоличествоПроводок()>0 Цикл
							Опер.ВыбратьПроводки();
							Опер.ПолучитьПроводку();
							Опер.УдалитьПроводку();
							Опер.ВыбратьПроводки();
						КонецЦикла;
						Опер.Записать();
						Возврат;
					КонецЕсли;


					Если ТЛист.SelectTable()=1 Тогда
						//Здесь не имеет смысла организовывать заполнение данных, как в табличной части документов
						//т.к. таблица операций имеют неоднородную стрктуру
						//Поэтому сначала удаляем все строки
						Пока Опер.КоличествоПроводок()>0 Цикл
							Опер.ВыбратьПроводки();
							Опер.ПолучитьПроводку();
							Опер.УдалитьПроводку();
						КонецЦикла;
						
						Пока ТЛист.SelectTableAttribut()=1 Цикл
							Если ТЛист.GetAttributByName("#СложнаяПроводка")=1 Тогда
								СложнаяПроводка=Число(ТЛист.AttributValue);
							Иначе
								СложнаяПроводка=0;
							КонецЕсли;
							Если СложнаяПроводка=1 Тогда
								Опер.НоваяКорреспонденция();
							Иначе
								Опер.НоваяПроводка();
							КонецЕсли;
							ЗагрузитьСтрокуДанных(Опер);
							
							Если ТЛист.GetAttributByName("Дебет.Счет")=1 Тогда
							Опер.Дебет.Счет=ПолучитьОбъект(ТЛист.AttributValue,0,0);
							Для А=1 По Опер.Дебет.Счет.КоличествоСубконто() Цикл
								Если ТЛист.GetAttributByName("Дебет.Субконто"+А)=1 Тогда
									Опер.Дебет.Субконто(А,ПолучитьОбъект(ТЛист.AttributValue,0,0));
								КонецЕсли;
							КонецЦикла;
							КонецЕсли;
							Если ТЛист.GetAttributByName("Кредит.Счет")=1 Тогда
							Опер.Кредит.Счет=ПолучитьОбъект(ТЛист.AttributValue,0,0);
							Для А=1 По Опер.Кредит.Счет.КоличествоСубконто() Цикл
								Если ТЛист.GetAttributByName("Кредит.Субконто"+А)=1 Тогда
									Опер.Кредит.Субконто(А,ПолучитьОбъект(ТЛист.AttributValue,0,0));
								КонецЕсли;
							КонецЦикла;
							КонецЕсли;
							
							
							Если ТЛист.IsLoad()=0 Тогда
								Опер.УдалитьПроводку();
							КонецЕсли;
							
						КонецЦикла;
					КонецЕсли;
					Опер.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	Возврат;
КонецПроцедуры //ПроведениеДокумента
  
Процедура ПровестиДокумент(Док,ЗагрузкаДвижений)
	Если Сокрлп(Док.Вид())=ДокументОперации Тогда
		М_Сообщить("Проводится документ "+Док.ТекущийДокумент());
		ПроведениеДокумента(Док,ТЛист);
		Возврат;
	Иначе
			Если Метаданные.Документ(Док.Вид()).ОперативныйУчет=1 Тогда
				Если НачМесяца(Док.ДатаДок)>НачМесяца(ПолучитьДатуТА()) Тогда
					Сообщить("Устанавливаем новую ТА на дату "+Док.ДатаДок);
					Попытка
						УстановитьТАна(Док.ТекущийДокумент());
					Исключение
						Если МонопольныйРежим()=0 Тогда
							Сообщить("Зайдите в программу в МОНОПОЛЬНОМ РЕЖИМЕ и повторите загрузку","I");
						Иначе
							Сообщить("Закройте все открытые формы документов и повторите загрузку !","I");
						КонецЕсли;
//						УстановитьТАна(Док.ТекущийДокумент());
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
	КонецЕсли;
	
	Если ЗагрузкаДвижений=0 Тогда
		СписокПроводимыхДокументов.ДобавитьЗначение(Док.ТекущийДокумент());
		Возврат;
	КонецЕсли;
	
	
	М_Сообщить("Проводится документ "+Док.ТекущийДокумент());
	НеРегистрироватьИзмененияМОД=1;
	ПроведениеПоАлгоритмуМОД=ЗагрузкаДвижений;
	ПЕремИмяОбработки=ОбработкаОбменДанными;
	//Путь="";Имя="";
	//РасположениеФайла(Путь,Имя);
	//ПутьКОбработке=Сокрлп(Путь+Имя);
	//Если ПутьКОбработке="" Тогда
	//	ОбработкаОбменДанными="Обработка.ОбменДаннымиОЛЕ#";
	//Иначе
	//	ОбработкаОбменДанными="Обработка#";
	//	ФайлОбработкиОбменаДанными=Путь+Имя;
	//КонецЕсли;
	Если Метаданные.Обработка("ОбменДаннымиОЛЕ").Выбран()=1 Тогда
		ОбработкаОбменДанными="Обработка.ОбменДаннымиОЛЕ#";
	Иначе
		ОбработкаОбменДанными="Обработка.ОбменДанными#";
	КонецЕсли;
	
	ПЕрем1=МОДПерем1;
	ПЕрем2=МОДПерем2;
	
	МОДПерем1=ТЛист;
	МОДПерем2=СостояниеПрогрессора;
	Док.Провести(); 
	
	МОДПерем1=ПЕрем1;
	МОДПерем2=ПЕрем2;
	
	ОбработкаОбменДанными=ПЕремИмяОбработки;
	НеРегистрироватьИзмененияМОД=0;
	ПроведениеПоАлгоритмуМОД=0;
КонецПроцедуры //ПровестиДокумент(Док)



Процедура ЗагрузитьСчет()
	Рез=ТЛист.SelectAttribut();
	Если Рез=1 Тогда
		Если ТЛист.GetAttributByName("ПланСчетов")=1 Тогда
			ПланСчетов=ПолучитьОбъект(ТЛист.AttributValue,0,0);
		КонецЕсли;
		Если ТЛист.GetAttributByName("КодСчета")=1 Тогда
			КодСчета=ТЛист.AttributValue;
		КонецЕсли;
		
		Если ТЛист.GetAttributByName("НаименованиеСчета")=1 Тогда
			НаименованиеСчета=ТЛист.AttributValue;
		КонецЕсли;
		Если ТЛист.GetAttributByName("ПризнакГруппы")=1 Тогда
			ПризнакГруппы=Число(ТЛист.AttributValue);
		КонецЕсли;
		Если ТЛист.GetAttributByName("ЗаданВКонфигурации")=1 Тогда
			ЗаданВКонфигурации=Число(ТЛист.AttributValue);
		КонецЕсли;
		Если ТЛист.GetAttributByName("Валютный")=1 Тогда
			Валютный=Число(ТЛист.AttributValue);
		КонецЕсли;
		Если ТЛист.GetAttributByName("Количественный")=1 Тогда
			Количественный=Число(ТЛист.AttributValue);
		КонецЕсли;
		Если ТЛист.GetAttributByName("Забалансовый")=1 Тогда
			Забалансовый=Число(ТЛист.AttributValue);
		КонецЕсли;
		Если ТЛист.GetAttributByName("Активный")=1 Тогда
			Активный=Число(ТЛист.AttributValue);
		КонецЕсли;
		
		Если НадоЗагружатьОбъект(КодСчета)=0 Тогда//может быть этот объект изменяли и мы , а  тогда надо проверить на приоритет загрузки
			Возврат;
		КонецЕсли;
		
		Счет=СоздатьОбъект("Счет");
		Счет.ИспользоватьПланСчетов(ПланСчетов);
		Найден=Счет.НайтиПоКоду(КодСчета);
		Если Найден=1 Тогда
			Если Счет.ЗаданВКонфигурации()=1 Тогда
				М_Сообщить("Счет "+Счет.Код+" "+Счет.Наименование+" задан в конфигураторе, поэтому загрузить нельзя !");
				Возврат;
			КонецЕсли;
			
			Если Счет.ЭтоГруппа()<>ПризнакГруппы Тогда
				М_Сообщить("Счет "+Счет.Код+" "+Счет.Наименование+" имеет разные признаки группы с периферийной базой, поэтому загрузить нельзя !");
				Возврат;
			КонецЕсли;
			
			//далее обновление .... 
		Иначе
			//здесь загружаем только новые
			Счет.Новый(ПризнакГруппы);
		КонецЕсли;
		
		
		
		Счет.Код=КодСчета;
		Счет.Наименование=НаименованиеСчета;
		
		Счет.Валютный=Валютный;
		Счет.Количественный=Количественный;
		Счет.Забалансовый=Забалансовый;
		Счет.Активный=Активный;
		
		Для А=1 По 5 Цикл
			Если ТЛист.GetAttributByName("ВидСубконто"+А)=1 Тогда
				Атрибут=ПолучитьОбъект(ТЛист.AttributValue,0,0);
				Счет.ВидСубконто(А,Атрибут);
			КонецЕсли;
			Если ТЛист.GetAttributByName("ТолькоОбороты"+А)=1 Тогда
				Счет.ТолькоОбороты(А,Число(ТЛист.AttributValue));
			КонецЕсли;
			Если ТЛист.GetAttributByName("УчетПоСумме"+А)=1 Тогда
				Счет.УчетПоСумме(А,Число(ТЛист.AttributValue));
			КонецЕсли;
			Если ТЛист.GetAttributByName("УчетПоВалютнойСумме"+А)=1 Тогда
				Счет.УчетПоВалютнойСумме(А,Число(ТЛист.AttributValue));
			КонецЕсли;
			Если ТЛист.GetAttributByName("УчетПоКоличеству"+А)=1 Тогда
				Счет.УчетПоКоличеству(А,Число(ТЛист.AttributValue));
			КонецЕсли;
		КонецЦикла;
		
		
		Счет.Записать();
		Если Найден=0 Тогда
			М_Сообщить("Создан и записан счет "+КодСчета+" "+НаименованиеСчета);
		Иначе
			М_Сообщить("Записан счет "+КодСчета+" "+НаименованиеСчета);
		КонецЕсли;
		МиграцияИзменений(ВыбрБаза,Счет.Код,94,ЗначениеВСтроку(Счет),РабочДата,РабочДата);
	КонецЕсли;
КонецПроцедуры //ЗагрузитьСчет


//_____________________________________________________________________________
Процедура ЗагрузитьКонстанту()
	Перем УстановитьТип,ЕстьЗначение;
	Рез=ТЛист.SelectAttribut();
	Если Рез=1 Тогда
		Реквизит=ТЛист.Vid;
		Если НадоЗагружатьОбъект(Реквизит)=0 Тогда//может быть этот объект изменяли и мы , а  тогда надо проверить на приоритет загрузки
			Возврат;
		КонецЕсли;
		Периодический=Число(Метаданные.Константа(Реквизит).Периодический);
		Рез=ТЛист.GetAttribut();
		Если ТЛист.IsLoad()=0 Тогда
			Возврат ;
		КонецЕсли;
		Если Рез=1 Тогда
			Атрибут=ПолучитьОбъект(ТЛист.AttributValue,УстановитьТип,ЕстьЗначение);
			Если УстановитьТип>0 Тогда
				Константа.НазначитьТип(Реквизит,МассивТипов1С[УстановитьТип]+"."+ТЛист.VidValue);
			КонецЕсли;
			
			Если ЕстьЗначение=1 Тогда
				Если Периодический=1 Тогда
					Спр=Константа.ПолучитьАтрибут(Реквизит);
					Спр.Установить(РабочДата,Атрибут);
				Иначе
					Константа.УстановитьАтрибут(Реквизит,Атрибут);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//загрузим все периодические реквизиты
		Дата1=РабочДата;
		Дата2=РабочДата;
		Если ТЛист.GetHistory()=1 Тогда
			ЗагрузитьИсторию(Реквизит,Дата1,Дата2);
		КонецЕсли;
		МиграцияИзменений(ВыбрБаза,Реквизит,95,Реквизит,Дата1,Дата2);
		М_Сообщить("Загружена константа "+Реквизит);
	КонецЕсли;
КонецПроцедуры


//_____________________________________________________________________________
//загрузить элемент справочника вместе с историей из элемента дерева по правилам обмена
Функция ЗагрузитьСправочник()
	Перем Спр,ИДД,Тип,ЕстьЗначение;
	Рез=ТЛист.SelectAttribut();
	Если Рез=1 Тогда
		ИДД=ТЛист.IDD;
		
		Если НадоЗагружатьОбъект(ИДД)=0 Тогда//может быть этот объект изменяли и в нашей базе, а  тогда надо проверить на приоритет загрузки
			Возврат 1;//Все О`Кей
		КонецЕсли;
		
		
		Вид=ТЛист.Vid;
		Спр=СоздатьОбъект("Справочник."+Вид);
		Спр.ИспользоватьДату(РабочДата);
		
		//определяем свойства справочника, заданные в текущей конфигурации
		Мета=Метаданные.Справочник(Вид);
		Подчиненность=Мета.Владелец.Выбран();
		КонтрольУникальности=Мета.КонтрольУникальности;
		
		
		
		//как будем идентифицировать: IDD, Код, Наименование, Реквизит ???
		Найден=Спр.НайтиПоРеквизиту("IDD",ИДД,1);
		ЗагружаемыйИДД=ИДД;//присваиваем глобальную переменную текущего загружаемого объекта
		
		Если Найден=0 Тогда 
			ТЛист.SelectAttribut();
			Рез=ТЛист.GetSynchronize();//Получаем из выборки значение синхронизации
			Если Рез=1 Тогда
				ТЛист.SelectAttribut();//Обнуляем выборку - т.к. цикл будет организован ниже
				Если Подчиненность=1 Тогда //если данный справочник имеет владельца
					Если ТЛист.GetAttributByName("Владелец")=0 Тогда
						Сообщить("Внимание: вероятно неправильно настроены правила загрузки или выгрузки справочника "+Вид+" в базе "+ВыбрБаза,"!");
						Сообщить("        : загружаемый пакет должен иметь реквизит Владелец ");
						Возврат 1;
					КонецЕсли;
					Владелец=ПолучитьОбъект(ТЛист.AttributValue,Тип,ЕстьЗначение);
					
					Если ЕстьЗначение=-1 Тогда//Вообще ничего нет
						Сообщить("Внимание: вероятно неправильно настроены правила загрузки или выгрузки справочника "+Вид+" в базе "+ВыбрБаза,"!");
						Сообщить("        : загружаемый пакет должен иметь непустое значение реквизита Владелец ");
						Возврат 1;
					ИначеЕсли ЕстьЗначение=0 Тогда
					    Возврат 0;//Значит надо перегрузить 
					КонецЕсли;
					Спр.ИспользоватьВладельца(Владелец);
				КонецЕсли;
				
				
				Пока ТЛист.GetSynchronize()=1 Цикл
					ИмяИДРеквизита=ТЛист.AttributName;
					Атрибут=ПолучитьОбъект(ТЛист.AttributValue,Тип,ЕстьЗначение);
					Если ЕстьЗначение=0 Тогда
					    Продолжить;
					КонецЕсли;
					
					Если ИмяИДРеквизита="Наименование" Тогда
						Найден=Спр.НайтиПоНаименованию(Атрибут,Подчиненность,1);
					ИначеЕсли ИмяИДРеквизита="Код" Тогда
						Найден=Спр.НайтиПоКоду(Атрибут,Подчиненность);
					Иначе
						Найден=Спр.НайтиПоРеквизиту(ИмяИДРеквизита,Атрибут,1-Подчиненность);
					КонецЕсли;
					Если Найден=0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		
		//Определяем специальные реквизиты по умолчанию
		ЭтоГруппа=0;
		ПомеченНаУдаление=0;
		Удален=0;
		
		//проверяем блокировку объекта
		Если Найден=1 Тогда
			Если Спр.Блокировка(1)=0 Тогда    //сначала заблокируем
				Сообщить("Справочник "+Вид+" "+Спр.Наименование+" код "+Спр.Код+" заблокирован т.е. открыт  пользователем.");
				Сообщить("Закройте указанный выше справочник и повторите загрузку ...");
				Возврат -1;//Выход из загрузки
			КонецЕсли;
			Спр.Блокировка(0);              //а теперь разблокируем
			ПомеченНаУдаление=Спр.ПометкаУдаления();
			ЭтоГруппа=Спр.ЭтоГруппа();
			
			//проверяем нало ли заменять старый IDD объекта на новый
			Если НеИзменятьИДПриЗагрузке=1 Тогда
				Если Спр.IDD<>ИДД Тогда
					//после загрузки, этому объекту вернем
					//старое значение и зарегистрируем его как измененный
					СписокИзмененияИД.ДобавитьЗначение(Спр.ТекущийЭлемент(),Спр.IDD);
				КонецЕсли;
			КонецЕсли;
			Спр.IDD=ИДД;
		Иначе
			//если не найден, то создаем новый справочник
			Если Сокрлп(ИДД)="" Тогда
				ИДД=ПолучитьУникальныйIDD();//присвоим новый ИДД
			КонецЕсли;
			
			//предварительно определяем, что это: группа или элемент
			Если ТЛист.GetAttributByName("#ЭтоГруппа")=1 Тогда
				ЭтоГруппа=Число(ТЛист.AttributValue);
			КонецЕсли;
			
			//итак создаем
			Если ЭтоГруппа=0 Тогда
				глСоздатьНовыйОбъект(Спр);
			Иначе
				Попытка
					глСоздатьНовуюГруппу(Спр);
				Исключение
					Сообщить("Ошибка на "+Спр.Вид());
					глСоздатьНовуюГруппу(Спр); //обратитесь к разработчику !!
				КонецПопытки;
			КонецЕсли;
			Спр.IDD=ИДД;
		КонецЕсли;
		
		
		БылКод=Спр.Код;
		Если Найден=0 Тогда
			БылКод="***такого кода нет***";
		КонецЕсли;
		
		
		Если ТЛист.GetAttributByName("#Удален")=1 Тогда
			Удален=Число(ТЛист.AttributValue);
		КонецЕсли;
		
		Если ТЛист.GetAttributByName("#ПомеченНаУдаление")=1 Тогда
			ПомеченНаУдаление=Число(ТЛист.AttributValue);
		КонецЕсли;
		
		
		Результат=ЗагрузитьСтрокуДанных(Спр);
		Если ТЛист.IsLoad()=0 Тогда
			Возврат 1;//Пользователь запретил загружать
		КонецЕсли;
		
		Если Удален=1 Тогда
			Если Найден=1 Тогда
				Сообщить("Удаляется справочник "+Вид+"  "+Спр.Наименование+" с кодом "+Спр.Код+" (IDD="+ИДД+")");
				Если Спр.НайтиЭлемент(Спр.ТекущийЭлемент())=1 Тогда
					Спр.Удалить(1);
				КонецЕсли;
			КонецЕсли;
			Возврат 1;//Все О`Кей
		КонецЕсли;
		
		Если Подчиненность=1 Тогда //для подчиненных справочников должен быть выбран владелец
			Если Спр.Владелец.Выбран()=0 Тогда
				Возврат 0;//Надо перезагрузить
			КонецЕсли;
		КонецЕсли;
		

		//проверка корректности кода !!!
		БылоИзменениеКода=0;
		Если КонтрольУникальности=1 Тогда
			ЗагружКод=Сокрлп(Спр.Код);
			Если БылКод<>ЗагружКод Тогда
				НовыйКод=Сокрлп(СоздатьНовыйКод(Вид,Спр,Подчиненность,Мета));
				Спр.Код=НовыйКод;
				Если РегистрацияПриЗагрузке=1 Тогда
					Если ЗагружКод<>НовыйКод Тогда//т.е. присвоили новый номер
						БылоИзменениеКода=1;//Зарегистрируем изменение после записи
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		
		
		Если ПриЗаписиСправочника(Спр)=0 Тогда
			Возврат 1;//Все О`Кей, просто пользователь в своей обработке запретил записывать
		КонецЕсли;
		
		
		//Записываем
		попытка
			Спр.Записать();
		Исключение
			Сообщить(ОписаниеОшибки(),"!!!");
			Сообщить("Ошибка в справочнике "+Вид+" "+Спр.Наименование+" с кодом "+Спр.Код+" (IDD="+Спр.IDD+", Владелец="+Спр.Владелец+", группа="+Спр.Родитель+")");
			Возврат -1;//Прерывание загрузки
		КонецПопытки;
		

		Если Спр.Выбран()=0 Тогда//на всякие пожарные проверяем позиционирование на текущем элементе
			Спр.НайтиПоРеквизиту("IDD",ИДД,1);
		КонецЕсли;
		
		
		//Если код изменился, то смотрим надо ли регистрировать изменение
		Если БылоИзменениеКода=1 Тогда
			НеРегистрироватьИзмененияМОД=0;
			ПриИзмененииОбъекта(Спр,Спр,РабочДата);//регистрируем для миграции во все базы - в т.ч. и обратно
		КонецЕсли;


		//если документ пришел из периферийной базы помеченным на удаление - то этот факт
		//надо зафиксировать т.к. пользователь может воспользоваться процедурой "Удаление помеченных объектов"
		Если ПомеченНаУдаление=1 Тогда
			ПриУдаленииОбъекта(Спр.ТекущийЭлемент());
		КонецЕсли;
		
		
		
		Если ПомеченНаУдаление=1 Тогда //надо поставить если не стоит пометка
			Если Спр.ПометкаУдаления()=0 Тогда
				Спр.Удалить(0);//ставим пометку
			КонецЕсли;
		Иначе
			Если Спр.ПометкаУдаления()=1 Тогда //надо снять если стоит пометка
				Спр.СнятьПометкуУдаления();
			КонецЕсли;
		КонецЕсли;
		
		//загрузим все периодические реквизиты
		Дата1=РабочДата;
		Дата2=РабочДата;
		Пока ТЛист.GetHistory()=1 Цикл
			Реквизит=ТЛист.AttributName;
			//выгружаем список периодических реквизитов
			Использование=Мета.Реквизит(Реквизит).Использование;
			//определяем для какого типа справочника нельзя использовать этот реквизит
			//цифра 0 - означает не использовать для элемента
			//цифра 1 - означает не использовать для группы
			//цифра 2 - означает использование для всех типов
			НеИспользование=?(Использование="ДляЭлемента",1,?(Использование="ДляГруппы",0,2));
			Если Спр.ЭтоГруппа()<>НеИспользование Тогда
				Рез=ЗагрузитьИсторию(Реквизит,Дата1,Дата2,Спр);
				Если Рез=0 Тогда
				    Возврат 0;//Не загружена история - надо перезагрузить
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		
		МиграцияИзменений(ВыбрБаза,ИДД,11,Вид,Дата1,Дата2);
		
		
		Если ОбработкаПримера=1 Тогда
			Если ТипЗначения(Спр)=11 Тогда
				МОДПерем1.ДобавитьЗначение(Спр.ТекущийЭлемент());
			КонецЕсли;
		КонецЕсли;
		
		Если Результат=1 Тогда
			Если Найден=0 Тогда
				М_Сообщить("Создан и записан справочник "+Вид+" "+Спр.Наименование+" с кодом "+Спр.Код);
			Иначе
				М_Сообщить("Записан справочник "+Вид+" "+Спр.Наименование+" с кодом "+Спр.Код);
			КонецЕсли;	
		Иначе
			М_Сообщить("Частичная загрузка справочника "+Вид+" "+Спр.Наименование+" с кодом "+Спр.Код);
		КонецЕсли;
	Возврат Результат;
	КонецЕсли;	
	Возврат 1;
КонецФункции //ЗагрузитьСправочник






//_____________________________________________________________________________
//загрузить документ вместе с историей из элемента дерева по правилам обмена
Функция ЗагрузитьДокумент()
	Перем Док,ИДД,Тип,ЕстьЗначение;
	Рез=ТЛист.SelectAttribut();
	Если Рез=1 Тогда
		ИДД=ТЛист.IDD;

		Если НадоЗагружатьОбъект(ИДД)=0 Тогда//может быть этот объект изменяли и в нашей базе, а  тогда надо проверить на приоритет загрузки
			Возврат 1;//Все О`Кей
		КонецЕсли;

		Вид=ТЛист.Vid;
		Движения=ТЛист.GetMotion();
		Док=СоздатьОбъект("Документ");
		
		//определяем свойства документа, заданные в текущей конфигурации
		Мета=Метаданные.Документ(Вид);
		РазрешитьПроведение=Мета.РазрешитьПроведение;
		КонтрольУникальности=Мета.КонтрольУникальности;
		
		//как будем идентифицировать: IDD, НомерДок, Реквизит ???
		Найден=НайтиДокументПоIDD(Док,ИДД);
		ЗагружаемыйИДД=ИДД;//присваиваем глобальную переменную текущего загружаемого объекта
		
		Если Найден=0 Тогда
			Рез=ТЛист.GetSynchronize();//Получаем из выборки значение синхронизации
			Если Рез=1 Тогда
				ТЛист.SelectAttribut();//Обнуляем выборку - т.к. цикл будет организован ниже
				
				Пока ТЛист.GetSynchronize()=1 Цикл
					ИмяИДРеквизита=ТЛист.AttributName;
					Атрибут=ПолучитьОбъект(ТЛист.AttributValue,Тип,ЕстьЗначение);
					Если ЕстьЗначение=0 Тогда
						Продолжить;
					КонецЕсли;
					
					Если ИмяИДРеквизита="НомерДок" Тогда
						ДатаДок=РабочДата;
						Если ТЛист.GetAttributByName("НомерДок")=0 Тогда
							ДатаДок=ПолучитьОбъект(ТЛист.AttributValue,Тип,ЕстьЗначение);
							Если ЕстьЗначение<>1 Тогда
								ДатаДок=РабочДата;
							КонецЕсли;
						КонецЕсли;
						
						Нумератор=Мета.Нумератор; // Получим нумератор
						Если Нумератор.Выбран()=1 Тогда
							ИдентНумератора=Нумератор.Идентификатор;
						Иначе
							ИдентНумератора=Вид;
						КонецЕсли;
						Найден=Док.ВыбратьПоНомеру(Атрибут,ДатаДок,ИдентНумератора);
						Док.ПолучитьДокумент();
					Иначе
						Найден=Док.ВыбратьПоЗначению(,,ИмяИДРеквизита,Атрибут);
						Док.ПолучитьДокумент();
					КонецЕсли;
					Если Найден=0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		
		//Определяем реквизиты по умолчанию
		Удален=0;
		Проведен=0;
		ВремяДокумента=ТекущееВремя();
		ПомеченНаУдаление=0;
		ДатаДок=РабочДата;
		
		Если Найден=1 Тогда
			Если ИДД="" Тогда
				ИДД=Док.IDD;
			КонецЕсли;
			//итак документ найден : делаем проверку на совпадение видов
			Если Док.Вид()<>Вид Тогда
				Сообщить("ВНИМАНИЕ: загружаемый документ "+Вид+" с IDD = "+ИДД+" уже есть в нашей базе, но другого вида : "+Док.Вид()+"   - не загружаем !!","!!!");
				Возврат 1;//Все О`Кей - просто не загружаем !!!
			КонецЕсли;
			
			
			
			//проверяем блокировку объекта
			Если Док.Блокировка(1)=0 Тогда    //сначала заблокируем
				Сообщить("Документ "+Вид+" "+Док.НомерДок+" от "+Док.ДатаДок+" заблокирован т.е. открыт пользователем.");
				Возврат -1;//Ошибка - прекращаем загрузку
			КонецЕсли;
			Док.Блокировка(0);              //а теперь разблокируем
			
			ПомеченНаУдаление=Док.ПометкаУдаления();
			Проведен=Док.Проведен();
			ВремяДокумента=Док.ПолучитьВремя();
			ДатаДок=Док.ДатаДок;
			
			
			//заменяем старый IDD объекта на новый !!
			Если НеИзменятьИДПриЗагрузке=1 Тогда
				Если Док.IDD<>ИДД Тогда
					//после загрузки, этому объекту вернем
					//старое значение и зарегистрируем его как измененный
					СписокИзмененияИД.ДобавитьЗначение(Док.ТекущийДокумент(),Док.IDD);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ИДД="" Тогда
				ПолучитьУникальныйIDD();//присвоим новый ИДД
			КонецЕсли;
			//если не найден, то создаем новый документ
			Док=СоздатьОбъект("Документ."+Вид);
			глСоздатьНовыйОбъект(Док);
		КонецЕсли;
		Док.IDD=ИДД;
		
		
		БылНомер=Док.НомерДок;
		Если Найден=0 Тогда
			БылНомер="***такого номера нет****";
		КонецЕсли;
		
		//загружаем реквизиты шапки
		Если ТЛист.GetAttributByName("#Удален")=1 Тогда
			Удален=Число(ТЛист.AttributValue);
		КонецЕсли;
		


		Если ТЛист.GetAttributByName("#ПомеченНаУдаление")=1 Тогда
			ПомеченНаУдаление=Число(ТЛист.AttributValue);
		КонецЕсли;
		
		Если ТЛист.GetAttributByName("#ДатаДок")=1 Тогда
			ДатаДок=Дата(ТЛист.AttributValue);
		КонецЕсли;
		Если ТЛист.GetAttributByName("#ВремяДокумента")=1 Тогда
			ВремяДокумента=ТЛист.AttributValue;
		КонецЕсли;
		Если ТЛист.GetAttributByName("#Проведен")=1 Тогда
			Проведен=Число(ТЛист.AttributValue);
		КонецЕсли;
		
		Результат=ЗагрузитьСтрокуДанных(Док);


		Если ТЛист.IsLoad()=0 Тогда
			Возврат 1;//Не выполнились условия загрузки
		КонецЕсли;

		
		Если Удален=1 Тогда
			Если Найден=1 Тогда
				Сообщить("Удаляется документ "+Вид+" "+Док.НомерДок+" "+Док.ДатаДок);
				Если Док.НайтиДокумент(Док.ТекущийДокумент())=1 Тогда
					Док.Удалить(1);
				КонецЕсли;
			КонецЕсли;
			Возврат 1;//Все ОКей
		КонецЕсли;

		
		
		
		
		//загружаем табличную часть
		
		//удаляем старую табличную часть лишь в случае необходимости - т.е. кол. строк не совпадает
		КоличествоСтрок=Док.КоличествоСтрок();
		НоваяСтрока=1;//Создаем новые строки
		Если КоличествоСтрок>0 Тогда
			Если КоличествоСтрок=ТЛист.CountLine() Тогда
				НоваяСтрока=0;//Старые строки не удаляем
			Иначе
				Пока Док.КоличествоСтрок() <> 0 Цикл
					Док.ВыбратьСтроки();
					Док.ПолучитьСтроку();
					Док.УдалитьСтроку();
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		
		Если ТЛист.SelectTable()=1 Тогда
			Если НоваяСтрока=1 Тогда
				Док.ВыбратьСтроки();
			КонецЕсли;
			Пока ТЛист.SelectTableAttribut()=1 Цикл
				Если НоваяСтрока=1 Тогда
					Док.НоваяСтрока();
				Иначе
					Док.ПолучитьСтроку();
				КонецЕсли;
				Рез=ЗагрузитьСтрокуДанных(Док);
				Если ТЛист.IsLoad()=0 Тогда
					Док.УдалитьСтроку();//Эту строку не загружаем !!!
				КонецЕсли;
				Если Рез=0 Тогда
					Результат=0;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;


		//Блок проверки корректности номера документа
		ЗагружНомер=Сокрлп(Док.НомерДок);
		БылоИзменениеНомера=0;
		Если (КонтрольУникальности=1) ИЛИ (ЗагружНомер="") Тогда
			Если ЗагружНомер<>БылНомер Тогда
				НовыйНомер=Сокрлп(СоздатьНовыйНомер(Вид,ДатаДок,Док.ТекущийДокумент(),Док.НомерДок));
				Док.НомерДок=НовыйНомер;
				Если РегистрацияПриЗагрузке=1 Тогда
					Если ЗагружНомер<>НовыйНомер Тогда//т.е. присвоили новый номер
						БылоИзменениеНомера=1;//Зарегистрируем изменение после записи
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		

		
		//Вызов предопределенной процедуры пользователя
		Если ПриЗаписиДокумента(Док)=0 Тогда
			Возврат 1;//значит пользователь в своей обработке запретил записывать документ
		КонецЕсли;
		
		
		//Запись объекта
		Попытка
			Док.Записать();
		Исключение
			Сообщить(ОписаниеОшибки(),"!!!");
			Сообщить("Ошибка при записи документа "+Вид+", "+Док.НомерДок+" от "+Док.ДатаДок+", КонтрольУникальности="+КонтрольУникальности);
			Возврат -1;//Ошибка - конец загрузки
		КонецПопытки;
		


        //Проверка - надо ли регистрировать изменение номера (если оно было)
		Если БылоИзменениеНомера=1 Тогда
			НеРегистрироватьИзмененияМОД=0;
			ПриИзмененииОбъекта(Док,Док,Док.ДатаДок);//регистрируем для миграции во все базы - в т.ч. и обратно
		КонецЕсли;

		
		//если документ пришел из периферийной базы помеченным на удаление - то этот факт
		//надо зафиксировать т.к. пользователь может воспользоваться процедурой "Удаление помеченных объектов"
		Если (ПомеченНаУдаление=1)И(Док.ПометкаУдаления()=0) Тогда 
			ПриУдаленииОбъекта(Док.ТекущийДокумент());
		КонецЕсли;
		
		//Если документ проведени, то надо сделать его непроведенным
		Если Док.Проведен()=1 Тогда
			Попытка
				НеРегистрироватьИзмененияМОД=1;//т.е. не фиксируем в журнале изменений
				ПроведениеПоАлгоритмуМОД=1;
				Док.СделатьНеПроведенным();
				НеРегистрироватьИзмененияМОД=0;
				ПроведениеПоАлгоритмуМОД=0;
				Если Док.Проведен()=1 Тогда
					Сообщить("Ошибка: документ нельзя сделать непроведенным "+Док.Вид()+" "+Док.НомерДок+" "+Док.ДатаДок);
					Возврат -1;//Ошибка - конец загрузки
				КонецЕсли;
			Исключение
				НеРегистрироватьИзмененияМОД=0;//Попытка отменить проведение оказалась неудачной
				//следовательно надо сделать аналогичные вещи в периферийных базах
				//чтобы базы были идентичными
				ПриИзмененииОбъекта(Док.ТекущийДокумент(),Док.ТекущийДокумент(),Док.ДатаДок,1);
				ПроведениеПоАлгоритмуМОД=0;
				Сообщить("Ошибка при отмене проведения документа "+Док.Вид()+" "+Док.НомерДок+" "+Док.ДатаДок);
				Возврат -1;//Ошибка - конец загрузки
			КонецПопытки;
		Иначе
			Если Док.ПометкаУдаления()=1 Тогда
				Док.СнятьПометкуУдаления();
			КонецЕсли;
		КонецЕсли;
		
		
		
		//Устанавливаем время
		Док.УстановитьВремя(Число(Сред(ВремяДокумента,1,2)),Число(Сред(ВремяДокумента,4,2)),Число(Сред(ВремяДокумента,7,2)));

		//Изменяем дату документа
		Док.ДатаДок=ДатаДок;
		Док.Записать();
		
		//Отрабатываем признак пометки удаления и признак проведения документа (т.е. проводим)
		Если (Проведен=0)ИЛИ(ПомеченНаУдаление=1) Тогда
			Если ПомеченНаУдаление=1 Тогда
				Если Док.ПометкаУдаления()=0 Тогда
					Док.Удалить(0);
				КонецЕсли;
			Иначе
				Если Док.ПометкаУдаления()=1 Тогда
					Док.СнятьПометкуУдаления();
				КонецЕсли;
			КонецЕсли;
			
			//для документа типа операция загружаем проводки
		ИначеЕсли Проведен=1 Тогда  
			Если Движения=1 Тогда
				ПровестиДокумент(Док,1);
			Иначе
				ПровестиДокумент(Док,0);//Проводим без движений т.е. перепрводим при загрузке
				Результат=1;
			КонецЕсли;
		КонецЕсли;
		
		//если это операция, то у него реквизит проведен всегда = 0 и надо загрузить проводки
		Если Вид=ДокументОперации Тогда
			Если Движения=1 Тогда
				ПроведениеДокумента(Док,ТЛист);
			Иначе
				//убиваем все проводки !!
				Опер=СоздатьОбъект("Операция");
				Опер.НайтиОперацию(Док);
				Пока Опер.КоличествоПроводок()>0 Цикл
					Опер.ВыбратьПроводки();
					Опер.ПолучитьПроводку();
					Опер.УдалитьПроводку();
				КонецЦикла;  
				Опер.Записать();
				Опер=0;
				Док.НайтиДокумент(Док.ТекущийДокумент());
			КонецЕсли;
		КонецЕсли;
		
		//Сиграция в другие базы
		МиграцияИзменений(ВыбрБаза,ИДД,12,Вид,РабочДата,РабочДата);
		
		//Служебная функция
		Если ОбработкаПримера=1 Тогда
			Если ТипЗначения(Док)=12 Тогда
				МОДПерем1.ДобавитьЗначение(Док.ТекущийДокумент());
			КонецЕсли;
		КонецЕсли;
		
		//Сообщаем о результатах и выход
		Если Результат=1 Тогда
			Если Найден=0 Тогда
				М_Сообщить("Создан и записан документ "+Вид+" № "+Док.НомерДок+" от "+Док.ДатаДок);
			Иначе
				М_Сообщить("Записан документ "+Вид+" № "+Док.НомерДок+" от "+Док.ДатаДок);
			КонецЕсли;	
		Иначе
			М_Сообщить("Частичная загрузка документа "+Вид+" № "+Док.НомерДок+" от "+Док.ДатаДок);
		КонецЕсли;
		Возврат Результат;	
	КонецЕсли;
	Возврат 1;	
КонецФункции  //ЗагрузитьДокумент


       











Процедура ПросмотрВеткиДерева(Дерево,Таб,КолТаб=0,ВыводитьСостояние=0)
	Размер=Дерево.length;
	
	Для А=0 По Размер-1 Цикл  
		Если ВыводитьСостояние=1 Тогда
		    Состояние("Выведено "+Цел(100*А/Размер)+" %");
		КонецЕсли;
		Элемент=Дерево.Item(А);
		Тип=Элемент.NodeType;
		Если Тип=1 Тогда
			//Сообщить(Таб+Элемент.nodeName+"  "+Элемент.nodeValue+СтрАтр);
			ИмяУзла=Элемент.nodeName;
			ЗначУзла=Элемент.nodeValue;
			ЗначПредставление=Элемент;
			Таб.ВывестиСекцию("Строка|Начало");
			Для С=1 По КолТаб Цикл
			Таб.ПрисоединитьСекцию("Пусто|Значение");
			КонецЦикла;
			Таб.ПрисоединитьСекцию("Строка|Значение");
			
			КоллекцияАтрибутов=Элемент.Attributes;
			КолАтрибутов=КоллекцияАтрибутов.length;
			Если КолАтрибутов>0 Тогда
				Для Б=0 По КолАтрибутов-1 Цикл
					Атрибут=КоллекцияАтрибутов.Item(Б);
					ИмяАтрибута=Атрибут.nodeName;
					ЗначАтрибута=Атрибут.nodeValue;
					Таб.ПрисоединитьСекцию("Строка|Атрибут");
				КонецЦикла;
			КонецЕсли;
			
			
			//Если ФлРаскрывать=1 Тогда
				ПросмотрВеткиДерева(Элемент.ChildNodes,Таб,КолТаб+1,ВыводитьСостояние-1);
			//КонецЕсли;
		Иначе
			Если Тип=3 Тогда
			ИмяУзла="";
			Иначе
			ИмяУзла=Элемент.nodeName+":";
			КонецЕсли;
			ЗначУзла=Элемент.nodeValue;
			ЗначПредставление=Элемент;
			Таб.ВывестиСекцию("Текст|Начало");
			Для С=1 По КолТаб Цикл
			Таб.ПрисоединитьСекцию("Пусто|Значение");
			КонецЦикла;
			Таб.ПрисоединитьСекцию("Текст|Значение");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры






//_____________________________________________________________________________
Функция НовыйПакет(ВыгрБаза,ИмяТекстовогоФайла)
	ТЛист.BaseIDD=ВыгрБаза.IDD;
	ТЛист.CurrentIDD=Константа.IDD;
	Попытка
		ПарольИдентификатораМОД=Сокрлп(Константа.ПарольИдентификатораМОД);
	Исключение
		ПарольИдентификатораМОД="";	
	КонецПопытки;

	Если ПарольИдентификатораМОД="" Тогда
		ПарольИдентификатораМОД=Сокрлп(Константа.ПарольМОД);	
	КонецЕсли;

	Если ПарольИдентификатораМОД<>"" Тогда
		ТЛист.Password=ПарольИдентификатораМОД;
	Иначе
		Сообщить("Не введен пароль идентификатора - компонента работает в демонстрационном режиме");
	КонецЕсли;
	ТЛист.debug=ФлагДебаг;
	ТЛист.DataVersion="1.05";
	ТЛист.Description=ВыгрБаза.Описание;
	ВыгрПодтверждениеЗагрузки=Число(НомерПакетаЗагрузки)-1;
	Если ВыгрПодтверждениеЗагрузки<0 Тогда
	    ВыгрПодтверждениеЗагрузки=0;
	КонецЕсли;
	ТЛист.LoadedPackage=Строка(ВыгрПодтверждениеЗагрузки);
	ТЛист.TextOutPut=ТекстВыгрузки;
	Если ВыгружатьШапкуПакетовОтдельно=1 Тогда
		ТЛист.HeaderName=ИмяФайлаШапки;
	Иначе
		ТЛист.HeaderName="";
	КонецЕсли;
	Возврат ТЛист.New(ИмяТекстовогоФайла);
КонецФункции //НовыйПакет
























//******************************XML  вставка******************************
//******************************XML  вставка******************************
//******************************XML  вставка******************************











//Просмотр любого dbf-файла
Процедура Просмотр(ИмяБазы,ЧислоПросмотраСтрок=0)
	Перем Название,Тип,Длина,Точность;
	Перем БазаДБФ;
	Перем Выр,Уник,Убыв,Фильт;
	Номер=0;
	ФайлЦДХ=Лев(ИмяБазы,Найти(ИмяБазы,"."))+"cdx";
	БазаДБФ=СоздатьОбъект("XBase");
	//	БазаДБФ.КодоваяСтраница(КодСтр);
	Если ФС.СуществуетФайл(ФайлЦДХ)=1 Тогда
		БазаДБФ.ОткрытьФайл(ИмяБазы,ФайлЦДХ);
	Иначе
		БазаДБФ.ОткрытьФайл(ИмяБазы);
	КонецЕсли;
	Если БазаДБФ.Открыта()=0 Тогда
		Сообщить("Ошибка - база: "+ИмяБазы+" не открыта !");
		Возврат;
	КонецЕсли;
	ТекИндекс="";
	Таб=СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("ТаблицаДБФ");
	БазаДБФ.Первая();
	Если БазаДБФ.ВКонце()=0 Тогда
		Для А=1 по БазаДБФ.КоличествоПолей() Цикл
			БазаДБФ.ОписаниеПоля(А,Название,Тип,Длина,Точность);
			Если А=1 Тогда
				Таб.ВывестиСекцию("Описание|Столбик");
			Иначе
				Таб.ПрисоединитьСекцию("Описание|Столбец");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Прогрессор(0,?(ЧислоСтрокДБФ=0,БазаДБФ.КоличествоЗаписей(),ЧислоСтрокДБФ),0,"Вывод строк");
	Пока БазаДБФ.ВКонце()=0 Цикл
		Номер=Номер+1;
		Для А=1 по БазаДБФ.КоличествоПолей() Цикл
			Данные=БазаДБФ.ПолучитьЗначениеПоля(А);
			Если А=1 Тогда
				Таб.ВывестиСекцию("Строка|Столбик");
			Иначе
				Таб.ПрисоединитьСекцию("Строка|Столбец");
			КонецЕсли;
		КонецЦикла;
		БазаДБФ.Следующая();
		Если ЧислоПросмотраСтрок<>0 Тогда
			Если Номер>=ЧислоПросмотраСтрок Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		Прогрессор(БазаДБФ.НомерЗаписи());
	КонецЦикла;
	Таб.ВывестиСекцию("ШапкаИндекса");
	Для А=1 По БазаДБФ.КоличествоИндексов() Цикл
		БазаДБФ.ОписаниеИндекса(А,Название,Выр,Уник,Убыв,Фильт);
		Таб.ВывестиСекцию("Индекс");
		Ош=БазаДБФ.КодОшибки();
		Если Ош<>0 Тогда
			Сообщить("Ошибка № "+Ош);
		КонецЕсли;
	КонецЦикла;
	БазаДБФ.ЗакрытьФайл();
	Прогрессор(0);
	Таб.Опции(0,0,2,1);
	Таб.Показать("База_"+ИмяБазы,"");
КонецПроцедуры







//_____________________________________________________________________________
//Процедура для облегчения написания кода транзакции dbf-х файлов
Процедура КопироватьФайлДБФ(ИзФайла,ВФайл)
	Фс.УдалитьФайл(КаталогБазыДанных()+ВФайл+".cdx");
	Фс.УдалитьФайл(КаталогБазыДанных()+ВФайл+".dbf");//потому что вдруг такого вообще нет !!
	ФС.КопироватьФайл(КаталогБазыДанных()+ИзФайла+".dbf",КаталогБазыДанных()+ВФайл+".dbf",0);
	ФС.КопироватьФайл(КаталогБазыДанных()+ИзФайла+".cdx",КаталогБазыДанных()+ВФайл+".cdx",0);
КонецПроцедуры //КопироватьФайлДБФ




//_____________________________________________________________________________
Функция ПолучитьУникальныйIDD()
	УникальныйИДД=УникальныйИДД+1;
	Возврат IDD+прав("0000000000"+СокрП(УникальныйИДД),10);
КонецФункции //
//_____________________________________________________________________________












//_____________________________________________________________________________
Процедура ОбработатьСкрипт(ИмяФайлаНач,ИмяФайлаКон)
	//делаем из файла скрипта-источника файл скрипт-рабочий
	//такие скрипты нужны для большей гибкости вызова внешних программ
	Если ФС.СуществуетФайл(ИмяФайлаНач)=0 Тогда
		М_Сообщить("Файл шаблон скрипта "+ИмяФайлаНач+" не найден");
		Возврат;
	КонецЕсли;
	
	Если Сокрлп(ИмяФайлаКон)="" Тогда
		М_Сообщить("Не задано имя рабочего файла скрипта !");
		Возврат;
	КонецЕсли;
	
	ТКон=СоздатьОбъект("Текст");
	ТКон.КодоваяСтраница(1);
	ТНач=СоздатьОбъект("Текст");
	ТНач.КодоваяСтраница(1);
	ТНач.Открыть(ИмяФайлаНач);
	Для А=1 По ТНач.КоличествоСтрок() Цикл
		Стр=ТНач.ПолучитьСтроку(А);
		Если Найти(Стр,"[")<>0 Тогда
			Стр=Шаблон(Стр);
		КонецЕсли;
		ТКон.ДобавитьСтроку(Стр);
	КонецЦикла;
	ТКон.Записать(ИмяФайлаКон);
КонецПроцедуры //ОбработатьСкрипт




//***********************************************************************************
//Собираем все файлы в кучу
//***********************************************************************************
Функция КопироватьВОднуБазу(Режим)
	Перем База1,База2;
	Хорошо=1;
	Если Режим="Изменения" Тогда
		ПодИмя="tran1";
	Иначе
		ПодИмя="tran3";
	КонецЕсли;
	Если ОткрытьФайлМОДПоИмени(База1,Режим,ПодИмя)<>1 Тогда
		Предупреждение("Ошибка открытия файла "+ПодИмя+". Возможно файл занят другим пользователем.
		|Повторите попытку через некоторое время !",10);
		Возврат 0;
	КонецЕсли;
	Для А=1 По 20 Цикл
		ИмяФ=КаталогБазыДанных()+ПодИмя+А+".dbf";
		ИмяCDX=КаталогБазыДанных()+ПодИмя+А+".cdx";
		Если (Сокрлп(ИмяФайлаБДМОД)<>Сокрлп(ИмяФ))
		И (Сокрлп(ИмяФайлаБДУдаленийМОД)<>Сокрлп(ИмяФ)) Тогда
			Если ФС.СуществуетФайл(ИмяФ)=1 Тогда
				База2=СоздатьОбъект("XBase");
				База2.ОткрытьФайл(ИмяФ);
				Фс.УдалитьФайл(ИмяCDX);
				М_Состояние("Копирование из:"+ИмяФ);
				Если База2.Открыта()=1 Тогда
					База2.Первая();
					Пока База2.ВКонце()=0 Цикл
						База1.Добавить();
						База1.IDD=База2.IDD;
						База1.TIP=База2.TIP;
						База1.VIDD=База2.VIDD;
						Если Режим="Изменения" Тогда
							База1.DATE=База2.DATE;
						КонецЕсли;
						База1.Записать();
						База2.Следующая();
					КонецЦикла;
					База2.ОчиститьФайл();
					База2.ЗакрытьФайл();
				Иначе
					Хорошо=0;
					М_Сообщить("Внимание dbf-файл с именем "+ПодИмя+А+".dbf заблокирована другим пользователем. Данные о его работе выгружаться не будут !");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	База1.ЗакрытьФайл();
	Возврат Хорошо;
КонецФункции
//_____________________________________________________________________________

Функция СоединитьФайлыИзмененийИУдалений()
	//Изменения
	Рез=КопироватьВОднуБазу("Изменения");
	//Удаления
	Рез=Рез+КопироватьВОднуБазу("Удаления");
	Рез=?(Рез=2,1,0);
	Возврат Рез;
КонецФункции //СоединитьФайлыИзмененийИУдалений

//_____________________________________________________________________________






//процедуры ФОРМЫ
//_____________________________________________________________________________
Процедура ПриУстановкеТипаВыборочно()//при выборочной выгрузке предоставить
	//возможность выбора любого документа и справочника
	Ном=ТипОбъектаВыборочно.ТекущаяСтрока();
	Если Ном=0 Тогда
		Возврат;
	КонецЕсли;
	Имя=ТипОбъектаВыборочно.ПолучитьЗначение(Ном);
	Если Имя="Справочник" Тогда
		Форма.ОбъектВыборочно.НазначитьТип("");
	КонецЕсли;
	Форма.ОбъектВыборочно.НазначитьТип(Имя);
	Форма.ОбъектВыборочноВладелец.Доступность(0);
	Если Лев(Имя,1)="С" Тогда//справочник
		ОбъектВыборочно.ВыборГруппы(1);
		Если Сокрлп(ОбъектВыборочно.Вид())<>"" Тогда
			Если ТипЗначения(ОбъектВыборочно.Владелец)<>11 Тогда
				Форма.ОбъектВыборочноВладелец.Доступность(0);
			Иначе
				НазначитьВид(ОбъектВыборочноВладелец,ОбъектВыборочно.Владелец.Вид());
				Форма.ОбъектВыборочноВладелец.НеИзменятьВид(1);
				Форма.ОбъектВыборочноВладелец.Доступность(1);
			КонецЕсли;
		Иначе
			ОбъектВыборочноВладелец="";
		КонецЕсли;
		Если ОбъектВыборочно.Выбран()=1 Тогда
			ОбъектВыборочноВладелец=ОбъектВыборочно.Владелец;
		КонецЕсли;
	ИначеЕсли Лев(Имя,1)="Д" Тогда//документ
		Форма.ОбъектВыборочноВладелец.Доступность(0);
		ОбъектВыборочноВладелец="";
	КонецЕсли;
КонецПроцедуры


//_____________________________________________________________________________
//при интеракт. выборе режима:  1)синхронизация; 2)за период; 3)выборочно
Процедура ПриУстановкеРежимаВыгрузки()
	
	Если РежимВыгрузки=1 Тогда//синхронизация
		Форма.ИспользоватьСлой("ВсеЗаПериод",0);
		Форма.ИспользоватьСлой("Выборочно",0);
	ИначеЕсли РежимВыгрузки=2 Тогда//за период
		Форма.ИспользоватьСлой("ВсеЗаПериод",1);
		Форма.ИспользоватьСлой("Выборочно",0);
	ИначеЕсли РежимВыгрузки=3 Тогда//выборочно
		Форма.ИспользоватьСлой("ВсеЗаПериод",1);
		Форма.ИспользоватьСлой("Выборочно",1);
		ПриУстановкеТипаВыборочно();
	КонецЕсли;
КонецПроцедуры

//_____________________________________________________________________________

Процедура СделатьВидимыми(Видим)//управление видимостью элементов диалога
	
	Форма.СписокПакетов.Доступность(Видим);
	Форма.РежимВыгрузки.Доступность(Видим);
	Форма.РежимВыгрузки2.Доступность(Видим);
	Форма.РежимВыгрузки3.Доступность(Видим);
	Форма.ДатаН.Доступность(Видим);
	Форма.ДатаК.Доступность(Видим);
	Форма.ТипОбъектаВыборочно.Доступность(Видим);
	Форма.ОбъектВыборочно.Доступность(Видим);
	Форма.ТекстВыгрузки.Доступность(Видим);
	//	Форма.ЗагружатьСОдинаковымиКодами.Доступность(Видим);
	//	Форма.СоздаватьНовоеНаименование.Доступность(Видим);
	//	Форма.ЗагружатьСОдинаковымиНомерами.Доступность(Видим);
	Если Видим=0 Тогда
		//		НомерПакета=0;
		//		НомерПакетаВыгрузки=0;
		РежимВыгрузки=0;
		ДатаН=Дата(0);
		ДатаК=Дата(0);
		ОбъектВыборочно="";
		ТекстВыгрузки="";
		ЗагружатьСОдинаковымиКодами=0;
		СоздаватьНовоеНаименование=0;
		ЗагружатьСОдинаковымиНомерами=0;
		ТекстЗагрузки="";
	КонецЕсли;
	
КонецПроцедуры

//_____________________________________________________________________________
Процедура ЕстьВыгрузкаЗагрузка()//при выборе флажков Выгрузка/Загрузка
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.УдалитьВсе();
	Форма.Закладки.ДобавитьЗначение("Общие","Общие");
	Если (Выгрузка=1)  Тогда
		Форма.Закладки.ДобавитьЗначение("Выгрузка");
	КонецЕсли;
	Если (Загрузка=1)  Тогда
		Форма.Закладки.ДобавитьЗначение("Загрузка");
	КонецЕсли;
	Форма.Закладки.ДобавитьЗначение("Инициализация","Инициализация");
	Форма.Закладки.ДобавитьЗначение("Настройка","Сервис");
	Форма.Закладки.ДобавитьЗначение("Подтверждение","Подтверждение");
	Форма.Закладки.ДобавитьЗначение("ОПрограмме","О программе");
КонецПроцедуры


//_____________________________________________________________________________

Процедура ЗаполнитьСписокПакетов(А1="",А2="")
	СписокПакетов.УдалитьВсе();
	Если МаксНомерПакетаВыгрузки<1 Тогда
		МаксНомерПакетаВыгрузки=1;
	КонецЕсли;
	//	Если База.Выбран()=1 Тогда
	НомП=Число(НомерПодтвержденногоПакетаЗагрузки);
	НомЗ=Число(МаксНомерПакетаВыгрузки);
	Если А1="" Тогда
		Ном1=НомП+1;
		Ном2=НомЗ;
	Иначе
		Ном1=А1;
		Ном2=А2;
	КонецЕсли;
	
	Если Ном2>НомЗ Тогда
		Ном2=НомЗ;
	КонецЕсли;
	
	Если Ном1<=НомП Тогда
		Ном1=НомП+1;
		//		Иначе
		//			СписокПакетов.ДобавитьЗначение(Ном1,"-меньше-");
	КонецЕсли;
	Если Ном1>Ном2 Тогда
		Ном1=Ном2;
	КонецЕсли;
	
	Для А=Ном1 По Ном2 Цикл
		Стр=А;
		Если (А>НомП)И(А<НомЗ) Тогда
			Стр=""+А+" ?";
		ИначеЕсли (А<=НомП) Тогда
			Стр=""+А+" +";
		КонецЕсли;
		СписокПакетов.ДобавитьЗначение(А,Стр);
	КонецЦикла;
	//Если Ном2<НомЗ Тогда
	//СписокПакетов.ДобавитьЗначение(Ном2,"-больше-");
	//КонецЕсли;
	Если А1="" Тогда
		Рез=СписокПакетов.НайтиЗначение(НомЗ);
		СписокПакетов.ТекущаяСтрока(?(Рез=0,1,Рез));
		НомерПакетаВыгрузки=НомЗ;
	КонецЕсли;
КонецПроцедуры //ЗаполнитьСписокПакетов

//_____________________________________________________________________________
Процедура ПриВыбореСпискаПакетов()
	А=СписокПакетов.ТекущаяСтрока();
	Если А=0 Тогда
		Возврат;
	КонецЕсли;
	Стр="";
	Зн=СписокПакетов.ПолучитьЗначение(А,Стр);
	Если Стр="-больше-" Тогда
		ЗаполнитьСписокПакетов(Зн,Зн+50);
		СписокПакетов.ТекущаяСтрока(2);
	ИначеЕсли Стр="-меньше-" Тогда
		ЗаполнитьСписокПакетов(Зн-50,Зн);
		СписокПакетов.ТекущаяСтрока(СписокПакетов.РазмерСписка()-1);
	КонецЕсли;
	НомерПакетаВыгрузки=Зн;
КонецПроцедуры //ПриВыбореСпискаПакетов()
//_____________________________________________________________________________

//_____________________________________________________________________________
Процедура ОчиститьКаталог(Путь,Маска="*.*")
	//процедура гарантированного возврата чистого каталога (если такого нет, то создается !!)
	Если ФС.СУществуетФайл(Путь)=1 Тогда
		//предварительно очищаем !!
		Имя=ФС.НайтиПервыйФайл(Путь+"\"+Маска);
		Пока Сокрлп(Имя)<>"" Цикл    
			Имя=ФС.НайтиСледующийФайл();  
			Если (Имя<>".")И(Имя<>"..") Тогда
				ФС.УдалитьФайл(Путь+"\"+Имя);
			КонецЕсли;
		КонецЦикла;
		//теперь каталог чист...
	Иначе
		ФС.СоздатьКаталог(Путь);
	КонецЕсли;
КонецПроцедуры //ОчиститьКаталог

//_____________________________________________________________________________
//_____________________________________________________________________________
Функция ПолучитьНомерПакетаВыгрузки(ТекБаза,Спр=0)
	//эта функция находит первый элемент в справочнике периферийных баз, с IDD = ТекБаза.IDD	
	//и вернет его следующий пакет выгрузки
	//основная цель это найти ведущий элемент, по которому ведется сквозная нумерация пакетов
	//когда для одной базы мы указываем несколько сценариев обмена (при этом базы имеют один ИД)
	Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
	Рез=Спр.НайтиПоРеквизиту("IDD",ТекБаза.IDD,1);
	Если (Рез=1)И(ТекБаза.IDD<>ИДДляОтладки) Тогда
		Возврат Спр.НомерПакетаВыгрузки;
	Иначе   
		Спр.НайтиЭлемент(ТекБаза);	//позиционируемся на сами себя - т.к. это исключение из правил
		Возврат ТекБаза.НомерПакетаВыгрузки;//не нашли ???
	КонецЕсли;
КонецФункции 

//_____________________________________________________________________________
Функция ПолучитьНомерПодтвержденногоПакетаЗагрузки(ТекБаза,Спр=0)
	//эта функция находит первый элемент в справочнике периферийных баз, с IDD = База.IDD	
	//и вернет его следующий пакет выгрузки
	//основная цель это найти ведущий элемент, по которому ведется сквозная нумерация пакетов
	//когда для одной базы мы указываем несколько сценариев обмена (при этом базы имеют один ИД)
	Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
	Рез=Спр.НайтиПоРеквизиту("IDD",ТекБаза.IDD,1);
	Если (Рез=1)И(ТекБаза.IDD<>ИДДляОтладки) Тогда
		Возврат Спр.НомерПодтвержденногоПакетаЗагрузки;
	Иначе   
		Спр.НайтиЭлемент(ТекБаза);	//позиционируемся на сами себя - т.к. это исключение из правил
		Возврат ТекБаза.НомерПодтвержденногоПакетаЗагрузки;//не нашли ???
	КонецЕсли;
КонецФункции 


//_____________________________________________________________________________
Функция ПолучитьВладельцаПравил(КакаяТоБаза)
//эта функция находит правила обмена для базы
Если КакаяТоБаза.ПравилаОбмена.Выбран()=1 Тогда
    Возврат КакаяТоБаза.ПравилаОбмена;
Иначе
	Возврат КакаяТоБаза;
КонецЕсли;
КонецФункции



//_____________________________________________________________________________
//при интеракт. выборе базы для обмена
Процедура УстановитьБазу()
	Если База.Выбран()=1 Тогда
		Если База.ЭтоГруппа()=0 Тогда

			//Если База.ФорматXML=0 Тогда
			//	ОткрытьДругуюФорму=1;
			//    Форма.Закрыть();
			//КонецЕсли;
			
			
			МиграцияИзменений=База.МиграцияИзменений;
			МаксКолОбъектовВПакете=База.КоличествоОбъектовВПакете;
			ВыгружатьШапкуПакетовОтдельно=База.ВыгружатьШапкуПакетовОтдельно;
			
			МаксКолОбъектовВПакете=?(МаксКолОбъектовВПакете<1,5000,МаксКолОбъектовВПакете);
			
			ПризнакПолученияMD=База.ПризнакПолученияMD;
			ПризнакОтправленияMD=База.ПризнакОтправленияMD;
			
			РегистрацияПриЗагрузке=База.РегистрацияПриЗагрузке;
			НеИзменятьИДПриЗагрузке=База.НеИзменятьИДПриЗагрузке;
			ИспользоватьТранзакцию=База.ИспользоватьТранзакцию;
			
			НеВыгружатьИДД=База.НеВыгружатьИДД;
			ЭлементДокументаМОД=База.ЭлементДокументаМОД;
			Если Сокрлп(ЭлементДокументаМОД)="" Тогда
			    ЭлементДокументаМОД="MOD";
			КонецЕсли;
			
			Попытка//- проверка для облегчения обновления версии Менеджера
				ПриоритетностьБазы=База.ПриоритетностьБазы;
			Исключение
				ПриоритетностьБазы=1;
			КонецПопытки;
			
			Выгрузка=База.Выгрузка;
			НомерПакетаВыгрузки=ПолучитьНомерПакетаВыгрузки(База);//вызов функции, которая сама 
			//определит какой элемент создавался первым (если есть два элемента баз с одинаковым IDD)
			Если НомерПакетаВыгрузки<1 Тогда
				НомерПакетаВыгрузки=1;
			КонецЕсли;
			МаксНомерПакетаВыгрузки=НомерПакетаВыгрузки;
			РежимВыгрузки=База.РежимВыгрузки;
			ДатаН=?(РежимВыгрузки=1,'01.01.1970',База.ДатаНачалаПриВыгрузке);
			ДатаК=?(РежимВыгрузки=1,РабочДата,База.ДатаКонцаПриВыгрузке);
			СПодчиненными=База.СПодчиненнымиПриВыборочнойВыгрузке;
			ТекстВыгрузки=База.ТекстПриВыгрузке;
			
			НомерПодтвержденногоПакетаЗагрузки=ПолучитьНомерПодтвержденногоПакетаЗагрузки(База);
			Если НомерПодтвержденногоПакетаЗагрузки>=МаксНомерПакетаВыгрузки Тогда
				НомерПодтвержденногоПакетаЗагрузки=МаксНомерПакетаВыгрузки-1;
			КонецЕсли;
			
			Загрузка=База.Загрузка;
			НомерПакета=База.НомерПакетаЗагрузки;
			
			ИспользоватьФТП=База.ИспользоватьФТП;
			ПередачаПоПочте=База.ПередачаПоПочте;
			ВстроеннаяАрхивация=База.ВстроеннаяАрхивация;
			
			ПутьКБазеПриВыгрузке=Сокрлп(База.ПутьКБазеПриВыгрузке);
			ПутьКБазеПриЗагрузке=Сокрлп(База.ПутьКБазеПриЗагрузке);
			
			Если СтрДлина(ПутьКБазеПриВыгрузке)<>2 Тогда
			Если ФС.СуществуетФайл(ПутьКБазеПриВыгрузке)=0 Тогда
				М_Сообщить("Не найден путь к каталогу выгрузки "+ПутьКБазеПриВыгрузке,"I",Выгрузка);
				Если НЕ((СтрДлина(ПутьКБазеПриВыгрузке)=2) И (Прав(ПутьКБазеПриВыгрузке,2)=":")) Тогда
					ПутьКБазеПриВыгрузке=КаталогИБ()+"OUT_"+База.IDD;
					Если ФС.СУществуетФайл(ПутьКБазеПриВыгрузке)=0 Тогда
						ФС.СоздатьКаталог(ПутьКБазеПриВыгрузке);
					КонецЕсли;
				КонецЕсли;
				М_Сообщить("Для выгрузки будет использован каталог "+ПутьКБазеПриВыгрузке,,Выгрузка);
				Попытка
					Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
					Спр.НайтиЭлемент(База);
					Спр.ПутьКБазеПриВыгрузке=ПутьКБазеПриВыгрузке;
					Спр.Записать();
				Исключение
				КонецПопытки;
			КонецЕсли;
			КонецЕсли;
			
			Если СтрДлина(ПутьКБазеПриЗагрузке)<>2 Тогда
			Если ФС.СУществуетФайл(ПутьКБазеПриЗагрузке)=0 Тогда
				М_Сообщить("Не найден путь к каталогу загрузки "+ПутьКБазеПриЗагрузке,"I",Загрузка);
				Если НЕ((СтрДлина(ПутьКБазеПриЗагрузке)=2) И (Прав(ПутьКБазеПриЗагрузке,2)=":")) Тогда
					ПутьКБазеПриЗагрузке=КаталогИБ()+"IN_"+База.IDD;
					Если ФС.СУществуетФайл(ПутьКБазеПриЗагрузке)=0 Тогда
						ФС.СоздатьКаталог(ПутьКБазеПриЗагрузке);
					КонецЕсли;
				КонецЕсли;
				М_Сообщить("Для загрузки будет использован каталог "+ПутьКБазеПриЗагрузке,,Загрузка);
				Попытка
				Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
				Спр.НайтиЭлемент(База);
				Спр.ПутьКБазеПриЗагрузке=ПутьКБазеПриЗагрузке;
				Спр.Записать();
				Исключение
				КонецПопытки;
			КонецЕсли;
			КонецЕсли;
			НомерПакета=?(НомерПакета<1,1,НомерПакета);
			
			НомерПакетаЗагрузки=НомерПакета;
			
			
			ЕстьВыгрузкаЗагрузка();
			
			СделатьВидимыми(1);
			
			Если ТипЗначения(База.ОбъектПриВыборочнойВыгрузке)<>0 Тогда//что-то уже было
				Если ТипЗначения(База.ОбъектПриВыборочнойВыгрузке)=11 Тогда
					ИмяОб=База.ОбъектПриВыборочнойВыгрузке.Вид();
					НомС=ТипОбъектаВыборочно.НайтиЗначение("Справочник"+?(Сокрлп(ИмяОб)="","",".")+ИмяОб);
					Форма.ОбъектВыборочно.НазначитьТип("Справочник"+?(Сокрлп(ИмяОб)="","",".")+ИмяОб);
					ТипОбъектаВыборочно.ТекущаяСтрока(НомС);
				КонецЕсли;
				Если ТипЗначения(База.ОбъектПриВыборочнойВыгрузке)=12 Тогда
					ИмяОб=База.ОбъектПриВыборочнойВыгрузке.Вид();
					НомС=ТипОбъектаВыборочно.НайтиЗначение("Документ"+?(Сокрлп(ИмяОб)="","",".")+ИмяОб);
					Форма.ОбъектВыборочно.НазначитьТип("Документ"+?(Сокрлп(ИмяОб)="","",".")+ИмяОб);
					ТипОбъектаВыборочно.ТекущаяСтрока(НомС);
				КонецЕсли;
				ОбъектВыборочно=База.ОбъектПриВыборочнойВыгрузке;
			КонецЕсли;
			
			ЗаполнитьСписокПакетов();
		Иначе//группа баз
			СделатьВидимыми(0);
		КонецЕсли;
	Иначе//все базы
		СделатьВидимыми(0);
	КонецЕсли;
КонецПроцедуры

//_____________________________________________________________________________


Процедура НеобходимыеЗакладки()
	Форма.Закладки.ДобавитьЗначение("Общие","Общие");
	Форма.Закладки.ДобавитьЗначение("Инициализация","Инициализация");
	Форма.Закладки.ДобавитьЗначение("Подтверждение","Подтверждение");
	Форма.Закладки.ДобавитьЗначение("Настройка","Сервис");
	Форма.Закладки.ДобавитьЗначение("ОПрограмме","О программе");
	Форма.ИспользоватьСлой("Общие");
	ЕстьВыгрузкаЗагрузка();
КонецПроцедуры





//***     ***     ***     *** *****  *** *** ***  ***    ***      *** *****
//***     ***     ***    ***    ***  *** *** ***  ***  ***       ***    ***
//***     ***     ***   ***     ***  ***     ***  ******        ***     ***
//***     ***     ***   ***     ***  ***     ***  ******        ***     ***
//***     ***     ***   ***********  ***     ***  ******        ***********
//***     ***     ***   *** *** ***  ***     ***  ***   ***     *** *** ***
//*** *** *** *** ***   ***     ***  ***     ***  ***     ***   ***     ***
//*** *** *** *** ***   ***     ***  ***     ***  ***      ***  ***     ***
//*** *** *** *** ***   ***     ***  ***     ***  ***      ***  ***     ***

//_____________________________________________________________________________
//создаем шапку пакета, отражающую структуру
//выгружаемой информации; шапка строится по справочнику "ПравилаВыгрузки"
Функция ВыгрузитьШапку(ВыгрБаза,РежТолькоШапка=0,УстИмяФайла="")
	Возврат 1;
КонецФункции
//_____________________________________________________________________________






//_____________________________________________________________________________
//Выгружаем данные с номерами "ЧтоВыгрузить", помечая их номерами "КакПометить"
Функция ВыгрузитьТело(БДПакеты,ВыгрБаза,КакПометить,ЧтоВыгрузить,НомерПакета=1)
	ВыбрБаза=ВыгрБаза;
	
	М_Сообщить("Выгружаем данные ...");
	Ключ=Прав("0000000"+Сокрлп(ВыгрБаза.IDD),7)+Сокрлп(ЧтоВыгрузить);
	Стр="";
	БазаПакет=Прав("0000000"+Сокрлп(ВыгрБаза.IDD),7)+Сокрлп(КакПометить);
	
	//*********** расчет длины пакета для прогрессора
	БДПакеты.ТекущийИндекс("IDDDB");
	Рез=БДПакеты.Найти(Ключ,0);
	Ном=БДПакеты.НомерЗаписи();
	Если (Ном=0)ИЛИ(Рез=0) Тогда
		М_Сообщить("Нет данных в пакете "+НомерПакета);
		Возврат 0;
	КонецЕсли;
	БДПакеты.ТекущийИндекс("IDDDB");
	БДПакеты.Первая();
	БДПакеты.Найти(Ключ,0);
	КонНомер=1;
	
	
	
	М_Состояние("Расчет длины пакета "+НомерПакета);
	Пока БДПакеты.ВКонце()=0 Цикл
		Если Сокрп(БДПакеты.IDDDB)<>Ключ Тогда
			Прервать;
		КонецЕсли;
		КонНомер=КонНомер+1;
		БДПакеты.Следующая();
	КонецЦикла;
	//************************************************
	Прогрессор(0,КонНомер,0,"Выгрузка пакета № "+НомерПакета);
	М_Состояние(ВыгрБаза.Наименование+" - заполнение пакета данными.");
	
	БДПакеты.ТекущийИндекс("IDDDB");
	БДПакеты.Первая();
	БДПакеты.Найти(Ключ,0);
	ДляПрогрессора=0;
	
	Пока БДПакеты.ВКонце()=0 Цикл
		Если Сокрп(БДПакеты.IDDDB)<>Ключ Тогда
			Прервать;
		КонецЕсли;
			ДляПрогрессора=ДляПрогрессора+1;
			Прогрессор(ДляПрогрессора);//********* прогрессор
			Тип=Строка(БДПакеты.TIP);
			Вид=Сокрлп(БДПакеты.VIDD);
			Если Тип="11" Тогда
				ВыгрузитьСправочник(Вид,БДПакеты.IDD,БДПакеты.DATE1,БДПакеты.DATE2);
			ИначеЕсли Тип="12" Тогда
				ВыгрузитьДокумент(Вид,БДПакеты.IDD);
			ИначеЕсли Тип="95" Тогда
				ВыгрузитьКонстанту(Вид,БДПакеты.DATE1,БДПакеты.DATE2);
			ИначеЕсли Тип="94" Тогда
				ВыгрузитьСчет(Вид);
			КонецЕсли;
			Если Сокрп(БДПакеты.IDDDB)<>Сокрп(БазаПакет) Тогда
				БДПакеты.IDDDB=БазаПакет;
				БДПакеты.Записать();
			КонецЕсли;
		БДПакеты.Следующая();
	КонецЦикла;
	М_Состояние("Выгрузка тела данных закончена ...");
	Прогрессор(0);
	Возврат 1;
КонецФункции //ВыгрузитьТело
//_____________________________________________________________________________



















//*****************************************************************************
//*****************************************************************************
//*****************************************************************************
//*****************************************************************************
//*****************************************************************************
//**************  ЗАГРУЗКА ** ЗАГРУЗКА ** ЗАГРУЗКА ** ЗАГРУЗКА ****************
//**************  ЗАГРУЗКА ** ЗАГРУЗКА ** ЗАГРУЗКА ** ЗАГРУЗКА ****************
//**************  ЗАГРУЗКА ** ЗАГРУЗКА ** ЗАГРУЗКА ** ЗАГРУЗКА ****************
//*****************************************************************************
//*****************************************************************************
//*****************************************************************************
//*****************************************************************************






//_____________________________________________________________________________
Функция НадоЗагружатьОбъект(Спр_ИД)
	//Если объект изменен в нашей и в периферийной базе одновременно, то
	//для обеспечения синхронности баз нужно решить чьи изменения
	//имеют больший приоритет.
	//В этой функции приоритет определяется по номеру базы - у кого номер меньше - у того
	//больший приоритет !
	//Одинаковые номера баз невозможны т.к. это проверяется при выгрузке пакета.
	
	Если ПриоритетЗагрузки=0 Тогда
		//загружаем вседа т.к. наша база имеет более низкий приоритет
		Возврат 1;
	Иначе
		//смотрим может мы этот объект изменяли сами
		Рез=СписокИзмененныхОбъектов.НайтиЗначение(Спр_ИД);
		Если Рез=0 Тогда
			Возврат 1;//нет не изменяли
		Иначе
			Возврат 0;//изменяли !!!
		КонецЕсли;
	КонецЕсли;
КонецФункции //НадоЗагружатьОбъект





//_____________________________________________________________________________
Процедура МиграцияИзменений(ВыгрБаза,ИД,Тип,Вид,Дата1,Дата2)
	Перем БДПакеты;
	Если МиграцияИзменений=1 Тогда
		//изменения пришедшие в нашу базу надо опять зарегистрировать для того, чтобы они
		//мигрировали далее (необходимо понимать, что если административно не ограничить миграцию, то
		//данные будут передаваться бесконечно)
		//в данной процедуре элементы мигрируют во все базы, за исключением той откуда пришли
		Если ОткрытьФайлМОД(БДПакеты,"Пакеты","_tran2")=0 Тогда 
			Сообщить("Ошибка открытия базы ""Пакеты"" - миграция в другие базы не производится","!");
			Возврат;
		КонецЕсли;
		Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
		Спр.ВыбратьЭлементы();
		Пока Спр.ПолучитьЭлемент()=1 Цикл
			Если Спр.Выгрузка=1 Тогда
				Если Спр.ТекущийЭлемент()<>ВыгрБаза Тогда
					БДПакеты.Добавить();
					БДПакеты.IDD=Ид;
					БДПакеты.TIP=Тип;
					БДПакеты.VIDD=Вид;
					БДПакеты.DATE1=Дата1;
					БДПакеты.DATE2=Дата2;
					БДПакеты.POS=1;
					БДПакеты.IDDDB=""+Спр.IDD+"_";
					БДПакеты.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры //









//_____________________________________________________________________________
//Собираем всю информацию об изменениях в файле пакетов
//берем все изменения сделаные пользователем между сеансами обмена,
//если эти изменения уже отправили в пакетах, но подтверждение еще 
//не пришло,то они тоже учитываются.
//Т.о. изменения берем из файла tran1 и частично из пакетного файла tran2
Процедура ЗаполнитьСписокИзмененныхОбъектов()
	Перем БДПакеты;
	СписокИзмененныхОбъектов=СоздатьОбъект("СписокЗначений");
	ВыгрБаза=ВыбрБаза; 
	Если ПустоеЗначение(ВыгрБаза)=0 Тогда
		Если ПриоритетностьБазы=1 Тогда
			ПриоритетЗагрузки=0;//загружаем все объекты независимо от того изменяли ли мы их сами
		Иначе
			Если ОткрытьФайлМОДПоИмени(БДПакеты,"Пакеты","_tran2")=0 Тогда //это открывается временный файл !!!
				Предупреждение("Ошибка открытия базы ""Пакеты"" - возможно она занята другим пользователем",10);
				Возврат ;
			КонецЕсли;
			БДПакеты.ТекущийИндекс("IDDDB");
			Для А=ПолучитьНомерПодтвержденногоПакетаЗагрузки(ВыгрБаза) По МаксНомерПакетаВыгрузки Цикл
				АА=А;
				Если А=МаксНомерПакетаВыгрузки Тогда
				   АА="_"; 
				КонецЕсли;
				Ключ=Прав("0000000"+Сокрп(ВыгрБаза.IDD),7)+АА;
				Рез=БДПакеты.Найти(Ключ);
				Если Рез=1 Тогда
					Пока Сокрп(БДПакеты.IDDDB)=Ключ Цикл//т.е. проходим по всему участку
						СписокИзмененныхОбъектов.ДобавитьЗначение(БДПакеты.IDD);
						БДПакеты.Следующая();
						Если БДПакеты.ВКонце()=1 Тогда     //т.к. может этот участок был последним ...
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			БДПакеты.ЗакрытьФайл();
			
			Если ОткрытьФайлМОДПоИмени(БДПакеты,"Изменения","_tran1")=0 Тогда //это открывается временный файл !!!
				Предупреждение("Ошибка открытия базы ""Изменения"" - возможно она занята другим пользователем",10);
				Возврат ;
			КонецЕсли;
			БДПакеты.Первая();
			Пока БДПакеты.ВКонце()=0 Цикл
				СписокИзмененныхОбъектов.ДобавитьЗначение(БДПакеты.IDD);
				БДПакеты.Следующая();
			КонецЦикла;
			БДПакеты.ЗакрытьФайл();
			
			ПриоритетЗагрузки=1;//не загружаем т.к. мы сами их изменяли
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ЗаполнитьСписок




//_____________________________________________________________________________
Функция ЗагрузитьЭлемент(Тип)
	Если Тип=11 Тогда
	    Возврат ЗагрузитьСправочник();
	ИначеЕсли Тип=12 Тогда
	    Возврат ЗагрузитьДокумент();
	ИначеЕсли Тип=94 Тогда
	    ЗагрузитьСчет();
	ИначеЕсли Тип=95 Тогда
	    ЗагрузитьКонстанту();
	КонецЕсли;
	Возврат 1;
КонецФункции //ЗагрузитьЭлемент
//_____________________________________________________________________________



//_____________________________________________________________________________
Процедура ВыполнитьЗагрузкуОбъектов()
	Для ТекЦиклЗагрузки=1 По 3 Цикл
		КопияГлобСписокВторогоЦикла=ГлобСписокВторогоЦикла;
		ГлобСписокВторогоЦикла=СоздатьОбъект("СписокЗначений");
		Для А=1 По КопияГлобСписокВторогоЦикла.РазмерСписка() Цикл
			ИДД=КопияГлобСписокВторогоЦикла.ПолучитьЗначение(А);
			//		Сообщить("Попытка загрузки "+ИДД+"  ("+ТекЦиклЗагрузки+")");
			Если Сокрлп(ИДД)<>"" Тогда
				Рез=ТЛист.НайтиПоИДД(ИДД);
				Если Рез=1 Тогда
					Тип=ТЛист.Type;
					Если Тип=11 Тогда
						ЗагрузитьСправочник();
					ИначеЕсли Тип=12 Тогда
						ЗагрузитьДокумент();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		КопияГлобСписокВторогоЦикла.УдалитьВсе();
	КонецЦикла;
КонецПроцедуры //ВыполнитьЗагрузкуОбъектов

//_____________________________________________________________________________
//Основное назначение этой процедуры - это настройка коэффициента периода 
//фиксации транзакций (переменная РазмерОбъектовДляФиксации)
Процедура АнализСкоростиЗагрузки(РазмерФайла=0)
	Перем НачалоЗагрузки,СкоростьЗагрузки,НаправлениеИзменения;
	Перем Ч,М,С;
	ТекущееВремя(Ч,М,С);
	ТекВремя=Ч*3600+М*60+С;
	НачалоЗагрузки=Число(ВосстановитьЗначение("НачалоЗагрузки"));
	СкоростьЗагрузки=Число(ВосстановитьЗначение("СкоростьЗагрузки"));
	НаправлениеИзменения=Число(ВосстановитьЗначение("НаправлениеИзменения"));
//	РазмерОбъектовДляФиксации=Число(ВосстановитьЗначение("РазмерОбъектовДляФиксации"));
	Если НаправлениеИзменения=0 Тогда
	    НаправлениеИзменения=-1;
	КонецЕсли;
	Если РазмерОбъектовДляФиксации<100 Тогда
	    РазмерОбъектовДляФиксации=50000;
	КонецЕсли;
	
	Период=ТекВремя-НачалоЗагрузки;
	Если (РазмерФайла>0)И(Период>0) Тогда//иначе возможно переход на новый день - пропускаем
		СкоростьЗагрузки2=Окр(РазмерФайла/Период,15);
		М_Сообщить("Суммарный размер объектов для фиксации транзакции = "+РазмерОбъектовДляФиксации+"  скорость загрузки (байт/сек) = "+СкоростьЗагрузки2);
		Если СкоростьЗагрузки>СкоростьЗагрузки2 Тогда//неправильно выбрано направление изменения коэффициента
			НаправлениеИзменения=-НаправлениеИзменения;//изменяем на противоположное
			Если НаправлениеИзменения=-1 Тогда
				М_Сообщить("Уменьшаем суммарный размер объектов");
			Иначе
				М_Сообщить("Увеличиваем суммарный размер объектов");
				НаправлениеИзменения=1;//на всякие пожарные
			КонецЕсли;
			//Иначе - ОК, мы на правильном пути
		КонецЕсли;
		Если НаправлениеИзменения=1 Тогда
			РазмерОбъектовДляФиксации=1.2*РазмерОбъектовДляФиксации;//увеличиваем на 20 %
		Иначе
			РазмерОбъектовДляФиксации=0.9*РазмерОбъектовДляФиксации;//уменьшаем на 10 %
		КонецЕсли;
		СкоростьЗагрузки=СкоростьЗагрузки2;
	Иначе
		НачалоЗагрузки=ТекВремя;
	КонецЕсли;
	
	СохранитьЗначение("НачалоЗагрузки",НачалоЗагрузки);
	СохранитьЗначение("СкоростьЗагрузки",СкоростьЗагрузки);
	СохранитьЗначение("НаправлениеИзменения",НаправлениеИзменения);
//	СохранитьЗначение("РазмерОбъектовДляФиксации",РазмерОбъектовДляФиксации);
	
КонецПроцедуры //АнализСкоростиЗагрузки

//_____________________________________________________________________________
//Загрузка всех объектов заданного типа из пакета с данными
//если при загрузке встретятся ссылки на объекты, которые еще не загружены,
//то произойдет также и их загрузка.
Функция ЗагрузитьТип(Тип,Имя)
	НачатьТранзакцию();//данные
	РазмерОбъектов=0;
	КолОбъектов=ТЛист.SelectObject(Тип);
	Если КолОбъектов>0 Тогда
		Прогрессор(0,КолОбъектов,0,Имя);
		ТекНомер=0;
		Пока ТЛист.GetObject()=1 Цикл
			РазмерОбъектов=РазмерОбъектов+ТЛист.Length();
			ТекНомер=ТекНомер+1;
			Прогрессор(ТекНомер);
			Рез=ЗагрузитьЭлемент(Тип);
			Если Рез=0 Тогда
				ИДД=ТЛист.IDD;
				ВыполнитьЗагрузкуОбъектов();
				ТЛист.НайтиПоИДД(ИДД);
				ЗагрузитьЭлемент(Тип);
			ИначеЕсли Рез=-1 Тогда
				ОтменитьТранзакцию();
				Возврат 0;//Ошибка загрузки
			КонецЕсли;
			Если РазмерОбъектов>=РазмерОбъектовДляФиксации Тогда
				ВыполнитьЗагрузкуОбъектов();
				Состояние("Фиксация транзакии...");
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
				Состояние("...");
				РазмерОбъектов=0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Состояние("Фиксация транзакии...");
	ЗафиксироватьТранзакцию();
	Возврат 1;
КонецФункции //ЗагрузитьТип



//_____________________________________________________________________________
Функция ЗагрузитьТело(ТекБаза,НомерПакета,ИмяТекстовогоФайла)
	ВыбрБаза=ТекБаза;
	ИДДБазы=ТекБаза.IDD;
	ПередачаПравилВОЛЕ(ТекБаза,"ПравилаЗагрузки");
	Состояние("Разбор данных");
	Рез=ТЛист.load(ИмяТекстовогоФайла);
	ИДКому=ТЛист.BaseIDD;
	ИДОтКого=ТЛист.CurrentIDD;
	ЗагрВерсияПротоколаМОД=ТЛист.DataVersion;

	ТекстЗагрузки=ТЛист.TextOutPut;
	ТекстЗагрузки=СтрЗаменить(ТекстЗагрузки," &Enter ",РазделительСтрок);
	Если Сокрлп(ТекстЗагрузки)<>"" Тогда
		Сообщить("****************************************************************************************************");
		Сообщить("Поступило сообщение из базы "+ВыбрБаза.Наименование+" :","I");
		Сообщить(ТекстЗагрузки);
		Сообщить("****************************************************************************************************");
	КонецЕсли;

	Если Сокрлп(ЗагрВерсияПротоколаМОД)<>Сокрлп(ВерсияПротоколаМОД) Тогда
		Предупреждение("Внимание протокол загружаемого пакета не поддерживается.
		|Обновите версию Менеджера ! Справки : lider@pb.ru ",10);
		Возврат 0;
	КонецЕсли;
	
	Если Сокрлп(Рез)<>"" Тогда
		Сообщить(""+Рез,"!");
		Возврат 0;
	КонецЕсли;

	НомерПодтвержденногоПакета=Число(ТЛист.LoadedPackage);
	
	
	Если ЗагружатьВсе=0 Тогда
		Если (ВыбрБаза.IDD<>ИДДляОтладки)И(РежимНастройки=0) Тогда //зарезервированный код базы - для отладки !
			Если ИДКому<>0 Тогда //т.е. если ноль то это для всех !!
				Если Число(ИДКому)<>Число(Константа.IDD) Тогда
					Сообщить("Этот пакет не предназначен для вашей базы - загрузка прервана ","!!!");
					М_Сообщить("(Пакет предназначен для базы с IDD = "+Число(ИДКому)+", а IDD вашей базы = "+Число(Константа.IDD)+")");
					Возврат 0;
				КонецЕсли;
				
				
				Если Число(ИДОтКого)<>Число(Сокрп(ВыбрБаза.IDD)) Тогда
					Сообщить("Этот пакет не от той базы которую вы выбрали - загрузка прервана ","!!!");
					М_Сообщить("(Пакет из базы с IDD = "+Число(ИДОтКого)+", а вы выбрали загрузку из базы с IDD = "+Число(ВыбрБаза.IDD)+")");
					Возврат 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	
	
	
	
	ЗаполнитьСписокИзмененныхОбъектов();
	Состояние("Загрузка данных");
	ГлобСписокВторогоЦикла=СоздатьОбъект("СписокЗначений");
	УникальныйИДД=Число(Константа.УникальныйIDD)+1000;//Вдруг в момент загрузки пользователи создавали объекты...
    
	
	АнализСкоростиЗагрузки(0);
	Если ЗагрузитьТип(94,"Загрузка план-счетов")=0 Тогда
	    Возврат 0;
	КонецЕсли;
	Если ЗагрузитьТип(11,"Загрузка справочников")=0 Тогда
	    Возврат 0;
	КонецЕсли;
	Если ЗагрузитьТип(12,"Загрузка документов")=0 Тогда
	    Возврат 0;
	КонецЕсли;
	Если ЗагрузитьТип(95,"Загрузка констант")=0 Тогда
	    Возврат 0;
	КонецЕсли;
	РазмерФайла=0;
	ФС.АтрибутыФайла(ИмяТекстовогоФайла,РазмерФайла);
	АнализСкоростиЗагрузки(РазмерФайла);
	
	
	ПроведениеПоАлгоритмуМОД=0;
	Константа.УникальныйIDD=УникальныйИДД+1;
	Возврат 1;
КонецФункции //ЗагрузитьТело

//_____________________________________________________________________________





Процедура ДобавитьОдинУдаленный(БДИзменения,БДУдаления)//добавить в базу изменений запись
	//об одном  помеченном на удаление объекте .
	//(Это чтобы отследить ситуацию с удалением помеченных объектов)
	Если Число(БДУдаления.TIP)=11 Тогда
		Попытка
		Об=СоздатьОбъект("Справочник."+СокрЛП(БДУдаления.VIDD));
		Об.НайтиПоРеквизиту("IDD",БДУдаления.IDD,1);
		Исключение
		Возврат;	
		КонецПопытки;
	ИначеЕсли Число(БДУдаления.TIP)=12 Тогда
		НайтиДокументПоIDD(ГлобДок,БДУдаления.IDD);
		Об=ГлобДок;
	ИначеЕсли Число(БДУдаления.TIP)=94 Тогда
		БДУдаления.Удалить();//счет
		Возврат;
	Иначе
		М_Сообщить("Ошибка № 100 (Тип объекта=" + БДУдаления.TIP+")   - пропускаем (обратитесь к разработчикам:ivan@pb.ru)");
		БДУдаления.Удалить();//непонятный тип
		Возврат;
	КонецЕсли;
	
	Если Об.Выбран()=1 Тогда
		Если Об.ПометкаУдаления()=1 Тогда
			Возврат; //ничего не изменилось с этим объектом
		КонецЕсли;
	КонецЕсли;
	
	//либо объект удален совсем, либо снят с пометки на удаление
	БДИзменения.Добавить();
	БДИзменения.IDD=БДУдаления.IDD;
	БДИзменения.TIP=БДУдаления.TIP;
	БДИзменения.VIDD=БДУдаления.VIDD;
	БДИзменения.DATE=РабочДата;
	БДИзменения.Записать();
	БДУдаления.Удалить();
	
КонецПроцедуры

//_____________________________________________________________________________


Процедура ДобавитьУдаленныеОбъектыВ_БазуИзменений(БДИзменения,БДУдаления)
	//Здесь мы в базу изменений добавляем записи об удаленных элементах
	
	//открываем dbf
	БДУдаления.ПоказыватьУдаленные(0);
	
	//добавляем то, что нужно, в базу изменений
	БДУдаления.Первая();
	Пока БДУдаления.ВКонце()=0 Цикл
		ДобавитьОдинУдаленный(БДИзменения,БДУдаления);
		БДУдаления.Следующая();
	КонецЦикла;
	
	БДУдаления.Сжать();
	//БДУдаления.ЗакрытьФайл();
	
КонецПроцедуры

//_____________________________________________________________________________

Процедура ПереформироватьПакет(БДПакеты,ВыгрБаза,ВЫгрПакет,НеотправлПакет="_")
	//одновременно здесь отслеживаем максимальную длину пакета !!!!!!!!!
	//здесь обязательно надо,чтобы ВЫгрПакет<>НеотправлПакет
	Если Сокрлп(ВЫгрПакет)=Сокрлп(НеотправлПакет) Тогда
		Сообщить("Пакет "+ВЫгрПакет+" и так уже переоформирован !");//по идее здесь мы не должны никогда быть (но на всякий случай).                                   - Чем 1С не шутит ;-)
		Возврат;
	КонецЕсли;
	
	Док=СоздатьОбъект("Документ");
	М_Состояние("Переформирование пакета для отправки ...");
	НомерПакетаИБазы=Прав("0000000"+Сокрп(Сокрп(ВыгрБаза.IDD)),7)+Сокрлп(ВЫгрПакет);
	БДПакеты.ТекущийИндекс("IDDDB");
	Ключ=Прав("0000000"+Сокрп(ВыгрБаза.IDD),7)+НеотправлПакет;
	
	ТекНомер=0;
	Пока БДПакеты.Найти(Ключ,0)=1 Цикл
		//мы спозиционировались на первом элементе участка ненужных пакетов
		пока Сокрп(БДПакеты.IDDDB)=Ключ Цикл
			БДПакеты.IDDDB=НомерПакетаИБазы;//т.е. проходим по всему участку
			БДПакеты.Записать();
			БДПакеты.Следующая();
			Если БДПакеты.ВКонце()=1 Тогда     //т.к. может этот участок был последним ...
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

//_____________________________________________________________________________
Процедура СформироватьНовыйПакет(БДИзменения,БДПакеты,ВыгрБаза,ВЫгрПакет="_")
	ПЕрем Список;
	М_Состояние("Создание нового пакета...");
	Прогрессор(0,БДИзменения.КоличествоЗаписей(),0,ВыгрБаза.Наименование);
	//	БДИзменения.ТекущийИндекс("POS");
	НомерПакетаИБазы=Прав("0000000"+Сокрп(ВыгрБаза.IDD),7)+Сокрлп(ВЫгрПакет);
	БДИзменения.Первая();
	БДПакеты.ТекущийИндекс("IDD");
	БДПакеты.АвтоСохранение(0);
	КолПрогрессора=0;
	ПОС=1000;
	Пока БДИзменения.ВКонце()=0 Цикл
		КолПрогрессора=КолПрогрессора+1;
		Прогрессор(КолПрогрессора);
		Ключ=НомерПакетаИБазы+Сокрлп(БДИзменения.IDD);
		Нашли=БДПакеты.Найти(Ключ,0);
		Если Нашли=1 Тогда
			Если БДИзменения.TIP<>12 Тогда
				//для периодических реквизитов записываем период их изменения
				ДатаИзменения=БДИзменения.DATE;
				Если БДПакеты.DATE1>ДатаИзменения Тогда
					БДПакеты.DATE1=ДатаИзменения;//т.е. Дата изменения реквизита вылазеит за границы уже введенных величин
				ИначеЕсли БДПакеты.DATE2<ДатаИзменения Тогда
					БДПакеты.DATE2=ДатаИзменения;//аналогично , но теперь провер. верх. границу
				КонецЕсли;
				БДПакеты.Записать();
			КонецЕсли;
			Если (БДИзменения.TIP<>БДПакеты.TIP)ИЛИ(БДПакеты.VIDD<>БДИзменения.VIDD) Тогда
			 	Нашли=0;//защита от отмены транзакции при регистрации объектов   
			КонецЕсли;
		Иначе
			БДПакеты.Добавить();
		КонецЕсли;
		
		Если Нашли=0 Тогда
			ПОС=ПОС+1;
			БДПакеты.IDD=БДИзменения.IDD;
			БДПакеты.TIP=БДИзменения.TIP;
			БДПакеты.VIDD=БДИзменения.VIDD;
			БДПакеты.DATE1=БДИзменения.DATE;
			БДПакеты.DATE2=БДИзменения.DATE;
			БДПакеты.POS=ПОС;
			БДПакеты.IDDDB=НомерПакетаИБазы;
			БДПакеты.Записать();
		КонецЕсли;
		
		
		БДИзменения.Следующая();
	КонецЦикла;
	Прогрессор(0);
КонецПроцедуры






//_____________________________________________________________________________
Процедура ДобавитьВПакетОбъект(БДПакеты,НомерПакетаИБазы,Знач Реквизит,Тип,НовыйIDD="")
	Если Реквизит.Выбран()=0 Тогда
		Возврат;
	КонецЕсли;
    
	Если Сокрлп(Реквизит.IDD)="" Тогда
		Константа.УникальныйIDD=Строка(Число(Константа.УникальныйIDD)+1);
		НовыйIDD=Прав("0000000"+СокрЛП(Константа.IDD),7)+прав("0000000000"+СокрЛП(Константа.УникальныйIDD),10);
		Если Тип=12 Тогда
			ГлобДокЗагрВыгрузки.НайтиДокумент(Реквизит);
			ГлобДокЗагрВыгрузки.IDD=НовыйIDD;
			ГлобДокЗагрВыгрузки.Записать();
			ГлобДокЗагрВыгрузки.НайтиДокумент(Реквизит);
			Реквизит=ГлобДокЗагрВыгрузки.ТекущийДокумент();
		Иначе
			Спр2=СоздатьОбъект("Справочник."+Реквизит.Вид());
			Спр2.НайтиЭлемент(Реквизит);
			Спр2.IDD=НовыйIDD;
			Спр2.Записать();
			Спр2.НайтиЭлемент(Реквизит);
			Реквизит=Спр2.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;
	
		БДПакеты.Добавить();
		БДПакеты.IDD=Реквизит.IDD;
		БДПакеты.TIP=Тип;
		БДПакеты.VIDD=Реквизит.Вид();
		БДПакеты.DATE1=ДатаН;
		БДПакеты.DATE2=ДатаК;
		БДПакеты.IDDDB=НомерПакетаИБазы;
		БДПакеты.Записать();
КонецПроцедуры //ДобавитьВПакетОбъект





//_____________________________________________________________________________
Функция ДобавитьВПакетОбъектСПроверкой(БДПакеты,НомерПакетаИБазы,Знач Реквизит,Тип)
	Если Реквизит.Выбран()=0 Тогда
		Возврат 0
	КонецЕсли;
	
	Если Сокрлп(Реквизит.IDD)<>"" Тогда
		БДПакеты.Ключ.IDD=Реквизит.IDD;
		БДПакеты.Ключ.IDDDB=НомерПакетаИБазы;
		Рез=БДПакеты.НайтиПоКлючу(0);
		Если Рез=1 Тогда
			Если Сокрлп(БДПакеты.VIDD)<>Сокрлп(Реквизит.Вид()) Тогда
				Рез=0;//нашли такой же IDD, но это другой вид
				//вообще таких случаев не должно быть, за исключением ситуаций,
				//когда передавались два справочника в один
			КонецЕсли;
		КонецЕсли;
	Иначе
		Рез=0;
	КонецЕсли;
	
	Если Рез=0 Тогда
		ДобавитьВПакетОбъект(БДПакеты,НомерПакетаИБазы,Реквизит,Тип);
	КонецЕсли;
	Возврат 1-Рез;
КонецФункции //ДобавитьВПакетОбъектСПроверкой





//_____________________________________________________________________________
Функция ВключитьВСписокВыгрузки(Док,Список)
	Спр=Док;
	Пока ТЛист.AttrNext()=1 Цикл
		Попытка
			Атрибут=Спр.ПолучитьАтрибут(ТЛист.Name);	
			ТЛист.AttrValue=ПолучитьПредставлениеОбъекта(Атрибут);
			Тип=ТипЗначения(Атрибут);
			Если (Тип=11)Или(Тип=12) Тогда
				Список.ДобавитьЗначение(Атрибут,Тип);
			КонецЕсли;
		Исключение
			Сообщить(ОписаниеОшибки()+" ("+ТЛист.Name+")","I");
		КонецПопытки;
	КонецЦикла;

	Пока ТЛист.HistoryNext()=1 Цикл
		Попытка
			Атрибут=Спр.ПолучитьАтрибут(ТЛист.Name);	
			ТЛист.AttrValue=ПолучитьПредставлениеОбъекта(Атрибут);
			Тип=ТипЗначения(Атрибут);
			Если (Тип=11)Или(Тип=12) Тогда
				Список.ДобавитьЗначение(Атрибут,Тип);
			КонецЕсли;
		Исключение
			Сообщить(ОписаниеОшибки()+" ("+ТЛист.Name+")","I");
		КонецПопытки;
	КонецЦикла;
	
	Пока ТЛист.FormulaNext()=1 Цикл
		Реквизит=ТЛист.Name;
		Если Сред(Реквизит,2,4)="IDD=" Тогда
		Иначе
			//Обычное задание выражения
			Стр=Сред(Реквизит,2);
			Шаблон("[Получить("+Стр+")]");
			Атрибут=глВыражение;
			ТЛист.AttrValue=ПолучитьПредставлениеОбъекта(Атрибут);
			Тип=ТипЗначения(Атрибут);
			Если (Тип=11)Или(Тип=12) Тогда
				Список.ДобавитьЗначение(Атрибут,Тип);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат 1;
КонецФункции 






//_____________________________________________________________________________
Процедура ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,Знач Реквизит,Знач ТипРеквизита,Знач Уровень=0)
	Перем А,А1,А2,СписокВыгрОб;
	ЦиклДокумента=0;
	//В данной процедуре выгружаем все реквизиты имеющие тип справочника или тип документ
	//в файл пакетов,причем рекурсивно т.е. у этого объекта тоже выгружаем реквизиты
	
	Если Реквизит.Выбран()=0 Тогда
		Возврат;
	КонецЕсли;
	Если Уровень>Число(МаксУровень) Тогда
		Возврат;//предельное число !!
	КонецЕсли;
	
	//собственно здесь все просто и комментарии не нужны, только замечу что:
	//информацию о доступных реквизитах объекта берем из таблицы правил выгрузки
	Если ДобавитьВПакетОбъектСПроверкой(БДПакеты,НомерПакетаИБазы,Реквизит,ТипРеквизита)=1 Тогда
		// а теперь надо пройтись по этому элементу
		СписокВыгрОб=СоздатьОбъект("СписокЗначений");
		Если ТипРеквизита=11 Тогда //справочник
			Вид=Реквизит.Вид();
			Рез=ТЛист.FindPath("Справочники/"+Вид+"/");
			Если Рез=1 Тогда
				Спр=СоздатьОбъект("Справочник."+Вид);
				Спр.ИспользоватьДату(ДатаК);
				Спр.НайтиЭлемент(Реквизит);
				ВключитьВСписокВыгрузки(Спр,СписокВыгрОб);
				ТЛист.AttrValueByName("#Удален",0);
				ТЛист.AttrValueByName("#ПомеченНаУдаление",Спр.ПометкаУдаления());
				ТЛист.AttrValueByName("#ЭтоГруппа",Спр.ЭтоГруппа());
				Если ТЛист.IsSave("Справочники/"+Вид)=0 Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипРеквизита=12 Тогда //документы
			//по документам
			Вид=Реквизит.Вид();
			Рез=ТЛист.FindPath("Документы/"+Вид+"/Шапка"+"/");
			Если Рез=1 Тогда
				Док=СоздатьОбъект("Документ");
				Док.НайтиДокумент(Реквизит);
				//---------------------------------------------------------------- операция
				Если Вид=ДокументОперации Тогда
					//пройдемся по проводкам и выловим субконто !!!
					Опер=СоздатьОбъект("Операция");
					Рез=Опер.НайтиОперацию(Реквизит);
					Если Рез=1 Тогда
						Опер.ВыбратьПроводки();
						Пока Опер.ПолучитьПроводку()=1 Цикл
							//Дебет
							Счет=Опер.Дебет.Счет;
							Если Счет.Выбран()=1 Тогда
								Для А=1 По Счет.КоличествоСубконто() Цикл
									Субконто=Опер.Дебет.Субконто(А); 
									ТипСубконто=ТипЗначения(Субконто);
									Если (ТипСубконто=11)Или(ТипСубконто=12) Тогда
										СписокВыгрОб.ДобавитьЗначение(Субконто,ТипСубконто);
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							//Кредит
							Счет=Опер.Кредит.Счет;
							Если Счет.Выбран()=1 Тогда
								Для А=1 По Счет.КоличествоСубконто() Цикл
									Субконто=Опер.Кредит.Субконто(А); 
									ТипСубконто=ТипЗначения(Субконто);
									Если (ТипСубконто=11)Или(ТипСубконто=12) Тогда
										СписокВыгрОб.ДобавитьЗначение(Субконто,ТипСубконто);
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;	
				КонецЕсли;
				//---------------------------------------------------------------- операция
				
				
				ВключитьВСписокВыгрузки(Док,СписокВыгрОб);
				ТЛист.AttrValueByName("#Удален",0);
				ТЛист.AttrValueByName("#ПомеченНаУдаление",Док.ПометкаУдаления());
				ТЛист.AttrValueByName("#ДатаДок",ПолучитьПредставлениеОбъекта(Док.ДатаДок));
				ТЛист.AttrValueByName("#ВремяДокумента",ПолучитьПредставлениеОбъекта(Док.ПолучитьВремя()));
				ТЛист.AttrValueByName("#Проведен",Док.Проведен());
				
				Рез=ТЛист.FindPath("Документы/"+Вид+"/Табличная часть/");
				Если Рез=1 Тогда
					Док.ВыбратьСтроки();
					Пока Док.ПолучитьСтроку()=1 Цикл
						ТЛист.NewLine();
						ВключитьВСписокВыгрузки(Док,СписокВыгрОб);
					КонецЦикла;
				КонецЕсли;
				Если ТЛист.IsSave("Документы/"+Вид)=0 Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Для А=1 По СписокВыгрОб.РазмерСписка() Цикл
			Стр="";
			Атрибут=СписокВыгрОб.ПолучитьЗначение(А,Стр);
			Тип1=Число(Стр);
			ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,Атрибут,Тип1,Уровень+1);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры //ДобавитьВПакетСВложеннымиДанными




//_____________________________________________________________________________
Процедура ДобавитьВсеПодчиненныеЭлементы(БДПакеты,НомерПакетаИБазы,ТекСпр);
		Для А=1 По СписокПодчиненных.РазмерСписка() Цикл
			Стр="";
			Если Сокрлп(СписокПодчиненных.ПолучитьЗначение(А,Стр))=Сокрлп(ТекСпр.Вид()) Тогда
				Спр=СоздатьОбъект("Справочник."+Стр);
				Спр.ИспользоватьВладельца(ТекСпр);
				Спр.ВыбратьЭлементы();
				Пока Спр.ПолучитьЭлемент()=1 Цикл
					Атрибут=Спр.ТекущийЭлемент();
					ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,Атрибут,11);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
КонецПроцедуры //ДобавитьВсеПодчиненныеЭлементы


//_____________________________________________________________________________
Процедура СоздатьНовыйПакетСИнформациейВыборочно(ВыгрБаза,БДПакеты,ВЫгрПакет,НачНомер=0)
	М_Состояние("Выгрузка выборочных данных в пакет ...");
	Если ДатаК<ДатаН Тогда
		ДатаК=ДатаН;
	КонецЕсли;
	НомерПОС=1000000+НачНомер;//при каждой записи уменьшаем на единицу
	//это из-за того, что реквизит записывается позже элемента,в котором он вызывается
	//поэтому далее мы будем сортировать по полю POS
	МаксУровень=ВыгрБаза.КоличествоУровнейВложенности;
	БДПакеты.ТекущийИндекс("IDD");
	БДПакеты.АвтоСохранение(0);
	НомерПакетаИБазы=Прав("0000000"+Сокрп(ВыгрБаза.IDD),7)+Сокрлп(ВЫгрПакет);
	
	Тип=ТипЗначения(ОбъектВыборочно);
	Выбран=0;
	Если (Тип=11)ИЛИ(Тип=12) Тогда
		Выбран=ОбъектВыборочно.Выбран();
	КонецЕсли;
	
	ТекСтр=ТипОбъектаВыборочно.ТекущаяСтрока();
	Если ТекСтр=0 Тогда
		Сообщить("Пропускаем выборочную выгрузку!!!");
		Возврат;
	КонецЕсли;
	Имя=ТипОбъектаВыборочно.ПолучитьЗначение(ТекСтр);
	Если Имя="Константы" Тогда
		Для ф=1 по Метаданные.Константа() Цикл
			П=Метаданные.Константа(ф).Периодический;
			Имя=Метаданные.Константа(ф).Идентификатор;
			БДПакеты.Добавить();
			БДПакеты.IDD=Имя;
			БДПакеты.TIP=95;
			БДПакеты.VIDD=Имя;
			БДПакеты.DATE1=ДатаН;
			БДПакеты.DATE2=ДатаК;
			БДПакеты.POS=0;
			БДПакеты.IDDDB=НомерПакетаИБазы;
			БДПакеты.Записать();
		КонецЦикла;
	ИначеЕсли Имя="Планы счетов" Тогда
		НомерПОСПлана=1;
		Попытка
			Для Ц=1 по ПланыСчетов.КоличествоЗначений() Цикл
				Об=СоздатьОбъект("Счет");
				Об.ИспользоватьПланСчетов(ПланыСчетов.ЗначениеПоНомеру(Ц));
				Об.ВыбратьСчета();
				Пока Об.ПолучитьСчет()>0 Цикл
					Счет=Об.ТекущийСчет();
					БДПакеты.Добавить();
					БДПакеты.IDD=Счет.Код;
					БДПакеты.TIP=94;
					БДПакеты.VIDD=ЗначениеВСтроку(Счет);
					БДПакеты.DATE1=ДатаН;
					БДПакеты.DATE2=ДатаК;
					БДПакеты.POS=1;
					БДПакеты.IDDDB=НомерПакетаИБазы;
					БДПакеты.Записать();
				КонецЦикла;
			КонецЦикла;
		Исключение
		КонецПопытки;
	ИначеЕсли Имя="Документ" Тогда
		Док=СоздатьОбъект("Документ");
		М_Состояние("Обработка документов...");
		Док.ВыбратьДокументы(ДатаН,ДатаК);
		Пока Док.ПолучитьДокумент()>0 Цикл
			ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,Док.ТекущийДокумент(),12);
		КонецЦикла;
	ИначеЕсли Имя="Справочник" Тогда
		Для ы=1 по Метаданные.Справочник() Цикл
			Ст=Метаданные.Справочник(ы).Идентификатор;
			Если (ст<>"ПравилаЗагрузки") и (ст<>"ПравилаВыгрузки") и (ст<>"ПериферийныеБазы") Тогда
				Спр=СоздатьОбъект("Справочник."+Ст);
				М_Состояние("Обработка "+Ст);
				Спр.ВыбратьЭлементы(0);
				Пока Спр.ПолучитьЭлемент()>0 Цикл 
					//В этом режиме выгружаются только справочники (без ссылок на документы)
					ДобавитьВПакетОбъектСПроверкой(БДПакеты,НомерПакетаИБазы,Спр.ТекущийЭлемент(),11);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Лев(Имя,11)="Справочник." Тогда
		Если Тип=11 Тогда
			//если выбран один элемент справочника для выгрузки:
			Если Выбран=1 Тогда
				Если ОбъектВыборочно.ЭтоГруппа()=0 Тогда
					Атрибут=ОбъектВыборочно;
					Если СПодчиненными=1 Тогда
						ДобавитьВсеПодчиненныеЭлементы(БДПакеты,НомерПакетаИБазы,Атрибут);
					КонецЕсли;
					ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,Атрибут,11);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			//если выбран весь справочник или группа:
			Спр=СоздатьОбъект(Имя);
			Спр.ИспользоватьВладельца(ОбъектВыборочно.Владелец);
			Если Выбран=1 Тогда
				Спр.ИспользоватьРодителя(ОбъектВыборочно);
			КонецЕсли;
			Спр.ВыбратьЭлементы();
			Пока Спр.ПолучитьЭлемент()=1 Цикл
				Атрибут=Спр.ТекущийЭлемент();
				Если СПодчиненными=1 Тогда
					ДобавитьВсеПодчиненныеЭлементы(БДПакеты,НомерПакетаИБазы,Атрибут);
				КонецЕсли;
				ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,Атрибут,Тип);
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли Лев(Имя,9)="Документ." Тогда
		Если Тип=12 Тогда
			Если Выбран=1 Тогда
				Атрибут=ОбъектВыборочно;
				Если СПодчиненными=1 Тогда
					ДокП=СоздатьОбъект("Документ");
					ДокП.ВыбратьПодчиненныеДокументы(ДатаН,ДатаК,Атрибут);
					Пока ДокП.ПолучитьДокумент()=1 Цикл
						АтрибутП=ДокП.ТекущийДокумент();
						ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,АтрибутП,Тип);
					КонецЦикла;
				КонецЕсли;
				ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,Атрибут,Тип);
			Иначе
				Док=СоздатьОбъект(Имя);
				Док.ВыбратьДокументы(ДатаН,ДатаК);
				Пока Док.ПолучитьДокумент()=1 Цикл
					Атрибут=Док.ТекущийДокумент();
					Если СПодчиненными=1 Тогда
						ДокП=СоздатьОбъект("Документ");
						ДокП.ВыбратьПодчиненныеДокументы(ДатаН,ДатаК,Атрибут);
						Пока ДокП.ПолучитьДокумент()=1 Цикл
							АтрибутП=ДокП.ТекущийДокумент();
							ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,АтрибутП,Тип);
						КонецЦикла;
					КонецЕсли;
					ДобавитьВПакетСВложеннымиДанными(БДПакеты,НомерПакетаИБазы,Атрибут,Тип);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //СоздатьНовыйПакетСИнформациейВыборочно



//_____________________________________________________________________________
Функция УдалитьИнформациюОПакете(БДПакеты,Ключ);
	М_Состояние("Удаляется информация о пакете "+Ключ);
	БДПакеты.ТекущийИндекс("IDDDB");
	БДПакеты.ПоказыватьУдаленные(0);
	Пока БДПакеты.Найти(Ключ,0)=1 Цикл
		//мы спозиционировались на первом элементе участка ненужных пакетов
		Пока Сокрп(БДПакеты.IDDDB)=Ключ Цикл
			БДПакеты.Удалить();                  //т.е. удаляем весь участок
			БДПакеты.Следующая();
			Если БДПакеты.ВКонце()=1 Тогда     //т.к. может этот участок был последним ...
				Возврат 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат 1;
КонецФункции //УдалитьИнформациюОПакете


//_____________________________________________________________________________
Функция СформироватьЗаПериод(БДПакеты,НомерПакетаИБазы)
	Состояние("Формирование списка всех объектов базы");
	//планы счетов
	Попытка
		Для Ц=1 по ПланыСчетов.КоличествоЗначений() Цикл
			Об=СоздатьОбъект("Счет");
			Об.ИспользоватьПланСчетов(ПланыСчетов.ЗначениеПоНомеру(Ц));
			Об.ВыбратьСчета();
			Пока Об.ПолучитьСчет()>0 Цикл
				Счет=Об.ТекущийСчет();
				БДПакеты.Добавить();
				БДПакеты.IDD=Счет.Код;
				БДПакеты.TIP=94;
				БДПакеты.VIDD=ЗначениеВСтроку(Счет);
				БДПакеты.DATE1=ДатаН;
				БДПакеты.DATE2=ДатаК;
				БДПакеты.POS=0;
				БДПакеты.IDDDB=НомерПакетаИБазы;
				БДПакеты.Записать();
			КонецЦикла;
		КонецЦикла;
	Исключение
	КонецПопытки;

	
	//справочники	
	Для ы=1 по Метаданные.Справочник() Цикл
		КолПрогрессора=КолПрогрессора+10;
		Прогрессор(КолПрогрессора);//**************** прогрессор
		Ст=Метаданные.Справочник(ы).Идентификатор;
		Если (ст<>"ПравилаЗагрузки") и (ст<>"ПравилаВыгрузки") и (ст<>"ПериферийныеБазы") Тогда
			Спр=СоздатьОбъект("Справочник."+Ст);
			М_Состояние("Обработка "+Ст);
			Спр.ВыбратьЭлементы(0);
			Пока Спр.ПолучитьЭлемент()>0 Цикл
				ДобавитьВПакетОбъект(БДПакеты,НомерПакетаИБазы,Спр.ТекущийЭлемент(),11);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;


	
	//документы
	Док=СоздатьОбъект("Документ");
	М_Состояние("Обработка документов...");
	Док.ВыбратьДокументы(ДатаН,ДатаК);
	Пока Док.ПолучитьДокумент()>0 Цикл
		ДобавитьВПакетОбъект(БДПакеты,НомерПакетаИБазы,Док.ТекущийДокумент(),12);
	КонецЦикла;


	//константы
	Для А=1 по Метаданные.Константа() Цикл
		ИмяКонстанты=Метаданные.Константа(А).Идентификатор;
		БДПакеты.Добавить();
		БДПакеты.IDD=ИмяКонстанты;
		БДПакеты.TIP=95;
		БДПакеты.VIDD=ИмяКонстанты;
		БДПакеты.DATE1=ДатаН;
		БДПакеты.DATE2=ДатаК;
		БДПакеты.POS=0;
		БДПакеты.IDDDB=НомерПакетаИБазы;
		БДПакеты.Записать();
	КонецЦикла;
	Возврат 1;		
КонецФункции 
//_____________________________________________________________________________

Функция ВыгрузитьИзмененияВОднуБазу(ВыгрБаза)
	ПЕрем БДИзменения,БДУдаления,БДПакеты;
	
	ПередачаПравилВОЛЕ(ВыгрБаза,"ПравилаВыгрузки");
	
	//НоваяВыгрузка
	ИмяТекстовогоФайла=СокрЛП(ПутьКБазеПриВыгрузке)+"\"+СокрЛП(НомерПакетаВыгрузки)+".mod";
	Если СтрДлина(Сокрлп(ПутьКБазеПриВыгрузке))>2 Тогда
		Если ФС.СуществуетФайл(ПутьКБазеПриВыгрузке)=0 Тогда
			Предупреждение("В базе "+ВыгрБаза+" неправильно задан путь выгрузки !
			| Данные выгружаться не будут.",10);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	//открываем файлы где копятся изменения и где фиксируются все удаления
	//БДМОД=0;БДУдаленийМОД=0;БДПакетыМОД=0;
	Если ОткрытьФайлМОДПоИмени(БДИзменения,"Изменения","_tran1")=0 Тогда
		Предупреждение("Ошибка открытия базы ""Изменений"" - возможно она занята другим пользователем",10);
		Возврат 0;
	КонецЕсли;
	Если ОткрытьФайлМОДПоИмени(БДУдаления,"Удаления","_tran3")=0 Тогда
		Предупреждение("Ошибка открытия базы ""Удалений"" - возможно она занята другим пользователем",10);
		Возврат 0;
	КонецЕсли;
	Если ОткрытьФайлМОДПоИмени(БДПакеты,"Пакеты","_tran2")=0 Тогда //это открывается временный файл !!!
		Предупреждение("Ошибка открытия базы ""Пакеты"" - возможно она занята другим пользователем",10);
		Возврат 0;
	КонецЕсли;
	
	М_Сообщить("Обрабатывем удаленные объекты...");
	//добавляем удаленные объекты в базу изменений
	ДобавитьУдаленныеОбъектыВ_БазуИзменений(БДИзменения,БДУдаления);
	
	//Для всех баз формируем пакеты
	//если уже есть пакеты с пустыми номерами (т.е. = "_") для отправки, то задаем им номера
	
	ВыбрБаза=ВыгрБаза;
	
	//Смотрим режим работы
	Если МаксНомерПакетаВыгрузки=НомерПакетаВыгрузки Тогда
		//это формируется новый пакет
		Если РежимВыгрузки=1 Тогда
			//пройдемся по всем базам и допишем все изменения в базу пакетов
			Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
			//формируем пустые номера пакетов для баз отличных от заданных и с конкретным номером - в ином случае
			Спр.ВыбратьЭлементы();
			Пока Спр.ПолучитьЭлемент()=1 Цикл
				Если (Спр.Выгрузка=1)или(ВыгрБаза=Спр.ТекущийЭлемент()) Тогда
					М_Сообщить("Подготавливаем данные для базы "+Спр.Наименование);
					НомПакета="_";
					СформироватьНовыйПакет(БДИзменения,БДПакеты,Спр.ТекущийЭлемент(),НомПакета);
				КонецЕсли;
			КонецЦикла;
			БДИзменения.ОчиститьФайл();
			
			//**************** переформирование пакета и контроль длины
			//Изменяем пакеты с номерами "_" в номера 	НомерПакетаВыгрузки
			//одновременно, если число объектов в пакете превысило допустимый размер,
			//то будет сформирован новый пакет и т.д. ...
			ИзНомеров="_";
			ВНомера=НомерПакетаВыгрузки;
			ПереформироватьПакет(БДПакеты,ВыгрБаза,ВНомера,ИзНомеров);
			//****************
		ИначеЕсли РежимВыгрузки=2 Тогда
			//если режим выгрузки за период,то
			М_Сообщить("Режим выгрузки за период...");
			НомерПакетаВыгрузки=МаксНомерПакетаВыгрузки;//т.е. всегда создаем новый пакет !!!
			НомерПакетаИБазы=Прав("0000000"+Сокрп(Сокрп(ВыгрБаза.IDD)),7)+"П";
			Рез=СформироватьЗаПериод(БДПакеты,НомерПакетаИБазы);
			Если Рез=0 Тогда
			    Возврат 0;
			КонецЕсли;
			
			
			//**************** переформирование пакета и контроль длины
			//Изменяем пакеты с номерами "_" в номера 	НомерПакетаВыгрузки
			//одновременно, если число объектов в пакете превысило допустимый размер,
			//то будет сформирован новый пакет и т.д. ...
			ИзНомеров="П";
			ВНомера=НомерПакетаВыгрузки;
			ПереформироватьПакет(БДПакеты,ВыгрБаза,ВНомера,ИзНомеров);
			//****************
		ИначеЕсли РежимВыгрузки=3 Тогда
			//если режим выгрузки выборочно
			М_Сообщить("Режим выборочной выгрузки ...");
			НомерПакетаВыгрузки=МаксНомерПакетаВыгрузки;//т.е. всегда создаем новый пакет !!!
			СоздатьНовыйПакетСИнформациейВыборочно(ВыгрБаза,БДПакеты,"В");
			
			//**************** переформирование пакета и контроль длины
			//Изменяем пакеты с номерами "_" в номера 	НомерПакетаВыгрузки
			//одновременно, если число объектов в пакете превысило допустимый размер,
			//то будет сформирован новый пакет и т.д. ...
			ИзНомеров="В";
			ВНомера=НомерПакетаВыгрузки;
			ПереформироватьПакет(БДПакеты,ВыгрБаза,ВНомера,ИзНомеров);
			//****************
		ИначеЕсли РежимВыгрузки=4 Тогда
			//если режим выгрузки по списку значения
			М_Сообщить("Режим выгрузки по списку значения ...");
			Если ТипЗначенияСтр(СписокВыборочнойВыгрузки)<>"СписокЗначений" Тогда
			М_Сообщить("Не указан список выгрузки объектов. Выгрузка отменена.");
			    Возврат 0;
			КонецЕсли;	

			КолВыгрузки=СписокВыборочнойВыгрузки.РазмерСписка();
			Если КолВыгрузки<1 Тогда
				М_Сообщить("Список выгрузки пустой. Выгрузка отменена.");
			    Возврат 0;
			КонецЕсли;	

			НомерПакетаВыгрузки=МаксНомерПакетаВыгрузки;//т.е. всегда создаем новый пакет !!!
			НомерПакетаИБазы=Прав("0000000"+Сокрп(Сокрп(ВыгрБаза.IDD)),7)+"С";
			
			Для А=1 По КолВыгрузки Цикл
				ВыгрОбъект=СписокВыборочнойВыгрузки.ПолучитьЗначение(А);
				ДобавитьВПакетОбъект(БДПакеты,НомерПакетаИБазы,ВыгрОбъект,ТипЗначения(ВыгрОбъект));
			КонецЦикла;
			
			//**************** переформирование пакета и контроль длины
			//Изменяем пакеты с номерами "_" в номера 	НомерПакетаВыгрузки
			//одновременно, если число объектов в пакете превысило допустимый размер,
			//то будет сформирован новый пакет и т.д. ...
			ИзНомеров="С";
			ВНомера=НомерПакетаВыгрузки;
			ПереформироватьПакет(БДПакеты,ВыгрБаза,ВНомера,ИзНомеров);
		КонецЕсли;
		
		//заполняем переменные цикла выгрузки (т.е. какие пакеты собственно надо выгружать)
		//Одновременно смотрим может надо повторить предыдущие пакеты
		НомерОт=НомерПодтвержденногоПакетаЗагрузки+1;
		НомерДо=НомерПакетаВыгрузки;
		
		ПропускатьДо=ПолучитьНомерПакетаВыгрузки(ВыгрБаза);
		ПропускатьОт=ПропускатьДо-ВыгрБаза.КоличествоЦиклов+1;
		
	Иначе
		//это повтор ранее выгруженного пакета
		М_Сообщить("Режим повтора пакета № "+НомерПакетаВыгрузки+" ...");
		//выгружаем только какой-то один пакет (ручной повтор выгрузки)
		НомерОт=НомерПакетаВыгрузки;
		НомерДо=НомерПакетаВыгрузки;
		
		ПропускатьОт=НомерДо;//ставим одинаковые параметры - т.е. на самом деле ничего не пропускаем
		ПропускатьДо=НомерДо;
		
	КонецЕсли;
	
	
	Для ААА=НомерОт По НомерДо Цикл
		Если (ААА>=ПропускатьОт)И(ААА<ПропускатьДо) Тогда
			Продолжить;
		КонецЕсли;
		
		М_Сообщить("Выгружаем пакет № "+ААА);
		Если ОбработкаПримера=1 Тогда
			ПодИмяПакета="sample";
		Иначе
			ПодИмяПакета=СокрЛП(ААА);
		КонецЕсли;
		ИмяТекстовогоФайла=СокрЛП(ПутьКБазеПриВыгрузке)+"\"+ПодИмяПакета+".mod";
		Рез=НовыйПакет(ВыгрБаза,ИмяТекстовогоФайла);
		Если Рез<>1 Тогда
		    Возврат Рез;
		КонецЕсли;
		
		КакПомечать=ААА;
		КакиеВыгружать=ААА;
		Рез=ВыгрузитьТело(БДПакеты,ВыгрБаза,КакПомечать,КакиеВыгружать,ААА);
		М_Сообщить("Записываем файл "+ИмяТекстовогоФайла);
		ЧислоВыгрОбъектов=ТЛист.Save();
		М_Сообщить("Число выгруженных объектов="+ЧислоВыгрОбъектов);
	КонецЦикла;

	
	Если ВыгрБаза.КоличествоЦиклов=0 Тогда //это режим без подтверждения пакетов
		//поэтому удаляем информацию о пакете
		Подтверждение(ВыгрБаза,НомерПакетаВыгрузки);
		БДПакеты.Сжать();
		НомерПодтвержденногоПакетаЗагрузки=НомерПакетаВыгрузки;
	КонецЕсли;
	
	
	БДПакеты.ЗакрытьФайл();
	БДИзменения.ЗакрытьФайл();
	БДУдаления.ЗакрытьФайл();
	Возврат 1;
КонецФункции

//_____________________________________________________________________________

//_____________________________________________________________________________
Функция ВыгрузитьВФТП()
	//подготавливаем файл с командами ftp
	ВременныйСкриптФайл="InetFTP.tmp";
	Т=СоздатьОбъект("Текст");
	Т.ДобавитьСтроку("open "+Сокрлп(База.АдресСервера));
	Т.ДобавитьСтроку(Сокрлп(База.Логин));
	Т.ДобавитьСтроку(Сокрлп(База.Пароль));
	Т.ДобавитьСтроку("prompt");
	Т.ДобавитьСтроку("binary");
	Т.ДобавитьСтроку("mkdir "+Сокрлп(База.КаталогВыгрузки));
	Т.ДобавитьСтроку("cd "+Сокрлп(База.КаталогВыгрузки));
	Т.ДобавитьСтроку("put flag.mod"); //посылаем проверочный флаг
	Т.ДобавитьСтроку("mput *.mod");//get 
	Т.ДобавитьСтроку("mput *.a??");//get 
	Т.ДобавитьСтроку("get flag.mod flag2.mod");//считываем - его
	Т.ДобавитьСтроку("quit");//выход
	
	Т.Записать(ПутьКБазеПриВыгрузке+"\"+ВременныйСкриптФайл);
	
	ФайлФлага=ПутьКБазеПриВыгрузке+"\flag.mod";
	ФайлФлага2=ПутьКБазеПриВыгрузке+"\flag2.mod";
	Т=СоздатьОбъект("Текст");
	Т.ДобавитьСтроку("=Проверка связи=");
	Т.Записать(ФайлФлага);
	Если ФС.СУществуетФайл(ФайлФлага2)=1 Тогда
		ФС.УдалитьФайл(ФайлФлага2);
	КонецЕсли;
	
	Фс.УстТекКаталог(ПутьКБазеПриВыгрузке);
	Команда="ftp -s:"""+ВременныйСкриптФайл+""">ftp_out.log";
	КомандаСистемы(Команда);
	Фс.УдалитьФайл(ПутьКБазеПриВыгрузке+"\"+ВременныйСкриптФайл);
	Рез=ФС.СУществуетФайл(ФайлФлага2); //если файл существует, то соединение было успешное
	Возврат Рез;
КонецФункции 

//_____________________________________________________________________________
Процедура ЗаполнитьИнфоМОД()
	Перем Мас[5];
	Мас[1]="Изм.";
	Мас[2]="Пер.";
	Мас[3]="Выб.";
	
	//выгрузка
	ВыгрузкаИнфо="";
	Если Выгрузка=1 Тогда
		ВыгрузкаИнфо="Выгрузка:";
		ВыгрузкаИнфо=ВыгрузкаИнфо+Мас[РежимВыгрузки];
		Если РежимВыгрузки>1 Тогда
			ВыгрузкаИнфо=ВыгрузкаИнфо+Лев(Строка(ДатаН),5);
			ВыгрузкаИнфо=ВыгрузкаИнфо+"- "+Лев(Строка(ДатаК),5);
		КонецЕсли;
		ВыгрузкаИнфо=ВыгрузкаИнфо+?(ПризнакОтправленияMD=1," MD ","     ");
		ВыгрузкаИнфо=ВыгрузкаИнфо+?(ВыгружатьШапкуПакетовОтдельно=1,"Ш.отд.","Ш.вн.");
	КонецЕсли;
	
	//загрузка
	ЗагрузкаИнфо="";
	Если Загрузка=1 Тогда
		ЗагрузкаИнфо="Загрузка:";
		ЗагрузкаИнфо=ЗагрузкаИнфо+?(ПриоритетностьБазы=1,"Приор.","     ");
		ЗагрузкаИнфо=ЗагрузкаИнфо+?(МиграцияИзменений=1,"Мигр.","     ");
		ЗагрузкаИнфо=ЗагрузкаИнфо+?(ИспользоватьТранзакцию=1,"Общ.транз.","Част.транз.");
		ЗагрузкаИнфо=ЗагрузкаИнфо+?(ПризнакПолученияMD=1,"MD","    ");
	КонецЕсли;
	
	//Общие парамметры
	ОбщиеИнфо="Общие:     ";
	ОбщиеИнфо=ОбщиеИнфо+?(База.ВстроеннаяАрхивация=1,"Архивация","      ");
	ОбщиеИнфо=ОбщиеИнфо+?(База.ИспользоватьФТП=1," FTP","");
	ОбщиеИнфо=ОбщиеИнфо+?(База.ПередачаПоПочте=1," E-Mail","");
	
	
	Форма.Обновить();
КонецПроцедуры //ЗаполнитьИнфоМОД
//_____________________________________________________________________________

Функция Выгрузить()
	ЗаполнитьИнфоМОД();
	М_Состояние("Подготовка выгрузки изменений ...");
	Форма.ИспользоватьСлой("Инфо",1);
	НомерПакетаВыгрузкиДляАрхива=НомерПакетаВыгрузки;
	
	Рез=ВыгрузитьИзмененияВОднуБазу(База);
	Если Рез=0 Тогда
		Возврат 0;
	КонецЕсли;
	
	
	
	ИмяТекстовогоФайла=СокрЛП(ПутьКБазеПриВыгрузке)+"\"+Сокрлп(Строка(НомерПакетаВыгрузки))+".mod";
	
	Если ПризнакОтправленияMD=1 Тогда
		А0="";А1="";А2="";А3="";А4="";
		ФайлИсточникMD=КаталогБазыДанных()+"1cv7.md";
		Фс.АтрибутыФайла(ФайлИсточникMD,А0,А1,А2,А3,А4);
		Версия=Сокрлп(""+Сокрлп(А0)+Сокрлп(А1)+Сокрлп(А2)+Сокрлп(А4));
		СтараяВерсия=Сокрлп(База.MD);
		Если Версия<>СтараяВерсия Тогда
			Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
			Спр.НайтиЭлемент(База);
			Спр.MD=Версия;
			Спр.Записать();
			ФайлMD=СокрЛП(ПутьКБазеПриВыгрузке)+"\1cv7.md";
			Фс.УдалитьФайл(ФайлMD);
			ФС.КопироватьФайл(ФайлИсточникMD,ФайлMD,0);
			М_Сообщить("Скопирован md-файл в каталог выгрузки пакетов...");
		КонецЕсли;
	КонецЕсли;
	
	Если (Сокрлп(База.СкриптШаблонВыгрузки)<>"")И(Сокрлп(База.СкриптРабочийВыгрузки)<>"") Тогда
		ОбработатьСкрипт(База.СкриптШаблонВыгрузки,База.СкриптРабочийВыгрузки);
	КонецЕсли;
	
	Если ВстроеннаяАрхивация=1 Тогда
		//выполняем архивирование и удаление пакетов
		ФС.УстТекКаталог(ПутьКБазеПриВыгрузке);
		//подготовка имен и ключей ...
		ИмяАрхива=База.ПрефиксАрхиваВыгрузки;//
		ИмяАрхива=Сокрлп(ИмяАрхива)+Строка(НомерПакетаВыгрузкиДляАрхива)+".arj";
		Размер="";
		Если База.РазмерАрхива>9 Тогда
			Размер=" -v"+Сокрлп(База.РазмерАрхива)+"k";
		КонецЕсли;
		Пароль="";
		Если Сокрлп(База.ПарольАрхива)<>"" Тогда
			Пароль=" -g"+Сокрп(База.ПарольАрхива);
		КонецЕсли;
		
		//перенос файлов в архив
		Команда=""""+КаталогИБ()+"arj.exe"""+" m"+Размер+Пароль+" -y "+ИмяАрхива+" *.xml *.md";
		КомандаСистемы(Команда);
		                        
		
	КонецЕсли;
	
	Если СокрЛП(База.КомандаПриВыгрузке)<>"" Тогда
		КомандаСистемы(База.КомандаПриВыгрузке);
	КонецЕсли;
	Если ИспользоватьФТП=1 Тогда
		//передача через Интернет
		Состояние("Отправление пакетов по FTP");
		Пока ВыгрузитьВФТП()=0 Цикл
			Сообщить("Соединение не получилось !");
			Рез=Вопрос("Выгрузка на ftp-сервер не удалась.
			|Повторить попытку ?",1,50);
			Если Рез=2 Тогда //нажата кнопка отмена !!
				Возврат 0;
			КонецЕсли;
		КонецЦикла;
		ОчиститьКаталог(ПутьКБазеПриВыгрузке);	
	ИначеЕсли ПередачаПоПочте=1 Тогда
		Состояние("Отправление пакетов по E-Mail");
		Попытка
			Почта=СоздатьОбъект("Mod.Mail");
		Исключение
			//объект еще не инициализирован, т.е. первая отправка почты из МОД
			//при исталляции МОД соответствующая программа работы с E-Mail должна
			//быть записана в каталог ИБ
			Состояние("Первичный запуск программы E-Mail");
			ЗапуститьПриложение(КаталогИБ()+"MODMail.exe");
			Для А=1 По 3 Цикл
				Время=ТекущееВремя();
				Пока Время=ТекущееВремя() Цикл
				КонецЦикла;
			КонецЦикла;
			Состояние("Отправление пакетов по E-Mail");
			
			//дубль два !
			Попытка
				Почта=СоздатьОбъект("Mod.Mail");
			Исключение
				Сообщить("Невозможно создать OLE-объект для работы с электронной почтой !","!");
				Сообщить("Отправка по E-Mail невозможна !","!");
				Возврат 0;
			КонецПопытки;
		КонецПопытки;
		
		Почта.Подключиться(Сокрлп(Константа.IDD),Сокрлп(Константа.ПарольМОД),"","");
		Почта.НовоеСообщение();
		ОбратныйАдрес=База.ОбратныйАдрес;
		Почта.ОбратныйАдрес=Константа.IDD+"@pb.ru";
		Почта.ДобавитьАдрес(База.АдресПолучателя);
		
		
		Почта.Заголовок=База.ЗаголовокДляОтправки;
		Почта.Текст="Пакеты Менеджера обмена данными ("+ТекущаяДата()+")";
		Почта.ИмяОтправителя=ИмяМОД+"-ИД-"+Константа.IDD;


		//присоединяем пакеты МОД
		Стр=Сокрлп(ФС.НайтиПервыйФайл(Сокрлп(ПутьКБазеПриВыгрузке)+"\*.mod"));
		Пока Стр<>"" Цикл
			Почта.ДобавитьФайл(Сокрлп(ПутьКБазеПриВыгрузке)+"\"+Стр);
			Стр=Сокрлп(ФС.НайтиСледующийФайл());
		КонецЦикла;
		
		//присоединяем архивы МОД
		Стр=Сокрлп(ФС.НайтиПервыйФайл(Сокрлп(ПутьКБазеПриВыгрузке)+"\*.a??"));
		Пока Стр<>"" Цикл
			Почта.ДобавитьФайл(Сокрлп(ПутьКБазеПриВыгрузке)+"\"+Стр);
			Стр=Сокрлп(ФС.НайтиСледующийФайл());
		КонецЦикла;
		
		
		
		//посылаем по почте базе с номером IDD
		Почта.Послать(База.IDD);
		
		УспешноеЗавершение=Почта.УспешноеЗавершение();
		Почта.Отключиться();
		Почта=0;
		
		//все пакеты отправлены по E-Mail - удаляем их из нашей базы
		ОчиститьКаталог(ПутьКБазеПриВыгрузке);	
	КонецЕсли;
	
	
	//увеличиваем счетчик пакетов
	Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
	Спр.НайтиЭлемент(База);
	Если НомерПакетаВыгрузки=МаксНомерПакетаВыгрузки Тогда
		НомерПакетаВыгрузки=НомерПакетаВыгрузки+1;
		МаксНомерПакетаВыгрузки=НомерПакетаВыгрузки;
		База=Спр.ТекущийЭлемент();
		//а теперь позиционируемся на ведущий элемент (по которому ведется сквозная нумерация пакетов)
		ПолучитьНомерПакетаВыгрузки(Спр.ТекущийЭлемент(),Спр);
		Спр.НомерПакетаВыгрузки=НомерПакетаВыгрузки;
		Спр.НомерПодтвержденногоПакетаЗагрузки=НомерПодтвержденногоПакетаЗагрузки;
		Спр.Записать();
		
		ЗаполнитьСписокПакетов();
	КонецЕсли;//иначе повтор ранее отосланного пакета
	М_Сообщить("Выгрузка данных завершена");
	Возврат 1;
КонецФункции //Выгрузить

//_____________________________________________________________________________

Функция Подтверждение(ВыгрБаза="",Знач Номер="",Интерактивно=0)
	ПЕрем БДПакеты;
	Если ВыгрБаза="" Тогда
		ВыгрБаза=База;
		Если База.Выбран()=0 Тогда
			Предупреждение("Не выбрана база, из которой получено подтверждение !",10);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Если Номер="" Тогда
		Номер=НомерПакетаВыгрузки;
	КонецЕсли;
	
	Если Номер=0 Тогда
		Возврат 1;
	КонецЕсли;
	
	Если Номер>=МаксНомерПакетаВыгрузки Тогда
		Номер=МаксНомерПакетаВыгрузки-1;
	КонецЕсли;
	
	Если Интерактивно=0 Тогда
	    ПодПрефикс="_";
	Иначе
	    ПодПрефикс="";
	КонецЕсли;    
	//БДМОД=0;БДУдаленийМОД=0;БДПакетыМОД=0;
	Если ОткрытьФайлМОДПоИмени(БДПакеты,"Пакеты",ПодПрефикс+"tran2")=0 Тогда
		Предупреждение("Ошибка открытия базы ""Пакеты"" при попытке подтверждения - возможно она занята другим приложением",10);
		Возврат 0;
	КонецЕсли;
	
	М_Состояние(ВыгрБаза.Наименование+" - удаление подтвержденных пакетов.");
	
	//здесь цикл для того, чтобы удалить более ранние пакеты
	Для А=ПолучитьНомерПодтвержденногоПакетаЗагрузки(ВыгрБаза) По Номер Цикл
		Ключ=Прав("0000000"+Сокрлп(Сокрп(ВыгрБаза.IDD)),7)+Строка(А);
		Рез=УдалитьИнформациюОПакете(БДПакеты,Ключ);
	КонецЦикла;
	
	БДПакеты.Сжать();
	БДПакеты=0;
	
	
	
	Спр="";
	Если Число(ПолучитьНомерПодтвержденногоПакетаЗагрузки(ВыгрБаза,Спр))<Номер Тогда
		Спр.НомерПодтвержденногоПакетаЗагрузки=Номер;
		НомерПодтвержденногоПакетаЗагрузки=Номер;
	КонецЕсли;//иначе повтор ранее отосланного пакета
	Спр.Записать();
	ЗаполнитьСписокПакетов();
	Возврат 1;
КонецФункции//УстноеПодтверждени

//_____________________________________________________________________________
Функция ЗагрузитьИзФТП()
	//подготавливаем файл с командами ftp
	ВременныйСкриптФайл="InetFTP.tmp";
	Т=СоздатьОбъект("Текст");
	Т.ДобавитьСтроку("open "+Сокрлп(База.АдресСервера));
	Т.ДобавитьСтроку(Сокрлп(База.Логин));
	Т.ДобавитьСтроку(Сокрлп(База.Пароль));
	Т.ДобавитьСтроку("prompt");
	Т.ДобавитьСтроку("binary");
	Т.ДобавитьСтроку("mkdir "+Сокрлп(База.КаталогЗагрузки));
	Т.ДобавитьСтроку("cd "+Сокрлп(База.КаталогЗагрузки));
	//	Т.ДобавитьСтроку("get flag.mod"); //получаем проверочный флаг
	Т.ДобавитьСтроку("mget *");
	Т.ДобавитьСтроку("quit");//выход
	Т.Записать(ПутьКБазеПриЗагрузке+"\"+ВременныйСкриптФайл);
	
	ФайлФлага=ПутьКБазеПриЗагрузке+"\flag.mod";
	Если ФС.СУществуетФайл(ФайлФлага)=1 Тогда
		ФС.УдалитьФайл(ФайлФлага);
	КонецЕсли;
	
	Фс.УстТекКаталог(ПутьКБазеПриЗагрузке);
	Команда="ftp -s:"""+ВременныйСкриптФайл+""">ftp_in.log";
	КомандаСистемы(Команда);
	
	Рез=ФС.СУществуетФайл(ФайлФлага); //если файл существует, то соединение было успешное
	Если Рез=1 Тогда //надо очистить каталог ftp
		ВременныйСкриптФайл="InetFTP.tmp";
		Т=СоздатьОбъект("Текст");
		Т.ДобавитьСтроку("open "+Сокрлп(База.АдресСервера));
		Т.ДобавитьСтроку(Сокрлп(База.Логин));
		Т.ДобавитьСтроку(Сокрлп(База.Пароль));
		Т.ДобавитьСтроку("prompt");
		Т.ДобавитьСтроку("binary");
		Т.ДобавитьСтроку("mkdir "+Сокрлп(База.КаталогЗагрузки));
		Т.ДобавитьСтроку("cd "+Сокрлп(База.КаталогЗагрузки));
		Т.ДобавитьСтроку("mdelete *");
		Т.ДобавитьСтроку("quit");//выход
		Т.Записать(ПутьКБазеПриЗагрузке+"\"+ВременныйСкриптФайл);
		
		Команда="ftp -s:"""+ВременныйСкриптФайл+""">ftp_del.log";
		КомандаСистемы(Команда);
	КонецЕсли;
	Фс.УдалитьФайл(ПутьКБазеПриЗагрузке+"\"+ВременныйСкриптФайл);
	
	Возврат Рез;
КонецФункции 
//_____________________________________________________________________________


Процедура Загрузить()
	ЗаполнитьИнфоМОД();
	Форма.ИспользоватьСлой("Инфо",1);
	
	
	СопоставлятьПеречисления=1;
	ПришлоТолькоПодтверждение=0;
	ИмяТекстовогоФайла=СокрЛП(ПутьКБазеПриЗагрузке)+"\"+СокрЛП(Строка(Число(НомерПакетаЗагрузки)))+".mod";
	
	
	Если (Сокрлп(База.СкриптШаблонЗагрузки)<>"")И(Сокрлп(База.СкриптРабочийЗагрузки)<>"") Тогда
		ОбработатьСкрипт(База.СкриптШаблонЗагрузки,База.СкриптРабочийЗагрузки);
	КонецЕсли;
	
	Если СокрЛП(База.КомандаПриЗагрузке)<>"" Тогда
		КомандаСистемы(База.КомандаПриЗагрузке);
	КонецЕсли;
	Если ИспользоватьФТП=1 Тогда
		//прием из Интернета
		Состояние("Прием пакетов по FTP");
		Пока ЗагрузитьИзФТП()=0 Цикл
			Сообщить("Соединение не получилось !");
			Рез=Вопрос("Загрузка из ftp-сервера не удалась или нет данных.
			|Повторить попытку ?",1,50);
			Если Рез=2 Тогда //нажата кнопка отмена !!
				Возврат ;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ПередачаПоПочте=1 Тогда
		Состояние("Прием пакетов по E-Mail");
		Попытка
				Почта=СоздатьОбъект("Mod.Mail");
		Исключение
			//объект еще не инициализирован, т.е. первая отправка почты из МОД
			//при исталляции МОД соответствующая программа работы с E-Mail должна
			//быть записана в каталог ИБ
			Состояние("Первичный запуск программы E-Mail");
			ЗапуститьПриложение(КаталогИБ()+"MODMail.exe");
			Для А=1 По 3 Цикл
				Время=ТекущееВремя();
				Пока Время=ТекущееВремя() Цикл
				КонецЦикла;
			КонецЦикла;
			Состояние("Прием пакетов по E-Mail");
			
			//дубль два !
			Попытка
				Почта=СоздатьОбъект("Mod.Mail");
			Исключение
				Сообщить("Невозможно создать OLE-объект для работы с электронной почтой !","!");
				Сообщить("Получение пакетов по E-Mail невозможно !","!");
				Возврат ;
			КонецПопытки;
		КонецПопытки;
		
		Почта.Подключиться(Сокрлп(Константа.IDD),Сокрлп(Константа.ПарольМОД),ПутьКБазеПриЗагрузке,"");
		Если Почта.ЧислоСообщений()>0 Тогда
		Почта.ВыбратьСообщения();
		Пока Почта.ПолучитьСообщение()=1 Цикл
			ОтКуда=Почта.АдресОтправителя();
			Если Найти(ОтКуда,ИмяМОД+"-ИД-"+?(База.IDD=ИДДляОтладки,"",База.IDD))=0 Тогда //почта не из базы, с которой осуществляется обмен
				Продолжить;
			КонецЕсли;
			
			Заголовок=Почта.Заголовок;
			ЗаголовокДляПолучения=Сокрлп(База.ЗаголовокДляПолучения);
			Если ПустоеЗначение(ЗаголовокДляПолучения)=0 Тогда
				Если Найти(Заголовок,ЗаголовокДляПолучения)=0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Почта.ПрочитатьСообщение(1);
			Текст=Почта.Текст;
		КонецЦикла;
		
		
		ОчиститьКаталог(ПутьКБазеПриЗагрузке,"*.mme");
		Иначе
		Сообщить("В почтовом ящике нет новых писем.");
		КонецЕсли;
		Почта.Отключиться();
		Почта=0;        
	КонецЕсли;
	
	
	Если ВстроеннаяАрхивация=1 Тогда
		//выполняем разархивирование пакетов
		ФС.УстТекКаталог(ПутьКБазеПриЗагрузке);
		//подготовка имен и ключей ...
		ИмяАрхива=База.ПрефиксАрхиваЗагрузки;
		ИмяАрхива=Сокрлп(ИмяАрхива)+"*.arj";
		Размер=" -v";
		Пароль="";
		Если Сокрлп(База.ПарольАрхива)<>"" Тогда
			Пароль=" -g"+Сокрп(База.ПарольАрхива);
		КонецЕсли;
		
		//перенос файлов из архива
		Команда=""""+КаталогИБ()+"arj.exe"""+" e -d"+Размер+Пароль+" -y "+ИмяАрхива;
		КомандаСистемы(Команда);
		
	КонецЕсли;
	
	
	Если ПризнакПолученияMD=1 Тогда
		ФайлИсточникMD=СокрЛП(ПутьКБазеПриЗагрузке)+"\"+"1cv7.md";
		Если ФС.СуществуетФайл(ФайлИсточникMD)=1 Тогда
			Сообщить("Внимание в каталоге загрузки обнаружен новый файл конфигурации (MD-файл) !!");
		КонецЕсли;
	КонецЕсли;
	
	СписокИзмененияИД=СоздатьОбъект("СписокЗначений");
	СписокПроводимыхДокументов=СоздатьОбъект("СписокЗначений");
	ИмяТекстовогоФайла=СокрЛП(ПутьКБазеПриЗагрузке)+"\"+СокрЛП(Строка((НомерПакетаЗагрузки)))+".mod";
	
	Если ОбработкаПримера=1 Тогда
		ИмяТекстовогоФайла=СокрЛП(ПутьКБазеПриЗагрузке)+"\sample.mod";
		НомерПакетаЗагрузки=0;
	КонецЕсли;
	
	Если ФС.СуществуетФайл(ИмяТекстовогоФайла)=0 Тогда
		Перейти ~ОтменаЗагрузки;
	КонецЕсли;
	
	//Загружаем всю кучу пакетов находящихся в каталоге загрузки в поряке их следования
	Пока ФС.СуществуетФайл(ИмяТекстовогоФайла)=1 Цикл
		ЗаписьЖурналаРегистрации("Начало загрузки пакета № "+НомерПакетаЗагрузки,"Загрузка",База.Наименование);
		М_Сообщить("Загружается пакет "+ИмяТекстовогоФайла);
		Состояние("Загружается пакет "+ИмяТекстовогоФайла);
		
		
		Рез=ЗагрузитьТело(База,НомерПакетаЗагрузки,ИмяТекстовогоФайла);
		Если (Рез=0)ИЛИ(ОбработкаПримера=1) Тогда
		    Возврат;
		КонецЕсли;
		
		
		Если НомерПодтвержденногоПакета>Число(База.НомерПодтвержденногоПакетаЗагрузки) Тогда
			Если Подтверждение(База,НомерПодтвержденногоПакета)=0 Тогда
				М_Сообщить("Произошла ошибка при попытке подтвердить пакет № "+НомерПодтвержденногоПакетаЗагрузки+"
				|Попробуйте произвести устное подтверждение перейдя на закладку ""Подтверждение""","I");
			Иначе
				М_Сообщить("Получено подтверждение о выгр пакете "+НомерПодтвержденногоПакета);
			КонецЕсли;
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации("Окончание загрузки пакета № "+НомерПакетаЗагрузки,"Загрузка",База.Наименование);
		
		
		//увеличиваем счетчик загр пакетов
		Если Число(НомерПакетаЗагрузки)>0 Тогда
			НомерПакетаЗагрузки=Число(НомерПакетаЗагрузки)+1;
		КонецЕсли;
		ИмяТекстовогоФайла=СокрЛП(ПутьКБазеПриЗагрузке)+"\"+СокрЛП(Строка(Число(НомерПакетаЗагрузки)))+".mod";
	КонецЦикла;//по пакетам
	
	Состояние("Восстанавливаем ИД-коды объектов");
	Стр_ИД="";
	НеРегистрироватьИзмененияМОД=0;
	КоличествоИзмененийИД=СписокИзмененияИД.РазмерСписка();
	Если НеИзменятьИДПриЗагрузке=1 Тогда
		Для А=1 по КоличествоИзмененийИД Цикл
			Зн=СписокИзмененияИД.ПолучитьЗначение(А,Стр_ИД);
			Если ТипЗначения(Зн)=11 Тогда
				Спр=СоздатьОбъект("Справочник."+Зн.Вид());
				Спр.НайтиЭлемент(Зн);
				Если Спр.Выбран()=1 Тогда
					Спр.IDD=Стр_ИД;
					Спр.Записать();
				КонецЕсли;
				ПриИзмененииОбъекта(Спр.ТекущийЭлемент(),Спр.ТекущийЭлемент(),РабочДата,1);
			ИначеЕсли ТипЗначения(Зн)=12 Тогда
				Док=СоздатьОбъект("Документ");
				Док.НайтиДокумент(Зн);
				Если Док.Выбран()=1 Тогда
					Док.IDD=Стр_ИД;
					Док.Записать();
				КонецЕсли;
				ПриИзмененииОбъекта(Док.ТекущийДокумент(),Док.ТекущийДокумент(),Док.ДатаДок,1);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	//теперь без транзакции проводим документы (у которых стоит признак не загружать движения, а проводить)
	Если СписокПроводимыхДокументов.РазмерСписка()>0 Тогда
		М_Сообщить("Проводим загруженные документы");
		СписокПроводимыхДокументов.Сортировать(0,1);
		Для А=1 по СписокПроводимыхДокументов.РазмерСписка() Цикл
			НеРегистрироватьИзмененияМОД=1;
			ПроведениеПоАлгоритмуМОД=0;
			Док=СоздатьОбъект("Документ");
			Док.НайтиДокумент(СписокПроводимыхДокументов.ПолучитьЗначение(А));
			М_Сообщить("Проводится документ "+Док.ТекущийДокумент());
			Попытка
				Док.Провести();
			Исключение
				Сообщить("Ошибка проведения документа "+Док.ТекущийДокумент(),"!");
				НеРегистрироватьИзмененияМОД=0;
				ПриИзмененииОбъекта(Док.ТекущийДокумент(),Док.ТекущийДокумент(),Док.ДатаДок,1);
				НеРегистрироватьИзмененияМОД=1;
				Сообщить("Признак непроведенного документа будет отправлен в периферийную базу");
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	НеРегистрироватьИзмененияМОД=0;
	

    //Все классно - осталось записать в справочник базы новый номер пакета загрузки
	Если Число(НомерПакетаЗагрузки)>0 Тогда
		//записываем в справочник номер загружаемого пакета
		Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
		Спр.НайтиЭлемент(База);
		Спр.НомерПакетаЗагрузки=НомерПакетаЗагрузки;
		Спр.Записать();
	КонецЕсли;
	
	
	М_Сообщить("Загрузка данных завершена !");
	Возврат;
	
	~ОтменаЗагрузки:
	Пакет=0;
	М_Сообщить("Загрузка отменена, данные не изменялись !");
КонецПроцедуры

//_____________________________________________________________________________

Функция Обмен()
	ТекущаяБаза=База;
	Рез=1;
	Если ТекущаяБаза.Выбран()=1 Тогда
		Если ТекущаяБаза.ЭтоГруппа()=0 Тогда//в одну базу
			Если Загрузка=1 Тогда
				Загрузить();
			КонецЕсли;
			Если Выгрузка=1 Тогда
				Рез=Выгрузить();
			КонецЕсли;
		Иначе//в группу баз
			ППБ=СоздатьОбъект("Справочник.ПериферийныеБазы");
			ППБ.ИспользоватьРодителя(ТекущаяБаза);
			ППБ.ВыбратьЭлементы();
			Пока ППБ.ПолучитьЭлемент()=1 Цикл
				Если (ППБ.ЭтоГруппа()=0)  Тогда
					База=ППБ.ТекущийЭлемент();
					УстановитьБазу();
					Если Загрузка=1 Тогда
						Загрузить();
					КонецЕсли;
					
					Если Выгрузка=1 Тогда
						Рез=Выгрузить();
						Если Рез=0 Тогда
							//		    Возврат 0;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе	//во все базы
		//Если Вопрос("Вы действительно хотите произвести выгрузку во ВСЕ периферийные бызы?" +РазделительСтрок+
		//"Если нет, выберите базу выгрузки (или группу баз)",4,10)<>7 Тогда
		ППБ=СоздатьОбъект("Справочник.ПериферийныеБазы");
		ППБ.ВыбратьЭлементы();
		Пока ППБ.ПолучитьЭлемент()=1 Цикл
			Если (ППБ.ЭтоГруппа()=0)  Тогда
				База=ППБ.ТекущийЭлемент();
				УстановитьБазу();
				
				Если Загрузка=1 Тогда
					Загрузить();
				КонецЕсли;
				
				Если Выгрузка=1 Тогда
					Рез=Выгрузить();
					Если Рез=0 Тогда
						//Возврат 0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		//КонецЕсли;
	КонецЕсли;
	База=ТекущаяБаза;
	Возврат Рез;
КонецФункции

//_____________________________________________________________________________

Функция ЗакрытьДБФ()
	Если МожноЗакрывать=1 Тогда
		Форма.ИспользоватьСлой("Инфо",0);
		Если ТипЗначенияСтр(БДМОД)="XBASE" Тогда
			Если БДМОД.Открыта()=1 Тогда
				БДМОД.ЗакрытьФайл();
			КонецЕсли;
		КонецЕсли;
		Если ТипЗначенияСтр(БДУдаленийМОД)="XBASE" Тогда
			Если БДУдаленийМОД.Открыта()=1 Тогда
				БДУдаленийМОД.ЗакрытьФайл();
			КонецЕсли;
		КонецЕсли;
		Если ТипЗначенияСтр(БДПакетыМОД)="XBASE" Тогда
			Если БДПакетыМОД.Открыта()=1 Тогда
				БДПакетыМОД.ЗакрытьФайл();
			КонецЕсли;
		КонецЕсли;
	Прогрессор(0);
	КонецЕсли;
	Возврат "";
КонецФункции//ЗакрытьДБФ

//_____________________________________________________________________________

Процедура Сформировать()
	Рез=СоединитьФайлыИзмененийИУдалений();
	Если Рез=0 Тогда
		Рез=Вопрос("Продолжить выгрузку",1,10);
		Если Рез<>1 Тогда
			Возврат ;
		КонецЕсли;
	КонецЕсли;
	//транзакция .....
	ЗакрытьДБФ();
	М_Состояние("Подготовка к транзакции...");
	КопироватьФайлДБФ("tran1","_tran1");
	КопироватьФайлДБФ("tran2","_tran2");
	КопироватьФайлДБФ("tran3","_tran3");
	М_Состояние("Подготовка к транзакции закончена");
	
	Если Обмен()=1 Тогда
		М_Состояние("Зафиксирование транзакции...");
		ЗакрытьДБФ();
		КопироватьФайлДБФ("_tran1","tran1");
		КопироватьФайлДБФ("_tran2","tran2");
		КопироватьФайлДБФ("_tran3","tran3");
	КонецЕсли;
	ЗакрытьДБФ();
	
	Фс.УдалитьФайл(КаталогБазыДанных()+"_tran3.cdx");
	Фс.УдалитьФайл(КаталогБазыДанных()+"_tran3.dbf");
	Фс.УдалитьФайл(КаталогБазыДанных()+"_tran2.cdx");
	Фс.УдалитьФайл(КаталогБазыДанных()+"_tran2.dbf");
	Фс.УдалитьФайл(КаталогБазыДанных()+"_tran1.cdx");
	Фс.УдалитьФайл(КаталогБазыДанных()+"_tran1.dbf");
	//эти файлы на выходе всегда пустые: - не всегда !!!!!
	//		Фс.УдалитьФайл(КаталогБазыДанных()+"tran1.cdx");
	//		Фс.УдалитьФайл(КаталогБазыДанных()+"tran1.dbf");
	
	
	ТаблицаЗагрузки=0;
	СписокЗагрузки=0;
	ТаблицаПравил=0;
	СписокПравил=0;
	СписокРегистровПроведения=0;
	СписокОперацийПроведения=0;
	ТаблицаСправочниковПроведения=0;
	
КонецПроцедуры //Сформировать

//_____________________________________________________________________________
//для выборочной выгрузки:

Процедура ОбъектыВыборочнойВыгрузки()
	
	ТипОбъектаВыборочно.ДобавитьЗначение("Константы");
	ТипОбъектаВыборочно.ДобавитьЗначение("Планы счетов");
	
	ТипОбъектаВыборочно.ДобавитьЗначение("Документ");
	Для ф=1 по Метаданные.Документ() Цикл
		ТипОбъектаВыборочно.ДобавитьЗначение("Документ."+Метаданные.Документ(ф).Идентификатор);
	КонецЦикла;
	
	ТипОбъектаВыборочно.ДобавитьЗначение("Справочник");
	Для ф=1 по Метаданные.Справочник() Цикл
		ТипОбъектаВыборочно.ДобавитьЗначение("Справочник."+Метаданные.Справочник(ф).Идентификатор);
	КонецЦикла;
КонецПроцедуры //ОбъектыВыборочнойВыгрузки





//_____________________________________________________________________________
Процедура ЗаполнитьСписокПодчиненныхСправочников();
	СписокПодчиненных=СоздатьОбъект("СписокЗначений");
	Для А=1 По Метаданные.Справочник() Цикл
		Если Метаданные.Справочник(А).Владелец.Выбран()=1 Тогда
			ИмяСпр=Метаданные.Справочник(А).Идентификатор;
			ИмяПодч=Метаданные.Справочник(А).Владелец.Идентификатор;
			СписокПодчиненных.ДобавитьЗначение(""+ИмяПодч,""+ИмяСпр);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //

//_____________________________________________________________________________


//_____________________________________________________________________________

Процедура ПриВыбореЗакладки(Ном,Значен)
	Форма.ДляНастр2.Видимость(0);
	Форма.ДляНастр3.Видимость(0);
	Форма.ИспользоватьСлой(Значен);
	Если Значен="Общие" Тогда
	ИначеЕсли Значен="Выгрузка" Тогда
		ПриУстановкеРежимаВыгрузки();
	ИначеЕсли Значен="Инициализация" Тогда
		Форма.ДляНастр3.Видимость(РасширенныйРежим);
	ИначеЕсли Значен="Подтверждение" Тогда
		Форма.СписокПакетов.Видимость(1);
		Форма.База.Видимость(1);
		Форма.бб.Видимость(1);
	ИначеЕсли Значен="Настройка" Тогда
		//		Форма.База.Видимость(1);
		Форма.ДляНастр2.Видимость(РежимНастройки);
	КонецЕсли;
КонецПроцедуры

//_____________________________________________________________________________

Процедура ДопСлойВыгрузки()
	Форма.ИспользоватьСлой("ВыгрузкаДоп");
КонецПроцедуры //ДопСлойВыгрузки()

//_____________________________________________________________________________

Процедура СлойРепликация()
	Форма.ИспользоватьСлой("Репликация");
КонецПроцедуры
//_____________________________________________________________________________

Процедура НазадСлойРепликация()
	Форма.ИспользоватьСлой("Инициализация");
КонецПроцедуры
//_____________________________________________________________________________

Процедура НазадИзДопСлойВыгрузки()
	Форма.ИспользоватьСлой("Выгрузка");
	ПриУстановкеРежимаВыгрузки();
КонецПроцедуры

//_____________________________________________________________________________

Процедура ДопСлойНастройки()
	Форма.ИспользоватьСлой("Доп");
КонецПроцедуры

//_____________________________________________________________________________

Процедура НазадИзДопСлойНастройки()
	Форма.ИспользоватьСлой("Настройка");
КонецПроцедуры



Процедура ОбработкаПодбора(об,конт)
	Перем МойIDD;
	об1=СоздатьОбъект(ТипЗначенияСтр(Об)+"."+Об.Вид());
	Если ТипЗначенияСтр(Об)="Документ" Тогда
		Об1.НайтиДокумент(Об.ТекущийДокумент());
	Иначе
		Об1.НайтиЭлемент(Об.ТекущийЭлемент());
	КонецЕсли;
	МойIDD=Сокрлп(Об.IDD);
	ВвестиСтроку(МойIDD,"Введите новый IDD",30,);
	Если МойIDD<>Об.IDD Тогда
		Об1.IDD=Сокрлп(МойIDD);
		ОБ1.Записать();
	КонецЕсли;
КонецПроцедуры

//_____________________________________________________________________________

Процедура ОткрытьИзменениеОбъектов()
	Перем Объект;
	Перем Объект1;
	Сз=СоздатьОбъект("СписокЗначений");
	Сз.ДобавитьЗначение("Документ","Документ");
	Сз.ДобавитьЗначение("Справочник","Справочник");
	Если Сз.ВыбратьЗначение(Объект,"",,,1)=1 Тогда
		Сз.УдалитьВсе();
		Если Объект="Документ" Тогда
			Для ы=1 по Метаданные.Документ() Цикл
				Сз.ДобавитьЗначение(Метаданные.Документ(ы).Идентификатор,Метаданные.Документ(ы).Идентификатор);
			КонецЦикла;
		Иначе
			Для ы=1 по Метаданные.Справочник() Цикл
				Сз.ДобавитьЗначение(Метаданные.Справочник(ы).Идентификатор,Метаданные.Справочник(ы).Идентификатор);
			КонецЦикла;
		КонецЕсли;
		Если Сз.ВыбратьЗначение(Объект1,"",,,)=1 Тогда
			ОткрытьПодбор(Объект+"."+Объект1,,Конт,,	);
			Если Объект="Справочник" Тогда
				Конт.ВыборГруппы(1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


//_____________________________________________________________________________
//присвоение всем объектам НАШЕЙ базы своего IDD
Процедура Инициализация()
	Если Число(IDD)<>0 Тогда
		Форма.IDD.Доступность(0);
	Иначе
		Предупреждение("Присвойте базе IDD !",10);
		Возврат;
	КонецЕсли;
	
	Если ПерваяИнициализация<>1 Тогда
		Если Вопрос("Вы действительно хотите выполнить инициализацию базы ?",4,10)=7 Тогда
			Возврат;
		КонецЕсли;
		
		Если ФлНовый=1 Тогда
			Если Вопрос("ВНИМАНИЕ ВЫ ВЫБРАЛИ РЕЖИМ УСТАНОВЛЕНИЯ НОВЫХ IDD ДЛЯ ВСЕХ ЭЛЕМЕНТОВ ! Отменить ?",4,20)<>7 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	//******* для прогрессора
	ЧислоДат=0;
	ЧислоДата1=0;
	Док=СоздатьОбъект("Документ");
	Рез=Док.ВыбратьДокументы();
	Если Рез<>0 Тогда
		Док.ПолучитьДокумент();
		ЧислоДата1=Число(Док.ДатаДок);
		Док=СоздатьОбъект("Документ");
		Док.ОбратныйПорядок(1);
		Рез=Док.ВыбратьДокументы();
		Док.ПолучитьДокумент();
		ЧислоДата2=Число(Док.ДатаДок);
		ЧислоДат=ЧислоДата2-ЧислоДата1;
	КонецЕсли;
	ЧислоСпр=10*Метаданные.Справочник();
	Прогрессор(0,ЧислоДат+ЧислоСпр,0,"Инициализация");
	
	КолПрогрессора=1;	//******* для прогрессора
	
	Константа_УникальныйIDD=Число(Константа.УникальныйIDD)+1;
	Константа_IDD=Прав("0000000"+СокрЛП(Константа.IDD),7);
	
	
	Если РежимИниц=1 Тогда
	Попытка
		Для Ц=1 по ПланыСчетов.КоличествоЗначений() Цикл
			Об=СоздатьОбъект("Счет");
			Об.ИспользоватьПланСчетов(ПланыСчетов.ЗначениеПоНомеру(Ц));
			Об.ВыбратьСчета();
			Пока Об.ПолучитьСчет()>0 Цикл
				Счет=Об.ТекущийСчет();
				ПриИзмененииОбъекта(Счет,Счет, РабочДата);					
			КонецЦикла;
		КонецЦикла;
	Исключение
	КонецПопытки;
	КонецЕсли;
	
	
	//фиксируем транзакцию через каждые 500 документов
	КолДоков=0;
	КолДоковОбработано=0;
	НачатьТранзакцию();
	Док=СоздатьОбъект("Документ");
	М_Состояние("Обработка документов...");
	Док.ВыбратьДокументы(,);
	Пока Док.ПолучитьДокумент()>0 Цикл
		КолПрогрессора=Число(Док.ДатаДок)-ЧислоДата1+1;
		Прогрессор(КолПрогрессора);//**************** прогрессор
		Если (Сокрлп(Док.IDD)="")ИЛИ(ФлНовый=1) Тогда //т.е. изменяем только пустые IDD !!//надо бы потом сделать проверку на уникальность ...
			Константа_УникальныйIDD=Константа_УникальныйIDD+1;
			Док.IDD=Сокрлп(Константа_IDD+прав("0000000000"+Константа_УникальныйIDD,10));
			//Если Прав(Сокрлп(Док.НомерДок),5)="00000" Тогда//ошибка номера
			//Док.УстановитьНовыйНомер();
			//КонецЕсли;
			Попытка
				Док.Записать();
			Исключение
				Сообщить("Ошибка в "+Док.ТекущийДокумент()+" номер док="+Док.НомерДок+"! ...","!");
			КонецПопытки;
			КолДоков=КолДоков+1;
			Если КолДоков>=500 Тогда
				М_Состояние("Фиксируем транзакцию ");
				ЗафиксироватьТранзакцию();
				КолДоковОбработано=КолДоковОбработано+КолДоков;
				М_Состояние("Обработано документов :"+КолДоковОбработано+" "+Док.ДатаДок);
				НачатьТранзакцию();
				КолДоков=0;
			КонецЕсли;
			
		КонецЕсли;
		Если РежимИниц=1 Тогда
			ПриИзмененииОбъекта(Док,Док,Док.ДатаДок,0);
		КонецЕсли;
	КонецЦикла;
	Константа.УникальныйIDD=Строка(Число(Константа_УникальныйIDD)+1);
	ЗафиксироватьТранзакцию();
	
	Для ы=1 по Метаданные.Справочник() Цикл
		НачатьТранзакцию();
		КолПрогрессора=КолПрогрессора+10;
		Прогрессор(КолПрогрессора);//**************** прогрессор
		Ст=Метаданные.Справочник(ы).Идентификатор;
		Если (ст<>"ПравилаЗагрузки") и (ст<>"ПравилаВыгрузки") и (ст<>"ПериферийныеБазы") Тогда
			Спр=СоздатьОбъект("Справочник."+Ст);
			М_Состояние("Обработка "+Ст);
			Спр.ВыбратьЭлементы(0);
			Пока Спр.ПолучитьЭлемент()>0 Цикл
				Если (Сокрлп(Спр.IDD)="")ИЛИ(ФлНовый=1) Тогда
					Константа_УникальныйIDD=Константа_УникальныйIDD+1;
					Спр.IDD=Сокрлп(Константа_IDD+прав("0000000000"+Константа_УникальныйIDD,10));
					Попытка
						Спр.Записать();
					Исключение
						Сообщить("Ошибка на : "+Спр.Вид()+", владелец "+Спр.Владелец+", элемент="+Спр.ТекущийЭлемент()+",  код="+Спр.Код+" . Внимание: найдите данный элемент справочника вручную и измените код !!");
					КонецПопытки;
				КонецЕсли;
				
				Если РежимИниц=1 Тогда
						ПриИзмененииОбъекта(Спр,Спр,'01.01.1976',0);//для периодических реквизитов надо задавать период выгрузки
						ПриИзмененииОбъекта(Спр,Спр,РабочДата,0);//у нас период равен: 01.01.1976 - рабочая дата
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		Константа.УникальныйIDD=Строка(Число(Константа_УникальныйIDD)+1);
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
	
	
	Если РежимИниц=1 Тогда
		Прогрессор(0,Метаданные.Константа(),0);//**************** прогрессор
		НачатьТранзакцию();
		Для А=1 по Метаданные.Константа() Цикл
			Прогрессор(А);
			ИмяКонстанты=Метаданные.Константа(А).Идентификатор;
			ПриИзмененииОбъекта(ИмяКонстанты, ИмяКонстанты,'01.01.1976');
			ПриИзмененииОбъекта(ИмяКонстанты, ИмяКонстанты,РабочДата);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		Прогрессор(0);
	КонецЕсли;
	
	IDD=Константа.IDD;
	Форма.IDD.Доступность(0);
	//	Прогрессор(0);
	Если ТипЗначенияСтр(БДМОД)="XBASE" Тогда
		Если БДМОД.Открыта()=1 Тогда
			БДМОД.ЗакрытьФайл();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//_____________________________________________________________________________
//
//Процедура ПриЗакрытии()
//	Если ОткрытьДругуюФорму=1 Тогда
//		Спис=СоздатьОбъект("СписокЗначений"); 
//		Спис.ДобавитьЗначение(База,"База");
//		Спис.ДобавитьЗначение("Ручное открытие","Команда");
////		ОткрытьФорму("Обработка",Спис,КаталогИБ()+"Extforms\ОбменДанными.ert");
//		ОткрытьФорму("Обработка.ОбменДанными",Спис);
//	КонецЕсли;
//КонецПроцедуры //ПриЗакрытии
//

//_____________________________________________________________________________
Процедура ВыбратьФайлЗагрузки()
	ПЕрем Каталог,ИмяФайла,Номер;
	Каталог=ПутьКБазеПриЗагрузке;
	ИмяФайла=Строка(НомерПакетаЗагрузки)+".mod";
	ФС.ВыбратьФайл(0,ИмяФайла,Каталог,"Выберите файл пакета загрузки","Менеджер обмена данными(*.mod)|*.mod;*.mod","*.mod");
	Каталог=ПутьКБазеПриЗагрузке;
	Если ФС.СуществуетФайл(Каталог+"\"+ИмяФайла)=1 Тогда
		НомерПакетаЗагрузки=СтрЗаменить(ИмяФайла,".mod","");
	КонецЕсли;
КонецПроцедуры //ВыбратьФайлЗагрузки
//_____________________________________________________________________________



Процедура ИсправитьИДБазы()
	СписокИД=СоздатьОбъект("СписокЗначений");
	СписокОбъектов=СоздатьОбъект("СписокЗначений");
	Для А=1 по Метаданные.Справочник() Цикл
		Имя=Метаданные.Справочник(А).Идентификатор;
		М_Состояние("Анализ справочников "+Имя);
		Если Имя<>"ПериферийныеБазы" Тогда
			Спр=СоздатьОбъект("Справочник."+Имя);
			Спр.ВыбратьЭлементы();
			
			Пока Спр.ПолучитьЭлемент()=1 Цикл
				Если Сокрлп(Спр.IDD)="" Тогда //у объекта пустой IDD - надо его присвоить
					СписокОбъектов.ДобавитьЗначение(Спр.ТекущийЭлемент());
					Продолжить;
				КонецЕсли;
				ИД=Спр.IDD;
				Если СписокИД.НайтиЗначение(ИД)<>0 Тогда //такой объект в списке уже есть - значит налицо повторение IDD
					СписокОбъектов.ДобавитьЗначение(Спр.ТекущийЭлемент());
				Иначе//пока еще нет в списке такого IDD
					СписокИД.ДобавитьЗначение(ИД);
				КонецЕсли;  
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	
	
	М_Состояние("Анализ документов");
	СисокДок=СоздатьОбъект("СписокЗначений");
	
	
	Док=СоздатьОбъект("Документ");
	Док.ВыбратьДокументы(,);
	Пока Док.ПолучитьДокумент()>0 Цикл
		Если Сокрлп(Док.IDD)="" Тогда //у объекта пустой IDD - надо его присвоить
			СписокОбъектов.ДобавитьЗначение(Док.ТекущийДокумент());
			Продолжить;
		КонецЕсли;
		ИД=Док.IDD;
		Если СписокИД.НайтиЗначение(ИД)<>0 Тогда //такой объект в списке уже есть - значит налицо повторение IDD
			СписокОбъектов.ДобавитьЗначение(Док.ТекущийДокумент());
		Иначе//пока еще нет в списке такого IDD
			СписокИД.ДобавитьЗначение(ИД);
		КонецЕсли;  
	КонецЦикла;
	СписокИД=0;
	
	
	
	М_Состояние("Изменение IDD у объектов");
	КолОбъектов=0;
	НачатьТранзакцию();
	Док=СоздатьОбъект("Документ");
	Для А=1 По СписокОбъектов.РазмерСписка() Цикл
		Объект=СписокОбъектов.ПолучитьЗначение(А);
		Если ТипЗначения(Объект)=11 Тогда//справочник
			Спр=СоздатьОбъект("Справочник."+Объект.Вид());
			Спр.НайтиЭлемент(Объект);
			Сообщить("Установлен IDD на элемент "+Спр.Вид()+" "+Спр.Наименование+", код="+Спр.Код);
			Об=Спр;
		Иначе //12 - документ
			Док.НайтиДокумент(Объект);
			Сообщить("Установлен IDD на документ "+Док.Вид()+" № "+Док.НомерДок+" от "+Док.ДатаДок);
			Об=Док;
		КонецЕсли;
		
		Константа.УникальныйIDD=Число(Константа.УникальныйIDD)+1;
		Об.IDD=Прав("0000000"+СокрЛП(Константа.IDD),7)+прав("0000000000"+СокрЛП(Константа.УникальныйIDD),10);
		Об.Записать();
		
		
		
		
		//фиксируем транзакцию через каждые 1000 объектов
		КолОбъектов=КолОбъектов+1;
		Если КолОбъектов>=1000 Тогда
			М_Состояние("Фиксируем транзакцию ");
			ЗафиксироватьТранзакцию();
			М_Состояние("Обработано объектов :"+А);
			НачатьТранзакцию();
			КолОбъектов=0;
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры



Процедура НайтиПоИДД()
	Стр=ВосстановитьЗначение("ДляПоискаПоИД");
	
	Если СтрДлина(Стр)<>17 Тогда
		Стр="0000000000000000000";
	КонецЕсли;
	
	Если ВвестиСтроку(Стр,"Введите IDD ",17)=0 Тогда
		Возврат;    
	КонецЕсли;
	
	СохранитьЗначение("ДляПоискаПоИД",Стр);
	Ном=0;
	Таб=СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Таблица");
	Таб.ВывестиСекцию("Отчет");
	
	Нашли=0;
	Спр=СоздатьОбъект("Документ");
	Рез=Спр.ВыбратьПоЗначению(,,"IDD",стр);
	Пока Спр.ПолучитьДокумент()=1 Цикл
		Если ДублирIDD=0 Тогда
			ОткрытьФорму(Спр.ТекущийДокумент());
		Иначе
			Ном=Ном+1;
			ЧтоТо=Спр.ТекущийДокумент();
			Таб.ВывестиСекцию("Строка");
		КонецЕсли;
		Нашли=1;
	КонецЦикла;
	
	Для ы=1 по Метаданные.Справочник() Цикл
		Имя=Метаданные.Справочник(ы).Идентификатор;
		Если Имя="ПериферийныеБазы" Тогда
			Продолжить;
		КонецЕсли;
		Спр=СоздатьОбъект("Справочник."+Имя);
		СпрВыбор=СоздатьОбъект("Справочник."+Имя);
		Попытка
			Спр.ВыбратьЭлементыПоРеквизиту("IDD",стр,0,0);
		Исключение
			Сообщить("Нет реквизита IDD у справочника "+Имя);
		КонецПопытки;
		Пока Спр.ПолучитьЭлемент()=1 Цикл
			Если ДублирIDD=0 Тогда
				ОткрытьФорму(Спр.ТекущийЭлемент());
				//СпрВыбор.НайтиЭлемент(Спр.ТекущийЭлемент());
				//Если Спр.Владелец.Выбран()=1 Тогда
				//Спр.ИспользоватьВладельца(Спр.Владелец);
				//КонецЕсли;
				//СпрВыбор.Выбрать("Найденный элемент "+Спр.Наименование+" (IDD="+Стр+")","Привет !!");
			Иначе
				Ном=Ном+1;
				ЧтоТо=Спр.ТекущийЭлемент();
				Таб.ВывестиСекцию("Строка");
			КонецЕсли;
			Нашли=1;
		КонецЦикла;
	КонецЦикла;
	
	Если Нашли=0 Тогда
		Предупреждение("Элемента с IDD = "+Стр+" нет !",10);
		Возврат;
	КонецЕсли;
	
	
	Если ДублирIDD=1 Тогда
		Таб.ТолькоПросмотр(1);
		Таб.Опции(0,0,0,0,"ПараметрыОтчМенеджераIDD");
		Таб.Показать("IDD Объектов");
	КонецЕсли;
	
КонецПроцедуры //НайтиПоИДД
//_____________________________________________________________________________


Процедура ОбработкаЯчейкиТаблицы(Объект, СтандартнаяОбработка, Таблица)
	СтандартнаяОбработка = 0;
	ОбработкаПодбора(Объект,"");
КонецПроцедуры




Процедура ПриЗаписиКонстанты(Имя, Значение);
	Если РасширенныйРежим=1 Тогда
		Если Имя="ПериодРепликацииМОД" Тогда
			//		ОбработкаОжидания("ЗагрузкаПакетовМОД",Значение);
			ОбработкаОжидания("РепликацияМОД",Значение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры




//_____________________________________________________________________________








//_____________________________________________________________________________
Процедура ОбработкаВводаIDD()
	ИДНашейБазы=Число(IDD);
	ПерваяИнициализация=1;
	Если Число(ИДНашейБазы)=0 Тогда
		IDD="";
		Предупреждение("Неправильно введен номер базы !",10);
	Иначе
		Константа.IDD=Прав("0000000"+ИДНашейБазы,7);
	КонецЕсли;
КонецПроцедуры //ОбработкаВводаIDD



//_____________________________________________________________________________

Процедура ВыборФайла(Имя)
	Если ФС.ВыбратьФайл(1,Имя,КаталогДБФ,"Выбери файл ДБФ !","Файлы Менеджера|tran*.dbf|*.dbf|*.dbf|Все файлы(*.*)|*.*","")=0 Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры




//************************************************************************************
//Функции, которые вызываются при интерпретации выражений
//************************************************************************************
//_____________________________________________________________________________
//Назначение: Присвоить глобальной переменной (в рамках обработки) переданной значение
//Возвращает пустую строку
Функция Получить(Выражение) 
глВыражение=Выражение;
Возврат "";    
КонецФункции //Получить


//_____________________________________________________________________________
//Назначение:
//вернуть заданный реквизит их заданонго номера строки документа. 
//Часто применяется при конвертации табличной части документа в шапочную.
Функция ПолучитьРеквизитИзСтрокиДокумента(Докум,НомерСтроки,Реквизит)
	Док = СоздатьОбъект("Документ");
	Док.НайтиДокумент(Докум.ТекущийДокумент());
	Если Док.Выбран() > 0 Тогда
		Если Док.ПолучитьСтрокуПоНомеру(НомерСтроки) = 1 Тогда
			Рез = Док.ПолучитьАтрибут(Реквизит);
			Возврат Рез;
		Иначе
			Возврат "";
		КонецЕсли;	
	Иначе
		Возврат "";
	КонецЕсли;	
КонецФункции	

//_____________________________________________________________________________
//Назначение:
//найти элемент справочника заданного вида по заданному имени
Функция НайтиСпр(Вид,Имя,Режим=0,Владелец=0,Родитель=0,Создавать=0,ЭтоГруппа=0)
	Перем Спр;
	Спр=СоздатьОбъект("Справочник."+Вид);
	Если Владелец<>0 Тогда
		Спр.ИспользоватьВладельца(Владелец);
	КонецЕсли;
	Рез=Спр.НайтиПоНаименованию(Имя,Режим,1);
	Если Рез=1 Тогда
	    Если Спр.ЭтоГруппа()<>ЭтоГруппа Тогда
	        Рез=0;
	    КонецЕсли;
	КонецЕсли;
	Если Рез=1 Тогда 
		Возврат Спр.ТекущийЭлемент();
	Иначе
		Если Создавать=1 Тогда
			Подчиненность=0;
			Если ЭтоГруппа=0 Тогда
			глСоздатьНовыйОбъект(Спр);
			Иначе
			глСоздатьНовуюГруппу(Спр);
			КонецЕсли;
			Если Владелец<>0 Тогда
				Спр.Владелец=Владелец;
				Подчиненность=1;
			КонецЕсли;
			Если Родитель<>0 Тогда
				Спр.Родитель=Родитель;
			КонецЕсли;
			Мета=Метаданные.Справочник(Вид);
			Спр.Наименование=Имя;
			Спр.Код=СоздатьНовыйКод(Вид,Спр,Подчиненность,Мета);
			Спр.IDD=ПолучитьУникальныйIDD();
			Спр.Записать();
			М_Сообщить("Создан новый справочник "+Вид+"  "+Имя+",  "+Спр.Код);
			Возврат Спр.ТекущийЭлемент();
		Иначе
			Возврат "";
		КонецЕсли;
	    
	КонецЕсли;
КонецФункции

//_____________________________________________________________________________
//Назначение:
//Найти справочник заданного вида по ИД коду
Функция НайтиСпрПоИД(Вид,Спр_ИД)
	Перем Спр;
	Спр=СоздатьОбъект("Справочник."+Вид);
	Если Спр.НайтиПоРеквизиту("IDD",Спр_ИД,1)=1 Тогда
			Возврат Спр.ТекущийЭлемент();
	КонецЕсли;
	Возврат "";
КонецФункции

//_____________________________________________________________________________
//Назначение:
//Найти справочник заданного вида по ИД коду
Функция СпрПоИД(Вид,Спр_ИД)
	Возврат НайтиСпрПоИД(Вид,Спр_ИД);
КонецФункции


//_____________________________________________________________________________
//Назначение:
//найти справочник заданного вида, у которого реквизит с именем Реквизит имеет значение 
//Значение. Если задан владелец, то поиск производится внутри подчинения. 
//Если задана дата, то для периодических реквизитов значение ищется на дату ДатаЗначения 
Функция СпрПоРекв(Вид,Реквизит,Значение,Владелец=0,ДатаЗначения=0)
	Перем Спр;
	Спр=СоздатьОбъект("Справочник."+Вид);
	Если Владелец<>0 Тогда
		Попытка
		Спр.ИспользоватьВладельца(Владелец.ТекущийЭлемент());
		Исключение
		Спр.ИспользоватьВладельца(Владелец);
		КонецПопытки;
	КонецЕсли;
	Если ДатаЗначения=0 Тогда
	    Спр.ИспользоватьДату(РабочДата);
	Иначе
	    Спр.ИспользоватьДату(ДатаЗначения);
	КонецЕсли;
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()=1 Цикл
	    Если Спр.ПолучитьАтрибут(Реквизит)=Значение Тогда
	        Возврат Спр.ТекущийЭлемент();
	    КонецЕсли;
	КонецЦикла;
	Возврат "";
КонецФункции 


//_____________________________________________________________________________
//Назначение:
//присвоить переменной А, передаваемое по ссылке значение переменной Б,
//передаваемое по значению.
Функция Присвоить(А,Знач Б)
	А=Б;
	Возврат "";
КонецФункции

//_____________________________________________________________________________
//Назначение:
//поменять местами значения переменных
Функция Поменять(А,Б)
    Перем С;
	С=А;А=Б;Б=С;
	Возврат "";
КонецФункции //Поменять




//_____________________________________________________________________________
//Назначение:
//Вернуть итог по колонке таблицы документа,
//передаваемое по значению: имя колонки табличной части (реквизита)
Функция Итог(Док,Реквизит)
	Таб="";
	Док.ВыгрузитьТабличнуюЧасть(Таб,Реквизит);
	Возврат Таб.Итог(Реквизит);
КонецФункции

//************************************************************************************
//************************************************************************************


Процедура ПриОткрытии()
	//Подключение внешней компоненты МОД
	Если ПодключитьВнешнююКомпоненту(ИмяОлеКомпонентыМОД)=0 Тогда
		ЗагрузитьВнешнююКомпоненту("MOD.dll");
		Если ПодключитьВнешнююКомпоненту(ИмяОлеКомпонентыМОД)=1 Тогда
			ОчиститьОкноСообщений();
			Сообщить("Компонента ""Менеджера обмена данными"" успешно зарегистрирована!","I");
		Иначе
			Сообщить("Нет компоненты менеджера обмена данными - дальнейшая работа невозможна!","!");
			СтатусВозврата(0);
		КонецЕсли;
	КонецЕсли;
	
	
	
	
	Если ПроведениеПоАлгоритмуМОД=1 Тогда
		Если ТипЗначенияСтр(Форма.Параметр)="ГрупповойКонтекст" Тогда
			ПроведениеДокумента(Форма.Параметр,МОДПерем1);
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	
	
	


	
	Если Число(Константа.IDD)=0 Тогда//не было инициализации
		Предупреждение("Выполните инициализацию базы - закладка ""Инициализация"" !",10);
	КонецЕсли;
	
	Если Сокрлп(База.Вид())="" Тогда
		НазначитьВид(База,"ПериферийныеБазы");
	КонецЕсли;
	Форма.База.НеИзменятьВид(1);
	
	ЗаполнитьСписокПодчиненныхСправочников();
	
	//****** константы !!!!!!
	РегистрацияИзменений=Константа.РегистрацияИзменений;
	НеРегистрироватьГрИзм=Константа.НеРегистрироватьГрИзм;
	Попытка
		Если РасширенныйРежим=1 Тогда
			ПериодРепликацииМОД=Константа.ПериодРепликацииМОД;
			ИмяКомпьютераРепликацииМОД=Константа.ИмяКомпьютераРепликацииМОД;
		КонецЕсли;
	Исключение
		РасширенныйРежим=0;
	КонецПопытки;
	
	ОбработкаПримера=0;
	//******
	СписокВыборочнойВыгрузки=0;
	Если СокрЛП(Форма.Параметр)<>"" Тогда
		Если ТипЗначения(Форма.Параметр)=11 Тогда
			База=Форма.Параметр;
			ОбъектыВыборочнойВыгрузки();
			УстановитьБазу();
			Сформировать();
		ИначеЕсли ТипЗначенияСтр(Форма.Параметр)="СписокЗначений" Тогда
			Команда=Форма.Параметр.Получить("Команда");
			Если Сокрлп(Команда)="Список выгрузки" Тогда
				База=Форма.Параметр.Получить("База");
				УстановитьБазу();
				СписокВыборочнойВыгрузки=Форма.Параметр.Получить("Список");
				РежимВыгрузки=4;
				ЗнЗагрузки=Форма.Параметр.Получить("Загрузка");
				Загрузка=?(ЗнЗагрузки=1,1,0); 
				ЗнВыгрузки=Форма.Параметр.Получить("Выгрузка");
				Выгрузка=?(ЗнВыгрузки=0,0,1); //т.е. если не заданы режимы (выгрузки и/или загрузка), то только выгрузка
				ОбработкаПримера=Форма.Параметр.Получить("Пример");
				Если ОбработкаПримера=1 Тогда
				    МОДПерем1=СоздатьОбъект("СписокЗначений"); 
				КонецЕсли;
				Сформировать();
			ИначеЕсли Сокрлп(Команда)="Загрузка-Выгрузка" Тогда
				База=Форма.Параметр.Получить("База");//при таком вызове загрузка и выгрузка назначаются отдельно
				ОбъектыВыборочнойВыгрузки();
				УстановитьБазу();
				Загрузка=Форма.Параметр.Получить("Загрузка");
				Выгрузка=Форма.Параметр.Получить("Выгрузка");
				ОбработкаПримера=Форма.Параметр.Получить("Пример");
				Если ОбработкаПримера=1 Тогда
				    МОДПерем1=СоздатьОбъект("СписокЗначений"); 
				КонецЕсли;
				Сформировать();
			ИначеЕсли Сокрлп(Команда)="Ручное открытие" Тогда
				База=Форма.Параметр.Получить("База");
				Форма.IDD.Доступность(0);
				Форма.ИспользоватьЗакладки(1);
				Форма.Закладки.УдалитьВсе();
				НеобходимыеЗакладки();
				
				ОбъектыВыборочнойВыгрузки();
				УстановитьБазу();
				Возврат;
			Иначе 
				Сообщить("Недопустимая команда вызова обработки обмена данными !","I");
			КонецЕсли;
		Иначе//Если ТипЗначения(Форма.Параметр)=100 Тогда
			База=Форма.Параметр.База;
			УстановитьБазу();
			РежимВыгрузки=3;
			ТипОбъектаВыборочно.УдалитьВсе();
			ТипОбъектаВыборочно.ДобавитьЗначение(ТипЗначенияСтр(Форма.Параметр.Объект)+"."+Форма.Параметр.Объект.Вид(),ТипЗначенияСтр(Форма.Параметр.Объект)+"."+Форма.Параметр.Объект.Вид());
			ТипОбъектаВыборочно.ТекущаяСтрока(1);
			Имя=ТипЗначенияСтр(Форма.Параметр.Объект);
			Форма.ОбъектВыборочно.НазначитьТип(Имя);
			ОбъектВыборочно=Форма.Параметр.Объект;
			Сформировать();
		КонецЕсли;
		СтатусВозврата(0);//закрываем форму !!
		Возврат; //и выходим
	Иначе
		
		//некоторые манипуляции с формой ...
		Если Число(Константа.IDD)<>0 Тогда
			Форма.IDD.Доступность(0);
		Иначе
			Форма.IDD.Доступность(1);
		КонецЕсли;
		Форма.ИспользоватьЗакладки(1);
		Форма.Закладки.УдалитьВсе();
		НеобходимыеЗакладки();
		ОбъектыВыборочнойВыгрузки();
		//ЗаполнитьСписокПакетов();
		УстановитьБазу();
	КонецЕсли;
	РазрешитьРепликациюМОД=РазрешитьРепликациюМОД-1;
КонецПроцедуры //При открытии


//_____________________________________________________________________________
Процедура ПриПовторномОткрытии()
	Если СокрЛП(Форма.Параметр)="Сформировать()" Тогда
		Сформировать();
	КонецЕсли;
КонецПроцедуры

//_____________________________________________________________________________
Процедура КопироватьФайл(Источник,Приемник,СоздКаталог=0)
	Перем Атр,ИмяФайла;
	Если ФС.СуществуетФайл(Источник)=1 Тогда
		ФС.АтрибутыФайла(Источник,"",Атр);
		Если Сред(Атр,4,1)="1" Тогда//это каталог
			Сообщить("Каталог "+Источник);
			Если СоздКаталог=1 Тогда
				ФС.СоздатьКаталог(Приемник);
			КонецЕсли;
			ИмяФайла=ФС.НайтиПервыйФайл(Источник+"\*.*");
			Пока Сокрлп(ИмяФайла)<>"" Цикл
				Если (ИмяФайла<>".")И(ИмяФайла<>"..") Тогда
					КопироватьФайл(Источник+"\"+ИмяФайла,Приемник+"\"+ИмяФайла,1);
				КонецЕсли;
				ИмяФайла=ФС.НайтиСледующийФайл();
			КонецЦикла;
		Иначе
			Состояние("Копируется "+Источник);
			ФС.КопироватьФайл(Источник,Приемник,0);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры //КопироватьФайл

//_____________________________________________________________________________

Процедура СозданиеКопииБазы()
	Перем Каталог,Файл;
	Если Фс.СуществуетФайл(КаталогИБ()+"1Cv7.DBA")=1 Тогда
		Предупреждение("Эта функция в SQL-й версии не поддерживается",30);
		Возврат;
	КонецЕсли;
	
	Если Фс.СуществуетФайл(КаталогИБ()+"arj.exe")=0 Тогда
		Предупреждение("Для возможности выполнения этой функции в каталоге 
		|базы данных должен присутствовать файл arj.exe",30);
		Возврат;
	КонецЕсли;
	Если МонопольныйРежим()=1 Тогда
		Предупреждение("Для создания копии периферийной базы необходимо 
		|войти в программу в немонопольном режиме",10);
		Возврат;
	КонецЕсли;
	Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
	Спр.НайтиЭлемент(База);
	Если Спр.Выбрать("","Выберите базу для которой нужно создать копию !")=0 Тогда
		Возврат;
	КонецЕсли;
	Если ФС.ВыбратьФайл(1,Файл,Каталог,"Выберите файл архива для копии базы","*.arj|*.arj","*.*|*.*")=0 Тогда
		Возврат;
	КонецЕсли;
	
	ФайлАрхива=Каталог+Файл;
	//создаем специальный файл первичной загрзки IDD в константу периферийной базы
	Т=СоздатьОбъект("Текст");
	Т.ДобавитьСтроку("ID");
	Т.ДобавитьСтроку(Спр.IDD);
	ИмяФайлаМаркера=КаталогИБ()+"tran5.dbf";
	
	Т.Записать(ИмяФайлаМаркера);
	
	ФС.УдалитьФайл(ФайлАрхива);
	Попытка
		ФС.УстТекКаталог(КаталогИБ());
		//	Команда="pkzip.exe -a -p -r -xsyslog\*.* -xnew_stru\*.* -x*.cdx -x*.lst -x*.lck -x*.cfg """+ФайлАрхива+""""+" *.*";
		Команда="arj a -v1400k -r -y -x*.cdx -x*.lck -x*.lst -xnew_stru\*.* """+ФайлАрхива+"""";
		//	Сообщить(Команда);
		КомандаСистемы(Команда);
		
		
		ФС.УдалитьФайл(ИмяФайлаМаркера);
		Если ФС.СуществуетФайл(ФайлАрхива)=1 Тогда
			Предупреждение("Создан архив "+ФайлАрхива+" 
			|для периферийной базы с IDD="+Спр.IDD+".
			|Далее следует транспортировать архивную базу
			|на удаленный компьютер. Создать каталог и разархивировать
			|в нем базу, применив команду: arj x -v -y "+Файл+".
			|После этого запустить 1С-Предприятие в монопольном режиме.",0);
		КонецЕсли;
		
	Исключение
		ФС.УдалитьФайл(ИмяФайлаМаркера);
	КонецПопытки
КонецПроцедуры //СозданиеКопииБазы



//_____________________________________________________________________________
Процедура ОткрытьТекст()
	Т=СоздатьОбъект("Текст");
	ИмяТекстовогоФайла=СокрЛП(ПутьКБазеПриВыгрузке)+"\"+СокрЛП(Строка(Число(НомерПакетаВыгрузки)-1))+".mod";
	Попытка
	Т.Открыть(ИмяТекстовогоФайла);
	Т.Показать();
	Исключение
	КонецПопытки;
КонецПроцедуры //ОткрытьТекст()

//_____________________________________________________________________________
Процедура УстановитьПараметрыБазы()
Если База.Выбран()=1 Тогда
    Спр=СоздатьОбъект("Справочник.ПериферийныеБазы");
	Спр.НайтиЭлемент(База);
	Если Спр.Выбран()=1 Тогда
			Спр.МиграцияИзменений=МиграцияИзменений;
			Спр.КоличествоОбъектовВПакете=МаксКолОбъектовВПакете;
			Спр.ВыгружатьШапкуПакетовОтдельно=ВыгружатьШапкуПакетовОтдельно;
			
			
			Спр.ПризнакПолученияMD=ПризнакПолученияMD;
			Спр.ПризнакОтправленияMD=ПризнакОтправленияMD;
			
			Спр.РегистрацияПриЗагрузке=РегистрацияПриЗагрузке;
			Спр.НеИзменятьИДПриЗагрузке=НеИзменятьИДПриЗагрузке;
			Спр.ИспользоватьТранзакцию=ИспользоватьТранзакцию;
			
			Спр.НеВыгружатьИДД=НеВыгружатьИДД;
			Спр.ЭлементДокументаМОД=ЭлементДокументаМОД;
			
			Спр.ПриоритетностьБазы=ПриоритетностьБазы;
			
			Спр.Выгрузка=Выгрузка;
			Спр.НомерПакетаВыгрузки=НомерПакетаВыгрузки;
			Спр.РежимВыгрузки=РежимВыгрузки;
			Спр.ДатаНачалаПриВыгрузке=ДатаН;
			Спр.ДатаКонцаПриВыгрузке=ДатаК;
			Спр.СПодчиненнымиПриВыборочнойВыгрузке=СПодчиненными;
			Спр.ТекстПриВыгрузке=ТекстВыгрузки;
			
			Спр.НомерПодтвержденногоПакетаЗагрузки=НомерПодтвержденногоПакетаЗагрузки;
			
			Спр.Загрузка=Загрузка;
			Спр.НомерПакетаЗагрузки=НомерПакетаЗагрузки;
			
			Спр.ИспользоватьФТП=ИспользоватьФТП;
			Спр.ПередачаПоПочте=ПередачаПоПочте;
			Спр.ВстроеннаяАрхивация=ВстроеннаяАрхивация;
			
			Спр.ПутьКБазеПриВыгрузке=ПутьКБазеПриВыгрузке;
			Спр.ПутьКБазеПриЗагрузке=ПутьКБазеПриЗагрузке;
			
			Если ТипЗначения(ОбъектВыборочно)=11 Тогда
				ИмяОб=ОбъектВыборочно.Вид();
				Спр.НазначитьТип("ОбъектПриВыборочнойВыгрузке","Справочник"+?(Сокрлп(ИмяОб)="","",".")+ИмяОб);
			ИначеЕсли ТипЗначения(ОбъектВыборочно)=12 Тогда
				ИмяОб=ОбъектВыборочно.Вид();
				Спр.НазначитьТип("ОбъектПриВыборочнойВыгрузке","Документ"+?(Сокрлп(ИмяОб)="","",".")+ИмяОб);
			КонецЕсли;
			Спр.ОбъектПриВыборочнойВыгрузке=ОбъектВыборочно;
			Спр.Записать();
			База=Спр.ТекущийЭлемент();
	КонецЕсли;
КонецЕсли;
КонецПроцедуры //УстановитьПараметрыБазы

//_____________________________________________________________________________

КаталогДБФ=КаталогИБ();

ДаДа="Х";
НетНет="";

ФлИдентифID=1;

//заранее 1 раз обявляем объекты - это нужно для рационального использования памяти
ГлобДок=СоздатьОбъект("Документ");
ГлобДокЗагрВыгрузки=СоздатьОбъект("Документ");
КолТаблицЗначений=0;

МожноЗакрывать=1;

Форма.КнопкаПоУмолчанию("КнОбмен");

//********* кусок из глобального модуля - продублирован для обеспечения совместимости версий Менеджера
МОДДлинаID=17;
МОДДлинаIDДокумента=17;


НомерПодтвержденногоПакетаЗагрузки=0;
МаксНомерПакетаВыгрузки=0;
НомерПодтвержденногоПакета=0;

ВыводитьСообщения=0;
ФайлШаблона="c:\shablon.mod";


ДублирIDD=0;

РасширенныйРежим=0;
IDD=Константа.IDD;
ИспользоватьФТП=0;
ВстроеннаяАрхивация=0;
ИДДляОтладки="1234567";

ИспользоватьТранзакцию=1;

НоваяШапкаПакетов="Новая шапка пакетов";
ИмяМОД="DataExchangeManager";
ПерваяИнициализация=0;
СписокИзмененияИД=СоздатьОбъект("СписокЗначений");








//XML
СписокИзмененияИД=СоздатьОбъект("СписокЗначений");
СписокПроводимыхДокументов=СоздатьОбъект("СписокЗначений"); 
МассивТипов1С[1]="Число";
МассивТипов1С[2]="Строка";
МассивТипов1С[3]="Дата";
МассивТипов1С[10]="Перечисление";
МассивТипов1С[11]="Справочник";
МассивТипов1С[12]="Документ";
МассивТипов1С[13]="Календарь";
МассивТипов1С[14]="ВидРасчета";
МассивТипов1С[15]="Счет";
МассивТипов1С[16]="ВидСубконто";
МассивТипов1С[17]="ПланСчетов";
РабочДата=РабочаяДата();
Если Метаданные.ДокументОперации.Выбран()=1 Тогда
	ДокументОперации=Сокрлп(Метаданные.ДокументОперации.Идентификатор);
Иначе
	ДокументОперации="-//-";
КонецЕсли;
ОбработкаПримера=0;




ОбъектПериодический=СоздатьОбъект("Периодический");

ИмяОлеКомпонентыМОД="DataExchangeManager";//MOD.Data

//ОЛЕ
ГлобСписокВторогоЦикла=СоздатьОбъект("СписокЗначений");
ИмяФайлаШапки="header.mod";



ВерсияПротоколаМОД="1.05";
ВерсияМОД="2.001"; // от 26.12.2000г  
СписокВыборочнойВыгрузки=0;

ЗагружатьВсе=0;

РазмерОбъектовДляФиксации=100000;


МОДИнфо=
"Менеджер обмена данными "+ВерсияМОД+"
|Copyright© 'ПиБи' 1999 - 2000 
|www.pb.ru, lider@pb.ru
|
|Протокол пакета обмена "+ВерсияПротоколаМОД+"
|
|Лицензия на МОД № " +IDD+"
|Информационная база: "+КаталогИБ();

РежимНастройки=0