////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем ТекущаяЗакладка; // Текущая закладка формы.
Перем ВыбСпособ;  
Перем ВыбРежимЗаявок; 
Перем ВыбРежимТреков;   
Перем ВыбРежимПл; 
Перем ВыбРежимПоступления;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
   
// ПоКнопкеОК()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//    
// Вызывается из формул диалога по кнопке ОК
//
// Описание:
//  Проверяет заполнение настроек и сохраняет их ы константах
//
Процедура ПоКнопкеОК()
	
	// изначально считаем, что не все обязательные поля заполнены
	ФлагОшибки	= 0;
	Описание	= "Не заполнено поле ";
	                
	//Если ПустоеЗначение(НазваниеБД) = 1 Тогда
	//	Описание = Описание + "'Название БД в КПК'";
	//	Активизировать("НазваниеБД");
	//	ФлагОшибки = 1;
	//ИначеЕсли ПустоеЗначение(ВыбСпособ) = 0 Тогда
	//	Если ВыбСпособ = 2 Тогда // ФТП	
	//		Если ПустоеЗначение(ФТПСервер) = 1 Тогда     
	//			Описание = Описание + "'ФТП-сервер'";
	//			Активизировать("ФТПСервер");
	//			ФлагОшибки = 1;
	//		ИначеЕсли ПустоеЗначение(ФтпПользователь) = 1 Тогда     
	//			Описание = Описание + "'Имя пользователя ФТП-сервера'";
	//			Активизировать("ФтпПользователь");
	//			ФлагОшибки = 1;  
	//		ИначеЕсли ПустоеЗначение(ФтпПароль) = 1 Тогда     
	//			Описание = Описание + "'Пароль пользователя ФТП-сервера'";
	//			Активизировать("ФтпПароль");
	//			ФлагОшибки = 1; 				
	//		КонецЕсли;
	//	ИначеЕсли ВыбСпособ = 3 Тогда // А+ Сервер 
	//		Если ПустоеЗначение(АпсСервер) = 1 Тогда     
	//			Описание = Описание + "'Агент Плюс СОД'";
	//			Активизировать("АпсСервер");
	//			ФлагОшибки = 1;
	//		ИначеЕсли ПустоеЗначение(ПапкаОбменаССервером) = 1 Тогда     
	//			Описание = Описание + "'Папка обмена для Агент Плюс СОД'";
	//			Активизировать("ПапкаОбменаССерером");
	//			ФлагОшибки = 1;  
	//		КонецЕсли;
	//	КонецЕсли;	
	//КонецЕсли;  
	//	
	//Если ПриложениеДляПросмотраКарт = Перечисление.кпкПриложенияДляПросмотраКарт.Map9 Тогда   
	//	Если ПустоеЗначение(ПутьКФайлуЗапускаMap9Viewer) = 1 Тогда  
	//		Описание = Описание + "'Путь к файлу запуска приложения Map9 Viewer'";
	//		Активизировать("ПутьКФайлуЗапускаMap9Viewer");
	//		ФлагОшибки = 1;  
	//	КонецЕсли;
	//КонецЕсли;   
	
	//Если ВыбРежимТреков = 1 Тогда   
	//	Если ПустоеЗначение(ПапкаТреков) = 1 Тогда  
	//		Описание = Описание + "'Папка хранения треков'";
	//		Активизировать("ПапкаТреков");
	//		ФлагОшибки = 1;  
	//	КонецЕсли;
	//КонецЕсли;   
	//
	//Если ИнтервалПодтверждений = 0 Тогда   
	//	Описание = "Интервал подтверждений должен быть больше 0";
	//	Активизировать("ИнтервалПодтверждений");
	//	ФлагОшибки = 1;  		
	//КонецЕсли;
	//
    ////
	//Если ФлагОшибки = 1 Тогда
	//	Предупреждение(Описание, 60);
	//	Возврат;
	//КонецЕсли; 	
	
	
	// Если все необходимое заполнено, сохраняем настройки	
	//Константа.кпкГруппаНовыхКлиентов          = ГруппаНовыхКлиентов;
	//Константа.кпкДатаИсторииПродаж		      = ДатаИсторииПродаж;
	//Константа.кпкИспользоватьВремяВМаршрутах  = ИспользоватьВремяВМаршрутах;
	//Константа.кпкИспользоватьПерсЦены         = ИспользоватьПерсЦены;    	
	//Константа.кпкИспользоватьАвтонумерациюДокументов = ИспАвтонумерацию;     	
	//Константа.кпкИспользоватьПланыПродаж      = ИспПланыПродаж;	
	//Константа.кпкРежимЗагрузкиДокументовПоступления = ВыбРежимПоступления;	
	//Константа.кпкКриптоПароль       	      = КриптоПароль;      
	//Константа.кпкВидОперацииЗаявок       	  = ВидОперацииЗаявок;     	
	//Константа.кпкМинЦена   					  = МинЦена;
	//Константа.кпкНазваниеБД               	  = НазваниеБД;
	//Константа.кпкОсновнаяКарта                = ОсновнаяКарта;
	//Константа.кпкПапкаКартинокТоваров         = ПапкаКартинокТоваров;
	//Константа.кпкПапкаТреков         		  = ПапкаТреков;
	//Константа.кпкПапкаФотоКДокуметам		  = ПапкаФотоКДокументам; 	
	//Константа.кпкПогрешностьПриРасчетеФактаПосещенияТочки = Погрешность; 
	//Константа.кпкПриложениеПросмотраКарт      = ПриложениеДляПросмотраКарт;	
	//Константа.кпкПутьКФайлуЗапускаMap9Viewer  = ПутьКФайлуЗапускаMap9Viewer;
	//Константа.кпкРежимЗагрузкиЗаявок     	  = ВыбРежимЗаявок;    	
	//Константа.кпкРежимЗагрузкиТреков     	  = ВыбРежимТреков;	
	//Константа.кпкРежимИспользованияЕдИзм      = ИспЕдИзм;
	//Константа.кпкРежимПланированияПродаж      = ВыбРежимПл;
	//Константа.кпкРежимТоргТочек     		  = флТоргТочки; 
	//Константа.кпкСпособОбмена                 = ВыбСпособ;
	//Константа.кпкСрокПеремещений     		  = СрокПеремещений; 
	//Константа.кпкСрокИнвентаризаций     	  = СрокИнвентаризаций;
	//Константа.кпкШифроватьДанные     		  = ШифроватьДанные;
	Константа.кпкАпсСервер     			      = АпсСервер;
	Константа.кпкАпсПапкаОбменаССервером      = ПапкаОбменаССервером; 	
	//Константа.кпкФтпСервер     			      = ФтпСервер; 
	//Константа.кпкФтпПользователь   		      = ФтпПользователь;
	//Константа.кпкФтпПароль     			      = ФтпПароль;   
	//Константа.кпкИспользоватьДоговоры     	  = ИспользоватьДоговоры;  	 
	//Константа.кпкИнтервалПодтверждений     	  = ИнтервалПодтверждений; 
	Константа.кпкИнтервалВыгрузкиДокументов   = ИнтервалВыгрузкиДокументов;	        
	//Константа.кпкИспользоватьГПС      		  = ИспГПС;	     
	
	Форма.Закрыть(0);
	
КонецПроцедуры // ПоКнопкеОК()     

//******************************************************************************
Процедура ПриВыбореСпособаОбмена()
	
	ТекСтр = СписСпособОбмена.ТекущаяСтрока();
	Если ПустоеЗначение(ТекСтр) = 1 Тогда
		ТекСтр = 0;
		СписСпособОбмена.ТекущаяСтрока(ТекСтр);
	КонецЕсли;
	
	ВыбСпособ = СписСпособОбмена.ПолучитьЗначение(ТекСтр);	
	
	Слои = "";
	Если ВыбСпособ = 2 Тогда //обмен по FTP
		Слои = "ОбменФТП";
	ИначеЕсли ВыбСпособ = 3 Тогда //обмен через Агент+ Сервер
		Слои = "ОбменАПС";	
	КонецЕсли;

	Форма.ИспользоватьСлой(Слои + ", Общие, Кнопки", 2);
	
	Если ВыбСпособ < 2 Тогда 
		Форма.стрНастройки.Видимость(1);		 		 
	Иначе
		Форма.стрНастройки.Видимость(0);		 		
	КонецЕсли;
	
КонецПроцедуры    
 
//******************************************************************************
Процедура ПриВыбореРежимаЗаявок()
	
	ТекСтр = СписРежимЗаявок.ТекущаяСтрока();
	Если ПустоеЗначение(ТекСтр) = 1 Тогда
		ТекСтр = 1;
		СписРежимЗаявок.ТекущаяСтрока(ТекСтр);
	КонецЕсли;
	
	ВыбРежимЗаявок = СписРежимЗаявок.ПолучитьЗначение(ТекСтр);	
	
КонецПроцедуры //ПриВыбореРежимаЗаявок()  

//******************************************************************************

Процедура ПриВыбореРежимаТреков()   
	
	ТекСтр = СписРежимЗагрузкиТреков.ТекущаяСтрока();
	Если ПустоеЗначение(ТекСтр) = 1 Тогда
		ТекСтр = 0;
		СписРежимЗагрузкиТреков.ТекущаяСтрока(ТекСтр);
	КонецЕсли;
	
	ВыбРежимТреков = СписРежимЗагрузкиТреков.ПолучитьЗначение(ТекСтр);	 

	Форма.ПапкаТреков.Доступность(ВыбРежимТреков); 		
	
КонецПроцедуры //ПриВыбореРежимаТреков()     

//******************************************************************************
Процедура ПриВыбореРежимаПоступления()
	
	ТекСтр = СписРежимПоступления.ТекущаяСтрока();
	Если ПустоеЗначение(ТекСтр) = 1 Тогда
		ТекСтр = 1;
		СписРежимПоступления.ТекущаяСтрока(ТекСтр);
	КонецЕсли;
	
	ВыбРежимПоступления = СписРежимПоступления.ПолучитьЗначение(ТекСтр);	
	
КонецПроцедуры //ПриВыбореРежимаПоступления()  

//******************************************************************************   
Процедура ПриВыбореПриложения()
	
	Если ИспГПС = 0 Тогда
		
		Форма.ПриложениеДляПросмотраКарт.Доступность(ИспГПС);    
		Форма.ОсновнаяКарта.Доступность(ИспГПС);   
		Форма.Погрешность.Доступность(ИспГПС);   
		Форма.ПутьКФайлуЗапускаMap9Viewer.Доступность(ИспГПС);    
		Форма.СписРежимЗагрузкиТреков.Доступность(ИспГПС);    
		Форма.ПапкаТреков.Доступность(ИспГПС);
		
	Иначе
		                                                         
		Форма.ПриложениеДляПросмотраКарт.Доступность(ИспГПС);     
		Форма.ОсновнаяКарта.Доступность(ИспГПС);              
		Форма.СписРежимЗагрузкиТреков.Доступность(ИспГПС);    
		
		Если ПриложениеДляПросмотраКарт = Перечисление.кпкПриложенияДляПросмотраКарт.APPlus Тогда
			Форма.Погрешность.Доступность(1); 
			Форма.СписРежимЗагрузкиТреков.Доступность(0);		
			Форма.ПутьКФайлуЗапускаMap9Viewer.Доступность(0);
			Форма.ПапкаТреков.Доступность(0);		
			
			СписРежимЗагрузкиТреков.ТекущаяСтрока(1);
			ВыбРежимТреков = 0;	 
			
		Иначе
			Форма.Погрешность.Доступность(0); 
			Форма.СписРежимЗагрузкиТреков.Доступность(1);   		
			Форма.ПутьКФайлуЗапускаMap9Viewer.Доступность(1);
			Форма.ПапкаТреков.Доступность(1);
			
			ПриВыбореРежимаТреков();		
		КонецЕсли;      
		
	КонецЕсли;  	

КонецПроцедуры //ПриВыбореПриложения()  

 //******************************************************************************   
Процедура ПриВыбореРежимаПланирования()
	
	ТекСтр = СписРежимПланирования.ТекущаяСтрока();
	Если ПустоеЗначение(ТекСтр) = 1 Тогда
		ТекСтр = 1;
		СписРежимПланирования.ТекущаяСтрока(ТекСтр);
	КонецЕсли;
	
	ВыбРежимПл = СписРежимПланирования.ПолучитьЗначение(ТекСтр);	 
	
КонецПроцедуры //ПриВыбореРежимаПланирования()   

//******************************************************************************
Процедура ПриИзмененииШифр() 
	Форма.КриптоПароль.Доступность(ШифроватьДанные);   
КонецПроцедуры  
 
//******************************************************************************
Процедура ПриИзмененииИспПл()
	Форма.СписРежимПланирования.Доступность(ИспПланыПродаж);   
КонецПроцедуры     

//******************************************************************************
Процедура флПриИзмененииИспГПС() 
	
	ПриВыбореПриложения();
	
КонецПроцедуры   

//******************************************************************************
// ВыборФайла()
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ВыборФайла(ТипДиалога = 0, ИмяФайла, ИмяФильтра = "", Фильтр = "exe")
		
	Стр = ИмяФильтра + " (*." + Фильтр + ")|*." + Фильтр + "";
    
	Каталог = "";
	
	Если ФС.ВыбратьФайл(ТипДиалога, ИмяФайла, Каталог, "Выберите файл", Стр, , ) = 1 Тогда
		
	    ИмяФайла = Каталог + ИмяФайла;
		
	КонецЕсли;
	
КонецПроцедуры // ВыборФайла()

//******************************************************************************   


////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//  
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()
	
	Форма.Закладки.УдалитьВсе();
     	
	Форма.Закладки.ДобавитьЗначение("Общие", "Общие настройки"); 	

	Форма.Закладки.ДобавитьЗначение("GPS", "Настройки для работы с картами");   
	
	// Восстановление последней открытой закладки.        
	Закладка = 0;                      
	Если ПустоеЗначение(Форма.Параметр) = 0  Тогда // могли передать нужную закладку
		Закладка = Форма.Закладки.Получить(Форма.Параметр);
	КонецЕсли; 
	Если ПустоеЗначение(Закладка) = 1 Тогда // через параметр формы закаладка не передана, восстанавливаем предыдущую
		Закладка = ВосстановитьЗначение("Закладка настройки параметров учета");
	КонецЕсли;

	//Закладка = Макс(1, Форма.Закладки.НайтиЗначение(Закладка));
                
	Закладка = 1;
	
	// Открытие нужного слоя.
	Форма.Закладки.ТекущаяСтрока(Закладка);
	ТекущаяЗакладка = Форма.Закладки.ПолучитьЗначение(Закладка);
	Форма.ИспользоватьСлой(ТекущаяЗакладка+", Кнопки", 2);  
	

	// Заполняем списки			
	СписСпособОбмена.ДобавитьЗначение(0,"Прямое подключение");
	СписСпособОбмена.ДобавитьЗначение(1,"Электронная почта");
	СписСпособОбмена.ДобавитьЗначение(2,"FTP");
	СписСпособОбмена.ДобавитьЗначение(3,"Агент Плюс СОД");	
	
	СписРежимЗаявок.ДобавитьЗначение(1,"Загружать в док. ""Заявка""");
	СписРежимЗаявок.ДобавитьЗначение(2,"Загружать в док. ""Реализация""");
	СписРежимЗаявок.ДобавитьЗначение(3,"Создавать на основании ""Заявки"" док. ""Реализация""");
	
	СписРежимЗагрузкиТреков.ДобавитьЗначение(0,"Загружать каждую точку трека");
	СписРежимЗагрузкиТреков.ДобавитьЗначение(1,"Загружать файлы треков целиком");	
	
	СписРежимПланирования.ДобавитьЗначение(1,"По сумме");
	СписРежимПланирования.ДобавитьЗначение(2,"По количеству");	 
	СписРежимПланирования.ДобавитьЗначение(3,"По сумме и количеству");	
	
	СписРежимПоступления.ДобавитьЗначение(0,"Загружать в документ ""Возврат от покупателя""");
	СписРежимПоступления.ДобавитьЗначение(1,"Загружать в док. ""Поступление ТМЦ""");
		
	// Считаем значения констант в реквизиты формы    	 	
	//ГруппаНовыхКлиентов     	= Константа.кпкГруппаНовыхКлиентов;
	//ДатаИсторииПродаж 	        = Константа.кпкДатаИсторииПродаж;
	//ИспользоватьВремяВМаршрутах = Константа.кпкИспользоватьВремяВМаршрутах;
	//ИспользоватьПерсЦены 		= Константа.кпкИспользоватьПерсЦены;     
	//ИспАвтонумерацию            = Константа.кпкИспользоватьАвтонумерациюДокументов;	
	//КриптоПароль				= Константа.кпкКриптоПароль;
	//МинЦена						= Константа.кпкМинЦена;
	//НазваниеБД					= Константа.кпкНазваниеБД;
	//ОсновнаяКарта 				= Константа.кпкОсновнаяКарта;
	//ПапкаКартинокТоваров 		= Константа.кпкПапкаКартинокТоваров;
	//ВидОперацииЗаявок			= Константа.кпкВидОперацииЗаявок;     	
	//ПапкаТреков 				= Константа.кпкПапкаТреков;
	//ПапкаФотоКДокументам 		= Константа.кпкПапкаФотоКДокуметам;
	//Погрешность 				= Константа.кпкПогрешностьПриРасчетеФактаПосещенияТочки; 
	//ПриложениеДляПросмотраКарт 	= Константа.кпкПриложениеПросмотраКарт;	
	//ПутьКФайлуЗапускаMap9Viewer = Константа.кпкПутьКФайлуЗапускаMap9Viewer;
	//ВыбРежимЗаявок 				= Константа.кпкРежимЗагрузкиЗаявок;    	
	//ВыбРежимТреков  			= Константа.кпкРежимЗагрузкиТреков;	
	//ИспЕдИзм 					= Константа.кпкРежимИспользованияЕдИзм;
	//ВыбРежимПл 					= Константа.кпкРежимПланированияПродаж;
	//флТоргТочки 				= Константа.кпкРежимТоргТочек ; 
	//ВыбСпособ 					= Константа.кпкСпособОбмена;
	//СрокПеремещений 			= Константа.кпкСрокПеремещений; 
	//СрокИнвентаризаций          = Константа.кпкСрокИнвентаризаций;
	//ШифроватьДанные 			= Константа.кпкШифроватьДанные;
	//ПапкаОбменаССервером 	    = Константа.кпкАпсПапкаОбменаССервером; 
	//АпсСервер 					= Константа.кпкАпсСервер;
	//ФтпСервер 					= Константа.кпкФтпСервер; 
	//ФтпПользователь				= Константа.кпкФтпПользователь;
	//ФтпПароль 					= Константа.кпкФтпПароль; 
	//ИспПланыПродаж  		    = Константа.кпкИспользоватьПланыПродаж;	
	//ВыбРежимПоступления			= Константа.кпкРежимЗагрузкиДокументовПоступления;  
	//ИспользоватьДоговоры		= Константа.кпкИспользоватьДоговоры; 	 
	//ИнтервалПодтверждений		= Константа.кпкИнтервалПодтверждений;
	//ИнтервалЗаявок	            = Константа.кпкИнтервалВыгрузкиЗаказов;      
	//ИспГПС			            = Константа.кпкИспользоватьГПС;     
	
	Если ПустоеЗначение(НазваниеБД) = 1 Тогда
		НазваниеБД = "Основная";
	КонецЕсли;        

	// Устанавливаем текущие значения в списках выбора	 
	
	// Способ обмена
	Поз = СписСпособОбмена.НайтиЗначение(ВыбСпособ);
	Если Поз <> 0 Тогда
	    СписСпособОбмена.ТекущаяСтрока(Поз);
		ПриВыбореСпособаОбмена();
	КонецЕсли;   
	           
	// Режим загрузки заявок
	Поз = СписРежимЗаявок.НайтиЗначение(ВыбРежимЗаявок);
	Если Поз <> 0 Тогда
	    СписРежимЗаявок.ТекущаяСтрока(Поз);
		ПриВыбореРежимаЗаявок();
	КонецЕсли;
                 
	// Режим загрузки треков	
	Поз = СписРежимЗагрузкиТреков.НайтиЗначение(ВыбРежимТреков);
	Если Поз <> 0 Тогда
	    СписРежимЗагрузкиТреков.ТекущаяСтрока(Поз);
		ПриВыбореРежимаТреков();
	КонецЕсли;                 
	
	// Режим планирования продаж	
	Поз = СписРежимПланирования.НайтиЗначение(ВыбРежимПл);
	Если Поз <> 0 Тогда
	    СписРежимПланирования.ТекущаяСтрока(Поз);
		ПриВыбореРежимаПланирования();
	КонецЕсли;   
	
	// Режим загрузки поступления
	Поз = СписРежимПоступления.НайтиЗначение(ВыбРежимПоступления);
	Если Поз <> 0 Тогда
	    СписРежимПоступления.ТекущаяСтрока(Поз);
		ПриВыбореРежимаПоступления();
	КонецЕсли;
	
	ПриИзмененииИспПл(); 	
	ПриВыбореПриложения();  	
	ПриИзмененииШифр(); 
	флПриИзмененииИспГПС();
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриВыбореЗакладки(Номер, Закладка)
	
	Если Закладка = "Общие" Тогда	
		Форма.ИспользоватьСлой("Общие, Кнопки", 2); 
		ПриВыбореСпособаОбмена();
	ИначеЕсли Закладка = "GPS" Тогда                  
		Форма.ИспользоватьСлой("GPS, Кнопки", 2); 
	КонецЕсли;	
	
КонецПроцедуры // ПриВыбореЗакладки()  

//******************************************************************************
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога, ФлагСтандОбр)
    
	Если ИдентЭлемДиалога = "ПутьКФайлуЗапускаMap9Viewer" Тогда
	         
		ВыборФайла(0, ПутьКФайлуЗапускаMap9Viewer, "Файл приложения", "exe");
		
	ИначеЕсли ИдентЭлемДиалога = "ПапкаТреков" Тогда                            
		
		ФС.ВыбратьКаталог(ПапкаТреков, "Выбор каталога", 60); 
	
	ИначеЕсли ИдентЭлемДиалога = "ПапкаОбменаССервером" Тогда                            
		
		ФС.ВыбратьКаталог(ПапкаОбменаССервером, "Выбор каталога", 60); 
	
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения() 

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриЗакрытии()       
	
	СохранитьЗначение("Закладка настройки параметров учета", ТекущаяЗакладка); 
	
	//Проверим, изменились ли значения настроек   	
	
	Если   //(ГруппаНовыхКлиентов     	 		 <> Константа.кпкГруппаНовыхКлиентов) 
		//ИЛИ (ДатаИсторииПродаж 	         		 <> Константа.кпкДатаИсторииПродаж)  
		//ИЛИ  (ИспользоватьВремяВМаршрутах		 <> Константа.кпкИспользоватьВремяВМаршрутах) 
		//ИЛИ (ИспользоватьПерсЦены 		 		 <> Константа.кпкИспользоватьПерсЦены) 		
		//ИЛИ (ИспАвтонумерацию 		 		     <> Константа.кпкИспользоватьАвтонумерациюДокументов)    		
		//ИЛИ (КриптоПароль				 		 <> Константа.кпкКриптоПароль) 
		//ИЛИ (МинЦена					 		 <> Константа.кпкМинЦена) 
		//ИЛИ (СокрЛП(НазваниеБД)			 		 <> СокрЛП(Константа.кпкНазваниеБД))  
		//ИЛИ (ОсновнаяКарта 				 		 <> Константа.кпкОсновнаяКарта) 
		//ИЛИ (СокрЛП(ПапкаКартинокТоваров) 		 <> СокрЛП(Константа.кпкПапкаКартинокТоваров)) 
		//ИЛИ (СокрЛП(ПапкаТреков) 		 		 <> СокрЛП(Константа.кпкПапкаТреков)) 
		//ИЛИ (СокрЛП(ПапкаФотоКДокументам)		 <> СокрЛП(Константа.кпкПапкаФотоКДокуметам)) 
		//ИЛИ (Погрешность 				  		 <> Константа.кпкПогрешностьПриРасчетеФактаПосещенияТочки) 
		//ИЛИ (ПриложениеДляПросмотраКарт   		 <> Константа.кпкПриложениеПросмотраКарт)  
		//ИЛИ (ВидОперацииЗаявок   		 		 <> Константа.кпкВидОперацииЗаявок) 							
		//ИЛИ (СокрЛП(ПутьКФайлуЗапускаMap9Viewer) <> СокрЛП(Константа.кпкПутьКФайлуЗапускаMap9Viewer)) 
		//ИЛИ (ВыбРежимЗаявок 			  		 <> Константа.кпкРежимЗагрузкиЗаявок)   	
		//ИЛИ (ВыбРежимТреков  			  		 <> Константа.кпкРежимЗагрузкиТреков) 	
		//ИЛИ (ИспЕдИзм 					  		 <> Константа.кпкРежимИспользованияЕдИзм)  
		//ИЛИ (ВыбРежимПл 				  		 <> Константа.кпкРежимПланированияПродаж) 
		//ИЛИ (флТоргТочки 				  		 <> Константа.кпкРежимТоргТочек) 
		//ИЛИ (ВыбСпособ 					  		 <> Константа.кпкСпособОбмена) 
		//ИЛИ (СрокПеремещений 			  		 <> Константа.кпкСрокПеремещений)   
		//ИЛИ (СрокИнвентаризаций 			  	 <> Константа.кпкСрокИнвентаризаций)  
		//ИЛИ (ШифроватьДанные 			  		 <> Константа.кпкШифроватьДанные)  
		(СокрЛП(ПапкаОбменаССервером) 	     <> СокрЛП(Константа.кпкАпсПапкаОбменаССервером)) 
		ИЛИ (СокрЛП(АпсСервер) 					 <> СокрЛП(Константа.кпкАпсСервер)) 
		//ИЛИ (СокрЛП(ФтпСервер) 					 <> СокрЛП(Константа.кпкФтпСервер)) 
		//ИЛИ (СокрЛП(ФтпПользователь)			 <> СокрЛП(Константа.кпкФтпПользователь)) 
		//ИЛИ (СокрЛП(ФтпПароль) 					 <> СокрЛП(Константа.кпкФтпПароль))    		
		//ИЛИ (ИспПланыПродаж 		 		     <> Константа.кпкИспользоватьПланыПродаж)    		 		
		//ИЛИ (ВыбРежимПоступления 			  	 <> Константа.кпкРежимЗагрузкиДокументовПоступления)  
		//ИЛИ (ИспользоватьДоговоры 			  	 <> Константа.кпкИспользоватьДоговоры)  
		//ИЛИ (ИнтервалПодтверждений 			  	 <> Константа.кпкИнтервалПодтверждений) 
		//ИЛИ (ИнтервалЗаявок 			  		 <> Константа.кпкИнтервалВыгрузкиЗаказов)  
		//ИЛИ (ИспГПС 			  		 		 <> Константа.кпкИспользоватьГПС)         
		Тогда 		

		 // Если изменились настройки, то спросим, надо ли их сохранять
		Ответ = Вопрос("Сохранить изменения?","Да+Нет+Отмена", 60);
		Если Ответ = "Да" Тогда
			ПоКнопкеОК();   
			СтатусВозврата(0);
			Возврат;
		ИначеЕсли Ответ="Отмена" Тогда	   
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;	
	КонецЕсли;   
	
КонецПроцедуры // ПриЗакрытии()     

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
Форма.ИспользоватьЗакладки(1);  