////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ МОДУЛЬНЫХ ПЕРЕМЕННЫХ
//                                                                           
Перем ТекСтрокаВТаблице; // текущая строка в таблице значений  МФ

Перем ПодкаталогКартинок;
Перем ПодкаталогБезопасностиКаталогаВыгрузки;

Перем ВыгружатьНаСайт;

Перем Истина;
Перем Ложь;
Перем Неопределено;

Перем НаименованиеКаталогаТоваровCML;
Перем НаименованиеПакетаПредложенийCML;

Перем НаименованиеНалога;

Перем иТоварыДляВыгрузки;
Перем тСкладыДляВыгрузки;
Перем сзКлюч;

Перем ДатаОтчета;

Перем ПараметрЗапросаHTTP_Инициализация;
Перем ПараметрЗапросаHTTP_ПередачаФайла;
Перем ПараметрЗапросаHTTP_ИмпортФайлаСервером;
Перем ПараметрЗапросаHTTP_ПолучитьДанные; 
Перем ПараметрЗапросаHTTP_УспешноеЗавершениеИмпорта;
     
Перем ОтветСервера_ZIPРазрешен;
Перем ОтветСервера_ОграничениеРазмераФрагментаФайлаОбмена;
Перем ОтветСервера_УспешноеЗавершениеТекущейОперации;
Перем ОтветСервера_АварийноеЗавершениеТекущейОперации;
Перем ОтветСервера_ВыполнениеТекущейОперации;

Перем ФайлЗагрузки;

//Перем Рубли;

Перем КаталогКартинок;

//%%%
Перем СписокСвойствНоменклатуры;
Перем СписокФайловКартинок;

Перем итЕдиницы;

Перем ДопФункции;//внешняя компонента
Перем ОбработкаОбменССайтом;//внешняя компонента

Перем ВерсияОбработки;

Перем ЗапросСКЛ;

Процедура ВыгрузитьДанные() Далее

Функция ПолучитьЗначениеРеквизитаСправочника(Элем,Реквизит)
	
	Если Реквизит="Наименование" Тогда
		ИмяРеквизита="Спр.DESCR";
	Иначе
		ИмяРеквизита="$Спр."+Реквизит;
	КонецЕсли;
	
	ТекстЗапроса = "SELECT TOP 1 dbo.Conv1C2UTF("+ИмяРеквизита + ") Реквизит 
	|			   FROM $Справочник."+Элем.Вид() +" Спр (NOLOCK) 
	|			   WHERE ID = :ВыбЗнач";
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбЗнач",Элем.ТекущийЭлемент());
	
	Возврат ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);

КонецФункции

Функция ЗаменитьСпецСимволыВСтроке(Стр)
	тмп = Стр;
	тмп = СтрЗаменить(тмп, РазделительСтрок, "&lt;br&gt;");
	тмп = СтрЗаменить(тмп, СимволТабуляции, " ");
	тмп = СтрЗаменить(тмп, "=>", "->");
	тмп = СтрЗаменить(тмп, "<>", "");
	
	Возврат СокрЛП(тмп);
КонецФункции


Процедура ВыводВТаблицу(ТЗ, Загол="")
	таб2 = СоздатьОбъект("Таблица");
	таб2.ИсходнаяТаблица("Таблица");
	для к=1 по ТЗ.КоличествоКолонок() Цикл 
		стр=ТЗ.ПолучитьПараметрыКолонки(к,,,,,,,); 
		Если к=1 Тогда
			таб2.ВывестиСекцию("С1|К1");
		Иначе
			таб2.ПрисоединитьСекцию("С1|К1");
		КонецЕсли;                                       
	КонецЦикла;   
	для с=1 по ТЗ.КоличествоСтрок() Цикл  
		для к=1 по ТЗ.КоличествоКолонок() Цикл 
			стр=ТЗ.ПолучитьЗначение(с,к); 
			Если к=1 Тогда
				таб2.ВывестиСекцию("С1|К1");
			Иначе
				таб2.ПрисоединитьСекцию("С1|К1");
			КонецЕсли;  
			
			Если ТипЗначенияСтр(стр)="ТаблицаЗначений" Тогда
				ВыводВТаблицу(стр);
			КонецЕсли;
		КонецЦикла;   
	КонецЦикла;
	таб2.Показать(Загол,,);	 
КонецПроцедуры

//******************************************************************************
// Предопределенная процедура.
Процедура ВводНового()
	
	// эта предопределенная процедура выполняется при восстановлении настройки
	ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
	
КонецПроцедуры // ВводНового()   


//==============================================================================
// Предварительное описание
Процедура ПриИзмененииФлИспользоватьПрокси() Далее


//==============================================================================
//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция ПолучитьДатуV8(ЧастьДата, ЧастьВремя = "00:00:00")
	
	Если ПустоеЗначение(ЧастьДата) = 1 Тогда
		
		Возврат "0001-01-01T" + ЧастьВремя;
		
	Иначе
		
		Возврат "" + ДатаГод(ЧастьДата) + "-" + Формат(ДатаМесяц(ЧастьДата),"Ч(0)2") + "-" + Формат(ДатаЧисло(ЧастьДата),"Ч(0)2") + "T" + ЧастьВремя;
	
	КонецЕсли;

КонецФункции // ПолучитьДатуV8()


//******************************************************************************
//	Функция глРазложить(Знач Стр, Разделитель = ",") Экспорт
//
//	Параметры: 
//		Стр - 			строка, которую необходимо разложить на подстроки. 
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		список значений, элементы которого - подстроки
//
//	Описание:
//		Функция "расщепляет" строку на подстроки, используя заданный 
//		разделитель. Разделитель может иметь любую длину. 
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы 
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//		Например, 
//		глРазложить(",ку,,,му", ",") возвратит список значений из пяти элементов, 
//		три из которых - пустые строки, а 
//		глРазложить(" ку   му", " ") возвратит список значений из двух элементов
//		
Функция Разложить(Знач Стр, Разделитель = ",") Экспорт
	СЗ = СоздатьОбъект("СписокЗначений");
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				СЗ.ДобавитьЗначение(СокрЛП(Стр));
				Возврат СЗ;
			КонецЕсли;
			СЗ.ДобавитьЗначение(СокрЛП(Лев(Стр,Поз-1)));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				СЗ.ДобавитьЗначение(СокрЛП(Стр));
				Возврат СЗ;
			КонецЕсли;
			СЗ.ДобавитьЗначение(СокрЛП(Лев(Стр,Поз-1)));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;

КонецФункции // глРазложить


Функция РазложитьАдресНаСоставляющие(Адрес) 
	
	СЗ = СоздатьОбъект("СписокЗначений");
	СЗ.Установить("Почтовый индекс","");
	СЗ.Установить("Регион","");
	СЗ.Установить("Населенный пункт","");
	СЗ.Установить("Улица","");
	СЗ.Установить("Дом","");
	СЗ.Установить("Корпус","");
	
	АдресСписком = Разложить(Адрес);
	
	Если СтрЧислоВхождений(Адрес, ",") >= 9 Тогда // должно быть 9 запятых
		СЗ.Установить("Почтовый индекс",АдресСписком.ПолучитьЗначение(2));
		СЗ.Установить("Регион",АдресСписком.ПолучитьЗначение(3));
		СЗ.Установить("Населенный пункт",АдресСписком.ПолучитьЗначение(6));
		СЗ.Установить("Улица",АдресСписком.ПолучитьЗначение(7));
		СЗ.Установить("Дом",АдресСписком.ПолучитьЗначение(8));
		СЗ.Установить("Корпус",АдресСписком.ПолучитьЗначение(9));
	КонецЕсли;
	
	Возврат СЗ;
	
КонецФункции // глАдресСоответствуетТребованиямМНС()


Функция АдресСоответствуетТребованиямМНС(Адрес) Экспорт
	
	АдресСписком = Разложить(Адрес);
	
	Если      СтрКоличествоСтрок(Адрес) <> 1 Тогда     // недолжно быть переводов строк
		Возврат 0;
	ИначеЕсли СтрЧислоВхождений(Адрес, ",") <> 9 Тогда // должно быть 9 запятых
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(1))  > 3  Тогда   // код страны не > 3 символов
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(2))  > 6  Тогда   // индекс не > 6 символов
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(3))  > 30 Тогда   // наим.региона не > 30 символов
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(4))  > 35 Тогда   // наим.района не > 35 символов
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(5))  > 35 Тогда   // наим.города не > 35 символов
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(6))  > 45 Тогда   // наим.нас.пункта не > 45 символов
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(7))  > 45 Тогда   // наим.улицы не > 45 символов
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(8))  > 10  Тогда   // номер дома не > 10 символов
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(9))  > 10  Тогда   // номер корпуса не > 10 символов
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(10)) > 10  Тогда   // номер квартиры не > 10 символов
		Возврат 0;
		
	Иначе
		Возврат 1;
		
	КонецЕсли;
	
КонецФункции // глАдресСоответствуетТребованиямМНС()


Функция ПредставлениеАдреса(Знач Адрес, Способ = 0) Экспорт
	
	Если (АдресСоответствуетТребованиямМНС(Адрес) = 1) Тогда
		
		АдресСписком = Разложить(Адрес);
		Адрес = "";
		
		Если ПустаяСтрока(АдресСписком.ПолучитьЗначение(1)) = 0 Тогда 
			
			Адрес = АдресСписком.ПолучитьЗначение(1);
			
			Если Метаданные.Справочник("ОКСМ").Выбран() = 1 Тогда 
				Объект = СоздатьОбъект("Справочник.ОКСМ");
				Если Объект.НайтиПоКоду(АдресСписком.ПолучитьЗначение(1)) = 1 Тогда
					Адрес = Объект.ТекущийЭлемент().Наименование;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
			
		Для Индекс = 2 + Способ По 10 Цикл
			Если ПустаяСтрока(АдресСписком.ПолучитьЗначение(Индекс)) = 0 Тогда 
				Адрес = Адрес + ?(ПустаяСтрока(Адрес) = 1, "", ", ") + 
				        ?(Индекс = 8, "д. ", ?(Индекс = 9, "кор. ", ?(Индекс = 10, "кв. ", ""))) + 
				        АдресСписком.ПолучитьЗначение(Индекс);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Адрес = СтрЗаменить(Адрес, РазделительСтрок, ", ");
		
	КонецЕсли;

	Возврат Адрес;
	
КонецФункции // глПредставлениеАдреса()


//******************************************************************************
// глДобавитьВТаблицуМФ(ТаблицаМФ,Тип, Вид, ИмяПеременной, Представление) Экспорт
//
// Параметры:                    
//  ТаблицаМФ - ссылка на таблицу МФ
//  Тип - текстовая строка, тип значения
//  Вид - текстовая строка, вид значения
//  Имя переменной - имя переменной запроса, к которой должен быть приложен фильтр
//  Представление - текстовая строка - описание фильтра для пользователя
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Добавляет в таблицу МФ 1 строку, если там еще нет аналогичной.
//  Используется для инициализации таблицы МФ
//
Процедура ДобавитьВТаблицуМФ(ТаблицаМФ,Тип, Вид, ИмяПеременной, Представление) Экспорт
	
	Если ТаблицаМФ.НайтиЗначение(Представление, 0, "Представление") = 0 Тогда
		
		ТаблицаМФ.НоваяСтрока();
		ТаблицаМФ.Тип=Тип;
		ТаблицаМФ.Вид=Вид;
		ТаблицаМФ.ИмяПеременной=ИмяПеременной;                
		ТаблицаМФ.СписокЭлементов=СоздатьОбъект("СписокЗначений");
		ТаблицаМФ.ТипМФ=1; // текущая строка списка ТипМФ
		ТаблицаМФ.ФлВкл=1; // фильтр включен ("1" или "2")
		ТаблицаМФ.Представление=Представление;	
		
	КонецЕсли;
	
	Если СокрЛП(Представление) = "По авторам документов" Тогда  
		Стр = 0;
		Если ТаблицаМФ.НайтиЗначение("По автору документов", Стр, "Представление") = 1 Тогда
			ТаблицаМФ.УдалитьСтроку(Стр);		    
		КонецЕсли;	    
	КонецЕсли;
	
КонецПроцедуры // глДобавитьВТаблицуМФ()


//******************************************************************************
// глРаботаСТаблицейМФ(Режим,Конт)
//
// Параметры:
//  Режим 	- текстовая строка, определяет выполняемое действие	
//  Конт 	- контекст формы отчета
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Производит действия с таблице МФ в соотв. с параметром "Режим"
//  Вызывается из формул элементов диалога:
//  Кнопки "Добавить", "ДобавитьНесколько", "Удалить", "УдалитьВсе"
//
Процедура РаботаСТаблицейМФ(Режим, Конт) Экспорт
	
	Перем ТекПоз;
	Перем ТекЭлемент;
	Перем ФормаПодбора;
	Перем ВидЗначенияПодбора;
	Перем СправочникПодбора;             
	
	//ТаблицаМФ = Конт.ТаблицаМФ;
	//СписокЭлементовМФ = Конт.СписокЭлементовМФ;
	
	ТекПоз = СписокЭлементовМФ.ТекущаяСтрока();
	Если ТекПоз>0 Тогда // текущий элемент, спозиционируем на него
		ТекЭлемент=СписокЭлементовМФ.ПолучитьЗначение(ТекПоз);
	КонецЕсли;
	
	Если (Режим="Добавить") или (Режим="ДобавитьНесколько")  Тогда		// добавляем в список один элемент
		Если ТипЗначенияСтр(ТаблицаМФ.Вид)="СписокЗначений" Тогда
			ВидЗначенияПодбора="";
			Если ТаблицаМФ.Вид.ВыбратьЗначение(ВидЗначенияПодбора,"",,,1)=0 Тогда
				Возврат;
			КонецЕсли;
		Иначе
			ВидЗначенияПодбора=СокрЛП(ТаблицаМФ.Вид);
		КонецЕсли;
		Если ПустоеЗначение(ВидЗначенияПодбора)=1 Тогда
			Возврат;
		КонецЕсли;
		СправочникПодбора = СокрЛП(ТаблицаМФ.Тип)+"."+ВидЗначенияПодбора;
		
		Зн = "";
		// проверим, не является ли справочник подчиненным другому?
		// если да, то надо сначала спросить владельца
		Если Врег(СокрЛП(ТаблицаМФ.Тип))=Врег("Справочник") Тогда
			Если СокрЛП(Метаданные.Справочник(ВидЗначенияПодбора).Владелец) <> "Метаданные" Тогда
				Зн=СоздатьОбъект(Метаданные.Справочник(ВидЗначенияПодбора).Владелец.ПолныйИдентификатор());
				Зн.ВыборГруппы(0);
				Если Зн.Выбрать("Выберите "+Метаданные.Справочник(ВидЗначенияПодбора).Владелец,"") = 0 Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
		
		// открываем окно подбора                         
		Конт.ОткрытьПодбор(СправочникПодбора,,ФормаПодбора,?(Режим="ДобавитьНесколько",1,0),ТекЭлемент);
		Если Врег(СокрЛП(ТаблицаМФ.Тип))=Врег("Справочник") Тогда
			ФормаПодбора.ВыборГруппы(1);                                      
		КонецЕсли;
		Если ТипЗначенияСтр(Зн)="Справочник" Тогда
			ФормаПодбора.ИспользоватьВладельца(Зн.ТекущийЭлемент());
		КонецЕсли;
		
	ИначеЕсли Режим="УдалитьВсе" Тогда	// удаляем все элементы из списка
		СписокЭлементовМФ.УдалитьВсе();
		ТаблицаМФ.ФлВкл=1;
		
	ИначеЕсли Режим="Удалить" Тогда	// удаляем из списка один элемент
		Если ТекПоз >0 Тогда
			СписокЭлементовМФ.УдалитьЗначение(ТекПоз);
			Если СписокЭлементовМФ.РазмерСписка()>ТекПоз  Тогда
				СписокЭлементовМФ.ТекущаяСтрока(ТекПоз);
			Иначе // поставим на последний элемент
				СписокЭлементовМФ.ТекущаяСтрока(СписокЭлементовМФ.РазмерСписка());	
			КонецЕсли;        
			Если СписокЭлементовМФ.РазмерСписка()=0 Тогда
				ТаблицаМФ.ФлВкл=1;                           
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	// глРаботаСТаблицейМФ()


//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(Значение)  
	
	Если (СписокЭлементовМФ.НайтиЗначение(Значение)=0) Тогда
		Представление=""+Значение;
		Если ТипЗначенияСтр(Значение)="Справочник" Тогда
			Если СокрЛП(Метаданные.Справочник(Значение.Вид()).Владелец) <> "Метаданные" Тогда
				Представление=Представление+" ("+Значение.Владелец+")";
			КонецЕсли;
		КонецЕсли;	
		СписокЭлементовМФ.ДобавитьЗначение(Значение,Представление);
		ТаблицаМФ.ФлВкл=2;
	КонецЕсли;
	
	СписокЭлементовМФ.Выгрузить(ТаблицаМФ.СписокЭлементов);	
	
КонецПроцедуры  // ОбработкаПодбора


//******************************************************************************
Процедура ПриНачалеВыбораЗначения(Эл, Фл)
	Если Эл="КаталогВыгрузки" Тогда
		Путь = КаталогВыгрузки;
		Если ФС.ВыбратьКаталог(Путь, "Укажите каталог для выгрузки")=1 Тогда
			КаталогВыгрузки = Путь;
		КонецЕсли;
	КонецЕсли;   
КонецПроцедуры  


//******************************************************************************
Процедура ПриВыбореЗакладки(Ном, Зн="")
	тмп = ""+Форма.Закладки.ПолучитьЗначение(Ном);
	Если (Ном=1) и (спТипОбмена.ТекущаяСтрока()>0) Тогда
		тмп = тмп+",Основной"+спТипОбмена.ПолучитьЗначение(спТипОбмена.ТекущаяСтрока());
	КонецЕсли;
	//Сообщить(тмп);
	Форма.ИспользоватьСлой(тмп, 2);
КонецПроцедуры



//======================================================================
Процедура ПриКликеПо_ТЗ_ВыгрузкаСвойств()
	Если ТЗ_ВыгрузкаСвойств.КоличествоСтрок()=0 Тогда
		Возврат;
	КонецЕсли;
	//Сообщить("вввв");
	Кол = ТЗ_ВыгрузкаСвойств.ТекущаяКолонка();
	Если Кол="Выгружать" Тогда
		ТЗ_ВыгрузкаСвойств.Выгружать = 3 - ТЗ_ВыгрузкаСвойств.Выгружать;
		Если (ТЗ_ВыгрузкаСвойств.Выгружать<>1) и (ТЗ_ВыгрузкаСвойств.Выгружать<>2) Тогда
			ТЗ_ВыгрузкаСвойств.Выгружать = 1;
		КонецЕсли;
	ИначеЕсли Кол="ВыгружатьТовар" Тогда
		ТЗ_ВыгрузкаСвойств.ВыгружатьТовар = 3 - ТЗ_ВыгрузкаСвойств.ВыгружатьТовар;
		Если (ТЗ_ВыгрузкаСвойств.ВыгружатьТовар<>1) и (ТЗ_ВыгрузкаСвойств.ВыгружатьТовар<>2) Тогда
			ТЗ_ВыгрузкаСвойств.ВыгружатьТовар = 1;
		КонецЕсли;
	ИначеЕсли Кол="ВыгружатьРеквизит" Тогда
		ТЗ_ВыгрузкаСвойств.ВыгружатьРеквизит = 3 - ТЗ_ВыгрузкаСвойств.ВыгружатьРеквизит;
		Если (ТЗ_ВыгрузкаСвойств.ВыгружатьРеквизит<>1) и (ТЗ_ВыгрузкаСвойств.ВыгружатьРеквизит<>2) Тогда
			ТЗ_ВыгрузкаСвойств.ВыгружатьРеквизит = 1;
		КонецЕсли;
	ИначеЕсли Кол="НаименованиеНаСайте" Тогда
		тмп = ТЗ_ВыгрузкаСвойств.НаименованиеНаСайте;
		Если ВвестиСтроку(тмп,"Введите название на сайте",100,0,0)=1 Тогда
			ТЗ_ВыгрузкаСвойств.НаименованиеНаСайте = тмп;
		КонецЕсли;
	ИначеЕсли Кол="НаименованиеТега" Тогда
		тмп = ТЗ_ВыгрузкаСвойств.НаименованиеНаСайте;
		Если ВвестиСтроку(тмп,"Введите название тега (слитно без пробелов)",100,0,0)=1 Тогда
			ТЗ_ВыгрузкаСвойств.НаименованиеНаСайте = тмп;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПриКликеПо_ТЗ_ВыгрузкаСвойств

Процедура ПриКликеПо_ТЗ_ВыгрузкаРеквизитов()
	Если ТЗ_ВыгрузкаРеквизитов.КоличествоСтрок()=0 Тогда
		Возврат;
	КонецЕсли;
	//Сообщить("вввв");
	Кол = ТЗ_ВыгрузкаРеквизитов.ТекущаяКолонка();
	Если Кол="Выгружать" Тогда
		ТЗ_ВыгрузкаРеквизитов.Выгружать = 3 - ТЗ_ВыгрузкаРеквизитов.Выгружать;
		Если (ТЗ_ВыгрузкаРеквизитов.Выгружать<>1) и (ТЗ_ВыгрузкаРеквизитов.Выгружать<>2) Тогда
			ТЗ_ВыгрузкаРеквизитов.Выгружать = 1;
		КонецЕсли;
	ИначеЕсли Кол="НаименованиеТега" Тогда
		тмп = ТЗ_ВыгрузкаРеквизитов.НаименованиеТега;
		Если ВвестиСтроку(тмп,"Введите название тега (слитно без пробелов)",100,0,0)=1 Тогда
			ТЗ_ВыгрузкаРеквизитов.НаименованиеТега = тмп;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПриКликеПо_ТЗ_ВыгрузкаСвойств

//======================================================================
Процедура ПодготовитьСвойстваКВыгрузке()
	стрСв = "";
	ТЗ_ВыгрузкаСвойств.ВыбратьСтроки();
	Пока ТЗ_ВыгрузкаСвойств.ПолучитьСтроку() = 1 Цикл
		Если ТЗ_ВыгрузкаСвойств.Выгружать<>2 Тогда
			Продолжить;
		КонецЕсли;
		
		стрСв = стрСв + ","+ ТЗ_ВыгрузкаСвойств.Реквизит+":"+ТЗ_ВыгрузкаСвойств.НаименованиеНаСайте; 
	КонецЦикла;
	
	СписокСвойствНоменклатуры = Разложить(стрСв,",");
КонецПроцедуры // ПодготовитьСвойстваКВыгрузке

Процедура ПодготовитьЕдиницы()
	ТекстЗапроса = "SELECT $ЕдиницыПеревод.Единица [Ссылка $Перечисление.ЕдиницыИзмерения]
	|				    , RTRIM($ЕдиницыПеревод.Идентификатор) ИД
	|			   FROM $Справочник.ЕдиницыПеревод AS ЕдиницыПеревод With (NOLOCK)";
	
	
	ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итЕдиницы);
	итЕдиницы.ДобавитьИндекс("иЕдиница","*Ссылка");
КонецПроцедуры

//======================================================================
Процедура ЗаполнитьСписокСвойствТоваров_ДобавитьСвойство(ИдРеквизита, НаименованиеРекв)
	
	стр = "";
	Если ТЗ_ВыгрузкаСвойств.НайтиЗначение(ИдРеквизита, стр, "Реквизит")=0 Тогда
		ТЗ_ВыгрузкаСвойств.НоваяСтрока();
		ТЗ_ВыгрузкаСвойств.Выгружать = 1;
		ТЗ_ВыгрузкаСвойств.Реквизит = ИдРеквизита;
		ТЗ_ВыгрузкаСвойств.НаименованиеНаСайте = ?(ПустоеЗначение(НаименованиеРекв)=0,НаименованиеРекв,ИдРеквизита);
	Иначе
		ТЗ_ВыгрузкаСвойств.ПолучитьСтрокуПоНомеру(стр);
	КонецЕсли;
	Если ИдРеквизита="ОсновноеСвойство" Тогда
		ТЗ_ВыгрузкаСвойств.НаименованиеНаСайте = ?(ПустоеЗначение(НаименованиеРекв)=0,НаименованиеРекв,ИдРеквизита);
	КонецЕсли;
	Если (ТЗ_ВыгрузкаСвойств.Выгружать<>1) и (ТЗ_ВыгрузкаСвойств.Выгружать<>2) Тогда
		ТЗ_ВыгрузкаСвойств.Выгружать = 1;
	КонецЕсли;
	Если (ТЗ_ВыгрузкаСвойств.ВыгружатьРеквизит<>1) и (ТЗ_ВыгрузкаСвойств.ВыгружатьРеквизит<>2) Тогда
		ТЗ_ВыгрузкаСвойств.ВыгружатьРеквизит = 1;
	КонецЕсли;
	
КонецПроцедуры


//======================================================================
Процедура ЗаполнитьСписокСвойствТоваров()
	//ТЗ_ВыгрузкаСвойств.НоваяКолонка("Выгружать","Число",1,,,10);
	//ТЗ_ВыгрузкаСвойств.НоваяКолонка("Реквизит");
	//ТЗ_ВыгрузкаСвойств.НоваяКолонка("НаименованиеНаСайте",,,,"Наименование на сайте");
	
	//ТЗ_ВыгрузкаСвойств.ВыводитьПиктограммы("Выгружать");
//	тмп ="";
	тмп = ВосстановитьЗначение("Обмен_ТИС_Битрикс_Свойства_Товаров");
	Если ПустоеЗначение(тмп)=0 Тогда
		Если ТипЗначенияСтр(тмп)="ТаблицаЗначений" Тогда
			тмп.ВыбратьСтроки();
			Пока тмп.ПолучитьСтроку() = 1 Цикл
				Попытка
					ТЗ_ВыгрузкаСвойств.НоваяСтрока();
					ТЗ_ВыгрузкаСвойств.Выгружать = Число(тмп.Выгружать);
					ТЗ_ВыгрузкаСвойств.Реквизит = тмп.Реквизит;
					ТЗ_ВыгрузкаСвойств.НаименованиеНаСайте = тмп.НаименованиеНаСайте;
					
				Исключение
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Для Н=1 По Метаданные.Справочник("Номенклатура").Реквизит() Цикл
		ИдРеквизита = Метаданные.Справочник("Номенклатура").Реквизит(Н).Идентификатор;
		НаименованиеРекв = Метаданные.Справочник("Номенклатура").Реквизит(Н).Синоним;
		
		Если ИдРеквизита="ОсновноеСвойство" Тогда
			НаименованиеРекв = Константа.ВидСвойстваНоменклатуры;
		КонецЕсли;
		
		//Сообщить(ИдРеквизита);
		//Сообщить(НаименованиеРекв);
		
		ЗаполнитьСписокСвойствТоваров_ДобавитьСвойство(ИдРеквизита, НаименованиеРекв);
		
		//стр = "";
		//Если ТЗ_ВыгрузкаСвойств.НайтиЗначение(ИдРеквизита, стр, "Реквизит")=0 Тогда
		//	ТЗ_ВыгрузкаСвойств.НоваяСтрока();
		//	ТЗ_ВыгрузкаСвойств.Выгружать = 1;
		//	ТЗ_ВыгрузкаСвойств.Реквизит = ИдРеквизита;
		//	ТЗ_ВыгрузкаСвойств.НаименованиеНаСайте = ?(ПустоеЗначение(НаименованиеРекв)=0,НаименованиеРекв,ИдРеквизита);
		//Иначе
		//	ТЗ_ВыгрузкаСвойств.ПолучитьСтрокуПоНомеру(стр);
		//КонецЕсли;
		//Если ИдРеквизита="ОсновноеСвойство" Тогда
		//	ТЗ_ВыгрузкаСвойств.НаименованиеНаСайте = ?(ПустоеЗначение(НаименованиеРекв)=0,НаименованиеРекв,ИдРеквизита);
		//КонецЕсли;
		//Если (ТЗ_ВыгрузкаСвойств.Выгружать<>1) и (ТЗ_ВыгрузкаСвойств.Выгружать<>2) Тогда
		//	ТЗ_ВыгрузкаСвойств.Выгружать = 1;
		//КонецЕсли;
		//Если (ТЗ_ВыгрузкаСвойств.ВыгружатьРеквизит<>1) и (ТЗ_ВыгрузкаСвойств.ВыгружатьРеквизит<>2) Тогда
		//	ТЗ_ВыгрузкаСвойств.ВыгружатьРеквизит = 1;
		//КонецЕсли;
	КонецЦикла;
	
	
	//ЗаполнитьСписокСвойствТоваров_ДобавитьСвойство("Вес", "Вес");
КонецПроцедуры // ЗаполнитьСписокСвойств

Процедура ЗаполнитьСписокРеквизитовТоваров()
	//ТЗ_ВыгрузкаСвойств.НоваяКолонка("Выгружать","Число",1,,,10);
	//ТЗ_ВыгрузкаСвойств.НоваяКолонка("Реквизит");
	//ТЗ_ВыгрузкаСвойств.НоваяКолонка("НаименованиеНаСайте",,,,"Наименование на сайте");
	
	//ТЗ_ВыгрузкаСвойств.ВыводитьПиктограммы("Выгружать");
	
	//тмп ="";
	тмп = ВосстановитьЗначение("Обмен_ТИС_Битрикс_Реквизиты_Товаров");
	Если ПустоеЗначение(тмп)=0 Тогда
		Если ТипЗначенияСтр(тмп)="ТаблицаЗначений" Тогда
			тмп.ВыбратьСтроки();
			Пока тмп.ПолучитьСтроку() = 1 Цикл
				Попытка
					ТЗ_ВыгрузкаРеквизитов.НоваяСтрока();
					ТЗ_ВыгрузкаРеквизитов.Выгружать = Число(тмп.Выгружать);
					ТЗ_ВыгрузкаРеквизитов.Реквизит = тмп.Реквизит;
					ТЗ_ВыгрузкаРеквизитов.НаименованиеТега = СтрЗаменить(тмп.НаименованиеТега, " ", "");
				Исключение
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Для Н=1 По Метаданные.Справочник("Номенклатура").Реквизит() Цикл
		ИдРеквизита = Метаданные.Справочник("Номенклатура").Реквизит(Н).Идентификатор;
		НаименованиеРекв = Метаданные.Справочник("Номенклатура").Реквизит(Н).Синоним;
		
		Если ИдРеквизита="ОсновноеСвойство" Тогда
			НаименованиеРекв = Константа.ВидСвойстваНоменклатуры;
		КонецЕсли;
		
		//Сообщить(ИдРеквизита);
		//Сообщить(НаименованиеРекв);
		
		стр = "";
		Если ТЗ_ВыгрузкаРеквизитов.НайтиЗначение(ИдРеквизита, стр, "Реквизит")=0 Тогда
			ТЗ_ВыгрузкаРеквизитов.НоваяСтрока();
			ТЗ_ВыгрузкаРеквизитов.Выгружать = 1;
			ТЗ_ВыгрузкаРеквизитов.Реквизит = ИдРеквизита;
			ТЗ_ВыгрузкаРеквизитов.НаименованиеТега = ИдРеквизита;//?(ПустоеЗначение(НаименованиеРекв)=0,НаименованиеРекв,ИдРеквизита);
		Иначе
			ТЗ_ВыгрузкаРеквизитов.ПолучитьСтрокуПоНомеру(стр);
		КонецЕсли;
		Если ИдРеквизита="ОсновноеСвойство" Тогда
			ТЗ_ВыгрузкаРеквизитов.НаименованиеТега = СтрЗаменить(?(ПустоеЗначение(НаименованиеРекв)=0,НаименованиеРекв,ИдРеквизита), " ","");
		КонецЕсли;
		Если (ТЗ_ВыгрузкаРеквизитов.Выгружать<>1) и (ТЗ_ВыгрузкаРеквизитов.Выгружать<>2) Тогда
			ТЗ_ВыгрузкаРеквизитов.Выгружать = 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ЗаполнитьСписокСвойств


//======================================================================
Процедура ПриЗакрытии()
	СохранитьЗначение("Обмен_ТИС_Битрикс_Свойства_Товаров", ТЗ_ВыгрузкаСвойств);
	СохранитьЗначение("Обмен_ТИС_Битрикс_Реквизиты_Товаров", ТЗ_ВыгрузкаРеквизитов);
КонецПроцедуры // ПриЗакрытии


//******************************************************************************
Процедура ПриОткрытии()    
	
	//%%% + 150609
	//                  тип          вид           переменная  название
	ДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Товары", "Номенклатура",  "По номенклатуре");
	ДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ТипыЦен", "ТипЦен",  "Типы цен");
	ДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Склады", "Склад",  "Остатки по складам");
	ТаблицаМФ.ВидимостьКолонки("Тип",0);
	ТаблицаМФ.ВидимостьКолонки("Вид",0);
	ТаблицаМФ.ВидимостьКолонки("СписокЭлементов",0);          
	ТаблицаМФ.ВидимостьКолонки("ТипМФ",0);
	ТаблицаМФ.ВидимостьКолонки("ИмяПеременной",0);
	
	ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
	//%%% -
	Если спТипОбмена.ТекущаяСтрока()=0 Тогда
		спТипОбмена.ТекущаяСтрока(1);
	КонецЕсли;
	
	Если СпособИдентификацииКонтрагентов.ТекущаяСтрока()=0 Тогда
		СпособИдентификацииКонтрагентов.ТекущаяСтрока(1);
	КонецЕсли;
	
	Если спУстановкаДатыЗаказов.ТекущаяСтрока()=0 Тогда
		спУстановкаДатыЗаказов.ТекущаяСтрока(1);
	КонецЕсли;
	
	Если спПроведениеЗаказов.ТекущаяСтрока()=0 Тогда
		спПроведениеЗаказов.ТекущаяСтрока(1);
	КонецЕсли;
	
	//выгрузка дополнительных реквизитов как свойств товара
	//название резвизита : наименование
	ЗаполнитьСписокСвойствТоваров();
	//стрСвойства = "СтранаПроисхождения:Страна происхождения,Цвет:НомерПоКаталогу,Размер:Производитель,Типоразмер:МодельныйРяд";
	//СписокСвойствНоменклатуры = Разложить(стрСвойства,",");
	ЗаполнитьСписокРеквизитовТоваров();
	
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("СлойОбщий,Основной", "Основные");
	Форма.Закладки.ДобавитьЗначение("СлойОбщий,СлойВыгрузкаТоваров", "Выгрузка товаров");
	Форма.Закладки.ДобавитьЗначение("СлойОбщий,СлойОбменЗаказами", "Обмен заказами");
	Форма.Закладки.ДобавитьЗначение("СлойОбщий,ВыгрузкаСвойствТоваров", "Выгрузка свойств товаров");
	Форма.Закладки.ДобавитьЗначение("СлойОбщий,ВыгрузкаРеквизитовТоваров", "Реквизиты товаров");
	ПриВыбореЗакладки(1);
	
	ПриИзмененииФлИспользоватьПрокси();
	
	Если ПустоеЗначение(Форма.Параметр)=0 Тогда
		Расшифровка=Форма.Параметр;
		ПолнаяВыгрузка	=Расшифровка.Получить("ПолнаяВыгрузка");
		ОбменТоварамиWEB=Расшифровка.Получить("ТолькоWEB");
		ОбменДанными	=Расшифровка.Получить("ВыгрузкаТоваров");
		ОбменЗаказами	=Расшифровка.Получить("ОбменЗаказами");
		
		ВыгрузитьДанные();
		СтатусВозврата(0);
	КонецЕсли;
	

КонецПроцедуры


//======================================================================
Процедура ПроверитьОбновление()
	ТекВер = ОбработкаОбменССайтом.ТекущаяВерсия();
	Стр = "Ваша версия: " + ВерсияОбработки
	+ РазделительСтрок + "Актуальная версия: " + ТекВер
	+ РазделительСтрок + "Перейти на сайт?";
	
	Если Вопрос(Стр, "Да+Нет")="Да" Тогда
		ЗапуститьПриложение("www.applix.ru");
	КонецЕсли;
КонецПроцедуры // ПроверитьОбновление


//******************************************************************************
//******************************************************************************
// РАБОТА С XML
//Ограничения на входящие файлы XML:                         
//1) В первой строке обязателен заголовок XML вида <?xml version="1.0" encoding="windows-1251"?>    .
//2) Каждый тег должен быть записан в отдельной строке. Возможны отступы от начала строки и пустые строки.
//3) Значения атрибутов - строго в двойных кавычках.
//4) Не поддерживаются текстовые значения (любые значения можно передавать только через атрибуты).    
//5) Комментарии и "подобные им" элементы XML не поддерживаются.


Функция ПолучитьСтрокуЗаписиДляXML(Значение, Булево=0)
	
	СтрокаЗаписи = Строка(Значение);
		
	Если Булево<>0 Тогда
		//ТипЗнч(Значение) = Тип("Булево") Тогда
		
		Если Значение<>0 Тогда
			СтрокаЗаписи = "true";
		Иначе
			СтрокаЗаписи = "false";
		КонецЕсли;
		
	ИначеЕсли ТипЗначенияСтр(Значение) = "Число" Тогда
		
		//СтрокаЗаписи = СтрЗаменить(СтрокаЗаписи, Символы.НПП, "");
		СтрокаЗаписи = СтрЗаменить(СтрокаЗаписи, " ", "");
		СтрокаЗаписи = СтрЗаменить(СтрокаЗаписи, ",", ".");
		
	КонецЕсли;
	
	Возврат СокрЛП(СтрокаЗаписи);
КонецФункции


//=======================================================================================
Функция ЕстьФильтр(ИмяФильтра, СЗ_Фильтр, ТипФильтра)
	//%%% + 150609
	//ТаблицаФильтра = КэшСеанса.Получить("ПотребностиФильтр");
	//Если ПустоеЗначение(ТаблицаФильтра)=0 Тогда
	//	
	//	//ТаблицаФильтра = СоздатьОбъект("ТаблицаЗначений");
	
	стр = "";
	Если ТаблицаМФ.НайтиЗначение(ИмяФильтра, стр, "ИмяПеременной")=1 Тогда
		ТаблицаМФ.ПолучитьСтрокуПоНомеру(стр);
		Если ТаблицаМФ.ФлВкл=2 Тогда
			СЗ_тмп = ТаблицаМФ.СписокЭлементов;
			ТипФильтра = ТаблицаМФ.ТипМФ;
			СЗ_Фильтр = СоздатьОбъект("СписокЗначений");
			
			Для Н=1 По СЗ_тмп.РазмерСписка() Цикл
				Зн = СЗ_тмп.ПолучитьЗначение(Н);
				Если Зн.ЭтоГруппа()=1 Тогда
					спр = СоздатьОбъект("Справочник."+ТаблицаМФ.Вид);
					спр.ИспользоватьРодителя(Зн);
					спр.ВыбратьЭлементы();
					Пока спр.ПолучитьЭлемент() = 1 Цикл
						СЗ_Фильтр.ДобавитьЗначение(спр.ТекущийЭлемент());
					КонецЦикла;
				Иначе
					СЗ_Фильтр.ДобавитьЗначение(Зн);
				КонецЕсли;
			КонецЦикла;
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	//КонецЕсли;
	
	Возврат 0;
КонецФункции


//=======================================================================================
Функция ПолучитьТоварыДляВыгрузки()
	Перем Запрос, ТекстЗапроса, Таб;
	//Создание объекта типа Запрос
	ДТ = ПолучитьДатуТА();
	глУдалениеВременнойТаблицыSQL("#ОстаткиТоваров");
	ДопУсловие="";
	ДопУсловие2="";
	ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");
	
	_Начало_=_GetPerformanceCounter();
	
	//%%% УСЛОВИЯ НОМЕНКЛАТУРА
	СЗ_Фильтр = СоздатьОбъект("СписокЗначений");
	СЗ_ФильтрНоменклатура = СоздатьОбъект("СписокЗначений");
	ТипФильтра = "";
	Если ЕстьФильтр("Номенклатура", СЗ_Фильтр, ТипФильтра)=1 Тогда
		//одно из...
		Если ТипФильтра=1 Тогда //включающий фильтр
			СЗ_ФильтрНоменклатура = СЗ_Фильтр;
		ИначеЕсли ТипФильтра=2 Тогда //исключающий фильтр
			спрНомен = СоздатьОбъект("Справочник.Номенклатура");
			спрНомен.ВыбратьЭлементы();
			Пока спрНомен.ПолучитьЭлемент() = 1 Цикл
				Если (спрНомен.ЭтоГруппа()=1) ИЛИ (спрНомен.ПометкаУдаления()=1) Тогда
					Продолжить;
				КонецЕсли;
				Если СЗ_Фильтр.НайтиЗначение(спрНомен.ТекущийЭлемент())=0 Тогда
					СЗ_ФильтрНоменклатура.ДобавитьЗначение(спрНомен.ТекущийЭлемент());
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		глДобавитьФильтр(ЗапросСКЛ,ДопУсловие,"","","Товар",СЗ_ФильтрНоменклатура,"Товары","ФильтрТоваров");
		
		ДопУсловие2="INNER JOIN #ФильтрТоваров ON #ФильтрТоваров.Val = Товары.ID";
		
	КонецЕсли;
	
	ДатаПо = РабочаяДата();
	ТекстЗапросОстатки="SELECT Остатки.Товар
	|							, :ОснСклад Склад
//	|							, Остатки.Склад
		
	|						    ,SUM(Остатки.Ост) Ост
	|					INTO #ОстаткиТоваров
	|					FROM (
	|							SELECT Товар, 
	|								   ПартииТоваровОстатки.ОстатокТовараОстаток Ост,
	|								   ПартииТоваровОстатки.ОстатокТовараОстаток ДостОст
	|						  		FROM $РегистрОстатки.ПартииТоваров("+?(ДатаПо=ПолучитьДатуТА(),"",":ДатаПо")+",
	|															   INNER JOIN $Справочник.Номенклатура AS СпрН (NOLOCK) ON СпрН.ID = Товар
	|															   INNER JOIN $Справочник.МестаХранения СпрМХ (NOLOCK) ON СпрМХ.ID=Склад AND $СпрМХ.УпрАналитика=:ВыбАналитикаОпт AND $СпрМХ.НеВключатьВПланирование = 0
	|															 ,(Фирма=:ВыбФирма) AND (Статус <> :Отданный),(Товар),) ПартииТоваровОстатки
	|						  		UNION ALL 
	|						  		SELECT Товар, 
	|										 0 Ост,
	|										 -1*РезервыТоваровОстатки.РезервТовараОстаток ДостОст
	|						  		FROM 	$РегистрОстатки.РезервыТоваров("+?(ДатаПо=ПолучитьДатуТА(),"",":ДатаПо")+",
	|																		INNER JOIN $Справочник.Номенклатура AS СпрН (NOLOCK) ON СпрН.ID = Товар
	|						  												INNER JOIN $Документ.Счет ДокС (NOLOCK) ON ДокС.IDDOC=ПоСчету
	|						  												INNER JOIN $Справочник.МестаХранения СпрМХ (NOLOCK) ON СпрМХ.ID=$ДокС.Склад AND $СпрМХ.УпрАналитика=:ВыбАналитикаОпт AND $СпрМХ.НеВключатьВПланирование = 0
	|																		,,(Товар),) РезервыТоваровОстатки	
	|						 ) Остатки
	|					GROUP BY Остатки.Товар
	|					HAVING SUM(Остатки.Ост)>0
	|";
	
	пУпрАналитикаОпт = Константа.ОсновнойСклад.УпрАналитика;

	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбФирма",глФирма);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбАналитикаОпт",пУпрАналитикаОпт);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("Отданный",Отданный);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ДатаПо",ДатаПо);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ОснСклад",Константа.ОсновнойСклад);
	ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапросОстатки);
	
	_Конец=_GetPerformanceCounter();
	Сообщить("Получаем остатки товаров за "+(_Конец-_Начало_)+" мс");
	
	Если ПолнаяВыгрузка=0 Тогда
		//только изменения
		глУдалениеВременнойТаблицыSQL("#ИзмененияТоваров");

		ТекстЗапроса="UPDATE Спр
		|			  SET Flag = 1
		|			  FROM ТоварыИзменения Спр
		|			  INNER JOIN (SELECT TOP 20000 ID FROM ТоварыИзменения) #ИзмененияТоваров ON #ИзмененияТоваров.ID = Спр.ID
		|			  WHERE Flag=0";
		ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);

		ТекстЗапроса="SELECT ID 
		|			  INTO #ИзмененияТоваров
		|			  FROM ТоварыИзменения 
		|			  WHERE Flag=1";
		ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
		
		
	КонецЕсли;
	
	
	ТекстЗапроса="SELECT  Товары.ID [Номенклатура $Справочник.Номенклатура]
	|					, Товары.Code Код
	|					, RTRIM($Товары.НаименованиеРусс) НаименованиеRU
	|					, dbo.Conv1C2UTF(RTRIM($Товары.НаименованиеEE)) НаименованиеEE
	|					, dbo.Conv1C2UTF(RTRIM($Товары.НаименованиеLT)) НаименованиеLT
	|					, RTRIM($Товары.НаименованиеАнгл) НаименованиеEN
//	|					, dbo.Conv1C2UTF(RTRIM(Товары.DESCR)) Наименование
	|					, RTRIM(Товары.DESCR) Наименование
	|					, ОстаткиТоваров.Ост Остаток
	|					, $ПоследнееЗначение.Цены.Цена(СпрЦеныОпт.ID,GETDATE())*$ПоследнееЗначение.Валюты.Курс($СпрЦеныОпт.Валюта,GETDATE()) ЦенаОптБаз
	|			  FROM $Справочник.Номенклатура AS Товары (NOLOCK)
	|			  INNER JOIN $Справочник.Цены СпрЦеныОпт ON СпрЦеныОпт.PARENTEXT = Товары.ID AND $СпрЦеныОпт.КатегорияЦены = :КатегорияЦенОптовая AND СпрЦеныОпт.ISMARK = 0
	|			  "+ДопУсловие2 +"
	|		      "+?(ПолнаяВыгрузка=0,"INNER JOIN #ИзмененияТоваров ON #ИзмененияТоваров.ID = Товары.ID ","")+"
	|		 	  "+?(флТолькоОстатки=1,"INNER","LEFT")+" JOIN (SELECT Товар, SUM(Ост) Ост 
	|						 FROM  #ОстаткиТоваров 
	|						 GROUP BY Товар) ОстаткиТоваров ON Товары.ID = ОстаткиТоваров.Товар 
	|			  WHERE Товары.ISMARK = 0 AND  (Товары.DESCR > '0' OR $Товары.НаименованиеEE>'0' OR $Товары.НаименованиеLT>'0') "+?(ОбменТоварамиWEB=1,"AND $Товары.MAG = 1 ","")+"
	|					AND $ПоследнееЗначение.Цены.Цена(СпрЦеныОпт.ID,GETDATE())*$ПоследнееЗначение.Валюты.Курс($СпрЦеныОпт.Валюта,GETDATE()) > 0
	|					AND $Товары.ПризнакСпецКода NOT IN (:СпецКод1,:СпецКод2,:СпецКод3,:СпецКод4,:СпецКод5,:СпецКод6,:СпецКод7,:СпецКод8)
	|";

	ТекстЗапросОстатки="SELECT Товар [Номенклатура $Справочник.Номенклатура]
	|						   , Склад [Склад $Справочник.МестаХранения]
	|						   ,Ост Остаток
	|					FROM #ОстаткиТоваров
	|";


	иТоварыДляВыгрузки=СоздатьОбъект("ИндексированнаяТаблица");
	
	
	ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапросОстатки,иТоварыДляВыгрузки);
	иТоварыДляВыгрузки.ДобавитьИндекс("иТовар","*Номенклатура");

	иТоварыДляВыгрузки.Выгрузить(тСкладыДляВыгрузки,,"Склад,Остаток");
	тСкладыДляВыгрузки.Свернуть("Склад","Остаток");
	
	_Начало_=_GetPerformanceCounter();
	ТЗ_Товары = СоздатьОбъект("ТаблицаЗначений");
	
	ЗапросСКЛ.УстановитьТекстовыйПараметр("КатегорияЦенОптовая",Константа.ОсновнаяКатегорияЦены);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("СпецКод1",Перечисление.СпецкодыТоваров.G);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("СпецКод2",Перечисление.СпецкодыТоваров.GS);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("СпецКод3",Перечисление.СпецкодыТоваров.GI);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("СпецКод4",Перечисление.СпецкодыТоваров.I);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("СпецКод5",Перечисление.СпецкодыТоваров.F);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("СпецКод6",Перечисление.СпецкодыТоваров.GF);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("СпецКод7",Перечисление.СпецкодыТоваров.GN);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("СпецКод8",Перечисление.СпецкодыТоваров.K);
	
	//ЗапросСКЛ.Отладка(1);
	ТЗ_Товары=ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса);
	_Конец=_GetPerformanceCounter();
	Сообщить("Получаем таблицу товаров за "+(_Конец-_Начало_)+" мс");
	Сообщить("Отобрано "+(ТЗ_Товары.КоличествоСтрок())+" строк товаров");
	
	Возврат ТЗ_Товары;
КонецФункции

Процедура ОчисткаТаблицыВыгруженныхТоваров()
	
	//только изменения
	глУдалениеВременнойТаблицыSQL("#ИзмененияТоваров");
	ТекстЗапроса="DELETE FROM ТоварыИзменения WHERE Flag=1";
	ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	
КонецПроцедуры


Функция ПолучитьСписокГрупп(ТЗ_Товары)
	//заполним список групп
	ТЗ_Группы = СоздатьОбъект("ТаблицаЗначений");
	ТЗ_Группы.НоваяКолонка("Номенклатура", "Справочник.Номенклатура");
	ТЗ_Группы.НоваяКолонка("Уровень", "Число");
	
	Для Н=1 По ТЗ_Товары.РазмерСписка() Цикл
		Род = ТЗ_Товары.ПолучитьЗначение(Н).Родитель;
	//КонецЦикла;
	//ТЗ_Товары.ВыбратьСтроки();
	//Пока ТЗ_Товары.ПолучитьСтроку() = 1 Цикл
	//	Род = ТЗ_Товары.Номенклатура.Родитель;
		Пока ПустоеЗначение(Род)=0 Цикл
			Если Род.MAG = 0  Тогда
				Род = Род.Родитель;
				Продолжить;
			КонецЕсли;
			ТЗ_Группы.НоваяСтрока();
			ТЗ_Группы.Номенклатура = Род;
			ТЗ_Группы.Уровень = Род.Уровень();
			Род = Род.Родитель;
		КонецЦикла;
	КонецЦикла;
	
	ТЗ_Группы.Свернуть("Номенклатура,Уровень", "");
	ТЗ_Группы.Сортировать("Уровень+");
	
	Возврат ТЗ_Группы;
КонецФункции

//=======================================================================================
Функция ОпределитьМожноВыгрузитьТовары()
	//%%%
	Если КаталогНоменклатуры.Выбран()=0 Тогда
		Сообщить("Не выбран каталог товаров!!!");
		Возврат 0;
	ИначеЕсли ПустоеЗначение(КаталогНоменклатуры.Идентификатор)=1 Тогда
		Сообщить("Для указанного каталога товаров не указан Идентификатор для XML-обмена");
		Возврат 0;
	ИначеЕсли ПустоеЗначение(КаталогНоменклатуры.ВладелецКаталога)=1 Тогда
		Сообщить("Для указанного каталога товаров не указан Владелец");
		Возврат 0;
	ИначеЕсли ПустоеЗначение(КаталогНоменклатуры.ВладелецКаталога.Идентификатор)=1 Тогда
		Сообщить("Для указанного каталога товаров не указан идентификатор Владельца");
		Возврат 0;
	КонецЕсли;
	
	ЕстьКаталогВыгрузки   = ?(ПустоеЗначение(КаталогВыгрузки)=1,0,1);
	ЕстьСайт			  = ?(ПустоеЗначение(АдресСкриптаСайта)=1,0,1);//HTTPОбменСервер
	
	Если ВыгружатьНаСайт=1 Тогда
		//Если спТипОбмена.ПолучитьЗначение(спТипОбмена.ТекущаяСтрока())="сайт" Тогда
		Если ЕстьСайт=0 Тогда
			Сообщить("Не указан адрес сайта!");
		КонецЕсли;
		Возврат ЕстьСайт;
	Иначе
		Если ЕстьКаталогВыгрузки=0 Тогда
			Сообщить("Не указана папка для выгрузки!");
		КонецЕсли;
		Возврат ЕстьКаталогВыгрузки;
	КонецЕсли;
	
КонецФункции


Функция ПолучитьОбъектДляЗаписиXML(ИмяФайла, ДатаФормирования)
	//Создаем объект  MSXML2.DOMDocument для формирования XML
	XML_DOM=CreateObject("MSXML2.DOMDocument.4.0"); 
	
	//прописываем заголовок с необходимыми параметрами, например
	
	//Header = XML_DOM.createProcessingInstruction("xml", "version=""1.0"" encoding=""windows-1251""" );  
	Header = XML_DOM.createProcessingInstruction("xml", "version=""1.0"" encoding=""UTF-8""" );  
	
	//Относим его к верхнему уровню структуры
	XML_DOM.appendChild(Header);  
	
	Возврат XML_DOM;
	
КонецФункции


//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция СоздатьУзел(DOMDocument, name)
	
	newNode = DOMDocument.createNode(1, name, "");
	
	Возврат newNode;

КонецФункции // СоздатьУзел()


//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура XML_УстановитьАтрибут(element, name, value, Булево=0)
    
	element.setAttribute(name, ПолучитьСтрокуЗаписиДляXML(value, Булево));
	
КонецПроцедуры // УстановитьАтрибут()


Функция СоздатьЭлемент(ОбъектCML, Имя, Текстовый=0)
	//Сообщить("== "+Имя);
	Если Текстовый=0 Тогда
		Узел = ОбъектCML.createElement(Имя);
	Иначе
		Узел = ОбъектCML.createTextNode(Имя);
	КонецЕсли;
	Возврат Узел;
КонецФункции


Функция СоздатьПодчиненныйЭлемент(ОбъектCML, УзелВладелец, Имя, Текстовый=0)
	//Сообщить("== "+Имя);
	Если Текстовый=0 Тогда
		Узел = УзелВладелец.appendChild(ОбъектCML.createElement(Имя));
	Иначе
		Узел = УзелВладелец.appendChild(ОбъектCML.createTextNode(Имя));
	КонецЕсли;
	Возврат Узел;
КонецФункции


Функция ДобавитьУзел(УзелВладелец, Узел)
	УзелВладелец.appendChild(Узел);
КонецФункции


Функция XML_ЗаписатьЭлемент(DOMDocument, node, name, value = "", НеЗаписыватьПустуюСтроку = 1)
	
	//%%%
	Если (ПустоеЗначение(value)=1) И (НеЗаписыватьПустуюСтроку=1) Тогда
		Возврат "";
	КонецЕсли;
	
	childNode = DOMDocument.createNode(1, name, "");
	Попытка
		childNode.text = Строка(value);
	Исключение
		Сообщить(ОписаниеОшибки());
		Сообщить(Шаблон("node: [node] name:[name] value:[value]"));
		ВызватьИсключение;
	КонецПопытки;
	Узел = node.appendChild(childNode);
	
	Возврат Узел;
	//Если ПустоеЗначение(Комментарий) Тогда
	//КонецЕсли;
    //
КонецФункции // одЗаписатьЭлемент() 


Функция ФорматНаименованияДляCML(Наименование)
	Возврат Лев(Наименование, 250);
КонецФункции	


Функция ФорматВалютыДляCML(ВалютаСсылка)
	
	ТекстВалюты = "???";
	
	Попытка
		Если ВалютаСсылка.Вид() = "Валюты" Тогда
			ТекстВалюты = ВалютаСсылка.Сокр_назв;
		КонецЕсли;	
	Исключение
	КонецПопытки;
		
	Возврат Лев(ТекстВалюты, 3);
	
КонецФункции	


Процедура ВыгрузитьГруппыРекурсивно(ОбъектCML, Тег, Группа, ДеревоГрупп)
	Если ПустоеЗначение(Группа)=1 Тогда
		Возврат;
	КонецЕсли;
	
	//Сообщить(Шаблон("Выгружаем группу: Идент[Группа.Идентификатор] Наим:[Группа.Код] [Группа.Наименование]"));
	
	ТегГруппа  = СоздатьПодчиненныйЭлемент(ОбъектCML, Тег, "Группа");   
	XML_ЗаписатьЭлемент(ОбъектCML, ТегГруппа, "Ид", СокрЛП(Группа.Идентификатор));
	XML_ЗаписатьЭлемент(ОбъектCML, ТегГруппа, "Наименование",  СокрЛП(ЗаменитьСпецСимволыВСтроке(ПолучитьЗначениеРеквизитаСправочника(Группа,"Наименование"))));
	XML_ЗаписатьЭлемент(ОбъектCML, ТегГруппа, "БитриксСортировка",  СокрЛП(Группа.Код));
	//Тег.appendChild(ТегГруппа);
	
	ТекстЗапроса = "SELECT ДТ.ID [Ссылка $Справочник.Номенклатура]
	|				FROM Дерево_Номенклатура ДТ(NOLOCK)
	|			 	INNER JOIN $Справочник.Номенклатура Товары (NOLOCK) ON Товары.ID = ДТ.ID AND Товары.ISFOLDER = 1
	|				WHERE ДТ.PARENTID=:Группа
	|";
	ЗапросСКЛ.УстановитьТекстовыйПараметр("Группа",Группа.ТекущийЭлемент());
	тГруппыПодчиненные = ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса);
	
	//выберем подгруппы группы
	
	
	ВыгруженоПодчиненных = 0;
	тГруппыПодчиненные.ВыбратьСтроки();
	Пока тГруппыПодчиненные.ПолучитьСтроку() = 1 Цикл
		Если ДеревоГрупп.НайтиЗначение(тГруппыПодчиненные.Ссылка,"","")=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыгруженоПодчиненных=0 Тогда
			ТегГруппЫ  = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегГруппа, "Группы");
		КонецЕсли;
		ВыгруженоПодчиненных = ВыгруженоПодчиненных + 1;
		
		
		ВыгрузитьГруппыРекурсивно(ОбъектCML, ТегГруппЫ, тГруппыПодчиненные.Ссылка, ДеревоГрупп);
		
	КонецЦикла;

	
	//спрНомен = СоздатьОбъект("Справочник.Товары");
	////Сообщить(Группа);
	//спрНомен.ИспользоватьРодителя(Группа);
	//спрНомен.ВключатьПодчиненные(0);
	//спрНомен.ВыбратьЭлементы();
	//Пока спрНомен.ПолучитьЭлемент() = 1 Цикл
	//	Если спрНомен.ЭтоГруппа()=0 Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	Если ДеревоГрупп.НайтиЗначение(спрНомен.ТекущийЭлемент(),"","")=0 Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	Если ВыгруженоПодчиненных=0 Тогда
	//		ТегГруппЫ  = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегГруппа, "Группы");
	//	КонецЕсли;
	//	ВыгруженоПодчиненных = ВыгруженоПодчиненных + 1;
	//	
	//	ВыгрузитьГруппыРекурсивно(ОбъектCML, ТегГруппЫ, спрНомен.ТекущийЭлемент(), ДеревоГрупп);
	//	
	//КонецЦикла;
КонецПроцедуры


Процедура ВыгрузитьГруппы(ОбъектCML, Тег, МассивНоменклатуры);
	
	ТегГруппа  = СоздатьПодчиненныйЭлемент(ОбъектCML, Тег, "Группы");   
	//Тег.appendChild(ТегГруппа);

	ДеревоГрупп = ПолучитьСписокГрупп(МассивНоменклатуры);
	//ДеревоГрупп.ВыбратьСтроку();
	ТекУровень = 0;
	Для Н=1 По ДеревоГрупп.КоличествоСтрок() Цикл
		ДеревоГрупп.ПолучитьСтрокуПоНомеру(Н);
		Если Н=1 Тогда
			ТекУровень = ДеревоГрупп.Уровень;
		КонецЕсли;
		
		Если ТекУровень<>ДеревоГрупп.Уровень Тогда
			Прервать;
		КонецЕсли;
		
		ВыгрузитьГруппыРекурсивно(ОбъектCML, ТегГруппа, ДеревоГрупп.Номенклатура, ДеревоГрупп);
	КонецЦикла;
	
КонецПроцедуры


Процедура ВыгрузитьВладельца(ОбъектCML, Тег, ОрганизацияВладелец)
	// классификатор - владелец
	ТегВладелец = СоздатьПодчиненныйЭлемент(ОбъектCML, Тег, "Владелец"); 
	XML_ЗаписатьЭлемент(ОбъектCML, ТегВладелец, "Ид", СокрЛП(ОрганизацияВладелец.Идентификатор));
	XML_ЗаписатьЭлемент(ОбъектCML, ТегВладелец, "Наименование", СокрЛП(ОрганизацияВладелец.Наименование));
	XML_ЗаписатьЭлемент(ОбъектCML, ТегВладелец, "ОфициальноеНаименование", СокрЛП(ОрганизацияВладелец.Наименование));
	
	// классификатор - владелец - ЮридическийАдрес
	ТегЮридическийАдрес = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегВладелец, "ЮридическийАдрес"); 
	ЮрАдрес = ОрганизацияВладелец.ЮридическийАдрес.Получить(РабочаяДата());
	XML_ЗаписатьЭлемент(ОбъектCML, ТегЮридическийАдрес, "Представление", СокрЛП(ПредставлениеАдреса(ЮрАдрес)));
	
	// классификатор - владелец - ЮридическийАдрес - АдресноеПоле
	СоставАдреса = РазложитьАдресНаСоставляющие(ЮрАдрес);
	Для Н=1 По СоставАдреса.РазмерСписка() Цикл
		Тип = "";
		Значение = СоставАдреса.ПолучитьЗначение(Н,Тип);
		Если ПустоеЗначение(Значение)=1 Тогда
			Продолжить;
		КонецЕсли;
		ТегАдресноеПоле = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегЮридическийАдрес, "АдресноеПоле"); 
		XML_ЗаписатьЭлемент(ОбъектCML, ТегАдресноеПоле, "Тип", Тип);
		XML_ЗаписатьЭлемент(ОбъектCML, ТегАдресноеПоле, "Значение", Значение);
	КонецЦикла;
	
	// классификатор - владелец - ИНН
	XML_ЗаписатьЭлемент(ОбъектCML, ТегВладелец, "ИНН", СокрЛП(ОрганизацияВладелец.Рег_номер));
	
	// классификатор - владелец - РасчетныеСчета
	ТегРасчетныеСчета = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегВладелец, "РасчетныеСчета"); 
	
	ОснСчет = ОрганизацияВладелец.Р_Счет1;
	ТегРС = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегРасчетныеСчета, "РасчетныйСчет"); 
	XML_ЗаписатьЭлемент(ОбъектCML, ТегРС, "НомерСчета", СокрЛП(ОснСчет));
	// классификатор - владелец - РасчетныеСчета - РасчетныйСчет - Банк
	ТегБанк = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегРС, "Банк"); 
	XML_ЗаписатьЭлемент(ОбъектCML, ТегБанк, "СчетКорреспондентский", "");
	XML_ЗаписатьЭлемент(ОбъектCML, ТегБанк, "Наименование", СокрЛП(ОрганизацияВладелец.Банк.Наименование));
	XML_ЗаписатьЭлемент(ОбъектCML, ТегБанк, "БИК", СокрЛП(ОрганизацияВладелец.Банк.Код_Банка));
	
	// классификатор - владелец - ЮридическийАдрес
	ТегАдрес = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегБанк, "Адрес"); 
	XML_ЗаписатьЭлемент(ОбъектCML, ТегАдрес, "Представление", СокрЛП(ПредставлениеАдреса(ОрганизацияВладелец.Банк.Адрес)));
	
	// классификатор - владелец - РасчетныеСчета - РасчетныйСчет
	//спрРС = СоздатьОбъект("Справочник.Счета");
	//спрРС.ИспользоватьВладельца(ОрганизацияВладелец);
	//спрРС.ВыбратьЭлементы();
	////спрРС.ВыбратьЭлементыПоРеквизиту("ЮрФизЛицо", ОрганизацияВладелец.ЮрЛицо,1,0);
	//Пока спрРС.ПолучитьЭлемент() = 1 Цикл
	//	ТегРС = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегРасчетныеСчета, "РасчетныйСчет"); 
	//	XML_ЗаписатьЭлемент(ОбъектCML, ТегРС, "НомерСчета", спрРС.Наименование);
	//	
	//	// классификатор - владелец - РасчетныеСчета - РасчетныйСчет - Банк
	//	ТегБанк = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегРС, "Банк"); 
	//	XML_ЗаписатьЭлемент(ОбъектCML, ТегБанк, "СчетКорреспондентский", "");
	//	XML_ЗаписатьЭлемент(ОбъектCML, ТегБанк, "Наименование", спрРС.Банк.Наименование);
	//	XML_ЗаписатьЭлемент(ОбъектCML, ТегБанк, "БИК", спрРС.Банк.Код1);
	//	
	//	// классификатор - владелец - ЮридическийАдрес
	//	ТегАдрес = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегБанк, "Адрес"); 
	//	XML_ЗаписатьЭлемент(ОбъектCML, ТегАдрес, "Представление", ПредставлениеАдреса(спрРС.Банк.Адрес));
	//КонецЦикла;
КонецПроцедуры


Функция Транслит(Имя, МенятьПробелНаПодчеркивание=0) 
	Рез = СокрЛП(Имя);   
	Если МенятьПробелНаПодчеркивание=1 Тогда 
		Рез = СтрЗаменить(Рез, " ", "_");
	КонецЕсли;
	Рез = СтрЗаменить(Рез,"а","a"); 
	Рез = СтрЗаменить(Рез,"б","b"); 
	Рез = СтрЗаменить(Рез,"в","v"); 
	Рез = СтрЗаменить(Рез,"г","g"); 
	Рез = СтрЗаменить(Рез,"д","d"); 
	Рез = СтрЗаменить(Рез,"е","e"); 
	Рез = СтрЗаменить(Рез,"ё","e"); 
	Рез = СтрЗаменить(Рез,"ж","zh"); 
	Рез = СтрЗаменить(Рез,"з","z"); 
	Рез = СтрЗаменить(Рез,"и","i"); 
	Рез = СтрЗаменить(Рез,"к","k"); 
	Рез = СтрЗаменить(Рез,"л","l"); 
	Рез = СтрЗаменить(Рез,"м","m"); 
	Рез = СтрЗаменить(Рез,"н","n"); 
	Рез = СтрЗаменить(Рез,"о","o"); 
	Рез = СтрЗаменить(Рез,"п","p"); 
	Рез = СтрЗаменить(Рез,"р","r"); 
	Рез = СтрЗаменить(Рез,"с","s"); 
	Рез = СтрЗаменить(Рез,"т","t"); 
	Рез = СтрЗаменить(Рез,"у","u"); 
	Рез = СтрЗаменить(Рез,"ф","f"); 
	Рез = СтрЗаменить(Рез,"х","h"); 
	Рез = СтрЗаменить(Рез,"ч","ch"); 
	Рез = СтрЗаменить(Рез,"ш","sh"); 
	Рез = СтрЗаменить(Рез,"щ","sch"); 
	Рез = СтрЗаменить(Рез,"ъ",""); 
	Рез = СтрЗаменить(Рез,"ь",""); 
	Рез = СтрЗаменить(Рез,"э","e"); 
	Рез = СтрЗаменить(Рез,"ю","yu"); 
	Рез = СтрЗаменить(Рез,"й","i"); 
	Рез = СтрЗаменить(Рез,"ц","c"); 
	Рез = СтрЗаменить(Рез,"я","ya"); 
	Рез = СтрЗаменить(Рез,"ы","i"); 
	Рез = СтрЗаменить(Рез,"А","A"); 
	Рез = СтрЗаменить(Рез,"Б","B"); 
	Рез = СтрЗаменить(Рез,"В","V"); 
	Рез = СтрЗаменить(Рез,"Г","G"); 
	Рез = СтрЗаменить(Рез,"Д","D"); 
	Рез = СтрЗаменить(Рез,"Е","E"); 
	Рез = СтрЗаменить(Рез,"Ё","E"); 
	Рез = СтрЗаменить(Рез,"Ж","ZH"); 
	Рез = СтрЗаменить(Рез,"З","Z"); 
	Рез = СтрЗаменить(Рез,"И","I"); 
	Рез = СтрЗаменить(Рез,"К","K"); 
	Рез = СтрЗаменить(Рез,"Л","L"); 
	Рез = СтрЗаменить(Рез,"М","M"); 
	Рез = СтрЗаменить(Рез,"Н","N"); 
	Рез = СтрЗаменить(Рез,"О","O"); 
	Рез = СтрЗаменить(Рез,"П","P"); 
	Рез = СтрЗаменить(Рез,"Р","R"); 
	Рез = СтрЗаменить(Рез,"С","S"); 
	Рез = СтрЗаменить(Рез,"Т","T"); 
	Рез = СтрЗаменить(Рез,"У","U"); 
	Рез = СтрЗаменить(Рез,"Ф","F"); 
	Рез = СтрЗаменить(Рез,"Х","H"); 
	Рез = СтрЗаменить(Рез,"Ч","CH"); 
	Рез = СтрЗаменить(Рез,"Ш","SH"); 
	Рез = СтрЗаменить(Рез,"Щ","SCH"); 
	Рез = СтрЗаменить(Рез,"Ъ",""); 
	Рез = СтрЗаменить(Рез,"Ь",""); 
	Рез = СтрЗаменить(Рез,"Ы","I"); 
	Рез = СтрЗаменить(Рез,"Ц","C"); 
	Рез = СтрЗаменить(Рез,"Э","E"); 
	Рез = СтрЗаменить(Рез,"Ю","YU"); 
	Рез = СтрЗаменить(Рез,"Я","YA"); 
	Рез = СтрЗаменить(Рез,"Й","I"); 
	Возврат(Рез); 
КонецФункции


//======================================================================
Функция СоздатьИДСвойства(ИмяСвойства)
	тмп = "CML2_"+Translate_Descr(Транслит(ИмяСвойства, 1));
	Возврат Врег(тмп);
КонецФункции // СоздатьИДСвойства



Процедура ВыгрузитьСвойства(ОбъектCML, Тег, МассивНоменклатуры)

	ТегСвойства  = СоздатьПодчиненныйЭлемент(ОбъектCML, Тег, "Свойства");   

	//XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойство, "Ид", СоздатьИДСвойства("НаименованиеLV"));
	//XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойство, "Наименование", "Наименование_LV");
	
	//"75A0BE85-1E5F-478B-875B-E398ECD01BF0"	 //- НаименованиеLV
	
//	XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойство, "Ид", СоздатьИДСвойства("МатчТовар"));
//	XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойство, "Наименование", "МатчТовар");

	//название резвизита : ИД : наименование
//	стрСвойства = "НаименованиеРусс: название на русском языке,НаименованиеLT: название на литовском языке,НаименованиеEE: название на эстонском языке,НаименованиеАнгл: название на английском языке,УсловияХранения: температурный режим хранения,Бренд:Бренд,Код: код товара,ВидТовара:Вид товара, WEB:Признак WEB shop, ЗапретНаСкидку:Запрет на скидку";
	стрСвойства = "УсловияХранения: температурный режим хранения,Бренд:Бренд,Код: код товара,MAG:Признак WEB shop,PICTURES:Картинки";
	СписокСвойствНоменклатуры = Разложить(стрСвойства,",");
	Для Н=1 По СписокСвойствНоменклатуры.РазмерСписка() Цикл
		ТекСв = СписокСвойствНоменклатуры.ПолучитьЗначение(Н);
		СЗ_2 = Разложить(ТекСв, ":");
		Если СЗ_2.РазмерСписка()<2 Тогда
			Продолжить;
		КонецЕсли;
		ИмяРеквизита = СЗ_2.ПолучитьЗначение(1);
		Если (Метаданные.Справочник("Номенклатура").Реквизит(ИмяРеквизита).Выбран()=0) И ((ИмяРеквизита<>"Код") И (ИмяРеквизита<>"PICTURES")) Тогда
			Продолжить;
		КонецЕсли;
		ТегСвойствоТовара  = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегСвойства, "Свойство"); 
		
		Если ИмяРеквизита="PICTURES" Тогда
			XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "Ид", СоздатьИДСвойства(СЗ_2.ПолучитьЗначение(1)));
			XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "Наименование", СЗ_2.ПолучитьЗначение(2));			
			XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "Множественное", "true");
			XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксСортировка", 500);
			XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксКод", "MORE_PHOTO");
			XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксТипСвойства", "F");
			XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксСтрок", 1);
			XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксКолонок", 30);
			XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксТипСписка", "L");
			XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксТипыФайлов", "");
			XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксКоличествоПолей", 1);
			XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксСвязанныйИнфоблок", "");
			XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксОписаниеРазрешено", "true");
			XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксПоискРазрешен", "false");
			XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксФильтрРазрешен", "false");
			XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксРасширениеТипа", "");
			XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксОбязательное", "false");
			XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксЗначениеПоУмолчанию", "s:0:&quot;&quot;;");
			XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "Сериализовано", 1);
			
		ИначеЕсли СЗ_2.ПолучитьЗначение(1)="ОсновноеСвойство" Тогда
			XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "Ид", СоздатьИДСвойства(СЗ_2.ПолучитьЗначение(1)));
			XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "Наименование", СЗ_2.ПолучитьЗначение(2));			
		Иначе
			
			XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "Ид", СоздатьИДСвойства(СЗ_2.ПолучитьЗначение(1)));
			XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "Наименование", СЗ_2.ПолучитьЗначение(2));
		КонецЕсли;
	КонецЦикла;
	
	Спр			=СоздатьОбъект("Справочник.ВидыСвойств");
	СпрЗначения  = СоздатьОбъект("Справочник.ЗначенияСвойств");
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент() = 1 Цикл
		ТегСвойствоТовара  = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегСвойства, "Свойство"); 
		XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "Ид", СокрЛП(Спр.Идентификатор));
		XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "Наименование", Translate_Descr(СокрЛП(Спр.Наименование)));
		XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "Множественное", "false");
		ТегВариантыЗначений  = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегСвойствоТовара, "ВариантыЗначений"); 
		XML_ЗаписатьЭлемент(ОбъектCML, ТегВариантыЗначений, "Значение", Translate_Descr(СокрЛП(СпрЗначения.Наименование)));
		
		СпрЗначения.ИспользоватьВладельца(Спр.ТекущийЭлемент());
		СпрЗначения.ВыбратьЭлементы();
		Пока СпрЗначения.ПолучитьЭлемент() = 1 Цикл
			ТегВариант  = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегВариантыЗначений, "Вариант");
			XML_ЗаписатьЭлемент(ОбъектCML, ТегВариант, "Ид", СокрЛП(СпрЗначения.Идентификатор));
			XML_ЗаписатьЭлемент(ОбъектCML, ТегВариант, "Значение", Translate_Descr(СокрЛП(СпрЗначения.Наименование)));
			XML_ЗаписатьЭлемент(ОбъектCML, ТегВариант, "ПоУмолчанию", "false");
			XML_ЗаписатьЭлемент(ОбъектCML, ТегВариант, "Сортировка", СокрЛП(СпрЗначения.Код));
		КонецЦикла;
		
		XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксСортировка",СокрЛП(Спр.Код));
		XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксКод",СоздатьИДСвойства(Спр.Наименование));
		XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксТипСвойства","L");
		XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксСтрок",1);
		XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксКолонок",30);
		XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксТипСписка","L");
		XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксТипыФайлов","");
		XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксКоличествоПолей",5);
		XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксСвязанныйИнфоблок","");
		XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксКоличествоПолей",5);
		XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксОписаниеРазрешено","false");
		XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксПоискРазрешен","false");
		XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксФильтрРазрешен","true");
		XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксРасширениеТипа","");
		XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксОбязательное","false");
		XML_ЗаписатьЭлемент(ОбъектCML, ТегСвойствоТовара, "БитриксЗначениеПоУмолчанию","s:0:&quot;&quot");
				
	КонецЦикла;
	
КонецПроцедуры	


//=======================================================================================
Процедура ВыгрузитьКлассификатор(ОбъектCML, Узел, МассивНоменклатуры, ИдКаталога, ВыбранныеСвойства, ОрганизацияВладелец)
	
	// классификатор
	ТегКлассификатор = СоздатьПодчиненныйЭлемент(ОбъектCML, Узел, "Классификатор");
	XML_ЗаписатьЭлемент(ОбъектCML, ТегКлассификатор, "Ид", СокрЛП(ИдКаталога));
	XML_ЗаписатьЭлемент(ОбъектCML, ТегКлассификатор, "Наименование", "Классификатор (Каталог товаров)");
	
	Сообщить("Выгружается: классификатор - владелец");
	// классификатор - владелец
	ВыгрузитьВладельца(ОбъектCML, ТегКлассификатор, ОрганизацияВладелец);

	Сообщить("Выгружается: классификатор - группы");
	// Классификатор - группы
	ВыгрузитьГруппы(ОбъектCML, ТегКлассификатор, МассивНоменклатуры);
	
	Сообщить("Выгружается: классификатор - свойства");
	ВыгрузитьСвойства(ОбъектCML, ТегКлассификатор, МассивНоменклатуры);
КонецПроцедуры



Функция ПолучитьСписокТиповЦен()
	СЗ = СоздатьОбъект("СписокЗначений");
	
	СЗ.ДобавитьЗначение(Константа.ОсновнаяКатегорияЦены);
	
	СЗ_Фильтр = СоздатьОбъект("СписокЗначений");
	ТипФильтра = "";
	Если ЕстьФильтр("ТипЦен", СЗ_Фильтр, ТипФильтра)=1 Тогда
		Если ТипФильтра=1 Тогда //включающий фильтр
			Возврат СЗ_Фильтр;
		ИначеЕсли ТипФильтра=2 Тогда //исключающий фильтр
			Для Н=1 По СЗ_Фильтр.РазмерСписка() Цикл
				Поз = СЗ.НайтиЗначение(СЗ_Фильтр.ПолучитьЗначение(Н));
				Если Поз<>0 Тогда
					СЗ.УдалитьЗначение(Н);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СЗ;
КонецФункции



//******************************************************************************
// глКурсДляВалюты(Валюта,ДатаКурса)
//
// Параметры:
//  Валюта    - Валюта (элемент справочника "Валюты")
//  ДатаКурса - Дата, на которую следует получить курс
//
// Возвращаемое значение: 
//  Курс, с учетом кратности
//
// Описание: 
//  Возвращает курс валюты на дату
//
Функция _глКурсДляВалюты(Валюта,ДатаКурса) Экспорт
	Попытка
		Возврат Валюта.Курс.Получить(ДатаКурса);
	Исключение
		Возврат 1;
	КонецПопытки;
КонецФункции  // глКурсДляВалюты()
                                                                      
//******************************************************************************
// глКратностьДляВалюты(Валюта,ДатаКурса)
//
// Параметры:
//  Валюта    - Валюта (элемент справочника "Валюты")
//  ДатаКурса - Дата, на которую следует получить кратность
//
// Возвращаемое значение: 
//  Курс, с учетом кратности
//
// Описание: 
//  Возвращает курс валюты на дату
//
Функция _глКратностьДляВалюты(Валюта,ДатаКурса) Экспорт
	Попытка
		Кратность=Валюта.Кратность.Получить(ДатаКурса);
	Исключение
		Кратность = 1;
	КонецПопытки;
	Возврат ?(Кратность=0,1,Кратность);
КонецФункции  // глКратностьДляВалюты()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ СО СТОИМОСТНЫМИ РЕКВИЗИТАМИ
//
//******************************************************************************
//  глПересчет(Сумма,ВалютаНач,ПоКурсуВалютыНач,ВалютаКон,ПоКурсуВалютыКон,ПоКратностиВалютыНач,ПоКратностиВалютыКон)
//
// Параметры:      
//	Сумма                - сумма, которую следует пересчитать
// 	ВалютаНач            - валюта (элемент справочника "Валюты"), из которой считаем
// 	ВалютаКон            - валюта (элемент справочника "Валюты"), в которую считаем
// 	ПоКурсуВалютыНач     - курс или дата курса валюты нач
// 	ПоКурсуВалютыКон     - курс или дата курса валюты кон
// 	ПоКратностиВалютыНач - кратность валюты нач
// 	ПоКратностиВалютыКон - кратность валюты кон
//
// Возвращаемое значение: 
//  Сумма, пересчитанная в другую валюту
//
// Описание: 
// 	Эта функция пересчитывает сумму из ВалютаНач и возвращает значение Сумма в 
// 	ВалютаКон в параметрах ПоКурсуВалютыНач и ПоКурсуВалютыКон могут передаваться
// 	либо сами курсы либо даты
//
Функция _глПересчет(Сумма,ВалютаНач,ПоКурсуВалютыНач,ВалютаКон,ПоКурсуВалютыКон,ПоКратностиВалютыНач = 1,ПоКратностиВалютыКон = 1) Экспорт
	
	Если ВалютаНач = ВалютаКон Тогда
		// ну, тут и считать нечего...
		Возврат Сумма;
	КонецЕсли;

	ТипЗн=ТипЗначенияСтр(ПоКурсуВалютыНач);
	
	Если ТипЗн = "Число" Тогда
		КурсВалютыНач      = ПоКурсуВалютыНач;
		КратностьВалютыНач = ПоКратностиВалютыНач;
		КратностьВалютыНач = ?(КратностьВалютыНач = 0,1,КратностьВалютыНач);
		
	ИначеЕсли ТипЗн = "Дата" Тогда
		КурсВалютыНач      = _глКурсДляВалюты(ВалютаНач,ПоКурсуВалютыНач);
		КратностьВалютыНач = _глКратностьДляВалюты(ВалютаНач,ПоКурсуВалютыНач);
		
	Иначе
		Сообщить("глПересчет():Неверный тип параметра ПоКурсуВалютыНач!");
		Возврат Сумма;
		
	КонецЕсли;

	ТипЗн = ТипЗначенияСтр(ПоКурсуВалютыКон);
	
	Если ТипЗн = "Число" Тогда
		КурсВалютыКон      = ПоКурсуВалютыКон;
		КратностьВалютыКон = ПоКратностиВалютыКон;
		КратностьВалютыКон = ?(КратностьВалютыКон = 0,1,КратностьВалютыКон);
		
	ИначеЕсли ТипЗн = "Дата" Тогда
		КурсВалютыКон      = _глКурсДляВалюты(ВалютаКон,ПоКурсуВалютыКон);
		КратностьВалютыКон = _глКратностьДляВалюты(ВалютаКон,ПоКурсуВалютыКон);
		
	Иначе
		Сообщить("глПересчет():Неверный тип параметра ПоКурсуВалютыКон!");
		Возврат Сумма;
		
	КонецЕсли;

	Если (КурсВалютыНач = 0) 
	 ИЛИ (КурсВалютыКон = 0) Тогда
		Сообщить("При пересчете валюты обнаружен нулевой курс валюты "
		+?(КурсВалютыНач = 0,ВалютаНач,ВалютаКон));
		Возврат Сумма;
	КонецЕсли;
    
	Если (КратностьВалютыНач = 0) ИЛИ (КратностьВалютыКон = 0) Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Сумма * ((КурсВалютыНач / КратностьВалютыНач) / (КурсВалютыКон / КратностьВалютыКон));
	
КонецФункции // глПересчет()

//******************************************************************************
// глПриСменеСтрокиТаблицыМФ(Принудительно = 0, ТекСтрокаВТаблице, Конт)
//
// Параметры:
//  Принудительно     - 1 - выполнить действия, даже если не сменилась тек. строка
//	ТекСтрокаВТаблице -  предыдущая текущая строка в таблице МФ         
//	Конт              - контекст формы
//
// Возвращаемое значение:
//  Возвращает строку с названием вида фильтра (используктся для формирования надписи).
//
// Вызывается из формул элементов диалога:
//  Функция вызывается при смене текущей строки таблицы МФ.
//
// Описание:
//  Предназначена для обновления списков значений в диалоге множественного фильтра.
//
Функция _глПриСменеСтрокиТаблицыМФ(Принудительно = 0, ТекСтрокаВТаблице, Конт) Экспорт
	        
	//ТаблицаМФ = Конт.ТаблицаМФ;
	//СписокЭлементовМФ = Конт.СписокЭлементовМФ;
	//ТипМФ = Конт.ТипМФ;
	
	// текущая строка не поменялась
	Если (ТекСтрокаВТаблице = ТаблицаМФ.ТекущаяСтрока()) и (Принудительно=0) Тогда
		Возврат ТаблицаМФ.Представление;
	КонецЕсли;
            
	// сначала запомним список выбранных объектов строки МФ %%откуда%% пришли
	Если ПустоеЗначение(ТекСтрокаВТаблице) = 0 Тогда
		Попытка
			ТаблицаМФ.ПолучитьСтрокуПоНомеру(ТекСтрокаВТаблице);
		Исключение 
			Возврат ТаблицаМФ.Представление; 
		КонецПопытки;
	    СписокЭлементовМФ.Выгрузить(ТаблицаМФ.СписокЭлементов);
		Если СписокЭлементовМФ.РазмерСписка()=0 Тогда
			ТаблицаМФ.ФлВкл=1;
		КонецЕсли;                       
	КонецЕсли;
	
	ТекСтрокаВТаблице = ТаблицаМФ.ТекущаяСтрока();
	Попытка
		ТаблицаМФ.ПолучитьСтрокуПоНомеру(ТекСтрокаВТаблице);
	Исключение 
		Возврат ТаблицаМФ.Представление; 
	КонецПопытки;
	
	СписокЭлементовМФ.УдалитьВсе();
	Если ТаблицаМФ.Вид="ЗначенияСвойств" Тогда
		Если ТипМФ.РазмерСписка()<3 Тогда
			ТипМФ.ВставитьЗначение(3,"одновременно все");    
		КонецЕсли;
	Иначе
		Если ТипМФ.РазмерСписка()>2 Тогда
			ТипМФ.УдалитьЗначение(3);    
		КонецЕсли;
	КонецЕсли;
	ТипМФ.ТекущаяСтрока(ТаблицаМФ.ТипМФ);
	
	Попытка
		Спис	= ТаблицаМФ.СписокЭлементов;
	Исключение
		Возврат ТаблицаМФ.Представление;
	КонецПопытки;
	
	Если ТипЗначенияСтр(Спис) = "СписокЗначений" Тогда
		Спис.Выгрузить(СписокЭлементовМФ);
	Иначе			
		ТаблицаМФ.СписокЭлементов = СоздатьОбъект("СписокЗначений");
	КонецЕсли;	
	Возврат ТаблицаМФ.Представление;
	
КонецФункции	// глПриСменеСтрокиТаблицыМФ()    
  
//******************************************************************************
// глМножественныйФильтрЗадан(ТаблицаМФ)
//
// Параметры:
//  ТаблицаМФ - ссылка на таблицу МФ
//
// Возвращаемое значение:
//  1 - если множественный фильтр задан
//  0 - иначе
//
// Описание:
//  Проверяет, задан ли множественный фильтр (хотя бы один)
//
Функция _глМножественныйФильтрЗадан(ТаблицаМФ)  Экспорт
	
	ТаблицаМФ.ВыбратьСтроки();
	Пока ТаблицаМФ.ПолучитьСтроку()>0 Цикл
		Если (ТаблицаМФ.СписокЭлементов.РазмерСписка()>0) и (ТаблицаМФ.ФлВкл=2) Тогда
			Возврат 1;       
		КонецЕсли;       
	КонецЦикла;
	Возврат 0;
	
КонецФункции // глМножественныйФильтрЗадан	 

//******************************************************************************
// глРаботаСТаблицейМФ(Режим,Конт)
//
// Параметры:
//  Режим 	- текстовая строка, определяет выполняемое действие	
//  Конт 	- контекст формы отчета
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Производит действия с таблице МФ в соотв. с параметром "Режим"
//  Вызывается из формул элементов диалога:
//  Кнопки "Добавить", "ДобавитьНесколько", "Удалить", "УдалитьВсе"
//
Процедура _глРаботаСТаблицейМФ(Режим, Конт) Экспорт
	
	Перем ТекПоз;
	Перем ТекЭлемент;
	Перем ФормаПодбора;
	Перем ВидЗначенияПодбора;
	Перем СправочникПодбора;             
	
	//ТаблицаМФ = Конт.ТаблицаМФ;
	//СписокЭлементовМФ = Конт.СписокЭлементовМФ;

	ТекПоз = СписокЭлементовМФ.ТекущаяСтрока();
	Если ТекПоз>0 Тогда // текущий элемент, спозиционируем на него
		ТекЭлемент=СписокЭлементовМФ.ПолучитьЗначение(ТекПоз);
	КонецЕсли;

	Если (Режим="Добавить") или (Режим="ДобавитьНесколько")  Тогда		// добавляем в список один элемент
		Если ТипЗначенияСтр(ТаблицаМФ.Вид)="СписокЗначений" Тогда
			ВидЗначенияПодбора="";
			Если ТаблицаМФ.Вид.ВыбратьЗначение(ВидЗначенияПодбора,"",,,1)=0 Тогда
				Возврат;
			КонецЕсли;
		Иначе
			ВидЗначенияПодбора=СокрЛП(ТаблицаМФ.Вид);
		КонецЕсли;
		Если ПустоеЗначение(ВидЗначенияПодбора)=1 Тогда
			Возврат;
		КонецЕсли;
		СправочникПодбора = СокрЛП(ТаблицаМФ.Тип)+"."+ВидЗначенияПодбора;
		
		Зн = "";
		// проверим, не является ли справочник подчиненным другому?
		// если да, то надо сначала спросить владельца
		Если Врег(СокрЛП(ТаблицаМФ.Тип))=Врег("Справочник") Тогда
			Если СокрЛП(Метаданные.Справочник(ВидЗначенияПодбора).Владелец) <> "Метаданные" Тогда
				Зн=СоздатьОбъект(Метаданные.Справочник(ВидЗначенияПодбора).Владелец.ПолныйИдентификатор());
				Зн.ВыборГруппы(0);
				Если Зн.Выбрать("Выберите "+Метаданные.Справочник(ВидЗначенияПодбора).Владелец,"") = 0 Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
		
		// открываем окно подбора                         
		Конт.ОткрытьПодбор(СправочникПодбора,,ФормаПодбора,?(Режим="ДобавитьНесколько",1,0),ТекЭлемент);
		Если Врег(СокрЛП(ТаблицаМФ.Тип))=Врег("Справочник") Тогда
			ФормаПодбора.ВыборГруппы(1);                                      
		КонецЕсли;
		Если ТипЗначенияСтр(Зн)="Справочник" Тогда
			ФормаПодбора.ИспользоватьВладельца(Зн.ТекущийЭлемент());
		КонецЕсли;
		
    ИначеЕсли Режим="УдалитьВсе" Тогда	// удаляем все элементы из списка
		СписокЭлементовМФ.УдалитьВсе();
		ТаблицаМФ.ФлВкл=1;
		
	ИначеЕсли Режим="Удалить" Тогда	// удаляем из списка один элемент
		Если ТекПоз >0 Тогда
			СписокЭлементовМФ.УдалитьЗначение(ТекПоз);
			Если СписокЭлементовМФ.РазмерСписка()>ТекПоз  Тогда
				СписокЭлементовМФ.ТекущаяСтрока(ТекПоз);
			Иначе // поставим на последний элемент
				СписокЭлементовМФ.ТекущаяСтрока(СписокЭлементовМФ.РазмерСписка());	
			КонецЕсли;        
			Если СписокЭлементовМФ.РазмерСписка()=0 Тогда
				ТаблицаМФ.ФлВкл=1;                           
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	   
 КонецПроцедуры	// глРаботаСТаблицейМФ()
          
//******************************************************************************
// глОбработкаКликаПоТаблицеМФ(Конт)
//
// Параметры:
//  Конт - контекст формы
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Производит действия при двойном клике по таблице МФ зависимости от текущей колонки таблицы
//
Процедура _глОбработкаКликаПоТаблицеМФ(Конт) Экспорт
	                                 
	//ТаблицаМФ = Конт.ТаблицаМФ;
	
	ТекСтр	= ТаблицаМФ.ТекущаяСтрока();
	ТекКол	= СокрЛП(ТаблицаМФ.ТекущаяКолонка());
	
	Если ТекСтр = 0 Тогда Возврат КонецЕсли;
	         
	ТаблицаМФ.ПолучитьСтрокуПоНомеру(ТекСтр);
	
	Если ТекКол = "ФлВкл" Тогда
		
		Если ТаблицаМФ.ФлВкл = 1 Тогда
			ТаблицаМФ.ФлВкл = 2;
		Иначе
			ТаблицаМФ.ФлВкл = 1;
		КонецЕсли;	
		
	Иначе		
		_глРаботаСТаблицейМФ("Добавить",Конт);
	КонецЕсли;
	
КонецПроцедуры // глОбработкаКликаПоТаблицеМФ()      

//******************************************************************************
// глДобавитьВТаблицуМФ(ТаблицаМФ,Тип, Вид, ИмяПеременной, Представление) Экспорт
//
// Параметры:                    
//  ТаблицаМФ - ссылка на таблицу МФ
//  Тип - текстовая строка, тип значения
//  Вид - текстовая строка, вид значения
//  Имя переменной - имя переменной запроса, к которой должен быть приложен фильтр
//  Представление - текстовая строка - описание фильтра для пользователя
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Добавляет в таблицу МФ 1 строку, если там еще нет аналогичной.
//  Используется для инициализации таблицы МФ
//
Процедура _глДобавитьВТаблицуМФ(ТаблицаМФ,Тип, Вид, ИмяПеременной, Представление) Экспорт
	
	Если ТаблицаМФ.НайтиЗначение(Представление, 0, "Представление") = 0 Тогда

		ТаблицаМФ.НоваяСтрока();
		ТаблицаМФ.Тип=Тип;
		ТаблицаМФ.Вид=Вид;
		ТаблицаМФ.ИмяПеременной=ИмяПеременной;                
		ТаблицаМФ.СписокЭлементов=СоздатьОбъект("СписокЗначений");
		ТаблицаМФ.ТипМФ=1; // текущая строка списка ТипМФ
		ТаблицаМФ.ФлВкл=1; // фильтр включен ("1" или "2")
		ТаблицаМФ.Представление=Представление;	
		
	КонецЕсли;

	Если СокрЛП(Представление) = "По авторам документов" Тогда  
		Стр = 0;
		Если ТаблицаМФ.НайтиЗначение("По автору документов", Стр, "Представление") = 1 Тогда
			ТаблицаМФ.УдалитьСтроку(Стр);		    
		КонецЕсли;	    
	КонецЕсли;
	
КонецПроцедуры // глДобавитьВТаблицуМФ()


//******************************************************************************
// глОкруглить(Числ, ПорядокОкругления)
//
// Параметры:
//  Числ              - исходное число
//  ПорядокОкругления - элемент перечисления Порядки окгугления: 
//  "шаг" округления (0.01 (арифметическое), 0.01, 0.05, 0.1, 0.5, 1, 5, 10, 50, 100)
//
// Возвращаемое значение:
//  Округленное по заданному порядку значение
//
// Описание:
//  Округляет число вверх по заданному порядку. Т.е число 123.37 при порядке
//  округление 0.5 превратиться в 123.50, а число 0.1 при порядке округления
//  5 станет равным 5.
//  Если значение перечисления ОкрТочно, то округляет арифметически до 0.01
//
Функция _глОкруглить(Числ, ПорядокОкругления) Экспорт
	Перем Рез;
	
	Если ПорядокОкругления = Перечисление.ПорядкиОкругления.ОкрТочно Тогда
		
		// арифметическое округление до 2-х знаков после запятой
		Рез = Окр(Числ, 2);
	Иначе
		// округление к верхней границе по заданному порядку
		
		// преобразуем порядок округления число
		Порядок			= Число(Строка(ПорядокОкругления));
		
		// вычислим количество интервалов, входящих в число
		КолвоИнтервал	= Числ / Порядок;
		
		// вычислим целое количество интервалов.
		КолвоИнтервалЦел= Цел(КолвоИнтервал);
		
		Если КолвоИнтервал = КолвоИнтервалЦел Тогда
			// Числа поделились нацело. Округлять не нужно.
			Рез	= Числ;
		Иначе
			Рез	= Порядок * (КолвоИнтервалЦел + 1);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // глОкруглить()


//******************************************************************************
// глВернутьЦену(Номенклатура, ТипЦены, ДатаЦены, ЦенаЦены, ЕдЦены, ВалЦены, НаценкаЦены, НайденнаяЦена) 
//
// Параметры: 
//  Номенклатура  - элемент справочника "Номенклатура"
//  ТипЦены       - элемент справочника "ТипыЦен"
//  ДатаЦены      - дата, на которую надо получить цену
//  ЦенаЦены      - переменная, которую надо заполнитиь значением (число) полученной цены
//  ЕдЦены        - переменная, которую надо заполнитиь значением 
//                  (элемент справочника Единицы) единицы, за которую дается цена
//  ВалЦены       - переменная, которую надо заполнитиь значением валюты, в которой выражена цена 
//  НайденнаяЦена - переменная, которую надо заполнить найденным элементом справочника цен
//
// Возвращаемое значение:
//  1 - если есть такая цена, пераметры цены заполнены
//  0 - нет такой цены
// -1 - есть только цены, помеченные на удаление
//
// Описание:
//  Формирует ценовые характеристики номенклатурной единицы по заданному типу цен. 
//
Функция _глВернутьЦену(Номенклатура, ТипЦены, ДатаЦены = 0, ЦенаЦены = 0, ЕдЦены = 0, ВалЦены = 0, НаценкаЦены = 0, НайденнаяЦена = 0) Экспорт
	Перем ЦеныНоменклатуры;
	Перем Рассчетная;
	Перем НужныйТипЦен;
	Перем ЕстьУдаленные;
	
	
	Рез = 1;
	НайденнаяЦена = ПолучитьПустоеЗначение("Справочник.Цены");
	
	Если ПустоеЗначение(ДатаЦены) = 1 Тогда
		ДатаЦены = РабочаяДата();
	КонецЕсли;

	// Найдет или нужную цену в справочнике
	// если она рассчитывается, то найдем базовую цену 
	Рассчетная		= ТипЦены.Рассчитывается;
	НужныйТипЦен	= ?(ПустоеЗначение(Рассчетная) = 1, ТипЦены, ТипЦены.БазовыйТипЦен);
	
	ЦеныНоменклатуры= СоздатьОбъект("Справочник.Цены");
	ЦеныНоменклатуры.ИспользоватьВладельца(Номенклатура); 
	ЦеныНоменклатуры.ВыбратьЭлементы();
	
	Пока ЦеныНоменклатуры.ПолучитьЭлемент()  = 1 Цикл    
		Если ЦеныНоменклатуры.ТипЦен <> НужныйТипЦен Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяЦена = ЦеныНоменклатуры.ТекущийЭлемент();
		
		Если ЦеныНоменклатуры.ПометкаУдаления() = 1 Тогда
			Рез = - 1; // Цена есть, но помечена на удаление
			Продолжить;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;       
	
	Если ПустоеЗначение(НайденнаяЦена) = 1 Тогда
		
		// Нет такой цены
		Возврат 0;
	КонецЕсли;
	
	// Заполним все ценовые характериситики 
	
	// если не задана единица цены на эту дату, то потом придется обрабатывать случай нулевого коэффициента у  пустой единицы
	ЕдЦены		= НайденнаяЦена.Единица.Получить(ДатаЦены); 
	
	Если ПустоеЗначение(Рассчетная) = 1 Тогда
		
		//Если цена не рассчитывается
		ЦенаЦены	= НайденнаяЦена.Цена.Получить(ДатаЦены);
	    
		// элемент справочника существует Валюту и Наценку возьмем из него
		ВалЦены		= НайденнаяЦена.Валюта;
		НаценкаЦены	= НайденнаяЦена.Процент;
	Иначе
		
		//Если цена рассчитывается
		БазоваяЦена 	= НайденнаяЦена.Цена.Получить(ДатаЦены);
		БазоваяВалюта	= НайденнаяЦена.Валюта;
		
		// Цены у базового типа могут отличаться
		ЦенаЦены    = _глПересчет(БазоваяЦена, БазоваяВалюта, ДатаЦены, ТипЦены.Валюта, ДатаЦены);
		ЦенаЦены    = _глОкруглить(ЦенаЦены * (100 + ТипЦены.Процент) / 100, ТипЦены.ПорядокОкругления);
	    
		// элемент справочника Цены не существует (расчетный). Валюту и Наценку возьмем из типа цены
		ВалЦены		= ТипЦены.Валюта;
		НаценкаЦены	= ТипЦены.Процент;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // глВернутьЦену()


//******************************************************************************
// глВернутьЦену(Номенклатура, ТипЦены, ДатаЦены, ЦенаЦены, ЕдЦены, ВалЦены, НаценкаЦены, НайденнаяЦена) 
//
// Параметры: 
//  Номенклатура  - элемент справочника "Номенклатура"
//  ТипЦены       - элемент справочника "ТипыЦен"
//  ДатаЦены      - дата, на которую надо получить цену
//  ЦенаЦены      - переменная, которую надо заполнитиь значением (число) полученной цены
//  ЕдЦены        - переменная, которую надо заполнитиь значением 
//                  (элемент справочника Единицы) единицы, за которую дается цена
//  НайденнаяЦена - переменная, которую надо заполнить найденным элементом справочника цен
//
// Возвращаемое значение:
//  1 - если есть такая цена, пераметры цены заполнены
//  0 - нет такой цены
// -1 - есть только цены, помеченные на удаление
//
// Описание:
//  Формирует ценовые характеристики номенклатурной единицы по заданному типу цен. 
//
Функция _глВернутьЦену_АССОРТИ(Номенклатура, ТипЦены, ДатаЦены = 0, ЦенаЦены = 0, ЕдЦены = 0, ВалЦены = 0, НаценкаЦены = 0, НайденнаяЦена = 0, НаценкаТранспорт = 0, НаценкаЦБ = 0, НаценкаТовар = 0) Экспорт
//	Перем ЦеныНоменклатуры;
//	Перем Рассчетная;
//	Перем НужныйТипЦен;
//	Перем ЕстьУдаленные;
//	Перем ПроцентНаценки; //для справочника ТипыЦенДляГруппы	
//	
//	Рез = 1;
//	НайденнаяЦена = ПолучитьПустоеЗначение("Справочник.Цены");
//	
//	Если ПустоеЗначение(ДатаЦены) = 1 Тогда
//		ДатаЦены = РабочаяДата();
//	КонецЕсли;
//
//	// Найдет или нужную цену в справочнике
//	// если она рассчитывается, то найдем базовую цену 
//	Рассчетная		= ТипЦены.Рассчитывается;
//	НужныйТипЦен	= ?(ПустоеЗначение(Рассчетная) = 1, ТипЦены, ТипЦены.БазовыйТипЦен);
//	
//	ЦеныНоменклатуры= СоздатьОбъект("Справочник.Цены");
//	ЦеныНоменклатуры.ИспользоватьВладельца(Номенклатура); 
//	ЦеныНоменклатуры.ВыбратьЭлементы();
//	Если ТипЦены.ПометкаУдаления()=1 Тогда
//		Рез = - 1;
//	КонецЕсли;	
//	Пока ЦеныНоменклатуры.ПолучитьЭлемент()  = 1 Цикл    
//		Если ЦеныНоменклатуры.ТипЦен <> НужныйТипЦен Тогда
//			Продолжить;
//		КонецЕсли;			
//		
//		НайденнаяЦена = ЦеныНоменклатуры.ТекущийЭлемент();
//		
//		Если ЦеныНоменклатуры.ПометкаУдаления() = 1 Тогда
//			Рез = - 1; // Цена есть, но помечена на удаление
//			Продолжить;
//		КонецЕсли;
//		
//	КонецЦикла;       
//	
//	Если ПустоеЗначение(НайденнаяЦена) = 1 Тогда
//		
//		// Нет такой цены
//		Возврат 0;
//	КонецЕсли;
//	
//	// Заполним все ценовые характериситики 
//	ВремЕдЦены		= НайденнаяЦена.Единица.Получить(ДатаЦены); 
//	Если ПустоеЗначение(ВремЕдЦены) = 1 Тогда // если не задана единица цены на эту дату, то считаем, что и цена не задана
//		Возврат 0;
//	Иначе
//		ЕдЦены = ВремЕдЦены;
//	КонецЕсли;
//	
//	ЦеныДляГруппыТМЦ = СоздатьОбъект("Справочник.ТипыЦенДляГруппы");// ----------- !
//	ЦеныДляГруппыТМЦ.ИспользоватьВладельца(Номенклатура);
//	ЦеныДляГруппыТМЦ.ВыбратьЭлементы();
//	Пока ЦеныДляГруппыТМЦ.ПолучитьЭлемент()=1 Цикл           // позволяет установить отдельный процент наценки
//		Если ЦеныДляГруппыТМЦ.ТипЦены=ТипЦены Тогда          // по различным типам цен на любой элемент номенклатуры
//			ПроцентНаценки = ЦеныДляГруппыТМЦ.Наценка.Получить(ДатаЦены);
//			ВалютаНаценки = ЦеныДляГруппыТМЦ.Валюта;
//			ПроцентНацТранспорт = ЦеныДляГруппыТМЦ.НаценкаТранспорт.Получить(ДатаЦены);
//			ПроцентНацЦБ = ЦеныДляГруппыТМЦ.НаценкаЦБ.Получить(ДатаЦены);
//			ПроцентНацТовар = ЦеныДляГруппыТМЦ.НаценкаТовар.Получить(ДатаЦены);
//		КонецЕсли;
//	КонецЦикла;	//--------------------- !
//	
//	Если ПустоеЗначение(Рассчетная) = 1 Тогда
//		
//		//Если цена не рассчитывается
//		ЦенаЦены	= НайденнаяЦена.Цена.Получить(ДатаЦены);
//	    
//		// элемент справочника существует Валюту и Наценку возьмем из него
//		ВалЦены		= НайденнаяЦена.Валюта;
//		НаценкаЦены	= НайденнаяЦена.Процент;
//	Иначе
//		
//		//Если цена рассчитывается
//		БазоваяЦена 	= НайденнаяЦена.Цена.Получить(ДатаЦены);
//		БазоваяВалюта	= НайденнаяЦена.Валюта;
//		
//		НаценкаТранспорт = ПроцентНацТранспорт;
//		НаценкаЦБ = ПроцентНацЦБ;
//		НаценкаТовар = ПроцентНацТовар;
//		СуммаНаценок = НаценкаТранспорт+НаценкаТовар;
//		ВалПересчет = ?(ПустоеЗначение(ВалютаНаценки)=0,ВалютаНаценки,ТипЦены.Валюта);		
//				
//		// Цены у базового типа могут отличаться
//		ЦенаЦены    = глПересчет(БазоваяЦена, БазоваяВалюта, ДатаЦены, ВалПересчет, ДатаЦены, Номенклатура, ТипЦены);
//		Если Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
//			ЦенаЦены    = глОкруглить(ЦенаЦены * (100 + ТипЦены.Процент) / 100, ТипЦены.ПорядокОкругления);
//		Иначе
//			ЦенаЦены    = глОкруглить(ЦенаЦены * (100 + ?(ПустоеЗначение(ПроцентНаценки)=0,СуммаНаценок,ТипЦены.Процент)) / 100, ТипЦены.ПорядокОкругления);
//	    КонецЕсли;
//		
//		// элемент справочника Цены не существует (расчетный). Валюту и Наценку возьмем из типа цены
//		ВалЦены		= ВалПересчет;//ТипЦены.Валюта;
//		Если Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
//			НаценкаЦены	= ТипЦены.Процент;
//		Иначе
//			НаценкаЦены	= ?(ПустоеЗначение(ПроцентНаценки)=0,СуммаНаценок,ТипЦены.Процент);//ТипЦены.Процент;
//	    КонецЕсли;
//		
//        Если Номенклатура.ВидНоменклатуры <> Перечисление.ВидыНоменклатуры.Услуга Тогда
//			Если (ПустоеЗначение(СуммаНаценок)=1) ИЛИ (СуммаНаценок=0) Тогда
//				ЦенаЦены = 0;
//			КонецЕсли;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Возврат Рез;

Возврат 0;
КонецФункции // глВернутьЦену()



//******************************************************************************
// глПолучитьЦену(Номенклатура, Тип, НаДату, Единица, Валюта)
//
// Параметры: 
//  Номенклатура	- элемент справочника Номенклатура.
//  Тип				- элемент справочника ТипыЦен
//  НаДату			- дата, на которую берется цена
//  Единица			- элемент справочника Единицы
//  Валюта			- элемент справочника Валюты
//  Курс			- курс или дата курса
//  Кратность      	- кратность курса
//
// Возвращаемое значение:
//  цену номенклатуры
//
// Описание:
//  Функция возвращает цену номенклатуры в указанном типе цен Тип, на дату НаДату,
//  за единицу измерения Единица, пересчитанную в валюту Валюта по курсу Курс
//
Функция _глПолучитьЦену(Номенклатура, Тип, НаДату, Единица=0, Валюта=0, Курс=0, Кратность=1) Экспорт
	Перем ЦенаЦены, ЕдЦены, ВалЦены;
	Перем НаценкаЦены, НайденнаяЦена, НаценкаТранспорт, НаценкаЦБ, НаценкаТовар;
	
	ЦенаЦены	= 0;
	
	ЦенаПолучена = 0;
	//%%% АССОРТИ
	Попытка
		Если Тип.Рассчитывается = 1 Тогда
			Если _глВернутьЦену_АССОРТИ(Номенклатура, Тип, НаДату, ЦенаЦены, ЕдЦены, ВалЦены, НаценкаЦены, ,НаценкаТранспорт, НаценкаЦБ, НаценкаТовар) = 1 Тогда 
				ЦенаПолучена = 1;
				//ТабРасчЦен.НоваяСтрока();
				//
				//ТабРасчЦен.ТипЦены	= ТипЦены;
				//ТабРасчЦен.Цена		= ЦенаЦены;
				//ТабРасчЦен.Единица	= ЕдЦены;
				//ТабРасчЦен.Валюта	= ВалЦены;//ТипЦены.Валюта;
				//ТабРасчЦен.Процент	= НаценкаЦены;//ТипЦены.Процент;
				//ТабРасчЦен.ПроцентТранспорт = НаценкаТранспорт;
				//ТабРасчЦен.ПроцентПлюсЦБ = НаценкаЦБ;
				//ТабРасчЦен.ПроцентНаТовар = НаценкаТовар;
			Иначе
				ЦенаЦены = 0;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	//%%% АССОРТИ

	Если ЦенаПолучена=0 Тогда
		Если _глВернутьЦену(Номенклатура, Тип, НаДату, ЦенаЦены, ЕдЦены, ВалЦены) = 1 Тогда
			
			Если ПустоеЗначение(Единица) = 0 Тогда
				Если ЕдЦены <> Единица Тогда
					// единица цены отличается от единицы, в которой нужно вернуть цену
					ЦенаЦены	= ?(ПустоеЗначение(ЕдЦены.Коэффициент) = 1,0,ЦенаЦены * Единица.Коэффициент / ЕдЦены.Коэффициент);
				КонецЕсли;
			КонецЕсли;
			
			Если ПустоеЗначение(Валюта) = 0 Тогда
				ЦенаЦены	= _глПересчет(ЦенаЦены, ВалЦены, НаДату, Валюта, ?(ПустоеЗначение(Курс) = 1, НаДату, Курс), Кратность);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Валюта = ВалЦены;
	
	Возврат ЦенаЦены;
	
КонецФункции // глПолучитьЦену()


//====================================================================
// Атрибуты: Имя <ТАБ> Значение
Процедура ДобавитьСтрокуВСписокРезвизитовТовара(Узел="", ТЗ, Имя, Зн, Атрибут="")
	ТЗ.НоваяСтрока();
	ТЗ.Узел = Узел;
	ТЗ.Имя = Имя;
	ТЗ.Значение = Зн;
	ТЗ.Атрибуты = СоздатьОбъект("СписокЗначений");
КонецПроцедуры


Процедура ДобавитьАтрибутРеквизитаВСписокРезвизитовТовара(ТЗ, Реквизит, Имя, Зн)
	стр = "";
	Если ТЗ.НайтиЗначение(Реквизит, стр, "")=1 Тогда
		//Сообщить(Имя);
		ТЗ.ПолучитьСтрокуПоНомеру(стр);
		//если передали атрибут то его записываем
		Если (ПустоеЗначение(Имя)=0) и (ПустоеЗначение(Зн)=0) Тогда
			ТЗ.Атрибуты.ДобавитьЗначение(""+Имя+СимволТабуляции+Зн);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


Функция ЗаполнитьСписокЗначенийОсновныхРеквизитовТовара(ОбъектCML, Узел, Товар)
	
	ТЗ = СоздатьОбъект("ТаблицаЗначений");
	ТЗ.НоваяКолонка("Узел");
	ТЗ.НоваяКолонка("Имя");
	ТЗ.НоваяКолонка("Значение");
	ТЗ.НоваяКолонка("Атрибуты");
	
	ДобавитьСтрокуВСписокРезвизитовТовара("", ТЗ, "Ид", СокрЛП(Товар.Идентификатор));
	ДобавитьСтрокуВСписокРезвизитовТовара("", ТЗ, "Код", СокрЛП(Товар.Код));
	ДобавитьСтрокуВСписокРезвизитовТовара("", ТЗ, "Штрихкод", СокрЛП(Товар.Штрихкод));
	ДобавитьСтрокуВСписокРезвизитовТовара("", ТЗ, "Артикул", СокрЛП(Товар.КодПоставщика));
	ДобавитьСтрокуВСписокРезвизитовТовара("", ТЗ, "Наименование", СокрЛП(ЗаменитьСпецСимволыВСтроке(ПолучитьЗначениеРеквизитаСправочника(Товар,"Наименование"))));
	//ДобавитьСтрокуВСписокРезвизитовТовара("", ТЗ, "Вид", СокрЛП(Товар.ВидТовара));
	//ДобавитьСтрокуВСписокРезвизитовТовара("", ТЗ, "WEB", СокрЛП(Товар.WEB));
	
	
	//ДобавитьСтрокуВСписокРезвизитовТовара("", ТЗ, "НаименованиеLV", СокрЛП(ЗаменитьСпецСимволыВСтроке(Товар.НаименованиеЛат))+" / "+СокрЛП(Товар.Параметр));

	Если итЕдиницы.НайтиСтроку("иЕдиница",Товар.БазоваяЕдиницаИзмерения,,1)=0 Тогда
		итЕдиницы.НайтиСтроку("иЕдиница",Перечисление.ЕдиницыИзмерения.Штука,,1);
		ДобавитьСтрокуВСписокРезвизитовТовара("", ТЗ, "ИдБазовойЕдиницы", итЕдиницы.ИД);
	Иначе
		ДобавитьСтрокуВСписокРезвизитовТовара("", ТЗ, "ИдБазовойЕдиницы", итЕдиницы.ИД);
	КонецЕсли;
	//ДобавитьСтрокуВСписокРезвизитовТовара("", ТЗ, "БазоваяЕдиница", СокрЛП(Товар.БазоваяЕдиницаИзмерения));
	//ДобавитьАтрибутРеквизитаВСписокРезвизитовТовара(ТЗ, "БазоваяЕдиница", "Код", СокрЛП(Товар.БазоваяЕдиницаИзмерения));
	//ДобавитьАтрибутРеквизитаВСписокРезвизитовТовара(ТЗ, "БазоваяЕдиница", "НаименованиеПолное", СокрЛП(Товар.БазоваяЕдиницаИзмерения));
	//ДобавитьАтрибутРеквизитаВСписокРезвизитовТовара(ТЗ, "БазоваяЕдиница", "МеждународноеСокращение", "");
	
	
	//ДобавитьСтрокуВСписокРезвизитовТовара(Узел, ТЗ, "Ид", СокрЛП(Товар.Код), "");
	//ДобавитьСтрокуВСписокРезвизитовТовара(Узел, ТЗ, "Штрихкод", СокрЛП(Товар.БазоваяЕдиница.ШтрихКод), "");
	//ДобавитьСтрокуВСписокРезвизитовТовара(Узел, ТЗ, "Артикул", СокрЛП(Товар.Артикул), "");
	//ДобавитьСтрокуВСписокРезвизитовТовара(Узел, ТЗ, "Наименование", СокрЛП(Товар.Наименование), "");
	//
	//ДобавитьСтрокуВСписокРезвизитовТовара(Узел, ТЗ, "БазоваяЕдиница", СокрЛП(Товар.БазоваяЕдиница.ОКЕИ.Наименование));
	//ДобавитьАтрибутРеквизитаВСписокРезвизитовТовара(ТЗ, "БазоваяЕдиница", "Код", СокрЛП(Товар.БазоваяЕдиница.ОКЕИ.Код));
	//ДобавитьАтрибутРеквизитаВСписокРезвизитовТовара(ТЗ, "БазоваяЕдиница", "ПолнНаименование", СокрЛП(Товар.БазоваяЕдиница.ОКЕИ.ПолнНаименование));
	//ДобавитьАтрибутРеквизитаВСписокРезвизитовТовара(ТЗ, "БазоваяЕдиница", "МеждународноеСокращение", "");
	
	Возврат ТЗ;
КонецФункции


Функция ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(СтавкаНДС)
	
	Попытка
		Если СтавкаНДС = Перечисление.СтавкиНДС.БезНДС Тогда
			ЗначениеНалога = "Без налога";
		//ИначеЕсли СтавкаНДС = Перечисление.СтавкиНДС.НДС0 Тогда		
		//	ЗначениеНалога = "0";
		ИначеЕсли СтавкаНДС = Перечисление.СтавкиНДС.НДС10 Тогда		
			ЗначениеНалога = "10";
		ИначеЕсли СтавкаНДС = Перечисление.СтавкиНДС.НДС10_110 Тогда		
			ЗначениеНалога = "10/110";
		ИначеЕсли СтавкаНДС = Перечисление.СтавкиНДС.НДС18 Тогда		
			ЗначениеНалога = "18";
		ИначеЕсли СтавкаНДС = Перечисление.СтавкиНДС.НДС18_118 Тогда				
			ЗначениеНалога = "18/118";
		ИначеЕсли СтавкаНДС = Перечисление.СтавкиНДС.НДС20 Тогда				
			ЗначениеНалога = "20";
		ИначеЕсли СтавкаНДС = Перечисление.СтавкиНДС.НДС20_120 Тогда						
			ЗначениеНалога = "20/120";
		Иначе
			ЗначениеНалога = "";	
		КонецЕсли;
		
	Исключение
			ЗначениеНалога = "";	
	КонецПопытки;
	
	Возврат ЗначениеНалога;
	
КонецФункции


Функция ПолучитьФайлКартинкиДляВыгрузки(Товар)
	//ПустаяКартинка = глКаталогФотоКорень + "photos\400\"+СокрЛП(Константа.ПустаяКартинка);
	Попытка
		ИмяФ = СокрЛП(Товар.Картинка);	
	Исключение
		Возврат "";
	КонецПопытки;
	//ИмяФ="D:\1.jpg";//сюда вместо D:\1.jpg пишем путь к картинке товара 
	Если ФС.СуществуетФайл(ИмяФ) = 1 Тогда
		форматКартинки = Нрег(Прав(ИмяФ, 4));
		Если (форматКартинки=".jpg") ИЛИ (форматКартинки=".gif")ИЛИ (форматКартинки="jpeg")ИЛИ (форматКартинки=".png") Тогда
			
			//Возврат ИмяФ;
			
			НовоеИмя = КаталогКартинок+"\"+СокрЛП(Товар.Код)+"."+форматКартинки;
			//НовоеИмя = СтрЗаменить(НовоеИмя, "\\", "\");
			НовоеИмя = СтрЗаменить(НовоеИмя, "..", ".");
			ФС.КопироватьФайл(ИмяФ, НовоеИмя, 0);
			
			//Предупреждение("Пауза...",1);
			
			СписокФайловКартинок.ДобавитьЗначение(ИмяФ);
			
			тмп = ""+ПодкаталогКартинок+"\"+СтрЗаменить(НовоеИмя, КаталогКартинок, "");
			//тмп = СтрЗаменить(тмп, "\\", "\");
			Возврат тмп;
		КонецЕсли;
		//	ФотоТ.Загрузить(ИмяФ);
		//	ФотоТ.РежимРисования(3);
		//ИначеЕсли (ФС.СуществуетФайл(ПустаяКартинка) = 1) и (ПустоеЗначение(Константа.ПустаяКартинка) = 0) Тогда
		//	ФотоТ.Загрузить(ПустаяКартинка);
		//	ФотоТ.РежимРисования(1);
	КонецЕсли;
	
	Возврат "";
КонецФункции




Процедура ЗаполнитьСписокЗначенийРеквизитовТовара(ОбъектCML, Узел, ТЗ, Товар, КаталогНаДиске, ВыгруженоКартинок)
	
	Если ПустоеЗначение(Товар.Родитель)=0 Тогда
		
		ТегГруппы = СоздатьЭлемент(ОбъектCML, "Группы");
		ИдГруппы = СокрЛП(Товар.Родитель.Идентификатор);
		XML_ЗаписатьЭлемент(ОбъектCML, ТегГруппы, "Ид", ИдГруппы);
		ДобавитьСтрокуВСписокРезвизитовТовара(ТегГруппы, ТЗ, "Ид", ИдГруппы);
		
	КонецЕсли;	
	
	//	ДобавитьСтрокуВСписокРезвизитовТовара("", ТЗ, "Описание", ЗаменитьСпецСимволыВСтроке(Товар.ПолноеНаименование));
	ДобавитьСтрокуВСписокРезвизитовТовара("", ТЗ, "Вес", Товар.Вес);
	
	Для Н=1 По ТЗ_ВыгрузкаРеквизитов.КоличествоСтрок() Цикл
		ТЗ_ВыгрузкаРеквизитов.ПолучитьСтрокуПоНомеру(Н);
		Если ТЗ_ВыгрузкаРеквизитов.Выгружать=2 Тогда
			Попытка
				ДобавитьСтрокуВСписокРезвизитовТовара("", ТЗ, СтрЗаменить(ТЗ_ВыгрузкаРеквизитов.НаименованиеТега," ",""), СокрЛП(ЗаменитьСпецСимволыВСтроке(Товар.ПолучитьАтрибут(ТЗ_ВыгрузкаРеквизитов.Реквизит))));
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	//%%% Дополниетелльные реквизиты
	//ДобавитьСтрокуВСписокРезвизитовТовара("", ТЗ, "НомерПоКаталогу", Товар.Цвет);
	//ДобавитьСтрокуВСписокРезвизитовТовара("", ТЗ, "Производитель", Товар.Размер);
	////Если ПустоеЗначение(Товар.Родитель)=0 Тогда
	////	ДобавитьСтрокуВСписокРезвизитовТовара("", ТЗ, "МодельныйРяд", Товар.Родитель.МодельныйРяд);
	////КонецЕсли;
	//ДобавитьСтрокуВСписокРезвизитовТовара("", ТЗ, "МодельныйРяд", Товар.Типоразмер);
	//ДобавитьСтрокуВСписокРезвизитовТовара("", ТЗ, "СтранаПроисхождения", Строка(Товар.СтранаПроисхождения));
	
	Если ВыгружатьКартинки=1 Тогда 
		
		//Если ЗначениеЗаполнено(Товар.НоменклатураСсылка.ОсновноеИзображение) Тогда 
		//
		//	Если ВыгружатьТолькоИзменения Тогда
		//		
		//		ВыгрузитьДаннуюКартинку = (СтруктураИзменений.Картинки.Найти(Товар.НоменклатураСсылка.ОсновноеИзображение) <> Неопределено);
		//		
		//	Иначе
		//		ВыгрузитьДаннуюКартинку = Истина;
		//	КонецЕсли;
		//	
		//	Если ВыгрузитьДаннуюКартинку Тогда
		//	
		//		СтруктураДанныхКартинки = ВыгрузитьКартинку(Товар.НоменклатураСсылка, КаталогНаДиске);
		//		
		//		Если СтруктураДанныхКартинки.Размер <> "0" Тогда
		//			ё
		//			ДобавитьУзелCML(СписокЗначенийCML, "Картинка", СтруктураДанныхКартинки.Адрес);
		//			ВыгруженоКартинок	 = ВыгруженоКартинок + 1;
		//			
		//		КонецЕсли;	
		//		
		//	КонецЕсли;
		//	
		//Иначе
		//	
		//	// картинки нет вообще
		//	ДобавитьНачалоЭлементаCML(СписокЗначенийCML, "Картинка");	
		//	ДобавитьКонецЭлементаCML(СписокЗначенийCML);
		//	
		//КонецЕсли;
		
		фКартинки = ПолучитьФайлКартинкиДляВыгрузки(Товар);
		Если ПустоеЗначение(фКартинки)=0 Тогда
			ДобавитьСтрокуВСписокРезвизитовТовара("", ТЗ, "Картинка", СтрЗаменить(фКартинки,"\","/"));//нет картинки в типовой
			ВыгруженоКартинок = ВыгруженоКартинок + 1;
		КонецЕсли;
		//ДобавитьСтрокуВСписокРезвизитовТовара("", ТЗ, "Картинка", "D:\1.jpg");//нет картинки в типовой
						
	КонецЕсли;
	
//	Запрос=СоздатьОбъект("ODBCRecordSet");
//	ТекстЗапроса="SELECT $МатчТовары.Идентификатор Идентификатор
//	|					, МатчТовары.DESCR Наименование
//	|					, МатчТовары.ID [МатчКодСсылка $Справочник.МатчТовары]
//	|					, $МатчТовары.Товар [Товар $Справочник.Товары]
//	|			   FROM $Справочник.МатчТовары AS МатчТовары (NOLOCK)
//	|				WHERE ($МатчТовары.Товар = :ВыбТовар)
//	|					AND (МатчТовары.ISMARK = 0)
//	|";
//	Запрос.УстановитьТекстовыйПараметр("ВыбТовар",Товар);
//	
//	//выгружаем матчи товаров как свойства	
//	тМатчи=СоздатьОбъект("ИндексированнаяТаблица");
//	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,тМатчи);
//	тМатчи.Группировать("Товар : *Товар; МатчКодСсылка : *МатчКодСсылка","");
//	с=0;
//
//	ИдСвойстваМатчКод = СоздатьИДСвойства("МатчТовар");

	ФотоПуть = "http://img.food.reaton.lv/Photos/"+СокрЛП(Товар.КодТовара)+".jpg";
	ДобавитьСтрокуВСписокРезвизитовТовара("", ТЗ, "Картинка", ФотоПуть);

	ТегЗначенияСвойств = СоздатьЭлемент(ОбъектCML, "ЗначенияСвойств");
//
//	тМатчи.ВыбратьСтроки();
//	Пока тМатчи.ПолучитьСтроку() = 1 Цикл
//		
//		тзМатчКоды = тМатчи.тзПотомки;
//		тзМатчКоды.Сортировать("Наименование");
//		тзМатчКоды.ВыбратьСтроки();
//		стрМатчКод="";
//		Пока тзМатчКоды.ПолучитьСтроку() = 1 Цикл
//			Если ПустоеЗначение(стрМатчКод)=0 Тогда
//				стрМатчКод=стрМатчКод+",";
//			КонецЕсли;
//			стрМатчКод=стрМатчКод+СокрЛП(тзМатчКоды.Наименование);
//		КонецЦикла;
//		
//		с=с+1;
//		
//		//Сообщить(Шаблон("Выгружен матчкод: [стрМатчКод]"));
//		Если ПустоеЗначение(стрМатчКод)=0 Тогда
//			ТегЗначениеСв = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегЗначенияСвойств, "ЗначенияСвойства");
//			XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначениеСв, "Ид", ИдСвойстваМатчКод);
//			XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначениеСв, "Значение", СокрЛП(ЗаменитьСпецСимволыВСтроке(стрМатчКод)));
//		КонецЕсли;
//	КонецЦикла;
	ДобавитьСтрокуВСписокРезвизитовТовара(ТегЗначенияСвойств, ТЗ, "", "");
	
	
	Если СписокСвойствНоменклатуры.РазмерСписка() > 0 Тогда
		
		Если ПустоеЗначение(СписокСвойствНоменклатуры.ПолучитьЗначение(1))=0 Тогда
			
			Для Н=1 По СписокСвойствНоменклатуры.РазмерСписка() Цикл
				ТекСв = СписокСвойствНоменклатуры.ПолучитьЗначение(Н);
				СЗ_2 = Разложить(ТекСв, ":");
				Если СЗ_2.РазмерСписка()<2 Тогда
					Продолжить;
				КонецЕсли;
				ИмяРеквизита = СЗ_2.ПолучитьЗначение(1);
				Если (Метаданные.Справочник("Номенклатура").Реквизит(ИмяРеквизита).Выбран()=0) И ( (ИмяРеквизита<>"Код") И (ИмяРеквизита<>"PICTURES")) Тогда
					Продолжить;
				КонецЕсли;

				Если Врег(ИмяРеквизита)="PICTURES" Тогда
					Продолжить;
//					ФотоПуть = "http://img.food.reaton.lv/Photos/"+СокрЛП(Товар.КодТовара)+".jpg";
//					XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначенияСвойств, "Картинка", ФотоПуть,0);				
				КонецЕсли;
				
				ТегЗначениеСв = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегЗначенияСвойств, "ЗначенияСвойства");
				XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначениеСв, "Ид", СоздатьИДСвойства(СЗ_2.ПолучитьЗначение(1)));
				Если СЗ_2.ПолучитьЗначение(1)="ОсновноеСвойство" Тогда
					XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначениеСв, "Значение", СокрЛП(Товар.ОсновноеСвойство.ЗначениеСвойства),0);
				Иначе
					АтрибутНазвание = СЗ_2.ПолучитьЗначение(1);
					Если АтрибутНазвание="Код" Тогда
						XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначениеСв, "Значение", СокрЛП(Товар.Код),0);				
					ИначеЕсли АтрибутНазвание="УсловияХранения" Тогда
						XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначениеСв, "Значение", СокрЛП(Товар.МестоХранения.УсловияХранения),0);
					Иначе
						XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначениеСв, "Значение", СокрЛП(Товар.ПолучитьАтрибут(АтрибутНазвание)),0);				
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ДобавитьСтрокуВСписокРезвизитовТовара(ТегЗначенияСвойств, ТЗ, "", "");
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	СпрСвойства=СоздатьОбъект("Справочник.СвойстваНоменклатуры");
	СпрСвойства.ИспользоватьВладельца(Товар);
	СпрСвойства.ВыбратьЭлементы();
	Пока СпрСвойства.ПолучитьЭлемент() = 1 Цикл
		ТегЗначенияСв = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегЗначенияСвойств, "ЗначенияСвойства");
		XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначенияСв, "Ид", СокрЛП(СпрСвойства.ВидСвойства.Идентификатор));
		XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначенияСв, "Значение", Translate_Descr(СокрЛП(СпрСвойства.ВидСвойства)));
		ТегЗначениеСв = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегЗначенияСв, "ЗначениеСвойства");
		XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначениеСв, "Значение", Translate_Descr(СокрЛП(СпрСвойства.ЗначениеСвойства.Идентификатор)));
		XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначениеСв, "Описание", "");
	КонецЦикла;
	//Пока СпрМатчи.ПолучитьЭлемент()=1 Цикл
	//	Матч=СокрЛП(СпрМатчи.Наименование);
	//	ТегЗначениеСв = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегЗначенияСвойств, "ЗначенияСвойства");
	//	XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначениеСв, "Ид", СоздатьИДСвойства("МатчТовар"));
	//	XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначениеСв, "ИдЗначения", СокрЛП(СпрМатчи.Идентификатор));				
	//КонецЦикла;	
	//ТегЗначенияСвойств = СоздатьЭлемент(ОбъектCML, "ЗначенияСвойств");
	//ТегЗначениеСв = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегЗначенияСвойств, "ЗначенияСвойства");
	//XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначениеСв, "Ид", СоздатьИДСвойства("МатчТовар"));
	//XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначениеСв, "ИдЗначения", СокрЛП(Товар.ИдентификаторМатчКод));
	
	ДобавитьСтрокуВСписокРезвизитовТовара(ТегЗначенияСвойств, ТЗ, "", "");

	
	Если Товар.СтавкаНДС <> Перечисление.ЗначенияНДС.НДС0 Тогда
		
		ТегСтавкиНалогов = СоздатьЭлемент(ОбъектCML, "СтавкиНалогов");
		ТегСтавкаНалога = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегСтавкиНалогов, "СтавкаНалога");
		XML_ЗаписатьЭлемент(ОбъектCML, ТегСтавкаНалога, "Наименование", НаименованиеНалога);
		XML_ЗаписатьЭлемент(ОбъектCML, ТегСтавкаНалога, "Ставка", ПроцентНДС(Константа.ОсновнаяСтавкаНДС));
		ДобавитьСтрокуВСписокРезвизитовТовара(ТегСтавкиНалогов, ТЗ, "", "");
		
		//ДобавитьНачалоЭлементаCML(СписокЗначенийCML, "СтавкиНалогов");
		//ДобавитьНачалоЭлементаCML(СписокЗначенийCML, "СтавкаНалога");
		//ДобавитьУзелCML(СписокЗначенийCML, "Наименование", НаименованиеНалога);
		//ДобавитьУзелCML(СписокЗначенийCML, "Ставка"      , ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(Товар.НоменклатураСсылка.СтавкаНДС));
		//ДобавитьКонецЭлементаCML(СписокЗначенийCML);
		//ДобавитьКонецЭлементаCML(СписокЗначенийCML);
		
	КонецЕсли;	
	
	//ЗаписанЗаголовокВыгрузкиХарактеристик = Ложь;
	//
	//Если Товар.НоменклатураСсылка.ВестиУчетПоХарактеристикам
	//	И ЗначениеЗаполнено(Товар.ХарактеристикаСсылка) Тогда
	//				
	//	Для Каждого СтрокаХарактеристикаСвойство Из Товар.Строки Цикл
	//		
	//		Если Не ЗначениеЗаполнено(СтрокаХарактеристикаСвойство.ХарактеристикаЗначениеСвойства)
	//			ИЛИ НЕ ЗначениеЗаполнено(ФорматНаименованияДляCML(СтрокаХарактеристикаСвойство.ХарактеристикаСвойство)) Тогда
	//			
	//			Продолжить;
	//			
	//		КонецЕсли;
	//		
	//		Если НЕ ЗаписанЗаголовокВыгрузкиХарактеристик Тогда
	//					
	//			ДобавитьНачалоЭлементаCML(СписокЗначенийCML, "ХарактеристикиТовара");
	//			ЗаписанЗаголовокВыгрузкиХарактеристик = Истина;
	//			
	//		КонецЕсли;
	//		
	//		ДобавитьНачалоЭлементаCML(СписокЗначенийCML, "ХарактеристикаТовара");
	//		ДобавитьУзелCML(СписокЗначенийCML, "Наименование", ФорматНаименованияДляCML(СтрокаХарактеристикаСвойство.ХарактеристикаСвойство));
	//		ДобавитьУзелCML(СписокЗначенийCML, "Значение"    , СтрокаХарактеристикаСвойство.ХарактеристикаЗначениеСвойства);
	//		ДобавитьКонецЭлементаCML(СписокЗначенийCML);
	//		
	//		
	//	КонецЦикла;
	//	
	//	Если ЗаписанЗаголовокВыгрузкиХарактеристик Тогда
	//		ДобавитьКонецЭлементаCML(СписокЗначенийCML);
	//	КонецЕсли;
	//		
	//КонецЕсли;
	
	ТегЗначенияРеквизитов = СоздатьЭлемент(ОбъектCML, "ЗначенияРеквизитов");

//	ТегЗначениеРеквизита = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегЗначенияРеквизитов, "ЗначениеРеквизита");
//	XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначениеРеквизита, "Наименование", "НаименованиеLV");
//	XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначениеРеквизита, "Значение", WinToDos(Товар.НаименованиеЛат));
	
	//ТегЗначениеРеквизита = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегЗначенияРеквизитов, "ЗначениеРеквизита");
	//XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначениеРеквизита, "Наименование", "ВидНоменклатуры");
	//XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначениеРеквизита, "Значение", Товар.ВидТовара);
	
	//ТегЗначениеРеквизита = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегЗначенияРеквизитов, "ЗначениеРеквизита");
	//XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначениеРеквизита, "Наименование", "ТипНоменклатуры");
	//XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначениеРеквизита, "Значение", Товар.ВидТовара);
	
	ТегЗначениеРеквизита = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегЗначенияРеквизитов, "ЗначениеРеквизита");
	XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначениеРеквизита, "Наименование", "Вес");
	XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначениеРеквизита, "Значение", Товар.Вес);

	ТегЗначениеРеквизита = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегЗначенияРеквизитов, "ЗначениеРеквизита");
	XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначениеРеквизита, "Наименование", "Объем");
	XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначениеРеквизита, "Значение", Товар.Объем);
	
	//ТегЗначениеРеквизита = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегЗначенияРеквизитов, "ЗначениеРеквизита");
	//XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначениеРеквизита, "Наименование", "Полное наименование");
	//XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначениеРеквизита, "Значение", Товар.ПолнНаименование);

	
	ТЗ_ВыгрузкаСвойств.ВыбратьСтроки();
	Пока ТЗ_ВыгрузкаСвойств.ПолучитьСтроку() = 1 Цикл
		Если ТЗ_ВыгрузкаСвойств.ВыгружатьРеквизит<>2 Тогда
			Продолжить;
		КонецЕсли;
		ТегЗначениеРеквизита = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегЗначенияРеквизитов, "ЗначениеРеквизита");
		XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначениеРеквизита, "Наименование", ТЗ_ВыгрузкаСвойств.НаименованиеНаСайте);
		XML_ЗаписатьЭлемент(ОбъектCML, ТегЗначениеРеквизита, "Значение", ЗаменитьСпецСимволыВСтроке(ПолучитьЗначениеРеквизитаСправочника(Товар,ТЗ_ВыгрузкаСвойств.Реквизит)));
	КонецЦикла;

	ДобавитьСтрокуВСписокРезвизитовТовара(ТегЗначенияРеквизитов, ТЗ, "", "");
	//
	//ДобавитьНачалоЭлементаCML(СписокЗначенийCML, "ЗначенияРеквизитов");
	//
	//ДобавитьЗначениеРеквизитаВСписок(СписокЗначенийCML, "ВидНоменклатуры", Товар.ВидНоменклатуры);
	//ДобавитьЗначениеРеквизитаВСписок(СписокЗначенийCML, "ТипНоменклатуры", Товар.ТипНоменклатуры);
	//ДобавитьЗначениеРеквизитаВСписок(СписокЗначенийCML, "Полное наименование", Товар.НоменклатураСсылка.НаименованиеПолное);
	//
	//Если ЗначениеЗаполнено(Товар.НоменклатураСсылка.ЕдиницаХраненияОстатков) Тогда
	//	// передадим вес товара
	//	ДобавитьЗначениеРеквизитаВСписок(СписокЗначенийCML, "Вес", мКоэффициентПересчетаВесаТоваровВГраммыДляОбменаССайтом * Товар.НоменклатураСсылка.ЕдиницаХраненияОстатков.Вес);
	//КонецЕсли;	
	//	
	//ДобавитьКонецЭлементаCML(СписокЗначенийCML);
	//
	//СтатусУдаления = "";
	//Если Товар.НоменклатураСсылка.ПометкаУдаления
	// ИЛИ Товар.ХарактеристикаСсылка.ПометкаУдаления Тогда
	//	СтатусУдаления = "Удален";
	//КонецЕсли;
	//
	//ДобавитьУзелCML(СписокЗначенийCML, "Статус", СтатусУдаления);
	
КонецПроцедуры	


Процедура ЗаписатьCMLПоСпискуЗначений(ОбъектCML, Узел, ТЗ);
	
	Для Н=1 По ТЗ.КоличествоСтрок() Цикл
		ТЗ.ПолучитьСтрокуПоНомеру(Н);
		
		//если это узел то добавляем его и переходим к следующему элементу
		Если ПустоеЗначение(ТЗ.Узел)=0 Тогда
			ДобавитьУзел(Узел, ТЗ.Узел);
			Продолжить;
		КонецЕсли;
		ТекУзел = XML_ЗаписатьЭлемент(ОбъектCML, Узел, ТЗ.Имя, СокрЛП(ТЗ.Значение));
		Для К=1 По ТЗ.Атрибуты.РазмерСписка() Цикл
			ЭлСп = ТЗ.Атрибуты.ПолучитьЗначение(К);
			//Сообщить(ЭлСп);
			Мас = Разложить(ЭлСп, СимволТабуляции);
			
			XML_УстановитьАтрибут(ТекУзел, Мас.ПолучитьЗначение(1), Мас.ПолучитьЗначение(2));
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры	


Функция ЗаполнитьСписокЗначенийПредложения(ОбъектCML, ТЗ, Товар, Остаток)
	
	ТегЦены = СоздатьЭлемент(ОбъектCML, "Цены");
	//ДобавитьНачалоЭлементаCML(СписокЗначенийCML, "Цены");
	
	ТаблицаЦен = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаЦен.НоваяКолонка("ТипЦен");
	ТаблицаЦен.НоваяКолонка("Валюта");
	ТаблицаЦен.НоваяКолонка("Цена");
	ТаблицаЦен.НоваяКолонка("ЕдиницаИзмеренияЦены");
	ТаблицаЦен.НоваяКолонка("МинОтгрузка");
	
	спТипыЦен = ПолучитьСписокТиповЦен();
	Для Н=1 По спТипыЦен.РазмерСписка() Цикл
		ТипЦены = спТипыЦен.ПолучитьЗначение(Н);
		
		
		ТаблицаЦен.НоваяСтрока();
		ТаблицаЦен.ТипЦен = ТипЦены;
		//ТаблицаЦен.Валюта = ТипЦены.Валюта;
		Валюта = Рубли;

		ТаблицаЦен.Цена = ЦенаТовараПоКатегорииДляТовара(Товар,ТипЦены,Рубли,1,ДатаОтчета);
//		ТаблицаЦен.Цена = _глПолучитьЦену(Товар, ТипЦены, ДатаОтчета,,Валюта);
		ТаблицаЦен.ЕдиницаИзмеренияЦены = Товар.БазоваяЕдиницаИзмерения;
		ТаблицаЦен.Валюта = Валюта;
		ТаблицаЦен.МинОтгрузка = Товар.ОтгрКол;
		
	КонецЦикла;

	ТаблицаЦен.Свернуть("ТипЦен,Валюта,Цена,ЕдиницаИзмеренияЦены","МинОтгрузка");
	
	ТаблицаЦен.ВыбратьСтроки();
	Пока ТаблицаЦен.ПолучитьСтроку() = 1 Цикл
		
		ИдТипаЦены = СокрЛП(ТаблицаЦен.ТипЦен);
		ПредставлениеЦены = СокрЛП(ТаблицаЦен.Цена) + " " + СокрЛП(ТаблицаЦен.Валюта) + " за " + СокрЛП(ТаблицаЦен.ЕдиницаИзмеренияЦены);
		
		ТегЦена = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегЦены, "Цена");
		XML_ЗаписатьЭлемент(ОбъектCML, ТегЦена, "Представление", ПредставлениеЦены);
		XML_ЗаписатьЭлемент(ОбъектCML, ТегЦена, "ИдТипаЦены", ИдТипаЦены);
		XML_ЗаписатьЭлемент(ОбъектCML, ТегЦена, "ЦенаЗаЕдиницу", ТаблицаЦен.Цена);
		XML_ЗаписатьЭлемент(ОбъектCML, ТегЦена, "Валюта", СокрЛП(ТаблицаЦен.Валюта.Наименование));
		XML_ЗаписатьЭлемент(ОбъектCML, ТегЦена, "Единица", ТаблицаЦен.ЕдиницаИзмеренияЦены);
		XML_ЗаписатьЭлемент(ОбъектCML, ТегЦена, "Коэффициент", ТаблицаЦен.МинОтгрузка);
				
	КонецЦикла;

	ДобавитьСтрокуВСписокРезвизитовТовара(ТегЦены, ТЗ, "", "");

	ТегКоличествоНаСкладах = СоздатьЭлемент(ОбъектCML, "КоличествоНаСкладах");

	Остаток=0;
	тСкладыДляВыгрузки.ВыбратьСтроки();
	Пока тСкладыДляВыгрузки.ПолучитьСтроку()=1 Цикл
		сзКлюч.УдалитьВсе();
		//сзКлюч.ДобавитьЗначение(тСкладыДляВыгрузки.Склад);
		сзКлюч.ДобавитьЗначение(Товар);
		
		иТоварыДляВыгрузки.Подмножество(сзКлюч,1,"иТовар");
		рез=иТоварыДляВыгрузки.ВыбратьСтроки("иТовар");
		Если рез=0 Тогда
			ОстатокПоСкладу=0;
		Иначе
			ОстатокПоСкладу=иТоварыДляВыгрузки.Итог("Остаток","иТовар");
		КонецЕсли;
		
		ТегКоличествоНаСкладе = СоздатьПодчиненныйЭлемент(ОбъектCML, ТегКоличествоНаСкладах, "КоличествоНаСкладе");
		XML_ЗаписатьЭлемент(ОбъектCML, ТегКоличествоНаСкладе, "ИдСклада", СокрЛП(тСкладыДляВыгрузки.Склад.Идентификатор));
		XML_ЗаписатьЭлемент(ОбъектCML, ТегКоличествоНаСкладе, "Количество", ОстатокПоСкладу,0);
		Остаток=Остаток+ОстатокПоСкладу;
		
	КонецЦикла;

	ДобавитьСтрокуВСписокРезвизитовТовара(ТегКоличествоНаСкладах, ТЗ, "", "");
	ДобавитьСтрокуВСписокРезвизитовТовара(, ТЗ, "Количество", Остаток);
	
	Возврат ТаблицаЦен.КоличествоСтрок();
	
КонецФункции



Функция СформироватьCMLКаталогаПредложений(ОбъектCMLКаталог, УзелОбъектCMLКаталог,  
										ОбъектCMLПакетПредложений, УзелОбъектCMLПакетПредложений, ИдКаталога, 
										ТаблицаРезультатаЗапроса, КаталогНаДиске, ОрганизацияВладелец)
	//СтруктураИзменений, ОбъектCMLКаталог, ОбъектCMLПакетПредложений, ИдКаталога, 
	//ПостроительОтчетаРезультат, КаталогНаДиске, ОрганизацияВладелец)
	
	//// Заголовок каталога
	ТегКаталог = СоздатьПодчиненныйЭлемент(ОбъектCMLКаталог, УзелОбъектCMLКаталог, "Каталог");
	XML_УстановитьАтрибут(ТегКаталог, "СодержитТолькоИзменения", Ложь, Истина);
	XML_ЗаписатьЭлемент(ОбъектCMLКаталог, ТегКаталог, "Ид", Строка(ИдКаталога));
	XML_ЗаписатьЭлемент(ОбъектCMLКаталог, ТегКаталог, "ИдКлассификатора", Строка(ИдКаталога));
	XML_ЗаписатьЭлемент(ОбъектCMLКаталог, ТегКаталог, "Наименование", НаименованиеКаталогаТоваровCML);
	
	ВыгрузитьВладельца(ОбъектCMLКаталог, ТегКаталог, ОрганизацияВладелец);

	//// Заголовок пакета предложений
	ТегПакет = СоздатьПодчиненныйЭлемент(ОбъектCMLПакетПредложений, УзелОбъектCMLПакетПредложений, "ПакетПредложений");
	XML_УстановитьАтрибут(ТегПакет, "СодержитТолькоИзменения", Ложь, Истина);
	XML_ЗаписатьЭлемент(ОбъектCMLПакетПредложений, ТегПакет, "Ид", СокрЛП(ИдКаталога) + "#");
	XML_ЗаписатьЭлемент(ОбъектCMLПакетПредложений, ТегПакет, "Наименование", НаименованиеПакетаПредложенийCML);
	XML_ЗаписатьЭлемент(ОбъектCMLПакетПредложений, ТегПакет, "ИдКаталога", Строка(ИдКаталога));
	XML_ЗаписатьЭлемент(ОбъектCMLПакетПредложений, ТегПакет, "ИдКлассификатора", Строка(ИдКаталога));
	
	ВыгрузитьВладельца(ОбъектCMLПакетПредложений, ТегПакет, ОрганизацияВладелец);

	// Типы цен для пакета предложений
	ТаблицаТиповЦен = ПолучитьСписокТиповЦен();
	Если ТаблицаТиповЦен.РазмерСписка()<>0 Тогда
		ТегТипыЦен = СоздатьПодчиненныйЭлемент(ОбъектCMLПакетПредложений, ТегПакет, "ТипыЦен");
		Для Н=1 По ТаблицаТиповЦен.РазмерСписка() Цикл
			ТипЦены = ТаблицаТиповЦен.ПолучитьЗначение(Н);
			
			ТегТипЦены = СоздатьПодчиненныйЭлемент(ОбъектCMLПакетПредложений, ТегТипыЦен, "ТипЦены");
			XML_ЗаписатьЭлемент(ОбъектCMLПакетПредложений, ТегТипЦены, "Ид", СокрЛП(ТипЦены));
			XML_ЗаписатьЭлемент(ОбъектCMLПакетПредложений, ТегТипЦены, "Наименование", ФорматНаименованияДляCML(ТипЦены));
			XML_ЗаписатьЭлемент(ОбъектCMLПакетПредложений, ТегТипЦены, "Валюта", СокрЛП(Рубли.Наименование));
			
			ТегНалог = СоздатьПодчиненныйЭлемент(ОбъектCMLПакетПредложений, ТегТипЦены, "Налог");
			XML_ЗаписатьЭлемент(ОбъектCMLПакетПредложений, ТегНалог, "Наименование", НаименованиеНалога);
			XML_ЗаписатьЭлемент(ОбъектCMLПакетПредложений, ТегНалог, "УчтеноВСумме", ПолучитьСтрокуЗаписиДляXML(0, 1));
		КонецЦикла;
	КонецЕсли;
	
	
	РезультатДерево = ТаблицаРезультатаЗапроса;//ПолучитьТоварыДляВыгрузки();//ПостроительОтчетаРезультат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Всего 			  			 = РезультатДерево.КоличествоСтрок();
	Выгружено 		  			 = 0;
	ВыгруженоКартинок 			 = 0;
	ВыгруженоПредложений		 = 0;
	
	Если Всего > 0 Тогда
		
		ТегТовары = СоздатьПодчиненныйЭлемент(ОбъектCMLКаталог, ТегКаталог, "Товары");
		ТегПредложения = СоздатьПодчиненныйЭлемент(ОбъектCMLПакетПредложений, ТегПакет, "Предложения");
		
		Для Н=1 По РезультатДерево.КоличествоСтрок() Цикл
			РезультатДерево.получитьСтрокуПоНомеру(Н);
			// Каталог
			//Сообщить("Товар: "+РезультатДерево.Номенклатура.Код);
			СписокЗначенийCML = ЗаполнитьСписокЗначенийОсновныхРеквизитовТовара(ОбъектCMLКаталог, ТегТовары, РезультатДерево.Номенклатура);
			ЗаполнитьСписокЗначенийРеквизитовТовара(ОбъектCMLКаталог, ТегТовары, СписокЗначенийCML, РезультатДерево.Номенклатура, КаталогНаДиске, ВыгруженоКартинок);
			Выгружено = Выгружено + 1;
			
			ТегТовар = СоздатьПодчиненныйЭлемент(ОбъектCMLКаталог, ТегТовары, "Товар");
			ЗаписатьCMLПоСпискуЗначений(ОбъектCMLКаталог, ТегТовар, СписокЗначенийCML);
			
			Если Выгружено % 100 = 0 Тогда
				//Состояние("Выгружено объектов: " + Выгружено + ". Выгружается: " + РезультатДерево.Номенклатура);
				Состояние("Выгружено объектов: " + Выгружено );
			КонецЕсли;
			
			// Предложения
			Кратко = Истина;
			СписокЗначенийCML = ЗаполнитьСписокЗначенийОсновныхРеквизитовТовара(ОбъектCMLПакетПредложений, ТегПредложения, РезультатДерево.Номенклатура);
			КоличествоЦен = ЗаполнитьСписокЗначенийПредложения(ОбъектCMLПакетПредложений, СписокЗначенийCML, РезультатДерево.Номенклатура, РезультатДерево.Остаток);
			
			Если КоличествоЦен > 0 Тогда
				//Сообщить(РезультатДерево.Номенклатура);
				ВыгруженоПредложений = ВыгруженоПредложений + 1;
				ТегПредложение = СоздатьПодчиненныйЭлемент(ОбъектCMLПакетПредложений, ТегПредложения, "Предложение");
				ЗаписатьCMLПоСпискуЗначений(ОбъектCMLПакетПредложений, ТегПредложение, СписокЗначенийCML);
				
				//ОбъектCMLПакетПредложений.ЗаписатьНачалоЭлемента("Предложение");
				//ЗаписатьCMLПоСпискуЗначений(ОбъектCMLПакетПредложений, СписокЗначенийCML);
				//ОбъектCMLПакетПредложений.ЗаписатьКонецЭлемента();
			КонецЕсли;	
		КонецЦикла;
		
КонецЕсли;


	
	//// Завершаем каталог
	СтруктураВозврата = СоздатьОбъект("СписокЗначений");
	СтруктураВозврата.Установить("ВыгруженоТоваров",Выгружено);
	СтруктураВозврата.Установить("ВыгруженоКартинок",ВыгруженоКартинок);
	СтруктураВозврата.Установить("ВыгруженоПредложений",ВыгруженоПредложений);
	
	//ОбъектCMLКаталог.ЗаписатьКонецЭлемента();
	//
	//// Завершаем пакет предложений
	//ОбъектCMLПакетПредложений.ЗаписатьКонецЭлемента();
	//
	//СтруктураВозврата = Новый Структура("ВыгруженоТоваров,ВыгруженоКартинок,ВыгруженоПредложений", Выгружено, ВыгруженоКартинок, ВыгруженоПредложений);
	
	Возврат СтруктураВозврата;
	
КонецФункции


//======================================================================
Функция УдалитьФайлы(кат, Маска)
	//Сообщить("== "+кат);
	//Сообщить(Маска);
	ФС.УстТекКаталог(кат);
	ф = ФС.НайтиПервыйФайл(Маска);
	//УдалитьФайлНаДиске(ф);
	Пока ФС.СуществуетФайл(ф)=1 Цикл
		//Сообщить(ф);
		Попытка
			ФС.УдалитьФайл(ф);
		Исключение
		КонецПопытки;
		ф = ФС.НайтиСледующийФайл();
	КонецЦикла;
КонецФункции // гл


//=======================================================================================
Функция ВыгрузитьТоварыВКаталогНаДиске(СтруктураИзменений, КаталогНаДиске) 
	
	// Выгрузка
	
	ИмяФайлаКаталога = КаталогНаДиске + "\import.xml";
	ИмяФайлаПрайса	 = КаталогНаДиске + "\offers.xml";
	
	Если фс.СуществуетФайл(КаталогНаДиске)=0 Тогда
		Попытка
			ФС.СоздатьКаталог(КаталогНаДиске);
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если фс.СуществуетФайл(КаталогНаДиске)=0 Тогда
		Сообщить("Не удалось создать каталог: "+КаталогНаДиске);
		Возврат Ложь;
	КонецЕсли;
	
	//КаталогКартинок = СтрЗаменить(КаталогНаДиске+"\"+ПодкаталогКартинок, "\\", "\");
	КаталогКартинок = КаталогНаДиске+"\"+ПодкаталогКартинок;
	Если фс.СуществуетФайл(КаталогКартинок)=0 Тогда
		Попытка
			ФС.СоздатьКаталог(КаталогКартинок);
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если фс.СуществуетФайл(КаталогКартинок)=0 Тогда
		Сообщить("Не удалось создать каталог: "+КаталогКартинок);
		Возврат Ложь;
	КонецЕсли;
	
	УдалитьФайлы(КаталогНаДиске, "*.*");
	УдалитьФайлы(КаталогКартинок, "*.*");
	СписокФайловКартинок.УдалитьВсе();
	//Попытка
	//	УдалитьФайлы(КаталогНаДиске, "*.*");
	//Исключение
	//	СообщитьОбИсключительнойОшибке(Истина, );
	//КонецПопытки;	
	
	ДатаОтчета = ТекущаяДата();
	ВсемяОтчета = ТекущееВремя();
	
	//ПостроительЗапроса.Параметры.Вставить("ДатаОтчета", ДатаОтчета);
	//ПостроительЗапроса.Выполнить();
	
	Состояние("Подготовка данных...");
	
	ВыбранныеСвойства = СоздатьОбъект("СписокЗначений");//Новый СписокЗначений;
		
	ТаблицаРезультатаЗапроса = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРезультатаЗапросаГруппы = СоздатьОбъект("ТаблицаЗначений");
	
	ТаблицаРезультатаЗапроса = ПолучитьТоварыДляВыгрузки();
	//иТоварыДляВыгрузки=СоздатьОбъект("ИндексированнаяТаблица");
	//иТоварыДляВыгрузки.Загрузить(ТаблицаРезультатаЗапроса);
	//иТоварыДляВыгрузки.ДобавитьИндекс("иТовар","*Номенклатура");
	//Если ПолучитьТоварыДляВыгрузки(ТаблицаРезультатаЗапроса, ТаблицаРезультатаЗапросаГруппы)=0 Тогда
	//	Сообщить("Ошибка получения данных из справочника товаров");
	//КонецЕсли;
	
	// требуетя неизменный UUID каталога для проекта.
	// По организации взять UUID не можем, поскольку не ограничиваем
	// выгрузку рамками одной организации, выгружаем по предприятию в целом.
	// Поэтому, чтобы нигде не хранить UUID, получаем его из валюты
	// регламентированного учета, считая ее самой "стабильной" единицей
	// данных в рамках ИБ.
	
	ИдКаталога   = СокрЛП(КаталогНоменклатуры.Идентификатор);//Строка(Константы.ВалютаРегламентированногоУчета.Получить().УникальныйИдентификатор());
	
	Состояние("Выгрузка классификатора...");
	
	//ОбъектCMLКаталог 
	ОбъектCMLКаталог= ПолучитьОбъектДляЗаписиXML(ИмяФайлаКаталога, ДатаОтчета);
	ТегКоммерческаяИнформация = СоздатьПодчиненныйЭлемент(ОбъектCMLКаталог, ОбъектCMLКаталог, "КоммерческаяИнформация");
	XML_УстановитьАтрибут(ТегКоммерческаяИнформация, "ВерсияСхемы", "2.04");
	XML_УстановитьАтрибут(ТегКоммерческаяИнформация, "ДатаФормирования",  ПолучитьДатуV8(ДатаОтчета, ВсемяОтчета));

	
	ТаблицаНоменклатуры = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРезультатаЗапроса.Выгрузить(ТаблицаНоменклатуры);//.Скопировать();
	ТаблицаНоменклатуры.Свернуть("Номенклатура","");
	
	МассивНоменклатуры = СоздатьОбъект("СписокЗначений");
	ТаблицаНоменклатуры.Выгрузить(МассивНоменклатуры,,,"Номенклатура");
	
	ОрганизацияВладелец = КаталогНоменклатуры.ВладелецКаталога;
	
	ВыгрузитьКлассификатор(ОбъектCMLКаталог, ТегКоммерческаяИнформация, МассивНоменклатуры, ИдКаталога, ВыбранныеСвойства, ОрганизацияВладелец);
	ЗаписьЖурналаРегистрации(Шаблон("Отобрано для выгрузки [ТаблицаНоменклатуры.КоличествоСтрок()] товаров"),,"Обмен данными WEB",,2);
	
	Состояние("Подготовка данных...");
	
	
	ОбъектCMLПакетПредложений = ПолучитьОбъектДляЗаписиXML(ИмяФайлаПрайса, ДатаОтчета);
	//ОбъектCMLПакетПредложений= ПолучитьОбъектДляЗаписиXML(ИмяФайлаКаталога, ДатаОтчета);
	ТегКомИнфоПакетПредложений = СоздатьПодчиненныйЭлемент(ОбъектCMLПакетПредложений, ОбъектCMLПакетПредложений, "КоммерческаяИнформация");
	XML_УстановитьАтрибут(ТегКомИнфоПакетПредложений, "ВерсияСхемы", "2.04");
	XML_УстановитьАтрибут(ТегКомИнфоПакетПредложений, "ДатаФормирования",  ПолучитьДатуV8(ДатаОтчета, ВсемяОтчета));
	
	СтруктураРезультата = 
	СформироватьCMLКаталогаПредложений(ОбъектCMLКаталог, ТегКоммерческаяИнформация,  
										ОбъектCMLПакетПредложений, ТегКомИнфоПакетПредложений, ИдКаталога, 
										ТаблицаРезультатаЗапроса, КаталогНаДиске, ОрганизацияВладелец);
	
	ОбъектCMLКаталог.save(ИмяФайлаКаталога);
	ОбъектCMLПакетПредложений.save(ИмяФайлаПрайса);
	
	Возврат СтруктураРезультата;

	
//	
//	ОбъектCMLКаталог.ЗаписатьКонецЭлемента();
//	ОбъектCMLКаталог.Закрыть();
//	
//	ОбъектCMLПакетПредложений.ЗаписатьКонецЭлемента();
//	ОбъектCMLПакетПредложений.Закрыть();
//
//	Возврат СтруктураРезультата;
	
КонецФункции


Функция РазобратьАдресСайта(Знач АдресСайта) Экспорт
	
	АдресСайта = СокрЛП(АдресСайта); 
	
	HTTPСервер		 = ""; 
	HTTPПорт		 = 0;
	HTTPАдресСкрипта = "";
	
	Если ПустоеЗначение(АдресСайта)=0 Тогда
		
		АдресСайта = СтрЗаменить(АдресСайта, "\", "/");
		АдресСайта = СтрЗаменить(АдресСайта, " ", "");
		АдресСайта = СтрЗаменить(АдресСайта, "http://", "");
		ПозицияСлэша = Найти(АдресСайта, "/");
		Если ПозицияСлэша > 0 Тогда
			HTTPСервер 		 = Лев(АдресСайта, ПозицияСлэша - 1);	
			HTTPАдресСкрипта = Прав(АдресСайта, СтрДлина(АдресСайта) - ПозицияСлэша);
		Иначе	
			HTTPСервер 		 = АдресСайта;	
			HTTPАдресСкрипта = "";
		КонецЕсли;	
		ПозицияДвоеточия = Найти(HTTPСервер, ":");
		Если ПозицияДвоеточия > 0 Тогда
			HTTPСерверСПортом = HTTPСервер;
			HTTPСервер		  = Лев(HTTPСерверСПортом, ПозицияДвоеточия - 1);
			HTTPПортСтрока 	  = Прав(HTTPСерверСПортом, СтрДлина(HTTPСерверСПортом) - ПозицияДвоеточия);
		Иначе
			HTTPПортСтрока = "0";
		КонецЕсли;
		
		HTTPПорт = "";//ОбщегоНазначения.ПривестиСтрокуКЧислу(HTTPПортСтрока);
				
	КонецЕсли;
	
	СтруктураРезультата = СоздатьОбъект("СписокЗначений");
	СтруктураРезультата.Установить("HTTPСервер",HTTPСервер);
	СтруктураРезультата.Установить("HTTPПорт",HTTPПорт);
	СтруктураРезультата.Установить("HTTPАдресСкрипта",HTTPАдресСкрипта);
	СтруктураРезультата.Установить("HTTPАдресСайта",АдресСайта);
	
	//СтруктураРезультата.Вставить("HTTPСервер"	  , HTTPСервер); 
	//СтруктураРезультата.Вставить("HTTPПорт"		  , HTTPПорт);
	//СтруктураРезультата.Вставить("HTTPАдресСкрипта", HTTPАдресСкрипта);
	
	Возврат СтруктураРезультата;
	
КонецФункции


Функция ЗагрузитьВК(ВК)
	ПутьКОбработке = "";
	РасположениеФайла(ПутьКОбработке, "");
	Если ПустоеЗначение(ПутьКОбработке)=0 Тогда
		Если ЗагрузитьВнешнююКомпоненту(ПутьКОбработке + ВК) = 1 Тогда
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗагрузитьВнешнююКомпоненту(Путь + ВК) <> 1 Тогда
		Если ЗагрузитьВнешнююКомпоненту(КаталогИБ() + "ExtForms\" + ВК) <> 1 Тогда		
			Если ЗагрузитьВнешнююКомпоненту(КаталогПрограммы() + ВК) <> 1 Тогда
				Предупреждение("Компонента "+ВК+" не найдена!");
				Возврат 0;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат 1;
КонецФункции


Функция НайтиФайлы(КаталогОбмена, Маска="*.*")
	СЗ = СоздатьОбъект("СписокЗначений");
	
	имя = ФС.НайтиПервыйФайл(КаталогОбмена+Маска);
	Пока ПустоеЗначение(имя)=0 Цикл
		ПолноеИмя = КаталогОбмена+"\"+имя;
		Пока Найти(ПолноеИмя, "\\")>0 Цикл
			//ПолноеИмя = СтрЗаменить(ПолноеИмя, "\\","\");
		КонецЦикла;
		Если ФС.СуществуетФайл(ПолноеИмя)=1 Тогда
			СЗ.ДобавитьЗначение(ПолноеИмя, имя);
		КонецЕсли;
		имя = ФС.НайтиСледующийФайл();
	КонецЦикла;
	
	Возврат СЗ;
КонецФункции


Функция УдалитьДополнительныеРасширенияФайла(ИсходноеИмяФайла)

	ПозицияТочки 			  = Найти(ИсходноеИмяФайла, ".");
	ИмяФайла    			  = Лев(ИсходноеИмяФайла, ПозицияТочки - 1);
	ПраваяЧастьИсходногоИмени = Прав(ИсходноеИмяФайла, СтрДлина(ИсходноеИмяФайла) - ПозицияТочки);
	ПозицияТочки 			  = Найти(ПраваяЧастьИсходногоИмени, ".");
	Расширение 				  = ПраваяЧастьИсходногоИмени;
	Если ПозицияТочки > 0 Тогда
		Расширение = Лев(ПраваяЧастьИсходногоИмени, ПозицияТочки - 1);	
	КонецЕсли;	
	
	Возврат ИмяФайла + "." + Расширение;
	
КонецФункции	


Функция ПодготовитьИмяФайлаДляСервера(ФайлОбъект, КаталогОбмена)
	
	ПолноеИмяФайлаДляСервера = "";
	
	//Если Найти(ФайлОбъект, ".xml") > 0 Тогда
		ПолноеИмяФайлаДляСервера = ФайлОбъект;
		
		//%%%
		ПолноеИмяФайлаДляСервера = СтрЗаменить(ПолноеИмяФайлаДляСервера, КаталогОбмена, "");
	//Иначе	
	//	//у картинки надо оставить 2 папки и развернуть слэши
	//	ПолноеИмяФайлаДляСервера = ФайлОбъект;
	//	ПутьДляУдаления 		 = КаталогОбмена + "\";
	//	ПолноеИмяФайлаДляСервера = СтрЗаменить(ПолноеИмяФайлаДляСервера, ПутьДляУдаления, "");
	//	ПолноеИмяФайлаДляСервера = СтрЗаменить(ПолноеИмяФайлаДляСервера, "\", "/");
	//КонецЕсли;
	
	ПолноеИмяФайлаДляСервера = УдалитьДополнительныеРасширенияФайла(ПолноеИмяФайлаДляСервера);
	
	Возврат ПолноеИмяФайлаДляСервера;
	
КонецФункции	


Функция СуществуетФайл(Кат, ф)
	т = СтрЗаменить(ф, Кат, "");
	т = СтрЗаменить(т, ПодкаталогКартинок, "");
	т = СтрЗаменить(т, "\", "");
	т = СокрЛП(СтрЗаменить(т, ".", ""));
	
	Если ПустоеЗначение(т)=1 Тогда
		Возврат 0;
	КонецЕсли;
	Возврат 1;
КонецФункции


Функция ПолучитьКраткоеИмяФайла(ПолноеИмя)
	СЗ = Разложить(ПолноеИмя, "\");
	Попытка
		Возврат СЗ.ПолучитьЗначение(СЗ.РазмерСписка());
	Исключение
		Возврат "";
	КонецПопытки;
КонецФункции

Функция ЭтоКаталог(ИмяФайлаКаталога)
	атр = "";
	ФС.АтрибутыФайла(ИмяФайлаКаталога, "", атр);
	Если Сред(атр,4,1)="1" Тогда
		Возврат 1;
		Сообщить("это каталог");
	Иначе
		Возврат 0;
		Сообщить("это файл");
	КонецЕсли;
КонецФункции


Функция ПолучитьСписокФайловДляОтправки(КаталогОбмена, МассивПодкаталогов);
	
	СписокФайлов = СоздатьОбъект("СписокЗначений");
	Маска		 = "*.*";
	
	ВсеФайлыДляВыгрузки = НайтиФайлы(КаталогОбмена, "*.xml");
	
	Если МассивПодкаталогов <> Неопределено Тогда
		
		Для Н=1 По МассивПодкаталогов.РазмерСписка() Цикл
			
			Подкаталог = МассивПодкаталогов.ПолучитьЗначение(Н);
			
			ФайлыВПодкаталоге = НайтиФайлы(КаталогОбмена + "\" + Подкаталог, Маска);
			Для К=1 По ФайлыВПодкаталоге.РазмерСписка() Цикл
				
				//Если ТекФайл.ЭтоКаталог() Тогда
				//	
				//	ФайлыВДобавочномПодкаталоге = НайтиФайлы(ТекФайл.ПолноеИмя, Маска);
				//	Для Каждого ТекФайлВПодкаталоге Из ФайлыВДобавочномПодкаталоге Цикл
				//		
				//		Если НЕ ТекФайлВПодкаталоге.ЭтоКаталог() Тогда	
				//			ВсеФайлыДляВыгрузки.Добавить(ТекФайлВПодкаталоге);  								
				//		КонецЕсли;	
				//		
				//	КонецЦикла;	
				//	
				//Иначе	
					ВсеФайлыДляВыгрузки.ДобавитьЗначение(ФайлыВПодкаталоге.ПолучитьЗначение(К));  
				//КонецЕсли;	
				
			КонецЦикла;	
			
		КонецЦикла;			
				
	КонецЕсли;
	
	//Для Н=1 По СписокФайловКартинок.РазмерСписка() Цикл
	//	ТекФайл = СписокФайловКартинок.ПолучитьЗначение(Н);
	//	ВсеФайлыДляВыгрузки.ДобавитьЗначение(ТекФайл);  
	//КонецЦикла;	
	
	
	Для Н=1 По ВсеФайлыДляВыгрузки.РазмерСписка() Цикл
		ТекФайл = ВсеФайлыДляВыгрузки.ПолучитьЗначение(Н);
		Если ФС.СуществуетФайл(ТекФайл)=0 Тогда
			Продолжить;
		КонецЕсли;
		Если СуществуетФайл(КаталогОбмена, ТекФайл)=0 Тогда
			Продолжить;
		КонецЕсли;
		Если ЭтоКаталог(ТекФайл)=1 Тогда
			Продолжить;
		КонецЕсли;
		
		//Сообщить(ТекФайл);
		ПолноеИмяФайлаДляСервера = ПодготовитьИмяФайлаДляСервера(ТекФайл, КаталогОбмена);
		СписокФайлов.ДобавитьЗначение(ТекФайл, ПолноеИмяФайлаДляСервера);
		//Каждого ТекФайл Из ВсеФайлыДляВыгрузки цикл
		//Сообщить(ПолноеИмяФайлаДляСервера);
		//Если НЕ ТекФайл.ЭтоКаталог() Тогда
			//
			//СписокФайлов.Добавить(ТекФайл.ПолноеИмя, ПолноеИмяФайлаДляСервера);
		//КонецЕсли;	
		
	КонецЦикла;	
	
	//Для Н=1 По СписокФайловКартинок.РазмерСписка() Цикл
	//	ТекФайл = СписокФайловКартинок.ПолучитьЗначение(Н);
	//	КрИмя = ПолучитьКраткоеИмяФайла(ТекФайл);
	//	СписокФайлов.ДобавитьЗначение(ТекФайл, КрИмя);
	//	//ВсеФайлыДляВыгрузки.ДобавитьЗначение(ТекФайл);  
	//КонецЦикла;	
	
	Возврат СписокФайлов;
	
КонецФункции	


Процедура СообщитьРасширенноеОписаниеОтветаСервера(ОтветСервера)
	
	ТекстСообщения = "Ответ сервера:" + РазделительСтрок;
	
	Если СтрКоличествоСтрок(ОтветСервера) > 1 Тогда
		Для ТекСтрока = 2 по СтрКоличествоСтрок(ОтветСервера) Цикл
			ТекстСообщения = ТекстСообщения + СтрПолучитьСтроку(ОтветСервера, ТекСтрока) + РазделительСтрок;
		КонецЦикла;	
	КонецЕсли;
	
	Сообщить(ТекстСообщения);//, Истина, СтатусСообщения.Информация);	

КонецПроцедуры	


// Процедура выводит текст сообщения об ошибке обмена
// и текст "Обмен не выполнен."
//
// Параметры:
//  ТекстСообщения - строка, текст сообщения
//
Процедура СообщитьОбОшибкеОбмена(ТекстСообщения, ИнформацияОВыгрузке)
	
	ТекстСообщения = ТекстСообщения + РазделительСтрок + "Обмен не выполнен";
	Сообщить(ТекстСообщения, "!!!");//ИнформацияОВыгрузке, СтатусСообщения.Важное);	
	
КонецПроцедуры	


Функция ПолучитьИмяФайла(ПолнИмя, ИмяКаталога="")
	СЗ = Разложить(ПолнИмя,"\");
	ИмяФ = СЗ.ПолучитьЗначение(СЗ.РазмерСписка());
	ИмяКаталога = СтрЗаменить(ПолнИмя, ИмяФ,"");
	
	Возврат ИмяФ;
КонецФункции


Функция РазделитьФайл2(ПолнИмя, ОграничениеРазмера)
	//ЗагрузитьВК("KipAddon1c.dll");
	//
	//т = СоздатьОбъект("AddIn.KipAddon");
	сп = ДопФункции.РазделитьФайл(ПолнИмя, ОграничениеРазмера);
	//Сообщить(сп);
	
	ИмяКаталога = "";
	ИмяФ = ПолучитьИмяФайла(ПолнИмя, ИмяКаталога);
	СЗ_Части = СоздатьОбъект("СписокЗначений");

	Мас = Разложить(сп, ";");
	Для Н=1 По Мас.РазмерСписка() Цикл
		ПолнНовоеИмя = ИмяКаталога+Мас.ПолучитьЗначение(Н);;
		СЗ_Части.ДобавитьЗначение(ПолнНовоеИмя, Мас.ПолучитьЗначение(Н));
	КонецЦикла;
	
	Возврат СЗ_Части;
КонецФункции


Функция РазделитьФайл(ПолнИмя, ОграничениеРазмера)
	т = СоздатьОбъект("Текст");
	т.Открыть(ПолнИмя);
	тмп="";
	Для Н=1 По т.КоличествоСтрок() Цикл
		тмп = тмп + т.ПолучитьСтроку(Н)+РазделительСтрок;
	КонецЦикла;
	т=тмп;
	
	СЗ_Части = СоздатьОбъект("СписокЗначений");
	
	ИмяКаталога = "";
	ИмяФ = ПолучитьИмяФайла(ПолнИмя, ИмяКаталога);
	
	НомерЧасти=1;
	Пока 1=1 Цикл
		тмп = Лев(т, ОграничениеРазмера);
		Если СтрДлина(тмп)=0 Тогда
			Прервать;
		КонецЕсли;
		
		НовоеИмя = ИмяФ+"."+НомерЧасти;
		ПолнНовоеИмя = ИмяКаталога+НовоеИмя;
		т2 = СоздатьОбъект("Текст");
		т2.ДобавитьСтроку(тмп);
		т2.Записать(ПолнНовоеИмя);
		
		СЗ_Части.ДобавитьЗначение(ПолнНовоеИмя, НовоеИмя);
		
		НомерЧасти = НомерЧасти + 1;
		т = Сред(т, ОграничениеРазмера+1);
	КонецЦикла;
	
	Возврат СЗ_Части;
КонецФункции


Функция РазделитьФайлыНаФрагменты(СписокФайлов, ОграничениеРазмераФрагмента)
	
	ОграничениеРазмера = ОграничениеРазмераФрагмента;//ОграничениеРазмераФрагментаФайлаОбмена*1024;//переведем в байты
	
	НовыйСписокФайлов = СоздатьОбъект("СписокЗначений");
	Для Н=1 По СписокФайлов.РазмерСписка() цикл
		
		ТекФайл = "";
		полнИмя = СписокФайлов.ПолучитьЗначение(Н, ТекФайл);
		РазмерФайла = 0;
		ФС.АтрибутыФайла(полнИмя, РазмерФайла);
		
		//СписокФайлов.ДобавитьЗначение(ТекФайл, ПолноеИмяФайлаДляСервера);
		
		Если РазмерФайла > ОграничениеРазмераФрагмента Тогда
			МассивФрагментов = РазделитьФайл2(полнИмя, ОграничениеРазмера);
			Для К=1 По МассивФрагментов.РазмерСписка() Цикл
				ИмяФ = "";
				полнИмя = МассивФрагментов.ПолучитьЗначение(К, ИмяФ);
				НовыйСписокФайлов.ДобавитьЗначение(полнИмя, ИмяФ);
			КонецЦикла;	
			//УдалитьФайлы(ФайлНаДиске.ПолноеИмя);
		Иначе
			НовыйСписокФайлов.ДобавитьЗначение(полнИмя, ТекФайл);	
		КонецЕсли;	
		
	КонецЦикла;
	Возврат НовыйСписокФайлов;
	
КонецФункции


Функция ПерекодироватьВУТФ8(СписокФайлов)
	Для Н=1 по СписокФайлов.РазмерСписка() Цикл //Каждого ТекФайл Из СписокФайловДляОтправки цикл
		полнИмя = СписокФайлов.ПолучитьЗначение(Н);
		ДопФункции.КодироватьUTF8(полнИмя);
	КонецЦикла;
КонецФункции


Функция ПодготовитьZIPАрхивы11(СписокФайлов, КаталогОбмена)
	
	//Если ЗагрузитьВК("KipAddon1c.dll")=Ложь Тогда
	//	Возврат СписокФайлов;
	//КонецЕсли;
	имяАрхива = ""+ТекущаяДата()+ТекущееВремя();
	имяАрхива = СтрЗаменить(имяАрхива,".","");
	имяАрхива = СтрЗаменить(имяАрхива,":","")+".zip";
	//полнИмяАрхив = "";//КаталогОбмена + "1.zip";
	полнИмяАрхив = КаталогОбмена + имяАрхива;
	
	//т = СоздатьОбъект("AddIn.KipAddon");
	НовыйСписокФайлов = СоздатьОбъект("СписокЗначений");
	//Для Н=1 по СписокФайлов.РазмерСписка() Цикл //Каждого ТекФайл Из СписокФайловДляОтправки цикл
	//	
	//	ТекФайл = "";
	//	полнИмя = СписокФайлов.ПолучитьЗначение(Н, ТекФайл);
	//	
	//	полнИмяАрхив = ДопФункции.СоздатьZIPАрхив(полнИмя,полнИмяАрхив,9);
	//	
	//КонецЦикла;
	полнИмяАрхив = ДопФункции.СоздатьZIPАрхив(КаталогОбмена + "*.*",полнИмяАрхив,9);
	//Предупреждение("Подготовка zip-архива...", 3);
	
	МилисекундыЗадержки=_GetPerformanceCounter()+10;//подождем 10 секунд
	Пока _GetPerformanceCounter()<=МилисекундыЗадержки Цикл
	КонецЦИкла;
	
	НовыйСписокФайлов.ДобавитьЗначение(полнИмяАрхив, ДопФункции.ИзвлечьИмяФайла(полнИмяАрхив));
	

	//ПолноеИмяФайлаАрхива = ПолучитьИмяВременногоФайла("zip");
	//ЗаписьАрхива   	     = Новый ЗаписьZipФайла(ПолноеИмяФайлаАрхива);
	//
	//СоздатьКаталог(КаталогОбмена);
	//
	//ЗаписьАрхива.Добавить(КаталогОбмена + "\*.*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	//ЗаписьАрхива.Записать();
	//
	//НовыйСписокФайлов = Новый СписокЗначений;
	//НовыйСписокФайлов.Добавить(ПолноеИмяФайлаАрхива, ПолучитьИмяФайла(ПолноеИмяФайлаАрхива));
	
	Возврат НовыйСписокФайлов;
	
КонецФункции
                 
функция ПодготовитьZIPАрхивы(СписокФайлов)
	НовыйСписокФайлов = СоздатьОбъект("СписокЗначений"); 
	
	полнИмяАрхив = КаталогВыгрузки + "\import1c.zip";
	//полнИмяАрхив = СтрЗаменить(полнИмяАрхив, "\\", "\");
	
	полнИмяАрхив = ДопФункции.СоздатьZIPАрхив(КаталогВыгрузки, полнИмяАрхив); 
	
	Если ПустоеЗначение(полнИмяАрхив)=0 Тогда
		НовыйСписокФайлов.ДобавитьЗначение(полнИмяАрхив, "import1c.zip");
	КонецЕсли;
	
	Возврат НовыйСписокФайлов;
конецфункции


//--------------------------------------------------------------------------------------------------------------
Функция ПодготовитьZIPАрхивы_СТАР(СписокФайлов)
	НовыйСписокФайлов = СоздатьОбъект("СписокЗначений"); 
	
	
	тФайлы = "";
	
	ВсегоФайлов = СписокФайлов.РазмерСписка();
	Для Н=1 по ВсегоФайлов Цикл 
		
		ТекФайл = "";
		полнИмя = СписокФайлов.ПолучитьЗначение(Н, ТекФайл);
		
		Если ПустаяСтрока(тФайлы)=0 Тогда
			тФайлы = тФайлы + "{###}";//РазделительСтрок;
		КонецЕсли;
		тФайлы = тФайлы + полнИмя;
		
		полнИмяАрхив = КаталогВременныхФайлов() + "\import1c.zip";
		//полнИмяАрхив = СтрЗаменить(полнИмяАрхив, "\\", "\");
		
		полнИмяАрхив = ДопФункции.СоздатьZIPАрхив(тФайлы, полнИмяАрхив);
		
		Если ПустоеЗначение(полнИмяАрхив)=0 Тогда
			НовыйСписокФайлов.ДобавитьЗначение(полнИмяАрхив, "import1c.zip");
		КонецЕсли;
		//пКаталог = ДопФункции.ИзвлечьПутьКФайлу(полнИмя);
		//
		//Если Прав(ТекФайл, 4)=".xml" Тогда
		//	НовоеИмя = СтрЗаменить(ТекФайл, ".xml","") + ".zip";
		//Иначе
		//	НовыйСписокФайлов.ДобавитьЗначение(полнИмя, ТекФайл);
		//КонецЕсли;
		//
		////Если ТекФайл="import.xml" Тогда
		////	НовоеИмя =  "import.zip";
		////ИначеЕсли ТекФайл="offers.xml" Тогда
		////	НовоеИмя = "offers.zip";
		////Иначе
		////	НовыйСписокФайлов.ДобавитьЗначение(полнИмя, ТекФайл);
		////КонецЕсли;
		//
		//полнИмяАрхив = пКаталог + "\" + НовоеИмя;
		//полнИмяАрхив = СтрЗаменить(полнИмяАрхив, "\\", "\");
		//
		//полнИмяАрхив = ДопФункции.СоздатьZIPАрхив(полнИмя, полнИмяАрхив);
		//
		//Если ПустоеЗначение(полнИмяАрхив)=0 Тогда
		//	НовыйСписокФайлов.ДобавитьЗначение(полнИмяАрхив, НовоеИмя);
		//КонецЕсли;
	КонецЦикла;
	
	Если ВсегоФайлов>0 Тогда
		полнИмяАрхив = КаталогВременныхФайлов() + "\import1c.zip";
		//полнИмяАрхив = СтрЗаменить(полнИмяАрхив, "\\", "\");
		
		полнИмяАрхив = ДопФункции.СоздатьZIPАрхив(тФайлы, полнИмяАрхив);
		
		Если ПустоеЗначение(полнИмяАрхив)=0 Тогда
			НовыйСписокФайлов.ДобавитьЗначение(полнИмяАрхив, "import1c.zip");
		КонецЕсли;
	КонецЕсли;
	
	
	//ПолноеИмяФайлаАрхива = ПолучитьИмяВременногоФайла("zip");
	//ЗаписьАрхива		 = Новый ЗаписьZipФайла(ПолноеИмяФайлаАрхива);
	//
	//СоздатьКаталог(мКаталогНаДиске);
	//
	//ЗаписьАрхива.Добавить(мКаталогНаДиске + "\*.*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	//ЗаписьАрхива.Записать();
	//
	//НовыйСписокФайлов = Новый СписокЗначений;
	//НовыйСписокФайлов.Добавить(ПолноеИмяФайлаАрхива, ПолучитьИмяФайла(ПолноеИмяФайлаАрхива));
	
	Возврат НовыйСписокФайлов;
	
КонецФункции



Функция HTTPВыгрузитьНаСервер_ОтправитьФайлы(СписокФайловДляОтправки, СтруктураПараметровСайта, АдресДляРаботы, ЗаголовкиЗапросов)
	ВсегоФайлов = СписокФайловДляОтправки.РазмерСписка();
	
	СписокФайловДляПовторнойОтправки = СоздатьОбъект("СписокЗначений");
	
	Для Н=1 по ВсегоФайлов Цикл //Каждого ТекФайл Из СписокФайловДляОтправки цикл
		
		ТекФайл = "";
		полнИмя = СписокФайловДляОтправки.ПолучитьЗначение(Н, ТекФайл);
		
		Сообщить(полнИмя);
		//Сообщить("-- "+ТекФайл);
		
		Состояние("Идет отправка файла на сервер (" + Н + " из " + ВсегоФайлов + "): " + ТекФайл);
		
		Запрос = АдресДляРаботы + ПараметрЗапросаHTTP_ПередачаФайла+ТекФайл;
		//Сообщить(Запрос);
		//ОтветСервера = HTTPОтправитьФайлНаСервер(полнИмя, Соединение, Запрос, ЗаголовкиЗапросов);
		ОтветСервера = ОбработкаОбменССайтом.HTTPОтправитьФайлНаСервер(СтруктураПараметровСайта, Запрос, полнИмя, ЗаголовкиЗапросов);
		
		//т = СоздатьОбъект("Текст");
		//т.ДобавитьСтроку(СокрЛП(ОтветСервера));
		//т.Показать();
		//Продолжить;
		//Если ZIPФайлыРазрешены Тогда
		//	Попытка
		//		УдалитьФайлы(ТекФайл.Значение);
		//	Исключение
		//	КонецПопытки;	
		//КонецЕсли;	
		
		Если ОтветСервера = Неопределено Тогда
			Сообщить("Не удалось получить ответ сервера. Файл не отправлен (" + ТекФайл + ").", "!!!");
			Возврат Ложь;
		КонецЕсли;
					
		//СостояниеОбмена = НРег(СтрПолучитьСтроку(ОтветСервера,1));
		СостояниеОбмена = Нрег(ОтветСервера); //НРег(лев(ОтветСервера,6));
		
		Если Найти(СостояниеОбмена, ОтветСервера_АварийноеЗавершениеТекущейОперации)>0 Тогда
			
			Сообщить("Произошла ошибка на стороне сервера. Файл не отправлен (" + ТекФайл + ").", "!!!");
			СообщитьРасширенноеОписаниеОтветаСервера(ОтветСервера);
			Возврат Ложь;
			
		ИначеЕсли Найти(СостояниеОбмена, ОтветСервера_УспешноеЗавершениеТекущейОперации)>0 Тогда
			
			Если СтрКоличествоСтрок(ОтветСервера) > 1 Тогда
				Сообщить("Получен расширенный статус успешного завершения сеанса");//, Истина, СтатусСообщения.Информация);
				СообщитьРасширенноеОписаниеОтветаСервера(ОтветСервера);	
			КонецЕсли;
			
		Иначе
			
			Сообщить("Произошла ошибка на стороне сервера. Не получен статус завершения операции. Файл не отправлен (" + ТекФайл + ").", "!!!");
			СообщитьРасширенноеОписаниеОтветаСервера(ОтветСервера);
			//Возврат Ложь;
			
			СписокФайловДляПовторнойОтправки.ДобавитьЗначение(полнИмя, ТекФайл);
			
		КонецЕсли;		
		
		//Если ПаузаМеждуОтправкамиЧастей>0 Тогда
		//	Предупреждение("Пауза...",ПаузаМеждуОтправкамиЧастей);
		//КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокФайловДляПовторнойОтправки;
	
КонецФункции

Функция HTTPВыгрузитьНаСервер(СтруктураПараметровСайта, 
	КаталогОбмена, 
	МассивПодкаталогов = "", 
	ОжидатьЗавершенияИмпортаФайловСервером = 0,
	ТипСоединения = "catalog")
	
	Успешно    = Истина;
	
	ОтветСервера = "";
	Соединение = "";
	
	АдресДляРаботы = АдресСкриптаСайта + "?type=" + ТипСоединения; 
	//АдресДляРаботы = СтруктураПараметровСайта.Получить("HTTPАдресСайта") + "?type=" + ТипСоединения; 
		
	//Сообщить("Авторизация");
	СтрокаСообщенияПользователю = "";
	Успешно = ОбработкаОбменССайтом.HTTPВыполнитьАвторизациюДляСоединения(СтруктураПараметровСайта, ОтветСервера, СтрокаСообщенияПользователю, ТипСоединения);
	
	Если ПустаяСтрока(СтрокаСообщенияПользователю)=0 Тогда
		Сообщить(СтрокаСообщенияПользователю, "!!!");						
	КонецЕсли;
	
	
	Если Успешно = Ложь Тогда
		Сообщить("Не удалось подключится к серверу.");
		Возврат Ложь;
	КонецЕсли;	
		
	КукиИмя      	  = СтрПолучитьСтроку(ОтветСервера, 2);
	КукиЗначение 	  = СтрПолучитьСтроку(ОтветСервера, 3);
	ЗаголовкиЗапросов = "Cookie: " + КукиИмя + "=" + КукиЗначение;

	Состояние("Запрос параметров обмена...");
	//Сообщить("Инициализация");
	//ОтветСервера = HTTPПолучитьДанныеССервера(Соединение, АдресДляРаботы + ПараметрЗапросаHTTP_Инициализация, ЗаголовкиЗапросов);
	СтрокаСообщенияПользователю = "";
	Запрос = АдресДляРаботы + ПараметрЗапросаHTTP_Инициализация;
	ОтветСервера = ОбработкаОбменССайтом.HTTPПолучитьДанныеССервера(СтруктураПараметровСайта, Запрос, ЗаголовкиЗапросов, СтрокаСообщенияПользователю);
	
	Если ПустаяСтрока(СтрокаСообщенияПользователю)=0 Тогда
		Сообщить(СтрокаСообщенияПользователю, "!!!");						
	КонецЕсли;
	Если ПустаяСтрока(ОтветСервера) = 1 Тогда 
		Сообщить("Не удалось получить параметры обмена с сервера.", "!!!");
		Возврат Ложь;
	КонецЕсли;
		
	ZIPФайлыРазрешены = Ложь;
	ОграничениеРазмераФрагментаФайлаОбмена = 0;		
	ZIPФайлыРазрешены = Найти(НРег(Ответсервера), ОтветСервера_ZIPРазрешен);///?(НРег(СтрПолучитьСтроку(ОтветСервера,1)) = ОтветСервера_ZIPРазрешен, Истина, Ложь);
	
	Попытка 
		ОграничениеРазмераФрагментаФайлаОбмена = Число(СтрЗаменить(НРег(СтрПолучитьСтроку(ОтветСервера,2)), ОтветСервера_ОграничениеРазмераФрагментаФайлаОбмена, ""));
	Исключение
		Сообщить("Ошибка при получении параметра ""Ограничение размера файла""");
		ОграничениеРазмераФрагментаФайлаОбмена = -1;
	КонецПопытки;	
	
	//Сообщить("=======================");
	//Сообщить(ОтветСервера);
	//Сообщить("=======================");
	//Сообщить(ОтветСервера_ОграничениеРазмераФрагментаФайлаОбмена);
	//Сообщить("=======================");
	
			
	МассивИсходныхCMLФайлов = НайтиФайлы(КаталогОбмена, "*.xml");
	СписокФайловДляОтправки = ПолучитьСписокФайловДляОтправки(КаталогОбмена, МассивПодкаталогов);
		
	//ПерекодироватьВУТФ8(СписокФайловДляОтправки);

	Если ZIPФайлыРазрешены=Истина Тогда
		Состояние("Подготовка ZIP-архива...");
		СписокФайловДляОтправки = ПодготовитьZIPАрхивы(СписокФайловДляОтправки);
	Иначе
		//Сообщить("ZIP-файлы не разрешены");
	КонецЕсли;	
	
	//Если ОграничениеРазмераФрагментаФайлаОбмена > 0 Тогда
	//	СписокФайловДляОтправки = РазделитьФайлыНаФрагменты(СписокФайловДляОтправки, ОграничениеРазмераФрагментаФайлаОбмена);
	//КонецЕсли;	
	
	СписокФайловДляПовторнойОтправки = HTTPВыгрузитьНаСервер_ОтправитьФайлы(СписокФайловДляОтправки, СтруктураПараметровСайта, АдресДляРаботы, ЗаголовкиЗапросов);
	Попытка
		Если СписокФайловДляПовторнойОтправки.РазмерСписка()>0 Тогда
			ОбработкаОбменССайтом.УстановитьНачальныеНастройки(СтруктураПараметровСайта, КаталогНоменклатуры.Комментарий);
			Сообщить("Повторная отправка файлов:");
			HTTPВыгрузитьНаСервер_ОтправитьФайлы(СписокФайловДляПовторнойОтправки, СтруктураПараметровСайта, АдресДляРаботы, ЗаголовкиЗапросов);
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
	//////ВсегоФайлов = СписокФайловДляОтправки.РазмерСписка();
	//////
	//////Для Н=1 по СписокФайловДляОтправки.РазмерСписка() Цикл //Каждого ТекФайл Из СписокФайловДляОтправки цикл
	//////	
	//////	ТекФайл = "";
	//////	полнИмя = СписокФайловДляОтправки.ПолучитьЗначение(Н, ТекФайл);
	//////	
	//////	Сообщить(полнИмя);
	//////	//Сообщить("-- "+ТекФайл);
	//////	
	//////	Состояние("Идет отправка файла на сервер (" + Н + " из " + ВсегоФайлов + "): " + ТекФайл);
	//////	
	//////	Запрос = АдресДляРаботы + ПараметрЗапросаHTTP_ПередачаФайла+ТекФайл;
	//////	//Сообщить(Запрос);
	//////	//ОтветСервера = HTTPОтправитьФайлНаСервер(полнИмя, Соединение, Запрос, ЗаголовкиЗапросов);
	//////	ОтветСервера = ОбработкаОбменССайтом.HTTPОтправитьФайлНаСервер(СтруктураПараметровСайта, Запрос, полнИмя, ЗаголовкиЗапросов);
	//////	
	//////	//т = СоздатьОбъект("Текст");
	//////	//т.ДобавитьСтроку(СокрЛП(ОтветСервера));
	//////	//т.Показать();
	//////	//Продолжить;
	//////	//Если ZIPФайлыРазрешены Тогда
	//////	//	Попытка
	//////	//		УдалитьФайлы(ТекФайл.Значение);
	//////	//	Исключение
	//////	//	КонецПопытки;	
	//////	//КонецЕсли;	
	//////	
	//////	Если ОтветСервера = Неопределено Тогда
	//////		Сообщить("Не удалось получить ответ сервера. Файл не отправлен (" + ТекФайл + ").", "!!!");
	//////		Возврат Ложь;
	//////	КонецЕсли;
	//////				
	//////	//СостояниеОбмена = НРег(СтрПолучитьСтроку(ОтветСервера,1));
	//////	СостояниеОбмена = Нрег(ОтветСервера); //НРег(лев(ОтветСервера,6));
	//////	
	//////	Если Найти(СостояниеОбмена, ОтветСервера_АварийноеЗавершениеТекущейОперации)>0 Тогда
	//////		
	//////		Сообщить("Произошла ошибка на стороне сервера. Файл не отправлен (" + ТекФайл + ").", "!!!");
	//////		СообщитьРасширенноеОписаниеОтветаСервера(ОтветСервера);
	//////		Возврат Ложь;
	//////		
	//////	ИначеЕсли Найти(СостояниеОбмена, ОтветСервера_УспешноеЗавершениеТекущейОперации)>0 Тогда
	//////		
	//////		Если СтрКоличествоСтрок(ОтветСервера) > 1 Тогда
	//////			Сообщить("Получен расширенный статус успешного завершения сеанса");//, Истина, СтатусСообщения.Информация);
	//////			СообщитьРасширенноеОписаниеОтветаСервера(ОтветСервера);	
	//////		КонецЕсли;
	//////		
	//////	Иначе
	//////		
	//////		Сообщить("Произошла ошибка на стороне сервера. Не получен статус завершения операции. Файл не отправлен (" + ТекФайл + ").", "!!!");
	//////		СообщитьРасширенноеОписаниеОтветаСервера(ОтветСервера);
	//////		Возврат Ложь;
	//////		
	//////	КонецЕсли;		
	//////	
	//////	//Если ПаузаМеждуОтправкамиЧастей>0 Тогда
	//////	//	Предупреждение("Пауза...",ПаузаМеждуОтправкамиЧастей);
	//////	//КонецЕсли;
	//////	
	//////КонецЦикла;
	
	
	//Возврат Ложь;
	
	
	ИмпортУспешноЗавершен = Ложь;
	
	Если ОжидатьЗавершенияИмпортаФайловСервером = Истина Тогда
							
		Для Н=1 По МассивИсходныхCMLФайлов.РазмерСписка() Цикл
			//Каждого ТекФайл Из МассивИсходныхCMLФайлов Цикл
			
			ИмяФайла = "";
			ТекФайл = МассивИсходныхCMLФайлов.ПолучитьЗначение(Н, ИмяФайла);
			Сообщить("Обработка: "+ИмяФайла);
			
			ИмпортПродолжается = Истина;
			ТекущееСостояние = "";
			ПроведенныеСостояния = "";//список проведенных состояний
		
			Пока ИмпортПродолжается = Истина Цикл
				
				ИмпортПродолжается = Ложь;
				
				Состояние("Ожидание окончания загрузки данных сервером: " + ТекущееСостояние);
				//Сообщить("Ожидание окончания загрузки данных сервером: " + ТекущееСостояние);
				ТекущееСостояние = "";
				
				//ОтветСервера = HTTPПолучитьДанныеССервера(Соединение, АдресДляРаботы + ПараметрЗапросаHTTP_ИмпортФайлаСервером + ТекФайл.Имя, ЗаголовкиЗапросов);
				//ОтветСервера = HTTPПолучитьДанныеССервера(Соединение, АдресДляРаботы + ПараметрЗапросаHTTP_ИмпортФайлаСервером + ИмяФайла, ЗаголовкиЗапросов);
				Запрос = АдресДляРаботы + ПараметрЗапросаHTTP_ИмпортФайлаСервером + ИмяФайла;
				ОтветСервера = ОбработкаОбменССайтом.HTTPПолучитьДанныеССервера(СтруктураПараметровСайта, Запрос, ЗаголовкиЗапросов, "");
				
				//Сообщить(ОтветСервера);
				
				Если ОтветСервера = Неопределено Тогда 
					
					Успешно = Ложь;
					Сообщить("Не удалось получить текущее состояние процесса обмена. Данные обмена отправлены, но не загружены.", "!!!");
					
				ИначеЕсли СтрКоличествоСтрок(ОтветСервера) = 0 Тогда
					Успешно = Ложь;
					Сообщить("Не удалось прочитать данные о текущем состоянии процесса обмена. Данные обмена отправлены, но не загружены.", "!!!");	
				Иначе
					
					СостояниеОбмена = Нрег(ОтветСервера); //НРег(лев(ОтветСервера,6));
					
					Если Найти(СостояниеОбмена, ОтветСервера_АварийноеЗавершениеТекущейОперации)<>0 Тогда
						Успешно = Ложь;
						СообщитьОбОшибкеОбмена("Произошла ошибка на стороне сервера.", Истина);
						СообщитьРасширенноеОписаниеОтветаСервера(ОтветСервера);
					ИначеЕсли Найти(СостояниеОбмена, ОтветСервера_УспешноеЗавершениеТекущейОперации)<>0 Тогда
						ИмпортУспешноЗавершен = Истина;
					ИначеЕсли Найти(СостояниеОбмена, ОтветСервера_ВыполнениеТекущейОперации)<>0 Тогда
						ТекущееСостояние = ТекущееСостояние + СтрПолучитьСтроку(ОтветСервера, 2);
						ИмпортПродолжается = Истина;
					Иначе
						Успешно = Ложь;
						СообщитьОбОшибкеОбмена("Произошла ошибка на стороне сервера. Получен неизвестный статус импорта.", Истина);
						СообщитьРасширенноеОписаниеОтветаСервера(ОтветСервера);
					КонецЕсли;
					
				КонецЕсли;
				
				//проверка на зацикливание
				Если ИмпортПродолжается=Истина Тогда
					тмпТекущееСостояние = ","+ СокрЛП(ТекущееСостояние) +",";
					Если Найти(ПроведенныеСостояния, тмпТекущееСостояние)>0 Тогда
						ИмпортПродолжается = Ложь;
						ИмпортУспешноЗавершен = Истина;
					Иначе
						ПроведенныеСостояния = ПроведенныеСостояния + тмпТекущееСостояние;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;	//Импорт
			
			Если ИмпортУспешноЗавершен = Ложь Тогда
				Прервать;
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;								
	
	Возврат Успешно;
	
КонецФункции	


// КОД ФУНКЦИИ ИЗМЕНЯТЬ НЕ РЕКОМЕНДУЕТСЯ - ЭТО МОЖЕТ ПРИВЕСТИ К НЕРАБОТОСПОСОБНОСТИ ОБРАБОТКИ
Функция ПолучитьСтруктуруПараметровДляСоединения(Знач НачалоАдресаСкрипта = "") Экспорт
	СтруктураАдреса = РазобратьАдресСайта(НачалоАдресаСкрипта);
	
	т = "";
	т = т + РазделительСтрок + "[user]="+Пользователь;
	т = т + РазделительСтрок + "[password]="+Пароль;
	т = т + РазделительСтрок + "[http_server]="+СтруктураАдреса.Получить("HTTPСервер");
	т = т + РазделительСтрок + "[http_port]="+СтруктураАдреса.Получить("HTTPПорт");
	т = т + РазделительСтрок + "[http_adres_script]="+СтруктураАдреса.Получить("HTTPАдресСкрипта");
	т = т + РазделительСтрок + "[http_adres_site]="+АдресСкриптаСайта;
	т = т + РазделительСтрок + "[proxy_server]="+"";
	т = т + РазделительСтрок + "[proxy_port]="+"";
	т = т + РазделительСтрок + "[proxy_user]="+"";
	т = т + РазделительСтрок + "[proxy_password]="+"";
	т = т + РазделительСтрок + "[proxy_enable]="+"0";
	
	
	Возврат т;
	

	СтруктураПараметровСайта = СоздатьОбъект("СписокЗначений");
	СтруктураПараметровСайта.Установить("ИмяПользователя", Пользователь);
	СтруктураПараметровСайта.Установить("Пароль", Пароль);

	
	HTTPОбменПорт = СтруктураАдреса.Получить("HTTPПорт");
	HTTPОбменСервер = СтруктураАдреса.Получить("HTTPСервер");
	НачалоАдресаСкрипта = СтруктураАдреса.Получить("HTTPАдресСкрипта");
	HTTPАдресСайта = СтруктураАдреса.Получить("HTTPАдресСайта");
	
	СтруктураПараметровСайта.Установить("АдресСкрипта", НачалоАдресаСкрипта);
	СтруктураПараметровСайта.Установить("Сервер"		, HTTPОбменСервер);
	СтруктураПараметровСайта.Установить("Порт"		, HTTPОбменПорт);
	СтруктураПараметровСайта.Установить("HTTPАдресСайта"		, HTTPАдресСайта);
	
	//СтруктураПараметровСайта.Установить("ПроксиСервер"		 , Объект.HTTPОбменПроксиСервер);
	//СтруктураПараметровСайта.Установить("ПроксиПорт"		     , Объект.HTTPОбменПроксиПорт);
	СтруктураПараметровСайта.Установить("ПроксиИмяПользователя", ПользовательПрокси);
	СтруктураПараметровСайта.Установить("ПроксиПароль"		 , ПарольПрокси);
	СтруктураПараметровСайта.Установить("ПроксиИспользование"  , флИспользоватьПрокси);	
	
	Возврат СтруктураПараметровСайта;
		
КонецФункции


//=======================================================================================
Функция ВыгрузитьКаталогПредложенияНаСайт(КаталогНаДиске)
	
	СтруктураПараметровСайта = ПолучитьСтруктуруПараметровДляСоединения(АдресСкриптаСайта);
	ОбработкаОбменССайтом.УстановитьНачальныеНастройки(СтруктураПараметровСайта, КаталогНоменклатуры.Комментарий);
		
	МассивПодкаталогов = СоздатьОбъект("СписокЗначений");
	Если ВыгружатьКартинки=1 Тогда
		МассивПодкаталогов.ДобавитьЗначение(ПодкаталогКартинок);
	КонецЕсли;	
	
	Успешно = HTTPВыгрузитьНаСервер(СтруктураПараметровСайта, КаталогНаДиске, МассивПодкаталогов, Истина, "catalog");
		
	//Попытка
	//	УдалитьФайлы(КаталогНаДиске, "*.*");
	//Исключение
	//	СообщитьОбИсключительнойОшибке(Истина, );
	//КонецПопытки;
	
	//ОбработкаОбменССайтом.ОчиститьПамять();
	
	Возврат Успешно;
	
КонецФункции	


//=======================================================================================
Функция ВыгрузитьТовары(СтруктураИзменений="")
	Если ОпределитьМожноВыгрузитьТовары()<>1 Тогда
		
		Сообщить("Выгрузка товаров не произведена.");
		Возврат 1;
		
	КонецЕсли;
	
	//HTTPОбменАдресСкрипта = НачалоАдресаСкрипта;
	
	Если ПустаяСтрока(КаталогВыгрузки)=1 Тогда
		КаталогВыгрузки = КаталогВременныхФайлов();
	Иначе
	КонецЕсли;
	
	//%%%
	Попытка
		Если ФС.СуществуетФайл(КаталогВыгрузки)=0 Тогда
			ФС.СоздатьКаталог(КаталогВыгрузки);
		КонецЕсли;
	Исключение
		КаталогВыгрузки = КаталогВременныхФайлов();
	КонецПопытки;
	
	ПоследнийСимвол = Сред(КаталогВыгрузки, СтрДлина(КаталогВыгрузки), 1);
	Если ПоследнийСимвол <> "\" Тогда
		КаталогВыгрузки = КаталогВыгрузки + "\";			
	КонецЕсли;
	
	КаталогВыгрузкиЗащищенный = КаталогВыгрузки + ПодкаталогБезопасностиКаталогаВыгрузки;
	
	СтруктураРезультата = ВыгрузитьТоварыВКаталогНаДиске(СтруктураИзменений, КаталогВыгрузкиЗащищенный);
	
	
	ВыгруженоОбъектов = СтруктураРезультата.Получить("ВыгруженоТоваров")
						  + СтруктураРезультата.Получить("ВыгруженоКартинок")
						  + СтруктураРезультата.Получить("ВыгруженоПредложений");
						  
	Если ВыгруженоОбъектов > 0 Тогда					  
						  
		СообщениеПользователю = "Выгружено товаров: " + СтруктураРезультата.Получить("ВыгруженоТоваров");
		
		Если ВыгружатьКартинки=1 Тогда
			СообщениеПользователю = СообщениеПользователю + РазделительСтрок + "Выгружено картинок: " + СтруктураРезультата.Получить("ВыгруженоКартинок");
		КонецЕсли;
		
	Иначе		
		
		СообщениеПользователю = "Выгрузка товаров не произведена.";	
		
	КонецЕсли;
	
	Сообщить(СообщениеПользователю);
	
	Успешно = 1;				  
	
	Если (ВыгружатьНаСайт=1) И (ВыгруженоОбъектов > 0) Тогда
		
		Успешно = ВыгрузитьКаталогПредложенияНаСайт(КаталогВыгрузкиЗащищенный);			
				
	КонецЕсли;
	
	Если Успешно<>0 Тогда
		
		
	Иначе
		
		Сообщить("Выгрузка товаров завершена с ошибками!!!");
		
	КонецЕсли;
	
	Возврат Успешно;
КонецФункции


Функция ВыгрузитьКлиентовИЦены()
	
	
	глУдалениеВременнойТаблицыSQL("#Товары");
	глУдалениеВременнойТаблицыSQL("#КлиентыТоварыСкидки");
	глУдалениеВременнойТаблицыSQL("#КлиентыСкидки");
	глУдалениеВременнойТаблицыSQL("#КлиентыСпецЦены");
	
	ТекстЗапроса = "SELECT  Номенклатура.ID Товар
	|						, $Цены.ЗапретСкидки ЦеныЗапретСкидки
	|						, COALESCE(СпрВ.DESCR,'EUR') Валюта
	|						, $ПоследнееЗначение.Цены.Цена(Цены.ID, :ВыбДата) Цена
	|				INTO #Товары
	|			    FROM $Справочник.Номенклатура AS Номенклатура With (NOLOCK) 
	|				INNER JOIN $Справочник.Цены AS Цены With (NOLOCK) ON Номенклатура.ID = Цены.PARENTEXT AND (Цены.ISMARK = 0)
	|			    LEFT JOIN $Справочник.Валюты СпрВ (NOLOCK) ON  СпрВ.ID = $Цены.Валюта    
	|				WHERE ($Номенклатура.ПоАлфавиту NOT LIKE (:КодАрхив))
	|				AND (Номенклатура.ISMARK = 0)
	|				AND ($Цены.КатегорияЦены = :КатЦены)
	|				AND ($ПоследнееЗначение.Цены.Цена(Цены.ID, :ВыбДата) > 0)
	|";
	
	ЗапросСКЛ.УстановитьТекстовыйПараметр("КатЦены",Константа.ОсновнаяКатегорияЦены);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДата",РабочаяДата());
	ЗапросСКЛ.УстановитьТекстовыйПараметр("КодАрхив",Константа.СимволАрхивТоваров+"%");
	ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	Сообщить("Выгружена таблица товаров с ценами");
	
	
	ТекстЗапроса = "	SELECT *
	|					, $ПоследнееЗначение.Контрагенты.КлиентСкидка(Клиенты.Клиент, :ВыбДата) Скидка
	|				INTO #КлиентыСкидки
	|				FROM (
	|				SELECT СпрК.ID Клиент 
	|                    , СпрК.ID КлиентОсн
	|                    , СпрС.ID СпециализацияГруппа1
	|			    FROM $Справочник.Контрагенты СпрК (NOLOCK)
	|				INNER JOIN Дерево_СпециализацииКлиентов ДСК (NOLOCK) ON ДСК.ID = $СпрК.Специализация
	|				INNER JOIN $Справочник.СпециализацииКлиентов СпрС (NOLOCK) ON СпрС.ID = ДСК.PARENTID AND СпрС.ISFOLDER = 1 AND $СпрС.УровеньИерархии = 0
	|			    WHERE СпрК.ISMARK = 0
//	|			    AND $ПоследнееЗначение.Контрагенты.КлиентСкидка(СпрК.ID, :ВыбДата)>0
	|				AND ($СпрК.ПоАлфавиту NOT LIKE (:КодАрхив))
	|				AND СпрК.ID IN (SELECT PARENTEXT FROM $Справочник.КонтактнаяИнформация СпрКК (NOLOCK) WHERE $СпрКК.ЛогинАктивен = 1)
	|				UNION
	|				SELECT СпрКГ.ID Клиент 
	|					 , СпрК.ID КлиентОсн
	|                    , СпрС.ID СпециализацияГруппа1
	|			    FROM $Справочник.Контрагенты СпрК (NOLOCK)
	|				INNER JOIN $Справочник.Контрагенты СпрКГ (NOLOCK) ON СпрКГ.ID = $СпрК.КлГруппа
	|				INNER JOIN Дерево_СпециализацииКлиентов ДСК (NOLOCK) ON ДСК.ID = $СпрКГ.Специализация
	|				INNER JOIN $Справочник.СпециализацииКлиентов СпрС (NOLOCK) ON СпрС.ID = ДСК.PARENTID AND СпрС.ISFOLDER = 1 AND $СпрС.УровеньИерархии = 0
	|			    WHERE СпрК.ISMARK = 0
//	|			    AND $ПоследнееЗначение.Контрагенты.КлиентСкидка(СпрК.ID, :ВыбДата)>0
	|				AND ($СпрК.ПоАлфавиту NOT LIKE (:КодАрхив))
	|				AND СпрК.ID IN (SELECT PARENTEXT FROM $Справочник.КонтактнаяИнформация СпрКК (NOLOCK) WHERE $СпрКК.ЛогинАктивен = 1)	
	|				) Клиенты 
	|				INNER JOIN $Справочник.Контрагенты СпрК (NOLOCK) ON СпрК.ID = Клиенты.Клиент
	|";
	
	СпрК = СоздатьОбъект("Справочник.Контрагенты");
	СпрК.НайтиПоКоду("11",0);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("КатЦены",Константа.ОсновнаяКатегорияЦены);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДата",РабочаяДата());
	ЗапросСКЛ.УстановитьТекстовыйПараметр("КодАрхив",Константа.СимволАрхивТоваров+"%");

	ЗапросСКЛ.УложитьСписокОбъектов(СпрК.ТекущийЭлемент(),"#ГруппаКлиентов","Контрагенты");

	ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	Сообщить("Выгружена таблица клиентов со скидками");
	

	ТекстЗапроса = "SELECT СпрСК.PARENTEXT Клиент 
	|					   ,$СпрСК.ТовГруппа Товар
	|				     , $ПоследнееЗначение.КлиентСкидки.ПроцентСкидки(СпрСК.ID, :ВыбДата) Скидка
	|				INTO #КлиентыТоварыСкидки
	|			    FROM $Справочник.КлиентСкидки СпрСК (NOLOCK)
	|				INNER JOIN #КлиентыСкидки ON #КлиентыСкидки.Клиент = СпрСК.PARENTEXT
	|			    WHERE СпрСК.ISMARK = 0
	|			    AND $ПоследнееЗначение.КлиентСкидки.ПроцентСкидки(СпрСК.ID, :ВыбДата)>0
	|			    AND ($СпрСК.КатегорияЦены = :КатЦены)
	|";
	
	ЗапросСКЛ.УстановитьТекстовыйПараметр("КатЦены",Константа.ОсновнаяКатегорияЦены);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДата",РабочаяДата());
	ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	Сообщить("Выгружена таблица клиентов и товаров со скидками");
	
	ТекстЗапроса=" -- запрос для получения актуальных спец. цен
	|			SELECT Клиент 
	|				, КлиентФилиала 
	|				, Товар 
	|				, $СпрЕд.Единица ЕдИзм
	|				, Цена
	|				, COALESCE(СпрВ.DESCR,'EUR') Валюта
	|				, ВидЦены
	|			 INTO #КлиентыСпецЦены
	|			 FROM (SELECT Клиент
	|						, КлиентФилиала
	|						, Товар
	|						, Единица 
	|						, 2 as ВидЦены -- обычная 
	|						, (SELECT TOP 1 $Рег.Цена Цена
	|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица  AND $Рег.ВидЦены <> 2
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) Цена
	|						, (SELECT TOP 1 $Рег.Валюта 
	|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица AND $Рег.ВидЦены <> 2
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) Валюта
	|						, (SELECT TOP 1 $Рег.ПериодС
	|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				 		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица AND $Рег.ВидЦены <> 2
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) ПериодС
	|						, (SELECT TOP 1 $Рег.ПериодПо
	|						   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица AND $Рег.ВидЦены <> 2
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) ПериодПо
	|					FROM
	|						(SELECT DISTINCT $СпецЦены.Клиент Клиент,  $СпецЦены.КлиентФилиала КлиентФилиала, $СпецЦены.Товар Товар, $СпецЦены.Единица Единица, СпецЦены.DATE_TIME_IDDOC ПозицияДок
	|				 		 FROM $Регистр.СпецЦены AS СпецЦены (NOLOCK)
	|						 INNER JOIN $Справочник.Номенклатура СпрН(NOLOCK) ON СпрН.ID=$СпецЦены.Товар
	|						 INNER JOIN $Справочник.Единицы СпрЕд(NOLOCK) ON СпрЕд.ID = $СпецЦены.Единица
	|						 INNER JOIN $Справочник.Контрагенты СпрК(NOLOCK) ON СпрК.ID=$СпецЦены.Клиент
	|				 		 WHERE $СпецЦены.ПериодС<=:ВыбДата AND СпрК.ID IN (SELECT Клиент FROM #КлиентыТоварыСкидки) AND $СпецЦены.ВидЦены <> 2 -- обычная
	|						) Товары
	|					UNION ALL 
	|					SELECT Клиент
	|						, КлиентФилиала
	|						, Товар
	|						, Единица 
	|						, 1 as ВидЦены -- акционная 
	|						, (SELECT TOP 1 $Рег.Цена Цена
	|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица  AND $Рег.ВидЦены = 2 -- акционная
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) Цена
	|						, (SELECT TOP 1 $Рег.Валюта 
	|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица AND $Рег.ВидЦены = 2 -- акционная
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) Валюта
	|						, (SELECT TOP 1 $Рег.ПериодС
	|				 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				 		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица AND $Рег.ВидЦены = 2 -- акционная
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) ПериодС
	|						, (SELECT TOP 1 $Рег.ПериодПо
	|						   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|				  		   WHERE $Рег.ПериодС<=:ВыбДата AND $Рег.Товар=Товары.Товар AND $Рег.Клиент=Товары.Клиент AND $Рег.КлиентФилиала=Товары.КлиентФилиала AND $Рег.Единица=Товары.Единица  AND $Рег.ВидЦены = 2 -- акционная
	|				  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) ПериодПо
	|					FROM
	|						(SELECT DISTINCT $СпецЦены.Клиент Клиент,  $СпецЦены.КлиентФилиала КлиентФилиала, $СпецЦены.Товар Товар, $СпецЦены.Единица Единица, СпецЦены.DATE_TIME_IDDOC ПозицияДок
	|				 		 FROM $Регистр.СпецЦены AS СпецЦены (NOLOCK)
	|						 INNER JOIN $Справочник.Номенклатура СпрН(NOLOCK) ON СпрН.ID=$СпецЦены.Товар
	|						 INNER JOIN $Справочник.Единицы СпрЕд(NOLOCK) ON СпрЕд.ID = $СпецЦены.Единица
	|						 INNER JOIN $Справочник.Контрагенты СпрК(NOLOCK) ON СпрК.ID=$СпецЦены.Клиент
	|				 		 WHERE $СпецЦены.ПериодС<=:ВыбДата AND СпрК.ID IN (SELECT Клиент FROM #КлиентыТоварыСкидки) AND $СпецЦены.ВидЦены = 2 -- акционная
	|						) Товары
	|				) ТоварыПоСпецЦенам
	|			 INNER JOIN $Справочник.Номенклатура СпрН(NOLOCK) ON СпрН.ID=ТоварыПоСпецЦенам.Товар
	|			 INNER JOIN $Справочник.Единицы СпрЕд(NOLOCK) ON СпрЕд.ID = ТоварыПоСпецЦенам.Единица 
|			     LEFT JOIN $Справочник.Валюты СпрВ (NOLOCK) ON  СпрВ.ID = ТоварыПоСпецЦенам.Валюта    
	|			 WHERE ПериодС <= :ВыбДата AND ПериодПо >= :ВыбДата AND Цена <> 0 
	|";

	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДата", РабочаяДата());
	ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	Сообщить("Выгружена таблица клиентов по спец.ценами");
	
	
КонецФункции

Функция ЗначениеЗаполнено(Зн)
	Возврат ?(ПустоеЗначение(Зн)=0, 1, 0);
КонецФункции


//=======================================================================================
Функция ОпределитьМожноВыгружатьЗаказы()
	
	ЕстьФайлЗагрузки 			= ЗначениеЗаполнено(ФайлЗагрузки);
	ЕстьСайт			  		= ЗначениеЗаполнено(АдресСкриптаСайта);	

	ЕстьОрганизация  			= ЗначениеЗаполнено(Организация);
	ЕстьПараметрыИдентификации  = ЗначениеЗаполнено(СпособИдентификацииКонтрагентов);
	ЕстьЕдиницаИзмерения		= 1;//ЗначениеЗаполнено(ЕдиницаИзмеренияНовойНоменклатуры);
	
	//Если ВыгружатьНаСайт Тогда
	//	Возврат	ЕстьСайт И ЕстьОрганизация И ЕстьПараметрыИдентификации И ЕстьЕдиницаИзмерения;
	//Иначе
		Возврат ЕстьФайлЗагрузки;
	//КонецЕсли;	
	
КонецФункции


//=======================================================================================
Процедура СообщитьПользователю(тхт, статус="")
	Сообщить(тхт);
КонецПроцедуры


//=======================================================================================
Процедура ОтобразитьСостояние(тхт)
	Состояние(тхт);
КонецПроцедуры


//******************************************************************************
// Валюта(СтрВалюта)
//		
// Параметры:
//	СтрВалюта	-	Наименование валюты
//		
// Возвращаемое значение:
// 	Валюта или, в случае неудачи, пустое значение
//		
// Описание
//	Ищет валюту в справочнике по наименованию
//		
Функция НайтиВалюту(СтрВалюта)
	
	Если ПустоеЗначение(СтрВалюта) = 1 Тогда Возврат ПолучитьПустоеЗначение() КонецЕсли;
    СпрВалюты = СоздатьОбъект("Справочник.Валюты");
	Если СпрВалюты.НайтиПоНаименованию(СокрЛП(СтрВалюта), 0, 1) = 0 Тогда
		Предупреждение("Валюта " + СтрВалюта + " не найдена!");
		Возврат ПолучитьПустоеЗначение();
	КонецЕсли;
	
	Возврат СпрВалюты.ТекущийЭлемент();
	
КонецФункции		//	Валюта()


Функция ПреобразоватьДату(стрДТ)
	гг = Лев(стрДТ, 4);
	мм = Сред(стрДТ, 6, 2);
	дд = Прав(стрДТ, 2);
	
	ДТ = Дата(гг,мм,дд);
	Если ПустоеЗначение(ДТ)=1 Тогда
		ДТ = ТекущаяДата();
	КонецЕсли;
	
	Возврат ДТ;
КонецФункции


Функция ЗагрузитьДанныеКонтрагента(ДеревоДокументов, ДанныеКонтрагента, ЭлДок)
	Для К=1 По ЭлДок.КоличествоПодчиненных() Цикл
		Эл2 = ЭлДок.ПолучитьПодчиненныйПоНомеру(К);
		Имя2 = Нрег(СокрЛП(Эл2.Наименование));
		Если Имя2<>"контрагент" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Эл2.КоличествоПодчиненных()=0 Тогда
			Продолжить;
		КонецЕсли;
		ДанныеКонтрагента.УдалитьСтроки();
		ДанныеКонтрагента.НоваяСтрока();
		
		Для Х=1 По Эл2.КоличествоПодчиненных() Цикл
			Эл3 = Эл2.ПолучитьПодчиненныйПоНомеру(Х);
			Имя3 = Нрег(СокрЛП(Эл3.Наименование));
			Зн3 = СокрЛП(Эл3.Текст);
			Если Имя3 = Нрег("Адрес") Тогда
				Для А=1 По Эл3.КоличествоПодчиненных() Цикл
					Если Нрег(СокрЛП(Эл3.ПолучитьПодчиненныйПоНомеру(А).Наименование))="представление" Тогда
						Зн3 = СокрЛП(Эл3.ПолучитьПодчиненныйПоНомеру(А).Текст);
						Имя3 = "АдресРегистрации";
						Прервать;
					КонецЕсли;
				КонецЦикла;
				//ДанныеКонтрагента.Код = Зн3;
			ИначеЕсли Имя3=Нрег("Контакты") Тогда
				Для А=1 По Эл3.КоличествоПодчиненных() Цикл
					
					//контакт
					ТипКонтакта = "";
					ЗначениеКонтакта = "";
					Эл4 = Эл3.ПолучитьПодчиненныйПоНомеру(А);
					Для Б=1 По Эл4.КоличествоПодчиненных() Цикл
						
						тмп = Нрег(СокрЛП(Эл4.ПолучитьПодчиненныйПоНомеру(Б).Наименование));
						Если тмп="тип" Тогда
							ТипКонтакта = Нрег(СокрЛП(Эл4.ПолучитьПодчиненныйПоНомеру(Б).Текст));
						ИначеЕсли тмп="значение" Тогда
							ЗначениеКонтакта = СокрЛП(Эл4.ПолучитьПодчиненныйПоНомеру(Б).Текст);
							Если ТипКонтакта=Нрег("ТелефонРабочий") Тогда
								Имя4 = "Телефоны";
							ИначеЕсли ТипКонтакта=Нрег("Почта") Тогда
								Имя4 = "ЭлПочта";
							Иначе
								Имя4 = "";
							КонецЕсли;
							Попытка
								ДанныеКонтрагента.УстановитьЗначение(1, Имя4, ЗначениеКонтакта);
							Исключение
							КонецПопытки;
							//Сообщить("----------");
							//Сообщить(ТипКонтакта);
							//Сообщить(ЗначениеКонтакта);
							ТипКонтакта = ""; ЗначениеКонтакта = "";
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			//Сообщить("++ "+Имя3);
			Попытка
				ДанныеКонтрагента.УстановитьЗначение(1, Имя3, Зн3);
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		ДанныеКонтрагента.Выгрузить(ДеревоДокументов.ДанныеКонтрагента);
		//ДеревоДокументов.ДанныеКонтрагента.Загрузить(ДанныеКонтрагента);
		
		Прервать;
	КонецЦикла;
КонецФункции


Функция ЗагрузитьДанныеОНалогах(ДеревоДокументов, ЭлДок)
	Для К=1 По ЭлДок.КоличествоПодчиненных() Цикл
		Эл2 = ЭлДок.ПолучитьПодчиненныйПоНомеру(К);
		Имя1 = Нрег(СокрЛП(Эл2.Наименование));
		Если Имя1<>"налог" Тогда
			Продолжить;
		КонецЕсли;
		Если Эл2.КоличествоПодчиненных()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Х=1 По Эл2.КоличествоПодчиненных() Цикл
			Эл3 = Эл2.ПолучитьПодчиненныйПоНомеру(Х);
			Имя3 = Нрег(СокрЛП(Эл3.Наименование));
			Зн3 = СокрЛП(Эл3.Текст);
			Если Имя3 = "наименование" Тогда
				Если Зн3<>"НДС" Тогда
					Прервать;
				КонецЕсли;
			ИначеЕсли Имя3 = "учтеновсумме" Тогда
				Если Зн3="true" Тогда
					ДеревоДокументов.НДСВСумме = 1;
				Иначе
					ДеревоДокументов.НДСВСумме = 0;
				КонецЕсли;
			ИначеЕсли Имя3 = "сумма" Тогда
				ДеревоДокументов.СуммаНДС = Число(Зн3);
			КонецЕсли;
		КонецЦикла;
		
		Прервать;
	КонецЦикла;
КонецФункции


Функция ЗагрузитьДанныеОСкидках(ДеревоДокументов, ЭлДок)
	Для К=1 По ЭлДок.КоличествоПодчиненных() Цикл
		Эл2 = ЭлДок.ПолучитьПодчиненныйПоНомеру(К);
		Имя1 = Нрег(СокрЛП(Эл2.Наименование));
		Если Имя1<>"скидка" Тогда
			Продолжить;;
		КонецЕсли;
		Если Эл2.КоличествоПодчиненных()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Х=1 По Эл2.КоличествоПодчиненных() Цикл
			Эл3 = Эл2.ПолучитьПодчиненныйПоНомеру(Х);
			Имя3 = Нрег(СокрЛП(Эл3.Наименование));
			Зн3 = СокрЛП(Эл3.Текст);
			Если Имя3 = "учтеновсумме" Тогда
				Если Зн3="true" Тогда
					ДеревоДокументов.СкидкаВСумме = 1;
				Иначе
					ДеревоДокументов.СкидкаВСумме = 0;
				КонецЕсли;
			ИначеЕсли Имя3 = "сумма" Тогда
				ДеревоДокументов.СуммаСкидки = Число(Зн3);
			КонецЕсли;
		КонецЦикла;
		
		Прервать;
	КонецЦикла;
КонецФункции


Функция ЗагрузитьДанныеОТоварах(ДеревоДокументов, ТаблицаТоваров, ЭлДок)
	ТаблицаТоваров.УдалитьСтроки();
	
	Для К=1 По ЭлДок.КоличествоПодчиненных() Цикл
		Эл2 = ЭлДок.ПолучитьПодчиненныйПоНомеру(К);
		Имя1 = Нрег(СокрЛП(Эл2.Наименование));
		Если Имя1<>"товар" Тогда
			Продолжить;
		КонецЕсли;
		Если Эл2.КоличествоПодчиненных()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаТоваров.НоваяСтрока();
		ТекСтрТоваров = ТаблицаТоваров.КоличествоСтрок();
		
		Для Х=1 По Эл2.КоличествоПодчиненных() Цикл
			Эл3 = Эл2.ПолучитьПодчиненныйПоНомеру(Х);
			Имя3 = Нрег(СокрЛП(Эл3.Наименование));
			Зн3 = СокрЛП(Эл3.Текст);
			Если Имя3 = "ставкиналогов" Тогда
				Для ХХ=1 По Эл3.КоличествоПодчиненных() Цикл
					Эл4 = Эл3.ПолучитьПодчиненныйПоНомеру(ХХ);
					Если Нрег(СокрЛП(Эл4.Наименование))<>"ставканалога" Тогда
						Продолжить;
					КонецЕсли;
					//тут уже читаем саму ставку
					Для ХХХ=1 По Эл4.КоличествоПодчиненных() Цикл
						Эл5 = Эл4.ПолучитьПодчиненныйПоНомеру(ХХХ);
						Если Нрег(СокрЛП(Эл5.Наименование))="наименование" Тогда
							Если СокрЛП(Эл5.Текст)<>"НДС" Тогда
								Прервать; //если не НДС то нах не надо
							КонецЕсли;
						ИначеЕсли Нрег(СокрЛП(Эл5.Наименование))="ставка" Тогда
							ТаблицаТоваров.УстановитьЗначение(ТекСтрТоваров, "СтавкаНДС", Число(Эл5.Текст));
						КонецЕсли;
					КонецЦикла;
					//если нашли ставку НДС то прерываем поиск
					Если ПустоеЗначение(ТаблицаТоваров.ПолучитьЗначение(ТекСтрТоваров, "СтавкаНДС"))=0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли Имя3 = "налоги" Тогда
				Для ХХ=1 По Эл3.КоличествоПодчиненных() Цикл
					Эл4 = Эл3.ПолучитьПодчиненныйПоНомеру(ХХ);
					Если Нрег(СокрЛП(Эл4.Наименование))<>"налог" Тогда
						Продолжить;
					КонецЕсли;
					//тут уже читаем саму сумму
					Для ХХХ=1 По Эл4.КоличествоПодчиненных() Цикл
						Эл5 = Эл4.ПолучитьПодчиненныйПоНомеру(ХХХ);
						Если Нрег(СокрЛП(Эл5.Наименование))="наименование" Тогда
							Если СокрЛП(Эл5.Текст)<>"НДС" Тогда
								Прервать; //если не НДС то нах не надо
							КонецЕсли;
						ИначеЕсли Нрег(СокрЛП(Эл5.Наименование))="сумма" Тогда
							ТаблицаТоваров.УстановитьЗначение(ТекСтрТоваров, "СуммаНДС", Число(Эл5.Текст));
						КонецЕсли;
					КонецЦикла;
					//если нашли сумму НДС то прерываем поиск
					Если ПустоеЗначение(ТаблицаТоваров.ПолучитьЗначение(ТекСтрТоваров, "СуммаНДС"))=0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли Найти("наименование,ид", Имя3)<>0 Тогда	
				ТаблицаТоваров.УстановитьЗначение(ТекСтрТоваров, Имя3, Зн3);
				
			ИначеЕсли Найти("ценазаединицу,количество,сумма", Имя3)<>0 Тогда	
				ТаблицаТоваров.УстановитьЗначение(ТекСтрТоваров, Имя3, Число(Зн3));
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ДеревоДокументов.Товары.Загрузить(ТаблицаТоваров);
КонецФункции


//=======================================================================================
Функция РазобратьCML(СтрокаCML, этоФайл=0)
	
	Успешно = Истина;
	
	//ОбъектCML = Новый ЧтениеXML;
	Если ЗагрузитьВК("v7plus.dll")=Ложь Тогда
		Возврат Ложь;
	КонецЕсли;

	ОбъектCML = СоздатьОбъект("AddIn.XMLParser");
	ДокXML = ОбъектCML.СоздатьДокумент() ;
	
	Попытка
		Если этоФайл=0 Тогда
			ДокXML.ЗагрузитьИзСтроки(СтрокаCML);
		Иначе
			ДокXML.Загрузить(СтрокаCML);
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	ДеревоДокументов = СоздатьОбъект("ТаблицаЗначений");
	ДеревоДокументов.НоваяКолонка("ДокументОбъект", "Документ.ЗаявкаПокупателя");
	ДеревоДокументов.НоваяКолонка("НомерДок");
	ДеревоДокументов.НоваяКолонка("ДатаДок");
	ДеревоДокументов.НоваяКолонка("Валюта");
	ДеревоДокументов.НоваяКолонка("Курс", "Число");
	ДеревоДокументов.НоваяКолонка("Сумма", "Число");
	ДеревоДокументов.НоваяКолонка("ДанныеКонтрагента"); //таблица данных о контрагенте
	ДеревоДокументов.НоваяКолонка("Контрагент");
	ДеревоДокументов.НоваяКолонка("СуммаНДС", "Число");
	ДеревоДокументов.НоваяКолонка("НДСВСумме", "Число");
	ДеревоДокументов.НоваяКолонка("СуммаСкидки", "Число");
	ДеревоДокументов.НоваяКолонка("СкидкаВСумме", "Число");
	ДеревоДокументов.НоваяКолонка("Товары"); //таблица товаров
	ДеревоДокументов.НоваяКолонка("Реквизиты"); //таблица реквизитов
	//13.09.12
	ДеревоДокументов.НоваяКолонка("ВремяОтгрузки");
	ДеревоДокументов.НоваяКолонка("ДатаОтгрузки");
	//14.12.12
	ДеревоДокументов.НоваяКолонка("Проект");
	
	
	ДеревоДокументов.НоваяКолонка("ОписаниеРезультата");//тут будет текст описания проведения
	
	
	ДанныеКонтрагента = СоздатьОбъект("ТаблицаЗначений");
	ДанныеКонтрагента.НоваяКолонка("Ид");
	ДанныеКонтрагента.НоваяКолонка("Наименование");
	ДанныеКонтрагента.НоваяКолонка("ПолноеНаименование");
	ДанныеКонтрагента.НоваяКолонка("Фамилия");
	ДанныеКонтрагента.НоваяКолонка("Имя");
	ДанныеКонтрагента.НоваяКолонка("АдресРегистрации");
	ДанныеКонтрагента.НоваяКолонка("Роль");
	ДанныеКонтрагента.НоваяКолонка("ИНН");
	ДанныеКонтрагента.НоваяКолонка("Телефоны");
	ДанныеКонтрагента.НоваяКолонка("ЭлПочта");
	
	ТаблицаТоваров = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаТоваров.НоваяКолонка("Номенклатура", "Справочник.Товары");
	ТаблицаТоваров.НоваяКолонка("Ид");
	ТаблицаТоваров.НоваяКолонка("Наименование");
	ТаблицаТоваров.НоваяКолонка("ЦенаЗаЕдиницу", "Число");
	ТаблицаТоваров.НоваяКолонка("Количество", "Число");
	ТаблицаТоваров.НоваяКолонка("Сумма", "Число");
	ТаблицаТоваров.НоваяКолонка("СуммаНДС", "Число");
	ТаблицаТоваров.НоваяКолонка("СтавкаНДС", "Число");
	
	ТаблицаРеквизитов = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРеквизитов.НоваяКолонка("Наименование");
	ТаблицаРеквизитов.НоваяКолонка("Значение");
	
	
	Выборка = ДокXML.ЭлементДокумента.ВыбратьУзлы("Документ");
	Для Сч = 0 По Выборка.КоличествоУзлов-1 Цикл
		ДокЗаказ = Выборка.ПолучитьУзел(Сч);
		Если ДокЗаказ.КоличествоПодчиненных()>0 Тогда
			ДеревоДокументов.НоваяСтрока();
			ДеревоДокументов.ДанныеКонтрагента = СоздатьОбъект("ТаблицаЗначений");
			ДеревоДокументов.Товары = СоздатьОбъект("ТаблицаЗначений");
			ДеревоДокументов.Реквизиты = СоздатьОбъект("ТаблицаЗначений");
		КонецЕсли;
		
		Для Н=1 По ДокЗаказ.КоличествоПодчиненных() Цикл
			//ЭлТовар.ПолучитьПодчиненныйПоНомеру(1).Наименование ИД
			//ЭлТовар.ПолучитьПодчиненныйПоНомеру(1).Текст 36
			ЭлДок = ДокЗаказ.ПолучитьПодчиненныйПоНомеру(Н);
			Имя = Нрег(СокрЛП(ЭлДок.Наименование));
			Зн = СокрЛП(ЭлДок.Текст);
			Если Имя = "номер" Тогда
				ДеревоДокументов.НомерДок = Зн;
				
			ИначеЕсли Имя = "дата" Тогда
				ДеревоДокументов.ДатаДок = ПреобразоватьДату(Зн);
				
			ИначеЕсли Имя = "датаотгрузки" Тогда
				ДеревоДокументов.ДатаОтгрузки = ПреобразоватьДату(Зн);
				
			ИначеЕсли Имя = "времяотгрузки" Тогда
				ДеревоДокументов.ВремяОтгрузки = СокрЛП(Зн);
				
			ИначеЕсли Имя = "валюта" Тогда
				ДеревоДокументов.Валюта = НайтиВалюту(Зн);
				
			ИначеЕсли Имя = "курс" Тогда
				ДеревоДокументов.Курс = Число(Зн);
				
			ИначеЕсли Имя = "сумма" Тогда
				ДеревоДокументов.Сумма = Число(Зн);
				
			ИначеЕсли Имя = "контрагенты" Тогда
				ЗагрузитьДанныеКонтрагента(ДеревоДокументов, ДанныеКонтрагента, ЭлДок);
				
			ИначеЕсли Имя = "налоги" Тогда
				ЗагрузитьДанныеОНалогах(ДеревоДокументов, ЭлДок);
				
			ИначеЕсли Имя = "скидки" Тогда
				ЗагрузитьДанныеОСкидках(ДеревоДокументов, ЭлДок);
				
			ИначеЕсли Имя = "товары" Тогда
				ЗагрузитьДанныеОТоварах(ДеревоДокументов, ТаблицаТоваров, ЭлДок);
				
			ИначеЕсли Имя = "проект" Тогда
				ДеревоДокументов.Проект = Зн;
			
				//%%% пока не будем
			ИначеЕсли Имя = "значениереквизита" Тогда
				//Для К=1 По ЭлДок.КоличествоПодчиненных() Цикл
				//	Эл2 = ЭлДок.ПолучитьПодчиненныйПоНомеру(К);
				//	Имя1 = Нрег(СокрЛП(Эл2.Наименование));
				//	Если Имя1="товар" Тогда
				//		
				//	КонецЕсли;
				//КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
	
	//ВыводВТаблицу(ДеревоДокументов);
	
	Возврат ДеревоДокументов;	
КонецФункции	


Функция НайтиЗаказПокупателя(Номер, Дт)
	тхт = "#"+СокрЛП(Номер)+"#";
	ДлинаТекста = СтрДлина(тхт);
	
	Доки = СоздатьОбъект("Документ.ЗаявкаПокупателя");
	Доки.ВыбратьДокументы(НачМесяца(Дт), );
	Пока Доки.ПолучитьДокумент() = 1 Цикл
		тмп = Лев(Доки.Комментарий, ДлинаТекста);
		Если тмп=тхт Тогда
			//Сообщить("333");
			Возврат Доки.ТекущийДокумент();
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции


Функция ПолучитьРанееЗагруженныеДокументы(ДеревоДокументов)
	ДеревоДокументов.ВыбратьСтроки();
	Пока ДеревоДокументов.ПолучитьСтроку() = 1 Цикл
		ДеревоДокументов.ДокументОбъект = НайтиЗаказПокупателя(ДеревоДокументов.НомерДок, ДеревоДокументов.ДатаДок);
	КонецЦикла;
КонецФункции


Функция НайтиКонтрагента(ДанныеКонтрагента)
//	спрЮЛ = СоздатьОбъект("Справочник.ЮрЛица");
	спрКонтр = СоздатьОбъект("Справочник.Клиенты");
	способИд = СпособИдентификацииКонтрагентов.ПолучитьЗначение(СпособИдентификацииКонтрагентов.ТекущаяСтрока());
	
	ЮрЛицо = "";
	Контр = "";
	Наименование = ДанныеКонтрагента.Наименование;
	Если ПустаяСтрока(Наименование)=1 Тогда
		Наименование = СокрЛП(ДанныеКонтрагента.Фамилия) + " " + СокрЛП(ДанныеКонтрагента.Имя);
	КонецЕсли;
	
	Если (способИд="инн") и (ПустоеЗначение(ДанныеКонтрагента.ИНН)=0) Тогда
		Если спрКонтр.НайтиПоРеквизиту("РегНомер", ДанныеКонтрагента.ИНН, 1)=1 Тогда
//			ЮрЛицо = спрЮЛ.ТекущийЭлемент();
//			Если спрКонтр.НайтиПоРеквизиту("ЮрФизЛицо", ЮрЛицо, 1)=1 Тогда
			Контр = спрКонтр.ТекущийЭлемент();
//			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ПустаяСтрока(Наименование)=0 Тогда
			Если спрКонтр.НайтиПоНаименованию(Наименование,0,1)=1 Тогда
				Контр = спрКонтр.ТекущийЭлемент();
//				ЮрЛицо = спрЮЛ.НайтиЭлемент(Контр.ЮрФизЛицо);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Если ПустоеЗначение(Контр)=0 Тогда
	//	Возврат Контр;
	//КонецЕсли;
	
	//если не нашли то создаем
	//Если ПустоеЗначение(ЮрЛицо)=1 Тогда
	//	спрЮЛ.Новый();
	//	//спрЮЛ.Код = ;
	//	спрЮЛ.Наименование = Наименование;
	//	спрЮЛ.ПолнНаименование = ?(ПустоеЗначение(ДанныеКонтрагента.ПолноеНаименование)=0,ДанныеКонтрагента.ПолноеНаименование,Наименование);
	//	спрЮЛ.ИНН = ДанныеКонтрагента.ИНН;
	//	//спрЮЛ.ОКПО = ;
	//КонецЕсли;
	//спрЮЛ.Телефоны = ДанныеКонтрагента.Телефоны;
	//спрЮЛ.ЮрАдрес = ДанныеКонтрагента.АдресРегистрации;
	//спрЮЛ.ФактАдрес = ДанныеКонтрагента.АдресРегистрации;
	////спрЮЛ.Комментарий = ;
	//Попытка
	//	спрЮЛ.Записать();
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//	Если спрЮЛ.Выбран()=0 Тогда
	//		Возврат Неопределено;
	//	КонецЕсли;
	//КонецПопытки;
	//
	//ЮрЛицо = спрЮЛ.ТекущийЭлемент();
	
	
	Если ПустоеЗначение(Контр)=1 Тогда
		спрКонтр.Новый();
		//спрКонтр.Код = ;
		спрКонтр.Наименование = Наименование;
		//спрКонтр.ЮрФизЛицо = ЮрЛицо;
		//спрКонтр.ОсновнойДоговор = ;
		//спрКонтр.ОсновнойСчет = ;
		//спрКонтр.Идентификатор = ;
		//спрКонтр.ОсновноеСвойство = ;
		//спрКонтр.Сайт = ;
		спрКонтр.КоммКонтактнПерсона = "#Загружен с сайта#";
		спрКонтр.Родитель = ГруппаДляНовыхКонтрагентов;
	КонецЕсли;
	
	Если ПустоеЗначение(ДанныеКонтрагента.ЭлПочта)=0 Тогда
		спрКонтр.ЭлПочта = ДанныеКонтрагента.ЭлПочта;
	КонецЕсли;
	
	Попытка
		спрКонтр.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
		Если спрКонтр.Выбран()=0 Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецПопытки;
	
	//Если ПустоеЗначение(спрКонтр.ОсновнойДоговор)=1 Тогда
	//	//сразу создадим основной договор
	//	спрДог = СоздатьОбъект("Справочник.Договоры");
	//	спрДог.Новый();
	//	//спрДог.Код = ;
	//	спрДог.Наименование = "Договор с WEB-сайта";
	//	спрДог.ВалютаВзаиморасчетов = Рубли;
	//	//спрДог.ТипЦен = ;
	//	//спрДог.Скидка = ;
	//	//спрДог.ГлубинаКредита = ;
	//	//спрДог.СуммаКредита = ;
	//	//спрДог.НеКонтролироватьКредит = ;
	//	//спрДог.ФиксироватьКурсЗадолжностей = ;
	//	спрДог.Владелец = спрКонтр.ТекущийЭлемент();
	//	Попытка
	//		спрДог.Записать();
	//		спрКонтр.ОсновнойДоговор = спрДог.ТекущийЭлемент();
	//		спрКонтр.Записать();
	//	Исключение
	//		Сообщить(ОписаниеОшибки());
	//	КонецПопытки;
	//КонецЕсли;
	
	Возврат спрКонтр.ТекущийЭлемент();
КонецФункции


Функция ИдентифицироватьКонтрагентов(ДеревоДокументов)
	
	Успешно = Истина;
	
	ДеревоДокументов.ВыбратьСтроки();
	Пока ДеревоДокументов.ПолучитьСтроку() = 1 Цикл
		Если (ПустоеЗначение(ДеревоДокументов.ДокументОбъект)=0) и (ПустоеЗначение(ДеревоДокументов.ДокументОбъект.Контрагент)=0) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеКонтрагента = ДеревоДокументов.ДанныеКонтрагента;
		Если ДанныеКонтрагента.КоличествоСтрок()=0 Тогда
			Продолжить;
		КонецЕсли;
		ДанныеКонтрагента.ВыбратьСтроки();
		ДанныеКонтрагента.ПолучитьСтроку();
		ОтобразитьСостояние("Идентификация контрагента: " + ДанныеКонтрагента.Наименование);
		
		ДеревоДокументов.Контрагент = НайтиКонтрагента(ДанныеКонтрагента);
		
		//Если НЕ ЗначениеЗаполнено(КонтрагентСсылка) Тогда
		//	
		//	Успешно = Ложь;
		//	Прервать;
		//	
		//КонецЕсли;
		
		//ЗаполнитьПодчиненныеДанныеКонтрагента(КонтрагентСсылка, СтрокаДД.СтруктураДанныхКонтрагента);
		//
		//Док = СтрокаДД.ДокументОбъект;
		//
		//Док.Контрагент = КонтрагентСсылка;
		//
		//Успешно = ПроверитьОсновнойДоговорКонтрагента(КонтрагентСсылка, Док);
		//
		//Если НЕ Успешно Тогда
		//	Прервать;
		//КонецЕсли;
		//	
		//мСтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораЗаказаПокупателя();
		//
		//// нужны только договоры с покупателем и все
		//мСтруктураПараметровДляПолученияДоговора.СписокДопустимыхВидовДоговоров.Очистить();
		//мСтруктураПараметровДляПолученияДоговора.СписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		//
		//СписокДопустимыхВидовВзаиморасчетов = Новый СписокЗначений();
		//СписокДопустимыхВидовВзаиморасчетов.Добавить(Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
		//мСтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовВзаиморасчетов", СписокДопустимыхВидовВзаиморасчетов);
		//
		//мСтруктураПараметровДляПолученияДоговора.Вставить("ВалютаВзаиморасчетовДоговора", Док.ВалютаДокумента);
		//мСтруктураПараметровДляПолученияДоговора.Вставить("ВидСравненияВалютыВзаиморасчетов", "=");
		//
		//ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Док, мСтруктураПараметровДляПолученияДоговора);							
		//
		//Если Не ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
		//	
		//	мСтруктураПараметровДляПолученияДоговора.Удалить("ВалютаВзаиморасчетовДоговора");
		//	мСтруктураПараметровДляПолученияДоговора.Удалить("ВидСравненияВалютыВзаиморасчетов");
		//
		//	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Док, мСтруктураПараметровДляПолученияДоговора);
		//	
		//	Если Не ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
		//		
		//		Док.ДоговорКонтрагента = СоздатьДоговорПоПараметрам(Док.Контрагент, Док.Организация, Док.ВалютаДокумента);
		//		
		//	КонецЕсли;
		//	
		//КонецЕсли;
				
	КонецЦикла;	
	
	Возврат Успешно;
	
КонецФункции


Функция ИдентифицироватьНоменклатуру(ДеревоДокументов)
	
	Успешно = Истина;
	
	//Успешно = ИнициализироватьВидыНоменкалтуры();
	//
	//Если НЕ Успешно Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	
	спрНомен = СоздатьОбъект("Справочник.Товары");
	Состояние("Поиск номенклатуры....");
	
	ДеревоДокументов.ВыбратьСтроки();
	Пока ДеревоДокументов.ПолучитьСтроку() = 1 Цикл
		
		Товары = ДеревоДокументов.Товары;
		Товары.ВыбратьСтроки();
		Пока Товары.ПолучитьСтроку() = 1 Цикл
			
			Если спрНомен.НайтиПоРеквизиту("Идентификатор",Товары.Ид,1)=1 Тогда
				Если спрНомен.ЭтоГруппа()=0 Тогда
					Товары.Номенклатура = спрНомен.ТекущийЭлемент();
				КонецЕсли;
			ИначеЕсли спрНомен.НайтиПоНаименованию(Товары.Наименование, 0)=1 Тогда
				Если спрНомен.ЭтоГруппа()=0 Тогда
					Товары.Номенклатура = спрНомен.ТекущийЭлемент();
				КонецЕсли;
			Иначе
				Сообщить("Не найден товар: "+Товары.Наименование + ". Код: "+Товары.Ид);
			КонецЕсли;
		КонецЦикла;
		
		//Если СтрокаДД.ЕстьСсылкиНаРанееЗагруженныйДокумент Тогда
		//	Продолжить;
		//КонецЕсли;	
		//
		//ОтобразитьСостояние("Идентификация товаров в документе: " + СтрокаДД.ДокументОбъект);
		//
		//Для Каждого ТоварУслугаСвойство Из СтрокаДД.Строки Цикл
		//	
		//	Если ЗначениеЗаполнено(ТоварУслугаСвойство.СвойствоНаименование) Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	
		//	ТипНоменклатурыCML = "";
		//	
		//	Для Каждого ПодчиненнаяСтрокаТовараУслуги Из ТоварУслугаСвойство.Строки Цикл
		//		
		//		Если ЗначениеЗаполнено(ПодчиненнаяСтрокаТовараУслуги.ЗначениеРеквизитаНаименование)
		//			И ПодчиненнаяСтрокаТовараУслуги.ЗначениеРеквизитаНаименование = ЗначениеCML_ТипНоменклатуры Тогда
		//			
		//			ТипНоменклатурыCML = ПодчиненнаяСтрокаТовараУслуги.ЗначениеРеквизитаЗначение;
		//			Прервать;
		//								
		//		КонецЕсли;	
		//		
		//	КонецЦикла;			
		//	
		//	ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		//	СтавкаНДСНоменклатуры = ?(ЗначениеЗаполнено(ТоварУслугаСвойство.СтавкаНДС), ТоварУслугаСвойство.СтавкаНДС, СтрокаДД.СтавкаНДС);
		//	
		//	Если ТипНоменклатурыCML = ТипНоменклатурыCML_Услуга Тогда	
		//		
		//		Номенклатура = НайтиСоздатьНоменклатуру(ТоварУслугаСвойство, мВидНоменклатурыУслуга, СтавкаНДСНоменклатуры);
		//		
		//	Иначе
		//		
		//		Номенклатура = НайтиСоздатьНоменклатуру(ТоварУслугаСвойство, мВидНоменклатурыТовар, СтавкаНДСНоменклатуры, ХарактеристикаНоменклатуры);
		//		
		//	КонецЕсли;
		//	
		//	Если Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
		//	
		//		НовСтрока 	 = СтрокаДД.ДокументОбъект.Услуги.Добавить();
		//		НовСтрока.Номенклатура = Номенклатура;
		//		НовСтрока.Содержание   = Номенклатура.НаименованиеПолное;
		//		НовСтрока.Количество   = 1;
		//		НовСтрока.Цена         = ТоварУслугаСвойство.ТоварУслугаСумма;
		//		
		//		Если ЗначениеЗаполнено(ТоварУслугаСвойство.СтавкаНДС) Тогда
		//			НовСтрока.СтавкаНДС    = ТоварУслугаСвойство.СтавкаНДС;
		//		Иначе
		//			НовСтрока.СтавкаНДС    = Номенклатура.СтавкаНДС;
		//		КонецЕсли;
		//		
		//		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НовСтрока, СтрокаДД.ДокументОбъект);
		//		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НовСтрока, СтрокаДД.ДокументОбъект);
		//		
		//	Иначе	
		//		
		//		НовСтрока = СтрокаДД.ДокументОбъект.Товары.Добавить();
		//		НовСтрока.Номенклатура     			 = Номенклатура;
		//		НовСтрока.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
		//		НовСтрока.ЕдиницаИзмерения 		     = Номенклатура.ЕдиницаХраненияОстатков;
		//		НовСтрока.Количество   	   			 = ТоварУслугаСвойство.ТоварУслугаКоличество;
		//		НовСтрока.Коэффициент      			 = Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		//		
		//		Если ЗначениеЗаполнено(ТоварУслугаСвойство.СтавкаНДС) Тогда
		//			НовСтрока.СтавкаНДС    = ТоварУслугаСвойство.СтавкаНДС;
		//		Иначе
		//			НовСтрока.СтавкаНДС    = Номенклатура.СтавкаНДС;
		//		КонецЕсли;
		//		
		//		НовСтрока.Сумма	= РассчитатьСуммуСУчетомСкидок(ТоварУслугаСвойство);
		//		
		//		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НовСтрока, СтрокаДД.ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"),,истина, ,истина, "Товары");
		//		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НовСтрока, СтрокаДД.ДокументОбъект);
		//		
		//	КонецЕсли;
		//	
		//КонецЦикла;
		//
		//Если СтрокаДД.СкидкаВСумме = Истина Тогда
		//	
		//	СуммаСкидки = СтрокаДД.СуммаСкидки;
		//	
		//	Если СуммаСкидки <> 0 Тогда
		//		
		//		Если СтрокаДД.ДокументОбъект.Товары.Количество() > 0 Тогда
		//			РаспределитьСуммуПоКолонке(СтрокаДД.ДокументОбъект, СтрокаДД.ДокументОбъект.Товары, "Товары", -СуммаСкидки);
		//		Иначе
		//			РаспределитьСуммуПоКолонке(СтрокаДД.ДокументОбъект, СтрокаДД.ДокументОбъект.Услуги, "Услуги", -СуммаСкидки);
		//		КонецЕсли;					
		//		
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Успешно;
	
КонецФункции	


Функция ДобавитьОписаниеРезультата(ДеревоДокументов, тхт)
	//Сообщить(тхт);
	Если ПустоеЗначение(тхт)=1 Тогда
		Возврат "";
	КонецЕсли;
	
	Если ПустоеЗначение(ДеревоДокументов.ОписаниеРезультата)=0 Тогда
		ДеревоДокументов.ОписаниеРезультата = ДеревоДокументов.ОписаниеРезультата + РазделительСтрок;
	Иначе
		ДеревоДокументов.ОписаниеРезультата = "";
	КонецЕсли;
	
	ДеревоДокументов.ОписаниеРезультата = ДеревоДокументов.ОписаниеРезультата + тхт;
	
	//Сообщить(" == "+ДеревоДокументов.ОписаниеРезультата);
КонецФункции


Функция НайтиСтавкуНДС(Зн)
	Если Зн=0 Тогда
		Возврат Перечисление.СтавкиНДС.БезНДС;
	ИначеЕсли Зн=18 Тогда
		Возврат Перечисление.СтавкиНДС.НДС18;
	ИначеЕсли Зн=10 Тогда
		Возврат Перечисление.СтавкиНДС.НДС10;
	КонецЕсли;
	
	Возврат Перечисление.СтавкиНДС.БезНДС;
КонецФункции


//******************************************************************************        
// ПересчетСуммыВзаиморасчетов()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Вызывается из формулы невидимого текстового поля
// 	Производит проверку, изменилась ли сумма документа и валюта договора и, 
// 	при необходимости, пересчитывает сумму в валюте взаиморасчетов.
//
Функция ПересчетСуммыВзаиморасчетов(Док)
	
	Если ПустоеЗначение(Док.Договор.ВалютаВзаиморасчетов)=1 Тогда
		Если Док.СуммаВзаиморасчетов<>0 Тогда
			Док.СуммаВзаиморасчетов=0;
		КонецЕсли;
		ВалютаДоговораСтарая		= Док.Договор.ВалютаВзаиморасчетов;
		Возврат "";
	КонецЕсли;
	
	СуммаВзаиморасчетовДок	= Док.Итог("Сумма")
							+?(Док.СуммаВклНП =1,0,Док.Итог("СуммаНП" ))
							+?(Док.СуммаВклНДС=1,0,Док.Итог("СуммаНДС"));

	СуммаВзаиморасчетовДокРуб	= _глПересчет(СуммаВзаиморасчетовДок,Док.Валюта,Док.Курс,Рубли,Док.ДатаДок,Док.Кратность);
	
	СуммаДокументаСтараяРуб = 0;
	
	Если (СуммаВзаиморасчетовДокРуб<>СуммаДокументаСтараяРуб) или 
		 (ВалютаДоговораСтарая	<>Док.Договор.ВалютаВзаиморасчетов)Тогда
		 	
		// изменили сумму документа или валюту взаиморасчетов, надо пересчитать 
		СуммаДокументаСтараяРуб 	= СуммаВзаиморасчетовДокРуб;      
		ВалютаДоговораСтарая		= Док.Договор.ВалютаВзаиморасчетов;
		
	    Док.СуммаВзаиморасчетов		= _глПересчет(СуммаВзаиморасчетовДок,
									Док.Валюта,Док.Курс,
									Док.Договор.ВалютаВзаиморасчетов,Док.ДатаДок,Док.Кратность);
		//Форма.Обновить();
	КонецЕсли;
	
КонецФункции // ПересчетСуммыВзаиморасчетов()


Функция НатиСоздатьПроект(ИмяПроекта)
	
	НаименованиеПроекта = Лев(ИмяПроекта, 50);
	Если ПустоеЗначение(НаименованиеПроекта)=1 Тогда
		Возврат "";
	КонецЕсли;
	
	спрПроекты = СоздатьОбъект("Справочник.Проекты");
	Если спрПроекты.НайтиПоНаименованию(НаименованиеПроекта)=1 Тогда
		Возврат спрПроекты.ТекущийЭлемент();
	КонецЕсли;
	
	спрПроекты.Новый();
	спрПроекты.Наименование = НаименованиеПроекта;
	Попытка
		спрПроекты.Записать();
		Возврат спрПроекты.ТекущийЭлемент();
	Исключение
	КонецПопытки;
	
	Возврат "";
КонецФункции

Функция СоздатьОбновитьДокумент(ДеревоДокументов)
	Док = СоздатьОбъект("Документ.Счет");
	
	НовыйДокумент = 0;
	
	Если ПустоеЗначение(ДеревоДокументов.ДокументОбъект)=1 Тогда
		//Сообщить("777");
		Док.Новый();
		//Док.Контрагент = ;
		//Док.Договор = ;
		Док.УчитыватьНДС = ?(ДеревоДокументов.СуммаНДС<>0,1,0);
		Док.СуммаВклНДС = ДеревоДокументов.НДСВСумме;
		Док.УчитыватьНП = 0;
		Док.СуммаВклНП = 0;
		//Док.СуммаВзаиморасчетов = ;
		////Док.Скидка = ;
		//Док.Склад = ;
		//Док.СпособРезервирования = ;
		//Док.ЮрЛицо = ;
		
		Док.Клиент = ДеревоДокументов.Контрагент;
		Док.Договор = Док.Контрагент.ОсновнойДоговор;
		ЗаполнитьШапку(Док);
		Док.Контрагент = ДеревоДокументов.Контрагент;
		Док.Договор = Док.Контрагент.ОсновнойДоговор;
		Док.Автор = ?(ЗначениеЗаполнено(Заказ_Автор)=1, Заказ_Автор, Док.Автор);
		Док.ДатаДок = ДеревоДокументов.ДатаДок;
		Если (спУстановкаДатыЗаказов.ПолучитьЗначение(спУстановкаДатыЗаказов.ТекущаяСтрока())="текущая") ИЛИ (ПустоеЗначение(Док.ДатаДок)=1) Тогда
			Док.ДатаДок = ТекущаяДата();
		КонецЕсли;
		Док.Валюта = ?(ЗначениеЗаполнено(ДеревоДокументов.Валюта)=1,ДеревоДокументов.Валюта,Рубли);
		Док.Курс = ?(ДеревоДокументов.Курс<>0, ДеревоДокументов.Курс, 1);
		Док.Кратность = 1;
		Док.ВидОперации = Перечисление.ВидыОперацийЗаявок.Неподтвержденная; 
		
		//13.09.12
		Док.ДатаОтгрузки = ДеревоДокументов.ДатаОтгрузки;
		Попытка
			Док.ВремяОтгрузки = ДеревоДокументов.ВремяОтгрузки;
		Исключение
		КонецПопытки;
		
		Док.Комментарий = "#"+СокрЛП(ДеревоДокументов.НомерДок)+"#";
		
		Док.ЮридическаяФирма = ?(ЗначениеЗаполнено(Организация)=1, Организация, Док.Фирма);

		Попытка
			Док.Записать();
		Исключение
			ДобавитьОписаниеРезультата(ДеревоДокументов, ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		
		НовыйДокумент = 1;
	Иначе
		Док.НайтиДокумент(ДеревоДокументов.ДокументОбъект);
	КонецЕсли;
	
	
	
	Если ПустоеЗначение(Док.Контрагент)=1 Тогда
		Док.Контрагент = ДеревоДокументов.Контрагент;
	КонецЕсли;
	Если ПустоеЗначение(Док.Договор)=1 Тогда
		Док.Договор = Док.Контрагент.ОсновнойДоговор;
	КонецЕсли;
	Если ПустоеЗначение(Док.Контрагент)=1 Тогда
		ДобавитьОписаниеРезультата(ДеревоДокументов, "Не найден контрагент");
	КонецЕсли;
	Если ПустоеЗначение(Док.Договор)=1 Тогда
		ДобавитьОписаниеРезультата(ДеревоДокументов, "Не найден договор контрагента");
	КонецЕсли;
	
	Если ПустоеЗначение(Док.Проект)=1 Тогда
		Док.Проект = НатиСоздатьПроект(ДеревоДокументов.Проект);
	КонецЕсли;
	
	ТекСтр = 1;
	Товары = ДеревоДокументов.Товары;
	Док.УдалитьСтроки();
	Товары.ВыбратьСтроки();
	Пока Товары.ПолучитьСтроку() = 1 Цикл
		Док.НоваяСтрока();
		Док.Номенклатура = Товары.Номенклатура;
		Док.Количество = Товары.Количество;
		Док.Единица = Товары.Номенклатура.ОсновнаяЕдиница;
		Док.Коэффициент = Док.Единица.Коэффициент;
		Док.Цена = Товары.ЦенаЗаЕдиницу;
		Док.Сумма = Товары.Сумма;
		Док.СтавкаНДС = НайтиСтавкуНДС(Товары.СтавкаНДС);
		Док.СуммаНДС = Товары.СуммаНДС;
		Док.СтавкаНП = "";
		Док.СуммаНП = "";
		
		Если ПустоеЗначение(Док.Номенклатура)=1 Тогда
			ДобавитьОписаниеРезультата(ДеревоДокументов, "Строка "+ТекСтр+": Не найдена номенклатура");
		КонецЕсли;
	КонецЦикла;
	
	ПересчетСуммыВзаиморасчетов(Док);
	
	Попытка
		Док.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
		ДобавитьОписаниеРезультата(ДеревоДокументов, ОписаниеОшибки());
	КонецПопытки;
	
	Если спПроведениеЗаказов.ПолучитьЗначение(спПроведениеЗаказов.ТекущаяСтрока())="проводить" Тогда
		Попытка
			Док.Провести();
		Исключение
			Сообщить(ОписаниеОшибки());
			ДобавитьОписаниеРезультата(ДеревоДокументов, ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	//Сообщить("666 "+Док.ТекущийДокумент());
	//ДобавитьОписаниеРезультата(ДеревоДокументов, "ИТОГ");
	
	ДеревоДокументов.ДокументОбъект = Док.ТекущийДокумент();
КонецФункции


Функция ОбработатьДокументы(ДеревоДокументов, КоличествоОбработанныхДокументов)
	
	Успешно = Истина;
	КоличествоОбработанныхДокументов = 0;
	
	//	СтруктураСтатистики = Новый Структура;
	//	СтруктураСтатистики.Вставить("Создано"  , 0);
	//	СтруктураСтатистики.Вставить("Обновлено", 0);
	//	СтруктураСтатистики.Вставить("Пропущено", 0);
	//	СтруктураСтатистики.Вставить("ОплаченСписок", Новый Массив);
	//	СтруктураСтатистики.Вставить("ДоставкаРазрешенаСписок", Новый Массив);
	//	СтруктураСтатистики.Вставить("ФинальныйСтатусСписок", Новый Массив);
	
	ОтобразитьСостояние("Поиск ранее загруженных документов...");
	
	ПолучитьРанееЗагруженныеДокументы(ДеревоДокументов);
	
	НачатьТранзакцию();
	
	Успешно = ИдентифицироватьКонтрагентов(ДеревоДокументов); 
	
	Если Успешно=Ложь Тогда
		ОтменитьТранзакцию();
		СообщитьПользователю("Не удалось найти/создать контрагента.", Ложь);
		Возврат Ложь;
	КонецЕсли;
	
	Успешно = ИдентифицироватьНоменклатуру(ДеревоДокументов);
	Если Успешно=Ложь Тогда
		ОтменитьТранзакцию();
		СообщитьПользователю("Не удалось найти/создать номенклатуру.", Ложь);
		Возврат Ложь;
	КонецЕсли;
	
	ДеревоДокументов.ВыбратьСтроки();
	Пока ДеревоДокументов.ПолучитьСтроку() = 1 Цикл
		СоздатьОбновитьДокумент(ДеревоДокументов);
		//Прервать;
	КонецЦикла;
	
	//	МассивДокументовДляПроведения = Новый Массив();
	//	Успешно = СоздатьОбновитьДокументы(ДеревоДокументов, СтруктураСтатистики, МассивДокументовДляПроведения, мМассивЗагруженныхДокументов);	
	//	Если НЕ Успешно Тогда
	//		СообщитьПользователю("Не удалось создать/обновить документы.", Ложь);
	//		Возврат Ложь;
	//	КонецЕсли;
	//	
	//	МассивОтклоненныхДокументов = Новый Массив();
	//	Успешно = ЗаписатьСвойстваДокументов(ДеревоДокументов, СтруктураСтатистики, МассивОтклоненныхДокументов);
	//	Если НЕ Успешно Тогда
	//		СообщитьПользователю("Не удалось записать свойства документов.", Ложь);
	//		Возврат Ложь;
	//	КонецЕсли;
	//			
	ЗафиксироватьТранзакцию();
	//	
	//	ОтобразитьСостояние("Проведение загруженных документов...");
	//
	//	// если документы нужно проводить, то попытаемся их провести
	//	РежимПроведения = ?(ПроводитьДокументыОперативно, РежимПроведенияДокумента.Оперативный, РежимПроведенияДокумента.Неоперативный);
	//	Для Каждого ДокументПроведения Из МассивДокументовДляПроведения Цикл
	//		
	//		Если МассивОтклоненныхДокументов.Найти(ДокументПроведения.Ссылка) <> Неопределено Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Попытка
	//			
	//			ДокументПроведения.ПометкаУдаления = Ложь;
	//			ДокументПроведения.Записать(РежимЗаписиДокумента.Проведение, РежимПроведения);			
	//						
	//		Исключение
	//			
	//			СообщитьОбИсключительнойОшибке(Ложь, "Ошибка при проведении документа: " + Строка(ДокументПроведения) + Символы.ПС + ОписаниеОшибки());
	//			Возврат Ложь;
	//						
	//		КонецПопытки;
	//		
	//	КонецЦикла;
	//	
	//	Для Каждого ДокументПроведения Из МассивОтклоненныхДокументов Цикл
	//		
	//		Попытка
	//			
	//			ДокОбъект = ДокументПроведения.ПолучитьОбъект();
	//			ДокОбъект.ПометкаУдаления = Истина;
	//			ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);			
	//						
	//		Исключение
	//			
	//			СообщитьОбИсключительнойОшибке(Ложь, "Ошибка при отмене проведения документа: " + Строка(ДокументПроведения) + Символы.ПС + ОписаниеОшибки());
	//			Возврат Ложь;
	//						
	//		КонецПопытки;
	//		
	//	КонецЦикла;
	//	
	//	// не нужно регистрировать изменения для только что загруженных документов
	//	Если мМассивЗагруженныхДокументов.Количество() <> 0 Тогда
	//		
	//		МассивУзлов = ПроцедурыОбменаССайтом.ПолучитьМассивУзловДляРегистрации(Ложь);
	//		
	//		Для Каждого СсылкаНаДокумент Из мМассивЗагруженныхДокументов Цикл
	//			ПланыОбмена.УдалитьРегистрациюИзменений(МассивУзлов, СсылкаНаДокумент);
	//		КонецЦикла;		
	//				
	//	КонецЕсли;
	//	
	//	Отступ = Символы.НПП + Символы.НПП;
	//	
	//	КоличествоОбработанныхДокументов = ДеревоДокументов.Строки.Количество();
	//		
	//	Если КоличествоОбработанныхДокументов > 0 Тогда
	//		
	//		ТекстСообщения = "Успешно получено и обработано документов: " + Строка(КоличествоОбработанныхДокументов);
	//	
	//	
	//		ТекстСообщения = ТекстСообщения + Символы.ПС + "Список обработанных документов: ";		
	//		Для Каждого СтрокаДД Из ДеревоДокументов.Строки Цикл
	//			ТекстСообщения = ТекстСообщения + Символы.ПС + Отступ + СтрокаДД.ДокументОбъект.Ссылка;
	//		КонецЦикла;
	//		
	//		ТекстСообщения = ТекстСообщения + Символы.ПС + "В том числе:";
	//		Если СтруктураСтатистики.Создано <> 0 Тогда
	//			ТекстСообщения = ТекстСообщения + Символы.ПС + Отступ + "создано новых: " + СтруктураСтатистики.Создано;
	//		КонецЕсли;
	//		
	//		Если СтруктураСтатистики.Обновлено <> 0 Тогда
	//			ТекстСообщения = ТекстСообщения + Символы.ПС + Отступ + "обновлено: " + СтруктураСтатистики.Обновлено;
	//		КонецЕсли;
	//		
	//		Если СтруктураСтатистики.Пропущено <> 0 Тогда
	//			ТекстСообщения = ТекстСообщения + Символы.ПС + Отступ + "пропущено: " + СтруктураСтатистики.Пропущено;
	//		КонецЕсли;
	//		
	//		Если СтруктураСтатистики.ОплаченСписок.Количество() > 0 Тогда
	//			ТекстСообщения = ТекстСообщения + Символы.ПС + "Получено оплаченных документов: " + СтруктураСтатистики.ОплаченСписок.Количество();
	//			Для Каждого Док Из СтруктураСтатистики.ОплаченСписок Цикл
	//				ТекстСообщения = ТекстСообщения + Символы.ПС + Отступ + Док;
	//			КонецЦикла;
	//		КонецЕсли;	
	//		
	//		Если СтруктураСтатистики.ДоставкаРазрешенаСписок.Количество() > 0 Тогда
	//			ТекстСообщения = ТекстСообщения + Символы.ПС + "Получено документов с разрешенной доставкой: " + СтруктураСтатистики.ДоставкаРазрешенаСписок.Количество();
	//			Для Каждого Док Из СтруктураСтатистики.ДоставкаРазрешенаСписок Цикл
	//				ТекстСообщения = ТекстСообщения + Символы.ПС + Отступ + Док;
	//			КонецЦикла;
	//		КонецЕсли;	
	//		
	//		Если СтруктураСтатистики.ФинальныйСтатусСписок.Количество() > 0 Тогда
	//			ТекстСообщения = ТекстСообщения + Символы.ПС + "Получено документов в финальном статусе: " + СтруктураСтатистики.ФинальныйСтатусСписок.Количество();
	//			Для Каждого Док Из СтруктураСтатистики.ФинальныйСтатусСписок Цикл
	//				ТекстСообщения = ТекстСообщения + Символы.ПС + Отступ + Док;
	//			КонецЦикла;
	//		КонецЕсли;
	//		
	//		СообщитьПользователю(ТекстСообщения, Ложь);
	//		
	//	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции	


Процедура ПечатьРезультатаЗагрузки(ДеревоДокументов)
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Результат");
	Таб.ВывестиСекцию("Шапка");
	ДеревоДокументов.ВыбратьСтроки();
	Пока ДеревоДокументов.ПолучитьСтроку() = 1 Цикл
		Док = ДеревоДокументов.ДокументОбъект;
		Статус = ?(Док.Проведен()=1,"V","");
		Результат = ДеревоДокументов.ОписаниеРезультата;
		//Сообщить(Результат);
		
		Таб.ВывестиСекцию("Строка");
		Если ПустоеЗначение(Результат)=0 Тогда
			Таб.ВывестиСекцию("СтрокаРез");
		КонецЕсли;
	КонецЦикла;
	
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Результат загрузки с сайта");
КонецПроцедуры


Функция HTTPЗагрузитьССервера(СтруктураПараметровСайта, ТипСоединения, КоличествоОбработанныхДокументов)
	
	Успешно = Истина;
	ОтветСервера = "";
	Соединение = Неопределено;
	КоличествоОбработанныхДокументов = 0;
	
	АдресДляРаботы = АдресСкриптаСайта + "?type=" + ТипСоединения;
	
	СтрокаСообщенияПользователю = "";
	тмпФайл="";
	//Успешно = ОбработкаОбменССайтом.HTTPВыполнитьАвторизациюДляСоединения(СтруктураПараметровСайта, ОтветСервера, СтрокаСообщенияПользователю, ТипСоединения, тмпФайл);
	Успешно = ОбработкаОбменССайтом.HTTPВыполнитьАвторизациюДляСоединения(СтруктураПараметровСайта, ОтветСервера, СтрокаСообщенияПользователю, ТипСоединения);
	Если ПустаяСтрока(СтрокаСообщенияПользователю)=0 Тогда
		СообщитьОбОшибкеОбмена(СтрокаСообщенияПользователю, Ложь);						
	КонецЕсли;
	
	Если Успешно=Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Сообщить("=====   "+ОтветСервера);
	КукиИмя      	  = СтрПолучитьСтроку(ОтветСервера,2);
	КукиЗначение 	  = СтрПолучитьСтроку(ОтветСервера,3);
	ЗаголовкиЗапросов = "Cookie: " + КукиИмя + "=" + КукиЗначение;
	//Попытка
	//	т = СоздатьОбъект("Текст");
	//	т.Открыть(тмпФайл);
	//	КукиИмя      	  = т.ПолучитьСтроку(2);
	//	КукиЗначение 	  = т.ПолучитьСтроку(3);
	//	Соединение.УстановитьЗаголовокЗапроса("Cookie: " + КукиИмя, КукиЗначение);
	//Исключение
	//КонецПопытки;
	


	ОтобразитьСостояние("Загрузка данных с сервера...");
	
	ИнформацияДляПользователя = "";
	Запрос = АдресДляРаботы + ПараметрЗапросаHTTP_ПолучитьДанные;
	//ОтветСервера = HTTPПолучитьДанныеССервера(Соединение, Запрос, ЗаголовкиЗапросов, ИнформацияДляПользователя, ФайлЗагрузки);
	ОтветСервера = ОбработкаОбменССайтом.HTTPПолучитьДанныеССервера(СтруктураПараметровСайта, Запрос, ЗаголовкиЗапросов, ИнформацияДляПользователя);
	
	//Сообщить("+++  "+ОтветСервера);
	Предупреждение("Ожидание загрузки...", 5);
	
	Если ПустаяСтрока(ИнформацияДляПользователя)=0 Тогда
		СообщитьПользователю(ИнформацияДляПользователя, Ложь);
	КонецЕсли;
	
	Если ОтветСервера = Неопределено Тогда 
		СообщитьОбОшибкеОбмена("Не удалось загрузить данные с сервера.", Ложь);
		Возврат Ложь;
	КонецЕсли;
		
	СтрокаCML = "";
	
	Если Лев(ОтветСервера, 2) = "PK" Тогда
		Сообщить("ЗИПЫ не читаю");
		Возврат Ложь;
		//СтрокаCML = РаспаковатьZIPАрхив(ОтветСервера);
	Иначе
		Поз = Найти(ОтветСервера, "<?xml");
		Если Поз>0 Тогда
			ОтветСервера = Сред(ОтветСервера, Поз);
		КонецЕсли;
		Если Лев(ОтветСервера, 5) = "<?xml" Тогда
			//т = СоздатьОбъект("Текст");
			//т.Открыть(ФайлЗагрузки);
			//Для Н=1 По т.КоличествоСтрок() Цикл
			//	СтрокаCML = СтрокаCML + ?(ПустаяСтрока(СтрокаCML)=1,"",РазделительСтрок) + т.ПолучитьСтроку(Н);;
			//КонецЦикла;
			СтрокаCML = ОтветСервера;
		КонецЕсли;	
	КонецЕсли;						
	
	Если ЗначениеЗаполнено(СтрокаCML)=0 Тогда
		СообщитьОбОшибкеОбмена("Не удалось прочитать данные, загруженные с сервера.", Ложь);
		Возврат Ложь;		
	КонецЕсли;
	
	//%%%
	//Сообщить(СтрокаCML);
	Сообщить("Обработка: "+ФайлЗагрузки);
	т = СоздатьОбъект("Текст");
	т.ДобавитьСтроку(СтрокаCML);
	//т.Показать();
	т.Записать(ФайлЗагрузки);
	//Возврат Истина;
		
	ДеревоДокументов = РазобратьCML(ФайлЗагрузки, 1);
	//ДеревоДокументов = РазобратьCML(СтрокаCML, 0);
	
	Если ДеревоДокументов = Неопределено Тогда
		СообщитьОбОшибкеОбмена("Не удалось разобрать данные, загруженные с сервера.", Ложь);
		Возврат Ложь;		
	КонецЕсли;
		
	Успешно = ОбработатьДокументы(ДеревоДокументов, КоличествоОбработанныхДокументов);
	
	Если Успешно=Ложь Тогда 
		СообщитьОбОшибкеОбмена("Не удалось обработать документы, загруженные с сервера.", Ложь);
		Возврат Ложь;
	КонецЕсли;
	
	ИнформацияДляПользователя = "";
	Запрос = АдресДляРаботы + ПараметрЗапросаHTTP_УспешноеЗавершениеИмпорта;
	//HTTPПолучитьДанныеССервера(Соединение, Запрос, ЗаголовкиЗапросов, ИнформацияДляПользователя);
	ОтветСервера = ОбработкаОбменССайтом.HTTPПолучитьДанныеССервера(СтруктураПараметровСайта, Запрос, ЗаголовкиЗапросов, ИнформацияДляПользователя);
	Если ПустаяСтрока(ИнформацияДляПользователя)=0 Тогда
		СообщитьПользователю(ИнформацияДляПользователя, Ложь);
	КонецЕсли;
	
	ПечатьРезультатаЗагрузки(ДеревоДокументов);
					
	Возврат Успешно;
	
КонецФункции


//=======================================================================================
Функция ЗагрузитьЗаказыИзФайла(КоличествоОбработанныхДокументов)
	
	КоличествоОбработанныхДокументов = 0;
	
	Если ФС.СуществуетФайл(ФайлЗагрузки)=0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	//т = СоздатьОбъект("Текст");
	//Попытка
	//	т.Открыть(ФайлЗагрузки);
	//Исключение
	//	Возврат Ложь;
	//КонецПопытки;
	СтрокаCML = ФайлЗагрузки;
	//Файл = Новый Файл(ФайлЗагрузки);
	//Если НЕ Файл.Существует()
	//	ИЛИ Файл.ЭтоКаталог() Тогда
	//	
	//	Возврат Истина;
	//	
	//КонецЕсли;
	//
	//мСтруктураИнформацииИсторииОбмена.ДатаПоследнейЗагрузки = Текущаядата();
	//
	//ФайлCML = Новый ТекстовыйДокумент;
	//ФайлCML.Прочитать(ФайлЗагрузки);
	//СтрокаCML = ФайлCML.ПолучитьТекст();
	ДеревоДокументов = РазобратьCML(СтрокаCML, 1);
	
	Если ДеревоДокументов = Неопределено Тогда
		
		//мСтруктураИнформацииИсторииОбмена.РезультатПоследнейЗагрузки = Истина;
		//мСтруктураИнформацииИсторииОбмена.ДатаПоследнейЗагрузки = Текущаядата();
		Возврат Истина;
		
	КонецЕсли;
		
	Успешно = ОбработатьДокументы(ДеревоДокументов, КоличествоОбработанныхДокументов);
	Если Успешно=Ложь Тогда 
		СообщитьОбОшибкеОбмена("Не удалось обработать документы, загруженные из файла.", Ложь);		
	КонецЕсли;	
	
	//мСтруктураИнформацииИсторииОбмена.РезультатПоследнейЗагрузки = Успешно;
	//мСтруктураИнформацииИсторииОбмена.ДатаПоследнейЗагрузки = Текущаядата();
	
	ПечатьРезультатаЗагрузки(ДеревоДокументов);
		
	Возврат Успешно;
	
КонецФункции	


Функция ВыгрузитьЗаказыВФайл(СтруктураИзменений, СтруктураПараметровСайта, Знач КаталогДляВыгрузки = "", КоличествоВыгруженныхЗаказов = 0)
	
	Успешно = Истина;
	КоличествоВыгруженныхЗаказов = 0;
	
	//МассивИзменений   = Новый Массив;
	//
	//Если ВыгружатьТолькоИзменения Тогда
	//	
	//	МассивИзменений = СтруктураИзменений.Заказы;
	//	
	//	// из этого массива нужно удалить все только что загруженные заказы
	//	Для Каждого Эл Из мМассивЗагруженныхДокументов Цикл
	//		
	//		ИндексЭлемента = МассивИзменений.Найти(Эл);
	//		Если ИндексЭлемента <> Неопределено Тогда
	//			МассивИзменений.Удалить(ИндексЭлемента);
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//	Если МассивИзменений.Количество() = 0 Тогда
	//			
	//		СообщитьПользователю("Изменения заказов не зарегистрированы. Выгрузка заказов не произведена.", Истина); 
	//		Возврат Истина;
	//		
	//	КонецЕсли;	
	//		
	//КонецЕсли;
	//
	//ОбъектCMLСтрока   = "";
	//ТаблицаДокументов = СформироватьCMLСРанееЗагруженнымиЗаказами(ОбъектCMLСтрока, МассивИзменений);
	//
	//КоличествоВыгруженныхЗаказов = ТаблицаДокументов.Количество();
	//
	//Если КоличествоВыгруженныхЗаказов = 0 Тогда
	//	
	//	СообщитьПользователю("Не выгружен ни один заказ.", Истина);
	//    Возврат Успешно;
	//	
	//КонецЕсли;
	//
	//Если ПустаяСтрока(КаталогДляВыгрузки) Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	//	
	//ИмяФайлаОбмена 		 = "1cbitrix-" + Строка(Новый УникальныйИдентификатор) + ".xml";
	//ПолноеИмяФайлаОбмена = КаталогДляВыгрузки + "\" + ИмяФайлаОбмена;
	//
	//СоздатьКаталог(КаталогДляВыгрузки);
	//
	//ФайлCMLНаДиске = Новый ТекстовыйДокумент;
	//ФайлCMLНаДиске.УстановитьТекст(ОбъектCMLСтрока);
	//
	//Попытка
	//	ФайлCMLНаДиске.Записать(ПолноеИмяФайлаОбмена, "UTF-8");
	//Исключение
	//	СообщитьОбИсключительнойОшибке(Истина, "Не удалось записать CML файл на диск.");
	//	Возврат Ложь;
	//КонецПопытки;
	//
	//СообщитьПользователю("Выгружено заказов: " + ТаблицаДокументов.Количество(), Истина);	
	Возврат Истина;
	
КонецФункции



Функция ВыгрузитьЗаказыНаСайт(СтруктураИзменений, СтруктураПараметровСайта, КоличествоОбработанныхДокументовНаВыгрузке)
	
	//КаталогОбмена = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор);
	//
	//КоличествоОбработанныхДокументовНаВыгрузке = 0;
	//Успешно = ВыгрузитьЗаказыВФайл(СтруктураИзменений, СтруктураПараметровСайта, КаталогОбмена, КоличествоОбработанныхДокументовНаВыгрузке);
	//
	//Если Не Успешно	Тогда
	//	Возврат Ложь;
	//ИначеЕсли КоличествоОбработанныхДокументовНаВыгрузке = 0 Тогда
	//	Возврат Истина;
	//КонецЕсли;
	//
	//Успешно = HTTPВыгрузитьНаСервер(СтруктураПараметровСайта, КаталогОбмена, , , "sale");
	//
	//Попытка
	//	УдалитьФайлы(КаталогОбмена);
	//Исключение
	//КонецПопытки;
	//	
	//Возврат Успешно;
	 
	Возврат Истина;
КонецФункции


//=======================================================================================
Функция ВыполнитьОбменЗаказами(СтруктураИзменений="")
	Если ОпределитьМожноВыгружатьЗаказы()=0 Тогда
		
		СообщитьПользователю("Выгрузка заказов не произведена.", Истина);
		Возврат Истина;
		
	КонецЕсли;
	
	мМассивЗагруженныхДокументов = СоздатьОбъект("СписокЗначений");
	КоличествоОбработанныхДокументовНаЗагрузке = 0;
	КоличествоОбработанныхДокументовНаВыгрузке = 0;
	
	Если ВыгружатьНаСайт=1 Тогда
		
		HTTPОбменАдресСкрипта = АдресСкриптаСайта;
		СтруктураПараметровСайта = ПолучитьСтруктуруПараметровДляСоединения(АдресСкриптаСайта);		
		
		//мСтруктураИнформацииИсторииОбмена.ДатаПоследнейЗагрузки = Текущаядата();
		
		УспешноЗагружено = HTTPЗагрузитьССервера(СтруктураПараметровСайта, "sale", КоличествоОбработанныхДокументовНаЗагрузке);
		
		//мСтруктураИнформацииИсторииОбмена.РезультатПоследнейЗагрузки = УспешноЗагружено;
		//мСтруктураИнформацииИсторииОбмена.ДатаПоследнейЗагрузки = Текущаядата();
		
		УспешноВыгружено = ВыгрузитьЗаказыНаСайт(СтруктураИзменений, СтруктураПараметровСайта, КоличествоОбработанныхДокументовНаВыгрузке);
		
	Иначе
		
		УспешноЗагружено = ЗагрузитьЗаказыИзФайла(КоличествоОбработанныхДокументовНаЗагрузке);
		УспешноВыгружено = ВыгрузитьЗаказыВФайл(СтруктураИзменений, СтруктураПараметровСайта, КаталогВыгрузки, КоличествоОбработанныхДокументовНаВыгрузке);
		
	КонецЕсли;	
	
	Успешно = УспешноЗагружено * УспешноВыгружено;
	
	Если Успешно<>Ложь Тогда
		
		Если КоличествоОбработанныхДокументовНаЗагрузке + КоличествоОбработанныхДокументовНаВыгрузке > 0 Тогда
			СообщитьПользователю("Обмен заказами успешно завершен", Истина);
		КонецЕсли;
		
	Иначе
		СообщитьПользователю("Обмен заказами завершен с ошибками!!!", Истина);
	КонецЕсли;
	
	Возврат Успешно;
КонецФункции

//=======================================================================================
Функция ВыгрузитьПользователейВКаталогНаДиске(СтруктураИзменений, КаталогНаДиске) 
	
	// Выгрузка
	
	ИмяФайлаКаталога = КаталогНаДиске + "\clients.csv";
	
	Если фс.СуществуетФайл(КаталогНаДиске)=0 Тогда
		Попытка
			ФС.СоздатьКаталог(КаталогНаДиске);
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если фс.СуществуетФайл(КаталогНаДиске)=0 Тогда
		Сообщить("Не удалось создать каталог: "+КаталогНаДиске);
		Возврат Ложь;
	КонецЕсли;
	
	УдалитьФайлы(КаталогНаДиске, "*.csv");
	
	ДатаОтчета = ТекущаяДата();

	Состояние("Подготовка данных...");

	ТекстЗапроса="SELECT КлиентыОтветственныеПерсоны.ID [Ссылка $Справочник.КонтактнаяИнформация]
	|					, COALESCE($КлиентыГруппа.Идентификатор,$Клиенты.Идентификатор) КлиентИД
	|					, $КлиентыОтветственныеПерсоны.Логин Логин
	|					, $КлиентыОтветственныеПерсоны.Пароль Пароль
	|					, $КлиентыОтветственныеПерсоны.ЛогинАктивен ЛогинАктивен
	|					, $КлиентыОтветственныеПерсоны.Телефон МобТелефон
	|					, $КлиентыОтветственныеПерсоны.Телефон Телефон
	|					, $КлиентыОтветственныеПерсоны.Факс Факс
	|					, dbo.Conv1C2UTF($КлиентыОтветственныеПерсоны.ДолжностьНаим) Должность
	|					, КлиентыОтветственныеПерсоны.PARENTEXT [Подразделение $Справочник.Контрагенты]
	|					, $КлиентыОтветственныеПерсоны.ЭлПочта Емэйл
	|					, КлиентыОтветственныеПерсоны.DESCR Наименование
	|					, КлиентыОтветственныеПерсоны.ISMARK ПометкаУдаления
	|			   FROM $Справочник.КонтактнаяИнформация AS КлиентыОтветственныеПерсоны (NOLOCK)
	|			   INNER JOIN $Справочник.Контрагенты Клиенты (NOLOCK) ON Клиенты.ID = КлиентыОтветственныеПерсоны.PARENTEXT
	|			   INNER JOIN $Справочник.Контрагенты КлиентыГруппа (NOLOCK) ON КлиентыГруппа.ID = $Клиенты.КлГруппа
	|			   WHERE ($КлиентыОтветственныеПерсоны.Логин > '0')
	|";
	
	Запрос=СоздатьОбъект("ODBCRecordSet");
	табл=СоздатьОбъект("ТаблицаЗначений");
	табл=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
	тТекст=СоздатьОбъект("Текст");
	тТекст.КодоваяСтраница(0);
	тХедер="ACTIVE;LOGIN;PASSWORD;NAME;LAST_NAME;SECOND_NAME;EMAIL;DATE_REGISTER;LID;ADMIN_NOTES;EXTERNAL_AUTH_ID;XML_ID;";
	тХедер=тХедер+"PERSONAL_GENDER;PERSONAL_BIRTHDAY;PERSONAL_CITY;PERSONAL_STATE;PERSONAL_ZIP;PERSONAL_WWW;PERSONAL_PROFESSION;PERSONAL_NOTES;PERSONAL_ICQ;PERSONAL_PHONE;PERSONAL_PHOTO;PERSONAL_FAX;PERSONAL_MOBILE;PERSONAL_PAGER;PERSONAL_STREET;PERSONAL_MAILBOX;";
	тХедер=тХедер+"WORK_COMPANY;WORK_DEPARTMENT;WORK_POSITION;WORK_WWW;WORK_PHONE;WORK_FAX;WORK_PAGER;WORK_STREET;WORK_MAILBOX;WORK_CITY;WORK_STATE;WORK_ZIP;WORK_PROFILE;WORK_LOGO;WORK_NOTES;UF_WORK_COMPANY_ID;UF_WORK_COMPANY_CREDIT_LIMIT_AMOUNT;UF_WORK_COMPANY_CREDIT_LIMIT_DAYS";
	тХедер=тХедер+"";
	тТекст.ДобавитьСтроку(тХедер);
	
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку() = 1 Цикл
		
		позРазделителя=Найти(табл.Наименование," ");
		стрДанные=""+?((табл.ЛогинАктивен=0) ИЛИ (табл.ПометкаУдаления=1),"Нет","Да")+";" //ACTIVE	boolean (логический)	Нет, по умолчанию - Да (истина)	Активен
				  +СокрЛП(табл.Логин)+";" //	LOGIN	string (строка)	Нет, по умолчанию автоматически генерируется	Логин (мин. 3 символа)
				  +СокрЛП(табл.Пароль)+";"	//  PASSWORD	string (строка)	Нет, по умолчанию автоматически генерируется	Пароль (мин. 6 символов)
				  +СокрЛП(Лев(табл.Наименование,позРазделителя-1))+";" //NAME	string (строка)	Да	Имя
				  +СокрЛП(Сред(табл.Наименование,позРазделителя+1))+";" //LAST_NAME	string (строка)	Да	Фамилия
				  +";" //SECOND_NAME	string (строка)	Нет, по умолчанию не задано	Отчество
				  +СокрЛП(табл.Емэйл)+";"	//	EMAIL	string (строка)	Нет, по умолчанию указан e-mail администратора	E-mail
				  +";" //DATE_REGISTER	date (дата)	Нет, по умолчанию текущая дата	Дата регистрации
				  +";" //LID	string (строка)	Нет	ID сайта по умолчанию для уведомлений
				  +";" //ADMIN_NOTES	string (строка)	Нет	Заметки администратора
				  +";" //EXTERNAL_AUTH_ID	string (строка)	Нет	Код источника внешней авторизации
				  +";" //XML_ID	string (строка)	Нет	ID пользователя для связи с внешними источниками (например, ID пользователя в какой-либо внешний базе)
				   //Личные данные	Тип данных	Обязательность	Комментарии
				  +";" //PERSONAL_GENDER	string (строка)	Нет	Пол. M - муж.; F- жен.
				  +";" //PERSONAL_BIRTHDAY	date (дата)	Нет	В формате даты
				  +";" //PERSONAL_CITY	string (строка)	Нет	Город
				  +";" //PERSONAL_STATE	string (строка)	Нет	Область, район
				  +";" //PERSONAL_ZIP	string (строка)	Нет	Почтовый индекс
				  +";" //PERSONAL_WWW	string (строка)	Нет	Персональный сайт
				  +";" //PERSONAL_PROFESSION	string (строка)	Нет	Профессия
				  +";" //PERSONAL_NOTES	string (строка)	Нет	Персональные заметки
				  +";" //PERSONAL_ICQ	string (строка)	Нет	Номер ICQ
				  +";" //PERSONAL_PHONE	string (строка)	Нет	Домашний телефон
				  +";" //PERSONAL_PHOTO	string (строка)	Нет	Фото. Путь указывается относительно папки, указываемой в настройках импорта (поле Путь к картинкам относительно корня сайта), или относительно корня сайта, но при пустом значении поляПуть к картинкам относительно корня сайта
				  +";" //PERSONAL_FAX	string (строка)	Нет	Факс
				  +СокрЛП(табл.МобТелефон)+";" //PERSONAL_MOBILE	string (строка)	Нет	Мобильный номер
				 +";" //PERSONAL_PAGER	string (строка)	Нет	Пейджер
				 +";" //PERSONAL_STREET	string (строка)	Нет	Улица
				 +";" //PERSONAL_MAILBOX	string (строка)	Нет	Почтовый ящик
				 //	Работа	Тип данных	Обязательность	Комментарии
//				 +глLV_1C_WIN(СокрЛП(табл.Клиент.Наименование))+";" //WORK_COMPANY	string (строка)	Нет	Название компании
				 +"aўЎe§¦i®¬uЅјcҐЈgЄЁkЇЇlІ±nґіsє№zїѕ" +";" //WORK_COMPANY
				 +СокрЛП(табл.Подразделение.ПоАлфавиту) +";" //WORK_DEPARTMENT	string (строка)	Нет	Название подразделения
				 +СокрЛП(табл.Должность) +";" //WORK_POSITION	string (строка)	Нет	Должность
				 +";"  //WORK_WWW	string (строка)	Нет	Рабочий сайт
				 +СокрЛП(табл.Телефон)+";"  //WORK_PHONE	string (строка)	Нет	Телефон
				 +СокрЛП(табл.Факс)+";"  //WORK_FAX	string (строка)	Нет	Факс
				 +";"  //WORK_PAGER	string (строка)	Нет	Пейджер
				 +СокрЛП(табл.Подразделение.Адрес1)+";"   //WORK_STREET	string (строка)	Нет	Улица
				 +СокрЛП(табл.Клиент.ЭлПочта)+";" //WORK_MAILBOX	string (строка)	Нет	Почтовый ящик
				 +СокрЛП(табл.Подразделение.Адрес2)+";"   //WORK_CITY	string (строка)	Нет	Город
				 +СокрЛП(табл.Подразделение.Адрес3)+";"  //WORK_STATE	string (строка)	Нет	Область, район
				 +СокрЛП(табл.Подразделение.ПочтовыйИндекс)+";"  //WORK_ZIP	string (строка)	Нет	Почтовый индекс
				 +";"  //WORK_PROFILE	string (строка)	Нет	Направление деятельности компании
				 +";"  //WORK_LOGO	string (строка)	Нет	Фото. Путь указывается относительно папки, указываемой в настройках импорта (поле Путь к картинкам относительно корня сайта), или относительно корня сайта, но при пустом значении поляПуть к картинкам относительно корня сайта
				 +";"  //WORK_NOTES	string (строка)	Нет	Рабочие заметки
				 +СокрЛП(табл.Клиент.Рег_номер)+";" //UF_WORK_COMPANY_ID UF_*	string (строка)	Нет	Пользовательское свойство
				 +табл.Клиент.СуммаКредита.Получить(РабочаяДата())+";"  //UF_WORK_COMPANY_CREDIT_LIMIT_AMOUNT UF_*	string (строка)	Нет	Пользовательское свойство
				 +табл.Клиент.Глубина.Получить(РабочаяДата())+""  //UF_WORK_COMPANY_CREDIT_LIMIT_DAYS UF_*	string (строка)	Нет	Пользовательское свойство
				 ;//+";";  //IBLOCK_SECTION_NAME_*	string (строка)	Нет	Привязка к инфоблоку
		тТекст.ДобавитьСтроку(стрДанные);
				 
	КонецЦикла;

	
	тТекст.Записать(ИмяФайлаКаталога);
	
КонецФункции

Процедура ВыгрузитьПользователей(СтруктураИзменений="")

	Если ПустаяСтрока(КаталогВыгрузки)=1 Тогда
		КаталогВыгрузки = КаталогВременныхФайлов();
	Иначе
	КонецЕсли;
	
	//%%%
	Попытка
		Если ФС.СуществуетФайл(КаталогВыгрузки)=0 Тогда
			ФС.СоздатьКаталог(КаталогВыгрузки);
		КонецЕсли;
	Исключение
		КаталогВыгрузки = КаталогВременныхФайлов();
	КонецПопытки;
	
	ПоследнийСимвол = Сред(КаталогВыгрузки, СтрДлина(КаталогВыгрузки), 1);
	Если ПоследнийСимвол <> "\" Тогда
		КаталогВыгрузки = КаталогВыгрузки + "\";			
	КонецЕсли;
	
	КаталогВыгрузкиЗащищенный = КаталогВыгрузки + ПодкаталогБезопасностиКаталогаВыгрузки;
	
	
	СтруктураРезультата = ВыгрузитьПользователейВКаталогНаДиске(СтруктураИзменений, КаталогВыгрузкиЗащищенный);
	

КонецПроцедуры

Процедура УдалитьОбработанныйФайл( пФайл, Ошибка = 0 )
	КаталогНазначения=?(Ошибка=1,"\NotProcessed","\Processed");
	ТекВремя="_"+СтрЗаменить(ТекущаяДата(),".","")+"_"+СтрЗаменить(ТекущееВремя(),":","");
	
	
	Если ФС.СуществуетФайл(СокрЛП(КаталогВыгрузки+ПодкаталогБезопасностиКаталогаВыгрузки)+КаталогНазначения) = 0 Тогда
		ФС.СоздатьКаталог(СокрЛП(КаталогВыгрузки+ПодкаталогБезопасностиКаталогаВыгрузки)+КаталогНазначения);
	КонецЕсли;
	ФС.КопироватьФайл(СокрЛП(КаталогВыгрузки+ПодкаталогБезопасностиКаталогаВыгрузки)+"\"+пФайл,СокрЛП(КаталогВыгрузки+ПодкаталогБезопасностиКаталогаВыгрузки)+КаталогНазначения+"\"+пФайл+ТекВремя,0);
	ФС.УдалитьФайл(СокрЛП(КаталогВыгрузки+ПодкаталогБезопасностиКаталогаВыгрузки)+"\"+пФайл);
КонецПроцедуры


//=======================================================================================
Процедура ВыгрузитьДанные()	
	
	Если ПустаяСтрока(КаталогВыгрузки)=1 Тогда
		КаталогВыгрузки = КаталогВременныхФайлов();
	Иначе
	КонецЕсли;

	Если ПустаяСтрока(КаталогВыгрузки)=0 Тогда
		
		ФайлЗагрузки = КаталогВыгрузки + "\order.xml";
		
	КонецЕсли;
	
	//КаталогВыгрузки = СтрЗаменить(КаталогВыгрузки,"\\","\");
	
	//Если ВыгружатьТолькоИзменения Тогда
	//	СтруктураИзменений = ПолучитьВсеИзмененияИзПланаОбмена();
	//КонецЕсли;
	
	ВыгружатьНаСайт = 0;
	Если спТипОбмена.ПолучитьЗначение(спТипОбмена.ТекущаяСтрока())="сайт" Тогда
		ВыгружатьНаСайт = 1;
	КонецЕсли;
	
	Если (ВыгружатьНаСайт=0) и (ПустаяСтрока(КаталогВыгрузки)=1) Тогда
		Сообщить("Не указан каталог для выгрузки");
		Возврат;
	КонецЕсли;
	
	ПодготовитьЕдиницы();
	
	//%%% создаем список свойств
	ПодготовитьСвойстваКВыгрузке();
	
	Если ОбменТоварами=1 Тогда 
		
		ТоварыУспешноВыгружены = ВыгрузитьТовары();
		
		//Если ВыгружатьТолькоИзменения
		//	И ТоварыУспешноВыгружены Тогда
		//	
		//	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбменаТоварами, СтруктураИзменений.НомерСообщенияТовары);
		//	
		//КонецЕсли;
		
	Иначе
		ТоварыУспешноВыгружены = Истина;
	КонецЕсли;
	
	Если ОбменЗаказами=1 Тогда
		
		ЗаказыУспешноВыгружены = ВыполнитьОбменЗаказами();
		
		//Если ВыгружатьТолькоИзменения
		//	И ЗаказыУспешноВыгружены Тогда
		//	
		//	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбменаЗаказами, СтруктураИзменений.НомерСообщенияЗаказы);
		//	
		//КонецЕсли;
		
	Иначе
	    ЗаказыУспешноВыгружены = Истина;
	КонецЕсли;
	
	глПодготовитьСкидкиКлиентов(Константа.ОсновнаяКатегорияЦены);
	//ВыгрузитьКлиентовИЦены();
	
	ВыгрузитьПользователей();
	
	ОбменДанными = СоздатьОбъект("AddIn.CeDataExch");
	//подключение к ФТП серверу
	ФТПСервер 		= СокрЛП(Константа.ФТПСерверОбменаWEB); //"ftp.reaton.lv";
	ФТПСерверЛогин	= СокрЛП(Константа.ФТПЛогинОбменаWEB);//"Bitrix";
	ФТПСерверПароль	= СокрЛП(Константа.ФТППарольОбменаWEB); //"bitrix";
	
	
	Т_ = СимволТабуляции;
	СтрФайлов = "";

	Попытка
		RarusApi=СоздатьОбъект("Rarus.ApiExtender");
	Исключение
		ФС.КопироватьФайл(Путь+"\RarusLib.dll",КаталогПрограммы()+"RarusLib.dll",1);
		exe="regsvr32.exe ";
		Парам=Симв(34)+КаталогПрограммы()+"RarusLib.dll"+Симв(34);
		ЗапуститьПриложение(exe+Парам);
		//Предупреждение("Необходимо перезапустить программу.");
		Предупреждение("       Необходимо перезапустить программу."+Симв(13)+Симв(13)+
		"Если при повторном запуске снова появится это сообщение,"+Симв(13)
		+"обратитесь к системному администратору");
		ЗавершитьРаботуСистемы(0);
	КонецПопытки;
	
	ФайлВыгрузки = "Bitrix1C.zip";
	RarusApi.zipOpen(КаталогВыгрузки+ПодкаталогБезопасностиКаталогаВыгрузки+ФайлВыгрузки);
	RarusApi.zipZipLevel=9;
	

	ЕстьОшибки = 0;
	ФС.УстТекКаталог(КаталогВыгрузки+ПодкаталогБезопасностиКаталогаВыгрузки);
	ФайлАрхива = ФС.НайтиПервыйФайл("*.xml");
	Пока ПустоеЗначение(ФайлАрхива)=0 Цикл
		Если ПустоеЗначение(СтрФайлов)=0 Тогда
			СтрФайлов=СтрФайлов+СимволТабуляции;
		КонецЕсли;
		СтрФайлов = СтрФайлов + ФайлАрхива + СимволТабуляции + КаталогВыгрузки+ПодкаталогБезопасностиКаталогаВыгрузки+ФайлАрхива;
		
		RarusApi.zipAddFile(КаталогВыгрузки+ПодкаталогБезопасностиКаталогаВыгрузки+ФайлАрхива,0);

		ФайлАрхива = ФС.НайтиСледующийФайл();
		
	КонецЦикла;

	ФайлАрхива = ФС.НайтиПервыйФайл("*.csv");
	Пока ПустоеЗначение(ФайлАрхива)=0 Цикл
		Если ПустоеЗначение(СтрФайлов)=0 Тогда
			СтрФайлов=СтрФайлов+СимволТабуляции;
		КонецЕсли;
		СтрФайлов = СтрФайлов + ФайлАрхива + СимволТабуляции + КаталогВыгрузки+ПодкаталогБезопасностиКаталогаВыгрузки+ФайлАрхива;
		
		RarusApi.zipAddFile(КаталогВыгрузки+ПодкаталогБезопасностиКаталогаВыгрузки+ФайлАрхива,0);
		
		ФайлАрхива = ФС.НайтиСледующийФайл();
		
	КонецЦикла;

	//ФайлВыгрузки2 = "Bitrix1C2.zip";
//	СтрФайлов="offers.xml	i:\Transfer\Bitrix\1cbitrix\offers.xml	import.xml	i:\Transfer\Bitrix\1cbitrix\import.xml	clients.csv	i:\Transfer\Bitrix\1cbitrix\clients.csv";
	Если ПустоеЗначение(СтрФайлов)=1 Тогда
		Сообщить(Шаблон("Нет файлов для архивации!"),"!");
		ЗаписьЖурналаРегистрации(Шаблон("Нет файлов для архивации. Данные не отправлены!"),,"Обмен данными WEB",,5);
	Иначе
		
		RarusApi.zipClose();
		
	КонецЕсли;

	Если ПолнаяВыгрузка=0 Тогда
		
		ИмяФайлаФТП = ФайлВыгрузки;
	
		Если ПодключениеКФТП(ФТПСервер,ФТПСерверЛогин,ФТПСерверПароль) = 0 Тогда
		    Возврат;
		КонецЕсли;	
	
		Результат = ОбменДанными.FtpPutFile(КаталогВыгрузки+ПодкаталогБезопасностиКаталогаВыгрузки+"\"+ФайлВыгрузки, ИмяФайлаФТП);
		Если Результат <> 0 Тогда
			ЕстьОшибки = 1;
			Причина = ОбменДанными.ErrDescription(Результат);
			Сообщить(Шаблон("Файл [ФайлВыгрузки] для WEB не отправлен!"),"!");
		    Сообщить(Шаблон("Причина: [Причина]")," ");
			ЗаписьЖурналаРегистрации(Шаблон("Файл [ФайлВыгрузки] для WEB не отправлен!
			| Причина: [Причина]"),,"Обмен данными WEB",,5);
			ОбменДанными.FtpDeleteFile(ИмяФайлаФТП);
		Иначе
			ВремяОтправки=ТекущееВремя();
			Сообщить(Шаблон("Файл [ФайлВыгрузки] для WEB успешно отправлен!"),"!");
			УдалитьОбработанныйФайл(ФайлВыгрузки,0);
			//УдалитьФайлы(КаталогВыгрузки+ПодкаталогБезопасностиКаталогаВыгрузки,"*.*");
			ЗаписьЖурналаРегистрации(Шаблон("Файл [ФайлВыгрузки] для WEB успешно отправлен!"),,"Обмен данными WEB",,2);
		КонецЕсли;
	
		ОбменДанными.FtpCloseSession();
	
		Если ЕстьОшибки = 0 Тогда
			Сообщить("Выгрузка товаров успешно завершена");
			ОчисткаТаблицыВыгруженныхТоваров();
		КонецЕсли;
	Иначе
		//полная выгрузка
		Сообщить("Была сделана полная выгрузка - вручную скопируйте файл "+ ФайлВыгрузки+" на сервер!");
		
	КонецЕсли;		
	
	//мСтруктураИнформацииИсторииОбмена.ДатаПоследнейВыгрузки = ТекущаяДата();
	//мСтруктураИнформацииИсторииОбмена.РезультатПоследнейВыгрузки = ТоварыУспешноВыгружены И ЗаказыУспешноВыгружены;
	//		
	//ЗаписатьИнформациюВПротоколОбмена(мСтруктураИнформацииИсторииОбмена);
		
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////
// Обработчики событий
Процедура ПриИзмененииФлИспользоватьПрокси()
	Форма.ПользовательПрокси.Доступность(флИспользоватьПрокси);
	Форма.ПарольПрокси.Доступность(флИспользоватьПрокси);
	Форма.НадписьПользовательПрокси.Доступность(флИспользоватьПрокси);
	Форма.НадписьПарольПрокси.Доступность(флИспользоватьПрокси);
КонецПроцедуры


Функция ОткрытьМенюСравки()
	СЗ = СоздатьОбъект("СписокЗначений");
	СЗ.ДобавитьЗначение("сайт", "Applix.ru - ВСЕ ДЛЯ 1С");
	СЗ.ДобавитьЗначение("отзыв", "Написать отзыв о программе");
	СЗ.ДобавитьЗначение("вопрос", "Задать вопрос по программе");
	СЗ.ДобавитьЗначение("скайп", "Написать сообщение разработчику в скайп");
	СЗ.ДобавитьЗначение("почта", "Написать e-mail разработчику");
	СЗ.ДобавитьЗначение("-------------------------");
	СЗ.ДобавитьЗначение("программа", "О программе");
	
	Зн = "";
	Если СЗ.ВыбратьЗначение(Зн,,,,1)=1 Тогда
		Если Зн="сайт" Тогда
			ЗапуститьПриложение("www.applix.ru");
		ИначеЕсли Зн="отзыв" Тогда
			ЗапуститьПриложение("www.applix.ru/forumy/obmen-dannymi-1stis-77-i-bitriks-hostcms-webasyst-umicms");
		ИначеЕсли Зн="вопрос" Тогда
			ЗапуститьПриложение("www.applix.ru/forumy/obmen-dannymi-1stis-77-i-bitriks-hostcms-webasyst-umicms");
		ИначеЕсли Зн="скайп" Тогда
			ЗапуститьПриложение("skype:spy-83?chat");
		ИначеЕсли Зн="почта" Тогда
			ЗапуститьПриложение("mailto:1c@applix.ru");
		ИначеЕсли Зн="программа" Тогда
			ЗапуститьПриложение("www.applix.ru/product/obmen-dannymi-1stis-77-i-bitriks-hostcms-webasyst-umicms.html");
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ййй()
	ДеревоДокументов = РазобратьCML("H:\ПРОЧЕЕ\Загрузки\1cbit_exchange_php.xml", 1);
	//ДеревоДокументов = РазобратьCML(СтрокаCML, 0);
	
	Если ДеревоДокументов = Неопределено Тогда
		СообщитьОбОшибкеОбмена("Не удалось разобрать данные, загруженные с сервера.", Ложь);
		Возврат Ложь;		
	КонецЕсли;
		
	КоличествоОбработанныхДокументов = 0;
	Успешно = ОбработатьДокументы(ДеревоДокументов, КоличествоОбработанныхДокументов);
	
	Если Успешно=Ложь Тогда 
		СообщитьОбОшибкеОбмена("Не удалось обработать документы, загруженные с сервера.", Ложь);
		Возврат Ложь;
	КонецЕсли;
	
	//ИнформацияДляПользователя = "";
	//Запрос = АдресДляРаботы + ПараметрЗапросаHTTP_УспешноеЗавершениеИмпорта;
	////HTTPПолучитьДанныеССервера(Соединение, Запрос, ЗаголовкиЗапросов, ИнформацияДляПользователя);
	//ОтветСервера = ОбработкаОбменССайтом.HTTPПолучитьДанныеССервера(СтруктураПараметровСайта, Запрос, ЗаголовкиЗапросов, ИнформацияДляПользователя);
	//Если ПустаяСтрока(ИнформацияДляПользователя)=0 Тогда
	//	СообщитьПользователю(ИнформацияДляПользователя, Ложь);
	//КонецЕсли;
	
	ПечатьРезультатаЗагрузки(ДеревоДокументов);
					
	Возврат Успешно;
//	МассивИсходныхCMLФайлов = НайтиФайлы(КаталогВыгрузки, "*.xml");
//	СписокФайловДляОтправки = ПолучитьСписокФайловДляОтправки(КаталогВыгрузки, Неопределено);
//		
//	//ПерекодироватьВУТФ8(СписокФайловДляОтправки);
//
//	//Если ZIPФайлыРазрешены=Истина Тогда
//		Состояние("Подготовка ZIP-архива...");
//		СписокФайловДляОтправки = ПодготовитьZIPАрхивы(СписокФайловДляОтправки);
//	//Иначе
//		//Сообщить("ZIP-файлы не разрешены");
//	///КонецЕсли;	
//	
//	Для Н=1 По СписокФайловДляОтправки.РазмерСписка() Цикл
//		Сообщить(СписокФайловДляОтправки.ПолучитьЗначение(Н));
//	КонецЦикла;
КонецФункции



//
// инициализация переменных множественного фильтра
ТипМФ.УдалитьВсе();
ТипМФ.ДобавитьЗначение("одно из");
ТипМФ.ДобавитьЗначение("все кроме");

ТаблицаМФ.НоваяКолонка("Тип");
ТаблицаМФ.НоваяКолонка("Вид");
ТаблицаМФ.НоваяКолонка("ИмяПеременной");
ТаблицаМФ.НоваяКолонка("СписокЭлементов"); // список элементов, по которым производим фильтрацию
ТаблицаМФ.НоваяКолонка("ТипМФ"); // текущая строка списка ТипМФ
ТаблицаМФ.НоваяКолонка("ФлВкл","Число",1,,"Вкл",5,,); // фильтр включен ("1" или "0")
ТаблицаМФ.НоваяКолонка("Представление",,,,"Вид фильтра:");
ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");

ТекСтрокаВТаблице="";

//========================================================
спТипОбмена.ДобавитьЗначение("каталог", "Обмен через каталог");
спТипОбмена.ДобавитьЗначение("сайт", "Обмен с сайтом");

СпособИдентификацииКонтрагентов.ДобавитьЗначение("наименование", "по Наименованию");
СпособИдентификацииКонтрагентов.ДобавитьЗначение("инн", "по ИНН");

спУстановкаДатыЗаказов.ДобавитьЗначение("сайт", "По информации документа с сайта");
спУстановкаДатыЗаказов.ДобавитьЗначение("текущая", "Устанавливать текущую дату");

спПроведениеЗаказов.ДобавитьЗначение("записывать", "Только записывать");
спПроведениеЗаказов.ДобавитьЗначение("проводить", "Записывать и проводить");

// битрикс
ПодкаталогКартинок 					   = "import_files\";
ПодкаталогБезопасностиКаталогаВыгрузки = "1cbitrix\";

Истина = 1;
Ложь = 0;
Неопределено = ПолучитьПустоеЗначение();

НаименованиеКаталогаТоваровCML   = "Каталог товаров";
НаименованиеПакетаПредложенийCML = "Пакет предложений";

НаименованиеНалога 			= "НДС";

ПараметрЗапросаHTTP_Инициализация       	  = "&mode=init";
ПараметрЗапросаHTTP_ПередачаФайла       	  = "&mode=file&filename=";
ПараметрЗапросаHTTP_ИмпортФайлаСервером		  = "&mode=import&filename=";
ПараметрЗапросаHTTP_ПолучитьДанные	    	  = "&mode=query"; 
ПараметрЗапросаHTTP_УспешноеЗавершениеИмпорта = "&mode=success";

ОтветСервера_ZIPРазрешен							= "zip=yes";
ОтветСервера_ОграничениеРазмераФрагментаФайлаОбмена = "file_limit=";
ОтветСервера_УспешноеЗавершениеТекущейОперации 		= "success";
ОтветСервера_АварийноеЗавершениеТекущейОперации		= "failure";
ОтветСервера_ВыполнениеТекущейОперации 				= "progress";

//ограничим до 6ти символов
ОтветСервера_УспешноеЗавершениеТекущейОперации 		= "succes";
ОтветСервера_АварийноеЗавершениеТекущейОперации		= "failur";
ОтветСервера_ВыполнениеТекущейОперации 				= "progre";

//Рубли = Рубли;

//%%%
ТЗ_ВыгрузкаСвойств.НоваяКолонка("Реквизит");
ТЗ_ВыгрузкаСвойств.НоваяКолонка("НаименованиеНаСайте",,,,"Наименование на сайте");
ТЗ_ВыгрузкаСвойств.НоваяКолонка("Выгружать","Число",1,,"Свойство",10);
ТЗ_ВыгрузкаСвойств.НоваяКолонка("ВыгружатьРеквизит","Число",1,,"Реквизит",10);
ТЗ_ВыгрузкаСвойств.ВыводитьПиктограммы("Выгружать");
ТЗ_ВыгрузкаСвойств.ВыводитьПиктограммы("ВыгружатьРеквизит");


ТЗ_ВыгрузкаРеквизитов.НоваяКолонка("Выгружать","Число",1,,,10);
ТЗ_ВыгрузкаРеквизитов.НоваяКолонка("Реквизит");
ТЗ_ВыгрузкаРеквизитов.НоваяКолонка("НаименованиеТега",,,,"Наименование тега");
ТЗ_ВыгрузкаРеквизитов.ВыводитьПиктограммы("Выгружать");

Попытка
	ДопФункции = СоздатьОбъект("AddIn.KipAddon");
Исключение
	Если ЗагрузитьВК("KipAddon1c.dll")=Истина Тогда
		ДопФункции = СоздатьОбъект("AddIn.KipAddon");
	КонецЕсли;
КонецПопытки;

Попытка
	ОбработкаОбменССайтом = СоздатьОбъект("AddIn.ExchangeSite1C77");
Исключение
	Если ЗагрузитьВК("KipInet1C77.dll")=Истина Тогда
		ОбработкаОбменССайтом = СоздатьОбъект("AddIn.ExchangeSite1C77");
	КонецЕсли;
КонецПопытки;

Результат = Загрузчик.ЗагрузитьВК(Путь+"\APPlus.dll", "Addin.AddInObject=04024C31-0E7B-11d1-A486-004095E1DAEA");
    
КомпонентаЗагружена = 0;
Если Результат.КодОшибки = 0 Тогда
	КомпонентаЗагружена = 1;
Иначе                                                                                  
    Сообщить("Ошибка " + Результат.КодОшибки + РазделительСтрок + Результат.Результат);
//		СтатусВозврата(0);
//		Возврат;
КонецЕсли;	


сзКлюч = СоздатьОбъект("СписокЗначений");
	
ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");
СписокФайловКартинок = СоздатьОбъект("СписокЗначений");

ВерсияОбработки = "2.0.0.0";
КаталогВыгрузки = "\\fstore\TRANSFER\Bitrix\"; 
ОбменТоварами	= 1;
Спр=СоздатьОбъект("Справочник.Каталоги");
Спр.ВыбратьЭлементы();
Спр.ПолучитьЭлемент();
КаталогНоменклатуры=Спр.ТекущийЭлемент();
Путь = СокрЛП(Константа.ПутьКВнешнимБиблиотекам);
итЕдиницы = СоздатьОбъект("ИндексированнаяТаблица");