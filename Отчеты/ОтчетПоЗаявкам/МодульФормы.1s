Перем ЗапросЗаказы;
перем итЗаявки, итЗаявкиПоТоварам, итЗаказыПоТоварам,итОжПоставкиПоТоварам;
Перем Запрос;

Процедура РасшифровкаЗаказаНовый( пПоставщик, Товар = "" )
	таб = СоздатьОбъект( "Таблица" );
	таб.ИсходнаяТаблица( "Заказ" );
	таб.ВывестиСекцию( "Шапка" );		
	таб.Опции( 0, 0, таб.ВысотаТаблицы(), 0 );
	итЗаказыПоТоварам.УстановитьФильтр(пПоставщик,пПоставщик,"Поставщик");
	итЗаказыПоТоварам.ВыбратьСтроки("Поставщик");
	Если итЗаказыПоТоварам.ПолучитьСтроку("Поставщик") = 1 Тогда
//		пПоставщик = ЗапросЗаказы.Поставщик;
		таб.ВывестиСекцию( "Поставщик" );		
		итЗаявкиПоТоварам2=итЗаказыПоТоварам.тзПотомки;
		итЗаявкиПоТоварам2.Сортировать("Товар");
		итЗаявкиПоТоварам2.ВыбратьСтроки();
		Пока итЗаявкиПоТоварам2.ПолучитьСтроку() = 1 Цикл
			пТовар = итЗаявкиПоТоварам2.Товар;
			Если ( ПустоеЗначение( Товар ) <> 1 )  и ( пТовар <> Товар ) Тогда Продолжить; КонецЕсли;
			пЕдИзм = пТовар.БазоваяЕдиницаИзмерения; 
			пЗаказ = итЗаявкиПоТоварам2.Заказано;
			таб.ВывестиСекцию( "Товар" );		

			итЗаявкиПоТоварамДок=итЗаявкиПоТоварам2.тзПотомки;
			итЗаявкиПоТоварамДок.Сортировать("*ПоЗаказу");
			итЗаявкиПоТоварамДок.ВыбратьСтроки();
			Пока итЗаявкиПоТоварамДок.ПолучитьСтроку() = 1 Цикл
				пДок = Шаблон( "Заказ поставщику [итЗаявкиПоТоварамДок.ПоЗаказу.НомерДок] ([итЗаявкиПоТоварамДок.ПоЗаказу.ДатаДок])" );
				пЗаказ = итЗаявкиПоТоварамДок.Заказано;
				таб.ВывестиСекцию( "Документ" );		
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	таб.ПараметрыСтраницы(,,,,,,,,,,1,);
	таб.ТолькоПросмотр( 1 );
	таб.Показать( "Заказано у поставщика" );
КонецПроцедуры
Процедура РасшифровкаОжПоставки( пПоставщик, Товар = "" )
	таб = СоздатьОбъект( "Таблица" );
	таб.ИсходнаяТаблица( "ОжПоставка" );
	таб.ВывестиСекцию( "Шапка" );		
	таб.Опции( 0, 0, таб.ВысотаТаблицы(), 0 );
	итОжПоставкиПоТоварам.УстановитьФильтр(пПоставщик,пПоставщик,"Поставщик");
	итОжПоставкиПоТоварам.ВыбратьСтроки("Поставщик");
	Если итОжПоставкиПоТоварам.ПолучитьСтроку("Поставщик") = 1 Тогда
//		пПоставщик = ЗапросЗаказы.Поставщик;
		таб.ВывестиСекцию( "Поставщик" );		
		итЗаявкиПоТоварам2=итОжПоставкиПоТоварам.тзПотомки;
		итЗаявкиПоТоварам2.Сортировать("Товар");
		итЗаявкиПоТоварам2.ВыбратьСтроки();
		Пока итЗаявкиПоТоварам2.ПолучитьСтроку() = 1 Цикл
			пТовар = итЗаявкиПоТоварам2.Товар;
			Если ( ПустоеЗначение( Товар ) <> 1 )  и ( пТовар <> Товар ) Тогда Продолжить; КонецЕсли;
			пЕдИзм = пТовар.БазоваяЕдиницаИзмерения; 
			пЗаказ = итЗаявкиПоТоварам2.Заказано;
			таб.ВывестиСекцию( "Товар" );		

			итПоТоварамДок=итЗаявкиПоТоварам2.тзПотомки;
			итПоТоварамДок.Сортировать("*Док");
//			итПоТоварамДок.Показать();
			итПоТоварамДок.ВыбратьСтроки();
			Пока итПоТоварамДок.ПолучитьСтроку() = 1 Цикл
				пДок = Шаблон( "Ожидаемая поставка [итПоТоварамДок.Док.НомерДок] ([итПоТоварамДок.Док.ДатаДок])" );
				пЗаказ = итПоТоварамДок.Заказано;
				таб.ВывестиСекцию( "Документ" );		
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	таб.ПараметрыСтраницы(,,,,,,,,,,1,);
	таб.ТолькоПросмотр( 1 );
	таб.Показать( "Ожидает поставки от поставщика" );
	итОжПоставкиПоТоварам.ВыключитьФильтр("Поставщик");
КонецПроцедуры


Процедура РасшифровкаЗаказа( пПоставщик, Товар = "" )
	таб = СоздатьОбъект( "Таблица" );
	таб.ИсходнаяТаблица( "Заказ" );
	таб.ВывестиСекцию( "Шапка" );		
	таб.Опции( 0, 0, таб.ВысотаТаблицы(), 0 );
	ЗапросЗаказы.ВНачалоВыборки();
	Если ЗапросЗаказы.Получить( пПоставщик,, ) = 1 Тогда
		пПоставщик = ЗапросЗаказы.Поставщик;
		таб.ВывестиСекцию( "Поставщик" );		
		Пока ЗапросЗаказы.Группировка( "Товар" ) = 1 Цикл
			пТовар = ЗапросЗаказы.Товар;
			Если ( ПустоеЗначение( Товар ) <> 1 )  и ( пТовар <> Товар ) Тогда Продолжить; КонецЕсли;
			пЕдИзм = пТовар.БазоваяЕдиницаИзмерения; 
			пЗаказ = ЗапросЗаказы.ЗаказаноТовара;
			таб.ВывестиСекцию( "Товар" );		
			Пока ЗапросЗаказы.Группировка( "Заказ" ) = 1 Цикл
				пДок = Шаблон( "Заказ поставщику [ЗапросЗаказы.НомерДок] ([ЗапросЗаказы.ДатаДок])" );
				пЗаказ = ЗапросЗаказы.ЗаказаноТовара;
				таб.ВывестиСекцию( "Документ" );		
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	таб.ПараметрыСтраницы(,,,,,,,,,,1,);
	таб.ТолькоПросмотр( 1 );
	таб.Показать( "Заказано у поставщика" );
КонецПроцедуры

Процедура ОбработкаЯчейкиТаблицы( пЗнач, пФлаг, пТаблица, пАдрес )
	Если Прав( пАдрес, 2 ) = "C6" Тогда
		пФлаг = 0;
		Если пЗнач.Вид() = "Контрагенты" Тогда
			РасшифровкаЗаказаНовый( пЗнач );
		ИначеЕсли пЗнач.Вид() = "Номенклатура" Тогда
			РасшифровкаЗаказаНовый( пЗнач.Поставщик, пЗнач );
		КонецЕсли;
	ИначеЕсли  Прав( пАдрес, 2 ) = "C7" Тогда
		пФлаг = 0;
		Если пЗнач.Вид() = "Контрагенты" Тогда
			РасшифровкаОжПоставки( пЗнач );
		ИначеЕсли пЗнач.Вид() = "Номенклатура" Тогда
			РасшифровкаОжПоставки( пЗнач.Поставщик, пЗнач );
		КонецЕсли;

	Иначе
		//если нажали на кнопку заказ поставщику
		Если пЗнач.Вид() = "Контрагенты" Тогда
			пФлаг = 0;
			сп = СоздатьОбъект( "СписокЗначений" );
			сп.Установить("Поставщик", пЗнач);
			табл = СоздатьОбъект( "ТаблицаЗначений" );
			табл.НоваяКолонка("Номенклатура");
			табл.НоваяКолонка("Количество");
			табл.НоваяКолонка("ПоСчету");
			НомСтр = 0;
			сзКлюч=СоздатьОбъект("СписокЗначений");
			сзКлюч.ДобавитьЗначение(пЗнач);
//			сзКлюч.ДобавитьЗначение(Перечисление.ВидыЗаявок.СпецЗаказ);
			итЗаявки.Подмножество(сзКлюч,1,"иПоставщик");
			
			Если итЗаявки.ВыбратьСтроки("иПоставщик")=0 Тогда
				Предупреждение("Отсутствуют товары по спец. заказу у данного поставщика!");
				Возврат;
			КонецЕсли;
			Пока итЗаявки.ПолучитьСтроку("иПоставщик")=1 Цикл
				Если Число(итЗаявки.СпецЗаказ+итЗаявки.Заказ-итЗаявки.ПоЗаявкеЗаказ) > 0 Тогда
					табл.НоваяСтрока();
					табл.Номенклатура = итЗаявки.Товар;
					табл.Количество = итЗаявки.СпецЗаказ+итЗаявки.Заказ-итЗаявки.ПоЗаявкеЗаказ;
					табл.ПоСчету = итЗаявки.Документ;
				КонецЕсли;
			КонецЦикла;
			Если табл.КоличествоСтрок() > 0 Тогда
				
				Меню=СоздатьОбъект("СписокЗначений");
				Меню.ДобавитьЗначение(1,"Новый документ");
				Меню.ДобавитьЗначение(2,"Добавить в существующий");
				выб=1;
				Если Меню.ВыбратьЗначение(выб,,,,0)=0 Тогда
					Возврат;
				КонецЕсли;
				
				сп.Установить("Таблица", табл);
				
				Если Выб=2 Тогда
					ДокЗ=СоздатьОбъект("Документ.ЗаказПоставщику");
					Если ДокЗ.Выбрать("Выберите документ заказа")=0 Тогда
						Возврат;
					КонецЕсли;
					
					Спр = СоздатьОбъект("Справочник.КлиентЗаказыПоставщикам");
					Спр.ИспользоватьВладельца(пЗнач);
					Спр.Новый();            
					Спр.Автор = Пользователь;
					Спр.ДатаОтчета = РабочаяДата();
					Спр.ДатаПоставкиОт = ДатаПостС;
					Спр.ДатаПоставкиДо = ДатаПостПо;
					Спр.Время = Лев(ТекущееВремя(),5);
					ОбъектЗаписать(Спр,);
					ОткрытьФорму(ДокЗ.ТекущийДокумент(), сп );
					
				Иначе
					Спр = СоздатьОбъект("Справочник.КлиентЗаказыПоставщикам");
					Спр.ИспользоватьВладельца(пЗнач);
					Спр.Новый();
					Спр.Автор = Пользователь;
					Спр.ДатаОтчета = РабочаяДата();
					Спр.ДатаПоставкиОт = ДатаПостС;
					Спр.ДатаПоставкиДо = ДатаПостПо;
					Спр.Время = Лев(ТекущееВремя(),5);
					ОбъектЗаписать(Спр,);
					ОткрытьФорму("Документ.ЗаказПоставщику", сп );
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			пФлаг = 1;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПредставлениеУсловия()
	стр = "";
	Если выбПоставщик.Выбран() = 1 Тогда
		Если выбПоставщик.ЭтоГруппа() = 1 Тогда 
			стр = стр + "По группе поставщиков """ + Шаблон( "[выбПоставщик.Код] [выбПоставщик]") + """. ";
		Иначе
			стр = стр + "По поставщику """ + Шаблон( "[выбПоставщик.Код] [выбПоставщик]") + """. ";
		КонецЕсли;
	КонецЕсли;
	Если выбКлиент.Выбран() = 1 Тогда
		Если выбКлиент.ЭтоГруппа() = 1 Тогда 
			стр = стр + "По группе клиентов """ + Шаблон( "[выбКлиент.Код] [выбКлиент]") + """. ";
		Иначе
			стр = стр + "По клиенту """ + Шаблон( "[выбКлиент.Код] [выбКлиент]") + """. ";
		КонецЕсли;
	КонецЕсли;
	Если выбТовар.Выбран() = 1 Тогда
		Если выбТовар.ЭтоГруппа() = 1 Тогда
			стр = стр + "По группе товаров """ + Шаблон( "[выбТовар.Код] [выбТовар]") + """. ";
		Иначе
			стр = стр + "По товару """ + Шаблон( "[выбТовар.Код] [выбТовар]") + """. ";
		КонецЕсли;
	КонецЕсли;
	Если выбЗакупщик.Выбран() = 1 Тогда
		Если выбЗакупщик.ЭтоГруппа() = 1 Тогда
			стр = стр + "По группе закупщиков """ + Шаблон( "[выбЗакупщик.Код] [выбЗакупщик]") + """. ";
		Иначе
			стр = стр + "По закупщику """ + Шаблон( "[выбЗакупщик.Код] [выбЗакупщик]") + """. ";
		КонецЕсли;
	КонецЕсли;
	Возврат стр;
КонецФункции


Процедура кнПомощь()
	Помощь = СоздатьОбъект("Общие.Помощь");
	Помощь.Открыть("Отчет.ОтчетПоЗаявкам");
КонецПроцедуры
//======================================================================
Функция ПолучитьКоличествоИзОжПоставкиПоСпецзаказу(пПоставщик,п_Товар,п_ОжПоставка,п_СпецЗаказ)

	итОжПоставкиПоТоварам.УстановитьФильтр(пПоставщик,пПоставщик,"Поставщик");
	итОжПоставкиПоТоварам.ВыбратьСтроки("Поставщик");
	Если итОжПоставкиПоТоварам.ПолучитьСтроку("Поставщик") = 1 Тогда
	
		итЗаявкиПоТоварам2=итОжПоставкиПоТоварам.тзПотомки;
		итЗаявкиПоТоварам2.Сортировать("Товар");
		итЗаявкиПоТоварам2.ВыбратьСтроки();
		Пока итЗаявкиПоТоварам2.ПолучитьСтроку() = 1 Цикл
			пТовар = итЗаявкиПоТоварам2.Товар;
			Если ( ПустоеЗначение( п_Товар ) <> 1 )  и ( пТовар <> п_Товар ) Тогда Продолжить; КонецЕсли;
	

			итПоТоварамДок=итЗаявкиПоТоварам2.тзПотомки;
			итПоТоварамДок.Сортировать("*Док");
//			итПоТоварамДок.Показать();
			итПоТоварамДок.ВыбратьСтроки();
			Пока итПоТоварамДок.ПолучитьСтроку() = 1 Цикл
//				пДок = Шаблон( "Ожидаемая поставка [итПоТоварамДок.Док.НомерДок] ([итПоТоварамДок.Док.ДатаДок])" );
				пЗаказ = итПоТоварамДок.Заказано;

				ТЗ=СоздатьОбъект("ТаблицаЗначений");
				Док=СоздатьОбъект("Документ");
				Если ПустоеЗначение(итПоТоварамДок.Док)=0 Тогда
					Если Док.НайтиДокумент(итПоТоварамДок.Док)=1 Тогда
						Док.ВыгрузитьТабличнуюЧасть(ТЗ,"Товар,Подтверждено,ПоСчету");
						ТЗ.ВыбратьСтроки();
						Пока ТЗ.ПолучитьСтроку() = 1 Цикл
							Если (п_Товар=ТЗ.Товар)и (п_СпецЗаказ=ТЗ.ПоСчету) Тогда
								Возврат ТЗ.Подтверждено;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	итОжПоставкиПоТоварам.ВыключитьФильтр("Поставщик");
	
	Возврат 0;
	
КонецФункции // ПолучитьКоличествоИзОжПоставкиПоСпецзаказу

Функция ПолучитьКоличествоИзОжПоставкиПоСпецзаказу1(п_Товар,п_ОжПоставка,п_СпецЗаказ)
	ТЗ=СоздатьОбъект("ТаблицаЗначений");
	Док=СоздатьОбъект("Документ");
	Если ПустоеЗначение(п_ОжПоставка)=0 Тогда
	
	Если Док.НайтиДокумент(п_ОжПоставка)=1 Тогда
		Док.ВыгрузитьТабличнуюЧасть(ТЗ,"Товар,Подтверждено,ПоСчету");
		ТЗ.ВыбратьСтроки();
		Пока ТЗ.ПолучитьСтроку() = 1 Цикл
			Если (п_Товар=ТЗ.Товар)и (п_СпецЗаказ=ТЗ.ПоСчету) Тогда
				Возврат ТЗ.Подтверждено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	КонецЕсли;
	Возврат 0;
	
КонецФункции // ПолучитьКоличествоИзОжПоставкиПоСпецзаказу

Функция ЗапросПоЗаявкамНовый(таб,п_ДатаПостС,п_ДатаПостПо,п_режим=0)

	начЛог = семЗаписатьЛогНач( "Отчет", "Отчет по заявкам", "Обработка", "Формирование отчета (новый)" );
	// переменные для запроса
	пЭлектроннаяЗаявка = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка;
	пСпецЗаказ = Перечисление.ВидыЗаявок.СпецЗаказ;

	
	Запрос=СоздатьОбъект("ODBCRecordSet");
	глУдалениеВременнойТаблицыSQL("#ЗаявкиЗаПериод");
	
	Условие1="";
	Если выбПоставщик.Выбран() = 1 Тогда
		Если выбПоставщик.ЭтоГруппа() = 1 Тогда 
			Условие1 = Условие1 + " AND $Номенклатура.Поставщик IN (SELECT Val FROM #Поставщики)";
			Запрос.УложитьСписокОбъектов(выбПоставщик,"#Поставщики","Контрагенты");
		Иначе 
			Условие1 = Условие1 + " AND $Номенклатура.Поставщик = :ВыбПоставщик";
			Запрос.УстановитьТекстовыйПараметр("ВыбПоставщик",выбПоставщик);
		КонецЕсли;
	КонецЕсли;
	
	Если выбКлиент.Выбран() = 1 Тогда
		Если выбКлиент.ЭтоГруппа() = 1 Тогда 
			Условие1 = Условие1 + " AND $Счет.Клиент IN (SELECT Val FROM #Клиенты)";
			Запрос.УложитьСписокОбъектов(выбКлиент,"#Клиенты","Контрагенты");
		Иначе 
			Условие1 = Условие1 + " AND $Счет.Клиент = :ВыбКлиент";
			Запрос.УстановитьТекстовыйПараметр("ВыбКлиент",выбКлиент);
		КонецЕсли;
	КонецЕсли;
	Если выбТовар.Выбран() = 1 Тогда
		Если выбТовар.ЭтоГруппа() = 1 Тогда 
			Условие1 = Условие1 + " AND $СчетСтроки.Товар IN (SELECT Val FROM #Товары)";
			Запрос.УложитьСписокОбъектов(выбТовар,"#Товары","Номенклатура");
		Иначе 
			Условие1 = Условие1 + " AND $СчетСтроки.Товар = :ВыбТовар";
			Запрос.УстановитьТекстовыйПараметр("ВыбТовар",выбТовар);
		КонецЕсли;
	КонецЕсли;

	Если выбМестоХранения.Выбран() = 1 Тогда
		Условие1 = Условие1 + " AND $Номенклатура.МестоХранения " +?(флИсклМХ=0,"=","<>") + " :выбМестоХранения";
		Запрос.УстановитьТекстовыйПараметр("выбМестоХранения",выбМестоХранения);
	КонецЕсли;
	
	Если выбЗакупщик.Выбран() = 1 Тогда
		Если выбЗакупщик.ЭтоГруппа() = 1 Тогда 
			Условие1 = Условие1 + " AND $Номенклатура.Закупщик IN (SELECT Val FROM #Закупщики)";
			Запрос.УложитьСписокОбъектов(выбЗакупщик,"#Закупщики","Сотрудники");
		Иначе 
			Условие1 = Условие1 + " AND $Номенклатура.Закупщик = :выбЗакупщик";
			Запрос.УстановитьТекстовыйПараметр("выбЗакупщик",выбЗакупщик);
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса="SELECT СчетСтроки.IDDOC ПоСчету
	|					, $СчетСтроки.Товар Товар
	|					, $Счет.ДатаПоставки ДатаПоставки
	|					, $Счет.ВидЗаявки ВидЗаявки
//	|					, $Счет.Основание Основание
	|					, $Номенклатура.Поставщик Поставщик
	|					, $Счет.Клиент Клиент
	|					, $Счет.КлиентФилиала КлиентФилиала 
	|					, $Номенклатура.Закупщик Закупщик 
	|					, $Номенклатура.БазоваяЕдиницаИзмерения БазоваяЕдиницаИзмерения
	|					, $СчетСтроки.Количество Количество
	|					, $СчетСтроки.Резерв Резерв
	|			  INTO #ЗаявкиЗаПериод
	|			  FROM $ДокументСтроки.Счет AS СчетСтроки (NOLOCK)
	|		  	  INNER JOIN $Документ.Счет AS Счет (NOLOCK) ON СчетСтроки.IDDOC = Счет.IDDOC
	|			  INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON $СчетСтроки.Товар = Номенклатура.ID
	|			  INNER JOIN _1sjourn Журн (NOLOCK) ON Журн.IDDOC = СчетСтроки.IDDOC AND Журн.Closed & 1 = 1 AND Журн.IDDOCDEF=$ВидДокумента.Счет
	|			  WHERE ($Счет.ДатаПоставки BETWEEN :Нач AND :Кон) "+Условие1
	;

	Запрос.УстановитьТекстовыйПараметр("Нач",п_ДатаПостС);
	Запрос.УстановитьТекстовыйПараметр("Кон",п_ДатаПостПо);
	Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
	ТекстЗапроса="SELECT #ЗаявкиЗаПериод.ПоСчету [Документ $Документ.Счет]
	|					, #ЗаявкиЗаПериод.Товар [Товар $Справочник.Номенклатура]
	|					, #ЗаявкиЗаПериод.БазоваяЕдиницаИзмерения [БазоваяЕдиницаИзмерения $Перечисление.ЕдиницыИзмерения]
	|					, #ЗаявкиЗаПериод.ДатаПоставки ДатаПоставки
	|					, #ЗаявкиЗаПериод.ВидЗаявки [ВидЗаявки $Перечисление.ВидыЗаявок]
//	|					, #ЗаявкиЗаПериод.Основание Основание
	|					, #ЗаявкиЗаПериод.Поставщик [Поставщик $Справочник.Контрагенты]
	|					, #ЗаявкиЗаПериод.Клиент [Клиент $Справочник.Контрагенты]
	|					, #ЗаявкиЗаПериод.КлиентФилиала [КлиентФилиала $Справочник.Контрагенты]
	|					, #ЗаявкиЗаПериод.Закупщик [Закупщик $Справочник.Сотрудники]
	|					, #ЗаявкиЗаПериод.Количество Количество
	|					, #ЗаявкиЗаПериод.Резерв Резерв
	|					, CASE WHEN #ЗаявкиЗаПериод.ВидЗаявки=$Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка THEN #ЗаявкиЗаПериод.Количество-#ЗаявкиЗаПериод.Резерв ELSE 0 END Заказ
	|					, СпецЗаказыОстатки.ЗаказаноОстаток СпецЗаказ
	|					, РезервыОстатки.РезервТовараОстаток РезервТовара
	|					, ЗаказыПоставщикамЗаявкиОстатки.КоличествоОстаток ПоЗаявкеЗаказ
//	|					, ТоварыВПутиОстатки.КоличествоОстаток ПоОжПоставке
//	|					, ТоварыВПутиОстатки.Док [ДокОжПоставка $Документ]
	|					, COALESCE((SELECT SUM(КоличествоОстаток) FROM $РегистрОстатки.ТоварыВПути(,,Товар=#ЗаявкиЗаПериод.Товар AND СрокПоставки<=:НаДату,(Товар),)),0) ПоОжПоставке
	|					, $ПустойИД [ДокОжПоставка $Документ.ОжидаемаяПоставка]
	|					, 0 Удалить
	|			  FROM #ЗаявкиЗаПериод
	|		  	  LEFT JOIN $РегистрОстатки.СпецЗаказы(,INNER JOIN (SELECT DISTINCT #ЗаявкиЗаПериод.ПоСчету Док, #ЗаявкиЗаПериод.Товар Тов 
	|																 FROM #ЗаявкиЗаПериод) Заявки ON Заявки.Док=ПоСчету AND Заявки.Тов=Товар
	|													,,(ПоСчету,Товар),) AS СпецЗаказыОстатки ON #ЗаявкиЗаПериод.ПоСчету = СпецЗаказыОстатки.ПоСчету AND #ЗаявкиЗаПериод.Товар = СпецЗаказыОстатки.Товар
	|		  	  LEFT JOIN $РегистрОстатки.РезервыТоваров(,INNER JOIN (SELECT DISTINCT #ЗаявкиЗаПериод.ПоСчету Док, #ЗаявкиЗаПериод.Товар Тов 
	|																 FROM #ЗаявкиЗаПериод) Заявки ON Заявки.Док=ПоСчету AND Заявки.Тов=Товар
	|													,,(ПоСчету,Товар),) AS РезервыОстатки ON #ЗаявкиЗаПериод.ПоСчету = РезервыОстатки.ПоСчету AND #ЗаявкиЗаПериод.Товар = РезервыОстатки.Товар
	|			  LEFT JOIN $РегистрОстатки.ЗаказыПоставщикамЗаявки(,INNER JOIN (SELECT DISTINCT #ЗаявкиЗаПериод.ПоСчету Док, #ЗаявкиЗаПериод.Товар Тов
	|																 			  FROM #ЗаявкиЗаПериод) Заявки ON Заявки.Док=ПоСчету AND Заявки.Тов=Товар
	|													,,(ПоСчету,Товар),) AS ЗаказыПоставщикамЗаявкиОстатки ON #ЗаявкиЗаПериод.ПоСчету = ЗаказыПоставщикамЗаявкиОстатки.ПоСчету AND  #ЗаявкиЗаПериод.Товар = ЗаказыПоставщикамЗаявкиОстатки.Товар
	|
//	|			  LEFT JOIN $РегистрОстатки.ТоварыВПути(,INNER JOIN (SELECT DISTINCT #ЗаявкиЗаПериод.Товар Тов FROM #ЗаявкиЗаПериод) Заявки ON Заявки.Тов=Товар,,(Товар,Док),) AS ТоварыВПутиОстатки ON #ЗаявкиЗаПериод.Товар = ТоварыВПутиОстатки.Товар
	|			  
	|			  WHERE (CASE WHEN #ЗаявкиЗаПериод.ВидЗаявки=$Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка THEN #ЗаявкиЗаПериод.Количество-#ЗаявкиЗаПериод.Резерв ELSE 0 END)<>0 OR СпецЗаказыОстатки.ЗаказаноОстаток<>0
	|
	|";

	Если фл_НеПопавшиеВЗаказ=1 Тогда
		ТекстЗапроса=ТекстЗапроса+" AND ЗаказыПоставщикамЗаявкиОстатки.ПоСчету IS NULL";
	КонецЕсли;
	
	Запрос.УстановитьТекстовыйПараметр("НаДату",п_ДатаПостПо);		
	//Запрос.Отладка(1);
	итЗаявкиПоТоварам=СоздатьОбъект("ИндексированнаяТаблица");	
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,итЗаявкиПоТоварам);
	
	итЗаявкиПоТоварам.ВыбратьСтроки();
	Пока итЗаявкиПоТоварам.ПолучитьСтроку() = 1 Цикл
		
		пДокумент = итЗаявкиПоТоварам.Документ;
		пСостояние = глПолучитьСостояниеЗаявки(пДокумент);
		Если (пСостояние="Ожидает компл.") ИЛИ (пСостояние="Комплектуется") Тогда
		Иначе
			итЗаявкиПоТоварам.Удалить = 1;
		КонецЕсли;
	КонецЦикла;
	
	итЗаявкиПоТоварам.ДобавитьИндекс("иУдалить","Удалить");
	итЗаявкиПоТоварам.УстановитьФильтр(1,1,"иУдалить");
	итЗаявкиПоТоварам.УдалитьСтроки("иУдалить");
	итЗаявкиПоТоварам.ВыключитьФильтр("иУдалить");

	Если п_режим=0 Тогда
		итЗаявки=СоздатьОбъект("ИндексированнаяТаблица");
		итЗаявки.Загрузить(итЗаявкиПоТоварам);
		итЗаявки.ДобавитьИндекс("иПоставщик","*Поставщик,*ВидЗаявки");
		итЗаявки.ДобавитьИндекс("иПоставщикТоварДок","*Поставщик,*Товар,*Документ");
	КонецЕсли;

	итЗаявкиПоТоварам.Группировать("Поставщик : *Поставщик; Товар : *Товар; Документ : *Документ","Количество,Резерв,СпецЗаказ,ПоЗаявкеЗаказ,Заказ,ПоОжПоставке");
	//итЗаявкиПоТоварам.Группировать("Поставщик : *Поставщик; Товар : *Товар; Документ : *Документ","Количество,Резерв, СпецЗаказ,ПоЗаявкеЗаказ,Заказ");
	итЗаявкиПоТоварам.ДобавитьИндекс("иПоставщик","*Поставщик");

	//	итЗаявкиПоТоварам.Показать("");
	
	ТекстЗапроса="SELECT Товар [Товар $Справочник.Номенклатура]
	|					 , $Номенклатура.Поставщик [Поставщик $Справочник.Контрагенты]
	|					, SUM(ОстатокТовара) ОстатокТовара
	|					, SUM(ЗаказаноТовара) ЗаказаноТовара
	|					, SUM(ОжидТовара) ОжидТовара
	|			  FROM 
	|			  (
	|				SELECT ОстаткиТоваровОстатки.Товар
	|						, ОстаткиТоваровОстатки.ОстатокТовараОстаток ОстатокТовара
	|						, 0.00 ЗаказаноТовара
	|						, 0.00 ОжидТовара
	|			  	FROM $РегистрОстатки.ОстаткиТоваров(,INNER JOIN (SELECT DISTINCT #ЗаявкиЗаПериод.Товар Тов FROM #ЗаявкиЗаПериод) Заявки ON Заявки.Тов=Товар,(Склад IN (SELECT ID FROM $Справочник.МестаХранения СпрМХ (NOLOCK) WHERE $СпрМХ.УпрАналитика=:ВыбАналитикаОпт AND $СпрМХ.ТипСклада IN ($Перечисление.ТипыСкладов.СкладПредПродПодготовки,$Перечисление.ТипыСкладов.Склад) ) ),Товар,) AS ОстаткиТоваровОстатки	
	|			  	UNION ALL
	|			  	SELECT ЗаказыПоставщикамОстатки.Товар
	|						 , 0.00 ОстатокТовара
	|						 , ЗаказыПоставщикамОстатки.КоличествоОстаток ЗаказаноТовара
	|						, 0.00 ОжидТовара
	|			  	FROM $РегистрОстатки.ЗаказыПоставщикам(,INNER JOIN (SELECT DISTINCT #ЗаявкиЗаПериод.Товар Тов FROM #ЗаявкиЗаПериод) Заявки ON Заявки.Тов=Товар,,Товар,) AS ЗаказыПоставщикамОстатки
	|			  	UNION ALL
	|			  	SELECT ТоварыВПутиОстатки.Товар
	|						 , 0.00 ОстатокТовара
	|						, 0.00 ЗаказаноТовара	
	|						 , ТоварыВПутиОстатки.КоличествоОстаток ОжидТовара
	|			  	FROM $РегистрОстатки.ТоварыВПути(,INNER JOIN (SELECT DISTINCT #ЗаявкиЗаПериод.Товар Тов FROM #ЗаявкиЗаПериод) Заявки ON Заявки.Тов=Товар,,Товар,) AS ТоварыВПутиОстатки

	|			  ) Ост
	|			  INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON Ост.Товар = Номенклатура.ID
	|			  GROUP BY Товар, $Номенклатура.Поставщик
	|";
	
	Запрос.УстановитьТекстовыйПараметр("ВыбАналитикаОпт",Константа.ОсновнойСклад.УпрАналитика);
	
	итОстаткиПоТоварам=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,итОстаткиПоТоварам);
	итОстаткиПоТоварам.ДобавитьИндекс("иТовар","*Товар");
	итОстаткиПоТоварам.ДобавитьИндекс("иПоставщик","*Поставщик");

	
	ТекстЗапроса="SELECT Товар [Товар $Справочник.Номенклатура]
	|					 , ПоЗаказу [ПоЗаказу $Документ]
	|					 , $Номенклатура.Поставщик [Поставщик $Справочник.Контрагенты]
	|					, Заказано
	|			  FROM 
	|			  (
	|			  	SELECT ЗаказыПоставщикамОстатки.Товар
	|					   ,ЗаказыПоставщикамОстатки.ПоЗаказу
	|					   , ЗаказыПоставщикамОстатки.КоличествоОстаток Заказано
	|			  	FROM $РегистрОстатки.ЗаказыПоставщикам(,INNER JOIN (SELECT DISTINCT #ЗаявкиЗаПериод.Товар Тов FROM #ЗаявкиЗаПериод) Заявки ON Заявки.Тов=Товар,,(Товар,ПоЗаказу),) AS ЗаказыПоставщикамОстатки
	|			  ) Ост
	|			  INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON Ост.Товар = Номенклатура.ID
	|";
	
	
	итЗаказыПоТоварам=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,итЗаказыПоТоварам);
	
//	Парам=СоздатьОбъект("СписокЗначений");
//	Парам.Установить("Объект_",итЗаказыПоТоварам);
//	Парам.Установить("ЗаголовокОбъекта_","ЗаказыТоваров");
//	ОткрытьФорму( "Обработка", Парам, "\\fstore\DLL\Classes\Примеры\ИТОтбор.ert" );
	итЗаказыПоТоварам.Группировать("Поставщик : *Поставщик; Товар : *Товар; ПоЗаказу : *ПоЗаказу","Заказано");


	
	ТекстЗапроса="SELECT Товар [Товар $Справочник.Номенклатура]
	|					 , Док [Док $Документ]
	|					 , $Номенклатура.Поставщик [Поставщик $Справочник.Контрагенты]
	|					, Заказано
	|			  FROM 
	|			  (
	|			  	SELECT ТоварыВПутиОстатки.Товар
	|					   ,ТоварыВПутиОстатки.Док Док
	|					   , ТоварыВПутиОстатки.КоличествоОстаток Заказано
	|			  	FROM $РегистрОстатки.ТоварыВПути(,INNER JOIN (SELECT DISTINCT #ЗаявкиЗаПериод.Товар Тов FROM #ЗаявкиЗаПериод) Заявки ON Заявки.Тов=Товар,,(Товар,Док),) AS ТоварыВПутиОстатки
	|			  ) Ост
	|			  INNER JOIN $Справочник.Номенклатура AS Номенклатура (NOLOCK) ON Ост.Товар = Номенклатура.ID
	|";
	
	
	итОжПоставкиПоТоварам=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,итОжПоставкиПоТоварам);
	итОжПоставкиПоТоварам.Группировать("Поставщик : *Поставщик; Товар : *Товар; Док : *Док","Заказано");
	
	
	НомСтр = 0;
	Всего = итЗаявкиПоТоварам.КоличествоСтрок();

	итЗаявкиПоТоварам.Сортировать("Поставщик");
	итЗаявкиПоТоварам.ВыбратьСтроки();
	Пока итЗаявкиПоТоварам.ПолучитьСтроку() = 1 Цикл
		
		НомСтр=НомСтр+1;
		
		Состояние( "Обработано: "+ НомСтр +"/" + Всего );
		пПоставщик = итЗаявкиПоТоварам.Поставщик;
		пЗаявка = итЗаявкиПоТоварам.Заказ;
		пСпецЗаказ = итЗаявкиПоТоварам.СпецЗаказ;
		таб.ВывестиСекцию( "Поставщик" );		
		
		итЗаявкиПоТоварам2=итЗаявкиПоТоварам.тзПотомки;
		итЗаявкиПоТоварам2.Сортировать("Товар");
		итЗаявкиПоТоварам2.ВыбратьСтроки();
		Пока итЗаявкиПоТоварам2.ПолучитьСтроку() = 1 Цикл
			
			пТовар = итЗаявкиПоТоварам2.Товар;
			пЕдИзм = итЗаявкиПоТоварам2.БазоваяЕдиницаИзмерения; 
			пЗаявка = итЗаявкиПоТоварам2.Заказ;
			пСпецЗаказ = итЗаявкиПоТоварам2.СпецЗаказ;
			пОжТовара =  итЗаявкиПоТоварам2.ПоОжПоставке;
			
			пЗаказ = 0;
			пОстаток = 0;
			пОжТовара = 0;
			пРезерв = итЗаявкиПоТоварам2.РезервТовара;
			Если итОстаткиПоТоварам.НайтиСтроку("иТовар",пТовар,,1)=0 Тогда
			Иначе
				пЗаказ = итОстаткиПоТоварам.ЗаказаноТовара;
				пОжТовара = итОстаткиПоТоварам.ОжидТовара;
				пОстаток = итОстаткиПоТоварам.ОстатокТовара;
			КонецЕсли;
			
			таб.ВывестиСекцию( "Товар" );
			
			итЗаявкиПоТоварамДок=итЗаявкиПоТоварам2.тзПотомки;
			итЗаявкиПоТоварамДок.Сортировать("*Документ");
			итЗаявкиПоТоварамДок.ВыбратьСтроки();
			Пока итЗаявкиПоТоварамДок.ПолучитьСтроку() = 1 Цикл
				пДокумент = итЗаявкиПоТоварамДок.Документ;
				пДок = Шаблон( "[итЗаявкиПоТоварамДок.ВидЗаявки] [итЗаявкиПоТоварамДок.Документ.НомерДок] ([итЗаявкиПоТоварамДок.Документ.ДатаДок])" );
				пКлиент = итЗаявкиПоТоварамДок.Клиент;
				пКлиентФилиала = итЗаявкиПоТоварамДок.КлиентФилиала;
				пДатаПост = итЗаявкиПоТоварамДок.ДатаПоставки;
				пКом=итЗаявкиПоТоварамДок.Документ.Основание;
				пЗаявка = итЗаявкиПоТоварамДок.Заказ;
				пРезерв = итЗаявкиПоТоварамДок.РезервТовара;
				пЗаказ = итЗаявкиПоТоварамДок.ПоЗаявкеЗаказ;
				пОжТовара = 0;
//				пОжТовара=ПолучитьКоличествоИзОжПоставкиПоСпецзаказу(пПоставщик,пТовар,итЗаявкиПоТоварамДок.ДокОжПоставка,итЗаявкиПоТоварамДок.Документ);
//				пОжТовара = итЗаявкиПоТоварамДок.ПоОжПоставке;
				пСпецЗаказ = итЗаявкиПоТоварамДок.СпецЗаказ;

				//получить регион.
				флРига=0;
				пРегионРига=пКлиент.АдресДоставки.Родитель.Родитель.Наименование;
				Если пРегионРига<>"R®ga" Тогда
					флРига=1; //Если Рига не выводим галочку на экран
				КонецЕсли;	
				
				таб.ВывестиСекцию( "Документ" );		
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	//таб.ПараметрыСтраницы(,,,,,,,,,,1,);
	//таб.ТолькоПросмотр( 1 );
	//таб.Показать( "Отчет по заявкам - Новый!" );
	семЗаписатьЛогКон( начЛог );	

КонецФункции

Функция ТекстЗапросаПоЗаявкам()
	ТекстЗапроса = "
	|Период с ДатаС по ДатаПостПо;
	|ДатаПоставки = Документ.Счет.ДатаПоставки;
	|ДатаДок = Документ.Счет.ДатаДок;
	|НомерДок = Документ.Счет.НомерДок;
	|ВидЗаявки = Документ.Счет.ВидЗаявки;
	|Поставщик = Документ.Счет.Товар.Поставщик;
	|Клиент = Документ.Счет.Клиент;
	|КлиентФилиала = Документ.Счет.КлиентФилиала;
	|Товар = Документ.Счет.Товар;
	|Закупщик = Документ.Счет.Товар.Закупщик;
	|Колво = Документ.Счет.Количество;
	|КолвоРез = Документ.Счет.Резерв;
	|Функция Заказ = Сумма( Колво - КолвоРез ) когда ( ВидЗаявки = пЭлектроннаяЗаявка );
	|Функция СпецЗаказ = Сумма( Колво )  когда ( ВидЗаявки = пСпецЗаказ );
	|Группировка Поставщик без групп;
	|Группировка Товар без групп;
	|Группировка Документ;
	//|Условие ( ( Колво - КолвоРез ) > 0 );
	|Условие ( ДатаПоставки >= ДатаПостС );
	|Условие ( ДатаПоставки <= ДатаПостПо );";       
	Если выбПоставщик.Выбран() = 1 Тогда
		Если выбПоставщик.ЭтоГруппа() = 1 Тогда ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Поставщик в выбПоставщик );";
		Иначе ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Поставщик = выбПоставщик );";
		КонецЕсли;
	КонецЕсли;
	Если выбКлиент.Выбран() = 1 Тогда
		Если выбКлиент.ЭтоГруппа() = 1 Тогда ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Клиент в выбКлиент );";
		Иначе ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Клиент = выбКлиент );";
		КонецЕсли;
	КонецЕсли;
	Если выбТовар.Выбран() = 1 Тогда
		Если выбТовар.ЭтоГруппа() = 1 Тогда ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Товар в выбТовар );";
		Иначе ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Товар = выбТовар );";
		КонецЕсли;
	КонецЕсли;
	Если выбЗакупщик.Выбран() = 1 Тогда
		Если выбЗакупщик.ЭтоГруппа() = 1 Тогда ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Закупщик в выбЗакупщик );";
		Иначе ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Закупщик = выбЗакупщик );";
		КонецЕсли;
	КонецЕсли;
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаПоСпецЗаказам()
	ТекстЗапроса = "
	|ДатаПоставки = Регистр.СпецЗаказы.ПоСчету.ДатаПоставки;
	|Товар = Регистр.СпецЗаказы.Товар;
	|Счет = Регистр.СпецЗаказы.ПоСчету;
	|Поставщик = Регистр.СпецЗаказы.Товар.Поставщик;
	|Клиент = Регистр.СпецЗаказы.ПоСчету.Клиент;
	|КлиентФилиала = Регистр.СпецЗаказы.ПоСчету.КлиентФилиала;
	|Закупщик = Регистр.СпецЗаказы.Товар.Закупщик;
	|Колво = Регистр.СпецЗаказы.Заказано;
	|Функция Резерв = КонОст( Колво );
	|Группировка Поставщик без групп;
	|Группировка Товар без групп;
	|Группировка Счет;
	|Условие ( ДатаПоставки >= ДатаПостС );
	|Условие ( ДатаПоставки <= ДатаПостПо );";       
	Если выбПоставщик.Выбран() = 1 Тогда
		Если выбПоставщик.ЭтоГруппа() = 1 Тогда ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Поставщик в выбПоставщик );";
		Иначе ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Поставщик = выбПоставщик );";
		КонецЕсли;
	КонецЕсли;
	Если выбКлиент.Выбран() = 1 Тогда
		Если выбКлиент.ЭтоГруппа() = 1 Тогда ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Клиент в выбКлиент );";
		Иначе ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Клиент = выбКлиент );";
		КонецЕсли;
	КонецЕсли;
	Если выбТовар.Выбран() = 1 Тогда
		Если выбТовар.ЭтоГруппа() = 1 Тогда ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Товар в выбТовар );";
		Иначе ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Товар = выбТовар );";
		КонецЕсли;
	КонецЕсли;
	Если выбЗакупщик.Выбран() = 1 Тогда
		Если выбЗакупщик.ЭтоГруппа() = 1 Тогда ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Закупщик в выбЗакупщик );";
		Иначе ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Закупщик = выбЗакупщик );";
		КонецЕсли;
	КонецЕсли;
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаПоЗаказам()
	ТекстЗапроса = "
	|Товар = Регистр.ЗаказыПоставщикам.Товар;
	|Заказ = Регистр.ЗаказыПоставщикам.ПоЗаказу;
	|НомерДок = Регистр.ЗаказыПоставщикам.ПоЗаказу.НомерДок;
	|ДатаДок = Регистр.ЗаказыПоставщикам.ПоЗаказу.ДатаДок;
	|Поставщик = Регистр.ЗаказыПоставщикам.Товар.Поставщик;
	|Закупщик = Регистр.ЗаказыПоставщикам.Товар.Закупщик;
	|Колво = Регистр.ЗаказыПоставщикам.Количество;
	|Функция Заказано = КонОст( Колво );
	|Группировка Поставщик без групп;
	|Группировка Товар без групп;
	|Группировка Заказ;";
	Если выбПоставщик.Выбран() = 1 Тогда
		Если выбПоставщик.ЭтоГруппа() = 1 Тогда ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Поставщик в выбПоставщик );";
		Иначе ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Поставщик = выбПоставщик );";
		КонецЕсли;
	КонецЕсли;
	Если выбТовар.Выбран() = 1 Тогда
		Если выбТовар.ЭтоГруппа() = 1 Тогда ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Товар в выбТовар );";
		Иначе ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Товар = выбТовар );";
		КонецЕсли;
	КонецЕсли;
	Если выбЗакупщик.Выбран() = 1 Тогда
		Если выбЗакупщик.ЭтоГруппа() = 1 Тогда ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Закупщик в выбЗакупщик );";
		Иначе ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Закупщик = выбЗакупщик );";
		КонецЕсли;
	КонецЕсли;
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаПоОстаткам()
	ТекстЗапроса = "
	|Товар = Регистр.ОстаткиТоваров.Товар;
	|Поставщик = Регистр.ОстаткиТоваров.Товар.Поставщик;
	|Закупщик = Регистр.ОстаткиТоваров.Товар.Закупщик;
	|Колво = Регистр.ОстаткиТоваров.ОстатокТовара;
	|Функция Резерв = КонОст( Колво );
	|Группировка Поставщик без групп;
	|Группировка Товар без групп;";
	Если выбПоставщик.Выбран() = 1 Тогда
		Если выбПоставщик.ЭтоГруппа() = 1 Тогда ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Поставщик в выбПоставщик );";
		Иначе ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Поставщик = выбПоставщик );";
		КонецЕсли;
	КонецЕсли;
	Если выбТовар.Выбран() = 1 Тогда
		Если выбТовар.ЭтоГруппа() = 1 Тогда ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Товар в выбТовар );";
		Иначе ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Товар = выбТовар );";
		КонецЕсли;
	КонецЕсли;
	Если выбЗакупщик.Выбран() = 1 Тогда
		Если выбЗакупщик.ЭтоГруппа() = 1 Тогда ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Закупщик в выбЗакупщик );";
		Иначе ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Закупщик = выбЗакупщик );";
		КонецЕсли;
	КонецЕсли;
	Возврат ТекстЗапроса;
КонецФункции


Процедура Сформировать()
	
//	Если НазваниеНабораПрав()="Администратор" Тогда

	таб = СоздатьОбъект( "Таблица" );
	таб.ИсходнаяТаблица( "ТаблицаНов" );
	
	пПериод = Шаблон( "На дату поставки с [ДатаПостС] по [ДатаПостПо]." );
	пУсловие = ПредставлениеУсловия();
	таб.ВывестиСекцию( "Заголовок" );		
	таб.ВывестиСекцию( "Шапка" );		
	таб.Опции( 0, 0, таб.ВысотаТаблицы(), 0 );

	ЗапросПоЗаявкамНовый(таб,ДатаПостС,ДатаПостПо);
	Если фл_ВышеПериода=1 Тогда
		л_ДатаНаДеньвперед=ДатаПостПо+1;
		л_ДатаНаГодВперед=ДатаПостПо+365;
		
		пПериод2 = Шаблон( "На дату поставки с [л_ДатаНаДеньвперед] по [л_ДатаНаГодВперед]." );
		таб.ВывестиСекцию( "Заголовок2" );	
		ЗапросПоЗаявкамНовый(таб,л_ДатаНаДеньвперед,л_ДатаНаГодВперед,фл_ВышеПериода);	
	КонецЕсли;

	
	таб.ПараметрыСтраницы(,,,,,,,,,,1,);
	таб.ТолькоПросмотр( 1 );
	таб.Показать( "Отчет по заявкам - Новый!" );
	
//	КонецЕсли;

Возврат;
//	начЛог = семЗаписатьЛогНач( "Отчет", "Отчет по заявкам", "Обработка", "Формирование отчета" );
//	// переменные для запроса
//	пЭлектроннаяЗаявка = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка;
//	пСпецЗаказ = Перечисление.ВидыЗаявок.СпецЗаказ;
//	
//	ДатаС = ДатаПостС - 45;
//	//нач = ТекущееВремя();
//	ЗапросЗаявки = СоздатьОбъект( "Запрос" );
//	Если ЗапросЗаявки.Выполнить( ТекстЗапросаПоЗаявкам() ) = 0 Тогда Возврат; КонецЕсли;  
//	//Сообщить( "ЗапросЗаявки "+семПрошлоВремени( нач, ТекущееВремя() ) );
//	
//	//нач = ТекущееВремя();
//	ЗапросСпецЗаказы = СоздатьОбъект( "Запрос" );
//	Если ЗапросСпецЗаказы.Выполнить( ТекстЗапросаПоСпецЗаказам() ) = 0 Тогда Возврат; КонецЕсли;  
//	//Сообщить( "ЗапросСпецЗаказы "+семПрошлоВремени( нач, ТекущееВремя() ) );
//
//	//нач = ТекущееВремя();
//	ЗапросЗаказы = СоздатьОбъект( "Запрос" );
//	Если ЗапросЗаказы.Выполнить( ТекстЗапросаПоЗаказам() ) = 0 Тогда Возврат; КонецЕсли;  
//	//Сообщить( "ЗапросЗаказы "+семПрошлоВремени( нач, ТекущееВремя() ) );
//
//	//нач = ТекущееВремя();
//	ЗапросОстатки = СоздатьОбъект( "Запрос" );
//	Если ЗапросОстатки.Выполнить( ТекстЗапросаПоОстаткам() ) = 0 Тогда Возврат; КонецЕсли;  
//	//Сообщить( "ЗапросОстатки "+семПрошлоВремени( нач, ТекущееВремя() ) );
//
//	таб = СоздатьОбъект( "Таблица" );
//	таб.ИсходнаяТаблица( "Таблица" );
//	
//	пПериод = Шаблон( "На дату поставки с [ДатаПостС] по [ДатаПостПо]." );
//	пУсловие = ПредставлениеУсловия();
//	таб.ВывестиСекцию( "Заголовок" );		
//	таб.ВывестиСекцию( "Шапка" );		
//	таб.Опции( 0, 0, таб.ВысотаТаблицы(), 0 );
//	
//	Всего = 0; 
//	Пока ЗапросЗаявки.Группировка( "Поставщик") = 1 Цикл 
//		Пока ЗапросЗаявки.Группировка( "Товар") = 1 Цикл 
//			Всего = Всего + 1; 
//		КонецЦикла;
//	КонецЦикла;
//	
//	итЗаявки=СоздатьОбъект("ИндексированнаяТаблица");
//	итЗаявки.ЗагрузитьЗапрос(ЗапросЗаявки,1,0);
//	итЗаявки.НоваяКолонка("Резерв");
//	итЗаявки.НоваяКолонка("СпецРезерв");
//	итЗаявки.ДобавитьИндекс("иПоставщик","*Поставщик,*ВидЗаявки");
//	итЗаявки.ДобавитьИндекс("иПоставщикТоварДок","*Поставщик,*Товар,*Документ");
//	НомСтр = 0;
//	Пока ЗапросЗаявки.Группировка( "Поставщик" ) = 1 Цикл
//		пПоставщик = ЗапросЗаявки.Поставщик;
//		пЗаявка = ЗапросЗаявки.Заказ;
//		
//		Если ( пЗаявка = 0 ) и ( ЗапросСпецЗаказы.Получить( пПоставщик,, ) = 0 ) Тогда Продолжить; КонецЕсли;
//		пСпецЗаказ = ?( ЗапросСпецЗаказы.Получить( пПоставщик,, ) = 1, ЗапросСпецЗаказы.Резерв, 0 );
//		пЗаказ = ?( ЗапросЗаказы.Получить( пПоставщик,, ) = 1, ЗапросЗаказы.Заказано, 0 );
//		пОстаток = ?( ЗапросОстатки.Получить( пПоставщик, ) = 1, ЗапросОстатки.Резерв, 0 );
//		таб.ВывестиСекцию( "Поставщик" );		
//		Пока ЗапросЗаявки.Группировка( "Товар" ) = 1 Цикл Состояние( "Обработано "+Окр( НомСтр / Всего * 100 )+"% строк отчета." );
//			НомСтр = НомСтр + 1;
//			пТовар = ЗапросЗаявки.Товар;
//			пЕдИзм = пТовар.БазоваяЕдиницаИзмерения; 
//			пЗаявка = ЗапросЗаявки.Заказ;
//			Если ( пЗаявка = 0 ) и ( ЗапросСпецЗаказы.Получить( пПоставщик, пТовар, ) = 0 ) Тогда Продолжить; КонецЕсли;
//			
//			
//			пСпецЗаказ = ?( ЗапросСпецЗаказы.Получить( пПоставщик, пТовар, ) = 1, ЗапросСпецЗаказы.Резерв, 0 );
//			пЗаказ = ?( ЗапросЗаказы.Получить( пПоставщик, пТовар, ) = 1, ЗапросЗаказы.Заказано, 0 );
//			пОстаток = ?( ЗапросОстатки.Получить( пПоставщик, пТовар ) = 1, ЗапросОстатки.Резерв, 0 );
//			таб.ВывестиСекцию( "Товар" );		
//			Пока ЗапросЗаявки.Группировка( "Документ" ) = 1 Цикл
//				пДокумент = ЗапросЗаявки.Документ;
//
//				
//				пДок = Шаблон( "[ЗапросЗаявки.ВидЗаявки] [ЗапросЗаявки.НомерДок] ([ЗапросЗаявки.ДатаДок])" );
//				пКлиент = ЗапросЗаявки.Клиент;
//				пКлиентФилиала = ЗапросЗаявки.КлиентФилиала;
//				пДатаПост = ЗапросЗаявки.ДатаПоставки;
//				пЗаявка = ЗапросЗаявки.Заказ;
//
//				Если ( пЗаявка = 0 ) и ( ЗапросСпецЗаказы.Получить( пПоставщик, пТовар, ЗапросЗаявки.Документ ) = 0 ) Тогда Продолжить; КонецЕсли;
//				пСпецЗаказ = ?( ЗапросСпецЗаказы.Получить( пПоставщик, пТовар, ЗапросЗаявки.Документ ) = 1, ЗапросСпецЗаказы.Резерв, 0 );
//				сзКлюч=СоздатьОбъект("СписокЗначений");
//				сзКлюч.ДобавитьЗначение(пПоставщик);
//				сзКлюч.ДобавитьЗначение(пТовар);
//				сзКлюч.ДобавитьЗначение(ЗапросЗаявки.Документ);
//				итЗаявки.Подмножество(сзКлюч,3,"иПоставщикТоварДок");
//				итЗаявки.ВыбратьСтроки("иПоставщикТоварДок");
//				итЗаявки.ПолучитьСтроку("иПоставщикТоварДок");
//				итЗаявки.Резерв=пЗаявка;
//				итЗаявки.СпецРезерв=пСпецЗаказ;
//				таб.ВывестиСекцию( "Документ" );		
//			КонецЦикла;
//		КонецЦикла;
//	КонецЦикла;
//	таб.ПараметрыСтраницы(,,,,,,,,,,1,);
//	таб.ТолькоПросмотр( 1 );
//	таб.Показать( "Отчет по заявкам" );
//	семЗаписатьЛогКон( начЛог );	
//	
//	ЛегкоеСообщение("Cделана новая версия отчета - большая просьба сравнить его со старым 
//					| и сообщить расхождения мне по мэйлу pavels.ruhmans@reaton.lv!");
//	
//	//Сообщить( семПрошлоВремени( нач, ТекущееВремя() ) );
КонецПроцедуры
Процедура ПослеОткрытия()
	
	Если РабочаяДата()<='26.02.18' Тогда
		ЛегкоеСообщение("Добавлена опция в отчет *Только не попавшие в заказ поставщику*
		|Это означает, что если заявка добавлена в заказ поставщику она в отчете больше не будет появляться!");
	КонецЕсли;
	
КонецПроцедуры


ДатаПостПо=РабочаяДата();
ДатаПостС=ДатаПостПо;
выбПоставщик.ВыборГруппы( 1 );
выбКлиент.ВыборГруппы( 1 );
выбТовар.ВыборГруппы( 1 );
выбЗакупщик.ВыборГруппы( 1 );

фл_ВышеПериода=1;
фл_НеПопавшиеВЗаказ=1;

