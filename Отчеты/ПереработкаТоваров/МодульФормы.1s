
           //******************************************************************************
// функция ищет в списке значений элемент справочника с учетом групп
// 1 - есть элемент, 0 - нет
Функция НайтиВСписке(сп,Эл)
	Если сп.РазмерСписка()=0 Тогда Возврат 0; КонецЕсли;    
	Для н=1 По сп.РазмерСписка() Цикл
		Зн = сп.ПолучитьЗначение(н);
		Если Зн.ЭтоГруппа()=1 Тогда
			Если Эл.ПринадлежитГруппе(Зн)=1 Тогда Возврат 1; КонецЕсли;          
		Иначе
			Если Зн = Эл Тогда Возврат 1; КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат 0;
КонецФункции

// Добавляет элемент справочника в список значений
// сп - список значений, Тип - тип справочника, Режим - 1 - одиночный выбор, 2 - множественный
Процедура ДобавитьВСписок(сп,Тип,Режим) Экспорт
	спр = СоздатьОбъект(Тип);
	Если сп.РазмерСписка() > 0 Тогда
		спр.НайтиЭлемент(сп.ПолучитьЗначение(сп.ТекущаяСтрока()));
	КонецЕсли;
	Результат = 1;
	Пока Результат = 1 Цикл 
		спр.ВыборГруппы(1);
		выб = спр.Выбрать("Выбор","ДляВыбора");
		Результат = ?(Режим = 1,0,Мин(Выб,Результат));
		Если Выб = 0 Тогда Продолжить; КонецЕсли;
		Если НайтиВСписке(сп,спр.ТекущийЭлемент())=1 Тогда
			Предупреждение("Этот элемент в списке уже есть!!!");
			Продолжить;
		КонецЕсли;
		сп.ДобавитьЗначение(спр.ТекущийЭлемент());
		сп.ТекущаяСтрока(сп.РазмерСписка());
	КонецЦикла;
КонецПроцедуры
// Удоляет элементы из список значений
// сп - список значений, Режим - 1 - удаляет выбранное значение, 2 - удоляет всё
Процедура УдалитьИзСписка(сп,Режим) Экспорт
	Если сп.РазмерСписка()=0 Тогда Возврат; КонецЕсли;
	Если Режим = 1 Тогда 
		н = сп.ТекущаяСтрока(); 
		сп.УдалитьЗначение(сп.ТекущаяСтрока());
		Если н > 1 Тогда
			сп.ТекущаяСтрока(н-1);
		Иначе
			Если сп.РазмерСписка()>0 Тогда
				сп.ТекущаяСтрока(1);
			КонецЕсли;
		КонецЕсли;
	Иначе
		сп.УдалитьВсе();
	КонецЕсли;		
КонецПроцедуры 


Процедура ПриОткрытии()
	
	глПриОткрытии(Контекст,"ПереработкаТоваров");          
	
	Спр=СоздатьОбъект("Справочник.ТоварыОтходы");
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()=1 Цикл
		спТоварыОтходы.ДобавитьЗначение(спр.Товар);
	КонецЦикла;
	
	спСкладов_=ВосстановитьЗначение("СписСкладов");
	Если ПустоеЗначение(спСкладов_)=0 Тогда
		Для н = 1 По спСкладов_.РазмерСписка() Цикл
			спСкладов.ДобавитьЗначение(спСкладов_.ПолучитьЗначение(н));
		
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//======================================================================
Процедура ПриЗакрытии()
	
		СохранитьЗначение("СписСкладов",спСкладов);
	
КонецПроцедуры // гл
//*******************************************
// Процедура генерации запроса АктРазборки.
//
Процедура АктРазборки()
	Перем Запрос, ТекстЗапроса;
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(АктРазборки)
	|Период с ВыбНачПериода по ВыбКонПериода;
	|Товар = Регистр.ПартииТоваров.Товар;
	|Склад = Регистр.ПартииТоваров.Склад;
	|БазСто = Регистр.ПартииТоваров.Стоимость;
	|Ост = Регистр.ПартииТоваров.ОстатокТовара;
	|ПродСто = Регистр.ПартииТоваров.ПродажнаяСтоимость;
	|ФлагУчета = Регистр.ПартииТоваров.ФлагУчета;
	|Док = Регистр.ПартииТоваров.ТекущийДокумент;
	|Функция ПрихБазСто = Приход(БазСто) когда (Не (Товар в ВыбГруппаОтходы));
	|Функция ПрихОст = Приход(Ост) когда (Не (Товар в ВыбГруппаОтходы));
	|Функция ПрихПродСто = Приход(ПродСто) когда (Не (Товар в ВыбГруппаОтходы));
	|Функция РасхБазСто = Расход(БазСто);
	|Функция РасхОст = Расход(Ост);
	|Функция РасхПродСто = Расход(ПродСто);
	|Функция ПрихБазСтоОтходы = Приход(БазСто) когда(Товар в ВыбГруппаОтходы);
	|Функция ПрихОстОтходы = Приход(Ост) когда(Товар в ВыбГруппаОтходы);
	|Функция ПрихПродСтоОтходы = Приход(ПродСто) когда(Товар в ВыбГруппаОтходы);
	|Группировка Документ;
	|Условие(ФлагУчета = 6);
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Таб=СоздатьОбъект("Таблица"); 
	Таб.ВывестиСекцию("Отчет");	
	Оживить(4);
	НПП=0;
	ЧислоСтрок=0;
	
	// Подготовка к заполнению выходных форм данными запроса

	// Заполнение полей "Заголовок"
    
	Пока Запрос.Группировка(1) = 1 Цикл
		НПП=НПП+1;
		Таб.ВывестиСекцию("Строка");	
		Оживить(1);
	КонецЦикла;        
	
	Таб.ВывестиСекцию("Итог");	

	Оживить(1);     
		// Вывод заполненной формы
	Таб.Опции(0,0,4,0,ПарСтрОтчДлинн);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("АктРазборки","");
	
	// Заполнение полей "Итого"

	// Вывод заполненной формы

КонецПроцедуры  

//*******************************************
// Процедура генерации запроса АктРазборкиДок.
//
Процедура АктРазборкиДок()
	Перем Запрос, ТекстЗапроса;
	начЛог = семЗаписатьЛогНач( "Отчет", "Переработка товаров", "Обработка", "Формирование отчета" );
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(АктРазборкиДок)
	|Период с ВыбНачПериода по ВыбКонПериода;
	|ИсходныйТовар = Документ.АктРазборки.ИсходныйТовар;
	|ЕдИзм = Документ.АктРазборки.ИсходныйТовар.БазоваяЕдиницаИзмерения;
	|Склад = Документ.АктРазборки.Склад;
	|КоличествоТовара = Документ.АктРазборки.ИсхКоличество;
	|СебестоимостьТовара = Документ.АктРазборки.ИсхСебестоимость;
//	|ВидПереработки = Документ.АктРазборки.ВидПереработки;
	|Функция КолСумма = Сумма(КоличествоТовара);
//	|Функция Кол1Сумма = Сумма(Количество1);
	|Группировка ИсходныйТовар без групп;
	|Условие (Склад в спСкладов);
//	|Группировка Товар без упорядочивания без групп;
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;

	
	Запрос2 = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(АктРазборкиТабл)
	|Период с ВыбНачПериода по ВыбКонПериода;
	|ИсходныйТовар = Документ.АктРазборки.ИсходныйТовар;
	|Товар = Документ.АктРазборки.Товар;
	|Док = Документ.АктРазборки.ТекущийДокумент;
	|Склад = Документ.АктРазборки.Склад;
	|КоличествоТовара = Документ.АктРазборки.ИсхКоличество;
	|СебестоимостьТовара = Документ.АктРазборки.ИсхСебестоимость;
//	|ВидПереработки = Документ.АктРазборки.ВидПереработки;
	|Количество1 = Документ.АктРазборки.Количество;
	|Сумма = Документ.АктРазборки.Сумма;
	|Функция Кол1Сумма = Сумма(Количество1);
	|Функция БазСто = Сумма(Сумма);
	|Группировка ИсходныйТовар без групп;
	|Группировка Товар без упорядочивания без групп;
	|Условие (Не (Товар в спТоварыОтходы));
	|Условие (Склад в спСкладов);
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос2.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;

	ЗапросОтходы = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(АктРазборкиТабл)
	|Период с ВыбНачПериода по ВыбКонПериода;
	|ИсходныйТовар = Документ.АктРазборки.ИсходныйТовар;
	|Товар = Документ.АктРазборки.Товар;
//	|РознЦена = Документ.АктРазборки.Товар.розн_цена;
	|Док = Документ.АктРазборки.ТекущийДокумент;
	|Склад = Документ.АктРазборки.Склад;
	|КоличествоТовара = Документ.АктРазборки.ИсхКоличество;
	|СебестоимостьТовара = Документ.АктРазборки.ИсхСебестоимость;
//	|ВидПереработки = Документ.АктРазборки.ВидПереработки;
	|Количество1 = Документ.АктРазборки.Количество1;
	|Сумма = Документ.АктРазборки.Сумма;
	|Функция Кол1Сумма = Сумма(Количество1);
	|Функция БазСто = Сумма(Сумма);
//	|Функция РознСумма = Сумма(РознЦена*Количество1);
	|Группировка ИсходныйТовар без групп;
	|Условие (Товар в спТоварыОтходы);
	|Условие (Склад в спСкладов);
	|"//}}ЗАПРОС
	;           
	
	// Если ошибка в запросе, то выход из процедуры
	Если ЗапросОтходы.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;

	
	СписСклады = спСкладов.ВСтрокуСРазделителями();	
	СписСклады = СтрЗаменить(СписСклады,"""","");
	Заг = СписСклады;
	// Подготовка к заполнению выходных форм данными запроса

	// Заполнение полей "Заголовок"

	Таб=СоздатьОбъект("Таблица"); 
	Таб.ИсходнаяТаблица("ПоТовару");
	Таб.ВывестиСекцию("Отчет");	
	Оживить(4);
	НПП=0;
	ЧислоСтрок=0;
	
	// Подготовка к заполнению выходных форм данными запроса

	// Заполнение полей "Заголовок"
        
	ИтогСумма1=0;
	ИтогОтходы=0;
	ИтогБазОтходы=0;
	ИтогБазСто=0;
	ИтогРознСумма=0;
	
	Пока Запрос.Группировка(1) = 1 Цикл

		Запрос2.ВначалоВыборки();
		рез=Запрос2.Получить(Запрос.ИсходныйТовар,);

		ЗапросОтходы.ВначалоВыборки();
		рез1=ЗапросОтходы.Получить(Запрос.ИсходныйТовар);

		БазСто=Запрос2.БазСто;
		
		Кол1Сумма=Запрос2.Кол1Сумма+ЗапросОтходы.Кол1Сумма;
		ИтогОтходы=ИтогОтходы+ЗапросОтходы.Кол1Сумма;
		ИтогБазОтходы=ИтогБазОтходы+ЗапросОтходы.БазСто;
		ИтогСумма1=ИтогСумма1+Кол1Сумма;
		ИтогБазСто=ИтогБазСто+БазСто;
		НПП=НПП+1;           
		
		Таб.ВывестиСекцию("Строка");	
           
		Количество1=0;
		Если рез=1 Тогда
			Пока Запрос2.Группировка(2) = 1 Цикл
				Количество1=Запрос2.Кол1Сумма;
				Товар=Запрос2.Товар;        
				БазСто=Запрос2.БазСто;
//				РознЦена=Товар.Розн_цена.Получить(РабочаяДата());
				РознСумма=Количество1*ЦенаТовараПоКатегорииДляТовара(Товар,Константа.ОсновнаяКатегорияЦены);
				ИтогРознСумма=ИтогРознСумма+РознСумма;
				Таб.ВывестиСекцию("Товар");	

			КонецЦикла;    
		КонецЕсли;
                      
		Количество1=0;
		Если рез1=1 Тогда                                        
			Таб.ВывестиСекцию("Отходы");	
		КонецЕсли;
		
		Оживить(1);
	КонецЦикла;        
	
	Таб.ВывестиСекцию("Итог");	

	Оживить(1);     
		// Вывод заполненной формы
	Таб.Опции(0,0,5,0);
	Таб.ПараметрыСтраницы(1,100,,5,5,5,5,,,1);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("АктРазборки","");
	семЗаписатьЛогКон( начЛог );	
КонецПроцедуры




//----------------------------------------------------
ВыбНачПериода=НачМесяца(ТекущаяДата());
Если ПустоеЗначение(ВыбНачПериода)=1 Тогда
	ВыбНачПериода='01.01.98';
Конецесли;             

ВыбКонПериода=ПолучитьДатуТА();

