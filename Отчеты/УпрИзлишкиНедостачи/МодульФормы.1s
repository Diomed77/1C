
Процедура ВывестиИТ( таб, пИТ, Группа,Ур )
	//пИТ.ВыбратьСтроку();
	пИТ.ВыбратьСтроки();
	Пока пИТ.ПолучитьСтроку() = 1 Цикл
		пКолБольше = Формат(пИТ.КолБольше,"Ч012.3");
		пКолМеньше = Формат(пИТ.КолМеньше,"Ч012.3");
		пКолБаланс = Формат(пИТ.КолБаланс,"Ч012.3");		
		пСуммаБольше = Формат(пИТ.СуммаБольше,"Ч015.2");
		пСуммаМеньше = Формат(пИТ.СуммаМеньше,"Ч015.2");
		пСуммаБаланс = Формат(пИТ.СуммаБаланс,"Ч015.2");

		ЕстьГруппы=пИТ.НомерКолонки("__ЭтоГруппа__");
		Если Группа = "Документ" Тогда
			пДок 		= пИТ.Документ;
			Докум=""+пДок+" от "+пДок.ДатаДок+"";
			пОснование 	= пДок.Основание; 
			пВал=пИТ.ВалютаУчета;
			таб.ВывестиСекцию( "Документ" );
			
			Если пИТ.НомерКолонки("тзПотомки") <> 0 Тогда
				Если ПустоеЗначение(пИТ.тзПотомки) = 0 Тогда
					ВывестиИТ( таб, пИТ.тзПотомки,"Товар",0);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли (Группа="Товар") И (ЕстьГруппы>0) Тогда
			Если (пИТ.__ЭтоГруппа__ = 1) Тогда
				текУровень = ?(Число(пИТ.__Уровень__) = 0,Ур+1,пИТ.__Уровень__);
				пRetail="";
				пТовар = Шаблон( "[пИТ.Товар.Код] [пИТ.Товар]" );
				таб.ВывестиСекцию( "Группа"+текУровень );		
				Если ПустоеЗначение(пИТ.тзПотомки) = 0 Тогда
					ВывестиИТ( таб, пИТ.тзПотомки,"Товар",текУровень );
				КонецЕсли;
			Иначе
				текУровень = ?(Число(пИТ.__Уровень__) = 0,Ур+1,пИТ.__Уровень__);
				пRetail=?(пИТ.Товар.RETAIL=1,"R","");
				пТовар = Шаблон( "[пИТ.Товар.Код] [пИТ.Товар]" );
				пЕдиница = Шаблон( "[пИТ.БазЕд]" );
				пВал=пИТ.ВалютаУчета;
				Если ПустоеЗначение(текУровень)=1 Тогда
					Сообщить("Товар: "+пТовар);
				КонецЕсли;
				таб.ВывестиСекцию( "Товар"+текУровень );
				
				Если пИТ.НомерКолонки("тзПотомки") <> 0 Тогда
					Если ПустоеЗначение(пИТ.тзПотомки) = 0 Тогда
						ВывестиИТ( таб, пИТ.тзПотомки,?(Группа = "Документ","Товар","Документ"),?(Группа = "Документ",0,текУровень));
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			текУровень = Ур+1;
			пRetail=?(пИТ.Товар.RETAIL=1,"R","");
			пТовар = Шаблон( "[пИТ.Товар.Код] [пИТ.Товар]" );
			пЕдиница = Шаблон( "[пИТ.БазЕд]" );
			пВал=пИТ.ВалютаУчета;
			таб.ВывестиСекцию( "Товар"+текУровень );		
			
			Если пИТ.НомерКолонки("тзПотомки") <> 0 Тогда
				Если ПустоеЗначение(пИТ.тзПотомки) = 0 Тогда
					ВывестиИТ( таб, пИТ.тзПотомки,?(Группа = "Документ","Товар","Документ"),?(Группа = "Документ",0,текУровень));
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		
	КонецЦикла;
КонецПроцедуры


Процедура ПриОткрытии()

	глПриОткрытии(Контекст,"УпрИзлишкиНедостачи");
	
КонецПроцедуры	


//******************************************************************************
// функция ищет в списке значений элемент справочника с учетом групп
// 1 - есть элемент, 0 - нет
Функция НайтиВСписке(сп,Эл)
	Если сп.РазмерСписка()=0 Тогда Возврат 0; КонецЕсли;    
	Для н=1 По сп.РазмерСписка() Цикл
		Зн = сп.ПолучитьЗначение(н);
		Если Зн.ЭтоГруппа()=1 Тогда
			Если Эл.ПринадлежитГруппе(Зн)=1 Тогда Возврат 1; КонецЕсли;          
		Иначе
			Если Зн = Эл Тогда Возврат 1; КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат 0;
КонецФункции
// Добавляет элемент справочника в список значений
// сп - список значений, Тип - тип справочника, Режим - 1 - одиночный выбор, 2 - множественный
Процедура ДобавитьВСписок(сп,Тип,Режим) Экспорт
	спр = СоздатьОбъект(Тип);
	Если сп.РазмерСписка() > 0 Тогда
		спр.НайтиЭлемент(сп.ПолучитьЗначение(сп.ТекущаяСтрока()));
	КонецЕсли;
	Результат = 1;
	Пока Результат = 1 Цикл 
		спр.ВыборГруппы(1);
		выб = спр.Выбрать("Выбор","ДляВыбора");
		Результат = ?(Режим = 1,0,Мин(Выб,Результат));
		Если Выб = 0 Тогда Продолжить; КонецЕсли;
		Если НайтиВСписке(сп,спр.ТекущийЭлемент())=1 Тогда
			Предупреждение("Этот элемент в списке уже есть!!!");
			Продолжить;
		КонецЕсли;
		сп.ДобавитьЗначение(спр.ТекущийЭлемент());
		сп.ТекущаяСтрока(сп.РазмерСписка());
	КонецЦикла;
КонецПроцедуры
// Удоляет элементы из список значений
// сп - список значений, Режим - 1 - удаляет выбранное значение, 2 - удоляет всё
Процедура УдалитьИзСписка(сп,Режим) Экспорт
	Если сп.РазмерСписка()=0 Тогда Возврат; КонецЕсли;
	Если Режим = 1 Тогда 
		н = сп.ТекущаяСтрока(); 
		сп.УдалитьЗначение(сп.ТекущаяСтрока());
		Если н > 1 Тогда
			сп.ТекущаяСтрока(н-1);
		Иначе
			Если сп.РазмерСписка()>0 Тогда
				сп.ТекущаяСтрока(1);
			КонецЕсли;
		КонецЕсли;
	Иначе
		сп.УдалитьВсе();
	КонецЕсли;		
КонецПроцедуры 



//******************************************* 
Процедура ПроверитьДату()
	Если ДатаКонца>ПолучитьДатуТА() Тогда
		Предупреждение("Дата конца отчета не может быть больше даты ТА !",1); 
		ДатаКонца=ПолучитьДатуТА();
	КонецЕсли;	
КонецПроцедуры	
//------------------------------------------------------------    

Функция ПолучитьСписокДокументов()
	сп = СоздатьОбъект( "СписокЗначений" );
	Запрос=СоздатьОбъект("Запрос");
	ТекстЗапроса=
	"//{{ЗАПРОС(ИзлишкиНедостачи)
	|Период с ДатаНачала по ДатаКонца;
	|Док = Документ.СличительнаяВедомость.ТекущийДокумент;
	|Склад = Документ.СличительнаяВедомость.Склад;
	|Товар = Документ.СличительнаяВедомость.Товар;
	|Группировка Документ; 
	|"; 

	Если ПустоеЗначение(спСкладов)=1 Тогда         
	Иначе
		ТекстЗапроса=ТекстЗапроса+"
		|Условие (Склад в спСкладов);"; 
	КонецЕсли;  
	
	Если спТоваров.РазмерСписка()=0 Тогда
//	ИначеЕсли спТоваров.ЭтоГруппа()=1 Тогда ТекстЗапроса=ТекстЗапроса+"
//		|Условие(Товар в спТоваров);";
	Иначе ТекстЗапроса=ТекстЗапроса+"
		|Условие(Товар в спТоваров);";
	КонецЕсли;
	
	Если Запрос.Выполнить( ТекстЗапроса ) = 0 Тогда Возврат сп; КонецЕсли;
	
	табл = СоздатьОбъект( "ТаблицаЗначений" );
	Запрос.Выгрузить(табл,,0);
	табл.Выгрузить(сп,,,"Документ");
	Возврат сп;
КонецФункции

Процедура СформироватьНов(Режим)  
	начЛог = семЗаписатьЛогНач( "Отчет", "Упр.излишки и недостачи", "Обработка", Шаблон("Формирование отчета ([Режим])") );
	ПустаяФирма=глФирма; 
	ПроверитьДату();
	
	//спДокументов = ПолучитьСписокДокументов();
	
  	ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");
	Условие="";
	Начало_=_GetPerformanceCounter();
  
	Заг="";
	////Если ВыбСклад.Выбран() = 0 Тогда         
	////	Заг=Заг+"   По всем складам"+". ";
	////ИначеЕсли ВыбСклад.ЭтоГруппа()=1 Тогда
	////	Заг=Заг+"   По группе складов: " + СокрП(ВыбСклад.Наименование)+". ";
	////Иначе
	////	Заг=Заг+"   По складу: " + СокрП(ВыбСклад.Наименование)+". ";
	////КонецЕсли;  
	////                           
	////Если ВыбТовар.Выбран()=0 Тогда
	////	Заг=Заг+"По всем товарам"+". ";
	////ИначеЕсли ВыбТовар.ЭтоГруппа()=1 Тогда
	////	Заг=Заг+"По товарам группы: "+СокрП(ВыбТовар.Наименование)+". ";
	////Иначе
	////	Заг=Заг+"По товару: " + СокрП(ВыбТовар.Наименование)+". ";
	////КонецЕсли;
	
	спУсловий=СоздатьОбъект("СписокЗначений");
	глДобавитьФильтр(ЗапросСКЛ,Условие,спУсловий,"$ПартииТоваров","Товар",спТоваров,"Номенклатура");
	глДобавитьФильтр(ЗапросСКЛ,Условие,спУсловий,"$ПартииТоваров","Склад",спСкладов,"МестаХранения");
	глДобавитьФильтр(ЗапросСКЛ,Условие,спУсловий,"$СпрМХ","ТипСклада",ВыбТипСклада,"");
	глДобавитьФильтр(ЗапросСКЛ,Условие,спУсловий,"$СпрН","Поставщик",спПоставщиков,"Контрагенты");

	
	Заг=СтрЗаменить(спУсловий.ВСтрокуСРазделителями(),"""","");
	
  
  ТекстЗапроса=" -- запрос по инвентаризациям
  |				 SELECT ПартииТоваров.IDDOC [Документ $Документ.СличительнаяВедомость]
  |						, $ПартииТоваров.Товар [Товар $Справочник.Номенклатура]
  |						, СпрН.PARENTID [Товар_Родитель $Справочник.Номенклатура]
  |						, $СпрН.БазоваяЕдиницаИзмерения [БазЕд $Перечисление.ЕдиницыИзмерения]
  |						, $СпрН.ВалютаУчета [ВалютаУчета $Справочник.Валюты]
  |						, $ПартииТоваров.Склад [Склад $Справочник.МестаХранения]
  |						, CASE WHEN ПартииТоваров.DEBKRED=0 THEN $ПартииТоваров.ОстатокТовара ELSE 0 END КолБольше
  |						, CASE WHEN ПартииТоваров.DEBKRED=1 THEN $ПартииТоваров.ОстатокТовара ELSE 0 END КолМеньше
  |						, (1-ПартииТоваров.DEBKRED*2)*$ПартииТоваров.ОстатокТовара КолБаланс
  |						, CASE WHEN ПартииТоваров.DEBKRED=0 THEN $ПартииТоваров.Стоимость ELSE 0 END СуммаБольше
  |						, CASE WHEN ПартииТоваров.DEBKRED=1 THEN $ПартииТоваров.Стоимость ELSE 0 END СуммаМеньше
  |						, (1-ПартииТоваров.DEBKRED*2)*$ПартииТоваров.Стоимость СуммаБаланс
  |				FROM $Регистр.ПартииТоваров AS ПартииТоваров
  |				INNER JOIN $Справочник.Номенклатура СпрН (NOLOCK) ON СпрН.ID=$ПартииТоваров.Товар
  |				INNER JOIN $Справочник.МестаХранения СпрМХ (NOLOCK) ON СпрМХ.ID=$ПартииТоваров.Склад
  |				WHERE (ПартииТоваров.DATE_TIME_IDDOC BETWEEN :Нач AND :Кон~) AND ($ПартииТоваров.Фирма=:ВыбФирма)
  |				AND (ПартииТоваров.IDDOCDEF = $ВидДокумента.СличительнаяВедомость)
  |				AND ($ПартииТоваров.ФлагУчета = :ВыбФлаг)
  |"+Условие+"
  |";

  ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбФирма",глФирма);
  ЗапросСКЛ.УстановитьТекстовыйПараметр("Нач",ДатаНачала);
  ЗапросСКЛ.УстановитьТекстовыйПараметр("Кон",ДатаКонца);
  ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбФлаг",(10-чПересортица));
  
  итИнвентура=СоздатьОбъект("ИндексированнаяТаблица");
  ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итИнвентура);
  Конец_=_GetPerformanceCounter();
	
  Если НазваниеНабораПрав()="Администратор" Тогда
	Сообщить("Время выполнения запроса СКЛ, мс: "+(Конец_-Начало_));
  КонецЕсли;


  ЗнакГруппы=?(флПоГруппам=1,"&","");
  
  Если флПоДокументам=1 Тогда
  	итИнвентура.Группировать("Документ : Документ; Товар : *"+ЗнакГруппы+"Товар","КолБольше,КолМеньше,КолБаланс,СуммаБольше,СуммаМеньше,СуммаБаланс",0);
  Иначе
  	Если Режим="Кратко" Тогда
	  	итИнвентура.Группировать("Товар : *"+ЗнакГруппы+"Товар","КолБольше,КолМеньше,КолБаланс,СуммаБольше,СуммаМеньше,СуммаБаланс",0);
  	Иначе
	  	итИнвентура.Группировать("Товар : *"+ЗнакГруппы+"Товар; Документ : Документ","КолБольше,КолМеньше,КолБаланс,СуммаБольше,СуммаМеньше,СуммаБаланс",0);
  	КонецЕсли;
  КонецЕсли;
  
  Таб=СоздатьОбъект("Таблица"); 
  Таб.ИсходнаяТаблица( "ТаблицаНов" );
  Таб.ВывестиСекцию("Шапка");
  ВывестиИТ(Таб,итИнвентура,?(флПоДокументам=1,"Документ","Товар"),0);
	
  Вал=Константа.БазоваяВалюта;
  СумНедост	=итИнвентура.Итог("СуммаМеньше");
  СумИзл	=итИнвентура.Итог("СуммаБольше");
  СумБаланс	=итИнвентура.Итог("СуммаБаланс"); 
		
	Таб.ПараметрыСтраницы(1,,,,,,,,,1);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.ВывестиСекцию("Итого");	
	Таб.Показать("Отчет по излишкам и недостачам","");	
	семЗаписатьЛогКон( начЛог );	
КонецПроцедуры

//Процедура Сформировать(Режим)  
//	начЛог = семЗаписатьЛогНач( "Отчет", "Упр.излишки и недостачи", "Обработка", Шаблон("Формирование отчета ([Режим])") );
//	ПустаяФирма=глФирма; 
//	ПроверитьДату();
//	
//	//спДокументов = ПолучитьСписокДокументов();
//	
//  Запрос=СоздатьОбъект("Запрос");
//  
//  ТекстЗапроса=
//  "//{{ЗАПРОС(ИзлишкиНедостачи)
//	|Период с ДатаНачала по ДатаКонца;
//	|Фирма = Регистр.ПартииТоваров.Фирма;
//	|Товар = Регистр.ПартииТоваров.Товар;
//	|Склад = Регистр.ПартииТоваров.Склад;
//	|Кол = Регистр.ПартииТоваров.ОстатокТовара;
//	|Стоим = Регистр.ПартииТоваров.Стоимость;
//	|НДС = Регистр.ПартииТоваров.НДС;
//	|Док = Регистр.ПартииТоваров.ТекущийДокумент;
//	|ФлУчета = Регистр.ПартииТоваров.ФлагУчета;
//	|Функция КолПриход = Приход(Кол);
//	|Функция КолРасход = Расход(Кол);
//	|Функция СтоимПриход = Приход(Стоим);
//	|Функция СтоимРасход = Расход(Стоим);
//	|Функция НДСПриход = Приход(НДС);
//	|Функция НДСРасход = Расход(НДС);";
//	
//	Если флПоДокументам=1 Тогда
//		ТекстЗапроса=ТекстЗапроса+"	
//		|Группировка Док;
//		|Группировка Товар упорядочить по Товар.Наименование без групп ;
//		|";
//	Иначе
//		ТекстЗапроса=ТекстЗапроса+"	
//		|Группировка Товар упорядочить по Товар.Наименование;
//		|Группировка Док;";
//	КонецЕсли;
//	
//	ТекстЗапроса=ТекстЗапроса+"
//	|Условие (Фирма=ПустаяФирма);
//	|Условие(ФлУчета=(10-чПересортица));";
//	Заг="";
//	
//	//Если ВыбСклад.Выбран() = 0 Тогда         
//	//	Заг=Заг+"   По всем складам"+". ";
//	//ИначеЕсли ВыбСклад.ЭтоГруппа()=1 Тогда
//	//	ТекстЗапроса=ТекстЗапроса+"
//	//	|Условие (Склад в ВыбСклад);"; 
//	//	Заг=Заг+"   По группе складов: " + СокрП(ВыбСклад.Наименование)+". ";
//	//Иначе
//	//	ТекстЗапроса=ТекстЗапроса+"
//	//	|Условие (Склад=ВыбСклад);"; 
//	//	Заг=Заг+"   По складу: " + СокрП(ВыбСклад.Наименование)+". ";
//	//КонецЕсли;  
//	                           
//	Если ВыбТовар.Выбран()=0 Тогда
//		Заг=Заг+"По всем товарам"+". ";
//	ИначеЕсли ВыбТовар.ЭтоГруппа()=1 Тогда
//		ТекстЗапроса=ТекстЗапроса+"Условие(Товар в ВыбТовар);";
//		Заг=Заг+"По товарам группы: "+СокрП(ВыбТовар.Наименование)+". ";
//	Иначе
//		ТекстЗапроса=ТекстЗапроса+"Условие(Товар=ВыбТовар);";
//		Заг=Заг+"По товару: " + СокрП(ВыбТовар.Наименование)+". ";
//	КонецЕсли;
//	
//	Начало_=_GetPerformanceCounter();
//	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	Конец_=_GetPerformanceCounter();
//	
//	Если НазваниеНабораПрав()="Администратор" Тогда
//		Сообщить("Время выполнения запроса, мс: "+(Конец_-Начало_));
//	КонецЕсли;
//	
//	Таб=СоздатьОбъект("Таблица"); 
//	Таб.ВывестиСекцию("Шапка");
//	
//	Если флПоДокументам=0 Тогда
//		Пока Запрос.Группировка("Товар")=1 Цикл  
//			Тов=Запрос.Товар;
//			Вал=Запрос.Товар.ВалютаУчета;
//			Ед=Запрос.Товар.БазоваяЕдиницаИзмерения;
//			КолНедост=Запрос.КолРасход;
//		//	СумНедост=Запрос.СтоимРасход+Запрос.НДСРасход; 
//			СумНедост=Запрос.СтоимРасход;
//			КолИзл=Запрос.КолПриход;
//			СумИзл=Запрос.СтоимПриход+Запрос.НДСПриход;
//			КолБаланс=КолИзл-КолНедост;
//			СумБаланс=СумИзл-СумНедост; 
//			Если Запрос.Товар.ЭтоГруппа()=1 Тогда
//		    	Таб.ВывестиСекцию("Группа");	
//			Иначе	
//				Если ((Режим="Кратко") или (Режим="Подробно")) Тогда
//			    Таб.ВывестиСекцию("Товар");
//				КонецЕсли;
//				//-- подробно --
//				Если Режим="Подробно" Тогда
//				Пока Запрос.Группировка("Док")=1 Цикл
//					Докум=""+Запрос.Док.ТекущийДокумент()+" от "+Запрос.Док.ДатаДок+"";
//					КолНедост=Запрос.КолРасход;
//					//СумНедост=Запрос.СтоимРасход+Запрос.НДСРасход;
//					СумНедост=Запрос.СтоимРасход;
//					КолИзл=Запрос.КолПриход;
//					СумИзл=Запрос.СтоимПриход+Запрос.НДСПриход; 
//					Если КолИзл<>0 Тогда
//					Таб.ВывестиСекцию("ДокПрих");
//				КонецЕсли;
//				
//				Если КолНедост<>0 Тогда
//					Таб.ВывестиСекцию("ДокРасх");
//					КонецЕсли;
//				КонецЦикла;	               
//				КонецЕсли;
//				//-- -------- --
//			КонецЕсли;
//		КонецЦикла;	   
//	Иначе //по документам
//		Вал=Константа.БазоваяВалюта;
//		Пока Запрос.Группировка("Док")=1 Цикл  
//			КолНедост=Запрос.КолРасход;
//			СумНедост=Запрос.СтоимРасход;
//			КолИзл=Запрос.КолПриход;
//			СумИзл=Запрос.СтоимПриход+Запрос.НДСПриход;
//			КолБаланс=КолИзл-КолНедост;
//			СумБаланс=СумИзл-СумНедост; 
//			Докум=""+Запрос.Док.ТекущийДокумент()+" от "+Запрос.Док.ДатаДок+"";
//
//			Если (КолИзл+КолНедост)=0 Тогда
//				Продолжить;
//			КонецЕсли;			
//			
//			Таб.ВывестиСекцию("Документ");
//			Пока Запрос.Группировка("Товар")=1 Цикл
//				Тов=Запрос.Товар;
//				Вал=Запрос.Товар.ВалютаУчета;
//				Ед=Запрос.Товар.БазоваяЕдиницаИзмерения;
//				КолНедост=Запрос.КолРасход;
//				СумНедост=Запрос.СтоимРасход;
//				КолИзл=Запрос.КолПриход;
//				СумИзл=Запрос.СтоимПриход+Запрос.НДСПриход;
//				КолБаланс=КолИзл-КолНедост;
//				СумБаланс=СумИзл-СумНедост; 
//				
//				Таб.ВывестиСекцию("Товар2");
//			КонецЦикла;
//				
//		КонецЦикла;	   
//		
//	КонецЕсли;
//
//	СумНедост=Запрос.СтоимРасход;
//	СумИзл=Запрос.СтоимПриход+Запрос.НДСПриход;
//	СумБаланс=СумИзл-СумНедост; 
//		
//	Таб.ПараметрыСтраницы(1,,,,,,,,,1);
//	Таб.Защита(Константа.ФлагЗащитыТаблиц);
//	Таб.ТолькоПросмотр(1);
//	Таб.ВывестиСекцию("Итого");	
//	Таб.Показать("Отчет по излишкам и недостачам","");	
//	семЗаписатьЛогКон( начЛог );
//
//	СформироватьНов(Режим);	
//КонецПроцедуры

ДатаНачала=Константа.ОсновнаяДатаНачалаОтчета;
ДатаКонца=ПолучитьДатуТА();
