//#ЗагрузитьИзФайла Текст1.Txt
////////////////////////////////////////////////////////////////////////////////
//  ОПИСАНИЕ МОДУЛЬНЫХ ПЕРЕМЕННЫХ
Перем ТекСтрокаВТаблице; // текущая строка в таблице значений  МФ
// используются для стандартного механизма кнопок "Обновить" и "Настройка"
Перем Таб;		
Перем Обновить;
Перем Расшифровка; 

Перем Запрос;
Перем ЗапросЗ;
Перем ЧислоРабочихДнейВНеделе; // число рабочих дней в неделе (в соотв. с установкой)

Перем ДокументЗаказаПоставщику; // для формирования/заполнения заказа поставщику
Перем ТаблЗначВДок; // табл.значений которую предадим в документ "Заказ поставщику"
					// по кнопке "Сформировать заказ"    

Процедура ЗапасыТоваров() Далее
					
//******************************************************************************
// ИнформацияОСпособеОстатка()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Текст поясняющий текущий способ расчета остатка.
//
// Описание:
//  Возвращает подсказку к текущему способу расчета остатка.
//
Функция ИнформацияОСпособеОстатка()
	
	Если ОстатокНаНачало.ТекущаяСтрока() = 1 Тогда
		Возврат "Остаток на начало периода закупок будет взят из текущих остатков"+
		" на дату начала закупок.";
	ИначеЕсли ОстатокНаНачало.ТекущаяСтрока() = 2 Тогда
		Возврат "Остаток на начало периода закупок будет посчитан исходя из сделанных"+
		" заказов поставщикам и заявок покупателей.";
	ИначеЕсли ОстатокНаНачало.ТекущаяСтрока() = 3 Тогда
		Возврат "Остаток на начало периода закупок будет считаться равным минимальному"+
		" остатку, заданному в карточке номенклатуры.";
	КонецЕсли;
	
КонецФункции // ИнформацияОСпособеОстатка()

//******************************************************************************
// ЯвляетсяРабочимДнем(Д)
//
// Параметры: 
//   Д - дата
// 
// Возвращаемое значение: 	
//   1, если Д является рабочим днем
//	 0, иначе
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Проверяет, является ли дата рабочим днем в соответсвии с настройкой рабочей недели
//
Функция ЯвляетсяРабочимДнем(Д)
	
	Если НомерДняНедели(Д)>ЧислоРабочихДнейВНеделе Тогда
		Возврат 0;
	Иначе
		Возврат 1;
	КонецЕсли;	
	
КонецФункции	// ЯвляетсяРабочимДнем()

//******************************************************************************
// ЧислоРабочихДнейМежду(Д1,Д2)
//
// Параметры: 
//  Д1 и Д2 - даты
// 
// Возвращаемое значение: 	
//  Число рабочих дней между Д1 и Д2 включительно
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Расчет количества рабочих дней между датами в соответствии с установленной
//  длиной рабочей недели.
//  
Функция ЧислоРабочихДнейМежду(Д1,Д2)
	
	Перем ОбщееЧислоДней, ЧислоПолныхНедель, ЧислоДнейВНеполнойНеделе;     
	Перем ЧислоРабочихДней;
	                            
	// если дата конца меньше даты начала, то число дней = 0
	Если Д1>Д2 Тогда
		Возврат 0;
	КонецЕсли;
	    
	ОбщееЧислоДней = (Д2-Д1)+1;                                      
	ЧислоДнейВНеполнойНеделе = ОбщееЧислоДней % 7;
	ЧислоПолныхНедель = Окр((ОбщееЧислоДней - ЧислоДнейВНеполнойНеделе)/7);
	                      
	ЧислоРабочихДней = ЧислоРабочихДнейВНеделе*ЧислоПолныхНедель;
	
	Для Индекс = 0 По (ЧислоДнейВНеполнойНеделе-1) Цикл
		ЧислоРабочихДней = ЧислоРабочихДней + ЯвляетсяРабочимДнем(Д2-Индекс);
	КонецЦикла;	
	
	Возврат ЧислоРабочихДней;           
	
КонецФункции	// ЧислоРабочихДнейМежду()        

//******************************************************************************
// ПроверитьКорректностьДат()
// 
// Параметры:
//  Нет
// 
// Возвращаемое значение:
//   Нет
//
// Вызывается из формул элементов диалога:
//   поля с датами отчета   
// 
// Описание:
//   проверяет даты на корректность (превышение ТА, дата конца закупок должна 
//	 быть не меньше даты конца анализа продаж)
//
Процедура ПроверитьКорректностьДат()           
	
	Если ДатаКонца>ПолучитьДатуТА() Тогда
		Предупреждение("Нельзя устанавливать дату анализа продаж больше Точки Актуальности!", 60);
		ДатаКонца = ПолучитьДатуТА();
		ДатаНачала = Мин(ДатаНачала,ДатаКонца);
	КонецЕсли;                                 
	
	Если ДатаНачала>ДатаКонца Тогда
		Предупреждение("Нельзя устанавливать дату начала анализа продаж больше даты конца!", 60);
		ДатаНачала = ДатаКонца;
	КонецЕсли;	

	Если ДатаНачалаЗак > ДатаКонцаЗак Тогда
		Предупреждение("Нельзя устанавливать дату начала периода закупки больше даты конца!", 60);
		ДатаНачалаЗак = ДатаКонцаЗак;
	КонецЕсли;	
    
	Если ПустоеЗначение(ДатаНачалаЗак) = 1 Тогда
		ДатаНачалаЗак = ?(ПустоеЗначение(ДатаКонца)=0,ДатаКонца+1,ПолучитьДатуТА()+1);
	КонецЕсли;		
	Если ПустоеЗначение(ДатаКонцаЗак) > 0 Тогда
		ДатаКонцаЗак = ДатаНачалаЗак;
	КонецЕсли;	

	//Если (ДатаНачалаЗак - ДатаКонца) > 0 тогда // планируем будущий период
	//	Форма.ОстатокНаНачало.Доступность(1);
	//Иначе
	//	Форма.ОстатокНаНачало.Доступность(0);
	//	ОстатокНаНачало.ТекущаяСтрока(1);
	//КонецЕсли;           
	
КонецПроцедуры // ПроверитьКорректностьДат()

Функция семПолучитьСписокТоваров( пДатаС, пДатаПо )
	сп = СоздатьОбъект( "СписокЗначений" );
	Запрос = СоздатьОбъект( "Запрос" );
	Если ОтборПост = 1 Тогда 
		ODBCRecordSet = СоздатьОбъект( "ODBCRecordSet" );
		ODBCRecordSet.УстБД1С();;
		ТекстЗапроса="
		|SELECT DISTINCT
		|$Рег.Товар [Товар $Справочник.Номенклатура]
		|FROM $Регистр.ПартииТоваров as Рег
		|WHERE Рег.DATE_TIME_IDDOC BETWEEN :Нач and :Кон~";
		Если выбТовар.Выбран() = 0 Тогда 
		ИначеЕсли выбТовар.ЭтоГруппа() = 0 Тогда ТекстЗапроса=ТекстЗапроса+"
			|	AND $Рег.Товар = :Товар";
			ODBCRecordSet.УстановитьТекстовыйПараметр("Товар", выбТовар);
		ИначеЕсли выбТовар.ЭтоГруппа() = 1 Тогда ТекстЗапроса=ТекстЗапроса+"
			|	AND $Рег.Товар IN (SELECT Val FROM #Товар)";
			ODBCRecordSet.УложитьСписокОбъектов(выбТовар, "#Товар", "Номенклатура");
		КонецЕсли;
		Если ПустоеЗначение(ВыбПоставщик) = 0 Тогда ТекстЗапроса = ТекстЗапроса + "
			|	AND $Рег.Контрагент IN (SELECT Val FROM #Поставщик)";
			ODBCRecordSet.УложитьСписокОбъектов(ВыбПоставщик, "#Поставщик", "Контрагенты");
		КонецЕсли;   
		ODBCRecordSet.УстановитьТекстовыйПараметр("Нач", пДатаС);
		ODBCRecordSet.УстановитьТекстовыйПараметр("Кон", пДатаПо);
		ODBCRecordSet.Отладка(0);
		//нач = ТекущееВремя();
		табл = ODBCRecordSet.ВыполнитьИнструкцию(ТекстЗапроса);
		//Сообщить( "Получено строк: "+табл.КоличествоСтрок() );
		//Сообщить( "Время выполнения запроса: "+ семПрошлоВремени(нач,ТекущееВремя()) );
	ИначеЕсли ОтборПост = 2 Тогда 
		ТекстЗапроса = "
		|Обрабатывать НеПомеченныеНаУдаление;
		|Товар = Справочник.Номенклатура.ТекущийЭлемент;
		|Контрагент = Справочник.Номенклатура.Поставщик;
		|Группировка Товар без упорядочивания без групп;";
		Если ВыбТовар.Выбран() = 0 Тогда
		ИначеЕсли ВыбТовар.ЭтоГруппа() = 1 Тогда ТекстЗапроса = ТекстЗапроса + "
			|Условие (Товар в ВыбТовар);";
		Иначе ТекстЗапроса = ТекстЗапроса + "
			|Условие (Товар = ВыбТовар);";
		КонецЕсли;        
		Если ПустоеЗначение(ВыбПоставщик) = 0 Тогда ТекстЗапроса = ТекстЗапроса + "
			|Условие (Контрагент в ВыбПоставщик);";
		КонецЕсли;   
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда Возврат сп; КонецЕсли;
		табл = СоздатьОбъект( "ТаблицаЗначений" );
		Запрос.Выгрузить(табл,,"Товар");
	КонецЕсли;
	
	//табл.ВыбратьСтроку(,""+табл.КоличествоСтрок());
	табл.Выгрузить(сп,,,"Товар");
	Возврат сп;
КонецФункции

//*******************************************
// Процедура генерации запроса РасходТоваров.
//
Процедура Сформировать(ЗакрытьДиалог=0)
	Перем Запрос, ТекстЗапроса;
	начЛог = семЗаписатьЛогНач( "Отчет", "Планирование закупок", "Обработка", "Формирование отчета" );
	//Создание объекта типа Запрос

	Заг="";
	Заг1="";
	Заг2="";
	                           
	ПроверитьКорректностьДат();	
	
	Запрос = СоздатьОбъект("Запрос");

	// число рабочих дней в неделе
	ЧислоРабочихДнейВНеделе = 5;
	Если РабочаяНеделя.ТекущаяСтрока()>0 Тогда
		ЧислоРабочихДнейВНеделе = 4 + РабочаяНеделя.ТекущаяСтрока();
	КонецЕсли;	                    
	                          
	ЗаголУсловия = Шаблон("За период с [ДатаНачала] по [ДатаКонца] "
	+ "([ЧислоРабочихДнейМежду(ДатаНачала,ДатаКонца)] раб. дн.). "
	+ "Закупка с [ДатаНачалаЗак] по [ДатаКонцаЗак] "
	+ "([ЧислоРабочихДнейМежду(ДатаНачалаЗак,ДатаКонцаЗак)] раб. дн.).");
	
	Если ДатаКонца > ПолучитьДатуТА() Тогда
		ПериодЗапроса = ПолучитьДатуТА();
	Иначе
		ПериодЗапроса = ДатаКонца;
	КонецЕсли;                           

	
	спТоваров = семПолучитьСписокТоваров( ДатаНачала, ПериодЗапроса );
	//Сообщить("спТоваров - "+семПрошлоВремени(нач,ТекущееВремя())+" - "+ТекущееВремя());
	//ТекстЗапросаОтборТоваров = 
	//"//{{ЗАПРОС(РасходТоваров)
	//|Период с ДатаНачала по ПериодЗапроса;
	//|Товар = Регистр.ПартииТоваров.Товар;
	//|МинЗапас = Регистр.ПартииТоваров.Товар.Мин_запас,Справочник.Номенклатура.Мин_Запас;
	//|УпрАналитика = Регистр.ПартииТоваров.Склад.УпрАналитика;
	//|ЗакупКол = Регистр.ПартииТоваров.Товар.ЗакупКол, Справочник.Номенклатура.ЗакупКол;";
	//Если ОтборПост = 1 Тогда 
	//	ТекстЗапроса = ТекстЗапроса + "Контрагент = Регистр.ПартииТоваров.Контрагент, Справочник.Номенклатура.Поставщик;";
	//ИначеЕсли ОтборПост = 2 Тогда 
	//	ТекстЗапроса = ТекстЗапроса + "Контрагент = Регистр.ПартииТоваров.Товар.Поставщик, Справочник.Номенклатура.Поставщик;";
	//КонецЕсли;
	//ТекстЗапроса = ТекстЗапроса + "
	////|Контрагент = Регистр.ПартииТоваров.Контрагент, Справочник.Номенклатура.Поставщик;
	//|Склад = Регистр.ПартииТоваров.Склад;
	//|СрокРеализации = Регистр.ПартииТоваров.СрокРеализации;
	//|ОстатокТовара = Регистр.ПартииТоваров.ОстатокТовара;
	//|КодОперации = Регистр.ПартииТоваров.КодОперации;
	//|ФлагУчета = Регистр.ПартииТоваров.ФлагУчета;
	//
	
	ТекстЗапроса = 
	"//{{ЗАПРОС(РасходТоваров)
	|Период с ДатаНачала по ПериодЗапроса;
	|Товар = Регистр.ПартииТоваров.Товар, Справочник.Номенклатура.ТекущийЭлемент;
	|МинЗапас = Регистр.ПартииТоваров.Товар.Мин_запас,Справочник.Номенклатура.Мин_Запас;
	|УпрАналитика = Регистр.ПартииТоваров.Склад.УпрАналитика;
	|ЗакупКол = Регистр.ПартииТоваров.Товар.ЗакупКол, Справочник.Номенклатура.ЗакупКол;";
	//Если ОтборПост = 1 Тогда 
	//	ТекстЗапроса = ТекстЗапроса + "Контрагент = Регистр.ПартииТоваров.Контрагент, Справочник.Номенклатура.Поставщик;";
	//ИначеЕсли ОтборПост = 2 Тогда 
	//	ТекстЗапроса = ТекстЗапроса + "Контрагент = Регистр.ПартииТоваров.Товар.Поставщик, Справочник.Номенклатура.Поставщик;";
	//КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|Контрагент = Регистр.ПартииТоваров.Контрагент, Справочник.Номенклатура.Поставщик;
	|Склад = Регистр.ПартииТоваров.Склад;
	|СрокРеализации = Регистр.ПартииТоваров.СрокРеализации;
	|ОстатокТовара = Регистр.ПартииТоваров.ОстатокТовара;
	|КодОперации = Регистр.ПартииТоваров.КодОперации;
	|ФлагУчета = Регистр.ПартииТоваров.ФлагУчета;
	|Функция ВсегоПрод = Расход(ОстатокТовара) когда(((ФлагУчета=1) ИЛИ (ФлагУчета=13)) И ((КодОперации=ПродажаТовара) ИЛИ (КодОперации=ПродажаБлюда) ИЛИ (КодОперации=ПродажаПринятогоТовара)));
//	|Функция ВсегоВозв = Приход(ОстатокТовара) когда((ФлагУчета=1)  И (КодОперации=ВозвратОтПокупателяКупленногоТовара));
	|Функция ВсегоПроизв = Расход(ОстатокТовара) когда(((ФлагУчета=3) ИЛИ (ФлагУчета=33)) И (КодОперации=СписаниеНаПроизводcтвоБлюда));
	|Функция ВсегоСписаноНаПроизв = Расход(ОстатокТовара) когда((ФлагУчета=56) И (КодОперации=СписаниеТовара));
	|Функция ВсегоСписаноНаПрод = Расход(ОстатокТовара) когда((ФлагУчета=51) И (КодОперации=СписаниеТовара));
	|Функция НачОст     = НачОст(ОстатокТовара);
	|Функция КонОст     = КонОст(ОстатокТовара);
	|Функция Приход     = Приход(ОстатокТовара);
	|Функция Расход     = Расход(ОстатокТовара);
	|Группировка Контрагент упорядочить по Контрагент.ПоАлфавиту без групп;
	|Группировка Товар упорядочить по Товар.Код;
	|Группировка Документ;
	|Условие ((КодОперации=ПродажаТовара) ИЛИ (КодОперации=ПродажаБлюда) ИЛИ (КодОперации=ПродажаПринятогоТовара) ИЛИ (КодОперации=СписаниеНаПроизводcтвоБлюда) ИЛИ (КодОперации=СписаниеТовара));
//	|Условие((ФлагУчета=1) ИЛИ (ФлагУчета=13) ИЛИ (ФлагУчета=3) ИЛИ (ФлагУчета=33) ИЛИ (ФлагУчета=51));
	|Условие ( Товар в спТоваров );
	|"//}}ЗАПРОС
	;

    Если ВыбАналитика.Выбран() = 1 Тогда
		ТекстЗапроса = ТекстЗапроса + "Условие (УпрАналитика = ВыбАналитика);";
	КонецЕсли;        
	
    Если ВыбТовар.Выбран() = 0 Тогда
		Заг1 = "Pa visўm prec§m. ";
	ИначеЕсли ВыбТовар.ЭтоГруппа() = 1 Тогда
		Заг1 ="Grupa " + ВыбТовар.Код+"  "+ ВыбТовар.Наименование+" precem. ";
		ТекстЗапроса = ТекстЗапроса + "Условие (ТОВАР в ВыбТовар);";
	Иначе
		Заг1 ="Prece " + ВыбТовар.Код+"  " + ВыбТовар.Наименование+". ";
		ТекстЗапроса = ТекстЗапроса + "Условие (ТОВАР = ВыбТовар);";
	КонецЕсли;        

    Если ВыбСклад.Выбран() = 0 Тогда
		Заг2 = "Pa visўm noliktaviem. ";
	ИначеЕсли ВыбСклад.ЭтоГруппа() = 1 Тогда
		Заг2 ="Noliktavu grupa " + ВыбСклад.Наименование;
		ТекстЗапроса = ТекстЗапроса + "Условие (Склад в ВыбСклад);";
	Иначе
		Заг2 ="Noliktava " + ВыбТовар.Код+"  " + ВыбТовар.Наименование+". ";
		ТекстЗапроса = ТекстЗапроса + "Условие (Склад = ВыбСклад);";
	КонецЕсли;        
	
    Если ПустоеЗначение(ВыбПоставщик) = 1 Тогда
		Заг3 = "Pa visiem piegўdўtўjiem. "; 
	Иначе
		Заг3 ="Piegўdўtўji: " + ВыбПоставщик.ВСтрокуСРазделителями(); 
		//ТекстЗапроса = ТекстЗапроса + "Условие (Контрагент в ВыбПоставщик);";
	КонецЕсли;   
	
	ЗапасыТоваров();
	//Сообщить("ЗапасыТоваров - "+семПрошлоВремени(нач,ТекущееВремя())+" - "+ТекущееВремя());
	
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
	//Сообщить("Запрос - "+семПрошлоВремени(нач,ТекущееВремя())+" - "+ТекущееВремя());
	ЗапросОстатки = СоздатьОбъект("Запрос");

	Если ДатаНачалаЗак > ПолучитьДатуТА() Тогда
		ПериодЗапроса = ПолучитьДатуТА();
	Иначе
		ПериодЗапроса = ДатаНачалаЗак-1;
	КонецЕсли;                           

	ТекстЗапросаОстатки = 
	 	"//{{ЗАПРОС(ОстаткиТоваров)
   	|Период с ПериодЗапроса по ПериодЗапроса;
 	|Товар = Регистр.ПартииТоваров.Товар;
   	|УпрАналитика = Регистр.ПартииТоваров.Склад.УпрАналитика;
 	|Фирма = Регистр.ПартииТоваров.Фирма;
	|Контрагент = Регистр.ПартииТоваров.Контрагент;
	|Склад = Регистр.ПартииТоваров.Склад;
	|СрокРеализации = Регистр.ПартииТоваров.СрокРеализации;
	|ОстатокТовара = Регистр.ПартииТоваров.ОстатокТовара;
	|Функция Остаток = КонОст(ОстатокТовара);
	|Группировка Товар без упорядочивания;
	|Условие (СрокРеализации>МинСрокРеализ);	
	|Условие (НЕ(Склад в ВыбСкладИсключить));
	|Условие ( Товар в спТоваров );
	|"//}}ЗАПРОС
    ;            

    Если ВыбАналитика.Выбран() = 1 Тогда
		ТекстЗапросаОстатки = ТекстЗапросаОстатки + "Условие (УпрАналитика = ВыбАналитика);";
	КонецЕсли;        
	
    Если ВыбТовар.Выбран() = 0 Тогда
	ИначеЕсли ВыбТовар.ЭтоГруппа() = 1 Тогда
		ТекстЗапросаОстатки = ТекстЗапросаОстатки + "Условие (ТОВАР в ВыбТовар);";
	Иначе
		ТекстЗапросаОстатки = ТекстЗапросаОстатки + "Условие (ТОВАР = ВыбТовар);";
	КонецЕсли; 

    Если ВыбСклад.Выбран() = 0 Тогда
	ИначеЕсли ВыбСклад.ЭтоГруппа() = 1 Тогда
		ТекстЗапроса = ТекстЗапроса + "Условие (Склад в ВыбСклад);";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "Условие (Склад = ВыбСклад);";
	КонецЕсли;        
	
	// Если ошибка в запросе, то выход из процедуры
	Если ЗапросОстатки.Выполнить(ТекстЗапросаОстатки) = 0 Тогда
		Возврат;
	КонецЕсли;
	//Сообщить("ЗапросОстатки - "+семПрошлоВремени(нач,ТекущееВремя())+" - "+ТекущееВремя());

	
	ЗапросРезервы = СоздатьОбъект("Запрос");

	Если ДатаНачалаЗак > ПолучитьДатуТА() Тогда
		ПериодЗапроса = ПолучитьДатуТА();
	Иначе
		ПериодЗапроса = ДатаНачалаЗак-1;
	КонецЕсли;                           

	ТекстЗапросаРезервы = 
	 	"//{{ЗАПРОС(ОстаткиТоваров)
   	|Период с ПериодЗапроса по ПериодЗапроса;
 	|Товар = Регистр.РезервыТоваров.Товар;
//   	|УпрАналитика = Регистр.РезервыТоваров.ПоСчету.Склад.УпрАналитика;
//	|Склад = Регистр.РезервыТоваров.ПоСчету.Склад;
	|РезервТовара = Регистр.РезервыТоваров.РезервТовара;
	|Функция Резерв = КонОст(РезервТовара);
	|Группировка Товар без упорядочивания;
//	|Условие (НЕ(Склад в ВыбСкладИсключить));
	|Условие ( Товар в спТоваров );
	|"//}}ЗАПРОС
    ;            

    Если ВыбАналитика.Выбран() = 1 Тогда
//		ТекстЗапросаРезервы  = ТекстЗапросаРезервы  + "Условие (УпрАналитика = ВыбАналитика);";
	КонецЕсли;        
	
    Если ВыбТовар.Выбран() = 0 Тогда
	ИначеЕсли ВыбТовар.ЭтоГруппа() = 1 Тогда
		ТекстЗапросаРезервы = ТекстЗапросаРезервы + "Условие (ТОВАР в ВыбТовар);";
	Иначе
		ТекстЗапросаРезервы = ТекстЗапросаРезервы + "Условие (ТОВАР = ВыбТовар);";
	КонецЕсли; 
	                         
    Если ВыбСклад.Выбран() = 0 Тогда
	ИначеЕсли ВыбСклад.ЭтоГруппа() = 1 Тогда
		ТекстЗапроса = ТекстЗапроса + "Условие (Склад в ВыбСклад);";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "Условие (Склад = ВыбСклад);";
	КонецЕсли;        
	
	// Если ошибка в запросе, то выход из процедуры
	Если ЗапросРезервы.Выполнить(ТекстЗапросаРезервы) = 0 Тогда
		Возврат;
	КонецЕсли;
	//Сообщить("ЗапросРезервы - "+семПрошлоВремени(нач,ТекущееВремя())+" - "+ТекущееВремя());
	
	ЗапросЗаказано = СоздатьОбъект("Запрос");

	Если ДатаНачалаЗак > ПолучитьДатуТА() Тогда
		ПериодЗапроса = ПолучитьДатуТА();
	Иначе
		ПериодЗапроса = ДатаНачалаЗак-1;
	КонецЕсли;                           
	
	ТекстЗапросаЗаказы = 
	 	"//{{ЗАПРОС(ЗаказыПоставщикам)
   	|Период с ПериодЗапроса по ПериодЗапроса;
 	|Товар = Регистр.ЗаказыПоставщикам.Товар;
	|Контрагент = Регистр.ЗаказыПоставщикам.Клиент;
	|Склад = Регистр.ЗаказыПоставщикам.Склад;
	|СрокПоставки = Регистр.ЗаказыПоставщикам.СрокПоставки;
	|Заказано = Регистр.ЗаказыПоставщикам.Количество;
	|Функция Остаток = КонОст(Заказано);
	|Группировка Товар без упорядочивания;
	|Условие (СрокПоставки<=ДатаНачалаЗак);
	|Условие ( Товар в спТоваров );
	|"//}}ЗАПРОС
    ;            

    Если ВыбТовар.Выбран() = 0 Тогда
	ИначеЕсли ВыбТовар.ЭтоГруппа() = 1 Тогда
		ТекстЗапросаЗаказы = ТекстЗапросаЗаказы + "Условие (ТОВАР в ВыбТовар);";
	Иначе
		ТекстЗапросаЗаказы = ТекстЗапросаЗаказы + "Условие (ТОВАР = ВыбТовар);";
	КонецЕсли;
	             
    Если ВыбСклад.Выбран() = 0 Тогда
	ИначеЕсли ВыбСклад.ЭтоГруппа() = 1 Тогда
		ТекстЗапроса = ТекстЗапроса + "Условие (Склад в ВыбСклад);";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "Условие (Склад = ВыбСклад);";
	КонецЕсли;        
	
	// Если ошибка в запросе, то выход из процедуры
	Если ЗапросЗаказано.Выполнить(ТекстЗапросаЗаказы) = 0 Тогда
		Возврат;
	КонецЕсли;
	//Сообщить("ЗапросЗаказано - "+семПрошлоВремени(нач,ТекущееВремя())+" - "+ТекущееВремя());

	Расшифровка = СоздатьОбъект("СписокЗначений");
	            
	ТаблЗначВДок.УдалитьСтроки();
	
	Таб=СоздатьОбъект("Таблица");
	Таб.ВывестиСекцию("Отчет");	

	ИтогоВсегоПродано=0;
	ИтогоВсегоВозврат=0;
	ИтогоВсегоСписаноНаПроизводство=0;
    ИтогоЗаказано=0;
	ИтогоКонечноеКол=0;
	ИтогоНеобходимоЗаказать=0;
	ИтогоВсегоСум=0;
	ИтогоУпакКол=0;
	ИтогоСуммаОстатка=0;
	
	Всего=0;
	Пока Запрос.Группировка("Контрагент")=1 Цикл
		Пока Запрос.Группировка("Товар")=1 Цикл
			Всего=Всего+1;
		КонецЦикла;
	КонецЦикла;
	
	с=0;
	Пока Запрос.Группировка("Контрагент")=1 Цикл
		
		Таб.ВывестиСекцию("Поставщик");	
		
		Пока Запрос.Группировка("Товар")=1 Цикл

			с=с+1;
			Состояние("Обработано: "+Окр(с/Всего*100,0)+"%");
			
			Если Запрос.ЭтоГруппа("Товар")=1 Тогда
				ПечГруппа=1;
				Уровень=Формат(" ","С"+(Запрос.Товар.Уровень()-1)*2+"");
				ТекТовар=Уровень+Запрос.Товар.Код+"   "+СокрЛП(Запрос.Товар.Наименование);
				Продолжить;
			КонецЕсли;

			ВсегоПродано=Запрос.ВсегоПрод+Запрос.ВсегоСписаноНаПрод;
			ВозвратТовара=0;//Запрос.ВсегоВозв;
			ВсегоСписаноНаПроизводство=Запрос.ВсегоПроизв+Запрос.ВсегоСписаноНаПроизв;
			ВсегоСписано=Запрос.ВсегоСписаноНаПрод;
			           
			КолДнейПродажи = 0; 
			ТекОстаток     = Запрос.НачОст;
			ТекДата        = ДатаНачала;
			ТекДатаУчтена  = 0;
			
			Пока Запрос.Группировка("Документ") = 1 Цикл

				
				Если ПустоеЗначение(Запрос.Документ)=1 Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТекДата <> Запрос.Документ.ДатаДок Тогда
					Если ТекОстаток > 0 Тогда
				        КолДнейПродажи = КолДнейПродажи 
						               + ЧислоРабочихДнейМежду(ТекДата + ТекДатаУчтена,Запрос.Документ.ДатаДок-1);
				    КонецЕсли;         
					ТекДатаУчтена = 0;
					ТекДата       = Запрос.Документ.ДатаДок;
				КонецЕсли;
				      
				ТекОстаток = ТекОстаток + Запрос.Приход - Запрос.Расход;
				
				Если ТекДатаУчтена = 0 Тогда
					Если ((ТекОстаток <> 0)
					     и(ЯвляетсяРабочимДнем(Запрос.Документ.ДатаДок) = 1))
					или  ((Запрос.ВсегоПрод > 0) ИЛИ (Запрос.ВсегоПроизв > 0))  // возвраты не считаем.
					Тогда
						КолДнейПродажи = КолДнейПродажи + 1;
						ТекДатаУчтена  = 1;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла; // по документам
			             
			// прибавим "хвост" от последнего движения до даты конца анализа
			Если ТекОстаток > 0 Тогда
			    КолДнейПродажи = КолДнейПродажи 
			                   + ЧислоРабочихДнейМежду(ТекДата + ТекДатаУчтена,ДатаКонца);
		    КонецЕсли;         
			           
			Резерв = ?(ЗапросРезервы.Получить(Запрос.Товар)=1,ЗапросРезервы.Резерв,0);
			                               
			ОстатокКНачалуЗакупок = Макс(?(ЗапросОстатки.Получить(Запрос.Товар)=1,ЗапросОстатки.Остаток,0)-Резерв,0);
			ОстатокТовара=ОстатокКНачалуЗакупок;
                         
			Заказано = ?(ЗапросЗаказано.Получить(Запрос.Товар)=1,ЗапросЗаказано.Остаток,0);
			
			МинЗапас = ?(ЗапросЗ.Получить(Запрос.Товар)=1,ЗапросЗ.МинЗапасВсего,0);
			
			ДнейПродаж  = ЧислоРабочихДнейМежду(ДатаНачала, ДатаКонца);
			СредняяСкорость = ?(КолДнейПродажи = 0, 0,(ВсегоПродано-ВозвратТовара+ВсегоСписаноНаПроизводство) / КолДнейПродажи);
			                        
			ОстатокКНачалуЗакупок = Макс((ОстатокКНачалуЗакупок - СредняяСкорость*ЧислоРабочихДнейМежду(ПолучитьДатуТА(),ДатаНачалаЗак-1))+Заказано,0);
//			СредняяСкорость = (ВсегоПродано-ВозвратТовара+ВсегоСписаноНаПроизводство)/КолДнейПродажи;
			ДнейЗакупок  = ЧислоРабочихДнейМежду(ДатаНачалаЗак, ДатаКонцаЗак);
			ПланПродаж   = Макс(0,ДнейЗакупок * СредняяСкорость);
			ОбъемЗакупок = Макс(0,ПланПродаж  - ОстатокКНачалуЗакупок);
	
			Цена = ЦенаТовараПоКатегорииДляТовара(Запрос.Товар,КатегорияЦены);
			
			СуммаОстатка=ОстатокКНачалуЗакупок*Цена;
			ИтогоСуммаОстатка=ИтогоСуммаОстатка+СуммаОстатка;
			ЗакупКол = Запрос.ЗакупКол;
			                                                    
			ДопЗаказать=Макс(МинЗапас - Макс(ОстатокКНачалуЗакупок-ПланПродаж,0),0);
			
			ОбъемЗакупок=ОбъемЗакупок+ДопЗаказать;
			               
			
			Если (ОбъемЗакупок<=0)
			и    (ТолькоНеобходимыеЗакупки = 1)
			Тогда     
				Продолжить; // закупка не требуется.
			КонецЕсли;       
			
			ЗакупКол=?(ЗакупКол=0,1,ЗакупКол);
			
        	Если ((ОбъемЗакупок/ЗакупКол)>Окр(ОбъемЗакупок/ЗакупКол)) Тогда
			   УпакКол=Окр(ОбъемЗакупок/ЗакупКол+0.5)*ЗакупКол;
//			   СуммаЗакуп=себ*окр(Количество/ЗакупКол+0.5);
			иначе
			   УпакКол=окр(ОбъемЗакупок/ЗакупКол)*ЗакупКол; 
//			   СуммаЗакуп=себ*окр(Количество/ЗакупКол);
        	КонецЕсли;

			// для формирования/заполнения заказа поставщику
			Если УпакКол > 0 Тогда
				ТаблЗначВДок.НоваяСтрока();
				ТаблЗначВДок.Номенклатура = Запрос.Товар;
				ТаблЗначВДок.Количество = УпакКол;
			КонецЕсли;
			
			Если ПечГруппа=1 Тогда     
				Таб.ВывестиСекцию("Группа");	
				ПечГруппа=0;
			КонецЕсли;
			
			Уровень=Формат(" ","С"+(Запрос.Товар.Уровень()-1)*2+" ");
			ТекТовар=Уровень+Запрос.Товар.Код+"  "+СокрЛП(Запрос.Товар.Наименование);
			          
			ТекРасшифровка=Запрос.Товар;
				
			Таб.ВывестиСекцию("Товар");
			
			ИтогоВсегоПродано=ИтогоВсегоПродано+ВсегоПродано;
			ИтогоВсегоВозврат=ИтогоВсегоВозврат+ВозвратТовара;
			ИтогоВсегоСписаноНаПроизводство=ИтогоВсегоСписаноНаПроизводство+ВсегоСписаноНаПроизводство;
			
			ИтогоКонечноеКол=ИтогоКонечноеКол+ОстатокКНачалуЗакупок;
	        ИтогоЗаказано=ИтогоЗаказано+Заказано;
			ИтогоНеобходимоЗаказать=ИтогоНеобходимоЗаказать+ОбъемЗакупок;
			ИтогоУпакКол=ИтогоУпакКол+УпакКол;
			
			ИтогоВсегоСум=ИтогоВсегоСум+Цена*ОстатокКНачалуЗакупок;
		КонецЦикла;
	КонецЦикла;
	
	Таб.ВывестиСекцию("Итоги");	
	
	Таб.Опции(0,0,7,0,ПарСтрОтчДлинн);
	Таб.ПараметрыСтраницы(2,100,,5,5,5,5,,,1);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Планирование закупок", "");

	Если (Обновить = 2)ИЛИ(ЗакрытьДиалог=1) Тогда
		СтрокаДействийФормы = "#Закрыть";
	КонецЕсли;
	семЗаписатьЛогКон( начЛог );	
КонецПроцедуры                                           


//*******************************************
// Процедура генерации запроса РасходТоваров.
//
Процедура СформироватьПоМин(ЗакрытьДиалог=0)
	Перем Запрос, ТекстЗапроса;
	начЛог = семЗаписатьЛогНач( "Отчет", "Планирование закупок", "Обработка", "Формирование отчета (по миню запасу)" );
	//Создание объекта типа Запрос

	Заг="";
	Заг1="";
	Заг2="";
	                           
	ПроверитьКорректностьДат();	
	                
	ЗапасыТоваров();
	Запрос = СоздатьОбъект("Запрос");

	// число рабочих дней в неделе
	ЧислоРабочихДнейВНеделе = 5;
	Если РабочаяНеделя.ТекущаяСтрока()>0 Тогда
		ЧислоРабочихДнейВНеделе = 4 + РабочаяНеделя.ТекущаяСтрока();
	КонецЕсли;	                    
	                          
	ЗаголУсловия = Шаблон("За период с [ДатаНачала] по [ДатаКонца] "
	+ "([ЧислоРабочихДнейМежду(ДатаНачала,ДатаКонца)] раб. дн.). "
	+ "Закупка с [ДатаНачалаЗак] по [ДатаКонцаЗак] "
	+ "([ЧислоРабочихДнейМежду(ДатаНачалаЗак,ДатаКонцаЗак)] раб. дн.).");
	
	Если ДатаКонца > ПолучитьДатуТА() Тогда
		ПериодЗапроса = ПолучитьДатуТА();
	Иначе
		ПериодЗапроса = ДатаКонца;
	КонецЕсли;                           

    Если ВыбТовар.Выбран() = 0 Тогда
		Заг1 = "Pa visўm prec§m. ";
	ИначеЕсли ВыбТовар.ЭтоГруппа() = 1 Тогда
		Заг1 ="Grupa " + ВыбТовар.Код+"  "+ ВыбТовар.Наименование+" precem. ";
	Иначе
		Заг1 ="Prece " + ВыбТовар.Код+"  " + ВыбТовар.Наименование+". ";
	КонецЕсли;        

    Если ВыбСклад.Выбран() = 0 Тогда
		Заг2 = "Pa visўm noliktaviem. ";
	ИначеЕсли ВыбСклад.ЭтоГруппа() = 1 Тогда
		Заг2 ="Noliktavu grupa " + ВыбСклад.Наименование;
	Иначе
		Заг2 ="Noliktava " + ВыбТовар.Код+"  " + ВыбТовар.Наименование+". ";
	КонецЕсли;        
	
    Если ПустоеЗначение(ВыбПоставщик) = 1 Тогда
		Заг3 = "Pa visiem piegўdўtўjiem. "; 
	Иначе
		Заг3 ="Piegўdўtўji: " + ВыбПоставщик.ВСтрокуСРазделителями(); 
	КонецЕсли;   
	
	ЗапросРезервы = СоздатьОбъект("Запрос");

	Если ДатаНачалаЗак > ПолучитьДатуТА() Тогда
		ПериодЗапроса = ПолучитьДатуТА();
	Иначе
		ПериодЗапроса = ДатаНачалаЗак-1;
	КонецЕсли;                           

	ТекстЗапросаРезервы = 
	 	"//{{ЗАПРОС(ОстаткиТоваров)
 	|Товар = Регистр.РезервыТоваров.Товар;
   	|УпрАналитика = Регистр.РезервыТоваров.ПоСчету.Склад.УпрАналитика;
   	|Склад = Регистр.РезервыТоваров.ПоСчету.Склад;
   	|РезервТовара = Регистр.РезервыТоваров.РезервТовара;
	|Функция Остаток = КонОст(РезервТовара);
	|Группировка Товар без упорядочивания;
	|Условие (НЕ(Склад в ВыбСкладИсключить));
	|"//}}ЗАПРОС
    ;            

    Если ВыбАналитика.Выбран() = 1 Тогда
		ТекстЗапросаРезервы = ТекстЗапросаРезервы + "Условие (УпрАналитика = ВыбАналитика);";
	КонецЕсли;        
	
    Если ВыбТовар.Выбран() = 0 Тогда
	ИначеЕсли ВыбТовар.ЭтоГруппа() = 1 Тогда
		ТекстЗапросаРезервы = ТекстЗапросаРезервы + "Условие (ТОВАР в ВыбТовар);";
	Иначе
		ТекстЗапросаРезервы = ТекстЗапросаРезервы + "Условие (ТОВАР = ВыбТовар);";
	КонецЕсли; 
	
	// Если ошибка в запросе, то выход из процедуры
	Если ЗапросРезервы.Выполнить(ТекстЗапросаРезервы) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросОстатки = СоздатьОбъект("Запрос");

	Если ДатаНачалаЗак > ПолучитьДатуТА() Тогда
		ПериодЗапроса = ПолучитьДатуТА();
	Иначе
		ПериодЗапроса = ДатаНачалаЗак-1;
	КонецЕсли;                           

	ТекстЗапросаОстатки = 
	 	"//{{ЗАПРОС(ОстаткиТоваров)
   	|Товар = Регистр.ПартииТоваров.Товар;
	|Контрагент = Регистр.ПартииТоваров.Контрагент;
   	|УпрАналитика = Регистр.ПартииТоваров.Склад.УпрАналитика;
   	|Склад = Регистр.ПартииТоваров.Склад;
   	|Фирма = Регистр.ПартииТоваров.Фирма;
	|СрокРеализации = Регистр.ПартииТоваров.СрокРеализации;
	|ОстатокТовара = Регистр.ПартииТоваров.ОстатокТовара;
	|Функция Остаток = КонОст(ОстатокТовара);
	|Группировка Товар без упорядочивания;
	|Группировка СрокРеализации;
	|Условие (СрокРеализации>МинСрокРеализ);
	|Условие (НЕ(Склад в ВыбСкладИсключить));
	|"//}}ЗАПРОС
    ;            

    Если ВыбАналитика.Выбран() = 1 Тогда
		ТекстЗапросаОстатки = ТекстЗапросаОстатки + "Условие (УпрАналитика = ВыбАналитика);";
	КонецЕсли;        
	
    Если ВыбТовар.Выбран() = 0 Тогда
	ИначеЕсли ВыбТовар.ЭтоГруппа() = 1 Тогда
		ТекстЗапросаОстатки = ТекстЗапросаОстатки + "Условие (ТОВАР в ВыбТовар);";
	Иначе
		ТекстЗапросаОстатки = ТекстЗапросаОстатки + "Условие (ТОВАР = ВыбТовар);";
	КонецЕсли; 

    Если ПустоеЗначение(ВыбПоставщик) = 1 Тогда
	Иначе
		ТекстЗапросаОстатки = ТекстЗапросаОстатки + "Условие (Контрагент в ВыбПоставщик);";
	КонецЕсли;   

	
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапросаОстатки) = 0 Тогда
		Возврат;
	КонецЕсли;

	Расшифровка = СоздатьОбъект("СписокЗначений");
	
	Таб=СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("МинЗапас");
	Таб.ВывестиСекцию("Отчет");	
        
	с=0;
	Всего=0;
	Пока Запрос.Группировка("Товар")=1 Цикл
		Всего=Всего+1;
	КонецЦикла;

	ИтогоОстаток=0;	                  
	ЗапросЗ.вНачалоВыборки();
	
//	Запрос.вНачалоВыборки();
	Пока ЗапросЗ.Группировка(1)=1 Цикл
		          
		Резерв=0;
		Если ЗапросРезервы.Получить(ЗапросЗ.Товар)=1 Тогда
			Резерв=ЗапросРезервы.Остаток;
		КонецЕсли;
		
		Остаток=Запрос.Остаток;
		МинЗапас=?(ЗапросЗ.Получить(Запрос.Товар)=1,ЗапросЗ.МинЗапасВсего,0);
		Если (Остаток-Резерв)>=МинЗапас Тогда
		    Продолжить;
		КонецЕсли;

		с=с+1;
		Состояние("Обработано: "+Окр(с/Всего*100,0)+"%");
		
		Если Запрос.ЭтоГруппа("Товар")=1 Тогда
			ПечГруппа=1;
			Уровень=Формат(" ","С"+(Запрос.Товар.Уровень()-1)*2+"");
			ТекТовар=Уровень+Запрос.Товар.Код+"   "+СокрЛП(Запрос.Товар.Наименование);
			Продолжить;
		КонецЕсли;

		Если ПечГруппа=1 Тогда     
			Таб.ВывестиСекцию("Группа");	
			ПечГруппа=0;
		КонецЕсли;
		
		Уровень=Формат(" ","С"+(Запрос.Товар.Уровень()-1)*2+" ");
		ТекТовар=Уровень+Запрос.Товар.Код+"  "+СокрЛП(Запрос.Товар.Наименование);
		          
		ТекРасшифровка=Запрос.Товар;
			
		Таб.ВывестиСекцию("Товар");
		
		ИтогоОстаток=ИтогоОстаток+Остаток;
		Пока Запрос.Группировка(2)=1 Цикл //сроки реализации
			Таб.ВывестиСекцию("Сроки");
		КонецЦикла;
	КонецЦикла;
	
	Таб.ВывестиСекцию("Итоги");	
	
	Таб.Опции(0,0,7,0,ПарСтрОтчДлинн);
	Таб.ПараметрыСтраницы(2,100,,5,5,5,5,,,1);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Планирование закупок", "");

	Если (Обновить = 2)ИЛИ(ЗакрытьДиалог=1) Тогда
		СтрокаДействийФормы = "#Закрыть";
	КонецЕсли;
	семЗаписатьЛогКон( начЛог );	
КонецПроцедуры                                           

//******************************************************************************
// ПоКнопкеСформироватьЗаказ()
//
// Параметры:
//	Нет
//
// Возвращаемое значение: 
//	Нет
//
// Вызывается из формул элементов диалога:
//  Кнопка "Сформировать заказ".
//
// Описание:   
//	Формирует документ "Заказ поставщику" и заполняет его строками из отчета
//
Процедура ПоКнопкеСформироватьЗаказ()
	
	Перем СписокПараметров;
	
	Заголовок = "Перенесено в документ заказ поставщику";
	Сформировать(1); 
	Таб.Показать(,, -1);
	
	СписокПараметров = СоздатьОбъект("СписокЗначений");
	СписокПараметров.Установить("ТаблЗнач", ТаблЗначВДок);
	
	Если ПустоеЗначение(ДокументЗаказаПоставщику) = 0 Тогда
		
		// отчет вызвали из документа
		ОткрытьФорму(ДокументЗаказаПоставщику, СписокПараметров);  
	Иначе
		
		// будем формировать новый документ => добавим параметры
		СписокПараметров.Установить("ДатаДок", ДатаНачалаЗак);
		
		ОткрытьФорму("Документ.ЗаказПоставщику", СписокПараметров);
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеСформироватьЗаказ()         
          

////////////////////////////////////////////////////////////////////////////////
//  ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ

//******************************************************************************
// Предопределенная процедура
Процедура ПриОткрытии(ФлагВосстановленияНастройки)	
	ОтборПост = 2;    
	    
	Форма.кнСформироватьЗаказ.Видимость(0);
	Если (ТипЗначенияСтр(Форма.Параметр) = "СписокЗначений") и (глОбновить = 0)  Тогда
		глРасшифровка = Форма.Параметр;
		ВызовИзДокумента = 1;                              
		Форма.кнСформироватьЗаказ.Заголовок("Перенести в документ");
		Форма.кнСформировать	 .Заголовок("Просмотр");
		Форма.кнСформироватьЗаказ.Видимость(1);
	КонецЕсли;
	
	Если (глФлагРасшифровки = 1) или (ВызовИзДокумента = 1) Тогда 
		Обновить = глОбновить;
		
		// восстанавливаем настройки из списка
		ДатаНачала 		= глРасшифровка.Получить("ДатаНачала");
		ДатаКонца 		= глРасшифровка.Получить("ДатаКонца");
		ДатаНачалаЗак	= глРасшифровка.Получить("ДатаНачалаЗак");
		ДатаКонцаЗак 	= глРасшифровка.Получить("ДатаКонцаЗак");
		ВидРазделителя	= глРасшифровка.Получить("ВидРазделителя");
		ВыбРазделитель1	= глРасшифровка.Получить("ВыбРазделитель1");
		ВыбРазделитель2	= глРасшифровка.Получить("ВыбРазделитель2");
		ВыбРазделитель3	= глРасшифровка.Получить("ВыбРазделитель3");

		ВыбТМЦ 			= глРасшифровка.Получить("ВыбТМЦ");
		
		ОстатокНаНачало.    ТекущаяСтрока(глРасшифровка.Получить("ОстатокНаНачало"));
		РабочаяНеделя.      ТекущаяСтрока(глРасшифровка.Получить("РабочаяНеделя"));        
		ТолькоНеобходимыеЗакупки = глРасшифровка.Получить("ТолькоНеобходимыеЗакупки");
		ПорядокОкругления        = глРасшифровка.Получить("ПорядокОкругления");
		
		Если ВызовИзДокумента = 1  Тогда
		    ДокументЗаказаПоставщику = глРасшифровка.Получить("ДокументЗаказаПоставщику");
		КонецЕсли;
		
		Если Обновить <> 0 Тогда
			Таб = глТаблица;
		КонецЕсли;           
		
		Если (Обновить <> 2) и (ВызовИзДокумента <> 1) Тогда
			Сформировать();
			СтатусВозврата(0);
			Возврат;       
		КонецЕсли;           
	Иначе
		Обновить = 0;
	КонецЕсли;                      
	
КонецПроцедуры		// ПриОткрытии()         

//*******************************************
// Процедура генерации запроса ЗапасыТоваров.
//
Процедура ЗапасыТоваров()
	Перем ТекстЗапроса;
	//Создание объекта типа Запрос
	ЗапросЗ = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(ЗапасыТоваров)
	|Товар = Справочник.Запасы.Владелец;
	|УпрАналитика = Справочник.Запасы.УпрАналитика;
	|МинЗапас = Справочник.Запасы.МинЗапас;
	|Функция МинЗапасВсего = Сумма(МинЗапас);
	|Группировка Товар без упорядочивания без групп;
	|"//}}ЗАПРОС
	;
	                 
    Если ВыбТовар.Выбран() = 0 Тогда
	ИначеЕсли ВыбТовар.ЭтоГруппа() = 1 Тогда
		ТекстЗапроса = ТекстЗапроса + "Условие (ТОВАР в ВыбТовар);";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "Условие (ТОВАР = ВыбТовар);";
	КонецЕсли; 
	
    Если ВыбАналитика.Выбран() = 1 Тогда
		ТекстЗапроса = ТекстЗапроса + "Условие (УпрАналитика = ВыбАналитика);";
	КонецЕсли;        
	
	// Если ошибка в запросе, то выход из процедуры
	Если ЗапросЗ.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры




//-------------------------------    
ДатаНачала=НачМесяца(ПолучитьДатуТА());
Если Число(ДатаНачала)=0 Тогда
	ДатаНачала='01.01.98';
Конецесли;  
ДатаКонца=ПолучитьДатуТА();

// инициализация границ периодов
ДатаНачалаЗак = ДатаКонца+1;
ДатаКонцаЗак  = КонМесяца(ДатаНачалаЗак);

РежимЗапроса="";
//*******************************************

Клиентов=СоздатьОбъект("СписокЗначений");
ПоКлиентам=СоздатьОбъект("ТаблицаЗначений");
ПоКлиентам.НоваяКолонка("КлиентКод","Строка",10);
ПоКлиентам.НоваяКолонка("Клиент","Справочник.Клиенты");
ПоКлиентам.НоваяКолонка("Возврат","Число",19,5);
ПоКлиентам.НоваяКолонка("ПриходНал","Число",19,5);
ПоКлиентам.НоваяКолонка("ПриходКредит","Число",19,5);
ПоКлиентам.НоваяКолонка("Долг","Число",19,5);
ПоКлиентам.НоваяКолонка("ПросрДолг","Число",19,5);

// инициализация списков	                       
РабочаяНеделя.УдалитьВсе();
РабочаяНеделя.ДобавитьЗначение("5-дневная");
РабочаяНеделя.ДобавитьЗначение("6-дневная"); 
РабочаяНеделя.ДобавитьЗначение("7-дневная");
РабочаяНеделя.ТекущаяСтрока(3);
                                                                
ОстатокНаНачало.УдалитьВсе();
ОстатокНаНачало.ДобавитьЗначение("взять из итогов");
ОстатокНаНачало.ДобавитьЗначение("рассчитать по заказам/заявкам");
ОстатокНаНачало.ДобавитьЗначение("равен минимальному остатку");
ОстатокНаНачало.ТекущаяСтрока(1);

МинСрокРеализ=ПолучитьДатуТА();

ТолькоНеобходимыеЗакупки=1;
ВыбСкладИсключить.ДобавитьЗначение(Константа.СкладКухня);

ТаблЗначВДок = СоздатьОбъект("ТаблицаЗначений");
ТаблЗначВДок.НоваяКолонка("Номенклатура");
ТаблЗначВДок.НоваяКолонка("Количество");
ТаблЗначВДок.НоваяКолонка("ПоЗаявке", "Документ.ЗаявкаПокупателя");

КатегорияЦены=Константа.ОсновнаяКатегорияЦены;