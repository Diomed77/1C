Перем ЗапросПоОстаткам;

Процедура ВывестиОстаткиПоСкладам(пТовар)
	Если ЗапросПоОстаткам.Получить(пТовар,) = 0 Тогда Возврат; КонецЕсли;
	стр = "Остатки товара"+РазделительСтрок;
	стр = стр + Шаблон("([пТовар.Код]) [пТовар.Наименование]");
	стр = стр + РазделительСтрок;
	стр = стр + РазделительСтрок;
	Пока ЗапросПоОстаткам.Группировка("Склад") = 1 Цикл
		стр = стр + Шаблон("[ЗапросПоОстаткам.фКонОСт#Ч012.3, ] [пТовар.БазоваяЕдиницаИзмерения] - [ЗапросПоОстаткам.Склад]");
		стр = стр + РазделительСтрок;
	КонецЦикла;
	Предупреждение(стр);
	ЗапросПоОстаткам.ВНачалоВыборки();
КонецПроцедуры

Процедура ОбработкаЯчейкиТаблицы(пЗнач,пФлаг,пТаб,пАдрес)
	пФлаг = 1;
	Если Число(Прав(пАдрес,СтрДлина(пАдрес)-Найти(пАдрес,"C"))) > 10 Тогда
		пФлаг = 0;
		ВывестиОстаткиПоСкладам(пЗнач);
	КонецЕсли;
КонецПроцедуры

Функция УправлениеДиалогом()
	Форма.ДатаПо.Доступность(флОстатки);
	Форма.выбСклад.Доступность(флОстатки);
КонецФункции

Функция ПредставлениеУсловия()
	стр = "";
	Если выбТовар.Выбран() = 1 Тогда
		Если выбТовар.ЭтоГруппа() = 1 Тогда 
			стр = стр + Шаблон( "По группе товаров [выбТовар.Код] [выбТовар]. ");
		Иначе
			стр = стр + Шаблон( "По товару [выбТовар.Код] [выбТовар]. ");
		КонецЕсли;
	КонецЕсли;
	Если выбПоставщик.Выбран() = 1 Тогда
		Если выбПоставщик.ЭтоГруппа() = 1 Тогда 
			стр = стр + Шаблон( "По группе поставщиков [выбПоставщик.Код] [выбПоставщик]. ");
		Иначе
			стр = стр + Шаблон( "По поставщику [выбПоставщик.Код] [выбПоставщик]. ");
		КонецЕсли;
	КонецЕсли;
	Если флОстатки = 1 Тогда
		стр = стр + Шаблон( "Остатки на дату [ДатаПо]");
		Если выбСклад.Выбран() = 1 Тогда
			Если выбСклад.ЭтоГруппа() = 1 Тогда 
				стр = стр + Шаблон( "По группе поставщиков [выбСклад.Код] [выбСклад]. ");
			Иначе
				стр = стр + Шаблон( "По поставщику [выбСклад.Код] [выбСклад]. ");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат стр;
КонецФункции

Функция ТекстЗапроса()
	ТекстЗапроса = "
	|Товар = Справочник.СкладскиеАдреса.Товар;
	|Поставщик = Справочник.СкладскиеАдреса.Товар.Поставщик;
	|Адрес = Справочник.СкладскиеАдреса.ТекущийЭлемент;
	|Группировка Товар упорядочить по Товар.Наименование;
	|Условие (ПустоеЗначение(Товар) = 0);
	|";
	Если выбТовар.Выбран() = 1 Тогда
		Если выбТовар.ЭтоГруппа() = 1 Тогда ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Товар в выбТовар );";
		Иначе ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Товар = выбТовар );";
		КонецЕсли;
	КонецЕсли;
	Если выбПоставщик.Выбран() = 1 Тогда
		Если выбПоставщик.ЭтоГруппа() = 1 Тогда ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Поставщик в выбПоставщик );";
		Иначе ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Поставщик = выбПоставщик );";
		КонецЕсли;
	КонецЕсли;
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаПоОстаткам()
	ТекстЗапроса = "
	|Период с ДатаПо по ДатаПо;
	|Товар = Регистр.ОстаткиТоваров.Товар;
	|Склад = Регистр.ОстаткиТоваров.Склад;
	|Ост = Регистр.ОстаткиТоваров.ОстатокТовара;
	|Функция фКонОст = КонОст(Ост);
	|Группировка Товар без упорядочивания без групп;
	|Группировка Склад без упорядочивания без групп;
	|";
	Если выбТовар.Выбран() = 1 Тогда
		Если выбТовар.ЭтоГруппа() = 1 Тогда ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Товар в выбТовар );";
		Иначе ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Товар = выбТовар );";
		КонецЕсли;
	КонецЕсли;
	Если выбСклад.Выбран() = 1 Тогда
		Если выбСклад.ЭтоГруппа() = 1 Тогда ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Склад в выбСклад );";
		Иначе ТекстЗапроса = ТекстЗапроса + "
			|Условие ( Склад = выбСклад );";
		КонецЕсли;
	КонецЕсли;
	Возврат ТекстЗапроса;
КонецФункции

Процедура Сформировать()
	начЛог = семЗаписатьЛогНач( "Отчет", "Товары по складским адресам", "Обработка", "Формирование отчета" );
	Запрос = СоздатьОбъект( "Запрос" );
	Если Запрос.Выполнить( ТекстЗапроса() ) = 0 Тогда Возврат; КонецЕсли;
    //Сообщить("Запрос - "+семПрошлоВремени(нач,ТекущееВремя()));
    
	Если флОстатки = 1 Тогда
		//нач = ТекущееВремя();
		ЗапросПоОстаткам = СоздатьОбъект( "Запрос" );
		Если ЗапросПоОстаткам.Выполнить( ТекстЗапросаПоОстаткам() ) = 0 Тогда Возврат; КонецЕсли;
	    //Сообщить("ЗапросПоОстаткам - "+семПрошлоВремени(нач,ТекущееВремя()));
	КонецЕсли;
	
	//табл = СоздатьОбъект( "ТаблицаЗначений" );
	//ЗапросПоОстаткам.Выгрузить(табл,0,0);
	//табл.ВыбратьСтроку();
	
	таб = СоздатьОбъект( "Таблица" );
	таб.ИсходнаяТаблица( "Таблица" );
	пФильтр = ПредставлениеУсловия();
	таб.ВывестиСекцию( "Заголовок" );		
	таб.ВывестиСекцию( "Шапка|Товар" );		
	Если флОстатки = 1 Тогда
		таб.ПрисоединитьСекцию("Шапка|Остаток");
	КонецЕсли;
	таб.Опции( 0, 0, таб.ВысотаТаблицы(), 0 );
	Всего = 0; н = 0;
	Пока Запрос.Группировка("Товар") = 1 Цикл
		Всего = Всего + 1;
	КонецЦикла;
	Пока Запрос.Группировка("Товар") = 1 Цикл Состояние( Шаблон( "Выведено [н] из [Всего]" ) );
		н = н + 1;
		Товар = Запрос.Товар;
		Если Товар.ЭтоГруппа() = 1 Тогда
			пТовар = Запрос.Товар;
			таб.ВывестиСекцию(Шаблон("Гр[Товар.Уровень()]|Товар"));
			Если флОстатки = 1 Тогда
				таб.ПрисоединитьСекцию(Шаблон("Гр[Товар.Уровень()]|Остаток"));
			КонецЕсли;
		Иначе
			пТовар = Шаблон("[Запрос.Товар.Наименование] [Запрос.Товар.КодПоставщика] ");
			пКод = Запрос.Товар.Код;
			пШтрихКод = Запрос.Товар.ШтрихКод;
			пАдрес = Запрос.Адрес;
			таб.ВывестиСекцию(Шаблон("Эл[Товар.Уровень()]|Товар"));
			Если флОстатки = 1 Тогда
				ЗапросПоОстаткам.Получить(Запрос.Товар,);
				пОстаток = Шаблон("[ЗапросПоОстаткам.фКонОст#Ч012.3, ]");
				пЕд = ?(ПустоеЗначение(пОстаток)=0,Запрос.Товар.БазоваяЕдиницаИзмерения,"");
				таб.ПрисоединитьСекцию(Шаблон("Эл[Товар.Уровень()]|Остаток"));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	таб.ТолькоПросмотр( 1 );
	таб.Показать( "Списание по категориям" );
	семЗаписатьЛогКон( начЛог );	
КонецПроцедуры

Процедура ПроверкаПрав()
	спПрав = СоздатьОбъект( "СписокЗначений" );
	спПрав.ДобавитьЗначение("Администратор");
	спПрав.ДобавитьЗначение("РуководительЛогистики");
	Если спПрав.НайтиЗначение( НазваниеНабораПрав() ) = 0 Тогда
		Предупреждение( "Нет прав." );
		СтатусВозврата( 0 );
	КонецЕсли;
КонецПроцедуры

Процедура ПриОткрытии()
	//ПроверкаПрав(); 
	
	глПриОткрытии(Контекст,"ТоварыПоСклАдресам");
КонецПроцедуры

Форма.выбТовар.ВыборГруппы(1);
Форма.выбПоставщик.ВыборГруппы(1);
Форма.выбСклад.ВыборГруппы(1);