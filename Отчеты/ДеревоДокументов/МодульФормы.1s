// Обработка вывода графа подчиненности документов.
// (с) Александр Орефков, telepat@inbox.ru
// Для работы необходимо наличие ВК 1С++ (www.1cpp.ru)
// Для пользовательской настройки смотреть раздел "Функции, настраиваемые пользователями"

Перем выбДок;	// Корень построения графа
Перем тзДоки;	// Хранилище документов, их представлений, родителей, потомков
Перем сзУзлы;	// Список для хранения узлов графа
Перем запросРодителей, запросПотомков;		// Параметризированные запросы для получения родительских/подчиненных документов
Перем сзИстория;
Перем ОткрыватьВНовомОкне;

// Способ получения родительских/подчиненных документов.
// 1 - SQL база, через родной ODBC
// 2 - DBF база, через ODBC VFP Driver или OLEDB Provider For VFP
// 3 - DBF база, штатными методами
Перем ВариантПолучения;
Перем быстрТзДбф1С;

// Это битовые флаги
Перем фРодителиРазвернуты, фПотомкиРазвернуты, фЭтоРодитель, фЕстьРодители, фЕстьПотомки;

//////////////////////////////////////////////////////////////////////////
// Функции, настраиваемые пользователями

// Функция должна возвращать строковое представление документа, для вывода его в дереве.
// Вызывается один раз при первом появлении документа в отчете, и запоминается
// ТекДок: документ, описание которого надо получить
Функция ПолучитьОписаниеДокумента(Знач ТекДок)
	Возврат "" + ТекДок;
КонецФункции	// ПолучитьОписаниеДокумента

// Возвращает цвет, в котором выводить документ, структура подчиненности котрого строится
Функция ПолучитьЦветДляОсновногоДока()
	Возврат 51200;	// RGB (0, 200, 0)
КонецФункции	// ПолучитьЦветДляОсновногоДока

// Процедура открытия документа в журнале документов.
// ТекДок: обрабатываемый документ
// ДокВид: вид обрабатываемого документа
Процедура ОткрытьВЖурнале(ТекДок, ДокВид)
	// По умолчанию пытаемся открыть его в полном журнале, если он задан в конфигурации,
	// и у пользователя есть права на его просмотр. В противном случае пытаемся открыть
	// документ в журнале, заданном для данного вида документов.
	Журнал = "";
	Для Номер=1 По Метаданные.Журнал() Цикл
		Если Метаданные.Журнал(Номер).ДляПолногоЖурнала = 1 Тогда
			Журнал = Метаданные.Журнал(Номер).Идентификатор;
			Если ПравоДоступа("Чтение", "Журнал."+Журнал)=0 Тогда
				Журнал = "";
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПустоеЗначение(Журнал)=1 Тогда
		Журнал = ДокВид;
	КонецЕсли;
	
	Конт = "";
	ОткрытьФорму("Журнал."+Журнал, Конт);
	Если ТипЗначения(Конт)=100 Тогда
		НачИнтервала = Конт.НачалоИнтервала();
		КонИнтервала = Конт.КонецИнтервала();
		ДатаДок = ТекДок.ДатаДок;
		Если НачИнтервала>ДатаДок Тогда
			НачИнтервала = ДатаДок;
		КонецЕсли;
		Если КонИнтервала<ДатаДок Тогда
			КонИнтервала = ДатаДок;
		КонецЕсли;
		Конт.УстановитьИнтервал(НачИнтервала, КонИнтервала);
		Конт.АктивизироватьОбъект(ТекДок);
		Если Конт.ТекущийДокумент<>ТекДок Тогда
			// Не установился. Возможно, установлен отбор.
			Конт.УстановитьОтбор("", "");
			Конт.АктивизироватьОбъект(ТекДок);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	// ОткрытьВЖурнале

// Процедура открытия документа
// Вызывается при щелчке в таблице на документе
// По умолчанию открывает форму документа
Процедура ОткрытьДокумент(ТекДок)
	ОткрытьФорму(ТекДок);
КонецПроцедуры	// ОткрытьДокумент

//
// Конец функций, настраиваемых пользователями
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
// Методы работы с битовыми флагами.

// Прочитать, установлен ли флаг в числе.
// чЗначение: проверяемое число
// фФлаг: значение флага, степень двойки (1, 2, 4, 8...)
// Возвращает: 1 - флаг установлен, 0 - не установлен
Функция ПолучитьФлаг(чЗначение, фФлаг)
	Возврат Цел(чЗначение / фФлаг) % 2;
КонецФункции	// ПолучитьФлаг

// Установить/сбросить флаг в числе
// чЗначение: обрабатываемое число
// фФлаг: значение флага, степень двойки (1, 2, 4, 8...)
// чСтавить: 1 - установить флаг, 0 - сбросить
Функция УстановитьФлаг(чЗначение, фФлаг, чСтавить)
	Возврат Цел(чЗначение / фФлаг / 2) * фФлаг * 2 + фФлаг * чСтавить + чЗначение % фФлаг;
КонецФункции//  

Процедура РодителиПотомкиСКЛ(ТекДок)
	запросРодителей.УстПараметр(1, ТекДок);
	запросПотомков.УстПараметр(1, запросПотомков.мд.ЗначениеВСамуюДлиннуюСтрокуБД(ТекДок));
	тзДоки.Родители	= запросРодителей.ВыполнитьИнструкцию();
	тзДоки.Потомки	= запросПотомков.ВыполнитьИнструкцию();
КонецПроцедуры	// РодителиПотомкиСКЛ

Процедура РодителиПотомкиДБФ_Запросом(ТекДок)
	запросРодителей.УстановитьТекстовыйПараметр("ТекДок", ТекДок);
	тзДоки.Родители = запросРодителей.ВыполнитьИнструкцию("
	|select
	|substr(parentval, 3, 13) as [Документ $Документ]
	|from 1scrdoc
	|where CHILDID = :ТекДок and mdid = '   0'
	|order by parentval
	|");
	запросПотомков.УстановитьТекстовыйПараметр("ТекДок", ТекДок);
	тзДоки.Потомки = запросПотомков.ВыполнитьИнструкцию("
	|select
	|childid as [Документ $Документ],
	|j.iddocdef as [Документ_вид]
	|from 1scrdoc as doc
	|inner join 1sjourn as j on doc.childid = j.iddoc
	|where doc.parentval = :ТекДок*
	|and doc.mdid = '   0'
	|order by CHILDDATE,CHILDTIME,CHILDID
	|");
КонецПроцедуры	// РодителиПотомкиДБФ_Запросом

Процедура РодителиПотомкиДБФ_1С(ТекДок)
	тз = ЗначениеИзСтрокиВнутр(быстрТзДбф1С);
	запросПотомков.ВыбратьПодчиненныеДокументы(,,ТекДок);
	Пока запросПотомков.ПолучитьДокумент() = 1 Цикл
		тз.НоваяСтрока();
		тз.Документ = запросПотомков.ТекущийДокумент();		
	КонецЦикла;
	тзДоки.Потомки = тз;
	
	ВидДок = ТекДок.Вид();
	вм = запросРодителей.Получить(ВидДок);
	Если ПустоеЗначение(вм)=1 Тогда
		вм = СоздатьОбъект("ВыполняемыйМодуль");
		ТекстМодуля = "
		|Процедура ПолучитьРодителей(ТекДок, тз)
		|";
		мета = Метаданные.Документ(ВидДок);
		Для Номер=1 По мета.РеквизитШапки() Цикл
			Если мета.РеквизитШапки(Номер).Тип="Документ" Тогда
				ид = мета.РеквизитШапки(Номер).Идентификатор;
				ТекстМодуля=ТекстМодуля+"Если ПустоеЗначение(ТекДок."+ид+")=0 Тогда тз.НоваяСтрока();тз.Документ = ТекДок."+ид+";КонецЕсли;
				|";
			КонецЕсли;
		КонецЦикла;
		СписокТЧ=СоздатьОбъект("СписокЗначений");
		Для Номер=1 По мета.РеквизитТабличнойЧасти() Цикл
			Если мета.РеквизитТабличнойЧасти(Номер).Тип="Документ" Тогда
				СписокТЧ.ДобавитьЗначение(мета.РеквизитТабличнойЧасти(Номер).Идентификатор);
			КонецЕсли;
		КонецЦикла;
		Если СписокТЧ.РазмерСписка()>0 Тогда
			ТекстМодуля=ТекстМодуля+"_тз = СоздатьОбъект(""ТаблицаЗначений"");
			|кс = тз.КоличествоСтрок();
			|_кс = ТекДок.КоличествоСтрок();
			|";
			Для Номер=1 По СписокТЧ.РазмерСписка() Цикл
				ид = СписокТЧ.ПолучитьЗначение(Номер);
				ТекстМодуля=ТекстМодуля+"ТекДок.ВыгрузитьТабличнуюЧасть(_тз, """+ид+""");
				|тз.КоличествоСтрок(кс+_кс);
				|тз.Заполнить(_тз, кс+1);
				|кс=кс+_кс;
				|";
			КонецЦикла;
			ТекстМодуля=ТекстМодуля+"тз.Свернуть(""Документ"","""");
			|тз.ВыбратьСтроки();
			|Пока тз.ПолучитьСтроку() = 1 Цикл
			|	Если ПустоеЗначение(тз.Документ)=1 Тогда
			|		тз.УдалитьСтроку();
			|		Прервать;
			|	КонецЕсли;
			|КонецЦикла;
			|";
		КонецЕсли;
		ТекстМодуля=ТекстМодуля+"
		|КонецПроцедуры";
		вм.УстановитьМодуль(ТекстМодуля);
		вм.КомпилироватьМодуль();
		вм.ВыполнитьМодуль();
		запросРодителей.Установить(ВидДок, вм);
	КонецЕсли;
	тз = ЗначениеИзСтрокиВнутр(быстрТзДбф1С);
	вм.ПолучитьРодителей(ТекДок, тз);
	тзДоки.Родители = тз;
КонецПроцедуры	// РодителиПотомкиДБФ_1С

Процедура ПолучитьРодителейПотомков(Знач ТекДок)
	поз = 0;
	Если тзДоки.НайтиЗначение(ТекДок, поз, 1)=0 Тогда
		тзДоки.НоваяСтрока();
		тзДоки.Документ	= ТекДок;
		тзДоки.Представление = ПолучитьОписаниеДокумента(ТекДок);
		Если ВариантПолучения = 1 Тогда
			РодителиПотомкиСКЛ(ТекДок);
		ИначеЕсли ВариантПолучения = 2 Тогда
			РодителиПотомкиДБФ_Запросом(ТекДок);
		Иначе
			РодителиПотомкиДБФ_1С(ТекДок);
		КонецЕсли;
	Иначе
		тзДоки.ПолучитьСтрокуПоНомеру(поз);
	КонецЕсли;
КонецПроцедуры	// ПолучитьРодителейПотомков

Функция НовыйУзел(Док, ДокПредок, ЭтоРодитель)
	ПолучитьРодителейПотомков(Док);
	узел = СоздатьОбъект("Структура");
	сзУзлы.ДобавитьЗначение(узел);
	узел.Вставить("Номер",				сзУзлы.РазмерСписка());
	узел.Вставить("НомерДока",			тзДоки.НомерСтроки);
	узел.Вставить("Флаги",				?(ЭтоРодитель=1, фЭтоРодитель, 0));
	узел.Вставить("ДокПредок",			ДокПредок);
	узел.Вставить("Секции",				СоздатьОбъект("СписокЗначений"));
	узел.Вставить("УзлыРодителей",		СоздатьОбъект("СписокЗначений"));
	узел.Вставить("УзлыПотомков",		СоздатьОбъект("СписокЗначений"));
	
	Есть = тзДоки.Родители.КоличествоСтрок();
	Если ЭтоРодитель = 0 Тогда	//Для узла-потомка в граф родителей не выводится родитель, из которого он сам был выведен
		Если ПустоеЗначение(ДокПредок)=0 Тогда
			Есть = Есть - 1;
		КонецЕсли;
	КонецЕсли;
	узел.Флаги = УстановитьФлаг(узел.Флаги, фЕстьРодители, ?(Есть = 0, 0, 1));

	Есть = тзДоки.Потомки.КоличествоСтрок();
	Если ЭтоРодитель = 1 Тогда	//Для узла-родителя в граф потомков не выводится потомок, из которого он сам был выведен
		Если ПустоеЗначение(ДокПредок)=0 Тогда
			Есть = Есть - 1;
		КонецЕсли;
	КонецЕсли;
	узел.Флаги = УстановитьФлаг(узел.Флаги, фЕстьПотомки, ?(Есть = 0, 0, 1));
	Возврат узел;
КонецФункции	// НовыйУзел

Процедура ВывестиУзелВТаблицу(Узел, Знач Уровень, фЗавершение, сзЛиний)
	РодителиРазвернуты	= ПолучитьФлаг(Узел.Флаги, фРодителиРазвернуты);
	ПотомкиРазвернуты	= ПолучитьФлаг(Узел.Флаги, фПотомкиРазвернуты);
	ЭтоРодитель			= ПолучитьФлаг(Узел.Флаги, фЭтоРодитель);
	Уровень				= Уровень + 1;
	
	// Сначала выведем родительские доки, если они развернуты
	Если РодителиРазвернуты = 1 Тогда
		сзЛиний.ДобавитьЗначение(?((фЗавершение=1) И (ЭтоРодитель=1), 1, 2));
		Завершение = 1;
		Узлы = Узел.УзлыРодителей;
		Для Номер=1 По Узлы.РазмерСписка() Цикл
			ВывестиУзелВТаблицу(Узлы.ПолучитьЗначение(Номер), Уровень, Завершение, сзЛиний);
			Завершение = 0;
		КонецЦикла;
		сзЛиний.УдалитьЗначение(Уровень);
	КонецЕсли;
	
	// Теперь выведем сам узел
	Секции = Узел.Секции;
	КолСекций = Секции.РазмерСписка();
	Если КолСекций = 0 Тогда
		Для Номер=2 По Уровень-1 Цикл
			Секции.ДобавитьЗначение(Таблица.ПолучитьСекцию(?(сзЛиний.ПолучитьЗначение(Номер)=1, "Нет", "Палка")+"|Ветки"));
		КонецЦикла;
		Если Уровень>1 Тогда
			Секции.ДобавитьЗначение(Таблица.ПолучитьСекцию(?(фЗавершение=0,"Ответвление",
				"Заворот" +?(ЭтоРодитель=1, "Снизу", "Сверху")) + "|Ветки"));
		КонецЕсли;
		НомерУзла	= Узел.Номер;
		ТекДок		= тзДоки.ПолучитьЗначение(Узел.НомерДока, "Документ");
		ПечДок		= тзДоки.ПолучитьЗначение(Узел.НомерДока, "Представление");
		Сим			= ?(ТекДок.ПометкаУдаления() = 1, "э", ?(ТекДок.Проведен() = 1, "ю", Симв(168)));
		Секция		= Таблица.ПолучитьСекцию("ДокГ|ДокВ");
		Если ТекДок = выбДок Тогда
			Секция.Область(2, 3, 2, 3).ЦветФона(ПолучитьЦветДляОсновногоДока());
		КонецЕсли;
		Секции.ДобавитьЗначение(Секция);
		КолСекций = Секции.РазмерСписка();
	КонецЕсли;
	
	Таблица.ВывестиСекцию("Нет|Пусто");
	Для Номер=1 По КолСекций - 1 Цикл
		Таблица.ПрисоединитьСекцию(Секции.ПолучитьЗначение(Номер));
	КонецЦикла;
	
	Секция = Секции.ПолучитьЗначение(КолСекций);
	ОбластьРазворота = Секция.Область(2, 1, 2, 1);
	Если ПолучитьФлаг(Узел.Флаги, фЕстьРодители) = 1 Тогда
		Если РодителиРазвернуты = 0 Тогда
			ОбластьРазворота.Текст = "+";
			Секция.Область(1, 1, 1, 1).РамкаСправа(0);
		Иначе
			ОбластьРазворота.Текст = "-";
			Секция.Область(1, 1, 1, 1).РамкаСправа(7);
		КонецЕсли;
	Иначе
		ОбластьРазворота.Текст = "";
		ОбластьРазворота.Расшифровка("", 2);
	КонецЕсли;
	
	ОбластьРазворота = Секция.Область(3, 1, 3, 1);
	Если ПолучитьФлаг(Узел.Флаги, фЕстьПотомки) = 1 Тогда
		Если ПотомкиРазвернуты = 0 Тогда
			ОбластьРазворота.Текст = "+";
			Секция.Область(4, 1, 4, 1).РамкаСправа(0);
		Иначе
			ОбластьРазворота.Текст = "-";
			Секция.Область(4, 1, 4, 1).РамкаСправа(7);
		КонецЕсли;
	Иначе
		ОбластьРазворота.Текст = "";
		ОбластьРазворота.Расшифровка("", 2);
	КонецЕсли;
	
	Таблица.ПрисоединитьСекцию(Секция);
	
	// Выведем потомков, если они развернуты
	Если ПотомкиРазвернуты = 1 Тогда
		сзЛиний.ДобавитьЗначение(?((фЗавершение = 1) И (ЭтоРодитель=0), 1, 2));
		Узлы = Узел.УзлыПотомков;
		рс = Узлы.РазмерСписка();
		Для Номер=1 По рс Цикл
			ВывестиУзелВТаблицу(Узлы.ПолучитьЗначение(Номер), Уровень, ?(Номер = рс, 1, 0), сзЛиний);
		КонецЦикла;
		сзЛиний.УдалитьЗначение(Уровень);
	КонецЕсли;
КонецПроцедуры	// ВывестиУзелВТаблицу

Процедура ОтрисоватьТаблицу()
	Таблица.Очистить();
	Таблица.ВывестиСекцию("Кнопки");
	Таблица.Область(2, 32, 2, 32).Текст = ?(ОткрыватьВНовомОкне=1, "ю", Симв(168));
	
	Если ПустоеЗначение(выбДок)=0 Тогда
		Таблица.ВывестиСекцию("Заголовок");
	Иначе
		Возврат;
	КонецЕсли;
	
	сзЛиний = СоздатьОбъект("СписокЗначений");
	Узел = сзУзлы.ПолучитьЗначение(1);
	ВывестиУзелВТаблицу(Узел, 0, 1, сзЛиний);
	
	Таблица.Показать();
КонецПроцедуры	// ОтрисоватьТаблицу

Процедура РазвернутьСвернутьРодителей(НомерУзла)
	Узел = сзУзлы.ПолучитьЗначение(НомерУзла);

	Если ПолучитьФлаг(Узел.Флаги, фРодителиРазвернуты) = 0 Тогда	// Развернуть родителей
		Если Узел.УзлыРодителей.РазмерСписка()=0 Тогда
			// Родителей еще не разворачивали
			// Надо построить список узлов - родителей документа
			ТекДок			= тзДоки.ПолучитьЗначение(Узел.НомерДока, "Документ");
			ПропуститьДок	= ?(ПолучитьФлаг(Узел.Флаги, фЭтоРодитель)=0, Узел.ДокПредок, "");
			Родители		= тзДоки.ПолучитьЗначение(Узел.НомерДока, "Родители");
			Родители.ВыбратьСтроки();
			Пока Родители.ПолучитьСтроку()=1 Цикл
				Док = Родители.Документ;
				Если Док <> ПропуститьДок Тогда
					Узел.УзлыРодителей.ДобавитьЗначение(НовыйУзел(Док, ТекДок, 1));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		узел.Флаги = УстановитьФлаг(Узел.Флаги, фРодителиРазвернуты, 1);
	Иначе	// Свернуть родителей
		узел.Флаги = УстановитьФлаг(Узел.Флаги, фРодителиРазвернуты, 0);
	КонецЕсли;
КонецПроцедуры	// РазвернутьСвернутьРодителей

Процедура РазвернутьСвернутьПотомков(НомерУзла)
	Узел = сзУзлы.ПолучитьЗначение(НомерУзла);
	
	Если ПолучитьФлаг(Узел.Флаги, фПотомкиРазвернуты) = 0 Тогда		// Развернуть потомков
		Если Узел.УзлыПотомков.РазмерСписка()=0 Тогда
			// Потомков еще не разворачивали
			// Надо построить список узлов - потомков документа
			ТекДок			= тзДоки.ПолучитьЗначение(Узел.НомерДока, "Документ");
			ПропуститьДок	= ?(ПолучитьФлаг(Узел.Флаги, фЭтоРодитель)=1, Узел.ДокПредок, "");
			Потомки 		= тзДоки.ПолучитьЗначение(Узел.НомерДока, "Потомки");
			Потомки.ВыбратьСтроки();
			Пока Потомки.ПолучитьСтроку()=1 Цикл
				Док = Потомки.Документ;
				Если Док <> ПропуститьДок Тогда
					Узел.УзлыПотомков.ДобавитьЗначение(НовыйУзел(Док, ТекДок, 0));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		узел.Флаги = УстановитьФлаг(Узел.Флаги, фПотомкиРазвернуты, 1);
	Иначе	// Свернуть потомков
		узел.Флаги = УстановитьФлаг(Узел.Флаги, фПотомкиРазвернуты, 0);
	КонецЕсли;
КонецПроцедуры	// РазвернутьСвернутьПотомков

Процедура Выполнить()
	Если ПустоеЗначение(выбДок)=1 Тогда
		Возврат;
	КонецЕсли;
	Форма.Заголовок("Структура для "+выбДок);
	тзДоки.УдалитьСтроки();
	сзУзлы.УдалитьВсе();
	Если сзИстория.Принадлежит(выбДок)=0 Тогда
		сзИстория.ДобавитьЗначение(выбДок);
	КонецЕсли;
	НовыйУзел(выбДок, "", 1);
	РазвернутьСвернутьРодителей(1);
	РазвернутьСвернутьПотомков(1);
	
	ОтрисоватьТаблицу();
КонецПроцедуры	// Выполнить

Процедура ВыбратьДокИВыполнить()
	док = СоздатьОбъект("Документ");
	Если док.Выбрать("Укажите документ", "")<>1 Тогда
		Возврат;
	КонецЕсли;
	выбДок = док.ТекущийДокумент();
	Выполнить();
КонецПроцедуры	// ВыбратьДокИВыполнить

Процедура История()
	Если сзИстория.РазмерСписка()<2 Тогда
		Предупреждение("Нет истории просмотра документов", 5);
		Возврат;
	КонецЕсли;
	выб=выбДок;
	Если сзИстория.ВыбратьЗначение(выб, "Укажите документ")=1 Тогда
		выбДок = выб;
		Выполнить();
	КонецЕсли;
КонецПроцедуры	// История

Процедура ОткрыватьВНовом()
	ОткрыватьВНовомОкне = 1 - ОткрыватьВНовомОкне;
	Таблица.Область(2, 32, 2, 32).Текст = ?(ОткрыватьВНовомОкне=1, "ю", Симв(168));
	Таблица.Показать();
КонецПроцедуры	// ОткрыватьВНовом

//============================================================
Процедура ОбработкаЯчейкиТаблицы(ЗначениеРасшифровки, ФлагСтандОбр, ТаблИсточник, АдресЯчейки)
	ФлагСтандОбр = 0;
	Если ТипЗначения(ЗначениеРасшифровки)=2 Тогда	// Строка
		НомСтр = Число(Сред(АдресЯчейки, 2));
		НомКол = Число(Сред(АдресЯчейки, Найти(АдресЯчейки, "C")+1));
		НомерУзла = ТаблИсточник.Область(НомСтр, НомКол + 2).Расшифровка();
		ТекДок =тзДоки.ПолучитьЗначение(сзУзлы.ПолучитьЗначение(НомерУзла).НомерДока, "Документ");
		
		Если ЗначениеРасшифровки = "Ж" Тогда		// Открыть в журнале
			ДокВид = ТекДок.Вид();
			ОткрытьВЖурнале(ТекДок, ДокВид);
			Возврат;
		ИначеЕсли ЗначениеРасшифровки = "Д" Тогда	// Вывести структуру подчиненности для этого документа
			Если ОткрыватьВНовомОкне=1 Тогда
				мдв = СоздатьОбъект("MetaDataWork");
				ОткрытьФорму("Отчет#"+мдв.ЗначениеВДлиннуюСтрокуБД(ТекДок), ТекДок, РасположениеФайла());
			Иначе
				выбДок = ТекДок;
				Выполнить();
			КонецЕсли;
			Возврат;
		ИначеЕсли ЗначениеРасшифровки="П" Тогда		// Развернуть/Свернуть потомков
			РазвернутьСвернутьПотомков(НомерУзла);
		ИначеЕсли ЗначениеРасшифровки="Р" Тогда		// Развернуть/Свернуть родителей
			РазвернутьСвернутьРодителей(НомерУзла);
		КонецЕсли;
		ОтрисоватьТаблицу();
	Иначе
		Если ЗначениеРасшифровки = -1 Тогда
			Форма.Закрыть();
			Возврат;
		ИначеЕсли ЗначениеРасшифровки=-2 Тогда		// Выбрать документ
			ВыбратьДокИВыполнить();
			Возврат;
		ИначеЕсли ЗначениеРасшифровки=-3 Тогда		// История
			История();
			Возврат;
		ИначеЕсли ЗначениеРасшифровки=-4 Тогда		// Открывать в новом
			ОткрыватьВНовом();
			Возврат;
		КонецЕсли;
		ТекДок = тзДоки.ПолучитьЗначение(сзУзлы.ПолучитьЗначение(ЗначениеРасшифровки).НомерДока, "Документ");
		ОткрытьДокумент(ТекДок);
	КонецЕсли;
КонецПроцедуры

Функция ПодготовитьSQL()
	запросРодителей = СоздатьОбъект("ODBCRecordSet");
	запросРодителей.Подготовить("
	|select
	|substring(parentval, 3, 13) [Документ $Документ]
	|from _1scrdoc (nolock)
	|where CHILDID = ? and mdid = 0
	|order by parentval
	|");
	запросРодителей.ДобПараметр(1, 14, 9, 0);
	
	запросПотомков = СоздатьОбъект("ODBCRecordSet");
	запросПотомков.Подготовить("
	|select
	|right(CHILD_DATE_TIME_IDDOC, 9) [Документ $Документ],
	|j.iddocdef [Документ_вид]
	|from _1scrdoc doc (nolock)
	|inner join _1sjourn j (nolock) on right(CHILD_DATE_TIME_IDDOC, 9) = j.iddoc
	|where doc.parentval = ?
	|and doc.mdid = 0
	|order by CHILD_DATE_TIME_IDDOC
	|");
	запросПотомков.ДобПараметр(1, 14, 23, 0);
	Возврат 1;
КонецФункции	// ПодготовитьSQL

Функция ПодготовитьДБФ_Запросом()
	Попытка
		ОлеДБ = СоздатьОбъект("OLEDBData");
		ОлеДБ.Соединение(
		"Provider=VFPOLEDB.1;
		|Deleted=Yes;
		|Data Source=" + КаталогИБ() + ";
		|Mode=ReadWrite;
		|Extended Properties="""";
		|User ID="""";
		|Password="""";
		|Mask Password=False;
		|Collating Sequence=RUSSIAN;
		|DSN=""""");
		запросРодителей = ОлеДБ.СоздатьКоманду();
		запросПотомков = ОлеДБ.СоздатьКоманду();
		Возврат 2;
	Исключение
	КонецПопытки;
	
	БазаДанных = СоздатьОбъект("ODBCDataBase");
	Если БазаДанных.Соединение("
		|DRIVER=Microsoft Visual FoxPro Driver;
		|Deleted=Yes;
		|Null=Yes;
		|Collate=RUSSIAN;
		|BackgroundFetch=No;
		|Exclusive=No;
		|SourceType=DBF;
		|SourceDB=" + КаталогИБ()) = 0 
	Тогда
		Возврат 0;
	КонецЕсли;
	запросРодителей.УстБД(БазаДанных);
	запросПотомков.УстБД(БазаДанных);
	Возврат 2;
КонецФункции	// ПодготовитьДБФ_OLEDB

Функция ПодготовитьДБФ_1С()
	// Здесь мы будем хранить список скомпилированных ВыполнямыхМодулей
	// для каждого вида документа, генерируя их по мере надобности
	// Каждый модуль будет тащить таблицу родительских документов
	// на основе реквизитов шапки и ТЧ
	запросРодителей = СоздатьОбъект("СписокЗначений");
	// И создадим Документ, через который будем выбирать подчиненные
	запросПотомков = СоздатьОбъект("Документ");
	
	тз = СоздатьОбъект("ТаблицаЗначений");
	тз.НоваяКолонка("Документ", "Документ");
	быстрТзДбф1С = ЗначениеВСтрокуВнутр(тз);
	Возврат 4;
КонецФункции	// ПодготовитьДБФ_1С

Процедура ПриОткрытии()
	Таблица.Опции(0, 0, 3);
	Таблица.ТолькоПросмотр(1);
	
	сзУзлы = СоздатьОбъект("СписокЗначений");
	сзИстория = СоздатьОбъект("СписокЗначений");
	
	тзДоки = СоздатьОбъект("ТаблицаЗначений");
	тзДоки.НоваяКолонка("Документ");
	тзДоки.НоваяКолонка("Представление");
	тзДоки.НоваяКолонка("Родители");
	тзДоки.НоваяКолонка("Потомки");
	
	ТестТипаБазы = СоздатьОбъект("ODBCDataBase");
	ВариантПолучения = 0;
	Если ТестТипаБазы.ЕстьСоединение()=0 Тогда
		// Это дбф база
		Если МонопольныйРежим()=0 Тогда
			ВариантПолучения = ПодготовитьДБФ_Запросом();
		КонецЕсли;
	Иначе
		ВариантПолучения = ПодготовитьSQL();
	КонецЕсли;
	
	Если ВариантПолучения = 0 Тогда
		ВариантПолучения = ПодготовитьДБФ_1С();
	КонецЕсли;

	Попытка
		выбДок = Форма.Параметр.ТекущийДокумент();
		Выполнить();
	Исключение
		ОтрисоватьТаблицу();
	КонецПопытки;
КонецПроцедуры	// ПриОткрытии

Процедура ПриПовторномОткрытии()
	ПриОткрытии();
КонецПроцедуры	// ПриПовторномОткрытии


фРодителиРазвернуты	= 1;
фПотомкиРазвернуты	= 2;
фЭтоРодитель		= 4;
фЕстьРодители		= 8;
фЕстьПотомки		= 16;
ОткрыватьВНовомОкне = 1;