Перем _тпАкцСкидки, Источник;
Перем _тпСкидкиПоставщика, ИсточникПоставщика;
Перем _тпПретензииПоставщика;


Функция ОткрытьСертификатБИО(Язык="",Реж="") Далее
Процедура ЗаполнитьАкцСкидкиТП( Обновить=0 ) Далее

Процедура НастройкаСкидкиПоставщикаТП()
	
	Колонка = _тпСкидкиПоставщика.Колонки.Добавить("ТекущийЭлемент"); Колонка.Данные = "ТекущийЭлемент"; Колонка.Заголовок = "Документ"; 
	Колонка.ЗнакУпорядочивания = 1;
	Колонка.Ширина=18;
	
	Колонка = _тпСкидкиПоставщика.Колонки.Добавить("ДатаНачала"); Колонка.Данные = "ДатаНачала"; Колонка.Заголовок = "С"; 
	Колонка.ЗнакУпорядочивания = 1;
	Колонка.Ширина=6;
	
	Колонка = _тпСкидкиПоставщика.Колонки.Добавить("ДатаКонца"); Колонка.Данные = "ДатаКонца"; Колонка.Заголовок = "По"; 
	Колонка.ЗнакУпорядочивания = 1;
	Колонка.Ширина=6;

	Колонка = _тпСкидкиПоставщика.Колонки.Добавить("ПроцентСкидки"); Колонка.Данные = "ПроцентСкидки"; Колонка.Заголовок = "% скидки"; 
	Колонка.ЗнакУпорядочивания = 1;
	Колонка.Ширина=4;

КонецПроцедуры

Процедура ЗаполнитьСкидкиПоставщикаТП( Обновить=0 )
	
	Если Обновить=0 Тогда
		ИсточникПоставщика = СоздатьОбъект("ПоставщикДанныхODBC.MSSQL"); 
		ИсточникПоставщика.БазаДанных =  СоздатьОбъект("ODBCDataBase"); 
	КонецЕсли;
	
	
	

//	ТекстЗапроса="SELECT СкидкаПоставщику2.IDDOC as [ТекущийЭлемент $Документ.СкидкаПоставщику2]
//	|,NullIf($СкидкаПоставщику2.НачалоДействия, '17530101') as ДатаНачала
//	|	, NullIf($СкидкаПоставщику2.КонецДействия, '17530101') as ДатаКонца	
//	|,Журнал.DOCNO as Документ_ном
//	|   , $СкидкаПоставщику2.ПроцентСкидки as ПроцентСкидки
//	|FROM _1SJOURN AS Журнал
//	|INNER JOIN $Документ.СкидкаПоставщику2 AS СкидкаПоставщику2 ON Журнал.IDDOC = СкидкаПоставщику2.IDDOC
////ЗАМЕР ПОКАЗАЛ, ЧТО КОМЕНТИРОВАНАЯ СТРОКА РАБОТАЕТ ЧУТЬ МЕДЛЕНЕЕ
////  |FROM $Документ.СкидкаПоставщику2 AS СкидкаПоставщику
////	|INNER JOIN _1SJOURN AS Журнал ON СкидкаПоставщику2.IDDOC = Журнал.IDDOC
//	|WHERE ($СкидкаПоставщику2.Поставщик = ?Клиент(14,9))
//	|AND ($СкидкаПоставщику2.НачалоДействия >= ?ДатаНач(8) AND $СкидкаПоставщику2.КонецДействия <= ?ДатаКон(8))";
	
	ТекстЗапроса="SELECT СкидкиПоставщиков.IDDOC as [ТекущийЭлемент $Документ.СкидкаПоставщику2]
	|	, NullIf($СкидкиПоставщиков.НачалоДействия, '17530101') as ДатаНачала
	|	, NullIf($СкидкиПоставщиков.КонецДействия, '17530101') as ДатаКонца
	|	, Журнал.DOCNO as Документ_ном
	|   , $СкидкиПоставщиков.ОбщийПроцент as ПроцентСкидки
	|	, Журнал.DATE_TIME_IDDOC as ДатаВремяИдДок
	|FROM $Регистр.СкидкиПоставщиков AS СкидкиПоставщиков
	|INNER JOIN _1SJOURN AS Журнал ON СкидкиПоставщиков.IDDOC = Журнал.IDDOC
	|WHERE ($СкидкиПоставщиков.Поставщик = ?Клиент(14,9))
//	|AND ($СкидкиПоставщиков.НачалоДействия >= ?ДатаНач(8) AND $СкидкиПоставщиков.КонецДействия <= ?ДатаКон(8))
	|AND (Cast(Left(Журнал.DATE_TIME_IDDOC, 8) AS datetime) >= ?ДатаНач(8)) AND (Cast(Left(Журнал.DATE_TIME_IDDOC, 8) AS datetime) <= ?ДатаКон(8))
	|AND (СкидкиПоставщиков.LINENO_ = 1)";
	
	
	
	
	ИсточникПоставщика.УстТекстЗапроса(ТекстЗапроса);
	ИсточникПоставщика.Параметры.Установить("Клиент",ТекущийЭлемент());
	
	ИсточникПоставщика.Параметры.Установить("ДатаНач",ДатаС1);
	ИсточникПоставщика.Параметры.Установить("ДатаКон",ДатаПо1);
	
	Поле = ИсточникПоставщика.Поля.Добавить("ТекущийЭлемент");
  	Поле.Автоудаление = 0;
	Поле.ТипБыстрогоПоиска = 1;

	ИсточникПоставщика.УстКлючПорядка("ДатаВремяИдДок DESC, ДатаНачала DESC, ДатаКонца DESC, ТекущийЭлемент"); 
	ИсточникПоставщика.УстИДПоле("ТекущийЭлемент");
	
	_тпСкидкиПоставщика.ТаймаутОбновления  		= 0;
	_тпСкидкиПоставщика.РазрешитьПеретаскивание	= 0;
	
	
	_тпСкидкиПоставщика.ПоставщикДанных = ИсточникПоставщика; 
	_тпСкидкиПоставщика.ПоставщикДанных.Обновить(); 
	_тпСкидкиПоставщика.ОбновитьСтроки();
	//ДокументСкидкаПоставщику=_тпСкидкиПоставщика.ТекущиеДанные.ТекущийЭлемент;

	НастройкаСкидкиПоставщикаТП();


КонецПроцедуры


Процедура НастройкаПретензииПоставщикаТП()
	
	//Колонка = _тпСкидкиПоставщика.Колонки.Добавить("ТекущийЭлемент"); Колонка.Данные = "ТекущийЭлемент"; Колонка.Заголовок = "Документ"; 
	//Колонка.ЗнакУпорядочивания = 1;
	//Колонка.Ширина=18;
	
	Колонка = _тпПретензииПоставщика.Колонки.Добавить("Претензия"); Колонка.Данные = "Претензия"; Колонка.Заголовок = "Претензия"; 
	Колонка.ЗнакУпорядочивания = 1;
	Колонка.Ширина=17;
	
	Колонка = _тпПретензииПоставщика.Колонки.Добавить("ЕстьВДоговоре"); Колонка.Данные = "ЕстьВДоговоре"; Колонка.Заголовок = "Есть"; 
	Колонка.ЗнакУпорядочивания = 1;
	Колонка.Ширина=3;

	Колонка = _тпПретензииПоставщика.Колонки.Добавить("ДнейДоВыставления"); Колонка.Данные = "ДнейДоВыставления"; Колонка.Заголовок = "Дней"; 
	Колонка.ЗнакУпорядочивания = 1;
	Колонка.Ширина=4;
	
	
КонецПроцедуры

Процедура ЗаполнитьПретензииПоставщикаТП( Обновить=0 )
	
	Если Обновить=0 Тогда
		ИсточникПоставщика = СоздатьОбъект("ПоставщикДанныхODBC.MSSQL"); 
		ИсточникПоставщика.БазаДанных =  СоздатьОбъект("ODBCDataBase"); 
	КонецЕсли;
	
	ТекстЗапроса="SELECT Спр.ID  as [ТекущийЭлемент $Справочник.КонтрагентыПретензии]
	|					, $Спр.СутьПретензии as [Претензия $Справочник.Претензии]
	|					, $Спр.ЕстьВДоговоре as [ЕстьВДоговоре $Число]
	|					, $Спр.ДнейДоВыставления as ДнейДоВыставления
	| FROM $Справочник.КонтрагентыПретензии AS Спр
	| WHERE Спр.PARENTEXT=?Клиент(14,9) AND ISMARK = 0 
	|";
	
	ИсточникПоставщика.УстТекстЗапроса(ТекстЗапроса);
	ИсточникПоставщика.Параметры.Установить("Клиент",ТекущийЭлемент());
	
	Поле = ИсточникПоставщика.Поля.Добавить("Претензия");
  	Поле.Автоудаление = 0;
	Поле.ТипБыстрогоПоиска = 1;

	ИсточникПоставщика.УстКлючПорядка("ТекущийЭлемент, Претензия"); 
	ИсточникПоставщика.УстИДПоле("ТекущийЭлемент");
	
	_тпПретензииПоставщика.ТаймаутОбновления  		= 0;
	_тпПретензииПоставщика.РазрешитьПеретаскивание	= 0;
	
	
	_тпПретензииПоставщика.ПоставщикДанных = ИсточникПоставщика; 
	_тпПретензииПоставщика.ПоставщикДанных.Обновить(); 
	_тпПретензииПоставщика.ОбновитьСтроки();

	НастройкаПретензииПоставщикаТП();


КонецПроцедуры

Процедура СоздатьДокументСкидки()
	ОткрытьФорму("Документ.СкидкаПоставщику2",ТекущийЭлемент(),);
	ЗаполнитьАкцСкидкиТП(1);
	_тпСкидкиПоставщика.ОбновитьСтроки();
КонецПроцедуры


Процедура тпСкидкиПоставщикаВыбор(_ТП, _Кол, ТипРегиона)
	ОткрытьФорму(_Кол,,0);
КонецПроцедуры

Процедура НастройкаАкцСкидкиТП()
	Колонка = _тпАкцСкидки.Колонки.Добавить("ДатаНачала"); Колонка.Данные = "ДатаНачала"; Колонка.Заголовок = "С"; 
	Колонка.ЗнакУпорядочивания = 1;
	Колонка.Ширина=6;
	Колонка = _тпАкцСкидки.Колонки.Добавить("ДатаКонца"); Колонка.Данные = "ДатаКонца"; Колонка.Заголовок = "По"; 
	Колонка.ЗнакУпорядочивания = 1;
	Колонка.Ширина=6;
	Колонка = _тпАкцСкидки.Колонки.Добавить("Товар"); Колонка.Данные = "Товар"; Колонка.Заголовок = "Товар"; 
	Колонка.ЗнакУпорядочивания = 1;
	Колонка.Ширина=35;

	Колонка = _тпАкцСкидки.Колонки.Добавить("ПроцентСкидки"); Колонка.Данные = "ПроцентСкидки"; Колонка.Заголовок = "% скидки"; 
	Колонка.ЗнакУпорядочивания = 1;
	Колонка.Ширина=4;
	
	Колонка = _тпАкцСкидки.Колонки.Добавить("ОбъемПродаж"); Колонка.Данные = "ОбъемПродаж"; Колонка.Заголовок = "Объем продаж"; 
	Колонка.ЗнакУпорядочивания = 1;
	Колонка.Ширина=10;
	
КонецПроцедуры

Процедура ЗаполнитьАкцСкидкиТП( Обновить=0 )
	
	Если Обновить=0 Тогда
		Источник = СоздатьОбъект("ПоставщикДанныхODBC.MSSQL"); 
		Источник.БазаДанных =  СоздатьОбъект("ODBCDataBase"); 
	КонецЕсли;
	
	
	ТекстЗапроса="SELECT АкционныеСкидкиКлиентов.ID as [ТекущийЭлемент $Справочник.АкционныеСкидкиКлиентов]
	|					, $АкционныеСкидкиКлиентов.ДатаНачала as ДатаНачала
	|					, $АкционныеСкидкиКлиентов.ДатаКонца as ДатаКонца
	|					, $АкционныеСкидкиКлиентов.Товар as [Товар $Справочник.Номенклатура]
	|					, $АкционныеСкидкиКлиентов.ПроцентСкидки as ПроцентСкидки
	|					, $АкционныеСкидкиКлиентов.ОбъемПродаж as ОбъемПродаж
	|			  FROM $Справочник.АкционныеСкидкиКлиентов AS АкционныеСкидкиКлиентов
	|			  WHERE АкционныеСкидкиКлиентов.PARENTEXT=?Клиент(14,9) AND ISMARK = 0 
	|					AND $АкционныеСкидкиКлиентов.ДатаНачала >= ?ДатаНач(8) AND $АкционныеСкидкиКлиентов.ДатаКонца <= ?ДатаКон(8)
	|";
	Источник.УстТекстЗапроса(ТекстЗапроса);
	Источник.Параметры.Установить("Клиент",ТекущийЭлемент());
	Источник.Параметры.Установить("ДатаНач",ДатаС);
	Источник.Параметры.Установить("ДатаКон",ДатаПо);
	
	Поле = Источник.Поля.Добавить("ТекущийЭлемент");
  	Поле.Автоудаление = 0;
	Поле.ТипБыстрогоПоиска = 1;

	Источник.УстКлючПорядка("ДатаНачала DESC, ДатаКонца DESC, ТекущийЭлемент"); 
	Источник.УстИДПоле("ТекущийЭлемент");
	
	_тпАкцСкидки.ТаймаутОбновления  		= 0;
	_тпАкцСкидки.РазрешитьПеретаскивание	= 0;
	
	
	_тпАкцСкидки.ПоставщикДанных = Источник; 
	_тпАкцСкидки.ПоставщикДанных.Обновить(); 
	_тпАкцСкидки.ОбновитьСтроки();
	
	НастройкаАкцСкидкиТП();
КонецПроцедуры

Процедура тпАкцСкидкиПриВыбореЗаголовка(_ТП,_Колонка) 
	                                       
	ТекПолеСорт = _Колонка.Имя;
	Для Нк = 0 По _ТП.Колонки.Количество()-1 Цикл
		ТекКол = _ТП.Колонки.Получить(Нк);
		ИндКол = ТекКол.Имя;
		Если ТекПолеСорт = ИндКол Тогда
			ПредЗн = ТекКол.ЗнакУпорядочивания;
			//ТекКол.ЦветФонаЗаголовка = глПолучитьЦвет(0,192,255);
			Если (ПредЗн = 0) Или (ПредЗн = 2) Тогда
				ТекКол.ЗнакУпорядочивания = 1;
			Иначе
				ТекКол.ЗнакУпорядочивания = 2;
			КонецЕсли;

		Иначе
			ТекКол.ЦветФонаЗаголовка = -1;
			ТекКол.ЗнакУпорядочивания = 0;
		КонецЕсли;

	КонецЦикла;
	
	Если (ПредЗн = 0) Или (ПредЗн = 2) Тогда
		_ТП.ПоставщикДанных.УстКлючПорядка(СокрЛП(ТекПолеСорт)+" ASC, ТекущийЭлемент");
	Иначе
		_ТП.ПоставщикДанных.УстКлючПорядка(СокрЛП(ТекПолеСорт)+" DESC, ТекущийЭлемент");
	КонецЕсли;
	
КонецПроцедуры


Процедура тпПретензииПоставщикаПриВыбореЗаголовка(_ТП,_Колонка) 
	                                       
	ТекПолеСорт = _Колонка.Имя;
	Для Нк = 0 По _ТП.Колонки.Количество()-1 Цикл
		ТекКол = _ТП.Колонки.Получить(Нк);
		ИндКол = ТекКол.Имя;
		Если ТекПолеСорт = ИндКол Тогда
			ПредЗн = ТекКол.ЗнакУпорядочивания;
			//ТекКол.ЦветФонаЗаголовка = глПолучитьЦвет(0,192,255);
			Если (ПредЗн = 0) Или (ПредЗн = 2) Тогда
				ТекКол.ЗнакУпорядочивания = 1;
			Иначе
				ТекКол.ЗнакУпорядочивания = 2;
			КонецЕсли;

		Иначе
			ТекКол.ЦветФонаЗаголовка = -1;
			ТекКол.ЗнакУпорядочивания = 0;
		КонецЕсли;

	КонецЦикла;
	
	Если (ПредЗн = 0) Или (ПредЗн = 2) Тогда
		_ТП.ПоставщикДанных.УстКлючПорядка(СокрЛП(ТекПолеСорт)+" ASC, ТекущийЭлемент");
	Иначе
		_ТП.ПоставщикДанных.УстКлючПорядка(СокрЛП(ТекПолеСорт)+" DESC, ТекущийЭлемент");
	КонецЕсли;
	
КонецПроцедуры

Процедура тпПретензииПоставщикаПриВыводеСтроки(тп, ОформлениеСтроки, ДанныеСтроки, ТипРегиона) Экспорт
	
	ИмяКол = "ЕстьВДоговоре";
	Если ТипРегиона = 3 Тогда
		Попытка
		    ОбъектЯчейка=ОформлениеСтроки.Ячейки.Получить(ИмяКол);
		    ТекДанные = ДанныеСтроки.Получить(ИмяКол);    
		    ОбъектЯчейка.ОтображатьТекст = 0 ;
		    ОбъектЯчейка.ОтображатьФлажок = 1 ; 
		    ОбъектЯчейка.ЗначениеФлажка = ТекДанные;
			
		Исключение
		КонецПопытки;
	КонецЕсли;	

	//ОбъектЯчейка=ОформлениеСтроки.Ячейки.Получить(идКолонки);
	//ОбъектЯчейка.ЗначениеФлажка=ДанныеСтроки.Получить(идКолонки);
	//ОбъектЯчейка.ОтображатьТекст=1;
	//ОбъектЯчейка.ОтображатьФлажок=1;
КонецПроцедуры

//Процедура тпПретензииПоставщикаПриВыбореФлажка(ТП) Экспорт
//	УстановитьТекущиеДанные();
//	тзСсылка.ЕстьВДоговоре=?(тзСсылка.ЕстьВДоговоре=0, 1, 0);
//	ТП.ОбновитьСтроки();
//КонецПроцедуры

//*******************************************************************************
Процедура  тпПретензииПоставщикаВыбор(_ТП, _Стр, _Кол, _Регион) 
	//Колонки_ПолучитьСвойство(_Кол.Имя); // делаем текущей строкой
//	ОткрытьФормуМодально(_Стр,,0);
//	_тпПретензииПоставщика.ОбновитьСтроки();
	
	
	_Знач=_ТП.ТекущиеДанные.Получить(_Кол.Имя);
	Если _Кол.Имя = "ЕстьВДоговоре" Тогда
//		_ТП.РедактироватьЗначение(_Стр, _Кол, _Регион, _Знач, 16, 2, "ВыбРеквТП", "0x100220");
		ЗапросО=СоздатьОбъект("ODBCRecordSet");
		ТекстЗапросаОбновить="UPDATE Спр
		|					  SET $Спр."+_Кол.Имя+"=:Знач
		|				      FROM $Справочник.КонтрагентыПретензии Спр
		|					  WHERE ID = :Ссылка";
		ЗапросО.УстановитьТекстовыйПараметр("Знач",1-_Знач);
		ЗапросО.УстановитьТекстовыйПараметр("Ссылка",_ТП.ТекущиеДанные.ТекущийЭлемент);
		ЗапросО.ВыполнитьСкалярный(ТекстЗапросаОбновить);
		_тпПретензииПоставщика.ОбновитьСтроки();
	// === иллюстрация прямого доступа к атрибутам контекста и формы === //
//		Форма.ВыбРеквТП.НазначитьТип("Число",1,0);
	//	
		Форма.Обновить();
		
	ИначеЕсли _Кол.Имя = "ДнейДоВыставления" Тогда
		_ТП.РедактироватьЗначение(_Стр, _Кол, _Регион, _Знач, 16, 2, "ВыбРеквТП", "0x100220");
		Форма.ВыбРеквТП.НазначитьТип("Число",2,0);
		Форма.Обновить();

		
	КонецЕсли;
	
КонецПроцедуры

//*******************************************************************************
Процедура тпПретензииПоставщикаПриРедактированииЗначения(_ТП, _НомСтр, _Кол, _Регион, _Знач)
//	Если _Кол.Имя = "ЕстьВДоговоре" Тогда   
		
		ЗапросО=СоздатьОбъект("ODBCRecordSet");
		ТекстЗапросаОбновить="UPDATE Спр
		|					  SET $Спр."+_Кол.Имя+"=:Знач
		|				      FROM $Справочник.КонтрагентыПретензии Спр
		|					  WHERE ID = :Ссылка";
		ЗапросО.УстановитьТекстовыйПараметр("Знач",_Знач);
		ЗапросО.УстановитьТекстовыйПараметр("Ссылка",_ТП.ТекущиеДанные.ТекущийЭлемент);
		ЗапросО.ВыполнитьСкалярный(ТекстЗапросаОбновить);
//	КонецЕсли;
	_тпПретензииПоставщика.ОбновитьСтроки();
	
КонецПроцедуры




Процедура тпАкцСкидкиВыбор(_ТП, _Кол, ТипРегиона)
	ОткрытьФормуМодально(_Кол,,0);
КонецПроцедуры

Процедура ЗаполнитьСписокКонтактныхЛиц() Далее

Процедура кнКодыКлиентов()
	ОткрытьФорму("Справочник.КодКлиентаECOD");
КонецПроцедуры

Процедура семПриВыбореСтраны()
	//Если Страна.Выбран() = 0 Тогда Возврат;	КонецЕсли;
	//Если Страна.ЕС = 1 Тогда ВидНДС = Перечисление.ЗначенияНДС.безНДС; КонецЕсли;
КонецПроцедуры

Процедура семДоступностьАдреса()
	флаг = ?(ВидКлиента = Перечисление.ВидыКлиентов.Покупатель,0,1);
	Форма.ГородДоставки.Доступность(флаг);
	Форма.ПочтовыйАдрес.Доступность(флаг);     
//	Форма.лПериодичностьСчетов.Видимость(флаг);
//	Форма.ПериодичностьКомпенсации.Видимость(флаг);
КонецПроцедуры

Функция ФорматВывода( парам )
	Если парам = "ДниОбсл" Тогда
		Если АдресДоставки.Выбран() = 0 Тогда Возврат "???"; КонецЕсли;
		Возврат АдресДоставки.Маршрут.ДниОбслуживания;
	КонецЕсли;
КонецФункции

Функция семПолучитьИзАдресаДоставки( парам )
	Если АдресДоставки.Выбран() = 0 Тогда Возврат ""; КонецЕсли;
	Если парам = "Район" Тогда
		Возврат АдресДоставки.Родитель.Наименование;
	ИначеЕсли парам = "Регион" Тогда
		Возврат АдресДоставки.Родитель.Родитель.Наименование;
	ИначеЕсли парам = "Страна" Тогда
		Возврат АдресДоставки.Родитель.Родитель.Родитель.Наименование;
	ИначеЕсли парам = "Маршрут" Тогда
		Возврат АдресДоставки.Маршрут.Наименование;
	ИначеЕсли парам = "МаршрутДниОбслуживания" Тогда
		Возврат АдресДоставки.Маршрут.ДниОбслуживания;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Процедура семПриВыбореАдресаДоставки()
	Если АдресДоставки.Выбран() = 0 Тогда Возврат; КонецЕсли;
	АдресДоставкиРасст = АдресДоставки.Расстояние;
	ГородДоставки = ?( СокрЛП( АдресДоставки.Вид ) = "IEL", АдресДоставки.Родитель.Родитель.Наименование, АдресДоставки.Родитель.Наименование );
	ПочтовыйАдрес = Шаблон( "[АдресДоставки.Наименование] [АдресДоставкиДоп]" );
КонецПроцедуры


Процедура семПриВыбореАдресаДоставкиКлиента()
	Если АдресДоставкиКлиента.Выбран() = 0 Тогда Возврат; КонецЕсли;
//	АдресДоставкиРасст = АдресДоставкиКлиента.АдресДоставки.Расстояние;
	ГородДоставки = ?( СокрЛП( АдресДоставкиКлиента.Вид ) = "IEL", АдресДоставкиКлиента.Родитель.Родитель.Наименование, АдресДоставкиКлиента.Родитель.Наименование );
	ПочтовыйАдрес = Шаблон( "[?(СокрЛП(ГородДоставки)=СокрЛП(АдресДоставкиКлиента.Наименование),"""",АдресДоставкиКлиента.Наименование)] [АдресДоставкиДоп]" );
КонецПроцедуры

//*******************************************
Процедура Доступ()

	Если (ВидКонтрагента=перечисление.ВидыКонтрагентов.ЧастноеЛицо) ИЛИ (ПустоеЗначение(КлГруппа)=0) Тогда
		Форма.ИНН.Доступность(0);
	Иначе
		Форма.ИНН.Доступность(1);
	КонецЕсли;
	
	Форма.ЗапретВыпискиНакл.Доступность(Пользователь.ТекущийЭлемент().РазрРедЗапретаНаклКлиент.Получить(РабочаяДата()));
	Форма.КлГруппа.Доступность(Пользователь.ТекущийЭлемент().РазрРедГрупКлиента);
	Форма.СуммаКредита.Доступность(Пользователь.ТекущийЭлемент().РазрРедКредитКлиента);
	Форма.Глубина.Доступность(Пользователь.ТекущийЭлемент().РазрРедКредитКлиента);
	//Форма.РазрПроведениеНакл.Доступность(Пользователь.ТекущийЭлемент().РазрРедКредитКлиента);
	Форма.НеКонтролироватьКредит.Доступность(Пользователь.ТекущийЭлемент().РазрРедКонтрольКредита);
	Форма.НеПлательщик.Доступность(Пользователь.ТекущийЭлемент().РазрРедКредитКлиента);
	Форма.КатегорияКредита.Доступность(Пользователь.ТекущийЭлемент().РазрРедКредитКлиента);
	Форма.КомментарийДляКредита.Доступность(Пользователь.ТекущийЭлемент().РазрРедКредитКомментарий);
	
	Если (Пользователь.ТекущийЭлемент().РазрРедКредитДатаОплатыДолга=1) ИЛИ (семЕстьПраво("Справочник","Контрагенты","Редактирование даты оплаты долга")=1) ИЛИ 
			(Агент=Пользователь.АгентФильтр) ИЛИ (Агент.ПринадлежитГруппе(Пользователь.АгентФильтр)=1) 
			ИЛИ (НазваниеНабораПрав()="Администратор") Тогда
		ЕстьДоступАгенту=1;
	Иначе
		ЕстьДоступАгенту=0;
	КонецЕсли;               
	
	Если семЕстьПраво("Справочник","Контрагенты","Перенос в архив")=1 Тогда
		Форма.кнАрхивировать.Доступность(1);
	Иначе
		Форма.кнАрхивировать.Доступность(0);
		
	КонецЕсли;

	
	Форма.ДатаОплатыДолга.Доступность(ЕстьДоступАгенту);
	Форма.КомментарийДляКредитаАгенту.Доступность(ЕстьДоступАгенту);
	
	Если (семЕстьПраво("Справочник","Контрагенты","Только поставщики")=1) И (семЕстьПраво("Справочник","Контрагенты","Все контрагенты")=0) Тогда
		//запрещаем все лишнее 
		ФормаРасш = СоздатьОбъект("РасширениеФормы"); 
		ФормаРасш.УстановитьФорму(Форма);
		Для Х = 0 По ФормаРасш.КоличествоАтрибутов() - 1 Цикл
		  	ФормаРасш.ПолучитьАтрибут(Х).Доступность = 0;
		КонецЦикла;
		
		Форма.Наименование.Доступность(1);
		Форма.АдресДоставкиКлиента.Доступность(1);
		Форма.АдресДоставки.Доступность(1);
		Форма.ДатаОплатыДолга.Доступность(1);
		Форма.КомментарийДляКредитаАгенту.Доступность(1);
		//Форма.СуммаКредитаПоставщика.Доступность(1);
		//Форма.ГлубинаКредитаПоставщика.Доступность(1);
		
		р = ФормаРасш.НайтиАтрибут(5,"Поставщик");
		Пока р = 1 Цикл
			ФормаРасш.ТекущийАтрибут().Доступность = 1;
	        р = ФормаРасш.ПолучитьСледующийАтрибут();
		КонецЦикла;

		р = ФормаРасш.НайтиАтрибут(5,"КонтЛицо");
		Пока р = 1 Цикл
			ФормаРасш.ТекущийАтрибут().Доступность = 1;
	        р = ФормаРасш.ПолучитьСледующийАтрибут();
		КонецЦикла;
		
		р = ФормаРасш.НайтиАтрибут(5,"АкционныеСкидки");
		Пока р = 1 Цикл
			ФормаРасш.ТекущийАтрибут().Доступность = 1;
	        р = ФормаРасш.ПолучитьСледующийАтрибут();
		КонецЦикла;

		р = ФормаРасш.НайтиАтрибут(5,"Скидки");
		Пока р = 1 Цикл
			ФормаРасш.ТекущийАтрибут().Доступность = 1;
	        р = ФормаРасш.ПолучитьСледующийАтрибут();
		КонецЦикла;

		р = ФормаРасш.НайтиАтрибут(5,"Кнопки");
		Пока р = 1 Цикл
			ФормаРасш.ТекущийАтрибут().Доступность = 1;
	        р = ФормаРасш.ПолучитьСледующийАтрибут();
		КонецЦикла;
	
	
	КонецЕсли;
	ТекЗакладка = Форма.Закладки.ПолучитьЗначение(Форма.Закладки.ТекущаяСтрока());
	
	Если (ТекЗакладка="КонтЛицо") Тогда
		Если (ВидКлиента = Перечисление.ВидыКлиентов.Поставщик)  Тогда
			Форма.лАсссистент.Видимость(1);
			Форма.ЗакупщикАссистент.Видимость(1);
		Иначе
			Форма.лАсссистент.Видимость(0);
			Форма.ЗакупщикАссистент.Видимость(0);
		КонецЕсли;
	ИначеЕсли (ТекЗакладка="Поставщик") Тогда
	
		ЕстьСертификат = ОткрытьСертификатБИО(,"Проверка");
		Форма.СертификатБИОСрокГодности.Доступность(ЕстьСертификат);
		
		ЕстьПраваОбновлять = семЕстьПраво("Справочник","Контрагенты","Обновление товаров");
		
		Форма.кновитьКарточкиТоваровКомпенсация.Доступность(ЕстьПраваОбновлять);
		
	КонецЕсли;
                       
	
	

	//Форма.Специализация.Доступность(ЕстьДоступАгенту);
	                     
КонецПроцедуры   


Процедура ПриИзмененииВидаКонтрагента()
	Если Выбран()=1 Тогда
		Если ВидКонтрагента=Перечисление.ВидыКонтрагентов.ЧастноеЛицо Тогда  
			Если Форма.Закладки.РазмерСписка()=2 Тогда  
				Форма.Закладки.УдалитьЗначение( 2 );
				Форма.Закладки.ДобавитьЗначение("РасчетныеСчета","Расчетные счета");
				Форма.Закладки.ДобавитьЗначение("Кредиты","Кредиты");
				Форма.Закладки.ДобавитьЗначение( "Документ", "Паспортные данные" );
			ИначеЕсли Форма.Закладки.РазмерСписка()=3 Тогда
				Форма.Закладки.ДобавитьЗначение( "Документ", "Паспортные данные" );
			КонецЕсли;
			Форма.ИспользоватьСлой("Общие, Имена, Кнопки, ЧастноеЛицо",2); 
			Форма.ТекстСотр.Видимость(0);
			Форма.Сотрудник.Видимость(0);
//			Форма.Юри.Видимость(1);
		ИначеЕсли ВидКонтрагента=Перечисление.ВидыКонтрагентов.Организация Тогда
			Если Форма.Закладки.РазмерСписка()=4 Тогда
				Форма.Закладки.УдалитьЗначение( 4 );
			ИначеЕсли Форма.Закладки.РазмерСписка()=2 Тогда
				Форма.Закладки.УдалитьЗначение( 2 );
				Форма.Закладки.ДобавитьЗначение("РасчетныеСчета","Расчетные счета");
				Форма.Закладки.ДобавитьЗначение("Кредиты","Кредиты");
			КонецЕсли;
			Форма.ИспользоватьСлой("Общие, Имена, Кнопки, Организация ",2);   
			Форма.ТекстСотр.Видимость(0);
			Форма.Сотрудник.Видимость(0);
//			Форма.КомРегистр.Видимость(1);
		ИначеЕсли ВидКонтрагента=Перечисление.ВидыКонтрагентов.Сотрудник Тогда  
			Если Форма.Закладки.РазмерСписка()=4 Тогда
				Форма.Закладки.УдалитьЗначение( 2 ); 
				Форма.Закладки.УдалитьЗначение( 2 );
			ИначеЕсли Форма.Закладки.РазмерСписка()=3 Тогда	                                 
				Форма.Закладки.УдалитьЗначение( 2 );
				Форма.Закладки.УдалитьЗначение( 2 );
				Форма.Закладки.ДобавитьЗначение( "Документ", "Паспортные данные" );
			КонецЕсли;  
			Форма.ИспользоватьСлой("Общие, Имена, Кнопки, ЧастноеЛицо",2);
			Форма.ТекстСотр.Видимость(1);
			Форма.Сотрудник.Видимость(1);
//			Форма.КомРегистр.Видимость(0);
		КонецЕсли;
	Иначе
		Если ВидКонтрагента=Перечисление.ВидыКонтрагентов.ЧастноеЛицо Тогда
			Форма.ИспользоватьСлой("Общие, Имена, Кнопки, ЧастноеЛицо",2);  
			Форма.ТекстСотр.Видимость(0);
			Форма.Сотрудник.Видимость(0);
//			Форма.КомРегистр.Видимость(1);
		ИначеЕсли ВидКонтрагента=Перечисление.ВидыКонтрагентов.Организация Тогда
			Форма.ИспользоватьСлой("Общие, Имена, Кнопки, Организация ",2); 
			Форма.ТекстСотр.Видимость(0);
			Форма.Сотрудник.Видимость(0);  
//			Форма.КомРегистр.Видимость(1);
		ИначеЕсли ВидКонтрагента=Перечисление.ВидыКонтрагентов.Сотрудник Тогда
			Форма.ИспользоватьСлой("Общие, Имена, Кнопки, ЧастноеЛицо",2);  
			Форма.ТекстСотр.Видимость(1);
			Форма.Сотрудник.Видимость(1);	
//			Форма.КомРегистр.Видимость(0);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//_____________________________________________________________________________
Процедура Изменить()
	Перем ФормаЗаписи;  
	Эл=СписокСчетов.ПолучитьЗначение(СписокСчетов.ТекущаяСтрока());
	глФлагРасшифровки=1;
	глРасшифровка=ВзятьКонтекст(Контекст);
	ОткрытьФорму(Эл,ФормаЗаписи);
	глФлагРасшифровки=0;
	глРасшифровка=0;
КонецПроцедуры
//----------------------------------------------------------------------------
Процедура УдалитьРС()
	Если Вопрос("Вы действительно хотите удалить счет"+РазделительСтрок+"(счет будет помечен на удаление)?",1)=2 Тогда
		Возврат;
	КонецЕсли;
	Поз=СписокСчетов.ТекущаяСтрока();
	Эл=СписокСчетов.ПолучитьЗначение(Поз);
	Спр=СоздатьОбъект("Справочник.РасчетныеСчета");
	Спр.ИспользоватьВладельца(ТекущийЭлемент());
	Если Спр.НайтиЭлемент(Эл)=1 Тогда
		//Закомментировано Инсталлятором МОД:Спр.Удалить(0);
	//Начало текста, вставленного Инсталлятором МОД
	ОбъектУдалить(Спр, 0);
	//Конец текста, вставленного Инсталлятором МОД

		СписокСчетов.УдалитьЗначение(Поз);
		СписокСчетов.ТекущаяСтрока(?(Поз>1,Поз-1,1));
		Если СписокСчетов.РазмерСписка()=0 Тогда
			Форма.КнИзменить.Доступность(0);
			Форма.КнУдалить.Доступность(0);
		КонецЕсли;
		Форма.Обновить();
	КонецЕсли;
КонецПроцедуры
//----------------------------------------------------------------------------
Процедура ПриВыбореЗакладки(Ном,Значен)
	Форма.ВидКонтрагента.Доступность( 0 );
	Форма.Наименование.Доступность( 0 );
	Если Значен="Общие" Тогда
		Если ВидКонтрагента=Перечисление.ВидыКонтрагентов.Организация Тогда
			Форма.ИспользоватьСлой("Общие, Имена, Кнопки, Организация",2);  
			Форма.ТекстСотр.Видимость(0);
			Форма.Сотрудник.Видимость(0);  
//			Форма.КомРегистр.Видимость(1);
		Иначе
			Форма.ИспользоватьСлой("Общие, Имена, Кнопки, ЧастноеЛицо",2);
			Форма.ТекстСотр.Видимость(0);
			Форма.Сотрудник.Видимость(0);  
//			Форма.КомРегистр.Видимость(1);
		КонецЕсли;
		Форма.ВидКонтрагента.Доступность( 1 );
		Форма.Наименование.Доступность( 1 ); 
		Если ВидКонтрагента=Перечисление.ВидыКонтрагентов.Сотрудник Тогда   
			Форма.ИспользоватьСлой("Общие, Имена, Кнопки, ЧастноеЛицо",2);
			Форма.ТекстСотр.Видимость(1);
			Форма.Сотрудник.Видимость(1);         
//			Форма.КомРегистр.Видимость(0);
		КонецЕсли;	
	ИначеЕсли Значен="РасчетныеСчета" Тогда
		//Если Выбран()=0 Тогда
		//	Предупреждение( "Выполните запись сведений о контрагенте:"+РазделительСтрок+
		//	"перейдите к закладке ""Общие"""+РазделительСтрок+
		//	"и нажмите кнопку ""Записать""", 5 );
		//	СтатусВозврата(0);
		//	Возврат;
		//КонецЕсли;
		//СписокСчетов.УдалитьВсе();
		//Спр=СоздатьОбъект("Справочник.РасчетныеСчета");
		//Спр.ИспользоватьВладельца(ТекущийЭлемент());
		//Спр.ПорядокКодов();
		//Спр.ВыбратьЭлементы();
		//Пока Спр.ПолучитьЭлемент()=1  Цикл
		//	Если Спр.ПометкаУдаления()=1 Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	СписокСчетов.ДобавитьЗначение( Спр.ТекущийЭлемент(), "Р/счет №"+СокрЛП(Спр.Номер)+" в "+СокрЛП(Спр.Банк) );
		//КонецЦикла;
		//Если СписокСчетов.РазмерСписка()=0 Тогда
		//	Форма.КнИзменить.Доступность(0);
		//	Форма.КнУдалить.Доступность(0);
		//Иначе
		//	СписокСчетов.ТекущаяСтрока(1);
		//КонецЕсли; 
		Форма.ИспользоватьСлой("РасчСчета, Имена, Кнопки ",2);
		Форма.СписокСчетов.Видимость(0); 
		Форма.кнДобавить.Видимость(0);
		Форма.КнИзменить.Видимость(0);
		Форма.КнУдалить.Видимость(0);
	ИначеЕсли Значен="Кредиты" Тогда
		Форма.ИспользоватьСлой("Кредиты, Имена, Кнопки ",2);
	ИначеЕсли Значен="Поставщик" Тогда
		Форма.ИспользоватьСлой("Поставщик, Имена, Кнопки", 2 );   
		
	ИначеЕсли Значен="Документ" Тогда
		Форма.ИспользоватьСлой("Документ, Имена, Кнопки", 2 );   
	ИначеЕсли Значен="Дополнительный" Тогда
		Форма.ИспользоватьСлой("Дополнительный, Имена, Кнопки", 2 );
	ИначеЕсли Значен="КонтЛицо" Тогда
		Форма.ИспользоватьСлой("КонтЛицо, Имена, Кнопки", 2 );
	ИначеЕсли Значен="АкционныеСкидки" Тогда
		Форма.ИспользоватьСлой("АкционныеСкидки, Имена, Кнопки", 2 );
	ИначеЕсли Значен="Скидки" Тогда
		Форма.ИспользоватьСлой("Скидки, Имена, Кнопки", 2 );          
	
	КонецЕсли; 
	
	Доступ();
	
КонецПроцедуры 
//----------------------------------------------------------------------------
Процедура ВводНового(ПризнКопирования);
	
	ДатаСоздания = РабочаяДата();
	Если ПризнКопирования=1 Тогда
		Если ПустоеЗначение(ВидКлиента)=1 Тогда
			ВидКлиента= Перечисление.ВидыКлиентов.Покупатель;
		КонецЕсли;
	    Возврат;
	КонецЕсли;       
	
	Идентификатор="";
	Страна="";
	ДатаКлиента=РабочаяДата();
	Наименование="Новый";
	ВидКонтрагента=Перечисление.ВидыКонтрагентов.Организация;
	ИспользоватьДату(РабочаяДата());
	СуммаКредита=0;
	Глубина=0;
	ВалютаВзаиморасчетов=Константа.ВалютаВзаиморасчетов;
	ВалютаКредита=Константа.ОсновнаяВалюта;
	ВалютаКредитаПоставщика=Константа.ОсновнаяВалюта;
	КатегорияКредита = Константа.ОснКатегорияКредита.Получить(РабочаяДата());
	//ВидНДС=Перечисление.ЗначенияНДС.ОсновнаяСтавкаНДС;
	ЗапретВыпискиНакл=0;
	ПризнакИмпорта=Перечисление.Булево.Нет;
	Descr="New";    
	
	Страна=Константа.СтранаРезидент;
	
	КатегорияЦены=Константа.ОсновнаяКатегорияЦены;
	Важность=Перечисление.КатегорииВажности.КатA;
	ВидКлиента= Перечисление.ВидыКлиентов.Покупатель;
	Форма.ИспользоватьСлой("Общие, Имена, Кнопки", 2);
	Форма.ТекстСотр.Видимость(0);
	Форма.Сотрудник.Видимость(0);
//	Форма.КомРегистр.Видимость(1);
	
	// сем \\
	ФлИзменен = 1;
	ВидОтсрочкиКредита = Перечисление.ВидыОтсрочкиКредита.Дни;
	ВидОтсрочкиКредитаПоставщика = Перечисление.ВидыОтсрочкиКредита.Дни;

	КатегорияКредита = Константа.ОснКатегорияКредита.Получить(РабочаяДата());
	// сем //
КонецПроцедуры 
//----------------------------------------------------------------------------
Процедура ПриОткрытии()
	Если НазваниеНабораПрав() = "Литва_Просмотр" Тогда
		Предупреждение( "Недостаточно прав доступа!" );
		СтатусВозврата( 0 ); Возврат;
	КонецЕсли;
	СохранениеПериодическихРеквизитов(2, "*");
	
	Форма.КнопкаПоУмолчанию("ОК");	
	Форма.Закладки.ДобавитьЗначение("Общие","Общие");
	Форма.Закладки.ДобавитьЗначение("Дополнительный","Дополнительно");
	Форма.Закладки.ДобавитьЗначение("КонтЛицо","Конт. лицо");
	Форма.Закладки.ДобавитьЗначение("РасчетныеСчета","Расчетные счета");
	

	Если Выбран()=1 Тогда
		Если ВидКонтрагента=Перечисление.ВидыКонтрагентов.Сотрудник Тогда   
			Форма.Закладки.ДобавитьЗначение("Документ","Паспортные данные");
		Иначе
			Форма.Закладки.ДобавитьЗначение("Кредиты","Кредиты");
			Если ВидКонтрагента=Перечисление.ВидыКонтрагентов.ЧастноеЛицо Тогда
				Форма.Закладки.ДобавитьЗначение("Документ","Паспортные данные");
			КонецЕсли; 
		КонецЕсли;


		Если ВидКлиента=Перечисление.ВидыКлиентов.Поставщик Тогда
			Форма.Закладки.ДобавитьЗначение("Поставщик","Поставщик");
			Форма.Закладки.ДобавитьЗначение("Скидки","Скидки от Поставщика");
		КонецЕсли;
		
		Форма.Закладки.ДобавитьЗначение("АкционныеСкидки","Акционные скидки");
	
//		Форма.Закладки.ДобавитьЗначение("КонтЛица","Список конт. лиц");
	
		ЗаполнитьСписокКонтактныхЛиц();
	Иначе
		Если ВидКлиента=Перечисление.ВидыКлиентов.Поставщик Тогда
			Форма.Закладки.ДобавитьЗначение("Поставщик","Поставщик");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидКонтрагента=Перечисление.ВидыКонтрагентов.Организация Тогда
		Форма.ИспользоватьСлой("Общие, Имена, Кнопки, Организация",2);
		Форма.ТекстСотр.Видимость(0);
		Форма.Сотрудник.Видимость(0);
//		Форма.КомРегистр.Видимость(1);
	ИначеЕсли ВидКонтрагента=Перечисление.ВидыКонтрагентов.ЧастноеЛицо Тогда
		Форма.ИспользоватьСлой("Общие, Имена, Кнопки, ЧастноеЛицо ",2); 
		Форма.ТекстСотр.Видимость(0);
		Форма.Сотрудник.Видимость(0);                    
//		Форма.КомРегистр.Видимость(1);
	ИначеЕсли ВидКонтрагента=Перечисление.ВидыКонтрагентов.Сотрудник Тогда
		Форма.ИспользоватьСлой("Общие, Имена, Кнопки, ЧастноеЛицо ",2); 
		Форма.ТекстСотр.Видимость(1);
		Форма.Сотрудник.Видимость(1);
//		Форма.КомРегистр.Видимость(0);
	КонецЕсли;  
	
	Доступ();
	семДоступностьАдреса();
КонецПроцедуры


Процедура ПослеОткрытия()
	
	Ф=СоздатьОбъект("Форма");
	Ф.УстановитьФорму(Форма);
	_тпАкцСкидки=Ф.СоздатьЭлементУправления("ТабличноеПоле","тпАкцСкидки");
	ЗаполнитьАкцСкидкиТП();
	
	//создаем табличное поле для Скидок поставщику.
	Ф1=СоздатьОбъект("Форма");
	Ф1.УстановитьФорму(Форма);
	_тпСкидкиПоставщика=Ф1.СоздатьЭлементУправления("ТабличноеПоле","тпСкидкиПоставщика");
	ЗаполнитьСкидкиПоставщикаТП();

	//создаем табличное поле для Претензий поставщику.
	Ф2=СоздатьОбъект("Форма");
	Ф2.УстановитьФорму(Форма);
	_тпПретензииПоставщика=Ф2.СоздатьЭлементУправления("ТабличноеПоле","тпПретензииПоставщика");
	ЗаполнитьПретензииПоставщикаТП();


	
КонецПроцедуры
//----------------------------------------------------------------------------
Процедура ПриЗакрытии()
	//Если Выбран()=1 Тогда
	//	Спр=СоздатьОбъект("Справочник.РасчетныеСчета");
	//	Спр.ИспользоватьВладельца(ТекущийЭлемент());
	//	Спр.ВыбратьЭлементы();
	//	ЕстьСчет=0;
	//	Пока Спр.ПолучитьЭлемент()=1  Цикл
	//		Если Спр.ПометкаУдаления()=1 Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		ЕстьСчет=1;
	//		Прервать;
	//	КонецЦикла;
	//	Если (ЕстьСчет=0) И (ВидКонтрагента<>Перечисление.ВидыКонтрагентов.Сотрудник) Тогда
	//		Предупреждение("Введите хотя бы один расчетный счет контрагента!");
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры                 

//***************************************************************
//
//_____________________________________________________________________________
Процедура ВвестиАдрес()
	ОткрытьФормуМодально("Обработка.ВводАдреса",Контекст);
КонецПроцедуры //ВвестиАдрес
//----------------------------------------------------------------------------
//Начало текста, вставленного Инсталлятором МОД

//======================================================================
Процедура ЗаписатьРасчетныеСчета()
	
	Если Выбран()=0 Тогда
		Возврат;
	КонецЕсли;
	СпрРС=СоздатьОбъект("Справочник.РасчетныеСчета");
	СпрРС.ИспользоватьВладельца(ТекущийЭлемент());
	СпрРС.ВыбратьЭлементы();
	СчетНайден=0;
	Пока СпрРС.ПолучитьЭлемент() = 1 Цикл

		Если (СокрЛП(СпрРС.Номер)<>СокрЛП(Р_Счет1)) И (СокрЛП(СпрРС.Номер)<>СокрЛП(Р_Счет2)) Тогда
			ОбъектУдалить(СпрРС,1);
		Иначе
			СчетНайден=1;
			Если СпрРС.ПометкаУдаления()=1 Тогда
				СпрРС.СнятьПометкуУдаления();
			КонецЕсли;
			
			Если СпрРС.Банк<>Банк Тогда
				СпрРС.Банк = Банк;
				СпрРС.БИКБанка = Банк.Код_Банка;
				СпрРС.ДляВыгрузки = ДляВыгрузки;
				ОбъектЗаписать(СпрРС,);
			КонецЕсли;
		КонецЕсли;		
		
	КонецЦикла;
	
	Если (ПустоеЗначение(Р_Счет1)=0) И (СчетНайден=0) Тогда
		СпрРС.Новый();
		СпрРС.Номер = СокрЛП(Р_Счет1);
		СпрРС.Наименование = СпрРС.Номер;
		СпрРС.Банк = Банк;
		СпрРС.БИКБанка = Банк.Код_Банка;
		СпрРС.ДляВыгрузки = ДляВыгрузки;
		ОбъектЗаписать(СпрРС,);
	КонецЕсли;

	Если (ПустоеЗначение(Р_Счет2)=0) И (СчетНайден=0) Тогда
		СпрРС.Новый();
		СпрРС.Номер = СокрЛП(Р_Счет2);
		СпрРС.Наименование = СпрРС.Номер;
		СпрРС.Банк = Банк;
		СпрРС.БИКБанка = Банк.Код_Банка;
		СпрРС.ДляВыгрузки = ДляВыгрузки;
		ОбъектЗаписать(СпрРС,);
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьРасчетныеСчета

Процедура ПриЗаписи() Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ПриЗаписи()
//Закомментировано Инсталлятором МОД:Процедура ПриЗаписи()        
	//***********************************************************
	//<<Алгоритм Успеха>> (begin)
	// из фиш
	
	Рег_налог=СокрЛП(ИНН);
           
	Если ПустоеЗначение(Страна)=1 Тогда
		Предупреждение("Не указана Страна!");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	                    
	Если ПустоеЗначение(ВидКлиента)=1 Тогда
		Предупреждение("Не задан вид клиента!");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	Наименование = СтрЗаменить(Наименование,"""","");
	Наименование = глЗаменитьНелегальныеСимволы(Наименование);

	Если ВидКонтрагента=Перечисление.ВидыКонтрагентов.Организация Тогда
		
		Если ПустоеЗначение(ЮридическийАдрес)=1 Тогда
			Предупреждение("Не указан Юридический адрес!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;

		Если ВидКлиента=Перечисление.ВидыКлиентов.Покупатель Тогда
			Если ПустоеЗначение(КатегорияКредита)=1 Тогда
				Предупреждение("Не задана категория кредита!");
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;
			
			Если ПустоеЗначение(Специализация)=1 Тогда
				Предупреждение("Не выбрана специализация клиента!");
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;

		
		Если ((ПустоеЗначение(Банк)=0) И (СтрДлина(СокрЛП(Р_Счет1))>=5)) Тогда
		Иначе
			Предупреждение("Не указаны банковские реквизиты!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//Проверка на дублирование Кода клиента в базе
	спр=СоздатьОбъект("Справочник.Контрагенты");
	спр.ПорядокКодов();
	спр.ВыбратьЭлементы();
	Если спр.НайтиПоКоду(Код,0)=1 Тогда
		Если спр.ТекущийЭлемент()<>ТекущийЭлемент() Тогда
			Предупреждение("Код не уникальный!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;             
	
	//Проверка на изменение наименования
	Если Выбран()=1 Тогда
		Если (ТекущийЭлемент().Наименование<>Наименование) Тогда
			стар_Наим = ТекущийЭлемент().Наименование;
			нов_Наим = Наименование;
			Наименование = стар_Наим;
			Записать();
			Наименование = нов_Наим;
		КонецЕсли;             
	КонецЕсли;
	
	Если ПустоеЗначение(Карта)=0 Тогда
	    Если Спр.НайтиПоРеквизиту("Карта",Карта,1)=1 Тогда
			Если Спр.ТекущийЭлемент()<>ТекущийЭлемент() Тогда
				Предупреждение("Клиент с такой картой скидок уже введен!");
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;
	    КонецЕсли;
	КонецЕсли;

	Если ПустоеЗначение(ДопКод)=0 Тогда
	    Если Спр.НайтиПоРеквизиту("ДопКод",ДопКод,1)=1 Тогда
			Если Спр.ТекущийЭлемент()<>ТекущийЭлемент() Тогда
				Предупреждение("Клиент с таким доп. кодом уже введен - <"+спр.ТекущийЭлемент()+">");
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;
	    КонецЕсли;
	КонецЕсли;
	
	
	
	//Проверка на Правильность Рег. НДС кода клиента
	Если (Страна<>Константа.СтранаРезидент) ИЛИ (ВидКонтрагента=перечисление.ВидыКонтрагентов.ЧастноеЛицо) Тогда
		Если (ПустоеЗначение(Рег_налог)=1) ИЛИ (Найти(СокрЛП(Рег_налог),Константа.СтранаРезидент.Код)=1) Тогда
			ИНН=Константа.ОсновнаяФирма.Код+СокрЛП(Код); //Если Не резидент, тогда присваиваем ему код клиента
		КонецЕсли;
	Иначе
		// сем \\
		// в литовской базе рег. код содержит "LT", а в латвийской уже нет
		Если (Лев( Рег_налог, 2 ) <> "LT") И (Лев( Рег_налог, 2 ) <> "EE") Тогда
			Если ВидКонтрагента = Перечисление.ВидыКонтрагентов.Организация Тогда
				Если СтрДлина( СокрЛП( Рег_налог ) ) <> 11 Тогда
					Предупреждение( "Не правильный Код PVN клиента!" ); СтатусВозврата( 0 ); Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// сем //
	КонецЕсли;
	
	Если (ПустоеЗначение(КлГруппа)=1) Тогда
		//Проверка на дублирование Рег. номер и в случае обнаружения такогового Устанавливает принадлежность групповому
		Если ПустаяСтрока(Рег_налог)=0 Тогда
			спр=СоздатьОбъект("Справочник.Контрагенты");
			спр.ВыбратьЭлементыПоРеквизиту("ИНН",Рег_налог,0,0);
			Пока спр.ПолучитьЭлемент()=1 Цикл

				Если Спр.ТекущийЭлемент()=ТекущийЭлемент() Тогда
				    Продолжить; //Проверка на Сомого себя
				КонецЕсли;
				                
				Если Спр.КатегорияКредита.Получить(РабочаяДата())<>КатегорияКредита Тогда
					Спр.КатегорияКредита.Установить(РабочаяДата(),КатегорияКредита);
					Спр.КатегорияКредитаТек=КатегорияКредита;
					ОбъектЗаписать(Спр,);
				КонецЕсли;
				
				Если (ПустоеЗначение(спр.КлГруппа)=1) и (спр.ДляВыгрузки=1) Тогда
					Если Вопрос("Уже есть клиент с таким Кодом PVN - ("+спр.Код+" "+СокрЛП(спр.ПоАлфавиту)+")! Установить найденного клиента как группового?","Да+Нет")<>"Да" Тогда
						СтатусВозврата(0);
						Возврат;
					Иначе                 
						КлГруппа=спр.ТекущийЭлемент();
						Если (ТекущийЭлемент()=КлГруппа) и (ПустоеЗначение(КлГруппа)=0) Тогда
							Сообщить("Нельзя устанавливать группового клиента Самого себя!");
							КлГруппа=0;
						ИначеЕсли ПустоеЗначение(КлГруппа.КлГруппа)=1 Тогда
							Рег_налог=КлГруппа.ИНН;
						Иначе
							Предупреждение("Вы можете выбрать только Главного клиента!");
							КлГруппа=0;
						КонецЕсли;
						СтатусВозврата(0);
						Возврат;
					КонецЕсли;
				КонецЕсли;			    
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	
	              
	Если (ТекущийЭлемент()=КлГруппа) и (ПустоеЗначение(КлГруппа)=0) Тогда
		Сообщить("Нельзя устанавливать группового клиента Самого себя!");
		КлГруппа=0;
	ИначеЕсли (КлГруппа.Выбран()=1) Тогда
		Если КлГруппа.ДляВыгрузки=0 Тогда //Проверяем если привязали Группового клиента
			спр=СоздатьОбъект("Справочник.Контрагенты");
			спр.НайтиЭлемент(КлГруппа);
			Если Спр.Выбран()=1 Тогда
				спр.ДляВыгрузки=1; //Помечаем для выгрузки Группового клиента
				спр.Записать();
			КонецЕсли;
		КонецЕсли;
		
		ЮридическийАдрес = КлГруппа.ЮридическийАдрес;
		ДляВыгрузки=0;  //Если не групповой магазин и Установлена Группа тогда не выгружаем
		Если ПустоеЗначение(КлГруппа.ФорматОбмена)=0 Тогда
			Если Выбран()=0 Тогда
				Сообщить("Клиент участвует в обмене в формате "+КлГруппа.ФорматОбмена+"! Обязательно введите ECOD!");
			Иначе
				Екоды=СоздатьОбъект("Справочник.КодКлиентаECOD");
				Есть=0;
				Екоды.ИспользоватьВладельца(ТекущийЭлемент());
				Екоды.ВыбратьЭлементы();
				Пока Екоды.ПолучитьЭлемент() = 1 Цикл
					Если Екоды.ПометкаУдаления()=1 Тогда
						Продолжить;
					КонецЕсли;
					Есть=1;
					Прервать;
				КонецЦикла;
				Если (ВидКлиента = Перечисление.ВидыКлиентов.Покупатель) И (КлГруппа.ФорматОбмена=Перечисление.ФорматыОбмена.EDISOFT) Тогда
					Если Есть=0 Тогда
						Предупреждение("Отсутствуют ECODы для обмена в формате "+КлГруппа.ФорматОбмена+"! Запись невозможна!");
						СтатусВозврата(0);
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
    
	
	Если (КлГруппа.Выбран()=0) Тогда
		ДляВыгрузки=1;
		
		Если Выбран()=1 Тогда
			
			//обновим юридические адреса для всех клиентов, у которых данный элемент указан главным 
			ТекстЗапроса = "SELECT Спр.ID [Ссылка $Справочник.Контрагенты]
			|			   FROM $Справочник.Контрагенты Спр (NOLOCK)
			|			   WHERE $Спр.КлГруппа = :ВыбКлиент AND $Спр.ЮридическийАдрес <> :ЮрАдрес
			|";
			
			Запрос = СоздатьОбъект("ODBCRecordSet");
			Запрос.УстановитьТекстовыйПараметр("ВыбКлиент",ТекущийЭлемент());
			Запрос.УстановитьТекстовыйПараметр("ЮрАдрес",СокрЛП(ЮридическийАдрес));
			СпрК = СоздатьОбъект("Справочник.Контрагенты");
			тт=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
			тт.ВыбратьСтроки();
			Пока тт.ПолучитьСтроку()=1 Цикл
				СпрК.НайтиЭлемент(тт.Ссылка);			
				СпрК .ЮридическийАдрес = ЮридическийАдрес;
				ОбъектЗаписать(СпрК,);
				Сообщить(Шаблон("Изменен юридический адрес у клиента Nr.[тт.НомерСтроки] [СпрК.Код] [СпрК.Наименование]"));
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	            
	
	ПоАлфавиту=Translate_Descr(Наименование);
    //<<Алгоритм Успеха>> (end) 
    //************************************************************
	Форма.Закладки.УдалитьВсе();
	Форма.Закладки.ДобавитьЗначение("Общие","Общие"); 
	Форма.Закладки.ДобавитьЗначение("Дополнительный","Дополнительно");
	Форма.Закладки.ДобавитьЗначение("КонтЛицо","Конт. лицо");
	Если ПустоеЗначение(ВидКонтрагента)=1 Тогда
		Предупреждение("Не указан вид контрагента. Запись элемента не возможна.",2);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(Агент)=1 Тогда
		Предупреждение("Не указан агент. Запись элемента не возможна.",2);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	Если ВидКлиента=Перечисление.ВидыКлиентов.Покупатель Тогда
		Если ПустоеЗначение(Маршрут)=1 Тогда
//			Предупреждение("Не указан маршрут. Запись элемента не возможна.",2);
//			СтатусВозврата(0);
//			Возврат;
		ИначеЕсли ПустоеЗначение(Регион)=1 Тогда
			//Предупреждение("Не указан регион. Запись элемента не возможна.",2);
			//СтатусВозврата(0);
			//Возврат;
		ИначеЕсли ПустоеЗначение(КатегорияЦены)=1 Тогда
			Предупреждение("Не указана категория цены. Запись элемента не возможна.",2);
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
			
	КонецЕсли;
	
	Если ВидКонтрагента=Перечисление.ВидыКонтрагентов.Организация Тогда 
		Форма.Закладки.ДобавитьЗначение("РасчетныеСчета","Расчетные счета");
		Форма.Закладки.ДобавитьЗначение("Кредиты","Кредиты");
		Форма.ИспользоватьСлой("Общие, Имена, Кнопки, Организация ",2); 
		Форма.ТекстСотр.Видимость(0);
		Форма.Сотрудник.Видимость(0);                    
//		Форма.КомРегистр.Видимость(1);
	ИначеЕсли ВидКонтрагента=Перечисление.ВидыКонтрагентов.ЧастноеЛицо Тогда 
		Форма.Закладки.ДобавитьЗначение("РасчетныеСчета","Расчетные счета");
		Форма.Закладки.ДобавитьЗначение("Кредиты","Кредиты");
		Форма.Закладки.ДобавитьЗначение("Документ","Паспортные данные");
		Форма.ИспользоватьСлой("Общие, Имена, Кнопки, ЧастноеЛицо",2); 
		Форма.ТекстСотр.Видимость(0);
		Форма.Сотрудник.Видимость(0);                    
//		Форма.КомРегистр.Видимость(1);
	ИначеЕсли ВидКонтрагента=Перечисление.ВидыКонтрагентов.Сотрудник Тогда
		Форма.Закладки.ДобавитьЗначение("Документ","Паспортные данные");
		Форма.ИспользоватьСлой("Общие, Имена, Кнопки, ЧастноеЛицо",2);   
		Форма.ТекстСотр.Видимость(1);
		Форма.Сотрудник.Видимость(1);                    
//		Форма.КомРегистр.Видимость(0);
	КонецЕсли;    

	Если Выбран()=0 Тогда
		Записать();
	КонецЕсли;
	ЗаписатьРасчетныеСчета();
	
	// сем \\
	Если НазваниеНабораПрав() = "Администратор" Тогда СтатусВозврата( 1 ); КонецЕсли;
	ФлИзменен = 1;
	// сем //
	
	КонтЛица=СоздатьОбъект("Справочник.КонтактнаяИнформация");
	КонтЛица.ИспользоватьВладельца(ТекущийЭлемент());
	КонтЛица.ВыбратьЭлементы(1);
	КонтЛица.ПолучитьЭлемент();
	Телефоны=КонтЛица.Телефон;
	
	Форма.Закладки.ДобавитьЗначение( "АкционныеСкидки", "Акционные скидки" );
	
                          
	СохранениеПериодическихРеквизитов(3,СохранениеПериодическихРеквизитов(5));
	
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписи()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	ПриИзмененииОбъекта(Контекст, ТекущийЭлемент(), РабочаяДата());
	стар_ПриЗаписи();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
              
Процедура УстановкаСкидокНаДниРождения()
	
	//Только для сохраненного
	Если (ПустоеЗначение(Карта)=0) И (ПустоеЗначение(СрокИспользованияКарты)=1) Тогда
	    Предупреждение("Не задан срок использования карты!"); 
		Возврат;
	КонецЕсли;
	
	Если Выбран()=1 Тогда
		
		Док=СоздатьОбъект("Документ.УстановкаСкидокКлиентам");
		
		Если ПустоеЗначение(УстановкаСкидкиДок)=0 Тогда
			Док.НайтиДокумент(УстановкаСкидкиДок);
			Док.СделатьНепроведенным();
		Иначе
			глСоздатьНовыйОбъект(Док);
			Док.Клиент=ТекущийЭлемент();
			Док.ДатаДок=?(ПустоеЗначение(ДатаКлиента)=0,ДатаКлиента,РабочаяДата());
		КонецЕсли;                                

		Док.УдалитьСтроки();

		Если ПустоеЗначение(ДатаРождения)=0 Тогда
			ДеньР_=ДатаЧисло(ДатаРождения);
			МесяцР_=ДатаМесяц(ДатаРождения);
			
			ТекГод=ДатаГод(Док.ДатаДок);
			ДатаГод_=ДатаГод(СрокИспользованияКарты);
			                      
			Для инд=ТекГод По ДатаГод_ Цикл
                               
				ТекДата=Дата(инд,МесяцР_,ДеньР_);
				
				Док.НоваяСтрока();
				Док.Скидка=КлиентСкидка+3;
				Док.ДатаСкидки=ТекДата-1;
				
				Док.НоваяСтрока();
				Док.Скидка=КлиентСкидка;
				Док.ДатаСкидки=ТекДата+2;
				
			КонецЦикла;
		Иначе
			Предупреждение("Не указана дата рождения!");
		КонецЕсли;

		Если ПустоеЗначение(ДатаИменин)=0 Тогда
			ДеньР_=ДатаЧисло(ДатаИменин);
			МесяцР_=ДатаМесяц(ДатаИменин);
			
			ТекГод=ДатаГод(Док.ДатаДок);
			ДатаГод_=ДатаГод(СрокИспользованияКарты);
			                      
			Для инд=ТекГод По ДатаГод_ Цикл
                        
				ТекДата=Дата(инд,МесяцР_,ДеньР_);
				                           
				Док.НоваяСтрока();
				Док.Скидка=КлиентСкидка+3;
				Док.ДатаСкидки=ТекДата-1;
				
				Док.НоваяСтрока();
				Док.Скидка=КлиентСкидка;
				Док.ДатаСкидки=ТекДата+2;
				
			КонецЦикла;
		Иначе
//			Предупреждение("Не указана дата именин!");
		КонецЕсли;

        Если Док.КоличествоСтрок()>0 Тогда
			Док.Записать();
			УстановкаСкидкиДок=Док.ТекущийДокумент();
			Записать();
			Док.УстановитьВремя(6,0,0);
			Док.Провести();
        КонецЕсли;
			
	Иначе
		Предупреждение("Клиент должен быть предварительно сохранен!");
	КонецЕсли;
	
КонецПроцедуры         


//******************************
Процедура ВыборГруппового()

	Если (ТекущийЭлемент()=КлГруппа) и (ПустоеЗначение(КлГруппа)=0) Тогда
		Сообщить("Нельзя устанавливать группового клиента Самого себя!");
		КлГруппа=0;
	ИначеЕсли (ПустоеЗначение(КлГруппа.КлГруппа)=1) И (ПустоеЗначение(КлГруппа)=0) Тогда
		ИНН=КлГруппа.ИНН;
		КлГруппа.ИспользоватьДату(РабочаяДата());
		КатегорияКредита = КлГруппа.КатегорияКредита;
		КатегорияКредитаТек=КатегорияКредита;
		КлГруппа.ИспользоватьДату("");
		
	Иначе
		Предупреждение("Вы можете выбрать только Главного клиента!");
		КлГруппа=0;
	КонецЕсли;

КонецПроцедуры   


//----------------------------------------------------------------------------
Процедура ВыборСотрудников()
	Наименование=Сотрудник.Наименование;    
	ПолноеНаименование=Сотрудник.Наименование;
	ДокументСерия=Сотрудник.СерияПаспорта; 
	ДокументНомер=Сотрудник.НомерПаспорта;  
	ДокументДатаВыдачи=Сотрудник.ДатаВыдачиПаспорта; 
	ДокументКемВыдан=Сотрудник.КемВыданПаспорт;   
	КодДляСотрудника=Сотрудник.Код;
КонецПроцедуры         
              
//******************************************************************************
// НАЗВАНИЕ: ЗаполнитьСписокКонтактныхЛиц()
// ПАРАМЕТРЫ: 
// нет
// ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ:
// нет
// ОПИСАНИЕ:
// заполняет таблицу "СписокСчетов" из справочника "РасчетныеСчета"
// расчетными счетами контрагента.     

Процедура ЗаполнитьСписокКонтактныхЛиц()
	Перем КонтактнаяИнформацияКонтрагента;
	Перем СтроковоеПредставлениеКонтЛица;
	
	КонтактнаяИнформацияКонтрагента = СоздатьОбъект("Справочник.КонтактнаяИнформация");
	КонтактнаяИнформацияКонтрагента.ИспользоватьВладельца(ТекущийЭлемент());
	КонтактнаяИнформацияКонтрагента.ВыбратьЭлементы();
	СписокКонтактныхЛиц.УдалитьВсе();
	Пока КонтактнаяИнформацияКонтрагента.ПолучитьЭлемент()=1 Цикл
	    Если КонтактнаяИнформацияКонтрагента.ПометкаУдаления()=1 Тогда
	        // помеченные на удаление не добавляем
			Продолжить;
		КонецЕсли;
		СтроковоеПредставлениеКонтЛица = "Ф.И.: " + СокрП(КонтактнаяИнформацияКонтрагента.Наименование) +
									  "  должн.: " + СокрП(глПолучитьПереводДолжности(КонтактнаяИнформацияКонтрагента.Должность,глКодСтраныПользователя)) +
									  "  тел.: " + СокрП(КонтактнаяИнформацияКонтрагента.Телефон) + 
									  "  факс: " + СокрП(КонтактнаяИнформацияКонтрагента.Факс) +
									  "  е-почта: " + СокрП(КонтактнаяИнформацияКонтрагента.ЭлПочта);
		СписокКонтактныхЛиц.ДобавитьЗначение(КонтактнаяИнформацияКонтрагента.ТекущийЭлемент(),СтроковоеПредставлениеКонтЛица);
	КонецЦикла;
	Форма.КнИзменить.Доступность(1);
	Форма.КнУдалить.Доступность(1);
	Если СписокКонтактныхЛиц.РазмерСписка() = 0 Тогда
		Форма.КнИзменить.Доступность(0);
		Форма.КнУдалить.Доступность(0);
	КонецЕсли;
КонецПроцедуры	// ЗаполнитьСписокКонтактныхЛиц


//---------------------------
// НАЗВАНИЕ: ДобавитьКонтактноеЛицо()
// ПАРАМЕТРЫ: 
// нет
// ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ:
// нет
// ВЫЗЫВАЕТСЯ ИЗ ФОРМУЛ ЭЛЕМЕНТОВ ДИАЛОГА:
// кнопка "Добавить" в слое "КонтактныеЛица"
// ОПИСАНИЕ:
// Открывает форму нового расчетного счета
Процедура ДобавитьКонтактноеЛицо()
	Перем ФормаЗаписи;            
	ФормаЗаписи=ВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Элемент.КонтактнаяИнформация",ФормаЗаписи,,,ТекущийЭлемент());
	ЗаполнитьСписокКонтактныхЛиц();
КонецПроцедуры

//---------------------------
// НАЗВАНИЕ: ИзменитьКонтактноеЛицо()
// ПАРАМЕТРЫ: 
// нет
// ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ:
// нет
// ВЫЗЫВАЕТСЯ ИЗ ФОРМУЛ ЭЛЕМЕНТОВ ДИАЛОГА:
// кнопка "Изменить" в слое "КонтактныеЛица"
// ОПИСАНИЕ:
// Открывает форму текущего в списке расчетного счета для редактирования
Процедура ИзменитьКонтактноеЛицо()
	Перем ФормаЗаписи;
	Поз=СписокКонтактныхЛиц.ТекущаяСтрока();
	Если Поз=0 Тогда
		Предупреждение("Выберите контактное лицо!", 5);
	Иначе
		КонтЛицо=СписокКонтактныхЛиц.ПолучитьЗначение(Поз);
		ФормаЗаписи=ВзятьКонтекст(Контекст);
		ОткрытьФормуМодально(КонтЛицо, ФормаЗаписи);
		ЗаполнитьСписокКонтактныхЛиц();
	КонецЕсли;
КонецПроцедуры

//---------------------------
// НАЗВАНИЕ: УдалитьКонтактноеЛицо()
// ПАРАМЕТРЫ: 
// нет
// ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ:
// нет
// ВЫЗЫВАЕТСЯ ИЗ ФОРМУЛ ЭЛЕМЕНТОВ ДИАЛОГА:
// кнопка "Удалить" в слое "КонтактныеЛица"
// ОПИСАНИЕ:
// Удаляет из списка текущий расчетный счет и помечает его на
// удаление в базе
Процедура УдалитьКонтактноеЛицо()
	Если Вопрос("Удалить контактное лицо?",4)=7 Тогда
		Возврат;
	КонецЕсли;
	Поз=СписокКонтактныхЛиц.ТекущаяСтрока();
	Эл=СписокКонтактныхЛиц.ПолучитьЗначение(Поз);
	Спр=СоздатьОбъект("Справочник.КонтактнаяИнформация");
	Спр.ИспользоватьВладельца(ТекущийЭлемент());
	Если Спр.НайтиЭлемент(Эл)=1 Тогда
		Спр.Удалить(0);
		СписокКонтактныхЛиц.УдалитьЗначение(Поз);
		СписокКонтактныхЛиц.ТекущаяСтрока(?(Поз>1,Поз-1,1));
		Если СписокКонтактныхЛиц.РазмерСписка()=0 Тогда
			Форма.КнИзменить.Доступность(0);
			Форма.КнУдалить.Доступность(0);
		КонецЕсли;
		Форма.Обновить();
	КонецЕсли;
КонецПроцедуры

Процедура ОткрытьДоговор(пДоговор,Папка="")
	Если ПустоеЗначение(пДоговор)=0 Тогда
		ФайлДоговор=СтрЗаменить(СокрЛП(пДоговор),"/","_");
		ФайлДоговор=СтрЗаменить(СокрЛП(ФайлДоговор),"Nr.","");
		ФайлДоговор=СтрЗаменить(СокрЛП(ФайлДоговор),"(SKAIDRA NAUDA)","");
		ФайлДоговор=СтрЗаменить(СокрЛП(ФайлДоговор)," ","");
		
		ФайлДоговор="*"+ФайлДоговор+"*";
		
		ПутьДоговора="\\fstore\PPD\Ligumi\"+СокрП(Страна.Код)+"\"+Папка+"\";
		ФС.УстТекКаталог(ПутьДоговора);
		ИмяФайла=ФС.НайтиПервыйФайл(ФайлДоговор);

		Если ПустоеЗначение(ИмяФайла)=0 Тогда
			ЗапуститьПриложение(ПутьДоговора+ИмяФайла);
		Иначе
			Сообщить("Не найден файл с договором по строке <"+ФайлДоговор+">","!!!");
		КонецЕсли;		
	КонецЕсли;

КонецПроцедуры

Процедура кнАрхивировать()
	
	СимАрхив = СокрЛП(Константа.СимволАрхивТоваров);
	ВАрхиве = 0;
	Если Лев(Наименование,2) = СимАрхив Тогда
		ВАрхиве = 1;
	КонецЕсли;
	
	Если ВАрхиве=0 Тогда
		Если Вопрос("Карточка будет перенесена в архив? Вы уверены?","Да+Нет")="Да" Тогда
			Наименование 			= СимАрхив+" "+ Наименование;
			ПоАлфавиту		= Translate_Descr(Наименование);
			Код 			= "AR"+Код;
			ДатаАрхивации 	= РабочаяДата();
			//Если ВидКлиента = Перечисление.ВидыКлиентов.Покупатель Тогда
			//	Родитель = Константа.ОсновнойПокупательАрхив;
			//Иначе
			//	Родитель = Константа.ОсновнойПоставщикАрхив;
			//КонецЕсли;
			Записать();
		КонецЕсли;	
	Иначе
		
		Наименование	= СокрЛП(СтрЗаменить(Наименование,СимАрхив,""));
		Код 			= СтрЗаменить(Код,"AR","");
		ПоАлфавиту		= Translate_Descr(Наименование);
		
		ВремяПрошло 	= РабочаяДата()-ДатаАрхивации;
		ДатаАрхивации 	= "";
		Если (ВремяПрошло)<360*2 Тогда
			ЛегкоеСообщение("С момента архивации прошло всего "+Времяпрошло+" дней!");
		КонецЕсли;
		
		Текст = "при возврате из архива не забудьте перенести в правильную группу";
		
		Предупреждение(Текст);

		Записать();
	КонецЕсли;
	
КонецПроцедуры // кнАрхивировать


Процедура кнПомощь()
	Помощь = СоздатьОбъект("Общие.Помощь");

	Меню = СоздатьОбъект("СписокЗначений");	
	Меню.ДобавитьЗначение(1,"Клиент");
	Меню.ДобавитьЗначение(2,"Поставщик");
	Выб=1;
	
	Если Меню.ВыбратьЗначение(выб,,,,1)=1 Тогда
		Если Выб=1 Тогда
			Помощь.Открыть( "Справочник.КонтрагентКарточка" );
		ИначеЕсли Выб=2 Тогда
			Помощь.Открыть( "Справочник.КонтрагентПоставщикКарточка" );
		КонецЕсли;		
	КонецЕсли;

	
КонецПроцедуры

Процедура ЗаполнитьПретензии()
	
	Если Выбран()=0 Тогда
		Предупреждение("Сохраните карточку контрагента!");
		Возврат;
	КонецЕсли;
	
	Запрос = СоздатьОбъект("ODBCRecordSet");
	ТекстЗапроса = "SELECT ID [Ссылка $Справочник.Претензии]
	|				FROM $Справочник.Претензии Спр (NOLOCK)
	|				WHERE $Спр.ВыставитьПретензиюПоставщику = 1
	|					AND Спр.ID NOT IN (SELECT $СпрКП.СутьПретензии FROM $Справочник.КонтрагентыПретензии СпрКП (NOLOCK) WHERE PARENTEXT = :Клиент)
	|				ORDER BY CODE
	|";
	
	Запрос.УстановитьТекстовыйПараметр("Клиент",ТекущийЭлемент());
	тт = Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
	
	СпрПП = СоздатьОбъект("Справочник.КонтрагентыПретензии");
	СпрПП.ИспользоватьВладельца(ТекущийЭлемент());
	тт.ВыбратьСтроки();
	Пока тт.ПолучитьСтроку()=1 Цикл
		СпрПП.Новый();
		СпрПП.СутьПретензии = тт.Ссылка;
		СпрПП.ЕстьВДоговоре = 0;
		СпрПП.ДнейДоВыставления = 0;
		ОбъектЗаписать(СпрПП,);
	КонецЦикла;

	ЗаполнитьПретензииПоставщикаТП();
	                                                
КонецПроцедуры                

Процедура ОбновитьКарточкиТоваровКомпенсация()
	Запрос = СоздатьОбъект("ODBCRecordSet");
	ТекстЗапроса = "SELECT  Code Код
	| 						,ID [Товар $Справочник.Номенклатура]
	|					   ,$Спр.ВидПредпродажнойПодготовки [ВидПредпродажнойПодготовки $Перечисление.ВидыПредпродажнойПодготовки]
	|					   ,$Спр.КомпенсацияЗаЭтикетку КомпенсацияЗаЭтикетку
	|					   ,$Спр.КомпенсацияВалюта [КомпенсацияВалюта $Справочник.Валюты]
	|				FROM $Справочник.Номенклатура Спр (NOLOCK)
	|			    WHERE $Спр.Поставщик = :ВыбПоставщик
	|";
	
	Запрос.УстановитьТекстовыйПараметр("ВыбПоставщик",ТекущийЭлемент());
	СпрН = СоздатьОбъект("Справочник.Номенклатура");
	тт = Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
	Если тт.ВыбратьСтроку()=1 Тогда        
	Иначе
		Возврат;
	КонецЕсли;
	с=0;
	тт.ВыбратьСтроки();
	Пока тт.ПолучитьСтроку()=1 Цикл     
		СпрН.НайтиЭлемент(тт.Товар);         
		СпрЗаписать = 0;
		
		Если СпрН.ВидПредпродажнойПодготовки <> ВидПредпродажнойПодготовки Тогда
			СпрН.ВидПредпродажнойПодготовки = ВидПредпродажнойПодготовки;
			СпрЗаписать = 1;
		КонецЕсли;
		
		Если СпрН.КомпенсацияЗаЭтикетку <> КомпенсацияЗаЭтикетку Тогда
			СпрН.КомпенсацияЗаЭтикетку = КомпенсацияЗаЭтикетку;
			СпрЗаписать = 1;
		КонецЕсли;
		
		Если СпрН.КомпенсацияВалюта <> КомпенсацияВалюта Тогда
			СпрН.КомпенсацияВалюта = КомпенсацияВалюта;
			СпрЗаписать = 1;
		КонецЕсли;    

		Если СпрЗаписать=1 Тогда
			ОбъектЗаписать(СпрН,);         
			с=с+1;
			Сообщить("Изменены параметры предпродажной подготовки у товара "+тт.Товар.Код+" "+тт.Товар);
		КонецЕсли;		
	КонецЦикла;  
	
	Сообщить("Изменены параметры предпродажной у "+с+" товаров!");

КонецПроцедуры

Функция ОткрытьСертификатБИО(Язык="",Реж="")

	ПутьКаталогаСертификата=СокрЛП(Константа.ПутьККаталогуСертификатовТоваров)+"\BIO\";
	ФС.УстТекКаталог(ПутьКаталогаСертификата);

	Если Реж="Путь" Тогда
		ЗапуститьПриложение(ПутьКаталогаСертификата);	
		Возврат 1;
	КонецЕсли;	
	ФайлСертификата=""+СокрЛП(Код)+".pdf";

	ФайлСертификата_ = ФС.НайтиПервыйФайл(ФайлСертификата);
 	Если ПустаяСтрока(ФайлСертификата_)=0 Тогда
 		Если Реж = "Проверка" Тогда
 			Возврат 1;
 		КонецЕсли;
 		ЗапуститьПриложение(ПутьКаталогаСертификата+"\"+ФайлСертификата_);
 		Возврат 1;
 	Иначе
 		Если Реж = "Проверка" Тогда
 			Возврат 0;
 		КонецЕсли;
 		
 		Сообщить("Файл сертификата "+ФайлСертификата+" не найден!");
	КонецЕсли;
 	
КонецФункции

Форма.ИспользоватьЗакладки(1);      
Форма.Специализация.ВыборГруппы(0);

ДатаС=НачМесяца(ДобавитьМесяц(РабочаяДата(),-1));
ДатаПо=КонГода(ДатаС);
Форма.ДатаС.ВыполнятьФормулуТолькоПриИзменении(1);
Форма.ДатаПо.ВыполнятьФормулуТолькоПриИзменении(1);

ДатаС1=НачМесяца(ДобавитьМесяц(РабочаяДата(),-1));
ДатаПо1=ТекущаяДата();
Форма.ДатаС1.ВыполнятьФормулуТолькоПриИзменении(1);
Форма.ДатаПо1.ВыполнятьФормулуТолькоПриИзменении(1);