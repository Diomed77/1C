//Не обрабатывать Инсталлятором МОД
Перем ФайлШапки;
Перем Уров;
Перем Т;
Перем ЭлементСтар;
Перем Параметр;
Перем Да,НетНет;
Перем НовыйРодитель;
Перем МасДоступа[10],МасПризнаков[10];
Перем КолТранзакции;
Перем СписВыбОбъектов;
Перем глВыражение;
Перем СписокИстории;
Перем ПовторДляПользователя;
//***************************************************************************************************************
Перем ИнфоПрогрессора,НомерПрогрессора,МаксНомерПрогрессора,ТекПрогрессора,ТекстДляПрогрессора,НачНомерПрогрессора;


//специальные процедуры для работы с пользователем в режиме подскази
Процедура ПодсказкаПользователю(ПервоеСообщение,ПоследующиеСообщения="",ВремяТаймАута=0) Далее



Процедура Прогрессор(Знач Номер=0,МаксНомер=10,НачНомер=0,Текст="")
	//прогрессор временно не используется
КонецПроцедуры //Прогрессор
//***************************************************************************************************************

Процедура ЗаполнитьМасДоступа(НовРодитель="")Далее
Процедура ВыбратьПримерВыгрузки() Далее
Функция МойТип(КтоТо)
	АА=ТипЗначения(КтоТо);
	Если (АА<10) или (АА>12) Тогда
		Возврат ТипЗначенияСтр(КтоТо);
	Иначе
		Возврат ТипЗначенияСтр(КтоТо)+"."+КтоТо.Вид();
	КонецЕсли;
КонецФункции //МойТип

//_____________________________________________________________________________

Процедура НазначитьТипОбъекту(Конт) //только для справочника !!!
	Попытка
		Если (Конт.ЭтоГруппа()=0) и (Сред(Конт.Наименование,1,1)<>"#") Тогда
			Если Конт.Родитель.Родитель.Наименование="Справочники" Тогда
				Об=СоздатьОбъект("Справочник."+Конт.Родитель.Наименование);
				глСоздатьНовыйОбъект(Об);
				Перем1=0;
				Перем1=Об.ПолучитьАтрибут(Конт.Наименование);
				Если Конт.Наименование="Код" Тогда
					Конт.НазначитьТип("Условие",?(Метаданные.Справочник(Конт.Родитель.Наименование).ТипКода="Числовой","Число","Строка"),
					Метаданные.Справочник(Конт.Родитель.Наименование).ДлинаКода,);
					Конт.НазначитьТип("Значение",?(Метаданные.Справочник(Конт.Родитель.Наименование).ТипКода="Числовой","Число","Строка"),
					Метаданные.Справочник(Конт.Родитель.Наименование).ДлинаКода,);
				ИначеЕсли Конт.Наименование="Наименование" Тогда
					Конт.НазначитьТип("Условие","Строка",Метаданные.Справочник(Конт.Родитель.Наименование).ДлинаНаименования,0);
					Конт.НазначитьТип("Значение","Строка",Метаданные.Справочник(Конт.Родитель.Наименование).ДлинаНаименования,0);
				ИначеЕсли Конт.Наименование="Родитель" Тогда
					Конт.НазначитьТип("Условие","Справочник."+Конт.Родитель.Наименование,,);
					Конт.НазначитьТип("Значение","Справочник."+Конт.Родитель.Наименование,,);
				ИначеЕсли Конт.Наименование="Владелец" Тогда
					Влад=Метаданные.Справочник(Конт.Родитель.Наименование).Владелец;
					Если Влад.Выбран()=1 Тогда
						Конт.НазначитьТип("Условие","Справочник."+Влад.Идентификатор,,);
						Конт.НазначитьТип("Значение","Справочник."+Влад.Идентификатор,,);
					КонецЕсли;
				Иначе
					Конт.НазначитьТип("Условие",
					Метаданные.Справочник(Конт.Родитель.Наименование).Реквизит(Конт.Наименование).Тип
					+"."
					+Метаданные.Справочник(Конт.Родитель.Наименование).Реквизит(Конт.Наименование).Вид,
					Метаданные.Справочник(Конт.Родитель.Наименование).Реквизит(Конт.Наименование).Длина,
					Метаданные.Справочник(Конт.Родитель.Наименование).Реквизит(Конт.Наименование).Точность);
					Конт.НазначитьТип("Значение",Метаданные.Справочник(Конт.Родитель.Наименование).Реквизит(Конт.Наименование).Тип+"."+
					Метаданные.Справочник(Конт.Родитель.Наименование).Реквизит(Конт.Наименование).Вид,Метаданные.Справочник(Конт.Родитель.Наименование).Реквизит(Конт.Наименование).Длина,
					Метаданные.Справочник(Конт.Родитель.Наименование).Реквизит(Конт.Наименование).Точность);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры //Обновить

//_____________________________________________________________________________
Процедура ПриВыбореВладельца(Парам)
	Параметр=Парам;
КонецПроцедуры

//_____________________________________________________________________________
Процедура ПриУстановкеПризнака(Признак="")
	НачатьТранзакцию();
	Если Уровень()>1 Тогда
		Спр=СоздатьОбъект("Справочник."+Вид());
		Спр.ИспользоватьВладельца(Владелец);
		Если ЭтоГруппа()=1 Тогда
			Спр.ИспользоватьРодителя(ТекущийЭлемент());
			Спр.ВыбратьЭлементы();
			Пока Спр.ПолучитьЭлемент()>0 Цикл//для всех подчиненных
				Спр.ПризнакВыгрузки=Признак;
				Спр.Записать();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	ЗафиксироватьТранзакцию();
КонецПроцедуры

//_____________________________________________________________________________
Процедура ПриЗаписи()
	глВыгрБазаМОДВыгр="";
	//здесь проверяем чтобы родитель был группой !!!
	АктивЭлемент=Форма.ТекущаяКолонка();
	Попытка
		Если Наименование="Родитель" Тогда
			Если АктивЭлемент="Условие" Тогда
				Если ТипЗначения(Условие)=11 Тогда
					Если Условие.ЭтоГруппа()=0 Тогда
						Условие="";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если АктивЭлемент="Значение" Тогда
				Если ТипЗначения(Значение)=11 Тогда
					Если Значение.ЭтоГруппа()=0 Тогда
						Значение="";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	//а здесь по умолчанию ставим некоторые признаки
	Если (АктивЭлемент="Значение") Тогда
		Если Сокрлп(ВклЗначение)=НетНет Тогда
			Если Сокрлп(Значение)<>"" Тогда
				ВклЗначение=Да;
				ПризнакВыгрузки=Да;
			КонецЕсли;
		Если История=Да Тогда
		    История="-";
		КонецЕсли;
		КонецЕсли;
	ИначеЕсли (АктивЭлемент="Условие") Тогда
		Если Сокрлп(ВклУсловие)=НетНет Тогда
			Если Сокрлп(Условие)<>"" Тогда
				ВклУсловие=Да;
				ПризнакВыгрузки=Да;
			КонецЕсли;
		КонецЕсли;
		Если История=Да Тогда
		    История="-";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//_____________________________________________________________________________

//_____________________________________________________________________________

Процедура УстановитьТипЯчейки()
	Если ЭтоГруппа()=1 Тогда
		Возврат;
	КонецЕсли;
	Если Выбран()=0 Тогда
		Возврат;
	КонецЕсли;
	Список=СоздатьОбъект("СписокЗначений");
	Список.ДобавитьЗначение("Число");
	Список.ДобавитьЗначение("Строка");
	Список.ДобавитьЗначение("Дата");
	Список.ДобавитьЗначение("Перечисление");
	Список.ДобавитьЗначение("Справочник");
	Список.ДобавитьЗначение("Документ");
	Список.ДобавитьЗначение("Счет");
	Список.ДобавитьЗначение("ВидСубконто");
	Список.ДобавитьЗначение("Календарь");
	Список.ДобавитьЗначение("ВидРасчета");
	Список.ДобавитьЗначение("Очистить");
	Выбр=0;
	Длина=10;
	Точность=0;
	Список.ВыбратьЗначение(Выбр,"Выберите нужный тип",,,1);
	Выбр2="";
	Рез=1;
	Если Выбр="Справочник" Тогда
		Список=СоздатьОбъект("СписокЗначений");
		Список.ДобавитьЗначение("","<неопределенного вида>");
		Для А=1 По Метаданные.Справочник() Цикл
			Имя=Метаданные.Справочник(А).Идентификатор;
			Список.ДобавитьЗначение(""+Имя);
		КонецЦикла;
		Рез=Список.ВыбратьЗначение(Выбр2,"Выберите нужный вид",,,0);
	ИначеЕсли Выбр="Документ" Тогда
		Список=СоздатьОбъект("СписокЗначений");
		Список.ДобавитьЗначение("","<неопределенного вида>");
		Для А=1 По Метаданные.Документ() Цикл
			Имя=Метаданные.Документ(А).Идентификатор;
			Список.ДобавитьЗначение(""+Имя);
		КонецЦикла;
		Рез=Список.ВыбратьЗначение(Выбр2,"Выберите нужный вид",,,0);
	ИначеЕсли Выбр="Перечисление" Тогда
		Список=СоздатьОбъект("СписокЗначений");
		Для А=1 По Метаданные.Перечисление() Цикл
			Имя=Метаданные.Перечисление(А).Идентификатор;
			Список.ДобавитьЗначение(""+Имя);
		КонецЦикла;
		Рез=Список.ВыбратьЗначение(Выбр2,"Выберите нужный вид",,,0);
	ИначеЕсли (Выбр="Число")ИЛИ(Выбр="Строка") Тогда
		Рез=ВвестиЧисло(Длина,"Введите длину",3,0);
		Если Рез<>1 Тогда
			Возврат;
		КонецЕсли;
		Если Выбр="Число" Тогда
			Рез=ВвестиЧисло(Точность,"Введите точность",3,0);
			Если Рез<>1 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Выбр="Дата" Тогда
	ИначеЕсли Выбр="Счет" Тогда
	ИначеЕсли Выбр="Очистить" Тогда
	ИначеЕсли Выбр="ПланСчетов" Тогда
	ИначеЕсли Выбр="ВидСубконто" Тогда
	ИначеЕсли Выбр="Календарь" Тогда
	ИначеЕсли Выбр="ВидРасчета" Тогда
	ИначеЕсли Выбр="...другое" Тогда
		Выбр="";
		Рез=ВвестиСтроку(Выбр,"Напишите необходимый тип и вид:",100);
	Иначе
		Возврат;
	КонецЕсли;
	
	ТипВид=Выбр;
	Если Выбр2<>"" Тогда
		ТипВид=Выбр+"."+Выбр2;
	КонецЕсли;
	Если Рез=0 Тогда
		Возврат;
	КонецЕсли;
	
	Спр=СоздатьОбъект("Справочник."+Вид());
	Спр.НайтиЭлемент(ТекущийЭлемент());
	Спр.НазначитьТип("Условие",ТипВид,Длина,Точность);
	Спр.НазначитьТип("Значение",ТипВид,Длина,Точность);
	Спр.Записать();
	
КонецПроцедуры //УстановитьТипЯчейки

//_____________________________________________________________________________

Процедура УстановитьАтрибутУРодителей(Спр,Атрибут)
	Спр2=СоздатьОбъект("Справочник."+Вид());
	РодительСпр=Спр.Родитель;
	Пока РодительСпр.Выбран()=1 Цикл
		Спр2.НайтиЭлемент(РодительСпр);
		Спр2.УстановитьАтрибут(Атрибут,Да);
		Спр2.Записать();
		РодительСпр=Спр2.Родитель;
	КонецЦикла;
КонецПроцедуры //УстановитьАтрибутУРодителей

//_____________________________________________________________________________

Процедура ПриНачалеРедактированияСтроки()
	Если Выбран()=0 Тогда
		Возврат;
	КонецЕсли;

	АктивЭлемент=Форма.ТекущаяКолонка();

	Если АктивЭлемент="Пример" Тогда
		ВыбратьПримерВыгрузки();
	    Возврат;
	КонецЕсли;

	
	глВыгрБазаМОДВыгр="";
	
	
	
	Если АктивЭлемент="Перечисление" Тогда
		АктивЭлемент="Движения";
	КонецЕсли;
	
	Если (АктивЭлемент="ВклУсловие")     ИЛИ
	(АктивЭлемент="ПризнакВыгрузки")ИЛИ
	(АктивЭлемент="Движения")ИЛИ
	(АктивЭлемент="ВклЗначение")  Тогда
		Спр=СоздатьОбъект("Справочник."+Вид());
		Спр.НайтиЭлемент(ТекущийЭлемент());
		Если Спр.ПолучитьАтрибут(АктивЭлемент)=Да Тогда
			Спр.УстановитьАтрибут(АктивЭлемент,НетНет);
		Иначе
			Спр.УстановитьАтрибут(АктивЭлемент,Да);
			УстановитьАтрибутУРодителей(Спр,"ПризнакВыгрузки");
			Если Спр.История=Да Тогда
			    Спр.История="-";
			КонецЕсли;
		КонецЕсли;
		Спр.Записать();
		СтатусВозврата(0);
	ИначеЕсли	(АктивЭлемент="История") Тогда
		Спр=СоздатьОбъект("Справочник."+Вид());
		Спр.НайтиЭлемент(ТекущийЭлемент());
		Если Спр.ПолучитьАтрибут(АктивЭлемент)=Да Тогда
			Спр.УстановитьАтрибут(АктивЭлемент,"-");
		ИначеЕсли Спр.ПолучитьАтрибут(АктивЭлемент)="-" Тогда
			Спр.УстановитьАтрибут(АктивЭлемент,Да);
		КонецЕсли;
		Спр.ВклЗначение="";
		Спр.ВклУсловие="";
		Спр.Записать();
		СтатусВозврата(0);
	ИначеЕсли	(АктивЭлемент="Значение")Тогда
		Если ТипЗначения(Значение)=0 Тогда
			УстановитьТипЯчейки();
		КонецЕсли;
	ИначеЕсли	(АктивЭлемент="Условие")Тогда
		Если ТипЗначения(Условие)=0 Тогда
			УстановитьТипЯчейки();
		КонецЕсли;
	КонецЕсли;
	
	Если Наименование="Родитель" Тогда
		Если (АктивЭлемент="Условие")ИЛИ(АктивЭлемент="Значение") Тогда
			Попытка
				СпрВладелец="";
				Спр1=СоздатьОбъект("Справочник."+Родитель.Наименование);
				Если ТипЗначения(Спр1.Владелец)=11 Тогда
					Вид=Спр1.Владелец.Вид();
					Спр=СоздатьОбъект("Справочник."+Вид);
					Спр.НайтиЭлемент(СпрВладелец);
					Спр.Выбрать("Выберите владельца !","");
					СпрВладелец=Спр.ТекущийЭлемент();
					Спр1.ИспользоватьВладельца(СпрВладелец);
					Спр1.ВыборГруппы(1);
					Спр1.Выбрать("Выберите родителя !","");
					Спр2=СоздатьОбъект("Справочник."+Вид());
					Спр2.НайтиЭлемент(ТекущийЭлемент());
					Если АктивЭлемент="Условие" Тогда
						Спр2.Условие=Спр1.ТекущийЭлемент();
					КонецЕсли;
					Если АктивЭлемент="Значение" Тогда
						Спр2.Значение=Спр1.ТекущийЭлемент();
					КонецЕсли;
					Спр2.Записать();
					СтатусВозврата(0);
					Возврат;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если АктивЭлемент="Условие" Тогда
			Форма.Условие.ВыборГруппы(1);
		КонецЕсли;
		Если АктивЭлемент="Значение" Тогда
			Форма.Значение.ВыборГруппы(1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//_____________________________________________________________________________
//копирование по текущему элементу
Процедура Установить()
	Колонка=Форма.ТекущаяКолонка();
	Если Колонка="Наименование" Тогда
		Возврат;
	ИначеЕсли Колонка="История" Тогда
		Возврат;
	ИначеЕсли Колонка="Пример" Тогда
		Возврат;
	ИначеЕсли Колонка="Перечисление" Тогда
		Возврат;
	КонецЕсли;
	Режим=0;
	//Если Колонка="Движения" Тогда
	//	Режим=0;//пройдемся только по группам - т.е. не включаем в выборку подчиненные значения
	//КонецЕсли;
	глВыгрБазаМОДВыгр="";
	Спр=СоздатьОбъект("Справочник."+Вид());
	Спр.НайтиЭлемент(ТекущийЭлемент());
	КакоеТоЗначение=Спр.ПолучитьАтрибут(Колонка);
	ТипЗначенияКопир=МойТип(КакоеТоЗначение);
	Спр.ИспользоватьВладельца(Владелец);
	Спр.ИспользоватьРодителя(Родитель);
	Спр.ВыбратьЭлементы();
	НачатьТранзакцию();
	Пока Спр.ПолучитьЭлемент(Режим)=1 Цикл
		
		Если Спр.Блокировка(1)=1 Тогда
			//а здесь мы устанавливаем значения только для совпадающих типов
			Тип=МойТип(Спр.ПолучитьАтрибут(Колонка));
			Если Тип=ТипЗначенияКопир Тогда
				Спр.УстановитьАтрибут(Колонка,КакоеТоЗначение);
			КонецЕсли;
			Спр.Записать();
		Иначе
			Тип=МойТип(Спр.ПолучитьАтрибут(Колонка));
			Если Тип=ТипЗначенияКопир Тогда
				УстановитьАтрибут(Колонка,КакоеТоЗначение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	Форма.Обновить(); //Но все равно почему-то не обновляет ?????
КонецПроцедуры

//_____________________________________________________________________________
Процедура ОчиститьКолонку()
	Колонка=Форма.ТекущаяКолонка();
	Если Колонка="Наименование" Тогда
		Возврат;
	ИначеЕсли Колонка="История" Тогда
		Возврат;
	ИначеЕсли Колонка="Пример" Тогда
		Возврат;
	ИначеЕсли Колонка="Перечисление" Тогда
		Возврат;
	КонецЕсли;
	Режим=0;
	//Если Колонка="Движения" Тогда
	//	Режим=0;//пройдемся только по группам - т.е. не включаем в выборку подчиненные значения
	//КонецЕсли;
	глВыгрБазаМОДВыгр="";
	Спр=СоздатьОбъект("Справочник."+Вид());
	Спр.ИспользоватьВладельца(Владелец);
	Спр.ИспользоватьРодителя(Родитель);
	Спр.ВыбратьЭлементы();
	НачатьТранзакцию();
	Пока Спр.ПолучитьЭлемент(Режим)=1 Цикл
		Если Спр.Блокировка(1)=1 Тогда
			Спр.УстановитьАтрибут(Колонка,"");
			Спр.Записать();
		Иначе
			УстановитьАтрибут(Колонка,"");
		КонецЕсли;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	Форма.Обновить(); //Но все равно почему-то не обновляет ?????
КонецПроцедуры //ОчиститьКолонку

//_____________________________________________________________________________

Процедура Спр1_Записать(Спр)//перед тем как зписать назначим типы значений !!
	НазначитьТипОбъекту(Спр);
	Спр.Записать();
КонецПроцедуры //Спр1_Записать

//_____________________________________________________________________________ 

Процедура ЗаписатьТипы(Спр,Тип,Длина="",Точность="");
	Спр.НазначитьТип("Значение",Тип,Длина,Точность);
	Спр.НазначитьТип("Условие",Тип,Длина,Точность);
	Спр.Записать();
КонецПроцедуры
//_____________________________________________________________________________

Функция ЭлементМетаданных(Спр,Имя,РодительСпр,Группа=0,Истор=0,Движ=1)
	Попытка
		Спр.ИспользоватьВладельца(Параметр);
		Спр.ИспользоватьРодителя(РодительСпр);
	Исключение
		Возврат 0;
	КонецПопытки;
	Спр.ВключатьПодчиненные(0);
	Спр.НайтиПоНаименованию(Имя,1,1);
	
	
	
	Если Спр.Выбран()=0 Тогда
		Если Группа=1 Тогда
			глСоздатьНовуюГруппу(Спр);
			//*****************************************проверка прямого доступа к объекту метаданных
			Если МасДоступа[Спр.Родитель.Уровень()+1]<>"" Тогда //т.е. задано какое-то значение объектв, в которое следует зайти
				//Спр=0; //но оно не совпало
				Возврат 0;
			КонецЕсли;//иначе не задано
			//*****************************************
			Если Движ=1 Тогда
				Спр.Движения=Да;
			КонецЕсли;
		Иначе
			глСоздатьНовыйОбъект(Спр);
			Если Истор=1 Тогда
				Спр.История=Да;
			КонецЕсли;
		КонецЕсли;
		Спр.Наименование=Имя;
		Спр.Синоним=Имя;
		Спр.ПризнакВыгрузки=Да;
		Спр.Записать();
		КолТранзакции=КолТранзакции+1;
		Если КолТранзакции%500=0 Тогда
			Состояние("Обработано элементов "+КолТранзакции+" запись...");
		    ЗафиксироватьТранзакцию();
			Состояние("Обработано элементов "+КолТранзакции+" продолжение...");
			НачатьТранзакцию();
		КонецЕсли;
	Иначе
		Спр.СнятьПометкуУдаления();
		//*****************************************проверка прямого доступа к объекту метаданных
		Уровень=Спр.Уровень();
		//		Сообщить("Имя="+Имя+"  Уровень="+Уровень+"  МасДоступа[]="+МасДоступа[Уровень]);
		Если МасДоступа[Уровень]<>"" Тогда //задан единичный объект метаданных для обновления метаданными
			Если Имя<>МасДоступа[Уровень] Тогда //имя требуемого объекта не совпало с найденным
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
		//*****************************************
	КонецЕсли;
	Возврат 1;
КонецФункции //ЭлементМетаданных


//_____________________________________________________________________________
Процедура ЗаполнитьСтруктуруПравил()//заполнить справочник исходя из текущей конфигурации
	Если Владелец.Выбран()=0 Тогда
		Если ПустоеЗначение(Параметр)=1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	КолТранзакции=0;//для ускорения при каждой NN-й записи справочника будем фиксировать транзакцию
	//	Прогрессор(0,12,0,"Заполнение");
	глВыгрБазаМОДВыгр="";
	Удалять=0;
	
	Спр=СоздатьОбъект("Справочник."+Вид());
	Спр.ИспользоватьВладельца(Параметр);
	Рез=Спр.ВыбратьЭлементы();
	Если Рез=1 Тогда
		Список=СоздатьОбъект("СписокЗначений");	
		Список.ДобавитьЗначение(1,"Добавить только новые объекты");
		Список.ДобавитьЗначение(2,"Добавить новые и удалить старые");
		Выбр=0;
		Если Список.ВыбратьЗначение(Выбр,"Просмотреть ...",,,1)=1 Тогда
			Если Выбр=1 Тогда
				Удалять=0;
			ИначеЕсли Выбр=2 Тогда
				Удалять=1;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	
	
	НачатьТранзакцию();
	//*********************************************************************************
	//подготавливаем вспомогательный массив прямого доступа к объекту метаданных
	ЗаполнитьМасДоступа();
	//*********************************************************************************




	Если Удалять=1 Тогда
		//сначала все помечаем на удаление !!
		Спр=СоздатьОбъект("Справочник."+Вид());
		Спр.ИспользоватьВладельца(Параметр);
		Если ПустоеЗначение(НовыйРодитель)=0 Тогда
			Спр.ИспользоватьРодителя(НовыйРодитель);//удаляем толко в пределах подчинения	
		КонецЕсли;
		Спр.ВыбратьЭлементы(1);
		Состояние("Пометка на удаление !!");
		Пока Спр.ПолучитьЭлемент(0)=1 Цикл
			Если Лев(Спр.Наименование,1)<>"@" Тогда
				Спр.Удалить(0);
				КолТранзакции=КолТранзакции+1;
				Если КолТранзакции%500=0 Тогда
					Состояние("Обработано элементов "+КолТранзакции+" запись...");
					ЗафиксироватьТранзакцию();
					Состояние("Обработано элементов "+КолТранзакции+" продолжение...");
					НачатьТранзакцию();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	
	//Планы счетов
	Для М1=1 По 1 Цикл
		//	Прогрессор(2);//************ прогрессор
		Попытка
			Состояние("Заполнение плана счетов");
			Если Метаданные.ДокументОперации.Выбран()=1 Тогда
				Спр=СоздатьОбъект("Справочник."+Вид());
				Имя="Планы счетов";
				Если ЭлементМетаданных(Спр,Имя,"",1)=0 Тогда
					Продолжить;
				КонецЕсли;
				РодительСпр=Спр.ТекущийЭлемент();
				Ц=ПланыСчетов.КоличествоЗначений();
				Для Ц=1 по ПланыСчетов.КоличествоЗначений() Цикл
					Имя=ПланыСчетов.ЗначениеПоНомеру(Ц).Идентификатор();
					Если ЭлементМетаданных(Спр,Имя,РодительСпр,1,0,1)=0 Тогда
						Продолжить;
					КонецЕсли;
					ТекПлан=Спр.ТекущийЭлемент();
					Об=СоздатьОбъект("Счет");
					Об.ИспользоватьПланСчетов(ПланыСчетов.ЗначениеПоИдентификатору(Имя));
					Об.ВыбратьСчета();
					Пока Об.ПолучитьСчет()>0 Цикл
						Имя=Строка(Об.ТекущийСчет());
						Если ЭлементМетаданных(Спр,Имя,ТекПлан,1,0,0)=0 Тогда
							Продолжить;
						КонецЕсли;
						ТекСчет=Спр.ТекущийЭлемент();
						Для ЦЦ=1 по Об.КоличествоСубконто() Цикл
							Спр.ИспользоватьРодителя(ТекСчет);
							Спр.ВключатьПодчиненные(0);
							Субк=Об.ВидСубконто(ЦЦ,);
							Имя=Субк.Идентификатор();
							ЭлементМетаданных(Спр,Имя,ТекСчет,0);
							ТипВид=Субк.ТипСубконто();
							ЗаписатьТипы(Спр,ТипВид);
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	
	
	//Операции
	//	Прогрессор(4);//************ прогрессор
	Если Метаданные.ДокументОперации.Выбран()=1 Тогда
	Для М1=1 По 1 Цикл
		Состояние("Заполнение операций");
		Спр=СоздатьОбъект("Справочник."+Вид());
		Имя="Операции";
		Если ЭлементМетаданных(Спр,Имя,"",1)=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для М2=1 По 1 Цикл
			ТекДок=Спр.ТекущийЭлемент();
			Имя="Атрибуты операции";
			Если ЭлементМетаданных(Спр,Имя,ТекДок,1)=0 Тогда
				Продолжить;
			КонецЕсли;
			ТекДок1=Спр.ТекущийЭлемент();//"Атрибуты операции"
			
			Спр1=СоздатьОбъект("Справочник."+Вид());
			
			ЭлементМетаданных(Спр1,"СуммаОперации",ТекДок1,0);
			Длина=Число(Метаданные.ДлинаСуммыОперация);
			Точность=Число(Метаданные.ТочностьСуммыОперации);
			ЗаписатьТипы(Спр1,"Число",Длина,Точность);
			
			ЭлементМетаданных(Спр1,"Содержание",ТекДок1,0);
			Длина=Число(Метаданные.ДлинаСодержанияОперации);
			ЗаписатьТипы(Спр1,"Строка",Длина,0);
			
			ЭлементМетаданных(Спр1,"#ПроводкиВключены",ТекДок1,0);
			ЗаписатьТипы(Спр1,"Число",1,0);
			
			ЭлементМетаданных(Спр1,"#Документ",ТекДок1,0);
			ЗаписатьТипы(Спр1,"Документ",0,0);
			
		
			
			
			Для А=1 По Метаданные.РеквизитОперации() Цикл
				Мета=Метаданные.РеквизитОперации(А);
				Тип=Мета.Тип;
				Вид=Мета.Вид;
				Длина=Мета.Длина;
				Точность=Мета.Точность;
				Имя=Мета.Идентификатор;
				
				ЭлементМетаданных(Спр1,Имя,ТекДок1,0);
				ЗаписатьТипы(Спр1,Тип+"."+Вид,Длина,Точность);
			КонецЦикла;
		КонецЦикла;	
		
		
		Для М2=1 По 1 Цикл
			Имя="Атрибуты проводки";
			Если ЭлементМетаданных(Спр,Имя,ТекДок,1)=0 Тогда
				Продолжить;
			КонецЕсли;
			ТекДок1=Спр.ТекущийЭлемент();//"Атрибуты проводки"
			
			Спр1=СоздатьОбъект("Справочник."+Вид());
			
			ЭлементМетаданных(Спр1,"#СложнаяПроводка",ТекДок1,0);
			ЗаписатьТипы(Спр1,"Число",1,0);
			
			ЭлементМетаданных(Спр1,"Сумма",ТекДок1,0);
			Длина=Число(Метаданные.ДлинаСуммыПроводки);
			Точность=Число(Метаданные.ТочностьСуммыПроводки);
			ЗаписатьТипы(Спр1,"Число",Длина,Точность);
			
			ЭлементМетаданных(Спр1,"ВалСумма",ТекДок1,0);
			Длина=Число(Метаданные.ДлинаВалютнойСуммыПроводки);
			Точность=Число(Метаданные.ТочностьВалютнойСуммыПроводки);
			ЗаписатьТипы(Спр1,"Число",Длина,Точность);
			
			ЭлементМетаданных(Спр1,"Валюта",ТекДок1,0);
			ЗаписатьТипы(Спр1,"Справочник."+Метаданные.Валюта,"","");
			
			
			ЭлементМетаданных(Спр1,"Количество",ТекДок1,0);
			Длина=Число(Метаданные.ДлинаКоличестваПроводки);
			Точность=Число(Метаданные.ТочностьКоличестваПроводки);
			ЗаписатьТипы(Спр1,"Число",Длина,Точность);
			
			Для А=1 По Метаданные.РеквизитПроводки() Цикл
				Мета=Метаданные.РеквизитПроводки(А);
				Имя=Мета.Идентификатор;
				Тип=Мета.Тип;
				Вид=Мета.Вид;
				Длина=Мета.Длина;
				Точность=Мета.Точность;
				ЭлементМетаданных(Спр1,Имя,ТекДок1,0);
				ЗаписатьТипы(Спр1,Тип+"."+Вид,Длина,Точность);
			КонецЦикла;
			
			
			ЭлементМетаданных(Спр1,"Дебет.Счет",ТекДок1,0);
			ЗаписатьТипы(Спр1,"Счет","","");
			
			
			Для А=1 По Метаданные.МаксимальноеКоличествоСубконто Цикл
				Имя="Дебет.Субконто"+А;
				ЭлементМетаданных(Спр1,Имя,ТекДок1,0);
			КонецЦикла;
			
			ЭлементМетаданных(Спр1,"Кредит.Счет",ТекДок1,0);
			ЗаписатьТипы(Спр1,"Счет","","");
			
			Для А=1 По Метаданные.МаксимальноеКоличествоСубконто Цикл
				Имя="Кредит.Субконто"+А;
				ЭлементМетаданных(Спр1,Имя,ТекДок1,0);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;	
	КонецЕсли;
	
	
	
	//Документы
	Прогрессор(6);//************ прогрессор
	Состояние("Заполнение документов");
	Спр=СоздатьОбъект("Справочник."+Вид());
	
	Для М1=1 По 1 Цикл
		Имя="Документы";
		Если ЭлементМетаданных(Спр,Имя,"",1)=0 Тогда
			Продолжить;
		КонецЕсли;
		Док0=Спр.ТекущийЭлемент();
		
		
		Для ы=1 по Метаданные.Документ() Цикл
			Мета=Метаданные.Документ(ы);
			Имя=Мета.Идентификатор;
			Если ЭлементМетаданных(Спр,Имя,Док0,1)=0 Тогда
				Продолжить;
			КонецЕсли;
			
			//шапка
			Для М2=1 По 1 Цикл
				ТекДок=Спр.ТекущийЭлемент();//Документ
				Если ЭлементМетаданных(Спр,"Шапка",ТекДок,1)=0 Тогда
					Продолжить;
				КонецЕсли;
				ТекДок1=Спр.ТекущийЭлемент();//"Шапка"
				
				ЭлементМетаданных(Спр,"#ДатаДок",ТекДок1,0);
				ЗаписатьТипы(Спр,"Дата");
				
				ЭлементМетаданных(Спр,"#ВремяДокумента",ТекДок1,0);
				
				ЭлементМетаданных(Спр,"#Проведен",ТекДок1,0);
				ЗаписатьТипы(Спр,"Число",1,0);
				
				ЭлементМетаданных(Спр,"#Удален",ТекДок1,0);
				ЗаписатьТипы(Спр,"Число",1,0);
				
				ЭлементМетаданных(Спр,"#ПомеченНаУдаление",ТекДок1,0);
				ЗаписатьТипы(Спр,"Число",1,0);
				
				ЭлементМетаданных(Спр,"НомерДок",ТекДок1,0);
				ТипНомера=Мета.ТипНомера;
				Тип=?(ТипНомера="Числовой","Число","Строка");
				ДлинаНомера=Мета.ДлинаНомера;
				ЗаписатьТипы(Спр,Тип,ДлинаНомера,0);
				
				Для у=1 по Метаданные.ОбщийРеквизитДокумента() Цикл
					Имя=Метаданные.ОбщийРеквизитДокумента(у).Идентификатор;
					
					Если СокрЛП(Имя)<>"IDD" Тогда
						Мета=Метаданные.ОбщийРеквизитДокумента(у);
						Тип=Мета.Тип;
						Вид=Мета.Вид;
						Длина=Мета.Длина;
						Точность=Мета.Точность;
						Сортировка=Мета.Сортировка;
						ЭлементМетаданных(Спр,Имя,ТекДок1,0);
						ЗаписатьТипы(Спр,Тип+"."+Вид,Длина,Точность);
						
						
					КонецЕсли;
				КонецЦикла;
				
				//другие реквизиты
				Спр1=СоздатьОбъект("Справочник."+Вид());
				Спр1.ИспользоватьВладельца(Параметр);
				Для ыы=1 по Метаданные.Документ(ы).РеквизитШапки() Цикл
					Мета=Метаданные.Документ(ы).РеквизитШапки(ыы);
					Тип=Мета.Тип;
					Вид=Мета.Вид;
					Длина=Мета.Длина;
					Точность=Мета.Точность;
					Имя=Мета.Идентификатор;
					ЭлементМетаданных(Спр,Имя,ТекДок1,0);
					ЗаписатьТипы(Спр,Тип+"."+Вид,Длина,Точность);
				КонецЦикла;
			КонецЦикла;
			
			
			//Табл. часть
			Для М2=1 По 1 Цикл
				Если ЭлементМетаданных(Спр,"Табличная часть",ТекДок,1)=0 Тогда
					Продолжить;
				КонецЕсли;
				ТекДок1=Спр.ТекущийЭлемент();//"Табличная часть"
				
				Для ыы=1 по Метаданные.Документ(ы).РеквизитТабличнойЧасти() Цикл
					Мета=Метаданные.Документ(ы).РеквизитТабличнойЧасти(ыы);
					Тип=Мета.Тип;
					Вид=Мета.Вид;
					Длина=Мета.Длина;
					Точность=Мета.Точность;
					Имя=Мета.Идентификатор;
					ЭлементМетаданных(Спр,Имя,ТекДок1,0);
					ЗаписатьТипы(Спр,Тип+"."+Вид,Длина,Точность);
				КонецЦикла;
				ЭлементМетаданных(Спр,"НомерСтроки",ТекДок1,0);
				ЗаписатьТипы(Спр,"Число",5,0);
			КонецЦикла;
		КонецЦикла;//М2;
	КонецЦикла;//М1
	
	
	
	Для М1=1 По 1 Цикл
		//Справочники
		//Прогрессор(8);//************ прогрессор
		Состояние("Заполнение справочников");
		Спр=СоздатьОбъект("Справочник."+Вид());
		
		Если ЭлементМетаданных(Спр,"Справочники","",1)=0 Тогда
			Продолжить;
		КонецЕсли;
		ТекСпр=Спр.ТекущийЭлемент();//справочники
		
		Для ы=1 по Метаданные.Справочник() Цикл
			Мета=Метаданные.Справочник(ы);
			Имя=Мета.Идентификатор;
			Если (Имя="ПравилаЗагрузки") или (Имя="ПравилаВыгрузки") или (Имя="ПериферийныеБазы") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементМетаданных(Спр,Имя,ТекСпр,1,0,0)=0 Тогда
				Продолжить;
			КонецЕсли;
			
			//Реквизиты
			ТекСпр1=Спр.ТекущийЭлемент();//Вид справочника
			
			ЭлементМетаданных(Спр,"#Удален",ТекСпр1,0);
			ЗаписатьТипы(Спр,"Число",1,0);
			
			ЭлементМетаданных(Спр,"#ЭтоГруппа",ТекСпр1,0);
			ЗаписатьТипы(Спр,"Число",1,0);
			
			ЭлементМетаданных(Спр,"#ПомеченНаУдаление",ТекСпр1,0);
			ЗаписатьТипы(Спр,"Число",1,0);
			
			ЭлементМетаданных(Спр,"Родитель",ТекСпр1,0);
			ЗаписатьТипы(Спр,"Справочник."+ТекСпр1.Наименование);
			
			ЭлементМетаданных(Спр,"Владелец",ТекСпр1,0);
			Влад=Мета.Владелец;
			Если Влад.Выбран()=1 Тогда
				ЗаписатьТипы(Спр,"Справочник."+Влад.Идентификатор);
			КонецЕсли;
			
			ЭлементМетаданных(Спр,"Код",ТекСпр1,0);
			Тип=?(Мета.ТипКода="Числовой","Число","Строка");
			Длина=Мета.ДлинаКода;
			ЗаписатьТипы(Спр,Тип,Длина);
			
			ЭлементМетаданных(Спр,"Наименование",ТекСпр1,0);
			Длина=Мета.ДлинаНаименования;
			ЗаписатьТипы(Спр,"Строка",Длина);
			
			//остальные реквизиты
			Для ыы=1 по Метаданные.Справочник(ы).Реквизит() Цикл
				Мета=Метаданные.Справочник(ы).Реквизит(ыы);
				Имя=Мета.Идентификатор;
				Периодический=Число(Мета.Периодический);
				Если СокрЛП(Имя)<>"IDD" Тогда
					ЭлементМетаданных(Спр,Имя,ТекСпр1,0,Периодический);
					Тип=Мета.Тип;
					Вид=Мета.Вид;
					Длина=Мета.Длина;
					Точность=Мета.Точность;
					ЗаписатьТипы(Спр,Тип+"."+Вид,Длина,Точность);
//					Сортировка=Мета.Отбор;
					
					//смотрим может изменился тип реквизита в конфигураторе
					Если Периодический=0 Тогда
						Спр.История="";
						Спр.Записать();
					Иначе
						Если Спр.История<>Да Тогда
							Спр.История="-";
							Спр.Записать();
						КонецЕсли;
					КонецЕсли;
					
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;//М1
	
	
	Для М1=1 По 1 Цикл
		//Регистры
		Прогрессор(10);//************ прогрессор
		Состояние("Заполнение регистров");
		Если Метаданные.Регистр()>0 Тогда
			Если ЭлементМетаданных(Спр,"Регистры","",1)=0 Тогда
				Продолжить;
			КонецЕсли;
			Рег0=Спр.ТекущийЭлемент();//Регистр
			Для ы=1 по Метаданные.Регистр() Цикл
				Имя=Метаданные.Регистр(ы).Идентификатор;
				Если ЭлементМетаданных(Спр,Имя,Рег0,1)=0 Тогда
					Продолжить;
				КонецЕсли;
				ТекРег=Спр.ТекущийЭлемент();//Вид регистров
				
				ЭлементМетаданных(Спр,"Измерения",ТекРег,1);
				
				ТекРег1=Спр.ТекущийЭлемент();//Измерения
				
				
				Для ыы=1 по Метаданные.Регистр(ы).Измерение() Цикл
					Мета=Метаданные.Регистр(ы).Измерение(ыы);
					Тип=Мета.Тип;
					Вид=Мета.Вид;
					Длина=Мета.Длина;
					Точность=Мета.Точность;
					Имя=Мета.Идентификатор;
					ЭлементМетаданных(Спр,Имя,ТекРег1,0);
					ЗаписатьТипы(Спр,Тип+"."+Вид,Длина,Точность);
				КонецЦикла;
				
				ЭлементМетаданных(Спр,"#НомерСтроки",ТекРег1,0);
				ЗаписатьТипы(Спр,"Число",5,0);


				ЭлементМетаданных(Спр,"#ТекущийДокумент",ТекРег1,0);
				ЗаписатьТипы(Спр,"Документ",0,0);

				ЭлементМетаданных(Спр,"#ЭтоПриход",ТекРег1,0);
				ЗаписатьТипы(Спр,"Число",1,0);
				
				
				ЭлементМетаданных(Спр,"Ресурсы",ТекРег,1);
				ТекРег1=Спр.ТекущийЭлемент();//"Ресурсы"
				
				Для ыы=1 по Метаданные.Регистр(ы).Ресурс() Цикл
					Мета=Метаданные.Регистр(ы).Ресурс(ыы);
					Тип=Мета.Тип;
					Вид=Мета.Вид;
					Длина=Мета.Длина;
					Точность=Мета.Точность;
					Имя=Мета.Идентификатор;
					ЭлементМетаданных(Спр,Имя,ТекРег1,0);
					ЗаписатьТипы(Спр,Тип+"."+Вид,Длина,Точность);
				КонецЦикла;
				
				ЭлементМетаданных(Спр,"Реквизиты",ТекРег,1);
				ТекРег1=Спр.ТекущийЭлемент();//"Ресурсы"
				
				Для ыы=1 по Метаданные.Регистр(ы).Реквизит() Цикл
					Мета=Метаданные.Регистр(ы).Реквизит(ыы);
					Тип=Мета.Тип;
					Вид=Мета.Вид;
					Длина=Мета.Длина;
					Точность=Мета.Точность;
					Имя=Мета.Идентификатор;
					ЭлементМетаданных(Спр,Имя,ТекРег1,0);
					ЗаписатьТипы(Спр,Тип+"."+Вид,Длина,Точность);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;//М1
	
	
	Для М1=1 По 1 Цикл
		//Перечисления
		Спр=СоздатьОбъект("Справочник."+Вид());
		Если ЭлементМетаданных(Спр,"Перечисления","",1)=0 Тогда
			Продолжить;
		КонецЕсли;
		РодительСпр1=Спр.ТекущийЭлемент();	
		
		Для А=1 по Метаданные.Перечисление() Цикл
			Имя=Метаданные.Перечисление(А).Идентификатор;
			Если ЭлементМетаданных(Спр,Имя,РодительСпр1,1)=0 Тогда
				Продолжить;
			КонецЕсли;
			
			РодительСпр2=Спр.ТекущийЭлемент();	//вид перечисления
			
			Для АА=1 по Метаданные.Перечисление(А).Значение() Цикл
				Имя=Метаданные.Перечисление(А).Значение(АА).Идентификатор;
				ЭлементМетаданных(Спр,Имя,РодительСпр2,0);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;//М1
	
	
	Для М1=1 По 1 Цикл
		//	Константы
		Спр=СоздатьОбъект("Справочник."+Вид());
		Если ЭлементМетаданных(Спр,"Константы","",1)=0 Тогда
			Продолжить;
		КонецЕсли;
		РодительСпр=Спр.ТекущийЭлемент();	
		
		Для А=1 по Метаданные.Константа() Цикл
			Имя=Метаданные.Константа(А).Идентификатор;
			Периодический=Число(Метаданные.Константа(А).Периодический);
			Если (Имя<>"IDD") и (Имя<>"УникальныйIDD") и (Имя<>"ИмяКомпьютераРепликацииМОД") Тогда
				Если ЭлементМетаданных(Спр,Имя,РодительСпр,0,Периодический)=0 Тогда
					Продолжить;
				КонецЕсли;
				Спр.НайтиПоНаименованию(Имя,1,1);
				Если Спр.Выбран()=1 Тогда
					//смотрим может изменился тип реквизита в конфигураторе
					Если Периодический=0 Тогда
						Спр.История="";
					Иначе
						Если Спр.История<>Да Тогда
							Спр.История="-";
						КонецЕсли;
					КонецЕсли;
					Спр.Записать();
				КонецЕсли;
				
				Тип=Метаданные.Константа(А).Тип;
				Вид=Метаданные.Константа(А).Вид;
				Длина=Метаданные.Константа(А).Длина;
				Точность=Метаданные.Константа(А).Точность;
				
				ЗаписатьТипы(Спр,Тип+"."+Вид,Длина,Точность);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;//М1
	
	
	Для М1=1 По 1 Цикл
		//журналы расчетов	
		Если Метаданные.ЖурналРасчетов()>0 Тогда
			Состояние("Заполнение журнала расчета");
			Спр=СоздатьОбъект("Справочник."+Вид());
			Имя="Журналы расчетов";
			Если ЭлементМетаданных(Спр,Имя,"",1,0,0)=0 Тогда
				Продолжить;
			КонецЕсли;
			РодительСпр=Спр.ТекущийЭлемент();
			Для А=1 По Метаданные.ЖурналРасчетов() Цикл
				Имя=Метаданные.ЖурналРасчетов(А).Идентификатор;
				
				Если ЭлементМетаданных(Спр,Имя,РодительСпр,1)=0 Тогда
					Продолжить;
				КонецЕсли;
				ТекСпр=Спр.ТекущийЭлемент();
				
				
				
				ЭлементМетаданных(Спр,"Документ",ТекСпр,0,0,0);
				ЗаписатьТипы(Спр,"Документ");
				
				ЭлементМетаданных(Спр,"РодительскийДокумент",ТекСпр,0,0,0);
				ЗаписатьТипы(Спр,"Документ");
				
				ЭлементМетаданных(Спр,"Объект",ТекСпр,0,0,0);
				
				ЗаписатьТипы(Спр,"Справочник");
				
				ЭлементМетаданных(Спр,"ВидРасч",ТекСпр,0,0,0);
				ЗаписатьТипы(Спр,"ВидРасчета");
				
				ЭлементМетаданных(Спр,"ДатаНачала",ТекСпр,0,0,0);
				ЗаписатьТипы(Спр,"Дата");
				
				ЭлементМетаданных(Спр,"ДатаОкончания",ТекСпр,0,0,0);
				ЗаписатьТипы(Спр,"Дата");
				
				ЭлементМетаданных(Спр,"Сторно",ТекСпр,0,0,0);
				ЗаписатьТипы(Спр,"Число",1,0);
				
				ЭлементМетаданных(Спр,"Рассчитана",ТекСпр,0,0,0);
				ЗаписатьТипы(Спр,"Число",1,0);
				
				ЭлементМетаданных(Спр,"Исправлена",ТекСпр,0,0,0);
				ЗаписатьТипы(Спр,"Число",1,0);
				
				ЭлементМетаданных(Спр,"Фиксирована",ТекСпр,0,0,0);
				ЗаписатьТипы(Спр,"Число",1,0);
				
				ЭлементМетаданных(Спр,"Перерасчет",ТекСпр,0,0,0);
				ЗаписатьТипы(Спр,"Число",1,0);
				
				ЭлементМетаданных(Спр,"#ПервичнаяЗапись",ТекСпр,0,0,0);
				ЗаписатьТипы(Спр,"Число",3,0);
				
				ЭлементМетаданных(Спр,"Результат",ТекСпр,0,0,0);
				Длина=Метаданные.ЖурналРасчетов(А).ДлинаРезультата;
				Точность=Метаданные.ЖурналРасчетов(А).ТочностьРезультата;
				ЗаписатьТипы(Спр,"Число",Длина,Точность);
				
				
				
				//
				//			ЭлементМетаданных(Спр,"#ПериодДействия.ДатаНачала",ТекСпр,0,0,0);
				//			ЗаписатьТипы(Спр,"Дата");
				//
				//			ЭлементМетаданных(Спр,"#ПериодДействия.ДатаОкончания",ТекСпр,0,0,0);
				//			ЗаписатьТипы(Спр,"Дата");
				//			
				ЭлементМетаданных(Спр,"#ПериодРегистрации",ТекСпр,0,0,0);
				ЗаписатьТипы(Спр,"Дата");
				
				//
				//			ЭлементМетаданных(Спр,"#ПериодРегистрации.ДатаОкончания",ТекСпр,0,0,0);
				//			ЗаписатьТипы(Спр,"Дата");
				
				
				
				//Реквизиты
				Для АА=1 по Метаданные.ЖурналРасчетов(А).Реквизит() Цикл
					Имя=Метаданные.ЖурналРасчетов(А).Реквизит(АА).Идентификатор;
					ЭлементМетаданных(Спр,Имя,ТекСпр,0,0,0);
					Тип=Метаданные.ЖурналРасчетов(А).Реквизит(АА).Тип;
					Вид=Метаданные.ЖурналРасчетов(А).Реквизит(АА).Вид;
					Длина=Метаданные.ЖурналРасчетов(А).Реквизит(АА).Длина;
					Точность=Метаданные.ЖурналРасчетов(А).Реквизит(АА).Точность;
					ЗаписатьТипы(Спр,Тип+"."+Вид,Длина,Точность);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;			
	КонецЦикла;//М1


	Для М1=1 По 1 Цикл
		//виды расчетов	
		Если Метаданные.ВидРасчета()>0 Тогда
			Состояние("Заполнение видов расчета");
			Спр=СоздатьОбъект("Справочник."+Вид());
			Имя="Виды расчетов";
			Если ЭлементМетаданных(Спр,Имя,"",1,0,0)=0 Тогда
				Продолжить;
			КонецЕсли;
			РодительСпр=Спр.ТекущийЭлемент();
			Для А=1 По Метаданные.ВидРасчета() Цикл
				Имя=Метаданные.ВидРасчета(А).Идентификатор;
				
				Если ЭлементМетаданных(Спр,Имя,РодительСпр,0)=0 Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;//М1
	
	Для М1=1 По 1 Цикл
		//Календари
		Если Метаданные.Календарь()>0 Тогда
			Состояние("Заполнение видов расчета");
			Спр=СоздатьОбъект("Справочник."+Вид());
			Имя="Календари";
			Если ЭлементМетаданных(Спр,Имя,"",1,0,0)=0 Тогда
				Продолжить;
			КонецЕсли;
			РодительСпр=Спр.ТекущийЭлемент();
			Для А=1 По Метаданные.Календарь() Цикл
				Имя=Метаданные.Календарь(А).Идентификатор;
				
				Если ЭлементМетаданных(Спр,Имя,РодительСпр,0)=0 Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;//М1
	
				
	//удаление лишних элементов	
	Если Удалять=1 Тогда
		Спр=СоздатьОбъект("Справочник."+Вид());
		Спр.ИспользоватьВладельца(Параметр);
		Спр.ВыбратьЭлементы(1);
		Состояние("Удаление...");
		Пока Спр.ПолучитьЭлемент(1)=1 Цикл
			Если Спр.ПометкаУдаления()=1 Тогда
				Спр.Удалить(1);
				КолТранзакции=КолТранзакции+1;
				Если КолТранзакции%500=0 Тогда
					Состояние("Обработано элементов "+КолТранзакции+" запись...");
					ЗафиксироватьТранзакцию();
					Состояние("Обработано элементов "+КолТранзакции+" продолжение...");
					НачатьТранзакцию();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЗафиксироватьТранзакцию();
	Прогрессор(0);//************ прогрессор
КонецПроцедуры


//_____________________________________________________________________________

Процедура КонтрольКолонок(Спр)
	Форма.Синоним.Видимость(1);
	Форма.Пример.Видимость(0);
	Форма.Перечисление.Видимость(0);
	//	Форма.ПризнакВыгрузки.Видимость(0);
	Форма.Движения.Видимость(0);
	Форма.Условие.Видимость(0);
	Форма.Значение.Видимость(0);
	Форма.ВклУсловие.Видимость(0);
	Форма.ВклЗначение.Видимость(0);
	Форма.История.Видимость(0);
	
	Если Спр.Уровень()=1 Тогда
		Если Спр.Наименование="Документы" Тогда
			Форма.Движения.Видимость(1);
			Форма.Синоним.Видимость(1);
		ИначеЕсли Спр.Наименование="Справочники" Тогда
			Форма.Перечисление.Видимость(1);
			Форма.Синоним.Видимость(1);
		ИначеЕсли Спр.Наименование="Константы" Тогда
			Форма.Синоним.Видимость(1);
			Форма.Условие.Видимость(1);
			Форма.Значение.Видимость(1);
			Форма.ВклУсловие.Видимость(1);
			Форма.ВклЗначение.Видимость(1);
			Форма.История.Видимость(1);
		ИначеЕсли Спр.Наименование="Планы счетов" Тогда
	//		Форма.Синоним.Видимость(1);
		ИначеЕсли Спр.Наименование="Журналы расчетов" Тогда
			Форма.Синоним.Видимость(1);
		КонецЕсли;
	ИначеЕсли Спр.Уровень()=2 Тогда
		Если Спр.Родитель.Наименование="Документы" Тогда
		ИначеЕсли Спр.Родитель.Наименование="Справочники" Тогда
			Форма.Пример.Видимость(1);
			Форма.Синоним.Видимость(1);
			Форма.Условие.Видимость(1);
			Форма.Значение.Видимость(1);
			Форма.ВклУсловие.Видимость(1);
			Форма.ВклЗначение.Видимость(1);
			Форма.История.Видимость(1);
		ИначеЕсли Спр.Родитель.Наименование="Журналы расчетов" Тогда
			Форма.Синоним.Видимость(1);
			Форма.Условие.Видимость(1);
			Форма.Значение.Видимость(1);
			Форма.ВклУсловие.Видимость(1);
			Форма.ВклЗначение.Видимость(1);
		ИначеЕсли Спр.Родитель.Наименование="Операции" Тогда
			Форма.Синоним.Видимость(1);
			Форма.Синоним.Видимость(1);
			Форма.Условие.Видимость(1);
			Форма.Значение.Видимость(1);
			Форма.ВклУсловие.Видимость(1);
			Форма.ВклЗначение.Видимость(1);
		ИначеЕсли Спр.Родитель.Наименование="Планы счетов" Тогда
			Форма.Синоним.Видимость(1);
		КонецЕсли;
	ИначеЕсли Спр.Уровень()=3 Тогда
		Если Спр.Родитель.Родитель.Наименование="Документы" Тогда
			Форма.Пример.Видимость(1);
			Форма.Синоним.Видимость(1);
			Форма.Условие.Видимость(1);
			Форма.Значение.Видимость(1);
			Форма.ВклУсловие.Видимость(1);
			Форма.ВклЗначение.Видимость(1);
		ИначеЕсли Спр.Родитель.Родитель.Наименование="Регистры" Тогда
			Форма.Синоним.Видимость(1);
			Форма.Синоним.Видимость(1);
			Форма.Условие.Видимость(1);
			Форма.Значение.Видимость(1);
			Форма.ВклУсловие.Видимость(1);
			Форма.ВклЗначение.Видимость(1);
		ИначеЕсли Спр.Родитель.Родитель.Наименование="Планы счетов" Тогда
			Форма.Синоним.Видимость(1);
			Форма.Условие.Видимость(1);
			Форма.Значение.Видимость(1);
			Форма.ВклУсловие.Видимость(1);
			Форма.ВклЗначение.Видимость(1);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//_____________________________________________________________________________
Процедура ПриВыбореРодителя(Спр)
	НовыйРодитель=Спр;
	КонтрольКолонок(Спр);
	ЗаполнитьМасДоступа();
	ВидимостьКнВыгрузитьПример=0;
	Если МасДоступа[1]="Документы" Тогда
	    Если Спр.Уровень()=3 Тогда
			ВидимостьКнВыгрузитьПример=1;
	    КонецЕсли;
	ИначеЕсли МасДоступа[1]="Справочники" Тогда
	    Если Спр.Уровень()=2 Тогда
			ВидимостьКнВыгрузитьПример=1;
	    КонецЕсли;
	КонецЕсли;
     Форма.КнВыгрузитьПример.Видимость(ВидимостьКнВыгрузитьПример);
КонецПроцедуры
//_____________________________________________________________________________
Процедура ПриОткрытии()
	//Сортировка("Код");
	Форма.КнНазад.Доступность(0);
	Форма.КнВыгрузитьПример.Видимость(0);
	РедактироватьВДиалоге(0,1);
	КонтрольКолонок(ТекущийЭлемент());
	Параметр=Форма.Параметр;
	Если ТипЗначения(Параметр)=11 Тогда
		Если Параметр.ВЫбран()=1 Тогда
			ИспользоватьВладельца(Параметр,0); 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//_____________________________________________________________________________
Процедура Копировать(Источник="",РодительПриемника="",Транзакция=1)
	глВыгрБазаМОДВыгр="";
	Если Транзакция=1 Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Если Источник="" Тогда
		Источник=ТекущийЭлемент();
	КонецЕсли;
	Если РодительПриемника="" Тогда
		РодительПриемника=ТекущийЭлемент().Родитель;
	КонецЕсли;
	
	Спр=СоздатьОбъект("Справочник."+Вид());
	Спр.ИспользоватьВладельца(Параметр);
	
	СпрИсточник=СоздатьОбъект("Справочник."+Источник.Вид());
	СпрИсточник.ИспользоватьВладельца(Источник.Владелец);
	
	Если Источник.ЭтоГруппа()=1 Тогда
		глСоздатьНовуюГруппу(Спр);
	Иначе
		глСоздатьНовыйОбъект(Спр);
	КонецЕсли;         
	
	Спр.Родитель=РодительПриемника;
	Спр.Код=Источник.Код;
	Спр.Наименование=Источник.Наименование;
	
	//------------------------- вставим кусок копирования из формы периф. баз
	Для ы=1 по Метаданные.Справочник(Вид()).Реквизит() Цикл
		Атрибут=Сокрлп(Метаданные.Справочник(Вид()).Реквизит(ы));
		Попытка
			Реквизит=Источник.ПолучитьАтрибут(Атрибут);
		Исключение
			Если Атрибут="ПризнакЗагрузки" Тогда
				Реквизит=Источник.ПризнакВыгрузки;
			ИначеЕсли Атрибут="ПризнакВыгрузки" Тогда
				Реквизит=Источник.ПризнакЗагрузки;
			Иначе
				Реквизит="";
			КонецЕсли;
		КонецПопытки;
		Если (Атрибут="Условие")ИЛИ(Атрибут="Значение") Тогда
			Тип=ТипЗначения(Реквизит);
			СтрТип=ТипЗначенияСтр(Реквизит);
			Точность=0;
			Длина=0;
			Если (Тип>9)И(Тип<13) Тогда   //перечисление, справочник, документ
				СтрТип=СтрТип+"."+Сокрлп(Реквизит.Вид());
			ИначеЕсли Тип=1 Тогда  //число
				//определяем точность
				Пока Реквизит<>Окр(Реквизит,Точность) Цикл
					Точность=Точность+1;
				КонецЦикла;
				//определяем длину
				Длина=СтрДлина(Сокрлп(Строка(Реквизит)))+1;
			ИначеЕсли Тип=2 Тогда //строка
				//определяем длину
				Длина=СтрДлина(Сокрлп(Строка(Реквизит)))+10;
			КонецЕсли;
			Спр.НазначитьТип(Атрибут,СтрТип,Длина,Точность);
		КонецЕсли;
		Спр.УстановитьАтрибут(Атрибут,Реквизит);
	КонецЦикла;
	//-----------------------------------------------------------------------------
	
	Константа.УникальныйIDD=Число(Константа.УникальныйIDD)+1;
  	Спр.IDD=Прав("0000000"+СокрЛП(Константа.IDD),7)+прав("0000000000"+СокрЛП(Константа.УникальныйIDD),10);
	
	Спр.Записать();
	
	Если Источник.ЭтоГруппа()=1 Тогда
		СпрИсточник.ИспользоватьРодителя(Источник);
		СпрИсточник.ВключатьПодчиненные(0);
		СпрИсточник.ВыбратьЭлементы();
		Пока СпрИсточник.ПолучитьЭлемент()=1 Цикл
			Копировать(СпрИсточник.ТекущийЭлемент(),Спр.ТекущийЭлемент(),0);
		КонецЦикла;
	КонецЕсли;
	
	Если Транзакция=1 Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры//копировать

//_____________________________________________________________________________

Процедура Вставить()
	глСпр=глБуферОбменаДляМОД;
	
	Если ТипЗначения(глСпр)<>11 Тогда
		Возврат;
	КонецЕсли;  
	
	Если глСпр.Выбран()=0 Тогда
		Возврат;
	КонецЕсли;
    
	Если ПустоеЗначение(НовыйРодитель)=1 Тогда
		НовыйРодитель="";
	КонецЕсли;

	Копировать(глСпр,НовыйРодитель);
  
КонецПроцедуры

//_____________________________________________________________________________
Процедура Запомнить()
	глБуферОбменаДляМОД=ТекущийЭлемент();
КонецПроцедуры
//_____________________________________________________________________________ 

Процедура ВсеСтрокиБазы()
	Список=СоздатьОбъект("СписокЗначений");
	Список.ДобавитьЗначение("ВсеСтрокиБазы","Команда");
	Список.ДобавитьЗначение(Параметр,"База");
	Список.ДобавитьЗначение(ТекущийЭлемент(),"Элемент");
	ОткрытьФорму("Обработка.ВсеБазы",Список)
//	ОткрытьФорму("Обработка",Список,"ВсеБазы.ert")
КонецПроцедуры //
//_____________________________________________________________________________
Процедура СтрокаУВсехБаз()
	Список=СоздатьОбъект("СписокЗначений");
	Список.ДобавитьЗначение("СтрокаУВсехБаз","Команда");
	Список.ДобавитьЗначение(ТекущийЭлемент(),"Элемент");
	ОткрытьФорму("Обработка.ВсеБазы",Список)
КонецПроцедуры //

//_____________________________________________________________________________
Процедура УдалитьСтроки()
	НачатьТранзакцию();
	Спр=СоздатьОбъект("Справочник."+Вид());
	Спр.ИспользоватьВладельца(Параметр);
	Если ПустоеЗначение(НовыйРодитель)=0 Тогда
		Спр.ИспользоватьРодителя(НовыйРодитель);//удаляем толко в пределах подчинения	
	КонецЕсли;
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()=1 Цикл
		    Признак=Спр.ПризнакВыгрузки;
//		    Признак=Спр.ПризнакЗагрузки;
	    Если Признак<>Да Тогда
	        Спр.Удалить(1);
	    КонецЕсли;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
КонецПроцедуры //УдалитьСтроки


//_____________________________________________________________________________
Процедура ГрупповоеРедактирование()
	Список=СоздатьОбъект("СписокЗначений");	
	Список.ДобавитьЗначение(1,"Строка во всех объектах");
	Список.ДобавитьЗначение(2,"Строка во всех базах");
	Список.ДобавитьЗначение(3,"Удалить неиспользуемые объекты");
	Выбр=0;
	Если Список.ВыбратьЗначение(Выбр,"Просмотреть ...",,,1)=1 Тогда
		Если Выбр=1 Тогда
			ВсеСтрокиБазы();
		ИначеЕсли Выбр=2 Тогда
			СтрокаУВсехБаз();
		ИначеЕсли Выбр=3 Тогда
			УдалитьСтроки();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ГрупповоеРедактирование
//_____________________________________________________________________________
Функция ВыбратьФайл(ТипДЗакрыть)
Перем Каталог,Файл;
Файл="header.mod";
Каталог=Владелец.ПутьКБазеПриВыгрузке;
Рез=ФС.ВыбратьФайл(ТипДЗакрыть,Файл,Каталог,"Выберите файл шаблона","Менеджер обмена данными(*.mod)|*.mod","*.mod");
Если Рез=1 Тогда
ФайлШапки=Каталог+Файл;
КонецЕсли;
Возврат Рез;
КонецФункции //ВыбратьФайлШаблона
//_____________________________________________________________________________

Процедура ВыгрузитьШапку()
Если Владелец.Выбран()=1 Тогда
Если ВыбратьФайл(1)=1 Тогда
Спис=СоздатьОбъект("СписокЗначений");
Спис.ДобавитьЗначение("Выгрузка шапки","Команда");
Спис.ДобавитьЗначение(Владелец,"База");
Спис.ДобавитьЗначение(ФайлШапки,"ФайлШапки");
ОткрытьФорму("Отчет.ОбменДанными"+"#",Спис);
КонецЕсли;
КонецЕсли;
КонецПроцедуры //ВыгрузитьШапку

//_____________________________________________________________________________

//_____________________________________________________________________________
//изменить порядок загрузки (выгрузки) реквизита 
//т.е. на один реквизит позже или раньше
Процедура ПорядокОбмена(Направление)   //+1 сдвинуть вниз, -1 сдвинуть вверх на один элемент
Если Выбран()=1 Тогда
Спр=СоздатьОбъект("Справочник."+Вид());    
Спр.ИспользоватьВладельца(Параметр);
Спр.ИспользоватьРодителя(Родитель);
Спр.ПорядокКодов();
Спр.ВыбратьЭлементы();
СписокСпр=СоздатьОбъект("СписокЗначений");
НомерПозиции=0;
Пока Спр.ПолучитьЭлемент(0)=1 Цикл
	СписокСпр.ДобавитьЗначение(Спр.ТекущийЭлемент());
    Если Спр.ТекущийЭлемент()=ТекущийЭлемент() Тогда
			НомерПозиции=СписокСпр.РазмерСписка();
    КонецЕсли;
КонецЦикла;

Размер=СписокСпр.РазмерСписка();
Если Направление=1 Тогда
Если Размер<>НомерПозиции Тогда
СписокСпр.СдвинутьЗначение(1,НомерПозиции); //сдвигаем вниз на единицу
Иначе
СписокСпр.СдвинутьЗначение(1-НомерПозиции,НомерПозиции); //сдвигаем на самое первое место !!
КонецЕсли;
Иначе
Если 1<>НомерПозиции Тогда
СписокСпр.СдвинутьЗначение(-1,НомерПозиции); //сдвигаем вверх на единицу
Иначе      
СписокСпр.ДобавитьЗначение(СписокСпр.ПолучитьЗначение(1));
Размер=Размер+1;
КонецЕсли;
КонецЕсли;
	

НачатьТранзакцию();
Для А=1 По Размер Цикл
Элем=СписокСпр.ПолучитьЗначение(А);
Если Элем.Код<>А Тогда
    Спр.НайтиЭлемент(Элем);
	Спр.Код=А;
	Спр.Записать();
КонецЕсли;
КонецЦикла;
ЗафиксироватьТранзакцию();
глВыгрБазаМОДВыгр="";
КонецЕсли;	
Сортировка("Код");
КонецПроцедуры 

//_____________________________________________________________________________
Функция ПолучитьКомментарий()
	Тип=ТипЗначения(Значение);
	Если (Тип>9)И(Тип<13) Тогда
		Вид=Значение.Вид();
		Возврат  ТипЗначенияСтр(Значение)+?(Вид="","","."+Вид);
	Иначе
		Возврат ТипЗначенияСтр(Значение);
	КонецЕсли;
КонецФункции //ПолучитьКомментарий

////_____________________________________________________________________________
//Функция ПолучитьВыбОбъект(Спр)
//ТекРодитель=Спр.Родитель;
//Если Спр.Родитель.Выбран()=0 Тогда
//    Возврат "";
//КонецЕсли;
//КонецФункции //ПолучитьВыбОбъект
//_____________________________________________________________________________
Процедура ДобавитьОбъект()
	Если Выбран()=1 Тогда
//		ЗаполнитьМасДоступа();
		Если МасДоступа[2]<>"" Тогда
			Если МасДоступа[1]="Документы" Тогда
				Док=СоздатьОбъект("Документ."+МасДоступа[2]);
				Рез=Док.Выбрать("Выберите документ для примера выгрузки","");
				Если Рез=1 Тогда
					ВыбОбъект=Док.ТекущийДокумент();
					СписВыбОбъектов.ВставитьЗначение(1,ВыбОбъект,МасДоступа[1]+"/"+МасДоступа[2]);
				КонецЕсли;
			ИначеЕсли МасДоступа[1]="Справочники" Тогда
				Спр=СоздатьОбъект("Справочник."+МасДоступа[2]);
				Спр.ВыборГруппы(1);
				Рез=Спр.Выбрать("Выберите элемент для примера выгрузки","");
				Если Рез=1 Тогда
					ВыбОбъект=Спр.ТекущийЭлемент();
					СписВыбОбъектов.ВставитьЗначение(1,ВыбОбъект,Родитель.ПолноеНаименование());
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //НастройкаПо


//_____________________________________________________________________________
Функция ФильтрВыгрузки(Атрибут,Спр)
	Если Спр.ВклУсловие=Да Тогда
		МУсловие=Спр.Условие;
		Если ТипЗначенияСтр(МУсловие)="Число" Тогда
			Атрибут=Число(Атрибут);
		ИначеЕсли ТипЗначенияСтр(МУсловие)="Строка" Тогда
			Атрибут=Сокрлп(Строка(Атрибут));
			МУсловие=Сокрлп(МУсловие);
		ИначеЕсли ТипЗначенияСтр(МУсловие)="Дата" Тогда
			Атрибут=Дата(Атрибут);
		ИначеЕсли ТипЗначения(МУсловие)=0 Тогда
			МУсловие=Число(МУсловие);
		КонецЕсли;
		
		Если Атрибут<>МУсловие Тогда
			Возврат 0;// не загружаем !!!!
		КонецЕсли;
	КонецЕсли;
	
	//********* значения
	Если Спр.ВклЗначение=Да Тогда
		Атрибут=Спр.Значение;
	КонецЕсли;
	Возврат 1;
КонецФункции //ФильтрВыгрузки


//_____________________________________________________________________________
Функция ПолучитьЗначениеВыгрузки(ТекЭлемент="")
	Если ТекЭлемент="" Тогда
	    ТекЭлемент=ТекущийЭлемент();
	КонецЕсли;
	ВыбОбъект=СписВыбОбъектов.Получить(МасДоступа[1]+"/"+МасДоступа[2]);
	Тип=ТипЗначения(ВыбОбъект);
	Если ТекЭлемент.ЭтоГруппа()=0 Тогда
	Если МасПризнаков[1]<>Да Тогда
	    Возврат "-тип объекта не выгружается-";
	ИначеЕсли МасПризнаков[2]<>Да Тогда
	    Возврат "-вид объекта не выгружается-";
	КонецЕсли;
	Если (Тип=11)ИЛИ(Тип=12) Тогда //справочник или документ
		Если (Тип=12) Тогда //документ
		Если МасПризнаков[3]<>Да Тогда
	    	Возврат "-такие типы реквизитов не выгружаются-";
		КонецЕсли;
		Док=СоздатьОбъект("Документ."+МасДоступа[2]);
		Док.НайтиДокумент(ВыбОбъект);
		Док.ВыбратьСтроки();
		Док.ПолучитьСтроку();
		Спр=Док;
		Иначе
		Спр=СоздатьОбъект("Справочник."+МасДоступа[2]);
		Спр.НайтиЭлемент(ВыбОбъект);
		Спр.ИспользоватьДату(РабочаяДата());
		Док=Спр;
		КонецЕсли;
		Если ТекЭлемент.ПризнакВыгрузки=Да Тогда
				Реквизит=ТекЭлемент.Наименование;
				Ком=Лев(Реквизит,1);
				Атрибут="";
				Если Ком="#" Тогда
					Атрибут=0;
					Если Реквизит="#ЭтоГруппа" Тогда
						Атрибут=Спр.ЭтоГруппа();
					ИначеЕсли Реквизит="#ПомеченНаУдаление" Тогда
						Атрибут=Спр.ПометкаУдаления()
					ИначеЕсли Реквизит="#ДатаДок" Тогда
						Атрибут=Док.ДатаДок;
					ИначеЕсли Реквизит="#ВремяДокумента" Тогда
						Атрибут=Док.ПолучитьВремя();
					ИначеЕсли Реквизит="#Проведен" Тогда
						Атрибут=Док.Проведен();
					ИначеЕсли Реквизит="#ВыгрузитьПоКоличествуСтрок" Тогда
						Атрибут="Выгрузка документа "+Док.КоличествоСтрок()+" раз(а)";
					ИначеЕсли Реквизит="#Выгружать" Тогда
						Атрибут="Обязательная выгрузка 1-й строки табличной части";
					КонецЕсли;
				ИначеЕсли Ком="@" Тогда
					Попытка
					Если Сред(Реквизит,2,4)="IDD=" Тогда
					Стр=Сред(Реквизит,6);
					//Обычное задание выражения
					Шаблон("[Получить("+Стр+")]");
					Атрибут="IDD="+глВыражение;
					Иначе
					Стр=Сред(Реквизит,2);
					//Обычное задание выражения
					Шаблон("[Получить("+Стр+")]");
					Атрибут=глВыражение;
					КонецЕсли;
					Исключение
					Атрибут="<Ошибка в выражении!>";	
					КонецПопытки;
					
				Иначе
					Атрибут=Спр.ПолучитьАтрибут(Реквизит);	
				КонецЕсли;
					Если ФильтрВыгрузки(Атрибут,ТекЭлемент)=0 Тогда
				    Возврат "Выгрузки отменена!";
					КонецЕсли;
				    Возврат Атрибут;
		КонецЕсли;
	КонецЕсли;    
	КонецЕсли;
	Возврат "  ";
КонецФункции //ПолучитьЗначениеВыгрузки

//_____________________________________________________________________________
Процедура ЗаполнитьМасДоступа(НовРодитель="")
	//*********************************************************************************
	//подготавливаем вспомогательный массив прямого доступа к объекту метаданных
	Для А=1 По 10 Цикл
		МасДоступа[А]="";
	КонецЦикла;
	
	Если ПустоеЗначение(НовРодитель)=1 Тогда
		НовРодитель=НовыйРодитель;
	КонецЕсли;
	Если ПустоеЗначение(НовРодитель)=1 Тогда
		Возврат;
	КонецЕсли;
	А=НовРодитель.Уровень();
	ТекРодитель=НовРодитель;
	Пока А>=1 Цикл
		МасДоступа[А]=ТекРодитель.Наименование;
		МасПризнаков[А]=ТекРодитель.ПризнакВыгрузки;
		ТекРодитель=ТекРодитель.Родитель;
		А=А-1;
	КонецЦикла;
	//*********************************************************************************
КонецПроцедуры 


//_____________________________________________________________________________
Процедура ВыбратьПримерВыгрузки()
	Если Выбран()=1 Тогда
	Список=СоздатьОбъект("СписокЗначений");	
	Список.ДобавитьЗначение("Новый пример");
	Список.ДобавитьЗначение("Очистить все");
	Список.ДобавитьЗначение("------------------------");
	
//	ЗаполнитьМасДоступа();
	КолПримеров=0;
	Для А=1 По СписВыбОбъектов.РазмерСписка() Цикл
	Стр="";
	ВыбОбъект=СписВыбОбъектов.ПолучитьЗначение(А,Стр);
	Если МасДоступа[1]+"/"+МасДоступа[2]=Стр Тогда
		КолПримеров=КолПримеров+1;
	    Список.ДобавитьЗначение(А,Строка(ВыбОбъект));
	КонецЕсли;
	КонецЦикла;
	
	Если КолПримеров=0 Тогда
	    //первый ввод примера
		ДобавитьОбъект();
	    Форма.Обновить();
		Возврат;
	КонецЕсли;
	
	
	Выбр=0;
	Если Список.ВыбратьЗначение(Выбр,"",,,1)=1 Тогда
		Если 	  Выбр="Новый пример" Тогда
			ДобавитьОбъект();
		ИначеЕсли Выбр="Очистить все" Тогда
			СписВыбОбъектов=СоздатьОбъект("СписокЗначений");
		ИначеЕсли Число(Выбр)>0 Тогда //передвигаем в списке объектов элемент примера на самое первое место
			СписВыбОбъектов.СдвинутьЗначение(1-Выбр,Выбр);
		КонецЕсли;
	КонецЕсли;
	КонецЕсли;
    Форма.Обновить();
КонецПроцедуры //ВыбратьПримерВыгрузки




//_____________________________________________________________________________
//Выгрузить пример 
Процедура ВыгрузитьПример()
	ВыбОбъект=СписВыбОбъектов.Получить(МасДоступа[1]+"/"+МасДоступа[2]);
	Тип=ТипЗначения(ВыбОбъект);
	Если (Тип=11)ИЛИ(Тип=12) Тогда
		//создаем правила выгрузки и выборочно выгружаем этот объект
		ВыгрВиды=СоздатьОбъект("СписокЗначений");
		Список=СоздатьОбъект("СписокЗначений");
		Список.ДобавитьЗначение(ВыбОбъект);
		Спр=СоздатьОбъект("Справочник."+Вид());
		Спр.ИспользоватьВладельца(Параметр);
		Если Тип=12 Тогда
		Спр.ИспользоватьРодителя(Родитель.Родитель);
		Иначе
		Спр.ИспользоватьРодителя(Родитель);
		КонецЕсли;
		Спр.ВыбратьЭлементы();
		Пока Спр.ПолучитьЭлемент()=1 Цикл
			Атрибут=ПолучитьЗначениеВыгрузки(Спр.ТекущийЭлемент());
			Тип=ТипЗначения(Атрибут);
			Если (Тип=11)Или(Тип=12) Тогда
				Список.ДобавитьЗначение(Атрибут);
				ВыгрВиды.ДобавитьЗначение(Сокрлп(Атрибут.Вид()));
			КонецЕсли;
		КонецЦикла;
		ВыгрВиды.ДобавитьЗначение(Сокрлп(ВыбОбъект.Вид()));
		
		Спис=СоздатьОбъект("СписокЗначений");
		Спис.ДобавитьЗначение("Список выгрузки","Команда");
		Спис.ДобавитьЗначение(Параметр,"База");
		Спис.ДобавитьЗначение(Список,"Список");//признак выгрузки объектов из заданного списка
		Спис.ДобавитьЗначение(1,"Пример");//признак выгрузки в файл с именем sample.mod
		
		
		//Отменяем выгрузку у ненужных объектов
		НачатьТранЗакцию();
		Спр1=СоздатьОбъект("Справочник."+Вид());
		Спр1.ИспользоватьВладельца(Параметр);
		Спр1.ПорядокКодов();
		Спр1.ВыбратьЭлементы();
		Пока Спр1.ПолучитьЭлемент(0)=1 Цикл //выбираем верхний уровень т.е. Документы,Справочники ...
			Имя=Спр1.Наименование;
			Если (Имя="Справочники")ИЛИ(Имя="Документы") Тогда
				Спр2=СоздатьОбъект("Справочник."+Вид());
				Спр2.ИспользоватьВладельца(Параметр);
				Спр2.ИспользоватьРодителя(Спр1.ТекущийЭлемент());
				Спр2.ПорядокКодов();
				Спр2.ВыбратьЭлементы();
				Пока Спр2.ПолучитьЭлемент(0)=1 Цикл //выбираем уровень видов
					ИмяВида=Сокрлп(Спр2.Наименование);
					Если ВыгрВиды.НайтиЗначение(ИмяВида)=0 Тогда
						Спр2.ПризнакВыгрузки="";
						Спр2.Записать();
					КонецЕсли;
				КонецЦикла;
			Иначе
				Спр1.ПризнакВыгрузки="";
				Спр1.Записать();
			КонецЕсли;
		КонецЦикла;
		
		
		
		глВыгрБазаМОДВыгр="";
		ОткрытьФорму("Отчет.ОбменДанными#",Спис);
		ОтменитьТранзакцию();
		глВыгрБазаМОДВыгр="";
	Иначе
		Если МасДоступа[1]="Документы" Тогда
		    Стр="документ";
		Иначе
		    Стр="справочник";
		КонецЕсли;
		Предупреждение("Установите какой-нибудь "+Стр+" в качестве примера для выгрузки.
		|(Для этого щелкните мышкой на колонке ""Пример выгрузки"")",10);
	КонецЕсли;
КонецПроцедуры //ВыгрузитьПример
//_____________________________________________________________________________




//_____________________________________________________________________________
Процедура Вперед()
	Если Выбран()=1 Тогда
		Тип=ТипЗначения(Значение);
		Спр=СоздатьОбъект("Справочник."+Вид());
		Если Тип=11 Тогда //справочник 
			Имя="Справочники";
		ИначеЕсли Тип=12 Тогда //Документ
			Имя="Документы";
		Иначе
			ПодсказкаПользователю(
			"Данная кнопка предназначена для того,
			|чтобы можно было перейти к настройке
			|правил выгрузки объекта, вид которого 
			|совпадает с видом текущего реквизита
			|и имеет тип документа или справочника.", //первое сообщение
			"Текущий реквизит не имеет тип 
			|документа или справочника",//последующие сообщения
			10);
			Возврат;
		КонецЕсли;	
		
		Спр.ИспользоватьВладельца(Параметр);
		Рез=Спр.НайтиПоНаименованию(Имя,1,1);
		Если Рез=1 Тогда
			 Имя=Сокрлп(Значение.Вид());
			 Если ПустоеЗначение(Имя)=0 Тогда
				Спр2=СоздатьОбъект("Справочник."+Вид());
				Спр2.ИспользоватьВладельца(Параметр);
				Спр2.ИспользоватьРодителя(Спр.ТекущийЭлемент());
				Рез=Спр2.НайтиПоНаименованию(Имя,1,1);
				Если Рез=1 Тогда
				     Спр=Спр2;
				КонецЕсли;
			 КонецЕсли;
			 СписокИстории.ДобавитьЗначение(ТекущийЭлемент());
			 Форма.КнНазад.Доступность(1);
			 АктивизироватьОбъект(Спр.ТекущийЭлемент());
			 ПриВыбореРодителя(Спр.Родитель);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //Вперед

	


//_____________________________________________________________________________
Процедура Назад()
	Кол=СписокИстории.РазмерСписка();
	Если Кол>0 Тогда
		ТекЭлемент=СписокИстории.ПолучитьЗначение(Кол);
		СписокИстории.УдалитьЗначение(Кол);
		АктивизироватьОбъект(ТекЭлемент);
		ПриВыбореРодителя(ТекЭлемент.Родитель);
		Если Кол=1 Тогда
			Форма.КнНазад.Доступность(0);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //Назад










//************************************************************************************
//Функции, которые вызываются при интерпретации выражений
//************************************************************************************
//_____________________________________________________________________________
//Назначение: Присвоить глобальной переменной (в рамках обработки) переданной значение
//Возвращает пустую строку
Функция Получить(Выражение) 
глВыражение=Выражение;
Возврат "";    
КонецФункции //Получить


//_____________________________________________________________________________
//Назначение:
//вернуть заданный реквизит их заданонго номера строки документа. 
//Часто применяется при конвертации табличной части документа в шапочную.
Функция ПолучитьРеквизитИзСтрокиДокумента(Докум,НомерСтроки,Реквизит)
	Док = СоздатьОбъект("Документ");
	Док.НайтиДокумент(Докум.ТекущийДокумент());
	Если Док.Выбран() > 0 Тогда
		Если Док.ПолучитьСтрокуПоНомеру(НомерСтроки) = 1 Тогда
			Рез = Док.ПолучитьАтрибут(Реквизит);
			Возврат Рез;
		Иначе
			Возврат "";
		КонецЕсли;	
	Иначе
		Возврат "";
	КонецЕсли;	
КонецФункции	

//_____________________________________________________________________________
//Назначение:
//найти элемент справочника заданного вида по заданному имени
Функция НайтиСпр(Вид,Имя,Режим=0,Владелец=0,Родитель=0,Создавать=0)
	Перем Спр;
	Спр=СоздатьОбъект("Справочник."+Вид);
	Если Владелец<>0 Тогда
		Спр.ИспользоватьВладельца(Владелец);
	КонецЕсли;
	Рез=Спр.НайтиПоНаименованию(Имя,Режим,1);
	Если Рез=1 Тогда 
		Возврат Спр.ТекущийЭлемент();
	Иначе
		Если Создавать=1 Тогда
			Подчиненность=0;
			глСоздатьНовыйОбъект(Спр);
			Если Владелец<>0 Тогда
				Спр.Владелец=Владелец;
				Подчиненность=1;
			КонецЕсли;
			Если Родитель<>0 Тогда
				Спр.Родитель=Родитель;
			КонецЕсли;
			Спр.Наименование=Имя;
			Спр.Записать();
			Сообщить("Создан новый справочник "+Вид+"  "+Имя+",  "+Спр.Код);
			Возврат Спр.ТекущийЭлемент();
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;
КонецФункции

//_____________________________________________________________________________
//Назначение:
//Найти справочник заданного вида по ИД коду
Функция НайтиСпрПоИД(Вид,Спр_ИД)
	Перем Спр;
	Спр=СоздатьОбъект("Справочник."+Вид);
	Если Спр.НайтиПоРеквизиту("IDD",Спр_ИД,1)=1 Тогда
			Возврат Спр.ТекущийЭлемент();
	КонецЕсли;
	Возврат "";
КонецФункции

//_____________________________________________________________________________
//Назначение:
//Найти справочник заданного вида по ИД коду
Функция СпрПоИД(Вид,Спр_ИД)
	Возврат НайтиСпрПоИД(Вид,Спр_ИД);
КонецФункции


//_____________________________________________________________________________
//Назначение:
//найти справочник заданного вида, у которого реквизит с именем Реквизит имеет значение 
//Значение. Если задан владелец, то поиск производится внутри подчинения. 
//Если задана дата, то для периодических реквизитов значение ищется на дату ДатаЗначения 
Функция СпрПоРекв(Вид,Реквизит,Значение,Владелец=0,ДатаЗначения=0)
	Перем Спр;
	Спр=СоздатьОбъект("Справочник."+Вид);
	Если Владелец<>0 Тогда
		Попытка
		Спр.ИспользоватьВладельца(Владелец.ТекущийЭлемент());
		Исключение
		Спр.ИспользоватьВладельца(Владелец);
		КонецПопытки;
	КонецЕсли;
	Если ДатаЗначения=0 Тогда
	    Спр.ИспользоватьДату(РабочаяДата());
	Иначе
	    Спр.ИспользоватьДату(ДатаЗначения);
	КонецЕсли;
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()=1 Цикл
	    Если Спр.ПолучитьАтрибут(Реквизит)=Значение Тогда
	        Возврат Спр.ТекущийЭлемент();
	    КонецЕсли;
	КонецЦикла;
	Возврат "";
КонецФункции 


//_____________________________________________________________________________
//Назначение:
//присвоить переменной А, передаваемое по ссылке значение переменной Б,
//передаваемое по значению.
Функция Присвоить(А,Знач Б)
	А=Б;
	Возврат "";
КонецФункции

//_____________________________________________________________________________
//Назначение:
//поменять местами значения переменных
Функция Поменять(А,Б)
    Перем С;
	С=А;А=Б;Б=С;
	Возврат "";
КонецФункции //Поменять




//_____________________________________________________________________________
//Назначение:
//Вернуть итог по колонке таблицы документа,
//передаваемое по значению: имя колонки табличной части (реквизита)
Функция Итог(Док,Реквизит)
	Таб="";
	Док.ВыгрузитьТабличнуюЧасть(Таб,Реквизит);
	Возврат Таб.Итог(Реквизит);
КонецФункции

//************************************************************************************
//************************************************************************************










//====================================================================================
//====================================================================================
//специальные процедуры для работы с пользователем в режиме подскази
Процедура ПодсказкаПользователю(ПервоеСообщение,ПоследующиеСообщения="",ВремяТаймАута=0)
	ПовторДляПользователя=ПовторДляПользователя+1;
	Стр=ПервоеСообщение; 
	Если ПовторДляПользователя>1 Тогда
		Если ПустоеЗначение(ПоследующиеСообщения)=0 Тогда
			Стр=ПоследующиеСообщения; 
		КонецЕсли;
	КонецЕсли;
	Стр=""""+СтрЗаменить(Стр,РазделительСтрок,""",""")+"""";
	Список=СоздатьОбъект("СписокЗначений");
	Список.ИзСтрокиСРазделителями(Стр);
	Список.ВставитьЗначение(1,"   ");
	Список.ДобавитьЗначение("   ");
	Список.ВыбратьЗначение("","...",,ВремяТаймАута,1);
КонецПроцедуры 


//====================================================================================
//====================================================================================




Уров=0;
ЭлементСтар="";
Да="Х";
НетНет="";
БылРодитель="";
СписВыбОбъектов=СоздатьОбъект("СписокЗначений");
СписокИстории=СоздатьОбъект("СписокЗначений");
ПовторДляПользователя=0;