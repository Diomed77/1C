Перем H_Flag;
Перем vt_Rezerve_vis;
Перем Рез_Поиска;
Перем текМестоИсп;
Перем перЛатвия, перЛитва;
Перем Расш;

Процедура семУстВидимости() Далее
//Функция РозничнаяЦенаТовара(ВыбТовар)   Далее

Функция семПолучитьТоварыПоНаименованию( пНаим )
	//возврощает список товаров отгруженных клиенту за определенное кол-во дней с текущего момента
	сп = СоздатьОбъект( "СписокЗначений" );
	Если ПустоеЗначение( пНаим ) = 1 Тогда Возврат сп; КонецЕсли;

	ODBCRecordSet = СоздатьОбъект( "ODBCRecordSet" );
	ODBCRecordSet.УстБД1С();;
	ТекстЗапроса="
	|SELECT 
	|	$Спр.Товар [Товар $Справочник.Номенклатура], 
	|	$Спр.ПоАлфавиту as Наименование
	|FROM $Справочник.Номенклатура as Спр
	|WHERE
	|	$Спр.ПоАлфавиту LIKE :Наим
	|	AND $Рег.Клиент = :Клиент
	|ORDER BY Наименование";
	ODBCRecordSet.УстановитьТекстовыйПараметр("Наим", пНаим);
	ODBCRecordSet.Отладка(0);
	табл = ODBCRecordSet.ВыполнитьИнструкцию(ТекстЗапроса);
	табл.Выгрузить(сп,,,"Товар");
	Возврат сп;
КонецФункции

Функция семПоискТовараПоКоду()
	ИерархическийСписок(,1);
	спр = СоздатьОбъект("Справочник.Номенклатура");
	спр.НайтиПоКоду( СокрЛП( ПоискКод ), 0 );
	Если спр.Выбран() = 0 Тогда
		спр.НайтиПоРеквизиту("КодДляРозницы", СокрЛП(ПоискКод),1);
	КонецЕсли;
	
	Если спр.Выбран()=1 Тогда
		АктивизироватьОбъект(спр.ТекущийЭлемент());
		Активизировать("Код",0);
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция семПоискПоНаименованию()
	спТоваров = семПолучитьТоварыПоНаименованию( ПоискКод );
	Если спТоваров.РазмерСписка() = 0 Тогда 
		Возврат 0;
//		спТоваров = семПолучитьТоварыПоКлиенту( пКлиент, пКолДней );
	Иначе                
		ИспользоватьСписокЭлементов(спТоваров);
		ИерархическийСписок(0,1);       
	КонецЕсли;
КонецФункции

Процедура семПоискТовара()
	Если семПоискТовараПоКоду() = 1 Тогда Возврат; КонецЕсли;
	Если семПоискПоНаименованию() = 1 Тогда Возврат; КонецЕсли;
	Активизировать("ПоискКод");
КонецПроцедуры

Функция семПолучитьТоварыПоКлиенту( пКлиент, пКолДней )
	//возврощает список товаров отгруженных клиенту за определенное кол-во дней с текущего момента
	сп = СоздатьОбъект( "СписокЗначений" );
	Если пКлиент.Выбран() = 0 Тогда Возврат сп; КонецЕсли;
	Если пКолДней = 0 Тогда Возврат сп; КонецЕсли;

	ODBCRecordSet = СоздатьОбъект( "ODBCRecordSet" );
	ODBCRecordSet.УстБД1С();;
	ТекстЗапроса="
	|SELECT DISTINCT 
	|	$Рег.Товар [Товар $Справочник.Номенклатура], 
	|	$Спр.ПоАлфавиту as Наименование
	|FROM $Регистр.ОборотыТоваров as Рег
	|LEFT JOIN $Справочник.Номенклатура as Спр ON Спр.ID = $Рег.Товар
	|WHERE
	|	Рег.Date_Time_IDDoc > :Нач
	|	AND $Рег.Клиент = :Клиент
	|ORDER BY Наименование";
	ODBCRecordSet.УстановитьТекстовыйПараметр("Нач", РабочаяДата() - пКолДней);
	ODBCRecordSet.УстановитьТекстовыйПараметр("Клиент", пКлиент);
	ODBCRecordSet.Отладка(0);
	табл = ODBCRecordSet.ВыполнитьИнструкцию(ТекстЗапроса);
	табл.Выгрузить(сп,,,"Товар");
	Возврат сп;
КонецФункции

Процедура семОтборТоваровПоКлиенту( пКлиент, пКолДней )
	//процедура устанавливает отбор в справочнике по товарам отгруженным клиенту за определенное кол-во дней с текущего момента
	Если пКлиент.Выбран() = 1 Тогда
		спТоваров = семПолучитьТоварыПоКлиенту( пКлиент, пКолДней );
		ИспользоватьСписокЭлементов(спТоваров);
		ИерархическийСписок(0,0);       
	Иначе                
		ТекЭлем=ТекущийЭлемент();
		ИспользоватьСписокЭлементов();
		ИерархическийСписок(1,1);       
		АктивизироватьОбъект(ТекЭлем);
		Активизировать("Код",0);
	КонецЕсли;
	семУстВидимости();
КонецПроцедуры

Процедура ПриВыбореКлиента()
	семОтборТоваровПоКлиенту( выбКлиент, 90 );
КонецПроцедуры

Функция ФорматВывода( парам )
	Если парам = "ЦенаРозн" Тогда
		Если Пользователь.ОсновнаяФирма <> Константа.ОсновнаяФирма Тогда
			// не показываем для пользователей филиалов
			Возврат "---";
		КонецЕсли;
		Если выбВалюта.Выбран() = 0 Тогда
			Цена = ЦенаТовараПоКатегорииДляТовара(ТекущийЭлемент(),Константа.РозничнаяКатегорияЦены);
		Иначе
			Цена = ЦенаТовараПоКатегорииДляТовара(ТекущийЭлемент(),Константа.РозничнаяКатегорияЦены,выбВалюта,КурсДляВалюты(выбВалюта,РабочаяДата()));
		КонецЕсли;
		Скидка = 1 - глПроцентСкидки( ТекущийЭлемент(),,Константа.РозничнаяКатегорияЦены)/100;
		НДС = 1 + ПроцентНДС(ТекущийЭлемент().СтавкаНДС)/100;
		Возврат Формат(Цена*Скидка*НДС,"Ч15.2, ");
	ИначеЕсли парам = "ЦенаРозн2" Тогда
		Если Пользователь.ОсновнаяФирма <> Константа.ОсновнаяФирма Тогда
			// не показываем для пользователей филиалов
			Возврат "---";
		КонецЕсли;
		КатРозн2 = семПолучитьКатегориюЦеныПоНаим( "Розничная2" );
		Если выбВалюта.Выбран() = 0 Тогда
			Цена = ЦенаТовараПоКатегорииДляТовара(ТекущийЭлемент(),КатРозн2);
		Иначе
			Цена = ЦенаТовараПоКатегорииДляТовара(ТекущийЭлемент(),КатРозн2,выбВалюта,КурсДляВалюты(выбВалюта,РабочаяДата()));
		КонецЕсли;
		Скидка = 1 - глПроцентСкидки( ТекущийЭлемент(),,КатРозн2)/100;
		НДС = 1 + ПроцентНДС(ТекущийЭлемент().СтавкаНДС)/100;
		Возврат Формат(Цена*Скидка*НДС,"Ч15.2, ");
	ИначеЕсли парам = "ЦенаОпт" Тогда
		ОснКат=?(ПустоеЗначение(глФирма.ОсновнаяКатегорияЦены)=1, Константа.ОсновнаяКатегорияЦены,глФирма.ОсновнаяКатегорияЦены);
		
		Если выбВалюта.Выбран() = 0 Тогда
			Возврат Формат( ЦенаТовараПоКатегорииДляТовара( ТекущийЭлемент(),ОснКат),"Ч15.2, ");
		Иначе       
			Курс = КурсДляВалюты(выбВалюта,РабочаяДата());
			Если глКодСтраныПользователя <> Константа.ОсновнаяФирма.Страна.Код Тогда // только для агентов из Литвы
				Если выбВалюта.Наименование = "LTL" Тогда // только для литовской валюты LTL
					Курс = 0.20354611;
				КонецЕсли;
			КонецЕсли;
			Возврат Формат( ЦенаТовараПоКатегорииДляТовара( ТекущийЭлемент(),ОснКат,выбВалюта,Курс),"Ч15.2, ");
		КонецЕсли;
	КонецЕсли;
КонецФункции

Процедура семУстПеревода()
	Если текМестоИсп = перЛатвия Тогда
	ИначеЕсли текМестоИсп = перЛитва Тогда
		//	Кнопки
		Форма.кнПечать.Заголовок( "Print" );
		//	Список
		Форма.Код.Заголовок( "Code" );
		Форма.ПоАлфавиту.Заголовок( "Name" );
		Форма.БазоваяЕдиницаИзмерения.Заголовок( "Unit" );
		Форма.ВидТовара.Заголовок( "Type" );
		Форма.Поставщик.Заголовок( "Supplier" );
		Форма.ШтрихКод.Заголовок( "Barcode" );
            
            //	Поиск
		//ЛистТ.УстановитьПараметрыКолонки("Код",,,,"Code",,,);
		//ЛистТ.УстановитьПараметрыКолонки("Наим",,,,"Name",,,);
		//ЛистТ.УстановитьПараметрыКолонки("Цена",,,,"Price",,,);
		//ЛистТ.УстановитьПараметрыКолонки("ОстВсе",,,,"Общ. Ост.",,,);
		//ЛистТ.УстановитьПараметрыКолонки("Ост",,,,"Дост.",,,);
		//ЛистТ.УстановитьПараметрыКолонки("Рез",,,,"Резер..",,,);
		//ЛистТ.УстановитьПараметрыКолонки("Комментарий",,,,"Coomment",,,);
		//ЛистТ.УстановитьПараметрыКолонки("Поставщик",,,,"Supplier",,,);
	КонецЕсли;
КонецПроцедуры

Процедура семУстВидимости()
	Если глКодСтраныПользователя="LV" Тогда
		Форма.НаименованиеLT.Видимость(0);
		Форма.НаименованиеEE.Видимость(0);
		Форма.НаименованиеАнгл.Видимость(0);
		Если ВыбКлиент.Выбран()=0 Тогда
			Форма.лПоАлфавиту.Видимость(0);
			Форма.ПоАлфавиту.Видимость(1);
		Иначе
			Форма.лПоАлфавиту.Видимость(1);
			Форма.ПоАлфавиту.Видимость(0);
		КонецЕсли;
	ИначеЕсли глКодСтраныПользователя="LT" Тогда
		Форма.НаименованиеLT.Видимость(1);
		Форма.НаименованиеEE.Видимость(0);
		Форма.НаименованиеАнгл.Видимость(1);
		Форма.лПоАлфавиту.Видимость(0);
		Форма.ПоАлфавиту.Видимость(0);
	ИначеЕсли глКодСтраныПользователя="EE" Тогда
		Форма.НаименованиеLT.Видимость(0);
		Форма.НаименованиеEE.Видимость(1);
		Форма.НаименованиеАнгл.Видимость(1);
		Форма.лПоАлфавиту.Видимость(0);
		Форма.ПоАлфавиту.Видимость(0);
	КонецЕсли;
	Если текМестоИсп = перЛатвия Тогда
	ИначеЕсли текМестоИсп = перЛитва Тогда
		Форма.КодДляРозницы.Видимость( 0 );
	КонецЕсли;
КонецПроцедуры

Процедура семСортировка()
	текСтрана = семТекСтрана();
	Если текСтрана = "LT" Тогда
		Сортировка("НаименованиеLT");
	ИначеЕсли текСтрана = "EE" Тогда
		Сортировка("НаименованиеEE");
	ИначеЕсли текСтрана = "LV" Тогда
		Сортировка("ПоАлфавиту");
	КонецЕсли;
КонецПроцедуры

Процедура Show_rezerve()
	OpenForm("Report.ОстаткиТоваров",CurrentItem());

КонецПроцедуры

Процедура SetHierarchy()
//	H_Flag=HierarchicalList(Flag);
//activate("ost");
КонецПроцедуры
//***************************************************************
//            
Функция ПолучитьРознЦену()

	Возврат Формат ((ЦенаТовараПоКатегорииДляТовара(ТекущийЭлемент(),Константа.РозничнаяКатегорияЦены)*(1-глПроцентСкидки(ТекущийЭлемент(),,Константа.РозничнаяКатегорияЦены)/100))*(1+ПроцентНДС(ТекущийЭлемент().СтавкаНДС)/100),"Ч11.2") ;
КонецФункции

//***************************************************************
Функция ПоискПоМатчкоду(Условие,Сим) Экспорт
	
	Условие=СтрЗаменить(Условие,"'","");
   
	Слово="";	
	Если Сим=1 Тогда
		Слово=("'%"+НРег(СокрЛП(Условие))+"%'");
	иначе
		Слово=("'"+НРег(СокрЛП(Условие))+"%'");
	КонецЕсли;
	
	ЛистКод=СоздатьОбъект("СписокЗначений");
	Лист=СоздатьОбъект("СписокЗначений");
	
	ТоварыSC="SC"+MDW.ИДОбъекта(Метаданные.Справочник("Номенклатура"));
	ТоварыПоАлфавиту="SP"+MDW.ИДОбъекта(Метаданные.Справочник("Номенклатура").Реквизит("ПоАлфавиту"));
	
	Спр=СоздатьОбъект("Справочник.Номенклатура");
	Результат=СоздатьОбъект("СписокЗначений");
                  
	
	СтрокаЗапроса="Select ID, left("+ТоварыПоАлфавиту+",5) from "+ТоварыSC+" WHERE "+ТоварыПоАлфавиту+" LIKE "+Слово+" order by 2, code";

//	Если ВидПодключения=Перечисление.ВидПодключения.RAINBOW Тогда
		СтрокаВсего="Select Count(*) as TOT from "+ТоварыSC+" WHERE "+ТоварыПоАлфавиту+" LIKE "+Слово;

		Если Соединение.Подготовить(СтрокаВсего)=1 Тогда
			Если Соединение.Открыть()=1 Тогда
			Иначе     
				Возврат -1;
			КонецЕсли;
		Иначе
			Возврат -1;
		КонецЕсли;           
		
		Соединение.След();
		Всего=Соединение.ПолучитьЗначение("TOT");
		Соединение.Закрыть();
		
		Если Соединение.Подготовить(СтрокаЗапроса)=1 Тогда
			Если Соединение.Открыть()=1 Тогда
			Иначе     
				Возврат -1;
			КонецЕсли;
		Иначе
			Возврат -1;
		КонецЕсли;
	//ИначеЕсли ВидПодключения=Перечисление.ВидПодключения.ADO Тогда
	//	НаборЗаписей=Соединение.Execute(СтрокаЗапроса);
	//	Всего=НаборЗаписей.RecordCount;
	//ИначеЕсли ВидПодключения=Перечисление.ВидПодключения.SQLDMO Тогда
	//	НаборЗаписей=Соединение.Databases(СокрЛП(Константа.SQLБаза)).ExecuteWithResults(СтрокаЗапроса); //SQLDMO
	//	Всего=НаборЗаписей.Rows;
	//КонецЕсли;	
	
	Если Число(Всего)>1000 Тогда
		Если Вопрос("В результате запроса получено "+Всего +" элементов. Продолжить?",4)<>6 Тогда
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	
	с=0;         
	т=0;
               
	//Если ВидПодключения=Перечисление.ВидПодключения.RAINBOW Тогда 

	Пока Соединение.Конец()=0 Цикл
		ЛистКод.ДобавитьЗначение(Соединение.ПолучитьЗначение("ID"));
		Соединение.След();
	КонецЦикла;	    
	
	//ИначеЕсли ВидПодключения=Перечисление.ВидПодключения.ADO Тогда
	//	Пока НаборЗаписей.Eof()=0 Цикл
	//		ЛистКод.ДобавитьЗначение(НаборЗаписей.Fields("ID").Value);
	//		НаборЗаписей.MoveNext();
    //    КонецЦикла;
	//ИначеЕсли ВидПодключения=Перечисление.ВидПодключения.SQLDMO Тогда
	//	Для т=1 По НаборЗаписей.Rows Цикл
    //        ЛистКод.ДобавитьЗначение(НаборЗаписей.GetColumnString(т,1));
	//	КонецЦикла;
	//КонецЕсли;	
		                                    
	Соединение.Закрыть();
	                 
	Для т=1 По ЛистКод.РазмерСписка() Цикл
		с=с+1;
		состояние(""+окр(с/Всего*100)+"%");

		товкод=ЛистКод.ПолучитьЗначение(т);
    
		_ВнутреннийКод=товкод;

		_КодФилиала=Прав(_ВнутреннийКод,3); //Последние три символа - КодФилиала
		спр=MDW.ЗначениеИзСтрокиБД("Справочник.Номенклатура",_ВнутреннийКод);
		
//		_ВнутреннийКод=СокрЛП(Лев(_ВнутреннийКод,СтрДлина(_ВнутреннийКод)-3));
//		_ВнутреннийКод=RBS.BaseToInt(_ВнутреннийКод,36);
//		_ВнутреннийКод=Прав("          "+_ВнутреннийКод,10)+_КодФилиала;
//
//		спр=ЗначениеИзСтрокиВнутр("{""B"",""0"",""0"","""+Сред(ТоварыSC,3)+""",""0"",""0"","""+_ВнутреннийКод+"""}");
	

		Прод=0;		
		Если спр.Выбран()=0 Тогда
			сообщить("Не найден товар с кодом "+товкод);
			Прод=1;
			Продолжить;
		иначеесли Спр.ЭтоГруппа()=1 тогда
			Прод=1;
			Продолжить;
		КонецЕсли;

		Лист.ДобавитьЗначение(спр.ТекущийЭлемент());

	КонецЦикла;	

	Возврат Лист;	
	
КонецФункции
//*********************************************
//Функция ПоискSQL(Клиент)
//	                                              
//	ЛистКод=СоздатьОбъект("СписокЗначений");
//	Лист=СоздатьОбъект("СписокЗначений");
//	
//	//Ссылка на регистр движений остатков товаров
//	ОбъектИД=СокрЛП(НРег("RA"+MDW.ИДОбъекта(Метаданные.Регистр("ОстаткиТоваров")))); 
//	
//	//Ссылка на справочник товаров
//	ТоварыSС=СокрЛП(НРег("SC"+MDW.ИДОбъекта(Метаданные.Справочник("Номенклатура")))); 
//	
//	//Ссылка на поле Наименований без спец. симв. справочника товаров
//	ТоварыПоАлфавиту=СокрЛП(НРег("SP"+MDW.ИДОбъекта(Метаданные.Справочник("Номенклатура").Реквизит("ПоАлфавиту")))); 
//	
//	//Ссылка на поле Товар в регистре Остатки товаров
//	ТоварSP=СокрЛП(НРег("SP"+MDW.ИДОбъекта(Метаданные.Регистр("ОстаткиТоваров").Измерение("Товар"))));
//	
//	//Ссылка на поле Клиент в регистре остатки товаров
//	КлиентSP=СокрЛП(НРег("SP"+MDW.ИДОбъекта(Метаданные.Регистр("ОстаткиТоваров").Реквизит("Клиент"))));
//	
//	Спр=СоздатьОбъект("Справочник.Номенклатура");
//	
//	КлиентИД="'"+MDW.ЗначениеВСтрокуБД(Клиент)+"'";
//	//КлиентИД=Лев(Прав(ЗначениеВСтрокуВнутр(Клиент),15),13);
//	//_КодФилиала=Прав(КлиентИД,3);
//
//	//КлиентИД=СокрЛП(Лев(КлиентИД,10));
//	//КлиентИД=RBS.IntToBase(КлиентИД,36);
//	//КлиентИД="'"+ВРег(Прав("          "+КлиентИД,6)+_КодФилиала)+"'";
//	                                   
//	ДатаТА=ПолучитьДатуТА()-90;
//	СтрокаДаты=Строка(ДатаГод(ДатаТА))+?(ДатаМесяц(ДатаТА)<10,"0","")+Строка(ДатаМесяц(ДатаТА))+"01";
//
//	СтрокаЗапроса="Select "+ТоварSP+" as ID, left("+ТоварыПоАлфавиту+",5) from "+ОбъектИД+","+ТоварыSС+" goods"+
//	" where "+ОбъектИД+"."+ТоварSP+"=goods.id and "+КлиентSP+"="+КлиентИД+
//	" and Date_Time_iddoc >= '"+СтрокаДаты+
//	"' group by "+ТоварSP+", "+ТоварыПоАлфавиту+" order by 2";
//
//	//СтрокаЗапроса="Select "+ТоварSP+" as ID from "+ОбъектИД+
//	//" where "+КлиентSP+"="+КлиентИД+
//	//" and Date_Time_iddoc >= '"+СтрокаДаты+
//	//"' group by "+ТоварSP;
//	
////	Если ВидПодключения=Перечисление.ВидПодключения.RAINBOW Тогда
//		Всего=1;		
//		Если Соединение.Подготовить(СтрокаЗапроса)=1 Тогда
//			Если Соединение.Открыть()=1 Тогда
//			Иначе     
////				Сообщить("Ошибка открытия запроса. Обратитесь к системному администратору!");
////				Сообщить(СтрокаЗапроса);
//				Возврат Лист;
//			КонецЕсли;
//		Иначе                
//			Сообщить("Ошибка подготовки запроса. Обратитесь к системному администратору!");
//			Возврат Лист;
//		КонецЕсли;           
//	//ИначеЕсли ВидПодключения=Перечисление.ВидПодключения.ADO Тогда
//	//	НаборЗаписей=Соединение.Execute(СтрокаЗапроса);
//	//	Всего=НаборЗаписей.RecordCount;
//	//ИначеЕсли ВидПодключения=Перечисление.ВидПодключения.SQLDMO Тогда
//	//	НаборЗаписей=Соединение.Databases(СокрЛП(Константа.SQLБаза)).ExecuteWithResults(СтрокаЗапроса); //SQLDMO
//	//	Всего=НаборЗаписей.Rows;
//	//КонецЕсли;	
//	
//	с=0;         
//	т=0;
//
//	//Если ВидПодключения=Перечисление.ВидПодключения.RAINBOW Тогда 
//	Пока Соединение.Конец()=0 Цикл
//		ЛистКод.ДобавитьЗначение(Соединение.ПолучитьЗначение("ID"));
//		Соединение.След();
//	КонецЦикла;	    
//	//ИначеЕсли ВидПодключения=Перечисление.ВидПодключения.ADO Тогда
//	//	Пока НаборЗаписей.Eof()=0 Цикл
//	//		ЛистКод.ДобавитьЗначение(НаборЗаписей.Fields("ID").Value);
//	//		НаборЗаписей.MoveNext();
//    //    КонецЦикла;
//	//ИначеЕсли ВидПодключения=Перечисление.ВидПодключения.SQLDMO Тогда
//	//	Для т=1 По НаборЗаписей.Rows Цикл
//    //        ЛистКод.ДобавитьЗначение(НаборЗаписей.GetColumnString(т,1));
//	//	КонецЦикла;
//	//КонецЕсли;	  
//	
//	Соединение.Закрыть();	
//		
//	Для т=1 По ЛистКод.РазмерСписка() Цикл
//		с=с+1;
////		состояние(""+окр(с/Всего*100)+"%");
//		              
//
//		товкод=ЛистКод.ПолучитьЗначение(т);
//    
//		_ВнутреннийКод=товкод;
////
////		_КодФилиала=Прав(_ВнутреннийКод,3); //Последние три символа - КодФилиала
////
////		_ВнутреннийКод=СокрЛП(Лев(_ВнутреннийКод,СтрДлина(_ВнутреннийКод)-3));
////		_ВнутреннийКод=RBS.BaseToInt(_ВнутреннийКод,36);
////		_ВнутреннийКод=Прав("          "+_ВнутреннийКод,10)+_КодФилиала;
//                      
//		спр=MDW.ЗначениеИзСтрокиБД("Справочник.Номенклатура",_ВнутреннийКод);
//		
////		спр=ЗначениеИзСтрокиВнутр("{""B"",""0"",""0"","""+Сред(ТоварыSС,3)+""",""0"",""0"","""+_ВнутреннийКод+"""}");
//	
//		Прод=0;		
//		Если спр.Выбран()=0 Тогда
//			сообщить("Не найден товар с кодом "+товкод);
//			Прод=1;
//			Продолжить;
//		иначеесли Спр.ЭтоГруппа()=1 тогда
//			Прод=1;
//			Продолжить;
//		КонецЕсли;
//
//		Лист.ДобавитьЗначение(спр.ТекущийЭлемент());
//
//	КонецЦикла;	
//
//	Возврат Лист;	
//	
//КонецФункции     

//******************************************

//Процедура ОтборЗначений()
//	                            
//	УстановитьОтбор("ПризнакНевыбора",0);
//КонецПроцедуры

//******************************************
// Процедура генерации запроса ДляКлиента.
//
//Процедура ДляКлиента()
//	Перем Запрос, ТекстЗапроса;
//	//Создание объекта типа Запрос 
//	ЛистТ.УдалитьСтроки();
//	
//	Запрос = СоздатьОбъект("Запрос");
//	
//	ТекстЗапроса = 
//	"//{{ЗАПРОС(ДляКлиента)
//	|Период с (НачМесяца(ТекущаяДата())-90);
//	|Клиент = Регистр.ОстаткиТоваров.Клиент;
//	|Товар = Регистр.ОстаткиТоваров.Товар;
//	|ОстатокТовара = Регистр.ОстаткиТоваров.ОстатокТовара;
//	|Функция ОстатокТовараРасход = Расход(ОстатокТовара);
//	|Функция ОстатокТовараПриход = Приход(ОстатокТовара);
//	|Группировка Товар упорядочить;
//	|"//}}ЗАПРОС
//	;
//
//	СЗ=СоздатьОбъект("СписокЗначений");
//
//	Рез_Поиска=0;
//	Если ВыбКлиент.Выбран()=0 Тогда   
//	//	УстановитьОтбор(,);
//		ИспользоватьСписокЭлементов();
//		ИерархическийСписок(,1);       
//		семУстВидимости();
//	//	ОтборЗначений();
//		Возврат;
//	ИначеЕсли ВыбКлиент.ЭтоГруппа()=1 Тогда
//		ТекстЗапроса =ТекстЗапроса + "Условие(Клиент в ВыбКлиент);";
//	Иначе
//		ТекстЗапроса =ТекстЗапроса + "Условие(Клиент = ВыбКлиент);";
//	КонецЕсли;
//
//	СЗ=ПоискSQL(ВыбКлиент);
//  	Рез_Поиска=СЗ.РазмерСписка();
//  //	УстановитьОтбор(,);
//   	ИспользоватьСписокЭлементов(СЗ);
//   	ИерархическийСписок(0,0);
//   	семУстВидимости();                
//   	Возврат;
//
//	// Если ошибка в запросе, то выход из процедуры
//	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
//		Возврат;
//	КонецЕсли;
//
//	// Подготовка к заполнению выходных форм данными запроса
//
//	// Заполнение полей "Заголовок"
//                
//	ЛистТ.УдалитьСтроки();
//
//	с=0;
//	Пока Запрос.Группировка(1) = 1 Цикл
//		// Заполнение полей Товар
//		с=с+1;
//		спр=Запрос.Товар;
//
//		СЗ.ДобавитьЗначение(спр);		  
//		Продолжить;
//		
//		ОстТ=Регистр.ОстаткиТоваров.СводныйОстаток(спр.ТекущийЭлемент(),Склад,,"ОстатокТовара");
//		ОстВсе=Регистр.ОстаткиТоваров.СводныйОстаток(спр.ТекущийЭлемент(),,,"ОстатокТовара");
//
//		ттт=спр.ТекущийЭлемент();
//		ттт.ИспользоватьДату(РабочаяДата());
//
//		ЛистТ.НоваяСтрока();
//		ЛистТ.Код=ттт.Код;
//		ЛистТ.Наим=ттт.Наименование;
//		ЛистТ.Цена=ттт.Розн_Цена;
//		ЛистТ.ОстВсе=ОстВсе;
//		ЛистТ.ост=ОстТ;
//		ЛистТ.Рез=0;
//		ЛистТ.Товар=ттт;
//		ЛистТ.Комментарий=ттт.ШтрихКод;
//		ЛистТ.Поставщик=ттт.Поставщик;
//
//	КонецЦикла;
//
//	Рез_Поиска=с;
//	
////	УстановитьОтбор(,);
//	ИспользоватьСписокЭлементов(СЗ);
//	ИерархическийСписок(0,0);
////   	Форма.Наим_.Видимость(1);
////   	Форма.ПоАлфавиту.Видимость(0);
//
//	// Вывод заполненной формы
//
//КонецПроцедуры


//*************************************
Процедура ActivateCode()

	Активизировать("ПоискКод");

КонецПроцедуры                       

//*************************************
//Процедура ПерейтиНа()
//
//	АктивизироватьОбъект(ЛистТ.Товар);   
//	
//	Если Форма.РежимВыбора()=2 Тогда
//		Активизировать("Код",0);
//	КонецЕсли;
//	
//КонецПроцедуры     

//******************************************
Процедура приОткрытии()
 	текМестоИсп = Константа.МестоИспользования;
             
	Форма.ВыбКлиент.ВыборГруппы(0);
	 ПриВыбореКлиента();	
	//Если ВыбКлиент.Выбран()=1 Тогда
	//    ДляКлиента();
	//КонецЕсли;
	
	Если Форма.Параметр=1 Тогда
	    ВыборГруппы(1);
	КонецЕсли;
	
	Активизировать("ПоискКод");

	//ЛистТ.НоваяКолонка("Код",,10,,"Код",9,,);
	//ЛистТ.НоваяКолонка("Наим",,30,,"Наименование",28,,);
	//ЛистТ.НоваяКолонка("Товар",,1,,"Товар",,,);
	//ЛистТ.НоваяКолонка("Цена","Число",15,2," ЦенаСНДС",10,,);
	//ЛистТ.НоваяКолонка("ОстВсе","Число",10,2,"Общ. Ост.",8,,);
	//ЛистТ.НоваяКолонка("Ост","Число",10,2,"Дост.",8,,);
	//ЛистТ.НоваяКолонка("Рез","Число",10,2,"Резер..",6,,);
	//ЛистТ.НоваяКолонка("Комментарий","Строка",100,,"Штрих-код",13,,);
	//ЛистТ.НоваяКолонка("Поставщик",,,,"Поставщик",20,,);
	//
	//ЛистТ.ВидимостьКолонки("Товар",0);
                         
    Форма.кнИзмНаим.Видимость(Пользователь.РазрИзмНаименования);
	
	ПоВхождению=ВосстановитьЗначение("ПоВхождению");
	ПросмотрИстории( "" );
	семУстВидимости();
	семУстПеревода(); 
	семСортировка();
	Если выбВалюта.Выбран() = 0 Тогда
		
		выбВалюта = ?(ПустоеЗначение(глФирма.ОсновнаяВалюта)=1,Константа.ОсновнаяВалюта,глФирма.ОсновнаяВалюта);
	КонецЕсли;
	//ОтборЗначений();
	Транслит(Расш,Форма);
КонецПроцедуры
                     
//******************************************
Процедура ПриЗакрытии()  
	
	СохранитьЗначение("ПоВхождению",ПоВхождению);
КонецПроцедуры
                         

//******************************************
Процедура НайтиМатчКод()
//           
//	
//	Рез_Поиска=0;
//	
//	Если ПустаяСтрока(матч)=1 Тогда
//	    Если ВывДопТаб=0 Тогда //Выводить в дополнительную таблицу
//			ИспользоватьСписокЭлементов();
//			ИерархическийСписок(,1);
////		   	Форма.Наим_.Видимость(0);
////		   	Форма.ПоАлфавиту.Видимость(1);
//		КонецЕсли;
//		возврат;
//	конецесли;
//
//	ЛистТ.УдалитьСтроки();
//
////	Сообщить("Начало:"+ТекущееВремя());
//
//	Результат=СоздатьОбъект("СписокЗначений");
//	Результат=ПоискПоМатчкоду(матч,ПоВхождению);
//
//	Если Число(Результат)=-1 Тогда
//		Сообщить("Системная ошибка поиска. Обратитесь к Системному администратору!");
//		Возврат;
//	ИначеЕсли Число(Результат)=1 Тогда
//		Возврат;
//	КонецЕсли;	
//
//	
//	Если ВывДопТаб=0 Тогда //Не выводить в дополнительную таблицу
//		ИспользоватьСписокЭлементов(Результат);
//		ИерархическийСписок(0,0);	  
//		Рез_Поиска=Результат.РазмерСписка();
////	   	Форма.Наим_.Видимость(1);
////	   	Форма.ПоАлфавиту.Видимость(0);
//		Возврат;
//	КонецЕсли;
//	
//	с=0;    
//	Всего=Результат.РазмерСписка();
//	Для т=1 По Результат.РазмерСписка() Цикл
//                    
//		с=с+1;
//		состояние(""+окр(с/Всего*100)+"%");
//		
//		спр=Результат.ПолучитьЗначение(т);
//		
//		ОстТ=Регистр.ОстаткиТоваров.СводныйОстаток(спр.ТекущийЭлемент(),Склад,"ОстатокТовара");
//		ОстВсе=Регистр.ОстаткиТоваров.СводныйОстаток(спр.ТекущийЭлемент(),,"ОстатокТовара");
//		РезТ=0;
//
//		ттт=спр.ТекущийЭлемент();
//		ттт.ИспользоватьДату(РабочаяДата());
//
//		ЛистТ.НоваяСтрока();
//		ЛистТ.Код=ттт.Код;
//		ЛистТ.Наим=ттт.Наименование;
//		ЛистТ.Цена=ЦенаТовараПоКатегорииДляТовара(ттт,Константа.РозничнаяКатегорияЦены);
//		ЛистТ.ОстВсе=ОстВсе;
//		ЛистТ.ост=ОстТ;
//		ЛистТ.Рез=РезТ;
//		ЛистТ.Товар=ттт;
//		ЛистТ.Комментарий=ттт.ШтрихКод;
//		ЛистТ.Поставщик=ттт.Поставщик;
//
//	КонецЦикла;
//               
//	Рез_Поиска=ЛистТ.КоличествоСтрок();     
//	
////   	Форма.Наим_.Видимость(1);
//  // 	Форма.ПоАлфавиту.Видимость(0);
//	
////	Сообщить("Конец: "+ТекущееВремя());

КонецПроцедуры

//**************************************
Процедура НайтиКод()
                  
//	ИспользоватьСписокЭлементов();
	ИерархическийСписок(,1);
	
	спр=СоздатьОбъект("Справочник.Номенклатура");

	спр.НайтиПоКоду(сокрЛП(ПоискКод),0);
                       
	Если спр.выбран()=0 Тогда
		спр.НайтиПоРеквизиту("КодДляРозницы",сокрЛП(ПоискКод),1);
	КонецЕсли;
	
	Если спр.выбран()=1 Тогда

	    АктивизироватьОбъект(спр.ТекущийЭлемент());
		Активизировать("Код",0);
		
		Если Форма.РежимВыбора()=2 Тогда
//			Форма.ВыполнитьВыбор(спр.ТекущийЭлемент());
//			Активизировать("ПоискКод");
		КонецЕсли;
		
	Иначе
		Активизировать("ПоискКод");
	КонецЕсли;

КонецПроцедуры

Процедура НайтиКодРК()
	ИерархическийСписок(,1);
	спр=СоздатьОбъект("Справочник.Номенклатура");
	Если спр.выбран()=0 Тогда
		спр.НайтиПоРеквизиту("КодРК",Число(сокрЛП(ПоискКод)),1);
	КонецЕсли;
	Если спр.выбран()=1 Тогда
		АктивизироватьОбъект(спр.ТекущийЭлемент());
		Активизировать("Код",0);
	Иначе
		Активизировать("ПоискКод");
	КонецЕсли;
КонецПроцедуры

                         
//**************************************
Функция СвободныйОстатокТовараНаСкладе()
                      
	Рез=Регистр.РезервыТоваров.СводныйОстаток(ТекущийЭлемент(),,"РезервТовара");
	
	Если Склад.Выбран()=1 Тогда
		Возврат Формат(Макс(Регистр.ОстаткиТоваров.СводныйОстаток(ТекущийЭлемент(),Склад,,"ОстатокТовара")-Рез,0),"Ч11.3");
	Иначе
		Возврат Формат(Регистр.ОстаткиТоваров.СводныйОстаток(ТекущийЭлемент(),,,"ОстатокТовара")-Рез,"Ч11.3");
	КонецЕсли;
	
КонецФункции
                
Функция ВывестиРезервТовара()
	Возврат формат(Регистр.РезервыТоваров.СводныйОстаток(ТекущийЭлемент(),,"РезервТовара"),"Ч10.3");
КонецФункции


//**************************************
Функция ОстатокТовараНаСкладе()
	Если Склад.Выбран()=1 Тогда
		Возврат Формат(Регистр.ОстаткиТоваров.СводныйОстаток(ТекущийЭлемент(),Склад,,"ОстатокТовара"),"Ч11.3");
	Иначе
		Возврат Формат(Регистр.ОстаткиТоваров.СводныйОстаток(ТекущийЭлемент(),,,"ОстатокТовара"),"Ч11.3");
	КонецЕсли;
КонецФункции                   

//**************************************
Функция ЗаказаноТовараНаСкладах()

	Возврат Формат(	Регистр.ЗаказыПоставщикам.СводныйОстаток(ТекущийЭлемент(),,,,,"Количество"),"Ч11.3");
		
КонецФункции            

//******************************************************
Процедура Печать()
	ВТ=0;
	ШТ=0;
	КолТов=0; // Количество товаров в списке
	//  Создание Таблицы для выходного отчета
            
	ВыбПоставщик=СоздатьОбъект("Справочник.Контрагенты");
	спрП=СоздатьОбъект("Справочник.Контрагенты");
	Если ПечПоПоставщику=1 Тогда
		Запрос=СоздатьОбъект("Запрос");
		ТекстЗапроса="//{{ЗАПРОС(Поставщики)
		|Товар = Справочник.Номенклатура.ТекущийЭлемент;
		|Поставщик = Справочник.Номенклатура.Поставщик;
		|Группировка Поставщик упорядочить по Поставщик.ПоАлфавиту без групп;
		|";//}}ЗАПРОС
		
		              
		ВыбТовар=ТекущийЭлемент();
		Если ВыбТовар.Уровень()=1 Тогда
		Иначе    
			ВыбТоварР=ВыбТовар.Родитель;
			ТекстЗапроса=ТекстЗапроса+"Условие (Товар в ВыбТоварР);";
		КонецЕсли;
		
		Если Запрос.Выполнить(ТекстЗапроса)=0 Тогда
			Сообщить("Проблема с запросом!");
			Возврат;
		КонецЕсли;
		
		СП=СоздатьОбъект("СписокЗначений");
		Пока Запрос.Группировка(1)=1 Цикл
			 СП.ДобавитьЗначение(Запрос.Поставщик);
		КонецЦикла;                                

        СП.ВыбратьЗначение(ВыбПоставщик,"Выберите поставщика...",,,0);
		
		Заг1="Piegadўtajs "+ВыбПоставщик;
	КонецЕсли;					
	                     
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(СписокТоваровДляПечати)
	|Товар = Справочник.Номенклатура.ТекущийЭлемент;
	|Поставщик = Справочник.Номенклатура.Поставщик;
	|БазЕд = Справочник.Номенклатура.БазоваяЕдиницаИзмерения;
	|Код = Справочник.Номенклатура.Код;
	|НаименованиеДляЦенника = Справочник.Номенклатура.НаименованиеДляЦенника;
	|Наименование = Справочник.Номенклатура.Наименование;
	|СтранаПроизводитель = Справочник.Номенклатура.СтранаПроизводитель;
	|КодДляРозницы = Справочник.Номенклатура.КодДляРозницы;
	|ШтрихКод = Справочник.Номенклатура.ШтрихКод;
	|Группировка Товар упорядочить по Товар.Код;
	|"//}}ЗАПРОС
	;
	
	          
	ВыбТовар=ТекущийЭлемент();
	Если ВыбТовар.Уровень()=1 Тогда
		Заг="Pa visўm prec§m.";
	Иначе
//		Тов.ВключатьПодчиненные(1);
//		Тов.ИспользоватьРодителя(ВыбТовар.Родитель);
		ВыбТоварР=ВыбТовар.Родитель;
		ТекстЗапроса=ТекстЗапроса+"Условие (Товар в ВыбТоварР);";
		Заг="PreҐu grupa "+ВыбТовар.Родитель.Наименование;
	КонецЕсли;

	Если (ПечПоПоставщику=1)  Тогда
		ТекстЗапроса=ТекстЗапроса+"Условие (Поставщик = ВыбПоставщик);";
	КонецЕсли;
	
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;

	
 	ЧислоСтрок=0;
	Таб=СоздатьОбъект("Таблица");
	Таб.ВывестиСекцию("Отчет|Pamata");
	Если ПечШтрихКод=1 Тогда
		Таб.ПрисоединитьСекцию("Отчет|Papildus");
	КонецЕсли;
	
	Если ПечКодРоз=1 Тогда
		Таб.ПрисоединитьСекцию("Отчет|ДляРозницы");
	КонецЕсли;

	// Подготовка к заполнению выходных форм данными запроса

	// Заполнение полей "Заголовок"

	Пока Запрос.Группировка(1) = 1 Цикл
		// Заполнение полей Товар
//	Тов.ВыбратьЭлементы();
//	Пока Тов.ПолучитьЭлемент()>0 Цикл
		Тов=Запрос.Товар;
		Если Тов.ЭтоГруппа()=1 тогда
			Таб.ВывестиСекцию("Группа|Pamata");
			Оживить(1);
		Иначе                        
			
			КолТов=КолТов+1;
			
			РознЦена_=ЦенаТовараПоКатегорииДляТовара(Тов,Константа.РозничнаяКатегорияЦены);
            РознЦенаСНДС=РознЦена_*(1+ПроцентНДС(Тов.СтавкаНДС)/100);
			
			Таб.ВывестиСекцию("Товар|Pamata");
			
			Если ПечШтрихКод=1 Тогда
				Таб.ПрисоединитьСекцию("Товар|Papildus");
			КонецЕсли;
			Если ПечКодРоз=1 Тогда
				Таб.ПрисоединитьСекцию("Товар|ДляРозницы");
			КонецЕсли;
			
			Оживить(1);
		КонецЕсли;
	КонецЦикла;
	ВТ=Таб.ВысотаТаблицы();
	ШТ=Таб.ШиринаТаблицы();
	Таб.ПовторятьПриПечатиСтроки(4,4);
	Таб.ВывестиСекцию("Итог");
	//Вызов выходного отчета в окно просмотра и редактирования.
	Таб.Опции(0,0,4,0,ПарСтрСпр);
	таб.ПараметрыСтраницы(1,,,,,,,,,1);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Список товаров по каталогу","");
	ВыбТовар=0;
КонецПроцедуры


//******************************************************
Процедура ПечатьПоРезервам()
	
	тов=ТекущийЭлемент();
	заг="---";              
	ЧислоСтрок=0;
	
	ИтогоРезерв=Регистр.РезервыТоваров.СводныйОстаток(ТекущийЭлемент(),,"РезервТовара");

	//  Создание Таблицы для выходного отчета
	Таб=СоздатьОбъект("Таблица");   
	Таб.ИсходнаяТаблица("Резервы");
	Таб.ВывестиСекцию("Шапка");
	
	Рег1=СоздатьОбъект("Регистр.РезервыТоваров");
    Рег1.УстановитьФильтр(ТекущийЭлемент());
	Рег1.ВыбратьИтоги();
	
	Пока (Рег1.ПолучитьИтог()=1) Цикл
		                    
		Док=Рег1.ПоСчету;
		
		КлиентРез=Рег1.ПоСчету.Клиент;
		
		Приращение=Рег1.РезервТовара;

		Таб.ВывестиСекцию("Строка");  
		
		Оживить(1);
	КонецЦикла;
	
//	ЗафиксироватьТранзакцию();	
	
	Таб.ВывестиСекцию("Кончик");	
	
	//Вызов выходного отчета в окно просмотра и редактирования.
	Таб.Опции(0,0,4,0);
	Таб.Защита(1);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Отчет о резервировании товаров","");
	
КонецПроцедуры								

//******************************************************
Процедура ПечатьПоЗаказам()
	
	ЧислоСтрок=0;
	
	заг="---";
	
	ИтогоЗаказ=	Регистр.ЗаказыПоставщикам.СводныйОстаток(ТекущийЭлемент(),,,,,"Количество");
	
	тов=ТекущийЭлемент();
	//  Создание Таблицы для выходного отчета
	Таб=СоздатьОбъект("Таблица");   
	Таб.ИсходнаяТаблица("Заказы");
	Таб.ВывестиСекцию("Шапка");                      
	
	Рег1=СоздатьОбъект("Регистр.ЗаказыПоставщикам");
	Рег1.УстановитьФильтр(ТекущийЭлемент(),,,);
	рег1.обратныйПорядок(1);

	Рег1.ВыбратьИтоги();
	
	КлиентСписок=СоздатьОбъект("СписокЗначений");

	Пока Рег1.ПолучитьИтог()=1 Цикл
		           
		Док=Рег1.ПоЗаказу;
		Если ПустоеЗначение(Док)=0 Тогда
			поз=Найти(Док.Автор," ");
			Автор=Лев(Док.Автор,поз-1)+" "+Лев(Сред(Док.Автор,поз+1),2);
		Иначе
			Автор="";
		КонецЕсли;
		Приращение=Рег1.Количество;
		датаП=Рег1.СрокПоставки;
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;

	Таб.ВывестиСекцию("Кончик");	
	
	//Вызов выходного отчета в окно просмотра и редактирования.
	Таб.Опции(0,0,4,0,ПарСтрОтчДлинн);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Отчет о заказе товара","");
	
КонецПроцедуры


//*********************************
Процедура ПечатьПоОборотам()
	заг="---";    
	ИтогоПрих=0;
	итогоРасх=0;
	тов=ТекущийЭлемент();
	ЧислоСтрок=0;
	
	ДатаКонца=ПолучитьДатуТА();
	ДатаНачала=НачГода(ДатаКонца);
	
	Если ВвестиПериод(ДатаНачала,ДатаКонца,"Выберите период отчета")<>1 Тогда
		Возврат;
	КонецЕсли;

	Таб=СоздатьОбъект("Таблица");   
	Таб.ИсходнаяТаблица("Обороты");
	Таб.ВывестиСекцию("Шапка");                      
	
//	НачатьТранзакцию();
//Талица движений
	ТД=СоздатьОбъект("ТаблицаЗначений");
	ТД.НоваяКолонка("НС","Число",17,0);
	ТД.НоваяКолонка("Документ","Документ");
	ТД.НоваяКолонка("Склад","Справочник.Склады");
	ТД.НоваяКолонка("Приход","Число",17,3);
	ТД.НоваяКолонка("Расход","Число",17,3);
	ТД.НоваяКолонка("Остаток","Число",17,3);
	ТД.НоваяКолонка("Партнер","Справочник.Клиенты");

	ВремРегистр=СоздатьОбъект("Регистры");
	Рег=ВремРегистр.ПартииТоваров;
	Рег.ВременныйРасчет();
	Рег.УстановитьЗначениеФильтра("Товар",ТекущийЭлемент());

	Если Склад.Выбран()=1 Тогда
		Рег.УстановитьЗначениеФильтра("Склад",Склад);
	КонецЕсли;	

	ВремРегистр.РассчитатьРегистрыНа(ДатаНачала);
	
	Рег.ВыбратьДвиженияСОстатками(0);
//	Рег.ОбратныйПорядок(1);
              
	НС=0;
	Пока  (Рег.ПолучитьДвижение()>0) Цикл
                                                
//		Рег.Товар=ТекущийЭлемент();
//		Рег.ОстаткиПолучить();
		            
		Ост=Рег.СводныйОстаток(,ТекущийЭлемент(),,,,,,,"ОстатокТовара");

		ПродСтоим=Рег.ПродСтоимость;
		
		Если Рег.Приход=1 Тогда
			прих=Рег.ОстатокТовара;
			Расх=0;
			Пприх=""+Рег.ОстатокТовара;
			Прасх="";
		иначе      
			прих=0;
			Расх=Рег.ОстатокТовара;
			Пприх="";
			Прасх=""+Рег.ОстатокТовара;
		КонецЕсли;               
              
		НС=НС+1;
		ТД.НоваяСтрока();
		ТД.НС=НС;
		ТД.Документ=Рег.ТекущийДокумент();
		ТД.Склад=Рег.Склад;
		ТД.Приход=Прих;
		ТД.Расход=Расх;
		ТД.Остаток=Ост;
		
		Если глЕстьРеквизитШапки("Клиент",Рег.ТекущийДокумент().Вид())=1 Тогда
			ТД.Партнер=Рег.ТекущийДокумент().Клиент;
		Иначе
			ТД.Партнер=ПолучитьПустоеЗначение("Справочник.Контрагенты");
		КонецЕсли;
		
	КонецЦикла;

	ТД.Сортировать("-НС");	
	
	ТД.ВыбратьСтроки();
	Пока ТД.ПолучитьСтроку()=1 Цикл
        
		Док=ТД.Документ; 
		ПечДок=ПеревестиНаГосЯзык(Док.Вид())+" "+Док.ДатаДок+" Nr. "+СокрП(Док.НомерДок)+"; ";
		ДТ=док.ДатаДок;
		
		Таб.ВывестиСекцию("Товар");  
		Оживить(1);
	    
	КонецЦикла;
	
	Таб.ВывестиСекцию("Итог");	
	
	//Вызов выходного отчета в окно просмотра и редактирования.
	
	Таб.Опции(0,0,0,0,ПарСтрОтчШирок);   
	Таб.параметрыСтраницы(1,100,1,2,2,5,5,2,2,1);
	
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Отчет об оборотах товаров","");
	
КонецПроцедуры

//*********************************
Процедура ПечатьПоСкладам() 
	
	//  Создание Таблицы для выходного отчета
	тов=ТекущийЭлемент();
	
	Факт=0;
	Резерв=0; 
	ИтогоФакт=0;
	ИтогоРеал=0;
	ИтогоРезерв=0;         
	ЧислоСтрок=0;

	
	склады_=СоздатьОбъект("Справочник.МестаХранения");
	
	Таб=СоздатьОбъект("Таблица");
	
	Таб.ИсходнаяТаблица("ПоСкладам");
	
	Склады=СоздатьОбъект("ТаблицаЗначений");
	Склады.НоваяКолонка("Наименование","Строка",40);
	Склады.НоваяКолонка("Факт","Число",12,3);
	Склады.НоваяКолонка("Резерв","Число",12,3);	
	
	Таб.ВывестиСекцию("Шапка");
	
	Резерв=Регистр.РезервыТоваров.СводныйИтог(ТекущийЭлемент(),,"РезервТовара"); 
	
	склады_.ВыбратьЭлементы();
	Пока склады_.ПолучитьЭлемент()>0 Цикл 
                
		Факт=Регистр.ОстаткиТоваров.СводныйОстаток(ТекущийЭлемент(),Склады_.текущийЭлемент(),,"ОстатокТовара");
		
		Если Факт<>0 Тогда
			Склады.НоваяСтрока();
			Склады.Наименование=Склады_.Наименование;
			Склады.Факт=Факт;
		КонецЕсли;

	КонецЦикла;

	Склады.Сортировать("-Факт");
	
	Склады.ВыбратьСтроки();
	    
	Пока Склады.ПолучитьСтроку()=1 Цикл
		
		Склады.Резерв=?(Резерв>Склады.Факт,Мин(Склады.Факт,0),Резерв);
		
		Резерв=Резерв-Склады.Резерв;
		                
		ИтогоФакт=ИтогоФакт+Склады.Факт;

		Таб.ВывестиСекцию("Строка");
		
		Оживить(1);
	КонецЦикла;
	
	ВТ=Таб.ВысотаТаблицы();
	ШТ=Таб.ШиринаТаблицы();
	Таб.ПовторятьПриПечатиСтроки(4,4);
	
	
	Таб.ВывестиСекцию("Кончик");
	//Вызов выходного отчета в окно просмотра и редактирования.
	Таб.Опции(0,0,4,0,ПарСтрСпр);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Наличие товаров у подразделений","");
	ВыбТовар=0;
КонецПроцедуры 
////_____________________________________________________________________________
//Функция РозничнаяЦенаТовара(ВыбТовар)
//    Спр=СоздатьОбъект("Справочник.Цены");
//	Спр.ИспользоватьВладельца(ВыбТовар);
//	Если Спр.НайтиПоРеквизиту("КатегорияЦены",Константа.РозничнаяКатегорияЦены,0)=0 Тогда
//		Возврат 0;
//	КонецЕсли;
//	Возврат Пересчет(Спр.Цена,Спр.Валюта,РабочаяДата(),Константа.БазоваяВалюта,рабочаяДата());
//КонецФункции //РозничнаяЦенаТовара
//**********************************************************
Процедура кнИзмНаим()
	Путь = КаталогИБ() + "ExtForms\ИзмНаименования.ert";
	Если ФС.СуществуетФайл( Путь ) = 0 Тогда
		Сообщить("Ошибка запуска обработки.","!");
		Сообщить("Не найден файл "+Путь,"I");
		Возврат;
	КонецЕсли;
	ОткрытьФорму( "Обработка", ТекущийЭлемент(), Путь );
КонецПроцедуры
//**********************************************************
Процедура кнСпецЦены() //по кнопке
	сп = СоздатьОбъект( "СписокЗначений" );
	сп.ДобавитьЗначение(ТекущийЭлемент(),"Товар");
	сп.ДобавитьЗначение(1,"Вариант");
	сп.ДобавитьЗначение(1,"ЦенаБаз");
	сп.ДобавитьЗначение(1,"ЦенаСоСк");
	ОткрытьФорму("Отчет.СкидкиКлиентовНов",сп);
//    Перем ВыбТовар;  
//	Перем СписокТовГрупп;
//
//	Если ЭтоГруппа()=1 Тогда
//	    Возврат;
//	КонецЕсли;
//	
//	Тов=ТекущийЭлемент();
//	ВыбТовар=ТекущийЭлемент();
//
//	СписокТовГрупп=СоздатьОбъект("СписокЗначений");
//	СписокТовГрупп.ДобавитьЗначение(ВыбТовар);
//	Пока Тов.Уровень()>1 Цикл
//	    СписокТовГрупп.ДобавитьЗначение(Тов.Родитель);
//		Тов=Тов.Родитель;
//	КонецЦикла;
//	
//	
//	Таб=СоздатьОбъект("Таблица");
//	
//	Таб.ИсходнаяТаблица("СпецЦены");
//		
//	Таб.ВывестиСекцию("Шапка"); 
//	
//	Запрос=СоздатьОбъект("Запрос");
//	
//	ТекстЗапроса=
//	"//{{ЗАПРОС(СпецЦены)
//	|СпецЦена = Справочник.КлиентСкидки.ТекущийЭлемент;
//	|Скидка = Справочник.КлиентСкидки.ПроцентСкидкиРозн;
//	|ТовГруппа = Справочник.КлиентСкидки.ТовГруппа;
//	|Клиент = Справочник.КлиентСкидки.Владелец;
//	|КлГруппа = Справочник.КлиентСкидки.Владелец.КлГруппа;
//	|Группировка КлГруппа упорядочить по КлГруппа.ПоАлфавиту без групп;
//	|Группировка Клиент упорядочить по Клиент.ПоАлфавиту без групп;
//	|Группировка ТовГруппа без групп;
//	|Условие((ВыбТовар.ПринадлежитГруппе(ТовГруппа)=1) ИЛИ (ВыбТовар=ТовГруппа));
//	|"//}}ЗАПРОС
//    ;
//     
//	Если Запрос.Выполнить(ТекстЗапроса)=0 Тогда
//		Возврат;
//	КонецЕсли;	
//	
//	СпецЦены=СоздатьОбъект("ТаблицаЗначений");
//
//	Запрос.Выгрузить(СпецЦены,1);
//	
//	//СпецЦены.НоваяКолонка("Клиент",,40);
//	//СпецЦены.НоваяКолонка("Скидка","Число",15,2);
//	//СпецЦены.НоваяКолонка("Цена","Число",15,2);
//                                        
//	
//	ВыбТовар.ИспользоватьДату(РабочаяДата());
//                         
//	РознЦена_=ЦенаТовараПоКатегорииДляТовара(ВыбТовар,Константа.РозничнаяКатегорияЦены);//РозничнаяЦенаТовара(ВыбТовар);
//
//	Пока Запрос.Группировка(1)=1 Цикл             
//		    
//		рез=0;
//		
//		ПечРознЦена=Формат(РознЦена_,"Ч15.2");
//		
//		СпецЦены.НайтиЗначение(Запрос.КлГруппа,рез,"Клиент");
//		Если (рез>0) и (ПустоеЗначение(Запрос.КлГруппа)=0) Тогда
//			СпецЦены.ПолучитьСтрокуПоНомеру(рез+1);
// 		    Скидка_=Шаблон("[Число(СпецЦены.Скидка) #Ч11.2]");
//			Цена_=Формат(РознЦена_*(100-Число(СпецЦены.Скидка))/100,"Ч15.2");
//		Иначе
//			Скидка_="";
//			Цена_="";
//			ПечРознЦена="";
//		КонецЕсли;
//
//		ПечРознЦена=Формат(РознЦена_,"Ч15.2");
//		
//		Таб.ВывестиСекцию("КлГруппа");
//		Пока Запрос.Группировка(2)=1 Цикл
//			рез=0;
//			СпецЦены.НайтиЗначение(Запрос.Клиент,рез,"КлГруппа");
//			
//			Если (Запрос.КлГруппа.Выбран()=0) И (рез>0) Тогда
//				Продолжить;			    
//			КонецЕсли;
//			Пока Запрос.Группировка(3)=1 Цикл
//				 Клиент_=Запрос.Клиент;            
//				 Скидка_=Шаблон("[Число(Запрос.Скидка) #Ч11.2]");
//				 Цена_=Формат(РознЦена_*(100-Число(Запрос.Скидка))/100,"Ч15.2");
//				Таб.ВывестиСекцию("Строка");
//			КонецЦикла;  
//		КонецЦикла;  
//	КонецЦикла;  
//	
//	Таб.Опции(0,0,4,0);
//	Таб.Защита(Константа.ФлагЗащитыТаблиц);
//	Таб.ТолькоПросмотр(1);
//	Таб.Показать("Спец. цены товаров у клиентов","");
//	
КонецПроцедуры


//-----------------------------------------------
Процедура ИнфОбОстатках()
	Если ТекущийЭлемент().ЭтоГруппа()=0 Тогда
         ОстатокПоВсемСкладам=Регистр.ОстаткиТоваров.СводныйОстаток(ТекущийЭлемент(),,,"ОстатокТовара");
		 ОстатокПоСкладу=Регистр.ОстаткиТоваров.СводныйОстаток(ТекущийЭлемент(),Склад,,"ОстатокТовара");
    
		
		Если Склад=Константа.ОсновнойСклад Тогда
			РезервПоСчетамПоСкладу= Регистр.РезервыТоваров.СводныйОстаток(ТекущийЭлемент(),,"РезервТовара");
		Иначе
			РезервПоСчетамПоСкладу=0;
		КонецЕсли;

         Доступно=ОстатокПоСкладу-РезервПоСчетамПоСкладу;
         Предупреждение("СКЛАД  "+Склад+".  ТОВАР  "+ТекущийЭлемент().Код+" "+ТекущийЭлемент().Наименование+
         " .  ОСТАТОК товара -  "+
         Формат(ОстатокПоСкладу,"Ч10.3")+ТекущийЭлемент().БазоваяЕдиницаИзмерения+
         " .  РЕЗЕРВ по счетам  -  "+
         Формат(РезервПоСчетамПоСкладу,"Ч10.3")+ТекущийЭлемент().БазоваяЕдиницаИзмерения+
         " .  ДОСТУПЕН в количестве -   "+
         Формат(Доступно,"Ч10.3")+ТекущийЭлемент().БазоваяЕдиницаИзмерения);
	КонецЕсли;
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриПереносеЭлементаВДругуюГруппу(Спр, Группа)
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	ПриИзмененииОбъекта(Контекст, ТекущийЭлемент(), РабочаяДата());
КонецПроцедуры   
//***************************************************
Процедура Стар_ПриЗаписи() 
	ПризнакНевыбора = 0;
	Если Найти(Врег(Код),"АА") <> 0 Тогда
		ПризнакНевыбора = 1;	
	КонецЕсли;  
	Если Найти(Врег(Код),"AA") <> 0 Тогда
		ПризнакНевыбора = 1;	
	КонецЕсли;
	//Если (Врег(Лев(СокрЛП(Наименование),2)) = "АА")ИЛИ(Врег(Лев(СокрЛП(Наименование),2)) = "AA") Тогда 
	//	ПризнакНевыбора = 1;
	//КонецЕсли;	
КонецПроцедуры 
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписи()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_  
	Стар_ПриЗаписи();
	ПриИзмененииОбъекта(Контекст, ТекущийЭлемент(), РабочаяДата());
КонецПроцедуры  

//*******************************************
// Процедура генерации запроса СписокТоваров.
//
Процедура СписокТоваров()
	Перем Запрос, ТекстЗапроса;
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(СписокТоваров)
	|Товар = Справочник.Номенклатура.ТекущийЭлемент;
	|Поставщик = Справочник.Номенклатура.Поставщик;
	|БазЕд = Справочник.Номенклатура.БазоваяЕдиницаИзмерения;
	|НаименованиеДляЦенника = Справочник.Номенклатура.НаименованиеДляЦенника;
	|Наименование = Справочник.Номенклатура.Наименование;
	|Группировка Товар упорядочить по Товар.Код;
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;

	// Подготовка к заполнению выходных форм данными запроса

	// Заполнение полей "Заголовок"

	Пока Запрос.Группировка(1) = 1 Цикл
		// Заполнение полей Товар

	КонецЦикла;
	// Вывод заполненной формы

КонецПроцедуры

//Конец текста, вставленного Инсталлятором МОД

//Склад=Константа.ОсновнойСклад;

Рез_Поиска=0;  
перЛатвия = Перечисление.МестаИспользования.Латвия;
перЛитва = Перечисление.МестаИспользования.Литва;
Попытка
	Расш=СоздатьОбъект("РасширениеФормы");	
Исключение
	Расш="";
КонецПопытки;
