Перем Записан;
Перем Конт; 
Перем СписокПодч;
Перем текМестоИсп;
Перем перЛатвия, перЛитва;
Перем спИзмененийРеквизитов;
Перем _тпУпаковка,_тпУпаковка2,_тпУпаковка3, ТаблУпак;
Перем _тпДопСклады,_тпСвойстваТоваров;
Перем _тпЗамены;
Перем Расш;
Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы; 
Перем старБазЕд;
Перем спКодов,п_ИТСоставSQL;
Перем ОбъектКопир;
//Перем КоэфНеттоВеса;

Функция Обновить_Большое_Фото()  Далее
Процедура ОткрытьФото(Реж="") Далее
Процедура КопироватьКарточкуТовара() Далее
//======================================================================

//{***Состав SQL***\\

Функция Пререкодировка(стр,спПерекод)
	рез = "";
	Для н = 1 по СтрДлина(стр) Цикл
		ТекСим = Сред(стр,н,1);
		Код = спПерекод.Получить(КодСимв(ТекСим));
		Если ПустоеЗначение(Код) = 1 Тогда
			рез = рез + ТекСим;
		Иначе
			рез = рез + Симв(Число(Код));
		КонецЕсли;
	КонецЦикла;
	Возврат рез;
КонецФункции


Функция ФорматВыводаСостава( парам )
	л_Товар=ТекущийЭлемент();
	Если п_ИТСоставSQL.КоличествоСтрок()=0 Тогда
		Возврат "";
	КонецЕсли;
	п_ИТСоставSQL.ВыбратьСтроки();
	п_ИТСоставSQL.ПолучитьСтроку();
	
//	ПоАлфавиту=Translate_Descr(Наименование);
//	Пререкодировка(п_ИТСоставSQL.LVtext,спКодов);
	
	Если парам = "ИмяТовараLV" Тогда
		Возврат НаименованиеLV;
	ИначеЕсли парам = "ОписаниеLV" Тогда
		Возврат п_ИТСоставSQL.LVtext;
	ИначеЕсли парам = "ИмяТовараLT" Тогда
		Возврат НаименованиеLT;
	ИначеЕсли парам = "ОписаниеLT" Тогда
		Возврат п_ИТСоставSQL.LTtext;
	ИначеЕсли парам = "ИмяТовараEE" Тогда
		Возврат НаименованиеEE;
	ИначеЕсли парам = "ОписаниеEE" Тогда
		Возврат п_ИТСоставSQL.EEtext;
	КонецЕсли;
КонецФункции

Функция ЗагрузкаИТ(п_СсылкаТовара)
	л_ИТ=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос=СоздатьОбъект("ODBCRecordSet");
	
	ТекстЗапроса="SELECT [CODE]
		|      ,[LABEL]
		|      ,FOOD_WWW.dbo.ConvUTF21c(CONVERT(nvarchar(4000),LVT),0) LVname 
		|      ,FOOD_WWW.dbo.ConvUTF21c(CONVERT(nvarchar(4000),LVB),0) LVtext 		
		|      ,FOOD_WWW.dbo.ConvUTF21c(CONVERT(nvarchar(4000),EET),1) EEname
		|      ,FOOD_WWW.dbo.ConvUTF21c(CONVERT(nvarchar(4000),EEB),1) EEtext
		|      ,FOOD_WWW.dbo.ConvUTF21c(CONVERT(nvarchar(4000),LTT),1) LTname
		|      ,FOOD_WWW.dbo.ConvUTF21c(CONVERT(nvarchar(4000),LTB),1) LTtext
		|FROM TRADE1.FOOD_WWW.dbo.labels
//		|WHERE (CODE = :код)
		|WHERE (ID = :код)
		|";	
	
	Запрос.УстановитьТекстовыйПараметр("код",п_СсылкаТовара);
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,л_ИТ);
	Возврат л_ИТ;
КонецФункции


Функция NumberToUpperChar( Num )
	UpperCharSet = "ABCDEFGHIJ";
	Num = Число(Прав(Num,1));
	Стр = Сред(UpperCharSet, Num + 1, 1);
	Возврат Стр;
КонецФункции
Функция NumberToLowerChar( Num )
	LowerCharSet = "abcdefghij";
	Num = Число(Прав(Num,1));
	Стр = Сред(LowerCharSet, Num + 1, 1);
	Возврат Стр;
КонецФункции
Функция ParityCheck(Код) // Вычисление кода четности
	четн = 0; неч  = 0;
	// Для строки с нечетной длинной верхняя граница 
	// округлается в большую сторону
	Для Поз = 1 По Окр(СтрДлина(Код) / 2 + 0.1,0) Цикл
		неч  = неч  + Сред(Код, Поз * 2 - 1, 1);
		Если Поз * 2 <= СтрДлина(Код) Тогда
			четн = четн + Сред(Код, Поз * 2, 1);
		КонецЕсли;
	КонецЦикла;
	КодЧетности = Число(Прав(Строка(1000 - четн - неч * 3), 1));
	Возврат КодЧетности;
КонецФункции
Функция ДобавитьСлева( Стр1, Длн, Стр2 )
	Стр0 = Стр1;
	Пока СтрДлина( Стр0 ) <= Длн Цикл Стр0 = Стр2 + Стр0; КонецЦикла;
	Стр0 = Прав( Стр0, Длн );
	Возврат Стр0;
КонецФункции
Функция ПолучитьШтрихКод(пКод,пВес)
	Если пВес < 10 Тогда 
		Преф = "23"; 
		текВес = Строка(Окр(пВес,3) * 1000);
	ИначеЕсли пВес < 100 Тогда 
		Преф = "24";
		текВес = Строка(Окр(пВес,2) * 100);
	ИначеЕсли пВес < 1000 Тогда
		Преф = "25";
		текВес = Строка(Окр(пВес,1) * 10);
	КонецЕсли;
	Возврат Число(Преф+пКод+текВес);
КонецФункции
Функция EAN13CodeGenerate(п_код)
	// Проверки
	Если ТипЗначения(п_код) <> 1 Тогда
		Сообщить("Код для EAN13 должен числовым."); Возврат "";
	КонецЕсли;
    
	Если СтрДлина(п_код) > 12 Тогда
		Сообщить("Код для EAN13 должен быть длинной не более 12 символов."); Возврат "";
	КонецЕсли;               
	// Дополнение лидирующими пробелами
	п_код = ДобавитьСлева(Строка(п_код),12,"0");
	// Добавление кода четности - для кода, дополненого слева "0"
	п_код = п_код + Строка(ParityCheck("0"+п_код));
	//Разбор строки
	ПервыйФлаг = Число(Сред(п_код,1,1));
	левстр     = Сред(п_код,2,6);
	правстр    = Сред(п_код,8,6);
	правкод = "";
	Для Поз = 1 По 6 Цикл
		правкод = правкод + NumberToLowerChar(Сред(правстр,Поз,1));
	КонецЦикла;
    //  Формирование левой части кода зависит от значениа ПервыйФлаг
	Если ПервыйФлаг = 0 Тогда	//    0           A  A  A  A  A
		левкод = "#!" + Лев(левстр,1) 
			+ Сред(левстр,2,1)
			+ Сред(левстр,3,1)
			+ Сред(левстр,4,1)
			+ Сред(левстр,5,1)
			+ Сред(левстр,6,1);
	ИначеЕсли ПервыйФлаг = 1 Тогда	//    1           A  A  B  A  B  B
		левкод = "$!" 
			+ Лев(левстр,1)
			+ Сред(левстр,2,1)
			+ NumberToUpperChar(Сред(левстр,3,1))
			+ Сред(левстр,4,1)
			+ NumberToUpperChar(Сред(левстр,5,1))
			+ NumberToUpperChar(Сред(левстр,6,1));
	ИначеЕсли ПервыйФлаг = 2 Тогда 	//    2           A  A  B  B  A  B
		левкод = "%!"
			+ Лев(левстр,1)
			+ Сред(левстр,2,1)
			+ NumberToUpperChar(Сред(левстр,3,1))
			+ NumberToUpperChar(Сред(левстр,4,1))
			+ Сред(левстр,5,1)
			+ NumberToUpperChar(Сред(левстр,6,1));
	ИначеЕсли ПервыйФлаг = 3 Тогда   //    3           A  A  B  B  B  A
		левкод = "&!" 
			+ Лев(левстр,1)
			+ Сред(левстр,2,1)
			+ NumberToUpperChar(Сред(левстр,3,1))
			+ NumberToUpperChar(Сред(левстр,4,1))
			+ NumberToUpperChar(Сред(левстр,5,1))
			+ Сред(левстр,6,1);
	ИначеЕсли ПервыйФлаг = 4 Тогда   //    4           A  B  A  A  B  B
		левкод = "'!" 
			+ Лев(левстр,1)
			+ NumberToUpperChar(Сред(левстр,2,1))
			+ Сред(левстр,3,1)
			+ Сред(левстр,4,1)
			+ NumberToUpperChar(Сред(левстр,5,1))
			+ NumberToUpperChar(Сред(левстр,6,1));
	ИначеЕсли ПервыйФлаг = 5 Тогда   //    5           A  B  B  A  A  B
		левкод = "(!" 
			+ Лев(левстр,1)
			+ NumberToUpperChar(Сред(левстр,2,1))
			+ NumberToUpperChar(Сред(левстр,3,1))
			+ Сред(левстр,4,1)
			+ Сред(левстр,5,1)
			+ NumberToUpperChar(Сред(левстр,6,1));
	ИначеЕсли ПервыйФлаг = 6 Тогда   //    6           A  B  B  B  A  A
		левкод = ")!" 
			+ Лев(левстр,1)
			+ NumberToUpperChar(Сред(левстр,2,1))
			+ NumberToUpperChar(Сред(левстр,3,1))
			+ NumberToUpperChar(Сред(левстр,4,1))
			+ Сред(левстр,5,1)
			+ Сред(левстр,6,1);
	ИначеЕсли ПервыйФлаг = 7 Тогда   //    7           A  B  A  B  A  B
		левкод = "*!" 
			+ Лев(левстр,1)
			+ NumberToUpperChar(Сред(левстр,2,1))
			+ Сред(левстр,3,1)
			+ NumberToUpperChar(Сред(левстр,4,1))
			+ Сред(левстр,5,1)
			+ NumberToUpperChar(Сред(левстр,6,1));
	ИначеЕсли ПервыйФлаг = 8 Тогда   //    8           A  B  A  B  B  A
		левкод = "+!" 
			+ Лев(левстр,1)
			+ NumberToUpperChar(Сред(левстр,2,1))
			+ Сред(левстр,3,1)
			+ NumberToUpperChar(Сред(левстр,4,1))
			+ NumberToUpperChar(Сред(левстр,5,1))
			+ Сред(левстр,6,1);
	ИначеЕсли ПервыйФлаг = 9 Тогда   //    9           A  B  B  A  B  A
		левкод = ",!" 
			+ Лев(левстр,1)
			+ NumberToUpperChar(Сред(левстр,2,1))
			+ NumberToUpperChar(Сред(левстр,3,1))
			+ Сред(левстр,4,1)
			+ NumberToUpperChar(Сред(левстр,5,1))
			+ Сред(левстр,6,1);
	КонецЕсли;                                               
	// Получение строки - результата
	кодстр = левкод + "-" + правкод + "!";
	Возврат кодстр;
КонецФункции

Процедура ПоказатьНаклейку()

	Если п_ИТСоставSQL.КоличествоСтрок()=0 Тогда
		Сообщить("В базе данных наклеек, данных по товару нет !");
		Возврат;
	КонецЕсли;

	
	таб = СоздатьОбъект( "Таблица" );
	таб.ИсходнаяТаблица( "Наклейка" );
	
	л_Товар=ТекущийЭлемент();
	
	п_ИТСоставSQL=ЗагрузкаИТ(л_Товар);
//	п_ИТСоставSQL.Показать();
	п_ИТСоставSQL.ВыбратьСтроки();
	п_ИТСоставSQL.ПолучитьСтроку();

	п_ИмяТовараLV=Пререкодировка(л_Товар.НаименованиеLV,спКодов);
	п_ОписаниеLV=Пререкодировка(п_ИТСоставSQL.LVtext,спКодов);
	п_ИмяТовараLT=Пререкодировка(л_Товар.НаименованиеLT,спКодов);
	п_ОписаниеLT=Пререкодировка(п_ИТСоставSQL.LTtext,спКодов);
	п_ИмяТовараEE=Пререкодировка(л_Товар.НаименованиеEE,спКодов);
	п_ОписаниеEE=Пререкодировка(п_ИТСоставSQL.EEtext,спКодов);
	таб.ВывестиСекцию( "с_Описание" );

	пВес = Шаблон("0 kg");
	пШтрихКод = EAN13CodeGenerate(ПолучитьШтрихКод(л_Товар.ВесовойКод,0));	
	таб.ВывестиСекцию( "с_ШтрихкодОписания" );
	

	таб.ВывестиСекцию( "ИмяТаблицы" );
	
	ТЗ=СоздатьОбъект("ТаблицаЗначений");
	ТЗ.Загрузить(ТаблЭнергЦенность);
	ТЗ.ВыбратьСтроки();
	Пока ТЗ.ПолучитьСтроку() = 1 Цикл
		
		
//		Если (ТЗ.Количество=0)или(ПустоеЗначение(ТЗ.Количество)=1) Тогда
		Если (ТЗ.КоличествоТекст="")или(ПустоеЗначение(ТЗ.КоличествоТекст)=1) Тогда
			
			Если Найти(ТЗ.ВидСостава,"tostarp")=0 Тогда
				Продолжить;
			КонецЕсли;   
			
		КонецЕсли;
		
		л_составTXT=СокрЛП(ТЗ.ТекущийЭлемент.ВидСостава.Наименование);
		л_составTXT=л_составTXT+"/"+СокрЛП(ТЗ.ТекущийЭлемент.ВидСостава.Лит);
		л_составTXT=л_составTXT+"/"+СокрЛП(ТЗ.ТекущийЭлемент.ВидСостава.Эст);
		//п_ВидСостава=Пререкодировка(ТЗ.ВидСостава,спКодов);
		п_ВидСостава=Пререкодировка(л_составTXT,спКодов);
		
		//Заголовок(Пререкодировка(л_составTXT,спКодов));
		
		Если Найти(ТЗ.ВидСостава,"tostarp")=1 Тогда
			п_количество="";
		Иначе
//			п_количество=СокрЛП(ТЗ.Количество);
			п_количество=СокрЛП(ТЗ.КоличествоТекст);
		КонецЕсли;
		
		таб.ВывестиСекцию( "ТаблицаСтрока" );
	КонецЦикла;
	
	таб.ПараметрыСтраницы(1,100,,1,0,2,0,0,0,1,,);
	таб.Показать( "" );
КонецПроцедуры // ПоказатьНалейку

//}***Состав SQL***\\

Процедура УстановитьНеобходимостьСрокаГодности()
	
	ЕстьТребованиеСрока = Родитель.ФлПечатьСроковГодности;
	СпрСвойства = СоздатьОбъект("Справочник.СвойстваНоменклатуры");
	СпрСвойства.ИспользоватьВладельца(ТекущийЭлемент());
	СпрСвойства .ВыбратьЭлементы();
	Пока СпрСвойства .ПолучитьЭлемент() = 1 Цикл
		Если НАЙТИ(СпрСвойства.ЗначениеСвойства.Наименование,"BIO")>0 Тогда
			ЕстьТребованиеСрока = 1;
		КонецЕсли;
	КонецЦикла;
	
	ФлПечатьСроковГодности = ЕстьТребованиеСрока;	
	
КонецПроцедуры

// Функция для нахождения нового кода контрагента
// Прибавляет к последниму коду 1
// если диапозон превышен, то пытается найти свободный код
// флПоПорядку - если 1, то сразу ищет свободный
Функция семНайтиНовыйКод( эл, флПоПорядку = 0, ПрефиксГруппы = "", ДлинаКодаГруппы) 
	// Получим необходимые константы
	ДлинаКода = 7;
	КодГруппы = Лев( ?( ПустоеЗначение( эл.Родитель ) = 1, "", СокрЛП( ПрефиксГруппы ) ) + "00000000", ДлинаКодаГруппы );
	ДлинаИзмКод = ДлинаКода - СтрДлина( КодГруппы );
	МаксКод = Число( Лев( "9999999999", ДлинаИзмКод ) );
	МаскаКода = Лев( "0000000000", ДлинаКода );

	// Найдем последний код для этой группы
	ТабДанных = "SC"+MDW.ИДОбъекта( Метаданные.Справочник(эл.Вид()));
	ЗапросМакс = Шаблон( "SELECT max($Спр.КодТовара) as _max FROM $Справочник.Номенклатура Спр (nolock) WHERE ($Спр.КодТовара LIKE '[КодГруппы]%') AND (isfolder = 2) AND LEN(code)>=7" );
	ТЗРезультат=СоздатьОбъект("ТаблицаЗначений");
	ТЗРезультат=Соединение.ВыполнитьИнструкцию(ЗапросМакс,,1);
	Если ТЗРезультат.КоличествоСтрок()=0 Тогда
//		Сообщить( "Новый код не найден.", "!" ); 
//		Сообщить( "Ошибка соединения с SQL сервером.", "I" ); 
		Возврат ""; 
	КонецЕсли;
	                 
	ПоследнийКод=СокрЛП(ТЗРезультат.ПолучитьЗначение(1,"_max"));
	Если Число(ПоследнийКод)=0 Тогда
		НовыйКод =  Число(Прав(глДополнитьСтрокуП(КодГруппы,"0",ДлинаКода),ДлинаИзмКод)) + 1;
	Иначе
		НовыйКод = Число( Прав( ПоследнийКод, ДлинаИзмКод ) ) + 1;
	КонецЕсли;
	Если ( НовыйКод > МаксКод ) или ( флПоПорядку = 1 ) Тогда 
		// Если новый код выходит за рамки диапозона, то пытаемся найти пропуски в серии кодов
		ЗапросКодов = Шаблон( "SELECT REPLACE( $Спр.КодТовара, ' ', '' ) as cod FROM $Справочник.Номенклатура Спр  (nolock) WHERE ($Спр.КодТовара LIKE '[КодГруппы]%') AND (isfolder = 2) AND LEN(code)>=7 ORDER BY code" );
		ТЗРезультат=Соединение.ВыполнитьИнструкцию(ЗапросКодов,,1);

		Если ТЗРезультат.КоличествоСтрок()=0 Тогда
			НовыйКод=1;
			Возврат КодГруппы + Прав( МаскаКода + НовыйКод, ДлинаИзмКод );
//			Сообщить( "Новый код не найден.", "!" ); 
//			Сообщить( "Ошибка соединения с SQL сервером.", "I" ); 
			Возврат ""; 
		КонецЕсли;
		сп = СоздатьОбъект( "СписокЗначений" );
		ТЗРезультат.Выгрузить(сп,,,"cod");
		НовыйКод = 1;
		Пока НовыйКод < МаксКод Цикл
			Если сп.НайтиЗначение( КодГруппы + Прав( МаскаКода + НовыйКод, ДлинаИзмКод ) ) = 0 Тогда
				Возврат КодГруппы + Прав( МаскаКода + НовыйКод, ДлинаИзмКод );
			Иначе
				НовыйКод = НовыйКод + 1;
			КонецЕсли;
		КонецЦикла;
	Иначе 
		// Если новый код еще в рамках диапозона, то формируем полный код для данной группы
		Возврат КодГруппы + Прав( МаскаКода + НовыйКод, ДлинаИзмКод );
	КонецЕсли;
	Сообщить( "Новый код не найден.", "!" ); 
	Сообщить( "Возмомно все возможные коды уже использованы!!!", "I" );
	Возврат "";
КонецФункции

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Процедура СформироватьКод()
	
	//Если Вопрос("Сформировать новый код?","Да+Нет")="Нет" Тогда
	//	Возврат;
	//КонецЕсли;
	
		
	ПрефиксКода = глДополнитьСтрокуП(СокрЛП(Родитель.Код),"0",4);
	//Сообщить(ПрефиксКода);
	
	Если  (ПустоеЗначение(КодТовара)=0) И (Лев(КодТовара,4)=ПрефиксКода) Тогда
		Возврат;
	КонецЕсли;
	Код=семНайтиНовыйКод(Контекст,1,ПрефиксКода,СтрДлина(ПрефиксКода));
	КодТовара = Код;

	Если ПустоеЗначение(Код)=1 Тогда
		Код=семНайтиНовыйКод(Контекст,1,ПрефиксКода,СтрДлина(ПрефиксКода)-1);
		КодТовара = Код;
	КонецЕсли;	
	
	Возврат;
	// ищем перебором
	Счетчик = 1;
	Пока 1 = 1 Цикл
		КодСозданный = Лев(Родитель.Код,СтрДлина(Родитель.Код) - 1);
		ДлинаКода = 8 - СтрДлина(КодСозданный) - СтрДлина(Счетчик);
		Пока ДлинаКода > 0 Цикл
			КодСозданный = КодСозданный + "0";
			ДлинаКода = ДлинаКода - 1;
		КонецЦикла;
		КодСозданный = КодСозданный + Счетчик;
		Если СтрДлина(КодСозданный) > 8 Тогда
			Предупреждение("Не удалось сформировать новый код. Необходимо его ввести вручную!");
			Прервать;
		КонецЕсли;
		спр=СоздатьОбъект("Справочник.Номенклатура");
		Если спр.НайтиПоКоду(КодСозданный,0)=1 Тогда
			Если спр.ТекущийЭлемент()<>ТекущийЭлемент() Тогда
				Счетчик = Счетчик + 1;
				Продолжить;
			Иначе
				Прервать;
			КонецЕсли;
		Иначе
			Код = КодСозданный;
			КодТовара = Код;
			Прервать;
		КонецЕсли;
	КонецЦикла;
		
	
	//УстановитьНовыйКод(Родитель.Код);
	//
	//// проверяем на уникальность
	//спр=СоздатьОбъект("Справочник.Номенклатура");
	//Если спр.НайтиПоКоду(Код,0)=1 Тогда
	//	Если спр.ТекущийЭлемент()<>ТекущийЭлемент() Тогда
	//		Предупреждение("Не удалось сформировать новый код. Необходимо его ввести вручную!");
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

Процедура кнДопШтрихкодОткрыть()
	ОткрытьФормуМодально("Справочник.ШтрихКоды",,,,ТекущийЭлемент());
КонецПроцедуры // кнДопШтрихкодОткрыть


Процедура НастроитьПривязки()
	УправлениеФормой = СоздатьОбъект("УправлениеФормой");
	Привязки = УправлениеФормой.ПривязкаЭлементов;
	//Привязки//:УправлениеФормой.Привязка

		
	Привязки.УстановитьГраницыПоФорме("кнДобавитьЗамену",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кнУдалитьЗамену",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("лЗамены",1,1,0,1);
	Привязки.УстановитьГраницыПоФорме("ТПЗамены",1,1,0,1);
	//Привязки.УстановитьГраницыПоФорме("кнОК",1,0,0,1);
	//Привязки.УстановитьГраницыПоФорме("кнЗакрыть",1,0,0,1);
	
	Привязки.Привязать();
	
КонецПроцедуры


Процедура НастройкаТПЗамены()
	Колонка = _ТПЗамены.Колонки.Добавить("КодЗамены"); Колонка.Данные = "КодЗамены"; Колонка.Заголовок = "Код"; 
	Колонка.ЗнакУпорядочивания = 1;
	Колонка.Ширина = 15;

	Колонка = _ТПЗамены.Колонки.Добавить("ТоварЗамены"); Колонка.Данные = "ТоварЗамены"; Колонка.Заголовок = "Товар"; 
	Колонка.ЗнакУпорядочивания = 1;
	Колонка.Ширина = 60;

	Колонка = _ТПЗамены.Колонки.Добавить("ЕдИзм"); Колонка.Данные = "ЕдИзм"; Колонка.Заголовок = "Ед.изм"; 
	Колонка.ЗнакУпорядочивания = 1;
	Колонка.Ширина = 10;

//	Колонка = _ТПЗамены.Колонки.Добавить("ЕдИзмКилограмм"); Колонка.Данные = "ЕдИзмКилограмм"; Колонка.Заголовок = "Ед.кг"; 
//	Колонка.ЗнакУпорядочивания = 1;
//	Колонка.Ширина = 10;

	Колонка = _ТПЗамены.Колонки.Добавить("ОснЕдИзм"); Колонка.Данные = "ОснЕдИзм"; Колонка.Заголовок = "Баз ед"; 
	Колонка.ЗнакУпорядочивания = 1;
	Колонка.Ширина = 10;

	//Колонка = _ТПЗамены.Колонки.Добавить("БрендЗамены"); Колонка.Данные = "БрендЗамены"; Колонка.Заголовок = "Бренд"; 
	//Колонка.ЗнакУпорядочивания = 1;
	//Колонка.Ширина = 25;

	Колонка = _ТПЗамены.Колонки.Добавить("ОстатокНаСкладе"); Колонка.Данные = "ОстатокНаСкладе"; Колонка.Заголовок = "Ост. на складе"; 
	Колонка.ЗнакУпорядочивания = 1;
	Колонка.Ширина = 10;

	Колонка = _ТПЗамены.Колонки.Добавить("ОстатокОбщий"); Колонка.Данные = "ОстатокОбщий"; Колонка.Заголовок = "На всех складах"; 
	Колонка.ЗнакУпорядочивания = 1;
	Колонка.Ширина = 10;

	Колонка = _ТПЗамены.Колонки.Добавить("ЦенаОпт"); Колонка.Данные = "ЦенаОпт"; Колонка.Заголовок = "Цена опт"; 
	Колонка.ЗнакУпорядочивания = 0;
	Колонка.Ширина = 12;

	Колонка = _ТПЗамены.Колонки.Добавить("ЦенаРозн"); Колонка.Данные = "ЦенаРозн"; Колонка.Заголовок = "Цена розн"; 
	Колонка.ЗнакУпорядочивания = 0;
	Колонка.Ширина = 12;

	Колонка = _ТПЗамены.Колонки.Добавить("ЦенаРозн2"); Колонка.Данные = "ЦенаРозн2"; Колонка.Заголовок = "Цена розн2"; 
	Колонка.ЗнакУпорядочивания = 0;
	Колонка.Ширина = 12;

КонецПроцедуры


Процедура ЗаполнитьТПЗамены(Обновить=0)
	
	ИсточникДанных = СоздатьОбъект("ПоставщикДанныхODBC.MSSQL"); 
	ИсточникДанных.БазаДанных =  СоздатьОбъект("ODBCDataBase"); 

	ТекстЗапроса="SELECT ТекущийЭлемент as [ТекущийЭлемент $Справочник.НоменклатураЗамены]
	|					, ТоварЗамены as [ТоварЗамены $Справочник.Номенклатура]
	|					, КодЗамены as КодЗамены
	|					, БрендЗамены as [БрендЗамены $Справочник.Бренды]
	|					, БазоваяЕдиницаИзмерения as [ЕдИзм $Перечисление.ЕдиницыИзмерения]
	|					, ?ОснЕдИзм(14,9) as [ОснЕдИзм $Перечисление.ЕдиницыИзмерения]
	|					, ЕдИзмКилограмм as [ЕдИзмКилограмм $Справочник.Единицы]
	|					, ROUND(ОстаткиТоваровОстатки.ОстатокТовараОстаток*ОснЕдИзмКоэфф/ЕдИзмКоэфф,3) as ОстатокНаСкладе
	|					, ROUND(ОстаткиТоваровОбщие.ОстатокТовараОстаток*ОснЕдИзмКоэфф/ЕдИзмКоэфф,3) as ОстатокОбщий 
	|					, ROUND(ЦенаОпт/КурсОптВалюта*ЕдИзмКоэфф/ОснЕдИзмКоэфф,2) as ЦенаОпт
	|					, ROUND(ЦенаРозн/КурсРознВалюта*ЕдИзмКоэфф/ОснЕдИзмКоэфф,2) as ЦенаРозн
	|					, ROUND(ЦенаРозн2/КурсРозн2Валюта*ЕдИзмКоэфф/ОснЕдИзмКоэфф,2) as ЦенаРозн2
	|					, Главный as Главный
	|			  FROM (SELECT 99 as Главный 
	|					, ТоварыЗамены.ID ТекущийЭлемент
	|					, Товары.ID as ТоварЗамены
	|					, Товары.CODE as КодЗамены
	|					, $Товары.Бренд as БрендЗамены
	|					, $Товары.БазоваяЕдиницаИзмерения as БазоваяЕдиницаИзмерения
	|					, Единицы.ID as ЕдИзмКилограмм
	|					, $Единицы.Коэффициент as ЕдИзмКоэфф
	|					, COALESCE((SELECT TOP 1 $Единицы2.Коэффициент 
	|					   FROM $Справочник.Единицы Единицы2 (NOLOCK)
	|					   WHERE PARENTEXT = ?Товар(14,9) AND  $Единицы2.Единица = $Перечисление.ЕдиницыИзмерения.Килограмм AND ISMARK =0),1) ОснЕдИзмКоэфф
	|					, $ПоследнееЗначение.Цены.Цена(Цены.ID,GETDATE()) as ЦенаОпт
	|					, $ПоследнееЗначение.Валюты.Курс($Цены.Валюта,GETDATE()) as КурсОптВалюта
	|					, $ПоследнееЗначение.Цены.Цена(Цены2.ID,GETDATE()) as ЦенаРозн
	|					, $ПоследнееЗначение.Валюты.Курс($Цены2.Валюта,GETDATE()) as КурсРознВалюта
	|					, $ПоследнееЗначение.Цены.Цена(Цены3.ID,GETDATE()) as ЦенаРозн2
	|					, $ПоследнееЗначение.Валюты.Курс($Цены3.Валюта,GETDATE()) as КурсРозн2Валюта
	|			 		FROM $Справочник.НоменклатураЗамены AS ТоварыЗамены (NOLOCK)
	|			  		INNER JOIN $Справочник.Номенклатура as Товары (NOLOCK) ON $ТоварыЗамены.ТоварЗамена = Товары.ID
	|					LEFT JOIN $Справочник.Единицы as Единицы (NOLOCK) ON Единицы.PARENTEXT = Товары.ID AND Единицы.ISMARK = 0 AND $Единицы.Единица = $Перечисление.ЕдиницыИзмерения.Килограмм
	|					LEFT JOIN $Справочник.Цены Цены (NOLOCK) ON Цены.PARENTEXT = Товары.ID AND Цены.ISMARK = 0 AND $Цены.КатегорияЦены = ?ОптоваяКатЦены(14,9)
	|					LEFT JOIN $Справочник.Цены Цены2 (NOLOCK) ON Цены2.PARENTEXT = Товары.ID AND Цены.ISMARK = 0 AND $Цены.КатегорияЦены = ?РозничнаяКатЦены(14,9)
	|					LEFT JOIN $Справочник.Цены Цены3 (NOLOCK) ON Цены3.PARENTEXT = Товары.ID AND Цены.ISMARK = 0 AND $Цены.КатегорияЦены = ?Розничная2КатЦены(14,9)
	|			  		WHERE (ТоварыЗамены.ISMARK = 0) AND 
	|						$ТоварыЗамены.Идентификатор IN (SELECT $Спр.Идентификатор FROM $Справочник.НоменклатураЗамены AS Спр (NOLOCK) WHERE $Спр.ТоварЗамена = ?Товар(14,9))
	|						AND $ТоварыЗамены.ТоварЗамена <> ?Товар(14,9)
	|					UNION ALL
	|					-- все альтернативы, которые прописаны у главного товара - новая версия
	|					SELECT 99 as Главный 
	|					, ТоварыЗамены.ID ТекущийЭлемент
	|					, Товары.ID as ТоварЗамены
	|					, Товары.CODE as КодЗамены
	|					, $Товары.Бренд as БрендЗамены
	|					, $Товары.БазоваяЕдиницаИзмерения as БазоваяЕдиницаИзмерения
	|					, Единицы.ID as ЕдИзмКилограмм
	|					, $Единицы.Коэффициент as ЕдИзмКоэфф
	|					, COALESCE((SELECT TOP 1 $Единицы2.Коэффициент 
	|					   FROM $Справочник.Единицы Единицы2 (NOLOCK)
	|					   WHERE PARENTEXT = ?Товар(14,9) AND  $Единицы2.Единица = $Перечисление.ЕдиницыИзмерения.Килограмм AND ISMARK =0),1) ОснЕдИзмКоэфф
	|					, $ПоследнееЗначение.Цены.Цена(Цены.ID,GETDATE()) as ЦенаОпт
	|					, $ПоследнееЗначение.Валюты.Курс($Цены.Валюта,GETDATE()) as КурсОптВалюта
	|					, $ПоследнееЗначение.Цены.Цена(Цены2.ID,GETDATE()) as ЦенаРозн
	|					, $ПоследнееЗначение.Валюты.Курс($Цены2.Валюта,GETDATE()) as КурсРознВалюта
	|					, $ПоследнееЗначение.Цены.Цена(Цены3.ID,GETDATE()) as ЦенаРозн2
	|					, $ПоследнееЗначение.Валюты.Курс($Цены3.Валюта,GETDATE()) as КурсРозн2Валюта
	|			 		FROM $Справочник.НоменклатураЗамены AS ТоварыЗамены (NOLOCK)
	|			  		INNER JOIN $Справочник.Номенклатура as Товары (NOLOCK) ON $ТоварыЗамены.ТоварЗамена = Товары.ID
	|					LEFT JOIN $Справочник.Единицы as Единицы (NOLOCK) ON Единицы.PARENTEXT = Товары.ID AND Единицы.ISMARK = 0 AND $Единицы.Единица = $Перечисление.ЕдиницыИзмерения.Килограмм
	|					LEFT JOIN $Справочник.Цены Цены (NOLOCK) ON Цены.PARENTEXT = Товары.ID AND Цены.ISMARK = 0 AND $Цены.КатегорияЦены = ?ОптоваяКатЦены(14,9)
	|					LEFT JOIN $Справочник.Цены Цены2 (NOLOCK) ON Цены2.PARENTEXT = Товары.ID AND Цены.ISMARK = 0 AND $Цены.КатегорияЦены = ?РозничнаяКатЦены(14,9)
	|					LEFT JOIN $Справочник.Цены Цены3 (NOLOCK) ON Цены3.PARENTEXT = Товары.ID AND Цены.ISMARK = 0 AND $Цены.КатегорияЦены = ?Розничная2КатЦены(14,9)
	|			  		WHERE (ТоварыЗамены.ISMARK = 0) 
//	|						AND ($ТоварыЗамены.Товар IN (SELECT $Спр.Товар FROM  $Справочник.НоменклатураЗамены AS Спр (NOLOCK) WHERE $Спр.ТоварЗамена = ?Товар(14,9) AND $Спр.Товар<>$ПустойИД )) 
	|						AND ($ТоварыЗамены.Товар = ?Товар(14,9)) 
	|					UNION ALL
	|					-- все альтернативы, которые прописаны у главного товара - на основании альтернативы 
	|					SELECT 99 as Главный 
	|					, ТоварыЗамены.ID ТекущийЭлемент
	|					, Товары.ID as ТоварЗамены
	|					, Товары.CODE as КодЗамены
	|					, $Товары.Бренд as БрендЗамены
	|					, $Товары.БазоваяЕдиницаИзмерения as БазоваяЕдиницаИзмерения
	|					, Единицы.ID as ЕдИзмКилограмм
	|					, $Единицы.Коэффициент as ЕдИзмКоэфф
	|					, COALESCE((SELECT TOP 1 $Единицы2.Коэффициент 
	|					   FROM $Справочник.Единицы Единицы2 (NOLOCK)
	|					   WHERE PARENTEXT = ?Товар(14,9) AND  $Единицы2.Единица = $Перечисление.ЕдиницыИзмерения.Килограмм AND ISMARK =0),1) ОснЕдИзмКоэфф
	|					, $ПоследнееЗначение.Цены.Цена(Цены.ID,GETDATE()) as ЦенаОпт
	|					, $ПоследнееЗначение.Валюты.Курс($Цены.Валюта,GETDATE()) as КурсОптВалюта
	|					, $ПоследнееЗначение.Цены.Цена(Цены2.ID,GETDATE()) as ЦенаРозн
	|					, $ПоследнееЗначение.Валюты.Курс($Цены2.Валюта,GETDATE()) as КурсРознВалюта
	|					, $ПоследнееЗначение.Цены.Цена(Цены3.ID,GETDATE()) as ЦенаРозн2
	|					, $ПоследнееЗначение.Валюты.Курс($Цены3.Валюта,GETDATE()) as КурсРозн2Валюта
	|			 		FROM $Справочник.НоменклатураЗамены AS ТоварыЗамены (NOLOCK)
	|			  		INNER JOIN $Справочник.Номенклатура as Товары (NOLOCK) ON $ТоварыЗамены.ТоварЗамена = Товары.ID
	|					LEFT JOIN $Справочник.Единицы as Единицы (NOLOCK) ON Единицы.PARENTEXT = Товары.ID AND Единицы.ISMARK = 0 AND $Единицы.Единица = $Перечисление.ЕдиницыИзмерения.Килограмм
	|					LEFT JOIN $Справочник.Цены Цены (NOLOCK) ON Цены.PARENTEXT = Товары.ID AND Цены.ISMARK = 0 AND $Цены.КатегорияЦены = ?ОптоваяКатЦены(14,9)
	|					LEFT JOIN $Справочник.Цены Цены2 (NOLOCK) ON Цены2.PARENTEXT = Товары.ID AND Цены.ISMARK = 0 AND $Цены.КатегорияЦены = ?РозничнаяКатЦены(14,9)
	|					LEFT JOIN $Справочник.Цены Цены3 (NOLOCK) ON Цены3.PARENTEXT = Товары.ID AND Цены.ISMARK = 0 AND $Цены.КатегорияЦены = ?Розничная2КатЦены(14,9)
	|			  		WHERE (ТоварыЗамены.ISMARK = 0) 
	|						AND ($ТоварыЗамены.Товар = (SELECT TOP 1 $Спр.Товар 
	|													FROM  $Справочник.НоменклатураЗамены AS Спр (NOLOCK) 
	|													WHERE $Спр.ТоварЗамена = ?Товар(14,9) AND $Спр.Товар<>$ПустойИД ) )  
	|					UNION ALL

	|					--основной товар
	|					SELECT 1 as Главный
	|					, ТоварыЗамены.ID ТекущийЭлемент
	|					, Товары.ID as ТоварЗамены
	|					, Товары.CODE as КодЗамены
	|					, $Товары.Бренд as БрендЗамены
	|					, $Товары.БазоваяЕдиницаИзмерения as БазоваяЕдиницаИзмерения
	|					, Единицы.ID as ЕдИзмКилограмм
	|					, $Единицы.Коэффициент as ЕдИзмКоэфф
	|					, COALESCE((SELECT TOP 1 $Единицы2.Коэффициент 
	|					   FROM $Справочник.Единицы Единицы2 (NOLOCK)
	|					   WHERE PARENTEXT = ?Товар(14,9) AND  $Единицы2.Единица = $Перечисление.ЕдиницыИзмерения.Килограмм AND ISMARK =0),1) ОснЕдИзмКоэфф
	|					, $ПоследнееЗначение.Цены.Цена(Цены.ID,GETDATE()) as ЦенаОпт
	|					, $ПоследнееЗначение.Валюты.Курс($Цены.Валюта,GETDATE()) as КурсОптВалюта
	|					, $ПоследнееЗначение.Цены.Цена(Цены2.ID,GETDATE()) as ЦенаРозн
	|					, $ПоследнееЗначение.Валюты.Курс($Цены2.Валюта,GETDATE()) as КурсРознВалюта
	|					, $ПоследнееЗначение.Цены.Цена(Цены3.ID,GETDATE()) as ЦенаРозн2
	|					, $ПоследнееЗначение.Валюты.Курс($Цены3.Валюта,GETDATE()) as КурсРозн2Валюта
	|			 		FROM $Справочник.НоменклатураЗамены AS ТоварыЗамены (NOLOCK)
	|			  		INNER JOIN $Справочник.Номенклатура as Товары (NOLOCK) ON $ТоварыЗамены.Товар = Товары.ID
	|					LEFT JOIN $Справочник.Единицы as Единицы (NOLOCK) ON Единицы.PARENTEXT = Товары.ID AND Единицы.ISMARK = 0 AND $Единицы.Единица = $Перечисление.ЕдиницыИзмерения.Килограмм
	|					LEFT JOIN $Справочник.Цены Цены (NOLOCK) ON Цены.PARENTEXT = Товары.ID AND Цены.ISMARK = 0 AND $Цены.КатегорияЦены = ?ОптоваяКатЦены(14,9)
	|					LEFT JOIN $Справочник.Цены Цены2 (NOLOCK) ON Цены2.PARENTEXT = Товары.ID AND Цены.ISMARK = 0 AND $Цены.КатегорияЦены = ?РозничнаяКатЦены(14,9)
	|					LEFT JOIN $Справочник.Цены Цены3 (NOLOCK) ON Цены3.PARENTEXT = Товары.ID AND Цены.ISMARK = 0 AND $Цены.КатегорияЦены = ?Розничная2КатЦены(14,9)
	|			  		WHERE (ТоварыЗамены.ISMARK = 0) 
	|						AND $ТоварыЗамены.ТоварЗамена = ?Товар(14,9)  
	|                   ) as ТоварыЗамены
	|			
	|			  LEFT JOIN $РегистрОстатки.ОстаткиТоваров(,
	|														,
	|													(Склад = ?ВыбСклад(14,9))	,
	|													Товар,
	|													ОстатокТовара) AS ОстаткиТоваровОстатки  ON ОстаткиТоваровОстатки.Товар = ТоварыЗамены.ТоварЗамены
	|			  LEFT JOIN $РегистрОстатки.ОстаткиТоваров(,
	|														,
	|													,
	|													Товар,
	|													ОстатокТовара) AS ОстаткиТоваровОбщие  ON ОстаткиТоваровОбщие.Товар = ТоварыЗамены.ТоварЗамены
	|";

	
	
	ИсточникДанных.УстТекстЗапроса(ТекстЗапроса);
	ИсточникДанных.Параметры.Установить("ОснЕдИзм",БазоваяЕдиницаИзмерения);
	ИсточникДанных.Параметры.Установить("Товар",ТекущийЭлемент());
	ИсточникДанных.Параметры.Установить("ВыбСклад",Константа.ОсновнойСклад);
	ИсточникДанных.Параметры.Установить("ОптоваяКатЦены",Константа.ОсновнаяКатегорияЦены);
	ИсточникДанных.Параметры.Установить("РозничнаяКатЦены",Константа.РозничнаяКатегорияЦены);
	ИсточникДанных.Параметры.Установить("Розничная2КатЦены",Константа.РозничнаяКатегорияЦены2);
	ИсточникДанных.УстКлючПорядка("Главный,КодЗамены, ТекущийЭлемент"); 
	ИсточникДанных.УстИДПоле("ТекущийЭлемент");

	Поле = ИсточникДанных.Поля.Добавить("ТекущийЭлемент");
  	Поле.Автоудаление = 0;
	
	_ТПЗамены.ТаймаутОбновления  			= 0;
//	_ТПОтвПерсоны.РежимВыделенияСтроки 		= 1;
	_ТПЗамены.ИзменятьПозициюКолонок 		= 1;
	_ТПЗамены.ЧередованиеЦветовСтрок 		= 1;

	_ТПЗамены.ПоставщикДанных = ИсточникДанных; 
	_ТПЗамены.ПоставщикДанных.Обновить(); 
	_ТПЗамены.ОбновитьСтроки();
	
КонецПроцедуры


Процедура кнДобавитьЗамену()
	Спр=СоздатьОбъект("Справочник.Номенклатура");
	Если Спр.Выбрать("Выберите товар для замены","ДляПодбора")=1 Тогда
		Если Спр.ТекущийЭлемент()=ТекущийЭлемент() Тогда
			Предупреждение("Нельзя выбирать текущий товар для замены!");
			Возврат;
		КонецЕсли;
		
		ТекстЗапроса="SELECT Count(*) Кол
		|			  FROM $Справочник.НоменклатураЗамены AS ТоварыЗамены (NOLOCK)
		|			  WHERE ТоварыЗамены.ISMARK = 0 AND $ТоварыЗамены.ТоварЗамена=:ТоварЗамены AND $ТоварыЗамены.Товар = :ТоварЗамены
		|";

		ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");
		ЗапросСКЛ.УстановитьТекстовыйПараметр("ТоварЗамены",Спр.ТекущийЭлемент());
		ЗапросСКЛ.УстановитьТекстовыйПараметр("ТекТовар",ТекущийЭлемент());
		ЕстьТоварЗамены = ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
		Если ЕстьТоварЗамены>0 Тогда
			Предупреждение("Данный товар уже добавлен в замену или сам является главным!");
			Возврат;
		КонецЕсли;
		
//		ТекстЗапроса="SELECT TOP 1 $ТоварыЗамены.Идентификатор
//		|			  FROM $Справочник.НоменклатураЗамены AS ТоварыЗамены (NOLOCK)
//		|			  WHERE $ТоварыЗамены.ТоварЗамена=:ТекТовар
//		|";
//
//		ЗапросСКЛ.УстановитьТекстовыйПараметр("ТекТовар",ТекущийЭлемент());
//		Идентификатор = ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);

		СпрЗамены = СоздатьОбъект("Справочник.НоменклатураЗамены");

		НачатьТранзакцию();
		//Если ПустоеЗначение(Идентификатор)=1 Тогда
		//	Идентификатор = глАПСоздатьИдентификатор();
		//КонецЕсли;
		
		СпрЗамены.Новый();
		СпрЗамены.Наименование 	= Спр.Код;
		СпрЗамены.Идентификатор 	= глАПСоздатьИдентификатор();
		СпрЗамены.Товар 			= ТекущийЭлемент();
		СпрЗамены.ТоварЗамена 	= Спр.ТекущийЭлемент();
		СпрЗамены.Записать();

		ЗафиксироватьТранзакцию();
		
		_ТПЗамены.ОбновитьСтроки();
	КонецЕсли;
	
КонецПроцедуры

Процедура кнУдалитьЗамену()
	//глтпВыполнитьДействие(_ТПЗамены,ТекущийЭлемент(),"Удалить");
	
	Если ПустоеЗначение(_ТПЗамены.ТекущаяСтрока)=1  Тогда
		Возврат;
	КонецЕсли;
	Если Вопрос("Вы действительно хотите удалить товар замены <"+_ТПЗамены.ТекущаяСтрока +">?","Да+Нет") = "Да" Тогда 
	Иначе
		Возврат; 
	КонецЕсли; 
	
	ТекстЗапроса="DELETE  
	|			  FROM $Справочник.НоменклатураЗамены
	|			  WHERE $Справочник.НоменклатураЗамены.ТоварЗамена=:Товар
	|";

	ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");
	ЗапросСКЛ.УстановитьТекстовыйПараметр("Товар",_ТПЗамены.ТекущаяСтрока.ТоварЗамена);
	ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);

	_ТПЗамены.ОбновитьСтроки();
КонецПроцедуры



Процедура НастройкаДопСкладыТП()
	Колонка = _тпДопСклады.Колонки.Добавить("Склад"); Колонка.Данные = "Склад"; Колонка.Заголовок = "Склад"; 
КонецПроцедуры

Процедура ЗаполнитьДопСкладыТП( Обновить=0 )
	
	Если Обновить=0 Тогда
		Источник = СоздатьОбъект("ПоставщикДанныхODBC.MSSQL"); 
		Источник.БазаДанных =  СоздатьОбъект("ODBCDataBase"); 
	КонецЕсли;
	
	ТекстЗапроса="SELECT СкладыТовара.ID as [ТекущийЭлемент $Справочник.СкладыТовара]
	|					, $СкладыТовара.Склад as [Склад $Справочник.МестаХранения]
	|			  FROM $Справочник.СкладыТовара AS СкладыТовара
	|			  WHERE СкладыТовара.PARENTEXT=?Товар(14,9) AND ISMARK = 0
	|";
	Источник.УстТекстЗапроса(ТекстЗапроса);
	Источник.Параметры.Установить("Товар",ТекущийЭлемент());
	
	Поле = Источник.Поля.Добавить("ТекущийЭлемент");
  	Поле.Автоудаление = 0;
	Поле.ТипБыстрогоПоиска = 1;

	Источник.УстКлючПорядка("Склад, ТекущийЭлемент"); 
	Источник.УстИДПоле("ТекущийЭлемент");
	
	_тпДопСклады.ТаймаутОбновления  		= 0;
	_тпДопСклады.РазрешитьПеретаскивание	= 0;
	
	
	_тпДопСклады.ПоставщикДанных = Источник; 
	_тпДопСклады.ПоставщикДанных.Обновить(); 
	_тпДопСклады.ОбновитьСтроки();
КонецПроцедуры



Процедура НастройкаСвойстваТП()
	Колонка = _тпСвойстваТоваров.Колонки.Добавить("ВидСвойства"); Колонка.Данные = "ВидСвойства"; Колонка.Заголовок = "Вид";
	Колонка = _тпСвойстваТоваров.Колонки.Добавить("ЗначениеСвойства"); Колонка.Данные = "ЗначениеСвойства"; Колонка.Заголовок = "Значение"; 
КонецПроцедуры

Процедура ЗаполнитьСвойстваТП( Обновить=0 )
	
	Если Обновить=0 Тогда
		Источник = СоздатьОбъект("ПоставщикДанныхODBC.MSSQL"); 
		Источник.БазаДанных =  СоздатьОбъект("ODBCDataBase"); 
	КонецЕсли;
	
	ТекстЗапроса="SELECT Спр.ID as [ТекущийЭлемент $Справочник.СвойстваНоменклатуры]
	|					, $Спр.ВидСвойства as [ВидСвойства $Справочник.ВидыСвойств]
	|					, $Спр.ЗначениеСвойства as [ЗначениеСвойства $Справочник.ЗначенияСвойств]
	|			  FROM $Справочник.СвойстваНоменклатуры AS Спр
	|			  WHERE Спр.PARENTEXT=?Товар(14,9) AND ISMARK = 0
	|";
	Источник.УстТекстЗапроса(ТекстЗапроса);
	Источник.Параметры.Установить("Товар",ТекущийЭлемент());
	
	Поле = Источник.Поля.Добавить("ТекущийЭлемент");
  	Поле.Автоудаление = 0;
	Поле.ТипБыстрогоПоиска = 1;

	Источник.УстКлючПорядка("ВидСвойства, ТекущийЭлемент"); 
	Источник.УстИДПоле("ТекущийЭлемент");
	
	_тпСвойстваТоваров.ТаймаутОбновления  		= 0;
	_тпСвойстваТоваров.РазрешитьПеретаскивание	= 0;
	
	
	_тпСвойстваТоваров.ПоставщикДанных = Источник; 
	_тпСвойстваТоваров.ПоставщикДанных.Обновить(); 
	_тпСвойстваТоваров.ОбновитьСтроки();
КонецПроцедуры


Процедура НастройкаУпаковкаТП()
	Колонка = _тпУпаковка.Колонки.Добавить("Материал"); Колонка.Данные = "Материал"; Колонка.Заголовок = "Материал"; 
	Колонка.Ширина = 15;
	Колонка = _тпУпаковка.Колонки.Добавить("ВесБруттоУпаковки"); Колонка.Данные = "ВесБруттоУпаковки"; Колонка.Заголовок = "Вес брутто"; 
	Колонка.Ширина = 8;
	//Колонка = _тпУпаковка.Колонки.Добавить("КолВУпаковке"); Колонка.Данные = "КолВУпаковке"; Колонка.Заголовок = "Кол. в упак."; 
	//Колонка.Ширина = 5;
	
	Колонка = _тпУпаковка2.Колонки.Добавить("Материал"); Колонка.Данные = "Материал"; Колонка.Заголовок = "Материал"; 
	Колонка.Ширина = 15;
	Колонка = _тпУпаковка2.Колонки.Добавить("ВесБруттоУпаковки"); Колонка.Данные = "ВесБруттоУпаковки"; Колонка.Заголовок = "Вес брутто"; 
	Колонка.Ширина = 8;
	//Колонка = _тпУпаковка2.Колонки.Добавить("КолВУпаковке"); Колонка.Данные = "КолВУпаковке"; Колонка.Заголовок = "Кол. в упак."; 
	//Колонка.Ширина = 5;
	
	Колонка = _тпУпаковка3.Колонки.Добавить("Материал"); Колонка.Данные = "Материал"; Колонка.Заголовок = "Материал"; 
	Колонка.Ширина = 15;
	Колонка = _тпУпаковка3.Колонки.Добавить("ВесБруттоУпаковки"); Колонка.Данные = "ВесБруттоУпаковки"; Колонка.Заголовок = "Вес брутто"; 
	Колонка.Ширина = 8;
	//Колонка = _тпУпаковка3.Колонки.Добавить("КолВУпаковке"); Колонка.Данные = "КолВУпаковке"; Колонка.Заголовок = "Кол. в упак."; 
	//Колонка.Ширина = 5;
	//Колонка = _тпУпаковка.Колонки.Добавить("ДлинаУпаковки"); Колонка.Данные = "ДлинаУпаковки"; Колонка.Заголовок = "Длина"; 
	//Колонка.Ширина = 5;
	//Колонка = _тпУпаковка.Колонки.Добавить("ВысотаУпаковки"); Колонка.Данные = "ВысотаУпаковки"; Колонка.Заголовок = "Высота"; 
	//Колонка.Ширина = 5;
	//Колонка = _тпУпаковка.Колонки.Добавить("ШиринаУпаковки"); Колонка.Данные = "ШиринаУпаковки"; Колонка.Заголовок = "Ширина"; 
	//Колонка.Ширина = 5;
КонецПроцедуры

//****************************************
Функция ВесУпак(ВидУпак="Первичная")
	Если Выбран()=0 Тогда
		Возврат 0;
	КонецЕсли;
	ТекстЗапроса="SELECT SUM($УпаковкаТоваров.ВесБруттоУпаковки) ВесУпаковки
	|			  FROM $Справочник.УпаковкаТоваров AS УпаковкаТоваров	
	|			  WHERE УпаковкаТоваров.PARENTEXT=:ВыбТовар AND ISMARK = 0
	|				AND $УпаковкаТоваров.ТипУпаковки = $Перечисление.ТипыУпаковки."+ВидУпак;
	РС=СоздатьОбъект("ODBCRecordSet");
	РС.УстБД1С();
	РС.УстановитьТекстовыйПараметр("ВыбТовар",ТекущийЭлемент());
	ТЗ=РС.ВыполнитьИнструкцию(ТекстЗапроса);
	Возврат ТЗ.Итог("ВесУпаковки");
КонецФункции
//****************************************
Функция НеттоПервичное()
	Возврат ВесПервичной;	
КонецФункции
//****************************************
Функция БруттоПервичное()
	Возврат ВесПервичной + ВесУпак("Первичная");	
КонецФункции
//****************************************
Функция НеттоВторичное()
	Возврат НеттоПервичное()*ЛогистикаКолВУпаковке;	
КонецФункции
//****************************************
Функция БруттоВторичное()
	Возврат БруттоПервичное()*ЛогистикаКолВУпаковке +ВесУпак("Вторичная");	
КонецФункции
//****************************************
Функция НеттоТретичное()
	Возврат НеттоВторичное()*ЛогистикаКолУпакНаЕвроПалете*ЛогистикаКолУпакНаПалетеВРяду;	
КонецФункции
//****************************************
Функция БруттоТретичное()
	Возврат БруттоВторичное()*ЛогистикаКолУпакНаЕвроПалете*ЛогистикаКолУпакНаПалетеВРяду + ВесУпак("Третичная");	
КонецФункции
//****************************************
Процедура ЗаполнитьУпаковкаТП( Обновить=0 )
	// третичная
	Если Обновить=0 Тогда
		Источник3 = СоздатьОбъект("ПоставщикДанныхODBC.MSSQL"); 
		Источник3.БазаДанных =  СоздатьОбъект("ODBCDataBase"); 
	КонецЕсли;
	ТекстЗапроса="SELECT УпаковкаТоваров.ID as [ТекущийЭлемент $Справочник.УпаковкаТоваров]
	|					, $УпаковкаТоваров.Материал as [Материал $Справочник.ВидыУпакМатериалов]
	|					, $УпаковкаТоваров.ВидУпаковки as [ВидУпаковки $Справочник.ВидыУпаковки]
	|					, $УпаковкаТоваров.ВесБруттоУпаковки as ВесБруттоУпаковки
	|					, $УпаковкаТоваров.КолВУпаковке as КолВУпаковке
	|			  FROM $Справочник.УпаковкаТоваров AS УпаковкаТоваров	
	|			  WHERE УпаковкаТоваров.PARENTEXT=?Товар(14,9) AND ISMARK = 0
	|				AND $УпаковкаТоваров.ТипУпаковки = $Перечисление.ТипыУпаковки.Третичная
	|";
	Источник3.УстТекстЗапроса(ТекстЗапроса);
	Источник3.Параметры.Установить("Товар",ТекущийЭлемент());
	
	Поле = Источник3.Поля.Добавить("ТекущийЭлемент");
  	Поле.Автоудаление = 0;
	Поле.ТипБыстрогоПоиска = 1;

	Источник3.УстКлючПорядка("ВидУпаковки, ТекущийЭлемент"); 
	Источник3.УстИДПоле("ТекущийЭлемент");
	
	_тпУпаковка3.ТаймаутОбновления  			= 0;
	
	_тпУпаковка3.ПоставщикДанных = Источник3; 
	_тпУпаковка3.ПоставщикДанных.Обновить(); 
	_тпУпаковка3.ОбновитьСтроки();
	// вторичная
	Если Обновить=0 Тогда
		Источник2 = СоздатьОбъект("ПоставщикДанныхODBC.MSSQL"); 
		Источник2.БазаДанных =  СоздатьОбъект("ODBCDataBase"); 
	КонецЕсли;
	ТекстЗапроса="SELECT УпаковкаТоваров.ID as [ТекущийЭлемент $Справочник.УпаковкаТоваров]
	|					, $УпаковкаТоваров.Материал as [Материал $Справочник.ВидыУпакМатериалов]
	|					, $УпаковкаТоваров.ВидУпаковки as [ВидУпаковки $Справочник.ВидыУпаковки]
	|					, $УпаковкаТоваров.ВесБруттоУпаковки as ВесБруттоУпаковки
	|					, $УпаковкаТоваров.КолВУпаковке as КолВУпаковке
	|			  FROM $Справочник.УпаковкаТоваров AS УпаковкаТоваров	
	|			  WHERE УпаковкаТоваров.PARENTEXT=?Товар(14,9) AND ISMARK = 0
	|				AND $УпаковкаТоваров.ТипУпаковки = $Перечисление.ТипыУпаковки.Вторичная
	|";
	Источник2.УстТекстЗапроса(ТекстЗапроса);
	Источник2.Параметры.Установить("Товар",ТекущийЭлемент());
	
	Поле = Источник2.Поля.Добавить("ТекущийЭлемент");
  	Поле.Автоудаление = 0;
	Поле.ТипБыстрогоПоиска = 1;

	Источник2.УстКлючПорядка("ВидУпаковки, ТекущийЭлемент"); 
	Источник2.УстИДПоле("ТекущийЭлемент");
	
	_тпУпаковка2.ТаймаутОбновления  			= 0;
	
	_тпУпаковка2.ПоставщикДанных = Источник2; 
	_тпУпаковка2.ПоставщикДанных.Обновить(); 
	_тпУпаковка2.ОбновитьСтроки();
	// первичная
		
	Если Обновить=0 Тогда
		Источник = СоздатьОбъект("ПоставщикДанныхODBC.MSSQL"); 
		Источник.БазаДанных =  СоздатьОбъект("ODBCDataBase"); 
	КонецЕсли;
	ТекстЗапроса="SELECT УпаковкаТоваров.ID as [ТекущийЭлемент $Справочник.УпаковкаТоваров]
	|					, $УпаковкаТоваров.Материал as [Материал $Справочник.ВидыУпакМатериалов]
	|					, $УпаковкаТоваров.ВидУпаковки as [ВидУпаковки $Справочник.ВидыУпаковки]
	|					, $УпаковкаТоваров.ВесБруттоУпаковки as ВесБруттоУпаковки
	|					, $УпаковкаТоваров.КолВУпаковке as КолВУпаковке
	//|					, $УпаковкаТоваров.ДлинаУпаковки as ДлинаУпаковки
	//|					, $УпаковкаТоваров.ВысотаУпаковки as ВысотаУпаковки
	//|					, $УпаковкаТоваров.ШиринаУпаковки as ШиринаУпаковки
	|			  FROM $Справочник.УпаковкаТоваров AS УпаковкаТоваров	
	|			  WHERE УпаковкаТоваров.PARENTEXT=?Товар(14,9) AND ISMARK = 0
	| AND $УпаковкаТоваров.ТипУпаковки <> $Перечисление.ТипыУпаковки.Вторичная
	| AND $УпаковкаТоваров.ТипУпаковки <> $Перечисление.ТипыУпаковки.Третичная
	|";
	Источник.УстТекстЗапроса(ТекстЗапроса);
	Источник.Параметры.Установить("Товар",ТекущийЭлемент());
	
	Поле = Источник.Поля.Добавить("ТекущийЭлемент");
  	Поле.Автоудаление = 0;
	Поле.ТипБыстрогоПоиска = 1;

	Источник.УстКлючПорядка("ВидУпаковки, ТекущийЭлемент"); 
	Источник.УстИДПоле("ТекущийЭлемент");
	
	_тпУпаковка.ТаймаутОбновления  			= 0;
	_тпДопСклады.РазрешитьПеретаскивание	= 0;
	
	_тпУпаковка.ПоставщикДанных = Источник; 
	_тпУпаковка.ПоставщикДанных.Обновить(); 
	_тпУпаковка.ОбновитьСтроки();
КонецПроцедуры

Процедура семИзмененияРеквизитов( пСобытие )
	Если пСобытие = "Запомнить" Тогда
		Для н = 1 по спИзмененийРеквизитов.РазмерСписка() Цикл
			Реквизит = "";
			спИзмененийРеквизитов.ПолучитьЗначение(н,Реквизит);
			спИзмененийРеквизитов.Установить(Реквизит,ПолучитьАтрибут(Реквизит));
		КонецЦикла;
	ИначеЕсли пСобытие = "Сравнить" Тогда
		Для н = 1 по спИзмененийРеквизитов.РазмерСписка() Цикл
			Реквизит = "";
			текЗнач = спИзмененийРеквизитов.ПолучитьЗначение(н,Реквизит);
			новЗнач = ПолучитьАтрибут(Реквизит);
			спИзмененийРеквизитов.Установить(Реквизит,новЗнач);
			Если текЗнач <> новЗнач Тогда
				ЗаписьЖурналаРегистрации( Шаблон("Изменено значение реквизита [Реквизит] с [текЗнач] на [новЗнач]"),, "Изменение реквизитов справочника", ТекущийЭлемент(), 2 );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
//----------------------------------------------------------
Процедура ПриВыбореВидаУпаковки()
	Если ЛогистикаВидУпаковки.Выбран() = 1 Тогда
    	ЛогистикаВесБруттоУпаковки = ЛогистикаВидУпаковки.Вес;
    	ЛогистикаВысотаУпаковки = ЛогистикаВидУпаковки.Высота;
    	ЛогистикаДлинаУпаковки = ЛогистикаВидУпаковки.Длина;
    	ЛогистикаШиринаУпаковки = ЛогистикаВидУпаковки.Ширина;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверкаВидаУпаковки(КакойТоВидУпаковки,ИДРеквизита)
	Если КакойТоВидУпаковки=Константа.Европоддон.ДопВидУпаковки Тогда
		Сообщить("Этот вид упаковки используется для европоддона и является общим для всех товаров!
		|Для конкретного товара необходимо выбрать другой вид упаковки!");
		УстановитьАтрибут(ИДРеквизита,"");
	КонецЕсли;
	
КонецПроцедуры

Процедура семПриИзмененииРазмеровУпаковки()
	Объем = ЛогистикаДлинаУпаковки * ЛогистикаВысотаУпаковки * ЛогистикаШиринаУпаковки;
КонецПроцедуры

Процедура семУстПеревода()
	Если текМестоИсп = перЛатвия Тогда
	ИначеЕсли текМестоИсп = перЛитва Тогда
		//	Кнопки
		Форма.кнЗакрыть.Заголовок( "Cancel" );
		Форма.кнОк.Заголовок( "Ok" );
		Форма.кнЗаписать.Заголовок( "Save" );
		//	Единицы
		ТаблицаЕдиниц.УстановитьПараметрыКолонки( "Единица",,,, "Unit",,,);
		ТаблицаЕдиниц.УстановитьПараметрыКолонки( "Коэффициент",,,, "K",,,);
		Форма.КнопкаДобавить2.Заголовок( "Add..." );
		Форма.КнопкаИзменить2.Заголовок( "Edit..." );
		Форма.КнопкаУдалить2.Заголовок( "Delete" );

            //	Цены
		ТаблицаЦен.УстановитьПараметрыКолонки( "КатегорияЦены",,,, "Price type",,,);
		ТаблицаЦен.УстановитьПараметрыКолонки( "Единица",,,, "Unit",,,);
		ТаблицаЦен.УстановитьПараметрыКолонки( "Цена",,,, "Price",,,);
		ТаблицаЦен.УстановитьПараметрыКолонки( "Валюта",,,, "Cur",,,);
		Форма.КнопкаДобавить21.Заголовок( "Add..." );
		Форма.КнопкаИзменить21.Заголовок( "Edit..." );
		Форма.КнопкаУдалить21.Заголовок( "Delete" );
		//	Акционные скидки
		ТаблицаАС.УстановитьПараметрыКолонки( "ДатаНачала",,,, "Since",,,);
		ТаблицаАС.УстановитьПараметрыКолонки( "ДатаКонца",,,, "Till",,,);
		ТаблицаАС.УстановитьПараметрыКолонки( "КатегорияЦен",,,, "Price type",,,);
		ТаблицаАС.УстановитьПараметрыКолонки( "ПроцентСкидки",,,, "%",,,);
		Форма.КнопкаДобавить211.Заголовок( "Add..." );
		Форма.КнопкаИзменить211.Заголовок( "Edit..." );
		Форма.КнопкаУдалить211.Заголовок( "Delete" );
	КонецЕсли;
КонецПроцедуры

Процедура семУстВидимости()
	Если текМестоИсп = перЛатвия Тогда
	ИначеЕсли текМестоИсп = перЛитва Тогда
		естьЗакладка = Форма.Закладки.НайтиЗначение( "Блюдо" );
		Если естьЗакладка > 0 Тогда Форма.Закладки.УдалитьЗначение( естьЗакладка ); КонецЕсли;
		естьЗакладка = Форма.Закладки.НайтиЗначение( "Ингредиент" );
		Если естьЗакладка > 0 Тогда Форма.Закладки.УдалитьЗначение( естьЗакладка ); КонецЕсли;
		естьЗакладка = Форма.Закладки.НайтиЗначение( "Закупка" );
		Если естьЗакладка > 0 Тогда Форма.Закладки.УдалитьЗначение( естьЗакладка ); КонецЕсли;
		Форма.тКодДляРозницы.Видимость( 0 );
		Форма.КодДляРозницы.Видимость( 0 );
		Форма.кКодДляРозницы.Видимость( 0 );
            Форма.рЗакупка.Видимость( 0 );
		Форма.тВалютаЗакупки.Видимость( 0 );
		Форма.ВалютаЗакупки.Видимость( 0 );
		Форма.лЦенаПриобретения.Видимость( 0 );
		Форма.ЦенаПриобретения.Видимость( 0 );
		//Форма.лЦенаПост.Видимость( 0 );
		//Форма.ЦенаПоставщика.Видимость( 0 );
		//Форма.РК1.Видимость( 0 );
		//Форма.РК2.Видимость( 0 );
		//Форма.КодРК.Видимость( 0 );
		Форма.рДопСклады.Видимость( 0 );
		//Форма.таблДопСклады.Видимость( 0 );
		Форма.кнДобСклад.Видимость( 0 );
		Форма.кнИзмСклад.Видимость( 0 );
		Форма.кнУдСклад.Видимость( 0 );
	КонецЕсли;
	
	ТекЗакладка = Форма.Закладки.ПолучитьЗначение(Форма.Закладки.ТекущаяСтрока());
	Если ТекЗакладка="Закупка" Тогда
		Форма.ЦенаПоставщика.Видимость(Пользователь.ТекущийЭлемент().РазрРедЗакупЦены);
		Форма.лЦенаПост.Видимость(Пользователь.ТекущийЭлемент().РазрРедЗакупЦены);
		Форма.АкцизнаяСтавка.Видимость(Пользователь.ТекущийЭлемент().РазрРедЗакупЦены);
		Форма.лАкциз.Видимость(Пользователь.ТекущийЭлемент().РазрРедЗакупЦены);
	КонецЕсли;
	
	Если семЕстьПраво("Справочник","Номенклатура","Перенос в архив")=1 Тогда
		Форма.кнАрхивировать.Доступность(1);
//		Форма.кнКопироватьТовар.Доступность(1);
	Иначе
		Форма.кнАрхивировать.Доступность(0);
//
//		Форма.кнКопироватьТовар.Доступность(0);
	КонецЕсли;
	
КонецПроцедуры
             

Процедура кнЗаписатьПриНажатии()
	
	Если (ПустоеЗначение(ШтрихКод)=0)и(СтрДлина(СокрЛП(ШтрихКод)) <> 13) Тогда
		Предупреждение("Штрих код введен неправильно!");
		Возврат;
	КонецЕсли;
	Записать();
КонецПроцедуры

Процедура ПриВводеДопСрокаГодности( парам )
	Если СрокГоднПоставщика = 0 Тогда Возврат; КонецЕсли;
	Если парам = "в днях" Тогда
		ДопустСрокГодностиПроц = Окр( ДопустСрокГодн / СрокГоднПоставщика * 100, 2, 1 );
	ИначеЕсли парам = "в процентах" Тогда
		ДопустСрокГодн = Окр( СрокГоднПоставщика / 100 * ДопустСрокГодностиПроц, 2, 1 );
	КонецЕсли;		
КонецПроцедуры

Функция ТекущаяКарта()
	Признак="";
	Если Выбран()=1 Тогда
		КалькКарт=СоздатьОбъект("Документ");
		КалькКарт.ОбратныйПорядок(1);
		КалькКарт.ВыбратьПоЗначению(,РабочаяДата(),"ТоварШапки",ТекущийЭлемент());
		Пока КалькКарт.ПолучитьДокумент()=1 Цикл
			Если КалькКарт.Вид()="КалькуляционнаяКарта" Тогда
				Если КалькКарт.ПометкаУдаления()=1 Тогда 
					Продолжить;
				КонецЕсли;
				Если КалькКарт.Проведен()=0 Тогда
					Признак=" Не проведена!"
				КонецЕсли;	
			   	Возврат Строка(""+КалькКарт.ТекущийДокумент()+Признак);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		Возврат Строка("Калькуляционная карта отсутствует");	
КонецФункции	                                                    
//------------------------------------------------------------------
Процедура ВидимостьРК()
	Если (ЕстьРесторан=0) И (НазваниеНабораПрав()<>"Администратор") Тогда
		//Форма.РК1.Видимость(0);
		//Форма.РК2.Видимость(0);
		//Форма.КодРК.Видимость(0);
	КонецЕсли;	  
	
КонецПроцедуры	
//------------------------------------------------------------------
Процедура ВидимостьПроп()
	Если ПодлежитРазделке=Перечисление.Булево.Да Тогда
		Форма.Пропорции.Доступность(1);
	Иначе
		Форма.Пропорции.Доступность(0);
	КонецЕсли;
КонецПроцедуры
//------------------------------------------------------------------
Процедура ДоступностьКн()
	
	Если Выбран()=1 Тогда
		КалькКарт=СоздатьОбъект("Документ");
		КалькКарт.ОбратныйПорядок(1);
		КалькКарт.ВыбратьПоЗначению(,РабочаяДата(),"ТоварШапки",ТекущийЭлемент());
		Пока КалькКарт.ПолучитьДокумент()=1 Цикл
			Если КалькКарт.Вид()="КалькуляционнаяКарта" Тогда
				ЕстьКалькуляция=1;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	Если ЕстьКалькуляция=1 Тогда
		Форма.КнОткрытьКК.Доступность(1);
	Иначе
		Форма.КнОткрытьКК.Доступность(0);
	КонецЕсли;   
	
//	Форма.Выделить.Доступность(семЕстьПраво( "Справочник", "Номенклатура", "Установка выделения" ));
//	Форма.ВыделитьLT.Доступность(семЕстьПраво( "Справочник", "Номенклатура", "Установка выделения" ));	
//	Форма.ВыделитьEE.Доступность(семЕстьПраво( "Справочник", "Номенклатура", "Установка выделения" ));	
	Форма.MAG.Доступность(семЕстьПраво( "Справочник", "Номенклатура", "Установка признака WEB Shop" ));	
	Форма.НаименованиеEE.Доступность(0);
	Форма.НаименованиеLT.Доступность(0);

	Форма.кнДобавитьЗамену.Доступность(семЕстьПраво( "Справочник", "Номенклатура", "Назначение замен" ));	
	Форма.кнУдалитьЗамену.Доступность(семЕстьПраво( "Справочник", "Номенклатура", "Назначение замен" ));	
	
	Форма.АкцизнаяСтавка.Доступность(АкцизныйТовар);
	Форма.ВидАкциза.Доступность(АкцизныйТовар);

	Форма.кКодДляРозницы.Доступность(1-Форма.ТолькоПросмотр());
	Форма.кнМатериалыПервичная.Доступность(1-Форма.ТолькоПросмотр());
	Форма.кнМатериалыВторичная.Доступность(1-Форма.ТолькоПросмотр());

	
КонецПроцедуры
//---------------------- 
Процедура ОткрытьПропорции()
	ОткрытьФорму("Справочник.ПропорцииРазделки",Конт);
КонецПроцедуры 
//-----------------------------------------
Процедура ОбработкаПодбора(Выб) 
	ОбработкаПоУмолчанию=Выб;
КонецПроцедуры
//_____________________________________________________________________________
Процедура ПриВыбореСтатьиИздержек()
	СтатьяИздержекУслуги = СписокСтатейИздержек.ПолучитьЗначение(СписокСтатейИздержек.ТекущаяСтрока());
КонецПроцедуры
//_____________________________________________________________________________
Процедура ВводНового(Копир,Объект);

	Если Копир=1 Тогда
		ОбъектКопир = Объект;
	КонецЕсли;
	
	ДатаСоздания = РабочаяДата();
	
	Если  Наименование="" Тогда
		НаименованиеLV="Новый";
		ПоАлфавиту="New";
		НаименованиеАнгл="New";
		НаименованиеРусс="Новый";
		БазоваяЕдиницаИзмерения=Перечисление.ЕдиницыИзмерения.Килограмм;
		БазоваяЕдиницаИзмеренияРозница=Перечисление.ЕдиницыИзмерения.Килограмм;
		СтавкаНДС=Константа.ОсновнаяСтавкаНДС; //22%
		СтавкаНДСLT=Перечисление.ЗначенияНДС.ОсновнаяСтавкаНДСНов; //21%
		СтавкаНДСEE=Перечисление.ЗначенияНДС.НДС20;
		НалогСПродаж=Константа.ОсновнойНП;
		//ВидТовара=Перечисление.ВидыТоваров.Товар;
		ПодлежитРазделке=Перечисление.Булево.Нет;
		НалогСПродаж=Константа.ОсновнойНП;
		Поставщик=Константа.ОсновнойПоставщик;
		ЗапретРезерв=Перечисление.Булево.Нет;
		Важность=Перечисление.КатегорииВажности.КатA;
	КонецЕсли;
	                       
	ТребуетсяПереработка = 0;
	ТоварИсходный = "";
	ФлПечатьСроковГодности = Родитель.ФлПечатьСроковГодности;
	Идентификатор="";
	КодТовара = "";
	КодСтар = Код;
	СформироватьКод();
	Если ПустоеЗначение(Код)=1 Тогда
		Код = КодСтар;
	КонецЕсли;
	КодТовара = Код;
	ДатаАктуальности = РабочаяДата();
	АкцизнаяСтавка = 0;
	АкцизныйТовар = 0;
	КонтрольСрокаГодностиВРознице=0;
	ВалютаПродажи=Константа.БазоваяВалюта;
	ВалютаЗакупки=Константа.БазоваяВалюта;
	ВалютаУчета=Константа.БазоваяВалюта;
	ВалютаРаботы=Константа.БазоваяВалюта;
	ЗапретСкидки=Перечисление.Булево.Нет;
	MAG=0;
	Выделить=0;
	ВыделитьEE=0;
	ВыделитьLT=0;
	РозничнаяЦена=0;
	ОптоваяЦена=0;
	ЦенаПриобретения=0;
	ЦенаПост=0;
	ФлИзменен=0;
	КодДляРозницы = 0;
	ДляРозницы =0;
	КодРК = 0;
	КодРКГруппы = 0;
	ГруппаСкидкиКасса = 0;
	
	Если ПустоеЗначение(Пользователь.РазрРедТовараПоПризнакуСпецКода)=0 Тогда
		ПризнакСпецКода=Пользователь.РазрРедТовараПоПризнакуСпецКода;
		Код=Код+Нрег(ПолучитьСпецКодТовара(Пользователь.РазрРедТовараПоПризнакуСпецКода));
	КонецЕсли;
	
КонецПроцедуры
//------------------------------------------------------------------------------
Процедура ЗаполнениеТаблицыЕдиниц()
	Если Выбран()=0 Тогда
		Форма.КнопкаДобавить2.Доступность(0);
		Форма.КнопкаИзменить2.Доступность(0);
		Форма.КнопкаУдалить2.Доступность(0);
		Возврат;
	КонецЕсли;
	ТаблицаЕдиниц.УдалитьСтроки();
	Спр=СоздатьОбъект("Справочник.Единицы");
	Спр.ИспользоватьВладельца(ТекущийЭлемент());
	Спр.ПорядокКодов();
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()=1  Цикл
		Если Спр.ПометкаУдаления()=1 Тогда
			Продолжить;
		КонецЕсли;
		ТаблицаЕдиниц.НоваяСтрока();
		ТаблицаЕдиниц.ТекущийЭлемент=Спр.ТекущийЭлемент();
		ТаблицаЕдиниц.Единица=Спр.Единица;
		ТаблицаЕдиниц.Коэффициент=Спр.Коэффициент;
	КонецЦикла;
	Форма.КнопкаДобавить2.Доступность(1);
	Если ТаблицаЕдиниц.КоличествоСтрок()<=0 Тогда
		Форма.КнопкаИзменить2.Доступность(0);
		Форма.КнопкаУдалить2.Доступность(0);
	Иначе
		Форма.КнопкаИзменить2.Доступность(1);
		Форма.КнопкаУдалить2.Доступность(1);
	КонецЕсли;
КонецПроцедуры
//----------------------
Процедура ДобавитьЕдиницу()
	Перем ФормаЗаписи;
	Если ПравоДоступа( "Корректировка", "Справочник.Единицы" ) = 0 Тогда
		Предупреждение( "Недостаточно прав доступа!" ); Возврат;
	КонецЕсли;
	глФлагРасшифровки=1;
	глРасшифровка=ВзятьКонтекст(Контекст);
	ОткрытьФорму("Элемент.Единицы",ФормаЗаписи,,,ТекущийЭлемент());
	глФлагРасшифровки=0;
	глРасшифровка=0;
КонецПроцедуры
//-----------------------
Процедура ИзменитьЕдиницу()
	Перем ФормаЗаписи;
	Если ПравоДоступа( "Корректировка", "Справочник.Единицы" ) = 0 Тогда
		Предупреждение( "Недостаточно прав доступа!" ); Возврат;
	КонецЕсли;
	Если ТаблицаЕдиниц.ТекущаяСтрока()=0 Тогда
		Возврат;
	КонецЕсли;	
	Эл=ТаблицаЕдиниц.ПолучитьЗначение(ТаблицаЕдиниц.ТекущаяСтрока(),"ТекущийЭлемент");
	глФлагРасшифровки=1;
	глРасшифровка=ВзятьКонтекст(Контекст);
	ОткрытьФормуМодально(Эл);
	глФлагРасшифровки=0;
	глРасшифровка=0;
КонецПроцедуры
//-----------------------
Процедура УдалитьЕдиницу()
	Если ПравоДоступа( "Корректировка", "Справочник.Единицы" ) = 0 Тогда
		Предупреждение( "Недостаточно прав доступа!" ); Возврат;
	КонецЕсли;
	Если ТаблицаЕдиниц.ТекущийЭлемент.Единица=БазоваяЕдиницаИзмерения Тогда
	    Предупреждение("Нельзя удалять базовую единицу!!!");
		Возврат;
	КонецЕсли;
	Если Вопрос("Вы действительно хотите удалить единицу измерения товара? (будет помечена на удаление)",1)=2 Тогда
		Возврат;
	КонецЕсли; 
	
	Поз=ТаблицаЕдиниц.ТекущаяСтрока();
	Эл=ТаблицаЕдиниц.ПолучитьЗначение(Поз,"ТекущийЭлемент");
	Спр=СоздатьОбъект("Справочник.Единицы");
	Спр.ИспользоватьВладельца(ТекущийЭлемент());
	Если Спр.НайтиЭлемент(Эл)=1 Тогда
		//Закомментировано Инсталлятором МОД:Спр.Записать();
	//Начало текста, вставленного Инсталлятором МОД
	ОбъектЗаписать(Спр, );
	//Конец текста, вставленного Инсталлятором МОД

		//Закомментировано Инсталлятором МОД:Спр.Удалить(0);
	//Начало текста, вставленного Инсталлятором МОД
	ОбъектУдалить(Спр, 0);
	//Конец текста, вставленного Инсталлятором МОД

		ТаблицаЕдиниц.УдалитьСтроку(Поз);
		Если ТаблицаЕдиниц.КоличествоСтрок()<=0 Тогда
			Форма.КнопкаИзменить2.Доступность(0);
			Форма.КнопкаУдалить2.Доступность(0);
		КонецЕсли;
		Форма.Обновить();
	КонецЕсли;
КонецПроцедуры  
//***********************************************************
//<<Алгоритм Успеха>> (begin)
//
//------------------------------------------------------------------------------
Процедура ЗаполнениеТаблицыЦен()
	Если Выбран()=0 Тогда
		Форма.КнопкаДобавить21.Доступность(0);
		Форма.КнопкаИзменить21.Доступность(0);
		Форма.КнопкаУдалить21.Доступность(0);
		Возврат;
	КонецЕсли;
	ТаблицаЦен.УдалитьСтроки();
	Спр=СоздатьОбъект("Справочник.Цены");
	Спр.ИспользоватьВладельца(ТекущийЭлемент());
	Спр.ПорядокКодов();
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()=1  Цикл
		Если Спр.ПометкаУдаления()=1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если (Пользователь.ТекущийЭлемент().РазрРедЗакупЦены=0) И (Спр.КатегорияЦены = Константа.ОсновнаяКатегорияЦеныЗакупки) Тогда
			Продолжить;
		КонецЕсли;
		ТаблицаЦен.НоваяСтрока();
		ТаблицаЦен.ТекущийЭлемент=Спр.ТекущийЭлемент();
		ТаблицаЦен.КатегорияЦены=Спр.КатегорияЦены;
		ТаблицаЦен.Единица=Спр.Единица;
		ТаблицаЦен.Цена=Спр.Цена.Получить(РабочаяДата()); 
		ТаблицаЦен.Валюта=Спр.Валюта;
	КонецЦикла;
	Форма.КнопкаДобавить21.Доступность(1);
	Если ТаблицаЕдиниц.КоличествоСтрок()<=0 Тогда
		Форма.КнопкаИзменить21.Доступность(0);
		Форма.КнопкаУдалить21.Доступность(0);
	Иначе
		Форма.КнопкаИзменить21.Доступность(1);
		Форма.КнопкаУдалить21.Доступность(1);
	КонецЕсли;
КонецПроцедуры
//------------------------------------------------------------------------------
Процедура ЗаполнениеТаблицыАС() //Акционные скидки
	Если Выбран()=0 Тогда
		Форма.КнопкаДобавить211.Доступность(0);
		Форма.КнопкаИзменить211.Доступность(0);
		Форма.КнопкаУдалить211.Доступность(0);
		Возврат;
	КонецЕсли;
	ТаблицаАС.УдалитьСтроки();
	Спр=СоздатьОбъект("Справочник.АкционныеСкидкиТоваров");
	Спр.ИспользоватьВладельца(ТекущийЭлемент());
	Спр.ПорядокКодов();
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()=1  Цикл
		Если Спр.ПометкаУдаления()=1 Тогда
			Продолжить;
		КонецЕсли;
		ТаблицаАС.НоваяСтрока();
		ТаблицаАС.ТекущийЭлемент = Спр.ТекущийЭлемент();
		ТаблицаАС.ДатаНачала     = Спр.ДатаНачала;
		ТаблицаАС.ДатаКонца      = Спр.ДатаКонца;
		ТаблицаАС.КатегорияЦен   = Спр.КатегорияЦен;
		ТаблицаАС.ПроцентСкидки  = Спр.ПроцентСкидки;
	КонецЦикла;
	Форма.КнопкаДобавить211.Доступность(1);
	Если ТаблицаЕдиниц.КоличествоСтрок()<=0 Тогда
		Форма.КнопкаИзменить211.Доступность(0);
		Форма.КнопкаУдалить211.Доступность(0);
	Иначе
		Форма.КнопкаИзменить211.Доступность(1);
		Форма.КнопкаУдалить211.Доступность(1);
	КонецЕсли;               
КонецПроцедуры
//------------------------------------------------------------------------------
Процедура ЗаполнениеТаблицыЗапасов()
	Если Выбран()=0 Тогда
		Форма.КнопкаДобавитьЗапас.Доступность(0);
		Форма.КнопкаИзменитьЗапас.Доступность(0);
		Форма.КнопкаУдалитьЗапас.Доступность(0);
		Возврат;
	КонецЕсли;
	ТаблицаЗапасов.УдалитьСтроки();
	Спр=СоздатьОбъект("Справочник.Запасы");
	Спр.ИспользоватьВладельца(ТекущийЭлемент());
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()=1  Цикл
		Если Спр.ПометкаУдаления()=1 Тогда
			Продолжить;
		КонецЕсли;
		ТаблицаЗапасов.НоваяСтрока();
		ТаблицаЗапасов.ТекущийЭлемент=Спр.ТекущийЭлемент();
		ТаблицаЗапасов.МинЗапас=Спр.МинЗапас;
		ТаблицаЗапасов.УпрАналитика=Спр.УпрАналитика;
		ТаблицаЗапасов.МинЗапасАвто=Спр.МинЗапасАвто;
		ТаблицаЗапасов.РасчетМинЗапаса=Спр.РасчетМинЗапаса+1;
	КонецЦикла;
	Форма.КнопкаДобавитьЗапас.Доступность(1);
	Если ТаблицаЗапасов.КоличествоСтрок()<=0 Тогда
		Форма.КнопкаИзменитьЗапас.Доступность(0);
		Форма.КнопкаУдалитьЗапас.Доступность(0);
	Иначе
		Форма.КнопкаИзменитьЗапас.Доступность(1);
		Форма.КнопкаУдалитьЗапас.Доступность(1);
	КонецЕсли;
КонецПроцедуры
//------------------------------------------------------------------------------
Процедура ЗаполнениеТаблУпак()
	Если Выбран()=0 Тогда
		Возврат;
	КонецЕсли;
	ТаблУпак.УдалитьСтроки();
	Спр=СоздатьОбъект("Справочник.УпаковкаТоваров");
	Спр.ИспользоватьВладельца(ТекущийЭлемент());
	Спр.ПорядокКодов();
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()=1  Цикл
		Если Спр.ПометкаУдаления()=1 Тогда
			Продолжить;
		КонецЕсли;
		ТаблУпак.НоваяСтрока();
		ТаблУпак.Ссылка = Спр.ТекущийЭлемент();
		ТаблУпак.ВидУпаковки=Спр.ВидУпаковки;
		ТаблУпак.ВесУпаковки=Спр.ВесБруттоУпаковки;
		ТаблУпак.ДлинаУпаковки=Спр.ДлинаУпаковки;
		ТаблУпак.ВысотаУпаковки=Спр.ВысотаУпаковки;
		ТаблУпак.ШиринаУпаковки=Спр.ШиринаУпаковки;
	КонецЦикла;
	         
КонецПроцедуры
//----------------------
Процедура ДобавитьЦену()
	Предупреждение( "Изменение цен товара производится ТОЛЬКО документом Переоценка товара !!!" );
	Возврат;
	//Перем ФормаЗаписи;
	//глФлагРасшифровки=1;
	//глРасшифровка=ВзятьКонтекст(Контекст);
	//ОткрытьФорму("Элемент.Цены",ФормаЗаписи,,,ТекущийЭлемент());
	//глФлагРасшифровки=0;
	//глРасшифровка=0;
КонецПроцедуры
//----------------------
Процедура ДобавитьАС()
	Перем ФормаЗаписи;
	Если ПравоДоступа( "Корректировка", "Справочник.АкционныеСкидкиТоваров" ) = 0 Тогда
		Предупреждение( "Недостаточно прав доступа!" ); Возврат;
	КонецЕсли;
	глФлагРасшифровки=1;
	глРасшифровка=ВзятьКонтекст(Контекст);
	ОткрытьФорму("Элемент.АкционныеСкидкиТоваров",ФормаЗаписи,,,ТекущийЭлемент());
	глФлагРасшифровки=0;
	глРасшифровка=0;
КонецПроцедуры
//----------------------
Процедура ДобавитьЗапас()
	Перем ФормаЗаписи;
	Если ПравоДоступа( "Корректировка", "Справочник.Запасы" ) = 0 Тогда
		Предупреждение( "Недостаточно прав доступа!" ); Возврат;
	КонецЕсли;
	глФлагРасшифровки=1;
	глРасшифровка=ВзятьКонтекст(Контекст);
	ОткрытьФорму("Элемент.Запасы",ФормаЗаписи,,,ТекущийЭлемент());
	глФлагРасшифровки=0;
	глРасшифровка=0;
КонецПроцедуры
//----------------------
Процедура ИзменитьЦену()
	Предупреждение( "Изменение цен товара производится ТОЛЬКО документом Переоценка товара !!!" );
	Возврат;
	//Перем ФормаЗаписи;
	//Если ТаблицаЦен.ТекущаяСтрока()=0 Тогда
	//	Возврат;
	//КонецЕсли;	
	//Эл=ТаблицаЦен.ПолучитьЗначение(ТаблицаЦен.ТекущаяСтрока(),"ТекущийЭлемент");
	//глФлагРасшифровки=1;
	//глРасшифровка=ВзятьКонтекст(Контекст); 
	//ОткрытьФормуМодально(Эл);
	//глФлагРасшифровки=0;
	//глРасшифровка=0;
КонецПроцедуры

//-----------------------
Процедура ИзменитьАС()
	Перем ФормаЗаписи;
	Если ПравоДоступа( "Корректировка", "Справочник.АкционныеСкидкиТоваров" ) = 0 Тогда
		Предупреждение( "Недостаточно прав доступа!" ); Возврат;
	КонецЕсли;
	Если ТаблицаАС.ТекущаяСтрока()=0 Тогда
		Возврат;
	КонецЕсли;	
	Эл=ТаблицаАС.ПолучитьЗначение(ТаблицаАС.ТекущаяСтрока(),"ТекущийЭлемент");
	глФлагРасшифровки=1;
	глРасшифровка=ВзятьКонтекст(Контекст); 
	ОткрытьФормуМодально(Эл);
	глФлагРасшифровки=0;
	глРасшифровка=0;
КонецПроцедуры

//-----------------------
Процедура ИзменитьЗапас()
	Перем ФормаЗаписи;
	Если ПравоДоступа( "Корректировка", "Справочник.Запасы" ) = 0 Тогда
		Предупреждение( "Недостаточно прав доступа!" ); Возврат;
	КонецЕсли;
	Если ТаблицаЗапасов.ТекущаяСтрока()=0 Тогда
		Возврат;
	КонецЕсли;	
	Эл=ТаблицаЗапасов.ПолучитьЗначение(ТаблицаЗапасов.ТекущаяСтрока(),"ТекущийЭлемент");
	глФлагРасшифровки=1;
	глРасшифровка=ВзятьКонтекст(Контекст); 
	ОткрытьФормуМодально(Эл);
	глФлагРасшифровки=0;
	глРасшифровка=0;
КонецПроцедуры
//-----------------------
Процедура УдалитьЦену()
	Предупреждение( "Изменение цен товара производится ТОЛЬКО документом Переоценка товара !!!" );
	Возврат;
//	Если Вопрос("Вы действительно хотите удалить цену? (будет помечена на удаление)",1)=2 Тогда
//		Возврат;
//	КонецЕсли;
//	Поз=ТаблицаЦен.ТекущаяСтрока();
//	Эл=ТаблицаЦен.ПолучитьЗначение(Поз,"ТекущийЭлемент");
//	Спр=СоздатьОбъект("Справочник.Цены");
//	Спр.ИспользоватьВладельца(ТекущийЭлемент());
//	Если Спр.НайтиЭлемент(Эл)=1 Тогда
//		//Закомментировано Инсталлятором МОД:Спр.Записать();
//	//Начало текста, вставленного Инсталлятором МОД
//	ОбъектЗаписать(Спр, );
//	//Конец текста, вставленного Инсталлятором МОД
//
//		//Закомментировано Инсталлятором МОД:Спр.Удалить(0);
//	//Начало текста, вставленного Инсталлятором МОД
//	ОбъектУдалить(Спр, 0);
//	//Конец текста, вставленного Инсталлятором МОД
//
//		ТаблицаЦен.УдалитьСтроку(Поз);
//		Если ТаблицаЦен.КоличествоСтрок()<=0 Тогда
//			Форма.КнопкаИзменить21.Доступность(0);
//			Форма.КнопкаУдалить21.Доступность(0);
//		КонецЕсли;
//		Форма.Обновить();
//	КонецЕсли;
КонецПроцедуры
//-----------------------
Процедура УдалитьАС()
	Если ПравоДоступа( "Корректировка", "Справочник.АкционныеСкидкиТоваров" ) = 0 Тогда
		Предупреждение( "Недостаточно прав доступа!" ); Возврат;
	КонецЕсли;
	Если Вопрос("Вы действительно хотите удалить акционную скидку? (будет помечена на удаление)",1)=2 Тогда
		Возврат;
	КонецЕсли;
	Поз=ТаблицаАС.ТекущаяСтрока();
	Эл=ТаблицаАС.ПолучитьЗначение(Поз,"ТекущийЭлемент");
	Спр=СоздатьОбъект("Справочник.АкционныеСкидкиТоваров");
	Спр.ИспользоватьВладельца(ТекущийЭлемент());
	Если Спр.НайтиЭлемент(Эл)=1 Тогда
		//Закомментировано Инсталлятором МОД:Спр.Записать();
	//Начало текста, вставленного Инсталлятором МОД
	ОбъектЗаписать(Спр, );
	//Конец текста, вставленного Инсталлятором МОД

		//Закомментировано Инсталлятором МОД:Спр.Удалить(0);
	//Начало текста, вставленного Инсталлятором МОД
	ОбъектУдалить(Спр, 0);
	//Конец текста, вставленного Инсталлятором МОД

		ТаблицаАС.УдалитьСтроку(Поз);
		Если ТаблицаАС.КоличествоСтрок()<=0 Тогда
			Форма.КнопкаИзменить211.Доступность(0);
			Форма.КнопкаУдалить211.Доступность(0);
		КонецЕсли;
		Форма.Обновить();
	КонецЕсли;
КонецПроцедуры

//-----------------------
Процедура УдалитьЗапас()
	Если ПравоДоступа( "Корректировка", "Справочник.Запасы" ) = 0 Тогда
		Предупреждение( "Недостаточно прав доступа!" ); Возврат;
	КонецЕсли;
	Если Вопрос("Вы действительно хотите удалить Запас?",1)=2 Тогда
		Возврат;
	КонецЕсли;

	Поз=ТаблицаЗапасов.ТекущаяСтрока();
	Эл=ТаблицаЗапасов.ПолучитьЗначение(Поз,"ТекущийЭлемент");
	
	ТекстЗапроса = "SELECT УстМинЗапасовСтроки.IDDOC [Ссылка $Документ.УстМинЗапасов]
//	|					, УстМинЗапасовСтроки.LINENO_ НомерСтроки
	|			   FROM $ДокументСтроки.УстМинЗапасов AS УстМинЗапасовСтроки With (NOLOCK)
	|			   WHERE ($УстМинЗапасовСтроки.Запас = :ВыбЗапас)";
	Запрос = СоздатьОбъект("ODBCRecordSet");
	Запрос.УстановитьТекстовыйПараметр("ВыбЗапас",Эл);
	табл = Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
                                                  
	Док = СоздатьОбъект("Документ.УстМинЗапасов");
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку()=1 Цикл
		Док.НайтиДокумент(табл.Ссылка);
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку()=1 Цикл
			Если Док.Запас = Эл Тогда
				Док.УдалитьСтроку();
			КонецЕсли;
		КонецЦикла;
//		Док.ПолучитьСтрокуПоНомеру(табл.НомерСтроки);
		Сообщить("Удален запас из документа "+Док+" от "+Док.ДатаДок);
		Док.Записать();
	КонецЦикла;	
	                     
    
	
	Спр=СоздатьОбъект("Справочник.Запасы");
	Спр.ИспользоватьВладельца(ТекущийЭлемент());
	Если Спр.НайтиЭлемент(Эл)=1 Тогда
	//Начало текста, вставленного Инсталлятором МОД
		Спр.МинЗапас = 0;
		Спр.Записать();

	ОбъектУдалить(Спр, 1);
	//Конец текста, вставленного Инсталлятором МОД

		ТаблицаЗапасов.УдалитьСтроку(Поз);
		Если ТаблицаЗапасов.КоличествоСтрок()<=0 Тогда
			Форма.КнопкаИзменитьЗапас.Доступность(0);
			Форма.КнопкаУдалитьЗапас.Доступность(0);
		КонецЕсли;
		Форма.Обновить();
	КонецЕсли;
КонецПроцедуры
//-----------------------

//состав

//======================================================================
//======================================================================
Процедура СозданиеНачЗначениеТаблЭнергЦенность()
		Если ФлЭнергЦенность=1 Тогда

			СпрЭнергЦенность=СоздатьОбъект("Справочник.НоменклатураЭнергЦенность");
			СпрЭнергЦенность.ИспользоватьВладельца(ТекущийЭлемент());
						
			
			СпрПеревод=СоздатьОбъект("Справочник.НоменклатураЭнергЦенностьПеревод");
	//		Спр.ИспользоватьВладельца(ТекущийЭлемент());
		//	Спр.ПорядокКодов();
			СпрПеревод.ПорядокРеквизита("ПорядокВывода");
			СпрПеревод.ВыбратьЭлементы();
			Пока СпрПеревод.ПолучитьЭлемент()=1  Цикл
				Если СпрПеревод.ПометкаУдаления()=1 Тогда
					Продолжить;
				КонецЕсли;
	
				Если (СпрПеревод.ПорядокВывода=0)или (ПустоеЗначение(СпрПеревод.ПорядокВывода)=1)  Тогда
					Продолжить;
				КонецЕсли;
				
				//Если (Пользователь.ТекущийЭлемент().РазрРедЗакупЦены=0) И (Спр.КатегорияЦены = Константа.ОсновнаяКатегорияЦеныЗакупки) Тогда
				//	Продолжить;
				//КонецЕсли;

				СпрЭнергЦенность.Новый();
				СпрЭнергЦенность.Наименование = СпрПеревод.ТекущийЭлемент().Наименование;
				СпрЭнергЦенность.ВидСостава = СпрПеревод.ТекущийЭлемент();
				СпрЭнергЦенность.Количество =0 ;
				СпрЭнергЦенность.Единица = "";
				СпрЭнергЦенность.ПорядокВывода = СпрПеревод.ПорядокВывода;
				СпрЭнергЦенность.Записать();
			КонецЦикла;		
		
		КонецЕсли;	
КонецПроцедуры // Создание

//======================================================================
Функция РасчетКалорийВыводСтроки(п_Номенклатура)

	Спр=СоздатьОбъект("Справочник.НоменклатураЭнергЦенность");
	Спр.ИспользоватьВладельца(п_Номенклатура);
//	Спр.ПорядокКодов();
	Спр.ПорядокРеквизита("ПорядокВывода");
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()=1  Цикл
		Если Спр.ПометкаУдаления()=1 Тогда
			Продолжить;
		КонецЕсли;	
		Если Спр.Единица=Перечисление.ЕдиницыИзмерения.Грамм Тогда
			л_Килокалория=л_Килокалория+Спр.ВидСостава.КоэфКилаколория*Спр.Количество;
			л_Килоджоуль=л_Килоджоуль+Спр.ВидСостава.КоэфКилоджоуль*Спр.Количество;
		КонецЕсли;
	КонецЦикла;		
	
	л_Килоджоуль=Окр(л_Килоджоуль,0,1);
	л_Килокалория=Окр(л_Килокалория,0,1);
	л_СтрокаЭнергЦенность=Строка(л_Килоджоуль)+Перечисление.ЕдиницыИзмерения.Килоджоуль+"/"+Строка(л_Килокалория)+Перечисление.ЕдиницыИзмерения.Килокалория;
	Возврат л_СтрокаЭнергЦенность;
	
КонецФункции // РасчетКалорий

Процедура ОбновлениеТаблЭнергЦенность()
	ТаблЭнергЦенность.УдалитьСтроки();
	
//	л_Килоджоуль=0;
//	л_Килокалория=0;
	
	Спр=СоздатьОбъект("Справочник.НоменклатураЭнергЦенность");
	Спр.ИспользоватьВладельца(ТекущийЭлемент());
//	Спр.ПорядокКодов();
	Спр.ПорядокРеквизита("ПорядокВывода");
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()=1  Цикл
		Если Спр.ПометкаУдаления()=1 Тогда
			Продолжить;
		КонецЕсли;
		
		//Если (Пользователь.ТекущийЭлемент().РазрРедЗакупЦены=0) И (Спр.КатегорияЦены = Константа.ОсновнаяКатегорияЦеныЗакупки) Тогда
		//	Продолжить;
		//КонецЕсли;
		ТаблЭнергЦенность.НоваяСтрока();
		ТаблЭнергЦенность.ТекущийЭлемент=Спр.ТекущийЭлемент();
		ТаблЭнергЦенность.ВидСостава=Спр.ВидСостава.Наименование;
		ТаблЭнергЦенность.КоличествоТекст=Спр.КоличествоТекст;
		
		Если Спр.Единица=Перечисление.ЕдиницыИзмерения.Грамм Тогда
			ТаблЭнергЦенность.Количество=Строка(Спр.Количество)+"g";
//			л_Килокалория=л_Килокалория+Спр.ВидСостава.КоэфКилаколория*Спр.Количество;
//			л_Килоджоуль=л_Килоджоуль+Спр.ВидСостава.КоэфКилоджоуль*Спр.Количество;
		КонецЕсли;
		
	КонецЦикла;	
	Если ТаблЭнергЦенность.КоличествоСтрок()<>0 Тогда
		ТаблЭнергЦенность.ПолучитьСтрокуПоНомеру(1);
		ТаблЭнергЦенность.Количество=РасчетКалорийВыводСтроки(ТекущийЭлемент());
		л_КоличествоТекст=ТаблЭнергЦенность.КоличествоТекст;
		Если (ПустоеЗначение(л_КоличествоТекст)=1)или (Найти(л_КоличествоТекст,"g")>0)  Тогда
			ТаблЭнергЦенность.КоличествоТекст=ТаблЭнергЦенность.Количество;
		КонецЕсли;
		
	КонецЕсли;	

КонецПроцедуры // ОбновлениеТаблЭнергЦенность
Процедура ОбновлениеТаблЭнергЦенность1()
	ТаблЭнергЦенность.УдалитьСтроки();
	
	л_Килоджоуль=0;
	
	
	Спр=СоздатьОбъект("Справочник.НоменклатураЭнергЦенность");
	Спр.ИспользоватьВладельца(ТекущийЭлемент());
//	Спр.ПорядокКодов();
	Спр.ПорядокРеквизита("ПорядокВывода");
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()=1  Цикл
		Если Спр.ПометкаУдаления()=1 Тогда
			Продолжить;
		КонецЕсли;
		
		//Если (Пользователь.ТекущийЭлемент().РазрРедЗакупЦены=0) И (Спр.КатегорияЦены = Константа.ОсновнаяКатегорияЦеныЗакупки) Тогда
		//	Продолжить;
		//КонецЕсли;
		ТаблЭнергЦенность.НоваяСтрока();
		ТаблЭнергЦенность.ТекущийЭлемент=Спр.ТекущийЭлемент();
		ТаблЭнергЦенность.ВидСостава=Спр.ВидСостава.Наименование;
		
		
			Если Спр.Единица=Перечисление.ЕдиницыИзмерения.Килоджоуль Тогда
				л_Килокалория=Окр(Спр.Количество*0.2388458966275);
				л_Килоджоуль=Спр.Количество;
				ТаблЭнергЦенность.Количество=Строка(л_Килоджоуль)+" "+Перечисление.ЕдиницыИзмерения.Килоджоуль+"/"+
											 Строка(л_Килокалория)+" "+Перечисление.ЕдиницыИзмерения.Килокалория;
			ИначеЕсли 	Спр.Единица=Перечисление.ЕдиницыИзмерения.Килокалория Тогда
				л_Килокалория=Спр.Количество;
				л_Килоджоуль=Окр(Спр.Количество*4.1868);
				ТаблЭнергЦенность.Количество=Строка(л_Килоджоуль)+" "+Перечисление.ЕдиницыИзмерения.Килоджоуль+"/"+
											 Строка(л_Килокалория)+" "+Перечисление.ЕдиницыИзмерения.Килокалория;
			ИначеЕсли Спр.Единица=Перечисление.ЕдиницыИзмерения.Грамм Тогда
				ТаблЭнергЦенность.Количество=Строка(Спр.Количество)+" "+Строка(Спр.Единица);
			КонецЕсли;
	КонецЦикла;	
КонецПроцедуры // ОбновлениеТаблЭнергЦенность

Процедура ЗаполнениеТаблЭнергЦенность()
	Если Выбран()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеТаблЭнергЦенность();

	Если ТаблЭнергЦенность.КоличествоСтрок()<=0 Тогда
		СозданиеНачЗначениеТаблЭнергЦенность();
		ОбновлениеТаблЭнергЦенность();
	КонецЕсли;	

	Форма.Обновить();
КонецПроцедуры // ЗаполнениеТаблЭнергЦенность()
Процедура ДобавитьТаблЭнергЦенность()
	Перем ФормаЗаписи;
	Если ПравоДоступа( "Корректировка", "Справочник.АкционныеСкидкиТоваров" ) = 0 Тогда
		Предупреждение( "Недостаточно прав доступа!" ); Возврат;
	КонецЕсли;
	глФлагРасшифровки=1;
	глРасшифровка=ВзятьКонтекст(Контекст);
	ОткрытьФорму("Элемент.ТаблЭнергЦенность",ФормаЗаписи,,,ТекущийЭлемент());
	глФлагРасшифровки=0;
	глРасшифровка=0;
КонецПроцедуры
Процедура ИзменитьТаблЭнергЦенность()
	Перем ФормаЗаписи;
	//Если ПравоДоступа( "Корректировка", "Справочник.АкционныеСкидкиТоваров" ) = 0 Тогда
	//	Предупреждение( "Недостаточно прав доступа!" ); Возврат;
	//КонецЕсли;
	Если ТаблЭнергЦенность.ТекущаяСтрока()=0 Тогда
		Возврат;
	КонецЕсли;

	Если ТаблЭнергЦенность.ТекущаяКолонка()="Количество" Тогда

		Если ТаблЭнергЦенность.ТекущаяСтрока()=1 Тогда
			Возврат;
		Иначе
			л_гр=ТаблЭнергЦенность.ПолучитьЗначение(ТаблЭнергЦенность.ТекущаяСтрока(),"Количество");
			Если ВвестиЧисло(л_гр,"Введитеде количество грамм",9,4,0)=1 Тогда
				СпрЭнергЦенность=СоздатьОбъект("Справочник.НоменклатураЭнергЦенность");
				СпрЭнергЦенность.ИспользоватьВладельца(ТекущийЭлемент());
				Эл=ТаблЭнергЦенность.ПолучитьЗначение(ТаблЭнергЦенность.ТекущаяСтрока(),"ТекущийЭлемент");
				СпрЭнергЦенность.НайтиЭлемент(Эл);
				СпрЭнергЦенность.Количество=л_гр;
				СпрЭнергЦенность.КоличествоТекст=Строка(л_гр)+"g";
				СпрЭнергЦенность.Единица=Перечисление.ЕдиницыИзмерения.Грамм;
				СпрЭнергЦенность.Автор = Пользователь;
				СпрЭнергЦенность.Записать();

				Эл=ТаблЭнергЦенность.ПолучитьЗначение(1,"ТекущийЭлемент");
				СпрЭнергЦенность.НайтиЭлемент(Эл);
				СпрЭнергЦенность.КоличествоТекст=РасчетКалорийВыводСтроки(ТекущийЭлемент());
				СпрЭнергЦенность.Автор = Пользователь;
				СпрЭнергЦенность.Записать();
			КонецЕсли;	
		КонецЕсли;
	ИначеЕсли ТаблЭнергЦенность.ТекущаяКолонка()="КоличествоТекст" Тогда	
		л_гр=ТаблЭнергЦенность.ПолучитьЗначение(ТаблЭнергЦенность.ТекущаяСтрока(),ТаблЭнергЦенность.ТекущаяКолонка());
		Если ВвестиСтроку(л_гр,"Введитеде текст для этикетки",20,0,0)=1 Тогда
			СпрЭнергЦенность=СоздатьОбъект("Справочник.НоменклатураЭнергЦенность");
			СпрЭнергЦенность.ИспользоватьВладельца(ТекущийЭлемент());
			Эл=ТаблЭнергЦенность.ПолучитьЗначение(ТаблЭнергЦенность.ТекущаяСтрока(),"ТекущийЭлемент");
			СпрЭнергЦенность.НайтиЭлемент(Эл);
			СпрЭнергЦенность.КоличествоТекст=л_гр;
			СпрЭнергЦенность.Автор = Пользователь;
			СпрЭнергЦенность.Записать();
		КонецЕсли;
	КонецЕсли;		
	л_ТекущаясСтрока=ТаблЭнергЦенность.ТекущаяСтрока();	
	ЗаполнениеТаблЭнергЦенность();
	ТаблЭнергЦенность.ТекущаяСтрока(л_ТекущаясСтрока);
	Форма.Обновить();
КонецПроцедуры
Процедура УдалитьТаблЭнергЦенность()
	Если ПравоДоступа( "Корректировка", "Справочник.АкционныеСкидкиТоваров" ) = 0 Тогда
		Предупреждение( "Недостаточно прав доступа!" ); Возврат;
	КонецЕсли;
	Если Вопрос("Вы действительно хотите удалить акционную скидку? (будет помечена на удаление)",1)=2 Тогда
		Возврат;
	КонецЕсли;
	Поз=ТаблЭнергЦенность.ТекущаяСтрока();
	Эл=ТаблЭнергЦенность.ПолучитьЗначение(Поз,"ТекущийЭлемент");
	Спр=СоздатьОбъект("Справочник.ТаблЭнергЦенность");
	Спр.ИспользоватьВладельца(ТекущийЭлемент());
	Если Спр.НайтиЭлемент(Эл)=1 Тогда
		//Закомментировано Инсталлятором МОД:Спр.Записать();
	//Начало текста, вставленного Инсталлятором МОД
	ОбъектЗаписать(Спр, );
	//Конец текста, вставленного Инсталлятором МОД

		//Закомментировано Инсталлятором МОД:Спр.Удалить(0);
	//Начало текста, вставленного Инсталлятором МОД
	ОбъектУдалить(Спр, 0);
	//Конец текста, вставленного Инсталлятором МОД

		ТаблЭнергЦенность.УдалитьСтроку(Поз);
		Если ТаблЭнергЦенность.КоличествоСтрок()<=0 Тогда
			Форма.КнопкаИзменить22.Доступность(0);
			Форма.КнопкаУдалить22.Доступность(0);
		КонецЕсли;
		Форма.Обновить();
	КонецЕсли;
КонецПроцедуры
Процедура Очистить0ТаблЭнергЦенность()
	
	Спр=СоздатьОбъект("Справочник.НоменклатураЭнергЦенность");
	Спр.ИспользоватьВладельца(ТекущийЭлемент());
//	Спр.ПорядокКодов();
	Спр.ПорядокРеквизита("ПорядокВывода");
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()=1  Цикл
		Если Спр.ПометкаУдаления()=1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Спр.Количество=0 Тогда
			Спр.Количество=ПолучитьПустоеЗначение();
			Спр.КоличествоТекст=ПолучитьПустоеЗначение();
			Спр.Единица=ПолучитьПустоеЗначение();
			Спр.Записать();
		КонецЕсли;
	КонецЦикла;	

	ОбновлениеТаблЭнергЦенность();
КонецПроцедуры



//<<Алгоритм Успеха>> (end) 
//************************************************************
//------------------------------------------------------------------
Процедура УправлениеЗакладками()
	
//	Если (семЕстьПраво("Справочник","Номенклатура","Только состав")=0) ИЛИ (Форма.ТолькоПросмотр()=1) Тогда
		Форма.Закладки.ДобавитьЗначение("Общие","Общие");
		Форма.Закладки.ДобавитьЗначение("Дополнительно","Дополнительно");
		Форма.Закладки.ДобавитьЗначение("Закупка","Закупка");
//	КонецЕсли;
	
	Если Выбран()=1 Тогда
		
//		Если (семЕстьПраво("Справочник","Номенклатура","Только состав")=0) ИЛИ (Форма.ТолькоПросмотр()=1) Тогда
	
			Если (ВидТовара=Перечисление.ВидыТоваров.Товар)
			//------------osia---------------------------
			ИЛИ (ВидТовара=Перечисление.ВидыТоваров.Блюдо)
			ИЛИ (ВидТовара=Перечисление.ВидыТоваров.Ингредиент)
			ИЛИ (ВидТовара=Перечисление.ВидыТоваров.Компонент)
			ИЛИ (ВидТовара=Перечисление.ВидыТоваров.ОС)
			ИЛИ (ВидТовара=Перечисление.ВидыТоваров.Услуга)
			Тогда
				Форма.Закладки.ДобавитьЗначение("Единицы","Единицы/Цены");
			КонецЕсли;
			
			Если (ВидТовара=Перечисление.ВидыТоваров.Блюдо) Тогда
				Форма.Закладки.ДобавитьЗначение("Блюдо","Блюдо");
			КонецЕсли;
			
			Если (ВидТовара=Перечисление.ВидыТоваров.Ингредиент) ИЛИ (ВидТовара=Перечисление.ВидыТоваров.Товар) Тогда
				Форма.Закладки.ДобавитьЗначение("Ингредиент","Ингредиент");
			КонецЕсли;
			
			Если (ВидТовара=Перечисление.ВидыТоваров.Услуга) Тогда
				Форма.СписокСтатейИздержек.Доступность(1);
				Форма.ПодписьСтатьиИздержек.Доступность(1);
			Иначе
				Форма.СписокСтатейИздержек.Доступность(0);
				Форма.ПодписьСтатьиИздержек.Доступность(0);
			КонецЕсли; 
			Если ВидТовара=Перечисление.ВидыТоваров.Компонент Тогда
				Форма.ВалютаЗакупки.Доступность(0);
				Форма.ЦенаПриобретения.Доступность(0);
				Форма.ВалютаПоставщика.Доступность(0);
				Форма.ЦенаПоставщика.Доступность(0);
				Форма.ВалютаУчета.Доступность(0);
				Форма.СтавкаНДС.Доступность(0);
	//			Форма.НалогСПродаж.Доступность(0);
			Иначе
				Форма.ВалютаЗакупки.Доступность(1);
				Форма.ЦенаПриобретения.Доступность(1);
				Форма.ВалютаПоставщика.Доступность(1);
				Форма.ЦенаПоставщика.Доступность(1);
				Форма.ВалютаУчета.Доступность(0);
				Форма.СтавкаНДС.Доступность(1);
	//			Форма.НалогСПродаж.Доступность(1);
			КонецЕсли;	
//		КонецЕсли; //только состав
		
		ВидимостьПроп();
		ВидимостьРК(); 
		ДоступностьКн();
		Если ВидТовара=Перечисление.ВидыТоваров.Блюдо Тогда
			Если Константа.УстановкаЦеныРеализации=Перечисление.УстанЦенРеализ.Автоматически Тогда
//				Форма.ТаблицаЦен.Доступность(0);
				Форма.КнопкаДобавить21.Доступность(0);
				Форма.КнопкаИзменить21.Доступность(0);
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли;
	
	Форма.Закладки.ДобавитьЗначение("Фото","Фото");
	Форма.Закладки.ДобавитьЗначение("Состав","Состав");	
	Форма.Закладки.ДобавитьЗначение("СоставSQL","Состав для наклейки");	
//	Если НазваниеНабораПрав()="Администратор" Тогда

//	Если (семЕстьПраво("Справочник","Номенклатура","Только состав")=0) ИЛИ (Форма.ТолькоПросмотр()=1) Тогда
		Форма.Закладки.ДобавитьЗначение("Замены","Замены/Альтернативы");		
//	КонецЕсли;
	
	//КонецЕсли;
	
КонецПроцедуры                                                                       
//------------------------------------------------------------------
Процедура ПриВыбореЗакладки(Ном,Значен)
	
	Если Значен="Общие" Тогда
		Форма.ИспользоватьСлой("Основной, Кнопки ",2); 
		      
		Если Пользователь.РазрРедБазЕдиницу=0 Тогда
			Форма.БазоваяЕдиницаИзмерения.Доступность(?(Выбран()=1,0,1));
			Форма.ВидТовара.Доступность(?(Выбран()=1,0,1));
		КонецЕсли;
		
		Форма.ЦенаПриобретения.Видимость(Пользователь.ТекущийЭлемент().РазрРедЗакупЦены);
		Форма.лЦенаПриобретения.Видимость(Пользователь.ТекущийЭлемент().РазрРедЗакупЦены);
		
	ИначеЕсли Значен="Дополнительно" Тогда
		//ЗаполнениеТаблицыЗапасов();
		Форма.ИспользоватьСлой("Дополнительно, Кнопки ",2);
		Если ЕдНеттоВеса.Единица = БазоваяЕдиницаИзмерения Тогда
			Форма.КоэфНеттоВеса.Видимость(0);
			КоэфНеттоВеса = 1;
			//Форма.подпКоэфЕдВеса.Видимость(0);
			Форма.подп2.Видимость(0);
		Иначе
			Если ЕдНеттоВеса.Выбран()=1 Тогда
				КоэфНеттоВеса = Окр(1/ЕдНеттоВеса.ТекущийЭлемент().Коэффициент,4,1);
			Иначе
				ЕдПервУпак=БазоваяЕдиницаИзмерения;
				КоэфНеттоВеса=1;
			КонецЕсли;
			Форма.КоэфНеттоВеса.Видимость(1);
			//Форма.подпКоэфЕдВеса.Видимость(1);
			Форма.подп2.Видимость(1);
		КонецЕсли;
	ИначеЕсли Значен="Закупка" Тогда
		
		Если ((ВидТовара=Перечисление.ВидыТоваров.Блюдо)или(ВидТовара=Перечисление.ВидыТоваров.Компонент)) Тогда
			Форма.ЦенаПриобретения.Доступность(0);
			Форма.ЦенаПоставщика.Доступность(0);
		Иначе
			Форма.ЦенаПриобретения.Доступность(1);
			Форма.ЦенаПоставщика.Доступность(1);
		КонецЕсли;
		

		Форма.ЦенаПоставщика.Видимость(Пользователь.ТекущийЭлемент().РазрРедЗакупЦены);
		Форма.лЦенаПост.Видимость(Пользователь.ТекущийЭлемент().РазрРедЗакупЦены);
		Форма.АкцизнаяСтавка.Видимость(Пользователь.ТекущийЭлемент().РазрРедЗакупЦены);
		Форма.лАкциз.Видимость(Пользователь.ТекущийЭлемент().РазрРедЗакупЦены);
		
		
 		ЗаполнениеТаблицыЗапасов();
 		ПриВводеДопСрокаГодности( "в днях" );
		Форма.ИспользоватьСлой("Закупка, Кнопки ",2);
	ИначеЕсли Значен="Единицы" Тогда
		Если (Выбран()=0) ИЛИ (Записан=0) Тогда
			Предупреждение("Выполните запись элемента справочника!",5);
			Форма.Закладки.УдалитьВсе();
			УправлениеЗакладками();
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
                                   
		Если ВидТовара=Перечисление.ВидыТоваров.Блюдо Тогда
			Если Константа.УстановкаЦеныРеализации=Перечисление.УстанЦенРеализ.Автоматически Тогда
//				Форма.ТаблицаЦен.Доступность(0);
				Форма.КнопкаДобавить21.Доступность(0);
				Форма.КнопкаИзменить21.Доступность(0);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнениеТаблицыЕдиниц();
		ЗаполнениеТаблицыЦен();
		ЗаполнениеТаблицыАС();
		Форма.ИспользоватьСлой("Единицы, Кнопки ",2);
	ИначеЕсли  Значен="Блюдо" Тогда
		Если (Выбран()=0) ИЛИ (Записан=0) Тогда
			Предупреждение( "Выполните запись элемента справочника!", 5 );
			Форма.Закладки.УдалитьВсе();
			УправлениеЗакладками();
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
		Форма.ИспользоватьСлой("Блюдо,Кнопки ",2);
	ИначеЕсли  Значен="Ингредиент" Тогда
		Если (Выбран()=0) ИЛИ (Записан=0) Тогда
			Предупреждение("Выполните запись элемента справочника!",5);
			Форма.Закладки.УдалитьВсе();
			УправлениеЗакладками();
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
		Форма.ИспользоватьСлой("Ингредиент, Кнопки ",2);
	ИначеЕсли  Значен="Фото" Тогда
		Форма.ИспользоватьСлой("Фото, Кнопки ",2);
		Обновить_Большое_Фото();
	ИначеЕсли  Значен="Состав" Тогда
		ЗаполнениеТаблЭнергЦенность();
		Форма.ИспользоватьСлой("Состав,СоставТаблица, Кнопки ",2);
	ИначеЕсли  Значен="СоставSQL" Тогда
		ЗаполнениеТаблЭнергЦенность();
		п_ИТСоставSQL=ЗагрузкаИТ(ТекущийЭлемент());
		Форма.ИспользоватьСлой("СоставSQL,СоставТаблица, Кнопки ",2);
	ИначеЕсли  Значен="Замены" Тогда
		Если (Выбран()=0) ИЛИ (Записан=0) Тогда
			Предупреждение( "Выполните запись элемента справочника!", 5 );
			Форма.Закладки.УдалитьВсе();
			УправлениеЗакладками();
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
		Форма.ИспользоватьСлой("Замены,Кнопки ",2);
	КонецЕсли;
	ВидимостьПроп();
	ВидимостьРК();
	ДоступностьКн();
	// сем \\
	семУстВидимости();
	Форма.НаименованиеLV.Доступность( ?( Значен = "Общие", 1, 0 ) );
	// сем //
	
	п_ИТСоставSQL=ЗагрузкаИТ(ТекущийЭлемент());
КонецПроцедуры

Процедура ПослеОткрытия()

	Ф=СоздатьОбъект("Форма");
	Ф.УстановитьФорму(Форма);
	_тпУпаковка=Ф.СоздатьЭлементУправления("ТабличноеПоле","тпУпаковка");
	_тпУпаковка2=Ф.СоздатьЭлементУправления("ТабличноеПоле","тпУпаковка2");
	_тпУпаковка3=Ф.СоздатьЭлементУправления("ТабличноеПоле","тпУпаковка3");
	
	_тпДопСклады=Ф.СоздатьЭлементУправления("ТабличноеПоле","тпДопСклады");
	_тпСвойстваТоваров=Ф.СоздатьЭлементУправления("ТабличноеПоле","тпСвойстваТоваров");
	
	_тпЗамены=Ф.СоздатьЭлементУправления("ТабличноеПоле","тпЗамены");
		
	ЗаполнитьТПЗамены();
	НастройкаТПЗамены();
	ЗаполнитьУпаковкаТП();
	НастройкаУпаковкаТП();
	ЗаполнитьДопСкладыТП();
	НастройкаДопСкладыТП();
	ЗаполнитьСвойстваТП();
	НастройкаСвойстваТП();	
	
	Транслит(Расш,Форма);
КонецПроцедуры

//********************************
Процедура ОчиститьФото()
	Перем Пусто;
	
	Пусто = СоздатьОбъект("Картинка");
	фотка.УстановитьКартинку(Пусто);
КонецПроцедуры
//********************************

//********************************
Функция Обновить_фотку()  
	Результат="";
    ОчиститьФото();
	
	Если ПустоеЗначение(Константа.ПутьККаталогуФотоТоваров)=1 Тогда
		КаталогФотографий=КаталогИБ()+"Photo\";
	Иначе
		КаталогФотографий=СокрЛП(Константа.ПутьККаталогуФотоТоваров);
	КонецЕсли;
	ФС.УстТекКаталог(КаталогФотографий);
	
	Попытка
		ФайлФото=""+СокрЛП(Код)+".*";
		ФайлФото2=""+СокрЛП(КодТовара)+".*";
		Если (ФС.СуществуетФайл(ФайлФото) = 1) Тогда
			фотка.Загрузить(КаталогФотографий+ФС.НайтиПервыйФайл(ФайлФото));
			фотка.РежимРисования(3);
		ИначеЕсли (ФС.СуществуетФайл(ФайлФото2) = 1) Тогда
			фотка.Загрузить(КаталогФотографий+ФС.НайтиПервыйФайл(ФайлФото2));
			фотка.РежимРисования(3);
		Иначе
			ОчиститьФото();
		КонецЕсли; 
	Исключение
	КонецПопытки;
КонецФункции	// обновить_фотку


//********************************
Функция Обновить_Большое_Фото()  
	Результат="";
	Пусто = СоздатьОбъект("Картинка");
	бФото.УстановитьКартинку(Пусто);
	Если ПустоеЗначение(Константа.ПутьККаталогуФотоТоваров)=1 Тогда
		КаталогФотографий=КаталогИБ()+"Photo\";
	Иначе
		КаталогФотографий=СокрЛП(Константа.ПутьККаталогуФотоТоваров);
	КонецЕсли;
	ФС.УстТекКаталог(КаталогФотографий);
	ФайлФото=""+СокрЛП(Код)+".*";
	ФайлФото2=""+СокрЛП(КодТовара)+".*";
	Если (ФС.СуществуетФайл(ФайлФото) = 1) Тогда
		бФото.Загрузить(КаталогФотографий+ФС.НайтиПервыйФайл(ФайлФото));
		бФото.РежимРисования(3);
	ИначеЕсли (ФС.СуществуетФайл(ФайлФото2) = 1) Тогда
		бФото.Загрузить(КаталогФотографий+ФС.НайтиПервыйФайл(ФайлФото2));
		бФото.РежимРисования(3);
	Иначе
		бФото.УстановитьКартинку(Пусто);
	КонецЕсли; 
КонецФункции	// обновить_фотку

//------------------------------------------------------------------
Процедура ПриОткрытии()
	семИзмененияРеквизитов( "Запомнить" );
 	текМестоИсп = Константа.МестоИспользования;

	Если ПустоеЗначение(Пользователь.РазрРедТовараПоПризнакуСпецКода)=0 Тогда
		Если ПризнакСпецКода<>Пользователь.РазрРедТовараПоПризнакуСпецКода Тогда
			Предупреждение("Вы имеете право редактировать карточку товара только для кодов: "+Пользователь.РазрРедТовараПоПризнакуСпецКода);
			Форма.ТолькоПросмотр(1);
		КонецЕсли;
	КонецЕсли;

 	
	Если Выбран()=1 Тогда
		старБазЕд = БазоваяЕдиницаИзмерения;
		Записан=1;
		Обновить_фотку();
	КонецЕсли;
	
	УправлениеЗакладками();
	ТаблицаЕдиниц.НоваяКолонка("ТекущийЭлемент");
	ТаблицаЕдиниц.ВидимостьКолонки("ТекущийЭлемент",0);
	ТаблицаЕдиниц.НоваяКолонка("Единица",,,,"Единица",8);
	ТаблицаЕдиниц.НоваяКолонка("Коэффициент",,,,"К",6); 
	ТаблицаЦен.НоваяКолонка("ТекущийЭлемент");
	ТаблицаЦен.ВидимостьКолонки("ТекущийЭлемент",0);
	ТаблицаЦен.НоваяКолонка("КатегорияЦены",,,,"Кат.цены",9);
	ТаблицаЦен.НоваяКолонка("Единица",,,,"Единица",6);
	ТаблицаЦен.НоваяКолонка("Цена",,,,"Цена",7); 
	ТаблицаЦен.НоваяКолонка("Валюта",,,,"Вал.",6);
	ТаблицаАС.НоваяКолонка("ТекущийЭлемент");
	ТаблицаАС.ВидимостьКолонки("ТекущийЭлемент",0);
	ТаблицаАС.НоваяКолонка("ДатаНачала",,,,"Дата нач.",9);
	ТаблицаАС.НоваяКолонка("ДатаКонца",,,,"Дата кон.",9); 
	ТаблицаАС.НоваяКолонка("КатегорияЦен",,,,"Кат.цены",15);
	ТаблицаАС.НоваяКолонка("ПроцентСкидки","Число",6,2,"% скидки",9);

	ТаблицаЗапасов.НоваяКолонка("ТекущийЭлемент");
	ТаблицаЗапасов.ВидимостьКолонки("ТекущийЭлемент",0);
	ТаблицаЗапасов.НоваяКолонка("УпрАналитика",,,,"Аналитика",10);
	ТаблицаЗапасов.НоваяКолонка("МинЗапас",,,,"Мин.",4);
	ТаблицаЗапасов.НоваяКолонка("РасчетМинЗапаса",,,,"Расч.",2);
	ТаблицаЗапасов.ВыводитьПиктограммы("РасчетМинЗапаса");
	ТаблицаЗапасов.НоваяКолонка("МинЗапасАвто",,,,"Мин.авто",4);

	//Энергитическая ценность
	
	ТаблЭнергЦенность.НоваяКолонка("ТекущийЭлемент");
	ТаблЭнергЦенность.ВидимостьКолонки("ТекущийЭлемент",0);
	ТаблЭнергЦенность.НоваяКолонка("ВидСостава",,,,"Вид",15);
	ТаблЭнергЦенность.НоваяКолонка("Количество",,,,"Кол.",10);
	ТаблЭнергЦенность.НоваяКолонка("КоличествоТекст",,,,"КолЭт.",10);
	//ТаблЭнергЦенность.НоваяКолонка("Единица",,,,"Ед.",4);
	
	
	СписокСтатейИздержек.ДобавитьЗначение("","<не выбрана>");
	СписокСтатейИздержек.ДобавитьЗначение(Перечисление.СтатьиИздержек.Транспорт);
	СписокСтатейИздержек.ДобавитьЗначение(Перечисление.СтатьиИздержек.Хранение);
	СписокСтатейИздержек.ДобавитьЗначение(Перечисление.СтатьиИздержек.Реклама);
	СписокСтатейИздержек.ДобавитьЗначение(Перечисление.СтатьиИздержек.Прочие);
	СписокСтатейИздержек.ТекущаяСтрока(?(СтатьяИздержекУслуги.Выбран()=1,СписокСтатейИздержек.НайтиЗначение(СтатьяИздержекУслуги),1));
	
	
	Если Пользователь.РазрРедБазЕдиницу=0 Тогда
		Форма.БазоваяЕдиницаИзмерения.Доступность(?(Выбран()=1,0,1));
		//Форма.БазоваяЕдиницаИзмеренияРозница.Доступность(?(Выбран()=1,0,1));
		Форма.ВидТовара.Доступность(?(Выбран()=1,0,1));
	Иначе
//		Форма.КодДляРозницы.Доступность(1);
	КонецЕсли;     

	Форма.ЦенаПриобретения.Видимость(Пользователь.ТекущийЭлемент().РазрРедЗакупЦены);
	Форма.лЦенаПриобретения.Видимость(Пользователь.ТекущийЭлемент().РазрРедЗакупЦены);
	Форма.ЦенаПоставщика.Видимость(Пользователь.ТекущийЭлемент().РазрРедЗакупЦены);
	Форма.лЦенаПост.Видимость(Пользователь.ТекущийЭлемент().РазрРедЗакупЦены);

    Если Найти(НазваниеНабораПрав(),"Администратор")>0 Тогда
		Форма.КодДляРозницы.Доступность(1);
		Форма.ГруппаСкидкиКасса.Доступность(1);
	Иначе                                  
		Форма.КодДляРозницы.Доступность(0);
		Форма.ГруппаСкидкиКасса.Доступность(0);
	КонецЕсли;

	Если ( Выбран() = 0 ) или ( НазваниеНабораПрав() = "Администратор" ) ИЛИ (семЕстьПраво("Справочник","Номенклатура","Изменение вида товара")=1 ) Тогда
		Форма.БазоваяЕдиницаИзмерения.Доступность( 1 );
//		Форма.БазоваяЕдиницаИзмеренияРозница.Доступность( 1 );
		Форма.ВидТовара.Доступность(1);
	Иначе                                  
		Форма.БазоваяЕдиницаИзмерения.Доступность( 0 );
//		Форма.БазоваяЕдиницаИзмеренияРозница.Доступность( 0 );
		Форма.ВидТовара.Доступность(0);
	КонецЕсли;

	Если семЕстьПраво("Справочник","Номенклатура","Изменение базовой единицы измерения")=1 Тогда
		Форма.БазоваяЕдиницаИзмерения.Доступность( 1 );
	КонецЕсли;
	
	Если ЕдНеттоВеса.Выбран()=1 Тогда
		ЕдПервУпак=ЕдНеттоВеса.Единица;
		КоэфНеттоВеса = Окр(1/ЕдНеттоВеса.Коэффициент,4,1);
	Иначе
		ЕдПервУпак=БазоваяЕдиницаИзмерения;
		КоэфНеттоВеса=1;
	КонецЕсли;
	
	Форма.КоэфНеттоВеса.Доступность(?(ЕдПервУпак = БазоваяЕдиницаИзмерения,0,1));
	
	ВесПервичной = Вес / КоэфНеттоВеса;

	СохранениеПериодическихРеквизитов(2,"*");
	семУстПеревода();
	
	Если (ПустоеЗначение(Пользователь.ПоставщикТовара)=0) И ((Поставщик=Пользователь.ПоставщикТовара) ИЛИ (Поставщик.ПринадлежитГруппе(Пользователь.ПоставщикТовара)=1)) Тогда
	ИначеЕсли  (ПустоеЗначение(Пользователь.ПоставщикТовара)=0) Тогда
		Предупреждение("У вас нет прав редактировать карточку товара от данного поставщика!");
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
//	Если (семЕстьПраво("Справочник","Номенклатура","Только состав")=1) И (Форма.ТолькоПросмотр()=0) Тогда
	//	Форма.ИспользоватьСлой("Состав, Кнопки ",2);
	//	ВидимостьРК();
	//	ПриВыбореЗакладки( 0, "Состав" );
	//Иначе
		Форма.ИспользоватьСлой("Основной, Кнопки ",2);
		ВидимостьРК();
		ПриВыбореЗакладки( 0, "Общие" );
//	КонецЕсли;
	
	
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Элемент." + Вид(),ТаблицаПечФорм); 
КонецПроцедуры

Функция ОбязательныеПоляЗаполнены()
	стр = "Не заполнено поле ";
	Если ПустоеЗначение(НаименованиеLV) = 1 Тогда
		Возврат стр + """Наименование""";
	Иначе // все обязательные поля заполнены
		Возврат "";
	КонецЕсли;       
КонецФункции

Функция семКодаРК()
	Если КодРК = 0 Тогда Возврат ""; КонецЕсли;
	спр = СоздатьОбъект( "Справочник.Номенклатура" );
	НеУникальный = 0;
	Если спр.ВыбратьЭлементыПоРеквизиту("КодРК",КодРК,0,0) = 1 Тогда
		Пока спр.ПолучитьЭлемент() = 1 Цикл
			Если спр.ТекущийЭлемент() = ТекущийЭлемент() Тогда Продолжить; КонецЕсли;
			Если спр.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;
			НеУникальный = 1; Прервать;
		КонецЦикла;
	КонецЕсли;
	Если НеУникальный = 1 Тогда 
		Возврат Шаблон( "Штрих-код [КодРК] уже задан для товара [спр.Код] [спр.Наименование]" );
	КонецЕсли;
	Возврат "";
КонецФункции

Функция семПроверкаШтрихКода()
	промШтрихКод = СокрЛП( ШтрихКод );
	Если ПустоеЗначение( промШтрихКод ) = 1 Тогда Возврат ""; КонецЕсли;
	Если СтрДлина( промШтрихКод ) < 7 Тогда Возврат "Длина штрих-кода не может быть меньше 7-ми символов."; КонецЕсли;
	спр = СоздатьОбъект( "Справочник.Номенклатура" );
	НеУникальный = 0;
	Если спр.ВыбратьЭлементыПоРеквизиту("ШтрихКод",промШтрихКод,0,0) = 1 Тогда
		Пока спр.ПолучитьЭлемент() = 1 Цикл
			Если спр.ТекущийЭлемент() = ТекущийЭлемент() Тогда Продолжить; КонецЕсли;
			Если спр.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;
			НеУникальный = 1; Прервать;
		КонецЦикла;
	КонецЕсли;
	Если НеУникальный = 1 Тогда 
		Возврат Шаблон( "Штрих-код [промШтрихКод] уже задан для товара [спр.Код] [спр.Наименование]" );
	КонецЕсли;
	
	Если  глДополнитьСтрокуЛ(Число(промШтрихКод),"0",СтрДлина(СокрЛП(промШтрихКод)))<>СокрЛП(промШтрихКод) Тогда
		Возврат Шаблон( "Штрих-код [промШтрихКод] содержит отличные от цифр символы" );
	КонецЕсли;
	
	Возврат "";
КонецФункции

Функция ПроверкаВесовогоКода()
	промВесовойКод = ВесовойКод;
	Если промВесовойКод = 0 Тогда Возврат ""; КонецЕсли;
	Если СтрДлина( промВесовойКод ) < 6 Тогда Возврат "Длина весового кода не может быть меньше 6-и символов."; КонецЕсли;
	спр = СоздатьОбъект( "Справочник.Номенклатура" );
	НеУникальный = 0;
	Если спр.ВыбратьЭлементыПоРеквизиту("ВесовойКод",промВесовойКод,0,0) = 1 Тогда
		Пока спр.ПолучитьЭлемент() = 1 Цикл
			Если спр.ТекущийЭлемент() = ТекущийЭлемент() Тогда Продолжить; КонецЕсли;
			Если спр.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;
			НеУникальный = 1; Прервать;
		КонецЦикла;
	КонецЕсли;
	Если НеУникальный = 1 Тогда 
		Возврат Шаблон( "Весовой код [промВесовойКод] уже задан для товара [спр.Код] [спр.Наименование]" );
	КонецЕсли;
	Возврат "";
КонецФункции

//----------------------
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписи() Далее

Процедура ЗарегистрироватьУпаковку(СпрУ,ВидУпак,ВесУпак,ТипУпак,МатериалУпак = "");
	Если ПустоеЗначение(ТипУпак)=1 Тогда
		Возврат;
	КонецЕсли;
	СпрУ.ИспользоватьВладельца(ТекущийЭлемент());
	Нашли=0;
	Если ТипУпак=Перечисление.ТипыУпаковки.Первичная Тогда
		КолУпак=1;
	ИначеЕсли ТипУпак=Перечисление.ТипыУпаковки.Вторичная Тогда	
		КолУпак=ЛогистикаКолВУпаковке;
	ИначеЕсли ТипУпак=Перечисление.ТипыУпаковки.Третичная Тогда	
		КолУпак=ЛогистикаКолВУпаковке*ЛогистикаКолУпакНаЕвроПалете*ЛогистикаКолУпакНаПалетеВРяду;
	КонецЕсли;
	Если ПустоеЗначение(МатериалУпак)=1 Тогда
		МатериалУпак = ВидУпак.Материал;
	КонецЕсли;
			
	СпрУ.ВыбратьЭлементы();
	Пока СпрУ.ПолучитьЭлемент() = 1 Цикл
		Если (СпрУ.ТипУпаковки = ТипУпак) и ((СпрУ.Материал = МатериалУпак) и (ПустоеЗначение(МатериалУпак)=0)) Тогда
			Нашли=1;
			Если СпрУ.ПометкаУдаления()=1 Тогда
				СпрУ.СнятьПометкуУдаления();
				ОбъектЗаписать(СпрУ);
			КонецЕсли;
			Если (СпрУ.ВесБруттоУпаковки <> ВесУпак) или (СпрУ.КолВУпаковке <> КолУпак) или (СпрУ.Материал <> МатериалУпак) Тогда
				Если ВесУпак <> 0 Тогда
					СпрУ.ВесБруттоУпаковки=ВесУпак;
				КонецЕсли;
				Если СпрУ.КолВУпаковке <> КолУпак Тогда
					СпрУ.КолВУпаковке = КолУпак;
				КонецЕсли;
				Если СпрУ.Материал <> МатериалУпак Тогда
					СпрУ.Материал = МатериалУпак;
				КонецЕсли;
				ОбъектЗаписать(СпрУ);
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Нашли=0 Тогда
		СпрУ.Новый();
		СпрУ.ВидУпаковки = ВидУпак;
		СпрУ.ТипУпаковки = ТипУпак;
		СпрУ.Материал = МатериалУпак;
		Если ВесУпак <> 0 Тогда
			СпрУ.ВесБруттоУпаковки=ВесУпак;
		КонецЕсли;
		Если КолУпак <> 0 Тогда
			СпрУ.КолВУпаковке=КолУпак;
		КонецЕсли;
		ОбъектЗаписать(СпрУ);
	КонецЕсли;
КонецПроцедуры
//********************************
Процедура УдалитьУпаковку(СпрУ,ТипУпак,МатериалУпак)
	Если ПустоеЗначение(ТипУпак)=1 Тогда
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(МатериалУпак)=1 Тогда
		Возврат;
	КонецЕсли;
	СпрУ.ИспользоватьВладельца(ТекущийЭлемент());
	Нашли=0;
			
	СпрУ.ВыбратьЭлементы();
	Пока СпрУ.ПолучитьЭлемент() = 1 Цикл
		Если (СпрУ.ТипУпаковки = ТипУпак) и (СпрУ.Материал = МатериалУпак) Тогда
			Нашли=1;
			Если СпрУ.ПометкаУдаления()=0 Тогда
				ОбъектУдалить(СпрУ,0);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
//********************************
Процедура Создать(ТипУпак)
	Если Выбран()=0 Тогда
		Предупреждение("Вначале товар необходимо записать!");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	СпрУ=СоздатьОбъект("Справочник.УпаковкаТоваров");
	Список = СоздатьОбъект("СписокЗначений");
	Список.ДобавитьЗначение(ТекущийЭлемент());
	Список.ДобавитьЗначение(ТипУпак);
	ОткрытьФормуМодально("Обработка.МастерВводаУпаковки",Список);
	Попытка
		ТабУпак=Список.ПолучитьЗначение(3);
		// помечаем на удаление всю упаковку данного типа
		// чтобы избежать "дублей" по материалам
		СпрУпак=СоздатьОбъект("Справочник.УпаковкаТоваров");
		СпрУпак.ИспользоватьВладельца(ТекущийЭлемент());
		СпрУпак.ВыбратьЭлементы();
		Пока СпрУпак.ПолучитьЭлемент() = 1 Цикл
			Если СпрУпак.ТипУпаковки = ТипУпак Тогда
				ОбъектУдалить(СпрУпак,0);
			КонецЕсли;
		КонецЦикла;
		ТабУпак.ВыбратьСтроки();
		Пока ТабУпак.ПолучитьСтроку()=1 Цикл
			Если ТабУпак.Вес <> 0 Тогда
				ЗарегистрироватьУпаковку(СпрУ,,ТабУпак.Вес,ТипУпак,ТабУпак.Материал);
			Иначе
				УдалитьУпаковку(СпрУ,ТипУпак,ТабУпак.Материал);
			КонецЕсли;	
		КонецЦикла;
	Исключение
	КонецПопытки;
	ЗаполнитьУпаковкаТП();
КонецПроцедуры

Процедура ПроверкаБруттоПоддона()
	Если БруттоТретичное() > 800 Тогда
		Предупреждение("Обратите внимание на брутто-вес товаров на поддоне > 800 кг. 
		|Возможно вес товара или упаковки заведен некорректно!");
		
	КонецЕсли;
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ПриЗаписи()
//Закомментировано Инсталлятором МОД:Процедура ПриЗаписи() 
	//Если ПустоеЗначение(ШтрихКод) = 0 Тогда
	//	Если СтрДлина(СокрЛП(ШтрихКод)) <> 13 Тогда
	//		Предупреждение("Штрих код введен неправильно!");
	//		СтатусВозврата( 0 );
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;

	Если Выбран()=1 Тогда
		Если СокрЛП(НаименованиеLV)<>СокрЛП(ТекущийЭлемент().НаименованиеLV) Тогда
			ДатаАктуальности = РабочаяДата();
		КонецЕсли;
	КонецЕсли;	

	Если ПустоеЗначение(старБазЕд)=1 Тогда
		старБазЕд=БазоваяЕдиницаИзмерения;
	КонецЕсли;
	
	ШтрихКод=СокрЛП(ШтрихКод);
	 Ответ = семПроверкаШтрихКода();
	 Если ПустоеЗначение( Ответ ) = 0 Тогда
	 	Сообщить( Ответ, "!" ); СтатусВозврата( 0 ); Возврат;
	 КонецЕсли;
	 
		 
	 
	 Ответ = семКодаРК();
	 Если ПустоеЗначение( Ответ ) = 0 Тогда
	 	Сообщить( Ответ, "!" ); СтатусВозврата( 0 ); Возврат;
	 КонецЕсли;         

	 Ответ = ПроверкаВесовогоКода();
	 Если ПустоеЗначение( Ответ ) = 0 Тогда
	 	Сообщить( Ответ, "!" ); СтатусВозврата( 0 ); Возврат;
	 КонецЕсли;

	 Если ((ДляРозницы=1) И (КонтрольСрокаГодностиВРознице=0)) И ((ВидТовара=Перечисление.ВидыТоваров.Блюдо) ИЛИ (БазоваяЕдиницаИзмерения=Перечисление.ЕдиницыИзмерения.Килограмм)) Тогда
	 	Предупреждение("Для товара не задан контроль срока годности в рознице! (раздел Закупка)");
	 	СтатусВозврата(0);
	 	Возврат;
	 ИначеЕсли (ДляРозницы=1) И (КонтрольСрокаГодностиВРознице=1) И (СрокГоднПослеОткрытияЧасов=0) Тогда
	 	Предупреждение("Для товара не задан срок годности часов после открытия!");
	 	СтатусВозврата(0);
	 КонецЕсли;
	 
	 Если (ПустоеЗначение(ЯвляетсяУпаковкой)=1) И (ВидТовара<>Перечисление.ВидыТоваров.Услуга) Тогда
	 	Предупреждение("Укажите, является ли товар упаковкой! (закладка 'Дополнительно')");
	 	СтатусВозврата(0);
	 	Возврат;
	 КонецЕсли;

	 Если (АкцизныйТовар=1) И (ПустоеЗначение(ВидАкциза)=1) Тогда
	 	Предупреждение("Укажите вид акцизного товара!");
	 	СтатусВозврата(0);
	 	Возврат;
	 КонецЕсли;
	 
	Если ((ЛогистикаКолУпакНаЕвроПалете=0) и (ЛогистикаКолУпакНаПалетеВРяду<>0)) или ((ЛогистикаКолУпакНаЕвроПалете<>0) и (ЛогистикаКолУпакНаПалетеВРяду=0))  Тогда
	 	Предупреждение("Некорректно указано количество на поддоне! (поля 'рядов' и 'в ряду')");
	 	//СтатусВозврата(0);
	 	//Возврат;
	КонецЕсли; 
	 
	Объем = ЛогистикаДлинаУпаковки * ЛогистикаВысотаУпаковки * ЛогистикаШиринаУпаковки;
	             
	Если (Родитель.ПодлежитУценке = 1) И (ДляРозницы=1) Тогда
		
		Если ((Поставщик.ПринадлежитГруппе(Родитель.ПоставщикУценки1)=1) ИЛИ (Поставщик=Родитель.ПоставщикУценки1) ИЛИ (Поставщик=Родитель.ПоставщикУценки2) ИЛИ (Поставщик=Родитель.ПоставщикУценки3)) 
			 И ((ВидТовара=Родитель.ВидТовараУценки1) ИЛИ (ВидТовара=Родитель.ВидТовараУценки2)) 
			 И (СокрЛП(УсловияХранения)<>"-18C") 
			 И (ПризнакСпецКода<>Перечисление.СпецкодыТоваров.S) Тогда
			Если ПодлежитУценкеСнято=0 Тогда
				ПодлежитУценке=1;
			Иначе
				ПодлежитУценке=0;
			КонецЕсли; 
		Иначе
			ПодлежитУценке=0;
		КонецЕсли;               
	Иначе
		ПодлежитУценке=0;
	КонецЕсли;

	УстановитьНеобходимостьСрокаГодности();
	
	
	Если (Родитель.ФлАвтоНаклейкаПечатьPOS = 1) И (ДляРозницы=1) Тогда
		
		Если (БазоваяЕдиницаИзмерения=Перечисление.ЕдиницыИзмерения.Килограмм)
			ИЛИ	((ВидТовара=Перечисление.ВидыТоваров.Блюдо) И (БазоваяЕдиницаИзмерения<>Перечисление.ЕдиницыИзмерения.Килограмм) ) Тогда //штучные блюда 
			Если ФлАвтоНаклейкаПечатьPOSСнято=0 Тогда
				ФлАвтоНаклейкаПечатьPOS=1;
			Иначе
				ФлАвтоНаклейкаПечатьPOS=0;
			КонецЕсли; 
		Иначе
			ФлАвтоНаклейкаПечатьPOS=0;
		КонецЕсли;               
	Иначе
		ФлАвтоНаклейкаПечатьPOS=0;
	КонецЕсли;
	
	 //установка признака спецкода
	 //получим код товара
	//ДлинаКода = 7;
	//КолВоБукв=СтрДлина(СокрЛП(Код))-ДлинаКода;
	//
	//СпецКод=Прав(ВРЕГ(СокрЛП(Код)),КолВоБукв);
	//Если ПризнакСпецКодаНов<>ТекущийЭлемент().ПризнакСпецКода Тогда
	// 	ПризнакСпецКода=ПризнакСпецКодаНов;
	// 	ПризнакСпецКодаДатаУст=РабочаяДата();
	//КонецЕсли;
	 
 	//проверяем является ли последний символ кода числом
 	//Если Строка(Число(Прав(Код,1)))=Прав(Код,1) Тогда
 	//	КодТовара = Код;
 	//Иначе
 	//	//если буква тогда обрезаем букву
 	//	КодТовара = Лев(Код,ДлинаКода);
 	//КонецЕсли;
 	
 	Если СтрДлина(СокрЛП(КодТовара))<>7 Тогда
 		КодТовара=ТекущийЭлемент().КодТовара;
 		Предупреждение("Длина кода товара должна быть 7 символов. Будьте внимательнее!");
 		СтатусВозврата(0);
 		Возврат;
 	КонецЕсли;
	 
	 // сем \\
	 Если (глКодСтраныПользователя = семТекСтрана()) и (глКодСтраныПользователя = "LV") Тогда
	 	// не проверяем реквизиты при работе с филиала
	 	Если семЗаполненыВсеРеквизиты( Контекст, "ВидТовара" ) = 0 Тогда 
	 		СтатусВозврата( 0 ); Возврат;
	 	Иначе
	 		спОбязРеквизитов = "Код,Наименование,НаименованиеАнгл,БазоваяЕдиницаИзмерения";
	 		
	 		Если ВидТовара = Перечисление.ВидыТоваров.Блюдо Тогда
	 			спОбязРеквизитов = спОбязРеквизитов + ",СтранаПроизводитель,Закупщик,МестоХранения,СрокГодн,СрокГоднПоставщика,Вес";
	 		ИначеЕсли ВидТовара = Перечисление.ВидыТоваров.Ингредиент Тогда
	 			спОбязРеквизитов = спОбязРеквизитов + ",СтранаПроизводитель,Закупщик,МестоХранения";
	 		ИначеЕсли ВидТовара = Перечисление.ВидыТоваров.Товар Тогда
	 			Если (Родитель.ПринадлежитГруппе(Константа.ГруппаТоваровБезКонтроляПоСрокам1)=1) ИЛИ 
	 				 (Родитель.ПринадлежитГруппе(Константа.ГруппаТоваровБезКонтроляПоСрокам2)=1) ИЛИ
	 				 (Родитель.ПринадлежитГруппе(Константа.ГруппаТоваровБезКонтроляПоСрокам3)=1) ИЛИ
	 				 (Родитель.ПринадлежитГруппе(Константа.ГруппаТоваровБезКонтроляПоСрокам4)=1) ИЛИ
	 				 (Родитель.ПринадлежитГруппе(Константа.ГруппаТоваровБезКонтроляПоСрокам5)=1) ИЛИ
	 				 (Родитель.ПринадлежитГруппе(Константа.ГруппаТоваровБезКонтроляПоСрокам6)=1) ИЛИ
	 				 (Родитель.ПринадлежитГруппе(Константа.ГруппаТоваровБезКонтроляПоСрокам7)=1) Тогда
	 				 //не проверяем срок годности от поставщика
	 			Иначе
	 				спОбязРеквизитов = спОбязРеквизитов + ",СрокГодн,СрокГоднПоставщика";
	 			КонецЕсли;
	 			
	 			Если ЯвляетсяУпаковкой=Да Тогда
	 				спОбязРеквизитов = спОбязРеквизитов + ",СтранаПроизводитель,Закупщик,Поставщик,МестоХранения";
	 			Иначе
	 				спОбязРеквизитов = спОбязРеквизитов + ",СтранаПроизводитель,Закупщик,Поставщик,МестоХранения,Вес,ВидПредпродажнойПодготовки";
	 			КонецЕсли;
	 			
	 			Если ВидПредпродажнойПодготовки=Перечисление.ВидыПредпродажнойПодготовки.Вид3 Тогда
		 			Компенсация=1;
				 	спОбязРеквизитов = спОбязРеквизитов + ",КомпенсацияЗаЭтикетку,КомпенсацияВалюта";
		 		КонецЕсли;
	 			
	 		ИначеЕсли ВидТовара = Перечисление.ВидыТоваров.Услуга Тогда
	 		ИначеЕсли ВидТовара = Перечисление.ВидыТоваров.Компонент Тогда
	 		ИначеЕсли ВидТовара = Перечисление.ВидыТоваров.МБП Тогда
	 			спОбязРеквизитов = спОбязРеквизитов + ",СтранаПроизводитель,Закупщик,Поставщик,МестоХранения";
	 		ИначеЕсли ВидТовара = Перечисление.ВидыТоваров.ОС Тогда
	 			спОбязРеквизитов = спОбязРеквизитов + ",СтранаПроизводитель,Закупщик,Поставщик,МестоХранения";
	 		КонецЕсли;                                                           

	 		Если ДляРозницы=1 Тогда
	 			спОбязРеквизитов = спОбязРеквизитов + ",НаименованиеДляЦенника,НаименованиеДляЦенникаРусс";
	 		КонецЕсли;
	 		
	 		Если семЗаполненыВсеРеквизиты( Контекст, спОбязРеквизитов ) = 0 Тогда 
	 			СтатусВозврата( 0 ); Возврат;
	 		КонецЕсли;
	 	КонецЕсли;
	 КонецЕсли;
	 // сем //
	 
	 ФлИзменен=1;
	 НаименованиеLV = глЗаменитьНелегальныеСимволы(НаименованиеLV);
	 Наименование = НаименованиеLV;
	 НаименованиеДляЦенника = глЗаменитьНелегальныеСимволы(НаименованиеДляЦенника);
	 ПолноеНаименование = глЗаменитьНелегальныеСимволы(ПолноеНаименование);
	 Состав	= глЗаменитьНелегальныеСимволы(Состав);
	 СоставLT	= глЗаменитьНелегальныеСимволы(СоставLT);
	 СоставEE	= глЗаменитьНелегальныеСимволы(СоставEE);
	 
	 ПоАлфавиту=Translate_Descr(НаименованиеLV);
	 ПоАлфавитуEE=Translate_Descr(НаименованиеEE);
	 ПоАлфавитуLT=Translate_Descr(НаименованиеLT);
	 
        // проверка обязательных полей
	//Ответ = ОбязательныеПоляЗаполнены();
	//Если ПустоеЗначение( Ответ ) = 0  Тогда
	//	Предупреждение(Ответ); СтатусВозврата(0); Возврат;
	//КонецЕсли;
	
	Форма.Закладки.УдалитьВсе();
	Форма.ИспользоватьСлой("Основной, Кнопки ",2);    
	//***********************************************************
	//<<Алгоритм Успеха>> (begin)
	//Проверка на дублирование Кода товара в базе
	спр=СоздатьОбъект("Справочник.Номенклатура");
	Если спр.НайтиПоКоду(Код,0)=1 Тогда
		Если спр.ТекущийЭлемент()<>ТекущийЭлемент() Тогда
			Предупреждение("Код не уникальный!");
			СтатусВозврата(0);
			Возврат;      
		КонецЕсли;
	КонецЕсли;  
	
	спр=СоздатьОбъект("Справочник.Номенклатура");
	Если спр.НайтиПоРеквизиту("КодТовара",КодТовара,1)=1 Тогда
		Если спр.ТекущийЭлемент()<>ТекущийЭлемент() Тогда
			Предупреждение("Цифровой код <"+КодТовара+">не уникальный!");
			СтатусВозврата(0);
			Возврат;      
		КонецЕсли;
	КонецЕсли;  
	
	ПроверкаБруттоПоддона();	
	
//	//зафиксируем изменения сроков годности товара 
//	Если Выбран()=1 Тогда
//		СрокГоднПоставщикаСтар=ТекущийЭлемент().СрокГоднПоставщика;
//		Если СрокГоднПоставщикаСтар<>СрокГоднПоставщика Тогда
//			ЗаписьЖурналаРегистрации(Шаблон("Изменен срок годности поставщика [СрокГоднПоставщикаСтар] -> [СрокГоднПоставщика]"),"Справочник","Изменение реквизитов",ТекущийЭлемент(),2);
//		КонецЕсли;
//
//		СрокГоднСтар=ТекущийЭлемент().СрокГодн;
//		Если СрокГоднСтар<>СрокГодн Тогда
//			ЗаписьЖурналаРегистрации(Шаблон("Изменен срок годности для клиента [СрокГоднСтар] -> [СрокГодн]"),"Справочник","Изменение реквизитов",ТекущийЭлемент(),2);
//		КонецЕсли;
//	КонецЕсли;
	
	//Если не добавлена базовая единица Тогда   
	Если Выбран()=0 Тогда
		Если Вопрос("Добавить базовую единицу с список?","Да+Нет")="Нет" Тогда
			Предупреждение("Элемент не записан!!!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
		//Закомментировано Инсталлятором МОД:	Записать();
		//Начало текста, вставленного Инсталлятором МОД
		ОбъектЗаписать(Контекст, );
		//Конец текста, вставленного Инсталлятором МОД
		
		СпрЕд=СоздатьОбъект("Справочник.Единицы");
		СпрЕд.ИспользоватьВладельца(ТекущийЭлемент());
		глСоздатьНовыйОбъект(СпрЕд);
		СпрЕд.Наименование=Строка(БазоваяЕдиницаИзмерения);
		СпрЕд.Единица=БазоваяЕдиницаИзмерения;
		СпрЕД.ОкруглятьДоЦелых=Перечисление.Булево.Нет;
		СпрЕд.Коэффициент=1;
		//Закомментировано Инсталлятором МОД:СпрЕд.Записать();
		//Начало текста, вставленного Инсталлятором МОД
		ОбъектЗаписать(СпрЕд, );
		//Конец текста, вставленного Инсталлятором МОД
		Если ЕдНеттоВеса.Выбран()=0 Тогда
			ЕдНеттоВеса = СпрЕд.ТекущийЭлемент();
		КонецЕсли;
				
		Форма.БазоваяЕдиницаИзмерения.Доступность(Пользователь.РазрРедБазЕдиницу);
		//Форма.БазоваяЕдиницаИзмеренияРозница.Доступность(Пользователь.РазрРедБазЕдиницу);
	КонецЕсли; 
	
	Если ПустоеЗначение(ОбъектКопир)=0 Тогда
		//если карточка была скопирована тогда копируем файлы фото и сертификатов
		ПутьКаталогаСертификата=СокрЛП(Константа.ПутьККаталогуСертификатовТоваров);
	
		
		ФС.УстТекКаталог(ПутьКаталогаСертификата);
		ФайлСертификата=""+СокрЛП(ОбъектКопир.КодТовара)+".pdf";
		ФайлСертификатаНов=""+СокрЛП(КодТовара)+".pdf";

		ФайлСертификата_ = ФС.НайтиПервыйФайл(ФайлСертификата);
	 	Если ПустаяСтрока(ФайлСертификата_)=0 Тогда
	 		Если Вопрос("Скопировать файл сертификата?","Да+Нет")="Да" Тогда
		 		ФС.КопироватьФайл(ПутьКаталогаСертификата+ФайлСертификата_ ,ПутьКаталогаСертификата+ФайлСертификатаНов,0);
	 		КонецЕсли;
		КонецЕсли;
	 	
		Если ПустоеЗначение(Константа.ПутьККаталогуФотоТоваров)=1 Тогда
			КаталогФотографий=КаталогИБ()+"Photo\";
		Иначе
			КаталогФотографий=СокрЛП(Константа.ПутьККаталогуФотоТоваров);
		КонецЕсли;
		ФС.УстТекКаталог(КаталогФотографий);
		ФайлФото=""+СокрЛП(ОбъектКопир.КодТовара)+".*";
		ФайлФото_ = ФС.НайтиПервыйФайл(ФайлФото);
	 	Если ПустаяСтрока(ФайлФото_)=0 Тогда
	 		РасшФайла = Сред(ФайлФото_,Найти(ФайлФото_,".")+1);
	 		
			ФайлФотоНов=""+СокрЛП(КодТовара)+"."+РасшФайла ;
	 		
	 		Если Вопрос("Скопировать файл фотографии?","Да+Нет")="Да" Тогда
		 		ФС.КопироватьФайл(КаталогФотографий+ФайлФото_ ,КаталогФотографий+ФайлФотоНов,0);
	 		КонецЕсли;
		КонецЕсли;
		
		ОбъектКопир="";

	КонецЕсли;

	// единица нетто-веса товара
	Если (ПустоеЗначение(ЕдПервУпак)=0) и (КоэфНеттоВеса <> 0) Тогда
		СпрЕд=СоздатьОбъект("Справочник.Единицы");
		СпрЕд.ИспользоватьВладельца(ТекущийЭлемент());
		Нашли=0;
		СпрЕд.ПорядокКодов();
		СпрЕд.ВыбратьЭлементы();
		Пока СпрЕд.ПолучитьЭлемент() = 1 Цикл
			Если СпрЕд.Единица= ЕдПервУпак Тогда
				Если СпрЕд.ПометкаУдаления()=1 Тогда
					Если ТекущийЭлемент().ПометкаУдаления()=0 Тогда
						СпрЕд.СнятьПометкуУдаления();
					КонецЕсли;
				КонецЕсли;
				Нашли=1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Нашли=0 Тогда
			СпрЕд.Новый();
		КонецЕсли;
		СпрЕд.Единица = ЕдПервУпак;
		СпрЕд.Наименование = Строка(ЕдПервУпак);
		СпрЕд.Коэффициент = 1 / КоэфНеттоВеса;
		ОбъектЗаписать(СпрЕд,);
		ЕдНеттоВеса=СпрЕд.ТекущийЭлемент();
	КонецЕсли;
	
	Если (ЕдНеттоВеса.Выбран()=0) или (КоэфНеттоВеса=0) Тогда
		СпрЕд=СоздатьОбъект("Справочник.Единицы");
		СпрЕд.ИспользоватьВладельца(ТекущийЭлемент());
		СпрЕд.ВыбратьЭлементы();
		Пока СпрЕд.ПолучитьЭлемент() = 1 Цикл
			Если СпрЕд.Единица= БазоваяЕдиницаИзмерения Тогда
				ЕдНеттоВеса = СпрЕд.ТекущийЭлемент();
				КоэфНеттоВеса=1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ЕдНеттоВеса.Единица = БазоваяЕдиницаИзмерения Тогда
			// базовую не перезаписываем
			КоэфНеттоВеса = 1;
		Иначе
			СпрЕд=СоздатьОбъект("Справочник.Единицы");
			СпрЕд.ИспользоватьВладельца(ТекущийЭлемент());
			СпрЕд.НайтиЭлемент(ЕдНеттоВеса);
			СпрЕд.Коэффициент = 1 / КоэфНеттоВеса;
			ОбъектЗаписать(СпрЕд, );
		КонецЕсли;		
		
		ЕдБазовая = глБазоваяЕдиницаИзмерения(ТекущийЭлемент());
		СпрЕд=СоздатьОбъект("Справочник.Единицы");
		СпрЕд.ИспользоватьВладельца(ТекущийЭлемент());
		СпрЕд.НайтиЭлемент(ЕдБазовая);
		Если СпрЕд.Коэффициент <>1  Тогда
			СпрЕд.Коэффициент = 1;
			ОбъектЗаписать(СпрЕд, );
		КонецЕсли;
		
	КонецЕсли;

	ЕдВеса= Перечисление.ЕдиницыИзмерения.Килограмм;
	Если ВесПервичной>0 Тогда
		//Добавляем единицу веса, если она отличается от базовой единицы товара
		Если БазоваяЕдиницаИзмерения<>ЕдВеса Тогда
			СпрЕд=СоздатьОбъект("Справочник.Единицы");
			СпрЕд.ИспользоватьВладельца(ТекущийЭлемент());
			Нашли=0;
			СпрЕд.ПорядокКодов();
			СпрЕд.ВыбратьЭлементы();
			Пока СпрЕд.ПолучитьЭлемент() = 1 Цикл
				Если СпрЕд.Единица= ЕдВеса Тогда
					Если СпрЕд.ПометкаУдаления()=1 Тогда
						СпрЕд.СнятьПометкуУдаления();
					КонецЕсли;
					Нашли=1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Нашли=0 Тогда
				СпрЕд.Новый();
			КонецЕсли;
			СпрЕд.Единица = ЕдВеса;
			СпрЕд.Наименование = Строка(ЕдВеса);
			СпрЕд.Коэффициент = 1 / (ВесПервичной* КоэфНеттоВеса);
			ОбъектЗаписать(СпрЕд,);
		КонецЕсли;
		
	КонецЕсли;
	
	Вес = ВесПервичной * КоэфНеттоВеса;
	НужнаПроверкаМинЗапаса = 0;
	Если (ПризнакСпецКода = Перечисление.СпецкодыТоваров.N) И (ПризнакСпецКода <> ТекущийЭлемент().ПризнакСпецКода) Тогда
		НужнаПроверкаМинЗапасаОпта = 1;
	КонецЕсли;
	
	//проверяем если первичная единица килограмм тогда вес нетто не может отличаться от 1
	Если (ЕдПервУпак = ЕдВеса) И (ВесПервичной<>1) Тогда
		Предупреждение("Вес первичной упаковки для единицы КГ должен быть 1 кг!");
		СтатусВозврата(0);
		Возврат;      
	КонецЕсли;
	
	УправлениеЗакладками();	
	Мин_запас=0;
	Спр=СоздатьОбъект("Справочник.Запасы");
	Спр.ИспользоватьВладельца(ТекущийЭлемент());
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()=1  Цикл
		Если Спр.ПометкаУдаления()=1 Тогда
			Продолжить;
		КонецЕсли;
		Мин_запас=Мин_запас+Спр.МинЗапас; 
		Если (НужнаПроверкаМинЗапасаОпта=1) И (спр.УпрАналитика = Константа.ОсновнойСклад.УпрАналитика) И (Спр.МинЗапас>0) Тогда
			НужнаПроверкаМинЗапасаОпта = 0; //есть запас - прошел проверку
		КонецЕсли;
	КонецЦикла;
	
	Если НужнаПроверкаМинЗапасаОпта=1 Тогда
		Предупреждение("Не введен мин. запас!");
		СтатусВозврата(0);
		Возврат;      
	КонецЕсли;
	
	СпрУ=СоздатьОбъект("Справочник.УпаковкаТоваров");
	СпрУ.ИспользоватьВладельца(ТекущийЭлемент());
	// ANNASID
	// принудительная перезапись вторичной упаковки
	Если (ЛогистикаКолВУпаковке <> 0) Тогда
		СпрУ_Вт=СоздатьОбъект("Справочник.УпаковкаТоваров");
		СпрУ_Вт.ИспользоватьВладельца(ТекущийЭлемент());
		СпрУ_Вт.ВыбратьЭлементы();
		Пока СпрУ_Вт.ПолучитьЭлемент() = 1 Цикл
			Если (СпрУ_Вт.ТипУпаковки = Перечисление.ТипыУпаковки.Вторичная) и (СпрУ_Вт.ПометкаУдаления() = 0) Тогда
				Если СпрУ_Вт.КолВУпаковке <> ЛогистикаКолВУпаковке Тогда
					ЗарегистрироватьУпаковку(СпрУ,СпрУ_Вт.ВидУпаковки,СпрУ_Вт.ВесБруттоУпаковки,Перечисление.ТипыУпаковки.Вторичная,СпрУ_Вт.Материал);
				КонецЕсли;
			КонецЕсли;
		
		КонецЦикла;
	КонецЕсли;
	// ANNASID
	// европоддон - если есть данные для расчета
	Если (ПустоеЗначение(Константа.Европоддон)=0) Тогда
		Если (ЛогистикаКолВУпаковке <> 0) 
		и (ЛогистикаКолУпакНаЕвроПалете <> 0) 
		и (ЛогистикаКолУпакНаПалетеВРяду <> 0) Тогда
			НаОдномПоддоне=ЛогистикаКолВУпаковке*ЛогистикаКолУпакНаЕвроПалете*ЛогистикаКолУпакНаПалетеВРяду;
			ЗарегистрироватьУпаковку(СпрУ,Константа.Европоддон,Константа.Европоддон.Вес,Перечисление.ТипыУпаковки.Третичная,Константа.Европоддон.Материал);
			// если к европоддону есть дополнение (например пленка)
			Если Константа.Европоддон.ДопВидУпаковки.Выбран()=1 Тогда
				ЗарегистрироватьУпаковку(СпрУ,Константа.Европоддон.ДопВидУпаковки,Константа.Европоддон.ДопВидУпаковки.Вес,Перечисление.ТипыУпаковки.Третичная,Константа.Европоддон.ДопВидУпаковки.Материал);
			КонецЕсли; 
			
		Иначе
			УдалитьУпаковку(СпрУ,Перечисление.ТипыУпаковки.Третичная,Константа.Европоддон.Материал);
			Если Константа.Европоддон.ДопВидУпаковки.Выбран()=1 Тогда
				УдалитьУпаковку(СпрУ,Перечисление.ТипыУпаковки.Третичная,Константа.Европоддон.ДопВидУпаковки.Материал);
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	СохранениеПериодическихРеквизитов(3,СохранениеПериодическихРеквизитов(5));
	
	//если изменилась базовая единица тогда меняем в ценах ее
//	Если (старБазЕд<>БазоваяЕдиницаИзмерения) Тогда
		
//		Если Вопрос("Была изменена базовая единица - изменить в ценах единицу на базовую?","Да+Нет")="Нет" Тогда
			
//		Иначе
			
			СпрЕд = СоздатьОбъект("Справочник.Единицы");
			СпрЕд.ИспользоватьВладельца(ТекущийЭлемент());
			СпрЕд.НайтиПоРеквизиту("Единица",БазоваяЕдиницаИзмерения,0);
			
			СпрЦены = СоздатьОбъект("Справочник.Цены");
			СпрЦены.ИспользоватьВладельца(ТекущийЭлемент());
			СпрЦены.ВыбратьЭлементы();
			Пока СпрЦены.ПолучитьЭлемент() = 1 Цикл
				
				Если СпрЦены.КатегорияЦены.Розница=0 Тогда
					Если СпрЦены.Единица.Единица<>БазоваяЕдиницаИзмерения Тогда
						СпрЦены.Единица = СпрЕд.ТекущийЭлемент();
						ОбъектЗаписать(СпрЦены,);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
	//	КонецЕсли;

//	КонецЕсли;	
		
	УправлениеЗакладками();
	//КонецЕсли;
	//<<Алгоритм Успеха>> (end) 
	//************************************************************
	ВидимостьРК();
	Записан=1;
	семИзмененияРеквизитов( "Сравнить" );
	семИзмененияРеквизитов( "Запомнить" );
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписи()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	ПриИзмененииОбъекта(Контекст, ТекущийЭлемент(), РабочаяДата());
	стар_ПриЗаписи();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
                       
//****************************************************
Процедура ПриУстановкеРозницы()
    
	ДляРозницы=?(ДляРозницы=1,0,1);
	
	Если (ДляРозницы=1) И (ТекущийЭлемент().ДляРозницы<>ДляРозницы) Тогда
		Если Вопрос("Вы действительно хотите установить код для Розницы?","Да+Нет")="Да" Тогда

			НачатьТранзакцию();
			
			СпрТ=СоздатьОбъект("Справочник.Номенклатура");

			Родитель_=Родитель;
			
			Пока Родитель_.Уровень()>1 Цикл
				Родитель_=Родитель_.Родитель;
			КонецЦикла;
            
			ГруппыПрефиксов=СоздатьОбъект("СписокЗначений");
			СписокПоследнихКодов=СоздатьОбъект("ТаблицаЗначений");
			СписокПоследнихКодов.НоваяКолонка("КодДляРозницы");

			спр=СоздатьОбъект("Справочник.Номенклатура");
			спр.ВыбратьЭлементыПоРеквизиту("ПрефиксДляРозницы",Родитель_.ПрефиксДляРозницы,0,1);
			
			Пока спр.ПолучитьЭлемент()=1 Цикл
				ГруппыПрефиксов.ДобавитьЗначение(спр.ТекущийЭлемент());
			КонецЦикла;
			
			Запрос = СоздатьОбъект("Запрос");
			ТекстЗапроса = 
			"//{{ЗАПРОС(ТоварыДляРозницы)
			|Товар = Справочник.Номенклатура.ТекущийЭлемент;
			|КодДляРозницы = Справочник.Номенклатура.КодДляРозницы;
			|ДляРозницы = Справочник.Номенклатура.ДляРозницы;
			|Функция КодДляРозницыМаксимум = Максимум(КодДляРозницы);
			|Группировка КодДляРозницы;
			|Условие(ДляРозницы = 1);
			|Условие(Товар в ГруппыПрефиксов);
			|"//}}ЗАПРОС
			;
			// Если ошибка в запросе, то выход из процедуры
			Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
				Возврат;
			КонецЕсли;

			ПоследнийКод=Запрос.КодДляРозницыМаксимум;
			ПоследнийКод=?(ПоследнийКод=0,Число(СокрЛП(Родитель_.ПрефиксДляРозницы)+Прав("000",4-СтрДлина(СокрЛП(Родитель_.ПрефиксДляРозницы)))),ПоследнийКод);

			КодДляРозницы=ПоследнийКод+1;

			начало=Число(СокрЛП(Родитель_.ПрефиксДляРозницы)+Прав("000",4-СтрДлина(СокрЛП(Родитель_.ПрефиксДляРозницы))));
			            
			ПоследнийКод=начало;
			КодДляРозницы=0;
			
			Для инд_=начало по начало+999 Цикл
				        
				ПоследнийКод=ПоследнийКод+1;
				Если Запрос.Получить(ПоследнийКод)=0 Тогда
					//ищем еще глобально, т.к. могут быть товары, перенесенные в другие группы
					Если СпрТ.НайтиПоРеквизиту("КодДляРозницы",ПоследнийКод,1)=0 Тогда
						КодДляРозницы=ПоследнийКод;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;

			Если КодДляРозницы=0 Тогда
//				Предупреждение("Не найдено свободного 4-х значного номера для розничного Кода!",5);
				начало=Число(СокрЛП(Родитель_.ПрефиксДляРозницы)+Прав("0000",5-СтрДлина(СокрЛП(Родитель_.ПрефиксДляРозницы))));
				ПоследнийКод=начало;
				КодДляРозницы=0;    
				
				Запрос.вНачалоВыборки();
				Для инд_=начало по начало+9999 Цикл
					ПоследнийКод=ПоследнийКод+1;
					Если Запрос.Получить(ПоследнийКод)=0 Тогда
						//ищем еще глобально, т.к. могут быть товары, перенесенные в другие группы
						Если СпрТ.НайтиПоРеквизиту("КодДляРозницы",ПоследнийКод,1)=0 Тогда
							КодДляРозницы=ПоследнийКод;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если КодДляРозницы=0 Тогда
					ДляРозницы=0;
					Предупреждение("Не найдено свободного 5-х значного номера для розничного Кода!",5);
            	КонецЕсли;
			КонецЕсли;
			
			ОбъектЗаписать(Контекст,);
			ЗафиксироватьТранзакцию();
			
		Иначе
		   ДляРозницы=0;
		КонецЕсли;       
	ИначеЕсли (ДляРозницы=1) И (ТекущийЭлемент().ДляРозницы=ДляРозницы) Тогда
		КодДляРозницы=ТекущийЭлемент().КодДляРозницы;
	ИначеЕсли (ДляРозницы=0) Тогда
		КодДляРозницы=0;
	КонецЕсли;
	          
//	КодРК=КодДляРозницы;
	ОбъектЗаписать(Контекст,);
		
КонецПроцедуры                                        
//****************************************************
Процедура ПриВыбореЕдПервУпак()
	Если ТаблицаЕдиниц.КоличествоСтрок()=0 Тогда
		ЗаполнениеТаблицыЕдиниц();
	КонецЕсли;
	НомСтр=0;
	
	Если ТаблицаЕдиниц.НайтиЗначение(ЕдПервУпак,НомСтр,"Единица") <> 0 Тогда
		ЕдНеттоВеса=ТаблицаЕдиниц.ПолучитьЗначение(НомСтр,"ТекущийЭлемент");
		КоэфНеттоВеса = Окр(1 / ЕдНеттоВеса.Коэффициент,4,1);
	КонецЕсли;
	
	Если ЕдПервУпак = БазоваяЕдиницаИзмерения Тогда
		Форма.КоэфНеттоВеса.Видимость(0);
		//Форма.подпКоэфЕдВеса.Видимость(0);
		Форма.КоэфНеттоВеса.Доступность(0);
		Форма.подп2.Видимость(0);
		КоэфНеттоВеса=1;
	Иначе
		Форма.КоэфНеттоВеса.Доступность(1);

		Форма.КоэфНеттоВеса.Видимость(1);
		//Форма.подпКоэфЕдВеса.Видимость(1);
		Форма.подп2.Видимость(1);
	КонецЕсли;
	
	Если (ЕдПервУпак = Перечисление.ЕдиницыИзмерения.Килограмм) И (ВесПервичной<>1) Тогда	
		ВесПервичной = 1;
	КонецЕсли;
	
КонецПроцедуры
//****************************************
Процедура ПриНачалеВыбораЗначения(ИД, ФлСтОбр)
	Если ИД="ЕдПервУпак" Тогда
		ФлСтОбр=0;
		Сп=СоздатьОбъект("СписокЗначений");
		Если ПустоеЗначение(БазоваяЕдиницаИзмерения)=0 Тогда
			Сп.ДобавитьЗначение(БазоваяЕдиницаИзмерения);
		Иначе
			Сп.ДобавитьЗначение(Перечисление.ЕдиницыИзмерения.Килограмм);
		КонецЕсли;
		Если Сп.Принадлежит(Перечисление.ЕдиницыИзмерения.Штука)=0 Тогда
			Сп.ДобавитьЗначение(Перечисление.ЕдиницыИзмерения.Штука);
		КонецЕсли;
		Если Выбран()=1 Тогда
			Ед=СоздатьОбъект("Справочник.Единицы");
			Ед.ИспользоватьВладельца(ТекущийЭлемент());
			Ед.ВыбратьЭлементы();
			Пока Ед.ПолучитьЭлемент()=1 Цикл
				Если Ед.ПометкаУдаления()=1 Тогда
					Продолжить;
				КонецЕсли;
				Если Сп.Принадлежит(Ед.Единица)=0 Тогда
					Сп.ДобавитьЗначение(Ед.Единица);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Зн=0;
		Если Сп.ВыбратьЗначение(,,Зн,,1) <> 0 Тогда
			ЕдПервУпак = Сп.ПолучитьЗначение(Зн);
			ПриВыбореЕдПервУпак();
			ПроверкаБруттоПоддона();
		КонецЕсли;
	ИначеЕсли ИД="БазоваяЕдиницаИзмерения" Тогда
		ФлСтОбр=0;

		Сп=СоздатьОбъект("СписокЗначений");
		Если ПустоеЗначение(БазоваяЕдиницаИзмерения)=0 Тогда
			Сп.ДобавитьЗначение(БазоваяЕдиницаИзмерения);
		КонецЕсли;

		Если Сп.Принадлежит(Перечисление.ЕдиницыИзмерения.Штука)=0 Тогда
			Сп.ДобавитьЗначение(Перечисление.ЕдиницыИзмерения.Штука);
		КонецЕсли;
		
		Если Сп.Принадлежит(Перечисление.ЕдиницыИзмерения.Упаковка)=0 Тогда
			Сп.ДобавитьЗначение(Перечисление.ЕдиницыИзмерения.Упаковка);
		КонецЕсли;

		Если Сп.Принадлежит(Перечисление.ЕдиницыИзмерения.Ящик)=0 Тогда
			Сп.ДобавитьЗначение(Перечисление.ЕдиницыИзмерения.Ящик);
		КонецЕсли;

		Если Сп.Принадлежит(Перечисление.ЕдиницыИзмерения.Килограмм)=0 Тогда
			Сп.ДобавитьЗначение(Перечисление.ЕдиницыИзмерения.Килограмм);
		КонецЕсли;

		Если Сп.Принадлежит(Перечисление.ЕдиницыИзмерения.Литр)=0 Тогда
			Сп.ДобавитьЗначение(Перечисление.ЕдиницыИзмерения.Литр);
		КонецЕсли;

		//PR Убрано 11.05.17 по просьюе Елены Федорченко
		//Если Сп.Принадлежит(Перечисление.ЕдиницыИзмерения.Бутылка)=0 Тогда
		//	Сп.ДобавитьЗначение(Перечисление.ЕдиницыИзмерения.Бутылка);
		//КонецЕсли;
		
		Если ВидТовара = Перечисление.ВидыТоваров.Блюдо Тогда
			Сп.ДобавитьЗначение(Перечисление.ЕдиницыИзмерения.Порция);
		КонецЕсли;

		Зн=0;
		Если Сп.ВыбратьЗначение(,,Зн,,1) <> 0 Тогда
			БазоваяЕдиницаИзмерения = Сп.ПолучитьЗначение(Зн);
			БазоваяЕдиницаИзмеренияРозница = БазоваяЕдиницаИзмерения;
		КонецЕсли;
		
	ИначеЕсли ИД="БазоваяЕдиницаИзмеренияРозница" Тогда
		ФлСтОбр=0;

		Сп=СоздатьОбъект("СписокЗначений");
		Если ПустоеЗначение(БазоваяЕдиницаИзмеренияРозница)=0 Тогда
			Сп.ДобавитьЗначение(БазоваяЕдиницаИзмеренияРозница);
		КонецЕсли;

		СпрЕд = СоздатьОбъект("Справочник.Единицы");
		СпрЕд.ИспользоватьВладельца(ТекущийЭлемент());
		
		СпрЕд.ВыбратьЭлементы();
		Пока СпрЕд.ПолучитьЭлемент() = 1 Цикл
			Если СпрЕд.ПометкаУдаления()=1 Тогда
				Продолжить;
			КонецЕсли;
			Если Сп.Принадлежит(СпрЕд.Единица)=0 Тогда
				Сп.ДобавитьЗначение(СпрЕд.Единица);
			КонецЕсли;
			
		КонецЦикла;
		
		Зн=0;
		Если Сп.ВыбратьЗначение(,,Зн,,1) <> 0 Тогда
			БазоваяЕдиницаИзмеренияРозница = Сп.ПолучитьЗначение(Зн);
		КонецЕсли;		
	ИначеЕсли Найти(ИД,"СертификатФайл")>0 Тогда
		ФлСтОбр=0;
		ПутьКаталогаСертификата=СокрЛП(Константа.ПутьККаталогуСертификатовТоваров);
		ПапкаСертификата=ПутьКаталогаСертификата;
		ФайлСертификата=СокрЛП(ПолучитьАтрибут(ИД));
		Если ФС.ВыбратьФайл(0,ФайлСертификата,ПапкаСертификата,"Выберите Сертификат","PDF файлы (*.PDF)|*.PDF")=1 Тогда
			УстановитьАтрибут(ИД,СокрЛП(ФайлСертификата));
//			СертификатФайл=ФайлСертификата;
			Если СокрЛП(ПапкаСертификата)<>ПутьКаталогаСертификата Тогда
				ФС.КопироватьФайл(СокрЛП(ПапкаСертификата)+ФайлСертификата,ПутьКаталогаСертификата+"\"+СокрЛП(ФайлСертификата),1);
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьСертификат(Язык="")
	Если Вопрос("Вы действительно хотите удалить привязку к сертификату?","Да+Нет")="Да" Тогда
		УстановитьАтрибут("СертификатФайл"+Язык,"");
	КонецЕсли;
КонецПроцедуры                 

Процедура ОткрытьСертификатБИО(Язык="",Реж="")

	ПутьКаталогаСертификата=СокрЛП(Константа.ПутьККаталогуСертификатовТоваров)+"\BIO\";
	ФС.УстТекКаталог(ПутьКаталогаСертификата);

	Если Реж="Путь" Тогда
		ЗапуститьПриложение(ПутьКаталогаСертификата);	
		Возврат;
	КонецЕсли;	
	ФайлСертификата=""+СокрЛП(Поставщик.Код)+".pdf";

	ФайлСертификата_ = ФС.НайтиПервыйФайл(ФайлСертификата);
 	Если ПустаяСтрока(ФайлСертификата_)=0 Тогда
 		ЗапуститьПриложение(ПутьКаталогаСертификата+"\"+ФайлСертификата_);
 		Возврат;
	КонецЕсли;
КонецПроцедуры


Процедура ОткрытьСертификат(Язык="",Реж="")
                         
	ОткрытьСертификатБИО();
	
	ПутьКаталогаСертификата=СокрЛП(Константа.ПутьККаталогуСертификатовТоваров);
	ФС.УстТекКаталог(ПутьКаталогаСертификата);

	Если Реж="Путь" Тогда
		ЗапуститьПриложение(ПутьКаталогаСертификата);	
		Возврат;
	КонецЕсли;	
	ФайлСертификата=""+СокрЛП(КодТовара)+".pdf";

	ФайлСертификата_ = ФС.НайтиПервыйФайл(ФайлСертификата);
 	Если ПустаяСтрока(ФайлСертификата_)=0 Тогда
 		ЗапуститьПриложение(ПутьКаталогаСертификата+"\"+ФайлСертификата_);
 		Возврат;
 	Иначе
 		Сообщить("Файл сертификата "+ФайлСертификата+" не найден!");
	КонецЕсли;

КонецПроцедуры

Процедура ОткрытьФайлы()
	
	Меню = СоздатьОбъект("СписокЗначений");			
	//Меню.ДобавитьЗначение(1,"Открыть сертификат");
	
	Меню.ДобавитьЗначение(2,"Открыть каталог сертификатов");
	Меню.ДобавитьЗначение(3,"Открыть каталог с фото");
	
	выб=1;
	Если Меню.ВыбратьЗначение(выб,,,,1)=1 Тогда
		Если выб=1 Тогда
//			ОткрытьСертификат();
		ИначеЕсли выб = 2 Тогда
			ОткрытьСертификат(,"Путь");
		ИначеЕсли выб = 3 Тогда
			ОткрытьФото("Путь");	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


//****************************************************
//Процедура ПриНачалеВыбораЗначения(ИД, флСтОбр)
//	Если ИД="ЕдНеттоВеса" Тогда
//		флСтОбр=0;
//		Если Выбран()=0 Тогда
//			Предупреждение("Выбор единицы веса возможен только для сохраненных элементов!");
//			Возврат;
//		Иначе
//			СпрЕд=СоздатьОбъект("Справочник.Единицы");
//			СпрЕд.ИспользоватьВладельца(ТекущийЭлемент());
//			Если СпрЕд.Выбрать("Выберите единицу, для которой указан вес нетто",)=1 Тогда
//				ЕдНеттоВеса=СпрЕд.ТекущийЭлемент();
//			КонецЕсли;
//		КонецЕсли;
//		ПриВыбореЕдВеса();
//	КонецЕсли;
//КонецПроцедуры
//----------------------
Процедура ПриУстановкеВида()
	Форма.Закладки.УдалитьВсе();
	УправлениеЗакладками();
	Записан=0;
КонецПроцедуры
//------------------------------------------------------------------
Процедура ПриИзмененииВида()
КонецПроцедуры 
//-------------------------------------------------------
Функция СкорироватьЗамену(Докс) 
	ДокЗамены=СоздатьОбъект("Документ.ЗаменаИнгредиента");
	глСоздатьНовыйОбъект(ДокЗамены);
	
	ДокЗамены.ДатаДок = РабочаяДата();
	ДокЗамены.АвтоВремяТекущее();
	Докс.ВыбратьСтроки();
	Пока Докс.ПолучитьСтроку()=1 Цикл
		ДокЗамены.НоваяСтрока();
		ДокЗамены.ТовКод=Докс.ТовКод;
		ДокЗамены.Замена=Докс.Замена;
		ДокЗамены.Приор=Докс.Приор;
		ДокЗамены.КоэффициентЗамены=Докс.КоэффициентЗамены;
		ДокЗамены.Коэффициент = Докс.Коэффициент;
		ДокЗамены.Единица = Докс.Единица;
	КонецЦикла;                                           
	ОбъектЗаписать(ДокЗамены, );
	Если (ДокЗамены.Провести(1)=1)  Тогда 
		СписокПодч.ДобавитьЗначение(ДокЗамены,Строка(ДокЗамены));
		Возврат ДокЗамены;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции
//-------------------------------------------------------     
Процедура КопироватьКалькуляцию(Док)
	ПереноситьЗамены=0; 
    Если Вопрос("Переносить документы 'Замены ингредиентов'","Да+Нет")="Да" Тогда
		ПереноситьЗамены=1; 
	КонецЕсли;
	КалькКарт=СоздатьОбъект("Документ.КалькуляционнаяКарта");
	глСоздатьНовыйОбъект(КалькКарт);
	ЗаполнитьШапку(КалькКарт);
	КалькКарт.АвтоВремяТекущее();
	КалькКарт.КатегорияЦены=Константа.РозничнаяКатегорияЦены;
	КалькКарт.УстановкаЦеныРеализации=Константа.УстановкаЦеныРеализации;
	КалькКарт.ТоварШапки=Док.ТоварШапки;
	КалькКарт.КоличествоКалькуляции=КоличествоКалькуляции;
	ПромКолКальк=Док.КоличествоКалькуляции; 
	КалькКарт.НомерРецептур=Док.НомерРецептур;  
	КалькКарт.УровеньВложенности=Док.УровеньВложенности;
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку()=1 Цикл
		КалькКарт.НоваяСтрока();
		КалькКарт.Ингредиент=Док.Ингредиент;
		КалькКарт.КоличествоНетто=Док.КоличествоНетто*КалькКарт.КоличествоКалькуляции/ПромКолКальк; 
		КалькКарт.Единица=Док.Единица;
		КалькКарт.Коэффициент=Док.Единица.Коэффициент;
		КалькКарт.КоэфСписания=Док.КоэфСписания;
		КалькКарт.СезонКоэф=УстановитьСезонныйКоэффициент(КалькКарт.Ингредиент,КалькКарт.ДатаДок);
		КалькКарт.Количество=Док.Количество;
		//Если КалькКарт.КоэфСписания=100 Тогда
		//	КалькКарт.Количество=0;
		//Иначе	
		//	КоличествоПром=(КалькКарт.КоличествоНетто*100)/(100-КалькКарт.КоэфСписания);
		//КонецЕсли;                                    
		//Если  КалькКарт.СезонКоэф=100 Тогда
		//	КалькКарт.Количество=0;
		//Иначе	
		//	КалькКарт.Количество=(КоличествоПром*100)/(100-КалькКарт.СезонКоэф);
		//КонецЕсли;
		
		КалькКарт.Наценка=КалькКарт.Ингредиент.НаценкаНаИнгредиент; 
		Если ((ПереноситьЗамены=1) и (ПустоеЗначение(Док.Замена)=0)) Тогда
			ДоксЗамена=СкорироватьЗамену(Док.Замена);
			Если ДоксЗамена=0 Тогда
				Сообщить("Документ "+Док.Замена+" не скопирован. Замена не перенесена");
			КонецЕсли; 
			Если ПустоеЗначение(ДоксЗамена)<>0 Тогда
				КалькКарт.Замена=ДоксЗамена.ТекущийДокумент();	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	    
	//Закомментировано Инсталлятором МОД:КалькКарт.Записать();
	//Начало текста, вставленного Инсталлятором МОД
	ОбъектЗаписать(КалькКарт, );
	//Конец текста, вставленного Инсталлятором МОД

	Если СписокПодч.РазмерСписка()>0 Тогда
	ДоксЗам=СоздатьОбъект("Документ.ЗаменаИнгредиента");
	Для i=1 По СписокПодч.РазмерСписка() Цикл
	Если ДоксЗам.НайтиДокумент(СписокПодч.ПолучитьЗначение(i))>0 Тогда
		ДоксЗам.ДокОснование=КалькКарт.ТекущийДокумент();
		//Закомментировано Инсталлятором МОД:ДоксЗам.Записать();
	//Начало текста, вставленного Инсталлятором МОД
	ОбъектЗаписать(ДоксЗам, );
	//Конец текста, вставленного Инсталлятором МОД

	КонецЕсли;
	КонецЦикла;
	КонецЕсли;
	ОткрытьФорму(КалькКарт.ТекущийДокумент(),1);
КонецПроцедуры	
//------------------------------------------------------------------
Процедура ВвестиНовуюКалькуляцию()
	КалькКарт=СоздатьОбъект("Документ.КалькуляционнаяКарта");
	Если КоличествоКалькуляции=0 Тогда
		КоличествоКалькуляции=1;
	КонецЕсли;
	СписокПараметров=СоздатьОбъект("СписокЗначений");
	СписокПараметров.Установить("КоличествоКалькуляции",КоличествоКалькуляции);
	СписокПараметров.Установить("ТоварШапки",ТекущийЭлемент());
	СписокПараметров.Установить("Автор",Пользователь);
	ОткрытьФорму("Документ.КалькуляционнаяКарта",СписокПараметров);  
КонецПроцедуры                                                      
//------------------------------------------------------------------
Процедура КнопкаНовКалькуляция()
	КалькКарт=СоздатьОбъект("Документ");
	КалькКарт.ОбратныйПорядок(1);
	КалькКарт.ВыбратьПоЗначению(,РабочаяДата(),"ТоварШапки",ТекущийЭлемент());
	Пока КалькКарт.ПолучитьДокумент()=1 Цикл
		Если КалькКарт.Вид()="КалькуляционнаяКарта" Тогда
			Если КалькКарт.Проведен()=0 Тогда
				Продолжить;
			КонецЕсли;	
			ЕстьКалькуляция=1;
			ДокумКальк=КалькКарт;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьКалькуляция=1 Тогда
		Если Вопрос("Вы хотите создать новую Кальк. карту?","Да+Нет")="Да" Тогда
			КопироватьКалькуляцию(ДокумКальк.ТекущийДокумент());  
		Иначе
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	Иначе
		ВвестиНовуюКалькуляцию();
	КонецЕсли;	
КонецПроцедуры	                                                    
//------------------------------------------------------------------
Процедура ОткрытьКалькуляцию() 
	Если Модифицированность()=1 Тогда 
	//Закомментировано Инсталлятором МОД:	Записать();
	//Начало текста, вставленного Инсталлятором МОД
		ОбъектЗаписать(Контекст, );
	//Конец текста, вставленного Инсталлятором МОД

	КонецЕсли;	
	Форма.Закрыть(0);
	КалькКарт=СоздатьОбъект("Документ");
	КалькКарт.ОбратныйПорядок(1);
	КалькКарт.ВыбратьПоЗначению(,РабочаяДата(),"ТоварШапки",ТекущийЭлемент());
	Пока КалькКарт.ПолучитьДокумент()=1 Цикл
		Если КалькКарт.Вид()="КалькуляционнаяКарта" Тогда  
			Если (КалькКарт.ПометкаУдаления()=1) или (КалькКарт.Проведен()=0) Тогда  	
				Продолжить;
			КонецЕсли;
			ЕстьКалькуляция=1;
			ДокумКальк=КалькКарт;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если  КалькКарт.Проведен()=0 Тогда
		Предупреждение("Калькуляционная карта не проведена !!!");
	КонецЕсли;
	Если ЕстьКалькуляция=1 Тогда
		ОткрытьФорму(ДокумКальк.ТекущийДокумент(),1);
	Иначе
		ВвестиНовуюКалькуляцию();
	КонецЕсли;
КонецПроцедуры                                                      
//------------------------------------------------------------------
Процедура УстЕдКальк()
	Если ВидТовара=Перечисление.ВидыТоваров.Блюдо Тогда 
		БазоваяЕдиницаИзмерения=Перечисление.ЕдиницыИзмерения.Порция;
		Если КоличествоКалькуляции<=0 Тогда
			КоличествоКалькуляции=1;
		КонецЕсли;
		Если ЕдиницаКалькуляции.Выбран()=0 Тогда
			ЕдиницаКалькуляции=БазоваяЕдиницаИзмерения;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ФорматВывода( парам )
	Если парам = "АдресНаСкладе" Тогда
		стрАдрес = "";
		Если Выбран()=1 Тогда
			спр = СоздатьОбъект( "Справочник.СкладскиеАдреса" );
			Если спр.ВыбратьЭлементыПоРеквизиту("Товар",ТекущийЭлемент(),0,0) = 1 Тогда
				Пока спр.ПолучитьЭлемент() = 1 Цикл
					Если спр.ПометкаУдаления()=1 Тогда
						Продолжить;
					КонецЕсли;
					Если ПустоеЗначение(стрАдрес) = 0 Тогда
						стрАдрес = стрАдрес + РазделительСтрок;
					КонецЕсли;
					стрАдрес = стрАдрес + спр.Наименование;
					
//					стрАдрес=стрАдрес+" ("+СокрЛП(Спр.Родитель.Родитель.Родитель.МестоХранения.УсловияХранения)+")";					
					стрАдрес=стрАдрес+" - "+СокрЛП(Спр.Родитель.Родитель.Родитель.МестоХранения)+" ("+СокрЛП(Спр.Родитель.Родитель.Родитель.МестоХранения.УсловияХранения)+")";
//					Форма.лУсловияХранения.Заголовок(Спр.Родитель.Родитель.Родитель.МестоХранения.УсловияХранения);
//					Прервать;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Возврат ?(ПустоеЗначение(стрАдрес) = 0,стрАдрес,"<не задан адрес>")
	ИначеЕсли парам="УсловияХранения" Тогда
		Возврат СокрЛП(МестоХранения.УсловияХранения);
	КонецЕсли;
КонецФункции


Процедура тпУпаковкаВыбор(_ТП, _Кол, ТипРегиона)
	ОткрытьФормуМодально(_Кол,,0);
КонецПроцедуры

Процедура тпДопСкладыВыбор(_ТП, _Кол, ТипРегиона)
	ОткрытьФормуМодально(_Кол,,0);
КонецПроцедуры

Процедура ТПЗаменыВыбор(_ТП, _Стр, _Кол,ТипРегиона)
	Если (_Кол.Данные="КодЗамены") ИЛИ (_Кол.Данные="ТоварЗамены") Тогда
		ОткрытьФормуМодально(_ТП.ТекущиеДанные.ТоварЗамены,,0);
	ИначеЕсли _Кол.Данные="ЕдИзмКилограмм" Тогда
		ОткрытьФорму(_ТП.ТекущиеДанные.ЕдИзмКилограмм,,0);
	КонецЕсли;
КонецПроцедуры

Процедура ВыборПоставщика()
	Если Поставщик.Выбран()=1 Тогда
		Если ВалютаПоставщика<>Поставщик.ВалютаКредитаПоставщика Тогда
			ВалютаПоставщика=Поставщик.ВалютаКредитаПоставщика;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//******************************************************************************
// ПоКнопкеПечать()
// 
// Вызывается из формул элементов диалога:
//  Кнопка "кнПечать".
//
// Описание:
//  Определяется соответствующая печатная форма.
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	Если Выбран()=0 Тогда
		ПРедупреждение("Вначале документ следует сохранить!");
		Возврат;
	КонецЕсли;
	
	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;    
	//Если НомерТекущейФормы=1 Тогда
	//	 
	//Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(Контекст, "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	//КонецЕсли;
	

	
	
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Вызывается из формул элементов диалога:
//  Кнопка "кнВыбПечать".
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы() 

Процедура кнПомощь()
	Помощь = СоздатьОбъект("Общие.Помощь");
	Если Форма.Закладки.ТекущаяСтрока()=2 Тогда
		Помощь.Открыть( "Справочник.НоменклатураКарточкаУпаковка" );	
	Иначе
		Помощь.Открыть( "Справочник.НоменклатураКарточка" );	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФото(Реж="")
	
	Если ПустоеЗначение(Константа.ПутьККаталогуФотоТоваров)=1 Тогда
		КаталогФотографий=КаталогИБ()+"Photo\";
	Иначе
		КаталогФотографий=СокрЛП(Константа.ПутьККаталогуФотоТоваров);
	КонецЕсли;
	
	ФС.УстТекКаталог(КаталогФотографий);
	
	Если Реж="Путь" Тогда
		ЗапуститьПриложение(КаталогФотографий);
		Возврат;
	КонецЕсли;
	ФайлФото=""+СокрЛП(Код)+".*";
	ФайлФото2=""+СокрЛП(КодТовара)+".*";
	Если (ФС.СуществуетФайл(ФайлФото) = 1) Тогда
		ЗапуститьПриложение("\\r-apps\ThinApps\Apps\IrfanView\i_view32.exe "+КаталогФотографий+"\"+ФайлФото);
	ИначеЕсли (ФС.СуществуетФайл(ФайлФото2) = 1) Тогда
		ЗапуститьПриложение("\\r-apps\ThinApps\Apps\IrfanView\i_view32.exe "+КаталогФотографий+"\"+ФайлФото2);
	КонецЕсли; 
	
КонецПроцедуры

//======================================================================
Процедура кнАрхивировать()

	
	Меню = СоздатьОбъект("СписокЗначений");
	
	СимАрхив = СокрЛП(Константа.СимволАрхивТоваров);
	ВАрхиве = 0;
	Если Лев(Наименование,2) = СимАрхив Тогда
		ВАрхиве = 1;
	КонецЕсли;

	выб=1;
	Если ВАрхиве=0 Тогда
		Рез=Регистр.РезервыТоваров.СводныйОстаток(ТекущийЭлемент(),,"РезервТовара");
		Ост=Регистр.ОстаткиТоваров.СводныйОстаток(ТекущийЭлемент(),,,"ОстатокТовара");
		СпецЗаказ=Регистр.СпецЗаказы.СводныйОстаток(ТекущийЭлемент(),,"Заказано");
		Зак=Регистр.ЗаказыПоставщикам.СводныйОстаток(ТекущийЭлемент(),,,,,"Количество");
	
		Если (Рез+Ост+СпецЗаказ+Зак)<>0 Тогда
			Если  Вопрос ("У товара есть незакрытые остатки! Продолжить перенос в архив?","Да+Нет")="Да" Тогда
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;	
		
	Иначе
		Меню.ДобавитьЗначение(1,"Достать из архива");
		Меню.ДобавитьЗначение(2,"Достать из архива и скопировать с товара");
		Если Меню.ВыбратьЗначение(выб,,,,1)=0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	
	Если ВАрхиве=0 Тогда
		Если Вопрос("Карточка будет перенесена в архив? Вы уверены?","Да+Нет")="Да" Тогда
			Архивный				= 1;
			Наименование 			= СимАрхив+" "+ Наименование;
			НаименованиеLV 			= СимАрхив+" "+ НаименованиеLV;
			НаименованиеEE 			= СимАрхив+" "+  НаименованиеEE;
			НаименованиеLT 			= СимАрхив+" "+  НаименованиеLT;
			НаименованиеАнгл 		= СимАрхив+" "+  НаименованиеАнгл;
			НаименованиеРусс		= СимАрхив+" "+  НаименованиеРусс;
			НаименованиеДляЦенника 	= СимАрхив+" "+  НаименованиеДляЦенника;
			НаименованиеДляЦенникаРусс = СимАрхив+ " "+ НаименованиеДляЦенникаРусс;
			НаименованиеЛат			= СимАрхив+" "+  НаименованиеЛат;
			НаименованиеОриг		= СимАрхив+" "+  НаименованиеОриг;
			КодДляРозницы 			= 0;
			ДляРозницы 				= 0;   
			MAG 						= 0;
			RETAIL 					= 0;
			ПодлежитУценке 			= 0;
			ПодлежитУценкеСнято 		= 0;
			ТамКод					= "";
			ТамКодТекст				= "";
			Объем					= 0;
			АкцизныйТовар			= 0;
			АкцизнаяСтавка			= 0;
			ФотоДата				= "";
			СертификатДата			= "";		
			ФлПечатьСроковГодности    = 0;
						
			
			ПоАлфавиту				= Translate_Descr(Наименование);
			ПоАлфавитуEE			= Translate_Descr(НаименованиеEE);
			ПоАлфавитуLT			= Translate_Descr(НаименованиеLT);
			Если ПризнакСпецКода<>Перечисление.СпецкодыТоваров.A Тогда
				ПризнакСпецКода = "";
				Код 			= КодТовара;
			КонецЕсли;

			ТекстЗапроса = "SELECT УстМинЗапасовСтроки.IDDOC [Ссылка $Документ.УстМинЗапасов]
				//|					, УстМинЗапасовСтроки.LINENO_ НомерСтроки
				|			   FROM $ДокументСтроки.УстМинЗапасов AS УстМинЗапасовСтроки With (NOLOCK)
				|			   WHERE ($УстМинЗапасовСтроки.Запас = :ВыбЗапас)";
			Запрос = СоздатьОбъект("ODBCRecordSet");

			Спр= СоздатьОбъект("Справочник.Запасы");
			Спр.ИспользоватьВладельца(ТекущийЭлемент());
			Спр.ВыбратьЭлементы();
			Пока Спр.ПолучитьЭлемент() = 1 Цикл
                                            
				Спр.МинЗапас 		= 0;
				Спр.Записать();
				
				Запрос.УстановитьТекстовыйПараметр("ВыбЗапас",Спр.ТекущийЭлемент());
				табл = Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
			
				Док = СоздатьОбъект("Документ.УстМинЗапасов");
				табл.ВыбратьСтроки();
				Пока табл.ПолучитьСтроку()=1 Цикл
					Док.НайтиДокумент(табл.Ссылка);
					Док.ВыбратьСтроки();
					Пока Док.ПолучитьСтроку()=1 Цикл
						Если Док.Запас = Спр.ТекущийЭлемент() Тогда
							Док.УдалитьСтроку();
						КонецЕсли;
					КонецЦикла;
			//		Док.ПолучитьСтрокуПоНомеру(табл.НомерСтроки);
					Сообщить("Удален запас из документа "+Док+" от "+Док.ДатаДок);
					Док.Записать();
				КонецЦикла;	
				
				ОбъектУдалить(Спр,1);
				//Спр.РасчетМинЗапаса = 0;
				//Спр.ГлубинаМинЗапаса= 0;
				//Спр.СкоростьПродажи = 0;
				//Спр.МинЗапасАвто 	= 0;
			КонецЦикла;
			
			СпрЦ = СоздатьОбъект("Справочник.Цены");
			СпрЦ.ИспользоватьВладельца(ТекущийЭлемент());
			СпрЦ.ВыбратьЭлементы();
			Пока СпрЦ.ПолучитьЭлемент() = 1 Цикл
				Если СпрЦ.Цена.Получить(РабочаяДата())<>0 Тогда
					СпрЦ.Цена.Установить(РабочаяДата(),0);
					СпрЦ.ЗапретСкидки=0;
					ОбъектЗаписать(СпрЦ,);
				КонецЕсли;
			КонецЦикла;

			СпрСклады = СоздатьОбъект("Справочник.СкладыТовара");
			СпрСклады .ИспользоватьВладельца(ТекущийЭлемент());
			СпрСклады .ВыбратьЭлементы();
			Пока СпрСклады .ПолучитьЭлемент() = 1 Цикл
				ОбъектУдалить(СпрСклады,1);
			КонецЦикла;
			
			СпрСвойства = СоздатьОбъект("Справочник.СвойстваНоменклатуры");
			СпрСвойства.ИспользоватьВладельца(ТекущийЭлемент());
			СпрСвойства .ВыбратьЭлементы();
			Пока СпрСвойства .ПолучитьЭлемент() = 1 Цикл
				ОбъектУдалить(СпрСвойства,1);
			КонецЦикла;

			РегПарт = СоздатьОбъект("Регистр.ПартииТоваров");
			РегПарт.УстановитьЗначениеФильтра("Товар",ТекущийЭлемент());
			РегПарт.ОбратныйПорядок(1);
			регПарт.ВыбратьДвижения(РабочаяДата()-356*5,РабочаяДата());
			
			Если РегПарт.ПолучитьДвижение()=1 Тогда
				ДатаАктуальности = РегПарт.ТекущийДокумент().ДатаДок; //пропишем дату движения
				ЛегкоеСообщение(Шаблон("Последнее движения товара было по документу [РегПарт.ТекущийДокумент()] от [ДатаАктуальности ]!"));
			Иначе
				ДатаАктуальности=РабочаяДата()-356*5;
			КонецЕсли;
			
			ДатаАрхивации = РабочаяДата();
			Записать();
			ЗаписьЖурналаРегистрации( Шаблон("Карточка [КодТовара] перенесена в архив"),, "Изменение реквизитов справочника", ТекущийЭлемент(), 2 );
			
			//меняем название в базах филиалов			
			Запрос=СоздатьОбъект("ODBCRecordSet");
			ТекстЗапросаОбновить="UPDATE Спр SET $Спр.НаименованиеEE=:Наим,$Спр.ПоАлфавитуEE = :НаимПоАлфавиту FROM FOOD_ESTONIA.dbo.$Справочник.Номенклатура Спр WHERE $Спр.IDD = :IDD";
			Запрос.УстановитьТекстовыйПараметр("Наим",НаименованиеEE);
			Запрос.УстановитьТекстовыйПараметр("НаимПоАлфавиту",ПоАлфавитуEE);
			Запрос.УстановитьТекстовыйПараметр("IDD",IDD);
			Запрос.ВыполнитьСкалярный(ТекстЗапросаОбновить);	
			
			ТекстЗапросаОбновить="UPDATE Спр SET $Спр.НаименованиеLT=:Наим,$Спр.ПоАлфавитуLT = :НаимПоАлфавиту FROM FOOD_LIETUVA.dbo.$Справочник.Номенклатура Спр WHERE $Спр.IDD = :IDD";
			Запрос.УстановитьТекстовыйПараметр("Наим",НаименованиеLT);
			Запрос.УстановитьТекстовыйПараметр("НаимПоАлфавиту",ПоАлфавитуLT);
			Запрос.УстановитьТекстовыйПараметр("IDD",IDD);
		
			Запрос.ВыполнитьСкалярный(ТекстЗапросаОбновить);	
			
			
		КонецЕсли;	
	Иначе
		
		Архивный				= 0;
		Наименование 			= СокрЛП(СтрЗаменить(Наименование,СимАрхив,""));
		НаименованиеLV 			= СокрЛП(СтрЗаменить(НаименованиеLV,СимАрхив,""));
		НаименованиеEE 			= СокрЛП(СтрЗаменить(НаименованиеEE,СимАрхив,""));
		НаименованиеLT 			= СокрЛП(СтрЗаменить(НаименованиеLT,СимАрхив,""));
		НаименованиеАнгл		= СокрЛП(СтрЗаменить(НаименованиеАнгл,СимАрхив,""));
		НаименованиеРусс 		= СокрЛП(СтрЗаменить(НаименованиеРусс,СимАрхив,""));
		НаименованиеДляЦенника 	= СокрЛП(СтрЗаменить(НаименованиеДляЦенника,СимАрхив,""));
		НаименованиеДляЦенникаРусс = СокрЛП(СтрЗаменить(НаименованиеДляЦенникаРусс,СимАрхив,""));
		НаименованиеЛат 		= СокрЛП(СтрЗаменить(НаименованиеЛат,СимАрхив,""));
		НаименованиеОриг 		= СокрЛП(СтрЗаменить(НаименованиеОриг,СимАрхив,""));

		ПоАлфавиту=Translate_Descr(Наименование);
		ПоАлфавитуEE=Translate_Descr(НаименованиеEE);
		ПоАлфавитуLT=Translate_Descr(НаименованиеLT);
		
		ВремяПрошло = РабочаяДата()-ДатаАрхивации;
		Если (ВремяПрошло)<360*2 Тогда
			ЛегкоеСообщение("С момента архивации прошло всего "+Времяпрошло+" дней!");
		КонецЕсли;

		ДатаАрхивации = "";
		ДатаВосстановления = РабочаяДата();
		Если выб=1 Тогда
			//не формируем новый код
		Иначе
			СформироватьКод();
		КонецЕсли;
		Записать();
		ЗаписьЖурналаРегистрации( Шаблон("Карточка [КодТовара] вытащена из архива"),, "Изменение реквизитов справочника", ТекущийЭлемент(), 2 );
		
		
		//меняем название в базах филиалов			
		Запрос=СоздатьОбъект("ODBCRecordSet");
		ТекстЗапросаОбновить="UPDATE Спр SET $Спр.НаименованиеEE=:Наим,$Спр.ПоАлфавитуEE = :НаимПоАлфавиту FROM FOOD_ESTONIA.dbo.$Справочник.Номенклатура Спр WHERE $Спр.IDD = :IDD";
		Запрос.УстановитьТекстовыйПараметр("Наим",НаименованиеEE);
		Запрос.УстановитьТекстовыйПараметр("НаимПоАлфавиту",ПоАлфавитуEE);
		Запрос.УстановитьТекстовыйПараметр("IDD",IDD);
		Запрос.ВыполнитьСкалярный(ТекстЗапросаОбновить);	
		
		ТекстЗапросаОбновить="UPDATE Спр SET $Спр.НаименованиеLT=:Наим,$Спр.ПоАлфавитуLT = :НаимПоАлфавиту FROM FOOD_LIETUVA.dbo.$Справочник.Номенклатура Спр WHERE $Спр.IDD = :IDD";
		Запрос.УстановитьТекстовыйПараметр("Наим",НаименованиеLT);
		Запрос.УстановитьТекстовыйПараметр("НаимПоАлфавиту",ПоАлфавитуLT);
		Запрос.УстановитьТекстовыйПараметр("IDD",IDD);
	
		Запрос.ВыполнитьСкалярный(ТекстЗапросаОбновить);

		Если выб=2 Тогда
			КопироватьКарточкуТовара();
		КонецЕсли;		

		Текст = "при возврате из архива проверьте актуальность реквизитов
		|- там.код
		|- штрих код
		|- наличие мин запаса
		|- актуальность спецификации
		|- актуальность фото
		|";
		
		Предупреждение(Текст);
		ДатаАктуальности = РабочаяДата();
		
	КонецЕсли;
	
КонецПроцедуры // кнАрхивировать
              
Процедура ПриИзмененииУценки()
	
	Если ПодлежитУценке=0 Тогда
		ПодлежитУценкеСнято=1;
	Иначе
		ПодлежитУценкеСнято=0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаВеса()
	
	Если (ЕдПервУпак = Перечисление.ЕдиницыИзмерения.Килограмм) И (ВесПервичной<>1) Тогда	
		Сообщить("Вес первичной упаковки для КГ должен быть только 1 кг!");
		ВесПервичной = 1;
	КонецЕсли;
КонецПроцедуры

Процедура КопироватьКарточкуТовара()
	
	СпрТов = СоздатьОбъект("Справочник.Номенклатура");
	СпрТов.НайтиПоКоду(Код,0);
	сзРеквизитыНеКопировать = СоздатьОбъект("СписокЗначений");
	сзРеквизитыНеКопировать.ДобавитьЗначение("КодТовара");
	сзРеквизитыНеКопировать.ДобавитьЗначение("ПризнакСпецКода");
	сзРеквизитыНеКопировать.ДобавитьЗначение("ДляРозницы");
	сзРеквизитыНеКопировать.ДобавитьЗначение("БазоваяЕдиницаИзмерения");
	сзРеквизитыНеКопировать.ДобавитьЗначение("БазоваяЕдиницаИзмеренияРозница");
	сзРеквизитыНеКопировать.ДобавитьЗначение("КодДляРозницы");
	сзРеквизитыНеКопировать.ДобавитьЗначение("КодПоставщика");
	сзРеквизитыНеКопировать.ДобавитьЗначение("КодРК");
	сзРеквизитыНеКопировать.ДобавитьЗначение("КодРКГруппы");
	сзРеквизитыНеКопировать.ДобавитьЗначение("ШтрихКод");
	сзРеквизитыНеКопировать.ДобавитьЗначение("ГЛН");
	сзРеквизитыНеКопировать.ДобавитьЗначение("ВидТовара");
	сзРеквизитыНеКопировать.ДобавитьЗначение("ВесовойКод");
	сзРеквизитыНеКопировать.ДобавитьЗначение("ТамКод");
	сзРеквизитыНеКопировать.ДобавитьЗначение("ТамКодТекст");
	сзРеквизитыНеКопировать.ДобавитьЗначение("IDD");
	сзРеквизитыНеКопировать.ДобавитьЗначение("ДатаСоздания");
	сзРеквизитыНеКопировать.ДобавитьЗначение("ДатаАктуальности");
	сзРеквизитыНеКопировать.ДобавитьЗначение("ДатаАрхивации");
	сзРеквизитыНеКопировать.ДобавитьЗначение("ДатаВосстановления");
	сзРеквизитыНеКопировать.ДобавитьЗначение("ФотоДата");
	сзРеквизитыНеКопировать.ДобавитьЗначение("СертификатДата");
	сзРеквизитыНеКопировать.ДобавитьЗначение("Идентификатор");
	сзРеквизитыНеКопировать.ДобавитьЗначение("ЦенаПоставщика");
	сзРеквизитыНеКопировать.ДобавитьЗначение("ЦенаПриобретения");
	сзРеквизитыНеКопировать.ДобавитьЗначение("ФлПечатьСроковГодности");  
	сзРеквизитыНеКопировать.ДобавитьЗначение("ПризнакСпецКода");  
	сзРеквизитыНеКопировать.ДобавитьЗначение("ПризнакСпецКодаДатаУст");  
	
	Если СпрТов.Выбрать("Выберите товар для копирования","ДляПодбора")=1 Тогда
		Для н = 1 По Метаданные.Справочник("Номенклатура").Реквизит() Цикл
			РеквизитСпр = Метаданные.Справочник("Номенклатура").Реквизит(н).Идентификатор;
			Если сзРеквизитыНеКопировать.Принадлежит(РеквизитСпр)=0 Тогда
				УстановитьАтрибут(РеквизитСпр,СпрТов.ПолучитьАтрибут(РеквизитСпр));
			Иначе
				Если НазваниеНабораПрав()="Администратор" Тогда
					Сообщить("Пропускаем реквизит: "+РеквизитСпр);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Наименование = СпрТов.Наименование;
		ФлПечатьСроковГодности = Родитель.ФлПечатьСроковГодности;       
		
		

		Если ЕдНеттоВеса.Выбран()=1 Тогда
			ЕдПервУпак=ЕдНеттоВеса.Единица;
			КоэфНеттоВеса = Окр(1/ЕдНеттоВеса.Коэффициент,4,1);
		Иначе
			ЕдПервУпак=БазоваяЕдиницаИзмерения;
			КоэфНеттоВеса=1;
		КонецЕсли;

		ПриВыбореЕдПервУпак();
		
		ВесПервичной = Вес / КоэфНеттоВеса;
		
		ОбъектКопир = СпрТов.ТекущийЭлемент();
		Если ПустоеЗначение(ОбъектКопир)=0 Тогда
			//если карточка была скопирована тогда копируем файлы фото и сертификатов
			ПутьКаталогаСертификата=СокрЛП(Константа.ПутьККаталогуСертификатовТоваров)+"\";
			
			ФС.УстТекКаталог(ПутьКаталогаСертификата);
			ФайлСертификата=""+СокрЛП(ОбъектКопир.КодТовара)+".pdf";
			ФайлСертификатаНов="New\"+СокрЛП(КодТовара)+".pdf";
	
			ФайлСертификата_ = ФС.НайтиПервыйФайл(ФайлСертификата);
		 	Если ПустаяСтрока(ФайлСертификата_)=0 Тогда
		 		Если Вопрос("Скопировать файл сертификата?","Да+Нет")="Да" Тогда
			 		ФС.КопироватьФайл(ПутьКаталогаСертификата+ФайлСертификата_ ,ПутьКаталогаСертификата+ФайлСертификатаНов,0);
		 		КонецЕсли;
			КонецЕсли;
		 	
			Если ПустоеЗначение(Константа.ПутьККаталогуФотоТоваров)=1 Тогда
				КаталогФотографий=КаталогИБ()+"Photo\";
			Иначе
				КаталогФотографий=СокрЛП(Константа.ПутьККаталогуФотоТоваров)+"\";
			КонецЕсли;
			ФС.УстТекКаталог(КаталогФотографий);
			ФайлФото=""+СокрЛП(ОбъектКопир.КодТовара)+".jpg";
			ФайлФото_ = ФС.НайтиПервыйФайл(ФайлФото);
		 	Если ПустаяСтрока(ФайлФото_)=0 Тогда
		 		РасшФайла = Сред(ФайлФото_,Найти(ФайлФото_,".")+1);
		 		
				ФайлФотоНов="New\"+СокрЛП(КодТовара)+".jpg";
		 		
		 		Если Вопрос("Скопировать файл фотографии?","Да+Нет")="Да" Тогда
			 		ФС.КопироватьФайл(КаталогФотографий+ФайлФото_ ,КаталогФотографий+ФайлФотоНов,0);
		 		КонецЕсли;
			КонецЕсли;
			
			ОбъектКопир="";
	
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Функция ДатаСоздания()

	Возврат	"Создан: "+?(ПустоеЗначение(ДатаВосстановления)=0,ДатаВосстановления,ДатаСоздания);	
КонецФункции

Процедура СформироватьКодТовара()
	Код = СокрЛП(СокрЛП(КодТовара)+Нрег(ПризнакСпецКода.Идентификатор()));
	
	Если ПустоеЗначение(ПризнакСпецКода)=0 Тогда
		ПризнакСпецКодаДатаУст = РабочаяДата();
	Иначе
		ПризнакСпецКодаДатаУст = 0;
	КонецЕсли;
КонецПроцедуры

//----------------------   
Форма.ИспользоватьЗакладки(1);
Записан=0; 
СписокПодч=СоздатьОбъект("СписокЗначений");
перЛатвия = Перечисление.МестаИспользования.Латвия;
перЛитва = Перечисление.МестаИспользования.Литва;
спИзмененийРеквизитов = СоздатьОбъект( "СписокЗначений" );
спИзмененийРеквизитов.ДобавитьЗначение( "", "КодДляРозницы" );
спИзмененийРеквизитов.ДобавитьЗначение( "", "СрокГоднПоставщика" );
спИзмененийРеквизитов.ДобавитьЗначение( "", "СрокГодн");
спИзмененийРеквизитов.ДобавитьЗначение( "", "Вес");
спИзмененийРеквизитов.ДобавитьЗначение( "", "БазоваяЕдиницаИзмерения");
//спИзмененийРеквизитов.ДобавитьЗначение( "", "КоэфНеттоВеса");

//спИзмененийРеквизитов.ДобавитьЗначение( "", "КодРК" );
//_ТабличноеПоле	=СоздатьОбъект("Общие.ТабличноеПоле");
ТаблУпак=СоздатьОбъект("ТаблицаЗначений");
ТаблУпак.НоваяКолонка("Ссылка");
ТаблУпак.НоваяКолонка("ВидУпаковки");
ТаблУпак.НоваяКолонка("ВесУпаковки");
ТаблУпак.НоваяКолонка("ШиринаУпаковки");
ТаблУпак.НоваяКолонка("ДлинаУпаковки");
ТаблУпак.НоваяКолонка("ВысотаУпаковки");

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");  


Попытка
	Расш=СоздатьОбъект("РасширениеФормы");	
Исключение
	Расш="";
КонецПопытки;

п_ИТСоставSQL=СоздатьОбъект("ИндексированнаяТаблица");


спКодов = СоздатьОбъект( "СписокЗначений" );
спКодов.Установить("161",194);
спКодов.Установить("162",226);
спКодов.Установить("163",200);
спКодов.Установить("165",232);
спКодов.Установить("166",199);
спКодов.Установить("167",231);
спКодов.Установить("168",204);
спКодов.Установить("170",236);
спКодов.Установить("172",206);
спКодов.Установить("174",238);
спКодов.Установить("175",205);
спКодов.Установить("176",237);
спКодов.Установить("177",207);
спКодов.Установить("178",239);
спКодов.Установить("179",210);
спКодов.Установить("180",242);
спКодов.Установить("185",208);
спКодов.Установить("186",240);
спКодов.Установить("188",219);
спКодов.Установить("189",251);
спКодов.Установить("190",222);
спКодов.Установить("191",254);
