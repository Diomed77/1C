Перем H_Flag;
Перем vt_Rezerve_vis;
Перем Рез_Поиска;
Перем текМестоИсп;
Перем перЛатвия, перЛитва;
Перем спПослОтбора;
Перем ПредТовар, ПредТоварНачало, ПредТоварКонец;
Перем Расш;
Перем итТаблТовары;

Процедура семУстВидимости() Далее
//Функция РозничнаяЦенаТовара(ВыбТовар)   Далее

Функция ФорматВывода(парам , ВыбТов="") Далее

//======================================================================
Процедура кнUP()

	Активизировать("ПоАлфавиту",0);
	Shell = СоздатьОбъект("WScript.Shell");
	Shell.SendKeys("{HOME}"); 

КонецПроцедуры // кнUP


Процедура кнПомощь()
	Помощь = СоздатьОбъект("Общие.Помощь");
	Помощь.Открыть( "Справочник.НоменклатураСписок" );
КонецПроцедуры


Функция семПолучитьТоварыПоКлиенту( пКлиент, пКолДней, Фирма="" )
	//возврощает список товаров отгруженных клиенту за определенное кол-во дней с текущего момента
	сп = СоздатьОбъект( "СписокЗначений" );
	Если пКлиент.Выбран() = 0 Тогда Возврат сп; КонецЕсли;
	Если пКолДней = 0 Тогда Возврат сп; КонецЕсли;

	ODBCRecordSet = СоздатьОбъект( "ODBCRecordSet" );
	
	глУдалениеВременнойТаблицыSQL("#ТоварыПоКлиенту");
	
	Если (Фирма=Константа.ОсновнаяФирма) ИЛИ (пКлиент.ВидКлиента = Перечисление.ВидыКлиентов.Поставщик) Тогда
		ТекстЗапроса="
		|SELECT ОборотыТоваровОбороты.Товар Val
		|INTO #ТоварыПоКлиенту
		|FROM $РегистрОбороты.ОборотыТоваров(:НачДата,
		|									,,
		|									,
		|									(Клиент = :Клиент),
		|									Товар,) AS ОборотыТоваровОбороты
		|";
		
		ODBCRecordSet.УстановитьТекстовыйПараметр("Клиент", пКлиент);
		ТекстЗапроса2 = "SELECT #ТоварыПоКлиенту.Val [Товар $Справочник.Номенклатура]
		|					, $Спр.ПоАлфавиту as Наименование
		|				FROM #ТоварыПоКлиенту
		|				INNER JOIN $Справочник.Номенклатура as Спр (NOLOCK) ON Спр.ID = #ТоварыПоКлиенту.Val
		|				GROUP BY #ТоварыПоКлиенту.Val, $Спр.ПоАлфавиту
	//	|				UNION 
	//	|				SELECT $ТоварыЗамены.ТоварЗамена [Товар $Справочник.Номенклатура]
	//	|					, $Спр2.ПоАлфавиту as Наименование
	//	|				FROM $Справочник.НоменклатураЗамены AS ТоварыЗамены (NOLOCK)
	//	|				INNER JOIN $Справочник.Номенклатура as Спр2 (NOLOCK) ON Спр2.ID = $ТоварыЗамены.ТоварЗамена
	//	|				WHERE (ТоварыЗамены.ISMARK = 0) AND 
	//|						$ТоварыЗамены.Идентификатор IN (SELECT $Спр3.Идентификатор FROM $Справочник.НоменклатураЗамены AS Спр3 (NOLOCK) WHERE $Спр3.ТоварЗамена IN (SELECT Val FROM #ТоварыПоКлиенту) ) 
	//	|				GROUP BY $ТоварыЗамены.ТоварЗамена, $Спр2.ПоАлфавиту
		|				ORDER BY 2
		|";

		ODBCRecordSet.УстановитьТекстовыйПараметр("НачДата", ДобавитьМесяц(НачМесяца(РабочаяДата()),-2));
		ODBCRecordSet.ВыполнитьСкалярный(ТекстЗапроса);

		
	Иначе
		//если пользователь филиала 
		БД=СоздатьОбъект("ODBCDataBase");
		БД.ПрисоединитьИБ(СокрЛП(Фирма.КаталогКонфигурации),"OLE","oletransfe");
		ODBCRecordSet.УстБД(БД);

		ТекстЗапроса="
		|SELECT СпрОриг.ID [Товар $Справочник.Номенклатура]
		|FROM $РегистрОбороты.ОборотыТоваров(:НачДата,
		|									,,INNER JOIN $Справочник.Контрагенты СпрК (NOLOCK) ON СпрК.ID=Клиент AND $СпрК.IDD=:Клиент
		|									,
		|									,
		|									Товар,) AS ОборотыТоваровОбороты
		|INNER JOIN $Справочник.Номенклатура as Спр ON Спр.ID = ОборотыТоваровОбороты.Товар
		|INNER JOIN FOOD.dbo.$Справочник.Номенклатура as СпрОриг ON $СпрОриг.IDD= $Спр.IDD
		|";
		
		ODBCRecordSet.УстановитьТекстовыйПараметр("Клиент", пКлиент.IDD);
		ODBCRecordSet.УстановитьТекстовыйПараметр("НачДата", ДобавитьМесяц(НачМесяца(РабочаяДата()),-2));
		
		табл = ODBCRecordSet.ВыполнитьИнструкцию(ТекстЗапроса);
		табл.Выгрузить(сп,,,"Товар");	

		
		ODBCRecordSet.УстБД1С();
		ODBCRecordSet.УложитьСписокОбъектов(сп,"#ТоварыПоКлиенту");
		
		ТекстЗапроса2 = "SELECT Спр.ID [Товар $Справочник.Номенклатура]
		|					  ,$Спр.Наименование"+глКодСтраныПользователя+" as Наименование
		|				FROM #ТоварыПоКлиенту
		|				INNER JOIN $Справочник.Номенклатура as Спр ON Спр.ID = #ТоварыПоКлиенту.Val
		|				GROUP BY Спр.ID, $Спр.Наименование"+глКодСтраныПользователя+"
		//|				UNION 
		//|				SELECT $ТоварыЗамены.ТоварЗамена [Товар $Справочник.Номенклатура]
		//|					  , $Спр2.Наименование"+глКодСтраныПользователя+" as Наименование
		//|				FROM $Справочник.НоменклатураЗамены AS ТоварыЗамены (NOLOCK)
		//|				INNER JOIN $Справочник.Номенклатура as Спр2 ON Спр2.ID = $ТоварыЗамены.ТоварЗамена
		//|				WHERE (ТоварыЗамены.ISMARK = 0) AND 
		//|					$ТоварыЗамены.Идентификатор IN (SELECT $Спр3.Идентификатор FROM $Справочник.НоменклатураЗамены AS Спр3 (NOLOCK) WHERE $Спр3.ТоварЗамена IN (SELECT Val FROM #ТоварыПоКлиенту) ) 
		//|				GROUP BY $ТоварыЗамены.ТоварЗамена, $Спр2.Наименование"+глКодСтраныПользователя+"
		|				ORDER BY 2
		|"
		
	КонецЕсли;
	

//	ODBCRecordSet.Отладка(1);
	//Сообщить(ТекстЗапроса2);
	табл = ODBCRecordSet.ВыполнитьИнструкцию(ТекстЗапроса2);
	табл.Выгрузить(сп,,,"Товар");
	Возврат сп;
КонецФункции

Процедура семОтборТоваровПоКлиенту( пКлиент, пКолДней )
	//процедура устанавливает отбор в справочнике по товарам отгруженным клиенту за определенное кол-во дней с текущего момента
	ТекЭлем = ТекущийЭлемент();
	Если пКлиент.Выбран() = 1 Тогда
		
		Если пКлиент = спПослОтбора.Получить("Клиент") Тогда
			спТоваров = спПослОтбора.Получить("Товары");
		Иначе
			спТоваров = семПолучитьТоварыПоКлиенту( пКлиент, пКолДней, Пользователь.ОсновнаяФирма );
		КонецЕсли;
		ИспользоватьСписокЭлементов(спТоваров);
		ИерархическийСписок(0,0);       
		Попытка АктивизироватьОбъект(ТекЭлем);
		Исключение
		КонецПопытки;
		спПослОтбора.Установить("Клиент",пКлиент);
		спПослОтбора.Установить("Товары",спТоваров);
//		ЛегкоеСообщение("Теперь строка поиска внизу работает только по отобранным товарам клиента!");
		
	Иначе
		ИспользоватьСписокЭлементов();
		ИерархическийСписок(1,1);     
		Попытка
			АктивизироватьОбъект(ТекЭлем);
			Активизировать("Код",0);
		Исключение
		КонецПопытки;
	КонецЕсли;
	семУстВидимости();
КонецПроцедуры

Процедура ПриВыбореКлиента()
	семОтборТоваровПоКлиенту( выбКлиент, 90 );
КонецПроцедуры

Процедура семУстПослКлиента()
	выбКлиент = спПослОтбора.Получить("Клиент");
	ПриВыбореКлиента();
КонецПроцедуры


Процедура семУстПеревода()
	Если текМестоИсп = перЛатвия Тогда
	ИначеЕсли текМестоИсп = перЛитва Тогда
		//	Кнопки
		Форма.кнПечать.Заголовок( "Print" );
		//	Список
		Форма.Код.Заголовок( "Code" );
		Форма.ПоАлфавиту.Заголовок( "Name" );
		Форма.БазоваяЕдиницаИзмерения.Заголовок( "Unit" );
		Форма.ВидТовара.Заголовок( "Type" );
		Форма.Поставщик.Заголовок( "Supplier" );
		Форма.ШтрихКод.Заголовок( "Barcode" );
		
		//	Поиск
		ЛистТ.УстановитьПараметрыКолонки("Код",,,,"Code",,,);
		ЛистТ.УстановитьПараметрыКолонки("Наим",,,,"Name",,,);
		ЛистТ.УстановитьПараметрыКолонки("Цена",,,,"Price",,,);
		ЛистТ.УстановитьПараметрыКолонки("ОстВсе",,,,"Общ. Ост.",,,);
		ЛистТ.УстановитьПараметрыКолонки("Ост",,,,"Дост.",,,);
		ЛистТ.УстановитьПараметрыКолонки("Рез",,,,"Резер..",,,);
		ЛистТ.УстановитьПараметрыКолонки("Комментарий",,,,"Coomment",,,);
		ЛистТ.УстановитьПараметрыКолонки("Поставщик",,,,"Supplier",,,);
	КонецЕсли;
КонецПроцедуры

Процедура семУстВидимости()
	Если глКодСтраныПользователя="LV" Тогда
		Форма.НаименованиеLT.Видимость(0);
		Форма.НаименованиеEE.Видимость(0);
		Форма.ПоАлфавитуEE.Видимость(0);
		Форма.ПоАлфавитуLT.Видимость(0);
		
		Форма.НаименованиеАнгл.Видимость(0);

		Если ВыбКлиент.Выбран()=0 Тогда
			Форма.лПоАлфавиту.Видимость(0);
			Форма.ПоАлфавиту.Видимость(1);
		Иначе
			Форма.лПоАлфавиту.Видимость(1);
			Форма.ПоАлфавиту.Видимость(0);
		КонецЕсли;
	ИначеЕсли глКодСтраныПользователя="LT" Тогда
		Форма.НаименованиеLT.Видимость(0);
		Форма.НаименованиеEE.Видимость(0);
		Форма.лПоАлфавиту.Видимость(0);
		Форма.ПоАлфавиту.Видимость(0);
		Форма.ПоАлфавитуEE.Видимость(0);
		
		Форма.НаименованиеАнгл.Видимость(1);
		Форма.ПоАлфавитуLT.Видимость(1);
	ИначеЕсли глКодСтраныПользователя="EE" Тогда
		Форма.НаименованиеLT.Видимость(0);
		Форма.НаименованиеEE.Видимость(0);
		Форма.НаименованиеАнгл.Видимость(1);
		Форма.лПоАлфавиту.Видимость(0);
		Форма.ПоАлфавиту.Видимость(0);
		Форма.ПоАлфавитуLT.Видимость(0);
		Форма.ПоАлфавитуEE.Видимость(1);
	КонецЕсли;

	Если текМестоИсп = перЛатвия Тогда
	ИначеЕсли текМестоИсп = перЛитва Тогда
		Форма.КодДляРозницы.Видимость( 0 );
	КонецЕсли;
	Если спПослОтбора.РазмерСписка() > 0 Тогда
		Форма.кнПослОтбор.Доступность(1);
	Иначе
		Форма.кнПослОтбор.Доступность(0);
	КонецЕсли;
	
	Если ПустоеЗначение(Константа.ОсновнаяФирмаЦентра)=0 Тогда
		Форма.кнТоварыИзмененныеВЦентре.Видимость(1);
	Иначе
		Форма.кнТоварыИзмененныеВЦентре.Видимость(0);
	КонецЕсли;
	
	Если НазваниеНабораПрав()="Администратор" Тогда
		Форма.КодТовара.Видимость(1);
	Иначе
		Форма.КодТовара.Видимость(0);
	КонецЕсли;
	
		
КонецПроцедуры



Процедура семСортировка()
	текСтрана = семТекСтрана();
	Если текСтрана = "LT" Тогда
		Сортировка("НаименованиеLT");
	ИначеЕсли текСтрана = "EE" Тогда
		Сортировка("НаименованиеEE");
	ИначеЕсли текСтрана = "LV" Тогда
		Сортировка("ПоАлфавиту");
	КонецЕсли;
КонецПроцедуры

Процедура Show_rezerve()
	OpenForm("Report.ОстаткиТоваров",CurrentItem());
	
КонецПроцедуры

Процедура SetHierarchy()
	//	H_Flag=HierarchicalList(Flag);
	//activate("ost");
КонецПроцедуры
//***************************************************************
//            
Функция ПолучитьРознЦену()
	
	Возврат Формат ((ЦенаТовараПоКатегорииДляТовара(ТекущийЭлемент(),Константа.РозничнаяКатегорияЦены)*(1-глПроцентСкидки(ТекущийЭлемент(),,Константа.РозничнаяКатегорияЦены)/100))*(1+ПроцентНДС(ТекущийЭлемент().СтавкаНДС)/100),"Ч11.2") ;
КонецФункции
    
//*********************************************
Функция ПоискПоМатчкоду(Условие,Сим) Экспорт
	
	Слово="";	
	Если Сим=1 Тогда
		Слово=("%"+НРег(Сред(СокрЛП(Условие),2))+"%");
	иначе
		Слово=(""+НРег(СокрЛП(Условие))+"%");
	КонецЕсли;
	
	Если глКодСтраныПользователя="LV" Тогда
		ПолеДляПоиска="($Спр.ПоАлфавиту LIKE :Поиск) ";
		ПолеДляСорт="$Спр.ПоАлфавиту";
	ИначеЕсли глКодСтраныПользователя="LT" Тогда
		ПолеДляПоиска="($Спр.ПоАлфавитуLT LIKE :Поиск) ";
		ПолеДляСорт="$Спр.ПоАлфавитуLT";		
	ИначеЕсли глКодСтраныПользователя="EE" Тогда
		ПолеДляПоиска="($Спр.ПоАлфавитуEE LIKE :Поиск) ";
		ПолеДляСорт="$Спр.ПоАлфавитуEE";
	КонецЕсли;	
	
	Если ПустоеЗначение(ВыбКлиент)=0 Тогда
		СоединениеУсловие = "INNER JOIN #ТоварыПоКлиенту ON #ТоварыПоКлиенту.Val = Спр.ID"
	КонецЕсли;
	
	ТекстЗапроса="SELECT DISTINCT Спр.ID [Товар $Справочник.Номенклатура],"+ПолеДляСорт+"
	|			  FROM $Справочник.Номенклатура Спр (NOLOCK)
	|"+СоединениеУсловие+"
	|			 WHERE ("+ПолеДляПоиска+") AND NOT($Спр.ПоАлфавиту LIKE :СимвАрх) 
	|					AND Спр.ISMARK = 0 AND Спр.ISFOLDER = 2
	|			 UNION 
	|			  SELECT СпрМ.PARENTEXT, "+ПолеДляСорт+"
	|			  FROM $Справочник.НоменклатураМатчкоды СпрМ (NOLOCK) 
	|			  INNER JOIN $Справочник.Номенклатура Спр (NOLOCK) ON Спр.ID = СпрМ.PARENTEXT
	|			  WHERE СпрМ.DESCR LIKE :Поиск AND СпрМ.ISMARK = 0 AND Спр.ISMARK = 0 AND Спр.ISFOLDER = 2
	|			 ORDER BY "+ПолеДляСорт;

	Результат=СоздатьОбъект("СписокЗначений");
	
	Запрос=СоздатьОбъект("ODBCRecordSet");
	Запрос.УстановитьТекстовыйПараметр("СимвАрх",Константа.СимволАрхивТоваров+"%");

	Запрос.УстановитьТекстовыйПараметр("Поиск",Слово);
	ТТ=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
	ТТ.Выгрузить(Результат,,,"Товар");

	Спр=СоздатьОбъект("Справочник.Номенклатура");
	Если Спр.НайтиПоКоду(СокрЛП(Условие))=1 Тогда
		Если Результат.НайтиЗначение(спр.ТекущийЭлемент())=0 Тогда
			Результат.ДобавитьЗначение(спр.ТекущийЭлемент());
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.РазмерСписка()>200 Тогда
		Если Вопрос("В результате запроса получено "+Результат.РазмерСписка() +" элементов. Продолжить?",4)<>6 Тогда
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	
	с=0;         
	т=0;

	Возврат Результат;	
	
КонецФункции

//*********************************************
//Функция ПоискSQL(Клиент)
//	                                              
//	ЛистКод=СоздатьОбъект("СписокЗначений");
//	Лист=СоздатьОбъект("СписокЗначений");
//	
//	//Ссылка на регистр движений остатков товаров
//	ОбъектИД=СокрЛП(НРег("RA"+MDW.ИДОбъекта(Метаданные.Регистр("ОстаткиТоваров")))); 
//	
//	//Ссылка на справочник товаров
//	ТоварыSС=СокрЛП(НРег("SC"+MDW.ИДОбъекта(Метаданные.Справочник("Номенклатура")))); 
//	
//	//Ссылка на поле Наименований без спец. симв. справочника товаров
//	ТоварыПоАлфавиту=СокрЛП(НРег("SP"+MDW.ИДОбъекта(Метаданные.Справочник("Номенклатура").Реквизит("ПоАлфавиту")))); 
//	
//	//Ссылка на поле Товар в регистре Остатки товаров
//	ТоварSP=СокрЛП(НРег("SP"+MDW.ИДОбъекта(Метаданные.Регистр("ОстаткиТоваров").Измерение("Товар"))));
//	
//	//Ссылка на поле Клиент в регистре остатки товаров
//	КлиентSP=СокрЛП(НРег("SP"+MDW.ИДОбъекта(Метаданные.Регистр("ОстаткиТоваров").Реквизит("Клиент"))));
//	
//	Спр=СоздатьОбъект("Справочник.Номенклатура");
//	
//	КлиентИД="'"+MDW.ЗначениеВСтрокуБД(Клиент)+"'";
//	//КлиентИД=Лев(Прав(ЗначениеВСтрокуВнутр(Клиент),15),13);
//	//_КодФилиала=Прав(КлиентИД,3);
//
//	//КлиентИД=СокрЛП(Лев(КлиентИД,10));
//	//КлиентИД=RBS.IntToBase(КлиентИД,36);
//	//КлиентИД="'"+ВРег(Прав("          "+КлиентИД,6)+_КодФилиала)+"'";
//	                                   
//	ДатаТА=ПолучитьДатуТА()-90;
//	СтрокаДаты=Строка(ДатаГод(ДатаТА))+?(ДатаМесяц(ДатаТА)<10,"0","")+Строка(ДатаМесяц(ДатаТА))+"01";
//
//	СтрокаЗапроса="Select "+ТоварSP+" as ID, left("+ТоварыПоАлфавиту+",5) from "+ОбъектИД+","+ТоварыSС+" goods"+
//	" where "+ОбъектИД+"."+ТоварSP+"=goods.id and "+КлиентSP+"="+КлиентИД+
//	" and Date_Time_iddoc >= '"+СтрокаДаты+
//	"' group by "+ТоварSP+", "+ТоварыПоАлфавиту+" order by 2";
//
//	//СтрокаЗапроса="Select "+ТоварSP+" as ID from "+ОбъектИД+
//	//" where "+КлиентSP+"="+КлиентИД+
//	//" and Date_Time_iddoc >= '"+СтрокаДаты+
//	//"' group by "+ТоварSP;
//	
////	Если ВидПодключения=Перечисление.ВидПодключения.RAINBOW Тогда
//		Всего=1;		
//		Если Соединение.Подготовить(СтрокаЗапроса)=1 Тогда
//			Если Соединение.Открыть()=1 Тогда
//			Иначе     
////				Сообщить("Ошибка открытия запроса. Обратитесь к системному администратору!");
////				Сообщить(СтрокаЗапроса);
//				Возврат Лист;
//			КонецЕсли;
//		Иначе                
//			Сообщить("Ошибка подготовки запроса. Обратитесь к системному администратору!");
//			Возврат Лист;
//		КонецЕсли;           
//	//ИначеЕсли ВидПодключения=Перечисление.ВидПодключения.ADO Тогда
//	//	НаборЗаписей=Соединение.Execute(СтрокаЗапроса);
//	//	Всего=НаборЗаписей.RecordCount;
//	//ИначеЕсли ВидПодключения=Перечисление.ВидПодключения.SQLDMO Тогда
//	//	НаборЗаписей=Соединение.Databases(СокрЛП(Константа.SQLБаза)).ExecuteWithResults(СтрокаЗапроса); //SQLDMO
//	//	Всего=НаборЗаписей.Rows;
//	//КонецЕсли;	
//	
//	с=0;         
//	т=0;
//
//	//Если ВидПодключения=Перечисление.ВидПодключения.RAINBOW Тогда 
//	Пока Соединение.Конец()=0 Цикл
//		ЛистКод.ДобавитьЗначение(Соединение.ПолучитьЗначение("ID"));
//		Соединение.След();
//	КонецЦикла;	    
//	//ИначеЕсли ВидПодключения=Перечисление.ВидПодключения.ADO Тогда
//	//	Пока НаборЗаписей.Eof()=0 Цикл
//	//		ЛистКод.ДобавитьЗначение(НаборЗаписей.Fields("ID").Value);
//	//		НаборЗаписей.MoveNext();
//    //    КонецЦикла;
//	//ИначеЕсли ВидПодключения=Перечисление.ВидПодключения.SQLDMO Тогда
//	//	Для т=1 По НаборЗаписей.Rows Цикл
//    //        ЛистКод.ДобавитьЗначение(НаборЗаписей.GetColumnString(т,1));
//	//	КонецЦикла;
//	//КонецЕсли;	  
//	
//	Соединение.Закрыть();	
//		
//	Для т=1 По ЛистКод.РазмерСписка() Цикл
//		с=с+1;
////		состояние(""+окр(с/Всего*100)+"%");
//		              
//
//		товкод=ЛистКод.ПолучитьЗначение(т);
//    
//		_ВнутреннийКод=товкод;
////
////		_КодФилиала=Прав(_ВнутреннийКод,3); //Последние три символа - КодФилиала
////
////		_ВнутреннийКод=СокрЛП(Лев(_ВнутреннийКод,СтрДлина(_ВнутреннийКод)-3));
////		_ВнутреннийКод=RBS.BaseToInt(_ВнутреннийКод,36);
////		_ВнутреннийКод=Прав("          "+_ВнутреннийКод,10)+_КодФилиала;
//                      
//		спр=MDW.ЗначениеИзСтрокиБД("Справочник.Номенклатура",_ВнутреннийКод);
//		
////		спр=ЗначениеИзСтрокиВнутр("{""B"",""0"",""0"","""+Сред(ТоварыSС,3)+""",""0"",""0"","""+_ВнутреннийКод+"""}");
//	
//		Прод=0;		
//		Если спр.Выбран()=0 Тогда
//			сообщить("Не найден товар с кодом "+товкод);
//			Прод=1;
//			Продолжить;
//		иначеесли Спр.ЭтоГруппа()=1 тогда
//			Прод=1;
//			Продолжить;
//		КонецЕсли;
//
//		Лист.ДобавитьЗначение(спр.ТекущийЭлемент());
//
//	КонецЦикла;	
//
//	Возврат Лист;	
//	
//КонецФункции     

//******************************************

//Процедура ОтборЗначений()
//	                            
//	УстановитьОтбор("ПризнакНевыбора",0);
//КонецПроцедуры

//******************************************
// Процедура генерации запроса ДляКлиента.
//
//Процедура ДляКлиента()
//	Перем Запрос, ТекстЗапроса;
//	//Создание объекта типа Запрос 
//	ЛистТ.УдалитьСтроки();
//	
//	Запрос = СоздатьОбъект("Запрос");
//	
//	ТекстЗапроса = 
//	"//{{ЗАПРОС(ДляКлиента)
//	|Период с (НачМесяца(ТекущаяДата())-90);
//	|Клиент = Регистр.ОстаткиТоваров.Клиент;
//	|Товар = Регистр.ОстаткиТоваров.Товар;
//	|ОстатокТовара = Регистр.ОстаткиТоваров.ОстатокТовара;
//	|Функция ОстатокТовараРасход = Расход(ОстатокТовара);
//	|Функция ОстатокТовараПриход = Приход(ОстатокТовара);
//	|Группировка Товар упорядочить;
//	|"//}}ЗАПРОС
//	;
//
//	СЗ=СоздатьОбъект("СписокЗначений");
//
//	Рез_Поиска=0;
//	Если ВыбКлиент.Выбран()=0 Тогда   
//	//	УстановитьОтбор(,);
//		ИспользоватьСписокЭлементов();
//		ИерархическийСписок(,1);       
//		семУстВидимости();
//	//	ОтборЗначений();
//		Возврат;
//	ИначеЕсли ВыбКлиент.ЭтоГруппа()=1 Тогда
//		ТекстЗапроса =ТекстЗапроса + "Условие(Клиент в ВыбКлиент);";
//	Иначе
//		ТекстЗапроса =ТекстЗапроса + "Условие(Клиент = ВыбКлиент);";
//	КонецЕсли;
//
//	СЗ=ПоискSQL(ВыбКлиент);
//  	Рез_Поиска=СЗ.РазмерСписка();
//  //	УстановитьОтбор(,);
//   	ИспользоватьСписокЭлементов(СЗ);
//   	ИерархическийСписок(0,0);
//   	семУстВидимости();                
//   	Возврат;
//
//	// Если ошибка в запросе, то выход из процедуры
//	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
//		Возврат;
//	КонецЕсли;
//
//	// Подготовка к заполнению выходных форм данными запроса
//
//	// Заполнение полей "Заголовок"
//                
//	ЛистТ.УдалитьСтроки();
//
//	с=0;
//	Пока Запрос.Группировка(1) = 1 Цикл
//		// Заполнение полей Товар
//		с=с+1;
//		спр=Запрос.Товар;
//
//		СЗ.ДобавитьЗначение(спр);		  
//		Продолжить;
//		
//		ОстТ=Регистр.ОстаткиТоваров.СводныйОстаток(спр.ТекущийЭлемент(),Склад,,"ОстатокТовара");
//		ОстВсе=Регистр.ОстаткиТоваров.СводныйОстаток(спр.ТекущийЭлемент(),,,"ОстатокТовара");
//
//		ттт=спр.ТекущийЭлемент();
//		ттт.ИспользоватьДату(РабочаяДата());
//
//		ЛистТ.НоваяСтрока();
//		ЛистТ.Код=ттт.Код;
//		ЛистТ.Наим=ттт.Наименование;
//		ЛистТ.Цена=ттт.Розн_Цена;
//		ЛистТ.ОстВсе=ОстВсе;
//		ЛистТ.ост=ОстТ;
//		ЛистТ.Рез=0;
//		ЛистТ.Товар=ттт;
//		ЛистТ.Комментарий=ттт.ШтрихКод;
//		ЛистТ.Поставщик=ттт.Поставщик;
//
//	КонецЦикла;
//
//	Рез_Поиска=с;
//	
////	УстановитьОтбор(,);
//	ИспользоватьСписокЭлементов(СЗ);
//	ИерархическийСписок(0,0);
////   	Форма.Наим_.Видимость(1);
////   	Форма.ПоАлфавиту.Видимость(0);
//
//	// Вывод заполненной формы
//
//КонецПроцедуры


//*************************************
Процедура ActivateCode()
	
	Активизировать("ПоискКод");
	
КонецПроцедуры                       

//*************************************
Процедура ПерейтиНа()
	
	АктивизироватьОбъект(ЛистТ.Товар);   
	
	Если Форма.РежимВыбора()=2 Тогда
		Активизировать("Код",0);
	КонецЕсли;
	
КонецПроцедуры     

//******************************************
Процедура ПриОткрытии()
	текМестоИсп = Константа.МестоИспользования;
	Склад = Пользователь.ГруппаСкладов;
	
	Если ТипЗначенияСтр(Форма.Параметр) = "Число" Тогда
		Если Форма.Параметр = 1 Тогда ВыборГруппы(1); КонецЕсли;
	Иначе
		выбКлиент = Форма.Параметр;
		Если ПустоеЗначение(ВыбКлиент)=0 Тогда
			Если семВнутреннийКлиент(ВыбКлиент,глФирма)=0 Тогда
				ПриВыбореКлиента();	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	чТоварыДляРаспродажи = 1;
	
	Если Форма.РежимВыбора()=1 Тогда
		Если ПустоеЗначение(ТекущийЭлемент())=0 Тогда
			Активизировать("Код",0); //если открыта форма для выбора элемента и спозиционированно на элементе, то фокус остается в списке
		Иначе
			Активизировать("ПоискКод");
		КонецЕсли;		
	Иначе
		Активизировать("ПоискКод");
	КонецЕсли;
	
	//Сервис.ЭмулироватьКлавиатуру("{^ENTER}");
	                                 
	//Активизировать("ПоискКод");
	
	ЛистТ.НоваяКолонка("Код",,10,,"Код",9,,);
	ЛистТ.НоваяКолонка("Наим",,30,,"Наименование",28,,);
	ЛистТ.НоваяКолонка("Товар",,1,,"Товар",,,);
	ЛистТ.НоваяКолонка("Цена","Число",15,2," ЦенаСНДС",10,,);
	ЛистТ.НоваяКолонка("ОстВсе","Число",10,2,"Общ. Ост.",8,,);
	ЛистТ.НоваяКолонка("Ост","Число",10,2,"Дост.",8,,);
	ЛистТ.НоваяКолонка("Рез","Число",10,2,"Резер..",6,,);
	ЛистТ.НоваяКолонка("Комментарий","Строка",100,,"Штрих-код",13,,);
	ЛистТ.НоваяКолонка("Поставщик",,,,"Поставщик",20,,);
	
	ЛистТ.ВидимостьКолонки("Товар",0);
	
	Форма.кнИзмНаим.Видимость(Пользователь.РазрИзмНаименования);
	
	ПоВхождению=ВосстановитьЗначение("ПоВхождению");
	ПросмотрИстории( "ГруппаСкидкиКасса,ЦенаПоставщика,ВыделитьАкцLV,ВыделитьАкцLT,ВыделитьАкцEE" );
	семУстВидимости();
	семУстПеревода(); 
	семСортировка();
	Если выбВалюта.Выбран() = 0 Тогда
		выбВалюта = ?(ПустоеЗначение(глФирма.ОсновнаяВалюта)=1,Константа.ОсновнаяВалюта,глФирма.ОсновнаяВалюта);
	КонецЕсли;
	//ОтборЗначений();
	Транслит(Расш,Форма);
КонецПроцедуры
//******************************************
Процедура ПослеОткрытия()
	
КонецПроцедуры
//******************************************
Процедура ПриЗакрытии()  
	
	СохранитьЗначение("ПоВхождению",ПоВхождению);
КонецПроцедуры


//******************************************
Процедура НайтиМатчКод()
	
	Рез_Поиска=0;
	Если ПустаяСтрока(матч)=1 Тогда
		ПриВыбореКлиента();
		
		//Если ВывДопТаб=0 Тогда //Выводить в дополнительную таблицу
		//	ИспользоватьСписокЭлементов();
		//	ИерархическийСписок(,1);
		//	//		   	Форма.Наим_.Видимость(0);
		//	//		   	Форма.ПоАлфавиту.Видимость(1);
		//КонецЕсли;
		возврат;
	конецесли;
	
	ЛистТ.УдалитьСтроки();
	
	//	Сообщить("Начало:"+ТекущееВремя());
	
	Результат=СоздатьОбъект("СписокЗначений");
	Результат=ПоискПоМатчкоду(матч,ПоВхождению);
	
	Если Число(Результат)=-1 Тогда
		Сообщить("Системная ошибка поиска. Обратитесь к Системному администратору!");
		Возврат;
	ИначеЕсли Число(Результат)=1 Тогда
		Возврат;
	КонецЕсли;	
	
	
	Если ВывДопТаб=0 Тогда //Не выводить в дополнительную таблицу
		ИспользоватьСписокЭлементов(Результат);
		ИерархическийСписок(0,0);	  
		Рез_Поиска=Результат.РазмерСписка();
		//	   	Форма.Наим_.Видимость(1);
		//	   	Форма.ПоАлфавиту.Видимость(0);
		Возврат;
	КонецЕсли;
	
	с=0;    
	Всего=Результат.РазмерСписка();
	Для т=1 По Результат.РазмерСписка() Цикл
		
		с=с+1;
		состояние(""+окр(с/Всего*100)+"%");
		
		спр=Результат.ПолучитьЗначение(т);
		
		ОстТ=Регистр.ОстаткиТоваров.СводныйОстаток(спр.ТекущийЭлемент(),Склад,,"ОстатокТовара");
		ОстВсе=Регистр.ОстаткиТоваров.СводныйОстаток(спр.ТекущийЭлемент(),,,"ОстатокТовара");
		РезТ=0;
		
		ттт=спр.ТекущийЭлемент();
		ттт.ИспользоватьДату(РабочаяДата());
		
		ЛистТ.НоваяСтрока();
		ЛистТ.Код=ттт.Код;
		ЛистТ.Наим=ттт.Наименование;
		ЛистТ.Цена=ЦенаТовараПоКатегорииДляТовара(ттт,Константа.РозничнаяКатегорияЦены);
		ЛистТ.ОстВсе=ОстВсе;
		ЛистТ.ост=ОстТ;
		ЛистТ.Рез=РезТ;
		ЛистТ.Товар=ттт;
		ЛистТ.Комментарий=ттт.ШтрихКод;
		ЛистТ.Поставщик=ттт.Поставщик;
		
	КонецЦикла;
	
	Рез_Поиска=ЛистТ.КоличествоСтрок();     
	
	//   	Форма.Наим_.Видимость(1);
	// 	Форма.ПоАлфавиту.Видимость(0);
	
	//	Сообщить("Конец: "+ТекущееВремя());
	
КонецПроцедуры

//**************************************
Процедура НайтиКод()
	
	//	ИспользоватьСписокЭлементов();
	ИерархическийСписок(,1);
	
	спр=СоздатьОбъект("Справочник.Номенклатура");
	
	спр.НайтиПоКоду(сокрЛП(ПоискКод),0);
	
	Если (спр.выбран()=0) ИЛИ (спр.ЭтоГруппа()=1) Тогда
		спр.НайтиПоРеквизиту("КодТовара",сокрЛП(ПоискКод),1);
	КонецЕсли;

	Если (спр.выбран()=0) ИЛИ (спр.ЭтоГруппа()=1) Тогда
		спр.НайтиПоРеквизиту("КодДляРозницы",сокрЛП(ПоискКод),1);
	КонецЕсли;
	
	Если спр.выбран()=1 Тогда
		
		АктивизироватьОбъект(спр.ТекущийЭлемент());
		Активизировать("Код",0);
		
		Если Форма.РежимВыбора()=2 Тогда
			//			Форма.ВыполнитьВыбор(спр.ТекущийЭлемент());
			//			Активизировать("ПоискКод");
		КонецЕсли;
		
	Иначе
		Активизировать("ПоискКод");
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиКодРК()
	ИерархическийСписок(,1);
	спр=СоздатьОбъект("Справочник.Номенклатура");
	Если спр.выбран()=0 Тогда
		спр.НайтиПоРеквизиту("КодРК",Число(сокрЛП(ПоискКод)),1);
	КонецЕсли;
	Если спр.выбран()=1 Тогда
		АктивизироватьОбъект(спр.ТекущийЭлемент());
		Активизировать("Код",0);
	Иначе
		Активизировать("ПоискКод");
	КонецЕсли;
КонецПроцедуры


//**************************************

Функция СвободныйОстатокТовараНаСкладе()
	
	Если Склад.Выбран()=1 Тогда
		Если Склад.ЭтоГруппа()=1 Тогда
			глЗапросПоРезервамПоГруппамСкладов.УстПараметр(1,ТекущийЭлемент());
			глЗапросПоРезервамПоГруппамСкладов.УстПараметр(2,Склад);
			Рез=глЗапросПоРезервамПоГруппамСкладов.ВыполнитьСкалярный();
			
			глЗапросПоНедоступнымОстаткамПоГруппеСкладов.УстПараметр(1,ТекущийЭлемент());
			глЗапросПоНедоступнымОстаткамПоГруппеСкладов.УстПараметр(2,Склад);
			
			глЗапросПоОстаткамПоГруппеСкладов.УстПараметр(1,ТекущийЭлемент());
			глЗапросПоОстаткамПоГруппеСкладов.УстПараметр(2,Склад);
			Ост=глЗапросПоОстаткамПоГруппеСкладов.ВыполнитьСкалярный();
			ОстДост = Ост-Рез;
			
			Недоступно = глЗапросПоНедоступнымОстаткамПоГруппеСкладов.ВыполнитьСкалярный();
		Иначе
			
			глЗапросПоРезервам.УстПараметр(1,ТекущийЭлемент());
			глЗапросПоРезервам.УстПараметр(2,Склад);
			Рез=глЗапросПоРезервам.ВыполнитьСкалярный();
			
			Ост = Регистр.ОстаткиТоваров.СводныйОстаток(ТекущийЭлемент(),Склад,,"ОстатокТовара");
			ОстДост = Ост-Рез;
			
			Недоступно = Регистр.НедоступныеТовары.СводныйОстаток(ТекущийЭлемент(),Склад,,,"ОстатокТовара");
		КонецЕсли; 

		ОстДост=ОстДост-Недоступно;
		
		Возврат Формат(Макс(ОстДост,0),"Ч11.3");
	Иначе
		Рез=Регистр.РезервыТоваров.СводныйОстаток(ТекущийЭлемент(),,"РезервТовара");
		ОстНед=Регистр.НедоступныеТовары.СводныйОстаток(ТекущийЭлемент(),,,,"ОстатокТовара");
		Возврат Формат(Регистр.ОстаткиТоваров.СводныйОстаток(ТекущийЭлемент(),,,"ОстатокТовара")-Рез-ОстНед,"Ч11.3");
	КонецЕсли;
	
КонецФункции

Функция ВывестиРезервТовара()
	
	Если Склад.Выбран()=1 Тогда
		
		Если Склад.ЭтоГруппа()=1 Тогда
			глЗапросПоРезервамПоГруппамСкладов.УстПараметр(1,ТекущийЭлемент());
			глЗапросПоРезервамПоГруппамСкладов.УстПараметр(2,Склад);
			Рез=глЗапросПоРезервамПоГруппамСкладов.ВыполнитьСкалярный();
		Иначе
			глЗапросПоРезервам.УстПараметр(1,ТекущийЭлемент());
			глЗапросПоРезервам.УстПараметр(2,Склад);
			Рез=глЗапросПоРезервам.ВыполнитьСкалярный();
		КонецЕсли;

		Возврат формат(Рез,"Ч10.3");
	Иначе
		Возврат формат(Регистр.РезервыТоваров.СводныйОстаток(ТекущийЭлемент(),,"РезервТовара"),"Ч10.3");
	КонецЕсли;
КонецФункции

Функция ВывестиСпецРезервТовара()
	Возврат формат(Регистр.СпецЗаказы.СводныйОстаток(ТекущийЭлемент(),,"Заказано"),"Ч10.3");
КонецФункции

Функция ВывестиБроньВПутиТовара()
Перем пЗаказано;
Перем пБроньВПути;
//	пЗаказано=Регистр.ЗаказыПоставщикам.СводныйОстаток(ТекущийЭлемент(),,,,,"Количество");
	Рег1=СоздатьОбъект("Регистр.ЗаказыПоставщикамЗаявки");
	Рег1.УстановитьФильтр(ТекущийЭлемент());
	Рег1.ВыбратьИтоги();
	
	пБроньВПути=0;
	Пока (Рег1.ПолучитьИтог()=1) Цикл
		Если Рег1.ПоСчету.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
			Приращение=Рег1.Количество;
			пБроньВПути=пБроньВПути+Приращение; 
		КонецЕсли;
	КонецЦикла;
	//пБроньВПути=Регистр.ЗаказыПоставщикамЗаявки.СводныйОстаток(ТекущийЭлемент(),,,"Количество");//Регистр.ЗаказыПоставщикамЗаявки.СводныйОстаток(ТекущийЭлемент(),,"Количество");	
	Возврат формат(пБроньВПути,"Ч10.3");
КонецФункции
//**************************************
Функция ОстатокТовараНаСкладе()
	Если Склад.Выбран()=1 Тогда
		Если Склад.ЭтоГруппа()=1 Тогда
			глЗапросПоОстаткамПоГруппеСкладов.УстПараметр(1,ТекущийЭлемент());
			глЗапросПоОстаткамПоГруппеСкладов.УстПараметр(2,Склад);
			Ост=глЗапросПоОстаткамПоГруппеСкладов.ВыполнитьСкалярный();
		Иначе
			Ост = Регистр.ОстаткиТоваров.СводныйОстаток(ТекущийЭлемент(),Склад,,"ОстатокТовара");
		КонецЕсли;
		Возврат Формат(Ост,"Ч11.3");
	Иначе
		Возврат Формат(Регистр.ОстаткиТоваров.СводныйОстаток(ТекущийЭлемент(),,,"ОстатокТовара"),"Ч11.3");
	КонецЕсли;
КонецФункции                   

//**************************************
Функция ЗаказаноТовараНаСкладах()
	
	Возврат Формат(	Регистр.ЗаказыПоставщикам.СводныйОстаток(ТекущийЭлемент(),,,,,"Количество"),"Ч11.3");
	
КонецФункции  

Функция ВпутиТовараНаСкладах()
	
	Возврат Формат(	Регистр.ТоварыВПути.СводныйОстаток(ТекущийЭлемент(),,,,"Количество"),"Ч11.3");
	
КонецФункции

//******************************************************
Процедура Печать()
	ВТ=0;
	ШТ=0;
	КолТов=0; // Количество товаров в списке
	//  Создание Таблицы для выходного отчета
	
	ВыбПоставщик=СоздатьОбъект("Справочник.Контрагенты");
	спрП=СоздатьОбъект("Справочник.Контрагенты");
	Если ПечПоПоставщику=1 Тогда
		Запрос=СоздатьОбъект("Запрос");
		ТекстЗапроса="//{{ЗАПРОС(Поставщики)
		|Товар = Справочник.Номенклатура.ТекущийЭлемент;
		|Поставщик = Справочник.Номенклатура.Поставщик;
		|Группировка Поставщик упорядочить по Поставщик.ПоАлфавиту без групп;
		|";//}}ЗАПРОС
		
		
		ВыбТовар=ТекущийЭлемент();
		Если ВыбТовар.Уровень()=1 Тогда
		Иначе    
			ВыбТоварР=ВыбТовар.Родитель;
			ТекстЗапроса=ТекстЗапроса+"Условие (Товар в ВыбТоварР);";
		КонецЕсли;
		
		Если Запрос.Выполнить(ТекстЗапроса)=0 Тогда
			Сообщить("Проблема с запросом!");
			Возврат;
		КонецЕсли;
		
		СП=СоздатьОбъект("СписокЗначений");
		Пока Запрос.Группировка(1)=1 Цикл
			СП.ДобавитьЗначение(Запрос.Поставщик);
		КонецЦикла;                                
		
		СП.ВыбратьЗначение(ВыбПоставщик,"Выберите поставщика...",,,0);
		
		Заг1="Piegadўtajs "+ВыбПоставщик;
	КонецЕсли;					
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(СписокТоваровДляПечати)
	|Товар = Справочник.Номенклатура.ТекущийЭлемент;
	|Поставщик = Справочник.Номенклатура.Поставщик;
	|БазЕд = Справочник.Номенклатура.БазоваяЕдиницаИзмерения;
	|Код = Справочник.Номенклатура.Код;
	|НаименованиеДляЦенника = Справочник.Номенклатура.НаименованиеДляЦенника;
	|Наименование = Справочник.Номенклатура.Наименование;
	|НаименованиеEE = Справочник.Номенклатура.НаименованиеEE;
	|НаименованиеLT = Справочник.Номенклатура.НаименованиеLT;
	|НаименованиеАнгл = Справочник.Номенклатура.НаименованиеАнгл;
	|СтранаПроизводитель = Справочник.Номенклатура.СтранаПроизводитель;
	|КодДляРозницы = Справочник.Номенклатура.КодДляРозницы;
	|ШтрихКод = Справочник.Номенклатура.ШтрихКод;
	|Группировка Товар упорядочить по Товар.Код;
	|"//}}ЗАПРОС
	;
	
	
	ВыбТовар=ТекущийЭлемент();
	Если ВыбТовар.Уровень()=1 Тогда
		Заг="Pa visўm prec§m.";
	Иначе
		//		Тов.ВключатьПодчиненные(1);
		//		Тов.ИспользоватьРодителя(ВыбТовар.Родитель);
		ВыбТоварР=ВыбТовар.Родитель;
		ТекстЗапроса=ТекстЗапроса+"Условие (Товар в ВыбТоварР);";
		Заг="PreҐu grupa "+ВыбТовар.Родитель.Наименование;
	КонецЕсли;
	
	Если (ПечПоПоставщику=1)  Тогда
		ТекстЗапроса=ТекстЗапроса+"Условие (Поставщик = ВыбПоставщик);";
	КонецЕсли;
	
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЧислоСтрок=0;
	Таб=СоздатьОбъект("Таблица");
	
	Если глКодСтраныПользователя<>"LV" Тогда
		Таб.ИсходнаяТаблица("ТаблицаРус");
	КонецЕсли;
	Таб.ВывестиСекцию("Отчет|Pamata");
	Если ПечШтрихКод=1 Тогда
		Таб.ПрисоединитьСекцию("Отчет|Papildus");
	КонецЕсли;
	
	Если ПечКодРоз=1 Тогда
		Таб.ПрисоединитьСекцию("Отчет|ДляРозницы");
	КонецЕсли;
	
	// Подготовка к заполнению выходных форм данными запроса
	
	// Заполнение полей "Заголовок"
	
	Пока Запрос.Группировка(1) = 1 Цикл
		Тов=Запрос.Товар;
		
		Если глТоварАрхивный(Тов)=1 Тогда
			Продолжить;
		КонецЕсли;
		// Заполнение полей Товар
		//	Тов.ВыбратьЭлементы();
		//	Пока Тов.ПолучитьЭлемент()>0 Цикл
		Если Тов.ЭтоГруппа()=1 тогда
			Таб.ВывестиСекцию("Группа|Pamata");
			Оживить(1);
		Иначе                      
			
			ОснКат=?(глФирма=Константа.ОсновнаяФирма, Константа.ОсновнаяКатегорияЦены,глФирма.ОсновнаяКатегорияЦены);
			
			Если выбВалюта.Выбран() = 0 Тогда
				РознЦена = ЦенаТовараПоКатегорииДляТовара(Тов,Константа.РозничнаяКатегорияЦены);
				ЦенаБезНДС = ЦенаТовараПоКатегорииДляТовара(Тов,ОснКат);
			Иначе
				РознЦена = ЦенаТовараПоКатегорииДляТовара(Тов,Константа.РозничнаяКатегорияЦены,выбВалюта,КурсДляВалюты(выбВалюта,РабочаяДата()));
				ЦенаБезНДС = ЦенаТовараПоКатегорииДляТовара(Тов,ОснКат,выбВалюта,КурсДляВалюты(выбВалюта,РабочаяДата()));
			КонецЕсли;
			
			НДС = 1 + ПроцентНДС(Тов.СтавкаНДС)/100;
			РознЦенаСНДС=РознЦена*НДС;
			
			Таб.ВывестиСекцию("Товар|Pamata");
			
			Если ПечШтрихКод=1 Тогда
				Таб.ПрисоединитьСекцию("Товар|Papildus");
			КонецЕсли;
			Если ПечКодРоз=1 Тогда
				Таб.ПрисоединитьСекцию("Товар|ДляРозницы");
			КонецЕсли;
			
			Оживить(1);
		КонецЕсли;
	КонецЦикла;
	ВТ=Таб.ВысотаТаблицы();
	ШТ=Таб.ШиринаТаблицы();
	Таб.ПовторятьПриПечатиСтроки(4,4);
	Таб.ВывестиСекцию("Итог");
	//Вызов выходного отчета в окно просмотра и редактирования.
	Таб.Опции(0,0,4,0,ПарСтрСпр);
	таб.ПараметрыСтраницы(1,,,,,,,,,1);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Список товаров по каталогу","");
	ВыбТовар=0;
КонецПроцедуры


//******************************************************
Процедура ПечатьПоРезервам()
	
	тов=ТекущийЭлемент();
	заг="---";              
	ЧислоСтрок=0;
	
	
	
	ИтогоРезерв=Регистр.РезервыТоваров.СводныйОстаток(ТекущийЭлемент(),,"РезервТовара");
	
	//  Создание Таблицы для выходного отчета
	Таб=СоздатьОбъект("Таблица");   
	Таб.ИсходнаяТаблица("Резервы");
	Таб.ВывестиСекцию("Шапка");

	Рег1=СоздатьОбъект("Регистр.РезервыТоваров");
	Рег1.УстановитьФильтр(ТекущийЭлемент());
	Рег1.ВыбратьИтоги();
	
	Пока (Рег1.ПолучитьИтог()=1) Цикл
		
		Док=Рег1.ПоСчету;
		
		КлиентРез=Рег1.ПоСчету.Клиент;
		
		Приращение=Рег1.РезервТовара;

		Если Док.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
			Таб.ВывестиСекцию("СтрокаБронь");  
		Иначе
			Таб.ВывестиСекцию("Строка");  
		КонецЕсли;
		
		Оживить(1);
	КонецЦикла;
	
	//	ЗафиксироватьТранзакцию();	
	
	Таб.ВывестиСекцию("Кончик");	
	
	//Вызов выходного отчета в окно просмотра и редактирования.
	Таб.Опции(0,0,4,0);
	Таб.Защита(1);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Отчет о резервировании товаров","");
	
КонецПроцедуры								

//******************************************************
Процедура ПечатьПоСпецРезервам()
	
	тов=ТекущийЭлемент();
	заг="---";              
	ЧислоСтрок=0;
	
	ИтогоРезерв=Регистр.СпецЗаказы.СводныйОстаток(ТекущийЭлемент(),,"Заказано");
	
	//  Создание Таблицы для выходного отчета
	Таб=СоздатьОбъект("Таблица");   
	Таб.ИсходнаяТаблица("РезервыОжП");
	Таб.ВывестиСекцию("Шапка");

	Рег1=СоздатьОбъект("Регистр.СпецЗаказы");
	Рег1.УстановитьФильтр(ТекущийЭлемент());
	Рег1.ВыбратьИтоги();
	
	Пока (Рег1.ПолучитьИтог()=1) Цикл
		
		Док=Рег1.ПоСчету;
		
		КлиентРез=Рег1.ПоСчету.Клиент;
		
		Приращение=Рег1.Заказано;
		
		Таб.ВывестиСекцию("Строка");  
		
		Оживить(1);
	КонецЦикла;
	Таб.ВывестиСекцию("Кончик");
	
	Таб.ВывестиСекцию("ШапкаБронь");
	
	Рег1=СоздатьОбъект("Регистр.ЗаказыПоставщикамЗаявки");
	Рег1.УстановитьФильтр(ТекущийЭлемент());
	Рег1.ВыбратьИтоги();
	
	Пока (Рег1.ПолучитьИтог()=1) Цикл
		Если Рег1.ПоСчету.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
			Док=Рег1.ПоСчету;
			КлиентРез=Рег1.ПоСчету.Клиент;
			Приращение=Рег1.Количество;
			Таб.ВывестиСекцию("СтрокаБронь");  
		КонецЕсли;
		Оживить(1);
	КонецЦикла;	
	
	
	
	//Вызов выходного отчета в окно просмотра и редактирования.
	Таб.Опции(0,0,4,0);
	Таб.Защита(1);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Отчет о спецрезервах товаров","");
	
КонецПроцедуры								

//******************************************************
Процедура ПечатьПоЗаказам()
	
	ЧислоСтрок=0;
	
	заг="---";
	
	ИтогоЗаказ=	Регистр.ЗаказыПоставщикам.СводныйОстаток(ТекущийЭлемент(),,,,,"Количество");
	ИтогоЗаказВпути=Регистр.ТоварыВПути.СводныйОстаток(ТекущийЭлемент(),,,,"Количество");
	
	тов=ТекущийЭлемент();
	//  Создание Таблицы для выходного отчета
	Таб=СоздатьОбъект("Таблица");  
	Если НазваниеНабораПрав()="СпециалистПоПродаже" Тогда
		Таб.ИсходнаяТаблица("ЗаказыУрез");
	Иначе
		Таб.ИсходнаяТаблица("Заказы");
	КонецЕсли;
	
	Таб.ВывестиСекцию("Шапка");                      
	
	Рег1=СоздатьОбъект("Регистр.ЗаказыПоставщикам");
	Рег1.УстановитьФильтр(ТекущийЭлемент(),,,);
	рег1.обратныйПорядок(1);
	
	Рег1.ВыбратьИтоги();
	
	Рег2=СоздатьОбъект("Регистр.ТоварыВПути");
	
	
	КлиентСписок=СоздатьОбъект("СписокЗначений");
	
	Пока Рег1.ПолучитьИтог()=1 Цикл
	
		Рег2.УстановитьФильтр(ТекущийЭлемент(),,Рег1.ПоЗаказу,);
		Рег2.ВыбратьИтоги();
		Рег2.ПолучитьИтог();
		
//		Док=Рег1.ПоЗаказу;
		Док=Рег2.Док;
		
		Если Док.Выбран()=0 Тогда
			л_ДокЗаказа=Рег1.ПоЗаказу;
			Док=л_ДокЗаказа.ДокОжидаемаяПоставка;
		КонецЕсли;

		Если ПустоеЗначение(Док)=0 Тогда
			поз=Найти(Док.Автор," ");
			Автор=Лев(Док.Автор,поз-1)+" "+Лев(Сред(Док.Автор,поз+1),2);
		Иначе
			Автор="";
		КонецЕсли;
		впути=Регистр.ТоварыВПути.СводныйОстаток(ТекущийЭлемент(),,рег1.ПоЗаказу,,"Количество");
		ожприход=Рег2.СрокПоставки;
		Если ПустоеЗначение(ожприход)=1 Тогда
			датаотгрузки=ожприход;
		Иначе
			датаотгрузки=ожприход+рег1.ПоЗаказу.Клиент.ДнейНаПодготовку;
		КонецЕсли;	
		
		
		Приращение=Рег1.Количество;
		датаП=Рег1.СрокПоставки;
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;
	
	Таб.ВывестиСекцию("Кончик");	
	
	//Вызов выходного отчета в окно просмотра и редактирования.
	Таб.Опции(0,0,4,0,ПарСтрОтчДлинн);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Отчет о заказе товара","");
	
КонецПроцедуры

Процедура ПечатьПоЗаказамБрони()
	
	ЧислоСтрок=0;
	
	заг="---";
	
	ИтогоЗаказ=	Регистр.ЗаказыПоставщикам.СводныйОстаток(ТекущийЭлемент(),,,,,"Количество");
	ИтогоБрони= Регистр.ЗаказыПоставщикамЗаявки.СводныйОстаток(ТекущийЭлемент(),,,"Количество");
	
	
	тов=ТекущийЭлемент();
	//  Создание Таблицы для выходного отчета
	Таб=СоздатьОбъект("Таблица");   
	Таб.ИсходнаяТаблица("ЗаказыБронь");
	Таб.ВывестиСекцию("Шапка");                      
	
	Рег1=СоздатьОбъект("Регистр.ЗаказыПоставщикам");
	Рег1.УстановитьФильтр(ТекущийЭлемент(),,,);
	рег1.обратныйПорядок(1);
	Рег1.ВыбратьИтоги();
	
	КлиентСписок=СоздатьОбъект("СписокЗначений");
	
	Пока Рег1.ПолучитьИтог()=1 Цикл
		

		
		Док=Рег1.ПоЗаказу;
		Если ПустоеЗначение(Док)=0 Тогда
			поз=Найти(Док.Автор," ");
			Автор=Лев(Док.Автор,поз-1)+" "+Лев(Сред(Док.Автор,поз+1),2);
		Иначе
			Автор="";
		КонецЕсли;
		Приращение=Рег1.Количество;
		датаП=Рег1.СрокПоставки;
		Таб.ВывестиСекцию("Строка");
		
		//БроньВПути
		Рег2=СоздатьОбъект("Регистр.ЗаказыПоставщикамЗаявки");
		Рег2.УстановитьФильтр(ТекущийЭлемент(),Рег1.ПоЗаказу);
		рег2.обратныйПорядок(1);
		Рег2.ВыбратьИтоги();
		
		Пока Рег2.ПолучитьИтог()=1 Цикл
			Док2=Рег2.ПоСчету;
			Приращение2=-Рег2.Количество;
			датаП2=Док2.ДатаПоставки;
			Таб.ВывестиСекцию("СтрокаБрони");
		КонецЦикла;	
			//БроньВПути		
			
	КонецЦикла;
	
	Таб.ВывестиСекцию("Кончик");	
	
	//Вызов выходного отчета в окно просмотра и редактирования.
	Таб.Опции(0,0,4,0,ПарСтрОтчДлинн);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Отчет о заказе товара","");
	
КонецПроцедуры


//*********************************
Процедура ПечатьПоОборотам()
	заг="---";    
	ИтогоПрих=0;
	итогоРасх=0;
	тов=ТекущийЭлемент();
	ЧислоСтрок=0;

	Меню=СоздатьОбъект("СписокЗначений");
    Меню.ДобавитьЗначение(1,"По всем");
	Меню.ДобавитьЗначение(2,"По клиенту");
	                             
	Выб=0;
	Если Меню.ВыбратьЗначение(Выб, "",,, 1) = 0 Тогда
		Возврат;
	КонецЕсли;

	Если Выб=2 Тогда
		КлиентВыб=СоздатьОбъект("Справочник.Контрагенты");		
		Если КлиентВыб.Выбрать("Выберите клиента...","")<>1 Тогда
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;
	
	ДатаКонца=ПолучитьДатуТА();
	ДатаНачала=ДатаКонца-1;
	
	Если ВвестиПериод(ДатаНачала,ДатаКонца,"Выберите период отчета")<>1 Тогда
		Возврат;
	КонецЕсли;
	
	
	Таб=СоздатьОбъект("Таблица");   
	Таб.ИсходнаяТаблица("Обороты");
	Таб.ВывестиСекцию("Шапка");                      
	
	//	НачатьТранзакцию();
	//Талица движений
	ТД=СоздатьОбъект("ТаблицаЗначений");
	ТД.НоваяКолонка("НС","Число",17,0);
	ТД.НоваяКолонка("Документ","Документ");
	ТД.НоваяКолонка("Склад","Справочник.Склады");
	ТД.НоваяКолонка("СрокРеализ","Дата");
	ТД.НоваяКолонка("Приход","Число",17,3);
	ТД.НоваяКолонка("Расход","Число",17,3);
	ТД.НоваяКолонка("Остаток","Число",17,3);
	ТД.НоваяКолонка("Партнер");
	
	ВремРегистр=СоздатьОбъект("Регистры");
	Рег=ВремРегистр.ПартииТоваров;
	Рег.ВременныйРасчет();
	Рег.УстановитьЗначениеФильтра("Товар",ТекущийЭлемент());
	
	Если Склад.Выбран()=1 Тогда
		Рег.УстановитьЗначениеФильтра("Склад",Склад,2);
	КонецЕсли;	
	
	СписСтатусов=СоздатьОбъект("СписокЗначений");
	СписСтатусов.ДобавитьЗначение("");
	СписСтатусов.ДобавитьЗначение(Купленный);
	СписСтатусов.ДобавитьЗначение(Принятый);
	СписСтатусов.ДобавитьЗначение(Произведенный);

	
	Рег.УстановитьЗначениеФильтра("Статус",СписСтатусов,2);
	
	ВремРегистр.РассчитатьРегистрыНа(ДатаНачала);

	Если ДатаКонца>=ПолучитьДатуТА() Тогда
		Рег.ВыбратьДвиженияСОстатками(0);
	Иначе
		Рег.ВыбратьДвиженияСОстатками(ДатаКонца);
	КонецЕсли;
	
	//	Рег.ОбратныйПорядок(1);
	
	НС=0;
	Пока  (Рег.ПолучитьДвижение()>0) Цикл
		
		//		Рег.Товар=ТекущийЭлемент();
		//		Рег.ОстаткиПолучить();
		
		Ост=Рег.СводныйОстаток(,ТекущийЭлемент(),,,,,,,"ОстатокТовара");
		СкладРег = Рег.Склад;
		
		Если Склад.Выбран()=1 Тогда
			Если Склад.ЭтоГруппа()=1 Тогда
				Если СкладРег.ПринадлежитГруппе(Склад)=0 Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли СкладРег<>Склад Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ПродСтоим=Рег.ПродСтоимость;
		
		Если Рег.Приход=1 Тогда
			прих=Рег.ОстатокТовара;
			Расх=0;
			Пприх=""+Рег.ОстатокТовара;
			Прасх="";
		иначе      
			прих=0;
			Расх=Рег.ОстатокТовара;
			Пприх="";
			Прасх=""+Рег.ОстатокТовара;
		КонецЕсли;               

		текДок=Рег.ТекущийДокумент();

		Если Выб=2 Тогда
			
			КлиентФильтр = КлиентВыб.ТекущийЭлемент();
			Если глЕстьРеквизитШапки("Клиент",текДок.Вид())=1 Тогда
				Если (текДок.Клиент<>КлиентФильтр) И (текДок.Клиент.КлГруппа<>КлиентФильтр) Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НС=НС+1;
		ТД.НоваяСтрока();
		ТД.НС=НС;
		ТД.Документ=Рег.ТекущийДокумент();
		ТД.Склад=Рег.Склад;
		ТД.СрокРеализ=Рег.СрокРеализации;
		ТД.Приход=Прих;
		ТД.Расход=Расх;
		ТД.Остаток=Ост;
		
		Если глЕстьРеквизитШапки("КатегорияСписания",текДок.Вид())=1 Тогда 
			ТД.Партнер=Метаданные.Перечисление("КатегорииСписания").Значение(текДок.КатегорияСписания.Идентификатор()).Комментарий;
		ИначеЕсли глЕстьРеквизитШапки("Клиент",текДок.Вид())=1 Тогда
			ТД.Партнер=текДок.Клиент;
		Иначе
			ТД.Партнер=ПолучитьПустоеЗначение("Справочник.Контрагенты");
		КонецЕсли;
		
	КонецЦикла;
	
	ТД.Сортировать("-НС");	
	
	ТД.ВыбратьСтроки();
	Пока ТД.ПолучитьСтроку()=1 Цикл
		
		Док=ТД.Документ; 
		ПечДок=ПеревестиНаГосЯзык(Док.Вид())+" "+Док.ДатаДок+" Nr. "+СокрП(Док.НомерДок)+"; ";
		ДТ=док.ДатаДок;
		
		Таб.ВывестиСекцию("Товар");  
		Оживить(1);
		
	КонецЦикла;
	
	Таб.ВывестиСекцию("Итог");	
	
	//Вызов выходного отчета в окно просмотра и редактирования.
	
	Таб.Опции(0,0,0,0,ПарСтрОтчШирок);   
	Таб.параметрыСтраницы(1,100,1,2,2,5,5,2,2,1);
	
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Отчет об оборотах товаров","");
	
КонецПроцедуры

//*********************************
Процедура ПечатьПоСкладам() 
	
	//  Создание Таблицы для выходного отчета
	тов=ТекущийЭлемент();
	
	Факт=0;
	Резерв=0; 
	ИтогоФакт=0;
	ИтогоРеал=0;
	ИтогоРезерв=0;         
	ЧислоСтрок=0;
	
	
	склады_=СоздатьОбъект("Справочник.МестаХранения");
	
	Таб=СоздатьОбъект("Таблица");
	
	Таб.ИсходнаяТаблица("ПоСкладам");
	
	Склады=СоздатьОбъект("ТаблицаЗначений");
	Склады.НоваяКолонка("Ссылка","Справочник.МестаХранения");

	Склады.НоваяКолонка("Наименование","Строка",40);
	Склады.НоваяКолонка("Сроки","Строка",120);
	Склады.НоваяКолонка("Факт","Число",12,3);
	Склады.НоваяКолонка("Резерв","Число",12,3);
	Склады.НоваяКолонка("Подг","Число",12,3);		
	
	Таб.ВывестиСекцию("Шапка");
	
	
	
	//Резерв=Регистр.РезервыТоваров.СводныйИтог(ТекущийЭлемент(),,"РезервТовара"); 
	ТекстЗапроса = "SELECT ПартииТоваровОстатки.Склад [Склад $Справочник.МестаХранения]
	|					, NullIf(ПартииТоваровОстатки.СрокРеализации, '17530101') [СрокРеализации $Дата]
	|					, ПартииТоваровОстатки.ПрихДокумент [ПрихДокумент $Документ]
	|					, Жур.IDDOCDEF [ПрихДокумент_вид $ВидДокумента]
	|					, ПартииТоваровОстатки.ОстатокТовараОстаток Ост
	|				FROM $РегистрОстатки.ПартииТоваров(,,
	|													(Фирма = :Фирма)
	|													AND (Товар = :Товар)
	|													AND (Статус <> :Статус),
	|													(Склад, ПрихДокумент, СрокРеализации),
	|													ОстатокТовара) AS ПартииТоваровОстатки
	|				INNER JOIN _1sjourn Жур (NOLOCK) ON Жур.IDDOC = RIGHT(ПартииТоваровОстатки.ПрихДокумент,9)
	|				ORDER BY NullIf(ПартииТоваровОстатки.СрокРеализации, '17530101')
//	|				WHERE ПартииТоваровОстатки.ОстатокТовараОстаток>0 -- не выводим отрицательные остатки 
	|";
	
	
	Запрос	= СоздатьОбъект("ODBCRecordSet");
	Запрос.УстановитьТекстовыйПараметр("Фирма",Константа.ОсновнаяФирма);
	Запрос.УстановитьТекстовыйПараметр("Товар",ТекущийЭлемент());
	Запрос.УстановитьТекстовыйПараметр("Статус",Отданный);
	итСроки = СоздатьОбъект("ИндексированнаяТаблица");
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,итСроки);
	
	итПартии = СоздатьОбъект( "ИндексированнаяТаблица" );
	итПартии.Загрузить(итСроки);
	итПартии.Группировать("иСклад:*Склад; ПрихДокумент:ПрихДокумент;","Ост");

//	итСроки.Показать();	
	итСроки.Свернуть("Склад,СрокРеализации","Ост");
	итСроки.Группировать("иСклад:*Склад; СрокРеализации:СрокРеализации;","Ост");



	склады_.ВыбратьЭлементы();
	Пока склады_.ПолучитьЭлемент()>0 Цикл 
		
		Факт=Регистр.ОстаткиТоваров.СводныйОстаток(ТекущийЭлемент(),Склады_.текущийЭлемент(),,"ОстатокТовара");
		ОстНед=Регистр.НедоступныеТовары.СводныйОстаток(ТекущийЭлемент(),Склады_.текущийЭлемент(),,,"ОстатокТовара");
		
		печСроки = "";
		Если итСроки.НайтиСтроку("иСклад",Склады_.текущийЭлемент(),,1)>0 Тогда
			итСрокиРеализации = итСроки.тзПотомки;
			итСрокиРеализации.ВыбратьСтроки();
			Пока итСрокиРеализации.ПолучитьСтроку() = 1 Цикл
				Если итСрокиРеализации.Ост<=0 Тогда
					Продолжить;
				КонецЕсли;
				Если ПустоеЗначение(печСроки)=0 Тогда
					печСроки=печСроки+РазделительСтрок;
				КонецЕсли;
				печСроки=печСроки+""+итСрокиРеализации.СрокРеализации+" - "+итСрокиРеализации.Ост;
			КонецЦикла;
		КонецЕсли;
		
		глЗапросПоРезервам.УстПараметр(1,ТекущийЭлемент());
		глЗапросПоРезервам.УстПараметр(2,Склады_.текущийЭлемент());
		Рез=глЗапросПоРезервам.ВыполнитьСкалярный();
		
		Если Факт<>0 Тогда
			Склады.НоваяСтрока();
			Склады.Ссылка = склады_.ТекущийЭлемент();
			Склады.Наименование=Склады_.Наименование;
			Склады.Сроки=печСроки;
			Склады.Факт=Факт;
			Склады.Резерв=Рез;
			Склады.Подг=ОстНед;
		КонецЕсли;
		
	КонецЦикла;
	
	Склады.Сортировать("-Факт");
	
	Склады.ВыбратьСтроки();
	
	Пока Склады.ПолучитьСтроку()=1 Цикл
		
//		Склады.Резерв=?(Резерв>Склады.Факт,Мин(Склады.Факт,0),Резерв);
		
		
		//Резерв=Резерв-Склады.Резерв;
		Если Склады.Ссылка.ТипСклада = Перечисление.ТипыСкладов.СкладПредПродПодготовки Тогда
			печДоступДаты = "";
			Если итПартии.НайтиСтроку("иСклад",Склады.Ссылка,,1)>0 Тогда
				итПриходы = итПартии.тзПотомки;
				итПриходы.ВыбратьСтроки();
				Пока итПриходы.ПолучитьСтроку() = 1 Цикл
					Если ПустоеЗначение(печДоступДаты)=0 Тогда
						печДоступДаты=печДоступДаты+РазделительСтрок;
					КонецЕсли;
					Если итПриходы.ПрихДокумент.Вид()="ПриходнаяНакладная" Тогда
						печДоступДаты=печДоступДаты+""+Строка(итПриходы.ПрихДокумент.ДатаДок+итПриходы.ПрихДокумент.Клиент.ДнейНаПодготовку)+" - "+итПриходы.Ост;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			
			ПечДоступно = печДоступДаты;
		Иначе
			ПечДоступно = Склады.Факт-Склады.Резерв-Склады.Подг;
		КонецЕсли;
		
		
		ИтогоФакт=ИтогоФакт+Склады.Факт;
		
		Таб.ВывестиСекцию("Строка");
		
		Оживить(1);
	КонецЦикла;
	
	//выводим остатки по филиалам
	БазаДанных = СоздатьОбъект("ODBCDataBase");
	Фирмы = СоздатьОбъект("Справочник.Фирмы");
	Фирмы.ВыбратьЭлементы();
	Пока Фирмы.ПолучитьЭлемент() = 1 Цикл
		
		Если Фирмы.ТекущийЭлемент()=Константа.ОсновнаяФирма Тогда
			Продолжить;
		КонецЕсли;
		
		Если Фирмы.ПометкаУдаления()=1 Тогда
			Продолжить;
		КонецЕсли;
		
		ПечФилиал = Фирмы.Наименование;
		Если ПустоеЗначение(Фирмы.СерверБД)=0 Тогда

			ПечФакт = 0;
			Попытка
				БазаДанных.ПрисоединитьИБ(СокрЛП(Фирмы.КаталогКонфигурации),"MOD","exchange");
				Запрос.УстБД(БазаДанных);
				
				пСервер = СокрЛП(Фирмы.СерверБД);
				пБаза	= СокрЛП(Фирмы.ИмяБД);
				ТекстЗапроса = "SELECT ПартииТоваровОстатки.ОстатокТовараОстаток
				|				FROM $РегистрОстатки.ПартииТоваров(,
				|													INNER JOIN $Справочник.Фирмы AS Фирмы With (NOLOCK) ON Фирма = Фирмы.ID AND Фирмы.ISMARK = 0 AND $Фирмы.IDD = :ФирмаИДД
				|													INNER JOIN $Справочник.МестаХранения AS МестаХранения With (NOLOCK) ON Склад = МестаХранения.ID
				|													INNER JOIN $Справочник.Номенклатура AS Номенклатура With (NOLOCK) ON Товар = Номенклатура.ID,
				|													(МестаХранения.DESCR NOT LIKE 'VIRTUAL%') AND ($Номенклатура.IDD = :ТоварИДД),Товар,ОстатокТовара) AS ПартииТоваровОстатки
				|";
				Запрос.УстановитьТекстовыйПараметр("ФирмаИДД",СокрЛП(Фирмы.IDD));
				Запрос.УстановитьТекстовыйПараметр("ТоварИДД",СокрЛП(ТекущийЭлемент().IDD));
				//Запрос.Отладка(1);
				ПечФакт = Запрос.ВыполнитьСкалярный(ТекстЗапроса);
				
			Исключение
			КонецПопытки;	
			
			Если ПечФакт>0 Тогда
				Таб.ВывестиСекцию("СтрокаФилиал");
			КонецЕсли;
		КонецЕсли;
		
		
	КонецЦикла;
	
	
	ВТ=Таб.ВысотаТаблицы();
	ШТ=Таб.ШиринаТаблицы();
	Таб.ПовторятьПриПечатиСтроки(4,4);
	
	
	Таб.ВывестиСекцию("Кончик");
	//Вызов выходного отчета в окно просмотра и редактирования.
	Таб.Опции(0,0,4,0,ПарСтрСпр);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Наличие товаров у подразделений","");
	ВыбТовар=0;
КонецПроцедуры 
////_____________________________________________________________________________
//Функция РозничнаяЦенаТовара(ВыбТовар)
//    Спр=СоздатьОбъект("Справочник.Цены");
//	Спр.ИспользоватьВладельца(ВыбТовар);
//	Если Спр.НайтиПоРеквизиту("КатегорияЦены",Константа.РозничнаяКатегорияЦены,0)=0 Тогда
//		Возврат 0;
//	КонецЕсли;
//	Возврат Пересчет(Спр.Цена,Спр.Валюта,РабочаяДата(),Константа.БазоваяВалюта,рабочаяДата());
//КонецФункции //РозничнаяЦенаТовара
//**********************************************************
Процедура кнИзмНаим()
	Путь = КаталогИБ() + "ExtForms\ИзмНаименования.ert";
	Если ФС.СуществуетФайл( Путь ) = 0 Тогда
		Сообщить("Ошибка запуска обработки.","!");
		Сообщить("Не найден файл "+Путь,"I");
		Возврат;
	КонецЕсли;
	ОткрытьФорму( "Обработка", ТекущийЭлемент(), Путь );
КонецПроцедуры
//**********************************************************
Процедура кнСпецЦены() //по кнопке
	сп = СоздатьОбъект( "СписокЗначений" );
	сп.ДобавитьЗначение(ТекущийЭлемент(),"Товар");
	сп.ДобавитьЗначение(1,"Вариант");
	сп.ДобавитьЗначение(1,"ЦенаБаз");
	сп.ДобавитьЗначение(1,"ЦенаСоСк");
	ОткрытьФорму("Отчет.СкидкиКлиентовНов",сп);
	//    Перем ВыбТовар;  
	//	Перем СписокТовГрупп;
	//
	//	Если ЭтоГруппа()=1 Тогда
	//	    Возврат;
	//	КонецЕсли;
	//	
	//	Тов=ТекущийЭлемент();
	//	ВыбТовар=ТекущийЭлемент();
	//
	//	СписокТовГрупп=СоздатьОбъект("СписокЗначений");
	//	СписокТовГрупп.ДобавитьЗначение(ВыбТовар);
	//	Пока Тов.Уровень()>1 Цикл
	//	    СписокТовГрупп.ДобавитьЗначение(Тов.Родитель);
	//		Тов=Тов.Родитель;
	//	КонецЦикла;
	//	
	//	
	//	Таб=СоздатьОбъект("Таблица");
	//	
	//	Таб.ИсходнаяТаблица("СпецЦены");
	//		
	//	Таб.ВывестиСекцию("Шапка"); 
	//	
	//	Запрос=СоздатьОбъект("Запрос");
	//	
	//	ТекстЗапроса=
	//	"//{{ЗАПРОС(СпецЦены)
	//	|СпецЦена = Справочник.КлиентСкидки.ТекущийЭлемент;
	//	|Скидка = Справочник.КлиентСкидки.ПроцентСкидкиРозн;
	//	|ТовГруппа = Справочник.КлиентСкидки.ТовГруппа;
	//	|Клиент = Справочник.КлиентСкидки.Владелец;
	//	|КлГруппа = Справочник.КлиентСкидки.Владелец.КлГруппа;
	//	|Группировка КлГруппа упорядочить по КлГруппа.ПоАлфавиту без групп;
	//	|Группировка Клиент упорядочить по Клиент.ПоАлфавиту без групп;
	//	|Группировка ТовГруппа без групп;
	//	|Условие((ВыбТовар.ПринадлежитГруппе(ТовГруппа)=1) ИЛИ (ВыбТовар=ТовГруппа));
	//	|"//}}ЗАПРОС
	//    ;
	//     
	//	Если Запрос.Выполнить(ТекстЗапроса)=0 Тогда
	//		Возврат;
	//	КонецЕсли;	
	//	
	//	СпецЦены=СоздатьОбъект("ТаблицаЗначений");
	//
	//	Запрос.Выгрузить(СпецЦены,1);
	//	
	//	//СпецЦены.НоваяКолонка("Клиент",,40);
	//	//СпецЦены.НоваяКолонка("Скидка","Число",15,2);
	//	//СпецЦены.НоваяКолонка("Цена","Число",15,2);
	//                                        
	//	
	//	ВыбТовар.ИспользоватьДату(РабочаяДата());
	//                         
	//	РознЦена_=ЦенаТовараПоКатегорииДляТовара(ВыбТовар,Константа.РозничнаяКатегорияЦены);//РозничнаяЦенаТовара(ВыбТовар);
	//
	//	Пока Запрос.Группировка(1)=1 Цикл             
	//		    
	//		рез=0;
	//		
	//		ПечРознЦена=Формат(РознЦена_,"Ч15.2");
	//		
	//		СпецЦены.НайтиЗначение(Запрос.КлГруппа,рез,"Клиент");
	//		Если (рез>0) и (ПустоеЗначение(Запрос.КлГруппа)=0) Тогда
	//			СпецЦены.ПолучитьСтрокуПоНомеру(рез+1);
	// 		    Скидка_=Шаблон("[Число(СпецЦены.Скидка) #Ч11.2]");
	//			Цена_=Формат(РознЦена_*(100-Число(СпецЦены.Скидка))/100,"Ч15.2");
	//		Иначе
	//			Скидка_="";
	//			Цена_="";
	//			ПечРознЦена="";
	//		КонецЕсли;
	//
	//		ПечРознЦена=Формат(РознЦена_,"Ч15.2");
	//		
	//		Таб.ВывестиСекцию("КлГруппа");
	//		Пока Запрос.Группировка(2)=1 Цикл
	//			рез=0;
	//			СпецЦены.НайтиЗначение(Запрос.Клиент,рез,"КлГруппа");
	//			
	//			Если (Запрос.КлГруппа.Выбран()=0) И (рез>0) Тогда
	//				Продолжить;			    
	//			КонецЕсли;
	//			Пока Запрос.Группировка(3)=1 Цикл
	//				 Клиент_=Запрос.Клиент;            
	//				 Скидка_=Шаблон("[Число(Запрос.Скидка) #Ч11.2]");
	//				 Цена_=Формат(РознЦена_*(100-Число(Запрос.Скидка))/100,"Ч15.2");
	//				Таб.ВывестиСекцию("Строка");
	//			КонецЦикла;  
	//		КонецЦикла;  
	//	КонецЦикла;  
	//	
	//	Таб.Опции(0,0,4,0);
	//	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	//	Таб.ТолькоПросмотр(1);
	//	Таб.Показать("Спец. цены товаров у клиентов","");
	//	
КонецПроцедуры


//-----------------------------------------------
Процедура ИнфОбОстатках()
	Если ТекущийЭлемент().ЭтоГруппа()=0 Тогда
		ОстатокПоВсемСкладам=Регистр.ОстаткиТоваров.СводныйОстаток(ТекущийЭлемент(),,,"ОстатокТовара");
		ОстатокПоСкладу=Регистр.ОстаткиТоваров.СводныйОстаток(ТекущийЭлемент(),Склад,,"ОстатокТовара");
		
		
		Если Склад=Константа.ОсновнойСклад Тогда
			РезервПоСчетамПоСкладу= Регистр.РезервыТоваров.СводныйОстаток(ТекущийЭлемент(),,"РезервТовара");
		Иначе
			РезервПоСчетамПоСкладу=0;
		КонецЕсли;
		
		Доступно=ОстатокПоСкладу-РезервПоСчетамПоСкладу;
		Предупреждение("СКЛАД  "+Склад+".  ТОВАР  "+ТекущийЭлемент().Код+" "+ТекущийЭлемент().Наименование+
		" .  ОСТАТОК товара -  "+
		Формат(ОстатокПоСкладу,"Ч10.3")+ТекущийЭлемент().БазоваяЕдиницаИзмерения+
		" .  РЕЗЕРВ по счетам  -  "+
		Формат(РезервПоСчетамПоСкладу,"Ч10.3")+ТекущийЭлемент().БазоваяЕдиницаИзмерения+
		" .  ДОСТУПЕН в количестве -   "+
		Формат(Доступно,"Ч10.3")+ТекущийЭлемент().БазоваяЕдиницаИзмерения);
	КонецЕсли;
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриПереносеЭлементаВДругуюГруппу(Спр, Группа)
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	ПриИзмененииОбъекта(Контекст, ТекущийЭлемент(), РабочаяДата());
КонецПроцедуры   
//***************************************************
Процедура Стар_ПриЗаписи() 
	ПризнакНевыбора = 0;
	Если Найти(Врег(Код),"АА") <> 0 Тогда
		ПризнакНевыбора = 1;	
	КонецЕсли;  
	Если Найти(Врег(Код),"AA") <> 0 Тогда
		ПризнакНевыбора = 1;	
	КонецЕсли;
	//Если (Врег(Лев(СокрЛП(Наименование),2)) = "АА")ИЛИ(Врег(Лев(СокрЛП(Наименование),2)) = "AA") Тогда 
	//	ПризнакНевыбора = 1;
	//КонецЕсли;	
КонецПроцедуры 
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписи()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_  
	Стар_ПриЗаписи();
	ПриИзмененииОбъекта(Контекст, ТекущийЭлемент(), РабочаяДата());
КонецПроцедуры  

//*******************************************
// Процедура генерации запроса СписокТоваров.
//
Процедура СписокТоваров()
	Перем Запрос, ТекстЗапроса;
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(СписокТоваров)
	|Товар = Справочник.Номенклатура.ТекущийЭлемент;
	|Поставщик = Справочник.Номенклатура.Поставщик;
	|БазЕд = Справочник.Номенклатура.БазоваяЕдиницаИзмерения;
	|НаименованиеДляЦенника = Справочник.Номенклатура.НаименованиеДляЦенника;
	|Наименование = Справочник.Номенклатура.Наименование;
	|Группировка Товар упорядочить по Товар.Код;
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовка к заполнению выходных форм данными запроса
	
	// Заполнение полей "Заголовок"
	
	Пока Запрос.Группировка(1) = 1 Цикл
		// Заполнение полей Товар
		
	КонецЦикла;
	// Вывод заполненной формы
	
КонецПроцедуры
                                                                
//******************************************************************************
Функция Раскрасить()             
	
	Если (ЭтоГруппа()=0) И (чТоварыДляРаспродажи=1) Тогда
		глЗапросПоОстаткамРасп.УстПараметр(1,ТекущийЭлемент());
		Ост=глЗапросПоОстаткамРасп.ВыполнитьСкалярный();

//		Ост = 0;
		Если Ост>0 Тогда
			Возврат "FONT["+Константа.ЦветТовараДляРаспродажи.НомерЦвета+"]BRUSH["+Константа.ФонТовараДляРаспродажи.НомерЦвета+"]COUNT[6]IDENT[0]";
		КонецЕсли;	
		
//		Сообщить("Раскрасить");
		
	КонецЕсли;

	Выделить_=глВернутьАкцентТовара(ТекущийЭлемент(),глКодСтраныПользователя);
	//Выделить_=?(глКодСтраныПользователя="LV",Выделить,ПолучитьАтрибут("Выделить"+глКодСтраныПользователя));
	Если (Выделить_=1) Тогда
		Возврат "FONT["+Константа.ЦветВыделенногоТовара.НомерЦвета+"]BRUSH["+Константа.ФонВыделенногоТовара.НомерЦвета+"]COUNT[6]IDENT[0]";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Процедура ОбновитьТаблицуТовара(ВыбТов="")
	
	Если ПустоеЗначение(ВыбТов)=1 Тогда
		ВыбТов=ТекущийЭлемент();
	КонецЕсли;

		итТаблТовары.ЦенаРозн 	= 0;
		итТаблТовары.ЦенаРозн2 	= 0;
		итТаблТовары.CashCarry 	= 0;
		итТаблТовары.ЦенаОпт 	= 0;

		Если ПустоеЗначение(Пользователь.ОснКатегорияЦены)=0 Тогда
			ОснКат=Пользователь.ОснКатегорияЦены;
			Если ОснКат=Константа.ОсновнаяКатегорияЦены Тогда
				Если выбВалюта.Выбран() = 0 Тогда
					итТаблТовары.ЦенаОпт = ЦенаТовараПоКатегорииДляТовара(ВыбТов,ОснКат);
				Иначе       
					Курс = КурсДляВалюты(выбВалюта,РабочаяДата());
					Если глКодСтраныПользователя <> Константа.ОсновнаяФирма.Страна.Код Тогда // только для агентов из Литвы
						Если выбВалюта.Наименование = "LTL" Тогда // только для литовской валюты LTL
							Курс = 0.28962;
						КонецЕсли;
					КонецЕсли;
					итТаблТовары.ЦенаОпт = ЦенаТовараПоКатегорииДляТовара(ВыбТов,ОснКат,выбВалюта,Курс);
				КонецЕсли;
			ИначеЕсли ОснКат=Константа.CashCarryКатегорияЦены Тогда
				КатCC = семПолучитьКатегориюЦеныПоНаим( "Cash & Carry" );
				Если выбВалюта.Выбран() = 0 Тогда
					Цена = ЦенаТовараПоКатегорииДляТовара(ВыбТов,КатCC);
				Иначе
					Цена = ЦенаТовараПоКатегорииДляТовара(ВыбТов,КатCC,выбВалюта,КурсДляВалюты(выбВалюта,РабочаяДата()));
				КонецЕсли;
				Скидка = 1 - глПроцентСкидки( ВыбТов,,КатCC)/100;
				НДС = 1 + ПроцентНДС(ВыбТов.СтавкаНДС)/100;
				итТаблТовары.CashCarry = Цена*Скидка*НДС;
			Иначе

				Если выбВалюта.Выбран() = 0 Тогда
					Цена = ЦенаТовараПоКатегорииДляТовара(ВыбТов,Константа.РозничнаяКатегорияЦены);
				Иначе
					Цена = ЦенаТовараПоКатегорииДляТовара(ВыбТов,Константа.РозничнаяКатегорияЦены,выбВалюта,КурсДляВалюты(выбВалюта,РабочаяДата()));
				КонецЕсли;
				Скидка = 1 - глПроцентСкидки(ВыбТов,,Константа.РозничнаяКатегорияЦены)/100;
				НДС = 1 + ПроцентНДС(ВыбТов.СтавкаНДС)/100;
				итТаблТовары.ЦенаРозн = Цена*Скидка*НДС;
				
				КатРозн2 = семПолучитьКатегориюЦеныПоНаим( "Розничная2" );
				Если выбВалюта.Выбран() = 0 Тогда
					Цена = ЦенаТовараПоКатегорииДляТовара(ВыбТов,КатРозн2);
				Иначе
					Цена = ЦенаТовараПоКатегорииДляТовара(ВыбТов,КатРозн2,выбВалюта,КурсДляВалюты(выбВалюта,РабочаяДата()));
				КонецЕсли;
				Скидка = 1 - глПроцентСкидки( ВыбТов,,КатРозн2)/100;
				НДС = 1 + ПроцентНДС(ВыбТов.СтавкаНДС)/100;
				итТаблТовары.ЦенаРозн2 = Цена*Скидка*НДС;
			КонецЕсли;

		Иначе
			Если выбВалюта.Выбран() = 0 Тогда
				Цена = ЦенаТовараПоКатегорииДляТовара(ВыбТов,Константа.РозничнаяКатегорияЦены);
			Иначе
				Цена = ЦенаТовараПоКатегорииДляТовара(ВыбТов,Константа.РозничнаяКатегорияЦены,выбВалюта,КурсДляВалюты(выбВалюта,РабочаяДата()));
			КонецЕсли;
			Скидка = 1 - глПроцентСкидки(ВыбТов,,Константа.РозничнаяКатегорияЦены)/100;
			НДС = 1 + ПроцентНДС(ВыбТов.СтавкаНДС)/100;
			итТаблТовары.ЦенаРозн = Цена*Скидка*НДС;
			Форма.лРознЦена.Заголовок("Розн. с НДС ("+ВыбТов.БазоваяЕдиницаИзмеренияРозница+"):");
			
			КатРозн2 = семПолучитьКатегориюЦеныПоНаим( "Розничная2" );
			Если выбВалюта.Выбран() = 0 Тогда
				Цена = ЦенаТовараПоКатегорииДляТовара(ВыбТов,КатРозн2);
			Иначе
				Цена = ЦенаТовараПоКатегорииДляТовара(ВыбТов,КатРозн2,выбВалюта,КурсДляВалюты(выбВалюта,РабочаяДата()));
			КонецЕсли;
			Скидка = 1 - глПроцентСкидки( ВыбТов,,КатРозн2)/100;
			НДС = 1 + ПроцентНДС(ВыбТов.СтавкаНДС)/100;
			итТаблТовары.ЦенаРозн2 = Цена*Скидка*НДС;
			//Форма.лРознЦена2.Заголовок("Розн 2 с НДС ("+ВыбТов.БазоваяЕдиницаИзмеренияРозница+"):");
	
			КатCC = семПолучитьКатегориюЦеныПоНаим( "Cash & Carry" );
			Если выбВалюта.Выбран() = 0 Тогда
				Цена = ЦенаТовараПоКатегорииДляТовара(ВыбТов,КатCC);
			Иначе
				Цена = ЦенаТовараПоКатегорииДляТовара(ВыбТов,КатCC,выбВалюта,КурсДляВалюты(выбВалюта,РабочаяДата()));
			КонецЕсли;
			Скидка = 1 - глПроцентСкидки( ВыбТов,,КатCC)/100;
			НДС = 1 + ПроцентНДС(ВыбТов.СтавкаНДС)/100;
			итТаблТовары.CashCarry = Цена*Скидка*НДС;
			
			
			ОснКат=?(глФирма=Константа.ОсновнаяФирма, Константа.ОсновнаяКатегорияЦены,глФирма.ОсновнаяКатегорияЦены);
			Если выбВалюта.Выбран() = 0 Тогда
				итТаблТовары.ЦенаОпт = ЦенаТовараПоКатегорииДляТовара(ВыбТов,ОснКат);
			Иначе       
				Курс = КурсДляВалюты(выбВалюта,РабочаяДата());
				Если глКодСтраныПользователя <> Константа.ОсновнаяФирма.Страна.Код Тогда // только для агентов из Литвы
					Если выбВалюта.Наименование = "LTL" Тогда // только для литовской валюты LTL
						Курс = 0.28962;
					КонецЕсли;
				КонецЕсли;
				итТаблТовары.ЦенаОпт = ЦенаТовараПоКатегорииДляТовара(ВыбТов,ОснКат,выбВалюта,Курс);
			КонецЕсли;
			
			Форма.лОптЦена.Заголовок("Опт. без НДС ("+ВыбТов.БазоваяЕдиницаИзмерения+"):");
		КонецЕсли;	
	

		итТаблТовары.СвобОстаток = СвободныйОстатокТовараНаСкладе();
		итТаблТовары.Остаток = ОстатокТовараНаСкладе();
		итТаблТовары.Заказано = ЗаказаноТовараНаСкладах();
		итТаблТовары.Впути=ВпутиТовараНаСкладах();
		итТаблТовары.Резерв = ВывестиРезервТовара();
		итТаблТовары.СпецРезерв = ВывестиСпецРезервТовара();
		итТаблТовары.БроньВПути = ВывестиБроньВПутиТовара();
	
КонецПроцедуры

Функция ФорматВывода( парам , ВыбТов="")
	
	//Если ПредТовар=ТекущийЭлемент() Тогда
	//Иначе
	//    ПредТоварКонец=_GetPerformanceCounter();
	//	
	//	//Сообщить(ПредТоварКонец-ПредТоварНачало);
	//	Если ПредТоварКонец-ПредТоварНачало<1000 Тогда
	//		Возврат "";
	//	КонецЕсли;
	//	
	//	ПредТовар=ТекущийЭлемент();      
	//	ПредТоварНачало=_GetPerformanceCounter();
	//КонецЕсли;

	Если ПустоеЗначение(ВыбТов)=1 Тогда
		ВыбТов=ТекущийЭлемент();
	КонецЕсли;

	ОбновитьЗначения=0;	
	
	Если итТаблТовары.НайтиСтроку("иТовар",ВыбТов,,1)=0 Тогда
		итТаблТовары.НоваяСтрока();
		итТаблТовары.Товар = ТекущийЭлемент();
	КонецЕсли;
	
	Если ПредТовар=ВыбТов Тогда
	Иначе
	//    ПредТоварКонец=_GetPerformanceCounter();
	//	
	//	Если ПредТоварКонец-ПредТоварНачало<500 Тогда
	//		Возврат "";
	//	КонецЕсли;
	//	
		
		ПредТовар=ВыбТов;
		ОбновитьЗначения=1;
		
	//	ПредТоварНачало=_GetPerformanceCounter();
	КонецЕсли;

	//при перемещении строки обновляем все значения
	Если ОбновитьЗначения=1 Тогда
		ОбновитьТаблицуТовара(ВыбТов);
	КонецЕсли;

	
	Если парам = "ЦенаРозн" Тогда
		Если Пользователь.ОсновнаяФирма <> Константа.ОсновнаяФирма Тогда
			// не показываем для пользователей филиалов
			Возврат "---";
		КонецЕсли;
		
		Возврат Формат(итТаблТовары.ЦенаРозн,"Ч15.2, ");
		
	ИначеЕсли парам = "ЦенаРозн2" Тогда
		Если Пользователь.ОсновнаяФирма <> Константа.ОсновнаяФирма Тогда
			// не показываем для пользователей филиалов
			Возврат "---";
		КонецЕсли;

		Возврат Формат(итТаблТовары.ЦенаРозн2,"Ч15.2, ");

	ИначеЕсли парам = "CashCarry" Тогда

		Возврат Формат(итТаблТовары.CashCarry,"Ч15.2, ");

		
	ИначеЕсли парам = "ЦенаОпт" Тогда

		Возврат Формат(итТаблТовары.ЦенаОпт,"Ч15.2, ");
		
	ИначеЕсли парам="СвободныйОстатокТовараНаСкладе" Тогда
		
		Возврат итТаблТовары.СвобОстаток;
		
	ИначеЕсли парам="ОстатокТовараНаСкладе" Тогда

		Возврат итТаблТовары.Остаток;
	ИначеЕсли парам="ЗаказаноТовараНаСкладах" Тогда

		Возврат СокрЛП(Формат(итТаблТовары.Заказано,"Ч15.1"))+"/"+СокрЛП(Формат(итТаблТовары.Впути,"Ч15.1"));

	ИначеЕсли парам="ВывестиРезервТовара" Тогда

		Возврат итТаблТовары.Резерв;
	
	ИначеЕсли парам="ВывестиБроньВПутиТовара" Тогда

		Возврат итТаблТовары.БроньВПути;	

	ИначеЕсли парам="ВывестиСпецРезервТовара" Тогда

		Возврат СокрЛП(Формат(итТаблТовары.СпецРезерв,"Ч15.1"))+"/"+СокрЛП(Формат(итТаблТовары.БроньВПути,"Ч15.1"));
		
	//	Возврат итТаблТовары.СпецРезерв;
	ИначеЕсли парам="Наименование" Тогда
		Если глКодСтраныПользователя="LV" Тогда
			Возврат Наименование;
		ИначеЕсли глКодСтраныПользователя="LT" Тогда
			Возврат НаименованиеLT;
		ИначеЕсли глКодСтраныПользователя="EE" Тогда
			Возврат НаименованиеEE;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Процедура кнТоварыДляРаспродажи()

	ТекстЗапроса = "SELECT МестаХранения.ID [Склад $Справочник.МестаХранения]
	|				FROM $Справочник.МестаХранения AS МестаХранения With (NOLOCK)
	|				WHERE ($МестаХранения.ТипСклада = $Перечисление.ТипыСкладов.СкладРаспродажи)
	|";
	
	Запрос=СоздатьОбъект("ODBCRecordSet");
	тт=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
	
	списСклады = СоздатьОбъект("СписокЗначений");
	тт.Выгрузить(списСклады);
	списСклады.ДобавитьЗначение("","Все");

	выб = "";
	Условие = "";
	Если списСклады.ВыбратьЗначение(выб,,,,1)=1 Тогда
		Если ПустоеЗначение(выб)=0 Тогда
			Условие = "Склад = :ВыбСклад";
			Запрос.УстановитьТекстовыйПараметр("ВыбСклад",выб);
		КонецЕсли;
	КонецЕсли;	
	
	ТекстЗапроса="SELECT ОстаткиТоваровОстатки.Товар [Товар $Справочник.Номенклатура],
	|					 SUM(ОстаткиТоваровОстатки.ОстатокТовараОстаток) Ост
	|			FROM $РегистрОстатки.ОстаткиТоваров(,
	|			INNER JOIN $Справочник.МестаХранения AS МестаХранения (NOLOCK) ON Склад = МестаХранения.ID AND ($МестаХранения.ТипСклада = $Перечисление.ТипыСкладов.СкладРаспродажи),
	|			"+Условие+",
	|			Товар,) AS ОстаткиТоваровОстатки
	|			INNER JOIN $Справочник.Номенклатура СпрН (NOLOCK) ON СпрН.ID = ОстаткиТоваровОстатки.Товар
	|			GROUP BY ОстаткиТоваровОстатки.Товар, $СпрН.ПоАлфавиту
	|			  ORDER BY $СпрН.ПоАлфавиту";
	
	табл=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
	СписокТоваров=СоздатьОбъект("СписокЗначений");
	табл.Выгрузить(СписокТоваров,,,"Товар");
	
	ИспользоватьСписокЭлементов(СписокТоваров);
	ИерархическийСписок(0,0);	  
	
	
КонецПроцедуры


//======================================================================
Процедура кнТоварыСАкцентами()
	
	ТекстЗапроса="SELECT СпрН.ID [Товар $Справочник.Номенклатура]
	|			  FROM $Справочник.Номенклатура СпрН (NOLOCK) 
	|			  WHERE $ПоследнееЗначение.Номенклатура.ВыделитьАкц"+глКодСтраныПользователя+"(СпрН.ID,:НаДату)= 1
	|			  ORDER BY $СпрН.ПоАлфавиту";
	
	Запрос=СоздатьОбъект("ODBCRecordSet");
	Запрос.УстановитьТекстовыйПараметр("НаДату",РабочаяДата());
	табл=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
	СписокТоваров=СоздатьОбъект("СписокЗначений");
	табл.Выгрузить(СписокТоваров,,,"Товар");
	
	ИспользоватьСписокЭлементов(СписокТоваров);
	ИерархическийСписок(0,0);	  
	
КонецПроцедуры // гл

//======================================================================
Процедура кнТоварыСпецкоды()
	
	сзСпецКоды = СоздатьОбъект("СписокЗначений");
	сзСпецКоды.ДобавитьЗначение(Перечисление.СпецкодыТоваров.E);
	сзСпецКоды.ДобавитьЗначение(Перечисление.СпецкодыТоваров.I);
	сзСпецКоды.ДобавитьЗначение(Перечисление.СпецкодыТоваров.N);
	сзСпецКоды.ДобавитьЗначение(Перечисление.СпецкодыТоваров.P);
	сзСпецКоды.ДобавитьЗначение(Перечисление.СпецкодыТоваров.PE);
	сзСпецКоды.ДобавитьЗначение(Перечисление.СпецкодыТоваров.G);
	сзСпецКоды.ДобавитьЗначение(Перечисление.СпецкодыТоваров.S);
	


	выбСпецСкод = "";

	Если  сзСпецКоды.ВыбратьЗначение(выбСпецСкод,,,,1) = 1 Тогда
	Иначе
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса="SELECT СпрН.ID [Товар $Справочник.Номенклатура]
	|			  FROM $Справочник.Номенклатура СпрН (NOLOCK) 
	|			  WHERE $СпрН.ПризнакСпецКода=:ВыбСпецкод
	|			  ORDER BY $СпрН.ПоАлфавиту";
	
	Запрос=СоздатьОбъект("ODBCRecordSet");
	Запрос.УстановитьТекстовыйПараметр("ВыбСпецкод",выбСпецСкод);
	табл=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
	СписокТоваров=СоздатьОбъект("СписокЗначений");
	табл.Выгрузить(СписокТоваров,,,"Товар");
	
	ИспользоватьСписокЭлементов(СписокТоваров);
	ИерархическийСписок(0,0);	  
	
КонецПроцедуры // гл

//======================================================================
Процедура кнТоварыСвойства()
	
	спрВидыСвойств = СоздатьОбъект("Справочник.ВидыСвойств");
	спрЗначенияСвойств = СоздатьОбъект("Справочник.ЗначенияСвойств");
	
	
	Если  спрВидыСвойств.Выбрать("Выберите вид свойство","ФормаСписка") = 1 Тогда
	Иначе
		Возврат;
	КонецЕсли;

	спрЗначенияСвойств.ИспользоватьВладельца(спрВидыСвойств.ТекущийЭлемент());
	Если  спрЗначенияСвойств.Выбрать("Выберите значение свойства","ФормаСписка") = 1 Тогда
	Иначе
		Возврат;
	КонецЕсли;

	ТекстЗапроса="SELECT СпрН.ID [Товар $Справочник.Номенклатура]
	|			  FROM $Справочник.Номенклатура СпрН (NOLOCK) 
	|			  WHERE ID IN (SELECT PARENTEXT FROM $Справочник.СвойстваНоменклатуры СпрСН (NOLOCK) WHERE $СпрСН.ВидСвойства = :ВыбВидСвойства AND СпрСН.ISMARK = 0 AND $СпрСН.ЗначениеСвойства = :ВыбЗначениеСвойства)
	|			  ORDER BY $СпрН.ПоАлфавиту";
	
	Запрос=СоздатьОбъект("ODBCRecordSet");
	Запрос.УстановитьТекстовыйПараметр("ВыбВидСвойства",спрВидыСвойств.ТекущийЭлемент());
	Запрос.УстановитьТекстовыйПараметр("ВыбЗначениеСвойства",спрЗначенияСвойств.ТекущийЭлемент());	

	табл=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
	СписокТоваров=СоздатьОбъект("СписокЗначений");
	табл.Выгрузить(СписокТоваров,,,"Товар");
	
	ИспользоватьСписокЭлементов(СписокТоваров);
	ИерархическийСписок(0,0);	  
	
КонецПроцедуры // гл

Процедура кнФильтрТоваров()
	
	Меню = СоздатьОбъект("СписокЗначений");
	Меню.ДобавитьЗначение(1,"Товары с акцентами");
	Меню.ДобавитьЗначение(2,"Спецкоды товаров");
	Меню.ДобавитьЗначение(3,"Свойства товаров");

	выб = 1;
	Если Меню.ВыбратьЗначение(выб,,,,1)=1 Тогда
		Если выб=1 Тогда
			кнТоварыСАкцентами();
		ИначеЕсли выб=2 Тогда
			кнТоварыСпецкоды();
		ИначеЕсли выб=3 Тогда
			кнТоварыСвойства();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура кнТоварыИзмененныеВЦентре()
	
	ДатаКонца=ПолучитьДатуТА();
	ДатаНачала=НачНедели(ДатаКонца);
	
	Если ВвестиПериод(ДатаНачала,ДатаКонца,"Выберите период отчета")<>1 Тогда
		Возврат;
	КонецЕсли;
	
	НаимСтар = "НаименованиеСтар";
	НаимНов = "НаименованиеНов";
	НаимВСтране = "Наименование"+Константа.СтранаРезидент.Код;
	БазаДанных = СокрЛП(Константа.ОсновнаяФирмаЦентра.СерверБД)+"."+СокрЛП(Константа.ОсновнаяФирмаЦентра.ИмяБД);
	
ТекстЗапроса = "SELECT СпрНЛок.ID [Товар $Справочник.Номенклатура]
	|					   , CONVERT(VARCHAR(12),ДатаВремя,104) Дата
	|					   , CONVERT(VARCHAR(8),ДатаВремя,108) Время
	|					   , Пользователь
	|					   , КодСтар
	|					   , КодНов
	|					   , "+НаимСтар+" as НаименованиеСтар
	|					   , "+НаимНов+" as НаименованиеНов
	|				FROM "+БазаДанных+ ".dbo.НоменклатураИсторияИзменений
	|				INNER JOIN "+БазаДанных+".dbo.$Справочник.Номенклатура СпрН ON СпрН.ID = ТоварID AND СпрН.ISMARK = 0
	|				INNER JOIN $Справочник.Номенклатура СпрНЛок (NOLOCK) ON $СпрНЛок.IDD = $СпрН.IDD
//	|				INNER JOIN "+БазаДанных+".dbo.$Справочник.Цены СпрЦ  ON СпрЦ.PARENTEXT = СпрН.ID AND СпрЦ.ISMARK = 0
//	|				INNER JOIN "+БазаДанных+".dbo.$Справочник.КатегорииЦен СпрКЦ  ON СпрКЦ.ID = $СпрЦ.КатегорияЦены 
//	|							AND $СпрКЦ.IDD = (SELECT TOP 1 $Спр.IDD FROM $Справочник.КатегорииЦен Спр (NOLOCK) WHERE ID =:КатЦены)
	|				WHERE ДатаВремя BETWEEN :Нач AND :Кон 
	|					AND ("+НаимСтар+" <> "+НаимНов + " OR $СпрНЛок."+НаимВСтране+"='' OR $СпрНЛок."+НаимВСтране+"=:СтрАрхив )
	|					  AND (CONVERT(VARCHAR(8),ДатаВремя,108)>='06:00' AND CONVERT(VARCHAR(8),ДатаВремя,108)<'23:00')
	|					  AND NULLIF($СпрН.ДатаАрхивации,'17530101') IS NULL
	|					  AND $СпрН.ПризнакСпецКода NOT IN ($Перечисление.СпецкодыТоваров.G,$Перечисление.СпецкодыТоваров.GI,$Перечисление.СпецкодыТоваров.GF,$Перечисление.СпецкодыТоваров.GS,$Перечисление.СпецкодыТоваров.GN)
	|					  AND Пользователь <> 'MOD'
	//	|					AND (СпрН.DESCR NOT LIKE :СтрПоиска AND $СпрН."+НаимВСтране+" NOT LIKE :СтрПоиска)
	|				ORDER BY СпрНЛок.CODE
	|";
		
	Запрос = СоздатьОбъект("ODBCRecordSet");
	Запрос.УстановитьТекстовыйПараметр("Нач",ДатаНачала);
	Запрос.УстановитьТекстовыйПараметр("Кон",ДатаКонца+1);
	Запрос.УстановитьТекстовыйПараметр("СтрПоиска",СокрЛП(Константа.СимволАрхивТоваров)+"%");
	Запрос.УстановитьТекстовыйПараметр("СтрАрхив",СокрЛП(Константа.СимволАрхивТоваров));
	Запрос.УстановитьТекстовыйПараметр("КатЦены",Константа.ОсновнаяКатегорияЦены);
	
	табл=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
	СписокТоваров=СоздатьОбъект("СписокЗначений");
	табл.Выгрузить(СписокТоваров,,,"Товар");
	
	ИспользоватьСписокЭлементов(СписокТоваров);
	ИерархическийСписок(0,0);	  
	
КонецПроцедуры

//Конец текста, вставленного Инсталлятором МОД


Рез_Поиска=0;  
перЛатвия = Перечисление.МестаИспользования.Латвия;
перЛитва = Перечисление.МестаИспользования.Литва;
спПослОтбора = СоздатьОбъект( "СписокЗначений" );
Форма.ВыбКлиент.ВыборГруппы(0);
Форма.Склад.ВыборГруппы(1);
Попытка
	Расш=СоздатьОбъект("РасширениеФормы");	
Исключение
	Расш="";
КонецПопытки;

ПредТоварНачало=0;
итТаблТовары=СоздатьОбъект("ИндексированнаяТаблица");
итТаблТовары.НоваяКолонка("Товар");
итТаблТовары.НоваяКолонка("ЦенаРозн");
итТаблТовары.НоваяКолонка("ЦенаРозн2");
итТаблТовары.НоваяКолонка("CashCarry");
итТаблТовары.НоваяКолонка("ЦенаОпт");
итТаблТовары.НоваяКолонка("СвобОстаток");
итТаблТовары.НоваяКолонка("Остаток");
итТаблТовары.НоваяКолонка("Заказано");
итТаблТовары.НоваяКолонка("Впути");//для Ожидаемая поставка
итТаблТовары.НоваяКолонка("Резерв");
итТаблТовары.НоваяКолонка("СпецРезерв");
итТаблТовары.НоваяКолонка("БроньВПути");//БроньВПути
итТаблТовары.ДобавитьИндекс("иТовар","*Товар");