Перем Уров,ПредЭлемент;
Перем Т;
Перем ЭлементСтар;
Перем Зап;
Перем Параметр;
Перем ДаДа,НетНет;
Перем СписокЗагрузки;//загруженная шапка со структурой данных в формате mod
Перем ОписаниеБазы;
Перем НовыйРодитель;
Перем МасДоступа[10],МасПризнаков[10],МасСинонимов[10];
Перем КолТранзакции;
Перем СчетчикОбновлений;
Перем Пусто;
Перем СписокИстории;
Перем ПовторДляПользователя;
Перем СписокЗагруженныхРеквизитов;


//*************************************************************** XML поддержка
//*************************************************************** XML поддержка
Перем КартинкаОткрЭлемента;
Перем КартинкаЗакрЭлемента;
Перем КартинкаЭлемента;
Перем КартинкаАтрибута;
Перем ДеревоСписков,ИмяСсылкиРодителя,ИмяОшибкиСоответствия;
Перем ФлСтруктура;
Перем ТипФайлаШапки;
Перем ИспользоватьКартинки;

Перем ИсторияВходов;

Перем ПоследняяПозиция;//для варианта ручного позиционирования по таблице


Перем КоличествоСтрок;

//******************************* предварительное объявление процедур и функций
//******************************* предварительное объявление процедур и функций

//специальные процедуры для работы с пользователем в режиме подскази
Процедура ПодсказкаПользователю(ПервоеСообщение,ПоследующиеСообщения="",ВремяТаймАута=0) Далее

Процедура НавигацияПриСменеРодителя(Спр) Далее



//*************************************************************** XML поддержка
Процедура ЗагрузкаXML() Далее
Процедура ПросмотрДерева(Дерево) Далее





//************************************************** процедуры и функции модуля
//************************************************** процедуры и функции модуля

Процедура Спр_НазначитьТип(Спр,Реквизит,ТипСтр,Длина=0,Точность=0)
	Спр.НазначитьТип(Реквизит,ТипСтр,Длина,Точность);
КонецПроцедуры
//_____________________________________________________________________________


//Процедура ПроставитьГалочки(Знач РодСпр)
//	//********* проставляем галочки тем элементам, у которых есть совпадающие
//	//значения синонимов и значения списка загрузки + проставлен признак загрузки
//	
//	Если СчетчикОбновлений<3 Тогда //для ускорения работы делаем проверку
//	Спр=СоздатьОбъект("Справочник.ПравилаЗагрузки");
//	Спр.ИспользоватьВладельца(Параметр);
//	Спр.ИспользоватьРодителя(РодСпр);
//	Спр.ВключатьПодчиненные(0);
//	Спр.ВыбратьЭлементы();
//	Спис=СоздатьОбъект("СписокЗначений");
//	Для А=1 По СпЗ.РазмерСписка() Цикл
//		СпЗ.Пометка(А,0);
//		Имя="";
//		СпЗ.ПолучитьЗначение(А,Имя);
//		Спис.ДобавитьЗначение(Сокрлп(Имя));
//	КонецЦикла;
//	Пока Спр.ПолучитьЭлемент(0)>0 Цикл
//		Если Спр.ПризнакЗагрузки=ДаДа Тогда
//		Имя=Спр.Синоним;
//		Имя=?(Сокрлп(Имя)="",Спр.Наименование,Имя);
//		Рез=Спис.НайтиЗначение(Сокрлп(Имя));
//		Если Рез<>0 Тогда
//			СпЗ.Пометка(Рез,1);
//		КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;
//	СчетчикОбновлений=Число(СчетчикОбновлений)+1;
//	КонецЕсли;
//
//    Если Форма.АктивныйЭлемент()<>"СпЗ" Тогда
//    //Делаем текущим элементом списка, то значение, которое равно синониму или наименованию текущего справочника
//		Имя=Синоним;
//		Имя=?(Сокрлп(Имя)="",Наименование,Имя);
//		Рез=СпЗ.Получить(Сокрлп(Имя));
//		Если ПустоеЗначение(Рез)=0 Тогда
//			А=СпЗ.НайтиЗначение(Рез);
//			СпЗ.ТекущаяСтрока(А);
//		КонецЕсли;
//    КонецЕсли;
//	//*****************************************************************************
//КонецПроцедуры

//_____________________________________________________________________________

Функция МойТип(КтоТо)
	АА=ТипЗначения(КтоТо);
	Если (АА<10) или (АА>12) Тогда
		Возврат ТипЗначенияСтр(КтоТо);
	Иначе
		Возврат ТипЗначенияСтр(КтоТо)+"."+КтоТо.Вид();
	КонецЕсли;
КонецФункции //МойТип

//_____________________________________________________________________________

Процедура КонтрольКолонок(Спр)
	Форма.Пример.Видимость(0);
	Форма.Синоним.Видимость(1);
	Форма.Синхронизация	.Видимость(0);
	Форма.Движения.Видимость(0);
	Форма.Условие.Видимость(0);
	Форма.Значение.Видимость(0);
	Форма.ВклУсловие.Видимость(0);
	Форма.ВклЗначение.Видимость(0);
	Форма.История.Видимость(0);
	Форма.ЗагрузкаСчетов.Видимость(0);
	
	Если Спр.Уровень()=1 Тогда
		Если Спр.Наименование="Документы" Тогда
			Форма.Синоним.Видимость(1);
			Форма.Движения.Видимость(1);
		ИначеЕсли Спр.Наименование="Справочники" Тогда
			Форма.Синоним.Видимость(1);
		ИначеЕсли Спр.Наименование="Регистры" Тогда
			Форма.Синоним.Видимость(1);
		ИначеЕсли Спр.Наименование="Планы счетов" Тогда
			Форма.Синоним.Видимость(1);
			Форма.ЗагрузкаСчетов.Видимость(1);
		ИначеЕсли Спр.Наименование="Операции" Тогда
			Форма.Синоним.Видимость(1);
		ИначеЕсли Спр.Наименование="Перечисления" Тогда
			Форма.Синоним.Видимость(1);
		ИначеЕсли Спр.Наименование="Константы" Тогда
			Форма.Синоним.Видимость(1);
			Форма.Условие.Видимость(1);
			Форма.Значение.Видимость(1);
			Форма.ВклУсловие.Видимость(1);
			Форма.ВклЗначение.Видимость(1);
			Форма.История.Видимость(1);
		ИначеЕсли Спр.Наименование="Виды расчетов" Тогда
			Форма.Синоним.Видимость(1);
		ИначеЕсли Спр.Наименование="Календари" Тогда
			Форма.Синоним.Видимость(1);
		ИначеЕсли Спр.Наименование="Журналы расчетов" Тогда
			Форма.Синоним.Видимость(1);
		КонецЕсли;
	ИначеЕсли Спр.Уровень()=2 Тогда
		//		Форма.ПризнакЗагрузки.Видимость(1);
		Если Спр.Родитель.Наименование="Документы" Тогда
			Форма.Синоним.Видимость(1);
		ИначеЕсли Спр.Родитель.Наименование="Справочники" Тогда
			Форма.Пример.Видимость(1);
			Форма.Синоним.Видимость(1);
			Форма.Условие.Видимость(1);
			Форма.Значение.Видимость(1);
			Форма.ВклУсловие.Видимость(1);
			Форма.ВклЗначение.Видимость(1);
			Форма.Синхронизация.Видимость(1);
			Форма.История.Видимость(1);
		ИначеЕсли Спр.Родитель.Наименование="Операции" Тогда
			Форма.Синоним.Видимость(1);
			Форма.Условие.Видимость(1);
			Форма.Значение.Видимость(1);
			Форма.ВклУсловие.Видимость(1);
			Форма.ВклЗначение.Видимость(1);
		ИначеЕсли Спр.Родитель.Наименование="Планы счетов" Тогда
			Форма.Синоним.Видимость(1);
		ИначеЕсли Спр.Родитель.Наименование="Перечисления" Тогда
			Форма.Синоним.Видимость(1);
			Форма.Значение.Видимость(1);
			Форма.ВклЗначение.Видимость(1);
		ИначеЕсли Спр.Родитель.Наименование="Журналы расчетов" Тогда
			Форма.Синоним.Видимость(1);
			Форма.Условие.Видимость(1);
			Форма.Значение.Видимость(1);
			Форма.ВклУсловие.Видимость(1);
			Форма.ВклЗначение.Видимость(1);
		КонецЕсли;
	ИначеЕсли Спр.Уровень()=3 Тогда
		Если Спр.Родитель.Родитель.Наименование="Документы" Тогда
			Форма.Пример.Видимость(1);
			Форма.Синоним.Видимость(1);
			Форма.Условие.Видимость(1);
			Форма.Значение.Видимость(1);
			Форма.ВклУсловие.Видимость(1);
			Форма.ВклЗначение.Видимость(1);
			Форма.Синхронизация.Видимость(1);
		Иначе
			Форма.Синоним.Видимость(1);
			Форма.Условие.Видимость(1);
			Форма.Значение.Видимость(1);
			Форма.ВклУсловие.Видимость(1);
			Форма.ВклЗначение.Видимость(1);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//_____________________________________________________________________________
Процедура ПриУстановкеПризнака(Признак="")
	Если Уровень()>1 Тогда
		НачатьТранзакцию();
		Спр=СоздатьОбъект("Справочник.ПравилаЗагрузки");
		Спр.ИспользоватьВладельца(Владелец);
		Если ЭтоГруппа()=1 Тогда
			Спр.ИспользоватьРодителя(ТекущийЭлемент());
			Спр.ВыбратьЭлементы();
			Пока Спр.ПолучитьЭлемент()>0 Цикл//для всех подчиненных
				Спр.ПризнакЗагрузки=Признак;
				Спр.Записать();
			КонецЦикла;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры
//_____________________________________________________________________________

Процедура ПриВыбореВладельца(Парам)
	Параметр=Парам;
КонецПроцедуры
//_____________________________________________________________________________
Функция ВыборФайла(ИмяФайла)
	Стр="";
	Если ФС.ВыбратьФайл(0,ИмяФайла,Стр,"Выберите файл шапки","Файлы Менеджера и XML(*.mod;*.xml)|*.mod;*.xml|Все файлы (*.*) |*.*","*.mod")=1 Тогда
	КонецЕсли;
	Возврат Стр+ИмяФайла;
КонецФункции
//_____________________________________________________________________________

Процедура ВсеОчистить()//очистить справочник
	НачатьТранзакцию();
	Спр=СоздатьОбъект("Справочник.ПравилаЗагрузки");
	Спр.ИспользоватьРодителя(0);
	Спр.ИспользоватьВладельца(Параметр);
	Спр.ВключатьПодчиненные(1);
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()>0 Цикл
		Спр.Удалить();
		Спр.ВыбратьЭлементы();
	КонецЦикла;
	ЗафиксироватьТранзакцию();
КонецПроцедуры

//_____________________________________________________________________________
Процедура ВсеСопоставить()//попытаться найти соответствие для
	//всех элементов справочника и загружаемых элементов
	Перем Уров;
	глВыгрБазаМОДЗагр="";
	НачатьТранзакцию();
	Спр=СоздатьОбъект("Справочник.ПравилаЗагрузки");
	Спр.ИспользоватьВладельца(Параметр);
	Спр.ИспользоватьРодителя(Родитель);
	Спр.ВключатьПодчиненные(0);
	Спр.ВыбратьЭлементы();
	Спис=СоздатьОбъект("СписокЗначений");
	Для А=1 По Таб.КоличествоСтрок() Цикл
		Имя=Таб.ПолучитьЗначение(А,"Наименование");
		Спис.ДобавитьЗначение(Сокрлп(Имя));
	КонецЦикла;
	Пока Спр.ПолучитьЭлемент(0)>0 Цикл
		Представление=Сокрлп(Спр.Синоним);
		ТекПредставление=?(Представление="",Сокрлп(Спр.Наименование),Представление);
		Если ТипФайлаШапки=2 Тогда
		    Представление=СтрЗаменить(ТекПредставление," ","_");
		    Представление=СтрЗаменить(Представление,"#","_");
				НомСк=Найти(Представление,"[");
				Если НомСк>0 Тогда
				    Представление=Лев(Представление,НомСк-1);
				КонецЕсли;
				//справа
				НомСк=Найти(Представление,"]");
				Если НомСк>0 Тогда
				    Представление=Сред(Представление,НомСк+1);
				КонецЕсли;
		КонецЕсли;
		
		Рез=Спис.НайтиЗначение(Представление);
		Если Рез<>0 Тогда
			Спр.Синоним=ТекПредставление;
			Спр.ПризнакЗагрузки=ДаДа;
		Иначе
			Если Представление<>"*" Тогда
				Спр.ПризнакЗагрузки=НетНет;
			КонецЕсли;
		КонецЕсли;
		Попытка
		Спр.Записать();
		Исключение
		Предупреждение(ОписаниеОшибки(),10);
		КонецПопытки;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
КонецПроцедуры


//_____________________________________________________________________________
Процедура ЗаписатьТипы(Спр,Тип,Длина="",Точность="");
	Спр.НазначитьТип("Значение",Тип,Длина,Точность);
	Спр.НазначитьТип("Условие",Тип,Длина,Точность);
	Спр.Записать();
КонецПроцедуры

//_____________________________________________________________________________
Функция ЭлементМетаданных(Спр,Имя,РодительСпр,Группа=0,Истор=0,Движ=1)
	Попытка
		Спр.ИспользоватьВладельца(Параметр);
		Спр.ИспользоватьРодителя(РодительСпр);
	Исключение
		Возврат 0;
	КонецПопытки;
	Спр.ВключатьПодчиненные(0);
	Спр.НайтиПоНаименованию(Имя,1,1);
	
	
	
	Если Спр.Выбран()=0 Тогда
		Если Группа=1 Тогда
			глСоздатьНовуюГруппу(Спр);
			//*****************************************проверка прямого доступа к объекту метаданных
			Если МасДоступа[Спр.Родитель.Уровень()+1]<>"" Тогда //т.е. задано какое-то значение объектв, в которое следует зайти
//				Спр=0; //но оно не совпало
				Возврат 0;
			КонецЕсли;//иначе не задано
			//*****************************************
			Если Движ=1 Тогда
				Спр.Движения=ДаДа;
			КонецЕсли;
		Иначе
			глСоздатьНовыйОбъект(Спр);
			Если Истор=1 Тогда
				Спр.История=ДаДа;
			КонецЕсли;
		КонецЕсли;
		Спр.Наименование=Имя;
		Спр.Синоним=Имя;
		Спр.ПризнакЗагрузки=ДаДа;
		Спр.Записать();
		КолТранзакции=КолТранзакции+1;
		Если КолТранзакции%500=0 Тогда
			Состояние("Обработано элементов "+КолТранзакции+" запись...");
		    ЗафиксироватьТранзакцию();
			Состояние("Обработано элементов "+КолТранзакции+" продолжение...");
			НачатьТранзакцию();
		КонецЕсли;
	Иначе
		Спр.СнятьПометкуУдаления();
		//*****************************************проверка прямого доступа к объекту метаданных
		Уровень=Спр.Уровень();
		//		Сообщить("Имя="+Имя+"  Уровень="+Уровень+"  МасДоступа[]="+МасДоступа[Уровень]);
		Если МасДоступа[Уровень]<>"" Тогда //задан единичный объект метаданных для обновления метаданными
			Если Имя<>МасДоступа[Уровень] Тогда //имя требуемого объекта не совпало с найденным
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
		//*****************************************
	КонецЕсли;
	Возврат 1;
КонецФункции //ЭлементМетаданных



//_____________________________________________________________________________
Процедура ЗаполнитьСтруктуруПравил()//заполнить справочник исходя из текущей конфигурации
	Если Владелец.Выбран()=0 Тогда
		Если ПустоеЗначение(Параметр)=1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	КолТранзакции=0;//для ускорения при каждой NN-й записи справочника будем фиксировать транзакцию
	//	Прогрессор(0,12,0,"Заполнение");
	глВыгрБазаМОДЗагр="";
	Удалять=0;
	
	Спр=СоздатьОбъект("Справочник."+Вид());
	Спр.ИспользоватьВладельца(Параметр);
	Рез=Спр.ВыбратьЭлементы();
	Если Рез=1 Тогда
		Список=СоздатьОбъект("СписокЗначений");	
		Список.ДобавитьЗначение(1,"Добавить только новые объекты");
		Список.ДобавитьЗначение(2,"Добавить новые и удалить старые");
		Выбр=0;
		Если Список.ВыбратьЗначение(Выбр,"Просмотреть ...",,,1)=1 Тогда
			Если Выбр=1 Тогда
				Удалять=0;
			ИначеЕсли Выбр=2 Тогда
				Удалять=1;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	
	НачатьТранзакцию();
	
	//*********************************************************************************
	//подготавливаем вспомогательный массив прямого доступа к объекту метаданных
	Для А=1 По 10 Цикл
		МасДоступа[А]="";
	КонецЦикла;
	
	Если ПустоеЗначение(НовыйРодитель)=0 Тогда
		А=НовыйРодитель.Уровень();
		ТекРодитель=НовыйРодитель;
		Пока А>=1 Цикл
			МасДоступа[А]=ТекРодитель.Наименование;
			А=А-1;
			ТекРодитель=ТекРодитель.Родитель;
		КонецЦикла;
	КонецЕсли;
	//*********************************************************************************




	Если Удалять=1 Тогда
		//сначала все помечаем на удаление !!
		Спр=СоздатьОбъект("Справочник."+Вид());
		Спр.ИспользоватьВладельца(Параметр);
		Если ПустоеЗначение(НовыйРодитель)=0 Тогда
			Спр.ИспользоватьРодителя(НовыйРодитель);//удаляем толко в пределах подчинения	
		КонецЕсли;
		Спр.ВыбратьЭлементы(1);
		Состояние("Пометка на удаление !!");
		Пока Спр.ПолучитьЭлемент(0)=1 Цикл
			Если Лев(Спр.Наименование,1)<>"@" Тогда
				Спр.Удалить(0);
				КолТранзакции=КолТранзакции+1;
				Если КолТранзакции%500=0 Тогда
					Состояние("Обработано элементов "+КолТранзакции+" запись...");
					ЗафиксироватьТранзакцию();
					Состояние("Обработано элементов "+КолТранзакции+" продолжение...");
					НачатьТранзакцию();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	
	//Планы счетов
	Для М1=1 По 1 Цикл
		//	Прогрессор(2);//************ прогрессор
		Попытка
			Состояние("Заполнение плана счетов");
			Если Метаданные.ДокументОперации.Выбран()=1 Тогда
				Спр=СоздатьОбъект("Справочник."+Вид());
				Имя="Планы счетов";
				Если ЭлементМетаданных(Спр,Имя,"",1)=0 Тогда
					Продолжить;
				КонецЕсли;
				РодительСпр=Спр.ТекущийЭлемент();
				Ц=ПланыСчетов.КоличествоЗначений();
				Для Ц=1 по ПланыСчетов.КоличествоЗначений() Цикл
					Имя=ПланыСчетов.ЗначениеПоНомеру(Ц).Идентификатор();
					Если ЭлементМетаданных(Спр,Имя,РодительСпр,1,0,1)=0 Тогда
						Продолжить;
					КонецЕсли;
					ТекПлан=Спр.ТекущийЭлемент();
					Об=СоздатьОбъект("Счет");
					Об.ИспользоватьПланСчетов(ПланыСчетов.ЗначениеПоИдентификатору(Имя));
					Об.ВыбратьСчета();
					Пока Об.ПолучитьСчет()>0 Цикл
						Имя=Строка(Об.ТекущийСчет());
						Если ЭлементМетаданных(Спр,Имя,ТекПлан,1,0,0)=0 Тогда
							Продолжить;
						КонецЕсли;
						ТекСчет=Спр.ТекущийЭлемент();
						Для ЦЦ=1 по Об.КоличествоСубконто() Цикл
							Спр.ИспользоватьРодителя(ТекСчет);
							Спр.ВключатьПодчиненные(0);
							Субк=Об.ВидСубконто(ЦЦ,);
							Имя=Субк.Идентификатор();
							ЭлементМетаданных(Спр,Имя,ТекСчет,0);
							ТипВид=Субк.ТипСубконто();
							ЗаписатьТипы(Спр,ТипВид);
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	
	
	//Операции
	//	Прогрессор(4);//************ прогрессор
	Если Метаданные.ДокументОперации.Выбран()=1 Тогда
	Для М1=1 По 1 Цикл
		Состояние("Заполнение операций");
		Спр=СоздатьОбъект("Справочник."+Вид());
		Имя="Операции";
		Если ЭлементМетаданных(Спр,Имя,"",1)=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для М2=1 По 1 Цикл
			ТекДок=Спр.ТекущийЭлемент();
			Имя="Атрибуты операции";
			Если ЭлементМетаданных(Спр,Имя,ТекДок,1)=0 Тогда
				Продолжить;
			КонецЕсли;
			ТекДок1=Спр.ТекущийЭлемент();//"Атрибуты операции"
			
			Спр1=СоздатьОбъект("Справочник."+Вид());
			
			ЭлементМетаданных(Спр1,"СуммаОперации",ТекДок1,0);
			Длина=Число(Метаданные.ДлинаСуммыОперация);
			Точность=Число(Метаданные.ТочностьСуммыОперации);
			ЗаписатьТипы(Спр1,"Число",Длина,Точность);
			
			ЭлементМетаданных(Спр1,"Содержание",ТекДок1,0);
			Длина=Число(Метаданные.ДлинаСодержанияОперации);
			ЗаписатьТипы(Спр1,"Строка",Длина,0);
			
			ЭлементМетаданных(Спр1,"#ПроводкиВключены",ТекДок1,0);
			ЗаписатьТипы(Спр1,"Число",1,0);

			ЭлементМетаданных(Спр1,"#Документ",ТекДок1,0);
			ЗаписатьТипы(Спр1,"Документ",0,0);
			
			
			
			
			Для А=1 По Метаданные.РеквизитОперации() Цикл
				Мета=Метаданные.РеквизитОперации(А);
				Имя=Мета.Идентификатор;
				Тип=Мета.Тип;
				Вид=Мета.Вид;
				Длина=Мета.Длина;
				Точность=Мета.Точность;
				ЭлементМетаданных(Спр1,Имя,ТекДок1,0);
				ЗаписатьТипы(Спр1,Тип+"."+Вид,Длина,Точность);
			КонецЦикла;
		КонецЦикла;	
		
		
		Для М2=1 По 1 Цикл
			Имя="Атрибуты проводки";
			Если ЭлементМетаданных(Спр,Имя,ТекДок,1)=0 Тогда
				Продолжить;
			КонецЕсли;
			ТекДок1=Спр.ТекущийЭлемент();//"Атрибуты проводки"
			
			Спр1=СоздатьОбъект("Справочник."+Вид());
			
			ЭлементМетаданных(Спр1,"#СложнаяПроводка",ТекДок1,0);
			ЗаписатьТипы(Спр1,"Число",1,0);
			
			ЭлементМетаданных(Спр1,"Сумма",ТекДок1,0);
			Длина=Число(Метаданные.ДлинаСуммыПроводки);
			Точность=Число(Метаданные.ТочностьСуммыПроводки);
			ЗаписатьТипы(Спр1,"Число",Длина,Точность);
			
			ЭлементМетаданных(Спр1,"ВалСумма",ТекДок1,0);
			Длина=Число(Метаданные.ДлинаВалютнойСуммыПроводки);
			Точность=Число(Метаданные.ТочностьВалютнойСуммыПроводки);
			ЗаписатьТипы(Спр1,"Число",Длина,Точность);
			
			ЭлементМетаданных(Спр1,"Валюта",ТекДок1,0);
			ЗаписатьТипы(Спр1,"Справочник."+Метаданные.Валюта,"","");
			
			
			ЭлементМетаданных(Спр1,"Количество",ТекДок1,0);
			Длина=Число(Метаданные.ДлинаКоличестваПроводки);
			Точность=Число(Метаданные.ТочностьКоличестваПроводки);
			ЗаписатьТипы(Спр1,"Число",Длина,Точность);
			
			Для А=1 По Метаданные.РеквизитПроводки() Цикл
				Мета=Метаданные.РеквизитПроводки(А);
				Имя=Мета.Идентификатор;
				Тип=Мета.Тип;
				Вид=Мета.Вид;
				Длина=Мета.Длина;
				Точность=Мета.Точность;
				ЭлементМетаданных(Спр1,Имя,ТекДок1,0);
				ЗаписатьТипы(Спр1,Тип+"."+Вид,Длина,Точность);
			КонецЦикла;
			
			
			ЭлементМетаданных(Спр1,"Дебет.Счет",ТекДок1,0);
			ЗаписатьТипы(Спр1,"Счет","","");
			
			
			Для А=1 По Метаданные.МаксимальноеКоличествоСубконто Цикл
				Имя="Дебет.Субконто"+А;
				ЭлементМетаданных(Спр1,Имя,ТекДок1,0);
			КонецЦикла;
			
			ЭлементМетаданных(Спр1,"Кредит.Счет",ТекДок1,0);
			ЗаписатьТипы(Спр1,"Счет","","");
			
			Для А=1 По Метаданные.МаксимальноеКоличествоСубконто Цикл
				Имя="Кредит.Субконто"+А;
				ЭлементМетаданных(Спр1,Имя,ТекДок1,0);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;	
	КонецЕсли;
	
	
	
	//Документы
//	Прогрессор(6);//************ прогрессор
	Состояние("Заполнение документов");
	Спр=СоздатьОбъект("Справочник."+Вид());
	СпрДоп=СоздатьОбъект("Справочник."+Вид());
	
	Для М1=1 По 1 Цикл
		Имя="Документы";
		Если ЭлементМетаданных(Спр,Имя,"",1)=0 Тогда
			Продолжить;
		КонецЕсли;
		Док0=Спр.ТекущийЭлемент();

		Для ы=1 по Метаданные.Документ() Цикл
			МетаДоп=Метаданные.Документ(ы);
			ИмяДоп=МетаДоп.Идентификатор;
			
			//Здесь сделаем финт ушами :)))
			//Если ЭлементМетаданных(Спр,Имя,Док0,1)=0 Тогда
			//	Продолжить;
			//КонецЕсли;
			
			Попытка
				СпрДоп.ИспользоватьВладельца(Параметр);
				СпрДоп.ИспользоватьРодителя(Док0);
			Исключение
				Продолжить;
			КонецПопытки;
			СпрДоп.ВключатьПодчиненные(0);
			
			//Если элемента еще НетНет
			Если СпрДоп.НайтиПоНаименованию(ИмяДоп,1,1)=0 Тогда
				
				глСоздатьНовуюГруппу(СпрДоп);
				//*****************************************проверка прямого доступа к объекту метаданных
				Если МасДоступа[СпрДоп.Родитель.Уровень()+1]<>"" Тогда //т.е. задано какое-то значение объектв, в которое следует зайти
					//				Спр=0; //но оно не совпало
					Продолжить;
				КонецЕсли;//иначе не задано
				//*****************************************
				СпрДоп.Движения=ДаДа;
				СпрДоп.Наименование=ИмяДоп;
				СпрДоп.Синоним=ИмяДоп;
				СпрДоп.ПризнакЗагрузки=ДаДа;
				СпрДоп.Записать();
				КолТранзакции=КолТранзакции+1;
				Если КолТранзакции%500=0 Тогда
					Состояние("Обработано элементов "+КолТранзакции+" запись...");
					ЗафиксироватьТранзакцию();
					Состояние("Обработано элементов "+КолТранзакции+" продолжение...");
					НачатьТранзакцию();
				КонецЕсли;
			КонецЕсли;
			    
			//Теперь идем по уже существующим элементам
			СпрДоп.ВыбратьЭлементы();
			
			Пока СпрДоп.ПолучитьЭлемент()=1 Цикл
				Если СокрЛП(СпрДоп.Наименование)<>СокрЛП(ИмяДоп) Тогда
					Продолжить;
				КонецЕсли;	
				
				СпрДоп.СнятьПометкуУдаления();
				//*****************************************проверка прямого доступа к объекту метаданных
				Уровень=СпрДоп.Уровень();
				//		Сообщить("Имя="+Имя+"  Уровень="+Уровень+"  МасДоступа[]="+МасДоступа[Уровень]);
				Если МасДоступа[Уровень]<>"" Тогда //задан единичный объект метаданных для обновления метаданными
					Если ИмяДоп<>МасДоступа[Уровень] Тогда //имя требуемого объекта не совпало с найденным
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				//*****************************************проверка прямого доступа к объекту метаданных
				//----------------
				//шапка
				Для М2=1 По 1 Цикл
					ТекДок=СпрДоп.ТекущийЭлемент();//Документ
					Если ЭлементМетаданных(Спр,"Шапка",ТекДок,1)=0 Тогда
						Продолжить;
					КонецЕсли;
					ТекДок1=Спр.ТекущийЭлемент();//"Шапка"
					
					ЭлементМетаданных(Спр,"#ДатаДок",ТекДок1,0);
					ЗаписатьТипы(Спр,"Дата");
					
					ЭлементМетаданных(Спр,"#ВремяДокумента",ТекДок1,0);
					
					ЭлементМетаданных(Спр,"#Проведен",ТекДок1,0);
					ЗаписатьТипы(Спр,"Число",1,0);
					
					ЭлементМетаданных(Спр,"#Удален",ТекДок1,0);
					ЗаписатьТипы(Спр,"Число",1,0);
					
					ЭлементМетаданных(Спр,"#ПомеченНаУдаление",ТекДок1,0);
					ЗаписатьТипы(Спр,"Число",1,0);
					
					ЭлементМетаданных(Спр,"НомерДок",ТекДок1,0);
					Если Спр.Синхронизация<>ДаДа Тогда
						Спр.Синхронизация="-";
					КонецЕсли;
					ТипНомера=МетаДоп.ТипНомера;
					Тип=?(ТипНомера="Числовой","Число","Строка");
					ДлинаНомера=МетаДоп.ДлинаНомера;
					ЗаписатьТипы(Спр,Тип,ДлинаНомера,0);
					
					Для у=1 по Метаданные.ОбщийРеквизитДокумента() Цикл
						Имя=Метаданные.ОбщийРеквизитДокумента(у).Идентификатор;
						
						Если СокрЛП(Имя)<>"IDD" Тогда
							Мета=Метаданные.ОбщийРеквизитДокумента(у);
							Тип=Мета.Тип;
							Вид=Мета.Вид;
							Длина=Мета.Длина;
							Точность=Мета.Точность;
							Сортировка=Мета.Сортировка;
							ЭлементМетаданных(Спр,Имя,ТекДок1,0);
							ЗаписатьТипы(Спр,Тип+"."+Вид,Длина,Точность);
							
							Если Сортировка=1 Тогда
								Если Спр.Синхронизация<>ДаДа Тогда
									Спр.Синхронизация="-";
									Спр.Записать();
								КонецЕсли;
							Иначе
								Если Спр.Синхронизация=ДаДа Тогда
									Спр.Синхронизация="";
									Спр.Записать();
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
					
					//другие реквизиты
					Спр1=СоздатьОбъект("Справочник."+Вид());
					Спр1.ИспользоватьВладельца(Параметр);
					Для ыы=1 по Метаданные.Документ(ы).РеквизитШапки() Цикл
						Мета=Метаданные.Документ(ы).РеквизитШапки(ыы);
						Тип=Мета.Тип;
						Вид=Мета.Вид;
						Длина=Мета.Длина;
						Точность=Мета.Точность;
						Имя=Мета.Идентификатор;
						ЭлементМетаданных(Спр,Имя,ТекДок1,0);
						ЗаписатьТипы(Спр,Тип+"."+Вид,Длина,Точность);
					КонецЦикла;
				КонецЦикла;
				
				
				//Табл. часть
				Для М2=1 По 1 Цикл
					Если ЭлементМетаданных(Спр,"Табличная часть",ТекДок,1)=0 Тогда
						Продолжить;
					КонецЕсли;
					ТекДок1=Спр.ТекущийЭлемент();//"Табличная часть"
					
					Для ыы=1 по Метаданные.Документ(ы).РеквизитТабличнойЧасти() Цикл
						Мета=Метаданные.Документ(ы).РеквизитТабличнойЧасти(ыы);
						Тип=Мета.Тип;
						Вид=Мета.Вид;
						Длина=Мета.Длина;
						Точность=Мета.Точность;
						Имя=Мета.Идентификатор;
						ЭлементМетаданных(Спр,Имя,ТекДок1,0);
						ЗаписатьТипы(Спр,Тип+"."+Вид,Длина,Точность);
					КонецЦикла;
					ЭлементМетаданных(Спр,"НомерСтроки",ТекДок1,0);
					ЗаписатьТипы(Спр,"Число",5,0);
				КонецЦикла;       
			КонецЦикла;
		КонецЦикла;//М2;
	КонецЦикла;//М1
	
	
	
	Для М1=1 По 1 Цикл
		//Справочники
		//Прогрессор(8);//************ прогрессор
		Состояние("Заполнение справочников");
		Спр=СоздатьОбъект("Справочник."+Вид());
		
		Если ЭлементМетаданных(Спр,"Справочники","",1)=0 Тогда
			Продолжить;
		КонецЕсли;
		ТекСпр=Спр.ТекущийЭлемент();//справочники
		
		Для ы=1 по Метаданные.Справочник() Цикл
			Мета=Метаданные.Справочник(ы);
			Имя=Мета.Идентификатор;
			Если (Имя="ПравилаЗагрузки") или (Имя="ПравилаВыгрузки") или (Имя="ПериферийныеБазы") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементМетаданных(Спр,Имя,ТекСпр,1,0,0)=0 Тогда
				Продолжить;
			КонецЕсли;
			
			//Реквизиты
			ТекСпр1=Спр.ТекущийЭлемент();//Вид справочника
			
			ЭлементМетаданных(Спр,"#Удален",ТекСпр1,0);
			ЗаписатьТипы(Спр,"Число",1,0);
			
			ЭлементМетаданных(Спр,"#ЭтоГруппа",ТекСпр1,0);
			ЗаписатьТипы(Спр,"Число",1,0);
			
			ЭлементМетаданных(Спр,"#ПомеченНаУдаление",ТекСпр1,0);
			ЗаписатьТипы(Спр,"Число",1,0);
			
			ЭлементМетаданных(Спр,"Родитель",ТекСпр1,0);
			ЗаписатьТипы(Спр,"Справочник."+ТекСпр1.Наименование);
			
			ЭлементМетаданных(Спр,"Владелец",ТекСпр1,0);
			Влад=Мета.Владелец;
			Если Влад.Выбран()=1 Тогда
				ЗаписатьТипы(Спр,"Справочник."+Влад.Идентификатор);
			КонецЕсли;
			
			ЭлементМетаданных(Спр,"Код",ТекСпр1,0);
			Если Спр.Синхронизация<>ДаДа Тогда
				Спр.Синхронизация="-";
			КонецЕсли;
			Тип=?(Мета.ТипКода="Числовой","Число","Строка");
			Длина=Мета.ДлинаКода;
			ЗаписатьТипы(Спр,Тип,Длина);
			
			ЭлементМетаданных(Спр,"Наименование",ТекСпр1,0);
			Если Спр.Синхронизация<>ДаДа Тогда
				Спр.Синхронизация="-";
			КонецЕсли;
			Длина=Мета.ДлинаНаименования;
			ЗаписатьТипы(Спр,"Строка",Длина);
			
			//остальные реквизиты
			Для ыы=1 по Метаданные.Справочник(ы).Реквизит() Цикл
				Мета=Метаданные.Справочник(ы).Реквизит(ыы);
				Имя=Мета.Идентификатор;
				Периодический=Число(Мета.Периодический);
				Если СокрЛП(Имя)<>"IDD" Тогда
					ЭлементМетаданных(Спр,Имя,ТекСпр1,0,Периодический);
					Тип=Мета.Тип;
					Вид=Мета.Вид;
					Если Вид<>"" Тогда
						Вид="."+Вид;
					КонецЕсли;
					Длина=Мета.Длина;
					Точность=Мета.Точность;
					ЗаписатьТипы(Спр,Тип+Вид,Длина,Точность);
					Сортировка=Мета.Сортировка;
					
					//смотрим может изменился тип реквизита в конфигураторе
					Если Периодический=0 Тогда
						Спр.История="";
						Спр.Записать();
					Иначе
						Если Спр.История<>ДаДа Тогда
							Спр.История="-";
							Спр.Записать();
						КонецЕсли;
					КонецЕсли;
					
					
					Если Сортировка=1 Тогда
						Если Спр.Синхронизация<>ДаДа Тогда
							Спр.Синхронизация="-";
							Спр.Записать();
						КонецЕсли;
					Иначе
						Спр.Синхронизация="";
						Спр.Записать();
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;//М1
	
	
	Для М1=1 По 1 Цикл
		//Регистры
//		Прогрессор(10);//************ прогрессор
		Состояние("Заполнение регистров");
		Если Метаданные.Регистр()>0 Тогда
			Если ЭлементМетаданных(Спр,"Регистры","",1)=0 Тогда
				Продолжить;
			КонецЕсли;
			Рег0=Спр.ТекущийЭлемент();//Регистр
			Для ы=1 по Метаданные.Регистр() Цикл
				Имя=Метаданные.Регистр(ы).Идентификатор;
				Если ЭлементМетаданных(Спр,Имя,Рег0,1)=0 Тогда
					Продолжить;
				КонецЕсли;
				ТекРег=Спр.ТекущийЭлемент();//Вид регистров
				
				ЭлементМетаданных(Спр,"Измерения",ТекРег,1);
				
				ТекРег1=Спр.ТекущийЭлемент();//Измерения
				
				
				Для ыы=1 по Метаданные.Регистр(ы).Измерение() Цикл
					Мета=Метаданные.Регистр(ы).Измерение(ыы);
					Тип=Мета.Тип;
					Вид=Мета.Вид;
					Длина=Мета.Длина;
					Точность=Мета.Точность;
					Имя=Мета.Идентификатор;
					ЭлементМетаданных(Спр,Имя,ТекРег1,0);
					ЗаписатьТипы(Спр,Тип+"."+Вид,Длина,Точность);
				КонецЦикла;
				
				ЭлементМетаданных(Спр,"#НомерСтроки",ТекРег1,0);
				ЗаписатьТипы(Спр,"Число",5,0);

				ЭлементМетаданных(Спр,"#ТекущийДокумент",ТекРег1,0);
				ЗаписатьТипы(Спр,"Документ",0,0);

				ЭлементМетаданных(Спр,"#ЭтоПриход",ТекРег1,0);
				ЗаписатьТипы(Спр,"Число",1,0);
				
				ЭлементМетаданных(Спр,"Ресурсы",ТекРег,1);
				ТекРег1=Спр.ТекущийЭлемент();//"Ресурсы"
				
				Для ыы=1 по Метаданные.Регистр(ы).Ресурс() Цикл
					Мета=Метаданные.Регистр(ы).Ресурс(ыы);
					Тип=Мета.Тип;
					Вид=Мета.Вид;
					Длина=Мета.Длина;
					Точность=Мета.Точность;
					Имя=Мета.Идентификатор;
					ЭлементМетаданных(Спр,Имя,ТекРег1,0);
					ЗаписатьТипы(Спр,Тип+"."+Вид,Длина,Точность);
				КонецЦикла;
				
				ЭлементМетаданных(Спр,"Реквизиты",ТекРег,1);
				ТекРег1=Спр.ТекущийЭлемент();//"Ресурсы"
				
				Для ыы=1 по Метаданные.Регистр(ы).Реквизит() Цикл
					Мета=Метаданные.Регистр(ы).Реквизит(ыы);
					Тип=Мета.Тип;
					Вид=Мета.Вид;
					Длина=Мета.Длина;
					Точность=Мета.Точность;
					Имя=Мета.Идентификатор;
					ЭлементМетаданных(Спр,Имя,ТекРег1,0);
					ЗаписатьТипы(Спр,Тип+"."+Вид,Длина,Точность);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;//М1
	
	
	Для М1=1 По 1 Цикл
		//Перечисления
		Спр=СоздатьОбъект("Справочник."+Вид());
		Если ЭлементМетаданных(Спр,"Перечисления","",1)=0 Тогда
			Продолжить;
		КонецЕсли;
		РодительСпр1=Спр.ТекущийЭлемент();	
		
		Для А=1 по Метаданные.Перечисление() Цикл
			Имя=Метаданные.Перечисление(А).Идентификатор;
			Если ЭлементМетаданных(Спр,Имя,РодительСпр1,1)=0 Тогда
				Продолжить;
			КонецЕсли;
			
			РодительСпр2=Спр.ТекущийЭлемент();	//вид перечисления
			
			Для АА=1 по Метаданные.Перечисление(А).Значение() Цикл
				Имя=Метаданные.Перечисление(А).Значение(АА).Идентификатор;
				ЭлементМетаданных(Спр,Имя,РодительСпр2,0);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;//М1
	
	
	Для М1=1 По 1 Цикл
		//	Константы
		Спр=СоздатьОбъект("Справочник."+Вид());
		Если ЭлементМетаданных(Спр,"Константы","",1)=0 Тогда
			Продолжить;
		КонецЕсли;
		РодительСпр=Спр.ТекущийЭлемент();	
		
		Для А=1 по Метаданные.Константа() Цикл
			Имя=Метаданные.Константа(А).Идентификатор;
			Периодический=Число(Метаданные.Константа(А).Периодический);
			Если (Имя<>"IDD") и (Имя<>"УникальныйIDD") и (Имя<>"ИмяКомпьютераРепликацииМОД") Тогда
				Если ЭлементМетаданных(Спр,Имя,РодительСпр,0,Периодический)=0 Тогда
					Продолжить;
				КонецЕсли;
				Спр.НайтиПоНаименованию(Имя,1,1);
				Если Спр.Выбран()=1 Тогда
					//смотрим может изменился тип реквизита в конфигураторе
					Если Периодический=0 Тогда
						Спр.История="";
					Иначе
						Если Спр.История<>ДаДа Тогда
							Спр.История="-";
						КонецЕсли;
					КонецЕсли;
					Спр.Записать();
				КонецЕсли;
				
				Тип=Метаданные.Константа(А).Тип;
				Вид=Метаданные.Константа(А).Вид;
				Длина=Метаданные.Константа(А).Длина;
				Точность=Метаданные.Константа(А).Точность;
				
				ЗаписатьТипы(Спр,Тип+"."+Вид,Длина,Точность);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;//М1
	
	
	Для М1=1 По 1 Цикл
		//журналы расчетов	
		Если Метаданные.ЖурналРасчетов()>0 Тогда
			Состояние("Заполнение журнала расчета");
			Спр=СоздатьОбъект("Справочник."+Вид());
			Имя="Журналы расчетов";
			Если ЭлементМетаданных(Спр,Имя,"",1,0,0)=0 Тогда
				Продолжить;
			КонецЕсли;
			РодительСпр=Спр.ТекущийЭлемент();
			Для А=1 По Метаданные.ЖурналРасчетов() Цикл
				Имя=Метаданные.ЖурналРасчетов(А).Идентификатор;
				
				Если ЭлементМетаданных(Спр,Имя,РодительСпр,1)=0 Тогда
					Продолжить;
				КонецЕсли;
				ТекСпр=Спр.ТекущийЭлемент();
				
				
				
				ЭлементМетаданных(Спр,"Документ",ТекСпр,0,0,0);
				ЗаписатьТипы(Спр,"Документ");
				
				ЭлементМетаданных(Спр,"РодительскийДокумент",ТекСпр,0,0,0);
				ЗаписатьТипы(Спр,"Документ");
				
				ЭлементМетаданных(Спр,"Объект",ТекСпр,0,0,0);
				
				ЗаписатьТипы(Спр,"Справочник");
				
				ЭлементМетаданных(Спр,"ВидРасч",ТекСпр,0,0,0);
				ЗаписатьТипы(Спр,"ВидРасчета");
				
				ЭлементМетаданных(Спр,"ДатаНачала",ТекСпр,0,0,0);
				ЗаписатьТипы(Спр,"Дата");
				
				ЭлементМетаданных(Спр,"ДатаОкончания",ТекСпр,0,0,0);
				ЗаписатьТипы(Спр,"Дата");
				
				ЭлементМетаданных(Спр,"Сторно",ТекСпр,0,0,0);
				ЗаписатьТипы(Спр,"Число",1,0);
				
				ЭлементМетаданных(Спр,"Рассчитана",ТекСпр,0,0,0);
				ЗаписатьТипы(Спр,"Число",1,0);
				
				ЭлементМетаданных(Спр,"Исправлена",ТекСпр,0,0,0);
				ЗаписатьТипы(Спр,"Число",1,0);
				
				ЭлементМетаданных(Спр,"Фиксирована",ТекСпр,0,0,0);
				ЗаписатьТипы(Спр,"Число",1,0);
				
				ЭлементМетаданных(Спр,"Перерасчет",ТекСпр,0,0,0);
				ЗаписатьТипы(Спр,"Число",1,0);
				
				ЭлементМетаданных(Спр,"#ПервичнаяЗапись",ТекСпр,0,0,0);
				ЗаписатьТипы(Спр,"Число",3,0);
				
				ЭлементМетаданных(Спр,"Результат",ТекСпр,0,0,0);
				Длина=Метаданные.ЖурналРасчетов(А).ДлинаРезультата;
				Точность=Метаданные.ЖурналРасчетов(А).ТочностьРезультата;
				ЗаписатьТипы(Спр,"Число",Длина,Точность);
				
				
				
				//
				//			ЭлементМетаданных(Спр,"#ПериодДействия.ДатаНачала",ТекСпр,0,0,0);
				//			ЗаписатьТипы(Спр,"Дата");
				//
				//			ЭлементМетаданных(Спр,"#ПериодДействия.ДатаОкончания",ТекСпр,0,0,0);
				//			ЗаписатьТипы(Спр,"Дата");
				//			
				ЭлементМетаданных(Спр,"#ПериодРегистрации",ТекСпр,0,0,0);
				ЗаписатьТипы(Спр,"Дата");
				
				//
				//			ЭлементМетаданных(Спр,"#ПериодРегистрации.ДатаОкончания",ТекСпр,0,0,0);
				//			ЗаписатьТипы(Спр,"Дата");
				
				
				
				//Реквизиты
				Для АА=1 по Метаданные.ЖурналРасчетов(А).Реквизит() Цикл
					Имя=Метаданные.ЖурналРасчетов(А).Реквизит(АА).Идентификатор;
					ЭлементМетаданных(Спр,Имя,ТекСпр,0,0,0);
					Тип=Метаданные.ЖурналРасчетов(А).Реквизит(АА).Тип;
					Вид=Метаданные.ЖурналРасчетов(А).Реквизит(АА).Вид;
					Длина=Метаданные.ЖурналРасчетов(А).Реквизит(АА).Длина;
					Точность=Метаданные.ЖурналРасчетов(А).Реквизит(АА).Точность;
					ЗаписатьТипы(Спр,Тип+"."+Вид,Длина,Точность);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;			
	КонецЦикла;//М1


	Для М1=1 По 1 Цикл
		//виды расчетов	
		Если Метаданные.ВидРасчета()>0 Тогда
			Состояние("Заполнение видов расчета");
			Спр=СоздатьОбъект("Справочник."+Вид());
			Имя="Виды расчетов";
			Если ЭлементМетаданных(Спр,Имя,"",1,0,0)=0 Тогда
				Продолжить;
			КонецЕсли;
			РодительСпр=Спр.ТекущийЭлемент();
			Для А=1 По Метаданные.ВидРасчета() Цикл
				Имя=Метаданные.ВидРасчета(А).Идентификатор;
				
				Если ЭлементМетаданных(Спр,Имя,РодительСпр,0)=0 Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;//М1
	


	
	Для М1=1 По 1 Цикл
		//Календари
		Если Метаданные.Календарь()>0 Тогда
			Состояние("Заполнение видов расчета");
			Спр=СоздатьОбъект("Справочник."+Вид());
			Имя="Календари";
			Если ЭлементМетаданных(Спр,Имя,"",1,0,0)=0 Тогда
				Продолжить;
			КонецЕсли;
			РодительСпр=Спр.ТекущийЭлемент();
			Для А=1 По Метаданные.Календарь() Цикл
				Имя=Метаданные.Календарь(А).Идентификатор;
				
				Если ЭлементМетаданных(Спр,Имя,РодительСпр,0)=0 Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;//М1

	
	//удаление лишних элементов	
	Если Удалять=1 Тогда
		Спр=СоздатьОбъект("Справочник."+Вид());
		Спр.ИспользоватьВладельца(Параметр);
		Спр.ВыбратьЭлементы(1);
		Состояние("Удаление...");
		Пока Спр.ПолучитьЭлемент(1)=1 Цикл
			Если Спр.ПометкаУдаления()=1 Тогда
				Спр.Удалить(1);
				КолТранзакции=КолТранзакции+1;
				Если КолТранзакции%500=0 Тогда
					Состояние("Обработано элементов "+КолТранзакции+" запись...");
					ЗафиксироватьТранзакцию();
					Состояние("Обработано элементов "+КолТранзакции+" продолжение...");
					НачатьТранзакцию();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЗафиксироватьТранзакцию();
//	Прогрессор(0);//************ прогрессор
КонецПроцедуры
	
//_____________________________________________________________________________
Процедура ЗагрузитьДерево(Кол,Список,Уровень,РежИсторий,РежУровней)
	КоличЦЦ=Число(Лев(Т.ПолучитьСтроку(Кол),10));Кол=Кол+1;   
	Для ЦЦ=1 по КоличЦЦ Цикл
		Если Кол>КоличествоСтрок Тогда
			Возврат;
		КонецЕсли;
		ИмяОбъекта=Сокрлп(Т.ПолучитьСтроку(Кол));Кол=Кол+1;
		Если Уровень=1 Тогда
			ИмяТипаОбъекта=ИмяОбъекта;
			МаксУровень=Число(РежУровней.Получить(ИмяТипаОбъекта));
			ПризнИстории=Число(РежИсторий.Получить(ИмяТипаОбъекта));
			Состояние("Обработка объекта "+ИмяТипаОбъекта);
		Иначе
			МаксУровень=РежУровней;
			ПризнИстории=РежИсторий;
		КонецЕсли;
		
		Если Уровень=МаксУровень Тогда
			Если ПризнИстории=1 Тогда
			    Кол=Кол+1;//пропускаем режим историй
			КонецЕсли;
		КонецЕсли;
		
		
		Если Уровень<МаксУровень Тогда
			ТабПодГрупп=СоздатьОбъект("СписокЗначений");
			Список.ДобавитьЗначение(ТабПодГрупп,ИмяОбъекта);
			ТабПодГрупп.ДобавитьЗначение(Список,ИмяСсылкиРодителя);//добавление ссылки на родительский список
			ЗагрузитьДерево(Кол,ТабПодГрупп,Уровень+1,ПризнИстории,МаксУровень);
		Иначе
			Список.ДобавитьЗначение(ИмяОбъекта,ИмяОбъекта);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //ЗагрузитьДерево
//_____________________________________________________________________________

Процедура ЗаполнитьТаблицуЗагрузкиИзФайла(Кол)
	ТипФайлаШапки=0;
	Если Прав(Сокрп(Файл),3)="xml" Тогда
		ТипФайлаШапки=2;
		ЗагрузкаXML();
	    Возврат;
	КонецЕсли;
	ОписаниеБазы="";  
	Т=СоздатьОбъект("Текст");
	Попытка
		Если ФС.СуществуетФайл(Файл)=0 Тогда
			Возврат ;
		Иначе
			Т.Открыть(Файл);
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;
	ТипФайлаШапки=1;
	
	СписокЗагрузки=СоздатьОбъект("СписокЗначений");
	ОписаниеБазы=СтрЗаменить(Т.ПолучитьСтроку(16),"$-Нов.стр-$",РазделительСтрок);
	ОписаниеБазы=СтрЗаменить(ОписаниеБазы," &Enter ",РазделительСтрок);
	Если Сокрлп(ОписаниеБазы)="" Тогда
		Форма.КнПолучитьОписание.Видимость(0);
	Иначе
		Форма.КнПолучитьОписание.Видимость(1);
	КонецЕсли;
	
	Если Число(Сокрлп(Лев(Т.ПолучитьСтроку(Кол+1),10)))>0 Тогда
		Возврат;
	КонецЕсли;
	КоличествоСтрок=Т.КоличествоСтрок();
	
	//Подготовка данных (особенностей) для загрузки дерева структуры
	ВерсияПакета=Сокрлп(Т.ПолучитьСтроку(1));
	СписокУровней=СоздатьОбъект("СписокЗначений");
	СписокУровней.ДобавитьЗначение(4,"Документы");
	СписокУровней.ДобавитьЗначение(4,"Планы счетов");
	СписокУровней.ДобавитьЗначение(2,"Константы");
	СписокУровней.ДобавитьЗначение(2,"Виды расчетов");
	СписокУровней.ДобавитьЗначение(2,"Календари");
	СписокУровней.ДобавитьЗначение(3,"Справочники");
	СписокУровней.ДобавитьЗначение(3,"Журналы расчетов");
	СписокУровней.ДобавитьЗначение(3,"Операции");
	СписокУровней.ДобавитьЗначение(3,"Перечисления");
	Если ВерсияПакета="1.04" Тогда
		СписокУровней.ДобавитьЗначение(4,"Регистры");
	Иначе
		СписокУровней.ДобавитьЗначение(3,"Регистры");
	КонецЕсли;
	
	СписокИсторий=СоздатьОбъект("СписокЗначений");
	СписокИсторий.ДобавитьЗначение(1,"Справочники");
	СписокИсторий.ДобавитьЗначение(1,"Журналы расчетов");
	СписокИсторий.ДобавитьЗначение(1,"Константы");
	СписокИсторий.ДобавитьЗначение(1,"Виды расчетов");
	СписокИсторий.ДобавитьЗначение(1,"Календари");

	ЗагрузитьДерево(Кол,СписокЗагрузки,1,СписокИсторий,СписокУровней);
	
	ПросмотрДерева(СписокЗагрузки);
	НавигацияПриСменеРодителя(Родитель);
КонецПроцедуры //ЗагрузитьШапку

//_____________________________________________________________________________
Процедура ЗаполнитьМасДоступа(НовРодитель="")
	//*********************************************************************************
	//подготавливаем вспомогательный массив прямого доступа к объекту метаданных
	Для А=1 По 10 Цикл
		МасДоступа[А]="";
	КонецЦикла;
	
	Если ПустоеЗначение(НовРодитель)=1 Тогда
		НовРодитель=НовыйРодитель;
	КонецЕсли;
	Если ПустоеЗначение(НовРодитель)=1 Тогда
		Возврат;
	КонецЕсли;
	А=НовРодитель.Уровень();
	ТекРодитель=НовРодитель;
	Пока А>=1 Цикл
		МасДоступа[А]=ТекРодитель.Наименование;
		МасСинонимов[А]=ТекРодитель.Синоним;
		МасПризнаков[А]=ТекРодитель.ПризнакЗагрузки;
		ТекРодитель=ТекРодитель.Родитель;
		А=А-1;
	КонецЦикла;
	//*********************************************************************************
КонецПроцедуры 

//_____________________________________________________________________________


Процедура ПриВыбореРодителя(Спр)
	СчетчикОбновлений=0;
	НовыйРодитель=Спр;
	КонтрольКолонок(Спр);
	ЗаполнитьМасДоступа();
	ВидимостьКнЗагрузитьПример=0;
	Если МасДоступа[1]="Документы" Тогда
	    Если Спр.Уровень()=3 Тогда
			ВидимостьКнЗагрузитьПример=1;
	    КонецЕсли;
	ИначеЕсли МасДоступа[1]="Справочники" Тогда
	    Если Спр.Уровень()=2 Тогда
			ВидимостьКнЗагрузитьПример=1;
	    КонецЕсли;
	КонецЕсли;
    Форма.КнЗагрузитьПример.Видимость(ВидимостьКнЗагрузитьПример);
	НавигацияПриСменеРодителя(Спр);
КонецПроцедуры


//_____________________________________________________________________________
Процедура ПозиционированиеТаблицы()
	//Колонка=Таб.ТекущаяКолонка();
	//Если Колонка<>"Наименование" Тогда
	//	//т.е. первый раз выходим
	//    Таб.ТекущаяКолонка("Наименование");
	//	НомПозиционированияВТабл=0;
	//	Возврат;
	//КонецЕсли;
	//
	//Если НомПозиционированияВТабл<2 Тогда
	//	НомПозиционированияВТабл=НомПозиционированияВТабл+1;
	//    Возврат;
	//КонецЕсли;
	
	Если ПоследняяПозиция<>"" Тогда
	Если ПоследняяПозиция<>Таб.ТекущаяСтрока() Тогда
	    Возврат;
	КонецЕсли;
	КонецЕсли;
	
	
	ТекСиноним=Сокрлп(Синоним);
	Если ТекСиноним="" Тогда
		ТекСиноним=Сокрлп(Наименование);
	КонецЕсли;
	Если ТипФайлаШапки=2 Тогда//подстройка под XML
		//не используем всякие знаки
		ТекСиноним=СтрЗаменить(ТекСиноним," ","_");
		ТекСиноним=СтрЗаменить(ТекСиноним,"#","_");
		//не используем выражения 
		НомСк=Найти(ТекСиноним,"[");
		Если НомСк>0 Тогда
			ТекСиноним=Лев(ТекСиноним,НомСк-1);
		КонецЕсли;
		//справа
		НомСк=Найти(ТекСиноним,"]");
		Если НомСк>0 Тогда
			ТекСиноним=Сред(ТекСиноним,НомСк+1);
		КонецЕсли;
		//выбираем самый последний уровень
		КолВхождений=СтрЧислоВхождений(ТекСиноним,"/");
		Если КолВхождений>0 Тогда
			Для А=1 По КолВхождений Цикл
		    ТекСиноним=Сред(ТекСиноним,Найти(ТекСиноним,"/")+1);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Стр="";
	Рез=Таб.НайтиЗначение(ТекСиноним,Стр,"Наименование");
	Если Рез=1 Тогда
	    Таб.ТекущаяСтрока(Стр);
	КонецЕсли;
	ПоследняяПозиция=Таб.ТекущаяСтрока();
КонецПроцедуры //ПозиционированиеТаблицы
//_____________________________________________________________________________


Процедура НавигацияПриСменеРодителя(Спр)
	ПоследняяПозиция="";
	Выход=1;
	Если ТипЗначения(Параметр)=11 Тогда
		Если Параметр.Выбран()=1 Тогда
			Если Таб.КоличествоСтрок()>0 Тогда
				Выход=0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Выход=1 Тогда
		Возврат;
	КонецЕсли;
	
	
	ТекСписок=СписокЗагрузки;
	Если ТипЗначенияСтр(ТекСписок)="СписокЗначений" Тогда
		Для А=1 По Спр.Уровень() Цикл
			//по массиву родителей находим требуемый список загрузки - реквизитов, видов и т.д.
			Имя=Сокрлп(МасСинонимов[А]);
			Если Имя="" Тогда
				Имя=Сокрлп(МасДоступа[А]);
			ИначеЕсли Имя="*" Тогда
			    Продолжить;
			КонецЕсли;
			
			Если ТипФайлаШапки=2 Тогда//подстройка под XML
				Имя=СтрЗаменить(Имя," ","_");
				Имя=СтрЗаменить(Имя,"#","_");
				//убиваем весь текст в квадратных скобках "[]"
				//слева
				НомСк=Найти(Имя,"[");
				Если НомСк>0 Тогда
				    Имя=Лев(Имя,НомСк-1);
				КонецЕсли;
				//справа
				НомСк=Найти(Имя,"]");
				Если НомСк>0 Тогда
				    Имя=Сред(Имя,НомСк+1);
				КонецЕсли;
			КонецЕсли;
			
			Для Б=1 По СтрЧислоВхождений(Имя,"/") Цикл
				БлижайшееВхождение=Найти(Имя,"/");
				Имя2=Лев(Имя,БлижайшееВхождение-1);
				ТекСписок=ТекСписок.Получить(Имя2);
				Имя=Сред(Имя,БлижайшееВхождение+1);
			КонецЦикла;
			Попытка
				ТекСписок=ТекСписок.Получить(Имя);
			Исключение
				ТекСписок="";
				Прервать;
			КонецПопытки;
		КонецЦикла;
		
		//проверка корректности сопоставления
		Если ТипЗначенияСтр(ТекСписок)<>"СписокЗначений" Тогда
			ТекСписок=СоздатьОбъект("СписокЗначений"); 
			ТекСписок.ДобавитьЗначение(СписокЗагрузки,ИмяСсылкиРодителя);
		КонецЕсли;
		ПросмотрДерева(ТекСписок);
	КонецЕсли;
КонецПроцедуры 
	
//_____________________________________________________________________________

Процедура ПриОткрытии()
	//Сортировка("Код");
	Форма.КнНазад.Доступность(0);
	Форма.КнЗагрузитьПример.Видимость(0);
	РедактироватьВДиалоге(0,1);
	КонтрольКолонок(ТекущийЭлемент());
	Файл="";
	Параметр=Форма.Параметр;
	Если ТипЗначения(Параметр)=11 Тогда
		Если Параметр.Вид()="ПериферийныеБазы" Тогда
			//ищем файл шапки
			Файл=СокрЛП(Параметр.ПутьКБазеПриЗагрузке)+"\header.mod";
			Если ФС.СуществуетФайл(Файл)=0 Тогда
				//ищем файл с именем следующего номера пакета
				Файл=СокрЛП(Параметр.ПутьКБазеПриЗагрузке)+"\"+СокрЛП(Число(Параметр.НомерПакетаЗагрузки))+".mod";
				Если ФС.СуществуетФайл(Файл)=0 Тогда
					//ищем любой текстовый файл
					Файл=СокрЛП(Параметр.ПутьКБазеПриЗагрузке)+"\"+Сокрлп(ФС.НайтиПервыйФайл(СокрЛП(Параметр.ПутьКБазеПриЗагрузке)+"\*.mod"));
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;  
	
	Если ФС.СуществуетФайл(Файл)=0 Тогда
		Файл="";
	КонецЕсли;
	
	Если ТипЗначения(Параметр)=11 Тогда
		Если Параметр.Выбран()=1 Тогда
			ИспользоватьВладельца(Параметр,0); 
		КонецЕсли;
	КонецЕсли;

    ЗаполнитьТаблицуЗагрузкиИзФайла(33);
	ПриВыбореРодителя(Родитель);
КонецПроцедуры

//_____________________________________________________________________________

Процедура ОчиститьКолонку()
	Колонка=Форма.ТекущаяКолонка();
	Если Колонка="Наименование" Тогда
		Возврат;
	ИначеЕсли Колонка="История" Тогда
		Возврат;
	ИначеЕсли Колонка="Синхронизация" Тогда
		Возврат;
	ИначеЕсли Колонка="Пример" Тогда
		Возврат;
	КонецЕсли;
	Режим=0;
	//Если Колонка="Движения" Тогда
	//	Режим=0;//пройдемся только по группам - т.е. не включаем в выборку подчиненные значения
	//КонецЕсли;
	глВыгрБазаМОДЗагр="";
	Спр=СоздатьОбъект("Справочник.ПравилаЗагрузки");
	Спр.ИспользоватьВладельца(Владелец);
	Спр.ИспользоватьРодителя(Родитель);
	Спр.ВыбратьЭлементы();
	НачатьТранзакцию();
	Пока Спр.ПолучитьЭлемент(Режим)=1 Цикл
		Если Спр.Блокировка(1)=1 Тогда
			Спр.УстановитьАтрибут(Колонка,"");
			Спр.Записать();
		Иначе
			УстановитьАтрибут(Колонка,"");
		КонецЕсли;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	Форма.Обновить(); //Но все равно почему-то не обновляет ?????
КонецПроцедуры //ОчиститьКолонку

//_____________________________________________________________________________
//копирование по текущему элементу
Процедура Установить()
	Колонка=Форма.ТекущаяКолонка();
	Если Колонка="Наименование" Тогда
		Возврат;
	ИначеЕсли Колонка="История" Тогда
		Возврат;
	ИначеЕсли Колонка="Синхронизация" Тогда
		Возврат;
	ИначеЕсли Колонка="Пример" Тогда
		Возврат;
	КонецЕсли;
	
	
	Режим=0;
	//Если Колонка="Движения" Тогда
	//	Режим=0;//пройдемся только по группам - т.е. не включаем в выборку подчиненные значения
	//КонецЕсли;
	глВыгрБазаМОДЗагр="";
	Спр=СоздатьОбъект("Справочник.ПравилаЗагрузки");
	Спр.НайтиЭлемент(ТекущийЭлемент());
	КакоеТоЗначение=Спр.ПолучитьАтрибут(Колонка);
	ТипЗначенияКопир=МойТип(КакоеТоЗначение);
	Спр.ИспользоватьВладельца(Владелец);
	Спр.ИспользоватьРодителя(Родитель);
	Спр.ВыбратьЭлементы();
	НачатьТранзакцию();
	Пока Спр.ПолучитьЭлемент(Режим)=1 Цикл
		Если Спр.Блокировка(1)=1 Тогда
			//а здесь мы устанавливаем значения только для совпадающих типов
			Тип=МойТип(Спр.ПолучитьАтрибут(Колонка));
			Если Тип=ТипЗначенияКопир Тогда
				Спр.УстановитьАтрибут(Колонка,КакоеТоЗначение);
			КонецЕсли;
			Спр.Записать();
		Иначе
			Тип=МойТип(Спр.ПолучитьАтрибут(Колонка));
			Если Тип=ТипЗначенияКопир Тогда
				УстановитьАтрибут(Колонка,КакоеТоЗначение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	Форма.Обновить(); //Но все равно почему-то не обновляет ?????
КонецПроцедуры
//_____________________________________________________________________________


Процедура УстановитьТипЯчейки() //интерактивная установка типа
	Если ЭтоГруппа()=1 Тогда
		Возврат;
	КонецЕсли;
	Если Выбран()=0 Тогда
		Возврат;
	КонецЕсли;
	Список=СоздатьОбъект("СписокЗначений");
	//	Список.ДобавитьЗначение("Уст.автомически");
	Список.ДобавитьЗначение("Число");
	Список.ДобавитьЗначение("Строка");
	Список.ДобавитьЗначение("Дата");
	Список.ДобавитьЗначение("Перечисление");
	Список.ДобавитьЗначение("Справочник");
	Список.ДобавитьЗначение("Документ");
	Список.ДобавитьЗначение("Счет");
	Список.ДобавитьЗначение("ВидСубконто");
	Список.ДобавитьЗначение("Календарь");
	Список.ДобавитьЗначение("ВидРасчета");
	Список.ДобавитьЗначение("Очистить");
	Выбр=0;
	Длина=10;
	Точность=0;
	Список.ВыбратьЗначение(Выбр,"Выберите нужный тип",,,1);
	Выбр2="";
	Рез=1;
	
	Если Выбр="Уст.автомически" Тогда
		//		УстановкаТипа();
		Возврат;
	ИначеЕсли Выбр="Справочник" Тогда
		Список=СоздатьОбъект("СписокЗначений");
		Список.ДобавитьЗначение("","<неопределенного вида>");
		Для А=1 По Метаданные.Справочник() Цикл
			Имя=Метаданные.Справочник(А).Идентификатор;
			Список.ДобавитьЗначение(""+Имя);
		КонецЦикла;
		Рез=Список.ВыбратьЗначение(Выбр2,"Выберите нужный вид",,,0);
	ИначеЕсли Выбр="Документ" Тогда
		Список=СоздатьОбъект("СписокЗначений");
		Список.ДобавитьЗначение("","<неопределенного вида>");
		Для А=1 По Метаданные.Документ() Цикл
			Имя=Метаданные.Документ(А).Идентификатор;
			Список.ДобавитьЗначение(""+Имя);
		КонецЦикла;
		Рез=Список.ВыбратьЗначение(Выбр2,"Выберите нужный вид",,,0);
	ИначеЕсли Выбр="Перечисление" Тогда
		Список=СоздатьОбъект("СписокЗначений");
		Для А=1 По Метаданные.Перечисление() Цикл
			Имя=Метаданные.Перечисление(А).Идентификатор;
			Список.ДобавитьЗначение(""+Имя);
		КонецЦикла;
		Рез=Список.ВыбратьЗначение(Выбр2,"Выберите нужный вид",,,0);
	ИначеЕсли (Выбр="Число")ИЛИ(Выбр="Строка") Тогда
		Рез=ВвестиЧисло(Длина,"Введите длину",3,0);
		Если Рез<>1 Тогда
			Возврат;
		КонецЕсли;
		Если Выбр="Число" Тогда
			Рез=ВвестиЧисло(Точность,"Введите точность",3,0);
			Если Рез<>1 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Выбр="Дата" Тогда
	ИначеЕсли Выбр="Счет" Тогда
	ИначеЕсли Выбр="Очистить" Тогда
	ИначеЕсли Выбр="ПланСчетов" Тогда
	ИначеЕсли Выбр="ВидСубконто" Тогда
	ИначеЕсли Выбр="Календарь" Тогда
	ИначеЕсли Выбр="ВидРасчета" Тогда
	ИначеЕсли Выбр="...другое" Тогда
		Выбр="";
		Рез=ВвестиСтроку(Выбр,"Напишите необходимый тип и вид:",100);
	Иначе
		Возврат;
	КонецЕсли;
	
	ТипВид=Выбр;
	Если Выбр2<>"" Тогда
		ТипВид=Выбр+"."+Выбр2;
	КонецЕсли;
	Если Рез=0 Тогда
		Возврат;
	КонецЕсли;
	
	Спр=СоздатьОбъект("Справочник."+Вид());
	Спр.НайтиЭлемент(ТекущийЭлемент());
	Спр.НазначитьТип("Условие",ТипВид,Длина,Точность);
	Спр.НазначитьТип("Значение",ТипВид,Длина,Точность);
	Спр.Записать();
	
КонецПроцедуры //УстановитьТипЯчейки

//_____________________________________________________________________________

Процедура УстановитьАтрибутУРодителей(Спр,Атрибут)
	Спр2=СоздатьОбъект("Справочник."+Вид());
	РодительСпр=Спр.Родитель;
	Пока РодительСпр.Выбран()=1 Цикл
		Спр2.НайтиЭлемент(РодительСпр);
		Спр2.УстановитьАтрибут(Атрибут,ДаДа);
		Спр2.Записать();
		РодительСпр=Спр2.Родитель;
	КонецЦикла;
КонецПроцедуры //УстановитьАтрибутУРодителей

Процедура ПриНачалеРедактированияСтроки()
	СчетчикОбновлений=0;
	Если Выбран()=0 Тогда
		Возврат;
	КонецЕсли;
	глВыгрБазаМОДЗагр="";
	АктивЭлемент=Форма.ТекущаяКолонка();
	
	Если (АктивЭлемент="Синхронизация") Тогда
		Спр=СоздатьОбъект("Справочник.ПравилаЗагрузки");
		Спр.НайтиЭлемент(ТекущийЭлемент());
		Если Спр.Синхронизация=ДаДа Тогда
			Спр.Синхронизация="-";
		ИначеЕсли Спр.Синхронизация="-" Тогда
			//Спр1=СоздатьОбъект("Справочник.ПравилаЗагрузки");
			//Спр1.ИспользоватьРодителя(Спр.Родитель);
			//Спр1.ИспользоватьВладельца(Спр.Владелец);
			//Спр1.НайтиПоРеквизиту("Синхронизация",ДаДа,0);
			//Если Спр1.Выбран()>0 Тогда
			//	Спр1.Синхронизация="-";
			//	Спр1.Записать();
			//КонецЕсли;
			Спр.ВклЗначение="";
			Спр.ВклУсловие="";
			Спр.Синхронизация=ДаДа;
		КонецЕсли;
		Спр.Записать();
		Форма.Обновить();
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	Если АктивЭлемент="ЗагрузкаСчетов" Тогда
		АктивЭлемент="Движения";
	КонецЕсли;            
	
	Если (АктивЭлемент="ВклУсловие")     ИЛИ
	(АктивЭлемент="ПризнакЗагрузки")ИЛИ
	(АктивЭлемент="Движения")ИЛИ
	(АктивЭлемент="ВклЗначение") ИЛИ
	(АктивЭлемент="ВклОбновление") Тогда
		Спр=СоздатьОбъект("Справочник.ПравилаЗагрузки");
		Спр.НайтиЭлемент(ТекущийЭлемент());
		Зн=Сокрлп(Спр.ПолучитьАтрибут(АктивЭлемент));
		Если Зн=ДаДа Тогда
			Спр.УстановитьАтрибут(АктивЭлемент,НетНет);
		Иначе
			Спр.УстановитьАтрибут(АктивЭлемент,ДаДа);
			УстановитьАтрибутУРодителей(Спр,"ПризнакЗагрузки");
			Если Спр.История=ДаДа Тогда
				Спр.История="-";
			КонецЕсли;
			Если Спр.Синхронизация=ДаДа Тогда
				Спр.ВклЗначение="";
				Спр.ВклУсловие="";
			КонецЕсли;
		КонецЕсли;
		    
		Спр.Записать();
		СтатусВозврата(0);
	ИначеЕсли	(АктивЭлемент="История") Тогда
		Спр=СоздатьОбъект("Справочник.ПравилаЗагрузки");
		Спр.НайтиЭлемент(ТекущийЭлемент());
		Если Спр.ПолучитьАтрибут(АктивЭлемент)=ДаДа Тогда
			Спр.УстановитьАтрибут(АктивЭлемент,"-");
		ИначеЕсли Спр.ПолучитьАтрибут(АктивЭлемент)="-" Тогда
			Спр.УстановитьАтрибут(АктивЭлемент,ДаДа);
		КонецЕсли;
		Спр.ВклЗначение="";
		Спр.ВклУсловие="";
		Спр.Записать();
		СтатусВозврата(0);
	ИначеЕсли	(АктивЭлемент="Значение")Тогда
		Если ТипЗначения(Значение)=0 Тогда
			УстановитьТипЯчейки();
		КонецЕсли;
	ИначеЕсли	(АктивЭлемент="Условие")Тогда
		Если ТипЗначения(Условие)=0 Тогда
			УстановитьТипЯчейки();
		КонецЕсли;
	КонецЕсли;
	
	
	
	Если (Наименование="Родитель") Тогда
		СпрВладелец="";
		Если (АктивЭлемент="Условие")ИЛИ(АктивЭлемент="Значение") Тогда
			Попытка
				Спр1=СоздатьОбъект("Справочник."+Родитель.Наименование);
				Если ТипЗначения(Спр1.Владелец)=11 Тогда
					Вид=Спр1.Владелец.Вид();
					Спр=СоздатьОбъект("Справочник."+Вид);
					Спр.НайтиЭлемент(СпрВладелец);
					Спр.Выбрать("Выберите владельца !","");
					СпрВладелец=Спр.ТекущийЭлемент();
					Спр1.ИспользоватьВладельца(СпрВладелец);
					Спр1.ВыборГруппы(1);
					Спр1.Выбрать("Выберите родителя !","");
					Спр2=СоздатьОбъект("Справочник.ПравилаЗагрузки");
					Спр2.НайтиЭлемент(ТекущийЭлемент());
					Если АктивЭлемент="Условие" Тогда
						Спр2.Условие=Спр1.ТекущийЭлемент();
					КонецЕсли;
					Если АктивЭлемент="Значение" Тогда
						Спр2.Значение=Спр1.ТекущийЭлемент();
					КонецЕсли;
					Спр2.Записать();
					СтатусВозврата(0);
					Возврат;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		Если АктивЭлемент="Условие" Тогда
			Форма.Условие.ВыборГруппы(1);
		КонецЕсли;
		Если АктивЭлемент="Значение" Тогда
			Форма.Значение.ВыборГруппы(1);
		КонецЕсли;
	Иначе
		Если АктивЭлемент="Значение" Тогда
			Форма.Значение.ВыборГруппы(1);
		КонецЕсли;
	КонецЕсли;
	
	
	
	
КонецПроцедуры
//_____________________________________________________________________________

Процедура ПриЗаписи()
	глВыгрБазаМОДЗагр="";
	//здесь проверяем чтобы родитель был группой !!!
	АктивЭлемент=Форма.ТекущаяКолонка();
	Попытка
		Если Наименование="Родитель" Тогда
			Если АктивЭлемент="Условие" Тогда
				Если ТипЗначения(Условие)=11 Тогда
					Если Условие.ЭтоГруппа()=0 Тогда
						Условие="";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если АктивЭлемент="Значение" Тогда
				Если ТипЗначения(Значение)=11 Тогда
					Если Значение.ЭтоГруппа()=0 Тогда
						Значение="";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	//а здесь по умолчанию ставим некоторые признаки
	Если (АктивЭлемент="Значение") Тогда
		Если Сокрлп(ВклЗначение)=НетНет Тогда
			Если Сокрлп(Значение)<>"" Тогда
				ВклЗначение=ДаДа;
				ПризнакЗагрузки=ДаДа;
			КонецЕсли;
		Если История=ДаДа Тогда
		    История="-";
		КонецЕсли;
		КонецЕсли;
	ИначеЕсли (АктивЭлемент="Условие") Тогда
		Если Сокрлп(ВклУсловие)=НетНет Тогда
			Если Сокрлп(Условие)<>"" Тогда
				ВклУсловие=ДаДа;
				ПризнакЗагрузки=ДаДа;
			КонецЕсли;
		Если История=ДаДа Тогда
		    История="-";
		КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//_____________________________________________________________________________
Функция ПолучитьКомментарий()
	ПозиционированиеТаблицы();//обработка по синхронизации сопоставляемых объектов
	Тип=ТипЗначения(Значение);
	Если (Тип>9)И(Тип<13) Тогда
		Вид=Значение.Вид();
		Возврат  ТипЗначенияСтр(Значение)+?(Вид="","","."+Вид);
	Иначе
		Возврат ТипЗначенияСтр(Значение);
	КонецЕсли;
КонецФункции //ПолучитьКомментарий

//_____________________________________________________________________________
Процедура Копировать(Источник="",РодительПриемника="",Транзакция=1)
	глВыгрБазаМОДВыгр="";
	Если Транзакция=1 Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Если Источник="" Тогда
		Источник=ТекущийЭлемент();
	КонецЕсли;
	Если РодительПриемника="" Тогда
		РодительПриемника=ТекущийЭлемент().Родитель;
	КонецЕсли;
	
	Спр=СоздатьОбъект("Справочник."+Вид());
	Спр.ИспользоватьВладельца(Параметр);
	
	СпрИсточник=СоздатьОбъект("Справочник."+Источник.Вид());
	СпрИсточник.ИспользоватьВладельца(Источник.Владелец);
	
	Если Источник.ЭтоГруппа()=1 Тогда
		глСоздатьНовуюГруппу(Спр);
	Иначе
		глСоздатьНовыйОбъект(Спр);
	КонецЕсли;         
	
	Спр.Родитель=РодительПриемника;
	Спр.Код=Источник.Код;
	Спр.Наименование=Источник.Наименование;
	
	//------------------------- вставим кусок копирования из формы периф. баз
	Для ы=1 по Метаданные.Справочник(Вид()).Реквизит() Цикл
		Атрибут=Сокрлп(Метаданные.Справочник(Вид()).Реквизит(ы));
		Попытка
			Реквизит=Источник.ПолучитьАтрибут(Атрибут);
		Исключение
			Если Атрибут="ПризнакЗагрузки" Тогда
				Реквизит=Источник.ПризнакВыгрузки;
			ИначеЕсли Атрибут="ПризнакВыгрузки" Тогда
				Реквизит=Источник.ПризнакЗагрузки;
			Иначе
				Реквизит="";
			КонецЕсли;
		КонецПопытки;
		Если (Атрибут="Условие")ИЛИ(Атрибут="Значение") Тогда
			Тип=ТипЗначения(Реквизит);
			СтрТип=ТипЗначенияСтр(Реквизит);
			Точность=0;
			Длина=0;
			Если (Тип>9)И(Тип<13) Тогда   //перечисление, справочник, документ
				СтрТип=СтрТип+"."+Сокрлп(Реквизит.Вид());
			ИначеЕсли Тип=1 Тогда  //число
				//определяем точность
				Пока Реквизит<>Окр(Реквизит,Точность) Цикл
					Точность=Точность+1;
				КонецЦикла;
				//определяем длину
				Длина=СтрДлина(Сокрлп(Строка(Реквизит)))+1;
			ИначеЕсли Тип=2 Тогда //строка
				//определяем длину
				Длина=СтрДлина(Сокрлп(Строка(Реквизит)))+10;
			КонецЕсли;
			Спр.НазначитьТип(Атрибут,СтрТип,Длина,Точность);
		КонецЕсли;
		Спр.УстановитьАтрибут(Атрибут,Реквизит);
	КонецЦикла;
	//-----------------------------------------------------------------------------
	
	Константа.УникальныйIDD=Число(Константа.УникальныйIDD)+1;
  	Спр.IDD=Прав("0000000"+СокрЛП(Константа.IDD),7)+прав("0000000000"+СокрЛП(Константа.УникальныйIDD),10);
	
	Спр.Записать();
	
	Если Источник.ЭтоГруппа()=1 Тогда
		СпрИсточник.ИспользоватьРодителя(Источник);
		СпрИсточник.ВключатьПодчиненные(0);
		СпрИсточник.ВыбратьЭлементы();
		Пока СпрИсточник.ПолучитьЭлемент()=1 Цикл
			Копировать(СпрИсточник.ТекущийЭлемент(),Спр.ТекущийЭлемент(),0);
		КонецЦикла;
	КонецЕсли;
	
	Если Транзакция=1 Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры//копировать

//_____________________________________________________________________________

Процедура Вставить()
	глСпр=глБуферОбменаДляМОД;
	
	Если ТипЗначения(глСпр)<>11 Тогда
		Возврат;
	КонецЕсли;  
	
	Если глСпр.Вид()<>Вид() Тогда
//		Возврат;
	КонецЕсли;  
	
	Если глСпр.Выбран()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Копировать(глСпр,НовыйРодитель);
КонецПроцедуры

//_____________________________________________________________________________
Процедура Запомнить()
	глБуферОбменаДляМОД=ТекущийЭлемент();
КонецПроцедуры
//_____________________________________________________________________________ 

Процедура ВсеСтрокиБазы()
	Список=СоздатьОбъект("СписокЗначений");
	Список.ДобавитьЗначение("ВсеСтрокиБазы","Команда");
	Список.ДобавитьЗначение(Параметр,"База");
	Список.ДобавитьЗначение(ТекущийЭлемент(),"Элемент");
	ОткрытьФорму("Обработка.ВсеБазы",Список)
	//	ОткрытьФорму("Обработка",Список,"ВсеБазы.ert")
КонецПроцедуры //
//_____________________________________________________________________________
Процедура СтрокаУВсехБаз()
	Список=СоздатьОбъект("СписокЗначений");
	Список.ДобавитьЗначение("СтрокаУВсехБаз","Команда");
	Список.ДобавитьЗначение(ТекущийЭлемент(),"Элемент");
	ОткрытьФорму("Обработка.ВсеБазы",Список)
КонецПроцедуры //
//_____________________________________________________________________________
Процедура УдалитьСтроки()
	НачатьТранзакцию();
	Спр=СоздатьОбъект("Справочник."+Вид());
	Спр.ИспользоватьВладельца(Параметр);
	Если ПустоеЗначение(НовыйРодитель)=0 Тогда
		Спр.ИспользоватьРодителя(НовыйРодитель);//удаляем толко в пределах подчинения	
	КонецЕсли;
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()=1 Цикл
//		    Признак=Спр.ПризнакЗагрузки;
		    Признак=Спр.ПризнакЗагрузки;
	    Если Признак<>ДаДа Тогда
	        Спр.Удалить(1);
	    КонецЕсли;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
КонецПроцедуры //УдалитьСтроки

//_____________________________________________________________________________
Процедура ГрупповоеРедактирование()
	Список=СоздатьОбъект("СписокЗначений");	
	Список.ДобавитьЗначение(1,"Строка во всех объектах");
	Список.ДобавитьЗначение(2,"Строка во всех базах");
	Список.ДобавитьЗначение(3,"Удалить неиспользуемые объекты");
	Выбр=0;
	Если Список.ВыбратьЗначение(Выбр,"Просмотреть ...",,,1)=1 Тогда
		Если Выбр=1 Тогда
			ВсеСтрокиБазы();
		ИначеЕсли Выбр=2 Тогда
			СтрокаУВсехБаз();
		ИначеЕсли Выбр=3 Тогда
			УдалитьСтроки();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ГрупповоеРедактирование
//_____________________________________________________________________________

//_____________________________________________________________________________
Процедура ПолучитьОписание()
	Если Сокрлп(ОписаниеБазы)<>"" Тогда
		Предупреждение(ОписаниеБазы,100);
	КонецЕсли;
КонецПроцедуры 

//_____________________________________________________________________________
//изменить порядок загрузки (выгрузки) реквизита 
//т.е. на один реквизит позже или раньше
Процедура ПорядокОбмена(Направление)   //+1 сдвинуть вниз, -1 сдвинуть вверх на один элемент
	Если Выбран()=1 Тогда
		Спр=СоздатьОбъект("Справочник."+Вид());    
		Спр.ИспользоватьВладельца(Параметр);
		Спр.ИспользоватьРодителя(Родитель);
		Спр.ПорядокКодов();
		Спр.ВыбратьЭлементы();
		СписокСпр=СоздатьОбъект("СписокЗначений");
		НомерПозиции=0;
		Пока Спр.ПолучитьЭлемент(0)=1 Цикл
			СписокСпр.ДобавитьЗначение(Спр.ТекущийЭлемент());
			Если Спр.ТекущийЭлемент()=ТекущийЭлемент() Тогда
				НомерПозиции=СписокСпр.РазмерСписка();
			КонецЕсли;
		КонецЦикла;
		
		Размер=СписокСпр.РазмерСписка();
		Если Направление=1 Тогда
			Если Размер<>НомерПозиции Тогда
				СписокСпр.СдвинутьЗначение(1,НомерПозиции); //сдвигаем вниз на единицу
			Иначе
				СписокСпр.СдвинутьЗначение(1-НомерПозиции,НомерПозиции); //сдвигаем на самое первое место !!
			КонецЕсли;
		Иначе
			Если 1<>НомерПозиции Тогда
				СписокСпр.СдвинутьЗначение(-1,НомерПозиции); //сдвигаем вверх на единицу
			Иначе      
				СписокСпр.ДобавитьЗначение(СписокСпр.ПолучитьЗначение(1));
				Размер=Размер+1;
			КонецЕсли;
		КонецЕсли;
		
		
		НачатьТранзакцию();
		Для А=1 По Размер Цикл
			Элем=СписокСпр.ПолучитьЗначение(А);
			Если Элем.Код<>А Тогда
				Спр.НайтиЭлемент(Элем);
				Спр.Код=А;
				Спр.Записать();
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	глВыгрБазаМОДЗагр="";
	КонецЕсли;	
	Сортировка("Код");
	СчетчикОбновлений=0;
КонецПроцедуры 



//_____________________________________________________________________________
Функция ПолучитьЗначениеЗагрузки(ТекЭлемент="")
	Если Выбран()=1 Тогда
	Если ЭтоГруппа()=0 Тогда
		Если ПризнакЗагрузки=ДаДа Тогда
		Если Лев(Наименование,1)="@" Тогда
			Имя=Сред(Наименование,2,Найти(Наименование,"=")-2);
			Если МасДоступа[1]="Справочники" Тогда
			МоеПолноеНаименование=МасДоступа[1]+"/"+МасДоступа[2]+"/"+Имя;
			Иначе//документы
			МоеПолноеНаименование=МасДоступа[1]+"/"+МасДоступа[2]+"/"+МасДоступа[3]+"/"+Имя;
			КонецЕсли;
		Иначе
			МоеПолноеНаименование=ПолноеНаименование();
		КонецЕсли;
		Рез=СписокЗагруженныхРеквизитов.НайтиЗначение(МоеПолноеНаименование);
		Если Рез<>0 Тогда
		     Стр="";
			 СписокЗагруженныхРеквизитов.ПолучитьЗначение(Рез,Стр);
			 Возврат Стр;
		КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	КонецЕсли;
    Возврат " ";
КонецФункции //ПолучитьЗначениеЗагрузки









//_____________________________________________________________________________
Процедура Вперед()
	Если Выбран()=1 Тогда
		Тип=ТипЗначения(Значение);
		Спр=СоздатьОбъект("Справочник."+Вид());
		Если Тип=11 Тогда //справочник 
			Имя="Справочники";
		ИначеЕсли Тип=12 Тогда //Документ
			Имя="Документы";
		Иначе
			ПодсказкаПользователю(
			"Данная кнопка предназначена для того,
			|чтобы можно было перейти к настройке
			|правил выгрузки объекта, вид которого 
			|совпадает с видом текущего реквизита
			|и имеет тип документа или справочника.", //первое сообщение
			"Текущий реквизит не имеет тип 
			|документа или справочника",//последующие сообщения
			10);
			Возврат;
		КонецЕсли;	
		
		Спр.ИспользоватьВладельца(Параметр);
		Рез=Спр.НайтиПоНаименованию(Имя,1,1);
		Если Рез=1 Тогда
			 Имя=Сокрлп(Значение.Вид());
			 Если ПустоеЗначение(Имя)=0 Тогда
				Спр2=СоздатьОбъект("Справочник."+Вид());
				Спр2.ИспользоватьВладельца(Параметр);
				Спр2.ИспользоватьРодителя(Спр.ТекущийЭлемент());
				Рез=Спр2.НайтиПоНаименованию(Имя,1,1);
				Если Рез=1 Тогда
				     Спр=Спр2;
				КонецЕсли;
			 КонецЕсли;
			 СписокИстории.ДобавитьЗначение(ТекущийЭлемент());
			 Форма.КнНазад.Доступность(1);
			 АктивизироватьОбъект(Спр.ТекущийЭлемент());
			 ПриВыбореРодителя(Спр.Родитель);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //Вперед

	


//_____________________________________________________________________________
Процедура Назад()
	Кол=СписокИстории.РазмерСписка();
	Если Кол>0 Тогда
		ТекЭлемент=СписокИстории.ПолучитьЗначение(Кол);
		СписокИстории.УдалитьЗначение(Кол);
		АктивизироватьОбъект(ТекЭлемент);
		ПриВыбореРодителя(ТекЭлемент.Родитель);
		Если Кол=1 Тогда
			Форма.КнНазад.Доступность(0);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //Назад



//_____________________________________________________________________________
Процедура ЗагрузитьПример()
	Спис=СоздатьОбъект("СписокЗначений");
	Спис.ДобавитьЗначение("Загрузка-Выгрузка","Команда");
	Спис.ДобавитьЗначение(Параметр,"База");
	Спис.ДобавитьЗначение(1,"Загрузка");
	Спис.ДобавитьЗначение(0,"Выгрузка");
	Спис.ДобавитьЗначение(1,"Пример");//признак загрузки из файла "sample.mod"
	НачатьТранЗакцию();
	ВыгрВиды=СоздатьОбъект("СписокЗначений");
	
	
	//проверяем - нужна ли оптимизация
	ЗагрузкаВсехВидов=1;
	ЗагрузкаКалендарей=0;
	ЗагрузкаВидов=0;
	Спр=СоздатьОбъект("Справочник."+Вид());
	Спр.ИспользоватьВладельца(Параметр);
	Если МасДоступа[1]="Справочники" Тогда
	Спр.ИспользоватьРодителя(Родитель);
	Иначе
	Спр.ИспользоватьРодителя(Родитель.Родитель);
	КонецЕсли;
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()=1 Цикл
		Если Спр.ПризнакЗагрузки=ДаДа Тогда
		Если Лев(Спр.Наименование,1)="@" Тогда
				ЗагрузкаВсехВидов=0;
		Иначе
			Тип=ТипЗначения(Спр.Значение);
			Если (Тип>9)И(Тип<13) Тогда
				ВыгрВиды.ДобавитьЗначение(Сокрлп(Спр.Значение.Вид()));
			ИначеЕсли Тип=13 Тогда //Календари
			ЗагрузкаКалендарей=1;
			ИначеЕсли Тип=14 Тогда //Вид расчета
			ЗагрузкаВидов=1;
			КонецЕсли;
		КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ВыгрВиды.ДобавитьЗначение(МасДоступа[2]);
	
	//ОПТИМИЗАЦИЯ ЗАГРУЗКИ ПРИМЕРА!
	
	Если ЗагрузкаВсехВидов=0 Тогда
		Состояние("Подготовка справочника загрузки");
		Спр=СоздатьОбъект("Справочник."+Вид());
		
		//создаем временный папочки, в которых будут содержаться все, участвующие 
		//в обмене виды, но в которых реквизиты имеют упрощенный вид (точнее два реквизита)
		глСоздатьНовуюГруппу(Спр);
		Спр.Наименование="Справочники";
		Спр.Владелец=Параметр;
		Спр.Родитель="";
		Спр.Записать();
		СпрСправочники=Спр.ТекущийЭлемент();
		
		глСоздатьНовуюГруппу(Спр);
		Спр.Наименование="Документы";
		Спр.Владелец=Параметр;
		Спр.Родитель="";
		Спр.Записать();
		СпрДокументы=Спр.ТекущийЭлемент();
		
		
		//переносим туда редактируемый в данный момент объект
		Если МасДоступа[1]="Справочники" Тогда
			Спр.НайтиЭлемент(Родитель);
			Спр.Родитель=СпрСправочники;
			Спр.Записать();
		Иначе//Документы
			Спр.НайтиЭлемент(Родитель.Родитель);
			Спр.Родитель=СпрДокументы;
			Спр.Записать();
		КонецЕсли;
		
		//а у остальных элементов правил отменяем признак загрузки
		Спр1=СоздатьОбъект("Справочник."+Вид());
		Спр1.ИспользоватьВладельца(Параметр);
		Спр1.ПорядокКодов();
		Спр1.ВыбратьЭлементы();
		
		Пока Спр1.ПолучитьЭлемент(0)=1 Цикл //выбираем верхний уровень т.е. Документы,Справочники ...
			Имя=Спр1.Наименование;
			Если (Имя="Справочники")ИЛИ(Имя="Документы") Тогда
				Если Спр1.ПризнакЗагрузки=ДаДа Тогда
					Спр2=СоздатьОбъект("Справочник."+Вид());
					Спр2.ИспользоватьВладельца(Параметр);
					Спр2.ИспользоватьРодителя(Спр1.ТекущийЭлемент());
					Спр2.ПорядокКодов();
					Спр2.ВыбратьЭлементы();
					
					Пока Спр2.ПолучитьЭлемент(0)=1 Цикл //выбираем виды
						Если Спр2.ПризнакЗагрузки=ДаДа Тогда
							глСоздатьНовуюГруппу(Спр);
							Спр.Наименование=Спр2.Наименование;
							//Сообщить(""+Спр.Наименование);
							Спр.Владелец=Параметр;
							Если Имя="Справочники" Тогда
								Спр.Родитель=СпрСправочники;
								Спр.ПризнакЗагрузки=ДаДа;
								Спр.Записать();
								ТекВид=Спр.ТекущийЭлемент();
								глСоздатьНовыйОбъект(Спр);
								
								Спр.Наименование="Код";
								Спр.ПризнакЗагрузки=ДаДа;
								Спр.Владелец=Параметр;
								Спр.Родитель=ТекВид;
								Спр.Записать();
								
								глСоздатьНовыйОбъект(Спр);
								Спр.Наименование="Наименование";
								Спр.ПризнакЗагрузки=ДаДа;
								Спр.Владелец=Параметр;
								Спр.Родитель=ТекВид;
								Спр.Записать();
								
								глСоздатьНовыйОбъект(Спр);
								Спр.Наименование="Владелец";
								Спр.ПризнакЗагрузки=ДаДа;
								Спр.Владелец=Параметр;
								Спр.Родитель=ТекВид;
								Спр.Записать();
								
							Иначе
								Спр.Родитель=СпрДокументы;
								Спр.ПризнакЗагрузки=ДаДа;
								Спр.Записать();
								ТекВид=Спр.ТекущийЭлемент();
								
								глСоздатьНовуюГруппу(Спр);
								Спр.Наименование="Шапка";
								Спр.ПризнакЗагрузки=ДаДа;
								Спр.Владелец=Параметр;
								Спр.Родитель=ТекВид;
								Спр.Записать();
								ТекВид=Спр.ТекущийЭлемент();
								
								глСоздатьНовыйОбъект(Спр);
								Спр.Наименование="НомерДок";
								Спр.ПризнакЗагрузки=ДаДа;
								Спр.Владелец=Параметр;
								Спр.Родитель=ТекВид;
								Спр.Записать();
								
								глСоздатьНовыйОбъект(Спр);
								Спр.Наименование="#ДатаДок";
								Спр.ПризнакЗагрузки=ДаДа;
								Спр.Владелец=Параметр;
								Спр.Родитель=ТекВид;
								Спр.Записать();
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					
				КонецЕсли;
			КонецЕсли;
			Спр1.ПризнакЗагрузки="";
			Спр1.Записать();
		КонецЦикла;
		
		Спр.НайтиЭлемент(СпрСправочники);
		Спр.ПризнакЗагрузки=ДаДа;
		Спр.Записать();
		
		Спр.НайтиЭлемент(СпрДокументы);
		Спр.ПризнакЗагрузки=ДаДа;
		Спр.Записать();
		Состояние("Обработка продолжается...");
	Иначе
		//Отменяем загрузку у ненужных объектов
		НачатьТранЗакцию();
		Спр1=СоздатьОбъект("Справочник."+Вид());
		Спр1.ИспользоватьВладельца(Параметр);
		Спр1.ПорядокКодов();
		Спр1.ВыбратьЭлементы();
		Пока Спр1.ПолучитьЭлемент(0)=1 Цикл //выбираем верхний уровень т.е. Документы,Справочники ...
			Имя=Спр1.Наименование;
			Если (Имя="Перечисления")ИЛИ(Имя="Справочники")ИЛИ(Имя="Документы") Тогда
				Спр2=СоздатьОбъект("Справочник."+Вид());
				Спр2.ИспользоватьВладельца(Параметр);
				Спр2.ИспользоватьРодителя(Спр1.ТекущийЭлемент());
				Спр2.ПорядокКодов();
				Спр2.ВыбратьЭлементы();
				Пока Спр2.ПолучитьЭлемент(0)=1 Цикл //выбираем уровень видов
					ИмяВида=Сокрлп(Спр2.Наименование);
					Если ВыгрВиды.НайтиЗначение(ИмяВида)=0 Тогда
						Спр2.ПризнакЗагрузки="";
						Спр2.Записать();
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли (Имя="Календари")И(ЗагрузкаКалендарей=1)Тогда
			ИначеЕсли (Имя="Виды расчетов")И(ЗагрузкаВидов=1)Тогда
			Иначе
				Спр1.ПризнакЗагрузки="";
				Спр1.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	
	глВыгрБазаМОДЗагр="";
	ОткрытьФорму("Отчет.ОбменДанными#",Спис);
	//ОткрытьФорму("Отчет#",Спис,КаталогИБ()+"ExtForms\ОбменДанными.ert");
	глВыгрБазаМОДЗагр="";
	СписокЗагруженныхРеквизитов=СоздатьОбъект("СписокЗначений");
	БылаЗагрузка=0;
	Для А=1 По МОДПерем1.РазмерСписка() Цикл
		Элемент=МОДПерем1.ПолучитьЗначение(А);
		Если ПустоеЗначение(Элемент)=0 Тогда
			Тип=ТипЗначения(Элемент);
			Если (Тип=11)ИЛИ(Тип=12) Тогда
				Вид=Сокрлп(Элемент.Вид());
				Если Вид=МасДоступа[2] Тогда
					БылаЗагрузка=1;
				КонецЕсли;
				Если Тип=11 Тогда         
					Элемент.ИспользоватьДату(РабочаяДата());
					Имя="#ПомеченНаУдаление";
					Зн=Элемент.ПометкаУдаления();
					СписокЗагруженныхРеквизитов.ДобавитьЗначение("Справочники/"+Вид+"/"+Имя,Строка(Зн));
					
					Имя="#ЭтоГруппа";
					Зн=Элемент.ЭтоГруппа();
					СписокЗагруженныхРеквизитов.ДобавитьЗначение("Справочники/"+Вид+"/"+Имя,Строка(Зн));
					
					Имя="Родитель";
					Зн=Элемент.Родитель;
					СписокЗагруженныхРеквизитов.ДобавитьЗначение("Справочники/"+Вид+"/"+Имя,Строка(Зн));
					
					Имя="Владелец";
					Зн=Элемент.Владелец;
					СписокЗагруженныхРеквизитов.ДобавитьЗначение("Справочники/"+Вид+"/"+Имя,Строка(Зн));
					
					Имя="Код";
					Зн=Элемент.Код;
					СписокЗагруженныхРеквизитов.ДобавитьЗначение("Справочники/"+Вид+"/"+Имя,Строка(Зн));
					
					Имя="Наименование";
					Зн=Элемент.Наименование;
					СписокЗагруженныхРеквизитов.ДобавитьЗначение("Справочники/"+Вид+"/"+Имя,Строка(Зн));
					
					Для ыы=1 по Метаданные.Справочник(Вид).Реквизит() Цикл
						Имя=Метаданные.Справочник(Вид).Реквизит(ыы).Идентификатор;
						Зн=Элемент.ПолучитьАтрибут(Имя);
						СписокЗагруженныхРеквизитов.ДобавитьЗначение("Справочники/"+Вид+"/"+Имя,Строка(Зн));
					КонецЦикла;
					
				Иначе
					Имя="#ПомеченНаУдаление";
					Зн=Элемент.ПометкаУдаления();
					СписокЗагруженныхРеквизитов.ДобавитьЗначение("Документы/"+Вид+"/Шапка/"+Имя,Строка(Зн));
					
					Имя="#ДатаДок";
					Зн=Элемент.ДатаДок;
					СписокЗагруженныхРеквизитов.ДобавитьЗначение("Документы/"+Вид+"/Шапка/"+Имя,Строка(Зн));
					
					Имя="#ВремяДокумента";
					Зн=Элемент.ПолучитьВремя();
					СписокЗагруженныхРеквизитов.ДобавитьЗначение("Документы/"+Вид+"/Шапка/"+Имя,Строка(Зн));
					
					Имя="#Проведен";
					Зн=Элемент.Проведен();
					СписокЗагруженныхРеквизитов.ДобавитьЗначение("Документы/"+Вид+"/Шапка/"+Имя,Строка(Зн));
					
					
					Имя="НомерДок";
					Зн=Элемент.НомерДок;
					СписокЗагруженныхРеквизитов.ДобавитьЗначение("Документы/"+Вид+"/Шапка/"+Имя,Строка(Зн));
					
					Для у=1 по Метаданные.ОбщийРеквизитДокумента() Цикл
						Имя=Метаданные.ОбщийРеквизитДокумента(у).Идентификатор;
						Зн=Элемент.ПолучитьАтрибут(Имя);
						СписокЗагруженныхРеквизитов.ДобавитьЗначение("Документы/"+Вид+"/Шапка/"+Имя,Строка(Зн));
					КонецЦикла;
					
					Для ыы=1 по Метаданные.Документ(Вид).РеквизитШапки() Цикл
						Имя=Метаданные.Документ(Вид).РеквизитШапки(ыы).Идентификатор;
						Зн=Элемент.ПолучитьАтрибут(Имя);
						СписокЗагруженныхРеквизитов.ДобавитьЗначение("Документы/"+Вид+"/Шапка/"+Имя,Строка(Зн));
					КонецЦикла;
					
					Док=СоздатьОбъект("Документ."+Вид);
					Док.НайтиДокумент(Элемент);
					Док.ВыбратьСтроки();
					Док.ПолучитьСтроку();
					Для ыы=1 по Метаданные.Документ(Вид).РеквизитТабличнойЧасти() Цикл
						Имя=Метаданные.Документ(Вид).РеквизитТабличнойЧасти(ыы).Идентификатор;
						Зн=Док.ПолучитьАтрибут(Имя);
						СписокЗагруженныхРеквизитов.ДобавитьЗначение("Документы/"+Вид+"/Табличная часть/"+Имя,Строка(Зн));
					КонецЦикла;
					
					Имя="НомерСтроки";
					Зн=Док.НомерСтроки;
					СписокЗагруженныхРеквизитов.ДобавитьЗначение("Документы/"+Вид+"/Табличная часть/"+Имя,Строка(Зн));
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//		СписокЗагруженныхРеквизитов.ВыбратьЗначение("","");
	
	//Отменяем всю загрузку, т.к. она должна быть виртуальной!
	ОтменитьТранзакцию();
	
	
	
	
	Если БылаЗагрузка=0 Тогда
		ПодсказкаПользователю(
		"Данная кнопка предназначена для загрузки,
		|примерного значения реквизитов в колонку 
		|""Пример загрузки"". Для этого он должен 
		|быть предварительно выгружен из базы источник
		|по кнопке ""Выгрузить пример"".", //первое сообщение
		"Не выгружен пример из базы приемника
		|или ошибка при загрузке...",//последующие сообщения
		10);
	КонецЕсли;
КонецПроцедуры //ЗагрузитьПример


//====================================================================================
//====================================================================================
//специальные процедуры для работы с пользователем в режиме подскази
Процедура ПодсказкаПользователю(ПервоеСообщение,ПоследующиеСообщения="",ВремяТаймАута=0)
	ПовторДляПользователя=ПовторДляПользователя+1;
	Стр=ПервоеСообщение; 
	Если ПовторДляПользователя>1 Тогда
		Если ПустоеЗначение(ПоследующиеСообщения)=0 Тогда
			Стр=ПоследующиеСообщения; 
		КонецЕсли;
	КонецЕсли;
	Стр=""""+СтрЗаменить(Стр,РазделительСтрок,""",""")+"""";
	Список=СоздатьОбъект("СписокЗначений");
	Список.ИзСтрокиСРазделителями(Стр);
	Список.ВставитьЗначение(1,"   ");
	Список.ДобавитьЗначение("   ");
	Список.ВыбратьЗначение("","...",,ВремяТаймАута,1);
КонецПроцедуры 






//*************************************************************** XML поддержка
//*************************************************************** XML поддержка

Процедура НоваяТаблица(Т)
	Рез=ИспользоватьКартинки;
	Т.Очистить();
	Если Рез=1 Тогда
	Т.НоваяКолонка("Картинка",,,," ",3);
	Т.ВидимостьКолонки("Картинка",Рез);
	Т.ВыводитьПиктограммы("Картинка",Рез);
	
	Т.НоваяКолонка("Картинка2",,,," ",2);
	Т.ВидимостьКолонки("Картинка2",1-Рез);
	Иначе
	Т.НоваяКолонка("Картинка2",,,," ",2);
	Т.ВидимостьКолонки("Картинка2",1-Рез);
	
	Т.НоваяКолонка("Картинка",,,," ",3);
	Т.ВидимостьКолонки("Картинка",Рез);
	Т.ВыводитьПиктограммы("Картинка",Рез);
	КонецЕсли;
	
	Т.НоваяКолонка("Наименование",,,,"Источник",18);
	Т.НоваяКолонка("Элемент");
	Т.ВидимостьКолонки("Элемент",0);
	Т.НоваяКолонка("Значение",,,,,15);
	Т.ВидимостьКолонки("Значение",1-ФлСтруктура);
КонецПроцедуры //НоваяТаблица

//_____________________________________________________________________________
//преобразование дерева XML в списки значений
Функция ПреобразоватьВСписок(УзелДерева)
	Список=СоздатьОбъект("СписокЗначений");
	
	КоллекцияАтрибутов=УзелДерева.Attributes;
	КолАтрибутов=КоллекцияАтрибутов.length;
	Для А=1 По КолАтрибутов Цикл
		Атрибут=КоллекцияАтрибутов.Item(А-1);
		Список.ДобавитьЗначение("Атрибут",Атрибут.nodeName);
	КонецЦикла;

    Дерево=УзелДерева.childNodes;
	Для А=1 По Дерево.length Цикл  
		Элемент=Дерево.Item(А-1);
		Тип=Элемент.NodeType;
		Если Тип=1 Тогда
			ПодчСписок=ПреобразоватьВСписок(Элемент);
			Если ПодчСписок.РазмерСписка()>0 Тогда
				//добавляем подчиненный список (т.е. подчиненное дерево)
				Список.ДобавитьЗначение(ПодчСписок,Элемент.nodeName);
				//записываем в подчиненный список ссылку на родительский список
				ПодчСписок.ДобавитьЗначение(Список,ИмяСсылкиРодителя);
			Иначе
				Список.ДобавитьЗначение("Элемент",Элемент.nodeName);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
Возврат Список;
КонецФункции //ПреобразоватьВСписок

//__________________________________________________________________________________________________________________________________________________________ (Ю.Иванов,PB)
//просмотр дерева списков в таблице значений (с учетом иерархий)
Процедура ПросмотрДерева(Дерево)
	Перем Имя;
	Форма.Таб.Видимость(0);
	НоваяТаблица(Таб);
	Если ТипЗначенияСтр(Дерево)="СписокЗначений" Тогда
		Список=Дерево;
		//добавляем открывающиеся папочки
		Пока 1=1 Цикл
			РодСписок=Список.Получить(ИмяСсылкиРодителя);
			Если ПустоеЗначение(РодСписок)=1 Тогда
				Прервать;
			КонецЕсли;
			Таб.НоваяСтрока();
			Таб.Картинка=КартинкаЗакрЭлемента;
			Таб.Картинка2="-";
			Таб.Элемент=РодСписок;
			Ном=РодСписок.НайтиЗначение(Список);
			Если Ном=0 Тогда
				Таб.Наименование=ИмяОшибкиСоответствия;
				Форма.Таб.Видимость(1);
				Возврат;
			КонецЕсли;
			РодСписок.ПолучитьЗначение(Ном,Имя);
			Таб.Наименование=Имя;
			Таб.СдвинутьСтроку(-100);
			Список=РодСписок;
		КонецЦикла;
		
		Стр=Таб.КоличествоСтрок();
		
		//выводим сам список элементов
		Для А=1 По Дерево.РазмерСписка() Цикл
			Зн=Дерево.ПолучитьЗначение(А,Имя);
			Если Имя=ИмяСсылкиРодителя Тогда
				Продолжить;
			КонецЕсли;
			Таб.НоваяСтрока();
			Таб.Картинка=КартинкаЭлемента;
			Если Зн="Атрибут" Тогда
				Таб.Картинка=КартинкаАтрибута;
			//ИначеЕсли Зн="Элемент" Тогда
			Иначе
				Если ТипЗначенияСтр(Зн)="СписокЗначений" Тогда
					Если Зн.РазмерСписка()>0 Тогда
						Таб.Картинка=КартинкаОткрЭлемента;
						Таб.Картинка2="+";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Таб.Элемент=Зн;
			Таб.Наименование=Имя;
		КонецЦикла;
	
		Если ИспользоватьКартинки=1 Тогда
			Если ТипФайлаШапки=2 Тогда
				Таб.Сортировать("Картинка");
			КонецЕсли;
			Таб.ТекущаяКолонка("Картинка");
		КонецЕсли;
	Если Таб.КоличествоСтрок()>Стр Тогда
		Таб.ТекущаяСтрока(Стр+1);
	ИначеЕсли Таб.КоличествоСтрок()=Стр Тогда
		Таб.ТекущаяСтрока(Стр);
	КонецЕсли;
	КонецЕсли;
	Форма.Таб.Видимость(1);
КонецПроцедуры
	

//_____________________________________________________________________________
//возаращает предыдущий уровень таблицы значения Т
Функция ПредыдущийУровень(Т,Имя=0,Элемент="")
	Перем ИмяРодителя;
	ИмяРодителя="";
	Т.ВыбратьСтроки();
	Пока Т.ПолучитьСтроку()=1 Цикл
		Если Т.Картинка<>КартинкаЗакрЭлемента Тогда
			Возврат ИмяРодителя;
		КонецЕсли;
		Если Имя=Т.Наименование Тогда
			Возврат ИмяРодителя;
		КонецЕсли;
		Элемент=Т.Элемент;
		ИмяРодителя=Т.Наименование;
	КонецЦикла;
	Возврат ИмяРодителя;
КонецФункции //ПредыдущийУровень

//_____________________________________________________________________________
Функция НайтиУровеньЭлемента(Имя,Спис,ТекУровень=1)
	Перем ТекНаименование,ТекЭлемент,А,Рез;
	Если ТипЗначенияСтр(Спис)="СписокЗначений" Тогда
   	Для А=1 По  Спис.РазмерСписка() Цикл
   		ТекЭлемент=Спис.ПолучитьЗначение(А,ТекНаименование);
			Если Имя=ТекНаименование Тогда
			    Возврат ТекУровень;
			ИначеЕсли ТекНаименование<>ИмяСсылкиРодителя Тогда
				Рез=НайтиУровеньЭлемента(Имя,ТекЭлемент,ТекУровень+1);
				Если Рез>0 Тогда
					//нашли нужный элемент на нижней ветке дерева
				    Возврат Рез;
				КонецЕсли;
			КонецЕсли;
	КонецЦикла;
	КонецЕсли;
    Возврат 0;
КонецФункции //НайтиУровеньЭлемента


//_____________________________________________________________________________
//обработка клика таблицы значения
Процедура ОбработкаТаблицы()
	ПоследняяПозиция="";
	Стр=Таб.ТекущаяСтрока();
	Если Стр=0 Тогда
		Возврат;
	КонецЕсли;
	Кол=Таб.ТекущаяКолонка();
	Картинка=Таб.ПолучитьЗначение(Стр,"Картинка");
	Если (Найти(Кол,"Картинка")=1)ИЛИ(Картинка=КартинкаЗакрЭлемента) Тогда
		Если Картинка=КартинкаОткрЭлемента Тогда   //раскрывающаяся папка
			Дерево=Таб.ПолучитьЗначение(Стр,"Элемент");
			ИсторияВходов.ДобавитьЗначение(Стр);
		ИначеЕсли Картинка=КартинкаЗакрЭлемента Тогда //закрывающаяся папка
			Дерево=Таб.ПолучитьЗначение(Стр,"Элемент");
			ПросмотрДерева(Дерево);
			Кол=ИсторияВходов.РазмерСписка();
			Попытка
				Если Кол>0 Тогда
					НомСтр=ИсторияВходов.ПолучитьЗначение(Кол);
					ИсторияВходов.УдалитьЗначение(Кол);
					Таб.ТекущаяСтрока(НомСтр);
				КонецЕсли;
			Исключение
			КонецПопытки;
			Возврат;
		Иначе
			Возврат;
		КонецЕсли;
		ПросмотрДерева(Дерево);
	Иначе
		//сопоставление
		Если Выбран()=1 Тогда
			глВыгрБазаМОДЗагр="";
			Спр=СоздатьОбъект("Справочник.ПравилаЗагрузки");
			Спр.НайтиЭлемент(ТекущийЭлемент());
			Если Спр.Блокировка(1)=0 Тогда
				Предупреждение("Строка заблокирована !
				|Нажмите кнопку  Записать на панели кнопок.",10);
				Возврат;
			КонецЕсли;
			ТекНаименование=Таб.ПолучитьЗначение(Стр,"Наименование");
			
			Если ТипФайлаШапки=2 Тогда
				//подстройка синонима под требуемый путь
				//Если Картинка=КартинкаАтрибута Тогда
					//загрузка из атрибута текущего дерева (путь к нему определяет синоним родителя)
					ИмяРодителя=0;
					Пока 1=1 Цикл
						ИмяРодителя=ПредыдущийУровень(Таб,ИмяРодителя);
						Если ИмяРодителя="" Тогда
							Прервать;
						Иначе	
							ТекНаименование=ИмяРодителя+"/"+ТекНаименование;
						КонецЕсли;
					КонецЦикла;
					
					//здесь в ТекНаименование имеем полный путь к элементу дерева XML
					ТекСиноним=Сокрлп(Родитель.Синоним);
					Если ТекСиноним="*" Тогда
						ТекСиноним=Сокрлп(Родитель.Родитель.Синоним);
					КонецЕсли;
					Если ТекСиноним="*" Тогда
						ТекСиноним=Сокрлп(Родитель.Родитель.Родитель.Синоним);
					КонецЕсли;
					
					НомСк=Найти(ТекСиноним,"[");
					Если НомСк>0 Тогда
						ТекСиноним=Лев(ТекСиноним,НомСк-1);
					КонецЕсли;
					//справа
					НомСк=Найти(ТекСиноним,"]");
					Если НомСк>0 Тогда
						ТекСиноним=Сред(ТекСиноним,НомСк+1);
					КонецЕсли;
					
					//теперь надо учесть путь родительского синонима
					Если ТекСиноним<>"" Тогда
					Рез=Найти(ТекНаименование,ТекСиноним);
					Если Рез>0 Тогда
					//вариант сопоставления, когда уровень справочника выше уровня дерева XML-документа
					//т.е. здесь надо припавить путь к дочерним элементам дерева (что-то типа: "Уровень5/Уровень6/Данные")
						ТекНаименование=Сред(ТекНаименование,Рез);
						ТекНаименование=СтрЗаменить(ТекНаименование,ТекСиноним+"/","");
					Иначе
						//вариант сопоставления, когда уровень справочника ниже уровня дерева XML-документа
						//т.е. здесь надо добавить ссылки на родительский элемент (что-то типа: "../../")
						
						//ищем в текущем списке XML-документа дочерний элемент с именем ТекСиноним
						Спис=СоздатьОбъект("СписокЗначений"); 				
						Таб.ВыбратьСтроки();
						Пока Таб.ПолучитьСтроку()=1 Цикл
							Если Таб.Картинка<>КартинкаЗакрЭлемента Тогда
								Спис.ДобавитьЗначение(Таб.Элемент,Таб.Наименование);
							КонецЕсли;
						КонецЦикла;
						
						Рез=НайтиУровеньЭлемента(ТекСиноним,Спис);
						ТекНаименование=Таб.ПолучитьЗначение(Стр,"Наименование");
						Для А=1 По Рез Цикл
						ТекНаименование="../"+ТекНаименование;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				
				//КонецЕсли;
			КонецЕсли;
			
			Спр.Синоним=ТекНаименование;
			Спр.ПризнакЗагрузки=ДаДа;
			Спр.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ОбработкаТаблицы





Процедура ЗагрузкаXML()
	ИсторияВходов.УдалитьВсе();
	Состояние("Создается объект OLE.IXMLDOMDocument");
	ХМЛ=СоздатьОбъект("Microsoft.XMLDOM");
	Состояние("Загружается документ "+Файл);
	ХМЛ.resolveExternals=0;
	ХМЛ.load(Файл);
	Состояние("Преобразование документа");
	СписокЗагрузки=ПреобразоватьВСписок(ХМЛ.documentElement);
	ПросмотрДерева(СписокЗагрузки);
	НавигацияПриСменеРодителя(Родитель);
КонецПроцедуры //Просмотр
















//****************************************** начальная инициализация переменных
//****************************************** начальная инициализация переменных


ДаДа="Х";
НетНет="";

Уров=0;
Зап=0;
ЭлементСтар="";
ОписаниеБазы="";
СчетчикОбновлений=0;
Пусто="<пусто>";
СписокИстории=СоздатьОбъект("СписокЗначений");
ПовторДляПользователя=0;
СписокЗагруженныхРеквизитов=СоздатьОбъект("СписокЗначений");




//*************************************************************** XML поддержка
//*************************************************************** XML поддержка
НоваяТаблица(Таб);

КартинкаЗакрЭлемента=1;//- закрывающаяся папка (т.е. сейчас открытая)
КартинкаОткрЭлемента=2;//- открывающаяся папка (т.е. сейчас закрытая - с плюсиком)
КартинкаЭлемента=3;//- элемент
КартинкаАтрибута=6;//- атрибут
ФлСтруктура=1;
ИмяСсылкиРодителя="Родитель!!!";
ИмяОшибкиСоответствия="=Вернуться вверх=";
Попытка
	ОткрытьФорму("Обработка.КартинкиМОД");
	ИспользоватьКартинки=1;
Исключение
	ИспользоватьКартинки=0;
КонецПопытки;
ИсторияВходов=СоздатьОбъект("СписокЗначений"); 
//*************************************************************** XML поддержка
ПоследняяПозиция="";