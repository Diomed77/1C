Функция ПолучитьНазваниеУровня( пРодитель )
	Если ПустоеЗначение( пРодитель ) = 1 Тогда Возврат "Склад";
	ИначеЕсли пРодитель.Уровень() = 1 Тогда Возврат "Ряд";
	ИначеЕсли пРодитель.Уровень() = 2 Тогда Возврат "Секция";
	ИначеЕсли пРодитель.Уровень() = 3 Тогда Возврат "Ячейка";
	Иначе Возврат "";
	КонецЕсли;
КонецФункции

Функция ПолучитьПолныйКод( пРодитель )
	Если ПустоеЗначение( пРодитель ) = 1 Тогда 
		Возврат "";
	ИначеЕсли пРодитель.Уровень() = 1 Тогда 
		Возврат Шаблон( "[пРодитель.Код]-" );
	ИначеЕсли пРодитель.Уровень() = 2 Тогда 
		Возврат Шаблон( "[пРодитель.Родитель.Код]-[пРодитель.Код]-" );
	ИначеЕсли пРодитель.Уровень() = 3 Тогда 
		Возврат Шаблон( "[пРодитель.Родитель.Родитель.Код]-[пРодитель.Родитель.Код]-[пРодитель.Код]-" );
	Иначе 
		Возврат "";
	КонецЕсли;
КонецФункции

Функция ПолучитьДопРеквизит( пРодитель )
	Если ПустоеЗначение( пРодитель ) = 1 Тогда Возврат "Склад:";
	ИначеЕсли пРодитель.Уровень() = 3 Тогда Возврат "Товар:";
	Иначе Возврат "";
	КонецЕсли;
КонецФункции

Процедура ВводНового()
	Если ЭтоГруппа() = 1 Тогда
		Если Родитель.Уровень() > 2 Тогда
			Предупреждение( "Нарушена структура иерархии справочника." );
			СтатусВозврата( 0 );
			Возврат;
		КонецЕсли;
	Иначе
		Если Родитель.Уровень() <> 3 Тогда
			Предупреждение( "Нарушена структура иерархии справочника." );
			СтатусВозврата( 0 );
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Назв = ПолучитьНазваниеУровня( Родитель );
	Если Назв = "Секция" Тогда
		Высота = Родитель.Высота;
		Глубина = Родитель.Глубина;
	ИначеЕсли Назв = "Ячейка" Тогда
		Ширина = Родитель.Ширина;
		Глубина = Родитель.Глубина;
	КонецЕсли;
КонецПроцедуры

Функция УправлениеДиалогом()
	Форма.тДопРеквизит.Видимость( 0 );
	Форма.тДопРеквизит2.Видимость( 0 );
	Форма.Склад.Видимость( 0 );
	Форма.МестоХранения.Видимость( 0 );
	Форма.Товар.Видимость( 0 );
	Форма.Ширина.Доступность( 0 );
	Форма.Высота.Доступность( 0 );
	Форма.Глубина.Доступность( 0 );
	Форма.кнОчиститьМХ.Видимость( 0 );

	Назв = ПолучитьНазваниеУровня( Родитель );
	Если Назв = "Склад" Тогда
		Форма.Склад.Видимость( 1 );
		Форма.МестоХранения.Видимость( 1 );
		Форма.тДопРеквизит.Видимость( 1 );
		Форма.тДопРеквизит2.Видимость( 1 );
		Форма.кнОчиститьМХ.Видимость( 1 );
	ИначеЕсли Назв = "Ряд" Тогда
		Форма.Ширина.Доступность( 1 );
		Форма.Высота.Доступность( 1 );
		Форма.Глубина.Доступность( 1 );
	ИначеЕсли Назв = "Секция" Тогда
		Форма.Ширина.Доступность( 1 );
		Форма.Высота.Доступность( 0 );
		Форма.Глубина.Доступность( 0 );
	ИначеЕсли Назв = "Ячейка" Тогда
		Форма.Ширина.Доступность( 0 );
		Форма.Высота.Доступность( 1 );
		Форма.Глубина.Доступность( 0 );
		Форма.тДопРеквизит.Видимость( 1 );
		Форма.Товар.Видимость( 1 );
	КонецЕсли;
КонецФункции

Процедура ПриОткрытии()
	Форма.тПолныйКод.Заголовок( Шаблон("[ПолучитьНазваниеУровня( Родитель )] No. [ПолучитьПолныйКод( Родитель )]") );
	Форма.тДопРеквизит.Заголовок( ПолучитьДопРеквизит( Родитель ) );
	УправлениеДиалогом();
КонецПроцедуры

Процедура старПриЗаписи()
	Наименование = СокрЛП( Шаблон("[ПолучитьПолныйКод( Родитель )][Код]") );
	
	// проверка дублирования товара в ячейках
	Если Товар.Выбран() = 0 Тогда Возврат; КонецЕсли;
	ЕстьЯчейка = "";
	//PR 03.02.12 - можно привязывать один товар к разным ячейкам в разрезе разных складов
	спр = СоздатьОбъект( "Справочник.СкладскиеАдреса" );
	Если спр.ВыбратьЭлементыПоРеквизиту("Товар",Товар,0,0) = 1 Тогда
		Пока спр.ПолучитьЭлемент() = 1 Цикл
			Если спр.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;
			Если спр.ТекущийЭлемент() = ТекущийЭлемент() Тогда Продолжить; КонецЕсли;
			Если спр.Родитель.Родитель.Родитель.Склад=Родитель.Родитель.Родитель.Склад Тогда
				ЕстьЯчейка = спр.ТекущийЭлемент(); Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ПустоеЗначение(ЕстьЯчейка) = 0 Тогда
		Сообщить( Шаблон("Товар [Товар.Код] [Товар.Наименование] уже привязан к ячейке [ЕстьЯчейка.Наименование] по складу [Родитель.Родитель.Родитель.Склад]"), "!" );
		СтатусВозврата(0);
	КонецЕсли;
КонецПроцедуры

Процедура кнДействия()
	сп = СоздатьОбъект( "СписокЗначений" );
	сп.ДобавитьЗначение( "Копировать" );
	//Если ( ЭтоГруппа() = 1 ) и ( Выбран() = 1 ) Тогда
	//	сп.ДобавитьЗначение( "Очистить" );
	//КонецЕсли;
	выб = ""; Если сп.ВыбратьЗначение( выб,,,,1 ) <> 1 Тогда
		Возврат;
	КонецЕсли;  
	Если выб = "Копировать" Тогда
		колКопий = 0;
		Если ВвестиЧисло(колКопий,"Количество копий",10,0) <> 1 Тогда
			Возврат;
		КонецЕсли;
		Если Выбран() = 0 Тогда
			Записать();
		КонецЕсли;
		текКод = Число(Код);
		спр = СоздатьОбъект( "Справочник.СкладскиеАдреса" );
		Для н = 1 по колКопий Цикл Состояние( Шаблон("Копирование... [н] из [колКопий]") );
			текКод = текКод + 1;
			Если текКод > 99 Тогда Прервать; КонецЕсли;
			Если ЭтоГруппа() = 1 Тогда глСоздатьНовуюГруппу(Спр);
			Иначе глСоздатьНовыйОбъект(Спр);	
			КонецЕсли;
			спр.Родитель = Родитель;
			спр.Код = Прав( "00"+текКод, 2 );
			спр.Наименование = СокрЛП( Шаблон("[ПолучитьПолныйКод( Родитель )][спр.Код]") );
			спр.Ширина = Ширина;
			спр.Высота = Высота;
			спр.Глубина = Глубина;
			Попытка спр.Записать();
			Исключение Сообщить( ОписаниеОшибки() );
			КонецПопытки;
		КонецЦикла;
	//ИначеЕсли выб = "Очистить" Тогда
	//	Ответ = Вопрос( "Удалить все элементы в группе " + Наименование, "Да+Нет" );
	//	Если Ответ = "Да" Тогда
	//		спр = СоздатьОбъект( "Справочник.СкладскиеАдреса" );
	//		спр.ИспользоватьРодителя( ТекущийЭлемент() );
	//		спр.ВыбратьЭлементы();
	//		Пока спр.ПолучитьЭлемент() = 1 Цикл
	//			Попытка спр.Удалить(1);
	//			Исключение Сообщить( ОписаниеОшибки() );
	//			КонецПопытки;
	//		КонецЦикла;
	//	КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОчиститьПоле()
	Назв = ПолучитьНазваниеУровня( Родитель );
	Если Назв = "Склад" Тогда
		Склад = "";
		МестоХранения = "";
	ИначеЕсли Назв = "Ячейка" Тогда
		Товар = "";
	КонецЕсли;
КонецПроцедуры

//Начало текста, вставленного Инсталлятором МОД
Процедура ПриПереносеЭлементаВДругуюГруппу(Спр, Группа)
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	ПриИзмененииОбъекта(Контекст, ТекущийЭлемент(), РабочаяДата());
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписи()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	ПриИзмененииОбъекта(Контекст, ТекущийЭлемент(), РабочаяДата());
	старПриЗаписи()
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
