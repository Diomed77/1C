Перем СписокЗагруженныхЭлементов; 
Перем МД;

Перем	гСтрПуть;
Перем	гИмяФайла;

Перем	гXMLАнализатор;
Перем	гФайл;

Перем	ФормДатаНач;	//	дата начала периода выгрузки данных (читаем из файла)
Перем	ФормДатаКон;	//	дата конца периода выгрузки данных (читаем из файла)

Перем	гПравила;
Перем	гФлПравилаКонвертацииЗагружены;
Перем	гПравилоТекущегоОбъекта;

Перем	гСчетчикЗагруженныхОбъектов;
        
Перем	гПутьОбъекта_КомпонентаV7plus;
Перем	гПутьОбъекта_ДаннаяОбработка;

Перем	гТабКэшПараметровЗагрузки;
Перем	гТабКэшПравил;

Перем	ФормФлОчищатьБазу;
Перем	ФормИмяФайлаПравил;
Перем	ФормИмяФайлаДанных;
Перем	ФормИмяФайлаПеречня;
Перем	ФормФлЗапоминатьСсылки;
Перем	гКолвоБуферизуемыхОбъектов;

Перем	ТабЗагруженныхОбъектов;
Перем	гСписокВспомогательныхОбъектов;

//--------------------------------------------------------------------------------------------------

Функция	УстановитьСправочникПоСсылке(Объект,	Вид="", СозданНовыйОбъект=0, НовыеНеСоздавать=0, ОбъектМД="")	Далее
                           
Функция УсловияВыполняются(Знач Условия, Знач Объект)								Далее
Функция	ПроверитьГруппуУсловий(Знач Условия, Знач Объект, Знач ТипУсловия="И")		Далее

//--------------------------------------------------------------------------------------------------

Процедура ЗаписатьОшибку(Содержание="", Маркер="")
                        
	Сообщить(Содержание, Маркер);
	Сообщить("Порядковый номер объекта в файле:  " + гСчетчикЗагруженныхОбъектов);
	
КонецПроцедуры		// ЗаписатьОшибку()


//--------------------------------------------------------------------------------------------------

Функция ОтделитьРазделителем(Стр, Разделитель, Режим=0)

	ПраваяЧасть			=	"";
	ПозРазделителя		=	Найти(Стр, Разделитель);
	ДлинаРазделителя	=	СтрДлина(Разделитель);
	Если ПозРазделителя > 0 Тогда
		ПраваяЧасть	=	Сред(Стр,		ПозРазделителя + ?(Режим=2, 0, ДлинаРазделителя));
		Стр			=	СокрЛП(Лев(Стр,	ПозРазделителя - ?(Режим=1, -ДлинаРазделителя+1, 1)));
	КонецЕсли;

	Возврат(ПраваяЧасть);
	
КонецФункции		//	ОтделитьРазделителем()

//--------------------------------------------------------------------------------------------------

Функция ПолучитьИдОбъектаИсточника(Источник, ИдСинхронизирующегоРеквизита="")
    
	Если ПустоеЗначение(Источник) = 1 Тогда Возврат("") КонецЕсли;
	
	СтрИсточник		=	"";
	ТипИсточника	=	ТипЗначенияСтр(Источник);

	Если		ТипИсточника	= "Число" 			Тогда	СтрИсточник	=	Строка(Источник);
	ИначеЕсли	ТипИсточника	= "Строка" 			Тогда	СтрИсточник	=	СокрЛП(Источник);
	ИначеЕсли 	ТипИсточника	= "Дата" 			Тогда	СтрИсточник	=	Формат(Источник, "ДДДММГГГГ");
	
	ИначеЕсли 	ТипИсточника	= "Перечисление"	Тогда	СтрИсточник	=	Источник.Идентификатор();
		
	ИначеЕсли 	ТипИсточника	= "ПланСчетов" 		Тогда	СтрИсточник	=	Источник.Идентификатор();
	ИначеЕсли 	ТипИсточника	= "ВидСубконто"		Тогда	СтрИсточник	=	Источник.Идентификатор();
	ИначеЕсли 	ТипИсточника	= "Календарь" 		Тогда	СтрИсточник	=	Источник.Вид();
	ИначеЕсли 	ТипИсточника	= "ВидРасчета" 		Тогда	СтрИсточник	=	Источник.Код;
		
	ИначеЕсли 	ТипИсточника	= "Счет" 			Тогда
		
		Если ПустоеЗначение(ИдСинхронизирующегоРеквизита) = 1 Тогда ИдСинхронизирующегоРеквизита = "Код"			КонецЕсли;
		СтрИсточник	=	СокрЛП(Источник.ПолучитьАтрибут(ИдСинхронизирующегоРеквизита));
		
	ИначеЕсли 	ТипИсточника	= "Справочник"		Тогда
		
		Если ПустоеЗначение(ИдСинхронизирующегоРеквизита) = 1 Тогда ИдСинхронизирующегоРеквизита = "Наименование"	КонецЕсли;
		СтрИсточник	=	СокрЛП(Источник.ПолучитьАтрибут(ИдСинхронизирующегоРеквизита));
		
	ИначеЕсли 	ТипИсточника	= "Документ"		Тогда

		Если ПустоеЗначение(ИдСинхронизирующегоРеквизита) = 1 Тогда ИдСинхронизирующегоРеквизита = "НомерДок"		КонецЕсли;
		СтрИсточник	=	СокрЛП(Источник.ПолучитьАтрибут(ИдСинхронизирующегоРеквизита));
	
	Иначе
		
		ЗаписатьОшибку("Неизвестный тип объекта:   " + ТипИсточника);
		
	КонецЕсли;
	          
	Возврат(СтрИсточник);
	
КонецФункции		//	ПолучитьИдОбъектаИсточника()

//--------------------------------------------------------------------------------------------------

Функция ПолучитьЗначениеМетодом(Источник, Метод)
                                        
	Если ПустоеЗначение(Источник) = 1 Тогда Возврат("") КонецЕсли;
	
	ТипИсточника	=	ТипЗначенияСтр(Источник);
	    
	Если		Метод = "Значение()"				Тогда
		Возврат		Источник;
	ИначеЕсли	Метод = "Вид()"						Тогда
		Возврат		Источник.Вид();
	ИначеЕсли	Метод = "ПометкаУдаления()"			Тогда
		Возврат		Источник.ПометкаУдаления();
	ИначеЕсли	Метод = "ЗначениеВСтрокуВнутр()"	Тогда
		Возврат		ЗначениеВСтрокуВнутр(Источник);
	ИначеЕсли	Метод = "ЗначениеИзСтрокиВнутр()"	Тогда
		Возврат		ЗначениеИзСтрокиВнутр(Источник);
	КонецЕсли;
	
    Если		ТипИсточника = "Справочник"			Тогда
		      
		Если		Метод = "ТекущийЭлемент()"		Тогда
			Зн	=	Источник.ТекущийЭлемент();
		ИначеЕсли	Метод = "ЭтоГруппа()"			Тогда
			Зн	=	Источник.ЭтоГруппа();
		КонецЕсли;
		                                     
	ИначеЕсли	ТипИсточника = "Документ"			Тогда

		Если		Метод = "ТекущийДокумент()"		Тогда
			Зн	=	Источник.ТекущийДокумент();
		ИначеЕсли	Метод = "Проведен()"			Тогда
			Зн	=	Источник.Проведен();
		ИначеЕсли	Метод = "ПроводкиВключены()"	Тогда
			Зн	=	Источник.Операция.ВключитьПроводки();
		КонецЕсли;
		
	ИначеЕсли	ТипИсточника = "Перечисление"		Тогда
		
		Если			Метод = "ТекущееЗначение()"	Тогда
			Зн	=	Источник;
		ИначеЕсли		Метод = "Идентификатор()"	Тогда
			Зн	=	Источник.Идентификатор();
		ИначеЕсли		Метод = "ПорядковыйНомер()"	Тогда
			Зн	=	Источник.ПорядковыйНомер();
		КонецЕсли;
		
	ИначеЕсли	ТипИсточника = "Счет"				Тогда
		
		Если		Метод = "ТекущийСчет()"			Тогда
			Зн	=	Источник.ТекущийСчет();
		ИначеЕсли	Метод = "Родитель()"			Тогда
			Зн	=	Источник.Родитель();
		ИначеЕсли	Метод = "Код"					Тогда
			Зн	=	Источник.Код;
		ИначеЕсли	Метод = "Наименование"			Тогда
			Зн	=	Источник.Наименование;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат(Зн);
	
КонецФункции		//	ПолучитьЗначениеМетодом()

//**************************************************************************************************
//----	Начало функций	проверки условий	--------------------------------------------------------
//**************************************************************************************************

Функция ПривестиКТипу(Зн, Тип)
	
    Если		Тип = "Дата"	Тогда
		Возврат	Дата(Зн);                                  
	ИначеЕсли	Тип = "Число"	Тогда
		Возврат	Число(Зн);
	Иначе
		Возврат	НРег(СокрЛП(Зн));
	КонецЕсли;
	
КонецФункции

//--------------------------------------------------------------------------------------------------

Функция ПроверитьУсловие(Знач Условие, Знач Объект)
	
	ИдРеквизита			=	Условие.ПолучитьАтрибут("Реквизит");
	ВидУсловия			=	Условие.ПолучитьАтрибут("ВидУсловия");
	РеквизитОперации	=	Условие.ПолучитьАтрибут("ЭтоРеквизитОперации");
	Если Найти(ИдРеквизита, "()") > 0 Тогда
		Значение		=	ПолучитьЗначениеМетодом(Объект, ИдРеквизита);
	Иначе    
		Если		ПустоеЗначение(ИдРеквизита) = 1			Тогда
			Значение	=	Объект;
		ИначеЕсли	ПустоеЗначение(СокрЛП(Объект)) = 1		Тогда
			Возврат(0);	
		ИначеЕсли	ТипЗначенияСтр(Объект) = "Операция"		Тогда
			Если		ИдРеквизита = "СчетДт" Тогда
				Значение	=	Объект.Дебет.Счет;
			ИначеЕсли	ИдРеквизита = "СчетКт" Тогда
				Значение	=	Объект.Кредит.Счет;
			Иначе
				Значение	=	Объект.ПолучитьАтрибут(ИдРеквизита);
			КонецЕсли;
		ИначеЕсли	ПустоеЗначение(РеквизитОперации) = 1	Тогда
			Значение		=	Объект.ПолучитьАтрибут(ИдРеквизита);
		Иначе
			Значение		=	Объект.Операция.ПолучитьАтрибут(ИдРеквизита);
		КонецЕсли;
	КонецЕсли;
	
	Если		ВидУсловия	=	"УдовлетворяетУсловию" Тогда
		
		Возврат	УсловияВыполняются(Условие.ВыбратьУзел("Условия"), Значение);
		
	Иначе
		ТипЗнач		=	ТипЗначенияСтр(Значение);
		
		Зн			=	ПривестиКТипу(ПолучитьИдОбъектаИсточника(Значение), ТипЗнач);
		
		Знач1		=	ПривестиКТипу(Условие.ПолучитьАтрибут("Знач1"), 	ТипЗнач);
		Знач2		=	ПривестиКТипу(Условие.ПолучитьАтрибут("Знач2"), 	ТипЗнач);
		
		Если		ВидУсловия	=	"Равно"					Тогда	Возврат ?(	Зн	=	Знач1					, 1, 0);
		ИначеЕсли	ВидУсловия	=	"НеРавно"				Тогда	Возврат ?(	Зн	<>	Знач1					, 1, 0);
		ИначеЕсли	ВидУсловия	=	"ПустоеЗначение"		Тогда	Возврат ?(	ПустоеЗначение(Зн) = 1			, 1, 0);
		ИначеЕсли	ВидУсловия	=	"НеПустоеЗначение"		Тогда	Возврат ?(	ПустоеЗначение(Зн) = 0			, 1, 0);
		ИначеЕсли	ВидУсловия	=	"ВключаетПодстроку"		Тогда	Возврат ?(	Найти(Зн, Знач1) > 0			, 1, 0);
		ИначеЕсли	ВидУсловия	=	"НеВключаетПодстроку"	Тогда	Возврат	?(	Найти(Зн, Знач1) = 0			, 1, 0);
		ИначеЕсли	ВидУсловия	=	"ЯвляетсяПодстрокой"	Тогда	Возврат ?(	Найти(Знач1, Зн) > 0			, 1, 0);
		ИначеЕсли	ВидУсловия	=	"НеЯвляетсяПодстрокой"	Тогда	Возврат	?(	Найти(Знач1, Зн) = 0			, 1, 0);
		ИначеЕсли	ВидУсловия	=	"Больше"				Тогда	Возврат ?(	Зн	>	Знач1					, 1, 0);
		ИначеЕсли	ВидУсловия	=	"БольшеИлиРавно"		Тогда	Возврат ?(	Зн	>=	Знач1					, 1, 0);
		ИначеЕсли	ВидУсловия	=	"Меньше"				Тогда	Возврат ?(	Зн	<	Знач1					, 1, 0);
		ИначеЕсли	ВидУсловия	=	"МеньшеИлиРавно"		Тогда	Возврат	?(	Зн	<=	Знач1					, 1, 0);
		ИначеЕсли	ВидУсловия	=	"ИнтервалСГраницами"	Тогда	Возврат ?(	(Зн	>=	Знач1) И (Зн <=	Знач2)	, 1, 0);
		ИначеЕсли	ВидУсловия	=	"ИнтервалБезГраниц"		Тогда	Возврат ?(	(Зн	>	Знач1) И (Зн <	Знач2)	, 1, 0);
		Иначе		ЗаписатьОшибку("Не идентифицирован вид условия:   " + ВидУсловия);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции		//	ПроверитьУсловие()

//--------------------------------------------------------------------------------------------------

Функция ПроверитьГруппуУсловий(Знач Условия, Знач Объект, Знач ТипУсловия="И")
	
	Если ПустоеЗначение(Условия)	= 1				Тогда	Возврат(1)								КонецЕсли;
	Если ПустоеЗначение(ТипУсловия) = 1				Тогда	ТипУсловия = "И"						КонецЕсли;
	
	Если ТипЗначенияСтр(Объект)		= "Справочник"	Тогда	Объект.ИспользоватьДату(ФормДатаКон, 1)	КонецЕсли;
	                                                                     
	ВыборкаУсловий	=	Условия.ВыбратьУзлы("Условие");
	Для СчУсловий = 0 По ВыборкаУсловий.КоличествоУзлов() - 1 Цикл
		Условие		=	ВыборкаУсловий.ПолучитьУзел(СчУсловий);
		Результат	=	ПроверитьУсловие(Условие, Объект);
		Если		(ТипУсловия = "И")		И	(Результат=0)	Тогда	Возврат(0);
		ИначеЕсли	(ТипУсловия = "Или")	И	(Результат=1)	Тогда	Возврат(1);
		ИначеЕсли	(ТипУсловия = "Не")		И	(1-Результат=1)	Тогда	Возврат(1);
		КонецЕсли;
	КонецЦикла;
	
	ВыборкаГрупп	=	Условия.ВыбратьУзлы("ГруппаУсловий");
	Для СчГрупп = 0 По ВыборкаГрупп.КоличествоУзлов() - 1 Цикл
		ГруппаУсловий	=	ВыборкаГрупп.ПолучитьУзел(СчГрупп);
		ТипУсл			=	ГруппаУсловий.ПолучитьАтрибут("ТипУсловия");
		Результат		=	ПроверитьГруппуУсловий(ГруппаУсловий, Объект, ТипУсл);
		Если		(ТипУсловия = "И")		И	(Результат=0)	Тогда	Возврат(0);
		ИначеЕсли	(ТипУсловия = "Или")	И	(Результат=1)	Тогда	Возврат(1);
		ИначеЕсли	(ТипУсловия = "Не")		И	(1-Результат=1)	Тогда	Возврат(1);
		КонецЕсли;
	КонецЦикла;
	
	Если		ТипУсловия = "И"	Тогда	Возврат(1);
	ИначеЕсли	ТипУсловия = "Или"	Тогда	Возврат(0);
	ИначеЕсли	ТипУсловия = "Не"	Тогда	Возврат(0);
	КонецЕсли;
	
КонецФункции

//--------------------------------------------------------------------------------------------------

Функция УсловияВыполняются(Знач Условия, Знач Объект)
	
	Если ПустоеЗначение(Условия.ПолучитьАтрибут("ЕстьПроцедура")) = 0 Тогда
		Сообщить("Данная версия обработки не поддерживает механизм скриптов!");
		Возврат(0);
	КонецЕсли;
	
	Если ПроверитьГруппуУсловий(Условия, Объект) = 0 Тогда Возврат(0) КонецЕсли;	//	проверка одиночных условий
	
	ВыборкаГрупп	=	Условия.ВыбратьУзлы("ГруппаУсловий");
	Для СчГрупп = 0 По ВыборкаГрупп.КоличествоУзлов() - 1 Цикл
		ГруппаУсловий	=	ВыборкаГрупп.ПолучитьУзел(СчГрупп);
		ТипУсловия		=	ГруппаУсловий.ПолучитьАтрибут("ТипУсловия");
		Если ПроверитьГруппуУсловий(ГруппаУсловий, Объект, ТипУсловия) = 0 Тогда Возврат(0) КонецЕсли;
	КонецЦикла;
	
	Возврат(1);
	
КонецФункции

//**************************************************************************************************
//----	Конец функций	проверки условий	--------------------------------------------------------
//**************************************************************************************************


Функция ПрочитатьИнформациюОТипеРеквизита(ТипОбъекта, ВидОбъекта, Реквизит, Тип="", Вид="", Длина="")
	
    Если ПустоеЗначение(Реквизит) = 1 Тогда Возврат("") КонецЕсли;
	
	МД	=	Метаданные;
	
	Если		ТипОбъекта = "Справочник"		Тогда
		
		Если ПустоеЗначение(ВидОбъекта) = 1 Тогда Возврат("") КонецЕсли;
		ОбъектМД			=	МД.Справочник(ВидОбъекта);
		
		Если		Реквизит	= "Код"				Тогда
			Тип				=	?(ОбъектМД.ТипКода="Числовой", "Число", "Строка");
			Длина			=	ОбъектМД.ДлинаКода;
		ИначеЕсли	Реквизит	= "Наименование"	Тогда
			Тип				=	"Строка";
			Длина			=	ОбъектМД.ДлинаНаименования;
		ИначеЕсли	Реквизит	= "Родитель"		Тогда
			Тип				=	"Справочник";
			Вид				=	ВидОбъекта;
		ИначеЕсли	Реквизит	= "Владелец"	Тогда
			Тип				=	"Справочник";
			Вид				=	ОбъектМД.Владелец.Идентификатор;
		Иначе
			РеквМД			=	ОбъектМД.Реквизит(Реквизит);
			Если РеквМД.Выбран() = 0 Тогда Возврат("") КонецЕсли;
			Тип				=	РеквМД.Тип;
			Вид				=	РеквМД.Вид;
			Длина			=	РеквМД.Длина;
			//Точность		=	РеквМД.Точность;
			//Периодический	=	РеквМД.Периодический;
			Возврат(РеквМД);
		КонецЕсли;
		
	ИначеЕсли	ТипОбъекта = "Документ"			Тогда
                                           
		Если ПустоеЗначение(ВидОбъекта) = 1 Тогда Возврат("") КонецЕсли;
		ОбъектМД		= МД.Документ(ВидОбъекта);
		
		Если		Реквизит	= "НомерДок"		Тогда
			Тип			=	?(ОбъектМД.ТипНомера="Числовой", "Число", "Строка");
			Длина		=	ОбъектМД.ДлинаНомера;
		ИначеЕсли	Реквизит	= "ДатаДок"			Тогда
			Тип			=	"Дата";
		ИначеЕсли	Реквизит	= "ВремяДок"		Тогда
			Тип			=	"Строка";
			Длина		=	8;
		ИначеЕсли	Реквизит	= "НомерСтроки"		Тогда
			Тип			=	"Число";
			Длина		=	3;
			//Точность	=	0;
		Иначе
			РеквМД		= МД.ОбщийРеквизитДокумента(Реквизит);
			Если РеквМД.Выбран() = 0 Тогда	РеквМД = ОбъектМД.РеквизитШапки(Реквизит);
				Если РеквМД.Выбран() = 0 Тогда	РеквМД = ОбъектМД.РеквизитТабличнойЧасти(Реквизит)	КонецЕсли;
			КонецЕсли;
			Если РеквМД.Выбран() = 0 Тогда Возврат("") КонецЕсли;
			Тип			=	РеквМД.Тип;
			Вид			=	РеквМД.Вид;
			Длина		=	РеквМД.Длина;
			//Точность	=	РеквМД.Точность;
			Возврат(РеквМД);
		КонецЕсли;
		
	ИначеЕсли	ТипОбъекта = "Операция"			Тогда
		     
		Если		Реквизит	= "Содержание"				Тогда
			Тип			=	"Строка";
			Длина		=	МД.ДлинаСодержанияОперации;
		ИначеЕсли	Реквизит	= "СуммаОперации"			Тогда
			Тип			=	"Число";
			Длина		=	МД.ДлинаСуммыОперация;
			//Точность	=	МД.ТочностьСуммыОперации;
		ИначеЕсли	Реквизит	= "ДатаОперации"			Тогда
			Тип			=	"Дата";
		ИначеЕсли	Реквизит	= "Документ"				Тогда
			Тип			=	"Документ";
		ИначеЕсли	Реквизит	= "Сумма"					Тогда
			Тип			=	"Число";
			Длина		=	МД.ДлинаСуммыПроводки;
			//Точность	=	МД.ТочностьСуммыПроводки;
		ИначеЕсли	Реквизит	= "Количество"				Тогда
			Тип			=	"Число";
			Длина		=	МД.ДлинаКоличестваПроводки;
			//Точность	=	МД.ТочностьКоличестваПроводки;
		ИначеЕсли	Реквизит	= "ВалСумма"				Тогда
			Тип			=	"Число";
			Длина		=	МД.ДлинаВалютнойСуммыПроводки;
			//Точность	=	МД.ТочностьВалютнойСуммыПроводки;
		ИначеЕсли	Реквизит	= "Валюта"					Тогда
			Если МД.Валюта.Выбран() = 0 Тогда Возврат("") КонецЕсли;
			Тип			=	"Справочник";
			Вид			=	МД.Валюта.Идентификатор;
		Иначе
			РеквМД 		= МД.РеквизитОперации(Реквизит);
			Если РеквМД.Выбран() = 0 Тогда	РеквМД = МД.РеквизитПроводки(Реквизит)	КонецЕсли;
			Если РеквМД.Выбран() = 0 Тогда Возврат("") КонецЕсли;
			Тип			=	РеквМД.Тип;
			Вид			=	РеквМД.Вид;
			Длина		=	РеквМД.Длина;
			//Точность	=	РеквМД.Точность;
			Возврат(РеквМД);
		КонецЕсли;
	
	ИначеЕсли	ТипОбъекта = "ВидСубконто"		Тогда
		
		РеквМД		=	МД.ВидСубконто(Реквизит);
		Если РеквМД.Выбран() = 0 Тогда Возврат("") КонецЕсли;
		Тип			=	РеквМД.Тип;
		Вид			=	РеквМД.Вид;
		Длина		=	РеквМД.Длина;
		//Точность	=	РеквМД.Точность;
		Возврат(РеквМД);
		
	ИначеЕсли	ТипОбъекта = "ЖурналРасчетов"	Тогда
		                           
		ОбъектМД				=	МД.ЖурналРасчетов(ВидОбъекта);
		
		Если		Реквизит	= "Документ"					Тогда
			Тип			=	"Документ";
		ИначеЕсли	Реквизит	= "РодительскийДокумент"		Тогда
			Тип			=	"Документ";
		ИначеЕсли	Реквизит	= "Объект"						Тогда
			Тип			=	"Справочник";
			Вид			=	ОбъектМД.ОсновнойСправочник.Идентификатор;
		ИначеЕсли	Реквизит	= "ВидРасч"						Тогда
			Тип			=	"ВидРасчета";
		ИначеЕсли	Реквизит	= "ДатаНачала"					Тогда
			Тип			=	"Дата";
		ИначеЕсли	Реквизит	= "ДатаОкончания"				Тогда
			Тип			=	"Дата";
		ИначеЕсли	Реквизит	= "ПериодДействия"				Тогда
			Тип			=	"Дата";
		ИначеЕсли	Реквизит	= "ПериодРегистрации"			Тогда
			Тип			=	"Дата";
		ИначеЕсли	Реквизит	= "Сторно"						Тогда
			Тип			=	"Число";
			Длина		=	1;
			//Точность	=	0;
		ИначеЕсли	Реквизит	= "Рассчитана"					Тогда
			Тип			=	"Число";
			Длина		=	1;
			//Точность	=	0;
		ИначеЕсли	Реквизит	= "Исправлена"					Тогда
			Тип			=	"Число";
			Длина		=	1;
			//Точность	=	0;
		ИначеЕсли	Реквизит	= "Фиксирована"					Тогда
			Тип			=	"Число";
			Длина		=	1;
			//Точность	=	0;
		ИначеЕсли	Реквизит	= "Перерасчет"					Тогда
			Тип			=	"Число";
			Длина		=	1;
			//Точность	=	0;
		ИначеЕсли	Реквизит	= "ДокументПервичнойЗаписи"		Тогда
			Тип			=	"Документ";
		ИначеЕсли	Реквизит	= "РегистрацияПервичнойЗаписи"	Тогда
			Тип			=	"Дата";
		ИначеЕсли	Реквизит	= "Результат"					Тогда
			Тип			=	"Число";
			Длина		=	ОбъектМД.ДлинаРезультата;
			//Точность	=	ОбъектМД.ТочностьРезультата;
		ИначеЕсли	Реквизит	= "ПервичнаяЗапись"				Тогда
			
		Иначе
			
			РеквМД	= ОбъектМД.Реквизит(Реквизит);
			Если РеквМД.Выбран() = 0 Тогда Возврат("") КонецЕсли;
			Тип			=	РеквМД.Тип;
			Вид			=	РеквМД.Вид;
			Длина		=	РеквМД.Длина;
			//Точность	=	РеквМД.Точность;
			Возврат(РеквМД);
			
		КонецЕсли;
		
	ИначеЕсли	ТипОбъекта = "Константа"		Тогда
		
		РеквМД		=	МД.Константа(Реквизит);
		Если РеквМД.Выбран() = 0 Тогда Возврат("") КонецЕсли;
		Тип			=	РеквМД.Тип;
		Вид			=	РеквМД.Вид;
		Длина		=	РеквМД.Длина;
		//Точность	=	РеквМД.Точность;
		Возврат(РеквМД);
		
	Иначе
		
		Возврат("");
		
	КонецЕсли;    
	
	Возврат("");
	
КонецФункции		//	ПрочитатьИнформациюОТипеРеквизита()


//--------------------------------------------------------------------------------------------------
        
Функция УстановитьРеквизит(Реквизит, ТипОбъекта, ВидОбъекта, РеквизитОбъекта)
                                                                            
	Если ПустоеЗначение(Реквизит)			= 1 Тогда	Возврат("")	КонецЕсли;
	Если ПустоеЗначение(РеквизитОбъекта)	= 1	Тогда	Возврат("")	КонецЕсли;
	
	Тип=""; Вид=""; Длина="";
	ПрочитатьИнформациюОТипеРеквизита(ТипОбъекта, ВидОбъекта, РеквизитОбъекта, Тип, Вид, Длина);
	                                                                                                                     
	
	Если	Тип = "Неопределенный"	Тогда Тип = Реквизит.ПолучитьАтрибут("ТипЗначения")	КонецЕсли;
	
	
	Если		Тип = "Строка"			Тогда
		
		Значение	=	СокрЛП(Реквизит.ПолучитьАтрибут("Значение"));
		Если Длина = 0 Тогда
			Значение	=	СтрЗаменить(Значение, "#рс#", РазделительСтрок);
			Значение	=	СтрЗаменить(Значение, "#ст#", СимволТабуляции);
		КонецЕсли;
		
	ИначеЕсли	Тип = "Справочник"		Тогда
		
		Если	ПустоеЗначение(Вид) = 1	Тогда Вид = Реквизит.ПолучитьАтрибут("ВидЗначения")	КонецЕсли;
		СозданНовыйОбъект	=	0;
		Значение			=	УстановитьСправочникПоСсылке(Реквизит, Вид, СозданНовыйОбъект);
		Если		Значение = "Ошибка"						Тогда
			Значение	=	ПолучитьПустоеЗначение(Тип + ?(Вид="", "", "." + Вид));
		ИначеЕсли	ПустоеЗначение(СозданНовыйОбъект) = 0	Тогда
			//гСписокОбъектовСозданныхПоСсылкам.Установить(ЗначениеВСтрокуВнутр(Значение), 1);
			ОбъектЗначения	=	СоздатьОбъект(Тип + "." + Вид);
			ОбъектЗначения.НайтиЭлемент(Значение);
			ОбъектЗначения.Удалить(0);			//	объект еще не загружен толком
		ИначеЕсли	Значение = "#НеУстановлен" Тогда
			Возврат("#НеУстановлен");
		КонецЕсли;
		
	ИначеЕсли	Тип = "Число"			Тогда 
		
		Значение	=	Реквизит.ПолучитьАтрибут("Значение");
		Если (РеквизитОбъекта = "Код") И (Значение="0") Тогда	//	мф!
		Иначе
			Значение	=	Число(Значение);
		КонецЕсли;
    
	ИначеЕсли	Тип = "Счет"			Тогда
		
		Если	ПустоеЗначение(Вид) = 1	Тогда Вид = Реквизит.ПолучитьАтрибут("ВидЗначения")	КонецЕсли;
		Значение	=	СокрЛП(Реквизит.ПолучитьАтрибут("Значение"));
		ПланСчетов = ?(ПустоеЗначение(Вид)=1, ОсновнойПланСчетов(), ПланыСчетов.ЗначениеПоИдентификатору(Вид));
		Если ПустоеЗначение(ПланСчетов)=1 Тогда
			ЗаписатьОшибку("Неверный вид счета " + Вид);
			Возврат("");
		КонецЕсли;
		Если ПустоеЗначение(Значение) = 1 Тогда Возврат("") КонецЕсли;
		Счет		=	СоздатьОбъект("Счет"); 
		Счет.ИспользоватьПланСчетов(ПланСчетов);
		Счет.НайтиПоКоду(Значение);
		Значение	=	Счет.ТекущийСчет();
	
	ИначеЕсли	Тип = "Перечисление"	Тогда
		
		Если	ПустоеЗначение(Вид) = 1	Тогда Вид = Реквизит.ПолучитьАтрибут("ВидЗначения")	КонецЕсли;
		Значение	=	СокрЛП(Реквизит.ПолучитьАтрибут("Значение"));
		ОбъектМД	=	Метаданные.Перечисление(Вид);
		Если ОбъектМД.Выбран()=0 Тогда
			ЗаписатьОшибку("Неверный вид перечисления - " + Вид);
			Возврат("");
		КонецЕсли;
		Если ПустоеЗначение(Значение) = 1 Тогда Возврат("") КонецЕсли;
		ВидПеречисления	=	Перечисление.ПолучитьАтрибут(Вид);
		СтрЗначение		=	Значение;
		Значение		=	ВидПеречисления.ЗначениеПоИдентификатору(СтрЗначение);
		Если ПустоеЗначение(Значение) = 0 Тогда Возврат(Значение) КонецЕсли;
		Для СчЗнач = 1 По ОбъектМД.Значение() Цикл
			ЗначениеМД	=	ОбъектМД.Значение(СчЗнач);
			Если СтрЗначение = ЗначениеМД.Представление() Тогда
				Возврат	ВидПеречисления.ЗначениеПоИдентификатору(ЗначениеМД.Идентификатор);
			КонецЕсли;
		КонецЦикла;
		Если Число(СтрЗначение) = 0 Тогда
			ЗаписатьОшибку("Неверное значение перечисления " + Вид + "." + СтрЗначение);
			Возврат("");
		КонецЕсли;
		Значение		=	ВидПеречисления.ЗначениеПоНомеру(СтрЗначение);
	
	ИначеЕсли	Тип = "Дата"			Тогда
		
		Значение	=	Реквизит.ПолучитьАтрибут("Значение");
		Значение	=	Дата(Значение);
	
	ИначеЕсли	ПустоеЗначение(Тип) = 0	Тогда
		
		ЗаписатьОшибку("Неверный тип реквизита:  " + ТипОбъекта + "." + ВидОбъекта + "." + РеквизитОбъекта + " - " + Тип);
		
	КонецЕсли;
	
	Возврат(Значение);
	
КонецФункции		//	УстановитьРеквизит()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция СравнитьРеквизитыСправочника(Справочник, РеквизитыПоиска)
	           
	Вид	=	Справочник.Вид();
	
	Для Сч = 0 По РеквизитыПоиска.КоличествоУзлов() - 1 Цикл
		
		Реквизит					=	РеквизитыПоиска.ПолучитьУзел(Сч);
		ИдРеквизита					=	Реквизит.ПолучитьАтрибут("Идентификатор");
		
		ТипРеквизита				=	"";
		ПрочитатьИнформациюОТипеРеквизита("Справочник", Вид, ИдРеквизита, ТипРеквизита);
		Если		ПустоеЗначение(ТипРеквизита) = 1 Тогда
			ПредставлениеРеквизита		=	"Справочник." + Вид + "." + ИдРеквизита;
			ЗаписатьОшибку("Неверное имя реквизита:" + ПредставлениеРеквизита);
			Продолжить;
		КонецЕсли;
		
		Значение					=	УстановитьРеквизит(Реквизит, "Справочник", Вид, ИдРеквизита);
		СуществующееЗначение		=	Справочник.ПолучитьАтрибут(ИдРеквизита);
		
		Если (ТипЗначенияСтр(СуществующееЗначение) = "Строка") Или (ПустоеЗначение(СуществующееЗначение) = 1) Тогда
			СуществующееЗначение	=	СокрЛП(СуществующееЗначение);
			Значение				=	СокрЛП(Значение);
		КонецЕсли;
		
		Если СуществующееЗначение <> Значение Тогда Возврат(0) КонецЕсли;
		
	КонецЦикла;
	
	Возврат(1);
	
КонецФункции		//	СравнитьРеквизитыСправочника()

//--------------------------------------------------------------------------------------------------

Функция ВыделитьПрефикс(Знач Стр, ЧисловаяЧасть="")

	Префикс	=	Стр;
	Длина	=	СтрДлина(Стр);
	
	Для Сч = 1 По Длина Цикл
		ЧисловаяЧасть	=	Число(Стр);
		
	    Если (ЧисловаяЧасть > 0) И (СтрДлина(ЧисловаяЧасть) = Длина - Сч + 1) Тогда 
			Префикс	=	Лев(Префикс, Сч - 1);
			
			Пока Прав(Префикс, 1) = "0" Цикл
			    Префикс = Лев(Префикс, СтрДлина(Префикс)-1);
			КонецЦикла;
			
			Прервать;		    				
	    Иначе
			Стр = Прав(Стр, Длина - Сч);
		КонецЕсли;
		
		Если ЧисловаяЧасть < 0 Тогда	ЧисловаяЧасть = - ЧисловаяЧасть		КонецЕсли;
			
	КонецЦикла;
	                   
	Возврат(Префикс);

КонецФункции		//	ВыделитьПрефикс()

//--------------------------------------------------------------------------------------------------

Функция ПроверкаУникальностиОбъектаСправочника(Справочник, ЕстьКонтроль, ЕстьВладелец, Уникальность, АвтоНумерация)
          
	// проверка на существование других элементов с уникальным кодом
	
	Если ПустоеЗначение(ЕстьКонтроль) = 1 Тогда Возврат(1) КонецЕсли;
	
	Вид			=	Справочник.Вид();
	Конфликт	=	СоздатьОбъект("Справочник." + Вид);
	Если ЕстьВладелец = 1 Тогда Конфликт.ИспользоватьВладельца(Справочник.Владелец) КонецЕсли;
	Если Уникальность = "ВПределахПодчинения" Тогда
		Если Справочник.Родитель.Выбран()=1 Тогда
			Конфликт.ИспользоватьРодителя(Справочник.Родитель);
		КонецЕсли;
		УчитыватьИерархию	=	1;
	Иначе
		УчитыватьИерархию	=	0;
	КонецЕсли;
	Если		Конфликт.НайтиПоКоду(Справочник.Код, УчитыватьИерархию) = 0	Тогда
	ИначеЕсли	Конфликт.ТекущийЭлемент() = Справочник.ТекущийЭлемент()		Тогда
	ИначеЕсли	ПустоеЗначение(АвтоНумерация) = 1							Тогда
		ЗапомнимКонфликт	=	Конфликт.ТекущийЭлемент();
		
		Ошибка = "Код не уникальный - назначен новый код существующему элементу: " + ЗапомнимКонфликт;
		ЗаписатьОшибку(Ошибка, "!");
		
		Конфликт.ПорядокКодов();	//	используем именно этот объект чтобы учесть установленных родителя и владельца
		Конфликт.ОбратныйПорядок(1);
		Конфликт.ВыбратьЭлементы(УчитыватьИерархию);
		Конфликт.ПолучитьЭлемент();
		СчКода				=	"";
		Результат			=	ВыделитьПрефикс(Конфликт.Код, СчКода);
		ДлинаКода			=	Метаданные.Справочник(Вид).ДлинаКода;
		Пока ДлинаКода - СтрДлина(Результат) - СтрДлина(СчКода + 1) > 0 Цикл
		    Результат		=	Результат + "0";
		КонецЦикла;
		НовыйКод			=	Результат + Строка(СчКода + 1);
		
		ВспомнимКонфликт	=	СоздатьОбъект("Справочник." + Вид);
		ВспомнимКонфликт.НайтиЭлемент(ЗапомнимКонфликт);
		ВспомнимКонфликт.Код	=	НовыйКод;
		ВспомнимКонфликт.Записать();

	Иначе
		ЗапомнимКонфликт	=	Конфликт.ТекущийЭлемент();
		
		Ошибка = "Код не уникальный - назначен новый код существующему элементу: " + ЗапомнимКонфликт;
		ЗаписатьОшибку(Ошибка, "!");
		
		Конфликт.Новый();	//	используем именно этот объект чтобы учесть установленных родителя и владельца
		Конфликт.УстановитьНовыйКод(ВыделитьПрефикс(Справочник.Код));
		
		ВспомнимКонфликт	=	СоздатьОбъект("Справочник." + Вид);
		ВспомнимКонфликт.НайтиЭлемент(ЗапомнимКонфликт);
		ВспомнимКонфликт.Код	=	Конфликт.Код;
		ВспомнимКонфликт.Записать();

	КонецЕсли;
	
	Возврат(1);
	
КонецФункции		//	ПроверкаУникальностиОбъектаСправочника()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция ОбъектУжеЗагружен(ТипВид, СтрСсылка, ОбъектИБ)
    
	Перем	НомСтр;
	
	Если ТабЗагруженныхОбъектов.НайтиЗначение(ТипВид, НомСтр, "Вид") = 0	Тогда Возврат(0) КонецЕсли;
	
	ТабОбъектов	=	ТабЗагруженныхОбъектов.ПолучитьЗначение(НомСтр, "ТабОбъектов");
	НомСтр		=	"";
	
	Если ТабОбъектов.НайтиЗначение(СтрСсылка, НомСтр, "Ссылка") = 0		Тогда Возврат(0) КонецЕсли;
	        
	ОбъектИБ	=	ТабОбъектов.ПолучитьЗначение(НомСтр, "Объект");
	
	Возврат(1);
	
КонецФункции		//	ОбъектУжеЗагружен()

//--------------------------------------------------------------------------------------------------

Процедура ЗапомнитьСсылку(Вид, СтрСсылка, ОбъектИБ)

	Перем	НомСтр;
	
	Если ТабЗагруженныхОбъектов.НайтиЗначение(ТипЗначенияСтр(ОбъектИБ) + Вид, НомСтр, "Вид") = 0 Тогда
		ТабЗагруженныхОбъектов.НоваяСтрока();
		ТабЗагруженныхОбъектов.Вид			=	ТипЗначенияСтр(ОбъектИБ) + Вид;
		ТабЗагруженныхОбъектов.ТабОбъектов	=	СоздатьОбъект("ТаблицаЗначений");
		ТабОбъектов							=	ТабЗагруженныхОбъектов.ТабОбъектов;
		ТабОбъектов.НоваяКолонка("Ссылка",	"Строка");
		ТабОбъектов.НоваяКолонка("Объект");
	Иначе
		ТабОбъектов							=	ТабЗагруженныхОбъектов.ПолучитьЗначение(НомСтр, "ТабОбъектов");
	КонецЕсли;
	
	ТабОбъектов.НоваяСтрока();
	ТабОбъектов.Ссылка						=	СтрСсылка;
	ТабОбъектов.Объект						=	ОбъектИБ;
	
КонецПроцедуры		//	ЗапомнитьСсылку()

//--------------------------------------------------------------------------------------------------

Функция ВременныйВладелец(Вид)
    
	СпрВладелец	=	СоздатьОбъект("Справочник." + Вид);
	Если СпрВладелец.НайтиПоНаименованию("###Временный владелец###", 0, 1) = 0 Тогда
		СпрВладелец.Новый();
		СпрВладелец.Наименование	=	"###Временный владелец###";
		ВладелецМД = Метаданные.Справочник(Вид).Владелец;
		Если ВладелецМД.Выбран() = 1 Тогда
			СпрВладелец.Владелец = ВременныйВладелец(ВладелецМД.Идентификатор);
		КонецЕсли;
		СпрВладелец.Записать();
		СпрВладелец.Удалить(0);
		Если ТипЗначенияСтр(гСписокВспомогательныхОбъектов) <> "СписокЗначений" Тогда
			гСписокВспомогательныхОбъектов = СоздатьОбъект("СписокЗначений");
		КонецЕсли;
		гСписокВспомогательныхОбъектов.ДобавитьЗначение(СпрВладелец.ТекущийЭлемент());
	КонецЕсли;
	
	Возврат(СпрВладелец.ТекущийЭлемент());
	
КонецФункции		//	ВременныйВладелец()

//--------------------------------------------------------------------------------------------------

Функция УстановитьСправочникПоСсылке(Объект, Вид="", СозданНовыйОбъект=0, НовыеНеСоздавать=0, ОбъектМД="")
    
	Перем	Элемент;
	
	Ссылка	=	Объект.ВыбратьУзел("Ссылка");
	Если ПустоеЗначение(Ссылка) = 1 Тогда
		ОбъектМД	=	Метаданные.Справочник(Вид);
		Если Объект.ИмяТэга = "Ссылка" Тогда
			Ссылка	=	Объект;
		Иначе
			Возврат("");
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(Вид) = 1 Тогда Вид = Ссылка.ПолучитьАтрибут("Вид")	КонецЕсли;
	
	ОбъектМД				=	Метаданные.Справочник(Вид);
	
	Если ОбъектМД.Выбран()	= 0 Тогда
		ЗаписатьОшибку("Неверный вид справочника " + Вид);
		Возврат("Ошибка");
	КонецЕсли;
	
	
	
	Если ФормФлЗапоминатьСсылки = 1 Тогда
		Если ОбъектУжеЗагружен("Справочник" + Вид, Ссылка.ПредставлениеXML, Элемент) = 1 Тогда Возврат(Элемент) КонецЕсли;
		//РеквизитыПоиска		=	Ссылка.ВыбратьУзлы("Реквизит[@Идентификатор!=""СистемноеПредставление()""]");
		РеквизитыПоиска			=	Ссылка.ВыбратьУзлы("Реквизит");
		КолвоРеквизитовПоиска	=	РеквизитыПоиска.КоличествоУзлов();
	Иначе
		//РеквизитыПоиска		=	Ссылка.ВыбратьУзлы("Реквизит[@Идентификатор!=""СистемноеПредставление()""]");
		РеквизитыПоиска			=	Ссылка.ВыбратьУзлы("Реквизит");
		КолвоРеквизитовПоиска	=	РеквизитыПоиска.КоличествоУзлов();
		Если КолвоРеквизитовПоиска = 0 Тогда	//	используется внутренняя ссылка
			Если ОбъектУжеЗагружен("Справочник" + Вид, Ссылка.ПредставлениеXML, Элемент) = 1 Тогда Возврат(Элемент) КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	
	ЭтоГруппа				=	Число(Ссылка.ПолучитьАтрибут("ЭтоГруппа"));
	
	
	//	Эта возможность временно отключена...
	//СистПр	=	Ссылка.ВыбратьУзел("Реквизит[@Идентификатор=""СистемноеПредставление()""]");
	//Если ПустоеЗначение(СистПр) = 0 Тогда
	//	Возврат	ЗначениеИзСтрокиВнутр(СистПр.ПолучитьАтрибут("Значение"));
	//КонецЕсли;
	
	
	Справочник 				=	СоздатьОбъект("Справочник." + Вид);
	
	ЕстьВладелец			=	ОбъектМД.Владелец.Выбран();
	ЕстьРодитель			=	?(ОбъектМД.КоличествоУровней > 1, 1, 0);
	
	ДлинаКода				=	ОбъектМД.ДлинаКода;
	ДлинаНаименования		=	ОбъектМД.ДлинаНаименования;
	
	Уникальность			=	ОбъектМД.СерииКодов;
	ЕстьКонтроль			=	ОбъектМД.КонтрольУникальности;
	АвтоНумерация			=	ОбъектМД.АвтоНумерация - 1;
	ТипКода					=	ОбъектМД.ТипКода;
	
	ИспользоватьВладельца	=	0;
	ИспользоватьРодителя	=	0;
	УчитыватьИерархию		=	0;
	
	
	КодСсылка="";	НаименованиеСсылка=""; РодительСсылка=""; ВладелецСсылка="";
	                          
	
	Если КолвоРеквизитовПоиска > 0 Тогда
		
		Если	ПустоеЗначение(ДлинаКода)			= 0		Тогда
			КодСсылка					=	УстановитьРеквизит(Ссылка.ВыбратьУзел("Реквизит[@Идентификатор=""Код""]"),			"Справочник", Вид, "Код");
		КонецЕсли;
		Если	ПустоеЗначение(ДлинаНаименования)	= 0		Тогда
			НаименованиеСсылка		=	УстановитьРеквизит(Ссылка.ВыбратьУзел("Реквизит[@Идентификатор=""Наименование""]"),	"Справочник", Вид, "Наименование");
		КонецЕсли;
		Если	ПустоеЗначение(ЕстьРодитель)		= 0		Тогда
			РодительСсылка			=	УстановитьРеквизит(Ссылка.ВыбратьУзел("Реквизит[@Идентификатор=""Родитель""]"), 	"Справочник", Вид, "Родитель");
		КонецЕсли;
		Если	ПустоеЗначение(ЕстьВладелец)		= 0		Тогда
			ВладелецСсылка			=	УстановитьРеквизит(Ссылка.ВыбратьУзел("Реквизит[@Идентификатор=""Владелец""]"),		"Справочник", Вид, "Владелец");
		КонецЕсли;
	    
	
		//	ИспользоватьВладельца	для поиска
		
		Если		ПустоеЗначение(ВладелецСсылка)		= 0	Тогда
			ИспользоватьВладельца	=	1;
			Справочник.ИспользоватьВладельца(ВладелецСсылка);
		ИначеЕсли	(Уникальность	= "ВПределахПодчинения") И (ЕстьКонтроль = 1) И (ЕстьВладелец = 1)	Тогда
			//	Попробуем отработать эту ситуацию при создании нового элемента / группы
			
			//ЗаписатьОшибку("Не установлена синхронизация по владельцу подчиненного справочника - " + Вид + "
			//				|	Правило:  " + гПравилоТекущегоОбъекта + "
			//				|	Узел ссылки:  " + Ссылка.ПредставлениеXML, "!!");
			//Возврат("Ошибка");
		КонецЕсли;
	    
		//	ИспользоватьРодителя	для поиска
		
		Если		ПустоеЗначение(РодительСсылка) =	0	Тогда
			ИспользоватьРодителя	=	1;
			Справочник.ИспользоватьРодителя(РодительСсылка);
		ИначеЕсли	(Уникальность	= "ВПределахПодчинения") И (ЕстьКонтроль = 1) И (ЕстьРодитель = 1)	Тогда
			ИспользоватьРодителя	=	1;
			Справочник.ИспользоватьРодителя(ПолучитьПустоеЗначение("Справочник." + Вид));
		КонецЕсли;
		
	КонецЕсли;
	
	
	Справочник.ИспользоватьДату(РабочаяДата(), 1);	//	хотя вообще-то искать по периодическим реквизитам - плохая затея...
	
	
	УчитыватьИерархию	=	?(ИспользоватьРодителя + ИспользоватьВладельца > 0,	1,	0);
	
	                                                 
	
	
	//--------		Поиск		-------------------------------
	
	
	ПолныйПеребор	=	0;
	                            
	
	Если		КолвоРеквизитовПоиска = 0 Тогда
		
			//	Поиск не производим!
		
	ИначеЕсли	(ПустоеЗначение(КодСсылка)			= 0)	И	(КолвоРеквизитовПоиска = 1)	Тогда
	    
		Если Справочник.НайтиПоКоду(КодСсылка, 0) = 0	Тогда	//	создаем новый
		ИначеЕсли	Справочник.ЭтоГруппа() <> ЭтоГруппа			Тогда	//	создаем новый
		Иначе
			Если ФормФлЗапоминатьСсылки = 1 Тогда ЗапомнитьСсылку(Вид, Ссылка.ПредставлениеXML, Справочник.ТекущийЭлемент()); КонецЕсли;
			Возврат	Справочник.ТекущийЭлемент();
		КонецЕсли;

	ИначеЕсли	(ПустоеЗначение(НаименованиеСсылка)	= 0)	И	(КолвоРеквизитовПоиска = 1)	Тогда

		Если		Справочник.НайтиПоНаименованию(НаименованиеСсылка, 0, 1) = 0	Тогда	//	создаем новый
		ИначеЕсли	Справочник.ЭтоГруппа() <> ЭтоГруппа										Тогда	//	создаем новый
		Иначе
			Если ФормФлЗапоминатьСсылки = 1 Тогда ЗапомнитьСсылку(Вид, Ссылка.ПредставлениеXML, Справочник.ТекущийЭлемент()); КонецЕсли;
			Возврат	Справочник.ТекущийЭлемент();
		КонецЕсли;

	ИначеЕсли	(ПустоеЗначение(КодСсылка)			= 0)	И	(1 + ИспользоватьРодителя + ИспользоватьВладельца = КолвоРеквизитовПоиска)	Тогда
	
		Если		Справочник.НайтиПоКоду(КодСсылка, 1) = 0					Тогда	//	создаем новый
		ИначеЕсли	Справочник.ЭтоГруппа() <> ЭтоГруппа					Тогда	//	создаем новый
		Иначе
			Если ФормФлЗапоминатьСсылки = 1 Тогда ЗапомнитьСсылку(Вид, Ссылка.ПредставлениеXML, Справочник.ТекущийЭлемент()); КонецЕсли;
			Возврат	Справочник.ТекущийЭлемент();
		КонецЕсли;
	
	ИначеЕсли	(ПустоеЗначение(НаименованиеСсылка)	= 0)	И	(1 + ИспользоватьРодителя + ИспользоватьВладельца = КолвоРеквизитовПоиска)	Тогда
	
		Если		Справочник.НайтиПоНаименованию(НаименованиеСсылка, 1, 1) = 0	Тогда	//	создаем новый
		ИначеЕсли	Справочник.ЭтоГруппа() <> ЭтоГруппа										Тогда	//	создаем новый
		Иначе
			Если ФормФлЗапоминатьСсылки = 1 Тогда ЗапомнитьСсылку(Вид, Ссылка.ПредставлениеXML, Справочник.ТекущийЭлемент()); КонецЕсли;
			Возврат	Справочник.ТекущийЭлемент();
		КонецЕсли;
	
	ИначеЕсли	(ЕстьКонтроль			=	1)	И
				(ПустоеЗначение(КодСсылка)	=	0)	И
	     		((Уникальность = "ВесьСправочник")	Или	(УчитыватьИерархию=1))	Тогда
		 	
		Если		Справочник.НайтиПоКоду(КодСсылка, УчитыватьИерархию)				= 0 		Тогда	//	создаем новый
		ИначеЕсли	Справочник.ЭтоГруппа() <> ЭтоГруппа										Тогда	//	создаем новый
		ИначеЕсли	СравнитьРеквизитыСправочника(Справочник, РеквизитыПоиска)	= 0			Тогда	//	создаем новый
		Иначе
			Если ФормФлЗапоминатьСсылки = 1 Тогда ЗапомнитьСсылку(Вид, Ссылка.ПредставлениеXML, Справочник.ТекущийЭлемент()); КонецЕсли;
			Возврат	Справочник.ТекущийЭлемент();
		КонецЕсли;
    
	ИначеЕсли	(1 + ИспользоватьРодителя + ИспользоватьВладельца = КолвоРеквизитовПоиска)	Тогда
	            
		РеквизитПоиска	=	Ссылка.ВыбратьУзел("Реквизит[(@Идентификатор!=""Владелец"")and(@Идентификатор!=""Родитель"")]");
		     
		Если ПустоеЗначение(РеквизитПоиска) = 1 Тогда ПолныйПеребор = 1 КонецЕсли;
			
		Если ПолныйПеребор = 0 Тогда
			ИдРеквизита		=	РеквизитПоиска.ПолучитьАтрибут("Идентификатор");
			РеквМД			=	ОбъектМД.Реквизит(ИдРеквизита);
			Сортировка		=	0;
			Если РеквМД.Выбран() = 1 Тогда	Сортировка = РеквМД.Сортировка	КонецЕсли;
			Если Сортировка = 1 Тогда
				Значение	=	УстановитьРеквизит(РеквизитПоиска, "Справочник", Вид, ИдРеквизита);
				Если		Справочник.НайтиПоРеквизиту(ИдРеквизита, Значение, 1-УчитыватьИерархию)	= 0	Тогда	//	создаем новый
				ИначеЕсли	Справочник.ЭтоГруппа() <> ЭтоГруппа											Тогда	//	создаем новый
				//ИначеЕсли	СравнитьРеквизитыСправочника(Справочник, РеквизитыПоиска)	= 0				Тогда	//	создаем новый
				Иначе
					Если ФормФлЗапоминатьСсылки = 1 Тогда ЗапомнитьСсылку(Вид, Ссылка.ПредставлениеXML, Справочник.ТекущийЭлемент()); КонецЕсли;
					Возврат	Справочник.ТекущийЭлемент();
				КонецЕсли;
			Иначе
				ПолныйПеребор = 1;
			КонецЕсли;
		КонецЕсли;
		       
	ИначеЕсли	(ПустоеЗначение(КодСсылка)			= 0)	Тогда
	
		Если		Справочник.НайтиПоКоду(КодСсылка, УчитыватьИерархию)				= 0 		Тогда	//	создаем новый
		ИначеЕсли	Справочник.ЭтоГруппа() <> ЭтоГруппа										Тогда	ПолныйПеребор = 1;
		ИначеЕсли	СравнитьРеквизитыСправочника(Справочник, РеквизитыПоиска)	= 0			Тогда	ПолныйПеребор = 1;
		Иначе
			Если ФормФлЗапоминатьСсылки = 1 Тогда ЗапомнитьСсылку(Вид, Ссылка.ПредставлениеXML, Справочник.ТекущийЭлемент()); КонецЕсли;
			Возврат	Справочник.ТекущийЭлемент();
		КонецЕсли;
		            
	ИначеЕсли	(ПустоеЗначение(НаименованиеСсылка)	= 0)	Тогда
	
		Если		Справочник.НайтиПоНаименованию(Наименование, УчитыватьИерархию, 1) = 0	Тогда	//	создаем новый
		ИначеЕсли	Справочник.ЭтоГруппа() <> ЭтоГруппа										Тогда	ПолныйПеребор = 1;
		ИначеЕсли	СравнитьРеквизитыСправочника(Справочник, РеквизитыПоиска)	= 0			Тогда	ПолныйПеребор = 1;
		Иначе
			Если ФормФлЗапоминатьСсылки = 1 Тогда ЗапомнитьСсылку(Вид, Ссылка.ПредставлениеXML, Справочник.ТекущийЭлемент()); КонецЕсли;
			Возврат	Справочник.ТекущийЭлемент();
		КонецЕсли;
		
	ИначеЕсли КолвоРеквизитовПоиска > 0	Тогда
		                          
		ПолныйПеребор = 1;
		
	КонецЕсли;
	
	          
	//------	Поиск полным перебором элементов	--------------
	
	
	Если ПолныйПеребор = 1 Тогда
		Справочник.ВыбратьЭлементы(УчитыватьИерархию);
		Пока Справочник.ПолучитьЭлемент(1-УчитыватьИерархию) = 1 Цикл
			Если 	Справочник.ЭтоГруппа() <> ЭтоГруппа 									Тогда	Продолжить	КонецЕсли;
			Если	СравнитьРеквизитыСправочника(Справочник, РеквизитыПоиска)	= 0			Тогда	Продолжить	КонецЕсли;
			Если ФормФлЗапоминатьСсылки = 1 Тогда ЗапомнитьСсылку(Вид, Ссылка.ПредставлениеXML, Справочник.ТекущийЭлемент()); КонецЕсли;
			Возврат	Справочник.ТекущийЭлемент();
		КонецЦикла;
	КонецЕсли;
	
	   
	//------------------------------------------------------------
	
	
	Если ПустоеЗначение(НовыеНеСоздавать) = 0 Тогда
		ЗаписатьОшибку("Объект не найден и не создан: Справочник." + Вид + РазделительСтрок + Ссылка.ПредставлениеXML, "!");
		Возврат("#НеУстановлен");
	КонецЕсли;
	
	//------	Создаем новый объект	--------------------------
	
	Если ЭтоГруппа = 1 Тогда
		Справочник.НоваяГруппа();
	Иначе
		Справочник.Новый();
	КонецЕсли;
	СозданНовыйОбъект	=	1;
	
	//	Владелец
	
			Если 		ПустоеЗначение(ВладелецСсылка)	=	0	Тогда
				Справочник.Владелец	=	ВладелецСсылка;
			ИначеЕсли	ЕстьВладелец = 1	Тогда
				//	возможно по владельцу просто не синхронизируем
				ВладелецСсылка	=	УстановитьРеквизит(Объект.ВыбратьУзел("Реквизит[@Идентификатор=""Владелец""]"),	"Справочник", Вид, "Владелец");
				Если	ПустоеЗначение(Владелец)	=	0	Тогда
					Справочник.Владелец	=	ВладелецСсылка;
				Иначе
					//ЗаписатьОшибку("Не установлен владелец подчиненного справочника - " + Вид, "!!");
					//Возврат("Ошибка");
					
					// Создадим временного владельца - скорее всего он будет далее переопределен
					
					Справочник.Владелец	=	ВременныйВладелец(ОбъектМД.Владелец.Идентификатор);
					
				КонецЕсли;
			КонецЕсли;
	
	//	Родитель
	
			Если ПустоеЗначение(РодительСсылка)		=	0	Тогда
				Справочник.Родитель	=	РодительСсылка;
			КонецЕсли;
	
	//	Наименование
	
			Если ПустоеЗначение(НаименованиеСсылка)	=	0	Тогда
				Справочник.Наименование	=	НаименованиеСсылка;
			КонецЕсли;
	
	//	Код
	
			Если		ПустоеЗначение(КодСсылка)			=	0	Тогда
				Справочник.Код	=	КодСсылка;
			ИначеЕсли	ПустоеЗначение(ДлинаКода)	=	0	Тогда
				//	возможно по коду просто не синхронизируем
				КодСсылка	=	УстановитьРеквизит(Объект.ВыбратьУзел("Реквизит[@Идентификатор=""Код""]"), "Справочник", Вид, "Код");
				Если	ПустоеЗначение(КодСсылка) = 0 Тогда
					Справочник.Код	=	КодСсылка;
				Иначе
					Справочник.УстановитьНовыйКод();
				КонецЕсли;
			КонецЕсли;
			
	НеИспользуется		=	?(ЭтоГруппа=1, "ДляЭлемента", "ДляГруппы");
	
	Для Сч = 0 По РеквизитыПоиска.КоличествоУзлов() - 1 Цикл
		
		Реквизит					=	РеквизитыПоиска.ПолучитьУзел(Сч);
		ИдРеквизита					=	Реквизит.ПолучитьАтрибут("Идентификатор");
		             
		Если Найти("Код,Наименование,Родитель,Владелец", ИдРеквизита) > 0 Тогда Продолжить КонецЕсли;
		
		Значение					=	УстановитьРеквизит(Реквизит, "Справочник", Вид, ИдРеквизита);
		РеквМД						=	ОбъектМД.Реквизит(ИдРеквизита);
		ПредставлениеРеквизита		=	" (Справочник." + Вид + "." + ИдРеквизита + ")";
		Если РеквМД.Выбран()		=	0				Тогда	ЗаписатьОшибку("Неверное имя реквизита:" + ПредставлениеРеквизита);					Продолжить;	КонецЕсли;
		Если РеквМД.Использование	=	НеИспользуется	Тогда	ЗаписатьОшибку("Реквизит используется " + НеИспользуется + ПредставлениеРеквизита);	Продолжить;	КонецЕсли;
		Если РеквМД.Тип="Неопределенный" Тогда
			ТипЗнач			=	Реквизит.ПолучитьАтрибут("ТипЗначения");
			ВидЗнач			=	Реквизит.ПолучитьАтрибут("ВидЗначения");
			Точность		=	0;
			Если ТипЗнач = "Число" Тогда
				СтрТочность	=	Значение;
				Точность	=	СтрДлина(	ОтделитьРазделителем(СтрТочность, ".")	);
			КонецЕсли;
			Справочник.НазначитьТип(ИдРеквизита, ТипЗнач + ?(ПустоеЗначение(ВидЗнач)=1, "", "." + ВидЗнач), СтрДлина(Значение) + 10, Точность);
		КонецЕсли;
		
		Справочник.УстановитьАтрибут(ИдРеквизита, Значение);
		
	КонецЦикла;
	                                                            
	//	набор условий "от противного"
	Если		ПустоеЗначение(Справочник.Код)	=	0	Тогда	//	код не пустой		- порядок
	ИначеЕсли	ПустоеЗначение(ЕстьКонтроль)	=	1	Тогда	//	контроль отключен	- порядок
	ИначеЕсли	ТипКода = "Числовой"					Тогда	//	код=0				- порядок
	ИначеЕсли	ПустоеЗначение(ДлинаКода)		=	1	Тогда	//	кода вообще нет!	- порядок
	Иначе
		Справочник.Код = "0";
	КонецЕсли;
	                      
	
	Если ПроверкаУникальностиОбъектаСправочника(Справочник, ЕстьКонтроль, ЕстьВладелец, Уникальность, АвтоНумерация) = 0 Тогда Возврат("Ошибка") КонецЕсли;
		              
	Справочник.Записать();
	СписокЗагруженныхЭлементов.ДобавитьЗначение(Справочник.ТекущийЭлемент());	
	
	Если (ФормФлЗапоминатьСсылки = 1) Или (КолвоРеквизитовПоиска = 0) Тогда
		ЗапомнитьСсылку(Вид, Ссылка.ПредставлениеXML, Справочник.ТекущийЭлемент());
	КонецЕсли;
	
	
	Возврат	Справочник.ТекущийЭлемент();
	
КонецФункции	//	УстановитьСправочникПоСсылке()

//--------------------------------------------------------------------------------------------------

Функция НайтиПравило(Объект, Вид="", ИдПараметровЗагрузки="")
    
	НомСтр						=	"";
	Ид							=	Объект.ПолучитьАтрибут("Правило");
	
	
	Если ПустоеЗначение(Ид) = 1 Тогда Возврат("") КонецЕсли;
	Если ПустоеЗначение(гПравила) = 1 Тогда
		Вид						=	Ид;
		ИдПараметровЗагрузки	=	"ПараметрыПоУмолчанию";
		Возврат("");
	КонецЕсли;
	
	гПравилоТекущегоОбъекта		=	Ид;
	
	Если  гТабКэшПравил.НайтиЗначение(Ид, НомСтр, "Ид") = 0 Тогда
		
		Правило	=	гПравила.ВыбратьУзел("//Правило[@Ид=""" + Ид + """]");
		
		Если ПустоеЗначение(Правило) = 1 Тогда
			ЗаписатьОшибку("Не найдено правило конвертации:		" + Ид);
			Возврат("");
		КонецЕсли;
		
		гТабКэшПравил.НоваяСтрока();
		гТабКэшПравил.Ид					=	Ид;
		ИдПараметровЗагрузки				=	Правило.ПолучитьАтрибут("ПараметрыЗагрузки");
		гТабКэшПравил.ПараметрыЗагрузки		=	ИдПараметровЗагрузки;
		
		Приемник							=	Правило.ВыбратьУзел("ОбъектПриемник");
		Если ПустоеЗначение(Приемник) = 0 Тогда
			Вид								=	Приемник.ПолучитьАтрибут("Вид");
			гТабКэшПравил.Приемник_Вид		=	Вид;
		КонецЕсли;
		
	Иначе
		
		гТабКэшПравил.ПолучитьСтрокуПоНомеру(НомСтр);
		Вид						=	гТабКэшПравил.Приемник_Вид;
		ИдПараметровЗагрузки	=	гТабКэшПравил.ПараметрыЗагрузки
		
	КонецЕсли;
	
	Возврат(1);
	
КонецФункции		//	НайтиПравило()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция УстановитьСтатус(Статус)
	
	Если ПустоеЗначение(Статус) = 1 Тогда
		Возврат("Авто");
	Иначе
		Возврат(Статус);
	КонецЕсли;

КонецФункции		//	УстановитьСтатус()

//--------------------------------------------------------------------------------------------------

Процедура ЗагрузитьПараметрыЗагрузки(Ид)
                                     
	Если	ПустоеЗначение(Ид) = 1		Тогда
		гТабКэшПараметровЗагрузки.ПолучитьСтрокуПоНомеру(1);	//	в первой строке описаны параметры по умолчанию
		Возврат;
	КонецЕсли;
	
	НомСтр	=	"";
	
	Если  гТабКэшПараметровЗагрузки.НайтиЗначение(Ид, НомСтр, "Ид") = 0 Тогда

		ПараметрыЗагрузки	=	гПравила.ВыбратьУзел("//ПараметрыЗагрузки[@Ид=""" + СокрЛП(Ид) + """]");
		
		Если ПустоеЗначение(ПараметрыЗагрузки) = 1 Тогда
			ЗаписатьОшибку("Не найдены параметры загрузки. Ид = " + Ид + "!", "!!");
			гТабКэшПараметровЗагрузки.ПолучитьСтрокуПоНомеру(1);
			Возврат;
		КонецЕсли;
		
		гТабКэшПараметровЗагрузки.НоваяСтрока();
		гТабКэшПараметровЗагрузки.Ид							=	Ид;
	    
		ДатаУстановки											=	Дата(ПараметрыЗагрузки.ПолучитьАтрибут("Дата"));
		гТабКэшПараметровЗагрузки.Дата							=	?(ПустоеЗначение(ДатаУстановки)=1, РабочаяДата(), ДатаУстановки);	//	???
		                          
		СпособЗагрузки											=	ПараметрыЗагрузки.ПолучитьАтрибут("СпособЗагрузки");
		гТабКэшПараметровЗагрузки.СпособЗагрузки				=	?(ПустоеЗначение(СпособЗагрузки)=1, "ЗамещатьНеПустыми", СпособЗагрузки);
		
		гТабКэшПараметровЗагрузки.СтатусУдаления				=	УстановитьСтатус(ПараметрыЗагрузки.ПолучитьАтрибут("СтатусУдаления")	);
		гТабКэшПараметровЗагрузки.СтатусПроводок				=	УстановитьСтатус(ПараметрыЗагрузки.ПолучитьАтрибут("СтатусПроводок")	);
		гТабКэшПараметровЗагрузки.СтатусПроведения				=	УстановитьСтатус(ПараметрыЗагрузки.ПолучитьАтрибут("СтатусПроведения")	);
	
		гТабКэшПараметровЗагрузки.ЗамещатьНайденные				=	Число(ПараметрыЗагрузки.ПолучитьАтрибут("ЗамещатьНайденные"));
		гТабКэшПараметровЗагрузки.НовыеНеСоздавать				=	Число(ПараметрыЗагрузки.ПолучитьАтрибут("НовыеНеСоздавать"));
		
		гТабКэшПараметровЗагрузки.ЗагружатьОперации				=	Число(ПараметрыЗагрузки.ПолучитьАтрибут("ЗагружатьОперации"));
		гТабКэшПараметровЗагрузки.ЗагружатьЗаписиЖР				=	Число(ПараметрыЗагрузки.ПолучитьАтрибут("ЗагружатьЗаписиЖР"));
		гТабКэшПараметровЗагрузки.НеУдалятьСтроки				=	Число(ПараметрыЗагрузки.ПолучитьАтрибут("НеУдалятьСтроки"));
		                            	
	Иначе
		
		гТабКэшПараметровЗагрузки.ПолучитьСтрокуПоНомеру(НомСтр);
		
	КонецЕсли;
	
КонецПроцедуры

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция НеУстанавливатьРеквизит(СпособЗагрузкиПоУмолчанию, СпособЗагрузки, Объект, ИдРеквизита, Значение, ЭтоНовыйОбъект)
                                                                         
	Если ПустоеЗначение(СпособЗагрузки) = 1 Тогда	СпособЗагрузки = СпособЗагрузкиПоУмолчанию	КонецЕсли;
	
	Если		СпособЗагрузки  = "ЗамещатьИлиОчищать"											Тогда	//	устанавливаем
	ИначеЕсли	(СпособЗагрузки = "ЗамещатьНеПустыми")	И (ПустоеЗначение(Значение) = 0)		Тогда	//	устанавливаем
	ИначеЕсли	(СпособЗагрузки = "ДляНовых")			И (ПустоеЗначение(ЭтоНовыйОбъект) = 0)	Тогда	//	устанавливаем
	ИначеЕсли	(СпособЗагрузки = "Проверка")			И (ПустоеЗначение(ЭтоНовыйОбъект) = 1)	Тогда	//	сравниваем значения
		Если ТипЗначенияСтр(Объект) = "Периодический" Тогда
			ТекЗнач	=	Объект.ЗначениеНаДату(ИдРеквизита);
			Если ТипЗначенияСтр(ТекЗнач) = "Строка" Тогда ТекЗнач = СокрЛП(ТекЗнач)	КонецЕсли;
			Если ТекЗнач <> Значение Тогда
				ЗаписатьОшибку("Проверка реквизита '"	+	Объект.ТекущийРеквизит() +	"' неудовлетворительна! 
								|Текущее значение: "	+	ТекЗнач		+	"
								|Значение в файле: "	+	Значение	+	"
								|Дата значения: "		+	ИдРеквизита	+	"
								|Объект: "				+	Объект.ТекущийОбъект(),		"!");
			КонецЕсли;
		Иначе
			ТекЗнач		=	Объект.ПолучитьАтрибут(ИдРеквизита);
			Если ТипЗначенияСтр(ТекЗнач) = "Строка" Тогда ТекЗнач = СокрЛП(ТекЗнач)	КонецЕсли;
			Если ТекЗнач <> Значение Тогда
				ЗаписатьОшибку("Проверка реквизита '"	+	ИдРеквизита +	"' неудовлетворительна! 
								|Текущее значение: "	+	ТекЗнач		+	"
								|Значение в файле: "	+	Значение	+	"
								|Объект: "				+	Объект,		"!");
			КонецЕсли;
		КонецЕсли;
		Возврат(1);
	Иначе
		Возврат(1);
	КонецЕсли;
	
	Возврат(0);		//	устанавливать
	
КонецФункции		//	НеУстанавливатьРеквизит()

//--------------------------------------------------------------------------------------------------
                                  
Функция УстановитьСтатусУдаления(Объект, СтатусВПравилах="Авто", СтатусВФайле="НеИзвестен")
	
	Если		СтатусВПравилах = "Авто"			Тогда
		
		Если СтатусВФайле="НеИзвестен"	Тогда
			Возврат(Объект);
		ИначеЕсли ПустоеЗначение(СтатусВФайле) = 1 Тогда
			Если Объект.ПометкаУдаления() = 1 Тогда	Объект.СнятьПометкуУдаления();	КонецЕсли;
		Иначе
			Если Объект.ПометкаУдаления() = 0 Тогда	Объект.Удалить(0);				КонецЕсли;
		КонецЕсли;	                                  
		
	ИначеЕсли	СтатусВПравилах = "Пометить"		Тогда
		
		Если Объект.ПометкаУдаления() = 0 Тогда	Объект.Удалить(0);				КонецЕсли;
		
	ИначеЕсли	СтатусВПравилах = "СнятьПометку"	Тогда
		
		Если Объект.ПометкаУдаления() = 1 Тогда	Объект.СнятьПометкуУдаления();	КонецЕсли;
		
	КонецЕсли;
            
	Возврат(Объект);
	
КонецФункции

//--------------------------------------------------------------------------------------------------

Функция УстановитьСтатусПроводок(Объект, СтатусВПравилах="Авто", ВыключитьПроводки)
	                                          
	Операция = СоздатьОбъект("Операция");
	Операция.НайтиОперацию(Объект.ТекущийДокумент());
	
	Если		СтатусВПравилах = "Авто"			Тогда
		
		Если ПустоеЗначение(ВыключитьПроводки) = 1 Тогда
			Если Операция.ВключитьПроводки() = 0 Тогда	Операция.ВключитьПроводки(1)	КонецЕсли;
		Иначе
			Если Операция.ВключитьПроводки() = 1 Тогда	Операция.ВключитьПроводки(0)	КонецЕсли;
		КонецЕсли;	                                  
		
	ИначеЕсли	СтатусВПравилах = "Включить"		Тогда
		
		Если Операция.ВключитьПроводки() = 0 Тогда	Операция.ВключитьПроводки(1)	КонецЕсли;
		
	ИначеЕсли	СтатусВПравилах = "Выключить"		Тогда
		
		Если Операция.ВключитьПроводки() = 1 Тогда	Операция.ВключитьПроводки(0)	КонецЕсли;
		
	КонецЕсли;
            
	Возврат(Объект);

КонецФункции		//	УстановитьСтатусПроводок()

//--------------------------------------------------------------------------------------------------

Функция ОтменитьПроведение(Объект, СтатусВПравилах="Авто", СтатусВФайле="НеИзвестен")
	
	Если		СтатусВПравилах = "Авто"				Тогда
		
		Если СтатусВФайле="НеИзвестен"	Тогда
			
			Возврат(Объект);
			
		ИначеЕсли ПустоеЗначение(СтатусВФайле) = 0 Тогда
			
			Если Объект.Проведен() = 1 Тогда	Объект.СделатьНеПроведенным();	КонецЕсли;
			
		КонецЕсли;	                                  
		
	ИначеЕсли	СтатусВПравилах = "ОтменитьПроведение"	Тогда
		
		Если Объект.Проведен() = 1 Тогда	Объект.СделатьНеПроведенным();	КонецЕсли;
		
	//ИначеЕсли	СтатусВПравилах = "Провести "	Тогда	//	Проводим потом...
		
	КонецЕсли;
            
	Возврат(Объект);
	
КонецФункции

//--------------------------------------------------------------------------------------------------

Процедура ЗагрузитьОбъектСправочника()
	
	Перем	Вид;
	Перем	ИдПараметровЗагрузки;
	Перем	ОбъектМД;
	
	Объект				=	гФайл.ТекущийЭлементВВидеОбъекта();
	СозданНовыйОбъект	=	0;
	
	//Объект.ДокументВладелец.setProperty("NewParser", 1);
	
	                                                               
	НайтиПравило(Объект, Вид, ИдПараметровЗагрузки);
	Если ПустоеЗначение(Вид) = 1 Тогда Возврат КонецЕсли;
	ЗагрузитьПараметрыЗагрузки(ИдПараметровЗагрузки);
	
	НовыеНеСоздавать	=	гТабКэшПараметровЗагрузки.НовыеНеСоздавать;
	
	ТекущийОбъект		=	УстановитьСправочникПоСсылке(Объект, Вид, СозданНовыйОбъект, НовыеНеСоздавать, ОбъектМД);
	
	Если ТекущийОбъект = "Ошибка" Тогда Возврат КонецЕсли;
	
	ОбъектБД	=	СоздатьОбъект("Справочник." + Вид);
	
	Если ПустоеЗначение(ТекущийОбъект) = 0 Тогда
		
		Если ПустоеЗначение(СозданНовыйОбъект) = 1 Тогда
			Если ПустоеЗначение(гТабКэшПараметровЗагрузки.ЗамещатьНайденные) = 1 Тогда
				Если ТекущийОбъект.ПометкаУдаления() = 0 Тогда	//	этот объект не создан по ссылке из реквизитов других объектов
					Возврат;	//	найденные не замещаем
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ОбъектБД.НайтиЭлемент(ТекущийОбъект);
		
	Иначе				//	Ссылки нет (Начиная с версии 4.01 ссылка есть ВСЕГДА)
		                      
		Если ПустоеЗначение(НовыеНеСоздавать) = 0 Тогда Возврат КонецЕсли;	//	новые не создаем
		ЭтоГруппа	=	Число(Объект.ПолучитьАтрибут("ЭтоГруппа"));
		Если ЭтоГруппа = 1 Тогда
			ОбъектБД.НоваяГруппа();
		Иначе
			ОбъектБД.Новый();
		КонецЕсли;
		ОбъектБД.УстановитьНовыйКод();
		СозданНовыйОбъект	=	1;
		
	КонецЕсли;
	
	
	ЕстьВладелец				=	ОбъектМД.Владелец.Выбран();
	ЕстьКонтроль				=	ОбъектМД.КонтрольУникальности;
	Уникальность				=	ОбъектМД.СерииКодов;
	АвтоНумерация				=	ОбъектМД.АвтоНумерация - 1;
	
	ДатаУстановки				=	гТабКэшПараметровЗагрузки.Дата;
	СпособЗагрузкиПоУмолчанию	=	гТабКэшПараметровЗагрузки.СпособЗагрузки;
	СтатусУдаления				=	гТабКэшПараметровЗагрузки.СтатусУдаления;
	ПометкаУдаления				=	Число(Объект.ПолучитьАтрибут("ПометитьНаУдаление"));
	
                                             
	ОбъектБД.ИспользоватьДату(ДатаУстановки, 1);
	
	НеИспользуется	=	?(ОбъектБД.ЭтоГруппа() = 1, "ДляЭлемента", "ДляГруппы");
	             
	//--------- Заполняем реквизиты --------------------------------------------
	
	Реквизиты	=	Объект.ВыбратьУзлы("Реквизит[not(История)]");
	Для Сч = 0 По Реквизиты.КоличествоУзлов() - 1 Цикл
		Реквизит					=	Реквизиты.ПолучитьУзел(Сч);
		ИдРеквизита					=	Реквизит.ПолучитьАтрибут("Идентификатор");
		СпособЗагрузки				=	Реквизит.ПолучитьАтрибут("СпособЗагрузки");
		Значение					=	УстановитьРеквизит(Реквизит, "Справочник", Вид, ИдРеквизита);
		
		Если Значение = "#НеУстановлен" Тогда
			ЗаписатьОшибку("Не установлен реквизит.  Справочник." + Вид + ": " + ОбъектБД + "  Реквизит: " + ИдРеквизита);
			Продолжить;
		КонецЕсли;
		                            
		Если СозданНовыйОбъект = 0 Тогда	//	Найден
			Если ОбъектБД.ПолучитьАтрибут(ИдРеквизита) = Значение Тогда Продолжить КонецЕсли;	//	значение не изменилось
			Если НеУстанавливатьРеквизит(СпособЗагрузкиПоУмолчанию, СпособЗагрузки, ОбъектБД, ИдРеквизита, Значение, СозданНовыйОбъект) = 1 Тогда Продолжить КонецЕсли;
		КонецЕсли;
		
		Если Найти("Код,Наименование,Родитель,Владелец", ИдРеквизита) = 0 Тогда
			РеквМД						=	ОбъектМД.Реквизит(ИдРеквизита);
			ПредставлениеРеквизита		=	" (Справочник." + Вид + "." + ИдРеквизита + ")";
			Если РеквМД.Выбран()		=	0				Тогда	ЗаписатьОшибку("Неверное имя реквизита:" + ПредставлениеРеквизита);	Продолжить;					КонецЕсли;
			Если РеквМД.Использование	=	НеИспользуется	Тогда	ЗаписатьОшибку("Реквизит используется " + НеИспользуется + ПредставлениеРеквизита);	Продолжить;	КонецЕсли;
			Если РеквМД.Тип="Неопределенный" Тогда
				ТипЗнач			=	Реквизит.ПолучитьАтрибут("ТипЗначения");
				ВидЗнач			=	Реквизит.ПолучитьАтрибут("ВидЗначения");
				Точность		=	0;
				Если ТипЗнач = "Число" Тогда
					СтрТочность	=	Значение;
					Точность	=	СтрДлина(	ОтделитьРазделителем(СтрТочность, ".")	);
				КонецЕсли;
				ОбъектБД.НазначитьТип(ИдРеквизита, ТипЗнач + ?(ПустоеЗначение(ВидЗнач)=1, "", "." + ВидЗнач), СтрДлина(Значение) + 10, Точность);
			КонецЕсли;
		КонецЕсли;
		                     
		ОбъектБД.УстановитьАтрибут(ИдРеквизита, Значение);
	КонецЦикла;
	
	//--------- Заполняем истории периодических реквизитов ---------------------
	
	История		=	СоздатьОбъект("Периодический");
	Реквизиты	=	Объект.ВыбратьУзлы("Реквизит[История]");
	Для Сч = 0 По Реквизиты.КоличествоУзлов() - 1 Цикл
		Реквизит		=	Реквизиты.ПолучитьУзел(Сч);
		ИдРеквизита		=	Реквизит.ПолучитьАтрибут("Идентификатор");
		СпособЗагрузки	=	Реквизит.ПолучитьАтрибут("СпособЗагрузки");
		              
		РеквМД						=	ОбъектМД.Реквизит(ИдРеквизита);
		ПредставлениеРеквизита		=	" (Справочник." + Вид + "." + ИдРеквизита + ")";
		Если РеквМД.Выбран()		=	0				Тогда	ЗаписатьОшибку("Неверное имя реквизита"		+ ПредставлениеРеквизита);					Продолжить;	КонецЕсли;
		Если РеквМД.Использование	=	НеИспользуется	Тогда	ЗаписатьОшибку("Реквизит используется "		+ НеИспользуется + ПредставлениеРеквизита);	Продолжить;	КонецЕсли;
		Если РеквМД.Периодический	=	0				Тогда	ЗаписатьОшибку("Реквизит непериодический"	+ ПредставлениеРеквизита);					Продолжить;	КонецЕсли;
			
		История.ИспользоватьОбъект(ИдРеквизита, ОбъектБД);
		
		ВыборкаИстории	=	Реквизит.ВыбратьУзлы("История");
		Для СчИстории = 0 По ВыборкаИстории.КоличествоУзлов() - 1 Цикл
			Эл_История		=	ВыборкаИстории.ПолучитьУзел(СчИстории);
			ДатаЗначения	=	Дата(Эл_История.ПолучитьАтрибут("Дата"));
			Значение		=	УстановитьРеквизит(Эл_История, "Справочник", Вид, ИдРеквизита);
			Если Значение = "#НеУстановлен" Тогда
				ЗаписатьОшибку("Не установлен реквизит.  Справочник." + Вид + ": " + ОбъектБД + "  Реквизит: " + ИдРеквизита);
				Продолжить;
			КонецЕсли;
			Если РеквМД.Тип	=	"Неопределенный"	Тогда
				ТипЗнач			=	Эл_История.ПолучитьАтрибут("ТипЗначения");
				ВидЗнач			=	Эл_История.ПолучитьАтрибут("ВидЗначения");
				Точность		=	0;
				Если ТипЗнач = "Число" Тогда
					СтрТочность	=	Значение;
					Точность	=	СтрДлина(	ОтделитьРазделителем(СтрТочность, ".")	);
				КонецЕсли;
				История.НазначитьТип(ТипЗнач + ?(ПустоеЗначение(ВидЗнач)=1, "", "." + ВидЗнач), СтрДлина(Значение) + 10, Точность);
			КонецЕсли;
			Если НеУстанавливатьРеквизит(СпособЗагрузкиПоУмолчанию, СпособЗагрузки, История, ДатаЗначения, Значение, СозданНовыйОбъект) = 1 Тогда Продолжить КонецЕсли;
			История.Значение	=	Значение;
			История.ДатаЗнач	=	ДатаЗначения;
			История.Записать();
		КонецЦикла;
	КонецЦикла;
	
	//--------------------------------------------------------------------------
	
	Если ПроверкаУникальностиОбъектаСправочника(ОбъектБД, ЕстьКонтроль, ЕстьВладелец, Уникальность, АвтоНумерация) = 0 Тогда Возврат КонецЕсли;
	
	
	ОбъектБД.Записать();
	
	СписокЗагруженныхЭлементов.ДобавитьЗначение(ОбъектБД.ТекущийЭлемент());
	
	УстановитьСтатусУдаления(ОбъектБД, СтатусУдаления, ПометкаУдаления);
	
КонецПроцедуры		//	ЗагрузитьОбъектСправочника()                    

                                                                                                    
Процедура УдалитьОбъектыПоУсловиям(ПолныйИд, ДатаНач, ДатаКон, Режим, Условия)
	
	Состояние("Очистка базы данных.  Удаляются объекты вида:  "	+	ПолныйИд);
	
	Если	Найти(ПолныйИд, "Справочник.") > 0	Тогда
		       
		НачатьТранзакцию();
		Объект	=	СоздатьОбъект(ПолныйИд);
		Объект.ВыбратьЭлементы(0);
		Пока Объект.ПолучитьЭлемент() = 1 Цикл
			Если ПустоеЗначение(Условия) = 0 Тогда
				Если УсловияВыполняются(Условия, Объект.ТекущийЭлемент()) = 0	Тогда	Продолжить	КонецЕсли;
			КонецЕсли;
			Объект.Удалить(Режим);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли	Найти(ПолныйИд, "Документ") > 0	Тогда
		                   
		НачатьТранзакцию();
		Объект	=	СоздатьОбъект(ПолныйИд);
		Объект.ВыбратьДокументы(ДатаНач, ДатаКон);
		Пока Объект.ПолучитьДокумент() = 1 Цикл
			Если ПустоеЗначение(Условия) = 0 Тогда
				Если УсловияВыполняются(Условия, Объект.ТекущийДокумент()) = 0	Тогда	Продолжить	КонецЕсли;
			КонецЕсли;
			Объект.Удалить(Режим);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли	ПолныйИд = "Константа"			Тогда
		
		Для Сч = 1 По Метаданные.Константа() Цикл
			Ид = Метаданные.Константа(Сч).Идентификатор;
			Если Метаданные.Константа(Сч).Периодический = 1 Тогда
				История		=	СоздатьОбъект("Периодический");
				История.ИспользоватьОбъект(Ид);
				//	это потому что глючит...
				Если (ПустоеЗначение(ДатаНач) = 1) И (ПустоеЗначение(ДатаКон) = 1) Тогда
					История.ВыбратьЗначения();
				ИначеЕсли	ПустоеЗначение(ДатаНач) = 1	Тогда
					История.ВыбратьЗначения(,ДатаКон);
				ИначеЕсли	ПустоеЗначение(ДатаКон) = 1	Тогда
					История.ВыбратьЗначения(ДатаНач);
				Иначе
					История.ВыбратьЗначения(ДатаНач, ДатаКон);
				КонецЕсли;
		        
				Пока История.ПолучитьЗначение() = 1 Цикл
					Если ПустоеЗначение(Условия) = 0 Тогда
						Если УсловияВыполняются(Условия, История.Значение) = 0	Тогда	Продолжить	КонецЕсли;
					КонецЕсли;
					История.Удалить();
				КонецЦикла;
			Иначе
				Если ПустоеЗначение(Условия) = 0 Тогда
					Если УсловияВыполняются(Условия, Константа.ПолучитьАтрибут(Ид)) = 0	Тогда	Продолжить	КонецЕсли;
				КонецЕсли;
				Константа.УстановитьАтрибут(Ид, ПолучитьПустоеЗначение());
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

//--------------------------------------------------------------------------------------------------

Процедура ОчиститьБазу(Интерактивно=0)
	
	Если ПустоеЗначение(гПравила) = 1 Тогда
		Предупреждение("Не загружены правила конвертации!");
		Возврат;
	КонецЕсли;

	ПравилаОчистки	=	гПравила.ВыбратьУзлы("//УдалитьВсеПоУсловиям");
	КоличествоУзлов	=	ПравилаОчистки.КоличествоУзлов();
	
	Если (ПустоеЗначение(КоличествоУзлов) = 1) И (Интерактивно = 1) Тогда
		Предупреждение("Данные правила конвертации не содержат условий очистки базы данных!");
		Возврат;
	КонецЕсли;
	
	Для Сч = 0 По КоличествоУзлов - 1 Цикл
		Правило	=	ПравилаОчистки.ПолучитьУзел(Сч);
		
		Тип		=	Правило.ПолучитьАтрибут("Тип");
		Вид		=	Правило.ПолучитьАтрибут("Вид");
		ДатаНач	=	Дата(Правило.ПолучитьАтрибут("С"));
		ДатаКон	=	Дата(Правило.ПолучитьАтрибут("По"));
		Режим	=	1 - Правило.ПолучитьАтрибут("ПометитьНаУдаление");
		Условия	=	Правило.ВыбратьУзел("Условия");
		          
		
		Если ПустоеЗначение(ДатаНач) = 1 Тогда
			ДатаНач	=	ФормДатаНач;
		КонецЕсли;
		Если ПустоеЗначение(ДатаКон) = 1 Тогда
			ДатаКон	=	ФормДатаКон;
		КонецЕсли;
		
		
		Если		ПустоеЗначение(Вид) = 1		Тогда
			                                         
			Если	(ПустоеЗначение(Тип) = 1) Или (Тип = "Справочник")	Тогда
				Для СчСправочников = 1 По Метаданные.Справочник() Цикл
					ПолныйИд	=	Метаданные.Справочник(СчСправочников).ПолныйИдентификатор();
					УдалитьОбъектыПоУсловиям(ПолныйИд, ДатаНач, ДатаКон, Режим, Условия);
				КонецЦикла;
			КонецЕсли;
			                                                                 
			Если	(ПустоеЗначение(Тип) = 1) Или (Тип = "Документ")	Тогда
				УдалитьОбъектыПоУсловиям("Документ", ДатаНач, ДатаКон, Режим, Условия);
			КонецЕсли;
			
			Если	(ПустоеЗначение(Тип) = 1) Или (Тип = "Константа")	Тогда
				УдалитьОбъектыПоУсловиям("Константа", ДатаНач, ДатаКон, Режим, Условия);
			КонецЕсли;
			
		Иначе
			                        
			ПолныйИд	=	Тип + "." + Вид;
			УдалитьОбъектыПоУсловиям(ПолныйИд, ДатаНач, ДатаКон, Режим, Условия);
		
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры		//	ОчиститьБазу()

//--------------------------------------------------------------------------------------------------

Функция ПолучитьИдентификаторКонфигурации()
	
	Ид	=	СокрЛП(Метаданные.Идентификатор);
	
	Возврат(Ид);

КонецФункции

//--------------------------------------------------------------------------------------------------

Функция НайтиПервыйСуществующийФайл(СписокВозможныхМест)
	
	Для Сч = 1 По СписокВозможныхМест.РазмерСписка() Цикл
		ПолноеИмя	=	СписокВозможныхМест.ПолучитьЗначение(Сч);
		Если Фс.СуществуетФайл(ПолноеИмя) = 1 Тогда	Возврат(ПолноеИмя)	КонецЕсли;
	КонецЦикла;

	Возврат("");

КонецФункции		//	НайтиПервыйСуществующийФайл()

//--------------------------------------------------------------------------------------------------

Функция ЗагрузитьПравилаКонвертации()
	
	Состояние("Выполняется загрузка правил конвертации...");
	
	
	//ПравилаОбмена	=	гФайл.ТекущийЭлементВВидеОбъекта();
	//
	//гПравила		=	гXMLАнализатор.СоздатьДокумент();
	//гПравила.ЗагрузитьИзСтроки(ПравилаОбмена.ПредставлениеXML);
	
	                                                       
	гПравила = гФайл.ТекущийЭлементВВидеОбъекта();
	

	Если ФормФлОчищатьБазу = 1 Тогда ОчиститьБазу() КонецЕсли;
	
	Возврат(1);
	
КонецФункции		//	ЗагрузитьПравилаКонвертации()

//--------------------------------------------------------------------------------------------------

Функция ЗагрузитьДанные()
	
	гПравила = "";
	
	гСчетчикЗагруженныхОбъектов		=	0;
	гФайл							=	гXMLАнализатор.СоздатьПоследовательноСчитываемыйДокумент();
	
	гФайл.СвязатьСФайлом(ФормИмяФайлаДанных);
	
	ТипТега				=	гФайл.Спуститься();  	
	
	ТабЗагруженныхОбъектов	=	СоздатьОбъект("ТаблицаЗначений");
	ТабЗагруженныхОбъектов.НоваяКолонка("Вид",			"Строка");
	ТабЗагруженныхОбъектов.НоваяКолонка("ТабОбъектов",	"ТаблицаЗначений");
	
	
	//--------------------------------------------
	
	
	СвойстваТекущегоУзла	=	гФайл.СвойстваТекущегоУзла;
	ИмяТега					=	СвойстваТекущегоУзла.Имя;
	
	Если		ИмяТега	=	"ФайлОбмена" 					Тогда
		  
		Для СчАтрибутов = 0 По СвойстваТекущегоУзла.КоличествоАтрибутов - 1 Цикл
		    ИмяАтрибута	=	СвойстваТекущегоУзла.НаименованиеАтрибута(СчАтрибутов);
			Если		ИмяАтрибута = "ИдКонфигурацииПриемника"	Тогда
				ИдКонфигурации		=	СвойстваТекущегоУзла.ЗначениеАтрибута(СчАтрибутов);
			ИначеЕсли	ИмяАтрибута = "ИдПравилКонвертации"		Тогда
				ИдПравилКонвертации	=	СвойстваТекущегоУзла.ЗначениеАтрибута(СчАтрибутов);
			ИначеЕсли	ИмяАтрибута = "ВерсияФормата"			Тогда
				ВерсияФормата		=	СвойстваТекущегоУзла.ЗначениеАтрибута(СчАтрибутов);
			ИначеЕсли	ИмяАтрибута = "ДатаНачала"			Тогда
				ФормДатаНач			=	Дата(СвойстваТекущегоУзла.ЗначениеАтрибута(СчАтрибутов));
			ИначеЕсли	ИмяАтрибута = "ДатаОкончания"			Тогда
				ФормДатаКон			=	Дата(СвойстваТекущегоУзла.ЗначениеАтрибута(СчАтрибутов));
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	
	Сообщить("Начало загрузки:		" + ТекущееВремя() );	//Мусор 
	
	
		НачатьТранзакцию();
	
	
	Пока ТипТега <> 4 Цикл		//	пока не достигнут конец файла
		
		Если ТипТега <> 1 Тогда	ТипТега = гФайл.Следующий(); Продолжить КонецЕсли;	//	пропускаем концы уровней и инструкции
		
		ИмяТега	=	гФайл.СвойстваТекущегоУзла.Имя;
		
		
		Если гСчетчикЗагруженныхОбъектов % гКолвоБуферизуемыхОбъектов = 0 Тогда
			ЗафиксироватьТранзакцию();
			НачатьТранзакцию();
		КонецЕсли;
		

		Если		ИмяТега	=	"ОбъектСправочника"			Тогда	ЗагрузитьОбъектСправочника();
		ИначеЕсли	ИмяТега	=	"ПравилаОбмена" 			Тогда
			
			Для СчАтрибутов = 0 По СвойстваТекущегоУзла.КоличествоАтрибутов - 1 Цикл
				ИмяАтрибута	=	СвойстваТекущегоУзла.НаименованиеАтрибута(СчАтрибутов);
				Если		ИмяАтрибута = "Имя"	Тогда
					ИмяПравил		=	СвойстваТекущегоУзла.ЗначениеАтрибута(СчАтрибутов);
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			
			Если СокрЛП(ИмяПравил)<>"Аналитика финансового планирования" тогда
				Предупреждение("Указанный файл предназначен для обмена 
				|"+ИмяПравил+"!
				|Загрузка данных невозможна.");
				Возврат 0;
			КонецЕсли;

			ЗагрузитьПравилаКонвертации();
		Иначе
			ТипТега = гФайл.Спуститься();
			Продолжить;
		КонецЕсли;
		   
		ТипТега = гФайл.Следующий();
		
		гСчетчикЗагруженныхОбъектов	=	гСчетчикЗагруженныхОбъектов + 1;
		
		Если гСчетчикЗагруженныхОбъектов % 10 = 0 Тогда
			Состояние("Обработано " + гСчетчикЗагруженныхОбъектов + " объектов");
		КонецЕсли;

	КонецЦикла;

	
	Если ПустоеЗначение(гСписокВспомогательныхОбъектов) = 0 Тогда
		Сообщить("Удалим вспомогательные объекты", "");
		УдалитьОбъекты(гСписокВспомогательныхОбъектов, 1);
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();                                        
	
	Сообщить("Конец загрузки:		" + ТекущееВремя() );	//Мусор
	
	
	Предупреждение("Загрузка завершена! 
					|Обработано объектов:  " + Строка(гСчетчикЗагруженныхОбъектов-1) );
					
	Возврат 1;
	
КонецФункции		//	ЗагрузитьДанные()

//--------------------------------------------------------------------------------------------------

Процедура ОткрытьФайлДляПросмотра(ИмяФайла)
	
	Если ФС.СуществуетФайл(ИмяФайла) = 1 Тогда 
		ЗапуститьПриложение(ИмяФайла);
	Иначе 
		Предупреждение("Файл с таким именем не существует!");					
	КонецЕсли;    
	
КонецПроцедуры
         
//--------------------------------------------------------------------------------------------------

//******************************************************************************
//	УстановитьРодителя(ОбъектФП, СправРодитель)
//
//	Параметры:
//	ОбъектФП (OLE) - Элемент (группа) справочника конфигурации "Фин. планирование".
// 	СправРодитель (Справочник "ФП_Справочники") - группа справочника (верхнего уровня)
//		в которую добавляются элементы из справочника конфигурации "Фин. планирование".
//
//	Возвращаемое значение:
//	(группа) - группа вышестоящего уровня для параметра ОбъектФП.
//
//	Описание:
//	Данная функция ищет и при необходимости создает новые группы в справочнике 
//	"ФП_Справочники" текущей конфигурации. Поиск осуществляется в соответствии
//	с иерархичностью данных в справочнике конфигурации "Фин. планирование", вплоть до 
//	переданного параметра ОбъектФП.

Функция УстановитьРодителя(Знач ОбъектФП, Знач СправРодитель)
	
	Если ОбъектФП.Уровень() = 1 Тогда
		Возврат СправРодитель;
	КонецЕсли;
	
	Справ = СоздатьОбъект("Справочник.ФП_Справочники");
	СписокРодителей = СоздатьОбъект("СписокЗначений");
	КоличествоУровней = ОбъектФП.Уровень();
	
	Для Индекс = 1 По КоличествоУровней - 1 Цикл
		ОбъектФП = ОбъектФП.Родитель;
		СписокРодителей.ДобавитьЗначение(ОбъектФП, Строка(КоличествоУровней - Индекс));
	КонецЦикла;
	
	СписокРодителей.СортироватьПоПредставлению();
	ТекущийРодитель = СправРодитель;
	
	Для Индекс = 1 По КоличествоУровней Цикл
		
		Если Индекс = 1 Тогда
			Справ.НайтиЭлемент(СправРодитель);
		Иначе
			ОбъектФП = СписокРодителей.ПолучитьЗначение(Индекс-1);
			Если Справ.НайтиПоКоду(ОбъектФП.Код, 1) = 0 Тогда
				Справ.НоваяГруппа();
				Справ.Код = ОбъектФП.Код;
				Справ.Наименование = ОбъектФП.Наименование;
				Справ.Записать();
			КонецЕсли;
			СписокЗагруженныхЭлементов.ДобавитьЗначение(Справ.ТекущийЭлемент());
		КонецЕсли;
		ТекущийРодитель = Справ.ТекущийЭлемент();
		Справ.ИспользоватьРодителя(ТекущийРодитель);
		
	КонецЦикла;
	
	Возврат ТекущийРодитель;
	
КонецФункции // УстановитьРодителя()

//******************************************************************************
//	НайтиЭлемент(Объект)
//
//	Параметры:
//	Объект (OLE) - Элемент, группа справочника "Показатели" конфигурации "Фин. планирование".
//
//	Возвращаемое значение:
//	(элемент, группа) - элемент, группа справочника "ФП_Справочники".
//
//	Описание:
//	Справочник "Статьи" конфигурации "Фин. планирование", имет связку со справочником 
//	"Показатели". Данная функция реализует данную связь на уровне текущей конфигурации.

Функция НайтиЭлемент(Объект)
	
	Если Объект.Выбран() = 1 Тогда
		Справ = СоздатьОбъект("Справочник.ФП_Справочники");
		Справ.ИспользоватьРодителя(ПолучитьПустоеЗначение("Справочник.ФП_Справочники"));
		Если Справ.НайтиПоНаименованию("Финансовые показатели", 1, 1) = 1 Тогда
			СправРодитель = Справ.ТекущийЭлемент();
			Справ.ИспользоватьРодителя(УстановитьРодителя(Объект, СправРодитель));
			Если Справ.НайтиПоКоду(Объект.Код, 1) = 1 Тогда
				Возврат Справ.ТекущийЭлемент();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат "";
	
КонецФункции // НайтиЭлемент()

//******************************************************************************
//	ДобавитьНовыеЭлементы(ИДСправочника, СправФП, СправРодитель)
//
//	Параметры:
//	ИДСправочника (строка) - Идентификатор справочника конфигурации "Фин.планирование".
//	СправФП  (OLE) - Справочник конфигурации "Фин. планирование".
//	СправРодитель (Справочник "ФП_Справочники") - группа справочника (верхнего уровня)
//		в которую добавляются отсутствующие элементы из справочника конфигурации 
//		"Фин. планирование".
//
//	Описание:
//	Данная процедура добавляет новые элементы из справочника конфигурации 
//	"Фин. планирование" в Справочник "ФП_Справочники" в группу верхнего уровня,
//	наименование которой соответствует идентификатору справочника конфигурации 
//	"Фин. планирование".

Процедура ДобавитьНовыеЭлементы(ИДСправочника, СправФП, СправРодитель)
	
	Справ = СоздатьОбъект("Справочник.ФП_Справочники");
	Справ.ИспользоватьРодителя(СправРодитель);
	
	СправФП.ВыбратьЭлементы(1);
	Пока СправФП.ПолучитьЭлемент(1) = 1 Цикл 
		
		Если ИДСправочника = "ВариантыБюджетов" Тогда
			Если СправФП.Цикличность.Выбран() = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Справ.ИспользоватьРодителя(УстановитьРодителя(СправФП.ТекущийЭлемент(), СправРодитель));
				
		Если Справ.НайтиПоКоду(СправФП.Код, 1) = 0 Тогда
			Если СправФП.ЭтоГруппа() = 1 Тогда
				Справ.НоваяГруппа();
			Иначе
				Справ.Новый();
			КонецЕсли;
			Справ.Код = СправФП.Код;
		КонецЕсли;
		
		Справ.Наименование = СправФП.Наименование;
		
		Справ.Записать();
		
		СписокЗагруженныхЭлементов.ДобавитьЗначение(Справ.ТекущийЭлемент());
		
		Если СправФП.ЭтоГруппа() = 0 Тогда
			Если ИДСправочника = "ВариантыБюджетов" Тогда
				Справ.Цикличность   = СправФП.Цикличность.Идентификатор();
				Справ.Периодичность = СправФП.Периодичность.Идентификатор();
				Справ.Валюта=СправФП.Валюта;
				Справ.Записать();
			ИначеЕсли ИДСправочника = "Статьи" Тогда
				Справ.ПоказательДебет  = НайтиЭлемент(СправФП.ПоказательДебет);
				Справ.ПоказательКредит = НайтиЭлемент(СправФП.ПоказательКредит); 
				Справ.Записать(); 
			КонецЕсли;
		КонецЕсли;
		Если Справ.ПометкаУдаления() = 1 Тогда
			Справ.СнятьПометкуУдаления();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьНовыеЭлементы()

//******************************************************************************
//	УдалитьОтсутствующиеЭлементы(СправРодитель)
//
//	Параметры:
//	СправРодитель (Справочник "ФП_Справочники") - группа справочника (верхнего уровня)
//		в которой осуществляется поиск элементов в списке загруженных элементов  
//		справочника конфигурации "Фин.планирование"
//
//	Описание:
//	В случае? если какой-либо элемент справочника конфигурации "Фин. планирование"
//	был в процессе работы удален, его необходимо также удалить из текущей конфигурации.
//	Данная процедура проверяет наличие элементов справочника определенного вида в
//	конфигурации "Фин. планирование" и все отсутствующие элементы помечает на удаление.

Процедура УдалитьОтсутствующиеЭлементы(СправРодитель="")
	
	Справ = СоздатьОбъект("Справочник.ФП_Справочники");
	
	Если ТипЗначенияСтр(СправРодитель)="Справочник" тогда	
		Справ.ИспользоватьРодителя(СправРодитель); 
	КонецЕсли;
	
	Справ.ВыбратьЭлементы(1);
	Пока Справ.ПолучитьЭлемент(1) = 1 Цикл 
		Если СписокЗагруженныхЭлементов.НайтиЗначение(Справ.ТекущийЭлемент()) = 0 Тогда
			Справ.Удалить(0);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры // УдалитьОтсутствующиеЭлементы()

//******************************************************************************
//	ЗагрузитьСправочник(ИДСправочника, V77)
//
//	ИДСправочника (строка) - Идентификатор справочника конфигурации "Фин.планирование".
//	V77  (OLE) - конфигурация "Фин. планирование".
//
//	Описание:
//  Инициализирует процесс загрузки групп и элементов справочника по переданному идентификатору 

Процедура ЗагрузитьСправочник(ИДСправочника, V77)
	
	Состояние("Загружается справочник: "+V77.Метаданные.Справочник(ИДСправочника).Представление());
	Справ = СоздатьОбъект("Справочник.ФП_Справочники");
	Наименование = 	?(ИДСправочника = "ВариантыБюджетов", "Варианты бюджетов", 
					?(ИДСправочника = "Статьи", "Статьи оборотов", 
					?(ИДСправочника = "Показатели", "Финансовые показатели",ИДСправочника)));
	Справ.ИспользоватьРодителя(ПолучитьПустоеЗначение("Справочник.ФП_Справочники"));
	Если Справ.НайтиПоНаименованию(Наименование, 1, 1) = 0 Тогда
		Справ.НоваяГруппа();
		Справ.Код = "00000";
		Справ.Наименование = Наименование;
		Справ.Записать();
	КонецЕсли;
	
	СписокЗагруженныхЭлементов.УдалитьВсе();
	СправФП = V77.CreateObject("Справочник."+ИДСправочника);
	ДобавитьНовыеЭлементы(ИДСправочника, СправФП, Справ.ТекущийЭлемент());
	УдалитьОтсутствующиеЭлементы(Справ.ТекущийЭлемент());
	
КонецПроцедуры // ЗагрузитьСправочник()

//******************************************************************************
//	ЗагрузкаСправочников()
//
//
//	Описание:
//  Загружает группы и элементы справочников 
//  "Подразделения","Проекты","Показатели","Статьи","Валюты" и
//  "ВариантыБюджетов" конфигурации "Фин. планирование".

Процедура ЗагрузкаСправочников()  
	
	Перем ТипЗагрузки;
	Перем ИмяФайла;
	
	Меню=СоздатьОбъект("СписокЗначений");
	Меню.ДобавитьЗначение("OLE","Соединить с базой ""Финансовое планирование""");
	Меню.ДобавитьЗначение("Файл","Загрузить из файла обмена в формате XML");
	
	Если Меню.ВыбратьЗначение(ТипЗагрузки,,,10,1)>0 Тогда
		
		Стр = ВосстановитьЗначение("КаталогИБФинансовоеПланирование");
		
		Если ПустоеЗначение(Стр)=0 тогда 
			
			ТекущийКаталог=Сред(Стр,Найти(Стр,"/d")+3,Найти(Стр,"/n")-7);
			
		КонецЕсли; 
		
		Если ТипЗагрузки="Файл" тогда

			Результат = Загрузчик.ЗагрузитьВК(СокрЛП(Константа.ПутьКВнешнимБиблиотекам)+"\v7plus.dll", "Addin.V7Mail=faa6ebe0-1069-11d4-a5ff-008048da0cd2
		    												|Addin.V7SysInfo=046d5520-2c8f-11d4-a62a-008048da0cd2
		    												|Addin.V7HttpReader=1e7bc440-1076-11d4-a635-004095e0ebd2
		    												|Addin.XMLParser=bb45ed80-1ad7-11d4-a635-004095e0ebd2
		    												|Addin.V7TextFile=921da8db-1e6f-4d61-8f49-a3127b799b19");
			
			гXMLАнализатор		=	СоздатьОбъект("AddIn.XMLParser");
			
			Если Число(гXMLАнализатор.ВерсияАнализатора) < 2 Тогда
				Предупреждение("Для работы с программой необходимо обновить внешнюю компоненту v7plus.dll !");
				СтатусВозврата(0);	Возврат;
			КонецЕсли;  
			
			Каталог = Стр;
			
			Выбор = "Файл настройки (*.xml)|*.xml";
			
			Если ФС.ВыбратьФайл(0, ИмяФайла, Каталог, "Выберите файл", Выбор, , ) = 1 Тогда
				ФормИмяФайлаДанных = Каталог + ИмяФайла;
			Иначе
				Предупреждение("Не выбран файл с данными!");
				СтатусВозврата(0);	Возврат;
			КонецЕсли;	
			
			СписокЗагруженныхЭлементов.УдалитьВсе();
			Если ЗагрузитьДанные()=0 тогда
				Возврат;
			Иначе
				
				УдалитьОтсутствующиеЭлементы();
				
				Стр= "/d"""+Каталог+"""" +" /n";
				СохранитьЗначение("КаталогИБФинансовоеПланирование",Стр);
				
			КонецЕсли;
			
		Иначе
			
			Если ПустоеЗначение(Стр)=0 тогда
				Если Вопрос("Справочники будут загружены из каталога"+РазделительСтрок+ТекущийКаталог
				+РазделительСтрок+"Продолжить?",4,10)=7 тогда
					Стр="";
				КонецЕсли;
			КонецЕсли;
			
			Состояние("Инициализация информационной базы ""Финансовое планирование""");
			
			V77 = СоздатьОбъект("V77.Application");
			Если V77.Initialize(V77.RMTrade, Стр, "NO_SPLASH_SHOW") = 0 Тогда
				Предупреждение("Ошибка инициализации информационной базы ""Финансовое планирование""!", 10);
				Возврат;
			КонецЕсли;
			Стр = "/d"""+V77.EvalExpr("КаталогИБ()")+"""" +" /n"+ V77.EvalExpr("ИмяПользователя()");
			СохранитьЗначение("КаталогИБФинансовоеПланирование",Стр);
			
			ЗагрузитьСправочник("Подразделения",V77);
			ЗагрузитьСправочник("Проекты",V77);
			ЗагрузитьСправочник("Показатели",V77);
			ЗагрузитьСправочник("Статьи",V77);
			ЗагрузитьСправочник("Валюты",V77);
			ЗагрузитьСправочник("ВариантыБюджетов",V77); 
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузкаСправочников()	

//******************************************************************************

Форма.ТолькоПросмотр(1);
СписокЗагруженныхЭлементов = СоздатьОбъект("СписокЗначений");

//--------------------------------------------------------------------------------------------------

гТабКэшПараметровЗагрузки			=	СоздатьОбъект("ТаблицаЗначений");
гТабКэшПараметровЗагрузки.НоваяКолонка("Ид",						"Строка");
гТабКэшПараметровЗагрузки.НоваяКолонка("Дата",						"Дата");
гТабКэшПараметровЗагрузки.НоваяКолонка("ЗамещатьНайденные",			"Число");
гТабКэшПараметровЗагрузки.НоваяКолонка("НовыеНеСоздавать",			"Число");
гТабКэшПараметровЗагрузки.НоваяКолонка("СпособЗагрузки",			"Строка");
гТабКэшПараметровЗагрузки.НоваяКолонка("СтатусУдаления",			"Строка");
гТабКэшПараметровЗагрузки.НоваяКолонка("СтатусПроводок",			"Строка");
гТабКэшПараметровЗагрузки.НоваяКолонка("СтатусПроведения",			"Строка");
гТабКэшПараметровЗагрузки.НоваяКолонка("ЗагружатьОперации",			"Число");
гТабКэшПараметровЗагрузки.НоваяКолонка("ЗагружатьЗаписиЖР",			"Число");
гТабКэшПараметровЗагрузки.НоваяКолонка("НеУдалятьСтроки",			"Число");

гТабКэшПараметровЗагрузки.НоваяСтрока();
гТабКэшПараметровЗагрузки.Ид						=	"ПараметрыПоУмолчанию";
гТабКэшПараметровЗагрузки.Дата						=	РабочаяДата();				//	???
гТабКэшПараметровЗагрузки.ЗамещатьНайденные			=	1;
гТабКэшПараметровЗагрузки.СпособЗагрузки			=	"ЗамещатьНеПустыми";
гТабКэшПараметровЗагрузки.НовыеНеСоздавать			=	0;
гТабКэшПараметровЗагрузки.СтатусУдаления			=	"Авто";
гТабКэшПараметровЗагрузки.СтатусПроводок			=	"Авто";
гТабКэшПараметровЗагрузки.СтатусПроведения			=	"Авто";
гТабКэшПараметровЗагрузки.ЗагружатьОперации			=	1;
гТабКэшПараметровЗагрузки.ЗагружатьЗаписиЖР			=	1;
гТабКэшПараметровЗагрузки.НеУдалятьСтроки			=	0;

//--------------------------------------------------------------------------------------------------
	
гТабКэшПравил	=	СоздатьОбъект("ТаблицаЗначений");
гТабКэшПравил.НоваяКолонка("Ид",									"Строка");
гТабКэшПравил.НоваяКолонка("Приемник_Вид",							"Строка");
гТабКэшПравил.НоваяКолонка("ПараметрыЗагрузки",						"Строка");

//--------------------------------------------------------------------------------------------------

СписокВозможныхМест	=	СоздатьОбъект("СписокЗначений");
СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()					+	"v7plus.dll"	);
СписокВозможныхМест.ДобавитьЗначение(	КаталогПрограммы()			+	"v7plus.dll"	);
СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()	+	"ExtForms\"	+	"v7plus.dll"	);
СписокВозможныхМест.ДобавитьЗначение(	гСтрПуть					+	"v7plus.dll"	);

гПутьОбъекта_КомпонентаV7plus			=	НайтиПервыйСуществующийФайл(СписокВозможныхМест);

//--------------------------------------------------------------------------------------------------

ФормИмяФайлаДанных						=	КаталогПользователя()	+	"CDData.xml";
гКолвоБуферизуемыхОбъектов				=	150;		//	на одну транзакцию
Восстанавливать							=	0;
ФормФлОчищатьБазу						=	1;
ФормФлЗапоминатьСсылки					=	1;

//--------------------------------------------------------------------------------------------------
