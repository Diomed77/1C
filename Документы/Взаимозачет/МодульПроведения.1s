//******************************************************************************
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения() Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ОбработкаПроведения()
//Закомментировано Инсталлятором МОД:Процедура ОбработкаПроведения()
	Перем ДолгиПокупателей, ДолгиПоставщикам;
	// Проверяем, все ли заполнено
	Если семМожноПровести( Контекст ) = 0 Тогда Возврат; КонецЕсли;
	//Если ДатаДок>ТекущаяДата() Тогда
	//	НеПроводить(Контекст,"Нельзя проводить документ будущей датой!");
	//	Возврат;
	//КонецЕсли;
	глПустаяФирма=Фирма;
	СписокФирм = СоздатьОбъект("СписокЗначений");
	
	Если ТипУчета > Упр Тогда
		Если ПустоеЗначение(Фирма)=1 Тогда
			НеПроводить(Контекст,"Не указана Фирма!");
			Возврат;
		КонецЕсли;         
		СписокФирм.ДобавитьЗначение(Фирма.ТекущийЭлемент());
		Если ТипУчета < Фин Тогда
			// по общему учету
			СписокФирм.ДобавитьЗначение(глПустаяФирма);
		КонецЕсли;
	Иначе
		СписокФирм.ДобавитьЗначение(глПустаяФирма);
	КонецЕсли;                            
	
	Если Поставщик.Выбран() = 0 Тогда
		НеПроводить(Контекст,"Не указан Поставщик!");    
		Возврат;
	КонецЕсли;	 
	
	Если Покупатель.Выбран() = 0 Тогда
		НеПроводить(Контекст,"Не указан Покупатель!");
		Возврат;
	КонецЕсли;	   
	    
	ДолгиПокупателейТ = СоздатьОбъект("ТаблицаЗначений");
	ДолгиПокупателейТ.НоваяКолонка("Док"); 
	ДолгиПокупателейТ.НоваяКолонка("Долг");
	
	ДолгиПоставщикамТ = СоздатьОбъект("ТаблицаЗначений");
	ДолгиПоставщикамТ.НоваяКолонка("Док"); 
	ДолгиПоставщикамТ.НоваяКолонка("Долг");
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку()>0 Цикл
		
		Долг=0;
		
		Если Документ.Выбран()=0 Тогда
			НеПроводить(Контекст,"В строке №"+Строка(НомерСтроки)+" не указан документ!");
			Возврат;
		КонецЕсли;
		
		Если ВидДолга=Перечисление.ВидыДолгаВзаимозачетов.Покупателя Тогда
			ТаблДолгов = ДолгиПокупателейТ; 
			Если ПустоеЗначение(ДолгПокупателя)>0 Тогда
				НеПроводить(Контекст,"В строке №"+Строка(НомерСтроки)+" не указан долг покупателя!");
				Возврат;
			КонецЕсли;
			Долг = ДолгПокупателя; 
			
		ИначеЕсли ВидДолга=Перечисление.ВидыДолгаВзаимозачетов.Поставщику Тогда	
			ТаблДолгов = ДолгиПоставщикамТ;
			Если ПустоеЗначение(ДолгПоставщику)>0 Тогда
				НеПроводить(Контекст,"В строке №"+Строка(НомерСтроки)+" не указан долг поставщику!");
				Возврат;
			КонецЕсли;
			Долг = ДолгПоставщику;
			
		Иначе
			НеПроводить(Контекст,"В строке №"+Строка(НомерСтроки)+" не указан вид долга(покупателя/поставщику)!");
			Возврат;
		КонецЕсли;	
		                     
		Если Долг>0 Тогда
			ТаблДолгов.НоваяСтрока();
			ТаблДолгов.ПолучитьСтрокуПоНомеру(ТаблДолгов.КоличествоСтрок());
			ТаблДолгов.Док = Документ.ТекущийДокумент();
			ТаблДолгов.Долг = Долг;
		КонецЕсли;	
	КонецЦикла;	
	                          
	ДолгиПокупателейТ.Свернуть("Док","Долг"); 
	ДолгиПоставщикамТ.Свернуть("Док","Долг");
	
	ОбщийДолгПокупателейТ = ДолгиПокупателейТ.Итог("Долг"); 
	ОбщийДолгПоставщикамТ = ДолгиПоставщикамТ.Итог("Долг");
	Если ОбщийДолгПокупателейТ <> ОбщийДолгПоставщикамТ Тогда
		НеПроводить(Контекст,"Погашаемый долг покупателя не совпадает с погашаемым долгом поставщика!");
		Возврат;
	КонецЕсли;	
	
	Если (ОбщийДолгПокупателейТ <= 0) И ( ОбщийДолгПоставщикамТ <= 0) Тогда
		Возврат;
	КонецЕсли;
	
	Регистры = СоздатьОбъект("Регистры");
	
	Если ОбщийДолгПокупателейТ>0 Тогда
		// занимаемся долгами покупателей
		КредДокументыПок = СоздатьОбъект("СписокЗначений");
		ДолгиПокупателейТ.Выгрузить(КредДокументыПок, , , "Док");
		 
		РегВзаимПок = Регистры.ВзаиморасчетыПокупателей;
		РегВзаимПок.УстановитьЗначениеФильтра("Фирма", СписокФирм, 2); 
		РегВзаимПок.УстановитьЗначениеФильтра("Клиент", Покупатель, 1); 
		//ANNASID - убираем отбор по документам, будем погашать по ФИФО
		//РегВзаимПок.УстановитьЗначениеФильтра("КредДокумент", КредДокументыПок, 2);
	КонецЕсли;
	
	
	Если ОбщийДолгПоставщикамТ>0 Тогда
		// занимаемся долгами поставщикам
		КредДокументыПост = СоздатьОбъект("СписокЗначений");
		ДолгиПоставщикамТ.Выгрузить(КредДокументыПост, , , "Док");
		 
		РегВзаимПост = Регистры.ВзаиморасчетыПоставщиков;
		РегВзаимПост.УстановитьЗначениеФильтра("Фирма", СписокФирм,2); 
		РегВзаимПост.УстановитьЗначениеФильтра("Клиент", Поставщик, 1); 
		//ANNASID - убираем отбор по документам, будем погашать по ФИФО
		//РегВзаимПост.УстановитьЗначениеФильтра("КредДокумент", КредДокументыПост, 2);
	КонецЕсли;
	
    Если ИтогиАктуальны() = 0 Тогда
		Если ОбщийДолгПокупателейТ > 0 Тогда
			РегВзаимПок.ВременныйРасчет(1);
		КонецЕсли;	 
		Если ОбщийДолгПоставщикамТ > 0 Тогда
			РегВзаимПост.ВременныйРасчет(1);
		КонецЕсли;	
		Регистры.РассчитатьРегистрыНа(ТекущийДокумент());
		Регистры.Актуальность(1);
	КонецЕсли;

	        
	ТаблицаВзаимозачетов = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаВзаимозачетов.НоваяКолонка("Доп");		// 1 - по упр., 0 - по фин.
	ТаблицаВзаимозачетов.НоваяКолонка("ВзаимозачетС");
	ТаблицаВзаимозачетов.НоваяКолонка("Сумма");
	ТаблицаВзаимозачетов.НоваяКолонка("ВСчетВозвратов");
	
	Если ОбщийДолгПоставщикамТ>0 Тогда
		ВалютаПроведения = 	?(ТипУчета < Фин,Поставщик.ВалютаКредитаПоставщика,Рубли);
		НадоПогасить = Пересчет(ОбщийДолгПоставщикамТ,Рубли,ДатаДок,ВалютаПроведения,ДатаДок);
		НадоПогаситьБаз = ОбщийДолгПоставщикамТ;
		
		// занимаемся долгами поставщикам
		ВыбФирма	= 0;           
		БылФинТипУчета=0;
		БылУпрТипУчета=0;
		
		РегВзаимПост	= СоздатьОбъект("ТаблицаЗначений");
		Регистры.ВзаиморасчетыПоставщиков.ВыгрузитьИтоги(РегВзаимПост,1,1);
		
		// ANNASID - в первом цикле отсортируем долги - в первую очередь погасим то что есть в табличной части
		РегВзаимПост.НоваяКолонка("Приоритет");
		РегВзаимПост.НоваяКолонка("ПозицияОплаты");
		РегВзаимПост.ВыбратьСтроки();
		Пока РегВзаимПост.ПолучитьСтроку()>0 Цикл
			Если КредДокументыПост.Принадлежит(РегВзаимПост.КредДокумент)=1 Тогда
				РегВзаимПост.Приоритет=1;
				НомСтр = 0;
				Если ДолгиПоставщикамТ.НайтиЗначение(РегВзаимПост.КредДокумент,НомСтр,"Док") <> 0 Тогда
					ПогашатьПоАкту = Пересчет(ДолгиПоставщикамТ.ПолучитьЗначение(НомСтр,"Долг"),Рубли,ДатаДок,ВалютаПроведения,ДатаДок);
					РегВзаимПост.Долг = Мин(РегВзаимПост.Долг,ПогашатьПоАкту);
				КонецЕсли;
			Иначе
				РегВзаимПост.Приоритет=2;
			КонецЕсли;	
			// позиция оплаты
			ВидКредДок=РегВзаимПост.КредДокумент.Вид();
			
			Если (ВидКредДок="РасходнаяНакладная")
			ИЛИ (ВидКредДок="ПриходнаяНакладная")
			ИЛИ (ВидКредДок="УслугиПеревозки")
			ИЛИ (ВидКредДок="Счет_фактура")
			ИЛИ (ВидКредДок="ВводОстатковКредита")
			Тогда
				ДатаОплаты=РегВзаимПост.КредДокумент.ДатаОплаты;
				Если Число(ДатаОплаты)=0 Тогда
					ДатаОплаты=РегВзаимПост.КредДокумент.ДатаДок;
				КонецЕсли;
			Иначе
				ДатаОплаты=РегВзаимПост.КредДокумент.ДатаДок;
			КонецЕсли;
			Час=0;
			Минут=0;
			Сек=0;
			РегВзаимПост.КредДокумент.ПолучитьВремя(Час,Минут,Сек);
			РегВзаимПост.ПозицияОплаты=Формат( ДатаОплаты,"Д ГГГГММДД") + СформироватьПозициюДокумента(РегВзаимПост.КредДокумент.ДатаДок,Час,Минут,Сек);
		КонецЦикла;	
		РегВзаимПост.Сортировать("+Приоритет,+ПозицияОплаты");
		// ANNASID
		РегВзаимПост.ВыбратьСтроки();
		Пока РегВзаимПост.ПолучитьСтроку()>0 Цикл
			Если ВыбФирма <> РегВзаимПост.Фирма Тогда
				ВыбФирма = РегВзаимПост.Фирма;
				Если ПустоеЗначение(ВыбФирма)=1 Тогда
					БылУпрТипУчета=1;
				Иначе
					БылФинТипУчета=1;
				КонецЕсли;
				//******************************************************************************
				// таблицу, содержащию долги по документам
				ДолгиПоставщикамТ.Выгрузить(ДолгиПоставщикам);
				//******************************************************************************
				// ANNASID 16.10.2012 >>
				//ВалютаПроведения = ?(ПустоеЗначение(ВыбФирма) = 1, 
				//                     Поставщик.ВалютаКредитаПоставщика, 
				//					 Рубли);
				ВалютаПроведения = 	?(ТипУчета < Фин,Поставщик.ВалютаКредитаПоставщика,Рубли);
				// ANNASID 16.10.2012 <<
			КонецЕсли;

			// если уже все погашено, то можно остановиться
			//Если ДолгиПоставщикам.КоличествоСтрок()=0 Тогда
			//	Продолжить;
			//КонецЕсли;
			
			Если НадоПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			// отбираем только долг ФИРМЫ поставщику
			Если РегВзаимПост.Долг>=0 Тогда
				Продолжить;
			КонецЕсли;	
			
			//Поз = 0;
			//Если ДолгиПоставщикам.НайтиЗначение(РегВзаимПост.КредДокумент,Поз,"Док")<=0 Тогда
			//	Продолжить;
			//КонецЕсли;	
			//
			//ДолгиПоставщикам.ПолучитьСтрокуПоНомеру(Поз);
			//Если ДолгиПоставщикам.Долг>0 Тогда 
				
			ДолгРег = -РегВзаимПост.Долг;
			ДолгРегБаз = Пересчет(ДолгРег,ВалютаПроведения,ДатаДок,Рубли,ДатаДок);
				
			ПогашаемыйДолгВРублях = Мин(ДолгРегБаз,НадоПогаситьБаз);
			ПогашДолг = Мин(ДолгРег,НадоПогасить);
				
				//ДолгДоПогашения = ДолгиПоставщикам.Долг;
				//ПогашДолг = Пересчет(ДолгиПоставщикам.Долг,Рубли,ДатаДок,ВалютаПроведения,ДатаДок);
				//Если ПогашДолг<(-РегВзаимПост.Долг) Тогда
				//	ДолгиПоставщикам.Долг = 0;
				//Иначе                       
				//	ПогашДолг = -РегВзаимПост.Долг;
				//	ДолгиПоставщикам.Долг = Макс(0,ДолгиПоставщикам.Долг-Пересчет(ПогашДолг,ВалютаПроведения,ДатаДок,Рубли,ДатаДок));
				//КонецЕсли;
				
				Если ВалютаПроведения=Рубли Тогда
					ПогашДолг = Окр(ПогашДолг,2,1);
				КонецЕсли;	
				
				Регистр.ВзаиморасчетыПоставщиков.Фирма			= РегВзаимПост.Фирма; 
				Регистр.ВзаиморасчетыПоставщиков.Клиент			= РегВзаимПост.Клиент; 
				Регистр.ВзаиморасчетыПоставщиков.ВидОтгрузки	= РегВзаимПост.ВидОтгрузки;
				Регистр.ВзаиморасчетыПоставщиков.КредДокумент	= РегВзаимПост.КредДокумент;
				
				Регистр.ВзаиморасчетыПоставщиков.Долг			= ПогашДолг;
				                                                  
				Регистр.ВзаиморасчетыПоставщиков.КодОперации	= ПогашениеДолгаВзаимозачетом;
				Регистр.ВзаиморасчетыПоставщиков.НДСУслуги		= 0;
				
				Регистр.ВзаиморасчетыПоставщиков.ДвижениеПриходВыполнить();
				 
				НадоПогасить = НадоПогасить - ПогашДолг;
				НадоПогаситьБаз = НадоПогаситьБаз - ПогашаемыйДолгВРублях;
				
				//ТаблицаВзаимозачетов.НоваяСтрока();
				////ТаблицаВзаимозачетов.ПолучитьСтрокуПоНомеру(ТаблицаВзаимозачетов.КоличествоСтрок());
				//ТаблицаВзаимозачетов.ВзаимозачетС	= РегВзаимПост.Клиент.ТекущийЭлемент();
				//ТаблицаВзаимозачетов.Сумма			= ДолгДоПогашения - ДолгиПоставщикам.Долг;
				//ТаблицаВзаимозачетов.Доп			= ПустоеЗначение(ВыбФирма); 
			//КонецЕсли;	
			            
			//Если ДолгиПоставщикам.Долг = 0 Тогда
			//	ДолгиПоставщикам.УдалитьСтроку(Поз);
			//КонецЕсли;	
		КонецЦикла;	
		
		//Если (БылФинТипУчета=0) и (ТипУчета>Упр) Тогда
		//	ДолгиПоставщикамТ.Выгрузить(ДолгиПоставщикам);
		//КонецЕсли;
		//Если (БылУпрТипУчета=0) и (ТипУчета<Фин) Тогда
		//	ДолгиПоставщикамТ.Выгрузить(ДолгиПоставщикам);
		//КонецЕсли;
	КонецЕсли;      
	
	               
	//ТаблицаВзаимозачетов.Свернуть("Доп,ВзаимозачетС","Сумма");
	
	Если ОбщийДолгПокупателейТ>0 Тогда
		ВалютаПроведения = 	?(ТипУчета < Фин,Покупатель.ВалютаКредита,Рубли);
		НадоПогасить = Пересчет(ОбщийДолгПокупателейТ,Рубли,ДатаДок,ВалютаПроведения,ДатаДок);
		НадоПогаситьБаз = ОбщийДолгПокупателейТ;
		
		// занимаемся долгами покупателей
		ВыбФирма	= 0;
		БылФинТипУчета=0;
		БылУпрТипУчета=0;
		
		РегВзаимПок = СоздатьОбъект("ТаблицаЗначений");
		Регистры.ВзаиморасчетыПокупателей.ВыгрузитьИтоги(РегВзаимПок,1,1);
		// ANNASID - в первом цикле отсортируем долги - в первую очередь погасим то что есть в табличной части
		РегВзаимПок.НоваяКолонка("Приоритет");
		РегВзаимПок.НоваяКолонка("ПозицияОплаты");
		РегВзаимПок.ВыбратьСтроки();
		Пока РегВзаимПок.ПолучитьСтроку()>0 Цикл
			Если КредДокументыПок.Принадлежит(РегВзаимПок.КредДокумент)=1 Тогда
				РегВзаимПок.Приоритет=1;
				НомСтр = 0;
				Если ДолгиПокупателейТ.НайтиЗначение(РегВзаимПок.КредДокумент,НомСтр,"Док") <> 0 Тогда
					ПогашатьПоАкту = Пересчет(ДолгиПокупателейТ.ПолучитьЗначение(НомСтр,"Долг"),Рубли,ДатаДок,ВалютаПроведения,ДатаДок);
					РегВзаимПок.Долг = Мин(РегВзаимПок.Долг,ПогашатьПоАкту);
				КонецЕсли;
			Иначе
				РегВзаимПок.Приоритет=2;
			КонецЕсли;	
			// позиция оплаты
			ВидКредДок=РегВзаимПок.КредДокумент.Вид();
			
			Если (ВидКредДок="РасходнаяНакладная")
			ИЛИ (ВидКредДок="ПриходнаяНакладная")
			ИЛИ (ВидКредДок="УслугиПеревозки")
			ИЛИ (ВидКредДок="Счет_фактура")
			ИЛИ (ВидКредДок="ВводОстатковКредита")
			Тогда
				ДатаОплаты=РегВзаимПок.КредДокумент.ДатаОплаты;
				Если Число(ДатаОплаты)=0 Тогда
					ДатаОплаты=РегВзаимПок.КредДокумент.ДатаДок;
				КонецЕсли;
			Иначе
				ДатаОплаты=РегВзаимПок.КредДокумент.ДатаДок;
			КонецЕсли;
			Час=0;
			Минут=0;
			Сек=0;
			РегВзаимПок.КредДокумент.ПолучитьВремя(Час,Минут,Сек);
			РегВзаимПок.ПозицияОплаты=Формат( ДатаОплаты,"Д ГГГГММДД") + СформироватьПозициюДокумента(РегВзаимПок.КредДокумент.ДатаДок,Час,Минут,Сек);
			
		КонецЦикла;	
		РегВзаимПок.Сортировать("+Приоритет,+ПозицияОплаты");
		// ANNASID
				
		РегВзаимПок.ВыбратьСтроки();
		Пока РегВзаимПок.ПолучитьСтроку()>0 Цикл
			Если ВыбФирма <> РегВзаимПок.Фирма Тогда
				ВыбФирма = РегВзаимПок.Фирма;
				Если ПустоеЗначение(ВыбФирма)=1 Тогда
					БылУпрТипУчета=1;
				Иначе
					БылФинТипУчета=1;
				КонецЕсли;
				//******************************************************************************
				// таблицу, содержащию долги по документам
				ДолгиПокупателейТ.Выгрузить(ДолгиПокупателей);
				//******************************************************************************
				// ANNASID 16.10.2012 >>
				//ВалютаПроведения = ?(ПустоеЗначение(ВыбФирма) = 1, 
				//                     Покупатель.ВалютаКредита, 
				//					 Рубли);
				ВалютаПроведения = ?(ТипУчета < Фин,Покупатель.ВалютаКредита,Рубли);
				// ANNASID 16.10.2012 <<
			КонецЕсли;
			
			// если уже все погашено, то можно остановиться
			// ANNASID - при погашении по ФИФО будем делать другую проверку
			//Если ДолгиПокупателей.КоличествоСтрок()=0 Тогда
			//	Продолжить;
			//КонецЕсли;
			Если НадоПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			// ANNASID 
			
			// отбираем только долг покупателя ФИРМЕ
			Если РегВзаимПок.Долг<=0 Тогда
				Продолжить;
			КонецЕсли;	
			
			// ANNASID - при погашении по ФИФО будем делать другую проверку
			//Поз = 0;
			//Если ДолгиПокупателей.НайтиЗначение(РегВзаимПок.КредДокумент,Поз,"Док")<=0 Тогда
			//	Продолжить;
			//КонецЕсли;	
			// ANNASID
			
			//ДолгиПокупателей.ПолучитьСтрокуПоНомеру(Поз);
			//Если ДолгиПокупателей.Долг>0 Тогда          
				//ДолгДоПогашения = ДолгиПокупателей.Долг;
				//ПогашДолг = Пересчет(ДолгиПокупателей.Долг,Рубли,ДатаДок,ВалютаПроведения,ДатаДок);
				//Если ПогашДолг<РегВзаимПок.Долг Тогда
				//	ДолгиПокупателей.Долг = 0;
				//Иначе                       
				//	ПогашДолг = РегВзаимПок.Долг;
				//	ДолгиПокупателей.Долг = Макс(0,ДолгиПокупателей.Долг-Пересчет(ПогашДолг,ВалютаПроведения,ДатаДок,Рубли,ДатаДок));
				//КонецЕсли;	                            
				//
				//ПогашаемыйДолгВРублях = ДолгДоПогашения - ДолгиПокупателей.Долг;
				
				ДолгРег = РегВзаимПок.Долг;
				ДолгРегБаз = Пересчет(ДолгРег,ВалютаПроведения,ДатаДок,Рубли,ДатаДок);
				
				ПогашаемыйДолгВРублях = Мин(ДолгРегБаз,НадоПогаситьБаз);
				ПогашаемыйДолг = Мин(ДолгРег,НадоПогасить);
				
				//Пока ПогашаемыйДолгВРублях>0 Цикл 
					ЧастьПогашаемогоДолгаВРублях = ПогашаемыйДолгВРублях;       
					// привязываем погашение долга покупателя к погашению долгов поставщиков
//					НомСтр = 0;
//					Для Инд = 1 По ТаблицаВзаимозачетов.КоличествоСтрок() Цикл
//						Если ТаблицаВзаимозачетов.ПолучитьЗначение(Инд,"Доп") = ПустоеЗначение(Выбфирма) Тогда
//							НомСтр = Инд;
//						КонецЕсли;
//					КонецЦикла;
//
//					Если НомСтр = 0 Тогда
//						Прервать;
//					КонецЕсли;
//					
//					ТаблицаВзаимозачетов.ПолучитьСтрокуПоНомеру(НомСтр);
//					
//					ЧастьПогашаемогоДолгаВРублях = Мин(ПогашаемыйДолгВРублях,ТаблицаВзаимозачетов.Сумма);
//					ТаблицаВзаимозачетов.Сумма = ТаблицаВзаимозачетов.Сумма - ЧастьПогашаемогоДолгаВРублях;
					
					Если ЧастьПогашаемогоДолгаВРублях>0 Тогда
						
						//Если ЧастьПогашаемогоДолгаВРублях=ПогашаемыйДолгВРублях Тогда
						//	ЧастьПогашДолг = ПогашДолг;
						//Иначе     
						//	ЧастьПогашДолг = ПогашДолг*ЧастьПогашаемогоДолгаВРублях/ПогашаемыйДолгВРублях;
						//КонецЕсли;	
						//ПогашДолг = ПогашДолг - ЧастьПогашДолг; 
						//ПогашаемыйДолгВРублях=ПогашаемыйДолгВРублях-ЧастьПогашаемогоДолгаВРублях;
						
						//Если ВалютаПроведения=Рубли Тогда
						//	ЧастьПогашДолг = Окр(ЧастьПогашДолг,2,1); 
						//КонецЕсли;	
				        Если ВалютаПроведения=Рубли Тогда
							ПогашаемыйДолг = Окр(ПогашаемыйДолг,2,1); 
						КонецЕсли;	
				        
						Регистр.ВзаиморасчетыПокупателей.Фирма = РегВзаимПок.Фирма; 
						Регистр.ВзаиморасчетыПокупателей.Клиент = РегВзаимПок.Клиент; 
						Регистр.ВзаиморасчетыПокупателей.СтавкаНДС = РегВзаимПок.СтавкаНДС; 
						Регистр.ВзаиморасчетыПокупателей.ВидОтгрузки = РегВзаимПок.ВидОтгрузки;
						Регистр.ВзаиморасчетыПокупателей.КредДокумент = РегВзаимПок.КредДокумент;
						
						Регистр.ВзаиморасчетыПокупателей.Долг = ПогашаемыйДолг;
						Регистр.ВзаиморасчетыПокупателей.КодОперации = ПогашениеДолгаВзаимозачетом;
						
						Регистр.ВзаиморасчетыПокупателей.ДвижениеРасходВыполнить();
						
						НадоПогасить = НадоПогасить - ПогашаемыйДолг;
						НадоПогаситьБаз = НадоПогаситьБаз - ПогашаемыйДолгВРублях;
				    	
					КонецЕсли;
					
					                           
					//Если ТаблицаВзаимозачетов.Сумма=0 Тогда
					//	ТаблицаВзаимозачетов.УдалитьСтроку(НомСтр);
					//КонецЕсли;	
					
				//КонецЦикла;	
					
			//КонецЕсли;	
			            
			//Если ДолгиПокупателей.Долг=0 Тогда
			//	ДолгиПокупателей.УдалитьСтроку(Поз);
			//КонецЕсли;	
		КонецЦикла;	
	КонецЕсли; 
	//-------------------------------------
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеМОД(Контекст)=1 Тогда
	    Возврат;
	КонецЕсли;
	стар_ОбработкаПроведения();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаУдаленияПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеПоАлгоритмуМОД=1 Тогда
	    Возврат;
	КонецЕсли;
	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД

