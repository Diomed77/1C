Перем СписокДействий;
Перем СтараяДата;
Перем ФирмаПоставщику, ПокупательФирме;
Перем КлиентПоставщик, КлиентПокупатель;
Перем НачальнаяДатаДокумента; // Для контроля даты документа

Перем ОстаткиДебетовыхДокументов, ОстаткиКредитовыхДокументов;
Перем ДобавлениеНовой;

Перем ВариантВыранивания;

//*****************************************************************************
Функция ЗаголовокФормы() 
	Перем Заголовок, Название;
	Заголовок = "Акт взаимозачетов";
	Название ="Акт взаимозачетов №";
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ".Проведен";
		Иначе
			Заголовок = Заголовок + ".Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ".Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);     
	Возврат Название;
КонецФункции //ЗаголовокФормы
//******************************************************************************
Процедура ПриСменеТипа()
	Перем ВремТип;
	
	ВремТип		= Тип.ТекущаяСтрока() - 1;
	ВремФин		= ?(ВремТип > Упр, 1, 0);
	Если (ФинУчет <> ВремФин) Тогда
		// изменился учет
		Если КоличествоСтрок()>0 Тогда
			// в документе заполнена табличная часть
			// при смене типа учета данные скорее всего будет другими
			Если Вопрос("При смене типа учета будет очищена спецификация. Продолжить?", "Да+Нет") = "Нет" Тогда
				// вернем список в позицию до выбора
				Тип.ТекущаяСтрока(ТипУчета+1);
				Возврат;
			КонецЕсли;
			// очистить многострочную часть
			УдалитьСтроки();
		КонецЕсли;
	КонецЕсли;
	
	ТипУчета	= ВремТип;
	ФинУчет		= ВремФин;
    // установим видимость элментов формы,
	// связанных с фирмой
КонецПроцедуры       

//******************************************************************************
Функция ПоказатьСуммыЗадолженностей()
	Возврат "Долг поставщику: " + ФРМТ(Итог("ДолгПоставщику"),Рубли,1) + 
	        " Долг покупателя: " + ФРМТ(Итог("ДолгПокупателя"),Рубли,1);
КонецФункции // ПоказатьСуммыЗадолженностей
		
//******************************************************************************
Функция ПоказатьСуммуВзаимозачета()
	Перем Наш, Их;
	Наш = Итог("ДолгПоставщику");
	Их =  Итог("ДолгПокупателя");
	
	Если Наш = Их Тогда
		// сальдо документа = 0
		Возврат "Взаимозачет: " + ФРМТ(Наш,Рубли,1);
	ИначеЕсли Наш > Их Тогда
		// долг фирмы больше, чем долг клиентов
		Возврат "Итого долг поставщику " + ФРМТ(Наш - Их,Рубли,1);
	Иначе
		// долг клиентов больше
		Возврат "Итого долг покупателя " + ФРМТ(Их - Наш,Рубли,1);
	КонецЕсли;
КонецФункции // ПоказатьСуммуВзаимозачета

//******************************************************************************
Процедура Печать()
	Перем СписокДебетовых;
	
	Фирма.ИспользоватьДату(ДатаДок);
	
	СписокДебетовых	= СоздатьОбъект("СписокЗначений");
	
	Таб	= СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("АктВзаиморасчета");
	
	ЗадолженостьПоставщику	= СокрЛ(Формат(Итог("ДолгПоставщику"), "Ч15.2-"));
	ЗадолженостьПокупателя	= СокрЛ(Формат(Итог("ДолгПокупателя"), "Ч15.2-"));
	СуммаВзаимозачета		= ?(ЗадолженостьПокупателя<ЗадолженостьПоставщику, 
	                            ЗадолженостьПокупателя, 
								ЗадолженостьПоставщику);
	СуммаВзаимозачета		= СокрЛ(Формат(СуммаВзаимозачета, "Ч15.2-"));
	
	Таб.ВывестиСекцию("Шапка");
	Таб.ВывестиСекцию("ДолгПоставщику");
	Инд	= 0;
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
	    Если ВидДолга = Перечисление.ВидыДолгаВзаимозачетов.Поставщику Тогда
			Инд	= Инд + 1;
	        ТекДокумент = "" + Инд + ". " + Документ.ПредставлениеВида() + 
			                         " № " + СокрЛП(Документ.НомерДок) + 
									 " от " +Формат(Документ.ДатаДок,"Д(0)ДДММГГГГ");
			Таб.ВывестиСекцию("Документ");
		ИначеЕсли ВидДолга = Перечисление.ВидыДолгаВзаимозачетов.Покупателя Тогда
			СписокДебетовых.ДобавитьЗначение(Документ);
		Иначе
			//
	    КонецЕсли;
	КонецЦикла;
	
	Таб.ВывестиСекцию("ДолгПокупателя");
	Для Инд=1 По СписокДебетовых.РазмерСписка() Цикл
		Док	= СписокДебетовых.ПолучитьЗначение(Инд);
		ТекДокумент = "" + Инд + ". " + Док.ПредставлениеВида() + 
		                         " № " + СокрЛП(Док.НомерДок) + 
								 " от " +Формат(Док.ДатаДок,"Д(0)ДДММГГГГ");
		Таб.ВывестиСекцию("Документ");
	КонецЦикла;
	Таб.ВывестиСекцию("Подвал");
	
	Таб.Опции(0,0,0,0);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Печать акта взаимозачета","");
	
КонецПроцедуры // Печать

//******************************************************************************
Функция ПроверкаДокумента(ВыбЗнач)
	Перем ВидДок, Флаг;
	                  
	Флаг = 0;
	ВидДок = ВыбЗнач.Вид();
	// для некоторых документов есть условия
	Если ВидДолга = ФирмаПоставщику Тогда
		Если ВидДок="ПриходнаяНакладная" Тогда
			Если ВыбЗнач.ПризнакНакладной = Перечисление.ПризнПрихНакл.ВозвратОтПокупателя Тогда
				Флаг = 1;
			КонецЕсли;
		ИначеЕсли ВидДок="ПриходнаяРеализатора" Тогда
			Если ВыбЗнач.ПризнакНакладной = Перечисление.ПризнПрихНакл.ВозвратОтПокупателя Тогда
				Флаг = 1;
			КонецЕсли;
		ИначеЕсли ВидДок="ВводОстатковКредита" Тогда	
			Если ВыбЗнач.ВидКлиента = КлиентПокупатель Тогда
				Флаг = 4;
			КонецЕсли;
		КонецЕсли;
		Если ВыбЗнач.Клиент <> Поставщик Тогда
			Флаг = 2;
		КонецЕсли;
	ИначеЕсли ВидДолга= ПокупательФирме Тогда
		Если ВидДок="РасходнаяНакладная" Тогда
			Если ВыбЗнач.ПризнакНакладной = Перечисление.ПризнРасхНакл.ВозвратПоставщику Тогда
				Флаг = 1;
			КонецЕсли;
		ИначеЕсли ВидДок="РасходнаяРеализатора" Тогда
			Если ВыбЗнач.ПризнакНакладной = Перечисление.ПризнРасхНакл.ВозвратПоставщику Тогда
				Флаг = 1;
			КонецЕсли;
		ИначеЕсли ВидДок="ВводОстатковКредита" Тогда	
			Если ВыбЗнач.ВидКлиента = КлиентПоставщик Тогда
				Флаг = 4;
			КонецЕсли;
		КонецЕсли;
		Если ВыбЗнач.Клиент <> Покупатель Тогда
			Флаг = 3;
		КонецЕсли;
	КонецЕсли;
	Возврат Флаг;
КонецФункции
	
//******************************************************************************
Процедура ПриВыбореПоставщика()
	Если ПустоеЗначение(Покупатель) = 1 Тогда
		Покупатель = Поставщик;
	КонецЕсли;
	Если ПустоеЗначение(Поставщик) = 1 Тогда
		Поставщик = Покупатель;
	КонецЕсли;
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если ВидДолга = ФирмаПоставщику Тогда
			Если ПустоеЗначение(Документ) = 0 Тогда
				Если Документ.Клиент <> Поставщик Тогда
					Документ = ПолучитьПустоеЗначение("Документ." + Документ.Вид());
					ДолгПоставщику = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры 

//******************************************************************************
Процедура ПриВыбореПокупателя()
	Если ПустоеЗначение(Поставщик) = 1 Тогда
		Поставщик = Покупатель ;
	КонецЕсли;
	Если ПустоеЗначение(Покупатель) = 1 Тогда
		Покупатель = Поставщик;
	КонецЕсли;
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если ВидДолга = ПокупательФирме Тогда
			Если ПустоеЗначение(Документ) = 0 Тогда
				Если Документ.Клиент <> Покупатель Тогда
					Документ = ПолучитьПустоеЗначение("Документ." + Документ.Вид());
					ДолгПокупателя = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры 

//******************************************************************************
Процедура ОчиститьТабличнуюЧасть() Экспорт
	Если КоличествоСтрок() > 0 Тогда
		Если Вопрос("Таблица будет очищена, а существующие строки удалены.", "ОК+Отмена") = "ОК" Тогда
			УдалитьСтроки();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры 

//********************************************************************************
Процедура РассчитатьДолги(РегистрУчета, Фильтр)
	Перем Результат;
	
	Если РегистрУчета="ВзаиморасчетыПоставщиков" Тогда
		ОстаткиДебетовыхДокументов.УдалитьСтроки();
	ИначеЕсли РегистрУчета="ВзаиморасчетыПокупателей" Тогда
		ОстаткиКредитовыхДокументов.УдалитьСтроки();
	Иначе
		// неправильно задан регистр
		Возврат;
	КонецЕсли;
	
	// создаем структуру результирующей таблицы
	Результат=СоздатьОбъект("ТаблицаЗначений");
	Результат.НоваяКолонка("КредДокумент","Документ");
	Результат.НоваяКолонка("Долг","Число",15,5);
	
	Если ФинУчет = 1 Тогда
	    ИспФирма			= Фирма;
		ВалютаПоставщика	= Рубли;
		ВалютаПокупателя	= Рубли;
	Иначе
		ИспФирма			= Фирма;
		ВалютаПоставщика	= глПолучитьВалютуКредита(Поставщик,Перечисление.ВидыКлиентов.Поставщик);
		ВалютаПокупателя	= глПолучитьВалютуКредита(Покупатель,Перечисление.ВидыКлиентов.Покупатель);
	КонецЕсли;

	Рег=СоздатьОбъект("Регистр."+РегистрУчета);
	Рег.УстановитьЗначениеФильтра("Фирма",ИспФирма,1);
	
	Если ТипЗначенияСтр(Фильтр)="СписокЗначений" Тогда
		// установим фильтр на документы
		Рег.УстановитьЗначениеФильтра("КредДокумент",Фильтр,2);
	Иначе
		// фильтр на клиента
		Рег.УстановитьЗначениеФильтра("Клиент",Фильтр,1);
	Конецесли;
	
	РезСравнения=СравнитьТА();
	Если РезСравнения=-2 Тогда
		// новый
		Если ДатаДок<ПолучитьДатуТА() Тогда
			// расчитываем остатки на конец дня
			Рег.ВременныйРасчет();
			РассчитатьРегистрыПо(ДатаДок);
		КонецЕсли;
	ИначеЕсли (РезСравнения=-1) ИЛИ (РезСравнения=0) Тогда
		// если документ проведен или сохранен,
		// нужно расчитать итоги регистра без учета
		// изменений. сделанных документом
		Рег.ВременныйРасчет();
		РассчитатьРегистрыНа(ТекущийДокумент());
	КонецЕсли;
	
	ИтогиРегистра=СоздатьОбъект("ТаблицаЗначений");
	Рег.ВыгрузитьИтоги(ИтогиРегистра);
	ИтогиРегистра.Свернуть("КредДокумент","Долг");
	ИтогиРегистра.ВыбратьСтроки();
	Пока ИтогиРегистра.ПолучитьСтроку()=1 Цикл
	    Если ПустоеЗначение(ИтогиРегистра.КредДокумент)=1 Тогда
	        Продолжить;
		КонецЕсли;
		
		Если РегистрУчета="ВзаиморасчетыПоставщиков" Тогда
			// наши долги со знаком минус
			Если ИтогиРегистра.Долг>0 Тогда
				Продолжить;
			КонецЕсли;
			ВремДолг=-ИтогиРегистра.Долг;
			ОстаткиДебетовыхДокументов.НоваяСтрока();
			ОстаткиДебетовыхДокументов.КредДокумент=ИтогиРегистра.КредДокумент;
			ОстаткиДебетовыхДокументов.Долг=Пересчет(ВремДолг,ВалютаПоставщика,ДатаДок,Рубли,ДатаДок);
		ИначеЕсли РегистрУчета="ВзаиморасчетыПокупателей" Тогда
			// долги клиентов со знаком плюс
			Если ИтогиРегистра.Долг<0 Тогда
				Продолжить;
			КонецЕсли;
			ВремДолг=ИтогиРегистра.Долг;
			ОстаткиКредитовыхДокументов.НоваяСтрока();
			ОстаткиКредитовыхДокументов.КредДокумент=ИтогиРегистра.КредДокумент;
			ОстаткиКредитовыхДокументов.Долг=Пересчет(ВремДолг,ВалютаПокупателя,ДатаДок,Рубли,ДатаДок);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//******************************************************************************
Процедура ПодогнатьДолг(Алгоритм, ВсегоДолг, ТекВидДолга, Числитель, Знаменатель)
		
	Разница = Знаменатель - Числитель;
	Если ТекВидДолга = Перечисление.ВидыДолгаВзаимозачетов.Поставщику Тогда
		Атрибут	= "ДолгПоставщику";
	Иначе
		Атрибут	= "ДолгПокупателя";
	КонецЕсли;
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Если ТекВидДолга = ВидДолга Тогда
			ЗначениеАтрибута	= ПолучитьАтрибут(Атрибут);
			Если Алгоритм = 1 Тогда
				// пропорчианально
				УстановитьАтрибут(Атрибут, ЗначениеАтрибута * Числитель / Знаменатель);
			Иначе
				// по убывающей
				Если Разница < ЗначениеАтрибута Тогда
					УстановитьАтрибут(Атрибут, ЗначениеАтрибута - Разница);
					Прервать;
				Иначе
					УстановитьАтрибут(Атрибут, 0);
					Разница = Разница - ЗначениеАтрибута;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//******************************************************************************
Процедура ВыровнятьДолги()
	Перем Алгоритм;
	
	Если ВариантВыранивания.ВыбратьЗначение(, , Алгоритм, , 1) = 0 Тогда
		Возврат;
	Конецесли;
	
	ВсегоДолгПоставщику	= Итог("ДолгПоставщику");
	ВсегоДолгПокупателя	= Итог("ДолгПокупателя");
	
	СуммаВзаимозачета = Мин(ВсегоДолгПокупателя, ВсегоДолгПоставщику);
	ВводЧисла = СуммаВзаимозачета;
	// пусть пользователь сам введет сумму взимозачета
	ВвестиЧисло(ВводЧисла, "Сумма взаимозачета", 15, 2);
	
	// проверим, что бы сумма взимозачета была не больше меньшего значения
	Если ВводЧисла > СуммаВзаимозачета Тогда
		Если Вопрос("Сумма взаимозачета не может быть больше, чем " +
		            Формат(СуммаВзаимозачета,"Ч15.2") + " " + рубли, "Да+Нет") = "Нет" Тогда
			Возврат;
		КонецЕсли;
		ВводЧисла = СуммаВзаимозачета;
	КонецЕсли;
	
	СуммаВзаимозачета = ВводЧисла;
	
	
	Если ВсегоДолгПоставщику > СуммаВзаимозачета Тогда
		ТекВид	= Перечисление.ВидыДолгаВзаимозачетов.Поставщику;
		ПодогнатьДолг(Алгоритм,
		              ВсегоДолгПоставщику,
		              Перечисление.ВидыДолгаВзаимозачетов.Поставщику,
					  СуммаВзаимозачета,
					  ВсегоДолгПоставщику);
	КонецЕсли;
	
	Если ВсегоДолгПокупателя > СуммаВзаимозачета Тогда
		ТекВид	= Перечисление.ВидыДолгаВзаимозачетов.Покупателя;
		ПодогнатьДолг(Алгоритм,
		              ВсегоДолгПокупателя,
		              Перечисление.ВидыДолгаВзаимозачетов.Покупателя, 
					  СуммаВзаимозачета,
					  ВсегоДолгПокупателя);
	КонецЕсли;
КонецПроцедуры

//********************************************************************************
Функция ПолучитьДолг(Док,Вид)
	Перем Результат, Поз;
	Результат=0;
	Если Проведен()=0 Тогда
		Если Вид=Перечисление.ВидыДолгаВзаимозачетов.Поставщику Тогда
			Если ОстаткиДебетовыхДокументов.НайтиЗначение(Документ,Поз,"КредДокумент")=1 Тогда
				Результат=ОстаткиДебетовыхДокументов.ПолучитьЗначение(Поз,"Долг");
			КонецЕсли;
		ИначеЕсли Вид=Перечисление.ВидыДолгаВзаимозачетов.Покупателя Тогда
			Если ОстаткиКредитовыхДокументов.НайтиЗначение(Документ,Поз,"КредДокумент")=1 Тогда
				Результат=ОстаткиКредитовыхДокументов.ПолучитьЗначение(Поз,"Долг");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Формат(Результат,"Ч012.2");
КонецФункции

//******************************************************************************
Процедура Заполнить(ЗаполнитьСуммыСуществующихСтрок = 0)
	Перем ТаблицаСостава;
	
	//Параметры
	// ЗаполнитьСуммыСуществующихСтрок - 0 перезаполняем всю табличную часть, 1 - пересчитываем текущую строку

    Если Проведен()=1 Тогда
        Предупреждение("Автоматическое изменение спецификации выполняется только для непроведенного документа!");
		Возврат;
    КонецЕсли;
	
	Если ПустоеЗначение(Поставщик)=1 Тогда
	    // не выбран поставщик
		Предупреждение("Не выбран поставщик!");
		Возврат;
	КонецЕсли;

	Если ПустоеЗначение(Покупатель)=1 Тогда
	    // не выбран покупатель
		Предупреждение("Не выбран покупатель!");
		Возврат;
	КонецЕсли;
	
	Если ЗаполнитьСуммыСуществующихСтрок = 0 Тогда
		ОчиститьТабличнуюЧасть();
		Если КоличествоСтрок() <> 0 Тогда
			Возврат;
		КонецЕсли;
		
		// заполним долги поставщику
		РассчитатьДолги("ВзаиморасчетыПоставщиков", Поставщик);
		ОстаткиДебетовыхДокументов.ВыбратьСтроки();
		Пока ОстаткиДебетовыхДокументов.ПолучитьСтроку()=1 Цикл
		    Если ПустоеЗначение(ОстаткиДебетовыхДокументов.КредДокумент)=1 Тогда
		        Продолжить;
			КонецЕсли;
			
			НоваяСтрока();
			Документ=ОстаткиДебетовыхДокументов.КредДокумент;
			ВидДолга=Перечисление.ВидыДолгаВзаимозачетов.Поставщику;
			ДолгПоставщику=ОстаткиДебетовыхДокументов.Долг;
		КонецЦикла;
		
		 // заполним долги покупателя
		РассчитатьДолги("ВзаиморасчетыПокупателей", Покупатель);
		ОстаткиКредитовыхДокументов.ВыбратьСтроки();
		Пока ОстаткиКредитовыхДокументов.ПолучитьСтроку()=1 Цикл
		    Если ПустоеЗначение(ОстаткиКредитовыхДокументов.КредДокумент)=1 Тогда
		        Продолжить;
			КонецЕсли;
			
			НоваяСтрока();
			Документ=ОстаткиКредитовыхДокументов.КредДокумент;
			ВидДолга=Перечисление.ВидыДолгаВзаимозачетов.Покупателя;
			ДолгПокупателя=ОстаткиКредитовыхДокументов.Долг;
		КонецЦикла;
			
	Иначе // Рассчитать
		
		Если КоличествоСтрок()=0 Тогда
			Предупреждение("Отсутствует спецификация!");
		Иначе
			Если Вопрос("Пересчитать значения долгов по документам в строках спецификации?", "ОК+Отмена") = "Отмена" Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		РассчитатьДолги("ВзаиморасчетыПоставщиков", Поставщик);
		РассчитатьДолги("ВзаиморасчетыПокупателей", Покупатель);
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
		    // найдем документ
			Поз=0;
			Если ВидДолга=Перечисление.ВидыДолгаВзаимозачетов.Поставщику Тогда
				Если ОстаткиДебетовыхДокументов.НайтиЗначение(Документ,Поз,"КредДокумент")=1 Тогда
					ДолгПоставщику=ОстаткиДебетовыхДокументов.ПолучитьЗначение(Поз,"Долг");
				КонецЕсли;
			ИначеЕсли ВидДолга=Перечисление.ВидыДолгаВзаимозачетов.Покупателя Тогда
				Если ОстаткиКредитовыхДокументов.НайтиЗначение(Документ,Поз,"КредДокумент")=1 Тогда
					ДолгПокупателя=ОстаткиКредитовыхДокументов.ПолучитьЗначение(Поз,"Долг");
				КонецЕсли;
		    КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры // Заполнить

//******************************************************************************
Процедура УстановитьВидыДляВыбора()
	Если ВидДолга = ФирмаПоставщику Тогда
	    Документ.ВидыДляВыбора("ПриходнаяНакладная, ВводОстатковКредита");
							   
		// Меняем доступность полей
		Форма.ДолгПоставщику.Доступность(1);
		Форма.ДолгПокупателя.Доступность(0);
		// Очищаем поля
		ДолгПокупателя = 0;
		
	ИначеЕсли ВидДолга = ПокупательФирме Тогда
	    Документ.ВидыДляВыбора("РасходнаяНакладная, ВводОстатковКредита");
							   
		// Меняем доступность полей
		Форма.ДолгПоставщику.Доступность(0);
		Форма.ДолгПокупателя.Доступность(1);
		// Очищаем поля
		ДолгПоставщику = 0;
		
	Иначе
		Документ.ВидыДляВыбора("");
		// запретить редактировать суммы
		// Меняем доступность полей
		Форма.ДолгПоставщику.Доступность(0);
		Форма.ДолгПокупателя.Доступность(1);
		// Очищаем поля
		ДолгПоставщику = 0;
		ДолгПокупателя = 0;
	КонецЕсли;
	// Проверим значение поля документ
	Если ПустоеЗначение(Документ) = 0 Тогда
	    Если ПроверкаДокумента(Документ) > 0 Тогда
			Документ = 0;       
	    КонецЕсли;
	КонецЕсли;
КонецПроцедуры


//******************************************************************************
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//******************************************************************************
Процедура ВводНаОсновании()
	Предупреждение("Документ "+ПредставлениеВида()+" не вводят на основании других документов!");
	СтатусВозврата(0);
КонецПроцедуры

//******************************************************************************
Процедура ВводНового(ВведенКопированием) // Предопределенная процедура
	Перем ДефТип;
                 
	Валюта = Рубли;
	
	ЗаполнитьШапку(Контекст);
	Если ВведенКопированием = 1 Тогда
		РассчитатьДолги("ВзаиморасчетыПоставщиков", Поставщик);
		РассчитатьДолги("ВзаиморасчетыПокупателей", Покупатель);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ВводНового

//******************************************************************************
Процедура ПриОткрытии() // Предопределенная процедура
	

	НачальнаяДатаДокумента = ДатаДок;

	ПроверкаРазрешенияРедактирования(Контекст);
	УстановкаРеквизитаТип(Контекст);

	Тип.ДобавитьЗначение("Упр.");
	Тип.ДобавитьЗначение("Общ.");
	Тип.ДобавитьЗначение("Фин.");
	Тип.ТекущаяСтрока(ТипУчета+1);
	
	Поз = Тип.НайтиЗначение(ТипУчета);
	Если Поз > 0 Тогда
	    Тип.ТекущаяСтрока(Поз);
	КонецЕсли;

	Если Форма.ТолькоПросмотр() = 1 Тогда
		Форма.кнЗаписать.Доступность(0);
		Форма.кнОК.Доступность(0);
		Форма.кнЗаполнить.Доступность(0);
		Форма.кнРассчитать.Доступность(0);
		Форма.кнОчистить.Доступность(0);
		Форма.КнВыровнять.Доступность(0);
		Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
		Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	СтараяДата = ДатаДок;
	
	ПриЗаписиПерепроводить(1);
	
	//ПриСменеТипа();
	
	ДобавлениеНовой=Нет;
	Если Проведен()=1 Тогда
		Форма.ПоДокументу.Видимость(0);
	ИначеЕсли Выбран()=1 Тогда
	    // нужно посчитать итоги по документам
		РассчитатьДолги("ВзаиморасчетыПоставщиков", Поставщик);
		РассчитатьДолги("ВзаиморасчетыПокупателей", Покупатель);
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии

//******************************************************************************
Процедура ПриРедактированииНовойСтроки()
	УстановитьВидыДляВыбора();
	ДобавлениеНовой=Да;
КонецПроцедуры                            

//******************************************************************************
Процедура ПриНачалеРедактированияСтроки()
	УстановитьВидыДляВыбора();
КонецПроцедуры

//********************************************************************************
Процедура ПриОкончанииРедактированияСтроки()
	Перем Поз;
	Если Проведен()=0 Тогда
		Если ДобавлениеНовой=Да Тогда
		    ДобавлениеНовой=Нет;
			Поз=0;
			Если ВидДолга=Перечисление.ВидыДолгаВзаимозачетов.Поставщику Тогда
				ОстаткиДебетовыхДокументов.НайтиЗначение(Документ,Поз,"КредДокумент");
				Если Поз=0 Тогда
				    ОстаткиДебетовыхДокументов.НоваяСтрока();
					ОстаткиДебетовыхДокументов.КредДокумент=Документ;
					ОстаткиДебетовыхДокументов.Долг=ДолгПоставщику;
				Иначе
					Если ДолгПоставщику=0 Тогда
					    ДолгПоставщику=ОстаткиДебетовыхДокументов.ПолучитьЗначение(Поз,"Долг");
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ВидДолга=Перечисление.ВидыДолгаВзаимозачетов.Покупателя Тогда
				ОстаткиКредитовыхДокументов.НайтиЗначение(Документ,Поз,"КредДокумент");
				Если Поз=0 Тогда
				    ОстаткиКредитовыхДокументов.НоваяСтрока();
					ОстаткиКредитовыхДокументов.КредДокумент=Документ;
					ОстаткиКредитовыхДокументов.Долг=ДолгПокупателя;
				Иначе
					Если ДолгПокупателя=0 Тогда
						ДолгПокупателя=ОстаткиКредитовыхДокументов.ПолучитьЗначение(Поз,"Долг");
					КонецЕсли;
				КонецЕсли;
		    КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога,ФлагСтандОбр)
	Если (ИдентЭлемДиалога = "Документ") и (ПустоеЗначение(ВидДолга) = 1)Тогда
	    ВидДолга = ФирмаПоставщику; 
		УстановитьВидыДляВыбора();
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
Процедура ОбработкаВыбораЗначения(ВыбЗнач,ИдентЭлемДиалога,ФлагСтандОбр)
	Перем Флаг;
	Если ИдентЭлемДиалога="Документ" Тогда
		Флаг = 0; // документ можно выбрать
		Флаг = ПроверкаДокумента(ВыбЗнач);
		Если Флаг = 1 Тогда
		    Предупреждение("Не допускается выбор накладных на возврат.");
		ИначеЕсли Флаг = 2 Тогда
			Если ПустоеЗначение(Поставщик) = 0 Тогда
			    Предупреждение("Выбранный документ выписан от имени контрагента, не совпадающего с заданным поставщиком.");
			Иначе            
				Если Вопрос("В Акте взаимозачетов не задан поставщик.
				             |Установить его по выбранному документу?","Да+Нет")="Да" Тогда
					Поставщик = ВыбЗнач.Клиент;
					Флаг =0;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Флаг = 3 Тогда
			Если ПустоеЗначение(Покупатель) = 0 Тогда
			    Предупреждение("Выбранный документ выписан от имени контрагента, не совпадающего с заданным покупателем.");
			Иначе            
				Если Вопрос("В Акте взаимозачетов не задан покупатель.
				             |Установить его по выбранному документу?","Да+Нет")="Да" Тогда
					Покупатель = ВыбЗнач.Клиент;
					Флаг =0;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Флаг = 4 Тогда
		    Предупреждение("Выбранный документ ввода остатков кредита выписан для другого типа клиента.");
		КонецЕсли;
		ФлагСтандОбр = ?(Флаг = 0,1,0);
	КонецЕсли;
КонецПроцедуры

//*****************************************************************************
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписи() Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ПриЗаписи()
//Закомментировано Инсталлятором МОД:Процедура ПриЗаписи() //Предопределенная процедура
	Если семМожноЗаписать( Контекст ) = 0 Тогда Возврат; КонецЕсли;

КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписи()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
//	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
	стар_ПриЗаписи();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД


//******************************************************************************
// ИНИЦИАЛИЗАЦИЯ МОДУЛЬНЫХ ПЕРЕМЕННЫХ
ФирмаПоставщику = Перечисление.ВидыДолгаВзаимозачетов.Поставщику;
ПокупательФирме = Перечисление.ВидыДолгаВзаимозачетов.Покупателя;
КлиентПоставщик  = Перечисление.ВидыКлиентов.Поставщик;
КлиентПокупатель = Перечисление.ВидыКлиентов.Покупатель;

ОстаткиДебетовыхДокументов=СоздатьОбъект("ТаблицаЗначений");
ОстаткиДебетовыхДокументов.НоваяКолонка("КредДокумент","Документ");
ОстаткиДебетовыхДокументов.НоваяКолонка("Долг","Число",15,5);

ОстаткиКредитовыхДокументов=СоздатьОбъект("ТаблицаЗначений");
ОстаткиКредитовыхДокументов.НоваяКолонка("КредДокумент","Документ");
ОстаткиКредитовыхДокументов.НоваяКолонка("Долг","Число",15,5);

ВариантВыранивания	= СоздатьОбъект("СписокЗначений");
ВариантВыранивания.ДобавитьЗначение("Пропорционально");
ВариантВыранивания.ДобавитьЗначение("По убыванию");

СписокДействий = СоздатьОбъект("СписокЗначений");
СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
СписокДействий.ДобавитьЗначение("Открыть в журнале");
