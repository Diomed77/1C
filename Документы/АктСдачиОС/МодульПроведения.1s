Перем Парт;
Перем РегПарт;

//***************Модуль конвертирован с версии 7.0***************

Процедура ПеремещениеПоПартиям(ТУ)
	//партии и склады           
	
	Если (ТУ="Упр") Тогда
		Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета.Выбран()=0 Тогда
			Возврат ; // учет Упр. не ведется
		КонецЕсли;
		РегФирма=Фирма;
	ИначеЕсли (ТУ="Фин") Тогда  
		Если Фирма.МетодРасчетаСебестоимостиФинансовогоУчета.Выбран()=0 Тогда
			Возврат ; // учет Фин. не ведется
		КонецЕсли;
		РегФирма=Фирма;
	Иначе
		Сообщить("Неверно задан тип учета партий товаров по "+ТекущийДокумент());
		Возврат;   
	КонецЕсли;                               
	
	// склпарт
	Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
		РегСклад=Склад;
	Иначе
		РегСклад="";
	КонецЕсли;
	
	//-- -- -- --	
	
	Если ТУ="Фин" Тогда
		ПромФирма=Фирма;
	Иначе
		ПромФирма=Фирма;
	КонецЕсли;
	
	// склпарт
	Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
		ПромСклад=Склад;
	Иначе
		ПромСклад=СоздатьОбъект("Справочник.МестаХранения");
	КонецЕсли;		
	
	ОбщееКоличество=Количество*Коэффициент;
	НадоСписать=ОбщееКоличество;
	КоличествоПоРеализации=ОбщееКоличество;
	Себестоимость=0;
	РегПарт.УстановитьФильтр(ПромФирма,Товар,,,,ПромСклад);
	РегПарт.ВыгрузитьИтоги(Парт,1,1); 
	Если ((ТУ="Фин") И (Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.FIFO)) Тогда
		Парт.Сортировать("+СрокРеализации,-Статус,+ПрихДокумент",1);
	ИначеЕсли ((ТУ="Фин") И (Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO)) Тогда 
		Парт.Сортировать("-СрокРеализации,-Статус,-ПрихДокумент",1);
	ИначеЕсли ((ТУ="Фин") И (Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему)) Тогда	
		Парт.Сортировать("-Статус,+ПрихДокумент",1);
	ИначеЕсли ((ТУ="Упр") И (Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.FIFO)) Тогда
		Парт.Сортировать("+СрокРеализации,-Статус,+ПрихДокумент",1);
	ИначеЕсли ((ТУ="Упр") И (Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO)) Тогда
		Парт.Сортировать("-СрокРеализации,-Статус,-ПрихДокумент",1);
	ИначеЕсли ((ТУ="Упр") И (Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему)) Тогда	
		Парт.Сортировать("-Статус,+ПрихДокумент",1);                            
	КонецЕсли;	
	
	Парт.ВыбратьСтроки();
	Пока Парт.ПолучитьСтроку()=1 Цикл
		Если НадоСписать=0 Тогда
			Прервать;
		КонецЕсли; 
		Контр=Парт.Контрагент;
		ПромДок=Парт.ПрихДокумент;
		Партия=Парт.Партия;
		R=Парт.Статус;
		СрокРеал=Парт.СрокРеализации;
		ОтатокПартииКол=Парт.ОстатокТовара;
		ОтатокПартииВал=Парт.Стоимость;
		ОтатокПартииНДС=Парт.НДС;
		ОстатокПродВал=Парт.ПродСтоимость;
		
		Если ОтатокПартииКол<0 Тогда  
			 Продолжить;
		КонецЕсли; 
		
		Если ОтатокПартииКол>=НадоСписать Тогда
			СписатьКол=НадоСписать;
		Иначе
			СписатьКол=ОтатокПартииКол;
		КонецЕсли;
		Если ОтатокПартииКол=0 Тогда
			СписатьВал=ОтатокПартииВал;       
			СписатьНДС=ОтатокПартииНДС;
			СписатьПродВал=ОстатокПродВал;
		Иначе
			СписатьВал=ОтатокПартииВал/ОтатокПартииКол*СписатьКол;
			СписатьНДС=ОтатокПартииНДС/ОтатокПартииКол*СписатьКол;
			СписатьПродВал=ОстатокПродВал/ОтатокПартииКол*СписатьКол;
		КонецЕсли; 
		      
		Фл=66;
		
		Регистр.ПартииТоваров.ДвижениеРасход(ПромФирма,Товар,R,Контр,ПромДок,Склад,Партия,СрокРеал,СписатьКол,СписатьВал,СписатьПродВал,СписатьНДС,,,,"С",,Фл,);
		НадоСписать=НадоСписать-СписатьКол;
	КонецЦикла;
КонецПроцедуры	


//--------------------------------------------
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения() Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ОбработкаПроведения()
//Закомментировано Инсталлятором МОД:Процедура ОбработкаПроведения();
        // сем \\
	Если семМожноПровести( Контекст ) = 0 Тогда Возврат; КонецЕсли;
	семОбновитьКурс( контекст );
        // сем //
	Если (ДатаДок>ТекущаяДата()) И (Пользователь.РазрПровБудущейДатой=0) Тогда
		НеПроводить(Контекст,"Нельзя проводить документ будущей датой!");
		Возврат;
	КонецЕсли;


	Если Клиент.Выбран()=0 Тогда
		НеПроводить(Контекст,"В документе не выбран Клиент!");
		Возврат;
	КонецЕсли;
	
	Если ПроверкаДублейСтрок(Контекст)=1 Тогда
		НеПроводить(Контекст,"В документе строки с одинаковым товаром!");
		Возврат;
	КонецЕсли;
           
	ВремРегистры=СоздатьОбъект("Регистры");
	Фирма.ИспользоватьДату(ДатаДок);
	
	РегПарт=ВремРегистры.ПартииТоваров;
	РегОстОС=ВремРегистры.ОстаткиОС;
	Рег=ВремРегистры.ОстаткиТоваров;
	Рег1=ВремРегистры.РезервыТоваров;
	
	Парт=СоздатьОбъект("ТаблицаЗначений");
	Если ИтогиАктуальны()=0 Тогда
		// если итоги не актуальны, то стоимости берем из временногно расчета Регистра
		РегПарт.ВременныйРасчет();
		
		УстановленВремРасч=0;
		// если итоги не актуальны, то стоимости берем из временногно расчета Регистра

		Рег.УстановитьЗначениеФильтра("Склад",Склад,1);
		
		Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
			РегПарт.УстановитьЗначениеФильтра("Склад",Склад,1);
		КонецЕсли;
		
		ТоварЛист=СоздатьОбъект("СписокЗначений");
		ВыгрузитьТабличнуюЧасть(ТоварЛист,"Товар");
			
		Рег.УстановитьЗначениеФильтра("Товар",ТоварЛист,2);
		Рег1.УстановитьЗначениеФильтра("Товар",ТоварЛист,2);
		РегПарт.УстановитьЗначениеФильтра("Товар",ТоварЛист,2);
           
		Рег.ВременныйРасчет();
		Рег1.ВременныйРасчет(); 
		
		ВремРегистры.Актуальность(1);
		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
	КонецЕсли;

	Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
		ПромСклад=Склад;
	Иначе
		ПромСклад="";
	КонецЕсли;     
	
	ВыбратьСтроки();
    Пока ПолучитьСтроку()=1 Цикл
        
		Товар.ИспользоватьДату(ДатаДок);
		
		ПривязыватьСтроку(НомерСтроки);

		Если ВидАренды=Перечисление.АрендаОС.СдачаВАренду Тогда

				Регистр.ОстаткиТоваров.ПривязыватьСтроку(НомерСтроки);
				Состояние("Движения документа: "+НомерСтроки+"/"+КоличествоСтрок());
				
				// Для расхода
				Если Товар.Выбран()=0 Тогда
					Сообщить("В документе "+Вид()+" № "+НомерДок
					+" от "+ДатаДок+"Не указан товар, который списывается!");
					Продолжить;
				КонецЕсли;
				Если Товар.ВидТовара=Перечисление.ВидыТоваров.Услуга Тогда
					// здесь услуги пропускаем
					Продолжить;
				КонецЕсли;
				Если НЕ(глРазрОтрицОстатки=Да) Тогда
					ОстатокТовара=Рег.СводныйОстаток(Товар,Склад,,"ОстатокТовара");
					Если ОстатокТовара<Количество*Коэффициент Тогда
						Сообщить("На складе нет нужного количества товара "+Товар.Код+ " "+ Товар.Наименование + ".");
						НеПроводить(Контекст," На складе осталось "+ОстатокТовара
						+" "+Товар.БазоваяЕдиницаИзмерения+"." );
						Рег=0;
						Рег1=0;
						Возврат;
					КонецЕсли;
				КонецЕсли;
				
				// проверяем резерв товара
				Если (семРазрешитьПродаватьРезерв( контекст )=Нет)	И (глРазрОтрицОстатки=Нет) Тогда
					// Вычислим, сколько всего данного товара
					ПолныйОстаток= Рег.СводныйОстаток(Товар,,,"ОстатокТовара");
					// Вычислим, сколько зарезервировано всего данного товара
					Резерв= Рег1.СводныйОстаток(Товар,,"РезервТовара");
					РезервПоСчету= 0;
					
					Если (ПолныйОстаток-Резерв+РезервПоСчету)<(Количество*Коэффициент) Тогда
						Сообщить("Нет нужного свободного количества товара "
						+Товар.Наименование + ".");
						Сообщить(" На складе осталось "+ПолныйОстаток+" "+Товар.БазоваяЕдиницаИзмерения+".");
						Сообщить(" Отложено по выписанным Счетам "+Строка(Резерв-РезервПоСчету)
						+" "+Товар.БазоваяЕдиницаИзмерения+".");
						НеПроводить(Контекст,"Требуемое количество="+Строка(Количество*Коэффициент)
						+" "+Товар.БазоваяЕдиницаИзмерения+".");
						Возврат;
					КонецЕсли;
				КонецЕсли;
				
				Регистр.ОстаткиТоваров.ОстатокТовара=Количество*Коэффициент;
				Регистр.ОстаткиТоваров.Фирма= Фирма;
				Регистр.ОстаткиТоваров.Склад=Склад;
				Регистр.ОстаткиТоваров.Товар=Товар;
				Регистр.ОстаткиТоваров.ФлагУчета=2; 
				Если ТипУчета<Фин Тогда
					Регистр.ОстаткиТоваров.ДвижениеРасходВыполнить(); 
				КонецЕсли;	
				
				Регистр.ПартииТоваров.ПривязыватьСтроку(НомерСтроки);
				Если ТипУчета<Фин Тогда
					ПеремещениеПоПартиям("Упр");//,Товар,Количество,Коэффициент);
				КонецЕсли;
				//-------------------------------------
				Если ТипУчета>Упр Тогда
					ПеремещениеПоПартиям("Фин");//,Товар,Количество,Коэффициент);         
				КонецЕсли;
			
		Иначе //Возврат ОС
			
			Колво=Количество*Коэффициент;
		// Возврат товара от покупателя приходуется на склад    
			Регистр.ПартииТоваров.ПривязыватьСтроку(НомерСтроки);
			Регистр.ОстаткиТоваров.ПривязыватьСтроку(НомерСтроки);
			//***********************************************************
			//<<Алгоритм Успеха>> (begin)
			Для А=1 По 2 Цикл
				Если А = 1  Тогда
					ТипУч = "Фин";
					ПромФирма = Фирма;
					Если ТипУчета = Упр Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если А = 2  Тогда
					ТипУч = "Упр";
					ПромФирма = Фирма;
					Если ТипУчета = Фин Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				// возврат от покупателя товара, проданного через кассу
				// искать итоги смысла не имеет, потому, что как раз тут - то мы продавали этот товар
				// но надо найти какую-то партию, чтобы в нее вернуть
				// ищем существующую партию такого товара
				ТаблИтогов = СоздатьОбъект("ТаблицаЗначений"); 
//				РегПарт=СоздатьОбъект("Регистр.ПартииТоваров");
				РегПарт.УстановитьЗначениеФильтра("Фирма",ПромФирма,1);
				РегПарт.УстановитьЗначениеФильтра("Товар",Товар,1);
				РегПарт.УстановитьЗначениеФильтра("Статус",Купленный,1);
				РегПарт.ВыгрузитьИтоги(ТаблИтогов,1,1);
				ТаблИтогов.Сортировать("ПрихДокумент",1);
				
				Нашли=0;
				НашлиИтог=0;
				ТаблИтогов.ВыбратьСтроки();
				Пока ТаблИтогов.ПолучитьСтроку()>0 Цикл
					Если НЕ(ТаблИтогов.Товар=Товар) Тогда
						Если НашлиИтог=0 Тогда
							Продолжить;
						Иначе
							Прервать;
						КонецЕсли;
					КонецЕсли;
					НашлиИтог=1;
					
					Если (ТаблИтогов.Статус<>Купленный) И (ТаблИтогов.Статус<>Произведенный) Тогда
						Продолжить;
					КонецЕсли;     
					
					Если ТаблИтогов.ОстатокТовара>0 Тогда
						Нашли=1;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Нашли=1 Тогда
					СтоимостьПартии=ТаблИтогов.Стоимость*Колво/ТаблИтогов.ОстатокТовара;
					НДСПартии=ТаблИтогов.НДС*Колво/ТаблИтогов.ОстатокТовара;
					ДД=ТаблИтогов.ПрихДокумент;
					_Клиент=ТаблИтогов.Контрагент;
					Партия=ТаблИтогов.Партия;
					СрокРеал=ТаблИтогов.СрокРеализации;
					Статус_=ТаблИтогов.Статус;
				Иначе
					
					// если не нашли существующую партию такого товара
					// (наверно он распродан)
					// тогда пытаемся найти последний проведенный документ прихода этого товара
					РегПарт.УстановитьЗначениеФильтра("Фирма",ПромФирма,1);
					РегПарт.УстановитьЗначениеФильтра("Товар",Товар,1);
					РегПарт.УстановитьЗначениеФильтра("Статус",Купленный,0);
					
					РегПарт.ОбратныйПорядок(1);
					РегПарт.ВыбратьДвижения(,ТекущийДокумент());
					Пока РегПарт.ПолучитьДвижение()=1 Цикл
						Если РегПарт.Приход=0 Тогда
							Продолжить;
						КонецЕсли;     
						Если РегПарт.ПрихДокумент<>РегПарт.ТекущийДокумент() Тогда
							Продолжить;
						КонецЕсли;
						Если РегПарт.ТекущийДокумент()=ТекущийДокумент() Тогда
							Продолжить;
						КонецЕсли;
						Если РегПарт.Стоимость=0 Тогда
							Продолжить;
						КонецЕсли;           
						Если РегПарт.ОстатокТовара=0 Тогда
							Продолжить;
						КонецЕсли;            
						СтоимостьПартии=РегПарт.Стоимость*Колво/РегПарт.ОстатокТовара;
						НДСПартии=РегПарт.НДС*Колво/РегПарт.ОстатокТовара;
						ДД=РегПарт.ПрихДокумент;
						_Клиент=РегПарт.Контрагент;
						Партия=РегПарт.Партия;
						СрокРеал=РегПарт.СрокРеализации;
						Статус_=РегПарт.Статус;
						Нашли = 1;
						Прервать;
					КонецЦикла;      

					//Ищем по регистру ОстаткиОС
					Если Нашли=0 Тогда
						РегОстОС.УстановитьЗначениеФильтра("Товар",Товар,1);
						РегОстОС.УстановитьЗначениеФильтра("Клиент",Клиент,1);
						
						РегОстОС.ОбратныйПорядок(1);
						РегОстОС.ВыбратьДвижения(,ТекущийДокумент());
						Пока РегОстОС.ПолучитьДвижение()=1 Цикл
							Если РегОстОС.Приход=1 Тогда
								СтоимостьПартии=РегОстОС.БазоваяСтоимость*Колво/РегОстОС.ОстатокТовара;
								НДСПартии=0;
								ДД=РегОстОС.ПоАкту;
								_Клиент=РегОстОС.Клиент;
								Партия="";
								СрокРеал="";
								Статус_=Купленный;
								Нашли = 1;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;

					Если Нашли=0 Тогда
						
						НеПроводить(Контекст,"Не обнаружено в системе сущ. партий и приходов возвращаемого товара "+Товар);
						СтатусВозврата(0);
						Возврат;
					КонецЕсли;  
				
				КонецЕсли;         
				

				Если Нашли = 1 Тогда
					//гасим
					Регистр.ПартииТоваров.Фирма = ПромФирма;
					Регистр.ПартииТоваров.Товар = Товар;
					Регистр.ПартииТоваров.Склад = ПромСклад;
					Регистр.ПартииТоваров.ПрихДокумент = ДД.ТекущийДокумент();
					Регистр.ПартииТоваров.Контрагент	= _Клиент;
					Регистр.ПартииТоваров.Статус = Статус_;
					Регистр.ПартииТоваров.Партия = Партия; 
					Регистр.ПартииТоваров.СрокРеализации = СрокРеал;
					Регистр.ПартииТоваров.Стоимость = СтоимостьПартии;
					Регистр.ПартииТоваров.ОстатокТовара = Колво;
					Регистр.ПартииТоваров.НДС = НДСПартии;
					Регистр.ПартииТоваров.КодОперации = ВозвратОтПокупателяКупленногоТовара;
					Регистр.ПартииТоваров.ФлагУчета=1;
//					Регистр.ПартииТоваров.Оборот=Пересчет(Цена*Колво,Валюта,Курс,Товар.ВалютаУчета,Дата_Курса);
//					Регистр.ПартииТоваров.НДСрасхода=Пересчет(НДС/(Колво),Валюта,Курс,Товар.ВалютаУчета,Дата_Курса);
//					Регистр.ПартииТоваров.НДСприхода=НДСПартии;
					
					Регистр.ПартииТоваров.ДвижениеПриходВыполнить();
				КонецЕсли;
			КонецЦикла;
			//теперь по остаткам
			Регистр.ОстаткиТоваров.ДвижениеПриход(Товар, Склад, Колво, 2, "", "");
				
			
		КонецЕсли;

		ТС=СоздатьОбъект("ТаблицаЗначений");
		ТС=ПолучитьСтоимостьТоваровПоПартиям(Контекст);
		
		Регистр.ОстаткиОС.Клиент=Клиент;
		Регистр.ОстаткиОС.ПоАкту=ТекущийДокумент();
		Регистр.ОстаткиОС.Товар=Товар;
		Регистр.ОстаткиОС.ОстатокТовара=Количество;  
		
		рез=0;
		ТС.НайтиЗначение(Товар,рез,"Товар");
		Стоим=0;
		Если рез>0 Тогда
			ТС.ПолучитьСтрокуПоНомеру(рез);
			Стоим			= ТС.Стоимость;
		КонецЕсли;
		                       
		РегОстОС.УстановитьЗначениеФильтра("Товар",Товар,1);
		РегОстОС.УстановитьЗначениеФильтра("Клиент",Клиент,1);
			    
		СтоимостьВал=0;
		РегОстОС.ОбратныйПорядок(1);
		РегОстОС.ВыбратьДвижения(,ТекущийДокумент());
		Пока РегОстОС.ПолучитьДвижение()=1 Цикл
			Если РегОстОС.Приход=1 Тогда
				СтоимостьВал=РегОстОС.ВалютнаяСтоимость*Колво/РегОстОС.ОстатокТовара;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Регистр.ОстаткиОС.БазоваяСтоимость=Стоим*Количество*Коэффициент;
		Регистр.ОстаткиОС.ВалютнаяСтоимость=СтоимостьВал;
			
		Если ВидАренды=Перечисление.АрендаОС.СдачаВАренду Тогда
			Регистр.ОстаткиОС.ДвижениеПриходВыполнить();
		Иначе
			Регистр.ОстаткиОС.ПоАкту=ДокументОснование;
			Регистр.ОстаткиОС.ДвижениеРасходВыполнить();
		КонецЕсли;                                             
		
	КонецЦикла;
	
// По регистру РезервыТовара
// Если документ выписан на основании Счета,то с регистра снимаются все остатки резерва по Счету,
// в том числе и товар,удаленный в накладной

КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеМОД(Контекст)=1 Тогда
	    Возврат;
	КонецЕсли;
	стар_ОбработкаПроведения();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаУдаленияПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеПоАлгоритмуМОД=1 Тогда
	    Возврат;
	КонецЕсли;
//PR	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД

//--------------------------------------------


