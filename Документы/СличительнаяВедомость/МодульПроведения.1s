Перем Парт;
Перем РегПар;
Перем СебестоимостьШ_,СебестоимостьПриходШ_,СебестоимостьРасходШ_, ОбСуммТестПартий,ОбСуммТестПартий1;


//Инвентаризация мобил
Функция ПолучитьСостояниеДок(Сост,ДокВид)
	спрСост=СоздатьОбъект("Справочник.СостоянияДокументов");
	спрСост.НайтиПоНаименованию(ДокВид); 
	спрСост.ИспользоватьРодителя(спрСост.ТекущийЭлемент());
	спрСост.НайтиПоНаименованию(Сост,1);
	Возврат спрСост.ТекущийЭлемент();
КонецФункции
Функция ГаситьРегистрИнвентаризация()
	л_РегИнв=Регистр.ИнвентаризТовара;
	Рег=СоздатьОбъект("Регистр.ИнвентаризТовара");
	Рег.УстановитьЗначениеФильтра("Док",ТекущийДокумент(),1);
	табл=СоздатьОбъект("ТаблицаЗначений");
	Рег.ВыгрузитьИтоги(табл,1,1);
//	табл.ВыбратьСтроку();
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку() = 1 Цикл

		л_РегИнв.ПривязыватьСтроку(999);
		л_РегИнв.Товар=табл.Товар;
		л_РегИнв.СрокРеализ=табл.СрокРеализ;
		л_РегИнв.Док=ТекущийДокумент();
		л_РегИнв.ДокОснование=табл.ДокументОснование;
		л_РегИнв.Количество=табл.Количество;
		л_РегИнв.ДвижениеРасходВыполнить();
	КонецЦикла;	
КонецФункции


//AU
Функция ФлагУчета()       

	Если (ВидИнвентаризации = Перечисление.ВидыИнвентаризации.Переоценка) Тогда
		Возврат 11;
	ИначеЕсли Пересортица=1 Тогда
		Возврат 9;
	ИначеЕсли ЕстественнаяУбыль=1 Тогда
		Возврат 8;
	Иначе
		Возврат 10;
	КонецЕсли;
КонецФункции

//***********************************************************
//<<Алгоритм Успеха>> (begin)
//
//_____________________________________________________________________________
Функция УстановитьПартиюПоследнегоПоступления(ТипУч,ДнейНазад=90,Партия="")
	
	СписокКодов=СоздатьОбъект("СписокЗначений");
	СписокКодов.ДобавитьЗначение(ПроизводствоБлюда);
	СписокКодов.ДобавитьЗначение(ЗакупкаТовара);
	СписокКодов.ДобавитьЗначение(ОприходованиеИзлишков);

	Запрос=СоздатьОбъект("ODBCRecordSet");
	ТекстЗапроса="SELECT TOP 1 
	|					 $Рег.Контрагент [Контрагент $Справочник.Контрагенты],
	|					 $Рег.ПрихДокумент [ПрихДокумент $Документ],
	|					 $Рег.СрокРеализации СрокРеализации,
	|					 Журн.IDDOCDEF [ПрихДокумент_вид $ВидДокумента],
	|					 $Рег.Статус [Статус],
	|					 $Рег.Партия [Партия $Справочник.Партии],
	|					 $Рег.Стоимость Стоимость,
	|					 $Рег.ПродСтоимость ПродСтоимость,
	|					 $Рег.НДС НДС,
	|					 $Рег.ОстатокТовара ОстатокТовара,
	|                    Рег.LINENO_ НомерСтроки
	|			   FROM $Регистр.ПартииТоваров Рег (NOLOCK) 
	|			   INNER JOIN _1sjourn Журн (NOLOCK) ON Журн.IDDOC=RIGHT($Рег.ПрихДокумент,9)
	|			   WHERE $Рег.Товар = :Товар AND $Рег.КодОперации IN ('"+ЗакупкаТовара+"','"+ПроизводствоБлюда+"')
	|					 AND Рег.DATE_TIME_IDDOC >= :Нач AND Рег.DATE_TIME_IDDOC < :Позиция~  AND Рег.IDDOC<>:ТекДок " + ?(ПустоеЗначение(Партия)=0," AND $Рег.Партия = :Партия","")+"
	|			   ORDER BY Рег.DATE_TIME_IDDOC DESC" ;
	
	Запрос.УстановитьТекстовыйПараметр("Товар",Товар);
	Запрос.УстановитьТекстовыйПараметр("Нач",ДатаДок-ДнейНазад);
	Запрос.УстановитьТекстовыйПараметр("Позиция",СформироватьПозициюДокумента(ТекущийДокумент(),0));
	Запрос.УстановитьТекстовыйПараметр("ТекДок",ТекущийДокумент());
	Запрос.УстановитьТекстовыйПараметр("Партия",Партия);
	                                
	табл=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);

	Если табл.КоличествоСтрок()=1 Тогда
		табл.ПолучитьСтрокуПоНомеру(1);
	КонецЕсли;
	
	Возврат табл;
	
	РегПар.УстановитьЗначениеФильтра("Фирма",Фирма,1);
	РегПар.УстановитьЗначениеФильтра("Товар",Товар,1);
	РегПар.УстановитьЗначениеФильтра("Склад",,0);
	
	//Первый проход для Закупки
	РегПар.УстановитьЗначениеФильтра("КодОперации",ЗакупкаТовара,1);
	РегПар.ОбратныйПорядок(1);
	РегПар.ВыбратьДвижения(ДатаДок-90,ТекущийДокумент());
	Пока РегПар.ПолучитьДвижение()=1 Цикл
		Если РегПар.Приход=0 Тогда
			Продолжить;
		КонецЕсли;     
		
		Если СписокКодов.Принадлежит(РегПар.КодОперации)=0 Тогда
			Продолжить;
		КонецЕсли;     
		
		Если РегПар.ПрихДокумент<>РегПар.ТекущийДокумент() Тогда
			Продолжить;
		КонецЕсли;
		Если РегПар.ТекущийДокумент()=ТекущийДокумент() Тогда
			Продолжить;
		КонецЕсли;
		
		Возврат РегПар;
	КонецЦикла;
	
	РегПар.УстановитьЗначениеФильтра("КодОперации",ПроизводствоБлюда,1);
	РегПар.ОбратныйПорядок(1);
	РегПар.ВыбратьДвижения(ДатаДок-90,ТекущийДокумент());
	Пока РегПар.ПолучитьДвижение()=1 Цикл
		Если РегПар.Приход=0 Тогда
			Продолжить;
		КонецЕсли;     
		
		Если СписокКодов.Принадлежит(РегПар.КодОперации)=0 Тогда
			Продолжить;
		КонецЕсли;     
		
		Если РегПар.ПрихДокумент<>РегПар.ТекущийДокумент() Тогда
			Продолжить;
		КонецЕсли;
		Если РегПар.ТекущийДокумент()=ТекущийДокумент() Тогда
			Продолжить;
		КонецЕсли;
		
		Возврат РегПар;
	КонецЦикла;
	
	
	Возврат 0;
КонецФункции
//AUend
//***********************************************************
//<<Алгоритм Успеха>> (begin)
//
//_____________________________________________________________________________
Функция УстановитьСтоимостьПоследнегоПоступления(ТипУч)
	//Надо найти документ поступления товара  
	
	ВремРег = СоздатьОбъект( "Регистры" );
	РегПартииТоваров = ВремРег.ПартииТоваров;
	ВремРег.Актуальность(1);
	
	Если Склад.СкладОтвХранения=1 Тогда
		РегПартииТоваров.УстановитьЗначениеФильтра("Склад",Склад,1);
	КонецЕсли;
	
	РегПартииТоваров.УстановитьЗначениеФильтра("Фирма",Фирма,1);
	РегПартииТоваров.УстановитьЗначениеФильтра("Товар",Товар,1);
	//  РегПартииТоваров.УстановитьЗначениеФильтра("Склад",Склад,1);	
	
	РегПартииТоваров.ВременныйРасчет();      
	Если ПолучитьТА() <= Строка(ТекущийДокумент().ДатаДок)+" "+ТекущийДокумент().ПолучитьВремя() Тогда 
		//	ВремРег.РассчитатьРегистрыНа(ПолучитьТА());
	Иначе
		ВремРег.РассчитатьРегистрыНа(ТекущийДокумент());
	КонецЕсли;
	
	РегПартииТоваров.ОбратныйПорядок(1);	
	
	РегПартииТоваров.ВыбратьДвижения(ДатаДок-180,ТекущийДокумент());
	Пока РегПартииТоваров.ПолучитьДвижение()=1 Цикл	 
		Если РегПартииТоваров.Приход=0 Тогда
			Продолжить;
		КонецЕсли;     
		//Если РегПартииТоваров.ПрихДокумент<>РегПартииТоваров.ТекущийДокумент() Тогда
		//    Продолжить;
		//КонецЕсли;
		Если РегПартииТоваров.ТекущийДокумент()=ТекущийДокумент() Тогда
			Продолжить;
		КонецЕсли;
		Если РегПартииТоваров.Стоимость=0 Тогда
			Продолжить;
		КонецЕсли;           
		
		Если РегПартииТоваров.ОстатокТовара=0 Тогда
			Продолжить;
		КонецЕсли; 		
		//Цена  =  Пересчет(РегПартииТоваров.Стоимость, ?(ТипУч="Упр", Товар.ВалютаУчета, Рубли), ДатаДок, Валюта, Дата_Курса) / РегПартииТоваров.ОстатокТовара;
		Цена  =  Пересчет( РегПартииТоваров.Стоимость, Рубли, ДатаДок, Валюта, Дата_Курса) / РегПартииТоваров.ОстатокТовара;
		ПродЦена  =  Пересчет( РегПартииТоваров.ПродСтоимость, Рубли, ДатаДок, Валюта, Дата_Курса) / РегПартииТоваров.ОстатокТовара;
		СуммаКнижная = Цена*КоличествоКнижное;	
		СуммаПродКнижная = ПродЦена*КоличествоКнижное;	

		Возврат 1;
	КонецЦикла;
	Возврат 0;
КонецФункции //УстановитьСтоимостьПоследнегоПоступления
//<<Алгоритм Успеха>> (end) 
//************************************************************
Процедура ПеремещениеПоПартиям(ТУ)
	//партии и склады           
	
	Если (ТУ="Упр") Тогда
		Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета.Выбран()=0 Тогда
			Возврат ; // учет Упр. не ведется
		КонецЕсли;
		РегФирма=Фирма;
	ИначеЕсли (ТУ="Фин") Тогда  
		Если Фирма.МетодРасчетаСебестоимостиФинансовогоУчета.Выбран()=0 Тогда
			Возврат ; // учет Фин. не ведется
		КонецЕсли;
		РегФирма=Фирма;
	Иначе
		Сообщить("Неверно задан тип учета партий товаров по "+ТекущийДокумент());
		Возврат;   
	КонецЕсли;                               
	
	// склпарт
	Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
		РегСклад=Склад;
	Иначе
		РегСклад="";
	КонецЕсли;
	
	//-- -- -- --	
	
	Если ТУ="Фин" Тогда
		ПромФирма=Фирма;
	Иначе
		ПромФирма=Фирма;
	КонецЕсли;
	
	// склпарт
	Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
		ПромСклад=Склад;
	Иначе
		ПромСклад=СоздатьОбъект("Справочник.МестаХранения");
	КонецЕсли;		
	
	ОбщееКоличество=КоличествоРазницы*(Коэффициент)*(-1);
	НадоСписать=ОбщееКоличество;
	КоличествоПоРеализации=ОбщееКоличество;
	Себестоимость=0;                                      
	Если (Пересортица +ЕстественнаяУбыль) = 1 Тогда
		РегПар.УстановитьФильтр(ПромФирма,Товар,,,,ПромСклад);
	Иначе
		РегПар.УстановитьФильтр(ПромФирма,Товар,,,,ПромСклад);
	КонецЕсли;
	
	РегПар.ВыгрузитьИтоги(Парт,1,1); 
	Если ((ТУ="Фин") И (Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.FIFO)) Тогда
		Парт.Сортировать("+СрокРеализации,-Статус,+ПрихДокумент",1);
	ИначеЕсли ((ТУ="Фин") И (Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO)) Тогда 
		Парт.Сортировать("-СрокРеализации,-Статус,-ПрихДокумент",1);
	ИначеЕсли ((ТУ="Фин") И (Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему)) Тогда	
		Парт.Сортировать("-Статус,+ПрихДокумент",1);
	ИначеЕсли ((ТУ="Упр") И (Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.FIFO)) Тогда
		Парт.Сортировать("+СрокРеализации,-Статус,+ПрихДокумент",1);
	ИначеЕсли ((ТУ="Упр") И (Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO)) Тогда
		Парт.Сортировать("-СрокРеализации,-Статус,-ПрихДокумент",1);
	ИначеЕсли ((ТУ="Упр") И (Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему)) Тогда	
		Парт.Сортировать("-Статус,+ПрихДокумент",1);                            
	КонецЕсли;	
	
	НСтр = "";
	Если Парт.НайтиЗначение(СрокРеализ, НСтр, "СрокРеализации") = 1 Тогда
		Парт.СдвинутьСтроку(-НСтр, Нстр);
	КонецЕсли;
	
	СумПарт=0;
	КолПарт=0;
	
	Парт.ВыбратьСтроки();
	Пока Парт.ПолучитьСтроку()=1 Цикл
		Если НадоСписать=0 Тогда
			Прервать;
		КонецЕсли;
		Если НеУчитыватьСрокиРеализации = 0 Тогда
			Если Парт.СрокРеализации <> СрокРеализ Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Контр=Парт.Контрагент;
		ПромДок=Парт.ПрихДокумент;
		R=Парт.Статус;
		ОтатокПартииКол=Парт.ОстатокТовара;
		ОтатокПартииВал=Парт.Стоимость;
		ОтатокПартииНДС=Парт.НДС;
		ОстатокПродВал=Парт.ПродСтоимость;
		
		Если ОтатокПартииКол<0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОтатокПартииКол>=НадоСписать Тогда
			СписатьКол=НадоСписать;
		Иначе
			СписатьКол=ОтатокПартииКол;
		КонецЕсли;
		
		
		Если ОтатокПартииКол=0 Тогда
			СписатьВал=ОтатокПартииВал;       
			СписатьНДС=ОтатокПартииНДС;
			СписатьПродВал=ОстатокПродВал;
			//Цена=0;
		Иначе        
			СписатьВал=ОтатокПартииВал/ОтатокПартииКол*СписатьКол;
			СписатьНДС=ОтатокПартииНДС/ОтатокПартииКол*СписатьКол;
			СписатьПродВал=ОстатокПродВал/ОтатокПартииКол*СписатьКол;
			//Цена=ОтатокПартииВал/ОтатокПартииКол;  
			//СуммаКнижная = Цена*КоличествоКнижное;
		КонецЕсли; 
		
		Если СписатьВал > СуммаРазницы Тогда 
			ОбСуммТестПартий = ОбСуммТестПартий + (СписатьВал - СуммаРазницы);	
		КонецЕсли;      
		
		Если СписатьВал < СуммаРазницы Тогда 
			ОбСуммТестПартий = ОбСуммТестПартий + (СуммаРазницы - СписатьВал);	
		КонецЕсли;		 
		
		Регистр.ПартииТоваров.ПривязыватьСтроку(НомерСтроки);
		Регистр.ПартииТоваров.ДвижениеРасход(ПромФирма,Товар,R,Контр,ПромДок,Склад,Парт.Партия,Парт.СрокРеализации,СписатьКол,СписатьВал,СписатьПродВал,СписатьНДС,,,,"С",,ФлагУчета(),);
		
		СумПарт=СумПарт+СписатьВал;
		КолПарт=КолПарт+СписатьКол;
		СебестоимостьШ_=СебестоимостьШ_-СписатьВал;
		СебестоимостьРасходШ_=СебестоимостьРасходШ_+СписатьВал;
		НадоСписать=НадоСписать-СписатьКол;
	КонецЦикла;
	
	Если КолПарт > 0 Тогда
		Цена=СумПарт/КолПарт;
	Иначе
		Цена=СумПарт;		
	КонецЕсли;
	
	СуммаКнижная = Цена*КоличествоКнижное;
КонецПроцедуры	
// ---------------  
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения() Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ОбработкаПроведения()
	//Закомментировано Инсталлятором МОД:Процедура ОбработкаПроведения()   
	// сем \\
	Если семМожноПровести( Контекст ) = 0 Тогда Возврат; КонецЕсли;
	семОбновитьКурс( контекст );
	// сем //
	ОбСуммТестПартий = 0;    
	ОбСуммТестПартий1 = 0;
	Если Склад.Выбран()=0 Тогда
		НеПроводить(Контекст,"Не указан склад по которому производится списание!");
		Возврат;
	КонецЕсли;    
	
	Если глПроверкаСкладаПоПользователю(Контекст,Склад)=0 Тогда
		НеПроводить(Контекст,"Нельзя использовать данный склад!");
		Возврат;
	КонецЕсли;

	Если (ВидИнвентаризации = Перечисление.ВидыИнвентаризации.Переоценка) И (ГрупповаяОбработка()=0)  Тогда
		Если ПустоеЗначение(ДокументОснование)=1 Тогда
			Сообщить("Не выбран документ основания!","!!!");
		КонецЕсли;
		
		Если ПустоеЗначение(ДокументКредНота)=1 Тогда
			Сообщить("Не выбран документ Кредитная-нота!","!!!");
		КонецЕсли;
		
	КонецЕсли;
	
	// надо записать партии
	СпрПартии 	   = СоздатьОбъект("Справочник.Партии");
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Если (Партия.Выбран() = 0) и (Товар.Выбран() = 1) Тогда
			СпрПартии.ИспользоватьВладельца(Товар);
			//			Сообщить("Для товара "+Товар.Код+" "+Товар+" записана новая партия!");
			глСоздатьНовыйОбъект(СпрПартии); 
			Попытка
				//Закомментировано Инсталлятором МОД:СпрПартии.Записать();
				//Начало текста, вставленного Инсталлятором МОД
				СпрПартии.Записать();
				//Конец текста, вставленного Инсталлятором МОД
				Партия=СпрПартии.ТекущийЭлемент();
			Исключение  
				НеПроводить(Контекст,"Строка документа: " + НомерСтроки + " Ошибка: " + ОписаниеОшибки());
				Прервать;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла; 
	
	СебестоимостьШ_=0;            
	СеебстоимостьПриходШ_=0;
	СеебстоимостьРасходШ_=0;
	Фирма.ИспользоватьДату(ДатаДок);
	Реги=СоздатьОбъект("Регистры");
	Рег=Реги.ОстаткиТоваров;    
	РегПар=Реги.ПартииТоваров;
	РегПар2=Реги.ПартииТоваров;
	РегНТ = Реги.НедоступныеТовары;
	Если ИтогиАктуальны()=0  Тогда
		
		Рег.ВременныйРасчет();
		РегПар.ВременныйРасчет();
		РегПар2.ВременныйРасчет();
		РегНТ.ВременныйРасчет();
		
		Рег.УстановитьЗначениеФильтра("Склад",Склад,1);
		РегНТ.УстановитьЗначениеФильтра("Склад",Склад,1);
		
		Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
			РегПар.УстановитьЗначениеФильтра("Склад",Склад,1);
			РегПар2.УстановитьЗначениеФильтра("Склад",Склад,1);
		КонецЕсли;
		
//		Если ПустоеЗначение(ГруппаТоваров)=0 Тогда
			//Рег.УстановитьЗначениеФильтра("Товар",ГруппаТоваров,2);
			//РегПар.УстановитьЗначениеФильтра("Товар",ГруппаТоваров,2);
		Если КоличествоСтрок()<50 Тогда		
			ТоварЛист=СоздатьОбъект("СписокЗначений");
			ВыгрузитьТабличнуюЧасть(ТоварЛист,"Товар");
			
			Рег.УстановитьЗначениеФильтра("Товар",ТоварЛист,2);
			РегНТ.УстановитьЗначениеФильтра("Товар",ТоварЛист,2);
			РегПар.УстановитьЗначениеФильтра("Товар",ТоварЛист,2);
			РегПар2.УстановитьЗначениеФильтра("Товар",ТоварЛист,2);
		КонецЕсли;

		Если (ВидИнвентаризации = Перечисление.ВидыИнвентаризации.Переоценка) Тогда
			ПартЛист=СоздатьОбъект("СписокЗначений");
			ВыгрузитьТабличнуюЧасть(ПартЛист,"Партия");
//			РегПар.УстановитьЗначениеФильтра("Партия",ПартЛист,2);
		КонецЕсли;
		
		Реги.Актуальность(1);
		Реги.РассчитатьРегистрыНа(ТекущийДокумент()); 
	КонецЕсли;

	итТаблПартии=СоздатьОбъект("ИндексированнаяТаблица");
	итТаблПартииСокр=СоздатьОбъект("ИндексированнаяТаблица");

	ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");

	Условия=" (Фирма = :ВыбФирма AND Склад = :ВыбСклад) ";
	Условия=Условия+" AND (Товар IN (SELECT DISTINCT $ДокC.Товар FROM $ДокументСтроки.СличительнаяВедомость ДокC (NOLOCK) WHERE IDDOC = :ВыбДок) )";
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДок",ТекущийДокумент());
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбСклад",Склад);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбФирма",Фирма);
	
	ТекстЗапроса="SELECT ПартииТоваров.Товар [Товар $Справочник.Номенклатура]
	|					, ПартииТоваров.Статус Статус
	|					, ПартииТоваров.ПрихДокумент [ПрихДокумент $Документ]
//		|					, Журн.IDDOCDEF [IncomeWayBill_Вид $ВидДокумента]
	|					, ПартииТоваров.Контрагент [Контрагент $Справочник.Контрагенты]
	|					, ПартииТоваров.Партия [Партия $Справочник.Партии]
	|					, ПартииТоваров.СрокРеализации СрокРеализации
	|					, ПартииТоваров.ОстатокТовараОстаток ОстатокТовара
	|					, ПартииТоваров.СтоимостьОстаток Стоимость
	|					, ПартииТоваров.НДСОстаток НДС
	|					, ПартииТоваров.ПродСтоимостьОстаток ПродСтоимость
	|					, 99 Приоритет
	|			  FROM $РегистрОстатки.ПартииТоваров("+?(ИтогиАктуальны()=1,"",":Позиция~")+",,"+Условия+",
	|												,) AS ПартииТоваров
	|			  WHERE ПартииТоваров.ОстатокТовараОстаток > 0 
//		|			  LEFT JOIN _1sjourn Журн (NOLOCK) ON Журн.IDDOC=PartiesGoodsОстатки.IncomeWayBill
	|";
		
	Позиция=СформироватьПозициюДокумента(ТекущийДокумент(),0);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("Позиция",Позиция);

//	ЗапросСКЛ.Отладка(1);
	ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итТаблПартии);
	итТаблПартии.ДобавитьИндекс("иТовар","*Товар,СрокРеализации,-Статус,ПрихДокумент");
	итТаблПартии.Выгрузить(итТаблПартииСокр,,"Товар,Партия,ОстатокТовара,Стоимость");
	итТаблПартииСокр.Свернуть("Товар,Партия","ОстатокТовара,Стоимость");
	итТаблПартииСокр.ДобавитьИндекс("иТовар","*Товар,Партия");
	
	тПартии = СоздатьОбъект("ТаблицаЗначений");
	сзКлюч = СоздатьОбъект("СписокЗначений");
	
	ВыбратьСтроки();
	Пока( ПолучитьСтроку()>0) Цикл
		Если Товар.Выбран()=0 Тогда
			Сообщить("В документе "+Вид()+" № "+НомерДок
			+" от "+ДатаДок+"Не указан товар, который списывается!");
			Продолжить;
		КонецЕсли;
		Если Товар.ВидТовара=Перечисление.ВидыТоваров.Услуга Тогда
			Продолжить;
		КонецЕсли;                     
		ПривязыватьСтроку(НомерСтроки);
		Состояние("Движения документа: "+НомерСтроки+"/"+КоличествоСтрок());
		
		Если ((Пересортица+ЕстественнаяУбыль)=1) И (КоличествоРазницы<0) И (ВидИнвентаризации <> Перечисление.ВидыИнвентаризации.Переоценка) Тогда
			//			РегПар.Товар=Товар;
			//			РегПар.Склад=Склад; 
			Если (СтрокаС=0) ИЛИ (КоличествоРазницы<0) Тогда
				Если НЕ(глРазрОтрицОстатки=Да) Тогда
					ОстатокТовара=Рег.СводныйОстаток(Товар,Склад,,"ОстатокТовара");
					Если ОстатокТовара<Абс_(КоличествоРазницы) Тогда
						Сообщить("На складе нет нужного количества товара "
						+Товар.Наименование + ".");
						НеПроводить(Контекст," На складе осталось "+ОстатокТовара
						+" "+Товар.БазоваяЕдиницаИзмерения+".");
						Рег=0;
						Рег1=0;
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			//Если НеУчитыватьСрокиРеализации = 0 Тогда
			//	ОстТов = РегПар.СводныйОстаток(?(ТипУчета=Упр,ПолучитьПустоеЗначение("Справочник.Фирмы"),Фирма), Товар, , , , Склад, ,СрокРеализ, "ОстатокТовара");
			//Иначе
				ОстТов = РегПар.СводныйОстаток(Фирма, Товар, , , , Склад, , , "ОстатокТовара");
			//КонецЕсли;
			КоличествоКнижное		= ОстТов/Коэффициент;
			СуммаКнижная			= КоличествоКнижное*Коэффициент*Цена;
			СуммаПродКнижная		= КоличествоКнижное*Коэффициент*ПродЦена;
			КоличествоФактическое	= КоличествоКнижное+КоличествоРазницы;
			СуммаФактическая		= КоличествоФактическое*Цена;
			СуммаПродФактическая	= КоличествоФактическое*ПродЦена;
			СуммаРазницы			= КоличествоРазницы*Цена;
			СуммаРазницыПрод		= КоличествоРазницы*ПродЦена;
			
		ИначеЕсли ((Пересортица+ЕстественнаяУбыль)=1) И (КоличествоРазницы>0) И (СтрокаС=0) Тогда
			СтрокаС=НомерСтроки-1;
		ИначеЕсли (ПриходоватьБезСебестоимости=1) И ((Пересортица+ЕстественнаяУбыль)=0) И (ВидИнвентаризации <> Перечисление.ВидыИнвентаризации.Переоценка) Тогда
			ОстТов = РегПар.СводныйОстаток(?(ТипУчета=Упр,ПолучитьПустоеЗначение("Справочник.Фирмы"),Фирма), Товар, , , , Склад, , , "ОстатокТовара");
			Если (КоличествоКнижное*Коэффициент<>ОстТов) Тогда
				Сообщить("Книжное количество в строке "+НомерСтроки+" было изменено: было "+КоличествоКнижное+" -> стало "+ОстТов/Коэффициент+" "+Единица);
				КоличествоКнижное=ОстТов/Коэффициент;
				//СуммаКнижная=КоличествоКнижное*Коэффициент*Цена;
			КонецЕсли;
			СтоимТов = РегПар.СводныйОстаток(Фирма, Товар, , , , Склад, , , "Стоимость");
			ПродСтоимТов = РегПар.СводныйОстаток(Фирма, Товар, , , , Склад, , , "ПродСтоимость");
			Если СуммаКнижная<>СтоимТов Тогда
				Сообщить("Книжная сумма в строке "+НомерСтроки+" была изменена: было "+СуммаКнижная+" -> стало "+СтоимТов);
				//КоличествоКнижное=ОстТов/Коэффициент;
				СуммаКнижная=СтоимТов;
			КонецЕсли;
			СуммаПродКнижная = ПродСтоимТов;
			
			Цена = ?(КоличествоКнижное<>0,СуммаКнижная/КоличествоКнижное,0);
			ЦенаПрод = ?(КоличествоКнижное<>0,ПродСтоимТов/КоличествоКнижное,0);
			КоличествоРазницы=КоличествоФактическое-КоличествоКнижное;
			СуммаРазницы=КоличествоРазницы*Цена;
			СуммаРазницыПрод=КоличествоРазницы*ПродЦена;
			
		ИначеЕсли ((Пересортица+ЕстественнаяУбыль)=0) И (глРазрОтрицОстатки=Нет) И (НеУчитыватьСрокиРеализации=1) И (ВидИнвентаризации <> Перечисление.ВидыИнвентаризации.Переоценка) Тогда
			ОстТов = РегПар.СводныйОстаток(Фирма, Товар, , , , Склад, , , "ОстатокТовара");
			Если ОстТов<>КоличествоКнижное Тогда
				Сообщить("Книжное количество в строке "+НомерСтроки+" было изменено: было "+КоличествоКнижное+" -> стало "+ОстТов/Коэффициент+" "+Единица);
				КоличествоКнижное=ОстТов/Коэффициент;
				//СуммаКнижная=КоличествоКнижное*Коэффициент*Цена;
			КонецЕсли;

			Если ДатаДок>='01.12.10' Тогда
				СтоимТов = РегПар.СводныйОстаток(Фирма, Товар, , , , Склад, ,, "Стоимость");
				ПродСтоимТов = РегПар.СводныйОстаток(Фирма, Товар, , , , Склад, , , "ПродСтоимость");

				Если СуммаКнижная<>СтоимТов Тогда
					Сообщить("Книжная сумма  в строке "+НомерСтроки+" была изменена: было "+СуммаКнижная+" -> стало "+СтоимТов);
					//КоличествоКнижное=ОстТов/Коэффициент;
					СуммаКнижная=СтоимТов;
				КонецЕсли;

				СуммаПродКнижная = ПродСтоимТов;
				
				Цена = ?(КоличествоКнижное<>0,СуммаКнижная/КоличествоКнижное,Цена);
				ПродЦена = ?(КоличествоКнижное<>0,СуммаПродКнижная/КоличествоКнижное,ПродЦена);
			КонецЕсли;			
			КоличествоРазницы 	= КоличествоФактическое-КоличествоКнижное;
			СуммаРазницы	  	= КоличествоРазницы*Цена;
			СуммаРазницыПрод	= КоличествоРазницы*ПродЦена;
		ИначеЕсли ((Пересортица+ЕстественнаяУбыль)=0) И (глРазрОтрицОстатки=Нет) И (НеУчитыватьСрокиРеализации=0) И (ВидИнвентаризации <> Перечисление.ВидыИнвентаризации.Переоценка) Тогда
			ОстТов = РегПар.СводныйОстаток(Фирма, Товар, , , , Склад, ,СрокРеализ, "ОстатокТовара");
			Если ОстТов<>КоличествоКнижное Тогда
				Сообщить("Книжное количество в строке "+НомерСтроки+" не совпадает с реальным остатком товара. Книжное: "+КоличествоКнижное+" - Остаток: "+ОстТов/Коэффициент+" "+Единица);
				КоличествоКнижное=ОстТов/Коэффициент;
				//СуммаКнижная=КоличествоКнижное*Коэффициент*Цена;
			КонецЕсли;
			СтоимТов = РегПар.СводныйОстаток(Фирма, Товар, , , , Склад, ,СрокРеализ, "Стоимость");
			ПродСтоимТов = РегПар.СводныйОстаток(Фирма, Товар, , , , Склад, ,СрокРеализ, "ПродСтоимость");
			Если СуммаКнижная<>СтоимТов Тогда
				Сообщить("Книжная сумма  в строке "+НомерСтроки+" была изменена: было "+СуммаКнижная+" -> стало "+СтоимТов);
				//КоличествоКнижное=ОстТов/Коэффициент;
				СуммаКнижная=СтоимТов;
			КонецЕсли;
			СуммаПродКнижная = ПродСтоимТов;
			
			//КоличествоРазницы=КоличествоФактическое-КоличествоКнижное;
			//СуммаРазницы=КоличествоРазницы*Цена;
			Цена 				= ?(КоличествоКнижное<>0,СуммаКнижная/КоличествоКнижное,Цена);
			ПродЦена 			= ?(КоличествоКнижное<>0,СуммаПродКнижная/КоличествоКнижное,ПродЦена);
			КоличествоРазницы	= КоличествоФактическое-КоличествоКнижное;
			СуммаРазницы		= КоличествоРазницы*Цена;
			СуммаРазницыПрод	= КоличествоРазницы*ПродЦена;
		ИначеЕсли ВидИнвентаризации = Перечисление.ВидыИнвентаризации.Переоценка Тогда
			Если ПустоеЗначение(Партия)=1 Тогда
				НеПроводить(Контекст,"В строке "+НомерСтроки+" не задана партия для переоценки!");
			КонецЕсли;
			
			сзКлюч.УдалитьВсе();
			сзКлюч.ДобавитьЗначение(Товар);
			итТаблПартииСокр.Подмножество(сзКлюч,1,"иТовар");
			
			Если НазваниеНабораПрав()="Администратор" Тогда
				//итТаблПартииСокр.Показать("иТовар");
			КонецЕсли;

			//итТаблПартии.УстановитьФильтр(сзКлюч,сзКлюч,"иТовар");
			//РегПар2.УстановитьЗначениеФильтра("Фирма",Фирма,1);
			//РегПар2.УстановитьЗначениеФильтра("Товар",Товар,1);
			//РегПар2.УстановитьЗначениеФильтра("Склад",Склад,1);
			//РегПар2.ВыгрузитьИтоги(тПартии,1,1);

			НашлиПартию=0;
			ОстТов=0;
//			тПартии.НоваяКолонка("Приоритет","Число",1);
			итТаблПартииСокр.ВыбратьСтроки("иТовар");
			Пока итТаблПартииСокр.ПолучитьСтроку("иТовар") = 1 Цикл
				Если (итТаблПартииСокр.Партия=Партия) И (итТаблПартииСокр.ОстатокТовара>=КоличествоКнижное) Тогда
					НашлиПартию=1;
					ОстТов=итТаблПартииСокр.ОстатокТовара;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			//найдем другую свободную, если не нашли нужную 
			Если НашлиПартию=0 Тогда
				итТаблПартииСокр.ВыбратьСтроки("иТовар");
				Пока итТаблПартииСокр.ПолучитьСтроку("иТовар") = 1 Цикл
					Если (итТаблПартииСокр.Партия<>Партия) И (итТаблПартииСокр.ОстатокТовара>=КоличествоКнижное) Тогда
						//нашли другую партию
						НашлиПартию=1;
						Сообщить(Шаблон("Нашли другую свободную партию [итТаблПартииСокр.Партия] с таким остатком [КоличествоКнижное] [Единица]! Заменяем!!!"));
						Партия = итТаблПартииСокр.Партия;
						ОстТов=итТаблПартииСокр.ОстатокТовара;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
						
			//ОстТов = РегПар.СводныйОстаток(Фирма, Товар, , , , Склад,Партия,,"ОстатокТовара");
			Если ОстТов<>КоличествоКнижное Тогда
				Сообщить("Книжное количество в строке "+НомерСтроки+" не совпадает с реальным остатком товара. Книжное: "+КоличествоКнижное+" - Остаток: "+ОстТов/Коэффициент+" "+Единица);
				КоличествоКнижное=ОстТов/Коэффициент;
			КонецЕсли;

			//СтоимТов = итТаблПартии.Итог("Стоимость","иТовар");
			СтоимТов = РегПар.СводныйОстаток(Фирма, Товар, , , , Склад,Партия,, "Стоимость");
			//ПродСтоимТов = итТаблПартии.Итог("ПродСтоимость","иТовар");
			ПродСтоимТов = РегПар.СводныйОстаток(Фирма, Товар, , , , Склад,Партия,, "ПродСтоимость");
			Если СуммаКнижная<>СтоимТов Тогда
				Сообщить("Книжная сумма  в строке "+НомерСтроки+" была изменена: было "+СуммаКнижная+" -> стало "+СтоимТов);
				СуммаКнижная=СтоимТов;
			КонецЕсли;

			СуммаПродКнижная = ПродСтоимТов;			
			
			КоличествоФактическое	=КоличествоКнижное;
			КоличествоРазницы		=0;
			СуммаФактическая		=СуммаКнижная+СуммаРазницы;
			
			ПроцИзм = ?(СуммаКнижная=0,1,СуммаРазницы/СуммаКнижная);
			СуммаРазницыПрод = СуммаПродКнижная*ПроцИзм;

			СуммаПродФактическая	= СуммаПродКнижная+СуммаРазницыПрод;
			
			Если ОстТов<=0 Тогда
				Сообщить("На складе нет товара для переоценки "+Товар.Наименование + ".");
				НеПроводить(Контекст," На складе осталось "+ОстатокТовара
				+" "+Товар.БазоваяЕдиницаИзмерения+".");
				Рег=0;
				Рег1=0;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		
		Если (КоличествоРазницы=0) И (ВидИнвентаризации <> Перечисление.ВидыИнвентаризации.Переоценка) Тогда
			Продолжить;
		КонецЕсли;
		
		// --------------------------
		Если  КоличествоРазницы>0 Тогда //Оприходование излишков
			КН=1;
			
			Регистр.ОстаткиТоваров.Фирма=Фирма;
			Регистр.ОстаткиТоваров.ПривязыватьСтроку(НомерСтроки);
			Регистр.ОстаткиТоваров.ОстатокТовара=КоличествоРазницы*КН;
			Регистр.ОстаткиТоваров.Склад=Склад;
			Регистр.ОстаткиТоваров.Товар=Товар;
			Регистр.ОстаткиТоваров.ФлагУчета=2; 
			Если ТипУчета<Фин Тогда
				Регистр.ОстаткиТоваров.ДвижениеПриходВыполнить(); 
			КонецЕсли;

			Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
				Регистр.ПартииТоваров.Склад=Склад;
			Иначе
				Регистр.ПартииТоваров.Склад="";
			КонецЕсли;
			
			//AU
			Регистр.ПартииТоваров.ФлагУчета=ФлагУчета();
			Регистр.ПартииТоваров.Контрагент="";
			
			//endAU
			Если ТипУчета<Фин Тогда  
				
				Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда
					Регистр.ПартииТоваров.ПрихДокумент="";
				Иначе          
					Р=УстановитьПартиюПоследнегоПоступления("Упр");
					
					ЗаполненнаяПартия = глЗаполнитьПартию(Контекст,Партия);
					
					Если (Р.КоличествоСтрок()=0) ИЛИ (ДатаДок<Дата("01.09.03")) Тогда
						
						Если ЕстественнаяУбыль=1 Тогда
							НеПроводить(Контекст,"Для товара "+Товар+" не определена партия последнего поступления. "+РазделительСтрок+
												 " Для списания естественной убыли обязательна должна быть определена партия последнего поступления товара!");
						КонецЕсли;
							
							
						Регистр.ПартииТоваров.ПрихДокумент=ТекущийДокумент();
						//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
						Регистр.ПартииТоваров.Партия 		 = ЗаполненнаяПартия.ТекущийЭлемент();
						Регистр.ПартииТоваров.СрокРеализации = ЗаполненнаяПартия.СрокРеализации;
						Регистр.ПартииТоваров.Статус		 = Купленный;
						//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					Иначе
						Регистр.ПартииТоваров.Контрагент	 = Р.Контрагент;
						Регистр.ПартииТоваров.ПрихДокумент	 = Р.ПрихДокумент;
						//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
						Регистр.ПартииТоваров.Партия 		 = Р.Партия;
						Регистр.ПартииТоваров.Статус		 = Р.Статус;                        
						
						Если (ЕстественнаяУбыль=1) ИЛИ ((ДатаДок>=Дата("01.09.18")) И (НеУчитыватьСрокиРеализации=1) ) Тогда
							//берем срок из партии списания или из партии поступления когда приходуем без сроков
							Регистр.ПартииТоваров.СрокРеализации = Р.СрокРеализации;
						Иначе                              
							//срок берем из документа
							Регистр.ПартииТоваров.СрокРеализации = ЗаполненнаяПартия.СрокРеализации;
						КонецЕсли;
						
						//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					КонецЕсли;
					
				КонецЕсли;
				
				Регистр.ПартииТоваров.Товар=Товар;
				Регистр.ПартииТоваров.Фирма=Фирма;
				Регистр.ПартииТоваров.ОстатокТовара=КоличествоРазницы;
				ПроцНДС=ПроцентНДС(Товар.СтавкаНДС);     
				//***********************************************************
				//<<Алгоритм Успеха>> (begin)
				//                           
				
				Если ((Пересортица+ЕстественнаяУбыль)=1) Тогда
					Если СтрокаС>0 Тогда
						табл=СоздатьОбъект("ТаблицаЗначений"); 
						ВыгрузитьТабличнуюЧасть(табл);
						табл.ПолучитьСтрокуПоНомеру(СтрокаС);
						тов = Табл.Товар;     
						Если (ЕстественнаяУбыль=1) И (тов<>Товар) Тогда
							НеПроводить(Контекст,"При списании естественной убыли товары должны совпадать!");
						КонецЕсли;
						
						_НДССС = 0;   
						Рег_="";
						ССТов = СтоимостьТовараПоРегистру(тов, ТекущийДокумент(), "Упр", _НДССС, ,СтрокаС,Рег_);
						ПродССТов = СтоимостьТовараПоРегистру(тов, ТекущийДокумент(), "Упр", _НДССС, ,СтрокаС,Рег_,"ПродСтоимость");
						Цена = Макс(ССТов * табл.КоличествоРазницы, -ССТов * табл.КоличествоРазницы) / КоличествоРазницы;
						ПродЦена = Макс(ПродССТов * табл.КоличествоРазницы, -ПродССТов * табл.КоличествоРазницы) / КоличествоРазницы;

						СуммаРазницы = Цена * КоличествоРазницы;                                              
						СуммаРазницыПрод = ПродЦена * КоличествоРазницы;
						
						Если (ПустоеЗначение(Регистр.ПартииТоваров.Контрагент)=1) И (ДатаДок>='01.03.09') Тогда
							Рег_.ПолучитьСтрокуПоНомеру(Рег_.КоличествоСтрок());
							Регистр.ПартииТоваров.Контрагент = Рег_.Контрагент;
							Регистр.ПартииТоваров.ПрихДокумент = Рег_.ПрихДокумент;
						КонецЕсли;
						                                       
					Иначе
						Если (Цена = 0) Тогда
							Если УстановитьСтоимостьПоследнегоПоступления("Упр")=0 Тогда
								НеПроводить(Контекст,"Себестоимость для товара "+Товар.Код+" / "+Товар+" не определена!!!");
								Возврат;
							КонецЕсли;
							СуммаРазницы = Цена * КоличествоРазницы;
							Если ПродЦена=0 Тогда
								ПродЦена=Цена ;
							КонецЕсли;
							СуммаРазницыПрод = ПродЦена * КоличествоРазницы;
						КонецЕсли;
						
						Если (ПродЦена = 0) Тогда
							УстановитьСтоимостьПоследнегоПоступления("Упр");
							СуммаРазницыПрод = ПродЦена * КоличествоРазницы;
						КонецЕсли;

					КонецЕсли;
				Иначе
					Если (Цена = 0) Тогда
						
						Если УстановитьСтоимостьПоследнегоПоступления("Упр")=0 Тогда
							Если (ПриходоватьБезСебестоимости=0) Тогда
								Сообщить("Себестоимость для товара "+Товар.Код+" / "+Товар+" не определена!!!","!!!");
								//								НеПроводить(Контекст,"Себестоимость для товара "+Товар.Код+" / "+Товар+" не определена!!!");
								//								Возврат;
							Иначе 
								Если ГрупповаяОбработка()=0 Тогда
									Сообщить("Себестоимость для товара "+Товар.Код+" / "+Товар+" не определена!!!");
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						СуммаРазницы 		= Цена * КоличествоРазницы;
						Если ПродЦена=0 Тогда
							ПродЦена=Цена ;
						КонецЕсли;
						СуммаРазницыПрод 	= ПродЦена * КоличествоРазницы;
						СуммаФактическая 	= СуммаКнижная + СуммаРазницы;
						СуммаПродФактическая = СуммаПродКнижная + СуммаРазницыПрод;
					КонецЕсли;
				КонецЕсли;
				//<<Алгоритм Успеха>> (end) 
				//************************************************************
				СуммаРазницы	 = Цена*КоличествоРазницы;
				СуммаРазницыПрод = ПродЦена*КоличествоРазницы;
				НДСБезСуммы=0;                                   
				
				Если ПриходоватьБезСебестоимости=1 Тогда
					СуммаРазницы=0;
					СуммаРазницыПрод=0;
					СуммаБезНДС=0;                                                    
					НДСБезСуммы=0;
				КонецЕсли;
				
				//		Регистр.ПартииТоваров.Стоимость=Пересчет(СуммаБезНДС,Валюта,Курс,Товар.ВалютаУчета,Дата_Курса);;   
				//сем\\
				//Регистр.ПартииТоваров.Стоимость=Пересчет(СуммаРазницы,Валюта,Курс,Товар.ВалютаУчета,Дата_Курса);;
				Регистр.ПартииТоваров.Стоимость=Пересчет(СуммаРазницы,Валюта,Курс,Рубли,Дата_Курса);
				//сем//
				Регистр.ПартииТоваров.ПродСтоимость=Пересчет(СуммаРазницыПрод,Валюта,Курс,Рубли,Дата_Курса);
				
				//сем\\
				//Регистр.ПартииТоваров.НДС=Пересчет(НДСБезСуммы,Валюта,Курс,Товар.ВалютаУчета,Дата_Курса);
				Регистр.ПартииТоваров.НДС=Пересчет(НДСБезСуммы,Валюта,Курс,Рубли,Дата_Курса);
				//сем//
				Регистр.ПартииТоваров.Оборот=0;
				Регистр.ПартииТоваров.НДСПрихода=0;
				Регистр.ПартииТоваров.НДСРасхода=0;
				Регистр.ПартииТоваров.КодОперации=ОприходованиеИзлишков;
				Регистр.ПартииТоваров.ПривязыватьСтроку(НомерСтроки);	
				Регистр.ПартииТоваров.ДвижениеПриходВыполнить();   
				ОбСуммТестПартий1 = ОбСуммТестПартий1 + СуммаРазницы;
				
				СебестоимостьШ_=СебестоимостьШ_+Регистр.ПартииТоваров.Стоимость;
				//учитываем излишки
				Если СуммаРазницы>0 Тогда
					СебестоимостьПриходШ_=СебестоимостьПриходШ_+Регистр.ПартииТоваров.Стоимость;
				Иначе
					СебестоимостьРасходШ_=СебестоимостьРасходШ_+Регистр.ПартииТоваров.Стоимость;
				КонецЕсли;
			КонецЕсли;  
			
			Если ТипУчета>Упр Тогда    
				
				Если Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда
					Регистр.ПартииТоваров.ПрихДокумент="";
				Иначе
					Регистр.ПартииТоваров.ПрихДокумент=ТекущийДокумент();
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					ЗаполненнаяПартия = глЗаполнитьПартию(Контекст,Партия);
					Регистр.ПартииТоваров.Партия = ЗаполненнаяПартия;
					Регистр.ПартииТоваров.СрокРеализации = ЗаполненнаяПартия.СрокРеализации;
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				КонецЕсли;
				Регистр.ПартииТоваров.Товар=Товар;
				Регистр.ПартииТоваров.Контрагент="";
				Регистр.ПартииТоваров.Статус=Купленный;
				Регистр.ПартииТоваров.Фирма=Фирма;
				Регистр.ПартииТоваров.ОстатокТовара=КоличествоРазницы;
				ПроцНДС=ПроцентНДС(Товар.СтавкаНДС);
				//***********************************************************
				//<<Алгоритм Успеха>> (begin)
				//   
				Если Цена=0 Тогда
					Если УстановитьСтоимостьПоследнегоПоступления("Фин")=0 Тогда
						НеПроводить(Контекст,"Себестоимость для товара "+Товар.Код+" / "+Товар+" не определена!!!");
						Возврат;
					КонецЕсли;
					СуммаРазницы 		= Цена * КоличествоРазницы;
					СуммаКнижная		= КоличествоКнижное*Коэффициент*Цена;
					СуммаРазницыПрод 	= ПродЦена * КоличествоРазницы;
					СуммаПродКнижная	= КоличествоКнижное*Коэффициент*ПродЦена;

				КонецЕсли;

				Если ПродЦена=0 Тогда
					УстановитьСтоимостьПоследнегоПоступления("Фин");
					СуммаРазницыПрод 	= ПродЦена * КоличествоРазницы;
					СуммаПродКнижная	= КоличествоКнижное*Коэффициент*ПродЦена;
				КонецЕсли;
				
				Если ((Пересортица+ЕстественнаяУбыль)=1) Тогда
					Если СтрокаС>0 Тогда
						табл=СоздатьОбъект("ТаблицаЗначений"); 
						ВыгрузитьТабличнуюЧасть(табл);
						табл.ПолучитьСтрокуПоНомеру(СтрокаС);
						тов = Табл.Товар;
						_НДССС = 0;
						ССТов = СтоимостьТовараПоРегистру(тов, ТекущийДокумент(), "Фин", _НДССС);
						ПродССТов = СтоимостьТовараПоРегистру(тов, ТекущийДокумент(), "Фин", _НДССС, ,,,"ПродСтоимость");
						Цена = Макс(ССТов * табл.КоличествоРазницы, -ССТов * табл.КоличествоРазницы) / КоличествоРазницы;
						ПродЦена = Макс(ПродССТов * табл.КоличествоРазницы, -ПродССТов * табл.КоличествоРазницы) / КоличествоРазницы;

						СуммаРазницы 	 = Цена * КоличествоРазницы;
						СуммаРазницыПрод = ПродЦена * КоличествоРазницы;
					КонецЕсли;
				КонецЕсли;
				//<<Алгоритм Успеха>> (end) 
				//************************************************************
				Если ПриходоватьБезНДС=0 Тогда
					СуммаРазницыПрод= (ПродЦена*КоличествоРазницы)*100/(100+ПроцНДС);
					СуммаРазницы	= (Цена*КоличествоРазницы)*100/(100+ПроцНДС);
					НДСБезСуммы		= (Цена*КоличествоРазницы)*ПроцНДС/(100+ПроцНДС);
				Иначе
					СуммаРазницы		= Цена*КоличествоРазницы;
					СуммаРазницыПрод	= ПродЦена*КоличествоРазницы;
					НДСБезСуммы			= 0;
				КонецЕсли;        
				
				Если ПриходоватьБезСебестоимости=1 Тогда                           
					СуммаРазницы	=0;
					СуммаРазницыПрод=0;
					СуммаБезНДС		=0;
					НДСБезСуммы		=0;                         
				КонецЕсли;
				
				//	Регистр.ПартииТоваров.Стоимость=Пересчет(СуммаБезНДС,Валюта,Курс,Товар.ВалютаУчета,Дата_Курса);; 
				//сем\\
				//Регистр.ПартииТоваров.Стоимость=Пересчет(СуммаРазницы,Валюта,Курс,Товар.ВалютаУчета,Дата_Курса);;
				Регистр.ПартииТоваров.Стоимость=Пересчет(СуммаРазницы,Валюта,Курс,Рубли,Дата_Курса);
				//сем//
				Регистр.ПартииТоваров.ПродСтоимость=Пересчет(СуммаРазницыПрод,Валюта,Курс,Рубли,Дата_Курса);
				//сем\\
				//Регистр.ПартииТоваров.НДС=Пересчет(НДСБезСуммы,Валюта,Курс,Товар.ВалютаУчета,Дата_Курса);
				Регистр.ПартииТоваров.НДС=Пересчет(НДСБезСуммы,Валюта,Курс,Рубли,Дата_Курса);
				//сем//
				Регистр.ПартииТоваров.Оборот=0;
				Регистр.ПартииТоваров.НДСПрихода=0;
				Регистр.ПартииТоваров.НДСРасхода=0;
				Регистр.ПартииТоваров.КодОперации=ОприходованиеИзлишков;
				Регистр.ПартииТоваров.ПривязыватьСтроку(НомерСтроки);
				Регистр.ПартииТоваров.ДвижениеПриходВыполнить(); 
				ОбСуммТестПартий1 = ОбСуммТестПартий1 + СуммаРазницы;
			КонецЕсли;	  
		ИначеЕсли  КоличествоРазницы<0 Тогда
				
			КН=-1;
			Регистр.ОстаткиТоваров.ПривязыватьСтроку(НомерСтроки);
			Регистр.ОстаткиТоваров.Фирма=Фирма;
			Регистр.ОстаткиТоваров.ОстатокТовара=КоличествоРазницы*КН;
			Регистр.ОстаткиТоваров.Склад=Склад;
			Регистр.ОстаткиТоваров.Товар=Товар;
			Регистр.ОстаткиТоваров.ФлагУчета=2;
			Если ТипУчета<Фин Тогда
				Регистр.ОстаткиТоваров.ДвижениеРасходВыполнить();
			КонецЕсли;	
			Если ТипУчета<Фин Тогда 
				ПеремещениеПоПартиям("Упр");//,Товар,Количество,Коэффициент);
			КонецЕсли;
			Если ТипУчета>Упр Тогда
				ПеремещениеПоПартиям("Фин");//,Товар,Количество,Коэффициент);    
			КонецЕсли;	  
			
			//		    СуммаКнижная=КоличествоКнижное*Коэффициент*Цена;
			//			СуммаРазницы = Цена * КоличествоРазницы; 
			Если ((ПустоеЗначение(Цена) = 1)или(Цена = 0)) и ((Пересортица+ЕстественнаяУбыль)=0) Тогда
				УстановитьСтоимостьПоследнегоПоступления("Упр");
			КонецЕсли;
			СуммаФактическая 		= КоличествоФактическое*Коэффициент*Цена;
			СуммаРазницы 			= СуммаФактическая - СуммаКнижная;
			СуммаПродФактическая 	= КоличествоФактическое*Коэффициент*ПродЦена;
			СуммаРазницыПрод 		= СуммаПродФактическая - СуммаПродКнижная;

		ИначеЕсли СуммаРазницы <> 0 Тогда //для переоценок
			
			Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
				Регистр.ПартииТоваров.Склад=Склад;
			Иначе
				Регистр.ПартииТоваров.Склад="";
			КонецЕсли;
			
			//AU
			Регистр.ПартииТоваров.ФлагУчета=ФлагУчета();
			Регистр.ПартииТоваров.Контрагент="";
			
			//endAU
			Если ТипУчета<Фин Тогда  
				
				Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда
					Регистр.ПартииТоваров.ПрихДокумент="";
				ИначеЕсли ВидИнвентаризации = Перечисление.ВидыИнвентаризации.Переоценка Тогда
					
					РегПар.УстановитьФильтр(ПромФирма,Товар,,,,Склад,Партия);
					РегПар.ВыгрузитьИтоги(Парт,1,1); 
					Парт.ПолучитьСтрокуПоНомеру(1);
					
					Регистр.ПартииТоваров.Контрагент	 = Парт.Контрагент;
					Регистр.ПартииТоваров.ПрихДокумент	 = Парт.ПрихДокумент;
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					Регистр.ПартииТоваров.Партия 		 = Партия;
					Регистр.ПартииТоваров.Статус		 = Парт.Статус;                        
						
					Регистр.ПартииТоваров.СрокРеализации = Парт.СрокРеализации;
					
				Иначе          
					Р=УстановитьПартиюПоследнегоПоступления("Упр");
					
					Регистр.ПартииТоваров.Контрагент	 = Р.Контрагент;
					Регистр.ПартииТоваров.ПрихДокумент	 = Р.ПрихДокумент;
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					Регистр.ПартииТоваров.Партия 		 = Р.Партия;
					Регистр.ПартииТоваров.Статус		 = Р.Статус;                        
						
					Регистр.ПартииТоваров.СрокРеализации = Р.СрокРеализации;
						
				КонецЕсли;
				
				Регистр.ПартииТоваров.Товар=Товар;
				Регистр.ПартииТоваров.Фирма=Фирма;
				Регистр.ПартииТоваров.ОстатокТовара=КоличествоРазницы;
				ПроцНДС=ПроцентНДС(Товар.СтавкаНДС);     
				//***********************************************************
				//<<Алгоритм Успеха>> (begin)
				//                           
				
				НДСБезСуммы=0;
				//************************************************************
				Регистр.ПартииТоваров.Стоимость=Пересчет(Абс_(СуммаРазницы),Валюта,Курс,Рубли,Дата_Курса);
				//сем//
				Регистр.ПартииТоваров.ПродСтоимость=Пересчет(Абс_(СуммаРазницыПрод),Валюта,Курс,Рубли,Дата_Курса);
				
				//сем\\
				Регистр.ПартииТоваров.НДС=Пересчет(НДСБезСуммы,Валюта,Курс,Рубли,Дата_Курса);
				//сем//
				Регистр.ПартииТоваров.Оборот=0;
				Регистр.ПартииТоваров.НДСПрихода=0;
				Регистр.ПартииТоваров.НДСРасхода=0;
				Регистр.ПартииТоваров.ПривязыватьСтроку(НомерСтроки);	
				Если СуммаРазницы>0 Тогда
					Регистр.ПартииТоваров.КодОперации=ОприходованиеИзлишков;
					Регистр.ПартииТоваров.ДвижениеПриходВыполнить();   
				Иначе
					Регистр.ПартииТоваров.КодОперации=СписаниеТовара;
					Регистр.ПартииТоваров.ДвижениеРасходВыполнить();   
				КонецЕсли;
				
			    итТаблПартии.Стоимость=итТаблПартии.Стоимость-СуммаРазницы;
				итТаблПартии.ПродСтоимость=итТаблПартии.ПродСтоимость-Регистр.ПартииТоваров.ПродСтоимость;
				итТаблПартии.НДС=итТаблПартии.НДС-Регистр.ПартииТоваров.НДС;
				итТаблПартии.ОстатокТовара=итТаблПартии.ОстатокТовара-КоличествоРазницы;
				

				ОбСуммТестПартий1 = ОбСуммТестПартий1 + СуммаРазницы;
				
				СебестоимостьШ_=СебестоимостьШ_+?(СуммаРазницы>0,1,-1)*Регистр.ПартииТоваров.Стоимость;

				//учитываем излишки
				Если СуммаРазницы>0 Тогда
					СебестоимостьПриходШ_=СебестоимостьПриходШ_+Регистр.ПартииТоваров.Стоимость;
				Иначе
					СебестоимостьРасходШ_=СебестоимостьРасходШ_+Регистр.ПартииТоваров.Стоимость;
				КонецЕсли;
			КонецЕсли;  
			
		КонецЕсли;
		
		Если (КоличествоРазницы<0) И (Склад.ТипСклада=Перечисление.ТипыСкладов.СкладПредПродПодготовки) Тогда
			
			ОстатокТовараНедоступный=РегНТ.СводныйОстаток(Товар,Склад,,Фирма,"ОстатокТовара");
			Если ОстатокТовараНедоступный>0 Тогда
				Регистр.НедоступныеТовары.ПривязыватьСтроку(НомерСтроки);
				Регистр.НедоступныеТовары.Фирма	= Фирма;
				Регистр.НедоступныеТовары.ОстатокТовара=Мин(Абс_(КоличествоРазницы),ОстатокТовараНедоступный);
				Регистр.НедоступныеТовары.Склад=Склад;
				Регистр.НедоступныеТовары.Товар=Товар;
				Регистр.НедоступныеТовары.КодОперации="-"; 
				Если ТипУчета<Фин Тогда
					Регистр.НедоступныеТовары.ДвижениеРасходВыполнить();
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли  (КоличествоРазницы>0) И (Склад.ТипСклада=Перечисление.ТипыСкладов.СкладПредПродПодготовки) Тогда
			Регистр.НедоступныеТовары.ПривязыватьСтроку(НомерСтроки);
			Регистр.НедоступныеТовары.Фирма	= Фирма;
			Регистр.НедоступныеТовары.ОстатокТовара=КоличествоРазницы;
			Регистр.НедоступныеТовары.Склад=Склад;
			Регистр.НедоступныеТовары.Товар=Товар;
			Регистр.НедоступныеТовары.КодОперации="+"; 
			Если ТипУчета<Фин Тогда
				Регистр.НедоступныеТовары.ДвижениеПриходВыполнить();
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДатаДок>=Дата("01.01.04") Тогда
		глОборотыТоваров(Контекст);
	КонецЕсли;
	
	СебестоимостьШ=СебестоимостьШ_;
	
	СебестоимостьПриходШ=0;
	СебестоимостьРасходШ=0;                                                
	СебестоимостьПриходШ_=0;
	СебестоимостьРасходШ_=0;                                                
	
	рег=СоздатьОБъект("Регистр.ПартииТоваров");
	рег.ВыбратьДвиженияДокумента(текущийДокумент());
	Пока рег.ПолучитьДвижение()=1 Цикл
		Если рег.Приход=1 Тогда
			СебестоимостьПриходШ_=СебестоимостьПриходШ_+рег.Стоимость;
		Иначе                                                                                                                             
			СебестоимостьРасходШ_=СебестоимостьРасходШ_+рег.Стоимость;
		КонецЕсли;
	КонецЦикла;		
	
	СебестоимостьПриходШ=СебестоимостьПриходШ_;
	СебестоимостьРасходШ=СебестоимостьРасходШ_;
	Если Пересортица=1 Тогда
		//для пересортицы записываем себестоимость прихода, иначе всегда будет 0
		СебестоимостьШ = СебестоимостьПриходШ_;
	КонецЕсли;
	
	ВсегоСуммаШ=0;
	ВсегоНДСШ=0;
	СообщОтладка(СообщитьРеквизитыШ(Контекст),"I");
	
	Рег=0;
	
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// продажа товара, принятого на реализацию
	РегПартДляРеализации = СоздатьОбъект("Регистр.ПартииТоваров");
	РегПартДляРеализации.ВыбратьДвиженияДокумента(ТекущийДокумент());
	Пока РегПартДляРеализации.ПолучитьДвижение() = 1 Цикл
		Если не(РегПартДляРеализации.Статус = Принятый) 
		или (РегПартДляРеализации.Приход = 1) Тогда
			Продолжить;
		КонецЕсли;
		Если ПогашениеДолгаПоКредиту(Контекст,РегПартДляРеализации.ПрихДокумент,РегПартДляРеализации.Стоимость+РегПартДляРеализации.НДС,РегПартДляРеализации.Товар.СтавкаНДС,"Упр",Строка(РегПартДляРеализации.Товар.ВидТовара)) = 1 Тогда
			Возврат;
		КонецЕсли;
		
		Регистр.ПродажаВзятогоНаРеализацию.ПривязыватьСтроку(РегПартДляРеализации.НомерСтроки());
		ДокПриходнаяРеализатора = РегПартДляРеализации.ПрихДокумент;
		Регистр.ПродажаВзятогоНаРеализацию.Фирма  = РегПартДляРеализации.Фирма;
		Регистр.ПродажаВзятогоНаРеализацию.Клиент = ДокПриходнаяРеализатора.Клиент;
		Регистр.ПродажаВзятогоНаРеализацию.Товар  = РегПартДляРеализации.Товар;
		Регистр.ПродажаВзятогоНаРеализацию.ОстатокТовара = РегПартДляРеализации.ОстатокТовара;
		Регистр.ПродажаВзятогоНаРеализацию.ПродСтоимость = РегПартДляРеализации.Стоимость;
		Регистр.ПродажаВзятогоНаРеализацию.ДвижениеПриходВыполнить();
	КонецЦикла;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	Если флСтадия3=1 Тогда
		ГаситьРегистрИнвентаризация();		
	Иначе
		Если флСтадия2=1 Тогда
		Иначе
			Если флСтадия1=1 Тогда
				рег_Состояния=Регистр.СостояниеДокумента;
				рег_Состояния.Док=ТекущийДокумент();
				рег_Состояния.СостояниеДок=ПолучитьСостояниеДок("Общая",ТекущийДокумент().Вид());
				рег_Состояния.Количество=1;
				рег_Состояния.ДвижениеПриходВыполнить();
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;


	//Сообщить(Строка(ОбСуммТестПартий));
	//Сообщить(Строка(ОбСуммТестПартий1));
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	стар_ОбработкаПроведения();
	Если ПроведениеМОД(Контекст)=1 Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаУдаленияПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеПоАлгоритмуМОД=1 Тогда
		Возврат;
	КонецЕсли;
	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
	ПриОтменеПроведенияДокумента(ТекущийДокумент());
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД


