Перем 	ЗапросСКЛ;

//----------------------------
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения(Позже) Далее
//Конец текста, вставленного Инсталлятором МОД

Процедура семЗаполнитьСрокРеализ()
	
	ТекстЗапросаСроки = "SELECT $Рег.СрокРеализации СрокРеализ
	|							,$Рег.Товар [Товар $Справочник.Номенклатура]
	|							,$Рег.ОстатокТовара Ост
	|					FROM $Регистр.ПартииТоваров Рег (NOLOCK) 
	|					WHERE Рег.IDDOC = :ВыбДок
	|					ORDER BY $Рег.Товар,$Рег.ОстатокТовара DESC
	|";

	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДок",ТекущийДокумент());
	итСроки = СоздатьОбъект("ИндексированнаяТаблица");
	ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапросаСроки,итСроки);
	итСроки.ДобавитьИндекс("иТовар","Товар,-Ост");
	//итСроки.Показать();
	
	ТекстЗапросаКомпл = "SELECT TOP 1 NullIf($КомплектацияЗаявкиФактСтроки.СрокРеализ, '17530101') СрокРеализ
	|					 FROM $ДокументСтроки.КомплектацияЗаявкиФакт AS КомплектацияЗаявкиФактСтроки With (NOLOCK)
	|				 	 INNER JOIN $Документ.КомплектацияЗаявкиФакт AS КомплектацияЗаявкиФакт With (NOLOCK) ON КомплектацияЗаявкиФактСтроки.IDDOC = КомплектацияЗаявкиФакт.IDDOC
	|					  WHERE ($КомплектацияЗаявкиФакт.ПоСчету = :Док) AND ($КомплектацияЗаявкиФактСтроки.Товар=:Товар OR $КомплектацияЗаявкиФактСтроки.ТоварЗамена=:Товар ) 
	|";
	
	рег = СоздатьОбъект( "Регистр.ПартииТоваров" );
	рег.ВыбратьДвиженияДокумента( ТекущийДокумент() );
	НомСтр = 1;
	пДата = Дата( 0 );
	МинСрокРеализ = ДатаПоставки+2;
	
	сзКлюч=СоздатьОбъект("СписокЗначений");
	//итСроки.Показать();
	//очищаем сроки реализации
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		СрокРеализ = "";
		ЗапросСКЛ.УстановитьТекстовыйПараметр("Док",Счет);
		ЗапросСКЛ.УстановитьТекстовыйПараметр("Товар",Товар);
		СрокРеализ = ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапросаКомпл);
		
		сзКлюч.УдалитьВсе();
		Если  ПустоеЗначение(СрокРеализ)=1 Тогда

			сзКлюч.ДобавитьЗначение(Товар);
			итСроки.Подмножество(сзКлюч,1,"иТовар");
			//Если НомерСтроки=1 Тогда
			//	итСроки.Показать("иТовар");
			//КонецЕсли;
			итСроки.ВыбратьСтроки("иТовар");
			Если итСроки.ПолучитьСтроку("иТовар")=1 Тогда
				СрокРеализ = итСроки.СрокРеализ;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	
	Возврат;
	
	//прописываем сроки из регистра только для тех клиентов, кому не обязательны для печати. Для остальных же прописываем их из документам комплектации
	Если Клиент.ПечататьСрокиРеализ=0 Тогда	
		
		
		Пока рег.ПолучитьДвижение() = 1 Цикл
			
			
			Если (рег.СрокРеализации<(МинСрокРеализ)) И (Склад.НеОтгружатьПросроченныйТовар = 1)  Тогда
				НеПроводить(Контекст,"В строке "+рег.НомерСтроки()+" отгружается товар со сроком реализ. "+рег.СрокРеализации+" мин. допуст. срок: "+МинСрокРеализ);
			КонецЕсли;


			НомСтр = рег.НомерСтроки();
			ПолучитьСтрокуПоНомеру(НомСтр);
			Если ( Число(пДата) = 0 ) или ( пДата > рег.СрокРеализации ) Тогда
				пДата = рег.СрокРеализации;
			КонецЕсли;

			Если ПустоеЗначение(СрокРеализ)=1 Тогда
				УстановитьАтрибут("СрокРеализ",пДата);
			КонецЕсли;

			Если СрокРеализ<=ДатаДок Тогда
				УстановитьАтрибут("СрокРеализ",ДатаДок+2);
			КонецЕсли;
			
			пДата = Дата( 0 );
			
//			Если НомСтр <> рег.НомерСтроки() Тогда
//				ПолучитьСтрокуПоНомеру(НомСтр);
//				Если ПустоеЗначение(СрокРеализ)=1 Тогда
//					УстановитьАтрибут("СрокРеализ",пДата);
//				КонецЕсли;
//				НомСтр = рег.НомерСтроки();
//				пДата = Дата( 0 );
//
//			КонецЕсли;
//
		КонецЦикла; 
		
		//ПолучитьСтрокуПоНомеру(НомСтр);
		//УстановитьАтрибут("СрокРеализ",пДата);
	КонецЕсли;
КонецПроцедуры

Функция семПроверкаПозицииЭлектроннойЗаявки()
	ВсеОК = 1;
	текПозиция = ПолучитьПозицию();
	табл = СоздатьОбъект( "ТаблицаЗначений" );
	ВыгрузитьТабличнуюЧасть(табл,"Счет");
	табл.Свернуть("Счет","");
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку() = 1 Цикл
		Если табл.Счет.Выбран() = 0 Тогда Продолжить; КонецЕсли;
		Если текПозиция < табл.Счет.ПолучитьПозицию() Тогда
			Сообщить(Шаблон("Нельзя проводить документ раньше Эл. заявки [табл.Счет.НомерДок] [табл.Счет.ДатаДок] [табл.Счет.ПолучитьВремя()]"),"!");
			ВсеОК = 0;
		КонецЕсли;
	КонецЦикла;
	Возврат ВсеОК;
КонецФункции
//--------------------------------------------
Функция НайтиЕдиницуИзмерения(КакойТоТовар,КакаяТоЕдиница) 
	Если (ПустоеЗначение(КакойТоТовар)=1) или (ПустоеЗначение(КакаяТоЕдиница)=1) Тогда  
		Возврат ПолучитьПустоеЗначение("Справочник.Единицы");    
	Иначе
		Спр=СоздатьОбъект("Справочник.Единицы");
		Спр.ИспользоватьВладельца(КакойТоТовар);    
		Спр.ВыбратьЭлементы();
		Пока Спр.ПолучитьЭлемент()=1 Цикл
			Если Спр.Единица=КакаяТоЕдиница Тогда
				Возврат Спр.ТекущийЭлемент();	
			КонецЕсли;
		КонецЦикла;
		Возврат ПолучитьПустоеЗначение("Справочник.Единицы");	
	КонецЕсли;
	
КонецФункции 

Функция УстановитьСостояние(Сост,Док)
	спрСост=СоздатьОбъект("Справочник.СостоянияДокументов");
	спрСост.НайтиПоНаименованию(Док.Вид()); 
	спрСост.ИспользоватьРодителя(спрСост.ТекущийЭлемент());
	спрСост.НайтиПоНаименованию(Сост,1);
	Возврат спрСост.ТекущийЭлемент();
КонецФункции

Функция ГаситьРегистр(п_Док)
	Рег=СоздатьОбъект("Регистр.СостояниеДокумента");
	Рег.УстановитьЗначениеФильтра("Док",п_Док,1);
	табл=СоздатьОбъект("ТаблицаЗначений");
	Рег.ВыгрузитьИтоги(табл,1,1);
//	табл.ВыбратьСтроку();
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку() = 1 Цикл
		Регистр.СостояниеДокумента.Док=табл.Док;
		Регистр.СостояниеДокумента.Пользователь=табл.Пользователь;
		Регистр.СостояниеДокумента.Количество=табл.Количество;
		Регистр.СостояниеДокумента.СостояниеДок=табл.СостояниеДок;
		Регистр.СостояниеДокумента.ДвижениеРасходВыполнить();
	КонецЦикла;	
КонецФункции

Процедура стар_ОбработкаПроведения()
	//Закомментировано Инсталлятором МОД:Процедура ОбработкаПроведения()
	//-------------------------------------
	// Для учета продажи товаров, взятых на реализацию
	Перем СписокСумм;
	Перем СписокПартий;
	Перем СписокТоваров;
	
	// сем \\
	// Закоментировано, чтобы Алла и операторы могли проводить Эстонские и Литовские накладные будущим числом	
	Если семЕстьПраво( "Документ", "РасходнаяНакладная", "Проведение будущей датой" ) = 0 Тогда
		Если семМожноПровести( Контекст ) = 0 Тогда Возврат; КонецЕсли;
	КонецЕсли;
	
	семОбновитьКурс( контекст );
	// сем //
	

//	Если ПроверкаДублейСтрок(Контекст)=1 Тогда 
//		Сообщить("В документе строки с одинаковым товаром!");
//	КонецЕсли;   
	
	Если глПроверкаСкладаПоПользователю(Контекст,Склад)=0 Тогда
		НеПроводить(Контекст,"Нельзя использовать данный склад!");
		Возврат;
	КонецЕсли;  
	
	Если ПустоеЗначение(Агент) = 1 Тогда
		НеПроводить(Контекст,"Укажите агента!");
		Возврат;		
	КонецЕсли;	
	
	Если семПроверкаПозицииЭлектроннойЗаявки() = 0 Тогда
		СтатусВозврата( 0 ); Возврат;		
	КонецЕсли;
	
	Если (ГрупповаяОбработка() = 0) И (ПризнакНакладной <> Перечисление.ПризнРасхНакл.ВозвратСХранения) Тогда
		табл=СоздатьОбъект("ТаблицаЗначений");
		ВыгрузитьТабличнуюЧасть(табл,"Счет");
		табл.Свернуть("Счет","");
		Если табл.КоличествоСтрок()>=1 Тогда
			
			Если семПроверкаПретензии(Контекст) = 0 Тогда
				Сообщить("Ошибка проведения документа.","!");
				СтатусВозврата(0); Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//-------------------------------------
	// по Регистру ОстаткиТоваров и РезервыТоваров  Упр. учет
	Если ТипУчета<Фин Тогда
		// сем \\
		Путь = КаталогИБ() + "ExtForms\Sem\семДвиженияРегистровНакладных.ert";
		Если ФС.СуществуетФайл( Путь ) = 1 Тогда
			сп = СоздатьОбъект( "СписокЗначений" );
			сп.Установить( "Контекст", ВзятьКонтекст( Контекст ) );
			ОткрытьФормуМодально( "Обработка", сп, Путь );
			Если сп.Получить( "Результат" ) = 0 Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Если семДвиженияРегистровНакладных(Контекст)=1 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		// сем //
	КонецЕсли;
	
	Клиент.ИспользоватьДату(ДатаДок);
	// Запишем главного клиента
	Если Клиент.КлГруппа.Выбран()=1 Тогда
		КлГруппа=Клиент.КлГруппа;
	Иначе
		КлГруппа=Клиент;
	КонецЕсли;       
	
	КлГруппа.ИспользоватьДату("");
	
	Если КлГруппа.ДляВыгрузки=0 Тогда
		спр=СоздатьОбъект("Справочник.Контрагенты");
		Спр.НайтиЭлемент(КлГруппа);
		Спр.ДляВыгрузки=1;
		ОбъектЗаписать(Спр,);
	КонецЕсли;
	
	ЗапретВыпискиНакл=КлГруппа.ЗапретВыпискиНакл.Получить(ДатаДок);
	Если (ЗапретВыпискиНакл=1) И (ГрупповаяОбработка()=0) Тогда
		НеПроводить(Контекст,"Для данного клиента запрещено проводить Расходные Накладные!");
		Возврат;
	КонецЕсли;
	
	Если (ГрупповаяОбработка() = 1) ИЛИ (ПризнакНакладной = Перечисление.ПризнРасхНакл.ВозвратСХранения) Тогда
	Иначе
		Путь = КаталогИБ() + "ExtForms\Sem\ПроверкаДолгаКлиента.ert";
		Если ФС.СуществуетФайл( Путь ) = 1 Тогда
			сп = СоздатьОбъект( "СписокЗначений" );
			сп.Установить( "Контекст", ВзятьКонтекст( Контекст ) );
			ОткрытьФормуМодально( "Обработка", сп, Путь );
			Если сп.Получить( "Результат" ) <> 1 Тогда
				СтатусВозврата(0); Возврат;
			КонецЕсли;
		Иначе
			Если семПроверкаКлиента(Контекст) = 0 Тогда
				Сообщить("Документ не проведен!!!","!!!");
				СтатусВозврата(0); Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	

	ТабНДС=СоздатьОбъект("ТаблицаЗначений");
	ТабНДС.НоваяКолонка("СтавкаНДС");
	ТабНДС.НоваяКолонка("СуммаНДС");
	ТабНДС.НоваяКолонка("Сумма");
	СлужСтНДС=СоздатьОбъект("Документ.Служ_СтавкиНДС");
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Если ПустоеЗначение(СкладТ)=1 Тогда
			СкладТ=Склад;
		КонецЕсли;        
		
		ТабНДС.НоваяСтрока();
		Если ПустоеЗначение(СтавкаНДС_Т)=0 Тогда
			ТабНДС.СтавкаНДС = СтавкаНДС_Т;
		Иначе
			ТабНДС.СтавкаНДС = Товар.СтавкаНДС;
		КонецЕсли;
		ТабНДС.СуммаНДС = НДС;
		ТабНДС.Сумма = Сумма;
		
	КонецЦикла;       
	
	ТабНДС.Свернуть("СтавкаНДС","СуммаНДС,Сумма");
	Если ТабНДС.КоличествоСтрок() > 1 Тогда // нужен доп. служ. документ
		Если (СлужСтавкиНДС.Выбран()=0)  Тогда
			СлужСтНДС.Новый();
			СлужСтНДС.IDD=ПолучитьУникальныйIDD();
			СлужСтНДС.ДатаДок=Дата(1980,ДатаМесяц(ДатаДок),ДатаЧисло(ДатаДок));
			СлужСтНДС.УстановитьНовыйНомер("PD");
			ОбъектЗаписать(СлужСтНДС,);
		Иначе	
			СлужСтНДС.НайтиДокумент(СлужСтавкиНДС);	
		КонецЕсли;
		СлужСтНДС.УдалитьСтроки();
		// Цикл по строкам
		ТабНДС.ВыбратьСтроки();
		Пока ТабНДС.ПолучитьСтроку() = 1 Цикл
			СлужСтНДС.НоваяСтрока();
			СлужСтНДС.СтавкаНДС = ТабНДС.СтавкаНДС;
			СлужСтНДС.ВсегоНДСШ = ТабНДС.СуммаНДС;
			СлужСтНДС.ВсегоСуммаШ=ТабНДС.Сумма;
		КонецЦикла;
		ОбъектЗаписать(СлужСтНДС,);
		СлужСтавкиНДС=СлужСтНДС.ТекущийДокумент();
	Иначе
		Если ПустоеЗначение(СлужСтавкиНДС)=0 Тогда
			Если СлужСтНДС.НайтиДокумент(СлужСтавкиНДС)=1 Тогда
				СлужСтНДС.Удалить(1);
				СлужСтавкиНДС="";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
		
	//---------------------
	// учет по Кредитам
	// Выделим отдельно Товары и Услуги
	СуммаТоваров=0;
	СуммаТоваров20=0;
	СуммаТоваров10=0;
	СуммаТоваровБез=0;
	СуммаУслуг=0;
	СуммаУслуг20=0;
	СуммаУслуг10=0;
	СуммаУслугБез=0;
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл 
		Если  Товар.ВидТовара=Перечисление.ВидыТоваров.Услуга Тогда
			СуммаУслуг=СуммаУслуг+Сумма+НДС;
		Иначе  //Если Товар.ВидТовара=Перечисление.ВидыТоваров.Товар Тогда 
			СуммаТоваров=СуммаТоваров+Сумма+НДС;
		КонецЕсли;
	КонецЦикла;     
	
	Разница=окр(Итог("Сумма")+Итог("НДС"),2)-(Окр(СуммаТоваров,2)+Окр(СуммаУслуг,2));
	
	СуммаТоваров=СуммаТоваров+Разница;
	
	ПривязыватьСтроку(0);
	Если (ТипУчета<Фин) И ((ПризнакНакладной<>Перечисление.ПризнРасхНакл.Бартер) И (ПризнакНакладной <> Перечисление.ПризнРасхНакл.ВозвратСХранения) И (ПризнакНакладной <> Перечисление.ПризнРасхНакл.Хранение)) Тогда  // по Упр. учету
		// Выделим отдельно Товары и Услуги
		Если СуммаТоваров<>0 Тогда
			Если ПогашениеДолгаПоКредиту(Контекст,ТекущийДокумент(),Окр(СуммаТоваров,2),"","Упр","Товар")=1 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если СуммаУслуг<>0 Тогда
			Если ПогашениеДолгаПоКредиту(Контекст,ТекущийДокумент(),Окр(СуммаУслуг,2),"","Упр","Услуга")=1 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если (ТипУчета>Упр) И ((ПризнакНакладной<>Перечисление.ПризнРасхНакл.Бартер) И (ПризнакНакладной <> Перечисление.ПризнРасхНакл.ВозвратСХранения) И (ПризнакНакладной <> Перечисление.ПризнРасхНакл.Хранение)) Тогда  // по фин. учету
		// Выделим отдельно Товары и Услуги по разным ставкам НДС
		Если СуммаТоваров<>0 Тогда
			Если ПогашениеДолгаПоКредиту(Контекст,ТекущийДокумент(),СуммаТоваров,СтавкаНДС,"Фин","Товар")=1 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если СуммаУслуг<>0 Тогда
			Если ПогашениеДолгаПоКредиту(Контекст,ТекущийДокумент(),СуммаУслуг,СтавкаНДС,"Фин","Услуга")=1 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//-------------------------------------
	// по Регистру ПартииТоваров  Упр. учет
	Если (ТипУчета<Фин) Тогда
		СписокКоличество = СоздатьОбъект("СписокЗначений");
		Если ПогашениеПартииТоваров(Контекст,"Упр",,СписокСумм,СписокПартий,СписокТоваров,,,СписокКоличество)=1 Тогда
			Возврат;
		КонецЕсли;     

		Если (ПризнакНакладной <> Перечисление.ПризнРасхНакл.ВозвратСХранения) И (ПризнакНакладной <> Перечисление.ПризнРасхНакл.Хранение) Тогда
			// продажа товара, принятого на реализацию
			РегПартДляРеализации = СоздатьОбъект("Регистр.ПартииТоваров");
			РегПартДляРеализации.ВыбратьДвиженияДокумента(ТекущийДокумент());
			Пока РегПартДляРеализации.ПолучитьДвижение() = 1 Цикл
				Если не(РегПартДляРеализации.Статус = Принятый) Тогда
					Продолжить;
				КонецЕсли;
				Если ПогашениеДолгаПоКредиту(Контекст,РегПартДляРеализации.ПрихДокумент,РегПартДляРеализации.Стоимость+РегПартДляРеализации.НДС,РегПартДляРеализации.Товар.СтавкаНДС,"Упр",Строка(РегПартДляРеализации.Товар.ВидТовара)) = 1 Тогда
					Возврат;
				КонецЕсли;              
				Регистр.ПродажаВзятогоНаРеализацию.ПривязыватьСтроку(РегПартДляРеализации.НомерСтроки());
				ДокПриходнаяРеализатора = РегПартДляРеализации.ПрихДокумент;
				Регистр.ПродажаВзятогоНаРеализацию.Фирма  = РегПартДляРеализации.Фирма;
				Регистр.ПродажаВзятогоНаРеализацию.Клиент = ДокПриходнаяРеализатора.Клиент;
				Регистр.ПродажаВзятогоНаРеализацию.Товар  = РегПартДляРеализации.Товар;
				Регистр.ПродажаВзятогоНаРеализацию.ОстатокТовара = РегПартДляРеализации.ОстатокТовара;
				Регистр.ПродажаВзятогоНаРеализацию.ПродСтоимость = РегПартДляРеализации.Стоимость;
				Регистр.ПродажаВзятогоНаРеализацию.ДвижениеПриходВыполнить();
			КонецЦикла;
		КонецЕсли;
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		
		//Если СписокСумм.РазмерСписка()>0 Тогда
		//	ПривязыватьСтроку(0);
		//	Для Н=1 По СписокСумм.РазмерСписка() Цикл
		//		ПромТовар=СписокТоваров.ПолучитьЗначение(Н);
		//		Если ПогашениеДолгаПоКредиту(Контекст,СписокПартий.ПолучитьЗначение(Н),СписокСумм.ПолучитьЗначение(Н),ПромТовар.СтавкаНДС,"Упр",Строка(ПромТовар.ВидТовара))=1 Тогда
		//			Возврат;
		//		КонецЕсли;
		//		        
		//		Регистр.ПродажаВзятогоНаРеализацию.ПривязыватьСтроку(РегПартДляРеализации.НомерСтроки());
		//		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		//		ДокПриходнаяРеализатора = СписокПартий.ПолучитьЗначение(Н);
		//		Регистр.ПродажаВзятогоНаРеализацию.Клиент = ДокПриходнаяРеализатора.Клиент;
		//		Регистр.ПродажаВзятогоНаРеализацию.Товар  = ПромТовар;
		//		Регистр.ПродажаВзятогоНаРеализацию.ОстатокТовара = СписокКоличество.ПолучитьЗначение(Н);
		//		Регистр.ПродажаВзятогоНаРеализацию.ПродСтоимость = СписокСумм.ПолучитьЗначение(Н);
		//		Регистр.ПродажаВзятогоНаРеализацию.ДвижениеПриходВыполнить();
		//		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		//	КонецЦикла;
		//КонецЕсли;
	КонецЕсли;
	
	//-------------------------------------
	// по Регистру ПартииТоваров  Фин. учет
	Если (ТипУчета>Упр) Тогда
		СписокКоличество = СоздатьОбъект("СписокЗначений");
		СписокСумм=СоздатьОбъект("СписокЗначений");
		СписокПартий=СоздатьОбъект("СписокЗначений");
		СписокТоваров=СоздатьОбъект("СписокЗначений");
		Если ПогашениеПартииТоваров(Контекст,"Фин",,СписокСумм,СписокПартий,СписокТоваров,,,СписокКоличество)=1 Тогда
			Возврат;
		КонецЕсли;
		
		Если (СписокСумм.РазмерСписка()>0) И (ПризнакНакладной <> Перечисление.ПризнРасхНакл.ВозвратСХранения) И (ПризнакНакладной <> Перечисление.ПризнРасхНакл.Хранение) Тогда
			ПривязыватьСтроку(0);
			Для Н=1 По СписокСумм.РазмерСписка() Цикл
				ПромТовар=СписокТоваров.ПолучитьЗначение(Н);
				Если ПогашениеДолгаПоКредиту(Контекст,СписокПартий.ПолучитьЗначение(Н),СписокСумм.ПолучитьЗначение(Н),ПромТовар.СтавкаНДС,"Фин",Строка(ПромТовар.ВидТовара))=1 Тогда
					Возврат;
				КонецЕсли;
				
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				ДокПриходнаяРеализатора = СписокПартий.ПолучитьЗначение(Н);
				Регистр.ПродажаВзятогоНаРеализацию.Фирма  = Фирма;
				Регистр.ПродажаВзятогоНаРеализацию.Клиент = ДокПриходнаяРеализатора.Клиент;
				Регистр.ПродажаВзятогоНаРеализацию.Товар  = ПромТовар;
				Регистр.ПродажаВзятогоНаРеализацию.ОстатокТовара = СписокКоличество.ПолучитьЗначение(Н);
				Регистр.ПродажаВзятогоНаРеализацию.ПродСтоимость = СписокСумм.ПолучитьЗначение(Н);
				Регистр.ПродажаВзятогоНаРеализацию.ДвижениеПриходВыполнить();
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;  
	
	глОборотыТоваров(Контекст);  
	
	//движения по интрастату     
	Если ПустоеЗначение(СтранаОтпр)=1 Тогда
		СтранаОтпр=Клиент.Страна;
	КонецЕсли;
	
	СпрУпак=СоздатьОбъект("Справочник.УпаковкаТоваров");
	ТаблУпак=СоздатьОбъект( "ТаблицаЗначений" );
	ТаблУпак.НоваяКолонка("Материал");
	ТаблУпак.НоваяКолонка("Вес");
	Если (ИспользоватьРасчетDRN=0) И (ГрупповаяОбработка()=0) Тогда
		Если (Клиент.Страна.ВидСтраны <> Перечисление.ВидыСтран.СтранаРезидент) 
		или ((Товар.ЯвляетсяУпаковкой = Перечисление.Булево.Да) и (Сумма <> 0)) Тогда
			ВыбратьСтроки();
			Пока ПолучитьСтроку()=1 Цикл
				СпрУпак.ИспользоватьВладельца(Товар);
				СпрУпак.ВыбратьЭлементы();
				Пока СпрУпак.ПолучитьЭлемент() = 1 Цикл
					Если (СпрУпак.ПометкаУдаления()=1) или (ПустоеЗначение(СпрУпак.Материал)=1) или (Товар.ЛогистикаКолВУпаковке=0) Тогда
						Продолжить;
					КонецЕсли;
					Материал=СпрУпак.Материал;
					// вес упаковки рассчитываем на базовую единицу через единицу первичной упаковки
					Если Товар.ЕдНеттоВеса.Выбран()=1 Тогда
						КоэфНеттоВеса = Товар.ЕдНеттоВеса.Коэффициент;
					Иначе
						КоэфНеттоВеса=1;
					КонецЕсли;
					Если СпрУпак.ТипУпаковки = Перечисление.ТипыУпаковки.Первичная Тогда
						КоэфПересчета = КоэфНеттоВеса;
					ИначеЕсли СпрУпак.ТипУпаковки = Перечисление.ТипыУпаковки.Вторичная Тогда
						КоэфПересчета = КоэфНеттоВеса * Товар.ЛогистикаКолВУпаковке;
					ИначеЕсли СпрУпак.ТипУпаковки = Перечисление.ТипыУпаковки.Третичная Тогда	
						КоэфПересчета = КоэфНеттоВеса*Товар.ЛогистикаКолВУпаковке*Товар.ЛогистикаКолУпакНаЕвроПалете*Товар.ЛогистикаКолУпакНаПалетеВРяду;
					КонецЕсли;
					Если КоэфПересчета <> 0 Тогда
						Вес = СпрУпак.ВесБруттоУпаковки / КоэфПересчета;
						ТаблУпак.НоваяСтрока();
						ТаблУпак.Материал = Материал;
						ТаблУпак.Вес = Вес*Количество*Коэффициент;
					КонецЕсли;
				КонецЦикла;	
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	ТаблУпак.Свернуть("Материал","Вес");
	Если (ИспользоватьРасчетDRN=0) И (ГрупповаяОбработка()=0) Тогда
		КолВидУпаковки1=0;
		КолВидУпаковки2=0;
		КолВидУпаковки3=0;
		КолВидУпаковки4=0;
		КолВидУпаковки5=0;
		КолВидУпаковки6=0;
		ТаблУпак.ВыбратьСтроки();
		Пока ТаблУпак.ПолучитьСтроку() = 1 Цикл
			Если ТаблУпак.Материал = Константа.ВидНалогаУпаковка1 Тогда
				КолВидУпаковки1 = ТаблУпак.Вес;
			ИначеЕсли ТаблУпак.Материал = Константа.ВидНалогаУпаковка2 Тогда
				КолВидУпаковки2 = ТаблУпак.Вес;
			ИначеЕсли ТаблУпак.Материал = Константа.ВидНалогаУпаковка3 Тогда
				КолВидУпаковки3 = ТаблУпак.Вес;
			ИначеЕсли ТаблУпак.Материал = Константа.ВидНалогаУпаковка4 Тогда
				КолВидУпаковки4 = ТаблУпак.Вес;
			ИначеЕсли ТаблУпак.Материал = Константа.ВидНалогаУпаковка5 Тогда
				КолВидУпаковки5 = ТаблУпак.Вес;
			ИначеЕсли ТаблУпак.Материал = Константа.ВидНалогаУпаковка6 Тогда
				КолВидУпаковки6 = ТаблУпак.Вес;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если (СтранаОтпр.ВидСтраны=Перечисление.ВидыСтран.ЕС) И (ПризнакНакладной <> Перечисление.ПризнРасхНакл.ВозвратСХранения) Тогда  
		//ТаблУпак=СоздатьОбъект( "ТаблицаЗначений" );
		//ТаблУпак.НоваяКолонка("Материал");
		//ТаблУпак.НоваяКолонка("Вес");
		// коэффициент транспортных затрат
		СтоимостьЛат=Итог("Сумма")*Курс;
		Если СтоимостьЛат <> 0 Тогда
			КоэфТрансп = (СтоимостьЛат+ДопСтоимость)/СтоимостьЛат;
		Иначе
			КоэфТрансп=0;
		КонецЕсли;
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл              
			Если ПустоеЗначение(ТамКод)=1 Тогда
				ТамКод=Товар.ТамКод;
			КонецЕсли;  
			Если ПустоеЗначение(СтранаПроисхождения)=1 Тогда
				СтранаПроисхождения=Товар.СтранаПроизводитель;
			КонецЕсли;  
			Если (ВесНетто=0) или (Константа.ОбновлятьВесНетто = Перечисление.Булево.Да) Тогда
			//	ВесНетто=Товар.Вес*Количество*Коэффициент / ?(Товар.ЕдНеттоВеса.Коэффициент=0,1,Товар.ЕдНеттоВеса.Коэффициент);
				ВесНетто=Товар.Вес*Количество*Коэффициент;
				Если Товар.ЯвляетсяУпаковкой = Перечисление.Булево.Да Тогда
					ВесНетто=0;
				КонецЕсли;
			КонецЕсли;     
			Если СтатСтоимТов=0 Тогда    
				СтатСтоимТов=Сумма*Курс*КоэфТрансп;	
			КонецЕсли;
			Регистр.Интрастат.ПривязыватьСтроку(НомерСтроки);
			Регистр.Интрастат.Товар=Товар;
			Регистр.Интрастат.ТамКод=ТамКод;
			Регистр.Интрастат.ВидОперации="-";
			Регистр.Интрастат.СтранаОтправитель=СтранаОтпр;
			Регистр.Интрастат.СтранаПроисхождения=СтранаПроисхождения;
			Регистр.Интрастат.ВидСделки=ВидСделки;
			Регистр.Интрастат.ВидТранспорта=ВидТранспорта;
			Регистр.Интрастат.УсловиеПоставки=УсловиеПоставки;
			
			Регистр.Интрастат.ВесНетто=ВесНетто;
			Регистр.Интрастат.Стоимость=Сумма*курс;
			Регистр.Интрастат.СтатСтоимость=СтатСтоимТов;
			Если ТамКод.ДопЕдиница <> 0 Тогда
				Регистр.Интрастат.Количество=Количество*Коэффициент;     
				// возможно, требуется другая единица измерения, чем указано в документе
				// например, декоративная плитка указана в штуках, а нужны квадратные метры
				Если ПустоеЗначение(ТамКод.ТипДопЕдиницы)=0 Тогда  
					НужнаяЕдиница=НайтиЕдиницуИзмерения(Товар,ТамКод.ТипДопЕдиницы); 
					Если ПустоеЗначение(НужнаяЕдиница)=0 Тогда          
						//  пересчитываем в нужные единицы
						Регистр.Интрастат.Количество=Количество*Коэффициент/?(НужнаяЕдиница.Коэффициент=0,1,НужнаяЕдиница.Коэффициент);   	
					КонецЕсли;
				КонецЕсли;
			Иначе 
				Регистр.Интрастат.Количество=0;
			КонецЕсли;
			//Регистр.Интрастат.КодОперации=КодОперации;
			Регистр.Интрастат.ДвижениеВыполнить();   
			//ВидУпаковки = Товар.ЛогистикаВидУпаковки;
			//Если ПустоеЗначение(ВидУпаковки) = 1 Тогда Продолжить; КонецЕсли;      
			//ТаблУпак.НоваяСтрока();
			//ТаблУпак.Материал = ВидУпаковки.Материал;
			//ТаблУпак.Вес = ВидУпаковки.Вес*Количество*Коэффициент;
			//Спр.ИспользоватьВладельца(Товар);
			//Спр.ВыбратьЭлементы();
			//Пока Спр.ПолучитьЭлемент() = 1 Цикл
			//	Если (Спр.ПометкаУдаления()=1) или (ПустоеЗначение(Спр.ВидУпаковки)=1) или (Спр.КолВУпаковке=0) Тогда
			//		Продолжить;
			//	КонецЕсли;
			//	Материал=Спр.ВидУпаковки.Материал;
			//	Вес=Спр.ВесБруттоУпаковки/Спр.КолВУпаковке*Количество*Коэффициент;
			//	ТаблУпак.НоваяСтрока();
			//	ТаблУпак.Материал = Материал;
			//	ТаблУпак.Вес = Вес;
			//КонецЦикла;
		КонецЦикла;       
		Нетто=Итог("ВесНетто");   
		Если ИспользоватьРасчетDRN=1 Тогда
			Брутто=Нетто+КолВидУпаковки1+КолВидУпаковки2+КолВидУпаковки3+КолВидУпаковки4+КолВидУпаковки5+КолВидУпаковки6;
		Иначе
			Брутто=Нетто+ТаблУпак.Итог("Вес");
		КонецЕсли;
		//// заполнение брутто
		//Если ИспользоватьРасчетDRN=0 Тогда
		//	ТаблУпак.Свернуть("Материал","Вес");   
		//	Если  ТаблУпак.КоличествоСтрок() <> 0 Тогда  
		//		ТаблУпак.ВыбратьСтроки() ; 
		//		КолВидУпаковки1=0;	// дерево
		//		КолВидУпаковки2=0;	// пластик
		//		КолВидУпаковки3=0;	// картон
		//		КолВидУпаковки4=0;	// металл
		//		КолВидУпаковки5=0;	// стекло
		//		КолВидУпаковки6=0;	// пет
		//		Пока ТаблУпак.ПолучитьСтроку()=1 Цикл
		//			Если Лев(ТаблУпак.Материал.Наименование,3)="Woo" Тогда  // дерево
		//				КолВидУпаковки1=ТаблУпак.Вес;	
		//			ИначеЕсли Лев(ТаблУпак.Материал.Наименование,3)="Pla" Тогда	// пластик
		//				КолВидУпаковки2=ТаблУпак.Вес;
		//			ИначеЕсли Лев(ТаблУпак.Материал.Наименование,3)="Car" Тогда	// картон
		//				КолВидУпаковки3=ТаблУпак.Вес;
		//			ИначеЕсли Лев(ТаблУпак.Материал.Наименование,3)="Met" Тогда	// металл
		//				КолВидУпаковки4=ТаблУпак.Вес;
		//			ИначеЕсли Лев(ТаблУпак.Материал.Наименование,3)="Gla" Тогда	// стекло
		//				КолВидУпаковки5=ТаблУпак.Вес;
		//			ИначеЕсли Лев(ТаблУпак.Материал.Наименование,3)="PET" Тогда	// пет
		//				КолВидУпаковки6=ТаблУпак.Вес;
		//			КонецЕсли;	
		//		КонецЦикла;
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	
	Если глЗаполнитьРеквизитыДокументаШ(Контекст,1)=0 Тогда //по складам заполнение себестоимости
		Сообщить("Внимание: Не удалось заполнить реквизиты Ш. Обязательно обратитесь к админстратору!!!","!");
	КонецЕсли;
	
	ВсегоСуммаУслугШ=0;
	ВсегоНДСУслугШ=0;
	
	Если МожноПроводить(Контекст)=1 Тогда
		УстановитьГП(ТекущийДокумент());
	КонецЕсли;
	
	Если ГрупповаяОбработка()=0 Тогда
		Если (ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа) ИЛИ (ПризнакНакладной=Перечисление.ПризнРасхНакл.Переработка) Тогда
			ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");
			семЗаполнитьСрокРеализ();

			Если Клиент.ПечататьСрокиРеализ=0 Тогда

			Иначе
				ВыбратьСтроки();
				Пока ПолучитьСтроку()=1 Цикл
					
					Если Товар.ВидТовара=Перечисление.ВидыТоваров.Услуга Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПустоеЗначение(СрокРеализ)=1 Тогда
						НеПроводить(Контекст,"В строке "+ НомерСтроки+ " не указан срок реализации товара!");
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ГрупповаяОбработка()=0 Тогда
//проверка наличия общей заявки
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Если глЕстьРеквизитМнЧ("Счет",ТекущийДокумент().Вид())=1 Тогда
				ПоСчету=?(ПустоеЗначение(Счет)=0,Счет,ДокументОснование);
			Иначе
				ПоСчету=ДокументОснование;
			КонецЕсли;		
	
			Если ПустоеЗначение(ПоСчету)=0 Тогда
				л_ДокОснование=ПоСчету.ДокументОснование;
				Если л_ДокОснование.Вид()="СчетОбщий" Тогда
					л_Док=СоздатьОбъект("Документ.СчетОбщий");
					л_Док.НайтиДокумент(л_ДокОснование);
//					СостояниеДок=глПолучитьСостояниеДокумента(л_Док.ТекущийДокумент());
//					Если СокрЛП(СостояниеДок)="Ожидает отгрузки" Тогда
							ГаситьРегистр(л_Док.ТекущийДокумент());
//					КонецЕсли;
						
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;	
	
	
КонецПроцедуры

//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения(Позже)
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеМОД(Контекст,Позже)=1 Тогда
		Возврат;
	КонецЕсли;
	стар_ОбработкаПроведения();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД

//------------------------
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаУдаленияПроведения() Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ОбработкаУдаленияПроведения()
	//Закомментировано Инсталлятором МОД:Процедура ОбработкаУдаленияПроведения()
	Если СравнитьГП(ТекущийДокумент())<0 Тогда
		УстановитьГП(ТекущийДокумент());
	КонецЕсли;
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаУдаленияПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеПоАлгоритмуМОД=1 Тогда
		Возврат;
	КонецЕсли;
	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
	ПриОтменеПроведенияДокумента(ТекущийДокумент());
	стар_ОбработкаУдаленияПроведения();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
