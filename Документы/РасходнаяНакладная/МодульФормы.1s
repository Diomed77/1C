Перем ИнформационнаяСтрока;
Перем Валюта_Прежн;
Перем Курс_Прежн;
Перем Режим;
Перем Prompt;
Перем стар_Клиент;
Перем Расш;
Перем Тип;
Перем индТовар;//для расчета RECADV

Процедура РасчетКоличесва_RECADV() Далее

Процедура ПересчетЦен()
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Если (Счет.ВидСкидки = Перечисление.ВидСкидки.Документ) И (ПустоеЗначение(Счет.КлиентФилиала)=0) Тогда			
			УстанЦеныРасх(контекст,,0,?(ПустоеЗначение(Счет.КлиентФилиала)=1,Счет.КатегорияЦены,""));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры  

Функция ФорматВывода( парам )
	Если парам = "ЦенаИзКат" Тогда
		
		// получение даты, на которую необходимо получить цену \\
		Если Число(ДатаПоставки) = 0 Тогда
			ДатаЦены = ДатаДок;
		Иначе
			ДатаЦены = ДатаПоставки;
		КонецЕсли;
		// получение даты, на которую необходимо получить цену //
		
		Возврат Формат(ЦенаТовараПоКатегорииДляТовара(Товар,КатегорияЦены,Валюта,КурсДляВалюты(Валюта,ДатаДок),ДатаЦены ),"Ч14.2");
	ИначеЕсли парам = "НомерЗаявки" Тогда
		Возврат ?(Счет.Выбран() = 1,Счет.НомерДок,"");
	ИначеЕсли парам = "ДатаОплаты" Тогда
		Если (ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа) ИЛИ (ПризнакНакладной=Перечисление.ПризнРасхНакл.Переработка) Тогда
			Возврат Шаблон( "[ДатаОплаты] ([семПолучитьГлубинуКредитаКлиента( Клиент, Перечисление.ВидыКлиентов.Покупатель, ДатаДок )])" );
		Иначе
			Возврат Шаблон( "[ДатаОплаты] ([семПолучитьГлубинуКредитаКлиента( Клиент, Перечисление.ВидыКлиентов.Поставщик, ДатаДок )])" );
		КонецЕсли;
	ИначеЕсли парам = "КлиентФилиала" Тогда
		Если ПустоеЗначение(Счет)=0 Тогда
			Если (Счет.КлиентФилиала<>Счет.Клиент) И (ПустоеЗначение(Счет.КлиентФилиала)=0) Тогда
				Возврат Счет.КлиентФилиала;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
КонецФункции

Функция семМаршрут( пКлиент )
	Если пКлиент.АдресДоставки.Выбран() = 1 Тогда
		Возврат пКлиент.АдресДоставки.Маршрут.Описание;
	КонецЕсли;
	Возврат "";
КонецФункции

Процедура семОтчеты()
	Путь = КаталогИБ() + "ExtForms\Sem\Резервы.ert";
	сп = СоздатьОбъект( "СписокЗначений" );
	сп.ДобавитьЗначение( 1, "Структура подчиненности" );
	сп.ДобавитьЗначение( 2, "Движения документа" );
	Если ФС.СуществуетФайл( Путь ) = 1 Тогда сп.ДобавитьЗначение( 3, "Резервы" ); КонецЕсли;
	зн = ""; Если сп.ВыбратьЗначение( зн ,,,, 1 ) = 0 Тогда Возврат; КонецЕсли;
	Если зн = 1 Тогда  СформироватьДеревоДокументов( ТекущийДокумент() );
	ИначеЕсли зн = 2 Тогда СформироватьДвиженияДокумента( Контекст );
	ИначеЕсли зн = 3 Тогда ОткрытьФорму( "Обработка", ТекущийДокумент(), Путь );
	КонецЕсли;
КонецПроцедуры

//***************************************
Процедура ПриВыбореТовара()
	Если ПустоеЗначение(Цена) = 1 Тогда 
		УстанЦеныРасх(Контекст,,,?(ПустоеЗначение(Счет.КлиентФилиала)=1,Счет.КатегорияЦены,""));
	КонецЕсли;
КонецПроцедуры	
//---------------------- 
Функция семРасшСтавкиНДС()
	Если СтавкаНДС <> Перечисление.ЗначенияНДС.НДС0 Тогда Возврат ""; КонецЕсли;
	Если Клиент.Страна.ВидСтраны = Перечисление.ВидыСтран.ЕС Тогда
		Возврат " (likuma 28p.1d.1p)";
	ИначеЕсли Клиент.Страна.ВидСтраны = Перечисление.ВидыСтран.ПрочиеСтраны Тогда
		Возврат " (likuma 7p.1d.1p)";
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Процедура Доступ()
	          
	Если (Склад.ВидСклада=Перечисление.ВидыСкладов.Розничный)  Тогда
		Форма.КодДляРозницы.Видимость(1);
	Иначе
		Форма.КодДляРозницы.Видимость(0);
	КонецЕсли;
	              
	Форма.НаАлкоголь.Доступность(1-ПустоеЗначение(Клиент.ЛицензияАлкоголь));
	Форма.АкцизнаяМарка.Видимость(НаАлкоголь);
	
	Если Строка(ДокументОснование.Вид()) = "Счет" Тогда
		Форма.Товар.Доступность(0);
	КонецЕсли;          
	
	ТекЗакладка = Форма.Закладки.ПолучитьЗначение(Форма.Закладки.ТекущаяСтрока());
	Если ТекЗакладка="Основной" Тогда
		Если ПризнакНакладной=Перечисление.ПризнРасхНакл.КредитнаяНота Тогда
			Форма.лВидКредНоты.Видимость(1);
			Форма.ВидКредитнойНоты.Видимость(1);
		Иначе
			Форма.лВидКредНоты.Видимость(0);
			Форма.ВидКредитнойНоты.Видимость(0);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
              
//****************************************
//Процедура ИзменитьНомер()
//	Если БН<>Да Тогда
//		НомерДок=СтрЗаменить(НомерДок," ","-");
//	КонецЕсли;
//	
//КонецПроцедуры

//*****************************************

Процедура ПриВводеСтроки()
	ПриВводеСтрокиДокумента(Контекст);
КонецПроцедуры        


//**************************************************
Процедура ПриОкончанииРедактированияСтроки()
	
	Если ПризнакНакладной<>Перечисление.ПризнРасхНакл.ВозвратПоставщику Тогда
		СуммаБезНДС_=Итог("Сумма");
		СуммаНДС_=Итог("НДС");
		СуммаВсего_=СуммаБезНДС_+СуммаНДС_;
		ВыбратьСтроки();
		ПолучитьСтроку();
		промВидСкидки = ВидСкидки;
		Выч_суммы_накл_сНП(Контекст,0,1,?(ПустоеЗначение(Счет.КлиентФилиала)=1,Счет.КатегорияЦены,""));
		ВидСкидки = промВидСкидки;
	
		Если Окр(СуммаВсего_,2)<>(Окр(СуммаБезНДС_,2)+Окр(СуммаНДС_,2)) Тогда
			//скорректируем НДС на разницу
			Разница=СуммаВсего_-(Окр(СуммаБезНДС_,2)+Окр(СуммаНДС_,2));
			ВыбратьСтроки();
			ПолучитьСтроку();
			НДС=НДС-Разница;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПриНачалеРедактированияСтроки()
	Если Форма.ТекущаяКолонка()="Количество" Тогда
		Если (Константа.НовыйМеханизмПретензий.Получить(ДатаДок)=Да) И (ПустоеЗначение(Счет.Вид())=0) Тогда 
				//Предупреждение("Нельзя изменять кол-во в документе. Для любых коррекций используйте документ комплектации заявки (факт).");
				//СтатусВозврата(0);
		КонецЕсли;
	//ИначеЕсли Форма.ТекущаяКолонка()="Единица" Тогда
	//	Если (Константа.НовыйМеханизмПретензий.Получить(ДатаДок)=Да) И (ПустоеЗначение(Счет.Вид())=0) Тогда 
	//		Предупреждение("Нельзя изменять единицу в документе. Для любых коррекций используйте документ комплектации заявки (факт).");
	//		СтатусВозврата(0);
	//	КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры
//-----------------------------------------------
Процедура ПриВыбореЗакладки(Ном, Имя)
	Если Ном=1 Тогда
		Форма.ИспользоватьСлой("Основной,Кнопки",2);   
	Иначе
		Форма.ИспользоватьСлой("Кнопки,INTRASTAT",2);
	КонецЕсли;
	
	Доступ();
КонецПроцедуры	// ПриВыбореЗакладки
//------------------------
Процедура ПриОткрытии()
	ПроверкаРазрешенияРедактирования(Контекст);
	УстановкаРеквизитаТип(Контекст);
	Тип.ДобавитьЗначение("Упр.");
	Тип.ДобавитьЗначение("Общ.");
	Тип.ДобавитьЗначение("Фин.");
	Тип.ТекущаяСтрока(ТипУчета+1);
	Если Форма.ТолькоПросмотр()=1 Тогда
		Форма.КнФирма.Доступность(0);
		Форма.КнСклад.Доступность(0);
		Форма.КнВалюта.Доступность(0);
		Форма.КнПровести.Доступность(0);
//		Форма.ВводСчФ.Доступность(0);
		Форма.ПодборПоКаталогу.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнОК.Доступность(0);
		Форма.КнопкаПоУмолчанию("Закрыть");
	Иначе
		Форма.КнопкаПоУмолчанию("ОК");
	КонецЕсли;
	
	семЗаголовокОкна(контекст);      
		// анна
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Основной");
	Форма.Закладки.ДобавитьЗначение("Статистика");    
	Форма.ИспользоватьСлой("Основной,Кнопки",2);

	Доступ();

	
	//вывод инфо RECADV
	Если ТекущийДокумент().Проведен()=1 Тогда
		Если КлГруппа.ПризнакRECADV=1 Тогда
			РасчетКоличесва_RECADV();
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры
//------------------------
Процедура ПослеОткрытия()
	Транслит(Расш,Форма);
КонецПроцедуры
//------------------------
Процедура ВыборГлубины()
	// сем \\
	//ДатаОплаты=БанковскаяДата(ДатаДок,Глубина);
	//ДатаОплаты=БанковскаяДата(ДатаПоставки,Глубина);
	// сем //
КонецПроцедуры
//-----------------------------------------------
Процедура Взаиморасчеты()
	Форма.ИнфПодпись.Видимость(0);
	ИнформационнаяСтрока=ДолгПоКредитуНов(Контекст);
КонецПроцедуры
//-----------------------------------------------
//***********************************************************
//<<Алгоритм Успеха>> (begin)
//
//_____________________________________________________________________________
Процедура ПриУстановкеПризнака()
	Если (ПризнакНакладной=Перечисление.ПризнРасхНакл.ЭкспортныйВозврат) ИЛИ (ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратСХранения) ИЛИ (ПризнакНакладной=Перечисление.ПризнРасхНакл.Хранение) Тогда
	    Если (ПроцентНДС(СтавкаНДС)>0) ИЛИ (ПустоеЗначение(СтавкаНДС)=1) Тогда
	        СтавкаНДС=Перечисление.ЗначенияНДС.НДС0;
			ПриИзмененииСтавкиНДС(Контекст);
		КонецЕсли;                         
	Иначе
		Если (ПроцентНДС(СтавкаНДС)=0) ИЛИ (ПустоеЗначение(СтавкаНДС)=1) Тогда
	        СтавкаНДС=Константа.ОсновнаяСтавкаНДС;
			ПриИзмененииСтавкиНДС(Контекст);
		КонецЕсли;                         
	КонецЕсли;
	Если (ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа) ИЛИ (ПризнакНакладной=Перечисление.ПризнРасхНакл.Переработка) Тогда
		ДатаОплаты = семПолучитьДатуОплаты( Клиент, Перечисление.ВидыКлиентов.Покупатель, ДатаПоставки );
	Иначе
		ДатаОплаты = семПолучитьДатуОплаты( Клиент, Перечисление.ВидыКлиентов.Поставщик, ДатаПоставки );
	КонецЕсли;
КонецПроцедуры //ПриУстановкеПризнака
//<<Алгоритм Успеха>> (end) 
//************************************************************
Функция ИнфОпродаже()
	Если Клиент.Выбран()=1 Тогда
		КлиентГр = ?(Клиент.КлГруппа.Выбран()=1,Клиент.КлГруппа,Клиент);
		Если КлиентГр.ЗапретВыпискиНакл.Получить(ДатаДок)=1 Тогда
			Возврат("Запрет на продажу!!!");
		Иначе
			Возврат("");
		КонецЕсли;
	Иначе
		Возврат("");
	КонецЕсли;
КонецФункции                 

//----------------------------------------------------
Функция ИнфОдоговоре()
	Если Клиент.Выбран()=1 Тогда
		Если СтрДлина(СокрЛП(Клиент.Договор))=0 Тогда
			Возврат("Договора нет!!!");
		Иначе
			Возврат(Клиент.Договор);
		КонецЕсли;
	Иначе
		Возврат("");
	КонецЕсли;
КонецФункции
//-----------------------------------------------
Процедура ВыборКлиента(Режим="Изменение")

	Если (ПустоеЗначение(стар_Клиент)=0) и (клиент<>стар_Клиент) Тогда
		Если глПроверкаАгентаПоКлиенту(Контекст)=0 Тогда
			Клиент=стар_Клиент;
		КонецЕсли;             
		стар_Клиент="";
	КонецЕсли;
                 
	
	КлГруппа=?(Клиент.КлГруппа.Выбран()=1,Клиент.КлГруппа,Клиент);
	
    Клиент.ИспользоватьДату("");
	Если Клиент.Выбран()=1 Тогда
		
		Если (ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа) 
			ИЛИ (ПризнакНакладной=Перечисление.ПризнРасхНакл.Переработка) 
			Тогда
			Если НЕ(КлГруппа.СуммаКредита.Получить(ДатаДок)=0) Тогда
				Глубина=КлГруппа.Глубина.Получить(ДатаДок);
//				Форма.Глубина.Видимость(1);
//				Форма.ГлубинаПодпись.Видимость(1);
				Форма.ДатаОпл.Видимость(1);
				Форма.ДатаОплПодпись.Видимость(1);
			Иначе
				Глубина=0;
//				Форма.Глубина.Видимость(0);
//				Форма.ГлубинаПодпись.Видимость(0);
				Форма.ДатаОпл.Видимость(0);
				Форма.ДатаОплПодпись.Видимость(0);
			КонецЕсли;

			Валюта=Клиент.ВалютаКредита;
			Курс=КурсДляВалюты(Валюта,Дата_Курса);
			
			ДатаОплаты = семПолучитьДатуОплаты( Клиент, Перечисление.ВидыКлиентов.Покупатель, ДатаПоставки );
		ИначеЕсли (ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратПоставщику)
			ИЛИ (ПризнакНакладной=Перечисление.ПризнРасхНакл.ЭкспортныйВозврат)
			ИЛИ (ПризнакНакладной=Перечисление.ПризнРасхНакл.КредитнаяНота) Тогда
			Если НЕ(КлГруппа.СуммаКредитаПоставщика.Получить(ДатаДок)=0) Тогда
				Глубина=КлГруппа.ГлубинаКредитаПоставщика.Получить(ДатаДок);
			Иначе
				Глубина=0;
			КонецЕсли;
			ДатаОплаты = семПолучитьДатуОплаты( Клиент, Перечисление.ВидыКлиентов.Поставщик, ДатаПоставки );
		КонецЕсли;
		
		//ВыборГлубины();
		ИнформационнаяСтрока="";
		Форма.ИнфПодпись.Видимость(1);
		
		Если (Клиент.КатегорияЦены<>КатегорияЦены) И 
			 (Клиент.КатегорияЦены<>Константа.РозничнаяКатегорияЦены) И
			 (ПустоеЗначение(Клиент.КатегорияЦены)=0) И (стар_Клиент<>Клиент)  Тогда
		    КатегорияЦены=Клиент.КатегорияЦены;
			ПриИзмененииКатегорииЦены(Контекст);
		КонецЕсли;
		СтавкаНДС = семПолучитьСтавкуНДС(Клиент,Контекст);
//		ПриУстановкеПризнака();
		Если семТекСтрана() = "LV" Тогда
			Если КатегорияЦены.Наименование = "Экспортная" Тогда
				промВалюта = семПолучитьВалютуПоНаим( "EUR" );
				Если ПустоеЗначение( промВалюта ) = 0 Тогда
					Валюта = промВалюта;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Режим="Изменение" Тогда
			Предупреждение ("Выберите клиента!");
			Возврат;
		КонецЕсли;
		КлГруппа="";
	КонецЕсли;
	
	
КонецПроцедуры
//------------------------
Процедура ВыборДаты()
	Устан_Вал(Контекст,ДатаДок,Валюта_Прежн,Курс_Прежн);
	ВыборКлиента();
	//УстанЦеныРасх(Контекст);
КонецПроцедуры
//-----------------------------------------------
Процедура Подбор()
	Режим="Каталог";
	Z_Подбор(Контекст);
КонецПроцедуры
//-----------------------------------------------
Процедура ОбработкаПодбора(Выб)
	ЗапросКоличестваВПодборе(Контекст,Режим,Выб);
	УстанЦеныРасх(Контекст,"Подбор",1);
	Выч_суммы_накл_сНП(Контекст);
	АктивизироватьСтроку();
КонецПроцедуры
//---------------------------------------------
Функция СуммаПрописьюРасхНакл()
	Если ВалютаПечати.Выбран()=0 Тогда
		ВалютаПечати=Валюта;
	КонецЕсли;
	Если ФС.СуществуетФайл(КаталогБазыДанных()+ВалютаПечати.ИмяФайлаПрописи)=1 Тогда
		Пропись(ВалютаПечати.ИмяФайлаПрописи);
		//Иначе
		//	Стр="Для валюты "+Конт.Валюта+" отсутствует файл прописей "+ИмяФайлаПрописей;
		//	Предупреждение(Стр);
		//	Возврат "";
	КонецЕсли;
	СтрокаСуммы=Формат(Пересчет(Итог("Сумма"),Валюта,Курс,ВалютаПечати,Дата_Курса),"ЧПДС");
	Пропись("");
	Возврат СтрокаСуммы;
КонецФункции
//-----------------------------------------------
Процедура ПечатьРасходнойНакладной()
	Фирма.ИспользоватьДату(ДатаДок);
	Таб=СоздатьОбъект("Таблица");
	Таб.ВывестиСекцию("Шапка");
	ВыбратьСтроки();
	Ном=0;
	Пока ПолучитьСтроку() = 1 Цикл
		Ном=Ном+1;
		ПечЦена=?(Константа.СуммаВключаетНДС.Получить(ДатаДок)=Перечисление.Булево.Нет
		,ФРМ(Пересчет(Цена*Коэффициент-НДС/Количество,Валюта,Курс,ВалютаПечати,Дата_Курса),ВалютаПечати,0)
		,ФРМ(Пересчет(Цена*Коэффициент,Валюта,Курс,ВалютаПечати,Дата_Курса),ВалютаПечати,0));
		ПечСумма=?(Константа.СуммаВключаетНДС.Получить(ДатаДок)=Перечисление.Булево.Нет
		,ФРМ(Пересчет(Сумма-НДС,Валюта,Курс,ВалютаПечати,Дата_Курса),ВалютаПечати,0)
		,ФРМ(Пересчет(Сумма,Валюта,Курс,ВалютаПечати,Дата_Курса),ВалютаПечати,0));
		ПечНП=ФРМ(Пересчет(СуммаНП,Валюта,Курс,ВалютаПечати,Дата_Курса),ВалютаПечати,0);
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;
	ПечВсегоСумма=?(Константа.СуммаВключаетНДС.Получить(ДатаДок)=Перечисление.Булево.Нет
	,ФРМ(Пересчет(Итог("Сумма")-Итог("НДС"),Валюта,Курс,ВалютаПечати,Дата_Курса),ВалютаПечати,1)
	,ФРМ(Пересчет(Итог("Сумма"),Валюта,Курс,ВалютаПечати,Дата_Курса),ВалютаПечати,1));
	ПечВсегоНДС=ФРМ(Пересчет(Итог("НДС"),Валюта,Курс,ВалютаПечати,Дата_Курса),ВалютаПечати,1);
	ПечВсегоНП=ФРМ(Пересчет(Итог("СуммаНП"),Валюта,Курс,ВалютаПечати,Дата_Курса),ВалютаПечати,1);
	
	ПечИтого=?(Константа.СуммаВключаетНДС.Получить(ДатаДок)=Перечисление.Булево.Да
	,""
	,ФРМ(Пересчет(Итог("Сумма"),Валюта,Курс,ВалютаПечати,Дата_Курса),ВалютаПечати,1));
	ПечИтогоНаименований="Всего наименований "+КоличествоСтрок()+", на сумму "+ФРМ(Пересчет(Итог("Сумма"),Валюта,Курс,ВалютаПечати,Дата_Курса),ВалютаПечати,1);
	ПечИтогоСумма="Сумма: "+СуммаПрописьюРасхНакл();
	пСтавкаНДС = ""+СтавкаНДС + семРасшСтавкиНДС();
	Таб.ВывестиСекцию("Подвал");
	Таб.Опции(0,0,0,0,ПарСтрДок);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Печать накладной","");
КонецПроцедуры
//_____________________________________________________________________________
Процедура ДопИнф()
	Спр=СоздатьОбъект("Справочник.ИнформационныйСправочник");
	Если Спр.Выбрать("Информация в документе "+ТекущийДокумент(),"ФормаСписка")=1 Тогда
		ДопИнформация=Спр.ТекущийЭлемент();
		Форма.Обновить(0);
	КонецЕсли;
КонецПроцедуры //ДопИнф
//----------------------------------------------------------------------------------------------
Процедура ПечатьТоварнойНакладной()
	//Для простоты настройки печатной формы примем следующие соглашения:
	//	-	высота строк в таблице печатной формы задана жестко,
	//		тогда известно, сколько строк помещается на странице;
	СтрокНаСтранице = 22;
	//	-	высота шапки и подвала задана жестко и кратна высоте строк таблицы,
	//		тогда можно указать, сколько строк занимают шапка и подвал
	//		в пересчете на строки таблицы;
	СтрокШапки = 9;
	СтрокПодвала = 8;
	//	-	для нормальной работы алгоритма необходимо, чтобы шапка и подвал
	//		могли поместиться на одной странице + хотя бы одна строка таблицы:
	//		СтрокНаСтранице >= СтрокШапки + СтрокПодвала + 1
	//	-	если подвал не помещается на странице, он переносится на другую
	//		страницу с последней строкой; исключение составляет случай,
	//		когда в таблице всего одна строка.
	Если КоличествоСтрок() = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом = Цел((СтрокШапки+КоличествоСтрок()+СтрокПодвала)/СтрокНаСтранице);
		ЦелыхСтраницБезПодвала = Цел((СтрокШапки+КоличествоСтрок()-1)/СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;
	ВалютаПечати=Рубли;
	Фирма.ИспользоватьДату(ДатаДок);
	Таб=СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("ТоварнаяНакладная");
	Если ИспользоватьНП=Перечисление.Булево.Да Тогда
		Секц="|НП";
	Иначе
		Секц="|БезНП";
	КонецЕсли;
	ОрганизацияАдрес = СокрЛП(Фирма.ПолноеНаименование)+", "+СокрЛП(Фирма.ИНН)+", "+Фирма.ЮридическийАдрес;
	КлиентАдрес=СокрЛП(Клиент.ПолноеНаименование)+" "+СокрЛП(Клиент.ЮридическийАдрес);
	Таб.ВывестиСекцию("Шапка"+Секц);
	НомерСтраницы = 1;
	
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаНаСтранице = 0;
	ИтогоНДСНаСтранице = 0;
	ИтогоСуммаСНДСНаСтранице = 0;
	ИтогоНГСМНаСтранице = 0;
	ИтогоНПНаСтранице = 0;
	
	ИтогоКоличество = 0;
	ИтогоСумма = 0;
	ИтогоНДС = 0;
	ИтогоСуммаСНДС = 0;
	ИтогоНГСМ = 0;
	ИтогоНП = 0;
	
	Таб.ВывестиСекцию("ЗаголовокТаблицы"+Секц);
	ВыбратьСтроки();
	Ном=0;
	Пока ПолучитьСтроку() = 1 Цикл
		Ном=Ном+1;
		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки+Ном-1)/СтрокНаСтранице;
		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок())) Тогда
			Таб.ВывестиСекцию("ИтогоПоСтранице"+Секц);
			ИтогоКоличествоНаСтранице = 0;
			ИтогоСуммаНаСтранице = 0;
			ИтогоНДСНаСтранице = 0;
			ИтогоСуммаСНДСНаСтранице = 0;
			ИтогоНГСМНаСтранице = 0;
			ИтогоНПНаСтранице = 0;
			Таб.НоваяСтраница();
			НомерСтраницы = НомерСтраницы + 1;
			Таб.ВывестиСекцию("ЗаголовокТаблицы"+Секц);
		КонецЕсли;
		ПечТовар		= Товар;
		ПечЕдиница		= Единица; 
		ПечСтавкаНДС	= Товар.СтавкаНДС;
		ПечКоличество	= Количество;                         
		КолВо			= ?(Количество=0,1,Количество);
		
		//	Если СуммаВключаетНП=1 Тогда
		ПечЦена			= Пересчет(Цена-НДС/КолВо-СуммаНП/КолВо,Валюта,Курс,ВалютаПечати,Дата_Курса);
		ПечСумма		= Пересчет(Сумма-СуммаНП		,Валюта,Курс,ВалютаПечати,Дата_Курса);
		ПечСуммаБезНДС	= Пересчет(Сумма-НДС-СуммаНП	,Валюта,Курс,ВалютаПечати,Дата_Курса);	
		//Иначе
		//	ПечЦена			= Пересчет(Цена-НДС/КолВо,Валюта,Курс,ВалютаПечати,Дата_Курса);
		//	ПечСумма		= Пересчет(Сумма		,Валюта,Курс,ВалютаПечати,Дата_Курса);
		//	ПечСуммаБезНДС	= Пересчет(Сумма-НДС	,Валюта,Курс,ВалютаПечати,Дата_Курса);
		//КонецЕсли;
		ПечНДС			= Пересчет(НДС,Валюта,Курс,ВалютаПечати,Дата_Курса);
		Если ИспользоватьНП=Перечисление.Булево.Да Тогда
			ПечНП = Пересчет(СуммаНП,Валюта,Курс,ВалютаПечати,Дата_Курса);
		Иначе
			ПечНП = "";
		КонецЕсли;
		
		Таб.ВывестиСекцию("Строка"+Секц);
		
		ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
		ИтогоСуммаНаСтранице = ИтогоСуммаНаСтранице + ПечСумма - ПечНДС;
		ИтогоНДСНаСтранице = ИтогоНДСНаСтранице + ПечНДС;
		ИтогоСуммаСНДСНаСтранице = ИтогоСуммаСНДСНаСтранице + ПечСумма;
		ИтогоНПНаСтранице = ИтогоНПНаСтранице + ПечНП;
		
		ИтогоКоличество = ИтогоКоличество + Количество;
		ИтогоСумма = ИтогоСумма + ПечСумма - ПечНДС;
		ИтогоНДС = ИтогоНДС + ПечНДС;
		ИтогоСуммаСНДС = ИтогоСуммаСНДС + ПечСумма;
		ИтогоНП = ИтогоНП + ПечНП;
	КонецЦикла;
	
	Таб.ВывестиСекцию("ИтогоПоСтранице"+Секц);
	Таб.ВывестиСекцию("Всего"+Секц);
	
	НаСумму="на сумму "+СуммаПрописьюРасхНакл();
	// формируем строку для вывода количества листов накладной
	// Слово лист склоняется
	Если (НомерСтраницы > 10) И (НомерСтраницы < 20) Тогда
		Слово	= " листах";
	Иначе
		ПоследняяЦифра	= НомерСтраницы % 10;
		Если ПоследняяЦифра = 1 Тогда
			Слово	= " листе";
		Иначе
			Слово	= " листах";
		КонецЕсли;
		
	КонецЕсли;
	СтрокаКоличествоЛистов	= Строка(НомерСтраницы) + Слово;
	пСтавкаНДС = ""+СтавкаНДС + семРасшСтавкиНДС();
	Таб.ВывестиСекцию("Подвал"+Секц);
	Таб.Опции(0,0,0,0,"ОпцииПечатиНакладной","ОкноНакладной");
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.ПараметрыСтраницы(2,,,0,0,0,0,,,);
	Таб.Показать("Печать товарной накладной","");
КонецПроцедуры //Печать Торг12
//-----------------------------------------------
Процедура ПечатьСтарая()
	Перем Стр,Код,Поз,Позиция;	 
	Выбор=СоздатьОбъект("СписокЗначений");
	Выбор.ДобавитьЗначение(1,"Расходная накладная");
	Выбор.ДобавитьЗначение(2,"ТоварнаяНакладная");  
	Рез=Выбор.ВыбратьЗначение(Код, "", Поз,,1); 
	Если Рез<>1 Тогда
		Возврат; 
	КонецЕсли;  
	Если ВалютаПечати.Выбран()=0 Тогда
		// на первый раз надо определить валюту печати
		Влт=СоздатьОбъект("Справочник.Валюты");
		СписокВалют=СоздатьОбъект("СписокЗначений");
		Влт.ВыбратьЭлементы();
		Пока Влт.ПолучитьЭлемент()=1 Цикл
			СписокВалют.ДобавитьЗначение(Влт.ТекущийЭлемент(),Влт.Наименование);
		КонецЦикла;
		Если СписокВалют.РазмерСписка()=0 Тогда
			Предупреждение("В справочнике валют нет ни одной валюты!");
			Возврат;
		КонецЕсли;
		Если СписокВалют.ВыбратьЗначение(ВалютаПечати,"Выберите валюту",Позиция,,1)<1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если Код=1 Тогда 
		ПечатьРасходнойНакладной();
	ИначеЕсли Код=2 Тогда
		ПечатьТоварнойНакладной();
	Иначе                            	
		Возврат;
	КонецЕсли;		
КонецПроцедуры
//***************************************************************
Процедура ПечатьСчет()
	Фирма.ИспользоватьДату(ДатаДок);
	 
	ПросроченоДней=0;
	
	Взаиморасчеты();

	Таб=СоздатьОбъект("Таблица");

	Таб.ИсходнаяТаблица("Счет");


	ОснДок="";
	Если ДокументОснование.Выбран()=1 Тогда
	    ОснДок=Шаблон("Pamat.: [ДокументОснование.НомерДок] no [ДокументОснование.ДатаДок]");
		ОснованиеДоп=ДокументОснование.Основание;
	КонецЕсли;
	                  
	НомерНакл = НомерДок;
	Если ПризнакНакладной=Перечисление.ПризнРасхНакл.КредитнаяНота Тогда
		
		Таб.ИсходнаяТаблица("КредитнаяНота");   
		Меню=СоздатьОбъект("СписокЗначений");
		Меню.ДобавитьЗначение("LV: Kred®tr§°ins");
		Меню.ДобавитьЗначение("EN: Credit note");      
		Язык=0;
		Если Меню.ВыбратьЗначение(,,Язык,,1)=0 Тогда
			Возврат;
		КонецЕсли; 
		Если Язык=1 Тогда
			Таб.ВывестиСекцию("Шапка");	
		Иначе 
			Если фс.СуществуетФайл(КаталогИБ()+"en_"+СокрЛП(Валюта.Наименование)+".spl")=1 Тогда     
				Пропись(КаталогИБ()+"en_"+СокрЛП(Валюта.Наименование)+".spl");
			КонецЕсли;
			Таб.ВывестиСекцию("ШапкаАнгл");		
			Пропись("");
		КонецЕсли;
		Таб.Опции(0,0,0,0,ПарСтрДок);
		Таб.ПараметрыСтраницы(1,100,,20,15,10,10,,,1);
		Таб.Защита(Константа.ФлагЗащитыТаблиц);
		Таб.ТолькоПросмотр(1);
		Таб.Показать("Kreditu nota: "+НомерДок,"");
		Возврат;
	ИначеЕсли ПризнакНакладной=Перечисление.ПризнРасхНакл.Переработка Тогда
    	Назв="Uz pўrstrўdi";
		Оплата="";
	ИначеЕсли (ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратПоставщику) ИЛИ (ПризнакНакладной=Перечисление.ПризнРасхНакл.ЭкспортныйВозврат) Тогда
    	Назв="Pavadz®me";
		Оплата=Шаблон("Apmaksўt l®dz: [ДатаОплаты]   ar pўrskait®jumu");
		Таб.ИсходнаяТаблица("Возврат");
	Иначе
		Назв="Pavadz®me";
		Оплата=Шаблон("Apmaksўt l®dz: [ДатаОплаты]   ar pўrskait®jumu");
	КонецЕсли;

// Получим строку с номерами сертификатов
	НомераСертификатов=СформироватьСтрокуСертификатов(Контекст);
// Сформируем печать скидки
	СпецОтм="";
                            
	Если  (Итог("Скидка")=0) ИЛИ ((ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратПоставщику) ИЛИ (ПризнакНакладной=Перечисление.ПризнРасхНакл.ЭкспортныйВозврат)) Тогда
 	 	СекцияСкидка="БезСкидки";
	Иначе
	 	СекцияСкидка="СоСкидкой";
	КонецЕсли;
	
	Таб.ВывестиСекцию("Шапка|Основная");
	Таб.ПрисоединитьСекцию("Шапка|"+СекцияСкидка);
	
	ВыбратьСтроки();
	Ном=0;
	Пока ПолучитьСтроку() = 1 do
		Ном=Ном+1;
		Таб.ВывестиСекцию("Строка|Основная");
		Таб.ПрисоединитьСекцию("Строка|"+СекцияСкидка);
		  
		Если 1=2 Тогда //Отключено
		//Если Товар.ВидТовара=Перечисление.ВидыТоваров.Комплект Тогда
			Таб.ВывестиСекцию("ВСоставе|Основная");
			Таб.ПрисоединитьСекцию("ВСоставе|"+СекцияСкидка);

			Кмп=СоздатьОбъект("Справочник.Комплектация");
			Кмп.ИспользоватьВладельца(Товар);
			Кмп.ВыбратьЭлементы();
			Пока Кмп.ПолучитьЭлемент()>0 Цикл
				Таб.ВывестиСекцию("Состав|Основная");
				Таб.ПрисоединитьСекцию("Состав|"+СекцияСкидка);
			КонецЦикла;
			Кмп=0;
		КонецЕсли;
	КонецЦикла;

	Таб.ВывестиСекцию("Итог|Основная");
	Таб.ПрисоединитьСекцию("Итог|"+СекцияСкидка);

	Если  (Итог("Скидка")=0) ИЛИ ((ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратПоставщику) ИЛИ (ПризнакНакладной=Перечисление.ПризнРасхНакл.ЭкспортныйВозврат)) Тогда
	Иначе
	КонецЕсли;
	
	пСтавкаНДС = ""+СтавкаНДС + семРасшСтавкиНДС();
	Таб.ВывестиСекцию("Подвал|Основная");
	Таб.ПрисоединитьСекцию("Подвал|"+СекцияСкидка);
	
	   	
	Таб.ВывестиСекцию("Подвал1|Основная");
	Таб.ПрисоединитьСекцию("Подвал1|"+СекцияСкидка);
	 	
            
      
	
	Таб.Опции(0,0,0,0,ПарСтрДок);
	Таб.ПараметрыСтраницы(1,100,,10,5,3,10,,,1);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("PPR (R§kins): "+НомерДок,"");
КонецПроцедуры 
// *************************************************************************

Процедура ПечатьЭкспорта()   
	
	//ВыборГлубины();
               
	Таб=СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("ПечатьЭкспорта");       
	Таб.ТолькоПросмотр(1);                 
	
	СпрЦены = СоздатьОбъект("Справочник.Единицы");
	СпрЯОбщ = СоздатьОбъект("Справочник.ЯзыкОбщения");
	СпрПеЕИ = СоздатьОбъект("Справочник.ПереводЕИ");   
	СпрПеВУ = СоздатьОбъект("Справочник.ПереводВУ"); 
	
	СпрЯОбщ.НайтиПоКоду("3");   
	СпрПеЕИ.ИспользоватьВладельца(СпрЯОбщ.ТекущийЭлемент());    
	СпрПеВУ.ИспользоватьВладельца(СпрЯОбщ.ТекущийЭлемент());

	
	Рег=СоздатьОбъект("Регистр.ПартииТоваров");

	
	Рег.ВыбратьДвиженияДокумента(ТекущийДокумент());
	Пока Рег.ПолучитьДвижение()>0 Цикл
		
		
	СрокРеализ=Рег.СрокРеализации;	  
	
	//Сообщить(СрокРеализ);
	
	КонецЦикла;
	
	ГТБруто = 0;
	ГТНето = 0;
	ГТКартон = 0;
	
	ТЗ=СоздатьОбъект("ТаблицаЗначений");
	ТЗ.НоваяКолонка("Поз","Число",5,0);
	ТЗ.НоваяКолонка("Ткод","Строка",12);
	
	ВыбратьСтроки();
	Ном=0;
	Пока ПолучитьСтроку() = 1 do
		Ном=Ном+1;                
		ТЗ.НоваяСтрока();
		ТЗ.Поз=Ном;
		ТЗ.ТКод=Товар.ТамКод.Код;
	КонецЦикла;
	
    ТЗ.Сортировать("2");
	
	//ТЗ.ВыбратьСтроки();
	Ном=0;                        
	ТЗ.ПолучитьСтрокуПоНомеру(1);
	ПолучитьСтрокуПоНомеру(ТЗ.Поз);
	ГрТкод=Лев(Товар.ТамКод.Код,4);  
	
	
	
	// *************************************
	// pagaidaam lieks cikls
	
	
		ТЗ.ВыбратьСтроки();
	Пока ТЗ.ПолучитьСтроку() = 1 do
		Ном=Ном+1;     
		
		
		ПолучитьСтрокуПоНомеру(ТЗ.Поз);		
		Если ГрТкод<>Лев(Товар.ТамКод.Код,4) Тогда
			//Таб.ВывестиСекцию("ТамГруппа");	
			ТКБрутто = 0;
			ТКНетто = 0;   
			ТкСумма = 0;
			ГрТкод=Лев(Товар.ТамКод.Код,4);
		КонецЕсли;
		
		//ПолучитьСтрокуПоНомеру(ТЗ.Поз);
		// Расчет нето веса товара
		// **************************************
		// Если продаем в кг - делать нефиг
		Если Единица <> Перечисление.ЕдиницыИзмерения.Килограмм Тогда  
			
			СпрЦены.ИспользоватьВладельца(Товар);
			
			Если СпрЦены.НайтиПоРеквизиту("Единица",Перечисление.ЕдиницыИзмерения.Килограмм,0) = 0 Тогда
				Сообщить("Нет коеффициента пересчета в КГ: "+Товар);
				НетоВесСтроки = 0; 
				НетоВесПозиции = 0;
			Иначе
				НетоВесСтроки = Окр(Количество / СпрЦены.Коэффициент,2); 
				НетоВесПозиции = 1 / СпрЦены.Коэффициент; 
			КонецЕсли; 
		Иначе
			НетоВесСтроки = Количество;        
			НетоВесПозиции = 1;
		КонецЕсли;
		
		ТКНетто = ТКНетто +  НетоВесСтроки;
		// Расчет количества мест                
		// **************************************
		Если Товар.ЛогистикаКолВУпаковке=0 Тогда
			Сообщить("Не указано количество в упаковке: "+Товар);
			Мест=0;
		Иначе
			Мест = Цел(Количество/Товар.ЛогистикаКолВУпаковке)+?(Цел(Количество/Товар.ЛогистикаКолВУпаковке)*Товар.ЛогистикаКолВУпаковке=Количество, 0, 1);
		Конецесли; 
		
		
		// Бруто вес всего
		// Вес места (МастерКартон)
		Если Товар.ЛогистикаВесБруттоУпаковки=0 Тогда
			Сообщить("Не указан вес упаковки: "+Товар);
			ВесУпаковки=0;
		Иначе
			ВесУпаковки = Товар.ЛогистикаВесБруттоУпаковки;
		Конецесли; 

		// Товарной упаковки (коробки, банки или вакуумиа)
		Если Товар.Вес=0 Тогда
			//Сообщить("Не указан Бруто вес : "+Товар);
			ВесТовара=0;
		Иначе
			ВесТовара = Товар.Вес;
		Конецесли; 

		БрутоВесСтроки = Окр(Мест * ВесУпаковки + Количество * Товар.Вес + НетоВесПозиции * Количество,2);
		
		ТКБрутто = ТКБрутто + БрутоВесСтроки;      
		
		ТкСумма = ТкСумма + ?(Константа.СуммаВключаетНДС.Получить(ДатаДок)=Перечисление.Булево.Да,Строка(Сумма-НДС),Сумма);
		
		
		// Переводим ЕИ    
		
		Если СпрПеЕИ.НайтиПоРеквизиту("ЕИ",Единица.Единица,0)=0 Тогда
			Сообщить("Не найден перевод ЕИ "+Единица);
		КонецЕсли;      
		
		// Переводим ВУ    
		
		Если СпрПеВУ.НайтиПоРеквизиту("ВУ",Товар.ЛогистикаВидУпаковки,0)=0 Тогда
			Сообщить("Не найден перевод ВУ "+Единица);
		КонецЕсли;		
		
		ГТБруто = ГТБруто + БрутоВесСтроки;
		ГТНето = ГТНето + НетоВесСтроки;
		ГТКартон = ГТКартон + Мест;		
	
	КонецЦикла;                                        
	
	
	// *************************************
	
   	Таб.ВывестиСекцию("Голова");     

	

	ТЗ.ВыбратьСтроки();
	Пока ТЗ.ПолучитьСтроку() = 1 do
		Ном=Ном+1;     
		
		
		ПолучитьСтрокуПоНомеру(ТЗ.Поз);		
		Если ГрТкод<>Лев(Товар.ТамКод.Код,4) Тогда
			//Таб.ВывестиСекцию("ТамГруппа");	
			ТКБрутто = 0;
			ТКНетто = 0;   
			ТкСумма = 0;
			ГрТкод=Лев(Товар.ТамКод.Код,4);
		КонецЕсли;
		
		//ПолучитьСтрокуПоНомеру(ТЗ.Поз);
		// Расчет нето веса товара
		// **************************************
		// Если продаем в кг - делать нефиг
		Если Единица <> Перечисление.ЕдиницыИзмерения.Килограмм Тогда  
			
			СпрЦены.ИспользоватьВладельца(Товар);
			
			Если СпрЦены.НайтиПоРеквизиту("Единица",Перечисление.ЕдиницыИзмерения.Килограмм,0) = 0 Тогда
				Сообщить("Нет коеффициента пересчета в КГ: "+Товар);
				НетоВесСтроки = 0; 
				НетоВесПозиции = 0;
			Иначе
				НетоВесСтроки = Окр(Количество / СпрЦены.Коэффициент,2); 
				НетоВесПозиции = 1 / СпрЦены.Коэффициент; 
			КонецЕсли; 
		Иначе
			НетоВесСтроки = Количество;        
			НетоВесПозиции = 1;
		КонецЕсли;
		
		ТКНетто = ТКНетто +  НетоВесСтроки;
		// Расчет количества мест                
		// **************************************
		Если Товар.ЛогистикаКолВУпаковке=0 Тогда
			Сообщить("Не указано количество в упаковке: "+Товар);
			Мест=0;
		Иначе
			Мест = Цел(Количество/Товар.ЛогистикаКолВУпаковке)+?(Цел(Количество/Товар.ЛогистикаКолВУпаковке)*Товар.ЛогистикаКолВУпаковке=Количество, 0, 1);
		Конецесли; 
		
		
		// Бруто вес всего
		// Вес места (МастерКартон)
		Если Товар.ЛогистикаВесБруттоУпаковки=0 Тогда
			Сообщить("Не указан вес упаковки: "+Товар);
			ВесУпаковки=0;
		Иначе
			ВесУпаковки = Товар.ЛогистикаВесБруттоУпаковки;
		Конецесли; 

		// Товарной упаковки (коробки, банки или вакуумиа)
		Если Товар.Вес=0 Тогда
			//Сообщить("Не указан Бруто вес : "+Товар);
			ВесТовара=0;
		Иначе
			ВесТовара = Товар.Вес;
		Конецесли; 

		БрутоВесСтроки = Окр(Мест * ВесУпаковки + Количество * Товар.Вес + НетоВесПозиции * Количество,2);
		
		ТКБрутто = ТКБрутто + БрутоВесСтроки;      
		
		ТкСумма = ТкСумма + ?(Константа.СуммаВключаетНДС.Получить(ДатаДок)=Перечисление.Булево.Да,Строка(Сумма-НДС),Сумма);
		
		
		// Переводим ЕИ    
		
		Если СпрПеЕИ.НайтиПоРеквизиту("ЕИ",Единица.Единица,0)=0 Тогда
			Сообщить("Не найден перевод ЕИ "+Единица);
		КонецЕсли;      
		
		// Переводим ВУ    
		
		Если СпрПеВУ.НайтиПоРеквизиту("ВУ",Товар.ЛогистикаВидУпаковки,0)=0 Тогда
			Сообщить("Не найден перевод ВУ "+Единица);
		КонецЕсли;		
		
		ГТБруто = ГТБруто + БрутоВесСтроки;
		ГТНето = ГТНето + НетоВесСтроки;
		ГТКартон = ГТКартон + Мест;		
				
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;
	
	//Таб.ВывестиСекцию("ТамГруппа");	
	ТКБрутто = 0;
	ТКНетто = 0;  
	ТкСумма = 0;
	ГрТкод=Лев(Товар.ТамКод.Код,4);
	
	// Пересчет в ЛС если документ не в ЛС  
	
	ВалЛС = СоздатьОбъект("Справочник.Валюты");
	ВалЛС.НайтиПоНаименованию("LVL",0,0);
	
	Если ВалЛС.ТекущийЭлемент()<>Валюта Тогда
		Вал = ?(Константа.СуммаВключаетНДС.Получить(ДатаДок)=Перечисление.Булево.Да,Итог("Сумма")-Итог("НДС"),Итог("Сумма"));
		ЛС = "LVL: "+Формат(Пересчет(Вал,Валюта,ДатаДок,ВалЛС.ТекущийЭлемент(),ДатаДок),"Ч14.2")+" ("+Формат(Курс,"Ч1.3")+")";
	Иначе
		ЛС = "";
	КонецЕсли;
	
	

	Таб.ВывестиСекцию("Ноги");   
	Таб.Показать("Инвойс");	
	
КонецПроцедуры 



// *************************************************************************
Процедура Печать()
	Если Число( ДатаПоставки ) = 0 Тогда
		Предупреждение( "Не выбрана дата поставки !!!" );
		Возврат;
	КонецЕсли;
	Фирма.ИспользоватьДату(ДатаДок);     
	              
	Если Клиент.Страна<>Константа.СтранаРезидент Тогда
		спис=СоздатьОбъект("СписокЗначений"); 
		спис.Установить("Экспортный вариант",1);
		спис.Установить("Печать LV",2);
		зн=0;
		Если спис.ВыбратьЗначение(зн,,,,1)=1 Тогда
		    Если зн=1 Тогда
        	    ПечатьЭкспорта();
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПросроченоДней=0;
	
	Взаиморасчеты();

	Таб=СоздатьОбъект("Таблица");
	Если БН=Перечисление.Булево.Да Тогда
		Таб.ИсходнаяТаблица("БНакл");
	Иначе
		Таб.ИсходнаяТаблица("Таблица1");
	КонецЕсли;

	ОснДок="";
	Если ДокументОснование.Выбран()=1 Тогда
	    ОснДок=Шаблон("Pamat.: [ДокументОснование.НомерДок] no [ДокументОснование.ДатаДок]");
		ОснованиеДоп=ДокументОснование.Основание;
	КонецЕсли;
	        
	ДопТекст="Kods";
	НомерНакл = НомерДок;

	Если ПризнакНакладной=Перечисление.ПризнРасхНакл.КредитнаяНота Тогда
		
		Таб.ИсходнаяТаблица("КредитнаяНота");
		Таб.ВывестиСекцию("Шапка");
		
		Таб.Опции(0,0,0,0,ПарСтрДок);
		Таб.ПараметрыСтраницы(1,100,,20,15,10,10,,,1);
		Таб.Защита(Константа.ФлагЗащитыТаблиц);
		Таб.ТолькоПросмотр(1);
		Таб.Показать("Kreditu nota: "+НомерДок,"");
		Возврат;
	ИначеЕсли ПризнакНакладной=Перечисление.ПризнРасхНакл.Переработка Тогда
    	Назв="Uz pўrstrўdi";
		Оплата="";
	ИначеЕсли (ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратПоставщику) ИЛИ (ПризнакНакладной=Перечисление.ПризнРасхНакл.ЭкспортныйВозврат) Тогда
    	Назв="Atgrieєana";
		Оплата=Шаблон("Apmaksўt l®dz: [ДатаОплаты]   ar pўrskait®jumu");
		Таб.ИсходнаяТаблица("Возврат");
		Если НаАлкоголь=1 Тогда
		    ДопТекст="Akc®zes marka";
		КонецЕсли;
	Иначе
		Назв="Pavadz®me";
		Оплата=Шаблон("Apmaksўt l®dz: [ДатаОплаты]   ar pўrskait®jumu");
	КонецЕсли;

// Получим строку с номерами сертификатов
	НомераСертификатов=СформироватьСтрокуСертификатов(Контекст);
// Сформируем печать скидки
	СпецОтм="";
                            
	Если (Итог("Скидка")=0) ИЛИ ((ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратПоставщику) ИЛИ (ПризнакНакладной=Перечисление.ПризнРасхНакл.ЭкспортныйВозврат)) Тогда
 	 	СекцияСкидка="БезСкидки";
	Иначе
	 	СекцияСкидка="СоСкидкой";
	КонецЕсли;
	
	Таб.ВывестиСекцию("Шапка|Основная");
	Таб.ПрисоединитьСекцию("Шапка|"+СекцияСкидка);
	
	//кСуммаВключаетНДС = Константа.СуммаВключаетНДС.Получить( ДатаДок );
	//табл = СоздатьОбъект( "ТаблицаЗначений" );
	//ВыгрузитьТабличнуюЧасть( табл, "Товар,Единица,Количество,Коэффициент,Цена,Сумма,НДС,Скидка" );
	//табл.Свернуть( "Товар,Единица,Количество,Коэффициент,Цена", "Сумма,НДС,Скидка" );
	//табл.ВыбратьСтроки();
	//Пока табл.ПолучитьСтроку() = 1 Цикл
	//	пНом = табл.НомерСтроки;
	//	пШтрихКод = ?( табл.Товар.ШтрихКод = 0, "", табл.Товар.ШтрихКод );
	//	пУслХранения = табл.Товар.УсловияХранения;
	//	пКод = табл.Товар.Код;
	//	пТовар = табл.Товар.Наименование;
	//	пЕдиница = табл.Единица;
	//	пКол = табл.Количество;
	//	пЦенаПоКатегории = ЦенаТовараПоКатегорииДляТовара( табл.Товар, КатегорияЦены,,, ДатаДок ) * табл.Коэффициент;
	//	пСумма = ?( кСуммаВключаетНДС = Да, табл.Сумма - табл.НДС + табл.Скидка, табл.Сумма + табл.Скидка );
	//	пЦенаСоСкидкой = Окр( табл.Цена * табл.Коэффициент, ?( Клиент.флОкруглениеЦен = 1, Клиент.ЦеныОкруглятьДо, 5 ) );
	//	пСуммаСоСкидкой = ?( кСуммаВключаетНДС = Да, табл.Сумма - табл.НДС, табл.Сумма );
	//	Таб.ВывестиСекцию("Строка2|Основная");
	//	Таб.ПрисоединитьСекцию("Строка2|"+СекцияСкидка);
	//КонецЦикла;
	
	ВыбратьСтроки();
	Ном=0;
	Пока ПолучитьСтроку() = 1 do
		Ном=Ном+1;
		
		Если НаАлкоголь=1 Тогда
			ДопТекстТовар=АкцизнаяМарка;
		Иначе
			ДопТекстТовар=Товар.Код;
		КонецЕсли;
		
		Если Клиент.флОкруглениеЦен=1 Тогда
			Цена_=Окр(Цена*Коэффициент,Клиент.ЦеныОкруглятьДо);
		Иначе
			Цена_=Окр(Цена*Коэффициент,5);
		КонецЕсли;
		
		Таб.ВывестиСекцию("Строка|Основная");
		Таб.ПрисоединитьСекцию("Строка|"+СекцияСкидка);
		
		Если 1=2 Тогда //Отключено
			//Если Товар.ВидТовара=Перечисление.ВидыТоваров.Комплект Тогда
			Таб.ВывестиСекцию("ВСоставе|Основная");
			Таб.ПрисоединитьСекцию("ВСоставе|"+СекцияСкидка);
			
			Кмп=СоздатьОбъект("Справочник.Комплектация");
			Кмп.ИспользоватьВладельца(Товар);
			Кмп.ВыбратьЭлементы();
			Пока Кмп.ПолучитьЭлемент()>0 Цикл
				Таб.ВывестиСекцию("Состав|Основная");
				Таб.ПрисоединитьСекцию("Состав|"+СекцияСкидка);
			КонецЦикла;
			Кмп=0;
		КонецЕсли;
	КонецЦикла;

	Таб.ВывестиСекцию("Итог|Основная");
	Таб.ПрисоединитьСекцию("Итог|"+СекцияСкидка);

	Если  (Итог("Скидка")=0) ИЛИ ((ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратПоставщику) ИЛИ (ПризнакНакладной=Перечисление.ПризнРасхНакл.ЭкспортныйВозврат)) Тогда
	Иначе
	КонецЕсли;
	
	пСтавкаНДС = ""+СтавкаНДС + семРасшСтавкиНДС();
	Таб.ВывестиСекцию("Подвал|Основная");
	Таб.ПрисоединитьСекцию("Подвал|"+СекцияСкидка);
	
	Если ФлТары=1 Тогда
   		Тов=СоздатьОбъект("Справочник.Номенклатура");
		Тов.ИспользоватьДату(ДатаДок);
   		Тов.НайтиПоНаименованию("Tara");
   		Если Тов.Выбран()=1 Тогда
   			ГруппаТара=Тов.ТекущийЭлемент();
   			Если ГруппаТара.ЭтоГруппа()=1 Тогда
				Таб.ВывестиСекцию("ВозвТара|Основная");
				Таб.ПрисоединитьСекцию("ВозвТара|"+СекцияСкидка);
   				
				Тов.ВключатьПодчиненные(0);
				Тов.ИспользоватьРодителя(ГруппаТара);
				Тов.ВыбратьЭлементы();
				НПП=1;
				Пока Тов.ПолучитьЭлемент()>0 Цикл
					ВозвТара=Тов.Наименование;
					ЦенаТары=Тов.Розн_Цена;
					Таб.ВывестиСекцию("СтрокаТара|Основная");
					Таб.ПрисоединитьСекцию("СтрокаТара|"+СекцияСкидка);
	   					
					НПП=НПП+1;
				КонецЦикла;

				Таб.ВывестиСекцию("ВсегоТара|Основная");
				Таб.ПрисоединитьСекцию("ВсегоТара|"+СекцияСкидка);
				
   			КонецЕсли;
   		КонецЕсли;
 	КонецЕсли;
	   	
	Таб.ВывестиСекцию("Подвал1|Основная");
	Таб.ПрисоединитьСекцию("Подвал1|"+СекцияСкидка);
	 	
	Если (ФлДосье=1)  Тогда
		ТекСтрока=ДосьеКлиентаПоКредиту(Контекст);
		Если ТекСтрока<>"" Тогда
			Зн=Найти(ТекСтрока,"@");
			ДосьеКлиент=Лев(ТекСтрока,Зн-1);
			ТекСтрока=Сред(ТекСтрока,Зн+1);
			Зн=Найти(ТекСтрока,"@");
			ДосьеДолг=Лев(ТекСтрока,Зн-1);
			ТекСтрока=Сред(ТекСтрока,Зн+1);
			Зн=Найти(ТекСтрока,"@");
			ДосьеСрДолг=Лев(ТекСтрока,Зн-1);
			ДосьеОстаток=Сред(ТекСтрока,Зн+1);
			Таб.ВывестиСекцию("Досье|Основная");
			Таб.ПрисоединитьСекцию("Досье|"+СекцияСкидка);
		КонецЕсли;
	КонецЕсли;                

 	//Вывод дополнительной по просроченным долгам
	Если ПросроченоДней>0 Тогда 

		 ТекСтрока=ДосьеКлиентаПоКредиту(Контекст);
		 Если ТекСтрока<>"" Тогда
			Зн=Найти(ТекСтрока,"@");
			ДосьеКлиент=Лев(ТекСтрока,Зн-1);
			ТекСтрока=Сред(ТекСтрока,Зн+1);
			Зн=Найти(ТекСтрока,"@");
			ДосьеДолг=Лев(ТекСтрока,Зн-1);
			ТекСтрока=Сред(ТекСтрока,Зн+1);
			Зн=Найти(ТекСтрока,"@");
			ДосьеСрДолг=Лев(ТекСтрока,Зн-1);
			ДосьеОстаток=Сред(ТекСтрока,Зн+1);
		КонецЕсли;

		ДатаБлок=Дата(РабочаяДата()+(Константа.ОгрПросроченногоДолга.Получить(ДатаДок)-ПросроченоДней));
		
		ИнфПросроченныйДолг="Parўda nesamaksўєanas gad®jumў no "+ДатаБлок+" tiek blo°§ta preces izsniegєana uz kred®tu. ";
		ИнфПросроченныйДолг2="Dotie nor§°ini tiek veikti automўtiski.";
		Таб.ВывестиСекцию("ПросроченныйДолг|Основная");
		Таб.ПрисоединитьСекцию("ПросроченныйДолг|"+СекцияСкидка);

	КонецЕсли;
         
	Если (ФлИнф=1) Тогда
		Таб.ВывестиСекцию("ДопИнформация|Основная");
		Таб.ПрисоединитьСекцию("ДопИнформация|"+СекцияСкидка);
	КонецЕсли;
	
	Таб.Опции(0,0,0,0,ПарСтрДок);
	Таб.ПараметрыСтраницы(1,100,,10,5,5,10,20,20,1);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("PPR (Kredit): "+НомерДок,"");
КонецПроцедуры 

Процедура ПечатьСоСроками()    
	Если Число( ДатаПоставки ) = 0 Тогда
		Предупреждение( "Не выбрана дата поставки !!!" );
		Возврат;
	КонецЕсли;
	ПросроченоДней=0;
	
	Взаиморасчеты();
	
	ОснДок="";
	Если ДокументОснование.Выбран()=1 Тогда
		ОснДок=Шаблон("Pamat.: [ДокументОснование.НомерДок] no [ДокументОснование.ДатаДок]");    
		ОснованиеДоп=ДокументОснование.Основание;
	КонецЕсли;
	
	Рег=СоздатьОбъект("Регистр.ПартииТоваров");
	Фирма.ИспользоватьДату(ДатаДок);
	Таб=СоздатьОбъект("Таблица");
	Если Итог("Скидка")=0  Тогда
		Таб.ИсходнаяТаблица("Таблица2");
	Иначе
		Таб.ИсходнаяТаблица("Таблица3");
	КонецЕсли;
	// Получим строку с номерами сертификатов
	НомераСертификатов=СформироватьСтрокуСертификатов(Контекст);
	СпецОтм="";
	ПечСумСкидки="Atlaide (-)";
	НомерНакл = НомерДок;
	
	Если ПризнакНакладной=Перечисление.ПризнРасхНакл.Переработка Тогда
		Назв="Uz pўrstrўdi";
		Оплата="";
	Иначе
		Назв="Pavadz®me";
		Оплата=Шаблон("Apmaksўt l®dz: [ДатаОплаты]  ar pўrskait®jumu");
	КонецЕсли;
	
	Таб.ВывестиСекцию("Шапка");
	
	ТЗ=СоздатьОбъект("ТаблицаЗначений");
	ТЗ.НоваяКолонка("НомСтр","Число");
	ТЗ.НоваяКолонка("Товар","Справочник.Номенклатура");
	ТЗ.НоваяКолонка("Количество","Число",17,3);
	ТЗ.НоваяКолонка("Стоимость","Число",17,5);
	ТЗ.НоваяКолонка("СрокРеализ","Дата");
	
	Рег.ВыбратьДвиженияДокумента(ТекущийДокумент());
	Пока Рег.ПолучитьДвижение()>0 Цикл
		
		ТЗ.НоваяСтрока();
		ТЗ.НомСтр=Рег.НомерСтроки();
		ТЗ.Товар=Рег.Товар;
		ТЗ.Количество=?(Рег.Приход=1,-Рег.ОстатокТовара,Рег.ОстатокТовара);
		ТЗ.Стоимость=?(Рег.Приход=1,-Рег.Стоимость,Рег.Стоимость);
		ТЗ.СрокРеализ=Рег.СрокРеализации;
	КонецЦикла;
		    
	//ТЗ.Свернуть("Товар,СрокРеализ","Количество,Стоимость");
	ТЗ.Свернуть("НомСтр,СрокРеализ","Количество,Стоимость");

	
	ВыбратьСтроки();
	Ном=0;
	Пока ПолучитьСтроку() = 1 Цикл
		
		Если (Товар.ВидТовара<>Перечисление.ВидыТоваров.Услуга) Тогда
			          
			Если Клиент.флОкруглениеЦен=1 Тогда
			    Цена_=Окр(Цена*Коэффициент,Клиент.ЦеныОкруглятьДо);
			Иначе
				Цена_=Окр(Цена*Коэффициент,5);
			КонецЕсли;

			ТЗ.ВыбратьСтроки();
			Пока ТЗ.ПолучитьСтроку()=1 Цикл
				//Если ТЗ.Товар<>Товар Тогда
				//    Продолжить;
				//КонецЕсли;
				Если ТЗ.НомСтр<>НомерСтроки Тогда
				    Продолжить;
				КонецЕсли;
			                  
				Если Единица.Единица<>Товар.БазоваяЕдиницаИзмерения Тогда
					ТекКол=Окр(ТЗ.Количество/Коэффициент,3);
				Иначе
					ТекКол=ТЗ.Количество;
				КонецЕсли;
				СрокРеализ=ТЗ.СрокРеализ;
				
//				ШтрихКод=глПолучитьШтрихКод(Контекст,"СрокРеализации",СрокРеализ);
				ШтрихКод=Товар.ШтрихКод;
	//				ШтрихКод=Рег.Партия.ШтрихКод;
				
				Ном=Ном+1;
				Таб.ВывестиСекцию("Строка");
			КонецЦикла;
		Иначе          
			
			Если Клиент.флОкруглениеЦен=1 Тогда
			    Цена_=Окр(Цена*Коэффициент,Клиент.ЦеныОкруглятьДо);
			Иначе
				Цена_=Окр(Цена*Коэффициент,5);
			КонецЕсли;
			
			ТекКол=Количество;
			СрокРеализ="";
			ШтрихКод=Товар.ШтрихКод;
			Таб.ВывестиСекцию("Строка");
		КонецЕсли;
	КонецЦикла;
	пСтавкаНДС = ""+СтавкаНДС + семРасшСтавкиНДС();
	Таб.ВывестиСекцию("Подвал");
	Если ФлТары=1 Тогда
		Тов=СоздатьОбъект("Справочник.Номенклатура");
		Тов.ИспользоватьДату(ДатаДок);
		Тов.НайтиПоНаименованию("Tara");
		Если Тов.Выбран()=1 Тогда
			ГруппаТара=Тов.ТекущийЭлемент();
			Если ГруппаТара.ЭтоГруппа()=1 Тогда
				Таб.ВывестиСекцию("ВозвТара");
				Тов.ВключатьПодчиненные(0);
				Тов.ИспользоватьРодителя(ГруппаТара);
				Тов.ВыбратьЭлементы();
				НПП=1;
				Пока Тов.ПолучитьЭлемент()>0 Цикл
					ВозвТара=Тов.Наименование;
					ЦенаТары=Тов.ЦенаТовараПоКатегорииДляТовара(Тов,КатегорияЦены,Валюта,Дата_курса);
					Таб.ВывестиСекцию("СтрокаТара");
					НПП=НПП+1;
				КонецЦикла;
				Таб.ВывестиСекцию("ВсегоТара");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	пСтавкаНДС = ""+СтавкаНДС + семРасшСтавкиНДС();
	Таб.ВывестиСекцию("Подвал1");
	Если ФлДосье=1 Тогда
		ТекСтрока=ДосьеКлиентаПоКредиту(Контекст);
		Если ТекСтрока<>"" Тогда
			Зн=Найти(ТекСтрока,"@");
			ДосьеКлиент=Лев(ТекСтрока,Зн-1);
			ТекСтрока=Сред(ТекСтрока,Зн+1);
			Зн=Найти(ТекСтрока,"@");
			ДосьеДолг=Лев(ТекСтрока,Зн-1);
			ТекСтрока=Сред(ТекСтрока,Зн+1);
			Зн=Найти(ТекСтрока,"@");
			ДосьеСрДолг=Лев(ТекСтрока,Зн-1);
			ДосьеОстаток=Сред(ТекСтрока,Зн+1);
			Таб.ВывестиСекцию("Досье");
		КонецЕсли;
	КонецЕсли;
	
	//Вывод дополнительной по просроченным долгам
	Если ПросроченоДней>0 Тогда 
		
		ТекСтрока=ДосьеКлиентаПоКредиту(Контекст);
		Если ТекСтрока<>"" Тогда
			Зн=Найти(ТекСтрока,"@");
			ДосьеКлиент=Лев(ТекСтрока,Зн-1);
			ТекСтрока=Сред(ТекСтрока,Зн+1);
			Зн=Найти(ТекСтрока,"@");
			ДосьеДолг=Лев(ТекСтрока,Зн-1);
			ТекСтрока=Сред(ТекСтрока,Зн+1);
			Зн=Найти(ТекСтрока,"@");
			ДосьеСрДолг=Лев(ТекСтрока,Зн-1);
			ДосьеОстаток=Сред(ТекСтрока,Зн+1);
		КонецЕсли;
		
		ДатаБлок=Дата(РабочаяДата()+(Константа.ОгрПросроченногоДолга.Получить(ДатаДок)-ПросроченоДней));
		
		ИнфПросроченныйДолг="Parўda nesamaksўєanas gad®jumў no "+ДатаБлок+" tiek blo°§ta preces izsniegєana uz kred®tu. ";
		ИнфПросроченныйДолг2="Dotie nor§°ini tiek veikti automўtiski.";
		Таб.ВывестиСекцию("ПросроченныйДолг");
	КонецЕсли;
	
	
	Если (ФлИнф=1) Тогда
		Таб.ВывестиСекцию("ДопИнформация");
	КонецЕсли;
	
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Опции(0,0,0,0,ПарСтрДок);
	Таб.ПараметрыСтраницы(1,100,,10,5,3,10,20,20,1);
	Таб.Показать("PPR (Kredit): "+НомерДок,"");
КонецПроцедуры
//***********************************************************
//<<Алгоритм Успеха>> (begin)
//                                                            
//_____________________________________________________________________________

Процедура семПечатьИнвойса( пЯзык, НомерФормы=15, СоСроками=0 )
	// 15 - обычная печать, с суммами без ШК и без сроков
	// 16 - сумма, ШК
	// 17 - сумма, ШК, сроки
	// 18 - без суммы, ШК и сроков
	сп = СоздатьОбъект( "СписокЗначений" );
	Если (НомерФормы=16) или (НомерФормы=17) Тогда
		сп.Установить( "ШтрихКод", "Да");
	Иначе
		сп.Установить( "ШтрихКод", "Нет");
	КонецЕсли;
	Если (НомерФормы = 17) ИЛИ (СоСроками=1) Тогда
		сп.Установить( "ПечСрокиРеализ", "Да");
	Иначе
		сп.Установить( "ПечСрокиРеализ", "Нет");
	КонецЕсли;
	Если НомерФормы = 18 Тогда
		сп.Установить( "БезСумм", 1 );
	Иначе
		сп.Установить( "БезСумм", 0 );
	КонецЕсли;
	сп.Установить( "Документ", ТекущийДокумент() );
	сп.Установить( "Язык", пЯзык );
	
	ОткрытьФорму( "Отчет", сп, КаталогИБ() + "ExtForms\Печать\инвойс.ert" );
КонецПроцедуры

Процедура семПечатьУпаковки()
	сп = СоздатьОбъект( "СписокЗначений" );
	сп.Установить( "Документ", ТекущийДокумент() );
	ОткрытьФорму( "Отчет", сп, КаталогИБ() + "ExtForms\Печать\ПечатьУпаковки.ert" );
КонецПроцедуры

Процедура семПечатьLT(пСроки,пНомер)
	сп = СоздатьОбъект( "СписокЗначений" );
	Если (Итог("Скидка")=0) ИЛИ ((ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратПоставщику) ИЛИ (ПризнакНакладной=Перечисление.ПризнРасхНакл.ЭкспортныйВозврат)) Тогда
		сп.Установить( "Скидки", 0 );
	Иначе
		сп.Установить( "Скидки", 1 );
	КонецЕсли;
	сп.Установить( "Документ", ТекущийДокумент() );
	сп.Установить( "Сроки", пСроки );
	сп.Установить( "Язык", "Лит" );
	сп.Установить( "Номер", пНомер );
	сп.Установить( "Наловая", 0 );
	ОткрытьФорму( "Отчет", сп, КаталогИБ() + "ExtForms\Печать\ПечатьНакладнойLT.ert" );
КонецПроцедуры

Процедура семПечатьEE(пСроки,пНомер)
	сп = СоздатьОбъект( "СписокЗначений" );
	Если (Итог("Скидка")=0) ИЛИ ((ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратПоставщику) ИЛИ (ПризнакНакладной=Перечисление.ПризнРасхНакл.ЭкспортныйВозврат)) Тогда
		сп.Установить( "Скидки", 0 );
	Иначе
		сп.Установить( "Скидки", 1 );
	КонецЕсли;
	сп.Установить( "Документ", ТекущийДокумент() );
	сп.Установить( "Сроки", пСроки );
	сп.Установить( "Язык", "Лит" );
	сп.Установить( "Номер", пНомер );
	сп.Установить( "Наловая", 0 );
	ОткрытьФорму( "Отчет", сп, КаталогИБ() + "ExtForms\Печать\ПечатьНакладнойEE.ert" );
КонецПроцедуры

Процедура семПечатьВозврат()
	Путь = КаталогИБ() + "ExtForms\Печать\ВозвратПоставщику.ert";
	спПарам = СоздатьОбъект( "СписокЗначений" );
	спПарам.Установить( "Документ", контекст );
	ОткрытьФорму( "Обработка", спПарам, Путь );
КонецПроцедуры

Процедура ВыслатьПоЭлектроннойПочте()
	СписокДок=СоздатьОбъект("СписокЗначений");
	СписокДок.ДобавитьЗначение(ТекущийДокумент());
	СпПар = СоздатьОбъект("СписокЗначений");
	СпПар.Установить("ВидОперации","Отправка");
	СпПар.Установить("СписокДок",СписокДок);
	ОткрытьФорму("Обработка",СпПар,КаталогИБ()+"ExtForms\EDI-Export.ert");
КонецПроцедуры

Процедура семПечать()
	Если Выбран() = 0 Тогда 
		Сообщить("Ошибка печати накладной.","!");
		Сообщить("Можно печатать только записанную накладную.","I");
		Возврат; 
	КонецЕсли;
	Если Проведен() = 0 Тогда 
		Сообщить("Ошибка печати накладной.","!");
		Сообщить("Нельзя печатать непроведенную накладную.","I");
		Возврат; 
	КонецЕсли;
	сп = СоздатьОбъект( "СписокЗначений" ); 
	Если семТекСтрана() = "LV" Тогда
		Если Найти(Строка(ПризнакНакладной),"Возврат")>0 Тогда
			Путь = КаталогИБ() + "ExtForms\Печать\ВозвратПоставщику.ert";
			Если ФС.СуществуетФайл( Путь ) = 1 Тогда 
				сп.Установить( "Печать возврата ( LV )", 13 );
			КонецЕсли;
			сп.Установить( "Печать ( EN )", 15 );
		Иначе
			сп.Установить( "Печать ( LV )", 1 );          
			Путь = КаталогИБ() + "ExtForms\Печать\ПечатьНакладнойLV.ert";
			//Если ФС.СуществуетФайл( Путь ) = 1 Тогда 
			//	сп.Установить( "Печать ( LV ) (на бланк)", 2 );
			//КонецЕсли;
			
//			сп.Установить( "Печать ( EN )", 15 );
			сп.Установить( "Печать ( EN ) (штрих-код)", 16 );
			сп.Установить( "Печать ( EN ) (штрих-код со сроками)", 17 );
			сп.Установить( "Печать ( EN ) без сумм", 18 );
			сп.Установить( "Печать ( RU )", 4 );
			сп.Установить( "Печать ( RU ) (со сроками)", 5 );
			сп.Установить( "Печать упаковки", 9 );
		КонецЕсли;
		
	КонецЕсли;
	
	Если (семТекСтрана() = "LT") ИЛИ (Клиент.Страна.Код="LT") Тогда
		//сп.Установить( "Печать ( LT )", 5 );
		сп.Установить( "Печать ( LT ) со сроками", 6 );
		// ANNASID
		сп.Установить( "Печать ( LT ) без сроков", 7 );
		//сп.Установить( "Печать ( LT ) без скидки", 7 );
		//сп.Установить( "Печать ( LT ) с номером", 8 );
		// ANNASID
		
		Если семТекСтрана() <> "LV" Тогда 
			сп.Установить( "Печать ( EN )", 15 );
		КонецЕсли;
	КонецЕсли;
	
	Если (семТекСтрана() = "EE") ИЛИ (Клиент.Страна.Код="EE") Тогда
		сп.Установить( "Печать ( EE ) со сроками", 10 );
//		сп.Установить( "Печать ( EE ) без скидки", 11 );
		сп.Установить( "Печать ( EE ) без сроков", 11 );
		Если семТекСтрана() <> "LV" Тогда 
			сп.Установить( "Печать ( EN )", 15 );
			сп.Установить( "Печать ( EN ) без сумм", 18 );
			сп.Установить( "Печать ( EN ) (штрих-код)", 16 );
			сп.Установить( "Печать ( EN ) (штрих-код со сроками)", 17 );
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(КлГруппа.ECOD)=1 Тогда
		сп.Установить( "Отправка по электронной почте", 14 );
	КонецЕсли;	
	
	Если ТекущийДокумент().КлГруппа.ФорматОбмена = Перечисление.ФорматыОбмена.TELEMASELVER Тогда
		сп.Установить( "Отправка в ТЕЛЕМА", 20 );
	КонецЕсли;		
	
	
	зн = ""; Если сп.ВыбратьЗначение( зн ,,,, 1 ) = 0 Тогда Возврат; КонецЕсли;
	Если зн = 1 Тогда 
		//Печать();
		спПарам = СоздатьОбъект( "СписокЗначений" );
		спПарам.Установить( "Документ", контекст );
		спПарам.Установить( "Заголовок", 1 );
		спПарам.Установить( "ПечШтрихКод", 0 ); 
		спПарам.Установить( "ДопИнформ",?(ФлИнф=1,ДопИнформация.Информация,""));
		ОткрытьФорму( "Обработка", спПарам, Путь );
	ИначеЕсли зн = 2 Тогда 
		спПарам = СоздатьОбъект( "СписокЗначений" );
		спПарам.Установить( "Документ", контекст );
		спПарам.Установить( "Заголовок", 0 );
		спПарам.Установить( "ПечШтрихКод", 0 );                      
		спПарам.Установить( "ДопИнформ",?(ФлИнф=1,ДопИнформация.Информация,""));
		ОткрытьФорму( "Обработка", спПарам, Путь );
		
	ИначеЕсли (зн >= 15 ) и (зн <= 18) Тогда // англ
		семПечатьИнвойса( "Англ",зн);	
	//ИначеЕсли зн = 3 Тогда 
	//ИначеЕсли зн = 15 Тогда семПечатьИнвойса( "Англ",1 );
	ИначеЕсли зн = 4 Тогда семПечатьИнвойса( "Рус",,0 );
	ИначеЕсли зн = 5 Тогда семПечатьИнвойса( "Рус",,1 );
	ИначеЕсли зн = 6 Тогда семПечатьLT(1,0);
	ИначеЕсли зн = 7 Тогда семПечатьLT(0,0);
	//ИначеЕсли зн = 8 Тогда семПечатьLT(1,1); 
	ИначеЕсли зн = 9 Тогда семПечатьУпаковки();  
	ИначеЕсли зн = 10 Тогда семПечатьEE(1,0);
	ИначеЕсли зн = 11 Тогда семПечатьEE(0,0);
//	ИначеЕсли зн = 12 Тогда семПечатьEE(1,1);  
	ИначеЕсли зн = 13 Тогда семПечатьВозврат();  
	ИначеЕсли зн = 14 Тогда ВыслатьПоЭлектроннойПочте(); 
	ИначеЕсли зн = 20 Тогда
			Если ТекущийДокумент().КлГруппа.ФорматОбмена = Перечисление.ФорматыОбмена.TELEMASELVER Тогда
				СпПар = СоздатьОбъект("СписокЗначений");
				СпПар.Установить("Документ",ТекущийДокумент());
				ОткрытьФорму("Обработка",СпПар,КаталогИБ()+"ExtForms\TELEMA_DESADV.ert");
			КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

Процедура вопросПечать()
	Если Проведен()=0 Тогда
	    Печать();
		Возврат;
	КонецЕсли;  
	
	спис=СоздатьОбъект("СписокЗначений"); 
	спис.Установить("Печать",1);
	спис.Установить("Печать со сроками",2);
	зн=0;
	Если спис.ВыбратьЗначение(зн,,,,1)=1 Тогда
	    Если зн=1 Тогда
	        Печать();
		Иначе
			ПечатьСоСроками();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //вопросПечать
//<<Алгоритм Успеха>> (end) 
//************************************************************


Процедура семЗаполнитьПоСпискуЗаявок(сп)
	Если сп.РазмерСписка() = 0 Тогда 
		Сообщить( "Нет данных для заполнения." ); Возврат;
	Иначе
		промЗаявка = сп.ПолучитьЗначение( 1 );
	КонецЕсли;
	
	Автор = Пользователь;
	Фирма = Константа.ОсновнаяФирма;
	//Основание = "?????";
	IDD = ПолучитьУникальныйIDD();
	ТипУчета = промЗаявка.ТипУчета;
	ФинУчет = ?( ТипУчета > Упр, 1, 0 );
	
	ПризнакНакладной = Перечисление.ПризнРасхНакл.Продажа;
	ДатаДок = РабочаяДата();
	ДатаПоставки = промЗаявка.ДатаПоставки;
	
	Склад=промЗаявка.Склад;
	Дата_Курса=промЗаявка.Дата_Курса;
	Валюта=промЗаявка.Валюта;
	Курс=КурсДляВалюты( Валюта, Дата_Курса );
	Клиент=промЗаявка.Клиент;
	
    КатегорияЦены=промЗаявка.КатегорияЦены;
	
	//Агент = Клиент.Агент;
	Агент = семПолучитьАгента( Клиент );
	стар_Клиент = "";
	ВыборКлиента();  
	
	Если (промЗаявка.Клиент<>промЗаявка.КлиентФилиала) И (промЗаявка.Фирма<>Константа.ОсновнаяФирма) Тогда
	//проверяем если заявка на клиента филиала - тогда категорию цены не меняем 
	Иначе
	    КатегорияЦены=промЗаявка.КатегорияЦены;
	КонецЕсли;
	стар_Клиент = Клиент;
	Валюта_Прежн=Валюта;
	Курс_Прежн=Курс;
	
		
	
//	СкидкаНакл=промЗаявка.СкидкаНакл;
	
//	КатегорияЦены = промЗаявка.КатегорияЦены;
	//СтавкаНДС     = промЗаявка.СтавкаНДС;                       
	//Агент=промЗаявка.Агент;
	
	пОснование=ПеревестиНаГосЯзык("Счет")+" Nr. ";
	
	регРезервы = СоздатьОбъект( "Регистр.РезервыТоваров" );
	Если ПолучитьДатуТА()>ДатаДок Тогда
		регРезервы.ВременныйРасчет();
		РассчитатьРегистрыНа( ДатаДок+1 );
	КонецЕсли;
	Для н = 1 по сп.РазмерСписка() Цикл
		
		промЗаявка = сп.ПолучитьЗначение( н );
		пОснование = пОснование + СокрЛП(промЗаявка.НомерДок)+", ";
		промЗаявка.ВыбратьСтроки();
		Пока промЗаявка.ПолучитьСтроку()=1 Цикл
			Если промЗаявка.Товар.ВидТовара = Перечисление.ВидыТоваров.Услуга Тогда // услуги
				НоваяСтрока();
				КомплектовщикСчет = промЗаявка.Комплектовщик;
				Счет = промЗаявка;    
				Если ПустоеЗначение(ДокументОснование) = 1 Тогда
//					ДокументОснование = промЗаявка.ТекущийДокумент(); 
				КонецЕсли;
				Товар = промЗаявка.Товар; 
				ТовКод = Товар.Код;
				РознЦена = ЦенаТовараПоКатегории(Контекст,?(ПустоеЗначение(Счет.КлиентФилиала)=1,Счет.КатегорияЦены,КатегорияЦены),1);
				//Цена=Пересчет(промЗаявка.Цена,промЗаявка.Валюта,промЗаявка.Дата_Курса,Валюта,Дата_Курса);
				Количество=промЗаявка.Количество;
				Единица=промЗаявка.Единица;
				Коэффициент=промЗаявка.Коэффициент;
				//Выч_суммы_накл_сНП(Контекст,0,1);
				//Сумма=Пересчет(промЗаявка.Сумма,промЗаявка.Валюта,промЗаявка.Дата_Курса,Валюта,Дата_Курса);
				//Скидка=Пересчет(промЗаявка.Скидка,промЗаявка.Валюта,промЗаявка.Дата_Курса,Валюта,Дата_Курса);
				//ВидСкидки=промЗаявка.ВидСкидки;
				//НДС=Пересчет(промЗаявка.НДС,промЗаявка.Валюта,промЗаявка.Дата_Курса,Валюта,Дата_Курса);
				//Всего = Сумма + НДС;
				УстанЦеныРасх(Контекст,,0,?(ПустоеЗначение(Счет.КлиентФилиала)=1,Счет.КатегорияЦены,""));
				Продолжить;
			КонецЕсли;                                                                 
			
//			Если промЗаявка.Резерв=0 Тогда Продолжить; КонецЕсли;
			
			РезервПоСчету = регРезервы.Остаток( промЗаявка.Товар, промЗаявка, "РезервТовара" );
			Если РезервПоСчету > 0 Тогда
				НоваяСтрока();
				КомплектовщикСчет 	= промЗаявка.Комплектовщик;
				Счет 				= промЗаявка;   
				СкладТ 				= промЗаявка.Склад;
				Если ПустоеЗначение(ДокументОснование) = 1 Тогда
//					ДокументОснование = промЗаявка.ТекущийДокумент(); 
				КонецЕсли;				
				Товар=промЗаявка.Товар; 
				ТовКод   = Товар.Код;
				РознЦена = ЦенаТовараПоКатегории(Контекст,?(ПустоеЗначение(Счет.КлиентФилиала)=1,Счет.КатегорияЦены,КатегорияЦены),1);
				ЦенаПоЗаявке = Пересчет(промЗаявка.Цена,промЗаявка.Валюта,промЗаявка.Дата_Курса,Валюта,Дата_Курса);
				Цена = ЦенаПоЗаявке;
				Единица=промЗаявка.Единица;
				Коэффициент=промЗаявка.Коэффициент;
				Количество=Окр(РезервПоСчету/Коэффициент,?(Единица.ОкруглятьДоЦелых=Да,0,3));
				ПояснениеСкидки=промЗаявка.ПояснениеСкидки;
				//цены, установленные вручную сохраняются в базе филиала при вводе на основании заявки накладной\
				
				//в этом случае когда накладная выписывается на клиента как фирму, оформившую заявку цены пересчитываем согласно условиям
				//в случае, когда заявка оформлена на конечного клиента - цены введенные вручную сохраняем
				Если (промЗаявка.ВидСкидки = Перечисление.ВидСкидки.Документ) И ((промЗаявка.Клиент <> промЗаявка.КлиентФилиала) И (промЗаявка.Фирма <> Константа.ОсновнаяФирма)) Тогда
					//рассчитываем суммы по новой, т.к. заявка для филиала
					УстанЦеныРасх(Контекст,,0,?(ПустоеЗначение(Счет.КлиентФилиала)=1,Счет.КатегорияЦены,""));
					//корректируем цену на филиал, чтобы она не была выше чем цена конечному клиенту
					Если ЦенаПоЗаявке<Цена Тогда
						Цена = ЦенаПоЗаявке;
						Выч_суммы_накл_сНП(Контекст,0,1,?(ПустоеЗначение(Счет.КлиентФилиала)=1,Счет.КатегорияЦены,""));
					КонецЕсли;

				ИначеЕсли (промЗаявка.ВидСкидки = Перечисление.ВидСкидки.Документ)  Тогда
					// не рассчитываем сумму для заявок введенных для местных клиентов
					Выч_суммы_накл_сНП(Контекст,0,1,?(ПустоеЗначение(Счет.КлиентФилиала)=1,Счет.КатегорияЦены,""));
				Иначе
					УстанЦеныРасх(Контекст,,0,?(ПустоеЗначение(Счет.КлиентФилиала)=1,Счет.КатегорияЦены,""));
				КонецЕсли;
				//Выч_суммы_накл(Контекст);
				//Скидка=Пересчет(промЗаявка.Скидка,промЗаявка.Валюта,промЗаявка.Дата_Курса,Валюта,Дата_Курса);
				//ВидСкидки=промЗаявка.ВидСкидки;
				//Всего = Сумма + НДС;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	пОснование = Лев(пОснование,СтрДлина(пОснование)-2);
	Основание = пОснование;
	ПриОкончанииРедактированияСтроки();
	ПересчетЦен();
	регРезервы = 0;      
	
	
КонецПроцедуры

Процедура семУстановитьВалюту( флКопирования )
	Если флКопирования = 0 Тогда
		Валюта = Константа.ОсновнаяВалютаПродажи;
	КонецЕсли;
	Дата_Курса = ДатаДок;
	Курс = КурсДляВалюты( Валюта, Дата_Курса );
	Валюта_Прежн = Валюта;
	Курс_Прежн = Курс;
КонецПроцедуры

Процедура ВводНового( флКопирования )    
	//Можно вводить только на основании электронной заявки   
	ЗаполнитьШапку(Контекст); //заполняем обязательные реквизиты в любом случае
	семУстановитьВалюту( флКопирования );
	Если флКопирования = 1 Тогда Возврат; КонецЕсли;
	
	Если ТипЗначенияСтр( Форма.Параметр ) = "СписокЗначений" Тогда
		сп = Форма.Параметр;
		семЗаполнитьПоСпискуЗаявок(сп); Возврат;
	КонецЕсли;   

	ДатаДок=РабочаяДата();
	ДатаПоставки = ДатаДок;
	Склад=Константа.ОсновнойСклад;
	Клиент=Константа.ОсновнойПокупатель;
	ВыборКлиента("Новый");
	ИспользоватьНП = Нет;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	КатегорияЦены = Константа.ОсновнаяКатегорияЦены;
	СтавкаНДС     = Константа.ОсновнаяСтавкаНДС;		
	Если ПустоеЗначение( Форма.Параметр ) = 0 Тогда        
		ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа;
	Иначе	     
		//Предупреждение("Можно вводить только на основании электронной заявки");
//		Если семЕстьПраво("Документ","РасходнаяНакладная","КредитнаяНота")=1 Тогда
//			ПризнакНакладной = Перечисление.ПризнРасхНакл.КредитнаяНота;
//		Иначе
			Предупреждение("Кредитные ноты выписываются через документ Счет-фактура!");
			СтатусВозврата(0);
//		КонецЕсли;
	КонецЕсли;
	
	////~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
КонецПроцедуры

Функция семВводНаОснованииИзЦентра( пДокОсн )
	Если семТекСтрана() = "LV" Тогда Возврат 0; КонецЕсли;
	Если пДокОсн.Вид() <> "Счет" Тогда Возврат 0; КонецЕсли;
	пНаклИзЦентра = "";
	док = СоздатьОбъект( "Документ" );
	док.ВыбратьПодчиненныеДокументы(,,пДокОсн);
	Пока док.ПолучитьДокумент() = 1 Цикл
		Если док.Вид() <> "РасходнаяНакладная" Тогда Продолжить; КонецЕсли;
		Если док.Фирма.Клиент <> док.Клиент Тогда Продолжить; КонецЕсли;
		пНаклИзЦентра = док.ТекущийДокумент();
		Прервать;
	КонецЦикла;
	Если ПустоеЗначение(пНаклИзЦентра) = 1 Тогда Возврат 0; КонецЕсли;
	табл = СоздатьОбъект( "ТаблицаЗначений" );
	пНаклИзЦентра.ВыгрузитьТабличнуюЧасть(табл,"Товар,Количество,Счет");
	табл.Сортировать("+Счет");
	таблКолва = СоздатьОбъект( "ТаблицаЗначений" );
	таблКолва.НоваяКолонка("Товар");
	таблКолва.НоваяКолонка("Количество");
	НомСтр = 0;
	Если табл.НайтиЗначение(пДокОсн, НомСтр, "Счет") = 1 Тогда
		табл.ПолучитьСтрокуПоНомеру( НомСтр );
		Пока ( табл.Счет = пДокОсн ) и (НомСтр <= табл.КоличествоСтрок()) Цикл
			таблКолва.НоваяСтрока();
			таблКолва.Товар = табл.Товар;
			таблКолва.Количество = табл.Количество;
			Если НомСтр = табл.КоличествоСтрок() Тогда Прервать; КонецЕсли;
			НомСтр = НомСтр + 1;
			табл.ПолучитьСтрокуПоНомеру( НомСтр );
		КонецЦикла;
	КонецЕсли;
	//таблКолва.ВыбратьСтроку();
	
	ЗаполнитьШапкуНаОсн( Контекст, пДокОсн );
	ПризнакНакладной = Перечисление.ПризнРасхНакл.Продажа;
	Склад = пДокОсн.Склад;
	Дата_Курса = пДокОсн.Дата_Курса;
	Валюта = пДокОсн.Валюта;
	Курс = пДокОсн.Курс;
	Валюта_Прежн = Валюта;
	Курс_Прежн = Курс;
	Клиент = пДокОсн.Клиент;
	ВыборКлиента(); 
	Если глЕстьРеквизитШапки("СкидкаНакл",пДокОсн.Вид())=1 Тогда
		СкидкаНакл = пДокОсн.СкидкаНакл;
	КонецЕсли;
	СтавкаНДС = пДокОсн.СтавкаНДС;                       
	Агент = пДокОсн.Агент;
	ДокументОснование = пДокОсн;
	Основание = ПеревестиНаГосЯзык( пДокОсн.Вид())+" Nr. " + пДокОсн.НомерДок + " no " + пДокОсн.ДатаДок;
	
	кРозничнаяКатегорияЦены = Константа.РозничнаяКатегорияЦены;
	пДокОсн.ВыбратьСтроки();
	Пока пДокОсн.ПолучитьСтроку()=1 Цикл
		НомСтр = 0;
		Если таблКолва.НайтиЗначение(пДокОсн.Товар, НомСтр, "Товар") = 0 Тогда Продолжить; КонецЕсли;
		НоваяСтрока();
		Товар = пДокОсн.Товар; 
		ТовКод = Товар.Код;
		РознЦена = ЦенаТовараПоКатегории( Контекст, КатегорияЦены, 1 );
		Цена = пДокОсн.Цена;
		Единица = пДокОсн.Единица;
		Коэффициент = пДокОсн.Коэффициент;
		Количество = таблКолва.ПолучитьЗначение( НомСтр, "Количество" );
		Сумма = пДокОсн.Сумма;
		Скидка = пДокОсн.Скидка;
		ВидСкидки = пДокОсн.ВидСкидки; 
		ПояснениеСкидки = пДокОсн.ПояснениеСкидки;
		КомплектовщикСчет = Комплектовщик;
		НДС = пДокОсн.НДС;
		Всего = Сумма + НДС;   
		Счет = пДокОсн; 
		Если ВидСкидки <> Перечисление.ВидСкидки.Документ Тогда
       		УстанЦеныРасх(Контекст,,0,?(ПустоеЗначение(Счет.КлиентФилиала)=1,Счет.КатегорияЦены,""));
		КонецЕсли;
		Выч_суммы_накл_сНП( Контекст ,,,?(ПустоеЗначение(Счет.КлиентФилиала)=1,Счет.КатегорияЦены,""));
	КонецЦикла;
	Агент = семПолучитьАгента( ,пДокОсн );
	ПриОкончанииРедактированияСтроки();
	Возврат 1;
КонецФункции

Процедура ВводНаОсновании(ДокОснование)
	//ДокТест = СоздатьОбъект("Документ");
	//Если ДокТест.ВыбратьПодчиненныеДокументы(,,ДокОснование) = 1 Тогда
	//	Пока ДокТест.ПолучитьДокумент() = 1 Цикл
	//		Если ДокТест.ПометкаУдаления() = 1 Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		Предупреждение("Электронка "+ДокОснование+" уже имеет подчиненный документ "+ДокТест);
	//		СтатусВозврата(0);
	//	КонецЦикла;
	//КонецЕсли;		
	Если семМожноВводитьНаОснованииСчета( ДокОснование, "Расходная" ) = 0 Тогда СтатусВозврата( 0 ); Возврат; КонецЕсли;
//	Если семМожноВводитьНаОснованииСчета( ДокОснование, "Перемещение" ) = 0 Тогда СтатусВозврата( 0 ); Возврат; КонецЕсли;
	Если семМожноВводитьНаОснованииСчета( ДокОснование, "СнятиеРезерва" ) = 0 Тогда СтатусВозврата( 0 ); Возврат; КонецЕсли;
	
	Если ДокОснование.Вид() = "Счет" Тогда
		
		// сем \\
		Если ДокОснование.ПометкаУдаления() = 1 Тогда
			Сообщить("Нельзя вводить документ на основании удаленного документа.","I");
			СтатусВозврата( 0 );
			Возврат;
		КонецЕсли;
		Если ДокОснование.Проведен() = 0 Тогда
			Сообщить("Нельзя вводить документ на основании непроведенного документа.","I");
			СтатусВозврата( 0 );
			Возврат;
		КонецЕсли;
		// сем //
		Если ДокОснование.Клиент.Выбран() = 1 Тогда
			Если ДокОснование.Клиент.ЗапретВыпискиНакл.Получить(РабочаяДата()) = 1 Тогда
				Предупреждение( "Клиенту запрещен отпуск товара в кредит.(в карточке клиента)" );
				СтатусВозврата( 0 );
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если ДокОснование.ВидОплаты = 1 Тогда // оплата наличными
			Предупреждение( "Клиенту запрещен отпуск товара в кредит.(в эл. заявке)" );
			СтатусВозврата( 0 );
			Возврат;
		ИначеЕсли ДокОснование.ВидОплаты = 2 Тогда // возврат с отв. хранения
			ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратСХранения;
			ПриУстановкеПризнака();
		КонецЕсли;
			
		ЗаполнениеПоРезервам=0;
		Если (Константа.НовыйМеханизмПретензий.Получить(ДатаДок)=Да) Тогда
			ЗаполнениеПоРезервам=1;
		КонецЕсли;
		
		Если (ПустоеЗначение(ДокОснование.Склад.МестоКомплектации)=1) И (ДокОснование.Клиент <> ДокОснование.КлиентФилиала) Тогда //только для заявок введенных локально
			ЗаполнениеПоРезервам=0;
		КонецЕсли;
		
		Если ДокОснование.ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаНаВозврат Тогда
			ЗаполнениеПоРезервам=0;
		КонецЕсли;
		
		Если  ЗаполнениеПоРезервам=1 Тогда
			СостЗаявки=глПолучитьСостояниеЗаявки(ДокОснование);
			Если СостЗаявки="Ожидает отгрузки" Тогда
				сп=СоздатьОбъект("СписокЗначений");
				сп.ДобавитьЗначение(ДокОснование);
				семЗаполнитьПоСпискуЗаявок(сп);
			Иначе
				Предупреждение("Нельзя оформлять документ на основании заявки в состоянии <"+СостЗаявки+">!");
				СтатусВозврата(0);				
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		Если ПустоеЗначение(ДокОснование.Комплектовщик)=0 Тогда
			Комплектовщик=ДокОснование.Комплектовщик;
		Иначе
			Комплектовщик = семВыбратьКомплектовщика();
			Если Комплектовщик.Выбран() = 0 Тогда
				Предупреждение( "Не выбран комплектовщик." );
				СтатусВозврата( 0 );
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ДатаПоставки = ДокОснование.ДатаПоставки;
	КонецЕсли;

	Если семВводНаОснованииИзЦентра( ДокОснование ) = 1 Тогда Возврат; КонецЕсли;
	
	Если (ДокОснование.Вид()="Счет")
	ИЛИ	(ДокОснование.Вид()="РасходнаяНакладная")
	ИЛИ	(ДокОснование.Вид()="РасходнаяНакладнаяНал")
	ИЛИ	(ДокОснование.Вид()="ПриходнаяНакладная")
	ИЛИ	(ДокОснование.Вид()="РасходнаяРеализатора")   
	ИЛИ (ДокОснование.Вид()="ПеремещениеНаСкладГотовойПродукции")
	ИЛИ	(ДокОснование.Вид()="ПриходнаяРеализатора") Тогда
		ЗаполнитьШапкуНаОсн(Контекст,ДокОснование);
		//ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа;
		Если (ДокОснование.Вид()="ПриходнаяНакладная") Тогда
			ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратПоставщику;
			ДокументОснование=ДокОснование;
		Иначе
			ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа;
		КонецЕсли;

		Если ДокОснование.Вид() = "Счет" Тогда
			Если ДокОснование.Склад.СкладОтвХранения = 1 Тогда // возврат с отв. хранения
				ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратСХранения;
				ПриУстановкеПризнака();
			КонецЕсли;
			
			Если ДокОснование.ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаНаВозврат Тогда
				ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратПоставщику;
				ПриУстановкеПризнака();
			КонецЕсли;
		КонецЕсли;
		
		
		ДатаДок=РабочаяДата();
		Если ДокОснование.Вид() <> "Счет" Тогда
			ДатаПоставки = ДатаДок;
		КонецЕсли;
		Если ДокОснование.Вид()="ПеремещениеНаСкладГотовойПродукции" Тогда
			Склад=ДокОснование.СкладКонечный;
			//Если Фирма.Выбран() = 1 Тогда	//копирование документа
			//	Автор = Пользователь;
			//	Возврат;
			//КонецЕсли;
			ЗаполнитьШапку(Контекст);
			ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа;
			Валюта=Константа.ОсновнаяВалютаПродажи;
			Дата_Курса=ДатаДок;
			Курс=КурсДляВалюты(Валюта,Дата_Курса);
			
			Валюта_Прежн=Валюта;
			Курс_Прежн=Курс;
			Клиент=Константа.ОсновнойПокупатель;
			ВыборКлиента("Новый");
			ИспользоватьНП = Нет;
		Иначе	
//			Если (ДокОснование.Вид()="Счет") Тогда
//				Склад=Константа.ОсновнойСклад;
//			Иначе         

			Склад=ДокОснование.Склад;
//			КонецЕсли;
			Дата_Курса=ДатаДок;
			Валюта=ДокОснование.Валюта;
			Курс=ДокОснование.Курс;
			Валюта_Прежн=Валюта;
			Курс_Прежн=Курс;
			Клиент=ДокОснование.Клиент;
			
    	    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			Если глЕстьРеквизитШапки("СкидкаНакл",ДокОснование.Вид())=1 Тогда
				СкидкаНакл=ДокОснование.СкидкаНакл;
			КонецЕсли;
			// сем \\
			Если семТекСтрана() = "LV" Тогда 
				КатегорияЦены = ДокОснование.КатегорияЦены; 
			КонецЕсли;
			
			Если ПустоеЗначение(КатегорияЦены)=1 Тогда
				КатегорияЦены = Константа.ОсновнаяКатегорияЦены;
			КонецЕсли;
			
			//КатегорияЦены = ДокОснование.КатегорияЦены;
			// сем //

			Если глЕстьРеквизитШапки("СтавкаНДС",ДокОснование.Вид())=1 Тогда
				СтавкаНДС     = Константа.ОсновнаяСтавкаНДС;
			Иначе
				СтавкаНДС     = Константа.ОсновнаяСтавкаНДС;
			КонецЕсли;

			ВыборКлиента(); 
			
			Агент=ДокОснование.Агент;
		    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		КонецЕсли;           
		
		Если (ДокОснование.Вид()="Счет") И (ДокОснование.Проведен()=1) Тогда
			
			СкидкаНакл=ДокОснование.СкидкаНакл;
			
			ДокументОснование=ДокОснование;
			Основание=ПеревестиНаГосЯзык(ДокОснование.Вид())+" Nr. " + ДокОснование.НомерДок + " no " + ДокОснование.ДатаДок;
			// Если вводим на основании Счета, то спецификацию записываем
			// исходя из остатков зарезервированных товаров
			Рег1=СоздатьОбъект("Регистр.РезервыТоваров");
			// документ новый
			Если ПолучитьДатуТА()>ДатаДок Тогда
				// если итоги не актуальны, то остатки берем из временногно расчета Регистра
				Рег1.ВременныйРасчет();
				РассчитатьРегистрыНа(ДатаДок+1);
			КонецЕсли;
			ДокОснование.ВыбратьСтроки();
			Пока ДокОснование.ПолучитьСтроку()=1 Цикл
				Если ДокОснование.Товар.ВидТовара=Перечисление.ВидыТоваров.Услуга Тогда
					// услуги
					НоваяСтрока();
					Товар=ДокОснование.Товар; 
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					ТовКод   = Товар.Код;
					РознЦена = ЦенаТовараПоКатегории(Контекст,КатегорияЦены,1);
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					Цена=Пересчет(ДокОснование.Цена,ДокОснование.Валюта,ДокОснование.Курс,Валюта,Курс);
					Количество=ДокОснование.Количество;
					Единица=ДокОснование.Единица;
					Коэффициент=ДокОснование.Коэффициент;
					Сумма=Пересчет(ДокОснование.Сумма,ДокОснование.Валюта,ДокОснование.Курс,Валюта,Курс);
					Скидка=Пересчет(ДокОснование.Скидка,ДокОснование.Валюта,ДокОснование.Курс,Валюта,Курс);
					ВидСкидки=ДокОснование.ВидСкидки;
					ПояснениеСкидки=ДокОснование.ПояснениеСкидки;
					НДС=Пересчет(ДокОснование.НДС,ДокОснование.Валюта,ДокОснование.Курс,Валюта,Курс);
					Всего = Сумма + НДС; 
					Счет = ДокОснование;
					КомплектовщикСчет = Комплектовщик;
					Продолжить;
				КонецЕсли;                                                                 
				
				//Если ДокОснование.Резерв=0 Тогда
				//	Продолжить;
				//КонецЕсли;
				//Неактуальная проверка резерва, ввод на основании возможен только у проведенного документа
				//который в свою очередь поставил резерв.
				//РезервПоСчету=Рег1.Остаток(ДокОснование.Товар,ДокОснование,"РезервТовара");
				//Если РезервПоСчету>0 Тогда  
					НоваяСтрока();
					Товар=ДокОснование.Товар; 
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					ТовКод   = Товар.Код;
					РознЦена = ЦенаТовараПоКатегории(Контекст,КатегорияЦены,1);
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					Цена=Пересчет(ДокОснование.Цена,ДокОснование.Валюта,ДокОснование.Курс,Валюта,Курс);
					Единица=ДокОснование.Единица;
					Коэффициент=ДокОснование.Коэффициент;
					Количество=ДокОснование.Количество;
//					УстановкаЕдиницыИзмерения(Контекст);
				//	Выч_суммы_накл(Контекст);
					//Выч_суммы_накл_сНП(Контекст);
					Сумма=Пересчет(ДокОснование.Сумма,ДокОснование.Валюта,ДокОснование.Курс,Валюта,Курс);
					Скидка=Пересчет(ДокОснование.Скидка,ДокОснование.Валюта,ДокОснование.Курс,Валюта,Курс);
					ВидСкидки=ДокОснование.ВидСкидки; 
					ПояснениеСкидки=ДокОснование.ПояснениеСкидки;
					НДС=Пересчет(ДокОснование.НДС,ДокОснование.Валюта,ДокОснование.Курс,Валюта,Курс);
					Всего = Сумма + НДС;   
					Счет = ДокОснование; 
					КомплектовщикСчет = Комплектовщик;
					
					Если (ВидСкидки = Перечисление.ВидСкидки.Документ) И (ПустоеЗначение(Счет.КлиентФилиала)=1) Тогда
						Выч_суммы_накл_сНП(Контекст,0,1,?(ПустоеЗначение(Счет.КлиентФилиала)=1,Счет.КатегорияЦены,""));
					ИначеЕсли ПризнакНакладной <> Перечисление.ПризнРасхНакл.ВозвратПоставщику Тогда
						УстанЦеныРасх(Контекст,,0,?(ПустоеЗначение(Счет.КлиентФилиала)=1,Счет.КатегорияЦены,""));
					КонецЕсли;
					
			КонецЦикла;
			Рег1=0;
		Иначе
			// Если вводим не на основании проведенного Счета,
			// то спецификацию записываем просто
			Основание=ПеревестиНаГосЯзык(ДокОснование.Вид())+"Nr. " + ДокОснование.НомерДок + " no " + ДокОснование.ДатаДок;
			
			ДокОснование.ВыбратьСтроки();
			Пока ДокОснование.ПолучитьСтроку()=1 Цикл
				НоваяСтрока();
				КомплектовщикСчет = Комплектовщик;
				
				Если ДокОснование.вид()="ПеремещениеНаСкладГотовойПродукции" Тогда
					Товар=ДокОснование.Товар; 
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					ТовКод   = Товар.Код;
					РознЦена = ЦенаТовараПоКатегории(Контекст,КатегорияЦены,1);
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					Единица=ДокОснование.Единица;
					Коэффициент=ДокОснование.Коэффициент;
					Количество=ДокОснование.КоличествоФакт; 
					УстанЦеныРасх(Контекст,"Подбор",0);
					Выч_суммы_накл_сНП(Контекст);
					Всего = Сумма + НДС;
				Иначе
					Товар=ДокОснование.Товар; 
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					ТовКод   = Товар.Код;
					Если глЕстьРеквизитМнЧ("РознЦена",ДокОснование.Вид())=1 Тогда
						РознЦена=Пересчет(ДокОснование.РознЦена,ДокОснование.Валюта,ДокОснование.Курс,Валюта,Курс);
					Иначе
						РознЦена = ЦенаТовараПоКатегории(Контекст,КатегорияЦены,1);
					КонецЕсли;

					Если ДокОснование.Вид()="ПриходнаяНакладная" Тогда
						РознЦена=Пересчет(ДокОснование.Цена,ДокОснование.Валюта,ДокОснование.Курс,Валюта,Курс);
					КонецЕсли;					
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					Цена=Пересчет(ДокОснование.Цена,ДокОснование.Валюта,ДокОснование.Курс,Валюта,Курс);
					Попытка
						ЦенаСНДС=Пересчет(ДокОснование.ЦенаСНДС,ДокОснование.Валюта,ДокОснование.Курс,Валюта,Курс);
					Исключение
					КонецПопытки;
					Единица=ДокОснование.Единица;
					Коэффициент=ДокОснование.Коэффициент;
					Количество=ДокОснование.Количество;
					Сумма=Пересчет(ДокОснование.Сумма,ДокОснование.Валюта,ДокОснование.Курс,Валюта,Курс);
					НДС=Пересчет(ДокОснование.НДС,ДокОснование.Валюта,ДокОснование.Курс,Валюта,Курс);
					Всего = Сумма + НДС;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ДокОснование.Вид()<>"ПриходнаяНакладная" Тогда
			ПересчетЦен();
		КонецЕсли;

	ИначеЕсли ДокОснование.Вид()="ЗаказОтПокупателя" Тогда
		Докум=СоздатьОбъект("Документ"); 
		Докум.ОбратныйПорядок(1);
		Докум.ВыбратьПодчиненныеДокументы(ДокОснование.ТекущийДокумент(),,ДокОснование.ТекущийДокумент()); 
		Пока Докум.ПолучитьДокумент()=1 Цикл
			Если Докум.Вид()<>"КорректировкаЗаказОтПокупателя" Тогда
				Продолжить;    
			КонецЕсли;
		    Если Докум.ПометкаУдаления()=1 Тогда
		        Продолжить;
			КонецЕсли;     
			Если Докум.Проведен()=0 Тогда
			    Продолжить;
			КонецЕсли;
			ДокОснование=Докум.ТекущийДокумент();
		КонецЦикла;
		ЗаполнитьШапкуНаОсн(Контекст,ДокОснование);
		ДокументОснование=ДокОснование;
		ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа;
		ДатаДок=РабочаяДата();
		Склад=ДокОснование.Склад;
		Дата_Курса=ДокОснование.Дата_Курса;
		Валюта=ДокОснование.Валюта;
		Курс=ДокОснование.Курс;
		Валюта_Прежн=Валюта;
		Курс_Прежн=Курс;
		Клиент=ДокОснование.Клиент;
		ВыборКлиента();          
		Агент=ДокОснование.Агент;

    	КатегорияЦены = ДокОснование.КатегорияЦены;
		
		СтавкаНДС     = Константа.ОсновнаяСтавкаНДС;                       
		
		ДокОснование.ВыбратьСтроки();
		Пока ДокОснование.ПолучитьСтроку()=1 Цикл
			НоваяСтрока();
			КомплектовщикСчет = Комплектовщик;
			Товар=ДокОснование.Товар; 
			ТовКод   = Товар.Код;
			РознЦена = ЦенаТовараПоКатегории(Контекст,Константа.РозничнаяКатегорияЦены,1);
			Цена=Пересчет(ДокОснование.Цена,ДокОснование.Валюта,ДокОснование.Курс,Валюта,Курс);
			ЦенаСНДС=Пересчет(ДокОснование.ЦенаСНДС,ДокОснование.Валюта,ДокОснование.Курс,Валюта,Курс);
		
			Единица=ДокОснование.Единица;
			Коэффициент=ДокОснование.Коэффициент;
			Количество=ДокОснование.Количество;
			Сумма=Пересчет(ДокОснование.Сумма,ДокОснование.Валюта,ДокОснование.Курс,Валюта,Курс);
			НДС=Пересчет(ДокОснование.НДС,ДокОснование.Валюта,ДокОснование.Курс,Валюта,Курс);  
			Всего = Сумма + НДС;
			Выч_суммы_накл_сНП(Контекст,0,1);
		КонецЦикла;		
	Иначе
		Предупреждение("Расходную накладную нельзя вводить на основании выбранного вида документа!",4);
		СтатусВозврата(0);
	КонецЕсли;      
                               
	
	стар_Клиент = Клиент;
	
	Если ПустоеЗначение(КатегорияЦены)=1 Тогда
		КатегорияЦены=Константа.ОсновнаяКатегорияЦены;
	КонецЕсли;
	
	// сем \\
	Если семТекСтрана() <> "LV" Тогда
		//для возврата поставщику цены пересчитывать не нужно
		Если ПризнакНакладной <> Перечисление.ПризнРасхНакл.ВозвратПоставщику Тогда
	        	ВыбратьСтроки(); Пока ПолучитьСтроку() = 1 Цикл УстанЦеныРасх(Контекст,,0); КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	// сем //

	 Если ДокОснование.Вид()="РасходнаяНакладнаяНал" Тогда
		Если ДокОснование.ДокументОснование.Вид()="Счет" Тогда
		    ДокументОснование=ДокОснование.ДокументОснование;
			Основание=ПеревестиНаГосЯзык(ДокументОснование.Вид())+" Nr. " + ДокументОснование.НомерДок + " no " + ДокументОснование.ДатаДок;
		КонецЕсли;                       
	 	
	 	Отв=Вопрос("Расходная накладная вводится на основании Расходной за Нал. Пометить на удаление Расходную Нал?",4);
	 	Если Отв=6 Тогда      //Да
	 		Док1=СоздатьОбъект("Документ."+ДокОснование.Вид());
	 		ТекДок=ДокОснование.ТекущийДокумент();
	 		Док1.НайтиДокумент(ТекДок);
	 		Если Док1.Выбран()>0 Тогда
	 			Сообщить(ДокОснование.Вид()+" "+ТекДок.НомерДок+" от "+
				ТекДок.ДатаДок+" помечена на удаление.");
	 			//Закомментировано Инсталлятором МОД:Док1.Удалить(0);
	//Начало текста, вставленного Инсталлятором МОД
//				Док1.Удалить(0);
				ОбъектУдалить(Док1, 0);
				ЗаписьЖурналаРегистрации( "Документ "+Док1.ДокументОснование.Вид()+" номер "+Док1.ДокументОснование.НомерДок+" помечен на удаление","Документы", "Документ помечен на удаление", Док1.ТекущийДокумент(), 2 );
				//Конец текста, вставленного Инсталлятором МОД
	 		КонецЕсли;
	 	КонецЕсли;
	Конецесли;
	
	Агент = семПолучитьАгента( ,ДокОснование );
	
	ПриОкончанииРедактированияСтроки();
КонецПроцедуры

//-----------------------------------------------
Процедура ВводСчетаФактуры()
	Перем ФормаСчФ;
	Если Проведен()=0  Тогда
		Предупреждение("Счет-фактуру нельзя вводить на основании не проведенного документа!");
		Возврат;
	КонецЕсли;
	ДокПодч=СоздатьОбъект("Документ");
	ДокПодч.ВыбратьПодчиненныеДокументы(ДатаДок-7,ПолучитьДатуТА(),ТекущийДокумент());
	Пока  ДокПодч.ПолучитьДокумент()=1 Цикл
		Если ДокПодч.Вид()="Счет_фактура" Тогда
			Если ДокПодч.Пометкаудаления()=1 Тогда
				Продолжить
			КонецЕсли;
			ОткрытьФорму(ДокПодч.ТекущийДокумент(),ФормаСчФ);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	ОткрытьФорму("Документ.Счет_фактура",ФормаСчФ,ТекущийДокумент());
КонецПроцедуры
//-----------------------------------------------
Процедура ПриЗакрытии()
	СохранитьЗначение("ВалютаПечатиРасхНакл",ВалютаПечати);
КонецПроцедуры
//-----------------------------------------------
Процедура ПересчетНП()
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Выч_суммы_накл_сНП(Контекст);
	КонецЦикла;
КонецПроцедуры  
//-----------------------------------------------
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Процедура ОбработкаВыбораЗначения(ВыбЗнач,ИдЭлДиал,ФлСтОбр)
	Если ИдЭлДиал = "Агент" Тогда
//	    Если ОчищениеТаблЧасти(Контекст) = 0 Тогда
//	        ФлСтОбр = 0;
//	    КонецЕсли;
	КонецЕсли;
	Если ИдЭлДиал = "Клиент" Тогда
    	стар_Клиент = Клиент;
		//*****<<PR>>(begin)
		Если  (Пользователь.РазрРасхНаклНерезидентам=0) И (ВыбЗнач.Страна<>Константа.СтранаРезидент) Тогда
			Предупреждение("Выбран неправильный клиент!");
			СтатусВозврата(0);
		КонецЕсли;
		//*****<<PR>>(end)
	ИначеЕсли ИдЭлДиал = "СкидкаНакл" Тогда
		ПриИзмененииСкидкиДокумента(Контекст)
	КонецЕсли;
КонецПроцедуры                

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Процедура СортТовар()
	                        
	ТТ=СоздатьОбъект("ТаблицаЗначений");
		
	ВыгрузитьТабличнуюЧасть(ТТ);
	
	ТТ.НоваяКолонка("УслХран","Число",2);
	ТТ.ВыбратьСтроки();
	Пока ТТ.ПолучитьСтроку()=1 Цикл
		Попытка
	    	ТТ.УслХран=ТТ.Товар.МестоХранения.Код;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	ТТ.Сортировать("+УслХран,+ТовКод");
	
	ЗагрузитьТабличнуюЧасть(ТТ);

КонецПроцедуры

Процедура ПриЗаписи() Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ПриЗаписи()
//Закомментировано Инсталлятором МОД:Процедура ПриЗаписи()
	Если семМожноЗаписать( Контекст ) = 0 Тогда Возврат; КонецЕсли;
	
	Если семПроверкаДатыПоставки( контекст ) = 0 Тогда Возврат; КонецЕсли;
	
	//присвоение номера строгой отчетности\\
	Если НЕ((ПризнакНакладной = Перечисление.ПризнРасхНакл.КредитнаяНота)
	или	(ПризнакНакладной = Перечисление.ПризнРасхНакл.КредитнаяНотаШтраф)) Тогда
		Если семПрисвоитьНовыйНомер( контекст ) = 0 Тогда Возврат; КонецЕсли;
	КонецЕсли;
	//присвоение номера строгой отчетности//
	Если семПроверкаУникальностиНомера( контекст ) = 0 Тогда Возврат; КонецЕсли;
	
	
	//проверка признака накладной на соответствие док. основания\\
	Если (ДокументОснование.Вид() <> "Счет")
	и(ДокументОснование.Вид() <> "ПриходнаяНакладная")
	и(ДокументОснование.Вид() <> "ЗаказОтПокупателя") и (ПустоеЗначение(Автор)=0) Тогда  
//		Если ПризнакНакладной <> Перечисление.ПризнРасхНакл.КредитнаяНота Тогда   
//			ПризнакНакладной = Перечисление.ПризнРасхНакл.КредитнаяНота;
			//Сообщить("Данный документ может использоваться только как кредитная нота (бонус).");  
			//Сообщить("Убедитесь в правильности сформированного документа!");
			//СтатусВозврата(0);
			//Возврат;
//		КонецЕсли;
	КонецЕсли; 
	//проверка признака накладной на соответствие док. основания//
	
	//проверка даты док. основания\\
	Если ПустоеЗначение(ДокументОснование) = 0 Тогда
		Если ДатаДок < ДокументОснование.ДатаДок Тогда
			Сообщить("Ошибка записи документа.","!");
			Сообщить("Дата документа меньше даты документа основания.","I");
			СтатусВозврата(0); Возврат;			
		КонецЕсли;
	КонецЕсли;   
	//проверка даты док. основания//
	
	ДокРасхНал=СоздатьОбъект("Документ.РасходнаяНакладнаяНал");
	Если ДокРасхНал.НайтиПоНомеру(НомерДок,ДатаДок,"РасходнаяНакладнаяНал") = 1 Тогда
		Предупреждение("Данный номер документа зарегестрирован за расходной накладной (нал). Сохранение невозможно!");        
		СтатусВозврата(0);
		Возврат;		
	КонецЕсли;

	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Если ПустоеЗначение(СкладТ)=1 Тогда
			СкладТ=Склад;
		КонецЕсли;
		
		Если ПустоеЗначение(Счет)=0 Тогда
			Если Счет.Склад<>СкладТ Тогда
				СкладТ = Счет.Склад;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	тСклады=СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(тСклады,"СкладТ");	
	тСклады.Свернуть("СкладТ","");
	Если тСклады.КоличествоСтрок()>1 Тогда
		ДокСклады=СоздатьОбъект("Документ.Служ_Склады");
		Если ПустоеЗначение(СкладыДок)=1 Тогда
			ДокСклады.Новый();
			ДокСклады.ДатаДок=Дата(1980,ДатаМесяц(ДатаДок),ДатаЧисло(ДатаДок));
			ЗаполнитьШапку(ДокСклады);
		Иначе
			ДокСклады.НайтиДокумент(СкладыДок);
			ДокСклады.УдалитьСтроки();
		КонецЕсли;
		ОбъектЗаписать(ДокСклады);
		СкладыДок=ДокСклады.ТекущийДокумент();
	ИначеЕсли  ПустоеЗначение(СкладыДок)=0 Тогда
		//удаляем ссылку на документ со складами, если он был
		ДокСклады=СоздатьОбъект("Документ.Служ_Склады");
		ДокСклады.НайтиДокумент(СкладыДок);
		ОбъектУдалить(ДокСклады,1);
		СкладыДок = "";
		тСклады.ПолучитьСтрокуПоНомеру(1);
		Если Склад<>тСклады.СкладТ Тогда
			Склад = тСклады.СкладТ;
		КонецЕсли;
	Иначе
		тСклады.ПолучитьСтрокуПоНомеру(1);
		Если Склад<>тСклады.СкладТ Тогда
			Склад = тСклады.СкладТ;
		КонецЕсли;

	КонецЕсли;	
	
	//СортТовар();
	
	Клиент.ИспользоватьДату(ДатаДок);
	// Запишем главного клиента
	Если Клиент.КлГруппа.Выбран()=1 Тогда
		КлГруппа=Клиент.КлГруппа;
	Иначе
		КлГруппа=Клиент;
	КонецЕсли;       
	Клиент.ИспользоватьДату("");
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		АгентПоТовару=глПолучитьАгентаПоТовару(Клиент, Агент,Товар);
		
		Если Товар.ВидТовара <> Перечисление.ВидыТоваров.Услуга Тогда
			КлиентФилиала = ?(ПустоеЗначение(Счет.КлиентФилиала)=0,Счет.КлиентФилиала,"");
			//пытаемся привязаться к правильному агенту согласно привязке клиент.агент для филиала - у группы агентов

			Если ПустоеЗначение(КлиентФилиала)=0 Тогда
				АгентФилиала = КлиентФилиала.Агент;

				Если (ПустоеЗначение(АгентФилиала)=0) И (ПустоеЗначение(АгентФилиала.Родитель)=0) Тогда
					АгентПоТовару = ?(ПустоеЗначение(АгентФилиала.Родитель.АгентВнутр)=0,АгентФилиала.Родитель.АгентВнутр,АгентПоТовару);
				КонецЕсли;
				
				АгентФилиалаПоТовару=глПолучитьАгентаПоТовару(КлиентФилиала, АгентФилиала.АгентКонсолидации,Товар);
			Иначе
				АгентФилиалаПоТовару="";
				
			КонецЕсли;
		КонецЕсли;
		
		Если (СтранаОтпр.ВидСтраны=Перечисление.ВидыСтран.ЕС) И (ПризнакНакладной <> Перечисление.ПризнРасхНакл.ВозвратСХранения) Тогда 
			Если Проведен()=0 Тогда
				ВесНетто=Товар.Вес*Количество*Коэффициент;
				Если Товар.ЯвляетсяУпаковкой = Перечисление.Булево.Да Тогда
					ВесНетто=0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если (ДатаДок>ТекущаяДата()) и (Выбран()=0) Тогда
		АвтоВремяОтключить();
		УстановитьВремя(6,0,0);  
	ИначеЕсли  ДатаДок>ТекущаяДата() Тогда          
		АвтоВремяНачалоДня();
	Иначе
		АвтоВремяТекущее();
	КонецЕсли; 
КонецПроцедуры

Функция семКонтИнфАгента()
	Если Агент.Выбран() = 0 Тогда Возврат ""; КонецЕсли;
	Возврат "JЅs apkalpo aЄents " + Агент.Наименование + ?( ПустоеЗначение( Агент.Телефон ) = 0, " tel." + Агент.Телефон, "" );
КонецФункции

Процедура ПриВыбореДатыПоставки()
	Если (ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа) ИЛИ (ПризнакНакладной=Перечисление.ПризнРасхНакл.Переработка) Тогда
		ДатаОплаты = семПолучитьДатуОплаты( Клиент, Перечисление.ВидыКлиентов.Покупатель, ДатаПоставки );
	Иначе
		ДатаОплаты = семПолучитьДатуОплаты( Клиент, Перечисление.ВидыКлиентов.Поставщик, ДатаПоставки );
	КонецЕсли;

	Если КоличествоСтрок() = 0 Тогда Возврат; КонецЕсли;
	Ответ = Вопрос("Измененна дата поствки товара. Пересчитать цены?","Да+Нет",60);
	Если Ответ <> "Да" Тогда Возврат; КонецЕсли;
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если ВидСкидки <> Перечисление.ВидСкидки.Документ Тогда
			УстанЦеныРасх(Контекст,"Подбор",0,?(ПустоеЗначение(Счет.КлиентФилиала)=1,Счет.КатегорияЦены,""));
			Выч_суммы_накл_сНП(Контекст,,,?(ПустоеЗначение(Счет.КлиентФилиала)=1,Счет.КатегорияЦены,""));
		КонецЕсли;
	КонецЦикла;                          
КонецПроцедуры
//*****************************************************************************
// СтатистикаУпаковки()
//
// Параметры:
//	интервал 2 месяца назад от даты документа, поставщик
//
// Возвращаемое значение:
//	таблица   с данными по упаковке из предвдущих инвойсов этого же поставщика
//
// Описание: 
// Обращается к регистру "Интрастат", ищет документы
//  возвращает данные об упаковке
Процедура СтатистикаУпаковки()   
	Если Клиент.Выбран()=0 Тогда
		Предупреждение("Не указан поставщик!");
		Возврат;
	КонецЕсли; 
	RS = СоздатьОбъект("ODBCRecordset");
	RS.УстБД1С();  
	
	Если Выбран()=1 Тогда
		Рег=СоздатьОбъект("Регистр.Интрастат");
		Если Рег.ВыбратьДвиженияДокумента(ТекущийДокумент()) <> 0 Тогда
			Сколько=11; // текущий потом выкинем
		Иначе
			Сколько=10;
		КонецЕсли;
	Иначе
		Сколько=10;	
	КонецЕсли;
	
	ТекстЗапроса = " 
	|SELECT  TOP "+Сколько+" * FROM
	|(SELECT 
	|distinct    
	|Жур.DOCNO as Номер,
	|CAST(LEFT(Рег.DATE_TIME_IDDOC,8) as DateTime)    [Дата], 
	|Жур.IDDoc as [Ссылка$Документ.РасходнаяНакладная],
	|$Док.КолВидУпаковки1  Дерево, 
	|$Док.КолВидУпаковки2  Пластик,   
	|$Док.КолВидУпаковки3  Картон, 
	|$Док.КолВидУпаковки4  Металл, 
	|$Док.КолВидУпаковки5  Стекло 
	|  from  $Документ.РасходнаяНакладная as Док  (NOLOCK)
	| INNER JOIN    
	|  $Регистр.Интрастат  Рег  (NOLOCK) ON  Рег.IDDoc = Док.IDDoc    
	|INNER JOIN     
	|_1SJourn Жур    ON  Рег.IDDoc = Жур.IDDoc   
	|where   (Рег.Date_Time_IDDOC BETWEEN :ВыбНачПериода  AND :ВыбКонПериода~ )   
	|and ($Док.КолВидУпаковки1+$Док.КолВидУпаковки2+$Док.КолВидУпаковки3+$Док.КолВидУпаковки4+$Док.КолВидУпаковки5+$Док.КолВидУпаковки6 <>0)
	| and $Док.Клиент = :ВыбКонтрагент) as QRY";      
	
	RS.УстановитьТекстовыйПараметр("ВыбКонтрагент", Клиент);  
	RS.УстановитьТекстовыйПараметр("ВыбНачПериода", ДобавитьМесяц(ДатаДок,-2)); 
	RS.УстановитьТекстовыйПараметр("ВыбКонПериода", ДатаДок);  
	
	ТЗ=СоздатьОбъект("ТаблицаЗначений");
	RS.ВыполнитьИнструкцию(ТекстЗапроса,ТЗ);  
	
	Если Выбран()=1 Тогда
		НомСтр=0;
		Если ТЗ.НайтиЗначение(ТекущийДокумент(),НомСтр,"Ссылка")  <> 0  Тогда
			ТЗ.УдалитьСтроку(НомСтр);	
		КонецЕсли;	
	КонецЕсли;
	
	ТЗ.Сортировать("-Ссылка",1);
	ТЗ.УстановитьПараметрыКолонки("Номер",,,,,14);
	ТЗ.УстановитьПараметрыКолонки("Дата",,,,,11);
	ТЗ.ВидимостьКолонки("Ссылка",0);
	ТЗ.УстановитьПараметрыКолонки("Дерево",,,,,10,"Ч010.2");
	ТЗ.УстановитьПараметрыКолонки("Пластик",,,,,10,"Ч010.2");
	ТЗ.УстановитьПараметрыКолонки("Картон",,,,,10,"Ч010.2");   
	ТЗ.УстановитьПараметрыКолонки("Стекло",,,,,10,"Ч010.2");   
	ТЗ.УстановитьПараметрыКолонки("Металл",,,,,10,"Ч010.2");   
	ТЗ.НоваяКолонка("Нетто","Число",,,,10,"Ч010.2");
	ТЗ.НоваяКолонка("Брутто","Число",,,,10,"Ч010.2");  
	// дополняем таблицу весои нетто и брутто найденных приходов
	ТЗ.ВыбратьСтроки();
	Пока ТЗ.ПолучитьСтроку()=1 Цикл
		Ссылка=ТЗ.Ссылка;
		ВыбратьСтроки();
		НеттоДок=0;
		БруттоДок=0;     
		Ссылка.ВыбратьСтроки();
		Пока Ссылка.ПолучитьСтроку()=1 Цикл
			НеттоДок=НеттоДок+Ссылка.Товар.Вес*Ссылка.Количество;
		КонецЦикла; 
		НеттоДок=Макс(НеттоДок,Ссылка.Нетто);  
		БруттоДок=Макс((НеттоДок+ТЗ.Дерево+ТЗ.Пластик+ТЗ.Картон+ТЗ.Металл+ТЗ.Стекло),Ссылка.Брутто); 
		ТЗ.Нетто=НеттоДок;
		ТЗ.Брутто=БруттоДок;
	КонецЦикла;    
	
	НеттоДок=0;
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		НеттоДок=НеттоДок+Товар.Вес*Количество;
	КонецЦикла; 
	НеттоДок=Макс(НеттоДок,Нетто);  
	
	// дополняем таблицу усредненной строкой:
	
	Если ТЗ.Итог("Нетто")<> 0 Тогда
		ТЗ.НоваяСтрока();
		ТЗ.Номер="СРЕДНЕЕ:";   	
		Пропорция= НеттоДок / ТЗ.Итог("Нетто") ;
		ТЗ.Дерево=Окр(ТЗ.Итог("Дерево") *Пропорция,3,1);
		ТЗ.Пластик=Окр(ТЗ.Итог("Пластик") *Пропорция,3,1);
		ТЗ.Картон=Окр(ТЗ.Итог("Картон") *Пропорция,3,1);
		ТЗ.Металл=Окр(ТЗ.Итог("Металл") *Пропорция,3,1);
		ТЗ.Стекло=Окр(ТЗ.Итог("Стекло") *Пропорция,3,1);
	КонецЕсли;
	
	Если ФС.СуществуетФайл(КаталогИБ()+"ExtForms\INTRASTAT\РасчетУпаковки.ert")=1 Тогда
		Параметр=СоздатьОбъект("СписокЗначений");
		Параметр.ДобавитьЗначение(ТекущийДокумент());  //1
		Параметр.ДобавитьЗначение(ТЗ);                                    //5
		Параметр.ДобавитьЗначение(НеттоДок);                       //3
		Параметр.ДобавитьЗначение(КолВидУпаковки1);     //4
		Параметр.ДобавитьЗначение(КолВидУпаковки2);    //5
		Параметр.ДобавитьЗначение(КолВидУпаковки3);     //6
		Параметр.ДобавитьЗначение(КолВидУпаковки4);      //7
		Параметр.ДобавитьЗначение(КолВидУпаковки5);     //8
		Параметр.ДобавитьЗначение(Брутто);                             //9
		ОткрытьФормуМодально("Отчет",Параметр,КаталогИБ()+"ExtForms\INTRASTAT\РасчетУпаковки.ert");   
		КолВидУпаковки1=Параметр.ПолучитьЗначение(4);
		КолВидУпаковки2=Параметр.ПолучитьЗначение(5);
		КолВидУпаковки3=Параметр.ПолучитьЗначение(6);
		КолВидУпаковки4=Параметр.ПолучитьЗначение(7);
		КолВидУпаковки5=Параметр.ПолучитьЗначение(8);
		Брутто=Параметр.ПолучитьЗначение(9);
	Иначе
		Зн=0;
		Если ТЗ.ВыбратьСтроку(Зн,"",60)=1 Тогда
			ТЗ.ПолучитьСтрокуПоНомеру(Зн);
			КолВидУпаковки1=ТЗ.Дерево;
			КолВидУпаковки2=ТЗ.Пластик;
			КолВидУпаковки3=ТЗ.Картон;
			КолВидУпаковки4=ТЗ.Металл;
			КолВидУпаковки5=ТЗ.Стекло; 
			
			Брутто=Нетто+КолВидУпаковки1+КолВидУпаковки2+КолВидУпаковки3+КолВидУпаковки4+КолВидУпаковки5+КолВидУпаковки6;
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры	// СтатистикаУпаковки()

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Процедура РасчетБрутто()
	Брутто=Нетто+КолВидУпаковки1+КолВидУпаковки2+КолВидУпаковки3+КолВидУпаковки4+КолВидУпаковки5+КолВидУпаковки6;
КонецПроцедуры	// РасчетБрутто()//Процедура кнПровести()
//	//#Провести
//	//стар_ПриЗаписи();
//	Сообщить("1");
//	Если Выбран() = 0 Тогда Записать();	КонецЕсли;
//	Сообщить("2");
//	семСозданиеПретензии(контекст);
//	Сообщить("3");
//	Провести();
//	Сообщить("4");
//КонецПроцедуры

Процедура ПриУдаленииСтроки()
	Если (Константа.НовыйМеханизмПретензий.Получить(ДатаДок)=Да) И (ПустоеЗначение(Счет.Вид())=0) Тогда 
		//Предупреждение("Нельзя удалять строки в документе. Для любых коррекций используйте документ комплектации заявки (факт.).");
		//СтатусВозврата(0);
	КонецЕсли;
КонецПроцедуры
//*********************************
Процедура ВесИнфо()
	Путь = КаталогИБ() + "ExtForms\Печать\ВесИнфо.ert";
	Если ФС.СуществуетФайл(Путь)=0 Тогда
		Возврат;
	Иначе
		ОткрытьФорму("Обработка",ТекущийДокумент(),Путь);
	КонецЕсли;
КонецПроцедуры
//*********************************
//Процедура кнЗаписать()
//	//#Записать
//	//стар_ПриЗаписи();
//	Шаблон("[#Записать]");
//	//Записать();
//	//семСозданиеПретензии(контекст);
//КонецПроцедуры

//Процедура кнОК()
//	//#Записать? Провести? Закрыть
//	//стар_ПриЗаписи();
//	Если Выбран() = 0 Тогда Шаблон("#Записать");КонецЕсли;
//	семСозданиеПретензии(контекст);
//	Провести();
//	Форма.Закрыть(0);
//КонецПроцедуры

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// При входе в Форму запомним промежуточные переменные
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписи()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
//	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
	стар_ПриЗаписи();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД

//{РасчетКоличесва_RECADV
Функция ВыводRECADV(Тов)
	Если Форма.тИнфоRECADV.Видимость()=0 Тогда
		Возврат "";
	КонецЕсли;

	Попытка
		Если индТовар.НайтиСтроку("иТовар",Тов,,1)>0 Тогда
			Возврат индТовар.КоличествоAccepted;
		Иначе
			Возврат "Не принят"
		КонецЕсли;
		
	Исключение
		Возврат "Не принят"
	КонецПопытки;
КонецФункции

Процедура РасчетКоличесва_RECADV()
	
	Форма.тИнфоRECADV.Видимость(1);
	тзТовар=СоздатьОбъект("ТаблицаЗначений");
	ДокП = СоздатьОбъект("Документ");
	Если ДокП.ВыбратьПодчиненныеДокументы(НачГода(ТекущаяДата()),КонГода(ТекущаяДата()),ТекущийДокумент())=1 Тогда
		Пока ДокП.ПолучитьДокумент()=1 Цикл
			Если ДокП.Вид() = "ПриходRECADV" Тогда
				Если индТовар.КоличествоСтрок()>0 Тогда //имеется еще одна RECADV
					ДокП.ВыгрузитьТабличнуюЧасть(тзТовар,);
					тзТовар.ВыбратьСтроки();
					Пока тзТовар.ПолучитьСтроку() = 1 Цикл
						Если индТовар.НайтиСтроку("иТовар",тзТовар.Товар,,1)>0 Тогда
							индТовар.КоличествоAccepted=индТовар.КоличествоAccepted+тзТовар.КоличествоAccepted;
						Иначе
							индТовар.НоваяСтрока();
							индТовар.Товар=тзТовар.Товар;
							индТовар.КоличествоAccepted=тзТовар.КоличествоAccepted;
						КонецЕсли;
					КонецЦикла;
					//индТовар.Показать();
				Иначе //инициализируем
					ДокП.ВыгрузитьТабличнуюЧасть(тзТовар,);
					индТовар.Загрузить(тзТовар);
					индТовар.ДобавитьИндекс("иТовар","*Товар");

				КонецЕсли;

			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если индТовар.КоличествоСтрок()=0 Тогда
		индТовар.НоваяКолонка("Товар");
	КонецЕсли;
	
	Если НазваниеНабораПрав()="Администратор" Тогда
		//индТовар.Показать();
	КонецЕсли;
КонецПроцедуры


//}РасчетКоличесва_RECADV
индТовар=СоздатьОбъект("ИндексированнаяТаблица");//для расчета RECADV

ИнформационнаяСтрока="";
Prompt="Информация о взаиморасчетах:";
Валюта_Прежн=Валюта;
Курс_Прежн=Курс;
ВалютаПечати=ВосстановитьЗначение("ВалютаПечатиРасхНакл");
Попытка
	Расш=СоздатьОбъект("РасширениеФормы");
Исключение
	Расш="";
КонецПопытки;
Тип=СоздатьОбъект("СписокЗначений");

Форма.Единица.ВыполнятьФормулуТолькоПриИзменении(1);