Функция ЦенаТовара(Тов)
	Если Склад.ВидСклада=Перечисление.ВидыСкладов.Розничный Тогда
		ПродЦена=ЦенаТовараПоКатегорииДляТовара(Тов,Константа.РозничнаяКатегорияЦены);
	Иначе
		ПродЦена=ЦенаТовараПоКатегорииДляТовара(Тов,Константа.ОсновнаяКатегорияЦены);
	КонецЕсли;
	
	Возврат Окр(ПродЦена,2);
КонецФункции

Процедура ПроверкаВыполненныхРабот()
	

	Если ГрупповаяОбработка()=0 Тогда
		спПроведениеДокВсе=СоздатьОбъект("СписокЗначений");
	
		таб = СоздатьОбъект("ТаблицаЗначений");
		ВыгрузитьТабличнуюЧасть(таб,"Операции");
		таб.Свернуть("Операции","");
		таб.ВыбратьСтроки();
		Пока таб.ПолучитьСтроку() = 1 Цикл
			Если ПустоеЗначение(таб.Операции)=0 Тогда
				спПроведениеДокВсе.ДобавитьЗначение(таб.Операции);		
			КонецЕсли;
		КонецЦикла;

		Если спПроведениеДокВсе.РазмерСписка()<>0 Тогда
			Сообщить("Перепроведение выполненных работ ...");
			ОбработкаОжидания("глПроведениеДокОтложенное",5);
		КонецЕсли;

		ДокПодч = СоздатьОбъект("Документ");
		ДокПодч.ВыбратьПодчиненныеДокументы(,,ТекущийДокумент());
		Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
			Если ДокПодч.Вид()="ВыполненныеОперации" Тогда
				Если спПроведениеДокВсе.НайтиЗначение(ДокПодч.ТекущийДокумент())=0 Тогда
					ОбъектУдалить(ДокПодч,0);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
	
//***********************************************
Процедура РасчетПриходныхЦен()
// Количество произведенного товара выражаем
// в базовой единице исходного товара
// Себестоимость исходного товара и стоимость работы распределяем
// по товарным позициям пропорционально пересчитанному количеству

// Рассчитаем суммарное количество произведенной продукции

	ВсегоКол=0;
	ОбщийСортКоэф=0;
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Если Товар.ВидТовара=Перечисление.ВидыТоваров.Услуга Тогда
			// Как услуга оформляются отходы производства
			Продолжить;
		КонецЕсли;          
		
		ОбщийСортКоэф=ОбщийСортКоэф+СортКоэф;
	КонецЦикла;

	// Еще раз пройдемся по строкам для расчета себестоимости
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Если Товар.ВидТовара=Перечисление.ВидыТоваров.Услуга Тогда
			// Как услуга оформляются отходы производства
			Продолжить;
		КонецЕсли;
		              
		Сумма=(ИсхСебестоимость/ОбщийСортКоэф)*СортКоэф;
	
//		Сумма=(ИсхСебестоимость/ОбщийСортКоэф)*СортКоэф*Количество;
		Цена=Сумма/Количество;
	КонецЦикла;
КонецПроцедуры

//**АУ************************************************
Процедура СписаниеПоПартиям(времРегПарт, ТаблДвижений)
	
	времРегПарт.УстановитьЗначениеФильтра("Фирма", Фирма, 1);
	
	времРегПарт.ВыгрузитьИтоги(ТаблДвижений, 1, 1);
	ТаблПарт = СоздатьОбъект("ТаблицаЗначений"); 
	ТаблДвижений.Выгрузить(ТаблПарт);
	ТаблДвижений.УдалитьСтроки();
	НадоСписать = ИсхКоличество;
	Если ИсхПартия.Выбран()=1 Тогда
		Нстр = "";
	    Если ТаблПарт.НайтиЗначение(ИсхПартия, Нстр, "Партия") = 1 Тогда
	        // надо списать с этой партии и удалить ее
			ТаблПарт.ПолучитьСтрокуПоНомеру(Нстр);
			ТаблДвижений.НоваяСтрока();
			ТаблДвижений.Фирма = "";
			Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда
				ТаблДвижений.ПрихДокумент = "";//ТаблПарт.ПрихДокумент;
				ТаблДвижений.Партия = "";//ТаблПарт.Партия;
				ТаблДвижений.Контрагент = "";//ТаблПарт.Контрагент;
			Иначе
				ТаблДвижений.ПрихДокумент = ТаблПарт.ПрихДокумент;
				ТаблДвижений.Партия = ТаблПарт.Партия;
				ТаблДвижений.Контрагент = ТаблПарт.Контрагент;
			КонецЕсли;
			ТаблДвижений.Товар = ТаблПарт.Товар;
			ТаблДвижений.Статус = ТаблПарт.Статус;
			ТаблДвижений.Склад = ТаблПарт.Склад;
			ТаблДвижений.СрокРеализации = ТаблПарт.СрокРеализации;
			ТаблДвижений.ОстатокТовара = Мин(ТаблПарт.ОстатокТовара, НадоСписать);
			НадоСписать = НадоСписать - ТаблДвижений.ОстатокТовара;
			ТаблДвижений.Стоимость = ТаблПарт.Стоимость / ТаблПарт.ОстатокТовара * ТаблДвижений.ОстатокТовара;
			ТаблДвижений.ПродСтоимость = ТаблПарт.ПродСтоимость  / ТаблПарт.ОстатокТовара * ТаблДвижений.ОстатокТовара;
			ТаблДвижений.НДС = ТаблПарт.НДС / ТаблПарт.ОстатокТовара * ТаблДвижений.ОстатокТовара;
			ТаблПарт.ОстатокТОвара = ТаблПарт.ОстатокТовара - ТаблДвижений.ОстатокТовара;
			ТаблПарт.Стоимость = ТаблПарт.Стоимость - ТаблДвижений.Стоимость;
			ТаблПарт.ПродСтоимость = ТаблПарт.ПродСтоимость - ТаблДвижений.ПродСтоимость;
			ТаблПарт.НДС = ТаблПарт.НДС - ТаблДвижений.НДС;  
			Если ТаблПарт.ОстатокТовара = 0 Тогда
			    ТаблПарт.УдалитьСтроку();
			КонецЕсли;
	    КонецЕсли;
	КонецЕсли;
	Если НадоСписать = 0 Тогда
	    возврат;
	КонецЕсли;  
	// если мы еще здесь - надо дальше искать партии
	
	Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.FIFO Тогда
		ТаблПарт.Сортировать("+СрокРеализации,-Статус,+ПрихДокумент",1);
	ИначеЕсли Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO Тогда
		ТаблПарт.Сортировать("-СрокРеализации,-Статус,-ПрихДокумент",1);
	ИначеЕсли Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда	
		ТаблПарт.Сортировать("-Статус,+ПрихДокумент",1);                            
	КонецЕсли;
	ТаблПарт.ВыбратьСтроки();
	Пока ТаблПарт.ПолучитьСтроку()=1 Цикл
		Если НадоСписать=0 Тогда
			Прервать;
		КонецЕсли;                       
		
		Если ТаблПарт.ОстатокТовара=0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблДвижений.НоваяСтрока();
		ТаблДвижений.Фирма = "";
		Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда
			ТаблДвижений.ПрихДокумент = "";//ТаблПарт.ПрихДокумент;
			ТаблДвижений.Партия = "";//ТаблПарт.Партия;
			ТаблДвижений.Контрагент = "";//ТаблПарт.Контрагент;
		Иначе
			ТаблДвижений.ПрихДокумент = ТаблПарт.ПрихДокумент;
			ТаблДвижений.Партия = ТаблПарт.Партия;
			ТаблДвижений.Контрагент = ТаблПарт.Контрагент;
		КонецЕсли;
		ТаблДвижений.Товар = ТаблПарт.Товар;
		ТаблДвижений.Статус = ТаблПарт.Статус;
		ТаблДвижений.Склад = ТаблПарт.Склад;
		ТаблДвижений.СрокРеализации = ТаблПарт.СрокРеализации;
		ТаблДвижений.ОстатокТовара = Мин(ТаблПарт.ОстатокТовара, НадоСписать);
		НадоСписать = НадоСписать - ТаблДвижений.ОстатокТовара;
		ТаблДвижений.Стоимость = ТаблПарт.Стоимость / ТаблПарт.ОстатокТовара * ТаблДвижений.ОстатокТовара;
		ТаблДвижений.ПродСтоимость = ТаблПарт.ПродСтоимость  / ТаблПарт.ОстатокТовара * ТаблДвижений.ОстатокТовара;
		ТаблДвижений.НДС = ТаблПарт.НДС / ТаблПарт.ОстатокТовара * ТаблДвижений.ОстатокТовара;
	КонецЦикла;
	Если НадоСписать > 0 Тогда
	    Сообщить("Товар "+ИсходныйТовар+" не распределился по партиям в количестве "+НадоСписать, "!!!");
		ТаблДвижений.НоваяСтрока();
		ТаблДвижений.Товар = ИсходныйТовар;
		ТаблДвижений.Склад = Склад;
		ТаблДвижений.СрокРеализации = ИсхСрокРеализ;
		ТаблДвижений.ОстатокТовара = НадоСписать;
		СтоимБезНДС=ИсходныйТовар.ЦенаПриобретения*КурсДляВалюты(ИсходныйТовар.ВалютаЗакупки,ДатаДок)*НадоСписать;
		ПроцНДС=ПроцентНДС(ИсходныйТовар.СтавкаНДС);
		ТаблДвижений.Стоимость = СтоимБезНДС;
		ТаблДвижений.ПродСтоимость = СтоимБезНДС;
		ТаблДвижений.НДС=(СтоимБезНДС*ПроцНДС/100)*НадоСписать;
	КонецЕсли;  
	
КонецПроцедуры //СписаниеПоПартииям

//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения() Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ОбработкаПроведения()
//Закомментировано Инсталлятором МОД:Процедура ОбработкаПроведения()
	// контроль себестоимости
	Если семМожноПровести( Контекст ) = 0 Тогда Возврат; КонецЕсли;
	Если глПроверкаСкладаПоПользователю(Контекст,Склад)=0 Тогда
		НеПроводить(Контекст,"Нельзя использовать данный склад!");
		Возврат;
	КонецЕсли;
	
	// надо записать партии
	СпрПартии 	   = СоздатьОбъект("Справочник.Партии");
	СпрОперации 	  = СоздатьОбъект( "Справочник.КоэффициентыВыхода" );
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Если (Партия.Выбран() = 0) и (Товар.Выбран() = 1) Тогда
			СпрПартии.ИспользоватьВладельца(Товар);
//			Сообщить("Для товара "+Товар.Код+" "+Товар+" записана новая партия!");
			глСоздатьНовыйОбъект(СпрПартии); 
			Попытка
			//Закомментировано Инсталлятором МОД:СпрПартии.Записать();
			//Начало текста, вставленного Инсталлятором МОД
				СпрПартии.Записать();
			//Конец текста, вставленного Инсталлятором МОД
                	Партия=СпрПартии.ТекущийЭлемент();
			Исключение  
				НеПроводить(Контекст,"Строка документа: " + НомерСтроки + " Ошибка: " + ОписаниеОшибки());
				Прервать;
			КонецПопытки;
		КонецЕсли;
		
		СпрОперации.ИспользоватьВладельца(Товар);
		ЕстьОперация = 0;
		СпрОперации.ВыбратьЭлементы();
		Пока СпрОперации.ПолучитьЭлемент() = 1 Цикл
			Если СпрОперации.ПометкаУдаления()=1 Тогда
				Продолжить;
			Иначе
				ЕстьОперация=1;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если (ГрупповаяОбработка()=0) И (ЕстьОперация=1) и (ПустоеЗначение(Операции)=1) Тогда
			НеПроводить(Контекст,"В строке документа: " + НомерСтроки + " не заполена операция!");
		КонецЕсли;
		
	КонецЦикла; 
	
	ПроверкаВыполненныхРабот();
	
	ВремРегистры=СоздатьОбъект("Регистры");
	РегОст=ВремРегистры.ОстаткиТоваров;
	РегПарт=ВремРегистры.ПартииТоваров;
	РегОст.УстановитьЗначениеФильтра("Склад",Склад,1);
	РегОст.УстановитьЗначениеФильтра("Товар",ИсходныйТовар,1);
	
	Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
		РегПарт.УстановитьЗначениеФильтра("Склад",Склад,1);
	КонецЕсли;
	
	РегПарт.УстановитьЗначениеФильтра("Товар",ИсходныйТовар,1);

	Если (ИсхКоличество=0) И (ДатаДок>=Дата("01.09.03")) Тогда
		НеПроводить(Контекст,"Нулевое количество исходного товара!");	
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(ИсхСрокРеализ) = 0 Тогда
//		РегПарт.УстановитьЗначениеФильтра("СрокРеализации",ИсхСрокРеализ,1);
	КонецЕсли;
	
	Если ИтогиАктуальны()=0  Тогда
		РегОст.ВременныйРасчет();
		РегПарт.ВременныйРасчет();                                
		ВремРегистры.Актуальность(1);
		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
	КонецЕсли;
	///***********************************************************
	//<<Алгоритм Успеха>> (begin)
	
	Если НЕ(глРазрОтрицОстатки=Да) Тогда
		ОстатокТовара=РегОст.СводныйОстаток(ИсходныйТовар,Склад,,"ОстатокТовара");
		Если ОстатокТовара<ИсхКоличество Тогда
			Сообщить("На складе нет нужного количества товара "+ИсходныйТовар.Код+ " "+ ИсходныйТовар.Наименование + ".");
			НеПроводить(Контекст," На складе осталось "+ОстатокТовара
			+" "+ИсходныйТовар.БазоваяЕдиницаИзмерения+"." );
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблДвижений = СоздатьОбъект("ТаблицаЗначений");
	СписаниеПоПартиям(РегПарт, ТаблДвижений);
	//<<Алгоритм Успеха>> (end) 
	//************************************************************
	//***********************************************************
	//<<Алгоритм Успеха>> (begin)
	СтоСписания = ТаблДвижений.ИТог("Стоимость");
	НдсСписания = ТаблДвижений.Итог("НДС");
	//<<Алгоритм Успеха>> (end) 
	//************************************************************
	         
	ИсхСебестоимость=СтоСписания;

	РасчетПриходныхЦен();
	
	//Если Окр(ИсхСебестоимость,2)<>Окр(Итог("Сумма"),2) Тогда
	//	Если Вопрос("Себестоимость сотавляющих не равна себестоимости исходного товара !
	//	| Продолжить ?",4,0)=7 тогда
	//		СтатусВозврата(0);
	//	КонецЕсли;
	//КонецЕсли;

	Регистр.ОстаткиТоваров.Фирма= Фирма;
	Регистр.ОстаткиТоваров.Склад=Склад;
	Регистр.ОстаткиТоваров.Товар=ИсходныйТовар;
	Регистр.ОстаткиТоваров.ОстатокТовара=ИсхКоличество;
	Регистр.ОстаткиТоваров.ФлагУчета=2;
	Регистр.ОстаткиТоваров.ДвижениеРасходВыполнить();
	
	//Расход исходного по партиям
	//AU
	Регистр.ПартииТоваров.ФлагУчета=6;
	//endAU
	Регистр.ПартииТоваров.Товар=ИсходныйТовар;
//	Регистр.ПартииТоваров.Статус="К"; 
	// склпарт
	Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
	    Регистр.ПартииТоваров.Склад=Склад;
	Иначе
		Регистр.ПартииТоваров.Склад="";
	КонецЕсли;
	//***********************************************************
	//<<Алгоритм Успеха>> (begin) 
	ТаблДвижений.ВыбратьСтроки();
	Пока ТаблДвижений.ПолучитьСтроку() = 1 Цикл
		Регистр.ПартииТоваров.Фирма=Фирма;
		Регистр.ПартииТоваров.Статус=ТаблДвижений.Статус;  
		Регистр.ПартииТоваров.Контрагент=ТаблДвижений.Контрагент;  
		Регистр.ПартииТоваров.ПрихДокумент=ТаблДвижений.ПрихДокумент;  
		Регистр.ПартииТоваров.Партия = ТаблДвижений.Партия;
		Регистр.ПартииТоваров.СрокРеализации = ТаблДвижений.СрокРеализации;
		Регистр.ПартииТоваров.ОстатокТовара=ТаблДвижений.ОстатокТовара;
		Регистр.ПартииТоваров.Стоимость=ТаблДвижений.Стоимость;
		Регистр.ПартииТоваров.ПродСтоимость=ТаблДвижений.ПродСтоимость;
		Регистр.ПартииТоваров.НДС=ТаблДвижений.НДС;  
		Регистр.ПартииТоваров.КодОперации=СписаниеНаПроизводcтвоБлюда;
		Регистр.ПартииТоваров.ДвижениеРасходВыполнить();
	КонецЦикла;
	//<<Алгоритм Успеха>> (end) 
	//************************************************************
	////-- -- -- --  
	////~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	//Приход Составляющих по остаткам
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Если Константа.ПартииНаСкладах = Да Тогда
	    Регистр.ПартииТоваров.Склад = СкладПолучатель;
	Иначе
		Регистр.ПартииТоваров.Склад = "";
	КонецЕсли;
	
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Регистр.ОстаткиТоваров.Склад=СкладПолучатель;
		Регистр.ОстаткиТоваров.Товар=Товар;
		Регистр.ОстаткиТоваров.ОстатокТовара=Количество;
		Регистр.ОстаткиТоваров.ФлагУчета=2;
		Регистр.ОстаткиТоваров.ДвижениеПриходВыполнить();
		//  Приход по партиям
		Регистр.ПартииТоваров.Товар=Товар;
		
		КоэффВнутрСеб = Товар.Поставщик.КоэффВнутрСебестоимости.Получить(ДатаДок);
		Если КоэффВнутрСеб = 0 Тогда
			КоэффВнутрСеб = 1;
		КонецЕсли;

		Регистр.ПартииТоваров.Статус="К";
		Регистр.ПартииТоваров.Контрагент=Поставщик; //??? - с 04.01 во всех новых документах будет заполнен поставщик
		
		Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему Тогда
			Регистр.ПартииТоваров.ПрихДокумент="";
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			Регистр.ПартииТоваров.Партия = "";
			Регистр.ПартииТоваров.СрокРеализации = "";
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			//Если ((ТипУчета=0)Или(ТипУчета=1)) Тогда
				Регистр.ПартииТоваров.Фирма=Фирма;
				Регистр.ПартииТоваров.ОстатокТовара=Количество;
				Регистр.ПартииТоваров.Стоимость=Сумма;
				Регистр.ПартииТоваров.ПродСтоимость=Сумма*КоэффВнутрСеб;
				Регистр.ПартииТоваров.НДС=НДС;     
				Регистр.ПартииТоваров.КодОперации=ПроизводствоБлюда;
				Регистр.ПартииТоваров.ДвижениеПриходВыполнить();
			//КонецЕсли;
			//Если ((ТипУчета=2)Или(ТипУчета=1)) Тогда
			//	Регистр.ПартииТоваров.Фирма=Фирма;
			//	Регистр.ПартииТоваров.ОстатокТовара=Количество;
			//	Регистр.ПартииТоваров.Стоимость=Сумма;
			//	Регистр.ПартииТоваров.НДС=НДС;                      
			//	Регистр.ПартииТоваров.КодОперации=ПроизводствоБлюда;
			//	Регистр.ПартииТоваров.ДвижениеПриходВыполнить();
			//КонецЕсли;
		Иначе
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			Регистр.ПартииТоваров.Партия = глЗаполнитьПартию(Контекст,Партия);
			Регистр.ПартииТоваров.СрокРеализации = СрокРеализ;         
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			Регистр.ПартииТоваров.ПрихДокумент=ТекущийДокумент();
			//Если ((ПартияИсх.ТипУчета=0)Или(ПартияИсх.ТипУчета=1)) Тогда
				Регистр.ПартииТоваров.Фирма=Фирма;
				Регистр.ПартииТоваров.ОстатокТовара=Количество;
				Регистр.ПартииТоваров.Стоимость=Сумма;
				Регистр.ПартииТоваров.ПродСтоимость=Сумма*КоэффВнутрСеб;
				Регистр.ПартииТоваров.НДС=НДС;                      
				Регистр.ПартииТоваров.КодОперации=ПроизводствоБлюда;
				Регистр.ПартииТоваров.ДвижениеПриходВыполнить();
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;                    
	 
	СебестоимостьШ=ИсхСебестоимость;
//	Если глЗаполнитьРеквизитыДокументаШ(Контекст)=0 Тогда
//	    Сообщить("Внимание: Не удалось заполнить реквизиты Ш. Обязательно обратитесь к админстратору!!!","!");
//	КонецЕсли;
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеМОД(Контекст)=1 Тогда
	    Возврат;
	КонецЕсли;
	стар_ОбработкаПроведения();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаУдаленияПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеПоАлгоритмуМОД=1 Тогда
	    Возврат;
	КонецЕсли;
	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
	
	ПриОтменеПроведенияДокумента(ТекущийДокумент());

КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД

