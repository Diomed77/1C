Перем Валюта_Прежн;
Перем Курс_Прежн;
Перем Режим;
Перем Запрос;
перем запросВыполнен;
Перем НеЗакрывать;
Перем фДляВсех;//установить мануальную скидку для всех товаров
Перем фДокЗаписан;
Перем фСозданиеОжидаемойПоставки,фИзменитьОжидаемуюПоставку;//флаг для создания ОжидаемойПоставки
Перем ИнформационнаяСтрока;
Перем Prompt;   
Перем оФорма;
Перем оПривязки;
Перем тзДанные;
Перем оТаб;
Перем флНовыйДокумент,счТекст;//при формировании ож поставки

Перем ОбъектП			Экспорт;	//:AddIn.R_SQL

Перем Цвет[4], ЦветЦифр;
Перем тСкидкаПоставщикуТабл;//таблица скидкаПоставщику
Перем старНоменклатура;
Перем старДатаОтгрузки,стардокОжидаемаяПоставка;//перем для определения изменения ДатыОтгрузки и ожидаемойПоставки
Перем фл_ПризнакВидаСкидки;

Процедура УстУпакКол() Далее
Процедура УдалениеСкидки() Далее
Процедура ПриЗаписи() Далее


Процедура ВыслатьЭлектронныйЗаказПоставщику()
//	СписокДок=СоздатьОбъект("СписокЗначений");
//	СписокДок.ДобавитьЗначение(ТекущийДокумент());
//	ПриЗаписи();
//	Провести();

	ПриЗаписи();
	Провести();
	СпПар = СоздатьОбъект("СписокЗначений");
	СпПар.Установить("ВидОперации","ЭкспортЗаказаПоставщику");
	СпПар.Установить("Документ",ТекущийДокумент());
	ОткрытьФорму("Обработка",СпПар,КаталогИБ()+"ExtForms\EDI-Export.ert");
КонецПроцедуры

//{***блок процедур расчет веса и подонов***\\
Функция ВесУпак(ВидУпак="Первичная",Товар)
	Если Товар.Выбран()=0 Тогда
		Возврат 0;
	КонецЕсли;
	ТекстЗапроса="SELECT SUM($УпаковкаТоваров.ВесБруттоУпаковки) ВесУпаковки
	|			  FROM $Справочник.УпаковкаТоваров AS УпаковкаТоваров	
	|			  WHERE УпаковкаТоваров.PARENTEXT=:ВыбТовар AND ISMARK = 0
	|				AND $УпаковкаТоваров.ТипУпаковки = $Перечисление.ТипыУпаковки."+ВидУпак;
	РС=СоздатьОбъект("ODBCRecordSet");
	РС.УстБД1С();
	РС.УстановитьТекстовыйПараметр("ВыбТовар",Товар);
	ТЗ=РС.ВыполнитьИнструкцию(ТекстЗапроса);
	Возврат ТЗ.Итог("ВесУпаковки");
КонецФункции
//****************************************
Функция НеттоПервичное(Товар)
	Если Товар.ЕдНеттоВеса.Выбран()=1 Тогда
		ЕдПервУпак=Товар.ЕдНеттоВеса.Единица;
		КоэфНеттоВеса = Окр(1/Товар.ЕдНеттоВеса.Коэффициент,4,1);
	Иначе
		ЕдПервУпак=Товар.БазоваяЕдиницаИзмерения;
		КоэфНеттоВеса=1;
	КонецЕсли;
	ВесПервичной = Товар.Вес / КоэфНеттоВеса;
	Возврат ВесПервичной;	
КонецФункции
//****************************************
Функция БруттоПервичное(Товар)
	Возврат НеттоПервичное(Товар) + ВесУпак("Первичная",Товар);	
КонецФункции
//****************************************
Функция НеттоВторичное(Товар)
	Возврат БруттоПервичное(Товар)*Товар.ЛогистикаКолВУпаковке;	
КонецФункции
//****************************************
Функция БруттоВторичное(Товар)
	Возврат НеттоВторичное(Товар) + ВесУпак("Вторичная",Товар);	
КонецФункции
//****************************************
Функция НеттоТретичное(Товар)
	Возврат БруттоВторичное(Товар)*Товар.ЛогистикаКолУпакНаЕвроПалете*Товар.ЛогистикаКолУпакНаПалетеВРяду;	
КонецФункции
//****************************************
Функция БруттоТретичное(Товар)
	Возврат НеттоТретичное(Товар) + ВесУпак("Третичная",Товар);	
КонецФункции


Функция БруттоТовара(пТовар,пКоличество,Режим="Брутто") 
	СумВес=0;
	КолВторичной=0;
	КолТретичной=0;
	
	Если пТовар.ЕдНеттоВеса.Выбран()=1 Тогда
		КоэфНеттоВеса = Окр(1/пТовар.ЕдНеттоВеса.Коэффициент,4,1);;
	Иначе
		КоэфНеттоВеса=1;
	КонецЕсли;	
	
	СумВес=БруттоПервичное(пТовар)*пКоличество*КоэфНеттоВеса;
	//Расчет вторичной
	Если пТовар.ЛогистикаКолВУпаковке<>0 Тогда
		КолВторичной=Окр(пКоличество*КоэфНеттоВеса/пТовар.ЛогистикаКолВУпаковке,0,1);
		СумВес=СумВес+ВесУпак("Вторичная",пТовар)*КолВторичной;
		//расчет третичной
		Если (пТовар.ЛогистикаКолУпакНаЕвроПалете*пТовар.ЛогистикаКолУпакНаПалетеВРяду)<>0 Тогда

//
		//Если пТовар.ЕдНеттоВеса.Выбран()=1 Тогда
		//	КоэфНеттоВеса = пТовар.ЕдНеттоВеса.Коэффициент;
		//Иначе
		//	КоэфНеттоВеса=1;
		//КонецЕсли;
		НаОдномПоддоне = пТовар.ЛогистикаКолВУпаковке * пТовар.ЛогистикаКолУпакНаЕвроПалете * пТовар.ЛогистикаКолУпакНаПалетеВРяду;
		Если НаОдномПоддоне = 0 Тогда
			Поддонов = 0;
			ВесНаОдномПоддоне=0;
		Иначе
			Поддонов = пКоличество*КоэфНеттоВеса/НаОдномПоддоне;
			ВесНаОдномПоддоне = БруттоТретичное(пТовар);
		КонецЕсли;
		
		КолТретичной=Поддонов;
//		ИтогоПоддонов=ИтогоПоддонов+Поддонов;
//		ИтогоВес = ИтогоВес + Поддонов*ВесНаОдномПоддоне;
//
		//	КолТретичной=Окр(КолВторичной/(Товар.ЛогистикаКолУпакНаЕвроПалете*Товар.ЛогистикаКолУпакНаПалетеВРяду),0,1);
			СумВес=СумВес+ВесУпак("Третичная",пТовар)*КолТретичной;
		КонецЕсли;
	КонецЕсли;
	
	Если Режим="Брутто" Тогда
		Возврат СумВес;	
	ИначеЕсли Режим="КолВторичной" Тогда
		Возврат КолВторичной;
	ИначеЕсли Режим="КолТретичной" Тогда
		Возврат КолТретичной;
	КонецЕсли;
КонецФункции 


//======================================================================
Функция ВыводКоличестваПоддонов()
	л_Кол=БруттоТовара(Товар,Количество,"КолТретичной");
	Если л_Кол=0 Тогда
		л_Кол=0;
	ИначеЕсли (л_Кол<0.01)И(л_Кол<>0) Тогда	
		л_Кол=0.01;
	КонецЕсли;
		
	Возврат Окр(л_Кол,2);
	
КонецФункции // ВыводКоличестваПоддонов

//}***блок процедур веса и подонов***\\

//{***блок процедур скидкаПоставщику***\\

Процедура ОчисткаТаблицыСкидок()
	тСкидкаПоставщикуТабл.Очистить();
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		АвтоСкидка=ПолучитьПустоеЗначение(АвтоСкидка);
		ЦенаСоСкидкой=Цена;
		СуммаБезСкидки=Сумма;
	КонецЦикла;
КонецПроцедуры
Процедура РасчетЦеныСоСкидкой()
Перем пСуммабезСкидки;
	Если ПустоеЗначение(СкидкаПоставщику)=0 Тогда
		Если СкидкаПоставщику.ПризнакВидаСкидки=2 Тогда
			Если ЦенаИзСкидки<>0 Тогда
				ЦенаСоСкидкой=ЦенаИзСкидки-((цена*МанСкидка)/100);
			Иначе
				ЦенаСоСкидкой=цена-(цена*(МанСкидка+АвтоСкидка)/100);
			КонецЕсли;
			
		Иначе
			ЦенаСоСкидкой=цена-(цена*(МанСкидка+АвтоСкидка)/100);
		КонецЕсли;
		
	Иначе
		ЦенаСоСкидкой=цена-(цена*(МанСкидка+АвтоСкидка)/100);
	КонецЕсли;
	
	//Заменяем расчет суммы со скидкой и без
	Выч_суммы_накл_сНП(Контекст,,1); //изменяем цену
	пСуммабезСкидки=Сумма;
	СуммаБезСкидки=пСуммабезСкидки;	
	Сумма=СуммабезСкидки-(СуммабезСкидки*(МанСкидка+АвтоСкидка)/100);
	СуммаПодтв=ЦенаСоСкидкой*Подтверждено;

КонецПроцедуры
Процедура УстановкаАвтоСкидки()
	//поиск действующего документа 
	
	
	//ТекстЗапроса="SELECT TOP 1 СкидкаПоставщику2.IDDOC [Ссылка $Документ.СкидкаПоставщику2]
	//|	, NullIf($СкидкаПоставщику2.НачалоДействия, '17530101') НачалоДействия
	//|	, NullIf($СкидкаПоставщику2.КонецДействия, '17530101') КонецДействия
	//|	, Журнал.DOCNO Документ_ном
	//|FROM $Документ.СкидкаПоставщику2 AS СкидкаПоставщику2
	//|	INNER JOIN _1SJOURN AS Журнал ON СкидкаПоставщику2.IDDOC = Журнал.IDDOC
	//|WHERE (Журнал.IDDOCDEF = $ВидДокумента.СкидкаПоставщику2)
	//|	AND ($СкидкаПоставщику2.Поставщик = :Клиент)
	//|	AND ($СкидкаПоставщику2.НачалоДействия <= :ТекущаяДата)
	//|	AND ($СкидкаПоставщику2.КонецДействия >= :ТекущаяДата)
	//|ORDER BY Журнал.DATE_TIME_IDDOC DESC";
	
	ТекстЗапроса="SELECT TOP 1 СкидкиПоставщиков.IDDOC [ссылка $Документ.СкидкаПоставщику2]
		|, Журнал.DOCNO Документ_ном
		|, СкидкиПоставщиков.LINENO_ НомерСтроки
		|, NullIf($СкидкиПоставщиков.НачалоДействия, '17530101') НачалоДействия
		|, NullIf($СкидкиПоставщиков.КонецДействия, '17530101') КонецДействия
		|, $СкидкиПоставщиков.Процент Процент
		|, $СкидкиПоставщиков.Периодичность [Периодичность $Перечисление.ПериодичностьВыставленияСчетов]
		|, NullIf(Cast(Left(Журнал.DATE_TIME_IDDOC, 8) AS datetime), '17530101') Документ_дата
		|FROM $Регистр.СкидкиПоставщиков AS СкидкиПоставщиков
		|	INNER JOIN _1SJOURN AS Журнал ON СкидкиПоставщиков.IDDOC = Журнал.IDDOC
		|WHERE ($СкидкиПоставщиков.Поставщик = :Клиент)
		|	AND ($СкидкиПоставщиков.НачалоДействия <= :ТекущаяДата)
		|	AND ($СкидкиПоставщиков.КонецДействия >= :ТекущаяДата)
		|	AND ($СкидкиПоставщиков.Периодичность = :Периодичность)
		|ORDER BY Журнал.DOCNO DESC";
	
	Запрос=СоздатьОбъект("ODBCRecordSet");
	Запрос.УстановитьТекстовыйПараметр("Клиент",Клиент);
	Запрос.УстановитьТекстовыйПараметр("Периодичность",Перечисление.ПериодичностьВыставленияСчетов.Взаявке);
	Запрос.УстановитьТекстовыйПараметр("ТекущаяДата",ДатаДок);
	
	тСкидкаПоставщику=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,тСкидкаПоставщику);
	//тСкидкаПоставщику.Показать();
	
	тСкидкаПоставщику.ВыбратьСтроки();
	Если тСкидкаПоставщику.ПолучитьСтроку() = 1 Тогда
		СкидкаПоставщику=тСкидкаПоставщику.Ссылка;
	Иначе
		СкидкаПоставщику=ПолучитьПустоеЗначение(СкидкаПоставщику)
	КонецЕсли;

	//Запрос табличной части скидок поставщика
	
	//обнулить все скидки
	ОчисткаТаблицыСкидок();		
	//обнулить все скидки

	Если ПустоеЗначение(СкидкаПоставщику)=0 Тогда
		ТекстЗапроса="SELECT СкидкиПоставщиков.LINENO_ НомерСтроки
		|, СкидкиПоставщиков.IDDOC [Документ $Документ.СкидкаПоставщику2]
		|, $СкидкиПоставщиков.Поставщик [Поставщик $Справочник.Контрагенты]
		|, NullIf($СкидкиПоставщиков.НачалоДействия, '17530101') НачалоДействия
		|, NullIf($СкидкиПоставщиков.КонецДействия, '17530101') КонецДействия
		|, $СкидкиПоставщиков.Процент Процент
		|, $СкидкиПоставщиков.ПризнакВидаСкидки ПризнакВидаСкидки
		|, $СкидкиПоставщиков.Цена Цена
		|, $СкидкиПоставщиков.ЦенаСоСкидкой ЦенаСоСкидкой
		|, $СкидкиПоставщиков.Товар [Товар $Справочник.Номенклатура]
		|, $СкидкиПоставщиков.ПризнакТовара ПризнакТовара
		|, $СкидкиПоставщиков.ВидСкидки [ВидСкидки $Перечисление.ВидыКредитныхНот]
		|, $СкидкиПоставщиков.Периодичность [Периодичность $Перечисление.ПериодичностьВыставленияСчетов]
		|, $СкидкиПоставщиков.ОбщийПроцент ОбщийПроцент
		|FROM $Регистр.СкидкиПоставщиков AS СкидкиПоставщиков
		|WHERE (СкидкиПоставщиков.IDDOC = :ссылка)
		|	AND ($СкидкиПоставщиков.Периодичность = :Периодичность)
		|ORDER BY СкидкиПоставщиков.LINENO_";
	
		Запрос=СоздатьОбъект("ODBCRecordSet");
		Запрос.УстановитьТекстовыйПараметр("Периодичность",Перечисление.ПериодичностьВыставленияСчетов.Взаявке);
		Запрос.УстановитьТекстовыйПараметр("ссылка",СкидкаПоставщику);
		
		Запрос.ВыполнитьИнструкцию(ТекстЗапроса,тСкидкаПоставщикуТабл);
		//тСкидкаПоставщикуТабл.Показать();
	КонецЕсли;
	
КонецПроцедуры
Функция ПоискТовараАвтоскидки(Товар)//ищем автоскидку на конкретный товар
	тСкидкаПоставщикуТабл.ВыбратьСтроки();
	Пока тСкидкаПоставщикуТабл.ПолучитьСтроку() = 1 Цикл
		Если Товар=тСкидкаПоставщикуТабл.Товар Тогда
			Если тСкидкаПоставщикуТабл.ПризнакВидаСкидки=2 Тогда
				ЦенаИзСкидки=тСкидкаПоставщикуТабл.ЦенаСоСкидкой;
				Возврат тСкидкаПоставщикуТабл.Процент;
			Иначе	
				Возврат тСкидкаПоставщикуТабл.Процент;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат 0;
КонецФункции
Функция ПоискОбщейАвтоскидки()//ищем автоскидку на все
	ОбщаяСкидка=0;
	тСкидкаПоставщикуТабл.ВыбратьСтроки();
	Пока тСкидкаПоставщикуТабл.ПолучитьСтроку() = 1 Цикл
		Если тСкидкаПоставщикуТабл.ВидСкидки=Перечисление.ВидыКредитныхНот.БонусныйТовар Тогда
			Продолжить;
		Иначе
			ОбщаяСкидка=ОбщаяСкидка+тСкидкаПоставщикуТабл.Процент;
		КонецЕсли;
	КонецЦикла;
	Возврат ОбщаяСкидка;
КонецФункции
Функция ПоискДокументаСкидки(МанСкидкаДокумент)
	Если ПустоеЗначение(МанСкидкаДокумент)=0 Тогда
		Док = СоздатьОбъект("Документ.СкидкаПоставщикуМан2");
		Если Док.НайтиДокумент(МанСкидкаДокумент)=1 Тогда
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
КонецФункции

Процедура ПерерасчетАвтоскидки()//общий перерасчет всех скидок
	Если КоличествоСтрок()>0 Тогда
		ВыбратьСтроки();
		Пока ПолучитьСтроку()>0 Цикл
			Если ПустоеЗначение(СкидкаПоставщику)=0 Тогда
				СкидкаПоТовару=ПоискТовараАвтоскидки(Товар);
				Если СкидкаПоТовару>0 Тогда
					АвтоСкидка=СкидкаПоТовару;
				Иначе
					АвтоСкидка=ПоискОбщейАвтоскидки();
				КонецЕсли;
			ИначеЕсли ПустоеЗначение(СкидкаПоставщику)=1 Тогда
				АвтоСкидка=ПолучитьПустоеЗначение(АвтоСкидка);
			КонецЕсли;
			
			Если ПустоеЗначение(МанСкидкаДокумент)=1 Тогда
				МанСкидка=ПолучитьПустоеЗначение(МанСкидка)
			ИначеЕсли ПустоеЗначение(МанСкидкаДокумент)=0 Тогда
				Если ПоискДокументаСкидки(МанСкидкаДокумент)=0 Тогда
					МанСкидка=ПолучитьПустоеЗначение(МанСкидка);
					МанСкидкаДокумент=ПолучитьПустоеЗначение(МанСкидкаДокумент);
				КонецЕсли;
			КонецЕсли;
			
			РасчетЦеныСоСкидкой();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура КопироватьДокумент1(_Источник, _Приемник)
	////////////////////////////////////////////////////////////
	/// Возможна ошибка копирования, проверь наличие всех реквезитов в документекопия !!
	/////////////////////////////////////////////////////////////
	Для ъ = 1 По Метаданные.ОбщийРеквизитДокумента() Цикл
		Реквизит = Метаданные.ОбщийРеквизитДокумента(ъ).Идентификатор;
		_Приемник.УстановитьАтрибут(Реквизит, _Источник.ПолучитьАтрибут(Реквизит));
	КонецЦикла;

	Для ъ = 1 По Метаданные.Документ(_Источник.Вид()).РеквизитШапки() Цикл
		Реквизит = Метаданные.Документ(_Источник.Вид()).РеквизитШапки(ъ).Идентификатор;
		_Приемник.УстановитьАтрибут(Реквизит, _Источник.ПолучитьАтрибут(Реквизит));
	КонецЦикла;

	_Источник.ВыбратьСтроки();
	Пока _Источник.ПолучитьСтроку() = 1 Цикл
		_Приемник.НоваяСтрока();
		Для ъъ = 1 По Метаданные.Документ(_Источник.Вид()).РеквизитТабличнойЧасти() Цикл
			Реквизит = Метаданные.Документ(_Источник.Вид()).РеквизитТабличнойЧасти(ъъ).Идентификатор;
			_Приемник.УстановитьАтрибут(Реквизит, _Источник.ПолучитьАтрибут(Реквизит));
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры	// КопироватьДокумент

Процедура КлонированиеМанСкидок(пМанСкидкаДокумент)
	
	Перем ДокОсн;
	
	
	ДокОсн=пМанСкидкаДокумент;
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Если ПустоеЗначение(МанСкидкаДокумент)=1 Тогда
			Док = СоздатьОбъект("Документ.СкидкаПоставщикуМан2");
			Док.Новый();
			Док.Записать();
			КопироватьДокумент1(ДокОсн,Док);
			Док.IDD=ПолучитьУникальныйIDD();
			Док.ДатаДок="01.01.1980"; 	
			Док.Цена=Цена;
			Док.ДокументОснование=ТекущийДокумент();
			Док.АвтоСкидка=АвтоСкидка;
			Док.Товар=Товар;
			Док.Записать();
			Если Док.Провести(0,)=1 Тогда
				МанСкидкаДокумент=Док.ТекущийДокумент();
				МанСкидка=Док.ПроцентСкидки;
				РасчетЦеныСоСкидкой();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//======================================================================
Процедура ПриРедактированииНовойСтроки()
	
КонецПроцедуры // ПриРедактированииНовойСтроки
Процедура ПриНачалеРедактированияСтроки() //установка мануальной скидки
	Перем фДляВсех;
	Перем фДляУдаления;
	
	Если Форма.ТекущаяКолонка()="МанСкидка" Тогда
		//конт=ВзятьКонтекст(Контекст);
		сзПараметр= СоздатьОбъект("СписокЗначений");
   			сзПараметр.ДобавитьЗначение(Товар,"Товар");
   			сзПараметр.ДобавитьЗначение(НомерДок,"НомерДок");
   			сзПараметр.ДобавитьЗначение(ДатаДок,"ДатаДок");
 			сзПараметр.ДобавитьЗначение(Автор,"Автор");
			сзПараметр.ДобавитьЗначение(Клиент,"Поставщик");
			сзПараметр.ДобавитьЗначение(МанСкидка,"ПроцентСкидки");
			сзПараметр.ДобавитьЗначение(МанСкидкаДокумент,"МанСкидкаДокумент");
			сзПараметр.ДобавитьЗначение(Цена,"Цена");
			сзПараметр.ДобавитьЗначение(АвтоСкидка,"АвтоСкидка");
		//	сзПараметр.ДобавитьЗначение(конт,"Документ");
			
		Если ПустоеЗначение(МанСкидкаДокумент)=1 Тогда //документа не существует, создаем
			сзПараметр.ДобавитьЗначение("Да","Новый");
			Записать();
  			ОткрытьФормуМодально("Документ.СкидкаПоставщикуМан2",сзПараметр,ТекущийДокумент());
 		Иначе
  			сзПараметр.ДобавитьЗначение("Нет","Новый");
 			Если ОткрытьФормуМодально(МанСкидкаДокумент,сзПараметр,ТекущийДокумент())=0 Тогда
 				//документ не найден
 				
 			КонецЕсли;;
  		КонецЕсли;
		
  		МанСкидка=сзПараметр.Получить("ПроцентСкидки");
  		МанСкидкаДокумент=сзПараметр.Получить("МанСкидкаДокумент");
  		фДляВсех=0;
  		фДляУдаления=0;
  		
  		фДляВсех=сзПараметр.Получить("фДляВсех");
  		фДляУдаления=сзПараметр.Получить("фДляУдаления");
  		  		  		
  		РасчетЦеныСоСкидкой();
  		
  		Если (фДляВсех=1)И(фДляУдаления=0)  Тогда
  			КлонированиеМанСкидок(МанСкидкаДокумент);
  		ИначеЕсли (фДляВсех=0)И(фДляУдаления=1) Тогда
  			УдалениеСкидки();
  		ИначеЕсли (фДляВсех=1)И(фДляУдаления=1) Тогда
  			ВыбратьСтроки();
			Пока ПолучитьСтроку()=1 Цикл
				УдалениеСкидки();
			КонецЦикла;	
  		КонецЕсли;
  		Записать();
  		
  	ИначеЕсли Форма.ТекущаяКолонка()="АвтоСкидка" Тогда	
  		Если ПустоеЗначение(АвтоСкидка)=1 Тогда 
  			
 		Иначе
  			сзПараметр= СоздатьОбъект("СписокЗначений");
  			сзПараметр.ДобавитьЗначение("Нет","Редактировать");
  			
  			Если ОткрытьФормуМодально(СкидкаПоставщику,сзПараметр,1)=0 Тогда
  				Возврат;
 			КонецЕсли;
  		КонецЕсли;
 		Возврат;
 	ИначеЕсли Форма.ТекущаяКолонка()="Товар" Тогда
 		старНоменклатура=Товар;
  	КонецЕсли;
КонецПроцедуры
 
Процедура ПриОкончанииРедактированияСтроки(фВвода)
	
	Если Форма.ТекущаяКолонка()="Товар" Тогда
		Если старНоменклатура=Товар Тогда
			
		Иначе
			УдалениеСкидки();
		КонецЕсли;
		РасчетЦеныСоСкидкой();
		ПерерасчетАвтоскидки();
  	КонецЕсли;
КонецПроцедуры


Процедура УдалениеСкидки()
	Если ПустоеЗначение(МанСкидкаДокумент)=0 Тогда
		Док = СоздатьОбъект("Документ.СкидкаПоставщикуМан2");
		Если Док.НайтиДокумент(МанСкидкаДокумент)=1 Тогда
			Док.Удалить(1);
			МанСкидкаДокумент=ПолучитьПустоеЗначение(МанСкидкаДокумент);
			МанСкидка=0;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры
Процедура ПриУдаленииСтроки()
	УдалениеСкидки();
КонецПроцедуры

//}блок процедур скидкаПоставщику

//{***блок процедур Ожидаемой поставки***\\

Функция ПоискОжидаемойПоставки(пКлиент,пДатаОтгрузки)
	тДок=СоздатьОбъект("ИндексированнаяТаблица");
	
	Запрос=СоздатьОбъект("ODBCRecordSet");
		//ТекстЗапроса="SELECT ОжидаемаяПоставкаОстатки.ПоПоставке [ПоПоставке $Документ]
		//|FROM $РегистрОстатки.ОжидаемаяПоставка(,,
		//|		(Клиент = :Клиент)
		//|		AND (ДатаОтгрузки = :ДатаОтгрузки)
		//|		,ПоПоставке,) AS ОжидаемаяПоставкаОстатки
		//|"; 
	
	ТекстЗапроса="SELECT Журнал.DOCNO Номер
		|   , $ОжидаемаяПоставка.ДатаОтгрузки ДатаОтгрузки
		|	, $ОжидаемаяПоставка.ПодписьМенеджера [ПодписьМенеджера $Справочник.Пользователи]
		|	, $ОжидаемаяПоставка.ПодписьЛогиста [ПодписьЛогиста $Справочник.Пользователи]
		|	, ОжидаемаяПоставка.IDDOC [Ссылка $Документ.ОжидаемаяПоставка]
		|FROM _1SJOURN AS Журнал
		|	INNER JOIN $Документ.ОжидаемаяПоставка AS ОжидаемаяПоставка ON Журнал.IDDOC = ОжидаемаяПоставка.IDDOC
		|WHERE ($ОжидаемаяПоставка.ДатаОтгрузки >= :ннДатаОтгрузки)
		|AND ($ОжидаемаяПоставка.ДатаОтгрузки <= :кнДатаОтгрузки)	
		|AND ($ОжидаемаяПоставка.Клиент = :Клиент)
		|";	
		
	Запрос.УстановитьТекстовыйПараметр("Клиент",пКлиент);      
	Если Клиент.Страна = Константа.СтранаРезидент Тогда
		Запрос.УстановитьТекстовыйПараметр("ннДатаОтгрузки",пДатаОтгрузки);//начало недели
		Запрос.УстановитьТекстовыйПараметр("кнДатаОтгрузки",пДатаОтгрузки);//конец недели
	Иначе
		Запрос.УстановитьТекстовыйПараметр("ннДатаОтгрузки",НачНедели(пДатаОтгрузки));//начало недели
		Запрос.УстановитьТекстовыйПараметр("кнДатаОтгрузки",КонНедели(пДатаОтгрузки));//конец недели
	КонецЕсли;
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,тДок);
	
	Возврат тДок;
КонецФункции
Функция ПоискОжидаемойПоставкиВЗаказах(док)
	пДок=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос=СоздатьОбъект("ODBCRecordSet");

	ТекстЗапроса="SELECT Журнал.DOCNO Документ_ном
		|	, $ЗаказПоставщику.докОжидаемаяПоставка [докОжидаемаяПоставка $Документ.ОжидаемаяПоставка]
		|FROM _1SJOURN AS Журнал
		|	INNER JOIN $Документ.ЗаказПоставщику AS ЗаказПоставщику ON Журнал.IDDOC = ЗаказПоставщику.IDDOC
		|WHERE ($ЗаказПоставщику.докОжидаемаяПоставка = :ПоПоставке)
		|";	
	Запрос.УстановитьТекстовыйПараметр("ПоПоставке",док);
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,пДок);
	
	Возврат пДок;
КонецФункции

Функция ПоискВОжидаемойПоставкеЗаказовПоставщику(док,докПоиска)
	Перем счДок;
	счДок=0;
	
	Если док.КоличествоСтрок()<1 Тогда //пустой документ
		Возврат 0;
	КонецЕсли;
	док.ВыбратьСтроки();
	Пока док.ПолучитьСтроку() = 1 Цикл
		Если док.ДокументОснованиеТабл=докПоиска Тогда
			счДок=счДок+1;
		КонецЕсли;
	КонецЦикла;
	Если док.КоличествоСтрок()=счДок Тогда //нет других заказов поставщика
		Возврат 0;//можно менять дату
	Иначе //найден другой заказ в ОжидаемойПоставке
		Возврат 1;//нельзя менять дату
	КонецЕсли;
КонецФункции

Функция ПроверкаДоступаОжидаемойПоставки(Док)
	
	Если Док.Выбран()=0 Тогда
		Возврат 2; //нет привязаных документов ОжидаемойПоставки к данному заказу
	ИначеЕсли (Док.Проведен()=1)
			ИЛИ (ПустоеЗначение(Док.ПодписьМенеджера)=0)
			ИЛИ	(ПустоеЗначение(Док.ПодписьЛогиста)=0)   Тогда
		Возврат 0; //доступ запрещен.
	ИначеЕсли Док.Проведен()=0 Тогда
		Возврат 2; //доступ разрешен.
	КонецЕсли;
	
КонецФункции
Функция ИзменениеОжидаемойПоставки(пДок,пДатаОтгрузки,Команда="Изменить")
	Док=СоздатьОбъект("Документ.ОжидаемаяПоставка");
	Если Док.НайтиДокумент(пДок)=1 Тогда
		Если ПроверкаДоступаОжидаемойПоставки(Док)=0 Тогда
			Сообщить("Ожидаемая поставка "+Док.НомерДок+" на "+пДатаОтгрузки+" заблокирована, разблокируйте или смените дату");
			Возврат 0;
		КонецЕсли;
		
		сзПараметр= СоздатьОбъект("СписокЗначений");
			сзПараметр.ДобавитьЗначение(Команда,"Команда");
			сзПараметр.ДобавитьЗначение(пДатаОтгрузки,"пДатаОтгрузки");
			сзПараметр.ДобавитьЗначение(ВзятьКонтекст(ТекущийДокумент()),"Конт");	
			сзПараметр.ДобавитьЗначение(Клиент,"Клиент");
		ОткрытьФорму(док.ТекущийДокумент(),сзПараметр);
		Возврат 1;
	КонецЕсли;
	Возврат 0;
КонецФункции

Функция СозданиеНовойОжидаемойПоставки(пДатаОтгрузки)
	//АвтоВремяОтключить();
	Док=СоздатьОбъект("Документ.ОжидаемаяПоставка");
	Док.АвтоВремяТекущее();
	Док.Новый();
	Док.IDD=ПолучитьУникальныйIDD();
	Док.ДатаОтгрузки=пДатаОтгрузки;
	Док.ОснСрокПоставки=ОснСрокПоставки;
	Док.Автор=Автор;
	Док.Агент=Агент;
	Док.Клиент=Клиент;
	Док.КлГруппа=КлГруппа;
	Док.Дата_курса=Дата_курса;
	Док.СоСрокаРеализации=СоСрокаРеализации;
	Док.Единица=Единица;
	Док.ПланВремяДоставки=ПланВремяДоставки;
	Док.СкидкаПоставщику=СкидкаПоставщику;
	Док.НеделяОтгрузки=глНомерНеделиЕвро(пДатаОтгрузки);
	Док.Склад=Склад;
	Док.Валюта=Валюта;
	Док.фДоставкаКлиента=фДоставкаКлиента;
	

//	ВремяДокумента=ТекущееВремя();
//	Док.УстановитьВремя(Число(Сред(ВремяДокумента,1,2)),Число(Сред(ВремяДокумента,4,2)),Число(Сред(ВремяДокумента,7,2)));

	
//	сзПараметр= СоздатьОбъект("СписокЗначений");
//		сзПараметр.ДобавитьЗначение("Новый","Команда");
//		сзПараметр.ДобавитьЗначение(ВзятьКонтекст(ТекущийДокумент()),"Конт");	
//	ОткрытьФорму(док,сзПараметр);	
	
	Док.Записать();
//	АвтоВремяТекущее();
//	ИзменениеОжидаемойПоставки(Док,пДатаОтгрузки,"Новый");	
	Возврат Док;
КонецФункции

Процедура ПриИзмененииДатыОтгрузки()
	Перем стр;
	Перем док;
	Перем доступ;
	//проверка изменения даты
	Если ПустоеЗначение(ДатаОтгрузки)=1 Тогда
		Возврат;
	КонецЕсли;
	Если ТекущийДокумент().Проведен()=1 Тогда
		Сообщить("Смена даты невозможна. Отмените проведение данного документа");
		Возврат;
	КонецЕсли;	
	
	Если ПустоеЗначение(Клиент)=1 Тогда
		Сообщить("Укажите клиента !");
		ДатаОтгрузки=старДатаОтгрузки;
		Возврат;
	КонецЕсли;		
	
	Док=СоздатьОбъект("Документ.ОжидаемаяПоставка");
	Если ПустоеЗначение(докОжидаемаяПоставка)=0 Тогда
		Если (Док.НайтиДокумент(докОжидаемаяПоставка)=0) Тогда
			докОжидаемаяПоставка=ПолучитьПустоеЗначение(докОжидаемаяПоставка);
			Сообщить("Ожидаемая Поставка очищена");           
		ИначеЕсли Док.ДатаОтгрузки<>ДатаОтгрузки Тогда //Не та ож. поставка - тогда обнуляем
			докОжидаемаяПоставка=ПолучитьПустоеЗначение(докОжидаемаяПоставка);
			Сообщить("Ожидаемая Поставка очищена");           
		КонецЕсли;
	КонецЕсли;

	
	доступ=ПроверкаДоступаОжидаемойПоставки(докОжидаемаяПоставка);//запрет на изменения ож. поставки в док.
	Если доступ=0 Тогда //запрет на изменение ОжидаемойПоставки - подписана и проведена
		Сообщить("Смена ДатыОтгрузки запрещена, на дату отгрузки существует блокированая Ожидаемая Поставка");
		ДатаОтгрузки=старДатаОтгрузки;
		Возврат;
	ИначеЕсли доступ=2 Тогда // ОжидаемаяПоставка не привязана к документу
		ит=ПоискОжидаемойПоставки(Клиент,ДатаОтгрузки);
		Если Ит.КоличествоСтрок()>0 Тогда //используем существующую поставку
//вывод через список
			
			
			
			стр=0;
			ит.ВыбратьСтроку(стр,"Ожидаемая поставки на "+ДатаОтгрузки+" от "+Клиент,0,);
			Если стр>0 Тогда
				Док=Ит.ПолучитьЗначение(стр,"Ссылка");
				Если ПроверкаДоступаОжидаемойПоставки(Док)=0 Тогда
					Сообщить("Ожидаемая поставка "+Док.НомерДок+" на "+ДатаОтгрузки+" заблокирована, разблокируйте или смените дату");
					ДатаОтгрузки=старДатаОтгрузки;
					Возврат;
				КонецЕсли;
				докОжидаемаяПоставка=Док;
				ДатаОтгрузки=Ит.ПолучитьЗначение(стр,"ДатаОтгрузки");
			Иначе
				фИзменитьОжидаемуюПоставку=3;
				докОжидаемаяПоставка=ПолучитьПустоеЗначение(докОжидаемаяПоставка);
			КонецЕсли;
		
			НеЗакрывать=1;
			Форма.Закрыть(0);
		Иначе //создаем новую поставку
			фИзменитьОжидаемуюПоставку=3; //создать новую
			докОжидаемаяПоставка=ПолучитьПустоеЗначение(докОжидаемаяПоставка);
		
			НеЗакрывать=1;
			Форма.Закрыть(0);
		КонецЕсли;
	КонецЕсли;
	старДатаОтгрузки=ДатаОтгрузки;
КонецПроцедуры

//}блок процедур Ожидаемой поставки





Процедура Взаиморасчеты()
	ИнформационнаяСтрока=ДолгПоКредиту(Контекст);
КонецПроцедуры                

Процедура ПриИзмененииРазмераОкна(ТипСобытия, ШиринаОкна, ВысотаОкна)
	оПривязки.ПриИзмененииРазмераОкна(ТипСобытия, ШиринаОкна, ВысотаОкна);
КонецПроцедуры

Процедура Доступ()
	//	ПоказКодПост=0;//	
	//	пер=СоздатьОбъект("Справочник.ПерепискаСКлиентами");
	//	Если пер.НайтиПореквизиту("Клиент",клиент,1)=0 тогда
	//		пер.НайтиПореквизиту("Клиент",Константа.ОснПоставщик,1);
	//	КонецЕсли;	
	//	Если Пер.Выбран()=1 Тогда
	//	    ПоказКодПост=Пер.ПоказКодПост;
	//	КонецЕсли;
	//	Форма.КодПоставщика.Видимость(ПоказКодПост);	
	
	Форма.ПоСчету.Доступность(?(НазваниеНабораПрав()="Администратор",1,0));
КонецПроцедуры

Процедура НастроитьПривязки()
	оПривязки = СоздатьОбъект("Общие.Форма.Привязки3");
//	оПривязки.Добавить("кнТаблица", "НН", "Форма", "ПП", "Форма");
//	оПривязки.Добавить("кнЗаписать", "ВН", "Форма", "НН", "Форма");
//	оПривязки.Добавить("кнОК", "ВН", "Форма", "НН", "Форма");
//	оПривязки.Добавить("кнЗакрыть", "ВН", "Форма", "НН", "Форма");

КонецПроцедуры


Процедура ВыборКлиента()   
	Клиент.ИспользоватьДату(ДатаДок);	
	Валюта=Клиент.ВалютаКредитаПоставщика;
	Дата_курса = ДатаДок;
	Курс=КурсДляВалюты(Валюта,Дата_курса);  	
	СтавкаНДС = семПолучитьСтавкуНДС(Клиент,Контекст);
	Доступ(); 
	ИнформационнаяСтрока="";

	//Скидка Поставщику
	УстановкаАвтоСкидки();
	ПерерасчетАвтоскидки();
	Взаиморасчеты();
	Агент=Клиент.Агент;
	Клиент.ИспользоватьДату(ДатаДок);	
	фДоставкаКлиента=Клиент.фДоставкаКлиента;
	ПланВремяДоставки = Клиент.ВремяДоставки;
	//Скидка Поставщику
КонецПроцедуры             
//**********************************
Функция ФорматВывода( парам )
	Если парам = "ДопСрок" Тогда
		Если Товар.Выбран() = 0 Тогда Возврат ""; КонецЕсли;
		Если Товар.СрокГоднПоставщика = 0 Тогда Возврат "???";
		ИначеЕсли Товар.ДопустСрокГодн = 0 Тогда  Возврат "не огр.";
//		Иначе Возврат ""+Товар.ДопустСрокГодн +".д "+Окр( Товар.ДопустСрокГодн / Товар.СрокГоднПоставщика * 100, 2, 1 ) + "%";
		Иначе Возврат ""+Строка(ДатаДок+Товар.ДопустСрокГодн);
		КонецЕсли;
	ИначеЕсли парам = "СпецЗаказ" Тогда
		Если Товар.Выбран() = 0 Тогда Возврат 0; КонецЕсли;
		рег = СоздатьОбъект( "Регистр.СпецЗаказы" );
		Возврат рег.СводныйОстаток( Товар,, "Заказано" );
	КонецЕсли;
КонецФункции

//Функция ПереводНаименований(пТовар)
//	стр = "";
//	Если пТовар.НадоНаимLT = 1 Тогда стр = стр + "LT,"; КонецЕсли;
//	Если пТовар.НадоНаимEE = 1 Тогда стр = стр + "EE,"; КонецЕсли;
//	Если пТовар.НадоНаимАнгл = 1 Тогда стр = стр + "EN,"; КонецЕсли;
//	Если пТовар.НадоНаимРусс = 1 Тогда стр = стр + "RU,"; КонецЕсли;
//	стр = Лев(стр,СтрДлина(стр)-1);
//	Возврат стр;
//КонецФункции

//Процедура семПечать()
//	таб = СоздатьОбъект( "Таблица" );
//	таб.ИсходнаяТаблица( "Анкета" );
//	таб.ВывестиСекцию( "Шапка" );		
//	таб.ВывестиСекцию( "ШапкаТаблицы" );		
//	//таб.Опции( 0, 0, таб.ВысотаТаблицы(), 0 );
//	спр = СоздатьОбъект( "Справочник.СкладскиеАдреса" );
//	ВыбратьСтроки(); пНом = 0;
//	Пока ПолучитьСтроку() = 1 Цикл
//		Если Товар.Выбран() = 0 Тогда Продолжить; КонецЕсли;
//		пНом = пНом + 1;
//		Если спр.НайтиПоРеквизиту( "Товар", Товар, 1 ) = 1 Тогда
//			пАдрес = спр.Наименование;
//		Иначе
//			пАдрес = "";
//		КонецЕсли;
//		пШтрихКод = СокрЛП( Товар.ШтрихКод );
//		пАртикул = СокрЛП( Товар.КодПоставщика );
//		пКод = СокрЛП( Товар.Код );
//		пТолькоГаст = ?(Товар.ТолькоГастрономе = 1, "V", "" );
//		пНаименование = СокрЛП( Товар.Наименование ) + РазделительСтрок + СокрЛП( Товар.НаименованиеАнгл );
//		пКол = Количество;
//		пЕд = Товар.БазоваяЕдиницаИзмерения;
//		пПереводLV = ?(Товар.НадоНаим = 1, "V", "" );
//		пПереводLT = ?(Товар.НадоНаимLT = 1, "V", "" );
//		пПереводEE = ?(Товар.НадоНаимEE = 1, "V", "" );
//		//пПеревод = ПереводНаименований(Товар);
//		Если Товар.СрокГодн = 0 Тогда пМинСрок = "???";
//		ИначеЕсли Товар.ДопустСрокГодн = 0 Тогда пМинСрок = ДатаДок + Товар.СрокГодн;
//		Иначе пМинСрок = ДатаДок + Товар.ДопустСрокГодн;
//		КонецЕсли;
//		//пМинСрок = ФорматВывода( "ДопСрок" );
//		таб.ВывестиСекцию( "Строка" );		
//	КонецЦикла;
//	таб.ВывестиСекцию( "Подвал" );		
//	таб.ТолькоПросмотр( 1 );
//	таб.Показать( "PreҐu pieґemєanas anketa" );
//КонецПроцедуры


//**********************************
Функция Рисунок(куда,откуда) 
	//Если ПустаяСтрока(откуда)=0 Тогда
	//	Попытка 
	//		Куда.Загрузить(КаталогИБ()+откуда);
	//	Исключение
	//	КонецПопытки;
	//КонецЕсли;
КонецФункции            

//**********************************

Процедура ОткрКолЗапр()   	
	Запрос=СоздатьОбъект("Запрос");	
	ТекстЗапроса = 
	"//{{ЗАПРОС(ОстаткиТоваров)
	|Фирма1 = Регистр.ПартииТоваров.Фирма;
	|Товар = Регистр.ПартииТоваров.Товар;
	|СрокРеализации = Регистр.ПартииТоваров.СрокРеализации;
	|ОстатокТовара = Регистр.ПартииТоваров.ОстатокТовара;
	|Стоимость = Регистр.ПартииТоваров.Стоимость;
	|Функция КонКол = КонОст(ОстатокТовара);
	|Функция Базсто1 = КонОст(Стоимость);
	|Группировка Товар;
	|Условие(СрокРеализации > СоСрокаРеализации);
	|Условие(Фирма1 > Фирма);
	|"//}}ЗАПРОС
	;              
	Если Запрос.Выполнить(ТекстЗапроса) = 0 тогда
		Возврат;
	КонецЕсли;	                 
КонецПроцедуры      

//******************************************************************************
// ЗаполнитьТаблЧастьПоТЗ(ТаблЗнач, Сводно)
//
// Парметры:
//  ТаблЗнач - "ТаблицаЗначений" - таблица согласно которой нужно заполнять
//  Сводно:
//   1 - сворачиваем по номеклатуре,	реквизит табл.части ПоЗаяке не заполняем
//   0 - не сворачиваем по номеклатуре,	реквизит табл.части ПоЗаяке заполняем
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполняет табличную часть документа на основании таблицы значений
//  (столбцы Номенклатура, Количество, ПоЗаявке), переданной, 
//  в качестве параметра.
//
Процедура ЗаполнитьТаблЧастьПоТЗ(ТаблЗнач, Сводно)
	
	Если Сводно = 1 Тогда
		Попытка
			ТаблЗнач.Свернуть("Номенклатура,ПоСчету", "Количество");
		Исключение
			ТаблЗнач.Свернуть("Номенклатура", "Количество");
		КонецПопытки;
	КонецЕсли;
	
	ТаблЗнач.Сортировать("*Номенклатура,*ПоСчету",);
	ТаблЗнач.ВыбратьСтроки();
	
	Пока ТаблЗнач.ПолучитьСтроку() = 1 Цикл
		НоваяСтрока();
		
		Товар			= ТаблЗнач.Номенклатура;
		ТовКод			= Товар.Код;
		Количество		= ТаблЗнач.Количество;
		Подтверждено	= Количество;
		Попытка
			ПоСчету			= ТаблЗнач.ПоСчету;
		Исключение
		КонецПопытки;
		//		Единица			= Номенклатура.БазоваяЕдиницаИзмерения;
		//		Коэффициент		= Единица.Коэффициент;
		УпакКол			= Количество;
		
		ВалютаТовара=Товар.ВалютаПоставщика;
		ЦенаПоставщика=Товар.ЦенаПоставщика.Получить(ДатаДок);

		ЗакупКолСумма=Пересчет(ЦенаПоставщика,ВалютаТовара,ДатаДок,Валюта,Дата_Курса);
		//Тов.ПолучитьАтрибут("Прих_цена")*Тов.ПолучитьАтрибут("ВалютаЗакуп").Текущ_Курс.Получить(ДатаДок)/Курс;
		КодПоставщика=Товар.ПолучитьАтрибут("КодПоставщика");
		
		СуммаБезСкидки=ЗакупКолСумма*Количество;
		Сумма=ЗакупКолСумма*Количество;
		СуммаПодтв=Сумма;
		//Цена=?(Количество<>0,окр(сумма/Количество,2),0);
		Цена=?(Количество<>0,окр(сумма/Количество,5),0);
		
		СрокПоставки=оснСрокПоставки;
		РасчетЦеныСоСкидкой();
	//	Выч_суммы_накл_сНП(Контекст);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблЧастьПоТЗ()


//******************************************************************************
// ЗаполнитьТаблЧастьПоОтчету(ПараметрВызова)
//
// Парметры:
//  ПараметрВызова - "СписокЗначений" - список параметров,
// полученный из отчетов 
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполняет табличную часть документа по данным отчетов.
//
Процедура ЗаполнитьТаблЧастьПоОтчету(ПараметрВызова)
	
	Перем ТекстОш;
	
	// получим переданную таблицу значений. Столбцы: Номенклатура, Количество
	ТаблЗнач = ПараметрВызова.Получить("ТаблЗнач");
	
	// из отчетов заполняем сводно
	ЗаполнитьТаблЧастьПоТЗ(ТаблЗнач, 1);
	
	Если КоличествоСтрок() = 0 Тогда
		Предупреждение("По данным отчета ничего заказывать не нужно!", 60);
	КонецЕсли;
	Форма.Обновить(0);
	
КонецПроцедуры // ЗаполнитьТаблЧастьПоОтчету()


//******************************************************************************
// Предопределенная процедура

Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
 	Если НомерЗакладки=1 Тогда
// 		ЗагрузитьТабличнуюЧасть(тзДанные);
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал",2);
	Иначе
		конт=ВзятьКонтекст(Контекст);
		ОткрытьФормуМодально("Обработка.Редактирование_ЗаказПоставщику",Конт);
		//ВыбратьСтроки();
		//Пока ПолучитьСтроку()=1 Цикл
		//	УстУпакКол();
		//	Выч_суммы_накл_сНП(Контекст);
		//	СуммаПодтв=Цена*Подтверждено;
		//КонецЦикла;
		
		Форма.Закладки.ТекущаяСтрока(1);
		ПриВыбореЗакладки(1,"Шапка");
	
//		НеЗакрывать=1;
//		Форма.Закрыть();
	КонецЕсли;        
	
КонецПроцедуры                                                                  

//**********************************

Процедура ПослеОткрытия()
	Если Форма.МодальныйРежим() = 0 Тогда
		оПривязки.ПослеОткрытия();
	КонецЕсли;
	//Скидка Поставщику

	
КонецПроцедуры                                                                  

//**********************************

Процедура ПриОткрытии()  	
	Если ДатаДок<=Константа.ДатаЗапретаРедактированияЗаказов Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	Если ПустоеЗначение(докОжидаемаяПоставка)=0 Тогда
		Док=СоздатьОбъект("Документ.ОжидаемаяПоставка");
		Если Док.НайтиДокумент(докОжидаемаяПоставка)=1 Тогда
			Если ПроверкаДоступаОжидаемойПоставки(Док)=0 Тогда
				Сообщить("Ожидаемая поставка заблокирована, разблокируйте !");
				Форма.ТолькоПросмотр(1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НастроитьПривязки();
	
	//	ПроверкаРазрешенияРедактирования(Контекст);
	Если Клиент.Выбран()=1 Тогда	
		Клиент.ИспользоватьДату(ДатаДок);	       
	КонецЕсли;
	запросВыполнен=0;  	
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Шапка");
	Форма.Закладки.ДобавитьЗначение("Табличная часть");

	Форма.Закладки.ТекущаяСтрока(1);
	Форма.ИспользоватьСлой("Шапка,Основной,Подвал",2);
	
	Если (ТипЗначенияСтр( Форма.Параметр ) = "СписокЗначений")  И (Выбран()=1) Тогда
		ЗаполнитьТаблЧастьПоТЗ(Форма.Параметр.Получить("Таблица"),1);
		УстановкаАвтоСкидки();
		ПерерасчетАвтоскидки();
	КонецЕсли;
	Взаиморасчеты();
//	ОбъектП = СоздатьОбъект("AddIn.R_SQL");
	
	//Доступ();        	                   
	семЗаголовокОкна(контекст);

	
КонецПроцедуры              

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриПовторномОткрытии()
	
	ПараметрВызова = Форма.Параметр;
	ВызвалиИзОтчета = ?(ТипЗначенияСтр(ПараметрВызова) = "СписокЗначений", 1, 0);
	Если ВызвалиИзОтчета = 1 Тогда
		ЗаполнитьТаблЧастьПоОтчету(ПараметрВызова);
	КонецЕсли;
	ПерерасчетАвтоскидки();
КонецПроцедуры // ПриПовторномОткрытии()


//********************************

Процедура Подбор()
	Режим="Каталог";
	z_Подбор(Контекст);
КонецПроцедуры
//-----------------------------------------------
Процедура ОбработкаПодбора(Выб)
	ЗапросКоличестваВПодборе(Контекст,Режим,Выб);
//	Если Клиент.Страна=Константа.СтранаРезидент Тогда
		Подтверждено=Количество;
//	КонецЕсли;
	
	КодПоставщика=Товар.ПолучитьАтрибут("КодПоставщика");
	УстанЦеныПрих(Контекст);
	Выч_суммы_накл(Контекст);
	СуммаПодтв=Цена*Подтверждено;
	//скидка поставщику
	УдалениеСкидки();
	ПерерасчетАвтоскидки();
	//РасчетЦеныСоСкидкой();
	АктивизироватьСтроку();
КонецПроцедуры
//-----------------------------------------------
Процедура Печать()  		
	Путь = КаталогИБ() + "ExtForms\Печать\ЗаказПоставщику.ert";
	Если ФС.СуществуетФайл( Путь ) = 1 Тогда 
		сп = СоздатьОбъект( "СписокЗначений" );
		сп.Установить( "Документ", ТекущийДокумент() );
		ОткрытьФорму( "Отчет", сп, Путь );
		Возврат;
	КонецЕсли;

	Фирма.ИспользоватьДату(ДатаДок);      
	Таб=СоздатьОбъект("Таблица");	
	путь="";
	
	НомСтр=1;
	прд="";                                
	пер=СоздатьОбъект("Справочник.перепискаСКлиентами");
	
	Адрес=СокрЛП(Константа.ОсновнаяФирма.ЮридическийАдрес.Получить(ДатаДок));
	
	Если пер.НайтиПореквизиту("Клиент",клиент,1)=0 тогда
		Предупреждение("Не открыта переписка с клиентом!");
		Возврат;
	КонецЕсли;
	
	Если не(проведен()=1) Тогда
		образ="Paraugs";
	иначе          
		образ="";
	КонецЕсли;
	
	tit="Заказ ";  
	
	Таб.ВывестиСекцию("Хедер|ТоварОбщие");
	
	Таб.ВывестиСекцию("Шапка|ТоварОбщие");
	
	Если Пер.ПечПараметр=1 Тогда
		Таб.ПрисоединитьСекцию("Шапка|ТоварПараметр");
	КонецЕсли;
	
	ВыбратьСтроки();
	Ном=0;        
	
	СтрокНаЛист=0;   
	sum=0;        
	итогоСумма=0;
	пИтогКолУпак = 0;
	пИтогКолПалет = 0;
	Пока ПолучитьСтроку() = 1 Цикл
		Ном=Ном+1;    
		СтрокНаЛист=СтрокНаЛист+1;
		Если (цел(ном/31)-(ном/31))=0 Тогда
			таб.newPage();              
			НомСтр=НомСтр+1;
			Если НомСтр>1 Тогда
				прд="(turpinўjums)";
			КонецЕсли;
			СтрокНаЛист=0;
			
			Таб.ВывестиСекцию("Шапка|ТоварОбщие");
			Если Пер.ПечПараметр=1 Тогда
				Таб.ПрисоединитьСекцию("Шапка|ТоварПараметр");
			КонецЕсли;
			
		КонецЕсли; 
		
		итогоСумма=ИтогоСумма+Сумма;
		
		ПечПост=Товар.КодПоставщика;
		Упак=Товар.ЗакупКол; 
		
		Если Упак=0 Тогда
			Упак=1;
		КонецЕсли;
		
		НовКол=Количество;
		Если ПустоеЗначение(Единица)=0 Тогда
			Ед=СоздатьОбъект("Справочник.Единицы");
			Ед.ИспользоватьВладельца(Товар);
			Если Ед.НайтиПоРеквизиту("Единица",Единица,0)=1 Тогда
				НовКол=Количество/Ед.Коэффициент;
			Иначе
				Сообщить("Не найдена единица "+Единица+" для товара "+Товар.Код+" "+Товар);
			КонецЕсли;
		КонецЕсли;
		
		Упак=Окр(НовКол,3);
		
		ТоварОтгрКол=?(Товар.ОтгрКол=0,1,Товар.ОтгрКол);                 
		
		ОтгрКол=Окр(Упак/ТоварОтгрКол,0);
		
		Если Цел(ОтгрКол)<>Цел(Упак/ТоварОтгрКол) Тогда
			ОтгрКол=ОтгрКол+1;
		КонецЕсли;
		
		пКолУпак = ?(Товар.ЛогистикаКолВУпаковке = 0, 0, Окр(НовКол/Товар.ЛогистикаКолВУпаковке, 1, 1 ) );
		КолУпНаПаллете = Товар.ЛогистикаКолУпакНаЕвроПалете*Товар.ЛогистикаКолУпакНаПалетеВРяду;
		пКолПалет = ?(КолУпНаПаллете = 0, 0, Окр(пКолУпак/КолУпНаПаллете, 1, 1 ) );
		
		пИтогКолУпак = пИтогКолУпак + пКолУпак;
		пИтогКолПалет = пИтогКолПалет + пКолПалет;
		
		пМинСрок = ОснСрокПоставки + Товар.ДопустСрокГодн;
		Таб.ВывестиСекцию("Строка|ТоварОбщие");
		
		Если Пер.ПечПараметр=1 Тогда
			Таб.ПрисоединитьСекцию("Строка|ТоварПараметр");
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокНалист>24 Тогда
		таб.newPage();              
		
		Таб.ВывестиСекцию("Пропуск|ТоварОбщие");
		Если Пер.ПечПараметр=1 Тогда
			Таб.ПрисоединитьСекцию("Пропуск|ТоварПараметр");
		КонецЕсли;
		
	КонецЕсли;
	
	Таб.ВывестиСекцию("Итог|ТоварОбщие");
	КолСтолб=6;
	Если Пер.ПечПараметр=1 Тогда
		Таб.ПрисоединитьСекцию("Итог|ТоварПараметр");
		КолСтолб=КолСтолб+1;
	КонецЕсли;
	
	Таб.ВывестиСекцию("Кончик|ТоварОбщие");
	
	Таб.Опции(0,0,0,0,ПарСтрДок);   
	Таб.параметрыСтраницы(1,100,1,2,2,5,5,2,2,1);
	Таб.ОбластьПечати(1,1,30+КоличествоСтрок(),КолСтолб);
	//Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(0);
	
	Таб.Показать("Печать заказа","");
	
КонецПроцедуры 

//-----------------------------------------------

Процедура ПечатьДок()
	
	Фирма.ИспользоватьДату(ДатаДок);      
	Таб=СоздатьОбъект("Таблица");   
	Таб.ИсходнаяТаблица("ДокументПеч");
	
	НомСтр=1;
	прд="";                                
	
	
	Таб.ВывестиСекцию("Шапка");
	ВыбратьСтроки();
	Ном=4;
	
	СтрокНаЛист=4;   
	sum=0;        
	итогоСумма=0;
	
	Пока ПолучитьСтроку() = 1 do 
		
		Ном=Ном+1;    
		СтрокНаЛист=СтрокНаЛист+1;
		Если (цел(ном/30)-(ном/30))=0 Тогда
			таб.newPage();              
			НомСтр=НомСтр+1;
			Если НомСтр>1 Тогда
				прд="(turpinўjums)";
			КонецЕсли;
			СтрокНаЛист=0;
			Таб.ВывестиСекцию("Пропуск");
			Таб.ВывестиСекцию("Шапка2");
		КонецЕсли; 
		
		итогоСумма=ИтогоСумма+Сумма;
		
		Если УпакКол=0 Тогда
			ЗакупКолСумма=Товар.ЦенаПриобретения;    
			закупкол=Товар.ЗакупКол;
			
			Если Число(ЗакупКол)=0 Тогда
				ЗакупКол=1;
			КонецЕсли;
			
			Сумма2=ЗакупКолСумма/ЗакупКол;
			
		КонецЕсли;   
		
		Год=ДатаГод(ПолучитьДатуТА());
		
		сум1=0;
		Для м=1 По 12 Цикл
			Если Дата(Год,м,1)<ПолучитьДатуТА() Тогда
				регистр.ОборотыТоваров.ИспользоватьПериод(Год,м);
				сум1=сум1+регистр.ОборотыТоваров.СводныйИтог(Товар,,,,"-","Количество");
			КонецЕсли;
		КонецЦикла;
		
		Оборот=Сум1;
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;
	
	Таб.Опции(0,0,0,0,ПарСтрДок);   
	Таб.параметрыСтраницы(2,100,1,5,5,5,5,2,2);
	//Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(0);
	
	Таб.Показать("Печать заказа","");
	
	
КонецПроцедуры 
//***************************************************************
//
Процедура ПечатьПоЗаказам()
	
	
	заг="---";       
	ИтогоЗаказ=Регистр.ЗаказыПоставщикам.СводныйОстаток(Товар,Склад,,,,"Количество");
	
	тов=Товар;
	//  Создание Таблицы для выходного отчета
	Таб=СоздатьОбъект("Таблица");   
	Таб.ИсходнаяТаблица("Заказы");
	Таб.ВывестиСекцию("Шапка");                      
	
	Рег1=СоздатьОбъект("Регистр.ЗаказыПоставщикам");
	Рег1.УстановитьФильтр(Товар,,,);
	рег1.обратныйПорядок(1);
	
	Рег1.ВыбратьИтоги();
	
	КлиентСписок=СоздатьОбъект("СписокЗначений");
	
	Пока Рег1.ПолучитьИтог()=1 Цикл
		док=Рег1.ПоЗаказу;
		
		Приращение=Рег1.Количество;
		датаП=Рег1.СрокПоставки;
		Таб.ВывестиСекцию("Строка");  			    
	КонецЦикла;
	
	
	Таб.ВывестиСекцию("Кончик");	
	
	//Вызов выходного отчета в окно просмотра и редактирования.
	Таб.Опции(0,0,4,0,ПарСтрОтчДлинн);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Отчет о заказе товара","");
	
КонецПроцедуры

Процедура семУстановитьВалюту( флКопирования )
	Если флКопирования = 0 Тогда
		Валюта = Константа.ОсновнаяВалютаЗакупки;
	КонецЕсли;
	Дата_Курса = ДатаДок;
	Курс = КурсДляВалюты( Валюта, Дата_Курса );
	Валюта_Прежн = Валюта;
	Курс_Прежн = Курс;
КонецПроцедуры

//Процедура семЗаполнитьПоТаблице()
//	табл = Форма.Параметр;
//	Поставщик = табл.ПолучитьЗначение(1,"Поставщик");
//	табл.ВыбратьСтроки();
//	Пока табл.ПолучитьСтроку() = 1 Цикл
//		НоваяСтрока();
//		Товар = табл.Товар;
//		Количество = табл.Количество;
//	КонецЦикла;
//КонецПроцедуры
Функция тВводНового()
	
	Если флНовыйДокумент=1 Тогда
		счТекст=счТекст+1;
		Если счТекст=4 Тогда
			ДатаДок=РабочаяДата();
			докОжидаемаяПоставка=ПолучитьПустоеЗначение(докОжидаемаяПоставка);
			ДатаОтгрузки=ПолучитьПустоеЗначение(ДатаОтгрузки);
			старДатаОтгрузки=ДатаОтгрузки;
			стардокОжидаемаяПоставка=докОжидаемаяПоставка;
			флНовыйДокумент=0;
		КонецЕсли;

	КонецЕсли;
	Возврат счТекст;
КонецФункции

Процедура ВводНового(флКопирования,объект)  	
	ЗаполнитьШапку(Контекст);	
	семУстановитьВалюту( флКопирования );
	Если СокрП(НомерДок)="" Тогда
		НомерДок="Z-00001";
	КонецЕсли;               		
	ДатаДок=РабочаяДата();
	флНовыйДокумент=1;
	Если флКопирования=1 Тогда
		флНовыйДокумент=0;   
		докОжидаемаяПоставка="";
	Иначе
		Если ПустоеЗначение(РозничныйТорговыйСклад)=1 Тогда
			Склад=Константа.ОсновнойСклад;
		Иначе
			Склад = РозничныйТорговыйСклад; //если прописан склад - тогда подставляем его
		КонецЕсли;
		Клиент=Константа.ОсновнойПоставщик;
	КонецЕсли;
	ВыборКлиента();
	СоСрокаРеализации=ДатаДок;
	Если ТипЗначенияСтр( Форма.Параметр ) = "СписокЗначений" Тогда
		Клиент = Форма.Параметр.Получить("Поставщик");
		ВыборКлиента();
		Валюта=Клиент.ВалютаКредитаПоставщика;
		семУстановитьВалюту( 1 );
		ЗаполнитьТаблЧастьПоТЗ(Форма.Параметр.Получить("Таблица"),1);
	КонецЕсли; 
	
	//ожидаемая поставка
	докОжидаемаяПоставка=ПолучитьПустоеЗначение(докОжидаемаяПоставка);
	ДатаОтгрузки=ПолучитьПустоеЗначение(ДатаОтгрузки);
	старДатаОтгрузки=ДатаОтгрузки;
	стардокОжидаемаяПоставка=докОжидаемаяПоставка;

КонецПроцедуры

//-----------------------------------------------
Процедура ВводНаОсновании(ДокОснование)
	
	ЗаполнитьШапкуНаОсн(Контекст,ДокОснование);  
	ДокументОснование=ДокОснование;
	ДатаДок=РабочаяДата();
	
	Если ДокОснование.Вид()="ЗаявкаПокупателя" Тогда
		Если ПустоеЗначение(ДокОснование.ДокументПриобретение)=1 Тогда
			Сообщить("Нет товаров для закупки!");
			СтатусВозврата(0);
			Возврат;	     
		КонецЕсли;  
		Док=СоздатьОбъект("Документ.ЗаявкаНаПриобретение");
		Док.НайтиДокумент(ДокОснование.ДокументПриобретение);
		Если Док.КоличествоСтрок()=0 Тогда
			Сообщить("Нет товаров для закупки!");
			СтатусВозврата(0);
			Возврат;		    
		КонецЕсли;   
		
		Док.ВыбратьСтроки(); 	
		Пока Док.ПолучитьСтроку()=1 Цикл
			НоваяСтрока(); 			
			Товар=Док.Товар;
			Количество=Док.Количество;
			УпакКол=Количество;
			КодПоставщика=Товар.КодПоставщика;//КодПоставщика=Товар.ПолучитьАтрибут("КодПоставщика");
		КонецЦикла; 
		
		Склад=ДокОснование.Склад;
		Валюта=Константа.ОсновнаяВалютаЗакупки;
		Дата_Курса=ДатаДок;
		Курс=КурсДляВалюты(Валюта,Дата_Курса);
		Валюта_Прежн=Валюта;
		Курс_Прежн=Курс;    		
		Клиент=Константа.ОсновнойПоставщик;
		
	Иначе
		Склад=ДокОснование.Склад;
		Валюта=ДокОснование.Валюта;
		Дата_Курса=ДокОснование.Дата_Курса;
		Курс=ДокОснование.Курс;
		Валюта_Прежн=Валюта;
		Курс_Прежн=Курс;    		
		Клиент=ДокОснование.Клиент; 
		ОснСрокПоставки=ДокОснование.ОснСрокПоставки;
		
		ДокОснование.ВыбратьСтроки();
		Пока ДокОснование.ПолучитьСтроку()=1 Цикл
			НоваяСтрока(); 			
			СрокПоставки=ДокОснование.СрокПоставки;
			Товар=ДокОснование.Товар;
			Цена=ДокОснование.Цена;
			Количество=ДокОснование.Количество;
			КодПоставщика=Товар.КодПоставщика;//КодПоставщика=Товар.ПолучитьАтрибут("КодПоставщика");
			//Ост=Регистр.ЗаказыТоваров.СводныйИтог(Товар,Склад,Клиент,,ОснованиеДок,"ЗаказаноТовара");
			//Если ДокОснование.УпакКол>Ост Тогда
			//	УпакКол=-Ост;
			//Иначе
			УпакКол=-ДокОснование.УпакКол;
			//КонецЕсли;		
			Сумма=Цена*УпакКол;
			НДС=ДокОснование.НДС;			
		КонецЦикла;              		
	КонецЕсли;
	Если ПустоеЗначение(Клиент)=0 Тогда
		УстановкаАвтоСкидки();
		ПерерасчетАвтоскидки();
	КонецЕсли;
КонецПроцедуры

//***************************************

Функция ПроверкаФакт(Тов)                     
	Возврат Регистр.ОстаткиТоваров.СводныйОстаток(Тов,,,"ОстатокТовара");
КонецФункции
//-----------------------------------------------    
Функция ПроверкаРезерв(Тов)                     
	Возврат Регистр.РезервыТоваров.СводныйОстаток(Тов,,"РезервТовара");
КонецФункции
//-----------------------------------------------    
Функция ПроверкаЗаказ(Тов)                     
	Возврат Регистр.ЗаказыПоставщикам.СводныйОстаток(Тов,,,,,"Количество");
КонецФункции  

//*****************************************************************************
// ПолучитьРасшифровкуДляОтчета(ТекОтчет)
// 
// Параметры: 
//  ТекОтчет - строка - идентификатор отчета
//
// Возвращаемое значение: 
//  Список значений со значениями расшифровки
//
// Описание:
//  Получает расшифровку
//
Функция ПолучитьРасшифровкуДляОтчета(ТекОтчет)
	
	Перем ДатаНачала, ДатаКонца, ДатаНачалаЗак, ДатаКонцаЗак;
	
	// Общая часть
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.Установить("Отчет", ТекОтчет);
	Расшифровка.Установить("ВидРазделителя", 1);
	Расшифровка.Установить("ВыбРазделитель1", Фирма);
	
	Если СравнитьТА() <> -2  Тогда
		Расшифровка.Установить("ДокументЗаказаПоставщику", ТекущийДокумент());     
	Иначе
		Расшифровка.Установить("ДокументЗаказаПоставщику", "");    
	КонецЕсли;
	
	// Индивидуальная часть
	Если ТекОтчет = "ПланированиеЗакупок" Тогда
		
		ДатаНачалаЗак = ДатаДок;
		
		ДатаКонца  = ПолучитьДатуТА();
		ДатаНачала      = Константа.ОсновнаяДатаНачалаОтчета;
		Если ПустоеЗначение(ДатаНачала) = 1 Тогда
			ДатаНачала      = НачМесяца(ДатаКонца);    
		КонецЕсли;
		ДатаКонцаЗак  = КонМесяца(ДатаНачалаЗак);
		
		Расшифровка.Установить("ДатаНачала",    ДатаНачала);
		Расшифровка.Установить("ДатаКонца",     ДатаКонца);
		Расшифровка.Установить("ДатаНачалаЗак", ДатаНачалаЗак); // ДатаОтгрузки
		Расшифровка.Установить("ДатаКонцаЗак",  ДатаКонцаЗак);
		
	КонецЕсли;
	
	Возврат Расшифровка;
	
КонецФункции // ПолучитьРасшифровкуДляОтчета()


//*****************************************************************************
// ПоКнопкеЗаполнить()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Вызывается из формул элементов диалога:
//  Кнопка "Заполнить"
//
// Описание:
// 	Производит выбор способа заполнения и непосредственное заполнение документа
//
Процедура ПоКнопкеЗаполнить()
	
	Меню=СоздатьОбъект("СписокЗначений");
	Меню.ДобавитьЗначение(1,"По отчету Планирование закупок");
	Меню.ДобавитьЗначение(2,"По спец. заявкам");
	выб=1;
	Если Меню.ВыбратьЗначение(выб)=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если выб=1 Тогда
		Расшифровка = ПолучитьРасшифровкуДляОтчета("ПланированиеЗакупок");
		ОткрытьФорму("Отчет.ПланированиеЗакупок", Расшифровка);
	Иначе
		Расшифровка = ПолучитьРасшифровкуДляОтчета("ПланированиеЗакупок");
	КонецЕсли;
	
	Форма.Обновить(0);
	
КонецПроцедуры // ПоКнопкеЗаполнить()

//-----------------------------------------------
Процедура РасчетТоваров(реж)
	
	Если ВОПРОС("Документ будет пересчитан полностью! 
	|Продолжить? ", 1)<>1 Тогда
		Возврат;
	КонецЕсли;           	
	
	УдалитьСтроки();
	
	ОткрКолЗапр();
	
	с=0;
	ВывС=10;
	
	ТоварыСпр=СоздатьОбъект("Справочник.Номенклатура");
	ТоварыСпр.ВыбратьЭлементыПоРеквизиту("Поставщик",Клиент,0,0);
	Пока ТоварыСпр.ПолучитьЭлемент()=1  Цикл
		
		с=с+1;		
		Если (С/10)=(ВывС/10) Тогда
			Состояние(с);
			ВывС=ВывС+10;
		КонецЕсли;
		
		Тов=ТоварыСпр.ТекущийЭлемент();
		
		Запрос.Получить(Тов);
		КонКол=Запрос.КонКол;
		КонРезерв=ПроверкаРезерв(Тов);
		КонЗаказано=ПроверкаЗаказ(Тов);
		
		Если ((КонКол - КонРезерв) >= Тов.Мин_запас) И (реж=1) Тогда
			продолжить;
		КонецЕсли;
		
		НоваяСтрока();
		
		Товар=Тов;
		ТовКод=Товар.Код;
		
		//ЗакупКолСумма=ЦенаТовараПоКатегорииДляТовара(Тов,Константа.ЗакупочнаяКатегорияЦены,Валюта,Курс);
		ЗакупКолСумма=Пересчет(Тов.ЦенаПриобретения,Тов.ВалютаЗакупки,Дата_Курса,Валюта,Дата_Курса);
		//Тов.ПолучитьАтрибут("Прих_цена")*Тов.ПолучитьАтрибут("ВалютаЗакуп").Текущ_Курс.Получить(ДатаДок)/Курс;
		Закупкол=Тов.ПолучитьАтрибут("ЗакупКол");
		КодПоставщика=Тов.ПолучитьАтрибут("КодПоставщика");
		
		Количество=Тов.Мин_запас-(КонКол-КонРезерв+КонЗаказано);
		
		Если Закупкол=0 Тогда
			Закупкол=1;
		КонецЕсли;
		
		Если ((Количество/ЗакупКол)>окр(количество/закупкол)) Тогда
			Количество=окр(Количество/ЗакупКол+0.5)*закупкол;      	    
			Сумма=ЗакупКолСумма*окр(Количество/ЗакупКол+0.5);
		иначе
			Количество=окр(Количество/ЗакупКол)*закупкол;      	    
			Сумма=ЗакупКолСумма*окр(Количество/ЗакупКол);
		КонецЕсли;
		
		Сумма=ЗакупКолСумма*Количество;
		//Цена=?(Количество<>0,окр(сумма/Количество,2),0);
		Цена=?(Количество<>0,окр(сумма/Количество,5),0);
		
		СрокПоставки=оснСрокПоставки;
		
		АктивизироватьСтроку(); 		
	КонецЦикла;                 		
КонецПроцедуры                  
//-----------------------------------------------    
//-----------------------------------------------    
Функция СуммарныйВес()                      	
	СумВес=0;                   	
	ВыбратьСтроки();                        
	Пока ПолучитьСтроку()>0 Цикл
		СумВес=СумВес+Подтверждено*Товар.Вес;
	КонецЦикла;		    
	Возврат СумВес;		
КонецФункции 
//-----------------------------------------------
Функция СуммарныйОбъем()                      
	СумОбъем=0;	
	ВыбратьСтроки();	
	Пока ПолучитьСтроку()>0 Цикл
		СумОбъем=СумОбъем+Подтверждено*Товар.Объем;
	КонецЦикла;                                 	    
	Возврат СумОбъем;
КонецФункции         
//******************************
//Начало текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД

//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ПриЗаписи()
	//Закомментировано Инсталлятором МОД:Процедура ПриЗаписи() 
	Если семМожноЗаписать( Контекст ) = 0 Тогда Возврат; КонецЕсли;
	Если ОснСрокПоставки<ДатаДок Тогда		
		Сообщить("Загадочные данные: дата поставки меньше даты документа!","i");	
	КонецЕсли;  
	
	Если ПустоеЗначение(ДатаОтгрузки)=1 Тогда		
		Сообщить("Дата отгрузки не определена !","i");
		Возврат;
	КонецЕсли; 	
	
	Если ПустоеЗначение(старОснСрокПоставки)=0 Тогда
		Если старОснСрокПоставки<>ОснСрокПоставки Тогда
			Сообщить("Замена основного срока поставки не возможна. Основной срок поставки заменен на предыдущий !");
			ОснСрокПоставки=старОснСрокПоставки;
		КонецЕсли;
	КонецЕсли;
	
	//ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		ЦенаПоставщика=Пересчет(Товар.ЦенаПоставщика.Получить(ДатаДок),Товар.ВалютаПоставщика,ДатаДок,Валюта,ДатаДок);
		Если Окр(Цена,2)<>Окр(ЦенаПоставщика,2) Тогда
			Сообщить("В строке "+НомерСтроки+" у товара <"+Товар.Код+" "+Товар+"> цена в заказе <"+Цена+"> отличается от цены по договору <"+ЦенаПоставщика+">!","!!");
		КонецЕсли;
	КонецЦикла;
	
	Если (ДатаДок>=Константа.ДатаВнедренияОжПоставки)И(Клиент.Страна<>Константа.СтранаРезидент)  Тогда
		Если фИзменитьОжидаемуюПоставку=1 Тогда
			Если ИзменениеОжидаемойПоставки(докОжидаемаяПоставка,ДатаОтгрузки,"Изменить")=1 Тогда
				фИзменитьОжидаемуюПоставку=0;
			КонецЕсли;
	//	ИначеЕсли фИзменитьОжидаемуюПоставку=2 Тогда //обновляется поставка если документ был изменен, чтобы убрать старые строки документа
	//		Если ИзменениеОжидаемойПоставки(стардокОжидаемаяПоставка,ДатаОтгрузки,"Обновить")=1 Тогда
	//			фИзменитьОжидаемуюПоставку=0;
	//		КонецЕсли;
		ИначеЕсли фИзменитьОжидаемуюПоставку=3 Тогда
			докОжидаемаяПоставка=СозданиеНовойОжидаемойПоставки(ДатаОтгрузки).ТекущийДокумент();
			Если ИзменениеОжидаемойПоставки(докОжидаемаяПоставка,ДатаОтгрузки,"Новый")=1 Тогда
				фИзменитьОжидаемуюПоставку=0;
			КонецЕсли;
		КонецЕсли;
		фДокЗаписан=1;
	КонецЕсли;
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписи()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
	стар_ПриЗаписи();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД

//******************************
Процедура ИзменитьСрокиПоставки()
	ВыбратьСтроки();	
	Пока ПолучитьСтроку()>0 Цикл
		СрокПоставки=ОснСрокПоставки;
	КонецЦикла;        	
КонецПроцедуры                                         
//******************************
//Процедура ПечатьПоЗаказам()
//	заг="---";       
//	ИтогоЗаказ=Регистр.ЗаказыТоваров.СводныйОстаток(Товар,Склад,,,,"ЗаказаноТовара");
//	
//	тов=Товар;
//	//  Создание Таблицы для выходного отчета
//	Таб=СоздатьОбъект("Таблица");   
//	Таб.ИсходнаяТаблица("Заказы");
//	Таб.ВывестиСекцию("Шапка");                      
//	
//	Рег1=СоздатьОбъект("Регистр.ЗаказыТоваров");
//	Рег1.УстановитьФильтр(Товар,,,);
//	рег1.обратныйПорядок(1);
//
//	Рег1.ВыбратьИтоги();
//	
//	КлиентСписок=СоздатьОбъект("СписокЗначений");
//
//	Пока Рег1.ПолучитьИтог()=1 Цикл
//		док=Рег1.ДокЗаказ;
//		
//		Приращение=Рег1.ЗаказаноТовара;
//		датаП=Рег1.СрокПоставки;
//		Таб.ВывестиСекцию("Строка");  			    
//	КонецЦикла;
//	Таб.ВывестиСекцию("Кончик");	
//	
//	//Вызов выходного отчета в окно просмотра и редактирования.
//	Таб.Опции(0,0,4,0,ПарСтрОтчДлинн);
//	Таб.Защита(Константа.ФлагЗащитыТаблиц);
//	Таб.ТолькоПросмотр(1);
//	Таб.Показать("Отчет о заказе товара","");
//	
//КонецПроцедуры
//******************************
Процедура ПровКол() 	
	Если ДокументОснование.Выбран()=1 Тогда
		
		Если Количество>=0 Тогда
			Сообщить("Проектное количество должно быть меньше 0!");
			УпакКол=0;
		Иначе
			Ост=Регистр.ЗаказыПоставщикам.СводныйИтог(Товар,Склад,Клиент,,ДокументОснование,"Количество");
			Если Абс_(Количество)>Ост Тогда
				Сообщить("Вы не можете снять заказанное количество больше чем было заказано - "+Ост+" "+Товар.БазоваяЕдиницаИзмерения+"!");
				Количество=-Ост;
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;  	
	

КонецПроцедуры
//*****************************
Процедура УстУпакКол()

	тТовары=СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(тТовары,"Товар,Количество,Подтверждено");
	тТовары.Свернуть("Товар","Количество,Подтверждено");
	
	ЗакупКолСумма=Товар.ПолучитьАтрибут("ЦенаПриобретения");
	закупкол=Товар.ПолучитьАтрибут("ЗакупКол");
	КодПоставщика=Товар.ПолучитьАтрибут("КодПоставщика");
	
	Если закупкол=0 Тогда
		закупкол=1;
	КонецЕсли;

	рез=0;
	тТовары.НайтиЗначение(Товар,рез,"Товар");	
	тТовары.ПолучитьСтрокуПоНомеру(рез);
	Если ((тТовары.Количество/ЗакупКол)>окр(тТовары.Количество/закупкол)) Тогда
		УпакКол2=окр(тТовары.Количество/ЗакупКол+0.5)*закупкол;
	Иначе
		УпакКол2=окр(тТовары.Количество/ЗакупКол)*закупкол;      	    
	КонецЕсли;
	
	Если ((Количество/ЗакупКол)>окр(Количество/закупкол)) Тогда
		УпакКол1=окр(Количество/ЗакупКол+0.5)*закупкол;
		Сумма=ЗакупКолСумма*Подтверждено;
	Иначе
		УпакКол1=окр(Количество/ЗакупКол)*закупкол;      	    
		Сумма=ЗакупКолСумма*Подтверждено;
	КонецЕсли;
	
	Если тТовары.Подтверждено<>УпакКол2 Тогда
		Сообщить("Проектное количество для товара "+Товар.Код+" "+Товар +" должно быть равным - "+УпакКол2);
	КонецЕсли;
	
	//Цена=?(Количество<>0,окр(сумма/Количество,2),0);
	Цена=?(Подтверждено<>0,окр(сумма/Подтверждено,5),0);
	
КонецПроцедуры   
//-------------------------------
Функция УстМин()
	Возврат Товар.Мин_запас;
КонецФункции
//-------------------------------  
Процедура ВыборТовара()     	
	Если Товар.Выбран()=1 Тогда
		Если Товар.ВидТовара=Перечисление.ВидыТоваров.Услуга Тогда
			Товар=0;
			Сообщить("Вы не можете выбрать Услугу!");
			Возврат;
		КонецЕсли;
	КонецЕсли;   	                       
	УстанЦеныПрих(Контекст); 
	СрокПоставки=ОснСрокпоставки; 
	УстУпакКол(); 	
КонецПроцедуры    
//**********************************

Процедура ПриЗакрытии()
	Если НеЗакрывать=1 Тогда    
		НеЗакрывать=0;
		Записать();
		Если ДатаДок>=Константа.ДатаВнедренияОжПоставки Тогда
			Если Клиент.Страна=Константа.СтранаРезидент Тогда
				фДоставкаКлиента=1;
			КонецЕсли;
			
			Если фИзменитьОжидаемуюПоставку=1 Тогда
				Если ИзменениеОжидаемойПоставки(докОжидаемаяПоставка,ДатаОтгрузки,"Изменить")=1 Тогда
					фИзменитьОжидаемуюПоставку=0;
				КонецЕсли;
			ИначеЕсли фИзменитьОжидаемуюПоставку=3 Тогда
				докОжидаемаяПоставка=СозданиеНовойОжидаемойПоставки(ДатаОтгрузки).ТекущийДокумент();
				Если ИзменениеОжидаемойПоставки(докОжидаемаяПоставка,ДатаОтгрузки,"Новый")=1 Тогда
					фИзменитьОжидаемуюПоставку=0;
				КонецЕсли;
			КонецЕсли;
			фДокЗаписан=1;
		КонецЕсли;		
		//Записать();
		СтатусВозврата(0);
	КонецЕсли;

	//Скидка Поставщику удаление
	Док=СоздатьОбъект("Документ.ЗаказПоставщику");
	Если Док.НайтиПоНомеру(НомерДок)=0 Тогда
		ВыбратьСтроки();
		Пока ПолучитьСтроку()>0 Цикл
			УдалениеСкидки();
		КонецЦикла;
	КонецЕсли;	
	
	Если ПустоеЗначение(стардокОжидаемаяПоставка)=0 Тогда
		Если докОжидаемаяПоставка<>стардокОжидаемаяПоставка Тогда
			Если ИзменениеОжидаемойПоставки(стардокОжидаемаяПоставка,ДатаОтгрузки,"Обновить")=1 Тогда
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура кнФункции()
	
	текКолонка=Форма.ТекущаяКолонка();
	Если (текКолонка="СрокПоставки") ИЛИ (текКолонка="Цена") ИЛИ (текКолонка="Сумма") Тогда
		
		ВыбТовар=Товар;
		ВыбЗнач=ПолучитьАтрибут(текКолонка);
		Меню=СоздатьОбъект("СписокЗначений");
		Меню.ДобавитьЗначение(1,"Скопировать на выбранные товары");
		Меню.ДобавитьЗначение(2,"Скопировать на все товары");
		выб=1;
		Если Меню.ВыбратьЗначение(выб,,,,1)=1 Тогда
			Если выб=1 Тогда
				ВыбратьСтроки();
				Пока ПолучитьСтроку()=1 Цикл
					Если Товар=ВыбТовар Тогда
						УстановитьАтрибут(текКолонка,ВыбЗнач);
						Если текКолонка="Цена" Тогда
							Выч_суммы_накл_сНП(Контекст,,1);
							СуммаПодтв=Цена*Подтверждено;
						ИначеЕсли текКолонка="Сумма" Тогда
							Цена=?(Количество=0,0,Сумма/Количество); СуммаПодтв=Цена*Подтверждено; 
							Выч_суммы_накл_сНП(Контекст);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ВыбратьСтроки();
				Пока ПолучитьСтроку()=1 Цикл
					УстановитьАтрибут(текКолонка,ВыбЗнач);
						Если текКолонка="Цена" Тогда
							Выч_суммы_накл_сНП(Контекст,,1);
							СуммаПодтв=Цена*Подтверждено;
						ИначеЕсли текКолонка="Сумма" Тогда
							Цена=?(Количество=0,0,Сумма/Количество); СуммаПодтв=Цена*Подтверждено; 
							Выч_суммы_накл_сНП(Контекст);
						КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры




// При входе в Форму запомним промежуточные переменные
Валюта_Прежн=Валюта;
Курс_Прежн=Курс;
тСкидкаПоставщикуТабл=СоздатьОбъект("ИндексированнаяТаблица");
фДокЗаписан=0;
фИзменитьОжидаемуюПоставку=0;
фСозданиеОжидаемойПоставки=1;
старДатаОтгрузки=ДатаОтгрузки;
стардокОжидаемаяПоставка=докОжидаемаяПоставка;
ИнформационнаяСтрока="";
флНовыйДокумент=0;
счТекст=0;