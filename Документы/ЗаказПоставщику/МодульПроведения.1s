Процедура ОтправитьСообщениеПольз( пПользователь,пСообщ, пОбъект="" )
	Блокнот=СоздатьОбъект("Справочник.Блокнот");
	
		Если Блокнот.НайтиПоКоду(СокрЛП(пПользователь.Код),0) = 1 Тогда 
			Блокнот.ИспользоватьРодителя(Блокнот.ТекущийЭлемент());
			глСоздатьНовыйОбъект(Блокнот);
			Блокнот.Наименование = "Бронирование";
			Блокнот.__Дата = ТекущаяДата();
			Блокнот.Время=ТекущееВремя();
			Блокнот.Автор = Пользователь;
			Блокнот.Запись=Шаблон("[пСообщ]");
			Блокнот.Записать();
		КонецЕсли;
КонецПроцедуры

Функция ПроверкаДоступаОжидаемойПоставки(Док)
	
	//Если Док.Выбран()=0 Тогда
	//	Возврат 2; //нет привязаных документов ОжидаемойПоставки к данному заказу
	Если (Док.Проведен()=1)
			ИЛИ (ПустоеЗначение(Док.ПодписьМенеджера)=0)
			ИЛИ	(ПустоеЗначение(Док.ПодписьЛогиста)=0)   Тогда
		Возврат 0; //доступ запрещен.
	ИначеЕсли Док.Проведен()=0 Тогда
		Возврат 2; //доступ разрешен.
	КонецЕсли;
	
КонецФункции
Функция ИзменениеОжидаемойПоставки(пДок,пДатаОтгрузки,Команда="Изменить")
	Док=СоздатьОбъект("Документ.ОжидаемаяПоставка");
	Если пДок.Выбран()=1 Тогда
		Если (Док.НайтиДокумент(пДок)=1) Тогда
			Если ПроверкаДоступаОжидаемойПоставки(Док)=0 Тогда
				Сообщить("Ожидаемая поставка "+Док.НомерДок+" на "+пДатаОтгрузки+" заблокирована, разблокируйте или смените дату");
				Возврат 0;
			КонецЕсли;
		
			сзПараметр= СоздатьОбъект("СписокЗначений");
				сзПараметр.ДобавитьЗначение(Команда,"Команда");
				сзПараметр.ДобавитьЗначение(пДатаОтгрузки,"пДатаОтгрузки");
				сзПараметр.ДобавитьЗначение(фДоставкаКлиента,"фДоставкаКлиента");
				сзПараметр.ДобавитьЗначение(ВзятьКонтекст(ТекущийДокумент()),"Конт");	
			ОткрытьФорму(док.ТекущийДокумент(),сзПараметр);
		Возврат 1;
		КонецЕсли;
	КонецЕсли;	
	Возврат 0;
КонецФункции



Процедура ПроведениеОжидаемойПоставки()
	//Док=СоздатьОбъект("Документ.ОжидаемаяПоставка");
	//
	//
	//тДок=СоздатьОбъект("ТаблицаЗначений");
	//Запрос=СоздатьОбъект("ODBCRecordSet");
	//ТекстЗапроса="SELECT ОжидаемаяПоставка.IDDOC [Ссылка $Документ.ОжидаемаяПоставка]
	//|FROM $Документ.ОжидаемаяПоставка AS ОжидаемаяПоставка
	//|WHERE ($ОжидаемаяПоставка.Клиент = :Клиент)
	//|	AND ($ОжидаемаяПоставка.ДатаОтгрузки = :ДатаОтгрузки)
	//|"; 
	//
	//Запрос.УстановитьТекстовыйПараметр("Клиент",Клиент);
	//Запрос.УстановитьТекстовыйПараметр("ДатаОтгрузки",ДатаОтгрузки);
	//Запрос.ВыполнитьИнструкцию(ТекстЗапроса,тДок);
	//
	//Если тДок.КоличествоСтрок()<1 Тогда
	//	Сообщить("Нет документа ОжидаемаяПоставка");
	//КонецЕсли;
	//Если ГрупповаяОбработка()=0 Тогда
	//	Докум=СоздатьОбъект("Документ"); 
	//	Если Докум.ВыбратьПодчиненныеДокументы(,,ТекущийДокумент())=1 Тогда
	//		Пока Докум.ПолучитьДокумент()=1 Цикл
	//			Если Докум.Вид()="ОжидаемаяПоставка" Тогда
	//				Сообщить("Есть подчиненый"+Докум.НомерДок);
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли; 
	//КонецЕсли;
	
	//Проверка наличия ожидаемой поставки.
//	Док=СоздатьОбъект("Документ.ОжидаемаяПоставка");
	
//	Если ПустоеЗначение(докОжидаемаяПоставка)=1 Тогда
//		НеПроводить(Контекст,"Отсутствует док Ожидаемая Поставка, перезапишите документ !");
//	Иначе
//		Если Док.НайтиДокумент(докОжидаемаяПоставка)=0 Тогда
//			НеПроводить(Контекст,"Отсутствует док Ожидаемая Поставка, перезапишите документ !");
//		КонецЕсли;
//	КонецЕсли;
	
	Если ПустоеЗначение(ОснСрокПоставки)=1 Тогда
		НеПроводить(Контекст,"Неопределен основной срок поставки.");
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(ДатаОтгрузки)=1 Тогда
		НеПроводить(Контекст,"Неопределена даты отгрузки.");
		Возврат;
	КонецЕсли;
	
	
	Рег=Регистр.ОжидаемаяПоставка;
	ТабЗнач = СоздатьОбъект("ТаблицаЗначений");	
	ВыгрузитьТабличнуюЧасть(ТабЗнач,"Товар,Цена,Количество");
	ТабЗнач.Свернуть("Товар,Цена","Количество");
	ТабЗнач.ВыбратьСтроки();
	Пока ТабЗнач.ПолучитьСтроку()=1 Цикл
		Рег.ПривязыватьСтроку(ТабЗнач.НомерСтроки);
		Рег.Товар=ТабЗнач.Товар;
		Рег.Количество=ТабЗнач.Количество;
		Рег.Цена=ТабЗнач.Цена;
		Рег.Клиент=Клиент; 
		Рег.Склад=Склад;
		Рег.ДатаОтгрузки=ДатаОтгрузки;
		Рег.ПоПоставке=докОжидаемаяПоставка;
		Рег.ПоЗаказу=ТекущийДокумент();
		Рег.ДвижениеПриходВыполнить();
	КонецЦикла;	
	//Обновление ТЧ Ожидаемой Поставке по Регистрам. 
	Если ГрупповаяОбработка()=0 Тогда
		ИзменениеОжидаемойПоставки(докОжидаемаяПоставка,ДатаОтгрузки,"Обновить");
	КонецЕсли;
	
КонецПроцедуры


Функция семПроверкаЦен()
	Если ГрупповаяОбработка() = 1 Тогда Возврат 0; КонецЕсли;
	Если Склад.НеДляПродажи = 1 Тогда Возврат 0; КонецЕсли;
	
	СпрИскл = СоздатьОбъект("Справочник.ТоварыБезТранспортныхЗатрат");
	спр = СоздатьОбъект( "Справочник.Цены" );
	ЕстьОщибки = 0;
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если Товар.ВидТовара <> Перечисление.ВидыТоваров.Товар Тогда Продолжить; КонецЕсли;
		
		Если СпрИскл.НайтиПоРеквизиту("Товар",Товар,0)=1 Тогда
			Продолжить;
		КонецЕсли;
		спр.ИспользоватьВладельца( Товар );
		спр.ВыбратьЭлементы(1);
		спр.ИспользоватьДату(ОснСрокПоставки,1);
		Пока спр.ПолучитьЭлемент() = 1 Цикл
			Если спр.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;
			
			//в категории цены задается контроль - здесь проверям
			Если спр.КатегорияЦены.Контролировать <> Да Тогда 
				Продолжить; 
			КонецЕсли;
			
			//в цене товара может задаваться признак не контролировать
			Если спр.НеКонтролировать = 1 Тогда 
				Продолжить; 
			КонецЕсли;
			
			//не контролировать наценку для свежих продуктов
			Если Товар.Родитель.СвежийПродукт = 1 Тогда 
				Продолжить; 
			КонецЕсли;

			закЦена = Окр(Пересчет( ЦенаСоСкидкой, Валюта,ДатаДок,Рубли,ОснСрокПоставки),2,1);
			текЦена = Окр(Пересчет( спр.Цена, спр.Валюта,ДатаДок,Рубли,ОснСрокПоставки),2,1);
			Если текЦена = 0 Тогда Продолжить; КонецЕсли;
			Если закЦена > текЦена Тогда
				Сообщить( Шаблон("Цена товара: [ТовКод] [Товар] на дату: [ОснСрокПоставки] по категории: [спр.КатегорияЦены] ([текЦена] [Товар.ВалютаУчета]) ниже закупочной цены ([закЦена] [Товар.ВалютаУчета])"), "!" );
				ЕстьОщибки = 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат ЕстьОщибки;
КонецФункции

//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения() Далее
//Конец текста, вставленного Инсталлятором МОД

//======================================================================
Функция ПроверкаДублированиеСтрокТовара()
	//* Проверку проводим только тех строк, которые неимеют заявки *\\
	ТЗ=СоздатьОбъект("ТаблицаЗначений");
	ТЗ.НоваяКолонка("НомерСтрокиДокумента");
	ТЗ.НоваяКолонка("Товар");
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если ПоСчету.Выбран()=0 Тогда
			ТЗ.НоваяСтрока();
			ТЗ.НомерСтрокиДокумента = НомерСтроки;
			ТЗ.Товар = Товар;
		КонецЕсли;
	КонецЦикла;

	СписокТоваров=СоздатьОбъект("СписокЗначений");
	ТЗ.ВыбратьСтроки();
	Пока ТЗ.ПолучитьСтроку() = 1 Цикл
		Твр=ТЗ.Товар;
		Если Твр.Выбран()=0 Тогда
			Продолжить;
		КонецЕсли;
		//  Проверка товара на совпадение в строках документа
		Если СписокТоваров.НайтиЗначение(Твр)<>0 Тогда
			// Значит такой товар уже в накладной есть
			Сообщить("Повторение товара:"+СокрП(Твр.Наименование)+" в строке "+ТЗ.НомерСтрокиДокумента);
			Возврат 1;
		КонецЕсли;
		СписокТоваров.ДобавитьЗначение(Твр,"");
	КонецЦикла;
	Возврат 0;
	
КонецФункции// ПроверкаДублированиеСтрокТовара

Процедура стар_ОбработкаПроведения()
//Закомментировано Инсталлятором МОД:Процедура ОбработкаПроведения()
        // сем \\
	Если семМожноПровести( Контекст ) = 0 Тогда Возврат; КонецЕсли;
	семОбновитьКурс( контекст );
        // сем //
    //	Если (ДатаДок>ТекущаяДата()) И (Пользователь.РазрПровБудущейДатой=0) Тогда
	//	НеПроводить(Контекст,"Нельзя проводить документ будущей датой!");
	//	Возврат;
	//КонецЕсли;

	//{***Проверка спец заказов на количество***

	Если ГрупповаяОбработка()=0 Тогда
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Если ПустоеЗначение(ПоСчету)=1 Тогда
				Продолжить;
			КонецЕсли;
			Докум=СоздатьОбъект("Документ");
			ТаблЗнач=СоздатьОбъект("ТаблицаЗначений");
			Докум=ПоСчету;
			Если Докум.Выбран()=1 Тогда
				Если Докум.Вид()="Счет" Тогда
					Докум.ВыгрузитьТабличнуюЧасть(ТаблЗнач,"Товар,Количество");
					ТаблЗнач.Свернуть("Товар", "Количество");
					ТаблЗнач.ВыбратьСтроки();
					Пока ТаблЗнач.ПолучитьСтроку() = 1 Цикл
						Если Товар=ТаблЗнач.Товар Тогда
							Если Количество>ТаблЗнач.Количество Тогда
								НеПроводить(Контекст,"Непроводится. Количество "+Товар.Наименование+ " ="+ТаблЗнач.Количество+ " в спецзаказе "+ПоСчету+" меньше количества товара ="+ Количество+" в заказе.");
								Возврат;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	//}***Проверка спец заказов на количество***	
	
	//Если ПроверкаДублейСтрок(Контекст)=1 Тогда 

	Если ГрупповаяОбработка()=0 Тогда
		Если ПустоеЗначение(ДатаОтгрузки)=1 Тогда
			НеПроводить(Контекст,"Не задана дата отгрузки!");
			Возврат;
		КонецЕсли;

		Если ДатаОтгрузки>ОснСрокПоставки Тогда
			НеПроводить(Контекст,"Дата отгрузки не может быть больше срока поставки!");
			Возврат;
		КонецЕсли;

		Если ПроверкаДублированиеСтрокТовара()=1 Тогда
		//	Сообщить("В документе строки с одинаковым товаром!");
			НеПроводить(Контекст,"В документе строки с одинаковым товаром!");
			Возврат;
		КонецЕсли;  
		Если ПустоеЗначение(старОснСрокПоставки)=1 Тогда
			старОснСрокПоставки=ОснСрокПоставки;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустоеЗначение(Клиент)=1 Тогда
		НеПроводить(Контекст,"Не указан Поставщик!");
		Возврат;
	КонецЕсли;
	//-------------------------------------
	Клиент.ИспользоватьДату(ДатаДок);
	// Запишем главного клиента
	Если Клиент.КлГруппа.Выбран()=1 Тогда
		КлГруппа=Клиент.КлГруппа;
	Иначе
		КлГруппа=Клиент;
	КонецЕсли;

	Если ГрупповаяОбработка()=0 Тогда
		Если семПроверкаЦен() = 1 Тогда СтатусВозврата( 0 ); Возврат; КонецЕсли;
	КонецЕсли;
	
	Если Фирма.Выбран()=1 Тогда
		
		ВыбратьСтроки();
		Пока( ПолучитьСтроку()=1) Цикл
			
			Если Товар.Выбран()=0 Тогда
				Сообщить("В документе "+Вид()+" № "+НомерДок
				+" от "+ДатаДок+"Не указан товар, который выписывается!");
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;
			
			Если Количество=0 Тогда
				Сообщить("В строке "+НомерСтроки+" не задано количество!");
				Продолжить;
			КонецЕсли;
			
			Рег=Регистр.ЗаказыПоставщикам;
			Рег.Товар=Товар;
			Рег.Клиент=Клиент; 
			Рег.Склад=Склад;
			
			Если ДокументОснование.Выбран()=1 Тогда
				Рег.ПоЗаказу=ДокументОснование; 
			Иначе
				Рег.ПоЗаказу=ТекущийДокумент(); 
			КонецЕсли;
			
			Рег.ПривязыватьСтроку(НомерСтроки);
			Рег.Количество=Подтверждено;
			
			Если ПустоеЗначение(СрокПоставки)=1 Тогда
				Рег.СрокПоставки=ОснСрокПоставки;
			Иначе
			    Рег.СрокПоставки=СрокПоставки;
			КонецЕсли;
			
			Рег.ДвижениеПриходВыполнить();

			Если (ПустоеЗначение(ПоСчету)=0) И (ПоСчету.Проведен()=1) Тогда
				//проведение по регистру заказы заявки
				Рег=Регистр.ЗаказыПоставщикамЗаявки;
				Рег.Товар=Товар;
				
				Если ДокументОснование.Выбран()=1 Тогда
					Рег.ПоЗаказу=ДокументОснование; 
				Иначе
					Рег.ПоЗаказу=ТекущийДокумент(); 
				КонецЕсли;
	
				Рег.ПоСчету=ПоСчету; 
				Рег.ПривязыватьСтроку(НомерСтроки);
				Рег.Количество=Подтверждено;
				Рег.ДвижениеПриходВыполнить();
				
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	

	
	//Проверка документов бронирования
	Если ГрупповаяОбработка()=0 Тогда
		Докум=СоздатьОбъект("Документ"); 
		Если Докум.ВыбратьПодчиненныеДокументы(,,ТекущийДокумент())=1 Тогда
			Пока Докум.ПолучитьДокумент()=1 Цикл
				Если Докум.Вид()="Счет" Тогда
					Если Докум.фБроньвпути=1 Тогда
						//проверка даты отгрузки
						Если ОснСрокПоставки>Докум.ДатаПоставки-1 Тогда
							ОтправитьСообщениеПольз(Докум.Автор,"Внимание, проблема с документом бронирования"+Докум.НомерДок+". Дата поставки по документу ЗаказПоставщику № "+НомерДок+" изменена на "+ОснСрокПоставки,)	
						КонецЕсли;				
					КонецЕсли;   
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;
	
	ВсегоСуммаШ = Итог("СуммаПодтв");
	ВсегоНДСШ = Итог("НДС");
	
	Если ДатаДок>=Константа.ДатаВнедренияОжПоставки  Тогда
		Если ПустоеЗначение(докОжидаемаяПоставка)=0 Тогда
			ПроведениеОжидаемойПоставки();
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеМОД(Контекст)=1 Тогда
	    Возврат;
	КонецЕсли;
	стар_ОбработкаПроведения();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаУдаленияПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_

	Если докОжидаемаяПоставка.Проведен()=1 Тогда
		Сообщить("Снять проведение нельзя. Снимите проведение у соответствующей Ожидаемой поставки");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;	

	Если ПроведениеПоАлгоритмуМОД=1 Тогда
	    Возврат;
	КонецЕсли;
	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
	
	ИзменениеОжидаемойПоставки(докОжидаемаяПоставка,ДатаОтгрузки,"Обновить");

КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД

