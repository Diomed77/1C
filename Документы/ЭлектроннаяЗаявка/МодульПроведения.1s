Функция семПроверкаВремениЭлЗаявки()
	Если кВклПроверкуВремениЭлЗаявок = 0 Тогда Возврат 1; КонецЕсли;
	текДень = ТекущаяДата();
	Если (ВидДоставки = Перечисление.ВидыДоставки.Самовывоз) ИЛИ (ВидДоставки = Перечисление.ВидыДоставки.Агент) Тогда
		Если ДатаПоставки = текДень Тогда
			//максВремя = "18:00:00";
			//Если ТекущееВремя() > максВремя Тогда
			//	Сообщить(Шаблон("Текущее время ([ТекущееВремя()]) превышает допустимое время ([максВремя]) проведения Эл. заявки на самовывоз на сегодняшний день."),"I");
			//	Возврат 0;
			//КонецЕсли;
		КонецЕсли;
		Возврат 1;
	КонецЕсли;
	следДень = ТекущаяДата()+1;
	пМаршрут = Клиент.АдресДоставки.Маршрут;
	Если ДатаПоставки = текДень Тогда
		максВремя = пМаршрут.ВремяТекДень;
		Если ПустаяСтрока( СтрЗаменить(максВремя,":","") ) = 1 Тогда Возврат 1; КонецЕсли;
		Если ТекущееВремя() > максВремя Тогда
			Сообщить(Шаблон("Текущее время ([ТекущееВремя()]) превышает допустимое время ([пМаршрут.ВремяТекДень]) проведения Эл. заявки для маршрута ([пМаршрут]) на сегодняшний день."),"I");
			Возврат 0;
		КонецЕсли;
	ИначеЕсли ДатаПоставки = следДень Тогда
		Если семЕстьПраво("Документ","Счет","Превышение лимита времени до 18:00") = 1 Тогда
			максВремя = ?(пМаршрут.ВремяСледДень<"18:00:00","18:00:00",пМаршрут.ВремяСледДень);
		Иначе
			максВремя = пМаршрут.ВремяСледДень;
		КонецЕсли;
		Если ПустаяСтрока( СтрЗаменить(максВремя,":","") ) = 1 Тогда Возврат 1; КонецЕсли;
		Если ТекущееВремя() > максВремя Тогда
			Сообщить(Шаблон("Текущее время ([ТекущееВремя()]) превышает допустимое время ([максВремя]) проведения Эл. заявки для маршрута ([пМаршрут]) на следующий день."),"I");
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат 1;
	КонецЕсли;
КонецФункции

//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения() Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ОбработкаПроведения()
	//Закомментировано Инсталлятором МОД:Процедура ОбработкаПроведения()
	// сем \\
	Если семМожноПровести( Контекст ) = 0 Тогда Возврат; КонецЕсли;
	семОбновитьКурс( контекст );
	// сем //
	
	Если Клиент.Выбран()=0 Тогда
		НеПроводить(Контекст,"Выберите клиента!");
		Возврат;
	КонецЕсли;

	Клиент.ИспользоватьДату(ДатаДок);
	// Запишем главного клиента
	Если Клиент.КлГруппа.Выбран()=1 Тогда
		КлГруппа=Клиент.КлГруппа;
	Иначе
		КлГруппа=Клиент;
	КонецЕсли;       

	Если (Агент.Выбран()=0) и (ГрупповаяОбработка()=0) Тогда
		НеПроводить(Контекст,"Выберите агента!");
		Возврат;
	КонецЕсли;

	
	Если Склад.Выбран()=0 Тогда
		НеПроводить(Контекст,"Не указан склад по которому производится резервирование!");
		Возврат;
	КонецЕсли;
	
	Если ГрупповаяОбработка()=0 Тогда
		Если (ПроверкаДублейСтрок(Контекст)=1) И (ВидЗаявки<>Перечисление.ВидыЗаявок.ЗаявкаНаВозврат) Тогда 
			НеПроводить(Контекст,"В документе строки с одинаковым товаром!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если КоличествоСтрок()=0 Тогда 
		НеПроводить(Контекст,"Документ пустой!");
		Возврат;
	КонецЕсли;     
	
	Если ПустоеЗначение(ДатаПоставки) = 1 Тогда 
		НеПроводить(Контекст,"Выберите дату поставки!"); 
		Предупреждение("Выберите дату поставки!",10);
		Возврат;
	КонецЕсли;  
	
	Если ГрупповаяОбработка() = 0 Тогда
		Если ВидДоставки.Выбран() = 0 Тогда
			НеПроводить(Контекст,"Не выбран вид доставки!"); 
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ДатаПоставки < ДатаДок Тогда
		НеПроводить(Контекст,"Дата поставки прошлым числом, документ не проведен!"); 
		Предупреждение("Дата поставки прошлым числом, документ не проведен!",10);
		Возврат;		
	КонецЕсли;	 

	Если ГрупповаяОбработка()=0 Тогда
		Если (Константа.НовыйМеханизмПретензий.Получить(ДатаДок)=Да) Тогда 
			Если (СокрЛП(Клиент.Рег_номер) = СокрЛП(Фирма.Рег_номер)) И (Фирма = Константа.ОсновнаяФирма) И (ПустоеЗначение(СкладПолучатель)=1) Тогда
				НеПроводить(Контекст,"Для эл. заявки на пополнение склада должен быть обязательно выбран склад получателя!"); 
				Возврат;		
			КонецЕсли;	 
		КонецЕсли;
	КонецЕсли;

	
	Если ГрупповаяОбработка() = 0 Тогда
		Путь = КаталогИБ() + "ExtForms\Sem\ПроверкаДолгаКлиента.ert";
		Если ФС.СуществуетФайл( Путь ) = 1 Тогда
			сп = СоздатьОбъект( "СписокЗначений" );
			сп.Установить( "Контекст", ВзятьКонтекст( Контекст ) );
			ОткрытьФормуМодально( "Обработка", сп, Путь );
			Если сп.Получить( "Результат" ) <> 1 Тогда
				СтатусВозврата(0); Возврат;
			КонецЕсли;
		Иначе
			Если семПроверкаКлиента(Контекст) = 0 Тогда
				Сообщить("Документ не проведен!!!","!!!");
				СтатусВозврата(0); Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ГрупповаяОбработка() = 0 Тогда
		Если семПроверкаВремениЭлЗаявки() = 0 Тогда
			НеПроводить(Контекст,"Превышено время подачи эл. заявок.");
			Возврат;
		КонецЕсли;
	КонецЕсли;


	
	//проставялем агента из Клиента для документов из центра
	Если (КлиентФилиала = Клиент) И (Фирма=Константа.ОсновнаяФирма) И (ПустоеЗначение(Агент)=1)  Тогда
		Агент=Клиент.Агент;
	КонецЕсли;
	
	Если ТипУчета = Фин Тогда Возврат; КонецЕсли;
	Если ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка Тогда
		
		
		Если ГрупповаяОбработка()=0 Тогда
			
			Позиция=СформироватьПозициюДокумента(ТекущийДокумент(),0);
			ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");
			Условие = "Товар IN (SELECT $Док.Товар FROM $ДокументСтроки."+Вид()+" Док (NOLOCK) WHERE IDDOC=:ВыбДок)";
			
			ТекстЗапроса="SELECT РезервыТоваровОстатки.Товар [Товар $Справочник.Номенклатура]
			|					, РезервыТоваровОстатки.РезервТовараОстаток Резерв
			|			  FROM $РегистрОстатки.РезервыТоваров("+?(ИтогиАктуальны()=1,"",":Позиция~")+",INNER JOIN $Документ.Счет ДокС (NOLOCK) ON ДокС.IDDOC = ПоСчету AND $ДокС.Склад = :ВыбСклад,
			|													"+Условие+",
			|												(Товар),) AS РезервыТоваровОстатки
			|";
			
			ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДок", ТекущийДокумент());
			ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбСклад",Склад);
			ЗапросСКЛ.УстановитьТекстовыйПараметр("Позиция", Позиция);
			итТаблРезервы=СоздатьОбъект("ИндексированнаяТаблица");
			ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итТаблРезервы);
			итТаблРезервы.ДобавитьИндекс("иТовар","*Товар");
	
			ДопУсловие="AND (Склад = :ВыбСклад)";
			ТекстЗапроса="SELECT ОстаткиТоваровОстатки.Товар [Товар $Справочник.Номенклатура]
			|					, ОстаткиТоваровОстатки.ОстатокТовараОстаток Остаток
			|			  FROM $РегистрОстатки.ОстаткиТоваров("+?(ИтогиАктуальны()=1,"",":Позиция~")+",,
			|												Товар IN (SELECT $Док.Товар FROM $ДокументСтроки."+Вид()+" Док (NOLOCK) WHERE IDDOC=:ВыбДок)
			|												"+ДопУсловие+",
			|												Товар,) AS ОстаткиТоваровОстатки		
			|";
			ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбСклад",Склад);
			ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДок", ТекущийДокумент());
			ЗапросСКЛ.УстановитьТекстовыйПараметр("Позиция", Позиция );
			итТаблОстатки=СоздатьОбъект("ИндексированнаяТаблица");
			ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итТаблОстатки);
			итТаблОстатки.ДобавитьИндекс("иТовар","*Товар");
			
			// расчет регистра
//			спТоваров = СоздатьОбъект("СписокЗначений");
//			ВыгрузитьТабличнуюЧасть(спТоваров,"Товар");
			
			//регОстатки = СоздатьОбъект( "Регистр.ОстаткиТоваров" ); 
			//регОстатки.УстановитьЗначениеФильтра( "Товар", спТоваров, 2 );
			//регОстатки.УстановитьЗначениеФильтра( "Склад", Склад, 2 );
			
			//регРезервы = СоздатьОбъект( "Регистр.РезервыТоваров" ); 
			//регРезервы.УстановитьЗначениеФильтра( "Товар", спТоваров, 2 );
			
			//Если ИтогиАктуальны()=0  Тогда
			//	регОстатки.ВременныйРасчет();
			//	регРезервы.ВременныйРасчет();
			//	РассчитатьРегистрыНа( ТекущийДокумент() );
			//КонецЕсли;
			
		КонецЕсли;
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Если Товар.Выбран() = 0 Тогда
				Сообщить("В документе "+Вид()+" № "+НомерДок+" от "+ДатаДок+"Не указан товар, который выписывается!", "I");
				Продолжить;
			КонецЕсли;
			
			//только при проведении в интерактивном режиме меняем кол-во резерва, чтобы не образовывались минусовые резервы
			Если ГрупповаяОбработка()=0 Тогда 
				
				итТаблРезервы.УстановитьФильтр(Товар,Товар,"иТовар");
				текРезерв=итТаблРезервы.Итог("Резерв","иТовар");

				итТаблОстатки.УстановитьФильтр(Товар,Товар,"иТовар");
				текОстаток=итТаблОстатки.Итог("Остаток","иТовар");
				
				//текРезерв = регРезервы.СводныйОстаток(Товар,,"РезервТовара");
				//текОстаток = регОстатки.Остаток(Товар,Склад,"ОстатокТовара");
				СвОст = Макс( текОстаток - текРезерв, 0 );
				промКолво = Количество*Коэффициент;
				Если (КлиентФилиала = Клиент) И (Фирма=Константа.ОсновнаяФирма)  Тогда
					// для электронок пришедших на филиал из центра не проверяем остаток
					Резерв = промКолво/Коэффициент;
				ИначеЕсли СвОст < промКолво Тогда
					Если ГрупповаяОбработка()=0 Тогда
						Сообщить("На складе "+Склад+" нет свободного остатка товара "
						+Товар.Код+" "+Товар.Наименование + " для резервирования!");
						Сообщить("           Свободный остаток: "+СвОст+" "+Товар.БазоваяЕдиницаИзмерения+"."); 
						Сообщить("      Необходимое количесвто: "+промКолво+" "+Товар.БазоваяЕдиницаИзмерения+".");  
						Сообщить("Зарезервированное количесвто: "+СвОст+" "+Товар.БазоваяЕдиницаИзмерения+"."); 
						Сообщить("Осталось незарезервированным: "+(промКолво-СвОст)+" "+Товар.БазоваяЕдиницаИзмерения+".");
						Сообщить("-------------------------------------------------------------------------------");
					КонецЕсли;
					Резерв = СвОст/Коэффициент;
				Иначе
					Резерв = промКолво/Коэффициент;
				КонецЕсли;				
				
			КонецЕсли;
			
			Если Резерв = 0 Тогда Продолжить;  КонецЕсли;
			Регистр.РезервыТоваров.ПривязыватьСтроку(НомерСтроки);
			Регистр.РезервыТоваров.Товар=Товар;
			Регистр.РезервыТоваров.ПоСчету=ТекущийДокумент(); 
			Регистр.РезервыТоваров.РезервТовара=Резерв*Коэффициент;
			Регистр.РезервыТоваров.ДвижениеПриходВыполнить();  
		КонецЦикла;
	ИначеЕсли ВидЗаявки = Перечисление.ВидыЗаявок.СпецЗаказ Тогда
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Если Товар.Выбран() = 0 Тогда 
				Сообщить("В документе "+Вид()+" № "+НомерДок+" от "+ДатаДок+"Не указан товар, который выписывается!");
				Продолжить;
			КонецЕсли;
			Регистр.СпецЗаказы.ПривязыватьСтроку( НомерСтроки );
			Регистр.СпецЗаказы.Товар = Товар;
			Регистр.СпецЗаказы.ПоСчету = ТекущийДокумент(); 
			Регистр.СпецЗаказы.Заказано = Количество * Коэффициент;
			Регистр.СпецЗаказы.ДвижениеПриходВыполнить();
		КонецЦикла;
	ИначеЕсли ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаНаВозврат Тогда
	КонецЕсли;
	
	//прописываем в регистр комплектцаций для последующей обработки на месте комплектации
	// для заявок пришедших из центра - также прописываем комплектацию, независимо от склада
	Если ((ПустоеЗначение(Склад.МестоКомплектации)=0) И ((ДатаПоставки> '27.10.09') ИЛИ ((ПризнакПечати=0) И (ДатаПоставки<= '27.10.09')))) ИЛИ ((КлиентФилиала = Клиент) И (Фирма=Константа.ОсновнаяФирма))  Тогда
		Если (ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка) ИЛИ (ВидЗаявки = Перечисление.ВидыЗаявок.СпецЗаказ) Тогда
			Если ПустоеЗначение(МестоКомплектации)=1 Тогда
				МестоКомплектации=Склад.МестоКомплектации;
			КонецЕсли; 
	
			Регистр.КомплектацияЗаявок.ДатаПоставки=ДатаПоставки;
			Регистр.КомплектацияЗаявок.ПоСчету=ТекущийДокумент();
			Регистр.КомплектацияЗаявок.ВидЗаявки=ВидЗаявки;
			Регистр.КомплектацияЗаявок.МестоКомплектации=МестоКомплектации;
			Регистр.КомплектацияЗаявок.Склад=Склад;
			Регистр.КомплектацияЗаявок.ВидДоставки=ВидДоставки;

			Регистр.КомплектацияЗаявок.Статус=1;
				
			Регистр.КомплектацияЗаявок.Количество=1;
			Регистр.КомплектацияЗаявок.ДвижениеПриходВыполнить();
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеМОД(Контекст)=1 Тогда
		Возврат;
	КонецЕсли;
	стар_ОбработкаПроведения();
КонецПроцедуры

Процедура стар_ОбработкаУдаленияПроведения()
	//док = СоздатьОбъект("Документ");
	
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаУдаленияПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеПоАлгоритмуМОД=1 Тогда
		Возврат;
	КонецЕсли;
	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
	ПриОтменеПроведенияДокумента(ТекущийДокумент());
	стар_ОбработкаУдаленияПроведения();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД