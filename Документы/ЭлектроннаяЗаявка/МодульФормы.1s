Перем ВидимостьПроведения;
Перем оПолеВвода_Контрагент; //:Общие.ПолеВыбораЗначения
Перем ПарСтрДокЭлЗаявка; // имя опций печати документов
Перем Валюта_Прежн;
Перем Курс_Прежн;
Перем Режим;
Перем стар_Клиент;
Перем Парт;
Перем ИнформационнаяСтрока;
Перем Prompt;  
Перем ПечатьНапрямую;
Перем спКредЛинияКлиента;
Перем Расш;
Перем ПредЦена;

Процедура ВыборКлиента() Далее
Процедура ВыборКлиентаФилиала() Далее

Процедура кнПодбор()
	//Z_Подбор(Контекст,Режим);
	// переменные нужны, чтобы не изменялись данные в документе, при изменении их в форме подбора
	пКлиент = ?(ПустоеЗначение(КлиентФилиала)=1,Клиент.ТекущийЭлемент(),КлиентФилиала.ТекущийЭлемент());
	//пСклад = Склад;
	//пВалюта = Валюта;
	ОткрытьПодбор("Справочник.Номенклатура","ДляПодбора",пКлиент);
	Попытка
		УстановитьЗначениеВПодборе("Склад",Склад);
	Исключение
	КонецПопытки;
	Попытка
		УстановитьЗначениеВПодборе("выбВалюта",Валюта);
	Исключение
	КонецПопытки;
	Режим="Каталог";
КонецПроцедуры



Процедура ВыбратьГрафикМаршрутаДляКлиента()

	Если (Клиент.Выбран()=1) И (ПустоеЗначение(ДатаПоставки)=0) Тогда
		пМаршрут=Клиент.АдресДоставки.Маршрут;
		Запрос=СоздатьОбъект("ODBCRecordSet");
		ТекстЗапроса="SELECT МаршрутыДоставкиГрафик.ID [График $Справочник.МаршрутыДоставкиГрафик]
		|			  FROM $Справочник.МаршрутыДоставкиГрафик AS МаршрутыДоставкиГрафик
		|			  WHERE (МаршрутыДоставкиГрафик.PARENTEXT = :ВыбМаршрут)
		|";
		Запрос.УстановитьТекстовыйПараметр("ВыбМаршрут",пМаршрут);
		тГрафикМаршрута=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
		Если тГрафикМаршрута.КоличествоСтрок()>0 Тогда
			Если ПустоеЗначение(МаршрутДоставкиГрафик)=1 Тогда
				МаршрутДоставкиГрафик=тГрафикМаршрута.ПолучитьЗначение(1,"График");
			КонецЕсли;

			Если тГрафикМаршрута.КоличествоСтрок()>1 Тогда
				сзГрафик=СоздатьОбъект("СписокЗначений");
				тГрафикМаршрута.Выгрузить(сзГрафик);
				сзГрафик.ВыбратьЗначение(МаршрутДоставкиГрафик,"Выберите график для маршрута "+пМаршрут);
			КонецЕсли;			
		Иначе
			МаршрутДоставкиГрафик="";
		КонецЕсли;
	Иначе
		МаршрутДоставкиГрафик="";
	КонецЕсли;
КонецПроцедуры

Процедура ПриВводеСтроки()
	Сообщить( "Новые товары добавляются в документ через кнопку <z Подбор>", "I" );
	СтатусВозврата(0);
КонецПроцедуры

Процедура семУстановкаКурса()
	// Процедура создана специально для установки заранее определеннтого курса валюты LTL
	// при создании эл.заявки агентом из Литвы
	Если глКодСтраныПользователя <> Константа.ОсновнаяФирма.Страна.Код Тогда // только для агентов из Литвы
		Если Валюта.Наименование = "LTL" Тогда // только для литовской валюты LTL
			Курс = 0.20354611;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ФорматВывода( парам )
	Если парам = "Маршрут" Тогда
		Если Клиент.Выбран() = 0 Тогда Возврат ""; КонецЕсли;
		Если Клиент.АдресДоставки.Выбран() = 0 Тогда
			Возврат Клиент.Маршрут;
		Иначе
			Адрес = Клиент.АдресДоставки;
			Возврат Шаблон( "[Адрес.Родитель.Родитель.Наименование], [Адрес.Родитель.Наименование] ([Адрес.Маршрут.Наименование])" );
		КонецЕсли;
	ИначеЕсли парам = "ДниОбсл" Тогда
		Если Клиент.АдресДоставки.Выбран() = 0 Тогда
			Возврат "";
		Иначе
			Возврат Клиент.АдресДоставки.Маршрут.ДниОбслуживания;
		КонецЕсли;
	ИначеЕсли парам = "Валюта" Тогда
		Возврат Шаблон("[Валюта.Наименование] [Курс#Ч7.4]");
	ИначеЕсли парам = "ЦенаИзКаталога" Тогда
		// получение даты, на которую необходимо получить цену \\
		Если Число(ДатаПоставки) = 0 Тогда
			ДатаЦены = ДатаДок;
		Иначе
			ДатаЦены = ДатаПоставки;
		КонецЕсли;
		// получение даты, на которую необходимо получить цену //
		Возврат Формат(ЦенаТовараПоКатегорииДляТовара(Товар,КатегорияЦены,Валюта,Курс,ДатаЦены), "Ч14.2");
	КонецЕсли;
КонецФункции

Процедура ПриВыбореВидаОплаты()
	ВидОплаты = спВидОплаты.ПолучитьЗначение(спВидОплаты.ТекущаяСтрока());
КонецПроцедуры

Функция УправлениеДиалогом()
	Форма.кнПечать.Видимость(Проведен());
	Форма.кнПечатьСчет.Видимость(Проведен());
	Форма.кнПрямаяПечать.Видимость(Проведен());
	Форма.кнПрямаяПечать.Заголовок(?(ПризнакПечати = 1,"Распечатано","Не распечатано") ); 
	Форма.КнПровести.Видимость( ВидимостьПроведения );
	Форма.ОК.Видимость( ВидимостьПроведения );
	Форма.тКодРозн.Видимость(?((Склад.ВидСклада=Перечисление.ВидыСкладов.Розничный) ИЛИ (СкладПолучатель.ВидСклада=Перечисление.ВидыСкладов.Розничный),1,0));
	Форма.кнПрямаяПечать.Видимость(1-Константа.ПечатьЗаявокНаСкладе);

	флДост = семЕстьПраво( "Документ", "Счет", "Запрет на изменение цены" );
	Форма.Цена.Доступность(1-флДост);
	Форма.ЦенаСНДС.Доступность(1-флДост);
	Форма.СкидкаНакл.Доступность(1-флДост);
	
	Если ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаНаВозврат Тогда
		флВидимостьВозврат=1;
	Иначе
		флВидимостьВозврат=0;
	КонецЕсли;
	Форма.МинСрокРеализ.Видимость(1-флВидимостьВозврат);
	Форма.МаксСрокРеализ.Видимость(1-флВидимостьВозврат);
	Форма.ПояснениеСкидки.Видимость(1-флВидимостьВозврат);
	Форма.Резерв.Видимость(1-флВидимостьВозврат);
	
КонецФункции

Процедура ПриВыбореТовара()
	Если ПустоеЗначение(Цена) = 1 Тогда 
		УстанЦеныРасх(Контекст)
	КонецЕсли; 
	ТовКод=Товар.Код;
КонецПроцедуры	

Процедура ПриВыбореЕдИзм()
	УстанЦеныРасх(Контекст,"Подбор",0);	
	семПроверкаМинОтргКолва( контекст );
	Выч_суммы_накл(Контекст);
КонецПроцедуры


Функция АдресСтрокой( пАдрес, начУр, конУр, пРазд )
	сп = СоздатьОбъект( "СписокЗначений" );
	сп.ДобавитьЗначение( "пАдрес.Родитель.Родитель.Родитель.Код", "1" );
	сп.ДобавитьЗначение( "пАдрес.Родитель.Родитель.Код" , "2" );
	сп.ДобавитьЗначение( "пАдрес.Родитель.Код" , "3" );
	сп.ДобавитьЗначение( "пАдрес.Код" , "4" );
	текУр = пАдрес.Уровень();
	начУр = ?( начУр > текУр, текУр, начУр );
	конУр = ?( конУр > текУр, текУр, конУр );
	стр = "";
	Для н = начУр по конУр Цикл
		стр = стр + "[" + сп.ПолучитьЗначение( н+4-текУр ) + "]" + ?( н = конУр, "", пРазд );
	КонецЦикла;
	Возврат Шаблон( стр );
КонецФункции

Функция семПечатьШтрихКода(OLE)
	Попытка OLE.text = Прав(IDD,12);
	Исключение Сообщить("Не найден OLE объект.","!");
	КонецПопытки;
КонецФункции

Процедура ПолучитьСписокПретензий( стр1, стр2 )
	спр = СоздатьОбъект( "Справочник.Претензии" );
	Если спр.НайтиПоКоду("B",0) = 0 Тогда Возврат; КонецЕсли;
	спр.ПорядокКодов();
	пГруппа = спр.ТекущийЭлемент();
	спр.ИспользоватьРодителя(пГруппа);
	спр.ВыбратьЭлементы(1); сч = 0;
	Пока спр.ПолучитьЭлемент() = 1 Цикл
		Если спр.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;
		Если спр.ДляАгента=0 Тогда Продолжить; КонецЕсли;
		Сч = Сч + 1;
		Если Сч <= 5 Тогда
			стр1 = стр1+спр.НаименованиеРусс+РазделительСтрок;
		Иначе
			стр2 = стр2+спр.НаименованиеРусс+РазделительСтрок;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура семПечать( пПросмотр = 1 )
	
	Если Проведен()=0 Тогда
		Предупреждение("Печать заявки возможно только после проведения!");
		Возврат;
	КонецЕсли;
	
	Если Константа.ПечатьЗаявокНаСкладе = 1 Тогда
		Если пПросмотр = 0 Тогда
			Сообщить("Прямая печать запрещена. Прямая печать электронных заявок происходит непосредственно на складе!","I");
			Возврат;
		Иначе
			Если семЕстьПраво( "Документ", "Счет", "Печать" ) = 0 Тогда
				Сообщить("Печать электронных заявок происходит непосредственно на складе!","I");
				Возврат;
			КонецЕсли;
			
			Если семЕстьПраво( "Документ", "Счет", "Комплектация после печати" ) = 1 Тогда
				глОтправитьНаКомплектациюЗаявку(ТекущийДокумент());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	таб=СоздатьОбъект( "Таблица" );
	Если семТекСтрана() = "LT" Тогда таб.ИсходнаяТаблица( "СчетНовый2LT" );
	Иначе таб.ИсходнаяТаблица( "СчетНовый2" );
	КонецЕсли;

	Если ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаНаВозврат Тогда
		Таб.ИсходнаяТаблица("ЗаявкаНаВозврат");
	КонецЕсли;
	
	Если ВидДоставки=Перечисление.ВидыДоставки.Самовывоз Тогда
		пВидДоставки="Paєizveєana (klients)";
	ИначеЕсли ВидДоставки=Перечисление.ВидыДоставки.Агент Тогда
		пВидДоставки="Paєizveєana (aЄents)";
	ИначеЕсли ВидДоставки=Перечисление.ВидыДоставки.Доставка Тогда
		пВидДоставки="Х";
	КонецЕсли;
	
	пДатаПоставки = ДатаПоставки;
	пАгент = Агент;
	пНомерДок = НомерДок;
	пНомерПретензии = ДокументОснование.НомерДок;
	пДатаДок = ДатаДок;
	пФирма = Фирма.ПолноеНаименование.Получить(ДатаДок);
	пСклад = Склад.Наименование;
	пАдрес = Склад.Адрес;
	пКомп = ИмяКомпьютера();
	пАвтор = Автор;
	
	
	Если семТекСтрана() = "LV" Тогда
		промКлиент = ?(КлиентФилиала.Выбран() = 0,Клиент,КлиентФилиала);
	Иначе
		промКлиент = Клиент;
	КонецЕсли;
	

	Если промКлиент.КлГруппа.Выбран()=1 Тогда
		промКлГруппа=промКлиент.КлГруппа;
	Иначе
		промКлГруппа=промКлиент;
	КонецЕсли;       
	
	пКлиентКод = промКлиент.Код;
	пКлиентНаим = промКлиент.ПолноеНаименование;
	Если промКлиент.АдресДоставки.Выбран() = 0 Тогда
		пКлиентАдрес =  СокрЛП( промКлиент.ПочтовыйАдрес ) +", "+СокрЛП( промКлиент.ГородДоставки )+", "+СокрЛП( промКлиент.ПочтовыйИндекс );
		пМаршрут = ?(промКлиент.Маршрут.Выбран() = 1, Шаблон( "[промКлиент.Маршрут.Код] ([промКлиент.Маршрут.ДниОбслуживания])" ), "" ) ;
	Иначе
		Адрес = промКлиент.АдресДоставки;
		пКлиентАдрес = Шаблон( "[Адрес.Наименование] [промКлиент.АдресДоставкиДоп]" ) ;
		//пМаршрут = Шаблон( "[Адрес.Маршрут.Описание] ([Адрес.Маршрут.ДниОбслуживания])" ) ;
		пМаршрут = ?(Адрес.Маршрут.Выбран() = 1,Шаблон( "[Адрес.Маршрут.Описание] ([Адрес.Маршрут.ДниОбслуживания])" ), "" );
		//пМаршрут = Адрес.Маршрут.Описание;
	КонецЕсли;
	пВажность = Клиент.Важность;
	Если ВидОплаты = 1 Тогда
		таб.ВывестиСекцию( "ОплатаНал" );
	КонецЕсли;
	Если ВидЗаявки = Перечисление.ВидыЗаявок.СпецЗаказ Тогда
		таб.ВывестиСекцию( "СпецЗаказ" );
	КонецЕсли;
	пШтрихКод = Прав(IDD,12);
	
	пОснование = Основание;
	
	таб.ВывестиСекцию( "Заголовок" );
	
	таб.ВывестиСекцию( "Шапка" );
	табл = СоздатьОбъект( "ТаблицаЗначений" );
	ВыгрузитьТабличнуюЧасть(табл);
	табл.НоваяКолонка("Группа");
	табл.НоваяКолонка("СклАдрес");
	табл.НоваяКолонка("Сорт");
	
	итТаблДокОсн=СоздатьОбъект("ИндексированнаяТаблица");
	Если ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаНаВозврат Тогда
		итТаблДокОсн.Загрузить(ДокументОснование);
		итТаблДокОсн.ДобавитьИндекс("иТовар","*Товар");
	КонецЕсли;

	
	пИтогРезерв = 0;
	пИтогКол 	= 0;
	спр = СоздатьОбъект( "Справочник.СкладскиеАдреса" );
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку() = 1 Цикл
		промТовар = табл.Товар;
		
		Если Склад.ТипСклада=Перечисление.ТипыСкладов.СкладНеликвидов Тогда
			табл.Группа = "NOCENOTIE PRODUKTI";
			табл.СклАдрес  = "";
			табл.Сорт = 0;
		Иначе
		
			Если Склад.ТипСклада=Перечисление.ТипыСкладов.СкладРаспродажи Тогда
				табл.Группа = "IZPARDO№ANA";
				табл.СклАдрес  = "";
				табл.Сорт = 0;
			КонецЕсли;


			рез=спр.ВыбратьЭлементыПоРеквизиту("Товар",промТовар,0,0);
			Ячейка="";
			Если рез=1 Тогда
				Пока Спр.ПолучитьЭлемент() = 1 Цикл
					Ячейка = спр.ТекущийЭлемент();
					Если Ячейка.Родитель.Родитель.Родитель.Склад=Склад Тогда
						Если Склад.ТипСклада=Перечисление.ТипыСкладов.СкладРаспродажи Тогда
							табл.Группа = "IZPARDO№ANA "+АдресСтрокой( Ячейка, 1, 1, "" ) + Шаблон( " ([Ячейка.Родитель.Родитель.Родитель.МестоХранения.УсловияХранения])" );
						Иначе
							табл.Группа = АдресСтрокой( Ячейка, 1, 1, "" ) + Шаблон( " ([Ячейка.Родитель.Родитель.Родитель.МестоХранения.УсловияХранения])" );
						КонецЕсли;
						табл.СклАдрес = АдресСтрокой( Ячейка, 2, 4, "-" );
						табл.Сорт = 0;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
//			Если спр.НайтиПоРеквизиту( "Товар", промТовар, 1 ) = 1 Тогда
				//Ячейка = спр.ТекущийЭлемент();
				//табл.Группа = АдресСтрокой( Ячейка, 1, 1, "" ) + Шаблон( " ([Ячейка.Родитель.Родитель.Родитель.МестоХранения.УсловияХранения])" );
				//табл.СклАдрес = АдресСтрокой( Ячейка, 2, 4, "-" );
				//табл.Сорт = 0;
			Если ПустоеЗначение(Ячейка)=1 Тогда // если ячейка для товара не задана
				Если Склад.ТипСклада=Перечисление.ТипыСкладов.СкладРаспродажи Тогда
				Иначе
					табл.Группа = "ййй";
				КонецЕсли;
				Если промТовар.МестоХранения.Выбран() = 1 Тогда
					табл.СклАдрес = промТовар.МестоХранения.УсловияХранения;
					табл.Сорт = промТовар.МестоХранения.Код;
				Иначе
					табл.СклАдрес = "не указан";
					табл.Сорт = 99;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	табл.Сортировать( "+Группа,+Сорт,+СклАдрес" );
	текГруппа = "";
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку() = 1 Цикл
		Если текГруппа <> табл.Группа Тогда
			пГруппа = ?( табл.Группа = "ййй", "", табл.Группа );
			таб.ВывестиСекцию( "Группа" );
			текГруппа = табл.Группа;
		КонецЕсли;
		пНом = табл.НомерСтроки;
		пАдрес = табл.СклАдрес;
		пШтрихКод = табл.Товар.ШтрихКод;
		пКод = табл.Товар.Код;
		Если семТекСтрана() <> "LV" Тогда 
			пТовар = табл.Товар.ПолучитьАтрибут("Наименование"+семТекСтрана());
		Иначе 
			пТовар = Шаблон("[табл.Товар.Наименование] [табл.Товар.КодПоставщика] ");
		КонецЕсли;
		Если Найти(КатегорияЦены.Наименование,"Розничная") > 0  Тогда
			пТовар = пТовар + Шаблон(" ([табл.Товар.КодДляРозницы])");
		КонецЕсли;
		пЕд = табл.Единица.Наименование;
		пЕдЕд = табл.Единица.Единица;
		пЕдБаз = табл.Товар.БазоваяЕдиницаИзмерения;
		пКол = Окр(табл.Количество*табл.Коэффициент,3,1);
		пКолКл = табл.Количество;
		пИтогКол = пИтогКол + пКол;
		пРезерв = Окр(табл.Резерв*табл.Коэффициент,3,1);
		пРезервКл = табл.Резерв;
		пИтогРезерв = пИтогРезерв + пРезерв;
//		СрокРеал = Окр( табл.Товар.СрокГодн * промКлГруппа.ДопустСрокРеализации / 100, 0, 1 );
		
		Если (Число(табл.МинСрокРеализ) = 0) и ((Число(табл.МаксСрокРеализ) = 0)) Тогда
			СрокРеал = Окр( табл.Товар.СрокГодн * промКлГруппа.ДопустСрокРеализации / 100, 0, 1 );
			пДатаРеал = ?( СрокРеал > 0, ДатаПоставки + СрокРеал, "" );
		Иначе
			пДатаРеал = Шаблон("[табл.МинСрокРеализ]-[табл.МаксСрокРеализ]");
		КонецЕсли;
		
		пУслХранения = табл.Товар.УсловияХранения;
		
		пСрокРеализ = "";
		пСутьПретензии = "";
		
		Если ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаНаВозврат Тогда
			Если итТаблДокОсн.НайтиСтроку("иТовар",табл.Товар,,1)=0 Тогда
				Сообщить("В документе основании "+ДокументОснование + " не найден товар "+пКод+" "+пТовар);
			Иначе
				пСрокРеализ = итТаблДокОсн.СрокРеализ;
				пСутьПретензии = итТаблДокОсн.СутьПретензии;
			КонецЕсли;
		КонецЕсли;
		
		таб.ВывестиСекцию( "Строка" );
	КонецЦикла;
	ЗагрузитьТабличнуюЧасть( табл );
	
	Если ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаНаВозврат Тогда
	Иначе
		таб.ВывестиСекцию( "Итог" );		
	КонецЕсли;
	
	пПретензии1 = "";
	пПретензии2 = "";
	ПолучитьСписокПретензий(пПретензии1,пПретензии2);

	таб.ВывестиСекцию( "Подвал" );		
	Если ПустоеЗначение( пОснование ) = 0 Тогда 
		таб.ВывестиСекцию( "Пустая10" ); 
		таб.ВывестиСекцию( "Коммент" ); 
	КонецЕсли;
	таб.ТолькоПросмотр(1);
	таб.Опции(0,0,0,0);  
	Если пПросмотр = 1 Тогда 
		таб.Показать("El. pasЅtijums: "+ НомерДок,"");
	Иначе
		таб.Напечатать(1);
	КонецЕсли;
//	ПризнакПечати = 1;
//	Записать();
КонецПроцедуры

Процедура Печать(Вид)
	
	//семПечать( Вид ); Возврат;
	Фирма.ИспользоватьДату(ДатаДок);
	Таб=СоздатьОбъект("Таблица");
	Если Вид=1 Тогда
		Таб.исходнаяТаблица("Счет");
	Иначе
		Таб.исходнаяТаблица("Счет2");
	КонецЕсли;
	Если ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаНаВозврат Тогда
		Таб.ИсходнаяТаблица("ЗаявкаНаВозврат");
		
	КонецЕсли;
	Таб.ВывестиСекцию("Шапка");
	ВыбратьСтроки();
	Ном=0;               
	Количество1=0;
	
	Пока ПолучитьСтроку() = 1 do  
		ДатаПрих="";
		Ном=Ном+1;
		
		пДоСрокаРеал = Формат( Окр( Товар.СрокГодн * КлГруппа.ДопустСрокРеализации / 100, 0, 1 ), "Ч03.0" );
		
		ПечКодДляРозницы="";
		Если (Склад.ВидСклада=Перечисление.ВидыСкладов.Розничный) ИЛИ (СкладПолучатель.ВидСклада=Перечисление.ВидыСкладов.Розничный)  Тогда
			ПечКодДляРозницы=Товар.КодДляРозницы;
		КонецЕсли;
		
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;
	Таб.ВывестиСекцию("Подвал");
	Таб.ВывестиСекцию("Подвал1");
	Таб.Опции(0,0,0,0,ПарСтрДокЭлЗаявка);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("PasЅt. uz atgr.: "+НомерДок,"");
КонецПроцедуры
//*********************************
Процедура ВесИнфо()
	Путь = КаталогИБ() + "ExtForms\Печать\ВесИнфо.ert";
	Если ФС.СуществуетФайл(Путь)=0 Тогда
		Возврат;
	Иначе
		ОткрытьФорму("Обработка",ТекущийДокумент(),Путь);
	КонецЕсли;
КонецПроцедуры
//*********************************

Процедура семВзаиморасчеты()
	Предупреждение(ДолгПоКредитуНов(Контекст));
КонецПроцедуры

Процедура Взаиморасчеты()
	Если ВидОплаты=2 Тогда //отв. хранение
		ИнформационнаяСтрока="";
	Иначе
//		ИнформационнаяСтрока=ДолгПоКредиту(Контекст);
		ИнформационнаяСтрока=ДолгПоКредитуНов(Контекст);
//		Сообщить(ИнформационнаяСтрока2);
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗакрытии()
	//Сервис.ПерехватКлавиатуры(0);           
КонецПроцедуры

Процедура семДоступность()
	Если Форма.ТолькоПросмотр()=1 Тогда
		Форма.КнФирма1.Доступность(0);
		Форма.КнСклад.Доступность(0);
		Форма.кнПодбор.Доступность(0);
		Форма.ОК.Доступность(0);
		Форма.КнопкаПоУмолчанию("Закрыть");
	Иначе
		Форма.КнопкаПоУмолчанию("ОК");
	КонецЕсли;  
КонецПроцедуры

Процедура ПриОткрытии()
	
	ПриЗаписиПерепроводить(1);
	ВидимостьПроведения=1-Проведен();
	Если семЕстьПраво( "Документ", "Счет", "Отмена проведения" ) =1 Тогда
		ВидимостьПроведения=1;
	ИначеЕсли Проведен()=1 Тогда
		Форма.ТолькоПросмотр( Проведен() );	
	КонецЕсли;		
		
	Если (ДатаДок<=Константа.ДатаЗапретаРедактированияЗаказов) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;                 
	Если (ЦЧ=1) и (НазваниеНабораПрав()<>"Администратор") Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	Если (глФирма<>Фирма) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;     
	
     семДоступность();
	Если Фирма<>Константа.ОсновнаяФирма Тогда
		Форма.Клиент.Видимость(0);
		Форма.КлиентФилиала.Видимость(1);
	Иначе
		Форма.Клиент.Видимость(1);
		Форма.КлиентФилиала.Видимость(0);
	КонецЕсли;
	
	Если глКодСтраныПользователя="LV" Тогда
		Форма.лНаименованиеТовара.Видимость(0);
		Форма.Товар.Видимость(1);
	Иначе 
		Форма.лНаименованиеТовара.Видимость(1);
		Форма.Товар.Видимость(0);  
	КонецЕсли;
	
	Форма.ЦЧ.Видимость(Пользователь.РазрСпецПродажу);
	Взаиморасчеты();               
	спВидОплаты.ТекущаяСтрока(спВидОплаты.НайтиЗначение(ВидОплаты));
	семЗаголовокОкна(контекст);
	
	оПолеВвода_Контрагент = СоздатьОбъект("Общие.ПолеВыбораЗначения");
	//	оПолеВвода_Контрагент.ПоискПоВхождению = фПоПодстроке;
	оПолеВвода_Контрагент.Инит(Контекст, "Клиент", "текстПрефиксКонтрагента", 500);
	
	ЕстьПраваИзменятьНомер=семЕстьПраво("Документ","Счет","Изменение номера");
	Форма.НомерДок.Доступность(?((НазваниеНабораПрав()="Администратор") ИЛИ (ЕстьПраваИзменятьНомер=1),1,0));
	
	Транслит(Расш,Форма);
КонецПроцедуры         

Функция НазваниеТовара(Тов)
	Если глКодСтраныПользователя="LV" Тогда
		Возврат "";
	Иначе 
		Возврат Тов.ПолучитьАтрибут("Наименование"+глКодСтраныПользователя);
	КонецЕсли;
КонецФункции

Процедура кнПрямаяПечатьПриНажатии()
	Если ПризнакПечати = 1 Тогда
		Если Вопрос("Вывести на печать повторно?","Да+Нет") = "Да" Тогда
			семПечать( 0 );
		КонецЕсли;
	Иначе
		семПечать( 0 );
	КонецЕсли;
КонецПроцедуры

Функция ИнфОпродаже()
	Если Клиент.Выбран()=1 Тогда
		КлиентГр_ = ?(Клиент.КлГруппа.Выбран()=1,Клиент.КлГруппа,Клиент);
		КлиентГр_.ИспользоватьДату(ДатаДок);
		Если КлиентГр_.ЗапретВыпискиНакл=1 Тогда
			Возврат("Запрет на продажу!!!");
		Иначе
			Возврат("");
		КонецЕсли;
	Иначе
		Возврат("");
	КонецЕсли;
КонецФункции                 

Функция ИнфОдоговоре()
	Если Клиент.Выбран()=1 Тогда
		Если СтрДлина(СокрЛП(Клиент.Договор))=0 Тогда
			Возврат("Договора нет!!!");
		Иначе
			Возврат(Клиент.Договор);
		КонецЕсли;
	Иначе
		Возврат("");
	КонецЕсли;
КонецФункции

Функция КонтрольОстаткаВсего()  
	// Вычислим, сколько всего данного товара
	ПолныйОстаток= Регистр.ОстаткиТоваров.СводныйОстаток(Товар,Склад,,"ОстатокТовара");
	Резерв_= 0;
	// проверяем резерв товара
	Если семРазрешитьПродаватьРезерв( контекст )=Перечисление.Булево.Нет Тогда
		// Вычислим, сколько зарезервировано всего данного товара
		Резерв_= Регистр.РезервыТоваров.СводныйОстаток(Товар,,"РезервТовара");
	КонецЕсли;
	Если Коэффициент>0 Тогда
		Возврат (ПолныйОстаток-Резерв_)/Коэффициент;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Процедура Подбор()
	Режим="Каталог";
	ОткрытьПодбор("Номенклатура","ДляПодбора");
	УстановитьЗначениеВПодборе("Склад",Константа.ОсновнойСклад);
КонецПроцедуры    

Функция СвободныйОстатокТовараНаСкладе(Товар)
	Рез=Регистр.РезервыТоваров.СводныйОстаток(Товар,,"РезервТовара");
	Если Склад.Выбран()=1 Тогда
		Возврат Макс(Регистр.ОстаткиТоваров.СводныйОстаток(Товар,Склад,,"ОстатокТовара")-Рез,0);
	Иначе
		Возврат Регистр.ОстаткиТоваров.СводныйОстаток(Товар,,,"ОстатокТовара")-Рез;
	КонецЕсли;
КонецФункции

Функция семПолучитьСтавкуНДСТовара( пТовар )
	Если глКодСтраныПользователя = "LT" Тогда Возврат пТовар.СтавкаНДСLT;
	ИначеЕсли глКодСтраныПользователя = "EE" Тогда Возврат пТовар.СтавкаНДСEE;
	КонецЕсли;
	Возврат пТовар.СтавкаНДС;
КонецФункции

Функция семПроверкаСтавкиНДС( пТовар )
	СтавкаНДСТовара = семПолучитьСтавкуНДСТовара( пТовар );
	Если КоличествоСтрок() = 0 Тогда
		Если (Склад.СкладОтвХранения=1) ИЛИ ((Клиент.Страна<>Константа.СтранаРезидент) И (Фирма=Константа.ОсновнаяФирма)) ИЛИ (Клиент.флПароход = 1) Тогда
			СтавкаНДС = Перечисление.ЗначенияНДС.НДС0;
		Иначе
			СтавкаНДС = СтавкаНДСТовара;
		КонецЕсли;
		
	Иначе
		Если (СтавкаНДС <> СтавкаНДСТовара) И (СтавкаНДС <> Перечисление.ЗначенияНДС.НДС0) Тогда
			Сообщить( "Ошибка подбора товара.","!" );
			Сообщить( Шаблон("Товар со ставкой [СтавкаНДСТовара] не может использоватся в данном документе."),"I" );
			Сообщить( Шаблон("В документе уже есть товары со ставкой [СтавкаНДС]."),"I" );
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	Возврат 1;
КонецФункции

Процедура УстМинСрокиРеализации()
	
	//определим мин. доп. срок реализации для отгрузки клиенту
	КлСроки=?(ПустоеЗначение(КлиентФилиала)=0,КлиентФилиала,Клиент);
	КлСроки.ИспользоватьДату(ДатаДок);
	// Запишем главного клиента
	Если КлСроки.КлГруппа.Выбран()=1 Тогда
		КлСроки=КлСроки.КлГруппа;
	КонецЕсли;       
	
	ДопСрокРеалКл=КлСроки.ДопустСрокРеализации;
	Если (ДопСрокРеалКл<>0) и (ПустоеЗначение(ДатаПоставки)=0) Тогда
		//если % допустимого срока задан - тогда рассчитаем мин. срок 
		СрокРеал = Окр( Товар.СрокГодн * ДопСрокРеалКл / 100, 0, 1 );
		МинСрокРеализ = ?( СрокРеал > 0, ДатаПоставки + СрокРеал, "" );
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПодбора(Выб)
	Если семПроверкаСтавкиНДС( Выб ) = 0 Тогда Возврат; КонецЕсли;
	ЗапросКоличестваВПодборе(Контекст,Режим,Выб);
	УстанЦеныРасх(Контекст,"Подбор");
	семПроверкаМинОтргКолва( контекст );
	Выч_суммы_накл(Контекст);
	УстМинСрокиРеализации();
	АктивизироватьСтроку();       
КонецПроцедуры

Процедура ПечатьСтар()      
	Клиент.ИспользоватьДату(ДатаДок);
	Фирма.ИспользоватьДату(ДатаДок);
	Таб=СоздатьОбъект("Таблица");
	СтрПлат="";
	СтрБанкПлат="";
	ДобСтроку(СтрПлат," ИНН ",Фирма.ИНН);
	ДобСтроку(СтрПлат,", р/с ",РасчетныйСчет.Номер);
	ДобСтроку(СтрПлат," ",РасчетныйСчет.Банк);
	ДобСтроку(СтрПлат," в ",РасчетныйСчет.ГородБанка);
	ДобСтроку(СтрПлат,", БИК ",РасчетныйСчет.БИКБанка);
	ДобСтроку(СтрПлат,", корр.сч. ",РасчетныйСчет.КоррСчетБанка);
	Если РасчетныйСчет.ПрямыеРасчеты=0 Тогда
		ДобСтроку(СтрПлат," в ",РасчетныйСчет.БанкРасчетный);
		ДобСтроку(СтрПлат," в ",РасчетныйСчет.ГородБанкаРасчетного);
		ДобСтроку(СтрПлат,", БИК ",РасчетныйСчет.БИКБанкаРасчетного);
		ДобСтроку(СтрПлат,", корр.сч. ",РасчетныйСчет.КоррСчетБанкаРасчетного);
	КонецЕсли;
	Таб.ВывестиСекцию("Счет<");
	ВыбратьСтроки();
	Ном=0;
	ВСоставе=0;
	Пока ПолучитьСтроку() = 1 Цикл 
		Ном=Ном+1;
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;
	Таб.ВывестиСекцию("Счет>");
	Таб.Опции(0,0,0,0,ПарСтрДок);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Печать счета","");
КонецПроцедуры

Функция семУстановкаКатегорииЦены()
	Если семТекСтрана() = "LV" Тогда 
		Если глКодСтраныПользователя = "LT" Тогда Возврат семПолучитьКатегориюЦеныПоНаим( "Литва Оптовая" );
		ИначеЕсли глКодСтраныПользователя = "EE" Тогда Возврат семПолучитьКатегориюЦеныПоНаим( "Эстония Оптовая" );
		КонецЕсли;
	КонецЕсли;
	Возврат Константа.ОсновнаяКатегорияЦены; 
КонецФункции

Процедура семУстановитьВалюту( флКопирования )
	Если флКопирования = 0 Тогда
		Валюта = Константа.ОсновнаяВалютаПродажи;
	КонецЕсли;
	Дата_Курса = ДатаДок;
	Курс = КурсДляВалюты( Валюта, Дата_Курса );
	Валюта_Прежн = Валюта;
	Курс_Прежн = Курс;
КонецПроцедуры

Процедура ВводНового( флКопирования )
	ЗаполнитьШапку(Контекст); //заполняем обязательные реквизиты в любом случае
	семУстановитьВалюту( флКопирования );
	Если флКопирования = 1 Тогда
		Выполнен = Нет; 
		ПризнакПечати = 0;   
		ДатаПоставки = "";
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
			Резерв=0;
		КонецЦикла;           
		ВидДоставки = "";
		АвтоВремяТекущее();          
		Самовывоз=0;
		ЦЧ=0;
		
		Возврат;	    
	КонецЕсли;
	ДатаДок=РабочаяДата();
	// Для базовой валюты курс всегда равен 1, поэтому отображаем курс Основной валюты
	Клиент=Константа.ОсновнойПокупатель;
	//Подставляем клиента из спр. Фирмы по умолчанию
	Если Фирма<>Константа.ОсновнаяФирма Тогда
		Клиент=Фирма.Клиент;
		ВидДоставки = Перечисление.ВидыДоставки.Доставка;
	КонецЕсли;
	Склад = Константа.ОсновнойСклад;
	КатегорияЦены = семУстановкаКатегорииЦены();
	СтавкаНДС     = Константа.ОсновнаяСтавкаНДС;               
	СрокРезервирования=Константа.ОсновнойСрокРезервирования;
	ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка;   
	Если Пользователь.CashCarry=1 Тогда
		ВидДоставки=Перечисление.ВидыДоставки.Самовывоз;
		ВидОплаты=1;
	КонецЕсли;
	
	Форма.кнПечать.Видимость(0);
	Форма.кнПечатьСчет.Видимость(0); 
	Форма.кнПрямаяПечать.Видимость(0);
	Форма.кнПодчиненные.Видимость(0);
	АвтоВремяТекущее(); 
	семУстановкаКурса();
	//Если (Лев(НомерДок,4)="E1LV") Тогда
	//	Если ДатаДок >= '24.08.2011' Тогда 
	//		УстановитьНовыйНомер("E1LV-1");
	//	КонецЕсли;	
	//КонецЕсли;	

КонецПроцедуры

Процедура ВводНаОсновании(ДокОснование)
	
	Если	(ДокОснование.Вид()="Счет") ИЛИ
	(ДокОснование.Вид()="РасходнаяНакладная") ИЛИ
	(ДокОснование.Вид()="ПриходнаяНакладная") ИЛИ
	(ДокОснование.Вид()="РасходнаяРеализатора") ИЛИ
	(ДокОснование.Вид()="ПриходнаяРеализатора") Тогда
		ЗаполнитьШапкуНаОсн(Контекст,ДокОснование);
//		УстДефолтРасчСчета(Контекст);
		семУстановитьВалюту(0);
		ДатаДок=РабочаяДата();
		Клиент=Константа.ОсновнойПокупатель;
		Клиент.ИспользоватьДату(ДатаДок);
		СрокРезервирования=Константа.ОсновнойСрокРезервирования;
		ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка;
		Склад = Константа.ОсновнойСклад;
		КатегорияЦены = семУстановкаКатегорииЦены();
		СтавкаНДС     = Константа.ОсновнаяСтавкаНДС;               
		СрокРезервирования=Константа.ОсновнойСрокРезервирования;
		ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка;   
		
		спВидОплаты.ТекущаяСтрока(спВидОплаты.НайтиЗначение(ВидОплаты));

		ДокОснование.ВыбратьСтроки();
		Пока ДокОснование.ПолучитьСтроку()=1 Цикл
			НоваяСтрока();
			ТовКод=ДокОснование.Товар.Код;
			Товар=ДокОснование.Товар;
			Цена=ДокОснование.Цена; 
			
			Единица=ДокОснование.Единица;
			Коэффициент=ДокОснование.Коэффициент;
			Количество=ДокОснование.Количество;
			Сумма=Цена*Количество*Коэффициент; 
			НДС=ДокОснование.НДС;
		КонецЦикла;
		АвтоВремяТекущее();
		семУстановкаКурса();
		
	ИначеЕсли (ДокОснование.Вид()="ПретензияПолученная") Тогда

		Если ДокОснование.Проведен()=0 Тогда
			Предупреждение("Нельзя вводить заявку на возврат на основании не проведенного документа!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
		
		ДокументОснование = ДокОснование;
		
		ЗаполнитьШапкуНаОсн(Контекст,ДокОснование);
		Основание = "";
		Клиент=ДокОснование.Клиент;
		Если Фирма<>Константа.ОсновнаяФирма Тогда
			КлиентФилиала=ДокОснование.КлиентФилиала;
			ВыборКлиентаФилиала();
		Иначе
			ВыборКлиента();
			КатегорияЦены = семУстановкаКатегорииЦены();
			
		КонецЕсли;
		СрокРезервирования=Константа.ОсновнойСрокРезервирования;
		ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаНаВозврат;
		
		поз=Найти(ДокОснование.НомерДок,"-");
		ПрефиксНомера=ФК+"PA-";//+Сред(ДокОснование.НомерДок,поз+1);
		УстановитьНовыйНомер(ПрефиксНомера);
		Склад = ДокОснование.Склад;
		Если ПустоеЗначение(Склад)=1 Тогда
			Склад = Константа.ОсновнойСклад;
		КонецЕсли;
		СтавкаНДС     = Константа.ОсновнаяСтавкаНДС;
		спВидОплаты.ТекущаяСтрока(спВидОплаты.НайтиЗначение(ВидОплаты));
		
		ДокОснование.ВыбратьСтроки();
		Пока ДокОснование.ПолучитьСтроку()=1 Цикл
			НоваяСтрока();
			ТовКод=ДокОснование.Товар.Код;
			Товар=ДокОснование.Товар;
			Количество=ДокОснование.Количество;
			УстанЦеныРасх(Контекст,"Подбор");
			Цена = ДокОснование.Цена;
			Сумма = ДокОснование.Сумма;
			семПроверкаМинОтргКолва( контекст );
			Выч_суммы_накл(Контекст);
			УстМинСрокиРеализации();
			МинСрокРеализ = ДокОснование.СрокРеализ;
			АктивизироватьСтроку();       
		КонецЦикла;
		АвтоВремяТекущее();
		семУстановкаКурса();
		
	Иначе
		Предупреждение("Счет нельзя вводить на основании выбранного вида документа!",10);
		СтатусВозврата(0);
	КонецЕсли; 
КонецПроцедуры

Процедура ОбработкаВыбораЗначения(ВыбЗнач,ИдЭлДиал,ФлСтОбр)
	Если ИдЭлДиал = "Клиент" Тогда
		стар_Клиент = Клиент;  
		//*****<<PR>>(begin)
		Если  (Пользователь.РазрРасхНаклНерезидентам=0) И (ВыбЗнач.Страна<>Константа.СтранаРезидент) Тогда
			Предупреждение("Выбран неправильный клиент!",10);
			СтатусВозврата(0);
		КонецЕсли;
		//*****<<PR>>(end)
	ИначеЕсли ИдЭлДиал = "ВидЗаявки" Тогда
		Если (ВыбЗнач=Перечисление.ВидыЗаявок.ЗаявкаНаВозврат) И (ДокументОснование.Вид()="ПретензияПолученная") Тогда
			Предупреждение("Заявку на возврат можно оформить только на основании претензии!",10);
			СтатусВозврата(0);
			ФлСтОбр=0;
		КонецЕсли;
	КонецЕсли;         
КонецПроцедуры 

Процедура ВыборКлиента()
	Если Клиент.Выбран() = 1 Тогда
		Агент = Клиент.Агент;  
		Если (ПустоеЗначение(Агент)=1) Тогда
			Агент=Пользователь.Сотрудник;
		КонецЕсли;
		
		ВыбратьГрафикМаршрутаДляКлиента();
	КонецЕсли;
	
	Если (ПустоеЗначение(стар_Клиент)=0) и (клиент<>стар_Клиент) Тогда
		Если глПроверкаАгентаПоКлиенту(Контекст)=0 Тогда
			Клиент=стар_Клиент;
		КонецЕсли;             
		стар_Клиент="";
	КонецЕсли;
	КлГруппа=?(Клиент.КлГруппа.Выбран()=1,Клиент.КлГруппа,Клиент);
	
	Если (СокрЛП(Клиент.Рег_номер) = СокрЛП(Фирма.Рег_номер)) Тогда
		Если ПустоеЗначение(РозничныйТорговыйСклад)=0 Тогда
			СкладПолучатель = РозничныйТорговыйСклад;
		КонецЕсли;
	КонецЕсли;
	
	
	КатегорияЦены=?(Клиент.КатегорияЦены.Выбран()=1,Клиент.КатегорияЦены,КатегорияЦены);
	СтавкаНДС = семПолучитьСтавкуНДС(Клиент,Контекст);
	Если КатегорияЦены.Наименование = "Экспортная" Тогда
		промВалюта = семПолучитьВалютуПоНаим( "EUR" );
		Если ПустоеЗначение( промВалюта ) = 0 Тогда
			Валюта = промВалюта;
			Устан_Вал( Контекст, Дата_курса, Валюта_Прежн, Курс_Прежн );		
			семУстановкаКурса();
		КонецЕсли;
	КонецЕсли;
	Взаиморасчеты();
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		УстанЦеныРасх(Контекст);
		УстМинСрокиРеализации();
	КонецЦикла;  
	Если ПустоеЗначение(Клиент) = 0 Тогда
		Валюта = Клиент.ВалютаВзаиморасчетов; 
		Устан_Вал(Контекст,Дата_курса,Валюта_Прежн,Курс_Прежн);
		семУстановкаКурса();
	КонецЕсли;   
	Если Клиент.флЛояльность = 1 Тогда
		Предупреждение( "Potencialais Pastavigo Klientu Programmas dalibnieks.", 10 );
	КонецЕсли;
КонецПроцедуры //ВыборКлиента()`

Процедура ВыборКлиентаФилиала()
	Валюта=КлиентФилиала.ВалютаКредита;
	КатегорияЦены=?(КлиентФилиала.КатегорияЦены.Выбран()=1,КлиентФилиала.КатегорияЦены,КатегорияЦены);
	Устан_Вал( Контекст, Дата_курса, Валюта_Прежн, Курс_Прежн );
	Агент = КлиентФилиала.Агент;
	// сем \\ 
	семУстановкаКурса();
	// сем //
	Взаиморасчеты();
КонецПроцедуры

//Процедура СортТовар()
//	Возврат;
//	ТТ=СоздатьОбъект("ТаблицаЗначений");
//	спр = СоздатьОбъект( "Справочник.СкладскиеАдреса" );
//	ВыгрузитьТабличнуюЧасть(ТТ);
//	ТТ.НоваяКолонка("УслХран","Число",2);
//	ТТ.ВыбратьСтроки();
//	Пока ТТ.ПолучитьСтроку()=1 Цикл
//		Попытка
//			Если спр.НайтиПоРеквизиту( "Товар", Товар, 1 ) = 1 Тогда
//		    	ТТ.УслХран=спр.Наименование;
//			Иначе
//		    	ТТ.УслХран=ТТ.Товар.МестоХранения.Код;
//			КонецЕсли;
//		Исключение
//		КонецПопытки;
//	КонецЦикла;
//	ТТ.Сортировать("+УслХран,+ТовКод");
//	ЗагрузитьТабличнуюЧасть(ТТ);
//КонецПроцедуры     

Процедура кнПровестиПриНажатии()
	//СортТовар();
	
	Провести();
	
	ВидимостьПроведения=1-Проведен();
	Если Проведен() = 1 Тогда
		Форма.ТолькоПросмотр( 1 );
		семДоступность();
	КонецЕсли;
КонецПроцедуры

Процедура кнПриНажатииЗаписать()
	//СортТовар();
	Записать();
КонецПроцедуры

Процедура ПриУдаленииСтроки()
	Если (Константа.НовыйМеханизмПретензий.Получить(ДатаДок)=Да) И (Проведен()=1) Тогда 
		Предупреждение("Нельзя удалять строки в проведенном документе. Для любых коррекций используйте документ комплектации заявки (факт.).");
		Если НазваниеНабораПрав()="Администратор" Тогда
		Иначе
			СтатусВозврата(0);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


Процедура ПриНачалеРедактированияСтроки()
	Если Найти(Форма.ТекущаяКолонка(),"Цена")>0 Тогда
		
		ПредЦена=Цена;
		ЗапретСкидки=0;
		спр = СоздатьОбъект( "Справочник.Цены" );
		спр.ИспользоватьВладельца( Товар );
		спр.ВыбратьЭлементы();
		Пока спр.ПолучитьЭлемент() = 1 Цикл
			Если спр.ПометкаУдаления() = 1 Тогда 
				Продолжить; 
			КонецЕсли;
			Если (спр.КатегорияЦены = КатегорияЦены) Тогда
				ЗапретСкидки=спр.ЗапретСкидки;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗапретСкидки=1 Тогда
			Предупреждение("У данного товара нельзя устанавливать цену вручную!");
			СтатусВозврата(0);
		КонецЕсли;
		
		Если ПустоеЗначение(Пользователь.Сотрудник.Должность)=1 Тогда
			Предупреждение("У вас нет прав устанавливать цену вручную. Отсутствует привязка к должности!");
			СтатусВозврата(0);
		КонецЕсли;
	ИначеЕсли Форма.ТекущаяКолонка()="Количество" Тогда
		Если (Константа.НовыйМеханизмПретензий.Получить(ДатаДок)=Да) и (Проведен()=1) Тогда 
			Предупреждение("Нельзя изменять кол-во в документе. Для любых коррекций используйте документ комплектации заявки (факт).");
			СтатусВозврата(0);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
 
Функция ПроцентСкидки(Точность)
	Если (ПустоеЗначение(Товар)=0) И ((Сумма+Скидка)<>0) Тогда
		Возврат Окр(Скидка/(Сумма+Скидка)*100,Точность);
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Процедура ПриОкончанииРедактированияСтроки(НовСтр)

	Если (Найти(Форма.ТекущаяКолонка(),"Цена")>0) И (ВидСкидки=Перечисление.ВидСкидки.Документ) Тогда
		//запросим у пользователя пояснение для установки цены вручную
		
		ПроцентСкидки = ПроцентСкидки(0);
		//Сообщить("% скидки: "+ПроцентСкидки);
		
		ОграничениеСкидки = Пользователь.Сотрудник.Должность.ТекущийЭлемент().РазмерСкидки;
		
		НедельныйАкцент=глВернутьАкцентТовара(Товар(),глКодСтраныПользователя);
		Если НедельныйАкцент=1 Тогда
			ОграничениеСкидки = 40; //для недельных акцентов увеличиваем процент скидки до 40.
		КонецЕсли;
	
		Если (ОграничениеСкидки=0) И (Склад.ТипСклада = Перечисление.ТипыСкладов.Склад) Тогда
			//если ограничение скидки не стоит в должности у сотрудника - действует обычный механизм
			Пояснение=ПояснениеСкидки;
			Если ВвестиСтроку(Пояснение,"Введите причину изменения цены",60)=1 Тогда
				Если СтрДлина(СокрЛП(Пояснение))<6 Тогда
					Предупреждение("Слишком короткое объяснение!");
					СтатусВозврата(0);
				КонецЕсли;
				ПояснениеСкидки=Пояснение;
			Иначе
				Предупреждение("Без ввода пояснения нельзя изменить цену вручную!");
				СтатусВозврата(0);
			КонецЕсли;
		ИначеЕсли (ОграничениеСкидки < Окр(ПроцентСкидки,0)) И (Склад.ТипСклада = Перечисление.ТипыСкладов.Склад) Тогда
			Предупреждение("Вы превысили макс. разрешенный для Вас размер скидки на товар <"+ОграничениеСкидки+"%> -  требуется по документу <"+ПроцентСкидки+"%>!");
			СтатусВозврата(0);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры


Процедура ПриНачалеВыбораЗначения(Элем,ФлагСт)
	Если Элем="КлиентФилиала" Тогда
		ФлагСт=0;
		СтатусВозврата(0);
		Кл=СоздатьОбъект("Справочник.Контрагенты");
		Если ПустоеЗначение(КлиентФилиала)=0 Тогда
			Кл.НайтиЭлемент(КлиентФилиала);
		КонецЕсли;
		Кл.ИспользоватьРодителя(Фирма.ОснГруппаКлиентов,0);
		Если Кл.Выбрать("Выберите клиента...","")=1 Тогда
			КлиентФилиала=Кл.ТекущийЭлемент();
			Валюта=КлиентФилиала.ВалютаКредита;
			КатегорияЦены=?(КлиентФилиала.КатегорияЦены.Выбран()=1,КлиентФилиала.КатегорияЦены,КатегорияЦены);
			Устан_Вал( Контекст, Дата_курса, Валюта_Прежн, Курс_Прежн );
			Агент = КлиентФилиала.Агент;
			// сем \\ 
			семУстановкаКурса();
			// сем //
			Взаиморасчеты();
		КонецЕсли;
	ИначеЕсли Элем="ВидЗаявки" Тогда
		ФлагСт=0;
		сп=СоздатьОбъект("СписокЗначений");
		сп.ДобавитьЗначение(Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка);
		сп.ДобавитьЗначение(Перечисление.ВидыЗаявок.СпецЗаказ);
		
		Если Константа.НовыйМеханизмПретензий.Получить(ДатаДок)<>Да Тогда
			//по старой системе разрешаем выбрать возврат от покупателя в приходном документе 
			сп.ДобавитьЗначение(Перечисление.ВидыЗаявок.ЗаявкаНаВозврат);
		КонецЕсли;
		
		сп.ВыбратьЗначение(ВидЗаявки,,,,1);
	КонецЕсли;
КонецПроцедуры

Процедура ПриВыбореДатыПоставки()
	
	ВыбратьГрафикМаршрутаДляКлиента();	
	Если КоличествоСтрок() = 0 Тогда Возврат; КонецЕсли;
	Ответ = Вопрос("Измененна дата поставки товара. Пересчитать цены?","Да+Нет",60);
	Если Ответ <> "Да" Тогда Возврат; КонецЕсли;
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		УстанЦеныРасх(Контекст,"Подбор",0);
		семПроверкаМинОтргКолва( контекст );
		УстМинСрокиРеализации();
		Выч_суммы_накл(Контекст);
	КонецЦикла;
КонецПроцедуры

//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписи() Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ПриЗаписи()
	//Закомментировано Инсталлятором МОД:Процедура ПриЗаписи()
	Если семМожноЗаписать( Контекст ) = 0 Тогда Возврат; КонецЕсли;
	Если семПроверкаДатыПоставки( контекст ) = 0 Тогда Возврат; КонецЕсли;
	//не выгружаем документ в филиал, если эл. заявка выписана для пополнения склада на филиале
	Если (КлиентФилиала = Клиент) И (Фирма<>Константа.ОсновнаяФирма) Тогда
		НеВыгружать=1;	
	КонецЕсли;
	
	
	Если (СтрДлина(НомерДок)<12) И (Лев(НомерДок,4)="E1LV") И (Выбран()=0) Тогда
		Предупреждение("Номер документа слишком короткий!");
		СтатусВозврата(0);
	КонецЕсли;

	//СортТовар(); 
	ВсегоСуммаШ = Итог("НДС") + Итог("Сумма");
	ВсегоНДСШ	= Итог("НДС");
	
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписи()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	стар_ПриЗаписи();
	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
КонецПроцедуры                             
//Конец текста, вставленного Инсталлятором МОД

Процедура ПриВыбореСамовывоза()
	Если Самовывоз=0 Тогда
		Самовывоз = Константа.ПроцентСкидкиНаСамовывоз;
		Если ВвестиЧисло(Самовывоз,"Введите скидку на самовывоз",3,0)=0 Тогда
			Возврат;
		КонецЕсли;
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Цена=Цена * ( 1 - Самовывоз / 100 );
	        Выч_суммы_накл_сНП(Контекст);
		КонецЦикла;
		
	Иначе
				
		Если Вопрос(Шаблон("Отмена скидки на самовывоз.
		|Цены будут увеличины на [Самовывоз]%.
		|Продолжить?"),"Да+Нет",60)="Да" Тогда
		Иначе
			Возврат;
		КонецЕсли;

		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Цена=Цена / ( 1 - Самовывоз / 100 );
		        Выч_суммы_накл_сНП(Контекст);
		КонецЦикла;
		
		Самовывоз=0;
	КонецЕсли;
	   
КонецПроцедуры

Процедура УстВидаОплаты()
	спВидОплаты.ТекущаяСтрока(спВидОплаты.НайтиЗначение(ВидОплаты));
КонецПроцедуры

Процедура ПроверитьФайл()
	Если ФС.СуществуетФайл(СокрЛП(Константа.КаталогОбменаECOD)+"\import\Check_file.ert") <> 0 Тогда
		ОткрытьФорму("Отчет",ТекущийДокумент(),СокрЛП(Константа.КаталогОбменаECOD)+"\import\Check_file.ert");
	КонецЕсли;
	
КонецПроцедуры
/////********************* FormEx { ******************************************************
//Процедура ПриНажатииКнопкиКлавиатуры(КодКлавиши, Alt, Shift, Ctrl, Символ, ФСО)
//	оПолеВвода_Контрагент.ПриНажатииКнопкиКлавиатуры(КодКлавиши, Alt, Shift, Ctrl, Символ, ФСО);
//КонецПроцедуры
//
//Процедура ПриНажатииЛевойКнопки(Сост, Лево, Верх)
//	оПолеВвода_Контрагент.ПриНажатииЛевойКнопки(Сост, Лево, Верх);
//КонецПроцедуры
//
//Процедура ПриОтжатииЛевойКнопки(Сост, Лево, Верх)
//	оПолеВвода_Контрагент.ПриОтжатииЛевойКнопки(Сост, Лево, Верх);
//КонецПроцедуры
////} FormEx ******************************************************
//
//Сервис.ПерехватКлавиатуры(1);

//******************************************************************************
Функция Раскрасить()             
        
	
КонецФункции


Валюта_Прежн=Валюта;
Курс_Прежн=Курс;
Клиент.ИспользоватьДату(ДатаДок);
//-----------------------------------------------
спВидОплаты.ДобавитьЗначение(0,"Кредит");
спВидОплаты.ДобавитьЗначение(1,"Наличные");
спВидОплаты.ДобавитьЗначение(2,"Отв. хранение");
Попытка
	Расш=СоздатьОбъект("РасширениеФормы");
Исключение
	Расш="";
КонецПопытки;