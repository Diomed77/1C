Перем спКодов;

//======================================================================
Функция Доступ()
	
	Если семЕстьПраво("Документ","ПросроченныеДолги","Только 1.предупреждение")=1 Тогда
		Форма.НовыйСтатус.Доступность(0);
	Иначе
		Форма.НовыйСтатус.Доступность(1);
	КонецЕсли;
	
КонецФункции 

Процедура ПриВыбореНовогоСтатуса()
	
	Спр=СоздатьОбъект("Справочник.НомераДокументаПросроченныеДолги");
	Спр.НайтиПоРеквизиту("Статус",НовыйСтатус,1);
	Если Спр.Выбран()=1 Тогда
		УстановитьНовыйНомер(СокрЛП(Спр.Префикс.Получить(ДатаДок)));
	КонецЕсли;
	ВыбратьСтроки();
	
	Пока ПолучитьСтроку()=1 Цикл
		Статус=НовыйСтатус;
	КонецЦикла;
КонецПроцедуры
//*************************************************

//======================================================================
Процедура ВводНового()
	ЗаполнитьШапку(Контекст);
	
	НовыйСтатус = Перечисление.СтатусыПросроченногоДолга.Предупреждение1;
	
	ПриВыбореНовогоСтатуса();
	
КонецПроцедуры // ВводНового

//*************************************************
Процедура ПриВыбореВидаУсловия()
	Если чТочноДней=3 Тогда
		Форма.Просрочено2.Видимость(1);
	Иначе
		Форма.Просрочено2.Видимость(0);
	КонецЕсли;
КонецПроцедуры
//*******************************************
Процедура ПриОткрытии()
	ПриЗаписиПерепроводить(1);
	ПриВыбореВидаУсловия();
	Если чТочноДней=0 Тогда
		чТочноДней=1;
	КонецЕсли;
КонецПроцедуры

//======================================================================
Процедура стар_ПриЗаписи()
	Если ПустоеЗначение(КлиентШ)=1 Тогда
		ПолучитьСтрокуПоНомеру(1);
		КлиентШ=Клиент;
	КонецЕсли;
	
	Если ПустоеЗначение(ДатаОплаты)=1 Тогда
		Сообщить("Не указана дата оплаты!");
		СтатусВозврата(0);
	КонецЕсли;
	
КонецПроцедуры // стар_ПриЗаписи

Процедура ПриЗаписи()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
	Если семМожноЗаписать( Контекст ) = 0 Тогда Возврат; КонецЕсли;
	стар_ПриЗаписи();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД

//*************************************************
Процедура Заполнить()
	Если КоличествоСтрок() <> 0 Тогда
		Если Вопрос("Существующие строки будут удалены! Продолжать?","Да+Нет")="Нет" Тогда
			Возврат;
		Иначе
			УдалитьСтроки();
		КонецЕсли;
	КонецЕсли;
	глУдалениеВременнойТаблицыSQL("#Клиенты");
	
	Запрос=СоздатьОбъект("ODBCRecordSet");
	
	ТекстЗапросаКатКлиентов="SELECT ID
	|						 INTO #Клиенты
	|						 FROM $Справочник.Контрагенты Спр 
	|						 WHERE $Спр.флНеОтчетКлиентыАгентов=0 ";
	
	Если КлиентШ.Выбран() = 1 Тогда
		ТекстЗапросаКатКлиентов = ТекстЗапросаКатКлиентов + " AND Спр.ID = :ВыбКлиент";
		Запрос.УстановитьТекстовыйПараметр("ВыбКлиент",КлиентШ);
	КонецЕсли;
	
	Заг2 ="";
	
	Если ВыбАгент.Выбран()=0 Тогда
	ИначеЕсли ВыбАгент.ЭтоГруппа() = 1 Тогда
		ТекстЗапросаКатКлиентов = ТекстЗапросаКатКлиентов + " AND $Спр.Агент IN (SELECT Val FROM #АгентыКлиентов)";
		Запрос.УложитьСписокОбъектов(ВыбАгент,"#АгентыКлиентов","Сотрудники");
	Иначе
		ТекстЗапросаКатКлиентов = ТекстЗапросаКатКлиентов + " AND $Спр.Агент=:ВыбАгент";
		Запрос.УстановитьТекстовыйПараметр("ВыбАгент",ВыбАгент);
	КонецЕсли; 
	Если КатегорияКредита.Выбран() = 1 Тогда
		ТекстЗапросаКатКлиентов = ТекстЗапросаКатКлиентов + " and $Спр.КатегорияКредитаТек = :ВыбКатегория";	
		Запрос.УстановитьТекстовыйПараметр("ВыбКатегория",КатегорияКредита);
	КонецЕсли;

	Заг="";	
	
	
	Запрос.УстановитьТекстовыйПараметр("Кон",ДатаДок);

	Запрос.ВыполнитьСкалярный(ТекстЗапросаКатКлиентов);
	
	Заг3 ="";
	Если ПросроченоДней>0 Тогда
		Заг3="Просрочено дней >= "+ПросроченоДней;
	КонецЕсли;
	
	
	ТекстЗапроса2 = "SELECT Рег.Клиент [Клиент $Справочник.Контрагенты],                                                                       
	|						$СпрК2.ПоАлфавиту ПоАлфавиту,
	|						СпрК2.Code КодКлиента,
	|						$ПоследнееЗначение.Контрагенты.КатегорияКредита(Рег.Клиент,:Кон) [КатегорияКредита $Справочник.КатегорииКредитовКлиентов],
	|						$ПоследнееЗначение.Контрагенты.ДатаОплатыДолга(Рег.Клиент,:Кон) [ДатаОплатыДолга],
	|						$ПоследнееЗначение.Контрагенты.КомментарийДляКредита(Рег.Клиент,:Кон) КомментарийДляКредита,
	|						$ПоследнееЗначение.Контрагенты.КомментарийДляКредитаАгенту(Рег.Клиент,:Кон) КомментарийДляКредитаАгенту,
	|						CASE WHEN $СпрК2.КлГруппа=$ПустойИД THEN  Рег.Клиент ELSE $СпрК2.КлГруппа END [КлГруппа $Справочник.Контрагенты],
	|						Рег.КредДокумент [КредДокумент $Документ],                      
	|						NULLIF(COALESCE($ДокР2.ДатаОплаты,$ДокПН.ДатаОплаты,$ДокВО.ДатаОплаты,$ДокСФ.ДатаОплаты,$ДокОР.ДатаОплаты),'17530101') ДатаОплаты,                  
	|						$СпрК2.Агент [Агент $Справочник.Сотрудники],
	|						COALESCE($ДокР2.Клиент,$ДокПН.Клиент,$ДокВО.Клиент,$ДокСФ.Клиент,$ДокОР.Клиент,Рег.Клиент) [КлиентДок $Справочник.Контрагенты],
	|						COALESCE($ДокР2.ВсегоСуммаШ,$ДокПН.ВсегоСуммаШ,$ДокВО.Сумма,$ДокСФ.ВсегоСуммаШ,$ДокОР.ВсегоСуммаШ,0) СуммаДок,
	|						Рег.ДолгОстаток ДолгКон,  
	|						COALESCE(РегДолги.ДолгОстаток,0) ДолгПоСтатусу,
	|						CASE WHEN COALESCE($ДокР2.ДатаОплаты,$ДокПН.ДатаОплаты,$ДокВО.ДатаОплаты,$ДокСФ.ДатаОплаты,$ДокОР.ДатаОплаты)<:Кон THEN Рег.ДолгОстаток ELSE 0 END ПросроченныйДолг,
	|						$ПоследнееЗначение.Контрагенты.СуммаКредита(Рег.Клиент,:Кон) СуммаКредита,                                                      
	|						$ПоследнееЗначение.Контрагенты.Глубина(Рег.Клиент,:Кон) Глубина,                                                      
	|						COALESCE($ДокР2.Валюта,$ДокПН.Валюта,$ДокВО.Валюта,:БазВалюта) [Валюта $Справочник.Валюты],
	|						COALESCE($ДокР2.Курс,$ДокПН.Курс,$ДокВО.Курс,1) Курс,
	|						$СпрК2.ВалютаВзаиморасчетов [ВалютаВзаиморасчетов $Справочник.Валюты],                                   
	|						CASE WHEN $СпрК2.ВалютаВзаиморасчетов<>:БазВалюта THEN $ПоследнееЗначение.Валюты.Курс($СпрК2.ВалютаВзаиморасчетов,CAST(LEFT(Журн.DATE_TIME_IDDOC,8) as SmallDateTime)) ELSE 1 END КурсВал,
	|						CAST(LEFT(Журн.DATE_TIME_IDDOC,8) as SmallDateTime) ДатаДок,
	|						DATEDIFF(day, COALESCE($ДокР2.ДатаОплаты,$ДокПН.ДатаОплаты,$ДокВО.ДатаОплаты,$ДокСФ.ДатаОплаты,$ДокОР.ДатаОплаты,CAST(:Кон as SmallDateTime) ), CAST(:Кон as SmallDateTime)) ПросроченоДней
	|				FROM $РегистрОстатки.ВзаиморасчетыПокупателей(:КонРег~
	|															,INNER JOIN #Клиенты СпрК ON СпрК.ID=Клиент, ,(Клиент,КредДокумент),Долг ) as Рег
	|
	|LEFT JOIN $Документ.РасходнаяНакладная ДокР2 (NOLOCK) ON ДокР2.IDDOC=RIGHT(Рег.КредДокумент,9) 
	|LEFT JOIN $Документ.ПриходнаяНакладная ДокПН (NOLOCK) ON ДокПН.IDDOC=RIGHT(Рег.КредДокумент,9) 
	|LEFT JOIN $Документ.ВводОстатковКредита ДокВО (NOLOCK) ON ДокВО.IDDOC=RIGHT(Рег.КредДокумент,9) 
	|LEFT JOIN $Документ.Счет_фактура ДокСФ (NOLOCK) ON ДокСФ.IDDOC=RIGHT(Рег.КредДокумент,9) 
	|LEFT JOIN $Документ.ОтчетРеализатора ДокОР (NOLOCK) ON ДокОР.IDDOC=RIGHT(Рег.КредДокумент,9)
	|LEFT JOIN $РегистрОстатки.СостояниеДолгов(:КонРег~,,"+?(СтарыйСтатус.Выбран()=1,"СпособВоздействия = :ВыбСтатус","")+",(СпособВоздействия,ПоДокументу), ) as РегДолги ON Рег.КредДокумент = РегДолги.ПоДокументу
	|INNER JOIN _1sjourn Журн (NOLOCK) ON Журн.IDDOC=RIGHT(Рег.КредДокумент,9) 
	|INNER JOIN $Справочник.Контрагенты СпрК2 (NOLOCK) ON СпрК2.ID=Рег.Клиент 
	|WHERE 1=1 " ;
	

	// не работает	
	Если (ПросроченоДней>0) Тогда
		Если (чТочноДней=1) Тогда
			ТекстЗапроса2=ТекстЗапроса2+" AND COALESCE($ДокР2.ДатаОплаты,$ДокСФ.ДатаОплаты,$ДокОР.ДатаОплаты,CAST(:Кон as SmallDateTime))=CAST(:ПросроченоДней as SmallDateTime)";
		ИначеЕсли чТочноДней=3 Тогда // между                          
			ТекстЗапроса2=ТекстЗапроса2+" AND (COALESCE($ДокР2.ДатаОплаты,$ДокСФ.ДатаОплаты,$ДокОР.ДатаОплаты, CAST(:Кон as SmallDateTime))<=CAST(:ПросроченоДней as SmallDateTime)) AND (COALESCE($ДокР2.ДатаОплаты, CAST(:Кон as SmallDateTime))>=CAST(:Просрочено2 as SmallDateTime))";
		Иначе // больше большего
			ТекстЗапроса2=ТекстЗапроса2+" AND COALESCE($ДокР2.ДатаОплаты,$ДокСФ.ДатаОплаты,$ДокОР.ДатаОплаты, CAST(:Кон as SmallDateTime))<CAST(:ПросроченоДней as SmallDateTime)";
		КонецЕсли;
		
		//определим дату с которой сравнивать
		Запрос.УстановитьТекстовыйПараметр("ПросроченоДней",ДатаДок-ПросроченоДней);
		Запрос.УстановитьТекстовыйПараметр("Просрочено2",ДатаДок-Просрочено2);
		Если чТочноДней=3 Тогда
			Если ПросроченоДней > Просрочено2 Тогда
				Запрос.УстановитьТекстовыйПараметр("ПросроченоДней",ДатаДок-Просрочено2);
				Запрос.УстановитьТекстовыйПараметр("Просрочено2",ДатаДок-ПросроченоДней);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;        
	
	Если СтарыйСтатус.Выбран()=1 Тогда
		ТекстЗапроса2=ТекстЗапроса2+" AND РегДолги.ДолгОстаток <> 0 ";
		Запрос.УстановитьТекстовыйПараметр("ВыбСтатус",СтарыйСтатус);
	Иначе
		ТекстЗапроса2=ТекстЗапроса2+" AND COALESCE(РегДолги.ДолгОстаток,0) = 0 ";
	КонецЕсли;
	
	Если Выбран()=1 Тогда
		Запрос.УстановитьТекстовыйПараметр("КонРег",ПолучитьПозицию());
	Иначе
		Запрос.УстановитьТекстовыйПараметр("КонРег",ДатаДок);
	КонецЕсли;
	Запрос.УстановитьТекстовыйПараметр("Кон",ДатаДок);
	Запрос.УстановитьТекстовыйПараметр("БазВалюта",Константа.БазоваяВалюта);
	                                    
	ТК_=СоздатьОбъект("ТаблицаЗначений");    

	Состояние("Выполняется запрос...");
	//Запрос.Отладка(1);
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса2,ТК_); 

	
	тКлиенты = СоздатьОбъект("ТаблицаЗначений");
	ТК_.Выгрузить(тКлиенты,,,"Клиент,ПросроченныйДолг");	
	тКлиенты.Свернуть("Клиент","ПросроченныйДолг");
	тКлиенты.Сортировать("Клиент");
	
	Если тКлиенты.КоличествоСтрок()=0 Тогда
		Сообщить("Согласно установленным фильтрам ничего не заполнено!");
		Возврат;
	КонецЕсли;

	оВыбор = СоздатьОбъект("Общие.Диалог.Выбор");
	оВыбор.Заголовок("Выберите документы, по которым будет заполнена таблица");
	Если оВыбор.Выбрать(тКлиенты) = 0 Тогда
		Возврат;
	КонецЕсли; 

	таблКлиентов = оВыбор.Результат();
	Если таблКлиентов.Итог("выб") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	сзКлиенты=СоздатьОбъект("СписокЗначений");
	таблКлиентов.ВыбратьСтроки();
	Пока таблКлиентов.ПолучитьСтроку()=1 Цикл
		Если таблКлиентов.Выб=1 Тогда
			сзКлиенты.ДобавитьЗначение(таблКлиентов.Клиент);
		КонецЕсли;
	КонецЦикла;
	
	ТК_.ВыбратьСтроки();
	ТК_.Сортировать("Клиент");
	Пока ТК_.ПолучитьСтроку() = 1 Цикл
		Если сзКлиенты.Принадлежит(ТК_.Клиент)=0 Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока();
		Клиент=ТК_.Клиент;
		ПоДокументу=ТК_.КредДокумент;
		Сумма=ТК_.ПросроченныйДолг;
		ПроцентШтрафаСтр = ПроцентШтрафа;
		Если ТК_.ВалютаВзаиморасчетов<>Рубли Тогда
			Сумма= ТК_.ПросроченныйДолг * ТК_.КурсВал;
		КонецЕсли;
		Если НовыйСтатус.Выбран()=1 Тогда
			Статус=НовыйСтатус;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
//***************************************
//======================================================================
Процедура ПриВыбореСтатуса()
	Номер = СтарыйСтатус.ПорядковыйНомер();
	НовыйСтатус = Перечисление.СтатусыПросроченногоДолга.ЗначениеПоНомеру(Мин(Номер+1,Перечисление.СтатусыПросроченногоДолга.КоличествоЗначений()));
КонецПроцедуры // ПриВыбореСтатуса
//***************************************
Функция ПросрДней(пДок)
	Рез=0;
	Попытка
		Рез=ДатаДок-пДок.ДатаОплаты;
	Исключение
	КонецПопытки;
	Возврат Рез;
КонецФункции
//======================================================================
Функция СтранаПечати()
	Результат = Фирма.Страна.Код;
	Возврат Результат;
КонецФункции // СтранаПечати
//======================================================================
Процедура Печать(Режим,Рассылка=0)
	
	
	Фирма.ИспользоватьДату(ДатаДок);
	ФирмаНазвание = Фирма.ПолноеНаименование;
	ФирмаРегНомер = Фирма.Рег_номер;
	ФирмаАдрес 	  = Фирма.ЮридическийАдрес;

	итКлиенты=СоздатьОбъект("ИндексированнаяТаблица");	
	итКлиенты.Загрузить(ТекущийДокумент());
	итКлиенты.Группировать("Клиент : *Клиент; ПоДокументу : *ПоДокументу","Сумма");
	итКлиенты.Сортировать("Клиент");
	
	Страна = СтранаПечати();

	сзКлиентыРассылки=СоздатьОбъект("СписокЗначений");
	
	Если Рассылка=0 Тогда
		Таб = СоздатьОбъект("Таблица");
		Таб.ИсходнаяТаблица(Режим+Страна);
	ИначеЕсли Рассылка=1 Тогда
	
		тКлиентыРассылки = СоздатьОбъект("ТаблицаЗначений");
		ВыгрузитьТабличнуюЧасть(тКлиентыРассылки,"Клиент");	
		тКлиентыРассылки.Свернуть("Клиент","");
		тКлиентыРассылки.НоваяКолонка("EMail","Строка","100",,"E-mail");
		тКлиентыРассылки.ВыбратьСтроки();
		Пока тКлиентыРассылки.ПолучитьСтроку() = 1 Цикл
			тКлиентыРассылки.EMail = СокрЛП(тКлиентыРассылки.Клиент.ЭлПочта);
		КонецЦикла;
		тКлиентыРассылки.Сортировать("Клиент");

		оВыбор = СоздатьОбъект("Общие.Диалог.Выбор");
		оВыбор.Заголовок("Выберите документы, по которым будет выставлена компенсация");
		Если оВыбор.Выбрать(тКлиентыРассылки) = 0 Тогда
			Возврат;
		КонецЕсли; 

		таблКлиентов = оВыбор.Результат();
		Если таблКлиентов.Итог("выб") = 0 Тогда
			Возврат;
		КонецЕсли;
		
		таблКлиентов.ВыбратьСтроки();
		Пока таблКлиентов.ПолучитьСтроку()=1 Цикл
			Если таблКлиентов.Выб=1 Тогда
				сзКлиентыРассылки.ДобавитьЗначение(таблКлиентов.Клиент);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	итКлиенты.ВыбратьСтроки();
	Пока итКлиенты.ПолучитьСтроку() = 1 Цикл

		Если Рассылка=1 Тогда
			Таб = СоздатьОбъект("Таблица");
			Таб.ИсходнаяТаблица(Режим+Страна);
		КонецЕсли;
		
		ИтогСумма = 0;
		ИтогНДС = 0;
		ИтогШтраф = 0;

		ПечКлиент = итКлиенты.Клиент;
	
		НаименованиеПартнера 	= ПечКлиент.ПолноеНаименование;
		АдресПартнера 			= ПечКлиент.ЮридическийАдрес;
		РегНомерПартнера 		= ПечКлиент.Рег_номер;
		
		печВалюта = ПечКлиент.ВалютаКредита;
		Если ПустоеЗначение(печВалюта) = 1 Тогда
			печВалюта = Константа.ОсновнаяВалюта;
		КонецЕсли;

		Таб.ВывестиСекцию("Шапка");
		
		итДокументы=итКлиенты.тзПотомки;
		итДокументы.ВыбратьСтроки();
		Пока итДокументы.ПолучитьСтроку() = 1 Цикл

			ПечПоДокументу=итДокументы.ПоДокументу;
			Если глЕстьРеквизитШапки("ДатаОплаты",ПечПоДокументу.Вид()) = 1 Тогда
				ПечДатаОплаты = ПечПоДокументу.ДатаОплаты;
			Иначе
				ПечДатаОплаты = "";
			КонецЕсли;
			
			Если ПечПоДокументу.Вид() = "РасходнаяНакладная" Тогда
				СуммаПоДокументу = Пересчет(ПечПоДокументу.ВсегоСуммаШ,ПечПоДокументу.Валюта,ПечПоДокументу.Дата_курса,Рубли,1) ;
				НДСПодокументу = Пересчет(ПечПоДокументу.ВсегоНДСШ,ПечПоДокументу.Валюта,ПечПоДокументу.Дата_курса,Рубли,1);
			Иначе
				СуммаПоДокументу = итДокументы.Сумма;
				НДСПодокументу = 0;
			КонецЕсли;
			
			ПечСумма 			= итДокументы.Сумма;
			ПечПроцентШтрафаСтр = итДокументы.ПроцентШтрафаСтр;
			ПечПросрДней		= ПросрДней(итДокументы.ПоДокументу);
			
			ИтогШтраф = ИтогШтраф + (ПечПроцентШтрафаСтр*ПечПросрДней*итДокументы.Сумма)/100;
			ИтогСумма = ИтогСумма + итДокументы.Сумма;
			Если СуммаПоДокументу <> 0 Тогда
				ИтогНДС = ИтогНДС +  НДСПодокументу * итДокументы.Сумма / СуммаПоДокументу;
			КонецЕсли;

			Таб.ВывестиСекцию("Строка");
			
		КонецЦикла;
		
		ПечСумма = СокрЛП(Формат(итКлиенты.Сумма,"Ч010.2"));
		Таб.ВывестиСекцию("Подвал");

		Если (Рассылка=1) И (сзКлиентыРассылки.Принадлежит(ПечКлиент)=1) Тогда
			Таб.Опции(0,0,0,0);
			Таб.ПараметрыСтраницы(,,,,,,,,,1);
			Таб.Показать(""+ПечКлиент.ПоАлфавиту);

			Параметры = СоздатьОбъект("СписокЗначений");
			Параметры.ДобавитьЗначение("par nokaveetiem maksaajumiem "+Страна,"ТЕМА");
			Параметры.ДобавитьЗначение("Godaatais sadarbiibas partneri!
			|
			|Informeejam, ka shobriid neesam savlaiciigi sanemusi apmaksu no Jusu kompanijas.
			|Lidz ar to SIA 'REATON, LTD' ir sagatavojis atbilstoshu veestuli par nokaveetiem maksaajumiem (pielikumaa).
			|Ludzam iepazities ar vestuli pielikumaa un veikt apmaksu atbilstoshi vestulee noraadiitaajam terminam.
			|
			|Neskaidriibu gadiijumaa luudzam sazinaaties ar mums (kontaktinformaacija zemaak).
			|
			|Shis e-pasts ir noformeets automaatiski.","ТЕЛО");
			
			Параметры.ДобавитьЗначение("norekini@ppd.reaton.lv"		,"ОТКОГО");
	//		Параметры.ДобавитьЗначение("elkpro@inbox.lv"		,"ОТКОГО");
			//Параметры.ДобавитьЗначение(СокрЛП(печКлиент.ЭлПочта),"КОМУ");
			Параметры.ДобавитьЗначение(СокрЛП(печКлиент.ЭлПочта),"КОМУ");
			//Параметры.ДобавитьЗначение("elkpro@inbox.lv","КОМУ");
			Параметры.ДобавитьЗначение(1,"НЕМЕДЛЕННАЯОТПРАВКА");
			Параметры.ДобавитьЗначение(0,"OUTLOOK");
	
			ОткрытьФорму("Отчет",Параметры,КаталогИБ()+"ExtForms\БВК_НОВ_ОТСЫЛКАПОПОЧТЕЛЮБОЙПЕЧАТНОЙФОРМЫ.ERT");
			
		КонецЕсли;

	КонецЦикла;
	
	Если Рассылка=0 Тогда
		Таб.Опции(0,0,0,0);
		Таб.ПараметрыСтраницы(,,,,,,,,,1);
		Таб.Показать(""+Режим);
	КонецЕсли;
	

КонецПроцедуры // ПечатьНапоминания
//======================================================================
Процедура ПоКнопкеПечать(Рассылка=0)
	//Если КлиентШ.Выбран() = 0 Тогда
	//	Предупреждение("Необходимо выбрать одного клиента!");
	//	Возврат;
	//Иначе
	//	ТабЧ = СоздатьОбъект("ТаблицаЗначений");
	//	ВыгрузитьТабличнуюЧасть(ТабЧ);
	//	ТабЧ.Свернуть("Клиент","Сумма");
	//	Если ТабЧ.КоличествоСтрок() > 1 Тогда
	//		Предупреждение("Все долги должны относиться к одному клиенту!");
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	
	Если Проведен()=0 Тогда
		Предупреждение("Печать возможна только проведенного документа!");
		Возврат;
	КонецЕсли;
	
	Страна = СтранаПечати();
	Меню = СоздатьОбъект("СписокЗначений");
	Меню.ДобавитьЗначение("Напоминание");
	Меню.ДобавитьЗначение("Предупреждение");
	Меню.ДобавитьЗначение("Штрафные санкции");	
	Зн=0;
	Если Меню.ВыбратьЗначение(,,Зн,,1) <> 0 Тогда
		Если Зн = 1 Тогда
			Печать("Напоминание",Рассылка);
		ИначеЕсли Зн = 2 Тогда	
			Печать("Предупреждение",Рассылка);
		ИначеЕсли Зн = 3 Тогда	
			Печать("Штрафные санкции",Рассылка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПоКнопкеПечать


Процедура кнРассылка()
	Если Модифицированность() = 1 Тогда
		Ответ = Вопрос("Документ не был записан после внесенных изменений. Записать?","Да+Нет",60);
		Если Ответ <> "Да" Тогда Возврат; КонецЕсли;
		Записать(); 
	КонецЕсли;
	
	ПоКнопкеПечать(1);
	
	//сп = СоздатьОбъект( "СписокЗначений" );
	//сп.Установить("Документ",ТекущийДокумент());
	//Путь = КаталогИБ() + "ExtForms\РассылкаНапоминанийДолжникам.ert";
	//ОткрытьФормуМодально("Отчет",сп,Путь);
КонецПроцедуры

спКодов = СоздатьОбъект( "СписокЗначений" );
спКодов.Установить("161",194);
спКодов.Установить("162",226);
спКодов.Установить("163",200);
спКодов.Установить("165",232);
спКодов.Установить("166",199);
спКодов.Установить("167",231);
спКодов.Установить("168",204);
спКодов.Установить("170",236);
спКодов.Установить("172",206);
спКодов.Установить("174",238);
спКодов.Установить("175",205);
спКодов.Установить("176",237);
спКодов.Установить("177",207);
спКодов.Установить("178",239);
спКодов.Установить("179",210);
спКодов.Установить("180",242);
спКодов.Установить("185",208);
спКодов.Установить("186",240);
спКодов.Установить("188",219);
спКодов.Установить("189",251);
спКодов.Установить("190",222);
спКодов.Установить("191",254);

