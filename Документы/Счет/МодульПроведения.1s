Процедура ОчисткаСтатуса(пПоСчету,пСтатус)
	
	Реги=СоздатьОбъект("Регистры");
	Реги.Актуальность(1);
	Рег=Реги.КомплектацияЗаявок;
	
	рег.УстановитьЗначениеФильтра("ПоСчету",пПоСчету);
	рег.УстановитьЗначениеФильтра("Статус",пСтатус);
		
	Если ИтогиАктуальны()=0 Тогда
		рег.ВременныйРасчет(1);
		Реги.РассчитатьРегистрыНа(ТекущийДокумент());
	КонецЕсли;
	
	таблКомпл=СоздатьОбъект("ТаблицаЗначений");
	Рег.ВыгрузитьИтоги(таблКомпл,1,1);
	Если (таблКомпл.КоличествоСтрок()=0) Тогда
		Возврат;
	КонецЕсли;
	
	таблКомпл.ВыбратьСтроки();
	Пока таблКомпл.ПолучитьСтроку()=1 Цикл
		Регистр.КомплектацияЗаявок.ДатаПоставки=таблКомпл.ДатаПоставки;
		Регистр.КомплектацияЗаявок.ПоСчету=таблКомпл.ПоСчету;
		Регистр.КомплектацияЗаявок.ВидЗаявки=таблКомпл.ВидЗаявки;
		Регистр.КомплектацияЗаявок.МестоКомплектации=таблКомпл.МестоКомплектации;
		Регистр.КомплектацияЗаявок.Склад=таблКомпл.Склад;
		Регистр.КомплектацияЗаявок.ВидДоставки=таблКомпл.ВидДоставки;
		Регистр.КомплектацияЗаявок.Товар="";
		Регистр.КомплектацияЗаявок.Статус=таблКомпл.Статус;
		Регистр.КомплектацияЗаявок.Количество=таблКомпл.Количество;
		Регистр.КомплектацияЗаявок.ДвижениеРасходВыполнить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаКолваСтрок()
	//BEGIN PR 18.05.2015
	//ставим ограничение на кол-во строк в заявке		      
	Если ПустоеЗначение(Склад.МестоКомплектации)=0 Тогда
	//	МаксСтрокВСчете = Склад.МестоКомплектации.МаксСтрокВСчете; 
		МаксСтрокВСчете = Константа.МаксСтрокВСчете;
		Если МаксСтрокВСчете=0 Тогда
			//ограничение не установлено
			МаксСтрокВСчете = 999;
		КонецЕсли;
	Иначе
		МаксСтрокВСчете = 999;
	КонецЕсли;                           
	
	Если (ПустоеЗначение(КлГруппа.ECOD)=0) ИЛИ (ПустоеЗначение(КлГруппа.ФорматОбмена)=0) Тогда
		//электронный обмен данными - ограчниение снимаем
		МаксСтрокВСчете = 999; 
	КонецЕсли;
	
	Если (ГрупповаяОбработка()=0) И (ДатаДок>='21.05.15') И (ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка) Тогда
		Если КоличествоСтрок()>МаксСтрокВСчете Тогда
			НеПроводить(Контекст,Шаблон("Макс кол-во строк в одной Эл.заявке не может превышать [МаксСтрокВСчете]"));
			Сообщить("Разделите на несколько заявок, с кол-вом строк не больше [МаксСтрокВСчете]. Ограничение склада!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//END PR
	
КонецПроцедуры

//======================================================================
//======================================================================

//======================================================================
Функция семЗапретитьАвтоРезервацию() //1 если меняем статус

	//не проверяем время для брони в пути
	Если (ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаБронь) И (фБроньвпути=1) Тогда
		Возврат 1;
	КонецЕсли;

//	Если (кВклПроверкуВремениЭлЗаявок = 0) ИЛИ (НазваниеНабораПрав()="Администратор") ИЛИ (Найти(Автор.Код,"ECOD")>0) Тогда Возврат 1; КонецЕсли;

	текДень = ТекущаяДата();
	Если (ВидДоставки = Перечисление.ВидыДоставки.Самовывоз) ИЛИ (ВидДоставки = Перечисление.ВидыДоставки.Агент) Тогда
		Если ДатаПоставки = текДень Тогда
			//максВремя = "18:00:00";
			//Если ТекущееВремя() > максВремя Тогда
			//	Сообщить(Шаблон("Текущее время ([ТекущееВремя()]) превышает допустимое время ([максВремя]) проведения Эл. заявки на самовывоз на сегодняшний день."),"I");
			//	Возврат 0;
			//КонецЕсли;
		КонецЕсли;
		Возврат 1;
	КонецЕсли;

//	PR 05.09.17
 	л_АдресДоставки  	= АдресДоставки;
 	л_АдресДоставкиДоп 	= АдресДоставкиДоп;
	Если ПустоеЗначение(АдресДоставки)=1 Тогда
		Если ПустоеЗначение(КлиентФилиала)=0 Тогда
			л_АдресДоставки = КлиентФилиала.АдресДоставки;
			л_АдресДоставкиДоп = КлиентФилиала.АдресДоставкиДоп;
		Иначе
			л_АдресДоставки = Клиент.АдресДоставки;
			л_АдресДоставкиДоп = Клиент.АдресДоставкиДоп;
		КонецЕсли;
	
	КонецЕсли;
	
	
	Если ПустоеЗначение(МаршрутДоставкиГрафик)=0 Тогда
//		Маршрут = СокрЛП(МаршрутДоставкиГрафик.Наименование);
		л_МаршрутНаправление = МаршрутДоставкиГрафик.Направление;
	ИначеЕсли (ПустоеЗначение(КлиентФилиала)=0) И (КлиентФилиала<>Клиент) Тогда
//		Маршрут = СокрЛП(АдресДоставки.Маршрут.Описание);
		л_МаршрутНаправление = л_АдресДоставки.Маршрут.Направление;
	Иначе
//		Маршрут = СокрЛП(АдресДоставки.Маршрут.Описание);
       	л_МаршрутНаправление = л_АдресДоставки.Маршрут.Направление;
	КонецЕсли;
	
	л_ДнейДоДоставки=л_МаршрутНаправление.ДнейДоДатыПоставки;
	Если ПустоеЗначение(л_ДнейДоДоставки)=1 Тогда
		л_ДнейДоДоставки=0;
	КонецЕсли;
	л_ДатаПоставки=ДатаПоставки;

	л_ФактДатаКомплектации=л_ДатаПоставки-л_ФактДатаКомплектации;

	
	л_ВремяЗавершения=л_МаршрутНаправление.ВремяЗавершения;
		л_час=Число(Сред(л_ВремяЗавершения,1,2));
		л_мин=Число(Сред(л_ВремяЗавершения,4,2));
		л_МинВсего=л_час*60+л_мин;
	
	л_ФактВремяКомплектацииМин=л_МинВсего-Число(СокрЛП(л_МаршрутНаправление.НачПредвОбработкиМин));
		л_час=Цел(л_ФактВремяКомплектацииМин/60);
		л_мин=л_ФактВремяКомплектацииМин-(л_час*60);
	л_ФактВремяКомплектации=Строка(л_час)+":"+Строка(л_мин)+":00";
	
	л_ТекущаяДата=ТекущаяДата();
	л_ТекущееВремя=ТекущееВремя();
	л_максВремя = "18:00:00";
	
	Если л_ТекущаяДата=л_ФактДатаКомплектации Тогда //делаем проверку.
		

//	ВремяДокумента=ТекущееВремя();
//	Док.УстановитьВремя(Число(Сред(ВремяДокумента,1,2)),Число(Сред(ВремяДокумента,4,2)),Число(Сред(ВремяДокумента,7,2)));

	л_МеньшееВремя=Мин(л_максВремя,л_ФактВремяКомплектации);

		Если ТекущееВремя() < л_МеньшееВремя Тогда
			Сообщить(Шаблон("Текущее время ([ТекущееВремя()]) меньше максимального ([л_МеньшееВремя]) заявка получает статус Ожидает резерва ждет смены статуса"),"I");
			Возврат 0;
//		ИначеЕсли ТекущееВремя() < л_ФактВремяКомплектации Тогда
//			Сообщить(Шаблон("Текущее время ([ТекущееВремя()]) больше максимального времени Направления маршрута([л_ФактВремяКомплектации]) заявка получает статус Ожидает Комплектацию может идти на комплектацию"),"I");
//			Возврат 0;
		КонецЕсли;
		
	ИначеЕсли л_ТекущаяДата>л_ФактДатаКомплектации Тогда 
		Возврат 1;
	ИначеЕсли л_ТекущаяДата<л_ФактДатаКомплектации Тогда
		Возврат 0;
	КонецЕсли;
КонецФункции // РасчетВремениОтправки

Функция семПроблемаСРезервом()

	Если (ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка) Тогда
		
	Иначе
		Возврат 0;
	КонецЕсли;

	л_нетРезерва=0;
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если Количество<>Резерв Тогда
			л_нетРезерва=1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если л_нетРезерва=1 Тогда
		Если семЗапретитьАвтоРезервацию()=0 Тогда
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 0;
КонецФункции // ПроверкаНаличияРезерва

//======================================================================
Процедура ПроверкаЗаказовПоставщиков()
	
	ТекстЗапроса = "SELECT $СчетСтроки.Товар [Товар $Справочник.Номенклатура]
	|					, $СчетСтроки.Единица [Единица $Справочник.Единицы]
	|					, $Номенклатура.Поставщик [Поставщик $Справочник.Контрагенты]
	|					, $СчетСтроки.Количество Количество
	|				FROM $ДокументСтроки.Счет AS СчетСтроки With (NOLOCK)
	|				INNER JOIN $Справочник.Номенклатура AS Номенклатура With (NOLOCK) ON $СчетСтроки.Товар = Номенклатура.ID
	|				WHERE (СчетСтроки.IDDOC = :ВыбДок) 
	|";
	
	Запрос = СоздатьОбъект("ODBCRecordSet");
	Запрос.УстановитьТекстовыйПараметр("ВыбДок",ТекущийДокумент());
	
	итТоварыПоставщики = СоздатьОбъект("ИндексированнаяТаблица");
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,итТоварыПоставщики);
	итТоварыПоставщики.Группировать("Поставщик:*Поставщик; Товар:*Товар","Количество");

	итТоварыПоставщики.ВыбратьСтроки();
	Пока итТоварыПоставщики.ПолучитьСтроку() = 1 Цикл
		Поставщик = итТоварыПоставщики.Поставщик;
		
		ТекстЗапроса = "SELECT $КлиентЗаказыПоставщикам.Время Время
		|				FROM $Справочник.КлиентЗаказыПоставщикам AS КлиентЗаказыПоставщикам With (NOLOCK)
		|				WHERE (КлиентЗаказыПоставщикам.PARENTEXT = :ВыбКлиент) AND $КлиентЗаказыПоставщикам.ДатаПоставкиОт<=:ДатаПоставки AND $КлиентЗаказыПоставщикам.ДатаПоставкиДо>=:ДатаПоставки
		|";
		Запрос.УстановитьТекстовыйПараметр("ВыбКлиент",Поставщик);
		Запрос.УстановитьТекстовыйПараметр("ДатаПоставки",ДатаПоставки);
		ВремяЗаказа = Запрос.ВыполнитьСкалярный(ТекстЗапроса);

		Заголовок = Шаблон("WARNING! Spec.zakaz dlja postavschika [Лев(Поставщик.ПоАлфавиту,30)] na [ДатаПоставки] razmechen posle Zakaza postavschiku");

		ТекстСообщения=Шаблон("WARNING! Spec.zakaz [НомерДок] dlja postavschika [Поставщик.ПоАлфавиту] na [ДатаПоставки] razmechen posle Zakaza postavschiku")+РазделительСтрок;
		Если ПустоеЗначение(ВремяЗаказа)=0 Тогда
			
			итТовары = итТоварыПоставщики.тзПотомки;
			итТовары.ВыбратьСтроки();
			Пока итТовары.ПолучитьСтроку()=1 Цикл

				Если ПустоеЗначение(ТекстСообщения)=0 Тогда
					ТекстСообщения=ТекстСообщения+РазделительСтрок;
				КонецЕсли;
					
				ТекстСообщения = ТекстСообщения + Шаблон("Pozicija [итТовары.Товар.Код] [итТовары.Товар.ПоАлфавиту] - [итТовары.Количество] [итТовары.Единица]");
				ТекстСообщенияСМС = ТекстСообщенияСМС + Шаблон("Pozicija [итТовары.Товар.Код] [итТовары.Товар.ПоАлфавиту] - [итТовары.Количество] [итТовары.Единица] ");
					
			КонецЦикла;

			Сообщить(Шаблон("Cпец. заказ [НомерДок] для поставщика [Поставщик] на [ДатаПоставки] размещен после заказа поставщику. Нет гарантии обеспечения товаров. ОБРАТИТЕСь в закупку!"));
			
		КонецЕсли;

		ТекстСообщения=ТекстСообщения+РазделительСтрок+Шаблон("Agent: [Translate_Descr(СокрЛП(Агент.Наименование))] Tel: [СокрЛП(Агент.Телефон)] E-mail: [Агент.ЭлПочта]");
					
		Если  СтрДлина(ТекстСообщения)>4000 Тогда
			Сообщить("Длина сообщения: "+СтрДлина(ТекстСообщения));					
			НеПроводить(Контекст,"Удалите несколько строк, чтобы длина сообщения была не больше 4000 символов!");
			Возврат;
		КонецЕсли;

		Если ПустоеЗначение(ВремяЗаказа)=0 Тогда
			Если ПустоеЗначение(ВидУведомления)=1 Тогда

				СпрСотр = СоздатьОбъект("Справочник.СотрудникиПодч");
				СпрСотр.ИспользоватьВладельца(Поставщик.Агент);
				
				//Сообщить(ТекстСообщения);
				Если ПустоеЗначение(ТекстСообщения)=0 Тогда
					Рез=глОтправитьСообщение(Заголовок,ТекстСообщения,Поставщик.Агент,"Email");
					Если рез=1 Тогда
						ВидУведомления = Перечисление.ВидыУведомлений.ЭлПочта;
					КонецЕсли;
					
					СпрСотр.ВыбратьЭлементы();
					Пока СпрСотр.ПолучитьЭлемент() = 1 Цикл
						
						Если СпрСотр.ПометкаУдаления()=1 Тогда
							Продолжить;
						КонецЕсли;
						
						Рез=глОтправитьСообщение(Заголовок,ТекстСообщения,СпрСотр.Сотрудник,"Email");
					КонецЦикла;
				КонецЕсли;		
				
				//Рез=глОтправитьСообщение("",Заголовок+" podrobnosti po E-mail",Поставщик.Агент,"SMS");
				//Если рез=1 Тогда
				//	ВидУведомления = Перечисление.ВидыУведомлений.СМС;
				//КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;			
				
	КонецЦикла;	
	
	
КонецПроцедуры // ПроверкаЗаказовПоставщиков

Функция семПроверкаВремениЭлЗаявки()
	
	//не проверяем время для брони в пути
	Если (ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаБронь) И (фБроньвпути=1) Тогда
		Возврат 1;
	КонецЕсли;

	Если (кВклПроверкуВремениЭлЗаявок = 0) ИЛИ (НазваниеНабораПрав()="Администратор") ИЛИ (Найти(Автор.Код,"ECOD")>0) Тогда Возврат 1; КонецЕсли;
	текДень = ТекущаяДата();
	Если (ВидДоставки = Перечисление.ВидыДоставки.Самовывоз) ИЛИ (ВидДоставки = Перечисление.ВидыДоставки.Агент) Тогда
		Если ДатаПоставки = текДень Тогда
			//максВремя = "18:00:00";
			//Если ТекущееВремя() > максВремя Тогда
			//	Сообщить(Шаблон("Текущее время ([ТекущееВремя()]) превышает допустимое время ([максВремя]) проведения Эл. заявки на самовывоз на сегодняшний день."),"I");
			//	Возврат 0;
			//КонецЕсли;
		КонецЕсли;
		Возврат 1;
	КонецЕсли;
	следДень = ТекущаяДата()+1;
	пМаршрут = Клиент.АдресДоставки.Маршрут;
	Если ДатаПоставки = текДень Тогда
		
		Если ПустоеЗначение(МаршрутДоставкиГрафик)=0 Тогда
			пМаршрут	= МаршрутДоставкиГрафик;
			максВремя 	= пМаршрут.ВремяТекДень;
		Иначе
			максВремя 	= пМаршрут.ВремяТекДень;
		КонецЕсли;
		
		Если ПустаяСтрока( СтрЗаменить(максВремя,":","") ) = 1 Тогда Возврат 1; КонецЕсли;
		Если ТекущееВремя() > максВремя Тогда
			Сообщить(Шаблон("Текущее время ([ТекущееВремя()]) превышает допустимое время ([пМаршрут.ВремяТекДень]) проведения Эл. заявки для маршрута ([пМаршрут]) на сегодняшний день."),"I");
			Возврат 0;
		КонецЕсли;
	ИначеЕсли ДатаПоставки = следДень Тогда
		
		Если ПустоеЗначение(МаршрутДоставкиГрафик)=0 Тогда
			пМаршрут	= МаршрутДоставкиГрафик;
			максВремя 	= пМаршрут.ВремяТекДень;
		Иначе
			максВремя 	= пМаршрут.ВремяТекДень;
		КонецЕсли;
		
		Если семЕстьПраво("Документ","Счет","Превышение лимита времени до 18:00") = 1 Тогда
			максВремя = ?(пМаршрут.ВремяСледДень<"18:00:00","18:00:00",пМаршрут.ВремяСледДень);
		Иначе
			максВремя = пМаршрут.ВремяСледДень;
		КонецЕсли;
		Если ПустаяСтрока( СтрЗаменить(максВремя,":","") ) = 1 Тогда Возврат 1; КонецЕсли;
		Если ТекущееВремя() > максВремя Тогда
			Сообщить(Шаблон("Текущее время ([ТекущееВремя()]) превышает допустимое время ([максВремя]) проведения Эл. заявки для маршрута ([пМаршрут]) на следующий день."),"I");
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат 1;
	КонецЕсли;
КонецФункции

//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения(п_Знач=0) Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ОбработкаПроведения(п_Знач)
	//Закомментировано Инсталлятором МОД:Процедура ОбработкаПроведения()
	// сем \\
	Перем флагБронирования;//флаг определят признак документа идущий по ветке бронирования на основании 
	Перем флагСчетНуляБрони; // для изменения состояния документа бронь при нулевых остатках
	
	
	//проверка документа на признак бронирования
	флагБронирования=0;
	флагСчетНуляБрони=0;
	Если ДокументОснование.Вид()="Счет" Тогда
		Если ДокументОснование.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
			флагБронирования=1;
		КонецЕсли;
	КонецЕсли;		
	Если ПустоеЗначение(п_Знач)=1 Тогда
		п_Знач=0;
	КонецЕсли;
	
Если п_Знач=0 Тогда //проведенеия из СчетОбщий п_Знач=1

	Если ГрупповаяОбработка()=0 Тогда
		Если (Склад.СкладОтвХранения=1) И (ВидОплаты<>2) Тогда
			НеПроводить(Контекст,"Вид оплаты не соответствует выбранному складу. Должен быть выбран склад отв. хранения!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПроверкаКолваСтрок(); //проверяем на кол-во строк в документе	
//{ до обработки бронирования
	
	
	
	Если семМожноПровести( Контекст ) = 0 Тогда Возврат; КонецЕсли;
	семОбновитьКурс( контекст );
	// сем //
	
	Если Клиент.Выбран()=0 Тогда
		НеПроводить(Контекст,"Выберите клиента!");
		Возврат;
	КонецЕсли;

//{проверки полей бронь в пути
	Если (ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаБронь) И (фБроньвпути=1) Тогда
		Если ВидДоставки.Выбран()=0 Тогда
			НеПроводить(Контекст,"Выбирите Вид доставки !");
		    Возврат;
		КонецЕсли;
	КонецЕсли;

//}проверки полей бронь в пути



	Клиент.ИспользоватьДату(ДатаДок);
	// Запишем главного клиента
	Если Клиент.КлГруппа.Выбран()=1 Тогда
		КлГруппа=Клиент.КлГруппа;
	Иначе
		КлГруппа=Клиент;
	КонецЕсли;       

	Если (Агент.Выбран()=0) и (ГрупповаяОбработка()=0) Тогда
		НеПроводить(Контекст,"Выберите агента!");
		Возврат;
	КонецЕсли;

	Если Склад.Выбран()=0 Тогда
		НеПроводить(Контекст,"Не указан склад по которому производится резервирование!");
		Возврат;
	КонецЕсли;
	
	Если ГрупповаяОбработка()=0 Тогда
		Если (ПроверкаДублейСтрок(Контекст)=1) И (ВидЗаявки<>Перечисление.ВидыЗаявок.ЗаявкаНаВозврат) Тогда 
			НеПроводить(Контекст,"В документе строки с одинаковым товаром!");
			Возврат;
		КонецЕсли;
		
		Если (семВнутреннийКлиент(КлГруппа,Фирма)=0) И (КлГруппа.ВидКонтрагента=Перечисление.ВидыКонтрагентов.Организация) И (ВидОплаты=1) Тогда
			//проверим сумму сделки с начала месяца
			СуммаСделки = глПолучитьСуммуСделкиЗаНаличныеПоКлиенту(Контекст,"Месяц");
			СуммаСделки=СуммаСделки+Окр(Итог("Сумма")+Итог("НДС"),2);
			ЛимитСуммыСделок = Константа.МаксСуммаСделкиНаличнымиМесяц.Получить(ДатаДок);
			Если СуммаСделки>ЛимитСуммыСделок Тогда
				НеПроводить(Контекст,Шаблон("Сумма [СуммаСделки] сделок в наличных превысит сумму лимита с одним юридическим лицом в месяц [ЛимитСуммыСделок]!"));
			Иначе
				Сообщить("Сумма сделок в наличных с начала месяца: "+СуммаСделки);
			КонецЕсли;
			
		КонецЕсли;
		
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл  
			Запрет = глЗапретОтгрузкиТовараПоКлиенту(КлГруппа,Товар,ДатаПоставки);
			Если Запрет = 1 Тогда
				НеПроводить(Контекст,Шаблон("В строке [НомерСтроки] для товара [Товар.Код] [Товар] клиенту [КлГруппа] установлен запрет продажи!"));
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
//	Если КоличествоСтрок()=0 Тогда 
//		НеПроводить(Контекст,"Документ пустой!");
//		Возврат;
//	КонецЕсли;     
	
	Если ПустоеЗначение(ДатаПоставки) = 1 Тогда 
		НеПроводить(Контекст,"Выберите дату поставки!"); 
		//Предупреждение("Выберите дату поставки!",10);
		Возврат;
	КонецЕсли;  



	
	
	Если ГрупповаяОбработка() = 0 Тогда
		Если ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
		Иначе
		//бронирование обработка на основании
			Если (ВидДоставки.Выбран() = 0) Тогда
				НеПроводить(Контекст,"Не выбран вид доставки!"); 
			Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ДатаПоставки < ДатаДок Тогда
		НеПроводить(Контекст,"Дата поставки прошлым числом, документ не проведен!"); 
		//Предупреждение("Дата поставки прошлым числом, документ не проведен!",10);
		Возврат;		
	КонецЕсли;	 

	Если ГрупповаяОбработка()=0 Тогда
		Если (Константа.НовыйМеханизмПретензий.Получить(ДатаДок)=Да) Тогда 
			//проверка на внутреннего клиента 
			Если (семВнутреннийКлиент(Клиент,Фирма)=1) И (ПустоеЗначение(СкладПолучатель)=1) Тогда
				НеПроводить(Контекст,"Для эл. заявки на пополнение склада должен быть обязательно выбран склад получателя!"); 
				Возврат;		
			КонецЕсли;	 
		КонецЕсли;
	КонецЕсли;

	
	Если ГрупповаяОбработка() = 0 Тогда
		Путь = КаталогИБ() + "ExtForms\Sem\ПроверкаДолгаКлиента.ert";
		Если ФС.СуществуетФайл( Путь ) = 1 Тогда
			сп = СоздатьОбъект( "СписокЗначений" );
			сп.Установить( "Контекст", ВзятьКонтекст( Контекст ) );
			ОткрытьФормуМодально( "Обработка", сп, Путь );
			Если сп.Получить( "Результат" ) <> 1 Тогда
				СтатусВозврата(0); Возврат;
			КонецЕсли;
		Иначе
			Если семПроверкаКлиента(Контекст) = 0 Тогда
				Сообщить("Документ не проведен!!!","!!!");
				СтатусВозврата(0); Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ГрупповаяОбработка() = 0 Тогда
		Если семПроверкаВремениЭлЗаявки() = 0 Тогда
			НеПроводить(Контекст,"Превышено время подачи эл. заявок.");
			Возврат;
		КонецЕсли;
	КонецЕсли;

КонецЕсли;
	
	//проставялем агента из Клиента для документов из центра
	Если (КлиентФилиала = Клиент) И (Фирма=Константа.ОсновнаяФирма) И (ПустоеЗначение(Агент)=1)  Тогда
		Агент=Клиент.Агент;
	КонецЕсли;
	
	Если ТипУчета = Фин Тогда Возврат; КонецЕсли;
	Если ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка Тогда
		

		Позиция=СформироватьПозициюДокумента(ТекущийДокумент(),0);
		ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");
		//Соединение2=" INNER JOIN (SELECT DISTINCT $Док.Товар as Товар2 FROM $ДокументСтроки."+Вид()+" Док (NOLOCK) WHERE IDDOC=:ВыбДок) Док ON Док.Товар2 = Товар ";
		//Условие = "Товар IN (SELECT $Док.Товар FROM $ДокументСтроки."+Вид()+" Док (NOLOCK) WHERE IDDOC=:ВыбДок)";
		Условие="";
		
		ТекстЗапроса="SELECT РезервыТоваровОстатки.Товар [Товар $Справочник.Номенклатура]
		|					, РезервыТоваровОстатки.РезервТовараОстаток Резерв
		|			  FROM $РегистрОстатки.РезервыТоваров("+?(ИтогиАктуальны()=1,"",":Позиция~")+",INNER JOIN $Документ.Счет ДокС (NOLOCK) ON ДокС.IDDOC = ПоСчету AND $ДокС.Склад = :ВыбСклад
		|																						   INNER JOIN (SELECT DISTINCT $Док.Товар as Товар2 FROM $ДокументСтроки."+Вид()+" Док (NOLOCK) WHERE IDDOC=:ВыбДок) Док ON Док.Товар2 = Товар,
		|													"+Условие+",
		|												(Товар),) AS РезервыТоваровОстатки
		|";
		
		ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДок", ТекущийДокумент());
		ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбСклад",Склад);
		ЗапросСКЛ.УстановитьТекстовыйПараметр("Позиция", Позиция);
		итТаблРезервы=СоздатьОбъект("ИндексированнаяТаблица");
		ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итТаблРезервы);
		итТаблРезервы.ДобавитьИндекс("иТовар","*Товар");

		ДопУсловие="AND (Склад = :ВыбСклад)";
		ТекстЗапроса="SELECT ОстаткиТоваровОстатки.Товар [Товар $Справочник.Номенклатура]
		|					, ОстаткиТоваровОстатки.ОстатокТовараОстаток Остаток
		|			  FROM $РегистрОстатки.ОстаткиТоваров("+?(ИтогиАктуальны()=1,"",":Позиция~")+",,
		|												Товар IN (SELECT $Док.Товар FROM $ДокументСтроки."+Вид()+" Док (NOLOCK) WHERE IDDOC=:ВыбДок)
		|												"+ДопУсловие+",
		|												Товар,) AS ОстаткиТоваровОстатки";
		//|			  UNION ALL
		//|			  SELECT НедоступныеТоварыОстатки.Товар [Товар $Справочник.Номенклатура]
		//|					, -1*НедоступныеТоварыОстатки.ОстатокТовараОстаток Остаток
		//|			  FROM $РегистрОстатки.НедоступныеТовары("+?(ИтогиАктуальны()=1,"",":Позиция~")+",,
		//|												Товар IN (SELECT $Док.Товар FROM $ДокументСтроки."+Вид()+" Док (NOLOCK) WHERE IDDOC=:ВыбДок)
		//|												,
		//|												Товар,) AS НедоступныеТоварыОстатки";
		ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбСклад",Склад);
		ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДок", ТекущийДокумент());
		ЗапросСКЛ.УстановитьТекстовыйПараметр("Позиция", Позиция );
		итТаблОстатки=СоздатьОбъект("ИндексированнаяТаблица");
		ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итТаблОстатки);
		итТаблОстатки.ДобавитьИндекс("иТовар","*Товар");
		итТаблОстатки.Свернуть("Товар","Остаток","иТовар");
		
		//{Формируем запрос для брони расчитываем резервы товаров в брони		
		Если (флагБронирования=1) Тогда
							
			Позиция=СформироватьПозициюДокумента(ТекущийДокумент(),1);
			ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");
			Условие = "Товар IN (SELECT $Док.Товар FROM $ДокументСтроки."+Вид()+" Док (NOLOCK) WHERE IDDOC=:ВыбДок) AND ПоСчету = :ВыбДок";
			
			ТекстЗапроса="SELECT РезервыТоваровОстатки.Товар [Товар $Справочник.Номенклатура]
			|					, РезервыТоваровОстатки.РезервТовараОстаток Резерв
			|			  FROM $РегистрОстатки.РезервыТоваров("+?(ИтогиАктуальны()=1,"",":Позиция~")+",,
			|													"+Условие+",
			|												(Товар),) AS РезервыТоваровОстатки
			|";
			
			ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДок", ДокументОснование);
			ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбСклад",ДокументОснование.Склад);
			ЗапросСКЛ.УстановитьТекстовыйПараметр("Позиция", Позиция);
			итТаблРезервыБрони=СоздатьОбъект("ИндексированнаяТаблица");
			ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итТаблРезервыБрони);
			итТаблРезервыБрони.ДобавитьИндекс("иТовар","*Товар");

//}Формируем запрос для брони, расчитываем резервы товаров			

		КонецЕсли;

		
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Если Товар.Выбран() = 0 Тогда
				Сообщить("В документе "+Вид()+" № "+НомерДок+" от "+ДатаДок+"Не указан товар, который выписывается!", "I");
				Продолжить;
			КонецЕсли;
			
			//только при проведении в интерактивном режиме меняем кол-во резерва, чтобы не образовывались минусовые резервы
			Если ГрупповаяОбработка()=0 Тогда 
				
				итТаблРезервы.УстановитьФильтр(Товар,Товар,"иТовар");
				текРезерв=итТаблРезервы.Итог("Резерв","иТовар");

				итТаблОстатки.УстановитьФильтр(Товар,Товар,"иТовар");
				текОстаток=итТаблОстатки.Итог("Остаток","иТовар");
				
			КонецЕсли;
				
//{бронирование расчет движения по регистру

			Если флагБронирования=1 Тогда
				итТаблРезервыБрони.УстановитьФильтр(Товар,Товар,"иТовар");
			//	итТаблРезервыБрони.Показать();
				Рез=итТаблРезервыБрони.Итог("Резерв","иТовар");
				Если ГрупповаяОбработка()=0 Тогда
					Если Рез=0 Тогда
						НеПроводить(Контекст,"Нет резерва для брони!"); 
						Возврат;
					КонецЕсли;
				КонецЕсли;
				Если Количество>Рез Тогда
					пБроньСнятие=Рез*Коэффициент;
				Иначе
					пБроньСнятие=Количество*Коэффициент;
				КонецЕсли;
			
				Регистр.РезервыТоваров.ПривязыватьСтроку(НомерСтроки);
				Регистр.РезервыТоваров.Товар=Товар;
				Регистр.РезервыТоваров.ПоСчету=ДокументОснование;
				Регистр.РезервыТоваров.РезервТовара=Рез; //пБроньСнятие
				Регистр.РезервыТоваров.ДвижениеРасходВыполнить();  
				
				Если (Рез-Количество)<=0 Тогда
					флагСчетНуляБрони=флагСчетНуляБрони+1;//забронированого товара заказали больше чем в брони с учетом остатка
				КонецЕсли;
						
				пБронированиеЕсть=Рез*Коэффициент;
			Иначе
				пБронированиеЕсть=0;//переменая добавляет
			КонецЕсли;
				
//}Бронирование ввод движение по регистру.	
				
			Если ГрупповаяОбработка()=0 Тогда //меняем только при интерактивном проведении

				СвОст = Макс( текОстаток - текРезерв+пБронированиеЕсть, пБронированиеЕсть );
				промКолво = Количество*Коэффициент;
				Если (КлиентФилиала = Клиент) И (Фирма=Константа.ОсновнаяФирма)  Тогда
					// для электронок пришедших на филиал из центра не проверяем остаток
					Резерв = промКолво/Коэффициент;
				ИначеЕсли СвОст < промКолво Тогда
					Если ГрупповаяОбработка()=0 Тогда
						Сообщить("На складе "+Склад+" нет свободного остатка товара "
						+Товар.Код+" "+Товар.Наименование + " для резервирования!");
						Сообщить("           Свободный остаток: "+СвОст+" "+Товар.БазоваяЕдиницаИзмерения+"."); 
						Сообщить("      Необходимое количесвто: "+промКолво+" "+Товар.БазоваяЕдиницаИзмерения+".");  
						Сообщить("Зарезервированное количесвто: "+СвОст+" "+Товар.БазоваяЕдиницаИзмерения+"."); 
						Сообщить("Осталось незарезервированным: "+(промКолво-СвОст)+" "+Товар.БазоваяЕдиницаИзмерения+".");
						Сообщить("-------------------------------------------------------------------------------");
						
						Если (Склад.ТипСклада = Перечисление.ТипыСкладов.СкладРаспродажи) И (СвОст<=0) Тогда
							НеПроводить(Контекст,"Нельзя размещать заявку с данного склада при 0 остатке");
						КонецЕсли;
					КонецЕсли;
					Резерв = СвОст/Коэффициент;
				Иначе
					Резерв = промКолво/Коэффициент;
				КонецЕсли;				
				
			КонецЕсли;
			
			Если Резерв = 0 Тогда Продолжить;  КонецЕсли;
			Регистр.РезервыТоваров.ПривязыватьСтроку(НомерСтроки);
			Регистр.РезервыТоваров.Товар=Товар;
			Регистр.РезервыТоваров.ПоСчету=ТекущийДокумент();
			Регистр.РезервыТоваров.РезервТовара=Резерв*Коэффициент;
			Регистр.РезервыТоваров.ДвижениеПриходВыполнить();  
		КонецЦикла;
	ИначеЕсли ВидЗаявки = Перечисление.ВидыЗаявок.СпецЗаказ Тогда
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Если Товар.Выбран() = 0 Тогда 
				Сообщить("В документе "+Вид()+" № "+НомерДок+" от "+ДатаДок+"Не указан товар, который выписывается!");
				Продолжить;
			КонецЕсли;
			Регистр.СпецЗаказы.ПривязыватьСтроку( НомерСтроки );
			Регистр.СпецЗаказы.Товар = Товар;
			Регистр.СпецЗаказы.ПоСчету = ТекущийДокумент(); 
			Регистр.СпецЗаказы.Заказано = Количество * Коэффициент;
			Регистр.СпецЗаказы.ДвижениеПриходВыполнить();
		КонецЦикла;
	ИначеЕсли ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаНаВозврат Тогда
//}	 до бронирования	
			МестоКомплектации=Склад.МестоКомплектации;
//			КонецЕсли; 
	
			Регистр.КомплектацияЗаявок.ДатаПоставки=ДатаПоставки;
			Регистр.КомплектацияЗаявок.ПоСчету=ТекущийДокумент();
			Регистр.КомплектацияЗаявок.ВидЗаявки=ВидЗаявки;
			Регистр.КомплектацияЗаявок.МестоКомплектации=МестоКомплектации;
			Регистр.КомплектацияЗаявок.Склад=Склад;
			Регистр.КомплектацияЗаявок.ВидДоставки=ВидДоставки;
			Регистр.КомплектацияЗаявок.Статус=5;
			Регистр.КомплектацияЗаявок.Количество=1;
			Регистр.КомплектацияЗаявок.ДвижениеПриходВыполнить();

	ИначеЕсли ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
//{обработка бронирования

//{Бронь в пути
		Если фБроньвпути=1 Тогда
			
			Если ДокументПривязки.Выбран()=0 Тогда
				НеПроводить(Контекст,"Не выбран Документ Привязки !");
				Возврат;
			КонецЕсли;
			
			Если (ГрупповаяОбработка()=0)И(ДатаПоставки<(ДокументПривязки.ДатаПрихода+ДокументПривязки.Клиент.ДнейНаПодготовку)) Тогда
				НеПроводить(Контекст,"Дата поставки клиенту меньше даты Прихода товара на Склад");
				Возврат;
			КонецЕсли;	
			
//{запрос

			Позиция=СформироватьПозициюДокумента(ТекущийДокумент(),1);
			ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");
			
			//ТекстЗапроса="SELECT ЗаказыПоставщикамОстатки.Товар [Товар $Справочник.Номенклатура]
			//|						, ЗаказыПоставщикамОстатки.КоличествоОстаток Остаток
			//|FROM $РегистрОстатки.ЗаказыПоставщикам("+?(ИтогиАктуальны()=1,"",":Позиция~")+",,(Товар IN (
			//|	SELECT $СчетСтроки.Товар [Товар $Справочник.Номенклатура]
			//|	FROM $ДокументСтроки.Счет AS СчетСтроки (NOLOCK)
			//|	WHERE (СчетСтроки.IDDOC = :ВыбДок))) 
			//|	AND (ПоЗаказу = $ВидДокумента36.ЗаказПоставщику + :ПоЗаказу),(Товар),) AS ЗаказыПоставщикамОстатки";

			//ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДок", ТекущийДокумент());
			//ЗапросСКЛ.УстановитьТекстовыйПараметр("ПоЗаказу", ДокументПривязки);
			//ЗапросСКЛ.УстановитьТекстовыйПараметр("Позиция", Позиция);
			//итТаблОстатки=СоздатьОбъект("ИндексированнаяТаблица");
			//ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итТаблОстатки);
			//итТаблОстатки.ДобавитьИндекс("иТовар","*Товар");
			//итТаблОстатки.Показать();
			//
			ТекстЗапроса="SELECT ЗаказыПоставщикамОстатки.Товар [Товар $Справочник.Номенклатура]
			|						, ЗаказыПоставщикамОстатки.КоличествоОстаток Остаток
			|FROM $РегистрОстатки.ТоварыВПути("+?(ИтогиАктуальны()=1,"",":Позиция~")+",,(Товар IN (
			|	SELECT $СчетСтроки.Товар [Товар $Справочник.Номенклатура]
			|	FROM $ДокументСтроки.Счет AS СчетСтроки (NOLOCK)
			|	WHERE (СчетСтроки.IDDOC = :ВыбДок))) 
			|	AND (Док = $ВидДокумента36.ОжидаемаяПоставка + :ПоЗаказу),(Товар),) AS ЗаказыПоставщикамОстатки";

			
			ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДок", ТекущийДокумент());
			ЗапросСКЛ.УстановитьТекстовыйПараметр("ПоЗаказу", ДокументПривязки);
			ЗапросСКЛ.УстановитьТекстовыйПараметр("Позиция", Позиция);
			итТаблОстатки=СоздатьОбъект("ИндексированнаяТаблица");
			ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итТаблОстатки);
			итТаблОстатки.ДобавитьИндекс("иТовар","*Товар");
			//итТаблОстатки.Показать();

			//ТекстЗапроса="SELECT ЗаказыПоставщикамЗаявкиОстатки.Товар [Товар $Справочник.Номенклатура]
			//|					, ЗаказыПоставщикамЗаявкиОстатки.КоличествоОстаток Резерв
			//|FROM $РегистрОстатки.ЗаказыПоставщикамЗаявки("+?(ИтогиАктуальны()=1,"",":Позиция~")+",,(Товар IN (
			//|	SELECT $СчетСтроки.Товар [Товар $Справочник.Номенклатура]
			//|	FROM $ДокументСтроки.Счет AS СчетСтроки (NOLOCK)
			//|	WHERE (СчетСтроки.IDDOC = :ВыбДок)))
			//|  	AND (ПоЗаказу = $ВидДокумента36.ЗаказПоставщику + :ПоЗаказу),(Товар),) AS ЗаказыПоставщикамЗаявкиОстатки";
			//
			//ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДок", ТекущийДокумент());
			//ЗапросСКЛ.УстановитьТекстовыйПараметр("ПоЗаказу", ДокументПривязки);
			//ЗапросСКЛ.УстановитьТекстовыйПараметр("Позиция", Позиция );
			//итТаблРезервы=СоздатьОбъект("ИндексированнаяТаблица");
			//ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итТаблРезервы);
			//итТаблРезервы.ДобавитьИндекс("иТовар","*Товар");			
			//итТаблРезервы.Показать();

			ТекстЗапроса="SELECT ЗаказыПоставщикамЗаявкиОстатки.Товар [Товар $Справочник.Номенклатура]
			|					, ЗаказыПоставщикамЗаявкиОстатки.КоличествоОстаток Резерв
			|FROM $РегистрОстатки.ЗаказыПоставщикамЗаявки("+?(ИтогиАктуальны()=1,"",":Позиция~")+",,(Товар IN (
			|	SELECT $СчетСтроки.Товар [Товар $Справочник.Номенклатура]
			|	FROM $ДокументСтроки.Счет AS СчетСтроки (NOLOCK)
			|	WHERE (СчетСтроки.IDDOC = :ВыбДок)))
			|  	AND (ПоЗаказу = $ВидДокумента36.ОжидаемаяПоставка + :ПоЗаказу),(Товар),) AS ЗаказыПоставщикамЗаявкиОстатки";
			
			ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДок", ТекущийДокумент());
			ЗапросСКЛ.УстановитьТекстовыйПараметр("ПоЗаказу", ДокументПривязки);
			ЗапросСКЛ.УстановитьТекстовыйПараметр("Позиция", Позиция );
			итТаблРезервы=СоздатьОбъект("ИндексированнаяТаблица");
			ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итТаблРезервы);
			итТаблРезервы.ДобавитьИндекс("иТовар","*Товар");			
			//итТаблРезервы.Показать();			
//}запрос
			ВыбратьСтроки();
			Пока ПолучитьСтроку() = 1 Цикл
				
				Если Товар.Выбран() = 0 Тогда
					НеПроводить(Контекст,"В документе "+Вид()+" № "+НомерДок+" от "+ДатаДок+"Не указан товар, который выписывается!");
					Возврат;
				КонецЕсли;
				
				Если МинСрокРеализ = "" Тогда
					НеПроводить(Контекст,"Не указан Минимальный Срок реализации товара:"+Товар+" !");
					Возврат;
				КонецЕсли;
				
				Если ГрупповаяОбработка()=0 Тогда 
				
					итТаблОстатки.УстановитьФильтр(Товар,Товар,"иТовар");
					текОстаток=итТаблОстатки.Итог("Остаток","иТовар");
					
					итТаблРезервы.УстановитьФильтр(Товар,Товар,"иТовар");
					текРезерв=итТаблРезервы.Итог("Резерв","иТовар");

					пОстаток=текОстаток - текРезерв;

// Тот же Запрос через регистры.					
//					рез=Регистр.ЗаказыПоставщикамЗаявки.СводныйОстаток(Товар,ДокументПривязки,,"Количество");
//					пОстаток=Регистр.ЗаказыПоставщикам.СводныйОстаток(Товар,,,,ДокументПривязки,"Количество")-рез;

					СвОст = Макс(пОстаток, 0 );
					Если СвОст=0 Тогда
						НеПроводить(Контекст,"Бронирование запрещено. Товара:"+Товар+"  нет в заказах или остатках в заказе у поставщика: "+ДокументПривязки+" !");
						Возврат;
					КонецЕсли;
				
					промКолво = Количество*Коэффициент;
					
					Если СвОст < промКолво Тогда
						Если ГрупповаяОбработка()=0 Тогда
							НеПроводить(Контекст,"Бронирование запрещено. Товара нет в заказах у поставщика !");
							Возврат;					
						КонецЕсли;
						Резерв = СвОст/Коэффициент;
					Иначе
						Резерв = промКолво/Коэффициент;
					КонецЕсли;				
					
				КонецЕсли;
				
				Если Резерв = 0 Тогда Продолжить;  КонецЕсли;

				Рег=Регистр.ЗаказыПоставщикамЗаявки;
				Рег.Товар=Товар;
				Рег.ПоЗаказу=ДокументПривязки; 
				Рег.ПоСчету=ТекущийДокумент(); 
				Рег.ПривязыватьСтроку(НомерСтроки);
				Рег.Количество=Резерв*Коэффициент;
				Рег.ДвижениеПриходВыполнить();
			КонецЦикла;	
//}Бронь в пути		
		Иначе
			
			Позиция=СформироватьПозициюДокумента(ТекущийДокумент(),0);
			ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");
			Условие = "Товар IN (SELECT $Док.Товар FROM $ДокументСтроки."+Вид()+" Док (NOLOCK) WHERE IDDOC=:ВыбДок)";
			
			ТекстЗапроса="SELECT РезервыТоваровОстатки.Товар [Товар $Справочник.Номенклатура]
			|					, РезервыТоваровОстатки.РезервТовараОстаток Резерв
			|			  FROM $РегистрОстатки.РезервыТоваров("+?(ИтогиАктуальны()=1,"",":Позиция~")+",INNER JOIN $Документ.Счет ДокС (NOLOCK) ON ДокС.IDDOC = ПоСчету AND $ДокС.Склад = :ВыбСклад,
			|													"+Условие+",
			|												(Товар),) AS РезервыТоваровОстатки
			|";
			
			ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДок", ТекущийДокумент());
			ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбСклад",Склад);
			ЗапросСКЛ.УстановитьТекстовыйПараметр("Позиция", Позиция);
			итТаблРезервы=СоздатьОбъект("ИндексированнаяТаблица");
			ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итТаблРезервы);
			итТаблРезервы.ДобавитьИндекс("иТовар","*Товар");
	
			ДопУсловие="AND (Склад = :ВыбСклад)";
			ТекстЗапроса="SELECT ОстаткиТоваровОстатки.Товар [Товар $Справочник.Номенклатура]
			|					, ОстаткиТоваровОстатки.ОстатокТовараОстаток Остаток
			|			  FROM $РегистрОстатки.ОстаткиТоваров("+?(ИтогиАктуальны()=1,"",":Позиция~")+",,
			|												Товар IN (SELECT $Док.Товар FROM $ДокументСтроки."+Вид()+" Док (NOLOCK) WHERE IDDOC=:ВыбДок)
			|												"+ДопУсловие+",
			|												Товар,) AS ОстаткиТоваровОстатки		
			|";
			ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбСклад",Склад);
			ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДок", ТекущийДокумент());
			ЗапросСКЛ.УстановитьТекстовыйПараметр("Позиция", Позиция );
			итТаблОстатки=СоздатьОбъект("ИндексированнаяТаблица");
			ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итТаблОстатки);
			итТаблОстатки.ДобавитьИндекс("иТовар","*Товар");
				
		
			ВыбратьСтроки();
			Пока ПолучитьСтроку() = 1 Цикл
				Если Товар.Выбран() = 0 Тогда
					Сообщить("В документе "+Вид()+" № "+НомерДок+" от "+ДатаДок+"Не указан товар, который выписывается!", "I");
					Продолжить;
				КонецЕсли;
				
				Если МинСрокРеализ = "" Тогда
					НеПроводить(Контекст,"Не указан Минимальный Срок реализации товара !");
					Возврат;
				КонецЕсли;
				
				//только при проведении в интерактивном режиме меняем кол-во резерва, чтобы не образовывались минусовые резервы
				Если ГрупповаяОбработка()=0 Тогда 
					
					итТаблРезервы.УстановитьФильтр(Товар,Товар,"иТовар");
					текРезерв=итТаблРезервы.Итог("Резерв","иТовар");
	
					итТаблОстатки.УстановитьФильтр(Товар,Товар,"иТовар");
					текОстаток=итТаблОстатки.Итог("Остаток","иТовар");
					
					//текРезерв = регРезервы.СводныйОстаток(Товар,,"РезервТовара");
					//текОстаток = регОстатки.Остаток(Товар,Склад,"ОстатокТовара");
					СвОст = Макс( текОстаток - текРезерв, 0 );
					промКолво = Количество*Коэффициент;
					Если (КлиентФилиала = Клиент) И (Фирма=Константа.ОсновнаяФирма)  Тогда
						// для электронок пришедших на филиал из центра не проверяем остаток
						Резерв = промКолво/Коэффициент;
					ИначеЕсли СвОст < промКолво Тогда
						Если ГрупповаяОбработка()=0 Тогда
							Сообщить("На складе "+Склад+" нет свободного остатка товара "
							+Товар.Код+" "+Товар.Наименование + " для резервирования!");
							Сообщить("           Свободный остаток: "+СвОст+" "+Товар.БазоваяЕдиницаИзмерения+"."); 
							Сообщить("      Необходимое количесвто: "+промКолво+" "+Товар.БазоваяЕдиницаИзмерения+".");  
							НеПроводить(Контекст,"Товар нельзя забронировать свыше Остатков !");
							Возврат;					
		
						КонецЕсли;
						Резерв = СвОст/Коэффициент;
					Иначе
						Резерв = промКолво/Коэффициент;
					КонецЕсли;				
					
				КонецЕсли;
				
				Если Резерв = 0 Тогда Продолжить;  КонецЕсли;
				Регистр.РезервыТоваров.ПривязыватьСтроку(НомерСтроки);
				Регистр.РезервыТоваров.Товар=Товар;
				Регистр.РезервыТоваров.ПоСчету=ТекущийДокумент(); 
				Регистр.РезервыТоваров.РезервТовара=Резерв*Коэффициент;
				Регистр.РезервыТоваров.ДвижениеПриходВыполнить();  
			КонецЦикла;	
		КонецЕсли;	
	//}обработка бронирования	
		
	//{***Обобщение заявки***\\
	ИначеЕсли ВидЗаявки = Перечисление.ВидыЗаявок.ОбобщеннаяЗаявка Тогда
		
		Регистр.КомплектацияЗаявок.ДатаПоставки=ДатаПоставки;
		Регистр.КомплектацияЗаявок.ПоСчету=ТекущийДокумент();
		Регистр.КомплектацияЗаявок.ВидЗаявки=ВидЗаявки;
		Регистр.КомплектацияЗаявок.МестоКомплектации=МестоКомплектации;
		Регистр.КомплектацияЗаявок.Склад=Склад;
		Регистр.КомплектацияЗаявок.ВидДоставки=ВидДоставки;
		Если КоличествоСтрок()=0 Тогда
			Регистр.КомплектацияЗаявок.Статус=1;
		Иначе
			Регистр.КомплектацияЗаявок.Статус=40;
		КонецЕсли;
		Регистр.КомплектацияЗаявок.Количество=1;
		Регистр.КомплектацияЗаявок.ДвижениеПриходВыполнить();
		
		
		Если КоличествоСтрок()=0 Тогда
			Регистр.КомплектацияЗаявок.ДатаПоставки=ДатаПоставки;
			Регистр.КомплектацияЗаявок.ПоСчету=ТекущийДокумент();
			Регистр.КомплектацияЗаявок.ВидЗаявки=ВидЗаявки;
			Регистр.КомплектацияЗаявок.МестоКомплектации=МестоКомплектации;
			Регистр.КомплектацияЗаявок.Склад=Склад;
			Регистр.КомплектацияЗаявок.ВидДоставки=ВидДоставки;
			Регистр.КомплектацияЗаявок.Статус=1;
			Регистр.КомплектацияЗаявок.Количество=1;
			Регистр.КомплектацияЗаявок.ДвижениеРасходВыполнить();	
		КонецЕсли;
		
		
		
		
	//}***Обобщение заявки***\\	
	КонецЕсли;

	
		
	//прописываем в регистр комплектцаций для последующей обработки на месте комплектации
	// для заявок пришедших из центра - также прописываем комплектацию, независимо от склада
	Если ((ПустоеЗначение(Склад.МестоКомплектации)=0) И ((ДатаПоставки> '27.10.09') ИЛИ ((ПризнакПечати=0) И (ДатаПоставки<= '27.10.09')))) ИЛИ ((КлиентФилиала = Клиент) И (Фирма=Константа.ОсновнаяФирма))  Тогда
		Если (ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка) ИЛИ (ВидЗаявки = Перечисление.ВидыЗаявок.СпецЗаказ) 
		ИЛИ (ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаБронь) ИЛИ ((ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаНаВозврат) И (Клиент.ВидКлиента = Перечисление.ВидыКлиентов.Поставщик)) Тогда
//			Если ПустоеЗначение(МестоКомплектации)=1 Тогда
				МестоКомплектации=Склад.МестоКомплектации;
//			КонецЕсли; 
	
			Регистр.КомплектацияЗаявок.ДатаПоставки=ДатаПоставки;
			Регистр.КомплектацияЗаявок.ПоСчету=ТекущийДокумент();
			Регистр.КомплектацияЗаявок.ВидЗаявки=ВидЗаявки;
			Регистр.КомплектацияЗаявок.МестоКомплектации=МестоКомплектации;
			Регистр.КомплектацияЗаявок.Склад=Склад;
			Регистр.КомплектацияЗаявок.ВидДоставки=ВидДоставки;
//{бронирование, изменение статуса			
			Если ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
				Если фБроньвпути=1 Тогда
					Регистр.КомплектацияЗаявок.Статус=31;
				Иначе
					Регистр.КомплектацияЗаявок.Статус=21;
				КонецЕсли;	
				
			Иначе
				Если семПроблемаСРезервом()=1 Тогда
					Регистр.КомплектацияЗаявок.Статус=1;//13
				Иначе
					Регистр.КомплектацияЗаявок.Статус=1;
				КонецЕсли;
			КонецЕсли;
//}бронирование, изменение статуса			
			Регистр.КомплектацияЗаявок.Количество=1;
			Регистр.КомплектацияЗаявок.ДвижениеПриходВыполнить();

			Если КоличествоСтрок()=0 Тогда
				Регистр.КомплектацияЗаявок.ДвижениеРасходВыполнить();
			КонецЕсли;

			//для проведения на филиале - ставим сразу следующий статус - после предв. комплектации
			Если ((КлиентФилиала = Клиент)	И (Фирма=Константа.ОсновнаяФирма)) Тогда
				Если  Клиент.ПризнакОбобщения = 1 Тогда
					Если КоличествоСтрок()=0 Тогда
					Иначе
						Регистр.КомплектацияЗаявок.ДвижениеРасходВыполнить();//снимаем предыдущий статус
					КонецЕсли;
					Если ДатаПоставки>'05.10.15' Тогда
						
						Если семПроблемаСРезервом()=1 Тогда
							Регистр.КомплектацияЗаявок.Статус=1;//13
						Иначе
							Регистр.КомплектацияЗаявок.Статус=1;
						КонецЕсли;
						
						
						
					Иначе
						Регистр.КомплектацияЗаявок.Статус=2;
					КонецЕсли;
	
					Регистр.КомплектацияЗаявок.ДвижениеПриходВыполнить();
				КонецЕсли;
				
			КонецЕсли;

			
		КонецЕсли;
	КонецЕсли;
	
	
	Если (флагБронирования=1) И (флагСчетНуляБрони>0) Тогда
	
	
			Позиция=СформироватьПозициюДокумента(ТекущийДокумент(),1);
			ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");
			Условие = "Товар IN (SELECT $Док.Товар FROM $ДокументСтроки."+Вид()+" Док (NOLOCK) WHERE IDDOC=:ВыбДок) AND ПоСчету = :ВыбДок";
			
			ТекстЗапроса="SELECT РезервыТоваровОстатки.Товар [Товар $Справочник.Номенклатура]
			|					, РезервыТоваровОстатки.РезервТовараОстаток Резерв
			|			  FROM $РегистрОстатки.РезервыТоваров("+?(ИтогиАктуальны()=1,"",":Позиция~")+",,
			|													"+Условие+",
			|												(Товар),) AS РезервыТоваровОстатки
			|";
			
			ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДок", ДокументОснование);
			ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбСклад",ДокументОснование.Склад);
			ЗапросСКЛ.УстановитьТекстовыйПараметр("Позиция", Позиция);
			итТаблРезервы=СоздатьОбъект("ИндексированнаяТаблица");
			ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итТаблРезервы);
			итТаблРезервы.ДобавитьИндекс("иТовар","*Товар");
			//итТаблРезервы.Показать();
			
		флагСчетНуляБрониДокОсн=0;
		
		
			ДокументОснование.ВыбратьСтроки();
			Пока ДокументОснование.ПолучитьСтроку() = 1 Цикл
	
				итТаблРезервы.УстановитьФильтр(ДокументОснование.Товар,ДокументОснование.Товар,"иТовар");
				Рез=итТаблРезервы.Итог("Резерв","иТовар");
				
	//			Рез=Регистр.РезервыТоваров.СводныйОстаток(ДокументОснование.Товар,ДокументОснование,"РезервТовара");	
				Если Рез<=0 Тогда
					флагСчетНуляБрониДокОсн=флагСчетНуляБрониДокОсн+1;
				КонецЕсли;
			КонецЦикла;			
			
		
	
//		Если ДокументОснование.КоличествоСтрок()=флагСчетНуляБрониДокОсн Тогда
			РегКомпл=СоздатьОбъект("Регистр.КомплектацияЗаявок");
			РегКомпл.УстановитьЗначениеФильтра("ПоСчету",ДокументОснование,1);
		//	РегКомпл.УстановитьЗначениеФильтра("Статус",2,1);
			таблКомпл=СоздатьОбъект("ТаблицаЗначений");
			РегКомпл.ВыгрузитьИтоги(таблКомпл,1,1);
			таблКомпл.ВыбратьСтроки();
			Пока таблКомпл.ПолучитьСтроку() = 1 Цикл
				Регистр.КомплектацияЗаявок.ПривязыватьСтроку(0);
				Регистр.КомплектацияЗаявок.ДатаПоставки = таблКомпл.ДатаПоставки;
				Регистр.КомплектацияЗаявок.ПоСчету = таблКомпл.ПоСчету;
				Регистр.КомплектацияЗаявок.МестоКомплектации = таблКомпл.МестоКомплектации;
				Регистр.КомплектацияЗаявок.Склад = таблКомпл.Склад ;
				Регистр.КомплектацияЗаявок.ВидЗаявки = таблКомпл.ВидЗаявки ;
				Регистр.КомплектацияЗаявок.ВидДоставки = таблКомпл.ВидДоставки ;
				Регистр.КомплектацияЗаявок.Товар = таблКомпл.Товар ;
				Регистр.КомплектацияЗаявок.Статус = таблКомпл.Статус;
				Регистр.КомплектацияЗаявок.Количество = таблКомпл.Количество;
				Регистр.КомплектацияЗаявок.ДвижениеРасходВыполнить();
			КонецЦикла;
//		КонецЕсли;
	КонецЕсли;
	
	Если ГрупповаяОбработка()=0 Тогда
		
		Если ВидЗаявки = Перечисление.ВидыЗаявок.СпецЗаказ Тогда
			ПроверкаЗаказовПоставщиков();
		КонецЕсли;
		
		спПроведениеДок = СоздатьОбъект("СписокЗначений");
		спПроведениеДок.ДобавитьЗначение(ТекущийДокумент(),"Счет");
		ОбработкаОжидания("глПроведениеКомплектацийПоЗаявке",5);

		
		
	КонецЕсли;

	//если есть претензия тогда пишем в регистр претензий
	Если ПустоеЗначение(СутьПретензии)=0 Тогда
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
			Регистр.ПретензииПолученные.ПривязыватьСтроку(НомерСтроки);
			Регистр.ПретензииПолученные.Фирма = Фирма;
			Регистр.ПретензииПолученные.Товар = Товар;
			Регистр.ПретензииПолученные.СутьПретензии = СутьПретензии;
			Регистр.ПретензииПолученные.СутьПретензииПодтв = СутьПретензии;
			Регистр.ПретензииПолученные.Агент = Агент;
			Регистр.ПретензииПолученные.Клиент = Клиент;
			Регистр.ПретензииПолученные.КлиентФилиала = КлиентФилиала;
			Регистр.ПретензииПолученные.Поставщик = "";
			Регистр.ПретензииПолученные.ПоСчету = ТекущийДокумент();
			Регистр.ПретензииПолученные.ПоДокументу = ТекущийДокумент();
			Регистр.ПретензииПолученные.Количество = Количество;
			Регистр.ПретензииПолученные.Сумма = Сумма;
			
			Регистр.ПретензииПолученные.ПретензияПолучена = 1;
			Регистр.ПретензииПолученные.СуммаПотерь = "";
			Регистр.ПретензииПолученные.ДвижениеВыполнить();
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПустоеЗначение(АдресДоставки)=1 Тогда
		Если ПустоеЗначение(КлиентФилиала)=0 Тогда
			АдресДоставки = КлиентФилиала.АдресДоставки;
			АдресДоставкиДоп = КлиентФилиала.АдресДоставкиДоп;
		Иначе
			АдресДоставки = Клиент.АдресДоставки;
			АдресДоставкиДоп = Клиент.АдресДоставкиДоп;
		КонецЕсли;
	КонецЕсли;
	
	
	Если ПустоеЗначение(МаршрутДоставкиГрафик)=0 Тогда
		Маршрут = СокрЛП(МаршрутДоставкиГрафик.Наименование);
		МаршрутНаправление = МаршрутДоставкиГрафик.Направление;
	ИначеЕсли (ПустоеЗначение(КлиентФилиала)=0) И (КлиентФилиала<>Клиент) Тогда
		Маршрут = СокрЛП(АдресДоставки.Маршрут.Описание);
		МаршрутНаправление = АдресДоставки.Маршрут.Направление;
	Иначе
		Маршрут = СокрЛП(АдресДоставки.Маршрут.Описание);
        	МаршрутНаправление = АдресДоставки.Маршрут.Направление;
	КонецЕсли;

	Если (ПустоеЗначение(АдресДоставки.Маршрут.ГрафикПоУмолчанию)=0) И (ПустоеЗначение(МаршрутДоставкиГрафик)=1) Тогда
		//заполняем график доставки значением по умолчанию
		МаршрутДоставкиГрафик = АдресДоставки.Маршрут.ГрафикПоУмолчанию;
	КонецЕсли;
	
	
	Если ДокументОснование.Вид()="Служ_Основания" Тогда
		ДокументОснование.ВыбратьСтроки();
		Пока ДокументОснование.ПолучитьСтроку() = 1 Цикл
			ОчисткаСтатуса(ДокументОснование.ДокОснование,40);
		КонецЦикла;
	КонецЕсли;

	//прописываем самую первую дату поставки
	Если (ПустоеЗначение(ДатаПоставкиНач)=1) Тогда
		ДатаПоставкиНач = ДатаПоставки;
	КонецЕсли;                              
	
	СпрСост = СоздатьОбъект("Справочник.БлокировкиДок");
	СпрСост.НайтиПоРеквизиту("Док",ТекущийДокумент(),0);

	Если СпрСост.Выбран()=1 Тогда
		Если СпрСост.Блокировка=1 Тогда
			СпрСост.Блокировка=0;
		КонецЕсли;
		СпрСост.Записать();
	КонецЕсли;	
	
	//нулевой резерв
	Если ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка Тогда
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Если Резерв=0 Тогда
				Регистр.ОтложеннаяКомплектация.ПривязыватьСтроку(НомерСтроки);
				Регистр.ОтложеннаяКомплектация.Товар=Товар;
				Регистр.ОтложеннаяКомплектация.Склад=Склад;
				Регистр.ОтложеннаяКомплектация.ДатаПоставки=ДатаПоставки;
				Регистр.ОтложеннаяКомплектация.Док=ТекущийДокумент();
				Регистр.ОтложеннаяКомплектация.ДокОснование=ДокументОснование;
				Регистр.ОтложеннаяКомплектация.Количество=Количество;
				Регистр.ОтложеннаяКомплектация.ДвижениеПриходВыполнить();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	
КонецПроцедуры

//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения(п_Знач=0)
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеМОД(Контекст)=1 Тогда
		Возврат;
	КонецЕсли;
	стар_ОбработкаПроведения(п_Знач);
КонецПроцедуры

Процедура стар_ОбработкаУдаленияПроведения()
	//док = СоздатьОбъект("Документ");
	
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаУдаленияПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеПоАлгоритмуМОД=1 Тогда
		Возврат;
	КонецЕсли;
	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
	ПриОтменеПроведенияДокумента(ТекущийДокумент());
	стар_ОбработкаУдаленияПроведения();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД