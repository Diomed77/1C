Перем ВидимостьПроведения;
Перем оПолеВвода_Контрагент; //:Общие.ПолеВыбораЗначения
Перем ПарСтрДокЭлЗаявка; // имя опций печати документов
Перем Валюта_Прежн;
Перем Курс_Прежн;
Перем Режим;
Перем стар_Клиент;
Перем Парт;
Перем ИнформационнаяСтрока;
Перем Prompt;  
Перем ПечатьНапрямую;
Перем спКредЛинияКлиента;
Перем Расш;
Перем ПредЦена;
Перем старЗаголовок;//для смены заголовка при бронировании 
Перем старЗаголовокРезерв;//для смены заголовка при бронировании 
Перем ПрефиксНомера;
Перем флагГлКлиент;
Перем ДатаПоставкиСтар;

Процедура ВыборКлиента() Далее
Процедура ВыборКлиентаФилиала() Далее
Процедура процВидЗаявки(флБронирования) Далее
Процедура ПриВыбореДатыПоставки() Далее
//Функция СвободноЗаказаныхТоваровНаСкладе(пТовар) Далее
Функция СвободноОжидаемыхТоваровНаСкладе(пТовар) Далее


Функция  ПроверкаКолваСтрок()
	//BEGIN PR 18.05.2015
	//ставим ограничение на кол-во строк в заявке		      
	Если ПустоеЗначение(Склад.МестоКомплектации)=0 Тогда
		МаксСтрокВСчете = Склад.МестоКомплектации.МаксСтрокВСчете;  
		Если МаксСтрокВСчете=0 Тогда
			//ограничение не установлено
			МаксСтрокВСчете = 999;
		КонецЕсли;
	Иначе
		МаксСтрокВСчете = 999;
	КонецЕсли;                           
	
	Если ПустоеЗначение(КлГруппа.ECOD)=0 Тогда
		//электронный обмен данными - ограчниение снимаем
		МаксСтрокВСчете = 999; 
	КонецЕсли;
	
	Если (ДатаДок>='21.05.15') И (ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка) Тогда
		Если КоличествоСтрок()>=МаксСтрокВСчете Тогда
			ЛегкоеСообщение(Шаблон("Макс кол-во строк в одной Эл.заявке не может превышать [МаксСтрокВСчете].
			|Провести документ будет невозможно!"));
//			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 1;
	//END PR
	
КонецФункции

Функция NumberToUpperChar( Num )
	UpperCharSet = "ABCDEFGHIJ";
	Num = Число(Прав(Num,1));
	Стр = Сред(UpperCharSet, Num + 1, 1);
	Возврат Стр;
КонецФункции
Функция NumberToLowerChar( Num )
	LowerCharSet = "abcdefghij";
	Num = Число(Прав(Num,1));
	Стр = Сред(LowerCharSet, Num + 1, 1);
	Возврат Стр;
КонецФункции
Функция ParityCheck(Код) // Вычисление кода четности
	четн = 0; неч  = 0;
	// Для строки с нечетной длинной верхняя граница 
	// округлается в большую сторону
	Для Поз = 1 По Окр(СтрДлина(Код) / 2 + 0.1,0) Цикл
		неч  = неч  + Сред(Код, Поз * 2 - 1, 1);
		Если Поз * 2 <= СтрДлина(Код) Тогда
			четн = четн + Сред(Код, Поз * 2, 1);
		КонецЕсли;
	КонецЦикла;
	КодЧетности = Число(Прав(Строка(1000 - четн - неч * 3), 1));
	Возврат КодЧетности;
КонецФункции
Функция ДобавитьСлева( Стр1, Длн, Стр2 )
	Стр0 = Стр1;
	Пока СтрДлина( Стр0 ) <= Длн Цикл Стр0 = Стр2 + Стр0; КонецЦикла;
	Стр0 = Прав( Стр0, Длн );
	Возврат Стр0;
КонецФункции


Функция EAN13CodeGenerate(код)
	// Проверки
	Если ТипЗначения(код) <> 1 Тогда
		Сообщить("Код для EAN13 должен числовым."); Возврат "";
	КонецЕсли;
    
	Если СтрДлина(код) > 12 Тогда
		Сообщить("Код для EAN13 должен быть длинной не более 12 символов."); Возврат "";
	КонецЕсли;               
	// Дополнение лидирующими пробелами
	код = ДобавитьСлева(Строка(код),12,"0");
	// Добавление кода четности - для кода, дополненого слева "0"
	код = код + Строка(ParityCheck("0"+Код));
	//Разбор строки
	ПервыйФлаг = Число(Сред(код,1,1));
	левстр     = Сред(код,2,6);
	правстр    = Сред(код,8,6);
	правкод = "";
	Для Поз = 1 По 6 Цикл
		правкод = правкод + NumberToLowerChar(Сред(правстр,Поз,1));
	КонецЦикла;
    //  Формирование левой части кода зависит от значениа ПервыйФлаг
	Если ПервыйФлаг = 0 Тогда	//    0           A  A  A  A  A
		левкод = "#!" + Лев(левстр,1) 
			+ Сред(левстр,2,1)
			+ Сред(левстр,3,1)
			+ Сред(левстр,4,1)
			+ Сред(левстр,5,1)
			+ Сред(левстр,6,1);
	ИначеЕсли ПервыйФлаг = 1 Тогда	//    1           A  A  B  A  B  B
		левкод = "$!" 
			+ Лев(левстр,1)
			+ Сред(левстр,2,1)
			+ NumberToUpperChar(Сред(левстр,3,1))
			+ Сред(левстр,4,1)
			+ NumberToUpperChar(Сред(левстр,5,1))
			+ NumberToUpperChar(Сред(левстр,6,1));
	ИначеЕсли ПервыйФлаг = 2 Тогда 	//    2           A  A  B  B  A  B
		левкод = "%!"
			+ Лев(левстр,1)
			+ Сред(левстр,2,1)
			+ NumberToUpperChar(Сред(левстр,3,1))
			+ NumberToUpperChar(Сред(левстр,4,1))
			+ Сред(левстр,5,1)
			+ NumberToUpperChar(Сред(левстр,6,1));
	ИначеЕсли ПервыйФлаг = 3 Тогда   //    3           A  A  B  B  B  A
		левкод = "&!" 
			+ Лев(левстр,1)
			+ Сред(левстр,2,1)
			+ NumberToUpperChar(Сред(левстр,3,1))
			+ NumberToUpperChar(Сред(левстр,4,1))
			+ NumberToUpperChar(Сред(левстр,5,1))
			+ Сред(левстр,6,1);
	ИначеЕсли ПервыйФлаг = 4 Тогда   //    4           A  B  A  A  B  B
		левкод = "'!" 
			+ Лев(левстр,1)
			+ NumberToUpperChar(Сред(левстр,2,1))
			+ Сред(левстр,3,1)
			+ Сред(левстр,4,1)
			+ NumberToUpperChar(Сред(левстр,5,1))
			+ NumberToUpperChar(Сред(левстр,6,1));
	ИначеЕсли ПервыйФлаг = 5 Тогда   //    5           A  B  B  A  A  B
		левкод = "(!" 
			+ Лев(левстр,1)
			+ NumberToUpperChar(Сред(левстр,2,1))
			+ NumberToUpperChar(Сред(левстр,3,1))
			+ Сред(левстр,4,1)
			+ Сред(левстр,5,1)
			+ NumberToUpperChar(Сред(левстр,6,1));
	ИначеЕсли ПервыйФлаг = 6 Тогда   //    6           A  B  B  B  A  A
		левкод = ")!" 
			+ Лев(левстр,1)
			+ NumberToUpperChar(Сред(левстр,2,1))
			+ NumberToUpperChar(Сред(левстр,3,1))
			+ NumberToUpperChar(Сред(левстр,4,1))
			+ Сред(левстр,5,1)
			+ Сред(левстр,6,1);
	ИначеЕсли ПервыйФлаг = 7 Тогда   //    7           A  B  A  B  A  B
		левкод = "*!" 
			+ Лев(левстр,1)
			+ NumberToUpperChar(Сред(левстр,2,1))
			+ Сред(левстр,3,1)
			+ NumberToUpperChar(Сред(левстр,4,1))
			+ Сред(левстр,5,1)
			+ NumberToUpperChar(Сред(левстр,6,1));
	ИначеЕсли ПервыйФлаг = 8 Тогда   //    8           A  B  A  B  B  A
		левкод = "+!" 
			+ Лев(левстр,1)
			+ NumberToUpperChar(Сред(левстр,2,1))
			+ Сред(левстр,3,1)
			+ NumberToUpperChar(Сред(левстр,4,1))
			+ NumberToUpperChar(Сред(левстр,5,1))
			+ Сред(левстр,6,1);
	ИначеЕсли ПервыйФлаг = 9 Тогда   //    9           A  B  B  A  B  A
		левкод = ",!" 
			+ Лев(левстр,1)
			+ NumberToUpperChar(Сред(левстр,2,1))
			+ NumberToUpperChar(Сред(левстр,3,1))
			+ Сред(левстр,4,1)
			+ NumberToUpperChar(Сред(левстр,5,1))
			+ Сред(левстр,6,1);
	КонецЕсли;                                               
	// Получение строки - результата
	кодстр = левкод + "-" + правкод + "!";
	Возврат кодстр;
КонецФункции


Процедура кнПодбор()
	//Z_Подбор(Контекст,Режим);
	// переменные нужны, чтобы не изменялись данные в документе, при изменении их в форме подбора
	//Если КоличествоСтрок()>=25 Тогда
	//	Предупреждение("В заявке уже "+КоличествоСтрок()+" строк. Создавайте новый документ!");
	//	Возврат;
	//КонецЕсли;

	Если ПроверкаКолваСтрок()=0 Тогда
		Возврат;
	КонецЕсли;

	
	пКлиент = ?(ПустоеЗначение(КлиентФилиала)=1,Клиент.ТекущийЭлемент(),КлиентФилиала.ТекущийЭлемент());
	//пСклад = Склад;
	//пВалюта = Валюта;
	ОткрытьПодбор("Справочник.Номенклатура","ДляПодбора",пКлиент);
	Попытка
		УстановитьЗначениеВПодборе("Склад",Склад);
	Исключение
	КонецПопытки;
	Попытка
		УстановитьЗначениеВПодборе("выбВалюта",Валюта);
	Исключение
	КонецПопытки;
	Режим="Каталог";
КонецПроцедуры


// бронь в пути

//Функция ЗапросДокументПривязки(Выб)
//	
//	Перем допусл;//дополнительный текст
//	Перем старНомерСтроки; //переменая для сохранения знач строк в таблице
//	Перем тДокументПривязки;
//	Перем пНомерСтроки; // для выбора номера строки
//	
//	тДокументПривязки=СоздатьОбъект("ТаблицаЗначений");
//	старНомерСтроки=НомерСтроки;
//	
//		Запрос=СоздатьОбъект("ODBCRecordSet");
//		Если (КоличествоСтрок()>0) И (Выб=Товар) Тогда
//			Запрос.УстановитьТекстовыйПараметр("Товар",Выб);
//		Иначе
//			Возврат 0;
//		КонецЕсли;
//				
//		ТекстЗапроса="SELECT NullIf(ЗаказыПоставщикамОстатки.СрокПоставки, '17530101') СрокПоставки
//	|, Журнал.DOCNO НомерЗакзаПоставщику
//	|, (ЗаказыПоставщикамОстатки.КоличествоОстаток - COALESCE(ЗаказыПоставщикамЗаявкиОстатки.КоличествоОстаток,0)) Остаток
//	|, ЗаказыПоставщикамОстатки.ПоЗаказу [ПоЗаказу $Документ]
//	|FROM $РегистрОстатки.ЗаказыПоставщикам(,
//	|	,
//	|	(Товар = :Товар),
//	|	(СрокПоставки, ПоЗаказу),) AS ЗаказыПоставщикамОстатки
//	|LEFT JOIN $РегистрОстатки.ЗаказыПоставщикамЗаявки(,,(Товар = :Товар),
//	|	(ПоЗаказу),) AS ЗаказыПоставщикамЗаявкиОстатки ON ЗаказыПоставщикамОстатки.ПоЗаказу = ЗаказыПоставщикамЗаявкиОстатки.ПоЗаказу 
//	|INNER JOIN _1SJOURN AS Журнал ON RIGHT(ЗаказыПоставщикамОстатки.ПоЗаказу,9) = Журнал.IDDOC
//	|ORDER BY ЗаказыПоставщикамОстатки.СрокПоставки";
//		
//		Запрос.ВыполнитьИнструкцию(ТекстЗапроса,тДокументПривязки);
//		тДокументПривязки.ВидимостьКолонки("ПоЗаказу",0,);
//		пНомерСтроки=1;
//		Если (тДокументПривязки.КоличествоСтрок()>0) 
//		   И (тДокументПривязки.выбратьстроку(пНомерСтроки,"Выбирите документ Заказ Поставщику в котором есть данный товар",60)=1) Тогда
//				ДокументПривязки=тДокументПривязки.ПолучитьЗначение(пНомерСтроки,"ПоЗаказу");	
//			Возврат тДокументПривязки.КоличествоСтрок();
//		Иначе
//			Возврат 0;
//		КонецЕсли;		
//КонецФункции


Функция ЗапросДокументПривязки(Выб)
	
	Перем допусл;//дополнительный текст
	Перем старНомерСтроки; //переменая для сохранения знач строк в таблице
	Перем тДокументПривязки;
	Перем пНомерСтроки; // для выбора номера строки
	
	тДокументПривязки=СоздатьОбъект("ТаблицаЗначений");
	старНомерСтроки=НомерСтроки;
	
		Запрос=СоздатьОбъект("ODBCRecordSet");
		Если (КоличествоСтрок()>0) И (Выб=Товар) Тогда
			Запрос.УстановитьТекстовыйПараметр("пТовар",Выб);
		Иначе
			Возврат 0;
		КонецЕсли;
				
		ТекстЗапроса="SELECT NullIf(DATEADD(dd,$СпрК.ДнейНаПодготовку,ТоварыВПутиОстатки.СрокПоставки), '17530101') Срок
		|	, ТоварыВПутиОстатки.Док [Документ $Документ]
		|	, ТоварыВПутиОстатки.КоличествоОстаток Количество
		|FROM $РегистрОстатки.ТоварыВПути(,,
		|		(Товар = :пТовар),
		|		(СрокПоставки, Док),) AS ТоварыВПутиОстатки
		|INNER JOIN $Документ.ОжидаемаяПоставка Док (NOLOCK) ON Док.IDDOC = RIGHT(ТоварыВПутиОстатки.Док,9) 
		|INNER JOIN $Справочник.Контрагенты СпрК (NOLOCK) ON СпрК.ID = $Док.Клиент
		|";
		
		Запрос.ВыполнитьИнструкцию(ТекстЗапроса,тДокументПривязки);
	//	тДокументПривязки.ВидимостьКолонки("ПоЗаказу",0,);
		пНомерСтроки=1;
		Если (тДокументПривязки.КоличествоСтрок()>1) Тогда
			Если (тДокументПривязки.выбратьстроку(пНомерСтроки,"Выбирите документ Заказ Поставщику в котором есть данный товар",60)=1) Тогда
				ДокументПривязки=тДокументПривязки.ПолучитьЗначение(пНомерСтроки,"Документ");	
				Возврат тДокументПривязки.КоличествоСтрок();
			Иначе
				Возврат 0;				
			КонецЕсли;
		ИначеЕсли (тДокументПривязки.КоличествоСтрок()=1) Тогда
			ДокументПривязки=тДокументПривязки.ПолучитьЗначение(1,"Документ");	
			Возврат 1;
		Иначе
			Возврат 0;
		КонецЕсли;		
КонецФункции

Процедура ВыбратьДокументПривязки(Выб)
	
	Если ЗапросДокументПривязки(Выб)=0 Тогда
		Если КоличествоСтрок()>0 Тогда
			УдалитьСтроку();
		КонецЕсли;
	//	Сообщить("Товар не может быть выбран. Отсутствует в документе Заказ Поставщика: "+ДокументПривязки+".");
		Сообщить("Товар не может быть выбран. Отсутствует в документе Ожидаемая поставка:"+ДокументПривязки+".");
	КонецЕсли;

КонецПроцедуры

Процедура кнИнфоЗакПостав()
	Если ДокументПривязки.Выбран()=1 Тогда
		ОткрытьФорму(ДокументПривязки,,1);
	КонецЕсли;
КонецПроцедуры

// бронь в пути
Процедура ВыбратьГрафикМаршрутаДляКлиента()

	Если (АдресДоставки.Выбран()=1) И (ПустоеЗначение(ДатаПоставки)=0) Тогда
		пМаршрут=АдресДоставки.Маршрут;
		Запрос=СоздатьОбъект("ODBCRecordSet");
		ТекстЗапроса="SELECT МаршрутыДоставкиГрафик.ID [График $Справочник.МаршрутыДоставкиГрафик]
		|			  FROM $Справочник.МаршрутыДоставкиГрафик AS МаршрутыДоставкиГрафик
		|			  WHERE (МаршрутыДоставкиГрафик.PARENTEXT = :ВыбМаршрут)
		|";
		Запрос.УстановитьТекстовыйПараметр("ВыбМаршрут",пМаршрут);
		тГрафикМаршрута=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
		Если тГрафикМаршрута.КоличествоСтрок()>0 Тогда
			Если ПустоеЗначение(МаршрутДоставкиГрафик)=1 Тогда
				МаршрутДоставкиГрафик=тГрафикМаршрута.ПолучитьЗначение(1,"График");
			КонецЕсли;

			Если тГрафикМаршрута.КоличествоСтрок()>1 Тогда
				сзГрафик=СоздатьОбъект("СписокЗначений");
				тГрафикМаршрута.Выгрузить(сзГрафик);
				сзГрафик.ВыбратьЗначение(МаршрутДоставкиГрафик,"Выберите график для маршрута "+пМаршрут);
			КонецЕсли;			
		Иначе
			МаршрутДоставкиГрафик="";
		КонецЕсли;
	Иначе
		МаршрутДоставкиГрафик="";
	КонецЕсли;
КонецПроцедуры

Процедура ПриВводеСтроки()
	Сообщить( "Новые товары добавляются в документ через кнопку <z Подбор>", "I" );
	СтатусВозврата(0);
КонецПроцедуры

Процедура семУстановкаКурса()
	// Процедура создана специально для установки заранее определеннтого курса валюты LTL
	// при создании эл.заявки агентом из Литвы
	Если глКодСтраныПользователя <> Константа.ОсновнаяФирма.Страна.Код Тогда // только для агентов из Литвы
		Если Валюта.Наименование = "LTL" Тогда // только для литовской валюты LTL
			Курс = 0.20354611;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ФорматВывода( парам )
	Если парам = "Маршрут" Тогда
		Если Клиент.Выбран() = 0 Тогда Возврат ""; КонецЕсли;
		Если Клиент.АдресДоставки.Выбран() = 0 Тогда
			Возврат Клиент.Маршрут;
		Иначе
			Адрес = Клиент.АдресДоставки;
			Возврат Шаблон( "[Адрес.Родитель.Родитель.Наименование], [Адрес.Родитель.Наименование] ([Адрес.Маршрут.Наименование])" );
		КонецЕсли;
	ИначеЕсли парам = "МаршрутКлиента" Тогда
		Если ПустоеЗначение(МаршрутДоставкиГрафик)=1 Тогда
//			Сообщить("Адрес доставки клиента "+Клиент.АдресДоставки.Маршрут.Код);
			Возврат СокрЛП(Клиент.АдресДоставки.Маршрут.Наименование);
		Иначе
	 		Возврат ""+МаршрутДоставкиГрафик;
		КонецЕсли;
		
	ИначеЕсли парам = "ДниОбсл" Тогда
		Если Клиент.АдресДоставки.Выбран() = 0 Тогда
			Возврат "";
		Иначе
			Возврат Клиент.АдресДоставки.Маршрут.ДниОбслуживания;
		КонецЕсли;
	ИначеЕсли парам = "Валюта" Тогда
		Возврат Шаблон("[Валюта.Наименование] [Курс#Ч7.4]");
	ИначеЕсли парам = "ЦенаИзКаталога" Тогда
		// получение даты, на которую необходимо получить цену \\
		Если Число(ДатаПоставки) = 0 Тогда
			ДатаЦены = ДатаДок;
		Иначе
			ДатаЦены = ДатаПоставки;
		КонецЕсли;
		// получение даты, на которую необходимо получить цену //
		Возврат Формат(РознЦена, "Ч14.2");
	ИначеЕсли парам = "СутьПретензии" Тогда
		Если ПустоеЗначение(СутьПретензии)=0 Тогда
			Возврат СутьПретензии.Наименование+РазделительСтрок+СутьПретензии.НаименованиеРусс;
		Иначе
			Возврат "";			
		КонецЕсли;

		//Возврат Формат(ЦенаТовараПоКатегорииДляТовара(Товар,КатегорияЦены,Валюта,Курс,ДатаЦены), "Ч14.2");
	КонецЕсли;
КонецФункции

Процедура ПриВыбореВидаОплаты()
	ВидОплаты = спВидОплаты.ПолучитьЗначение(спВидОплаты.ТекущаяСтрока());
	
	Если ВидОплаты=5 Тогда //списание
		ВидДоставки = Перечисление.ВидыДоставки.Самовывоз;
	КонецЕсли;                                     

//	ПриВыбореВидаОплаты();
	
КонецПроцедуры

Функция УправлениеДиалогом()
	Перем флВидимостьВозврат;
	Перем флБронирования;
	
	
	флВидимостьВозврат=0;
	флБронирования=0;
	
	Форма.кнПечать.Видимость(Проведен());
	Форма.кнПечатьСчет.Видимость(1);
	Форма.кнПрямаяПечать.Заголовок(?(ПризнакПечати = 1,"Распечатано","Не распечатано") ); 
	Форма.КнПровести.Видимость( ВидимостьПроведения );
	Форма.ОК.Видимость( ВидимостьПроведения );
	Форма.тКодРозн.Видимость(?((Склад.ВидСклада=Перечисление.ВидыСкладов.Розничный) ИЛИ (СкладПолучатель.ВидСклада=Перечисление.ВидыСкладов.Розничный),1,0));
	
	Если Проведен()=0 Тогда
		Форма.кнПрямаяПечать.Видимость(1-Константа.ПечатьЗаявокНаСкладе);
	Иначе
		Форма.кнПрямаяПечать.Видимость(Проведен());
	КонецЕсли;

	флДост = семЕстьПраво( "Документ", "Счет", "Запрет на изменение цены" );
	Форма.Цена.Доступность(1-флДост);
	Форма.ЦенаСНДС.Доступность(1-флДост);
	Форма.СкидкаНакл.Доступность(1-флДост);
	
	Если ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаНаВозврат Тогда
		флВидимостьВозврат=1;
	Иначе
		флВидимостьВозврат=0;
	КонецЕсли;
	
	Если ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
		флВидимостьВозврат=1;
		флБронирования=1;
		
		процВидЗаявки(флБронирования);
		
	Иначе
		флБронирования=0;
		Форма.Заголовок(старЗаголовок);
		процВидЗаявки(флБронирования);
	КонецЕсли;

	Если ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
	Иначе
		Форма.МинСрокРеализ.Видимость(1-флВидимостьВозврат);
	КонецЕсли;       
	
	Форма.МаксСрокРеализ.Видимость(1-флВидимостьВозврат);
	Форма.ПояснениеСкидки.Видимость(1-флВидимостьВозврат);
	Форма.Резерв.Видимость(1-флВидимостьВозврат+флБронирования);


	
	Если ВидОплаты = 5 Тогда
		флВидимостьСписаний=1;
	Иначе 
		флВидимостьСписаний=0;
	КонецЕсли;                
	
	Форма.тКатСписания.Видимость(флВидимостьСписаний);
	Форма.КатегорияСписания.Видимость(флВидимостьСписаний);

	
КонецФункции

Процедура ПриВыбореТовара()
	Если ПустоеЗначение(Цена) = 1 Тогда 
		УстанЦеныРасх(Контекст)
	КонецЕсли; 
	ТовКод=Товар.Код;
КонецПроцедуры	

Процедура ПриВыбореЕдИзм()
	УстанЦеныРасх(Контекст,"Подбор",0);	
	семПроверкаМинОтргКолва( контекст );
	Выч_суммы_накл(Контекст);
КонецПроцедуры

Функция семПечатьШтрихКода(OLE)
	Попытка OLE.text = Прав(IDD,12);
	Исключение Сообщить("Не найден OLE объект.","!");
	КонецПопытки;
КонецФункции

Процедура ПолучитьСписокПретензий( стр1, стр2 )
	спр = СоздатьОбъект( "Справочник.Претензии" );
	Если спр.НайтиПоКоду("B",0) = 0 Тогда Возврат; КонецЕсли;
	спр.ПорядокКодов();
	пГруппа = спр.ТекущийЭлемент();
	спр.ИспользоватьРодителя(пГруппа);
	спр.ВыбратьЭлементы(1); сч = 0;
	Пока спр.ПолучитьЭлемент() = 1 Цикл
		Если спр.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;
		Если спр.ДляАгента=0 Тогда Продолжить; КонецЕсли;
		Сч = Сч + 1;
		Если Сч <= 5 Тогда
			стр1 = стр1+спр.НаименованиеРусс+РазделительСтрок;
		Иначе
			стр2 = стр2+спр.НаименованиеРусс+РазделительСтрок;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура семПечать( пПросмотр = 1 )
	
	Если Проведен()=0 Тогда
		Предупреждение("Печать заявки возможно только после проведения!");
		Возврат;
	КонецЕсли;
	Язык="LV";
	Если Пользователь.ОсновнаяФирма.Страна.Код="EE" Тогда
		Язык="EE";
	КонецЕсли;
	Если Константа.ПечатьЗаявокНаСкладе = 1 Тогда
		Если пПросмотр = 0 Тогда
			Сообщить("Прямая печать запрещена. Прямая печать электронных заявок происходит непосредственно на складе!","I");
			Возврат;
		Иначе
			Если семЕстьПраво( "Документ", "Счет", "Печать" ) = 0 Тогда
				Сообщить("Печать электронных заявок происходит непосредственно на складе!","I");
				Возврат;
			КонецЕсли;
			
			Если семЕстьПраво( "Документ", "Счет", "Комплектация после печати" ) = 1 Тогда
				глОтправитьНаКомплектациюЗаявку(ТекущийДокумент());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ПутьСчет = КаталогИБ() + "ExtForms\Печать\ПечатьЭлЗаявки.ert";
	Если ФС.СуществуетФайл(ПутьСчет)=1 Тогда
		спПарам = СоздатьОбъект( "СписокЗначений" );
		спПарам.Установить("Документ",ТекущийДокумент());
		спПарам.Установить("Заблокирован",1);
		ОткрытьФормуМодально( "Обработка", спПарам, ПутьСчет );
		Возврат;
	КонецЕсли;
	Фирма.ИспользоватьДату(ДатаДок);
	
	таб=СоздатьОбъект( "Таблица" );
	Если семТекСтрана() = "LT" Тогда таб.ИсходнаяТаблица( "СчетНовый2LT" );
	Иначе таб.ИсходнаяТаблица( "СчетНовый2" );
	КонецЕсли;
	
	Если ВидДоставки=Перечисление.ВидыДоставки.Самовывоз Тогда
		пВидДоставки="Paєizveєana (klients)";
	ИначеЕсли ВидДоставки=Перечисление.ВидыДоставки.Агент Тогда
		пВидДоставки="Paєizveєana (aЄents)";
	ИначеЕсли ВидДоставки=Перечисление.ВидыДоставки.Доставка Тогда
		пВидДоставки="Х";
	КонецЕсли;
	
	пДатаПоставки = ДатаПоставки;
	пАгент = Агент;
	пНомерДок = НомерДок;
	пНомерПретензии = ДокументОснование.НомерДок;
	пДатаДок = ДатаДок;
	пФирма = Фирма.ПолноеНаименование;
	пСклад = Склад.Наименование;
	пАдрес = Склад.Адрес;
	пКомп = ИмяКомпьютера();
	пАвтор = Автор;
	
	Если семТекСтрана() = "LV" Тогда
		промКлиент = ?(КлиентФилиала.Выбран() = 0,Клиент,КлиентФилиала);
	Иначе
		промКлиент = Клиент;
	КонецЕсли;
	

	Если промКлиент.КлГруппа.Выбран()=1 Тогда
		промКлГруппа=промКлиент.КлГруппа;
	Иначе
		промКлГруппа=промКлиент;
	КонецЕсли;       
	
	пКлиентКод = промКлиент.Код;
	пКлиентНаим = промКлиент.ПолноеНаименование;
	Если промКлиент.АдресДоставки.Выбран() = 0 Тогда
		пКлиентАдрес =  СокрЛП( промКлиент.ПочтовыйАдрес ) +", "+СокрЛП( промКлиент.ГородДоставки )+", "+СокрЛП( промКлиент.ПочтовыйИндекс );
		пМаршрут = ?(промКлиент.Маршрут.Выбран() = 1, Шаблон( "[промКлиент.Маршрут.Код] ([промКлиент.Маршрут.ДниОбслуживания])" ), "" ) ;
	Иначе
		Адрес = промКлиент.АдресДоставки;
		пКлиентАдрес = Шаблон( "[Адрес.Наименование] [промКлиент.АдресДоставкиДоп]" ) ;
		//пМаршрут = Шаблон( "[Адрес.Маршрут.Описание] ([Адрес.Маршрут.ДниОбслуживания])" ) ;
		пМаршрут = ?(Адрес.Маршрут.Выбран() = 1,Шаблон( "[Адрес.Маршрут.Описание] ([Адрес.Маршрут.ДниОбслуживания])" ), "" );
		//пМаршрут = Адрес.Маршрут.Описание;
	КонецЕсли;
	пВажность = Клиент.Важность;
	Если ВидОплаты = 1 Тогда
		таб.ВывестиСекцию( "ОплатаНал" );
	КонецЕсли;
	Если ВидЗаявки = Перечисление.ВидыЗаявок.СпецЗаказ Тогда
		таб.ВывестиСекцию( "СпецЗаказ" );
	КонецЕсли;
	пШтрихКод = Прав(IDD,12);
	
	пОснование = Основание;
	
	таб.ВывестиСекцию( "Заголовок" + Язык);
	
	таб.ВывестиСекцию( "Шапка" + Язык);
	
	итТаблДокОсн=СоздатьОбъект("ИндексированнаяТаблица");
	Если ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаНаВозврат Тогда
		итТаблДокОсн.Загрузить(ДокументОснование);
		итТаблДокОсн.ДобавитьИндекс("иТовар","*Товар");
	КонецЕсли;
	
	пИтогРезерв = 0;
	пИтогКол 	= 0;
	табл=СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(табл);
	глСортТоварДляКомплектации(Контекст,табл);

	текГруппа = "";
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку() = 1 Цикл
		Если текГруппа <> табл.Группа Тогда
			пГруппа = ?( табл.Группа = "ййй", "", табл.Группа );
			таб.ВывестиСекцию( "Группа" );
			текГруппа = табл.Группа;
		КонецЕсли;
		пНом = табл.НомерСтроки;
		пАдрес = табл.СклАдрес;
		пШтрихКод = табл.Товар.ШтрихКод;
		пКод = табл.Товар.Код;
		Если семТекСтрана() <> "LV" Тогда 
			пТовар = табл.Товар.ПолучитьАтрибут("Наименование"+семТекСтрана());
		Иначе 
			пТовар = Шаблон("[табл.Товар.Наименование] [табл.Товар.КодПоставщика] ");
		КонецЕсли;
		Если Язык <> "LV" Тогда
			пТовар = табл.Товар.ПолучитьАтрибут("Наименование"+Язык);
		КонецЕсли;
		Если Найти(КатегорияЦены.Наименование,"Розничная") > 0  Тогда
			пТовар = пТовар + Шаблон(" ([табл.Товар.КодДляРозницы])");
		КонецЕсли;
		пЕд = табл.Единица.Наименование;
		пЕдЕд = табл.Единица.Единица;
		пЕдБаз = табл.Товар.БазоваяЕдиницаИзмерения;
		пКол = Окр(табл.Количество*табл.Коэффициент,3,1);
		пКолКл = табл.Количество;
		пИтогКол = пИтогКол + пКол;
		пРезерв = Окр(табл.Резерв*табл.Коэффициент,3,1);
		пРезервКл = табл.Резерв;
		пИтогРезерв = пИтогРезерв + пРезерв;
//		СрокРеал = Окр( табл.Товар.СрокГодн * промКлГруппа.ДопустСрокРеализации / 100, 0, 1 );
		
		Если (Число(табл.МинСрокРеализ) = 0) и ((Число(табл.МаксСрокРеализ) = 0)) Тогда
			СрокРеал = Окр( табл.Товар.СрокГодн * глПолучитьДопустСрокРеализацииТовараПоКлиенту(промКлГруппа,табл.Товар) / 100, 0, 1 );
			пДатаРеал = ?( СрокРеал > 0, ДатаПоставки + СрокРеал, "" );
		Иначе
			пДатаРеал = Шаблон("[табл.МинСрокРеализ]-[табл.МаксСрокРеализ]");
		КонецЕсли;
		
		пУслХранения = табл.Товар.МестоХранения.УсловияХранения;
		
		пСрокРеализ = "";
		пСутьПретензии = "";
		
		Если ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаНаВозврат Тогда
			Если итТаблДокОсн.НайтиСтроку("иТовар",табл.Товар,,1)=0 Тогда
				Сообщить("В документе основании "+ДокументОснование + " не найден товар "+пКод+" "+пТовар);
			Иначе
				пСрокРеализ = итТаблДокОсн.СрокРеализ;
				пСутьПретензии = итТаблДокОсн.СутьПретензии;
			КонецЕсли;
		КонецЕсли;
		
		таб.ВывестиСекцию( "Строка" +Язык);
	КонецЦикла;
	
	Если ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаНаВозврат Тогда
	Иначе
		таб.ВывестиСекцию( "Итог" );		
	КонецЕсли;
	
	пПретензии1 = "";
	пПретензии2 = "";
	ПолучитьСписокПретензий(пПретензии1,пПретензии2);

	таб.ВывестиСекцию( "Подвал" +Язык);		
	Если ПустоеЗначение( пОснование ) = 0 Тогда 
		таб.ВывестиСекцию( "Пустая10" ); 
		таб.ВывестиСекцию( "Коммент" ); 
	КонецЕсли;
	таб.ТолькоПросмотр(1);
	таб.Опции(0,0,0,0);  
	Если пПросмотр = 1 Тогда 
		таб.Показать("El. pasЅtijums: "+ НомерДок,"");
	Иначе
		таб.Напечатать(1);
	КонецЕсли;
//	ПризнакПечати = 1;
//	Записать();
КонецПроцедуры

Процедура Печать(Вид)
	Если ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаНаВозврат Тогда
		ПутьСчет = КаталогИБ() + "ExtForms\Печать\ПечатьЭлЗаявки.ert";
		спПарам = СоздатьОбъект( "СписокЗначений" );
		спПарам.Установить("Документ",ТекущийДокумент());
		спПарам.Установить("Заблокирован",1);
		ОткрытьФормуМодально( "Обработка", спПарам, ПутьСчет );
		Возврат;
	КонецЕсли;
	//семПечать( Вид ); Возврат;
	Язык="LV";
	Фирма.ИспользоватьДату(ДатаДок);
	Таб=СоздатьОбъект("Таблица");
	Если Вид=1 Тогда
		Таб.исходнаяТаблица("Счет");
	Иначе
//		Таб.исходнаяТаблица("Счет2");
		Таб.исходнаяТаблица("Счет2штрихкод");		
	КонецЕсли;
	
	пШтрихКод = EAN13CodeGenerate(Число(IDD));
	
	Таб.ВывестиСекцию("Шапка"+Язык);
	ВыбратьСтроки();
	Ном=0;               
	Количество1=0;
	
	Пока ПолучитьСтроку() = 1 do  
		ДатаПрих="";
		Ном=Ном+1;
		
		пДоСрокаРеал = Формат( Окр( Товар.СрокГодн * глПолучитьДопустСрокРеализацииТовараПоКлиенту(КлГруппа,Товар) / 100, 0, 1 ), "Ч03.0" );
		
		ПечКодДляРозницы="";
		Если (Склад.ВидСклада=Перечисление.ВидыСкладов.Розничный) ИЛИ (СкладПолучатель.ВидСклада=Перечисление.ВидыСкладов.Розничный)  Тогда
			ПечКодДляРозницы=Товар.КодДляРозницы;
		КонецЕсли;
		
		Таб.ВывестиСекцию("Строка"+Язык);
	КонецЦикла;
	Таб.ВывестиСекцию("Подвал"+Язык);
	Таб.ВывестиСекцию("Подвал1");
	Таб.Опции(0,0,0,0,ПарСтрДокЭлЗаявка);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("PasЅt. uz atgr.: "+НомерДок,"");
КонецПроцедуры
//*********************************
Процедура ВесИнфо()
	Путь = КаталогИБ() + "ExtForms\Печать\ВесИнфо.ert";
	Если ФС.СуществуетФайл(Путь)=0 Тогда
		Возврат;
	Иначе
		ОткрытьФорму("Обработка",ТекущийДокумент(),Путь);
	КонецЕсли;
КонецПроцедуры
//*********************************

Процедура семВзаиморасчеты()
	Предупреждение(ДолгПоКредитуНов(Контекст));
КонецПроцедуры

Процедура Взаиморасчеты()
	Если ВидОплаты=2 Тогда //отв. хранение
		ИнформационнаяСтрока="";
	Иначе
//		ИнформационнаяСтрока=ДолгПоКредиту(Контекст);
		ИнформационнаяСтрока=ДолгПоКредитуНов(Контекст);
//		Сообщить(ИнформационнаяСтрока2);
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗакрытии()
	//Сервис.ПерехватКлавиатуры(0);           
КонецПроцедуры

Процедура семДоступность()
	Если Форма.ТолькоПросмотр()=1 Тогда
		Форма.КнФирма1.Доступность(0);
		Форма.КнСклад.Доступность(0);
		Форма.кнПодбор.Доступность(0);
		Форма.ОК.Доступность(0);
//		Форма.Резерв.Доступность(1);
		Форма.КнопкаПоУмолчанию("Закрыть");
	Иначе
		Форма.КнопкаПоУмолчанию("ОК");
	КонецЕсли;  
КонецПроцедуры

Процедура ПриОткрытии()
	
	ПриЗаписиПерепроводить(1);
	Форма.ИспользоватьСлой("Основной,Бронирование,Кнопки,Таблица,Общий",2);
	ВидимостьПроведения=1-Проведен();
	Если семЕстьПраво( "Документ", "Счет", "Отмена проведения" ) =1 Тогда
		ВидимостьПроведения=1;
	ИначеЕсли Проведен()=1 Тогда
		Форма.ТолькоПросмотр( Проведен() );
	КонецЕсли;		
		
	Если (ДатаДок<=Константа.ДатаЗапретаРедактированияЗаказов) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;                 
	Если (ЦЧ=1) и (НазваниеНабораПрав()<>"Администратор") Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	Если (глФирма<>Фирма) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;     
	
     семДоступность();
	Если Фирма<>Константа.ОсновнаяФирма Тогда
		Форма.Клиент.Видимость(0);
		Форма.КлиентФилиала.Видимость(1);
	Иначе
		Форма.Клиент.Видимость(1);
		Форма.КлиентФилиала.Видимость(0);
	КонецЕсли;
	
	Если глКодСтраныПользователя="LV" Тогда
		Форма.лНаименованиеТовара.Видимость(0);
		Форма.Товар.Видимость(1);
	Иначе 
		Форма.лНаименованиеТовара.Видимость(1);
		Форма.Товар.Видимость(0);  
	КонецЕсли;           
//	Форма.Резерв.Доступность(1);
	ДатаПоставкиСтар = ДатаПоставки;
	
	Форма.ЦЧ.Видимость(Пользователь.РазрСпецПродажу);
	Взаиморасчеты();               
	спВидОплаты.ТекущаяСтрока(спВидОплаты.НайтиЗначение(ВидОплаты));
	семЗаголовокОкна(контекст);
	старЗаголовок=Форма.Заголовок();
	
	//оПолеВвода_Контрагент = СоздатьОбъект("Общие.ПолеВыбораЗначения");
	//	оПолеВвода_Контрагент.ПоискПоВхождению = фПоПодстроке;
	//оПолеВвода_Контрагент.Инит(Контекст, "Клиент", "текстПрефиксКонтрагента", 500);
	
	ЕстьПраваИзменятьНомер=семЕстьПраво("Документ","Счет","Изменение номера");
	Форма.НомерДок.Доступность(?((НазваниеНабораПрав()="Администратор") ИЛИ (ЕстьПраваИзменятьНомер=1),1,0));
	
	Транслит(Расш,Форма);
	
	
//{бронирование	изменение колонки резерв для просмотра
	Если ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
			Рез=Регистр.РезервыТоваров.СводныйОстаток(Товар,ТекущийДокумент(),"РезервТовара");
			Если Рез>0 Тогда
				Резерв=Рез/Коэффициент;
			Иначе
				Резерв=0;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
//}бронирование	
	
	
	
	
	
КонецПроцедуры         

Функция НазваниеТовара(Тов)
	Если глКодСтраныПользователя="LV" Тогда
		Возврат "";
	Иначе 
		Возврат Тов.ПолучитьАтрибут("Наименование"+глКодСтраныПользователя);
	КонецЕсли;
КонецФункции

Процедура кнПрямаяПечатьПриНажатии()
	Если ПризнакПечати = 1 Тогда
		Если Вопрос("Вывести на печать повторно?","Да+Нет") = "Да" Тогда
			семПечать( 0 );
		КонецЕсли;
	Иначе
		семПечать( 0 );
	КонецЕсли;
КонецПроцедуры

Функция ИнфОпродаже()
	Если Клиент.Выбран()=1 Тогда
		КлиентГр_ = ?(Клиент.КлГруппа.Выбран()=1,Клиент.КлГруппа,Клиент);
		КлиентГр_.ИспользоватьДату(ДатаДок);
		Если КлиентГр_.ЗапретВыпискиНакл=1 Тогда
			Возврат("Запрет на продажу!!!");
		Иначе
			Возврат("");
		КонецЕсли;
	Иначе
		Возврат("");
	КонецЕсли;
КонецФункции                 

Функция ИнфОдоговоре()
	Если Клиент.Выбран()=1 Тогда
		Если СтрДлина(СокрЛП(Клиент.Договор))=0 Тогда
			Возврат("Договора нет!!!");
		Иначе
			Возврат(Клиент.Договор);
		КонецЕсли;
	Иначе
		Возврат("");
	КонецЕсли;
КонецФункции

Функция КонтрольОстаткаВсего()  
	// Вычислим, сколько всего данного товара
	ПолныйОстаток= Регистр.ОстаткиТоваров.СводныйОстаток(Товар,Склад,,"ОстатокТовара");
	Резерв_= 0;
	// проверяем резерв товара
	Если семРазрешитьПродаватьРезерв( контекст )=Перечисление.Булево.Нет Тогда
		// Вычислим, сколько зарезервировано всего данного товара
		Резерв_= Регистр.РезервыТоваров.СводныйОстаток(Товар,,"РезервТовара");
	КонецЕсли;
	Если Коэффициент>0 Тогда
		Возврат (ПолныйОстаток-Резерв_)/Коэффициент;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Процедура Подбор()
	Режим="Каталог";
	ОткрытьПодбор("Номенклатура","ДляПодбора");
	УстановитьЗначениеВПодборе("Склад",Константа.ОсновнойСклад);
КонецПроцедуры    

Функция СвободныйОстатокТовараНаСкладе(пТовар)
	
	//{бронирование в пути
	Если (ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь) И (фБроньвпути=1) Тогда
	//	Возврат СвободноЗаказаныхТоваровНаСкладе(пТовар);
		Возврат СвободноОжидаемыхТоваровНаСкладе(пТовар);
		
	КонецЕсли;	
	//}бронирование в пути
	
	Рез=Регистр.РезервыТоваров.СводныйОстаток(пТовар,,"РезервТовара");
	Если Склад.Выбран()=1 Тогда
		Возврат Макс(Регистр.ОстаткиТоваров.СводныйОстаток(пТовар,Склад,,"ОстатокТовара")-Рез,0);
	Иначе
		Возврат Регистр.ОстаткиТоваров.СводныйОстаток(пТовар,,,"ОстатокТовара")-Рез;
	КонецЕсли;
КонецФункции

//бронь в пути

//Функция СвободноЗаказаныхТоваровНаСкладе(пТовар)
//	Если ПустоеЗначение(ДокументПривязки)=0 Тогда
//		рез=Регистр.ЗаказыПоставщикамЗаявки.СводныйОстаток(пТовар,ДокументПривязки,,"Количество");
//		Возврат Регистр.ЗаказыПоставщикам.СводныйОстаток(пТовар,,,,ДокументПривязки,"Количество")-рез;
//	Иначе
//		рез=Регистр.ЗаказыПоставщикамЗаявки.СводныйОстаток(пТовар,,,"Количество");
//		Возврат Регистр.ЗаказыПоставщикам.СводныйОстаток(пТовар,,,,,"Количество")-рез;
//	КонецЕсли;
//	
//	//добавить проверку на заказаного по заявке
//КонецФункции

Функция СвободноОжидаемыхТоваровНаСкладе(пТовар) //переставить
	Если ПустоеЗначение(ДокументПривязки)=0 Тогда
		рез=Регистр.ЗаказыПоставщикамЗаявки.СводныйОстаток(пТовар,ДокументПривязки,,"Количество");
		Возврат Регистр.ТоварыВПути.СводныйОстаток(пТовар,,,ДокументПривязки,"Количество")-рез;
	Иначе
		рез=Регистр.ЗаказыПоставщикамЗаявки.СводныйОстаток(пТовар,,,"Количество");
		Возврат Регистр.ТоварыВПути.СводныйОстаток(пТовар,,,,"Количество")-рез;
	КонецЕсли;
	
	//добавить проверку на заказаного по заявке
КонецФункции

//бронь в пути

Функция семПолучитьСтавкуНДСТовара( пТовар )
	Если глКодСтраныПользователя = "LT" Тогда Возврат пТовар.СтавкаНДСLT;
	ИначеЕсли глКодСтраныПользователя = "EE" Тогда Возврат пТовар.СтавкаНДСEE;
	КонецЕсли;
	Возврат пТовар.СтавкаНДС;
КонецФункции

Функция семПроверкаСтавкиНДС( пТовар )
	СтавкаНДСТовара = семПолучитьСтавкуНДСТовара( пТовар );
	Если КоличествоСтрок() = 0 Тогда
		Если (Склад.СкладОтвХранения=1) ИЛИ ((Клиент.Страна<>Константа.СтранаРезидент) И (Фирма=Константа.ОсновнаяФирма)) ИЛИ (Клиент.флПароход = 1) Тогда
			СтавкаНДС = Перечисление.ЗначенияНДС.НДС0;
		Иначе
			СтавкаНДС = СтавкаНДСТовара;
		КонецЕсли;
		
	Иначе
		Если (СтавкаНДС <> СтавкаНДСТовара) И (СтавкаНДС <> Перечисление.ЗначенияНДС.НДС0) Тогда
			Сообщить( "Ошибка подбора товара.","!" );
			Сообщить( Шаблон("Товар со ставкой [СтавкаНДСТовара] не может использоватся в данном документе."),"I" );
			Сообщить( Шаблон("В документе уже есть товары со ставкой [СтавкаНДС]."),"I" );
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	Возврат 1;
КонецФункции

Процедура УстМинСрокиРеализации()
	
	Если Склад.ТипСклада = Перечисление.ТипыСкладов.СкладРаспродажи Тогда
		//ничего не делаем
		Возврат;
	КонецЕсли;
	//определим мин. доп. срок реализации для отгрузки клиенту
	КлСроки=?(ПустоеЗначение(КлиентФилиала)=0,КлиентФилиала,Клиент);
	КлСроки.ИспользоватьДату(ДатаДок);
	// Запишем главного клиента
	Если КлСроки.КлГруппа.Выбран()=1 Тогда
		КлСроки=КлСроки.КлГруппа;
	КонецЕсли;       
	
	ДопСрокРеалКл=глПолучитьДопустСрокРеализацииТовараПоКлиенту(КлСроки,Товар);
	Если (ДопСрокРеалКл<>0) и (ПустоеЗначение(ДатаПоставки)=0) Тогда
		//если % допустимого срока задан - тогда рассчитаем мин. срок 
		СрокРеал = Окр( Товар.СрокГодн * ДопСрокРеалКл / 100, 0, 1 );
		МинСрокРеализ = ?( СрокРеал > 0, ДатаПоставки + СрокРеал, "" );
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетСреднегоЗаМес(колМес) 
	
	// Процедура для отображение среднего значения количества продукции в таблице Электроная Заявка.
		///////////////////////////////////////////////
		Запрос=СоздатьОбъект("ODBCRecordSet");
	
	//PR 13.11.15 отключил за ненадобностью
	СреднееЗаМес = 0;
	Возврат;
	
	ТекстЗапроса="
		|SELECT Avg($СчетСтроки.Количество*$СчетСтроки.Коэффициент) СреднееСчетСтрокиКоличество
		|FROM $Документ.Счет AS Счет With (NOLOCK)
		|INNER JOIN $ДокументСтроки.Счет AS СчетСтроки With (NOLOCK) ON Счет.IDDOC = СчетСтроки.IDDOC
		|WHERE ($Счет.Клиент = :ВыбКлиент)
		|AND ($Счет.ДатаПоставки >= :Нач2Месяца)
		|AND ($СчетСтроки.Товар = :ВыбТовар)"
	;

	Запрос.УстановитьТекстовыйПараметр("ВыбКлиент",Клиент);
	//здесь устанавливаем дату расчета среднего значения, по умолчанию ставим 2
	Запрос.УстановитьТекстовыйПараметр("Нач2Месяца",ДобавитьМесяц(ДатаДок,-КолМес));//ДобавитьМесяц(ДатаПоставки,-5));
	Запрос.УстановитьТекстовыйПараметр("ВыбТовар",Товар);
   
	СреднееЗаМес = Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	Если СреднееЗаМес=0 Тогда
		Сообщить("Клиент не брал продукцию с "+ ДобавитьМесяц(ДатаДок,-КолМес));
	КонецЕсли;
	
	
	////////////////////////////////////
	
КонецПроцедуры

Процедура ОбработкаПодбора(Выб)
	Если (семПроверкаСтавкиНДС( Выб ) = 0) Тогда Возврат; КонецЕсли; 

//бронирование

	Если ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда

		СкладТовара=глОпределитьСкладуПоТовару(Выб);
		Если (КоличествоСтрок()>1) И (Склад<>СкладТовара) Тогда
			Сообщить(Шаблон("В документе есть товары, которые привязаны к другому складу [Склад]. У добавленного товара склад [СкладТовара]!"));
		ИначеЕсли Склад<>СкладТовара Тогда
			Склад = СкладТовара;		
			Сообщить(Шаблон("Изменен склад в документе на [СкладТовара]"));
		КонецЕсли;
		
		Если фБроньвпути=1 Тогда
			
//			пОстаток=СвободноЗаказаныхТоваровНаСкладе(Выб);
			пОстаток=СвободноОжидаемыхТоваровНаСкладе(Выб);//заменен

			Сообщить("Остаток для заказа: "+пОстаток);
			Если пОстаток=0 Тогда
				Сообщить("Бронирование запрещено. Нет доступного кол-ва в ожидаемых поставках от поставщика !");
				Возврат;
			КонецЕсли;
		Иначе
			пОстаток=СвободныйОстатокТовараНаСкладе(Выб);
			Если пОстаток=0 Тогда
				Сообщить("Бронирование запрещено. Товара нет на складе! Попробуйте использовать режим Бронь в пути");
				Возврат;
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка Тогда
		
		//пОстаток=СвободныйОстатокТовараНаСкладе(Выб);
		//Если пОстаток=0 Тогда
		//	Если Вопрос("Нет доступного товара на складе. Возможно неверно выбран склада. Продолжить?","Да+Нет")="Да" Тогда
		//	Иначе
		//		Возврат;
		//	КонецЕсли;
		//КонецЕсли;

	КонецЕсли;	
	
	ЗапросКоличестваВПодборе(Контекст,Режим,Выб);
	
	УстанЦеныРасх(Контекст,"Подбор");
	семПроверкаМинОтргКолва( контекст );
//{бронирование
	Если (ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь) Тогда
	
		Если фБроньвпути=1 Тогда
			Если ПустоеЗначение(ДокументПривязки)=1 Тогда
				ВыбратьДокументПривязки(Выб);
				Если (ПустоеЗначение(ДокументПривязки)=0) И (ПустоеЗначение(ДатаПоставки)=1) Тогда
					
//					Если (ДокументПривязки.ДатаПрихода+ДокументПривязки.Клиент.ДнейНаПодготовку)< ТекущаяДата() Тогда
					Если (ДокументПривязки.ДатаПрихода<= ТекущаяДата()) Тогда

						Сообщить("Ошибка. Дата прихода Товара на склад меньше или равно текущей дате !");
						ДатаПоставки="";
						УдалитьСтроку();
						Возврат;
					Иначе
						ДатаПоставки=ДокументПривязки.ДатаПрихода+ДокументПривязки.Клиент.ДнейНаПодготовку;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			
			Если Количество*Коэффициент>пОстаток  Тогда
				Количество=пОстаток/Коэффициент;
				Сообщить(" Товара не хватает в заказе поставщика. Количество не может превышать заказаного товара !");
			КонецЕсли;
		Иначе
			Если Количество*Коэффициент>пОстаток  Тогда
				Количество=пОстаток/Коэффициент;
				Сообщить(" Товара не хватает на складе. Количество не может превышать остаток !");
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Если ДокументОснование.Вид()="Счет" Тогда
		Если ДокументОснование.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
			пРезервКоличество=(Количество*Коэффициент)+(Резерв*Коэффициент);
			Если пРезервКоличество>пОстаток  Тогда
				Количество=(пОстаток+Резерв)/Коэффициент;
				Сообщить(" Товара не хватает на складе. Количество не может превышать остаток+резерв (Забронированого Товара) !");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
//}бронирование	
	Выч_суммы_накл(Контекст);
	
	РасчетСреднегоЗаМес(2);// Процедура расчета среднего за ..(N) мес
	УстМинСрокиРеализации();
	
	АктивизироватьСтроку();       
КонецПроцедуры

Процедура ПечатьСтар()      
	Клиент.ИспользоватьДату(ДатаДок);
	Фирма.ИспользоватьДату(ДатаДок);
	Таб=СоздатьОбъект("Таблица");
	СтрПлат="";
	СтрБанкПлат="";
	ДобСтроку(СтрПлат," ИНН ",Фирма.ИНН);
	ДобСтроку(СтрПлат,", р/с ",РасчетныйСчет.Номер);
	ДобСтроку(СтрПлат," ",РасчетныйСчет.Банк);
	ДобСтроку(СтрПлат," в ",РасчетныйСчет.ГородБанка);
	ДобСтроку(СтрПлат,", БИК ",РасчетныйСчет.БИКБанка);
	ДобСтроку(СтрПлат,", корр.сч. ",РасчетныйСчет.КоррСчетБанка);
	Если РасчетныйСчет.ПрямыеРасчеты=0 Тогда
		ДобСтроку(СтрПлат," в ",РасчетныйСчет.БанкРасчетный);
		ДобСтроку(СтрПлат," в ",РасчетныйСчет.ГородБанкаРасчетного);
		ДобСтроку(СтрПлат,", БИК ",РасчетныйСчет.БИКБанкаРасчетного);
		ДобСтроку(СтрПлат,", корр.сч. ",РасчетныйСчет.КоррСчетБанкаРасчетного);
	КонецЕсли;
	Таб.ВывестиСекцию("Счет<");
	ВыбратьСтроки();
	Ном=0;
	ВСоставе=0;
	Пока ПолучитьСтроку() = 1 Цикл 
		Ном=Ном+1;
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;
	Таб.ВывестиСекцию("Счет>");
	Таб.Опции(0,0,0,0,ПарСтрДок);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Печать счета","");
КонецПроцедуры

Функция семУстановкаКатегорииЦены()
	Если семТекСтрана() = "LV" Тогда 
		Если глКодСтраныПользователя = "LT" Тогда Возврат семПолучитьКатегориюЦеныПоНаим( "Литва Оптовая" );
		ИначеЕсли глКодСтраныПользователя = "EE" Тогда Возврат семПолучитьКатегориюЦеныПоНаим( "Эстония Оптовая" );
		КонецЕсли;
	КонецЕсли;
	Если ПустоеЗначение(Пользователь.ОснКатегорияЦены)=0 Тогда
		Возврат Пользователь.ОснКатегорияЦены;
	Иначе
		Возврат Константа.ОсновнаяКатегорияЦены; 
	КонецЕсли;
КонецФункции

Процедура семУстановитьВалюту( флКопирования )
	Если флКопирования = 0 Тогда
		Валюта = Константа.ОсновнаяВалютаПродажи;
	КонецЕсли;
	Дата_Курса = ДатаДок;
	Курс = КурсДляВалюты( Валюта, Дата_Курса );
	Валюта_Прежн = Валюта;
	Курс_Прежн = Курс;
КонецПроцедуры

Процедура ВводНового( флКопирования )
	ЗаполнитьШапку(Контекст); //заполняем обязательные реквизиты в любом случае

	ИмяКомпьютера = ИмяКомпьютера();
	семУстановитьВалюту( флКопирования );
	Если флКопирования = 1 Тогда
		Выполнен = Нет; 
		ПризнакПечати = 0;   
		ДатаПоставки = "";
		ДатаПоставкиНач = "";
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
			Резерв=0;
		КонецЦикла;           
		ВидДоставки = "";
		АвтоВремяТекущее();          
		Самовывоз=0;
		ЦЧ=0;
		СкидкаНакл=0;
		СутьПретензии="";
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			ВидСкидки = "";
			УстанЦеныРасх(Контекст,"Подбор",0);
			семПроверкаМинОтргКолва( контекст );
			УстМинСрокиРеализации();
			Выч_суммы_накл(Контекст);
		КонецЦикла;
		Возврат;	    
	КонецЕсли;
	ДатаДок=РабочаяДата();
	// Для базовой валюты курс всегда равен 1, поэтому отображаем курс Основной валюты
	Клиент=Константа.ОсновнойПокупатель;
	//Подставляем клиента из спр. Фирмы по умолчанию
	Если Фирма<>Константа.ОсновнаяФирма Тогда
		Клиент=Фирма.Клиент;
		ВидДоставки = Перечисление.ВидыДоставки.Доставка;
	КонецЕсли;
	Склад = Константа.ОсновнойСклад;
	КатегорияЦены = семУстановкаКатегорииЦены();
	СтавкаНДС     = Константа.ОсновнаяСтавкаНДС;               
	СрокРезервирования=Константа.ОсновнойСрокРезервирования;
	ВидЗаявки = Перечисление.ВидыЗаявок.СпецЗаказ;   
	Если Пользователь.CashCarry=1 Тогда
		ВидДоставки=Перечисление.ВидыДоставки.Самовывоз;
		ВидОплаты=1;
	КонецЕсли;
	
	Форма.кнПечать.Видимость(0);
	Форма.кнПечатьСчет.Видимость(0); 
	Форма.кнПрямаяПечать.Видимость(0);
	Форма.кнПодчиненные.Видимость(0);
	АвтоВремяТекущее(); 
	семУстановкаКурса();

КонецПроцедуры

Процедура ВводНаОсновании(ДокОснование)
	
	ИмяКомпьютера = ИмяКомпьютера();
	ЕстьВидЗаявки = глЕстьРеквизитШапки("ВидЗаявки",ДокОснование.Вид());
	ЭтоБронь = 0;
	Если ЕстьВидЗаявки=1 Тогда
		Если ДокОснование.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
			ЭтоБронь = 1;
		КонецЕсли;
	КонецЕсли;
	
	Если	((ДокОснование.Вид()="Счет") И (ЭтоБронь =0)) ИЛИ
	(ДокОснование.Вид()="РасходнаяНакладная") ИЛИ
	(ДокОснование.Вид()="ПриходнаяНакладная") ИЛИ
	(ДокОснование.Вид()="РасходнаяРеализатора") ИЛИ
	(ДокОснование.Вид()="ПриходнаяРеализатора") Тогда
		ЗаполнитьШапкуНаОсн(Контекст,ДокОснование);
//		УстДефолтРасчСчета(Контекст);
		семУстановитьВалюту(0);
		ДатаДок=РабочаяДата();
		Клиент=Константа.ОсновнойПокупатель;
		Клиент.ИспользоватьДату(ДатаДок);
		СрокРезервирования=Константа.ОсновнойСрокРезервирования;
		ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка;
		Склад = Константа.ОсновнойСклад;
		КатегорияЦены = семУстановкаКатегорииЦены();
		СтавкаНДС     = Константа.ОсновнаяСтавкаНДС;               
		СрокРезервирования=Константа.ОсновнойСрокРезервирования;
		ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка;   
	
		УстановитьНовыйНомер("E6LV-BB");
		
		спВидОплаты.ТекущаяСтрока(спВидОплаты.НайтиЗначение(ВидОплаты));

		ДокОснование.ВыбратьСтроки();
		Пока ДокОснование.ПолучитьСтроку()=1 Цикл
			НоваяСтрока();
			ТовКод=ДокОснование.Товар.Код;
			Товар=ДокОснование.Товар;
			Цена=ДокОснование.Цена; 
			
			Единица=ДокОснование.Единица;
			Коэффициент=ДокОснование.Коэффициент;
			Количество=ДокОснование.Количество;
			Сумма=Цена*Количество*Коэффициент; 
			НДС=ДокОснование.НДС;
			
		КонецЦикла;
		АвтоВремяТекущее();
		семУстановкаКурса();
		
	ИначеЕсли (ДокОснование.Вид()="ПретензияПолученная") Тогда

		Если ДокОснование.Проведен()=0 Тогда
			Предупреждение("Нельзя вводить заявку на возврат на основании не проведенного документа!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
		
		ДокументОснование = ДокОснование;
		
		ЗаполнитьШапкуНаОсн(Контекст,ДокОснование);
		Основание = "";
		Клиент=ДокОснование.Клиент;
		Если Фирма<>Константа.ОсновнаяФирма Тогда
			КлиентФилиала=ДокОснование.КлиентФилиала;
			ВыборКлиентаФилиала();
		Иначе
			ВыборКлиента();
			КатегорияЦены = семУстановкаКатегорииЦены();
		КонецЕсли;
		СрокРезервирования=Константа.ОсновнойСрокРезервирования;
		ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаНаВозврат;
		
		поз=Найти(ДокОснование.НомерДок,"-");
		ПрефиксНомера=ФК+"PA-";//+Сред(ДокОснование.НомерДок,поз+1);
		УстановитьНовыйНомер(ПрефиксНомера);
		Склад = ДокОснование.Склад;
		Если ПустоеЗначение(Склад)=1 Тогда
			Склад = Константа.ОсновнойСклад;
		КонецЕсли;
		
//		СтавкаНДС = семПолучитьСтавкуНДС(Клиент,Контекст);
		спВидОплаты.ТекущаяСтрока(спВидОплаты.НайтиЗначение(ВидОплаты));
		
		ДокОснование.ВыбратьСтроки();
		Пока ДокОснование.ПолучитьСтроку()=1 Цикл
			НоваяСтрока();
			ТовКод=ДокОснование.Товар.Код;
			Товар=ДокОснование.Товар;
			Количество=ДокОснование.Количество;
			УстанЦеныРасх(Контекст,"Подбор");
			Цена = Пересчет(ДокОснование.Цена,Рубли,1,Валюта,ДатаДок);
			Сумма = Пересчет(ДокОснование.Сумма,Рубли,1,Валюта,ДатаДок);
			семПроверкаМинОтргКолва( контекст );
			Выч_суммы_накл(Контекст);
			УстМинСрокиРеализации();
			МинСрокРеализ = ДокОснование.СрокРеализ;
			АктивизироватьСтроку();       
		КонецЦикла;
		АвтоВремяТекущее();
		семУстановкаКурса();
	
		
	ИначеЕсли	(ДокОснование.Вид()="Счет") И (ДокОснование.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь) Тогда
//{бронирование ввод, на основании заполнения шапки документа	

		СостояниеЗаявки=глПолучитьСостояниеЗаявки(ДокОснование);
		
		Если СостояниеЗаявки="Пустая бронь" Тогда
			Предупреждение("Пустая бронь !","10");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
			
		Если НЕ (СостояниеЗаявки="Забронирован") Тогда
			Предупреждение("Заявка находится в состоянии <"+ СостояниеЗаявки+">!","10");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
			
		ЗаполнитьШапкуНаОсн(Контекст,ДокОснование);
		семУстановитьВалюту(0);
		ДатаДок=РабочаяДата();
		Клиент=Константа.ОсновнойПокупатель;
		Клиент.ИспользоватьДату(ДатаДок);
		СрокРезервирования=Константа.ОсновнойСрокРезервирования;
		ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка;
		КатегорияЦены = семУстановкаКатегорииЦены();
		СтавкаНДС     = Константа.ОсновнаяСтавкаНДС;               
		СрокРезервирования=Константа.ОсновнойСрокРезервирования;
		ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка;   
		ДокументОснование = ДокОснование;
		старЗаголовок=Форма.Заголовок();
		Форма.Заголовок(старЗаголовок+"На Основании Бронирования.");
		Основание = "";
		УстановитьНовыйНомер("E6LV-BB");
		
		Клиент=ДокОснование.Клиент;
		Если Клиент.ДляВыгрузки=1 Тогда
			флагГлКлиент=1;
		Иначе 
			флагГлКлиент=0;
		КонецЕсли;
		
		Если Фирма<>Константа.ОсновнаяФирма Тогда
			КлиентФилиала=ДокОснование.КлиентФилиала;
			ВыборКлиентаФилиала();
		Иначе
			ВыборКлиента();
			КатегорияЦены = семУстановкаКатегорииЦены();
		КонецЕсли;
		
		
		
		Склад = ДокОснование.Склад;
		Если ПустоеЗначение(Склад)=1 Тогда
			Склад = Константа.ОсновнойСклад;
		КонецЕсли;
		
		СкладПолучатель=ДокОснование.СкладПолучатель;
		ВидДоставки=ДокОснование.ВидДоставки;
		ДатаПоставки="";
		ПриВыбореДатыПоставки();
			
		старЗаголовокРезерв=Форма.Резерв.Заголовок();
		Форма.Резерв.Заголовок("Бронь. Ост.");
		Форма.ВидЗаявки.Доступность(0);

		спВидОплаты.ТекущаяСтрока(спВидОплаты.НайтиЗначение(ВидОплаты));

//////////////////////////////////////////////////////////////////////////////

		ДокОснование.ВыбратьСтроки();
		Пока ДокОснование.ПолучитьСтроку()=1 Цикл

			Рез=Регистр.РезервыТоваров.СводныйОстаток(ДокОснование.Товар,ДокОснование,"РезервТовара");
			Если Рез>0 Тогда
				НоваяСтрока();
				ТовКод=ДокОснование.Товар.Код;
				Товар=ДокОснование.Товар;
				Цена=ДокОснование.Цена; 
				Единица=ДокОснование.Единица;
				Коэффициент=ДокОснование.Коэффициент;
					
				Резерв=Рез/Коэффициент;
				Количество=Резерв;
				Сумма=Цена*Количество*Коэффициент;		
				НДС=ДокОснование.НДС;
			
			Иначе
				Сообщить("Количество Забронированого товара: "+ДокОснование.Товар+" -исчерпано !");
			КонецЕсли;
		КонецЦикла;
		АвтоВремяТекущее();
		семУстановкаКурса();	
	
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			УстанЦеныРасх(Контекст,"Подбор",0);
			семПроверкаМинОтргКолва( контекст );
			УстМинСрокиРеализации();
			Выч_суммы_накл(Контекст);
		КонецЦикла;		
//}бронирование			
	Иначе
		Предупреждение("Счет нельзя вводить на основании выбранного вида документа!",10);
		СтатусВозврата(0);
	КонецЕсли; 
КонецПроцедуры

Процедура ОбработкаВыбораЗначения(ВыбЗнач,ИдЭлДиал,ФлСтОбр)
	Если ИдЭлДиал = "Клиент" Тогда
		стар_Клиент = Клиент;  
		//*****<<PR>>(begin)
		Если  (Пользователь.РазрРасхНаклНерезидентам=0) И (ВыбЗнач.Страна<>Константа.СтранаРезидент) И (ВыбЗнач.ВидКлиента = Перечисление.ВидыКлиентов.Покупатель) Тогда
			Предупреждение("Выбран неправильный клиент!",10);
			СтатусВозврата(0);
		КонецЕсли;
		//*****<<PR>>(end)
	ИначеЕсли ИдЭлДиал = "ВидЗаявки" Тогда
		Если (ВыбЗнач=Перечисление.ВидыЗаявок.ЗаявкаНаВозврат) И (ДокументОснование.Вид()="ПретензияПолученная") Тогда
			Предупреждение("Заявку на возврат можно оформить только на основании претензии!",10);
			СтатусВозврата(0);
			ФлСтОбр=0;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры 

Процедура ВыборКлиента()
	Если Клиент.Выбран() = 1 Тогда
		Агент = Клиент.Агент;  
		Если (ПустоеЗначение(Агент)=1) Тогда
			Агент=Пользователь.Сотрудник;
		КонецЕсли;

		АдресДоставки = Клиент.АдресДоставки;
		АдресДоставкиДоп = Клиент.АдресДоставкиДоп;

		Если Найти(Клиент.ПоАлфавиту,"DAZADI PIRC")>0 Тогда
			ОткрытьФормуМодально("Обработка.ВводАдресаДоставки",Контекст);
			//здесь нужно вставить выбор адреса и улицы
		КонецЕсли;		
		
		
		ВыбратьГрафикМаршрутаДляКлиента();
	КонецЕсли;
	
	Если (ПустоеЗначение(стар_Клиент)=0) и (клиент<>стар_Клиент) Тогда
		
		//бронирование
		Если ДокументОснование.Вид()="Счет" Тогда
			Если ДокументОснование.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
				
				Если флагГлКлиент=1 Тогда
					Если НЕ (СокрЛП(стар_Клиент.Рег_номер) = СокрЛП(Клиент.Рег_номер)) Тогда
						Клиент=стар_Клиент;
						Сообщить("Выбран клиент не пренадлежащий группе клиентов бронирования.");
					КонецЕсли;					
				КонецЕсли;
				
				Если флагГлКлиент=0 Тогда
					Клиент=стар_Клиент;
					Сообщить("Выбран клиент не пренадлежащий к клиенту бронирования.");
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;	
		//бронирование	

		Если глПроверкаАгентаПоКлиенту(Контекст)=0 Тогда
			Клиент=стар_Клиент;
		КонецЕсли;             
		стар_Клиент="";
	КонецЕсли;
	КлГруппа=?(Клиент.КлГруппа.Выбран()=1,Клиент.КлГруппа,Клиент);
	
	Если (СокрЛП(Клиент.Рег_номер) = СокрЛП(Фирма.Рег_номер)) Тогда
		Если ПустоеЗначение(РозничныйТорговыйСклад)=0 Тогда
			СкладПолучатель = РозничныйТорговыйСклад;
		КонецЕсли;
	КонецЕсли;
	
	
	КатегорияЦены=?(Клиент.КатегорияЦены.Выбран()=1,Клиент.КатегорияЦены,КатегорияЦены);
	СтавкаНДС = семПолучитьСтавкуНДС(Клиент,Контекст);
	Если КатегорияЦены.Наименование = "Экспортная" Тогда
		промВалюта = семПолучитьВалютуПоНаим( "EUR" );
		Если ПустоеЗначение( промВалюта ) = 0 Тогда
			Валюта = промВалюта;
			Устан_Вал( Контекст, Дата_курса, Валюта_Прежн, Курс_Прежн );		
			семУстановкаКурса();
		КонецЕсли;
	КонецЕсли;
	Взаиморасчеты();
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		УстанЦеныРасх(Контекст);
		УстМинСрокиРеализации();
	КонецЦикла;  
	Если ПустоеЗначение(Клиент) = 0 Тогда
		Валюта = Клиент.ВалютаВзаиморасчетов; 
		Устан_Вал(Контекст,Дата_курса,Валюта_Прежн,Курс_Прежн);
		семУстановкаКурса();
	КонецЕсли;   
	Если Клиент.флЛояльность = 1 Тогда
		Предупреждение( "Potencialais Pastavigo Klientu Programmas dalibnieks.", 10 );
	КонецЕсли;
КонецПроцедуры //ВыборКлиента()`

Процедура ВыборКлиентаФилиала()
	Валюта=КлиентФилиала.ВалютаКредита;
	КатегорияЦены=?(КлиентФилиала.КатегорияЦены.Выбран()=1,КлиентФилиала.КатегорияЦены,КатегорияЦены);
	Устан_Вал( Контекст, Дата_курса, Валюта_Прежн, Курс_Прежн );
	Агент = КлиентФилиала.Агент;
	// сем \\ 
	семУстановкаКурса();
	// сем //
	Взаиморасчеты();
КонецПроцедуры

Процедура кнПровестиПриНажатии()
	Если Проведен()=0 Тогда
		//PR BEGIN 12.02.15 - делаем сортировку как в печатной форме на комплетктацию только если для склада указано место комплектации
		Если ПустоеЗначение(Склад.МестоКомплектации)=0 Тогда
			табл=СоздатьОбъект("ТаблицаЗначений");
			ВыгрузитьТабличнуюЧасть(табл);
			глСортТоварДляКомплектации(Контекст,табл);
			ЗагрузитьТабличнуюЧасть(табл);
		КонецЕсли;
		//PR END
	КонецЕсли;
	
	Провести();
	
	ВидимостьПроведения=1-Проведен();
	Если Проведен() = 1 Тогда
		Форма.ТолькоПросмотр( 1 );
		семДоступность();
	КонецЕсли;
КонецПроцедуры

Процедура ПриУдаленииСтроки()
	Если (Константа.НовыйМеханизмПретензий.Получить(ДатаДок)=Да) И (Проведен()=1) Тогда 
		Предупреждение("Нельзя удалять строки в проведенном документе. Для любых коррекций используйте документ комплектации заявки (факт.).");
		Если НазваниеНабораПрав()="Администратор" Тогда
		Иначе
			СтатусВозврата(0);
		КонецЕсли;
	КонецЕсли;
	
	Если (ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь) И (фБроньвпути=1) Тогда
		Если КоличествоСтрок()=1 Тогда
			ДокументПривязки=ПолучитьПустоеЗначение();
		КонецЕсли;
	КонецЕсли;
			

КонецПроцедуры

//======================================================================
Процедура кнВыборТовара()
		Если ДокументОснование.Вид() = "Служ_Основания" Тогда
			
			тз_ТоварыВзаявке=СоздатьОбъект("ТаблицаЗначений");
			тз_ТоварыВзаявке.НоваяКолонка("Заявка",,,,"Документы для обобщения");
			тз_ТоварыВзаявке.НоваяКолонка("Количество");
			
			тз_СписокЗаявок=СоздатьОбъект("ТаблицаЗначений");
			ДокументОснование.ВыгрузитьТабличнуюЧасть(тз_СписокЗаявок,"ДокОснование");
			тз_СписокЗаявок.ВыбратьСтроки();
			Пока тз_СписокЗаявок.ПолучитьСтроку() = 1 Цикл
				док=СоздатьОбъект("Документ.Счет");
				Если док.НайтиДокумент(тз_СписокЗаявок.ДокОснование)=1 Тогда
					док.ВыбратьСтроки();
					Пока док.ПолучитьСтроку() = 1 Цикл
						Если док.Товар=Товар Тогда
							тз_ТоварыВзаявке.НоваяСтрока();
							тз_ТоварыВзаявке.Заявка = док;
							тз_ТоварыВзаявке.Количество = док.Количество;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			тз_ТоварыВзаявке.ВыбратьСтроку(,"Количество товара ( "+Товар.КодТовара+") в документах для обобщения");		
		КонецЕсли;
КонецПроцедуры // кнВыборТовара

Процедура ПриНачалеРедактированияСтроки()
	Если Найти(Форма.ТекущаяКолонка(),"Цена")>0 Тогда
		
		ЦенаКат_=ЦенаТовараПоКатегории(Контекст,КатегорияЦены,1,ДатаПоставки);
		Если ЦенаКат_=0 Тогда
			Предупреждение("У товара для данной категории цена не определена. Редактирование запрещено!");
			СтатусВозврата(0);
		КонецЕсли;
		
		
		ПредЦена=Цена;
		ЗапретСкидки=0;
		спр = СоздатьОбъект( "Справочник.Цены" );
		спр.ИспользоватьВладельца( Товар );
		спр.ВыбратьЭлементы();
		Пока спр.ПолучитьЭлемент() = 1 Цикл
			Если спр.ПометкаУдаления() = 1 Тогда 
				Продолжить; 
			КонецЕсли;
			Если (спр.КатегорияЦены = КатегорияЦены) Тогда
				ЗапретСкидки=спр.ЗапретСкидки;
			КонецЕсли;
		КонецЦикла;
		

		НедельныйАкцент=глВернутьАкцентТовара(Товар,глКодСтраныПользователя);
		//НедельныйАкцент=Товар.ПолучитьАтрибут("Выделить"+?(глКодСтраныПользователя="LV","",глКодСтраныПользователя));
		Если (ЗапретСкидки=1) И ((НедельныйАкцент=1) ИЛИ (Склад.ТипСклада = Перечисление.ТипыСкладов.СкладРаспродажи)) Тогда
			//тогда можно редактировать
		ИначеЕсли (ЗапретСкидки=1) Тогда
			
			Предупреждение("У данного товара нельзя устанавливать цену вручную!");
			СтатусВозврата(0);
		КонецЕсли;
		
		Если ПустоеЗначение(Пользователь.Сотрудник.Должность)=1 Тогда
			Предупреждение("У вас нет прав устанавливать цену вручную. Отсутствует привязка к должности!");
			СтатусВозврата(0);
		КонецЕсли;
		
		Если ПустоеЗначение(ДатаПоставки)=1 Тогда
			Предупреждение("Перед установкой цены Вы должны указать дату поставки!");
			СтатусВозврата(0);
		КонецЕсли;
		
	ИначеЕсли Форма.ТекущаяКолонка()="Количество" Тогда
		Если (Константа.НовыйМеханизмПретензий.Получить(ДатаДок)=Да) и (Проведен()=1) Тогда 
			Предупреждение("Нельзя изменять кол-во в документе. Для любых коррекций используйте документ комплектации заявки (факт).");
			СтатусВозврата(0);
		КонецЕсли;
		//ИначеЕсли Форма.ТекущаяКолонка()="Резерв" Тогда	
		//
		//Если ДокументОснование.Вид() = "Служ_Основания" Тогда
		//	
		//	тз_ТоварыВзаявке=СоздатьОбъект("ТаблицаЗначений");
		//	тз_ТоварыВзаявке.НоваяКолонка("Товар");
		//	тз_ТоварыВзаявке.НоваяКолонка("Количество");
		//	
		//	тз_СписокЗаявок=СоздатьОбъект("ТаблицаЗначений");
		//	ДокументОснование.ВыгрузитьТабличнуюЧасть(тз_СписокЗаявок,"ДокОснование");
		//	тз_СписокЗаявок.ВыбратьСтроки();
		//	Пока тз_СписокЗаявок.ПолучитьСтроку() = 1 Цикл
		//		док=СоздатьОбъект("Документ.Счет");
		//		Если док.НайтиДокумент(тз_СписокЗаявок.ДокОснование)=1 Тогда
		//			док.ВыбратьСтроки();
		//			Пока док.ПолучитьСтроку() = 1 Цикл
		//				Если док.Товар=Товар Тогда
		//					тз_ТоварыВзаявке.НоваяСтрока();
		//					тз_ТоварыВзаявке.Товар = док.Товар;
		//					тз_ТоварыВзаявке.Количество = док.Количество;
		//				КонецЕсли;
		//			КонецЦикла;
		//		КонецЕсли;
		//	КонецЦикла;
		//	тз_ТоварыВзаявке.ВыбратьСтроку();		
		//Иначе
		//	Возврат;
		//КонецЕсли;
	
		
	КонецЕсли;
КонецПроцедуры
 
Функция ПроцентСкидки(Точность)
	
	Если (ПустоеЗначение(Товар)=0) И ((Сумма+Скидка)<>0) Тогда
		Возврат Окр(Скидка/(Сумма+Скидка)*100,Точность);
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Процедура ПриОкончанииРедактированияСтроки(НовСтр)
	
	Если (Найти(Форма.ТекущаяКолонка(),"Цена")>0) И (ВидСкидки=Перечисление.ВидСкидки.Документ) И (ВидЗаявки<>Перечисление.ВидыЗаявок.ЗаявкаНаВозврат) Тогда
		//запросим у пользователя пояснение для установки цены вручную
		
		ПроцентСкидки = ПроцентСкидки(0);
		//Сообщить("% скидки: "+ПроцентСкидки);
		
		ОграничениеСкидки = глОграничениеСкидкиНаТовар(Пользователь,Товар,КатегорияЦены,ДатаПоставки);
		НедельныйАкцент=Товар.ПолучитьАтрибут("ВыделитьАкц"+Фирма.Страна.Код).Получить(РабочаяДата());
		//НедельныйАкцент=Товар.ПолучитьАтрибут("Выделить"+?(глКодСтраныПользователя="LV","",глКодСтраныПользователя));
		Если НедельныйАкцент=1 Тогда
			ОграничениеСкидки = Макс(Константа.РазмерСкидкиДляАкцентов,ОграничениеСкидки); //для недельных акцентов увеличиваем процент скидки до 40.
		КонецЕсли;
	
		Если (ОграничениеСкидки=0) И ((Склад.ТипСклада = Перечисление.ТипыСкладов.Склад) ИЛИ (Склад.ТипСклада = Перечисление.ТипыСкладов.СкладСвежихПродуктов))  Тогда
			//если ограничение скидки не стоит в должности у сотрудника - действует обычный механизм
			Пояснение=ПояснениеСкидки;
			Если ВвестиСтроку(Пояснение,"Введите причину изменения цены",60)=1 Тогда
				Если СтрДлина(СокрЛП(Пояснение))<6 Тогда
					Предупреждение("Слишком короткое объяснение!");
					СтатусВозврата(0);
				КонецЕсли;
				ПояснениеСкидки=Пояснение;
			Иначе
				Предупреждение("Без ввода пояснения нельзя изменить цену вручную!");
				СтатусВозврата(0);
			КонецЕсли;
		ИначеЕсли (ОграничениеСкидки < Окр(ПроцентСкидки,0)) И ((Склад.ТипСклада = Перечисление.ТипыСкладов.Склад) ИЛИ (Склад.ТипСклада = Перечисление.ТипыСкладов.СкладСвежихПродуктов)) Тогда
			Предупреждение("Вы превысили макс. разрешенный для Вас размер скидки на товар <"+ОграничениеСкидки+"%> -  требуется по документу <"+ПроцентСкидки+"%>!");
			СтатусВозврата(0);
		КонецЕсли;
	КонецЕсли;	

//{бронирование расчет мах количества
	
	Если ДокументОснование.Вид()="Счет" Тогда
		Если (ДокументОснование.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь)И(Резерв>0) Тогда
			пОст=СвободныйОстатокТовараНаСкладе(Товар);
			пОстатокБронь=пОст+Резерв;
		
			Если Количество>пОстатокБронь Тогда
				Количество=пОстатокБронь;
				Сообщить("Товар нельзя заказать свыше сумме Остатков и Брони !");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Если ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
		
		Если фБроньвпути=1 Тогда
			//ВыбратьДокументПривязки(Товар);
//			пОстаток=СвободноЗаказаныхТоваровНаСкладе(Товар);
			пОстаток=СвободноОжидаемыхТоваровНаСкладе(Товар);


			Если Количество*Коэффициент>пОстаток  Тогда
				Количество=пОстаток/Коэффициент;
				Сообщить(" Товара не хватает в заказе поставщика. Количество не может превышать заказаного товара !");
			КонецЕсли;
		Иначе
			пОст=СвободныйОстатокТовараНаСкладе(Товар);
			пОстатокБронь=пОст+Резерв;		
			Если Количество>пОстатокБронь Тогда
				Количество=пОстатокБронь;
				Сообщить("Товар нельзя забронировать свыше Остатков !");
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
//}бронирование			

КонецПроцедуры

Процедура ПриНачалеВыбораЗначения(Элем,ФлагСт)
	Если Элем="КлиентФилиала" Тогда
		ФлагСт=0;
		СтатусВозврата(0);
		Кл=СоздатьОбъект("Справочник.Контрагенты");
		Если ПустоеЗначение(КлиентФилиала)=0 Тогда
			Кл.НайтиЭлемент(КлиентФилиала);
		КонецЕсли;

		АдресДоставки	=Кл.АдресДоставки;
		АдресДоставкиДоп=Кл.АдресДоставкиДоп;

		Кл.ИспользоватьРодителя(Фирма.ОснГруппаКлиентов,0);
		Если Кл.Выбрать("Выберите клиента...","")=1 Тогда
			
			КлиентФилиала=Кл.ТекущийЭлемент();
			Если КлиентФилиала = Фирма.Клиент Тогда
				Предупреждение("В качестве конечного клиента не может быть выбран клиент "+КлиентФилиала+".
				|Для пополнения склада филиала заявка ДОЛЖНА делаться от имени Латвийского агента!");
				КлиентФилиала = "";
				Возврат;
			КонецЕсли;
			
			АдресДоставки	=Кл.АдресДоставки;
			АдресДоставкиДоп=Кл.АдресДоставкиДоп;

			Валюта=КлиентФилиала.ВалютаКредита;
			КатегорияЦены=?(КлиентФилиала.КатегорияЦены.Выбран()=1,КлиентФилиала.КатегорияЦены,КатегорияЦены);
			Устан_Вал( Контекст, Дата_курса, Валюта_Прежн, Курс_Прежн );
			Агент = КлиентФилиала.Агент;
			// сем \\ 
			семУстановкаКурса();
			// сем //
			Взаиморасчеты();
		КонецЕсли;
	ИначеЕсли Элем="ВидЗаявки" Тогда
		ФлагСт=0;
		сп=СоздатьОбъект("СписокЗначений");
		сп.ДобавитьЗначение(Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка);
		сп.ДобавитьЗначение(Перечисление.ВидыЗаявок.СпецЗаказ);
		сп.ДобавитьЗначение(Перечисление.ВидыЗаявок.ЗаявкаНаВозврат);
		
		Если семЕстьПраво("Документ","Счет","Бронирование")=1 Тогда
			сп.ДобавитьЗначение(Перечисление.ВидыЗаявок.ЗаявкаБронь);
		КонецЕсли;
	//Бронирование в пути	
	//	Если семЕстьПраво("Документ","Счет","Бронь в пути")=1 Тогда
	//		сп.ДобавитьЗначение(Перечисление.ВидыЗаявок.Броньвпути);
	//	КонецЕсли;

		
		Если Константа.НовыйМеханизмПретензий.Получить(ДатаДок)<>Да Тогда
			//по старой системе разрешаем выбрать возврат от покупателя в приходном документе 
			сп.ДобавитьЗначение(Перечисление.ВидыЗаявок.ЗаявкаНаВозврат);
		КонецЕсли;
		
		сп.ВыбратьЗначение(ВидЗаявки,,,,1);
		
		Если ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
			
			ПрефиксНомера=ФК+"B-";
			УстановитьНовыйНомер(ПрефиксНомера);
			семЗаголовокОкна(контекст);
			Форма.Заголовок(Форма.Заголовок()+" Бронирование.");
			УдалитьСтроки();
			Форма.ВидЗаявки.Доступность(0);
		КонецЕсли;	
		
	ИначеЕсли Элем="ВидДоставки" Тогда
		ФлагСт=0;
		сп=СоздатьОбъект("СписокЗначений");
		сп.ДобавитьЗначение(Перечисление.ВидыДоставки.Доставка);
		
		Если (Клиент.ВидКлиента=Перечисление.ВидыКлиентов.Покупатель) Тогда
			сп.ДобавитьЗначение(Перечисление.ВидыДоставки.Агент);
		КонецЕсли;

		Если (ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаНаВозврат) И (Клиент.ВидКлиента=Перечисление.ВидыКлиентов.Поставщик) Тогда
			сп.ДобавитьЗначение(Перечисление.ВидыДоставки.Поставщик);
		ИначеЕсли (ВидЗаявки<>Перечисление.ВидыЗаявок.ЗаявкаНаВозврат) Тогда
			сп.ДобавитьЗначение(Перечисление.ВидыДоставки.Самовывоз);
		КонецЕсли;
		сп.ТекущаяСтрока(сп.НайтиЗначение(ВидДоставки));
		сп.ВыбратьЗначение(ВидДоставки,,,,1);
		
	ИначеЕсли  Элем="ДокументПривязки" Тогда		
		СтатусВозврата(0);
		//ЗапросДокументПривязки();
	ИначеЕсли Элем="фБроньвПути" Тогда
		Если фБроньвпути=0 Тогда
			ДокументПривязки=ПолучитьПустоеЗначение();
		КонецЕсли;
	ИначеЕсли Элем="КатегорияСписания" Тогда
		ФлагСт=0;
		СтатусВозврата(0);
		Меню=СоздатьОбъект("СписокЗначений");
		
		Меню.ДобавитьЗначение(Перечисление.КатегорииСписания.Категория3);
		Меню.ДобавитьЗначение(Перечисление.КатегорииСписания.Категория4);
		
		выб=КатегорияСписания;
		Если Меню.ВыбратьЗначение(выб,"Выберите категорию списания",,,2)=1 Тогда
			КатегорияСписания=выб;       
			
			ТекстЗапроса="SELECT КатегорииСписанияДоп.ID [Ссылка $Справочник.КатегорииСписанияДоп]
//			|					, КатегорииСписанияДоп.DESCR Наименование
			|			  FROM $Справочник.КатегорииСписанияДоп AS КатегорииСписанияДоп With (NOLOCK)
			|			  INNER JOIN $Справочник.КатегорииСписания AS КатегорииСписания With (NOLOCK) ON КатегорииСписанияДоп.PARENTEXT = КатегорииСписания.ID
			|			  WHERE (КатегорииСписанияДоп.ISMARK = 0) AND $КатегорииСписания.КатегорияСписания = :ВыбКатегорияСписания
			|";

			КатегорияСписанияДоп="";
			
			Запрос = СоздатьОбъект("ODBCRecordSet");
			Запрос.УстановитьТекстовыйПараметр("ВыбКатегорияСписания",КатегорияСписания);
			Спис = СоздатьОбъект("СписокЗначений");
			Запрос.ВыполнитьИнструкцию(ТекстЗапроса,Спис);
			Если Спис.РазмерСписка()=0 Тогда
				Возврат;
			КонецЕсли;
			Спис.ВыбратьЗначение(КатегорияСписанияДоп,,,,1);   
			
			Если ПустоеЗначение(КатегорияСписанияДоп)=1 Тогда
				КатегорияСписания="";
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры

Функция ВыборСутиПретензии()

		Запрос=СоздатьОбъект("ODBCRecordSet");
		Запрос.УложитьСписокОбъектов(Константа.СутьПретензийB,"#СутиПретензийB","Претензии");
		ЗапросПретензий="SELECT Val FROM #СутиПретензийB";
		УсловиеСклад="";
		
		ТекстЗапроса="SELECT Претензии.CODE Код
		|					, Претензии.ID [Ссылка $Справочник.Претензии]
		|					, $Претензии.НаименованиеРусс СутьПретензии
		|			  FROM $Справочник.Претензии AS Претензии (NOLOCK)
		|			  WHERE ISMARK = 0 AND ISFOLDER = 2 AND $Претензии.ДляИзмененияДатыПоставки=1
		|			  ORDER BY CODE
		|";
		
		
		табл=СоздатьОбъект("ТаблицаЗначений");
		табл=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
		табл.ВидимостьКолонки("Ссылка",0);
		ном=0;
		Если табл.ВыбратьСтроку(ном,"Выберите причичину переноса даты доставки")=1 Тогда
			Возврат табл.ПолучитьЗначение(ном,"Ссылка");
		Иначе
			Возврат ПолучитьПустоеЗначение("Справочник.Претензии");
		КонецЕсли;

КонецФункции


Процедура ПриВыбореДатыПоставки()
	                                    
	Если (ПустоеЗначение(ДатаПоставкиНач)=0) И (ДатаПоставки<>ДатаПоставкиНач) Тогда
		//здесь нужно запросить претензию
		спр=ВыборСутиПретензии();
	
		Если ПустоеЗначение(Спр)=1 Тогда
			Предупреждение("Вы не выбрали суть претензии. Дата поставки не будет изменена!");
			ДатаПоставки = ДатаПоставкиНач;
			Возврат;
		КонецЕсли;
		
		СутьПретензии = спр.ТекущийЭлемент();
			
	ИначеЕсли (ПустоеЗначение(ДатаПоставкиНач)=0) И (ДатаПоставки=ДатаПоставкиНач) Тогда
		
		СутьПретензии = "";
		
	КонецЕсли;
	
	ВыбратьГрафикМаршрутаДляКлиента();	
	Если КоличествоСтрок() = 0 Тогда Возврат; КонецЕсли;
	Ответ = Вопрос("Измененна дата поставки товара. Пересчитать цены?","Да+Нет",60);
	Если Ответ <> "Да" Тогда Возврат; КонецЕсли;
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		УстанЦеныРасх(Контекст,"Подбор",0);
		семПроверкаМинОтргКолва( контекст );
		УстМинСрокиРеализации();
		Выч_суммы_накл(Контекст);
	КонецЦикла;
КонецПроцедуры

//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписи() Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ПриЗаписи()
	//Закомментировано Инсталлятором МОД:Процедура ПриЗаписи()
	Если семМожноЗаписать( Контекст ) = 0 Тогда Возврат; КонецЕсли;
	Если семПроверкаДатыПоставки( контекст ) = 0 Тогда Возврат; КонецЕсли;
	//не выгружаем документ в филиал, если эл. заявка выписана для пополнения склада на филиале
	Если (КлиентФилиала = Клиент) И (Фирма<>Константа.ОсновнаяФирма) Тогда
		НеВыгружать=1;	
	КонецЕсли;
	
	//проверяем заполнение Категории для заявкина списание 
	Если ВидОплаты = 5 Тогда 
		Если ПустоеЗначение(КатегорияСписания)=1 Тогда
			Предупреждение("Не выбрана категория списания!");
			СтатусВозврата(0);
		КонецЕсли;
	КонецЕсли;
	
	Если (СтрДлина(НомерДок)<12) И (Лев(НомерДок,4)="E1LV") И (Выбран()=0) Тогда
		Предупреждение("Номер документа слишком короткий!");
		СтатусВозврата(0);
	КонецЕсли;

	Если ВидЗаявки=Перечисление.ВидыЗаявок.СпецЗаказ Тогда
		спПоставщики=СоздатьОбъект("СписокЗначений");
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Если спПоставщики.НайтиЗначение(Товар.Поставщик)=0 Тогда
				спПоставщики.ДобавитьЗначение(Товар.Поставщик);
			КонецЕсли;
		КонецЦикла;	
	
		ТекстЗапроса = "SELECT $КлиентЗаказыПоставщикам.Время Время
		|				FROM $Справочник.КлиентЗаказыПоставщикам AS КлиентЗаказыПоставщикам With (NOLOCK)
		|				WHERE (КлиентЗаказыПоставщикам.PARENTEXT = :ВыбКлиент) AND $КлиентЗаказыПоставщикам.ДатаПоставкиОт<=:ДатаПоставки AND $КлиентЗаказыПоставщикам.ДатаПоставкиДо>=:ДатаПоставки
		|";
		
		Запрос = СоздатьОбъект("ODBCRecordSet");
	
		Для н = 1 По спПоставщики.РазмерСписка() Цикл
			Поставщик = спПоставщики.ПолучитьЗначение(н);
			Запрос.УстановитьТекстовыйПараметр("ВыбКлиент",Поставщик);
			Запрос.УстановитьТекстовыйПараметр("ДатаПоставки",ДатаПоставки);
			ВремяЗаказа = Запрос.ВыполнитьСкалярный(ТекстЗапроса);
			Если ПустоеЗначение(ВремяЗаказа)=0 Тогда
				Сообщить(Шаблон("Cпец. заказ для поставщика [Поставщик] на [ДатаПоставки] размещен после заказа поставщику. Нет гарантии обеспечения товаров. ОБРАТИТЕСь в закупку!"));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//СортТовар(); 
	ВсегоСуммаШ = Итог("НДС") + Итог("Сумма");
	ВсегоНДСШ	= Итог("НДС");
	
КонецПроцедуры
Процедура кнПриНажатииЗаписать()
	//СортТовар();
	стар_ПриЗаписи();
	Записать();
	
КонецПроцедуры

//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписи()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	стар_ПриЗаписи();
	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
КонецПроцедуры                             
//Конец текста, вставленного Инсталлятором МОД

Процедура ПриВыбореСамовывоза()
	Если Самовывоз=0 Тогда
		Самовывоз = Константа.ПроцентСкидкиНаСамовывоз;
		Если ВвестиЧисло(Самовывоз,"Введите скидку на самовывоз",3,0)=0 Тогда
			Возврат;
		КонецЕсли;
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Цена=Цена * ( 1 - Самовывоз / 100 );
	        Выч_суммы_накл_сНП(Контекст);
		КонецЦикла;
		
	Иначе
				
		Если Вопрос(Шаблон("Отмена скидки на самовывоз.
		|Цены будут увеличины на [Самовывоз]%.
		|Продолжить?"),"Да+Нет",60)="Да" Тогда
		Иначе
			Возврат;
		КонецЕсли;

		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Цена=Цена / ( 1 - Самовывоз / 100 );
		        Выч_суммы_накл_сНП(Контекст);
		КонецЦикла;
		
		Самовывоз=0;
	КонецЕсли;
	   
КонецПроцедуры

Процедура УстВидаОплаты()
	спВидОплаты.ТекущаяСтрока(спВидОплаты.НайтиЗначение(ВидОплаты));
КонецПроцедуры

Процедура ПроверитьФайл()
	Если ФС.СуществуетФайл(СокрЛП(Константа.КаталогОбменаECOD)+"\import\Check_file.ert") <> 0 Тогда
		ОткрытьФорму("Отчет",ТекущийДокумент(),СокрЛП(Константа.КаталогОбменаECOD)+"\import\Check_file.ert");
	КонецЕсли;
	
КонецПроцедуры

Процедура процВидЗаявки(флБронирования)
//{ Начало Изменения отображения заявки для бронирования

	
	
//	Форма.КатегорияЦены.Видимость(1-флБронирования);
//	Форма.Цена.Видимость(1-флБронирования);
//	Форма.ЦенаСНДС.Видимость(1-флБронирования);
//	Форма.таблЦенаИзКаталога.Видимость(1-флБронирования);
//	Форма.ВидСкидки.Видимость(1-флБронирования);
//	Форма.Скидка.Видимость(1-флБронирования);
//	Форма.таблПроц.Видимость(1-флБронирования);

	
	
	Форма.ЦЧ.Видимость(1-флБронирования);
//	Форма.Основание.Видимость(1-флБронирования);
//	Форма.тОснование.Видимость(1-флБронирования);
	
//	Форма.тСумма.Видимость(1-флБронирования);
//	Форма.ттабСумма.Видимость(1-флБронирования);
//	Форма.тИтогСумма.Видимость(1-флБронирования);
//	Форма.тНДС.Видимость(1-флБронирования);
//	Форма.тИтогНДС.Видимость(1-флБронирования);
//	Форма.тВсего.Видимость(1-флБронирования);
//	Форма.тИтогВсего.Видимость(1-флБронирования);
	Форма.кнПроверитьФайл.Видимость(1-флБронирования);
	
//	Форма.тСкидка.Видимость(1-флБронирования);
//	Форма.тИтогСкидка.Видимость(1-флБронирования);
//	Форма.тПроцСкидка.Видимость(1-флБронирования);
	Форма.СкидкаНакл.Видимость(1-флБронирования);
	//Форма.тАвторБрони.Видимость(0+флБронирования);
	
//	Форма.тКатегорияЦены.Видимость(1-флБронирования+фБроньвпути);
//	Форма.КатегорияЦены.Видимость(1-флБронирования+фБроньвпути);
	
	Форма.тМаршрут.Видимость(1-флБронирования);
	Форма.тФорматВыводаМаршрута.Видимость(1-флБронирования);
	
	
	Форма.тИнформационнаяСтрока.Видимость(1-флБронирования);
	Форма.тДоговор.Видимость(1-флБронирования);
	Форма.тИнфоДоговор.Видимость(1-флБронирования);
	Форма.тИнфоПродажа.Видимость(1-флБронирования);
//	Форма.тВидОплаты.Видимость(1-флБронирования+фБроньвпути);
//	Форма.спВидОплаты.Видимость(1-флБронирования+фБроньвпути);
	Форма.текстМаршрут.Видимость(1-флБронирования);
	
	Форма.тДниОбсл.Видимость(1-флБронирования);
	Форма.тВалюта.Видимость(1-флБронирования);
	
//	Форма.лДатаПоставки.Видимость(1-флБронирования);
//	ДатаПоставки=ДатаДок;
//	Форма.ДатаПоставки.Видимость(1-флБронирования);
	
//	Форма.тВидДоставки.Видимость(1-флБронирования+фБроньвпути);
//	Форма.ВидДоставки.Видимость(1-флБронирования+фБроньвпути);
	Форма.лДатаПоставки.Заголовок(?(флБронирования=0,"Дата поставки:","Срок Брони"));
// бронь в пути
	Форма.фБроньвпути.Видимость(флБронирования);
//	Форма.рамБронь.Видимость(флБронирования);
	Форма.тБроньвпути.Видимость(флБронирования);
	Форма.ДокументПривязки.Видимость(флБронирования);
	Форма.кнИнфоЗакПостав.Видимость(флБронирования);
	Форма.ргрБроньвпути.Видимость(флБронирования);
	
//} Конец Изменения отображения заявки для бронирования
	
КонецПроцедуры


//======================================================================
Процедура ПриВводеСкидки()
	ПроцентСкидки = СкидкаНакл;
	//Сообщить("% скидки: "+ПроцентСкидки);
	ОграничениеСкидки = Макс(Пользователь.Сотрудник.Должность.ТекущийЭлемент().РазмерСкидки,3);
	Если (ОграничениеСкидки < Окр(ПроцентСкидки,0)) И (Склад.ТипСклада = Перечисление.ТипыСкладов.Склад) Тогда
		СкидкаНакл = ОграничениеСкидки;
		Сообщить("Выпревысили макс. разрешенный для Вас размер скидки на товар <"+ОграничениеСкидки+"%> -  требуется по документу <"+ПроцентСкидки+"%>!");
		СтатусВозврата(0);
	КонецЕсли;
		
	ПриИзмененииСкидкиДокумента(Контекст)

КонецПроцедуры // ПриВводеСкидки

/////********************* FormEx { ******************************************************
//Процедура ПриНажатииКнопкиКлавиатуры(КодКлавиши, Alt, Shift, Ctrl, Символ, ФСО)
//	оПолеВвода_Контрагент.ПриНажатииКнопкиКлавиатуры(КодКлавиши, Alt, Shift, Ctrl, Символ, ФСО);
//КонецПроцедуры
//
//Процедура ПриНажатииЛевойКнопки(Сост, Лево, Верх)
//	оПолеВвода_Контрагент.ПриНажатииЛевойКнопки(Сост, Лево, Верх);
//КонецПроцедуры
//
//Процедура ПриОтжатииЛевойКнопки(Сост, Лево, Верх)
//	оПолеВвода_Контрагент.ПриОтжатииЛевойКнопки(Сост, Лево, Верх);
//КонецПроцедуры
////} FormEx ******************************************************
//
//Сервис.ПерехватКлавиатуры(1);

//******************************************************************************
Функция Раскрасить()             
        
	Выделить_=Товар.ПолучитьАтрибут("ВыделитьАкц"+Фирма.Страна.Код).Получить(РабочаяДата());
	//Выделить_=?(глКодСтраныПользователя="LV",Товар.Выделить,Товар.ПолучитьАтрибут("Выделить"+глКодСтраныПользователя));
	Если (Выделить_=1) Тогда
		Возврат "FONT["+Константа.ЦветВыделенногоТовара.НомерЦвета+"]BRUSH["+Константа.ФонВыделенногоТовара.НомерЦвета+"]COUNT[2]IDENT[0]";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

//******************************************************************************
Функция РаскраситьЦену()             
        
	Если Число(ДатаПоставки) = 0 Тогда
		ДатаЦены = ДатаДок;
	Иначе
		ДатаЦены = ДатаПоставки;
	КонецЕсли;
	ЦенаИзКат = ЦенаТовараПоКатегорииДляТовара(Товар,КатегорияЦены,Валюта,Курс,ДатаЦены);
	
	Если (Окр(ЦенаИзКат,2)<Окр(Цена,2)) Тогда
		Возврат "BRUSH["+глПолучитьЦвет(255)+"]COUNT[3]IDENT[0]";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции


Процедура УстановитьНовыйНомерДок()
	
	УстановитьНовыйНомер(Шаблон("E[Прав(Строка(ДатаГод(РабочаяДата())),1)][семТекСтрана()]-B"));
КонецПроцедуры
Валюта_Прежн=Валюта;
Курс_Прежн=Курс;
Клиент.ИспользоватьДату(ДатаДок);
//-----------------------------------------------
спВидОплаты.ДобавитьЗначение(0,"Кредит");
спВидОплаты.ДобавитьЗначение(1,"Наличные");
спВидОплаты.ДобавитьЗначение(2,"Отв. хранение");
спВидОплаты.ДобавитьЗначение(3,"Реализация");
спВидОплаты.ДобавитьЗначение(4,"Обмен товара");
спВидОплаты.ДобавитьЗначение(5,"Списание");

Попытка
	Расш=СоздатьОбъект("РасширениеФормы");
Исключение
	Расш="";
КонецПопытки;