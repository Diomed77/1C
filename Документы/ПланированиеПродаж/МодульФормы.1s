Перем спТоваров;
Перем ВалютаПреж;

Перем гЭлементУправления;
Перем гКнига;
Перем гЛисты; // Порядок следования больших и малых букв верен!
Перем гСтараяЗакладка;
Перем ВременнаяТаблица;

Функция ВыбратьФайл (ИмяФайла, РасширениеФайла, ТипДиалога = 0)
	ВремИмяФайла = ИмяФайла;
	ВремИмяКаталога = "";
	Если ФС.ВыбратьФайл (ТипДиалога, ВремИмяФайла, ВремИмяКаталога,,
		"Файлы " + РасширениеФайла + " (*." + РасширениеФайла + ")|*." + РасширениеФайла, РасширениеФайла) = 0 Тогда
			
		Возврат 0;
	КонецЕсли;
	
	Возврат ВремИмяКаталога + ВремИмяФайла;
КонецФункции



Процедура Очистить()
	Ответ = Вопрос( "Все строки будут удалены. Продолжить?", 4 );
	Если Ответ = 6 Тогда УдалитьСтроки(); КонецЕсли;
КонецПроцедуры

//======================================================================
Процедура кнОбнулить()
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		ПланВал = 0;
		План = 0;
		ПланОбщепит = 0;
		ПланРозница = 0;
	КонецЦикла;
	
КонецПроцедуры // гл

Процедура Подбор()
	ВыгрузитьТабличнуюЧасть( спТоваров, "Товар" );
	ОткрытьПодбор("Номенклатура","ФормаСписка");
КонецПроцедуры

Процедура ОбработкаПодбора( ВыбТовар )
	Если ВыбТовар.Выбран() = 0 Тогда НеКатит = 1;
	ИначеЕсли ВыбТовар.ЭтоГруппа() = 0 Тогда НеКатит = 1;
	ИначеЕсли ВыбТовар.Уровень() > 3 Тогда НеКатит = 1;
	КонецЕсли;
	Если НеКатит = 1 Тогда 
		Предупреждение( "В документ вводятся только группы 1-го и 2-го уровней." );
		Возврат;
	КонецЕсли;
	Если спТоваров.НайтиЗначение( ВыбТовар ) > 0 Тогда 
		Предупреждение( "В документе не может быть одинаковых групп." );
		Возврат;
	КонецЕсли;
	ВыбПлан = 0; ВвестиЧисло( ВыбПлан, "Планируемый объем продаж, "+Валюта, 6, 0 );
	НоваяСтрока();
	Товар = ВыбТовар;
	ПланВал = ВыбПлан;
	Уровень = ВыбТовар.Уровень();
	Родитель = ?( Товар.Родитель.Выбран() = 0, Товар, Товар.Родитель );
	спТоваров.ДобавитьЗначение( ВыбТовар );
	СортироватьСтроки("+Родитель,+Уровень,+Товар");
	АктивизироватьСтроку();
КонецПроцедуры

Функция ФорматВывода( парам )
	Если парам = "Уровень1" Тогда
		Если Уровень = 1 Тогда Возврат 4;
		ИначеЕсли Уровень > 1 Тогда Возврат 2;
		КонецЕсли;
	ИначеЕсли парам = "Уровень2" Тогда
		Если Уровень < 2 Тогда Возврат 0;
		ИначеЕсли Уровень = 2 Тогда Возврат 4;
		Иначе  Возврат 2;
		КонецЕсли;
	ИначеЕсли парам = "Уровень3" Тогда
		Возврат ?( Уровень = 3, 4, 0 );
	ИначеЕсли парам = "Товар" Тогда
		
		Если семТекСтрана() = "LV" Тогда Возврат Товар.Наименование;
		ИначеЕсли семТекСтрана() = "LT" Тогда Возврат Товар.НаименованиеLT;
		ИначеЕсли семТекСтрана() = "EE" Тогда Возврат Товар.НаименованиеEE;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Процедура Заполнить()
	сп = СоздатьОбъект( "СписокЗначений" );
	сп.ДобавитьЗначение( 0, "все уровени" );
	сп.ДобавитьЗначение( 1, "только 1-й уровень" );
	сп.ДобавитьЗначение( 2, "только 2-й уровень" );
	Выбор = 0; 	
	Если сп.ВыбратьЗначение( Выбор, "",,,1 ) < 1 Тогда Возврат; КонецЕсли;
	спр = СоздатьОбъект( "Справочник" );
	Запрос = СоздатьОбъект( "Запрос" );
	ТекстЗапроса = "
	|//{{ЗАПРОС(ЗапасыТоваров)
	|Обрабатывать НеПомеченныеНаУдаление;
	|Товар = Справочник.Номенклатура.Родитель;
	|Группировка Товар;
	|";
	Если Запрос.Выполнить( ТекстЗапроса ) = 0 Тогда Возврат; КонецЕсли;
	ВыгрузитьТабличнуюЧасть( спТоваров, "Товар" );
	н = 0;
	Пока Запрос.Группировка( "Товар" ) = 1 Цикл
		пТовар = Запрос.Товар;
		Если ПустоеЗначение(пТовар.Наименование)=1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если пТовар.Выбран() = 0 Тогда Продолжить; КонецЕсли;
		Если спТоваров.НайтиЗначение( пТовар ) > 0 Тогда Продолжить; КонецЕсли;
		Если пТовар.Уровень() > 2 Тогда Продолжить; КонецЕсли;
		Если Выбор > 0 Тогда
			Если пТовар.Уровень() <> Выбор Тогда Продолжить; КонецЕсли;
		КонецЕсли;
		НоваяСтрока();
		Товар =  пТовар;
		Уровень = пТовар.Уровень();
		Родитель = ?( пТовар.Родитель.Выбран() = 0, пТовар, пТовар.Родитель );
		спТоваров.ДобавитьЗначение( пТовар );
		 н = н + 1; Состояние( "Добавлено "+н+" элементов." );
	КонецЦикла; 
	СортироватьСтроки("+Родитель,+Уровень,+Товар");
КонецПроцедуры

Процедура ВводНового(ФлКопирования)
	
	Если Пользователь.РазрПланирование = 0 Тогда
		Предупреждение( "Недостаточно полномочий пользователя!" );
		СтатусВозврата( 0 ); Возврат;
	КонецЕсли;
	ЗаполнитьШапку(Контекст);
	
	Валюта = Рубли;
	ВалютаПреж=Валюта;
	
	Если ФлКопирования=1 Тогда
		Возврат;	    
	КонецЕсли;
КонецПроцедуры       

Процедура СоздатьЭлементУправления ()
	Форма.ОбработкаОжидания ("", 0);
	ВремДокумент = СоздатьОбъект ("ТабличныйДокумент");
	гЭлементУправления = ВремДокумент.СоздатьЭлементУправления (Форма, "ТабличныйДокумент");
	гЭлементУправления.Документ.ЗагрузитьИзТаблицы (ВременнаяТаблица);
	гЭлементУправления.ТолькоПросмотр = 0;
	
	Форма.ИспользоватьСлой ("Основной", 2);
	
КонецПроцедуры


Процедура ПриОткрытии()
	Если Пользователь.РазрПланирование = 0 Тогда
		Предупреждение( "Недостаточно полномочий пользователя!" );
		СтатусВозврата( 0 ); Возврат;
	КонецЕсли;
	Форма.Клиент.ВыборГруппы( 1 );
	ПроверкаРазрешенияРедактирования( Контекст );
	Если Проведен() = 1 Тогда Форма.ТолькоПросмотр( 1 ); КонецЕсли;
	Если Форма.ТолькоПросмотр() = 1 Тогда
		Форма.кнОК.Доступность( 0 );
		Форма.КнопкаПоУмолчанию("кнЗакрыть");
		Форма.кнЗаполнить.Доступность( 0 );
		Форма.кнПодбор.Доступность( 0 );
		Форма.кнОчистить.Доступность( 0 );
	Иначе
		Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли; 
	ВалютаПреж=Валюта; 
	
	ВременнаяТаблица = СоздатьОбъект ("Таблица");
	ВременнаяТаблица.ИсходнаяТаблица("ТаблицаПустая");
	ВременнаяТаблица.Вывести ();
	
	Форма.ИспользоватьЗакладки (1);
	Закладки = Форма.Закладки;
	Закладки.Установить ("Основное", "Основной");
	Форма.ИспользоватьСлой ("Основной", 2);
	
	Форма.ОбработкаОжидания ("СоздатьЭлементУправления", 1);
	
КонецПроцедуры

Процедура кнИмпорт()
	
	Спр = СоздатьОбъект("Справочник.Номенклатура");
	ИмяФайла = "";
	ПутьФайла = ВыбратьФайл(ИмяФайла,"XLS");
	
	гЭлементУправления.Документ.Открыть (ПутьФайла, 2);
	                               
	КолонкаДляПланов = 0;
	
	
	//Основание = ПутьФайла;
	Конвертер = СоздатьОбъект ("Йоксель.КонвертерВТаблицуЗначений");
	Конвертер.УстановитьДокумент (гЭлементУправления.Документ);
	
	Конвертер.ОпределятьСтруктуру = 1;
	Конвертер.СтрокДляОпределенияСтруктуры = 2;
	Конвертер.ПроверятьСтруктуру = 1;
	Таб_ = СоздатьОбъект("ТаблицаЗначений");
	Таб_ = Конвертер.Загрузить ();
    
	ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");
	Если Таб_.ВыбратьСтроку()=1 Тогда
                       
		УдалитьСтроки();
		Если ВвестиЧисло(КолонкаДляПланов,"Номер колонки для планов",2,0)=1 Тогда
		Иначе 
			Возврат;
		КонецЕсли;
		
		Таб_.НоваяКолонка("Товар","Справочник.Номенклатура");
		Таб_.ВыбратьСтроки();
		Пока Таб_.ПолучитьСтроку() = 1 Цикл
			Состояние(Шаблон("[Таб_.НомерСтроки]/[Таб_.КоличествоСтрок()]"));
			Попытка
				КодТовара = СокрЛП(Таб_.ПолучитьЗначение(Таб_.НомерСтроки,1));
			Исключение
				КодТовара = СокрЛП(Таб_.КодТовара);
			КонецПопытки;
			
			Если ПустоеЗначение(КодТовара)=1 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Спр.НайтиПоКоду(КодТовара,0)=1 Тогда
			ИначеЕсли Спр.НайтиПоРеквизиту("КодТовара",КодТовара,КолонкаДляПланов) = 1 Тогда
			Иначе
				Сообщить("Не найден товар по коду "+КодТовара);
				Продолжить;
			КонецЕсли;
			
			Таб_.Товар = Спр.ТекущийЭлемент();
		КонецЦикла;				
	
		Таб_.ВыбратьСтроки();
		Пока Таб_.ПолучитьСтроку() = 1 Цикл
			
			Если ПустоеЗначение(Таб_.Товар)=1 Тогда
				Продолжить;
			КонецЕсли;
			Состояние(Шаблон("[Таб_.НомерСтроки]/[Таб_.КоличествоСтрок()]"));       
			
			пПлан = Окр(Таб_.ПолучитьЗначение(Таб_.НомерСтроки,КолонкаДляПланов),0);//план в 3й колонке
			Если пПлан=0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока();
			Товар = Таб_.Товар;
			Уровень = Товар.Уровень();
			Родитель = ?( Товар.Родитель.Выбран() = 0, Товар, Товар.Родитель );
			ТовКод = Товар.Код;
			ПланВал = пПлан; 
		КонецЦикла;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры


Функция ПроверкаДаты()
	
	КонДата = БанковскаяДата(НачМесяца(ДатаДок),5);
	//промДата = Дата( ДатаГод( ДатаДок ), ДатаМесяц( ДатаДок ), 5 );
	Если ( РабочаяДата() > КонДата ) и ( НазваниеНабораПрав() <> "Администратор" ) Тогда
		Возврат Шаблон("Нельзя изменять документы позже [КонДата]!");
	КонецЕсли;   
КонецФункции

Процедура ПриЗаписи()
	Если семМожноЗаписать( Контекст ) = 0 Тогда Возврат; КонецЕсли;

	Если Выбран()=0 Тогда
		Автор = Пользователь;
	КонецЕсли;
	Результат = ПроверкаДаты();
	Если ПустоеЗначение( Результат ) = 0 Тогда
		Предупреждение( Результат );
		СтатусВозврата( 0 );
		Возврат;
	КонецЕсли;
	
	Если Клиент.ЭтоГруппа()=0 Тогда
//		Предупреждение("Планы по клиентам можно заводить только группу!");
//		СтатусВозврата(0);
	КонецЕсли;
	//док = СоздатьОбъект( "Документ.ПланированиеПродаж" );
	//док.ВыбратьДокументы( НачМесяца( ДатаДок ), КонМесяца( ДатаДок ) );
	//Пока док.ПолучитьДокумент() = 1 Цикл
	//	Если док.Агент <> Агент Тогда Продолжить; КонецЕсли;
	//	Если док.ТекущийДокумент() <> ТекущийДокумент() Тогда
	//		Предупреждение( "У агента уже есть документ за этот месяц." );
	//		СтатусВозврата( 0 );
	//		Возврат;
	//	КонецЕсли;
	//КонецЦикла;
КонецПроцедуры

Процедура ПриИзмененииПорядкаСтрок()
	Предупреждение( "В этом документе нельзя изменять порядок строк." );
	СтатусВозврата( 0 );
КонецПроцедуры

Процедура ПриВводеСтроки()
	//Предупреждение( "В этом документе новые строки вводятся только через подбор." );
	СтатусВозврата( 0 );
КонецПроцедуры

Процедура ПриСменеВалюты()
	Если ВалютаПреж<>Валюта Тогда
		Если Вопрос("Пересчитать суммы в документе?","Да+Нет")="Да" Тогда
			ВыбратьСтроки();
			Пока ПолучитьСтроку()=1 Цикл
				ПланВал = Пересчет(ПланВал,ВалютаПреж,ДатаДок,Валюта,ДатаДок);
			КонецЦикла;
		КонецЕсли;
		ВалютаПреж=Валюта;
	КонецЕсли;
КонецПроцедуры                                

Процедура ПриНачалеРедактированияСтроки()
	Если ( Товар.Уровень()<2)  Тогда
		Предупреждение("Вводить планы можно только для групп выше 2-го уровня!");
		СтатусВозврата( 0 );
	КонецЕсли;
КонецПроцедуры

спТоваров = СоздатьОбъект( "СписокЗначений" );
ЗагрузитьВнешнююКомпоненту (Путь+"\SpreadSheet.dll");
