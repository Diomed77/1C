Перем ТП;//Табличное поле
Перем Таб;//Табличная часть табличного поля
Перем флСообщения;
Перем МойШрифт,МойШрифт1;
Перем Таб_ТекущаяСтрока,Таб_ТекущаяКолонка, Таб_Значение;
Перем ТекущийСлой;
Перем ТекущийДокПоставки,старТекущийДокПоставки;
Перем меню,ПередатьФокус;
Перем пСтолбцы;
Перем тпДок, Источник;
Перем слПрихода,слСканирования,слТаблицы,слТовара,слОжПоставок,слПечать;//Переменые окон (слоев) отображаемые на Экране. 
Перем итТовар;
Перем нажатьКлавишу,счетНажатий;
Перем сзКолонок;
Перем ИТтекущая;
Перем 	п_НижОграничитель,п_ВерхОграничитель;	//ограничители отображения столбцов.
Перем флТолькоПросмотр;
Перем п_Тара;
Перем п_Окна;
Перем п_Ошибка;

//Перем флАвтоВес;

Перем флПлюс;
//{*************ПеремВесы***********\\
Перем Заявка, Товар, ВесовойКод;
Перем Сканер Экспорт;
Перем Ввод;
Перем спКодов;
Перем гСервис;
Перем Scale;
Перем СОМПорт,СОМПорт1;
Перем Вес1,п_Вес;
Перем флАвтоВес;
Перем п_ВесТары;
Перем фл_ПечатьОписание;
//}*************ПеремВесы***********\\


//{*************ПеремКлавиатура***********\\
Перем п_Текст;
Перем п_Колич;
//Перем гСервис;
//}*************ПеремКлавиатура***********\\

Перем ДокументОснование,ТаблСчет,промКлГруппа; //замена
//Перем ДатаПрихода;
//Перем спКодов;

Процедура ПВ_ВывестиЗначение() Далее
Процедура ТП_совмещениеТЧ(ТП_ТекСтрока) Далее
Процедура кнВперед() Далее
Процедура ТП_Обновить() Далее
Процедура ВводНаОсновании(ДокОснование) Далее
Процедура кнТаблица() Далее
//======================================================================
Процедура кнСбросШтрихкода() Далее
Функция ПоискВесовогоКода(п_Код) Далее
Функция ПоискВесовогоКодаSQL(п_Код) Далее
Функция ПоискВСправочнике(пШтрихкод="") Далее
Процедура   ПолучитьВесАвто() Далее
Процедура кнВводШтрихкода() Далее
Процедура НастроитьТекущуюСтроку() Далее
Процедура ПВ_ВводЗначения() Далее
Процедура кн_ВВОД(п_Вес="") Далее

//{*************Общие***********\\
Функция ПолучитьЦвет(Красный = 0,Зеленый = 0,Синий = 0)
    Возврат Макс(0,Синий)*65536+Макс(0,Зеленый)*256+Макс(0,Красный);
КонецФункции
Функция АдресСтрокой( пАдрес, начУр, конУр, пРазд )
	сп = СоздатьОбъект( "СписокЗначений" );
	сп.ДобавитьЗначение( "пАдрес.Родитель.Родитель.Родитель.Код", "1" );
	сп.ДобавитьЗначение( "пАдрес.Родитель.Родитель.Код" , "2" );
	сп.ДобавитьЗначение( "пАдрес.Родитель.Код" , "3" );
	сп.ДобавитьЗначение( "пАдрес.Код" , "4" );
	текУр = пАдрес.Уровень();
	начУр = ?( начУр > текУр, текУр, начУр );
	конУр = ?( конУр > текУр, текУр, конУр );
	стр = "";
	Для н = начУр по конУр Цикл
		стр = стр + "[" + сп.ПолучитьЗначение( н+4-текУр ) + "]" + ?( н = конУр, "", пРазд );
	КонецЦикла;
	Возврат Шаблон( стр );
КонецФункции

Функция УстановитьСостояние(Сост,Док)
	спрСост=СоздатьОбъект("Справочник.СостоянияДокументов");
	спрСост.НайтиПоНаименованию(Док); 
	спрСост.ИспользоватьРодителя(спрСост.ТекущийЭлемент());
	спрСост.НайтиПоНаименованию(Сост,1);
	Возврат спрСост.ТекущийЭлемент();
КонецФункции
Процедура НастроитьПривязки()
	
	УправлениеФормой = СоздатьОбъект("УправлениеФормой");
	Привязки = УправлениеФормой.ПривязкаЭлементов;
	//Привязки//:УправлениеФормой.Привязка
	Привязки.УстановитьГраницыПоФорме("тпКнопка_",1,1,1,0);
	Привязки.УстановитьГраницыПоФорме("ПанельВвода",1,1,1,0);
	Привязки.УстановитьГраницыПоФорме("Назад",1,0,0,1);
	Привязки.УстановитьГраницыПоФорме("Вперед",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("Текст1",1,1,1,0);
	Привязки.УстановитьГраницыПоФорме("тКолонка",1,1,1,0);
	
	Привязки.УстановитьГраницыПоФорме("кнЗаписать",1,0,0,1);
	Привязки.УстановитьГраницыПоФорме("кнПровести",1,0,0,1);
	Привязки.УстановитьГраницыПоФорме("кнПечатьПр",1,0,0,1);
	
	
	Привязки.УстановитьГраницыПоФорме("РамкаВзаимПодвал",1,0,0,1);
	Привязки.УстановитьГраницыПоФорме("тСуммаНДС",1,0,0,1);
	Привязки.УстановитьГраницыПоФорме("РамкаВсего",1,0,0,1);
	Привязки.УстановитьГраницыПоФорме("тСуммаНДССк",1,0,0,1);
	Привязки.УстановитьГраницыПоФорме("РамкаНДС",1,0,0,1);
	Привязки.УстановитьГраницыПоФорме("текстСкидки",1,0,0,1);
	Привязки.УстановитьГраницыПоФорме("РамкаСкидки",1,0,0,1);
	
	Привязки.УстановитьГраницыПоФорме("тТранспорт",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кнЛастРекорд",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("тЦены",0,1,0,1);
	
	Привязки.УстановитьГраницыПоФорме("кнОК",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кнЗакрыть",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кнДействия",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кнПапка",0,1,0,1);

	Привязки.УстановитьГраницыПоФорме("кн_0",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кн_1",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кн_2",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кн_3",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кн_4",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кн_5",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кн_6",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кн_7",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кн_8",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кн_9",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кн_зп",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кн_удПрав",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кн_уд",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кн_ВВОД",0,1,0,1);
	
	Привязки.УстановитьГраницыПоФорме("т_Экран",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("рам_Экран",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("рам_Клав",0,1,0,1);

	Привязки.УстановитьГраницыПоФорме("пвШтрихкод",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кнПечать",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кнОтложить",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кнЗаписатьПровести",0,1,0,1);	


	Привязки.УстановитьГраницыПоФорме("тКолонка",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("чКалькулятор",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кнНазад",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("ПанельВвода",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кнВперед",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("тКоличество",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кнМинус",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кнТаблица",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кнПлюс",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("рам_ПанельВвода",0,1,0,1);

	Привязки.УстановитьГраницыПоФорме("пв_Таблица",0,1,0,1);
	Привязки.Привязать();

КонецПроцедуры
Процедура НастроитьОкна(Показать=1)
	Окна = СоздатьОбъект("Окна");
	//Окна.ВключитьМодальныйРежим();
	Окна.Максимизировать(Форма);
	
	Если Показать<>1 Тогда
		меню = Окна.ПолучитьМеню();
	КонецЕсли;
   
    а="";
 //   меню.ВыбратьЗначение(а);
	стр="";	
	Для Номер = 1 По Меню.РазмерСписка() Цикл
		меню.ПолучитьЗначение(Номер, стр); //получить значение и представление
		Окна.ВидимостьМеню(стр, Показать);
	КонецЦикла;
	Окна.ПоказыватьПанели(Показать);
	Если Показать<>1 Тогда
	//	Окна.Минимизировать(Форма);
		Окна.Максимизировать(Форма);
	КонецЕсли;
	Окна.Максимизировать(Форма);
КонецПроцедуры



//}*************Общие***********\\

//{*************Весы***********\\


Функция ЗагрузкаИТ(п_СсылкаТовара)
	л_ИТ=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос=СоздатьОбъект("ODBCRecordSet");
	
	ТекстЗапроса="SELECT [CODE]
		|      ,[LABEL]
		|      ,FOOD_WWW.dbo.ConvUTF21c(CONVERT(nvarchar(4000),LVT),0) LVname 
		|      ,FOOD_WWW.dbo.ConvUTF21c(CONVERT(nvarchar(4000),LVB),0) LVtext 		
		|      ,FOOD_WWW.dbo.ConvUTF21c(CONVERT(nvarchar(4000),EET),1) EEname
		|      ,FOOD_WWW.dbo.ConvUTF21c(CONVERT(nvarchar(4000),EEB),1) EEtext
		|      ,FOOD_WWW.dbo.ConvUTF21c(CONVERT(nvarchar(4000),LTT),1) LTname
		|      ,FOOD_WWW.dbo.ConvUTF21c(CONVERT(nvarchar(4000),LTB),1) LTtext
		|FROM FOOD_WWW.dbo.labels
//		|WHERE (CODE = :код)
		|WHERE (ID = :код)
		|";	
	
	Запрос.УстановитьТекстовыйПараметр("код",п_СсылкаТовара);
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,л_ИТ);
	Возврат л_ИТ;
КонецФункции


Функция ВесУпак(п_Товар,ВидУпак="Первичная")
	Если п_Товар.Выбран()=0 Тогда
		Возврат 0;
	КонецЕсли;
	ТекстЗапроса="SELECT SUM($УпаковкаТоваров.ВесБруттоУпаковки) ВесУпаковки
	|			  FROM $Справочник.УпаковкаТоваров AS УпаковкаТоваров	
	|			  WHERE УпаковкаТоваров.PARENTEXT=:ВыбТовар AND ISMARK = 0
	|				AND $УпаковкаТоваров.ТипУпаковки = $Перечисление.ТипыУпаковки."+ВидУпак;
	РС=СоздатьОбъект("ODBCRecordSet");
	РС.УстБД1С();
	РС.УстановитьТекстовыйПараметр("ВыбТовар",п_Товар);
	ТЗ=РС.ВыполнитьИнструкцию(ТекстЗапроса);
	Возврат ТЗ.Итог("ВесУпаковки");
КонецФункции


Функция НеттоПервичное(Товар)
	Если Товар.ЕдНеттоВеса.Выбран()=1 Тогда
		ЕдПервУпак=Товар.ЕдНеттоВеса.Единица;
		КоэфНеттоВеса = Окр(1/Товар.ЕдНеттоВеса.Коэффициент,4,1);
	Иначе
		ЕдПервУпак=Товар.БазоваяЕдиницаИзмерения;
		КоэфНеттоВеса=1;
	КонецЕсли;
	ВесПервичной = Товар.Вес / КоэфНеттоВеса;
	Возврат ВесПервичной;	
КонецФункции

Функция Пререкодировка(стр,спПерекод)
	рез = "";
	Для н = 1 по СтрДлина(стр) Цикл
		ТекСим = Сред(стр,н,1);
		Код = спПерекод.Получить(КодСимв(ТекСим));
		Если ПустоеЗначение(Код) = 1 Тогда
			рез = рез + ТекСим;
		Иначе
			рез = рез + Симв(Число(Код));
		КонецЕсли;
	КонецЦикла;
	Возврат рез;
КонецФункции

Функция NumberToUpperChar( Num )
	UpperCharSet = "ABCDEFGHIJ";
	Num = Число(Прав(Num,1));
	Стр = Сред(UpperCharSet, Num + 1, 1);
	Возврат Стр;
КонецФункции

Функция NumberToLowerChar( Num )
	LowerCharSet = "abcdefghij";
	Num = Число(Прав(Num,1));
	Стр = Сред(LowerCharSet, Num + 1, 1);
	Возврат Стр;
КонецФункции

Функция ParityCheck(Код) // Вычисление кода четности
	четн = 0; неч  = 0;
	// Для строки с нечетной длинной верхняя граница 
	// округлается в большую сторону
	Для Поз = 1 По Окр(СтрДлина(Код) / 2 + 0.1,0) Цикл
		неч  = неч  + Сред(Код, Поз * 2 - 1, 1);
		Если Поз * 2 <= СтрДлина(Код) Тогда
			четн = четн + Сред(Код, Поз * 2, 1);
		КонецЕсли;
	КонецЦикла;
	КодЧетности = Число(Прав(Строка(1000 - четн - неч * 3), 1));
	Возврат КодЧетности;
КонецФункции

Функция ДобавитьСлева( Стр1, Длн, Стр2 )
	Стр0 = Стр1;
	Пока СтрДлина( Стр0 ) <= Длн Цикл Стр0 = Стр2 + Стр0; КонецЦикла;
	Стр0 = Прав( Стр0, Длн );
	Возврат Стр0;
КонецФункции

Функция EAN13CodeGenerate(код)
	// Проверки
	Если ТипЗначения(код) <> 1 Тогда
		Сообщить("Код для EAN13 должен числовым."); Возврат "";
	КонецЕсли;
    
	Если СтрДлина(код) > 12 Тогда
		Сообщить("Код для EAN13 должен быть длинной не более 12 символов."); Возврат "";
	КонецЕсли;               
	// Дополнение лидирующими пробелами
	код = ДобавитьСлева(Строка(код),12,"0");
	// Добавление кода четности - для кода, дополненого слева "0"
	код = код + Строка(ParityCheck("0"+Код));
	//Разбор строки
	ПервыйФлаг = Число(Сред(код,1,1));
	левстр     = Сред(код,2,6);
	правстр    = Сред(код,8,6);
	правкод = "";
	Для Поз = 1 По 6 Цикл
		правкод = правкод + NumberToLowerChar(Сред(правстр,Поз,1));
	КонецЦикла;
    //  Формирование левой части кода зависит от значениа ПервыйФлаг
	Если ПервыйФлаг = 0 Тогда	//    0           A  A  A  A  A
		левкод = "#!" + Лев(левстр,1) 
			+ Сред(левстр,2,1)
			+ Сред(левстр,3,1)
			+ Сред(левстр,4,1)
			+ Сред(левстр,5,1)
			+ Сред(левстр,6,1);
	ИначеЕсли ПервыйФлаг = 1 Тогда	//    1           A  A  B  A  B  B
		левкод = "$!" 
			+ Лев(левстр,1)
			+ Сред(левстр,2,1)
			+ NumberToUpperChar(Сред(левстр,3,1))
			+ Сред(левстр,4,1)
			+ NumberToUpperChar(Сред(левстр,5,1))
			+ NumberToUpperChar(Сред(левстр,6,1));
	ИначеЕсли ПервыйФлаг = 2 Тогда 	//    2           A  A  B  B  A  B
		левкод = "%!"
			+ Лев(левстр,1)
			+ Сред(левстр,2,1)
			+ NumberToUpperChar(Сред(левстр,3,1))
			+ NumberToUpperChar(Сред(левстр,4,1))
			+ Сред(левстр,5,1)
			+ NumberToUpperChar(Сред(левстр,6,1));
	ИначеЕсли ПервыйФлаг = 3 Тогда   //    3           A  A  B  B  B  A
		левкод = "&!" 
			+ Лев(левстр,1)
			+ Сред(левстр,2,1)
			+ NumberToUpperChar(Сред(левстр,3,1))
			+ NumberToUpperChar(Сред(левстр,4,1))
			+ NumberToUpperChar(Сред(левстр,5,1))
			+ Сред(левстр,6,1);
	ИначеЕсли ПервыйФлаг = 4 Тогда   //    4           A  B  A  A  B  B
		левкод = "'!" 
			+ Лев(левстр,1)
			+ NumberToUpperChar(Сред(левстр,2,1))
			+ Сред(левстр,3,1)
			+ Сред(левстр,4,1)
			+ NumberToUpperChar(Сред(левстр,5,1))
			+ NumberToUpperChar(Сред(левстр,6,1));
	ИначеЕсли ПервыйФлаг = 5 Тогда   //    5           A  B  B  A  A  B
		левкод = "(!" 
			+ Лев(левстр,1)
			+ NumberToUpperChar(Сред(левстр,2,1))
			+ NumberToUpperChar(Сред(левстр,3,1))
			+ Сред(левстр,4,1)
			+ Сред(левстр,5,1)
			+ NumberToUpperChar(Сред(левстр,6,1));
	ИначеЕсли ПервыйФлаг = 6 Тогда   //    6           A  B  B  B  A  A
		левкод = ")!" 
			+ Лев(левстр,1)
			+ NumberToUpperChar(Сред(левстр,2,1))
			+ NumberToUpperChar(Сред(левстр,3,1))
			+ NumberToUpperChar(Сред(левстр,4,1))
			+ Сред(левстр,5,1)
			+ Сред(левстр,6,1);
	ИначеЕсли ПервыйФлаг = 7 Тогда   //    7           A  B  A  B  A  B
		левкод = "*!" 
			+ Лев(левстр,1)
			+ NumberToUpperChar(Сред(левстр,2,1))
			+ Сред(левстр,3,1)
			+ NumberToUpperChar(Сред(левстр,4,1))
			+ Сред(левстр,5,1)
			+ NumberToUpperChar(Сред(левстр,6,1));
	ИначеЕсли ПервыйФлаг = 8 Тогда   //    8           A  B  A  B  B  A
		левкод = "+!" 
			+ Лев(левстр,1)
			+ NumberToUpperChar(Сред(левстр,2,1))
			+ Сред(левстр,3,1)
			+ NumberToUpperChar(Сред(левстр,4,1))
			+ NumberToUpperChar(Сред(левстр,5,1))
			+ Сред(левстр,6,1);
	ИначеЕсли ПервыйФлаг = 9 Тогда   //    9           A  B  B  A  B  A
		левкод = ",!" 
			+ Лев(левстр,1)
			+ NumberToUpperChar(Сред(левстр,2,1))
			+ NumberToUpperChar(Сред(левстр,3,1))
			+ Сред(левстр,4,1)
			+ NumberToUpperChar(Сред(левстр,5,1))
			+ Сред(левстр,6,1);
	КонецЕсли;                                               
	// Получение строки - результата
	кодстр = левкод + "-" + правкод + "!";
	Возврат кодстр;
КонецФункции

Функция ПолучитьШтрихКод(пКод,пВес)
	пВес=Число(пВес);
	Если пВес < 10 Тогда 
		Преф = "23"; 
//		текВес = Строка(Окр(пВес,3) * 1000);
		текВес = Формат(Окр(пВес,3) * 1000,"Ч(0)4");
	ИначеЕсли пВес < 100 Тогда 
		Преф = "24";
		текВес = Строка(Окр(пВес,2) * 100);
	ИначеЕсли пВес < 1000 Тогда
		Преф = "25";
		текВес = Строка(Окр(пВес,1) * 10);
	КонецЕсли;
	Возврат Число(Преф+пКод+текВес);
КонецФункции

Процедура ПриВыбореЗакладки(Ном,Зн)
	Форма.ИспользоватьСлой(Зн+",Основной",2);
	Ввод = "";
	Кол = 0;
	Вес = 0;
	
	Если Ном=2 Тогда
	//	Форма.ОбработкаОжидания("ПолучитьВесАвто",флАвтоВес);		
		//Активизировать("Вес");
	Иначе
	//	Форма.ОбработкаОжидания("ПолучитьВесАвто",0);

	КонецЕсли;
КонецПроцедуры

Процедура ПодключитьСканер()
    Попытка
		СОМПорт = СоздатьОбъект("AddIn.vk_rs232");
		СОМПорт.ОткрытьПорт("COM3"); 
		СОМПорт.КонецСтроки=Симв(13);
		Сообщить("Подключен сканер на СОМ3.");
    Исключение
        Сообщить("Ошибка!");
		Сообщить(ОписаниеОшибки(),"!!!");
    КонецПопытки;
КонецПроцедуры
Процедура ПодключитьВесы()
    Попытка
		СОМПорт1 = СоздатьОбъект("AddIn.vk_rs232");
		СОМПорт1.ОткрытьПорт("COM1"); 
//		СОМПорт.КонецСтроки=Симв(13);
		Сообщить("Подключены весы на СОМ1.");
				
    Исключение
        Сообщить("Ошибка!");
		Сообщить(ОписаниеОшибки(),"!!!");
    КонецПопытки;
КонецПроцедуры

//{Весы

Процедура ПоказатьСтраницуСвойств()
	Scale.ПоказатьСтраницуСвойств();
	   
	Результат = Scale.ResultCode; 
	ОпОш = Scale.ResultDescription;
	chkDeviceEnabled = Scale.DeviceEnabled;
КонецПроцедуры	


Процедура ПолучитьВесИзRADWAG()
	СОМПорт1.ЗаписатьСтроку("S");
КонецПроцедуры
Процедура ПолучитьВесИзATOL()
	Сообщить("Получение веса");
	Если Scale.AsyncMode = 1 
	тогда  
		Scale.AsyncMode = 0;
		chkAsyncMode = Scale.AsyncMode;
	//	Scale.UniTPriCe = Цена;
		КодОшибки = Scale.ReadWeight();  
		Описание = Scale.ResultDescription;
		Если (КодОшибки = 0) 
		Тогда
			Вес = Scale.Weight;
		КонецЕсли;            
		Результат = КодОшибки;
		Если   КодОшибки <> 0 
		Тогда ОпОш = Описание;
			Сообщить("Включите весы");
		Иначе ОпОш = Scale.ResultDescription;
		КонецЕсли;
		Scale.AsyncMode = 1;
		chkAsyncMode = Scale.AsyncMode;
	иначе 	
	//	Scale.UniTPriCe = Цена;
		КодОшибки = Scale.ReadWeight();  
		Описание = Scale.ResultDescription;
		Если (КодОшибки = 0) 
		Тогда
			Вес = Scale.Weight;
		КонецЕсли;            
		Результат = КодОшибки;
		Если КодОшибки <> 0 
		Тогда ОпОш = Описание;
			Сообщить("Включите весы");
		Иначе ОпОш = Scale.ResultDescription;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры
 

Процедура ПолучитьВес()


	ПолучитьВесИзRADWAG();

	
	//Если chkDeviceEnabled=1 Тогда
	//	ПолучитьВесИзATOL();
	//КонецЕсли;
		

//	р_ВесИтого=р_ВесИтого+Вес;
//	р_шт=р_шт+1;
КонецПроцедуры

Процедура ПолучитьВесНЕТТО()
	ПолучитьВес();
	Вес=Вес-п_ВесТары;
	Форма.Обновить(0);
КонецПроцедуры

//======================================================================
Функция ПоказатьВесы()
	Если Scale=0 Тогда
		Возврат "нет драйвера";
	Иначе
		Возврат Scale.CurrentDeviceName;
	КонецЕсли;
	
КонецФункции // ПоказатьВесы

Процедура ПолучитьВесАвто()

//	Форма.ОбработкаОжидания("ПолучитьВесАвто",0);
	
	Если флАвтоВес1=1 Тогда
		СОМПорт1.ЗаписатьСтроку("S");
	КонецЕсли;
//	СОМПорт1.ЗаписатьСтроку("S");
	фл_ВесыРаб=?(фл_ВесыРаб=1,0,1);
	Форма.Обновить();
//	Форма.ОбработкаОжидания("ПолучитьВесАвто",флАвтоВес);
КонецПроцедуры

//======================================================================
Процедура кн_ноль()
//	Форма.ОбработкаОжидания("ПолучитьВесАвто",0);
	СОМПорт1.ЗаписатьСтроку("Z");
	п_Тара=0;
КонецПроцедуры // кн_ноль

//***тару установить программно***\\
Процедура кн_тара()
//	Форма.ОбработкаОжидания("ПолучитьВесАвто",0);
//	СОМПорт1.ЗаписатьСтроку("T");
	п_Тара=Число(Вес1);
	Форма.Обновить();
КонецПроцедуры // кн_тара

//***тару установить на весах**\\
Процедура кн_тара1()
//	Форма.ОбработкаОжидания("ПолучитьВесАвто",0);
	СОМПорт1.ЗаписатьСтроку("T");
	п_Тара=Вес1;
	Форма.Обновить();
КонецПроцедуры // кн_тара
//}Весы

//======================================================================
Процедура кн_ВводВеса()
	ПолучитьВесАвто();
	кн_ВВОД(Вес1);
КонецПроцедуры // кн_ВводВеса()

//======================================================================
Процедура кн_ОбновитьВес()
	СОМПорт1.ЗаписатьСтроку("S");
	ПолучитьВесАвто();
КонецПроцедуры // кн_ОбновитьВес()

Процедура ПриОткрытииВесов()
	
	ПодключитьСканер();
	ПодключитьВесы();

//	Форма.ОбработкаОжидания("ПолучитьВесАвто",1);
	гСервис = СоздатьОбъект("Сервис");
	гСервис.ПерехватКлавиатуры(1);
	
	Ввод = "";
	
КонецПроцедуры

Процедура ПриЗакрытииВесов()
//	Форма.ОбработкаОжидания("ПолучитьВесАвто",0);
	Сканер = "";
	гСервис.ПерехватКлавиатуры(0);
	
 	Попытка
		СОМПорт1.ЗакрытьПорт();
    Исключение
        Сообщить("Ошибка!");
		Сообщить(ОписаниеОшибки(),"!!!");
    КонецПопытки;	
	Попытка
		СОМПорт.ЗакрытьПорт();
    Исключение
        Сообщить("Ошибка!");
		Сообщить(ОписаниеОшибки(),"!!!");
    КонецПопытки;	
	
КонецПроцедуры

//Функция ФорматВывода( парам )
//	Если парам = "Заявка" Тогда 
//		Если ПустоеЗначение(Заявка) = 0 Тогда
//			Возврат Шаблон("[Заявка.НомерДок] no [Заявка.ДатаДок]");
//		Иначе
//			Возврат "Не выбрана эл. заявка.";
//		КонецЕсли;
//	ИначеЕсли парам = "Товар" Тогда 
//		Если ПустоеЗначение(Товар) = 0 Тогда
//			Возврат Шаблон("[Товар.НаименованиеДляЦенника]");
//		Иначе
//			Возврат "";
//		КонецЕсли;
//	ИначеЕсли парам = "Вес" Тогда 
//		Возврат Шаблон("[Вес1] кг");		
//	ИначеЕсли парам = "ВесовойКод" Тогда 
//		Если ПустоеЗначение(Товар) = 1 Тогда Возврат ""; КонецЕсли;
//		Возврат Товар.ВесовойКод;
//	ИначеЕсли парам = "ШтрихКод" Тогда 
//		Если ПустоеЗначение(Товар) = 1 Тогда Возврат ""; КонецЕсли;
//		Если Товар.ВесовойКод = 0 Тогда Возврат ""; КонецЕсли;
//		Если п_Вес = 0 Тогда Возврат ""; КонецЕсли;
//		Возврат ПолучитьШтрихКод(Товар.ВесовойКод,Вес1);
//	ИначеЕсли парам = "Клиент" Тогда 
//		Если ПустоеЗначение(Заявка) = 1 Тогда Возврат ""; КонецЕсли;
//		промКлиент = ?(Заявка.КлиентФилиала.Выбран() = 0,Заявка.Клиент,Заявка.КлиентФилиала);
//		Возврат ?(Заявка.КлиентФилиала.Выбран() = 0,Пререкодировка(промКлиент.ПолноеНаименование,спКодов),промКлиент.ПолноеНаименование) ;
//	ИначеЕсли парам = "КлиентИмя" Тогда 
//		Если ПустоеЗначение(Заявка) = 1 Тогда Возврат ""; КонецЕсли;
//		промКлиент = ?(Заявка.КлиентФилиала.Выбран() = 0,Заявка.Клиент,Заявка.КлиентФилиала);
//		Возврат ?(Заявка.КлиентФилиала.Выбран() = 0,Пререкодировка(промКлиент.Наименование,спКодов),промКлиент.Наименование) ;
//	
//	ИначеЕсли парам = "Адрес" Тогда 
//		Если ПустоеЗначение(Заявка) = 1 Тогда Возврат ""; КонецЕсли;
//		промКлиент = ?(Заявка.КлиентФилиала.Выбран() = 0,Заявка.Клиент,Заявка.КлиентФилиала);
//		Адрес = промКлиент.АдресДоставки;
//		Возврат ?(Заявка.КлиентФилиала.Выбран() = 0,Шаблон( "[Пререкодировка(Адрес.Наименование,спКодов)] [Пререкодировка(промКлиент.АдресДоставкиДоп,спКодов)]" ),Шаблон( "[Адрес.Наименование] [промКлиент.АдресДоставкиДоп]" )) ;
//	ИначеЕсли парам = "Маршрут" Тогда 
//		Если ПустоеЗначение(Заявка) = 1 Тогда Возврат ""; КонецЕсли;
//		Если ПустоеЗначение(Заявка.МаршрутДоставкиГрафик)=0 Тогда
//			Возврат Шаблон( "[Заявка.МаршрутДоставкиГрафик.Наименование]" );
//		Иначе
//			промКлиент = ?(Заявка.КлиентФилиала.Выбран() = 0,Заявка.Клиент,Заявка.КлиентФилиала);
//			Адрес = промКлиент.АдресДоставки;
//			Возврат Шаблон( "[Адрес.Маршрут.Описание]" );
//		КонецЕсли;
//	ИначеЕсли парам = "ДатаПоставки" Тогда 
//		Если ПустоеЗначение(Заявка) = 1 Тогда Возврат ""; КонецЕсли;
//		Возврат Заявка.ДатаПоставки;
//	КонецЕсли;
//КонецФункции

//Процедура кнТовар()
//	спр = СоздатьОбъект("Справочник.Номенклатура");
//	Если спр.Выбрать("Выберите товар","ДляПодбора") = 0 Тогда Возврат; КонецЕсли;
//	Товар = спр.ТекущийЭлемент();
//	п_ВесТары=ВесУпак(Товар);
//КонецПроцедуры

Процедура кнЗаявка()
	док = СоздатьОбъект("Документ.Счет");
	Если док.Выбрать("Эл. заявка") = 1 Тогда
		Заявка = док.ТекущийДокумент();
	КонецЕсли;
КонецПроцедуры

//Процедура кнПечатьВеса(п_Кол=1,фл_автомаштаб=1,флБезПросмотра=1)
//	Форма.ОбработкаОжидания("ПолучитьВесАвто",0);
//	Если Форма.Закладки.ТекущаяСтрока() = 1 Тогда
//		Если п_Кол > 9 Тогда
//			Ответ = Вопрос(Шаблон("Печатать [п_Кол] экземпляров наклеек?"),"Да+Нет",60);
//			Если Ответ <> "Да" Тогда Возврат; КонецЕсли;
//		КонецЕсли;
//		таб = СоздатьОбъект( "Таблица" );
//		Если ТипПринтераЭтикеток=Перечисление.ТипыПринтеровЭтикеток.BrotherQL1050 Тогда
//			таб.ИсходнаяТаблица( "ТаблицаBrother" );
//		Иначе
//			таб.ИсходнаяТаблица( "Таблица2" );
//		КонецЕсли;
//		пКлиент = ФорматВывода( "Клиент" );
//		//таб.ВывестиСекцию( "Клиент" );
//		//таб.ВывестиСекцию( "ПустаяСтрока" );
//		//таб.ВывестиСекцию( "ПустаяСтрока" );
//		пАдрес = ФорматВывода( "Адрес" );
//		//таб.ВывестиСекцию( "Адрес" );
//		//таб.ВывестиСекцию( "ПустаяСтрока" );
//		//таб.ВывестиСекцию( "ПустаяСтрока" );
//		пНомерДок = ФорматВывода( "Заявка" );
//		пМаршрут = ФорматВывода( "Маршрут" );
//		//таб.ВывестиСекцию( "ПустаяСтрока" );
//		пДатаПоставки = ФорматВывода( "ДатаПоставки" );
//		//таб.ВывестиСекцию( "ДатаПоставки" );
//		пКлиентИмя = ФорматВывода( "КлиентИмя" );	
//		Для н = 1 по п_Кол Цикл
//			пНомер = Шаблон("[н] no [п_Кол]");
//			таб.ВывестиСекцию( "Доставка" );
//			Если фл_ПечатьАдреса=1 Тогда
//				таб.ВывестиСекцию( "ДоставкаАдрес" );
//			КонецЕсли;			
//			
//			таб.НоваяСтраница();
//		КонецЦикла;
//		таб.ТолькоПросмотр( 1 );
//		
//	//	Заявка = "";
//		//таб.ПараметрыСтраницы(,,0,0,0,0,,,,,,);
//	Иначе
//		таб = СоздатьОбъект( "Таблица" );
//		таб.ИсходнаяТаблица( "табВесШтрихкод" );
//		Сообщить("табВесШтрихкод");
//		п_Кол=1;
//		Если ВвестиЧисло(п_Кол,"Введите кол-во наклеек",2,0,30)=0 Тогда
//			Возврат;
//		КонецЕсли;			
//		
//		//таб.ВывестиСекцию( "Шапка" );		
//		//таб.Опции( 0, 0, таб.ВысотаТаблицы(), 0 );
//		Если ПустоеЗначение(Товар)=1 Тогда
//			Предупреждение("Выбирите товар");
//			Возврат;
//		КонецЕсли;
//	//	пТовар = Товар.НаименованиеДляЦенника;
//
//		Для н = 1 по п_Кол Цикл
//	//		таб.ВывестиСекцию( "Товар" );
//			
//			//таб.ВывестиСекцию( "Вес" );
////			таб.НоваяСтраница();
//			
//			Если фл_ПечатьОписание=1 Тогда
////				Сообщить("Товар.Код "+Товар.Код);
//				ИТ=ЗагрузкаИТ(Товар);
////				ИТ.Показать();
////				ПечатьSQL(ИТ);	
//				
//				ИТ.ВыбратьСтроки();
//				Пока ИТ.ПолучитьСтроку() = 1 Цикл
//					
//					п_ИмяТовараLV=Пререкодировка(Товар.Наименование,спКодов);
//					п_ОписаниеLV=Пререкодировка(ИТ.LVtext,спКодов);
//					п_ИмяТовараLT=Пререкодировка(Товар.НаименованиеLT,спКодов);
//					п_ОписаниеLT=Пререкодировка(ИТ.LTtext,спКодов);
//					п_ИмяТовараEE=Пререкодировка(Товар.НаименованиеEE,спКодов);
//					п_ОписаниеEE=Пререкодировка(ИТ.EEtext,спКодов);
//						
//					таб.ВывестиСекцию( "с_Описание" );
//				КонецЦикла;
//				
//					
//			КонецЕсли;
//			//Если фл_ИТОГО=1 Тогда
//			//	пВес = Шаблон("[р_ВесИтого] kg");
//			//	пШтрихКод = EAN13CodeGenerate(ПолучитьШтрихКод(Товар.ВесовойКод,р_ВесИтого));
//			//	п_Шт= Шаблон("TOTAL [р_шт] pc.:");
//			//	таб.ВывестиСекцию( "с_ИТОГО" );
//			//	фл_ИТОГО=0;
//			//Иначе
//			//	пВес = Шаблон("[Вес1] kg");
//			//	пШтрихКод = EAN13CodeGenerate(ПолучитьШтрихКод(Товар.ВесовойКод,Вес1));
//			//	
//			//	Если фл_ПечатьОписание=1 Тогда
//			//		таб.ВывестиСекцию( "с_ШтрихкодОписания" );
//			//	Иначе
//			//		пТовар = Товар.НаименованиеДляЦенника;	
//			//		таб.ВывестиСекцию( "Товар" );
//			//		таб.ВывестиСекцию( "ШтрихКод" );
//			//	КонецЕсли;
//			//	
//			//КонецЕсли;			
//			
//			таб.ПараметрыСтраницы(1,100,,1,0,2,0,0,0,фл_автомаштаб,,);
//			таб.НоваяСтраница();
//		КонецЦикла;
//		
//		таб.ТолькоПросмотр( 1 );
//		//таб.ПараметрыСтраницы(1,100,0,0,0,0,,,,,,);
//		//таб.Показать( "" ); 
//		//таб.Напечатать(0);
//	КонецЕсли;
//	таб.ПараметрыСтраницы(1,100,,1,0,2,0,0,0,фл_автомаштаб,,);
//	Если флБезПросмотра = 0 Тогда
//		таб.Показать( "" ); 
//	Иначе
//		таб.Напечатать(0);
//	КонецЕсли;
//КонецПроцедуры

Процедура кнПечатьШтрихкодаВеса(флБезПросмотра,фл_автомаштаб=1)
	таб = СоздатьОбъект( "Таблица" );
	таб.ИсходнаяТаблица( "табВесШтрихкод" );
	Кол=1;
	Если ВвестиЧисло(Кол,"Введите кол-во наклеек",2,0,30)=0 Тогда
		Возврат;
	КонецЕсли;			
	
	Если ПустоеЗначение(Товар)=1 Тогда
		Предупреждение("Выбирите товар");
		Возврат;
	КонецЕсли;

	Для н = 1 по Кол Цикл
		пВес = Шаблон("[Вес1] kg");
		пШтрихКод =  EAN13CodeGenerate(Число(Лев(Товар.ШтрихКод,12)));
		таб.ВывестиСекцию( "с_ШтрихКодГол" );
		таб.ПараметрыСтраницы(1,100,,1,0,2,0,0,0,фл_автомаштаб,,);
		таб.НоваяСтраница();
	КонецЦикла;
	
	таб.ТолькоПросмотр( 1 );
	
	таб.ПараметрыСтраницы(1,100,,1,0,2,0,0,0,фл_автомаштаб,,);
	Если флБезПросмотра = 0 Тогда
		таб.Показать( "" ); 
	Иначе
		таб.Напечатать(0);
	КонецЕсли;
КонецПроцедуры


Функция НайтиПоШтрихКоду( выбШтрихКод )
	ШтрихКод = СокрЛП(выбШтрихКод);
	ШтрихКод = Лев(ШтрихКод,СтрДлина(ШтрихКод)-1);
	ПолныйКод = Прав("0000000000"+ШтрихКод,17);
	док = СоздатьОбъект( "Документ" );
	Если док.ВыбратьПоЗначению(,,"IDD",ПолныйКод) = 1 Тогда
		док.ПолучитьДокумент();
		Возврат док.ТекущийДокумент();
		//Если спВидПоискаПоШтрихКоду.ТекущаяСтрока() = 1 Тогда
		//	ДатаС = ?(НачалоИнтервала() > док.ДатаДок,док.ДатаДок,НачалоИнтервала());
		//	ДатаПо = ?(КонецИнтервала() < док.ДатаДок,док.ДатаДок,КонецИнтервала());
		//	УстановитьИнтервал(ДатаС,ДатаПо);
		//	АктивизироватьОбъект(док.ТекущийДокумент());
		//	Активизировать("Документ",0);
		//ИначеЕсли спВидПоискаПоШтрихКоду.ТекущаяСтрока() = 2 Тогда
		//	ВводНаОсн( док.ТекущийДокумент() );
		//КонецЕсли;
		//выбШтрихКод = "";
	Иначе
		Сообщить(Шаблон("Не найден документ по штрих-коду [ПолныйКод]"),"!");
		//Активизировать("выбШтрихКод",0);
	КонецЕсли;
КонецФункции

//Функция ПоискВесовогоКода(п_Код)
//
//	ТекстЗапроса="SELECT Номенклатура.ID [Ссылка $Справочник.Номенклатура]
//		|FROM $Справочник.Номенклатура AS Номенклатура With (NOLOCK)
//		|WHERE ($Номенклатура.ВесовойКод = :пКод)
//		|";
//	ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");
//	ЗапросСКЛ.УстановитьТекстовыйПараметр("пКод",п_Код);
//	л_КодТовара = ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
//	
//	Возврат л_КодТовара;
//КонецФункции // ПоискВесовогоКода


//Функция ПоискВесовогоКодаSQL(п_Код)
//
//	л_КодТовара="";
//	
//	ТекстЗапроса="SELECT  ID [Товар $Справочник.Номенклатура]
//		|FROM RTPOS_CA.dbo.foodlv_items
//		|WHERE (GLID = :пКод)
//		|";
//	ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");
//	ЗапросСКЛ.УстановитьТекстовыйПараметр("пКод",п_Код);
//	л_КодТовара = ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
//	
//	Возврат л_КодТовара;
//КонецФункции // ПоискВесовогоКода
//Функция ПоискВСправочнике(пШтрихкод="")//включая подчиненые через выбор элементов
//	Перем ИмяРекв,ПрефКода,ШтрихКодДляПоиска;
//
//	//если в строке штрихкода спереди идут 0 (ставятся, если вес меньше 1 кг)
//	Если Лев(Строка(пШтрихКод),2)="02" Тогда
//		позСтр=Найти(пШтрихКод,"2"); //если весовой товар
//		Если позСтр>0 Тогда
//			длинаСтр=СтрДлина(пШтрихКод);
//			БезНулей=Прав(пШтрихКод,длинаСтр-позСтр+1);
//			пШтрихКод=БезНулей;			
//		КонецЕсли;
//	КонецЕсли;
//	
//	ПрефКода=Лев(Строка(пШтрихКод),2); //поиск весового товара
//
//	Вес=0;
//		//{ Обработка весового товара 
//	Если (ПрефКода="29") ИЛИ (ПрефКода="28") ИЛИ (ПрефКода="23") ИЛИ (ПрефКода="24")  ИЛИ (ПрефКода="25")  Тогда
//
//		Сообщить("Штрихкод:"+пШтрихКод);
//		л_Товар=ПоискВесовогоКода(Число(Сред(пШтрихКод,3,6)));
//		Сообщить("Весовой код:"+Сред(пШтрихКод,3,6));
//		Сообщить(л_Товар);
//		Если ПустоеЗначение(л_Товар)=0 Тогда
//			Если л_Товар.Выбран()=1 Тогда
//				Возврат л_Товар;
//			КонецЕсли;
//			
//		КонецЕсли;
//	ИначеЕсли (ПрефКода="21") ИЛИ (ПрефКода="22")ИЛИ (ПрефКода="26") Тогда
//		Сообщить("Штрихкод:"+пШтрихКод);
//		л_Товар=ПоискВесовогоКодаSQL(Число(Сред(пШтрихКод,3,6)));
//		Сообщить("Весовой код:"+Сред(пШтрихКод,3,6));
//		Сообщить(л_Товар);
//		Если ПустоеЗначение(л_Товар)=0 Тогда
//			Если л_Товар.Выбран()=1 Тогда
//				Возврат л_Товар;
//			КонецЕсли;
//		КонецЕсли;	
////} Обработка весового товара		
//	Иначе
//		ШтрихКодДляПоиска=пШтрихКод;
//	КонецЕсли;
//
//	
//	спрТовар = СоздатьОбъект("Справочник.Номенклатура");
//	спрПодч=СоздатьОбъект("Справочник.ШтрихКоды");
//	
//	ИмяРекв = "Штрихкод";
//	ФлагГлобПоиска = 1; 
//	Если спрТовар.НайтиПоРеквизиту(ИмяРекв,СокрЛП(ШтрихКодДляПоиска),ФлагГлобПоиска)=1 Тогда
//		Возврат(спрТовар.ТекущийЭлемент());
// 	ИначеЕсли спрПодч.НайтиПоКоду(СокрЛП(ШтрихКодДляПоиска))=1 Тогда
// 		Возврат(спрПодч.ТекущийЭлемент().Владелец);
// 	КонецЕсли;	
//	// ничего не найдено
//	Возврат(ПолучитьПустоеЗначение(спрТовар));
//КонецФункции 


Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)
	Сообщить(Шаблон("Источник-[Источник] Событие-[Событие] Данные-[Данные]"));
	
	п_Строка=Данные;
	п_Признак=Лев(СокрЛП(п_Строка),3);
	п_Ошибка=п_Признак;
	Если п_Признак="S  " Тогда
		Вес1=Формат(Сред(Данные,7,15),"Ч10.2");
		Вес1=Число(Вес1)-Число(п_Тара);
		ПолучитьВесАвто();
		Возврат;
	КонецЕсли;	
	
	Если п_Признак="Z D" Тогда
	//	Форма.ОбработкаОжидания("ПолучитьВесАвто",флАвтоВес);
		ПолучитьВесАвто();
		Возврат;
	КонецЕсли;

	Если Лев(п_Признак,1)="T" Тогда
//		СОМПорт1.ЗаписатьСтроку("OT");

	//	Форма.ОбработкаОжидания("ПолучитьВесАвто",флАвтоВес);
		ПолучитьВесАвто();
		Возврат;
	КонецЕсли;	
	
	л_пр=Число(п_Признак);
	
	Если ПустоеЗначение(л_пр)=0 Тогда
		Если л_пр>1 Тогда
			л_Товар=ПоискВСправочнике(Данные);
		КонецЕсли;
	КонецЕсли;
	
	
	//Если Форма.Закладки.ТекущаяСтрока() = 1 Тогда
	//	Заявка = НайтиПоШтрихКоду( Данные );
	//Иначе
	//	//в закладке вес ищем по штрих-коду товар
	//	
	//	Товар=ПоискВСправочнике(Данные);
	//	р_ВесТары=ВесУпак(Товар);
	//	//НайтиТоварПоШтрихКоду(Данные);
	//КонецЕсли;
КонецПроцедуры

//Процедура ПриНажатииКнопкиКлавиатурыВеса(КодКлавиши, Alt, Shift, Ctrl, Символ, ФСО)
//	ФСО = 0;
//	Если КодКлавиши = 13 Тогда
//		кнПечать();
//		Ввод = "";
//		Кол = 0;
//		Вес = 0;
//		Форма.Обновить(0);
//	ИначеЕсли КодКлавиши = 8 Тогда
//		Ввод = "";
//		Кол = 0;
//		Вес = 0;
//		Форма.Обновить(0);
//	Иначе
//		Если Форма.Закладки.ТекущаяСтрока() = 1 Тогда
//			Если Найти("0123456789",Символ)>0 Тогда
//				Ввод = Ввод + Символ;
//				Кол = Число(Ввод);
//			КонецЕсли;
//		ИначеЕсли Форма.АктивныйЭлемент()="Вес" Тогда
//			Если Найти("0123456789,.",Символ)>0 Тогда
//				Ввод = Ввод + Символ;
//				Вес = Число(Ввод);
//			КонецЕсли;
//		КонецЕсли;
//		Форма.Обновить(0);
//	КонецЕсли;
//КонецПроцедуры

//Форма.ИспользоватьСлой("Вес,Основной",2);
//Форма.ИспользоватьЗакладки(1);
//Форма.Закладки.ДобавитьЗначение("Доставка");
//Форма.Закладки.ДобавитьЗначение("Вес");
//фл_ИТОГО=0;
//р_шт=0;
//фл_автомаштаб=1;
//
//фл_ПечатьОписание=1;
//
//chkDeviceEnabled=0;
//флАвтоВес=1;
//флБезПросмотра = 0;
//Вес1=0;

//}*************Весы***********\\



//{*************Клавиатура***********\\


Процедура кн_0()
	п_Текст=п_Текст+"0";
	Форма.т_Экран.Заголовок(п_Текст);
КонецПроцедуры 
Процедура кн_1()
	п_Текст=п_Текст+"1";
	Форма.т_Экран.Заголовок(п_Текст);
КонецПроцедуры 
Процедура кн_2()
	п_Текст=п_Текст+"2";
	Форма.т_Экран.Заголовок(п_Текст);
КонецПроцедуры 
Процедура кн_3()
	п_Текст=п_Текст+"3";
	Форма.т_Экран.Заголовок(п_Текст);
КонецПроцедуры 
Процедура кн_4()
	п_Текст=п_Текст+"4";
	Форма.т_Экран.Заголовок(п_Текст);
КонецПроцедуры 
Процедура кн_5()
	п_Текст=п_Текст+"5";
	Форма.т_Экран.Заголовок(п_Текст);
КонецПроцедуры 
Процедура кн_6()
	п_Текст=п_Текст+"6";
	Форма.т_Экран.Заголовок(п_Текст);
КонецПроцедуры 
Процедура кн_7()
	п_Текст=п_Текст+"7";
	Форма.т_Экран.Заголовок(п_Текст);
КонецПроцедуры 
Процедура кн_8()
	п_Текст=п_Текст+"8";
	Форма.т_Экран.Заголовок(п_Текст);
КонецПроцедуры 
Процедура кн_9()
	п_Текст=п_Текст+"9";
	Форма.т_Экран.Заголовок(п_Текст);
КонецПроцедуры 

Процедура кн_зп()
	п_Текст=п_Текст+".";
	Форма.т_Экран.Заголовок(п_Текст);
КонецПроцедуры // кн_0

Процедура кн_уд()
	п_Текст="";
	Форма.т_Экран.Заголовок("0");
КонецПроцедуры // кн_0

Процедура кн_удПрав()
	п_Текст=Лев(п_Текст,СтрДлина(п_Текст)-1);
	Форма.т_Экран.Заголовок(п_Текст);
КонецПроцедуры // кн_0

Процедура кн_окКлавиатура()
		п_Колич=Число(п_Текст);
	  	сзПараметр= СоздатьОбъект("СписокЗначений");
			сзПараметр.ДобавитьЗначение(п_Колич,"Колич");
 		Форма.Параметр=сзПараметр;
		Форма.Закрыть();
КонецПроцедуры // кн_0

Процедура кн_ВВОД(п_Вес="")
//	Сообщить(ТекущийСлой);
//	Сообщить(Таб_ТекущаяКолонка);
	Если ТекущийСлой=слТовара Тогда
		Если Таб.ПолучитьПараметрыКолонки(Таб_ТекущаяКолонка)="СрокРеализ" Тогда
//			Сообщить(п_Текст);
			ПанельВвода=Дата(п_Текст);
//			Сообщить(Дата(п_Текст));
			ПВ_ВводЗначения();
			кн_уд();
		ИначеЕсли	Таб.ПолучитьПараметрыКолонки(Таб_ТекущаяКолонка)="КоличествоФакт"  Тогда	
			Если п_Вес="" Тогда
				л_Ед=Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"Единица");
				Если СокрЛП(л_Ед)=СокрЛП(Перечисление.ЕдиницыИзмерения.Килограмм) Тогда
					Предупреждение("Вес вводится через кнопку ВЕС");
					кн_уд();
					Возврат;
				КонецЕсли;
				ПанельВвода=Число(п_Текст);	
				кн_уд();
			Иначе
				ПанельВвода=Число(п_Вес);
				кн_уд();
			КонецЕсли;
			ПВ_ВводЗначения();
		КонецЕсли;
		
		
	ИначеЕсли ТекущийСлой=слТаблицы Тогда
//		Сообщить(п_Текст);
		Если п_Текст<>"" Тогда
//			Сообщить(1);
			пвШтрихкод=СокрЛП(п_Текст);
			кнВводШтрихкода();	
			кн_уд();
		Иначе
//			Сообщить(2);
			пНомерСтроки=Таб_ТекущаяСтрока;
			Если пНомерСтроки<>0 Тогда
				Сообщить(пНомерСтроки);
				ТекущийСлой=слТовара;
				Форма.ИспользоватьСлой(ТекущийСлой,2);
				Таб_ТекущаяСтрока=пНомерСтроки;
				Таб_ТекущаяКолонка=п_НижОграничитель;
				НастроитьТекущуюСтроку();
				Если  п_Вес<>"" Тогда
					Таб.КоличествоФакт=п_Вес;
				КонецЕсли;
				ПВ_ВывестиЗначение();
				пвШтрихкод="";
			КонецЕсли;					
		КонецЕсли;

	ИначеЕсли ТекущийСлой=слПечать Тогда	
		пвКол=Окр(Число(п_Текст));
	КонецЕсли;
КонецПроцедуры	

//======================================================================
Процедура кн_ЗакрытьКлавиатура()
		п_Колич=Число(п_Текст);
	  	сзПараметр= СоздатьОбъект("СписокЗначений");
			сзПараметр.ДобавитьЗначение(0,"Колич");
 		Форма.Параметр=сзПараметр;
		Форма.Закрыть();	
КонецПроцедуры // кн_Закрыть

//======================================================================
//Процедура ПриОткрытииКлавиатура()
//	ПолучСЗПараметр = Форма.Параметр;
//		Если ПустоеЗначение(ПолучСЗПараметр)=0 Тогда
//			п_Колич=ПолучСЗПараметр.Получить("Колич");
//			п_Заголовок=ПолучСЗПараметр.Получить("Заголовок");
//			п_Текст=Строка(п_Колич);
//			Форма.т_Экран.Заголовок(п_Текст);
//			
//			Если ПустоеЗначение(п_Заголовок)=0 Тогда
//				Форма.Заголовок(п_Заголовок,0);
//			КонецЕсли;
//			
//		КонецЕсли;	
////	гСервис = СоздатьОбъект("Сервис");
////	гСервис.ПерехватКлавиатуры(1);
//	
//КонецПроцедуры // ПриОткрытии
//======================================================================
//Процедура ПриЗакрытииКлавиатура()
////	гСервис.ПерехватКлавиатуры(0);
//КонецПроцедуры // ПриЗакрытии

Процедура ПриНажатииКнопкиКлавиатурыКлавиатура(КодКлавиши, Alt, Shift, Ctrl, Символ, ФСО)
	ФСО = 0;
//	Ввод=п_Текст;
//	ЛегкоеСообщение(Символ+" "+КодКлавиши);
	Если КодКлавиши = 13 Тогда
		кн_окКлавиатура();
	ИначеЕсли КодКлавиши = 8 Тогда
		кн_удПрав();
	Иначе
//		Если Форма.Закладки.ТекущаяСтрока() = 1 Тогда
			Если Найти("0123456789,.",Символ)>0 Тогда
//				ЛегкоеСообщение(Символ);
//				Ввод = Ввод + Символ;
				п_Текст=п_Текст + Строка(Символ);
				Форма.т_Экран.Заголовок(п_Текст);
				Форма.Обновить(0);
//				ЛегкоеСообщение(Ввод);
//				Кол = Число(Ввод);
			КонецЕсли;
//		ИначеЕсли Форма.АктивныйЭлемент()="Вес" Тогда
//			Если Найти("0123456789,.",Символ)>0 Тогда
//				Ввод = Ввод + Символ;
//				Вес = Число(Ввод);
//			КонецЕсли;
//		КонецЕсли;
//		Форма.Обновить(0);
	КонецЕсли;
	
КонецПроцедуры
//======================================================================




//}*************Клавиатура***********\\


//{*************Выбор партии товара***********\\
Процедура пв_Таблица_Инициализация()
	Сервис = СоздатьОбъект("Сервис");
	МойШрифт3 = Сервис.СоздатьШрифт("Arial", 24, 8,,,,);
	
	ФормаРасш3 = СоздатьОбъект("РасширениеФормы");
	ФормаРасш3.УстановитьФорму(Форма);
	ФормаРасш3.ПолучитьАтрибут("пв_Таблица").Шрифт = МойШрифт3;
	ФормаРасш3.ПолучитьАтрибут("пв_Таблица").ЦветШрифта = ПолучитьЦвет(0,0,0);
	ФормаРасш3.ПолучитьАтрибут("пв_Таблица").ЦветФона = ПолучитьЦвет(255,255,255);
	
	пв_Таблица.НоваяКолонка("СрокРеализ","Дата",8,,,8,,);
	пв_Таблица.НоваяКолонка("Ост","Число",6,,,6,,);
	
КонецПроцедуры	

Процедура пв_Таблица_Обновить(п_Товар);
	
	пв_Таблица.УдалитьСтроки();
	
	Ост = Регистр.ОстаткиТоваров.СводныйОстаток(п_Товар,СкладЗагрузки,,"ОстатокТовара");
	Если Ост<=0 Тогда
		Возврат;
	КонецЕсли;
	
	
	ТекстЗапроса = "SELECT NullIf(ПартииТоваровОстатки.СрокРеализации, '17530101') СрокРеализации
	|					, ПартииТоваровОстатки.ОстатокТовараОстаток Ост
	|				FROM $РегистрОстатки.ПартииТоваров(,,
	|													(Фирма = :Фирма)
	|													AND (Товар = :Товар)
	|													AND (Статус <> :Статус)
	|													AND (Склад = :Склад),
	|													(Склад, ПрихДокумент, СрокРеализации),
	|													ОстатокТовара) AS ПартииТоваровОстатки
	|				INNER JOIN _1sjourn Жур (NOLOCK) ON Жур.IDDOC = RIGHT(ПартииТоваровОстатки.ПрихДокумент,9)
//	|				WHERE ПартииТоваровОстатки.ОстатокТовараОстаток>0 -- не выводим отрицательные остатки 
	|";
	
	
	Запрос	= СоздатьОбъект("ODBCRecordSet");
	Запрос.УстановитьТекстовыйПараметр("Фирма",Константа.ОсновнаяФирма);
	Запрос.УстановитьТекстовыйПараметр("Товар",п_Товар);
	Запрос.УстановитьТекстовыйПараметр("Склад",СкладЗагрузки);
	Запрос.УстановитьТекстовыйПараметр("Статус",Отданный);

	итСроки = СоздатьОбъект("ИндексированнаяТаблица");
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,итСроки);
	
	итСроки.Свернуть("СрокРеализации","Ост");
	итСроки.Сортировать("-СрокРеализации");


	итСроки.ВыбратьСтроки();
	Пока итСроки.ПолучитьСтроку() = 1 Цикл
		Если (итСроки.СрокРеализации>ТекущаяДата())и (итСроки.Ост>0)  Тогда
			пв_Таблица.НоваяСтрока();
			пв_Таблица.СрокРеализ = итСроки.СрокРеализации;
			пв_Таблица.Ост = итСроки.Ост;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

//======================================================================
Процедура пв_Таблица_ВыборСтроки()
	
	Если пв_Таблица.ТекущаяСтрока()=0 Тогда
		Возврат;
	КонецЕсли;
	
//	п_Текст=пв_Таблица.СрокРеализ;
	ПанельВвода=пв_Таблица.СрокРеализ;
	ПВ_ВводЗначения();
	

КонецПроцедуры // пв_Таблица_ВыборСтроки

//}*************Выбор партии товара***********\\




//Процедура кнМеню() Далее


//Функция ПолучитьСрокРеализации(пТовар,пКлиент)
//
//	//проведем проверку последнего прихода товара и срока реализации
//			
//	Запрос=СоздатьОбъект("ODBCRecordSet");
//	ТекстЗапроса="SELECT TOP 1 $ПартииТоваров.СрокРеализации СрокРеализ 
//	|					, ПартииТоваров.IDDOC [Документ $Документ]
//	|					, ПартииТоваров.IDDOCDEF Документ_вид
//	|					, $ПартииТоваров.ОстатокТовара Количество
//	|			  FROM $Регистр.ПартииТоваров AS ПартииТоваров (NOLOCK)
//	|			  WHERE ($ПартииТоваров.Товар = :ВыбТовар)
//	|					AND ПартииТоваров.DATE_TIME_IDDOC >= :НачДата AND ПартииТоваров.DATE_TIME_IDDOC <= :КонДата~
//	|					AND ПартииТоваров.DEBKRED = 0
//	|					AND $ПартииТоваров.КодОперации = :КодОп1
//	|					AND $ПартииТоваров.Контрагент = :ВыбПоставщик
//	|			  ORDER BY $ПартииТоваров.СрокРеализации DESC
//	|";
//	
//	Запрос.УстановитьТекстовыйПараметр("ВыбТовар", пТовар);
//	//Запрос.УстановитьТекстовыйПараметр("ВыбСрокРеализ", СрокРеализ);
//	Запрос.УстановитьТекстовыйПараметр("ВыбПоставщик", пКлиент);
//	Запрос.УстановитьТекстовыйПараметр("НачДата", ДатаДок - 180);
//	Запрос.УстановитьТекстовыйПараметр("КонДата", ?(Выбран()=0,СформироватьПозициюДокумента(ПолучитьДокументТА()),СформироватьПозициюДокумента(ТекущийДокумент(),-1)));
//	Запрос.УстановитьТекстовыйПараметр("КодОп1", ЗакупкаТовара);
//	табл=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
//
//	Если табл.КоличествоСтрок()=1 Тогда
//		табл.ПолучитьСтрокуПоНомеру(1);
//		Возврат табл.СрокРеализ;
//		//Если табл.СрокРеализ>СрокРеализ Тогда
//		//	ПроблемаДопустСрокаРеализации = Да;
//		//	Предупреждение("Введенный срок реализации меньше, чем поступал товар с максимальным сроком!");
//		//	//табл.ВыбратьСтроку();
//		//КонецЕсли;
//	КонецЕсли;
//
//КонецФункции 

Процедура УстановитьПретензиюВТекущейСтроке(текстКолонки)
	Если (текстКолонки="КоличествоФакт") Тогда
		Если глНеобходимоНаличиеПретензии(Контекст,таб.Товар,таб.Единица.Единица,таб.Количество,таб.КоличествоФакт)=1 Тогда
			п_ВерхОграничитель=6;
			ЗагрузитьТабличнуюЧасть(Таб);
			кнВперед();		
		Иначе
			Таб.СутьПретензии=ПолучитьПустоеЗначение();
			Таб.ПретензииКомпл=ПолучитьПустоеЗначение();
			п_ВерхОграничитель=5;
			ЗагрузитьТабличнуюЧасть(Таб);
			кнВперед();			
		КонецЕсли;
	КонецЕсли;			
КонецПроцедуры // УстановитьПретензиюВТекущейСтроке

Процедура УстановитьПретензиюВТекущейСтроке2(текстКолонки)
	Если (текстКолонки="КоличествоФакт") Тогда
		Если Число(таб.Количество)=Число(таб.КоличествоФакт) Тогда
			Таб.СутьПретензии=ПолучитьПустоеЗначение();
			Таб.ПретензииКомпл=ПолучитьПустоеЗначение();
			п_ВерхОграничитель=5;
			ЗагрузитьТабличнуюЧасть(Таб);
			кнВперед();
//		ИначеЕсли  (Число(таб.Количество)<>Число(таб.КоличествоФакт))И(ПоСчету.Клиент.ПечататьСрокиРеализ=1) Тогда
		ИначеЕсли ПустоеЗначение(Таб.МинСрокРеализ)=0 Тогда
			п_ВерхОграничитель=6;
			ЗагрузитьТабличнуюЧасть(Таб);
			кнВперед();
		Иначе
			Таб.ПретензииКомпл=Перечисление.ПретензииКомпл.B03;
			п_ВерхОграничитель=5;
			ЗагрузитьТабличнуюЧасть(Таб);
			кнВперед();
		КонецЕсли;
	КонецЕсли;			
КонецПроцедуры // УстановитьПретензиюВТекущейСтроке

Процедура УстановитьПретензиюВТекущейСтроке1(текстКолонки)
	Если (текстКолонки="КоличествоФакт") Тогда
		Если Число(таб.Количество)=Число(таб.КоличествоФакт) Тогда
			Таб.СутьПретензии=ПолучитьПустоеЗначение();
			Таб.ПретензииКомпл=ПолучитьПустоеЗначение();
			п_ВерхОграничитель=5;
			ЗагрузитьТабличнуюЧасть(Таб);
			кнВперед();
		Иначе
			Таб.ПретензииКомпл=Перечисление.ПретензииКомпл.B05;
			п_ВерхОграничитель=5;
			ЗагрузитьТабличнуюЧасть(Таб);
			кнВперед();
		КонецЕсли;
	КонецЕсли;			
КонецПроцедуры // УстановитьПретензиюВТекущейСтроке


//======================================================================
Процедура ЗаполнитьКомплектациюЗаявкиФакт(ДокКомпФакт)
//		ДокКомпФакт.Новый();
//		ДокКомпФакт.НомерДок = ;
//		ДокКомпФакт.ДатаДок = ;

		ДокКомпФакт.ПоСчету = ПоСчету;
		ДокКомпФакт.Комплектовщик = Комплектовщик;
		ДокКомпФакт.СкладЗагрузки = СкладЗагрузки;
		ДокКомпФакт.Аннулировать = Аннулировать;
		ДокКомпФакт.НомерОриг = НомерОриг;
		ДокКомпФакт.Фирма = Фирма;
		ДокКомпФакт.Автор = Автор;
		ДокКомпФакт.Основание = Основание;
//		ДокКомпФакт.ТипУчета = ДокКомплектацияМобил.ТипУчета;
//		ДокКомпФакт.ФинУчет = ДокКомплектацияМобил.ФинУчет;
		ДокКомпФакт.ТоварШапки = ТоварШапки;
//		ДокКомпФакт.IDD = ;
		ДокКомпФакт.НеВыгружать = НеВыгружать;
		ДокКомпФакт.КоличествоКоробок = КоличествоКоробок;
		
		ПоСчету.ВыбратьСтроки();
		Пока ПоСчету.ПолучитьСтроку() = 1 Цикл
			ДокКомпФакт.НоваяСтрока();
			
			л_найденТовар=0;
			//ВыбратьСтроки();
			//Пока ПолучитьСтроку() = 1 Цикл
			//	Если Товар=ПоСчету.Товар Тогда
			//		л_найденТовар=1;
			//		Прервать;	
			//	КонецЕсли;
			//КонецЦикла;
			ВыбратьСтроки();    // товар стирается.
			Пока ПолучитьСтроку() = 1 Цикл
				Если ТовКод=ПоСчету.ТовКод Тогда
					л_найденТовар=1;
					Прервать;	
				КонецЕсли;
			КонецЦикла;
			
			
			Если ПоСчету.ВидЗаявки<>Перечисление.ВидыЗаявок.СпецЗаказ Тогда
				ДокКомпФакт.Количество = ПоСчету.Резерв;
				ДокКомпФакт.Резерв = ПоСчету.Количество;
			Иначе
				ДокКомпФакт.Количество = ПоСчету.Количество;
				ДокКомпФакт.Резерв = ПоСчету.Резерв;
			КонецЕсли;			
			
			ДокКомпФакт.Товар = ПоСчету.Товар;
			ДокКомпФакт.ТовКод = ПоСчету.ТовКод;
			ДокКомпФакт.Коэффициент = ПоСчету.Коэффициент;
			ДокКомпФакт.Единица = ПоСчету.Единица;
			
			Если л_найденТовар=1 Тогда
				ДокКомпФакт.КоличествоФакт = КоличествоФакт;
				
				Если ДокКомпФакт.Единица.Единица<>ДокКомпФакт.Товар.БазоваяЕдиницаИзмерения Тогда
					ДокКомпФакт.КоличествоФактБазЕд = КоличествоФакт*Коэффициент;
				КонецЕсли;

//				ДокКомпФакт.КоличествоФактБазЕд= КоличествоФакт*Коэффициент;
			
				Если ПоСчету.ВидЗаявки<>Перечисление.ВидыЗаявок.СпецЗаказ Тогда
					ДокКомпФакт.Количество = Резерв;
					ДокКомпФакт.Резерв = Количество;
				Иначе
					ДокКомпФакт.Количество = Количество;
					ДокКомпФакт.Резерв = Резерв;
				КонецЕсли;							
				
				
				Если ПустоеЗначение(ПретензииКомпл)=0 Тогда
					спр=СоздатьОбъект("Справочник.Претензии");
					Если Спр.НайтиПоКоду(ПретензииКомпл.Идентификатор())=1 Тогда
						СутьПретензии=спр.ТекущийЭлемент();
					КонецЕсли;
				Иначе
					СутьПретензии=ПолучитьПустоеЗначение();
				КонецЕсли;
				
				ДокКомпФакт.СутьПретензии = СутьПретензии;
				ДокКомпФакт.ТоварЗамена = ТоварЗамена;
				ДокКомпФакт.НомерСтрокиЗамены = НомерСтрокиЗамены;
				ДокКомпФакт.СрокРеализ = СрокРеализ;
				ДокКомпФакт.ВидУведомления = ВидУведомления;
				ДокКомпФакт.СрокРеализДоп = СрокРеализДоп;
			Иначе
				ДокКомпФакт.КоличествоФакт = 0;
				ДокКомпФакт.КоличествоФактБазЕд= 0;
		
				спр=СоздатьОбъект("Справочник.Претензии");
				Если Спр.НайтиПоКоду("B02.1")=1 Тогда
					л_СутьПретензии=спр.ТекущийЭлемент();
				Иначе
					л_СутьПретензии=ПолучитьПустоеЗначение();
				КонецЕсли;
				ДокКомпФакт.СутьПретензии=л_СутьПретензии;				
			КонецЕсли;
		КонецЦикла;	
КонецПроцедуры // 

Процедура ЗаполнитьКомплектациюЗаявкиФакт1(ДокКомпФакт)
//		ДокКомпФакт.Новый();
//		ДокКомпФакт.НомерДок = ;
//		ДокКомпФакт.ДатаДок = ;

		ДокКомпФакт.ПоСчету = ПоСчету;
		ДокКомпФакт.Комплектовщик = Комплектовщик;
		ДокКомпФакт.СкладЗагрузки = СкладЗагрузки;
		ДокКомпФакт.Аннулировать = Аннулировать;
		ДокКомпФакт.НомерОриг = НомерОриг;
		ДокКомпФакт.Фирма = Фирма;
		ДокКомпФакт.Автор = Автор;
		ДокКомпФакт.Основание = Основание;
//		ДокКомпФакт.ТипУчета = ДокКомплектацияМобил.ТипУчета;
//		ДокКомпФакт.ФинУчет = ДокКомплектацияМобил.ФинУчет;
		ДокКомпФакт.ТоварШапки = ТоварШапки;
//		ДокКомпФакт.IDD = ;
		ДокКомпФакт.НеВыгружать = НеВыгружать;
		ДокКомпФакт.КоличествоКоробок = КоличествоКоробок;
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			ДокКомпФакт.НоваяСтрока();

			Если ПоСчету.ВидЗаявки<>Перечисление.ВидыЗаявок.СпецЗаказ Тогда
				ДокКомпФакт.Количество = Резерв;
				ДокКомпФакт.Резерв = Количество;
			Иначе
				ДокКомпФакт.Количество = Количество;
				ДокКомпФакт.Резерв = Резерв;
			КонецЕсли;			
			
			ДокКомпФакт.Товар = Товар;
			ДокКомпФакт.ТовКод = ТовКод;
			ДокКомпФакт.Коэффициент = Коэффициент;
			ДокКомпФакт.Единица = Единица;
			ДокКомпФакт.КоличествоФакт = КоличествоФакт;
			ДокКомпФакт.КоличествоФактБазЕд= КоличествоФакт*Коэффициент;
			
			
			Если ПустоеЗначение(ПретензииКомпл)=0 Тогда
				спр=СоздатьОбъект("Справочник.Претензии");
				Если Спр.НайтиПоКоду(ПретензииКомпл.Идентификатор())=1 Тогда
					СутьПретензии=спр.ТекущийЭлемент();
				КонецЕсли;
			Иначе
				СутьПретензии=ПолучитьПустоеЗначение();
			КонецЕсли;
			
			ДокКомпФакт.СутьПретензии = СутьПретензии;
			ДокКомпФакт.ТоварЗамена = ТоварЗамена;
			ДокКомпФакт.НомерСтрокиЗамены = НомерСтрокиЗамены;
			ДокКомпФакт.СрокРеализ = СрокРеализ;
			ДокКомпФакт.ВидУведомления = ВидУведомления;
			ДокКомпФакт.СрокРеализДоп = СрокРеализДоп;
		КонецЦикла;	
КонецПроцедуры // 

Функция СоздатьКомплектациюЗаявкиФакт(пДок)
//Создаем комплектацию заявки
	ДокКомпФакт=СоздатьОбъект("Документ.КомплектацияЗаявкиФакт");
//	ДокКомплектацияМобил=СоздатьОбъект("Документ.КомплектацияМобил");
	
	НайденДокКомплФакт=0;
//	НайденКомплектацияМобил=0;
	
	ДокПодч=СоздатьОбъект("Документ");
	ДокПодч.ВыбратьПодчиненныеДокументы(пДок.ДатаДок,,пДок);
	Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
		Если (ДокПодч.Вид()="КомплектацияЗаявкиФакт") И (ДокПодч.ПометкаУдаления()=0) Тогда
			ДокКомпФакт.НайтиДокумент(ДокПодч.ТекущийДокумент());
			НайденДокКомплФакт=1; //исправляем, сохраняем и проводим
			Если ДокПодч.Проведен()=1 Тогда
				НайденДокКомплФакт=2; //нельзя редактировать
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
//	Предупреждение(Комплектовщик);	
//	Предупреждение(НайденДокКомплФакт);

	Если НайденДокКомплФакт=0 Тогда
		ДокКомпФакт.Новый();
		ЗаполнитьШапку(ДокКомпФакт); 
		
		ЗаполнитьКомплектациюЗаявкиФакт(ДокКомпФакт);

		ДокКомпФакт.АвтоВремяТекущее();
		ДокКомпФакт.Записать();
//		ОбъектЗаписать(ДокКомпФакт,);
//		ДокКомпФакт.АвтоВремяТекущее();
	//	ДокКомп.УстановитьВремя(Часы_,Мин_,Сек_+1);
		Если ДокКомпФакт.Провести(1)=1 Тогда
			ЗаписьЖурналаРегистрации( "Комплектация "+ДокКомпФакт.НомерДок+" по заявке "+пДок.НомерДок,, "Комплектация заявок", пДок.ТекущийДокумент(), 2 );
			Возврат 1;
		Иначе
			Возврат 0;
		КонецЕсли;
	ИначеЕсли НайденДокКомплФакт=1 Тогда
		ДокКомпФакт.УдалитьСтроки();
		ЗаполнитьКомплектациюЗаявкиФакт(ДокКомпФакт);

		ДокКомпФакт.АвтоВремяТекущее();
//		ОбъектЗаписать(ДокКомпФакт,);
		ДокКомпФакт.Записать();
//		ДокКомпФакт.АвтоВремяТекущее();
	//	ДокКомп.УстановитьВремя(Часы_,Мин_,Сек_+1);
		Если ДокКомпФакт.Провести(1)=1 Тогда
			ЗаписьЖурналаРегистрации( "Комплектация "+ДокКомпФакт.НомерДок+" по заявке "+пДок.НомерДок,, "Комплектация заявок", пДок.ТекущийДокумент(), 2 );
			Возврат 1;
		Иначе
			Возврат 0;
		КонецЕсли;		
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции // СоздатьКомплектациюЗаявки


Процедура ОбработкаВнешнихКоманд()
	Перем ПолучСЗПараметр;
	Перем Команда,пКомплектовщик;
	Перем пТекущийДокПоставки;
	
	ПолучСЗПараметр = Форма.Параметр;
	
	Если ТипЗначенияСтр(ПолучСЗПараметр) = "СписокЗначений" Тогда
		Если ПустоеЗначение(ПолучСЗПараметр)=0 Тогда
			Команда=ПолучСЗПараметр.Получить("Команда");
			пТекущийДокПоставки=ПолучСЗПараметр.Получить("пДок");
			пКомплектовщик=ПолучСЗПараметр.Получить("пКомплектовщик");
			
			Если Команда="Новый" Тогда
				ТекущийДокПоставки=пТекущийДокПоставки;
				Комплектовщик=пКомплектовщик;
				ВводНаОсновании(ТекущийДокПоставки);
				старТекущийДокПоставки=ТекущийДокПоставки;
			ИначеЕсли Команда="Открыть" Тогда
				ТекущийДокПоставки=пТекущийДокПоставки;
				Комплектовщик=пКомплектовщик;
				старТекущийДокПоставки=ПоСчету;
			ИначеЕсли Команда="Просмотр" Тогда
				ТекущийДокПоставки=пТекущийДокПоставки;
				Комплектовщик=пКомплектовщик;
				старТекущийДокПоставки=ПоСчету;
				флТолькоПросмотр=1;
				
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры



//{Вывод Инфо
Процедура ВыводТовара(пСтрока)
	Перем текстЗаголовка,пТовар;
	Перем пСрокПред,пСрокТек;
	
	Если Таб.КоличествоСтрок()>0 Тогда
		пТовар=Таб.ПолучитьЗначение(пСтрока,"Товар");
		текстЗаголовка=Строка(пСтрока)+". "+пТовар.Наименование; 
		Форма.тТовар.Заголовок(текстЗаголовка);
		
		пСрокТек=Таб.ПолучитьЗначение(пСтрока,"СрокРеализ");

			ПоСчету.ВыбратьСтроки();
			Пока ПоСчету.ПолучитьСтроку() = 1 Цикл
				Если пТовар=ПоСчету.Товар Тогда
					пСрокМин=ПоСчету.МинСрокРеализ;
					пСрокМакс=ПоСчету.МаксСрокРеализ;
					пКоэфицент=ПоСчету.Коэффициент;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			Если семТекСтрана() = "LV" Тогда
				промКлиент = ?(ПоСчету.КлиентФилиала.Выбран() = 0,ПоСчету.Клиент,ПоСчету.КлиентФилиала);
			Иначе
				промКлиент = ПоСчету.Клиент;
				
			КонецЕсли;
	
			Если промКлиент.КлГруппа.Выбран()=1 Тогда
				промКлГруппа=промКлиент.КлГруппа;
			Иначе
				промКлГруппа=промКлиент;
			КонецЕсли;       					
			
			Если (Число(пСрокМин) = 0) и ((Число(пСрокМакс) = 0)) Тогда
				СрокРеал = Окр( пТовар.СрокГодн * глПолучитьДопустСрокРеализацииТовараПоКлиенту(промКлГруппа,пТовар) / 100, 0, 1 );
				пДатаРеал = ?( СрокРеал > 0, ПоСчету.ДатаПоставки + СрокРеал, "" );
			Иначе
				пДатаРеал = Шаблон("[пСрокМин]-[пСрокМакс]");
			КонецЕсли;		

		текстЗаголовка="Код:"+пТовар.Код+" Штр.:"+пТовар.Штрихкод;
		текстЗаголовка1="СрокРеализ: "+пДатаРеал;	
			
			Форма.тАртикул.Цвет(0,0,0);
			Форма.тАртикул1.Цвет(0,0,0);

		

		пКоличество=Таб.ПолучитьЗначение(пСтрока,"Количество");
		пЕденица=Таб.ПолучитьЗначение(пСтрока,"Единица");
		л_КоличествоФакт=Таб.ПолучитьЗначение(пСтрока,"КоличествоФакт");
		
		Если пЕденица.Единица=Перечисление.ЕдиницыИзмерения.Килограмм Тогда
            Попытка
                КоэфНеттоВеса = Окр(1/пТовар.ЕдНеттоВеса.Коэффициент,4,1);  
            Исключение
                КоэфНеттоВеса=1;
            КонецПопытки;
			
            пКолУп =Окр( ?(пТовар.ЛогистикаКолВУпаковке = 0, 0, Окр(пКоличество*пКоэфицент*КоэфНеттоВеса/пТовар.ЛогистикаКолВУпаковке, 1, 1 ) ),0);
			текстКоличество="Кол: "+Строка(л_КоличествоФакт)+" из "+Строка(пКоличество)+" "+пЕденица+"="+пКолУп+" kaste";
		Иначе
			текстКоличество="Кол: "+Строка(л_КоличествоФакт)+" из "+Строка(пКоличество)+" "+пЕденица;
		КонецЕсли;

		Форма.тАртикул.Заголовок(текстЗаголовка);
		Форма.тАртикул1.Заголовок(текстЗаголовка1);
		Форма.тКоличество.Заголовок(текстКоличество);
//		п_Текст=пТовар.Код;
//		Форма.т_Экран.Заголовок(п_Текст);
	Иначе
		Форма.тТовар.Заголовок("Пусто");
		Форма.тАртикул.Заголовок("Пусто");
		Форма.тАртикул1.Заголовок("Пусто");
		Форма.тКоличество.Заголовок("Пусто");
	КонецЕсли;
КонецПроцедуры
//Процедура ВыводТовара1(пСтрока)
//	Перем текстЗаголовка,пТовар;
//	Перем пСрокПред,пСрокТек;
//	
//	Если Таб.КоличествоСтрок()>0 Тогда
//		пТовар=Таб.ПолучитьЗначение(пСтрока,"Товар");
//		текстЗаголовка=Строка(пСтрока)+". "+пТовар.Наименование; 
//		Форма.тТовар.Заголовок(текстЗаголовка);
//		
////		пСрокПред=ПолучитьСрокРеализации(пТовар,ДокументОснование.Клиент);
//		пСрокТек=Таб.ПолучитьЗначение(пСтрока,"СрокРеализ");
//
//		Если пТовар.СрокГодн = 0 Тогда пСрокПред = "???";
//		ИначеЕсли пТовар.ДопустСрокГодн = 0 Тогда пСрокПред = ДокументОснование.ДатаПоставки + пТовар.СрокГодн;
//		Иначе пСрокПред = ДокументОснование.ДатаПоставки + пТовар.ДопустСрокГодн;
//		КонецЕсли;
//		
//		//текстЗаголовка="Код пост./Пред. срок/Тек. срок: "+
//		//	СокрЛП(Строка(?(ПустоеЗначение(пТовар.КодПоставщика)=0,пТовар.КодПоставщика,"...........")))+
//		//	" / "+СокрЛП(Строка(пСрокПред))+
//		//	" / "+СокрЛП(Строка(пСрокТек));
//		
//		
//		л_номстр="";
//		Если ТаблСчет.НайтиЗначение(пТовар,л_номстр,"Товар")=1 Тогда //"Товар"
//			ТаблСчет.ПолучитьСтрокуПоНомеру(л_номстр);
//		
//	
//			Если (Число(ТаблСчет.МинСрокРеализ) = 0) и ((Число(ТаблСчет.МаксСрокРеализ) = 0)) Тогда
//				СрокРеал = Окр( пТовар.СрокГодн * промКлГруппа.ДопустСрокРеализации / 100, 0, 1 );
//				пДатаРеал = ?( СрокРеал > 0, ДокументОснование.ДатаПоставки + СрокРеал, "" );
//			Иначе
//				пДатаРеал = Шаблон("[ТаблСчет.МинСрокРеализ]-[ТаблСчет.МаксСрокРеализ]");
//			КонецЕсли;		
//		Иначе
//			пДатаРеал="";
//		КонецЕсли;
//		текстЗаголовка="Код:"+пТовар.Код+" Штр.:"+пТовар.Штрихкод;
//		текстЗаголовка1="СрокРеализ: "+пДатаРеал;	
//			
////		Если пСрокПред>пСрокТек Тогда
////			Форма.тАртикул.Цвет(255,0,0);
////		Иначе
//			Форма.тАртикул.Цвет(0,0,0);
//			Форма.тАртикул1.Цвет(0,0,0);
////		КонецЕсли;
//		
//
//		пКоличество=Таб.ПолучитьЗначение(пСтрока,"Количество");
//		пЕденица=Таб.ПолучитьЗначение(пСтрока,"Единица");
//		текстКоличество="Кол: "+Строка(пКоличество)+" "+пЕденица;
//
//		Форма.тАртикул.Заголовок(текстЗаголовка);
//		Форма.тАртикул1.Заголовок(текстЗаголовка1);
//		Форма.тКоличество.Заголовок(текстКоличество);	
//	Иначе
//		Форма.тТовар.Заголовок("Пусто");
//		Форма.тАртикул.Заголовок("Пусто");
//		Форма.тАртикул1.Заголовок("Пусто");
//		Форма.тКоличество.Заголовок("Пусто");
//	КонецЕсли;
//КонецПроцедуры

Процедура ВыводКлиента(док)
	Перем текстЗаголовка;
	
	текстЗаголовка=Строка(док.ДатаПрихода)+". "+док.Клиент.Наименование;
	Форма.тКлиент.Заголовок(текстЗаголовка);
КонецПроцедуры

Функция ПолучениеКоличества(пТовар)
	Перем кол;
	Возврат 0;
	ИТ=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос=СоздатьОбъект("ODBCRecordSet");
	
	ТекстЗапроса="SELECT $ПрихНаклМобилСтроки.Товар [Товар $Справочник.Номенклатура]
//	|	, NullIf($ПрихНаклМобилСтроки.СрокРеализ, '17530101') СрокРеализ
	|	, Sum($ПрихНаклМобилСтроки.Количество) СуммаКоличество
	|FROM $Документ.ПрихНаклМобил AS ПрихНаклМобил
	|	LEFT OUTER JOIN $ДокументСтроки.ПрихНаклМобил AS ПрихНаклМобилСтроки ON ПрихНаклМобил.IDDOC = ПрихНаклМобилСтроки.IDDOC
	|WHERE ($ПрихНаклМобил.ДокументОснование = $ВидДокумента36.ОжидаемаяПоставка + :Док)
	|GROUP BY $ПрихНаклМобилСтроки.Товар
	|";	
	
	
	Запрос.УстановитьТекстовыйПараметр("Док",ДокументОснование);
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,ИТ);
	ИТ.ДобавитьИндекс("иТовар","Товар");
	//ИТ.Показать();
//	СписокЗнач = СоздатьОбъект("СписокЗначений");
//	СписокЗнач.ДобавитьЗначение(Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"Товар"));
//	СписокЗнач.ДобавитьЗначение(Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"СрокРеализ"));
	
	ИТ.ВыбратьСтроки();
	Если ИТ.НайтиСтроку("иТовар",пТовар,,1)>0 Тогда
		кол=ИТ.СуммаКоличество;
	КонецЕсли;
	
	Возврат кол;
КонецФункции
Процедура ВыводИнфо()
//	Форма.тИнфо.Заголовок(Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"Количество"));
//	Форма.тИнфо1.Заголовок(Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"КоличествоФакт"));		
//	Форма.тИнфо2.Заголовок(ПолучениеКоличества(Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"Товар")));
КонецПроцедуры
//}Вывод Инфо

//{ПоискПоШтрихкоду
Функция ПоискВТабличнойЧасти(пТовар="")
Перем номСтр;
	номСтр=0;
	Таб.ВыбратьСтроки();
	Пока Таб.ПолучитьСтроку() = 1 Цикл
		номСтр=номСтр+1;
		Если Таб.Товар=пТовар Тогда
			Возврат(номСтр);
		КонецЕсли;
	КонецЦикла;
	Возврат(0);
КонецФункции 
Функция ПоискВТабличнойЧасти1(пШтрихкод="")
Перем номСтр;
	номСтр=0;
	Таб.ВыбратьСтроки();
	Пока Таб.ПолучитьСтроку() = 1 Цикл
		номСтр=номСтр+1;
		Если СокрЛП(пШтрихкод)=СокрЛП(Таб.ШтрихКод) Тогда
			Возврат(номСтр);
		КонецЕсли;
	КонецЦикла;
	Возврат(0);
КонецФункции 

//Функция ПоискВСправочнике1(пШтрихкод="")//не включая подчиненые
//	спрТовар = СоздатьОбъект("Справочник.Номенклатура");
//	ИмяРекв = "Штрихкод"; 
//	ФлагГлобПоиска = 1; 
//	Если спрТовар.НайтиПоРеквизиту(ИмяРекв,СокрЛП(пШтрихкод),ФлагГлобПоиска)=1 Тогда
//		Возврат(спрТовар.ТекущийЭлемент());
//	КонецЕсли;
//	Возврат(ПолучитьПустоеЗначение(спрТовар));
//КонецФункции 
//Функция ПоискВСправочнике3(пШтрихкод="")//включая подчиненые
//	спрТовар = СоздатьОбъект("Справочник.Номенклатура");
//	спрПодч=СоздатьОбъект("Справочник.ШтрихКоды");
//	ИмяРекв = "Штрихкод";
//	спрТовар.ВыбратьЭлементы();
//    Пока спрТовар.ПолучитьЭлемент()=1 Цикл     
//        Если спрТовар.ЭтоГруппа()=1  Тогда
//            продолжить;//группы не имеют подчиненных элементов
//		КонецЕсли;
//		//сначало ищем в товаре
//		Если спрТовар.ШтрихКод=СокрЛП(пШтрихкод) Тогда
//			Возврат(спрТовар.ТекущийЭлемент());
//		КонецЕсли;
//		//потом ищем в подчиненом справочнике
//        спрПодч.ИспользоватьВладельца(спрТовар.ТекущийЭлемент());//будем перебирать только 
//        спрПодч.ВыбратьЭлементы(); //перебираем только подчиненные конкретному владельцу
//		Пока спрПодч.ПолучитьЭлемент()=1 Цикл
//			Если спрПодч.ШтрихКод=СокрЛП(пШтрихкод) Тогда
//				Возврат(спрТовар.ТекущийЭлемент());
//			КонецЕсли;
//		КонецЦикла;
//
//    КонецЦикла; 
//	// ничего не найдено
//	Возврат(ПолучитьПустоеЗначение(спрТовар));
//КонецФункции 
//Функция ПоискВСправочнике4(пШтрихкод="")//включая подчиненые
//	спрТовар = СоздатьОбъект("Справочник.Номенклатура");
//	спрПодч=СоздатьОбъект("Справочник.ШтрихКоды");
//	ИмяРекв = "Штрихкод";
//	спрТовар.ВыбратьЭлементы();
//    Пока спрТовар.ПолучитьЭлемент()=1 Цикл     
//        Если спрТовар.ЭтоГруппа()=1  Тогда
//            продолжить;//группы не имеют подчиненных элементов
//		КонецЕсли;
//		//сначало ищем в товаре
//		Если спрТовар.ШтрихКод=СокрЛП(пШтрихкод) Тогда
//			Возврат(спрТовар.ТекущийЭлемент());
//		КонецЕсли;
//		//потом ищем в подчиненом справочнике
//        спрПодч.ИспользоватьВладельца(спрТовар.ТекущийЭлемент());//будем перебирать только 
//        спрПодч.ВыбратьЭлементы(); //перебираем только подчиненные конкретному владельцу
//		Пока спрПодч.ПолучитьЭлемент()=1 Цикл
//			Если спрПодч.ШтрихКод=СокрЛП(пШтрихкод) Тогда
//				Возврат(спрТовар.ТекущийЭлемент());
//			КонецЕсли;
//		КонецЦикла;
//
//    КонецЦикла; 
//	// ничего не найдено
//	Возврат(ПолучитьПустоеЗначение(спрТовар));
//КонецФункции 

Функция ПоискВесовогоКода(п_Код)

	ТекстЗапроса="SELECT Номенклатура.ID [Ссылка $Справочник.Номенклатура]
		|FROM $Справочник.Номенклатура AS Номенклатура With (NOLOCK)
		|WHERE ($Номенклатура.ВесовойКод = :пКод)
		|";
	ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");
	ЗапросСКЛ.УстановитьТекстовыйПараметр("пКод",п_Код);
	л_КодТовара = ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	
	Возврат л_КодТовара;
КонецФункции // ПоискВесовогоКода
Функция ПоискВесовогоКодаSQL(п_Код)

	л_КодТовара="";
	
	ТекстЗапроса="SELECT  ID [Товар $Справочник.Номенклатура]
		|FROM RTPOS_CA.dbo.foodlv_items
		|WHERE (GLID = :пКод)
		|";
	ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");
	ЗапросСКЛ.УстановитьТекстовыйПараметр("пКод",п_Код);
	л_КодТовара = ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	
	Возврат л_КодТовара;
КонецФункции // ПоискВесовогоКода

Функция ПоискВСправочнике(пШтрихкод="")//включая подчиненые через выбор элементов
	Перем ИмяРекв,ПрефКода,ШтрихКодДляПоиска;

	//если в строке штрихкода спереди идут 0 (ставятся, если вес меньше 1 кг)
	Если Лев(Строка(пШтрихКод),2)="02" Тогда
		позСтр=Найти(пШтрихКод,"2"); //если весовой товар
		Если позСтр>0 Тогда
			длинаСтр=СтрДлина(пШтрихКод);
			БезНулей=Прав(пШтрихКод,длинаСтр-позСтр+1);
			пШтрихКод=БезНулей;			
		КонецЕсли;
	КонецЕсли;
	
	ПрефКода=Лев(Строка(пШтрихКод),2); //поиск весового товара

	Вес=0;
		//{ Обработка весового товара 
	Если (ПрефКода="29") ИЛИ (ПрефКода="28") ИЛИ (ПрефКода="23") ИЛИ (ПрефКода="24")  ИЛИ (ПрефКода="25")  Тогда

		Сообщить("Штрихкод:"+пШтрихКод);
		л_Товар=ПоискВесовогоКода(Число(Сред(пШтрихКод,3,6)));
		Сообщить("Весовой код:"+Сред(пШтрихКод,3,6));
		Сообщить(л_Товар);
		Если ПустоеЗначение(л_Товар)=0 Тогда
			Если л_Товар.Выбран()=1 Тогда
				Возврат л_Товар;
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли (ПрефКода="21") ИЛИ (ПрефКода="22")ИЛИ (ПрефКода="26") Тогда
		Сообщить("Штрихкод:"+пШтрихКод);
		л_Товар=ПоискВесовогоКодаSQL(Число(Сред(пШтрихКод,3,6)));
		Сообщить("Весовой код:"+Сред(пШтрихКод,3,6));
		Сообщить(л_Товар);
		Если ПустоеЗначение(л_Товар)=0 Тогда
			Если л_Товар.Выбран()=1 Тогда
				Возврат л_Товар;
			КонецЕсли;
		КонецЕсли;	
//} Обработка весового товара		
	Иначе
		ШтрихКодДляПоиска=пШтрихКод;
	КонецЕсли;

	
	спрТовар = СоздатьОбъект("Справочник.Номенклатура");
	спрПодч=СоздатьОбъект("Справочник.ШтрихКоды");
	
	ИмяРекв = "Штрихкод";
	
	//PR 13.06.17 Begin 
	//если закодирован код товара тогда ищем по реквизиту Код товара
	ПозЗвезд=0;
	ПозЗвезд=Найти(Строка(пШтрихКод),"*");
	Если  (ПозЗвезд>0) И  (СтрДлина(Строка(пШтрихКод))<=10) Тогда
		ИмяРекв = "КодТовара";
		ШтрихКодДляПоиска = Сред(СокрЛП(пШтрихкод),ПозЗвезд+1,7);
	КонецЕсли;
	//PR 13.06.17 End
	
	ФлагГлобПоиска = 1; 
	Если спрТовар.НайтиПоРеквизиту(ИмяРекв,СокрЛП(ШтрихКодДляПоиска),ФлагГлобПоиска)=1 Тогда
		Возврат(спрТовар.ТекущийЭлемент());
 	ИначеЕсли спрПодч.НайтиПоКоду(СокрЛП(ШтрихКодДляПоиска))=1 Тогда
 		Возврат(спрПодч.ТекущийЭлемент().Владелец);
 	КонецЕсли;	
	// ничего не найдено
	Возврат(ПолучитьПустоеЗначение(спрТовар));
КонецФункции 

Функция ПоискВСправочнике1(пШтрихкод="")//включая подчиненые через выбор элементов
	Перем ИмяРекв,ПрефКода,ШтрихКодДляПоиска;

	//если в строке штрихкода спереди идут 0 (ставятся, если вес меньше 1 кг)
	Если Лев(Строка(пШтрихКод),2)="02" Тогда
		позСтр=Найти(пШтрихКод,"2"); //если весовой товар
		Если позСтр>0 Тогда
			длинаСтр=СтрДлина(пШтрихКод);
			БезНулей=Прав(пШтрихКод,длинаСтр-позСтр+1);
			пШтрихКод=БезНулей;			
		КонецЕсли;
	КонецЕсли;
	
	ПрефКода=Лев(Строка(пШтрихКод),2); //поиск весового товара

	Вес=0;
		//{ Обработка весового товара 
	Если (ПрефКода="29") ИЛИ (ПрефКода="28") ИЛИ (ПрефКода="23") ИЛИ (ПрефКода="24")  ИЛИ (ПрефКода="25")  Тогда

		Сообщить("Штрихкод:"+пШтрихКод);
		л_Товар=ПоискВесовогоКода(Число(Сред(пШтрихКод,3,6)));
		Сообщить("Весовой код:"+Сред(пШтрихКод,3,6));
		Сообщить(л_Товар);
		Если ПустоеЗначение(л_Товар)=0 Тогда
			Если л_Товар.Выбран()=1 Тогда
				Возврат л_Товар;
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли (ПрефКода="21") ИЛИ (ПрефКода="22")ИЛИ (ПрефКода="26") Тогда
		Сообщить("Штрихкод:"+пШтрихКод);
		л_Товар=ПоискВесовогоКодаSQL(Число(Сред(пШтрихКод,3,6)));
		Сообщить("Весовой код:"+Сред(пШтрихКод,3,6));
		Сообщить(л_Товар);
		Если ПустоеЗначение(л_Товар)=0 Тогда
			Если л_Товар.Выбран()=1 Тогда
				Возврат л_Товар;
			КонецЕсли;
		КонецЕсли;	
//} Обработка весового товара		
	Иначе
		ШтрихКодДляПоиска=пШтрихКод;
	КонецЕсли;

	
	спрТовар = СоздатьОбъект("Справочник.Номенклатура");
	спрПодч=СоздатьОбъект("Справочник.ШтрихКоды");
	
	ИмяРекв = "Штрихкод";
	
	//PR 13.06.17 Begin 
	//если закодирован код товара тогда ищем по реквизиту Код товара
	ПозЗвезд=0;
	ПозЗвезд=Найти(Строка(пШтрихКод),"*");
	Если  (ПозЗвезд>0) И  (СтрДлина(Строка(пШтрихКод))<=10) Тогда
		ИмяРекв = "КодТовара";
		ШтрихКодДляПоиска = Сред(СокрЛП(пШтрихкод),ПозЗвезд+1,7);
	КонецЕсли;
	//PR 13.06.17 End
	
	ФлагГлобПоиска = 1; 
	Если спрТовар.НайтиПоРеквизиту(ИмяРекв,СокрЛП(ШтрихКодДляПоиска),ФлагГлобПоиска)=1 Тогда
		Возврат(спрТовар.ТекущийЭлемент());
 	ИначеЕсли спрПодч.НайтиПоКоду(СокрЛП(ШтрихКодДляПоиска))=1 Тогда
 		Возврат(спрПодч.ТекущийЭлемент().Владелец);
 	КонецЕсли;	
	// ничего не найдено
	Возврат(ПолучитьПустоеЗначение(спрТовар));
КонецФункции 

//======================================================================
//Функция ПоискВСправочнике(пШтрихкод="")//включая подчиненые через выбор элементов
//	Перем ИмяРекв,ПрефКода,ШтрихКодДляПоиска;
//
//	ПрефКода=Лев(Строка(пШтрихКод),2); //поиск весового товара
//	Вес=0;
//	Если (ПрефКода="29") ИЛИ (ПрефКода="28") ИЛИ (ПрефКода="23") ИЛИ (ПрефКода="24")  ИЛИ (ПрефКода="25") Тогда
//		//{ Обработка весового товара 
//		//формируем строку со штрих-кодом для поиска
//		//берем первые 8 чисел и добавляем нулями - такой штрих-код хранится у нас в базе данных
//		ШтрихКодДляПоиска=глДополнитьСтрокуП(Лев(пШтрихКод,7),"0",13);
//		
//		ЧислоВес=Число(Сред(пШтрихКод,8,5));
//		Если ЧислоВес<=99 Тогда
//			Делитель=10;
//		ИначеЕсли ЧислоВес<=999 Тогда
//			Делитель=100;
//		Иначе
//			Делитель=1000;
//		КонецЕсли;
//		Вес = ЧислоВес/Делитель;
//		//} Обработка весового товара
//	Иначе
//		ШтрихКодДляПоиска=пШтрихКод;
//	КонецЕсли;
//
//	
//	спрТовар = СоздатьОбъект("Справочник.Номенклатура");
//	спрПодч=СоздатьОбъект("Справочник.ШтрихКоды");
//	
//	ИмяРекв = "Штрихкод";
//	ФлагГлобПоиска = 1; 
//	Если спрТовар.НайтиПоРеквизиту(ИмяРекв,СокрЛП(ШтрихКодДляПоиска),ФлагГлобПоиска)=1 Тогда
//		Возврат(спрТовар.ТекущийЭлемент());
// 	ИначеЕсли спрПодч.НайтиПоКоду(СокрЛП(ШтрихКодДляПоиска))=1 Тогда
// 		Возврат(спрПодч.ТекущийЭлемент().Владелец);
// 	КонецЕсли;	
//	// ничего не найдено
//	Возврат(ПолучитьПустоеЗначение(спрТовар));
//КонецФункции 

Функция ПоискПоШтрихкоду(пШтрихкод="")
	Если ПустоеЗначение(пШтрихкод)=1 Тогда
//		Предупреждение("Штрих кода нет в справочнике",0);
		Возврат(0);
	КонецЕсли;

	спрТовар=ПоискВСправочнике(пШтрихкод);
	Если ПустоеЗначение(спрТовар)=0 Тогда
		пНомерСтроки=ПоискВТабличнойЧасти(спрТовар);
		Если пНомерСтроки<>0 Тогда
			Таб_ТекущаяСтрока=пНомерСтроки;
			Таб_ТекущаяКолонка=п_НижОграничитель;
			ПВ_ВывестиЗначение();
			Возврат(1);
		КонецЕсли;
	КонецЕсли;
	Предупреждение("Товара нет в таблице",3);
	Возврат(0);
	
КонецФункции
//}ПоискПоШтрихкоду

//{ПВ
Процедура ПВ_Инициализация()
	Сервис = СоздатьОбъект("Сервис");
	МойШрифт = Сервис.СоздатьШрифт("Arial", 24, 8,,,,);
	
	ФормаРасш = СоздатьОбъект("РасширениеФормы");
	ФормаРасш.УстановитьФорму(Форма);
	ФормаРасш.ПолучитьАтрибут("ПанельВвода").Шрифт = МойШрифт;
	ФормаРасш.ПолучитьАтрибут("ПанельВвода").ЦветШрифта = 255;
	ФормаРасш.ПолучитьАтрибут("ПанельВвода").ЦветФона = ПолучитьЦвет(255,255,185);
//	Сервис.УдалитьШрифт(МойШрифт);
	Форма.тКолонка.Маска();

	Сервис = СоздатьОбъект("Сервис");
	МойШрифт1 = Сервис.СоздатьШрифт("Arial", 32, 8,,,,);
	
	ФормаРасш1 = СоздатьОбъект("РасширениеФормы");
	ФормаРасш1.УстановитьФорму(Форма);
	ФормаРасш1.ПолучитьАтрибут("пвШтрихкод").Шрифт = МойШрифт1;
	ФормаРасш1.ПолучитьАтрибут("пвШтрихкод").ЦветШрифта = ПолучитьЦвет(0,0,0);
	ФормаРасш1.ПолучитьАтрибут("пвШтрихкод").ЦветФона = ПолучитьЦвет(255,255,255);
	
	Сервис = СоздатьОбъект("Сервис");
	МойШрифт2 = Сервис.СоздатьШрифт("Arial", 32, 8,,,,);
	
	ФормаРасш2 = СоздатьОбъект("РасширениеФормы");
	ФормаРасш2.УстановитьФорму(Форма);
	ФормаРасш2.ПолучитьАтрибут("пвКол").Шрифт = МойШрифт2;
	ФормаРасш2.ПолучитьАтрибут("пвКол").ЦветШрифта = ПолучитьЦвет(0,0,0);
	ФормаРасш2.ПолучитьАтрибут("пвКол").ЦветФона = ПолучитьЦвет(255,255,255);

	пв_Таблица_Инициализация();
	
	
КонецПроцедуры	

Процедура ПВ_ВывестиЗначение()
	Перем колТип;
	Перем колЗаголовок;
	Перем колДлина;
	Перем колТочность;
	Перем колШирина;
	Перем колФормат;
	Перем колПоложение;
	
	Если Таб_ТекущаяКолонка=1 Тогда
		Форма.ПанельВвода.Доступность(0);
	Иначе
		Форма.ПанельВвода.Доступность(1);
	КонецЕсли;

	Если Таб.ПолучитьПараметрыКолонки(Таб_ТекущаяКолонка)="СрокРеализ" Тогда
		л_Товар=Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"Товар");
		пв_Таблица_Обновить(л_Товар);
	КонецЕсли;
	
	Таб.ПолучитьПараметрыКолонки(Таб_ТекущаяКолонка,колТип,колДлина,колТочность,колЗаголовок,колШирина,колФормат,колПоложение);
		
	Форма.тКолонка.Заголовок(колЗаголовок);

	
	Если Таб.ПолучитьПараметрыКолонки(Таб_ТекущаяКолонка)="Количество" Тогда
		пТовар=Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"Товар");
		пЕдиница=пТовар.БазоваяЕдиницаИзмерения;
		Форма.тКолонка.Заголовок(колЗаголовок+"("+пЕдиница+")");
	КонецЕсли;


	Если (Таб.ПолучитьПараметрыКолонки(Таб_ТекущаяКолонка)="Количество")
	или (Таб.ПолучитьПараметрыКолонки(Таб_ТекущаяКолонка)="КоличествоФакт")  Тогда
		Форма.ПанельВвода.НазначитьТип("Строка",10,3);
	Иначе
		Форма.ПанельВвода.НазначитьТип(колТип,колДлина,колТочность);
	КонецЕсли;
	
	//Форма.ПанельВвода.УстановитьТип(Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,Таб_ТекущаяКолонка));

	ПенельВвода=ПолучитьПустоеЗначение(ПенельВвода);
	ПанельВвода=Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,Таб_ТекущаяКолонка);

	//Если Таб.ПолучитьПараметрыКолонки(Таб_ТекущаяКолонка)="КоличествоФакт" Тогда
	//	Если ПустоеЗначение(Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,Таб_ТекущаяКолонка))=1 Тогда
	//		ПанельВвода=Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"Количество");
	//	КонецЕсли;
	//КонецЕсли;
	
	ВыводТовара(Таб_ТекущаяСтрока);

	
	Форма.Обновить();
	ПередатьФокус = "ПанельВвода";
	Форма.Закрыть(0);
	
КонецПроцедуры

Процедура ПВ_ВводЗначения() //без ввода 2-х сроков
	
	текстКолонки=Таб.ПолучитьПараметрыКолонки(Таб_ТекущаяКолонка);
	Если (текстКолонки="СрокРеализ")
	ИЛИ(текстКолонки="КоличествоФакт") Тогда
		счетНажатий=0;	
	Иначе
	   	счетНажатий=счетНажатий+1;
	   	Если счетНажатий=1 Тогда
	   		нажатьКлавишу="Ф4";
	   	ИначеЕсли счетНажатий=2 Тогда
	   		счетНажатий=0;
	   	КонецЕсли;
	   	ПередатьФокус = "ПанельВвода"; 
		Форма.Закрыть(0);
	КонецЕсли;	

	Если (ТекущийСлой=слТовара)
			И (текстКолонки="КоличествоФакт")			
	Тогда
		Если флПлюс="Плюс" Тогда
			л_КолПВ=Число(ПанельВвода);
			л_КолТаб=Число(Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"КоличествоФакт"));
			л_КолСумма=л_КолПВ+л_КолТаб;
			ПанельВвода=л_КолСумма;
			флПлюс="ОтменаАвтоПретензии";	
		ИначеЕсли флПлюс="Минус" Тогда	
			л_КолПВ=Число(ПанельВвода);
			л_КолТаб=Число(Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"КоличествоФакт"));
			л_КолСумма=л_КолТаб-л_КолПВ;
			ПанельВвода=л_КолСумма;
			флПлюс="ОтменаАвтоПретензии";	
		КонецЕсли;
	КонецЕсли;

	
	//ввод срока годности
	Таб.ПолучитьСтрокуПоНомеру(Таб_ТекущаяСтрока);
	Таб.УстановитьЗначение(Таб_ТекущаяСтрока,Таб_ТекущаяКолонка,ПанельВвода);
	ЗагрузитьТабличнуюЧасть(Таб);
	ВыводТовара(Таб_ТекущаяСтрока);
	ПередатьФокус = "ПанельВвода"; 
//	нажатьКлавишу="Ф4";
	Форма.Закрыть(0);

	Если флПлюс="ОтменаАвтоПретензии" Тогда
		флПлюс="";
	Иначе
		УстановитьПретензиюВТекущейСтроке(текстКолонки);
	КонецЕсли;
	
КонецПроцедуры	
Процедура ПВ_ВводЗначения1()
	
//	WshShell = СоздатьОбъект("WScript.Shell") ;
	//WshShell.SendKeys("{^}");
//	WshShell.SendKeys("^{F4}");
	 //Сервис = СоздатьОбъект("Сервис");
	 //Сервис.SendKeys("%");
   	//Сервис.SendKeys("{F4}");
	текстКолонки=Таб.ПолучитьПараметрыКолонки(Таб_ТекущаяКолонка);
	Если (текстКолонки="СрокРеализ")
	ИЛИ(текстКолонки="Количество") Тогда
		счетНажатий=0;	
	Иначе
	   	счетНажатий=счетНажатий+1;
	   	Если счетНажатий=1 Тогда
	   		нажатьКлавишу="Ф4";
	   	ИначеЕсли счетНажатий=2 Тогда
	   		счетНажатий=0;
	   	КонецЕсли;
	   	ПередатьФокус = "ПанельВвода"; 
		Форма.Закрыть(0);
	КонецЕсли;	
	
	//ввод срока годности
	Таб.ПолучитьСтрокуПоНомеру(Таб_ТекущаяСтрока);
	
	Если Таб.ПолучитьПараметрыКолонки(Таб_ТекущаяКолонка)="СрокРеализ" Тогда
		Если (Таб.СрокРеализ<>ПанельВвода)
			И(Таб.Количество>0)И(ПустоеЗначение(Таб.СрокРеализ)=0) Тогда
			//сроки не совпадают, значит введено изменение
			Таб.НоваяСтрока();
			Таб.ШтрихКод = Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"ШтрихКод");
//			Таб.ТовКод = Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"ТовКод");
			Таб.Товар = Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"Товар");

	//		Таб.ПроблемаНеСоответствиеСпецификации=Перечисление.Булево.Нет;
			Таб.ПредПродажПодг=Перечисление.Булево.Нет;
			Таб.ПроблемаНесоответствияМаркировкиLV=Перечисление.Булево.Нет;
	//		Таб.ПроблемаНесоответствияМаркировкиLT=Перечисление.Булево.Нет;
	//		Таб.ПроблемаНесоответствияМаркировкиEE=Перечисление.Булево.Нет;
			Таб.ПроблемаОтсутствиеШтрихКода=Перечисление.Булево.Нет;
	//		Таб.ПроблемаДопустСрокаРеализации=Перечисление.Булево.Нет;
	
			Таб_ТекущаяСтрока=Таб.НомерСтроки;
		КонецЕсли;
	КонецЕсли;
	//
	
	Таб.УстановитьЗначение(Таб_ТекущаяСтрока,Таб_ТекущаяКолонка,ПанельВвода);
	ЗагрузитьТабличнуюЧасть(Таб);
//	кнВперед();
	ПередатьФокус = "ПанельВвода"; 
//	нажатьКлавишу="Ф4";
	Форма.Закрыть(0);
//	WshShell = СоздатьОбъект("WScript.Shell") ;
//	WshShell.SendKeys("{F4}");
	 //Сервис = СоздатьОбъект("Сервис");
  	// Сервис.SendKeys("^");
   	//Сервис.SendKeys("{F4}");
//   	WshShell = СоздатьОбъект("WScript.Shell") ;
	//WshShell.SendKeys("{^}");
//	WshShell.SendKeys("^{F4}");

КонецПроцедуры	

//}ПВ

//{Кнопки
Функция ПропускКолонки(Таб_ТекущаяКолонка)
	Перем текстКолонки;
	
	текстКолонки=Таб.ПолучитьПараметрыКолонки(Таб_ТекущаяКолонка);
	Если текстКолонки="ШтрихКод" Тогда
	ИначеЕсли текстКолонки="Товар" Тогда
	ИначеЕсли текстКолонки="КоличествоНеПодвержденое" Тогда	
	ИначеЕсли текстКолонки="ПроблемаНесоответствияМаркировкиLT" Тогда
	ИначеЕсли текстКолонки="ПроблемаНесоответствияМаркировкиEE" Тогда		
	Иначе
		Возврат(0);
	КонецЕсли;
	Возврат(1);
КонецФункции

Процедура кнСбросШтрихкода()
	пвШтрихкод="";
	ПередатьФокус = "пвШтрихкод"; 
	Форма.Закрыть(0);
КонецПроцедуры
Процедура кнНазад()
	Перем фПропуск;

	//нижний ограничитель

	
	Таб_ТекущаяКолонка=Таб_ТекущаяКолонка-1;
	Если Таб_ТекущаяКолонка<п_НижОграничитель Тогда
		Таб_ТекущаяКолонка=п_НижОграничитель;
	КонецЕсли;

	фПропуск=1;
	Пока фПропуск=1 Цикл
		Если ПропускКолонки(Таб_ТекущаяКолонка)=1 Тогда
			Таб_ТекущаяКолонка=Таб_ТекущаяКолонка-1;
			Если Таб_ТекущаяКолонка<п_НижОграничитель Тогда
				Таб_ТекущаяКолонка=п_НижОграничитель;
				фПропуск=0;
				Прервать;
			КонецЕсли;
		Иначе
			фПропуск=0;
		КонецЕсли;
		
	КонецЦикла;
	
	
	ПВ_ВывестиЗначение();
	
	
	
КонецПроцедуры	
Процедура кнВперед()
	Перем фПропуск;
	Перем фВыход;
	//ПВ_ВывестиЗначение();

	Таб_ТекущаяКолонка=Таб_ТекущаяКолонка+1;
	Если Таб_ТекущаяКолонка>п_ВерхОграничитель Тогда
//		Таб_ТекущаяКолонка=п_ВерхОграничитель;
		Таб_ТекущаяКолонка=п_НижОграничитель;
		кнТаблица();
		Возврат;
	КонецЕсли;

	фПропуск=1;

	Пока фПропуск=1 Цикл
		Если ПропускКолонки(Таб_ТекущаяКолонка)=1 Тогда
			фПропуск=1;
			Таб_ТекущаяКолонка=Таб_ТекущаяКолонка+1;
			Если Таб_ТекущаяКолонка>п_ВерхОграничитель Тогда
				Таб_ТекущаяКолонка=п_ВерхОграничитель;
				фПропуск=0;
				Прервать;
			КонецЕсли;
		Иначе
			фПропуск=0;
		КонецЕсли;
	КонецЦикла;	
	ПВ_ВывестиЗначение();
КонецПроцедуры

Процедура НастроитьТекущуюСтроку()
	//ИТтекущая=СоздатьОбъект("ИндексированнаяТаблица");
	//ИТтекущая.Загрузить(Таб,,"СрокРеализ,Количество,ПроблемаНеСоответствиеСпецификации,ПроблемаНесоответствияМаркировкиLV,ПроблемаОтсутствиеШтрихКода, ПроблемаДопустСрокаРеализации");
	//ИТтекущая.УдалитьСтроки();
	//ИТтекущая.Показать();
	//ИТтекущая.НоваяСтрока();
	//ИТтекущая.ЗаполнитьСтроку(,Таб,Таб_ТекущаяСтрока,Таб_ТекущаяКолонка);
	//ИТтекущая.Показать();
	
	Таб.ПолучитьСтрокуПоНомеру(Таб_ТекущаяСтрока);
	Если Таб.Товар.Родитель.ФлПечатьСроковГодности=1 Тогда
		п_НижОграничитель=4;
	ИначеЕсли ПустоеЗначение(ПоСчету)=0 Тогда

		Если семТекСтрана() = "LV" Тогда
				л_Клиент = ?(ПоСчету.КлиентФилиала.Выбран() = 0,ПоСчету.Клиент,ПоСчету.КлиентФилиала);
		Иначе
				л_Клиент = ПоСчету.Клиент;
		КонецЕсли;
	
		Если л_Клиент.ПечататьСрокиРеализ=1 Тогда
			п_НижОграничитель=4;
//			Сообщить("п_НижОграничитель=4");
//			Сообщить(л_Клиент);
		Иначе
			п_НижОграничитель=5;
//			Сообщить("п_НижОграничитель=5");
//			Сообщить(л_Клиент);
		КонецЕсли;
	КонецЕсли;
	Таб_ТекущаяКолонка=п_НижОграничитель;


	Если ПустоеЗначение(Таб.КоличествоФакт)=1 Тогда
		Таб.КоличествоФакт=Таб.Количество;
	КонецЕсли;




	
//	Если ПустоеЗначение(Таб.СрокРеализ)=1 Тогда
//		Таб.ПроблемаНеСоответствиеСпецификации=Перечисление.Булево.Нет;
//		Таб.ПредПродажПодг=Перечисление.Булево.Нет;
//		Таб.ПроблемаНесоответствияМаркировкиLV=Перечисление.Булево.Нет;
//		Таб.ПроблемаНесоответствияМаркировкиLT=Перечисление.Булево.Нет;
//		Таб.ПроблемаНесоответствияМаркировкиEE=Перечисление.Булево.Нет;
//		Таб.ПроблемаОтсутствиеШтрихКода=Перечисление.Булево.Нет;
//		Таб.ПроблемаДопустСрокаРеализации=Перечисление.Булево.Нет;
//	КонецЕсли;


КонецПроцедуры

Процедура кнТовар()
	Если флТолькоПросмотр=1 Тогда
		Возврат;
	КонецЕсли;
	ТекущийСлой=слТовара;
	Форма.ИспользоватьСлой(ТекущийСлой,2);
	НастроитьТекущуюСтроку();
	ПВ_ВывестиЗначение();
КонецПроцедуры
Процедура кнТаблица()

	Если ТекущийСлой=слТовара Тогда
		ТекущийСлой=слТаблицы;
		Форма.ИспользоватьСлой(ТекущийСлой,2);
		
	//	ТП.ТекущаяСтрока=Таб_ТекущаяСтрока;
		ТП_Обновить();
		кнСбросШтрихкода();	
	ИначеЕсли ТекущийСлой=слПечать Тогда
		ТекущийСлой=слТаблицы;
		Форма.ИспользоватьСлой(ТекущийСлой,2);
		
	//	ТП.ТекущаяСтрока=Таб_ТекущаяСтрока;
		ТП_Обновить();
		кнСбросШтрихкода();	
	КонецЕсли;

КонецПроцедуры

Процедура кнПлюс()
	
	Если ТекущийСлой=слТовара Тогда
		Если Таб_ТекущаяКолонка=5 Тогда //колонка количества
			флПлюс="Плюс";
			ПанельВвода=0;
		КонецЕсли;	
	КонецЕсли;
	ПередатьФокус = "ПанельВвода"; 
	Форма.Закрыть(0);				
	

КонецПроцедуры // кнПлюс
Процедура кнМинус()
	
	Если ТекущийСлой=слТовара Тогда
		Если Таб_ТекущаяКолонка=5 Тогда //колонка количества
			флПлюс="Минус";
			ПанельВвода=0;
		КонецЕсли;	
	КонецЕсли;
	ПередатьФокус = "ПанельВвода"; 
	Форма.Закрыть(0);				
	

КонецПроцедуры // кнПлюс

Процедура кнПриход()
	ТекущийСлой=слПрихода;
	Форма.ИспользоватьСлой(ТекущийСлой,2);
//	Форма.кнМеню.Заголовок("Таблица");
//	ВыводКлиента(ДокументОснование);
	//ПередатьФокус = "тпДок_"; 
//	Форма.Закрыть(0);
КонецПроцедуры

Процедура кнНазадВФорму()

		ТекущийСлой=слТаблицы;
		Форма.ИспользоватьСлой(ТекущийСлой,2);
//		Форма.кнМеню.Заголовок("Товар");
		кнСбросШтрихкода();

//		ПередатьФокус = "тпКнопка_"; 
//		Форма.Закрыть(0);	
	
	
КонецПроцедуры // 

Процедура кнЗакрыть()
	Форма.Закрыть(0);
КонецПроцедуры // гл

Процедура кнЗаписатьПровести()

//	ВыбратьСтроки();
//	Пока ПолучитьСтроку() = 1 Цикл
//		Сообщить(Товар);
//	КонецЦикла;	

	
	
	
	Если флТолькоПросмотр=1 Тогда
		Предупреждение("Только просмотр!");
		Возврат;
	КонецЕсли;	
	
	Если Вопрос("Закончить комплектацию заявки?",1,0)=2 Тогда
		Возврат;
	КонецЕсли;	

	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если  (КоличествоФакт=0)или (ПустоеЗначение(КоличествоФакт)=1)  Тогда //товар не отсканировани
			Если ПустоеЗначение(ПретензииКомпл)=1 Тогда
				ПретензииКомпл=Перечисление.ПретензииКомпл.B03;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	
	Если ПустоеЗначение(Комплектовщик)=1 Тогда
		спр=СоздатьОбъект("Справочник.Комплектовщики");
		спр.НайтиПоКоду("006");
		Комплектовщик=спр.ТекущийЭлемент();
	КонецЕсли;
	АвтоВремяТекущее();
	Записать();
	Если СоздатьКомплектациюЗаявкиФакт(ПоСчету)=0 Тогда
		Предупреждение("Нет претензии!");
		Возврат;
	КонецЕсли;
	Провести(1);
	ЗаписьЖурналаРегистрации( "Комплектация закончилась "+Комплектовщик+" по заявке "+ПоСчету.НомерДок,, "Комплектация заявок", ПоСчету.ТекущийДокумент(), 2 );
	
	Форма.Закрыть(0);
КонецПроцедуры // кнЗаписатьПровестикнЗаписатьПровести
Процедура кнОтложить()
	ЗагрузитьТабличнуюЧасть(Таб);
	АвтоВремяТекущее();
	Записать();
	Форма.Закрыть(0);
КонецПроцедуры // кнОтложить

Функция ФорматВывода( парам )
	Если парам = "Заявка" Тогда 
		Если ПустоеЗначение(ПоСчету) = 0 Тогда
			Возврат Шаблон("[ПоСчету.НомерДок] no [ПоСчету.ДатаДок]");
		Иначе
			Возврат "Не выбрана эл. заявка.";
		КонецЕсли;
	ИначеЕсли парам = "Товар" Тогда 
		Если ПустоеЗначение(Товар) = 0 Тогда
			Возврат Шаблон("[Товар.НаименованиеДляЦенника]");
		Иначе
			Возврат "";
		КонецЕсли;
	ИначеЕсли парам = "Вес" Тогда 
		Возврат Шаблон("[Вес1] кг");	
	ИначеЕсли парам = "Тара" Тогда 
		Возврат Шаблон("[п_Тара] кг");		
		
	ИначеЕсли парам = "ВесовойКод" Тогда 
		Если ПустоеЗначение(Товар) = 1 Тогда Возврат ""; КонецЕсли;
		Возврат Товар.ВесовойКод;
	ИначеЕсли парам = "ШтрихКод" Тогда 
		//Если ПустоеЗначение(Товар) = 1 Тогда Возврат ""; КонецЕсли;
		//Если Товар.ВесовойКод = 0 Тогда Возврат ""; КонецЕсли;
		//Если Вес = 0 Тогда Возврат ""; КонецЕсли;
		//Возврат ПолучитьШтрихКод(Товар.ВесовойКод,Вес);
	ИначеЕсли парам = "Клиент" Тогда 
		Если ПустоеЗначение(ПоСчету) = 1 Тогда Возврат ""; КонецЕсли;
		промКлиент = ?(ПоСчету.КлиентФилиала.Выбран() = 0,ПоСчету.Клиент,ПоСчету.КлиентФилиала);
		Возврат ?(ПоСчету.КлиентФилиала.Выбран() = 0,Пререкодировка(промКлиент.ПолноеНаименование,спКодов),промКлиент.ПолноеНаименование) ;
	ИначеЕсли парам = "КлиентИмя" Тогда 
		Если ПустоеЗначение(ПоСчету) = 1 Тогда Возврат ""; КонецЕсли;
		промКлиент = ?(ПоСчету.КлиентФилиала.Выбран() = 0,ПоСчету.Клиент,ПоСчету.КлиентФилиала);
		Возврат ?(ПоСчету.КлиентФилиала.Выбран() = 0,Пререкодировка(промКлиент.Наименование,спКодов),промКлиент.Наименование) ;
	
	ИначеЕсли парам = "Адрес" Тогда 
		Если ПустоеЗначение(ПоСчету) = 1 Тогда Возврат ""; КонецЕсли;
		промКлиент = ?(ПоСчету.КлиентФилиала.Выбран() = 0,ПоСчету.Клиент,ПоСчету.КлиентФилиала);
		Адрес = промКлиент.АдресДоставки;
		Возврат ?(ПоСчету.КлиентФилиала.Выбран() = 0,Шаблон( "[Пререкодировка(Адрес.Наименование,спКодов)] [Пререкодировка(промКлиент.АдресДоставкиДоп,спКодов)]" ),Шаблон( "[Адрес.Наименование] [промКлиент.АдресДоставкиДоп]" )) ;
	ИначеЕсли парам = "Маршрут" Тогда 
		Если ПустоеЗначение(ПоСчету) = 1 Тогда Возврат ""; КонецЕсли;
		Если ПустоеЗначение(ПоСчету.МаршрутДоставкиГрафик)=0 Тогда
			Возврат Шаблон( "[Пререкодировка(ПоСчету.МаршрутДоставкиГрафик.Наименование,спКодов)]" );
		Иначе
			промКлиент = ?(ПоСчету.КлиентФилиала.Выбран() = 0,ПоСчету.Клиент,ПоСчету.КлиентФилиала);
			Адрес = промКлиент.АдресДоставки;
			Возврат Шаблон( "[Пререкодировка(Адрес.Маршрут.Описание,спКодов)]" );
		КонецЕсли;
	ИначеЕсли парам = "ДатаПоставки" Тогда 
		Если ПустоеЗначение(ПоСчету) = 1 Тогда Возврат ""; КонецЕсли;
		Возврат ПоСчету.ДатаПоставки;
	ИначеЕсли парам = "Ошибка" Тогда 
		Возврат п_Ошибка;	
	КонецЕсли;
КонецФункции


//слой печать
//****************

Функция ЗадачаНаВнешнююКоманду(пДок="",п_Товар,п_КоличествоФакт,п_Единица,п_СрокРеализ,п_Принтер,п_Команда="")
	
	сзПараметр= СоздатьОбъект("СписокЗначений");
	сзПараметр.ДобавитьЗначение(п_Команда,"Команда");
	сзПараметр.ДобавитьЗначение(п_Принтер,"Принтер");
	сзПараметр.ДобавитьЗначение(п_Товар,"Товар");
	сзПараметр.ДобавитьЗначение(ТекущийДокПоставки,"пДок");
	
	сзПараметр.ДобавитьЗначение(п_КоличествоФакт,"КоличествоФакт");
	сзПараметр.ДобавитьЗначение(п_Единица,"Единица");
	сзПараметр.ДобавитьЗначение(п_СрокРеализ,"СрокРеализ");
	//сзПараметр.ДобавитьЗначение(ВзятьКонтекст(ТекущийДокумент()),"Конт");	

	Если п_Команда="Печать" Тогда
//		Возврат ОткрытьФормуМодально("Документ.КомплектацияМобил",сзПараметр);
		Возврат ОткрытьФормуМодально("Отчет",сзПараметр,КаталогИБ()+"ExtForms/Печать/ПечатьНаклейкиИзSQL.ert");
	ИначеЕсли п_Команда="Открыть" Тогда
		Возврат ОткрытьФормуМодально(пДок,сзПараметр);
	ИначеЕсли п_Команда="Просмотр" Тогда
		Возврат ОткрытьФормуМодально(пДок,сзПараметр);
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции


Процедура ШтрихкодПоискПринтера()

	л_номПринтера=р_номПринтера;
	Если Лев(л_номПринтера,1)="*" Тогда
		л_номПринтера=Сред(л_номПринтера,2,2);
	КонецЕсли;
	
	спр=СоздатьОбъект("Справочник.МУ");
		Если спр.НайтиПоРеквизиту("Идентификатор",л_номПринтера,)=1 Тогда
			ПринтерЭтикеток=спр.ТекущийЭлемент();
		Иначе
			спр.ВыбратьЭлементы();
			спр.ПолучитьЭлемент();
			ПринтерЭтикеток=спр.ТекущийЭлемент();
		КонецЕсли;
	МуПечать=ПринтерЭтикеток;	
		
КонецПроцедуры // ШтрихкодПоискПринтера

Процедура ПечатьЧерезЗакрыть(п_Фокус="Печать")
	ПередатьФокус=п_Фокус;	
	Форма.Закрыть(0);
КонецПроцедуры // ПечатьЧерезЗакрыть

//======================================================================
Функция ПроверкаСрокаРеализации(п_СрокРеализ)
	
	Если п_СрокРеализ<=ДатаДок Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ПустоеЗначение(п_СрокРеализ)=1 Тогда
		Возврат 0;
	КонецЕсли;	
	
	Возврат 1;
КонецФункции // ПроверкаСрокаРеализации

Процедура Печать()
	Кол=Число(пвКол);
	КоличествоКоробок=Кол;
	Если Кол > 9 Тогда
			Ответ = Вопрос(Шаблон("Печатать [Кол] экземпляров наклеек?"),"Да+Нет",60);
			Если Ответ <> "Да" Тогда Возврат; КонецЕсли;
	КонецЕсли;

	л_Товар=Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"Товар");
	л_КоличествоФакт=Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"КоличествоФакт");
	л_Единица=Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"Единица");
	л_СрокРеализ=Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"СрокРеализ");
	
	Если ПроверкаСрокаРеализации(л_СрокРеализ)=0 Тогда
		Предупреждение("У товара нет срока годности !");
		Возврат;
	КонецЕсли;
	
	ЗадачаНаВнешнююКоманду(
		ТекущийДокПоставки,
		л_Товар,
		л_КоличествоФакт,
		л_Единица,
		л_СрокРеализ,
		МуПечать,
		"Печать");	
	
	
	
	ТекущийСлой=слТаблицы;
	Форма.ИспользоватьСлой(ТекущийСлой,2);	
	ПередатьФокус = "пвШтрихкод"; 
	Форма.Закрыть(0);
	
	
КонецПроцедуры // Печать
Процедура ПечатьМаршрута()
	Кол=Число(пвКол);
	КоличествоКоробок=Кол;
	Если Кол > 9 Тогда
			Ответ = Вопрос(Шаблон("Печатать [Кол] экземпляров наклеек?"),"Да+Нет",60);
			Если Ответ <> "Да" Тогда Возврат; КонецЕсли;
	КонецЕсли;
		т_таб = СоздатьОбъект( "Таблица" );
//		Если ТипПринтераЭтикеток=Перечисление.ТипыПринтеровЭтикеток.BrotherQL1050 Тогда
			т_таб.ИсходнаяТаблица( "ТаблицаBrother" );
//		Иначе
	//		таб.ИсходнаяТаблица( "Таблица2" );
//		КонецЕсли;
		пКлиент = ФорматВывода( "Клиент" );
		//таб.ВывестиСекцию( "Клиент" );
		//таб.ВывестиСекцию( "ПустаяСтрока" );
		//таб.ВывестиСекцию( "ПустаяСтрока" );
		пАдрес = ФорматВывода( "Адрес" );
		//таб.ВывестиСекцию( "Адрес" );
		//таб.ВывестиСекцию( "ПустаяСтрока" );
		//таб.ВывестиСекцию( "ПустаяСтрока" );
		пНомерДок = ФорматВывода( "Заявка" );
		пМаршрут = ФорматВывода( "Маршрут" );
		//таб.ВывестиСекцию( "ПустаяСтрока" );
		пДатаПоставки = ФорматВывода( "ДатаПоставки" );
		//таб.ВывестиСекцию( "ДатаПоставки" );
		пКлиентИмя = ФорматВывода( "КлиентИмя" );	
		Для н = 1 по Кол Цикл
			пНомер = Шаблон("[н] no [Кол]");
			т_таб.ВывестиСекцию( "Доставка" );
			Если фл_ПечатьАдреса=1 Тогда
				т_таб.ВывестиСекцию( "ДоставкаАдрес" );
			КонецЕсли;			
			
			т_таб.НоваяСтраница();
		КонецЦикла;
		т_таб.ТолькоПросмотр( 1 );
		
		Заявка = "";
	
	л_ПутьПринтера=СокрЛП(МуПечать.Комментарий);	
	т_таб.ПараметрыСтраницы(1,100,,1,0,2,0,0,0,1,,?(фл_ЛокальныйПринтер=1,"",л_ПутьПринтера));

//	т_таб.ПараметрыСтраницы(1,100,,1,0,2,0,0,0,1,,"\\r-print2\BXLTX400_2");

	
	//	т_таб.ПараметрыСтраницы(1,100,,1,0,2,0,0,0,1,,"\\r-print2\HP2840");
//	Если флБезПросмотра = 0 Тогда
//		т_таб.Показать( "" ); 
//	Иначе
		т_таб.Напечатать(0);
//	КонецЕсли;		
		
		//таб.ПараметрыСтраницы(,,0,0,0,0,,,,,,);	
	ТекущийСлой=слТаблицы;
	Форма.ИспользоватьСлой(ТекущийСлой,2);	
	ПередатьФокус = "пвШтрихкод"; 
	Форма.Закрыть(0);
	
	
КонецПроцедуры // Печать

//======================================================================
Процедура кнМинусКолКопий()
	л_Кол=Число(пвКол);
	л_Кол=л_Кол-1;
	Если л_Кол<1 Тогда
		л_Кол=1;
	КонецЕсли;
	пвКол=л_Кол;
	Форма.Обновить();
КонецПроцедуры // кнМинусКолКопий

Процедура кнПлюсКолКопий()
	л_Кол=Число(пвКол);
	л_Кол=л_Кол+1;
	пвКол=л_Кол;
	Форма.Обновить();
КонецПроцедуры // кнМинусКолКопий

//слой печать

//{Создание штрих кода

//Функция NumberToUpperChar( Num )
//	UpperCharSet = "ABCDEFGHIJ";
//	Num = Число(Прав(Num,1));
//	Стр = Сред(UpperCharSet, Num + 1, 1);
//	Возврат Стр;
//КонецФункции

//Функция NumberToLowerChar( Num )
//	LowerCharSet = "abcdefghij";
//	Num = Число(Прав(Num,1));
//	Стр = Сред(LowerCharSet, Num + 1, 1);
//	Возврат Стр;
//КонецФункции
//
//Функция ParityCheck(Код) // Вычисление кода четности
//	четн = 0; неч  = 0;
//	// Для строки с нечетной длинной верхняя граница 
//	// округлается в большую сторону
//	Для Поз = 1 По Окр(СтрДлина(Код) / 2 + 0.1,0) Цикл
//		неч  = неч  + Сред(Код, Поз * 2 - 1, 1);
//		Если Поз * 2 <= СтрДлина(Код) Тогда
//			четн = четн + Сред(Код, Поз * 2, 1);
//		КонецЕсли;
//	КонецЦикла;
//	КодЧетности = Число(Прав(Строка(1000 - четн - неч * 3), 1));
//	Возврат КодЧетности;
//КонецФункции
//
//Функция ДобавитьСлева( Стр1, Длн, Стр2 )
//	Стр0 = Стр1;
//	Пока СтрДлина( Стр0 ) <= Длн Цикл Стр0 = Стр2 + Стр0; КонецЦикла;
//	Стр0 = Прав( Стр0, Длн );
//	Возврат Стр0;
//КонецФункции
//

//Функция EAN13CodeGenerate(код)
//	// Проверки
//	Если ТипЗначения(код) <> 1 Тогда
//		Сообщить("Код для EAN13 должен числовым."); Возврат "";
//	КонецЕсли;
//    
//	Если СтрДлина(код) > 12 Тогда
//		Сообщить("Код для EAN13 должен быть длинной не более 12 символов."); Возврат "";
//	КонецЕсли;               
//	// Дополнение лидирующими пробелами
//	код = ДобавитьСлева(Строка(код),12,"0");
//	// Добавление кода четности - для кода, дополненого слева "0"
//	код = код + Строка(ParityCheck("0"+Код));
//	//Разбор строки
//	ПервыйФлаг = Число(Сред(код,1,1));
//	левстр     = Сред(код,2,6);
//	правстр    = Сред(код,8,6);
//	правкод = "";
//	Для Поз = 1 По 6 Цикл
//		правкод = правкод + NumberToLowerChar(Сред(правстр,Поз,1));
//	КонецЦикла;
//    //  Формирование левой части кода зависит от значениа ПервыйФлаг
//	Если ПервыйФлаг = 0 Тогда	//    0           A  A  A  A  A
//		левкод = "#!" + Лев(левстр,1) 
//			+ Сред(левстр,2,1)
//			+ Сред(левстр,3,1)
//			+ Сред(левстр,4,1)
//			+ Сред(левстр,5,1)
//			+ Сред(левстр,6,1);
//	ИначеЕсли ПервыйФлаг = 1 Тогда	//    1           A  A  B  A  B  B
//		левкод = "$!" 
//			+ Лев(левстр,1)
//			+ Сред(левстр,2,1)
//			+ NumberToUpperChar(Сред(левстр,3,1))
//			+ Сред(левстр,4,1)
//			+ NumberToUpperChar(Сред(левстр,5,1))
//			+ NumberToUpperChar(Сред(левстр,6,1));
//	ИначеЕсли ПервыйФлаг = 2 Тогда 	//    2           A  A  B  B  A  B
//		левкод = "%!"
//			+ Лев(левстр,1)
//			+ Сред(левстр,2,1)
//			+ NumberToUpperChar(Сред(левстр,3,1))
//			+ NumberToUpperChar(Сред(левстр,4,1))
//			+ Сред(левстр,5,1)
//			+ NumberToUpperChar(Сред(левстр,6,1));
//	ИначеЕсли ПервыйФлаг = 3 Тогда   //    3           A  A  B  B  B  A
//		левкод = "&!" 
//			+ Лев(левстр,1)
//			+ Сред(левстр,2,1)
//			+ NumberToUpperChar(Сред(левстр,3,1))
//			+ NumberToUpperChar(Сред(левстр,4,1))
//			+ NumberToUpperChar(Сред(левстр,5,1))
//			+ Сред(левстр,6,1);
//	ИначеЕсли ПервыйФлаг = 4 Тогда   //    4           A  B  A  A  B  B
//		левкод = "'!" 
//			+ Лев(левстр,1)
//			+ NumberToUpperChar(Сред(левстр,2,1))
//			+ Сред(левстр,3,1)
//			+ Сред(левстр,4,1)
//			+ NumberToUpperChar(Сред(левстр,5,1))
//			+ NumberToUpperChar(Сред(левстр,6,1));
//	ИначеЕсли ПервыйФлаг = 5 Тогда   //    5           A  B  B  A  A  B
//		левкод = "(!" 
//			+ Лев(левстр,1)
//			+ NumberToUpperChar(Сред(левстр,2,1))
//			+ NumberToUpperChar(Сред(левстр,3,1))
//			+ Сред(левстр,4,1)
//			+ Сред(левстр,5,1)
//			+ NumberToUpperChar(Сред(левстр,6,1));
//	ИначеЕсли ПервыйФлаг = 6 Тогда   //    6           A  B  B  B  A  A
//		левкод = ")!" 
//			+ Лев(левстр,1)
//			+ NumberToUpperChar(Сред(левстр,2,1))
//			+ NumberToUpperChar(Сред(левстр,3,1))
//			+ NumberToUpperChar(Сред(левстр,4,1))
//			+ Сред(левстр,5,1)
//			+ Сред(левстр,6,1);
//	ИначеЕсли ПервыйФлаг = 7 Тогда   //    7           A  B  A  B  A  B
//		левкод = "*!" 
//			+ Лев(левстр,1)
//			+ NumberToUpperChar(Сред(левстр,2,1))
//			+ Сред(левстр,3,1)
//			+ NumberToUpperChar(Сред(левстр,4,1))
//			+ Сред(левстр,5,1)
//			+ NumberToUpperChar(Сред(левстр,6,1));
//	ИначеЕсли ПервыйФлаг = 8 Тогда   //    8           A  B  A  B  B  A
//		левкод = "+!" 
//			+ Лев(левстр,1)
//			+ NumberToUpperChar(Сред(левстр,2,1))
//			+ Сред(левстр,3,1)
//			+ NumberToUpperChar(Сред(левстр,4,1))
//			+ NumberToUpperChar(Сред(левстр,5,1))
//			+ Сред(левстр,6,1);
//	ИначеЕсли ПервыйФлаг = 9 Тогда   //    9           A  B  B  A  B  A
//		левкод = ",!" 
//			+ Лев(левстр,1)
//			+ NumberToUpperChar(Сред(левстр,2,1))
//			+ NumberToUpperChar(Сред(левстр,3,1))
//			+ Сред(левстр,4,1)
//			+ NumberToUpperChar(Сред(левстр,5,1))
//			+ Сред(левстр,6,1);
//	КонецЕсли;                                               
//	// Получение строки - результата
//	кодстр = левкод + "-" + правкод + "!";
//	Возврат кодстр;
//КонецФункции

//}Создание штрих кода

Процедура кнПечатьШтрихкода()
	т_таб = СоздатьОбъект( "Таблица" );
	т_таб.ИсходнаяТаблица( "табВесШтрихкод" );
	Кол=Число(пвКол);
	пТовар=Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"Товар");
	
	Для н = 1 по Кол Цикл
//		пВес = Шаблон("[Вес] kg");
		пШтрихКод =  EAN13CodeGenerate(Число(Лев(пТовар.ШтрихКод,12)));
		т_таб.ВывестиСекцию( "с_ШтрихКодГол" );
//		т_таб.ПараметрыСтраницы(1,100,,1,0,2,0,0,0,фл_автомаштаб,,);
		т_таб.НоваяСтраница();
	КонецЦикла;
	
	т_таб.ТолькоПросмотр( 1 );
	
	л_ПутьПринтера=СокрЛП(МуПечать.Комментарий);	
	т_таб.ПараметрыСтраницы(1,100,,1,0,2,0,0,0,1,,?(фл_ЛокальныйПринтер=1,"",л_ПутьПринтера));	
//	т_таб.ПараметрыСтраницы(1,100,,1,0,2,0,0,0,1,,"\\r-print2\BXLTX400_2");
//	т_таб.ПараметрыСтраницы(1,100,,1,0,2,0,0,0,1,,"\\r-print2\HP2840");
	т_таб.Напечатать(0);
	
	
	ТекущийСлой=слТаблицы;
	Форма.ИспользоватьСлой(ТекущийСлой,2);	
	ПередатьФокус = "пвШтрихкод"; 
	Форма.Закрыть(0);	
КонецПроцедуры

//======================================================================
Процедура НастроитьТекущийПринтер()
	Если ПустоеЗначение(ПринтерЭтикеток)=1 Тогда
		спр=СоздатьОбъект("Справочник.МУ");
		спр.ВыбратьЭлементы();
		спр.ПолучитьЭлемент();
		ПринтерЭтикеток=спр.ТекущийЭлемент();
	КонецЕсли;
	МуПечать=ПринтерЭтикеток;
КонецПроцедуры // НастроитьТекущийПринтер





Процедура кнПечать()
	
	л_Текст=СокрЛП(ПоСчету.Основание);
	Если СтрДлина(л_Текст)<>0 Тогда
		ЛегкоеСообщение ( л_Текст );
	КонецЕсли;
///
	Если семТекСтрана() = "LV" Тогда
		промКлиент = ?(ТекущийДокПоставки.КлиентФилиала.Выбран() = 0,ТекущийДокПоставки.Клиент,ТекущийДокПоставки.КлиентФилиала);
	Иначе
		промКлиент = ТекущийДокПоставки.Клиент;
	КонецЕсли;

	Если промКлиент.КлГруппа.Выбран()=1 Тогда
		промКлГруппа=промКлиент.КлГруппа;
	Иначе
		промКлГруппа=промКлиент;
	КонецЕсли;
	
	Если промКлГруппа.КонтрольКомплектации = 1 Тогда 
		ЛегкоеСообщение ( "Внимание! Для этого клиента, требуется дополнительная проверка." );
	КонецЕсли;	
////	
	ТекущийСлой=слПечать;
	Форма.ИспользоватьСлой(ТекущийСлой,2);
	
	Если фл_ЛокальныйПринтер=0 Тогда
		НастроитьТекущийПринтер();
	КонецЕсли;
//	НастроитьТекущуюСтроку();
//	ПВ_ВывестиЗначение();
	пвКол=1;
	ПередатьФокус = "пвКол"; 
	Форма.Закрыть(0);	

КонецПроцедуры // кнПечать
Процедура кнПечать1()
	
	л_Текст=СокрЛП(ПоСчету.Основание);
	Если СтрДлина(л_Текст)<>0 Тогда
		ЛегкоеСообщение ( л_Текст );
	КонецЕсли;
///
	Если семТекСтрана() = "LV" Тогда
		промКлиент = ?(ТекущийДокПоставки.КлиентФилиала.Выбран() = 0,ТекущийДокПоставки.Клиент,ТекущийДокПоставки.КлиентФилиала);
	Иначе
		промКлиент = ТекущийДокПоставки.Клиент;
	КонецЕсли;

	Если промКлиент.КлГруппа.Выбран()=1 Тогда
		промКлГруппа=промКлиент.КлГруппа;
	Иначе
		промКлГруппа=промКлиент;
	КонецЕсли;
	
	Если промКлГруппа.КонтрольКомплектации = 1 Тогда 
		ЛегкоеСообщение ( "Внимание! Для этого клиента, требуется дополнительная проверка." );
	КонецЕсли;	
////	
	ТекущийСлой=слПечать;
	Форма.ИспользоватьСлой(ТекущийСлой,2);
	
	НастроитьТекущийПринтер();
//	НастроитьТекущуюСтроку();
//	ПВ_ВывестиЗначение();
	пвКол=1;
	ПередатьФокус = "пвКол"; 
	Форма.Закрыть(0);	

КонецПроцедуры // кнПечать

Процедура кнВводШтрихкода()
	Перем фПоиска;
	Если ТекущийСлой=слТаблицы Тогда	
		Если флТолькоПросмотр=1 Тогда
				кнСбросШтрихкода();
			Возврат;
		КонецЕсли;
		фПоиска=ПоискПоШтрихкоду(СокрЛП(пвШтрихкод));
		Если фПоиска=1 Тогда
			ТекущийСлой=слТовара;
			Форма.ИспользоватьСлой(ТекущийСлой,2);
			НастроитьТекущуюСтроку();
			ПВ_ВывестиЗначение();
			пвШтрихкод="";
		Иначе
			ТекущийСлой=слТаблицы;
			Форма.ИспользоватьСлой(ТекущийСлой,2);
			кнСбросШтрихкода();
		КонецЕсли;
	ИначеЕсли ТекущийСлой=слТовара Тогда
		Если Таб_ТекущаяКолонка=5 Тогда //колонка количества
			
			ПрефКода=Лев(Строка(пвШтрихкод),2); //поиск весового товара
			л_Вес=0;
			Если (ПрефКода="29") ИЛИ (ПрефКода="28") ИЛИ (ПрефКода="23") ИЛИ (ПрефКода="24")  ИЛИ (ПрефКода="25") Тогда
				//{ Обработка весового товара 
				//формируем строку со штрих-кодом для поиска
				//берем первые 8 чисел и добавляем нулями - такой штрих-код хранится у нас в базе данных
				ШтрихКодДляПоиска=глДополнитьСтрокуП(Лев(пвШтрихкод,7),"0",13);
				ЧислоВес=Число(Сред(пвШтрихкод,8,5));
				Если ЧислоВес<=99 Тогда
					Делитель=10;
				ИначеЕсли ЧислоВес<=999 Тогда
					Делитель=100;
				Иначе
					Делитель=1000;
				КонецЕсли;
				л_Вес = ЧислоВес/Делитель;
				ПанельВвода=л_Вес;
				пвШтрихкод="";
				флПлюс="ОтменаАвтоПретензии";	
				ПередатьФокус = "ПанельВвода"; 
				Форма.Закрыть(0);	
				//} Обработка весового товара
			Иначе
				кнСбросШтрихкода();
			КонецЕсли;	

		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
//}Кнопки

//======================================================================
Процедура ЗаполнитьСклАдрес()
	
	спр = СоздатьОбъект( "Справочник.СкладскиеАдреса" );
	таб.ВыбратьСтроки();
	Пока таб.ПолучитьСтроку() = 1 Цикл
		промТовар = таб.Товар;
		Если ПоСчету.Склад.ТипСклада=Перечисление.ТипыСкладов.СкладНеликвидов Тогда
//			табл.Группа = "NOCENOTIE PRODUKTI";
			таб.СклАдрес  = "";
//			табл.Сорт = 0;
		//ИначеЕсли док.Склад.ТипСклада=Перечисление.ТипыСкладов.СкладРаспродажи Тогда
		//	табл.Группа = "IZPARDO№ANA";
		//	табл.СклАдрес  = "";
		//	табл.Сорт = 0;
		Иначе

			//вначале прописываем фразу на случай, если товара не привязан к адресу
			Если ПоСчету.Склад.ТипСклада=Перечисление.ТипыСкладов.СкладРаспродажи Тогда
//				табл.Группа = "IZPARDO№ANA";
				таб.СклАдрес  = "";
//				табл.Сорт = 0;
			КонецЕсли;
			
			рез=спр.ВыбратьЭлементыПоРеквизиту("Товар",промТовар,0,0);
			Ячейка="";
			Если рез=1 Тогда
				Пока Спр.ПолучитьЭлемент() = 1 Цикл
					пЯчейка = спр.ТекущийЭлемент();
					Если пЯчейка.Родитель.Родитель.Родитель.Склад=ПоСчету.Склад Тогда
						Ячейка = пЯчейка;
						Если ПоСчету.Склад.ТипСклада=Перечисление.ТипыСкладов.СкладРаспродажи Тогда
//							таб.Группа = "IZPARDO№ANA "+АдресСтрокой( Ячейка, 1, 1, "" ) + Шаблон( " ([Ячейка.Родитель.Родитель.Родитель.МестоХранения.УсловияХранения])" );
						Иначе
//							таб.Группа = АдресСтрокой( Ячейка, 1, 1, "" ) + Шаблон( " ([Ячейка.Родитель.Родитель.Родитель.МестоХранения.УсловияХранения])" );
						КонецЕсли;
						таб.СклАдрес = АдресСтрокой( Ячейка, 1, 1, "" )+"-"+АдресСтрокой( Ячейка, 2, 4, "-" );
						таб.СклАдрес=СокрЛП(таб.СклАдрес);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			Если ПустоеЗначение(Ячейка)=1 Тогда // если ячейка для товара не задана
				Если ПоСчету.Склад.ТипСклада=Перечисление.ТипыСкладов.СкладРаспродажи Тогда
				Иначе
//					табл.Группа = "ййй";
				КонецЕсли;					
				Если промТовар.МестоХранения.Выбран() = 1 Тогда
					таб.СклАдрес = промТовар.МестоХранения.УсловияХранения;
//					табл.Сорт = промТовар.МестоХранения.Код;
				Иначе
					таб.СклАдрес = "не указан";
//					табл.Сорт = 99;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	
	
КонецПроцедуры // ЗаполнитьСклАдрес

//{ТП
Процедура ТП_совмещениеТЧ(ТП_ТекСтрока)
	СтрокаТЧ=Таб.ПолучитьЗначение(ТП_ТекСтрока,"НомерСтрокиДокумента");
	//ВыбратьСтроки();
	ПолучитьСтрокуПоНомеру(СтрокаТЧ);
КонецПроцедуры	
Процедура ТП_Обновить()

	ВыгрузитьТабличнуюЧасть(Таб,пСтолбцы);
	Таб.НоваяКолонка("СклАдрес",,,,,,,);
	ЗаполнитьСклАдрес();
	
	Таб.УстановитьПараметрыКолонки("НомерСтроки",,,,"Номер",,,);
	Таб.УстановитьПараметрыКолонки("Количество","Число",10,3,"Количество",,,);
	Таб.УстановитьПараметрыКолонки("Товар",,,,"Товар",,,);
	Таб.УстановитьПараметрыКолонки("ТовКод",,,,"ТовКод",,,);
	Таб.УстановитьПараметрыКолонки("Коэффициент",,,,"Коэффициент",,,);
	Таб.УстановитьПараметрыКолонки("Единица",,,,"Единица",,,);
	Таб.УстановитьПараметрыКолонки("КоличествоФакт","Число",10,3,"КоличествоФакт",,,);
	Таб.УстановитьПараметрыКолонки("СутьПретензии",,,,"СутьПретензии",,,);
	Таб.УстановитьПараметрыКолонки("ТоварЗамена",,,,"ТоварЗамена",,,);
	Таб.УстановитьПараметрыКолонки("НомерСтрокиЗамены",,,,"НомерСтрокиЗамены",,,);
	Таб.УстановитьПараметрыКолонки("СрокРеализ","Дата",,,"СрокРеализ",,,);
	Таб.УстановитьПараметрыКолонки("ВидУведомления",,,,"ВидУведомления",,,);
	Таб.УстановитьПараметрыКолонки("СрокРеализДоп","Дата",,,"СрокРеализДоп",,,);
	Таб.УстановитьПараметрыКолонки("ПретензииКомпл",,,,"ПретензииКомпл",,,);
	Таб.УстановитьПараметрыКолонки("СклАдрес",,,,"СклАдрес",,,);
	Таб.УстановитьПараметрыКолонки("Резерв",,,,"Резерв",,,);
	
	Таб.Сортировать("+СклАдрес");
	ТП.ОбновитьСтроки();
	ТП.ТекущаяСтрока=Таб_ТекущаяСтрока;
//	ТП.АвтоШирина();
	Форма.Обновить();
КонецПроцедуры


//------------------------------
Процедура тпКнопка_ПриВыводеСтроки(тп, ОформлениеСтроки, ДанныеСтроки, ТипРегиона)
	Если флСообщения=1 Тогда
		сообщить("ПриВыводеСтроки");
	КонецЕсли;
	
	//Если ДанныеСтроки.Количество=ДанныеСтроки.КоличествоФакт Тогда
	//	ОформлениеСтроки.ЦветФона = глПолучитьЦвет(0,255,0);
	//	//<ПолучитьЦвет(R,G,B)>
	//КонецЕсли;
	//Если ДанныеСтроки.Количество<>ДанныеСтроки.КоличествоФакт Тогда
	//	ОформлениеСтроки.ЦветФона = глПолучитьЦвет(255,0,0);
	//	//<ПолучитьЦвет(R,G,B)>
	//КонецЕсли;		

	Если глНеобходимоНаличиеПретензии(Контекст,ДанныеСтроки.Товар,ДанныеСтроки.Единица.Единица,ДанныеСтроки.Количество,ДанныеСтроки.КоличествоФакт)=1 Тогда
		ОформлениеСтроки.ЦветФона = глПолучитьЦвет(255,0,0);
		//<ПолучитьЦвет(R,G,B)>
	Иначе
		ОформлениеСтроки.ЦветФона = глПолучитьЦвет(0,255,0);
	КонецЕсли;		

	Если (ПустоеЗначение(ДанныеСтроки.КоличествоФакт)=1)
	или (ДанныеСтроки.КоличествоФакт=0) Тогда
		Если ПустоеЗначение(ДанныеСтроки.ПретензииКомпл)=1 Тогда
			ОформлениеСтроки.ЦветФона = глПолучитьЦвет(0,0,255);
			//<ПолучитьЦвет(R,G,B)>
		КонецЕсли;

	КонецЕсли;		
			//Параметры:
	//
	//ОформлениеСтроки - тип: ОформлениеСтроки. Объект для управления оформлением выводимой строки табличного поля. 
	//ДанныеСтроки - тип: ДанныеСтроки. Данные (коллекция значений полей) выводимой строки табличного поля. 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает при выводе (отображении) строки табличного поля.
	
КонецПроцедуры

Процедура тпКнопка_Выбор(тп, Стр, Колонка, ТипРегиона)
	Если флСообщения=1 Тогда
		сообщить("Выбор");
	КонецЕсли;

	Таб_ТекущаяСтрока=ТП.ТекущаяСтрока;
	Таб_ТекущаяКолонка=п_НижОграничитель;
	ВыводТовара(Таб_ТекущаяСтрока);
//	ВыводИнфо();	

	кнСбросШтрихкода();
//	ПередатьФокус = "кнТовар"; 
//	Форма.Закрыть(0);
	
	//Параметры:
	//
	//Строка - тип: определяется поставищком данных. Значение, идентифицирующее строку ТП. 
	//Колонка - тип: КолонкаТабличногоПоля 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает при двойном клике на строке табличного поля, или нажатии клавиши Enter.
	
	//зн = тпСклады.ТекущиеДанные.Получить("Наименование").ТекущийЭлемент();
	//тпСклады.РедактироватьЗначение(1,Колонка,3,зн,0,0,"ВыбРеквизит","0x00000020"); 
	//Форма.ВыбРеквизит.НазначитьТип("Справочник.Склады");
	
КонецПроцедуры


Процедура тпКнопка_ПриАктивизацииСтроки(тп)
	Если флСообщения=1 Тогда 
		сообщить("ПриАктивизацииСтроки");
	КонецЕсли;
	
	Таб_ТекущаяСтрока=ТП.ТекущаяСтрока;
	Таб_ТекущаяКолонка=п_НижОграничитель;
	ВыводТовара(Таб_ТекущаяСтрока);	
//	ВыводИнфо();

	
	//ОбновитьКартинки();
	
	//Описание: Возникает, когда любая строка становится текущей.
	
КонецПроцедуры


Процедура тпКнопка_ПриАктивизацииКолонки(тп)
	Если флСообщения=1 Тогда
		сообщить("ПриАктивизацииКолонки");
	КонецЕсли;
	// Описание: Возникает, когда любая колонка становится текущей.
	
КонецПроцедуры

Процедура тпКнопка_ПриАктивизацииЯчейки(тп)
	Если флСообщения=1 Тогда
		сообщить("ПриАктивизацииЯчейки");
	КонецЕсли;
	// Описание: Возникает, когда ячейка становится текущей. Порядок прохождения событий: ПриАктивизацииСтроки, ПриАктивизацииКолонки, ПриАктивизацииЯчейки.
	
КонецПроцедуры

Процедура тпКнопка_ПриВыбореЗаголовка(тп, Колонка)
	Если флСообщения=1 Тогда
		сообщить("ПриВыбореЗаголовка");
	КонецЕсли;
	//Параметры:
	//
	//Колонка - тип: КолонкаТабличногоПоля. Колонка, заголовок которой выбран. 
	//Описание: Возникает, когда пользователь выбирает мышью заголовок колонки.
	
КонецПроцедуры

Процедура тпКнопка_ПриКонтекстномМеню(тп, ТипРегиона, Колонка, Стр)
	Если флСообщения=1 Тогда
		сообщить("ПриКонтекстномМеню");
	КонецЕсли;
	//Параметры:
	//
	//ТипРегиона - тип: ТипыРегионовТП 
	// ТипыРегионовТП
	// Тип: Перечисление
	// 
	// Значения: 0 - регион не задан 
	// 1 - заголовок 
	// 2 - шапка 
	// 3 - строки (основная часть) 
	// 4 - подвал  
	//
	//Колонка - тип: КолонкаТабличногоПоля. Колонка табличного поля, на которой было вызвано контекстное меню. 
	//Строка - тип: определяется поставищком данных. Значение, идентифицирующее строку ТП. 
	//Описание: Возникает, когда необходимо отобразить контекстное меню.
	
	//тут делаем что надо
КонецПроцедуры

Процедура тпКнопка_ПриВыбореФлажка(тп, Стр, Колонка, ТипРегиона)
	Если флСообщения=1 Тогда
		сообщить("ПриВыбореФлажка");
	КонецЕсли;
	
	//Параметры:
	//
	//Строка - тип: определяется поставищком данных. Значение, идентифицирующее строку ТП. 
	//Колонка - тип: КолонкаТабличногоПоля 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает, когда пользователь изменяет значение флажка.
	
КонецПроцедуры

Процедура тпКнопка_НачалоПеретаскивания(тп, ДопустимыеДействия, Значение, Колонка, ТипРегиона, ТипЦели)
	Если флСообщения=1 Тогда
		сообщить("НачалоПеретаскивания");
	КонецЕсли;
	//
	//Параметры:
	//
	//ДопустимыеДействия - тип: Число. (Выход) Список допустимых действий перетаскивания. Список задается как сумма следующих значений:
	//
	//1 - копирование (Copy) 
	//2 - перетаскивание (Move) 
	//4 - связывание (Link) 
	//Значение по-умолчанию 1. Если необходимо разрешить другие действия, нужно изменить значение этого параметра на выходе из обработчика события. Если передать 0, т.е. не определить ни одного действия, Перетаскивание не начнется.
	//
	//Значение - тип: определяется поставщиком данных. (Вход) Значение, идентифицирующее строку табличного поля. (Выход) Значение, которое будет представлять перетаскиваемые данные.
	//
	//Колонка - тип: КолонкаТабличногоПоля
	//
	//ТипРегиона - тип: ТипыРегионовТП
	//
	//ТипЦели - тип: Число. (Выход) Определяет логическую область отображения перетаскиваемых данных в ТП.
	//
	//0 - не задано 
	//1 - ячейка 
	//2 - строка 
	//3 - колонка 
	//Это значение используется для определения области ТП, в которой не нужно формировать события проверки перетаскивания, в том случае когда ЭУ-приемником является то же ТП, что и источник.
	//
	//Описание: Возникает в ЭУ источнике данных, когда пользователь начинает перетаскивание (Drag&Drop).
	
КонецПроцедуры

Процедура тпКнопка_ОкончаниеПеретаскивания(тп, Действие, Значение, Колонка, ТипРегиона)
	Если флСообщения=1 Тогда
		сообщить("ОкончаниеПеретаскивания");
	КонецЕсли;
	//
	//Параметры:
	//
	//Действие - тип: Число. Действие - результат операции перетаскивания. Допустимые действия:
	//
	//0 - нет действия 
	//1 - копирование (Copy) 
	//2 - перетаскивание (Move) 
	//4 - связывание (Link) 
	//Значение - тип: Любой. Значение, представляющее перетаскиваемые данные. Это значение было задано в событии НачалоПеретаскивания|НачалоПеретаскивания. 
	//Колонка - тип: КолонкаТабличногоПоля 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает в ЭУ источнике данных, когда завершается операция перетаскивания (Drag&Drop).
	//
	//Обычная обработка: в случае операции 2 (перетаскивания или Move) нужно удалить перетаскиваемые данные. В параметре Действие ЭУ источник данных всегда получит одно из тех действий, которое он определил для себя в событии НачалоПеретаскивания / DragStart.
	//
	//Порядок прохождения событий: 
	//НачалоПеретаскивания|НачалоПеретаскивания - в источнике, 
	//ПроверкаПеретаскивания|ПроверкаПеретаскивания - в назначении, 
	//Перетаскивание|Перетаскивание - в назначении, 
	//ОкончаниеПеретаскивания - в источнике. 
КонецПроцедуры

Процедура тпКнопка_ПроверкаПеретаскивания(тп, Действие, Значение, СтрокаТП, КолонкаТП, ТипРегионаТП, ТипЦели)
	Если флСообщения=1 Тогда
		сообщить("ПроверкаПеретаскивания");
	КонецЕсли;
	//
	//Параметры:
	//
	//Действие - тип: Число. (Выход) Действие которое произойдет при совершении перетаскивания. По-умолчанию 0. Допустимые действия:
	//
	//0 - нет действия 
	//1 - копирование (Copy) 
	//2 - перетаскивание (Move) 
	//4 - связывание (Link) 
	//Значение - тип: Любой. Значение, представляющее перетаскиваемые данные. Это значение было задано в обработчике события НачалоПеретаскивания|НачалоПеретаскивания.
	//
	//СтрокаТП - тип: Любой. Значение представляющее строку табличного поля, в которую идет перетаскивание (находится под курсором). Обеспечивается поставщиком данных.
	//
	//
	//КолонкаТП - тип: КолонкаТабличногоПоля. Колонка табличного поля, в которую идет перетаскивание (находится под курсором). 
	//ТипРегионаТП - тип: ТипыРегионовТП. Тип региона, в который идет перетаскивание. 
	//ТипЦели - тип: Число. (Выход) Определяет логическую область приемника перетаскиваемых данных, которая подсвечивается рамкой. Значение по-умолчанию: если ЭУ источник данных - табличное поле, то значение, заданное в обработчике события НачалоПеретаскивания|НачалоПеретаскивания; если источник данных - некий другой ЭУ, то значение равно 0.
	//
	//0 - не задано 
	//1 - ячейка 
	//2 - строка 
	//3 - колонка 
	//Описание: Возникает в ЭУ назначения перетаскивания для определения действия, которое произойдет при совершении операции перетаскивания. (Drag&Drop)
	//
	//Главное назначение события - проверить возможность совершения операции перетаскивания и определить Действие. Событие возникает всякий раз, когда изменяется строка или колонка ТП. Если строка или колонка не определяются под курсором мыши, то значения соответствующих параметров будут равны пустому значению.
	
КонецПроцедуры

Процедура тпКнопка_Перетаскивание(тп, Действие, Значение, СтрокаТП, КолонкаТП, ТипРегионаТП)
	Если флСообщения=1 Тогда
		сообщить("Перетаскивание");
	КонецЕсли;
	//
	//Параметры:
	//
	//Действие - тип: Число. Действие, которое нужно выполнить для совершения перетаскивания. Равно значению параметра Действие на выходе из события ПроверкаПеретаскивания / DragCheck. Допустимые действия:
	//
	//1 - копирование (Copy) 
	//2 - перетаскивание (Move) 
	//4 - связывание (Link) 
	//Значение - тип: Любой. Значение, представляющее перетаскиваемые данные. Это значение было задано в обработчике события НачалоПеретаскивания|НачалоПеретаскивания.
	//
	//СтрокаТП - тип: Любой. Значение представляющее строку табличного поля, в которую идет перетаскивание (находится под курсором). Обеспечивается поставщиком данных.
	//
	//
	//КолонкаТП - тип: КолонкаТабличногоПоля. Колонка табличного поля, в которую идет перетаскивание (находится под курсором). 
	//ТипРегионаТП - тип: ТипыРегионовТП. Тип региона, в который идет перетаскивание. 
	//Описание: Возникает в ЭУ назначения, когда совершается операция перетаскивания (Drag&Drop).
	//
	//Если строка или колонка не определяются под курсором мыши, то значения соответствующих параметров будут равны пустому значению.
	
КонецПроцедуры

Процедура тпКнопка_ПриУничтожении(тп) 
	Если флСообщения=1 Тогда
		сообщить("ПриУничтожении");
	КонецЕсли;
	//Параметры: нет 
	//Описание: Событие вызывается при уничтожении контрола, с которым связано ТП, до уничтожения самого ТП. 
	
КонецПроцедуры

Процедура тпКнопка_ПриНачалеБыстрогоПоиска(тп, чТипБыстрогоПоиска, чФСО)
	Если флСообщения=1 Тогда
		сообщить("ПриНачалеБыстрогоПоиска");
	КонецЕсли;
	// 
	//Параметры: 
	//чТипБыстрогоПоиска, тип: Число 
	//Тип быстрого поиска: 
	//1 - текстовый быстрый поиск 
	//
	//чФСО, тип: Число 
	//Доступ: чтение и запись
	//
	//Флаг стандартной обработки. Возможные значения для установки: 
	//1 - быстрый поиск разрешен 
	//0 - быстрый поиск запрещен 
	//Значение по умолчанию: 1
	// 
	//Описание: Событие вызывается до инициализации окна быстрого поиска и позволяет управлять разрешением на его создание.
	// 
	
КонецПроцедуры

Процедура тпКнопка_ПриБыстромПоиске(тп, чТипБыстрогоПоиска, нДанные, чФСО)
	Если флСообщения=1 Тогда
		сообщить("ПриБыстромПоиске");
	КонецЕсли;
	// 
	//Параметры: 
	//чТипБыстрогоПоиска, тип: Число 
	//Тип быстрого поиска: 
	//1 - текстовый быстрый поиск 
	//
	//нДанные, тип: для текстового быстрого поиска - Строка 
	//Доступ: чтение и запись
	//
	//Данные, введенные в окне быстрого поиска
	//
	//
	//чФСО, тип: Число 
	//Флаг стандартной обработки. Возможные значения для установки: 
	//1 - быстрый поиск разрешен 
	//0 - быстрый поиск запрещен 
	//Значение по умолчанию: 1
	// 
	//Описание: Событие вызывается до выполнения системной процедуры быстрого поиска и позволяет организовать специальные алгоритмы поиска.
	//Возможна трансформация данных с последующей системной обработкой, а также полная замена системной обработки на собственную. 
	
КонецПроцедуры

Процедура тпКнопка_ПриОкончанииБыстрогоПоиска(тп, флРезультат, флПерепозиционировано)
	Если флСообщения=1 Тогда
		сообщить("ПриОкончанииБыстрогоПоиска");
	КонецЕсли;
	// 
	//Параметры: 
	//флРезультат, тип: Число 
	//Причина закрытия окна быстрого поиска. 
	//1 - закрытие клавишей ENTER 
	//0 - отмена быстрого поиска (любым способом) 
	//
	//флПерепозиционировано, тип: Число 
	//Флаг, отражающий факт перепозиционирования непосредственно перед закрытием окна БП 
	//1 - ТП было перепозиционировано 
	//0 - ТП не было перепозиционировано 
	// 
	//Описание: Событие вызывается после закрытия окна быстрого поиска.
	
	
КонецПроцедуры

Процедура тпКнопка_ПриПеремещенииКолонки(тп, Колонка, чСдвиг, чФСО)
	Если флСообщения=1 Тогда
		сообщить("ПриПеремещенииКолонки");
	КонецЕсли;
	// 
	//Параметры: Колонка, тип: КолонкаТабличногоПоля
	//
	//
	//чСдвиг, тип: Число 
	//Предлагаемый сдвиг колонки
	//
	//
	//чФСО, тип: Число 
	//Флаг стандартной обработки. Возможные значения для установки: 
	//1 - перемещение колонки разрешено 
	//0 - перемещение колонки запрещено 
	//Значение по умолчанию: 1
	// 
	//Описание: Событие вызывается при интерактивном перемещении колонки ТП непосредственно перед выполнением перемещения. 
	
КонецПроцедуры

Процедура тпКнопка_ПриИзмененииВидимостиКолонки(тп, Колонка, флВидимость, чФСО)
	Если флСообщения=1 Тогда
		сообщить("ПриИзмененииВидимостиКолонки");
	КонецЕсли;
	// 
	//Параметры: Колонка, тип: КолонкаТабличногоПоля
	//
	//
	//флВидимость, тип: Число 
	//Предлагаемое значение флага видимости колонки
	//
	//
	//чФСО, тип: Число 
	//Флаг стандартной обработки. Возможные значения для установки: 
	//1 - изменение видимости колонки разрешено 
	//0 - изменение видимости колонки запрещено 
	//Значение по умолчанию: 1
	// 
	//Описание: Событие вызывается при интерактивном изменении видимости колонки ТП непосредственно перед выполнением изменения видимости. 
	
КонецПроцедуры

Процедура тпКнопка_ПриИзмененииШириныКолонки(тп)
	Если флСообщения=1 Тогда
		сообщить("ПриИзмененииШириныКолонки");
	КонецЕсли;
	// 
	//Параметры: нет
	// 
	//Описание: Событие вызывается при интерактивном изменении ширины одной или нескольких колонок. 
	
КонецПроцедуры
//------------------------------
Процедура тпКнопка_ПриРедактированииЗначения(тп,Стр,Кол,Рег,_Знач)
	Если флСообщения=1 Тогда
		сообщить("ПриРедактированииЗначения");
	КонецЕсли;
	
	Таб.УстановитьЗначение(ТП.ТекущаяСтрока,ТП.ТекущаяКолонка.Имя,_Знач);
    
	ТП.ОбновитьСтроки();
	ТП_совмещениеТЧ(ТП.ТекущаяСтрока);
	
//	Если Кол.Имя="ЦенаИзКатегории" Тогда
//		Если (ДатаДок>=Константа.ДатаНачалаИспользованияПрайсовПоставщиков)
//		И (Номенклатура.ВидНоменклатуры<>Перечисление.ВидыНоменклатуры.Услуга) Тогда
//				
//			ВыбПоставщик=Номенклатура.Поставщик;
//			Если ПустоеЗначение(ВыбПоставщик)=1 Тогда
//				Предупреждение("Не указан поставщик в карточке товара!");
//				СтатусВозврата(0);
//			Иначе
//				Если ВвестиЧисло(БруттоЦена,"Введите брутто цену из каталога",17,2)=1 Тогда
//				Иначе
//					СтатусВозврата(0);
//					Возврат;
//				КонецЕсли;
//				БруттоЦена=_Знач;
//				///
//				Форма.Обновить();
//				ПолучитьСтрокуПоНомеру(СтрокаТЧ);
//				///
//				Спр=СоздатьОбъект("Справочник.ПрайсыПоставщиков");
//				Спр.ИспользоватьВладельца(ВыбПоставщик);
//				Конт=ВыбПоставщик;
//				ОткрытьПодбор("Справочник.ПрайсыПоставщиков",,Конт,0,ПрайсПоставщика);
//				УстановитьЗначениеВПодборе("ВыбБруттоЦена",БруттоЦена);
//			//	ПриРедактированииЦеныИзКатегории();
//			//	ТП_Обновить();
//				СтатусВозврата(0);
//
//			КонецЕсли;
//		КонецЕсли;
//		
//		
//		
////////////		
//		

	ТП_Обновить();	
	
КонецПроцедуры // ПриРедактированииЗначения(Стр, Кол, Рег, Знач)
//------------------------------

//------------------------------
Процедура ТП_колонки(ТП)

//	ИмяКолонки="НомерСЕ";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = "Номер товара";
////	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.Видимость = 1;
//	Колонка.Ширина				=20;
//	
//	ИмяКолонки="НомерСК";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = "Номер товара в комплекте";
////	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.Видимость = 1;
//	Колонка.Ширина				=20;
//	
	//ИмяКолонки="НомерКомплекта";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.Видимость = 1;
	
	//ИмяКолонки="СклАдрес";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=15;	
	//
	ИмяКолонки="Товар";
	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	Колонка.Заголовок         = ИмяКолонки;
	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	Колонка.ИзменятьВидимость = 0;
//	Колонка.Ширина				=30;
	
	//
	//
	//ИмяКолонки="Поставщик";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=90;
	//
	//ИмяКолонки="Артикул";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;

	//ИмяКолонки="ТовКод";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;

	//ИмяКолонки="ЕдиницаКл";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Единица";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=30;
	//
	//ИмяКолонки="ЦенаИзКатегории";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Цена из кат.";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	//
	//ИмяКолонки="Цена";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	//	
	//ИмяКолонки="ЦенаСНДС";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Цена c НДС";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	//
	//
	//ИмяКолонки="ПроцентСкидки";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Скидки";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;	
	ИмяКолонки="Количество";
	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	Колонка.Заголовок         = "КолНач";
	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	Колонка.ИзменятьВидимость = 0;
	Колонка.Ширина				=7;
	

	ИмяКолонки="КоличествоФакт";
	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	Колонка.Заголовок         = "КолФакт";
	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	Колонка.ИзменятьВидимость = 0;
	Колонка.Ширина				=7;
	
	//ИмяКолонки="Сумма";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Сумма без НДС";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	//	
	//ИмяКолонки="СуммаНДС";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.Видимость = 0;
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	
	//ИмяКолонки="СуммаНП";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.Видимость = 0;
	//Колонка.ИзменятьВидимость = 0;	
	//Колонка.Ширина				=50;
	//
	//ИмяКолонки="Всего";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Всего";
	//Колонка.Данные            = СокрЛП(Строка(ТП.Колонки.СуммаНДС+ТП.Колонки.Сумма));
	//Колонка.Видимость = 1;
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	////Формат(Сумма+?(СуммаВклНДС=1,0,СуммаНДС)+?(СуммаВклНП=1,0,СуммаНП),"Ч15.2.,")
	//
	//ИмяКолонки="фКартинка1";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Картинка 1";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=18;
	//Колонка.ИзменениеРазмера	=0;
	//
	//ИмяКолонки="фКартинка2";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Картинка 2";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=18;
	//Колонка.ИзменениеРазмера	=0;
	//
	//ИмяКолонки="фКартинка3";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Картинка 3";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=18;
	//Колонка.ИзменениеРазмера	=0;
	
//	ИмяКолонки="НомерСтрокиДокумента";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = ИмяКолонки;
//	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.Видимость = 1;
//	
//
//	
//	ИмяКолонки="НомерЕдиницыКомплекта";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = ИмяКолонки;
//	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.Видимость = 1;

КонецПроцедуры

//////////////////////////////////////////////////////////
Процедура ТП_Инициализация()
	//	ОчиститьОкноСообщений();
	
	оФорма = СоздатьОбъект("Форма");
	оФорма.УстановитьФорму(Форма);
	ТП = оФорма.СоздатьЭлементУправления("ТабличноеПоле", "тпКнопка_");
	// свойства ТП
	ТП.ВертСкроллер = 1; // 0-авто, 1-всегда, 2-никогда
	ТП.НачальноеПредставление = 0; // 0-с начала, 1-с конца
	ТП.РежимВыделенияСтроки = 2; // 0-ячейка, 1-строка, 2-строка=ЦветТекстаВыделения2 и ЦветФонаВыделения2
	ТП.РежимВыделения = 1; // 0-выдел. одной строки, 1-выдел. неск. строк
	ТП.ВертикальныеЛинии = 1;
	ТП.ГоризонтальныеЛинии = 1;
	ТП.ОтображатьЗаголовки = 1;
	ТП.СтильЗаголовков = 0; // 0-3D, 1-плоский
	ТП.СтильАктивногоЗаголовка = 1; // 0-не выделяется, 1-выделяется
	ТП.ТаймаутОбновления = 0; // Х сек, 0-не обновлять автоматически
	ТП.ТаймаутБыстрогоПоиска = 1000; // Х мсек, 0-автоматически не пытаться
	ТП.ИзменятьПозициюКолонок = 1;
	//тпСклады.ЦветЛиний = 0; // цвета по умолчанию
	//тпСклады.ЦветТекста = 0;
	//тпСклады.ЦветФона = 0;
	//тпСклады.ЦветТекстаВыделения = 0;
	//тпСклады.ЦветФонаВыделения = 0;
	//тпСклады.ЦветТекстаВыделения2 = 0;
	//тпСклады.ЦветФонаВыделения2 = 0;
	//тпСклады.ЦветФонаЧередованияСтрок = 0; // цвета по умолчанию
	глФабрика = СоздатьОбъект("ФабрикаОбъектов");
	ШрифтАриал10Жирный = глФабрика.Шрифт("Arial LV", 14, 1);
	ТП.Шрифт=ШрифтАриал10Жирный;
	ТП.ЧередованиеЦветовСтрок = 1;
	ТП.РазрешитьНачалоПеретаскивания = 1; // 1-разрешает ЭУ выступать источником перетаскивания, 0-запрещает
	ТП.РазрешитьПеретаскивание = 1; // 1-разрешает ЭУ выступать приемником перетаскивания, 0-запрещает
	ТП.ФиксацияСлева = 0; // кол-во фиксированных колонок
	ТП.ФиксацияСправа = 0;
	// колонки
	ТП_колонки(ТП);
	//// поставщик
	Источник=СоздатьОбъект("ПоставщикДанныхТЗ");
	Источник.УстТаблицуЗначений(Таб);
	ТП.ПоставщикДанных=Источник;
	
	
//	ТП.ОбновитьСтроки();
	ТП_Обновить();	
	// быстрый поиск
	//тп.ПоставщикДанных.Поля.Получить("Наименование").ТипБыстрогоПоиска = 1;
	
	// методы
	
//	ТП.АвтоШирина();
	Форма.ПанельИнструментов(0);
КонецПроцедуры

///////////////////////////////////////////////////

//}ТП


Процедура ПриОткрытии()
//	Сообщить("1");
	ОбработкаВнешнихКоманд();
//		Сообщить("2");
	ПриОткрытииВесов();
	
	
	
//	Предупреждение(Комплектовщик);

//	Если ПустоеЗначение(ДатаПрихода)=1 Тогда
//		ДатаПрихода=ТекущаяДата();
//	КонецЕсли;


		
КонецПроцедуры
Процедура ПриЗакрытии()
	//{ЛожноеЗакрытие Установить Фокус
	Если ПустоеЗначение(ПередатьФокус) = 0 тогда 
		Если ПередатьФокус="Печать" Тогда
			ПередатьФокус = "";
			СтатусВозврата(0);
			Печать();
		ИначеЕсли ПередатьФокус="ПечатьМаршрута" Тогда	
			ПередатьФокус = "";
			СтатусВозврата(0);
			ПечатьМаршрута();
		Иначе
			
			Активизировать(ПередатьФокус); 
			СтатусВозврата(0); 
			ПередатьФокус = "";
			Если нажатьКлавишу="Ф4" Тогда
				нажатьКлавишу="";
				WshShell = СоздатьОбъект("WScript.Shell") ;
				//WshShell.SendKeys("{^}");
				WshShell.SendKeys("^{F4}");
			КонецЕсли;
		КонецЕсли;
		Возврат; 
	КонецЕсли; 
	//}ЛожноеЗакрытие Установить Фокус
	
	Сервис = СоздатьОбъект("Сервис");
	Сервис.УдалитьШрифт(МойШрифт);	

	Если Пользователь="ЦехPPAC" Тогда	
		НастроитьОкна(1);
	КонецЕсли;	
	
	ПриЗакрытииВесов();	
	
	
//	Записать();
	Форма.Закрыть(0);
	
	
	
КонецПроцедуры
Процедура ПослеОткрытия()
	Перем фПользователь;
	фПользователь=0;
	НастроитьПривязки();
	Если Пользователь="ЦехPPAC" Тогда
		фПользователь=1;
	КонецЕсли;
//Сообщить("3");	
	Если фПользователь=1 Тогда
		НастроитьОкна(фПользователь);// 1 для мобильного режима
	КонецЕсли;
	ТП_Инициализация();
//	Сообщить("4");
	ПВ_Инициализация();
	
	//Если ПустоеЗначение(ПоСчету)=0 Тогда
	//	л_Клиент=ПоСчету.Клиент;
	//	Если л_Клиент.ПечататьСрокиРеализ=1 Тогда
	//		п_НижОграничитель=4;
	//	Иначе
	//		п_НижОграничитель=5;
	//	КонецЕсли;
	//КонецЕсли;
	
	Если фПользователь=1 Тогда
		НастроитьОкна(фПользователь);// 1 для мобильного режима
	КонецЕсли;
//	ВыводТовара(1);
	
//	Ф=СоздатьОбъект("Форма");
//	Ф.УстановитьФорму(Форма);

	п_Окна = СоздатьОбъект("Окна");
	п_Окна.Максимизировать(Форма);
	
	ТекущийСлой=слТаблицы;
//	Форма.кнМеню.Заголовок("Товар");
	Форма.ИспользоватьСлой(ТекущийСлой,2);

//	ПередатьФокус = "тпКнопка_"; 
	
//	гСервис = СоздатьОбъект("Сервис");
//	гСервис.ПерехватКлавиатуры(1);
	ПолучитьВесАвто();
	ПередатьФокус = "пвШтрихкод"; 
	Форма.Закрыть(0);
	

КонецПроцедуры // ПослеОткрытия()  
Процедура ГруппироватьТЧ()
Перем тт,табИТ;
	тт=СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(тт);
	табИТ=СоздатьОбъект("ИндексированнаяТаблица");
	табИТ.Загрузить(тт);
//	табИТ.ВыбратьСтроки();
//	табИТ.Группировать("Товар : *Товар; СрокРеализ : *СрокРеализ","Сумма,НДС,Количество");
	табИТ.Свернуть("Товар,СрокРеализ","Сумма,НДС,Количество,КоличествоНеПодвержденое");

	табИТ.Выгрузить(тт);
	ЗагрузитьТабличнуюЧасть(тт);
КонецПроцедуры

Процедура ВводНаОсновании(ДокОснование)
	
	ЗаполнитьШапкуНаОсн(Контекст,ДокОснование);
	Если ДокОснование.Вид()="Счет" Тогда
		
//		Если семМожноВводитьНаОснованииСчета( ДокОснование, "КомплектацияЗаявкиФакт" ) = 0 Тогда СтатусВозврата( 0 ); Возврат; КонецЕсли;
		
		
		ПоСчету = ДокОснование;
		СкладЗагрузки = ДокОснование.Склад;
//		Комплектовщик = ДокОснование.Комплектовщик;
		Запрос=СоздатьОбъект("ODBCRecordSet");
		
		СостояниеЗаявки=глПолучитьСостояниеЗаявки(ДокОснование);
		
		Если (СостояниеЗаявки="Ожидает компл.")или (СостояниеЗаявки="КомплектуетсяМоб")  Тогда
				//можно 
				//Удаляем с нулем
		
			л_Условие="СчетСтроки.IDDOC = :ВыбСчет";

			Если ПоСчету.ВидЗаявки=Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка Тогда
				л_Условие="(СчетСтроки.IDDOC = :ВыбСчет)AND(РезервыТоваровОстатки.РезервТовараОстаток > 0)";
			КонецЕсли;
				
			ТекстЗапроса="SELECT СчетСтроки.IDDOC [Ссылка $Документ.Счет]
			|					, $СчетСтроки.Товар [Товар $Справочник.Номенклатура]
			|					, СпрН.CODE ТовКод
			|					, $СчетСтроки.Количество КоличествоФакт
			|					, CASE WHEN $Счет.ВидЗаявки = $Перечисление.ВидыЗаявок.СпецЗаказ THEN $СчетСтроки.Количество ELSE РезервыТоваровОстатки.РезервТовараОстаток END Количество
	//		|					, $СчетСтроки.Количество КоличествоФакт
			|					, $СчетСтроки.Единица [Единица $Справочник.Единицы]
			|					, $СчетСтроки.Коэффициент Коэффициент
			|					, $СчетСтроки.МинСрокРеализ МинСрокРеализ
			|					, $СчетСтроки.МаксСрокРеализ МаксСрокРеализ
			|					, РезервыТоваровОстатки.РезервТовараОстаток Резерв
			|			  FROM $ДокументСтроки.Счет AS СчетСтроки (NOLOCK)
			|			  INNER JOIN $Справочник.Номенклатура СпрН (NOLOCK) ON СпрН.ID = $СчетСтроки.Товар
			|			  INNER JOIN $Документ.Счет AS Счет (NOLOCK) ON Счет.IDDOC = СчетСтроки.IDDOC
			|			  LEFT OUTER JOIN $РегистрОстатки.РезервыТоваров(,,(ПоСчету = :ВыбСчет),Товар,) AS РезервыТоваровОстатки ON $СчетСтроки.Товар = РезервыТоваровОстатки.Товар
			|			  WHERE "+л_Условие+"
			|			  ORDER BY LINENO_
			|";
	
			Запрос.УстановитьТекстовыйПараметр("ВыбСчет",ДокОснование);
	
			ТаблСчет=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
			
			ЗагрузитьТабличнуюЧасть(ТаблСчет);
			
	//		СутьПретензииOOS = СоздатьОбъект("Справочник.Претензии");
	//		СутьПретензииOOS.НайтиПоКоду("B02");
			
			ВыбратьСтроки();
			Пока ПолучитьСтроку() = 1 Цикл
//				Если Количество>КоличествоФакт Тогда
	//				СутьПретензии = СутьПретензииOOS.ТекущийЭлемент();
//				КонецЕсли;	
//				Если ДокОснование.ВидЗаявки<>Перечисление.ВидыЗаявок.СпецЗаказ Тогда
//					л_Резерв=Резерв;
//					Резерв=Количество;
//					Количество=л_Резерв;
//				КонецЕсли;
				КоличествоФакт=0;
			КонецЦикла;
			
			Если семТекСтрана() = "LV" Тогда
				промКлиент = ?(ДокОснование.КлиентФилиала.Выбран() = 0,ДокОснование.Клиент,ДокОснование.КлиентФилиала);
			Иначе
				промКлиент = ДокОснование.Клиент;
				
			КонецЕсли;
	
			Если промКлиент.КлГруппа.Выбран()=1 Тогда
				промКлГруппа=промКлиент.КлГруппа;
			Иначе
				промКлГруппа=промКлиент;
			КонецЕсли;       		
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ПриНажатииКнопкиКлавиатуры(КодКлавиши, Alt, Shift, Ctrl, Символ, ФСО)
	//ФСО = 0;
	Если КодКлавиши = 120 Тогда
		Если ТекущийСлой=слТовара Тогда
			кнНазад();
		КонецЕсли;
	ИначеЕсли КодКлавиши =119 Тогда
		Если ТекущийСлой=слТовара Тогда
			кнВперед();
		КонецЕсли;	
	КонецЕсли;
	//Форма.тИнфо.Заголовок(КодКлавиши);
	//Форма.Обновить();
КонецПроцедуры
Процедура ВводНового()
КонецПроцедуры

//{

	ТаблСчет=СоздатьОбъект("ТаблицаЗначений");
	ТаблСчет.НоваяКолонка("Товар");

	//Список столбцов в таблице, порядок устанавливает отображение в переборе позиций в товаре.
	п_НижОграничитель=5; //5 - КоличествоФакт
	п_ВерхОграничитель=5;	
	
	пСтолбцы="
	|НомерСтроки,
	|Товар,
	|ТовКод,
	|СрокРеализ,
	|КоличествоФакт,
	|ПретензииКомпл,
	|СутьПретензии,
	|Коэффициент,
	|Количество,
	|Единица,
	|ТоварЗамена,
	|НомерСтрокиЗамены,
	|ВидУведомления,
	|СрокРеализДоп,
	|МинСрокРеализ,
	|МаксСрокРеализ,
	|Резерв
	|";
	Таб=СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(Таб,пСтолбцы);

	Таб.НоваяКолонка("СклАдрес",,,,,,,);
	
	Таб.УстановитьПараметрыКолонки("НомерСтроки",,,,"Номер",,,);
	Таб.УстановитьПараметрыКолонки("Количество","Число",10,3,"Количество",,,);
	Таб.УстановитьПараметрыКолонки("Товар",,,,"Товар",,,);
	Таб.УстановитьПараметрыКолонки("ТовКод",,,,"ТовКод",,,);
	Таб.УстановитьПараметрыКолонки("Коэффициент",,,,"Коэффициент",,,);
	Таб.УстановитьПараметрыКолонки("Единица",,,,"Единица",,,);
	Таб.УстановитьПараметрыКолонки("КоличествоФакт","Число",10,3,"КоличествоФакт",,,);
	Таб.УстановитьПараметрыКолонки("СутьПретензии",,,,"СутьПретензии",,,);
	Таб.УстановитьПараметрыКолонки("ТоварЗамена",,,,"ТоварЗамена",,,);
	Таб.УстановитьПараметрыКолонки("НомерСтрокиЗамены",,,,"НомерСтрокиЗамены",,,);
	Таб.УстановитьПараметрыКолонки("СрокРеализ","Дата",,,"СрокРеализ",,,);
	Таб.УстановитьПараметрыКолонки("ВидУведомления",,,,"ВидУведомления",,,);
	Таб.УстановитьПараметрыКолонки("СрокРеализДоп","Дата",,,"СрокРеализДоп",,,);
	Таб.УстановитьПараметрыКолонки("ПретензииКомпл",,,,"ПретензииКомпл",,,);
	Таб.УстановитьПараметрыКолонки("СклАдрес",,,,"СклАдрес",,,);
	Таб.УстановитьПараметрыКолонки("Резерв",,,,"Резерв",,,);

	ДокументОснование=ПоСчету;

	флСообщения=0;
	Таб_ТекущаяКолонка=п_НижОграничитель;
	Таб_ТекущаяСтрока=1;
	ТекущийДокПоставки=ПолучитьПустоеЗначение(ДокументОснование);
	старТекущийДокПоставки=ТекущийДокПоставки;
	
	меню = СоздатьОбъект("СписокЗначений");
	
	рДатаНач=ТекущаяДата();
	рДатаКон=ТекущаяДата();
	
	слТаблицы="СлойТП,СлойКнопки,слТовар";
	слТовара="Основной,СлойКнопки,слТовар";
	слПрихода="СлойТПдокументов";
	слСканирования="слШтрихкод";
	слПечать="слПечать,СлойКнопки";
	
	нажатьКлавишу="";
	счетНажатий=0;
	флТолькоПросмотр=0;
	флПлюс="";
	п_Текст="";
	сзКолонок = СоздатьОбъект("СписокЗначений");
	
	фл_ПечатьОписание=1;
	флАвтоВес=1;
	флАвтоВес1=1;
	фл_ЛокальныйПринтер=1;
//}
спКодов = СоздатьОбъект( "СписокЗначений" );
спКодов.Установить("161",194);
спКодов.Установить("162",226);
спКодов.Установить("163",200);
спКодов.Установить("165",232);
спКодов.Установить("166",199);
спКодов.Установить("167",231);
спКодов.Установить("168",204);
спКодов.Установить("170",236);
спКодов.Установить("172",206);
спКодов.Установить("174",238);
спКодов.Установить("175",205);
спКодов.Установить("176",237);
спКодов.Установить("177",207);
спКодов.Установить("178",239);
спКодов.Установить("179",210);
спКодов.Установить("180",242);
спКодов.Установить("185",208);
спКодов.Установить("186",240);
спКодов.Установить("188",219);
спКодов.Установить("189",251);
спКодов.Установить("190",222);
спКодов.Установить("191",254);

п_Тара=0;
п_Ошибка="";

