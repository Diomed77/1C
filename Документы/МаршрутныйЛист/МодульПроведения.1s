Функция ПроверкаНакладных()
	Проводить = 1;
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл Состояние( Шаблон("Проверка... ([НомерСтроки] из [КоличествоСтрок()])") );
		
		Если (Счет.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаНаВозврат) 
			 ИЛИ (Счет.ВидОплаты=4 ) //Обмен товара 
			  Тогда
			Продолжить;
		КонецЕсли;
		ЕстьНакл = 0; 
		док = СоздатьОбъект( "Документ" );
		док.УстановитьФильтр(1,0);
		Если док.ВыбратьПодчиненныеДокументы(,, Счет ) = 1 Тогда
			Пока док.ПолучитьДокумент() = 1 Цикл
				Если док.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;
				Если ( док.Вид() = "РасходнаяНакладная" )
				или ( док.Вид() = "РасходнаяРеализатора" )
				или ( док.Вид() = "Перемещение" )
				или ( док.Вид() = "СнятиеРезерва" )
				или ( док.Вид() = "ПеремещениеДепартамент" )
				или ( док.Вид() = "РасходнаяНакладнаяНал" ) Тогда
					// проверяет есть ли накладная для выбранного счета
					ЕстьНакл = 1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ЕстьНакл = 0 Тогда
			// если накладной нет, то не проводим документ
			Проводить = 0;
			Сообщить( Шаблон("Нет накладной для счета [СокрЛ(Счет.НомерДок)] в строке [НомерСтроки]."), "!" );
		КонецЕсли;
	КонецЦикла;
	Возврат Проводить;
КонецФункции

Функция ПроверкаСпидометра(пУстановить = 0)
	ТекстЗапроса = "
	|Обрабатывать НеПомеченныеНаУдаление;
	|ОбрабатыватьДокументы Проведенные;
	|Без Итогов;
	|пМашина = Документ.МаршрутныйЛист.Машина;
	|Условие (пМашина = Машина);
	|Группировка Документ;";
	Запрос = СоздатьОбъект( "Запрос" );
	Если Запрос.Выполнить( ТекстЗапроса ) = 0 Тогда Возврат 0; КонецЕсли;
	табл = СоздатьОбъект( "ТаблицаЗначений" );
	Запрос.Выгрузить(табл,0,0);
	Если Проведен() = 0 Тогда
		табл.НоваяСтрока();
		табл.Документ = ТекущийДокумент();
	КонецЕсли;
	табл.Сортировать("Документ",1);
	н = 0; табл.НайтиЗначение(ТекущийДокумент(),н,"Документ");
	предДок = ?(н > 1,табл.ПолучитьЗначение(н-1,"Документ"),"");
	следДок = ?(н < табл.КоличествоСтрок(),табл.ПолучитьЗначение(н+1,"Документ"),"");
	
	Если пУстановить = 0 Тогда
	    Если ПустоеЗначение(предДок) = 0 Тогда
			Если КилометражКон < предДок.КилометражКон Тогда
				Сообщить( "Неверно указаны данные спидометра. (меньше последних показаний)", "I" );
				Сообщить( Шаблон("Последнии показания: [предДок.КилометражКон] км в документе Маршрутный лист [СокрЛ(предДок.НомерДок)] от [предДок.ДатаДок]"), "I" );
				Возврат 0;
			КонецЕсли;
	    КонецЕсли;
	    Если ПустоеЗначение(следДок) = 0 Тогда
			Если КилометражКон > следДок.КилометражКон Тогда
				Сообщить( "Неверно указаны данные спидометра. (больше последующих показаний)", "I" );
				Сообщить( Шаблон("Последующие показания: [следДок.КилометражКон] км в документе Маршрутный лист [СокрЛ(следДок.НомерДок)] от [следДок.ДатаДок]"), "I" );
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ПустоеЗначение(предДок) = 0 Тогда
			КилометражНач = предДок.КилометражКон;
			//Попытка Записать();
			//Исключение Сообщить( Шаблон("Не удалось записать нач. значение спидометра. Ошибка:[ОписаниеОшибки()]"), "!" );
			//КонецПопытки;
		КонецЕсли;
		Если ПустоеЗначение(следДок) = 0 Тогда
			док = СоздатьОбъект( "Документ.МаршрутныйЛист" );
			док.НайтиДокумент(следДок);
			док.КилометражНач = КилометражКон;
			Попытка док.Записать();
			Исключение 
				Сообщить( Шаблон("Не удалось записать кон. значение спидометра."), "!" );
				Сообщить( ОписаниеОшибки(), "I" );
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	Возврат 1;
КонецФункции

Функция УстановкаККМ()
	Успешно = 1;
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл Состояние( Шаблон("Проведение... ([НомерСтроки] из [КоличествоСтрок()])") );
		Если Накладная.Вид() = "РасходнаяНакладнаяНал" Тогда
			// для наловых документов принудительно записываем ККМ из Маршрутного листа
			Если Накладная.ККМ <> ККМ Тогда
				докНакл = СоздатьОбъект("Документ.РасходнаяНакладнаяНал");
				Если докНакл.НайтиДокумент( Накладная ) = 1 Тогда
				    докНакл.ККМ = ККМ;
					Попытка ОбъектЗаписать(докНакл,);
					Исключение 
						Сообщить( Шаблон("Не удалось записать кассы в документ Расходная за нал. [СокрЛ(докНакл.НомерДок)] от [докНакл.ДатаДок]."), "!" );
						Успешно = 0;
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Успешно;
КонецФункции

Процедура ПриВыбореСчета( пРежим )
	РежимВвода = пРежим;
	Ошибка = 0;
	Если Счет.Выбран() = 0 Тогда Возврат; КонецЕсли;
	Если Счет.ПометкаУдаления() = 1 Тогда 
		Накладная = ""; Клиент = ""; Адрес = ""; Сумма = ""; Вес = "";
		Возврат; 
	КонецЕсли;
	Клиент = Счет.Клиент;
	Если Клиент.Выбран() = 0 Тогда Ошибка = 2; Возврат; КонецЕсли;
	Адрес = Клиент.АдресДоставки;
	
	КлиентДоставки = ?(ПустоеЗначение(Счет.КлиентФилиала)=1,Клиент,Счет.КлиентФилиала);
	КлиентДоставкиАдрес = КлиентДоставки.АдресДоставки;
	
	Если ПустоеЗначение(Счет.МаршрутДоставкиГрафик)=0 Тогда
		МаршрутДоставкиГрафик = Счет.МаршрутДоставкиГрафик;
	КонецЕсли;

	
	//Если Адрес.Выбран() = 0 Тогда Ошибка = 2; Возврат; КонецЕсли;
	док = СоздатьОбъект( "Документ" );
	Если док.ВыбратьПодчиненныеДокументы(,, Счет ) = 1 Тогда
		Пока док.ПолучитьДокумент() = 1 Цикл
			Если док.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;
			Если ( док.Вид() = "РасходнаяНакладная" )
			или ( док.Вид() = "РасходнаяНакладнаяНал" )
			или ( док.Вид() = "РасходнаяРеализатора" )
			или ( док.Вид() = "Перемещение" )
			или ( док.Вид() = "СнятиеРезерва" )
			или ( док.Вид() = "ПеремещениеДепартамент" ) Тогда
				Накладная = док.ТекущийДокумент();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СуммаНакл = 0;
	Если Накладная.Выбран() = 0 Тогда СостСчета = 2; Возврат; КонецЕсли;
	Если Накладная.Вид() = "РасходнаяНакладнаяНал" Тогда
		СуммаНал  =	Накладная.Итог( "Всего" );
		СуммаНакл = Накладная.Итог( "Всего" );
		Если СуммаНакл = 0 Тогда Ошибка = 1; Возврат; КонецЕсли;
	КонецЕсли;

	Если Накладная.Вид() = "СнятиеРезерва" Тогда
		Возврат;
	КонецЕсли;

	
	Накладная.ВыбратьСтроки(); 
	ВесНакл = 0;
	ВесВозвр = 0;
	ВесНаклБрутто = 0; 
	ВесБруттоВозвр = 0;
	Пока Накладная.ПолучитьСтроку() = 1 Цикл
		
		Если (Накладная.Вид() = "РасходнаяНакладная") ИЛИ (Накладная.Вид() = "РасходнаяРеализатора") Тогда
			Если Накладная.Счет <> Счет Тогда Продолжить; КонецЕсли;
		КонецЕсли;
		
		
		Если Накладная.Товар.Выбран() = 0 Тогда Продолжить; КонецЕсли;
		ВесТов = Накладная.Товар.Вес * Накладная.Количество * Накладная.Коэффициент;
		// АННА
		//ВесНаклБрутто 	= ВесНаклБрутто + (Накладная.Товар.Вес + Накладная.Товар.ЛогистикаВесБруттоУпаковки) * Накладная.Количество * Накладная.Коэффициент;
		Если (Накладная.Вид() = "ПриходнаяНакладная")  Тогда
			ВесБруттоВозвр = ВесБруттоВозвр + ВесУпаковкиИнфо(Накладная.Товар) * Накладная.Количество * Накладная.Коэффициент;
			ВесВозвр 		= ВесВозвр + ВесТов;
		Иначе
			ВесНаклБрутто 	= ВесНаклБрутто + ВесТов + ВесУпаковкиИнфо(Накладная.Товар) * Накладная.Количество * Накладная.Коэффициент;
			ВесНакл 		= ВесНакл + ВесТов;
		КонецЕсли;

		Если Накладная.Вид() = "РасходнаяНакладная" Тогда
			СуммаНакл = СуммаНакл + Накладная.Сумма*Накладная.Курс;
		КонецЕсли;
		
		
	КонецЦикла;
	Вес 				= Окр( ВесНакл, 3, 1 );
	ВесВозврата			= Окр( ВесВозвр, 3, 1 );
	ВесБрутто 			= Окр( ВесНаклБрутто, 3, 1 );
	ВесБруттоВозврата 	= Окр( ВесБруттоВозвр, 3, 1 );
	Сумма				= СуммаНакл;	
	Если Вес = 0 Тогда Ошибка = 1; Возврат; КонецЕсли;
КонецПроцедуры

Процедура Обновить()
	ВыбратьСтроки();
	
	сзНаклНал = СоздатьОбъект("СписокЗначений");
	
	Пока ПолучитьСтроку() = 1 Цикл Состояние( Шаблон( "Обработано [НомерСтроки] из [КоличествоСтрок()]" ) );
		ПриВыбореСчета( РежимВвода );
		Если Накладная.Вид()="РасходнаяНакладнаяНал" Тогда
			Если сзНаклНал.НайтиЗначение(Накладная)=0 Тогда
				сзНаклНал.ДобавитьЗначение(Накладная);
			Иначе
				//уже был
				Вес = 0;
				ВесБрутто = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//Процедура УдалитьПустыеСтроки()
//	табл = СоздатьОбъект( "ТаблицаЗначений" );
//	ВыгрузитьТабличнуюЧасть(табл);
//	табл.ВыбратьСтроки();
//	табл.НоваяКолонка("Уд","Число",1,0);
//	Пока табл.ПолучитьСтроку() = 1 Цикл
//		Если табл.Счет.Выбран() = 0 Тогда табл.Уд = 1; КонецЕсли; 
//	КонецЦикла;
//	табл.Сортировать("-Уд");
//	табл.ВыбратьСтроки();
//	табл.ПолучитьСтроку();
//	Пока табл.Уд = 1 Цикл табл.УдалитьСтроку(); КонецЦикла;
//	ЗагрузитьТабличнуюЧасть(табл);
//КонецПроцедуры

Процедура ОбработкаПроведения(пИзДокумента=0)
	Если Машина.Выбран() = 1 Тогда
		//устанавливает пробег в любом случае, если указана машина
		УстановитьРеквизитСправочника( Машина, "Пробег", КилометражКон );
		//устанавливаем правильные значения километража в тек. и в сдедующем документах
		
		Если ГрупповаяОбработка()=0 Тогда
			ПроверкаСпидометра(1);
		КонецЕсли;
	КонецЕсли;

	Если (ДатаНачалаРаботы>ДатаКонцаРаботы) Тогда
		НеПроводить(Контекст,"Дата начала работы не может быть больше чем дата конца!");
	КонецЕсли;

	
	Если (ГрупповаяОбработка()=0) И (ПустоеЗначение(ДатаКонцаРаботы)=1) Тогда
		//НеПроводить(Контекст,"Не указана дата конца работы экспедитора!");
		Сообщить("Не указана дата конца работы экспедитора!","!!!");
	КонецЕсли;

	Если (ПустоеЗначение(ТранспортВремя)=1) Тогда
		Сообщить("Не задано время работы экспедитора!");
//		НеПроводить(Контекст,"Не задано время работы экспедитора!");
	КонецЕсли;
	
	Если ПустоеЗначение(МЛДокОсн)=1 Тогда
		МЛДокОсн=ТекущийДокумент();
	КонецЕсли;

	//обновление данных по каждой строке
	Если ГрупповаяОбработка()=0 Тогда
		Обновить();

		
		//УдалитьПустыеСтроки();
		//записываем кол-во мест доставки в реквизит (для аналитики)
		табл = СоздатьОбъект( "ТаблицаЗначений" );
		ВыгрузитьТабличнуюЧасть( табл, "Клиент" );
		табл.Свернуть( "Клиент", "" );
		КолвоМестДоставки = табл.КоличествоСтрок();
		Если пИзДокумента = 1 Тогда
			Если Экспедитор.Выбран() = 0 Тогда
				Сообщить( "Не выбран экспедитор.", "I" );
				Сообщить( Шаблон("Документ Маршрутный лист [СокрЛ(НомерДок)] от [ДатаДок] не проведен."), "!!!" );
				СтатусВозврата( 0 ); 
				Возврат;
			КонецЕсли;
			Если ПроверкаНакладных() = 0 Тогда
				СтатусВозврата( 0 );
				Сообщить( Шаблон("Документ Маршрутный лист [СокрЛ(НомерДок)] от [ДатаДок] не проведен."), "!!!" );
				Возврат;
			КонецЕсли;
			Если УстановкаККМ() = 0 Тогда
				СтатусВозврата( 0 );
				Сообщить( Шаблон("Документ Маршрутный лист [СокрЛ(НомерДок)] от [ДатаДок] не проведен."), "!!!" );
				Возврат;
			КонецЕсли;
			Если Машина.Выбран() = 1 Тогда
				Если КилометражКон = 0 Тогда
					Сообщить( "Не указаны данные спидометра.", "I" );
					Сообщить( Шаблон("Документ Маршрутный лист [СокрЛ(НомерДок)] от [ДатаДок] не проведен."), "!!!" );
					СтатусВозврата( 0 ); 
					Возврат;
				Иначе
					Если ПроверкаСпидометра() = 0 Тогда
						Сообщить( Шаблон("Документ Маршрутный лист [СокрЛ(НомерДок)] от [ДатаДок] не проведен."), "!!!" );
						СтатусВозврата( 0 ); 
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеПоАлгоритмуМОД=1 Тогда
	    Возврат;
	КонецЕсли;
	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
	ПриОтменеПроведенияДокумента(ТекущийДокумент());

КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД


