//Перем Шрифт;
Перем Сканер Экспорт;

Процедура Обновить() Далее

Процедура ОпределитьГлавныйМаршрут() Далее 

Процедура РасчетЧасов()
	ДнейРазницы 	= ДатаКонцаРаботы - ДатаНачалаРаботы;
	ДнейРазницы2 	= ДатаКонцаРаботы - ДатаНачалаРаботы;
	
	ВремяКонцаРаботыСек = глПолучитьВремяСек(ВремяКонцаРаботы)+глПолучитьВремяСек(24*ДнейРазницы);
	ВремяНачалаРаботыСек = глПолучитьВремяСек(ВремяНачалаРаботы);
	ТранспортВремяСек 	= ВремяКонцаРаботыСек - ВремяНачалаРаботыСек;

	ТранспортВремяСек2=0;
	Если ПустоеЗначение(ДатаКонцаРаботы2)=0 Тогда
		ВремяКонцаРаботыСек2 = глПолучитьВремяСек(ВремяКонцаРаботы2)+глПолучитьВремяСек(24*ДнейРазницы2);
		ВремяНачалаРаботыСек2 = глПолучитьВремяСек(ВремяНачалаРаботы2);
		ТранспортВремяСек2 	= ВремяКонцаРаботыСек2 - ВремяНачалаРаботыСек2;
	КонецЕсли;

	ТранспортВремяСек = ТранспортВремяСек+ТранспортВремяСек2;
	ТранспортВремя 		= глПолучитьВремя(ТранспортВремяСек,0);
	
КонецПроцедуры

Процедура ЗаполнитьВремя()
	
	Если  Выбран()=1 Тогда

		ТекстЗапроса = "SELECT StartTime [StartTime $Дата]
		|				      ,EndTime [EndTime $Дата]
		|					  , DATEPART(hh,StartTime) StartHour 
		|					  , DATEPART(mi,StartTime) StartMin
		|					  , DATEPART(hh,EndTime) EndHour
		|					  , DATEPART(mi,EndTime) EndMin
		|					  ,DATEDIFF(ss,[StartTime],[EndTime]) TimeSec
		|			   FROM [FOOD_WWW].[dbo].[RoutingTableFact]
		|			   WHERE IDDOC = :ТекДок 
		|";
		
		Запрос = СоздатьОбъект("ODBCRecordSet");

		Запрос.УстановитьТекстовыйПараметр("ТекДок",ТекущийДокумент());
		
		табл = Запрос.ВыполнитьИнструкцию(ТекстЗапроса);

		//табл.ВыбратьСтроку();
		
		Если табл.КоличествоСтрок()=1 Тогда
			табл.ПолучитьСтрокуПоНомеру(1);
			
			Если ПустоеЗначение(табл.EndTime )=1 Тогда
				ДатаНачалаРаботы 	= табл.StartTime;
				ДатаКонцаРаботы 		= "";
				ДатаНачалаРаботы2 	= "";
				ДатаКонцаРаботы2 	= "";
				ВремяНачалаРаботы 	= табл.StartHour+табл.StartMin/100;
				ВремяКонцаРаботы 	= 0;
				ВремяНачалаРаботы2 	= 0;
				ВремяКонцаРаботы2	= 0; 
				
			ИначеЕсли табл.StartTime<>табл.EndTime Тогда
				ДатаНачалаРаботы 	= табл.StartTime;
				ДатаКонцаРаботы 		= табл.StartTime;
				ДатаНачалаРаботы2 	= табл.EndTime;
				ДатаКонцаРаботы2 	= табл.EndTime;
				ВремяНачалаРаботы 	= табл.StartHour+табл.StartMin/100;
				ВремяКонцаРаботы 	= "23.59";
				ВремяНачалаРаботы2 	= "0.00";
				ВремяКонцаРаботы2	= табл.EndHour+табл.EndMin/100; 
		
			Иначе
				ДатаНачалаРаботы 	= табл.StartTime;
				ДатаКонцаРаботы 		= табл.EndTime;
				ДатаНачалаРаботы2	= 0;
				ДатаКонцаРаботы2	= 0;
				ВремяНачалаРаботы 	= табл.StartHour+табл.StartMin/100;
				ВремяКонцаРаботы	= табл.EndHour+табл.EndMin/100; 
				ВремяНачалаРаботы2 	= "";
				ВремяКонцаРаботы2	= "";
			КонецЕсли;

			РасчетЧасов();
		ИначеЕсли   табл.КоличествоСтрок()>1 Тогда
				табл.ВыбратьСтроки();
				Пока табл.ПолучитьСтроку() = 1 Цикл
					номер=?(табл.НомерСтроки=2,"2","");
					УстановитьАтрибут("ДатаНачалаРаботы"+номер,табл.StartTime);
					УстановитьАтрибут("ДатаКонцаРаботы"+номер,табл.EndTime);
					УстановитьАтрибут("ВремяНачалаРаботы"+номер,табл.StartHour+табл.StartMin/100);
					УстановитьАтрибут("ВремяКонцаРаботы"+номер,табл.EndHour+табл.EndHour/100);
				КонецЦикла;		
				РасчетЧасов();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Начало текста, вставленного Инсталлятором МОД

//======================================================================
Функция НайтиСвязкуДокумента(п_док,п_ВидСвязки)
	
	л_ИТ=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос=СоздатьОбъект("ODBCRecordSet");
	
		ТекстЗапроса="	SELECT DISTINCT СвязкаДокументов.ID [Ссылка $Справочник.СвязкаДокументов]
		|FROM $Справочник.СвязкаДокументов AS СвязкаДокументов
		|WHERE ($СвязкаДокументов.Док = $ВидДокумента36.Счет + :пДок)
		|	AND ($СвязкаДокументов.ВидСвязки = :пВидСвязки)
		|	AND (СвязкаДокументов.ISMARK = 0)
		|";	
				
		Запрос.УстановитьТекстовыйПараметр("пДок",п_док);
		Запрос.УстановитьТекстовыйПараметр("пВидСвязки",п_ВидСвязки);
		Запрос.ВыполнитьИнструкцию(ТекстЗапроса,л_ИТ);
	
		Если л_ИТ.КоличествоСтрок()=0 Тогда
			Возврат ПолучитьПустоеЗначение();
		КонецЕсли;	
		
	л_ИТ.ВыбратьСтроки();
	л_ИТ.ПолучитьСтроку();
	Возврат л_ИТ.Ссылка;		
КонецФункции // НайтиСвязкуДокумента

Процедура ПриЗаписи()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	//Сервис.УдалитьШрифт(Шрифт);
	Всего = Топливо1+Топливо2+Топливо3;
	Если Всего > 0 Тогда
		Топливо = Всего;
	КонецЕсли;
	
	ОпределитьГлавныйМаршрут();

	сзНаклНал = СоздатьОбъект("СписокЗначений");
	ВыбратьСтроки();	
	Пока ПолучитьСтроку()=1 Цикл
		СуммаНал=0;
		
		Если Накладная.Вид()= "РасходнаяНакладнаяНал" Тогда
			Если сзНаклНал.НайтиЗначение(Накладная)=0 Тогда
				сзНаклНал.ДобавитьЗначение(Накладная);
				СуммаНал = Сумма;
			Иначе
				//уже был
				Вес = 0;
				ВесБрутто = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//Записать время начала и конца
	Если флВремяРаботыКорр=0 Тогда
		ЗаполнитьВремя();
	КонецЕсли;
	ТранспортВремяСек=глПолучитьВремяСек(ТранспортВремя);
	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
	//Если семМожноЗаписать( Контекст ) = 0 Тогда Возврат; КонецЕсли;
	Если ГотовКПечатиЗаявок=1 Тогда
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			л_СостояниеЗаявки=глПолучитьСостояниеЗаявки(Счет,0);
			Если л_СостояниеЗаявки.Наименование="Ожидает компл." Тогда
				спрСвязки=СоздатьОбъект("Справочник.СвязкаДокументов");
				л_спр=НайтиСвязкуДокумента(Счет,Перечисление.ВидыСвязки.МаршрутныйЛист);
//				конт=ВзятьКонтекст(Контекст); 
				конт=ВзятьКонтекст(ТекущийДокумент());
				Если ПустоеЗначение(л_спр)=0 Тогда
					спрСвязки.НайтиЭлемент(л_спр);
					спрСвязки.НазначитьТип("Связка","Документ.МаршрутныйЛист",);
					спрСвязки.Связка= конт;
					спрСвязки.Записать();
				Иначе
					спрСвязки.Новый();
					спрСвязки.Наименование = Счет.НомерДок;
					спрСвязки.Док = Счет;
					спрСвязки.ВидСвязки = Перечисление.ВидыСвязки.МаршрутныйЛист;
					спрСвязки.НазначитьТип("Связка","Документ.МаршрутныйЛист",);
					спрСвязки.Связка = конт;
					спрСвязки.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД

Функция семПечатьШтрихКода(OLE)
	Попытка OLE.text = Прав(IDD,12);
	Исключение Сообщить("Не найден OLE объект.","!");
	КонецПопытки;
КонецФункции


Процедура СуммироватьТопливо()
	Топливо = Топливо1+Топливо2+Топливо3;
КонецПроцедуры

//Процедура ПодключитьСканер()
//	Если ФС.СуществуетФайл(КаталогПрограммы()+"\ScanOPOS.dll") = 1 Тогда
//		Попытка
//			Сканер = СоздатьОбъект("AddIn.Scanner");
//			Если Сканер.Подсоединить("Scanner") = 0 Тогда
//				Сканер.ИмяСобытия = "Read";
//				Сканер.Порт = 3;
//				Сканер.УстройствоВключено = 1;
//				Сканер.Занять(1);
//				Сканер.ОчиститьВход();
//				Сканер.ОчиститьВыход();
//				Сканер.ПосылкаДанных = 1;
//			КонецЕсли;
//		Исключение
//			Сообщить("Ошибка подключения сканека!");
//		КонецПопытки;
//	КонецЕсли;
//КонецПроцедуры

Функция семПолучитьЦвет(Красный = 0,Зеленый = 0,Синий = 0) Экспорт
	Возврат Макс(0,Синий)*65536 + Макс(0,Зеленый)*256 + Макс(0,Красный);
КонецФункции

Функция СвойстваСтроки()
	//Если НомСтроки = 0 Тогда
		//Возврат "BRUSH["+ семПолучитьЦвет(192,192,192)+"] COUNT[2]";
		//Возврат "FONTSET["+Шрифт+"] COUNT[2]";
		//Возврат "FONTSET["+Шрифт+"]";
	//КонецЕсли;
КонецФункции

Процедура ПриВыбореЭкспедитора()
	Если Экспедитор.Выбран() = 0 Тогда Возврат; КонецЕсли;
	//Если ККМ.Выбран() = 0 Тогда ККМ = Экспедитор.Касса; КонецЕсли;
	//ККМ = Экспедитор.Касса;
КонецПроцедуры

Процедура ПриВыбореМашины()
	Если Машина.Выбран() = 0 Тогда Возврат; КонецЕсли;
	Если Экспедитор.Выбран() = 0 Тогда Экспедитор = Машина.Шофер1; КонецЕсли;
	КилометражНач = Машина.Пробег.Получить( ?( Выбран() = 1, ТекущийДокумент(), ДатаДок ) );
	ПриВыбореЭкспедитора();
КонецПроцедуры

Функция АдресСтрокой( пАдрес, начУр, конУр, пРазд )
	сп = СоздатьОбъект( "СписокЗначений" );
	сп.ДобавитьЗначение( "пАдрес.Родитель.Родитель.Родитель", "1" );
	сп.ДобавитьЗначение( "пАдрес.Родитель.Родитель" , "2" );
	сп.ДобавитьЗначение( "пАдрес.Родитель" , "3" );
	сп.ДобавитьЗначение( "пАдрес" , "4" );
	текУр = пАдрес.Уровень();
	начУр = ?( начУр > текУр, текУр, начУр );
	конУр = ?( конУр > текУр, текУр, конУр );
	стр = "";
	Для н = начУр по конУр Цикл
		стр = стр + "[" + сп.ПолучитьЗначение( н+4-текУр ) + "]" + ?( н = конУр, "", пРазд );
	КонецЦикла;
	Возврат Шаблон( стр );
КонецФункции

Функция ПодготовкаПечати( док, пСорт )
	сп = СоздатьОбъект( "СписокЗначений" );
	табл = СоздатьОбъект( "ТаблицаЗначений" );
	табл.НоваяКолонка( "НомСтр" );
	табл.НоваяКолонка( "Категория" );
	табл.НоваяКолонка( "Клиент" );
	табл.НоваяКолонка( "Адрес" );
	табл.НоваяКолонка( "ИнфДляДоставки" );
	табл.НоваяКолонка( "НомерСчета" );
	табл.НоваяКолонка( "Счет" );
	табл.НоваяКолонка( "НомерНакл" );
	табл.НоваяКолонка( "Сумма" );
	табл.НоваяКолонка( "СуммаНал" );
	табл.НоваяКолонка( "Вес" );
	табл.НоваяКолонка( "ВесНетто" );
	табл.НоваяКолонка( "ВесБрутто" );
	табл.НоваяКолонка( "Группа" );
	табл.НоваяКолонка( "ВремяДост" );
	// шапка
	сп.Установить( "ДатаДок", док.ДатаДок );
	сп.Установить( "Заголовок", "Маршрутный лист - " + СокрЛП( док.НомерДок ) );
	сп.Установить( "Машина", ?( док.Машина.Выбран() = 1, док.Машина.Наименование, "" ) );
	сп.Установить( "Экспедитор", ?( док.Экспедитор.Выбран() = 1, док.Экспедитор.Наименование, "" ) );
	сп.Установить( "Экспедитор2", ?( док.Экспедитор2.Выбран() = 1, док.Экспедитор2.Наименование, "" ) );
	сп.Установить( "КилометражНач", Шаблон( "[док.КилометражНач #Ч10.0] км" ) );
	сп.Установить( "КилометражКон", Шаблон( "[док.КилометражКон #Ч10.0] км" ) );
	сп.Установить( "ВремяНачала",глПолучитьВремя(глПолучитьВремяСек(Док.ВремяНачалаРаботы),1,1));
	сп.Установить( "ВремяКонца",глПолучитьВремя(глПолучитьВремяСек(Док.ВремяКонцаРаботы),1,1));
	сп.Установить( "ТранспортВремя",глПолучитьВремя(Док.ТранспортВремяСек,1,1));
	сп.Установить( "Комментарий", док.Комментарий );
	сп.Установить( "Автор", док.Автор );
	сп.Установить( "АдресДоставки", ""+док.АдресДоставки+?(ПустоеЗначение(док.АдресДоставкиФилиал)=0,"/"+док.АдресДоставкиФилиал,""));

	сзНаклНал = СоздатьОбъект("СписокЗначений");
	
	// табличная часть документа
	док.ВыбратьСтроки();
	Пока док.ПолучитьСтроку() = 1 Цикл
		табл.НоваяСтрока();
		табл.НомСтр = док.НомерСтроки;
		табл.Категория = ?(док.Счет.Выбран() = 1, ?(ПустоеЗначение(док.Счет.Склад.НаимСокр)=1,док.Счет.Склад.Код,док.Счет.Склад.НаимСокр),"?");
		табл.Клиент = Шаблон( "[док.Клиент.ПолноеНаименование] ([док.Клиент.Код])" );
		табл.Адрес = АдресСтрокой( док.Адрес, 4, 4, " " ) +" "+ док.Счет.АдресДоставкиДоп;
		табл.ИнфДляДоставки = СокрЛП(док.Клиент.ИнформацияДляДоставки);
		табл.НомерСчета = док.Счет.НомерДок;
		табл.Счет	 = док.Счет;
		табл.НомерНакл = док.Накладная.НомерДок;
		Если Док.Накладная.Вид()= "РасходнаяНакладнаяНал" Тогда
			Если сзНаклНал.НайтиЗначение(Док.Накладная)=0 Тогда
				сзНаклНал.ДобавитьЗначение(Док.Накладная);
				табл.СуммаНал = док.Сумма;
			КонецЕсли;
			табл.Сумма = ?( док.Сумма = 0, "", Шаблон( "[док.Сумма #Ч15.2, ] [Док.Накладная.Валюта]" ) );
		Иначе
			табл.Сумма = "";
		КонецЕсли;
		табл.Вес = СокрЛ( Шаблон( "[док.Вес] / [док.ВесБрутто] кг" ) );
		табл.ВесНетто = док.Вес;
		табл.ВесБрутто = док.ВесБрутто;
		табл.Группа = АдресСтрокой( док.Клиент.АдресДоставки, 1, 3, ", " );
		табл.ВремяДост = док.Клиент.ВремяДоставки.Получить(ДатаДок);
	КонецЦикла;
	Если пСорт = "для экспедитора" Тогда
		табл.Сортировать( "Группа, Адрес, НомерНакл" );
	ИначеЕсли пСорт = "для оператора" Тогда
		табл.Сортировать( "НомерНакл" );
	КонецЕсли;
	сп.Установить( "Таблица", табл );
	сп.Установить( "ИтогСумма", СокрЛ( Формат( док.Итог( "СуммаНал" ), "Ч15.2, " ) ) );
	сп.Установить( "ИтогКолДок", СокрЛ( Формат( док.КоличествоСтрок(), "Ч10.0" ) ) );
	промТабл = СоздатьОбъект( "ТаблицаЗначений" );
	док.ВыгрузитьТабличнуюЧасть( промТабл, "Клиент" );
	промТабл.Свернуть( "Клиент", "" );
	сп.Установить( "ИтогМестДост", СокрЛ( Формат( промТабл.КоличествоСтрок(), "Ч10.0" ) ) );
	сп.Установить( "ИтогВес", СокрЛ( Формат( док.Итог( "Вес" ), "Ч15.3, " ) ) );
	сп.Установить( "ИтогВесБрутто", СокрЛ( Формат( док.Итог( "ВесБрутто" ), "Ч15.3, " ) ) );
	Возврат сп;
КонецФункции

Процедура Печать(выб="",выб2="",ПечАвто="")

		
	сп = ПодготовкаПечати( контекст, выб );
	таб = СоздатьОбъект( "Таблица" );
	таб.ИсходнаяТаблица( "Таблица" );
	Если ПустоеЗначение( сп.Получить( "Комментарий" ) ) = 0 Тогда
		таб.ВывестиСекцию( "Комментарий" );
	КонецЕсли;
	НачШапки = таб.ВысотаТаблицы();
	таб.ВывестиСекцию( "Шапка" );
	таб.ВывестиСекцию( "ШапкаТаблицы" );
	таб.ПовторятьПриПечатиСтроки( НачШапки+1, таб.ВысотаТаблицы() );
	табл = сп.Получить( "Таблица" );
	табл.ВыбратьСтроки();
	текГруппа = "";
	ВесИтого = 0; 
	ВесБруттоИтого = 0;
	СуммаНалИтого = 0;
	КолВоСтрок = 0;
	
	промТабл = СоздатьОбъект("ТаблицаЗначений");
	промТабл.НоваяКолонка("Клиент");

	Пока табл.ПолучитьСтроку() = 1 Цикл
		
		Если текГруппа <> табл.Группа Тогда
			таб.ВывестиСекцию( "Группа" );
			текГруппа = табл.Группа;
		КонецЕсли;
		
		Если (ПустоеЗначение(выб2)=0) И (выб2<>табл.Счет.Склад.МестоКомплектации) Тогда
			Продолжить;
		КонецЕсли;

		промТабл.НоваяСтрока();
		промТабл.Клиент = табл.Клиент;		
		КолВоСтрок=КолВоСтрок+1;
		ВесИтого=ВесИтого+табл.ВесНетто;
		ВесБруттоИтого=ВесБруттоИтого+табл.ВесБрутто;

		СуммаНалИтого=СуммаНалИтого+табл.СуммаНал;

		ПечНал = табл.СуммаНал;
		ПечНал =?(табл.Счет.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаНаВозврат,"atgrieєana",ПечНал);
		ПечНал =?(табл.Счет.ВидОплаты=4,"preҐu apmaiґa",ПечНал);
		пНомерСчета = табл.НомерСчета;
//		пНомерСчета=Шаблон("[табл.НомерСчета]"+?(табл.Счет.ВидОплаты=4," preҐu apmaiґa",""));
		
		
		таб.ВывестиСекцию( "Строка" );
	КонецЦикла;

	промТабл.Свернуть( "Клиент", "" );

	сп.Установить( "ИтогВес", СокрЛ( Формат( ВесИтого, "Ч15.3, " ) ) );
	сп.Установить( "ИтогВесБрутто", СокрЛ( Формат( ВесБруттоИтого, "Ч15.3, " ) ) );
	
	сп.Установить( "ИтогСумма", СокрЛ( Формат( СуммаНалИтого, "Ч15.2, " ) ) );
	сп.Установить( "ИтогКолДок", СокрЛ( Формат( КолВоСтрок, "Ч10.0" ) ) );
	сп.Установить( "ИтогМестДост", СокрЛ( Формат( промТабл.КоличествоСтрок(), "Ч10.0" ) ) );
	
	
	таб.ВывестиСекцию( "Итог" );
	
	Если ПустоеЗначение(ПечАвто)=0 Тогда
		таб.ПараметрыСтраницы(,,,,,,,,,,,ПечАвто);
		таб.Напечатать(0);
	Иначе
		таб.ТолькоПросмотр( 1 );   
		//таб.ПараметрыСтраницы( 1,,,10,10,10,20,10,20,1,, );
		таб.Показать( Строка(выб2) );
	КонецЕсли;

	Если выбКлиент.Выбран()=1 Тогда
		Если выбКлиент.ФорматОбмена=Перечисление.ФорматыОбмена.TELEMA Тогда
			Путь = КаталогИБ() + "ExtForms\Печать\DESADV.ert";
			Если ФС.СуществуетФайл( Путь ) = 0 Тогда Возврат; КонецЕсли;
			спПарам = СоздатьОбъект( "СписокЗначений" );
			спПарам.Установить( "Документ", контекст );
			ОткрытьФорму("Обработка", спПарам, Путь);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПодготовкаПечатиМЛ()

	выб = ""; 
	спВыб = СоздатьОбъект( "СписокЗначений" );
	спВыб.ДобавитьЗначение( "для экспедитора" );
	спВыб.ДобавитьЗначение( "для оператора" );
	Если спВыб.ВыбратьЗначение( выб,,,, 1 ) <> 1 Тогда Возврат; КонецЕсли;
	
	выб2 = ""; 
	
	спМестаКомпл = СоздатьОбъект( "СписокЗначений" );
	спМестаКомпл.ДобавитьЗначение("","ВСЕ");
	спМестаКомпл.ДобавитьЗначение(2,"ВСЕ по раздельности (авто)");
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		МестоКомпл = Счет.Склад.МестоКомплектации;
		Если (ПустоеЗначение(МестоКомпл)=0) И (спМестаКомпл.НайтиЗначение(МестоКомпл)=0) Тогда
			спМестаКомпл.ДобавитьЗначение(МестоКомпл);
		КонецЕсли;		
	КонецЦикла;	
	
	Если спМестаКомпл.ВыбратьЗначение( выб2,,,, 1 ) <> 1 Тогда Возврат; КонецЕсли;

	Если выб2 = 2 Тогда
		
		FormEx = СоздатьОбъект("Сервис");
		//Иначе
		//	FormEx = СоздатьОбъект("СервисРасшФормы");
		//КонецЕсли;
		сп = FormEx.ПолучитьСписокПринтеров();
		выбПринтер = ВосстановитьЗначение("ПринтерПечатиНакладных");
		Если сп.ВыбратьЗначение(выбПринтер,"Выберите принтер",,60,0) = 0 Тогда Возврат; КонецЕсли;
		
		//печатаем по местам комплектаций
		Для н = 1 По спМестаКомпл.РазмерСписка() Цикл
			выб2 = спМестаКомпл.ПолучитьЗначение(н);
			Если ТипЗначенияСтр(выб2)<>"Справочник" Тогда
				Продолжить;
			КонецЕсли;
			
			Печать(выб,выб2,выбПринтер);
		КонецЦикла;		
	Иначе
		Печать(выб,выб2);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПечатьЦМР()
	Путь = КаталогИБ() + "ExtForms\Печать\CMR.ert";
	Если ФС.СуществуетФайл( Путь ) = 0 Тогда Возврат; КонецЕсли;
	спПарам = СоздатьОбъект( "СписокЗначений" );
	спПарам.Установить( "Документ", контекст );
	ОткрытьФорму( "Обработка", спПарам, Путь );
КонецПроцедуры

Функция СозданиеРасходныхНакладных()

	начЛогМЛ = семЗаписатьЛогНач( "Документ", "МаршрутныйЛист", "Документ", "Создание расходных накладных",ТекущийДокумент() );
	
	//проверяем на возможность выписки накладных на основании эл. заявок
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Если Счет.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаНаВозврат Тогда
			Продолжить;
		КонецЕсли;
		Если (Счет.ВидОплаты > 4)  Тогда
			//на обмен или другие виды оплат 
			Продолжить;
		КонецЕсли;
		
		СостояниеЗаявки=глПолучитьСостояниеЗаявки(Счет);
		Если ((СостояниеЗаявки="Ожидает отгрузки") ИЛИ (СостояниеЗаявки="Отгружена")) ИЛИ (ПустоеЗначение(Накладная)=0) Тогда
			Если Счет.ВидОплаты =  1 Тогда // только за наличные
				Сообщить("Клиенту по заявке <"+Счет+"> в строке <"+НомерСтроки+"> запрещен отпуск товара в кредит!" );
			КонецЕсли;
		Иначе
			Сообщить("Невозможно создать накладную по Эл. заявке в строке "+НомерСтроки+",т.к. она находится в состоянии <"+СостояниеЗаявки+">!");
			Возврат 0;
		КонецЕсли;
	КонецЦикла;


	
	//{Создание расходных накладных по кредиту и отв. хранению
	
	Запрос=СоздатьОбъект("ODBCRecordSet");
	ТекстЗапроса="SELECT РезервыТоваровОстатки.ПоСчету [ПоСчету $Документ.Счет]
	|					, LEFT(Журнал.DOCNO,CASE WHEN CHARINDEX('_',Журнал.DOCNO)>0 THEN CHARINDEX('_',Журнал.DOCNO)-1 ELSE LEN(Журнал.DOCNO) END ) НомерЗаявки
	|					, РезервыТоваровОстатки.РезервТовараОстаток Резерв
	|					, $Счет.Клиент [Клиент $Справочник.Контрагенты]
	|					, CASE WHEN $Счет.ВидОплаты = 2 /* Отв. хранение */ THEN 1 ELSE $Контрагенты.НеОбъединятьНакладные END НеОбъединять
	|					, $Счет.Склад [Склад $Справочник.МестаХранения]
	|					, $МестаХранения.СкладОтвХранения СкладОтвХранения
	|					, $МестаХранения.НомерГруппы НомерГруппы
	|			  FROM $РегистрОстатки.РезервыТоваров(,
	|	  		  									INNER JOIN $ДокументСтроки.МаршрутныйЛист AS ДокМЛ ON ПоСчету = $ДокМЛ.Счет AND ДокМЛ.IDDOC = :ВыбМаршЛист AND $ДокМЛ.Накладная = $ПустойИД13,
	|												,ПоСчету,) AS РезервыТоваровОстатки
	|			  INNER JOIN $Документ.Счет AS Счет (NOLOCK) ON РезервыТоваровОстатки.ПоСчету = Счет.IDDOC
	|			  INNER JOIN _1SJOURN AS Журнал With (NOLOCK) ON Журнал.IDDOC = Счет.IDDOC AND Журнал.IDDOCDEF = $ВидДокумента.Счет
	|		 	  INNER JOIN $Справочник.МестаХранения AS МестаХранения (NOLOCK) ON $Счет.Склад = МестаХранения.ID
	|			  INNER JOIN $Справочник.Контрагенты AS Контрагенты (NOLOCK) ON Контрагенты.ID = $Счет.КлГруппа
	|			  WHERE ($Счет.ВидЗаявки <> $Перечисление.ВидыЗаявок.ЗаявкаНаВозврат) AND ($Счет.ВидОплаты IN (0,2) )
	|					AND ($Счет.СкладПолучатель = $ПустойИД) 
	|";
	
	Запрос.УстановитьТекстовыйПараметр("ВыбМаршЛист",ТекущийДокумент());
	итСчета=СоздатьОбъект("ИндексированнаяТаблица");
	//Запрос.Отладка(1);
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,итСчета);
	
	Если итСчета.КоличествоСтрок()>0 Тогда
		Если Вопрос("Существуют эл. заявки без накладных - сейчас будут созданы расходные накладные. Продолжить?","Да+Нет")="Да" Тогда
			Сообщить("Начата процедура формирования расходных накладных по складам и клиентам...");
		Иначе
			Сообщить("Процедура формирования расходных накладных по складам и клиентам... ОТМЕНЕНА!","!!!");
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	//итСчета.Показать();
	итСчета.Группировать("НеОбъединять: НеОбъединять; СкладОтвХранения : СкладОтвХранения; Клиент : *Клиент; НомерГруппы : НомерГруппы; НомерЗаявки : НомерЗаявки; ПоСчету : *ПоСчету","Резерв");

	спЗаявок=СоздатьОбъект("СписокЗначений");

	итСчета.Сортировать("НеОбъединять");
	итСчета.ВыбратьСтроки();
	Пока итСчета.ПолучитьСтроку() = 1 Цикл
	
		итВидыСкладовПоСчетам=итСчета.тзПотомки;
		итВидыСкладовПоСчетам.Сортировать("-СкладОтвХранения");
		итВидыСкладовПоСчетам.ВыбратьСтроки();
		Пока итВидыСкладовПоСчетам.ПолучитьСтроку() = 1 Цикл
			Сообщить("Обрабатываем счета по виду складов: " + ?(итВидыСкладовПоСчетам.СкладОтвХранения=1,"Ответственного хранения","Склад фирмы"));

			итКлиентыСчета=итВидыСкладовПоСчетам.тзПотомки;
			итКлиентыСчета.ВыбратьСтроки();
			Пока итКлиентыСчета.ПолучитьСтроку() = 1 Цикл
				Сообщить(" - Формируем накладные по Клиенту: " + итКлиентыСчета.Клиент);
				итГруппыСкладов=итКлиентыСчета.тзПотомки;
				итГруппыСкладов.ВыбратьСтроки();
				Пока итГруппыСкладов.ПолучитьСтроку() = 1 Цикл
					Сообщить(" - Обрабатываем группы складов: " + итГруппыСкладов.НомерГруппы);
					спЗаявок.УдалитьВсе();
					итНомераЗаявок=итГруппыСкладов.тзПотомки;
					итНомераЗаявок.ВыбратьСтроки();
					Пока итНомераЗаявок.ПолучитьСтроку() = 1 Цикл
						Сообщить(" - Обрабатываем счета: " + итНомераЗаявок.НомерЗаявки);
						Если итКлиентыСчета.НеОбъединять=1 Тогда
							//в этом случае не объединяем разные счета в одну накладную - только с одним номером
							спЗаявок.УдалитьВсе();
							итЗаявки=итНомераЗаявок.тзПотомки;
							итЗаявки.ВыбратьСтроки();
							Пока итЗаявки.ПолучитьСтроку() = 1 Цикл
								спЗаявок.ДобавитьЗначение(итЗаявки.ПоСчету);
							КонецЦикла;
							ЗаписьЖурналаРегистрации(Шаблон("Создаем расходную накладную на клиента [итКлиентыСчета.Клиент] по группе складов [итГруппыСкладов.НомерГруппы]"),"Создание документов","Расходные накладные",,2);
							начЛог = семЗаписатьЛогНач( "Документ", "РасходнаяНакладная", "Документ", "Создание расходных накладных" );
							ОткрытьФормуМодально( "Документ.РасходнаяНакладная", спЗаявок );
							семЗаписатьЛогКон( начЛог );								
							
						ИначеЕсли итКлиентыСчета.НеОбъединять=0 Тогда
							итЗаявки=итНомераЗаявок.тзПотомки;
							итЗаявки.ВыбратьСтроки();
							Пока итЗаявки.ПолучитьСтроку()=1 Цикл
								спЗаявок.ДобавитьЗначение(итЗаявки.ПоСчету);
							КонецЦикла;
							//создаем накладные по складам, если номер группы = 0
							Если итГруппыСкладов.НомерГруппы=0 Тогда
								ЗаписьЖурналаРегистрации(Шаблон("Создаем расходную накладную на клиента [итКлиентыСчета.Клиент] по группе складов [итГруппыСкладов.НомерГруппы]"),"Создание документов","Расходные накладные",,2);

								начЛог = семЗаписатьЛогНач( "Документ", "РасходнаяНакладная", "Документ", "Создание расходных накладных" );
								ОткрытьФормуМодально( "Документ.РасходнаяНакладная", спЗаявок );
								семЗаписатьЛогКон( начЛог );								
								спЗаявок.УдалитьВсе();
							КонецЕсли;
//							итЗаявки.Выгрузить(спЗаявок,,"ПоСчету",1);
						КонецЕсли;
			//				итСчета.Показать();
					КонецЦикла;	//по складам


					//здесь формируем накладную по собранным заявкам и если номер группы больше 0 
					Если (итКлиентыСчета.НеОбъединять=0) И (итГруппыСкладов.НомерГруппы>0) Тогда
						ЗаписьЖурналаРегистрации(Шаблон("Создаем расходную накладную на клиента [итКлиентыСчета.Клиент] по группе складов [итГруппыСкладов.НомерГруппы]"),"Создание документов","Расходные накладные",,2);
						начЛог = семЗаписатьЛогНач( "Документ", "РасходнаяНакладная", "Документ", "Создание расходных накладных" );
						ОткрытьФормуМодально( "Документ.РасходнаяНакладная", спЗаявок );
						семЗаписатьЛогКон( начЛог );								
					КонецЕсли;
								
				КонецЦикла; //по группа складов


			КонецЦикла; //по клиентам
			
		КонецЦикла;	
	КонецЦикла; //не объединять

	//}Создание расходных накладных по кредиту
	
	//{Создание расходных накладных за наличные
	//********************************
	//*** формируем расходные за нал
	ТекстЗапроса="SELECT РезервыТоваровОстатки.ПоСчету [ПоСчету $Документ.Счет]
	|					, LEFT(Журнал.DOCNO,CASE WHEN CHARINDEX('_',Журнал.DOCNO)>0 THEN CHARINDEX('_',Журнал.DOCNO)-1 ELSE LEN(Журнал.DOCNO) END ) НомерЗаявки
	|					, РезервыТоваровОстатки.РезервТовараОстаток Резерв
	|					, $Счет.Клиент [Клиент $Справочник.Контрагенты]
	|					, CASE WHEN $Счет.ВидОплаты = 2 /* Отв. хранение */ THEN 1 ELSE $Контрагенты.НеОбъединятьНакладные END НеОбъединять	
	|					, $Счет.Склад [Склад $Справочник.МестаХранения]
	|					, $МестаХранения.НомерГруппы НомерГруппы
	|			  FROM $РегистрОстатки.РезервыТоваров(,
	|	  		  									INNER JOIN $ДокументСтроки.МаршрутныйЛист AS ДокМЛ ON ПоСчету = $ДокМЛ.Счет AND ДокМЛ.IDDOC = :ВыбМаршЛист AND $ДокМЛ.Накладная = $ПустойИД13,
	|												,ПоСчету,) AS РезервыТоваровОстатки
	|			  INNER JOIN $Документ.Счет AS Счет (NOLOCK) ON РезервыТоваровОстатки.ПоСчету = Счет.IDDOC
	|			  INNER JOIN _1SJOURN AS Журнал With (NOLOCK) ON Журнал.IDDOC = Счет.IDDOC AND Журнал.IDDOCDEF = $ВидДокумента.Счет
	|		 	  INNER JOIN $Справочник.МестаХранения AS МестаХранения (NOLOCK) ON $Счет.Склад = МестаХранения.ID
	|			  INNER JOIN $Справочник.Контрагенты AS Контрагенты (NOLOCK) ON Контрагенты.ID = $Счет.КлГруппа
	|			  WHERE ($Счет.ВидЗаявки <> $Перечисление.ВидыЗаявок.ЗаявкаНаВозврат) AND ($Счет.ВидОплаты = 1) /* только за нал*/
	|					AND ($Счет.СкладПолучатель = $ПустойИД) 
	|";
	
	Запрос.УстановитьТекстовыйПараметр("ВыбМаршЛист",ТекущийДокумент());
	итСчета=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,итСчета);
	
	Если итСчета.КоличествоСтрок()>0 Тогда
		Если Вопрос("Существуют эл. заявки без накладных - сейчас будут созданы расходные накладные за нал. Продолжить?","Да+Нет")="Да" Тогда
			Сообщить("Начата процедура формирования расходных накладных за наличные по складам и клиентам...");
		Иначе
			Сообщить("Процедура формирования расходных накладных за наличные по складам и клиентам... ОТМЕНЕНА!","!!!");
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	//итСчета.Показать();
//	итСчета.Группировать("НеОбъединять: НеОбъединять; Клиент : *Клиент; Склад : *Склад; ПоСчету : *ПоСчету","Резерв");
	итСчета.Группировать("НеОбъединять: НеОбъединять; Клиент : *Клиент; НомерГруппы : НомерГруппы; НомерЗаявки : НомерЗаявки; ПоСчету : *ПоСчету","Резерв");

	спЗаявок=СоздатьОбъект("СписокЗначений");

	итСчета.Сортировать("НеОбъединять");
	итСчета.ВыбратьСтроки();
	Пока итСчета.ПолучитьСтроку() = 1 Цикл
		
		итКлиентыСчета=итСчета.тзПотомки;
		итКлиентыСчета.ВыбратьСтроки();
		Пока итКлиентыСчета.ПолучитьСтроку() = 1 Цикл
			Сообщить(" - Формируем накладные по Клиенту: " + итКлиентыСчета.Клиент);
			итГруппыСкладов=итКлиентыСчета.тзПотомки;
			итГруппыСкладов.ВыбратьСтроки();
			Пока итГруппыСкладов.ПолучитьСтроку() = 1 Цикл
				Сообщить(" - Обрабатываем группы складов: " + итГруппыСкладов.НомерГруппы);
				спЗаявок.УдалитьВсе();
				итНомераЗаявок=итГруппыСкладов.тзПотомки;
				итНомераЗаявок.ВыбратьСтроки();
				Пока итНомераЗаявок.ПолучитьСтроку() = 1 Цикл
					Сообщить(" - Обрабатываем счета: " + итНомераЗаявок.НомерЗаявки);
					Если итКлиентыСчета.НеОбъединять=1 Тогда
						//в этом случае не объединяем разные счета в одну накладную - только с одним номером
						спЗаявок.УдалитьВсе();
						итЗаявки=итНомераЗаявок.тзПотомки;
						итЗаявки.ВыбратьСтроки();
						Пока итЗаявки.ПолучитьСтроку() = 1 Цикл
							спЗаявок.ДобавитьЗначение(итЗаявки.ПоСчету);
						КонецЦикла;
						ЗаписьЖурналаРегистрации(Шаблон("Создаем расходную накладную на клиента [итКлиентыСчета.Клиент] по группе складов [итГруппыСкладов.НомерГруппы]"),"Создание документов","Расходные накладные",,2);
						начЛог = семЗаписатьЛогНач( "Документ", "РасходнаяНакладнаяНал", "Документ", "Создание расходных накладных" );
						ОткрытьФормуМодально( "Документ.РасходнаяНакладнаяНал", спЗаявок );
						семЗаписатьЛогКон( начЛог );								

					ИначеЕсли итКлиентыСчета.НеОбъединять=0 Тогда
						итЗаявки=итНомераЗаявок.тзПотомки;
						итЗаявки.ВыбратьСтроки();
						Пока итЗаявки.ПолучитьСтроку()=1 Цикл
							спЗаявок.ДобавитьЗначение(итЗаявки.ПоСчету);
						КонецЦикла;
						//создаем накладные по складам, если номер группы = 0
						Если итГруппыСкладов.НомерГруппы=0 Тогда
							ЗаписьЖурналаРегистрации(Шаблон("Создаем расходную накладную на клиента [итКлиентыСчета.Клиент] по группе складов [итГруппыСкладов.НомерГруппы]"),"Создание документов","Расходные накладные",,2);
							начЛог = семЗаписатьЛогНач( "Документ", "РасходнаяНакладнаяНал", "Документ", "Создание расходных накладных" );
							ОткрытьФормуМодально( "Документ.РасходнаяНакладнаяНал", спЗаявок );
							семЗаписатьЛогКон( начЛог );								
							спЗаявок.УдалитьВсе();
						КонецЕсли;
//							итЗаявки.Выгрузить(спЗаявок,,"ПоСчету",1);
					КонецЕсли;
		//				итСчета.Показать();
				КонецЦикла;	//по складам


				//здесь формируем накладную по собранным заявкам и если номер группы больше 0 
				Если (итКлиентыСчета.НеОбъединять=0) И (итГруппыСкладов.НомерГруппы>0) Тогда
					ЗаписьЖурналаРегистрации(Шаблон("Создаем расходную накладную на клиента [итКлиентыСчета.Клиент] по группе складов [итГруппыСкладов.НомерГруппы]"),"Создание документов","Расходные накладные",,2);
					начЛог = семЗаписатьЛогНач( "Документ", "РасходнаяНакладнаяНал", "Документ", "Создание расходных накладных" );
					ОткрытьФормуМодально( "Документ.РасходнаяНакладнаяНал", спЗаявок );
					семЗаписатьЛогКон( начЛог );								
				КонецЕсли;
							
			КонецЦикла; //по группа складов


		КонецЦикла; //по клиентам
		
	КонецЦикла; //не объединять

	//}Создание расходных накладных за наличные

	//{Создание расходных накладных на реализацию
	//********************************
	//итСчета.Показать();
	
	ТекстЗапроса="SELECT РезервыТоваровОстатки.ПоСчету [ПоСчету $Документ.Счет]
	|					, LEFT(Журнал.DOCNO,CASE WHEN CHARINDEX('_',Журнал.DOCNO)>0 THEN CHARINDEX('_',Журнал.DOCNO)-1 ELSE LEN(Журнал.DOCNO) END ) НомерЗаявки
	|					, РезервыТоваровОстатки.РезервТовараОстаток Резерв
	|					, $Счет.Клиент [Клиент $Справочник.Контрагенты]
	|					, 0 НеОбъединять
	|					, $Счет.Склад [Склад $Справочник.МестаХранения]
	|					, $МестаХранения.НомерГруппы НомерГруппы
	|			  FROM $РегистрОстатки.РезервыТоваров(,
	|	  		  									INNER JOIN $ДокументСтроки.МаршрутныйЛист AS ДокМЛ ON ПоСчету = $ДокМЛ.Счет AND ДокМЛ.IDDOC = :ВыбМаршЛист AND $ДокМЛ.Накладная = $ПустойИД13,
	|												,ПоСчету,) AS РезервыТоваровОстатки
	|			  INNER JOIN $Документ.Счет AS Счет (NOLOCK) ON РезервыТоваровОстатки.ПоСчету = Счет.IDDOC
	|			  INNER JOIN _1SJOURN AS Журнал With (NOLOCK) ON Журнал.IDDOC = Счет.IDDOC AND Журнал.IDDOCDEF = $ВидДокумента.Счет
	|		 	  INNER JOIN $Справочник.МестаХранения AS МестаХранения (NOLOCK) ON $Счет.Склад = МестаХранения.ID
	|			  INNER JOIN $Справочник.Контрагенты AS Контрагенты (NOLOCK) ON Контрагенты.ID = $Счет.КлГруппа
	|			  WHERE ($Счет.ВидЗаявки <> $Перечисление.ВидыЗаявок.ЗаявкаНаВозврат) AND ($Счет.ВидОплаты = 3 )
	|					AND ($Счет.СкладПолучатель = $ПустойИД) 
	|";
	
	Запрос.УстановитьТекстовыйПараметр("ВыбМаршЛист",ТекущийДокумент());
	итСчета=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,итСчета);
	
	Если итСчета.КоличествоСтрок()>0 Тогда
		Если Вопрос("Существуют эл. заявки без накладных - сейчас будут созданы расходные накладные. Продолжить?","Да+Нет")="Да" Тогда
			Сообщить("Начата процедура формирования расходных накладных по складам и клиентам...");
		Иначе
			Сообщить("Процедура формирования расходных накладных по складам и клиентам... ОТМЕНЕНА!","!!!");
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	итСчета.Группировать("НеОбъединять: НеОбъединять; Клиент : *Клиент; НомерГруппы : НомерГруппы; Склад : *Склад; ПоСчету : *ПоСчету","Резерв");

	спЗаявок=СоздатьОбъект("СписокЗначений");

	итСчета.Сортировать("НеОбъединять");
	итСчета.ВыбратьСтроки();
	Пока итСчета.ПолучитьСтроку() = 1 Цикл
	
		итКлиентыСчета=итСчета.тзПотомки;
		итКлиентыСчета.ВыбратьСтроки();
		Пока итКлиентыСчета.ПолучитьСтроку() = 1 Цикл
			Сообщить(" - Формируем накладные по Клиенту: " + итКлиентыСчета.Клиент);
			итГруппыСкладов=итКлиентыСчета.тзПотомки;
			итГруппыСкладов.ВыбратьСтроки();
			Пока итГруппыСкладов.ПолучитьСтроку() = 1 Цикл
				Сообщить(" - Обрабатываем группы складов: " + итГруппыСкладов.НомерГруппы);
				спЗаявок.УдалитьВсе();
				итСкладыСчета=итГруппыСкладов.тзПотомки;
				итСкладыСчета.ВыбратьСтроки();
				Пока итСкладыСчета.ПолучитьСтроку() = 1 Цикл
					Сообщить(" - Обрабатываем счета по складу: " + итСкладыСчета.Склад);
					Если итКлиентыСчета.НеОбъединять=1 Тогда
						//в этом случае не объединяем счета в одну накладную
						итЗаявки=итСкладыСчета.тзПотомки;
						итЗаявки.ВыбратьСтроки();
						Пока итЗаявки.ПолучитьСтроку() = 1 Цикл
							спЗаявок.УдалитьВсе();
							спЗаявок.ДобавитьЗначение(итЗаявки.ПоСчету);
							начЛог = семЗаписатьЛогНач( "Документ", "РасходнаяРеализатора", "Документ", "Создание расходных накладных" );
							ОткрытьФормуМодально( "Документ.РасходнаяРеализатора", спЗаявок );
							семЗаписатьЛогКон( начЛог );								
							
						КонецЦикла;
					ИначеЕсли итКлиентыСчета.НеОбъединять=0 Тогда
						итЗаявки=итСкладыСчета.тзПотомки;
						итЗаявки.ВыбратьСтроки();
						Пока итЗаявки.ПолучитьСтроку()=1 Цикл
							спЗаявок.ДобавитьЗначение(итЗаявки.ПоСчету);
						КонецЦикла;
						//создаем накладные по складам, если номер группы = 0
						Если итГруппыСкладов.НомерГруппы=0 Тогда
							начЛог = семЗаписатьЛогНач( "Документ", "РасходнаяРеализатора", "Документ", "Создание расходных накладных" );
							ОткрытьФормуМодально( "Документ.РасходнаяРеализатора", спЗаявок );
							семЗаписатьЛогКон( начЛог );								
							спЗаявок.УдалитьВсе();
						КонецЕсли;
//							итЗаявки.Выгрузить(спЗаявок,,"ПоСчету",1);
					КонецЕсли;
		//				итСчета.Показать();
				КонецЦикла;	//по складам


				//здесь формируем накладную по собранным заявкам и если номер группы больше 0 
				Если (итКлиентыСчета.НеОбъединять=0) И (итГруппыСкладов.НомерГруппы>0) Тогда
					начЛог = семЗаписатьЛогНач( "Документ", "РасходнаяРеализатора", "Документ", "Создание расходных накладных" );
					ОткрытьФормуМодально( "Документ.РасходнаяРеализатора", спЗаявок );
					семЗаписатьЛогКон( начЛог );								
				КонецЕсли;
							
			КонецЦикла; //по группа складов


		КонецЦикла; //по клиентам
		
	КонецЦикла; //не объединять

	//}Создание расходных накладных на реализацию


	
	//{Создание перемещений на склады
	//********************************
	//*** формируем расходные за нал
	ТекстЗапроса="SELECT РезервыТоваровОстатки.ПоСчету [ПоСчету $Документ.Счет]
	|					, РезервыТоваровОстатки.РезервТовараОстаток Резерв
	|					, $Счет.Клиент [Клиент $Справочник.Контрагенты]
	|					, $Счет.Склад [Склад $Справочник.МестаХранения]
	|					, $Счет.СкладПолучатель [СкладПолучатель $Справочник.МестаХранения]
	|			  FROM $РегистрОстатки.РезервыТоваров(,
	|	  		  									INNER JOIN $ДокументСтроки.МаршрутныйЛист AS ДокМЛ ON ПоСчету = $ДокМЛ.Счет AND ДокМЛ.IDDOC = :ВыбМаршЛист AND $ДокМЛ.Накладная = $ПустойИД13,
	|												,ПоСчету,) AS РезервыТоваровОстатки
	|			  INNER JOIN $Документ.Счет AS Счет (NOLOCK) ON РезервыТоваровОстатки.ПоСчету = Счет.IDDOC
	|		 	  INNER JOIN $Справочник.МестаХранения AS МестаХранения (NOLOCK) ON $Счет.Склад = МестаХранения.ID
	|			  INNER JOIN $Справочник.Контрагенты AS Контрагенты (NOLOCK) ON Контрагенты.ID = $Счет.КлГруппа
	|			  WHERE ($Счет.ВидЗаявки <> $Перечисление.ВидыЗаявок.ЗаявкаНаВозврат) AND ($Счет.ВидОплаты = 0) /* только по кредиту*/
	|					AND ($Счет.СкладПолучатель <> $ПустойИД) 
	|					AND ($Счет.Клиент IN (SELECT ID FROM $Справочник.Контрагенты Спр (NOLOCK) WHERE $Спр.Рег_номер = :РегНомерФирмы))
	|";
	
	Запрос.УстановитьТекстовыйПараметр("ВыбМаршЛист",ТекущийДокумент());
	Запрос.УстановитьТекстовыйПараметр("РегНомерФирмы",СокрЛП(Константа.ОсновнаяФирма.Рег_номер));
	итСчета=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,итСчета);
	
	Если итСчета.КоличествоСтрок()>0 Тогда
		Если Вопрос("Существуют эл. заявки на пополнение скалада без перемещений - сейчас будут созданы перемещения. Продолжить?","Да+Нет")="Да" Тогда
			Сообщить("Начата процедура формирования расходных накладных за наличные по складам и клиентам...");
		Иначе
			Сообщить("Процедура формирования перемещений по складам... ОТМЕНЕНА!","!!!");
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	//итСчета.Показать();
	итСчета.Группировать("Склад : *Склад; СкладПолучатель : *СкладПолучатель; ПоСчету : *ПоСчету","Резерв");

	спЗаявок=СоздатьОбъект("СписокЗначений");

	итСчета.ВыбратьСтроки();
	Пока итСчета.ПолучитьСтроку() = 1 Цикл
	
		итСкладыПолучателя=итСчета.тзПотомки;
		итСкладыПолучателя.ВыбратьСтроки();
		Пока итСкладыПолучателя.ПолучитьСтроку() = 1 Цикл
			Сообщить(" - Формируем перемещения по складу получателя: " + итСкладыПолучателя.СкладПолучатель);
			спЗаявок.УдалитьВсе();
			итЗаявки=итСкладыПолучателя.тзПотомки;
			итЗаявки.ВыбратьСтроки();
			Пока итЗаявки.ПолучитьСтроку() = 1 Цикл
				спЗаявок.ДобавитьЗначение(итЗаявки.ПоСчету);
				начЛог = семЗаписатьЛогНач( "Документ", "Перемещение", "Документ", "Создание расходных накладных" );
				ОткрытьФормуМодально( "Документ.Перемещение", спЗаявок );
				семЗаписатьЛогКон( начЛог );								
				спЗаявок.УдалитьВсе();
			КонецЦикла;

			
			
		КонецЦикла; //по складам получателя
			
	КонецЦикла; //по складам
	
	//}Создание перемещений на склады

	СозданиеНакладныхВремяСек=СозданиеНакладныхВремяСек+семЗаписатьЛогКон(начЛогМЛ);
	
	Возврат 1;
	//спЗаявок.ДобавитьЗначение( таблЗаявок.Заявка );
	
КонецФункции 


Процедура ПечатьНакладных()

	Записан=0;
	Если Вопрос("Перед печатью документ необходимо обновить и записать. Продоложить?","Да+Нет")="Да" Тогда
		Обновить();
		Записать();
//		Записан=1;
	Иначе
		Возврат;
	КонецЕсли;

	Если (Константа.НовыйМеханизмПретензий.Получить(ДатаДок)=Да) Тогда
		Если СозданиеРасходныхНакладных()=0 Тогда
			Возврат;
		Иначе
			Если Записан=0 Тогда
				Обновить();
				Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Путь = КаталогИБ() + "ExtForms\Печать\ПечатьНакладныхИзМЛ.ert";
	Если ФС.СуществуетФайл( Путь ) = 0 Тогда Возврат; КонецЕсли;
	спПарам = СоздатьОбъект( "СписокЗначений" );
	спПарам.Установить( "Документ", контекст );
	ОткрытьФормуМодально( "Обработка", спПарам, Путь );
	Форма.Обновить(0);
КонецПроцедуры

Функция ОбщийРасходТоплива( пМашина, пДок )
	компМета=СоздатьОбъект("MetaDataWork");
	Запрос=СоздатьОбъект("ODBCRecordSet");
	ТекстЗапроса= "SELECT SUM($тшДок.Топливо) as Топливо
	|			   FROM $Документ.МаршрутныйЛист тшДок (NOLOCK) 
	|			   INNER JOIN _1SJOURN Журн (NOLOCK) ON ( тшДок.IDDOC = Журн.IDDOC ) AND (Журн.CLOSED & 1 = 1) AND (Журн.DATE_TIME_IDDOC < :ВыбПозицияДок)
	|			   WHERE ($тшДок.Машина = :ВыбМашина)
	|"; 
	
	Запрос.УстановитьТекстовыйПараметр("ВыбМашина",пМашина);
	Запрос.УстановитьТекстовыйПараметр("ВыбПозицияДок",компМета.ПолучитьДатуВремяИдДок(пДок.ПолучитьПозицию()));
	Возврат Запрос.ВыполнитьСкалярный(ТекстЗапроса);
КонецФункции

Функция ОбщийКолвоМоторчасов( пМашина, пДок )
	компМета=СоздатьОбъект("MetaDataWork");
	Запрос=СоздатьОбъект("ODBCRecordSet");
	ТекстЗапроса= "SELECT SUM($тшДок.МоторЧасы) as Топливо
	|			   FROM $Документ.МаршрутныйЛист тшДок (NOLOCK) 
	|			   INNER JOIN _1SJOURN Журн (NOLOCK) ON ( тшДок.IDDOC = Журн.IDDOC ) AND (Журн.CLOSED & 1 = 1) AND (Журн.DATE_TIME_IDDOC < :ВыбПозицияДок)
	|			   WHERE ($тшДок.Машина = :ВыбМашина)
	|"; 
	
	Запрос.УстановитьТекстовыйПараметр("ВыбМашина",пМашина);
	Запрос.УстановитьТекстовыйПараметр("ВыбПозицияДок",компМета.ПолучитьДатуВремяИдДок(пДок.ПолучитьПозицию()));
	Возврат Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	
КонецФункции

Функция ПодготовкаПечатиПутевки( док )
	сп = СоздатьОбъект( "СписокЗначений" );
	// шапка
	сп.Установить( "Фирма", док.Фирма.ПолноеНаименование.Получить(док.ДатаДок) );
	сп.Установить( "АдресФирмы", "ViskaІu iela 21 PPTD" );
	сп.Установить( "НомерДок", СокрЛ( док.НомерДок ) );
	сп.Установить( "ДатаДок", док.ДатаДок );
	сп.Установить( "Машина", ?( док.Машина.Выбран() = 1, док.Машина.Наименование, "" ) );
	сп.Установить( "НомерМашины", ?( док.Машина.Выбран() = 1, док.Машина.Код, "" ) );
	сп.Установить( "Экспедитор", ?( док.Экспедитор.Выбран() = 1, док.Экспедитор.Наименование, "" ) );
	сп.Установить( "АдресДоставки", док.АдресДоставки );
	сп.Установить( "МаркаТоплива", ?(док.Машина.ТипДвигателя = 0,"E95","DID") );
	сп.Установить( "Диспечер", док.Автор.Сотрудник);
	сп.Установить( "ОтветсьвеннаяПерсона", Константа.ОтветственнаяПерсонаМЛ);

	РасхКМ = док.Машина.РасходТоплива / 100;
	РасхЧ = док.Машина.РасходТопливаМ;
	НачКМ = док.КилометражНач;
	КонКМ = док.КилометражКон;
	КМ = КонКМ-НачКМ;
	НачЧ = ОбщийКолвоМоторчасов( док.Машина, док );
	КонЧ = НачЧ + док.МоторЧасы;
	Ч = КонЧ - НачЧ;
	НачПрихТ = ОбщийРасходТоплива( док.Машина, док );
	КонПрихТ = НачПрихТ + док.Топливо;
	ПрихТ = КонПрихТ - НачПрихТ;
	НачРасхТ = НачЧ*РасхЧ+НачКМ*РасхКМ;
	КонРасхТ = КонЧ*РасхЧ+КонКМ*РасхКМ;
	РасхТ = КонРасхТ - НачРасхТ;
	НачОстТ = НачПрихТ - НачРасхТ;
	КонОстТ = КонПрихТ - КонРасхТ;
	//Сообщить("РасхКМ - "+РасхКМ);
	//Сообщить("РасхЧ - "+РасхЧ);
	//Сообщить("НачКМ - "+НачКМ);
	//Сообщить("КонКМ - "+КонКМ);
	//Сообщить("КМ - "+КМ);
	//Сообщить("НачЧ - "+НачЧ);
	//Сообщить("КонЧ - "+КонЧ);
	//Сообщить("Ч - "+Ч);
	//Сообщить("НачПрихТ - "+НачПрихТ);
	//Сообщить("КонПрихТ - "+КонПрихТ);
	//Сообщить("ПрихТ - "+ПрихТ);
	//Сообщить("НачРасхТ - "+НачРасхТ);
	//Сообщить("КонРасхТ - "+КонРасхТ);
	//Сообщить("РасхТ - "+РасхТ);
	//Сообщить("НачОстТ - "+НачОстТ);
	//Сообщить("КонОстТ - "+КонОстТ);
	
	пРасхЗаКМ = РасхКМ;
	пРасхЗаКМмотор = РасхЧ;
	
	сп.Установить( "КилометражНач", НачКМ );
	сп.Установить( "КилометражКон", КонКМ );
	сп.Установить( "Пробег", КМ );
	сп.Установить( "НормаТоплива", РасхКМ*100 );
	сп.Установить( "НормаТопливаМото",РасхЧ );
	сп.Установить( "ТопливоЗал",док.Топливо );

	сп.Установить( "ТопливоНач", НачОстТ );
	сп.Установить( "ТопливоТек", КонОстТ );
	сп.Установить( "ТопливоПоНорме", КМ*РасхКМ+Ч*РасхЧ );
	сп.Установить( "ТопливоЗал",док.Топливо );
	
	сп.Установить( "ТопливоНачМото", НачЧ );
	сп.Установить( "ТопливоТекМото", КонЧ );
	сп.Установить( "ТопливоПоНормеМото", Ч );

	//ОбщийРасходТоплива = ОбщийРасходТоплива( док.Машина, док );
	//сп.Установить( "ТопливоНач", ОбщийРасходТоплива-док.Топливо-док.КилометражНач*пРасхЗаКМ );
	//сп.Установить( "ТопливоТек", ОбщийРасходТоплива-док.КилометражКон*пРасхЗаКМ-док.МоторЧасы*пРасхЗаКМмотор );
	//сп.Установить( "ТопливоПоНорме", (док.КилометражКон-док.КилометражНач)*пРасхЗаКМ );
	//сп.Установить( "ТопливоЗал",док.Топливо );
	//
	//ОбщийКолвоМ = ОбщийКолвоМоторчасов( док.Машина, док );
	//сп.Установить( "НормаТопливаМото", док.Машина.РасходТопливаМ );
	//сп.Установить( "ТопливоНачМото", (ОбщийКолвоМ-док.МоторЧасы) );
	//сп.Установить( "ТопливоТекМото", ОбщийКолвоМ );
	//сп.Установить( "ТопливоПоНормеМото", док.МоторЧасы*пРасхЗаКМмотор );
	
	// табличная часть документа
	сп.Установить( "ОтКуда", "ViskaІu 21 PPTD" );
	табл = СоздатьОбъект( "ТаблицаЗначений" );
	табл.НоваяКолонка( "Адрес" );
	док.ВыбратьСтроки();
	Пока док.ПолучитьСтроку() = 1 Цикл
		табл.НоваяСтрока();
		табл.Адрес = АдресСтрокой( док.Клиент.АдресДоставки, 1, 3, ", " );
	КонецЦикла;
	табл.Свернуть("Адрес","");
	табл.Сортировать("+Адрес");
	сп.Установить( "Таблица", табл );
	Возврат сп;
КонецФункции

Процедура ПечатьПутевки()
	сп = ПодготовкаПечатиПутевки( контекст );
	таб = СоздатьОбъект( "Таблица" );
	таб.ИсходнаяТаблица( "Путевка" );
	НачШапки = таб.ВысотаТаблицы();
	таб.ВывестиСекцию( "Шапка" );
	таб.ВывестиСекцию( "ШапкаТаблицы" );
	таб.ПовторятьПриПечатиСтроки( НачШапки+1, таб.ВысотаТаблицы() );
	табл = сп.Получить( "Таблица" );
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку() = 1 Цикл
		таб.ВывестиСекцию( "Строка" );
	КонецЦикла;
	таб.ВывестиСекцию( "Подвал" );
	таб.ТолькоПросмотр( 1 );   
	//таб.ПараметрыСтраницы( 1,,,10,10,10,20,10,20,1,, );
	таб.Показать( "" );
КонецПроцедуры

Процедура ПриВыбореЗакладки( ном, зн )
	Форма.ИспользоватьСлой( зн + ", Общий", 2 );
КонецПроцедуры

Функция УправлениеДиалогом()
	Если КоличествоСтрок() = 0 Тогда
		Форма.ДатаДок.Доступность( 1 );
		Форма.АдресДоставки.Доступность( 1 );
		Форма.кнОчиститьАдрес.Доступность( 1 );
		Форма.выбКлиент.Доступность( 1 );
		Форма.кнОчиститьМаршрут.Доступность( 1 );
		Форма.кнЗаполнить.Доступность( 1 );
		Форма.кнОбновить.Доступность( 0 );
		Форма.кнОчистить.Доступность( 0 );
	Иначе
		Форма.ДатаДок.Доступность( 0 );
		Форма.АдресДоставки.Доступность( 0 );
		Форма.кнОчиститьАдрес.Доступность( 0 );
		Форма.выбКлиент.Доступность( 0 );
		Форма.кнОчиститьМаршрут.Доступность( 0 );
		Форма.кнЗаполнить.Доступность( 0 );
		Форма.кнОбновить.Доступность( 1 );
		Форма.кнОчистить.Доступность( 1 );
	КонецЕсли;
	Форма.кнПутевка.Доступность( Проведен() );
КонецФункции


Процедура ПриВыбореСчета( пРежим )
	РежимВвода = пРежим;
	Ошибка = 0;
	Если Счет.Выбран() = 0 Тогда Возврат; КонецЕсли;
	Если Счет.ПометкаУдаления() = 1 Тогда 
		Накладная = ""; Клиент = ""; Адрес = ""; Сумма = ""; Вес = "";
		Возврат; 
	КонецЕсли;
	
	Клиент = Счет.Клиент;
	Если Клиент.Выбран() = 0 Тогда Ошибка = 2; Возврат; КонецЕсли;
	
	
	КлиентДоставки = ?(ПустоеЗначение(Счет.КлиентФилиала)=1,Клиент,Счет.КлиентФилиала);

	Если ПустоеЗначение(Счет.КлиентФилиала)=1 Тогда
		Адрес = Счет.АдресДоставки;
		КлиентДоставкиАдрес = Адрес;
	Иначе
		Адрес = Клиент.АдресДоставки; //адрес клиента
		КлиентДоставкиАдрес = КлиентДоставки.АдресДоставки; //адрес конечного клиента
	КонецЕсли;
	
	Если ПустоеЗначение(Счет.МаршрутДоставкиГрафик)=0 Тогда
		МаршрутДоставкиГрафик = Счет.МаршрутДоставкиГрафик;
	КонецЕсли;
	//Если Адрес.Выбран() = 0 Тогда Ошибка = 2; Возврат; КонецЕсли;
	
	Накладная = "";
	док = СоздатьОбъект( "Документ" );
	Если док.ВыбратьПодчиненныеДокументы(,, Счет ) = 1 Тогда
		Пока док.ПолучитьДокумент() = 1 Цикл
			Если док.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;
			Если ( док.Вид() = "РасходнаяНакладная" )
			или ( док.Вид() = "РасходнаяНакладнаяНал" )
			или ( док.Вид() = "РасходнаяРеализатора" )
			или ( док.Вид() = "ПриходнаяНакладная" )
			или ( док.Вид() = "Перемещение" )
			или ( док.Вид() = "СнятиеРезерва" )
			или ( док.Вид() = "ПеремещениеДепартамент" ) Тогда
				Если глЕстьРеквизитШапки("Клиент",Док.Вид())=1 Тогда
					Если Док.Клиент <> Счет.Клиент Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Накладная = док.ТекущийДокумент();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если (Накладная.Выбран() = 0) ИЛИ (глЕстьРеквизитМнЧ("Товар",Накладная.Вид())=0) Тогда 
		
		Сообщить("Для накладной "+Накладная.Вид()+" вес рассчитываем из эл.заявки!");
		Счет.ВыбратьСтроки(); ВесНакл = 0; ВесНаклБрутто = 0;
		Пока Счет.ПолучитьСтроку() = 1 Цикл
			Если Счет.Товар.Выбран() = 0 Тогда Продолжить; КонецЕсли;
			ВесТов = Счет.Товар.Вес * Счет.Количество * Счет.Коэффициент;
			ВесНакл = ВесНакл + ВесТов;
			// АННА
			//ВесНаклБрутто = ВесНаклБрутто + (Счет.Товар.Вес + Счет.Товар.ЛогистикаВесБруттоУпаковки) * Счет.Количество * Счет.Коэффициент;
			ВесНаклБрутто = ВесНаклБрутто + ВесТов + ВесУпаковкиИнфо(Счет.Товар) * Счет.Количество * Счет.Коэффициент;
		КонецЦикла;
		Вес = Окр( ВесНакл, 3, 1 );
		ВесБрутто = Окр( ВесНаклБрутто, 3, 1 );
		СостСчета = 2; 
		Возврат; 
	КонецЕсли;
	
	СуммаНакл = 0;
	Если Накладная.Вид() = "РасходнаяНакладнаяНал" Тогда
		СуммаНал  =	Накладная.Итог( "Всего" );
		СуммаНакл = Накладная.Итог( "Всего" );
		Если СуммаНакл = 0 Тогда Ошибка = 1; Возврат; КонецЕсли;
	КонецЕсли;

	Если Накладная.Вид() = "СнятиеРезерва" Тогда
		Возврат;
	КонецЕсли;
	
	Накладная.ВыбратьСтроки(); 
	ВесНакл = 0;
	ВесВозвр = 0;
	ВесНаклБрутто = 0; 
	ВесБруттоВозвр = 0;
	Пока Накладная.ПолучитьСтроку() = 1 Цикл
		
		Если (Накладная.Вид() = "РасходнаяНакладная") ИЛИ (Накладная.Вид() = "РасходнаяРеализатора") Тогда
			Если Накладная.Счет <> Счет Тогда Продолжить; КонецЕсли;
		КонецЕсли;
		
		Если Накладная.Товар.Выбран() = 0 Тогда Продолжить; КонецЕсли;
		ВесТов = Накладная.Товар.Вес * Накладная.Количество * Накладная.Коэффициент;
		// АННА
		//ВесНаклБрутто 	= ВесНаклБрутто + (Накладная.Товар.Вес + Накладная.Товар.ЛогистикаВесБруттоУпаковки) * Накладная.Количество * Накладная.Коэффициент;
		Если (Накладная.Вид() = "ПриходнаяНакладная")  Тогда
			ВесБруттоВозвр = ВесБруттоВозвр + ВесУпаковкиИнфо(Накладная.Товар) * Накладная.Количество * Накладная.Коэффициент;
			ВесВозвр 		= ВесВозвр + ВесТов;
		Иначе
			ВесНаклБрутто 	= ВесНаклБрутто + ВесТов + ВесУпаковкиИнфо(Накладная.Товар) * Накладная.Количество * Накладная.Коэффициент;
			ВесНакл 		= ВесНакл + ВесТов;
		КонецЕсли;
		
		
		Если (Накладная.Вид() = "РасходнаяНакладная") ИЛИ (Накладная.Вид() = "ПриходнаяНакладная") Тогда
			СуммаНакл = СуммаНакл + Накладная.Сумма*Накладная.Курс;
		КонецЕсли;
	КонецЦикла;
	Вес 				= Окр( ВесНакл, 3, 1 );
	ВесВозврата			= Окр( ВесВозвр, 3, 1 );
	ВесБрутто 			= Окр( ВесНаклБрутто, 3, 1 );
	ВесБруттоВозврата 	= Окр( ВесБруттоВозвр, 3, 1 );
	Сумма		= СуммаНакл;	
	Если Вес = 0 Тогда Ошибка = 1; Возврат; КонецЕсли;
КонецПроцедуры

Процедура Заполнить()
	ODBCRecordSet = СоздатьОбъект( "ODBCRecordSet" );
	спУсловий = СоздатьОбъект( "СписокЗначений" );
	ТекстЗапроса="
	//|SELECT
	//|  A.IDDoc as [Док $Документ.Счет],
	//|  A.IDDocDef as Док_вид
	//|FROM
	//|  _1SJourn A WITH (NOLOCK)
	//|INNER JOIN
	//|	( 
	|SELECT 
	|	Док.IDDOC as [Док $Документ.Счет],
	|	$Док.ДатаПоставки as ДатаПоставки,
	|	$Док.Клиент as Клиент
	|	FROM $Документ.Счет Док WITH (NOLOCK)";
	
	ODBCRecordSet.УложитьСписокОбъектов(АдресДоставки, "#АдресДоставки", "АдресаДоставки");
	ODBCRecordSet.УложитьСписокОбъектов(АдресДоставкиФилиал, "#АдресДоставкиФилиал", "АдресаДоставки");
	

	Если АдресДоставкиФилиал.Выбран() = 0 Тогда 
	ИначеЕсли АдресДоставкиФилиал.ЭтоГруппа() = 0 Тогда ТекстЗапроса=ТекстЗапроса+"
	|	INNER JOIN $Справочник.Контрагенты СпрКФ WITH (NOLOCK) ON СпрКФ.ID = $Док.КлиентФилиала
	|	AND $СпрКФ.АдресДоставки = :АдресДоставкиФилиал";
	ODBCRecordSet.УстановитьТекстовыйПараметр("АдресДоставкиФилиал", АдресДоставкиФилиал);
	ИначеЕсли АдресДоставкиФилиал.ЭтоГруппа() = 1 Тогда ТекстЗапроса=ТекстЗапроса+"
	|	INNER JOIN $Справочник.Контрагенты СпрКФ WITH (NOLOCK) ON СпрКФ.ID = $Док.КлиентФилиала
	|	AND $СпрКФ.АдресДоставки IN (SELECT Val FROM #АдресДоставкиФилиал)";
	КонецЕсли;
	
	
	ТекстЗапроса=ТекстЗапроса+"	
	|	WHERE Док.IDDOC IN
	|		(select Жур.IDDOC FROM _1sjourn Жур (NOLOCK) Where Жур.Date_Time_IDDoc > :Нач AND Жур.Closed & 1 = 1 AND Жур.IDDOCDEF = $ВидДокумента.Счет)
	|	AND $Док.ДатаПоставки = :ДатаПоставки
	|	AND $Док.ВидДоставки = $Перечисление.ВидыДоставки.Доставка -- NOT IN ($Перечисление.ВидыДоставки.Самовывоз,$Перечисление.ВидыДоставки.Агент,$Перечисление.ВидыДоставки.Поставщик)
	|	AND $Док.ВидЗаявки IN ($Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка,$Перечисление.ВидыЗаявок.СпецЗаказ,$Перечисление.ВидыЗаявок.ЗаявкаНаВозврат)";
	//|	WHERE $Док.ДатаПоставки = :ДатаПоставки";      
	Если Выбран() = 0 Тогда ТекстЗапроса=ТекстЗапроса+"
	|	AND Док.IDDoc NOT IN (SELECT $C.Счет FROM $ДокументСтроки.МаршрутныйЛист C )";
	Иначе ТекстЗапроса=ТекстЗапроса+"
	|	AND Док.IDDoc NOT IN (SELECT $C.Счет FROM $ДокументСтроки.МаршрутныйЛист C WHERE C.IDdoc <> :ТекДок )";
	ODBCRecordSet.УстановитьТекстовыйПараметр("ТекДок", ТекущийДокумент());
	КонецЕсли; 

	Если АдресДоставки.Выбран() = 0 Тогда 
	ИначеЕсли АдресДоставки.ЭтоГруппа() = 0 Тогда ТекстЗапроса=ТекстЗапроса+"
//	|	INNER JOIN $Справочник.Контрагенты СпрК WITH (NOLOCK) ON СпрК.ID = $Док.Клиент
	|	AND $Док.АдресДоставки = :АдресДоставки";
	ODBCRecordSet.УстановитьТекстовыйПараметр("АдресДоставки", АдресДоставки);
	ИначеЕсли АдресДоставки.ЭтоГруппа() = 1 Тогда ТекстЗапроса=ТекстЗапроса+"
//	|	INNER JOIN $Справочник.Контрагенты СпрК WITH (NOLOCK) ON СпрК.ID = $Док.Клиент
	|	AND $Док.АдресДоставки IN (SELECT Val FROM #АдресДоставки)";
	КонецЕсли;
	
	
	Если выбКлиент.Выбран() = 0 Тогда 
	ИначеЕсли выбКлиент.ЭтоГруппа() = 0 Тогда ТекстЗапроса=ТекстЗапроса+"
	|	AND $Док.Клиент = :Клиент";
		ODBCRecordSet.УстановитьТекстовыйПараметр("Клиент", выбКлиент);
	ИначеЕсли выбКлиент.ЭтоГруппа() = 1 Тогда ТекстЗапроса=ТекстЗапроса+"
	|	AND $Док.Клиент IN (SELECT Val FROM #Клиент)";
        ODBCRecordSet.УложитьСписокОбъектов(выбКлиент, "#Клиент", "Контрагенты");
	КонецЕсли;

	Если выбСклад.Выбран() = 0 Тогда 
	ИначеЕсли выбСклад.ЭтоГруппа() = 0 Тогда ТекстЗапроса=ТекстЗапроса+"
	|	AND $Док.Склад "+?(фСкладИсключить=1,"<>","=")+" :Склад";
		ODBCRecordSet.УстановитьТекстовыйПараметр("Склад", выбСклад);
	ИначеЕсли выбСклад.ЭтоГруппа() = 1 Тогда ТекстЗапроса=ТекстЗапроса+"
	|	AND $Док.Склад "+?(фСкладИсключить=1,"NOT IN","IN")+" (SELECT Val FROM #Склады)";
        ODBCRecordSet.УложитьСписокОбъектов(выбСклад, "#Склады", "МестаХранения");
	КонецЕсли;
	
	//ТекстЗапроса=ТекстЗапроса+"
	//|	AND Док.IDDoc NOT IN (SELECT $C.Счет FROM $ДокументСтроки.МаршрутныйЛист C )
	//|	) as B ON B.Док = A.IDDoc
	//|WHERE 
	//|  A.Closed & 1 = 1";
	ODBCRecordSet.УстановитьТекстовыйПараметр("ДатаПоставки", ДатаДок);
	ODBCRecordSet.УстановитьТекстовыйПараметр( "Нач", РабочаяДата() - 90 );
	
	//ODBCRecordSet.Отладка(1);
	//нач = ТекущееВремя();
	табл = ODBCRecordSet.ВыполнитьИнструкцию(ТекстЗапроса);
	
	ТекстЗапросаМаршрутыДопГрафик="SELECT   1 выб
	|										, МаршрутыДоставкиГрафик.PARENTEXT [Маршрут $Справочник.МаршрутыДоставки]
	|										, МаршрутыДоставкиГрафик.ID [График $Справочник.МаршрутыДоставкиГрафик]
		|						  FROM $Справочник.МаршрутыДоставкиГрафик AS МаршрутыДоставкиГрафик
		|				 		 WHERE (МаршрутыДоставкиГрафик.PARENTEXT IN (SELECT $Спр.Маршрут 
		|																	 FROM $Справочник.АдресаДоставки Спр(NOLOCK)
		|																	 INNER JOIN #АдресДоставки ON #АдресДоставки.Val = Спр.ID))
		|";


	тГрафики= ODBCRecordSet.ВыполнитьИнструкцию(ТекстЗапросаМаршрутыДопГрафик);
	сзГрафикиДоставки=СоздатьОбъект("СписокЗначений");
	
	Если тГрафики.КоличествоСтрок()>0 Тогда
		оВыбор = СоздатьОбъект("Общие.Диалог.Выбор");
		оВыбор.Заголовок("Выберите графики для маршрутов");
		Если оВыбор.Выбрать(тГрафики) = 0 Тогда
			Возврат;
		КонецЕсли; 
		
		таблГрафиков = оВыбор.Результат();
		Если таблГрафиков.Итог("выб") = 0 Тогда
			Возврат;
		КонецЕсли;


		таблГрафиков.ВыбратьСтроки();
		Пока таблГрафиков.ПолучитьСтроку()=1 Цикл
			Если таблГрафиков.Выб=1 Тогда
				сзГрафикиДоставки.ДобавитьЗначение(таблГрафиков.График);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	

	Основание = сзГрафикиДоставки.ВСтрокуСРазделителями();
	
	
	//Сообщить( "Получено строк: "+табл.КоличествоСтрок() );
	//Сообщить( "Время выполнения запроса: "+ семПрошлоВремени(нач,ТекущееВремя()) );
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку() = 1 Цикл Состояние( Шаблон( "Обработано [табл.НомерСтроки] из [табл.КоличествоСтрок()] документов." ) );

		НеДобавлять=0;
		
		Если (ПустоеЗначение(табл.Док.МаршрутДоставкиГрафик)=0) И (сзГрафикиДоставки.Принадлежит(табл.Док.МаршрутДоставкиГрафик)=1) Тогда
		ИначеЕсли (ПустоеЗначение(табл.Док.МаршрутДоставкиГрафик)=0) Тогда
			Продолжить;			
		КонецЕсли;
		док = СоздатьОбъект( "Документ" );
		Если док.ВыбратьПодчиненныеДокументы(,, табл.Док ) = 1 Тогда
			Пока док.ПолучитьДокумент() = 1 Цикл
				Если док.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;
				
				СостояниеЗаявки=глПолучитьСостояниеЗаявки(док);
				Если ( док.Вид() = "СнятиеРезерва" ) И (Док.Проведен()=1) Тогда
					НеДобавлять=1;
					Продолжить;
				КонецЕсли;

				Если ( док.Вид() = "КомплектацияЗаявкиФакт" ) И (Док.Проведен()=1) Тогда
					Если Док.Аннулировать=1 Тогда
						НеДобавлять=1;
						Продолжить;
					КонецЕсли;
				КонецЕсли;

			КонецЦикла;
		КонецЕсли;

		Если НеДобавлять=0 Тогда
			НоваяСтрока();
			Счет = табл.Док;
			ПриВыбореСчета( 0 );
		КонецЕсли;
	КонецЦикла;
	Форма.Закладки.ТекущаяСтрока( 2 );
	ПриВыбореЗакладки( 0, "Таблица" );
КонецПроцедуры

Процедура Очистить()
	Ответ = Вопрос( "Все строки будут удалены. Продолжить?", "Да+Нет" );
	Если Ответ = "Да" Тогда УдалитьСтроки(); КонецЕсли;
КонецПроцедуры

Процедура Обновить()
	
	Меню=СоздатьОбъект("СписокЗначений");
	Меню.ДобавитьЗначение(1,"Полное");
	Меню.ДобавитьЗначение(2,"Только удалить аннулированные");
	выб=1;
	Если Меню.ВыбратьЗначение(выб,,,,1)=1 Тогда
	Иначе
		Возврат;
	КонецЕсли;
	
	ПриВыбореМашины();
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл Состояние( Шаблон( "Обработано [НомерСтроки] из [КоличествоСтрок()]" ) );
		док = СоздатьОбъект( "Документ" );
		Если док.ВыбратьПодчиненныеДокументы(,, Счет ) = 1 Тогда
			Пока док.ПолучитьДокумент() = 1 Цикл
				Если док.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;
				Если ( док.Вид() = "СнятиеРезерва" ) И (Док.Проведен()=1) Тогда
					УдалитьСтроку();
					ВыбратьСтроки();
				КонецЕсли;
				
				Если ( док.Вид() = "КомплектацияЗаявкиФакт" ) И (Док.Проведен()=1) Тогда
					Если Док.Аннулировать=1 Тогда
						УдалитьСтроку();
						ВыбратьСтроки();
					КонецЕсли;
				КонецЕсли;
			
			КонецЦикла;
		КонецЕсли;

		Если выб=1 Тогда
			ПриВыбореСчета( РежимВвода );
		КонецЕсли;		
	КонецЦикла;
КонецПроцедуры

Процедура ПриНачалеВыбораЗначения(ИД,флСтОбр)

	МенюВал=СоздатьОбъект("СписокЗначений");
	МенюВал.ДобавитьЗначение(Рубли);
	
	Если ИД="ТопливоВал1" Тогда
		флСтОбр=0;
		Зн=0;
		Выб=Рубли;
		Если МенюВал.ВыбратьЗначение(Выб,,,,1)=1 Тогда
			ТопливоВал1 = Выб;
		Иначе
			Возврат;
		КонецЕсли;
	ИначеЕсли ИД="ТопливоВал2" Тогда
		флСтОбр=0;
		Зн=0;
		Выб=Рубли;
		Если МенюВал.ВыбратьЗначение(Выб,,,,1)=1 Тогда
			ТопливоВал2 = Выб;
		Иначе
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ИД="ТопливоВал3" Тогда
		флСтОбр=0;
		Зн=0;
		Выб=Рубли;
		Если МенюВал.ВыбратьЗначение(Выб,,,,1)=1 Тогда
			ТопливоВал3 = Выб;
		Иначе
			Возврат;
		КонецЕсли;
	ИначеЕсли ИД="МЛДокОсн" Тогда
		флСтОбр=0;

		ТекстЗапроса = "SELECT Док.IDDOC [Док $Документ.МаршрутныйЛист]
		|			   FROM $Документ.МаршрутныйЛист Док (NOLOCK)
		|			   INNER JOIN _1sjourn Жур (NOLOCK) ON Жур.IDDOC = Док.IDDOC
		|			   WHERE Жур.DATE_TIME_IDDOC BETWEEN :Нач AND :Нач~
		|					AND $Док.Экспедитор = :Экспедитор 
		|					AND Док.IDDOC <> :ТекДок
		|";
		
		Запрос=СоздатьОбъект("ODBCRecordSet");
		Запрос.УстановитьТекстовыйПараметр("Экспедитор",Экспедитор);
		Запрос.УстановитьТекстовыйПараметр("Нач",ДатаДок);
		Запрос.УстановитьТекстовыйПараметр("ТекДок",ТекущийДокумент());
		
		табл = Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
		сзДок = СоздатьОбъект("СписокЗначений");
		табл.Выгрузить(сзДок,,,"Док");
		
		выб=МЛДокОсн;
		Если сзДок.ВыбратьЗначение(выб,"МЛ",,,0)=1 Тогда
			МЛДокОсн=выб;
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводНового(ФлКопирования)    
	
	МЛДокОсн = "";
	ТопливоВал1=Рубли;
	ТопливоВал2=Рубли;
	ТопливоВал3=Рубли;
	ЗаполнитьШапку(Контекст);
	
КонецПроцедуры

Процедура ПриВводеСтроки()
	Перем док;
	СтатусВозврата( 0 );
	док = СоздатьОбъект( "Документ.Счет" );
	Если док.Выбрать( "Выберите эл. заявку", "Журнал.СчетаДляВыбора.ФормаСписка" ) = 1 Тогда
		Счет_ = док.ТекущийДокумент();
		
		Если Выбран()=1 Тогда
			ТекстЗапроса = "SELECT IDDOC [Док $Документ.МаршрутныйЛист] FROM $ДокументСтроки.МаршрутныйЛист C WHERE $C.Счет=:Счет AND C.IDdoc <> :ТекДок ";
		Иначе
			ТекстЗапроса = "SELECT IDDOC [Док $Документ.МаршрутныйЛист] FROM $ДокументСтроки.МаршрутныйЛист C WHERE $C.Счет=:Счет";
		КонецЕсли;			
		Запрос = СоздатьОбъект("ODBCRecordSet");
		Запрос.УстановитьТекстовыйПараметр("ТекДок",ТекущийДокумент());
		Запрос.УстановитьТекстовыйПараметр("Счет",Счет_);
		
		тт= Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
		Если тт.КоличествоСтрок()=0 Тогда
			НоваяСтрока();
			Счет = Счет_;
			ПриВыбореСчета( 1 );
			АктивизироватьСтроку( КоличествоСтрок() );

		Иначе
			тт.ПолучитьСтрокуПоНомеру(1);
			СтатусВозврата(0);
			Сообщить(Шаблон("Данная заявка [Счет_.НомерДок] уже добавлена в другой Маршрутный лист [тт.Док.НомерДок]. Удалите ее."),"!!!");
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура РаботаСНакладной()
	сп = СоздатьОбъект( "СписокЗначений" );
	Если Накладная.Выбран() = 0 Тогда
		сп.ДобавитьЗначение( "Ввести", "Ввести на основании..." );
	Иначе
		сп.ДобавитьЗначение( "Открыть", "Открыть документ..." );
		Если Накладная.Проведен() = 0 Тогда
			сп.ДобавитьЗначение( "Провести", "Провести документ..." );
		КонецЕсли;
	КонецЕсли;
	выб = ""; Если сп.ВыбратьЗначение( выб,,,, 1 ) <> 1 Тогда Возврат; КонецЕсли;	
	Если выб = "Ввести" Тогда
		сп = СоздатьОбъект( "СписокЗначений" );
		сп = глПолучитьСписокВводимыхНаОсновании( Счет );
		Вид = ""; Если сп.ВыбратьЗначение( Вид, "Выбор вида документа" ,,, 0 ) = 0 Тогда Возврат; КонецЕсли;
		ОткрытьФормуМодально( "Документ."+Вид, , Счет );
	ИначеЕсли выб = "Открыть" Тогда
		ОткрытьФорму( Накладная );
	ИначеЕсли выб = "Провести" Тогда
		док = СоздатьОбъект( "Документ" );
		док.НайтиДокумент( Накладная );
		Попытка док.Провести();
		Исключение Сообщить( ОписаниеОшибки() );
		КонецПопытки;
	КонецЕсли;
	ПриВыбореСчета( РежимВвода );
КонецПроцедуры

Процедура ПриНачалеРедактированияСтроки()
	СтатусВозврата( 0 );
	Если Форма.ТекущаяКолонка() = "Счет" Тогда
		Если Счет.Выбран() = 0 Тогда
			ПриВыбореСчета( 1 );
		Иначе
			ОткрытьФорму( Счет );
		КонецЕсли;
	ИначеЕсли Форма.ТекущаяКолонка() = "Накладная" Тогда
		РаботаСНакладной();
	ИначеЕсли Форма.ТекущаяКолонка() = "Принят" Тогда
		Если ПустоеЗначение(Накладная)=1 Тогда
			Возврат;
		КонецЕсли;
		Если ПустоеЗначение(Принят)=1 Тогда
			Принят = "V";
		ИначеЕсли семЕстьПраво("Документ","МаршрутныйЛист","Снятие отметки накладной")=1 Тогда
			Принят = "";
		Иначе
			Предупреждение("Недостаточно полномочий!");
		КонецЕсли;
		//сп = СоздатьОбъект( "СписокЗначений" );
		//сп.ДобавитьЗначение( "Принят" );
		//сп.ДобавитьЗначение( "Не принят" );
		//выб = ""; Если сп.ВыбратьЗначение( выб,,,, 1 ) <> 1 Тогда Возврат; КонецЕсли;
		//Принят = ?(выб = "Принят","V","");
	КонецЕсли;
КонецПроцедуры

Процедура ПриОкончанииРедактированияСтроки()
	Если Счет.Выбран() = 0 Тогда
		Предупреждение( "Не выбран счет." );
		СтатусВозврата( 0 ); Возврат;
	Иначе

		ПриВыбореСчета( РежимВвода );
		
	КонецЕсли;
КонецПроцедуры

Функция ПредставлениеАдреса()
	Если Адрес.Выбран() = 0 Тогда Возврат ""; КонецЕсли;
	начУр = 1;
	Если АдресДоставки.Выбран() = 1 Тогда
		Если АдресДоставки.ЭтоГруппа() = 1 Тогда
			
			Если Адрес.ПринадлежитГруппе( АдресДоставки ) = 1 Тогда
				начУр = АдресДоставки.Уровень() + 1;
			КонецЕсли;
		Иначе
			Если Адрес = АдресДоставки Тогда
				начУр = АдресДоставки.Уровень();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат АдресСтрокой( Адрес, начУр, 4, ", " ) + " " + Клиент.АдресДоставкиДоп; 
КонецФункции

Функция ФорматВывода( парам )
	Если парам = "СостНакл" Тогда
		Если Накладная.Выбран() = 0 Тогда Возврат 0; 
		Иначе Возврат ?( Накладная.ПометкаУдаления() = 1, 1, 2 + Накладная.Проведен() );
		КонецЕсли;
	ИначеЕсли парам = "СостЗаявки" Тогда
		Если Счет.Выбран() = 0 Тогда Возврат 0; 
		Иначе Возврат ?( Счет.ПометкаУдаления() = 1, 1, 2 + Счет.Проведен() );
		КонецЕсли;
	ИначеЕсли парам = "ГруппаСклада" Тогда
		Если Счет.Выбран() = 0 Тогда Возврат ""; 
		Иначе Возврат Счет.Склад.НомерГруппы;
		КонецЕсли;

	ИначеЕсли парам = "СостСчета" Тогда
		Возврат ?( Ошибка > 0, 5 + Ошибка, 4 + РежимВвода );
	ИначеЕсли парам = "АдресКлиента" Тогда
		Если Клиент.Выбран() = 0 Тогда Возврат ""; КонецЕсли;
		Возврат ПредставлениеАдреса();
	ИначеЕсли парам = "АдресДоставки" Тогда
		Если АдресДоставки.Выбран() = 0 Тогда Возврат ""; КонецЕсли;
		Возврат АдресСтрокой( АдресДоставки, 1, 4, ", " );
	ИначеЕсли парам = "АдресДоставкиФилиал" Тогда
		Если АдресДоставкиФилиал.Выбран() = 0 Тогда Возврат ""; КонецЕсли;
		Возврат АдресСтрокой( АдресДоставкиФилиал, 1, 4, ", " );
	ИначеЕсли парам = "Сумма" Тогда
		Возврат Формат( Итог( "Сумма" ), "Ч15.2, " );
	ИначеЕсли парам = "СуммаНал" Тогда
		Возврат Формат( Итог( "СуммаНал" ), "Ч15.2, " );
	ИначеЕсли парам = "КолДок" Тогда
		Возврат Формат( КоличествоСтрок(), "Ч10.0" );
	ИначеЕсли парам = "КолМестДост" Тогда
		табл = СоздатьОбъект( "ТаблицаЗначений" );
		ВыгрузитьТабличнуюЧасть( табл, "Клиент" );
		табл.Свернуть( "Клиент", "" );
		Возврат Формат( табл.КоличествоСтрок(), "Ч10.0" );
	ИначеЕсли парам = "Вес" Тогда
		Возврат Формат( Итог( "Вес" ), "Ч15.3, " );
	ИначеЕсли парам = "ВесСтроки" Тогда
		Возврат СокрЛП(Формат( Вес, "Ч15.3. " ));
	ИначеЕсли парам = "ВесБрутто" Тогда
		Возврат Формат( Итог( "ВесБрутто" ), "Ч15.3, " );
	ИначеЕсли парам = "ВесБруттоСтроки" Тогда
		Возврат СокрЛП(Формат( ВесБрутто, "Ч15.3. " ));
	ИначеЕсли парам = "Грузоподъемность" Тогда
		Если Машина.Выбран() = 0 Тогда Возврат ""; КонецЕсли;
		Возврат Формат( Машина.Грузоподъемность, "Ч15.3, " );
	ИначеЕсли парам = "Пройдено" Тогда
		Возврат СокрЛ(Формат( КилометражКон - КилометражНач, "Ч10.0, " ));
	ИначеЕсли парам = "КодКлиента" Тогда
		Возврат ?(Клиент.Выбран() = 0,"",Клиент.Код);
	ИначеЕсли парам = "НаимКлиента" Тогда
		Возврат ?(Клиент.Выбран() = 0,"",Клиент.ПолноеНаименование);
	ИначеЕсли парам = "ВремяДоставки" Тогда
		Возврат ?(Клиент.Выбран() = 0,"",Клиент.ВремяДоставки.Получить(ДатаДок));
	ИначеЕсли парам = "Коммент" Тогда
		Возврат ?(Счет.Выбран() = 0,"",Счет.Основание);
	ИначеЕсли парам = "Топливо" Тогда
		Возврат СокрЛ(Формат( Топливо, "Ч15.2, " ));
	КонецЕсли;   
КонецФункции

Процедура ПриОткрытии()
	Если (НазваниеНабораПрав() = "СпециалистПоПродаже")
	или (ИмяПользователя() = "Karandeja")
	или (ИмяПользователя() = "Silarajs")
	Тогда
		Если Автор <> Пользователь Тогда
			Сообщить("Можно редактировать только свои документы.");
			СтатусВозврата(0); Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПриВыбореЗакладки( 0, "Основная" );
	//ПодключитьСканер();
КонецПроцедуры

Процедура кнПровести()     
	
	ОпределитьГлавныйМаршрут();
	Провести(,1);
КонецПроцедуры

Процедура кнЗаписать()
	ПриЗаписи();
	Записать();
КонецПроцедуры

Процедура кнОК()
	Ответ = Вопрос("Сохранить документ?","Да+Нет+Отмена");
	Если Ответ = "Да" Тогда
		ПриЗаписи();
		Записать();
	ИначеЕсли Ответ = "Нет" Тогда
		Форма.Закрыть(0); Возврат;
	ИначеЕсли Ответ = "Отмена" Тогда
		Возврат;
	КонецЕсли;
	Ответ = Вопрос("Провести документ?","Да+Нет");
	Если Ответ = "Да" Тогда
		Провести(,1);
	ИначеЕсли Ответ = "Нет" Тогда
		Форма.Закрыть(0); Возврат;
	КонецЕсли;
	Форма.Закрыть(0);
КонецПроцедуры


Функция НайтиДокПоШтрихКоду( выбШтрихКод )
	док = СоздатьОбъект( "Документ" );
	Если док.ВыбратьПоЗначению(,,"IDD",выбШтрихКод) = 1 Тогда
		док.ПолучитьДокумент();
		Возврат док.ТекущийДокумент();
	Иначе
		Сообщить(Шаблон("Не найден документ по штрих-коду [выбШтрихКод]"),"I");
	КонецЕсли;
КонецФункции

Процедура НайтиНакладную( выбШтрихКод )
	Накл = НайтиДокПоШтрихКоду( выбШтрихКод );
	Если ПустоеЗначение(Накл) = 1 Тогда Возврат; КонецЕсли; 
	табл = СоздатьОбъект( "ТаблицаЗначений" );
	ВыгрузитьТабличнуюЧасть(табл);
	НомСтр = 0;
	
	Если табл.НайтиЗначение(Накл,НомСтр,"Накладная") = 0 Тогда
		Сообщить(Шаблон("Не найдена накладная [Накл.ПредставлениеВида()] [Накл.НомерДок] от [Накл.ДатаДок]."),"I");
		Возврат;
	КонецЕсли;	
	
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку() = 1 Цикл
		Если табл.Накладная.ТекущийДокумент()=Накл.ТекущийДокумент() Тогда
			ПолучитьСтрокуПоНомеру(табл.НомерСтроки);
			Принят = "V";
			АктивизироватьСтроку(табл.НомерСтроки);
		КонецЕсли;
	КонецЦикла;	
	
	
	
	//Если табл.НайтиЗначение(Накл,НомСтр,"Накладная") = 1 Тогда
	//	ПолучитьСтрокуПоНомеру(НомСтр);
	//	Принят = "V";
	//	АктивизироватьСтроку(НомСтр);
	//Иначе
	//	Сообщить(Шаблон("Не найдена накладная [Накл.ПредставлениеВида()] [Накл.НомерДок] от [Накл.ДатаДок]."),"I");
	//КонецЕсли;
КонецПроцедуры

Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)
	//Сообщить(Шаблон("Источник-[Источник] Событие-[Событие] Данные-[Данные]"));
	НайтиНакладную( Данные );
КонецПроцедуры


Процедура ПриЗакрытии()
	Сканер = "";
КонецПроцедуры

Функция Раскрасить()

	//Если ТекущийДокумент.Вид()="Счет" Тогда
	//	Сост = глПолучитьСостояниеЗаявки(ТекущийДокумент);
	//	Если ПустоеЗначение(Сост)=0 Тогда
	//		Возврат "BRUSH["+Сост.ЦветФона.НомерЦвета+"]COUNT[2]";
	//	КонецЕсли;
	//КонецЕсли;

	Если Счет.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаНаВозврат Тогда
		Возврат "BRUSH["+глПолучитьЦвет(255,0,0)+"]COUNT[3]";		
	Иначе 
		СостояниеЗаявки=глПолучитьСостояниеЗаявки(Счет,0);
		Если ПустоеЗначение(СостояниеЗаявки)=0 Тогда
			Если ((СостояниеЗаявки.Наименование="Ожидает отгрузки") ИЛИ (СостояниеЗаявки.Наименование="Отгружена")) ИЛИ (ПустоеЗначение(Накладная)=0) Тогда
			Иначе
				Возврат "BRUSH["+СостояниеЗаявки.ЦветФона.НомерЦвета+"]COUNT[3]";	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции
Функция СостояниеМашины(промМашина="")
	
	Если ПустоеЗначение(промМашина)=1 Тогда
		промМашина=Машина;
	КонецЕсли;
	
	Запрос = СоздатьОбъект("ODBCRecordSet");
	ТекстЗапроса = "
	
КонецФункции

//======================================================================
Процедура TrackPro()
	ИмяФайла="ExtForms\TrackPro\TrackPro.ert";
	Если ФС.СуществуетФайл(КаталогИБ()+ИмяФайла) =1 Тогда   
		ОткрытьФорму("Отчет",ТекущийДокумент(),КаталогИБ()+ИмяФайла);
	Иначе
		Предупреждение("Не обнаружена обработка для Track Pro. Обратитесь к администратору");
	КонецЕсли;
КонецПроцедуры // TrackPro

Процедура ОпределитьГлавныйМаршрут()
	
	Если (КилометражКон-КилометражНач)>0 Тогда 
		//главный - не нужно ничего определять
		МЛДокОсн="";
		Возврат;
	КонецЕсли;
	
	Если (ПустоеЗначение(Автор)=1) ИЛИ (ПустоеЗначение(Экспедитор)=1) Тогда
		Возврат;
	КонецЕсли;
	
		ТекстЗапроса = "SELECT TOP 1 Док.IDDOC [Док $Документ.МаршрутныйЛист]
		|			   FROM $Документ.МаршрутныйЛист Док (NOLOCK)
		|			   INNER JOIN _1sjourn Жур (NOLOCK) ON Жур.IDDOC = Док.IDDOC
		|			   WHERE Жур.DATE_TIME_IDDOC BETWEEN :Нач AND :Позиция~
		|					AND $Док.Экспедитор = :Экспедитор
		|					AND $Док.Машина = :Авто
		|					AND Док.IDDOC <> :ТекДок
		|					AND $Док.МЛДокОсн = Док.IDDOC
		|					AND ($Док.КилометражКон-$Док.КилометражНач)>0
//		|					AND $Док.АдресДоставки = :АдресДоставки
		|				ORDER BY Жур.DATE_TIME_IDDOC DESC
		|";
		
		Запрос=СоздатьОбъект("ODBCRecordSet");
		Запрос.УстановитьТекстовыйПараметр("Экспедитор",Экспедитор);
		Запрос.УстановитьТекстовыйПараметр("Авто",Машина);
//		Запрос.УстановитьТекстовыйПараметр("АдресДоставки",АдресДоставки);
		Запрос.УстановитьТекстовыйПараметр("Нач",ДатаДок);
		Запрос.УстановитьТекстовыйПараметр("ТекДок",ТекущийДокумент());
		Запрос.УстановитьТекстовыйПараметр("Позиция",СформироватьПозициюДокумента(?(Выбран()=1,ТекущийДокумент(),ПолучитьДокументТА()),0));
		
		табл = Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
		Если табл.КоличествоСтрок()>1 Тогда
			сзДок = СоздатьОбъект("СписокЗначений");
			табл.Выгрузить(сзДок,,,"Док");
			
			выб=МЛДокОсн;
			Если сзДок.ВыбратьЗначение(выб,"МЛ",,,0)=1 Тогда
				МЛДокОсн=выб;
			Иначе
				МЛДокОсн="";
			КонецЕсли;
		ИначеЕсли табл.КоличествоСтрок()=1 Тогда
			МЛДокОсн_=табл.ПолучитьЗначение(1,"Док");
			Если  МЛДокОсн<>МЛДокОсн_ Тогда
				МЛДокОсн=МЛДокОсн_;
				Сообщить("МЛ привязан к главному "+МЛДокОсн_);
			КонецЕсли;
		Иначе
			МЛДокОсн="";
		КонецЕсли;
		
		
КонецПроцедуры 
	

Форма.АдресДоставки.ВыборГруппы( 1 );
Форма.АдресДоставкиФилиал.ВыборГруппы( 1 );
Форма.выбКлиент.ВыборГруппы( 1 );

Форма.ИспользоватьЗакладки( 1 );
Форма.Закладки.ДобавитьЗначение( "Основная", "Общее" );
Форма.Закладки.ДобавитьЗначение( "Таблица", "Таблица" );

//Шрифт = Сервис.СоздатьШрифт("Wingdings",10);                                   
