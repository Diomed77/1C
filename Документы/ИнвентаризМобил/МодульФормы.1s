Перем ТП;//Табличное поле
Перем слПрихода,слСканирования,слТаблицы,слТовара,слОжПоставок,слДатаВремя;//Переменые окон (слоев) отображаемые на Экране. 
Перем ПередатьФокус;
Перем Таб,Таб_ТекущаяКолонка,Таб_ТекущаяСтрока,пСтолбцы;
Перем МойШрифт;
Перем флСообщения;
Перем 	п_НижОграничитель,п_ВерхОграничитель;	//ограничители отображения столбцов.
Перем ТекущийСлой, флПлюс;

Процедура кнТаблица() Далее
Процедура ПВ_ВывестиЗначение() Далее
Процедура ПВ_ВводЗначения() Далее
	
	
Функция ПолучитьЦвет(Красный = 0,Зеленый = 0,Синий = 0) Экспорт
    Возврат Макс(0,Синий)*65536+Макс(0,Зеленый)*256+Макс(0,Красный);
КонецФункции

Процедура НастроитьОкна(Показать=1)

КонецПроцедуры

Процедура НастроитьОкна1(Показать=1)
	Окна = СоздатьОбъект("Окна");
	//Окна.ВключитьМодальныйРежим();
	Окна.Максимизировать();
	
	Если Показать<>1 Тогда
		меню = Окна.ПолучитьМеню();
	КонецЕсли;
   
    а="";
 //   меню.ВыбратьЗначение(а);
	стр="";	
	Для Номер = 1 По Меню.РазмерСписка() Цикл
		меню.ПолучитьЗначение(Номер, стр); //получить значение и представление
		Окна.ВидимостьМеню(стр, Показать);
	КонецЦикла;
	Окна.ПоказыватьПанели(Показать);
	Если Показать<>1 Тогда
	//	Окна.Минимизировать(Форма);
		Окна.Максимизировать(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыводТовара(пСтрока)
	Перем текстЗаголовка,пТовар;
	Перем пСрокПред,пСрокТек;
	
	Если Таб.КоличествоСтрок()>0 Тогда
		пТовар=Таб.ПолучитьЗначение(пСтрока,"Товар");
		текстЗаголовка=Строка(пСтрока)+"."+"("+пТовар.Код+")"+пТовар.Наименование; 
		Форма.тТовар.Заголовок(текстЗаголовка);
		
//		пСрокПред=ПолучитьСрокРеализации(пТовар,ДокументОснование.Клиент);
		пСрокТек=Таб.ПолучитьЗначение(пСтрока,"СрокРеализФактическое");

		Если пТовар.СрокГодн = 0 Тогда пСрокПред = "???";
		КонецЕсли;
		
		текстЗаголовка="Код пост / Штрих Код: "+"                      "+                 
			СокрЛП(Строка(?(ПустоеЗначение(пТовар.КодПоставщика)=0,пТовар.КодПоставщика,"...........")))+
			"    / "+СокрЛП(Строка(?(ПустоеЗначение(пТовар.ШтрихКод)=0,пТовар.ШтрихКод,"...........")));

		Форма.тАртикул.Заголовок(текстЗаголовка);
		
		пКоличество=Таб.ПолучитьЗначение(пСтрока,"КоличествоФактическое");
		л_КоличествоФакт=Таб.ПолучитьЗначение(пСтрока,"КоличествоФактическое");
		пЕденица=пТовар.БазоваяЕдиницаИзмерения;
		текстКоличество="Кол: "+Строка(л_КоличествоФакт)+" из "+Строка(пКоличество)+" "+пЕденица;
		Форма.тКоличество.Заголовок(текстКоличество);

	Иначе
		Форма.тТовар.Заголовок("Пусто");
		Форма.тАртикул.Заголовок("Пусто");
		Форма.тКоличество.Заголовок("Пусто");
	КонецЕсли;
	Форма.Обновить();
КонецПроцедуры

Процедура ВыводКлиента(док)
	Перем текстЗаголовка;
	
//	текстЗаголовка=Строка(док.ДатаПрихода)+". "+док.Клиент.Наименование;
//	Форма.тКлиент.Заголовок(текстЗаголовка);
КонецПроцедуры
Процедура ВводНаОсновании(ДокОснование)

	
	

	//Данный фрагмент построен конструктором.
	//При повторном использовании конструктора, внесенные вручную изменения будут потеряны!!!
	Если ДокОснование.Вид() = "СличительнаяВедомость" Тогда
		Склад = ДокОснование.Склад;
		Шеф = ДокОснование.Шеф;
		Валюта = ДокОснование.Валюта;
		Дата_Курса = ДокОснование.Дата_Курса;
		Курс = ДокОснование.Курс;
		ПриходоватьБезНДС = ДокОснование.ПриходоватьБезНДС;
		ДатаНачалаИнв = ДокОснование.ДатаНачалаИнв;
		ДатаКонцаИнв = ДокОснование.ДатаКонцаИнв;
		Пересортица = ДокОснование.Пересортица;
		ЕстественнаяУбыль = ДокОснование.ЕстественнаяУбыль;
		ВидИнвентаризации = ДокОснование.ВидИнвентаризации;
		МОЛ1 = ДокОснование.МОЛ1;
		МОЛ2 = ДокОснование.МОЛ2;
		МОЛ3 = ДокОснование.МОЛ3;
		МОЛ4 = ДокОснование.МОЛ4;
		МОЛ5 = ДокОснование.МОЛ5;
		МОЛ6 = ДокОснование.МОЛ6;
		МОЛ7 = ДокОснование.МОЛ7;
		МОЛ8 = ДокОснование.МОЛ8;
		ЧЛЕН1 = ДокОснование.ЧЛЕН1;
		ЧЛЕН2 = ДокОснование.ЧЛЕН2;
		ПРЕДС = ДокОснование.ПРЕДС;
		ЧленыКомиссии = ДокОснование.ЧленыКомиссии;
		СебестоимостьШ = ДокОснование.СебестоимостьШ;
		СебестоимостьПриходШ = ДокОснование.СебестоимостьПриходШ;
		СебестоимостьРасходШ = ДокОснование.СебестоимостьРасходШ;
		ВсегоСуммаШ = ДокОснование.ВсегоСуммаШ;
		ВсегоНДСШ = ДокОснование.ВсегоНДСШ;
		НомерПост = ДокОснование.НомерПост;
		ДатаПост = ДокОснование.ДатаПост;
		КтоПост = ДокОснование.КтоПост;
		ГруппаТоваров = ДокОснование.ГруппаТоваров;
		ПриходоватьБезСебестоимости = ДокОснование.ПриходоватьБезСебестоимости;
		НеУчитыватьСрокиРеализации = ДокОснование.НеУчитыватьСрокиРеализации;
		Поставщик = ДокОснование.Поставщик;
		ДокументОснование = ДокОснование;
		ДокументКредНота = ДокОснование.ДокументКредНота;
		Агент = ДокОснование.Агент;
		ДокОснование.ВыбратьСтроки();
		Пока ДокОснование.ПолучитьСтроку() = 1 Цикл
			НоваяСтрока();
			Товар = ДокОснование.Товар;
			Единица = ДокОснование.Единица;
			Коэффициент = ДокОснование.Коэффициент;
			Цена = ДокОснование.Цена;
			КоличествоКнижное = ДокОснование.КоличествоКнижное;
			СуммаКнижная = ДокОснование.СуммаКнижная;
//			КоличествоФактическое = ДокОснование.КоличествоФактическое;
			СуммаФактическая = ДокОснование.СуммаФактическая;
			КоличествоРазницы = ДокОснование.КоличествоРазницы;
			СуммаРазницы = ДокОснование.СуммаРазницы;
			ТовКод = ДокОснование.ТовКод;
			СрокРеализ = ДокОснование.СрокРеализ;
			ШтрихКод = ДокОснование.ШтрихКод;
			ДатаПроизв = ДокОснование.ДатаПроизв;
			Партия = ДокОснование.Партия;
			СтрокаС = ДокОснование.СтрокаС;
			КодДляРозницы = ДокОснование.КодДляРозницы;
			ПродЦена = ДокОснование.ПродЦена;
			СуммаПродКнижная = ДокОснование.СуммаПродКнижная;
			СуммаПродФактическая = ДокОснование.СуммаПродФактическая;
			СуммаРазницыПрод = ДокОснование.СуммаРазницыПрод;
		КонецЦикла;
	КонецЕсли;



	ВыводКлиента(ДокОснование);
КонецПроцедуры

//{ПВ
Процедура ПВ_Инициализация()
	Сервис = СоздатьОбъект("Сервис");
	МойШрифт = Сервис.СоздатьШрифт("Arial", 24, 8,,,,);
	
	ФормаРасш = СоздатьОбъект("РасширениеФормы");
	ФормаРасш.УстановитьФорму(Форма);
	ФормаРасш.ПолучитьАтрибут("ПанельВвода").Шрифт = МойШрифт;
	ФормаРасш.ПолучитьАтрибут("ПанельВвода").ЦветШрифта = 255;
	ФормаРасш.ПолучитьАтрибут("ПанельВвода").ЦветФона = ПолучитьЦвет(255,255,185);
//	Сервис.УдалитьШрифт(МойШрифт);
	Форма.тКолонка.Маска();
	

	Сервис = СоздатьОбъект("Сервис");
	МойШрифт1 = Сервис.СоздатьШрифт("Arial", 32, 8,,,,);
	
	ФормаРасш1 = СоздатьОбъект("РасширениеФормы");
	ФормаРасш1.УстановитьФорму(Форма);
	ФормаРасш1.ПолучитьАтрибут("пвШтрихкод").Шрифт = МойШрифт1;
	ФормаРасш1.ПолучитьАтрибут("пвШтрихкод").ЦветШрифта = ПолучитьЦвет(0,0,0);
	ФормаРасш1.ПолучитьАтрибут("пвШтрихкод").ЦветФона = ПолучитьЦвет(255,255,255);
	

	
КонецПроцедуры	

Процедура ПВ_ВывестиЗначение()
	Перем колТип;
	Перем колЗаголовок;
	Перем колДлина;
	Перем колТочность;
	Перем колШирина;
	Перем колФормат;
	Перем колПоложение;
	
	
	Таб.ПолучитьПараметрыКолонки(Таб_ТекущаяКолонка,колТип,колДлина,колТочность,колЗаголовок,колШирина,колФормат,колПоложение);
	Форма.тКолонка.Заголовок(колЗаголовок);
	
	Если Таб.ПолучитьПараметрыКолонки(Таб_ТекущаяКолонка)="КоличествоФактическое" Тогда
//		ВыводИнфо();
		пТовар=Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"Товар");
		пЕдиница=Таб.Единица;
		Форма.тКолонка.Заголовок(колЗаголовок+"("+пЕдиница+")");
	КонецЕсли;

	Если Таб.ПолучитьПараметрыКолонки(Таб_ТекущаяКолонка)="КоличествоФактическое" Тогда
		Форма.ПанельВвода.НазначитьТип("Строка",10,3);
	Иначе
		Форма.ПанельВвода.НазначитьТип(колТип,колДлина,колТочность);
	КонецЕсли;
	
	ПенельВвода=ПолучитьПустоеЗначение(ПенельВвода);
	ПанельВвода=Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,Таб_ТекущаяКолонка);
	ВыводТовара(Таб_ТекущаяСтрока);
	
	Форма.Обновить();
	ПередатьФокус = "ПанельВвода";
	Форма.Закрыть(0);
	
КонецПроцедуры

//======================================================================
Функция ПроверкаВТаблице()

	л_ТабВремСтрока=0;
	л_ТабВрем=СоздатьОбъект("ТаблицаЗначений");
//	ВыгрузитьТабличнуюЧасть(л_ТабВрем);
	л_ТабВрем.Загрузить(Таб);
	л_ТабВрем.ВыбратьСтроки();
	Пока л_ТабВрем.ПолучитьСтроку() = 1 Цикл
//		Сообщить(л_ТабВрем.СрокРеализ);
		л_ТекущийТовар=Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"Товар");
		Если  ПустоеЗначение(л_ТекущийТовар)=1 Тогда
			Возврат 0;
		КонецЕсли;
		Если (л_ТабВрем.Товар=л_ТекущийТовар)и(л_ТабВрем.СрокРеализ=ПанельВвода) Тогда
			л_ТабВремСтрока=л_ТабВрем.НомерСтроки;
		КонецЕсли;
	КонецЦикла;	
	Возврат л_ТабВремСтрока;
КонецФункции // ПроверкаВТаблице

Процедура ПВ_ВводЗначения()
 //  	Сообщить(Таб_ТекущаяКолонка);
	
	//ввод срока годности
	Таб.ПолучитьСтрокуПоНомеру(Таб_ТекущаяСтрока);
	
	Если Таб.ПолучитьПараметрыКолонки(Таб_ТекущаяКолонка)="СрокРеализФактическое" Тогда
		
		Если (Таб.СрокРеализ<>ПанельВвода)или (Таб.СрокРеализФактическое<>ПанельВвода)  Тогда

			л_ТабВремСтрока=ПроверкаВТаблице();
			
			Если л_ТабВремСтрока<>0 Тогда
				Таб_ТекущаяСтрока=л_ТабВремСтрока;
				Таб.ПолучитьСтрокуПоНомеру(Таб_ТекущаяСтрока);
			КонецЕсли;	
			
		
			Если л_ТабВремСтрока=0 Тогда
					Таб.НоваяСтрока();
					Таб.СклАдрес = Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"СклАдрес");
					Таб.Товар = Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"Товар");
					Таб.Единица = Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"Единица");
					Таб.Коэффициент = Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"Коэффициент");
					Таб.КоличествоКнижное = 0;
					Таб.КоличествоФактическое = 0;
					Таб.КоличествоРазницы = Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"КоличествоРазницы");
					Таб.СрокРеализ = ПанельВвода;
					Таб.СрокРеализФактическое = ПанельВвода;
					Таб.ШтрихКод = Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"ШтрихКод");
					Таб_ТекущаяСтрока=Таб.НомерСтроки;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	//
	
	Если (ТекущийСлой=слТовара)
			И (Таб_ТекущаяКолонка=п_ВерхОграничитель)			
	Тогда
		Если флПлюс="Плюс" Тогда
			л_КолПВ=Число(ПанельВвода);
			л_КолТаб=Число(Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,Таб_ТекущаяКолонка));
			л_КолСумма=л_КолПВ+л_КолТаб;
			ПанельВвода=л_КолСумма;
			флПлюс="";	
		ИначеЕсли флПлюс="Минус" Тогда	
			л_КолПВ=Число(ПанельВвода);
			л_КолТаб=Число(Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,Таб_ТекущаяКолонка));
			л_КолСумма=л_КолТаб-л_КолПВ;
			ПанельВвода=л_КолСумма;
			флПлюс="";	
		КонецЕсли;
	КонецЕсли;	

	Таб.УстановитьЗначение(Таб_ТекущаяСтрока,Таб_ТекущаяКолонка,ПанельВвода);
	ЗагрузитьТабличнуюЧасть(Таб);
	ВыводТовара(Таб_ТекущаяСтрока);
	ПередатьФокус = "ПанельВвода"; 
	Форма.Закрыть(0);				
	

КонецПроцедуры	

//}ПВ

Процедура ЗаполнитьСклАдрес()
	
	спр = СоздатьОбъект( "Справочник.СкладскиеАдреса" );
	таб.ВыбратьСтроки();
	Пока таб.ПолучитьСтроку() = 1 Цикл
		промТовар = таб.Товар;
		Если Склад.ТипСклада=Перечисление.ТипыСкладов.СкладНеликвидов Тогда
//			табл.Группа = "NOCENOTIE PRODUKTI";
			таб.СклАдрес  = "";
//			табл.Сорт = 0;
		//ИначеЕсли док.Склад.ТипСклада=Перечисление.ТипыСкладов.СкладРаспродажи Тогда
		//	табл.Группа = "IZPARDO№ANA";
		//	табл.СклАдрес  = "";
		//	табл.Сорт = 0;
		Иначе

			//вначале прописываем фразу на случай, если товара не привязан к адресу
			Если Склад.ТипСклада=Перечисление.ТипыСкладов.СкладРаспродажи Тогда
//				табл.Группа = "IZPARDO№ANA";
				таб.СклАдрес  = "";
//				табл.Сорт = 0;
			КонецЕсли;
			
			рез=спр.ВыбратьЭлементыПоРеквизиту("Товар",промТовар,0,0);
			Ячейка="";
			Если рез=1 Тогда
				Пока Спр.ПолучитьЭлемент() = 1 Цикл
					пЯчейка = спр.ТекущийЭлемент();
					Если пЯчейка.Родитель.Родитель.Родитель.Склад=Склад Тогда
						Ячейка = пЯчейка;
						Если Склад.ТипСклада=Перечисление.ТипыСкладов.СкладРаспродажи Тогда
//							таб.Группа = "IZPARDO№ANA "+АдресСтрокой( Ячейка, 1, 1, "" ) + Шаблон( " ([Ячейка.Родитель.Родитель.Родитель.МестоХранения.УсловияХранения])" );
						Иначе
//							таб.Группа = АдресСтрокой( Ячейка, 1, 1, "" ) + Шаблон( " ([Ячейка.Родитель.Родитель.Родитель.МестоХранения.УсловияХранения])" );
						КонецЕсли;
						таб.СклАдрес = АдресСтрокой( Ячейка, 1, 1, "" )+"-"+АдресСтрокой( Ячейка, 2, 4, "-" );
						таб.СклАдрес=СокрЛП(таб.СклАдрес);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			Если ПустоеЗначение(Ячейка)=1 Тогда // если ячейка для товара не задана
				Если Склад.ТипСклада=Перечисление.ТипыСкладов.СкладРаспродажи Тогда
				Иначе
//					табл.Группа = "ййй";
				КонецЕсли;					
				Если промТовар.МестоХранения.Выбран() = 1 Тогда
					таб.СклАдрес = промТовар.МестоХранения.УсловияХранения;
//					табл.Сорт = промТовар.МестоХранения.Код;
				Иначе
					таб.СклАдрес = "не указан";
//					табл.Сорт = 99;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	
	
КонецПроцедуры // ЗаполнитьСклАдрес
//======================================================================
Процедура ЗаполнитьШтрихКод()
	таб.ВыбратьСтроки();
	Пока таб.ПолучитьСтроку() = 1 Цикл
		Если ПустоеЗначение(Таб.ШтрихКод)=1 Тогда
			Таб.ШтрихКод=Таб.Товар.ШтрихКод;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры // ЗаполнитьШтрихКод();

//{ТП
Процедура ТП_совмещениеТЧ(ТП_ТекСтрока)
	СтрокаТЧ=Таб.ПолучитьЗначение(ТП_ТекСтрока,"НомерСтрокиДокумента");
	//ВыбратьСтроки();
	ПолучитьСтрокуПоНомеру(СтрокаТЧ);
КонецПроцедуры	
Процедура ТП_Обновить()

	ВыгрузитьТабличнуюЧасть(Таб,пСтолбцы);
	Таб.НоваяКолонка("СклАдрес",,,,,,,);
	ЗаполнитьСклАдрес();	
	ЗаполнитьШтрихКод();
	
	Таб.УстановитьПараметрыКолонки("НомерСтроки",,,,"Номер",,,);
	Таб.УстановитьПараметрыКолонки("ШтрихКод",,,,"Штрих Код",,,);
	Таб.УстановитьПараметрыКолонки("Товар",,,,"Товар",,,);
	Таб.УстановитьПараметрыКолонки("СрокРеализ","Дата",,,"Срок реализации",,,);
	Таб.УстановитьПараметрыКолонки("СрокРеализФактическое","Дата",,,"Срок реализации",,,);
	Таб.УстановитьПараметрыКолонки("КоличествоКнижное","Число",10,3,"Количество",,,);
	Таб.УстановитьПараметрыКолонки("КоличествоФактическое","Число",10,3,"Колич. факт.",,,);
	Таб.Сортировать("+СклАдрес");
//	Таб.Сортировать("+НомерЕдиницыКомплекта");
	ТП.ОбновитьСтроки();
//	ТП.АвтоШирина();
	Форма.Обновить();
КонецПроцедуры


//------------------------------
Процедура тпКнопка_ПриВыводеСтроки(тп, ОформлениеСтроки, ДанныеСтроки, ТипРегиона)
	Если флСообщения=1 Тогда
		сообщить("ПриВыводеСтроки");
	КонецЕсли;
	
	//Если ДанныеСтроки.Количество=ДанныеСтроки.КоличествоНеПодвержденое Тогда
	//	ОформлениеСтроки.ЦветФона = глПолучитьЦвет(0,255,0);
	//	//<ПолучитьЦвет(R,G,B)>
	//КонецЕсли;
	//Если ДанныеСтроки.Количество<>ДанныеСтроки.КоличествоНеПодвержденое Тогда
	//	ОформлениеСтроки.ЦветФона = глПолучитьЦвет(255,0,0);
	//	//<ПолучитьЦвет(R,G,B)>
	//КонецЕсли;		
			//Параметры:
	//
	//ОформлениеСтроки - тип: ОформлениеСтроки. Объект для управления оформлением выводимой строки табличного поля. 
	//ДанныеСтроки - тип: ДанныеСтроки. Данные (коллекция значений полей) выводимой строки табличного поля. 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает при выводе (отображении) строки табличного поля.
	
КонецПроцедуры

Процедура тпКнопка_Выбор(тп, Стр, Колонка, ТипРегиона)
	Если флСообщения=1 Тогда
		сообщить("Выбор");
	КонецЕсли;

	Таб_ТекущаяСтрока=ТП.ТекущаяСтрока;
	Таб_ТекущаяКолонка=п_НижОграничитель;
	ВыводТовара(Таб_ТекущаяСтрока);
//	ВыводИнфо();	
	ПередатьФокус = "кнТовар"; 
	Форма.Закрыть(0);
	
	//Параметры:
	//
	//Строка - тип: определяется поставищком данных. Значение, идентифицирующее строку ТП. 
	//Колонка - тип: КолонкаТабличногоПоля 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает при двойном клике на строке табличного поля, или нажатии клавиши Enter.
	
	//зн = тпСклады.ТекущиеДанные.Получить("Наименование").ТекущийЭлемент();
	//тпСклады.РедактироватьЗначение(1,Колонка,3,зн,0,0,"ВыбРеквизит","0x00000020"); 
	//Форма.ВыбРеквизит.НазначитьТип("Справочник.Склады");
	
КонецПроцедуры


Процедура тпКнопка_ПриАктивизацииСтроки(тп)
	Если флСообщения=1 Тогда 
		сообщить("ПриАктивизацииСтроки");
	КонецЕсли;
	
	Таб_ТекущаяСтрока=ТП.ТекущаяСтрока;
	Таб_ТекущаяКолонка=п_НижОграничитель;
	ВыводТовара(Таб_ТекущаяСтрока);	
//	ВыводИнфо();

	
	//ОбновитьКартинки();
	
	//Описание: Возникает, когда любая строка становится текущей.
	
КонецПроцедуры


Процедура тпКнопка_ПриАктивизацииКолонки(тп)
	Если флСообщения=1 Тогда
		сообщить("ПриАктивизацииКолонки");
	КонецЕсли;
	// Описание: Возникает, когда любая колонка становится текущей.
	
КонецПроцедуры

Процедура тпКнопка_ПриАктивизацииЯчейки(тп)
	Если флСообщения=1 Тогда
		сообщить("ПриАктивизацииЯчейки");
	КонецЕсли;
	// Описание: Возникает, когда ячейка становится текущей. Порядок прохождения событий: ПриАктивизацииСтроки, ПриАктивизацииКолонки, ПриАктивизацииЯчейки.
	
КонецПроцедуры

Процедура тпКнопка_ПриВыбореЗаголовка(тп, Колонка)
	Если флСообщения=1 Тогда
		сообщить("ПриВыбореЗаголовка");
	КонецЕсли;
	//Параметры:
	//
	//Колонка - тип: КолонкаТабличногоПоля. Колонка, заголовок которой выбран. 
	//Описание: Возникает, когда пользователь выбирает мышью заголовок колонки.
	
КонецПроцедуры

Процедура тпКнопка_ПриКонтекстномМеню(тп, ТипРегиона, Колонка, Стр)
	Если флСообщения=1 Тогда
		сообщить("ПриКонтекстномМеню");
	КонецЕсли;
	//Параметры:
	//
	//ТипРегиона - тип: ТипыРегионовТП 
	// ТипыРегионовТП
	// Тип: Перечисление
	// 
	// Значения: 0 - регион не задан 
	// 1 - заголовок 
	// 2 - шапка 
	// 3 - строки (основная часть) 
	// 4 - подвал  
	//
	//Колонка - тип: КолонкаТабличногоПоля. Колонка табличного поля, на которой было вызвано контекстное меню. 
	//Строка - тип: определяется поставищком данных. Значение, идентифицирующее строку ТП. 
	//Описание: Возникает, когда необходимо отобразить контекстное меню.
	
	//тут делаем что надо
КонецПроцедуры

Процедура тпКнопка_ПриВыбореФлажка(тп, Стр, Колонка, ТипРегиона)
	Если флСообщения=1 Тогда
		сообщить("ПриВыбореФлажка");
	КонецЕсли;
	
	//Параметры:
	//
	//Строка - тип: определяется поставищком данных. Значение, идентифицирующее строку ТП. 
	//Колонка - тип: КолонкаТабличногоПоля 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает, когда пользователь изменяет значение флажка.
	
КонецПроцедуры

Процедура тпКнопка_НачалоПеретаскивания(тп, ДопустимыеДействия, Значение, Колонка, ТипРегиона, ТипЦели)
	Если флСообщения=1 Тогда
		сообщить("НачалоПеретаскивания");
	КонецЕсли;
	//
	//Параметры:
	//
	//ДопустимыеДействия - тип: Число. (Выход) Список допустимых действий перетаскивания. Список задается как сумма следующих значений:
	//
	//1 - копирование (Copy) 
	//2 - перетаскивание (Move) 
	//4 - связывание (Link) 
	//Значение по-умолчанию 1. Если необходимо разрешить другие действия, нужно изменить значение этого параметра на выходе из обработчика события. Если передать 0, т.е. не определить ни одного действия, Перетаскивание не начнется.
	//
	//Значение - тип: определяется поставщиком данных. (Вход) Значение, идентифицирующее строку табличного поля. (Выход) Значение, которое будет представлять перетаскиваемые данные.
	//
	//Колонка - тип: КолонкаТабличногоПоля
	//
	//ТипРегиона - тип: ТипыРегионовТП
	//
	//ТипЦели - тип: Число. (Выход) Определяет логическую область отображения перетаскиваемых данных в ТП.
	//
	//0 - не задано 
	//1 - ячейка 
	//2 - строка 
	//3 - колонка 
	//Это значение используется для определения области ТП, в которой не нужно формировать события проверки перетаскивания, в том случае когда ЭУ-приемником является то же ТП, что и источник.
	//
	//Описание: Возникает в ЭУ источнике данных, когда пользователь начинает перетаскивание (Drag&Drop).
	
КонецПроцедуры

Процедура тпКнопка_ОкончаниеПеретаскивания(тп, Действие, Значение, Колонка, ТипРегиона)
	Если флСообщения=1 Тогда
		сообщить("ОкончаниеПеретаскивания");
	КонецЕсли;
	//
	//Параметры:
	//
	//Действие - тип: Число. Действие - результат операции перетаскивания. Допустимые действия:
	//
	//0 - нет действия 
	//1 - копирование (Copy) 
	//2 - перетаскивание (Move) 
	//4 - связывание (Link) 
	//Значение - тип: Любой. Значение, представляющее перетаскиваемые данные. Это значение было задано в событии НачалоПеретаскивания|НачалоПеретаскивания. 
	//Колонка - тип: КолонкаТабличногоПоля 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает в ЭУ источнике данных, когда завершается операция перетаскивания (Drag&Drop).
	//
	//Обычная обработка: в случае операции 2 (перетаскивания или Move) нужно удалить перетаскиваемые данные. В параметре Действие ЭУ источник данных всегда получит одно из тех действий, которое он определил для себя в событии НачалоПеретаскивания / DragStart.
	//
	//Порядок прохождения событий: 
	//НачалоПеретаскивания|НачалоПеретаскивания - в источнике, 
	//ПроверкаПеретаскивания|ПроверкаПеретаскивания - в назначении, 
	//Перетаскивание|Перетаскивание - в назначении, 
	//ОкончаниеПеретаскивания - в источнике. 
КонецПроцедуры

Процедура тпКнопка_ПроверкаПеретаскивания(тп, Действие, Значение, СтрокаТП, КолонкаТП, ТипРегионаТП, ТипЦели)
	Если флСообщения=1 Тогда
		сообщить("ПроверкаПеретаскивания");
	КонецЕсли;
	//
	//Параметры:
	//
	//Действие - тип: Число. (Выход) Действие которое произойдет при совершении перетаскивания. По-умолчанию 0. Допустимые действия:
	//
	//0 - нет действия 
	//1 - копирование (Copy) 
	//2 - перетаскивание (Move) 
	//4 - связывание (Link) 
	//Значение - тип: Любой. Значение, представляющее перетаскиваемые данные. Это значение было задано в обработчике события НачалоПеретаскивания|НачалоПеретаскивания.
	//
	//СтрокаТП - тип: Любой. Значение представляющее строку табличного поля, в которую идет перетаскивание (находится под курсором). Обеспечивается поставщиком данных.
	//
	//
	//КолонкаТП - тип: КолонкаТабличногоПоля. Колонка табличного поля, в которую идет перетаскивание (находится под курсором). 
	//ТипРегионаТП - тип: ТипыРегионовТП. Тип региона, в который идет перетаскивание. 
	//ТипЦели - тип: Число. (Выход) Определяет логическую область приемника перетаскиваемых данных, которая подсвечивается рамкой. Значение по-умолчанию: если ЭУ источник данных - табличное поле, то значение, заданное в обработчике события НачалоПеретаскивания|НачалоПеретаскивания; если источник данных - некий другой ЭУ, то значение равно 0.
	//
	//0 - не задано 
	//1 - ячейка 
	//2 - строка 
	//3 - колонка 
	//Описание: Возникает в ЭУ назначения перетаскивания для определения действия, которое произойдет при совершении операции перетаскивания. (Drag&Drop)
	//
	//Главное назначение события - проверить возможность совершения операции перетаскивания и определить Действие. Событие возникает всякий раз, когда изменяется строка или колонка ТП. Если строка или колонка не определяются под курсором мыши, то значения соответствующих параметров будут равны пустому значению.
	
КонецПроцедуры

Процедура тпКнопка_Перетаскивание(тп, Действие, Значение, СтрокаТП, КолонкаТП, ТипРегионаТП)
	Если флСообщения=1 Тогда
		сообщить("Перетаскивание");
	КонецЕсли;
	//
	//Параметры:
	//
	//Действие - тип: Число. Действие, которое нужно выполнить для совершения перетаскивания. Равно значению параметра Действие на выходе из события ПроверкаПеретаскивания / DragCheck. Допустимые действия:
	//
	//1 - копирование (Copy) 
	//2 - перетаскивание (Move) 
	//4 - связывание (Link) 
	//Значение - тип: Любой. Значение, представляющее перетаскиваемые данные. Это значение было задано в обработчике события НачалоПеретаскивания|НачалоПеретаскивания.
	//
	//СтрокаТП - тип: Любой. Значение представляющее строку табличного поля, в которую идет перетаскивание (находится под курсором). Обеспечивается поставщиком данных.
	//
	//
	//КолонкаТП - тип: КолонкаТабличногоПоля. Колонка табличного поля, в которую идет перетаскивание (находится под курсором). 
	//ТипРегионаТП - тип: ТипыРегионовТП. Тип региона, в который идет перетаскивание. 
	//Описание: Возникает в ЭУ назначения, когда совершается операция перетаскивания (Drag&Drop).
	//
	//Если строка или колонка не определяются под курсором мыши, то значения соответствующих параметров будут равны пустому значению.
	
КонецПроцедуры

Процедура тпКнопка_ПриУничтожении(тп) 
	Если флСообщения=1 Тогда
		сообщить("ПриУничтожении");
	КонецЕсли;
	//Параметры: нет 
	//Описание: Событие вызывается при уничтожении контрола, с которым связано ТП, до уничтожения самого ТП. 
	
КонецПроцедуры

Процедура тпКнопка_ПриНачалеБыстрогоПоиска(тп, чТипБыстрогоПоиска, чФСО)
	Если флСообщения=1 Тогда
		сообщить("ПриНачалеБыстрогоПоиска");
	КонецЕсли;
	// 
	//Параметры: 
	//чТипБыстрогоПоиска, тип: Число 
	//Тип быстрого поиска: 
	//1 - текстовый быстрый поиск 
	//
	//чФСО, тип: Число 
	//Доступ: чтение и запись
	//
	//Флаг стандартной обработки. Возможные значения для установки: 
	//1 - быстрый поиск разрешен 
	//0 - быстрый поиск запрещен 
	//Значение по умолчанию: 1
	// 
	//Описание: Событие вызывается до инициализации окна быстрого поиска и позволяет управлять разрешением на его создание.
	// 
	
КонецПроцедуры

Процедура тпКнопка_ПриБыстромПоиске(тп, чТипБыстрогоПоиска, нДанные, чФСО)
	Если флСообщения=1 Тогда
		сообщить("ПриБыстромПоиске");
	КонецЕсли;
	// 
	//Параметры: 
	//чТипБыстрогоПоиска, тип: Число 
	//Тип быстрого поиска: 
	//1 - текстовый быстрый поиск 
	//
	//нДанные, тип: для текстового быстрого поиска - Строка 
	//Доступ: чтение и запись
	//
	//Данные, введенные в окне быстрого поиска
	//
	//
	//чФСО, тип: Число 
	//Флаг стандартной обработки. Возможные значения для установки: 
	//1 - быстрый поиск разрешен 
	//0 - быстрый поиск запрещен 
	//Значение по умолчанию: 1
	// 
	//Описание: Событие вызывается до выполнения системной процедуры быстрого поиска и позволяет организовать специальные алгоритмы поиска.
	//Возможна трансформация данных с последующей системной обработкой, а также полная замена системной обработки на собственную. 
	
КонецПроцедуры

Процедура тпКнопка_ПриОкончанииБыстрогоПоиска(тп, флРезультат, флПерепозиционировано)
	Если флСообщения=1 Тогда
		сообщить("ПриОкончанииБыстрогоПоиска");
	КонецЕсли;
	// 
	//Параметры: 
	//флРезультат, тип: Число 
	//Причина закрытия окна быстрого поиска. 
	//1 - закрытие клавишей ENTER 
	//0 - отмена быстрого поиска (любым способом) 
	//
	//флПерепозиционировано, тип: Число 
	//Флаг, отражающий факт перепозиционирования непосредственно перед закрытием окна БП 
	//1 - ТП было перепозиционировано 
	//0 - ТП не было перепозиционировано 
	// 
	//Описание: Событие вызывается после закрытия окна быстрого поиска.
	
	
КонецПроцедуры

Процедура тпКнопка_ПриПеремещенииКолонки(тп, Колонка, чСдвиг, чФСО)
	Если флСообщения=1 Тогда
		сообщить("ПриПеремещенииКолонки");
	КонецЕсли;
	// 
	//Параметры: Колонка, тип: КолонкаТабличногоПоля
	//
	//
	//чСдвиг, тип: Число 
	//Предлагаемый сдвиг колонки
	//
	//
	//чФСО, тип: Число 
	//Флаг стандартной обработки. Возможные значения для установки: 
	//1 - перемещение колонки разрешено 
	//0 - перемещение колонки запрещено 
	//Значение по умолчанию: 1
	// 
	//Описание: Событие вызывается при интерактивном перемещении колонки ТП непосредственно перед выполнением перемещения. 
	
КонецПроцедуры

Процедура тпКнопка_ПриИзмененииВидимостиКолонки(тп, Колонка, флВидимость, чФСО)
	Если флСообщения=1 Тогда
		сообщить("ПриИзмененииВидимостиКолонки");
	КонецЕсли;
	// 
	//Параметры: Колонка, тип: КолонкаТабличногоПоля
	//
	//
	//флВидимость, тип: Число 
	//Предлагаемое значение флага видимости колонки
	//
	//
	//чФСО, тип: Число 
	//Флаг стандартной обработки. Возможные значения для установки: 
	//1 - изменение видимости колонки разрешено 
	//0 - изменение видимости колонки запрещено 
	//Значение по умолчанию: 1
	// 
	//Описание: Событие вызывается при интерактивном изменении видимости колонки ТП непосредственно перед выполнением изменения видимости. 
	
КонецПроцедуры

Процедура тпКнопка_ПриИзмененииШириныКолонки(тп)
	Если флСообщения=1 Тогда
		сообщить("ПриИзмененииШириныКолонки");
	КонецЕсли;
	// 
	//Параметры: нет
	// 
	//Описание: Событие вызывается при интерактивном изменении ширины одной или нескольких колонок. 
	
КонецПроцедуры
//------------------------------
Процедура тпКнопка_ПриРедактированииЗначения(тп,Стр,Кол,Рег,_Знач)
	Если флСообщения=1 Тогда
		сообщить("ПриРедактированииЗначения");
	КонецЕсли;
	
	Таб.УстановитьЗначение(ТП.ТекущаяСтрока,ТП.ТекущаяКолонка.Имя,_Знач);
    
	ТП.ОбновитьСтроки();
	ТП_совмещениеТЧ(ТП.ТекущаяСтрока);
	

	ТП_Обновить();	
	
КонецПроцедуры // ПриРедактированииЗначения(Стр, Кол, Рег, Знач)
//------------------------------

//------------------------------
Процедура ТП_колонки(ТП)

//	ИмяКолонки="НомерСЕ";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = "Номер товара";
////	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.Видимость = 1;
//	Колонка.Ширина				=20;
//	
//	ИмяКолонки="НомерСК";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = "Номер товара в комплекте";
////	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.Видимость = 1;
//	Колонка.Ширина				=20;
//	
	//ИмяКолонки="НомерКомплекта";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.Видимость = 1;
	
//	ИмяКолонки="Наименование";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = ИмяКолонки;
//	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.ИзменятьВидимость = 0;
	
	ИмяКолонки="СклАдрес";
	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	Колонка.Заголовок         = ИмяКолонки;
	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	Колонка.ИзменятьВидимость = 0;
	Колонка.Ширина				=15;	
	
//	ИмяКолонки="Товар";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = ИмяКолонки;
//	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.ИзменятьВидимость = 0;
//	Колонка.Ширина				=20;
	
	//
	//
	//ИмяКолонки="Поставщик";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=90;
	//
	//ИмяКолонки="Артикул";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;

	//ИмяКолонки="ТовКод";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;

	//ИмяКолонки="ЕдиницаКл";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Единица";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=30;
	//
	//ИмяКолонки="ЦенаИзКатегории";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Цена из кат.";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	//
	//ИмяКолонки="Цена";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	//	
	//ИмяКолонки="ЦенаСНДС";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Цена c НДС";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	//
	//
	//ИмяКолонки="ПроцентСкидки";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Скидки";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;	

	//ИмяКолонки="КоличествоКнижное";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "КолНач";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=10;
	//
	ИмяКолонки="СрокРеализФактическое";
	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	Колонка.Заголовок         = "Партия";
	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	Колонка.ИзменятьВидимость = 0;
	Колонка.Ширина				=10;
	
	ИмяКолонки="КоличествоФактическое";
	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	Колонка.Заголовок         = "КолФакт";
	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	Колонка.ИзменятьВидимость = 0;
	Колонка.Ширина				=10;
	
	//ИмяКолонки="Сумма";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Сумма без НДС";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	//	
	//ИмяКолонки="СуммаНДС";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.Видимость = 0;
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	
	//ИмяКолонки="СуммаНП";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.Видимость = 0;
	//Колонка.ИзменятьВидимость = 0;	
	//Колонка.Ширина				=50;
	//
	//ИмяКолонки="Всего";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Всего";
	//Колонка.Данные            = СокрЛП(Строка(ТП.Колонки.СуммаНДС+ТП.Колонки.Сумма));
	//Колонка.Видимость = 1;
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	////Формат(Сумма+?(СуммаВклНДС=1,0,СуммаНДС)+?(СуммаВклНП=1,0,СуммаНП),"Ч15.2.,")
	//
	//ИмяКолонки="фКартинка1";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Картинка 1";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=18;
	//Колонка.ИзменениеРазмера	=0;
	//
	//ИмяКолонки="фКартинка2";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Картинка 2";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=18;
	//Колонка.ИзменениеРазмера	=0;
	//
	//ИмяКолонки="фКартинка3";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Картинка 3";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=18;
	//Колонка.ИзменениеРазмера	=0;
	
//	ИмяКолонки="НомерСтрокиДокумента";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = ИмяКолонки;
//	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.Видимость = 1;
//	
//
//	
//	ИмяКолонки="НомерЕдиницыКомплекта";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = ИмяКолонки;
//	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.Видимость = 1;

КонецПроцедуры

//////////////////////////////////////////////////////////
Процедура ТП_Инициализация()
		ОчиститьОкноСообщений();
	
	оФорма = СоздатьОбъект("Форма");
	оФорма.УстановитьФорму(Форма);
	ТП = оФорма.СоздатьЭлементУправления("ТабличноеПоле", "тпКнопка_");
	// свойства ТП
	ТП.ВертСкроллер = 1; // 0-авто, 1-всегда, 2-никогда
	ТП.НачальноеПредставление = 0; // 0-с начала, 1-с конца
	ТП.РежимВыделенияСтроки = 2; // 0-ячейка, 1-строка, 2-строка=ЦветТекстаВыделения2 и ЦветФонаВыделения2
	ТП.РежимВыделения = 1; // 0-выдел. одной строки, 1-выдел. неск. строк
	ТП.ВертикальныеЛинии = 1;
	ТП.ГоризонтальныеЛинии = 1;
	ТП.ОтображатьЗаголовки = 1;
	ТП.СтильЗаголовков = 0; // 0-3D, 1-плоский
	ТП.СтильАктивногоЗаголовка = 1; // 0-не выделяется, 1-выделяется
	ТП.ТаймаутОбновления = 0; // Х сек, 0-не обновлять автоматически
	ТП.ТаймаутБыстрогоПоиска = 1000; // Х мсек, 0-автоматически не пытаться
	ТП.ИзменятьПозициюКолонок = 1;
	//тпСклады.ЦветЛиний = 0; // цвета по умолчанию
	//тпСклады.ЦветТекста = 0;
	//тпСклады.ЦветФона = 0;
	//тпСклады.ЦветТекстаВыделения = 0;
	//тпСклады.ЦветФонаВыделения = 0;
	//тпСклады.ЦветТекстаВыделения2 = 0;
	//тпСклады.ЦветФонаВыделения2 = 0;
	//тпСклады.ЦветФонаЧередованияСтрок = 0; // цвета по умолчанию
	глФабрика = СоздатьОбъект("ФабрикаОбъектов");
	ШрифтАриал10Жирный = глФабрика.Шрифт("Arial LV", 10, 1);
	ТП.Шрифт=ШрифтАриал10Жирный;
	ТП.ЧередованиеЦветовСтрок = 1;
	ТП.РазрешитьНачалоПеретаскивания = 1; // 1-разрешает ЭУ выступать источником перетаскивания, 0-запрещает
	ТП.РазрешитьПеретаскивание = 1; // 1-разрешает ЭУ выступать приемником перетаскивания, 0-запрещает
	ТП.ФиксацияСлева = 0; // кол-во фиксированных колонок
	ТП.ФиксацияСправа = 0;
	// колонки
	ТП_колонки(ТП);
	//// поставщик
	Источник=СоздатьОбъект("ПоставщикДанныхТЗ");
	Источник.УстТаблицуЗначений(Таб);
	ТП.ПоставщикДанных=Источник;
	
	
//	ТП.ОбновитьСтроки();
	ТП_Обновить();	
	// быстрый поиск
	//тп.ПоставщикДанных.Поля.Получить("Наименование").ТипБыстрогоПоиска = 1;
	
	// методы
	
//	ТП.АвтоШирина();
	Форма.ПанельИнструментов(0);
КонецПроцедуры

///////////////////////////////////////////////////

//}ТП

Процедура ЗаполнитьСтрокуТекущейИТ()
	//ИТтекущая=СоздатьОбъект("ИндексированнаяТаблица");
	//ИТтекущая.Загрузить(Таб,,"СрокРеализ,Количество,ПроблемаНеСоответствиеСпецификации,ПроблемаНесоответствияМаркировкиLV,ПроблемаОтсутствиеШтрихКода, ПроблемаДопустСрокаРеализации");
	//ИТтекущая.УдалитьСтроки();
	//ИТтекущая.Показать();
	//ИТтекущая.НоваяСтрока();
	//ИТтекущая.ЗаполнитьСтроку(,Таб,Таб_ТекущаяСтрока,Таб_ТекущаяКолонка);
	//ИТтекущая.Показать();
	Таб.ПолучитьСтрокуПоНомеру(Таб_ТекущаяСтрока);
	Таб_ТекущаяКолонка=п_НижОграничитель;


КонецПроцедуры
Функция ПропускКолонки(Таб_ТекущаяКолонка)
	Возврат(0);
КонецФункции

Функция ПоискВТабличнойЧасти(пТовар="")
Перем номСтр;
	номСтр=0;
	Таб.ВыбратьСтроки();
	Пока Таб.ПолучитьСтроку() = 1 Цикл
		номСтр=номСтр+1;
		Если Таб.Товар=пТовар Тогда
			Возврат(номСтр);
		КонецЕсли;
	КонецЦикла;
	Возврат(0);
КонецФункции 
Функция ПоискВесовогоКода(п_Код)

	ТекстЗапроса="SELECT Номенклатура.ID [Ссылка $Справочник.Номенклатура]
		|FROM $Справочник.Номенклатура AS Номенклатура With (NOLOCK)
		|WHERE ($Номенклатура.ВесовойКод = :пКод)
		|";
	ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");
	ЗапросСКЛ.УстановитьТекстовыйПараметр("пКод",п_Код);
	л_КодТовара = ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	
	Возврат л_КодТовара;
КонецФункции // ПоискВесовогоКода
Функция ПоискВесовогоКодаSQL(п_Код)

	л_КодТовара="";
	
	ТекстЗапроса="SELECT  ID [Товар $Справочник.Номенклатура]
		|FROM RTPOS_CA.dbo.foodlv_items
		|WHERE (GLID = :пКод)
		|";
	ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");
	ЗапросСКЛ.УстановитьТекстовыйПараметр("пКод",п_Код);
	л_КодТовара = ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	
	Возврат л_КодТовара;
КонецФункции // ПоискВесовогоКода
Функция ПоискВСправочнике(пШтрихкод="")//включая подчиненые через выбор элементов
	Перем ИмяРекв,ПрефКода,ШтрихКодДляПоиска;

	//если в строке штрихкода спереди идут 0 (ставятся, если вес меньше 1 кг)
	Если Лев(Строка(пШтрихКод),2)="02" Тогда
		позСтр=Найти(пШтрихКод,"2"); //если весовой товар
		Если позСтр>0 Тогда
			длинаСтр=СтрДлина(пШтрихКод);
			БезНулей=Прав(пШтрихКод,длинаСтр-позСтр+1);
			пШтрихКод=БезНулей;			
		КонецЕсли;
	КонецЕсли;
	
	ПрефКода=Лев(Строка(пШтрихКод),2); //поиск весового товара

	Вес=0;
		//{ Обработка весового товара 
	Если (ПрефКода="29") ИЛИ (ПрефКода="28") ИЛИ (ПрефКода="23") ИЛИ (ПрефКода="24")  ИЛИ (ПрефКода="25")  Тогда

//		Сообщить("Штрихкод:"+пШтрихКод);
		л_Товар=ПоискВесовогоКода(Число(Сред(пШтрихКод,3,6)));
//		Сообщить("Весовой код:"+Сред(пШтрихКод,3,6));
//		Сообщить(л_Товар);
		Если ПустоеЗначение(л_Товар)=0 Тогда
			Если л_Товар.Выбран()=1 Тогда
				Возврат л_Товар;
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли (ПрефКода="21") ИЛИ (ПрефКода="22")ИЛИ (ПрефКода="26") Тогда
//		Сообщить("Штрихкод:"+пШтрихКод);
		л_Товар=ПоискВесовогоКодаSQL(Число(Сред(пШтрихКод,3,6)));
//		Сообщить("Весовой код:"+Сред(пШтрихКод,3,6));
//		Сообщить(л_Товар);
		Если ПустоеЗначение(л_Товар)=0 Тогда
			Если л_Товар.Выбран()=1 Тогда
				Возврат л_Товар;
			КонецЕсли;
		КонецЕсли;	
//} Обработка весового товара		
	Иначе
		ШтрихКодДляПоиска=пШтрихКод;
	КонецЕсли;

	
	спрТовар = СоздатьОбъект("Справочник.Номенклатура");
	спрПодч=СоздатьОбъект("Справочник.ШтрихКоды");
	
	ИмяРекв = "Штрихкод";
	
	//PR 13.06.17 Begin 
	//если закодирован код товара тогда ищем по реквизиту Код товара
	ПозЗвезд=0;
	ПозЗвезд=Найти(Строка(пШтрихКод),"*");
	Если  (ПозЗвезд>0) И  (СтрДлина(Строка(пШтрихКод))<=10) Тогда
		ИмяРекв = "КодТовара";
		ШтрихКодДляПоиска = Сред(СокрЛП(пШтрихкод),ПозЗвезд+1,7);
	КонецЕсли;
	//PR 13.06.17 End
	
	ФлагГлобПоиска = 1; 
	Если спрТовар.НайтиПоРеквизиту(ИмяРекв,СокрЛП(ШтрихКодДляПоиска),ФлагГлобПоиска)=1 Тогда
		Возврат(спрТовар.ТекущийЭлемент());
 	ИначеЕсли спрПодч.НайтиПоКоду(СокрЛП(ШтрихКодДляПоиска))=1 Тогда
 		Возврат(спрПодч.ТекущийЭлемент().Владелец);
 	КонецЕсли;	
	// ничего не найдено
	Возврат(ПолучитьПустоеЗначение(спрТовар));
КонецФункции 
Процедура кнСбросШтрихкода()
	пвШтрихкод="";
	ПередатьФокус = "пвШтрихкод"; 
	Форма.Закрыть(0);
КонецПроцедуры
Функция ПоискПоШтрихкоду(пШтрихкод="")
	Если ПустоеЗначение(пШтрихкод)=1 Тогда
//		Предупреждение("Штрих кода нет в справочнике",0);
		Возврат(0);
	КонецЕсли;

	спрТовар=ПоискВСправочнике(пШтрихкод);
	Если ПустоеЗначение(спрТовар)=0 Тогда
		пНомерСтроки=ПоискВТабличнойЧасти(спрТовар);
		Если пНомерСтроки<>0 Тогда
			Таб_ТекущаяСтрока=пНомерСтроки;
			Таб_ТекущаяКолонка=п_НижОграничитель;
			ПВ_ВывестиЗначение();
			Возврат(1);
		КонецЕсли;
	КонецЕсли;

	Предупреждение("Штрих кода нет в таблице",3);
	Возврат(0);
	
КонецФункции


Процедура кнНазад()
	Перем фПропуск;

	//нижний ограничитель
	ПВ_ВводЗначения();
	
	Таб_ТекущаяКолонка=Таб_ТекущаяКолонка-1;
	Если Таб_ТекущаяКолонка<п_НижОграничитель Тогда
		Таб_ТекущаяКолонка=п_НижОграничитель;
	КонецЕсли;

	фПропуск=1;
	Пока фПропуск=1 Цикл
		Если ПропускКолонки(Таб_ТекущаяКолонка)=1 Тогда
			Таб_ТекущаяКолонка=Таб_ТекущаяКолонка-1;
			Если Таб_ТекущаяКолонка<п_НижОграничитель Тогда
				Таб_ТекущаяКолонка=п_НижОграничитель;
				фПропуск=0;
				Прервать;
			КонецЕсли;
		Иначе
			фПропуск=0;
		КонецЕсли;
		
	КонецЦикла;
	
	
	ПВ_ВывестиЗначение();
	
	
	
КонецПроцедуры	
Процедура кнВперед()
	Перем фПропуск;
	Перем фВыход;
	//ПВ_ВывестиЗначение();

	ПВ_ВводЗначения();
	
	Таб_ТекущаяКолонка=Таб_ТекущаяКолонка+1;
	Если Таб_ТекущаяКолонка>п_ВерхОграничитель Тогда
//		Таб_ТекущаяКолонка=п_ВерхОграничитель;
		Таб_ТекущаяКолонка=п_НижОграничитель;
		кнТаблица();
		Возврат;
	КонецЕсли;

	фПропуск=1;

	Пока фПропуск=1 Цикл
		Если ПропускКолонки(Таб_ТекущаяКолонка)=1 Тогда
			фПропуск=1;
			Таб_ТекущаяКолонка=Таб_ТекущаяКолонка+1;
			Если Таб_ТекущаяКолонка>п_ВерхОграничитель Тогда
				Таб_ТекущаяКолонка=п_ВерхОграничитель;
				фПропуск=0;
				Прервать;
			КонецЕсли;
		Иначе
			фПропуск=0;
		КонецЕсли;
	КонецЦикла;	
	ПВ_ВывестиЗначение();
КонецПроцедуры


Процедура кнТовар()
	
	ТекущийСлой=слТовара;
	Форма.ИспользоватьСлой(ТекущийСлой,2);
	ЗаполнитьСтрокуТекущейИТ();
	ПВ_ВывестиЗначение();
КонецПроцедуры

Процедура кнВводШтрихкода()
	Перем фПоиска;
	
	Если ТекущийСлой=слТаблицы Тогда
		фПоиска=ПоискПоШтрихкоду(СокрЛП(пвШтрихкод));
		Если фПоиска=1 Тогда
			ТекущийСлой=слТовара;
			Форма.ИспользоватьСлой(ТекущийСлой,2);
			Таб_ТекущаяКолонка=п_НижОграничитель;
			ЗаполнитьСтрокуТекущейИТ();		
			ПВ_ВывестиЗначение();
			пвШтрихкод="";
		Иначе
			ТекущийСлой=слТаблицы;
			Форма.ИспользоватьСлой(ТекущийСлой,2);
			кнСбросШтрихкода();
		КонецЕсли;
	ИначеЕсли ТекущийСлой=слТовара Тогда
		Если Таб_ТекущаяКолонка=п_ВерхОграничитель Тогда //колонка количества
			ПрефКода=Лев(Строка(пвШтрихкод),2); //поиск весового товара
			л_Вес=0;
			Если (ПрефКода="29") ИЛИ (ПрефКода="28") ИЛИ (ПрефКода="23") ИЛИ (ПрефКода="24")  ИЛИ (ПрефКода="25") Тогда
				//{ Обработка весового товара 
				//формируем строку со штрих-кодом для поиска
				//берем первые 8 чисел и добавляем нулями - такой штрих-код хранится у нас в базе данных
				ШтрихКодДляПоиска=глДополнитьСтрокуП(Лев(пвШтрихкод,7),"0",13);
				ЧислоВес=Число(Сред(пвШтрихкод,8,5));
				Если ЧислоВес<=99 Тогда
					Делитель=10;
				ИначеЕсли ЧислоВес<=999 Тогда
					Делитель=100;
				Иначе
					Делитель=1000;
				КонецЕсли;
				л_Вес = ЧислоВес/Делитель;
		
				ПанельВвода=л_Вес;
				пвШтрихкод="";
				ПередатьФокус = "ПанельВвода"; 
				Форма.Закрыть(0);	
				//} Обработка весового товара
			Иначе
				кнСбросШтрихкода();
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
Процедура кнПлюс()
	
	Если ТекущийСлой=слТовара Тогда
		Если Таб_ТекущаяКолонка=п_ВерхОграничитель Тогда //колонка количества
			флПлюс="Плюс";
			ПанельВвода=0;
		КонецЕсли;	
	КонецЕсли;
	ПередатьФокус = "ПанельВвода"; 
	Форма.Закрыть(0);				
	

КонецПроцедуры // кнПлюс
Процедура кнМинус()
	
	Если ТекущийСлой=слТовара Тогда
		Если Таб_ТекущаяКолонка=п_ВерхОграничитель Тогда //колонка количества
			флПлюс="Минус";
			ПанельВвода=0;
		КонецЕсли;	
	КонецЕсли;
	ПередатьФокус = "ПанельВвода"; 
	Форма.Закрыть(0);				
	

КонецПроцедуры // кнПлюс


Процедура кнТаблица()
	ТекущийСлой=слТаблицы;
	Форма.ИспользоватьСлой(ТекущийСлой,2);

	ТП_Обновить();
	кнСбросШтрихкода();
КонецПроцедуры
Процедура кнЗаписатьПровести()

	Если Вопрос("Закончить прием товара?",1,0)=2 Тогда
		Возврат;
	КонецЕсли;	

	АвтоВремяТекущее();
	Записать();

	Провести(1);
	Форма.Закрыть(0);
КонецПроцедуры // кнЗаписатьПровестикнЗаписатьПровести

Процедура кнОтложить()
	АвтоВремяТекущее();
	Записать();
	Форма.Закрыть(0);
КонецПроцедуры 

Процедура ОбработкаВнешнихКоманд()
	Перем ПолучСЗПараметр;
	Перем Команда,пКомплектовщик;
	Перем пТекущийДокПоставки;
	
	ПолучСЗПараметр = Форма.Параметр;
	Если ПустоеЗначение(ПолучСЗПараметр)=0 Тогда
		Команда=ПолучСЗПараметр.Получить("Команда");
		пТекущийДокПоставки=ПолучСЗПараметр.Получить("пДок");
		пКомплектовщик=ПолучСЗПараметр.Получить("пКомплектовщик");
		
		Если Команда="Новый" Тогда
			ТекущийДокПоставки=пТекущийДокПоставки;
			Комплектовщик=пКомплектовщик;
			ВводНаОсновании(ТекущийДокПоставки);
			старТекущийДокПоставки=ТекущийДокПоставки;
//			Форма.кнМеню.Заголовок("Товар");
		//	кнМеню();
		ИначеЕсли Команда="Открыть" Тогда
//			ТекущийСлой=слТаблицы;
//			Форма.кнМеню.Заголовок("Товар");
//			Форма.ИспользоватьСлой(ТекущийСлой,2);
//			ПередатьФокус = "тпКнопка_"; 
//			Форма.Закрыть(0);
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

Процедура ПриОткрытии()
	ОбработкаВнешнихКоманд();
	
КонецПроцедуры
Процедура ПриЗакрытии()
	//{ЛожноеЗакрытие Установить Фокус
	Если ПустоеЗначение(ПередатьФокус) = 0 тогда 
		Активизировать(ПередатьФокус); 
		СтатусВозврата(0); 
		ПередатьФокус = "";
//		Если нажатьКлавишу="Ф4" Тогда
//			нажатьКлавишу="";
//			WshShell = СоздатьОбъект("WScript.Shell") ;
//			//WshShell.SendKeys("{^}");
//			WshShell.SendKeys("^{F4}");
//		КонецЕсли;
		Возврат; 
	КонецЕсли; 
	//}ЛожноеЗакрытие Установить Фокус
	
	Сервис = СоздатьОбъект("Сервис");
	Сервис.УдалитьШрифт(МойШрифт);	
	
	НастроитьОкна(1);
//	Записать();
	Форма.Закрыть(0);
	
	
	
КонецПроцедуры
Процедура ПослеОткрытия()
	Перем фПользователь;
	//	НастроитьПривязки();
	Если Пользователь="Sklad" Тогда
		фПользователь=1;
	КонецЕсли;
	
	Если фПользователь=1 Тогда
		НастроитьОкна(фПользователь);// 1 для мобильного режима
	КонецЕсли;
	ТП_Инициализация();
	ПВ_Инициализация();
	Если фПользователь=1 Тогда
		НастроитьОкна(фПользователь);// 1 для мобильного режима
	КонецЕсли;
	ВыводТовара(1);
	
	Ф=СоздатьОбъект("Форма");
	Ф.УстановитьФорму(Форма);
//	_тпАкцСкидки=Ф.СоздатьЭлементУправления("ТабличноеПоле","тпАкцСкидки");
//	тпДок=Ф.СоздатьЭлементУправления("ТабличноеПоле","тпДок_");
	
//	ЗаполнитьТПДок();
//	НастройкаТПДок();
//	ФормаРасш = СоздатьОбъект("РасширениеФормы");
//	Форма.ИспользоватьЗакладки(1);
//	Форма.Закладки.ДобавитьЗначение("Основная");
//	Форма.Закладки.ДобавитьЗначение("Дополнительная");
//	ФормаРасш.ПодсветкаЗакладки(2, 1); // включаем подсветку дополнительной закладки
//
//	
//	Сервис = СоздатьОбъект("Сервис");
//	МойШрифт = Сервис.СоздатьШрифт("Arial", 36, 7,,,,);
//	
//	ФормаРасш.УстановитьФорму(Форма);
//	ФормаРасш.ПолучитьАтрибут(Форма.Закладки).Шрифт = МойШрифт;
//	ФормаРасш.ПолучитьАтрибут(Форма.Закладки).ЦветШрифта = 255;
//	ФормаРасш.ПолучитьАтрибут(Форма.Закладки).ЦветФона = ПолучитьЦвет(255,255,185);

	ТекущийСлой=слТаблицы;
//	ТекущийСлой=слДатаВремя;
//	Форма.кнМеню.Заголовок("Товар");
	Форма.ИспользоватьСлой(ТекущийСлой,2);

//	ПередатьФокус = "тпКнопка_"; 
	ПередатьФокус = "пвШтрихкод"; 
	Форма.Закрыть(0);	
	
	гСервис = СоздатьОбъект("Сервис");
	гСервис.ПерехватКлавиатуры(1);

КонецПроцедуры // ПослеОткрытия()  



//{

	//Список столбцов в таблице, порядок устанавливает отображение в переборе позиций в товаре.
	п_НижОграничитель=5; //5 - КоличествоФакт
	п_ВерхОграничитель=6;	


	пСтолбцы="
	|НомерСтроки,
	|ШтрихКод,
	|Товар,
	|СрокРеализ,
	|СрокРеализФактическое,
	|КоличествоФактическое,
	|Единица,
	|Коэффициент,
	|КоличествоКнижное,
	|КоличествоРазницы,
	|";
	Таб=СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(Таб,пСтолбцы);
//	Таб.Загрузить(ТабЗн,,);

	Таб.НоваяКолонка("СклАдрес",,,,,,,);


	Таб.УстановитьПараметрыКолонки("НомерСтроки",,,,"Номер",,,);
	Таб.УстановитьПараметрыКолонки("ШтрихКод",,,,"Штрих Код",,,);
	Таб.УстановитьПараметрыКолонки("Товар",,,,"Товар",,,);
	Таб.УстановитьПараметрыКолонки("СрокРеализ","Дата",,,"Срок реализации",,,);
	Таб.УстановитьПараметрыКолонки("СрокРеализФактическое","Дата",,,"Срок реализации",,,);
	Таб.УстановитьПараметрыКолонки("КоличествоКнижное","Число",10,3,"Количество",,,);
	Таб.УстановитьПараметрыКолонки("КоличествоФактическое","Число",10,3,"Колич. факт.",,,);

	флСообщения=0;
	Таб_ТекущаяКолонка=п_НижОграничитель;
	Таб_ТекущаяСтрока=1;
	ТекущийДокПоставки=ПолучитьПустоеЗначение(ДокументОснование);
	старТекущийДокПоставки=ТекущийДокПоставки;
	
	меню = СоздатьОбъект("СписокЗначений");
	
	рДатаНач=ТекущаяДата();
	рДатаКон=ТекущаяДата();
	
	слТаблицы="СлойТП,Кнопки,слТовар";
	слТовара="Основной,Кнопки,слТовар";
	слПрихода="СлойТПдокументов";
	слСканирования="слШтрихкод";
	слДатаВремя="слПрТовара";
	
	нажатьКлавишу="";
	счетНажатий=0;
	флПлюс="";

	сзКолонок = СоздатьОбъект("СписокЗначений");
	ПередатьФокус = "";
//}


