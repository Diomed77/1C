
Перем РегУчетТоваровПП, РегУчетТоваровУКП;

Процедура ПроведениеПоОборотамТоваров()
	Если ВидКлиента = Перечисление.ВидыКлиентов.Покупатель Тогда 
	
		Если ( ВидКредитнойНоты = Перечисление.ВидыКредитныхНот.ОбъемПродаж )
		или ( ВидКредитнойНоты = Перечисление.ВидыКредитныхНот.БонусОтОборота ) 
		или ( ВидКредитнойНоты = Перечисление.ВидыКредитныхНот.АкционныйБонус )
		или ( ВидКредитнойНоты = Перечисление.ВидыКредитныхНот.УценочныйАкт ) 
		или ( ВидКредитнойНоты = Перечисление.ВидыКредитныхНот.КомпенсацияБрак) Тогда 
		Иначе 
			Возврат; 
		КонецЕсли;
	
		
		// движения регистра Обороты товаров
		Рег = Регистр.ОборотыТоваров;
		// измерения

		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл

			Рег.Товар 			= Товар;
			
			Если ПустоеЗначение(Рег.Товар)=1 Тогда
				Рег.Товар = Константа.ТоварКредитнаяНота;
			КонецЕсли;
			
			Рег.ВидОперации		= "-";   
			Рег.Склад			= "";
			Рег.Клиент 			= Клиент;
			Рег.Агент 			= Агент; 
			Рег.АгентФилиала	= Агент.АгентКонсолидации; 
			
			// ресурсы
			Рег.Количество 		= 0;
			Рег.СуммаБазовая 	= 0;
			Рег.СуммаНДС 		= Пересчет(НДС,Валюта,ДатаДок,Рубли,ДатаДок)* (-1);
			Рег.СуммаПродажная 	= Пересчет(Сумма,Валюта,ДатаДок,Рубли,ДатаДок)* (-1);
			Рег.СуммаПЦЧ		= Рег.СуммаПродажная;
			Рег.СуммаСкидки 	= 0;
			// реквизиты
			Рег.ФлагУчета 		= 8;
			
			Рег.ПризнакОперации	= глПолучитьПризнакОперацииПоПризнаку(Перечисление.ПризнРасхНакл.КредитнаяНота);
			Рег.КатегорияВозврата = "";
			Рег.СуммаТранспорт 	= 0;
			Рег.СуммаТаможня 	= 0;
			Рег.Поставщик		= "";
			Рег.Касса 			= "";
			Рег.ДвижениеВыполнить();
		КонецЦикла;
	Иначе
		Если ДатаДок>='01.06.10 ' Тогда
			ВыбратьСтроки();
			Пока ПолучитьСтроку()=1 Цикл
		// движения регистра Обороты товаров
		
				Рег = Регистр.ОборотыТоваров;

				// измерения
				Рег.Товар 			= Товар;
				
				Если ПустоеЗначение(Рег.Товар)=1 Тогда
					Рег.Товар = Константа.ТоварКредитнаяНота;
				КонецЕсли;
				
				Рег.ВидОперации		= "-";
				Рег.Склад			= "";
				Рег.Клиент 			= Клиент;
				Рег.Агент 			= Агент; 
				// ресурсы
				Рег.Количество 		= 0;
				Рег.СуммаБазовая 	= 0;
				Рег.СуммаНДС 		= Пересчет(НДС,Валюта,ДатаДок,Рубли,ДатаДок);
				Рег.СуммаПродажная 	= Пересчет(Сумма,Валюта,ДатаДок,Рубли,ДатаДок);
				Рег.СуммаПЦЧ		= Рег.СуммаПродажная;
				Рег.СуммаСкидки 	= 0;
				// реквизиты
				Рег.ФлагУчета 		= 8;

				Если (ВидКомпенсации = Перечисление.ВидПолученнойКомпенсации.ОтдельныйСчет) И 
					 (ВидКредитнойНоты = Перечисление.ВидыКредитныхНот.Логистика)  Тогда
					//услуги логистики проводим как продажа 			
					Рег.ПризнакОперации	= глПолучитьПризнакОперацииПоПризнаку(Перечисление.ПризнРасхНакл.Продажа);
					Рег.Склад			= Константа.ОсновнойСклад;
				Иначе
					Рег.ПризнакОперации	= глПолучитьПризнакОперацииПоПризнаку(Перечисление.ПризнРасхНакл.КредитнаяНота);
				КонецЕсли;

				Рег.КатегорияВозврата = "";
				Рег.СуммаТранспорт 	= 0;
				Рег.СуммаТаможня 	= 0;
				Рег.Поставщик		= "";
				Рег.Касса 			= "";
				Рег.ДвижениеВыполнить();
			
			КонецЦикла;			
		КонецЕсли;		
		
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведенияПоКомпенсацииПоставщику()

	ЕстьПретензия = 0;
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Если ПустоеЗначение(ПоДокументуС)=0 Тогда
			Если ПоДокументуС.Вид()="ПретензияПолученная" Тогда
				ЕстьПретензия=1;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если (ВидКредитнойНоты=Перечисление.ВидыКредитныхНот.КомпенсацияПредпродажнаяПодготовка) И (ЕстьПретензия=0) Тогда
		
		Если ВидСчетаФактуры=Перечисление.ВидыСчетовФактур.Подтвержденная Тогда
			ВыбСтатус=2;
		Иначе
			ВыбСтатус=1;
		КонецЕсли;

		спУсловий=СоздатьОбъект("СписокЗначений");
		ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");
		УсловияЗапроса="1=1 ";
		глДобавитьФильтр( ЗапросСКЛ, УсловияЗапроса, спУсловий, "", "Фирма", Фирма, "Фирмы" );
		глДобавитьФильтр( ЗапросСКЛ, УсловияЗапроса, спУсловий, "", "Клиент", Клиент, "Контрагенты" );
		глДобавитьФильтр( ЗапросСКЛ, УсловияЗапроса, спУсловий, "", "Статус", ВыбСтатус, "" );
		УсловияЗапроса=УсловияЗапроса+" AND Товар IN (SELECT $ДокСФ.Товар FROM $ДокументСтроки.Счет_фактура ДокСФ (NOLOCK) WHERE IDDOC = :ТекДок)";
		ТекстЗапросаУчет="SELECT УчетТоваровПоПредпродажнойПодготовкеОстатки.Товар [Товар $Справочник.Номенклатура]
						|	, УчетТоваровПоПредпродажнойПодготовкеОстатки.Клиент [Клиент $Справочник.Контрагенты]
						|	, УчетТоваровПоПредпродажнойПодготовкеОстатки.ПрихДокумент [ПрихДокумент $Документ.ПриходнаяНакладная]
						|	, УчетТоваровПоПредпродажнойПодготовкеОстатки.Статус
						|	, УчетТоваровПоПредпродажнойПодготовкеОстатки.КоличествоОстаток Количество
						| FROM $РегистрОстатки.УчетТоваровПоПредпродажнойПодготовке(:Позиция~,," + УсловияЗапроса + ",,) AS УчетТоваровПоПредпродажнойПодготовкеОстатки
						|";
		
		ЗапросСКЛ.УстановитьТекстовыйПараметр( "Позиция", СформироватьПозициюДокумента(ТекущийДокумент(),1) );
		ЗапросСКЛ.УстановитьТекстовыйПараметр( "ТекДок", ТекущийДокумент());
		
		итУчетКомпПост=СоздатьОбъект("ИндексированнаяТаблица");
		//ЗапросСКЛ.Отладка(1);
		ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапросаУчет,итУчетКомпПост);
		итУчетКомпПост.ДобавитьИндекс("иТовар", "*Товар,*ПрихДокумент");
		сзКлюч=СоздатьОбъект("СписокЗначений");
		ДокП=СоздатьОбъект("Документ.ПриходнаяНакладная");
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл  
			
			Если ПустоеЗначение(ПоДокументуС)=1 Тогда
				Продолжить;
			КонецЕсли;

			сзКлюч.УдалитьВсе();
			сзКлюч.ДобавитьЗначение(Товар);
			
			Если ПустоеЗначение(ПоДокументуС)=0 Тогда
				ДокП.НайтиДокумент(ПоДокументуС.ТекущийДокумент());
				сзКлюч.ДобавитьЗначение(ДокП.ТекущийДокумент());
			КонецЕсли;
			
			итУчетКомпПост.Подмножество(сзКлюч,сзКлюч.РазмерСписка(),"иТовар");
			итУчетКомпПост.ВыбратьСтроки("иТовар");
			ЕстьТовар=0;
			Пока итУчетКомпПост.ПолучитьСтроку("иТовар") = 1 Цикл
				ЕстьТовар=1;
				
				Регистр.УчетТоваровПоПредпродажнойПодготовке.ПривязыватьСтроку(НомерСтроки);
				Регистр.УчетТоваровПоПредпродажнойПодготовке.Фирма			= Фирма;
				Регистр.УчетТоваровПоПредпродажнойПодготовке.Клиент			= итУчетКомпПост.Клиент;
				Регистр.УчетТоваровПоПредпродажнойПодготовке.Товар			= Товар;
				Регистр.УчетТоваровПоПредпродажнойПодготовке.ПрихДокумент	= итУчетКомпПост.ПрихДокумент;
				Регистр.УчетТоваровПоПредпродажнойПодготовке.Количество		= итУчетКомпПост.Количество;
				
				Если ВыбСтатус=1 Тогда
					Регистр.УчетТоваровПоПредпродажнойПодготовке.Статус=1; //сторнируем статус требующий компенсацию
					Регистр.УчетТоваровПоПредпродажнойПодготовке.ДвижениеРасходВыполнить();
					Регистр.УчетТоваровПоПредпродажнойПодготовке.Статус=2; //устанавливаем статус выставленной компенсации
					Регистр.УчетТоваровПоПредпродажнойПодготовке.Клиент			= Клиент;
					Регистр.УчетТоваровПоПредпродажнойПодготовке.ДвижениеПриходВыполнить();
				Иначе
					Регистр.УчетТоваровПоПредпродажнойПодготовке.Статус=2; //закрываем регистр по выставленным компенсациям
					Регистр.УчетТоваровПоПредпродажнойПодготовке.ДвижениеРасходВыполнить();
				КонецЕсли;
			КонецЦикла;

			Если ЕстьТовар=0 Тогда
				НеПроводить(Контекст,"Не найдено "+?(ВыбСтатус=1,"требуемой","выставленной")+" компенсации по товару "+Товар.Код+" "+Товар+" в строке "+НомерСтроки);
			КонецЕсли;
		КонецЦикла;
	
	Иначе

		Если ВидСчетаФактуры=Перечисление.ВидыСчетовФактур.Подтвержденная Тогда
			ВыбСтатус=2;
		Иначе
			ВыбСтатус=1;
		КонецЕсли;

		спУсловий=СоздатьОбъект("СписокЗначений");
		ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");
		УсловияЗапроса="1=1 ";
		
		глДобавитьФильтр( ЗапросСКЛ, УсловияЗапроса, спУсловий, "", "Фирма", Фирма, "Фирмы" );
		//глДобавитьФильтр( ЗапросСКЛ, УсловияЗапроса, спУсловий, "", "Поставщик", Клиент, "Контрагенты" );
		//глДобавитьФильтр( ЗапросСКЛ, УсловияЗапроса, спУсловий, "", "ПоДокументу", ПоДокументуС, "" );
		глДобавитьФильтр( ЗапросСКЛ, УсловияЗапроса, спУсловий, "", "Статус", ВыбСтатус, "" );
		УсловияЗапроса=УсловияЗапроса+" AND Товар IN (SELECT $ДокСФ.Товар FROM $ДокументСтроки.Счет_фактура ДокСФ (NOLOCK) WHERE IDDOC = :ТекДок)
		|								AND ПоДокументу IN (SELECT RIGHT($ДокСФ.ПоДокументуС,9) FROM $ДокументСтроки.Счет_фактура ДокСФ (NOLOCK) WHERE IDDOC = :ТекДок)";
		ТекстЗапросаУчетКомпПост="SELECT УчетКомпенсацийОтПоставщиковОстатки.Поставщик [Поставщик $Справочник.Контрагенты]
			|							, УчетКомпенсацийОтПоставщиковОстатки.Товар [Товар $Справочник.Номенклатура]
			|							, УчетКомпенсацийОтПоставщиковОстатки.СутьПретензии [СутьПретензии $Справочник.Претензии]
			|							, УчетКомпенсацийОтПоставщиковОстатки.ПоДокументу [ПоДокументу $Документ.ПретензияПолученная]
			|							, УчетКомпенсацийОтПоставщиковОстатки.КредДокумент [КредДокумент $Документ.Счет_фактура]
			|							, УчетКомпенсацийОтПоставщиковОстатки.ПрихДокумент [ПрихДокумент $Документ]
			|							, УчетКомпенсацийОтПоставщиковОстатки.Статус
		|								, УчетКомпенсацийОтПоставщиковОстатки.СуммаОстаток Сумма
		|								, УчетКомпенсацийОтПоставщиковОстатки.КоличествоОстаток Количество
		|							FROM $РегистрОстатки.УчетКомпенсацийОтПоставщиков(:Позиция~,, " + УсловияЗапроса + "
		|								  											,
		|																			,) AS УчетКомпенсацийОтПоставщиковОстатки
		|";
		
		ЗапросСКЛ.УстановитьТекстовыйПараметр( "Позиция", СформироватьПозициюДокумента(ТекущийДокумент(),0) );
		ЗапросСКЛ.УстановитьТекстовыйПараметр( "ТекДок", ТекущийДокумент());
		
		итУчетКомпПост=СоздатьОбъект("ИндексированнаяТаблица");
		//ЗапросСКЛ.Отладка(1);
		ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапросаУчетКомпПост,итУчетКомпПост);
		//итУчетКомпПост.Показать("");
		
		итУчетКомпПост.ДобавитьИндекс("иТовар", "*Товар,*ПоДокументу,*ПрихДокумент");
		сзКлюч=СоздатьОбъект("СписокЗначений");
		ДокП=СоздатьОбъект("Документ.ПретензияПолученная");
		ДокПП=СоздатьОбъект("Документ.ПриходнаяНакладная");
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл  
			
			Если ПустоеЗначение(ПоДокументуС)=1 Тогда
				Продолжить;
			КонецЕсли;
			сзКлюч.УдалитьВсе();
			сзКлюч.ДобавитьЗначение(Товар);
			
			Если ПустоеЗначение(ПоДокументуС)=0 Тогда
				ДокП.НайтиДокумент(ПоДокументуС.ТекущийДокумент());
				сзКлюч.ДобавитьЗначение(ДокП.ТекущийДокумент());
			КонецЕсли;

			Если ПустоеЗначение(ПрихДокумент)=0 Тогда
				ДокПП.НайтиДокумент(ПрихДокумент);
				сзКлюч.ДобавитьЗначение(ДокПП.ТекущийДокумент());
			КонецЕсли;
			
			итУчетКомпПост.Подмножество(сзКлюч,сзКлюч.РазмерСписка(),"иТовар");
			итУчетКомпПост.ВыбратьСтроки("иТовар");
			ЕстьТовар=0;
			Пока итУчетКомпПост.ПолучитьСтроку("иТовар") = 1 Цикл
				ЕстьТовар=1;
				
				Если итУчетКомпПост.Количество=0 Тогда
					Продолжить;
				КонецЕсли;
				
				Регистр.УчетКомпенсацийОтПоставщиков.ПривязыватьСтроку(НомерСтроки);
				Регистр.УчетКомпенсацийОтПоставщиков.Фирма		= Фирма;
				Регистр.УчетКомпенсацийОтПоставщиков.Поставщик		= итУчетКомпПост.Поставщик;
				Регистр.УчетКомпенсацийОтПоставщиков.Товар			= Товар;
				Регистр.УчетКомпенсацийОтПоставщиков.СутьПретензии	= итУчетКомпПост.СутьПретензии;
				Регистр.УчетКомпенсацийОтПоставщиков.ПоДокументу	= итУчетКомпПост.ПоДокументу;
				Регистр.УчетКомпенсацийОтПоставщиков.КредДокумент	= итУчетКомпПост.КредДокумент;
				Регистр.УчетКомпенсацийОтПоставщиков.ПрихДокумент	= итУчетКомпПост.ПрихДокумент;
				Регистр.УчетКомпенсацийОтПоставщиков.Количество		= итУчетКомпПост.Количество;
				Регистр.УчетКомпенсацийОтПоставщиков.Сумма			= итУчетКомпПост.Сумма;
				
				Если ВыбСтатус=1 Тогда
					Регистр.УчетКомпенсацийОтПоставщиков.Статус=1; //сторнируем статус требующий компенсацию
					Регистр.УчетКомпенсацийОтПоставщиков.ДвижениеРасходВыполнить();
					Регистр.УчетКомпенсацийОтПоставщиков.КредДокумент	= ТекущийДокумент();
					Регистр.УчетКомпенсацийОтПоставщиков.Статус=2; //устанавливаем статус выставленной компенсации
					Регистр.УчетКомпенсацийОтПоставщиков.Поставщик		= Клиент;
					Регистр.УчетКомпенсацийОтПоставщиков.Сумма	= Сумма;
					Регистр.УчетКомпенсацийОтПоставщиков.ДвижениеПриходВыполнить();
				Иначе
					Регистр.УчетКомпенсацийОтПоставщиков.Статус=2; //закрываем регистр по выставленным компенсациям
					Регистр.УчетКомпенсацийОтПоставщиков.ДвижениеРасходВыполнить();
					Если ПустоеЗначение(итУчетКомпПост.ПрихДокумент)=0 Тогда
						ДокПП.НайтиДокумент(итУчетКомпПост.ПрихДокумент);
						ДокПП.ПроблемныйЗакрыто = 1;
						ДокПП.Записать();
					КонецЕсли;
					
				КонецЕсли;
				
				итУчетКомпПост.Количество = 0; 
				итУчетКомпПост.Сумма = 0;
				
			КонецЦикла;

			Если ЕстьТовар=0 Тогда
				НеПроводить(Контекст,"Не найдено "+?(ВыбСтатус=1,"требуемой","выставленной")+" компенсации по товару "+Товар.Код+" "+Товар+" в строке "+НомерСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры


//-------------------------------
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения(Режим) Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ОбработкаПроведения(Режим)
//Закомментировано Инсталлятором МОД:Процедура ОбработкаПроведения(Режим)
        // сем \\
	Если семМожноПровести( Контекст ) = 0 Тогда Возврат; КонецЕсли;
	семОбновитьКурс( контекст );
        // сем //
	//Если (ДатаДок>ТекущаяДата()) И (Пользователь.РазрПровБудущейДатой=0) Тогда
	//	НеПроводить(Контекст,"Нельзя проводить документ будущей датой!");
	//	Возврат;
	//КонецЕсли;

	Если ПустоеЗначение(НомерОригинальный) = 1 Тогда
		НеПроводить(Контекст,"Введитие оригинальный номер документа!");
		Возврат;		
	КонецЕсли;	
	
	Если ПустоеЗначение(Клиент) = 1 Тогда
		НеПроводить(Контекст,"Укажите Клиента!");
		Возврат;		
	КонецЕсли;	
	
	Если ПустоеЗначение(Агент) = 1 Тогда
		НеПроводить(Контекст,"Укажите агента!");
		Возврат;		
	КонецЕсли;	
	
	Если ПустоеЗначение(ВидКредитнойНоты)=1 Тогда
		НеПроводить(Контекст,"Ну указан вид счета!");
		Возврат;
	КонецЕсли;                    
	                   
	ТекДокПоз=СформироватьПозициюДокумента(ТекущийДокумент());
	ПоДокументуПоз=СформироватьПозициюДокумента(ПоДокументу);
	
	Если ПоДокументуПоз>ТекДокПоз Тогда
		НеПроводить(Контекст,"Документ основание хронологически введен позже, чем дата и время текущего документа!");
		Возврат;		
	КонецЕсли;
	
	ВидДок=ДокументОснование.Вид();


	Клиент.ИспользоватьДату(ДатаДок);
	// Запишем главного клиента
	Если Клиент.КлГруппа.Выбран()=1 Тогда
		КлГруппа=Клиент.КлГруппа;
	Иначе
		КлГруппа=Клиент;
	КонецЕсли;       

    КлГруппа.ИспользоватьДату("");
	
	Если КлГруппа.ДляВыгрузки=0 Тогда
		спр=СоздатьОбъект("Справочник.Контрагенты");
   		Спр.НайтиЭлемент(КлГруппа);
		Спр.ДляВыгрузки=1;
		ОбъектЗаписать(Спр,);
	КонецЕсли;           
	

	Рег = СоздатьОбъект("Регистры");
	РегВзаимПок = Рег.ВзаиморасчетыПокупателей; 
	РегВзаимПост = Рег.ВзаиморасчетыПоставщиков;
	
	ТовСп=СоздатьОбъект("СписокЗначений");
	ВыгрузитьТабличнуюЧасть(ТовСп,"Товар");
	Кл=СоздатьОбъект("ТаблицаЗначений");                      
	
	РегВзаимПок.УстановитьЗначениеФильтра("Клиент",Клиент,1);
	РегВзаимПост.УстановитьЗначениеФильтра("Клиент",Клиент,1);

	Если ИтогиАктуальны() = 0 Тогда          
		РегВзаимПок.ВременныйРасчет(1);
		РегВзаимПост.ВременныйРасчет(1);
		Рег.Актуальность(1);
		Рег.РассчитатьРегистрыНа(ТекущийДокумент());
	КонецЕсли;                   
                    
	ОбработкаПроведенияПоКомпенсацииПоставщику();

	Если ВидСчетаФактуры = Перечисление.ВидыСчетовФактур.НеПодтвержденная Тогда
		Возврат;
	КонецЕсли;
	
	СумПогаш=Итог("Сумма")+Итог("НДС");
	
	// учет по Кредитам
	Если ТипУчета<Фин Тогда
		Если ПогашениеДолгаПоКредиту(Контекст,ТекущийДокумент(),СумПогаш,СтавкаНДС,"Упр", , , , РегВзаимПост, РегВзаимПок)=1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВсегоСуммаШ=Итог("Сумма")+Итог("НДС");
	ВсегоНДСШ=Итог("НДС");
	
	Если ВлияетНаРеализацию = 1 Тогда
		ПроведениеПоОборотамТоваров();
	КонецЕсли;
	
	//----------------------

КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения(Режим)
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеМОД(Контекст)=1 Тогда
	    Возврат;
	КонецЕсли;
	стар_ОбработкаПроведения(Режим);
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаУдаленияПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеПоАлгоритмуМОД=1 Тогда
	    Возврат;
	КонецЕсли;
	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
	ПриОтменеПроведенияДокумента(ТекущийДокумент());
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД

//----------------------


