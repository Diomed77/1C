// ********************
//
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения() Далее
//Конец текста, вставленного Инсталлятором МОД

Функция УстановитьСостояние(Сост,Док)
	спрСост=СоздатьОбъект("Справочник.СостоянияДокументов");
	спрСост.НайтиПоНаименованию(Док.Вид()); 
	спрСост.ИспользоватьРодителя(спрСост.ТекущийЭлемент());
	спрСост.НайтиПоНаименованию(Сост,1);
	Возврат спрСост.ТекущийЭлемент();
КонецФункции

Функция ГаситьРегистр(п_Док)
	Рег=СоздатьОбъект("Регистр.СостояниеДокумента");
	Рег.УстановитьЗначениеФильтра("Док",п_Док,1);
	табл=СоздатьОбъект("ТаблицаЗначений");
	Рег.ВыгрузитьИтоги(табл,1,1);
//	табл.ВыбратьСтроку();
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку() = 1 Цикл
		Регистр.СостояниеДокумента.Док=табл.Док;
		Регистр.СостояниеДокумента.Пользователь=табл.Пользователь;
		Регистр.СостояниеДокумента.Количество=табл.Количество;
		Регистр.СостояниеДокумента.СостояниеДок=табл.СостояниеДок;
		Регистр.СостояниеДокумента.ДвижениеРасходВыполнить();
	КонецЦикла;	
КонецФункции


Процедура стар_ОбработкаПроведения()
//Закомментировано Инсталлятором МОД:Процедура ОбработкаПроведения()
	Запрос=СоздатьОбъект("ODBCRecordSet");

	
//	Сообщить("Теперь используется исправленная версия модуля проведения!");

//	глУдалениеВременнойТаблицыSQL("#Товары");
//	ТекстЗапроса="SELECT DISTINCT $ДокС.Товар ID
//	|			  INTO #Товары 
//	|			  FROM $ДокументСтроки.Счет ДокС (NOLOCK)
//	|			  WHERE ДокС.IDDOC=:ВыбСчет
//	|";
//
//	Запрос.УстановитьТекстовыйПараметр("ВыбСчет",ПоСчету);	
//	Запрос.Отладка(1);
//	Запрос.ВыполнитьСкалярный(ТекстЗапроса);	
	
	//Запрос.РежимRPC(1);

	//отключаем механизм
	Если ДатаДок<'11.02.09' Тогда
		
		ТекстУсловияОтвХр="";
		Если ПоСчету.Склад.СкладОтвХранения=1 Тогда
			ТекстУсловияОтвХр="AND $СкладыК.Склад = :СкладОтвХранения";
			Запрос.УстановитьТекстовыйПараметр("СкладОтвХранения",ПоСчету.Склад);
		КонецЕсли;
	
		глУдалениеВременнойТаблицыSQL("#Склады");
		ТекстЗапроса="SELECT $СкладыК.Склад ID, СкладыК.CODE
		|			  INTO #Склады
		|			  FROM $Справочник.СкладыКомплектаций AS СкладыК
		|			  WHERE (СкладыК.ISMARK=0) AND (СкладыК.PARENTEXT = :ВыбМесто) "+ТекстУсловияОтвХр+"
		|";
		Запрос.УстановитьТекстовыйПараметр("ВыбМесто",МестоКомплектации);
	//	Запрос.Отладка(1);
		Запрос.ВыполнитьСкалярный(ТекстЗапроса);	
	
		ТекстУсловияПоСкладам="";	
	//	Если ИтогиАктуальны()=0 Тогда
			ТекстУсловияПоСкладам="AND (Склад IN (SELECT ID FROM #Склады))";
	//	КонецЕсли;	
		
		
		ТекстЗапроса="SELECT Товар [Товар $Справочник.Номенклатура]
		|					, СрокРеализ
		|					,SUM(Остаток) ДостОст
		|			  FROM (
		|					  SELECT ПартииТоваровОстатки.ОстатокТовараОстаток Остаток
		|							, ПартииТоваровОстатки.Товар 
		|							, ПартииТоваровОстатки.СрокРеализации СрокРеализ 
		|					  FROM $РегистрОстатки.ПартииТоваров(:КонДата ~,
		|															INNER JOIN $ДокументСтроки.Счет ДокС (NOLOCK) ON ДокС.IDDOC=:ВыбСчет AND $ДокС.Товар = Товар
		|											  			,Склад = :ВыбСклад,
		|														(Товар, Склад),
		|														ОстатокТовара) AS ПартииТоваровОстатки
		//|					  UNION ALL	
		//|					  SELECT -1*КомплТоваровОстатки.КоличествоОстаток Остаток
		//|							, КомплТоваровОстатки.Товар 
		//|							, КомплТоваровОстатки.Склад 
		//|					  FROM $РегистрОстатки.КомплектацияЗаявок(:КонДата ~,
		//|															INNER JOIN (SELECT DISTINCT $ДокС.Товар ID
		//|			  															FROM $ДокументСтроки.Счет ДокС (NOLOCK)
		//|			  															WHERE ДокС.IDDOC=:ВыбСчет) #Товары ON #Товары.ID = Товар
		//|															INNER JOIN (SELECT $СкладыК.Склад ID
		//|			  															FROM $Справочник.СкладыКомплектаций AS СкладыК
		//|			  															WHERE (СкладыК.ISMARK=0) AND (СкладыК.PARENTEXT = :ВыбМесто)) #Склады ON #Склады.ID = Склад
		//|															,
		//|												  			(Статус = 2) AND (МестоКомплектации = :ВыбМесто),
		//|															(Товар, Склад),
		//|															Количество) AS КомплТоваровОстатки
		|					) ДоступОстатки
		|			  INNER JOIN #Склады AS СкладыК ON ДоступОстатки.Склад = СкладыК.ID
		|			  GROUP BY Товар, ДоступОстатки.Склад, СкладыК.CODE
		|			  HAVING SUM(Остаток)>0
		|";
	
		Запрос.УстановитьТекстовыйПараметр("ВыбСклад",ПоСчету.Склад);
		Запрос.УстановитьТекстовыйПараметр("ВыбСчет",ПоСчету);	
		Запрос.УстановитьТекстовыйПараметр("КонДата",СформироватьПозициюДокумента(ТекущийДокумент(),1));
		ТаблОстатки=СоздатьОбъект("ИндексированнаяТаблица");
		Запрос.ВыполнитьИнструкцию(ТекстЗапроса,ТаблОстатки);
		ТаблОстатки.ДобавитьИндекс("Товар","*Товар");      

	КонецЕсли;	
		
	//ТаблОстатки.Показать();
	Реги=СоздатьОбъект("Регистры");
	Реги.Актуальность(1);
	Рег=Реги.КомплектацияЗаявок;
	
	рег.УстановитьЗначениеФильтра("ПоСчету",ПоСчету);
	рег.УстановитьЗначениеФильтра("Статус",?(Аннулировать=1,-1,?(ПоСчету.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь,21,1)));
		
	Если ИтогиАктуальны()=0 Тогда
		рег.ВременныйРасчет(1);
		Реги.РассчитатьРегистрыНа(ТекущийДокумент());
	КонецЕсли;
	
	таблКомпл=СоздатьОбъект("ТаблицаЗначений");
	Рег.ВыгрузитьИтоги(таблКомпл,1,1);
	Если (таблКомпл.КоличествоСтрок()=0) Тогда
		Если ГрупповаяОбработка()=0 Тогда
			НеПроводить(Контекст,"Для данной эл. заявки не требуется "+?(Аннулировать=0,"комплектация","разукомплектация")+" или она уже была передана совершена!");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	
	таблКомпл.ВыбратьСтроки();
	Пока таблКомпл.ПолучитьСтроку()=1 Цикл
		Регистр.КомплектацияЗаявок.ДатаПоставки=таблКомпл.ДатаПоставки;
		Регистр.КомплектацияЗаявок.ПоСчету=таблКомпл.ПоСчету;
		Регистр.КомплектацияЗаявок.ВидЗаявки=таблКомпл.ВидЗаявки;
		Регистр.КомплектацияЗаявок.МестоКомплектации=таблКомпл.МестоКомплектации;
		Регистр.КомплектацияЗаявок.Склад=таблКомпл.Склад;
		Регистр.КомплектацияЗаявок.ВидДоставки=таблКомпл.ВидДоставки;
		Регистр.КомплектацияЗаявок.Товар="";
		Регистр.КомплектацияЗаявок.Статус=таблКомпл.Статус;
		Регистр.КомплектацияЗаявок.Количество=таблКомпл.Количество;
		Регистр.КомплектацияЗаявок.ДвижениеРасходВыполнить();

		Если Аннулировать=0 Тогда //переводим в другой статус
			Регистр.КомплектацияЗаявок.Статус=2;
			//бронирование
			Если ПоСчету.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
				Регистр.КомплектацияЗаявок.Статус=22;
			КонецЕсли;
			//Устройства
			Если ВидУстройства=Перечисление.ВидыУстройств.CASIO Тогда
				Регистр.КомплектацияЗаявок.Статус=12;
			КонецЕсли;
			
			Регистр.КомплектацияЗаявок.ДвижениеПриходВыполнить();
		КонецЕсли;		
		
	КонецЦикла;

//проверка наличия общей заявки
			л_ДокОснование=ПоСчету.ДокументОснование;
			Если л_ДокОснование.Вид()="СчетОбщий" Тогда
				л_Док=СоздатьОбъект("Документ.СчетОбщий");
				л_Док.НайтиДокумент(л_ДокОснование);
				СостояниеДок=глПолучитьСостояниеДокумента(л_Док.ТекущийДокумент());
				Если СокрЛП(СостояниеДок)="Ожидает компл." Тогда
					ГаситьРегистр(л_ДокОснование);
					
					Регистр.СостояниеДокумента.Док=л_ДокОснование;
					Регистр.СостояниеДокумента.Пользователь=Автор;
					Регистр.СостояниеДокумента.Количество=1;
					Регистр.СостояниеДокумента.СостояниеДок=УстановитьСостояние("Комплектуется",л_ДокОснование);
					Регистр.СостояниеДокумента.ДвижениеПриходВыполнить();						
				КонецЕсли;
			
			
			КонецЕсли;
	

	//отключаем механизм
	Если ДатаДок<'10.02.09' Тогда
	
		//пройдем по всем товарам и попытаеся расписать треб. товар по дост. складам
		УдалитьСтроки();
		ПоСчету.ВыбратьСтроки();
		Пока ПоСчету.ПолучитьСтроку() = 1 Цикл
			
			ОстПогасить = ПоСчету.Резерв;
			
			ТаблОстатки.УстановитьФильтр(ПоСчету.Товар,ПоСчету.Товар,"Товар");
			ТаблОстатки.Сортировать("СрокРеализ");
			ТаблОстатки.ВыбратьСтроки("Товар");
			Пока (ТаблОстатки.ПолучитьСтроку("Товар") = 1) И (ОстПогасить>0) Цикл
					
				Если ПустоеЗначение(ПоСчету.МинСрокРеализ)=0 Тогда
					Если ПоСчету.МинСрокРеализ>ТаблОстатки.СрокРеализ Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;

				Если ПустоеЗначение(ПоСчету.МаксСрокРеализ)=0 Тогда
					Если ПоСчету.МаксСрокРеализ<ТаблОстатки.СрокРеализ Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;

				Погасить=Мин(ТаблОстатки.ДостОст,ОстПогасить);

				НоваяСтрока();
				Товар 		= ПоСчету.Товар;
				Остаток 	= Погасить;
				СрокРеализ 	= ТаблОстатки.СрокРеализ;
				
				ТаблОстатки.ДостОст=ТаблОстатки.ДостОст-Погасить;
				ОстПогасить=ОстПогасить-Погасить;
							
			КонецЦикла;
			
			//если что-либо осталось, тогда вешаем все на основной склад по месту компл		
			Если ОстПогасить>0 Тогда
				ТаблОстатки.ВНачало("Товар");

				ТаблОстатки.ВыбратьСтроки("Товар");
				Пока (ТаблОстатки.ПолучитьСтроку("Товар") = 1) И (ОстПогасить>0) Цикл
                    Если (ТаблОстатки.ДостОст=0) Тогда 
						продолжить;
                    КонецЕсли;
					
					Погасить=Мин(ТаблОстатки.ДостОст,ОстПогасить);

					НоваяСтрока();
					Товар 		= ПоСчету.Товар;
					Остаток 	= Погасить;
					СрокРеализ 	= ТаблОстатки.СрокРеализ;

					ТаблОстатки.ДостОст=ТаблОстатки.ДостОст-Погасить;
					ОстПогасить=ОстПогасить-Погасить;

				КонецЦикла;
				
					
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	
    //Здесь следует написать алгоритм проведения документа
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеМОД(Контекст)=1 Тогда
	    Возврат;
	КонецЕсли;
	стар_ОбработкаПроведения();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаУдаленияПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеПоАлгоритмуМОД=1 Тогда
	    Возврат;
	КонецЕсли;
	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
	ПриОтменеПроведенияДокумента(ТекущийДокумент());

КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД


