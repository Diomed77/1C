Перем Валюта_Прежн;
Перем Курс_Прежн;
Перем Режим;
Перем ИнформационнаяСтрока;
Перем МожноРассчитывать;
Перем Расш;
Перем старКлиент;

Функция ВыбратьСклад(ВыбСклад) Далее

Функция семПолучитьСтавкуНДСТовара( пТовар )
	Если глКодСтраныПользователя = "LT" Тогда Возврат пТовар.СтавкаНДСLT;
	ИначеЕсли глКодСтраныПользователя = "EE" Тогда Возврат пТовар.СтавкаНДСEE;
	КонецЕсли;
	Возврат пТовар.СтавкаНДС;
КонецФункции

Функция семПроверкаСтавкиНДС( пТовар )
	СтавкаНДСТовара = семПолучитьСтавкуНДСТовара( пТовар );
	Если КоличествоСтрок() = 0 Тогда
		Если Склад.СкладОтвХранения=1 Тогда
			СтавкаНДС = Перечисление.ЗначенияНДС.НДС0;
		Иначе
			СтавкаНДС = СтавкаНДСТовара;
		КонецЕсли;
		
	Иначе
		Если (СтавкаНДС <> СтавкаНДСТовара) И (СтавкаНДС <> Перечисление.ЗначенияНДС.НДС0) Тогда
			Сообщить( "Ошибка подбора товара.","!" );
			Сообщить( Шаблон("Товар со ставкой [СтавкаНДСТовара] не может использоватся в данном документе."),"I" );
			Сообщить( Шаблон("В документе уже есть товары со ставкой [СтавкаНДС]."),"I" );
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	Возврат 1;
КонецФункции

//======================================================================
Процедура ОбнулитьБесплатныеТовары()

	
	
	Спр = СоздатьОбъект("Справочник.ТоварыБесплатные");
	ВыбратьСтроки();
	СуммаИтого = 0;
	Пока ПолучитьСтроку() = 1 Цикл
		Если Спр.НайтиПоРеквизиту("Товар",Товар,1)=1 Тогда
		Иначе
			СуммаИтого=СуммаИтого+(Сумма+НДС);
		КонецЕсли;
	КонецЦикла;
	
	Пока ПолучитьСтроку() = 1 Цикл
		Если Спр.НайтиПоРеквизиту("Товар",Товар,1)=1 Тогда
			СуммаКратно = Спр.СуммаЧека.Получить(ДатаДок);
			КолвоБесплатного = Цел(СуммаИтого/СуммаКратно);
			
			Сумма = Макс((Количество - КолвоБесплатного) * РознЦена,0); //рассчитаем сумму за который надо платить 
			Цена = Сумма/Количество*Коэффициент;
			Выч_суммы_накл_сНП(Контекст,0);
		КонецЕсли;
	КонецЦикла;
		
	
КонецПроцедуры // гл


Процедура семВзаиморасчеты()
	Предупреждение(ДолгПоКредиту(Контекст));
КонецПроцедуры

Процедура Взаиморасчеты()
	//Форма.ИнфПодпись.Видимость(0);
	ИнформационнаяСтрока=ДолгПоКредиту(Контекст);
КонецПроцедуры

Функция Доступ()                            
	
	Если Проведен() = 1 Тогда
		Форма.кнВвестиНаОсновании.Видимость(1);	
	КонецЕсли;
	
	Форма.кнВводНомераКарты.Видимость(1-ПустоеЗначение(ККМФискальногоРегистратора));
	
	Возврат "";
КонецФункции


//*******************************************
Процедура ПровестиСтроку()
	                    
	//отключить
	Возврат;
	Если (ДатаДок>'14.04.08') Тогда
		                         
		Если (Товар.ВидТовара=Перечисление.ВидыТоваров.Ингредиент) 
			ИЛИ (Товар.ВидТовара=Перечисление.ВидыТоваров.Товар) 
			ИЛИ (Товар.ВидТовара=Перечисление.ВидыТоваров.Блюдо) Тогда
				
		Иначе
			Возврат;
		КонецЕсли;
		
		Если (Количество=0) И (ПустоеЗначение(ДокПерем)=1) Тогда
			Возврат;
		КонецЕсли;
		
		Если ПустоеЗначение(ОсновнойСклад)=1 Тогда
			ОсновнойСклад=ВыбратьСклад(ОсновнойСклад);
		КонецЕсли;  
		
		Если ПустоеЗначение(ОсновнойСклад)=1 Тогда
			Предупреждение("Не выбран склад откуда перемещать товар!");
			Возврат;
		КонецЕсли;
		
		Записать();
		
		Если ПустоеЗначение(ДокПерем)=1 Тогда
			
			//ничего не делаем, когда склады одинаковые
			Если Склад=ОсновнойСклад Тогда
				Возврат;
			КонецЕсли;
			
			Если Вопрос("Товар в количестве <"+Количество*Коэффициент+" "+Единица+"> будет перемещен со склада <"+ОсновнойСклад+"> на склад <"+Склад+">. Продолжить?","Да+Нет")="Да" Тогда
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;   
		
		Если (Товар.ВидТовара=Перечисление.ВидыТоваров.Ингредиент) ИЛИ (Товар.ВидТовара=Перечисление.ВидыТоваров.Товар) Тогда
			Док=СоздатьОбъект( "Документ.Перемещение" );
			Если ПустоеЗначение(ДокПерем)=1 Тогда
				Док.Новый();
			Иначе
				Док.НайтиДокумент(ДокПерем);
			КонецЕсли;
					
			ЗаполнитьШапку(Док);   
			Док.ДокументОснование=ТекущийДокумент();
			
			Док.Склад=ОсновнойСклад;
			Док.СкладПолучатель=Склад;
			Док.УдалитьСтроки();
			Док.НоваяСтрока();
			Док.Товар=Товар;
			Док.ТовКод=Товар.Код;
			Док.Количество=Количество;
			Док.Коэффициент=Коэффициент;
			Док.Единица=Единица;
			Док.Цена=Цена;
			Док.Сумма=Сумма; 
			Док.Записать();
			
			Если Количество*Коэффициент=0 Тогда
				Док.СделатьНеПроведенным();
			Иначе               
				Если Док.ПометкаУдаления()=1 Тогда
					Док.СнятьПометкуУдаления();
				КонецЕсли;
				Док.Провести(3);   
			КонецЕсли;
			ДокПерем=Док.ТекущийДокумент();

		КонецЕсли;
		Записать();
			
	КонецЕсли;
	
КонецПроцедуры  

//------------------------
Процедура АктФИО()     
	Перем Вид;
	
	Если СокрЛП(Клиент.Код) = "122" Тогда
		Вид = 1;
		Вид2 = 0;
	Иначе
		Вид = 0;
		Вид2 = 1;
		Взаиморасчеты();
	КонецЕсли;           
	
//	Форма.ФИО1.Видимость(Вид);
//	Форма.ФИО2.Видимость(Вид);
//	Форма.ФИО.Видимость(Вид);  
//	Форма.ФАДРЕС.Видимость(Вид);
	
	Форма.тИнфо.Видимость(Вид2);
//	Форма.тГруппа.Видимость(Вид2);
	Форма.тГруппа1.Видимость(Вид2);
	Форма.тДоговор.Видимость(Вид2);
	Форма.тДоговор1.Видимость(Вид2);
	Форма.тДоговор2.Видимость(Вид2);
	Форма.кнИнфо.Видимость(Вид2);
КонецПроцедуры

//------------------------
Процедура ПриОткрытии()
	ПроверкаРазрешенияРедактирования(Контекст);     
	УстановкаРеквизитаТип(Контекст);
	Тип.ДобавитьЗначение("Упр.");
	Тип.ДобавитьЗначение("Общ.");
	Тип.ДобавитьЗначение("Фин.");
	Тип.ТекущаяСтрока(ТипУчета+1);  
	
	Если Проведен() = 0 Тогда
		Форма.кнВвестиНаОсновании.Видимость(0);
	КонецЕсли; 	
	
	АктФИО();

	//запрещаем редактирование количества и склада
	//Форма.Количество.Доступность(1-Проведен());
	//Форма.ОсновнойСклад.Доступность(1-Проведен());
	//Форма.Товар.Доступность(1-Проведен());
	//Форма.ЦенаСНДС.Доступность(1-Проведен());
	//Форма.кнИстория.Доступность(1-Проведен());
	//Форма.Клиент.Доступность(1-Проведен());     
	//Форма.кнПодбор.Доступность(1-Проведен());     
	Транслит(Расш,Форма);
КонецПроцедуры            


//------------------------
Процедура ИзмДатаПоставки() //предопределенная
	СрокРезервирования = КолвоБанковскихДней(ДатаДок,ДатаПоставки);  
	
	ПриИзмененииСкидкиДокумента(Контекст,1);
КонецПроцедуры //ПриЗаписи
//***************************************************************
//
Функция ИнфОпродаже()
	Если Клиент.Выбран()=1 Тогда
		КлиентГр = ?(Клиент.КлГруппа.Выбран()=1,Клиент.КлГруппа,Клиент);
		Если КлиентГр.ЗапретВыпискиНакл.Получить(ДатаДок)=1 Тогда
			Возврат("Запрет на продажу!!!");
		Иначе
			Возврат("");
		КонецЕсли;
	Иначе
		Возврат("");
	КонецЕсли;
КонецФункции
//----------------------------------------------------
Функция ИнфОдоговоре()
	Если Клиент.Выбран()=1 Тогда
		Если СтрДлина(СокрЛП(Клиент.Договор))=0 Тогда
			Возврат("Договора нет!!!");
		Иначе
			Возврат(Клиент.Договор);
		КонецЕсли;
	Иначе
		Возврат("");
	КонецЕсли;
КонецФункции
//----------------------------------------------------
Процедура ВыборКлиента()
	Если Клиент.Выбран()=1 Тогда
		
		
		Если Клиент.ВидКлиента = Перечисление.ВидыКлиентов.Поставщик Тогда
			Сообщить("Выбранный контрагент является поставщиком - выберите правильного!");
			Клиент = "";
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
		//		Клиент.ИспользоватьДату(ДатаДок);
		Если Клиент.КлГруппа.Выбран()=1 Тогда
			КлГруппа=Клиент.КлГруппа;
		Иначе
			КлГруппа=Клиент;
		КонецЕсли;		             
		//		КлГруппа.ИспользоватьДату(ДатаДок);				
		Если Клиент.Страна=Константа.СтранаРезидент Тогда
			СтавкаНДС=Константа.ОсновнаяСтавкаНДС;
		Иначе
			СтавкаНДС=Перечисление.ЗначенияНДС.НДС0;
		КонецЕсли;	
		
		АктФИО();

		Если ПустоеЗначение(НомерКарты)=1 Тогда
			НомерКарты = СокрЛП(Клиент.Карта);
		КонецЕсли;
		
		Если старКлиент<>Клиент Тогда
			СкидкаПоКарте = 0;
		КонецЕсли;
		ПриИзмененииСкидкиДокумента(Контекст,1);
		
		Если Клиент.флЛояльность = 1 Тогда
			Предупреждение( "Potencialais Pastavigo Klientu Programmas dalibnieks.", 10 );
		КонецЕсли;
		
		старКлиент = Клиент;
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры
//------------------------
Процедура ВыборДаты()
	Устан_Вал(Контекст,ДатаДок,Валюта_Прежн,Курс_Прежн);
	ВыборКлиента();
КонецПроцедуры
//-----------------------------------------------
Процедура Подбор()
	ОткрытьПодбор("Номенклатура","ДляПодбора");
	УстановитьЗначениеВПодборе("Склад",Склад);
КонецПроцедуры
//***********************************************
Процедура кнВвестиНаОснованииПриНажатии(ВидДок="РасходнаяНакладнаяНал")
	
	ДокТест = СоздатьОбъект("Документ");
	Если ДокТест.ВыбратьПодчиненныеДокументы(,,ТекущийДокумент()) = 1 Тогда  
		Пока ДокТест.ПолучитьДокумент() = 1	Цикл
			Если ДокТест.ПометкаУдаления() = 1 Тогда
				Продолжить;
			КонецЕсли;     
			Если ДокТест.Вид() = ВидДок Тогда  
				Предупреждение("Данный документ уже имеет ранее введенный документ "+ДокТест);
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;    
	Список = СоздатьОбъект("СписокЗначений");
	Список.ДобавитьЗначение("ВидПлатежа",1);
	ОткрытьФорму("Документ."+ВидДок,Список,ТекущийДокумент());
КонецПроцедуры
//***********************************************
Процедура ОбработкаПодбора(Выб)
	
	Если семПроверкаСтавкиНДС( Выб ) = 0 Тогда Возврат; КонецЕсли;
	
	Если Константа.ЗапрашиватьКоличество=Перечисление.Булево.Да Тогда
		Кол=1;
		Если ВвестиЧисло(Кол,"Введите количество",10,3)=1 Тогда
			НоваяСтрока();
			Если Режим="Каталог" Тогда
				Товар=Выб;
			Иначе
				Товар=Выб;
			КонецЕсли;
			Количество=Кол;
			//Резервировать=Кол;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		НоваяСтрока();
		Если Режим="Каталог" Тогда
			Товар=Выб;
		Иначе
			Товар=Выб;
		КонецЕсли;
		Количество=1;
		//Резервировать=1;
	КонецЕсли;
	ТовКод=Товар.Код;  
	
	УстанЦеныРасх(Контекст);
	ОбнулитьБесплатныеТовары();
	
	Всего = Сумма + НДС;
	АктивизироватьСтроку();    
	                 
	ПровестиСтроку();
	
КонецПроцедуры

Процедура семУстановитьВалюту( флКопирования )
	Если флКопирования = 0 Тогда
		Валюта = Константа.ОсновнаяВалютаПродажи;
	КонецЕсли;
	Дата_Курса = ДатаДок;
	Курс = КурсДляВалюты( Валюта, Дата_Курса );
	Валюта_Прежн = Валюта;
	Курс_Прежн = Курс;
КонецПроцедуры

Процедура семЗаполнитьПоСпискуЗаказов()
	сп = Форма.Параметр;
	Если сп.РазмерСписка() = 0 Тогда 
		Сообщить( "Нет данных для заполнения." ); Возврат;
	Иначе
		промЗаказ = сп.ПолучитьЗначение( 1 );
	КонецЕсли;
	Клиент = промЗаказ.Клиент;
	табл = СоздатьОбъект( "ТаблицаЗначений" );
	табл.НоваяКолонка( "Товар" );
	табл.НоваяКолонка( "Колво" );
	Для н = 1 по сп.РазмерСписка() Цикл
		док = сп.ПолучитьЗначение( н );
		док.ВыбратьСтроки();
		Пока док.ПолучитьСтроку() = 1 Цикл
			табл.НоваяСтрока();
			табл.Товар = док.Товар;
			табл.Колво = док.Количество*док.Коэффициент;
		КонецЦикла;
	КонецЦикла;
	табл.Свернуть( "Товар", "Колво" );
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку() = 1 Цикл
		НоваяСтрока();
		Товар = табл.Товар;
		ТовКод=Товар.Код;
		Количество=табл.Колво;
		УстанЦеныРасх(Контекст);
		Всего = Сумма + НДС;
	КонецЦикла;
КонецПроцедуры           

Процедура ЗаполнитьИсторию()
	//PR 01.04.08
	                  
	Если Константа.ЧастноеЛицо=Клиент Тогда
		Предупреждение("Нельзя заполнять историю по безымянному клиенту!");
		Возврат;
	КонецЕсли;                                    
	
	Если КоличествоСтрок()>0 Тогда
		Если Вопрос("Документ не пустой. Будут удалены все существующие перемещения. Операция необратимая. Вы уверены, что хотите продолжить?","Да+Нет")="Да" Тогда
			ВыбратьСтроки();
			Пока ПолучитьСтроку()=1 Цикл
				Если ПустоеЗначение(ДокПерем)=0 Тогда
					Док=СоздатьОбъект( "Документ.Перемещение" );
					Док.НайтиДокумент(ДокПерем);
					Док.Удалить(0);
				КонецЕсли;
			КонецЦикла;
			УдалитьСтроки();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;            
	
	Если НазваниеНабораПрав()="Администратор" Тогда
		Сообщить("Начало: "+ТекущееВремя());
	КонецЕсли;
	
	ODBCRecordSet = СоздатьОбъект( "ODBCRecordSet" );      
	               
	ТекстЗапроса="-- удаление временной таблицы
	|IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE 
	|ID=OBJECT_ID('tempdb..#Остатки') AND sysstat & 0xf = 3 )
	|DROP TABLE #Остатки;";
	ODBCRecordSet.ВыполнитьСкалярный(ТекстЗапроса);

	ТекстЗапроса="-- создание временной таблицы
	|CREATE TABLE #Остатки (Товар CHAR(9),Склад CHAR(9), Остаток NUMERIC(17,3));";
	ODBCRecordSet.ВыполнитьСкалярный(ТекстЗапроса);

	//табл.ВыбратьСтроку();                                                           
	
	//ТекстЗапроса="DELETE #Остатки
	//|			  WHERE #Остатки.Остаток<>(SELECT MAX(T.Остаток) FROM #Остатки T WHERE T.Товар=#Остатки.Товар)";
	//
	//ODBCRecordSet.ВыполнитьСкалярный(ТекстЗапроса);
	             
	ТекстЗапроса="SELECT Товар [Товар $Справочник.Номенклатура],Склад [ОсновнойСклад $Справочник.МестаХранения]  FROM  #Остатки";
	табл = ODBCRecordSet.ВыполнитьИнструкцию(ТекстЗапроса);
//	табл.ВыбратьСтроку();
	
	ТекстЗапроса="
	|SELECT DISTINCT 
	|	$Рег.Товар [Товар $Справочник.Номенклатура], 
	|	ISNULL(Спр2.Code,Спр.Code) КодГруппы,
	|	Спр.Code
	|FROM $Регистр.ОборотыТоваров as Рег (NOLOCK)
	|INNER JOIN $Справочник.Номенклатура as Спр ON Спр.ID = $Рег.Товар
	|INNER JOIN $Справочник.Номенклатура as Спр2 ON Спр2.ID = Спр.ParentID
	|WHERE
	|	Рег.Date_Time_IDDoc > :Нач
	|	AND $Рег.Клиент = :Клиент
	|   AND $Рег.ВидОперации='-'
	|	AND $Рег.Склад IN (SELECT Val FROM #Склады)
	|ORDER BY Спр.Code ";
	ODBCRecordSet.УстановитьТекстовыйПараметр("Нач", ДатаДок - Число(тДнейИст));
	ODBCRecordSet.УстановитьТекстовыйПараметр("Клиент", Клиент);
	ODBCRecordSet.УложитьСписокОбъектов(Склад.Родитель,"#Склады","МестаХранения");
	ODBCRecordSet.Отладка(0);
	табл = ODBCRecordSet.ВыполнитьИнструкцию(ТекстЗапроса);
	

	ТекстЗапроса="SELECT РегО.Товар [Товар], 
	|				     РегО.Склад [Склад], 
	|					 РегО.ОстатокТовараОстаток Остаток
	|           		FROM $РегистрОстатки.ОстаткиТоваров(,,(Склад IN (Select Val FROM #Склады WHERE Val<>:СкладТек)) AND (Товар IN (SELECT Val FROM #ТоварыИстории)),(Товар,Склад),) As РегО";
	
	ODBCRecordSet.УложитьСписокОбъектов(Склад.Родитель,"#Склады","МестаХранения");
	ODBCRecordSet.УстановитьТекстовыйПараметр("СкладТек",Склад);
	сТ=СоздатьОбъект("СписокЗначений");
	табл.Выгрузить(сТ,,,"Товар");
	ODBCRecordSet.УложитьСписокОбъектов(сТ,"#ТоварыИстории");
	Табл_=ODBCRecordSet.ВыполнитьИнструкцию(ТекстЗапроса);       

	ТекстЗапроса="INSERT INTO #Остатки VALUES (?,?,?)";
	ODBCRecordSet.Подготовить(ТекстЗапроса);
	ODBCRecordSet.ВыполнитьSQL_ИзТЗ(табл_);
	табл_="";

    ТекстЗапроса=" SELECT О2.Товар [Товар $Справочник.Номенклатура],
 	|					  О2.Склад [Склад $Справочник.МестаХранения], 
	|					  О.Остаток
	|				FROM
	|				(SELECT Товар, MAX(Остаток) Остаток FROM #Остатки GROUP BY Товар) О
	|				INNER JOIN #Остатки О2 ON О2.Товар=О.Товар AND О2.Остаток=О.Остаток
	|				ORDER BY О2.Товар, О2.Склад";
	
	ТаблОстатки=ODBCRecordSet.ВыполнитьИнструкцию(ТекстЗапроса);
                 
	МожноРассчитывать=0;
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку()=1 Цикл
		Состояние("Заполнение: "+Табл.НомерСтроки+"/"+Табл.КоличествоСтрок());
		НоваяСтрока();
		Товар=Табл.Товар;
		ТовКод=Товар.Код;        
		рез=0;
		Если ТаблОстатки.НайтиЗначение(Товар,рез,"Товар")=1 Тогда
			ТаблОстатки.ПолучитьСтрокуПоНомеру(рез);
			ОсновнойСклад=ТаблОстатки.Склад;		
		КонецЕсли;
	//	ОсновнойСклад=Табл.ОсновнойСклад;
		УстанЦеныРасх(Контекст);
		Количество=0;      
		Сумма=Цена*Количество;
		Всего = Сумма + НДС;
	КонецЦикла;
    МожноРассчитывать=1;

	Если НазваниеНабораПрав()="Администратор" Тогда
		Сообщить("Конец: "+ТекущееВремя());
	КонецЕсли;
	
КонецПроцедуры


Процедура ВводНового( флКопирования )
	ЗаполнитьШапку(Контекст);  
	семУстановитьВалюту( флКопирования );
	Если флКопирования = 1 Тогда 
		//в случае копирования необходимо обнулить документы перемещения
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
			Количество=0;
			ДокПерем="";
		КонецЦикла;
		Возврат; 
	КонецЕсли;
	
	ДатаДок=РабочаяДата(); 
	ДатаПоставки=РабочаяДата();  
	//Клиент=Константа.ОсновнойПокупатель;
	СкидкаНакл=0;
	//Если НазваниеНабораПрав() = "КассирСчетаЗаказыМенеджер" Тогда
	//	спр = СоздатьОбъект("Справочник.МестаХранения");
	//	спр.НайтиПоКоду(85);
	//	Если спр.Выбран() > 0  Тогда
	//		Склад=спр.ТекущийЭлемент();		
	//	Иначе                             
	//		Сообщить("Склад с кодом 85 - (GASTRONOME PASјT¬JUMA GALDS) необнаружен. Будет использован основной склад.");
	//		Склад=Константа.ОсновнойСклад;	
	//	КонецЕсли;
	//Иначе
	//	Склад=Константа.ОсновнойСклад;
	//КонецЕсли;
	//Если НазваниеНабораПрав() = "КассирСчетаЗаказыМенеджер" Тогда
	//	спр = СоздатьОбъект("Справочник.Контрагенты");
	//	спр.НайтиПоКоду("122",0);
	//	Если спр.Выбран() > 0  Тогда
	//		Клиент=спр.ТекущийЭлемент();		
	//	Иначе                             
	//		Сообщить("Контрагент с кодом 122 - (Pўr§jie pirc§ji) не обнаружен.");
	//	КонецЕсли;		
	//КонецЕсли;
	Склад = ?(ПустоеЗначение(РозничныйТорговыйСклад) = 0, РозничныйТорговыйСклад, Константа.ОсновнойСклад);

	Клиент = Константа.ЧастноеЛицо;

	спр=0; 

	КатегорияЦены = ?(ПустоеЗначение(РозничнаяКатегорияЦены) = 0, РозничнаяКатегорияЦены, Пользователь.ОснКатегорияЦены);
	Если ПустоеЗначение(КатегорияЦены)=1 Тогда
		КатегорияЦены = Константа.РозничнаяКатегорияЦены;
	КонецЕсли;
	
	СтавкаНДС=Константа.ОсновнаяСтавкаНДС;  
	Если ТипЗначенияСтр( Форма.Параметр ) = "СписокЗначений" Тогда
		семЗаполнитьПоСпискуЗаказов(); Возврат;
	КонецЕсли;   
	ВыборКлиента();  
	Форма.кнВвестиНаОсновании.Видимость(0);
	                   
	
КонецПроцедуры
//-----------------------------------------------
Процедура ВводНаОсновании(ДокОснование)
	Если ДокОснование.Вид()="ЗаявкаПокупателя" Тогда
		Если ПустоеЗначение(ДокОснование.ДокументПриобретение)=1 Тогда
		ИначеЕсли ДокОснование.СогласованоЗакупки=0 Тогда
			Сообщить("Заявка покупателя не согласована с отделом закупок!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;    
		Если ПустоеЗначение(ДокОснование.ДокументИзготовление)=1 Тогда
		ИначеЕсли ДокОснование.СогласованоПроизводство=0 Тогда
			Сообщить("Заявка покупателя не согласована с производством!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли; 
		
		ЗаполнитьШапкуНаОсн(Контекст,ДокОснование);  
		ДокументОснование=ДокОснование;
		ДатаДок=РабочаяДата();
		Клиент=ДокОснование.Клиент;
		Валюта=Константа.ОсновнаяВалютаПродажи;
		Дата_Курса=ДатаДок;
		Курс=КурсДляВалюты(Валюта,Дата_Курса);
		Валюта_Прежн=Валюта;
		Курс_Прежн=Курс;
		СкидкаНакл=0;
		ВыборКлиента();
		//		Клиент.ИспользоватьДату(ДатаДок);
		Склад=ДокОснование.Склад;
		ДатаПоставки=ДокОснование.ДатаПоставки;
		ИзмДатаПоставки();
		КатегорияЦены=Константа.РозничнаяКатегорияЦены;
		СтавкаНДС=Константа.ОсновнаяСтавкаНДС; 
		
		ТабТоваров=СоздатьОбъект("ТаблицаЗначений");
		ВыгрузитьТабличнуюЧасть(ТабТоваров,"Товар,Количество,Резервировать,Закупать,Производить");
		
		ДокОснование.ВыбратьСтроки();
		Пока ДокОснование.ПолучитьСтроку()=1 Цикл
			ТабТоваров.НоваяСтрока();
			ТабТоваров.Товар=ДокОснование.Товар;
			ТабТоваров.Количество=ДокОснование.Количество*ДокОснование.Коэффициент;
			ТабТоваров.Резервировать=ТабТоваров.Количество;
		КонецЦикла;
		
		Если ПустоеЗначение(ДокОснование.ДокументПриобретение)=0 Тогда
			Док=СоздатьОбъект("Документ.ЗаявкаНаПриобретение");
			Док.НайтиДокумент(ДокОснование.ДокументПриобретение);
			Док.ВыбратьСтроки();
			Пока Док.ПолучитьСтроку()=1 Цикл
				ТабТоваров.НоваяСтрока();
				ТабТоваров.Товар=Док.Товар;
				ТабТоваров.Количество=Док.Количество*Док.Коэффициент;
				ТабТоваров.Закупать=ТабТоваров.Количество;
			КонецЦикла;                                   		    
		КонецЕсли;     
		
		Если ПустоеЗначение(ДокОснование.ДокументИзготовление)=0 Тогда
			Док=СоздатьОбъект("Документ.ЗаявкаНаИзготовление");
			Док.НайтиДокумент(ДокОснование.ДокументИзготовление);
			Док.ВыбратьСтроки();
			Пока Док.ПолучитьСтроку()=1 Цикл
				ТабТоваров.НоваяСтрока();
				ТабТоваров.Товар=Док.Товар;
				ТабТоваров.Количество=Док.Количество*Док.Коэффициент;
				ТабТоваров.Производить=ТабТоваров.Количество;
			КонецЦикла;                                   		    
		КонецЕсли;
		
		ТабТоваров.Свернуть("Товар","Количество,Резервировать,Закупать,Производить");
		ТабТоваров.ВыбратьСтроки();
		Пока ТабТоваров.ПолучитьСтроку()=1 Цикл
			НоваяСтрока();
			Товар=ТабТоваров.Товар;
			ТовКод=Товар.Код;
			Количество=ТабТоваров.Количество;
			УстановкаЕдиницыИзмерения(Контекст);
			Резервировать=ТабТоваров.Резервировать;
			Закупать=ТабТоваров.Закупать;
			Производить=ТабТоваров.Производить;			
			УстанЦеныРасх(Контекст); 
			Всего = Сумма + НДС;
		КонецЦикла;                            	
	Иначе
		Сообщить("Документ вводится только на основании Заявки покупателя!","!");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
КонецПроцедуры
//-------------------------
Процедура ОформитьРезерв()
	Если Проведен()=0 Тогда
		Сообщить("Документ не проведен!");
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Документ.РезервированиеТовара",,ТекущийДокумент());	
КонецПроцедуры  


//=================================
Процедура ОплатитьДокумент()
	
	Если Проведен()=0 Тогда
		Сообщить("Документ не проведен!");
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Документ.ПриходныйОрдерТБ",,ТекущийДокумент());	
КонецПроцедуры  

//=================================
Процедура ИзменениеКоличества()
	Перем Идент;
	//Идент=?(ПустоеЗначение(Товар)=1,"",Товар.ВидТовара.Идентификатор());
	//Если (Идент="Блюдо") ИЛИ (Идент="Ингредиент") ИЛИ (Идент="Компонент") ИЛИ (Идент="Товар") Тогда
	//	Резервировать=Мин(КонтрольОстатка(Контекст),Количество);  
	//Иначе
	//	Резервировать=0;
	//КонецЕсли;
	//Если (Идент="Ингредиент") ИЛИ (Идент="Товар") Тогда
	//	Закупать=Количество-Резервировать;
	//	Производить=0;
	//ИначеЕсли (Идент="Компонент") ИЛИ (Идент="Блюдо")  Тогда
	//	Закупать=0;
	//	Производить=Количество-Резервировать;
	//Иначе
	//	Закупать=0;
	//	Производить=0;
	//КонецЕсли;
КонецПроцедуры
//----------------------------
Процедура ИзменениеРезерва()
	Перем ОстКол;
	Перем Идент;
	//Идент=?(ПустоеЗначение(Товар)=1,"",Товар.ВидТовара.Идентификатор());
	//Если (Идент="Ингредиент") ИЛИ (Идент="Компонент") ИЛИ (Идент="Блюдо") ИЛИ (Идент="Товар") Тогда
	//	Резервировать=Мин(Количество,Резервировать);
	//	ОстКол=Количество-Резервировать;
	//	Если Закупать+Производить>ОстКол Тогда
	//		Закупать=Макс(ОстКол-Производить,0);
	//		Производить=Мин(Производить,ОстКол-Закупать);
	//	КонецЕсли;
	//Иначе
	//	Резервировать=0;
	//КонецЕсли;
КонецПроцедуры
//----------------------------
Процедура ИзменениеЗакупки()
	Перем Идент;
	Перем ОстКол;
	//Идент=?(ПустоеЗначение(Товар)=1,"",Товар.ВидТовара.Идентификатор());
	//Если (Идент="Ингредиент") ИЛИ (Идент="Компонент") ИЛИ (Идент="Блюдо") ИЛИ (Идент="Товар") Тогда
	//	ОстКол=Количество-Резервировать;
	//	Если Закупать+Производить>ОстКол Тогда
	//		Производить=Макс(ОстКол-Закупать,0);
	//		Закупать=Мин(Закупать,ОстКол-Производить);
	//	КонецЕсли;
	//Иначе
	//	Закупать=0;
	//КонецЕсли;
КонецПроцедуры
//----------------------------
Процедура ИзменениеВыпуска()
	Перем Идент;
	Перем ОстКол;
	//Идент=?(ПустоеЗначение(Товар)=1,"",Товар.ВидТовара.Идентификатор());
	//Если (Идент="Ингредиент") ИЛИ (Идент="Компонент") ИЛИ (Идент="Блюдо") ИЛИ (Идент="Товар") Тогда
	//	ОстКол=Количество-Резервировать;
	//	Если Закупать+Производить>ОстКол Тогда
	//		Закупать=Макс(ОстКол-Производить,0);
	//		Производить=Мин(Производить,ОстКол-Закупать);
	//	КонецЕсли;
	//Иначе
	//	Производить=0;
	//КонецЕсли;
КонецПроцедуры
//-----------------------------------------------
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписи() Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ПриЗаписи()
	//Закомментировано Инсталлятором МОД:Процедура ПриЗаписи()
	Если семМожноЗаписать( Контекст ) = 0 Тогда Возврат; КонецЕсли;
	Если Клиент.Выбран()=0 Тогда
		Сообщить("Не указан клиент! Документ не записан");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;            
	Если ПустоеЗначение(ДатаПоставки)=1 Тогда
		Сообщить("Не указана дата поставки! Документ не записан");
		СтатусВозврата(0);     
		Возврат;
	КонецЕсли;
	
	//ВыбратьСтроки();
	//Пока ПолучитьСтроку()=1 Цикл         
	//	
	//	Если Товар.ВидТовара=Перечисление.ВидыТоваров.Услуга Тогда
	//	    Продолжить;
	//	КонецЕсли;
	//    Если Закупать+Производить+Резервировать<>Количество Тогда
	//        Сообщить("В строке №"+НомерСтроки+" количества закупки, выпуска и резерва не соответсвуют общему количеству!");
	//		СтатусВозврата(0);    
	//		Возврат;
	//    КонецЕсли;
	//КонецЦикла;   
	//	Провести();
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписи()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	//	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
	стар_ПриЗаписи();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД

//------------- 
Процедура ПриВыбореТовара()
	Если (Товар.ВидТовара=Перечисление.ВидыТоваров.МБП) ИЛИ (Товар.ВидТовара=Перечисление.ВидыТоваров.ОС) Тогда
		Предупреждение("Нельзя выбирать ОС или МБП!");
		Товар=ПолучитьПустоеЗначение("Справочник.Номенклатура"); 
		Возврат;
	КонецЕсли;
	УстанЦеныРасх(Контекст);	
КонецПроцедуры	
//----------------------------------
Процедура ПечататьЧек()
	Если СуммаПредоплаты>0 Тогда
		глПечататьЧек(Контекст);
	Иначе
		Сообщить("Нет суммы оплаты!");
	КонецЕсли;
КонецПроцедуры	           
//----------------------------------
Процедура Печать(Вид)
	Таб=СоздатьОбъект("Таблица"); 
	
	Если Вид=0 Тогда
		Таб.исходнаяТаблица("Таблица");
	Иначе
		Таб.исходнаяТаблица("Счет2");
	КонецЕсли;
	
	Если СокрЛП(Клиент.Код) <> "122" Тогда
		ПечСтр1 = Клиент.Код + " " + Клиент.ПолноеНаименование;
		ПечСтр2 = СокрЛП(Клиент.ЮридическийАдрес) + " " + СокрЛП(Клиент.Телефоны);
		ПечСтр3 = Клиент.Банк.Наименование +"
		|"+ Клиент.Банк.Код_Банка;
		ПечСтр4 = Клиент.Р_Счет1+", "+ Клиент.Р_Счет2;
		ПечСтр5 = Клиент.ИНН;
		//ПечСтр6 = "LV"+Клиент.ИНН;
		ПечСтр6 = семВыводКодаНДС( Клиент, ДатаДок );
		ПечСтр7 = Клиент.Адрес1;
	Иначе
		ПечСтр1 = ФИО;
		ПечСтр2 = 	"";
		ПечСтр3 = ФАДРЕС;
		ПечСтр4 = 	"";
		ПечСтр5 = 	"";
		ПечСтр6 = 	"";
		ПечСтр7 = 	"";
	КонецЕсли;           
	
	//Если Итог("Скидка") <> 0 Тогда  - Vilisova pieprasiitaas izmainjas 16.09.2004
	
	Если (Итог("Скидка") <> 0) И (БСК <> 1) Тогда
		Таб.ВывестиСекцию("Шапка");
	Иначе
		Таб.ВывестиСекцию("Шапка|Pamata");
		Таб.ПрисоединитьСекцию("Шапка|Pamata2");
	КонецЕсли;		
	
	
	ВыбратьСтроки();
	Ном=0;      
	
	Если Строка(ДатаПоставки)<>"  .  .  " Тогда
		DrukTerm="Preces piegўdes termiґє: "+ДатаПоставки;
	Иначе DrukTerm="";
	КонецЕсли;	
	
	// Сформируем печать скидки
	Если Итог("Скидка")=0 Тогда
		ПечСкидки="0.00";
		ПечСумСкидки="Atlaide ";
	ИначеЕсли Итог("Скидка")>0 Тогда
		ПечСкидки=Формат(Итог("Скидка")*(1+ПроцентНДС(СтавкаНДС)/100),"Ч14.2");
		ПечСумСкидки="Atlaide (-)";
	ИначеЕсли Итог("Скидка")<0 Тогда
		ПечСкидки=Формат(-(Итог("Скидка")*(1+ПроцентНДС(СтавкаНДС)/100)),"Ч14.2");
		ПечСумСкидки="Uzcenojums (+)";
	КонецЕсли;	
	
	Пока ПолучитьСтроку() = 1 do
		Ном=Ном+1;            
		
		//Если Итог("Скидка") <> 0 Тогда  - Vilisova pieprasiitaas izmainjas 16.09.2004
		
		Если (Итог("Скидка") <> 0) И (БСК <> 1) Тогда
			Таб.ВывестиСекцию("Строка");
		Иначе
			Таб.ВывестиСекцию("Строка|Pamata");
			Таб.ПрисоединитьСекцию("Строка|Pamata2");
		КонецЕсли;			
		
	КонецЦикла;         
	
	СуммаОплаты = ?(Константа.СуммаВключаетНДС.Получить(ДатаДок)=Перечисление.Булево.Да,Итог("Сумма"),Итог("Сумма")+Итог("НДС"));
	
	печКоммЕвро="";
	ПечОплатаЕвро="";
	Если (Валюта=Рубли) И (ПустоеЗначение(Евро)=0) Тогда
		ПечОплатаЕвро=Шаблон("Pavisam apmaksai, [Евро]:");		
		ПечСуммаЕвро=Формат(Пересчет(СуммаОплаты,Валюта,ДатаДок,Евро,ДатаДок),"Ч14.2");
		печКоммЕвро="*№o r§°inu var apmaksўt EUR konvert§jot p§c LB noteiktў maiґas kursa 1 EUR=0,702804 LVL.
					|*Veicot apmaksu EUR, lЅdzam maksўjuma uzdevumў norўd®t atbilstoєo EUR kontu.";
	КонецЕсли;
	
	Таб.ВывестиСекцию("Подвал|Pamata");
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Опции(0,0,0,0,ПарСтрДок);
	Таб.ПараметрыСтраницы(1,100,,,,,,,,1);
	Таб.Показать("PPR (Sk. naudў): "+НомерДок,"");
	
КонецПроцедуры	    

Функция ПолучитьРознЦену(Конт)  
	Возврат Цена;
КонецФункции

Процедура ПроверитьПозиции()
	
	Если Вопрос("Будут удалены позиции с нулевым количеством. Продолжить?","Да+Нет")="Да" Тогда
	Иначе
		Возврат;
	КонецЕсли;  

	//удалим строки с нулевым количеством	
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Если Количество=0 Тогда
			УдалитьСтроку();
			ВыбратьСтроки();
		КонецЕсли;
	КонецЦикла;
	
	//проверим выбран ли склад
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		
		Если ПустоеЗначение(ОсновнойСклад)=1 Тогда
			Сообщить("В строке "+НомерСтроки+" не указан основной склад!");
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

//*******************************************
Функция ОстатокНаСкладе()

	Ост=0;
	Если МожноРассчитывать=1 Тогда
		Ост=СокрЛ(Формат(Регистр.ОстаткиТоваров.СводныйОстаток(Товар,ОсновнойСклад,,"ОстатокТовара")-
			Регистр.РезервыТоваров.СводныйОстаток(Товар,,"РезервТовара"),"Ч10.3"));
		
	КонецЕсли;	
	
		Возврат Ост;	
КонецФункции
                    

//**********************************************
Процедура ПриОкончанииРедактированияСтроки()
	
	Если (Форма.ТекущаяКолонка()="Количество") ИЛИ (Форма.ТекущаяКолонка()="ОсновнойСклад") ИЛИ (Форма.ТекущаяКолонка()="Товар") Тогда
		ПровестиСтроку();
	КонецЕсли;
	
	СуммаБезНДС_=Итог("Сумма");
	СуммаНДС_=Итог("НДС");
	СуммаВсего_=СуммаБезНДС_+СуммаНДС_;
	ВыбратьСтроки();
	ПолучитьСтроку();
	Выч_суммы_накл_сНП(Контекст,0,1);
	
	Если Окр(СуммаВсего_,2)<>(Окр(СуммаБезНДС_,2)+Окр(СуммаНДС_,2)) Тогда
		//скорректируем НДС на разницу
		Разница=СуммаВсего_-(Окр(СуммаБезНДС_,2)+Окр(СуммаНДС_,2));
		ВыбратьСтроки();
		ПолучитьСтроку();
		НДС=НДС-Разница;
	КонецЕсли;
	
	ОбнулитьБесплатныеТовары();

КонецПроцедуры       

//**********************************************
Процедура ПриУдаленииСтроки()
                            
	Если Вопрос("Вы действительно хотите удалить строку?","Да+Нет")="Да" Тогда
		Если ПустоеЗначение(ДокПерем)=0 Тогда
			Док=СоздатьОбъект( "Документ.Перемещение" );
			Док.НайтиДокумент(ДокПерем);
			Док.Удалить(0);
		КонецЕсли;        
		
		ОбнулитьБесплатныеТовары();
	Иначе
		СтатусВозврата(0);
	КонецЕсли;
	
КонецПроцедуры

//======================================================================
Процедура УстСкидкиДокумент()
	
	Если СкидкаНакл=0 Тогда
		Если Вопрос("Снять (ДА) скидку? ","Да+Нет")="Да" Тогда
			СнятьСкидку=1;
			ПроцНДС=ПроцентНДС(СтавкаНДС);
			
			ВыбратьСтроки();
			Пока ПолучитьСтроку() = 1 Цикл
				ВидСкидки = Перечисление.ВидСкидки.Документ;
				Скидка = "";
				ЦенаСкидка  = ЦенаТовараПоКатегории(Контекст,КатегорияЦены,1);
				Цена   = ЦенаСкидка;
				ЦенаСНДС = Окр(Цена*(1+ПроцНДС/100),2);
				Выч_суммы_накл_сНП(Контекст,1,0);
			КонецЦикла;

			Возврат;
		Иначе
			СнятьСкидку=0;
			ВидСкидки = "";
			Скидка = "";
			ЦенаСкидка  = ЦенаТовараПоКатегории(Контекст,КатегорияЦены,1);
			Цена   = ЦенаСкидка;
			ЦенаСНДС = Цена*(1+ПроцНДС/100);
			Выч_суммы_накл_сНП(Контекст);
		КонецЕсли;
	КонецЕсли;


	ПриИзмененииСкидкиДокумента(Контекст);
	
КонецПроцедуры // УстСкидкиДокумент

Функция ВыбратьСклад(ВыбСклад)
	
		ODBCRecordSet=СоздатьОбъект( "ODBCRecordSet" );
		ТекстЗапроса="SELECT РегО.Склад [Склад $Справочник.МестаХранения], 
		|					 РегО.ОстатокТовараОстаток Остаток
		|           		FROM $РегистрОстатки.ОстаткиТоваров(:ВыбДата~,,(Склад IN (Select Val FROM #Склады)) AND (Товар = :Товар),(Товар,Склад),) As РегО";
		                                     
		Если Выбран()=0 Тогда
			ODBCRecordSet.УстановитьТекстовыйПараметр("ВыбДата",ПолучитьТА()); 
		Иначе
			ODBCRecordSet.УстановитьТекстовыйПараметр("ВыбДата", ?(ПустоеЗначение(ДокПерем)=1,СформироватьПозициюДокумента(ТекущийДокумент(), -1),СформироватьПозициюДокумента(ДокПерем, -1)));
		КонецЕсли;
		ODBCRecordSet.УложитьСписокОбъектов(Склад.Родитель,"#Склады","МестаХранения");
		ODBCRecordSet.УстановитьТекстовыйПараметр("Товар",Товар);
		Табл_=ODBCRecordSet.ВыполнитьИнструкцию(ТекстЗапроса);
                               
		рез=0;
		Если Табл_.ВыбратьСтроку(рез,"Выберите склад для товара <"+Товар+">")=1 Тогда
			Если рез=0 Тогда
				Возврат ВыбСклад;
			КонецЕсли;
			Табл_.ПолучитьСтрокуПоНомеру(рез);
			Возврат Табл_.Склад;
		Иначе
			Возврат ВыбСклад;
		КонецЕсли;
		
КонецФункции

Процедура ПриНачалеВыбораЗначения(Идент,ФлагСт)
	
	Если Идент="ОсновнойСклад" Тогда           
		ФлагСт=0;
		         
		ОсновнойСклад=ВыбратьСклад(ОсновнойСклад);
		
	КонецЕсли;
КонецПроцедуры

Процедура ПересчетЦен()
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Если ВидСкидки <> Перечисление.ВидСкидки.Документ Тогда
			УстанЦеныРасх(Контекст);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры  


Процедура ВводНомераКарты()
	Параметр_	= СоздатьОбъект("СписокЗначений");
	Параметр_.ДобавитьЗначение("", "НомерКарты");
	Параметр_.ДобавитьЗначение("", "СрокГодности");
	Параметр_.ДобавитьЗначение(0, "Скидка");
	Параметр_.ДобавитьЗначение("", "Клиент");
	Параметр_.ДобавитьЗначение("", "Критерий");
	
	// открываем форму обработки
	ОткрытьФормуМодально("Обработка.ВводНомераСкидочнойКарты", Параметр_);
	
	// получаем параметр возврата.
	Если Параметр_.Получить("СтатусВозврата") = 0 Тогда
		Возврат;
	КонецЕсли;

	пКлиент = Параметр_.Получить("Клиент");
	
	Если ПустоеЗначение(пКлиент)=0 Тогда
		Клиент = пКлиент;
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			ВидСкидки = "";
		КонецЦикла;
		ВыборКлиента();
	КонецЕсли;

	НомерКарты = Параметр_.Получить("НомерКарты");
	СкидкаПоКарте = Параметр_.Получить("Скидка");
	
	пКритерий = Параметр_.Получить("Критерий");
	Если ПустоеЗначение(пКритерий)=0 Тогда
		поз=0;
		//Если ТабСтатистики.НайтиЗначение(пКритерий.Владелец,поз,"Критерий")=1 Тогда
		//	ТабСтатистики.ПолучитьСтрокуПоНомеру(поз);
		//Иначе
		//	ТабСтатистики.НоваяСтрока();
		//	ТабСтатистики.Критерий = пКритерий.Владелец;
		//КонецЕсли;
		//ТабСтатистики.Значение = пКритерий;
		//УстановкаДоступностиКнопокТаблицы();
	КонецЕсли;
	
	ККМ = ККМФискальногоРегистратора;
	
	ПересчетЦен();	
	
КонецПроцедуры


// При входе в Форму запомним промежуточные переменные
Валюта_Прежн=Валюта;
Курс_Прежн=Курс;
тДнейИст=30;
МожноРассчитывать=1;
Попытка
	Расш=СоздатьОбъект("РасширениеФормы");
Исключение
	Расш="";
КонецПопытки;

Форма.Клиент.ВыполнятьФормулуТолькоПриИзменении(1);