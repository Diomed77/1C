
Перем Парт;
Перем РегПарт;

//PR Begin
Процедура ПеремещениеПоПартиям(ТУ)
	//партии и склады           
	
	Если (ТУ="Упр") Тогда
		Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета.Выбран()=0 Тогда
			Возврат ; // учет Упр. не ведется
		КонецЕсли;
		РегФирма=Фирма;
	ИначеЕсли (ТУ="Фин") Тогда
		Если Фирма.МетодРасчетаСебестоимостиФинансовогоУчета.Выбран()=0 Тогда
			Возврат ; // учет Фин. не ведется
		КонецЕсли;
		РегФирма=Фирма;
	Иначе
		Сообщить("Неверно задан тип учета партий товаров по "+ТекущийДокумент());
		Возврат ;
	КонецЕсли;                               
	
	// склпарт
	Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
		РегСклад=Склад;
	Иначе
		РегСклад="";
	КонецЕсли;
	
	//-- -- -- --	
	
	Если ТУ="Фин" Тогда
		ПромФирма=Фирма;
	Иначе
		ПромФирма=Фирма;
	КонецЕсли;	
	// склпарт
	Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
		ПромСклад=ОсновнойСклад;
	Иначе
		ПромСклад=СоздатьОбъект("Справочник.МестаХранения");
	КонецЕсли;		
	                 
	ОбщееКоличество=Количество*Коэффициент;
	НадоСписать=ОбщееКоличество;
	КоличествоПоРеализации=ОбщееКоличество;
	Себестоимость=0;

	ТаможенныйСклад = 0;
	Если Склад.Выбран() = 1 Тогда
		Если Склад.ТаможенныйСклад = 1 Тогда  
			Если ДокументОснование.Выбран() = 1 Тогда
				Если ДокументОснование.Вид() = "ПриходнаяНакладная" Тогда  
					ТаможенныйСклад = 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ТаможенныйСклад = 0 Тогда
		РегПарт.УстановитьФильтр(ПромФирма,Товар,,,,ПромСклад);
	Иначе
		РегПарт.УстановитьФильтр(ПромФирма,Товар,,,ДокументОснование,ПромСклад);
	КонецЕсли;

	РегПарт.ВыгрузитьИтоги(Парт,1,1); 
	Если ((ТУ="Фин") И (Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.FIFO)) Тогда
		Парт.Сортировать("+СрокРеализации,-Статус,+ПрихДокумент",1);
	ИначеЕсли ((ТУ="Фин") И (Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO)) Тогда 
		Парт.Сортировать("-СрокРеализации,-Статус,-ПрихДокумент",1);
	ИначеЕсли ((ТУ="Фин") И (Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему)) Тогда	
		Парт.Сортировать("-Статус,+ПрихДокумент",1);
	ИначеЕсли ((ТУ="Упр") И (Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.FIFO)) Тогда
		Парт.Сортировать("+СрокРеализации,-Статус,+ПрихДокумент",1);
	ИначеЕсли ((ТУ="Упр") И (Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO)) Тогда
		Парт.Сортировать("-СрокРеализации,-Статус,-ПрихДокумент",1);
	ИначеЕсли ((ТУ="Упр") И (Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему)) Тогда	
		Парт.Сортировать("-Статус,+ПрихДокумент",1);                            
	КонецЕсли;	
	Парт.ВыбратьСтроки();
	Пока Парт.ПолучитьСтроку()=1 Цикл
		Если НадоСписать=0 Тогда
			Прервать;
		КонецЕсли; 
		Контр=Парт.Контрагент;
		ПромДок=Парт.ПрихДокумент;
		R=Парт.Статус;
		СрокРеал=Парт.СрокРеализации;
		Партия=Парт.Партия;
		ОтатокПартииКол=Парт.ОстатокТовара;
		ОтатокПартииВал=Парт.Стоимость;
		ОтатокПартииНДС=Парт.НДС;
		ОстатокПродВал=Парт.ПродСтоимость;
		
		Если (ОтатокПартииКол<0)или(ОтатокПартииКол=0) Тогда  
			 Продолжить;
		КонецЕсли;  
		
		Если ОтатокПартииКол>=НадоСписать Тогда
			СписатьКол=НадоСписать;
		Иначе
			СписатьКол=ОтатокПартииКол;
		КонецЕсли;
		Если ОтатокПартииКол=0 Тогда
			СписатьВал=ОтатокПартииВал;       
			СписатьНДС=ОтатокПартииНДС;
			СписатьПродВал=ОстатокПродВал;
		Иначе
			СписатьВал=ОтатокПартииВал/ОтатокПартииКол*СписатьКол;
			СписатьНДС=ОтатокПартииНДС/ОтатокПартииКол*СписатьКол;
			СписатьПродВал=ОстатокПродВал/ОтатокПартииКол*СписатьКол;
		КонецЕсли; 
		
		Регистр.ПартииТоваров.ДвижениеРасход(ПромФирма,Товар,R,Контр,ПромДок,ОсновнойСклад,Партия,СрокРеал,СписатьКол,СписатьВал,СписатьПродВал,СписатьНДС,,,,"?",,3,);
		Регистр.ПартииТоваров.ДвижениеПриход(ПромФирма,Товар,R,Контр,ПромДок,Склад,Партия,СрокРеал,СписатьКол,СписатьВал,СписатьПродВал,СписатьНДС,,,,"%",,3,);
		
		СебестоимостьШ=СебестоимостьШ+СписатьВал;
		
		НадоСписать=НадоСписать-СписатьКол;
	КонецЦикла;
	//-------------------
 	Если НадоСписать>0 Тогда  
 		СписатьКол=НадоСписать;
 		Контр=СоздатьОбъект("Справочник.Контрагенты");
 		ПромДок=ТекущийДокумент();
 		СписатьВал=Товар.ЦенаПриобретения*КурсДляВалюты(Товар.ВалютаЗакупки,ДатаДок)*СписатьКол;       
		СписатьНДС=СписатьВал*(ПроцентНДС(Товар.СтавкаНДС)/(100+ПроцентНДС(Товар.СтавкаНДС)));;
		СписатьПродВал=Товар.РозничнаяЦена.Получить(ДатаДок)*СписатьКол;
 		Регистр.ПартииТоваров.ДвижениеРасход(ПромФирма,Товар,R,Контр,ПромДок,ОсновнойСклад,,,СписатьКол,СписатьВал-СписатьНДС,СписатьПродВал,СписатьНДС,,,,"?",,3,);
		Регистр.ПартииТоваров.ДвижениеПриход(ПромФирма,Товар,R,Контр,ПромДок,Склад,,,СписатьКол,СписатьВал-СписатьНДС,СписатьПродВал,СписатьНДС,,,,"%",,3,);	
		СебестоимостьШ=СебестоимостьШ+СписатьВал-СписатьНДС;
 	КонецЕсли; 	
	// ---------------
	
КонецПроцедуры	
//PR End


//PR Begin
Процедура ПеремещениеТоваров()
	
	СебестоимостьШ=0;

	// по Регистру ОстаткиТоваров 
	РегСП=СоздатьОбъект("Регистры");
	Рег=РегСП.ОстаткиТоваров;
	РегПарт=РегСП.ПартииТоваров;
	Парт=СоздатьОбъект("ТаблицаЗначений");
	
	Если ИтогиАктуальны()=0 Тогда
	         
			РегСП.Актуальность(1);
			ТоварЛист=СоздатьОбъект("СписокЗначений");
			ВыгрузитьТабличнуюЧасть(ТоварЛист,"Товар");
			Рег.УстановитьЗначениеФильтра("Товар",ТоварЛист,2);
			Рег.УстановитьЗначениеФильтра("Склад",Склад,1);
			РегПарт.УстановитьЗначениеФильтра("Товар",ТоварЛист,2);
			Рег.ВременныйРасчет();
			РегПарт.ВременныйРасчет();
			РегСП.РассчитатьРегистрыНа(ТекущийДокумент());
	//	КонецЕсли;
	КонецЕсли;
	ВыбратьСтроки();
	Пока ПолучитьСтроку()>0 Цикл   
		
		Если ОсновнойСклад.Выбран()=0 Тогда
			НеПроводить(Контекст,"Не указан склад откуда производится перемещение!");
			Возврат;
		КонецЕсли;
		
		Если глПроверкаСкладаПоПользователю(Контекст,ОсновнойСклад)=0 Тогда
			НеПроводить(Контекст,"Нельзя использовать данный склад <"+ОсновнойСклад+">!");
			Возврат;
		КонецЕсли;
		
		// Для расхода
		Если Товар.Выбран()=0 Тогда
			Сообщить("В документе "+Вид()+" № "+НомерДок
			+" от "+ДатаДок+"Не указан товар, который перемещается!");
			Продолжить;
		КонецЕсли;
		Если Товар.ВидТовара=Перечисление.ВидыТоваров.Услуга Тогда
			// услуги здесь в этих регистрах не учитываем
			Продолжить;
		КонецЕсли;
		Если НЕ(глРазрОтрицОстатки=Да) Тогда
			ОстатокТовара=Рег.СводныйОстаток(Товар,ОсновнойСклад,,"ОстатокТовара");
			Если ОстатокТовара<Количество*Коэффициент Тогда
				Сообщить("На складе <"+ОсновнойСклад+"> нет нужного количества товара "+Товар.Код+ " "+ Товар.Наименование + ".");
				НеПроводить(Контекст," На складе осталось "+ОстатокТовара
				+" "+Товар.БазоваяЕдиницаИзмерения+"." );
			КонецЕсли;
		КонецЕсли;
		// Для расхода             
		Регистр.ОстаткиТоваров.ПривязыватьСтроку(НомерСтроки);
		Регистр.ОстаткиТоваров.Фирма	= Фирма;
		Регистр.ОстаткиТоваров.ОстатокТовара=Количество*Коэффициент;
		Регистр.ОстаткиТоваров.Склад=ОсновнойСклад;
		Регистр.ОстаткиТоваров.Товар=Товар;
		Регистр.ОстаткиТоваров.ФлагУчета=1; 
		Если ТипУчета<Фин Тогда
			Регистр.ОстаткиТоваров.ДвижениеРасходВыполнить();
		КонецЕсли;
		// Для прихода   
		Регистр.ОстаткиТоваров.Склад=Склад; 
		Регистр.ОстаткиТоваров.ОстатокТовара=Количество*Коэффициент;
		Регистр.ОстаткиТоваров.Товар=Товар;
		Регистр.ОстаткиТоваров.ФлагУчета=1; 
		Если ТипУчета<Фин Тогда
			Регистр.ОстаткиТоваров.ДвижениеПриходВыполнить(); 
		КонецЕсли;
		//         
		// склпарт
		Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда  
			Если ТипУчета<Фин Тогда
				ПеремещениеПоПартиям("Упр");//,Товар,Количество,Коэффициент);
			КонецЕсли;
			//-------------------------------------
			Если ТипУчета>Упр Тогда
				ПеремещениеПоПартиям("Фин");//,Товар,Количество,Коэффициент);         
			КонецЕсли;
			//
		КонецЕсли;  
		
	КонецЦикла;
	
КонецПроцедуры
//PR End

//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения() Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ОбработкаПроведения()
//Закомментировано Инсталлятором МОД:Процедура ОбработкаПроведения()
        // сем \\
	Если семМожноПровести( Контекст ) = 0 Тогда Возврат; КонецЕсли;
	семОбновитьКурс( контекст );
        // сем //
	Если ДатаДок>ДатаПоставки Тогда
		НеПроводить(Контекст,"Дата поставки меньше даты документа!");
		Возврат;
	КонецЕсли;
	
	Если (ДатаДок>ТекущаяДата()) И (Пользователь.РазрПровБудущейДатой=0) Тогда
		НеПроводить(Контекст,"Нельзя проводить документ будущей датой!");
		Возврат;
	КонецЕсли;

	Если Склад.Выбран()=0 Тогда
		НеПроводить(Контекст,"Не указан склад куда производится перемещение!");
		Возврат;
	КонецЕсли;  
	
	Если глПроверкаСкладаПоПользователю(Контекст,Склад)=0 Тогда
		НеПроводить(Контекст,"Нельзя использовать данный склад!");
		Возврат;
	КонецЕсли;
	
	//Если ПроверкаДублейСтрок(Контекст)=1 Тогда 
	//	НеПроводить(Контекст,"В документе строки с одинаковым товаром!");
	//	Возврат;
	//КонецЕсли; 
	Если ГрупповаяОбработка() = 0 Тогда
		Путь = КаталогИБ() + "ExtForms\Sem\ПроверкаДолгаКлиента.ert";
		Если ФС.СуществуетФайл( Путь ) = 1 Тогда
			сп = СоздатьОбъект( "СписокЗначений" );
			сп.Установить( "Контекст", ВзятьКонтекст( Контекст ) );
			ОткрытьФормуМодально( "Обработка", сп, Путь );
			Если сп.Получить( "Результат" ) = 0 Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Если семПроверкаКлиента(Контекст) = 0 Тогда
				Сообщить("Документ не проведен!!!","!!!");
				СтатусВозврата(0); Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
	    Если ПустоеЗначение(Цена)=1 Тогда
	        Сообщить("Не указана цена в строке № "+НомерСтроки+"!
			|Документ не может быть проведен");
			СтатусВозврата(0);
			Возврат;
	    КонецЕсли;
	КонецЦикла;
	
	//взаиморасчеты 	
	
	Если ТипУчета=Фин Тогда
		Возврат;	    
	КонецЕсли;  
	                 
	Сигнал();
	
	//заказы
	//Регистр.ЗаказыПокупателей.Клиент=Клиент;
	//Регистр.ЗаказыПокупателей.СрокПоставки=ДатаПоставки;
	//Регистр.ЗаказыПокупателей.ПоЗаказу=ТекущийДокумент();
	
    //ВыбратьСтроки();
	//Пока ПолучитьСтроку()=1 Цикл
	//	Если Товар.ВидТовара=Перечисление. ВидыТоваров.Услуга Тогда
	//		Продолжить;
	//	КонецЕсли;
	//    Регистр.ЗаказыПокупателей.Товар=Товар;  
	//	Регистр.ЗаказыПокупателей.Выпускать=Производить*Коэффициент;
	//	Регистр.ЗаказыПокупателей.Закупать=Закупать*Коэффициент;
	//	Регистр.ЗаказыПокупателей.Резервировать=Резервировать*Коэффициент;  		
	//	Регистр.ЗаказыПокупателей.ДвижениеПриходВыполнить();		
	//КонецЦикла;
//			Если Товар.ЗапретРезерв=Перечисление.Булево.Да Тогда
//				Сообщить("У товара "+Товар.Код+"  "+Товар.Наименование+" запрет на резервирование по Эл.Заявке!");
//				Продолжить;
//			КонецЕсли;
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеМОД(Контекст)=1 Тогда
	    Возврат;
	КонецЕсли;
	стар_ОбработкаПроведения();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаУдаленияПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеПоАлгоритмуМОД=1 Тогда
	    Возврат;
	КонецЕсли;
	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД

