Перем ТабБлюда;
Перем РегОстаткиТоваров;  
Перем РегПарт;
Перем КалькКарт;
Перем НетКарты;
Перем ПромЗамена;                   
Перем Парт;
Перем НачальноеБлюдо, Найден;
Перем НСтрПром;     
Перем КолВлож;

Процедура ПеремещениеПоПартиямОбыч(ТУ)
	//партии и склады           
	
	Если (ТУ="Упр") Тогда
		Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета.Выбран()=0 Тогда
			Возврат ; // учет Упр. не ведется
		КонецЕсли;
		РегФирма=Фирма;
	ИначеЕсли (ТУ="Фин") Тогда
		Если Фирма.МетодРасчетаСебестоимостиФинансовогоУчета.Выбран()=0 Тогда
			Возврат ; // учет Фин. не ведется
		КонецЕсли;
		РегФирма=Фирма;
	Иначе
		Сообщить("Неверно задан тип учета партий товаров по "+ТекущийДокумент());
		Возврат ;
	КонецЕсли;                               
	
	// склпарт
	Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
		РегСклад=Склад;
	Иначе
		РегСклад="";
	КонецЕсли;
	
	//-- -- -- --	
	
	Если ТУ="Фин" Тогда
		ПромФирма=Фирма;
	Иначе
		ПромФирма=Фирма;
	КонецЕсли;	
	// склпарт
	Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
		ПромСклад=Склад;
	Иначе
		ПромСклад=СоздатьОбъект("Справочник.МестаХранения");
	КонецЕсли;		
	
	ОбщееКоличество=Количество*Коэффициент;
	НадоСписать=ОбщееКоличество;
	КоличествоПоРеализации=ОбщееКоличество;
	Себестоимость=0;
	
	РегПарт.УстановитьФильтр(ПромФирма,Товар,,,,ПромСклад);
	ОтатокТаможня = 0;

	РегПарт.ВыгрузитьИтоги(Парт,1,1); 
	Если ((ТУ="Фин") И (Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.FIFO)) Тогда
		Парт.Сортировать("+СрокРеализации,-Статус,+ПрихДокумент",1);
	ИначеЕсли ((ТУ="Фин") И (Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO)) Тогда 
		Парт.Сортировать("-СрокРеализации,-Статус,-ПрихДокумент",1);
	ИначеЕсли ((ТУ="Фин") И (Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему)) Тогда	
		Парт.Сортировать("-Статус,+ПрихДокумент",1);
	ИначеЕсли ((ТУ="Упр") И (Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.FIFO)) Тогда
		Парт.Сортировать("+СрокРеализации,-Статус,+ПрихДокумент",1);
	ИначеЕсли ((ТУ="Упр") И (Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO)) Тогда
		Парт.Сортировать("-СрокРеализации,-Статус,-ПрихДокумент",1);
	ИначеЕсли ((ТУ="Упр") И (Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему)) Тогда	
		Парт.Сортировать("-Статус,+ПрихДокумент",1);                            
	КонецЕсли;	
	Парт.ВыбратьСтроки();
	Пока Парт.ПолучитьСтроку()=1 Цикл
		ПривязыватьСтроку(НомерСтроки);
		Если НадоСписать=0 Тогда
			Прервать;
		КонецЕсли; 
		Контр=Парт.Контрагент;
		ПромДок=Парт.ПрихДокумент;
		R=Парт.Статус;
		СрокРеал=Парт.СрокРеализации;
		Партия=Парт.Партия;
		ОтатокПартииКол=Парт.ОстатокТовара;
		ОтатокПартииВал=Парт.Стоимость;
		ОтатокПартииНДС=Парт.НДС;
		ОстатокПродВал=Парт.ПродСтоимость;
		
		Если (ОтатокПартииКол<0)или(ОтатокПартииКол=0) Тогда  
			 Продолжить;
		КонецЕсли;  
		
		Если ОтатокПартииКол>=НадоСписать Тогда
			СписатьКол=НадоСписать;
		Иначе
			СписатьКол=ОтатокПартииКол;
		КонецЕсли;
		Если ОтатокПартииКол=0 Тогда
			СписатьВал=ОтатокПартииВал;       
			СписатьНДС=ОтатокПартииНДС;
			СписатьПродВал=ОстатокПродВал;
		Иначе
			СписатьВал=ОтатокПартииВал/ОтатокПартииКол*СписатьКол;
			СписатьНДС=ОтатокПартииНДС/ОтатокПартииКол*СписатьКол;
			СписатьПродВал=ОстатокПродВал/ОтатокПартииКол*СписатьКол;
		КонецЕсли; 
		
		Регистр.ПартииТоваров.ДвижениеРасход(ПромФирма,Товар,R,Контр,ПромДок,Склад,Партия,СрокРеал,СписатьКол,СписатьВал,СписатьПродВал,СписатьНДС,,,,"?",,3,);
		Регистр.ПартииТоваров.ДвижениеПриход(ПромФирма,Товар,R,Контр,ПромДок,СкладКонечный,Партия,СрокРеал,СписатьКол,СписатьВал,СписатьПродВал,СписатьНДС,,,,"%",,3,);
		
		СебестоимостьШ=СебестоимостьШ+СписатьВал;
		
		НадоСписать=НадоСписать-СписатьКол;
	КонецЦикла;
	//-------------------
 	Если НадоСписать>0 Тогда  
 		СписатьКол=НадоСписать;
 		Контр=СоздатьОбъект("Справочник.Контрагенты");
 		ПромДок=ТекущийДокумент();
 		СписатьВал=Товар.ЦенаПриобретения*КурсДляВалюты(Товар.ВалютаЗакупки,ДатаДок)*СписатьКол;       
		СписатьНДС=СписатьВал*(ПроцентНДС(Товар.СтавкаНДС)/(100+ПроцентНДС(Товар.СтавкаНДС)));;
		СписатьПродВал=Товар.РозничнаяЦена.Получить(ДатаДок)*СписатьКол;
 		Регистр.ПартииТоваров.ДвижениеРасход(ПромФирма,Товар,R,Контр,ПромДок,Склад,,,СписатьКол,СписатьВал-СписатьНДС,СписатьПродВал,СписатьНДС,,,,"?",,3,);
		Регистр.ПартииТоваров.ДвижениеПриход(ПромФирма,Товар,R,Контр,ПромДок,СкладКонечный,,,СписатьКол,СписатьВал-СписатьНДС,СписатьПродВал,СписатьНДС,,,,"%",,3,);	
		СебестоимостьШ=СебестоимостьШ+СписатьВал-СписатьНДС;
 	КонецЕсли; 	
	// ---------------
	
КонецПроцедуры	
                      
Процедура ПроверкаВыполненныхРабот()
	

	Если ГрупповаяОбработка()=0 Тогда
		спПроведениеДокВсе=СоздатьОбъект("СписокЗначений");
	
		таб = СоздатьОбъект("ТаблицаЗначений");
		ВыгрузитьТабличнуюЧасть(таб,"Операции");
		таб.Свернуть("Операции","");
		таб.ВыбратьСтроки();
		Пока таб.ПолучитьСтроку() = 1 Цикл
			Если ПустоеЗначение(таб.Операции)=0 Тогда
				спПроведениеДокВсе.ДобавитьЗначение(таб.Операции);		
			КонецЕсли;
		КонецЦикла;

		Если спПроведениеДокВсе.РазмерСписка()<>0 Тогда
			Сообщить("Перепроведение выполненных работ ...");
			ОбработкаОжидания("глПроведениеДокОтложенное",5);
		КонецЕсли;

		ДокПодч = СоздатьОбъект("Документ");
		ДокПодч.ВыбратьПодчиненныеДокументы(,,ТекущийДокумент());
		Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
			Если ДокПодч.Вид()="ВыполненныеОперации" Тогда
				Если спПроведениеДокВсе.НайтиЗначение(ДокПодч.ТекущийДокумент())=0 Тогда
					ОбъектУдалить(ДокПодч,0);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура семПечатьТаблицыЗначений( знач табл, пНазвание = "" )
	сп = СоздатьОбъект( "СписокЗначений" );
	сп.Установить( "Название", пНазвание );
	сп.Установить( "Таблица", табл );
	ОткрытьФормуМодально("Отчет",сп,КаталогИБ()+"ExtForms/ПечатьТаблицыЗначений.ert");
КонецПроцедуры
//-----------------------------------------------
Процедура ПроверкаВложенныхБлюд(Бл)
	КалькК=СоздатьОбъект("Документ.КалькуляционнаяКарта");
	СписокБлюд=СоздатьОбъект("СписокЗначений");
	КалькК=ПолучитьКалькуляцию(ДатаДок,Бл,ТекущийДокумент()); 
	Если КалькК=0 Тогда
		Найден=2;
		Возврат;
	КонецЕсли;
	КалькК.ВыбратьСтроки();
	Пока КалькК.ПолучитьСтроку()=1 Цикл
		Если КалькК.Ингредиент.ВидТовара=Перечисление.ВидыТоваров.Блюдо Тогда
			СписокБлюд.ДобавитьЗначение(КалькК.Ингредиент.ТекущийЭлемент(),);
		КонецЕсли;	
	КонецЦикла;			
	Найден=0;
	Если СписокБлюд.НайтиЗначение(НачальноеБлюдо)>0 Тогда
		Найден=1;
		Возврат;
	Иначе
		Для Н=1 По СписокБлюд.РазмерСписка() Цикл
			Если Найден=1 Тогда
				Возврат;
			Иначе
				ПроверкаВложенныхБлюд(СписокБлюд.ПолучитьЗначение(Н));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
//----------------------------------------------------------------------------
Процедура ПеремещениеПоПартиям(ТУ,ПромТовар,СписываемКол,Владелец,Режим,НомВлож)
	НадоСписать=Окр(СписываемКол,3,1); 
	Фирма.ИспользоватьДату(ДатаДок);
	//партии и склады           
	Если (ТУ="Упр") Тогда
		Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета.Выбран()=0 Тогда
			Возврат ; // учет Упр. не ведется
		КонецЕсли;
	ИначеЕсли (ТУ="Фин") Тогда
		Если Фирма.МетодРасчетаСебестоимостиФинансовогоУчета.Выбран()=0 Тогда
			Возврат ; // учет Фин. не ведется
		КонецЕсли;
	Иначе
		Сообщить("Неверно задан тип учета партий товаров по "+ТекущийДокумент());
		Возврат ;
	КонецЕсли;                               
	Если ТУ="Фин" Тогда
		ПромФирма=Фирма;
	Иначе
		ПромФирма=Фирма;
	КонецЕсли;	
	// склпарт
	Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
		ПромСклад=Склад;
	Иначе
		ПромСклад=СоздатьОбъект("Справочник.МестаХранения");
	КонецЕсли;		
	РегПарт.УстановитьФильтр(ПромФирма,ПромТовар,,,,ПромСклад);
	РегПарт.ВыгрузитьИтоги(Парт,1,1); 
	Если ((ТУ="Фин") И (Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.FIFO)) Тогда
		Парт.Сортировать("+СрокРеализации,-Статус,+ПрихДокумент",1);
	ИначеЕсли ((ТУ="Фин") И (Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO)) Тогда 
		Парт.Сортировать("-СрокРеализации,-Статус,-ПрихДокумент",1);
	ИначеЕсли ((ТУ="Фин") И (Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему)) Тогда	
		Парт.Сортировать("-Статус,+ПрихДокумент",1);
	ИначеЕсли ((ТУ="Упр") И (Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.FIFO)) Тогда
		Парт.Сортировать("+СрокРеализации,-Статус,+ПрихДокумент",1);
	ИначеЕсли ((ТУ="Упр") И (Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO)) Тогда
		Парт.Сортировать("-СрокРеализации,-Статус,-ПрихДокумент",1);
	ИначеЕсли ((ТУ="Упр") И (Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему)) Тогда	
		Парт.Сортировать("-Статус,+ПрихДокумент",1);                            
	КонецЕсли;	 
	ОбщиеКолвоДокумента = Окр(Количество*Коэффициент,3); 
	
	// сем \\
	//Если СокрЛП(ПромТовар.Код) = "0183075" Тогда
	//	семПечатьТаблицыЗначений( Парт, "Парт"+ПромТовар );
	//КонецЕсли;
	// сем //
	
	
	Парт.ВыбратьСтроки();
	Пока Парт.ПолучитьСтроку()=1 Цикл
		Если НадоСписать=0 Тогда
			Прервать;
		КонецЕсли; 
		Если (Парт.Статус=Отданный) Тогда    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//или (Парт.Статус=Принятый) Тогда
			Продолжить;
		КонецЕсли;
		
	 	//*****
		ТабБлюда.ВыбратьСтроки();
		Пока ТабБлюда.ПолучитьСтроку()=1 Цикл
			Если (ТабБлюда.Контр=Парт.Контрагент) и (ТабБлюда.ПрихДок=Парт.ПрихДокумент) и (ТабБлюда.СрокРеализации = Парт.СрокРеализации) и (ТабБлюда.Партия = Парт.Партия) и (ТабБлюда.Товар=ПромТовар) Тогда
			    Парт.Стоимость=Парт.Стоимость-ТабБлюда.СтоимБезНДС;       
				Парт.ПродСтоимость=(Парт.ПродСтоимость-ТабБлюда.ПродСтоимБезНДС); 
				Парт.НДС=Парт.НДС-ТабБлюда.НДС;
				Парт.ОстатокТовара=Парт.ОстатокТовара-ТабБлюда.Остаток;
			КонецЕсли;
		КонецЦикла;   
		Если Парт.ОстатокТовара <= 0 Тогда
		    Продолжить;
		КонецЕсли;
		//*****

		ТабБлюда.НоваяСтрока();      
		ТабБлюда.Источник = "1.ПеремещениеПоПартиям";
		ТабБлюда.НомВложения=НомВлож;
		ТабБлюда.Фирма=ПромФирма;
		ТабБлюда.Товар=ПромТовар;
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		ТабБлюда.Партия = Парт.Партия;
		ТабБлюда.СрокРеализации = Парт.СрокРеализации;             
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		ТабБлюда.ТипТовара=ПромТовар.ВидТовара; 
		ТабБлюда.БлюдоВладелец=Владелец; 
//		Если ПромТовар.ВидТовара=Перечисление.ВидыТоваров.Блюдо Тогда
//			ТабБлюда.Статус=Произведенный;
//		Иначе
			ТабБлюда.Статус=Парт.Статус;
//		КонецЕсли;
		
		ТабБлюда.Контр=Парт.Контрагент;
		ТабБлюда.ПрихДок=Парт.ПрихДокумент;      
		                                    
		Если Режим="ПеремещениеГотовогоБлюда" Тогда
			ТабБлюда.КодОпер="?";  
			ТабБлюда.ФлагУчета=34;
		ИначеЕсли Режим="ПродажаГотовогоБлюда" Тогда
			ТабБлюда.КодОпер=ПродажаБлюда;
			ТабБлюда.КодОпер=СписаниеНаПроизводcтвоБлюда;
			ТабБлюда.ФлагУчета=36;
		ИначеЕсли Режим="ПродажаИнгр" Тогда
			ТабБлюда.КодОпер=ПродажаТовара;
		Иначе   
			ТабБлюда.КодОпер=СписаниеНаПроизводcтвоБлюда;
			ТабБлюда.ФлагУчета=3;
		КонецЕсли;
		
		ОтатокПартииКол=Парт.ОстатокТовара; 
		ОтатокПартииВал=Парт.Стоимость;
		ОтатокПартииПродВал=Парт.ПродСтоимость;
		ОтатокПартииНДС=Парт.НДС;
		Если ОтатокПартииКол<0 Тогда  
			Продолжить;
		КонецЕсли;
		Если ОтатокПартииКол>=НадоСписать Тогда
			СписатьКол=НадоСписать;
		Иначе
			СписатьКол=ОтатокПартииКол;
		КонецЕсли;
		ТабБлюда.Остаток=СписатьКол;
		Если ОтатокПартииКол=0 Тогда
			ТабБлюда.СтоимБезНДС=ОтатокПартииВал;       
			ТабБлюда.ПродСтоимБезНДС=ОтатокПартииПродВал;       
			ТабБлюда.НДС=ОтатокПартииНДС;
		Иначе
			ТабБлюда.СтоимБезНДС=ОтатокПартииВал/ОтатокПартииКол*СписатьКол;
			ТабБлюда.ПродСтоимБезНДС=ОтатокПартииПродВал/ОтатокПартииКол*СписатьКол;
			ТабБлюда.НДС=ОтатокПартииНДС/ОтатокПартииКол*СписатьКол;
		КонецЕсли;        
		//************Завьялов А.*******
		// сем \\
		//Если (Режим="ПеремещениеГотовогоБлюда")и((ОбщиеКолвоДокумента - НадоСписать) <= 0) Тогда
		Если Режим="ПеремещениеГотовогоБлюда" Тогда
		// сем //
		//Изменено условия, т.к. при количестве большем чем имеется в наличии, нам вовсе ненадо ничего из того что есть
		//перемещать на другой склад. Все замечательно переместится и без этого.
			ТабБлюда.НоваяСтрока();
			ТабБлюда.Источник = "2.ПеремещениеПоПартиям";
			ТабБлюда.Фирма=ПромФирма;
			ТабБлюда.Товар=ПромТовар; 
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			ТабБлюда.Партия = Парт.Партия;
			ТабБлюда.СрокРеализации = Парт.СрокРеализации;             
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			ТабБлюда.ТипТовара=ПромТовар.ВидТовара; 
			ТабБлюда.БлюдоВладелец=Владелец; 
			Если ПромТовар.ВидТовара=Перечисление.ВидыТоваров.Блюдо Тогда
				ТабБлюда.Статус=Произведенный;
			Иначе
				ТабБлюда.Статус=Парт.Статус;
			КонецЕсли;
			ТабБлюда.Контр=Парт.Контрагент;
			ТабБлюда.ПрихДок=Парт.ПрихДокумент;
			ТабБлюда.КодОпер="%";
			ТабБлюда.Остаток=СписатьКол; 
			Если ОтатокПартииКол=0 Тогда
				ТабБлюда.СтоимБезНДС=ОтатокПартииВал;       
				ТабБлюда.ПродСтоимБезНДС=ОтатокПартииПродВал;       
				ТабБлюда.НДС=ОтатокПартииНДС;
			Иначе
				ТабБлюда.СтоимБезНДС=ОтатокПартииВал/ОтатокПартииКол*СписатьКол;
				ТабБлюда.ПродСтоимБезНДС=ОтатокПартииПродВал/ОтатокПартииКол*СписатьКол;
				ТабБлюда.НДС=ОтатокПартииНДС/ОтатокПартииКол*СписатьКол;
			КонецЕсли;
		ИначеЕсли Режим="ПродажаГотовогоБлюда" Тогда
		ИначеЕсли Режим="ПродажаИнгр" Тогда
		Иначе   
		КонецЕсли; 
		
		
		
		ОбщиеКолвоДокумента=ОбщиеКолвоДокумента-СписатьКол;
		НадоСписать=НадоСписать-СписатьКол;
	КонецЦикла;                         
	//-------------------
	Если (НадоСписать>0) Тогда
		ТабБлюда.НоваяСтрока(); 
		ТабБлюда.Источник = "3.ПеремещениеПоПартиям";
		ТабБлюда.Фирма=ПромФирма;
		ТабБлюда.Товар=ПромТовар;
		ТабБлюда.ТипТовара=ПромТовар.ВидТовара; 
		ТабБлюда.БлюдоВладелец=Владелец;
		ТабБлюда.Статус=Купленный; 
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		ТабБлюда.Партия = "";
		ТабБлюда.СрокРеализации = "";             
		Сообщить ("При проведении партий товара по "+ТекущийДокумент()+" от "+ДатаДок+" по товару "
                +ПромТовар.Код+" "+СокрЛП(ПромТовар)+" не распределилось по партиям "+НадоСписать+" "+ПромТовар.БазоваяЕдиницаИзмерения);
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		ТабБлюда.Контр=СоздатьОбъект("Справочник.Контрагенты");
		ТабБлюда.ПрихДок=ТекущийДокумент();
		ТабБлюда.КодОпер=?(Режим="СписатьИнгр",СписаниеНаПроизводcтвоБлюда,ПродажаТовара); //тут нужно смотреть, если продажа ингр, то статус продажа
		ТабБлюда.Остаток=НадоСписать;
		ПроцНДС=ПроцентНДС(Константа.ОсновнаяСтавкаНДС);
		ТабБлюда.СтоимБезНДС=ПромТовар.ЦенаПриобретения*КурсДляВалюты(ПромТовар.ВалютаЗакупки,ДатаДок)*НадоСписать;
		ТабБлюда.ПродСтоимБезНДС=ПромТовар.ЦенаПриобретения*КурсДляВалюты(ПромТовар.ВалютаЗакупки,ДатаДок)*НадоСписать;
		ТабБлюда.НДС=(ТабБлюда.СтоимБезНДС*ПроцНДС/100)*СписатьКол;
	КонецЕсли; 
КонецПроцедуры	
//----------------------------------------------------------------------------------
Функция ПогрешностьТехнологии(Тов)
	ПромКоэфПогр=(100-Тов.ПроцентПогрешности)/100;
	Возврат ПромКоэфПогр;
КонецФункции	
//-----------------------------------------------
Процедура СписатьИнгредиент(Товар,Количество,Единица,Коэффициент,БлюдоВладелец,КодОп,КолВлож)
	Если Количество<=0 Тогда
		Возврат;
	КонецЕсли;
	Если ТипУчета<Фин Тогда
		ПромОстаток=РегОстаткиТоваров.СводныйОстаток(Товар,Склад,,"ОстатокТовара");
	Иначе
		ПромОстаток=РегПарт.СводныйОстаток(Фирма,Товар,,,,Склад,,,"ОстатокТовара");   
	КонецЕсли;
	Если (ПромОстаток < Окр(Количество*Коэффициент,3))
	И (глРазрОтрицОстатки=Перечисление.Булево.Нет) Тогда
		Сообщить("На складе нет нужного количества товара: "+Товар.Код+" "+Товар.Наименование);
		НеПроводить(Контекст,"На складе осталось "+ПромОстаток+" "+Товар.БазоваяЕдиницаИзмерения);
		зю=1/0; //вызов исключительной ситуации
		Возврат;
	КонецЕсли;
	Регистр.ОстаткиТоваров.Фирма	= Фирма;
	Регистр.ОстаткиТоваров.Товар=Товар;
	Регистр.ОстаткиТоваров.Склад=Склад;
	Регистр.ОстаткиТоваров.ОстатокТовара=Количество*Коэффициент;
	Регистр.ОстаткиТоваров.ФлагУчета=2;        
	Регистр.ОстаткиТоваров.Блюдо=БлюдоВладелец;
	Если ТипУчета<Фин Тогда  
		Регистр.ОстаткиТоваров.ДвижениеРасходВыполнить();
		ПеремещениеПоПартиям("Упр",Товар,Количество*Коэффициент,БлюдоВладелец,КодОп,КолВлож);
	КонецЕсли;
	Если ТипУчета>Упр Тогда 
		ПеремещениеПоПартиям("Фин",Товар,Количество*Коэффициент,БлюдоВладелец,КодОп,КолВлож);
	КонецЕсли;
КонецПроцедуры
//-----------------------------------------------
Функция СписатьЗамену(Товар,Количество,Единица,Коэффициент,БлюдоВладелец,КолВлож)
	ЕстьЗамена=0;
	СтатусВозвр=1;
	Если ТипУчета<Фин Тогда
		ПромОстаток=РегОстаткиТоваров.СводныйОстаток(Товар,Склад,,"ОстатокТовара");
	Иначе
		ПромОстаток=РегПарт.СводныйОстаток(Фирма,Товар,,,,Склад,,,"ОстатокТовара");   
	КонецЕсли;
	Если ((ПромОстаток < Окр(Количество*Коэффициент,3)) и (глРазрОтрицОстатки=Перечисление.Булево.Нет))Тогда
		Если (окр(Количество*Коэффициент,3)-ПромОстаток)<=Окр(Количество*Коэффициент,3)*Товар.ПроцентПогрешности/100 Тогда  //погрешность в минус
			Осталось=ПромОстаток;
			СписатьИнгредиент(Товар,Осталось,Единица,1,БлюдоВладелец,"СписатьИнгр",КолВлож); 
			Возврат 1;
		Иначе	
			НеХватает=Окр(Количество*Коэффициент,3)-?(ПромОстаток>0,ПромОстаток,0);
			Осталось=ПромОстаток;
			СписатьИнгредиент(Товар,Осталось,Единица,1,БлюдоВладелец,"СписатьИнгр",КолВлож);
			Если ПромЗамена<>"" Тогда
				ДокумЗам=ПромЗамена;
				НехвЗамены=0;
				Если ДатаДок>='01.02.2010' Тогда
					НеХватает=Окр(НеХватает/Коэффициент,5);
				КонецЕсли;
				ДокумЗам.ВыбратьСтроки();
				Пока ДокумЗам.ПолучитьСтроку()=1 Цикл
					                  
					ТовЗамены= ДокумЗам.Замена;             
					//данная проверка действительна только с 01.07.07
					Если ПустоеЗначение(ДокумЗам.Единица)=0 Тогда
						Если (Единица.Единица<>ДокумЗам.Единица.Единица)  Тогда
							НехвЗамены=Окр(НеХватает/Коэффициент,5);
							Сообщить("В документе "+ДокумЗам+" у замены ингредиента "+ДокумЗам.Замена.Код+" "+ДокумЗам.Замена+" отличается единица замены <"+ДокумЗам.Единица+"> от калькуляции <"+Единица+"> !");	
							СтатусВозврата(0);
							Прервать;      
						Иначе
							Если ДатаДок<'01.02.2010' Тогда
								НеХватает=Окр(НеХватает/Коэффициент,5);
							КонецЕсли;
						КонецЕсли;      
					Иначе
						Если ДатаДок<'01.02.2010' Тогда
							НеХватает=Окр(НеХватает/Коэффициент,5);
						КонецЕсли;
					КонецЕсли;                                   
					
					ЕстьЗамена=1; 
					Если ТипУчета<Фин Тогда
						ПромОстаток=РегОстаткиТоваров.СводныйОстаток(ДокумЗам.Замена,Склад,,"ОстатокТовара");
					Иначе
						ПромОстаток=РегПарт.СводныйОстаток(Фирма,ДокумЗам.Замена,,,,Склад,,,"ОстатокТовара");   
					КонецЕсли;
					
					Если (ПромОстаток < НЕХватает*ДокумЗам.КоэффициентЗамены*ДокумЗам.Коэффициент) Тогда
						ОстЗамены=?(ПромОстаток>0,ПромОстаток,0);
						НехвЗамены=НеХватает*ДокумЗам.КоэффициентЗамены*ДокумЗам.Коэффициент-ОстЗамены;
						СписатьИнгредиент(ДокумЗам.Замена,ОстЗамены,,1,БлюдоВладелец,"СписатьИнгр",КолВлож);
						ТовЗамены= ДокумЗам.Замена;
					Иначе
						СписатьИнгредиент(ДокумЗам.Замена,НеХватает*ДокумЗам.КоэффициентЗамены*ДокумЗам.Коэффициент,,1,БлюдоВладелец,"СписатьИнгр",КолВлож);
						НехвЗамены=0;
						Прервать;
					КонецЕсли; 
					
					Попытка
						НеХватает=(НехвЗамены/(ДокумЗам.КоэффициентЗамены*ДокумЗам.Коэффициент));
					Исключение
						НеХватает=НехвЗамены;
					КонецПопытки;
				КонецЦикла;
				Если НехвЗамены>0 Тогда
					Сообщить("Не хватает "+ТовЗамены.Код+" "+ТовЗамены+" "+НехвЗамены+" "+ТовЗамены.БазоваяЕдиницаИзмерения+" !"+" Блюдо: "+БлюдоВладелец.Код+" "+БлюдоВладелец.Наименование);
					Если глРазрОтрицОстатки=Перечисление.Булево.Нет Тогда
						СтатусВозврата(0);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;  
		КонецЕсли;
		Если ЕстьЗамена=0 Тогда  
			Сообщить("Не хватает "+Товар.Код+" "+Товар+" "+Нехватает+" "+Товар.БазоваяЕдиницаИзмерения+" !"+" Блюдо: "+БлюдоВладелец.Код+" "+БлюдоВладелец.Наименование);
			Если глРазрОтрицОстатки=Перечисление.Булево.Нет Тогда
				СтатусВозврата(0);
			КонецЕсли;
		КонецЕсли;
	Иначе 	// погрешность 
		Если (ПромОстаток-Окр(Количество*Коэффициент,3))>0 Тогда
			Если (ПромОстаток-Окр(Количество*Коэффициент,3))<=Товар.ПроцентПогрешности/100 Тогда
				Осталось=ПромОстаток;
				СписатьИнгредиент(Товар,Осталось,Единица,1,БлюдоВладелец,"СписатьИнгр",КолВлож);  
			Иначе
				СписатьИнгредиент(Товар,Количество,Единица,Коэффициент,БлюдоВладелец,"СписатьИнгр",КолВлож);
			КонецЕсли;
		Иначе
			СписатьИнгредиент(Товар,Количество,Единица,Коэффициент,БлюдоВладелец,"СписатьИнгр",КолВлож);
		КонецЕсли;
	КонецЕсли;           
	Возврат СтатусВозвр;
КонецФункции
//-----------------------------------------------
Функция СписатьБлюдо(ПромТовар,ПромКоличество,ПромЕдиница,ПромКоэффициент,БлюдоВладелец,НомВлож=1)
	ПромНомВлож=НомВлож;
	КолВлож=КолВлож+1;
	ПромКолВлож=КолВлож;

	ЕстьКалькуляция=0;
	ДокумКальк=ПолучитьКалькуляцию(ДатаДок,ПромТовар,ТекущийДокумент());
	Если ДокумКальк<>0 Тогда
		ЕстьКалькуляция=1;
	КонецЕсли;
	НетКарты=0;
	Если ЕстьКалькуляция=0 Тогда
		НетКарты=1;
		НеПроводитьДокумент();
		Сообщить( "Не обнаружена Калькуляционная карта на "+ПромТовар.Наименование+" !!!");
		Возврат 0;
	КонецЕсли;
	КалькКарт=ДокумКальк;
	Коэф=ПромКоличество*ПромКоэффициент/ДокумКальк.КоличествоКалькуляции;
	ДокумКальк.ВыбратьСтроки();
	Пока ДокумКальк.ПолучитьСтроку()=1 Цикл 
		Если ДокумКальк.Ингредиент.ВидТовара=Перечисление.ВидыТоваров.Компонент  Тогда
			Продолжить;
		КонецЕсли;
		Если ДокумКальк.Замена.Выбран()=1 Тогда
			ПромЗамена=ДокумКальк.Замена;
		Иначе
			ПромЗамена="";
		КонецЕсли;	
		Если (ДокумКальк.Ингредиент.ВидТовара=Перечисление.ВидыТоваров.Ингредиент) ИЛИ (ДокумКальк.Ингредиент.ВидТовара=Перечисление.ВидыТоваров.Товар) Тогда
			Если СписатьЗамену(ДокумКальк.Ингредиент,ДокумКальк.Количество*Коэф,ДокумКальк.Единица,ДокумКальк.Коэффициент,ПромТовар,ПромКолВлож)=0 Тогда
				Возврат 0;
			КонецЕсли;		
		ИначеЕсли ДокумКальк.Ингредиент.ВидТовара=Перечисление.ВидыТоваров.Блюдо Тогда 
			КоличествоВложенногоБлюда=ДокумКальк.Количество*Коэф;
			Если ТипУчета<Фин Тогда
				//РегОстаткиТоваров.Товар=ДокумКальк.Ингредиент;
				//РегОстаткиТоваров.ОстаткиПолучить(); 
				//ЕстьОстатокБлюда=РегОстаткиТоваров.ОстатокТовара;
				ЕстьОстатокБлюда=РегОстаткиТоваров.СводныйОстаток(ДокумКальк.Ингредиент,Склад,,"ОстатокТовара")
			Иначе
				ЕстьОстатокБлюда=РегПарт.СводныйОстаток(Фирма,ДокумКальк.Ингредиент,,,,Склад,,,"ОстатокТовара");   
			КонецЕсли;
			Если ЕстьОстатокБлюда < КоличествоВложенногоБлюда Тогда //Нет нужного количества готовых блюд 
				Если ЕстьОстатокБлюда<>0 Тогда
					Регистр.ОстаткиТоваров.Фирма	= Фирма;
					Регистр.ОстаткиТоваров.Товар=ДокумКальк.Ингредиент;
					Регистр.ОстаткиТоваров.Склад=Склад;                     
					Регистр.ОстаткиТоваров.Блюдо=БлюдоВладелец;
					Регистр.ОстаткиТоваров.ОстатокТовара=ЕстьОстатокБлюда; 
					Регистр.ОстаткиТоваров.ФлагУчета=2;
					Если ТипУчета<Фин Тогда 
						ПеремещениеПоПартиям("Упр",ДокумКальк.Ингредиент,ЕстьОстатокБлюда,ПромТовар,"СписатьИнгр",ПромКолВлож);
						Регистр.ОстаткиТоваров.ДвижениеРасходВыполнить();
					КонецЕсли;
					Если ТипУчета>Упр Тогда 
						ПеремещениеПоПартиям("Фин",ДокумКальк.Ингредиент,ЕстьОстатокБлюда,ПромТовар,"СписатьИнгр",ПромКолВлож);
					КонецЕсли;  
				КонецЕсли;
				Если ЕстьОстатокБлюда<0 Тогда
					ЕстьОстатокБлюда=0;	
				КонецЕсли;
				НедостающееКоличествоБлюд=КоличествоВложенногоБлюда-ЕстьОстатокБлюда;
				Если НедостающееКоличествоБлюд=0 Тогда
					Продолжить;
				КонецЕсли;
				СписатьБлюдо(ДокумКальк.Ингредиент,НедостающееКоличествоБлюд,ПромЕдиница,ПромКоэффициент,ПромТовар,ПромКолВлож); //блюда нет на складе,по этому списываем ингредиенты
				//себестоимость из части готовых и части произведенных блюд
				Если НетКарты=1 Тогда
					Продолжить;
				КонецЕсли;
			Иначе      //на складе есть нужное количество готового блюда
				Регистр.ОстаткиТоваров.Фирма	= Фирма;
				Регистр.ОстаткиТоваров.Товар=ДокумКальк.Ингредиент;
				Регистр.ОстаткиТоваров.Склад=Склад;
				Регистр.ОстаткиТоваров.ОстатокТовара=КоличествоВложенногоБлюда;
				Регистр.ОстаткиТоваров.ФлагУчета=2;
				Регистр.ОстаткиТоваров.Блюдо=БлюдоВладелец;
				Если ТипУчета<Фин Тогда 
					ПеремещениеПоПартиям("Упр",ДокумКальк.Ингредиент,КоличествоВложенногоБлюда,ПромТовар,"ПродажаГотовогоБлюда",ПромКолВлож);
					Регистр.ОстаткиТоваров.ДвижениеРасходВыполнить();
				КонецЕсли;
				Если ТипУчета>Упр Тогда
					ПеремещениеПоПартиям("Фин",ДокумКальк.Ингредиент,КоличествоВложенногоБлюда,ПромТовар,"ПродажаГотовогоБлюда",ПромКолВлож);
					//себестоимость полностью берем из регистра 
				КонецЕсли;  
				НедостающееКоличествоБлюд=0;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла; 
	// сем \\
	//Если НомерСтроки = 8 Тогда
	//	семПечатьТаблицыЗначений( ТабБлюда, "ТабБлюда - 0" );
	//КонецЕсли;
	// сем //
	ТабДляСебестоимости=СоздатьОбъект("ТаблицаЗначений");  
	//ТабБлюда.ВыбратьСтроки();
	//Пока ТабБлюда.ПолучитьСтроку() = 1 Цикл
	//	Если ТабБлюда.КодОпер="?" Тогда
	//		ТабБлюда.СтоимБезНДС=0;
	//		ТабБлюда.НДС=0;
	//	КонецЕсли;
	//КонецЦикла;
	ТабБлюда.Выгрузить(ТабДляСебестоимости); 
	
	ТабДляСебестоимости.НоваяКолонка("СтоимостьУпр");
	ТабДляСебестоимости.НоваяКолонка("ПродСтоимостьУпр");
	ТабДляСебестоимости.НоваяКолонка("НДСУпр");                                                       //smip
	ТабДляСебестоимости.ВыбратьСтроки();
	Пока ТабДляСебестоимости.ПолучитьСтроку()=1 Цикл                                                  
		КурсВалютыУчета=КурсДляВалюты(ТабДляСебестоимости.Товар.ВалютаУчета,ДатаДок);
		ТабДляСебестоимости.СтоимостьУпр=ТабДляСебестоимости.СтоимБезНДС*КурсВалютыУчета; 
		ТабДляСебестоимости.ПродСтоимостьУпр=ТабДляСебестоимости.ПродСтоимБезНДС*КурсВалютыУчета; 
		ТабДляСебестоимости.НДСУпр=ТабДляСебестоимости.НДС*КурсВалютыУчета;  
	КонецЦикла;                                                                                        

	ТабДляСебестоимости.Свернуть("НомВложения,БлюдоВладелец,Фирма,КодОпер","СтоимБезНДС,ПродСтоимБезНДС,НДС,СтоимостьУпр,ПродСтоимостьУпр,НДСУпр");  //smip
	ТабДляСебестоимости.НоваяКолонка("Уд");
	ТабДляСебестоимости.ВыбратьСтроки();
	Пока ТабДляСебестоимости.ПолучитьСтроку()=1 Цикл 
		Если (ТабДляСебестоимости.БлюдоВладелец=ПромТовар) И (ТабДляСебестоимости.НомВложения=ПромКолВлож) Тогда
			ТабДляСебестоимости.Уд=0;
		Иначе
			ТабДляСебестоимости.Уд=1;
		КонецЕсли;
	КонецЦикла;
	НС="";
	П=1;
	Пока П=1 Цикл
		Если ТабДляСебестоимости.НайтиЗначение(1,НС,"Уд")=1 Тогда
			ТабДляСебестоимости.УдалитьСтроку(НС); 
			НС="";
		Иначе
			П=0
		КонецЕсли;
	КонецЦикла;  
	Если (ТабДляСебестоимости.КоличествоСтрок()>0) И (ТипУчета<Фин) Тогда
		ТабДляСебестоимости.ПолучитьСтрокуПоНомеру(1); 
		//ПО РЕГИСТРУ ОСТАТКОВ БЛЮДО ТОЖЕ НАДО ОПРИХОДОВАТЬ И СПИСАТЬ, КАК В ПАРТИЯХ
		Регистр.ОстаткиТоваров.Фирма	= Фирма;
		Регистр.ОстаткиТоваров.Товар=ТабДляСебестоимости.БлюдоВладелец;
		Регистр.ОстаткиТоваров.Склад=Склад;
		Регистр.ОстаткиТоваров.ОстатокТовара=ПромКоличество*ПромКоэффициент;     
		Регистр.ОстаткиТоваров.ФлагУчета=2;
		Регистр.ОстаткиТоваров.Блюдо="";
		Регистр.ОстаткиТоваров.ДвижениеПриходВыполнить();
		
		Регистр.ОстаткиТоваров.Товар=ТабДляСебестоимости.БлюдоВладелец;
		Регистр.ОстаткиТоваров.Склад=Склад;
		Регистр.ОстаткиТоваров.ОстатокТовара=ПромКоличество*ПромКоэффициент;     
		Регистр.ОстаткиТоваров.ФлагУчета=2;
		Регистр.ОстаткиТоваров.Блюдо=?(ТабДляСебестоимости.БлюдоВладелец=БлюдоВладелец,"",БлюдоВладелец);
		Регистр.ОстаткиТоваров.ДвижениеРасходВыполнить();
		
		Если ТабДляСебестоимости.БлюдоВладелец=Товар Тогда
			Регистр.ОстаткиТоваров.Товар=ТабДляСебестоимости.БлюдоВладелец;
			Регистр.ОстаткиТоваров.Склад=СкладКонечный;
			Регистр.ОстаткиТоваров.ОстатокТовара=ПромКоличество*ПромКоэффициент;     
			Регистр.ОстаткиТоваров.ФлагУчета=2;
			Регистр.ОстаткиТоваров.Блюдо="";
			Регистр.ОстаткиТоваров.ДвижениеПриходВыполнить();
		КонецЕсли;
	КонецЕсли;
	ТабДляСебестоимости.ВыбратьСтроки();
	Пока ТабДляСебестоимости.ПолучитьСтроку()=1 Цикл  
		Если ТабДляСебестоимости.КодОпер=СписаниеНаПроизводcтвоБлюда Тогда
			ФирмаТаб=ТабДляСебестоимости.Фирма;
			БлюдоВладелецТаб=ТабДляСебестоимости.БлюдоВладелец;  
			СтоимБезНДСТаб=ТабДляСебестоимости.СтоимБезНДС;
			ПродСтоимБезНДСТаб=ТабДляСебестоимости.ПродСтоимБезНДС;
			НДСТаб=ТабДляСебестоимости.НДС; 
			Если ФирмаТаб.Выбран()=0 Тогда                                                       //smip
				КурсВалютыУчетаБлюда=КурсДляВалюты(БлюдоВладелецТаб.ВалютаУчета,ДатаДок);
				СтоимБезНДСТаб=ТабДляСебестоимости.СтоимостьУпр/КурсВалютыУчетаБлюда;
				ПродСтоимБезНДСТаб=ТабДляСебестоимости.ПродСтоимостьУпр/КурсВалютыУчетаБлюда;
				НДСТаб=ТабДляСебестоимости.НДСУпр/КурсВалютыУчетаБлюда; 
			КонецЕсли;                                                                           //smip
			ТабБлюда.НоваяСтрока();  
			ТабБлюда.НомВложения=ПромНомВлож;
			ТабБлюда.Фирма=ФирмаТаб;
			ТабБлюда.Товар=БлюдоВладелецТаб;
			ТабБлюда.ТипТовара=БлюдоВладелецТаб.ВидТовара;
			ТабБлюда.БлюдоВладелец=БлюдоВладелец;
			ТабБлюда.Статус=Произведенный;
			ТабБлюда.Партия = глЗаполнитьПартию(Контекст,Партия);
			ТабБлюда.СрокРеализации = СрокРеализ;             
			ТабБлюда.Контр="";
			ТабБлюда.ПрихДок=ТекущийДокумент();
			ТабБлюда.Остаток=ПромКоличество;
			ТабБлюда.СтоимБезНДС=СтоимБезНДСТаб;
			ТабБлюда.ПродСтоимБезНДС=ПродСтоимБезНДСТаб;
			ТабБлюда.НДС=НДСТаб;
			ТабБлюда.КодОпер=ПроизводствоБлюда;    
			ТабБлюда.ФлагУчета=35;

			ТабБлюда.НоваяСтрока();
			ТабБлюда.НомВложения=ПромНомВлож;
			ТабБлюда.Фирма=ФирмаТаб;
			ТабБлюда.Товар=БлюдоВладелецТаб;
			ТабБлюда.ТипТовара=БлюдоВладелецТаб.ВидТовара;
			ТабБлюда.БлюдоВладелец=БлюдоВладелец;
			ТабБлюда.Статус=Произведенный;
			ТабБлюда.Партия = глЗаполнитьПартию(Контекст,Партия);
			ТабБлюда.СрокРеализации = СрокРеализ;             
			ТабБлюда.Контр="";
			ТабБлюда.ПрихДок=ТекущийДокумент();
			ТабБлюда.Остаток=ПромКоличество;
			ТабБлюда.СтоимБезНДС=СтоимБезНДСТаб;
			ТабБлюда.ПродСтоимБезНДС=ПродСтоимБезНДСТаб;
			ТабБлюда.НДС=НДСТаб;
			ТабБлюда.КодОпер=?(ТабДляСебестоимости.БлюдоВладелец=Товар,"?",СписаниеНаПроизводcтвоБлюда); 
			ТабБлюда.ФлагУчета=34;
			
			Если ТабДляСебестоимости.БлюдоВладелец=Товар Тогда
				ТабБлюда.НоваяСтрока();
				ТабБлюда.Фирма=ФирмаТаб;
				ТабБлюда.Товар=БлюдоВладелецТаб;
				ТабБлюда.ТипТовара=БлюдоВладелецТаб.ВидТовара;
				ТабБлюда.БлюдоВладелец=БлюдоВладелец;
				ТабБлюда.Статус=Произведенный;
				ТабБлюда.Контр="";  
				ТабБлюда.Партия = глЗаполнитьПартию(Контекст,Партия);
				ТабБлюда.СрокРеализации = СрокРеализ;             
				ТабБлюда.ПрихДок=ТекущийДокумент();
				ТабБлюда.Остаток=ПромКоличество;
				ТабБлюда.СтоимБезНДС=СтоимБезНДСТаб;
				ТабБлюда.ПродСтоимБезНДС=ПродСтоимБезНДСТаб;
				ТабБлюда.НДС=НДСТаб;
				ТабБлюда.КодОпер=ГотоваяПродукцияНаСклад;
				ТабБлюда.СкладКонечный=СкладКонечный;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	// сем \\
	//Если НомерСтроки = 8 Тогда
	//	семПечатьТаблицыЗначений( ТабБлюда, "ТабБлюда - 1" );
	//КонецЕсли;
	// сем //
	Возврат 1;
КонецФункции//Функция СписатьБлюдо(ПромТовар,ПромКоличество,ПромЕдиница,ПромКоэффициент,БлюдоВладелец,НомВлож=1) 

//----------------------------------------------- Временно
Процедура ИзмЕдинЛок()
	Пром=Единица;
	Пром.ИспользоватьДату(ДатаДок);
	Коэффициент=Единица.Коэффициент;
	Спр=СоздатьОбъект("Справочник.Единицы");
	Спр.ИспользоватьДату(ДатаДок);
	Спр.ИспользоватьВладельца(Товар);
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент()>0 Цикл
		Если Спр.Единица=Товар.БазоваяЕдиницаИзмерения Тогда
			Единица=Спр.ТекущийЭлемент();
			Коэффициент=Спр.Коэффициент;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	глСоздатьНовыйОбъект(Спр);
	Спр.Единица=Товар.БазоваяЕдиницаИзмерения;
	Спр.Коэффициент=1;
	Спр.Наименование=Строка(Товар.БазоваяЕдиницаИзмерения);
	//Закомментировано Инсталлятором МОД:Спр.Записать();
	//Начало текста, вставленного Инсталлятором МОД
	ОбъектЗаписать(Спр, );
	//Конец текста, вставленного Инсталлятором МОД

	Единица=Спр.ТекущийЭлемент();
	Коэффициент=1;
КонецПроцедуры

//-----------------------------------------------
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения() Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ОбработкаПроведения()
//Закомментировано Инсталлятором МОД:Процедура ОбработкаПроведения()  
	Если семМожноПровести( Контекст ) = 0 Тогда Возврат; КонецЕсли;
	Если Склад.Выбран()=0 Тогда
		Предупреждение("Не выбран склад!");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли; 
	
	Если СкладКонечный.Выбран()=0 Тогда
		Предупреждение("Не выбран склад получения!");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли; 
	                  
	Если глПроверкаСкладаПоПользователю(Контекст,Склад)=0 Тогда
		НеПроводить(Контекст,"Нельзя использовать данный склад!");
		Возврат;
	КонецЕсли;
	
	Если КоличествоСтрок()=0 Тогда 
		Предупреждение("Не введены блюда!");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;  
	
	Если (ГрупповаяОбработка() = 0) И (ДатаДок>='01.09.14' ) Тогда
		Если семПроверкаПретензии(Контекст) = 0 Тогда
			Сообщить("Ошибка проведения документа.","!");
			СтатусВозврата(0); Возврат;
		КонецЕсли;
	КонецЕсли;      
	
	ПроверкаВыполненныхРабот();
	
	// надо записать партии
	СпрПартии 	   = СоздатьОбъект("Справочник.Партии");
	СпрОперации 	  = СоздатьОбъект( "Справочник.КоэффициентыВыхода" );
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Если (Партия.Выбран() = 0) и (Товар.Выбран() = 1) Тогда
			СпрПартии.ИспользоватьВладельца(Товар);
			//Сообщить("Для товара "+Товар.Код+" "+Товар+" записана новая партия!");
			глСоздатьНовыйОбъект(СпрПартии); 
			СпрПартии.ДатаПроизв 	 = ДатаПроизв;
			СпрПартии.СрокРеализации = СрокРеализ;
			Попытка
			//Закомментировано Инсталлятором МОД:СпрПартии.Записать();
			//Начало текста, вставленного Инсталлятором МОД
				СпрПартии.Записать();
			//Конец текста, вставленного Инсталлятором МОД
                Партия=СпрПартии.ТекущийЭлемент();
			Исключение  
				НеПроводить(Контекст,"Строка документа: " + НомерСтроки + " Ошибка: " + ОписаниеОшибки());
				Прервать;
			КонецПопытки;
		КонецЕсли;
		
		СпрОперации.ИспользоватьВладельца(Товар);
		ЕстьОперация = 0;
		СпрОперации.ВыбратьЭлементы();
		Пока СпрОперации.ПолучитьЭлемент() = 1 Цикл
			Если СпрОперации.ПометкаУдаления()=1 Тогда
				Продолжить;
			Иначе
				ЕстьОперация=1;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если (ГрупповаяОбработка()=0) и (ПустоеЗначение(Операции)=1) И (СкладКонечный.КонтрольВыполненныхОпераций=1) Тогда
			НеПроводить(Контекст,"В строке документа: " + НомерСтроки + " не заполена операция!");
		КонецЕсли;
		
	КонецЦикла; 
	
	ТабБлюда=СоздатьОбъект("ТаблицаЗначений");
	ТабБлюда.НоваяКолонка("Фирма");
	ТабБлюда.НоваяКолонка("Товар");
	ТабБлюда.НоваяКолонка("ТипТовара");
	ТабБлюда.НоваяКолонка("БлюдоВладелец");
	ТабБлюда.НоваяКолонка("Статус");
	ТабБлюда.НоваяКолонка("Контр");
	ТабБлюда.НоваяКолонка("ПрихДок");
	ТабБлюда.НоваяКолонка("Остаток","Число");
	ТабБлюда.НоваяКолонка("СтоимБезНДС","Число");
	ТабБлюда.НоваяКолонка("ПродСтоимБезНДС","Число");
	ТабБлюда.НоваяКолонка("НДС","Число");
	ТабБлюда.НоваяКолонка("КодОпер");
	ТабБлюда.НоваяКолонка("ФлагУчета");
	
	ТабБлюда.НоваяКолонка("СкладКонечный");
	ТабБлюда.НоваяКолонка("Партия");  
	ТабБлюда.НоваяКолонка("СрокРеализации");
	ТабБлюда.НоваяКолонка("НомВложения");

	ТабБлюда.НоваяКолонка("Источник");
	
	// сем \\
	ЕстьЗаявка = 0;
	Если ДокументОснование.Выбран() = 1 Тогда
		Если ДокументОснование.Вид() = "Счет" Тогда
			Если ДокументОснование.Проведен()=1 Тогда
				ЕстьЗаявка = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// сем //
	
	Парт=СоздатьОбъект("ТаблицаЗначений");
	ВремРегистры=СоздатьОбъект("Регистры");
	РегПарт=ВремРегистры.ПартииТоваров;
	РегОстаткиТоваров=ВремРегистры.ОстаткиТоваров;
	// сем \\
	регРезервы = ВремРегистры.РезервыТоваров; 
	регСпецЗаказы = ВремРегистры.СпецЗаказы;
	РегКомпл 	= ВремРегистры.КомплектацияЗаявок;
	
	// сем //
	Если ИтогиАктуальны()=0  Тогда
		РегОстаткиТоваров.ВременныйРасчет();
		РегПарт.ВременныйРасчет();

		РегОстаткиТоваров.УстановитьЗначениеФильтра("Склад",Склад,1);
		Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
			РегПарт.УстановитьЗначениеФильтра("Склад",Склад,1);
		КонецЕсли;
		
		// сем \\
		регРезервы.УстановитьЗначениеФильтра( "ПоСчету", ДокументОснование, 1 );
		регРезервы.ВременныйРасчет();
		регСпецЗаказы.УстановитьЗначениеФильтра( "ПоСчету", ДокументОснование, 1 );
		регРезервы.ВременныйРасчет();
		
		РегКомпл.УстановитьЗначениеФильтра( "ПоСчету", ДокументОснование, 1 );
		РегКомпл.ВременныйРасчет();
		
		// сем //
		
		Если Константа.РежимПроверки = 1 Тогда
			спТоваров = семПолучтьСписокИспТоваров( ТекущийДокумент() );
			РегОстаткиТоваров.УстановитьЗначениеФильтра("Товар",спТоваров,2);
			РегПарт.УстановитьЗначениеФильтра("Товар",спТоваров,2);
		КонецЕсли;

		ВремРегистры.Актуальность(1);
		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
	КонецЕсли;
	// склпарт
	Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
		ПромСклад=Склад;
	Иначе
		ПромСклад="";
	КонецЕсли;
	РегОстаткиТоваров.Склад=ПромСклад;
	
	СебестоимостьШ=0;  
	КолВлож=0;
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл   
		
		Состояние("Движения документа: "+НомерСтроки+"/"+КоличествоСтрок());
		Регистр.ПартииТоваров.ПривязыватьСтроку(НомерСтроки);
		Регистр.ОстаткиТоваров.ПривязыватьСтроку(НомерСтроки);
		
		Если Товар.ВидТовара<>Перечисление.ВидыТоваров.Блюдо Тогда
			//делаем обычное перемещение товара между складами
			
			Если Склад=СкладКонечный Тогда
				Продолжить;
			КонецЕсли;

			Если НЕ(глРазрОтрицОстатки=Да) Тогда
				ОстатокТовара=РегОстаткиТоваров.СводныйОстаток(Товар,Склад,,"ОстатокТовара");
				Если ОстатокТовара<Количество*Коэффициент Тогда
					Сообщить("На складе нет нужного количества товара "+Товар.Код+ " "+ Товар.Наименование + ".");
					НеПроводить(Контекст," На складе осталось "+ОстатокТовара
					+" "+Товар.БазоваяЕдиницаИзмерения+"." );
				КонецЕсли;
			КонецЕсли;
			// Для расхода             
			
			Регистр.ОстаткиТоваров.Фирма	= Фирма;
			Регистр.ОстаткиТоваров.ОстатокТовара=Количество*Коэффициент;
			Регистр.ОстаткиТоваров.Склад=Склад;
			Регистр.ОстаткиТоваров.Товар=Товар;
			Регистр.ОстаткиТоваров.ФлагУчета=1; 
			Если ТипУчета<Фин Тогда
				Регистр.ОстаткиТоваров.ДвижениеРасходВыполнить();
			КонецЕсли;
			// Для прихода   
			Регистр.ОстаткиТоваров.Склад=СкладКонечный; 
			Регистр.ОстаткиТоваров.ОстатокТовара=Количество*Коэффициент;
			Регистр.ОстаткиТоваров.Товар=Товар;
			Регистр.ОстаткиТоваров.ФлагУчета=1; 
			Если ТипУчета<Фин Тогда
				Регистр.ОстаткиТоваров.ДвижениеПриходВыполнить(); 
			КонецЕсли;
			//         
			// склпарт
			Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда  
				Если ТипУчета<Фин Тогда
					ПеремещениеПоПартиямОбыч("Упр");//,Товар,Количество,Коэффициент);
				КонецЕсли;
				//-------------------------------------
				Если ТипУчета>Упр Тогда
					ПеремещениеПоПартиямОбыч("Фин");//,Товар,Количество,Коэффициент);         
				КонецЕсли;
				//
			КонецЕсли;  


		Иначе //блюдо
			
			НачальноеБлюдо=Товар;
			ПроверкаВложенныхБлюд(НачальноеБлюдо);
			Если Найден=1 Тогда
				Предупреждение("Неправильно реализована схема ""блюдо в блюде"" для блюда "+Товар.Наименование,5);
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;
			Если Найден=2 Тогда
				Предупреждение("Нет калькуляционной карты для блюда "+Товар.Наименование+" или одного из блюд, вложенных в него",5);
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;
			Если ТипУчета<Фин Тогда
				//РегОстаткиТоваров.Товар=Товар;
				//РегОстаткиТоваров.ОстаткиПолучить(); 
				//ЕстьОстатокБлюда=РегОстаткиТоваров.ОстатокТовара;
				ЕстьОстатокБлюда=РегОстаткиТоваров.СводныйОстаток(Товар,ПромСклад,,"ОстатокТовара")
			Иначе
				ЕстьОстатокБлюда=РегПарт.СводныйОстаток(Фирма,Товар,,,,ПромСклад,,,"ОстатокТовара");   
			КонецЕсли;
			Если Склад=СкладКонечный Тогда //если перемещаем на тот же склад, откуда списываем,
				//то тогда просто производим указанное количество
				СписатьБлюдо(Товар,Окр(Количество*Коэффициент,3),Единица,1,Товар,1);
			ИначеЕсли ЕстьОстатокБлюда < Окр(Количество*Коэффициент,3) Тогда //Нет нужного количества готовых блюд 
				Если ЕстьОстатокБлюда>0 Тогда 
					Регистр.ОстаткиТоваров.Фирма	= Фирма;
					Регистр.ОстаткиТоваров.Товар=Товар;
					Регистр.ОстаткиТоваров.Склад=Склад;                     
					Регистр.ОстаткиТоваров.Блюдо="";
					Регистр.ОстаткиТоваров.ОстатокТовара=ЕстьОстатокБлюда; 
					Регистр.ОстаткиТоваров.ФлагУчета=2;
					Если ТипУчета<Фин Тогда
						Регистр.ОстаткиТоваров.ДвижениеРасходВыполнить();  
					КонецЕсли;
					Регистр.ОстаткиТоваров.Товар=Товар;
					Регистр.ОстаткиТоваров.Склад=СкладКонечный;                     
					Регистр.ОстаткиТоваров.Блюдо="";
					Регистр.ОстаткиТоваров.ОстатокТовара=ЕстьОстатокБлюда; 
					Регистр.ОстаткиТоваров.ФлагУчета=2;
					Если ТипУчета<Фин Тогда
						Регистр.ОстаткиТоваров.ДвижениеПриходВыполнить();
						ПеремещениеПоПартиям("Упр",Товар,ЕстьОстатокБлюда,Товар,"ПеремещениеГотовогоБлюда",1);
					КонецЕсли;
					Если ТипУчета>Упр Тогда 
						ПеремещениеПоПартиям("Фин",Товар,ЕстьОстатокБлюда,Товар,"ПеремещениеГотовогоБлюда",1);
					КонецЕсли;  
				КонецЕсли;
				Если ЕстьОстатокБлюда<0 Тогда
						ЕстьОстатокБлюда=0;	
				КонецЕсли;
				НедостающееКоличествоБлюд=Окр(Количество*Коэффициент,3)-ЕстьОстатокБлюда; 
				Если НедостающееКоличествоБлюд=0 Тогда
					Продолжить;
				КонецЕсли; 
				
				Попытка
					СтатусВзв=СписатьБлюдо(Товар,НедостающееКоличествоБлюд,Единица,1,Товар,1); //блюда нет на складе,поэтому списываем ингредиенты     
					//себестоимость из части готовых и части произведенных блюд
				Исключение      
					СтатусВозврата(0);
					Сообщить(ОписаниеОшибки());
					Возврат;
				КонецПопытки; 
				Если СтатусВзв=0 Тогда
					СтатусВозврата(0);
					Возврат;
				КонецЕсли;	
				Если НетКарты=1 Тогда
					Продолжить;
				КонецЕсли;
			Иначе      //на складе есть нужное количество готового блюда
				Регистр.ОстаткиТоваров.Фирма	= Фирма;
				Регистр.ОстаткиТоваров.Товар=Товар;
				Регистр.ОстаткиТоваров.Склад=Склад;
				Регистр.ОстаткиТоваров.ОстатокТовара=Количество*Коэффициент;     
				Регистр.ОстаткиТоваров.ФлагУчета=2;
				Регистр.ОстаткиТоваров.Блюдо="";
				Если ТипУчета<Фин Тогда
					Регистр.ОстаткиТоваров.ДвижениеРасходВыполнить();  
				КонецЕсли;
				
				Регистр.ОстаткиТоваров.Фирма	= Фирма;
				Регистр.ОстаткиТоваров.Товар=Товар;
				Регистр.ОстаткиТоваров.Склад=СкладКонечный;
				Регистр.ОстаткиТоваров.ОстатокТовара=Количество*Коэффициент;     
				Регистр.ОстаткиТоваров.ФлагУчета=2;
				Регистр.ОстаткиТоваров.Блюдо="";
				Если ТипУчета<Фин Тогда
					Регистр.ОстаткиТоваров.ДвижениеПриходВыполнить();
					ПеремещениеПоПартиям("Упр",Товар,Количество*Коэффициент,Товар,"ПеремещениеГотовогоБлюда",1);
				КонецЕсли;
				Если ТипУчета>Упр Тогда
					ПеремещениеПоПартиям("Фин",Товар,Количество*Коэффициент,Товар,"ПеремещениеГотовогоБлюда",1);  
					//себестоимость полностью берем из регистра
				КонецЕсли;  
				НедостающееКоличествоБлюд=0; 
				
				////***Завьялов А.****12.01.05****Начало**** 
				//В ситуации отсутствия партии товара, когда остаток на по остаткам совпадает с количеством перемещения
				//переносим остатки по перемещению с одного склада в другой
				//вообщем данная ситуация является ошибочной,т.к. отсутствия парти вообще быть недолжно
				//и всетаки на момент написания данной заплатки партии гуляли.
				Если ТабБлюда.КоличествоСтрок() = 0 Тогда
					ТабБлюда.НоваяСтрока();
					ТабБлюда.Источник = "1.стар_ОбработкаПроведения";
					ТабБлюда.Товар=Товар;
					ТабБлюда.ТипТовара=Товар.ВидТовара;
					ТабБлюда.БлюдоВладелец=Товар;
					ТабБлюда.Статус=Произведенный;
					ТабБлюда.Контр="";  
					////~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					ТабБлюда.Партия = глЗаполнитьПартию(Контекст,Партия);
					ТабБлюда.СрокРеализации = СрокРеализ;             
					////~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					ТабБлюда.ПрихДок=ТекущийДокумент();
					ТабБлюда.Остаток=Окр(Количество*Коэффициент,3); 
					ТабБлюда.КодОпер=ГотоваяПродукцияНаСклад;
					ТабБлюда.СкладКонечный=СкладКонечный;    
					ТабБлюда.НоваяСтрока();
					ТабБлюда.Источник = "2.стар_ОбработкаПроведения";
					ТабБлюда.Товар=Товар;
					ТабБлюда.ТипТовара=Товар.ВидТовара;
					ТабБлюда.БлюдоВладелец=Товар;
					ТабБлюда.Статус=Произведенный;
					ТабБлюда.Контр="";  
					////~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					ТабБлюда.Партия = глЗаполнитьПартию(Контекст,Партия);
					ТабБлюда.СрокРеализации = СрокРеализ;             
					////~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					ТабБлюда.ПрихДок=ТекущийДокумент();
					ТабБлюда.Остаток=Окр(Количество*Коэффициент,3); 
					ТабБлюда.КодОпер=ПродажаБлюда;
					ТабБлюда.СкладКонечный=СкладКонечный;				
				КонецЕсли; 
				////***Завьялов А.****12.01.05****Завершение****
				
			КонецЕсли;
			//------------------------------------------------------------------------------------------------------------------  
			// сем \\
			//Если НомерСтроки = 8 Тогда
			//	семПечатьТаблицыЗначений( ТабБлюда, "ТабБлюда" );
			//КонецЕсли;
			// сем //
			ТабБлюда.ВыбратьСтроки();  
			Пока ТабБлюда.ПолучитьСтроку()>0 Цикл //Здесь нужно прописать все движения по списанию блюда 
				Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
					СкладВРегистр=Склад;
					СкладКонечныйВРегистр=СкладКонечный;
					СкладКонечныйВРегистрТабл=ТабБлюда.СкладКонечный;
				Иначе
					СкладВРегистр="";  
					СкладКонечныйВРегистр="";
					СкладКонечныйВРегистрТабл="";
				КонецЕсли;
				
				КоэффВнутрСеб = ТабБлюда.Товар.Поставщик.КоэффВнутрСебестоимости.Получить(ДатаДок);
				Если КоэффВнутрСеб = 0 Тогда
					КоэффВнутрСеб = 1;
				КонецЕсли;
				
				// по регистру "Остатки товаров"
				КОп=ТабБлюда.КодОпер;
				Если (КОп=ПродажаТовара) или (КОп=СписаниеНаПроизводcтвоБлюда) или (КОп="?") ИЛИ (КОп=ПродажаБлюда) Тогда
	
					ПродСтоимБезНДС	= ТабБлюда.ПродСтоимБезНДС;
					//Если КОп="?" Тогда
					//	ПродСтоимБезНДС = ТабБлюда.ПродСтоимБезНДС * КоэффВнутрСеб;
					//КонецЕсли;						
	
					Регистр.ПартииТоваров.ДвижениеРасход(ТабБлюда.Фирма,ТабБлюда.Товар,ТабБлюда.Статус,ТабБлюда.Контр,ТабБлюда.ПрихДок,СкладВРегистр,ТабБлюда.Партия,ТабБлюда.СрокРеализации,ТабБлюда.Остаток,ТабБлюда.СтоимБезНДС,ПродСтоимБезНДС,ТабБлюда.НДС,,,,ТабБлюда.КодОпер,,ТабБлюда.ФлагУчета,?(КОп=СписаниеНаПроизводcтвоБлюда,ТабБлюда.БлюдоВладелец,""));
				ИначеЕсли КОп=ПроизводствоБлюда Тогда	
	
					ПродСтоимБезНДС	= ТабБлюда.ПродСтоимБезНДС;	
//					Если ТабБлюда.Товар=НачальноеБлюдо	Тогда
//						ПродСтоимБезНДС = ТабБлюда.ПродСтоимБезНДС * КоэффВнутрСеб;
////						ТабБлюда.ПродСтоимБезНДС = ПродСтоимБезНДС;
//					КонецЕсли;
					Регистр.ПартииТоваров.ДвижениеПриход(ТабБлюда.Фирма,ТабБлюда.Товар,ТабБлюда.Статус,ТабБлюда.Контр,ТабБлюда.ПрихДок,СкладВРегистр,ТабБлюда.Партия,ТабБлюда.СрокРеализации,ТабБлюда.Остаток,ТабБлюда.СтоимБезНДС,ПродСтоимБезНДС,ТабБлюда.НДС,,,,ТабБлюда.КодОпер,,?(ТабБлюда.Товар<>НачальноеБлюдо,35,3),);
				ИначеЕсли КОп=ГотоваяПродукцияНаСклад Тогда	
					ПродСтоимБезНДС = ТабБлюда.СтоимБезНДС * КоэффВнутрСеб; //при приходовании блюда на склад мы просто увеличиваем внутреннюю себестоимость на коэффициент дабы избежать увеличения через блюдо в блюде
					Регистр.ПартииТоваров.ДвижениеПриход(ТабБлюда.Фирма,ТабБлюда.Товар,ТабБлюда.Статус,ТабБлюда.Контр,ТабБлюда.ПрихДок,СкладКонечныйВРегистрТабл,ТабБлюда.Партия,ТабБлюда.СрокРеализации,ТабБлюда.Остаток,ТабБлюда.СтоимБезНДС,ПродСтоимБезНДС,ТабБлюда.НДС,,,,ТабБлюда.КодОпер,,34,);
					СебестоимостьШ=СебестоимостьШ+ТабБлюда.СтоимБезНДС;
				ИначеЕсли КОп=ПриходОтПеремещения Тогда	
//					ПродСтоимБезНДС = ТабБлюда.ПродСтоимБезНДС * КоэффВнутрСеб;
//					ТабБлюда.ПродСтоимБезНДС = ПродСтоимБезНДС;
					Регистр.ПартииТоваров.ДвижениеПриход(ТабБлюда.Фирма,ТабБлюда.Товар,ТабБлюда.Статус,ТабБлюда.Контр,ТабБлюда.ПрихДок,СкладКонечныйВРегистр,ТабБлюда.Партия,ТабБлюда.СрокРеализации,ТабБлюда.Остаток,ТабБлюда.СтоимБезНДС,ТабБлюда.ПродСтоимБезНДС,ТабБлюда.НДС,,,,ТабБлюда.КодОпер,,34,);
					СебестоимостьШ=СебестоимостьШ+ТабБлюда.СтоимБезНДС;
				КонецЕсли;
			КонецЦикла; 
			ТабБлюда.УдалитьСтроки();
			
		КонецЕсли; //блюдо

		//------------------------------------------------------------------------------------------------------------------	
	КонецЦикла; //Перебор строк ПСГП
	// движения по рег. Заказы покупателей
	Если ТипУчета<Фин Тогда
		//ДвиженияПоЗаказам(Контекст,"Выпускать");		
	КонецЕсли;  
	                                  
	
//	Если глЗаполнитьРеквизитыДокументаШ(Контекст)=0 Тогда
//	    Сообщить("Внимание: Не удалось заполнить реквизиты Ш. Обязательно обратитесь к админстратору!!!","!");
//	КонецЕсли;
	
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// продажа товара, принятого на реализацию
	ТекстЗапроса = "SELECT $ПартииТоваров.Фирма [Фирма $Справочник.Фирмы]
	|					, $ПартииТоваров.Контрагент [Контрагент $Справочник.Контрагенты]
	|					, $ПартииТоваров.Товар [Товар $Справочник.Номенклатура]
	|					, $ПартииТоваров.ПрихДокумент [ПрихДокумент $Документ]
	|					, ЖурПрих.IDDOCDEF [ПрихДокумент_вид $ВидДокумента]
	|					, SUM((1-2*ПартииТоваров.DEBKRED)* $ПартииТоваров.ОстатокТовара) ОстатокТовара
	|					, SUM((1-2*ПартииТоваров.DEBKRED)* $ПартииТоваров.Стоимость) Стоимость
	|					, SUM((1-2*ПартииТоваров.DEBKRED)* $ПартииТоваров.НДС) НДС
	|				FROM $Регистр.ПартииТоваров AS ПартииТоваров With (NOLOCK)
	|				INNER JOIN _1sjourn ЖурПрих (NOLOCK) ON ЖурПрих.IDDOC = RIGHT($ПартииТоваров.ПрихДокумент,9)
	|				WHERE (ПартииТоваров.IDDOC = :ТекДок)
	|					AND ($ПартииТоваров.Статус = :Статус)
	|			    GROUP BY $ПартииТоваров.Фирма
	|					, $ПартииТоваров.Контрагент
	|					, $ПартииТоваров.Товар
	|					, $ПартииТоваров.ПрихДокумент 
	|					, ЖурПрих.IDDOCDEF
	|				HAVING SUM((1-2*ПартииТоваров.DEBKRED)* $ПартииТоваров.ОстатокТовара)>0
	
	|";
	
	Запрос=СоздатьОбъект("ODBCRecordSet");
	Запрос.УстановитьТекстовыйПараметр("ТекДок",ТекущийДокумент());
	Запрос.УстановитьТекстовыйПараметр("Статус",Принятый);
	РегПартДляРеализации=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);

	РегПартДляРеализации.ВыбратьСтроки();	
	//РегПартДляРеализации = СоздатьОбъект("Регистр.ПартииТоваров");
	//РегПартДляРеализации.ВыбратьДвиженияДокумента(ТекущийДокумент());
	//Пока РегПартДляРеализации.ПолучитьДвижение() = 1 Цикл
	//    Если не(РегПартДляРеализации.Статус = Принятый) Тогда
	//        Продолжить;
	//	КонецЕсли;
	Пока  РегПартДляРеализации.ПолучитьСтроку()=1 Цикл
		
		Если ПогашениеДолгаПоКредиту(Контекст,РегПартДляРеализации.ПрихДокумент,РегПартДляРеализации.Стоимость+РегПартДляРеализации.НДС,РегПартДляРеализации.Товар.СтавкаНДС,"Упр",Строка(РегПартДляРеализации.Товар.ВидТовара)) = 1 Тогда
			Возврат;
		КонецЕсли;           
		
//		Регистр.ПродажаВзятогоНаРеализацию.ПривязыватьСтроку(РегПартДляРеализации.НомерСтроки());
		ДокПриходнаяРеализатора = РегПартДляРеализации.ПрихДокумент;
		Регистр.ПродажаВзятогоНаРеализацию.Фирма  = РегПартДляРеализации.Фирма;
		Регистр.ПродажаВзятогоНаРеализацию.Клиент = ДокПриходнаяРеализатора.Клиент;
		Регистр.ПродажаВзятогоНаРеализацию.Товар  = РегПартДляРеализации.Товар;
		Регистр.ПродажаВзятогоНаРеализацию.ОстатокТовара = РегПартДляРеализации.ОстатокТовара;
		Регистр.ПродажаВзятогоНаРеализацию.ПродСтоимость = РегПартДляРеализации.Стоимость;
		Регистр.ПродажаВзятогоНаРеализацию.ДвижениеПриходВыполнить();
	КонецЦикла;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	// сем \\
	Если ЕстьЗаявка = 1 Тогда
		глПогашениеПоРезервам(Контекст,ДокументОснование,регРезервы,регСпецЗаказы,РегКомпл);
	КонецЕсли;
	// сем //

	Если МожноПроводить(Контекст)=1 Тогда
		УстановитьГП(ТекущийДокумент());
	КонецЕсли;
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеМОД(Контекст)=1 Тогда
	    Возврат;
	КонецЕсли;
	стар_ОбработкаПроведения();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД

//------------------------
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаУдаленияПроведения() Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ОбработкаУдаленияПроведения()
//Закомментировано Инсталлятором МОД:Процедура ОбработкаУдаленияПроведения()
	Если СравнитьГП(ТекущийДокумент())<0 Тогда
		УстановитьГП(ТекущийДокумент());
	КонецЕсли;
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаУдаленияПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеПоАлгоритмуМОД=1 Тогда
	    Возврат;
	КонецЕсли;
	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
	ПриОтменеПроведенияДокумента(ТекущийДокумент());
	стар_ОбработкаУдаленияПроведения();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД

//-----------------------------------------------
