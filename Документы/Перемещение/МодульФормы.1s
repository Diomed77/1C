Перем Валюта_Прежн;
Перем Курс_Прежн;
Перем Режим;

Процедура семЗаполнитьПоСпискуЗаявок(сп)
	Если сп.РазмерСписка() = 0 Тогда 
		Сообщить( "Нет данных для заполнения." ); Возврат;
	Иначе
		промЗаявка = сп.ПолучитьЗначение( 1 );
	КонецЕсли;
	
	Автор = Пользователь;
	Фирма = Константа.ОсновнаяФирма;
	IDD = ПолучитьУникальныйIDD();
	ТипУчета = промЗаявка.ТипУчета;
	ФинУчет = ?( ТипУчета > Упр, 1, 0 );
	
	ДатаДок = РабочаяДата();
	ДатаПоставки = ДатаДок;
	
	Склад=промЗаявка.Склад;
	СкладПолучатель=промЗаявка.СкладПолучатель;
	
	пОснование=ПеревестиНаГосЯзык("Счет")+" Nr. ";
	
	регРезервы = СоздатьОбъект( "Регистр.РезервыТоваров" );
	Если ПолучитьДатуТА()>ДатаДок Тогда
		регРезервы.ВременныйРасчет();
		РассчитатьРегистрыНа( ДатаДок+1 );
	КонецЕсли;
	Для н = 1 по сп.РазмерСписка() Цикл
		промЗаявка = сп.ПолучитьЗначение( н );
		пОснование = пОснование + СокрЛП(промЗаявка.НомерДок)+", ";
		промЗаявка.ВыбратьСтроки();
		Пока промЗаявка.ПолучитьСтроку()=1 Цикл
			Если промЗаявка.Товар.ВидТовара = Перечисление.ВидыТоваров.Услуга Тогда // услуги
				НоваяСтрока();
				Счет = промЗаявка;
				Товар = промЗаявка.Товар; 
				ТовКод = Товар.Код;
				Количество=промЗаявка.Количество;
				Единица=промЗаявка.Единица;
				Продолжить;
			КонецЕсли;                                                                 
			
			РезервПоСчету = регРезервы.Остаток( промЗаявка.Товар, промЗаявка, "РезервТовара" );
			Если РезервПоСчету > 0 Тогда
				НоваяСтрока();
				Счет = промЗаявка;
				Товар=промЗаявка.Товар; 
				ТовКод   = Товар.Код;
				Единица=промЗаявка.Единица;
				Коэффициент=промЗаявка.Коэффициент;
				Количество=РезервПоСчету/Коэффициент;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	пОснование = Лев(пОснование,СтрДлина(пОснование)-2);
	Основание = пОснование;
	
	
КонецПроцедуры


Процедура кнНомерДок()
	Если семПрисвоитьНовыйНомер( контекст ) = 1 Тогда
		Записать();
	КонецЕсли;
КонецПроцедуры

Процедура Доступ()
	          
	Если (Склад.ВидСклада=Перечисление.ВидыСкладов.Розничный)  Тогда
		Форма.КодДляРозницы.Видимость(1);
	Иначе
		Форма.КодДляРозницы.Видимость(0);
	КонецЕсли;
	
	Форма.кЭлЗаявка.Видимость(1);
	//Если ПустоеЗначение(ДокументОснование)=0 Тогда
	//	Если ДокументОснование.Вид()="Счет" Тогда
	//		Форма.кЭлЗаявка.Видимость(1);
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры


Процедура ВидимостьЦены()
	Если СкладПолучатель.ТипСклада=Перечисление.ТипыСкладов.Бар Тогда
		Форма.Цена.Видимость(1);
		Форма.Сумма.Видимость(1);
	Иначе
		Форма.Цена.Видимость(0);
		Форма.Сумма.Видимость(0);
	КонецЕсли;	
КонецПроцедуры	


Процедура УстЦены()
	Если   СкладПолучатель.ТипСклада=Перечисление.ТипыСкладов.Бар Тогда
		ПромЦена=Товар.РозничнаяЦена.Получить(ДатаДок);
		Если Товар.ВалютаПродажи<>Рубли Тогда
			Цена=Пересчет(ПромЦена,Товар.ВалютаПродажи,ДатаДок,Рубли,ДатаДок);
		Иначе
			Цена=ПромЦена;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Процедура ВычСум()
	Сумма=Количество*Коэффициент*Цена;
КонецПроцедуры	           


Процедура ПриСменеСклада()
	ВыбратьСтроки(); 
	Пока ПолучитьСтроку()=1 Цикл
		Если СкладПолучатель.ТипСклада=Перечисление.ТипыСкладов.Бар Тогда
			УстЦены();
			ВычСум();	 
		Иначе
			Цена=0;
			Сумма=0;	 
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	
//----------------------

Процедура ПодобратьПоНакладнымНал()
		               
	
КонецПроцедуры	

//----------------------
Процедура ПриВводеСтроки()
	ПриВводеСтрокиДокумента(Контекст);
КонецПроцедуры
//------------------------
Процедура ПриОткрытии()
	ПроверкаРазрешенияРедактирования(Контекст);
	Если Форма.ТолькоПросмотр()=1 Тогда
		Форма.КнФирма.Доступность(0);
		Форма.КнСклад.Доступность(0);
		Форма.КнСкладПолучатель.Доступность(0);
		//Форма.ПодборПоКаталогу.Доступность(0);
		Форма.ОК.Доступность(0);
		Форма.КнопкаПоУмолчанию("Закрыть");
	Иначе
		Форма.КнопкаПоУмолчанию("ОК");
	КонецЕсли;
	УстановкаРеквизитаТип(Контекст);
	Тип.ДобавитьЗначение("Упр.");
	Тип.ДобавитьЗначение("Общ.");
	Тип.ДобавитьЗначение("Фин.");
	Тип.ТекущаяСтрока(ТипУчета+1);     
	ВидимостьЦены();         
	Доступ();
	семЗаголовокОкна(контекст);
КонецПроцедуры
//-----------------------------------------------
Процедура ИзменЕдин()
	Пром=Единица;
	Пром.ИспользоватьДату(ДатаДок);
	Коэффициент=Единица.Коэффициент;
КонецПроцедуры
//-----------------------------------------------
Процедура УстСкладаПолучателя()
	Скл=СоздатьОбъект("Справочник.МестаХранения");
	Скл.ИспользоватьДату(ДатаДок);
	Если Скл.Выбрать("Выберите Склад получатель","")>0 Тогда
		СкладПолучатель=Скл.ТекущийЭлемент();
	КонецЕсли;              
	ВидимостьЦены();
КонецПроцедуры

//-----------------------------------------------
Процедура УстанКоличества()
	Если Товар.Выбран()>0 Тогда
		// цену товара при перемещении не определяем,
		// т.к.при проводке накладной будет перемещена стоимость товара
		Если Количество=0 Тогда
			Количество=1;
		КонецЕсли;
		УстановкаЕдиницыИзмерения(Контекст);
	КонецЕсли;
КонецПроцедуры

//-----------------------------------------------
Процедура Подбор()
	Режим="Каталог";
	ОткрытьПодбор("Номенклатура","ДляПодбора");
	УстановитьЗначениеВПодборе("Склад",Склад);
КонецПроцедуры
//-----------------------------------------------
Процедура ОбработкаПодбора(Выб)
	ЗапросКоличестваВПодборе(Контекст,Режим,Выб);
	УстанКоличества();          
	УстЦены();
	ВычСум();
	АктивизироватьСтроку();
КонецПроцедуры
//-----------------------------------------------
//Процедура Печать()
//	Фирма.ИспользоватьДату(ДатаДок);
//	Таб=СоздатьОбъект("Таблица");               
//	Если   СкладПолучатель.ТипСклада=Перечисление.ТипыСкладов.Бар Тогда     
//		Таб.ВывестиСекцию("Шапка");	
//	Иначе	
//		Таб.ВывестиСекцию("Шапка|Кол");
//	КонецЕсли;	  
//	ВыбратьСтроки();
//	Ном=0;
//	Пока ПолучитьСтроку() = 1 Цикл
//		Ном=Ном+1;               
//		Если   СкладПолучатель.ТипСклада=Перечисление.ТипыСкладов.Бар Тогда
//			Таб.ВывестиСекцию("Строка");
//		Иначе	
//			Таб.ВывестиСекцию("Строка|Кол");
//		КонецЕсли;	
//	КонецЦикла;              
//	Если   СкладПолучатель.ТипСклада=Перечисление.ТипыСкладов.Бар Тогда
//		СтрокаСуммы=Формат(Итог("Сумма"),"ЧПДС");;
//		Таб.ВывестиСекцию("Подвал");                                                                      
//	Иначе           
//		СтрокаСуммы="";
//		Таб.ВывестиСекцию("Подвал|Кол");      
//	КонецЕсли;
//	Таб.Опции(0,0,0,0,ПарСтрДок);
//	Таб.Защита(Константа.ФлагЗащитыТаблиц);
//	Таб.ТолькоПросмотр(1);
//	Таб.Показать("Печать накладной","");
//КонецПроцедуры

Процедура семПечать(печсроки=0)
	
	//спПарам = СоздатьОбъект( "СписокЗначений" );
	//спПарам.Установить( "Документ", контекст );
	//спПарам.Установить( "ПечСроки", печсроки );

	Путь = КаталогИБ() + "ExtForms\Печать\УправлениеПечатью.ert";
	Если ФС.СуществуетФайл( Путь ) = 0 Тогда Возврат; КонецЕсли;
	ОткрытьФорму( "Отчет", ТекущийДокумент(), Путь );
КонецПроцедуры


//сергей
Процедура Печать()
	// Форма со сроками реализации
	// Эта форма печати используется для отделов с товарами имеющими малый срок хранения (1-2 недели)
	// Документ печатается и остаётся в отделе для предъявления проверяющим органам
	//Если Проведен()=0 Тогда
	//	Сообщить("Проведите документ!!!");
	//	Возврат;
	//КонецЕсли;	 
	
	сп = СоздатьОбъект( "СписокЗначений" );
	сп.ДобавитьЗначение( "Печать" );
	сп.ДобавитьЗначение( "Печать (сроки реал.)" );
	
	поз = 0; Если сп.ВыбратьЗначение(,,поз,,1) = 0 Тогда Возврат; КонецЕсли;
	Если (поз = 1) Тогда 
		семПечать(?(поз=2,"Сроки","")); 
		Возврат; 
	КонецЕсли;
	
	//семПечать(); Возврат;
	Kar = 1;
	
	Фирма.ИспользоватьДату(ДатаДок);
	Таб=СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Таблица3");
	
	If Kar=0 Then
	    Таб.ИсходнаяТаблица("Таблица2");
	EndIf;
	Таб.ВывестиСекцию("Шапка");
	// получим закуп.цены и суммы
	// по Регистру ОстаткиТоваров
	Ном=0;
	ОбщСумма=0;
	ИтогПродСумма=0;
	СуммаПеч=0;
	ИтогНдсПеч=0;    
	
	ТЗ=СоздатьОбъект("ТаблицаЗначений");
	ТЗ.НоваяКолонка("Товар","Справочник.Номенклатура");
	ТЗ.НоваяКолонка("НомерСтроки","Число",5,0);
	ТЗ.НоваяКолонка("Количество","Число",17,3);
	ТЗ.НоваяКолонка("Стоимость","Число",17,5);
	ТЗ.НоваяКолонка("СрокРеализ","Дата");
	ТЗ.НоваяКолонка("Приход","Документ");
	
	Если Выбран() = 1 Тогда 
		Рег=СоздатьОбъект("Регистр.ПартииТоваров");
		Рег.ВыбратьДвиженияДокумента(ТекущийДокумент());
		Пока Рег.ПолучитьДвижение()>0 Цикл
			
			Если Рег.Склад<>Склад Тогда
			    Продолжить;
			КонецЕсли;
			
			ТЗ.НоваяСтрока();
			ТЗ.Товар		=Рег.Товар;
			ТЗ.Количество	=?(Рег.Приход=1,-Рег.ОстатокТовара,Рег.ОстатокТовара);
			ТЗ.Стоимость	=?(Рег.Приход=1,-Рег.Стоимость,Рег.Стоимость);
			ТЗ.СрокРеализ	=Рег.СрокРеализации;
			ТЗ.Приход		=Рег.ПрихДокумент;	
		КонецЦикла;
	КонецЕсли;		    
	ТЗ.Свернуть("Товар,СрокРеализ,Приход","Коэффициент,Количество,Стоимость");
	Если Проведен()=0 Тогда // никаких партий не будет
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
			ТЗ.НоваяСтрока();
			ТЗ.Товар = Товар;
			ТЗ.Количество = Количество;
			ТЗ.Стоимость = 0;
			ТЗ.СрокРеализ = "";
			ТЗ.Приход = "";
		КонецЦикла;
	КонецЕсли;

	спр = СоздатьОбъект( "Справочник.СкладскиеАдреса" );	
	
	тзДок=СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(тзДок);
	ТЗ.ВыбратьСтроки();
	Пока ТЗ.ПолучитьСтроку() = 1 Цикл
		// Вычислим, сколько всего данного товара

		рез=спр.ВыбратьЭлементыПоРеквизиту("Товар",ТЗ.Товар,0,0);
		Ячейка="";
		ПечАдрес="";
		Если рез=1 Тогда
			Пока Спр.ПолучитьЭлемент() = 1 Цикл
				пЯчейка = спр.ТекущийЭлемент();
				Если пЯчейка.Родитель.Родитель.Родитель.Склад=СкладПолучатель Тогда
					Ячейка = пЯчейка;
					Если СкладПолучатель.ТипСклада=Перечисление.ТипыСкладов.СкладРаспродажи Тогда
						ПечАдресГруппа = "IZPARDO№ANA "+АдресСтрокой( Ячейка, 1, 1, "" ) + Шаблон( " ([Ячейка.Родитель.Родитель.Родитель.МестоХранения.УсловияХранения])" );
					Иначе
						ПечАдресГруппа = АдресСтрокой( Ячейка, 1, 1, "" ) + Шаблон( " ([Ячейка.Родитель.Родитель.Родитель.МестоХранения.УсловияХранения])" );
					КонецЕсли;
					ПечАдрес = АдресСтрокой( Ячейка, 1, 4, "-" );
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		If Kar=1 Then
		
			ТекОст=0;
			ТекСто=0;
			
			ТекОст=ТЗ.Количество;
			ТекСто=ТЗ.Стоимость;
			пСрокРеализации = ТЗ.СрокРеализ;
			
			Если ТекОст<>0 Тогда
				ЗакЦена=ТекСто/ТекОст;
			Иначе
				ЗакЦена=0;
			КонецЕсли;
			ЗакСумма=ТЗ.Стоимость;
			ОбщСумма=ОбщСумма+ЗакСумма;
		EndIf;    
		
		Если ПустоеЗначение(ТЗ.Приход)=0 Тогда
			пПартияТовара=СокрЛП(ТЗ.Приход.НомерДок)+" ("+ТЗ.Приход.ДатаДок+")";
		Иначе
			пПартияТовара="";
		КонецЕсли;
		рез=0;
		тзДок.НайтиЗначение(ТЗ.Товар,рез,"Товар");
		тзДок.ПолучитьСтрокуПоНомеру(рез);
		ПродЦена=ЦенаТовараПоКатегорииДляТовара(ТЗ.Товар.ТекущийЭлемент(),Константа.РозничнаяКатегорияЦены);
		
		Если ПродЦена=0 Тогда
			Сообщить("Для товара "+ТЗ.Товар.Код+" "+ТЗ.Товар+" не задана продажная цена!");
		КонецЕсли;
		
		ПродСумма=ПродЦена*ТЗ.Количество;
		ИтогПродСумма=ИтогПродСумма+ПродСумма;
		Ном=Ном+1;  
		               
		ПечКодДляРозницы="";
		Если (СкладПолучатель.ВидСклада=Перечисление.ВидыСкладов.Розничный)  Тогда
			ПечКодДляРозницы=ТЗ.Товар.КодДляРозницы;
		КонецЕсли;
		
		Таб.ВывестиСекцию("Строка");
	enddo;
	Таб.ВывестиСекцию("Подвал");
	Таб.Опции(0,0,0,0,ПарСтрДок);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Печать накладной","");
КонецПроцедуры
//***********************************************
Процедура Печать2()
	Фирма.ИспользоватьДату(ДатаДок);
	Таб=СоздатьОбъект("Таблица");
	If Kar=0 Then
	            Таб.ИсходнаяТаблица("Таблица1");
	EndIf;
	Таб.ВывестиСекцию("Шапка");
	// получим закуп.цены и суммы
	// по Регистру ОстаткиТоваров
	If Kar=1 Then
	Рег=СоздатьОбъект("Регистр.ОстаткиТоваров");
	Дат=ПолучитьДатуТА();
	Если (Дат=ДатаДок) И (Проведен()>0) Тогда
		Рег.ВременныйРасчет();
		РассчитатьРегистрыНа(ТекущийДокумент());
	 ИначеЕсли Дат>ДатаДок Тогда
	 // если итоги не актуальны, то остатки берем из временногно расчета Регистра
		Рег.ВременныйРасчет();
		Если Проведен()>0 Тогда
			РассчитатьРегистрыНа(ТекущийДокумент());
		Иначе
			РассчитатьРегистрыНа(ДатаДок);
		КонецЕсли;
	КонецЕсли;
	EndIf;
	ВыбратьСтроки();
	Ном=0;
	ОбщСумма=0;
	ИтогПродСумма=0;
	СуммаПеч=0;
	ИтогНдсПеч=0;
	Пока ПолучитьСтроку() = 1 do
	// Вычислим, сколько всего данного товара
	 If Kar=1 Then
	    Ост= Рег.СводныйОстаток(Товар,Склад,,"ОстатокТовара");
            Стоим=Рег.СводныйОстаток(Товар,Склад,,"БазоваяСтоимость");
            Если Ост<>0 Тогда
         		ЗакЦена=Стоим/Ост;
		Иначе
			ЗакЦена=0;
            КонецЕсли;
	     ЗакСумма=ЗакЦена*Количество*Коэффициент;
            ОбщСумма=ОбщСумма+ЗакСумма;
           EndIf;
		ПродЦена=Товар.Розн_Цена.Получить(ДатаДок)*Коэффициент;
		ПродСумма=ПродЦена*Количество;
		ИтогПродСумма=ИтогПродСумма+ПродСумма;
		Ном=Ном+1;
		Таб.ВывестиСекцию("Строка");
	enddo;
	Таб.ВывестиСекцию("Подвал");
	Таб.Опции(0,0,0,0,ПарСтрДок);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Печать накладной","");
КонецПроцедуры
//***********************************************
Процедура Печать1()
	Фирма.ИспользоватьДату(ДатаДок);
	Таб=СоздатьОбъект("Таблица");
	Таб.ВывестиСекцию("Шапка");
	ВыбратьСтроки();
	Ном=0;
	ИтогПродСумма=0;
	Пока ПолучитьСтроку() = 1 do
		Ном=Ном+1;
		ПродЦена=Товар.Розн_Цена.Получить(ДатаДок)*Коэффициент;
		ПродСумма=ПродЦена*Количество;
		ИтогПродСумма=ИтогПродСумма+ПродСумма;
		Таб.ВывестиСекцию("Строка");
	enddo;
	Таб.ВывестиСекцию("Подвал");
	Таб.Опции(0,0,0,0,ПарСтрДок);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Печать накладной","");
КонецПроцедуры
//***********************************************


//-----------------------------------------------
Процедура ВводНового(ФлКопирования);        
	
	ЗаполнитьШапку( Контекст );
	
	Если ФлКопирования=1 Тогда
		Возврат;	    
	КонецЕсли;
	
	Если ТипЗначенияСтр( Форма.Параметр ) = "СписокЗначений" Тогда
		сп = Форма.Параметр;
		семЗаполнитьПоСпискуЗаявок(сп); Возврат;
	КонецЕсли;   

	
	ДатаДок=РабочаяДата();
	Склад=Константа.ОсновнойСклад;
	СкладПолучатель=Константа.ОсновнойСклад;  

КонецПроцедуры

//-----------------------------------------------
Процедура ВводНаОсновании(ДокОснование)   
	Если семМожноВводитьНаОснованииСчета( ДокОснование, "Расходная" ) = 0 Тогда СтатусВозврата( 0 ); Возврат; КонецЕсли;
	Если семМожноВводитьНаОснованииСчета( ДокОснование, "Перемещение" ) = 0 Тогда СтатусВозврата( 0 ); Возврат; КонецЕсли;
	Если семМожноВводитьНаОснованииСчета( ДокОснование, "СнятиеРезерва" ) = 0 Тогда СтатусВозврата( 0 ); Возврат; КонецЕсли;
	Если ДокОснование.Вид() = "Счет" Тогда
		// сем \\
		Если ДокОснование.ПометкаУдаления() = 1 Тогда
			Сообщить("Нельзя вводить документ на основании удаленного документа.","I");
			СтатусВозврата( 0 );
			Возврат;
		КонецЕсли;
		Если ДокОснование.Проведен() = 0 Тогда
			Сообщить("Нельзя вводить документ на основании непроведенного документа.","I");
			СтатусВозврата( 0 );
			Возврат;
		КонецЕсли;
		// сем //
		Если ПустоеЗначение(ДокОснование.Комплектовщик)=0 Тогда
			Комплектовщик=ДокОснование.Комплектовщик;
		Иначе
			Комплектовщик = семВыбратьКомплектовщика();
			Если Комплектовщик.Выбран() = 0 Тогда
				Предупреждение( "Не выбран комплектовщик." );
				СтатусВозврата( 0 );
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если ДокОснование.Вид() = "Счет" Тогда
			ДокументОснование=ДокОснование;

			ЗаполнениеПоРезервам=0;
			Если (Константа.НовыйМеханизмПретензий.Получить(ДатаДок)=Да) И (ПустоеЗначение(ДокОснование.Склад.МестоКомплектации)=0) Тогда
				ЗаполнениеПоРезервам=1;
			КонецЕсли;
			
			Если (ДокОснование.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаНаВозврат) Тогда
				ЗаполнениеПоРезервам=0;
			КонецЕсли;
			
			Если  ЗаполнениеПоРезервам=1 Тогда
				СостЗаявки=глПолучитьСостояниеЗаявки(ДокОснование);
				Если СостЗаявки="Ожидает отгрузки" Тогда
					сп=СоздатьОбъект("СписокЗначений");
					сп.ДобавитьЗначение(ДокОснование);
					семЗаполнитьПоСпискуЗаявок(сп);
				Иначе
					Предупреждение("Нельзя оформлять документ на основании заявки в состоянии <"+СостЗаявки+">!");
					СтатусВозврата(0);				
				КонецЕсли;
				Возврат;
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;

	//Если ДокОснование.Вид() = "Счет" Тогда
	//	ДокТест = СоздатьОбъект("Документ");
	//	Если ДокТест.ВыбратьПодчиненныеДокументы(,,ДокОснование) = 1 Тогда  
	//		Пока ДокТест.ПолучитьДокумент() = 1 Цикл
	//			Если ДокТест.ПометкаУдаления() = 1 Тогда
	//				Продолжить;
	//			КонецЕсли;
	//			Предупреждение("Электронка "+ДокОснование+" уже имеет подчиненный документ "+ДокТест);
	//			СтатусВозврата(0);
	//		КонецЦикла;
	//	КонецЕсли;		
	//КонецЕсли;
	Если (ДокОснование.Вид()="Счет") ИЛИ
	(ДокОснование.Вид()="Перемещение") ИЛИ
	(ДокОснование.Вид()="НарядНаОбклейку") ИЛИ   
	(ДокОснование.Вид()="ПеремещениеДепартамент") ИЛИ   
	(ДокОснование.Вид()="ПеремещениеНаСкладГотовойПродукции") ИЛИ
	(ДокОснование.Вид()="ЗаказКладовщику") ИЛИ
	(ДокОснование.Вид()="ЗаказКалькуляция") ИЛИ
	(ДокОснование.Вид()="РасходнаяНакладная") ИЛИ
	(ДокОснование.Вид()="РасходнаяНакладнаяНал") ИЛИ
	(ДокОснование.Вид()="ПриходнаяНакладная") ИЛИ
	(ДокОснование.Вид()="РасходнаяРеализатора") ИЛИ
	(ДокОснование.Вид()="ПретензияПолученная") ИЛИ   
	(ДокОснование.Вид()="ПриходнаяРеализатора") Тогда
		ЗаполнитьШапкуНаОсн(Контекст,ДокОснование);
		Фирма=глФирма;
		//		Автор=Пользователь; 
		ДокументОснование=ДокОснование;
		ДатаДок=РабочаяДата();         
		
		Если (ДокОснование.Вид()="РасходнаяНакладная") ИЛИ (ДокОснование.Вид()="РасходнаяНакладнаяНал") Тогда
			//ДокументОснование="";
			ДатаДок=ДокОснование.ДатаДок;
			//СкладПолучатель
			СкладПолучатель = ?(ПустоеЗначение(РозничныйТорговыйСклад) = 0,
			            РозничныйТорговыйСклад,
						ДокОснование.Склад);
		Иначе		
					
			ДатаДок=РабочаяДата();
			СкладПолучатель=Константа.ОсновнойСклад;
		КонецЕсли;

		Если (ДокОснование.Вид()="Счет") Тогда
			
			Если ДокОснование.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаНаВозврат Тогда
				СкладПолучатель = ДокОснование.Склад;
				Склад = ДокОснование.СкладПолучатель;
			Иначе
				Склад=Константа.ОсновнойСклад;
				СкладПолучатель=ДокОснование.СкладПолучатель;
			КонецЕсли;
		ИначеЕсли (ДокОснование.Вид()="РасходнаяНакладнаяНал") Тогда
			Склад=Константа.ОсновнойСклад;
			СкладПолучатель=ДокОснование.Склад;
		ИначеЕсли (ДокОснование.Вид()="ЗаказКладовщику") Тогда
			Склад=ДокОснование.СкладИсполнитель;
			СкладПолучатель=ДокОснование.Склад;
		ИначеЕсли (ДокОснование.Вид()="ЗаказКалькуляция") Тогда
			Склад=ДокОснование.СкладКонечный;
			СкладПолучатель=ДокОснование.Склад;
		ИначеЕсли (ДокОснование.Вид()="ПретензияПолученная") Тогда
			Склад=ДокОснование.Склад;
			ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");
			ТекстЗапроса="SELECT TOP 1 МестаХранения.ID [Ссылка $Справочник.МестаХранения]
			|			  FROM $Справочник.МестаХранения AS МестаХранения
			|			  WHERE ($МестаХранения.ТипСклада = $Перечисление.ТипыСкладов.СкладНеликвидов)
			|					AND (МестаХранения.ISMARK = 0)
			|";
			
			СкладПолучатель=ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
		Иначе
			Склад=ДокОснование.Склад;
			СкладПолучатель=Константа.ОсновнойСклад;
		КонецЕсли;           
		
//		Если (ДокОснование.Вид()="Перемещение") ИЛИ (ДокОснование.Вид()="ПеремещениеДепартамент") Тогда
			Основание=ПеревестиНаГосЯзык(ДокОснование.Вид())+" Nr. " + ДокОснование.НомерДок + " от " + ДокОснование.ДатаДок;
//		КонецЕсли;          
		
		ДокОснование.ВыбратьСтроки();
		Пока ДокОснование.ПолучитьСтроку()=1 Цикл
			
			Если ДокОснование.Товар.ВидТовара=Перечисление.ВидыТоваров.Услуга Тогда
			// здесь услуги пропускаем
				Продолжить;                         
			КонецЕсли;
			
			НоваяСтрока();
			Товар=ДокОснование.Товар; 
			ТовКод=Товар.Код;
			Если глЕстьРеквизитМнЧ("Единица",ДокОснование.Вид())=1 Тогда
				Единица=ДокОснование.Единица;
				Коэффициент=ДокОснование.Коэффициент;
			Иначе
				Единица=глБазоваяЕдиницаИзмерения(Товар);
				Коэффициент=1;
			КонецЕсли;
			Если ДокОснование.Вид()="ПеремещениеНаСкладГотовойПродукции" Тогда
				Количество=ДокОснование.КоличествоФакт;
			Иначе
				Количество=ДокОснование.Количество;
			КонецЕсли;
			
			Если глЕстьРеквизитМнЧ("СрокРеализ",ДокОснование.Вид())=1 Тогда
				СрокРеализ=ДокОснование.СрокРеализ;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Предупреждение("Накладную перемещения нельзя вводить на основании выбранного вида документа!!!");
		СтатусВозврата(0);
	КонецЕсли;
КонецПроцедуры

//-----------------------------------------------
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписи() Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ПриЗаписи()
//Закомментировано Инсталлятором МОД:Процедура ПриЗаписи()
	Если семМожноЗаписать( Контекст ) = 0 Тогда Возврат; КонецЕсли;

	Если семПроверкаУникальностиНомера( контекст ) = 0 Тогда Возврат; КонецЕсли;

	Если (ДатаДок>ТекущаяДата()) и (Выбран()=0) Тогда
		АвтоВремяОтключить();
		УстановитьВремя(6,0,0);  
	ИначеЕсли  ДатаДок>ТекущаяДата() Тогда
		АвтоВремяНачалоДня();
	КонецЕсли;      
	
КонецПроцедуры

//-----------------------------------------------
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписи()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
//	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
	стар_ПриЗаписи();
КонецПроцедуры  

//*******************************************
// Процедура генерации запроса ПоНаловым.
//
Процедура ПодборПоНаловым()
	Перем Запрос, ТекстЗапроса;
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(ПоНаловым)
	|Период с ДатаДок по ДатаДок;
	|ОбрабатыватьДокументы НеПроведенные;
	|Обрабатывать НеПомеченныеНаУдаление;
	|Склад = Документ.РасходнаяНакладнаяНал.Склад;
	|Касса = Документ.РасходнаяНакладнаяНал.Касса;
	|Товар = Документ.РасходнаяНакладнаяНал.Товар;
	|Единица = Документ.РасходнаяНакладнаяНал.Единица;
	|Цена = Документ.РасходнаяНакладнаяНал.Цена;
	|Сумма = Документ.РасходнаяНакладнаяНал.Сумма;
	|Количество = Документ.РасходнаяНакладнаяНал.Количество;
	|Коэффициент = Документ.РасходнаяНакладнаяНал.Коэффициент;
	|Функция КолСумма = Сумма(Количество*Коэффициент);
	|Группировка Документ;
	|Группировка СтрокаДокумента;
	|Условие(Склад=СкладПолучатель);
	|"//}}ЗАПРОС
	;            
	
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;

	// Подготовка к заполнению выходных форм данными запроса

	// Заполнение полей "Заголовок"
        
	Если Вопрос("Очистить документ?","Да+Нет")="Да" Тогда
		УдалитьСтроки();
	Иначе
		Возврат;
	КонецЕсли;

	Пока Запрос.Группировка(1) = 1 Цикл
		Пока Запрос.Группировка(2) = 1 Цикл
			// Заполнение полей Товар
	        НоваяСтрока();
			Товар=Запрос.Товар;
			Количество=Запрос.Количество;
			Единица=Запрос.Единица;
			Коэффициент=Запрос.Коэффициент;
			Цена=Запрос.Цена;
			Сумма=Запрос.Сумма;
			ТовКод=Товар.Код;
		КонецЦикла;
	КонецЦикла;
	// Заполнение полей "Итого"

	// Вывод заполненной формы

КонецПроцедуры

           
Процедура ПриОкончанииРедактированияСтроки()
	глДобавитьТоварДляИзменения(Товар);
КонецПроцедуры

Процедура ПриУдаленииСтроки()
	глДобавитьТоварДляИзменения(Товар);
КонецПроцедуры

//***********************************************  
//При проведении проверяем наличие коэффициентов каждой строчки, без этого нельзя провадить.
Процедура кнПровестиПриНажатии(Реж="Закрыть")
	                                          
	Если Константа.ДатаЗапретаРедактирования >= ДатаДок Тогда
		Предупреждение("Дата запрета редактирования, проведение невозможно!");	                                                         
		СтатусВозврата(0);
		Возврат;		
	КонецЕсли;
	
	стар_ПриЗаписи();
	рез=Провести(); 
	Если (СравнитьТА()=-1) И (рез=1) И (ПустоеЗначение(спИзмененныеТовары)=0) Тогда
		глПровестиДокументыПоТоварам(Контекст);
	КонецЕсли;
	Если Реж="Закрыть" Тогда
		Форма.Закрыть();
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнениеПоГруппеСкладу()
	Путь = КаталогИБ() + "ExtForms\Служеб\ЗаполнениеПоГруппеСкладу.ert";
	спПарам = СоздатьОбъект( "СписокЗначений" );
	спПарам.Установить( "ДатаДок", ДатаДок );
	спПарам.Установить( "Док", ТекущийДокумент() );
	спПарам.Установить( "ВидДок", Вид() );
	спПарам.Установить("ДокОснование",ДокументОснование);
	спПарам.Установить( "Склад", Склад );
	ОткрытьФормуМодально( "Обработка", спПарам, Путь );
	ЗагрузитьТабличнуюЧасть(спПарам.Получить("Таблица"));
	Склад = спПарам.Получить("Склад");
	ДокументОснование = спПарам.Получить("ДокОснование");
	
	//Всего = КоличествоСтрок();
	//ВыбратьСтроки();
	//Пока ПолучитьСтроку()=1 Цикл
	//	Состояние(Шаблон("Обрабатывается: [НомерСтроки]/[Всего]"));
	//	ТовКод 		= Товар.Код;
	//	УстановкаЕдиницыИзмерения(Контекст);
	//	
	//КонецЦикла;
	
КонецПроцедуры



Функция ФорматВывода( парам )
	
	Если парам = "ЭлЗаявка" Тогда
		Если ПустоеЗначение(Счет)=1 Тогда
			Если ПустоеЗначение(ДокументОснование)=0 Тогда
				Если ДокументОснование.Вид()="Счет" Тогда
					Возврат ДокументОснование.НомерДок;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Возврат Счет.НомерДок;
		КонецЕсли;
	КонецЕсли;		

КонецФункции

//Конец текста, вставленного Инсталлятором МОД

// При входе в Форму запомним промежуточные переменные

