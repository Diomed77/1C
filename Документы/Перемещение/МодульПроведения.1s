Перем Парт;
Перем РегПарт;
Перем итСчетаТовары,итКомплТовары,сзКлюч;

Функция семПроверкаПозицииЭлектроннойЗаявки()
	ВсеОК = 1;
	Если ДокументОснование.Выбран() = 0 Тогда Возврат ВсеОК; КонецЕсли;
	Если ДокументОснование.Вид() <> "Счет" Тогда Возврат ВсеОК; КонецЕсли;
	текПозиция = ПолучитьПозицию();
	Если текПозиция < ДокументОснование.ПолучитьПозицию() Тогда
		Сообщить(Шаблон("Нельзя проводить документ раньше Эл. заявки [ДокументОснование.НомерДок] [ДокументОснование.ДатаДок] [ДокументОснование.ПолучитьВремя()]"),"!");
		ВсеОК = 0;
	КонецЕсли;
	Возврат ВсеОК;
КонецФункции

Процедура ПеремещениеПоПартиям(ТУ)
	//партии и склады           
	
	Если (ТУ="Упр") Тогда
		Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета.Выбран()=0 Тогда
			Возврат ; // учет Упр. не ведется
		КонецЕсли;
		РегФирма=Фирма;
	ИначеЕсли (ТУ="Фин") Тогда
		Если Фирма.МетодРасчетаСебестоимостиФинансовогоУчета.Выбран()=0 Тогда
			Возврат ; // учет Фин. не ведется
		КонецЕсли;
		РегФирма=Фирма;
	Иначе
		Сообщить("Неверно задан тип учета партий товаров по "+ТекущийДокумент());
		Возврат ;
	КонецЕсли;                               
	
	// склпарт
	Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
		РегСклад=Склад;
	Иначе
		РегСклад="";
	КонецЕсли;
	
	//-- -- -- --	
	
	Если ТУ="Фин" Тогда
		ПромФирма=Фирма;
	Иначе
		ПромФирма=Фирма;
	КонецЕсли;	
	// склпарт
	Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
		ПромСклад=Склад;
	Иначе
		ПромСклад=СоздатьОбъект("Справочник.МестаХранения");
	КонецЕсли;		
	
	ТаможенныеРасходы = ТаможенныеРасходы + ТаможняПоТовару;
	ОбщееКоличество=Количество*Коэффициент;
	НадоСписать=ОбщееКоличество;
	КоличествоПоРеализации=ОбщееКоличество;
	Себестоимость=0;
	
	ТаможенныйСклад = 0;
	Если Склад.Выбран() = 1 Тогда
		Если Склад.ТаможенныйСклад = 1 Тогда  
			Если ДокументОснование.Выбран() = 1 Тогда
				Если ДокументОснование.Вид() = "ПриходнаяНакладная" Тогда  
					ТаможенныйСклад = 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ТаможенныйСклад = 0 Тогда
		РегПарт.УстановитьФильтр(ПромФирма,Товар,,,,ПромСклад);
		ОтатокТаможня = 0;
	Иначе
		РегПарт.УстановитьФильтр(ПромФирма,Товар,,,ДокументОснование,ПромСклад);
		ОтатокТаможня = ТаможняПоТовару;
	КонецЕсли;

	РегПарт.ВыгрузитьИтоги(Парт,1,1); 
	Парт.НоваяКолонка("Приоритет","Число",1);
	Если ПустоеЗначение(СрокРеализ)=0 Тогда
		Парт.ВыбратьСтроки();
		Пока Парт.ПолучитьСтроку() = 1 Цикл
			Если Парт.СрокРеализации<СрокРеализ Тогда
				Парт.Приоритет=1;
			ИначеЕсли Парт.СрокРеализации=СрокРеализ Тогда 			
				Парт.Приоритет=-2;
			ИначеЕсли Парт.СрокРеализации>СрокРеализ Тогда 			
				Парт.Приоритет=-1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ДатаДок>='01.09.2017' Тогда
		
		сзКлюч.УдалитьВсе();
		сзКлюч.ДобавитьЗначение(Счет);
		сзКлюч.ДобавитьЗначение(Товар);
		
		итСчетаТовары.Подмножество(сзКлюч,2,"иСчетТовар");				
		//итСчетаТовары.Показать("иСчетТовар");
		итСчетаТовары.ВыбратьСтроки("иСчетТовар");
		Если итСчетаТовары.ПолучитьСтроку("иСчетТовар")>0 Тогда
			Парт.ВыбратьСтроки();
			Пока Парт.ПолучитьСтроку() > 0 Цикл
				Если (Парт.СрокРеализации>=итСчетаТовары.МинСрокРеализ) Тогда 
					Если  Парт.ОстатокТовара>= ОбщееКоличество Тогда
						Парт.Приоритет=Парт.Приоритет-2;
					Иначе
						Парт.Приоритет=Парт.Приоритет-1;									
					КонецЕсли;
				Иначе
					Парт.Приоритет=Парт.Приоритет+1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//меняем приоритет списания согласно факт сроку реализации, который был использован
		итКомплТовары.Подмножество(сзКлюч,2,"иСчетТовар");
		итКомплТовары.ВыбратьСтроки("иСчетТовар");
		Если итКомплТовары.ПолучитьСтроку("иСчетТовар")>0 Тогда
			Парт.ВыбратьСтроки();
			Пока Парт.ПолучитьСтроку() > 0 Цикл
				Если (Парт.СрокРеализации=итКомплТовары.СрокРеализ)  Тогда 
					Парт.Приоритет=Парт.Приоритет-2;
				ИначеЕсли (Парт.СрокРеализации=итКомплТовары.СрокРеализДоп) Тогда 
					Парт.Приоритет=Парт.Приоритет-1;
				Иначе
					Парт.Приоритет=Парт.Приоритет+1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Парт.Сортировать("Приоритет,СрокРеализации,ПрихДокумент");				


	Если ((ТУ="Фин") И (Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.FIFO)) Тогда
		Парт.Сортировать("+Приоритет,+СрокРеализации,-Статус,+ПрихДокумент",1);
	ИначеЕсли ((ТУ="Фин") И (Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO)) Тогда 
		Парт.Сортировать("+Приоритет,-СрокРеализации,-Статус,-ПрихДокумент",1);
	ИначеЕсли ((ТУ="Фин") И (Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему)) Тогда	
		Парт.Сортировать("+Приоритет,-Статус,+ПрихДокумент",1);
	ИначеЕсли ((ТУ="Упр") И (Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.FIFO)) Тогда
		Парт.Сортировать("+Приоритет,+СрокРеализации,-Статус,+ПрихДокумент",1);
	ИначеЕсли ((ТУ="Упр") И (Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO)) Тогда
		Парт.Сортировать("+Приоритет,-СрокРеализации,-Статус,-ПрихДокумент",1);
	ИначеЕсли ((ТУ="Упр") И (Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему)) Тогда	
		Парт.Сортировать("+Приоритет,-Статус,+ПрихДокумент",1);                            
	КонецЕсли;	
	

	Парт.ВыбратьСтроки();
	Пока Парт.ПолучитьСтроку()=1 Цикл
		Если НадоСписать=0 Тогда
			Прервать;
		КонецЕсли; 
		Контр=Парт.Контрагент;
		ПромДок=Парт.ПрихДокумент;
		R=Парт.Статус;
		СрокРеал=Парт.СрокРеализации;
		Партия=Парт.Партия;
		ОтатокПартииКол=Парт.ОстатокТовара;
		ОтатокПартииВал=Парт.Стоимость;
		ОтатокПартииНДС=Парт.НДС;
		ОстатокПродВал=Парт.ПродСтоимость;
		
		Если (ОтатокПартииКол<0)или(ОтатокПартииКол=0) Тогда  
			 Продолжить;
		КонецЕсли;  
		
		Если ОтатокПартииКол>=НадоСписать Тогда
			СписатьКол=НадоСписать;
		Иначе
			СписатьКол=ОтатокПартииКол;
		КонецЕсли;
		Если ОтатокПартииКол=0 Тогда
			СписатьВал=ОтатокПартииВал;       
			СписатьНДС=ОтатокПартииНДС;
			СписатьПродВал=ОстатокПродВал;
		Иначе
			СписатьВал=ОтатокПартииВал/ОтатокПартииКол*СписатьКол;
			СписатьНДС=ОтатокПартииНДС/ОтатокПартииКол*СписатьКол;
			СписатьПродВал=ОстатокПродВал/ОтатокПартииКол*СписатьКол;
		КонецЕсли; 
		
		ПривязыватьСтроку(НомерСтроки);
		Регистр.ПартииТоваров.ДвижениеРасход(ПромФирма,Товар,R,Контр,ПромДок,Склад,Партия,СрокРеал,СписатьКол,СписатьВал,СписатьПродВал,СписатьНДС,,,,"?",,3,);
		Регистр.ПартииТоваров.ДвижениеПриход(ПромФирма,Товар,R,Контр,ПромДок,СкладПолучатель,Партия,СрокРеал,СписатьКол,СписатьВал+ОтатокТаможня,СписатьПродВал,СписатьНДС,,,,"%",,3,);
		
		СебестоимостьШ=СебестоимостьШ+СписатьВал+ОтатокТаможня;
		
		НадоСписать=НадоСписать-СписатьКол;
	КонецЦикла;
	//-------------------
 	Если НадоСписать>0 Тогда  
 		СписатьКол=НадоСписать;
 		Контр=СоздатьОбъект("Справочник.Контрагенты");
 		ПромДок=ТекущийДокумент();
 		СписатьВал=Товар.ЦенаПриобретения*КурсДляВалюты(Товар.ВалютаЗакупки,ДатаДок)*СписатьКол;       
		СписатьНДС=СписатьВал*(ПроцентНДС(Товар.СтавкаНДС)/(100+ПроцентНДС(Товар.СтавкаНДС)));;
		СписатьПродВал=Товар.РозничнаяЦена.Получить(ДатаДок)*СписатьКол;
		ПривязыватьСтроку(НомерСтроки);
		Регистр.ПартииТоваров.ДвижениеРасход(ПромФирма,Товар,R,Контр,ПромДок,Склад,,,СписатьКол,СписатьВал-СписатьНДС,СписатьПродВал,СписатьНДС,,,,"?",,3,);
		Регистр.ПартииТоваров.ДвижениеПриход(ПромФирма,Товар,R,Контр,ПромДок,СкладПолучатель,,,СписатьКол,СписатьВал-СписатьНДС,СписатьПродВал,СписатьНДС,,,,"%",,3,);	
		СебестоимостьШ=СебестоимостьШ+СписатьВал-СписатьНДС;
 	КонецЕсли; 	
	// ---------------
	
КонецПроцедуры	

Функция семЕстьЗаявка()
	Если ДокументОснование.Выбран() = 1 Тогда
		Если ДокументОснование.Вид() = "Счет" Тогда
			Если ДокументОснование.Проведен()=1 Тогда
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
КонецФункции

Процедура семПогашениеПоРезервам()
	
КонецПроцедуры

//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения() Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ОбработкаПроведения()
//Закомментировано Инсталлятором МОД:Процедура ОбработкаПроведения()    

	Если семМожноПровести( Контекст ) = 0 Тогда Возврат; КонецЕсли;
	ТаможенныеРасходы = 0;
	Фирма.ИспользоватьДату(ДатаДок);
	
	Если (ДатаДок>ТекущаяДата()) И (Пользователь.РазрПровБудущейДатой=0) Тогда
		НеПроводить(Контекст,"Нельзя проводить документ будущей датой!");
		Возврат;
	КонецЕсли;
	
	Если Склад.Выбран()=0 Тогда
		НеПроводить(Контекст,"Не указан склад откуда производится перемещение!");
		Возврат;
	КонецЕсли;  
	
	Если СкладПолучатель.Выбран()=0 Тогда
		НеПроводить(Контекст,"Не указан склад куда производится перемещение!");
		Возврат;
	КонецЕсли;
	
	Если глПроверкаСкладаПоПользователю(Контекст,Склад)=0 Тогда
		НеПроводить(Контекст,"Нельзя использовать данный склад!");
		Возврат;
	КонецЕсли;

	Если глПроверкаСкладаПоПользователю(Контекст,СкладПолучатель)=0 Тогда
		НеПроводить(Контекст,"Нельзя использовать данный склад!");
		Возврат;
	КонецЕсли;
	
	Если ПроверкаДублейСтрок(Контекст)=1 Тогда 
//		НеПроводить(Контекст,"В документе строки с одинаковым товаром!");
//		Возврат;
	КонецЕсли;
         
	Если семПроверкаПозицииЭлектроннойЗаявки() = 0 Тогда
		СтатусВозврата( 0 ); Возврат;		
	КонецЕсли;

	Если ГрупповаяОбработка() = 0 Тогда
		Если семПроверкаПретензии(Контекст) = 0 Тогда
			Сообщить("Ошибка проведения документа.","!");
			СтатусВозврата(0); Возврат;
		КонецЕсли;
	КонецЕсли;

	// проверим есть ли счета
	спСчета = СоздатьОбъект( "СписокЗначений" );
	ЕстьСчета = 0; 
	ЗакрыватьРезерв=0;

	ВыбратьСтроки(); 
	Пока ПолучитьСтроку() = 1 Цикл
		Если ПустоеЗначение( Счет ) = 0 Тогда
			Если Счет.Проведен() = 1 Тогда
			Если (ПустоеЗначение(Счет.СкладПолучатель)=0) И (Константа.НовыйМеханизмПретензий.Получить(ДатаДок)=Да) Тогда 
					//закрываем резерв только в случае, если заявка оформлена на пополнение склада и конечным документом является документ перемещения
					ЗакрыватьРезерв = 1;
				КонецЕсли;
				
				Если спСчета.НайтиЗначение(Счет )=0 Тогда
					спСчета.ДобавитьЗначение( Счет );	
				КонецЕсли;
				ЕстьСчета = 1; 
			КонецЕсли;
		ИначеЕсли (ПустоеЗначение(Счет)=1) И (ПустоеЗначение(ДокументОснование)=0) Тогда
			Если ДокументОснование.Вид()="Счет" Тогда
				Счет = ДокументОснование;
				Если (ПустоеЗначение(ДокументОснование.СкладПолучатель)=0) И (Константа.НовыйМеханизмПретензий.Получить(ДатаДок)=Да) Тогда 
					//закрываем резерв только в случае, если заявка оформлена на пополнение склада и конечным документом является документ перемещения
					ЗакрыватьРезерв = 1;
				ИначеЕсли (Константа.НовыйМеханизмПретензий.Получить(ДатаДок)<>Да) Тогда //по старой системе закрываем резервы по заявке в любом случае
					ЗакрыватьРезерв = 1;
				КонецЕсли;

				Если спСчета.НайтиЗначение(Счет )=0 Тогда
					спСчета.ДобавитьЗначение( Счет );	
				КонецЕсли;
				
				ЕстьСчета = 1; 

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// сем \\
	ЕстьЗаявка = 0;
	//Если ДокументОснование.Выбран() = 1 Тогда
	//	Если ДокументОснование.Вид() = "Счет" Тогда
	//		Если (ДокументОснование.Проведен()=1) Тогда
	//			Если (ПустоеЗначение(ДокументОснование.СкладПолучатель)=0) И (Константа.НовыйМеханизмПретензий.Получить(ДатаДок)=Да) Тогда 
	//				//закрываем резерв только в случае, если заявка оформлена на пополнение склада и конечным документом является документ перемещения
	//				ЗакрыватьРезерв = 1;
	//			ИначеЕсли (Константа.НовыйМеханизмПретензий.Получить(ДатаДок)<>Да) Тогда //по старой системе закрываем резервы по заявке в любом случае
	//				ЗакрыватьРезерв = 1;
	//			КонецЕсли;
	//			ЕстьЗаявка = 1;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	// сем //
	
	ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");

	сзКлюч = СоздатьОбъект("СписокЗначений");

	итСчетаТовары=СоздатьОбъект("ИндексированнаяТаблица");
	итСчетаТовары.НоваяКолонка("СчетСсылка");
	итСчетаТовары.НоваяКолонка("Товар");
	итСчетаТовары.НоваяКолонка("МинСрокРеализ");
	итСчетаТовары.НоваяКолонка("МаксСрокРеализ");
	
	итКомплТовары=СоздатьОбъект("ИндексированнаяТаблица");
	итКомплТовары.НоваяКолонка("СчетСсылка");
	итКомплТовары.НоваяКолонка("Товар");
	итКомплТовары.НоваяКолонка("CрокРеализ");
	
	ТекстЗапроса = "SELECT $СчетСтроки.Товар [Товар $Справочник.Номенклатура]
	|						, СчетСтроки.IDDOC [СчетСсылка $Документ.Счет]
	|						, NullIf($СчетСтроки.МинСрокРеализ, '17530101') МинСрокРеализ
	|						, NullIf($СчетСтроки.МаксСрокРеализ, '17530101') МаксСрокРеализ
	|				FROM $ДокументСтроки.Счет AS СчетСтроки With (NOLOCK)
	|				INNER JOIN $ДокументСтроки.Перемещение AS ДокС  (NOLOCK) ON $ДокС.Счет = СчетСтроки.IDDOC AND  $ДокС.Товар = $СчетСтроки.Товар  AND  ДокС.IDDOC = :ТекДок
	|";
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ТекДок",ТекущийДокумент());
	
	ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итСчетаТовары);


	ТекстЗапроса = "
	|				SELECT $КомплектацияЗаявкиФактСтроки.Товар [Товар $Справочник.Номенклатура]
	|					   ,$КомплектацияЗаявкиФакт.ПоСчету [СчетСсылка $Документ.Счет]
	|					   , NullIf($КомплектацияЗаявкиФактСтроки.СрокРеализ, '17530101') СрокРеализ
	|					   , NullIf($КомплектацияЗаявкиФактСтроки.СрокРеализДоп, '17530101') СрокРеализДоп
	|					   , $КомплектацияЗаявкиФактСтроки.СрокРеализДопКол СрокРеализДопКол
	|					 FROM $ДокументСтроки.КомплектацияЗаявкиФакт AS КомплектацияЗаявкиФактСтроки With (NOLOCK)
	|				 	 INNER JOIN $Документ.КомплектацияЗаявкиФакт AS КомплектацияЗаявкиФакт With (NOLOCK) ON КомплектацияЗаявкиФактСтроки.IDDOC = КомплектацияЗаявкиФакт.IDDOC
	|					 INNER JOIN $ДокументСтроки.Перемещение AS ДокС  (NOLOCK) ON $ДокС.Счет = $КомплектацияЗаявкиФакт.ПоСчету AND  $ДокС.Товар = $КомплектацияЗаявкиФактСтроки.Товар  AND  ДокС.IDDOC = :ТекДок
	|					  WHERE $КомплектацияЗаявкиФактСтроки.ТоварЗамена = $ПустойИД
	|";
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ТекДок",ТекущийДокумент());
	
	ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итКомплТовары);
		
	итСчетаТовары.ДобавитьИндекс("иСчетТовар","*СчетСсылка,*Товар");
	итКомплТовары.ДобавитьИндекс("иСчетТовар","*СчетСсылка,*Товар");

	СебестоимостьШ=0;

	// по Регистру ОстаткиТоваров 
	РегСП=СоздатьОбъект("Регистры");
	
	Рег=РегСП.ОстаткиТоваров;
	РегПарт=РегСП.ПартииТоваров;
	РегНТ=РегСП.НедоступныеТовары;
	// сем \\
	Если ЕстьСчета = 1 Тогда
		регРезервы = РегСП.РезервыТоваров; 
		регРезервы.УстановитьЗначениеФильтра( "ПоСчету", спСчета, 2 );
		регСпецЗаказы = РегСП.СпецЗаказы;
		регСпецЗаказы.УстановитьЗначениеФильтра( "ПоСчету", спСчета, 2 );
		РегКомпл = РегСП.КомплектацияЗаявок;
		РегКомпл.УстановитьЗначениеФильтра( "ПоСчету", спСчета, 2 );
	КонецЕсли;
	// сем //
	Парт=СоздатьОбъект("ТаблицаЗначений");
	
	Если ИтогиАктуальны()=0 Тогда
	         
		// сем \\
		Если ЕстьСчета = 1 Тогда
			регРезервы.ВременныйРасчет();
			регСпецЗаказы.ВременныйРасчет();
			РегКомпл.ВременныйРасчет();
		КонецЕсли;
		// сем //
		
		// если итоги не актуальны, то стоимости берем из временногно расчета Регистра
	//	Если НЕ(глРазрОтрицОстатки=Да) Тогда
	                      
			РегСП.Актуальность(1);
	
			ТоварЛист=СоздатьОбъект("СписокЗначений");
			ВыгрузитьТабличнуюЧасть(ТоварЛист,"Товар");
			Рег.УстановитьЗначениеФильтра("Товар",ТоварЛист,2);
			Рег.УстановитьЗначениеФильтра("Склад",Склад,1);
			РегНТ.УстановитьЗначениеФильтра("Склад",Склад,1);
			РегПарт.УстановитьЗначениеФильтра("Товар",ТоварЛист,2);
			РегНТ.УстановитьЗначениеФильтра("Товар",ТоварЛист,2);
	//		регРезервыТоваров.УстановитьЗначениеФильтра("Товар",ТоварЛист,2);
			
//			РегПарт.УстановитьЗначениеФильтра("Склад",Склад,1);
	
			Рег.ВременныйРасчет();
			РегПарт.ВременныйРасчет();
			РегНТ.ВременныйРасчет();
			РегСП.РассчитатьРегистрыНа(ТекущийДокумент());
	//	КонецЕсли;
	КонецЕсли;
	ВыбратьСтроки();
	Пока ПолучитьСтроку()>0 Цикл
		// Для расхода
		Если Товар.Выбран()=0 Тогда
			Сообщить("В документе "+Вид()+" № "+НомерДок
			+" от "+ДатаДок+"Не указан товар, который перемещается!");
			Продолжить;
		КонецЕсли;
		Если Товар.ВидТовара=Перечисление.ВидыТоваров.Услуга Тогда
			// услуги здесь в этих регистрах не учитываем
			Продолжить;
		КонецЕсли;
		Если НЕ(глРазрОтрицОстатки=Да) Тогда
			ОстатокТовара=Рег.СводныйОстаток(Товар,Склад,,"ОстатокТовара");
			Если ОстатокТовара<Количество*Коэффициент Тогда
				Сообщить("На складе нет нужного количества товара "+Товар.Код+ " "+ Товар.Наименование + ".");
				НеПроводить(Контекст," На складе осталось "+ОстатокТовара
				+" "+Товар.БазоваяЕдиницаИзмерения+"." );
//				Рег=0;
//				Возврат;
			КонецЕсли;
		КонецЕсли;
		// Для расхода             
		
		ПривязыватьСтроку(НомерСтроки);
		Регистр.ОстаткиТоваров.ПривязыватьСтроку(НомерСтроки);
		Регистр.ОстаткиТоваров.Фирма	= Фирма;
		Регистр.ОстаткиТоваров.ОстатокТовара=Количество*Коэффициент;
		Регистр.ОстаткиТоваров.Склад=Склад;
		Регистр.ОстаткиТоваров.Товар=Товар;
		Регистр.ОстаткиТоваров.ФлагУчета=1; 
		Если ТипУчета<Фин Тогда
			Регистр.ОстаткиТоваров.ДвижениеРасходВыполнить();
		КонецЕсли;
		
		Если Склад.ТипСклада=Перечисление.ТипыСкладов.СкладПредПродПодготовки Тогда
			
			ОстатокТовараНедоступный=РегНТ.СводныйОстаток(Товар,Склад,,Фирма,"ОстатокТовара");

			Если ОстатокТовараНедоступный>0 Тогда
				Регистр.НедоступныеТовары.ПривязыватьСтроку(НомерСтроки);
				Регистр.НедоступныеТовары.Фирма	= Фирма;
				Регистр.НедоступныеТовары.ОстатокТовара=Мин(Количество*Коэффициент,ОстатокТовараНедоступный);
				Регистр.НедоступныеТовары.Склад=Склад;
				Регистр.НедоступныеТовары.Товар=Товар;
				Регистр.НедоступныеТовары.КодОперации="-"; 
				Если ТипУчета<Фин Тогда
					Регистр.НедоступныеТовары.ДвижениеРасходВыполнить();
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
		
		// Для прихода   
		Регистр.ОстаткиТоваров.Склад=СкладПолучатель; 
		Регистр.ОстаткиТоваров.ОстатокТовара=Количество*Коэффициент;
		Регистр.ОстаткиТоваров.Товар=Товар;
		Регистр.ОстаткиТоваров.ФлагУчета=1; 
		Если ТипУчета<Фин Тогда
			Регистр.ОстаткиТоваров.ДвижениеПриходВыполнить(); 
		КонецЕсли;
		
		Если СкладПолучатель.ТипСклада=Перечисление.ТипыСкладов.СкладПредПродПодготовки Тогда
			Регистр.НедоступныеТовары.ПривязыватьСтроку(НомерСтроки);
			Регистр.НедоступныеТовары.Фирма	= Фирма;
			Регистр.НедоступныеТовары.ОстатокТовара=Количество*Коэффициент;
			Регистр.НедоступныеТовары.Склад=СкладПолучатель;
			Регистр.НедоступныеТовары.Товар=Товар;
			Регистр.НедоступныеТовары.КодОперации="+"; 
			Если ТипУчета<Фин Тогда
				Регистр.НедоступныеТовары.ДвижениеПриходВыполнить();
			КонецЕсли;
		КонецЕсли;
		
		//         
		// склпарт
		Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда  
			Если ТипУчета<Фин Тогда
				ПеремещениеПоПартиям("Упр");//,Товар,Количество,Коэффициент);
			КонецЕсли;
			//-------------------------------------
			Если ТипУчета>Упр Тогда
				ПеремещениеПоПартиям("Фин");//,Товар,Количество,Коэффициент);         
			КонецЕсли;
			//
		КонецЕсли;  
		
		//-- -- -- -- 
		Если СкладПолучатель.ТипСклада=Перечисление.ТипыСкладов.Бар Тогда   
			Если Товар.ВалютаПродажи<>Рубли Тогда
				ПромЦена=Пересчет(Цена,Рубли,ДатаДок,Товар.ВалютаПродажи,ДатаДок);
			Иначе
				ПромЦена=Цена;
			КонецЕсли; 
			
			УстановитьРеквизитСправочника(Товар,"РозничнаяЦена",ПромЦена,);
		КонецЕсли;	

	КонецЦикла;
	
	// сем \\
	Если (ЗакрыватьРезерв = 1) Тогда
		глПогашениеПоРезервам(Контекст,спСчета,регРезервы,регСпецЗаказы,РегКомпл);
	КонецЕсли;
	// сем //
	
	глДвиженияПоКомплектации(Контекст);
	
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеМОД(Контекст)=1 Тогда
	    Возврат;
	КонецЕсли;
	стар_ОбработкаПроведения();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаУдаленияПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеПоАлгоритмуМОД=1 Тогда
	    Возврат;
	КонецЕсли;
	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
	ПриОтменеПроведенияДокумента(ТекущийДокумент());
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД



