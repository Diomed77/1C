Перем ТП;//Табличное поле
Перем Таб;//Табличная часть табличного поля
Перем флСообщения;
Перем МойШрифт;
Перем Таб_ТекущаяСтрока,Таб_ТекущаяКолонка, Таб_Значение;
Перем ТекущийСлой;
Перем ТекущийДокПоставки,старТекущийДокПоставки;
Перем меню,ПередатьФокус;
Перем пСтолбцы;
Перем тпДок, Источник;
Перем слПрихода,слСканирования,слТаблицы,слТовара,слОжПоставок,слДатаВремя;//Переменые окон (слоев) отображаемые на Экране. 
Перем итТовар;
Перем нажатьКлавишу,счетНажатий;
Перем сзКолонок;
Перем ИТтекущая;

Перем п_КоличествоПлюс,флПлюс;

Процедура ПВ_ВывестиЗначение() Далее
Процедура ТП_совмещениеТЧ(ТП_ТекСтрока) Далее
Процедура кнВперед() Далее
Процедура ТП_Обновить() Далее
Процедура ВводНаОсновании(ДокОснование) Далее
//Процедура кнМеню() Далее


Функция ЗадачаНаВнешнююКоманду(пШтрихкод,Команда="")
	
	Если Команда="Расшифровать" Тогда
		сзПараметр= СоздатьОбъект("СписокЗначений");
			сзПараметр.ДобавитьЗначение(Команда,"Команда");
			сзПараметр.ДобавитьЗначение(пШтрихкод,"Штрихкод");
	//		сзПараметр.ДобавитьЗначение(ТекущийДокПоставки,"пДокПоставки");
	//		сзПараметр.ДобавитьЗначение(ВзятьКонтекст(ТекущийДокумент()),"Конт");	
		
		ОткрытьФормуМодально("Отчет",сзПараметр,КаталогИБ()+"ExtForms\ОбрШтрихкодGS1-128.ert");
		
		Возврат сзПараметр;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция УстановитьСостояние(Сост,Док)
	спрСост=СоздатьОбъект("Справочник.СостоянияДокументов");
	спрСост.НайтиПоНаименованию(Док); 
	спрСост.ИспользоватьРодителя(спрСост.ТекущийЭлемент());
	спрСост.НайтиПоНаименованию(Сост,1);
	Возврат спрСост.ТекущийЭлемент();
КонецФункции
Процедура НастроитьПривязки()
	
	УправлениеФормой = СоздатьОбъект("УправлениеФормой");
	Привязки = УправлениеФормой.ПривязкаЭлементов;
	//Привязки//:УправлениеФормой.Привязка
	Привязки.УстановитьГраницыПоФорме("тпКнопка_",1,1,1,0);
	Привязки.УстановитьГраницыПоФорме("ПанельВвода",1,1,1,0);
	Привязки.УстановитьГраницыПоФорме("Назад",1,0,0,1);
	Привязки.УстановитьГраницыПоФорме("Вперед",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("Текст1",1,1,1,0);
	Привязки.УстановитьГраницыПоФорме("тКолонка",1,1,1,0);
	
	Привязки.УстановитьГраницыПоФорме("кнЗаписать",1,0,0,1);
	Привязки.УстановитьГраницыПоФорме("кнПровести",1,0,0,1);
	Привязки.УстановитьГраницыПоФорме("кнПечатьПр",1,0,0,1);
	
	
	Привязки.УстановитьГраницыПоФорме("РамкаВзаимПодвал",1,0,0,1);
	Привязки.УстановитьГраницыПоФорме("тСуммаНДС",1,0,0,1);
	Привязки.УстановитьГраницыПоФорме("РамкаВсего",1,0,0,1);
	Привязки.УстановитьГраницыПоФорме("тСуммаНДССк",1,0,0,1);
	Привязки.УстановитьГраницыПоФорме("РамкаНДС",1,0,0,1);
	Привязки.УстановитьГраницыПоФорме("текстСкидки",1,0,0,1);
	Привязки.УстановитьГраницыПоФорме("РамкаСкидки",1,0,0,1);
	
	Привязки.УстановитьГраницыПоФорме("тТранспорт",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кнЛастРекорд",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("тЦены",0,1,0,1);
	
	Привязки.УстановитьГраницыПоФорме("кнОК",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кнЗакрыть",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кнДействия",0,1,0,1);
	Привязки.УстановитьГраницыПоФорме("кнПапка",0,1,0,1);

	Привязки.Привязать();

КонецПроцедуры
Процедура НастроитьОкна(Показать=1)
	Окна = СоздатьОбъект("Окна");
	//Окна.ВключитьМодальныйРежим();
	Окна.Максимизировать();
	
	Если Показать<>1 Тогда
		меню = Окна.ПолучитьМеню();
	КонецЕсли;
   
    а="";
 //   меню.ВыбратьЗначение(а);
	стр="";	
	Для Номер = 1 По Меню.РазмерСписка() Цикл
		меню.ПолучитьЗначение(Номер, стр); //получить значение и представление
		Окна.ВидимостьМеню(стр, Показать);
	КонецЦикла;
	Окна.ПоказыватьПанели(Показать);
	Если Показать<>1 Тогда
	//	Окна.Минимизировать(Форма);
		Окна.Максимизировать(Форма);
	КонецЕсли;
	
КонецПроцедуры
Функция ПолучитьЦвет(Красный = 0,Зеленый = 0,Синий = 0) Экспорт
    Возврат Макс(0,Синий)*65536+Макс(0,Зеленый)*256+Макс(0,Красный);
КонецФункции

//Функция ПолучитьСрокРеализации(пТовар,пКлиент)
//
//	//проведем проверку последнего прихода товара и срока реализации
//			
//	Запрос=СоздатьОбъект("ODBCRecordSet");
//	ТекстЗапроса="SELECT TOP 1 $ПартииТоваров.СрокРеализации СрокРеализ 
//	|					, ПартииТоваров.IDDOC [Документ $Документ]
//	|					, ПартииТоваров.IDDOCDEF Документ_вид
//	|					, $ПартииТоваров.ОстатокТовара Количество
//	|			  FROM $Регистр.ПартииТоваров AS ПартииТоваров (NOLOCK)
//	|			  WHERE ($ПартииТоваров.Товар = :ВыбТовар)
//	|					AND ПартииТоваров.DATE_TIME_IDDOC >= :НачДата AND ПартииТоваров.DATE_TIME_IDDOC <= :КонДата~
//	|					AND ПартииТоваров.DEBKRED = 0
//	|					AND $ПартииТоваров.КодОперации = :КодОп1
//	|					AND $ПартииТоваров.Контрагент = :ВыбПоставщик
//	|			  ORDER BY $ПартииТоваров.СрокРеализации DESC
//	|";
//	
//	Запрос.УстановитьТекстовыйПараметр("ВыбТовар", пТовар);
//	//Запрос.УстановитьТекстовыйПараметр("ВыбСрокРеализ", СрокРеализ);
//	Запрос.УстановитьТекстовыйПараметр("ВыбПоставщик", пКлиент);
//	Запрос.УстановитьТекстовыйПараметр("НачДата", ДатаДок - 180);
//	Запрос.УстановитьТекстовыйПараметр("КонДата", ?(Выбран()=0,СформироватьПозициюДокумента(ПолучитьДокументТА()),СформироватьПозициюДокумента(ТекущийДокумент(),-1)));
//	Запрос.УстановитьТекстовыйПараметр("КодОп1", ЗакупкаТовара);
//	табл=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
//
//	Если табл.КоличествоСтрок()=1 Тогда
//		табл.ПолучитьСтрокуПоНомеру(1);
//		Возврат табл.СрокРеализ;
//		//Если табл.СрокРеализ>СрокРеализ Тогда
//		//	ПроблемаДопустСрокаРеализации = Да;
//		//	Предупреждение("Введенный срок реализации меньше, чем поступал товар с максимальным сроком!");
//		//	//табл.ВыбратьСтроку();
//		//КонецЕсли;
//	КонецЕсли;
//
//КонецФункции 



Процедура ОбработкаВнешнихКоманд()
	Перем ПолучСЗПараметр;
	Перем Команда,пКомплектовщик;
	Перем пТекущийДокПоставки;
	
	ПолучСЗПараметр = Форма.Параметр;
	Если ПустоеЗначение(ПолучСЗПараметр)=0 Тогда
		Команда=ПолучСЗПараметр.Получить("Команда");
		пТекущийДокПоставки=ПолучСЗПараметр.Получить("пДокПоставки");
		пКомплектовщик=ПолучСЗПараметр.Получить("пКомплектовщик");
		
		Если Команда="Новый" Тогда
			ТекущийДокПоставки=пТекущийДокПоставки;
			Комплектовщик=пКомплектовщик;
			ВводНаОсновании(ТекущийДокПоставки);
			старТекущийДокПоставки=ТекущийДокПоставки;
//			Форма.кнМеню.Заголовок("Товар");
		//	кнМеню();
		ИначеЕсли Команда="Открыть" Тогда
//			ТекущийСлой=слТаблицы;
//			Форма.кнМеню.Заголовок("Товар");
//			Форма.ИспользоватьСлой(ТекущийСлой,2);
//			ПередатьФокус = "тпКнопка_"; 
//			Форма.Закрыть(0);
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры



//{Вывод Инфо
Процедура ВыводТовара(пСтрока)
	Перем текстЗаголовка,пТовар;
	Перем пСрокПред,пСрокТек;
	
	Если Таб.КоличествоСтрок()>0 Тогда
		пТовар=Таб.ПолучитьЗначение(пСтрока,"Товар");
		текстЗаголовка=Строка(пСтрока)+"."+"("+пТовар.Код+")"+пТовар.Наименование; 
		Форма.тТовар.Заголовок(текстЗаголовка);
		
//		пСрокПред=ПолучитьСрокРеализации(пТовар,ДокументОснование.Клиент);
		пСрокТек=Таб.ПолучитьЗначение(пСтрока,"СрокРеализ");

		Если пТовар.СрокГодн = 0 Тогда пСрокПред = "???";
		ИначеЕсли пТовар.ДопустСрокГодн = 0 Тогда пСрокПред = ДокументОснование.ОснСрокПоставки + пТовар.СрокГодн;
		Иначе пСрокПред = ДокументОснование.ОснСрокПоставки + пТовар.ДопустСрокГодн;
		КонецЕсли;
		
		текстЗаголовка="Код пост./Пред. срок/Тек. срок: "+
			СокрЛП(Строка(?(ПустоеЗначение(пТовар.КодПоставщика)=0,пТовар.КодПоставщика,"...........")))+
			" / "+СокрЛП(Строка(пСрокПред))+
			" / "+СокрЛП(Строка(пСрокТек));

		Если пСрокПред>пСрокТек Тогда
			Форма.тАртикул.Цвет(255,0,0);
		Иначе
			Форма.тАртикул.Цвет(0,0,0);
		КонецЕсли;
		
		Форма.тАртикул.Заголовок(текстЗаголовка);
		
		пКоличество=Таб.ПолучитьЗначение(пСтрока,"КоличествоНеПодвержденое");
		л_КоличествоФакт=Таб.ПолучитьЗначение(пСтрока,"Количество");
		пЕденица=пТовар.БазоваяЕдиницаИзмерения;
		текстКоличество="Кол: "+Строка(л_КоличествоФакт)+" из "+Строка(пКоличество)+" "+пЕденица;
		Форма.тКоличество.Заголовок(текстКоличество);

	Иначе
		Форма.тТовар.Заголовок("Пусто");
		Форма.тАртикул.Заголовок("Пусто");
		Форма.тКоличество.Заголовок("Пусто");
	КонецЕсли;
КонецПроцедуры
Процедура ВыводКлиента(док)
	Перем текстЗаголовка;
	
	текстЗаголовка=Строка(док.ДатаПрихода)+". "+док.Клиент.Наименование;
	Форма.тКлиент.Заголовок(текстЗаголовка);
КонецПроцедуры

Функция ПолучениеКоличества(пТовар)
	Перем кол;
	
	ИТ=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос=СоздатьОбъект("ODBCRecordSet");
	
	ТекстЗапроса="SELECT $ПрихНаклМобилСтроки.Товар [Товар $Справочник.Номенклатура]
//	|	, NullIf($ПрихНаклМобилСтроки.СрокРеализ, '17530101') СрокРеализ
	|	, Sum($ПрихНаклМобилСтроки.Количество) СуммаКоличество
	|FROM $Документ.ПрихНаклМобил AS ПрихНаклМобил
	|	LEFT OUTER JOIN $ДокументСтроки.ПрихНаклМобил AS ПрихНаклМобилСтроки ON ПрихНаклМобил.IDDOC = ПрихНаклМобилСтроки.IDDOC
	|WHERE ($ПрихНаклМобил.ДокументОснование = $ВидДокумента36.ОжидаемаяПоставка + :Док)
	|GROUP BY $ПрихНаклМобилСтроки.Товар
	|";	
	
	
	Запрос.УстановитьТекстовыйПараметр("Док",ДокументОснование);
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,ИТ);
	ИТ.ДобавитьИндекс("иТовар","Товар");
	//ИТ.Показать();
//	СписокЗнач = СоздатьОбъект("СписокЗначений");
//	СписокЗнач.ДобавитьЗначение(Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"Товар"));
//	СписокЗнач.ДобавитьЗначение(Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"СрокРеализ"));
	
	ИТ.ВыбратьСтроки();
	Если ИТ.НайтиСтроку("иТовар",пТовар,,1)>0 Тогда
		кол=ИТ.СуммаКоличество;
	КонецЕсли;
	
	Возврат кол;
КонецФункции
Процедура ВыводИнфо()
//	Форма.тИнфо.Заголовок(Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"КоличествоНеПодвержденое"));
//	Форма.тИнфо1.Заголовок(Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"Количество"));		
//	Форма.тИнфо2.Заголовок(ПолучениеКоличества(Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"Товар")));
КонецПроцедуры
//}Вывод Инфо

//{ПоискПоШтрихкоду
Функция ПоискВТабличнойЧасти(пТовар="")
Перем номСтр;
	номСтр=0;
	Таб.ВыбратьСтроки();
	Пока Таб.ПолучитьСтроку() = 1 Цикл
		номСтр=номСтр+1;
		Если Таб.Товар=пТовар Тогда
			Возврат(номСтр);
		КонецЕсли;
	КонецЦикла;
	Возврат(0);
КонецФункции 
Функция ПоискВТабличнойЧасти1(пШтрихкод="")
Перем номСтр;
	номСтр=0;
	Таб.ВыбратьСтроки();
	Пока Таб.ПолучитьСтроку() = 1 Цикл
		номСтр=номСтр+1;
		Если СокрЛП(пШтрихкод)=СокрЛП(Таб.ШтрихКод) Тогда
			Возврат(номСтр);
		КонецЕсли;
	КонецЦикла;
	Возврат(0);
КонецФункции 

//Функция ПоискВСправочнике1(пШтрихкод="")//не включая подчиненые
//	спрТовар = СоздатьОбъект("Справочник.Номенклатура");
//	ИмяРекв = "Штрихкод"; 
//	ФлагГлобПоиска = 1; 
//	Если спрТовар.НайтиПоРеквизиту(ИмяРекв,СокрЛП(пШтрихкод),ФлагГлобПоиска)=1 Тогда
//		Возврат(спрТовар.ТекущийЭлемент());
//	КонецЕсли;
//	Возврат(ПолучитьПустоеЗначение(спрТовар));
//КонецФункции 
//Функция ПоискВСправочнике3(пШтрихкод="")//включая подчиненые
//	спрТовар = СоздатьОбъект("Справочник.Номенклатура");
//	спрПодч=СоздатьОбъект("Справочник.ШтрихКоды");
//	ИмяРекв = "Штрихкод";
//	спрТовар.ВыбратьЭлементы();
//    Пока спрТовар.ПолучитьЭлемент()=1 Цикл     
//        Если спрТовар.ЭтоГруппа()=1  Тогда
//            продолжить;//группы не имеют подчиненных элементов
//		КонецЕсли;
//		//сначало ищем в товаре
//		Если спрТовар.ШтрихКод=СокрЛП(пШтрихкод) Тогда
//			Возврат(спрТовар.ТекущийЭлемент());
//		КонецЕсли;
//		//потом ищем в подчиненом справочнике
//        спрПодч.ИспользоватьВладельца(спрТовар.ТекущийЭлемент());//будем перебирать только 
//        спрПодч.ВыбратьЭлементы(); //перебираем только подчиненные конкретному владельцу
//		Пока спрПодч.ПолучитьЭлемент()=1 Цикл
//			Если спрПодч.ШтрихКод=СокрЛП(пШтрихкод) Тогда
//				Возврат(спрТовар.ТекущийЭлемент());
//			КонецЕсли;
//		КонецЦикла;
//
//    КонецЦикла; 
//	// ничего не найдено
//	Возврат(ПолучитьПустоеЗначение(спрТовар));
//КонецФункции 
//Функция ПоискВСправочнике4(пШтрихкод="")//включая подчиненые
//	спрТовар = СоздатьОбъект("Справочник.Номенклатура");
//	спрПодч=СоздатьОбъект("Справочник.ШтрихКоды");
//	ИмяРекв = "Штрихкод";
//	спрТовар.ВыбратьЭлементы();
//    Пока спрТовар.ПолучитьЭлемент()=1 Цикл     
//        Если спрТовар.ЭтоГруппа()=1  Тогда
//            продолжить;//группы не имеют подчиненных элементов
//		КонецЕсли;
//		//сначало ищем в товаре
//		Если спрТовар.ШтрихКод=СокрЛП(пШтрихкод) Тогда
//			Возврат(спрТовар.ТекущийЭлемент());
//		КонецЕсли;
//		//потом ищем в подчиненом справочнике
//        спрПодч.ИспользоватьВладельца(спрТовар.ТекущийЭлемент());//будем перебирать только 
//        спрПодч.ВыбратьЭлементы(); //перебираем только подчиненные конкретному владельцу
//		Пока спрПодч.ПолучитьЭлемент()=1 Цикл
//			Если спрПодч.ШтрихКод=СокрЛП(пШтрихкод) Тогда
//				Возврат(спрТовар.ТекущийЭлемент());
//			КонецЕсли;
//		КонецЦикла;
//
//    КонецЦикла; 
//	// ничего не найдено
//	Возврат(ПолучитьПустоеЗначение(спрТовар));
//КонецФункции 

Функция ПоискВесовогоКода(п_Код)

	ТекстЗапроса="SELECT Номенклатура.ID [Ссылка $Справочник.Номенклатура]
		|FROM $Справочник.Номенклатура AS Номенклатура With (NOLOCK)
		|WHERE ($Номенклатура.ВесовойКод = :пКод)
		|";
	ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");
	ЗапросСКЛ.УстановитьТекстовыйПараметр("пКод",п_Код);
	л_КодТовара = ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	
	Возврат л_КодТовара;
КонецФункции // ПоискВесовогоКода
Функция ПоискВесовогоКодаSQL(п_Код)

	л_КодТовара="";
	
	ТекстЗапроса="SELECT  ID [Товар $Справочник.Номенклатура]
		|FROM RTPOS_CA.dbo.foodlv_items
		|WHERE (GLID = :пКод)
		|";
	ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");
	ЗапросСКЛ.УстановитьТекстовыйПараметр("пКод",п_Код);
	л_КодТовара = ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);
	
	Возврат л_КодТовара;
КонецФункции // ПоискВесовогоКода
Функция ПоискВСправочнике(пШтрихкод="")//включая подчиненые через выбор элементов
	Перем ИмяРекв,ПрефКода,ШтрихКодДляПоиска;

	//если в строке штрихкода спереди идут 0 (ставятся, если вес меньше 1 кг)
	Если Лев(Строка(пШтрихКод),2)="02" Тогда
		позСтр=Найти(пШтрихКод,"2"); //если весовой товар
		Если позСтр>0 Тогда
			длинаСтр=СтрДлина(пШтрихКод);
			БезНулей=Прав(пШтрихКод,длинаСтр-позСтр+1);
			пШтрихКод=БезНулей;			
		КонецЕсли;
	КонецЕсли;
	
	ПрефКода=Лев(Строка(пШтрихКод),2); //поиск весового товара

	Вес=0;
		//{ Обработка весового товара 
	Если (ПрефКода="29") ИЛИ (ПрефКода="28") ИЛИ (ПрефКода="23") ИЛИ (ПрефКода="24")  ИЛИ (ПрефКода="25")  Тогда

		Сообщить("Штрихкод:"+пШтрихКод);
		л_Товар=ПоискВесовогоКода(Число(Сред(пШтрихКод,3,6)));
		Сообщить("Весовой код:"+Сред(пШтрихКод,3,6));
		Сообщить(л_Товар);
		Если ПустоеЗначение(л_Товар)=0 Тогда
			Если л_Товар.Выбран()=1 Тогда
				Возврат л_Товар;
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли (ПрефКода="21") ИЛИ (ПрефКода="22")ИЛИ (ПрефКода="26") Тогда
		Сообщить("Штрихкод:"+пШтрихКод);
		л_Товар=ПоискВесовогоКодаSQL(Число(Сред(пШтрихКод,3,6)));
		Сообщить("Весовой код:"+Сред(пШтрихКод,3,6));
		Сообщить(л_Товар);
		Если ПустоеЗначение(л_Товар)=0 Тогда
			Если л_Товар.Выбран()=1 Тогда
				Возврат л_Товар;
			КонецЕсли;
		КонецЕсли;	
//} Обработка весового товара		
	Иначе
		ШтрихКодДляПоиска=пШтрихКод;
	КонецЕсли;

	
	спрТовар = СоздатьОбъект("Справочник.Номенклатура");
	спрПодч=СоздатьОбъект("Справочник.ШтрихКоды");
	
	ИмяРекв = "Штрихкод";
	ФлагГлобПоиска = 1; 
	Если спрТовар.НайтиПоРеквизиту(ИмяРекв,СокрЛП(ШтрихКодДляПоиска),ФлагГлобПоиска)=1 Тогда
		Возврат(спрТовар.ТекущийЭлемент());
 	ИначеЕсли спрПодч.НайтиПоКоду(СокрЛП(ШтрихКодДляПоиска))=1 Тогда
 		Возврат(спрПодч.ТекущийЭлемент().Владелец);
 	КонецЕсли;	
	// ничего не найдено
	Возврат(ПолучитьПустоеЗначение(спрТовар));
КонецФункции 


//Функция ПоискВСправочнике(пШтрихкод="")//включая подчиненые через выбор элементов
//	Перем ИмяРекв,ПрефКода,ШтрихКодДляПоиска;
//
//	ПрефКода=Лев(Строка(пШтрихКод),2); //поиск весового товара
//	Вес=0;
//	Если (ПрефКода="29") ИЛИ (ПрефКода="28") ИЛИ (ПрефКода="23") ИЛИ (ПрефКода="24")  ИЛИ (ПрефКода="25") Тогда
//		//{ Обработка весового товара 
//		//формируем строку со штрих-кодом для поиска
//		//берем первые 8 чисел и добавляем нулями - такой штрих-код хранится у нас в базе данных
//		ШтрихКодДляПоиска=глДополнитьСтрокуП(Лев(пШтрихКод,7),"0",13);
//		
//		ЧислоВес=Число(Сред(пШтрихКод,8,5));
//		Если ЧислоВес<=99 Тогда
//			Делитель=10;
//		ИначеЕсли ЧислоВес<=999 Тогда
//			Делитель=100;
//		Иначе
//			Делитель=1000;
//		КонецЕсли;
//		Вес = ЧислоВес/Делитель;
//		//} Обработка весового товара
//	Иначе
//		ШтрихКодДляПоиска=пШтрихКод;
//	КонецЕсли;
//
//	
//	спрТовар = СоздатьОбъект("Справочник.Номенклатура");
//	спрПодч=СоздатьОбъект("Справочник.ШтрихКоды");
//	
//	ИмяРекв = "Штрихкод";
//	ФлагГлобПоиска = 1; 
//	Если спрТовар.НайтиПоРеквизиту(ИмяРекв,СокрЛП(ШтрихКодДляПоиска),ФлагГлобПоиска)=1 Тогда
//		Возврат(спрТовар.ТекущийЭлемент());
// 	ИначеЕсли спрПодч.НайтиПоКоду(СокрЛП(ШтрихКодДляПоиска))=1 Тогда
// 		Возврат(спрПодч.ТекущийЭлемент().Владелец);
// 	КонецЕсли;	
//	// ничего не найдено
//	Возврат(ПолучитьПустоеЗначение(спрТовар));
//КонецФункции 

Функция ПоискПоШтрихкоду(пШтрихкод="")
	Если ПустоеЗначение(пШтрихкод)=1 Тогда
//		Предупреждение("Штрих кода нет в справочнике",0);
		Возврат(0);
	КонецЕсли;

	л_длнстр=СтрДлина(пШтрихкод);
	Если л_длнстр>20 Тогда //128 битный код GS1
		л_сз=ЗадачаНаВнешнююКоманду(пШтрихкод,"Расшифровать");
		Если ПустоеЗначение(л_сз)=0 Тогда
			п_Штрихкод=л_сз.Получить("EAN");
			л_Партия=л_сз.Получить("Партия");
			л_Срок=л_сз.Получить("Срок");
			л_Вес=л_сз.Получить("Вес");
		КонецЕсли;		
	КонецЕсли; 
	
	
	спрТовар=ПоискВСправочнике(пШтрихкод);
	Если ПустоеЗначение(спрТовар)=0 Тогда
		пНомерСтроки=ПоискВТабличнойЧасти(спрТовар);
		Если пНомерСтроки<>0 Тогда
			Таб_ТекущаяСтрока=пНомерСтроки;
			Таб_ТекущаяКолонка=4;
			ПВ_ВывестиЗначение();
			Возврат(1);
		КонецЕсли;
	КонецЕсли;
	Предупреждение("Товара нет в таблице",3);
	
//	спрТовар=ПоискВСправочнике(пШтрихкод);	
	Если ПустоеЗначение(спрТовар)=0 Тогда
		Если Вопрос("Добавить товар"+" "+спрТовар.Наименование+" ?",4,0)=6 Тогда
			//добавление товара в таблицу.

			НоваяСтрока();
			ШтрихКод = спрТовар.ШтрихКод;
			//ТовКод = ДокОснование.ТовКод;
			Товар = спрТовар;
			КоличествоНеПодвержденое=0;
			Количество = 0;
			//ПоСпецЗаказу = ДокОснование.ПоСпецЗаказу;
			//ПоСчету = ДокОснование.ПоСчету;
			//ТовСертификат = ДокОснование.ПланВремяДоставки;
			Цена = 0;
			ЦенаСоСкидкой = 0;
			//форма.Записать();
			Возврат(1);
		КонецЕсли;
		Возврат(0);
	КонецЕсли;
	
	Предупреждение("Штрих кода нет в справочнике",3);
	Возврат(0);
	
КонецФункции
//}ПоискПоШтрихкоду

//{ПВ
Процедура ПВ_Инициализация()
	Сервис = СоздатьОбъект("Сервис");
	МойШрифт = Сервис.СоздатьШрифт("Arial", 24, 8,,,,);
	
	ФормаРасш = СоздатьОбъект("РасширениеФормы");
	ФормаРасш.УстановитьФорму(Форма);
	ФормаРасш.ПолучитьАтрибут("ПанельВвода").Шрифт = МойШрифт;
	ФормаРасш.ПолучитьАтрибут("ПанельВвода").ЦветШрифта = 255;
	ФормаРасш.ПолучитьАтрибут("ПанельВвода").ЦветФона = ПолучитьЦвет(255,255,185);
//	Сервис.УдалитьШрифт(МойШрифт);
	Форма.тКолонка.Маска();
	

	Сервис = СоздатьОбъект("Сервис");
	МойШрифт1 = Сервис.СоздатьШрифт("Arial", 32, 8,,,,);
	
	ФормаРасш1 = СоздатьОбъект("РасширениеФормы");
	ФормаРасш1.УстановитьФорму(Форма);
	ФормаРасш1.ПолучитьАтрибут("пвШтрихкод").Шрифт = МойШрифт1;
	ФормаРасш1.ПолучитьАтрибут("пвШтрихкод").ЦветШрифта = ПолучитьЦвет(0,0,0);
	ФормаРасш1.ПолучитьАтрибут("пвШтрихкод").ЦветФона = ПолучитьЦвет(255,255,255);
	

	
КонецПроцедуры	

Процедура ПВ_ВывестиЗначение()
	Перем колТип;
	Перем колЗаголовок;
	Перем колДлина;
	Перем колТочность;
	Перем колШирина;
	Перем колФормат;
	Перем колПоложение;
	
	Если Таб_ТекущаяКолонка=1 Тогда
		Форма.ПанельВвода.Доступность(0);
	Иначе
		Форма.ПанельВвода.Доступность(1);
	КонецЕсли;

	
	
	Таб.ПолучитьПараметрыКолонки(Таб_ТекущаяКолонка,колТип,колДлина,колТочность,колЗаголовок,колШирина,колФормат,колПоложение);
		
	Форма.тКолонка.Заголовок(колЗаголовок);

	
	
	Если Таб.ПолучитьПараметрыКолонки(Таб_ТекущаяКолонка)="Количество" Тогда
		ВыводИнфо();
		пТовар=Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"Товар");
		пЕдиница=пТовар.БазоваяЕдиницаИзмерения;
		Форма.тКолонка.Заголовок(колЗаголовок+"("+пЕдиница+")");
	КонецЕсли;

	Если Таб.ПолучитьПараметрыКолонки(Таб_ТекущаяКолонка)="ПроблемаНесоответствияМаркировкиLV" Тогда
		пТовар=Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"Товар");
		видBALT = ?(пТовар.ВидПредпродажнойПодготовки = Перечисление.ВидыПредпродажнойПодготовки.Вид1, "BALT", "" );
		видLV = ?(пТовар.ВидПредпродажнойПодготовки = Перечисление.ВидыПредпродажнойПодготовки.Вид2, "LV", "" );
		
		Форма.тКолонка.Заголовок(колЗаголовок+"("+видBALT+","+видLV+")");
	КонецЕсли;
	
	Если Таб.ПолучитьПараметрыКолонки(Таб_ТекущаяКолонка)="Количество" Тогда
		Форма.ПанельВвода.НазначитьТип("Строка",10,3);
	Иначе
		Форма.ПанельВвода.НазначитьТип(колТип,колДлина,колТочность);
	КонецЕсли;
	
	//Форма.ПанельВвода.УстановитьТип(Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,Таб_ТекущаяКолонка));

	ПенельВвода=ПолучитьПустоеЗначение(ПенельВвода);
	ПанельВвода=Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,Таб_ТекущаяКолонка);
	ВыводТовара(Таб_ТекущаяСтрока);
	
	Форма.Обновить();
	ПередатьФокус = "ПанельВвода";
	Форма.Закрыть(0);
	
КонецПроцедуры

Процедура ПВ_ВводЗначения()
	
//	WshShell = СоздатьОбъект("WScript.Shell") ;
	//WshShell.SendKeys("{^}");
//	WshShell.SendKeys("^{F4}");
	 //Сервис = СоздатьОбъект("Сервис");
	 //Сервис.SendKeys("%");
   	//Сервис.SendKeys("{F4}");
	текстКолонки=Таб.ПолучитьПараметрыКолонки(Таб_ТекущаяКолонка);
	Если (текстКолонки="СрокРеализ")
	ИЛИ(текстКолонки="Количество") Тогда
		счетНажатий=0;	
	Иначе
	   	счетНажатий=счетНажатий+1;
	   	Если счетНажатий=1 Тогда
	   		нажатьКлавишу="Ф4";
	   	ИначеЕсли счетНажатий=2 Тогда
	   		счетНажатий=0;
	   	КонецЕсли;
	   	ПередатьФокус = "ПанельВвода"; 
		Форма.Закрыть(0);
	КонецЕсли;	
	
	//ввод срока годности
	Таб.ПолучитьСтрокуПоНомеру(Таб_ТекущаяСтрока);
	
	Если Таб.ПолучитьПараметрыКолонки(Таб_ТекущаяКолонка)="СрокРеализ" Тогда
		Если (Таб.СрокРеализ<>ПанельВвода)
			И(Таб.Количество>0)И(ПустоеЗначение(Таб.СрокРеализ)=0) Тогда
			//сроки не совпадают, значит введено изменение
			Таб.НоваяСтрока();
			Таб.ШтрихКод = Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"ШтрихКод");
//			Таб.ТовКод = Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"ТовКод");
			Таб.Товар = Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"Товар");

	//		Таб.ПроблемаНеСоответствиеСпецификации=Перечисление.Булево.Нет;
			Таб.ПредПродажПодг=Перечисление.Булево.Нет;
			Таб.ПроблемаНесоответствияМаркировкиLV=Перечисление.Булево.Нет;
	//		Таб.ПроблемаНесоответствияМаркировкиLT=Перечисление.Булево.Нет;
	//		Таб.ПроблемаНесоответствияМаркировкиEE=Перечисление.Булево.Нет;
			Таб.ПроблемаОтсутствиеШтрихКода=Перечисление.Булево.Нет;
	//		Таб.ПроблемаДопустСрокаРеализации=Перечисление.Булево.Нет;
	
			Таб_ТекущаяСтрока=Таб.НомерСтроки;
		КонецЕсли;
	КонецЕсли;
	//
	Если (ТекущийСлой=слТовара)
			И (Таб_ТекущаяКолонка=5)			
	Тогда
		Если флПлюс="Плюс" Тогда
			л_КолПВ=Число(ПанельВвода);
			л_КолТаб=Число(Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"Количество"));
			л_КолСумма=л_КолПВ+л_КолТаб;
			ПанельВвода=л_КолСумма;
			флПлюс="";	
		ИначеЕсли флПлюс="Минус" Тогда	
			л_КолПВ=Число(ПанельВвода);
			л_КолТаб=Число(Таб.ПолучитьЗначение(Таб_ТекущаяСтрока,"Количество"));
			л_КолСумма=л_КолТаб-л_КолПВ;
			ПанельВвода=л_КолСумма;
			флПлюс="";	
		КонецЕсли;
	КонецЕсли;
	

	Таб.УстановитьЗначение(Таб_ТекущаяСтрока,Таб_ТекущаяКолонка,ПанельВвода);
	ЗагрузитьТабличнуюЧасть(Таб);
//	кнВперед();
	ВыводТовара(Таб_ТекущаяСтрока);
	ПередатьФокус = "ПанельВвода"; 
//	нажатьКлавишу="Ф4";
	Форма.Закрыть(0);
//	WshShell = СоздатьОбъект("WScript.Shell") ;
//	WshShell.SendKeys("{F4}");
	 //Сервис = СоздатьОбъект("Сервис");
  	// Сервис.SendKeys("^");
   	//Сервис.SendKeys("{F4}");
//   	WshShell = СоздатьОбъект("WScript.Shell") ;
	//WshShell.SendKeys("{^}");
//	WshShell.SendKeys("^{F4}");

КонецПроцедуры	
//}ПВ

//{Кнопки
Функция ПропускКолонки(Таб_ТекущаяКолонка)
	Перем текстКолонки;
	
	текстКолонки=Таб.ПолучитьПараметрыКолонки(Таб_ТекущаяКолонка);
//	Если Таб_ТекущаяКолонка=3 Тогда
//	ИначеЕсли Таб_ТекущаяКолонка=2 Тогда
//	ИначеЕсли Таб_ТекущаяКолонка=5 Тогда	
	Если текстКолонки="ШтрихКод" Тогда
	ИначеЕсли текстКолонки="Товар" Тогда
	ИначеЕсли текстКолонки="КоличествоНеПодвержденое" Тогда	
	ИначеЕсли текстКолонки="ПроблемаНесоответствияМаркировкиLT" Тогда
	ИначеЕсли текстКолонки="ПроблемаНесоответствияМаркировкиEE" Тогда		
	Иначе
		Возврат(0);
	КонецЕсли;
	Возврат(1);
КонецФункции

Процедура кнСбросШтрихкода()
	пвШтрихкод="";
	ПередатьФокус = "пвШтрихкод"; 
	Форма.Закрыть(0);
КонецПроцедуры
Процедура кнНазад()
	Перем фПропуск;


	Таб_ТекущаяКолонка=Таб_ТекущаяКолонка-1;
	Если Таб_ТекущаяКолонка<4 Тогда
		Таб_ТекущаяКолонка=4;
	КонецЕсли;

	фПропуск=1;
	Пока фПропуск=1 Цикл
		Если ПропускКолонки(Таб_ТекущаяКолонка)=1 Тогда
			Таб_ТекущаяКолонка=Таб_ТекущаяКолонка-1;
			Если Таб_ТекущаяКолонка<4 Тогда
				Таб_ТекущаяКолонка=4;
				фПропуск=0;
				Прервать;
			КонецЕсли;
		Иначе
			фПропуск=0;
		КонецЕсли;
		
	КонецЦикла;
	
	
	ПВ_ВывестиЗначение();
	
	
	
КонецПроцедуры	
Процедура кнВперед()
	Перем фПропуск;
	//ПВ_ВывестиЗначение();
	Таб_ТекущаяКолонка=Таб_ТекущаяКолонка+1;
	Если Таб_ТекущаяКолонка>Таб.КоличествоКолонок() Тогда
		Таб_ТекущаяКолонка=Таб.КоличествоКолонок();
	КонецЕсли;

	фПропуск=1;
	Пока фПропуск=1 Цикл
		Если ПропускКолонки(Таб_ТекущаяКолонка)=1 Тогда
			фПропуск=1;
			Таб_ТекущаяКолонка=Таб_ТекущаяКолонка+1;
			Если Таб_ТекущаяКолонка>Таб.КоличествоКолонок() Тогда
				Таб_ТекущаяКолонка=Таб.КоличествоКолонок();
				фПропуск=0;
				Прервать;
			КонецЕсли;
		Иначе
			фПропуск=0;
		КонецЕсли;
	КонецЦикла;	
	ПВ_ВывестиЗначение();
КонецПроцедуры

Процедура ЗаполнитьСтрокуТекущейИТ()
	//ИТтекущая=СоздатьОбъект("ИндексированнаяТаблица");
	//ИТтекущая.Загрузить(Таб,,"СрокРеализ,Количество,ПроблемаНеСоответствиеСпецификации,ПроблемаНесоответствияМаркировкиLV,ПроблемаОтсутствиеШтрихКода, ПроблемаДопустСрокаРеализации");
	//ИТтекущая.УдалитьСтроки();
	//ИТтекущая.Показать();
	//ИТтекущая.НоваяСтрока();
	//ИТтекущая.ЗаполнитьСтроку(,Таб,Таб_ТекущаяСтрока,Таб_ТекущаяКолонка);
	//ИТтекущая.Показать();
	Таб.ПолучитьСтрокуПоНомеру(Таб_ТекущаяСтрока);
	Если ПустоеЗначение(Таб.СрокРеализ)=1 Тогда
//		Таб.ПроблемаНеСоответствиеСпецификации=Перечисление.Булево.Нет;
		Таб.ПредПродажПодг=Перечисление.Булево.Нет;
		Таб.ПроблемаНесоответствияМаркировкиLV=Перечисление.Булево.Нет;
//		Таб.ПроблемаНесоответствияМаркировкиLT=Перечисление.Булево.Нет;
//		Таб.ПроблемаНесоответствияМаркировкиEE=Перечисление.Булево.Нет;
		Таб.ПроблемаОтсутствиеШтрихКода=Перечисление.Булево.Нет;
//		Таб.ПроблемаДопустСрокаРеализации=Перечисление.Булево.Нет;
	КонецЕсли;


КонецПроцедуры

Процедура кнТовар()
	
	ТекущийСлой=слТовара;
	Форма.ИспользоватьСлой(ТекущийСлой,2);
	ЗаполнитьСтрокуТекущейИТ();
	ПВ_ВывестиЗначение();
КонецПроцедуры
Процедура кнТаблица()
	ТекущийСлой=слТаблицы;
	Форма.ИспользоватьСлой(ТекущийСлой,2);
	ТП.ТекущаяСтрока=Таб_ТекущаяСтрока;
	ТП_Обновить();
	Записать();
	ПередатьФокус = "пвШтрихкод";
	Форма.Закрыть(0);
КонецПроцедуры

//Процедура кнМеню()
//	
//	Если Форма.кнМеню.Заголовок()="Таблица" Тогда
//		ТекущийСлой=слТаблицы;
//		Форма.кнМеню.Заголовок("Товар");
//		Форма.ИспользоватьСлой(ТекущийСлой,2);
//		ТП.ТекущаяСтрока=Таб_ТекущаяСтрока;
//		ТП_Обновить();
//	ИначеЕсли  Форма.кнМеню.Заголовок()="Товар" Тогда	
//		ТекущийСлой=слТовара;
//		Форма.кнМеню.Заголовок("Таблица");
//		Форма.ИспользоватьСлой(ТекущийСлой,2);
//		ПВ_ВывестиЗначение();
//	КонецЕсли;
//	
//КонецПроцедуры

Процедура кнСканирование()
	ТекущийСлой=слСканирования;
	//Активизировать(пвШтрихкод,1);
	Форма.ИспользоватьСлой(ТекущийСлой,2);
	кнСбросШтрихкода();
	//{Установить Фокус "пвШтрихкод"
	ПередатьФокус = "пвШтрихкод"; 
	Форма.Закрыть(0); 
	//}Установить Фокус
КонецПроцедуры

Процедура кнПриход()
	ТекущийСлой=слПрихода;
	Форма.ИспользоватьСлой(ТекущийСлой,2);
//	Форма.кнМеню.Заголовок("Таблица");
//	ВыводКлиента(ДокументОснование);
	//ПередатьФокус = "тпДок_"; 
//	Форма.Закрыть(0);
КонецПроцедуры

//======================================================================
Процедура кнНазадВФорму()

		ТекущийСлой=слТаблицы;
		Форма.ИспользоватьСлой(ТекущийСлой,2);
//		Форма.кнМеню.Заголовок("Товар");
//		ПередатьФокус = "тпКнопка_"; 
		ПередатьФокус = "пвШтрихкод";
		Форма.Закрыть(0);	
	
	
КонецПроцедуры // 

//======================================================================
Процедура кнЗакрыть()
	Форма.Закрыть(0);
КонецПроцедуры // гл
Процедура кнОтложить()
//	АвтоВремяТекущее();
//	Записать();
	Форма.Закрыть(0);
КонецПроцедуры 

Процедура кнВводШтрихкода()
	Перем фПоиска;

	Если ТекущийСлой=слТаблицы Тогда
		фПоиска=ПоискПоШтрихкоду(СокрЛП(пвШтрихкод));
		Если фПоиска=1 Тогда
			ТекущийСлой=слТовара;
			Форма.ИспользоватьСлой(ТекущийСлой,2);
			Таб_ТекущаяКолонка=4;
			ЗаполнитьСтрокуТекущейИТ();	
			ПВ_ВывестиЗначение();
			пвШтрихкод="";
		Иначе
			ТекущийСлой=слТаблицы;
			Форма.ИспользоватьСлой(ТекущийСлой,2);
			кнСбросШтрихкода();
		КонецЕсли;		
	ИначеЕсли ТекущийСлой=слТовара Тогда
		Если Таб_ТекущаяКолонка=5 Тогда //колонка количества
			
			ПрефКода=Лев(Строка(пвШтрихкод),2); //поиск весового товара
			л_Вес=0;
			Если (ПрефКода="29") ИЛИ (ПрефКода="28") ИЛИ (ПрефКода="23") ИЛИ (ПрефКода="24")  ИЛИ (ПрефКода="25") Тогда
				//{ Обработка весового товара 
				//формируем строку со штрих-кодом для поиска
				//берем первые 8 чисел и добавляем нулями - такой штрих-код хранится у нас в базе данных
				ШтрихКодДляПоиска=глДополнитьСтрокуП(Лев(пвШтрихкод,7),"0",13);
				ЧислоВес=Число(Сред(пвШтрихкод,8,5));
				Если ЧислоВес<=99 Тогда
					Делитель=10;
				ИначеЕсли ЧислоВес<=999 Тогда
					Делитель=100;
				Иначе
					Делитель=1000;
				КонецЕсли;
				л_Вес = ЧислоВес/Делитель;

				
				ПанельВвода=л_Вес;
				пвШтрихкод="";
				ПередатьФокус = "ПанельВвода"; 
				Форма.Закрыть(0);	
				//} Обработка весового товара
			Иначе
				кнСбросШтрихкода();
			КонецЕсли;	

		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

//======================================================================
Процедура кнПлюс()
	
	Если ТекущийСлой=слТовара Тогда
		Если Таб_ТекущаяКолонка=5 Тогда //колонка количества
			флПлюс="Плюс";
			ПанельВвода=0;
		КонецЕсли;	
	КонецЕсли;
	ПередатьФокус = "ПанельВвода"; 
	Форма.Закрыть(0);				
	

КонецПроцедуры // кнПлюс
Процедура кнМинус()
	
	Если ТекущийСлой=слТовара Тогда
		Если Таб_ТекущаяКолонка=5 Тогда //колонка количества
			флПлюс="Минус";
			ПанельВвода=0;
		КонецЕсли;	
	КонецЕсли;
	ПередатьФокус = "ПанельВвода"; 
	Форма.Закрыть(0);				
	

КонецПроцедуры // кнПлюс

Процедура кнЗаписатьПровести()

	Если Вопрос("Закончить прием товара?",1,0)=2 Тогда
		Возврат;
	КонецЕсли;	

	АвтоВремяТекущее();
	Записать();
	Провести(1);
	Форма.Закрыть(0);
КонецПроцедуры // кнЗаписатьПровестикнЗаписатьПровести

//}Кнопки


//{ТП
Процедура ТП_совмещениеТЧ(ТП_ТекСтрока)
	СтрокаТЧ=Таб.ПолучитьЗначение(ТП_ТекСтрока,"НомерСтрокиДокумента");
	//ВыбратьСтроки();
	ПолучитьСтрокуПоНомеру(СтрокаТЧ);
КонецПроцедуры	
Процедура ТП_Обновить()

	ВыгрузитьТабличнуюЧасть(Таб,пСтолбцы);
	
	Таб.УстановитьПараметрыКолонки("НомерСтроки",,,,"Номер",,,);
	Таб.УстановитьПараметрыКолонки("ШтрихКод",,,,"Штрих Код",,,);
	Таб.УстановитьПараметрыКолонки("СрокРеализ",,,,"Срок реализации",,,);
	Таб.УстановитьПараметрыКолонки("Количество","Число",10,3,"Количество",,,);
//	Таб.УстановитьПараметрыКолонки("ПроблемаНеСоответствиеСпецификации",,,,"Проблема Спецификации",,,);
	Таб.УстановитьПараметрыКолонки("ПредПродажПодг",,,,"Треб.доп.обработка?",,,);
	Таб.УстановитьПараметрыКолонки("ПроблемаНесоответствияМаркировкиLV",,,,"Пробл. маркир.?",,,);
//	Таб.УстановитьПараметрыКолонки("ПроблемаНесоответствияМаркировкиLT",,,,"Проблема Маркировки LT",,,);
//	Таб.УстановитьПараметрыКолонки("ПроблемаНесоответствияМаркировкиEE",,,,"Проблема Маркировки ЕE",,,);
	Таб.УстановитьПараметрыКолонки("ПроблемаОтсутствиеШтрихКода",,,,"Проблема Штрих Кода",,,);
//	Таб.УстановитьПараметрыКолонки("ПроблемаДопустСрокаРеализации",,,,"Проблема Срока Реализ.",,,);
	
//	Таб.Сортировать("+НомерЕдиницыКомплекта");
	ТП.ОбновитьСтроки();
//	ТП.АвтоШирина();
	Форма.Обновить();
КонецПроцедуры


//------------------------------
Процедура тпКнопка_ПриВыводеСтроки(тп, ОформлениеСтроки, ДанныеСтроки, ТипРегиона)
	Если флСообщения=1 Тогда
		сообщить("ПриВыводеСтроки");
	КонецЕсли;
	
	Если ДанныеСтроки.Количество=ДанныеСтроки.КоличествоНеПодвержденое Тогда
		ОформлениеСтроки.ЦветФона = глПолучитьЦвет(0,255,0);
		//<ПолучитьЦвет(R,G,B)>
	КонецЕсли;
	Если ДанныеСтроки.Количество<>ДанныеСтроки.КоличествоНеПодвержденое Тогда
		ОформлениеСтроки.ЦветФона = глПолучитьЦвет(255,0,0);
		//<ПолучитьЦвет(R,G,B)>
	КонецЕсли;		
			//Параметры:
	//
	//ОформлениеСтроки - тип: ОформлениеСтроки. Объект для управления оформлением выводимой строки табличного поля. 
	//ДанныеСтроки - тип: ДанныеСтроки. Данные (коллекция значений полей) выводимой строки табличного поля. 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает при выводе (отображении) строки табличного поля.
	
КонецПроцедуры

Процедура тпКнопка_Выбор(тп, Стр, Колонка, ТипРегиона)
	Если флСообщения=1 Тогда
		сообщить("Выбор");
	КонецЕсли;

	Таб_ТекущаяСтрока=ТП.ТекущаяСтрока;
	Таб_ТекущаяКолонка=4;
	ВыводТовара(Таб_ТекущаяСтрока);
	ВыводИнфо();	
	ПередатьФокус = "кнТовар"; 
	Форма.Закрыть(0);
	
	//Параметры:
	//
	//Строка - тип: определяется поставищком данных. Значение, идентифицирующее строку ТП. 
	//Колонка - тип: КолонкаТабличногоПоля 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает при двойном клике на строке табличного поля, или нажатии клавиши Enter.
	
	//зн = тпСклады.ТекущиеДанные.Получить("Наименование").ТекущийЭлемент();
	//тпСклады.РедактироватьЗначение(1,Колонка,3,зн,0,0,"ВыбРеквизит","0x00000020"); 
	//Форма.ВыбРеквизит.НазначитьТип("Справочник.Склады");
	
КонецПроцедуры


Процедура тпКнопка_ПриАктивизацииСтроки(тп)
	Если флСообщения=1 Тогда 
		сообщить("ПриАктивизацииСтроки");
	КонецЕсли;
	
	Таб_ТекущаяСтрока=ТП.ТекущаяСтрока;
	Таб_ТекущаяКолонка=4;
	ВыводТовара(Таб_ТекущаяСтрока);	
	ВыводИнфо();

	
	//ОбновитьКартинки();
	
	//Описание: Возникает, когда любая строка становится текущей.
	
КонецПроцедуры


Процедура тпКнопка_ПриАктивизацииКолонки(тп)
	Если флСообщения=1 Тогда
		сообщить("ПриАктивизацииКолонки");
	КонецЕсли;
	// Описание: Возникает, когда любая колонка становится текущей.
	
КонецПроцедуры

Процедура тпКнопка_ПриАктивизацииЯчейки(тп)
	Если флСообщения=1 Тогда
		сообщить("ПриАктивизацииЯчейки");
	КонецЕсли;
	// Описание: Возникает, когда ячейка становится текущей. Порядок прохождения событий: ПриАктивизацииСтроки, ПриАктивизацииКолонки, ПриАктивизацииЯчейки.
	
КонецПроцедуры

Процедура тпКнопка_ПриВыбореЗаголовка(тп, Колонка)
	Если флСообщения=1 Тогда
		сообщить("ПриВыбореЗаголовка");
	КонецЕсли;
	//Параметры:
	//
	//Колонка - тип: КолонкаТабличногоПоля. Колонка, заголовок которой выбран. 
	//Описание: Возникает, когда пользователь выбирает мышью заголовок колонки.
	
КонецПроцедуры

Процедура тпКнопка_ПриКонтекстномМеню(тп, ТипРегиона, Колонка, Стр)
	Если флСообщения=1 Тогда
		сообщить("ПриКонтекстномМеню");
	КонецЕсли;
	//Параметры:
	//
	//ТипРегиона - тип: ТипыРегионовТП 
	// ТипыРегионовТП
	// Тип: Перечисление
	// 
	// Значения: 0 - регион не задан 
	// 1 - заголовок 
	// 2 - шапка 
	// 3 - строки (основная часть) 
	// 4 - подвал  
	//
	//Колонка - тип: КолонкаТабличногоПоля. Колонка табличного поля, на которой было вызвано контекстное меню. 
	//Строка - тип: определяется поставищком данных. Значение, идентифицирующее строку ТП. 
	//Описание: Возникает, когда необходимо отобразить контекстное меню.
	
	//тут делаем что надо
КонецПроцедуры

Процедура тпКнопка_ПриВыбореФлажка(тп, Стр, Колонка, ТипРегиона)
	Если флСообщения=1 Тогда
		сообщить("ПриВыбореФлажка");
	КонецЕсли;
	
	//Параметры:
	//
	//Строка - тип: определяется поставищком данных. Значение, идентифицирующее строку ТП. 
	//Колонка - тип: КолонкаТабличногоПоля 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает, когда пользователь изменяет значение флажка.
	
КонецПроцедуры

Процедура тпКнопка_НачалоПеретаскивания(тп, ДопустимыеДействия, Значение, Колонка, ТипРегиона, ТипЦели)
	Если флСообщения=1 Тогда
		сообщить("НачалоПеретаскивания");
	КонецЕсли;
	//
	//Параметры:
	//
	//ДопустимыеДействия - тип: Число. (Выход) Список допустимых действий перетаскивания. Список задается как сумма следующих значений:
	//
	//1 - копирование (Copy) 
	//2 - перетаскивание (Move) 
	//4 - связывание (Link) 
	//Значение по-умолчанию 1. Если необходимо разрешить другие действия, нужно изменить значение этого параметра на выходе из обработчика события. Если передать 0, т.е. не определить ни одного действия, Перетаскивание не начнется.
	//
	//Значение - тип: определяется поставщиком данных. (Вход) Значение, идентифицирующее строку табличного поля. (Выход) Значение, которое будет представлять перетаскиваемые данные.
	//
	//Колонка - тип: КолонкаТабличногоПоля
	//
	//ТипРегиона - тип: ТипыРегионовТП
	//
	//ТипЦели - тип: Число. (Выход) Определяет логическую область отображения перетаскиваемых данных в ТП.
	//
	//0 - не задано 
	//1 - ячейка 
	//2 - строка 
	//3 - колонка 
	//Это значение используется для определения области ТП, в которой не нужно формировать события проверки перетаскивания, в том случае когда ЭУ-приемником является то же ТП, что и источник.
	//
	//Описание: Возникает в ЭУ источнике данных, когда пользователь начинает перетаскивание (Drag&Drop).
	
КонецПроцедуры

Процедура тпКнопка_ОкончаниеПеретаскивания(тп, Действие, Значение, Колонка, ТипРегиона)
	Если флСообщения=1 Тогда
		сообщить("ОкончаниеПеретаскивания");
	КонецЕсли;
	//
	//Параметры:
	//
	//Действие - тип: Число. Действие - результат операции перетаскивания. Допустимые действия:
	//
	//0 - нет действия 
	//1 - копирование (Copy) 
	//2 - перетаскивание (Move) 
	//4 - связывание (Link) 
	//Значение - тип: Любой. Значение, представляющее перетаскиваемые данные. Это значение было задано в событии НачалоПеретаскивания|НачалоПеретаскивания. 
	//Колонка - тип: КолонкаТабличногоПоля 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает в ЭУ источнике данных, когда завершается операция перетаскивания (Drag&Drop).
	//
	//Обычная обработка: в случае операции 2 (перетаскивания или Move) нужно удалить перетаскиваемые данные. В параметре Действие ЭУ источник данных всегда получит одно из тех действий, которое он определил для себя в событии НачалоПеретаскивания / DragStart.
	//
	//Порядок прохождения событий: 
	//НачалоПеретаскивания|НачалоПеретаскивания - в источнике, 
	//ПроверкаПеретаскивания|ПроверкаПеретаскивания - в назначении, 
	//Перетаскивание|Перетаскивание - в назначении, 
	//ОкончаниеПеретаскивания - в источнике. 
КонецПроцедуры

Процедура тпКнопка_ПроверкаПеретаскивания(тп, Действие, Значение, СтрокаТП, КолонкаТП, ТипРегионаТП, ТипЦели)
	Если флСообщения=1 Тогда
		сообщить("ПроверкаПеретаскивания");
	КонецЕсли;
	//
	//Параметры:
	//
	//Действие - тип: Число. (Выход) Действие которое произойдет при совершении перетаскивания. По-умолчанию 0. Допустимые действия:
	//
	//0 - нет действия 
	//1 - копирование (Copy) 
	//2 - перетаскивание (Move) 
	//4 - связывание (Link) 
	//Значение - тип: Любой. Значение, представляющее перетаскиваемые данные. Это значение было задано в обработчике события НачалоПеретаскивания|НачалоПеретаскивания.
	//
	//СтрокаТП - тип: Любой. Значение представляющее строку табличного поля, в которую идет перетаскивание (находится под курсором). Обеспечивается поставщиком данных.
	//
	//
	//КолонкаТП - тип: КолонкаТабличногоПоля. Колонка табличного поля, в которую идет перетаскивание (находится под курсором). 
	//ТипРегионаТП - тип: ТипыРегионовТП. Тип региона, в который идет перетаскивание. 
	//ТипЦели - тип: Число. (Выход) Определяет логическую область приемника перетаскиваемых данных, которая подсвечивается рамкой. Значение по-умолчанию: если ЭУ источник данных - табличное поле, то значение, заданное в обработчике события НачалоПеретаскивания|НачалоПеретаскивания; если источник данных - некий другой ЭУ, то значение равно 0.
	//
	//0 - не задано 
	//1 - ячейка 
	//2 - строка 
	//3 - колонка 
	//Описание: Возникает в ЭУ назначения перетаскивания для определения действия, которое произойдет при совершении операции перетаскивания. (Drag&Drop)
	//
	//Главное назначение события - проверить возможность совершения операции перетаскивания и определить Действие. Событие возникает всякий раз, когда изменяется строка или колонка ТП. Если строка или колонка не определяются под курсором мыши, то значения соответствующих параметров будут равны пустому значению.
	
КонецПроцедуры

Процедура тпКнопка_Перетаскивание(тп, Действие, Значение, СтрокаТП, КолонкаТП, ТипРегионаТП)
	Если флСообщения=1 Тогда
		сообщить("Перетаскивание");
	КонецЕсли;
	//
	//Параметры:
	//
	//Действие - тип: Число. Действие, которое нужно выполнить для совершения перетаскивания. Равно значению параметра Действие на выходе из события ПроверкаПеретаскивания / DragCheck. Допустимые действия:
	//
	//1 - копирование (Copy) 
	//2 - перетаскивание (Move) 
	//4 - связывание (Link) 
	//Значение - тип: Любой. Значение, представляющее перетаскиваемые данные. Это значение было задано в обработчике события НачалоПеретаскивания|НачалоПеретаскивания.
	//
	//СтрокаТП - тип: Любой. Значение представляющее строку табличного поля, в которую идет перетаскивание (находится под курсором). Обеспечивается поставщиком данных.
	//
	//
	//КолонкаТП - тип: КолонкаТабличногоПоля. Колонка табличного поля, в которую идет перетаскивание (находится под курсором). 
	//ТипРегионаТП - тип: ТипыРегионовТП. Тип региона, в который идет перетаскивание. 
	//Описание: Возникает в ЭУ назначения, когда совершается операция перетаскивания (Drag&Drop).
	//
	//Если строка или колонка не определяются под курсором мыши, то значения соответствующих параметров будут равны пустому значению.
	
КонецПроцедуры

Процедура тпКнопка_ПриУничтожении(тп) 
	Если флСообщения=1 Тогда
		сообщить("ПриУничтожении");
	КонецЕсли;
	//Параметры: нет 
	//Описание: Событие вызывается при уничтожении контрола, с которым связано ТП, до уничтожения самого ТП. 
	
КонецПроцедуры

Процедура тпКнопка_ПриНачалеБыстрогоПоиска(тп, чТипБыстрогоПоиска, чФСО)
	Если флСообщения=1 Тогда
		сообщить("ПриНачалеБыстрогоПоиска");
	КонецЕсли;
	// 
	//Параметры: 
	//чТипБыстрогоПоиска, тип: Число 
	//Тип быстрого поиска: 
	//1 - текстовый быстрый поиск 
	//
	//чФСО, тип: Число 
	//Доступ: чтение и запись
	//
	//Флаг стандартной обработки. Возможные значения для установки: 
	//1 - быстрый поиск разрешен 
	//0 - быстрый поиск запрещен 
	//Значение по умолчанию: 1
	// 
	//Описание: Событие вызывается до инициализации окна быстрого поиска и позволяет управлять разрешением на его создание.
	// 
	
КонецПроцедуры

Процедура тпКнопка_ПриБыстромПоиске(тп, чТипБыстрогоПоиска, нДанные, чФСО)
	Если флСообщения=1 Тогда
		сообщить("ПриБыстромПоиске");
	КонецЕсли;
	// 
	//Параметры: 
	//чТипБыстрогоПоиска, тип: Число 
	//Тип быстрого поиска: 
	//1 - текстовый быстрый поиск 
	//
	//нДанные, тип: для текстового быстрого поиска - Строка 
	//Доступ: чтение и запись
	//
	//Данные, введенные в окне быстрого поиска
	//
	//
	//чФСО, тип: Число 
	//Флаг стандартной обработки. Возможные значения для установки: 
	//1 - быстрый поиск разрешен 
	//0 - быстрый поиск запрещен 
	//Значение по умолчанию: 1
	// 
	//Описание: Событие вызывается до выполнения системной процедуры быстрого поиска и позволяет организовать специальные алгоритмы поиска.
	//Возможна трансформация данных с последующей системной обработкой, а также полная замена системной обработки на собственную. 
	
КонецПроцедуры

Процедура тпКнопка_ПриОкончанииБыстрогоПоиска(тп, флРезультат, флПерепозиционировано)
	Если флСообщения=1 Тогда
		сообщить("ПриОкончанииБыстрогоПоиска");
	КонецЕсли;
	// 
	//Параметры: 
	//флРезультат, тип: Число 
	//Причина закрытия окна быстрого поиска. 
	//1 - закрытие клавишей ENTER 
	//0 - отмена быстрого поиска (любым способом) 
	//
	//флПерепозиционировано, тип: Число 
	//Флаг, отражающий факт перепозиционирования непосредственно перед закрытием окна БП 
	//1 - ТП было перепозиционировано 
	//0 - ТП не было перепозиционировано 
	// 
	//Описание: Событие вызывается после закрытия окна быстрого поиска.
	
	
КонецПроцедуры

Процедура тпКнопка_ПриПеремещенииКолонки(тп, Колонка, чСдвиг, чФСО)
	Если флСообщения=1 Тогда
		сообщить("ПриПеремещенииКолонки");
	КонецЕсли;
	// 
	//Параметры: Колонка, тип: КолонкаТабличногоПоля
	//
	//
	//чСдвиг, тип: Число 
	//Предлагаемый сдвиг колонки
	//
	//
	//чФСО, тип: Число 
	//Флаг стандартной обработки. Возможные значения для установки: 
	//1 - перемещение колонки разрешено 
	//0 - перемещение колонки запрещено 
	//Значение по умолчанию: 1
	// 
	//Описание: Событие вызывается при интерактивном перемещении колонки ТП непосредственно перед выполнением перемещения. 
	
КонецПроцедуры

Процедура тпКнопка_ПриИзмененииВидимостиКолонки(тп, Колонка, флВидимость, чФСО)
	Если флСообщения=1 Тогда
		сообщить("ПриИзмененииВидимостиКолонки");
	КонецЕсли;
	// 
	//Параметры: Колонка, тип: КолонкаТабличногоПоля
	//
	//
	//флВидимость, тип: Число 
	//Предлагаемое значение флага видимости колонки
	//
	//
	//чФСО, тип: Число 
	//Флаг стандартной обработки. Возможные значения для установки: 
	//1 - изменение видимости колонки разрешено 
	//0 - изменение видимости колонки запрещено 
	//Значение по умолчанию: 1
	// 
	//Описание: Событие вызывается при интерактивном изменении видимости колонки ТП непосредственно перед выполнением изменения видимости. 
	
КонецПроцедуры

Процедура тпКнопка_ПриИзмененииШириныКолонки(тп)
	Если флСообщения=1 Тогда
		сообщить("ПриИзмененииШириныКолонки");
	КонецЕсли;
	// 
	//Параметры: нет
	// 
	//Описание: Событие вызывается при интерактивном изменении ширины одной или нескольких колонок. 
	
КонецПроцедуры
//------------------------------
Процедура тпКнопка_ПриРедактированииЗначения(тп,Стр,Кол,Рег,_Знач)
	Если флСообщения=1 Тогда
		сообщить("ПриРедактированииЗначения");
	КонецЕсли;
	
	Таб.УстановитьЗначение(ТП.ТекущаяСтрока,ТП.ТекущаяКолонка.Имя,_Знач);
    
	ТП.ОбновитьСтроки();
	ТП_совмещениеТЧ(ТП.ТекущаяСтрока);
	
//	Если Кол.Имя="ЦенаИзКатегории" Тогда
//		Если (ДатаДок>=Константа.ДатаНачалаИспользованияПрайсовПоставщиков)
//		И (Номенклатура.ВидНоменклатуры<>Перечисление.ВидыНоменклатуры.Услуга) Тогда
//				
//			ВыбПоставщик=Номенклатура.Поставщик;
//			Если ПустоеЗначение(ВыбПоставщик)=1 Тогда
//				Предупреждение("Не указан поставщик в карточке товара!");
//				СтатусВозврата(0);
//			Иначе
//				Если ВвестиЧисло(БруттоЦена,"Введите брутто цену из каталога",17,2)=1 Тогда
//				Иначе
//					СтатусВозврата(0);
//					Возврат;
//				КонецЕсли;
//				БруттоЦена=_Знач;
//				///
//				Форма.Обновить();
//				ПолучитьСтрокуПоНомеру(СтрокаТЧ);
//				///
//				Спр=СоздатьОбъект("Справочник.ПрайсыПоставщиков");
//				Спр.ИспользоватьВладельца(ВыбПоставщик);
//				Конт=ВыбПоставщик;
//				ОткрытьПодбор("Справочник.ПрайсыПоставщиков",,Конт,0,ПрайсПоставщика);
//				УстановитьЗначениеВПодборе("ВыбБруттоЦена",БруттоЦена);
//			//	ПриРедактированииЦеныИзКатегории();
//			//	ТП_Обновить();
//				СтатусВозврата(0);
//
//			КонецЕсли;
//		КонецЕсли;
//		
//		
//		
////////////		
//		

	ТП_Обновить();	
	
КонецПроцедуры // ПриРедактированииЗначения(Стр, Кол, Рег, Знач)
//------------------------------

//------------------------------
Процедура ТП_колонки(ТП)

//	ИмяКолонки="НомерСЕ";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = "Номер товара";
////	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.Видимость = 1;
//	Колонка.Ширина				=20;
//	
//	ИмяКолонки="НомерСК";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = "Номер товара в комплекте";
////	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.Видимость = 1;
//	Колонка.Ширина				=20;
//	
	//ИмяКолонки="НомерКомплекта";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.Видимость = 1;
	
//	ИмяКолонки="Наименование";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = ИмяКолонки;
//	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.ИзменятьВидимость = 0;
	
	
	ИмяКолонки="Товар";
	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	Колонка.Заголовок         = ИмяКолонки;
	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	Колонка.ИзменятьВидимость = 0;
	Колонка.Ширина				=20;
	
	//
	//
	//ИмяКолонки="Поставщик";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=90;
	//
	//ИмяКолонки="Артикул";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;

	//ИмяКолонки="ТовКод";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;

	//ИмяКолонки="ЕдиницаКл";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Единица";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=30;
	//
	//ИмяКолонки="ЦенаИзКатегории";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Цена из кат.";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	//
	//ИмяКолонки="Цена";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	//	
	//ИмяКолонки="ЦенаСНДС";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Цена c НДС";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	//
	//
	//ИмяКолонки="ПроцентСкидки";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Скидки";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;	
	ИмяКолонки="КоличествоНеПодвержденое";
	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	Колонка.Заголовок         = "КолНач";
	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	Колонка.ИзменятьВидимость = 0;
	Колонка.Ширина				=10;
	

	ИмяКолонки="Количество";
	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	Колонка.Заголовок         = "КолФакт";
	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	Колонка.ИзменятьВидимость = 0;
	Колонка.Ширина				=10;
	
	//ИмяКолонки="Сумма";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Сумма без НДС";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	//	
	//ИмяКолонки="СуммаНДС";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.Видимость = 0;
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	
	//ИмяКолонки="СуммаНП";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = ИмяКолонки;
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.Видимость = 0;
	//Колонка.ИзменятьВидимость = 0;	
	//Колонка.Ширина				=50;
	//
	//ИмяКолонки="Всего";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Всего";
	//Колонка.Данные            = СокрЛП(Строка(ТП.Колонки.СуммаНДС+ТП.Колонки.Сумма));
	//Колонка.Видимость = 1;
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=50;
	////Формат(Сумма+?(СуммаВклНДС=1,0,СуммаНДС)+?(СуммаВклНП=1,0,СуммаНП),"Ч15.2.,")
	//
	//ИмяКолонки="фКартинка1";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Картинка 1";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=18;
	//Колонка.ИзменениеРазмера	=0;
	//
	//ИмяКолонки="фКартинка2";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Картинка 2";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=18;
	//Колонка.ИзменениеРазмера	=0;
	//
	//ИмяКолонки="фКартинка3";
	//Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
	//Колонка.Заголовок         = "Картинка 3";
	//Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
	//Колонка.ИзменятьВидимость = 0;
	//Колонка.Ширина				=18;
	//Колонка.ИзменениеРазмера	=0;
	
//	ИмяКолонки="НомерСтрокиДокумента";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = ИмяКолонки;
//	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.Видимость = 1;
//	
//
//	
//	ИмяКолонки="НомерЕдиницыКомплекта";
//	Колонка                   = ТП.Колонки.Добавить(ИмяКолонки);
//	Колонка.Заголовок         = ИмяКолонки;
//	Колонка.Данные            = ИмяКолонки; //-- Колонка таблицы значений
//	Колонка.Видимость = 1;

КонецПроцедуры

//////////////////////////////////////////////////////////
Процедура ТП_Инициализация()
		ОчиститьОкноСообщений();
	
	оФорма = СоздатьОбъект("Форма");
	оФорма.УстановитьФорму(Форма);
	ТП = оФорма.СоздатьЭлементУправления("ТабличноеПоле", "тпКнопка_");
	// свойства ТП
	ТП.ВертСкроллер = 1; // 0-авто, 1-всегда, 2-никогда
	ТП.НачальноеПредставление = 0; // 0-с начала, 1-с конца
	ТП.РежимВыделенияСтроки = 2; // 0-ячейка, 1-строка, 2-строка=ЦветТекстаВыделения2 и ЦветФонаВыделения2
	ТП.РежимВыделения = 1; // 0-выдел. одной строки, 1-выдел. неск. строк
	ТП.ВертикальныеЛинии = 1;
	ТП.ГоризонтальныеЛинии = 1;
	ТП.ОтображатьЗаголовки = 1;
	ТП.СтильЗаголовков = 0; // 0-3D, 1-плоский
	ТП.СтильАктивногоЗаголовка = 1; // 0-не выделяется, 1-выделяется
	ТП.ТаймаутОбновления = 0; // Х сек, 0-не обновлять автоматически
	ТП.ТаймаутБыстрогоПоиска = 1000; // Х мсек, 0-автоматически не пытаться
	ТП.ИзменятьПозициюКолонок = 1;
	//тпСклады.ЦветЛиний = 0; // цвета по умолчанию
	//тпСклады.ЦветТекста = 0;
	//тпСклады.ЦветФона = 0;
	//тпСклады.ЦветТекстаВыделения = 0;
	//тпСклады.ЦветФонаВыделения = 0;
	//тпСклады.ЦветТекстаВыделения2 = 0;
	//тпСклады.ЦветФонаВыделения2 = 0;
	//тпСклады.ЦветФонаЧередованияСтрок = 0; // цвета по умолчанию
	глФабрика = СоздатьОбъект("ФабрикаОбъектов");
	ШрифтАриал10Жирный = глФабрика.Шрифт("Arial LV", 10, 1);
	ТП.Шрифт=ШрифтАриал10Жирный;
	ТП.ЧередованиеЦветовСтрок = 1;
	ТП.РазрешитьНачалоПеретаскивания = 1; // 1-разрешает ЭУ выступать источником перетаскивания, 0-запрещает
	ТП.РазрешитьПеретаскивание = 1; // 1-разрешает ЭУ выступать приемником перетаскивания, 0-запрещает
	ТП.ФиксацияСлева = 0; // кол-во фиксированных колонок
	ТП.ФиксацияСправа = 0;
	// колонки
	ТП_колонки(ТП);
	//// поставщик
	Источник=СоздатьОбъект("ПоставщикДанныхТЗ");
	Источник.УстТаблицуЗначений(Таб);
	ТП.ПоставщикДанных=Источник;
	
	
//	ТП.ОбновитьСтроки();
	ТП_Обновить();	
	// быстрый поиск
	//тп.ПоставщикДанных.Поля.Получить("Наименование").ТипБыстрогоПоиска = 1;
	
	// методы
	
//	ТП.АвтоШирина();
	Форма.ПанельИнструментов(0);
КонецПроцедуры

///////////////////////////////////////////////////

//}ТП


Процедура ПриОткрытии()
	ОбработкаВнешнихКоманд();
	

	Если ПустоеЗначение(ДатаПрихода)=1 Тогда
		ДатаПрихода=ТекущаяДата();
	КонецЕсли;


		
КонецПроцедуры
Процедура ПриЗакрытии()
	//{ЛожноеЗакрытие Установить Фокус
	Если ПустоеЗначение(ПередатьФокус) = 0 тогда 
		Активизировать(ПередатьФокус); 
		СтатусВозврата(0); 
		ПередатьФокус = "";
		Если нажатьКлавишу="Ф4" Тогда
			нажатьКлавишу="";
			WshShell = СоздатьОбъект("WScript.Shell") ;
			//WshShell.SendKeys("{^}");
			WshShell.SendKeys("^{F4}");
		КонецЕсли;
		Возврат; 
	КонецЕсли; 
	//}ЛожноеЗакрытие Установить Фокус
	
	Сервис = СоздатьОбъект("Сервис");
	Сервис.УдалитьШрифт(МойШрифт);	
	
	НастроитьОкна(1);
//	Записать();
	Форма.Закрыть(0);
	
	
	
КонецПроцедуры
Процедура ПослеОткрытия()
	Перем фПользователь;
	//	НастроитьПривязки();
	Если Пользователь="Sklad" Тогда
		фПользователь=1;
	КонецЕсли;
	
	Если фПользователь=1 Тогда
		НастроитьОкна(фПользователь);// 1 для мобильного режима
	КонецЕсли;
	ТП_Инициализация();
	ПВ_Инициализация();
	Если фПользователь=1 Тогда
		НастроитьОкна(фПользователь);// 1 для мобильного режима
	КонецЕсли;
	ВыводТовара(1);
	
	Ф=СоздатьОбъект("Форма");
	Ф.УстановитьФорму(Форма);
//	_тпАкцСкидки=Ф.СоздатьЭлементУправления("ТабличноеПоле","тпАкцСкидки");
//	тпДок=Ф.СоздатьЭлементУправления("ТабличноеПоле","тпДок_");
	
//	ЗаполнитьТПДок();
//	НастройкаТПДок();
//	ФормаРасш = СоздатьОбъект("РасширениеФормы");
//	Форма.ИспользоватьЗакладки(1);
//	Форма.Закладки.ДобавитьЗначение("Основная");
//	Форма.Закладки.ДобавитьЗначение("Дополнительная");
//	ФормаРасш.ПодсветкаЗакладки(2, 1); // включаем подсветку дополнительной закладки
//
//	
//	Сервис = СоздатьОбъект("Сервис");
//	МойШрифт = Сервис.СоздатьШрифт("Arial", 36, 7,,,,);
//	
//	ФормаРасш.УстановитьФорму(Форма);
//	ФормаРасш.ПолучитьАтрибут(Форма.Закладки).Шрифт = МойШрифт;
//	ФормаРасш.ПолучитьАтрибут(Форма.Закладки).ЦветШрифта = 255;
//	ФормаРасш.ПолучитьАтрибут(Форма.Закладки).ЦветФона = ПолучитьЦвет(255,255,185);

//	ТекущийСлой=слТаблицы;
	ТекущийСлой=слДатаВремя;
//	Форма.кнМеню.Заголовок("Товар");
	Форма.ИспользоватьСлой(ТекущийСлой,2);

//	ПередатьФокус = "тпКнопка_"; 
	ПередатьФокус = "пвШтрихкод"; 
	Форма.Закрыть(0);	
	
	гСервис = СоздатьОбъект("Сервис");
	гСервис.ПерехватКлавиатуры(1);

КонецПроцедуры // ПослеОткрытия()  
Процедура ГруппироватьТЧ()
Перем тт,табИТ;
	тт=СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(тт);
	табИТ=СоздатьОбъект("ИндексированнаяТаблица");
	табИТ.Загрузить(тт);
//	табИТ.ВыбратьСтроки();
//	табИТ.Группировать("Товар : *Товар; СрокРеализ : *СрокРеализ","Сумма,НДС,Количество");
	табИТ.Свернуть("Товар,СрокРеализ","Сумма,НДС,Количество,КоличествоНеПодвержденое");

	табИТ.Выгрузить(тт);
	ЗагрузитьТабличнуюЧасть(тт);
КонецПроцедуры

Процедура ВводНаОсновании(ДокОснование)

	//{{ВВОД_НА_ОСНОВАНИИ

	//Данный фрагмент построен конструктором.
	//При повторном использовании конструктора, внесенные вручную изменения будут потеряны!!!
	Если  (ДокОснование.Вид() = "ЗаказПоставщику") ИЛИ (ДокОснование.Вид() = "ОжидаемаяПоставка")  Тогда
		//СостояниеДок=глПолучитьСостояниеДокумента(ДокОснование);
		//Если (ДокОснование.Вид() = "ОжидаемаяПоставка")И(СостояниеДок<>УстановитьСостояние("ОтЛогиста","ОжидаемаяПоставка"))  Тогда
		//	Сообщить("Документ не создан, Ожидаемая поставка не подписана Логистом");
		//	Возврат;
		//КонецЕсли;
		Валюта = ДокОснование.Валюта;
		Дата_курса = ДокОснование.Дата_курса;
		ДокументОснование = ДокОснование;
		КлГруппа = ДокОснование.КлГруппа;
		Клиент = ДокОснование.Клиент;
		Курс = ДокОснование.Курс;
		Склад = ДокОснование.Склад;
		ФактВремяДоставки = ДокОснование.ПланВремяДоставки;
		ДатаПрихода=ДокОснование.ДатаПрихода;
		ДокОснование.ВыбратьСтроки();
		Пока ДокОснование.ПолучитьСтроку() = 1 Цикл
			НоваяСтрока();
			ШтрихКод = ДокОснование.Товар.ШтрихКод;
			ТовКод = ДокОснование.ТовКод;
			Товар = ДокОснование.Товар;
			КоличествоНеПодвержденое=ДокОснование.Подтверждено;
			Количество = 0;
			ПоСпецЗаказу = ДокОснование.ПоСпецЗаказу;
			ПоСчету = ДокОснование.ПоСчету;
			ТовСертификат = ДокОснование.ПланВремяДоставки;
			Цена = ДокОснование.Цена;
			ЦенаСоСкидкой = ДокОснование.ЦенаСоСкидкой;
//			Единица=ДокОснование.Единица;
		КонецЦикла;
	КонецЕсли;
	ГруппироватьТЧ();
	//}}ВВОД_НА_ОСНОВАНИИ
	ВыводКлиента(ДокОснование);
КонецПроцедуры
Процедура ПриНажатииКнопкиКлавиатуры(КодКлавиши, Alt, Shift, Ctrl, Символ, ФСО)
	//ФСО = 0;
	Если КодКлавиши = 120 Тогда
		Если ТекущийСлой=слТовара Тогда
			кнНазад();
		КонецЕсли;
	ИначеЕсли КодКлавиши =119 Тогда
		Если ТекущийСлой=слТовара Тогда
			кнВперед();
		КонецЕсли;	
	КонецЕсли;
	//Форма.тИнфо.Заголовок(КодКлавиши);
	//Форма.Обновить();
КонецПроцедуры
Процедура ВводНового()
	ВремяНачалаПриема=ТекущееВремя();
КонецПроцедуры

//{
	//Таб = СоздатьОбъект("ТаблицаЗначений");
//	Таб=СоздатьОбъект("ИндексированнаяТаблица");
	пСтолбцы="
	|НомерСтроки,
	|ШтрихКод,
	|Товар,
	|СрокРеализ,
	|Количество,
	|КоличествоНеПодвержденое,
//	|ПроблемаНеСоответствиеСпецификации,
	|ПредПродажПодг,
	|ПроблемаНесоответствияМаркировкиLV,
//	|ПроблемаНесоответствияМаркировкиLT,
//	|ПроблемаНесоответствияМаркировкиEE,
	|ПроблемаОтсутствиеШтрихКода,
//	|ПроблемаДопустСрокаРеализации
	|";
	Таб=СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(Таб,пСтолбцы);
//	Таб.Загрузить(ТабЗн,,);
	
	Таб.УстановитьПараметрыКолонки("НомерСтроки",,,,"Номер",,,);
	Таб.УстановитьПараметрыКолонки("ШтрихКод",,,,"Штрих Код",,,);
	Таб.УстановитьПараметрыКолонки("Товар",,,,"Товар",,,);
	Таб.УстановитьПараметрыКолонки("СрокРеализ",,,,"Срок реализации",,,);
	Таб.УстановитьПараметрыКолонки("Количество","Число",10,3,"Количество",,,);
	Таб.УстановитьПараметрыКолонки("КоличествоНеПодвержденое",,,,"Кол.Нач.",,,);
//	Таб.УстановитьПараметрыКолонки("ПроблемаНеСоответствиеСпецификации",,,,"Проблема Спецификации",,,);
	Таб.УстановитьПараметрыКолонки("ПредПродажПодг",,,,"Треб.доп.обработка?",,,);

	Таб.УстановитьПараметрыКолонки("ПроблемаНесоответствияМаркировкиLV",,,,"Пробл. маркир.?",,,);
//	Таб.УстановитьПараметрыКолонки("ПроблемаНесоответствияМаркировкиLT",,,,"Проблема Маркировки LT",,,);
//	Таб.УстановитьПараметрыКолонки("ПроблемаНесоответствияМаркировкиEE",,,,"Проблема Маркировки ЕE",,,);
	Таб.УстановитьПараметрыКолонки("ПроблемаОтсутствиеШтрихКода",,,,"Проблема Штрих Кода",,,);
//	Таб.УстановитьПараметрыКолонки("ПроблемаДопустСрокаРеализации",,,,"Проблема Срока Реализ.",,,);	
//	Таб.НоваяСтрока();
//	Таб.Товар =ПолучитьПустоеЗначение(Товар) ;


	
	
	

	флСообщения=0;
	Таб_ТекущаяКолонка=4;
	Таб_ТекущаяСтрока=1;
	ТекущийДокПоставки=ПолучитьПустоеЗначение(ДокументОснование);
	старТекущийДокПоставки=ТекущийДокПоставки;
	
	меню = СоздатьОбъект("СписокЗначений");
	
	рДатаНач=ТекущаяДата();
	рДатаКон=ТекущаяДата();
	
	слТаблицы="СлойТП,Кнопки,слТовар";
	слТовара="Основной,Кнопки,слТовар";
	слПрихода="СлойТПдокументов";
	слСканирования="слШтрихкод";
	слДатаВремя="слПрТовара";
	
	нажатьКлавишу="";
	счетНажатий=0;
	флПлюс="";
	сзКолонок = СоздатьОбъект("СписокЗначений");
//}