

// ********************
//
//Начало текста, вставленного Инсталлятором МОД
//======================================================================
Процедура ОтправитьУведомления(Конт)
	
	Если ГрупповаяОбработка()=1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяИБЦентральная()=0 Тогда
		Возврат;
	КонецЕсли;

	Если Конт.Аннулировать=0 Тогда

		КлиентПретензии = ?(ПустоеЗначение(Конт.ПоСчету.КлиентФилиала)=0,Конт.ПоСчету.КлиентФилиала,Конт.ПоСчету.Клиент);

		ТекстСообщения	= "";
		ТекстСообщенияБаз	= "";
		Конт.ВыбратьСтроки();
		Пока Конт.ПолучитьСтроку() = 1 Цикл
			
			Если (ПустоеЗначение(Конт.ВидУведомления)=1) И (ПустоеЗначение(Конт.ВидУведомленияБаз)=1) Тогда

				Заголовок = Шаблон("Problema s el.zajavk. [ПоСчету.НомерДок] dlja klienta [КлиентПретензии.ПоАлфавиту]([КлиентПретензии.Код])");
				НужноУведомление = 0;
				Если (Конт.СутьПретензии.ОтправкаУведомлений=1) И (Конт.ПоСчету.ВидЗаявки <> Перечисление.ВидыЗаявок.СпецЗаказ) Тогда
					НужноУведомление = 1;
				ИначеЕсли (Конт.СутьПретензии.ОтправкаУведомленийСпецЗаказ=1) И (Конт.ПоСчету.ВидЗаявки = Перечисление.ВидыЗаявок.СпецЗаказ) Тогда
					НужноУведомление = 1;
				КонецЕсли;

				НужноУведомлениеБаз = 0;
				Если (Конт.СутьПретензииБаз.ОтправкаУведомлений=1) И (Конт.ПоСчету.ВидЗаявки <> Перечисление.ВидыЗаявок.СпецЗаказ) Тогда
					НужноУведомлениеБаз= 1;
				ИначеЕсли (Конт.СутьПретензииБаз.ОтправкаУведомленийСпецЗаказ=1) И (Конт.ПоСчету.ВидЗаявки = Перечисление.ВидыЗаявок.СпецЗаказ) Тогда
					НужноУведомлениеБаз = 1;
				КонецЕсли;

				Если (ПустоеЗначение(Конт.СутьПретензии)=0) И (НужноУведомление=1) И (ПустоеЗначение(Конт.ВидУведомления)=1) Тогда
					ТекстСообщенияСМС = Шаблон("[КлиентПретензии.ПоАлфавиту] [КлиентПретензии.Код] pretenzija [Конт.СутьПретензии.Код] po tovaru [Конт.Товар.Код] [Конт.Товар.ПоАлфавиту] - [Конт.Количество-Конт.КоличествоФакт][Конт.Единица]");
					
					Если ПустоеЗначение(ТекстСообщения)=0 Тогда
						ТекстСообщения=ТекстСообщения+РазделительСтрок;
					КонецЕсли;
					
					ТекстСообщения = ТекстСообщения + Шаблон("Pretenzija [Конт.СутьПретензии.Код] po tovaru  [Конт.НомерСтроки]. [Конт.Товар.Код] [Конт.Товар.ПоАлфавиту] - bilo zakazano: [Конт.Количество] [Конт.Единица] po faktu: [Конт.КоличествоФакт] [Конт.Единица]");
					
					Рез=глОтправитьСообщение("",ТекстСообщенияСМС,ПоСчету.Агент,"SMS");
					Если рез=1 Тогда
						Конт.ВидУведомления = Перечисление.ВидыУведомлений.СМС;
					КонецЕсли;
				КонецЕсли;

				//отправляем для базовой претензии только если нет уведомления для основного
				Если (ПустоеЗначение(Конт.СутьПретензииБаз)=0) И (НужноУведомление=0) И (НужноУведомлениеБаз=1) И (ПустоеЗначение(Конт.ВидУведомленияБаз)=1) Тогда
					ТекстСообщенияСМС = Шаблон("[КлиентПретензии.ПоАлфавиту] [КлиентПретензии.Код] pretenzija [Конт.СутьПретензииБаз.Код] po tovaru [Конт.Товар.Код] [Конт.Товар.ПоАлфавиту] - [Конт.Количество-Макс(Конт.Резерв,Конт.КоличествоФакт)][Конт.Единица]");
					
					Если ПустоеЗначение(ТекстСообщенияБаз)=0 Тогда
						ТекстСообщенияБаз=ТекстСообщенияБаз+РазделительСтрок;
					КонецЕсли;
					
					ТекстСообщенияБаз = ТекстСообщенияБаз+ Шаблон("Pretenzija [Конт.СутьПретензииБаз.Код] po tovaru  [Конт.НомерСтроки]. [Конт.Товар.Код] [Конт.Товар.ПоАлфавиту] - bilo zakazano: [Конт.Количество] [Конт.Единица] po faktu: [Макс(Конт.Резерв,Конт.КоличествоФакт)] [Конт.Единица]");
					
					Рез=глОтправитьСообщение("",ТекстСообщенияСМС,ПоСчету.Агент,"SMS");
					Если рез=1 Тогда
						Конт.ВидУведомленияБаз = Перечисление.ВидыУведомлений.СМС;
					КонецЕсли;
				КонецЕсли;

				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПустоеЗначение(ТекстСообщения)=0 Тогда
			Рез=глОтправитьСообщение(Заголовок,ТекстСообщения,Конт.ПоСчету.Агент,"Email");
			Если рез=1 Тогда
				Конт.ВыбратьСтроки();
				Пока Конт.ПолучитьСтроку() = 1 Цикл
					
					Если (ПустоеЗначение(Конт.СутьПретензии)=0) И (ПустоеЗначение(Конт.ВидУведомления)=1) Тогда
						Конт.ВидУведомления = Перечисление.ВидыУведомлений.ЭлПочта;
					КонецЕсли;

					Если (ПустоеЗначение(Конт.СутьПретензии)=0) И (ПустоеЗначение(Конт.ВидУведомления)=1) Тогда
						Конт.ВидУведомления = Перечисление.ВидыУведомлений.ЭлПочта;
					КонецЕсли;

				КонецЦикла;

			КонецЕсли;
			
			
		КонецЕсли;		

		Если ПустоеЗначение(ТекстСообщенияБаз)=0 Тогда
			Рез=глОтправитьСообщение(Заголовок,ТекстСообщенияБаз,Конт.ПоСчету.Агент,"Email");
			Если рез=1 Тогда
				Конт.ВыбратьСтроки();
				Пока Конт.ПолучитьСтроку() = 1 Цикл
					
					Если (ПустоеЗначение(Конт.СутьПретензииБаз)=0) И (ПустоеЗначение(Конт.ВидУведомленияБаз)=1) Тогда
						Конт.ВидУведомленияБаз = Перечисление.ВидыУведомлений.ЭлПочта;
					КонецЕсли;

				КонецЦикла;
			КонецЕсли;
		КонецЕсли;		

		
	Иначе
		
		//собираем все товары 
		КлиентПретензии = ?(ПустоеЗначение(Конт.ПоСчету.КлиентФилиала)=0,Конт.ПоСчету.КлиентФилиала,Конт.ПоСчету.Клиент);
		
		Заголовок = "";
		ТекстСообщения="Annulirovani tovari:";
		Конт.ВыбратьСтроки();
		Пока Конт.ПолучитьСтроку() = 1 Цикл
			
			Если ПустоеЗначение(Конт.ВидУведомления)=1 Тогда

				Заголовок = Шаблон("Annulirovanna el.zajavka [Конт.ПоСчету.НомерДок]([Конт.ПоСчету.ДатаПоставки]) na klienta [КлиентПретензии.ПоАлфавиту]([КлиентПретензии.Код])");
				
//				Если (ПустоеЗначение(Конт.СутьПретензии)=0) И (Конт.СутьПретензии.ОтправкаУведомлений=1) Тогда
					
					ТекстСообщения = ТекстСообщения + Шаблон("Pretenzija [Конт.СутьПретензии.Код] po tovaru [Конт.НомерСтроки]. [Конт.Товар.Код] [Конт.Товар.ПоАлфавиту] - [Конт.Количество] [Конт.Единица]")+РазделительСтрок;
//				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;

		Если ПустоеЗначение(Заголовок)=0 Тогда
			Рез=глОтправитьСообщение(Заголовок,ТекстСообщения,Конт.ПоСчету.Агент,"Email");
			Если рез=1 Тогда
				Конт.ВыбратьСтроки();
				Пока Конт.ПолучитьСтроку() = 1 Цикл
					Конт.ВидУведомления = Перечисление.ВидыУведомлений.ЭлПочта;
				КонецЦикла;
			КонецЕсли;

			Рез=глОтправитьСообщение(Заголовок,Заголовок,Конт.ПоСчету.Агент,"SMS");
			Если рез=1 Тогда
				Конт.ВыбратьСтроки();
				Пока Конт.ПолучитьСтроку() = 1 Цикл
					Конт.ВидУведомления = Перечисление.ВидыУведомлений.СМС;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		

		
	КонецЕсли;

КонецПроцедуры // ОтправитьУведомления

Процедура ОбработкаПроведения() Далее
//Конец текста, вставленного Инсталлятором МОД

Функция УстановитьСостояние(Сост,Док)
	спрСост=СоздатьОбъект("Справочник.СостоянияДокументов");
	спрСост.НайтиПоНаименованию(Док.Вид()); 
	спрСост.ИспользоватьРодителя(спрСост.ТекущийЭлемент());
	спрСост.НайтиПоНаименованию(Сост,1);
	Возврат спрСост.ТекущийЭлемент();
КонецФункции

Функция ГаситьРегистр(п_Док)
	Рег=СоздатьОбъект("Регистр.СостояниеДокумента");
	Рег.УстановитьЗначениеФильтра("Док",п_Док,1);
	табл=СоздатьОбъект("ТаблицаЗначений");
	Рег.ВыгрузитьИтоги(табл,1,1);
//	табл.ВыбратьСтроку();
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку() = 1 Цикл
		Регистр.СостояниеДокумента.Док=табл.Док;
		Регистр.СостояниеДокумента.Пользователь=табл.Пользователь;
		Регистр.СостояниеДокумента.Количество=табл.Количество;
		Регистр.СостояниеДокумента.СостояниеДок=табл.СостояниеДок;
		Регистр.СостояниеДокумента.ДвижениеРасходВыполнить();
	КонецЦикла;	
КонецФункции



Процедура стар_ОбработкаПроведения()
//Закомментировано Инсталлятором МОД:Процедура ОбработкаПроведения()
	Запрос=СоздатьОбъект("ODBCRecordSet");

	Если семМожноПровести( Контекст ) = 0 Тогда Возврат; КонецЕсли;
	
	Если ПоСчету.Проведен()=0 Тогда
		НеПроводить(Контекст,"Не проведена заявка на основании!");
		Возврат;
	КонецЕсли;
	
	Если Клиент<>ПоСчету.Клиент Тогда
		Клиент = ПоСчету.Клиент;
	КонецЕсли;

	Если КлиентФилиала<>ПоСчету.КлиентФилиала Тогда
		КлиентФилиала = ПоСчету.КлиентФилиала;
	КонецЕсли;
	
	Если ПустоеЗначение(Комплектовщик)=1 Тогда
		НеПроводить(Контекст,"Не указан комплектовщик!");
	Иначе
		Если ПоСчету.Комплектовщик<>Комплектовщик Тогда

			Попытка
				Док=СоздатьОбъект("Документ.Счет");
				Док.НайтиДокумент(ПоСчету);
				Док.Комплектовщик=Комплектовщик;
				Док.Записать();
			Исключение
				ТекстЗапросаСчет="UPDATE Док SET $Док.Комплектовщик=:ВыбКомпл FROM $Документ.Счет Док WHERE Док.IDDOC=:Документ";
				Запрос=СоздатьОбъект("ODBCRecordSet");        
				Мета=СоздатьОбъект("MetaDataWork");
				Запрос.УстановитьТекстовыйПараметр("Документ",ПоСчету);
				Запрос.УстановитьТекстовыйПараметр("ВыбКомпл",Комплектовщик);
				Запрос.ВыполнитьСкалярный(ТекстЗапросаСчет);
			КонецПопытки;			
			
		КонецЕсли;
	КонецЕсли;

	Если ПустоеЗначение(СкладЗагрузки)=1 Тогда
		НеПроводить(Контекст,"Не указан склад загрузки!");
	КонецЕсли;

	Запрос=СоздатьОбъект("ODBCRecordSet");
	ТекстЗапроса="SELECT СчетСтроки.IDDOC [Ссылка $Документ.Счет]
	|				, СчетСтроки.LINENO_ НомерСтроки
	|					, $СчетСтроки.Товар [Товар $Справочник.Номенклатура]
	|					, СпрН.CODE ТовКод
	|					, $СчетСтроки.Количество Количество
	|					, $СчетСтроки.Сумма * CASE WHEN $Счет.Валюта <> :БазоваяВалюта THEN $ПоследнееЗначение.Валюты.Курс($Счет.Валюта,LEFT(ЖурСчета.DATE_TIME_IDDOC,8)) ELSE 1 END Сумма
	|					, $СчетСтроки.Единица [Единица $Справочник.Единицы]
	|					, $СчетСтроки.Коэффициент Коэффициент
	|					, $СчетСтроки.МинСрокРеализ МинСрокРеализ
	|					, $СчетСтроки.МаксСрокРеализ МаксСрокРеализ
	|			  FROM $ДокументСтроки.Счет AS СчетСтроки (NOLOCK)
	|			  INNER JOIN $Документ.Счет AS Счет (NOLOCK) ON Счет.IDDOC = СчетСтроки.IDDOC 
	|			  INNER JOIN _1sjourn ЖурСчета (NOLOCK) ON ЖурСчета.IDDOC = Счет.IDDOC AND ЖурСчета.IDDOCDEF = $ВидДокумента.Счет
	|			  INNER JOIN $Справочник.Номенклатура СпрН (NOLOCK) ON СпрН.ID = $СчетСтроки.Товар
	|			  WHERE СчетСтроки.IDDOC = :ВыбСчет
	|			  ORDER BY LINENO_
	|";

	Запрос.УстановитьТекстовыйПараметр("БазоваяВалюта",Константа.БазоваяВалюта);	
	Запрос.УстановитьТекстовыйПараметр("ВыбСчет",ПоСчету);
	иТабл=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,иТабл);
	иТабл.ДобавитьИндекс("иТовар","*Товар,НомерСтроки");
	сзКлюч=СоздатьОбъект("СписокЗначений");
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		сзКлюч.УдалитьВсе();
		сзКлюч.ДобавитьЗначение(Товар);
//		сзКлюч.ДобавитьЗначение(НомерСтроки);
		иТабл.Подмножество(сзКлюч,1,"иТовар");
		рез=иТабл.ВыбратьСтроки("иТовар");
		Если рез = 0 Тогда
			Количество=0;
		Иначе
			иТабл.ПолучитьСтроку("иТовар");
			Количество=иТабл.Количество;
		КонецЕсли;
	КонецЦикла;
	
	
	СпецРеги=СоздатьОбъект("Регистры");
	регРезервы 		= СпецРеги.РезервыТоваров;
	регСпецзаказы 	= СпецРеги.СпецЗаказы;
	регКомпл 		= СпецРеги.КомплектацияЗаявок;
	регЗаказыЗаявки	= СпецРеги.ЗаказыПоставщикамЗаявки;
	
	спСчетов = СоздатьОбъект("СписокЗначений");
	Если ИтогиАктуальны()=0  Тогда
		СпецРеги.Актуальность(1);
		регРезервы.УстановитьЗначениеФильтра( "ПоСчету", ПоСчету, 1 );
		регСпецзаказы.УстановитьЗначениеФильтра( "ПоСчету", ПоСчету, 1 );
		регКомпл.УстановитьЗначениеФильтра( "ПоСчету", ПоСчету, 1 );
		регЗаказыЗаявки.УстановитьЗначениеФильтра( "ПоСчету", ПоСчету, 1 );
		регРезервы.ВременныйРасчет();
		регСпецзаказы.ВременныйРасчет();
		регКомпл.ВременныйРасчет();
		регЗаказыЗаявки.ВременныйРасчет();
		СпецРеги.РассчитатьРегистрыНа( ТекущийДокумент() );
	КонецЕсли;

	регКомпл.УстановитьЗначениеФильтра("ПоСчету",ПоСчету);
	
	Если (ПоСчету.КлиентФилиала = ПоСчету.Клиент) И (ПоСчету.Фирма=Константа.ОсновнаяФирма) Тогда //данный документ будет только в случае когда заявка загрузится из центра
//		регКомпл.УстановитьЗначениеФильтра("Статус",2); //отбираем только отправленные на комплектацию
	КонецЕсли;
	
	таблКомпл=СоздатьОбъект("ТаблицаЗначений");
	регКомпл.ВыгрузитьИтоги(таблКомпл,1,1);
	
	Если (ПоСчету.КлиентФилиала = ПоСчету.Клиент) И (ПоСчету.Фирма=Константа.ОсновнаяФирма) Тогда //проверка нужна только для документов введенных в локальной базе
	Иначе
		Если (таблКомпл.КоличествоСтрок()=0) Тогда
			Если ГрупповаяОбработка()=0 Тогда
				НеПроводить(Контекст,"Для данной эл. заявки не требуется комплектация факт!");
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Если КоличествоФактБазЕд=0 Тогда
			КоличествоФактБазЕд=КоличествоФакт*Коэффициент;
		КонецЕсли;
	КонецЦикла;	
	
	
	СутьПретензииOOS = Константа.ОснСутьПретензийOOS;
	
	Если Аннулировать=1 Тогда
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл

			Если ПустоеЗначение(АгентПоТовару)=1 Тогда
				АгентПоТовару = глПолучитьАгентаПоТовару(ПоСчету.Клиент,ПоСчету.Агент,Товар);
			КонецЕсли;

			Если (ДатаДок>='01.07.17') И (ПоСчету.ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка) Тогда
				КолСравнить = Резерв;
			Иначе
				КолСравнить = Количество*Коэффициент;
			КонецЕсли;
			
			Если (глНеобходимоНаличиеПретензии(Контекст,Товар,Единица.Единица,КолСравнить,0)=1) ИЛИ (ПустоеЗначение(ТоварЗамена)=0) Тогда
				Если ПустоеЗначение(СутьПретензии)=1 Тогда
					НеПроводить(Контекст,"В строке "+НомерСтроки+" не указана суть претензии!");
				КонецЕсли;


				Регистр.ПретензииПолученные.ПривязыватьСтроку(НомерСтроки);
				Регистр.ПретензииПолученные.Фирма = Фирма;
				Регистр.ПретензииПолученные.Товар = Товар;
				Регистр.ПретензииПолученные.СутьПретензии = СутьПретензии;
				Регистр.ПретензииПолученные.СутьПретензииПодтв = СутьПретензии;
				Регистр.ПретензииПолученные.Агент = ?(ПустоеЗначение(ПоСчету.Агент.Родитель.АгентВнутр)=0,ПоСчету.Агент.Родитель.АгентВнутр,АгентПоТовару);
				Регистр.ПретензииПолученные.Клиент = ПоСчету.Клиент;
				Регистр.ПретензииПолученные.КлиентФилиала = ПоСчету.КлиентФилиала;
				Регистр.ПретензииПолученные.Поставщик = "";
				Регистр.ПретензииПолученные.ПоСчету = ПоСчету;
				Регистр.ПретензииПолученные.ПоДокументу = ПоСчету;
				Регистр.ПретензииПолученные.Количество = КолСравнить;
				
				Если ПустоеЗначение(ПоСчету)=0 Тогда
					Регистр.ПретензииПолученные.АгентФилиала = ПоСчету.Агент;
				Иначе
					Регистр.ПретензииПолученные.АгентФилиала = Регистр.ПретензииПолученные.Агент.АгентКонсолидации;
				КонецЕсли;

				сзКлюч.УдалитьВсе();
				сзКлюч.ДобавитьЗначение(Товар);
				//сзКлюч.ДобавитьЗначение(НомерСтроки);
				иТабл.Подмножество(сзКлюч,1,"иТовар");
				рез=иТабл.ВыбратьСтроки("иТовар");

				
				Если рез = 0 Тогда
					Регистр.ПретензииПолученные.Сумма = 0;
				Иначе
					Регистр.ПретензииПолученные.Сумма = иТабл.Сумма/иТабл.Количество*КолСравнить;
				КонецЕсли;
				
				Регистр.ПретензииПолученные.ПретензияПолучена = 1;
				Регистр.ПретензииПолученные.СуммаПотерь = "";
				Регистр.ПретензииПолученные.ДвижениеВыполнить();


			КонецЕсли;
			
			Если ПоСчету.ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка Тогда
	
				//прописываем претензию для недостачи товара на этапе формирования заявки
				Если (глНеобходимоНаличиеПретензии(Контекст,Товар,Единица.Единица,Количество*Коэффициент,КолСравнить)=1) ИЛИ (ПустоеЗначение(ТоварЗамена)=0) Тогда

					Если ПустоеЗначение(СутьПретензииБаз)=1 Тогда
						//заполняем если не указана другой вид в документе
						СутьПретензииБаз = СутьПретензииOOS ;
					КонецЕсли;

					Регистр.ПретензииПолученные.ПривязыватьСтроку(НомерСтроки);
					Регистр.ПретензииПолученные.Фирма = Фирма;
					Регистр.ПретензииПолученные.Товар = Товар;
					Регистр.ПретензииПолученные.СутьПретензии = СутьПретензииБаз;
					Регистр.ПретензииПолученные.СутьПретензииПодтв = СутьПретензииБаз;
					Регистр.ПретензииПолученные.Агент = ?(ПустоеЗначение(ПоСчету.Агент.Родитель.АгентВнутр)=0,ПоСчету.Агент.Родитель.АгентВнутр,АгентПоТовару);
					Регистр.ПретензииПолученные.Клиент = ПоСчету.Клиент;
					Регистр.ПретензииПолученные.КлиентФилиала = ПоСчету.КлиентФилиала;
					Регистр.ПретензииПолученные.Поставщик = "";
					Регистр.ПретензииПолученные.ПоСчету = ПоСчету;
					Регистр.ПретензииПолученные.ПоДокументу = ПоСчету;
					Регистр.ПретензииПолученные.Количество = Количество*Коэффициент-КолСравнить;
					
					Если ПустоеЗначение(ПоСчету)=0 Тогда
						Регистр.ПретензииПолученные.АгентФилиала = ПоСчету.Агент;
					Иначе
						Регистр.ПретензииПолученные.АгентФилиала = Регистр.ПретензииПолученные.Агент.АгентКонсолидации;
					КонецЕсли;
					
					сзКлюч.УдалитьВсе();
					сзКлюч.ДобавитьЗначение(Товар);
					//сзКлюч.ДобавитьЗначение(НомерСтроки);
					иТабл.Подмножество(сзКлюч,1,"иТовар");
					рез=иТабл.ВыбратьСтроки("иТовар");
					
					Если рез = 0 Тогда
						Регистр.ПретензииПолученные.Сумма = 0;
					Иначе
						Регистр.ПретензииПолученные.Сумма = иТабл.Сумма/(иТабл.Количество*иТабл.Коэффициент)*(Количество*Коэффициент-КолСравнить);
					КонецЕсли;
	
					Регистр.ПретензииПолученные.ПретензияПолучена = 1;
					Регистр.ПретензииПолученные.СуммаПотерь = "";
					Регистр.ПретензииПолученные.ДвижениеВыполнить();
					
				Иначе
					СутьПретензииБаз ="";
				КонецЕсли;				
			Иначе
				СутьПретензииБаз ="";
			КонецЕсли;		

			//прописываем претензию для недостачи товара на этапе формирования заявки

		//	Если ПоСчету.ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка Тогда
		//		
		//		Если (глНеобходимоНаличиеПретензии(Контекст,Товар,Единица.Единица,Количество,Макс(Резерв,КоличествоФакт))=1) ИЛИ (ПустоеЗначение(ТоварЗамена)=0) Тогда
		//
		//			Регистр.ПретензииПолученные.ПривязыватьСтроку(НомерСтроки);
		//			Регистр.ПретензииПолученные.Фирма = Фирма;
		//			Регистр.ПретензииПолученные.Товар = Товар;
		//			Регистр.ПретензииПолученные.СутьПретензии = СутьПретензииOOS;
		//			Регистр.ПретензииПолученные.СутьПретензииПодтв = СутьПретензииOOS;
		//			Регистр.ПретензииПолученные.Агент = ?(ПустоеЗначение(ПоСчету.Агент.Родитель.АгентВнутр)=0,ПоСчету.Агент.Родитель.АгентВнутр,АгентПоТовару);
		//			Регистр.ПретензииПолученные.Клиент = ПоСчету.Клиент;
		//			Регистр.ПретензииПолученные.КлиентФилиала = ПоСчету.КлиентФилиала;
		//			Регистр.ПретензииПолученные.Поставщик = "";
		//			Регистр.ПретензииПолученные.ПоСчету = ПоСчету;
		//			Регистр.ПретензииПолученные.ПоДокументу = ПоСчету;
		//			Регистр.ПретензииПолученные.Количество = Количество-Макс(Резерв,КоличествоФакт);
		//			сзКлюч.УдалитьВсе();
		//			сзКлюч.ДобавитьЗначение(Товар);
		//			сзКлюч.ДобавитьЗначение(НомерСтроки);
		//			иТабл.Подмножество(сзКлюч,2,"иТовар");
		//			рез=иТабл.ВыбратьСтроки("иТовар");
		//			
		//			Если рез = 0 Тогда
		//				Регистр.ПретензииПолученные.Сумма = 0;
		//			Иначе
		//				Регистр.ПретензииПолученные.Сумма = иТабл.Сумма/иТабл.Количество*(Количество-Макс(Резерв,КоличествоФакт));
		//			КонецЕсли;
		//
		//			Регистр.ПретензииПолученные.ПретензияПолучена = 1;
		//			Регистр.ПретензииПолученные.СуммаПотерь = "";
		//			Регистр.ПретензииПолученные.ДвижениеВыполнить();
		//			
		//		КонецЕсли;				
		//	КонецЕсли;
				
		КонецЦикла;
		глПогашениеПоРезервам(Контекст,ПоСчету,регРезервы,регСпецЗаказы,РегКомпл,регЗаказыЗаявки);
		
		Если (ПустоеЗначение(ПоСчету.Склад.МестоКомплектации)=0) Тогда
			таблКомпл.ВыбратьСтроки();
			Пока таблКомпл.ПолучитьСтроку()=1 Цикл
				Регистр.КомплектацияЗаявок.ДатаПоставки=таблКомпл.ДатаПоставки;
				Регистр.КомплектацияЗаявок.ПоСчету=таблКомпл.ПоСчету;
				Регистр.КомплектацияЗаявок.ВидЗаявки=таблКомпл.ВидЗаявки;
				Регистр.КомплектацияЗаявок.МестоКомплектации=таблКомпл.МестоКомплектации;
				Регистр.КомплектацияЗаявок.Склад=таблКомпл.Склад;
				Регистр.КомплектацияЗаявок.ВидДоставки=таблКомпл.ВидДоставки;
				Регистр.КомплектацияЗаявок.Товар="";
				Регистр.КомплектацияЗаявок.Статус=-1;
               			 //Регистр.КомплектацияЗаявок.ВесБрутто= Товар.Вес *КоличествоФакт * Коэффициент+ВесУпаковкиИнфо(Товар) * КоличествоФакт * Коэффициент; 
				Регистр.КомплектацияЗаявок.ДвижениеПриходВыполнить();
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		глПогашениеПоРезервам(Контекст,ПоСчету,регРезервы,регСпецЗаказы,РегКомпл,регЗаказыЗаявки);
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
			
			Если ПустоеЗначение(АгентПоТовару)=1 Тогда
				АгентПоТовару = глПолучитьАгентаПоТовару(ПоСчету.Клиент,ПоСчету.Агент,Товар);
			КонецЕсли;
			
			Если (ДатаДок>='01.07.17') И (ПоСчету.ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка) Тогда
				КолСравнить = Окр(Резерв*Коэффициент,3);
			Иначе
				КолСравнить = Окр(Количество*Коэффициент,3);
			КонецЕсли;
			
			Если (глНеобходимоНаличиеПретензии(Контекст,Товар,Единица.Единица,КолСравнить,КоличествоФактБазЕд)=1) ИЛИ (ПустоеЗначение(ТоварЗамена)=0)  Тогда
				Если (Константа.НовыйМеханизмПретензий.Получить(ДатаДок)=Да) Тогда
					
					
					
					Если (ПустоеЗначение(СутьПретензии)=1) И (ПоСчету.КлиентФилиала <> ПоСчету.Клиент) Тогда //проверка нужна только для документов введенных в локальной базе
						Если ГрупповаяОбработка()=0 Тогда
							НеПроводить(Контекст,"В строке "+НомерСтроки+" не указана суть претензии!");
						КонецЕсли;
					Иначе
						Регистр.ПретензииПолученные.ПривязыватьСтроку(НомерСтроки);
						Регистр.ПретензииПолученные.Фирма = Фирма;
						Регистр.ПретензииПолученные.Товар = Товар;
						Регистр.ПретензииПолученные.СутьПретензии = СутьПретензии;
						Регистр.ПретензииПолученные.СутьПретензииПодтв = СутьПретензии;
						Регистр.ПретензииПолученные.Агент = ?(ПустоеЗначение(ПоСчету.Агент.Родитель.АгентВнутр)=0,ПоСчету.Агент.Родитель.АгентВнутр,АгентПоТовару);
						Регистр.ПретензииПолученные.Клиент = ПоСчету.Клиент;
						Регистр.ПретензииПолученные.КлиентФилиала = ПоСчету.КлиентФилиала;
						Регистр.ПретензииПолученные.Поставщик = "";
						Регистр.ПретензииПолученные.ПоСчету = ПоСчету;
						Регистр.ПретензииПолученные.ПоДокументу = ПоСчету;
						Регистр.ПретензииПолученные.Количество = КолСравнить-КоличествоФактБазЕд;
						
						Если ПустоеЗначение(ПоСчету)=0 Тогда
							Регистр.ПретензииПолученные.АгентФилиала = ПоСчету.Агент;
						Иначе
							Регистр.ПретензииПолученные.АгентФилиала = Регистр.ПретензииПолученные.Агент.АгентКонсолидации;
						КонецЕсли;
						
						сзКлюч.УдалитьВсе();
						сзКлюч.ДобавитьЗначение(Товар);
						//сзКлюч.ДобавитьЗначение(НомерСтроки);
						иТабл.Подмножество(сзКлюч,1,"иТовар");
						рез=иТабл.ВыбратьСтроки("иТовар");
						
						Если рез = 0 Тогда
							Регистр.ПретензииПолученные.Сумма = 0;
						Иначе
							Регистр.ПретензииПолученные.Сумма = иТабл.Сумма/иТабл.Количество*(КолСравнить-КоличествоФактБазЕд);
						КонецЕсли;

						Регистр.ПретензииПолученные.ПретензияПолучена = 1;
						Регистр.ПретензииПолученные.СуммаПотерь = "";
						Регистр.ПретензииПолученные.ДвижениеВыполнить();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ПоСчету.ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка Тогда
	
				//прописываем претензию для недостачи товара на этапе формирования заявки
				Если (глНеобходимоНаличиеПретензии(Контекст,Товар,Единица.Единица,Количество,Макс(Резерв/Коэффициент,КоличествоФакт))=1) ИЛИ (ПустоеЗначение(ТоварЗамена)=0) Тогда

					Если ПустоеЗначение(СутьПретензииБаз)=1 Тогда
						//заполняем если не указана другой вид в документе
						СутьПретензииБаз = СутьПретензииOOS ;
					КонецЕсли;

					Регистр.ПретензииПолученные.ПривязыватьСтроку(НомерСтроки);
					Регистр.ПретензииПолученные.Фирма = Фирма;
					Регистр.ПретензииПолученные.Товар = Товар;
					Регистр.ПретензииПолученные.СутьПретензии = СутьПретензииБаз;
					Регистр.ПретензииПолученные.СутьПретензииПодтв = СутьПретензииБаз;
					Регистр.ПретензииПолученные.Агент = ?(ПустоеЗначение(ПоСчету.Агент.Родитель.АгентВнутр)=0,ПоСчету.Агент.Родитель.АгентВнутр,АгентПоТовару);
					Регистр.ПретензииПолученные.Клиент = ПоСчету.Клиент;
					Регистр.ПретензииПолученные.КлиентФилиала = ПоСчету.КлиентФилиала;
					Регистр.ПретензииПолученные.Поставщик = "";
					Регистр.ПретензииПолученные.ПоСчету = ПоСчету;
					Регистр.ПретензииПолученные.ПоДокументу = ПоСчету;
					Регистр.ПретензииПолученные.Количество = Количество-Макс(Резерв/Коэффициент,КоличествоФакт);
					
					Если ПустоеЗначение(ПоСчету)=0 Тогда
						Регистр.ПретензииПолученные.АгентФилиала = ПоСчету.Агент;
					Иначе
						Регистр.ПретензииПолученные.АгентФилиала = Регистр.ПретензииПолученные.Агент.АгентКонсолидации;
					КонецЕсли;
					
					сзКлюч.УдалитьВсе();
					сзКлюч.ДобавитьЗначение(Товар);
					//сзКлюч.ДобавитьЗначение(НомерСтроки);
					иТабл.Подмножество(сзКлюч,1,"иТовар");
					рез=иТабл.ВыбратьСтроки("иТовар");
					
					Если рез = 0 Тогда
						Регистр.ПретензииПолученные.Сумма = 0;
					Иначе
						Регистр.ПретензииПолученные.Сумма = иТабл.Сумма/иТабл.Количество*(Количество-Макс(Резерв,КоличествоФакт));
					КонецЕсли;
	
					Регистр.ПретензииПолученные.ПретензияПолучена = 1;
					Регистр.ПретензииПолученные.СуммаПотерь = "";
					Регистр.ПретензииПолученные.ДвижениеВыполнить();
					
				Иначе
					СутьПретензииБаз ="";
				КонецЕсли;				
			Иначе
				СутьПретензииБаз ="";
			КонецЕсли;		
				
			Если КоличествоФакт>0 Тогда
				Регистр.РезервыТоваров.ПривязыватьСтроку(НомерСтроки);
				Регистр.РезервыТоваров.Товар=?(ПустоеЗначение(ТоварЗамена)=1,Товар,ТоварЗамена);
				Регистр.РезервыТоваров.ПоСчету=ПоСчету; 
				Регистр.РезервыТоваров.РезервТовара=КоличествоФакт*Коэффициент;
				Регистр.РезервыТоваров.ДвижениеПриходВыполнить();  
				
				Регистр.КомплектацияЗаявок.ПривязыватьСтроку(НомерСтроки);
				Регистр.КомплектацияЗаявок.ДатаПоставки=ПоСчету.ДатаПоставки;
				Регистр.КомплектацияЗаявок.ПоСчету=ПоСчету;
				Регистр.КомплектацияЗаявок.ВидЗаявки=ПоСчету.ВидЗаявки;
				Регистр.КомплектацияЗаявок.МестоКомплектации=ПоСчету.Склад.МестоКомплектации;
				Регистр.КомплектацияЗаявок.Склад=ПоСчету.Склад;
				Регистр.КомплектацияЗаявок.ВидДоставки=ПоСчету.ВидДоставки;
				Регистр.КомплектацияЗаявок.Товар=?(ПустоеЗначение(ТоварЗамена)=1,Товар,ТоварЗамена);
				Регистр.КомплектацияЗаявок.Статус=3;
				Регистр.КомплектацияЗаявок.Количество=КоличествоФакт*Коэффициент;
				Регистр.КомплектацияЗаявок.Комплектовщик=Комплектовщик; 
               			 Регистр.КомплектацияЗаявок.ВесБрутто= Товар.Вес *КоличествоФакт * Коэффициент+ВесУпаковкиИнфо(Товар) * КоличествоФакт * Коэффициент; 
				Регистр.КомплектацияЗаявок.ДвижениеПриходВыполнить();
				
			КонецЕсли;
		КонецЦикла;
//проверка наличия общей заявки
			л_ДокОснование=ПоСчету.ДокументОснование;
			Если л_ДокОснование.Вид()="СчетОбщий" Тогда
				л_Док=СоздатьОбъект("Документ.СчетОбщий");
				л_Док.НайтиДокумент(л_ДокОснование);
				СостояниеДок=глПолучитьСостояниеДокумента(л_Док.ТекущийДокумент());
				Если СокрЛП(СостояниеДок)="Комплектуется" Тогда
					ДокПодч=СоздатьОбъект("Документ");
					ДокПодч.ВыбратьПодчиненныеДокументы(л_Док.ДатаДок,ТекущаяДата(),л_Док); //обычно создаются в тот же день.
					л_НовыйСтатус=1;	
					Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
						Если ДокПодч.Вид()="Счет" Тогда
							л_Сост = глПолучитьСостояниеЗаявки(ДокПодч.ТекущийДокумент(),0);
							Если ДокПодч.ТекущийДокумент()<>ПоСчету.ТекущийДокумент() Тогда
								Если л_Сост.Код="3" Тогда
								ИначеЕсли л_Сост.Код="-1" Тогда
								ИначеЕсли л_Сост.Код="0" Тогда
								Иначе
									л_НовыйСтатус=0;
								КонецЕсли;
							КонецЕсли;
							
							//Если ((л_Сост.Код<>"3")
							//	или (л_Сост.Код<>"-1")
							//	или (л_Сост.Код<>"0"))
							//	и(ДокПодч.ТекущийДокумент()<>ПоСчету.ТекущийДокумент())  Тогда
							//	л_НовыйСтатус=0;
							//КонецЕсли;
						КонецЕсли;	
					КонецЦикла;			
					
					Если л_НовыйСтатус=1 Тогда
						ГаситьРегистр(л_ДокОснование);
						
						Регистр.СостояниеДокумента.Док=л_ДокОснование;
						Регистр.СостояниеДокумента.Пользователь=Автор;
						Регистр.СостояниеДокумента.Количество=1;
						Регистр.СостояниеДокумента.СостояниеДок=УстановитьСостояние("Ожидает отгрузки",л_ДокОснование);
						Регистр.СостояниеДокумента.ДвижениеПриходВыполнить();								
					КонецЕсли;
				
				КонецЕсли;
			
			
			КонецЕсли;		
		
	КонецЕсли;

	НеВыгружать = ПоСчету.НеВыгружать;
	
	ОтправитьУведомления(Контекст);
	
    //Здесь следует написать алгоритм проведения документа
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеМОД(Контекст)=1 Тогда
	    Возврат;
	КонецЕсли;
	стар_ОбработкаПроведения();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаУдаленияПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеПоАлгоритмуМОД=1 Тогда
	    Возврат;
	КонецЕсли;
	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
	
	Если (НазваниеНабораПрав()="Администратор") ИЛИ (семЕстьПраво("Документ","КомплектацияЗаявкиФакт","Проведение задним числом")=1) Тогда
	ИначеЕсли ДатаДок <> ПолучитьДатуТА() Тогда // для случаев когда у пользователя есть права на изменение проведенных документов		
		Предупреждение("У Вас нет прав на отмену проведения документа задним числом");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	ПриОтменеПроведенияДокумента(ТекущийДокумент());

КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД



