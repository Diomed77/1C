//***********************************************************
//<<Алгоритм Успеха>> (begin)
//---------------
Процедура ВводНового(ФлКопирования,ОбъектКопирования);
	Предупреждение("Создается автоматически");
	СтатусВозврата(0);	
КонецПроцедуры
//***************************************************************
Процедура ВводНаОсновании(ДокОснование)
	
	Если Константа.НовыйМеханизмПретензий.Получить(ДатаДок)<>Да Тогда	
		Предупреждение("Данный документ пока недоступен!");
		СтатусВозврата(0);
	КонецЕсли;
	ЗаполнитьШапкуНаОсн(Контекст,ДокОснование);
	Если ДокОснование.Вид()="Счет" Тогда
		
		Если семМожноВводитьНаОснованииСчета( ДокОснование, "КомплектацияЗаявкиФакт" ) = 0 Тогда СтатусВозврата( 0 ); Возврат; КонецЕсли;
		
		Если ДокОснование.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаНаВозврат Тогда
			Предупреждение("Заявку на возврата товара можно только аннулировать!");
		КонецЕсли;
		
		
		ПоСчету = ДокОснование;
		СкладЗагрузки = ДокОснование.Склад;
		Комплектовщик = ДокОснование.Комплектовщик;
		Запрос=СоздатьОбъект("ODBCRecordSet");
		
//		ТекстЗапросКомпл="SELECT КомплектацияЗаявокОстатки.Статус
//		|				  FROM $РегистрОстатки.КомплектацияЗаявок(,,
//		|															(ПоСчету = :ВыбСчет),
//		|															Статус,) AS КомплектацияЗаявокОстатки
//		|";
//
//		Запрос.УстановитьТекстовыйПараметр("ВыбСчет",ДокОснование);
//		СтатусЗаявки=Запрос.ВыполнитьСкалярный(ТекстЗапросКомпл);
		
		СостояниеЗаявки=глПолучитьСостояниеЗаявки(ДокОснование);
		
		Если СостояниеЗаявки="Комплектуется" Тогда
			//можно 
		ИначеЕсли СостояниеЗаявки="Ожидает компл." Тогда
			
			п_Спр=СоздатьОбъект("Справочник.Контрагенты");
   			п_Спр.НайтиПоКоду("EE11304"); //SELVER AS

   			Если п_Спр<>ПоСчету.КлГруппа Тогда
//				Предупреждение("Данная заявка еще не была отправлена на комплектацию!");
//				СтатусВозврата(0);
//				Возврат;
			КонецЕсли;

		ИначеЕсли СостояниеЗаявки="Ожидает отгрузки" Тогда
			Предупреждение("Данная заявка не требует подтверждения комплектации!");			
			СтатусВозврата(0);
			Возврат;
		ИначеЕсли СостояниеЗаявки="Забронирован" Тогда
			//можно
			Предупреждение("Заявку на бронирование товара можно только аннулировать!");
			Аннулировать=1;
			Форма.Аннулировать.Доступность(0);
		Иначе 
			Предупреждение("Заявка находится в состоянии <"+ СостояниеЗаявки+">!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
		//Если СтатусЗаявки=2 Тогда
		//ИначеЕсли СтатусЗаявки = 1 Тогда
		//	Предупреждение("Данная заявка еще не была отправлена на комплектацию!");
		//	СтатусВозврата(0);
		//	Возврат;
		//Иначе
		//	Предупреждение("Возможно данная заявка уже закрыта!");
		//	СтатусВозврата(0);
		//	Возврат;
		//КонецЕсли;
		
		Если ПустоеЗначение(Комплектовщик)=1 Тогда
			//устанавливаем комплектовщика при вводе на основании заявки 
			СпрК=СоздатьОбъект("Справочник.Комплектовщики");
			Если СпрК.Выбрать("Выберите комплектовщика для эл. заявки <"+ДокОснование.НомерДок+">","ФормаСписка")=1 Тогда
				Комплектовщик = СпрК.ТекущийЭлемент();
			КонецЕсли;
		КонецЕсли;
		
		ТекстЗапроса="SELECT СчетСтроки.IDDOC [Ссылка $Документ.Счет]
		|					, $СчетСтроки.Товар [Товар $Справочник.Номенклатура]
		|					, СпрН.CODE ТовКод
		|					, $СчетСтроки.Количество Количество
		|					, CASE WHEN $Счет.ВидЗаявки = $Перечисление.ВидыЗаявок.СпецЗаказ THEN $СчетСтроки.Количество*$СчетСтроки.Коэффициент ELSE РезервыТоваровОстатки.РезервТовараОстаток/$СчетСтроки.Коэффициент END Резерв
		|					, CASE WHEN $Счет.ВидЗаявки = $Перечисление.ВидыЗаявок.СпецЗаказ THEN $СчетСтроки.Количество ELSE РезервыТоваровОстатки.РезервТовараОстаток/$СчетСтроки.Коэффициент END КоличествоФакт
		|					, CASE WHEN $Счет.ВидЗаявки = $Перечисление.ВидыЗаявок.СпецЗаказ THEN $СчетСтроки.Количество*$СчетСтроки.Коэффициент ELSE РезервыТоваровОстатки.РезервТовараОстаток END КоличествоФактБазЕд
		|					, $СчетСтроки.Единица [Единица $Справочник.Единицы]
		|					, $СчетСтроки.Коэффициент Коэффициент
		|					, $СчетСтроки.МинСрокРеализ МинСрокРеализ
		|					, $СчетСтроки.МаксСрокРеализ МаксСрокРеализ
		|					, РезервыТоваровОстатки.РезервТовараОстаток Резерв
		|			  FROM $ДокументСтроки.Счет AS СчетСтроки (NOLOCK)
		|			  INNER JOIN $Справочник.Номенклатура СпрН (NOLOCK) ON СпрН.ID = $СчетСтроки.Товар
		|			  INNER JOIN $Документ.Счет AS Счет (NOLOCK) ON Счет.IDDOC = СчетСтроки.IDDOC
		|			  LEFT OUTER JOIN $РегистрОстатки.РезервыТоваров(,,(ПоСчету = :ВыбСчет),Товар,) AS РезервыТоваровОстатки ON $СчетСтроки.Товар = РезервыТоваровОстатки.Товар
		|			  WHERE СчетСтроки.IDDOC = :ВыбСчет
		|			  ORDER BY LINENO_
		|";

		Запрос.УстановитьТекстовыйПараметр("ВыбСчет",ДокОснование);
		Табл=СоздатьОбъект("ТаблицаЗначений");
		табл=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
		
		ЗагрузитьТабличнуюЧасть(Табл);
		
		СутьПретензииOOS = СоздатьОбъект("Справочник.Претензии");
		СутьПретензииOOS.НайтиПоКоду("B02");
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			АгентПоТовару = глПолучитьАгентаПоТовару(ПоСчету.Клиент,ПоСчету.Агент,ДокОснование.Товар);
			Если Количество>КоличествоФакт Тогда
//				СутьПретензии = СутьПретензииOOS.ТекущийЭлемент();
			КонецЕсли;			
			Если Единица.Единица<>Товар.БазоваяЕдиницаИзмерения Тогда
				КоличествоФактБазЕд = КоличествоФакт*Коэффициент;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

//------------------------------------------ 
Процедура ПриОткрытии() //предопределенная

	ПроверкаРазрешенияРедактирования(Контекст);	
	Если (НазваниеНабораПрав()="Администратор") ИЛИ (семЕстьПраво("Документ","КомплектацияЗаявкиФакт","Проведение задним числом")=1) Тогда
	ИначеЕсли ДатаДок < ПолучитьДатуТА() Тогда // для случаев когда у пользователя есть права в конфигурации на изменение проведенных документов
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	ПриЗаписиПерепроводить(1);
	
	Форма.кнЗамена.Доступность(1-Проведен());
	
	СостояниеЗаявки = глПолучитьСостояниеЗаявки(ПоСчету,0);
	//Сообщить("Состояние: "+СостояниеЗаявки.Код);
	Если (Проведен()=1) И (Число(СостояниеЗаявки.Код) <> 3) Тогда
		Предупреждение("При коррекции данного документа и заявке в состоянии <"+СостояниеЗаявки+"> необходимо после коррекций перепровести все последующие документы!");
//		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	Если (НазваниеНабораПрав()="Администратор") Тогда
		Форма.НомерДок.Доступность(1);	
	КонецЕсли;
	
КонецПроцедуры //ПриОткрытии
//--------------------------------------------


Процедура стар_ПриЗаписи()
	
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД

Процедура ПриЗаписи() Далее
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписи()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
//	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
   стар_ПриЗаписи();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД

Функция ВыборСутиПретензии()

		Запрос=СоздатьОбъект("ODBCRecordSet");
		УсловиеСклад="";
		Если ПоСчету.Склад.ТипСклада=Перечисление.ТипыСкладов.СкладРаспродажи Тогда
			УсловиеСклад=" AND $Претензии.ЗапретВыбораДляСкладаРаспродажи = 0";
		КонецЕсли;
		
		ТекстЗапроса="SELECT Претензии.CODE Код
		|					, Претензии.ID [Ссылка $Справочник.Претензии]
		|					, $Претензии.НаименованиеРусс СутьПретензии
		|			  FROM $Справочник.Претензии AS Претензии (NOLOCK)
		|			  WHERE ISMARK = 0 AND $Претензии.ДляКомплектацииФакт = 1
		|					"+УсловиеСклад+"
		|			  ORDER BY CODE
		|";
		
		
		табл=СоздатьОбъект("ТаблицаЗначений");
		табл=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
		табл.ВидимостьКолонки("Ссылка",0);
		ном=0;
		Если табл.ВыбратьСтроку(ном,"Выберите причичину претензии")=1 Тогда
			Возврат табл.ПолучитьЗначение(ном,"Ссылка");
		Иначе
			Возврат ПолучитьПустоеЗначение("Справочник.Претензии");
		КонецЕсли;

КонецФункции

Процедура ЗаполнитьСутьПретензии()
	
	// выбираем вариант заполнения
	сп = СоздатьОбъект( "СписокЗначений" );
	сп.ДобавитьЗначение(0,"Заполнить все");
	сп.ДобавитьЗначение(1,"Заполнить где требуется");
	выб = 0; Если сп.ВыбратьЗначение(выб,,,,1) = 0 Тогда Возврат; КонецЕсли;
	
	спр=ВыборСутиПретензии();

	Если ПустоеЗначение(Спр)=1 Тогда
		Возврат;
	КонецЕсли;
	// заполняем причину притензии согласно выбранному варианту
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если выб = 1 Тогда
			Если СутьПретензии.Выбран() = 1 Тогда Продолжить; КонецЕсли;
		КонецЕсли;
		
		Если Аннулировать=0 Тогда
			Если глНеобходимоНаличиеПретензии(Контекст,Товар,Единица.Единица,Количество,КоличествоФакт)=1 Тогда
				СутьПретензии = спр;
			КонецЕсли;
		Иначе
			СутьПретензии = спр;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


Процедура ПриУдаленииСтроки()
	СтатусВозврата(0);
КонецПроцедуры

Процедура ПриНачалеРедактированияСтроки()
	Если (Форма.ТекущаяКолонка()="СутьПретензии") И (глНеобходимоНаличиеПретензии(Контекст,Товар,Единица.Единица,Количество,КоличествоФакт)=1) Тогда 
		Если (Константа.НовыйМеханизмПретензий.Получить(ДатаДок)<>Да) Тогда
			СтатусВозврата(0);
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

Процедура ПриОкончанииРедактированияСтроки()
   Если глНеобходимоНаличиеПретензии(Контекст,Товар,Единица.Единица,Окр(Резерв*Коэффициент,3),КоличествоФактБазЕд)=1 Тогда
		выб=ВыборСутиПретензии();
		Если ПустоеЗначение(выб)=1 Тогда
			СтатусВозврата(0);
			Возврат;
		Иначе
			УстановитьАтрибут("СутьПретензии",выб);
		КонецЕсли;
   КонецЕсли;
КонецПроцедуры

Процедура ПриНачалеВыбораЗначения(ИдЭлем, ФлагСт)
	Если (ИдЭлем="СутьПретензии") Тогда
		ФлагСт=0;
		выб=ВыборСутиПретензии();
		Если ПустоеЗначение(выб)=1 Тогда
			Возврат;
		Иначе
			УстановитьАтрибут(ИдЭлем,выб);
		КонецЕсли;
	ИначеЕсли (ИдЭлем="СутьПретензииБаз") Тогда
		ФлагСт=0;
		выб=ВыборСутиПретензии();
		Если ПустоеЗначение(выб)=1 Тогда
			Возврат;
		Иначе
			УстановитьАтрибут(ИдЭлем,выб);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Функция СвободныйОстатокТовараНаСкладе(пТовар)
	
	Если ПустоеЗначение(пТовар)=1 Тогда
		Возврат "";
	КонецЕсли;
	Рез=Регистр.РезервыТоваров.СводныйОстаток(пТовар,,"РезервТовара");
	Если ПоСчету.Склад.Выбран()=1 Тогда
		Возврат Формат(Макс(Регистр.ОстаткиТоваров.СводныйОстаток(пТовар,ПоСчету.Склад,,"ОстатокТовара")-Рез,0),"Ч10.3");
	Иначе
		Возврат Формат(Регистр.ОстаткиТоваров.СводныйОстаток(пТовар,,,"ОстатокТовара")-Рез,"Ч10.3");
	КонецЕсли;
КонецФункции


Процедура кнЗамена()
	
	Если Товар.Выбран()=1 Тогда
		Если Вопрос("Вы хотите сделать замену товара <"+Товар.Код+ " "+Товар,"Да+Нет")="Да" Тогда
			
			//Если НомерСтрокиЗамены>0 Тогда
			//	//ищем строку замены в заявке
			//	ПоСчету.ПолучитьСтрокуПоНомеру(НомерСтрокиЗамены);
			//Иначе
			ПоСчету.ПолучитьСтрокуПоНомеру(НомерСтроки);
			тСчет=СоздатьОбъект("ТаблицаЗначений");
			ПоСчету.ВыгрузитьТабличнуюЧасть(тСчет);
//			КонецЕсли;
			//таблЗаявки = СоздатьОбъект("ИндексированнаяТаблица");
			//таблЗаявки.Загрузить(ПоСчету);
			//таблЗаявки.ДобавитьИндекс("иТовар","*Товар");
			//Если таблЗаявки.НайтиСтроку(Товар,"иТовар",,1)>0 Тогда
			Если ПоСчету.Товар=Товар Тогда

				Спр=СоздатьОбъект("Справочник.Номенклатура");
				Спр.НайтиЭлемент(ТоварЗамена);
				//ОткрытьПодбор("Номенклатура","ДляПодбора",Спр.ТекущийЭлемент(),0,ТоварЗамена);
				//УстановитьЗначениеВПодборе("Склад",СкладЗагрузки);
				
				Если Спр.Выбрать("Выберите товар для замены","ДляПодбора")=1 Тогда
					Если Спр.ТекущийЭлемент() = Товар Тогда
						Предупреждение("Товар для замены не может быть таким же!");
						Возврат;
					КонецЕсли;
					
					Если Спр.БазоваяЕдиницаИзмерения <> Товар.БазоваяЕдиницаИзмерения Тогда
//						Предупреждение("Замену можно производить только для товаров с одинаковыми единицами измерения!");
						Предупреждение("Производится замена товара с другой единицей измерения - ВНИМАНИЕ проверьте правильность пересчета кол-ва!");
//						Возврат;
					КонецЕсли;
					ТоварЗамена = Спр.ТекущийЭлемент();
					выб=ВыборСутиПретензии();
					Если ПустоеЗначение(выб)=1 Тогда
						Возврат;
					Иначе
						УстановитьАтрибут("СутьПретензии",выб);
					КонецЕсли;
					
					
					СпрЦены = семПолучитьЦенуТовара( ТоварЗамена, ПоСчету.КатегорияЦены, ПоСчету.ДатаПоставки);

					Попытка
						Цена     = Окр(СпрЦены.Цена,СпрЦены.КатегорияЦеныТочность)/?(СпрЦены.ЕдиницаКоэффициент = 0,1,СпрЦены.ЕдиницаКоэффициент);
					Исключение
						Цена     = 0;
					КонецПопытки;					

					//Цена = ПоСчету.Цена;
					Если ВвестиЧисло(Цена,"Введите новую цену товара для замены",17,5)=1 Тогда
						Док=СоздатьОбъект("Документ.Счет");
						Док.НайтиДокумент(ПоСчету);
						
						рез=НайтиСтрокуТЗ(тСчет,"Товар",Спр.ТекущийЭлемент());
						Если рез>0 Тогда
							Сообщить("В эл. заявке в строке "+рез + "уже есть товар, на который Вы хотите поменять. Используйте коррекцию факта!");
							Возврат;
						КонецЕсли;
						
						Если НомерСтрокиЗамены>0 Тогда
							Док.ПолучитьСтрокуПоНомеру(НомерСтрокиЗамены);
						Иначе
							Док.НоваяСтрока();
						КонецЕсли;
						Док.Товар = ТоварЗамена;
						Док.Количество = ПоСчету.Количество;
						Кол=Док.Количество;
						Если ВвестиЧисло(Кол,"Введите кол-во товара замены",12,3)=1 Тогда
							Док.Количество=Кол;
						Иначе
							Возврат;
						КонецЕсли;

						КоличествоФакт = Док.Количество;
						
						семПроверкаМинОтргКолва( Док );
						УстанЦеныРасх(Док,"Подбор");						
						Док.Цена = Цена;
						Выч_суммы_накл(Док,0,1);
						Док.НомерСтрокиЗамены = ПоСчету.НомерСтроки;
						НомерСтрокиЗамены = Док.НомерСтроки;
						ОбъектЗаписать(Док,);
						Сообщить("Проводится эл. заявка "+Док.НомерДок+"...");
						кВклПроверкуВремениЭлЗаявок = 0;
						Если Док.Провести()=1 Тогда
							ЗаписьЖурналаРегистрации( "Эл. заявка "+Док.НомерДок+" успешно проведена и добавлен товар замены!",, "Комплектация заявок по факту", Док.ТекущийДокумент(), 2 );
							Сообщить("В эл. заявку "+Док.НомерДок+" успешно добавлен товар замены!");
							Записать();
						Иначе
							ЗаписьЖурналаРегистрации( "Эл. заявка "+Док.НомерДок+" не проведена и товар замены не добавлен!",, "Комплектация заявок по факту", Док.ТекущийДокумент(), 2 );
							Сообщить("Товар замены не добавлен в эл. заявку. Операция отменена!");
							ТоварЗамена = "";
						КонецЕсли;
						кВклПроверкуВремениЭлЗаявок = 1;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Сообщить("В эл. заявке в строке "+НомерСтроки+" товар <"+ ПоСчету.Товар.Код + " " + ПоСчету.Товар + "> не соответствует товару в комплектации <"+ Товар.Код + " " + Товар + ">!");
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура семПроверкаМинОтргКолва( ) Экспорт
	Если Пользователь.РазрПродМеньшеМинКол = 1 Тогда 
		Возврат; 
	КонецЕсли;

	Если Аннулировать=1 Тогда
		Возврат;
	КонецЕсли;
	
	Если Товар.Выбран() = 0 Тогда 
		Возврат; 
	КонецЕсли;
	
	Если Товар.БазоваяЕдиницаИзмерения=Перечисление.ЕдиницыИзмерения.Килограмм Тогда
		//для весовых единиц не проверяем
		Возврат;
	КонецЕсли;
	
	
	пОтгрКол = Товар.ОтгрКол;
	Если пОтгрКол = 0 Тогда 
		Возврат; 
	КонецЕсли;
	
	пКол = КоличествоФакт * Коэффициент;
	Если пКол = 0 Тогда 
		Возврат; 
	КонецЕсли;
	
	КоличествоФактБазЕд = пКол;
	
	Ост = Регистр.ОстаткиТоваров.СводныйОстаток(Товар,СкладЗагрузки,,"ОстатокТовара");
	Если пКол <= Ост Тогда
		Возврат;
	КонецЕсли;
	
	пКоэфКратн = пКол / пОтгрКол;
	Если Цел( пКоэфКратн ) <> пКоэфКратн Тогда
		пПравКолво = пОтгрКол*Окр( пКоэфКратн, 0, 1 );
		пПравКолво = макс( пОтгрКол, пПравКолво ) / Коэффициент;
		пЕдИзм = Товар.БазоваяЕдиницаИзмерения;
		Предупреждение( "
		|НЕПРАВИЛЬНОЕ КОЛИЧЕСТВО !!!
		|Мин. отгруз. кол-во:	" +Шаблон( "[пОтгрКол  #Ч15.2, ] ([пЕдИзм])" ) + "
		|Количество изменено на	"+ Шаблон( "[пПравКолво  #Ч15.2, ] ([пЕдИзм])" ) + "
		);
		КоличествоФакт = пПравКолво;
	КонецЕсли;
КонецПроцедуры

Процедура ПересчетФактКол()
	КоличествоФакт = КоличествоФактБазЕд/Коэффициент;          
	
	Если пустоеЗначение(СрокРеализ)=0 Тогда
		Если Форма.ТекущаяКолонка()="КоличествоФактБазЕд" Тогда
			КоличествоФактБазЕдСрокРеализДоп = КоличествоФактБазЕд-КоличествоФактБазЕдСрокРеализ;
			КоличествоФактБазЕдСрокРеализ = КоличествоФактБазЕд - КоличествоФактБазЕдСрокРеализДоп;
		ИначеЕсли Форма.ТекущаяКолонка()="КоличествоФактБазЕдСрокРеализ" Тогда
			КоличествоФактБазЕдСрокРеализДоп = КоличествоФактБазЕд-КоличествоФактБазЕдСрокРеализ;
		ИначеЕсли Форма.ТекущаяКолонка()="КоличествоФактБазЕдСрокРеализДоп" Тогда
			КоличествоФактБазЕдСрокРеализ = КоличествоФактБазЕд-КоличествоФактБазЕдСрокРеализДоп;
		КонецЕсли;
	КонецЕсли;                                       
	
КонецПроцедуры
