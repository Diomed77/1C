Перем Режим;
Перем кОсновнаяКатегорияЦены,кРозничнаяКатегорияЦены;
Перем ВалютаСтар;
Перем пПрайсЛист;

Перем гЭлементУправления;
Перем гКнига;
Перем гЛисты; // Порядок следования больших и малых букв верен!
Перем гСтараяЗакладка;
Перем ВременнаяТаблица;

Процедура РассчитатьСтроку(парам ="") Далее

Функция ВыбратьФайл (ИмяФайла, РасширениеФайла, ТипДиалога = 0)
	ВремИмяФайла = ИмяФайла;
	ВремИмяКаталога = "";
	Если ФС.ВыбратьФайл (ТипДиалога, ВремИмяФайла, ВремИмяКаталога,,
		"Файлы " + РасширениеФайла + " (*." + РасширениеФайла + ")|*." + РасширениеФайла, РасширениеФайла) = 0 Тогда
			
		Возврат 0;
	КонецЕсли;
	
	Возврат ВремИмяКаталога + ВремИмяФайла;
КонецФункции


Функция ЗагрузкаИТ(п_ДокОснования,п_Дата)
	л_ИТ=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос=СоздатьОбъект("ODBCRecordSet");
	
	ТекстЗапроса="SELECT ПереоценкаТоваров.IDDOC [Ссылка $Документ.ПереоценкаТоваров]
	|	, NullIf(Cast(Left(Журнал.DATE_TIME_IDDOC, 8) AS datetime), '17530101') Документ_дата
	|FROM $Документ.ПереоценкаТоваров AS ПереоценкаТоваров
	|	LEFT OUTER JOIN _1SJOURN AS Журнал ON ПереоценкаТоваров.IDDOC = Журнал.IDDOC
	|WHERE ($ПереоценкаТоваров.ДокументОснование = $ВидДокумента36.ПереоценкаТоваров + :пДокОснования)
	|AND (Cast(Left(Журнал.DATE_TIME_IDDOC, 8) AS datetime) >= :пДата)
	|";	
	
	Запрос.УстановитьТекстовыйПараметр("пДата",п_Дата);
	Запрос.УстановитьТекстовыйПараметр("пДокОснования",п_ДокОснования);	
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,л_ИТ);
	Возврат л_ИТ;
КонецФункции

//======================================================================
Функция ПоискПоСпр(п_Наименование)
	спр = СоздатьОбъект( "Справочник.КатегорииЦен" );
	Если спр.НайтиПоНаименованию(п_Наименование)=1 Тогда
		Возврат спр.ТекущийЭлемент();
	КонецЕсли;
	Возврат ПолучитьПустоеЗначение(спр);
КонецФункции // ПоискПоСпр


Функция ПроверкаНаличияПодчиненыхФилиала()
	Док = СоздатьОбъект("Документ");
	Док.ВыбратьПодчиненныеДокументы(ДатаДок,,ТекущийДокумент());
	Пока Док.ПолучитьДокумент() = 1 Цикл
		Если Док.Вид()="ПереоценкаТоваров" Тогда
			Если Док.КатегорияЦены=  ПоискПоСпр("Литва Оптовая") Тогда
				Возврат 1;
			ИначеЕсли Док.КатегорияЦены=ПоискПоСпр("Эстония Оптовая") Тогда
				Возврат 1;
			Иначе
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат 0;
КонецФункции // ТаблицаПодчиненыхДок

Процедура КопироватьДокумент(_Источник, _Приемник)
	////////////////////////////////////////////////////////////
	/// Возможна ошибка копирования, проверь наличие всех реквезитов в документекопия !!
	/////////////////////////////////////////////////////////////
	Для ъ = 1 По Метаданные.ОбщийРеквизитДокумента() Цикл
		Реквизит = Метаданные.ОбщийРеквизитДокумента(ъ).Идентификатор;
		Попытка
			_Приемник.УстановитьАтрибут(Реквизит, _Источник.ПолучитьАтрибут(Реквизит));
	 	Исключение
//	  		Сообщить(Реквизит);
	  	КонецПопытки;	
	КонецЦикла;

	Для ъ = 1 По Метаданные.Документ(_Источник.Вид()).РеквизитШапки() Цикл
		Реквизит = Метаданные.Документ(_Источник.Вид()).РеквизитШапки(ъ).Идентификатор;
		Попытка
			_Приемник.УстановитьАтрибут(Реквизит, _Источник.ПолучитьАтрибут(Реквизит));
	 	Исключение
//	  		Сообщить(Реквизит);
	  	КонецПопытки;	
	КонецЦикла;

	_Источник.ВыбратьСтроки();
	Пока _Источник.ПолучитьСтроку() = 1 Цикл
		_Приемник.НоваяСтрока();
		Для ъъ = 1 По Метаданные.Документ(_Источник.Вид()).РеквизитТабличнойЧасти() Цикл
			Реквизит = Метаданные.Документ(_Источник.Вид()).РеквизитТабличнойЧасти(ъъ).Идентификатор;
			Попытка
	  			_Приемник.УстановитьАтрибут(Реквизит, _Источник.ПолучитьАтрибут(Реквизит));
	  		Исключение
//	  			Сообщить(Реквизит);
	  		КонецПопытки;	
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры	// КопироватьДокумент
Функция КлонироватьДокумент(п_ДокКлонирования,п_КатегорияЦены)
	Перем л_Док;

	л_Док = СоздатьОбъект("Документ.ПереоценкаТоваров");	
	л_Док.Новый();
	л_Док.Записать();
	КопироватьДокумент(п_ДокКлонирования,л_Док);
	л_Док.IDD=ПолучитьУникальныйIDD();
	л_Док.КатегорияЦены = п_КатегорияЦены;
	л_Док.ДокументОснование=п_ДокКлонирования;
	л_Док.ДатаДок=ДатаДок;
	л_Док.Записать();
	Возврат л_Док;
КонецФункции


Процедура кнРассылка()
	Если Модифицированность() = 1 Тогда
		Ответ = Вопрос("Документ не был записан после внесенных изменений. Записать?","Да+Нет",60);
		Если Ответ <> "Да" Тогда Возврат; КонецЕсли;
		Записать(); 
	КонецЕсли;
	сп = СоздатьОбъект( "СписокЗначений" );
	сп.Установить("Документ",ТекущийДокумент());
	Путь = КаталогИБ() + "ExtForms\РассылкаПрайсЛиста.ert";
	ОткрытьФормуМодально("Отчет",сп,Путь);
КонецПроцедуры

Процедура ПриУдаленииСтроки()    
	Если Вопрос("Вы действительно хотите удалить строку?","Да+Нет")="Да" Тогда
	Иначе
		СтатусВозврата(0);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьБазовуюЕдиницу( пТовар )
	Если пТовар.Выбран() = 0 Тогда Возврат ПолучитьПустоеЗначение("Справочник.Единицы"); КонецЕсли;
	пБазЕд = Товар.БазоваяЕдиницаИзмерения;
	спр=СоздатьОбъект("Справочник.Единицы");
	спр.ИспользоватьВладельца(пТовар);
	спр.ВыбратьЭлементы();
	Пока спр.ПолучитьЭлемент() = 1 Цикл
		Если Спр.ПометкаУдаления()=1 Тогда
			Продолжить;
		КонецЕсли;
		Если спр.Единица = пБазЕд Тогда
			Возврат спр.ТекущийЭлемент();
		КонецЕсли;
	КонецЦикла;
	глСоздатьНовыйОбъект(спр);
	спр.Единица=пБазЕд;
	спр.Коэффициент=1;
	спр.Наименование=Строка(пБазЕд);
	ОбъектЗаписать(спр, );
	Возврат спр.ТекущийЭлемент();
КонецФункции

Процедура ИмпортИзТаблицы()
	
	Если Вопрос("Все строки будут удалены. Продолжить?","Да+Нет")="Да" Тогда
		УдалитьСтроки();
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос=СоздатьОбъект("ODBCRecordSet");
	ТекстЗапроса = " SELECT Спр.ID [Ссылка $Справочник.Номенклатура]
	|						, КодТовара
	|						, Товар
	|						, CenaEURARPVN
	|				 FROM Переоценка
	|				 LEFT JOIN $Справочник.Номенклатура Спр (NOLOCK) ON Спр.CODE = КодТовара
	|				 WHERE НомерДок = :НомерДок
	|";
	
	Запрос.УстановитьТекстовыйПараметр("НомерДок",СокрЛП(НомерДок));
	табл=СоздатьОбъект("ТаблицаЗначений");
	табл=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
	табл.ВыбратьСтроку();
	
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку() = 1 Цикл

		НоваяСтрока();

		Если ПустоеЗначение(табл.Ссылка)=1 Тогда
			Сообщить("Не найден товар с кодом "+табл.КодТовара);
		Иначе
			Товар = табл.Ссылка;
		КонецЕсли;
		ТовКод = табл.КодТовара;
		РассчитатьСтроку( "Товар" );
		ЦенаСНДСEUR = табл.CenaEURARPVN;
		РассчитатьСтроку("ЦенаСНДСEUR");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура кнЗаполнить()
	Путь = КаталогИБ() + "ExtForms\ПереоценкаТоваровЗаполнить02.ert";
	спПарам = СоздатьОбъект( "СписокЗначений" );
	//спПарам.Установить( "Отдел", Отдел );
	спПарам.Установить( "КатегорияЦены", КатегорияЦены );
	спПарам.Установить( "ДатаДок", ДатаДок );
	спПарам.Установить( "Валюта", Валюта );
	ОткрытьФормуМодально( "Обработка", спПарам, Путь );
	ЗагрузитьТабличнуюЧасть(спПарам.Получить("Таблица"));
КонецПроцедуры

Процедура ЗаполнениеПоГруппеСкладу()
	Если ВидПереоценки=Перечисление.ВидыПереоценки.ПрайсЛист Тогда
		Предупреждение("Данная процедура заполнения предусмотрена только для переоценки!");
		Возврат;
	КонецЕсли;
	Путь = КаталогИБ() + "ExtForms\Служеб\ЗаполнениеПоГруппеСкладу.ert";
	спПарам = СоздатьОбъект( "СписокЗначений" );
	спПарам.Установить( "КатегорияЦены", КатегорияЦены );
	спПарам.Установить( "ДатаДок", ДатаДок );
	спПарам.Установить( "Валюта", Валюта );
	ОткрытьФормуМодально( "Обработка", спПарам, Путь );
	ЗагрузитьТабличнуюЧасть(спПарам.Получить("Таблица"));
КонецПроцедуры

//Procedure Choice() //Stas
//	Режим="Каталог";
//	ОткрытьПодбор("Номенклатура","ДляПодбора");
//	УстановитьЗначениеВПодборе("Склад",Константа.ОсновнойСклад);
//	
//endProcedure

//********************************
Процедура Доступ()
	
	РознЦена= КатегорияЦены.Розница;
	
	Форма.ЦенаСНДС.Видимость(РознЦена);
	Форма.ПредЦенаСНДС.Видимость(РознЦена);
	Форма.ПредЦена.Видимость(1-РознЦена); 
	Форма.Цена.Видимость(1-РознЦена);
	Форма.КодДляРозницы.Видимость(РознЦена);

	Форма.ПредЗакЦена.Видимость(?(ВидПереоценки = пПрайсЛист,1,0));
	Форма.ЗакЦена.Видимость(?(ВидПереоценки = пПрайсЛист,1,0));
	Форма.ВалютаЗак.Видимость(?(ВидПереоценки = пПрайсЛист,1,0));
	Форма.Наценка.Видимость(?(ВидПереоценки = пПрайсЛист,1,0));
	Форма.НаценкаТр.Видимость(?(ВидПереоценки = пПрайсЛист,1,0));
	Форма.кнЗаполнить.Видимость(?(ВидПереоценки = пПрайсЛист,1,0));
	//Форма.кнРассылка.Видимость(?(ВидПереоценки = пПрайсЛист,1,0));
	
	Форма.КатегорияЦены.Доступность(1-Пользователь.CashCarry);
	//Форма.кнИмпорт.Видимость(?(НазваниеНабораПрав()="Администратор",1,0));
	//Форма.тОтдел.Видимость(?(ВидПереоценки = пПрайсЛист,1,0));
	//Форма.Отдел.Видимость(?(ВидПереоценки = пПрайсЛист,1,0));
КонецПроцедуры


//********************************

Процедура РассчитатьСтроку( парам = "" )
	Если парам = "" Тогда
		парам = Форма.ТекущаяКолонка();
	КонецЕсли;
	
	Если парам="ЦенаСНДС" Тогда
		Цена=ЦенаСНДС/(1+(ПроцентНДС(Товар.СтавкаНДС)/100));
		Цена=Окр( Цена, КатегорияЦены.Точность, 1 );
		ЦенаEUR = Пересчет(Цена,Валюта,ДатаДок,Евро,ДатаДок);
		ЦенаСНДСEUR = Пересчет(ЦенаСНДС,Валюта,ДатаДок,Евро,ДатаДок);
		промЗакЦена = Пересчет(ЗакЦена,ВалютаЗак,ДатаДок,Валюта,ДатаДок);
		промЗакЦена = промЗакЦена+(промЗакЦена*НаценкаТр/100);
		Если промЗакЦена = 0 Тогда Возврат; КонецЕсли;
		Наценка = ((Цена - промЗакЦена) / промЗакЦена )*100;
	ИначеЕсли парам="Единица" Тогда
		Коэффициент = Единица.Коэффициент;
	ИначеЕсли парам="Товар" Тогда
		Если ПустоеЗначение(ТовКод)=1 Тогда
			ТовКод = Товар.Код;
		КонецЕсли;
		Единица = ПолучитьБазовуюЕдиницу( Товар );
		РассчитатьСтроку( "Единица" );
		ПредЦена = семПолучитьЦенуТовара(Товар,КатегорияЦены,ДатаДок).Цена;
		Если ВидПереоценки = пПрайсЛист Тогда
			ВалютаЗак = семПолучитьКатегориюЦеныПоНаим("Закупочная").ОсновнаяВалюта;
			РассчитатьСтроку( "ВалютаЗак" );
		Иначе
			ЦенаСНДС=Пересчет(ЦенаСНДС,ВалютаСтар,ДатаДок,Валюта,ДатаДок);
			Цена=Пересчет(Цена,ВалютаСтар,ДатаДок,Валюта,ДатаДок);
			РассчитатьСтроку( "Цена" );
		КонецЕсли;
	ИначеЕсли парам="ЗакЦена" Тогда
		промЗакЦена = Пересчет(ЗакЦена,ВалютаЗак,ДатаДок,Валюта,ДатаДок);
		промЗакЦена = промЗакЦена+(промЗакЦена*НаценкаТр/100);
		Цена=промЗакЦена+(промЗакЦена*Наценка/100);
		ЦенаСНДС=Цена*(1+ПроцентНДС(Товар.СтавкаНДС)/100);
		Цена=Окр( Цена, КатегорияЦены.Точность, 1 );
	ИначеЕсли парам = "Цена" Тогда
		ЦенаEUR = Пересчет(Цена,Валюта,ДатаДок,Евро,ДатаДок);
		ЦенаСНДС=Цена*(1+ПроцентНДС(Товар.СтавкаНДС)/100);
		ЦенаСНДСEUR = Пересчет(ЦенаСНДС,Валюта,ДатаДок,Евро,ДатаДок);
		промЗакЦена = Пересчет(ЗакЦена,ВалютаЗак,ДатаДок,Валюта,ДатаДок);
		промЗакЦена = промЗакЦена+(промЗакЦена*НаценкаТр/100);
		Если промЗакЦена = 0 Тогда Возврат; КонецЕсли;
		Наценка = ((Цена - промЗакЦена) / промЗакЦена )*100;
	ИначеЕсли парам = "ЦенаEUR" Тогда
		Цена = Пересчет(ЦенаEUR,Евро,ДатаДок,Валюта,ДатаДок);
		ЦенаСНДС=Цена*(1+ПроцентНДС(Товар.СтавкаНДС)/100);
		ЦенаСНДСEUR = Пересчет(ЦенаСНДС,Валюта,ДатаДок,Евро,ДатаДок);
		промЗакЦена = Пересчет(ЗакЦена,ВалютаЗак,ДатаДок,Валюта,ДатаДок);
		промЗакЦена = промЗакЦена+(промЗакЦена*НаценкаТр/100);
		Если промЗакЦена = 0 Тогда Возврат; КонецЕсли;
		Наценка = ((Цена - промЗакЦена) / промЗакЦена )*100;
	ИначеЕсли парам = "ЦенаСНДСEUR" Тогда
		ЦенаEUR=ЦенаСНДСEUR/(1+(ПроцентНДС(Товар.СтавкаНДС)/100));
		Цена=Пересчет(ЦенаEUR,Евро,ДатаДок,Валюта,ДатаДок);
		Цена=Окр( Цена, КатегорияЦены.Точность, 1 );
		ЦенаСНДС=Цена*(1+ПроцентНДС(Товар.СтавкаНДС)/100);
		промЗакЦена = Пересчет(ЗакЦена,ВалютаЗак,ДатаДок,Валюта,ДатаДок);
		промЗакЦена = промЗакЦена+(промЗакЦена*НаценкаТр/100);
		Если промЗакЦена = 0 Тогда Возврат; КонецЕсли;
		Наценка = ((Цена - промЗакЦена) / промЗакЦена )*100;
	ИначеЕсли парам = "ВалютаЗак" Тогда
		катЗакупочная = семПолучитьКатегориюЦеныПоНаим("Закупочная");
		промЦена = семПолучитьЦенуТовара(Товар,катЗакупочная,ДатаДок);
		ПредЗакЦена = Пересчет(промЦена.Цена.Получить(ДатаДок),катЗакупочная.ОсновнаяВалюта,ДатаДок,ВалютаЗак,ДатаДок);
		ЗакЦена = 0;
	КонецЕсли;
	
	//Переоценка=(Цена-ПредЦена)*Количество*Коэффициент;
КонецПроцедуры
//----------------------------------------------

//Процедура ПриИзмененииВалютыЗак()
//	катЗакупочная = семПолучитьКатегориюЦеныПоНаим("Закупочная");
//	промЦена = семПолучитьЦенуТовара(Товар,катЗакупочная);
//	ПредЗакЦена = Пересчет(промЦена.Цена.Получить(ДатаДок),катЗакупочная.ОсновнаяВалюта,ДатаДок,ВалютаЗак,ДатаДок);
//	ЗакЦена = ПредЗакЦена;
//	//
//	//Цена=ЗакЦена+(ЗакЦена*Наценка/100)+(ЗакЦена*НаценкаТр/100);
//	//ЦенаСНДС=Цена*(1+ПроцентНДС(Товар.СтавкаНДС)/100);
//	//Цена=Окр( Цена, КатегорияЦены.Точность, 1 );
//	//Переоценка=(Цена-ПредЦена)*Количество*Коэффициент;
//КонецПроцедуры


//Процедура ПолучитьОстаток()
//	
//	Если Товар.Выбран()>0 Тогда
//		Спр=СоздатьОбъект("Справочник.Единицы");
//		Спр.ИспользоватьДату(ДатаДок);
//		Спр.ИспользоватьВладельца(Товар);
//		Спр.ВыбратьЭлементы();
//		ФлагНашли=0;
//		Пока (Спр.ПолучитьЭлемент()>0)И(ФлагНашли=0) Цикл
//			Если Спр.Единица=Товар.БазоваяЕдиницаИзмерения Тогда
//				// если базовая единица уже прописана в Справочнике "Единицы"
//				Единица=Спр.ТекущийЭлемент();
//				Коэффициент=Спр.Коэффициент;
//				ФлагНашли=1;
//			КонецЕсли;
//		КонецЦикла;
//		
//		// если базовая единица еще не  прописана в Справочнике "Единицы"
//		Если ФлагНашли=0 Тогда
//			глСоздатьНовыйОбъект(Спр);
//			Спр.Единица=Товар.БазоваяЕдиницаИзмерения ;
//			Спр.Коэффициент=1;
//			Спр.Наименование=Строка(Товар.БазоваяЕдиницаИзмерения );
//			
//			//Закомментировано Инсталлятором МОД:Спр.Записать();
//			//Начало текста, вставленного Инсталлятором МОД
//			ОбъектЗаписать(Спр, );
//			//Конец текста, вставленного Инсталлятором МОД
//			
//			
//			
//			Единица=Спр.ТекущийЭлемент();
//			Коэффициент=1;
//		КонецЕсли;
//		
//		//Рег=СоздатьОбъект("Регистр.ОстаткиТоваров");
//		//Дат=ПолучитьДатуТА();
//		//Если СравнитьТА()=-1 Тогда
//		//	// если итоги не актуальны, то остатки берем из временного расчета Регистра
//		//	Товары=СоздатьОбъект("СписокЗначений");
//		//	ВыгрузитьТабличнуюЧасть(Товары,"Товар");
//		//	Рег.УстановитьЗначениеФильтра("Товар",Товары,2);
//		//	Рег.ВременныйРасчет();
//		//	РассчитатьРегистрыНа(ДатаДок);
//		//КонецЕсли;
//		//Количество=Рег.СводныйОстаток(Товар,,"ОстатокТовара");
//		//ВалПродТовара=Товар.ВалютаПродажи;       // Учтем валюту цены
//		//Товар.ИспользоватьДату(ДатаДок-1);
//		//   ПредЦена=Товар.Розн_Цена*ВалПродТовара.Текущ_Курс.Получить(ДатаДок)/Валюта.Текущ_Курс.Получить(ДатаДок);
//		ПредЦена=ЦенаТовараПоКатегории(Контекст,КатегорияЦены,1);
//		Рег=0;
//	КонецЕсли;
//КонецПроцедуры
//___________________________
//Процедура Подбор()
//	Режим="Каталог";
//	ОткрытьПодбор("Номенклатура","ДляПодбора",1);
////	УстановитьЗначениеВПодборе("Склад",Склад);
//КонецПроцедуры
//_____________________________________________________________________________
//Процедура ВставитьСтроку(_Товар)
//	НоваяСтрока();
//	Товар=_Товар;
//	ТовКод=Товар.Код;
//	ПолучитьОстаток();
//	АктивизироватьСтроку();
//КонецПроцедуры //ВставитьСтроку()

Процедура ДобавитьСтроку( пТовар )
	НоваяСтрока();
	Товар = пТовар;
	РассчитатьСтроку( "Товар" );
КонецПроцедуры

//-----------------------------------------------
Процедура ОбработкаПодбора(Выб)
	Если Режим="Каталог" Тогда
		ВыбТовар=Выб;
	Иначе
		ВыбТовар=Выб.Товар;
	КонецЕсли;                 
	Если ПустоеЗначение(ВыбТовар)=1 Тогда
		Возврат;
	КонецЕсли;  
	Если ВыбТовар.ЭтоГруппа()=1 Тогда
		Если Вопрос("Добавить в табличную часть все элементы из группы "+выбТовар+"?","Да+Нет")="Нет" Тогда
			Возврат;
		КонецЕсли;
		Спр=СоздатьОбъект("Справочник.Номенклатура");
		Спр.ИспользоватьРодителя(Выбтовар.ТекущийЭлемент());
		Спр.ВыбратьЭлементы();
		Пока Спр.ПолучитьЭлемент()=1 Цикл
			Если Спр.ЭтоГруппа()=1 Тогда
				Продолжить;
			КонецЕсли;
			Если Спр.ПометкаУдаления()=1 Тогда
				Продолжить;
			КонецЕсли;
			ДобавитьСтроку(Спр.ТекущийЭлемент());
		КонецЦикла;
	Иначе
		ДобавитьСтроку(ВыбТовар.ТекущийЭлемент());
	КонецЕсли;
КонецПроцедуры

//Функция ПолучитьПоследнююЦену( Товар, Категория )
//	//Если Проведен() = 1 Тогда
//		Возврат семПолучитьЦенуТовара( Товар, Категория ).Цена.Получить(ДатаДок);
//	//Иначе
//	//	Возврат семПолучитьЦенуТовара( Товар, Категория ).Цена.Получить(ДатаДок);
//	//КонецЕсли;
//КонецФункции
//-----------------------------------------------
Процедура семПечать(Категория,ВидПечати)
	
	Фирма.ИспользоватьДату(ДатаДок);
	Таб=СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("ДляРозницы");
	Если Категория="Розничная" Тогда
		пКатегория = "Основная розничная цена";
	ИначеЕсли Категория="Розничная2" Тогда
		пКатегория = "Розничная цена для Reval Hotel";
	ИначеЕсли Найти(Категория,"Ресторанная")>0 Тогда
		пКатегория = "Ресторанная цена";
	КонецЕсли;
	пШапкаКод2 = ?( ВидПечати = 1, "Sv®tru"+РазделительСтрок+"kods", "Kods 2" );
	пШапкаКод2RU = ?( ВидПечати = 1, "Штрихкод", "Код 2" );
	Таб.ВывестиСекцию("Шапка"); 
	Ном=0;
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Ном=Ном+1;
		Если Категория="Розничная" Тогда
			пЦена = Формат(Окр(ПредЦена*(1+ПроцентНДС(Товар.СтавкаНДС)/100),2,1),"Ч015.2");
			пНовЦена = Формат(Окр(Цена*(1+ПроцентНДС(Товар.СтавкаНДС)/100),2,1),"Ч015.2");
			пНовЦенаEUR = Формат(Окр(ЦенаEUR*(1+ПроцентНДС(Товар.СтавкаНДС)/100),2,1),"Ч015.2");
		ИначеЕсли Категория="Розничная2" Тогда
			//пЦена = Формат(семПолучитьЦенуТовара( Товар, Категория,ДатаДок ).Цена*(1+ПроцентНДС(Товар.СтавкаНДС)/100),"Ч015.2");
			пЦена = Формат(семПолучитьЦенуТовара( Товар, семПолучитьКатегориюЦеныПоНаим(Категория),ДатаДок-1 ).Цена*(1+ПроцентНДС(Товар.СтавкаНДС)/100),"Ч015.2");
			КоэфНаценки = 1+(Товар.ПроцентНацРознЦены.Получить(ДатаДок) / 100);
			Если КатегорияЦены = кРозничнаяКатегорияЦены Тогда
				промЦенаСНДС = семОкрРознЦены(Цена * КоэфНаценки);
			Иначе
				промЦенаСНДС = Цена;
			КонецЕсли;
//			пНовЦена = Формат(промЦенаСНДС,"Ч015.2");
			
			пНовЦена = Формат(Окр(Цена*(1+ПроцентНДС(Товар.СтавкаНДС)/100),2,1),"Ч015.2");
			пНовЦенаEUR = Формат(Окр(ЦенаEUR*(1+ПроцентНДС(Товар.СтавкаНДС)/100),2,1),"Ч015.2");
		ИначеЕсли Найти(Категория,"Ресторанная")>0 Тогда
			пЦена = Формат(Окр(ПредЦена*(1+ПроцентНДС(Товар.СтавкаНДС)/100),2,1),"Ч015.2");
			пНовЦена = Формат(Окр(Цена*(1+ПроцентНДС(Товар.СтавкаНДС)/100),2,1),"Ч015.2");
			пНовЦенаEUR = Формат(Окр(ЦенаEUR*(1+ПроцентНДС(Товар.СтавкаНДС)/100),2,1),"Ч015.2");
		КонецЕсли;
		пКод2 = ?( ВидПечати = 1, Товар.ШтрихКод, КодДляРозницы );
		
		Язык ="";
		НазвТовара = НазваниеТовара(Товар);
		
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;
	
	
	ОбъектЗаписать(Контекст, );
	Таб.ВывестиСекцию("Подвал");
	Таб.Опции(0,0,0,0);
	Таб.ТолькоПросмотр(0);
	Таб.Показать(Шаблон("Переоценка [НомерДок] ([КатегорияЦены])"),"");
КонецПроцедуры

Процедура кнПечать()
	Если Модифицированность() = 1 Тогда
		Ответ = Вопрос("Документ не был записан после внесенных изменений. Записать?","Да+Нет",60);
		Если Ответ <> "Да" Тогда Возврат; КонецЕсли;
		Записать(); 
	КонецЕсли;
	
	Если ВидПереоценки = пПрайсЛист Тогда
		Путь = КаталогИБ() + "ExtForms\ПереоценкаТоваровПрайслист.ert";
		спПарам = СоздатьОбъект( "СписокЗначений" );
		спПарам.Установить( "Документ", ТекущийДокумент() );
		//спПарам.Установить( "КатегорияЦены", КатегорияЦены );
		//спПарам.Установить( "ДатаДок", ДатаДок );
		//спПарам.Установить( "Валюта", Валюта );
		ОткрытьФорму( "Обработка", спПарам, Путь );
		//ЗагрузитьТабличнуюЧасть(спПарам.Получить("Таблица"));
		Возврат;
	Иначе
	КонецЕсли;
	
	Категория = КатегорияЦены.Наименование;
	Если (КатегорияЦены = кРозничнаяКатегорияЦены) Тогда
		сп = СоздатьОбъект( "СписокЗначений" );
		сп.ДобавитьЗначение( "со штрих-кодом" );
		сп.ДобавитьЗначение( "с розн. кодом" );
		ВидПечати = 0;
		Если сп.ВыбратьЗначение(,,ВидПечати,,1) = 0 Тогда Возврат; КонецЕсли;
		семПечать("Розничная",ВидПечати);
		семПечать("Розничная2",ВидПечати);
		Возврат;
	ИначеЕсли КатегорияЦены = семПолучитьКатегориюЦеныПоНаим( "Розничная2" ) Тогда
		сп = СоздатьОбъект( "СписокЗначений" );
		сп.ДобавитьЗначение( "со штрих-кодом" );
		сп.ДобавитьЗначение( "с розн. кодом" );
		ВидПечати = 0;
		Если сп.ВыбратьЗначение(,,ВидПечати,,1) = 0 Тогда Возврат; КонецЕсли;
		семПечать("Розничная2",ВидПечати);
		Возврат;
	ИначеЕсли (Найти(Категория,"Ресторанная")>0) Тогда
		сп = СоздатьОбъект( "СписокЗначений" );
		сп.ДобавитьЗначение( "со штрих-кодом" );
		сп.ДобавитьЗначение( "с розн. кодом" );
		ВидПечати = 0;
		Если сп.ВыбратьЗначение(,,ВидПечати,,1) = 0 Тогда Возврат; КонецЕсли;
		семПечать(Категория,ВидПечати);
		Возврат;
	КонецЕсли;
	
	Меню = СоздатьОбъект("СписокЗначений");
	Меню.ДобавитьЗначение(1,глКодСтраныПользователя);
	Меню.ДобавитьЗначение(2,"LT");
	Меню.ДобавитьЗначение(3,"EE");
	Меню.ДобавитьЗначение(4,"EN");
	Меню.ДобавитьЗначение(5,"RU");
	Меню.ДобавитьЗначение(6,"E-mail");
	чЯзык = 1;
	Если Меню.ВыбратьЗначение(чЯзык,,,,1)=0 Тогда
		Возврат;
	КонецЕсли;

	Фирма.ИспользоватьДату(ДатаДок);
	Таб=СоздатьОбъект("Таблица");
	Если чЯзык=6 Тогда
		Таб.ИсходнаяТаблица("ТаблицаEmail");
	Иначе
		Таб.ИсходнаяТаблица("Таблица1"+?(чЯзык=5,"RU",""));
	КонецЕсли;
	пШапкаКод2 = "Sv®tru"+РазделительСтрок+"kods";
	пШапкаКод2RU = "Штрихкод";
	Таб.ВывестиСекцию("Шапка"); 
	
	
	//Рег=СоздатьОбъект("Регистр.ОстаткиТоваров");
	
	//	Если ПолучитьДатуТА()>ДатаДок Тогда
	//	
	//		Рег.ВременныйРасчет();
	//			
	////		Если Константа.Use_Optimization=0 Тогда
	////		Иначе
	//			ТоварЛист=СоздатьОбъект("СписокЗначений");
	//			ВыгрузитьТабличнуюЧасть(ТоварЛист,"Товар");
	//			Рег.УстановитьЗначениеФильтра("Товар",ТоварЛист,2);
	//		//КонецЕсли;
	//			
	//		РассчитатьРегистрыНа(ДатаДок);
	//	
	//	КонецЕсли;
	
	ВыбратьСтроки();
	Ном=0;
	Пока ПолучитьСтроку() = 1 Цикл
		//Количество=Рег.СводныйОстаток(Товар,,"ОстатокТовара");
		//РассчитатьПереоценку();
		Ном=Ном+1;
		пКод2 = Товар.ШтрихКод;
		
		Язык ="";
		Меню.ПолучитьЗначение(чЯзык,Язык);
		Если чЯзык = 6 Тогда
			НазвТовараLV 	= Пререкодировка(НазваниеТовара(Товар,"LV"));
			НазвТовараLT 	= Пререкодировка(НазваниеТовара(Товар,"LT"));
			НазвТовараEE 	= Пререкодировка(НазваниеТовара(Товар,"EE"));
			ЕдLV 			= Пререкодировка(глПолучитьПереводЕдИзм(Единица.Единица,"LV"));
			ЕдLT 			= Пререкодировка(глПолучитьПереводЕдИзм(Единица.Единица,"LT"));
			ЕдEE 			= Пререкодировка(глПолучитьПереводЕдИзм(Единица.Единица,"EE"));
			ИзмЦены = Формат(?(ПредЦена<>0,(Цена-ПредЦена)/ПредЦена*100,0),"Ч10.1");
		Иначе
			НазвТовара = ?(Язык="RU",НазваниеТовара(Товар,Язык),Пререкодировка(НазваниеТовара(Товар,Язык)));
		КонецЕсли;
		
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;
	
	
	//Закомментировано Инсталлятором МОД:	Записать();
	//Начало текста, вставленного Инсталлятором МОД
	ОбъектЗаписать(Контекст, );
	//Конец текста, вставленного Инсталлятором МОД
	
	
	
	
	ОбщПереоценка=Итог("Переоценка");
	Таб.ВывестиСекцию("Подвал");
	Таб.Опции(0,0,0,0);
	Таб.ТолькоПросмотр(0);
	Таб.Показать(Шаблон("Переоценка [НомерДок] ([КатегорияЦены])"),"");
КонецПроцедуры
//-----------------------------------------------
Процедура ВводНового(ФлКопирования);
	Если Константа.ЗапретНаВводПереоценок = Да Тогда
		Сообщить("Переоценки товара вводятся только в центральной базе!");
		СтатусВозврата(0); Возврат;
	КонецЕсли;
	ЗаполнитьШапку(Контекст);
	ВидПереоценки = Перечисление.ВидыПереоценки.Переоценка;
	Если ФлКопирования=0 Тогда
		Валюта=Константа.БазоваяВалюта;
		ВалютаСтар=Валюта;
		КатегорияЦены=Константа.ОсновнаяКатегорияЦены;
	КонецЕсли;

	Если ПустоеЗначение(Пользователь.ОснКатегорияЦены)=0 Тогда
		КатегорияЦены=Пользователь.ОснКатегорияЦены;          
	ИначеЕсли (Пользователь.CashCarry=1) Тогда
		Сообщить("У данного пользователя не установлена категория цены по умолчанию!");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	ДатаДок=РабочаяДата();     
	Доступ();
	ДатаСоздания = РабочаяДата();
	
	//ДатаПереоценки=ДатаДок+1;
КонецПроцедуры

Процедура СоздатьЭлементУправления ()
	Форма.ОбработкаОжидания ("", 0);
	ВремДокумент = СоздатьОбъект ("ТабличныйДокумент");
	гЭлементУправления = ВремДокумент.СоздатьЭлементУправления (Форма, "ТабличныйДокумент");
	гЭлементУправления.Документ.ЗагрузитьИзТаблицы (ВременнаяТаблица);
	гЭлементУправления.ТолькоПросмотр = 0;
	
	Форма.ИспользоватьСлой ("Основной", 2);
	
КонецПроцедуры



Процедура ПриОткрытии()
	Форма.ВидПереоценки.Доступность(семЕстьПраво( "Документ", "ПереоценкаТоваров", "Создание прайслиста" ));
	
	ВременнаяТаблица = СоздатьОбъект ("Таблица");
	ВременнаяТаблица.ИсходнаяТаблица("ТаблицаПустая");
	ВременнаяТаблица.Вывести ();
	
	Форма.ИспользоватьЗакладки (1);
	Закладки = Форма.Закладки;
	Закладки.Установить ("Основное", "Основной");
	Форма.ИспользоватьСлой ("Основной", 2);
	
	Форма.ОбработкаОжидания ("СоздатьЭлементУправления", 1);
	Доступ();
	
КонецПроцедуры

Процедура кнИмпорт()
	
	Спр = СоздатьОбъект("Справочник.Номенклатура");
	ИмяФайла = "";
	ПутьФайла = ВыбратьФайл(ИмяФайла,"XLS");
	
	гЭлементУправления.Документ.Открыть (ПутьФайла, 2);
	
	//Основание = ПутьФайла;
	Конвертер = СоздатьОбъект ("Йоксель.КонвертерВТаблицуЗначений");
	Конвертер.УстановитьДокумент (гЭлементУправления.Документ);
	
	Конвертер.ОпределятьСтруктуру = 1;
	Конвертер.СтрокДляОпределенияСтруктуры = 2;
	Конвертер.ПроверятьСтруктуру = 1;
	Таб_ = СоздатьОбъект("ТаблицаЗначений");
	Таб_ = Конвертер.Загрузить ();

	ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");
	Если Таб_.ВыбратьСтроку()=1 Тогда
		
		УдалитьСтроки();
			
		ТекстЗапроса="
		|-- запрос по переоценкам
		|SELECT
		|	Спр.CODE as ТовКод,
		|	Val as [Товар $Справочник.Номенклатура],
		|	СпрЕд.ID [Единица $Справочник.Единицы],
		|	$СпрЕд.Коэффициент as Коэффициент,
		|	$ПоследнееЗначение.Цены.Цена(СпрР.ID, :ВыбДата) ПредЦена
		|FROM
		|	#Товары
		|INNER JOIN
		|	$Справочник.Номенклатура Спр ON
		|	Спр.ID = Val 
		|	AND Спр.ISMARK  & 1 = 0
		|LEFT JOIN
	        |	$Справочник.Цены СпрР ON 
		|	СпрР.ParentExt = Val AND
	        |	$СпрР.КатегорияЦены = :ТипЦен
		|LEFT JOIN
	        |	$Справочник.Единицы СпрЕд ON 
		|	СпрЕд.ParentExt = Val AND
	        |	$СпрЕд.Единица = $Спр.БазоваяЕдиницаИзмерения AND
		|      СпрЕд.ISMARK  & 1 = 0
		|";
			
			Таб_.НоваяКолонка("Товар","Справочник.Номенклатура");
			Таб_.ВыбратьСтроки();
			Пока Таб_.ПолучитьСтроку() = 1 Цикл
				Состояние(Шаблон("[Таб_.НомерСтроки]/[Таб_.КоличествоСтрок()]"));
				Попытка
					КодТовара = СокрЛП(Таб_.ПолучитьЗначение(Таб_.НомерСтроки,1));
				Исключение
					КодТовара = СокрЛП(Таб_.КодТовара);
				КонецПопытки;
				
				Если ПустоеЗначение(КодТовара)=1 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Спр.НайтиПоКоду(КодТовара,0)=1 Тогда
				ИначеЕсли Спр.НайтиПоРеквизиту("КодТовара",КодТовара,1) = 1 Тогда
				Иначе
					Сообщить("Не найден товар по коду "+КодТовара);
					Продолжить;
				КонецЕсли;
				
				Таб_.Товар = Спр.ТекущийЭлемент();
			КонецЦикла;				
	
			спТовары = СоздатьОбъект("СписокЗначений");
			Таб_.Выгрузить(спТовары,,,"Товар");
			
			ЗапросСКЛ.УложитьСписокОбъектов(спТовары,"#Товары","Номенклатура");
			ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДата",ДатаДок);
			ЗапросСКЛ.УстановитьТекстовыйПараметр("ТипЦен", КатегорияЦены );
			
			тТовары=СоздатьОбъект("ИндексированнаяТаблица");
			тТовары=ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,тТовары);
			тТовары.ДобавитьИндекс("иТовар","*Товар");
				
			Таб_.ВыбратьСтроки();
			Пока Таб_.ПолучитьСтроку() = 1 Цикл
				
				Если ПустоеЗначение(Таб_.Товар)=1 Тогда
					Продолжить;
				КонецЕсли;
				Состояние(Шаблон("[Таб_.НомерСтроки]/[Таб_.КоличествоСтрок()]"));
				НоваяСтрока();
				Товар = Таб_.Товар;
				ТовКод = Товар.Код;
				
				тТовары.НайтиСтроку("иТовар",Товар,,1);
				ПредЦена 	= тТовары.ПредЦена;
				Единица	 	= тТовары.Единица;
				Коэффициент = тТовары.Коэффициент;
				
				Если (КатегорияЦены=Константа.РозничнаяКатегорияЦены) ИЛИ (КатегорияЦены=Константа.CashCarryКатегорияЦены) Тогда
					ЦенаСНДС 	= Таб_.ЦенаСНДС;
					РассчитатьСтроку("ЦенаСНДС");
				Иначе
					Цена 	 	= Таб_.Цена;
					РассчитатьСтроку("Цена");
				КонецЕсли;
				
			КонецЦикла;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры


Процедура кнПодбор()
	Если КатегорияЦены.Выбран() = 0 Тогда
		Сообщить( "Не выбрана категория цены", "!" );
		Возврат;
	КонецЕсли;
	Z_Подбор(Контекст,Режим);
КонецПроцедуры
//-----------------------------------------------
//Процедура ВернутьЦены()
//	ВыбратьСтроки();
//	Пока (ПолучитьСтроку()>0) Цикл
//		Цена=ПредЦена;
//		Переоценка=0;
//	КонецЦикла;
//КонецПроцедуры

Функция ФорматВывода( парам )
	Если парам = "ДопПереоценка" Тогда
		Если КатегорияЦены = кОсновнаяКатегорияЦены Тогда
			Возврат "Внимание!!! При переоценке оптовых цен, экспортные цены переоцениваются автоматически. Не забудьте сделать переоценку для Cash'n'Carry!";
		ИначеЕсли КатегорияЦены = кРозничнаяКатегорияЦены Тогда
			Возврат "Внимание!!! При переоценке розничных цен, цены для Reval Hotel переоцениваются автоматически.";
		Иначе
			Возврат "";
		КонецЕсли;
	ИначеЕсли парам = "РознКод" Тогда
		Возврат Формат(Товар.КодДляРозницы,"Ч0");
	КонецЕсли;
КонецФункции


Процедура Пересчитать()
	Если КоличествоСтрок() = 0 Тогда Возврат; КонецЕсли;
	
	//ВалютаПром=ВалютаСтар;
	//Если (Валюта<>ВалютаСтар) И (Реж=1) Тогда
	//	ВалютаСтар=Валюта;
		Если Вопрос("Пересчитать цены?","Да+Нет")<>"Да" Тогда
			Возврат;
		КонецЕсли;
	//КонецЕсли;
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		РассчитатьСтроку( "Товар" );
		//ПредЦена=Пересчет(ПредЦена,ВалютаПром,ДатаДок,Валюта,ДатаДок);
		//ЦенаСНДС=Пересчет(ЦенаСНДС,ВалютаПром,ДатаДок,Валюта,ДатаДок);
		//Цена=Пересчет(Цена,ВалютаПром,ДатаДок,Валюта,ДатаДок);
		//РассчитатьСтроку("Цена");
	КонецЦикла;
	
	
КонецПроцедуры

//*********************************************************
Процедура ПриВыбореКатегорииЦены()                         
	Если ПустоеЗначение(КатегорияЦены.ОсновнаяВалюта)=0 Тогда
		Валюта=КатегорияЦены.ОсновнаяВалюта;
		Пересчитать();      
		ВалютаСтар=Валюта;
	КонецЕсли;
КонецПроцедуры

//*****************************************************
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписи() Далее
//Конец текста, вставленного Инсталлятором МОД

//======================================================================
//======================================================================

Процедура СоздатьДокументыПереоценокФилиалов()
	
//	Записать();
	
	Если КатегорияЦены<>Константа.ОсновнаяКатегорияЦены Тогда
//		Сообщить("Документы для филиалов создаются только на основании <"+Константа.ОсновнаяКатегорияЦены+"> категории цены.");
		Возврат;
	КонецЕсли;

	//л_итСписокПодчиненых=ЗагрузкаИТ(ТекущийДокумент(),ДатаДок);
	//Если л_итСписокПодчиненых.КоличествоСтрок()>0 Тогда
	//	Если Вопрос("На основании этого документа уже сделано несколько подчиненых документов, сделать ещё ?",1)=2 Тогда
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;	

	Если ПроверкаНаличияПодчиненыхФилиала()=1 Тогда
		Сообщить("У этого документа уже имеются копии для филиалов.");
		Возврат;
	КонецЕсли;
	
	л_Новдок = СоздатьОбъект( "Документ.ПереоценкаТоваров" );
	л_ТекущийДок=СоздатьОбъект("Документ.ПереоценкаТоваров");
	л_ТекущийДок.НайтиДокумент(ТекущийДокумент());

	л_КатегориЦены=ПоискПоСпр("Литва Оптовая");
	Если ПустоеЗначение(л_КатегориЦены)=0 Тогда
		Сообщить("Создается и проводится документ переоценки товаров для Литвы");
		л_Новдок = КлонироватьДокумент(ТекущийДокумент(),л_КатегориЦены);
	
		Час_=0;Мин_=0;Сек_=0;
		л_ТекущийДок.ПолучитьВремя(Час_,Мин_,Сек_);
		л_Новдок.УстановитьВремя(Час_,Мин_,Сек_+1);
		л_Новдок.Записать();
		Если л_Новдок.Провести()=1 Тогда
			Сообщить("Создался и провелся документ "+л_Новдок);
		Иначе
			Сообщить("Не провелся документ "+л_Новдок);
		КонецЕсли;
		
	КонецЕсли;

	л_КатегориЦены=ПоискПоСпр("Эстония Оптовая");
	Если ПустоеЗначение(л_КатегориЦены)=0 Тогда
		Сообщить("Создается и проводится документ переоценки товаров для Эстонии");
		л_Новдок = КлонироватьДокумент(ТекущийДокумент(),л_КатегориЦены);
		Час_=0;Мин_=0;Сек_=0;
		л_ТекущийДок.ПолучитьВремя(Час_,Мин_,Сек_);
		л_Новдок.УстановитьВремя(Час_,Мин_,Сек_+2);
		л_Новдок.Записать();
		Если л_Новдок.Провести()=1 Тогда
			Сообщить("Создался и провелся документ "+л_Новдок);
		Иначе
			Сообщить("Не провелся документ "+л_Новдок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СоздатьДокументыПереоценокФилиалов

Процедура стар_ПриЗаписи()
	//Закомментировано Инсталлятором МОД:Процедура ПриЗаписи()
	Если семМожноЗаписать( Контекст ) = 0 Тогда Возврат; КонецЕсли;
	АвтоВремяНачалоДня();
	                      
	Если ПустоеЗначение(ДатаСоздания)=1 Тогда
		ДатаСоздания = РабочаяДата();
	КонецЕсли;
	
	//Записать();
	//КатЦен=СоздатьОбъект("СписокЗначений");
	//СпрФ=СоздатьОбъект("Справочник.Фирмы");
	//СпрФ.ВыбратьЭлементы();
	//Пока СпрФ.ПолучитьЭлемент()=1 Цикл
	//	Если (ПустоеЗначение(СпрФ.ОсновнаяКатегорияЦены)=0) И (СпрФ.ОсновнаяКатегорияЦены<>КатегорияЦены) Тогда
	//		КатЦен.ДобавитьЗначение(СпрФ.ОсновнаяКатегорияЦены);
	//	КонецЕсли;
	//КонецЦикла;
	//                   
	//Док="";
	//Если КатЦен.РазмерСписка()>0 Тогда
	//	
	//	Предупреждение("Необходимо также сделать переоценку для следующих категорий цен:"+РазделительСтрок+
	//					СтрЗаменить(КатЦен.ВСтрокуСРазделителями(),"""",""))
	//КонецЕсли;
	
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписи()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	//	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
	стар_ПриЗаписи();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД

Процедура кнПомощь()
	
	Если ВидПереоценки=Перечисление.ВидыПереоценки.ПрайсЛист Тогда
		Помощь = СоздатьОбъект("Общие.Помощь");
		Помощь.Открыть( "Документ.ПереоценкаПрайсЛист" );
	КонецЕсли;
КонецПроцедуры

//======================================================================
Процедура ПриЗакрытии()
	Если ТекущийДокумент().Проведен()=1 Тогда
		СоздатьДокументыПереоценокФилиалов();	
	КонецЕсли;
	
КонецПроцедуры // ПриЗакрытии()

//-----------------------------------------------------
// При входе в Форму запомним промежуточные переменные
//Предупреждение ("При проведении документа Переоценка устанавливайте время документа на начало дня !!!");
кОсновнаяКатегорияЦены = Константа.ОсновнаяКатегорияЦены;
кРозничнаяКатегорияЦены = Константа.РозничнаяКатегорияЦены;
пПрайсЛист = Перечисление.ВидыПереоценки.ПрайсЛист;
Форма.КнопкаПоУмолчанию("Ok");
Форма.ВидПереоценки.ВыполнятьФормулуТолькоПриИзменении(1);
Форма.КатегорияЦены.ВыполнятьФормулуТолькоПриИзменении(1);


ВалютаСтар=Валюта;

//Форма.Отдел.ВыборГруппы(1);

ЗагрузитьВнешнююКомпоненту (Путь+"\SpreadSheet.dll");
