Перем Парт;
Перем РегПар;
Перем СебестоимостьШ_,СебестоимостьПриходШ_,СебестоимостьРасходШ_;


Процедура ПеремещениеПоПартиямКомплекта(ТУ)
	//партии и склады           
	
	Если (ТУ="Упр") Тогда
		Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета.Выбран()=0 Тогда
			Возврат ; // учет Упр. не ведется
		КонецЕсли;
		РегФирма=Фирма;
	ИначеЕсли (ТУ="Фин") Тогда  
		Если Фирма.МетодРасчетаСебестоимостиФинансовогоУчета.Выбран()=0 Тогда
			Возврат ; // учет Фин. не ведется
		КонецЕсли;
		РегФирма=Фирма;
	Иначе
		Сообщить("Неверно задан тип учета партий товаров по "+ТекущийДокумент());
		Возврат;   
	КонецЕсли;                               
	
	// склпарт
	Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
		РегСклад=Склад;
	Иначе
		РегСклад="";
	КонецЕсли;
	
	//-- -- -- --	
	
	Если ТУ="Фин" Тогда
		ПромФирма=Фирма;
	Иначе
		ПромФирма=Фирма;
	КонецЕсли;
	
	// склпарт
	Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
		ПромСклад=Склад;
	Иначе
		ПромСклад=СоздатьОбъект("Справочник.МестаХранения");
	КонецЕсли;		
	
	ПромТовар = Комплект;
	ОбщееКоличество=КоличествоКомплектов;
	НадоСписать=ОбщееКоличество;
	КоличествоПоРеализации=ОбщееКоличество;
	Себестоимость=0;                                      
	РегПар.УстановитьФильтр(ПромФирма,ПромТовар,,,,ПромСклад);
	
	РегПар.ВыгрузитьИтоги(Парт,1,1); 
	Если ((ТУ="Фин") И (Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.FIFO)) Тогда
		Парт.Сортировать("+СрокРеализации,-Статус,+ПрихДокумент",1);
	ИначеЕсли ((ТУ="Фин") И (Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO)) Тогда 
		Парт.Сортировать("-СрокРеализации,-Статус,-ПрихДокумент",1);
	ИначеЕсли ((ТУ="Фин") И (Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему)) Тогда	
		Парт.Сортировать("-Статус,+ПрихДокумент",1);
	ИначеЕсли ((ТУ="Упр") И (Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.FIFO)) Тогда
		Парт.Сортировать("+СрокРеализации,-Статус,+ПрихДокумент",1);
	ИначеЕсли ((ТУ="Упр") И (Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO)) Тогда
		Парт.Сортировать("-СрокРеализации,-Статус,-ПрихДокумент",1);
	ИначеЕсли ((ТУ="Упр") И (Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему)) Тогда	
		Парт.Сортировать("-Статус,+ПрихДокумент",1);                            
	КонецЕсли;	
	
	СумПарт=0;
	КолПарт=0;
	
	Парт.ВыбратьСтроки();
	Пока Парт.ПолучитьСтроку()=1 Цикл
		Если НадоСписать=0 Тогда
			Прервать;
		КонецЕсли;
		Контр=Парт.Контрагент;
		ПромДок=Парт.ПрихДокумент;
		R=Парт.Статус;
		ОтатокПартииКол=Парт.ОстатокТовара;
		ОтатокПартииВал=Парт.Стоимость;
		ОтатокПартииНДС=Парт.НДС;
		ОстатокПродВал=Парт.ПродСтоимость;
		
		Если ОтатокПартииКол<0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОтатокПартииКол>=НадоСписать Тогда
			СписатьКол=НадоСписать;
		Иначе
			СписатьКол=ОтатокПартииКол;
		КонецЕсли;
		
		Если ОтатокПартииКол=0 Тогда
			СписатьВал=ОтатокПартииВал;       
			СписатьНДС=ОтатокПартииНДС;
			СписатьПродВал=ОстатокПродВал;
			//Цена=0;
		Иначе        
			СписатьВал=ОтатокПартииВал/ОтатокПартииКол*СписатьКол;
			СписатьНДС=ОтатокПартииНДС/ОтатокПартииКол*СписатьКол;
			СписатьПродВал=ОстатокПродВал/ОтатокПартииКол*СписатьКол;
			//Цена=ОтатокПартииВал/ОтатокПартииКол;  
			//СуммаКнижная = Цена*КоличествоКнижное;
		КонецЕсли; 
		
		Регистр.ПартииТоваров.ПривязыватьСтроку(НомерСтроки);
		Регистр.ПартииТоваров.ДвижениеРасход(ПромФирма,ПромТовар,R,Контр,ПромДок,Склад,Парт.Партия,Парт.СрокРеализации,СписатьКол,СписатьВал,СписатьПродВал,СписатьНДС,,,,СписаниеТовара,,12,);
		
		СумПарт=СумПарт+СписатьВал;
		КолПарт=КолПарт+СписатьКол;
		СебестоимостьШ_=СебестоимостьШ_+СписатьВал;
		НадоСписать=НадоСписать-СписатьКол;
	КонецЦикла;
	
 	Если НадоСписать>0 Тогда
		Сообщить ("1При проведении партий товара по "+ТекущийДокумент()+" от "+ДатаДок+" по товару "
		+СокрЛП(ПромТовар)+" не распределилось по партиям "+НадоСписать+" "+ПромТовар.БазоваяЕдиницаИзмерения);
 		
 		СписатьКол=НадоСписать;
 		Контр=СоздатьОбъект("Справочник.Контрагенты");
 		ПромДок=ТекущийДокумент();
 		СписатьВал=ПромТовар.ЦенаПриобретения*КурсДляВалюты(ПромТовар.ВалютаЗакупки,ДатаДок)*СписатьКол;       
		СписатьНДС=СписатьВал*(ПроцентНДС(ПромТовар.СтавкаНДС)/(100+ПроцентНДС(ПромТовар.СтавкаНДС)));;
		СписатьПродВал=ПромТовар.РозничнаяЦена.Получить(ДатаДок)*СписатьКол;
 		Регистр.ПартииТоваров.ДвижениеРасход(ПромФирма,ПромТовар,R,Контр,ПромДок,Склад,,,СписатьКол,СписатьВал-СписатьНДС,СписатьПродВал,СписатьНДС,,,,СписаниеТовара,,12,);
//		Регистр.ПартииТоваров.ДвижениеПриход(ПромФирма,Товар,R,Контр,ПромДок,СкладПолучатель,,,СписатьКол,СписатьВал-СписатьНДС,СписатьПродВал,СписатьНДС,,,,"%",,3,);	
		СебестоимостьШ=СебестоимостьШ+СписатьВал-СписатьНДС;
 	КонецЕсли; 	
	
КонецПроцедуры	


Процедура стар_ОбработкаПроведения()

	Если семМожноПровести( Контекст ) = 0 Тогда Возврат; КонецЕсли;
	
	Если Комплект.Выбран()=0 Тогда
		НеПроводить(Контекст,"Не указан комплект, который разукомплектовывается");
		Возврат;
	КонецЕсли;
	
	Если (ДатаДок>ТекущаяДата()) И (Пользователь.РазрПровБудущейДатой=0) Тогда
		НеПроводить(Контекст,"Нельзя проводить документ будущей датой!");
		Возврат;
	КонецЕсли;
	
	Если Склад.Выбран()=0 Тогда
		НеПроводить(Контекст,"Не указан склад откуда производится перемещение!");
		Возврат;
	КонецЕсли;  
	
	Если СкладПолучатель.Выбран()=0 Тогда
		НеПроводить(Контекст,"Не указан склад куда производится перемещение!");
		Возврат;
	КонецЕсли;
	
	Если ДокументОснование.КоличествоКомплектов<КоличествоКомплектов Тогда
		НеПроводить(Контекст,"Указано неверное кол-во комплектов для разукомплектации. Было собрано всего "+ДокументОснование.КоличествоКомплектов +" комлектов!");
		Возврат;
	КонецЕсли;

	Реги=СоздатьОбъект("Регистры");
	Рег=Реги.ОстаткиТоваров;    
	РегПар=Реги.ПартииТоваров;
	Если ИтогиАктуальны()=0  Тогда
		Рег.ВременныйРасчет();
		РегПар.ВременныйРасчет();
		Рег.УстановитьЗначениеФильтра("Склад",Склад,1);
		
		Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
			РегПар.УстановитьЗначениеФильтра("Склад",Склад,1);
		КонецЕсли;
		
		Рег.УстановитьЗначениеФильтра("Товар",Комплект,1);
		РегПар.УстановитьЗначениеФильтра("Товар",Комплект,1);
		
		Реги.Актуальность(1);
		Реги.РассчитатьРегистрыНа(ТекущийДокумент()); 
	КонецЕсли;

	ОстатокТовара=Рег.СводныйОстаток(Комплект,Склад,,"ОстатокТовара");
	Если ОстатокТовара<КоличествоКомплектов Тогда
		Если (глРазрОтрицОстатки<>Да) Тогда
			Сообщить("На складе нет нужного количества комплектов "+Комплект.Код+ " "+ Комплект.Наименование + ".");
			НеПроводить(Контекст," На складе осталось "+ОстатокТовара+" "+Комплект.БазоваяЕдиницаИзмерения+"." );
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблДвижений = СоздатьОбъект("ТаблицаЗначений");
	
	Регистр.ОстаткиТоваров.Фирма= Фирма;
	Регистр.ОстаткиТоваров.Склад=Склад;
	Регистр.ОстаткиТоваров.Товар=Комплект;
	Регистр.ОстаткиТоваров.ОстатокТовара=КоличествоКомплектов;
	Регистр.ОстаткиТоваров.ФлагУчета=2;
	Регистр.ОстаткиТоваров.ДвижениеРасходВыполнить();

	СебестоимостьШ_=0;
	ПеремещениеПоПартиямКомплекта("Упр");
	
	//*****************

	//** Теперь получим все партии по документу основания комплектующих и поытаемся их вернуть на склад
	
	ТекстЗапроса = "SELECT $ПартииТоваров.Товар [Товар $Справочник.Номенклатура]
	|					, $ПартииТоваров.Фирма [Фирма $Справочник.Фирмы]
	|					, $ПартииТоваров.Статус Статус
	|					, $ПартииТоваров.Контрагент [Контрагент $Справочник.Контрагенты]
	|					, $ПартииТоваров.ПрихДокумент [ПрихДокумент $Документ]
	|					, $ПартииТоваров.Склад [Склад $Справочник.МестаХранения]
	|					, $ПартииТоваров.Партия [Партия $Справочник.Партии]
	|					, $ПартииТоваров.СрокРеализации СрокРеализации
	|					, $ПартииТоваров.ОстатокТовара ОстатокТовара
	|					, $ПартииТоваров.Стоимость Стоимость
	|					, $ПартииТоваров.ПродСтоимость ПродСтоимость
	|					, $ПартииТоваров.НДС НДС
	|					, $ПартииТоваров.Оборот Оборот
	|					, $ПартииТоваров.КодОперации КодОперации
	|					, $ПартииТоваров.ФлагУчета ФлагУчета
	|				FROM $Регистр.ПартииТоваров AS ПартииТоваров
	|				WHERE (ПартииТоваров.IDDOC = :ВыбДок) AND DEBKRED = 1";
	ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДок",ДокументОснование);

	итПартии=СоздатьОбъект("ИндексированнаяТаблица");
	ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итПартии);
	ИтогСтоимость=итПартии.Итог("Стоимость");
	ИтогПродСтоимость=итПартии.Итог("ПродСтоимость");
	ИтогОборот=итПартии.Итог("Оборот");

	итПартии.ДобавитьИндекс("иТовар","*Товар");
	
	СуммаСтоимостей=0;
	ВыбратьСтроки();
	Пока( ПолучитьСтроку()>0) Цикл
		Если Товар.Выбран()=0 Тогда
			Сообщить("В документе "+Вид()+"  "+НомерДок
			+" от "+ДатаДок+"Не указано комплектующее!");
			Продолжить;
		КонецЕсли; 
		
		Если Товар.ВидТовара=Перечисление.ВидыТоваров.Услуга Тогда
			Продолжить;
		КонецЕсли;		
		
		итПартии.УстановитьФильтр(Товар,Товар,"иТовар");
		итПартии.ВыбратьСтроки("иТовар");
		Пока итПартии.ПолучитьСтроку("иТовар") = 1 Цикл
			
			ОбщееКоличество = Количество*Коэффициент*КоличествоКомплектов/итПартии.Итог("ОстатокТовара","иТовар")*итПартии.ОстатокТовара;
			
			Регистр.ОстаткиТоваров.Фирма= Фирма;
			Регистр.ОстаткиТоваров.Склад=Склад;
			Регистр.ОстаткиТоваров.Товар=Товар;
			Регистр.ОстаткиТоваров.ОстатокТовара=ОбщееКоличество;
			Регистр.ОстаткиТоваров.ФлагУчета=2;
			Регистр.ОстаткиТоваров.ДвижениеПриходВыполнить();

			Регистр.ПартииТоваров.ПрихДокумент=итПартии.ПрихДокумент;
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			Регистр.ПартииТоваров.Партия 		 = итПартии.Партия;
			Регистр.ПартииТоваров.СрокРеализации = итПартии.СрокРеализации;
			Регистр.ПартииТоваров.Статус		 = итПартии.Статус;
			Регистр.ПартииТоваров.Склад			 = Склад;
			Регистр.ПартииТоваров.Товар			 = Товар;
			Регистр.ПартииТоваров.Фирма			 = итПартии.Фирма;
			Регистр.ПартииТоваров.ОстатокТовара	 = ОбщееКоличество;
		
			Регистр.ПартииТоваров.Стоимость		 = итПартии.Стоимость/ИтогСтоимость*СебестоимостьШ_;
			Регистр.ПартииТоваров.ПродСтоимость	 = ?(ИтогПродСтоимость<>0,итПартии.ПродСтоимость/ИтогПродСтоимость*СебестоимостьШ_,0);
			Регистр.ПартииТоваров.НДС			 = 0;
			Регистр.ПартииТоваров.Оборот		 = 0;
			Регистр.ПартииТоваров.НДСПрихода	 = 0;
			Регистр.ПартииТоваров.НДСРасхода	 = 0;
			Регистр.ПартииТоваров.ФлагУчета		 = 12;
			Регистр.ПартииТоваров.КодОперации	 = ОприходованиеИзлишков;
			Регистр.ПартииТоваров.ПривязыватьСтроку(НомерСтроки);
			Регистр.ПартииТоваров.ДвижениеПриходВыполнить();  
			
		КонецЦикла;
		
	КонецЦикла;

	СебестоимостьШ=СебестоимостьШ_;
	
	СебестоимостьПриходШ=0;
	СебестоимостьРасходШ=0;                                                
	СебестоимостьПриходШ_=0;
	СебестоимостьРасходШ_=0;                                                
	
	рег=СоздатьОБъект("Регистр.ПартииТоваров");
	рег.ВыбратьДвиженияДокумента(текущийДокумент());
	Пока рег.ПолучитьДвижение()=1 Цикл
		Если рег.Приход=1 Тогда
			СебестоимостьПриходШ_=СебестоимостьПриходШ_+рег.Стоимость;
		Иначе                                                                                                                             
			СебестоимостьРасходШ_=СебестоимостьРасходШ_+рег.Стоимость;
		КонецЕсли;
	КонецЦикла;		
	
	СебестоимостьПриходШ=СебестоимостьПриходШ_;
	СебестоимостьРасходШ=СебестоимостьРасходШ_;                                                
	
КонецПроцедуры


//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеМОД(Контекст)=1 Тогда
		Возврат;
	КонецЕсли;
	стар_ОбработкаПроведения();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаУдаленияПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеПоАлгоритмуМОД=1 Тогда
		Возврат;
	КонецЕсли;
	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
	
КонецПроцедуры

