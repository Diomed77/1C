Перем ф_ПроверкаМодуляПРоведения;

Процедура ПроверкаКолваСтрок()
	//BEGIN PR 18.05.2015
	//ставим ограничение на кол-во строк в заявке		      
	Если ПустоеЗначение(Склад.МестоКомплектации)=0 Тогда
	//	МаксСтрокВСчете = Склад.МестоКомплектации.МаксСтрокВСчете; 
		МаксСтрокВСчете = Константа.МаксСтрокВСчете;
		Если МаксСтрокВСчете=0 Тогда
			//ограничение не установлено
			МаксСтрокВСчете = 999;
		КонецЕсли;
	Иначе
		МаксСтрокВСчете = 999;
	КонецЕсли;                           
	
	Если (ПустоеЗначение(КлГруппа.ECOD)=0) ИЛИ (ПустоеЗначение(КлГруппа.ФорматОбмена)=0) Тогда
		//электронный обмен данными - ограчниение снимаем
		МаксСтрокВСчете = 999; 
	КонецЕсли;
	
	Если (ГрупповаяОбработка()=0) И (ДатаДок>='21.05.15') И (ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка) Тогда
		Если КоличествоСтрок()>МаксСтрокВСчете Тогда
			НеПроводить(Контекст,Шаблон("Макс кол-во строк в одной Эл.заявке не может превышать [МаксСтрокВСчете]"));
			Сообщить("Разделите на несколько заявок, с кол-вом строк не больше [МаксСтрокВСчете]. Ограничение склада!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//END PR
	
КонецПроцедуры


Функция семПроверкаВремениЭлЗаявки()
	Если (кВклПроверкуВремениЭлЗаявок = 0) ИЛИ (НазваниеНабораПрав()="Администратор") Тогда Возврат 1; КонецЕсли;
	текДень = ТекущаяДата();
	Если (ВидДоставки = Перечисление.ВидыДоставки.Самовывоз) ИЛИ (ВидДоставки = Перечисление.ВидыДоставки.Агент) Тогда
		Если ДатаПоставки = текДень Тогда
			//максВремя = "18:00:00";
			//Если ТекущееВремя() > максВремя Тогда
			//	Сообщить(Шаблон("Текущее время ([ТекущееВремя()]) превышает допустимое время ([максВремя]) проведения Эл. заявки на самовывоз на сегодняшний день."),"I");
			//	Возврат 0;
			//КонецЕсли;
		КонецЕсли;
		Возврат 1;
	КонецЕсли;
	следДень = ТекущаяДата()+1;
	пМаршрут = Клиент.АдресДоставки.Маршрут;
	Если ДатаПоставки = текДень Тогда
		
		Если ПустоеЗначение(МаршрутДоставкиГрафик)=0 Тогда
			пМаршрут	= МаршрутДоставкиГрафик;
			максВремя 	= пМаршрут.ВремяТекДень;
		Иначе
			максВремя 	= пМаршрут.ВремяТекДень;
		КонецЕсли;
		
		Если ПустаяСтрока( СтрЗаменить(максВремя,":","") ) = 1 Тогда Возврат 1; КонецЕсли;
		Если ТекущееВремя() > максВремя Тогда
			Сообщить(Шаблон("Текущее время ([ТекущееВремя()]) превышает допустимое время ([пМаршрут.ВремяТекДень]) проведения Эл. заявки для маршрута ([пМаршрут]) на сегодняшний день."),"I");
			Возврат 0;
		КонецЕсли;
	ИначеЕсли ДатаПоставки = следДень Тогда
		
		Если ПустоеЗначение(МаршрутДоставкиГрафик)=0 Тогда
			пМаршрут	= МаршрутДоставкиГрафик;
			максВремя 	= пМаршрут.ВремяТекДень;
		Иначе
			максВремя 	= пМаршрут.ВремяТекДень;
		КонецЕсли;
		
		Если семЕстьПраво("Документ","Счет","Превышение лимита времени до 18:00") = 1 Тогда
			максВремя = ?(пМаршрут.ВремяСледДень<"18:00:00","18:00:00",пМаршрут.ВремяСледДень);
		Иначе
			максВремя = пМаршрут.ВремяСледДень;
		КонецЕсли;
		Если ПустаяСтрока( СтрЗаменить(максВремя,":","") ) = 1 Тогда Возврат 1; КонецЕсли;
		Если ТекущееВремя() > максВремя Тогда
			Сообщить(Шаблон("Текущее время ([ТекущееВремя()]) превышает допустимое время ([максВремя]) проведения Эл. заявки для маршрута ([пМаршрут]) на следующий день."),"I");
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат 1;
	КонецЕсли;
КонецФункции

//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения(п_Знач) Далее
//Конец текста, вставленного Инсталлятором МОД

//Процедура стар_ОбработкаПроведения()
//	//Закомментировано Инсталлятором МОД:Процедура ОбработкаПроведения()
//	// сем \\
//	Перем флагБронирования;//флаг определят признак документа идущий по ветке бронирования на основании 
//	Перем флагСчетНуляБрони; // для изменения состояния документа бронь при нулевых остатках
////{ до обработки бронирования
//	
//	флагСчетНуляБрони=0;
//	
//	Если семМожноПровести( Контекст ) = 0 Тогда Возврат; КонецЕсли;
//	семОбновитьКурс( контекст );
//	// сем //
//	
//	Если Клиент.Выбран()=0 Тогда
//		НеПроводить(Контекст,"Выберите клиента!");
//		Возврат;
//	КонецЕсли;
//
////{проверки полей бронь в пути
//	Если (ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаБронь) И (фБроньвпути=1) Тогда
//		Если ВидДоставки.Выбран()=0 Тогда
//			НеПроводить(Контекст,"Выбирите Вид доставки !");
//		    Возврат;
//		КонецЕсли;
//	КонецЕсли;
//
////}проверки полей бронь в пути
//
//
//
//	Клиент.ИспользоватьДату(ДатаДок);
//	// Запишем главного клиента
//	Если Клиент.КлГруппа.Выбран()=1 Тогда
//		КлГруппа=Клиент.КлГруппа;
//	Иначе
//		КлГруппа=Клиент;
//	КонецЕсли;       
//
//	Если (Агент.Выбран()=0) и (ГрупповаяОбработка()=0) Тогда
//		НеПроводить(Контекст,"Выберите агента!");
//		Возврат;
//	КонецЕсли;
//
//	
//	Если Склад.Выбран()=0 Тогда
//		НеПроводить(Контекст,"Не указан склад по которому производится резервирование!");
//		Возврат;
//	КонецЕсли;
//	
//	Если ГрупповаяОбработка()=0 Тогда
//		Если (ПроверкаДублейСтрок(Контекст)=1) И (ВидЗаявки<>Перечисление.ВидыЗаявок.ЗаявкаНаВозврат) Тогда 
//			НеПроводить(Контекст,"В документе строки с одинаковым товаром!");
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
////	Если КоличествоСтрок()=0 Тогда 
////		НеПроводить(Контекст,"Документ пустой!");
////		Возврат;
////	КонецЕсли;     
//	
//	Если ПустоеЗначение(ДатаПоставки) = 1 Тогда 
//		НеПроводить(Контекст,"Выберите дату поставки!"); 
//		//Предупреждение("Выберите дату поставки!",10);
//		Возврат;
//	КонецЕсли;  
//
//
//	//проверка документа на признак бронирования
//	флагБронирования=0;
//	Если ДокументОснование.Вид()="Счет" Тогда
//		Если ДокументОснование.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
//			флагБронирования=1;
//		КонецЕсли;
//	КонецЕсли;	
//	
//	
//	Если ГрупповаяОбработка() = 0 Тогда
//		Если ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
//		Иначе
//		//бронирование обработка на основании
//			Если (ВидДоставки.Выбран() = 0) Тогда
//				НеПроводить(Контекст,"Не выбран вид доставки!"); 
//			Возврат;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//
//	Если ДатаПоставки < ДатаДок Тогда
//		НеПроводить(Контекст,"Дата поставки прошлым числом, документ не проведен!"); 
//		//Предупреждение("Дата поставки прошлым числом, документ не проведен!",10);
//		Возврат;		
//	КонецЕсли;	 
//
//	Если ГрупповаяОбработка()=0 Тогда
//		Если (Константа.НовыйМеханизмПретензий.Получить(ДатаДок)=Да) Тогда 
//			//проверка на внутреннего клиента 
//			Если (семВнутреннийКлиент(Клиент,Фирма)=1) И (ПустоеЗначение(СкладПолучатель)=1) Тогда
//				НеПроводить(Контекст,"Для эл. заявки на пополнение склада должен быть обязательно выбран склад получателя!"); 
//				Возврат;		
//			КонецЕсли;	 
//		КонецЕсли;
//	КонецЕсли;
//
//	
//	Если ГрупповаяОбработка() = 0 Тогда
//		Путь = КаталогИБ() + "ExtForms\Sem\ПроверкаДолгаКлиента.ert";
//		Если ФС.СуществуетФайл( Путь ) = 1 Тогда
//			сп = СоздатьОбъект( "СписокЗначений" );
//			сп.Установить( "Контекст", ВзятьКонтекст( Контекст ) );
//			ОткрытьФормуМодально( "Обработка", сп, Путь );
//			Если сп.Получить( "Результат" ) <> 1 Тогда
//				СтатусВозврата(0); Возврат;
//			КонецЕсли;
//		Иначе
//			Если семПроверкаКлиента(Контекст) = 0 Тогда
//				Сообщить("Документ не проведен!!!","!!!");
//				СтатусВозврата(0); Возврат;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если ГрупповаяОбработка() = 0 Тогда
//		Если семПроверкаВремениЭлЗаявки() = 0 Тогда
//			НеПроводить(Контекст,"Превышено время подачи эл. заявок.");
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//
//
//	
//	//проставялем агента из Клиента для документов из центра
//	Если (КлиентФилиала = Клиент) И (Фирма=Константа.ОсновнаяФирма) И (ПустоеЗначение(Агент)=1)  Тогда
//		Агент=Клиент.Агент;
//	КонецЕсли;
//	
//	Если ТипУчета = Фин Тогда Возврат; КонецЕсли;
//	Если ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка Тогда
//		
//
//		Позиция=СформироватьПозициюДокумента(ТекущийДокумент(),0);
//		ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");
//		Условие = "Товар IN (SELECT $Док.Товар FROM $ДокументСтроки."+Вид()+" Док (NOLOCK) WHERE IDDOC=:ВыбДок)";
//		
//		ТекстЗапроса="SELECT РезервыТоваровОстатки.Товар [Товар $Справочник.Номенклатура]
//		|					, РезервыТоваровОстатки.РезервТовараОстаток Резерв
//		|			  FROM $РегистрОстатки.РезервыТоваров("+?(ИтогиАктуальны()=1,"",":Позиция~")+",INNER JOIN $Документ.Счет ДокС (NOLOCK) ON ДокС.IDDOC = ПоСчету AND $ДокС.Склад = :ВыбСклад,
//		|													"+Условие+",
//		|												(Товар),) AS РезервыТоваровОстатки
//		|";
//		
//		ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДок", ТекущийДокумент());
//		ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбСклад",Склад);
//		ЗапросСКЛ.УстановитьТекстовыйПараметр("Позиция", Позиция);
//		итТаблРезервы=СоздатьОбъект("ИндексированнаяТаблица");
//		ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итТаблРезервы);
//		итТаблРезервы.ДобавитьИндекс("иТовар","*Товар");
//
//		ДопУсловие="AND (Склад = :ВыбСклад)";
//		ТекстЗапроса="SELECT ОстаткиТоваровОстатки.Товар [Товар $Справочник.Номенклатура]
//		|					, ОстаткиТоваровОстатки.ОстатокТовараОстаток Остаток
//		|			  FROM $РегистрОстатки.ОстаткиТоваров("+?(ИтогиАктуальны()=1,"",":Позиция~")+",,
//		|												Товар IN (SELECT $Док.Товар FROM $ДокументСтроки."+Вид()+" Док (NOLOCK) WHERE IDDOC=:ВыбДок)
//		|												"+ДопУсловие+",
//		|												Товар,) AS ОстаткиТоваровОстатки		
//		|";
//		ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбСклад",Склад);
//		ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДок", ТекущийДокумент());
//		ЗапросСКЛ.УстановитьТекстовыйПараметр("Позиция", Позиция );
//		итТаблОстатки=СоздатьОбъект("ИндексированнаяТаблица");
//		ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итТаблОстатки);
//		итТаблОстатки.ДобавитьИндекс("иТовар","*Товар");
//		
//		//{Формируем запрос для брони расчитываем резервы товаров в брони		
//		Если (флагБронирования=1) Тогда
//							
//			Позиция=СформироватьПозициюДокумента(ТекущийДокумент(),1);
//			ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");
//			Условие = "Товар IN (SELECT $Док.Товар FROM $ДокументСтроки."+Вид()+" Док (NOLOCK) WHERE IDDOC=:ВыбДок) AND ПоСчету = :ВыбДок";
//			
//			ТекстЗапроса="SELECT РезервыТоваровОстатки.Товар [Товар $Справочник.Номенклатура]
//			|					, РезервыТоваровОстатки.РезервТовараОстаток Резерв
//			|			  FROM $РегистрОстатки.РезервыТоваров("+?(ИтогиАктуальны()=1,"",":Позиция~")+",,
//			|													"+Условие+",
//			|												(Товар),) AS РезервыТоваровОстатки
//			|";
//			
//			ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДок", ДокументОснование);
//			ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбСклад",ДокументОснование.Склад);
//			ЗапросСКЛ.УстановитьТекстовыйПараметр("Позиция", Позиция);
//			итТаблРезервыБрони=СоздатьОбъект("ИндексированнаяТаблица");
//			ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итТаблРезервыБрони);
//			итТаблРезервыБрони.ДобавитьИндекс("иТовар","*Товар");
//
////}Формируем запрос для брони, расчитываем резервы товаров			
//
//		КонецЕсли;
//
//		
//		ВыбратьСтроки();
//		Пока ПолучитьСтроку() = 1 Цикл
//			Если Товар.Выбран() = 0 Тогда
//				Сообщить("В документе "+Вид()+" № "+НомерДок+" от "+ДатаДок+"Не указан товар, который выписывается!", "I");
//				Продолжить;
//			КонецЕсли;
//			
//			//только при проведении в интерактивном режиме меняем кол-во резерва, чтобы не образовывались минусовые резервы
//			Если ГрупповаяОбработка()=0 Тогда 
//				
//				итТаблРезервы.УстановитьФильтр(Товар,Товар,"иТовар");
//				текРезерв=итТаблРезервы.Итог("Резерв","иТовар");
//
//				итТаблОстатки.УстановитьФильтр(Товар,Товар,"иТовар");
//				текОстаток=итТаблОстатки.Итог("Остаток","иТовар");
//				
//			КонецЕсли;
//				
////{бронирование расчет движения по регистру
//
//			Если флагБронирования=1 Тогда
//				итТаблРезервыБрони.УстановитьФильтр(Товар,Товар,"иТовар");
//			//	итТаблРезервыБрони.Показать();
//				Рез=итТаблРезервыБрони.Итог("Резерв","иТовар");
//				Если ГрупповаяОбработка()=0 Тогда
//					Если Рез=0 Тогда
//						НеПроводить(Контекст,"Нет резерва для брони!"); 
//						Возврат;
//					КонецЕсли;
//				КонецЕсли;
//				Если Количество>Рез Тогда
//					пБроньСнятие=Рез*Коэффициент;
//				Иначе
//					пБроньСнятие=Количество*Коэффициент;
//				КонецЕсли;
//			
//				Регистр.РезервыТоваров.ПривязыватьСтроку(НомерСтроки);
//				Регистр.РезервыТоваров.Товар=Товар;
//				Регистр.РезервыТоваров.ПоСчету=ДокументОснование;
//				Регистр.РезервыТоваров.РезервТовара=пБроньСнятие;
//				Регистр.РезервыТоваров.ДвижениеРасходВыполнить();  
//				
//				Если (Рез-Количество)<=0 Тогда
//					флагСчетНуляБрони=флагСчетНуляБрони+1;//забронированого товара заказали больше чем в брони с учетом остатка
//				КонецЕсли;
//						
//				пБронированиеЕсть=Рез*Коэффициент;
//			Иначе
//				пБронированиеЕсть=0;//переменая добавляет
//			КонецЕсли;
//				
////}Бронирование ввод движение по регистру.	
//				
//			Если ГрупповаяОбработка()=0 Тогда //меняем только при интерактивном проведении
//
//				СвОст = Макс( текОстаток - текРезерв+пБронированиеЕсть, пБронированиеЕсть );
//				промКолво = Количество*Коэффициент;
//				Если (КлиентФилиала = Клиент) И (Фирма=Константа.ОсновнаяФирма)  Тогда
//					// для электронок пришедших на филиал из центра не проверяем остаток
//					Резерв = промКолво/Коэффициент;
//				ИначеЕсли СвОст < промКолво Тогда
//					Если ГрупповаяОбработка()=0 Тогда
//						Сообщить("На складе "+Склад+" нет свободного остатка товара "
//						+Товар.Код+" "+Товар.Наименование + " для резервирования!");
//						Сообщить("           Свободный остаток: "+СвОст+" "+Товар.БазоваяЕдиницаИзмерения+"."); 
//						Сообщить("      Необходимое количесвто: "+промКолво+" "+Товар.БазоваяЕдиницаИзмерения+".");  
//						Сообщить("Зарезервированное количесвто: "+СвОст+" "+Товар.БазоваяЕдиницаИзмерения+"."); 
//						Сообщить("Осталось незарезервированным: "+(промКолво-СвОст)+" "+Товар.БазоваяЕдиницаИзмерения+".");
//						Сообщить("-------------------------------------------------------------------------------");
//						
//						Если (Склад.ТипСклада = Перечисление.ТипыСкладов.СкладРаспродажи) И (СвОст<=0) Тогда
//							НеПроводить(Контекст,"Нельзя размещать заявку с данного склада при 0 остатке");
//						КонецЕсли;
//					КонецЕсли;
//					Резерв = СвОст/Коэффициент;
//				Иначе
//					Резерв = промКолво/Коэффициент;
//				КонецЕсли;				
//				
//			КонецЕсли;
//			
//			Если Резерв = 0 Тогда Продолжить;  КонецЕсли;
//			Регистр.РезервыТоваров.ПривязыватьСтроку(НомерСтроки);
//			Регистр.РезервыТоваров.Товар=Товар;
//			Регистр.РезервыТоваров.ПоСчету=ТекущийДокумент();
//			Регистр.РезервыТоваров.РезервТовара=Резерв*Коэффициент;
//			Регистр.РезервыТоваров.ДвижениеПриходВыполнить();  
//		КонецЦикла;
//	ИначеЕсли ВидЗаявки = Перечисление.ВидыЗаявок.СпецЗаказ Тогда
//		ВыбратьСтроки();
//		Пока ПолучитьСтроку() = 1 Цикл
//			Если Товар.Выбран() = 0 Тогда 
//				Сообщить("В документе "+Вид()+" № "+НомерДок+" от "+ДатаДок+"Не указан товар, который выписывается!");
//				Продолжить;
//			КонецЕсли;
//			Регистр.СпецЗаказы.ПривязыватьСтроку( НомерСтроки );
//			Регистр.СпецЗаказы.Товар = Товар;
//			Регистр.СпецЗаказы.ПоСчету = ТекущийДокумент(); 
//			Регистр.СпецЗаказы.Заказано = Количество * Коэффициент;
//			Регистр.СпецЗаказы.ДвижениеПриходВыполнить();
//		КонецЦикла;
//	ИначеЕсли ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаНаВозврат Тогда
////}	 до бронирования	
//	ИначеЕсли ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
////{обработка бронирования
//
////{Бронь в пути
//		Если фБроньвпути=1 Тогда
//			
//			Если ДокументПривязки.Выбран()=0 Тогда
//				НеПроводить(Контекст,"Не выбран Документ Привязки !");
//				Возврат;
//			КонецЕсли;
//			
//			Если (ГрупповаяОбработка()=0)И(ДатаПоставки<ДокументПривязки.ОснСрокПоставки) Тогда
//				НеПроводить(Контекст,"Дата Брони меньше даты Прихода товара на Склад");
//				Возврат;
//			КонецЕсли;	
//			
////{запрос
//
//			Позиция=СформироватьПозициюДокумента(ТекущийДокумент(),1);
//			ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");
//			
//			//ТекстЗапроса="SELECT ЗаказыПоставщикамОстатки.Товар [Товар $Справочник.Номенклатура]
//			//|						, ЗаказыПоставщикамОстатки.КоличествоОстаток Остаток
//			//|FROM $РегистрОстатки.ЗаказыПоставщикам("+?(ИтогиАктуальны()=1,"",":Позиция~")+",,(Товар IN (
//			//|	SELECT $СчетСтроки.Товар [Товар $Справочник.Номенклатура]
//			//|	FROM $ДокументСтроки.Счет AS СчетСтроки (NOLOCK)
//			//|	WHERE (СчетСтроки.IDDOC = :ВыбДок))) 
//			//|	AND (ПоЗаказу = $ВидДокумента36.ЗаказПоставщику + :ПоЗаказу),(Товар),) AS ЗаказыПоставщикамОстатки";
//
//			//ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДок", ТекущийДокумент());
//			//ЗапросСКЛ.УстановитьТекстовыйПараметр("ПоЗаказу", ДокументПривязки);
//			//ЗапросСКЛ.УстановитьТекстовыйПараметр("Позиция", Позиция);
//			//итТаблОстатки=СоздатьОбъект("ИндексированнаяТаблица");
//			//ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итТаблОстатки);
//			//итТаблОстатки.ДобавитьИндекс("иТовар","*Товар");
//			//итТаблОстатки.Показать();
//			//
//			ТекстЗапроса="SELECT ЗаказыПоставщикамОстатки.Товар [Товар $Справочник.Номенклатура]
//			|						, ЗаказыПоставщикамОстатки.КоличествоОстаток Остаток
//			|FROM $РегистрОстатки.ТоварыВПути(,,(Товар IN (
//			|	SELECT $СчетСтроки.Товар [Товар $Справочник.Номенклатура]
//			|	FROM $ДокументСтроки.Счет AS СчетСтроки (NOLOCK)
//			|	WHERE (СчетСтроки.IDDOC = :ВыбДок))) 
//			|	AND (Док = $ВидДокумента36.ОжидаемаяПоставка + :ПоЗаказу),(Товар),) AS ЗаказыПоставщикамОстатки";
//
//			
//			ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДок", ТекущийДокумент());
//			ЗапросСКЛ.УстановитьТекстовыйПараметр("ПоЗаказу", ДокументПривязки);
//			ЗапросСКЛ.УстановитьТекстовыйПараметр("Позиция", Позиция);
//			итТаблОстатки=СоздатьОбъект("ИндексированнаяТаблица");
//			ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итТаблОстатки);
//			итТаблОстатки.ДобавитьИндекс("иТовар","*Товар");
//			//итТаблОстатки.Показать();
//
//			//ТекстЗапроса="SELECT ЗаказыПоставщикамЗаявкиОстатки.Товар [Товар $Справочник.Номенклатура]
//			//|					, ЗаказыПоставщикамЗаявкиОстатки.КоличествоОстаток Резерв
//			//|FROM $РегистрОстатки.ЗаказыПоставщикамЗаявки("+?(ИтогиАктуальны()=1,"",":Позиция~")+",,(Товар IN (
//			//|	SELECT $СчетСтроки.Товар [Товар $Справочник.Номенклатура]
//			//|	FROM $ДокументСтроки.Счет AS СчетСтроки (NOLOCK)
//			//|	WHERE (СчетСтроки.IDDOC = :ВыбДок)))
//			//|  	AND (ПоЗаказу = $ВидДокумента36.ЗаказПоставщику + :ПоЗаказу),(Товар),) AS ЗаказыПоставщикамЗаявкиОстатки";
//			//
//			//ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДок", ТекущийДокумент());
//			//ЗапросСКЛ.УстановитьТекстовыйПараметр("ПоЗаказу", ДокументПривязки);
//			//ЗапросСКЛ.УстановитьТекстовыйПараметр("Позиция", Позиция );
//			//итТаблРезервы=СоздатьОбъект("ИндексированнаяТаблица");
//			//ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итТаблРезервы);
//			//итТаблРезервы.ДобавитьИндекс("иТовар","*Товар");			
//			//итТаблРезервы.Показать();
//
//			ТекстЗапроса="SELECT ЗаказыПоставщикамЗаявкиОстатки.Товар [Товар $Справочник.Номенклатура]
//			|					, ЗаказыПоставщикамЗаявкиОстатки.КоличествоОстаток Резерв
//			|FROM $РегистрОстатки.ЗаказыПоставщикамЗаявки("+?(ИтогиАктуальны()=1,"",":Позиция~")+",,(Товар IN (
//			|	SELECT $СчетСтроки.Товар [Товар $Справочник.Номенклатура]
//			|	FROM $ДокументСтроки.Счет AS СчетСтроки (NOLOCK)
//			|	WHERE (СчетСтроки.IDDOC = :ВыбДок)))
//			|  	AND (ПоЗаказу = $ВидДокумента36.ОжидаемаяПоставка + :ПоЗаказу),(Товар),) AS ЗаказыПоставщикамЗаявкиОстатки";
//			
//			ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДок", ТекущийДокумент());
//			ЗапросСКЛ.УстановитьТекстовыйПараметр("ПоЗаказу", ДокументПривязки);
//			ЗапросСКЛ.УстановитьТекстовыйПараметр("Позиция", Позиция );
//			итТаблРезервы=СоздатьОбъект("ИндексированнаяТаблица");
//			ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итТаблРезервы);
//			итТаблРезервы.ДобавитьИндекс("иТовар","*Товар");			
//			//итТаблРезервы.Показать();			
////}запрос
//			ВыбратьСтроки();
//			Пока ПолучитьСтроку() = 1 Цикл
//				
//				Если Товар.Выбран() = 0 Тогда
//					НеПроводить(Контекст,"В документе "+Вид()+" № "+НомерДок+" от "+ДатаДок+"Не указан товар, который выписывается!");
//					Возврат;
//				КонецЕсли;
//				
//				Если МинСрокРеализ = "" Тогда
//					НеПроводить(Контекст,"Не указан Минимальный Срок реализации товара:"+Товар+" !");
//					Возврат;
//				КонецЕсли;
//				
//				Если ГрупповаяОбработка()=0 Тогда 
//				
//					итТаблОстатки.УстановитьФильтр(Товар,Товар,"иТовар");
//					текОстаток=итТаблОстатки.Итог("Остаток","иТовар");
//					
//					итТаблРезервы.УстановитьФильтр(Товар,Товар,"иТовар");
//					текРезерв=итТаблРезервы.Итог("Резерв","иТовар");
//
//					пОстаток=текОстаток - текРезерв;
//
//// Тот же Запрос через регистры.					
////					рез=Регистр.ЗаказыПоставщикамЗаявки.СводныйОстаток(Товар,ДокументПривязки,,"Количество");
////					пОстаток=Регистр.ЗаказыПоставщикам.СводныйОстаток(Товар,,,,ДокументПривязки,"Количество")-рез;
//
//					СвОст = Макс(пОстаток, 0 );
//					Если СвОст=0 Тогда
//						НеПроводить(Контекст,"Бронирование запрещено. Товара:"+Товар+"  нет в заказах или остатках в заказе у поставщика: "+ДокументПривязки+" !");
//						Возврат;
//					КонецЕсли;
//				
//					промКолво = Количество*Коэффициент;
//					
//					Если СвОст < промКолво Тогда
//						Если ГрупповаяОбработка()=0 Тогда
//							НеПроводить(Контекст,"Бронирование запрещено. Товара нет в заказах у поставщика !");
//							Возврат;					
//						КонецЕсли;
//						Резерв = СвОст/Коэффициент;
//					Иначе
//						Резерв = промКолво/Коэффициент;
//					КонецЕсли;				
//					
//				КонецЕсли;
//				
//				Если Резерв = 0 Тогда Продолжить;  КонецЕсли;
//
//				Рег=Регистр.ЗаказыПоставщикамЗаявки;
//				Рег.Товар=Товар;
//				Рег.ПоЗаказу=ДокументПривязки; 
//				Рег.ПоСчету=ТекущийДокумент(); 
//				Рег.ПривязыватьСтроку(НомерСтроки);
//				Рег.Количество=Резерв*Коэффициент;
//				Рег.ДвижениеПриходВыполнить();
//			КонецЦикла;	
////}Бронь в пути		
//		Иначе
//			
//			Позиция=СформироватьПозициюДокумента(ТекущийДокумент(),0);
//			ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");
//			Условие = "Товар IN (SELECT $Док.Товар FROM $ДокументСтроки."+Вид()+" Док (NOLOCK) WHERE IDDOC=:ВыбДок)";
//			
//			ТекстЗапроса="SELECT РезервыТоваровОстатки.Товар [Товар $Справочник.Номенклатура]
//			|					, РезервыТоваровОстатки.РезервТовараОстаток Резерв
//			|			  FROM $РегистрОстатки.РезервыТоваров("+?(ИтогиАктуальны()=1,"",":Позиция~")+",INNER JOIN $Документ.Счет ДокС (NOLOCK) ON ДокС.IDDOC = ПоСчету AND $ДокС.Склад = :ВыбСклад,
//			|													"+Условие+",
//			|												(Товар),) AS РезервыТоваровОстатки
//			|";
//			
//			ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДок", ТекущийДокумент());
//			ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбСклад",Склад);
//			ЗапросСКЛ.УстановитьТекстовыйПараметр("Позиция", Позиция);
//			итТаблРезервы=СоздатьОбъект("ИндексированнаяТаблица");
//			ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итТаблРезервы);
//			итТаблРезервы.ДобавитьИндекс("иТовар","*Товар");
//	
//			ДопУсловие="AND (Склад = :ВыбСклад)";
//			ТекстЗапроса="SELECT ОстаткиТоваровОстатки.Товар [Товар $Справочник.Номенклатура]
//			|					, ОстаткиТоваровОстатки.ОстатокТовараОстаток Остаток
//			|			  FROM $РегистрОстатки.ОстаткиТоваров("+?(ИтогиАктуальны()=1,"",":Позиция~")+",,
//			|												Товар IN (SELECT $Док.Товар FROM $ДокументСтроки."+Вид()+" Док (NOLOCK) WHERE IDDOC=:ВыбДок)
//			|												"+ДопУсловие+",
//			|												Товар,) AS ОстаткиТоваровОстатки		
//			|";
//			ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбСклад",Склад);
//			ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДок", ТекущийДокумент());
//			ЗапросСКЛ.УстановитьТекстовыйПараметр("Позиция", Позиция );
//			итТаблОстатки=СоздатьОбъект("ИндексированнаяТаблица");
//			ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итТаблОстатки);
//			итТаблОстатки.ДобавитьИндекс("иТовар","*Товар");
//				
//		
//			ВыбратьСтроки();
//			Пока ПолучитьСтроку() = 1 Цикл
//				Если Товар.Выбран() = 0 Тогда
//					Сообщить("В документе "+Вид()+" № "+НомерДок+" от "+ДатаДок+"Не указан товар, который выписывается!", "I");
//					Продолжить;
//				КонецЕсли;
//				
//				Если МинСрокРеализ = "" Тогда
//					НеПроводить(Контекст,"Не указан Минимальный Срок реализации товара !");
//					Возврат;
//				КонецЕсли;
//				
//				//только при проведении в интерактивном режиме меняем кол-во резерва, чтобы не образовывались минусовые резервы
//				Если ГрупповаяОбработка()=0 Тогда 
//					
//					итТаблРезервы.УстановитьФильтр(Товар,Товар,"иТовар");
//					текРезерв=итТаблРезервы.Итог("Резерв","иТовар");
//	
//					итТаблОстатки.УстановитьФильтр(Товар,Товар,"иТовар");
//					текОстаток=итТаблОстатки.Итог("Остаток","иТовар");
//					
//					//текРезерв = регРезервы.СводныйОстаток(Товар,,"РезервТовара");
//					//текОстаток = регОстатки.Остаток(Товар,Склад,"ОстатокТовара");
//					СвОст = Макс( текОстаток - текРезерв, 0 );
//					промКолво = Количество*Коэффициент;
//					Если (КлиентФилиала = Клиент) И (Фирма=Константа.ОсновнаяФирма)  Тогда
//						// для электронок пришедших на филиал из центра не проверяем остаток
//						Резерв = промКолво/Коэффициент;
//					ИначеЕсли СвОст < промКолво Тогда
//						Если ГрупповаяОбработка()=0 Тогда
//							Сообщить("На складе "+Склад+" нет свободного остатка товара "
//							+Товар.Код+" "+Товар.Наименование + " для резервирования!");
//							Сообщить("           Свободный остаток: "+СвОст+" "+Товар.БазоваяЕдиницаИзмерения+"."); 
//							Сообщить("      Необходимое количесвто: "+промКолво+" "+Товар.БазоваяЕдиницаИзмерения+".");  
//							НеПроводить(Контекст,"Товар нельзя забронировать свыше Остатков !");
//							Возврат;					
//		
//						КонецЕсли;
//						Резерв = СвОст/Коэффициент;
//					Иначе
//						Резерв = промКолво/Коэффициент;
//					КонецЕсли;				
//					
//				КонецЕсли;
//				
//				Если Резерв = 0 Тогда Продолжить;  КонецЕсли;
//				Регистр.РезервыТоваров.ПривязыватьСтроку(НомерСтроки);
//				Регистр.РезервыТоваров.Товар=Товар;
//				Регистр.РезервыТоваров.ПоСчету=ТекущийДокумент(); 
//				Регистр.РезервыТоваров.РезервТовара=Резерв*Коэффициент;
//				Регистр.РезервыТоваров.ДвижениеПриходВыполнить();  
//			КонецЦикла;	
//		КонецЕсли;	
//	КонецЕсли;
////}обработка бронирования
//	
//		
//	//прописываем в регистр комплектцаций для последующей обработки на месте комплектации
//	// для заявок пришедших из центра - также прописываем комплектацию, независимо от склада
//	Если ((ПустоеЗначение(Склад.МестоКомплектации)=0) И ((ДатаПоставки> '27.10.09') ИЛИ ((ПризнакПечати=0) И (ДатаПоставки<= '27.10.09')))) ИЛИ ((КлиентФилиала = Клиент) И (Фирма=Константа.ОсновнаяФирма))  Тогда
//		Если (ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка) ИЛИ (ВидЗаявки = Перечисление.ВидыЗаявок.СпецЗаказ) 
//		ИЛИ (ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаБронь) Тогда
//			Если ПустоеЗначение(МестоКомплектации)=1 Тогда
//				МестоКомплектации=Склад.МестоКомплектации;
//			КонецЕсли; 
//	
//			Регистр.КомплектацияЗаявок.ДатаПоставки=ДатаПоставки;
//			Регистр.КомплектацияЗаявок.ПоСчету=ТекущийДокумент();
//			Регистр.КомплектацияЗаявок.ВидЗаявки=ВидЗаявки;
//			Регистр.КомплектацияЗаявок.МестоКомплектации=МестоКомплектации;
//			Регистр.КомплектацияЗаявок.Склад=Склад;
//			Регистр.КомплектацияЗаявок.ВидДоставки=ВидДоставки;
////{бронирование, изменение статуса			
//			Если ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
//				Если фБроньвпути=1 Тогда
//					Регистр.КомплектацияЗаявок.Статус=31;
//				Иначе
//					Регистр.КомплектацияЗаявок.Статус=21;
//				КонецЕсли;	
//				
//			Иначе
//				Регистр.КомплектацияЗаявок.Статус=1;
//			КонецЕсли;
////}бронирование, изменение статуса			
//			Регистр.КомплектацияЗаявок.Количество=1;
//			Регистр.КомплектацияЗаявок.ДвижениеПриходВыполнить();
//
//			Если КоличествоСтрок()=0 Тогда
//				Регистр.КомплектацияЗаявок.ДвижениеРасходВыполнить();
//			КонецЕсли;
//			
//		КонецЕсли;
//	КонецЕсли;
//	
//	
//	Если (флагБронирования=1) И (флагСчетНуляБрони>0) Тогда
//	
//	
//			Позиция=СформироватьПозициюДокумента(ТекущийДокумент(),1);
//			ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");
//			Условие = "Товар IN (SELECT $Док.Товар FROM $ДокументСтроки."+Вид()+" Док (NOLOCK) WHERE IDDOC=:ВыбДок) AND ПоСчету = :ВыбДок";
//			
//			ТекстЗапроса="SELECT РезервыТоваровОстатки.Товар [Товар $Справочник.Номенклатура]
//			|					, РезервыТоваровОстатки.РезервТовараОстаток Резерв
//			|			  FROM $РегистрОстатки.РезервыТоваров("+?(ИтогиАктуальны()=1,"",":Позиция~")+",,
//			|													"+Условие+",
//			|												(Товар),) AS РезервыТоваровОстатки
//			|";
//			
//			ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДок", ДокументОснование);
//			ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбСклад",ДокументОснование.Склад);
//			ЗапросСКЛ.УстановитьТекстовыйПараметр("Позиция", Позиция);
//			итТаблРезервы=СоздатьОбъект("ИндексированнаяТаблица");
//			ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итТаблРезервы);
//			итТаблРезервы.ДобавитьИндекс("иТовар","*Товар");
//			//итТаблРезервы.Показать();
//			
//		флагСчетНуляБрониДокОсн=0;
//		
//		
//			ДокументОснование.ВыбратьСтроки();
//			Пока ДокументОснование.ПолучитьСтроку() = 1 Цикл
//	
//				итТаблРезервы.УстановитьФильтр(ДокументОснование.Товар,ДокументОснование.Товар,"иТовар");
//				Рез=итТаблРезервы.Итог("Резерв","иТовар");
//				
//	//			Рез=Регистр.РезервыТоваров.СводныйОстаток(ДокументОснование.Товар,ДокументОснование,"РезервТовара");	
//				Если Рез<=0 Тогда
//					флагСчетНуляБрониДокОсн=флагСчетНуляБрониДокОсн+1;
//				КонецЕсли;
//			КонецЦикла;			
//			
//		
//	
//		Если ДокументОснование.КоличествоСтрок()=флагСчетНуляБрониДокОсн Тогда
//			РегКомпл=СоздатьОбъект("Регистр.КомплектацияЗаявок");
//			РегКомпл.УстановитьЗначениеФильтра("ПоСчету",ДокументОснование,1);
//		//	РегКомпл.УстановитьЗначениеФильтра("Статус",2,1);
//			таблКомпл=СоздатьОбъект("ТаблицаЗначений");
//			РегКомпл.ВыгрузитьИтоги(таблКомпл,1,1);
//			таблКомпл.ВыбратьСтроки();
//			Пока таблКомпл.ПолучитьСтроку() = 1 Цикл
//				Регистр.КомплектацияЗаявок.ПривязыватьСтроку(0);
//				Регистр.КомплектацияЗаявок.ДатаПоставки = таблКомпл.ДатаПоставки;
//				Регистр.КомплектацияЗаявок.ПоСчету = таблКомпл.ПоСчету;
//				Регистр.КомплектацияЗаявок.МестоКомплектации = таблКомпл.МестоКомплектации;
//				Регистр.КомплектацияЗаявок.Склад = таблКомпл.Склад ;
//				Регистр.КомплектацияЗаявок.ВидЗаявки = таблКомпл.ВидЗаявки ;
//				Регистр.КомплектацияЗаявок.ВидДоставки = таблКомпл.ВидДоставки ;
//				Регистр.КомплектацияЗаявок.Товар = таблКомпл.Товар ;
//				Регистр.КомплектацияЗаявок.Статус = таблКомпл.Статус;
//				Регистр.КомплектацияЗаявок.Количество = таблКомпл.Количество;
//				Регистр.КомплектацияЗаявок.ДвижениеРасходВыполнить();
//			КонецЦикла;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если ГрупповаяОбработка()=0 Тогда
//		спПроведениеДок = СоздатьОбъект("СписокЗначений");
//		спПроведениеДок.ДобавитьЗначение(ТекущийДокумент(),"Счет");
//		ОбработкаОжидания("глПроведениеКомплектацийПоЗаявке",5);
//
//	КонецЕсли;
//	
//КонецПроцедуры

Функция УстановитьСостояние(Сост,Док)
	спрСост=СоздатьОбъект("Справочник.СостоянияДокументов");
	спрСост.НайтиПоНаименованию(Док.Вид()); 
	спрСост.ИспользоватьРодителя(спрСост.ТекущийЭлемент());
	спрСост.НайтиПоНаименованию(Сост,1);
	Возврат спрСост.ТекущийЭлемент();
КонецФункции

Процедура стар_ОбработкаПроведения(п_Знач)

	Если п_Знач=0  Тогда



	//{  *****проверка при проведении счета*****
	
	Если ф_ПроверкаМодуляПРоведения=1 Тогда //проведенеия из СчетОбщий п_Знач=1
	
		Если ГрупповаяОбработка()=0 Тогда
			Если (Склад.СкладОтвХранения=1) И (ВидОплаты<>2) Тогда
				НеПроводить(Контекст,"Вид оплаты не соответствует выбранному складу. Должен быть выбран склад отв. хранения!");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ПроверкаКолваСтрок(); //проверяем на кол-во строк в документе	
			
		Если семМожноПровести( Контекст ) = 0 Тогда Возврат; КонецЕсли;
		семОбновитьКурс( контекст );
		// сем //
		
		Если Клиент.Выбран()=0 Тогда
			НеПроводить(Контекст,"Выберите клиента!");
			Возврат;
		КонецЕсли;
	
		Клиент.ИспользоватьДату(ДатаДок);
		// Запишем главного клиента
		Если Клиент.КлГруппа.Выбран()=1 Тогда
			КлГруппа=Клиент.КлГруппа;
		Иначе
			КлГруппа=Клиент;
		КонецЕсли;       
	
		Если (Агент.Выбран()=0) и (ГрупповаяОбработка()=0) Тогда
			НеПроводить(Контекст,"Выберите агента!");
			Возврат;
		КонецЕсли;
	
		Если Склад.Выбран()=0 Тогда
			НеПроводить(Контекст,"Не указан склад по которому производится резервирование!");
			Возврат;
		КонецЕсли;
		
		Если ГрупповаяОбработка()=0 Тогда
			Если (ПроверкаДублейСтрок(Контекст)=1) И (ВидЗаявки<>Перечисление.ВидыЗаявок.ЗаявкаНаВозврат) Тогда 
				НеПроводить(Контекст,"В документе строки с одинаковым товаром!");
				Возврат;
			КонецЕсли;
			
			Если (семВнутреннийКлиент(КлГруппа,Фирма)=0) И (КлГруппа.ВидКонтрагента=Перечисление.ВидыКонтрагентов.Организация) И (ВидОплаты=1) Тогда
				//проверим сумму сделки с начала месяца
				СуммаСделки = глПолучитьСуммуСделкиЗаНаличныеПоКлиенту(Контекст,"Месяц");
				СуммаСделки=СуммаСделки+Окр(Итог("Сумма")+Итог("НДС"),2);
				ЛимитСуммыСделок = Константа.МаксСуммаСделкиНаличнымиМесяц.Получить(ДатаДок);
				Если СуммаСделки>ЛимитСуммыСделок Тогда
					НеПроводить(Контекст,Шаблон("Сумма [СуммаСделки] сделок в наличных превысит сумму лимита с одним юридическим лицом в месяц [ЛимитСуммыСделок]!"));
				Иначе
					Сообщить("Сумма сделок в наличных с начала месяца: "+СуммаСделки);
				КонецЕсли;
				
			КонецЕсли;
			
			
			ВыбратьСтроки();
			Пока ПолучитьСтроку() = 1 Цикл  
				Запрет = глЗапретОтгрузкиТовараПоКлиенту(КлГруппа,Товар,ДатаПоставки);
				Если Запрет = 1 Тогда
					НеПроводить(Контекст,Шаблон("В строке [НомерСтроки] для товара [Товар.Код] [Товар] клиенту [КлГруппа] установлен запрет продажи!"));
					Возврат;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	//	Если КоличествоСтрок()=0 Тогда 
	//		НеПроводить(Контекст,"Документ пустой!");
	//		Возврат;
	//	КонецЕсли;     
		
		Если ПустоеЗначение(ДатаПоставки) = 1 Тогда 
			НеПроводить(Контекст,"Выберите дату поставки!"); 
			//Предупреждение("Выберите дату поставки!",10);
			Возврат;
		КонецЕсли;  
	
		Если ГрупповаяОбработка() = 0 Тогда
			Если ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
			Иначе
			//бронирование обработка на основании
				Если (ВидДоставки.Выбран() = 0) Тогда
					НеПроводить(Контекст,"Не выбран вид доставки!"); 
				Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
		Если ДатаПоставки < ДатаДок Тогда
			НеПроводить(Контекст,"Дата поставки прошлым числом, документ не проведен!"); 
			//Предупреждение("Дата поставки прошлым числом, документ не проведен!",10);
			Возврат;		
		КонецЕсли;	 
	
		Если ГрупповаяОбработка()=0 Тогда
			Если (Константа.НовыйМеханизмПретензий.Получить(ДатаДок)=Да) Тогда 
				//проверка на внутреннего клиента 
				Если (семВнутреннийКлиент(Клиент,Фирма)=1) И (ПустоеЗначение(СкладПолучатель)=1) Тогда
					НеПроводить(Контекст,"Для эл. заявки на пополнение склада должен быть обязательно выбран склад получателя!"); 
					Возврат;		
				КонецЕсли;	 
			КонецЕсли;
		КонецЕсли;
	
		
		Если ГрупповаяОбработка() = 0 Тогда
			Путь = КаталогИБ() + "ExtForms\Sem\ПроверкаДолгаКлиента.ert";
			Если ФС.СуществуетФайл( Путь ) = 1 Тогда
				сп = СоздатьОбъект( "СписокЗначений" );
				сп.Установить( "Контекст", ВзятьКонтекст( Контекст ) );
				ОткрытьФормуМодально( "Обработка", сп, Путь );
				Если сп.Получить( "Результат" ) <> 1 Тогда
					СтатусВозврата(0); Возврат;
				КонецЕсли;
			Иначе
				Если семПроверкаКлиента(Контекст) = 0 Тогда
					Сообщить("Документ не проведен!!!","!!!");
					СтатусВозврата(0); Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ГрупповаяОбработка() = 0 Тогда
			Если семПроверкаВремениЭлЗаявки() = 0 Тогда
				НеПроводить(Контекст,"Превышено время подачи эл. заявок.");
				Возврат;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;	
	
	//}   *****проверка при проведении счета*****








		
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Если (ДокТаб.Выбран()=0) Тогда
				НеПроводить(Контекст,"Не сформирована эл.заявка в строке "+НомерСтроки);
				Возврат;
			КонецЕсли;
			
			Если (ДокТаб.ТекущийДокумент().Проведен()=0) Тогда
				НеПроводить(Контекст,"Не проведена эл.заявка в строке "+НомерСтроки);
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
	
		Клиент.ИспользоватьДату(ДатаДок);
		// Запишем главного клиента
		Если Клиент.КлГруппа.Выбран()=1 Тогда
			КлГруппа=Клиент.КлГруппа;
		Иначе
			КлГруппа=Клиент;
		КонецЕсли;       
	
		Если КоличествоСтрок()=0 Тогда 
			НеПроводить(Контекст,"Документ пустой!");
			Возврат;
		КонецЕсли;			
	КонецЕсли;

	Регистр.СостояниеДокумента.Док=ТекущийДокумент();
	Регистр.СостояниеДокумента.Пользователь=Автор;
	Регистр.СостояниеДокумента.Количество=1;
	Регистр.СостояниеДокумента.СостояниеДок=УстановитьСостояние("Ожидает компл.",ТекущийДокумент());
	Регистр.СостояниеДокумента.ДвижениеПриходВыполнить();

КонецПроцедуры

//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения(п_Знач)
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеМОД(Контекст)=1 Тогда
		Возврат;
	КонецЕсли;
	стар_ОбработкаПроведения(п_Знач);
КонецПроцедуры

Процедура стар_ОбработкаУдаленияПроведения()
	
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД

Процедура ОбработкаУдаленияПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	//Если ПроведениеПоАлгоритмуМОД=1 Тогда
	//	Возврат;
	//КонецЕсли;
	//ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
	//ПриОтменеПроведенияДокумента(ТекущийДокумент());
	//стар_ОбработкаУдаленияПроведения();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД

ф_ПроверкаМодуляПРоведения=1;