Перем ВидимостьПроведения;
Перем оПолеВвода_Контрагент; //:Общие.ПолеВыбораЗначения
Перем ПарСтрДокЭлЗаявка; // имя опций печати документов
Перем Валюта_Прежн;
Перем Курс_Прежн;
Перем Режим;
Перем стар_Клиент;
Перем Парт;
Перем ИнформационнаяСтрока;
Перем Prompt;  
Перем ПечатьНапрямую;
Перем спКредЛинияКлиента;
Перем Расш;
Перем ПредЦена;
Перем старЗаголовок;//для смены заголовка при бронировании 
Перем старЗаголовокРезерв;//для смены заголовка при бронировании 
Перем ПрефиксНомера;
Перем флагГлКлиент;
Перем НеЗакрывать;
Перем о_СоздатьСчета;//переменая для создания счетов при сохранении.
Перем стар_ДатаПоставки;
Перем п_АвтоматическаяОбработка;
Перем ЗапросСКЛ;
Перем ф_ПроверкаМодуляПРоведения; //флаг проверки в модуле проведения


Процедура ВыборКлиента() Далее
Процедура ВыборКлиентаФилиала() Далее
Процедура процВидЗаявки(флБронирования) Далее
Процедура ПриВыбореДатыПоставки() Далее
//Функция СвободноЗаказаныхТоваровНаСкладе(пТовар) Далее
Функция СвободноОжидаемыхТоваровНаСкладе(пТовар) Далее

Функция СвободныйОстатокТовараНаСкладе(пТовар,пСкладТаб) Далее


Процедура ЗаполнитьИзменениеЦены() Далее

Процедура кнСоздатьПриНажатии() Далее
Процедура кнСоздатьИПровестиСчетТаб(п_Авто=0) Далее

Процедура ОбработкаВнешнихКоманд()
	Перем ПолучСЗПараметр;
	Перем Команда,пКомплектовщик;
	Перем пТекущийДокПоставки;
	
	ПолучСЗПараметр = Форма.Параметр;
	Если ПустоеЗначение(ПолучСЗПараметр)=0 Тогда
		Команда=ПолучСЗПараметр.Получить("Команда");
		п_ВидЗавки=ПолучСЗПараметр.Получить("пВидЗаявки");
			
		Если Команда="СоздатьЗаявки" Тогда
			п_АвтоматическаяОбработка=1;
			перек_Заявки=3;
//			Если п_ВидЗавки=Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка Тогда
//				перек_Заявки=1;
//			ИначеЕсли п_ВидЗавки=Перечисление.ВидыЗаявок.СпецЗаказ Тогда	
//				перек_Заявки=2;
//			КонецЕсли;
		//	кнСоздатьПриНажатии();

			кнСоздатьИПровестиСчетТаб(1);
			Записать();
			Провести(0,1);
			Форма.Закрыть();
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры


Функция ПолучитьРезерв()
	
	Рез=Регистр.РезервыТоваров.СводныйОстаток(Товар,ДокТаб,"РезервТовара");
	Возврат Рез;
	
КонецФункции

//======================================================================
Процедура ЗаполнитьРезерв()
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Резерв=ПолучитьРезерв();
	КонецЦикла;
КонецПроцедуры // ЗаполнитьРезерв

//======================================================================
Функция табВидЗаявки()
	Если ПустоеЗначение(ВидЗаявкиТаб)=0 Тогда
		Если ВидЗаявкиТаб=Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка Тогда
			Возврат "З"
		ИначеЕсли ВидЗаявкиТаб=Перечисление.ВидыЗаявок.СпецЗаказ Тогда
			Возврат "С"
		КонецЕсли;
	КонецЕсли;
	Возврат "";
КонецФункции // табВидЗаявки

//{*Заполнение данных по складу*\\
Процедура кнПомощь()
	Помощь = СоздатьОбъект("Общие.Помощь");
	Помощь.Открыть("Документ.СчетОбщий");
КонецПроцедуры

Функция ИзменениеСчета(пДок,пДатаОтгрузки,Команда="Изменить")
	Док=СоздатьОбъект("Документ.ОжидаемаяПоставка");
	Если Док.НайтиДокумент(пДок)=1 Тогда
			
		сзПараметр= СоздатьОбъект("СписокЗначений");
			сзПараметр.ДобавитьЗначение(Команда,"Команда");
			сзПараметр.ДобавитьЗначение(пДатаОтгрузки,"пДатаОтгрузки");
			сзПараметр.ДобавитьЗначение(ВзятьКонтекст(ТекущийДокумент()),"Конт");	
			сзПараметр.ДобавитьЗначение(Клиент,"Клиент");
		ОткрытьФорму(док.ТекущийДокумент(),сзПараметр);
		Возврат 1;
	КонецЕсли;
	Возврат 0;
КонецФункции

Процедура КопироватьДокумент(_Источник, _Приемник)
	////////////////////////////////////////////////////////////
	/// Возможна ошибка копирования, проверь наличие всех реквезитов в документекопия !!
	/////////////////////////////////////////////////////////////
	Для ъ = 1 По Метаданные.ОбщийРеквизитДокумента() Цикл
		Реквизит = Метаданные.ОбщийРеквизитДокумента(ъ).Идентификатор;
		Попытка
			_Приемник.УстановитьАтрибут(Реквизит, _Источник.ПолучитьАтрибут(Реквизит));
	 	Исключение
//	  		Сообщить(Реквизит);
	  	КонецПопытки;	
	КонецЦикла;

	Для ъ = 1 По Метаданные.Документ(_Источник.Вид()).РеквизитШапки() Цикл
		Реквизит = Метаданные.Документ(_Источник.Вид()).РеквизитШапки(ъ).Идентификатор;
		Попытка
			_Приемник.УстановитьАтрибут(Реквизит, _Источник.ПолучитьАтрибут(Реквизит));
	 	Исключение
//	  		Сообщить(Реквизит);
	  	КонецПопытки;	
	КонецЦикла;

	_Источник.ВыбратьСтроки();
	Пока _Источник.ПолучитьСтроку() = 1 Цикл
		_Приемник.НоваяСтрока();
		Для ъъ = 1 По Метаданные.Документ(_Источник.Вид()).РеквизитТабличнойЧасти() Цикл
			Реквизит = Метаданные.Документ(_Источник.Вид()).РеквизитТабличнойЧасти(ъъ).Идентификатор;
			Попытка
	  			_Приемник.УстановитьАтрибут(Реквизит, _Источник.ПолучитьАтрибут(Реквизит));
	  		Исключение
//	  			Сообщить(Реквизит);
	  		КонецПопытки;	
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры	// КопироватьДокумент
Функция КлонироватьДокумент(п_ДокКлонирования)
	Перем л_Док;

	л_Док = СоздатьОбъект("Документ.Счет");	
	л_Док.Новый();
	л_Док.УстановитьНовыйНомер("E6LV-BB");

	Попытка
		л_Док.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
		Сообщить("Номер: "+л_Док.НомерДок);
		ВызватьИсключение;
	КонецПопытки;
	КопироватьДокумент(п_ДокКлонирования,л_Док);
	л_Док.IDD=ПолучитьУникальныйIDD();
	л_Док.ДокументОснование=п_ДокКлонирования;
	л_Док.УдалитьСтроки();
	//Если перек_Заявки=1 Тогда
	//	л_Док.ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка;
	//ИначеЕсли перек_Заявки=2 Тогда
	//	л_Док.ВидЗаявки = Перечисление.ВидыЗаявок.СпецЗаказ;
	//КонецЕсли;
	
//	л_Док.Записать();
	Возврат л_Док;
КонецФункции

//======================================================================
Процедура ЗаполнитьВидЗаявки(п_Товар,п_Склад)
	
	Если перек_Заявки=1 Тогда
		ВидЗаявкиТаб = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка;
	ИначеЕсли перек_Заявки=2 Тогда
		ВидЗаявкиТаб = Перечисление.ВидыЗаявок.СпецЗаказ;
	ИначеЕсли перек_Заявки=3 Тогда //автоматичесий выбор
		//по умолчанию 
		ВидЗаявкиТаб = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка;

		Если (п_Товар.ПризнакСпецКода = Перечисление.СпецкодыТоваров.S)
		или (п_Товар.ПризнакСпецКода = Перечисление.СпецкодыТоваров.BS)
		или (п_Товар.ПризнакСпецКода = Перечисление.СпецкодыТоваров.GS)Тогда
			ВидЗаявкиТаб = Перечисление.ВидыЗаявок.СпецЗаказ;	
		КонецЕсли;
		
		Если п_Склад = Константа.ОсновнойСкладСвежихПродуктов Тогда
			// заявки на склад свежих продуктов всегда идут как спец. заказ
			ВидЗаявкиТаб = Перечисление.ВидыЗаявок.СпецЗаказ;		
		КонецЕсли;
		
		Если (Найти(Клиент.Родитель,"RIMI LATVIA")>0) ИЛИ (Найти(Врег(КлиентФилиала),"RIMI")>0) Тогда
			Если ДатаПоставки>(РабочаяДата()+1) Тогда  
				ВидЗаявкиТаб = Перечисление.ВидыЗаявок.СпецЗаказ;   //ставим спец. заказа только в случае когда доставка на послезавтра или позже
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьВидЗаявки

Процедура ЗаполнитьДанныеОТовареАвто(п_Товар)

	Если ПустоеЗначение(Клиент.СкладКомплектации)=0 Тогда
		СкладТаб=Клиент.СкладКомплектации;
	Иначе
		СкладТаб=глОпределитьСкладуПоТовару(п_Товар,КодКомпл);
	КонецЕсли;
	
//	СкладТаб=глОпределитьСкладуПоТовару(п_Товар,КодКомпл);
	ЗаполнитьВидЗаявки(п_Товар,СкладТаб);
КонецПроцедуры // ЗаполнитьДанныеОТовареАвто()

Функция РаскраситьСчет()
	Сост = "";
	ПолучитьСтрокуПоНомеру(НомерСтроки);
	Сост = глПолучитьСостояниеЗаявки(ДокТаб,0);
		Если ПустоеЗначение(Сост)=0 Тогда
			
			Если Сост.Код="-2" Тогда
				Возврат "BRUSH["+глПолучитьЦвет(255,0,0)+"]COUNT[2]";
			Иначе
				Возврат "BRUSH["+?(ПустоеЗначение(Сост.ЦветФонаДляЖурнала)=1,"NONE",Сост.ЦветФонаДляЖурнала.НомерЦвета)+"]COUNT[2]";
			КонецЕсли;		
		КонецЕсли;
КонецФункции
//======================================================================
Процедура ЗаполнитьПустыеСтрокиСклада()
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если (ПустоеЗначение(СкладТаб)=1)или (ПустоеЗначение(ВидЗаявкиТаб)=1)  Тогда
			ЗаполнитьДанныеОТовареАвто(Товар);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры // ЗаполнитьПустыеСтрокиСклада
//======================================================================
Функция НайтиСчет(п_ДокПоиска,п_ВидПоиска="Счет")
	Перем ДокПодч;
	Перем ДокПоиска;
	ИТ=СоздатьОбъект("ИндексированнаяТаблица");
	ИТ.НоваяКолонка("Номер");
	ИТ.НоваяКолонка("СчетСсылка");
	ИТ.НоваяКолонка("Склад");
	ИТ.НоваяКолонка("КодМестаКомплектации");
	ИТ.НоваяКолонка("ВидЗаявки");
//	Ит.ВыбратьСтроки();
	
	ДокПоиска=СоздатьОбъект("Документ."+п_ВидПоиска);
	ДокПодч=СоздатьОбъект("Документ");
	ДокПодч.ВыбратьПодчиненныеДокументы(п_ДокПоиска.ДатаДок,,п_ДокПоиска);
	Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
		Если ДокПодч.ПометкаУдаления()=1 Тогда
			Продолжить;
		КонецЕсли;
		Если ДокПодч.Вид()=п_ВидПоиска Тогда
			ДокПоиска.НайтиДокумент(ДокПодч.ТекущийДокумент());
//			Если ДокПоиска.Склад=п_Склад Тогда
				л_номСтроки=ИТ.НоваяСтрока();
				ИТ.УстановитьЗначение(л_номСтроки,"Номер",л_номСтроки);
				ИТ.УстановитьЗначение(л_номСтроки,"СчетСсылка",ДокПоиска.ТекущийДокумент());
				ИТ.УстановитьЗначение(л_номСтроки,"Склад",ДокПоиска.Склад);
				ИТ.УстановитьЗначение(л_номСтроки,"КодМестаКомплектации",ДокПоиска.КодМестаКомплектации);
				ИТ.УстановитьЗначение(л_номСтроки,"ВидЗаявки",ДокПоиска.ВидЗаявки);

				//			Сообщить(л_номСтроки);
	//			ИТ.ВыбратьСтроку();
	//			ИТ.СчетСсылка=ДокПоиска;
//			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
//	ИТ.ВыбратьСтроку();
//	ИТ.ДобавитьИндекс("иСклад","*Склад");
	ИТ.ДобавитьИндекс("иСклад","*КодМестаКомплектации");
	ИТ.ДобавитьИндекс("иСкладВидЗаявки","*КодМестаКомплектации,*ВидЗаявки");
	Возврат ИТ;	
КонецФункции // ПоискПодчДок

//======================================================================

Процедура СоздатьКлонСчет(п_СкладПолучатель,п_КодКомпл,п_ВидЗаявкиТаб)


//	л_Счет=СоздатьОбъект("Документ.Счет");
	л_Счет=КлонироватьДокумент(ТекущийДокумент());
	л_Счет.IDD = ПолучитьУникальныйIDD();
	ЗаполнитьШапкуНаОсн(л_Счет,ТекущийДокумент());

	//Если п_перек_Заявки=1 Тогда
	//	л_Счет.ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка;
	//ИначеЕсли п_перек_Заявки=2 Тогда
	//	л_Счет.ВидЗаявки = Перечисление.ВидыЗаявок.СпецЗаказ;
	//ИначеЕсли п_перек_Заявки=3 Тогда //автоматичесий выбор
	//	л_Счет.ВидЗаявки = Перечисление.ВидыЗаявок.СпецЗаказ;
	//КонецЕсли;
	
	л_Счет.ВидЗаявки = п_ВидЗаявкиТаб;

	л_Счет.СкладПолучатель=СкладПолучатель;
	л_Счет.Склад=п_СкладПолучатель;
	л_Счет.Основание=Основание;   
	л_КодКомпл=СокрЛП(п_КодКомпл);
	Если СтрДлина(л_КодКомпл)<2 Тогда
		л_КодКомпл=л_КодКомпл+"_";
		Если СтрДлина(л_КодКомпл)<2 Тогда
			л_КодКомпл=л_КодКомпл+"_";
		КонецЕсли;
	КонецЕсли;
	л_СуфиксНомера=Строка(л_КодКомпл)+Строка(?(л_Счет.ВидЗаявки=Перечисление.ВидыЗаявок.СпецЗаказ,3,0));
	л_Номер = СокрЛП(НомерДок) +"_"+л_СуфиксНомера;

	л_Док=СоздатьОбъект("Документ");
	Для к=1 По 100 Цикл
		Если л_Док.НайтиПоНомеру(л_Номер,ДатаДок,"Счет")=1 Тогда
			л_Номер=Лев(л_Номер,16)+Строка(к);
//			Сообщить(л_Номер);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	л_Счет.НомерДок=л_Номер;
	л_Счет.КодМестаКомплектации=л_СуфиксНомера;
	Час_=0;Мин_=0;Сек_=0;
	ТекущееВремя(Час_,Мин_,Сек_);
	л_Счет.УстановитьВремя(Час_,Мин_,Сек_);
	л_Счет.Записать();
	ДокТаб=л_Счет.ТекущийДокумент();
	
//	Сообщить("Создан документ: "+л_Счет);
КонецПроцедуры // СоздатьКлонСчет

//======================================================================
Функция ПроверкаПоставщиковТоваров(п_ТоварДляПоставщика,п_Товар)
//	п_Док.ВыбратьСтроки();
//	п_Док.ПолучитьСтроку(); //Хотя бы 1 товар в счете должен быть
	л_ПоставщикСчета=п_ТоварДляПоставщика.Поставщик;
	л_ПоставщикТовара=п_Товар.Поставщик;
	Если л_ПоставщикСчета=л_ПоставщикТовара Тогда
		Возврат 1;
	КонецЕсли;
	Возврат 0;
КонецФункции // ПроверкаПоставщиковТоваров

Функция ДопускКСчету(п_Док,п_Товар,п_СкладТаб,п_Статус="При создании")

		//если в существующем счете уже превышено количество товара
	//	Если (п_Док.КоличествоСтрок()>Константа.МаксСтрокВСчете)И(п_Статус="При создании") Тогда
	//		Сообщить("Для "+п_Док+" превышено количество строк !");
	//		Возврат 0;
	//	КонецЕсли;
		
		//если в общем счете уже превышено количество Заявок для каждоо товара
		ТЗ=СоздатьОбъект("ТаблицаЗначений");
		ВыгрузитьТабличнуюЧасть(ТЗ,"Товар,ДокТаб");
		
		л_КолисчествоСчетов=0;
		л_ТоварДляПоставщика=ПолучитьПустоеЗначение();
		ТЗ.ВыбратьСтроки();
		Пока ТЗ.ПолучитьСтроку() = 1 Цикл
			Если ТЗ.ДокТаб=п_Док Тогда
				л_КолисчествоСчетов=л_КолисчествоСчетов+1;
				л_ТоварДляПоставщика=ТЗ.Товар;
			КонецЕсли;
		КонецЦикла;
		Если (л_КолисчествоСчетов >(Константа.МаксСтрокВСчете-1))И(п_Статус="При создании") Тогда
//			Сообщить("Для "+п_Док+" превышено количество строк !");
			Возврат 0;
		КонецЕсли;
		
		
		л_Сост=глПолучитьСостояниеДокумента(п_Док,0);
		Если л_Сост.Код="1" Тогда //ожидает комплектации
		ИначеЕсли л_Сост.Код="-2" Тогда //подготавливается
		Иначе
			Сообщить(п_Док+" находится в "+л_Сост+" состоянии. Создается новый счет.");
			Возврат 0;
		КонецЕсли;	
		

		Если п_Статус="При создании" Тогда
			л_Ост=СвободныйОстатокТовараНаСкладе(п_Товар,п_СкладТаб);
			Если л_Ост<=0 Тогда
				Если п_Док.ВидЗаявки = Перечисление.ВидыЗаявок.СпецЗаказ Тогда
					Возврат 1;
				КонецЕсли;				
				л_рез=ПроверкаПоставщиковТоваров(л_ТоварДляПоставщика,п_Товар);
				Если л_рез=1 Тогда
					Возврат 1;
				КонецЕсли;
				Сообщить(п_Товар.Наименование+" имеет 0 остаток. Для него создается новый счет.");
				Возврат 0;
			КонецЕсли;			
		КонецЕсли;
		

		Возврат 1;
КонецФункции // ДопускКСчету
//======================================================================

Процедура ЗаполнитьПустыеСтрокиСчета()
	л_ном=0;

	л_ИТСчета=НайтиСчет(ВзятьКонтекст(ТекущийДокумент()));
//	л_ИТСчета.Показать();
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Состояние(Шаблон("[НомерСтроки]/[КоличествоСтрок()]"));
		Если ПустоеЗначение(ДокТаб)=1 Тогда //нет соответствующего счета
			л_сз=СоздатьОбъект("СписокЗначений");
				л_сз.ДобавитьЗначение(КодКомпл);
				л_сз.ДобавитьЗначение(ВидЗаявкиТаб);


			л_ИТСчета.УстановитьФильтр(л_сз,л_сз,"иСкладВидЗаявки");
			л_количСчетов=л_ИТСчета.КоличествоСтрок("иСкладВидЗаявки");
			Если л_количСчетов=0 Тогда //создаем новый счет

			СоздатьКлонСчет(СкладТаб,КодКомпл,ВидЗаявкиТаб);

				л_номСтроки=л_ИТСчета.НоваяСтрока();
				л_ИТСчета.УстановитьЗначение(л_номСтроки,"Номер",л_номСтроки);
				л_ИТСчета.УстановитьЗначение(л_номСтроки,"СчетСсылка",ДокТаб.ТекущийДокумент());
				л_ИТСчета.УстановитьЗначение(л_номСтроки,"Склад",СкладТаб);
				л_ИТСчета.УстановитьЗначение(л_номСтроки,"КодМестаКомплектации",КодКомпл);
				л_ИТСчета.УстановитьЗначение(л_номСтроки,"ВидЗаявки",ВидЗаявкиТаб);
			ИначеЕсли л_количСчетов>0 Тогда //Счета уже существуют для этого документа и склада
				л_СоздатьСчет=0;
				л_ИТСчета.ВыбратьСтроки("иСкладВидЗаявки");
				Пока л_ИТСчета.ПолучитьСтроку("иСкладВидЗаявки") = 1 Цикл

					л_Допуск=ДопускКСчету(л_ИТСчета.СчетСсылка,Товар,СкладТаб); //проверятеся наличие допуска к изменениям, не

					Если л_Допуск=0 Тогда
						л_СоздатьСчет=1;
					Иначе
						л_СоздатьСчет=0;
						ДокТаб=л_ИТСчета.СчетСсылка;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если л_СоздатьСчет=1 Тогда

					СоздатьКлонСчет(СкладТаб,КодКомпл,ВидЗаявкиТаб);

	//				л_ном=л_ном+1;
					//в певой выборке нового счета не существует, добавляем в таблицу новый созданный счет.
					л_номСтроки=л_ИТСчета.НоваяСтрока();
					л_ИТСчета.УстановитьЗначение(л_номСтроки,"Номер",л_номСтроки);
					л_ИТСчета.УстановитьЗначение(л_номСтроки,"СчетСсылка",ДокТаб.ТекущийДокумент());
					л_ИТСчета.УстановитьЗначение(л_номСтроки,"Склад",СкладТаб);
					л_ИТСчета.УстановитьЗначение(л_номСтроки,"КодМестаКомплектации",КодКомпл);
					л_ИТСчета.УстановитьЗначение(л_номСтроки,"ВидЗаявки",ВидЗаявкиТаб);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		л_ИТСчета.ВыключитьФильтр("иСкладВидЗаявки");
	КонецЦикла;	

КонецПроцедуры // ЗаполнитьПустыеСтрокиСчета

Процедура ЗаполнитьПустыеСтрокиСчета1()
	л_ном=0;

	л_ИТСчета=НайтиСчет(ВзятьКонтекст(ТекущийДокумент()));
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Состояние(Шаблон("[НомерСтроки]/[КоличествоСтрок()]"));
		Если ПустоеЗначение(ДокТаб)=1 Тогда //нет соответствующего счета
			л_ИТСчета.УстановитьФильтр(КодКомпл,КодКомпл,"иСклад");
			л_количСчетов=л_ИТСчета.КоличествоСтрок("иСклад");
			Если л_количСчетов=0 Тогда //создаем новый счет

			СоздатьКлонСчет(СкладТаб,КодКомпл,перек_Заявки);

				л_номСтроки=л_ИТСчета.НоваяСтрока();
				л_ИТСчета.УстановитьЗначение(л_номСтроки,"Номер",л_номСтроки);
				л_ИТСчета.УстановитьЗначение(л_номСтроки,"СчетСсылка",ДокТаб.ТекущийДокумент());
				л_ИТСчета.УстановитьЗначение(л_номСтроки,"Склад",СкладТаб);
				л_ИТСчета.УстановитьЗначение(л_номСтроки,"КодМестаКомплектации",КодКомпл);
				
			ИначеЕсли л_количСчетов>0 Тогда //Счета уже существуют для этого документа и склада
				л_СоздатьСчет=0;
				л_ИТСчета.ВыбратьСтроки("иСклад");
				Пока л_ИТСчета.ПолучитьСтроку("иСклад") = 1 Цикл

					л_Допуск=ДопускКСчету(л_ИТСчета.СчетСсылка,Товар,СкладТаб); //проверятеся наличие допуска к изменениям, не

					Если л_Допуск=0 Тогда
						л_СоздатьСчет=1;
					Иначе
						л_СоздатьСчет=0;
						ДокТаб=л_ИТСчета.СчетСсылка;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если л_СоздатьСчет=1 Тогда

					СоздатьКлонСчет(СкладТаб,КодКомпл,перек_Заявки);

	//				л_ном=л_ном+1;
					//в певой выборке нового счета не существует, добавляем в таблицу новый созданный счет.
					л_номСтроки=л_ИТСчета.НоваяСтрока();
					л_ИТСчета.УстановитьЗначение(л_номСтроки,"Номер",л_номСтроки);
					л_ИТСчета.УстановитьЗначение(л_номСтроки,"СчетСсылка",ДокТаб.ТекущийДокумент());
					л_ИТСчета.УстановитьЗначение(л_номСтроки,"Склад",СкладТаб);
					л_ИТСчета.УстановитьЗначение(л_номСтроки,"КодМестаКомплектации",КодКомпл);

				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		л_ИТСчета.ВыключитьФильтр("иСклад");
	КонецЦикла;	

КонецПроцедуры // ЗаполнитьПустыеСтрокиСчета

//======================================================================

//{ *****ОбновитьСчета*****

//======================================================================
Процедура ОбновитьШапкуСчета(п_Счет,п_Склад)
	п_Счет.Клиент			= Клиент;
	п_Счет.ВидДоставки		= ВидДоставки;
	п_Счет.КатегорияЦены	= КатегорияЦены;
	п_Счет.Агент			= Агент;
	п_Счет.ВидОплаты		= ВидОплаты;
	п_Счет.СкидкаНакл		= СкидкаНакл;
//	п_Счет.ВидЗаявки=ВидЗаявки;
	п_Счет.СтавкаНДС		= СтавкаНДС;
	п_Счет.АдресДоставки 	= АдресДоставки;
	п_Счет.АдресДоставкиДоп	= АдресДоставкиДоп;
	п_Счет.ДатаПоставки		= ДатаПоставки;
	п_Счет.МаршрутДоставкиГрафик = МаршрутДоставкиГрафик;
	п_Счет.КатегорияСписания = КатегорияСписания;
	п_Счет.КатегорияСписанияДоп = КатегорияСписанияДоп;
	п_Счет.Склад			= п_Склад;   
	
	п_Счет.АвтоВремяТекущее();
	//п_Счет.Записать();
КонецПроцедуры // ОбновитьШапкуСчета

Процедура ОбновитьСчета()
	Перем л_итСписокТоваров;//индексная таблица товаров
	л_Счет=СоздатьОбъект("Документ.Счет");
	л_итСписокДокументов=СоздатьОбъект("ИндексированнаяТаблица");
	л_итСписокТоваров=СоздатьОбъект("ИндексированнаяТаблица");

	л_ТабЗнач = СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(л_ТабЗнач,);
	
	л_итСписокДокументов.Загрузить(л_ТабЗнач);
	л_итСписокДокументов.Свернуть("ДокТаб",);	
	
	л_итСписокТоваров.Загрузить(л_ТабЗнач);
	л_итСписокТоваров.ДобавитьИндекс("иДокТаб","*ДокТаб");	

	л_итСписокДокументов.ВыбратьСтроки();
	Пока л_итСписокДокументов.ПолучитьСтроку() = 1 Цикл
		л_итСписокТоваров.УстановитьФильтр(л_итСписокДокументов.ДокТаб,л_итСписокДокументов.ДокТаб,"иДокТаб");
		Если ПустоеЗначение(л_итСписокДокументов.ДокТаб)=1 Тогда
			Продолжить;
		КонецЕсли;
		л_Счет.НайтиДокумент(л_итСписокДокументов.ДокТаб);
		л_Допуск=ДопускКСчету(л_Счет.ТекущийДокумент(),Товар,СкладТаб,"При обновлении");
		
		Если (л_Счет.Выбран()=1) И (л_Допуск=1) Тогда
//			л_Счет.СделатьНеПроведенным();
			ОбновитьШапкуСчета(л_Счет,л_итСписокДокументов.СкладТаб);
			л_ТабЗначДокТаб = СоздатьОбъект("ТаблицаЗначений");
			л_Счет.ВыгрузитьТабличнуюЧасть(л_ТабЗначДокТаб);
			л_ТабЗначДокТаб.УдалитьСтроки();
			л_итСписокТоваров.Выгрузить(л_ТабЗначДокТаб,"иДокТаб");
			//проверка на количкество
	//		Если л_ТабЗначДокТаб.КоличествоСтрок()>Константа.МаксСтрокВСчете Тогда
	//			Сообщить("Для "+л_Счет+" превышено количество строк !");
	//		Иначе
				л_Счет.ЗагрузитьТабличнуюЧасть(л_ТабЗначДокТаб);
				Если л_Счет.Проведен()=0 Тогда
					Час_=0;Мин_=0;Сек_=0;
					ТекущееВремя(Час_,Мин_,Сек_);
					л_Счет.УстановитьВремя(Час_,Мин_,Сек_);
				КонецЕсли;
///				л_Счет.АвтоВремяТекущее();
				л_Счет.Записать();
				Если л_Счет.Проведен()=1 Тогда
					л_Счет.Провести();
				КонецЕсли;
				Сообщить(л_Счет+" Успешно изменен, проведен и сохранен.");
				Записать();
	//		КонецЕсли;
			//
		КонецЕсли;
		л_итСписокТоваров.ВыключитьФильтр("иДокТаб");
	КонецЦикла;
	
КонецПроцедуры 

//} *****ОбновитьСчета**********

//Процедура ВнестиИзмененияВСчета()
//	Перем л_итСписокТоваров;//индексная таблица товаров
//	ВыбратьСтроки();
//	Пока ПолучитьСтроку() = 1 Цикл
//		л_итСписокТоваров=СоздатьОбъект("ИндексированнаяТаблица");
//		л_ТЗСписокТоваров=СоздатьОбъект("ТаблицаЗначений");
//		ДокТаб.ВыгрузитьТабличнуюЧасть(л_ТЗСписокТоваров);
//		л_итСписокТоваров.Загрузить(л_ТЗСписокТоваров);
//		л_итСписокТоваров.ДобавитьИндекс("иТовар","*Товар");
//		Если л_итСписокТоваров.НайтиСтроку("иТовар",Товар,,1)>0 Тогда
//			л_итСписокТоваров.Товар=Товар;
//			л_итСписокТоваров.Количество=Количество;
//			л_итСписокТоваров.СреднееЗаМес=СреднееЗаМес;
//			л_итСписокТоваров.Единица=Единица;
//			л_итСписокТоваров.Цена=Цена;
//			л_итСписокТоваров.Коэффициент=Коэффициент;
//			л_итСписокТоваров.Сумма=Сумма;
//			л_итСписокТоваров.НДС=НДС;
//			л_итСписокТоваров.Набор=Набор;
//			л_итСписокТоваров.ТовКод=ТовКод;
//			л_итСписокТоваров.Резерв=Резерв;
//			л_итСписокТоваров.РознЦена=РознЦена;
//			л_итСписокТоваров.ЦенаСНДС=ЦенаСНДС;
//			л_итСписокТоваров.Скидка=Скидка;
//			л_итСписокТоваров.ВидСкидки=ВидСкидки;
//			л_итСписокТоваров.Всего=Всего;
//			л_итСписокТоваров.МинСрокРеализ=МинСрокРеализ;
//			л_итСписокТоваров.МаксСрокРеализ=МаксСрокРеализ;
//			л_итСписокТоваров.ПояснениеСкидки=ПояснениеСкидки;
//			л_итСписокТоваров.СрокРеализВозвр=СрокРеализВозвр;
//			л_итСписокТоваров.КатегорияВозврата=КатегорияВозврата;
//			л_итСписокТоваров.ПояснениеВозврата=ПояснениеВозврата;
//			л_итСписокТоваров.ПоставщикТовараВозврата=ПоставщикТовараВозврата;
//			л_итСписокТоваров.НомерСтрокиЗамены=НомерСтрокиЗамены;
//		Иначе 
//			
//			
//		КонецЕсли;	
//	КонецЦикла;
//	
//КонецПроцедуры // ВнестиИзмененияВСчета

Процедура кнСоздатьПриНажатии()
	Перем л_итСписокСкладов,л_ТабЗнач;
	Перем л_Счет,л_ИТ;
	Перем л_колСчетов,л_колСтрокТовараНаСкладе;	
	

	Если (ПроверкаДублейСтрок(Контекст)=1) Тогда 
		Сообщить("Заявки не создаются. В документе строки с одинаковым товаром!");
		Возврат;
	ИначеЕсли ПустоеЗначение(ДатаПоставки)=1 Тогда 
		Сообщить("Заполните дату поставки");
		Возврат;
	ИначеЕсли ДатаПоставки<РабочаяДата() Тогда 
		Сообщить("Дата поставки меньше сегодняшей даты. Измените дату поставки!");
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(ВидДоставки)=1 Тогда 
		Сообщить("Заполните вид доставки");
		Возврат;
	КонецЕсли;

	Если ПустоеЗначение(Агент)=1 Тогда 
		Сообщить("Выберите агента");
		Возврат;
	КонецЕсли;

	Если ПустоеЗначение(КатегорияЦены)=1 Тогда 
		Сообщить("Выберите категорию цены");
		Возврат;
	КонецЕсли;
	Записать();
	Если Выбран()=0 Тогда
		Сообщить("Документ не записан!");
		Возврат;
	КонецЕсли;
	АвтоВремяТекущее(); 
	
	ВремяНач  = _GetPerformanceCounter();
	начЛог = семЗаписатьЛогНач( "Документ", "СчетОбщий", "Обработка", "Создать при нажатии" );
	
	//автоматом заполняем пустые склады
	ЗаполнитьПустыеСтрокиСклада();
	ЗаполнитьПустыеСтрокиСчета();
	ОбновитьСчета();
	//ЗаполнитьРезерв();
	Записать();
	семЗаписатьЛогКон( начЛог );
	
	ВремяКон  = _GetPerformanceCounter();
	Сообщить("Время создания счетов: "+Окр((ВремяКон-ВремяНач)/1000,2)+" сек.");
	
КонецПроцедуры

//Процедура кнСоздатьПриНажатии_1()
//	Перем л_итСписокСкладов,л_ТабЗнач;
//	Перем л_Счет,л_ИТ;
//	Перем л_колСчетов,л_колСтрокТовараНаСкладе;	
//	
//	//автоматом заполняем пустые склады
//	ВыбратьСтроки();
//	Пока ПолучитьСтроку() = 1 Цикл
//		Если ПустоеЗначение(СкладТаб)=1 Тогда
//			ЗаполнитьДанныеОТовареАвто(Товар);
//		КонецЕсли;
//	КонецЦикла;
//
//	
//	
//	л_итСписокСкладов=СоздатьОбъект("ИндексированнаяТаблица");
//	л_итСписокТоваров=СоздатьОбъект("ИндексированнаяТаблица");
//	л_итСписокДокументов=СоздатьОбъект("ИндексированнаяТаблица");
//
//	л_ИТ = СоздатьОбъект("ИндексированнаяТаблица");
//	л_ТабЗнач = СоздатьОбъект("ТаблицаЗначений");
//	ВыгрузитьТабличнуюЧасть(л_ТабЗнач,);
//	
//	л_итСписокТоваров.Загрузить(л_ТабЗнач);
//	л_итСписокТоваров.ДобавитьИндекс("иСклад","*СкладТаб");
//	
//	л_итСписокСкладов.Загрузить(л_ТабЗнач);
//	л_итСписокСкладов.Свернуть("СкладТаб",);
////	л_итСписокСкладов.Показать();
//
//	л_итСписокДокументов.Загрузить(л_ТабЗнач);
//	л_итСписокДокументов.Свернуть("ДокТаб",);
//
//	//По количеству складов создаем такоеже количество документов
//	
//	Записать();
//	
//	л_Счет=СоздатьОбъект("Документ.Счет");
//
//	л_итСписокСкладов.ВыбратьСтроки();
//	Пока л_итСписокСкладов.ПолучитьСтроку() = 1 Цикл
//		л_итСписокТоваров.УстановитьФильтр(л_итСписокСкладов.СкладТаб,л_итСписокСкладов.СкладТаб,"иСклад");
////		л_итСписокТоваров.Показать("иСклад");
//
//		л_колСтрокТовараНаСкладе=л_итСписокТоваров.КоличествоСтрок("иСклад",);
//		Если л_колСтрокТовараНаСкладе>Константа.МаксСтрокВСчете Тогда //проверка количества строк
//			л_колСчетов=Цел(л_колСтрокТовараНаСкладе/Константа.МаксСтрокВСчете)+1;
//		Иначе
//			л_колСчетов=1;
//		КонецЕсли;
//	
//	
//		Для к=1 По л_колСчетов Цикл
////			Сообщить(л_колСчетов);
//			Сообщить(к);
////			л_Счет=КлонироватьДокумент(ТекущийДокумент());
////			Сообщить("Создан документ: "+л_Счет);
//			
////			Если л_Счет.Выбран()=1 Тогда
//				ТЗ=СоздатьОбъект("ТаблицаЗначений");
//				л_итТовараКуда=СоздатьОбъект("ИндексированнаяТаблица");
//				л_итТовараОткуда=СоздатьОбъект("ИндексированнаяТаблица");
//				
//				л_итСписокТоваров.Выгрузить(л_итТовараКуда,"иСклад");
//				л_итСписокТоваров.Выгрузить(л_итТовараОткуда,"иСклад");
//				
//				л_итТовараКуда.УдалитьСтроки();				
//				
////				л_итТовараКуда.Показать();
////				л_итТовараОткуда.Показать();
//				
//			//	л_итТовараОткуда.ВыбратьСтроки();
//			//	л_колич=л_колич*(к-1);
//				л_итТовараОткуда.ВыбратьСтроки();
//				Пока л_итТовараОткуда.ПолучитьСтроку() = 1 Цикл
//					л_колич=л_колич+1;
//					Если л_колич=Константа.МаксСтрокВСчете Тогда
//						Прервать;
//					КонецЕсли;
//					л_итТовараКуда.НоваяСтрока();
//					л_итТовараКуда.ЗаполнитьСтроку(,л_итТовараОткуда,,);
//				КонецЦикла;
//	
//				л_количествоСтрокОткуда=л_итТовараОткуда.КоличествоСтрок();
//				Для лл=1 По Константа.МаксСтрокВСчете Цикл
//					Если лл=л_количествоСтрокОткуда Тогда
//						Прервать;
//					КонецЕсли;
//					л_итТовараОткуда.УдалитьСтроку(1);
//				КонецЦикла;
//				
////				л_итТовараОткуда.Показать();
//				
//				
//				
//				
//		//		Для л=1+((к-1)*Константа.МаксСтрокВСчете) По Константа.МаксСтрокВСчете+(л_итТовараОткуда.КоличествоСтрок()-Константа.МаксСтрокВСчете) Цикл
//		//			л_итТовараКуда.НоваяСтрока();
//					
//		//			л_итТовараОткуда.СледующаяСтрока();
//		//		КонецЦикла;
////				л_итТовараКуда.Показать();
////				л_Счет.УдалитьСтроки();
//////				л_Счет.ЗагрузитьТабличнуюЧасть(ТЗ);
////				
////				л_Счет.ЗагрузитьТабличнуюЧасть();
////
////				л_Счет.СкладПолучатель=л_итСписокСкладов.СкладТаб;
////				л_Счет.Записать();
////				л_Счет.Провести();
////			
////				//Заполнение собственной таблицы
////				л_итСписокТоваров.ВыбратьСтроки("иСклад");
////				Пока л_итСписокТоваров.ПолучитьСтроку("иСклад") = 1 Цикл
////					ПолучитьСтрокуПоНомеру(л_итСписокТоваров.НомерСтрокиДокумента);
////					ДокТаб=л_Счет.ТекущийДокумент();
////				КонецЦикла;
////			КонецЕсли;		
//		КонецЦикла;
//		
//	//	Если ПустоеЗначение(л_итСписокСкладов.ДокТаб)=0 Тогда
//	//		л_Счет.НайтиДокумент(л_итСписокСкладов.ДокТаб);
//	//		Сообщить("Изменен документ: "+л_Счет);
//	//	Иначе
//	//		л_Счет=КлонироватьДокумент(ТекущийДокумент());
//	//		Сообщить("Создан документ: "+л_Счет);
//	//	КонецЕсли;
//	//	
//	//	Если л_Счет.Выбран()=1 Тогда
//	//		ТЗ=СоздатьОбъект("ТаблицаЗначений");
//	//		л_итСписокТоваров.Выгрузить(ТЗ,"иСклад");
//	////		л_ИТ.Показать();
//	//		
//	////		л_ИТ.Выгрузить(ТЗ);
//	//		л_Счет.УдалитьСтроки();
//	//		л_Счет.ЗагрузитьТабличнуюЧасть(ТЗ);
//	//		л_Счет.СкладПолучатель=л_итСписокСкладов.СкладТаб;
//	//		л_Счет.Записать();
//	//		л_Счет.Провести();
//	//		
//	//		//Заполнение собственной таблицы
//	//		л_итСписокТоваров.ВыбратьСтроки("иСклад");
//	//		Пока л_итСписокТоваров.ПолучитьСтроку("иСклад") = 1 Цикл
//	//			ПолучитьСтрокуПоНомеру(л_итСписокТоваров.НомерСтрокиДокумента);
//	//			ДокТаб=л_Счет.ТекущийДокумент();
//	//		КонецЦикла;
//	//	КонецЕсли;		
//		л_итСписокТоваров.ВыключитьФильтр("иСклад");
//	КонецЦикла;
//
////	НеЗакрывать=1;
////	Форма.Закрыть(0);
//
//КонецПроцедуры // кнСоздатьПриНажатии
//
//
//Процедура кнСоздатьПриНажатии_2()
//	Перем л_итСписокСкладов,л_ТабЗнач;
//	Перем л_Счет,л_ИТ;
//
//	//автоматом заполняем пустые склады
//	ВыбратьСтроки();
//	Пока ПолучитьСтроку() = 1 Цикл
//		Если ПустоеЗначение(СкладТаб)=1 Тогда
//			ЗаполнитьДанныеОТовареАвто(Товар);
//		КонецЕсли;
//	КонецЦикла;
//
//	
//	
//	л_итСписокСкладов=СоздатьОбъект("ИндексированнаяТаблица");
//	л_итСписокТоваров=СоздатьОбъект("ИндексированнаяТаблица");
//	л_итСписокДокументов=СоздатьОбъект("ИндексированнаяТаблица");
//
//	л_ИТ = СоздатьОбъект("ИндексированнаяТаблица");
//	л_ТабЗнач = СоздатьОбъект("ТаблицаЗначений");
//	ВыгрузитьТабличнуюЧасть(л_ТабЗнач,);
//	
//	л_итСписокТоваров.Загрузить(л_ТабЗнач);
//	л_итСписокТоваров.ДобавитьИндекс("иСклад","*СкладТаб");
//	
//	л_итСписокСкладов.Загрузить(л_ТабЗнач);
//	л_итСписокСкладов.Свернуть("СкладТаб",);
////	л_итСписокСкладов.Показать();
//
//	л_итСписокДокументов.Загрузить(л_ТабЗнач);
//	л_итСписокДокументов.Свернуть("ДокТаб",);
//
//	//По количеству складов создаем такоеже количество документов
//	
//	Записать();
//	
//	л_Счет=СоздатьОбъект("Документ.Счет");
//	
//	л_итСписокСкладов.ВыбратьСтроки();
//	Пока л_итСписокСкладов.ПолучитьСтроку() = 1 Цикл
//		л_итСписокТоваров.УстановитьФильтр(л_итСписокСкладов.СкладТаб,л_итСписокСкладов.СкладТаб,"иСклад");
////		л_итСписокТоваров.Показать("иСклад");
//		
//		Если ПустоеЗначение(л_итСписокСкладов.ДокТаб)=0 Тогда
//			л_Счет.НайтиДокумент(л_итСписокСкладов.ДокТаб);
//			Сообщить("Изменен документ: "+л_Счет);
//		Иначе
//			л_Счет=КлонироватьДокумент(ТекущийДокумент());
//			Сообщить("Создан документ: "+л_Счет);
//		КонецЕсли;
//
//		Если л_Счет.Выбран()=1 Тогда
//			ТЗ=СоздатьОбъект("ТаблицаЗначений");
//			л_итСписокТоваров.Выгрузить(ТЗ,"иСклад");
//	//		л_ИТ.Показать();
//			
//	//		л_ИТ.Выгрузить(ТЗ);
//			л_Счет.УдалитьСтроки();
//			л_Счет.ЗагрузитьТабличнуюЧасть(ТЗ);
//			л_Счет.СкладПолучатель=л_итСписокСкладов.СкладТаб;
//			л_Счет.Записать();
//			л_Счет.Провести();
//			
//			//Заполнение собственной таблицы
//			л_итСписокТоваров.ВыбратьСтроки("иСклад");
//			Пока л_итСписокТоваров.ПолучитьСтроку("иСклад") = 1 Цикл
//				ПолучитьСтрокуПоНомеру(л_итСписокТоваров.НомерСтрокиДокумента);
//				ДокТаб=л_Счет.ТекущийДокумент();
//			КонецЦикла;
//		КонецЕсли;		
//		л_итСписокТоваров.ВыключитьФильтр("иСклад");
//	КонецЦикла;
//
////	НеЗакрывать=1;
////	Форма.Закрыть(0);
//КонецПроцедуры


//======================================================================

//Процедура кнПолучитьСостояниеОбщейЗаявки()
//	Перем ДокПодчСтатус;
//
//		Док=ТекущийДокумент();
//		ДокПодч=СоздатьОбъект("Документ");
//		
////		ДокПодч.ВыбратьПодчиненныеДокументы(Док.ДатаДок,Док.ДатаДок,Док); //обычно создаются в тот же день.
//
//			Сост=ПолучитьПустоеЗначение("Справочник.СостоянияДокументов");
//			СтатусСост=999; //0-анулирована,1-принята,2-комплектуется,3-Готова к отгрузки, 4-Выполнена  
//
//			ДокПодч.ВыбратьПодчиненныеДокументы(,,Док); //обычно создаются в тот же день.
//			Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
//				Если ДокПодч.Вид()="Счет" Тогда
//
//					Сост = глПолучитьСостояниеЗаявки(ДокПодч.ТекущийДокумент(),0);
//					Если Сост.Код="0" Тогда
//						СтатусСост=Мин(СтатусСост,0)
//					ИначеЕсли Сост.Код="1" Тогда
//						СтатусСост=Мин(СтатусСост,1)
//					ИначеЕсли Сост.Код="3" Тогда
//						СтатусСост=Мин(СтатусСост,3)
//					ИначеЕсли Сост.Код="4" Тогда
//						СтатусСост=Мин(СтатусСост,4)
//					КонецЕсли;
//
//					Сообщить(ДокПодч.ТекущийДокумент());
//					Сообщить(Сост);	
//					Сообщить(СтатусСост);					
//				КонецЕсли;	
//			КонецЦикла;	
//			Сообщить(СтатусСост);		
//
//			
//	//Сост=ПолучитьПустоеЗначение("Справочник.СостоянияДокументов");
//	//СтатусСост=999; //0-анулирована,1-принята,2-комплектуется,3-Готова к отгрузки, 4-Выполнена  
//	//ВыбратьСтроки();
//	//Пока ПолучитьСтроку() = 1 Цикл
//	//	Сост = глПолучитьСостояниеЗаявки(ДокТаб,0);
//	//	Если Сост.Код="0" Тогда
//	//		СтатусСост=Мин(СтатусСост,0)
//	//	ИначеЕсли Сост.Код="1" Тогда
//	//		СтатусСост=Мин(СтатусСост,1)
//	//	ИначеЕсли Сост.Код="3" Тогда
//	//		СтатусСост=Мин(СтатусСост,3)
//	//	ИначеЕсли Сост.Код="4" Тогда
//	//		СтатусСост=Мин(СтатусСост,4)
//	//	КонецЕсли;
//	//КонецЦикла;
//	//Сообщить(СтатусСост);	
//	
//	//Сост = "";
//	//ПолучитьСтрокуПоНомеру(1);
//	//Сост = глПолучитьСостояниеЗаявки(ДокТаб,0);
//	//Сообщить(ДокТаб);	
//	//Сообщить(Сост);	
//	
//	Сообщить("Статус");
//	Сообщить(глПолучитьСостояниеДокумента(ТекущийДокумент()));
//КонецПроцедуры // ПолучитьСостояниеОбщейЗаявки

//}*Заполнение данных по складу*\\




Процедура кнПодбор()
	//Z_Подбор(Контекст,Режим);
	// переменные нужны, чтобы не изменялись данные в документе, при изменении их в форме подбора
	//Если КоличествоСтрок()>=25 Тогда
	//	Предупреждение("В заявке уже "+КоличествоСтрок()+" строк. Создавайте новый документ!");
	//	Возврат;
	//КонецЕсли;

	//СкладГруппа = глПолучитьГруппуСклада(Склад);
	СкладГруппа = Склад.Родитель;
	
	пКлиент = ?(ПустоеЗначение(КлиентФилиала)=1,Клиент.ТекущийЭлемент(),КлиентФилиала.ТекущийЭлемент());
	//пСклад = Склад;
	//пВалюта = Валюта;
	ОткрытьПодбор("Справочник.Номенклатура","ДляПодбора",пКлиент);
	Попытка
		//УстановитьЗначениеВПодборе("Склад",глОпределитьСкладуПоТовару(п_Товар));
	Исключение
	КонецПопытки;
	Попытка
		УстановитьЗначениеВПодборе("Склад",СкладГруппа);
		УстановитьЗначениеВПодборе("выбВалюта",Валюта);
	Исключение
	КонецПопытки;
	Режим="Каталог";
КонецПроцедуры


// бронь в пути

//Функция ЗапросДокументПривязки(Выб)
//	
//	Перем допусл;//дополнительный текст
//	Перем старНомерСтроки; //переменая для сохранения знач строк в таблице
//	Перем тДокументПривязки;
//	Перем пНомерСтроки; // для выбора номера строки
//	
//	тДокументПривязки=СоздатьОбъект("ТаблицаЗначений");
//	старНомерСтроки=НомерСтроки;
//	
//		Запрос=СоздатьОбъект("ODBCRecordSet");
//		Если (КоличествоСтрок()>0) И (Выб=Товар) Тогда
//			Запрос.УстановитьТекстовыйПараметр("Товар",Выб);
//		Иначе
//			Возврат 0;
//		КонецЕсли;
//				
//		ТекстЗапроса="SELECT NullIf(ЗаказыПоставщикамОстатки.СрокПоставки, '17530101') СрокПоставки
//	|, Журнал.DOCNO НомерЗакзаПоставщику
//	|, (ЗаказыПоставщикамОстатки.КоличествоОстаток - COALESCE(ЗаказыПоставщикамЗаявкиОстатки.КоличествоОстаток,0)) Остаток
//	|, ЗаказыПоставщикамОстатки.ПоЗаказу [ПоЗаказу $Документ]
//	|FROM $РегистрОстатки.ЗаказыПоставщикам(,
//	|	,
//	|	(Товар = :Товар),
//	|	(СрокПоставки, ПоЗаказу),) AS ЗаказыПоставщикамОстатки
//	|LEFT JOIN $РегистрОстатки.ЗаказыПоставщикамЗаявки(,,(Товар = :Товар),
//	|	(ПоЗаказу),) AS ЗаказыПоставщикамЗаявкиОстатки ON ЗаказыПоставщикамОстатки.ПоЗаказу = ЗаказыПоставщикамЗаявкиОстатки.ПоЗаказу 
//	|INNER JOIN _1SJOURN AS Журнал ON RIGHT(ЗаказыПоставщикамОстатки.ПоЗаказу,9) = Журнал.IDDOC
//	|ORDER BY ЗаказыПоставщикамОстатки.СрокПоставки";
//		
//		Запрос.ВыполнитьИнструкцию(ТекстЗапроса,тДокументПривязки);
//		тДокументПривязки.ВидимостьКолонки("ПоЗаказу",0,);
//		пНомерСтроки=1;
//		Если (тДокументПривязки.КоличествоСтрок()>0) 
//		   И (тДокументПривязки.выбратьстроку(пНомерСтроки,"Выбирите документ Заказ Поставщику в котором есть данный товар",60)=1) Тогда
//				ДокументПривязки=тДокументПривязки.ПолучитьЗначение(пНомерСтроки,"ПоЗаказу");	
//			Возврат тДокументПривязки.КоличествоСтрок();
//		Иначе
//			Возврат 0;
//		КонецЕсли;		
//КонецФункции

Функция ЗапросДокументПривязки(Выб)
	
	Перем допусл;//дополнительный текст
	Перем старНомерСтроки; //переменая для сохранения знач строк в таблице
	Перем тДокументПривязки;
	Перем пНомерСтроки; // для выбора номера строки
	
	тДокументПривязки=СоздатьОбъект("ТаблицаЗначений");
	старНомерСтроки=НомерСтроки;
	
		Запрос=СоздатьОбъект("ODBCRecordSet");
		Если (КоличествоСтрок()>0) И (Выб=Товар) Тогда
			Запрос.УстановитьТекстовыйПараметр("пТовар",Выб);
		Иначе
			Возврат 0;
		КонецЕсли;
				
		ТекстЗапроса="SELECT NullIf(ТоварыВПутиОстатки.СрокПоставки, '17530101') Срок
		|	, ТоварыВПутиОстатки.Док [Документ $Документ]
		|	, ТоварыВПутиОстатки.КоличествоОстаток Количество
		|FROM $РегистрОстатки.ТоварыВПути(,,
		|		(Товар = :пТовар),
		|		(СрокПоставки, Док),) AS ТоварыВПутиОстатки
		|";
		
		Запрос.ВыполнитьИнструкцию(ТекстЗапроса,тДокументПривязки);
	//	тДокументПривязки.ВидимостьКолонки("ПоЗаказу",0,);
		пНомерСтроки=1;
		Если (тДокументПривязки.КоличествоСтрок()>0) 
		   И (тДокументПривязки.выбратьстроку(пНомерСтроки,"Выбирите документ Заказ Поставщику в котором есть данный товар",60)=1) Тогда
				ДокументПривязки=тДокументПривязки.ПолучитьЗначение(пНомерСтроки,"Документ");	
			Возврат тДокументПривязки.КоличествоСтрок();
		Иначе
			Возврат 0;
		КонецЕсли;		
КонецФункции

Процедура ВыбратьДокументПривязки(Выб)
	
	Если ЗапросДокументПривязки(Выб)=0 Тогда
		Если КоличествоСтрок()>0 Тогда
			УдалитьСтроку();
		КонецЕсли;
	//	Сообщить("Товар не может быть выбран. Отсутствует в документе Заказ Поставщика: "+ДокументПривязки+".");
		Сообщить("Товар не может быть выбран. Отсутствует в документе Ожидаемая поставка:"+ДокументПривязки+".");
	КонецЕсли;

КонецПроцедуры

Процедура кнИнфоЗакПостав()
	Если ДокументПривязки.Выбран()=1 Тогда
		ОткрытьФорму(ДокументПривязки,,1);
	КонецЕсли;
КонецПроцедуры

// бронь в пути
Процедура ВыбратьГрафикМаршрутаДляКлиента()

	Если (АдресДоставки.Выбран()=1) И (ПустоеЗначение(ДатаПоставки)=0) Тогда
		пМаршрут=АдресДоставки.Маршрут;

		Запрос=СоздатьОбъект("ODBCRecordSet");
		ТекстЗапроса="SELECT МаршрутыДоставкиГрафик.ID [График $Справочник.МаршрутыДоставкиГрафик]
		|			  FROM $Справочник.МаршрутыДоставкиГрафик AS МаршрутыДоставкиГрафик
		|			  WHERE (МаршрутыДоставкиГрафик.PARENTEXT = :ВыбМаршрут)
		|";
		Запрос.УстановитьТекстовыйПараметр("ВыбМаршрут",пМаршрут);
		тГрафикМаршрута=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
		Если тГрафикМаршрута.КоличествоСтрок()>0 Тогда
			Если ПустоеЗначение(МаршрутДоставкиГрафик)=1 Тогда
				МаршрутДоставкиГрафик=тГрафикМаршрута.ПолучитьЗначение(1,"График");
			КонецЕсли;

			Если тГрафикМаршрута.КоличествоСтрок()>1 Тогда
				сзГрафик=СоздатьОбъект("СписокЗначений");
				тГрафикМаршрута.Выгрузить(сзГрафик);
				сзГрафик.ВыбратьЗначение(МаршрутДоставкиГрафик,"Выберите график для маршрута "+пМаршрут);
			КонецЕсли;			
		Иначе
			МаршрутДоставкиГрафик="";
		КонецЕсли;
	Иначе
		МаршрутДоставкиГрафик="";
	КонецЕсли;
КонецПроцедуры

Процедура ПриВводеСтроки()
	Сообщить( "Новые товары добавляются в документ через кнопку <z Подбор>", "I" );
	СтатусВозврата(0);
КонецПроцедуры

Процедура семУстановкаКурса()
	// Процедура создана специально для установки заранее определеннтого курса валюты LTL
	// при создании эл.заявки агентом из Литвы
	Если глКодСтраныПользователя <> Константа.ОсновнаяФирма.Страна.Код Тогда // только для агентов из Литвы
		Если Валюта.Наименование = "LTL" Тогда // только для литовской валюты LTL
			Курс = 0.20354611;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ФорматВывода( парам )
	Если парам = "Маршрут" Тогда
		Если Клиент.Выбран() = 0 Тогда Возврат ""; КонецЕсли;
		Если Клиент.АдресДоставки.Выбран() = 0 Тогда
			Возврат Клиент.Маршрут;
		Иначе
			Адрес = Клиент.АдресДоставки;
			Возврат Шаблон( "[Адрес.Родитель.Родитель.Наименование], [Адрес.Родитель.Наименование] ([Адрес.Маршрут.Наименование])" );
		КонецЕсли;
	ИначеЕсли парам = "МаршрутКлиента" Тогда
		Если ПустоеЗначение(МаршрутДоставкиГрафик)=1 Тогда
//			Сообщить("Адрес доставки клиента "+Клиент.АдресДоставки.Маршрут.Код);
			Возврат СокрЛП(Клиент.АдресДоставки.Маршрут.Наименование);
		Иначе
	 		Возврат ""+МаршрутДоставкиГрафик;
		КонецЕсли;
		
	ИначеЕсли парам = "ДниОбсл" Тогда
		Если Клиент.АдресДоставки.Выбран() = 0 Тогда
			Возврат "";
		Иначе
			Возврат Клиент.АдресДоставки.Маршрут.ДниОбслуживания;
		КонецЕсли;
	ИначеЕсли парам = "МинСуммаЗаказа" Тогда
		Если КлГруппа.Выбран() = 0 Тогда
			Возврат "";
		Иначе
			Возврат КлГруппа.МинСуммаЗаявки;
		КонецЕсли;

	ИначеЕсли парам = "Валюта" Тогда

		
		Возврат Шаблон("[Валюта.Наименование] [Курс#Ч7.4]");
	ИначеЕсли парам = "ЦенаИзКаталога" Тогда
		// получение даты, на которую необходимо получить цену \\
		Если Число(ДатаПоставки) = 0 Тогда
			ДатаЦены = ДатаДок;
		Иначе
			ДатаЦены = ДатаПоставки;
		КонецЕсли;
		// получение даты, на которую необходимо получить цену //
		Возврат Формат(ЦенаТовараПоКатегорииДляТовара(Товар,КатегорияЦены,Валюта,Курс,ДатаЦены), "Ч14.2");
	КонецЕсли;
КонецФункции

Процедура ПриВыбореВидаОплаты()
	ВидОплаты = спВидОплаты.ПолучитьЗначение(спВидОплаты.ТекущаяСтрока());
КонецПроцедуры

Функция УправлениеДиалогом()
	Перем флВидимостьВозврат;
	Перем флБронирования;
	
	
	флВидимостьВозврат=0;
	флБронирования=0;
	
	Форма.кнПечать.Видимость(Проведен());
	Форма.кнПечатьСчет.Видимость();
//	Форма.кнПрямаяПечать.Заголовок(?(ПризнакПечати = 1,"Распечатано","Не распечатано") ); 
//	Форма.КнПровести.Видимость( ВидимостьПроведения );
	Форма.ОК.Видимость( ВидимостьПроведения );
	Форма.тКодРозн.Видимость(?((Склад.ВидСклада=Перечисление.ВидыСкладов.Розничный) ИЛИ (СкладПолучатель.ВидСклада=Перечисление.ВидыСкладов.Розничный),1,0));
	
	Если Проведен()=0 Тогда
//		Форма.кнПрямаяПечать.Видимость(1-Константа.ПечатьЗаявокНаСкладе);
	Иначе
//		Форма.кнПрямаяПечать.Видимость(Проведен());
	КонецЕсли;

	флДост = семЕстьПраво( "Документ", "Счет", "Запрет на изменение цены" );
	Форма.Цена.Доступность(1-флДост);
	Форма.ЦенаСНДС.Доступность(1-флДост);
	Форма.СкидкаНакл.Доступность(1-флДост);
	
	Если ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаНаВозврат Тогда
		флВидимостьВозврат=1;
	Иначе
		флВидимостьВозврат=0;
	КонецЕсли;
	
	Если ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
		флВидимостьВозврат=1;
		флБронирования=1;
		
		процВидЗаявки(флБронирования);
		
	Иначе
		флБронирования=0;
		Форма.Заголовок(старЗаголовок);
		процВидЗаявки(флБронирования);
	КонецЕсли;

	Если ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
	Иначе
		Форма.МинСрокРеализ.Видимость(1-флВидимостьВозврат);
	КонецЕсли;
	Форма.МаксСрокРеализ.Видимость(1-флВидимостьВозврат);
	Форма.ПояснениеСкидки.Видимость(1-флВидимостьВозврат);
	Форма.Резерв.Видимость(1-флВидимостьВозврат+флБронирования);
	
	Если ВидОплаты = 5 Тогда
		флВидимостьСписаний=1;
	Иначе 
		флВидимостьСписаний=0;
	КонецЕсли;                
	
	Форма.тКатСписания.Видимость(флВидимостьСписаний);
	Форма.КатегорияСписания.Видимость(флВидимостьСписаний);
	
КонецФункции

Процедура ПриВыбореТовара()
	Если ПустоеЗначение(Цена) = 1 Тогда 
		УстанЦеныРасх(Контекст)
	КонецЕсли; 
//{{MRG[ --> ]
	
	ЗаполнитьИзменениеЦены();
//}}MRG[ --> ]
	ТовКод=Товар.Код;
КонецПроцедуры	

Процедура ПриВыбореЕдИзм()
	УстанЦеныРасх(Контекст,"Подбор",0);	
	семПроверкаМинОтргКолва( контекст );
	Выч_суммы_накл(Контекст);
КонецПроцедуры


Функция АдресСтрокой( пАдрес, начУр, конУр, пРазд )
	сп = СоздатьОбъект( "СписокЗначений" );
	сп.ДобавитьЗначение( "пАдрес.Родитель.Родитель.Родитель.Код", "1" );
	сп.ДобавитьЗначение( "пАдрес.Родитель.Родитель.Код" , "2" );
	сп.ДобавитьЗначение( "пАдрес.Родитель.Код" , "3" );
	сп.ДобавитьЗначение( "пАдрес.Код" , "4" );
	текУр = пАдрес.Уровень();
	начУр = ?( начУр > текУр, текУр, начУр );
	конУр = ?( конУр > текУр, текУр, конУр );
	стр = "";
	Для н = начУр по конУр Цикл
		стр = стр + "[" + сп.ПолучитьЗначение( н+4-текУр ) + "]" + ?( н = конУр, "", пРазд );
	КонецЦикла;
	Возврат Шаблон( стр );
КонецФункции

Функция семПечатьШтрихКода(OLE)
	Попытка OLE.text = Прав(IDD,12);
	Исключение Сообщить("Не найден OLE объект.","!");
	КонецПопытки;
КонецФункции

Процедура ПолучитьСписокПретензий( стр1, стр2 )
	спр = СоздатьОбъект( "Справочник.Претензии" );
	Если спр.НайтиПоКоду("B",0) = 0 Тогда Возврат; КонецЕсли;
	спр.ПорядокКодов();
	пГруппа = спр.ТекущийЭлемент();
	спр.ИспользоватьРодителя(пГруппа);
	спр.ВыбратьЭлементы(1); сч = 0;
	Пока спр.ПолучитьЭлемент() = 1 Цикл
		Если спр.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;
		Если спр.ДляАгента=0 Тогда Продолжить; КонецЕсли;
		Сч = Сч + 1;
		Если Сч <= 5 Тогда
			стр1 = стр1+спр.НаименованиеРусс+РазделительСтрок;
		Иначе
			стр2 = стр2+спр.НаименованиеРусс+РазделительСтрок;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура семПечать( пПросмотр = 1 )
	
	Если Проведен()=0 Тогда
		Предупреждение("Печать заявки возможно только после проведения!");
		Возврат;
	КонецЕсли;
	Язык="LV";
	Если Пользователь.ОсновнаяФирма.Страна.Код="EE" Тогда
		Язык="EE";
	КонецЕсли;
	Если Константа.ПечатьЗаявокНаСкладе = 1 Тогда
		Если пПросмотр = 0 Тогда
			Сообщить("Прямая печать запрещена. Прямая печать электронных заявок происходит непосредственно на складе!","I");
			Возврат;
		Иначе
			Если семЕстьПраво( "Документ", "Счет", "Печать" ) = 0 Тогда
				Сообщить("Печать электронных заявок происходит непосредственно на складе!","I");
				Возврат;
			КонецЕсли;
			
			Если семЕстьПраво( "Документ", "Счет", "Комплектация после печати" ) = 1 Тогда
				глОтправитьНаКомплектациюЗаявку(ТекущийДокумент());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ПутьСчет = КаталогИБ() + "ExtForms\Печать\ПечатьЭлЗаявки.ert";
	Если ФС.СуществуетФайл(ПутьСчет)=1 Тогда
		спПарам = СоздатьОбъект( "СписокЗначений" );
		спПарам.Установить("Документ",ТекущийДокумент());
		спПарам.Установить("Заблокирован",1);
		ОткрытьФормуМодально( "Обработка", спПарам, ПутьСчет );
		Возврат;
	КонецЕсли;
	Фирма.ИспользоватьДату(ДатаДок);
	
	таб=СоздатьОбъект( "Таблица" );
	Если семТекСтрана() = "LT" Тогда таб.ИсходнаяТаблица( "СчетНовый2LT" );
	Иначе таб.ИсходнаяТаблица( "СчетНовый2" );
	КонецЕсли;
	
	Если ВидДоставки=Перечисление.ВидыДоставки.Самовывоз Тогда
		пВидДоставки="Paєizveєana (klients)";
	ИначеЕсли ВидДоставки=Перечисление.ВидыДоставки.Агент Тогда
		пВидДоставки="Paєizveєana (aЄents)";
	ИначеЕсли ВидДоставки=Перечисление.ВидыДоставки.Доставка Тогда
		пВидДоставки="Х";
	КонецЕсли;
	
	пДатаПоставки = ДатаПоставки;
	пАгент = Агент;
	пНомерДок = НомерДок;
	пНомерПретензии = ДокументОснование.НомерДок;
	пДатаДок = ДатаДок;
	пФирма = Фирма.ПолноеНаименование;
	пСклад = Склад.Наименование;
	пАдрес = Склад.Адрес;
	пКомп = ИмяКомпьютера();
	пАвтор = Автор;
	
	
	Если семТекСтрана() = "LV" Тогда
		промКлиент = ?(КлиентФилиала.Выбран() = 0,Клиент,КлиентФилиала);
	Иначе
		промКлиент = Клиент;
	КонецЕсли;
	

	Если промКлиент.КлГруппа.Выбран()=1 Тогда
		промКлГруппа=промКлиент.КлГруппа;
	Иначе
		промКлГруппа=промКлиент;
	КонецЕсли;       
	
	пКлиентКод = промКлиент.Код;
	пКлиентНаим = промКлиент.ПолноеНаименование;
	Если промКлиент.АдресДоставки.Выбран() = 0 Тогда
		пКлиентАдрес =  СокрЛП( промКлиент.ПочтовыйАдрес ) +", "+СокрЛП( промКлиент.ГородДоставки )+", "+СокрЛП( промКлиент.ПочтовыйИндекс );
		пМаршрут = ?(промКлиент.Маршрут.Выбран() = 1, Шаблон( "[промКлиент.Маршрут.Код] ([промКлиент.Маршрут.ДниОбслуживания])" ), "" ) ;
	Иначе
		Адрес = промКлиент.АдресДоставки;
		пКлиентАдрес = Шаблон( "[Адрес.Наименование] [промКлиент.АдресДоставкиДоп]" ) ;
		//пМаршрут = Шаблон( "[Адрес.Маршрут.Описание] ([Адрес.Маршрут.ДниОбслуживания])" ) ;
		пМаршрут = ?(Адрес.Маршрут.Выбран() = 1,Шаблон( "[Адрес.Маршрут.Описание] ([Адрес.Маршрут.ДниОбслуживания])" ), "" );
		//пМаршрут = Адрес.Маршрут.Описание;
	КонецЕсли;
	пВажность = Клиент.Важность;
	Если ВидОплаты = 1 Тогда
		таб.ВывестиСекцию( "ОплатаНал" );
	КонецЕсли;
	Если ВидЗаявки = Перечисление.ВидыЗаявок.СпецЗаказ Тогда
		таб.ВывестиСекцию( "СпецЗаказ" );
	КонецЕсли;
	пШтрихКод = Прав(IDD,12);
	
	пОснование = Основание;
	
	таб.ВывестиСекцию( "Заголовок" + Язык);
	
	таб.ВывестиСекцию( "Шапка" + Язык);
	табл = СоздатьОбъект( "ТаблицаЗначений" );
	ВыгрузитьТабличнуюЧасть(табл);
	табл.НоваяКолонка("Группа");
	табл.НоваяКолонка("СклАдрес");
	табл.НоваяКолонка("Сорт");
	
	итТаблДокОсн=СоздатьОбъект("ИндексированнаяТаблица");
	Если ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаНаВозврат Тогда
		итТаблДокОсн.Загрузить(ДокументОснование);
		итТаблДокОсн.ДобавитьИндекс("иТовар","*Товар");
	КонецЕсли;

	
	пИтогРезерв = 0;
	пИтогКол 	= 0;
	спр = СоздатьОбъект( "Справочник.СкладскиеАдреса" );
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку() = 1 Цикл
		промТовар = табл.Товар;
		
		Если Склад.ТипСклада=Перечисление.ТипыСкладов.СкладНеликвидов Тогда
			табл.Группа = "NOCENOTIE PRODUKTI";
			табл.СклАдрес  = "";
			табл.Сорт = 0;
		Иначе
		
			Если Склад.ТипСклада=Перечисление.ТипыСкладов.СкладРаспродажи Тогда
				табл.Группа = "IZPARDO№ANA";
				табл.СклАдрес  = "";
				табл.Сорт = 0;
			КонецЕсли;


			рез=спр.ВыбратьЭлементыПоРеквизиту("Товар",промТовар,0,0);
			Ячейка="";
			Если рез=1 Тогда
				Пока Спр.ПолучитьЭлемент() = 1 Цикл
					Ячейка = спр.ТекущийЭлемент();
					Если Ячейка.Родитель.Родитель.Родитель.Склад=Склад Тогда
						Если Склад.ТипСклада=Перечисление.ТипыСкладов.СкладРаспродажи Тогда
							табл.Группа = "IZPARDO№ANA "+АдресСтрокой( Ячейка, 1, 1, "" ) + Шаблон( " ([Ячейка.Родитель.Родитель.Родитель.МестоХранения.УсловияХранения])" );
						Иначе
							табл.Группа = АдресСтрокой( Ячейка, 1, 1, "" ) + Шаблон( " ([Ячейка.Родитель.Родитель.Родитель.МестоХранения.УсловияХранения])" );
						КонецЕсли;
						табл.СклАдрес = АдресСтрокой( Ячейка, 2, 4, "-" );
						табл.Сорт = 0;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
//			Если спр.НайтиПоРеквизиту( "Товар", промТовар, 1 ) = 1 Тогда
				//Ячейка = спр.ТекущийЭлемент();
				//табл.Группа = АдресСтрокой( Ячейка, 1, 1, "" ) + Шаблон( " ([Ячейка.Родитель.Родитель.Родитель.МестоХранения.УсловияХранения])" );
				//табл.СклАдрес = АдресСтрокой( Ячейка, 2, 4, "-" );
				//табл.Сорт = 0;
			Если ПустоеЗначение(Ячейка)=1 Тогда // если ячейка для товара не задана
				Если Склад.ТипСклада=Перечисление.ТипыСкладов.СкладРаспродажи Тогда
				Иначе
					табл.Группа = "ййй";
				КонецЕсли;
				Если промТовар.МестоХранения.Выбран() = 1 Тогда
					табл.СклАдрес = промТовар.МестоХранения.УсловияХранения;
					табл.Сорт = промТовар.МестоХранения.Код;
				Иначе
					табл.СклАдрес = "не указан";
					табл.Сорт = 99;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	табл.Сортировать( "+Группа,+Сорт,+СклАдрес" );
	текГруппа = "";
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку() = 1 Цикл
		Если текГруппа <> табл.Группа Тогда
			пГруппа = ?( табл.Группа = "ййй", "", табл.Группа );
			таб.ВывестиСекцию( "Группа" );
			текГруппа = табл.Группа;
		КонецЕсли;
		пНом = табл.НомерСтроки;
		пАдрес = табл.СклАдрес;
		пШтрихКод = табл.Товар.ШтрихКод;
		пКод = табл.Товар.Код;
		Если семТекСтрана() <> "LV" Тогда 
			пТовар = табл.Товар.ПолучитьАтрибут("Наименование"+семТекСтрана());
		Иначе 
			пТовар = Шаблон("[табл.Товар.Наименование] [табл.Товар.КодПоставщика] ");
		КонецЕсли;
		Если Язык <> "LV" Тогда
			пТовар = табл.Товар.ПолучитьАтрибут("Наименование"+Язык);
		КонецЕсли;
		Если Найти(КатегорияЦены.Наименование,"Розничная") > 0  Тогда
			пТовар = пТовар + Шаблон(" ([табл.Товар.КодДляРозницы])");
		КонецЕсли;
		пЕд = табл.Единица.Наименование;
		пЕдЕд = табл.Единица.Единица;
		пЕдБаз = табл.Товар.БазоваяЕдиницаИзмерения;
		пКол = Окр(табл.Количество*табл.Коэффициент,3,1);
		пКолКл = табл.Количество;
		пИтогКол = пИтогКол + пКол;
		пРезерв = Окр(табл.Резерв*табл.Коэффициент,3,1);
		пРезервКл = табл.Резерв;
		пИтогРезерв = пИтогРезерв + пРезерв;
//		СрокРеал = Окр( табл.Товар.СрокГодн * промКлГруппа.ДопустСрокРеализации / 100, 0, 1 );
		
		Если (Число(табл.МинСрокРеализ) = 0) и ((Число(табл.МаксСрокРеализ) = 0)) Тогда
//			СрокРеал = Окр( табл.Товар.СрокГодн * промКлГруппа.ДопустСрокРеализации / 100, 0, 1 );
			СрокРеал = Окр( табл.Товар.СрокГодн * глПолучитьДопустСрокРеализацииТовараПоКлиенту(промКлГруппа,табл.Товар) / 100, 0, 1 );
			
			пДатаРеал = ?( СрокРеал > 0, ДатаПоставки + СрокРеал, "" );
		Иначе
			пДатаРеал = Шаблон("[табл.МинСрокРеализ]-[табл.МаксСрокРеализ]");
		КонецЕсли;
		
		пУслХранения = табл.Товар.УсловияХранения;
		
		пСрокРеализ = "";
		пСутьПретензии = "";
		
		Если ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаНаВозврат Тогда
			Если итТаблДокОсн.НайтиСтроку("иТовар",табл.Товар,,1)=0 Тогда
				Сообщить("В документе основании "+ДокументОснование + " не найден товар "+пКод+" "+пТовар);
			Иначе
				пСрокРеализ = итТаблДокОсн.СрокРеализ;
				пСутьПретензии = итТаблДокОсн.СутьПретензии;
			КонецЕсли;
		КонецЕсли;
		
		таб.ВывестиСекцию( "Строка" +Язык);
	КонецЦикла;
	ЗагрузитьТабличнуюЧасть( табл );
	
	Если ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаНаВозврат Тогда
	Иначе
		таб.ВывестиСекцию( "Итог" );		
	КонецЕсли;
	
	пПретензии1 = "";
	пПретензии2 = "";
	ПолучитьСписокПретензий(пПретензии1,пПретензии2);

	таб.ВывестиСекцию( "Подвал" +Язык);		
	Если ПустоеЗначение( пОснование ) = 0 Тогда 
		таб.ВывестиСекцию( "Пустая10" ); 
		таб.ВывестиСекцию( "Коммент" ); 
	КонецЕсли;
	таб.ТолькоПросмотр(1);
	таб.Опции(0,0,0,0);  
	Если пПросмотр = 1 Тогда 
		таб.Показать("El. pasЅtijums: "+ НомерДок,"");
	Иначе
		таб.Напечатать(1);
	КонецЕсли;
//	ПризнакПечати = 1;
//	Записать();
КонецПроцедуры

Процедура Печать(Вид)
	Если ВидЗаявки = Перечисление.ВидыЗаявок.ЗаявкаНаВозврат Тогда
		ПутьСчет = КаталогИБ() + "ExtForms\Печать\ПечатьЭлЗаявки.ert";
		спПарам = СоздатьОбъект( "СписокЗначений" );
		спПарам.Установить("Документ",ТекущийДокумент());
		спПарам.Установить("Заблокирован",1);
		ОткрытьФормуМодально( "Обработка", спПарам, ПутьСчет );
		Возврат;
	КонецЕсли;
	//семПечать( Вид ); Возврат;
	Язык="LV";
	Фирма.ИспользоватьДату(ДатаДок);
	Таб=СоздатьОбъект("Таблица");
	Если Вид=1 Тогда
		Таб.исходнаяТаблица("Счет");
	Иначе
		Таб.исходнаяТаблица("Счет2");
	КонецЕсли;
	Таб.ВывестиСекцию("Шапка"+Язык);
	ВыбратьСтроки();
	Ном=0;               
	Количество1=0;
	
	Пока ПолучитьСтроку() = 1 do  
		ДатаПрих="";
		Ном=Ном+1;

		пДоСрокаРеал = Формат( Окр( Товар.СрокГодн * глПолучитьДопустСрокРеализацииТовараПоКлиенту(КлГруппа,Товар) / 100, 0, 1 ), "Ч03.0" );
//		пДоСрокаРеал = Формат( Окр( Товар.СрокГодн * КлГруппа.ДопустСрокРеализации / 100, 0, 1 ), "Ч03.0" );
		
		ПечКодДляРозницы="";
		Если (Склад.ВидСклада=Перечисление.ВидыСкладов.Розничный) ИЛИ (СкладПолучатель.ВидСклада=Перечисление.ВидыСкладов.Розничный)  Тогда
			ПечКодДляРозницы=Товар.КодДляРозницы;
		КонецЕсли;
		
		Таб.ВывестиСекцию("Строка"+Язык);
	КонецЦикла;
	Таб.ВывестиСекцию("Подвал"+Язык);
	Таб.ВывестиСекцию("Подвал1");
	Таб.Опции(0,0,0,0,ПарСтрДокЭлЗаявка);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("PasЅt. uz atgr.: "+НомерДок,"");
КонецПроцедуры
//*********************************
Процедура ВесИнфо()
	Путь = КаталогИБ() + "ExtForms\Печать\ВесИнфо.ert";
	Если ФС.СуществуетФайл(Путь)=0 Тогда
		Возврат;
	Иначе
		ОткрытьФорму("Обработка",ТекущийДокумент(),Путь);
	КонецЕсли;
КонецПроцедуры
//*********************************

Процедура семВзаиморасчеты()
	Если п_АвтоматическаяОбработка=1 Тогда
		Возврат;
	КонецЕсли;
	Предупреждение(ДолгПоКредитуНов(Контекст));
КонецПроцедуры

Процедура Взаиморасчеты()
	Если ВидОплаты=2 Тогда //отв. хранение
		ИнформационнаяСтрока="";
	Иначе
//		ИнформационнаяСтрока=ДолгПоКредиту(Контекст);
		ИнформационнаяСтрока=ДолгПоКредитуНов(Контекст);
//		Сообщить(ИнформационнаяСтрока2);
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗакрытии()
	Если НеЗакрывать=1 Тогда    
		НеЗакрывать=0;
		Записать();
		КлонироватьДокумент(ТекущийДокумент());
		СтатусВозврата(0);
	КонецЕсли;
	
	//Сервис.ПерехватКлавиатуры(0);           
КонецПроцедуры

Процедура семДоступность()
	Если Форма.ТолькоПросмотр()=1 Тогда
		Форма.КнФирма1.Доступность(0);
		Форма.КнСклад.Доступность(0);
		Форма.кнПодбор.Доступность(0);
		Форма.ОК.Доступность(0);
		Форма.КнопкаПоУмолчанию("Закрыть");
	Иначе
		Форма.КнопкаПоУмолчанию("ОК");
	КонецЕсли;  
КонецПроцедуры

Процедура ПриОткрытии()
	ОбработкаВнешнихКоманд();
	Если п_АвтоматическаяОбработка=1 Тогда
		Форма.Закрыть(0);
		Возврат;
	КонецЕсли;
	
	ПриЗаписиПерепроводить(1);
	Форма.ИспользоватьСлой("Основной,Бронирование,Кнопки,Таблица,Общий",2);
	ВидимостьПроведения=1-Проведен();
	Если семЕстьПраво( "Документ", "Счет", "Отмена проведения" ) =1 Тогда
		ВидимостьПроведения=1;
	ИначеЕсли Проведен()=1 Тогда
		Форма.ТолькоПросмотр( Проведен() );	
	КонецЕсли;		
	
//{{MRG[ --> ]
	Форма.тИзмЦеныДата.Видимость(1);
		
//}}MRG[ --> ]
	Если (ДатаДок<=Константа.ДатаЗапретаРедактированияЗаказов) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;                 
	Если (ЦЧ=1) и (НазваниеНабораПрав()<>"Администратор") Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	Если (глФирма<>Фирма) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;     
	
     семДоступность();
	Если Фирма<>Константа.ОсновнаяФирма Тогда
		Форма.Клиент.Видимость(0);
		Форма.КлиентФилиала.Видимость(1);
	Иначе
		Форма.Клиент.Видимость(1);
		Форма.КлиентФилиала.Видимость(0);
	КонецЕсли;
	
	Если глКодСтраныПользователя="LV" Тогда
		Форма.лНаименованиеТовара.Видимость(0);
		Форма.Товар.Видимость(1);
	Иначе 
		Форма.лНаименованиеТовара.Видимость(1);
		Форма.Товар.Видимость(0);  
	КонецЕсли;
	
	Форма.ЦЧ.Видимость(Пользователь.РазрСпецПродажу);
	Взаиморасчеты();               
	спВидОплаты.ТекущаяСтрока(спВидОплаты.НайтиЗначение(ВидОплаты));
	семЗаголовокОкна(контекст);
	старЗаголовок=Форма.Заголовок();
	
	//оПолеВвода_Контрагент = СоздатьОбъект("Общие.ПолеВыбораЗначения");
	//	оПолеВвода_Контрагент.ПоискПоВхождению = фПоПодстроке;
	//оПолеВвода_Контрагент.Инит(Контекст, "Клиент", "текстПрефиксКонтрагента", 500);
	
	ЕстьПраваИзменятьНомер=семЕстьПраво("Документ","Счет","Изменение номера");
	Форма.НомерДок.Доступность(?((НазваниеНабораПрав()="Администратор") ИЛИ (ЕстьПраваИзменятьНомер=1),1,0));
	
	Транслит(Расш,Форма);
//	ЗаполнитьРезерв();
	
//{бронирование	изменение колонки резерв для просмотра
	Если ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
			Рез=Регистр.РезервыТоваров.СводныйОстаток(Товар,ТекущийДокумент(),"РезервТовара");
			Если Рез>0 Тогда
				Резерв=Рез/Коэффициент;
			Иначе
				Резерв=0;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
//}бронирование	
	перек_Заявки=3;
КонецПроцедуры         

//======================================================================
Процедура ПослеОткрытия()
	Если (Выбран()=0) 
//			И (Найти(НазваниеИнтерфейса(),"Продаж")>0) 
			И (РабочаяДата()<='31.07.2018') Тогда
		ЛегкоеСообщение("               Внимание.
		|	*Счет общий* может делать одновременно *Заказы* и *СпецЗаказы*.
		|Добавлен режим *Авто*, при выборе его, для товаров с буквами *S* делается спецзаказ отедельно.
		|Вручную поправит можно в конце таблице.");
	КонецЕсли;
КонецПроцедуры // ПослеОткрытия


Функция НазваниеТовара(Тов)
	Если глКодСтраныПользователя="LV" Тогда
		Возврат "";
	Иначе 
		Возврат Тов.ПолучитьАтрибут("Наименование"+глКодСтраныПользователя);
	КонецЕсли;
КонецФункции

//Процедура кнПрямаяПечатьПриНажатии()
//	Если ПризнакПечати = 1 Тогда
//		Если Вопрос("Вывести на печать повторно?","Да+Нет") = "Да" Тогда
//			семПечать( 0 );
//		КонецЕсли;
//	Иначе
//		семПечать( 0 );
//	КонецЕсли;
//КонецПроцедуры

Функция ИнфОпродаже()
	Если Клиент.Выбран()=1 Тогда
		КлиентГр_ = ?(Клиент.КлГруппа.Выбран()=1,Клиент.КлГруппа,Клиент);
		КлиентГр_.ИспользоватьДату(ДатаДок);
		Если КлиентГр_.ЗапретВыпискиНакл=1 Тогда
			Возврат("Запрет на продажу!!!");
		Иначе
			Возврат("");
		КонецЕсли;
	Иначе
		Возврат("");
	КонецЕсли;
КонецФункции                 

Функция ИнфОдоговоре()
	Если Клиент.Выбран()=1 Тогда
		Если СтрДлина(СокрЛП(Клиент.Договор))=0 Тогда
			Возврат("Договора нет!!!");
		Иначе
			Возврат(Клиент.Договор);
		КонецЕсли;
	Иначе
		Возврат("");
	КонецЕсли;
КонецФункции

Функция КонтрольОстаткаВсего()  
	// Вычислим, сколько всего данного товара
	ПолныйОстаток= Регистр.ОстаткиТоваров.СводныйОстаток(Товар,Склад,,"ОстатокТовара");
	Резерв_= 0;
	// проверяем резерв товара
	Если семРазрешитьПродаватьРезерв( контекст )=Перечисление.Булево.Нет Тогда
		// Вычислим, сколько зарезервировано всего данного товара
		Резерв_= Регистр.РезервыТоваров.СводныйОстаток(Товар,,"РезервТовара");
	КонецЕсли;
	Если Коэффициент>0 Тогда
		Возврат (ПолныйОстаток-Резерв_)/Коэффициент;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Процедура Подбор()
	Режим="Каталог";
	ОткрытьПодбор("Номенклатура","ДляПодбора");
	УстановитьЗначениеВПодборе("Склад",Константа.ОсновнойСклад);
КонецПроцедуры    


Функция СвободныйОстатокТовараНаСкладе(пТовар,пСкладТаб)

	
	//{бронирование в пути
	Если (ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь) И (фБроньвпути=1) Тогда
	//	Возврат СвободноЗаказаныхТоваровНаСкладе(пТовар);
		Возврат СвободноОжидаемыхТоваровНаСкладе(пТовар);
		
	КонецЕсли;	
	//}бронирование в пути

	рез = 0;	

	Если пСкладТаб.Выбран()=1 Тогда

		глЗапросПоРезервам.УстПараметр(1,пТовар);

		глЗапросПоРезервам.УстПараметр(2,пСкладТаб);

		Рез=глЗапросПоРезервам.ВыполнитьСкалярный();
		

		Ост= Регистр.ОстаткиТоваров.СводныйОстаток(пТовар,пСкладТаб,,"ОстатокТовара")

	Иначе
		Рез=Регистр.РезервыТоваров.СводныйОстаток(пТовар,,"РезервТовара");
		Ост=Регистр.ОстаткиТоваров.СводныйОстаток(пТовар,,,"ОстатокТовара")
	КонецЕсли;
	
//	Если Склад.Выбран()=1 Тогда
//		Возврат Макс(Регистр.ОстаткиТоваров.СводныйОстаток(пТовар,Склад,,"ОстатокТовара")-Рез,0);
//	Иначе
		Возврат Ост-Рез;
//	КонецЕсли;
КонецФункции

//бронь в пути

//Функция СвободноЗаказаныхТоваровНаСкладе(пТовар)
//	Если ПустоеЗначение(ДокументПривязки)=0 Тогда
//		рез=Регистр.ЗаказыПоставщикамЗаявки.СводныйОстаток(пТовар,ДокументПривязки,,"Количество");
//		Возврат Регистр.ЗаказыПоставщикам.СводныйОстаток(пТовар,,,,ДокументПривязки,"Количество")-рез;
//	Иначе
//		рез=Регистр.ЗаказыПоставщикамЗаявки.СводныйОстаток(пТовар,,,"Количество");
//		Возврат Регистр.ЗаказыПоставщикам.СводныйОстаток(пТовар,,,,,"Количество")-рез;
//	КонецЕсли;
//	
//	//добавить проверку на заказаного по заявке
//КонецФункции

Функция СвободноОжидаемыхТоваровНаСкладе(пТовар) //переставить
	Если ПустоеЗначение(ДокументПривязки)=0 Тогда
		рез=Регистр.ЗаказыПоставщикамЗаявки.СводныйОстаток(пТовар,ДокументПривязки,,"Количество");
		Возврат Регистр.ТоварыВПути.СводныйОстаток(пТовар,,,ДокументПривязки,"Количество")-рез;
	Иначе
		рез=Регистр.ЗаказыПоставщикамЗаявки.СводныйОстаток(пТовар,,,"Количество");
		Возврат Регистр.ТоварыВПути.СводныйОстаток(пТовар,,,,"Количество")-рез;
	КонецЕсли;
	
	//добавить проверку на заказаного по заявке
КонецФункции

//бронь в пути

Функция семПолучитьСтавкуНДСТовара( пТовар )
	Если глКодСтраныПользователя = "LT" Тогда Возврат пТовар.СтавкаНДСLT;
	ИначеЕсли глКодСтраныПользователя = "EE" Тогда Возврат пТовар.СтавкаНДСEE;
	КонецЕсли;
	Возврат пТовар.СтавкаНДС;
КонецФункции

Функция семПроверкаСтавкиНДС( пТовар )
	СтавкаНДСТовара = семПолучитьСтавкуНДСТовара( пТовар );
	Если КоличествоСтрок() = 0 Тогда
		Если (Склад.СкладОтвХранения=1) ИЛИ ((Клиент.Страна<>Константа.СтранаРезидент) И (Фирма=Константа.ОсновнаяФирма)) ИЛИ (Клиент.флПароход = 1) Тогда
			СтавкаНДС = Перечисление.ЗначенияНДС.НДС0;
		Иначе
			СтавкаНДС = СтавкаНДСТовара;
		КонецЕсли;
		
	Иначе
		Если (СтавкаНДС <> СтавкаНДСТовара) И (СтавкаНДС <> Перечисление.ЗначенияНДС.НДС0) Тогда
			Сообщить( "Ошибка подбора товара.","!" );
			Сообщить( Шаблон("Товар со ставкой [СтавкаНДСТовара] не может использоватся в данном документе."),"I" );
			Сообщить( Шаблон("В документе уже есть товары со ставкой [СтавкаНДС]."),"I" );
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	Возврат 1;
КонецФункции

Процедура УстМинСрокиРеализации()
	
	Если Склад.ТипСклада = Перечисление.ТипыСкладов.СкладРаспродажи Тогда
		//ничего не делаем
		Возврат;
	КонецЕсли;
	//определим мин. доп. срок реализации для отгрузки клиенту
	КлСроки=?(ПустоеЗначение(КлиентФилиала)=0,КлиентФилиала,Клиент);
	КлСроки.ИспользоватьДату(ДатаДок);
	// Запишем главного клиента
	Если КлСроки.КлГруппа.Выбран()=1 Тогда
		КлСроки=КлСроки.КлГруппа;
	КонецЕсли;       

	ДопСрокРеалКл=глПолучитьДопустСрокРеализацииТовараПоКлиенту(КлСроки,Товар);
//	ДопСрокРеалКл=КлСроки.ДопустСрокРеализации;
	Если (ДопСрокРеалКл<>0) и (ПустоеЗначение(ДатаПоставки)=0) Тогда
		//если % допустимого срока задан - тогда рассчитаем мин. срок 
		СрокРеал = Окр( Товар.СрокГодн * ДопСрокРеалКл / 100, 0, 1 );
		МинСрокРеализ = ?( СрокРеал > 0, ДатаПоставки + СрокРеал, "" );
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетСреднегоЗаМес(колМес) 
	
	// Процедура для отображение среднего значения количества продукции в таблице Электроная Заявка.
		///////////////////////////////////////////////
		Запрос=СоздатьОбъект("ODBCRecordSet");

	//PR 07.12.16 отключил за ненадобностью
	СреднееЗаМес = 0;
	Возврат;
		
	ТекстЗапроса="
		|SELECT Avg($СчетСтроки.Количество*$СчетСтроки.Коэффициент) СреднееСчетСтрокиКоличество
		|FROM $Документ.Счет AS Счет With (NOLOCK)
		|INNER JOIN $ДокументСтроки.Счет AS СчетСтроки With (NOLOCK) ON Счет.IDDOC = СчетСтроки.IDDOC
		|WHERE ($Счет.Клиент = :ВыбКлиент)
		|AND ($Счет.ДатаПоставки >= :Нач2Месяца)
		|AND ($СчетСтроки.Товар = :ВыбТовар)"
	;

	Запрос.УстановитьТекстовыйПараметр("ВыбКлиент",Клиент);
	//здесь устанавливаем дату расчета среднего значения, по умолчанию ставим 2
	Запрос.УстановитьТекстовыйПараметр("Нач2Месяца",ДобавитьМесяц(ДатаДок,-КолМес));//ДобавитьМесяц(ДатаПоставки,-5));
	Запрос.УстановитьТекстовыйПараметр("ВыбТовар",Товар);
   
	СреднееЗаМес = Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	Если СреднееЗаМес=0 Тогда
		Сообщить("Клиент не брал продукцию с "+ ДобавитьМесяц(ДатаДок,-КолМес));
	КонецЕсли;
	
	
	////////////////////////////////////
	
КонецПроцедуры

Процедура ОбработкаПодбора(Выб)
	Если (семПроверкаСтавкиНДС( Выб ) = 0) Тогда Возврат; КонецЕсли; 

//бронирование

	Если ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
		Если фБроньвпути=1 Тогда
			
//			пОстаток=СвободноЗаказаныхТоваровНаСкладе(Выб);
			пОстаток=СвободноОжидаемыхТоваровНаСкладе(Выб);//заменен

			Сообщить("Остаток для заказа: "+пОстаток);
			Если пОстаток=0 Тогда
				Сообщить("Бронирование запрещено. Нет доступного кол-ва в ожидаемых поставках от поставщика !");
				Возврат;
			КонецЕсли;
		Иначе

		пОстаток=СвободныйОстатокТовараНаСкладе(Выб,СкладТаб);

			Если пОстаток=0 Тогда
				Сообщить("Бронирование запрещено. Товара нет на складе! Попробуйте использовать режим Бронь в пути");
				Возврат;
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка Тогда
		
		//пОстаток=СвободныйОстатокТовараНаСкладе(Выб);
		//Если пОстаток=0 Тогда
		//	Если Вопрос("Нет доступного товара на складе. Возможно неверно выбран склада. Продолжить?","Да+Нет")="Да" Тогда
		//	Иначе
		//		Возврат;
		//	КонецЕсли;
		//КонецЕсли;

	КонецЕсли;	
	
	ЗапросКоличестваВПодборе(Контекст,Режим,Выб);
	
	УстанЦеныРасх(Контекст,"Подбор");

	ЗаполнитьИзменениеЦены();

	семПроверкаМинОтргКолва( контекст );
//{бронирование
	Если (ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь) Тогда
	
		Если фБроньвпути=1 Тогда
			Если ПустоеЗначение(ДокументПривязки)=1 Тогда
				ВыбратьДокументПривязки(Выб);
				Если (ПустоеЗначение(ДокументПривязки)=0) И (ПустоеЗначение(ДатаПоставки)=1) Тогда
					
					Если (ДокументПривязки.ДатаПрихода+1)< ТекущаяДата() Тогда
						Сообщить(" Дата прихода Товара на склад меньше текущей даты !");
						ДатаПоставки="";
						УдалитьСтроку();
						Возврат;
					Иначе
						ДатаПоставки=ДокументПривязки.ДатаПрихода+1;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			
			Если Количество*Коэффициент>пОстаток  Тогда
				Количество=пОстаток/Коэффициент;
				Сообщить(" Товара не хватает в заказе поставщика. Количество не может превышать заказаного товара !");
			КонецЕсли;
		Иначе
			Если Количество*Коэффициент>пОстаток  Тогда
				Количество=пОстаток/Коэффициент;
				Сообщить(" Товара не хватает на складе. Количество не может превышать остаток !");
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Если ДокументОснование.Вид()="Счет" Тогда
		Если ДокументОснование.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
			пРезервКоличество=(Количество*Коэффициент)+(Резерв*Коэффициент);
			Если пРезервКоличество>пОстаток  Тогда
				Количество=(пОстаток+Резерв)/Коэффициент;
				Сообщить(" Товара не хватает на складе. Количество не может превышать остаток+резерв (Забронированого Товара) !");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
//}бронирование	
	Выч_суммы_накл(Контекст);
	
	РасчетСреднегоЗаМес(2);// Процедура расчета среднего за ..(N) мес
	УстМинСрокиРеализации();
	ЗаполнитьДанныеОТовареАвто(Товар);	
	АктивизироватьСтроку();       
КонецПроцедуры

Процедура ПечатьСтар()      
	Клиент.ИспользоватьДату(ДатаДок);
	Фирма.ИспользоватьДату(ДатаДок);
	Таб=СоздатьОбъект("Таблица");
	СтрПлат="";
	СтрБанкПлат="";
	ДобСтроку(СтрПлат," ИНН ",Фирма.ИНН);
	ДобСтроку(СтрПлат,", р/с ",РасчетныйСчет.Номер);
	ДобСтроку(СтрПлат," ",РасчетныйСчет.Банк);
	ДобСтроку(СтрПлат," в ",РасчетныйСчет.ГородБанка);
	ДобСтроку(СтрПлат,", БИК ",РасчетныйСчет.БИКБанка);
	ДобСтроку(СтрПлат,", корр.сч. ",РасчетныйСчет.КоррСчетБанка);
	Если РасчетныйСчет.ПрямыеРасчеты=0 Тогда
		ДобСтроку(СтрПлат," в ",РасчетныйСчет.БанкРасчетный);
		ДобСтроку(СтрПлат," в ",РасчетныйСчет.ГородБанкаРасчетного);
		ДобСтроку(СтрПлат,", БИК ",РасчетныйСчет.БИКБанкаРасчетного);
		ДобСтроку(СтрПлат,", корр.сч. ",РасчетныйСчет.КоррСчетБанкаРасчетного);
	КонецЕсли;
	Таб.ВывестиСекцию("Счет<");
	ВыбратьСтроки();
	Ном=0;
	ВСоставе=0;
	Пока ПолучитьСтроку() = 1 Цикл 
		Ном=Ном+1;
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;
	Таб.ВывестиСекцию("Счет>");
	Таб.Опции(0,0,0,0,ПарСтрДок);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Печать счета","");
КонецПроцедуры

Функция семУстановкаКатегорииЦены()
	Если семТекСтрана() = "LV" Тогда 
		Если глКодСтраныПользователя = "LT" Тогда Возврат семПолучитьКатегориюЦеныПоНаим( "Литва Оптовая" );
		ИначеЕсли глКодСтраныПользователя = "EE" Тогда Возврат семПолучитьКатегориюЦеныПоНаим( "Эстония Оптовая" );
		КонецЕсли;
	КонецЕсли;
	Если ПустоеЗначение(Пользователь.ОснКатегорияЦены)=0 Тогда
		Возврат Пользователь.ОснКатегорияЦены;
	Иначе
		Возврат Константа.ОсновнаяКатегорияЦены; 
	КонецЕсли;
КонецФункции

Процедура семУстановитьВалюту( флКопирования )
	Если флКопирования = 0 Тогда
		Валюта = Константа.ОсновнаяВалютаПродажи;
	КонецЕсли;
	Дата_Курса = ДатаДок;
	Курс = КурсДляВалюты( Валюта, Дата_Курса );
	Валюта_Прежн = Валюта;
	Курс_Прежн = Курс;
КонецПроцедуры

Процедура ВводНового( флКопирования )
	ЗаполнитьШапку(Контекст); //заполняем обязательные реквизиты в любом случае
	                    
	ИмяКомпьютера = ИмяКомпьютера();
	ПозНомера=Найти(НомерДок,"-");
	НомерДокНомер=СокрЛП(Сред(НомерДок,ПозНомера+1));
	Если ПозНомера>0 Тогда
		НомерДок=Лев(НомерДок,ПозНомера)+Прав(НомерДокНомер,7);
	КонецЕсли;
	
	семУстановитьВалюту( флКопирования );
	Если флКопирования = 1 Тогда
		Выполнен = Нет; 
		ПризнакПечати = 0;   
		ДатаПоставки = "";
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
			ДокТаб = "";
			СкладТаб = "";
			Резерв=0;
//{{MRG[ --> ]
			
			ЗаполнитьИзменениеЦены();
//}}MRG[ --> ]
		КонецЦикла;           
		ВидДоставки = Перечисление.ВидыДоставки.Доставка;
		АдресДоставки = "";
		АдресДоставкиДоп="";
		ВыборКлиента();

		АвтоВремяТекущее();          
		Самовывоз=0;
		ЦЧ=0;

		ЗаполнитьПустыеСтрокиСклада();
	
		Возврат;	    
	КонецЕсли;
	ДатаДок=РабочаяДата();
	// Для базовой валюты курс всегда равен 1, поэтому отображаем курс Основной валюты
	Клиент=Константа.ОсновнойПокупатель;
	//Подставляем клиента из спр. Фирмы по умолчанию
	Если Фирма<>Константа.ОсновнаяФирма Тогда
		Клиент=Фирма.Клиент;
	КонецЕсли;
	
	ВидДоставки = Перечисление.ВидыДоставки.Доставка;
	Склад = Константа.ОсновнойСклад;
	КатегорияЦены = семУстановкаКатегорииЦены();
	СтавкаНДС     = Константа.ОсновнаяСтавкаНДС;               
	СрокРезервирования=Константа.ОсновнойСрокРезервирования;
	ВидЗаявки = Перечисление.ВидыЗаявок.СводнаяЗаявка;
	Если Пользователь.CashCarry=1 Тогда
		ВидДоставки=Перечисление.ВидыДоставки.Самовывоз;
		ВидОплаты=1;
	КонецЕсли;
	
	Форма.кнПечать.Видимость(0);
	Форма.кнПечатьСчет.Видимость(0); 
//	Форма.кнПрямаяПечать.Видимость(0);
	Форма.кнПодчиненные.Видимость(0);
	АвтоВремяТекущее(); 
	семУстановкаКурса();
	//Если (Лев(НомерДок,4)="E1LV") Тогда
	//	Если ДатаДок >= '24.08.2011' Тогда 
	//		УстановитьНовыйНомер("E1LV-1");
	//	КонецЕсли;	
	//КонецЕсли;	

	
КонецПроцедуры

Процедура ВводНаОсновании(ДокОснование)
	
	ЕстьВидЗаявки = глЕстьРеквизитШапки("ВидЗаявки",ДокОснование.Вид());
	ЭтоБронь = 0;
	Если ЕстьВидЗаявки=1 Тогда
		Если ДокОснование.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
			ЭтоБронь = 1;
		КонецЕсли;
	КонецЕсли;
	
	
	
	Если	((ДокОснование.Вид()="Счет") И (ЭтоБронь =0)) ИЛИ
	(ДокОснование.Вид()="РасходнаяНакладная") ИЛИ
	(ДокОснование.Вид()="ПриходнаяНакладная") ИЛИ
	(ДокОснование.Вид()="РасходнаяРеализатора") ИЛИ
	(ДокОснование.Вид()="ПриходнаяРеализатора") Тогда
		ЗаполнитьШапкуНаОсн(Контекст,ДокОснование);
//		УстДефолтРасчСчета(Контекст);

		
		семУстановитьВалюту(0);
		ДатаДок=РабочаяДата();
		Клиент=Константа.ОсновнойПокупатель;
		Клиент.ИспользоватьДату(ДатаДок);
		СрокРезервирования=Константа.ОсновнойСрокРезервирования;
		ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка;
		Склад = Константа.ОсновнойСклад;
		КатегорияЦены = семУстановкаКатегорииЦены();
		СтавкаНДС     = Константа.ОсновнаяСтавкаНДС;               
		СрокРезервирования=Константа.ОсновнойСрокРезервирования;
		ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка;   
	
		УстановитьНовыйНомер("E6LV-BB");

		
		спВидОплаты.ТекущаяСтрока(спВидОплаты.НайтиЗначение(ВидОплаты));

		ДокОснование.ВыбратьСтроки();
		Пока ДокОснование.ПолучитьСтроку()=1 Цикл
			НоваяСтрока();
			ТовКод=ДокОснование.Товар.Код;
			Товар=ДокОснование.Товар;
			Цена=ДокОснование.Цена; 
			
			Единица=ДокОснование.Единица;
			Коэффициент=ДокОснование.Коэффициент;
			Количество=ДокОснование.Количество;
			Сумма=Цена*Количество*Коэффициент; 
			НДС=ДокОснование.НДС;
			ЗаполнитьДанныеОТовареАвто(Товар);
		КонецЦикла;
		АвтоВремяТекущее();
		семУстановкаКурса();
		
	ИначеЕсли (ДокОснование.Вид()="ПретензияПолученная") Тогда

		Если ДокОснование.Проведен()=0 Тогда
			Предупреждение("Нельзя вводить заявку на возврат на основании не проведенного документа!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
		
		ДокументОснование = ДокОснование;
		
		ЗаполнитьШапкуНаОсн(Контекст,ДокОснование);
		Основание = "";
		Клиент=ДокОснование.Клиент;
		Если Фирма<>Константа.ОсновнаяФирма Тогда
			КлиентФилиала=ДокОснование.КлиентФилиала;
			ВыборКлиентаФилиала();
		Иначе
			ВыборКлиента();
			КатегорияЦены = семУстановкаКатегорииЦены();
		КонецЕсли;
		СрокРезервирования=Константа.ОсновнойСрокРезервирования;
		ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка;
		
		поз=Найти(ДокОснование.НомерДок,"-");
		ПрефиксНомера=ФК+"PA-";//+Сред(ДокОснование.НомерДок,поз+1);
		УстановитьНовыйНомер(ПрефиксНомера);
		Склад = ДокОснование.Склад;
		Если ПустоеЗначение(Склад)=1 Тогда
			Склад = Константа.ОсновнойСклад;
		КонецЕсли;
		
//		СтавкаНДС = семПолучитьСтавкуНДС(Клиент,Контекст);
		спВидОплаты.ТекущаяСтрока(спВидОплаты.НайтиЗначение(ВидОплаты));
		
		ДокОснование.ВыбратьСтроки();
		Пока ДокОснование.ПолучитьСтроку()=1 Цикл
			НоваяСтрока();
			ТовКод=ДокОснование.Товар.Код;
			Товар=ДокОснование.Товар;
			Количество=ДокОснование.Количество;
			УстанЦеныРасх(Контекст,"Подбор");
			Цена = Пересчет(ДокОснование.Цена,Рубли,1,Валюта,ДатаДок);
			Сумма = Пересчет(ДокОснование.Сумма,Рубли,1,Валюта,ДатаДок);
			семПроверкаМинОтргКолва( контекст );
			Выч_суммы_накл(Контекст);
			УстМинСрокиРеализации();
			МинСрокРеализ = ДокОснование.СрокРеализ;
			ЗаполнитьДанныеОТовареАвто(Товар);
			АктивизироватьСтроку();       
		КонецЦикла;
		АвтоВремяТекущее();
		семУстановкаКурса();
	
		
	ИначеЕсли	(ДокОснование.Вид()="Счет") И (ДокОснование.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь) Тогда
//{бронирование ввод, на основании заполнения шапки документа	

		СостояниеЗаявки=глПолучитьСостояниеЗаявки(ДокОснование);
		
		Если СостояниеЗаявки="Пустая бронь" Тогда
			Предупреждение("Пустая бронь !","10");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
			
		Если НЕ (СостояниеЗаявки="Забронирован") Тогда
			Предупреждение("Заявка находится в состоянии <"+ СостояниеЗаявки+">!","10");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
			
		УстановитьНовыйНомер("E6LV-BB");		
		ЗаполнитьШапкуНаОсн(Контекст,ДокОснование);
		семУстановитьВалюту(0);
		ДатаДок=РабочаяДата();
		Клиент=Константа.ОсновнойПокупатель;
		Клиент.ИспользоватьДату(ДатаДок);
		СрокРезервирования=Константа.ОсновнойСрокРезервирования;
		ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка;
		КатегорияЦены = семУстановкаКатегорииЦены();
		СтавкаНДС     = Константа.ОсновнаяСтавкаНДС;               
		СрокРезервирования=Константа.ОсновнойСрокРезервирования;
		ВидЗаявки = Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка;   
		ДокументОснование = ДокОснование;
		старЗаголовок=Форма.Заголовок();
		Форма.Заголовок(старЗаголовок+"На Основании Бронирования.");
		Основание = "";
		
		Клиент=ДокОснование.Клиент;
		Если Клиент.ДляВыгрузки=1 Тогда
			флагГлКлиент=1;
		Иначе 
			флагГлКлиент=0;
		КонецЕсли;
		
		Если Фирма<>Константа.ОсновнаяФирма Тогда
			КлиентФилиала=ДокОснование.КлиентФилиала;
			ВыборКлиентаФилиала();
		Иначе
			ВыборКлиента();
			КатегорияЦены = семУстановкаКатегорииЦены();
		КонецЕсли;
		
		
		
		Склад = ДокОснование.Склад;
		Если ПустоеЗначение(Склад)=1 Тогда
			Склад = Константа.ОсновнойСклад;
		КонецЕсли;
		
		СкладПолучатель=ДокОснование.СкладПолучатель;
		ВидДоставки=ДокОснование.ВидДоставки;
		ДатаПоставки="";
		ПриВыбореДатыПоставки();
			
		старЗаголовокРезерв=Форма.Резерв.Заголовок();
		Форма.Резерв.Заголовок("Бронь. Ост.");
		Форма.ВидЗаявки.Доступность(0);

		спВидОплаты.ТекущаяСтрока(спВидОплаты.НайтиЗначение(ВидОплаты));

//////////////////////////////////////////////////////////////////////////////

		ДокОснование.ВыбратьСтроки();
		Пока ДокОснование.ПолучитьСтроку()=1 Цикл

			Рез=Регистр.РезервыТоваров.СводныйОстаток(ДокОснование.Товар,ДокОснование,"РезервТовара");
			Если Рез>0 Тогда
				НоваяСтрока();
				ТовКод=ДокОснование.Товар.Код;
				Товар=ДокОснование.Товар;
				Цена=ДокОснование.Цена; 
				Единица=ДокОснование.Единица;
				Коэффициент=ДокОснование.Коэффициент;
					
				Резерв=Рез/Коэффициент;
				Количество=Резерв;
				Сумма=Цена*Количество*Коэффициент;		
				НДС=ДокОснование.НДС;
				ЗаполнитьДанныеОТовареАвто(Товар);
			Иначе
				Сообщить("Количество Забронированого товара: "+ДокОснование.Товар+" -исчерпано !");
			КонецЕсли;
		КонецЦикла;
		АвтоВремяТекущее();
		семУстановкаКурса();	
	
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			УстанЦеныРасх(Контекст,"Подбор",0);
			семПроверкаМинОтргКолва( контекст );
			УстМинСрокиРеализации();
			Выч_суммы_накл(Контекст);
		КонецЦикла;		
//}бронирование			
	Иначе
		Предупреждение("Счет нельзя вводить на основании выбранного вида документа!",10);
		СтатусВозврата(0);
	КонецЕсли; 
КонецПроцедуры

Процедура ОбработкаВыбораЗначения(ВыбЗнач,ИдЭлДиал,ФлСтОбр)
	Если ИдЭлДиал = "Клиент" Тогда
		стар_Клиент = Клиент;  
		//*****<<PR>>(begin)
		Если  (Пользователь.РазрРасхНаклНерезидентам=0) И (ВыбЗнач.Страна<>Константа.СтранаРезидент) Тогда
			Предупреждение("Выбран неправильный клиент!",10);
			СтатусВозврата(0);
		КонецЕсли;
		//*****<<PR>>(end)
	ИначеЕсли ИдЭлДиал = "ВидЗаявки" Тогда
		Если (ВыбЗнач=Перечисление.ВидыЗаявок.ЗаявкаНаВозврат) И (ДокументОснование.Вид()="ПретензияПолученная") Тогда
			Предупреждение("Заявку на возврат можно оформить только на основании претензии!",10);
			СтатусВозврата(0);
			ФлСтОбр=0;
		КонецЕсли;
	КонецЕсли;         
КонецПроцедуры 

Процедура ВыборКлиента()
	Если Клиент.Выбран() = 1 Тогда
		Агент = Клиент.Агент;  
		Если (ПустоеЗначение(Агент)=1) Тогда
			Агент=Пользователь.Сотрудник;
		КонецЕсли;

		Если Найти(Клиент.ПоАлфавиту,"DAZADI PIRC")>0 Тогда
			ОткрытьФормуМодально("Обработка.ВводАдресаДоставки",Контекст);
			//здесь нужно вставить выбор адреса и улицы
		Иначе
			АдресДоставки = Клиент.АдресДоставки;
			АдресДоставкиДоп = Клиент.АдресДоставкиДоп;
		КонецЕсли;		
		ВыбратьГрафикМаршрутаДляКлиента();
	КонецЕсли;
	
	Если (ПустоеЗначение(стар_Клиент)=0) и (клиент<>стар_Клиент) Тогда
		
		//бронирование
		Если ДокументОснование.Вид()="Счет" Тогда
			Если ДокументОснование.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
				
				Если флагГлКлиент=1 Тогда
					Если НЕ (СокрЛП(стар_Клиент.Рег_номер) = СокрЛП(Клиент.Рег_номер)) Тогда
						Клиент=стар_Клиент;
						Сообщить("Выбран клиент не пренадлежащий группе клиентов бронирования.");
					КонецЕсли;					
				КонецЕсли;
				
				Если флагГлКлиент=0 Тогда
					Клиент=стар_Клиент;
					Сообщить("Выбран клиент не пренадлежащий к клиенту бронирования.");
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;	
		//бронирование	

		Если глПроверкаАгентаПоКлиенту(Контекст)=0 Тогда
			Клиент=стар_Клиент;
		КонецЕсли;             
		стар_Клиент="";
	КонецЕсли;
	КлГруппа=?(Клиент.КлГруппа.Выбран()=1,Клиент.КлГруппа,Клиент);
	
	Если (СокрЛП(Клиент.Рег_номер) = СокрЛП(Фирма.Рег_номер)) Тогда
		Если ПустоеЗначение(РозничныйТорговыйСклад)=0 Тогда
			СкладПолучатель = РозничныйТорговыйСклад;
		КонецЕсли;
	КонецЕсли;
	
	
	КатегорияЦены=?(Клиент.КатегорияЦены.Выбран()=1,Клиент.КатегорияЦены,КатегорияЦены);
	СтавкаНДС = семПолучитьСтавкуНДС(Клиент,Контекст);
	Если КатегорияЦены.Наименование = "Экспортная" Тогда
		промВалюта = семПолучитьВалютуПоНаим( "EUR" );
		Если ПустоеЗначение( промВалюта ) = 0 Тогда
			Валюта = промВалюта;
			Устан_Вал( Контекст, Дата_курса, Валюта_Прежн, Курс_Прежн );		
			семУстановкаКурса();
		КонецЕсли;
	КонецЕсли;
	Взаиморасчеты();
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		УстанЦеныРасх(Контекст);
		УстМинСрокиРеализации();
	КонецЦикла;  
	Если ПустоеЗначение(Клиент) = 0 Тогда
		Валюта = Клиент.ВалютаВзаиморасчетов; 
		Устан_Вал(Контекст,Дата_курса,Валюта_Прежн,Курс_Прежн);
		семУстановкаКурса();
	КонецЕсли;   
	Если Клиент.флЛояльность = 1 Тогда
		Предупреждение( "Potencialais Pastavigo Klientu Programmas dalibnieks.", 10 );
	КонецЕсли;
КонецПроцедуры //ВыборКлиента()`

Процедура ВыборКлиентаФилиала()
	Валюта=КлиентФилиала.ВалютаКредита;
	КатегорияЦены=?(КлиентФилиала.КатегорияЦены.Выбран()=1,КлиентФилиала.КатегорияЦены,КатегорияЦены);
	Устан_Вал( Контекст, Дата_курса, Валюта_Прежн, Курс_Прежн );
	Агент = КлиентФилиала.Агент;
	// сем \\ 
	семУстановкаКурса();
	// сем //
	Взаиморасчеты();
КонецПроцедуры

//Процедура СортТовар()
//	Возврат;
//	ТТ=СоздатьОбъект("ТаблицаЗначений");
//	спр = СоздатьОбъект( "Справочник.СкладскиеАдреса" );
//	ВыгрузитьТабличнуюЧасть(ТТ);
//	ТТ.НоваяКолонка("УслХран","Число",2);
//	ТТ.ВыбратьСтроки();
//	Пока ТТ.ПолучитьСтроку()=1 Цикл
//		Попытка
//			Если спр.НайтиПоРеквизиту( "Товар", Товар, 1 ) = 1 Тогда
//		    	ТТ.УслХран=спр.Наименование;
//			Иначе
//		    	ТТ.УслХран=ТТ.Товар.МестоХранения.Код;
//			КонецЕсли;
//		Исключение
//		КонецПопытки;
//	КонецЦикла;
//	ТТ.Сортировать("+УслХран,+ТовКод");
//	ЗагрузитьТабличнуюЧасть(ТТ);
//КонецПроцедуры     

//======================================================================
//Одна процедура для ускорения 
Процедура кнСоздатьИПровестиСчетТаб(п_Авто=0)
	Перем л_итСписокСкладов,л_ТабЗнач;
	Перем л_Счет,л_ИТ;
	Перем л_колСчетов,л_колСтрокТовараНаСкладе;	
	
	//
	Если п_Авто=0 Тогда
		Если (ПроверкаДублейСтрок(Контекст)=1) Тогда 
			Сообщить("Заявки не создаются. В документе строки с одинаковым товаром!");
			Возврат;
		ИначеЕсли ПустоеЗначение(ДатаПоставки)=1 Тогда 
			Сообщить("Заполните дату поставки");
			Возврат;
		ИначеЕсли ДатаПоставки<РабочаяДата() Тогда 
			Сообщить("Дата поставки меньше сегодняшей даты. Измените дату поставки!");
			Возврат;
		КонецЕсли;
		
		Если ПустоеЗначение(ВидДоставки)=1 Тогда 
			Сообщить("Заполните вид доставки");
			Возврат;
		КонецЕсли;
	
		Если ПустоеЗначение(Агент)=1 Тогда 
			Сообщить("Выберите агента");
			Возврат;
		КонецЕсли;
	
		Если ПустоеЗначение(КатегорияЦены)=1 Тогда 
			Сообщить("Выберите категорию цены");
			Возврат;
		КонецЕсли;                        
		
		//проверяем заполнение Категории для заявкина списание 
		Если ВидОплаты = 5 Тогда 
			Если ПустоеЗначение(КатегорияСписания)=1 Тогда
				Сообщить("Выберите категорию списания!");
				СтатусВозврата(0);
			КонецЕсли;
		КонецЕсли;
	
		Записать();
		Если Выбран()=0 Тогда
			Сообщить("Документ не записан!");
			Возврат;
		КонецЕсли;		
	КонецЕсли;

	Путь = КаталогИБ() + "ExtForms\Sem\ПроверкаДолгаКлиента.ert";
	Если ФС.СуществуетФайл( Путь ) = 1 Тогда
		сп = СоздатьОбъект( "СписокЗначений" );
		сп.Установить( "Контекст", ВзятьКонтекст( Контекст ) );
		ОткрытьФормуМодально( "Обработка", сп, Путь );
		Если сп.Получить( "Результат" ) <> 1 Тогда
			СтатусВозврата(0); Возврат;
		КонецЕсли;
		Иначе
		Если семПроверкаКлиента(Контекст) = 0 Тогда
			Сообщить("Документ не проведен!!!","!!!");
			СтатусВозврата(0); Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	
	АвтоВремяТекущее(); 
	
	ВремяНач  = _GetPerformanceCounter();
	
	начЛог = семЗаписатьЛогНач( "Документ", "СчетОбщий", "Обработка", "Создать и провести счета таб",ТекущийДокумент() );
	
	////автоматом заполняем пустые склады
	начЛог2 = семЗаписатьЛогНач( "Документ", "СчетОбщий", "Обработка", "ЗаполнитьПустыеСтрокиСклада",ТекущийДокумент() );
	ЗаполнитьПустыеСтрокиСклада();
	семЗаписатьЛогКон(начЛог2);
	
	начЛог2 = семЗаписатьЛогНач( "Документ", "СчетОбщий", "Обработка", "ЗаполнитьПустыеСтрокиСчета",ТекущийДокумент() );
	ЗаполнитьПустыеСтрокиСчета(); 
	семЗаписатьЛогКон(начЛог2);
	
	начЛог2 = семЗаписатьЛогНач( "Документ", "СчетОбщий", "Обработка", "ОбновитьСчета",ТекущийДокумент() );
	ОбновитьСчета();
	семЗаписатьЛогКон(начЛог2);
	
	Сумма = Итог("Сумма");
	Если (Клиент.МинСуммаЗаявки>=Сумма) ИЛИ (перек_Заявки=2 ) Тогда
		БесплатнаяДоставка = 1;
	Иначе
		БесплатнаяДоставка = 0;
	КонецЕсли;
	
	тзСчета=СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(тзСчета,"ДокТаб");
	тзСчета.Свернуть("ДокТаб","");

	начЛог2 = семЗаписатьЛогНач( "Документ", "СчетОбщий", "Обработка", "ЗаписатьИПровести",ТекущийДокумент() );
	л_Док=СоздатьОбъект("Документ.Счет");
	тзСчета.ВыбратьСтроки();
	Пока тзСчета.ПолучитьСтроку() = 1 Цикл
		
		Если ПустоеЗначение(тзСчета.ДокТаб)=0 Тогда
			Если л_Док.НайтиДокумент(тзСчета.ДокТаб)=1 Тогда
				Если  л_Док.БесплатнаяДоставка <> БесплатнаяДоставка Тогда
					л_Док.БесплатнаяДоставка = БесплатнаяДоставка;
//					л_Док.Записать();
				КонецЕсли;
				Если л_Док.Проведен()=0 Тогда
					Состояние("Проводим: [тзСчет.НомерСтроки]/[тзСчета.КоличествоСтрок()]");
					начЛог3 = семЗаписатьЛогНач( "Документ", "СчетОбщий", "Обработка", "ЗаписатьИПровести",л_Док.ТекущийДокумент() );
					л_Док.Провести(1,1);
					семЗаписатьЛогКон(начЛог3);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	семЗаписатьЛогКон(начЛог2);

	начЛог2 = семЗаписатьЛогНач( "Документ", "СчетОбщий", "Обработка", "ЗаполнитьРезерв",ТекущийДокумент() );
	ЗаполнитьРезерв();
	семЗаписатьЛогКон(начЛог2);
	                            
	//ОбновитьСчета();
	ВремяКон  = _GetPerformanceCounter();
	
	семЗаписатьЛогКон(начЛог);
	
	Если п_Авто=0 Тогда
		Сигнал();
		Сообщить("Время проведения: "+Окр((ВремяКон-ВремяНач)/1000,2)+" сек.");
		Записать();
		Провести(1,0);
//		Форма.Закрыть();
	КонецЕсли;
	Форма.Обновить();
	
КонецПроцедуры // кнПровестиСчетТаб

//======================================================================
Процедура кнПровестиСчетТаб()
	Перем л_итСписокСкладов,л_ТабЗнач;
	Перем л_Счет,л_ИТ;
	Перем л_колСчетов,л_колСтрокТовараНаСкладе;	
	
	
	
	Если (ПроверкаДублейСтрок(Контекст)=1) Тогда 
		Сообщить("Заявки не создаются. В документе строки с одинаковым товаром!");
		Возврат;
	ИначеЕсли ПустоеЗначение(ДатаПоставки)=1 Тогда 
		Сообщить("Заполните дату поставки");
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(ВидДоставки)=1 Тогда 
		Сообщить("Заполните вид доставки");
		Возврат;
	КонецЕсли;

	Если ПустоеЗначение(Агент)=1 Тогда 
		Сообщить("Выберите агента");
		Возврат;
	КонецЕсли;

	Если ПустоеЗначение(КатегорияЦены)=1 Тогда 
		Сообщить("Выберите категорию цены");
		Возврат;
	КонецЕсли;
	Записать();
	Если Выбран()=0 Тогда
		Сообщить("Документ не записан!");
		Возврат;
	КонецЕсли;
	АвтоВремяТекущее(); 
	
	
	начЛог = семЗаписатьЛогНач( "Документ", "СчетОбщий", "Обработка", "Создать при нажатии 2" );
	
	//автоматом заполняем пустые склады
	ЗаполнитьПустыеСтрокиСклада();
	ЗаполнитьПустыеСтрокиСчета();
	ОбновитьСчета();
	Записать();
	семЗаписатьЛогКон( начЛог );
	
	начЛог = семЗаписатьЛогНач( "Документ", "СчетОбщий", "Обработка", "Провести счета таб" );

	кнСоздатьПриНажатии();
	
	ОбновитьСчета();
	
	тзСчета=СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(тзСчета,"ДокТаб");
	тзСчета.Свернуть("ДокТаб","");
	
	л_Док=СоздатьОбъект("Документ.Счет");
	тзСчета.ВыбратьСтроки();
	Пока тзСчета.ПолучитьСтроку() = 1 Цикл
		
		Если ПустоеЗначение(тзСчета.ДокТаб)=0 Тогда
			Если л_Док.НайтиДокумент(тзСчета.ДокТаб)=1 Тогда
				Если л_Док.Проведен()=0 Тогда
					л_Док.Провести(1);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ОбновитьСчета();
	
	семЗаписатьЛогКон(начЛог);
КонецПроцедуры // кнПровестиСчетТаб

Процедура кнПровестиПриНажатии()
	//СортТовар();
	Провести(,0);
	//ВидимостьПроведения=1-Проведен();
	//Если Проведен() = 1 Тогда
	//	Форма.ТолькоПросмотр( 1 );
	//	семДоступность();
	//КонецЕсли;
КонецПроцедуры

Процедура ПриУдаленииСтроки()
	Если (Константа.НовыйМеханизмПретензий.Получить(ДатаДок)=Да) И (Проведен()=1) Тогда 
		Предупреждение("Нельзя удалять строки в проведенном документе.");
		Если НазваниеНабораПрав()="Администратор" Тогда
		Иначе
			СтатусВозврата(0);
		КонецЕсли;
	КонецЕсли;
	
	Если (ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь) И (фБроньвпути=1) Тогда
		Если КоличествоСтрок()=1 Тогда
			ДокументПривязки=ПолучитьПустоеЗначение();
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьСчета();

КонецПроцедуры

//======================================================================
Процедура ПроверкаПриРедактированииСтрок(п_ДокТаб)
	Если ПустоеЗначение(п_ДокТаб)=0 Тогда
		л_Сост=глПолучитьСостояниеДокумента(п_ДокТаб,0);
	Иначе
		Возврат; //все в порядке - заявки еще нет
	КонецЕсли;
	Если л_Сост.Код="1" Тогда //ожидает комплектации
	ИначеЕсли л_Сост.Код="-2" Тогда //подготавливается
	Иначе
//		Сообщить(п_ДокТаб+" находится в "+л_Сост+" состоянии. Изменение строки невозможно.");
		Предупреждение("Документ " +п_ДокТаб.НомерДок+" находится в состоянии: "+л_Сост+" . Изменение строки невозможно.");
		СтатусВозврата(0);
	КонецЕсли;	
КонецПроцедуры // ПроверкаПриРедактированииСтрок

Процедура ПриНачалеРедактированияСтроки()
	
	
	
	Если Найти(Форма.ТекущаяКолонка(),"Цена")>0 Тогда
		ПроверкаПриРедактированииСтрок(ДокТаб);
		Если ПустоеЗначение(СкладТаб)=1 Тогда
			Предупреждение("Для смены цены, выбирите склад");
			СтатусВозврата(0);
		КонецЕсли;
		ПредЦена=Цена;
		ЗапретСкидки=0;
		спр = СоздатьОбъект( "Справочник.Цены" );
		спр.ИспользоватьВладельца( Товар );
		спр.ВыбратьЭлементы();
		Пока спр.ПолучитьЭлемент() = 1 Цикл
			Если спр.ПометкаУдаления() = 1 Тогда 
				Продолжить; 
			КонецЕсли;
			Если (спр.КатегорияЦены = КатегорияЦены) Тогда
				ЗапретСкидки=спр.ЗапретСкидки;
			КонецЕсли;
		КонецЦикла;

		НедельныйАкцент=глВернутьАкцентТовара(Товар,глКодСтраныПользователя);
		Если (ЗапретСкидки=1) И ((НедельныйАкцент=1) ИЛИ (СкладТаб.ТипСклада = Перечисление.ТипыСкладов.СкладРаспродажи)) Тогда
			//тогда можно редактировать
		ИначеЕсли (ЗапретСкидки=1) Тогда
			
			Предупреждение("У данного товара нельзя устанавливать цену вручную!");
			СтатусВозврата(0);
		КонецЕсли;
		
		Если ПустоеЗначение(Пользователь.Сотрудник.Должность)=1 Тогда
			Предупреждение("У вас нет прав устанавливать цену вручную. Отсутствует привязка к должности!");
			СтатусВозврата(0);
		КонецЕсли;
		
		Если ПустоеЗначение(ДатаПоставки)=1 Тогда
			Предупреждение("Перед установкой цены Вы должны указать дату поставки!");
			СтатусВозврата(0);
		КонецЕсли;
		
	ИначеЕсли Форма.ТекущаяКолонка()="Количество" Тогда
		ПроверкаПриРедактированииСтрок(ДокТаб);
		Если (Константа.НовыйМеханизмПретензий.Получить(ДатаДок)=Да) и (Проведен()=1) Тогда 
			Предупреждение("Нельзя изменять кол-во в проведеном документе.");
			СтатусВозврата(0);
		КонецЕсли;
	ИначеЕсли Форма.ТекущаяКолонка()="ДокТабНом" Тогда
		ПолучитьСтрокуПоНомеру(НомерСтроки);
		ОткрытьФорму(ДокТаб,,1);
	Иначе
		ПроверкаПриРедактированииСтрок(ДокТаб);
	КонецЕсли;
КонецПроцедуры
 
Функция ПроцентСкидки(Точность)
	Если (ПустоеЗначение(Товар)=0) И ((Сумма+Скидка)<>0) Тогда
		Возврат Окр(Скидка/(Сумма+Скидка)*100,Точность);
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Процедура ПриОкончанииРедактированияСтроки(НовСтр)
	
	Если (Найти(Форма.ТекущаяКолонка(),"Цена")>0) И (ВидСкидки=Перечисление.ВидСкидки.Документ) Тогда
		//запросим у пользователя пояснение для установки цены вручную
		
		ПроцентСкидки = ПроцентСкидки(0);
		//Сообщить("% скидки: "+ПроцентСкидки);
		
		ОграничениеСкидки = глОграничениеСкидкиНаТовар(Пользователь,Товар,КатегорияЦены,ДатаПоставки);
		
		НедельныйАкцент=Товар.ПолучитьАтрибут("ВыделитьАкц"+Фирма.Страна.Код).Получить(РабочаяДата());
		//НедельныйАкцент=Товар.ПолучитьАтрибут("Выделить"+?(глКодСтраныПользователя="LV","",глКодСтраныПользователя));
		Если НедельныйАкцент=1 Тогда
			ОграничениеСкидки = Макс(Константа.РазмерСкидкиДляАкцентов,ОграничениеСкидки); //для недельных акцентов увеличиваем процент скидки до 40.
		КонецЕсли;
	
		Если (ОграничениеСкидки=0) И ((СкладТаб.ТипСклада = Перечисление.ТипыСкладов.Склад) ИЛИ (СкладТаб.ТипСклада = Перечисление.ТипыСкладов.СкладСвежихПродуктов)) Тогда
			//если ограничение скидки не стоит в должности у сотрудника - действует обычный механизм
			Пояснение=ПояснениеСкидки;
			Если ВвестиСтроку(Пояснение,"Введите причину изменения цены",60)=1 Тогда
				Если СтрДлина(СокрЛП(Пояснение))<6 Тогда
					Предупреждение("Слишком короткое объяснение!");
					СтатусВозврата(0);
				КонецЕсли;
				ПояснениеСкидки=Пояснение;
			Иначе
				Предупреждение("Без ввода пояснения нельзя изменить цену вручную!");
				СтатусВозврата(0);
			КонецЕсли;
		ИначеЕсли (ОграничениеСкидки < Окр(ПроцентСкидки,0)) И ((СкладТаб.ТипСклада = Перечисление.ТипыСкладов.Склад) ИЛИ (СкладТаб.ТипСклада = Перечисление.ТипыСкладов.СкладСвежихПродуктов)) Тогда
			Предупреждение("Вы превысили макс. разрешенный для Вас размер скидки на товар <"+ОграничениеСкидки+"%> -  требуется по документу <"+ПроцентСкидки+"%>!");
			СтатусВозврата(0);
		КонецЕсли;
	КонецЕсли;	
	ОбновитьСчета();
//{бронирование расчет мах количества
	
	Если ДокументОснование.Вид()="Счет" Тогда
		Если (ДокументОснование.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь)И(Резерв>0) Тогда

			пОст=СвободныйОстатокТовараНаСкладе(Товар,СкладТаб);

			пОстатокБронь=пОст+Резерв;
		
			Если Количество>пОстатокБронь Тогда
				Количество=пОстатокБронь;
				Сообщить("Товар нельзя заказать свыше сумме Остатков и Брони !");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Если ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
		
		Если фБроньвпути=1 Тогда
			//ВыбратьДокументПривязки(Товар);
//			пОстаток=СвободноЗаказаныхТоваровНаСкладе(Товар);
			пОстаток=СвободноОжидаемыхТоваровНаСкладе(Товар);


			Если Количество*Коэффициент>пОстаток  Тогда
				Количество=пОстаток/Коэффициент;
				Сообщить(" Товара не хватает в заказе поставщика. Количество не может превышать заказаного товара !");
			КонецЕсли;
		Иначе

			пОст=СвободныйОстатокТовараНаСкладе(Товар,СкладТаб);

			пОстатокБронь=пОст+Резерв;		
			Если Количество>пОстатокБронь Тогда
				Количество=пОстатокБронь;
				Сообщить("Товар нельзя забронировать свыше Остатков !");
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
//}бронирование			

КонецПроцедуры

Процедура ПриНачалеВыбораЗначения(Элем,ФлагСт)
	Если Элем="КлиентФилиала" Тогда
		ФлагСт=0;
		СтатусВозврата(0);
		Кл=СоздатьОбъект("Справочник.Контрагенты");
		Если ПустоеЗначение(КлиентФилиала)=0 Тогда
			Кл.НайтиЭлемент(КлиентФилиала);
		КонецЕсли;
		Кл.ИспользоватьРодителя(Фирма.ОснГруппаКлиентов,0);
		Если Кл.Выбрать("Выберите клиента...","")=1 Тогда
			
			КлиентФилиала	=Кл.ТекущийЭлемент();
			АдресДоставки	=Кл.АдресДоставки;
			АдресДоставкиДоп=Кл.АдресДоставкиДоп;
			
			Если КлиентФилиала = Фирма.Клиент Тогда
				Предупреждение("В качестве конечного клиента не может быть выбран клиент "+КлиентФилиала+".
				|Для пополнения склада филиала заявка ДОЛЖНА делаться от имени Латвийского агента!");
				КлиентФилиала = "";
				Возврат;
			КонецЕсли;

			Валюта=КлиентФилиала.ВалютаКредита;
			КатегорияЦены=?(КлиентФилиала.КатегорияЦены.Выбран()=1,КлиентФилиала.КатегорияЦены,КатегорияЦены);
			Устан_Вал( Контекст, Дата_курса, Валюта_Прежн, Курс_Прежн );
			Агент = КлиентФилиала.Агент;
			// сем \\ 
			семУстановкаКурса();
			// сем //
			Взаиморасчеты();
		КонецЕсли;
	ИначеЕсли Элем="ВидЗаявки" Тогда
		ФлагСт=0;
		сп=СоздатьОбъект("СписокЗначений");
		сп.ДобавитьЗначение(Перечисление.ВидыЗаявок.ЭлектроннаяЗаявка);
		//сп.ДобавитьЗначение(Перечисление.ВидыЗаявок.СпецЗаказ);
		//
		//Если семЕстьПраво("Документ","Счет","Бронирование")=1 Тогда
		//	сп.ДобавитьЗначение(Перечисление.ВидыЗаявок.ЗаявкаБронь);
		//КонецЕсли;
		
	//Бронирование в пути	
	//	Если семЕстьПраво("Документ","Счет","Бронь в пути")=1 Тогда
	//		сп.ДобавитьЗначение(Перечисление.ВидыЗаявок.Броньвпути);
	//	КонецЕсли;

		
		Если Константа.НовыйМеханизмПретензий.Получить(ДатаДок)<>Да Тогда
			//по старой системе разрешаем выбрать возврат от покупателя в приходном документе 
			сп.ДобавитьЗначение(Перечисление.ВидыЗаявок.ЗаявкаНаВозврат);
		КонецЕсли;
		
		сп.ВыбратьЗначение(ВидЗаявки,,,,1);
		
		Если ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь Тогда
			
			ПрефиксНомера=ФК+"B-";
			УстановитьНовыйНомер(ПрефиксНомера);
			семЗаголовокОкна(контекст);
			Форма.Заголовок(Форма.Заголовок()+" Бронирование.");
			УдалитьСтроки();
			Форма.ВидЗаявки.Доступность(0);
		КонецЕсли;	
		
	ИначеЕсли Элем="ВидДоставки" Тогда
		ФлагСт=0;
		сп=СоздатьОбъект("СписокЗначений");
		сп.ДобавитьЗначение(Перечисление.ВидыДоставки.Доставка);
		
		Если (Клиент.ВидКлиента=Перечисление.ВидыКлиентов.Покупатель) Тогда
			сп.ДобавитьЗначение(Перечисление.ВидыДоставки.Агент);
		КонецЕсли;

		Если (ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаНаВозврат) И (Клиент.ВидКлиента=Перечисление.ВидыКлиентов.Поставщик) Тогда
			сп.ДобавитьЗначение(Перечисление.ВидыДоставки.Поставщик);
		ИначеЕсли (ВидЗаявки<>Перечисление.ВидыЗаявок.ЗаявкаНаВозврат) Тогда
			сп.ДобавитьЗначение(Перечисление.ВидыДоставки.Самовывоз);
		КонецЕсли;
		сп.ТекущаяСтрока(сп.НайтиЗначение(ВидДоставки));
		сп.ВыбратьЗначение(ВидДоставки,,,,1);
		
		
	ИначеЕсли  Элем="ДокументПривязки" Тогда		
		СтатусВозврата(0);
		//ЗапросДокументПривязки();
	ИначеЕсли Элем = "СкладТаб" Тогда
		Если ПустоеЗначение(ДокТаб)=0 Тогда
			ФлагСт=0;
			Возврат;
		КонецЕсли;
	
		ФлагСт=0;
//		СтатусВозврата(0);
		
		СкладТаб=УстСкладаТаб(Контекст);
		КодКомпл= ""+СкладТаб.НомерСекции;

	ИначеЕсли Элем="фБроньвПути" Тогда
		Если фБроньвпути=0 Тогда
			ДокументПривязки=ПолучитьПустоеЗначение();
		КонецЕсли;
		
	ИначеЕсли Элем="КатегорияСписания" Тогда
		ФлагСт=0;
		СтатусВозврата(0);
		Меню=СоздатьОбъект("СписокЗначений");
		
		Меню.ДобавитьЗначение(Перечисление.КатегорииСписания.Категория3);
		Меню.ДобавитьЗначение(Перечисление.КатегорииСписания.Категория4);
		
		выб=КатегорияСписания;
		Если Меню.ВыбратьЗначение(выб,"Выберите категорию списания",,,2)=1 Тогда
			КатегорияСписания=выб;       
			
			ТекстЗапроса="SELECT КатегорииСписанияДоп.ID [Ссылка $Справочник.КатегорииСписанияДоп]
//			|					, КатегорииСписанияДоп.DESCR Наименование
			|			  FROM $Справочник.КатегорииСписанияДоп AS КатегорииСписанияДоп With (NOLOCK)
			|			  INNER JOIN $Справочник.КатегорииСписания AS КатегорииСписания With (NOLOCK) ON КатегорииСписанияДоп.PARENTEXT = КатегорииСписания.ID
			|			  WHERE (КатегорииСписанияДоп.ISMARK = 0) AND $КатегорииСписания.КатегорияСписания = :ВыбКатегорияСписания
			|";

			КатегорияСписанияДоп="";
			
			Запрос = СоздатьОбъект("ODBCRecordSet");
			Запрос.УстановитьТекстовыйПараметр("ВыбКатегорияСписания",КатегорияСписания);
			Спис = СоздатьОбъект("СписокЗначений");
			Запрос.ВыполнитьИнструкцию(ТекстЗапроса,Спис);
			Если Спис.РазмерСписка()=0 Тогда
				Возврат;
			КонецЕсли;
			Спис.ВыбратьЗначение(КатегорияСписанияДоп,,,,1);
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры

Процедура ПриВыбореДатыПоставки()

	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если ДокТаб.Проведен()=1 Тогда
			ДатаПоставки=стар_ДатаПоставки;
			Предупреждение("Замена даты запрещена, есть проведенные заявки.");
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ВыбратьГрафикМаршрутаДляКлиента();	
	Если КоличествоСтрок() = 0 Тогда Возврат; КонецЕсли;
	Ответ = Вопрос("Измененна дата поставки товара. Пересчитать цены?","Да+Нет",60);
	Если Ответ <> "Да" Тогда Возврат; КонецЕсли;
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		УстанЦеныРасх(Контекст,"Подбор",0);
		семПроверкаМинОтргКолва( контекст );
		УстМинСрокиРеализации();
		Выч_суммы_накл(Контекст);
	КонецЦикла;
КонецПроцедуры

//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписи() Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ПриЗаписи()
	//Закомментировано Инсталлятором МОД:Процедура ПриЗаписи()
	Если семМожноЗаписать( Контекст ) = 0 Тогда Возврат; КонецЕсли;
	Если семПроверкаДатыПоставки( контекст ) = 0 Тогда Возврат; КонецЕсли;
	//не выгружаем документ в филиал, если эл. заявка выписана для пополнения склада на филиале
	Если (КлиентФилиала = Клиент) И (Фирма<>Константа.ОсновнаяФирма) Тогда
		НеВыгружать=1;	
	КонецЕсли;
	
	
	Если (СтрДлина(НомерДок)<12) И (Лев(НомерДок,4)="E1LV") И (Выбран()=0) Тогда
		Предупреждение("Номер документа слишком короткий!");
		СтатусВозврата(0);
	КонецЕсли;

	//СортТовар(); 
	ВсегоСуммаШ = Итог("НДС") + Итог("Сумма");
	ВсегоНДСШ	= Итог("НДС");
	
	Если о_СоздатьСчета=1 Тогда
		кнСоздатьПриНажатии();
	КонецЕсли;
	
КонецПроцедуры
Процедура кнПриНажатииЗаписать()
	//СортТовар();
	стар_ПриЗаписи();
	Записать();
	
КонецПроцедуры

//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписи()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	стар_ПриЗаписи();
	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
КонецПроцедуры                             
//Конец текста, вставленного Инсталлятором МОД

Процедура ПриВыбореСамовывоза()
	Если Самовывоз=0 Тогда
		Самовывоз = Константа.ПроцентСкидкиНаСамовывоз;
		Если ВвестиЧисло(Самовывоз,"Введите скидку на самовывоз",3,0)=0 Тогда
			Возврат;
		КонецЕсли;
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Цена=Цена * ( 1 - Самовывоз / 100 );
	        Выч_суммы_накл_сНП(Контекст);
		КонецЦикла;
		
	Иначе
				
		Если Вопрос(Шаблон("Отмена скидки на самовывоз.
		|Цены будут увеличины на [Самовывоз]%.
		|Продолжить?"),"Да+Нет",60)="Да" Тогда
		Иначе
			Возврат;
		КонецЕсли;

		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Цена=Цена / ( 1 - Самовывоз / 100 );
		        Выч_суммы_накл_сНП(Контекст);
		КонецЦикла;
		
		Самовывоз=0;
	КонецЕсли;
	   
КонецПроцедуры

Процедура УстВидаОплаты()
	спВидОплаты.ТекущаяСтрока(спВидОплаты.НайтиЗначение(ВидОплаты));
КонецПроцедуры

Процедура ПроверитьФайл()
	Если ФС.СуществуетФайл(СокрЛП(Константа.КаталогОбменаECOD)+"\import\Check_file.ert") <> 0 Тогда
		ОткрытьФорму("Отчет",ТекущийДокумент(),СокрЛП(Константа.КаталогОбменаECOD)+"\import\Check_file.ert");
	КонецЕсли;
	
КонецПроцедуры

Процедура процВидЗаявки(флБронирования)
//{ Начало Изменения отображения заявки для бронирования

	
	
//	Форма.КатегорияЦены.Видимость(1-флБронирования);
//	Форма.Цена.Видимость(1-флБронирования);
//	Форма.ЦенаСНДС.Видимость(1-флБронирования);
//	Форма.таблЦенаИзКаталога.Видимость(1-флБронирования);
//	Форма.ВидСкидки.Видимость(1-флБронирования);
//	Форма.Скидка.Видимость(1-флБронирования);
//	Форма.таблПроц.Видимость(1-флБронирования);

	
	
	Форма.ЦЧ.Видимость(1-флБронирования);
//	Форма.Основание.Видимость(1-флБронирования);
//	Форма.тОснование.Видимость(1-флБронирования);
	
//	Форма.тСумма.Видимость(1-флБронирования);
//	Форма.ттабСумма.Видимость(1-флБронирования);
//	Форма.тИтогСумма.Видимость(1-флБронирования);
//	Форма.тНДС.Видимость(1-флБронирования);
//	Форма.тИтогНДС.Видимость(1-флБронирования);
//	Форма.тВсего.Видимость(1-флБронирования);
//	Форма.тИтогВсего.Видимость(1-флБронирования);
	Форма.кнПроверитьФайл.Видимость(1-флБронирования);
	
//	Форма.тСкидка.Видимость(1-флБронирования);
//	Форма.тИтогСкидка.Видимость(1-флБронирования);
//	Форма.тПроцСкидка.Видимость(1-флБронирования);
	Форма.СкидкаНакл.Видимость(1-флБронирования);
	Форма.тАвторБрони.Видимость(0+флБронирования);
	
//	Форма.тКатегорияЦены.Видимость(1-флБронирования+фБроньвпути);
//	Форма.КатегорияЦены.Видимость(1-флБронирования+фБроньвпути);
	
	Форма.тМаршрут.Видимость(1-флБронирования);
	Форма.тФорматВыводаМаршрута.Видимость(1-флБронирования);
	
	
	Форма.тИнформационнаяСтрока.Видимость(1-флБронирования);
	Форма.тДоговор.Видимость(1-флБронирования);
	Форма.тИнфоДоговор.Видимость(1-флБронирования);
	Форма.тИнфоПродажа.Видимость(1-флБронирования);
	Форма.тВидОплаты.Видимость(1-флБронирования+фБроньвпути);
	Форма.спВидОплаты.Видимость(1-флБронирования+фБроньвпути);
	Форма.текстМаршрут.Видимость(1-флБронирования);
	
	Форма.тДниОбсл.Видимость(1-флБронирования);
	Форма.тВалюта.Видимость(1-флБронирования);
	
//	Форма.лДатаПоставки.Видимость(1-флБронирования);
//	ДатаПоставки=ДатаДок;
//	Форма.ДатаПоставки.Видимость(1-флБронирования);
	
	Форма.тВидДоставки.Видимость(1-флБронирования+фБроньвпути);
	Форма.ВидДоставки.Видимость(1-флБронирования+фБроньвпути);
	Форма.лДатаПоставки.Заголовок(?(флБронирования=0,"Дата поставки:","Срок Брони"));
// бронь в пути
	Форма.фБроньвпути.Видимость(флБронирования);
//	Форма.рамБронь.Видимость(флБронирования);
	Форма.тБроньвпути.Видимость(флБронирования);
	Форма.ДокументПривязки.Видимость(флБронирования);
	Форма.кнИнфоЗакПостав.Видимость(флБронирования);
	Форма.ргрБроньвпути.Видимость(флБронирования);
	
//} Конец Изменения отображения заявки для бронирования
	
КонецПроцедуры


/////********************* FormEx { ******************************************************
//Процедура ПриНажатииКнопкиКлавиатуры(КодКлавиши, Alt, Shift, Ctrl, Символ, ФСО)
//	оПолеВвода_Контрагент.ПриНажатииКнопкиКлавиатуры(КодКлавиши, Alt, Shift, Ctrl, Символ, ФСО);
//КонецПроцедуры
//
//Процедура ПриНажатииЛевойКнопки(Сост, Лево, Верх)
//	оПолеВвода_Контрагент.ПриНажатииЛевойКнопки(Сост, Лево, Верх);
//КонецПроцедуры
//
//Процедура ПриОтжатииЛевойКнопки(Сост, Лево, Верх)
//	оПолеВвода_Контрагент.ПриОтжатииЛевойКнопки(Сост, Лево, Верх);
//КонецПроцедуры
////} FormEx ******************************************************
//
//Сервис.ПерехватКлавиатуры(1);

//******************************************************************************
Функция Раскрасить()             
        
	Выделить_=Товар.ПолучитьАтрибут("ВыделитьАкц"+Фирма.Страна.Код).Получить(РабочаяДата());
	//Выделить_=?(глКодСтраныПользователя="LV",Товар.Выделить,Товар.ПолучитьАтрибут("Выделить"+глКодСтраныПользователя));
	Если (Выделить_=1) Тогда
		Возврат "FONT["+Константа.ЦветВыделенногоТовара.НомерЦвета+"]BRUSH["+Константа.ФонВыделенногоТовара.НомерЦвета+"]COUNT[2]IDENT[0]";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

//******************************************************************************
Функция РаскраситьЦену()             
        
	Если Число(ДатаПоставки) = 0 Тогда
		ДатаЦены = ДатаДок;
	Иначе
		ДатаЦены = ДатаПоставки;
	КонецЕсли;
	ЦенаИзКат = ЦенаТовараПоКатегорииДляТовара(Товар,КатегорияЦены,Валюта,Курс,ДатаЦены);
	
	Если (Окр(ЦенаИзКат,2)<Окр(Цена,2)) Тогда
		Возврат "BRUSH["+глПолучитьЦвет(255)+"]COUNT[3]IDENT[0]";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции


//******************************************************************************
Функция РаскраситьИзмЦены()             
        
	Возврат "FONT["+глПолучитьЦвет(255)+"]COUNT[2]IDENT[0]";
	
КонецФункции

//======================================================================
Процедура УстановитьНовыйНомерДок()
	УстановитьНовыйНомер(Шаблон("E[Прав(Строка(ДатаГод(РабочаяДата())),1)][семТекСтрана()]-A"));
КонецПроцедуры


Процедура ЗаполнитьИзменениеЦены()
	
	ТекстЗапроса = "SELECT TOP 1 ROUND($ПереоценкаТоваровСтроки.Цена,2) ЦенаНов, CONVERT(SMALLDATETIME,LEFT(ЖурналПер.DATE_TIME_IDDOC,8),104) Дата 
	|					  FROM $ДокументСтроки.ПереоценкаТоваров AS ПереоценкаТоваровСтроки With (NOLOCK) 			
	|					  INNER JOIN $Документ.ПереоценкаТоваров AS ПереоценкаТоваров With (NOLOCK) ON ПереоценкаТоваров.IDDOC = ПереоценкаТоваровСтроки.IDDOC
	|				      INNER JOIN _1SJOURN AS ЖурналПер With (NOLOCK) ON ПереоценкаТоваровСтроки.IDDOC = ЖурналПер.IDDOC AND ЖурналПер.DATE_TIME_IDDOC >= :Нач
	|					   WHERE $ПереоценкаТоваровСтроки.Товар =  :Товар
	|							AND $ПереоценкаТоваров.КатегорияЦены = :КатЦены
	|				      ORDER BY ЖурналПер.DATE_TIME_IDDOC
	//|					, (SELECT TOP 1 CONVERT(SMALLDATETIME,LEFT(ЖурналПер.DATE_TIME_IDDOC,8),104) 
	//|					  FROM $ДокументСтроки.ПереоценкаТоваров AS ПереоценкаТоваровСтроки With (NOLOCK) 
	//|				      INNER JOIN _1SJOURN AS ЖурналПер With (NOLOCK) ON ПереоценкаТоваровСтроки.IDDOC = ЖурналПер.IDDOC AND ЖурналПер.DATE_TIME_IDDOC >= Журнал.DATE_TIME_IDDOC
	//|					   WHERE $ПереоценкаТоваровСтроки.Товар =  :Товар 
	//|				      ORDER BY ЖурналПер.DATE_TIME_IDDOC DESC ) Документ_дата
	//|				FROM $ДокументСтроки.СчетОбщий AS СчетОбщийСтроки With (NOLOCK) 
	//|				INNER JOIN $Документ.СчетОбщий AS СчетОбщий With (NOLOCK) ON СчетОбщийСтроки.IDDOC = СчетОбщий.IDDOC
	//|				INNER JOIN _1SJOURN AS Журнал With (NOLOCK) ON СчетОбщий.IDDOC = Журнал.IDDOC 
	//|				WHERE (СчетОбщийСтроки.IDDOC = :Заявка) AND
	//|						AND $СчетОбщийСтроки.Товар = :Товар
	|";
	
	
	ЗапросСКЛ.УстановитьТекстовыйПараметр("Позиция",СформироватьПозициюДокумента(?(Выбран()=1,ТекущийДокумент(),ПолучитьДокументТА()),0));
	ЗапросСКЛ.УстановитьТекстовыйПараметр("Нач",ДатаДок);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("Товар",Товар);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("КатЦены",КатегорияЦены);
	
	//ЗапросСКЛ.Отладка(1);
	табл=ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса);
	
	Если табл.КоличествоСтрок()=1 Тогда
		табл.ПолучитьСтрокуПоНомеру(1);
		ЦенаНовДата = табл.Дата;
		ЦенаНов = табл.ЦенаНов;
//		Возврат СокрЛП(Шаблон("[табл.Дата] - ")+СокрЛП(Шаблон("[табл.ЦенаНов #Ч12.2]")));
	Иначе
		ЦенаНовДата = "";
		ЦенаНов = 0;
		//Возврат "";
	КонецЕсли;
	
КонецПроцедуры
Функция ИзменениеЦены()
	
	Если ПустоеЗначение(ЦенаНовДата)=1 Тогда
		Возврат "";
	Иначе
		Возврат СокрЛП(Шаблон("[ЦенаНовДата] - ")+СокрЛП(Шаблон("[ЦенаНов #Ч12.2]")));
	КонецЕсли;
КонецФункции

//======================================================================

//======================================================================

//{***Оперативная смена вида заявки***\\

Процедура ЗаполнитьВидомзаявкиВсеСтроки()
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		ЗаполнитьВидЗаявки(Товар,Склад);
		Сообщить("В строке "+Строка(НомерСтроки)+" сменился ВидЗаявки на "+ВидЗаявкиТаб);
	КонецЦикла;	
КонецПроцедуры // Заполнить видом заявки

//======================================================================
Процедура ОбновитВидЗаявкиСтрокиИзДокТаб()
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		ВидЗаявкиТаб=ДокТаб.ТекущийДокумент().ВидЗаявки;
	КонецЦикла;		
КонецПроцедуры // ОбновитВидЗаявкиСтрокиИзДокТаб


Процедура кн_СменитьВидЗаявкиПриНажатии(п_команда="Все",п_НомерСтроки="")
	
	
	Если п_команда="Все" Тогда
		л_Счет=СоздатьОбъект("Документ.Счет");
		ЗаполнитьВидомзаявкиВсеСтроки();
		
		л_итСписокДокументов=СоздатьОбъект("ИндексированнаяТаблица");
		л_ТабЗнач = СоздатьОбъект("ТаблицаЗначений");
		ВыгрузитьТабличнуюЧасть(л_ТабЗнач,);
		л_итСписокДокументов.Загрузить(л_ТабЗнач);
		л_итСписокДокументов.Свернуть("ДокТаб",);
	//	л_итСписокДокументов.Показать();
		
		л_итСписокДокументов.ВыбратьСтроки();
		Пока л_итСписокДокументов.ПолучитьСтроку() = 1 Цикл
			Если (ПустоеЗначение(л_итСписокДокументов.ДокТаб)=0)И(л_итСписокДокументов.ДокТаб.Выбран()=1) Тогда
				Если л_Счет.НайтиДокумент(л_итСписокДокументов.ДокТаб)=1 Тогда
					Если л_Счет.Проведен()=0 Тогда
						л_Счет.ВидЗаявки=л_итСписокДокументов.ВидЗаявкиТаб;
						Если л_Счет.Записать()=1 Тогда
							Сообщить("В документе "+Строка(л_Счет.НомерДок)+" сменился ВидЗаявки на "+л_Счет.ВидЗаявки);
						Иначе
							Сообщить("В документе "+Строка(л_Счет.НомерДок)+" не сменился ВидЗаявки");						
						КонецЕсли;
					Иначе
						Сообщить("В документе "+Строка(л_Счет.НомерДок)+" не сменился ВидЗаявки");
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;		
		КонецЦикла;	
		Форма.Обновить();
	ИначеЕсли п_команда="Строку" Тогда	
		л_Счет=СоздатьОбъект("Документ.Счет");
		ПолучитьСтрокуПоНомеру(п_НомерСтроки);
		Если л_Счет.НайтиДокумент(ДокТаб)=1 Тогда
			Если л_Счет.Проведен()=0 Тогда
				л_Счет.ВидЗаявки=ВидЗаявкиТаб;
				Если л_Счет.Записать()=1 Тогда
					Сообщить("В документе "+Строка(л_Счет.НомерДок)+" сменился ВидЗаявки на вид: "+л_Счет.ВидЗаявки);
				Иначе
					Сообщить("В документе "+Строка(л_Счет.НомерДок)+" не сменился ВидЗаявки");						
				КонецЕсли;
			Иначе
				Сообщить("В документе "+Строка(л_Счет.НомерДок)+" не сменился ВидЗаявки");
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	ОбновитВидЗаявкиСтрокиИзДокТаб();
	Форма.Обновить();	
КонецПроцедуры // кн_СменитьВидЗаявки()

//}***Оперативная смена вида заявки***\\

Валюта_Прежн=Валюта;
Курс_Прежн=Курс;
Клиент.ИспользоватьДату(ДатаДок);
//-----------------------------------------------
спВидОплаты.ДобавитьЗначение(0,"Кредит");
спВидОплаты.ДобавитьЗначение(1,"Наличные");
спВидОплаты.ДобавитьЗначение(4,"Обмен товара");
//спВидОплаты.ДобавитьЗначение(2,"Отв. хранение");
//спВидОплаты.ДобавитьЗначение(3,"Реализация");
спВидОплаты.ДобавитьЗначение(5,"Списание");


Попытка
	Расш=СоздатьОбъект("РасширениеФормы");
Исключение
	Расш="";
КонецПопытки;
стар_ДатаПоставки=ДатаПоставки;
НеЗакрывать=0;
о_СоздатьСчета=0;
п_АвтоматическаяОбработка=0;

ЗапросСКЛ =  СоздатьОбъект("ODBCRecordSet");

ф_ПроверкаМодуляПРоведения=1;