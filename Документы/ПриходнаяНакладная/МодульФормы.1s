Перем спКодов;
Перем Валюта_Прежн;
Перем Курс_Прежн;
Перем Режим;
Перем ИнформационнаяСтрока;
Перем Prompt;   
Перем ПроцСкидки;
Перем стар_Клиент;   
// ИНТРАСТАТ
Перем ВесНеттоТоваров;
перем Позиция;
Перем итТаблПрихода;
Перем флВВодНаОсновании;         
Перем флБылоИзменениеТовара;

Процедура УстановитьПредСрокРеализ(п_колдней=180) Далее

//----------------------------------------------------

//{***Обработка вкладки файлов***\\




Процедура ЗаполнитьПредл()
	Если Выбран()=0 Тогда
//		Форма.кнДобПредл.Доступность(0);
		Форма.кнИзмПредл.Доступность(0);
		Форма.кнУдПредл.Доступность(0);
		Возврат;
	КонецЕсли;
	таблПредложений.УдалитьСтроки();

	л_флПриходная=0;
	л_ДопЗапрос="";
	Если ДокументОснование.Вид()="ОжидаемаяПоставка" Тогда
		л_флПриходная=л_флПриходная+1;
		л_ДокПрих=ДокументОснование;
		л_ДопЗапрос=" OR ($ФайлДок.Док = $ВидДокумента36.ОжидаемаяПоставка + :п_ДокПрих)";
 	КонецЕсли;



	л_итСписокФайлов=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос=СоздатьОбъект("ODBCRecordSet");

	ТекстЗапроса="SELECT ФайлДок.ID [Ссылка $Справочник.ФайлДок]
		|	, ФайлДок.DESCR Наименование
		|	, $ФайлДок.Файл Файл
		|	, $ФайлДок.ВидФайла [ВидФайла $Перечисление.ВидыФайлов]
		|	, NullIf($ФайлДок.ДатаФайла, '17530101') ДатаФайла
		|	, $ФайлДок.Автор [Автор $Справочник.Пользователи]
		|FROM $Справочник.ФайлДок AS ФайлДок
		|WHERE ($ФайлДок.Док = $ВидДокумента36.ПриходнаяНакладная + :п_Док)"+л_ДопЗапрос+"
		|";	
		
	Запрос.УстановитьТекстовыйПараметр("п_Док",ТекущийДокумент());
	
	Если л_флПриходная>0 Тогда
		Запрос.УстановитьТекстовыйПараметр("п_ДокПрих",л_ДокПрих);
	КонецЕсли;
	
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,л_итСписокФайлов);
	

	Если л_итСписокФайлов.КоличествоСтрок()>0 Тогда
		л_итСписокФайлов.ВыбратьСтроки();
		Пока л_итСписокФайлов.ПолучитьСтроку() = 1 Цикл
			таблПредложений.НоваяСтрока();
			таблПредложений.ТекущийЭлемент = л_итСписокФайлов.Ссылка;
			таблПредложений.Наименование = л_итСписокФайлов.Наименование;
			таблПредложений.Файл = л_итСписокФайлов.Файл;
			таблПредложений.ВидФайла = л_итСписокФайлов.ВидФайла;
			таблПредложений.ДатаПредл = л_итСписокФайлов.ДатаФайла;
			таблПредложений.Автор = л_итСписокФайлов.Автор;
		КонецЦикла;
		
	КонецЕсли;

	Форма.кнДобПредл.Доступность(1);
	Если таблПредложений.КоличествоСтрок() = 0 Тогда
		Форма.кнИзмПредл.Доступность(0);
		Форма.кнУдПредл.Доступность(0);
	Иначе
		Форма.кнИзмПредл.Доступность(1);
		Форма.кнУдПредл.Доступность(1);
	КонецЕсли;
КонецПроцедуры
Процедура кнДобПредл()

	
	Если Выбран()=0 Тогда
		Предупреждение("Вы должны сначала записать документ!");
		Возврат;
	КонецЕсли;
	
		спПарам = СоздатьОбъект( "СписокЗначений" );
		спПарам.Установить("Документ",ТекущийДокумент());
		спПарам.Установить("флПроверки",1);
	ОткрытьФормуМодально("Элемент.ФайлДок",спПарам,,,);
	ЗаполнитьПредл();
КонецПроцедуры
Процедура кнИзмПредл()
	Если Форма.ТолькоПросмотр() = 1 Тогда Возврат; КонецЕсли;
	ОткрытьФормуМодально(таблПредложений.ПолучитьЗначение(таблПредложений.ТекущаяСтрока(),"ТекущийЭлемент"));
	ЗаполнитьПредл();
КонецПроцедуры
Процедура кнУдПредл()
	
	Если Вопрос("Вы действительно хотите удалить предложение?",1) = 2 Тогда Возврат; КонецЕсли; 
	спр = СоздатьОбъект("Справочник.ФайлДок");
	Если спр.НайтиЭлемент(таблПредложений.ПолучитьЗначение(таблПредложений.ТекущаяСтрока(),"ТекущийЭлемент"))=1 Тогда
		ОбъектУдалить(спр, 1);
	КонецЕсли;
	ЗаполнитьПредл();
КонецПроцедуры  
Процедура кнОткрытьФайл()
	ОткрытьФорму(таблПредложений.ПолучитьЗначение(таблПредложений.ТекущаяСтрока(),"ТекущийЭлемент"),"Открыть файл");
КонецПроцедуры



//}***Обработка вкладки файлов***\\



Функция ИнфОдоговоре()
	Если Клиент.Выбран()=1 Тогда
		Если СтрДлина(СокрЛП(Клиент.Договор))=0 Тогда
			Возврат("Договора нет!!!");
		Иначе
			Возврат(Клиент.Договор);
		КонецЕсли;
	Иначе
		Возврат("");
	КонецЕсли;
КонецФункции


Функция РазницаСравнения(док1,док2)

	тз1=СоздатьОбъект("ТаблицаЗначений");
	тз2=СоздатьОбъект("ТаблицаЗначений");

	ит1=СоздатьОбъект("ИндексированнаяТаблица");
	ит2=СоздатьОбъект("ИндексированнаяТаблица");
	итРез=СоздатьОбъект("ИндексированнаяТаблица");

	док1.ВыгрузитьТабличнуюЧасть(тз1);
	док2.ВыгрузитьТабличнуюЧасть(тз2);
	
	ит1.Загрузить(тз1,,"Товар,Количество");
	ит2.Загрузить(тз2,,"Товар,Количество");
	ит1.ДобавитьИндекс("иТоварКолич","*Товар,*Количество");
	ит2.ДобавитьИндекс("иТоварКолич","*Товар,*Количество");

	ит1.Свернуть("Товар","Количество","иТоварКолич");
	ит2.Свернуть("Товар","Количество","иТоварКолич");

//	ит1.Показать();
//	ит2.Показать();
	
	Ит2.Разность(ит1,"иТоварКолич","иТоварКолич",0);
	Возврат ит2.КоличествоСтрок();

//	ит2.Показать();
КонецФункции


//{***ПриемТовара***//



Функция ПроверкаПриема(пТекущийДокПоставки,пКомплектовщик="")
	Перем текст;
	
	пДок=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос=СоздатьОбъект("ODBCRecordSet");
	
	Если пКомплектовщик="" Тогда
		текст="";
	Иначе
		текст="|AND ($ПрихНаклМобил.Комплектовщик = :Комплектовщик)";
		Запрос.УстановитьТекстовыйПараметр("Комплектовщик",пКомплектовщик);
	КонецЕсли;

	
	ТекстЗапроса="SELECT ПрихНаклМобил.IDDOC [Ссылка $Документ.ПрихНаклМобил]
		|FROM _1SJOURN AS Журнал
		|	LEFT JOIN $Документ.ПрихНаклМобил AS ПрихНаклМобил ON Журнал.IDDOC = ПрихНаклМобил.IDDOC
		|WHERE ((Журнал.CLOSED & 1) = 0)
//		|	AND (Журнал.ISMARK = 0)
		|	AND ($ПрихНаклМобил.ДокументОснование = $ВидДокумента36.ОжидаемаяПоставка + :ДокОсн)"
		+текст+"
		|";	
	
	
	Запрос.УстановитьТекстовыйПараметр("ДокОсн",пТекущийДокПоставки);
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,пДок);
	Возврат пДок;
КонецФункции

Функция ЗагрузкаРегистра(док)
	пДок=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос=СоздатьОбъект("ODBCRecordSet");

	ТекстЗапроса="SELECT ТоварыВПутиОстатки.Товар [Товар $Справочник.Номенклатура]
		|	, NullIf(ТоварыВПутиОстатки.СрокПоставки, '17530101') СрокПоставки
		|	, ТоварыВПутиОстатки.ПоЗаказу [ПоЗаказу $Документ]
		|	, ТоварыВПутиОстатки.Док [Док $Документ]
		|	, ТоварыВПутиОстатки.КоличествоОстаток
		|FROM $РегистрОстатки.ТоварыВПути(,,
		|(Док = $ВидДокумента36.ОжидаемаяПоставка + :Док),,) AS ТоварыВПутиОстатки
		|";	
	
	
	Запрос.УстановитьТекстовыйПараметр("Док",Док);
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,пДок);

	//пДок.ДобавитьИндекс("иПоЗаказу","ПоЗаказу");
	Возврат пДок;
КонецФункции
Функция ПолучитьПоПриему(док1)
	ИТ=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос=СоздатьОбъект("ODBCRecordSet");

	ТекстЗапроса="SELECT ПриемТовараОстатки.Товар [Товар $Справочник.Номенклатура]
		|	, NullIf(ПриемТовараОстатки.СрокРеализ, '17530101') СрокРеализ
		|	, ПриемТовараОстатки.ДокОснование [ДокОснование $Документ]
		|	, ПриемТовараОстатки.Док [Док $Документ]
		|	, ПриемТовараОстатки.КоличествоОстаток
		|FROM $РегистрОстатки.ПриемТовара(,,
		|		(ДокОснование = $ВидДокумента36.ОжидаемаяПоставка + :ДокОсн),,) AS ПриемТовараОстатки
		|";	
	
	Запрос.УстановитьТекстовыйПараметр("ДокОсн",док1);
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,ИТ);

	//пДок.ДобавитьИндекс("иПоЗаказу","ПоЗаказу");
	Возврат ИТ;
КонецФункции
Функция ПолучитьПоПриему_стар2(док1)
	ИТ=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос=СоздатьОбъект("ODBCRecordSet");

	ТекстЗапроса="SELECT ТоварыВПутиОстатки.Товар [Товар $Справочник.Номенклатура]
		|	, ПриемТовара.LINENO_ НомерСтрокиДок
		|	, NullIf($ПриемТовара.СрокРеализ, '17530101') ПриемТовараСрокРеализ
		|	, $ПриемТовара.Док [ПриемТовараДок $Документ]
		|	, $ПриемТовара.ДокОснование [ПриемТовараДокОснование $Документ]
		|	, $ПриемТовара.Количество Количество
		|FROM $РегистрОстатки.ТоварыВПути(,,
		|		(Док = $ВидДокумента36.ОжидаемаяПоставка + :ДокОсн),
		|		Товар,) AS ТоварыВПутиОстатки
		|	LEFT OUTER JOIN $Регистр.ПриемТовара AS ПриемТовара With (NOLOCK) ON ТоварыВПутиОстатки.Товар = $ПриемТовара.Товар
		|WHERE ($ПриемТовара.ДокОснование = $ВидДокумента36.ОжидаемаяПоставка + :ДокОсн)
		|";	
	
	Запрос.УстановитьТекстовыйПараметр("ДокОсн",док1);
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,ИТ);

	//пДок.ДобавитьИндекс("иПоЗаказу","ПоЗаказу");
	Возврат ИТ;
КонецФункции

Функция ПолучитьПоПриему_Old(док1)
	ИТ=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос=СоздатьОбъект("ODBCRecordSet");

	ТекстЗапроса="SELECT ТоварыВПутиОстатки.Товар [Товар $Справочник.Номенклатура]
		|	, ПриемТовараОстатки.КоличествоОстаток ПриемТовараОстаткиКоличествоОстаток
		|	, NullIf(ПриемТовараОстатки.СрокРеализ, '17530101') СрокРеализ
		|	, ТоварыВПутиОстатки.Док [Док $Документ]
		|	, ПриемТовараОстатки.Док [ПриемТовараОстаткиДок $Документ]
		|FROM $РегистрОстатки.ТоварыВПути(,,
		|		(Док = $ВидДокумента36.ОжидаемаяПоставка + :ДокОсн),
		|		(Товар, Док),) AS ТоварыВПутиОстатки
		|	LEFT OUTER JOIN $РегистрОстатки.ПриемТовара(,,,
		|		(СрокРеализ, Док, Товар),) AS ПриемТовараОстатки ON ТоварыВПутиОстатки.Товар = ПриемТовараОстатки.Товар
		|";	
	
	Запрос.УстановитьТекстовыйПараметр("ДокОсн",док1);
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,ИТ);

	//пДок.ДобавитьИндекс("иПоЗаказу","ПоЗаказу");
	Возврат ИТ;
КонецФункции

Функция ПолучениеПриемныхДокументов(Док)
	пДок=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос=СоздатьОбъект("ODBCRecordSet");

	//ТекстЗапроса="SELECT ПриемТовараОстатки.Товар [Товар $Справочник.Номенклатура]
	//	|	, NullIf(ПриемТовараОстатки.СрокРеализ, '17530101') СрокРеализ
	//	|	, ПриемТовараОстатки.ДокОснование [ДокОснование $Документ]
	//	|	, ПриемТовараОстатки.Док [Док $Документ]
	//	|	, ПриемТовараОстатки.КоличествоОстаток
	//	|FROM $РегистрОстатки.ПриемТовара(,,
	//	|		(ДокОснование = $ВидДокумента36.ОжидаемаяПоставка + :Док),,) AS ПриемТовараОстатки
	//	|";	
	
	ТекстЗапроса="SELECT ПриемТовараОстатки.Док [Док $Документ]
		|FROM $РегистрОстатки.ПриемТовара(,,
		|		(ДокОснование = $ВидДокумента36.ОжидаемаяПоставка + :Док),
		|		Док,) AS ПриемТовараОстатки
		|";	

		
	Запрос.УстановитьТекстовыйПараметр("Док",Док);
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,пДок);

	//пДок.ДобавитьИндекс("иПоЗаказу","ПоЗаказу");
	Возврат пДок;
КонецФункции
Функция ПолучениеОЖП(п_Клиент)
	пДок=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос=СоздатьОбъект("ODBCRecordSet");

	ТекстЗапроса="SELECT ТоварыВПутиОстатки.Док [Док $Документ]
		|	, $ОжидаемаяПоставка.Склад [Склад $Справочник.МестаХранения]
		|	, $ОжидаемаяПоставка.Клиент [Клиент $Справочник.Контрагенты]
		|	, NullIf($ОжидаемаяПоставка.ДатаПрихода, '17530101') ДатаПрихода
		|	, $ОжидаемаяПоставка.СуммаПодтв СуммаПодтв
		|	, $ОжидаемаяПоставка.Агент [Агент $Справочник.Сотрудники]
		|FROM $РегистрОстатки.ТоварыВПути(,,,
		|		Док,) AS ТоварыВПутиОстатки
		|	LEFT OUTER JOIN $Документ.ОжидаемаяПоставка AS ОжидаемаяПоставка ON ТоварыВПутиОстатки.Док = $ВидДокумента36.ОжидаемаяПоставка + ОжидаемаяПоставка.IDDOC
		|WHERE ($ОжидаемаяПоставка.Клиент = :Клиент)
		|";	

		
	Запрос.УстановитьТекстовыйПараметр("Клиент",п_Клиент);
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,пДок);

	//пДок.ДобавитьИндекс("иПоЗаказу","ПоЗаказу");
	Возврат пДок;
КонецФункции


Функция ПолучитьКоличествоТовара(пдок,птовар)//в ож.поставке
Перем кДок;
	Запрос=СоздатьОбъект("ODBCRecordSet");

	ТекстЗапроса="SELECT Sum(ТоварыВПутиОстатки.КоличествоОстаток) СуммаКоличествоОстаток
		|FROM $РегистрОстатки.ТоварыВПути(,,
		|		(Товар = :Товар)
		|		AND (Док = $ВидДокумента36.ОжидаемаяПоставка + :Док),,
		|		Количество) AS ТоварыВПутиОстатки
		|";	
	Запрос.УстановитьТекстовыйПараметр("Товар",пТовар);
	Запрос.УстановитьТекстовыйПараметр("Док",пДок);
	кДок=Запрос.ВыполнитьСкалярный(ТекстЗапроса);

	Возврат кДок;
КонецФункции
Функция ПолучитьТовара_Недопоставка(пдок)//в ож.поставке
Перем кДок;
	кДок=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос=СоздатьОбъект("ODBCRecordSet");

	ТекстЗапроса="SELECT $ТоварыВПути.Товар [Товар $Справочник.Номенклатура]
		|	, Sum($ТоварыВПути.Количество) Количество
		|FROM $Регистр.ТоварыВПути AS ТоварыВПути With (NOLOCK)
		|WHERE ($ТоварыВПути.Док = $ВидДокумента36.ОжидаемаяПоставка + :Док)
		|	AND (ТоварыВПути.LINENO_ = 999)
		|GROUP BY $ТоварыВПути.Товар
		|";	

	Запрос.УстановитьТекстовыйПараметр("Док",пДок);
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,кДок);
	Возврат кДок;
КонецФункции

Функция ПолучитьКоличествоТовараПриемТовара(пдок,птовар,пСрокРеализ)//в прихНаклМоб
Перем кДок;
	Запрос=СоздатьОбъект("ODBCRecordSet");

	ТекстЗапроса="SELECT Sum(ПриемТовараОстатки.КоличествоОстаток) СуммаКоличествоОстаток
		|FROM $РегистрОстатки.ПриемТовара(,,
		|		(Товар = :Товар)
		|		AND (СрокРеализ = :СрокРеализ)
		|		AND (ДокОснование = $ВидДокумента36.ОжидаемаяПоставка + :ДокОснование),,) AS ПриемТовараОстатки
		|";	

	Запрос.УстановитьТекстовыйПараметр("Товар",пТовар);
	Запрос.УстановитьТекстовыйПараметр("Док",пДок);
	Запрос.УстановитьТекстовыйПараметр("СрокРеализ",пСрокРеализ);
	кДок=Запрос.ВыполнитьСкалярный(ТекстЗапроса);
	Возврат кДок;
КонецФункции

Функция Меню()
	сп = СоздатьОбъект( "СписокЗначений" ); 
	сп.ДобавитьЗначение( 1,"Заполнить по основанию" );
	сп.ДобавитьЗначение( 2,"Заполнить по документам Приема"  );
	сп.ДобавитьЗначение( 3,"Дополнить Ожидаемой поставкой");
//	Если сп.ВыбратьЗначение(,,поз,60,1) = 0 Тогда Возврат; КонецЕсли;
	поз=1;
	сп.ВыбратьЗначение(поз,"Выбор данные",1,60,1);
	Возврат поз;

КонецФункции

Процедура ЗаполнитьСтрокуТЧПоПриему(ИТ,ТЗ,Док,пКоличество,пСрокРеализ)
Перем ДокПриема,таблДокПриема;		
		
		НоваяСтрока();
		ДокПриема=СоздатьОбъект("Документ.ПрихНаклМобил");
		ДокПриема=ИТ.Док;
	
		
		
		Если ДокПриема.Выбран()=1 Тогда
			ДокПриема.ВыбратьСтроки();
			Пока ДокПриема.ПолучитьСтроку() = 1 Цикл
				Если (ТЗ.Товар=ДокПриема.Товар)И(пСрокРеализ=ДокПриема.СрокРеализ) Тогда
					ПроблемаКачестваТовара = ДокПриема.ПроблемаКачестваТовара;
					ПроблемаНеСоответствиеСпецификации = ДокПриема.ПроблемаНеСоответствиеСпецификации;
//					ПроблемаНесоответствияМаркировкиEE = ДокПриема.ПредПродажПодг;
//					ПроблемаНесоответствияМаркировкиLT = ДокПриема.ПредПродажПодг;
//					ПроблемаНесоответствияМаркировкиLV = ДокПриема.ПредПродажПодг;
//					ПроблемаНесоответствияМаркировкиEE = ДокПриема.ПроблемаНесоответствияМаркировкиEE;
//					ПроблемаНесоответствияМаркировкиLT = ДокПриема.ПроблемаНесоответствияМаркировкиLT;
//					ПроблемаНесоответствияМаркировкиLV = ДокПриема.ПроблемаНесоответствияМаркировкиLV;
					
//					ПроблемаОтсутствиеШтрихКода = ДокПриема.ПроблемаОтсутствиеШтрихКода;
					ПроблемаДопустСрокаРеализации = ДокПриема.ПроблемаДопустСрокаРеализации;
//					ПредПродажПодг = Константа.ОсновноеТребованиеПредПродПодготовки;
					
					Если ДокПриема.ПредПродажПодг=Перечисление.Булево.Да Тогда
						ПредПродажПодг = Перечисление.Булево.Да;
					Иначе
						ПредПродажПодг = Перечисление.Булево.Нет;
					КонецЕсли;
					
					Если ДокПриема.ПроблемаНесоответствияМаркировкиLV=Перечисление.Булево.Нет Тогда
						ПроблемаНесоответствияМаркировкиEE = Перечисление.Булево.Нет;
						ПроблемаНесоответствияМаркировкиLT = Перечисление.Булево.Нет;
						ПроблемаНесоответствияМаркировкиLV = Перечисление.Булево.Нет;
					Иначе
						ПроблемаНесоответствияМаркировкиEE = Перечисление.Булево.Да;
						ПроблемаНесоответствияМаркировкиLT = Перечисление.Булево.Да;
						ПроблемаНесоответствияМаркировкиLV = Перечисление.Булево.Да;
					КонецЕсли;

					
					Если ДокПриема.ПроблемаОтсутствиеШтрихКода=Перечисление.Булево.Да Тогда
						ПроблемаОтсутствиеШтрихКода = Перечисление.Булево.Да;
					Иначе
						ПроблемаОтсутствиеШтрихКода = Перечисление.Булево.Нет;
					КонецЕсли;
					
					
					//Если (ПроблемаНесоответствияМаркировкиEE=Перечисление.Булево.Да)
					//ИЛИ (ПроблемаНесоответствияМаркировкиLT=Перечисление.Булево.Да)
					//ИЛИ (ПроблемаНесоответствияМаркировкиLV=Перечисление.Булево.Да) Тогда
					//	ПредПродажПодг=Перечисление.Булево.Да;
					//КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	
		
		Товар=ТЗ.Товар;
		ТовКод   = Товар.Код;
		Попытка
			Единица=ТЗ.Единица;
		Исключение
			Единица=глБазоваяЕдиницаИзмерения(Товар);
		КонецПопытки;
		Попытка
			Коэффициент=ТЗ.Коэффициент;
		Исключение
			Коэффициент=1;
		КонецПопытки;
		Количество=пКоличество;

		АкцизнаяСтавка=Товар.АкцизнаяСтавка;
//		ПредПродажПодг=Константа.ОсновноеТребованиеПредПродПодготовки;
//		СтавкаНДС = ТЗ.СтавкаНДС;
//		ЦенаСНДС = ТЗ.ЦенаСНДС;
		
		
//		Цена=ТЗ.Цена;
//		Сумма=пКоличество*Цена;
//		НДС=ТЗ.НДС; 
//		Выч_суммы_накл_сНП(Контекст);
//		Всего = Сумма + НДС;

		
//		ПоСпецЗаказу = ТЗ.Док.ПоСпецЗаказу;
		ПоСчету = ТЗ.ПоСчету;
//		ДокументОснованиеТабл = ДокПриема;
		ДокументОснованиеТабл = ДокПриема.ДокументОснование;
////*****////	
		Количество=пКоличество;
//		СрокРеализ = пСрокРеализ;
//		Если пКоличество=0 Тогда
//			Сумма=0;
//			НДС=0;
//			Возврат;
//		КонецЕсли;		
//		УстанЦеныПрих(Контекст);
////*****////		
		Если пКоличество=0 Тогда
			Сумма=0;
			НДС=0;
			Возврат;
		КонецЕсли;
		Если глЕстьРеквизитМнЧ("ЦенаСНДС", Док.Вид()) = 1 Тогда
			ЦенаСНДС = ТЗ.ЦенаСНДС;
		КонецЕсли;	
		УстанЦеныПрих(Контекст);
		ЦенаСоСкидкой=ТЗ.ЦенаСоСкидкой;		
		Цена=ТЗ.ЦенаПодтв;
		Сумма=пКоличество*Цена;
		НДС=ТЗ.НДС; 
		Выч_суммы_накл_сНП(Контекст);

		Всего = Сумма + НДС;		
		Количество=пКоличество;
		СрокРеализ = пСрокРеализ;
		
		УстановитьПредСрокРеализ();		
		
КонецПроцедуры
Процедура ЗаполнитьСтрокуТЧПоПриемуБезОжПоставки(ИТ,Док,пКоличество,пСрокРеализ)
Перем ДокПриема,таблДокПриема;		
		
		НоваяСтрока();
		ДокПриема=СоздатьОбъект("Документ.ПрихНаклМобил");
		ДокПриема=ИТ.Док;
	
		Если ДокПриема.Выбран()=1 Тогда
			ДокПриема.ВыбратьСтроки();
			Пока ДокПриема.ПолучитьСтроку() = 1 Цикл
				Если (ИТ.Товар=ДокПриема.Товар)И(пСрокРеализ=ДокПриема.СрокРеализ) Тогда
					ПроблемаКачестваТовара = ДокПриема.ПроблемаКачестваТовара;
					ПроблемаНеСоответствиеСпецификации = ДокПриема.ПроблемаНеСоответствиеСпецификации;
					ПроблемаДопустСрокаРеализации = ДокПриема.ПроблемаДопустСрокаРеализации;
					
					Если ДокПриема.ПредПродажПодг=Перечисление.Булево.Да Тогда
						ПредПродажПодг = Перечисление.Булево.Да;
					Иначе
						ПредПродажПодг = Перечисление.Булево.Нет;
					КонецЕсли;
					
					Если ДокПриема.ПроблемаНесоответствияМаркировкиLV=Перечисление.Булево.Нет Тогда
						ПроблемаНесоответствияМаркировкиEE = Перечисление.Булево.Нет;
						ПроблемаНесоответствияМаркировкиLT = Перечисление.Булево.Нет;
						ПроблемаНесоответствияМаркировкиLV = Перечисление.Булево.Нет;
					Иначе
						ПроблемаНесоответствияМаркировкиEE = Перечисление.Булево.Да;
						ПроблемаНесоответствияМаркировкиLT = Перечисление.Булево.Да;
						ПроблемаНесоответствияМаркировкиLV = Перечисление.Булево.Да;
					КонецЕсли;

					
					Если ДокПриема.ПроблемаОтсутствиеШтрихКода=Перечисление.Булево.Да Тогда
						ПроблемаОтсутствиеШтрихКода = Перечисление.Булево.Да;
					Иначе
						ПроблемаОтсутствиеШтрихКода = Перечисление.Булево.Нет;
					КонецЕсли;
	
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		
		Товар=ДокПриема.Товар;
		Сообщить("Добавлен товар ("+Товар.Код +") "+Товар);
		ТовКод   = Товар.Код;
		Попытка
			Единица=ДокПриема.Единица;
		Исключение
			Единица=глБазоваяЕдиницаИзмерения(Товар);
		КонецПопытки;
		Попытка
			Коэффициент=ДокПриема.Коэффициент;
		Исключение
			Коэффициент=1;
		КонецПопытки;
		Количество=пКоличество;

		АкцизнаяСтавка=Товар.АкцизнаяСтавка;
//		ПредПродажПодг=Константа.ОсновноеТребованиеПредПродПодготовки;
//		СтавкаНДС = ТЗ.СтавкаНДС;
//		ЦенаСНДС = ТЗ.ЦенаСНДС;
		УстанЦеныПрих(Контекст);
		
		Цена=ДокПриема.Цена;
		Сумма=пКоличество*Цена;
		НДС=ДокПриема.НДС; 
		Выч_суммы_накл_сНП(Контекст);
		Всего = Сумма + НДС;

		ЦенаСоСкидкой=ДокПриема.ЦенаСоСкидкой;
//		ПоСпецЗаказу = ТЗ.Док.ПоСпецЗаказу;
		ПоСчету = ДокПриема.ПоСчету;
//		ДокументОснованиеТабл = ДокПриема;
		ДокументОснованиеТабл = ДокПриема.ДокументОснование;

		Количество=пКоличество;
		СрокРеализ = пСрокРеализ;
		
КонецПроцедуры

Процедура ЗаполнитьСтрокуТЧ(ТЗ,Док,пКоличество,пСрокРеализ)

//	Док.ВыбратьСтроки();
//	Пока Док.ПолучитьСтроку()=1 Цикл
//		Если ПустоеЗначение(Док.Товар)=1 Тогда
//			Продолжить;
//		КонецЕсли;

		НоваяСтрока();
		Товар=ТЗ.Товар;
		ТовКод   = Товар.Код;
		Попытка
			Единица=ТЗ.Единица;
		Исключение
			Единица=глБазоваяЕдиницаИзмерения(Товар);
		КонецПопытки;
		Попытка
			Коэффициент=ТЗ.Коэффициент;
		Исключение
			Коэффициент=1;
		КонецПопытки;
		Количество=пКоличество;

		АкцизнаяСтавка=Товар.АкцизнаяСтавка;
			ПредПродажПодг=Константа.ОсновноеТребованиеПредПродПодготовки;
			
		Если глЕстьРеквизитШапки("СтавкаНДС", Док.Вид()) = 1 Тогда
	//		СтавкаНДС = ТЗ.СтавкаНДС;
		КонецЕсли;	                                               
		Если глЕстьРеквизитМнЧ("ЦенаСНДС", Док.Вид()) = 1 Тогда
			ЦенаСНДС = ТЗ.ЦенаСНДС;
		КонецЕсли;	
		УстанЦеныПрих(Контекст);
//		Сумма=Цена*Количество*Коэффициент;
//		Выч_суммы_накл_сНП(Контекст);

		
		Цена=ТЗ.ЦенаПодтв;
		Сумма=пКоличество*Цена;
		НДС=ТЗ.НДС; 
		Выч_суммы_накл_сНП(Контекст);

		Всего = Сумма + НДС;
	
		Если глЕстьРеквизитМнЧ( "ЦенаСоСкидкой", Док.Вид() ) = 1 Тогда
			ЦенаСоСкидкой=ТЗ.ЦенаСоСкидкой;
		КонецЕсли;
		Если глЕстьРеквизитМнЧ( "ПоСпецЗаказу", Док.Вид() ) = 1 Тогда
			ПоСпецЗаказу = ТЗ.ПоСпецЗаказу;
		КонецЕсли;
		Если глЕстьРеквизитМнЧ( "ПоСчету", Док.Вид() ) = 1 Тогда
			ПоСчету = ТЗ.ПоСчету;
		КонецЕсли;
		Если глЕстьРеквизитМнЧ( "СрокРеализ", Док.Вид() ) = 1 Тогда
			СрокРеализ = пСрокРеализ;
//			СрокРеализ = Док.СрокРеализ;
		КонецЕсли;
		//для приема
		Если глЕстьРеквизитМнЧ( "ПроблемаКачестваТовара", Док.Вид() ) = 1 Тогда
			ПроблемаКачестваТовара = ТЗ.ПроблемаКачестваТовара;
		КонецЕсли;
		Если глЕстьРеквизитМнЧ( "ПроблемаНеСоответствиеСпецификации", Док.Вид() ) = 1 Тогда
			ПроблемаНеСоответствиеСпецификации = ТЗ.ПроблемаНеСоответствиеСпецификации;
		КонецЕсли;
		Если глЕстьРеквизитМнЧ( "ПроблемаНесоответствияМаркировкиEE", Док.Вид() ) = 1 Тогда
			ПроблемаНесоответствияМаркировкиEE = ТЗ.ПроблемаНесоответствияМаркировкиEE;
		КонецЕсли;
		Если глЕстьРеквизитМнЧ( "ПроблемаНесоответствияМаркировкиLT", Док.Вид() ) = 1 Тогда
			ПроблемаНесоответствияМаркировкиLT = ТЗ.ПроблемаНесоответствияМаркировкиLT;
		КонецЕсли;
		Если глЕстьРеквизитМнЧ( "ПроблемаНесоответствияМаркировкиLV", Док.Вид() ) = 1 Тогда
			ПроблемаНесоответствияМаркировкиLV = ТЗ.ПроблемаНесоответствияМаркировкиLV;
		КонецЕсли;
		Если глЕстьРеквизитМнЧ( "ПроблемаОтсутствиеШтрихКода", Док.Вид() ) = 1 Тогда
			ПроблемаОтсутствиеШтрихКода = ТЗ.ПроблемаОтсутствиеШтрихКода;
		КонецЕсли;
		Если глЕстьРеквизитМнЧ( "ПроблемаДопустСрокаРеализации", Док.Вид() ) = 1 Тогда
			ПроблемаДопустСрокаРеализации = ТЗ.ПроблемаДопустСрокаРеализации;
		КонецЕсли;
		Если глЕстьРеквизитМнЧ( "ДокументОснованиеТабл", Док.Вид() ) = 1 Тогда
			ДокументОснованиеТабл = Док;
		КонецЕсли;
//	КонецЦикла;
		Количество=пКоличество;
		СрокРеализ = пСрокРеализ;
		
		УстановитьПредСрокРеализ();
КонецПроцедуры

Процедура ЗаполнитьТЧ(Док)
Перем пКоличество;
Перем нСтроки;
	тт=СоздатьОбъект("ТаблицаЗначений");
	Док.ВыгрузитьТабличнуюЧасть(тт);
	табИТ=СоздатьОбъект("ИндексированнаяТаблица");
	табИТ.Загрузить(тт);
	табИТ.Свернуть("Товар","Сумма,НДС,Количество");
	
	табИТ.ВыбратьСтроки();
	Пока табИТ.ПолучитьСтроку()=1 Цикл
		Если ПустоеЗначение(табИТ.Товар)=1 Тогда
			Продолжить;
		КонецЕсли;
		пКоличество=ПолучитьКоличествоТовара(Док,табИТ.Товар);
		Если пКоличество=0 Тогда
			Продолжить;
		КонецЕсли;

//		пСрокРеализ=Док.СрокРеализ;
		ЗаполнитьСтрокуТЧ(табИТ,Док,пКоличество,"");
		ОчиститьОкноСообщений();
		Сообщить(Шаблон("Заполнение: [док.НомерСтроки]/[док.КоличествоСтрок()]"));
	КонецЦикла;	
КонецПроцедуры
Процедура ЗаполнитьТЧ_Недопоставка(Док)
Перем пКоличество;
Перем итТоварКоличество;
Перем нСтроки;

	итТоварКоличество=ПолучитьТовара_Недопоставка(Док);
	итТоварКоличество.ДобавитьИндекс("иТовар","*Товар");
//	итТоварКоличество.Показать();
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку()=1 Цикл
		Если ПустоеЗначение(Док.Товар)=1 Тогда
			Продолжить;
		КонецЕсли;
	
		Если итТоварКоличество.НайтиСтроку("иТовар",Док.Товар,,1)<>0 Тогда
			Если итТоварКоличество.Количество=0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьСтрокуТЧ(Док,Док,итТоварКоличество.Количество,"");
			итТоварКоличество.Количество=0;
			ОчиститьОкноСообщений();
			Сообщить(Шаблон("Заполнение: [док.НомерСтроки]/[док.КоличествоСтрок()]"));
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры
Процедура ЗаполнитьТЧ_Поприему(Док)

Перем пКоличество;

	ДокОжПост=ДокументОснование;
	
	ИТ=ПолучитьПоПриему(ДокОжПост);
	ИТ.НоваяКолонка("НайденТовар"); //найден товар в таблице
	ИТ.ДобавитьИндекс("иТоварЗаявка","*Товар");
	ИТ.ДобавитьИндекс("иНайденТовар","*НайденТовар");
//	ИТ.Показать();
		
	Если ДокОжПост.Выбран()=1 Тогда

		тт=СоздатьОбъект("ТаблицаЗначений");
		ДокОжПост.ВыгрузитьТабличнуюЧасть(тт);
		табИТ=СоздатьОбъект("ИндексированнаяТаблица");
		табИТ.Загрузить(тт);
		табИТ.Свернуть("Товар","Сумма,НДС,Количество");
//		табИТ.Показать();
		сзКлюч=СоздатьОбъект("СписокЗначений");
		табИТ.ВыбратьСтроки();
		Пока табИТ.ПолучитьСтроку() = 1 Цикл
			
			//***Проверка на наличие товара в регистре***
			пКоличество=ПолучитьКоличествоТовара(ДокОжПост,табИТ.Товар);
			Если пКоличество=0 Тогда
				Продолжить;
			КонецЕсли;
			
			
			пКоличество=0;
			пСрокРеализ="";	
			НайденТовар=0;
			
	//		сзКлюч=СоздатьОбъект("СписокЗначений");
			сзКлюч.УдалитьВсе();
			сзКлюч.ДобавитьЗначение(табИТ.Товар);
			
//			ИТ.УстановитьФильтр(табИТ.Товар,табИТ.Товар,"иТоварЗаявка");
			ИТ.Подмножество(сзКлюч,1,"иТоварЗаявка");	
//			ИТ.Показать("иТоварЗаявка");
			ИТ.ВыбратьСтроки("иТоварЗаявка");
				Пока ИТ.ПолучитьСтроку("иТоварЗаявка") = 1 Цикл
					Если табИТ.Товар=ИТ.Товар Тогда
						НайденТовар=1;
						ИТ.НайденТовар=1;
						пКоличество=ИТ.КоличествоОстаток;
						пСрокРеализ=ИТ.СрокРеализ;
						ЗаполнитьСтрокуТЧПоПриему(ИТ,табИТ,ДокОжПост,пКоличество,пСрокРеализ);
						ИТ.КоличествоОстаток=ИТ.КоличествоОстаток-пКоличество;
					КонецЕсли;
				КонецЦикла;	
			
			Если НайденТовар=0 Тогда
				ЗаполнитьСтрокуТЧ(ДокОжПост,ДокОжПост,пКоличество,пСрокРеализ);
			КонецЕсли;
			Ит.ВыключитьФильтр("иТоварЗаявка");
		КонецЦикла;	

//добавляем в приход строки отсутствующие в ож. поставке.
		сзКлюч.УдалитьВсе();
		сзКлюч.ДобавитьЗначение(1);
		ИТ.Подмножество(сзКлюч,1,"иНайденТовар");	
		ИТ.УдалитьСтроки("иНайденТовар");
//		Ит.Показать();
		Если Ит.КоличествоСтрок()>0 Тогда
			ИТ.ВыбратьСтроки();
			Пока ИТ.ПолучитьСтроку() = 1 Цикл
					пКоличество=ИТ.КоличествоОстаток;
					пСрокРеализ=ИТ.СрокРеализ;
					ЗаполнитьСтрокуТЧПоПриемуБезОжПоставки(ИТ,ДокОжПост,пКоличество,пСрокРеализ);
					ИТ.КоличествоОстаток=ИТ.КоличествоОстаток-пКоличество;
			КонецЦикла;					
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьТЧ_Поприему3(Док)

Перем пКоличество;

	ДокОжПост=ДокументОснование;
	
	ИТ=ПолучитьПоПриему(ДокОжПост);
	ИТ.НоваяКолонка("НайденТовар"); //найден товар в таблице
	ИТ.ДобавитьИндекс("иТоварЗаявка","*Товар");
	ИТ.ДобавитьИндекс("иНайденТовар","*НайденТовар");
//	ИТ.Показать();
		
	Если ДокОжПост.Выбран()=1 Тогда

		тт=СоздатьОбъект("ТаблицаЗначений");
		ДокОжПост.ВыгрузитьТабличнуюЧасть(тт);
		табИТ=СоздатьОбъект("ИндексированнаяТаблица");
		табИТ.Загрузить(тт);
		табИТ.Свернуть("Товар","Сумма,НДС,Количество");

		ДокОжПост.ВыбратьСтроки();
		Пока ДокОжПост.ПолучитьСтроку() = 1 Цикл
			
			//***Проверка на наличие товара в регистре***
			пКоличество=ПолучитьКоличествоТовара(ДокОжПост,ДокОжПост.Товар);
			Если пКоличество=0 Тогда
				Продолжить;
			КонецЕсли;
			
			
			пКоличество=0;
			пСрокРеализ="";	
			НайденТовар=0;
			
			сзКлюч=СоздатьОбъект("СписокЗначений");
			сзКлюч.ДобавитьЗначение(ДокОжПост.Товар);
			
//			ИТ.УстановитьФильтр(ДокОжПост.Товар,ДокОжПост.Товар,"иТоварЗаявка");
			ИТ.Подмножество(сзКлюч,1,"иТоварЗаявка");	
//			ИТ.Показать("иТоварЗаявка");
			ИТ.ВыбратьСтроки("иТоварЗаявка");
				Пока ИТ.ПолучитьСтроку("иТоварЗаявка") = 1 Цикл
					Если ДокОжПост.Товар=ИТ.Товар Тогда
						НайденТовар=1;
						ИТ.НайденТовар=1;
						пКоличество=ИТ.КоличествоОстаток;
						пСрокРеализ=ИТ.СрокРеализ;
						ЗаполнитьСтрокуТЧПоПриему(ИТ,ДокОжПост,ДокОжПост,пКоличество,пСрокРеализ);
						ИТ.КоличествоОстаток=ИТ.КоличествоОстаток-пКоличество;
					КонецЕсли;
				КонецЦикла;	
			
			Если НайденТовар=0 Тогда
				ЗаполнитьСтрокуТЧ(ДокОжПост,ДокОжПост,пКоличество,пСрокРеализ);
			КонецЕсли;
			Ит.ВыключитьФильтр("иТоварЗаявка");
		КонецЦикла;	

//добавляем в приход строки отсутствующие в ож. поставке.
		сзКлюч.УдалитьВсе();
		сзКлюч.ДобавитьЗначение(1);
		ИТ.Подмножество(сзКлюч,1,"иНайденТовар");	
		ИТ.УдалитьСтроки("иНайденТовар");
//		Ит.Показать();
		Если Ит.КоличествоСтрок()>0 Тогда
			ИТ.ВыбратьСтроки();
			Пока ИТ.ПолучитьСтроку() = 1 Цикл
					пКоличество=ИТ.КоличествоОстаток;
					пСрокРеализ=ИТ.СрокРеализ;
					ЗаполнитьСтрокуТЧПоПриемуБезОжПоставки(ИТ,ДокОжПост,пКоличество,пСрокРеализ);
					ИТ.КоличествоОстаток=ИТ.КоличествоОстаток-пКоличество;
			КонецЦикла;					
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

//Процедура ЗаполнитьТЧ_Поприему_пред2(Док)
//Перем пКоличество;
//	ИТ=ПолучитьПоПриему(ДокументОснование);
//	ИТ.Показать();
//
//	ИТ.ВыбратьСтроки();
//	Пока ИТ.ПолучитьСтроку() = 1 Цикл
//
////		Если ПустоеЗначение(ИТ.ПриемТовараДок)=0 Тогда
//			ДокПриемТовара=ИТ.ПриемТовараДок;
//		//	НомерСтрокиИТ=ИТ.НомерСтроки;
////		Иначе
////			ДокОжПост=ИТ.ПриемТовараДокОснование;
//			ДокОжПост=ДокументОснование;
////		КонецЕсли;
//		
//		Если ДокПриемТовара.Выбран()=1 Тогда
//		
//			ДокПриемТовара.ВыбратьСтроки();
//			ДокПриемТовара.ПолучитьСтрокуПоНомеру(ИТ.НомерСтрокиДок);
//			
//			пКоличество=ИТ.Количество;
//			пСрокРеализ=ИТ.ПриемТовараСрокРеализ;
//			
//			НомерСтрокиОжПост=0;
//
//
//			Если ДокОжПост.Выбран()=1 Тогда
//				ДокОжПост.ВыбратьСтроки();
//				Пока ДокОжПост.ПолучитьСтроку() = 1 Цикл
//					Если ДокОжПост.Товар=ИТ.Товар Тогда
//						НомерСтрокиОжПост=ДокОжПост.номерСтроки;
//						Прервать;
//					КонецЕсли;
//				КонецЦикла;	
//				ДокОжПост.ПолучитьСтрокуПоНомеру(НомерСтрокиОжПост);
//
//				ЗаполнитьСтрокуТЧ(ДокОжПост,ДокОжПост,пКоличество,пСрокРеализ);
//			КонецЕсли;
//			
//					
//		КонецЕсли;
//
//	КонецЦикла;
//	
//	//	Док.ВыбратьСтроки();
//	//	Пока Док.ПолучитьСтроку()=1 Цикл
//	//		Если ПустоеЗначение(Док.Товар)=1 Тогда
//	//			Продолжить;
//	//		КонецЕсли;
//	//		
//	////		Если Док.Количество=0 Тогда
//	////			Продолжить;
//	////		КонецЕсли;
//	//		
//	//		ЗаполнитьСтрокуТЧ(Док,пКоличество,пСрокРеализ);			
//	//	КонецЦикла;	
//КонецПроцедуры

//Процедура ЗаполнитьТЧ_Поприему_Пред(Док)
//Перем пКоличество;
//	Док.ВыбратьСтроки();
//	Пока Док.ПолучитьСтроку()=1 Цикл
//		Если ПустоеЗначение(Док.Товар)=1 Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Если Док.Количество=0 Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		пКоличество=Док.Количество;
//		пСрокРеализ=Док.СрокРеализ;
//		ЗаполнитьСтрокуТЧ(Док,Док,пКоличество,пСрокРеализ);			
//	КонецЦикла;	
//КонецПроцедуры

Процедура ГруппироватьТЧ()
Перем тт,табИТ;
	тт=СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(тт);
	табИТ=СоздатьОбъект("ИндексированнаяТаблица");
	табИТ.Загрузить(тт);
//	табИТ.ВыбратьСтроки();
//	табИТ.Группировать("Товар : *Товар; СрокРеализ : *СрокРеализ","Сумма,НДС,Количество");
	табИТ.Свернуть("Товар,СрокРеализ","Сумма,НДС,Количество");

	табИТ.Выгрузить(тт);
	ЗагрузитьТабличнуюЧасть(тт);
КонецПроцедуры

Процедура ОбновитьТЧ()
	
	Док=ДокументОснование;
	УдалитьСтроки();
	ЗаполнитьТЧ(Док);

	ГруппироватьТЧ();
	
	
КонецПроцедуры

//======================================================================
Функция ПроверкаДублированиеОЖПвтаблице(п_ДокОЖП)
	л_ТЗОЖД=СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(л_ТЗОЖД);
	л_ТЗОЖД.Свернуть("ДокументОснованиеТабл",);
	л_ТЗОЖД.ВыбратьСтроки();
	Пока л_ТЗОЖД.ПолучитьСтроку() = 1 Цикл
		Если л_ТЗОЖД.ДокументОснованиеТабл=п_ДокОЖП Тогда
			Возврат 1;
		КонецЕсли;
	КонецЦикла;		
	Возврат 0;
КонецФункции // ПроверкаДублированиеОЖПв таблице()

Процедура кнОбновитьТЧ()
Перем поз;
Перем ИТ,кол,л_ИТожп;	
	Если ДокументОснование.Вид()<>"ОжидаемаяПоставка" Тогда
		Сообщить("Использовать только для ожидаемой поставки");
		Возврат;
	КонецЕсли;
	
	Если ПризнакНакладной=Перечисление.ПризнПрихНакл.Недопоставка Тогда
		Док=ДокументОснование;
		УдалитьСтроки();
		ЗаполнитьТЧ_Недопоставка(Док);
		ГруппироватьТЧ();
		Возврат;
	КонецЕсли;
	
	
//	ИТ=ПроверкаПриема(ДокументОснование);
	ИТ=ПолучениеПриемныхДокументов(ДокументОснование);
//	ит.Показать();
	кол=ИТ.КоличествоСтрок();

	л_ИТожп=ПолучениеОЖП(Клиент);
	л_колИТожп=л_ИТожп.КоличествоСтрок();
	
	Если (кол>0)или (л_колИТожп>1)  Тогда
		поз=Меню();
	Иначе
		поз=1;
	КонецЕсли;
	
	Если поз=2 Тогда
//		ИТ=ПроверкаПриема(ДокументОснование);
		Сообщить("Количество док. приема Товара: "+кол);
		
		ИТ.ВыбратьСтроки();
		Если ИТ.ПолучитьСтроку() = 1 тогда

			Час=0;
			Минут=0;
			КтоПринял=ИТ.Док.Комплектовщик.Сотрудник;
			ИТ.Док.ПолучитьВремя(Час,Минут,);
//			ФактВремяДоставки=Строка(Час)+":"+Строка(Минут);
//			ФактВремяПриездаСклад1=ИТ.Док.ФактВремяДоставки;
			ФактВремяНачалаРазгрузкиСклад1=ИТ.Док.ФактВремяНачалаРазгрузкиСклад1;
			ФактВремяНачалаРазгрузкиСклад2=ИТ.Док.ФактВремяНачалаРазгрузкиСклад2;
			ФактВремяПриездаСклад1=ИТ.Док.ФактВремяПриездаСклад1;
			ФактВремяПриездаСклад2=ИТ.Док.ФактВремяПриездаСклад2;
			ФактВремяОкончанияРазгрузкиСклад1=ИТ.Док.ФактВремяОкончанияРазгрузкиСклад1;
			ФактВремяОкончанияРазгрузкиСклад2=ИТ.Док.ФактВремяОкончанияРазгрузкиСклад2;
			ФактВремяДоставки=ИТ.Док.ФактВремяДоставки;
//			ДатаПриходаТовара=ИТ.Док.ДатаДок;
			ДатаПриходаТовара=ИТ.Док.ДатаПриходаТовара;
			
			л_НачПриемаСек=глПолучитьВремяСек(ИТ.Док.ВремяНачалаПриема);
			л_КонПриемаСек=глПолучитьВремяСек(ИТ.Док.ПолучитьВремя(,,));
			л_Разница=л_КонПриемаСек-л_НачПриемаСек;
			
			ФактВремяПриемаСек=л_Разница;
			ФактВремяПриема=глПолучитьВремя(ФактВремяПриемаСек,0);
		КонецЕсли;;
		
		
		УдалитьСтроки();
		ЗаполнитьТЧ_Поприему(Док);
		ГруппироватьТЧ();
	ИначеЕсли поз=3 Тогда //обрабатываем ож. поставки.
		л_стр=1;
		Если л_ИТожп.ВыбратьСтроку(л_стр,"Выбирите ожидаемую поставку для добавления",)=1 Тогда
			л_ДокОЖП=л_ИТожп.ПолучитьЗначение(л_стр,"Док");
			Если ПроверкаДублированиеОЖПвтаблице(л_ДокОЖП)=1 Тогда
				Сообщить("Выбор отменен. Дублирование документа");
				Возврат;
			КонецЕсли;
			ЗаполнитьТЧ(л_ДокОЖП);
		КонецЕсли;
	Иначе
		ОбновитьТЧ()
	КонецЕсли;

КонецПроцедуры
//}***ПриемТовара***//

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Функция СкидкаКлиенту(Конт,пТовар,Контра,пКатегорияЦены,Цена,Групповой = 0) Экспорт
	Если ПустоеЗначение(Контра) = 1 Тогда
		Возврат "";
	КонецЕсли;
	
	ДатаЦены = Конт.ДатаДок;
	
	// акционная скидка клиента, указанного в документе
	СпрАкцСкидкаКлиент = СоздатьОбъект("Справочник.АкционныеСкидкиКлиентов");
	СпрАкцСкидкаКлиент.ИспользоватьВладельца(Контра);
	
	// PR 03.12.07
	Найден=СпрАкцСкидкаКлиент.ВыбратьЭлементыПоРеквизиту("Товар",пТовар,1,0);
	Найден=0;
	Пока СпрАкцСкидкаКлиент.ПолучитьЭлемент() = 1 Цикл
		Если СпрАкцСкидкаКлиент.ПометкаУдаления() = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		контДата = ДатаЦены;
		Если ( контДата >= СпрАкцСкидкаКлиент.ДатаНачала ) и ( контДата <= СпрАкцСкидкаКлиент.ДатаКонца ) Тогда
			Найден=1; //если найден товар удовлетворяющий условию, то по группам искать не нужно
		КонецЕсли;
	КонецЦикла;
	// PR 03.12.07
	
	Если (Найден = 0) Тогда
		Род=пТовар.Родитель;
		Пока (СпрАкцСкидкаКлиент.ВыбратьЭлементыПоРеквизиту("Товар",Род,1,0)=0) И (Род.Уровень()>1) Цикл 
			Род=Род.Родитель;
		КонецЦикла;
	Иначе
		СпрАкцСкидкаКлиент.ВыбратьЭлементыПоРеквизиту("Товар",пТовар,1,0); //еще раз выберем элементы
	КонецЕсли;
	
	Пока СпрАкцСкидкаКлиент.ПолучитьЭлемент() = 1 Цикл
		Если СпрАкцСкидкаКлиент.ПометкаУдаления() = 1 Тогда
			Продолжить;
		КонецЕсли;
		// сем \\
		контДата = ДатаЦены;
		Если ( контДата >= СпрАкцСкидкаКлиент.ДатаНачала ) и ( контДата <= СпрАкцСкидкаКлиент.ДатаКонца ) Тогда
			Цена = Цена * ( 100 - СпрАкцСкидкаКлиент.ПроцентСкидки ) / 100;
			Если Групповой = 0 Тогда
				Возврат Перечисление.ВидСкидки.АкционныйКлиент;
			Иначе
				Возврат Перечисление.ВидСкидки.АкционнаяГрупп;
			КонецЕсли;
		КонецЕсли;
		// сем //
	КонецЦикла;
	
	// затем обычная скидка клиента, указанного в документе, на определенные товары
	Есть = 0;
	КатегорияЦены = ?(глЕстьРеквизитШапки("КатегорияЦены", Конт.Вид()) = 1,пКатегорияЦены,Константа.ОсновнаяКатегорияЦены);
	Процент = семПроцентСкидкиКлиентуНаТовар(Контра,пТовар,пКатегорияЦены,ДатаЦены,Есть);
	Если Есть = 1 Тогда
		Цена = Цена*(100 - Процент)/100;
		Если Групповой = 0 Тогда
			Возврат Перечисление.ВидСкидки.КлиентТовар;
		Иначе
			Возврат Перечисление.ВидСкидки.ГрупповойКлиентТовар;
		КонецЕсли;
	КонецЕсли;
	
	// затем скидка клиенту вне зависимости от товара (из справочника "Контрагенты")
	Контра.ИспользоватьДату("");
	Если Контра.КлиентСкидка.Получить(ДатаЦены) > 0 Тогда
		Цена = Цена*(100 - Контра.КлиентСкидка.Получить(ДатаЦены))/100;
		Если Групповой = 0 Тогда
			Возврат Перечисление.ВидСкидки.Клиент;
		Иначе
			Возврат Перечисление.ВидСкидки.ГрупповойКлиент;
		КонецЕсли;
	КонецЕсли;
	
	// и апофеоз поиска скидок клиенту - это скидка для так называемого КлГруппа
	Если (Групповой = 0) и (Контра <> Контра.КлГруппа) Тогда
		Возврат СкидкаКлиенту(Конт,пТовар,Контра.КлГруппа,пКатегорияЦены,Цена,1);
	КонецЕсли;
	
	// похоже, что клиент не получит никакой скидки...
	Возврат "";
КонецФункции

Функция ЦенаСоСкидкой(Конт,пТовар,пКлиент,пКатегорияЦены,Цена, Режим = 0) Экспорт
	// получим дату для расчета цены
	ДатаЦены = Конт.ДатаДок;
	
	//первым делом проверям спец. цену клиента, т.к. это договорные цены на конретную дату
	Если ПустоеЗначение(пКлиент)=0 Тогда
		ВидСкидки=СпецЦенаКлиенту(Конт,пКлиент,Цена,ДатаЦены,0);
		Если ПустоеЗначение(ВидСкидки)=0 Тогда
			Возврат ВидСкидки;
		КонецЕсли;
	КонецЕсли;	
	
	// проверяем, можно ли давать скидку на выбранный товар
	СпрЦен=СоздатьОбъект("Справочник.Цены");
	СпрЦен.ИспользоватьВладельца(пТовар);
	Если СпрЦен.НайтиПоРеквизиту("КатегорияЦены",пКатегорияЦены,0) = 1 Тогда
		Если СпрЦен.ЗапретСкидки=1 Тогда
			Сообщить("Для товара <"+пТовар.Код+" "+пТовар+"> по категории цены <"+пКатегорияЦены+"> установлен запрет на скидку!","!!!");
			Возврат ""; //Для конкретной категории цены товара установлен Запрет скидки
		КонецЕсли;
	КонецЕсли;
	
	// затем акционная скидка товара по категории, указанной в документе
	Если глЕстьРеквизитШапки("КатегорияЦены", Конт.Вид()) = 1 Тогда
		контДата = Конт.ДатаДок;
		
		СкидкаПр=ПолучитьАкцСкидкуТовара(пТовар,пКатегорияЦены,контДата);
		Если СкидкаПр>0 Тогда
			Цена = Цена*(100 - СкидкаПр)/100;
			Возврат Перечисление.ВидСкидки.АкционныйТовар;
		КонецЕсли;
	КонецЕсли;
	//
	//// затем скидки клиенту, указанному в документе
	Возврат СкидкаКлиенту(Конт,пТовар,пКлиент,пКатегорияЦены,Цена);
КонецФункции


Процедура АктНеДопоставкиПроект() Далее

//======================================================================
Функция БанковскиеРеквизиты()
	Возврат Шаблон("Банк: [Клиент.Банк]  Расч.счет: [Клиент.Р_Счет1]");
КонецФункции // БанковскиеРеквизиты

//----------------------
Процедура семПечатьПлатежки()
	кСуммаВклНДС = ?(Константа.СуммаВключаетНДС.Получить(ДатаДок)=Перечисление.Булево.Да,1,0);
	пНомерДок = НомерДок+"   ( "+ДатаИнвойса+" )";
	пСумма = СокрЛ(Формат( ?(кСуммаВклНДС=1, Итог("Сумма"), Итог("Сумма")+Итог("НДС")),"Ч14.2" ))  + " " + Валюта;
	пПоставщик = Пререкодировка(Клиент.ПолноеНаименование,спКодов);
	пБанк = Пререкодировка(Клиент.Банк.Наименование,спКодов);
	пКодБанка = Клиент.Банк.Код_Банка;
	пСчет = Шаблон( "[Клиент.Р_Счет1]    [Клиент.Р_Счет2]" );
	пДатаОплаты = ДатаОплаты;
	Если ПустоеЗначение(Клиент.ВидДопУсловийОплатыПоставщика)=0 Тогда
		пДопУсловияОплаты = Пререкодировка(Метаданные.Перечисление(Клиент.ВидДопУсловийОплатыПоставщика.Вид()).Значение(Клиент.ВидДопУсловийОплатыПоставщика.Идентификатор()).Комментарий,спКодов);
	Иначе
		пДопУсловияОплаты = "";
	КонецЕсли;

	Если ПустоеЗначение(Клиент.УсловияОплатыПоставщикаНестандартные)=0 Тогда
		пУсловияОплатыНестандарт = Пререкодировка(Клиент.УсловияОплатыПоставщикаНестандартные,спКодов);
	Иначе
		пУсловияОплатыНестандарт = "";
	КонецЕсли;
	
	           
	пПретензии="";
                  
	//Находим проблемные претензии
	сзПретензии=СоздатьОбъект("СписокЗначений");
	Док = СоздатьОбъект("Документ");
	Док.ВыбратьПодчиненныеДокументы(ДатаДок,,ТекущийДокумент());
	Пока Док.ПолучитьДокумент() = 1 Цикл
		Если Док.Проведен()=0 Тогда
			Продолжить;
		КонецЕсли;

		Если Док.Вид()="ПретензияПолученная" Тогда
			Док.ВыбратьСтроки();
			Пока Док.ПолучитьСтроку()=1 Цикл
				Если Док.СутьПретензии.ПроблемаПриПриходе=1 Тогда
					Если сзПретензии.НайтиЗначение((Док.СутьПретензии))=0 Тогда
						сзПретензии.ДобавитьЗначение(Док.СутьПретензии);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	    
	Если сзПретензии.РазмерСписка()>0 Тогда
		прет= сзПретензии.ВСтрокуСРазделителями();
		пПретензии = Пререкодировка(СтрЗаменить(прет,"""",""));
	КонецЕсли;
	
	пДатаПрихода = ДатаДок;
	пГлубина = Глубина;
	ВыбратьСтроки(); 
	таблГрупп = СоздатьОбъект( "ТаблицаЗначений" );
	таблГрупп.НоваяКолонка("Группа");
	Пока ПолучитьСтроку() = 1 Цикл
		пГруппа = Товар.Родитель;
		Пока 1=1 Цикл
			Если ПустоеЗначение(пГруппа.Родитель) = 1 Тогда Прервать; КонецЕсли;
			пГруппа = пГруппа.Родитель;
		КонецЦикла;
		таблГрупп.НоваяСтрока();
		таблГрупп.Группа = пГруппа;
	КонецЦикла; 
	таблГрупп.Свернуть("Группа","");
	таблГрупп.Сортировать("Группа");
	таблГрупп.ВыбратьСтроки(); пТовар = "";
	Пока таблГрупп.ПолучитьСтроку() = 1 Цикл
		пТовар = пТовар + таблГрупп.Группа;
		пТовар = пТовар + ?(таблГрупп.НомерСтроки = таблГрупп.КоличествоСтрок(),"",",")
	КонецЦикла;
	пТовар = Пререкодировка(пТовар,спКодов);
	пДата = РабочаяДата();
	пАвтор = Пререкодировка(Автор,спКодов);
	пАгент = Пререкодировка(Агент,спКодов);
	таб = СоздатьОбъект( "Таблица" );
	таб.ИсходнаяТаблица( "Оплата" );
	таб.ВывестиСекцию( "Основная" );		
	таб.ТолькоПросмотр( 1 );
	таб.Показать( "Maks. uzd." ); 
	РаспечатанаПлатежка = 1;
	Записать();
КонецПроцедуры

Функция ФорматВывода( парам )
	Если парам = "СпецЗаказ" Тогда
		Если Товар.Выбран() = 0 Тогда Возврат 0; КонецЕсли;
		рег = СоздатьОбъект( "Регистр.СпецЗаказы" );
		Возврат рег.СводныйОстаток( Товар,, "Заказано" );
	ИначеЕсли парам = "НомерЗаявки" Тогда
		Возврат ?(ПоСчету.Выбран() = 1,ПоСчету.НомерДок,"");
	ИначеЕсли парам = "ДатаОплаты" Тогда
		Возврат Шаблон( "[семПолучитьГлубинуКредитаКлиента( Клиент, Перечисление.ВидыКлиентов.Поставщик, ДатаДок )]" );
	КонецЕсли;
КонецФункции

Процедура семПечатьНаценки()
	
	спКлиентыФилиалы=СоздатьОбъект("СписокЗначений");
	спрФирмы= СоздатьОбъект("Справочник.Фирмы");
	спрФирмы.ВыбратьЭлементы();
	Пока спрФирмы.ПолучитьЭлемент() = 1 Цикл
		Если спрФирмы.ПометкаУдаления()=1 Тогда
			Продолжить;
		КонецЕсли;
		Если спрФирмы.ТекущийЭлемент()<>глФирма Тогда
			спКлиентыФилиалы.ДобавитьЗначение(спрФирмы.Клиент);		
		КонецЕсли;
	КонецЦикла;
	
	пКлиентФилиал1=спКлиентыФилиалы.ПолучитьЗначение(1);
	Если спКлиентыФилиалы.РазмерСписка()>1 Тогда
		пКлиентФилиал2=спКлиентыФилиалы.ПолучитьЗначение(2);
	КонецЕсли;
	
	таб=СоздатьОбъект( "Таблица" );
	таб.ИсходнаяТаблица( "Наценка" );
	таб.ВывестиСекцию( "Заголовок" );
	таб.ВывестиСекцию( "Шапка" );
	таб.Опции(0,0,таб.ВысотаТаблицы(),0);

	с=0;
	рег = СоздатьОбъект( "Регистр.ПартииТоваров" );
	рег.ВыбратьДвиженияДокумента( ТекущийДокумент() );
	Пока рег.ПолучитьДвижение() = 1 Цикл
		с=с+1;
		Состояние("Выводится: "+с+"/"+КоличествоСтрок());
		пНом = рег.НомерСтроки();
		ПолучитьСтрокуПоНомеру(пНом);
		пКод = рег.Товар.Код;
		пТовар = рег.Товар;
		пСебест = рег.Стоимость / рег.ОстатокТовара;  
		ПромВал=Рубли;
		пЦенаОпт = ЦенаТовараПоКатегорииДляТовара( пТовар, Константа.ОсновнаяКатегорияЦены ,ПромВал,,ДатаДок);
		пЦенаОпт = Пересчет( пЦенаОпт, ПромВал, ДатаДок, Рубли, ДатаДок);
		пНаценкаОпт =  ?( пЦенаОпт = 0, "", Формат( ?(пСебест=0,пЦенаОпт/0.01,(пЦенаОпт - пСебест)/пСебест) * 100, "Ч12.2, " ) + " %" );
		СпрЦеныОпт=семПолучитьЦенуТовара( пТовар, Константа.ОсновнаяКатегорияЦены, ДатаДок);
		пЗапретСкидкиОпт = ?(СпрЦеныОпт.ЗапретСкидки=1,"X","");

		//ЭкспортнаяКатегорияЦены = семПолучитьКатегориюЦеныПоНаим( "Экспортная" );
		//пЦенаЭксп = ЦенаТовараПоКатегорииДляТовара( пТовар, ЭкспортнаяКатегорияЦены,ПромВал);
		//пЦенаЭксп = Пересчет( пЦенаЭксп, ПромВал, ДатаДок, Рубли, ДатаДок);
		//пНаценкаЭксп =  ?( пЦенаЭксп = 0, "", Формат( ?(пСебест=0,пЦенаЭксп/0.01,(пЦенаЭксп - пСебест)/пСебест) * 100, "Ч12.2, " ) + " %" );
		//СпрЦеныЭксп=семПолучитьЦенуТовара( пТовар, ЭкспортнаяКатегорияЦены, ДатаДок);
		//пЗапретСкидкиЭксп = ?(СпрЦеныЭксп.ЗапретСкидки=1,"X","");
		
		пЦенаРозн = ЦенаТовараПоКатегорииДляТовара( пТовар, Константа.РозничнаяКатегорияЦены,ПромВал,,ДатаДок );
		пЦенаРозн = Пересчет( пЦенаРозн, ПромВал, ДатаДок, Рубли, ДатаДок);
		пНаценкаРозн =  ?( пЦенаРозн = 0, "", Формат(?(пСебест=0,пЦенаРозн/0.01,(пЦенаРозн - пСебест)/пСебест) * 100, "Ч12.2, " ) + " %" );
		пЦенаРознКОпт =  ?( пЦенаОпт = 0, "", Формат(?(пЦенаОпт=0,пЦенаРозн/0.01,(пЦенаРозн - пЦенаОпт)/пЦенаОпт) * 100, "Ч12.2, " ) + " %" );
		СпрЦеныРозн=семПолучитьЦенуТовара( пТовар, Константа.РозничнаяКатегорияЦены, ДатаДок);
		пЗапретСкидкиРозн = ?(СпрЦеныРозн.ЗапретСкидки=1,"X","");

		РозКатегорияЦеныРевал = семПолучитьКатегориюЦеныПоНаим( "Розничная2" );
		пЦенаРозн2 = ЦенаТовараПоКатегорииДляТовара( пТовар, РозКатегорияЦеныРевал, ПромВал,,ДатаДок);
		пЦенаРозн2 = Пересчет( пЦенаРозн2, ПромВал, ДатаДок, Рубли, ДатаДок);
		СпрЦеныРозн2=семПолучитьЦенуТовара( пТовар, РозКатегорияЦеныРевал, ДатаДок);
		пЗапретСкидкиРозн2 = ?(СпрЦеныРозн2.ЗапретСкидки=1,"X","");

		пНаценкаРозн2 =  ?( пЦенаРозн2 = 0, "", Формат(?(пСебест=0,пЦенаРозн2/0.01,(пЦенаРозн2 - пСебест)/пСебест) * 100, "Ч12.2, " ) + " %" );

		пЦенаCC = ЦенаТовараПоКатегорииДляТовара( пТовар, Константа.CashCarryКатегорияЦены, ПромВал ,,ДатаДок);
		пЦенаCC = Пересчет( пЦенаCC, ПромВал, ДатаДок, Рубли, ДатаДок);
		пЦенаCCКОпт =  ?( пЦенаОпт = 0, "", Формат(?(пЦенаОпт=0,пЦенаCC/0.01,(пЦенаCC - пЦенаОпт)/пЦенаОпт) * 100, "Ч12.2, " ) + " %" );
		пНаценкаCC =  ?( пЦенаCC = 0, "", Формат(?(пСебест=0,пЦенаCC/0.01,(пЦенаCC - пСебест)/пСебест) * 100, "Ч12.2, " ) + " %" );
		//СпрЦеныCC=семПолучитьЦенуТовара( пТовар, Константа.CashCarryКатегорияЦены, ДатаДок);
		//пЗапретСкидкиСС = ?(СпрЦеныCC.ЗапретСкидки=1,"X","");
		
		Если ПустоеЗначение(пКлиентФилиал1)=0 Тогда
			пЦенаФилиал1=ЦенаТовараПоКатегорииДляТовара( пТовар, пКлиентФилиал1.КатегорияЦены,Рубли,,ДатаДок);
			ЦенаСоСкидкой(Контекст,пТовар,пКлиентФилиал1,пКлиентФилиал1.КатегорияЦены,пЦенаФилиал1);
			пЦенаФилиал1 = Пересчет( пЦенаФилиал1, Рубли, ДатаДок, Рубли, ДатаДок);
			пНаценкаФилиал1 =  ?( пЦенаФилиал1 = 0, "", Формат(?(пСебест=0,пЦенаФилиал1/0.01,(пЦенаФилиал1 - пСебест)/пСебест) * 100, "Ч12.2, " ) + " %" );
		КонецЕсли;		

		Если ПустоеЗначение(пКлиентФилиал2)=0 Тогда
			пЦенаФилиал2=ЦенаТовараПоКатегорииДляТовара( пТовар, пКлиентФилиал2.КатегорияЦены,Рубли,,ДатаДок);
			ЦенаСоСкидкой(Контекст,пТовар,пКлиентФилиал2,пКлиентФилиал2.КатегорияЦены,пЦенаФилиал2);
			пЦенаФилиал2 = Пересчет( пЦенаФилиал2,  Рубли, ДатаДок, Рубли, ДатаДок);
			пНаценкаФилиал2 =  ?( пЦенаФилиал2 = 0, "", Формат(?(пСебест=0,пЦенаФилиал2/0.01,(пЦенаФилиал2 - пСебест)/пСебест) * 100, "Ч12.2, " ) + " %" );
		КонецЕсли;
		
		таб.ВывестиСекцию( "Строка" );
	КонецЦикла;
	
	таб.ПараметрыСтраницы(2,100,,,,,,,,1);
	таб.ТолькоПросмотр(1);
	таб.Показать( "Наценка "+НомерДок );
КонецПроцедуры

Функция ВычСебСтоБлюда(Док)
	
	ТекстЗапроса="SELECT ПартииТоваровОстатки.ОстатокТовараОстаток Остаток
	|					, ПартииТоваровОстатки.СтоимостьОстаток Стоим
	|					, ПартииТоваровОстатки.ПродСтоимостьОстаток ПродСтоим
	|					, ПартииТоваровОстатки.НДСОстаток НДС
	|			  FROM $РегистрОстатки.ПартииТоваров("+?(Выбран()=0,"",":Позиция~")+",,
	|												(Фирма = :ВыбФирма)
	|												AND (Товар = :ВыбТовар),(Товар),) AS ПартииТоваровОстатки
	|";
	
	Запрос=СоздатьОбъект("ODBCRecordSet");
	
	ТоварШапки = Док.ТоварШапки;
	//Рег1=СоздатьОбъект("Регистр.ОстаткиТоваров");
	//Рег2=СоздатьОбъект("Регистр.ПартииТоваров");
	//Если ДатаДок<ПолучитьДатуТА() Тогда
	//	Рег1.ВременныйРасчет();
	//	Рег2.ВременныйРасчет();        
	//	
	//	ТоварЛист=СоздатьОбъект("СписокЗначений");
	//	Док.ВыгрузитьТабличнуюЧасть(ТоварЛист,"Ингредиент");
	//	Рег1.УстановитьЗначениеФильтра("Товар",ТоварЛист,2);
	//	Рег2.УстановитьЗначениеФильтра("Товар",ТоварЛист,2);
	//	РассчитатьРегистрыПо(ТекущийДокумент());
	//КонецЕсли;
	
	СебБлюда=0;
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку()=1 Цикл

		
		Если Док.Ингредиент.ВидТовара=Перечисление.ВидыТоваров.Блюдо  Тогда
			ЕстьКалькуляцияБ=0;
			ДокумКальк=ПолучитьКалькуляцию(Док.ДатаДок,Док.Ингредиент,Док.ТекущийДокумент());
			Если ДокумКальк<>0 Тогда
			Иначе
				Сообщить(Шаблон("Для блюда [Док.Ингредиент.Код] [Док.Ингредиент] не найден документ Калькуляции!"));
				Продолжить;
			КонецЕсли;
			ЦенаК = ВычСебСтоБлюда(ДокумКальк)/ДокумКальк.КоличествоКалькуляции;
		Иначе

			Остаток=0;
			Стоим=0;
			НДССтоим=0;
			
			
			//сначала ищем не было ли в приходе ингредиента 
			Если итТаблПрихода.НайтиСтроку("иТовар",Док.Ингредиент,,1)>0 Тогда
				Остаток	=итТаблПрихода.ОстатокТовара;
				Стоим	=итТаблПрихода.Стоимость;
				НДСстоим=0;
			Иначе
				Запрос.УстановитьТекстовыйПараметр("ВыбФирма",Фирма);
				Запрос.УстановитьТекстовыйПараметр("ВыбТовар",Док.Ингредиент);
				Запрос.УстановитьТекстовыйПараметр("Позиция",Позиция);
				табл=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
				Если табл.КоличествоСтрок()=1 Тогда
					табл.ПолучитьСтрокуПоНомеру(1);
					Остаток	=табл.Остаток;
					Стоим	=табл.Стоим;
					НДСстоим=табл.НДС;
				КонецЕсли;
				
			КонецЕсли;
			
			
			Ингредиент = Док.Ингредиент;
			//Остаток=Рег1.СводныйОстаток(Ингредиент,,,"ОстатокТовара");
			ВалБлюда=?(ПустоеЗначение(ТоварШапки.ВалютаУчета)=1,Рубли,ТоварШапки.ВалютаУчета);
			ВалБлюдаРозн=ТоварШапки.ВалютаПродажи;
			ВалИнгр=Ингредиент.ВалютаУчета;       
			ВалЗакуп=Ингредиент.ВалютаЗакупки;       
			ПроцНДС=ПроцентНДС(Ингредиент.СтавкаНДС);
			Если Остаток<=0 Тогда
				Если Константа.КалькулироватьСНДС=Перечисление.Булево.Нет Тогда
						ЦенаРасчета=Ингредиент.ЦенаПриобретения;
					Иначе
						ЦенаРасчета=Ингредиент.ЦенаПриобретения*(100/(100+ПроцНДС));                               			
					КонецЕсли;       
					
				Если ВалБлюда=ВалЗакуп Тогда
					ЦенаК=ЦенаРасчета;
				Иначе
					ЦенаК=ЦенаРасчета*КурсДляВалюты(ВалИнгр,ДатаДок)/КурсДляВалюты(ВалБлюда,ДатаДок);
				КонецЕсли;
			Иначе
				//Стоим=Рег2.СводныйОстаток(Док.Фирма,Ингредиент,,,,,,,"Стоимость");
				//НДСстоим=Рег2.СводныйОстаток(Док.Фирма,Ингредиент,,,,,,,"НДС");
				//Остат=Рег2.СводныйОстаток(Док.Фирма,Ингредиент,,,,,,,"ОстатокТовара");
				Если (Остаток<>0) и (Стоим>0) Тогда
					Если Константа.КалькулироватьСНДС=Перечисление.Булево.Нет Тогда
						ЦенаРасчета=Стоим/Остаток;
					Иначе
						ЦенаРасчета=(Стоим+НДСстоим)/Остаток;
					КонецЕсли;
				Иначе
					Если Константа.КалькулироватьСНДС=Перечисление.Булево.Нет Тогда
						ЦенаРасчета=Пересчет(Ингредиент.ЦенаПриобретения,ВалЗакуп,ДатаДок,ВалБлюда,ДатаДок); 
					Иначе
					    ЦенаРасчета=Пересчет(Ингредиент.ЦенаПриобретения,ВалЗакуп,ДатаДок,ВалБлюда,ДатаДок)*(100/(100+ПроцНДС));                             
					КонецЕсли; 
				КонецЕсли;	
				Если ВалБлюда=ВалИнгр Тогда
					ЦенаК=ЦенаРасчета;
				ИначеЕсли (ВалБлюда<>ВалИнгр) И (ВалИнгр=Константа.БазоваяВалюта) Тогда
					ЦенаК=ЦенаРасчета/КурсДляВалюты(ВалБлюда,ДатаДок);
				Иначе
					ЦенаК=ЦенаРасчета*КурсДляВалюты(ВалИнгр,ДатаДок)/КурсДляВалюты(ВалБлюда,ДатаДок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		КоличествоВложенногоБлюда=Окр(Док.Количество*Док.Коэффициент,3);
		СебБлюда=СебБлюда+ЦенаК*КоличествоВложенногоБлюда;
			
	КонецЦикла;
	Возврат СебБлюда;
КонецФункции   


Процедура семПечатьНаценкиБлюда()
	
	Позиция=СформироватьПозициюДокумента(ТекущийДокумент(),0);

	Запрос=СоздатьОбъект("ODBCRecordSet");
	ТекстЗапроса="SELECT DISTINCT Журнал.$ОбщийРеквизит.ТоварШапки [БлюдоСсылка $Справочник.Номенклатура]
	|					, СпрН.CODE КодБлюда
	|					, $СпрН.КодДляРозницы КодДляРозницы
	|					, КалькуляционнаяКарта.IDDOC [КалькКартаСсылка $Документ.КалькуляционнаяКарта]
	|			  FROM $ДокументСтроки.КалькуляционнаяКарта AS КалькуляционнаяКартаСтроки With (NOLOCK)
	|			  INNER JOIN $Документ.КалькуляционнаяКарта AS КалькуляционнаяКарта With (NOLOCK) ON КалькуляционнаяКартаСтроки.IDDOC = КалькуляционнаяКарта.IDDOC
	|			  INNER JOIN _1SJOURN AS Журнал With (NOLOCK) ON КалькуляционнаяКартаСтроки.IDDOC = Журнал.IDDOC
	|			  INNER JOIN $Справочник.Номенклатура СпрН (NOLOCK) ON СпрН.ID = Журнал.$ОбщийРеквизит.ТоварШапки AND СпрН.ISMARK = 0 AND $СпрН.ПоАлфавиту NOT LIKE :СимвАрхив
	|			  WHERE (Журнал.DATE_TIME_IDDOC <= :Кон~)
	//|					AND ((Журнал.CLOSED & 1) = 1)
	|					AND ($КалькуляционнаяКартаСтроки.Ингредиент IN (SELECT $Док.Товар FROM $ДокументСтроки.ПриходнаяНакладная Док (NOLOCK) WHERE Док.IDDOC = :ВыбДок))
	|					AND $СпрН.ВидТовара = $Перечисление.ВидыТоваров.Блюдо
	|			  ORDER BY СпрН.CODE
	|";
	
	Запрос.УстановитьТекстовыйПараметр("СимвАрхив",Константа.СимволАрхивТоваров+"%");
	Запрос.УстановитьТекстовыйПараметр("Нач",ДатаДок-180);
	Запрос.УстановитьТекстовыйПараметр("Кон",Позиция);
	Запрос.УстановитьТекстовыйПараметр("ВыбДок",ТекущийДокумент());
	
	табл=СоздатьОбъект("ТаблицаЗначений");
	табл=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);

	итТаблПрихода = СоздатьОбъект("ИндексированнаяТаблица");
	итТаблПрихода.НоваяКолонка("Товар");
	итТаблПрихода.НоваяКолонка("Стоимость");
	итТаблПрихода.НоваяКолонка("ОстатокТовара");
	
	рег = СоздатьОбъект( "Регистр.ПартииТоваров" );
	рег.ВыбратьДвиженияДокумента( ТекущийДокумент() );
	Пока рег.ПолучитьДвижение() = 1 Цикл
		с=с+1;
		итТаблПрихода.НоваяСтрока();
		итТаблПрихода.Товар = рег.Товар;
		итТаблПрихода.Стоимость = рег.Стоимость;
		итТаблПрихода.ОстатокТовара = рег.ОстатокТовара;
	КонецЦикла;

	итТаблПрихода.Свернуть("Товар","Стоимость,ОстатокТовара");
	итТаблПрихода.ДобавитьИндекс("иТовар","*Товар");
	//табл.ВыбратьСтроку();
	
	таб=СоздатьОбъект( "Таблица" );
	таб.ИсходнаяТаблица( "НаценкаБлюда" );
	таб.ВывестиСекцию( "Заголовок" );
	таб.ВывестиСекцию( "Шапка" );
	таб.Опции(0,0,таб.ВысотаТаблицы(),0);

	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку() = 1 Цикл

		Блюдо = табл.БлюдоСсылка;
		ЕстьКалькуляция=0;
		ДокумКальк=ПолучитьКалькуляцию(ДатаДок,табл.БлюдоСсылка,ТекущийДокумент());
		Если ДокумКальк<>0 Тогда
			Если ДокумКальк.ТекущийДокумент()<>табл.КалькКартаСсылка Тогда
				Продолжить;	
			КонецЕсли;
		Иначе
			Сообщить(Шаблон("Для блюда [Блюдо.Код] [Блюдо] не найден документ Калькуляции!"));
			Продолжить;
		КонецЕсли;

		пЗакупщик = Блюдо.Закупщик;
		пНом  = табл.НомерСтроки;
		Состояние("Выводится: "+пНом+"/"+табл.КоличествоСтрок());
		пКод = табл.КодБлюда;
		пКодРозница = табл.КодДляРозницы;
		пТовар = табл.БлюдоСсылка;
		пСебест = ВычСебСтоБлюда(ДокумКальк)/ДокумКальк.КоличествоКалькуляции;  
		ПромВал=Рубли;

		пЦенаРозн = ЦенаТовараПоКатегорииДляТовара( пТовар, Константа.РозничнаяКатегорияЦены,ПромВал,,ДатаДок );
		пЦенаРозн = Пересчет( пЦенаРозн, ПромВал, ДатаДок, Рубли, ДатаДок);
		пНаценкаРозн =  ?( пЦенаРозн = 0, "", Формат(?(пСебест=0,пЦенаРозн/0.01,(пЦенаРозн - пСебест)/пСебест) * 100, "Ч12.2, " ) + " %" );
		СпрЦеныРозн=семПолучитьЦенуТовара( пТовар, Константа.РозничнаяКатегорияЦены, ДатаДок);
		пЗапретСкидкиРозн = ?(СпрЦеныРозн.ЗапретСкидки=1,"X","");

		РозКатегорияЦеныРевал = семПолучитьКатегориюЦеныПоНаим( "Розничная2" );
		пЦенаРозн2 = ЦенаТовараПоКатегорииДляТовара( пТовар, РозКатегорияЦеныРевал, ПромВал,,ДатаДок);
		пЦенаРозн2 = Пересчет( пЦенаРозн2, ПромВал, ДатаДок, Рубли, ДатаДок);
		СпрЦеныРозн2=семПолучитьЦенуТовара( пТовар, РозКатегорияЦеныРевал, ДатаДок);
		пЗапретСкидкиРозн2 = ?(СпрЦеныРозн2.ЗапретСкидки=1,"X","");

		пНаценкаРозн2 =  ?( пЦенаРозн2 = 0, "", Формат(?(пСебест=0,пЦенаРозн2/0.01,(пЦенаРозн2 - пСебест)/пСебест) * 100, "Ч12.2, " ) + " %" );

		пЦенаCC = ЦенаТовараПоКатегорииДляТовара( пТовар, Константа.CashCarryКатегорияЦены, ПромВал ,,ДатаДок);
		пЦенаCC = Пересчет( пЦенаCC, ПромВал, ДатаДок, Рубли, ДатаДок);
		пНаценкаCC =  ?( пЦенаCC = 0, "", Формат(?(пСебест=0,пЦенаCC/0.01,(пЦенаCC - пСебест)/пСебест) * 100, "Ч12.2, " ) + " %" );
		
		
		таб.ВывестиСекцию( "Строка" );
	КонецЦикла;
	
	таб.ПараметрыСтраницы(2,100,,,,,,,,1);
	таб.ТолькоПросмотр(1);
	таб.Показать( "Наценка "+НомерДок );
КонецПроцедуры


Процедура семПечатьСпецЦен()
	
	Запрос=СоздатьОбъект("ODBCRecordSet");
	ТекстЗапроса="SELECT Клиент [Клиент $Справочник.Контрагенты]
	|					, Товар [Товар $Справочник.Номенклатура]
	|					, (SELECT TOP 1 $Рег.Цена*$ПоследнееЗначение.Валюты.Курс($Рег.Валюта,:ВыбДата) Цена
	|			 		   FROM $Регистр.СпецЦены as Рег (NOLOCK)
	|			  		   WHERE $Рег.ПериодС <= :ВыбДата AND $Рег.ПериодПо >= :ВыбДата
	|							AND $Рег.Товар=СпецЦены.Товар AND $Рег.Клиент=СпецЦены.Клиент
	|			  		   ORDER BY Рег.DATE_TIME_IDDOC DESC) Цена
	|			  FROM 
	|				(SELECT $СпецЦены.Товар Товар, $СпецЦены.Клиент Клиент, SUM($СпецЦены.Цена) Цена
	|				 FROM $Регистр.СпецЦены AS СпецЦены (NOLOCK)
	|				 WHERE ($СпецЦены.ПериодС <= :ВыбДата)
	|						AND ($СпецЦены.Цена  <> 0)
	|						AND ($СпецЦены.ПериодПо >= :ВыбДата) 
	|						AND $СпецЦены.Товар IN (SELECT $Док.Товар FROM $ДокументСтроки.ПриходнаяНакладная Док(NOLOCK) WHERE IDDOC=:ВыбДок) 
	|				 GROUP BY $СпецЦены.Товар, $СпецЦены.Клиент
	|				) СпецЦены
	|			 ORDER BY 1,2
	|";
	
	Запрос.УстановитьТекстовыйПараметр("ВыбДата",РабочаяДата());
	Запрос.УстановитьТекстовыйПараметр("ВыбДок",ТекущийДокумент());
	итСпецЦены=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,итСпецЦены);
//	итСпецЦены.Показать();

	тКлиенты=СоздатьОбъект("ТаблицаЗначений");
	итСпецЦены.ДобавитьИндекс("иТоварКлиент","*Товар, *Клиент");
	итСпецЦены.Выгрузить(тКлиенты,,"Клиент",1);
	тКлиенты.Свернуть("Клиент","");
	
	таб=СоздатьОбъект( "Таблица" );
	таб.ИсходнаяТаблица( "НаценкаСпецЦены" );
	таб.ВывестиСекцию( "Заголовок" );
	таб.ВывестиСекцию( "Шапка|Основная" );
	тКлиенты.Сортировать("Клиент");
	тКлиенты.ВыбратьСтроки();
	Пока тКлиенты.ПолучитьСтроку() = 1 Цикл
		пСпецКлиент=тКлиенты.Клиент;
		таб.ПрисоединитьСекцию( "Шапка|Клиент" );
	КонецЦикла;
	
	сзКлюч=СоздатьОбъект("СписокЗначений");
	таб.Опции(0,0,таб.ВысотаТаблицы(),0);
	рег = СоздатьОбъект( "Регистр.ПартииТоваров" );
	рег.ВыбратьДвиженияДокумента( ТекущийДокумент() );
	Пока рег.ПолучитьДвижение() = 1 Цикл
		пНом = рег.НомерСтроки();
		пКод = рег.Товар.Код;
		пТовар = рег.Товар;
		пСебест = рег.Стоимость / рег.ОстатокТовара;  
		ПромВал=Рубли;

		таб.ВывестиСекцию( "Строка|Основная" );

		тКлиенты.ВыбратьСтроки();
		Пока тКлиенты.ПолучитьСтроку() = 1 Цикл
			сзКлюч.УдалитьВсе();
			сзКлюч.ДобавитьЗначение(пТовар);
			сзКлюч.ДобавитьЗначение(тКлиенты.Клиент);
			итСпецЦены.Подмножество(сзКлюч,2,"иТоварКлиент");
			итСпецЦены.ВыбратьСтроки("иТоварКлиент");
			Если итСпецЦены.ПолучитьСтроку("иТоварКлиент") = 1 Тогда
				пСпецЦена = итСпецЦены.Цена;
			Иначе
				пСпецЦена = 0;
			КонецЕсли;
			пНаценкаСпецЦена =  ?( пСпецЦена = 0, "", Формат( ?(пСебест=0,пСпецЦена/0.01,(пСпецЦена - пСебест)/пСебест) * 100, "Ч12.2, " ) + " %" );
			таб.ПрисоединитьСекцию( "Строка|Клиент" );
		КонецЦикла;
		
	КонецЦикла;
	
	таб.ПараметрыСтраницы(2,100,,,,,,,,1);
	таб.ТолькоПросмотр(1);
	таб.Показать( "Спец. цены клиентов" );
КонецПроцедуры


Процедура ПриВводеСтроки()
	ПроблемаДопустСрокаРеализации = 0;
	ПриВводеСтрокиДокумента(Контекст);
КонецПроцедуры

Процедура ПечатьПоСрокамГодности()
	таб = СоздатьОбъект( "Таблица" );
	таб.ИсходнаяТаблица( "ПоСрокамГодности" );
	таб.ВывестиСекцию( "Заголовок" );
	таб.ВывестиСекцию( "ШапкаТаблицы" );
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		пНом = НомерСтроки;
		пКод = Товар.Код;
		пТовар = Товар;
		пДатаРеал = СрокРеализ;
		пСрокГодн = Товар.СрокГоднПоставщика;
		пНом = НомерСтроки;
		пКод = Товар.Код;
		пТовар = Товар;
		пДатаРеал = СрокРеализ;

		СрокГодн = Товар.СрокГоднПоставщика;
		ДопДней = Товар.ДопустСрокГодн-Товар.ТоварВПутиДней;
		Если СрокГодн = 0 Тогда
			пСрокГодн = СрокГодн;
			пДатаПроизв = "???";
			пДопДней = ДопДней;
			пДопПроц = "???";
			пОстДней = пДатаРеал - ДатаПриходаТовара;
			пОстПроц = "???";
			пМожно = "???";
		ИначеЕсли ДопДней = 0 Тогда
			пСрокГодн = Товар.СрокГодн-Товар.ТоварВПутиДней;
			пДатаПроизв = пДатаРеал - СрокГодн;
			пДопДней = "не ограничен";
			пДопПроц = "не ограничен";
			пОстДней = пДатаРеал - ДатаПриходаТовара;
			пОстПроц = ""+Окр( пОстДней / СрокГодн * 100, 2, 1 ) + " %";
			пМожно = "Да";
		Иначе	
			пСрокГодн = Товар.СрокГоднПоставщика;
			пДатаПроизв = пДатаРеал - пСрокГодн;
			пДопДней = ДопДней;
			пДопПроц = ""+Окр( ДопДней / СрокГодн * 100, 2, 1 ) + " %";
			пОстДней = пДатаРеал - ДатаПриходаТовара;
			пОстПроц = ""+Окр( пОстДней / СрокГодн * 100, 2, 1 ) + " %";
			пМожно = ?( пОстДней < ДопДней, "Нет", "Да" );
		КонецЕсли;
		таб.ВывестиСекцию( "Строка" );
	КонецЦикла;
	Таб.Опции(0,0,2,3);
	Таб.ТолькоПросмотр(1);
	Таб.Показать( "Отчет по срокам годгости" );
КонецПроцедуры

//********************************
Функция ИтогоКолво()
	ВыбратьСтроки();
	ВсегоКол=0;
	Пока ПолучитьСтроку()=1 Цикл
		ВсегоКол=ВсегоКол+Количество*Коэффициент;
	КонецЦикла;
	
	Возврат Формат(ВсегоКол,"Ч11.3");
	
КонецФункции

//********************************
Процедура Доступ()
	                 
	Если (Склад.ВидСклада=Перечисление.ВидыСкладов.Розничный)  Тогда
		Форма.КодДляРозницы.Видимость(1);
	Иначе
		Форма.КодДляРозницы.Видимость(0);
	КонецЕсли;
	
	Попытка
		ТекЗакладка = Форма.Закладки.ТекущаяСтрока();
	Исключение
		ТекЗакладка = 1;
	КонецПопытки;
	
	Если ТекЗакладка=1 Тогда
		Если ПризнакНакладной<>Перечисление.ПризнПрихНакл.ВозвратОтПокупателя Тогда
			Форма.КатегорияВозврата.Видимость(0);
			Форма.ПояснениеВозврата.Видимость(0);
			Форма.Таможня.Видимость(1);
			Форма.ДатаПроизв.Видимость(1);
			Форма.ТовСертификат.Видимость(1);
			Форма.лТранспорт.Видимость(1);
			Форма.лТаможня.Видимость(1);
			Форма.Транспорт.Видимость(1);
			Форма.ТаможенныеРасходы.Видимость(1);
			Форма.ПредПродажПодг.Видимость(1);
			Форма.кнВыбратьЦену.Видимость(0);
			Форма.ЦенаПредыдущая.Видимость(1);
			Форма.ЦенаПриобретения.Видимость(0);
			Форма.ЦенаСоСкидкой.Видимость(1);
		Иначе
			Форма.КатегорияВозврата.Видимость(1);
			Форма.ПояснениеВозврата.Видимость(1);
			Форма.Таможня.Видимость(0);   
			Форма.ДатаПроизв.Видимость(0);
			Форма.ТовСертификат.Видимость(0);
			Форма.лТранспорт.Видимость(0);
			Форма.лТаможня.Видимость(0);
			Форма.Транспорт.Видимость(0);
			Форма.ТаможенныеРасходы.Видимость(0);
			Форма.ПредПродажПодг.Видимость(0);
			Форма.кнВыбратьЦену.Видимость(1);
			Форма.ЦенаПредыдущая.Видимость(0);
			Форма.ЦенаПриобретения.Видимость(0);
			Форма.ЦенаСоСкидкой.Видимость(0);
	
		КонецЕсли;	                 
	КонецЕсли;

	Если (ПризнакНакладной=Перечисление.ПризнПрихНакл.Недопоставка) ИЛИ (ПризнакНакладной=Перечисление.ПризнПрихНакл.Допоставка) Тогда
		Форма.ДокументПрихода.Доступность(1);
	Иначе
		Форма.ДокументПрихода.Доступность(0);
	КонецЕсли;
	
	Если Пользователь.РазрТолькоВозврат=1 Тогда
		Форма.ПризнакНакладной.Доступность(0);
	КонецЕсли;   
	
	Форма.НаАлкоголь.Доступность(1-ПустоеЗначение(Клиент.ЛицензияАлкоголь));
	
	Если РабочаяДата()>='01.06.09' Тогда
		Форма.ДатаОплаты.Доступность(семЕстьПраво("Документ","ПриходнаяНакладная","Изменение даты оплаты"));
	КонецЕсли;
	
	Форма.кнПодтвердить.Доступность(семЕстьПраво("Документ","ПриходнаяНакладная","Подтверждение"));

	Форма.кнПодтвердить.Заголовок(?(Подтверждена=1,"Снять подтв.","Подтвердить"));	
КонецПроцедуры
//------------------------
Процедура   ПриВводеСуммыБезСкидки()	
	СтатСтоим=Макс(СтатСтоим,Итог("Сумма"));
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		СтатСтоимТов=0;
	КонецЦикла;
КонецПроцедуры
//------------------------
Процедура ПриВыбореЗакладки(Ном, Имя)
	Если Ном=1 Тогда
		Форма.ИспользоватьСлой("Основной,Кнопки",2);   
	ИначеЕсли Ном=2 Тогда
	  
		ВыбратьСтроки();
		ВесНеттоТоваров=0;
		Пока ПолучитьСтроку()=1 Цикл
			ВесНеттоТоваров=ВесНеттоТоваров+Товар.Вес*Количество*Коэффициент;
		КонецЦикла;      
		Форма.ИспользоватьСлой("Кнопки,INTRASTAT",2);
	ИначеЕсли Ном=3 Тогда	
		
		Форма.ИспользоватьСлой("слФайлы,Кнопки",2); 
		ЗаполнитьПредл();
	КонецЕсли;


	Если Форма.Закладки.ТекущаяСтрока()=1 Тогда
		ФлР=0;
		Если Клиент.Страна.ВидСтраны=Перечисление.ВидыСтран.ПрочиеСтраны Тогда
			ФлР=1;
		КонецЕсли;
		Форма.Растаможено.Видимость(ФлР);
	КонецЕсли;
	
	Доступ();
	
КонецПроцедуры	// ПриВыбореЗакладки

//------------------------
Процедура ПриОткрытии()
	ПроверкаРазрешенияРедактирования(Контекст);
	
	Если (Подтверждена=1) И (Клиент.Страна<>Константа.СтранаРезидент) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	УстановкаРеквизитаТип(Контекст);
	Тип.ДобавитьЗначение("Упр.");
	Тип.ДобавитьЗначение("Общ.");
	Тип.ДобавитьЗначение("Фин.");
	Тип.ТекущаяСтрока(ТипУчета+1);
	Если Форма.ТолькоПросмотр()=1 Тогда
		Форма.КнФирма.Доступность(0);
		Форма.КнСклад.Доступность(0);
		Форма.КнВалюта.Доступность(0);
		Форма.ПодборПоКаталогу.Доступность(0);
		Форма.ОК.Доступность(0);
		Форма.зПодбор.Доступность(0);
		Форма.кнЗаписать.Доступность( 0 );
		Форма.кнПровести.Доступность( 0 );
		Форма.кнОбновитьТЧ.Доступность( 0 );
		Форма.КнопкаПоУмолчанию("Закрыть");
	Иначе
		Форма.КнопкаПоУмолчанию("ОК");
		Если ПустоеЗначение(КлиентОтправитель)=1 Тогда
			КлиентОтправитель=Клиент;
		КонецЕсли;
		Если ПустоеЗначение(СтранаОтпр)=1 Тогда
			СтранаОтпр=КлиентОтправитель.Страна;
		КонецЕсли;
	КонецЕсли;
	
	Доступ();
	семЗаголовокОкна(контекст);        
	// анна
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Основной");
	Форма.Закладки.ДобавитьЗначение("Статистика");
	Форма.Закладки.ДобавитьЗначение("Файлы","Прилагаемые документы");
	Форма.ИспользоватьСлой("Основной,Кнопки",2);
	ФлР=0;
	Если Клиент.Страна.ВидСтраны=Перечисление.ВидыСтран.ПрочиеСтраны Тогда
		ФлР=1;
	КонецЕсли;
	Форма.Растаможено.Видимость(ФлР);
КонецПроцедуры
//------------------------
Процедура ВыборГлубины()
	//ДатаОплаты=БанковскаяДата(ДатаИнвойса,Глубина);
	//ДатаОплаты=семУстДатуОплаты( Клиент, ДатаИнвойса, Глубина );
	ДатаОплаты = семПолучитьДатуОплаты( Клиент, Перечисление.ВидыКлиентов.Поставщик, ДатаИнвойса );
КонецПроцедуры
//-----------------------------------------------
Процедура Взаиморасчеты()
	Форма.ИнфПодпись.Видимость(0);
	ИнформационнаяСтрока=ДолгПоКредиту(Контекст);
КонецПроцедуры                  

//****************************************************
Функция ВычислитьЦену()
	Цена=?(Количество<>0,Сумма/Количество,0);
КонецФункции 

//-----------------------------------------------
Процедура ВыборКлиента(Режим="Изменение")
   	Если (ПустоеЗначение(стар_Клиент)=0) и (клиент<>стар_Клиент) Тогда
		//Если глПроверкаАгентаПоКлиенту(Контекст)=0 Тогда
		//	Клиент=стар_Клиент;
		//КонецЕсли;             
		стар_Клиент="";
	КонецЕсли;
	
	КлГруппа=?(Клиент.КлГруппа.Выбран()=1,Клиент.КлГруппа,Клиент);
	КлиентОтправитель=Клиент;
	СтранаОтпр=Клиент.Страна;
	
	Если КлГруппа.Выбран()=1 Тогда
		Если ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя Тогда
			Если НЕ(КлГруппа.СуммаКредита.Получить(ДатаДок)=0) Тогда
				Глубина=КлГруппа.Глубина.Получить(ДатаДок);
			Иначе
				Глубина=0;
			КонецЕсли;                                                            
		Иначе
			Если НЕ(КлГруппа.СуммаКредитаПоставщика.Получить(ДатаДок)=0) Тогда
				Глубина=КлГруппа.ГлубинаКредитаПоставщика.Получить(ДатаДок);
			Иначе
				Глубина=0;
			КонецЕсли;
		КонецЕсли;
		Если СтавкаНДС<>семПолучитьСтавкуНДС(Клиент) Тогда
			СтавкаНДС=семПолучитьСтавкуНДС(Клиент);
			ПриИзмененииСтавкиНДС(Контекст);
		КонецЕсли;
		
		Если Клиент.НеПлательщик.Получить(ДатаДок)=1 Тогда
			ЛегкоеСообщение("Внимание! Контрагент является не плательщиком НДС!");
		КонецЕсли;
		
		Если Режим="Выбор" Тогда
			Валюта=Клиент.ВалютаКредитаПоставщика;
			Курс=КурсДляВалюты(Валюта,Дата_Курса);
			Устан_Вал(Контекст,Дата_курса,Валюта_Прежн,Курс_Прежн);
		КонецЕсли;
		
		ВыборГлубины();
		ИнформационнаяСтрока="";
		Форма.ИнфПодпись.Видимость(1);
		ДатаОплаты = семПолучитьДатуОплаты( Клиент, Перечисление.ВидыКлиентов.Поставщик, ДатаИнвойса );
    Иначе
		Если Режим="Изменение" Тогда
			Предупреждение ("Выберите клиента!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ФлР=0;
	Если Клиент.Страна.ВидСтраны=Перечисление.ВидыСтран.ПрочиеСтраны Тогда
		ФлР=1;
	КонецЕсли;
	Форма.Растаможено.Видимость(ФлР);
КонецПроцедуры
//------------------------
Процедура ПриВыбореСтраныОтпр()
	Если СтранаОтпр.Выбран()=1 Тогда
//		Если СтранаОтпр <> Клиент.Страна Тогда
			Если ВвестиЗначение(КлиентОтправитель,"Укажите контрагента - отправителя!","Справочник.Контрагенты")=0 Тогда
				КлиентОтправитель="";
				СтранаОтпр=Клиент.Страна;			
			КонецЕсли;
	//	КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//------------------------
Процедура ВыборДаты()
	Устан_Вал(Контекст,ДатаДок,Валюта_Прежн,Курс_Прежн);
	ВыборКлиента();
КонецПроцедуры
//-----------------------------------------------
Процедура Подбор()
	Режим="Каталог";
	ОткрытьПодбор("Номенклатура","ДляПодбора");
	УстановитьЗначениеВПодборе("Склад",Склад);
КонецПроцедуры
//-----------------------------------------------
Процедура ОбработкаПодбора(Выб)
//	ЗапросКоличестваВПодборе(Контекст,Режим,Выб);

	Если Выб.ПометкаУдаления()=1 Тогда
		Предупреждение("Нельзя выбирать помеченные на удаление товары!");
		Возврат;
	КонецЕсли;
	//AU
	Если УстановкаАгента(Контекст,Режим,Выб)=0 Тогда
		Возврат;
	КонецЕсли;    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	Если Константа.ЗапрашиватьКоличество=Перечисление.Булево.Да Тогда
		Кол=1;
		Если ПроверкаБазовойЕдиницы(Выб)=1 Тогда
			ПеремОст=0;
		Иначе
			ПеремОст=3;
		КонецЕсли;
		
        //Если ВвестиЧисло(Кол,"Введите количество",12,ПеремОст)=1 Тогда
        //    НоваяСтрока();
            Если Режим="Каталог" Тогда
                Товар_=Выб;
            Иначе
                Товар_=Выб.Товар;
            КонецЕсли;
        //    Количество=Кол;
        //Иначе
        //    Возврат;
        //КонецЕсли;
		// формируем список параметров для передачи в обработку
		Параметр_	= СоздатьОбъект("СписокЗначений");
		Параметр_.ДобавитьЗначение(Товар_, "Номенклатура");
		Параметр_.ДобавитьЗначение(Кол, "Количество");
		Параметр_.ДобавитьЗначение(глБазоваяЕдиницаИзмерения(Товар_), "Единица");
		Параметр_.ДобавитьЗначение(0, "Сумма");	
		Параметр_.ДобавитьЗначение(Валюта, "Валюта");
		Параметр_.ДобавитьЗначение(Дата(0), "СрокРеализации");
		
		// открываем форму обработки
		ОткрытьФормуМодально("Обработка.ВводКоличестваИЦены", Параметр_);
		
		// получаем параметр возврата.
		Если Параметр_.Получить("СтатусВозврата") = 0 Тогда
			Возврат;
		КонецЕсли;
		НоваяСтрока();
		Товар=Товар_;
		Количество   = Параметр_.Получить("Количество");
		Единица      = Параметр_.Получить("Единица");
		Коэффициент	 = Единица.Коэффициент;
		АкцизнаяСтавка=Товар.АкцизнаяСтавка;
		Если ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя Тогда
			КатегорияВозврата=Перечисление.КатегорииВозвратов.БракПоставщика;
		Иначе
			КатегорияВозврата=0;
		КонецЕсли;
		УстанЦеныПрих(Контекст);
		Сумма		= Параметр_.Получить("Сумма");	
		СрокРеализ	= Параметр_.Получить("СрокРеализации");	
		ПредПродажПодг = Константа.ОсновноеТребованиеПредПродПодготовки;
		ВычислитьЦену();
		Если ПроцентНДС(СтавкаНДС)<>0 Тогда
			СтавкаНДС_Т = Товар.ПолучитьАтрибут("СтавкаНДС"+?(Фирма.Страна.Код="LV","",Фирма.Страна.Код));
		КонецЕсли;
		Выч_суммы_накл_сНП(Контекст);
		ТовКод=Товар.Код;
    Иначе
        НоваяСтрока();
        Если Режим="Каталог" Тогда
			
            Товар=Выб;
        Иначе
            Товар=Выб.Товар;
        КонецЕсли;
        Количество=1;     
		Если ПроцентНДС(СтавкаНДС)<>0 Тогда
			СтавкаНДС_Т = Товар.ПолучитьАтрибут("СтавкаНДС"+?(Фирма.Страна.Код="LV","",Фирма.Страна.Код));
		КонецЕсли;
		
	КонецЕсли;              
	
	//ЗаписьЖурналаРегистрации( Шаблон("[НомерСтроки] Добавлена новая позиция товара [Товар.Код] [Товар] в кол-ве [Количество]"),, "Ввод товара в документ", ТекущийДокумент(), 2 );
	//УстанЦеныПрих(Контекст);
	//ЗаписьЖурналаРегистрации( Шаблон("[НомерСтроки] Установлены цены для товара [Товар.Код] [Товар]"),, "Ввод товара в документ", ТекущийДокумент(), 2 );
	
	//УстановитьДопСвойства(Контекст);
		
	
//	промСумма=0; 
//	Если ВвестиЧисло(промСумма,"Введите Сумму",12,3)=1 Тогда
//		Сумма=промСумма;
//	Иначе
//		Возврат;
//	КонецЕсли;
//
//	ЗаписьЖурналаРегистрации( Шаблон("[НомерСтроки] Введена сумма для товара [Товар.Код] [Товар]"),, "Ввод товара в документ", ТекущийДокумент(), 2 );
//	
//	
//	СрокРеализ_="";
//    Если ВвестиДату(СрокРеализ_,"Введите срок реализации")=1 Тогда
//        СрокРеализ=СрокРеализ_;
//    Иначе
//        Возврат;
//    КонецЕсли;
//
//	ЗаписьЖурналаРегистрации( Шаблон("[НомерСтроки] Введена срок реализации для товара [Товар.Код] [Товар]"),, "Ввод товара в документ", ТекущийДокумент(), 2 );
	
	

//	УстанЦеныПрих(Контекст);
	//ВычислитьЦену();
	//Выч_суммы_накл_сНП(Контекст);
	
	//ЗаписьЖурналаРегистрации( Шаблон("[НомерСтроки] Рассчитана сумма по строке для товара [Товар.Код] [Товар]"),, "Ввод товара в документ", ТекущийДокумент(), 2 );
	Записать();
	АктивизироватьСтроку();
КонецПроцедуры
//----------------------------------------------
Процедура ПечатьПриходнойНакладной()
	Фирма.ИспользоватьДату(ДатаДок);
	Таб=СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("ПриходнаяНакладная");
	Таб.ВывестиСекцию("Шапка");
	ВыбратьСтроки();
	Ном=0;
	Пока ПолучитьСтроку() = 1 Цикл
		Ном=Ном+1;  
		Если ((Константа.ЦенаПриходаВключаетНДС=Перечисление.Булево.Нет) И (Константа.СуммаВключаетНДС.Получить(ДатаДок)=Перечисление.Булево.Да)) Тогда
			ПечЦена=Окр(Цена*Коэффициент+(НДС+СуммаНП)/Количество,2);
		ИначеЕсли ((Константа.ЦенаПриходаВключаетНДС=Перечисление.Булево.Да) И (Константа.СуммаВключаетНДС.Получить(ДатаДок)=Перечисление.Булево.Нет)) Тогда
			ПечЦена=Окр(Цена*Коэффициент-(НДС+СуммаНП)/Количество,2);	     
		Иначе
			ПечЦена=Окр(Цена*Коэффициент,2);
		КонецЕсли;
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;
	Таб.ВывестиСекцию("Подвал");
	Таб.Опции(0,0,0,0,ПарСтрДок);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);  
	Таб.Показать("Печать накладной","");
КонецПроцедуры

//-----------------------------------------------  
Процедура ПечатьЗакупочныйАкт()
	Фирма.ИспользоватьДату(ДатаДок);
	Таб=СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("ЗакупочныйАкт");
	Таб.ВывестиСекцию("Шапка");
	Таб.ВывестиСекцию("Заголовок");
	ВыбратьСтроки();
	Ном=0;
	Пока ПолучитьСтроку() = 1 Цикл
		Ном=Ном+1;  
		Если ((Константа.ЦенаПриходаВключаетНДС=Перечисление.Булево.Нет) И (Константа.СуммаВключаетНДС.Получить(ДатаДок)=Перечисление.Булево.Да)) Тогда
			ПечЦена=Окр(Цена*Коэффициент+(НДС+СуммаНП)/Количество,2);
		ИначеЕсли ((Константа.ЦенаПриходаВключаетНДС=Перечисление.Булево.Да) И (Константа.СуммаВключаетНДС.Получить(ДатаДок)=Перечисление.Булево.Нет)) Тогда
			ПечЦена=Окр(Цена*Коэффициент-(НДС+СуммаНП)/Количество,2);	     
		Иначе
			ПечЦена=Окр(Цена*Коэффициент,2);
		КонецЕсли;
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;
	Таб.ВывестиСекцию("Всего");
	Таб.НоваяСтраница();
	Таб.ВывестиСекцию("Подвал");
	Таб.Опции(0,0,0,0,ПарСтрДок);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Печать закупочного акта","");
КонецПроцедуры        
//***************************************************************
//
Процедура л_ВыгрузкаВТелема()
	ДанныеОбмена=СоздатьОбъект("Справочник.ДанныеОбмена");
	ТекДок=ТекущийДокумент();
	л_КлГруппа=ТекДок.КлГруппа;
	Если ПустоеЗначение(л_КлГруппа.Ecod)<>1 Тогда
		БылВыгружен=0;
		ДанныеОбмена.ИспользоватьВладельца(ТекДок.Клиент);
		БылВыгружен= ДанныеОбмена.НайтиПоРеквизиту("Документ",ТекДок.ТекущийДокумент(),0);
		Если БылВыгружен=0 Тогда
			Если КлГруппа.ФорматОбмена = Перечисление.ФорматыОбмена.TELEMA Тогда
				СпПар = СоздатьОбъект("СписокЗначений");
				СпПар.Установить("Документ",ТекущийДокумент());
				ОткрытьФорму("Обработка",СпПар,КаталогИБ()+"ExtForms\TELEMA_CRE.ert");
				Сообщить(ТекущийДокумент().НомерДок+" - документ, выгружен в TELEMA");
			КонецЕсли;
		Иначе 
			Сообщить("Ошибка"+ТекущийДокумент().НомерДок+" - документ, уже есть в TELEMA");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПечатьВозврат()
//{{MRG[ <-- ]
	Если (семТекСтрана() = "LT") Тогда
		сп=СоздатьОбъект("СписокЗначений");
		сп.Установить( "Документ", ТекущийДокумент() );
		сп.Установить( "Язык", "Лит" );
		сп.Установить( "флВозврат", 1);
		ОткрытьФорму( "Отчет", сп, КаталогИБ() + "ExtForms\Печать\ПечатьНакладнойLT.ert" );
		Возврат;
	КонецЕсли;
//}}MRG[ <-- ]
	Фирма.ИспользоватьДату(ДатаДок);
	Таб=СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Таблица"+семТекСтрана());
	
	ПечДокументРасхода="";
	
	Попытка
		ДокПретензии = ДокументОснование.ДокументОснование;
		ДокПретензии.ВыбратьСтроки();
		Пока ДокПретензии.ПолучитьСтроку()=1 Цикл
			ДокОснованиеТ = ДокПретензии.ДокОснованиеТ;
			Если ПустоеЗначение(ДокОснованиеТ)=0 Тогда
				Если ПустоеЗначение(ПечДокументРасхода)=0 Тогда
					ПечДокументРасхода=ПечДокументРасхода+" ,";
				КонецЕсли;
				ПечДокументРасхода=ПечДокументРасхода+СокрЛП(ДокОснованиеТ.НомерДок);
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Если ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя Тогда
		л_ВыгрузкаВТелема();
		//Таб.ИсходнаяТаблица("Возврат");
		// Рассчитаем среднюю скидку по накладной (СуммаСкидкиСНДС*100/СуммаСНДСизКат)
		ВыбратьСтроки();
		ИтогСуммаКат=0;
		Пока ПолучитьСтроку() = 1 Цикл
			ЦенаИзКат=ЦенаТовараПоКатегорииДляТовара(Товар,КатегорияЦены)*(1+ПроцентНДС(СтавкаНДС)/100);
			СуммаКат=ЦенаИзКат*Количество*Коэффициент;
			ИтогСуммаКат=ИтогСуммаКат+СуммаКат;
		КонецЦикла;
//		СкидкаПроц=(1-((Итог("Сумма")+Итог("НДС"))/ИтогСуммаКат))*100;
//		ПечСкидки="Atlaide :"+Строка(Формат(СкидкаПроц,"Ч5.2"))+"%";
	Иначе
		ПечСкидки="";
	КонецЕсли;
	Таб.ВывестиСекцию("Шапка");
	ВыбратьСтроки();
	Ном=0;
	ИтогСуммаКат=0;
	Пока ПолучитьСтроку() = 1 do
		Ном=Ном+1;
		ЦенаИзКат=ЦенаТовараПоКатегорииДляТовара(Товар,КатегорияЦены)*(1+ПроцентНДС(СтавкаНДС)/100);
		СуммаКат=ЦенаИзКат*Количество*Коэффициент;
		ИтогСуммаКат=ИтогСуммаКат+СуммаКат;
		Таб.ВывестиСекцию("Строка");
		Если 1=2 Тогда
//		Если Товар.ВидТовара=Перечисление.ВидыТоваров.Комплект Тогда
			Таб.ВывестиСекцию("ВСоставе");
			Кмп=СоздатьОбъект("Справочник.Комплектация");
			Кмп.ИспользоватьВладельца(Товар);
			Кмп.ВыбратьЭлементы();
			Пока Кмп.ПолучитьЭлемент()>0 Цикл
				Таб.ВывестиСекцию("Состав");
			КонецЦикла;
			Кмп=0;
		КонецЕсли;
	КонецЦикла;         
	
	Если Итог("НДС")=0 Тогда                                
		СчетКред=?(Клиент.Страна=Константа.СтранаРезидент,"2310","2311");
		ПечПроводки="K "+СчетКред+РазделительСтрок;
		ПечПроводки=ПечПроводки+"D 6470";
		ПечСуммыПроводки=СокрЛП(Формат(Итог("Сумма"),"Ч15.2"))+РазделительСтрок;
		ПечСуммыПроводки=ПечСуммыПроводки+СокрЛП(Формат(Итог("Сумма"),"Ч15.2"));
	Иначе
		ПечПроводки="K 2310"+РазделительСтрок;
		ПечПроводки=ПечПроводки+"D 6470"+РазделительСтрок;
		ПечПроводки=ПечПроводки+"D 5721";
		ПечСуммыПроводки=СокрЛП(Формат(Итог("Сумма")+Итог("НДС"),"Ч15.2"))+РазделительСтрок;
		ПечСуммыПроводки=ПечСуммыПроводки+СокрЛП(Формат(Итог("Сумма"),"Ч15.2"))+РазделительСтрок;
		ПечСуммыПроводки=ПечСуммыПроводки+СокрЛП(Формат(Итог("НДС"),"Ч15.2"));
	КонецЕсли;
	
	Таб.ВывестиСекцию("Подвал");
	Таб.Опции(0,0,0,0,ПарСтрДок);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Invoice: "+НомерДок,"");
КонецПроцедуры
//***************************************************************
//
Процедура ПечатьПриход()
	Фирма.ИспользоватьДату(ДатаДок);
	Таб=СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Приход");

	ПечПризнак="";
	Если ПризнакНакладной=Перечисление.ПризнПрихНакл.Недопоставка Тогда
		ПечПризнак="(NEPIEGЎDE)";
	ИначеЕсли ПризнакНакладной=Перечисление.ПризнПрихНакл.Допоставка Тогда
		ПечПризнак="(LIEKЎ PIEGЎDE)";
	КонецЕсли;	

	Таб.ВывестиСекцию("Шапка|Основная");
	Если Валюта=Константа.БазоваяВалюта Тогда
		Таб.ПрисоединитьСекцию("Шапка|Базовая");
	Иначе
		Таб.ПрисоединитьСекцию("Шапка|ВВалюте");
		Таб.ПрисоединитьСекцию("Шапка|Базовая");
	КонецЕсли;
//	Таб.ПрисоединитьСекцию("Шапка|ПродЦены");

	ВыбратьСтроки();
	Ном=0;
	ИтогСуммаВал=0;
	ИтогСуммаЛат=0;
	ИтогСуммаЛатНДС=0;
	ИтогРозСумма=0;
	пКолУпИтог=0;
	Пока ПолучитьСтроку() = 1 do
		Ном=Ном+1;
		Если Валюта=Константа.БазоваяВалюта Тогда
			ЦенаЛат=Окр(Цена,4,1);
			СуммаЛат=Сумма;
			СуммаЛатНДС=НДС;
		//	СуммаЛат=Окр(ЦенаЛат*Количество*Коэффициент,2,1);
			ЦенаВал=Окр(Цена/Курс,4,1);
			СуммаВал=Сумма/Курс;
		//	СуммаВал=Окр(ЦенаВал*Количество*Коэффициент,2,1);
		Иначе
			ЦенаВал=Окр(Цена,4,1);
			СуммаВал=Сумма;
		//	СуммаВал=Окр(ЦенаВал*Количество*Коэффициент,2,1);
			ЦенаЛат=Окр(Цена*Курс,4,1);
			СуммаЛат=Сумма*Курс;
			СуммаЛатНДС=НДС*Курс;
		//	СуммаЛат=Окр(ЦенаЛат*Количество*Коэффициент,2,1);
		КонецЕсли;
		Товар.ИспользоватьДату(ДатаДок);
		ВалПродТовара=Товар.ВалютаПродажи;                
		Если Склад.ВидСклада=Перечисление.ВидыСкладов.Розничный Тогда
			РозЦена=Окр(ЦенаТовараПоКатегорииДляТовара(Товар,Константа.РозничнаяКатегорияЦены)*КурсДляВалюты(ВалПродТовара,ДатаДок),3,1);
		Иначе
			РозЦена=Окр(ЦенаТовараПоКатегорииДляТовара(Товар,Константа.ОсновнаяКатегорияЦены)*КурсДляВалюты(ВалПродТовара,ДатаДок),3,1);
		КонецЕсли;
		РозСумма=Окр(РозЦена*Коэффициент*Количество,2.1);
		ИтогСуммаВал=ИтогСуммаВал+СуммаВал;
		ИтогСуммаЛат=ИтогСуммаЛат+СуммаЛат;
		ИтогСуммаЛатНДС=ИтогСуммаЛатНДС+СуммаЛатНДС;
		ИтогРозСумма=ИтогРозСумма+РозСумма;
		
		СрокГодн = Товар.СрокГоднПоставщика;
		ДопДней = Товар.ДопустСрокГодн;
		Если СрокГодн = 0 Тогда
			пОстДней = "???";
		ИначеЕсли ДопДней = 0 Тогда
			пОстДней = "";
		Иначе	
			пОстДней = СрокРеализ - ДатаДок + 1;
			пОстДней = ?( пОстДней < ДопДней, пОстДней, "" );
		КонецЕсли;

		Попытка
			КоэфНеттоВеса = Окр(1/Товар.ЕдНеттоВеса.Коэффициент,4,1);	
		Исключение
			КоэфНеттоВеса=1;
		КонецПопытки;
		
		пКол = Окр(Количество*Коэффициент,3);
		пКолУп =Окр( ?(Товар.ЛогистикаКолВУпаковке = 0, 0, Окр(Количество*Коэффициент *КоэфНеттоВеса/Товар.ЛогистикаКолВУпаковке, 1, 1 ) ),0);
		
		пКолУпИтог=пКолУпИтог+пКолУп;
		пОжПоставка = ДокументОснованиеТабл;
		
		Таб.ВывестиСекцию("Строка|Основная");
		Если Валюта=Константа.БазоваяВалюта Тогда
			Таб.ПрисоединитьСекцию("Строка|Базовая");
		Иначе
			Таб.ПрисоединитьСекцию("Строка|ВВалюте");
			Таб.ПрисоединитьСекцию("Строка|Базовая");
		КонецЕсли;

		//Таб.ПрисоединитьСекцию("Строка|ПродЦены");
		
	КонецЦикла;
	            
	Если Итог("НДС")=0 Тогда                                
		СчетКред=?(Клиент.Страна=Константа.СтранаРезидент,"5311","5312");
		ПечПроводки="K "+СчетКред+РазделительСтрок;
		ПечПроводки=ПечПроводки+"D 2130";
		ПечСуммыПроводки=СокрЛП(Формат(Итог("Сумма"),"Ч15.2"))+РазделительСтрок;
		ПечСуммыПроводки=ПечСуммыПроводки+СокрЛП(Формат(Итог("Сумма"),"Ч15.2"));
	Иначе
		ПечПроводки="K 5310"+РазделительСтрок;
		ПечПроводки=ПечПроводки+"D 2130"+РазделительСтрок;
		ПечПроводки=ПечПроводки+"D 5721";
		ПечСуммыПроводки=СокрЛП(Формат(Итог("Сумма")+Итог("НДС"),"Ч15.2"))+РазделительСтрок;
		ПечСуммыПроводки=ПечСуммыПроводки+СокрЛП(Формат(Итог("Сумма"),"Ч15.2"))+РазделительСтрок;
		ПечСуммыПроводки=ПечСуммыПроводки+СокрЛП(Формат(Итог("НДС"),"Ч15.2"));
	КонецЕсли;
	
	Таб.ВывестиСекцию("Подвал|Основная");
	Если Валюта=Константа.БазоваяВалюта Тогда
		Таб.ПрисоединитьСекцию("Подвал|Базовая");
	Иначе
		Таб.ПрисоединитьСекцию("Подвал|ВВалюте");
		Таб.ПрисоединитьСекцию("Подвал|Базовая");
	КонецЕсли;

	//Таб.ПрисоединитьСекцию("Подвал|ПродЦены");
	
	Таб.Опции(0,0,0,0,ПарСтрДок);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Invoice:"+НомерДок,"");
КонецПроцедуры

Процедура АктНедопоставки()
	Фирма.ИспользоватьДату(ДатаДок);
	Таб=СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("АктНедопоставки");
	Если ВсегоСуммаШ=0 Тогда
		ПечПодтверждает=Пререкодировка("
		|Iepirkuma nodaІas pўrstўvis ___________________");	
	Иначе
		ПечПодтверждает=Пререкодировка("Pўrtikas produktu departamenta 
		|Direktore Irina Jerneva");
	КонецЕсли;
	
	
	
	Таб.ВывестиСекцию("Шапка");

	ВыбратьСтроки();
	Ном=0;
	ИтогСуммаВал=0;
	ИтогСуммаЛат=0;
	ИтогСуммаЛатНДС=0;
	Пока ПолучитьСтроку() = 1 do
		Ном=Ном+1;
		Если Валюта=Константа.БазоваяВалюта Тогда
			ЦенаЛат=Окр(Цена,4,1);
			СуммаЛат=Сумма;
			СуммаЛатНДС=НДС;
		//	СуммаЛат=Окр(ЦенаЛат*Количество*Коэффициент,2,1);
			ЦенаВал=Окр(Цена/Курс,4,1);
			СуммаВал=Сумма/Курс;
		//	СуммаВал=Окр(ЦенаВал*Количество*Коэффициент,2,1);
		Иначе
			ЦенаВал=Окр(Цена,4,1);
			СуммаВал=Сумма;
		//	СуммаВал=Окр(ЦенаВал*Количество*Коэффициент,2,1);
			ЦенаЛат=Окр(Цена*Курс,4,1);
			СуммаЛат=Сумма*Курс;
			СуммаЛатНДС=НДС*Курс;
		//	СуммаЛат=Окр(ЦенаЛат*Количество*Коэффициент,2,1);
		КонецЕсли;
		Товар.ИспользоватьДату(ДатаДок);
		ИтогСуммаВал=ИтогСуммаВал+СуммаВал;
		ИтогСуммаЛат=ИтогСуммаЛат+СуммаЛат;
		ИтогСуммаЛатНДС=ИтогСуммаЛатНДС+СуммаЛатНДС;
	
		Таб.ВывестиСекцию("Строка");
		
	КонецЦикла;
	            
	Таб.ВывестиСекцию("Подвал");
	
	Таб.Опции(0,0,0,0,ПарСтрДок);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Акт недопоставки: "+НомерДок,"");
КонецПроцедуры


Процедура семПроверкаЦен()
	Путь = КаталогИБ() + "ExtForms\Печать\ПроверкаЦенПрихНакл.ert";
	Если ФС.СуществуетФайл( Путь ) = 1 Тогда
		сп = СоздатьОбъект( "СписокЗначений" );
		сп.Установить("Накл",ТекущийДокумент());
		ОткрытьФорму( "Обработка", сп, Путь );
	КонецЕсли;
КонецПроцедуры
//-----------------------------------------------
Процедура Печать()
	Перем Стр, Код, Поз, Печ;	 
	Выбор=СоздатьОбъект("СписокЗначений");  
	
	Список=СоздатьОбъект("СписокЗначений");
	Список.ДобавитьЗначение( 0, "Накладная");       
	Список.ДобавитьЗначение( 1, "Акт недопоставки");
	Список.ДобавитьЗначение( 2, "По срокам годности");
	Если Пользователь.РазрПечатьНаценки = 1 Тогда
		Список.ДобавитьЗначение( 3, "Наценка" );
		Список.ДобавитьЗначение( 6, "Наценка по спец. ценам" );
		Список.ДобавитьЗначение( 7, "Наценка по блюдам" );
	КонецЕсли;
	Список.ДобавитьЗначение( 4, "Платежное поручение");
	Список.ДобавитьЗначение( 5, "Проверка цен");
	
	Если Найти(Строка(ПризнакНакладной),"Возврат")=1 Тогда
		ПечатьВозврат();
	ИначеЕсли  (ПризнакНакладной=Перечисление.ПризнПрихНакл.Допоставка) ИЛИ
			  (ПризнакНакладной=Перечисление.ПризнПрихНакл.Недопоставка) Тогда
		Список=СоздатьОбъект("СписокЗначений");
		Список.ДобавитьЗначение( 0, "Накладная");       
		Если  (ПризнакНакладной=Перечисление.ПризнПрихНакл.Недопоставка) Тогда
			Список.ДобавитьЗначение( 1, "Акт недопоставки");
		КонецЕсли;
		Рез = "";
		Если Список.ВыбратьЗначение( Рез,,,,1) = 1 Тогда
			Если Рез = 0 Тогда ПечатьПриход();
			ИначеЕсли Рез = 1 Тогда 
				АктНеДопоставки();
			КонецЕсли;
		КонецЕсли;			
	Иначе
		Рез = "";
		Если Список.ВыбратьЗначение( Рез,,,,1) = 1 Тогда
			Если Рез = 0 Тогда ПечатьПриход();
			ИначеЕсли Рез = 1 Тогда 
				Если ПризнакНакладной=Перечисление.ПризнПрихНакл.Недопоставка Тогда
					АктНеДопоставки();
				Иначе
					АктНеДопоставкиПроект();
				КонецЕсли;
			ИначеЕсли Рез = 2 Тогда ПечатьПоСрокамГодности();
			ИначеЕсли Рез = 3 Тогда семПечатьНаценки();
			ИначеЕсли Рез = 4 Тогда семПечатьПлатежки();
			ИначеЕсли Рез = 5 Тогда семПроверкаЦен();
			ИначеЕсли Рез = 6 Тогда семПечатьСпецЦен();
			ИначеЕсли Рез = 7 Тогда семПечатьНаценкиБлюда();
			КонецЕсли;
		КонецЕсли;
		//Если (Список.ВыбратьЗначение(Печ,"Выберите режим работы с ТСД",1,,1)=0) или (Печ="Накладная")  Тогда
		//	ПечатьПриход();
		//Иначе
		//	АктНеДопоставки();
		//КонецЕсли; 			  	
	КонецЕсли;
КонецПроцедуры	

Процедура семУстановитьВалюту( флКопирования )
	Если флКопирования = 0 Тогда
		Валюта = Константа.ОсновнаяВалютаЗакупки;
	КонецЕсли;
	Дата_Курса = ДатаДок;
	Курс = КурсДляВалюты( Валюта, Дата_Курса );
	Валюта_Прежн = Валюта;
	Курс_Прежн = Курс;
КонецПроцедуры

Процедура ВводНового( флКопирования, ОбКоп )

	ЗаполнитьШапку(Контекст);
    семУстановитьВалюту( флКопирования );
	Если флКопирования = 0 Тогда
		ПризнакНакладной=Перечисление.ПризнПрихНакл.Закупка;
		ДатаДок=РабочаяДата();
		Склад=Константа.ОсновнойСклад;
		ДатаИнвойса=ДатаДок;
		ДатаПриходаТовара=ДатаДок;
		Клиент=Константа.ОсновнойПоставщик;
		Если Клиент.Выбран()=1 Тогда
		    СтавкаНДС=семПолучитьСтавкуНДС(Клиент);
		Иначе
			СтавкаНДС=Константа.ОсновнаяСтавкаНДС;
		КонецЕсли;           
		
		Если Пользователь.РазрТолькоВозврат=1 Тогда
			ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя;
		КонецЕсли;
	
		ВыборКлиента("Новый");
		ИспользоватьНП = Нет;
		
		КлиентОтправитель=Клиент;
		СтранаОтпр=Клиент.Страна;
	Иначе
	    ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
		    ВалютаТовара=Товар.ВалютаЗакупки;
   			ЦенаПриобретения=Пересчет(Товар.ЦенаПриобретения,ВалютаТовара,Дата_курса,Валюта,Курс);
   			ЦенаПредыдущая=ЦенаПриобретения;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

//-----------------------------------------------   
 Процедура ВводНаОсновании(ДокОснование)
 	Перем флПрихНаклМоб;//для определения наличия прих моб накл.	
 	флПрихНаклМооб=0;
 	Если 	(ДокОснование.Вид()="Счет") ИЛИ
 			(ДокОснование.Вид()="РасходнаяНакладная") ИЛИ
 			(ДокОснование.Вид()="ПриходнаяНакладная") ИЛИ
 			(ДокОснование.Вид()="РасходнаяРеализатора") ИЛИ
 			(ДокОснование.Вид()="ПриходнаяРеализатора") ИЛИ 
 			(ДокОснование.Вид()="ЗаказПоставщику") ИЛИ
 			(ДокОснование.Вид()="ЗаказКладовщику") Тогда
		ЗаполнитьШапкуНаОсн(Контекст,ДокОснование);
		
		КлиентОтправитель=Клиент;
		СтранаОтпр=Клиент.Страна;
		
//		Если семТекСтрана() <> "LV" Тогда 
			Фирма = глФирма; // при вводе на основании накладных перекачаных из латвийской базы
//		КонецЕсли;
		
		//проверка на проведенность для базы данных филиалов - туда попадают не проведенный документы расхода, на основании которых потом делают приход
		Если (ДокОснование.Вид()="РасходнаяНакладная") и (ДокОснование.Проведен()=1) Тогда
			
			Если ДокОснование.ПризнакНакладной=Перечисление.ПризнРасхНакл.Переработка Тогда
				ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратСПереработки;	
			ИначеЕсли Константа.НовыйМеханизмПретензий.Получить(ДатаДок)=Да Тогда
				Предупреждение("Ввод возвратных накладных можно делать только на основании Эл. заявки на Возврат!");
				СтатусВозврата(0);
			Иначе
				ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя;
			КонецЕсли;
		ИначеЕсли (ДокОснование.Вид()="РасходнаяНакладная") Тогда
			Если ДокОснование.ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратПоставщику Тогда
				ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя;
			Иначе
				ПризнакНакладной=Перечисление.ПризнПрихНакл.Закупка;
			КонецЕсли;
			//виды упаковок
			КолВидУпаковки1=ДокОснование.КолВидУпаковки1;
			КолВидУпаковки2=ДокОснование.КолВидУпаковки2;
			КолВидУпаковки3=ДокОснование.КолВидУпаковки3;
			КолВидУпаковки4=ДокОснование.КолВидУпаковки4;
			КолВидУпаковки5=ДокОснование.КолВидУпаковки5;
			КолВидУпаковки6=ДокОснование.КолВидУпаковки6;
			ИспользоватьРасчетDRN=ДокОснование.ИспользоватьРасчетDRN;
			Нетто=ДокОснование.Нетто;
			Брутто=ДокОснование.Брутто;
			
		ИначеЕсли (ДокОснование.Вид()="Счет") и (ДокОснование.Проведен()=1) Тогда
			Если ДокОснование.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаНаВозврат Тогда
				ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя;
			Иначе
				Предупреждение("Ввод возвратных накладных можно делать только на основании Эл. заявки на Возврат!");
				СтатусВозврата(0);
			КонецЕсли;
		Иначе
			ПризнакНакладной=Перечисление.ПризнПрихНакл.Закупка;
		КонецЕсли;

		Если (ДокОснование.Вид()="РасходнаяНакладная") Тогда
			Если ДокОснование.ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратСХранения Тогда
				ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратСХранения;	
			КонецЕсли;
		КонецЕсли;
		
		ДокументОснование=ДокОснование;
		ДатаДок=РабочаяДата();
		Если (ДокОснование.Вид()="Счет") Тогда
			Склад=ДокОснование.Склад;
		ИначеЕсли (ДокОснование.Вид()="ЗаказКладовщику") Тогда	
			Склад=ДокОснование.СкладИсполнитель;
		Иначе
			Склад=ДокОснование.Склад;
		КонецЕсли;  
		
		ДатаИнвойса=ДатаДок;
		ДатаПриходаТовара=ДатаДок;

		Если (ДокОснование.Вид()="ЗаказКладовщику") Тогда     
	
			Валюта=Константа.БазоваяВалюта;
			Дата_Курса=ДокОснование.ДатаДок;  
			Курс=КурсДляВалюты(Валюта,Дата_Курса);
			Валюта_Прежн=Валюта;
			Курс_Прежн=Курс;
			Клиент=Константа.ОсновнойПоставщик;         
			ИспользоватьНП = Нет;
			ВыборКлиента(); 
		Иначе
			Валюта=ДокОснование.Валюта;
			Дата_Курса=ДокОснование.Дата_Курса;
			Курс=КурсДляВалюты(Валюта,Дата_Курса);
			Валюта_Прежн=Валюта;
			Курс_Прежн=Курс;
			Клиент=ДокОснование.Клиент;
			ВыборКлиента();
		КонецЕсли;  
		
		Если Клиент.НеПлательщик.Получить(ДатаДок)=1 Тогда
			ЛегкоеСообщение("Внимание! Контрагент является не плательщиком НДС!");
		КонецЕсли;
		
		Агент=Клиент.Агент;
		
		ДокОснование.ВыбратьСтроки();
		Пока ДокОснование.ПолучитьСтроку()=1 Цикл
			
			Если ДокОснование.Вид()="ЗаказПоставщику" Тогда
				Если ДокОснование.Подтверждено=0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока();
			Товар=ДокОснование.Товар;
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			ТовКод   = Товар.Код;
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			Количество=ДокОснование.Количество;
			АкцизнаяСтавка=Товар.АкцизнаяСтавка;
			
			ПредПродажПодг=Константа.ОсновноеТребованиеПредПродПодготовки;
			Если ДокОснование.Вид()="ЗаказПоставщику" Тогда
			    Количество = ДокОснование.Подтверждено;
			КонецЕсли;
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			Если глЕстьРеквизитШапки("СтавкаНДС", ДокОснование.Вид()) = 1 Тогда
				СтавкаНДС = ДокОснование.СтавкаНДС;
			КонецЕсли;	                                               
			Если глЕстьРеквизитМнЧ("ЦенаСНДС", ДокОснование.Вид()) = 1 Тогда
				ЦенаСНДС = ДокОснование.ЦенаСНДС;
			КонецЕсли;	
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			УстанЦеныПрих(Контекст);			

			Попытка
				Единица=ДокОснование.Единица;
			Исключение
				Единица=глБазоваяЕдиницаИзмерения(Товар);
			КонецПопытки;
			Попытка
				Коэффициент=ДокОснование.Коэффициент;
			Исключение
				Коэффициент=1;
			КонецПопытки;

			Если (ДокОснование.Вид()="ЗаказКладовщику") ИЛИ (ДокОснование.Вид()="ЗаказПоставщику")Тогда
//			    УстанЦеныПрих(Контекст);
				Сумма=Цена*Количество*Коэффициент;
				Выч_суммы_накл_сНП(Контекст);
			Иначе  
				Цена=ДокОснование.Цена;
				Сумма=ДокОснование.Сумма;
				НДС=ДокОснование.НДС; 
				Выч_суммы_накл_сНП(Контекст);
			КонецЕсли; 
			Всего = Сумма + НДС;
//{{MRG[ --> ]
			Если глЕстьРеквизитМнЧ( "ЦенаСоСкидкой", ДокОснование.Вид() ) = 1 Тогда
				ЦенаСоСкидкой=ДокОснование.ЦенаСоСкидкой;
			КонецЕсли;
//}}MRG[ --> ]
			// сем \\
			Если глЕстьРеквизитМнЧ( "ПоСпецЗаказу", ДокОснование.Вид() ) = 1 Тогда
				ПоСпецЗаказу = ДокОснование.ПоСпецЗаказу;
			КонецЕсли;
			
			Если глЕстьРеквизитМнЧ( "ПоСчету", ДокОснование.Вид() ) = 1 Тогда
				ПоСчету = ДокОснование.ПоСчету;
			КонецЕсли;
			
//			Если ( семТекСтрана() = "LT") или ( семТекСтрана() = "EE") Тогда
				Если глЕстьРеквизитМнЧ( "СрокРеализ", ДокОснование.Вид() ) = 1 Тогда
					СрокРеализ = ДокОснование.СрокРеализ;
				КонецЕсли;
//			КонецЕсли;
			// сем //
			
		КонецЦикла;

		Если ДокОснование.Вид()="ЗаказПоставщику" Тогда
			тт=СоздатьОбъект("ТаблицаЗначений");
			ВыгрузитьТабличнуюЧасть(тт);
			тт.НоваяКолонка("Кол","Число",2,0);
			тт.ВыбратьСтроки();
			Пока тт.ПолучитьСтроку()=1 Цикл
				тт.Кол=1;
			КонецЦикла;
			тт.Свернуть("Товар,ТовКод,Единица,СрокРеализ,ПредПродажПодг,Коэффициент","Кол,ЦенаСоСкидкой,Цена,ЦенаСНДС,НДС,ЦенаПриобретения,ЦенаПредыдущая,Количество,Сумма,АкцизнаяСтавка");

			тт.ВыбратьСтроки();
			Пока тт.ПолучитьСтроку()=1 Цикл
				тт.Цена=тт.Цена/тт.Кол;
				тт.ЦенаСоСкидкой=тт.ЦенаСоСкидкой/тт.Кол;
				тт.ЦенаСНДС=тт.ЦенаСНДС/тт.Кол;
				тт.ЦенаПриобретения=тт.ЦенаПриобретения/тт.Кол;
				тт.ЦенаПредыдущая=Пересчет(тт.Товар.ЦенаПриобретения,Товар.ВалютаЗакупки,Дата_курса,Валюта,Курс);
				тт.АкцизнаяСтавка=тт.АкцизнаяСтавка/тт.Кол;			
			КонецЦикла;
			
			ЗагрузитьТабличнуюЧасть(тт);
		КонецЕсли;
		
			///***ПриемТовара***////	
	ИначеЕсли ДокОснование.Вид()="ОжидаемаяПоставка" Тогда
			флВВодНаОсновании=1;
			ИТ=ПроверкаПриема(ДокОснование);
			кол=ИТ.КоличествоСтрок();
//			Если кол=0 Тогда //нет приемных документов
				Сообщить("Отсутствуют документы приема Товара.");
				ИТ.НоваяСтрока();
				ИТ.УстановитьЗначение(1,1,ДокОснование);
				флПрихНаклМоб=0;
//			Иначе
//				Сообщить("Количество док. приема Товара: "+ИТ.КоличествоСтрок());
//				флПрихНаклМоб=1;
//			КонецЕсли;
			
			ЗаполнитьШапкуНаОсн(Контекст,ДокОснование);
			КлиентОтправитель=Клиент;
			СтранаОтпр=Клиент.Страна;
//			Если семТекСтрана() <> "LV" Тогда 
				Фирма = глФирма; // при вводе на основании накладных перекачаных из латвийской базы
//			КонецЕсли;
			ПризнакНакладной=Перечисление.ПризнПрихНакл.Закупка;
			
	    	ДокументОснование=ДокОснование;
			ДатаДок=РабочаяДата();
			Склад=ДокОснование.Склад;
	
			ДатаИнвойса=ДатаДок;
			ДатаПриходаТовара=ДатаДок;

			Валюта=ДокОснование.Валюта;
			Дата_Курса=ДокОснование.Дата_Курса;
			Курс=КурсДляВалюты(Валюта,Дата_Курса);
			Валюта_Прежн=Валюта;
			Курс_Прежн=Курс;
			Клиент=ДокОснование.Клиент;
			ВыборКлиента();			
			
			
			Агент=Клиент.Агент;
			
			ОбновитьТЧ();
			флВВодНаОсновании=0;
    Иначе
		Предупреждение("Эту накладную нельзя вводить на основании выбранного вида документа!");
		СтатусВозврата(0);
	КонецЕсли;
КонецПроцедуры
//-----------------------------------------------
Процедура ПересчетНП()
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
	    Выч_суммы_накл_сНП(Контекст);
	КонецЦикла;
КонецПроцедуры
Процедура ПриходованиеБезНДС() 
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
	Выч_суммы_накл_сНП(Контекст); 
	КонецЦикла;
КонецПроцедуры       

//*********************************************************             

Процедура СбросСкидки()
     // Пересчитываем цены и суммы в таблице ввода товаров
     Если КоличествоСтрок()>0 Тогда
        ВыбратьСтроки();
        Пока ПолучитьСтроку()>0 Do
         //Сброс скидки
//              Цена=Окр(Цена*100/(100-ПроцСкидки),2);
		   	Сумма=Окр(Сумма*100/(100-ПроцСкидки),2);
		   	ВычислитьЦену(); 
         // Пересчитываем сумму товара
              Выч_суммы_накл_сНП(Контекст);
        КонецЦикла;
     КонецЕсли;
КонецПроцедуры


//*********************************************************
Процедура РасчетСкидки(Реж="")
// Сбросим предыдущуу скидку

  	СбросСкидки();

    ВсегоБезНДС=Итог("Сумма");
  	
	Если Реж="Сумма" Тогда
		ПроцентСкидки=СуммаСкидки/ВсегоБезНДС*100;
	Иначе
		СуммаСкидки=(ВсегоБезНДС*ПроцентСкидки)/100;
	КонецЕсли;
// Скидка вычисляется от общей суммы без НДС
   //  Вычисляем сумму скидки
    СкидкаНакл=(ВсегоБезНДС*ПроцентСкидки)/100;
     Если СкидкаНакл>ВсегоБезНДС  Тогда
         Предупреждение("Сумма скидки превышает общую сумму !!!");
         Возврат;
     КонецЕсли;
     ПроцСкидки=ПроцентСкидки;    // Сохраняем процент скидки во внутренней переменной
                                  // для возврата к начальным цифрам во избежание потери
                                  // при вводе пользователем нового процента
     // Пересчитываем цены и суммы в таблице ввода товаров
     Если КоличествоСтрок()>0 тогда
        ВыбратьСтроки();
        Пока ПолучитьСтроку()>0 Цикл
         // Новая цена с учетом скидки
//            Цена=Окр(Цена-(Цена*ПроцентСкидки/100),2);
//           	ЦенаСНДС=Цена*(1+(ПроцентНДС(СтавкаНДС)/100));
		   	Сумма=Окр(Сумма-(Сумма*ПроцентСкидки/100),2);
		   	ВычислитьЦену(); 
         // Пересчитываем сумму товара
            Выч_суммы_накл_сНП(Контекст,,1);
        КонецЦикла;
     КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьКатегорииВозврата()
	
	Если ДокументОснование.Вид()="Счет" Тогда
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");
	ТекстЗапроса="SELECT $ПретензияПолученнаяСтроки.Товар [Товар $Справочник.Номенклатура]
				|	, $ПретензияПолученнаяСтроки.СутьПретензии [СутьПретензии $Справочник.Претензии]
				|	, $ПретензияПолученнаяСтроки.СутьПретензииПодтв [СутьПретензииПодтв $Справочник.Претензии]
				| FROM $Документ.ПриходнаяНакладная AS ПриходнаяНакладная (NOLOCK)
				|	INNER JOIN $ДокументСтроки.Счет AS СчетСтроки (NOLOCK) ON RIGHT($ПриходнаяНакладная.ДокументОснование,9) = СчетСтроки.IDDOC
				|	INNER JOIN $Документ.Счет AS Счет (NOLOCK) ON  СчетСтроки.IDDOC = Счет.IDDOC
				|	INNER JOIN $ДокументСтроки.ПретензияПолученная AS ПретензияПолученнаяСтроки (NOLOCK) ON RIGHT($Счет.ДокументОснование,9) = ПретензияПолученнаяСтроки.IDDOC AND $СчетСтроки.Товар = $ПретензияПолученнаяСтроки.Товар
				| WHERE (ПриходнаяНакладная.IDDOC = :ВыбДок)
				|";
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДок",ТекущийДокумент());
	итТабл=СоздатьОбъект("ИндексированнаяТаблица");
	ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итТабл);
	итТабл.ДобавитьИндекс("иТовар","*Товар");
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Если итТабл.НайтиСтроку("иТовар",Товар,,1)>0 Тогда
			НазначитьТип("КатегорияВозврата","Справочник.Претензии");
			КатегорияВозврата=итТабл.СутьПретензии;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписи() Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ПриЗаписи()
//Закомментировано Инсталлятором МОД:Процедура ПриЗаписи() 
	Если семМожноЗаписать( Контекст ) = 0 Тогда Возврат; КонецЕсли;
	// возврат с переработки - только на основании расходника
	Если ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратСПереработки Тогда
		Если (ДокументОснование.Выбран()=0) или (ДокументОснование.Вид() <> "РасходнаяНакладная") Тогда
			Предупреждение("Возврат с переработки обязательно должен иметь основание: расходную накладную!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	ИначеЕсли (ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя) И (Константа.НовыйМеханизмПретензий.Получить(ДатаДок)=Да) И (ДокументОснование.Вид()="Счет") Тогда
		Записать();
		ЗаполнитьКатегорииВозврата();
	КонецЕсли;
	
	
	// надо записать партии
	ОтменитьЗапись = 0;
	СпрПартии 	   = СоздатьОбъект("Справочник.Партии");
	
	// а в эту ТЗ запомним партии, чтобы в транзакции не затрагивать наш док
	// после записи всех партий - пропишем их в документ всех сразу
	ТЗПартии = СоздатьОбъект("ТаблицаЗначений");
	ТЗПартии.НоваяКолонка("НомерСтрокиДок");
	ТЗПартии.НоваяКолонка("Партия");

	НачатьТранзакцию();
	
	// проверка упаковки
	ЕстьУпаковка=0;
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Если Товар.ЯвляетсяУпаковкой=Перечисление.Булево.Да Тогда
			ЕстьУпаковка=1;
		КонецЕсли;

		Если ПризнакНакладной= Перечисление.ПризнПрихНакл.ВозвратОтПокупателя Тогда
			//прописываем правильно агента в зависимости от группы товара
			АгентПоТовару=глПолучитьАгентаПоТовару(Клиент, Агент,Товар);
		КонецЕсли;			

		Если Проведен()=0 Тогда

				
			Если (Клиент.Страна.ВидСтраны <> Перечисление.ВидыСтран.СтранаРезидент) и ((ПризнакНакладной<>Перечисление.ПризнПрихНакл.Допоставка) И (ПризнакНакладной<>Перечисление.ПризнПрихНакл.Хранение) И (ПризнакНакладной<>Перечисление.ПризнПрихНакл.ВозвратСХранения) ) Тогда
				ВесНетто=Товар.Вес*Количество*Коэффициент;
				Если Товар.ЯвляетсяУпаковкой = Перечисление.Булево.Да Тогда
					ВесНетто=0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если (Партия.Выбран() = 0) и (Товар.Выбран() = 1) Тогда
			СпрПартии.ИспользоватьВладельца(Товар);
			глСоздатьНовыйОбъект(СпрПартии); 
			Попытка
				//Закомментировано Инсталлятором МОД:СпрПартии.Записать();
	//Начало текста, вставленного Инсталлятором МОД
				СпрПартии.Записать();
	//Конец текста, вставленного Инсталлятором МОД

			Исключение  
				Сообщить("Строка документа: " + НомерСтроки + " Ошибка: " + ОписаниеОшибки());
				ОтменитьЗапись = 1;
				Прервать;
			КонецПопытки;
			ТЗПартии.НоваяСтрока();
			ТЗПартии.НомерСтрокиДок = НомерСтроки;
			ТЗПартии.Партия = СпрПартии.ТекущийЭлемент();
		Иначе
			
		КонецЕсли;
		
		Если ПустоеЗначение(СрокРеализПредПрих)=1 Тогда
			УстановитьПредСрокРеализ();
            Если ПустоеЗначение(СрокРеализПредПрих)=1 Тогда
                УстановитьПредСрокРеализ(360);  
            КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	//Если (ЕстьУпаковка=1) и (КолВидУпаковки1+КолВидУпаковки2+КолВидУпаковки3+КолВидУпаковки4+КолВидУпаковки5+КолВидУпаковки6=0) Тогда
	//	Предупреждение("В документе присутствуют товары, являющиеся упаковкой! 
	//	|Необходимо заполнить их вес на закладке 'Статистика'");
	//	СтатусВозврата(0);
	//	Возврат;
	//КонецЕсли;
	
	Если ОтменитьЗапись=0 Тогда  
		// запишем созданные партии
		ЗафиксироватьТранзакцию();
		
		// теперь занесем партии в спецификацию нашего документа
		ТЗПартии.ВыбратьСтроки();
		Пока ТЗПартии.ПолучитьСтроку()=1 Цикл
			ПолучитьСтрокуПоНомеру(ТЗПартии.НомерСтрокиДок);
			Партия = ТЗПартии.Партия;
		КонецЦикла;
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;

	Если Итог("АкцизнаяСтавка")>0 Тогда
		ДокАкциз=СоздатьОбъект("Документ.Служ_АкцизПоВидам");
		Если ПустоеЗначение(АкцизПоВидам)=1 Тогда
			ДокАкциз.Новый();
			ДокАкциз.ДатаДок=Дата(1980,ДатаМесяц(ДатаДок),ДатаЧисло(ДатаДок));
			ЗаполнитьШапку(ДокАкциз);
		Иначе
			ДокАкциз.НайтиДокумент(АкцизПоВидам);
			ДокАкциз.УдалитьСтроки();
		КонецЕсли;
		
		тАкциз=СоздатьОбъект("ТаблицаЗначений");
		ДокАкциз.ВыгрузитьТабличнуюЧасть(тАкциз);
		тАкциз.УдалитьКолонку("Акциз");
		тАкциз.НоваяКолонка("Акциз","Число",12,5,"Акциз",,,);
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
			Если Товар.АкцизныйТовар=1 Тогда
				тАкциз.НоваяСтрока();
				тАкциз.ВидАкциза = Товар.ВидАкциза;
				тАкциз.Акциз = АкцизнаяСтавка*Количество*Коэффициент;
			КонецЕсли;
		КонецЦикла;
		
		тАкциз.Свернуть("ВидАкциза","Акциз");
		ДокАкциз.ЗагрузитьТабличнуюЧасть(тАкциз);
		ОбъектЗаписать(ДокАкциз);
		АкцизПоВидам=ДокАкциз.ТекущийДокумент();
		
	ИначеЕсли ПустоеЗначение(АкцизПоВидам)=0 Тогда
		ДокАкциз=СоздатьОбъект("Документ.Служ_АкцизПоВидам");
		ДокАкциз.НайтиДокумент(АкцизПоВидам);
		ОбъектУдалить(ДокАкциз,);
	КонецЕсли;
	
	
	Если ДокументОснование.Выбран()=1 Тогда
		Если (ДокументОснование.Вид()="ЗаказПоставщику")
		ИЛИ (ДокументОснование.Вид()="ОжидаемаяПоставка")  Тогда

			//Заполнение ДокументОснованиеТабл документом основания, если ПустоеЗначение.
			ВыбратьСтроки();
			Пока ПолучитьСтроку() = 1 Цикл
				Если ПустоеЗначение(ДокументОснованиеТабл)=1 Тогда
					ДокументОснованиеТабл=ДокументОснование;
				КонецЕсли;
			КонецЦикла;
			
			разн=РазницаСравнения(ТекущийДокумент(),ДокументОснование);	
			Если (ЗакрытьЗаказ=0)И(разн=0) Тогда
				рез=Вопрос("Cовпадает количество в приходе ! Это единственный документ в этом приходе ?",4,0);
				Если (рез=6)ИЛИ (рез=-1) Тогда
					ЗакрытьЗаказ=1;
				Иначе
					ЗакрытьЗаказ=0;
				КонецЕсли;	
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;		
	
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписи()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
//	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
	стар_ПриЗаписи();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
   

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Процедура ОбработкаВыбораЗначения(ВыбЗнач,ИдЭлДиал,ФлСтОбр)
	Если ИдЭлДиал = "Агент" Тогда
//	    Если ОчищениеТаблЧасти(Контекст) = 0 Тогда
//	        ФлСтОбр = 0;
//	    КонецЕсли;
	КонецЕсли;
	Если ИдЭлДиал = "Клиент" Тогда
    	стар_Клиент = Клиент;
	КонецЕсли;
КонецПроцедуры 
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Процедура АктНеДопоставкиПроект()
	Если ПустоеЗначение(ДокументОснование)=1 Тогда
		Предупреждение("Нет документа НА ОСНОВАНИИ !");
		Возврат;
	КонецЕсли;
	
	Предупреждение("Акт недопоставки печатается из документа с признаком <Недопоставка>!
	|				В данном варианте печатается только проект акта.");
	
	Т2 = СоздатьОбъект("ТаблицаЗначений");
	Т2.НоваяКолонка("Товар","Справочник.Номенклатура");   
	Т2.НоваяКолонка("Единица","Справочник.Единицы");   
	Т2.НоваяКолонка("Количество","Число",10,3);              
	Т2.НоваяКолонка("КоличествоИ","Число",10,3);
	Т2.НоваяКолонка("Цена","Число",17,4);              
	
	Для Ном=1 по КоличествоСтрок() Цикл     
		ПолучитьСтрокуПоНомеру(Ном);
		Т2.НоваяСтрока();
		Т2.Товар = Товар;            
		Т2.Единица = Единица;
		Т2.Количество = Количество;
		Т2.Цена = Цена;
	КонецЦикла; 		
	
	Для Ном=1 по ДокументОснование.КоличествоСтрок() Цикл     
		ДокументОснование.ПолучитьСтрокуПоНомеру(Ном);
		Поз=0;
		Если Т2.НайтиЗначение(ДокументОснование.Товар,Поз,"Товар")=0 Тогда   
			Т2.НоваяСтрока();
			Т2.Товар = ДокументОснование.Товар;            
			Т2.Единица = ДокументОснование.Единица;
			Т2.КоличествоИ = ДокументОснование.Подтверждено;      
			Т2.Цена = ДокументОснование.Цена;
			// kautkaapeec jaanjem no invoisa 26.01.2004
			//Т2.Цена = ДокументОснование.Товар.ЦенаПриобретения;
		Иначе
			Т2.ПолучитьСтрокуПоНомеру(Поз);
			Т2.КоличествоИ = Т2.КоличествоИ+ДокументОснование.Подтверждено; 
		КонецЕсли;
	КонецЦикла;  
	
	Таб=СоздатьОбъект("Таблица");	
	Таб.ИсходнаяТаблица("АктНеДопоставкиПроект");
	Таб.ВывестиСекцию("Шапка");  
	
	Ном2=0; 
	ТРазнЦ = 0;
	ТРазн = 0;
	Для Ном=1 по Т2.КоличествоСтрок() Цикл          
		Т2.ПолучитьСтрокуПоНомеру(Ном);
		Разн =	Т2.Количество - Т2.КоличествоИ;   
		РазнЦ = Окр(Разн * Т2.Цена,2);
		Если (Разн<>0) Тогда
			Ном2 = Ном2 + 1;
			Таб.ВывестиСекцию("Строка");      
			ТРазн = ТРазн + Разн;
			ТРазнЦ = ТРазнЦ + РазнЦ;
		КонецЕсли;
	КонецЦикла; 		   
	
	Если Ном2 = 0 Тогда
		Предупреждение("Разницы НЕ обнаружено !");
		Возврат;
	КонецЕсли;             
	
	Таб.ВывестиСекцию("Ноги"); 	
	
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Печать  - АКТ Недопостаки ...","");	
	
КонецПроцедуры                

Процедура ПриНачалеРедактированияСтроки()
	
	ЗнРекв=ПолучитьАтрибут(Форма.ТекущаяКолонка());
	Если ТипЗначенияСтр(ЗнРекв)="Перечисление" Тогда
		Если ЗнРекв.Вид()="Булево" Тогда
			Если ЗнРекв<>Да Тогда
				ЗнРекв=Да;
			Иначе
				ЗнРекв=Нет;
			КонецЕсли;
			УстановитьАтрибут(Форма.ТекущаяКолонка(),ЗнРекв);
			СтатусВозврата(0);
			
			Если Форма.ТекущаяКолонка()="ПредПродажПодг" Тогда
				Если (Товар.ВидПредпродажнойПодготовки=Перечисление.ВидыПредпродажнойПодготовки.Вид1) Тогда
					ПроблемаНесоответствияМаркировкиLV=ПредПродажПодг;
				Иначе
					ПроблемаНесоответствияМаркировкиLV=Нет;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


//======================================================================
Процедура УстановитьПредСрокРеализ(п_колдней=180)
		Если (ПризнакНакладной <> Перечисление.ПризнПрихНакл.Недопоставка) Тогда
			
			//проведем проверку последнего прихода товара и срока реализации
			
			Запрос=СоздатьОбъект("ODBCRecordSet");
			ТекстЗапроса="SELECT TOP 1 $ПартииТоваров.СрокРеализации СрокРеализ 
			|					, ПартииТоваров.IDDOC [Документ $Документ]
			|					, ПартииТоваров.IDDOCDEF Документ_вид
			|					, $ПартииТоваров.ОстатокТовара Количество
			|			  FROM $Регистр.ПартииТоваров AS ПартииТоваров (NOLOCK)
			|			  WHERE ($ПартииТоваров.Товар = :ВыбТовар)
			|					AND ПартииТоваров.DATE_TIME_IDDOC >= :НачДата AND ПартииТоваров.DATE_TIME_IDDOC <= :КонДата~
			|					AND ПартииТоваров.DEBKRED = 0
			|					AND $ПартииТоваров.КодОперации = :КодОп1
			|					AND $ПартииТоваров.Контрагент = :ВыбПоставщик
			|			  ORDER BY $ПартииТоваров.СрокРеализации DESC
			|";
			
			Запрос.УстановитьТекстовыйПараметр("ВыбТовар", Товар);
			Запрос.УстановитьТекстовыйПараметр("ВыбСрокРеализ", СрокРеализ);
			Запрос.УстановитьТекстовыйПараметр("ВыбПоставщик", Клиент);
			Запрос.УстановитьТекстовыйПараметр("НачДата", ДатаДок - п_колдней);
			Запрос.УстановитьТекстовыйПараметр("КонДата", ?(Выбран()=0,СформироватьПозициюДокумента(ПолучитьДокументТА()),СформироватьПозициюДокумента(ТекущийДокумент(),-1)));
			Запрос.УстановитьТекстовыйПараметр("КодОп1", ЗакупкаТовара);
			табл=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
			Если табл.КоличествоСтрок()=1 Тогда
				табл.ПолучитьСтрокуПоНомеру(1);
				СрокРеализПредПрих = табл.СрокРеализ;
				Если (табл.СрокРеализ>СрокРеализ)И(флВВодНаОсновании=0) Тогда
					ПроблемаДопустСрокаРеализации = Да;
//					Предупреждение("Введенный срок реализации меньше, чем поступал товар с максимальным сроком!");
					//табл.ВыбратьСтроку();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
КонецПроцедуры

Процедура ПриОкончанииРедактированияСтроки()
	Если Форма.ТекущаяКолонка()="СрокРеализ" Тогда
		УстановитьПредСрокРеализ();               
	ИначеЕсли (Форма.ТекущаяКолонка()="Количество") ИЛИ (Форма.ТекущаяКолонка()="Количество") ИЛИ (Форма.ТекущаяКолонка()="Товар") Тогда
	КонецЕсли;

	глДобавитьТоварДляИзменения(Товар);
	                                   
КонецПроцедуры
                           

Процедура ПриУдаленииСтроки()
	глДобавитьТоварДляИзменения(Товар);
КонецПроцедуры

Процедура ПриНачалеВыбораЗначения(ИдентЭлем,ФлагСт)
	                                               
	Если ИдентЭлем="ДокументПрихода" Тогда
		                   
		СтатусВозврата(0);
		ФлагСт=0;
		СписДок=СоздатьОбъект("СписокЗначений");
		Док=СоздатьОбъект("Документ");
		Док.ВыбратьПодчиненныеДокументы(ДокументОснование.ДатаДок,,ДокументОснование);
		Пока Док.ПолучитьДокумент()=1 Цикл      
			Если Док.Вид()="ПриходнаяНакладная" Тогда
				Если Док.ПризнакНакладной=Перечисление.ПризнПрихНакл.Закупка Тогда
					СписДок.ДобавитьЗначение(Док.ТекущийДокумент(),""+СокрЛП(Док.НомерДок)+" ("+Док.ДатаДок+") - " +формат(Док.ВсегоСуммаШ,"Ч12.2")+" "+Док.Валюта);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если СписДок.РазмерСписка()>0 Тогда
			ВыбДок=ДокументПрихода;
			Если СписДок.ВыбратьЗначение(ВыбДок,,,,0)=1 Тогда
				ДокументПрихода=ВыбДок;
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИдентЭлем="ПризнакНакладной" Тогда
		ФлагСт=0;
		сп=СоздатьОбъект("СписокЗначений");
		сп.ДобавитьЗначение(Перечисление.ПризнПрихНакл.Закупка);
		сп.ДобавитьЗначение(Перечисление.ПризнПрихНакл.Допоставка);
		сп.ДобавитьЗначение(Перечисление.ПризнПрихНакл.Недопоставка);
		сп.ДобавитьЗначение(Перечисление.ПризнПрихНакл.ВозвратСПереработки);
		сп.ДобавитьЗначение(Перечисление.ПризнПрихНакл.Хранение);
		сп.ДобавитьЗначение(Перечисление.ПризнПрихНакл.ВозвратСХранения);
		
		Если Константа.НовыйМеханизмПретензий.Получить(ДатаДок)<>Да Тогда
			//по старой системе разрешаем выбрать возврат от покупателя в приходном документе 
			сп.ДобавитьЗначение(Перечисление.ПризнПрихНакл.ВозвратОтПокупателя);
		КонецЕсли;
		
		сп.ВыбратьЗначение(ПризнакНакладной,,,,1);
		
		Доступ();
		
		Если ПризнакНакладной=Перечисление.ПризнПрихНакл.Недопоставка Тогда
			кнОбновитьТЧ();
		КонецЕсли;	
	
	КонецЕсли;
	
	
	
КонецПроцедуры
//*****************************************************************************
// СтатистикаУпаковки()
//
// Параметры:
//	интервал 2 месяца назад от даты документа, поставщик
//
// Возвращаемое значение:
//	таблица   с данными по упаковке из предвдущих инвойсов этого же поставщика
//
// Описание: 
// Обращается к регистру "Интрастат", ищет документы
//  возвращает данные об упаковке
Процедура СтатистикаУпаковки()   
	Если Клиент.Выбран()=0 Тогда
		Предупреждение("Не указан поставщик!");
		Возврат;
	КонецЕсли; 
	RS = СоздатьОбъект("ODBCRecordset");
	RS.УстБД1С();  
	
	Если Выбран()=1 Тогда
		Рег=СоздатьОбъект("Регистр.Интрастат");
		Если Рег.ВыбратьДвиженияДокумента(ТекущийДокумент()) <> 0 Тогда
			Сколько=11; // текущий потом выкинем
		Иначе
			Сколько=10;
		КонецЕсли;
	Иначе
		Сколько=10;	
	КонецЕсли;
	
	ТекстЗапроса = " 
	|SELECT  TOP "+Сколько+" * FROM
	|(SELECT 
	|distinct    
	|Жур.DOCNO as Номер,
	|CAST(LEFT(Рег.DATE_TIME_IDDOC,8) as DateTime)    [Дата], 
	|Жур.IDDoc as [Ссылка$Документ.ПриходнаяНакладная],
	|$Док.КолВидУпаковки1  Дерево, 
	|$Док.КолВидУпаковки2  Пластик,   
	|$Док.КолВидУпаковки3  Картон, 
	|$Док.КолВидУпаковки4  Металл, 
	|$Док.КолВидУпаковки5  Стекло 
	|  from  $Документ.ПриходнаяНакладная as Док  (NOLOCK)
	| INNER JOIN    
	|  $Регистр.Интрастат  Рег  (NOLOCK) ON  Рег.IDDoc = Док.IDDoc    
	|INNER JOIN     
	|_1SJourn Жур    ON  Рег.IDDoc = Жур.IDDoc   
	|where   (Рег.Date_Time_IDDOC BETWEEN :ВыбНачПериода  AND :ВыбКонПериода~ )   
	|and ($Док.КолВидУпаковки1+$Док.КолВидУпаковки2+$Док.КолВидУпаковки3+$Док.КолВидУпаковки4+$Док.КолВидУпаковки5+$Док.КолВидУпаковки6 <>0)
	| and $Док.Клиент = :ВыбКонтрагент) as QRY";      
	
	RS.УстановитьТекстовыйПараметр("ВыбКонтрагент", Клиент);  
	RS.УстановитьТекстовыйПараметр("ВыбНачПериода", ДобавитьМесяц(ДатаДок,-2)); 
	RS.УстановитьТекстовыйПараметр("ВыбКонПериода", ДатаДок);  
	
	ТЗ=СоздатьОбъект("ТаблицаЗначений");
	RS.ВыполнитьИнструкцию(ТекстЗапроса,ТЗ);  
	
	Если Выбран()=1 Тогда
		НомСтр=0;
		Если ТЗ.НайтиЗначение(ТекущийДокумент(),НомСтр,"Ссылка")  <> 0  Тогда
			ТЗ.УдалитьСтроку(НомСтр);	
		КонецЕсли;	
	КонецЕсли;
	
	ТЗ.Сортировать("-Ссылка",1);
	ТЗ.УстановитьПараметрыКолонки("Номер",,,,,14);
	ТЗ.УстановитьПараметрыКолонки("Дата",,,,,11);
	ТЗ.ВидимостьКолонки("Ссылка",0);
	ТЗ.УстановитьПараметрыКолонки("Дерево",,,,,10,"Ч010.2");
	ТЗ.УстановитьПараметрыКолонки("Пластик",,,,,10,"Ч010.2");
	ТЗ.УстановитьПараметрыКолонки("Картон",,,,,10,"Ч010.2");   
	ТЗ.УстановитьПараметрыКолонки("Стекло",,,,,10,"Ч010.2");   
	ТЗ.УстановитьПараметрыКолонки("Металл",,,,,10,"Ч010.2");   
	ТЗ.НоваяКолонка("Нетто","Число",,,,10,"Ч010.2");
	ТЗ.НоваяКолонка("Брутто","Число",,,,10,"Ч010.2");  
	// дополняем таблицу весои нетто и брутто найденных приходов
	ТЗ.ВыбратьСтроки();
	Пока ТЗ.ПолучитьСтроку()=1 Цикл
		Ссылка=ТЗ.Ссылка;
		ВыбратьСтроки();
		НеттоДок=0;
		БруттоДок=0;     
		Ссылка.ВыбратьСтроки();
		Пока Ссылка.ПолучитьСтроку()=1 Цикл
			НеттоДок=НеттоДок+Ссылка.Товар.Вес*Ссылка.Количество;
		КонецЦикла; 
		НеттоДок=Макс(НеттоДок,Ссылка.Нетто);  
		БруттоДок=Макс((НеттоДок+ТЗ.Дерево+ТЗ.Пластик+ТЗ.Картон+ТЗ.Металл+ТЗ.Стекло),Ссылка.Брутто); 
		ТЗ.Нетто=НеттоДок;
		ТЗ.Брутто=БруттоДок;
	КонецЦикла;    
	
	НеттоДок=0;
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		НеттоДок=НеттоДок+Товар.Вес*Количество;
	КонецЦикла; 
	НеттоДок=Макс(НеттоДок,Нетто);  
	
	// дополняем таблицу усредненной строкой:
	
	Если ТЗ.Итог("Нетто")<> 0 Тогда
		ТЗ.НоваяСтрока();
		ТЗ.Номер="СРЕДНЕЕ:";   	
		Пропорция= НеттоДок / ТЗ.Итог("Нетто") ;
		ТЗ.Дерево=Окр(ТЗ.Итог("Дерево") *Пропорция,3,1);
		ТЗ.Пластик=Окр(ТЗ.Итог("Пластик") *Пропорция,3,1);
		ТЗ.Картон=Окр(ТЗ.Итог("Картон") *Пропорция,3,1);
		ТЗ.Металл=Окр(ТЗ.Итог("Металл") *Пропорция,3,1);
		ТЗ.Стекло=Окр(ТЗ.Итог("Стекло") *Пропорция,3,1);
	КонецЕсли;
	
	Если ФС.СуществуетФайл(КаталогИБ()+"ExtForms\INTRASTAT\РасчетУпаковки.ert")=1 Тогда
		Параметр=СоздатьОбъект("СписокЗначений");
		Параметр.ДобавитьЗначение(ТекущийДокумент());  //1
		Параметр.ДобавитьЗначение(ТЗ);                                    //5
		Параметр.ДобавитьЗначение(НеттоДок);                       //3
		Параметр.ДобавитьЗначение(КолВидУпаковки1);     //4
		Параметр.ДобавитьЗначение(КолВидУпаковки2);    //5
		Параметр.ДобавитьЗначение(КолВидУпаковки3);     //6
		Параметр.ДобавитьЗначение(КолВидУпаковки4);      //7
		Параметр.ДобавитьЗначение(КолВидУпаковки5);     //8
		Параметр.ДобавитьЗначение(Брутто);                             //9
		ОткрытьФормуМодально("Отчет",Параметр,КаталогИБ()+"ExtForms\INTRASTAT\РасчетУпаковки.ert");   
		КолВидУпаковки1=Параметр.ПолучитьЗначение(4);
		КолВидУпаковки2=Параметр.ПолучитьЗначение(5);
		КолВидУпаковки3=Параметр.ПолучитьЗначение(6);
		КолВидУпаковки4=Параметр.ПолучитьЗначение(7);
		КолВидУпаковки5=Параметр.ПолучитьЗначение(8);
		Брутто=Параметр.ПолучитьЗначение(9);
	Иначе
		Зн=0;
		Если ТЗ.ВыбратьСтроку(Зн,"",60)=1 Тогда
			ТЗ.ПолучитьСтрокуПоНомеру(Зн);
			КолВидУпаковки1=ТЗ.Дерево;
			КолВидУпаковки2=ТЗ.Пластик;
			КолВидУпаковки3=ТЗ.Картон;
			КолВидУпаковки4=ТЗ.Металл;
			КолВидУпаковки5=ТЗ.Стекло; 
			
			Брутто=Нетто+КолВидУпаковки1+КолВидУпаковки2+КолВидУпаковки3+КолВидУпаковки4+КолВидУпаковки5+КолВидУпаковки6;
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры	// СтатистикаУпаковки()

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Процедура РасчетБрутто()
	Брутто=Нетто+КолВидУпаковки1+КолВидУпаковки2+КолВидУпаковки3+КолВидУпаковки4+КолВидУпаковки5+КолВидУпаковки6;
КонецПроцедуры	// РасчетБрутто()
//-----------------------------------------------

Процедура кнФункции()
	
	МожноКопировать=0;
	текКолонка=Форма.ТекущаяКолонка();
	ЗнРекв=ПолучитьАтрибут(Форма.ТекущаяКолонка());
	Если ТипЗначенияСтр(ЗнРекв)="Перечисление" Тогда
		МожноКопировать=1;
	КонецЕсли;
	
	Если (текКолонка="СрокРеализ") ИЛИ (текКолонка="Цена") ИЛИ (текКолонка="Сумма") Тогда
		МожноКопировать=1;
	КонецЕсли;
	
	Если (МожноКопировать=1) Тогда
		
		ВыбТовар=Товар;
		ВыбЗнач=ПолучитьАтрибут(текКолонка);
		Меню=СоздатьОбъект("СписокЗначений");
		Меню.ДобавитьЗначение(1,"Скопировать на выбранные товары");
		Меню.ДобавитьЗначение(2,"Скопировать на все товары");
		выб=1;
		Если Меню.ВыбратьЗначение(выб,,,,1)=1 Тогда
			Если выб=1 Тогда
				ВыбратьСтроки();
				Пока ПолучитьСтроку()=1 Цикл
					Если Товар=ВыбТовар Тогда
						УстановитьАтрибут(текКолонка,ВыбЗнач);
						Если текКолонка="Цена" Тогда
							Выч_суммы_накл_сНП(Контекст,,1);
						ИначеЕсли текКолонка="Сумма" Тогда
							ВычислитьЦену(); Выч_суммы_накл_сНП(Контекст);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ВыбратьСтроки();
				Пока ПолучитьСтроку()=1 Цикл
					УстановитьАтрибут(текКолонка,ВыбЗнач);
					Если текКолонка="Цена" Тогда
						Выч_суммы_накл_сНП(Контекст,,1);
					ИначеЕсли текКолонка="Сумма" Тогда
						ВычислитьЦену(); Выч_суммы_накл_сНП(Контекст);
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//**************************************************************************
Процедура ВыбратьЦену()
	        
	Если НомерСтроки=0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокДок=СоздатьОбъект("СписокЗначений");      
	Если ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя Тогда
		ТекстЗапроса="SELECT ОборотыТоваров.IDDOC [Документ $Документ]
		|					, ОборотыТоваров.IDDOCDEF [Документ_вид $ВидДокумента]
		|					, $ОборотыТоваров.СуммаБазовая Стоимость
		|					, $ОборотыТоваров.СуммаПЦЧ Оборот
		|					, $ОборотыТоваров.Количество Количество
		|					, ОборотыТоваров.LINENO_ НомерСтрокиДок
		|			  FROM $Регистр.ОборотыТоваров AS ОборотыТоваров
		|			  INNER JOIN $Документ.РасходнаяНакладная ДокП (NOLOCK) ON ДокП.IDDOC = ОборотыТоваров.IDDOC
		|			  WHERE ($ОборотыТоваров.ВидОперации = '-')
		|					AND ($ОборотыТоваров.Товар = :ВыбТовар)
		|					AND ($ОборотыТоваров.Клиент = :ВыбКлиент)
		|					AND ОборотыТоваров.IDDOCDEF = $ВидДокумента.РасходнаяНакладная
		|					AND ОборотыТоваров.DATE_TIME_IDDOC BETWEEN :ДатаНач AND :ДатаКон
		|			  ORDER BY ОборотыТоваров.DATE_TIME_IDDOC DESC
		|";
		
		Запрос=СоздатьОбъект("ODBCRecordSet");
		Запрос.УстановитьТекстовыйПараметр("ВыбТовар",Товар);
		Запрос.УстановитьТекстовыйПараметр("ВыбКлиент",Клиент);
		Запрос.УстановитьТекстовыйПараметр("ДатаНач",ДатаДок-360);
		Запрос.УстановитьТекстовыйПараметр("ДатаКон",ДатаДок);

		Табл=Запрос.ВыполнитьИнструкцию(ТекстЗапроса);
		
		Табл.ВыбратьСтроки();
		Пока Табл.ПолучитьСтроку() = 1 Цикл
			Док=Табл.Документ;
			Док.ПолучитьСтрокуПоНомеру(Табл.НомерСтрокиДок);
			Цена_=Пересчет(Док.Цена, Док.Валюта, Док.ДатаДок, Валюта, Курс);
			СписокДок.ДобавитьЗначение( Цена_,""+Док+"("+Док.ДатаДок+") - "+Окр(Цена_,5));
		КонецЦикла;
		
		Если ПустоеЗначение(СписокДок)=0 Тогда
			ВыбЦена=0;
			Если СписокДок.ВыбратьЗначение(ВыбЦена,"Выберите цену из партии",,,0)=1 Тогда
				Цена=ВыбЦена;
				Выч_суммы_накл_сНП(Контекст,,1);
			КонецЕсли;
			
		Иначе
			Предупреждение("Не найдены документы отгрузки по товару <"+Товар.Код+" "+Товар+"> по клиенту <"+Клиент +">за прошедший год!");
		КонецЕсли;
		
		
	КонецЕсли;
	
	
	
КонецПроцедуры


//======================================================================
Процедура кнОбновитьЦеныИзОснования()
	
	Если (ДокументОснование.Выбран()=1) И (ДокументОснование.Фирма<>Фирма) Тогда
		Если Вопрос("Сейчас будут обновлены цены из документа основания. Вы уверены?","Да+Нет")="Да" Тогда
		Иначе
			Возврат;
		КонецЕсли;
		табл=СоздатьОбъект("ТаблицаЗначений");
		ДокументОснование.ВыгрузитьТабличнуюЧасть(табл);
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			табл.ПолучитьСтрокуПоНомеру(НомерСтроки);
			Если (табл.Товар=Товар) И (Сумма <> табл.Сумма) Тогда
				Сообщить(Шаблон("В строке [НомерСтроки] изменена сумма [Сумма]->[табл.Сумма]"));
				Цена=табл.Цена;
				Сумма=табл.Сумма;
				НДС=табл.НДС; 
				Выч_суммы_накл_сНП(Контекст);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // кнОбновитьЦеныИзОснования

Функция РаскраситьЦену()
	Если Окр(ЦенаПриобретения,2)<Окр(Цена,2) Тогда
		Возврат "BRUSH["+глПолучитьЦвет(255,0,255)+"]COUNT[2]";
	КонецЕсли;
КонецФункции


Функция РаскраситьСрок()
	
	
КонецФункции
//*********************************
Процедура ВесИнфо()
	Меню=СоздатьОбъект("СписокЗначений");
	Меню.ДобавитьЗначение("Вес");
	Меню.ДобавитьЗначение("Себестоимость");
	Зн=0;
	Если Меню.ВыбратьЗначение(,,Зн,,1)=0 Тогда
		Возврат;
	КонецЕсли;
	Если Зн=1 Тогда // вес инфо
		Путь = КаталогИБ() + "ExtForms\Печать\ВесИнфо.ert";
	Иначе	
		Путь = КаталогИБ() + "ExtForms\Печать\СебестоимостьИнфо.ert";
	КонецЕсли;
	Если ФС.СуществуетФайл(Путь)=0 Тогда
		Возврат;
	Иначе
		ОткрытьФорму("Обработка",ТекущийДокумент(),Путь);
	КонецЕсли;
КонецПроцедуры
//*********************************
// При входе в Форму запомним промежуточные переменные

//======================================================================
//Функция ПроблемныйПриход()
//	
//	Если Выбран()=0 Тогда
//		Возврат 0;
//	КонецЕсли;
//	
//	ГруппаПретензийB15 = СоздатьОбъект("Справочник.Претензии");
//	ГруппаПретензийB15.НайтиПоКоду("B15",0);
//	
//	ЕстьПроблемныйПриход=0;
//	ДокПодч=СоздатьОбъект("Документ");
//	ДокПодч.ВыбратьПодчиненныеДокументы(ДатаДок,,ТекущийДокумент());
//	Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
//		Если ДокПодч.Проведен()=0 Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Если ДокПодч.Вид()="ПретензияПолученная" Тогда
//			ДокПодч.ВыбратьСтроки();
//			Пока ДокПодч.ПолучитьСтроку() = 1 Цикл
//				Если ДокПодч.СутьПретензии.ПроблемаПриПриходе=1 Тогда
//					ЕстьПроблемныйПриход=1;
//					Прервать;
//				КонецЕсли;
//			КонецЦикла;
//		ИначеЕсли ДокПодч.Вид()="ПриходнаяНакладная" Тогда
//			Если (ДокПодч.ПризнакНакладной=Перечисление.ПризнПрихНакл.Недопоставка) ИЛИ (ДокПодч.ПризнакНакладной=Перечисление.ПризнПрихНакл.Допоставка) Тогда
//				ЕстьПроблемныйПриход=1;
//				Прервать;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;
//
//	Возврат ЕстьПроблемныйПриход;
//	
//КонецФункции // ПлатежноеПоручение()

//======================================================================
Процедура ПриЗакрытии()
	Если РаспечатанаПлатежка = 0 Тогда
		Если (Проблемный=1) И ((РабочаяДата()-ДатаДок)<30) Тогда
			ЛегкоеСообщение("Требуется распечатка платежного поручения!");
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры // ПриЗакрытии

//При проведении проверяем наличие коэффициентов каждой строчки, без этого нельзя провадить.
Процедура кнПровестиПриНажатии(Реж="Закрыть")
	                                          
	Если Константа.ДатаЗапретаРедактирования >= ДатаДок Тогда
		Предупреждение("Дата запрета редактирования, проведение невозможно!");	                                                         
		СтатусВозврата(0);
		Возврат;		
	КонецЕсли;
	
	стар_ПриЗаписи();
	
	рез=Провести(); 
	Если (СравнитьТА()=-1) И (рез=1) И (ПустоеЗначение(спИзмененныеТовары)=0) Тогда
		глПровестиДокументыПоТоварам(Контекст);
	КонецЕсли;

	Если Итог("АкцизнаяСтавка")>0 Тогда
		глОтправитьСообщение(Шаблон("Vveden akciz v Invoice [НомерДок] ([ДатаДок])"),Шаблон("Vveden akciz v Invoice [НомерДок] ([ДатаДок]) ot postavscika [Клиент]"),Агент,"Email",ТекущийДокумент(),Перечисление.ВидыОбъектовСообщений.ПриходнаяАкциз);
		
		СпрСотр = СоздатьОбъект("Справочник.СотрудникиПодч");
		СпрСотр.ИспользоватьВладельца(Агент);
		
		//Сообщить(ТекстСообщения);
		
		СпрСотр.ВыбратьЭлементы();
		Пока СпрСотр.ПолучитьЭлемент() = 1 Цикл
			
			Если СпрСотр.ПометкаУдаления()=1 Тогда
				Продолжить;
			КонецЕсли;
			
			глОтправитьСообщение(Шаблон("Vveden akciz v Invoice [НомерДок] ([ДатаДок])"),Шаблон("Vveden akciz v Invoice [НомерДок] ([ДатаДок]) ot postavscika [Клиент]"),СпрСотр.Сотрудник,"Email",ТекущийДокумент(),Перечисление.ВидыОбъектовСообщений.ПриходнаяАкциз);
		КонецЦикла;
		
	КонецЕсли;

	Если Реж="Закрыть" Тогда
		Форма.Закрыть();
	КонецЕсли;
КонецПроцедуры

Процедура СозданиеПретензии()

	Если ПризнакНакладной=Перечисление.ПризнПрихНакл.Недопоставка Тогда
		семСозданиеПретензии(ДокументПрихода);
	Иначе
		семСозданиеПретензии(контекст);
	КонецЕсли;	
	
КонецПроцедуры

//======================================================================
Процедура кнПодтвердить()    
                            
	ПриЗаписиПерепроводить(0);
	Если Проведен()=1 Тогда
		Проблемный=0;
		Док = СоздатьОбъект("Документ");
		Док.ВыбратьПодчиненныеДокументы(ДатаДок,,ТекущийДокумент());
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если Док.Проведен()=0 Тогда
				Продолжить;
			КонецЕсли;
	
			Если Док.Вид()="ПретензияПолученная" Тогда
				Док.ВыбратьСтроки();
				Пока Док.ПолучитьСтроку()=1 Цикл
					Если Док.СутьПретензии.ПроблемаПриПриходе=1 Тогда
						Проблемный=1;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если (Док.Вид()="ПриходнаяНакладная") Тогда
				Если Док.ПризнакНакладной = Перечисление.ПризнПрихНакл.Недопоставка Тогда
					Проблемный=1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;	
	
	Если (Подтверждена=0) Тогда
		
		Если (ДатаДок-ДатаИнвойса)>Клиент.ДнейВПути Тогда
			ЛегкоеСообщение("Кол-во дней между датой выписки инвойса и приходом товара превышает допустимое. Примите меры!!!");
		КонецЕсли;
		Подтверждена=1;
		ПодтвержденаАвтор=Пользователь;
		ПользовательПодтв=Пользователь.Сотрудник;
		ЗаписьЖурналаРегистрации("Подтвержден документ","Документ","Подтверждение",ТекущийДокумент(),2);
		Если Проведен()=1 Тогда
			    
			рез = 0;
			Попытка
				ОбъектЗаписать(Контекст,);
				рез = 1;
			Исключение   
				ВызватьИсключение;
			КонецПопытки;
//			рез=Провести();    
			//Находим проблемные претензии

			Если рез=1 Тогда
				Форма.Закрыть();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Подтверждена=1 Тогда
		Если Вопрос("Вы действительно хотите снять подтверждение?","Да+Нет")="Да" Тогда
		Иначе
			Возврат;
		КонецЕсли;
		//снимаем подтверждение
		Подтверждена=0;
		ПодтвержденаАвтор="";
		ПользовательПодтв="";
		ЗаписьЖурналаРегистрации("Отмена подтверждения документа","Документ","Подтверждение",ТекущийДокумент(),2);
		Если Проведен()=1 Тогда
			рез = 0;
			Попытка
				ОбъектЗаписать(Контекст,);
				рез = 1;
			Исключение   
				ВызватьИсключение;
			КонецПопытки;
			Если рез=1 Тогда
				Форма.Закрыть();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;       
	ПриЗаписиПерепроводить(1);
	
	Форма.кнПодтвердить.Заголовок(?(Подтверждена=1,"Снять подтв.","Подтвердить"));	
	
КонецПроцедуры // кнПодтвердить

Процедура РассчитатьСтроку()
	Если ПустоеЗначение(СтавкаНДС_Т)=0 Тогда
		Цена=ЦенаСНДС/(1+ПроцентНДС(СтавкаНДС_Т)/100);
	Иначе
		Цена=ЦенаСНДС/(1+ПроцентНДС(СтавкаНДС)/100);
	КонецЕсли;
КонецПроцедуры



ИнформационнаяСтрока="";
Prompt="Информация о взаиморасчетах:";
Валюта_Прежн=Валюта;
Курс_Прежн=Курс;
ПроцСкидки=0;

спКодов = СоздатьОбъект( "СписокЗначений" );
спКодов.Установить("161",194);
спКодов.Установить("162",226);
спКодов.Установить("163",200);
спКодов.Установить("165",232);
спКодов.Установить("166",199);
спКодов.Установить("167",231);
спКодов.Установить("168",204);
спКодов.Установить("170",236);
спКодов.Установить("172",206);
спКодов.Установить("174",238);
спКодов.Установить("175",205);
спКодов.Установить("176",237);
спКодов.Установить("177",207);
спКодов.Установить("178",239);
спКодов.Установить("179",210);
спКодов.Установить("180",242);
спКодов.Установить("185",208);
спКодов.Установить("186",240);
спКодов.Установить("188",219);
спКодов.Установить("189",251);
спКодов.Установить("190",222);
спКодов.Установить("191",254);

флВВодНаОсновании=0;
флБылоИзменениеТовара=0;
таблПредложений.НоваяКолонка("ТекущийЭлемент");
таблПредложений.ВидимостьКолонки("ТекущийЭлемент",0);
таблПредложений.НоваяКолонка("Наименование",,,,"Nosaukums",15);
таблПредложений.НоваяКолонка("Файл",,,,"Fails",15);
таблПредложений.НоваяКолонка("ВидФайла",,,,"Faila tips",6); 
таблПредложений.НоваяКолонка("ДатаПредл",,,,"Datums",6); 
таблПредложений.НоваяКолонка("Автор",,,,"Autors",8); 
