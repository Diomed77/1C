Процедура ОтправитьСообщение( пПользователь,пСообщ, пОбъект="" ) Далее

//{процедуры для обработки БроньвПути
Процедура ОчисткаСтатуса(пПоСчету,пСтатус)
	
	Реги=СоздатьОбъект("Регистры");
	Реги.Актуальность(1);
	Рег=Реги.КомплектацияЗаявок;
	
	рег.УстановитьЗначениеФильтра("ПоСчету",пПоСчету);
	рег.УстановитьЗначениеФильтра("Статус",пСтатус);
		
	Если ИтогиАктуальны()=0 Тогда
		рег.ВременныйРасчет(1);
		Реги.РассчитатьРегистрыНа(ТекущийДокумент());
	КонецЕсли;
	
	таблКомпл=СоздатьОбъект("ТаблицаЗначений");
	Рег.ВыгрузитьИтоги(таблКомпл,1,1);
	Если (таблКомпл.КоличествоСтрок()=0) Тогда
		Возврат;
	КонецЕсли;
	
	таблКомпл.ВыбратьСтроки();
	Пока таблКомпл.ПолучитьСтроку()=1 Цикл
		Регистр.КомплектацияЗаявок.ДатаПоставки=таблКомпл.ДатаПоставки;
		Регистр.КомплектацияЗаявок.ПоСчету=таблКомпл.ПоСчету;
		Регистр.КомплектацияЗаявок.ВидЗаявки=таблКомпл.ВидЗаявки;
		Регистр.КомплектацияЗаявок.МестоКомплектации=таблКомпл.МестоКомплектации;
		Регистр.КомплектацияЗаявок.Склад=таблКомпл.Склад;
		Регистр.КомплектацияЗаявок.ВидДоставки=таблКомпл.ВидДоставки;
		Регистр.КомплектацияЗаявок.Товар="";
		Регистр.КомплектацияЗаявок.Статус=таблКомпл.Статус;
		Регистр.КомплектацияЗаявок.Количество=таблКомпл.Количество;
		Регистр.КомплектацияЗаявок.ДвижениеРасходВыполнить();
	КонецЦикла;
	
КонецПроцедуры
Функция ПроверкаНаличияТовара(пСчет,таблТовара)
	
	Перем Счет;//Считаем количество товаров по БронивПути совпадающие с приходной наклодной.
	Счет=0;
	
	//таблТовара.Показать();
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл

		сзКлюч=СоздатьОбъект("СписокЗначений");
		сзКлюч.ДобавитьЗначение(Товар);
		сзКлюч.ДобавитьЗначение(пСчет);
	//	б=таблТовара.КоличествоЗначенийКлюча("иТоварЗаявка",сзКлюч);
	//	таблТовара.Подмножество(сзКлюч,2,"иТоварЗаявка");
	//	a=таблТовара.КоличествоЗначенийКлюча("иТоварЗаявка",сзКлюч);
	//	таблТовара.Показать("иТоварЗаявка");
		
		Если таблТовара.КоличествоЗначенийКлюча("иТоварЗаявка",сзКлюч)>0 Тогда
				Счет=Счет+1;
		КонецЕсли;
	КонецЦикла;
	Возврат Счет;
КонецФункции

//}процедуры для обработки БроньвПути

//{***Ожидаемая Поставка***\\

Функция ГаситьРегистрТоварыВПути999(итТаблОстатков)
//	итТаблОстатков.Показать();
	итТаблОстатков.ВыбратьСтроки();
	Пока итТаблОстатков.ПолучитьСтроку() = 1 Цикл
		Если итТаблОстатков.Количество=0 Тогда
			Продолжить;
		КонецЕсли;	
		Регистр.ТоварыВПути.ПривязыватьСтроку(999);
		Регистр.ТоварыВПути.Товар = итТаблОстатков.Товар ;
		Регистр.ТоварыВПути.СрокПоставки = итТаблОстатков.СрокПоставки ;
		Регистр.ТоварыВПути.ПоЗаказу = итТаблОстатков.ПоЗаказу ;
		Регистр.ТоварыВПути.Количество = итТаблОстатков.Количество;
		Регистр.ТоварыВПути.Док = итТаблОстатков.Док;
		Регистр.ТоварыВПути.ДвижениеРасходВыполнить();			
	КонецЦикла;
КонецФункции
Функция ГаситьРегистрЗаказыПоставщикам999(итТаблОстатковЗаказов)
	итТаблОстатковЗаказов.ВыбратьСтроки();
	Пока итТаблОстатковЗаказов.ПолучитьСтроку() = 1 Цикл
		Если итТаблОстатковЗаказов.Количество=0 Тогда
			Продолжить;
		КонецЕсли;	

		Регистр.ЗаказыПоставщикам.ПривязыватьСтроку(999);
		Регистр.ЗаказыПоставщикам.Товар=итТаблОстатковЗаказов.Товар;
		Регистр.ЗаказыПоставщикам.Склад=итТаблОстатковЗаказов.Склад;
		Регистр.ЗаказыПоставщикам.Клиент=итТаблОстатковЗаказов.ПоЗаказу.Клиент;						
		Регистр.ЗаказыПоставщикам.СрокПоставки=итТаблОстатковЗаказов.СрокПоставки;
		Регистр.ЗаказыПоставщикам.ПоЗаказу=итТаблОстатковЗаказов.ПоЗаказу;
		Регистр.ЗаказыПоставщикам.Количество=итТаблОстатковЗаказов.Количество;
		Регистр.ЗаказыПоставщикам.КодОперации=ЗакрытиеНевыполненногоЗаказаПоставщику;
		Регистр.ЗаказыПоставщикам.ДвижениеРасходВыполнить();
	КонецЦикла;
КонецФункции
Функция ГаситьРегистрЗаказыПоставщикамЗаявки999(итТаблОстатковЗаказов)
	итТаблОстатковЗаказов.ВыбратьСтроки();
	Пока итТаблОстатковЗаказов.ПолучитьСтроку() = 1 Цикл
		Если итТаблОстатковЗаказов.Количество=0 Тогда
			Продолжить;
		КонецЕсли;	
		Регистр.ЗаказыПоставщикамЗаявки.ПривязыватьСтроку(999);
		Регистр.ЗаказыПоставщикамЗаявки.Товар = итТаблОстатковЗаказов.Товар ;
		Регистр.ЗаказыПоставщикамЗаявки.ПоСчету = итТаблОстатковЗаказов.ПоСчету;
		Регистр.ЗаказыПоставщикамЗаявки.ПоЗаказу = итТаблОстатковЗаказов.ПоЗаказу;
		Регистр.ЗаказыПоставщикамЗаявки.Количество = итТаблОстатковЗаказов.Количество;
		Регистр.ЗаказыПоставщикамЗаявки.ДвижениеРасходВыполнить();
	КонецЦикла;
КонецФункции
Функция ГаситьРегистрПриемТовара999(табл)
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку() = 1 Цикл
		Если табл.Количество=0 Тогда
			Продолжить;
		КонецЕсли;	
		Регистр.ПриемТовара.ПривязыватьСтроку(999);
		Регистр.ПриемТовара.Товар = табл.Товар ;
		Регистр.ПриемТовара.Количество = табл.Количество;
		Регистр.ПриемТовара.Док = табл.Док;
		Регистр.ПриемТовара.СрокРеализ = табл.СрокРеализ;
		Регистр.ПриемТовара.ДокОснование = табл.ДокОснование;
		Регистр.ПриемТовара.ДвижениеРасходВыполнить();
	КонецЦикла;	
КонецФункции


Функция ГаситьРегистрСостояния(докОсн)
	Рег=СоздатьОбъект("Регистр.СостояниеДокумента");
	Рег.УстановитьЗначениеФильтра("Док",докОсн,1);
	табл=СоздатьОбъект("ТаблицаЗначений");
	Рег.ВыгрузитьИтоги(табл,1,1);
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку() = 1 Цикл
		Регистр.СостояниеДокумента.Пользователь = табл.Пользователь ;
		Регистр.СостояниеДокумента.Количество = табл.Количество;
		Регистр.СостояниеДокумента.Док = табл.Док;
		Регистр.СостояниеДокумента.СостояниеДок = табл.СостояниеДок;
		Регистр.СостояниеДокумента.ДвижениеРасходВыполнить();
	КонецЦикла;	
КонецФункции
//Функция ГаситьРегистрПриемТовара(докОсн)
//	Рег=СоздатьОбъект("Регистр.ПриемТовара");
//	Рег.УстановитьЗначениеФильтра("ДокОснование",докОсн,1);
//	табл=СоздатьОбъект("ТаблицаЗначений");
//	Рег.ВыгрузитьИтоги(табл,1,1);
//	табл.ВыбратьСтроки();
//	Пока табл.ПолучитьСтроку() = 1 Цикл
//		Регистр.ПриемТовара.Товар = табл.Товар ;
//		Регистр.ПриемТовара.Количество = табл.Количество;
//		Регистр.ПриемТовара.Док = табл.Док;
//		Регистр.ПриемТовара.СрокРеализ = табл.СрокРеализ;
//		Регистр.ПриемТовара.ДокОснование = табл.ДокОснование;
//		Регистр.ПриемТовара.ДвижениеРасходВыполнить();
//	КонецЦикла;	
//КонецФункции

Функция РасходРегистрТоварыВПути(ТаблОстатков,п_Док)

	ТаблОстатков.ДобавитьИндекс("иТоварПоЗаказу","*Товар,*ПоЗаказу");
	
	итЗаказовПоставщику=СоздатьОбъект("ИндексированнаяТаблица");
	итЗаказовПоставщику.Загрузить(ТаблОстатков);
	итЗаказовПоставщику.Группировать("ПоЗаказу : *ПоЗаказу",,);
//	итЗаказовПоставщику.Показать();
//	ТаблОстатков.Показать();
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
//			Если ДокументОснованиеТабл<>п_Док Тогда
			Если ПустоеЗначение(ДокументОснованиеТабл)=1 Тогда
				Продолжить;
			КонецЕсли;
			ПривязыватьСтроку( НомерСтроки );
			Кол=Количество*Коэффициент;
			КолГасить=0;
			Если Кол>0 Тогда

				итЗаказовПоставщику.ВыбратьСтроки();
				Пока итЗаказовПоставщику.ПолучитьСтроку() = 1 Цикл
	
					сз=СоздатьОбъект("СписокЗначений");
					сз.ДобавитьЗначение(Товар);
					сз.ДобавитьЗначение(итЗаказовПоставщику.ПоЗаказу);
	
					Если ТаблОстатков.НайтиСтроку("иТоварПоЗаказу",сз,,1)<>0 Тогда
						
					    КолГасить=Мин(ТаблОстатков.Количество,Кол);
						ТаблОстатков.Количество=ТаблОстатков.Количество-КолГасить;
						Если КолГасить>0 Тогда
							Регистр.ТоварыВПути.ПривязыватьСтроку(НомерСтроки);
							Регистр.ТоварыВПути.Док=п_Док;
							Регистр.ТоварыВПути.Товар=Товар;
							Регистр.ТоварыВПути.СрокПоставки=п_Док.ДатаПрихода;
							Регистр.ТоварыВПути.ПоЗаказу=итЗаказовПоставщику.ПоЗаказу; 
							Регистр.ТоварыВПути.Количество=КолГасить;
							Регистр.ТоварыВПути.ДвижениеРасходВыполнить();	
						КонецЕсли;
						Кол=Кол-КолГасить;
					КонецЕсли;
//					Кол=Кол-КолГасить;
				КонецЦикла;	
			КонецЕсли;
		КонецЦикла;
КонецФункции
Функция РасходРегистрЗаказыПоставщикам(ТаблОстатков,сзЗаказыПоставщикам);

//	ТаблОстатков.Показать();
	сз=СоздатьОбъект("СписокЗначений");
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		ПривязыватьСтроку( НомерСтроки );
		Кол=Количество*Коэффициент;
		КолГасить=0;
		Если Кол>0 Тогда
			стр="";
			Для Номер = 1 По сзЗаказыПоставщикам.РазмерСписка() Цикл
				знЗаказПоставшика = сзЗаказыПоставщикам.ПолучитьЗначение(Номер, стр); //получить значение и представление

				сз.УдалитьВсе();
				сз.ДобавитьЗначение(Товар);
				сз.ДобавитьЗначение(знЗаказПоставшика);
			
				Если ТаблОстатков.НайтиСтроку("иТоварПоЗаказу",сз,,1)<>0 Тогда
				    КолГасить=Мин(ТаблОстатков.Количество,Кол);
					ТаблОстатков.Количество=ТаблОстатков.Количество-КолГасить;
					Если КолГасить>0 Тогда
						Регистр.ЗаказыПоставщикам.ПривязыватьСтроку(НомерСтроки);
						Регистр.ЗаказыПоставщикам.Товар=Товар;
						Регистр.ЗаказыПоставщикам.Склад=ТаблОстатков.Склад;
						Регистр.ЗаказыПоставщикам.Клиент=знЗаказПоставшика.Клиент;						
						Регистр.ЗаказыПоставщикам.СрокПоставки=ТаблОстатков.СрокПоставки;
						Регистр.ЗаказыПоставщикам.ПоЗаказу=знЗаказПоставшика;
						Регистр.ЗаказыПоставщикам.Количество=КолГасить;
						Регистр.ЗаказыПоставщикам.КодОперации=ЗакрытиеВыполненногоЗаказаПоставщику;
						Регистр.ЗаказыПоставщикам.ДвижениеРасходВыполнить();
					КонецЕсли;
					Кол=Кол-КолГасить;
				КонецЕсли;
			//	Кол=Кол-КолГасить;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;				
КонецФункции
Функция РасходРегистраПриемТовара(табл)
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		ПривязыватьСтроку( НомерСтроки );
		сзКлюч=СоздатьОбъект("СписокЗначений");
		сзКлюч.ДобавитьЗначение(Товар);

		табл.Подмножество(сзКлюч,1,"иТоварЗаявка");
		табл.ВыбратьСтроки("иТоварЗаявка");
		Кол=Количество*Коэффициент;
		КолГасить=0;
		Пока табл.ПолучитьСтроку("иТоварЗаявка") = 1 Цикл
		
		    КолГасить=Мин(табл.Количество,Кол);
			Регистр.ПриемТовара.ПривязыватьСтроку(НомерСтроки);
			Регистр.ПриемТовара.Товар = Товар;
			Регистр.ПриемТовара.Количество=КолГасить;
			Регистр.ПриемТовара.Док = табл.Док;
			Регистр.ПриемТовара.СрокРеализ = табл.СрокРеализ;
			Регистр.ПриемТовара.ДокОснование = табл.ДокОснование;
			Регистр.ПриемТовара.ДвижениеРасходВыполнить();
			табл.Количество =табл.Количество-КолГасить;
			
			Кол=Кол-КолГасить;
		
		КонецЦикла;
					
	КонецЦикла;
КонецФункции

//======================================================================

Функция ИзменениеСтатусаБрони(п_ПоСчету,п_Статус)
	
	Регистр.КомплектацияЗаявок.ДатаПоставки=п_ПоСчету.ДатаПоставки;
	Регистр.КомплектацияЗаявок.ПоСчету=п_ПоСчету;
	Регистр.КомплектацияЗаявок.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь;
	Регистр.КомплектацияЗаявок.МестоКомплектации=п_ПоСчету.МестоКомплектации;
	Регистр.КомплектацияЗаявок.Склад=п_ПоСчету.Склад;
	Регистр.КомплектацияЗаявок.ВидДоставки=п_ПоСчету.ВидДоставки;
	ОчисткаСтатуса(п_ПоСчету,31);
	Регистр.КомплектацияЗаявок.Статус=п_Статус;//32
	Регистр.КомплектацияЗаявок.Количество=1;
	Регистр.КомплектацияЗаявок.ДвижениеПриходВыполнить();
	
КонецФункции // ИзменениеСтатусаБрони

//======================================================================


Функция РасходРегистрЗаказыПоставщикамЗаявки(ТаблОстатков,сзЗаказыПоставщикам,итЗаявкиРезерв,итТаблАнулир)

	л_ТЗВыполненыхБроней=СоздатьОбъект("ТаблицаЗначений");
	л_ТЗВыполненыхБроней.НоваяКолонка("ПоСчету");
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		ПривязыватьСтроку( НомерСтроки );
		Кол=Количество*Коэффициент;
		КолГасить=0;
		Если Кол>0 Тогда
		стр="";
		Для Номер = 1 По сзЗаказыПоставщикам.РазмерСписка() Цикл
			знЗаказПоставшика = сзЗаказыПоставщикам.ПолучитьЗначение(Номер, стр); //получить значение и представление
			
//			стр1="";
//			Для Номер1 = 1 По сзПоСчету.РазмерСписка() Цикл
//				знПоСчету = сзПоСчету.ПолучитьЗначение(Номер1, стр1); //получить значение и представление
//			итЗаявкиРезерв.Показать();
			итЗаявкиРезерв.ВыбратьСтроки();
			Пока итЗаявкиРезерв.ПолучитьСтроку() = 1 Цикл
				знПоСчету=итЗаявкиРезерв.ПоСчету;
			
					сз=СоздатьОбъект("СписокЗначений");
					сз.ДобавитьЗначение(Товар);
					сз.ДобавитьЗначение(знЗаказПоставшика);
					сз.ДобавитьЗначение(знПоСчету);
					//ТаблОстатков.Показать();
					Если ТаблОстатков.НайтиСтроку("иТоварПоЗаказу",сз,,1)<>0 Тогда
					    КолГасить=Мин(ТаблОстатков.Количество,Кол);
						ТаблОстатков.Количество=ТаблОстатков.Количество-КолГасить;
						Если КолГасить>0 Тогда
							Регистр.ЗаказыПоставщикамЗаявки.ПривязыватьСтроку(НомерСтроки);
							Регистр.ЗаказыПоставщикамЗаявки.Товар = Товар ;
							Регистр.ЗаказыПоставщикамЗаявки.ПоСчету = ТаблОстатков.ПоСчету;
							Регистр.ЗаказыПоставщикамЗаявки.ПоЗаказу = ТаблОстатков.ПоЗаказу;
							Регистр.ЗаказыПоставщикамЗаявки.Количество = КолГасить;
							Регистр.ЗаказыПоставщикамЗаявки.ДвижениеРасходВыполнить();
						КонецЕсли;
						
						анСтрока=0;
						анСтрока=итТаблАнулир.НайтиСтроку("иПоСчету",ТаблОстатков.ПоСчету,,);
						//Сообщить(анСтрока);
						//устраняем анулированые строки таблицы
						//итТаблАнулир.Показать();	
						Если (КолГасить>0)И(анСтрока=0) Тогда
							Регистр.РезервыТоваров.Товар = Товар;
							Регистр.РезервыТоваров.ПоСчету = ТаблОстатков.ПоСчету; 
							Регистр.РезервыТоваров.РезервТовара = КолГасить; //приходуем столько сколько было распределно в заказе поставщику
							Регистр.РезервыТоваров.ДвижениеПриходВыполнить();
							
							л_ТЗВыполненыхБроней.НоваяСтрока();
							л_ТЗВыполненыхБроней.ПоСчету = ТаблОстатков.ПоСчету;;
						КонецЕсли;
						Кол=Кол-КолГасить;
					КонецЕсли;
					//Кол=Кол-КолГасить;
				КонецЦикла;	
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	л_ТЗВыполненыхБроней.Свернуть("ПоСчету",);
	итЗаявкиРезерв.ВыбратьСтроки();
	Пока итЗаявкиРезерв.ПолучитьСтроку() = 1 Цикл
		знПоСчету=итЗаявкиРезерв.ПоСчету;
		Если (знПоСчету.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь)	Тогда
			л_ПоискСчета=л_ТЗВыполненыхБроней.НайтиЗначение(знПоСчету,,"ПоСчету");		
			Если л_ПоискСчета=1 Тогда
				ИзменениеСтатусаБрони(знПоСчету,32);
			Иначе
				Если ЗакрытьЗаказ=1 Тогда
					ИзменениеСтатусаБрони(знПоСчету,0);
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;			
	
КонецФункции

Функция РасходРегистраСпецЗаказы(итТаблСпецЗаявки)
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		ПривязыватьСтроку( НомерСтроки );
		сзКлюч=СоздатьОбъект("СписокЗначений");
		сзКлюч.ДобавитьЗначение(Товар);

		итТаблСпецЗаявки.Подмножество(сзКлюч,1,"иТоварЗаявка");
		итТаблСпецЗаявки.ВыбратьСтроки("иТоварЗаявка");
		Кол=Количество*Коэффициент;
		КолГасить=0;
		Пока итТаблСпецЗаявки.ПолучитьСтроку("иТоварЗаявка") = 1 Цикл
		
		    КолГасить=Мин(итТаблСпецЗаявки.Заказано,Кол);
			Регистр.СпецЗаказы.ПривязыватьСтроку(НомерСтроки);
			Регистр.СпецЗаказы.Товар = Товар;
			Регистр.СпецЗаказы.ПоСчету = итТаблСпецЗаявки.ПоСчету;
			Регистр.СпецЗаказы.Заказано = итТаблСпецЗаявки.Заказано; //закрываем полностью
			Регистр.СпецЗаказы.ДвижениеРасходВыполнить();
			итТаблСпецЗаявки.Заказано = 0;
			
			Кол=Кол-КолГасить;
		
		КонецЦикла;
					
	КонецЦикла;
КонецФункции
Функция ОбработкаБроньВПути(итТабл,итТаблЗаказыЗаявки,итТаблАнулир)
	//{Бронь в Пути
	//во всех документах Счет принадлежащему к Заказу Поставщику, меняем регистр.
//				ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");
				
//				ТекстЗапроса="SELECT ЗаказыПоставщикамЗаявкиОстатки.ПоСчету [ПоСчету $Документ.Счет]
//				|FROM $РегистрОстатки.ЗаказыПоставщикамЗаявки(,,
//				|		(ПоЗаказу = $ВидДокумента36.ЗаказПоставщику + :ПоОснованию),
//				|		ПоСчету,) AS ЗаказыПоставщикамЗаявкиОстатки";
				
//				ЗапросСКЛ.УстановитьТекстовыйПараметр("ПоОснованию",ДокументОснование.ТекущийДокумент());
//				итТабл.Показать();
	//			итТабл.НоваяКолонка("ПоСчету");
		//		стр="";
			//	Для Номер = 1 По сзСчета.РазмерСписка() Цикл
				//	зн = сзСчета.ПолучитьЗначение(Номер, стр); //получить значение и представление
//					итТабл.НоваяСтрока();
//					итТабл.ПоСчету=зн;
//				КонецЦикла;
				
				
	//			ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итТабл);
			
///				регКЗ=СоздатьОбъект("Регистр.КомплектацияЗаявок");
//				итТаблАнулир=СоздатьОбъект("ИндексированнаяТаблица");
				итТаблАнулир.Загрузить(итТабл);
				итТаблАнулир.ДобавитьИндекс("иПоСчету","*ПоСчету");
				итТаблАнулир.УдалитьСтроки();
//				итТаблАнулир.Показать();

//				итТабл.Показать();
				итТабл.ВыбратьСтроки();
				Пока итТабл.ПолучитьСтроку() = 1 Цикл
					
					докПоСчету = итТабл.ПоСчету;
					
					Если (ДокПосчету.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь)	Тогда
						
						
						Регистр.КомплектацияЗаявок.ДатаПоставки=ДокПосчету.ДатаПоставки;
						Регистр.КомплектацияЗаявок.ПоСчету=итТабл.ПоСчету;
						Регистр.КомплектацияЗаявок.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь;
						Регистр.КомплектацияЗаявок.МестоКомплектации=ДокПосчету.МестоКомплектации;
						Регистр.КомплектацияЗаявок.Склад=ДокПосчету.Склад;
						Регистр.КомплектацияЗаявок.ВидДоставки=ДокПосчету.ВидДоставки;
									
						пБроньвПутиПустая=0;
						пНаличТовараВДокументе=ПроверкаНаличияТовара(итТабл.ПоСчету,итТаблЗаказыЗаявки);
						
						Если докПоСчету.ДатаПоставки<ДатаПриходаТовара Тогда
							пБроньвПутиПустая=пБроньвПутиПустая+1;
							Заголовок = Шаблон("Dokument speczakaz/bronirovanie anulirovan [ДокПосчету.НомерДок]");
				
							ТекстСообщения = Шаблон("Problema s el.zajavk. [ДокПосчету.НомерДок] [ДокПосчету.ДатаДок] dlja klienta [ДокПосчету.Клиент]([ДокПосчету.Клиент.Код])");
							
							ТекстТовара="";
							ДокПосчету.ВыбратьСтроки();
							Пока ДокПосчету.ПолучитьСтроку() = 1 Цикл
								ТекстТовара=ТекстТовара+"; "+ДокПосчету.Товар.Наименование;
							КонецЦикла;
							
							ТекстСообщения =ТекстСообщения+ Шаблон(" Zajavaka [ДокПосчету.НомерДок] [ДокПосчету.ДатаДок] anulirovana dokumentom [ТекущийДокумент().НомерДок]. Tovar s opozdanijem prishel na sklad. ")+ТекстТовара;
							Рез=глОтправитьСообщение(Заголовок,ТекстСообщения,ДокПосчету.Агент,"Email");
	//						ОтправитьСообщение( ДокПосчету.Агент,"Ваш документ Бронь в пути: "+ДокПосчету.НомерДок+ " анулирован ! Товар с опазданием пришел на склад.",);
						//	итТаблАнулир.Показать();
						КонецЕсли;
						
						Если (пНаличТовараВДокументе=0)И(ЗакрытьЗаказ=1) Тогда
							пБроньвПутиПустая=пБроньвПутиПустая+1;
							Заголовок = Шаблон("Dokument speczakaz/bronirovanie anulirovan [ДокПосчету.НомерДок]");
							ТекстСообщения = Шаблон("Problema s el.zajavk. [ДокПосчету.НомерДок] [ДокПосчету.ДатаДок] dlja klienta [ДокПосчету.Клиент]([ДокПосчету.Клиент.Код])");
							
							ТекстТовара="";
							ДокПосчету.ВыбратьСтроки();
							Пока ДокПосчету.ПолучитьСтроку() = 1 Цикл
								ТекстТовара=ТекстТовара+"; "+ДокПосчету.Товар.Наименование;
							КонецЦикла;
							
							ТекстСообщения =ТекстСообщения+ Шаблон(" Zajavaka [ДокПосчету.НомерДок] [ДокПосчету.ДатаДок] anulirovana dokumentom [ТекущийДокумент().НомерДок]. Net tovara. ")+ТекстТовара;
							Рез=глОтправитьСообщение(Заголовок,ТекстСообщения,ДокПосчету.Агент,"Email");
//							ОтправитьСообщение( ДокПосчету.Агент,"Ваш документ Бронь в пути: "+ДокПосчету.НомерДок+ " анулирован ! Нет Товара для Составления Заявки.",);
						КонецЕсли;
						
						//	итТаблАнулир.Показать();
						Если пБроньвПутиПустая=0 Тогда
							Если пНаличТовараВДокументе>0 Тогда
	//							ОчисткаСтатуса(итТабл.ПоСчету,31);
	//							Регистр.КомплектацияЗаявок.Статус=32;
	//							Регистр.КомплектацияЗаявок.Количество=1;
	//							Регистр.КомплектацияЗаявок.ДвижениеПриходВыполнить();
							КонецЕсли;
							//	ОтправитьСообщение( ДокПосчету.Агент,"Товар по документу Бронь в пути: "+ДокПосчету.НомерДок+ ", пришел на склад",);
						КонецЕсли;					
												
						Если пБроньвПутиПустая>0 Тогда
							ОчисткаСтатуса(итТабл.ПоСчету,31);
							итТаблАнулир.НоваяСтрока();
							итТаблАнулир.ЗаполнитьСтроку(,итТабл,,);
//							Регистр.КомплектацияЗаявок.Статус=0;
//							Регистр.КомплектацияЗаявок.Количество=1;
//							Регистр.КомплектацияЗаявок.ДвижениеПриходВыполнить();
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;			
				
	
	
	
	//}Бронь в пути
	
КонецФункции

Функция ОбработкаОжидаемойПоставки(п_Док)

//соберем все счета в список
	сзСчета=СоздатьОбъект("СписокЗначений");
	тСчета=СоздатьОбъект("ТаблицаЗначений");
	п_Док.ВыгрузитьТабличнуюЧасть(тСчета,"ПоСчету");
	тСчета.Свернуть("ПоСчету","");
	тСчета.ВыбратьСтроки();
	Пока тСчета.ПолучитьСтроку() = 1 Цикл
		Если ПустоеЗначение(тСчета.ПоСчету)=0 Тогда
			сзСчета.ДобавитьЗначение(тСчета.ПоСчету);
		КонецЕсли;
	КонецЦикла;
//соберем все заказы в список.
	сзЗаказыПоставщикам=СоздатьОбъект("СписокЗначений");
	тЗаказыПоставщикам=СоздатьОбъект("ТаблицаЗначений");
	п_Док.ВыгрузитьТабличнуюЧасть(тЗаказыПоставщикам,"ДокументОснованиеТабл");

	тЗаказыПоставщикам.Свернуть("ДокументОснованиеТабл","");
//	тЗаказыПоставщикам.ВыбратьСтроку();
	тЗаказыПоставщикам.ВыбратьСтроки();
	Пока тЗаказыПоставщикам.ПолучитьСтроку() = 1 Цикл
		Если ПустоеЗначение(тЗаказыПоставщикам.ДокументОснованиеТабл)=0 Тогда
			сзЗаказыПоставщикам.ДобавитьЗначение(тЗаказыПоставщикам.ДокументОснованиеТабл);
		КонецЕсли;
	КонецЦикла;	

//Деламе список заказаов поставщику заявки.

	сзЗаказыПоставщикамЗаявки=СоздатьОбъект("СписокЗначений");
	тЗаказыПоставщикамЗаявки=СоздатьОбъект("ТаблицаЗначений");
	п_Док.ВыгрузитьТабличнуюЧасть(тЗаказыПоставщикамЗаявки,"ПоСчету");

	тЗаказыПоставщикамЗаявки.Свернуть("ПоСчету","");
//	тЗаказыПоставщикам.ВыбратьСтроку();
	тЗаказыПоставщикамЗаявки.ВыбратьСтроки();
	Пока тЗаказыПоставщикамЗаявки.ПолучитьСтроку() = 1 Цикл
		Если ПустоеЗначение(тЗаказыПоставщикамЗаявки.ПоСчету)=0 Тогда
			сзЗаказыПоставщикамЗаявки.ДобавитьЗначение(тЗаказыПоставщикамЗаявки.ПоСчету);
		КонецЕсли;
	КонецЦикла;	


	
//соберем все ОжПоставки в список - необходимо для брони в пути на осн ож. паставки
//список значений понадобится, когда на осн. нескольких ож. поставок будут приходные накладные.
	сзОжидаемыеПоставкиБронь=СоздатьОбъект("СписокЗначений");
	сзЗаказыПоставщикам.ДобавитьЗначение(п_Док);
	
//соберем все товары в список
	СЗТовары=СоздатьОбъект("СписокЗначений");
	ВыгрузитьТабличнуюЧасть(СЗТовары,"Товар");	

	
	Реги=СоздатьОбъект("Регистры");
	РегТвП=Реги.ТоварыВПути;
	РегПрТ=Реги.ПриемТовара;

	Рег=Реги.ЗаказыПоставщикам;
	РегЗЗ=Реги.ЗаказыПоставщикамЗаявки;
	РегСЗ=Реги.СпецЗаказы;

//	РегТвП.УстановитьЗначениеФильтра("Товар",СЗТовары,2);
	РегТвП.УстановитьЗначениеФильтра("Док",п_Док,1);
	
//	РегПрТ.УстановитьЗначениеФильтра("Товар",СЗТовары,2);
	РегПрТ.УстановитьЗначениеФильтра("ДокОснование",п_Док,1);

//	РегЗЗ.УстановитьЗначениеФильтра("Товар",СЗТовары,2);
	РегСЗ.УстановитьЗначениеФильтра("Товар",СЗТовары,2);
//	РегЗЗ.УстановитьЗначениеФильтра("ПоСчету",сзЗаказыПоставщикамЗаявки,2); 	
	РегЗЗ.УстановитьЗначениеФильтра("ПоЗаказу",сзЗаказыПоставщикам,2); 
//	РегЗЗ.УстановитьЗначениеФильтра("ПоЗаказу",сзОжидаемыеПоставкиБронь,2);//для брони на осн ож поставки
//	Рег.УстановитьЗначениеФильтра("Клиент",Клиент,1);
	Рег.УстановитьЗначениеФильтра("ПоЗаказу",сзЗаказыПоставщикам,2);
	
	Если ПустоеЗначение(сзСчета)=0 Тогда
		РегСЗ.УстановитьЗначениеФильтра("ПоСчету",сзСчета,2);
	КонецЕсли;
	
	Если ИтогиАктуальны()=0 Тогда                   
		РегТвП.ВременныйРасчет(1);
		РегПрТ.ВременныйРасчет(1);
		
		Рег.ВременныйРасчет(1);
		РегЗЗ.ВременныйРасчет(1);
		РегСЗ.ВременныйРасчет(1);
		
	    Реги.РассчитатьРегистрыНа(ТекущийДокумент());
	КонецЕсли;

	ТаблОстатков=СоздатьОбъект("ТаблицаЗначений");
	итТаблОстатков=СоздатьОбъект("ИндексированнаяТаблица");
	итТаблОстатковЗаказов=СоздатьОбъект("ИндексированнаяТаблица");
	РегТвП.УстановитьЗначениеФильтра("Док",п_Док,1);
	РегТвП.ВыгрузитьИтоги(ТаблОстатков,1);
	итТаблОстатков.Загрузить(ТаблОстатков);
//	итТаблОстатковЗаказов.Загрузить(итТаблОстатков);

	ТаблОстатковЗП=СоздатьОбъект("ТаблицаЗначений");
	Рег.ВыгрузитьИтоги(ТаблОстатковЗП,1);
	итТаблОстатковЗаказов.Загрузить(ТаблОстатковЗП);
	итТаблОстатковЗаказов.ДобавитьИндекс("иТоварПоЗаказу","*Товар,*ПоЗаказу");

	ТаблОстатковЗПЗ=СоздатьОбъект("ТаблицаЗначений");
	РегЗЗ.ВыгрузитьИтоги(ТаблОстатковЗПЗ,1);
	итРегЗЗ=СоздатьОбъект("ИндексированнаяТаблица");
	итРегЗЗ.Загрузить(ТаблОстатковЗПЗ);
	итРегЗЗ.ДобавитьИндекс("иТоварПоЗаказу","*Товар,*ПоЗаказу,*ПоСчету");
	итРегЗЗ.ДобавитьИндекс("иТоварЗаявка","*Товар,*ПоСчету");
	
	//итРегЗЗ.Показать();
	
	ТаблОстатков_РегПрТ=СоздатьОбъект("ТаблицаЗначений");
	РегПрТ.ВыгрузитьИтоги(ТаблОстатков_РегПрТ,1);
	итРегПрТ=СоздатьОбъект("ИндексированнаяТаблица");
	итРегПрТ.Загрузить(ТаблОстатков_РегПрТ);
//	итРегПрТ.ДобавитьИндекс("иТоварПоЗаказу","*Товар,*ПоЗаказу,*ПоСчету");
	итРегПрТ.ДобавитьИндекс("иТоварЗаявка","*Товар,*Док");
	
	итТаблАнулир=СоздатьОбъект("ИндексированнаяТаблица");

	ТаблСпецЗаявки=СоздатьОбъект("ТаблицаЗначений");
	итТаблСпецЗаявки=СоздатьОбъект("ИндексированнаяТаблица");
	РегСЗ.ВыгрузитьИтоги(ТаблСпецЗаявки,1);
	итТаблСпецЗаявки.Загрузить(ТаблСпецЗаявки);
	итТаблСпецЗаявки.ДобавитьИндекс("иТоварЗаявка","*Товар,*ПоСчету");
	//итТаблСпецЗаявки.Показать();

	итЗаявкиРезерв=СоздатьОбъект("ИндексированнаяТаблица");
	итЗаявкиРезерв.Загрузить(итРегЗЗ,,"ПоСчету");
 //   итЗаявкиРезерв.Показать();
	итЗаявкиРезерв.Свернуть("ПоСчету","");

	
	
	ОбработкаБроньВПути(итЗаявкиРезерв,итРегЗЗ,итТаблАнулир);
//	итТаблАнулир.Показать();
//	итТаблОстатков.Показать();
//	итТаблОстатковЗаказов.Показать();
//	итРегЗЗ.Показать();
//	итЗаявкиРезерв.Показать();
	РасходРегистрТоварыВПути(итТаблОстатков,п_Док);
	РасходРегистрЗаказыПоставщикам(итТаблОстатковЗаказов,сзЗаказыПоставщикам);

	РасходРегистрЗаказыПоставщикамЗаявки(итРегЗЗ,сзЗаказыПоставщикам,итЗаявкиРезерв,итТаблАнулир);	
//	РасходРегистрЗаказыПоставщикамЗаявки(итРегЗЗ,сзОжидаемыеПоставкиБронь,итЗаявкиРезерв,итТаблАнулир);	//дублируем расчет для брони

//	итРегПрТ.Показать();
	
	Если итРегПрТ.КоличествоСтрок()>0 Тогда
		РасходРегистраПриемТовара(итРегПрТ);
	КонецЕсли;
//	итРегПрТ.Показать();
	
	Если ПустоеЗначение(сзСчета)=0 Тогда
		РасходРегистраСпецЗаказы(итТаблСпецЗаявки);
	КонецЕсли;
	
//	итТаблОстатковЗаказов.Показать();
	
//	Если (Клиент.Страна<>Константа.СтранаРезидент) Тогда
//		ЗакрытьЗаказ=1;
//	КонецЕсли;
//	ГаситьРегистрЗаказыПоставщикамЗаявки999(итРегЗЗ);

//	Если (Клиент.Страна<>Константа.СтранаРезидент) Тогда
//		ЗакрытьЗаказ=1;
//	КонецЕсли;

	
	Если ((ДатаДок>='01.10.09') И (ДатаДок<='20.05.09')) ИЛИ ((ДатаДок>='21.05.10') И (ЗакрытьЗаказ=1) ) Тогда
//		итТаблОстатков.Показать();
		ГаситьРегистрТоварыВПути999(итТаблОстатков);
//		итТаблОстатковЗаказов.Показать();
		ГаситьРегистрЗаказыПоставщикам999(итТаблОстатковЗаказов);
		ГаситьРегистрЗаказыПоставщикамЗаявки999(итРегЗЗ);		
//		КонецЦикла;		
		ГаситьРегистрПриемТовара999(итРегПрТ);
//		ГаситьРегистрТоварыВПути(док,РегТвП);
	КонецЕсли;
//	ГаситьРегистрПриемТовара(п_Док);
	Если ЗакрытьЗаказ=1 Тогда
		ГаситьРегистрСостояния(п_Док);
	КонецЕсли;
	
	
	Если ГрупповаяОбработка()=0 Тогда
		спПроведениеДок = СоздатьОбъект("СписокЗначений");
		спПроведениеДок.ДобавитьЗначение(п_Док,"ОжидаемаяПоставка");
		спПроведениеДок.ДобавитьЗначение(ТекущийДокумент(),"ПриходнаяНакладная");
		ОбработкаОжидания("глПроведениеПоВремени",5);
	КонецЕсли;
	
КонецФункции
//}***Ожидаемая Поставка***\\

Функция семПроверкаЦен()
	Если ГрупповаяОбработка() = 1 Тогда Возврат 0; КонецЕсли;
	Если Склад.НеДляПродажи = 1 Тогда Возврат 0; КонецЕсли;
	Если ( ПризнакНакладной = Перечисление.ПризнПрихНакл.ВозвратОтПокупателя ) или ( ПризнакНакладной = Перечисление.ПризнПрихНакл.ВозвратСПереработки ) Тогда Возврат 0; КонецЕсли;
	
	рег = СоздатьОбъект("Регистр.ПартииТоваров");
	рег.ВыбратьДвиженияДокумента(ТекущийДокумент());
	таблСебест = СоздатьОбъект( "ТаблицаЗначений" );
	таблСебест.НоваяКолонка("Товар","Справочник.Номенклатура");
	таблСебест.НоваяКолонка("Стоимость","Число");
	таблСебест.НоваяКолонка("Количество","Число");
	Пока рег.ПолучитьДвижение() = 1 Цикл
		таблСебест.НоваяСтрока();
		таблСебест.Товар = рег.Товар;
		таблСебест.Стоимость = рег.Стоимость;
		таблСебест.Количество = рег.ОстатокТовара;
	КонецЦикла;
	таблСебест.Свернуть( "Товар","Стоимость,Количество" );
	таблСебест.НоваяКолонка("Себестоимость","Число");
	таблСебест.ВыбратьСтроки();
	Пока таблСебест.ПолучитьСтроку() = 1 Цикл
		таблСебест.Себестоимость = ?(таблСебест.Количество = 0, 0, таблСебест.Стоимость / таблСебест.Количество );
	КонецЦикла;
	
	спр = СоздатьОбъект( "Справочник.Цены" );
	ЕстьОщибки = 0;
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если Товар.ВидТовара <> Перечисление.ВидыТоваров.Товар Тогда Продолжить; КонецЕсли;
		спр.ИспользоватьВладельца( Товар );
		спр.ВыбратьЭлементы(1);
		спр.ИспользоватьДату(ДатаДок,1);
		Пока спр.ПолучитьЭлемент() = 1 Цикл
			Если спр.ПометкаУдаления() = 1 Тогда Продолжить; КонецЕсли;
			
			//в категории цены задается контроль - здесь проверям
			Если спр.КатегорияЦены.Контролировать <> Да Тогда 
				Продолжить; 
			КонецЕсли;
			
			//в цене товара может задаваться признак не контролировать
			Если спр.НеКонтролировать = 1 Тогда 
				Продолжить; 
			КонецЕсли;
			
			//не контролировать наценку для свежих продуктов
			Если Товар.Родитель.СвежийПродукт = 1 Тогда 
				Продолжить; 
			КонецЕсли;

			
			НомСтр = 0;
			Если таблСебест.НайтиЗначение( Товар, НомСтр, "Товар" ) = 1 Тогда
				закЦена = Окр(таблСебест.ПолучитьЗначение( НомСтр, "Себестоимость" ),2,1);
			Иначе
				закЦена = 0;
			КонецЕсли;
			текЦена = Окр(Пересчет( спр.Цена, спр.Валюта,ДатаДок,Рубли,ДатаДок),2,1);
			Если текЦена = 0 Тогда Продолжить; КонецЕсли;
			Если закЦена > текЦена Тогда
				Сообщить( Шаблон("Цена товара [ТовКод] [Товар] по категории [спр.КатегорияЦены] ([текЦена] [Товар.ВалютаУчета]) ниже закупочной цены ([закЦена] [Товар.ВалютаУчета])"), "!" );
				ЕстьОщибки = 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат ЕстьОщибки;
КонецФункции

Процедура ДвиженияПоПретензиям()
	//PR 15.09.16
	//формируем претензии категории C для всех расхождений по кол-ву между заказом и приходом
	глУдалениеВременнойТаблицыSQL("#ОжидаемыеПоставки");
	глУдалениеВременнойТаблицыSQL("#Приходные");

	ЗапросСКЛ = СоздатьОбъект("ODBCRecordSet");	
	
	ТекстЗапросаОжПоставки = "SELECT DISTINCT $ПриходнаяНакладнаяСтроки.ДокументОснованиеТабл Док
	|						  INTO #ОжидаемыеПоставки
	|						  FROM $ДокументСтроки.ПриходнаяНакладная AS ПриходнаяНакладнаяСтроки (NOLOCK)
	|						  WHERE (ПриходнаяНакладнаяСтроки.IDDOC = :ТекДок) AND RIGHT($ПриходнаяНакладнаяСтроки.ДокументОснованиеТабл,9)<>$ПустойИД
	|";
	
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ТекДок",ТекущийДокумент());
	ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапросаОжПоставки);

	ТекстЗапроса= "SELECT DISTINCT ПриходнаяНакладнаяСтроки.IDDOC Док
	|			   INTO #Приходные
	| 			   FROM $ДокументСтроки.ПриходнаяНакладная AS ПриходнаяНакладнаяСтроки (NOLOCK)
	|			   INNER JOIN #ОжидаемыеПоставки ON #ОжидаемыеПоставки.Док = $ПриходнаяНакладнаяСтроки.ДокументОснованиеТабл
	|			   INNER JOIN _1sjourn Жур (NOLOCK) ON Жур.IDDOC = ПриходнаяНакладнаяСтроки.IDDOC AND Жур.IDDOCDEF = $ВидДокумента.ПриходнаяНакладная AND Жур.DATE_TIME_IDDOC >= :Нач
	|";

	ЗапросСКЛ.УстановитьТекстовыйПараметр("Нач",ДатаДок-7);
	ЗапросСКЛ.ВыполнитьСкалярный(ТекстЗапроса);

//	ТекстЗапроса= "SELECT DISTINCT ПриходнаяНакладнаяСтроки.IDDOC [Док $ДокументСтроки.ПриходнаяНакладная]
//	| 			   FROM $ДокументСтроки.ПриходнаяНакладная AS ПриходнаяНакладнаяСтроки (NOLOCK)
//	|			   INNER JOIN #ОжидаемыеПоставки ON #ОжидаемыеПоставки.Док = $ПриходнаяНакладнаяСтроки.ДокументОснованиеТабл
//	|			   INNER JOIN _1sjourn Жур (NOLOCK) ON Жур.IDDOC = ПриходнаяНакладнаяСтроки.IDDOC AND Жур.IDDOCDEF = $ВидДокумента.ПриходнаяНакладная AND Жур.DATE_TIME_IDDOC >= :Нач
//	|";
//
//	ЗапросСКЛ.УстановитьТекстовыйПараметр("Нач",ДатаДок-7);
//	тт=	ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса);
	//тт.ВыбратьСтроку();
		
	
	ТекстЗапроса = "SELECT $ЗаказыПоставщикам.Товар [Товар $Справочник.Номенклатура]
	|					, $ЗаказыПоставщикам.Количество Количество
	|					, 0 Подтверждено
	|					, 0 СуммаПодтв
	|				FROM $Регистр.ЗаказыПоставщикам AS ЗаказыПоставщикам
	|				WHERE (ЗаказыПоставщикам.IDDOC IN (SELECT Док FROM #Приходные))
	|				AND (ЗаказыПоставщикам.DEBKRED = 1)
	|				UNION ALL
	|				SELECT $ПриходнаяНакладнаяСтроки.Товар [Товар $Справочник.Номенклатура]
	|						, -1*Sum($ПриходнаяНакладнаяСтроки.Количество) Количество
	|						, Sum($ПриходнаяНакладнаяСтроки.Количество) Подтверждено
	|						, Sum($ПриходнаяНакладнаяСтроки.Сумма) СуммаПодтв
	|				FROM $ДокументСтроки.ПриходнаяНакладная AS ПриходнаяНакладнаяСтроки (NOLOCK)
	|				WHERE $ПриходнаяНакладнаяСтроки.Товар NOT IN (:ГруппаТоваров1,:ГруппаТоваров2,:ГруппаТоваров3,:ГруппаТоваров4,:ГруппаТоваров5,:ГруппаТоваров6,:ГруппаТоваров7)
	|					  AND ПриходнаяНакладнаяСтроки.IDDOC IN (SELECT Док FROM #Приходные)
	|				GROUP BY $ПриходнаяНакладнаяСтроки.Товар
	|";

	итТаблПретензий = СоздатьОбъект("ИндексированнаяТаблица");
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ТекДок",ТекущийДокумент());
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ГруппаТоваров1",Константа.ГруппаТоваровБезКонтроляПоСрокам1);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ГруппаТоваров2",Константа.ГруппаТоваровБезКонтроляПоСрокам2);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ГруппаТоваров3",Константа.ГруппаТоваровБезКонтроляПоСрокам3);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ГруппаТоваров4",Константа.ГруппаТоваровБезКонтроляПоСрокам4);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ГруппаТоваров5",Константа.ГруппаТоваровБезКонтроляПоСрокам5);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ГруппаТоваров6",Константа.ГруппаТоваровБезКонтроляПоСрокам6);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ГруппаТоваров7",Константа.ГруппаТоваровБезКонтроляПоСрокам7);
	
	ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итТаблПретензий);

	ТекстЗапросаПриходы = "
	|				SELECT $ПриходнаяНакладнаяСтроки.Товар [Товар $Справочник.Номенклатура]
	|						, ПриходнаяНакладнаяСтроки.IDDOC [ДокПриход $Документ.ПриходнаяНакладная]
	|				FROM $ДокументСтроки.ПриходнаяНакладная AS ПриходнаяНакладнаяСтроки (NOLOCK)
	|				WHERE $ПриходнаяНакладнаяСтроки.Товар NOT IN (:ГруппаТоваров1,:ГруппаТоваров2,:ГруппаТоваров3,:ГруппаТоваров4,:ГруппаТоваров5,:ГруппаТоваров6,:ГруппаТоваров7)
	|					  AND ПриходнаяНакладнаяСтроки.IDDOC IN (SELECT Док FROM #Приходные)
	|				GROUP BY $ПриходнаяНакладнаяСтроки.Товар, ПриходнаяНакладнаяСтроки.IDDOC
	|";
	
	итТаблТоварыПриходы = СоздатьОбъект("ИндексированнаяТаблица");
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ТекДок",ТекущийДокумент());
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ГруппаТоваров1",Константа.ГруппаТоваровБезКонтроляПоСрокам1);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ГруппаТоваров2",Константа.ГруппаТоваровБезКонтроляПоСрокам2);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ГруппаТоваров3",Константа.ГруппаТоваровБезКонтроляПоСрокам3);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ГруппаТоваров4",Константа.ГруппаТоваровБезКонтроляПоСрокам4);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ГруппаТоваров5",Константа.ГруппаТоваровБезКонтроляПоСрокам5);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ГруппаТоваров6",Константа.ГруппаТоваровБезКонтроляПоСрокам6);
	ЗапросСКЛ.УстановитьТекстовыйПараметр("ГруппаТоваров7",Константа.ГруппаТоваровБезКонтроляПоСрокам7);
	ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапросаПриходы,итТаблТоварыПриходы);

	
	
	итТаблТоварыПриходы.ДобавитьИндекс("иТовар","*Товар");
	
	//итТаблПретензий.Показать();
	итТаблПретензий.Группировать("Товар:*Товар","Количество,Подтверждено,СуммаПодтв");
	
	//итТаблПретензий.Показать();
	
//	СутьПретензии11 = СоздатьОбъект("Справочник.Претензии");
//	СутьПретензии12= СоздатьОбъект("Справочник.Претензии");
//	СутьПретензии11.НайтиПоКоду("C01.1",0);
//	Если СутьПретензии11.Выбран()=0 Тогда
//			НеПроводить(Контекст,"Не найдена претензия по коду С01.1");
//	КонецЕсли;
//
//	СутьПретензии12.НайтиПоКоду("C01.2",0);
//	Если СутьПретензии12.Выбран()=0 Тогда
//			НеПроводить(Контекст,"Не найдена претензия по коду С01.2");
//	КонецЕсли;
//
//	СутьПретензии2 = СоздатьОбъект("Справочник.Претензии");
//	СутьПретензии2.НайтиПоКоду("C02",0);
//	Если СутьПретензии2.Выбран()=0 Тогда
//		НеПроводить(Контекст,"Не найдена претензия по коду С02");
//	КонецЕсли;
	
	итТаблПретензий.ВыбратьСтроки();
	Пока итТаблПретензий.ПолучитьСтроку() = 1 Цикл
		
		Тов 			= итТаблПретензий.Товар;
		ВалютаТовара	= Тов.ВалютаПоставщика;
		ЦенаПоставщика	= Тов.ЦенаПоставщика.Получить(ДатаДок);
		ЦенаПоставщика  = Окр(Пересчет(ЦенаПоставщика,ВалютаТовара,ДатаДок,Рубли,1),2);
		
		ЦенаПодтв 		= Окр(?(итТаблПретензий.Подтверждено=0,0,Пересчет(итТаблПретензий.СуммаПодтв/итТаблПретензий.Подтверждено,Валюта,ДатаДок,Рубли,1)),2);
		ЦенаРазн 		= ЦенаПодтв-ЦенаПоставщика;
		РазницаКол 		= итТаблПретензий.Количество;
		Подтверждено 	= итТаблПретензий.Подтверждено;
		 
		ДокПриход_ 		= ТекущийДокумент();
		
		Если итТаблТоварыПриходы.НайтиСтроку("иТовар",Тов,,1)>0 Тогда
			ДокПриход_ = итТаблТоварыПриходы.ДокПриход;
		КонецЕсли;
		
		Если  РазницаКол<>0 Тогда
			
			Регистр.ПретензииПолученные.ПривязыватьСтроку(итТаблПретензий.НомерСтроки);
			Регистр.ПретензииПолученные.Фирма = Фирма;
			Регистр.ПретензииПолученные.Товар = Тов;
			Регистр.ПретензииПолученные.СутьПретензии = ?(РазницаКол>0,Константа.ОснСутьПретензийНевыпЗаказы,Константа.ОснСутьПретензийПеревыпЗаказы);
			Регистр.ПретензииПолученные.СутьПретензииПодтв = Регистр.ПретензииПолученные.СутьПретензии ;
			Регистр.ПретензииПолученные.Агент = Тов.Закупщик;
			Регистр.ПретензииПолученные.Клиент = Клиент;
			Регистр.ПретензииПолученные.КлиентФилиала = "";
			Регистр.ПретензииПолученные.Поставщик = Клиент;
			Регистр.ПретензииПолученные.ПоСчету = "";
			Регистр.ПретензииПолученные.ПоДокументу = ДокПриход_;
			Регистр.ПретензииПолученные.Количество = РазницаКол;
			
			Регистр.ПретензииПолученные.Сумма = ?(ЦенаПодтв=0,ЦенаПоставщика,ЦенаПодтв)*РазницаКол;
			
			Регистр.ПретензииПолученные.ПретензияПолучена = 1;
			Регистр.ПретензииПолученные.СуммаПотерь = "";
			Регистр.ПретензииПолученные.ДвижениеВыполнить();
		КонецЕсли;		

		Если (ЦенаРазн<>0) И (Подтверждено>0) Тогда
			Регистр.ПретензииПолученные.ПривязыватьСтроку(итТаблПретензий.НомерСтроки);
			Регистр.ПретензииПолученные.Фирма = Фирма;
			Регистр.ПретензииПолученные.Товар = Тов;
			Регистр.ПретензииПолученные.СутьПретензии = Константа.ОснСутьПретензийНеСоответствиеЗакупЦен;
			Регистр.ПретензииПолученные.СутьПретензииПодтв = Константа.ОснСутьПретензийНеСоответствиеЗакупЦен;
			Регистр.ПретензииПолученные.Агент = Тов.Закупщик;
			Регистр.ПретензииПолученные.Клиент = Клиент;
			Регистр.ПретензииПолученные.КлиентФилиала = "";
			Регистр.ПретензииПолученные.Поставщик = Клиент;
			Регистр.ПретензииПолученные.ПоСчету = "";
			Регистр.ПретензииПолученные.ПоДокументу = ДокПриход_;
			Регистр.ПретензииПолученные.Количество = Подтверждено;
			
			Регистр.ПретензииПолученные.Сумма = ЦенаРазн*Подтверждено;
			
			Регистр.ПретензииПолученные.ПретензияПолучена = 1;
			Регистр.ПретензииПолученные.СуммаПотерь = "";
			Регистр.ПретензииПолученные.ДвижениеВыполнить();
			
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура семДвиженияПоСпецЗаказам(реги)                   
	
	рег = реги.СпецЗаказы;
	регЗЗ = реги.ЗаказыПоставщикамЗаявки;

	табл = СоздатьОбъект( "ТаблицаЗначений" );
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если Товар.Выбран() = 0 Тогда Продолжить; КонецЕсли;
		Если ПоСпецЗаказу <> Да Тогда Продолжить; КонецЕсли;
		рег.УстановитьЗначениеФильтра( "Товар", Товар );  
		рег.ВыгрузитьИтоги( табл,, 1 );
		//***********З.А.*******Сортировка заказов****начало***16.02.05***
		//необходимо отсортировать заказы по дате поставки, внутри данной сортировки по ФИФО.
		//удаляем все счета с датой поставки меньшей даты приходного документа     
		табл.НоваяКолонка("ДатаПоставки");
		Для н = 1 По табл.КоличествоСтрок() Цикл  
			Если н > табл.КоличествоСтрок() Тогда
				Прервать;
			КонецЕсли;
			табл.ПолучитьСтрокуПоНомеру(н);
			Если ПустоеЗначение(табл.ПоСчету.ДатаПоставки) = 1 Тогда
				табл.УдалитьСтроку();
				н = 0; 
				Продолжить;				
			КонецЕсли;			
			табл.ДатаПоставки = табл.ПоСчету.ДатаПоставки;
			Если табл.ПоСчету.ДатаПоставки < ДатаДок Тогда
				табл.УдалитьСтроку();
				н = 0; 
				Продолжить;
			КонецЕсли;	
			//Есть ситуация когда непроведенные и помеченные на удаление с отрицательными или другими цифрами в резерве
			//электронки лезут куда ненадо, выкинем их.
			Если (табл.ПоСчету.ПометкаУдаления() = 1)
			или(табл.ПоСчету.Проведен() = 0) Тогда    
				табл.УдалитьСтроку();
				н = 0;		
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		//если еще осталось чего сортировать, посортируем
		Если табл.КоличествоСтрок() > 0 Тогда         
			табл.Сортировать("+ДатаПоставки",1);
		иначе
			//ну вот... электронки все вышли, весь приход в свободный остаток!
		КонецЕсли;
		//***********З.А.*******Сортировка заказов****завершение	
		промКолво = Количество*Коэффициент;
	//	табл.Сортировать( "ПоСчету", 1 );
		табл.ВыбратьСтроки();
		Пока табл.ПолучитьСтроку() = 1 Цикл
			//промРезерв = Мин( табл.Заказано, промКолво );   
			промРезерв = табл.Заказано;
			//Чтобы выполнить привязку резерва необходимо иметь количество прихода равным или большим количеству заказа,
			//все что меньше идет в свободный остаток. 
			Если промКолво >= промРезерв  Тогда
				Если промРезерв > 0 Тогда
					ПривязыватьСтроку( НомерСтроки );   
					Регистр.СпецЗаказы.Товар = Товар;
					Регистр.СпецЗаказы.ПоСчету = табл.ПоСчету;
					Регистр.СпецЗаказы.Заказано = промРезерв;
					Регистр.СпецЗаказы.ДвижениеРасходВыполнить();
					
					Регистр.РезервыТоваров.Товар = Товар;
					Регистр.РезервыТоваров.ПоСчету = табл.ПоСчету; 
					Регистр.РезервыТоваров.РезервТовара = промРезерв;
					Регистр.РезервыТоваров.ДвижениеПриходВыполнить();
				КонецЕсли;
				промКолво = промКолво - промРезерв;
				Если промКолво = 0 Тогда Прервать; КонецЕсли; 
			Иначе
				//Нельзя допустить пропуска электронки неудовлетворяющей условию, дабы не нарушать хронологию,
				//сия действия.       
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры
//_____________________________________________________________________________
Процедура ПогашениеДолгаПоКредитуНал()
	
	// тут все достаточно примитивно надо делать + и - по регистру ВзаиморасчетыПокупателей
	
	//разберемся с типом операции

	ТипОперации="Закупка";
	
	Рег=Регистр.ВзаиморасчетыПоставщиков;
	Если типУчета<Фин Тогда
		// нада найти валюту взаиморасчетов
		Рег.Фирма=Фирма;
		ПромВал=Клиент.ВалютаКредитаПоставщика;
	КонецЕсли;

	Если ПромВал.Выбран()=0 Тогда
		ПромВал=Константа.ВалютаВзаиморасчетов;
	КонецЕсли;

	Если ПромВал.Выбран()=0 Тогда
		НеПроводить(Контекст,"Не найдена валюта кредита клиента!");
		Возврат;
	КонецЕсли;
	
	Рег.Клиент		=Клиент;
	Рег.ВидОтгрузки	=ОтгрузкаТоваровИУслуг;
	Рег.КредДокумент=ТекущийДокумент();
	
	ДолгРег = Итог("Сумма")+Итог("НДС");
	
	Если типУчета>Упр Тогда //фин учет
	    Рег.Фирма=Фирма;
		Рег.Долг=Окр(Пересчет(ДолгРег,Валюта,Курс,Рубли,ДатаДок),Константа.КоэффОкрРублЦены,1);
	КонецЕсли;
		
	Если типУчета<Фин Тогда
		// нада найти валюту взаиморасчетов
	    Рег.Фирма=Фирма;
		Рег.Долг=Окр(Пересчет(ДолгРег,Валюта,Курс,ПромВал,ДатаДок),5,1);
	КонецЕсли; 
	
	Рег.КодОперации=НеоплаченнаяОтгрузкаТовараКупленного;
	Рег.ДвижениеРасходВыполнить(); 
	Рег.КодОперации=ОплатаТоваровИУслуг;
	Рег.ДвижениеПриходВыполнить();
	
КонецПроцедуры //ПогашениеДолгаПоКредитуНал()
//--------------------------------------------
Функция НайтиЕдиницуИзмерения(КакойТоТовар,КакаяТоЕдиница) 
	Если (ПустоеЗначение(КакойТоТовар)=1) или (ПустоеЗначение(КакаяТоЕдиница)=1) Тогда  
		Возврат ПолучитьПустоеЗначение("Справочник.Единицы");    
	Иначе
		Спр=СоздатьОбъект("Справочник.Единицы");
		Спр.ИспользоватьВладельца(КакойТоТовар);    
		Спр.ВыбратьЭлементы();
		Пока Спр.ПолучитьЭлемент()=1 Цикл
			Если Спр.Единица=КакаяТоЕдиница Тогда
				Возврат Спр.ТекущийЭлемент();	
			КонецЕсли;
		КонецЦикла;
		Возврат ПолучитьПустоеЗначение("Справочник.Единицы");	
	КонецЕсли;
КонецФункции 
//--------------------------------------------
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения() Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура ОтправитьСообщение( пПользователь,пСообщ, пОбъект="" )
	Блокнот=СоздатьОбъект("Справочник.Блокнот");
	
		Если Блокнот.НайтиПоКоду(СокрЛП(пПользователь),0) = 1 Тогда 
			Блокнот.ИспользоватьРодителя(Блокнот.ТекущийЭлемент());
			глСоздатьНовыйОбъект(Блокнот);
			Блокнот.Наименование = "Бронирование";
			Блокнот.__Дата = ТекущаяДата();
			Блокнот.Время=ТекущееВремя();
			Блокнот.Автор = Пользователь;
			Блокнот.Запись=Шаблон("[пСообщ]");
			Блокнот.Записать();
		КонецЕсли;
КонецПроцедуры


Процедура стар_ОбработкаПроведения()
//Закомментировано Инсталлятором МОД:Процедура ОбработкаПроведения()
        // сем \\
	Если семМожноПровести( Контекст ) = 0 Тогда Возврат; КонецЕсли;
	семОбновитьКурс( контекст );
	Если ГрупповаяОбработка() = 0 Тогда 
		Если ПризнакНакладной <> Перечисление.ПризнПрихНакл.Недопоставка Тогда
			Если семПроверкаСрокаРеализации( Контекст ) = 0 Тогда Возврат; КонецЕсли;
		КонецЕсли;
	КонецЕсли; 

	чКонтрольСроковРеализ = Склад.КонтрольПриходаСроковРеализации.Получить(ДатаДок);
        // сем //
	//Если ДатаДок>ТекущаяДата() Тогда
	//	НеПроводить(Контекст,"Нельзя проводить документ будущей датой!");
	//	Возврат;
	//КонецЕсли;
	Если КоличествоСтрок()=0 Тогда
		НеПроводить(Контекст,"Не заполнены строки документа!");
		Возврат;
	КонецЕсли;      
	
	Если глПроверкаСкладаПоПользователю(Контекст,Склад)=0 Тогда
		НеПроводить(Контекст,"Нельзя использовать данный склад!");
		Возврат;
	КонецЕсли;
	
	Если ПроверкаДублейСтрок(Контекст)=1 Тогда 
		Сообщить("В документе строки с одинаковым товаром!");
//		Возврат;
	КонецЕсли; 
	             
	Если ПризнакНакладной = Перечисление.ПризнПрихНакл.ВозвратОтПокупателя Тогда
		Если ПустоеЗначение(Агент) = 1 Тогда
			НеПроводить(Контекст,"Укажите агента!");
			Возврат;		
		КонецЕсли;	
	Иначе                
		
		Если ПустоеЗначение(ДатаОплаты)=1 Тогда
			НеПроводить(Контекст,"Не задана дата оплаты!");
			Возврат;		
		КонецЕсли;

		Если ДатаИнвойса>ДатаДок Тогда
			НеПроводить(Контекст,"Дата инвойса не может быть больше даты документа!");
			Возврат;		
		КонецЕсли;

		
		//Находим проблемные претензии
		Проблемный=0;
		Док = СоздатьОбъект("Документ");
		Док.ВыбратьПодчиненныеДокументы(ДатаДок,,ТекущийДокумент());
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если Док.Проведен()=0 Тогда
				Продолжить;
			КонецЕсли;

			Если Док.Вид()="ПретензияПолученная" Тогда
				Док.ВыбратьСтроки();
				Пока Док.ПолучитьСтроку()=1 Цикл
					Если Док.СутьПретензии.ПроблемаПриПриходе=1 Тогда
						Проблемный=1;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если (Док.Вид()="ПриходнаяНакладная") Тогда
				Если Док.ПризнакНакладной = Перечисление.ПризнПрихНакл.Недопоставка Тогда
					Проблемный=1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если (ГрупповаяОбработка() = 0) И (Подтверждена=0) И (ДатаДок>Константа.ДатаЗапретаРедактирования) И (кВклПроверкуПретензийПрихода = 1) Тогда
			Если  ПризнакНакладной = Перечисление.ПризнПрихНакл.Недопоставка Тогда
				Рез = семПроверкаПретензии(ДокументПрихода);
			Иначе
				Рез = семПроверкаПретензии(Контекст);
			КонецЕсли;
			Если рез = 0 Тогда
				Сообщить("Ошибка проведения документа.","!");
				СтатусВозврата(0); Возврат;
			КонецЕсли;
		КонецЕсли;

		Если (ПустоеЗначение(ДатаПриходаТовара)=1) И (ГрупповаяОбработка()=0) Тогда
			НеПроводить(Контекст,"Не указана фактическая дата прихода товара!");
			Возврат;
		КонецЕсли;
		
		//проставляем автоматическое подтверждение для местных приходов, если нет проблем. 
		Если ГрупповаяОбработка()=0 Тогда
			Если Клиент.Страна = Константа.СтранаРезидент Тогда
				Если Проблемный = 0  Тогда
					Подтверждена = 1;
					ПодтвержденаАвтор=Пользователь;
					ПользовательПодтв=Пользователь.Сотрудник;
					ЗаписьЖурналаРегистрации("Подтвержден документ автоматом","Документ","Подтверждение",ТекущийДокумент(),2);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
		Если (ДатаПриходаТовара>ДатаДок) Тогда
			Сообщить("Фактическая дата прихода позже даты ввода документа!","!!!");
		КонецЕсли;
		
	КонецЕсли;
//{***Проверка на наличие проведение раньше документа основания***\\
	Если (ГрупповаяОбработка() = 0) Тогда
		Если ПризнакНакладной=Перечисление.ПризнПрихНакл.Закупка Тогда      
			
			Если СформироватьПозициюДокумента(ДокументОснование)>СформироватьПозициюДокумента(ТекущийДокумент()) Тогда
				Сообщить("Ошибка проведения. Документ основания сделан позже приходного документа","!");
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
//}***Проверка на наличие проведение раньше документа основания***\\

//{***Проверка на наличие ожидаемой поставки в документе основания***\\
	Если (ГрупповаяОбработка() = 0) Тогда
		Если (ДокументОснование.Вид()="ЗаказПоставщику") Тогда
			докЗаказПост=СоздатьОбъект("Документ.ЗаказПоставщику");
			докЗаказПост.НайтиДокумент(ДокументОснование);
			Если докЗаказПост.Выбран()=1 Тогда
				Докум=СоздатьОбъект("Документ"); 
				Если Докум.ВыбратьПодчиненныеДокументы(,,докЗаказПост.ТекущийДокумент())=1 Тогда
					Пока Докум.ПолучитьДокумент()=1 Цикл
						Если Докум.Вид()="ОжидаемаяПоставка" Тогда
							Сообщить("Ошибка проведения. На данный приход имеется соответствующая ожидаемая поставка","!");
							СтатусВозврата(0);
							Возврат;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
//}***Проверка на наличие ожидаемой поставки в документе основания***\\

	// надо записать партии
	СпрПартии 	   = СоздатьОбъект("Справочник.Партии");
	
	//Упак1=0;
	//Упак2=0;
	//Упак3=0;
	//Упак4=0;
	//Упак5=0;
	//Упак6=0;
	//
	//ЕстьУпаковка=0;
	
	// таблица упаковки понадобится в двух случаях:
	// 1) страна отправитель - не латвия
	// 2) товар является упаковкой
	
	СпрУпак=СоздатьОбъект("Справочник.УпаковкаТоваров");
	ТаблУпак=СоздатьОбъект( "ТаблицаЗначений" );
	ТаблУпак.НоваяКолонка("Материал");
	ТаблУпак.НоваяКолонка("Вес");
			
	СпрТ=СоздатьОбъект("Справочник.Номенклатура");
	СпрТ.НайтиПоКоду(97);
	ГруппаТовараБезЦен=СпрТ.ТекущийЭлемент();
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		
		Если (ГрупповаяОбработка()=0) И(Подтверждена=0) Тогда
			Если (ПустоеЗначение(ГруппаТовараБезЦен)=0) И (Товар.ПринадлежитГруппе(ГруппаТовараБезЦен)=1) И (Цена<>0) Тогда
				НеПроводить(Контекст,"В строке "+НомерСтроки+" у товара "+Товар.Код+" "+Товар+" не может быть цены, т.к. она находится в группе "+ГруппаТовараБезЦен+"!");
			КонецЕсли;
		
			Если (Товар.ПринадлежитГруппе(Константа.ГруппаТоваровБезКонтроляПоСрокам1)=1) ИЛИ 
				(Товар.ПринадлежитГруппе(Константа.ГруппаТоваровБезКонтроляПоСрокам2)=1) ИЛИ
				(Товар.ПринадлежитГруппе(Константа.ГруппаТоваровБезКонтроляПоСрокам3)=1) ИЛИ
				(Товар.ПринадлежитГруппе(Константа.ГруппаТоваровБезКонтроляПоСрокам4)=1) ИЛИ
				(Товар.ПринадлежитГруппе(Константа.ГруппаТоваровБезКонтроляПоСрокам5)=1) ИЛИ
				(Товар.ПринадлежитГруппе(Константа.ГруппаТоваровБезКонтроляПоСрокам6)=1) ИЛИ
				(Товар.ПринадлежитГруппе(Константа.ГруппаТоваровБезКонтроляПоСрокам7)=1) Тогда
	 		Иначе
				Если ПустоеЗначение(Товар)=0 Тогда
					пДатаРеал = СрокРеализ;
					пСрокГодн = Товар.СрокГоднПоставщика;
					пДопДней = Товар.ДопустСрокГодн;
					Если пДатаРеал = 0 Тогда
						пОстПроц = "???";
					ИначеЕсли пСрокГодн > 0 Тогда
						пОстДней = пДатаРеал - ДатаДок;
						пОстПроц = Окр( пОстДней / пСрокГодн * 100, 2, 1 );
					КонецЕсли;
					
					Если пОстПроц="???" Тогда
					ИначеЕсли Число(пОстПроц) > 100 Тогда
						Сообщить("Для товара в строке "+ НомерСтроки +" введенный срок реализации превышает 100% от остатка срока!","!!!");
						Если (Число(пОстПроц) > 150) И (чКонтрольСроковРеализ=1) Тогда
							НеПроводить(Контекст,"Срок реализации превышает на "+пОстПроц+"% от остатка срока!");
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
	 			 	
		 	КонецЕсли;
			
		КонецЕсли;
		
		
		Если (ИспользоватьРасчетDRN=0) И (ГрупповаяОбработка()=0) Тогда
			Если (Клиент.Страна.ВидСтраны <> Перечисление.ВидыСтран.СтранаРезидент) 
			или ((Товар.ЯвляетсяУпаковкой = Перечисление.Булево.Да) и (Сумма <> 0)) Тогда
				СпрУпак.ИспользоватьВладельца(Товар);
				СпрУпак.ВыбратьЭлементы();
				Пока СпрУпак.ПолучитьЭлемент() = 1 Цикл
					Если (СпрУпак.ПометкаУдаления()=1) или (ПустоеЗначение(СпрУпак.Материал)=1) или (Товар.ЛогистикаКолВУпаковке=0) Тогда
						Продолжить;
					КонецЕсли;
					Материал=СпрУпак.Материал;
					// вес упаковки рассчитываем на базовую единицу через единицу первичной упаковки
					Если Товар.ЕдНеттоВеса.Выбран()=1 Тогда
						КоэфНеттоВеса = Товар.ЕдНеттоВеса.Коэффициент;
					Иначе
						КоэфНеттоВеса=1;
					КонецЕсли;
					Если СпрУпак.ТипУпаковки = Перечисление.ТипыУпаковки.Первичная Тогда
						КоэфПересчета = КоэфНеттоВеса;
					ИначеЕсли СпрУпак.ТипУпаковки = Перечисление.ТипыУпаковки.Вторичная Тогда
						КоэфПересчета = КоэфНеттоВеса * Товар.ЛогистикаКолВУпаковке;
					ИначеЕсли СпрУпак.ТипУпаковки = Перечисление.ТипыУпаковки.Третичная Тогда	
						КоэфПересчета = КоэфНеттоВеса*Товар.ЛогистикаКолВУпаковке*Товар.ЛогистикаКолУпакНаЕвроПалете*Товар.ЛогистикаКолУпакНаПалетеВРяду;
					КонецЕсли;
					Если КоэфПересчета <> 0 Тогда
						Вес = СпрУпак.ВесБруттоУпаковки / КоэфПересчета;
						ТаблУпак.НоваяСтрока();
						ТаблУпак.Материал = Материал;
						ТаблУпак.Вес = Вес*Количество*Коэффициент;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если (Партия.Выбран() = 0) и (Товар.Выбран() = 1) Тогда
			СпрПартии.ИспользоватьВладельца(Товар);
//            Сообщить("Для товара "+Товар.Код+" "+Товар+" записана новая партия!");
			глСоздатьНовыйОбъект(СпрПартии); 
			Попытка
			//Закомментировано Инсталлятором МОД:СпрПартии.Записать();
			//Начало текста, вставленного Инсталлятором МОД
				СпрПартии.Записать();
			//Конец текста, вставленного Инсталлятором МОД
                Партия=СпрПартии.ТекущийЭлемент();
			Исключение  
				НеПроводить(Контекст,"Строка документа: " + НомерСтроки + " Ошибка: " + ОписаниеОшибки());
				Прервать;
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла; 
	
	ТаблУпак.Свернуть("Материал","Вес");
	Если (ИспользоватьРасчетDRN=0) И (ГрупповаяОбработка()=0) Тогда
		КолВидУпаковки1=0;
		КолВидУпаковки2=0;
		КолВидУпаковки3=0;
		КолВидУпаковки4=0;
		КолВидУпаковки5=0;
		КолВидУпаковки6=0;
		ТаблУпак.ВыбратьСтроки();
		Пока ТаблУпак.ПолучитьСтроку() = 1 Цикл
			Если ТаблУпак.Материал = Константа.ВидНалогаУпаковка1 Тогда
				КолВидУпаковки1 = ТаблУпак.Вес;
			ИначеЕсли ТаблУпак.Материал = Константа.ВидНалогаУпаковка2 Тогда
				КолВидУпаковки2 = ТаблУпак.Вес;
			ИначеЕсли ТаблУпак.Материал = Константа.ВидНалогаУпаковка3 Тогда
				КолВидУпаковки3 = ТаблУпак.Вес;
			ИначеЕсли ТаблУпак.Материал = Константа.ВидНалогаУпаковка4 Тогда
				КолВидУпаковки4 = ТаблУпак.Вес;
			ИначеЕсли ТаблУпак.Материал = Константа.ВидНалогаУпаковка5 Тогда
				КолВидУпаковки5 = ТаблУпак.Вес;
			ИначеЕсли ТаблУпак.Материал = Константа.ВидНалогаУпаковка6 Тогда
				КолВидУпаковки6 = ТаблУпак.Вес;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Клиент.ИспользоватьДату(ДатаДок);
	// Запишем главного клиента
	Если Клиент.КлГруппа.Выбран()=1 Тогда
		КлГруппа=Клиент.КлГруппа;
	Иначе
		КлГруппа=Клиент;
	КонецЕсли;

	Если КлГруппа.ДляВыгрузки=0 Тогда
		спр=СоздатьОбъект("Справочник.Контрагенты");
   		Спр.НайтиЭлемент(КлГруппа);
		Спр.ДляВыгрузки=1;
		ОбъектЗаписать(Спр,);
	КонецЕсли;
	
	Клиент.ИспользоватьДату("");
	
	
	
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ТЗУслугиСторОрг = СоздатьОбъект("ТаблицаЗначений");
        
    Док = СоздатьОбъект("Документ");
	Док.ВыбратьПодчиненныеДокументы(ДатаДок,,ТекущийДокумент());
	Транспорт = 0; 
	ТаможенныеРасходы = 0;
	Найден    = 0;
	Пока Док.ПолучитьДокумент()=1 Цикл
		Если Док.Проведен()=0 Тогда
			Продолжить;
		КонецЕсли;
		Если не(Док.Вид()="УслугиПеревозки") Тогда
			Продолжить;
		КонецЕсли;                              

		Док.ВыгрузитьТабличнуюЧасть(ТЗУслугиСторОрг);
		ТЗУслугиСторОрг.Свернуть("ПрихДок","Сумма,НДС");
		Стр = 0;
		Если ТЗУслугиСторОрг.НайтиЗначение(ТекущийДокумент(),Стр,"ПрихДок") = 1 Тогда
			ТЗУслугиСторОрг.ПолучитьСтрокуПоНомеру(Стр);
			Транспорт = Транспорт + ТЗУслугиСторОрг.Сумма*Док.Курс;
		КонецЕсли;
	КонецЦикла; 
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	                             
	Если ПризнакНакладной<>Перечисление.ПризнПрихНакл.Недопоставка Тогда
		//-------------------------------------
		// по Регистру ОстаткиТоваров и РезервыТоваров  Упр. учет
		Если ТипУчета<Фин Тогда
			Если ДвиженияРегистровНакладных(Контекст)=1 Тогда
				Возврат;
			КонецЕсли;
			//ДвиженияПоЗаказам(Контекст,"Закупать");		
		КонецЕсли;
	КонецЕсли;
	
	Если (ПризнакНакладной=Перечисление.ПризнПрихНакл.Недопоставка)  ИЛИ (ПризнакНакладной=Перечисление.ПризнПрихНакл.Допоставка) Тогда
		Если (ДатаДок>='01.12.08') И (ПустоеЗначение(ДокументПрихода)=1) Тогда
			НеПроводить(Контекст,"Данный документ должен быть привязан к приходному документу. Выбор сразу после номера!");
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ТабНДС=СоздатьОбъект("ТаблицаЗначений");
	ТабНДС.НоваяКолонка("СтавкаНДС");
	ТабНДС.НоваяКолонка("СуммаНДС");
	ТабНДС.НоваяКолонка("Сумма");
	СлужСтНДС=СоздатьОбъект("Документ.Служ_СтавкиНДС");
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		
		Если ПустоеЗначение(СтавкаНДС_Т)=1 Тогда
			СтавкаНДС_Т = СтавкаНДС;
		КонецЕсли;

		ТабНДС.НоваяСтрока();
		ТабНДС.СтавкаНДС = СтавкаНДС_Т;
		ТабНДС.СуммаНДС = НДС;
		ТабНДС.Сумма = Сумма;
		
	КонецЦикла;	
	
	ТабНДС.Свернуть("СтавкаНДС","СуммаНДС,Сумма");
	Если ТабНДС.КоличествоСтрок() > 1 Тогда // нужен доп. служ. документ
		Если (СлужСтавкиНДС.Выбран()=0)  Тогда
			СлужСтНДС.Новый();
			СлужСтНДС.IDD=ПолучитьУникальныйIDD();
			СлужСтНДС.ДатаДок=Дата(1980,ДатаМесяц(ДатаДок),ДатаЧисло(ДатаДок));
			СлужСтНДС.УстановитьНовыйНомер("PD");
			ОбъектЗаписать(СлужСтНДС,);
		Иначе	
			СлужСтНДС.НайтиДокумент(СлужСтавкиНДС);	
		КонецЕсли;
		СлужСтНДС.УдалитьСтроки();
		// Цикл по строкам
		ТабНДС.ВыбратьСтроки();
		Пока ТабНДС.ПолучитьСтроку() = 1 Цикл
			СлужСтНДС.НоваяСтрока();
			СлужСтНДС.СтавкаНДС = ТабНДС.СтавкаНДС;
			СлужСтНДС.ВсегоНДСШ = ТабНДС.СуммаНДС;
			СлужСтНДС.ВсегоСуммаШ=ТабНДС.Сумма;
		КонецЦикла;
		ОбъектЗаписать(СлужСтНДС,);
		СлужСтавкиНДС=СлужСтНДС.ТекущийДокумент();
	Иначе
		Если ПустоеЗначение(СлужСтавкиНДС)=0 Тогда
			Если СлужСтНДС.НайтиДокумент(СлужСтавкиНДС)=1 Тогда
				СлужСтНДС.Удалить(1);
				СлужСтавкиНДС="";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СпрТов=СоздатьОбъект("Справочник.Номенклатура");
	//---------------------
	// учет по Кредитам
	// Выделим отдельно Товары и Услуги
	СуммаТоваров=0;
	СуммаТоваров20=0;
	СуммаТоваров10=0;
	СуммаТоваровБез=0;
	СуммаУслуг=0;
	СуммаУслуг20=0;
	СуммаУслуг10=0;
	СуммаУслугБез=0;
	// анна товары без учета транспортных затрат
	СуммаТоваровДляРасчетаТранспорта=0;
	// новый алгоритм распределения - через кол-во поддонов
	ЧислоПоддоновДляРасчетаТранспорта=0;
	ПоддоныВездеУказаны=1; // если у какого-то товара не указано - запомним в этой переменной
	ТоварыБезТр=СоздатьОбъект("Справочник.ТоварыБезТранспортныхЗатрат");
	СписокТоваровБезТр=СоздатьОбъект("СписокЗначений");
	Если ДатаДок >= '01.09.2009' Тогда
		ТоварыБезТр.ВыбратьЭлементы();
		Пока ТоварыБезТр.ПолучитьЭлемент() = 1 Цикл
			Если  (ТоварыБезТр.ПометкаУдаления()=0) и (ТоварыБезТр.Товар.Выбран()=1) Тогда
				СписокТоваровБезТр.ДобавитьЗначение(ТоварыБезТр.Товар);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// анна товары без учета транспортных затрат
	//Если СуммаТоваров > 0 Тогда
	
	СебестоимостьОтПалетизации=Клиент.СебестоимостьОтПалетизации.Получить(ДатаДок);
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// акциз


	ЭкспВалюта = семПолучитьВалютуПоНаим( "EUR" );	
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		ТранспортПоТовару = 0;
		ТаможняПоТовару	  = 0;
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		СпрТов.НайтиЭлемент(Товар);
		ПромЦена=Пересчет(Цена,Валюта,Курс,Товар.ВалютаЗакупки,ДатаДок); 
		
		Если ГрупповаяОбработка()=0 Тогда
		    
			Если (ПризнакНакладной=Перечисление.ПризнПрихНакл.Закупка) ИЛИ (ПризнакНакладной=Перечисление.ПризнПрихНакл.ПриемИмпорта) Тогда
				Если ПриходБезНДС=0 Тогда
				     СпрТов.ЦенаПриобретения=ПромЦена;
		        Иначе
		//	         ПромЦена=ПромЦена+(ПромЦена*ПроцентНДС(Товар.СтавкаНДС)/100);
			         СпрТов.ЦенаПриобретения=ПромЦена;
				КонецЕсли;	 
				//Закомментировано Инсталлятором МОД:СпрТов.Записать();
				//Начало текста, вставленного Инсталлятором МОД
				СпрТов.Записать();
				//Конец текста, вставленного Инсталлятором МОД

				Если ПустоеЗначение( Константа.ОсновнаяКатегорияЦеныЗакупки) = 0 Тогда 
					
					//устанавливаем закупочную цену на товар			
					спрЦены = СоздатьОбъект( "Справочник.Цены" );
					спрЦены.ИспользоватьВладельца( Товар.ТекущийЭлемент() );
					Если спрЦены.НайтиПоРеквизиту( "КатегорияЦены", Константа.ОсновнаяКатегорияЦеныЗакупки, 0 ) = 0 Тогда
						глСоздатьНовыйОбъект(спрЦены);
						спрЦены.Валюта = ЭкспВалюта;
						спрЦены.Единица = Единица;
						спрЦены.КатегорияЦены = Константа.ОсновнаяКатегорияЦеныЗакупки;
					КонецЕсли;
		
					ОбъектЗаписать(спрЦены, );
					ЭкспКоэфф = ?( спрЦены.Единица.Коэффициент = 0, 1, спрЦены.Единица.Коэффициент ) * Коэффициент;
					ПривязыватьСтроку( НомерСтроки );
					УстановитьРеквизитСправочника( спрЦены.ТекущийЭлемент(), "Цена", Пересчет(Цена,Валюта,Курс,ЭкспВалюта,ДатаДок), ДатаДок );
				КонецЕсли;		

			КонецЕсли;

			
			Если ПустоеЗначение(ТовСертификат)=0 Тогда
			    УстановитьРеквизитСправочника(СпрТов.ТекущийЭлемент(),"Сертификат",ТовСертификат,ТекущийДокумент());
			КонецЕсли;

		КонецЕсли;

	
		
		Если  Товар.ВидТовара=Перечисление.ВидыТоваров.Услуга Тогда
			СуммаУслуг=СуммаУслуг+Сумма+НДС;
		Иначе  //Если Товар.ВидТовара=Перечисление.ВидыТоваров.Товар Тогда 
			СуммаТоваров=СуммаТоваров+Сумма+НДС;
			// анна товары без учета транспортных затрат
			Если СписокТоваровБезТр.Принадлежит(Товар)=0 Тогда
				СуммаТоваровДляРасчетаТранспорта=СуммаТоваровДляРасчетаТранспорта+Сумма;
				// число поддонов
				Если Товар.ЕдНеттоВеса.Выбран()=1 Тогда
					КоэфНеттоВеса = Товар.ЕдНеттоВеса.Коэффициент;
				Иначе
					КоэфНеттоВеса=1;
				КонецЕсли;
				// базовых едииниц на поддоне:
				НаОдномПоддоне = КоэфНеттоВеса * Товар.ЛогистикаКолВУпаковке * Товар.ЛогистикаКолУпакНаЕвроПалете * Товар.ЛогистикаКолУпакНаПалетеВРяду;
				
				Если НаОдномПоддоне <> 0 Тогда
					Поддонов = Количество * Коэффициент / НаОдномПоддоне;
				Иначе
					ПоддоныВездеУказаны=0;
					Если СебестоимостьОтПалетизации=1 Тогда
						Сообщить("Для товара "+Товар.Код+" "+ Товар+ " неверно указано кол-во паллет.");
						Сообщить("Распределение транспортных затрат будет идти пропорционально сумме товара!");
					КонецЕсли;

				КонецЕсли;
				ЧислоПоддоновДляРасчетаТранспорта = ЧислоПоддоновДляРасчетаТранспорта + Поддонов;
			Иначе
				Сообщить("Товар "+Товар+" принадлежит списку без транспортных затрат ");
			КонецЕсли;
		КонецЕсли; 
		Всего = Пересчет(Сумма,Валюта,Курс,Рубли,1);
	КонецЦикла;
	
	
	
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// анна товары без учета транспортных затрат
	//Если СуммаТоваров > 0 Тогда
	
//	СебестоимостьОтПалетизации=Клиент.СебестоимостьОтПалетизации.Получить(ДатаДок);
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// акциз
	Акциз=0;
	пАкциз=0;
	
	Если СуммаТоваровДляРасчетаТранспорта > 0 Тогда  
		//{
		
		Если (СебестоимостьОтПалетизации=1) и (ПоддоныВездеУказаны=1) Тогда
			СуммаТоваровРуб = ЧислоПоддоновДляРасчетаТранспорта;
		ИначеЕсли ДатаДок >= '01.09.2009' Тогда
			СуммаТоваровРуб=Пересчет(СуммаТоваровДляРасчетаТранспорта,Валюта,Курс,Рубли,1);
		Иначе
			СуммаТоваровРуб=Пересчет(Итог("Сумма"),Валюта,Курс,Рубли,1);
		КонецЕсли;
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			СуммаРуб=Пересчет(Сумма,Валюта,Курс,Рубли,1);
			ТранспортПоТовару = 0;
			Если Товар.ВидТовара = Перечисление.ВидыТоваров.Услуга Тогда
				Продолжить;
			КонецЕсли;	
			Если  (СписокТоваровБезТр.Принадлежит(Товар)=1) Тогда
				Продолжить;
			КонецЕсли;
			Если (СебестоимостьОтПалетизации=1) и (ПоддоныВездеУказаны=1) Тогда
				Если Товар.ЕдНеттоВеса.Выбран()=1 Тогда
					КоэфНеттоВеса = Товар.ЕдНеттоВеса.Коэффициент;
				Иначе
					КоэфНеттоВеса=1;
				КонецЕсли;
				НаОдномПоддоне = КоэфНеттоВеса * Товар.ЛогистикаКолВУпаковке * Товар.ЛогистикаКолУпакНаЕвроПалете * Товар.ЛогистикаКолУпакНаПалетеВРяду;
				Поддонов = Количество * Коэффициент / НаОдномПоддоне;
				ТранспортПоТовару = Поддонов * (Транспорт / ЧислоПоддоновДляРасчетаТранспорта);
			Иначе
				ТранспортПоТовару = Всего*(Транспорт/СуммаТоваровРуб);
			КонецЕсли;
			ТаможняПоТовару = (Всего + ТранспортПоТовару)*(Таможня/100);
			Всего = Всего + ТранспортПоТовару + ТаможняПоТовару+АкцизнаяСтавка*Количество*Коэффициент;
			пАкциз=пАкциз+АкцизнаяСтавка*Количество*Коэффициент;
		КонецЦикла;
		Акциз=Окр(пАкциз,2);
		ТаможенныеРасходы = Итог("ТаможняПоТовару")/Курс;
		//}
	КонецЕсли; 
	
	//***********************************************************
	//<<Алгоритм Успеха>> (begin)
	//
	Если ДокументОснование.Выбран()=1 Тогда
		
		////по местным поставщикам заказы не закрываем - просьба закупки
		//Если (Клиент.Страна=Константа.СтранаРезидент) Тогда
		//	ЗакрытьЗаказ=0;
		//КонецЕсли;
		
		Если ДокументОснование.Вид()="ЗаказПоставщику" Тогда
			Если ПризнакНакладной <> Перечисление.ПризнПрихНакл.Недопоставка Тогда
				
		
				
		        Если Клиент<>ДокументОснование.Клиент Тогда
		            	НеПроводить(Контекст,"Клиент документа не совпадает с основанием");
				Возврат;
			КонецЕсли;  
			
			
	        	Если Склад<>ДокументОснование.Склад Тогда
//	            НеПроводить(Контекст,"Склад документа не совпадает с основанием");
//				Возврат;
			КонецЕсли;                 
	
				
				
				//соберем все счета в список
				сзСчета=СоздатьОбъект("СписокЗначений");
				тСчета=СоздатьОбъект("ТаблицаЗначений");
				ДокументОснование.ВыгрузитьТабличнуюЧасть(тСчета,"ПоСчету");
				тСчета.Свернуть("ПоСчету","");
				тСчета.ВыбратьСтроки();
				Пока тСчета.ПолучитьСтроку() = 1 Цикл
					Если ПустоеЗначение(тСчета.ПоСчету)=0 Тогда
						сзСчета.ДобавитьЗначение(тСчета.ПоСчету);
					КонецЕсли;
				КонецЦикла;
	
				СЗТовары=СоздатьОбъект("СписокЗначений");
				ВыгрузитьТабличнуюЧасть(СЗТовары,"Товар");
				
				Реги=СоздатьОбъект("Регистры");
				Рег=Реги.ЗаказыПоставщикам;
				РегЗЗ=Реги.ЗаказыПоставщикамЗаявки;
				РегСЗ=Реги.СпецЗаказы;
				
				РегЗЗ.УстановитьЗначениеФильтра("Товар",СЗТовары,2);
				РегСЗ.УстановитьЗначениеФильтра("Товар",СЗТовары,2);
				РегЗЗ.УстановитьЗначениеФильтра("ПоЗаказу",ДокументОснование,1);
				Рег.УстановитьЗначениеФильтра("Клиент",Клиент,1);
//				Рег.УстановитьЗначениеФильтра("Товар",СЗТовары,2);
	
				Если ПустоеЗначение(сзСчета)=0 Тогда
				//	РегЗЗ.УстановитьЗначениеФильтра("ПоСчету",сзСчета,2);
					РегСЗ.УстановитьЗначениеФильтра("ПоСчету",сзСчета,2);
				КонецЕсли;
				
				Если ИтогиАктуальны()=0 Тогда                   
					Рег.ВременныйРасчет(1);
					РегЗЗ.ВременныйРасчет(1);
					РегСЗ.ВременныйРасчет(1);
					Реги.Актуальность(1);
				    Реги.РассчитатьРегистрыНа(ТекущийДокумент());
				КонецЕсли;
				ТаблОстатков=СоздатьОбъект("ТаблицаЗначений"); 
				Рег.УстановитьЗначениеФильтра("Клиент",Клиент,1);
				Рег.УстановитьЗначениеФильтра("ПоЗаказу",ДокументОснование.ТекущийДокумент(),1);
				//Рег.УстановитьФильтр(,,Клиент,,ДокументОснование.ТекущийДокумент());
				Рег.ВыгрузитьИтоги(ТаблОстатков,1);
	
				ТаблЗаказыЗаявки=СоздатьОбъект("ТаблицаЗначений");
				итТаблЗаказыЗаявки=СоздатьОбъект("ИндексированнаяТаблица");
				РегЗЗ.ВыгрузитьИтоги(ТаблЗаказыЗаявки,1);
				итТаблЗаказыЗаявки.Загрузить(ТаблЗаказыЗаявки);
				итТаблЗаказыЗаявки.ДобавитьИндекс("иТоварЗаявка","*Товар,*ПоСчету");
				//итТаблЗаказыЗаявки.Показать();
				
				ТаблСпецЗаявки=СоздатьОбъект("ТаблицаЗначений");
				итТаблСпецЗаявки=СоздатьОбъект("ИндексированнаяТаблица");
				РегСЗ.ВыгрузитьИтоги(ТаблСпецЗаявки,1);
				итТаблСпецЗаявки.Загрузить(ТаблСпецЗаявки);
				итТаблСпецЗаявки.ДобавитьИндекс("иТоварЗаявка","*Товар,*ПоСчету");
				//итТаблСпецЗаявки.Показать();
	
	//{Бронь в Пути
	//во всех документах Счет принадлежащему к Заказу Поставщику, меняем регистр.
				ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");
				
				ТекстЗапроса="SELECT ЗаказыПоставщикамЗаявкиОстатки.ПоСчету [ПоСчету $Документ.Счет]
				|FROM $РегистрОстатки.ЗаказыПоставщикамЗаявки(,,
				|		(ПоЗаказу = $ВидДокумента36.ЗаказПоставщику + :ПоОснованию),
				|		ПоСчету,) AS ЗаказыПоставщикамЗаявкиОстатки";
				
				ЗапросСКЛ.УстановитьТекстовыйПараметр("ПоОснованию",ДокументОснование.ТекущийДокумент());
				итТабл=СоздатьОбъект("ИндексированнаяТаблица");
				ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итТабл);
			
				регКЗ=СоздатьОбъект("Регистр.КомплектацияЗаявок");
				итТаблАнулир=СоздатьОбъект("ИндексированнаяТаблица");
				итТаблАнулир.Загрузить(итТабл);
				итТаблАнулир.ДобавитьИндекс("иПоСчету","*ПоСчету");
				итТаблАнулир.УдалитьСтроки();

				итТабл.ВыбратьСтроки();
				Пока итТабл.ПолучитьСтроку() = 1 Цикл
					
					докПоСчету = итТабл.ПоСчету;
					//Если докПоСчету.НайтиДокумент(итТабл.ПоСчету)=0 Тогда
					//	Продолжить;
					//КонецЕсли;
					
					Если (ДокПосчету.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь)	Тогда
						
						ОчисткаСтатуса(итТабл.ПоСчету,31);
						
						Регистр.КомплектацияЗаявок.ДатаПоставки=ДокПосчету.ДатаПоставки;
						Регистр.КомплектацияЗаявок.ПоСчету=итТабл.ПоСчету;
						Регистр.КомплектацияЗаявок.ВидЗаявки=Перечисление.ВидыЗаявок.ЗаявкаБронь;
						Регистр.КомплектацияЗаявок.МестоКомплектации=ДокПосчету.МестоКомплектации;
						Регистр.КомплектацияЗаявок.Склад=ДокПосчету.Склад;
						Регистр.КомплектацияЗаявок.ВидДоставки=ДокПосчету.ВидДоставки;
						
						пБроньвПутиПустая=0;
						пНаличТовараВДокументе=ПроверкаНаличияТовара(итТабл.ПоСчету,итТаблЗаказыЗаявки);
						
						Если докПоСчету.ДатаПоставки<ДатаПриходаТовара Тогда
							пБроньвПутиПустая=пБроньвПутиПустая+1;
							ОтправитьСообщение( ДокПосчету.Агент,"Ваш документ Бронь в пути: "+ДокПосчету.НомерДок+ " анулирован ! Товар с опазданием пришел на склад.",);
						//	итТаблАнулир.Показать();
						КонецЕсли;
						
						Если (пНаличТовараВДокументе=0)И(ЗакрытьЗаказ=1) Тогда
							пБроньвПутиПустая=пБроньвПутиПустая+1;
							ОтправитьСообщение( ДокПосчету.Агент,"Ваш документ Бронь в пути: "+ДокПосчету.НомерДок+ " анулирован ! Нет Товара для Составления Заявки.",);
						КонецЕсли;
						
						//	итТаблАнулир.Показать();
						Если пБроньвПутиПустая=0 Тогда
							Если пНаличТовараВДокументе>0 Тогда
								Регистр.КомплектацияЗаявок.Статус=32;
								Регистр.КомплектацияЗаявок.Количество=1;
								Регистр.КомплектацияЗаявок.ДвижениеПриходВыполнить();
							КонецЕсли;
							//	ОтправитьСообщение( ДокПосчету.Агент,"Товар по документу Бронь в пути: "+ДокПосчету.НомерДок+ ", пришел на склад",);
						КонецЕсли;					
												
						Если пБроньвПутиПустая>0 Тогда
							итТаблАнулир.НоваяСтрока();
							итТаблАнулир.ЗаполнитьСтроку(,итТабл,,);
							Регистр.КомплектацияЗаявок.Статус=0;
							Регистр.КомплектацияЗаявок.Количество=1;
							Регистр.КомплектацияЗаявок.ДвижениеПриходВыполнить();
						КонецЕсли;
					
					//	Если докПоСчету.ДатаПоставки<ДатаПриходаТовара Тогда
					//		Регистр.КомплектацияЗаявок.Статус=0;
					//		ОтправитьСообщение( ДокПосчету.Агент,"Ваш документ Бронь в пути: "+ДокПосчету.НомерДок+ " анулирован ! Товар с опазданием пришел на склад.",);
					//		итТаблАнулир.НоваяСтрока();
					//		итТаблАнулир.ЗаполнитьСтроку(,итТабл,,);
					//	//	итТаблАнулир.Показать();
					//	
					//ИначеЕсли (ПроверкаНаличияТовара(итТабл.ПоСчету,итТаблЗаказыЗаявки)=0)И(ЗакрытьЗаказ=1) Тогда
					//		Регистр.КомплектацияЗаявок.Статус=0;
					//		ОтправитьСообщение( ДокПосчету.Агент,"Ваш документ Бронь в пути: "+ДокПосчету.НомерДок+ " анулирован ! Нет Товара для Составления Заявки.",);
					//		итТаблАнулир.НоваяСтрока();
					//		итТаблАнулир.ЗаполнитьСтроку(,итТабл,,);
					//	//	итТаблАнулир.Показать();
					//	Иначе
					//		Регистр.КомплектацияЗаявок.Статус=32;
					//	//	ОтправитьСообщение( ДокПосчету.Агент,"Товар по документу Бронь в пути: "+ДокПосчету.НомерДок+ ", пришел на склад",);
					//	КонецЕсли;					
					//	Регистр.КомплектацияЗаявок.Количество=1;
					//	Регистр.КомплектацияЗаявок.ДвижениеПриходВыполнить();
					КонецЕсли;
				КонецЦикла;			
				
	
	
	
	//}Бронь в пути
				
				
	
				ВыбратьСтроки();
				Пока ПолучитьСтроку()=1 Цикл
	
					ПривязыватьСтроку( НомерСтроки );
	
					Кол=Количество*Коэффициент;
					Если Кол>0 Тогда
					    
						Нстр="";
						Если ТаблОстатков.НайтиЗначение(Товар,Нстр,"Товар")=1 Тогда
							ТаблОстатков.ПолучитьСтрокуПоНомеру(Нстр);
							
	//						Если Единица.Единица=Перечисление.ЕдиницыИзмерения.Килограмм Тогда
	//						    КолГасить=ТаблОстатков.Количество;
	//						Иначе
						    КолГасить=Мин(ТаблОстатков.Количество,Кол);
	//						КонецЕсли;    
	
							ТаблОстатков.Количество=ТаблОстатков.Количество-КолГасить;
							
							Если КолГасить>0 Тогда
								Регистр.ЗаказыПоставщикам.ПривязыватьСтроку(НомерСтроки);
								Регистр.ЗаказыПоставщикам.Товар=Товар;
								Регистр.ЗаказыПоставщикам.Склад=ТаблОстатков.Склад;
								Регистр.ЗаказыПоставщикам.Клиент=Клиент;						
								Регистр.ЗаказыПоставщикам.СрокПоставки=ТаблОстатков.СрокПоставки;
								Регистр.ЗаказыПоставщикам.ПоЗаказу=ДокументОснование.ТекущийДокумент();
								Регистр.ЗаказыПоставщикам.Количество=КолГасить;
								Регистр.ЗаказыПоставщикам.КодОперации=ЗакрытиеВыполненногоЗаказаПоставщику;
								Регистр.ЗаказыПоставщикам.ДвижениеРасходВыполнить();
							КонецЕсли;
						КонецЕсли;
						Кол=Кол-КолГасить;
						
					КонецЕсли;
	
					//пытаемся закрыть регистр ЗаказыПоставщикамЗаявки по счетам документа основания
	//					итТаблЗаказыЗаявки.Показать();
						сзКлюч=СоздатьОбъект("СписокЗначений");
						сзКлюч.ДобавитьЗначение(Товар);
	//					сзКлюч.ДобавитьЗначение(ПоСчету);
						итТаблЗаказыЗаявки.Подмножество(сзКлюч,1,"иТоварЗаявка");
	//					
						итТаблЗаказыЗаявки.ВыбратьСтроки("иТоварЗаявка");
					//	итТаблЗаказыЗаявки.Показать();
						Кол=Количество*Коэффициент;
						КолГасить=0;
						Пока итТаблЗаказыЗаявки.ПолучитьСтроку("иТоварЗаявка") = 1 Цикл
							Если итТаблЗаказыЗаявки.Количество>0 Тогда
								Регистр.ЗаказыПоставщикамЗаявки.Товар=Товар;
								Регистр.ЗаказыПоставщикамЗаявки.ПоЗаказу=итТаблЗаказыЗаявки.ПоЗаказу;
								Регистр.ЗаказыПоставщикамЗаявки.ПоСчету=итТаблЗаказыЗаявки.ПоСчету;
							    КолГасить=Мин(итТаблЗаказыЗаявки.Количество,Кол);
								//если есть что гасить по счету по товару
										
								Если КолГасить>0 Тогда
									Регистр.ЗаказыПоставщикамЗаявки.Количество=КолГасить; //гасим все количество по заказам заявкам по товару по счету
									//итТаблЗаказыЗаявки.Количество = 0;
									итТаблЗаказыЗаявки.Количество = итТаблЗаказыЗаявки.Количество - КолГасить;
									Регистр.ЗаказыПоставщикамЗаявки.ДвижениеРасходВыполнить();
								КонецЕсли;
							КонецЕсли;
							//устраняем анулированые строки таблицы
							анСтрока=0;
							анСтрока=итТаблАнулир.НайтиСтроку("иПоСчету",итТаблЗаказыЗаявки.ПоСчету,,);
							//Сообщить(анСтрока);
							//устраняем анулированые строки таблицы
							
							Если (КолГасить>0)И(анСтрока=0) Тогда
								Регистр.РезервыТоваров.Товар = Товар;
								Регистр.РезервыТоваров.ПоСчету = итТаблЗаказыЗаявки.ПоСчету; 
								Регистр.РезервыТоваров.РезервТовара = КолГасить; //приходуем столько сколько было распределно в заказе поставщику
								Регистр.РезервыТоваров.ДвижениеПриходВыполнить();
							КонецЕсли;
							
							Кол=Кол-КолГасить;
							
						КонецЦикла;
						
						Если ПустоеЗначение(сзСчета)=0 Тогда
						//погашаем регистр спец. заказов и ставим в резерв, только в случае, если в заказе поставщику есть привязка к заявке
	
							сзКлюч=СоздатьОбъект("СписокЗначений");
							сзКлюч.ДобавитьЗначение(Товар);
		//					сзКлюч.ДобавитьЗначение(ПоСчету);
							итТаблСпецЗаявки.Подмножество(сзКлюч,1,"иТоварЗаявка");
							итТаблСпецЗаявки.ВыбратьСтроки("иТоварЗаявка");
							Кол=Количество*Коэффициент;
							Пока итТаблСпецЗаявки.ПолучитьСтроку("иТоварЗаявка") = 1 Цикл
		
							    КолГасить=Мин(итТаблСпецЗаявки.Заказано,Кол);
								
								Регистр.СпецЗаказы.Товар = Товар;
								Регистр.СпецЗаказы.ПоСчету = итТаблСпецЗаявки.ПоСчету;
								Регистр.СпецЗаказы.Заказано = итТаблСпецЗаявки.Заказано; //закрываем полностью
								Регистр.СпецЗаказы.ДвижениеРасходВыполнить();
								итТаблСпецЗаявки.Заказано = 0;
								
								Кол=Кол-КолГасить;
								
							КонецЦикла;
						КонецЕсли;
						
					
				КонецЦикла;
					
				//повторное гашение регистра
				ВыбратьСтроки();
				Пока ПолучитьСтроку()=1 Цикл
					итТаблЗаказыЗаявки.ВыключитьФильтр();
					итТаблЗаказыЗаявки.ВыбратьСтроки("иТоварЗаявка");
					Пока итТаблЗаказыЗаявки.ПолучитьСтроку("иТоварЗаявка") = 1 Цикл
						Если итТаблЗаказыЗаявки.Количество>0 Тогда	
							Регистр.ЗаказыПоставщикамЗаявки.ПривязыватьСтроку(999);
							Регистр.ЗаказыПоставщикамЗаявки.Товар=Товар;
							Регистр.ЗаказыПоставщикамЗаявки.ПоЗаказу=итТаблЗаказыЗаявки.ПоЗаказу;
							Регистр.ЗаказыПоставщикамЗаявки.ПоСчету=итТаблЗаказыЗаявки.ПоСчету;
							Регистр.ЗаказыПоставщикамЗаявки.Количество=итТаблЗаказыЗаявки.Количество; //гасим все количество по заказам заявкам по товару по счету
							Регистр.ЗаказыПоставщикамЗаявки.ДвижениеРасходВыполнить();
						КонецЕсли;	
					КонецЦикла;						
				КонецЦикла;
				
				
				
				
				//обработаем оставшиеся позиции по заказу поставщика - их нужно погасить
				Если ((ДатаДок>='01.10.09') И (ДатаДок<='20.05.09')) ИЛИ ((ДатаДок>='21.05.10') И (ЗакрытьЗаказ=1) ) Тогда
					ТаблОстатков.ВыбратьСтроки();
					Пока ТаблОстатков.ПолучитьСтроку() = 1 Цикл
						Если ТаблОстатков.Количество=0 Тогда
							Продолжить;
						КонецЕсли;	
						
						Регистр.ЗаказыПоставщикам.ПривязыватьСтроку(999);
						Регистр.ЗаказыПоставщикам.Товар=ТаблОстатков.Товар;
						Регистр.ЗаказыПоставщикам.Склад=ТаблОстатков.Склад;
						Регистр.ЗаказыПоставщикам.Клиент=Клиент;						
						Регистр.ЗаказыПоставщикам.СрокПоставки=ТаблОстатков.СрокПоставки;
						Регистр.ЗаказыПоставщикам.ПоЗаказу=ДокументОснование;
						Регистр.ЗаказыПоставщикам.Количество=ТаблОстатков.Количество;
						Регистр.ЗаказыПоставщикам.КодОперации=ЗакрытиеНевыполненногоЗаказаПоставщику;
						Регистр.ЗаказыПоставщикам.ДвижениеРасходВыполнить();
						
					КонецЦикла;
						
				КонецЕсли;
	
				
			КонецЕсли;

		ИначеЕсли ДокументОснование.Вид()="Счет" Тогда
			
			ВремРег = СоздатьОбъект( "Регистры" );
			РегКомпл=ВремРег.КомплектацияЗаявок;
			
			Если ИтогиАктуальны() = 0  Тогда
				ВремРег.Актуальность(1);
				УстановленВремРасч=0;
				// если итоги не актуальны, то стоимости берем из временногно расчета Регистра
				регКомпл.ВременныйРасчет();
				регКомпл.УстановитьЗначениеФильтра( "ПоСчету", ДокументОснование, 1 );
				ВремРег.РассчитатьРегистрыНа(ТекущийДокумент());
				
			КонецЕсли;

			РегКомпл.УстановитьЗначениеФильтра("ПоСчету",ДокументОснование,1);
			//	РегКомпл.УстановитьЗначениеФильтра("Статус",2,1);
			таблКомпл=СоздатьОбъект("ТаблицаЗначений");
			РегКомпл.ВыгрузитьИтоги(таблКомпл,1,1);
			таблКомпл.ВыбратьСтроки();
			Пока таблКомпл.ПолучитьСтроку() = 1 Цикл
				Регистр.КомплектацияЗаявок.ПривязыватьСтроку(0);
				Регистр.КомплектацияЗаявок.ДатаПоставки = таблКомпл.ДатаПоставки;
				Регистр.КомплектацияЗаявок.ПоСчету = таблКомпл.ПоСчету;
				Регистр.КомплектацияЗаявок.МестоКомплектации = таблКомпл.МестоКомплектации;
				Регистр.КомплектацияЗаявок.Склад = таблКомпл.Склад ;
				Регистр.КомплектацияЗаявок.ВидЗаявки = таблКомпл.ВидЗаявки ;
				Регистр.КомплектацияЗаявок.ВидДоставки = таблКомпл.ВидДоставки ;
				Регистр.КомплектацияЗаявок.Товар = таблКомпл.Товар ;
				Регистр.КомплектацияЗаявок.Статус = таблКомпл.Статус;
				Регистр.КомплектацияЗаявок.Количество = таблКомпл.Количество;
				Регистр.КомплектацияЗаявок.ДвижениеРасходВыполнить();
			КонецЦикла;
			
		КонецЕсли;
		
		
		Если ДатаДок<'01.01.10' Тогда
			семДвиженияПоСпецЗаказам(Реги);
		КонецЕсли;
			
			
	       КонецЕсли;
	
	
	//<<Алгоритм Успеха>> (end) 
	//************************************************************
	ПривязыватьСтроку(0); 
	Если (ПризнакНакладной<>Перечисление.ПризнПрихНакл.Допоставка) И (ПризнакНакладной<>Перечисление.ПризнПрихНакл.Хранение) И (ПризнакНакладной<>Перечисление.ПризнПрихНакл.ВозвратСХранения) Тогда
		
		Если БН=Да Тогда
		    ПогашениеДолгаПоКредитуНал();
		Иначе
			Если ТипУчета<Фин Тогда  // по Упр. учету
			// Выделим отдельно Товары и Услуги
				Если СуммаТоваров<>0 Тогда
					Если ПогашениеДолгаПоКредиту(Контекст,ТекущийДокумент(),СуммаТоваров,"","Упр","Товар")=1 Тогда
						Возврат;
					КонецЕсли;
				КонецЕсли;
				Если СуммаУслуг<>0 Тогда
					Если ПогашениеДолгаПоКредиту(Контекст,ТекущийДокумент(),СуммаУслуг,"","Упр","Услуга")=1 Тогда
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//--------------------
	Если (ПризнакНакладной<>Перечисление.ПризнПрихНакл.Допоставка) И (ПризнакНакладной<>Перечисление.ПризнПрихНакл.Хранение) И (ПризнакНакладной<>Перечисление.ПризнПрихНакл.ВозвратСХранения) Тогда
		Если ТипУчета>Упр Тогда  // по Фин. учету
			
			Если ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя Тогда
				
				
				// Выделим отдельно Товары и Услуги
				Если СуммаТоваров<>0 Тогда
					Если ПогашениеДолгаПоКредиту(Контекст,ТекущийДокумент(),СуммаТоваров,СтавкаНДС,"Фин","Товар")=1 Тогда
						Возврат;
					КонецЕсли;
				КонецЕсли;
				Если СуммаУслуг<>0 Тогда
					Если ПогашениеДолгаПоКредиту(Контекст,ТекущийДокумент(),СуммаУслуг,СтавкаНДС,"Фин","Услуга")=1 Тогда
						Возврат;
					КонецЕсли;
				КонецЕсли;
			Иначе
				
				Если БН=Да Тогда
				    ПогашениеДолгаПоКредитуНал();
				Иначе
				
					// Выделим отдельно Товары и Услуги
					Если СуммаТоваров<>0 Тогда
						Если ПогашениеДолгаПоКредиту(Контекст,ТекущийДокумент(),СуммаТоваров,"","Фин","Товар")=1 Тогда
							Возврат;
						КонецЕсли;
					КонецЕсли;
					Если СуммаУслуг<>0 Тогда
						ВыбратьСтроки();
						Пока ПолучитьСтроку()=1 Цикл 
							Если  Товар.ВидТовара=Перечисление.ВидыТоваров.Услуга Тогда
								НДСуслуги=Пересчет(НДС,Валюта,Курс,Рубли,Дата_курса);
								СтатьяИздержекУслуги=?(Товар.СтатьяИздержекУслуги.Выбран()=1,Товар.СтатьяИздержекУслуги,"");
								Если ПогашениеДолгаПоКредиту(Контекст,ТекущийДокумент(),Сумма,"","Фин","Услуга",НДСуслуги,СтатьяИздержекУслуги)=1 Тогда
									Возврат;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла; 
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//-------------------------------------
	// по Регистру ПартииТоваров
	
	Если ПризнакНакладной<>Перечисление.ПризнПрихНакл.Недопоставка Тогда    
		
		Если ТипУчета<Фин Тогда
			Если ПогашениеПартииТоваров(Контекст,"Упр")=1 Тогда
				Возврат;
			КонецЕсли;

			Если Склад.ТипСклада=Перечисление.ТипыСкладов.СкладПредПродПодготовки Тогда
			
				ВыбратьСтроки();
				Пока ПолучитьСтроку()=1 Цикл
					Регистр.НедоступныеТовары.ПривязыватьСтроку(НомерСтроки);
					Регистр.НедоступныеТовары.Фирма	= Фирма;
					Регистр.НедоступныеТовары.ОстатокТовара=Количество*Коэффициент;
					Регистр.НедоступныеТовары.Склад=Склад;
					Регистр.НедоступныеТовары.Товар=Товар;
					Регистр.НедоступныеТовары.КодОперации="+"; 
					Регистр.НедоступныеТовары.ДвижениеПриходВыполнить();
				КонецЦикла;			
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	//-------------------------------------
	// по ФинПартииТоваров 
	Если ПризнакНакладной<>Перечисление.ПризнПрихНакл.Недопоставка Тогда
		Если ТипУчета>Упр Тогда
			Если ПогашениеПартииТоваров(Контекст,"Фин")=1 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Если семПроверкаЦен() = 1 Тогда СтатусВозврата( 0 ); Возврат; КонецЕсли;
	
	Если ПризнакНакладной<>Перечисление.ПризнПрихНакл.Недопоставка Тогда
		глОборотыТоваров(Контекст);
	КонецЕсли;               
	

	//Если ДатаДок>='01.03.2015' Тогда
	//	Если (ПризнакНакладной=Перечисление.ПризнПрихНакл.Недопоставка) ИЛИ (ПризнакНакладной=Перечисление.ПризнПрихНакл.Допоставка) Тогда
	//                                    
	//		ВыбратьСтроки();
	//		Пока ПолучитьСтроку()=1 Цикл
	//			
	//			Регистр.УчетКомпенсацийОтПоставщиков.Фирма = Фирма;
	//			Регистр.УчетКомпенсацийОтПоставщиков.Товар = Товар;
	//			Регистр.УчетКомпенсацийОтПоставщиков.СутьПретензии = Константа.ОснСутьПретензийНедопоставка;
	//			Регистр.УчетКомпенсацийОтПоставщиков.Поставщик = Клиент; 
	//			Регистр.УчетКомпенсацийОтПоставщиков.Статус = 1; 
	//			
	//			//Регистр.УчетКомпенсацийОтПоставщиков.ПоДокументу = ТекущийДокумент();
	//			Регистр.УчетКомпенсацийОтПоставщиков.ПрихДокумент = ДокументПрихода;
	//			Регистр.УчетКомпенсацийОтПоставщиков.Количество = Количество;    
	//			Регистр.УчетКомпенсацийОтПоставщиков.Сумма = Сумма;    
	//			
	//			Регистр.УчетКомпенсацийОтПоставщиков.ДвижениеПриходВыполнить();
	//		
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЕсли;
	
	
	сзКлиентыФирм=СоздатьОбъект("СписокЗначений");
	спрФирмы=СоздатьОбъект("Справочник.Фирмы");
	спрФирмы.ВыбратьЭлементы();
	Пока спрФирмы.ПолучитьЭлемент() = 1 Цикл
		сзКлиентыФирм.ДобавитьЗначение(спрФирмы.Клиент);
	КонецЦикла;
	
	Если ПризнакНакладной=Перечисление.ПризнПрихНакл.Закупка Тогда

		//регистрация товаров требующих предпродажной подготовки
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
			Если (Товар.ПринадлежитГруппе(Константа.ГруппаТоваровБезКонтроляПоСрокам1)=1) ИЛИ 
				(Товар.ПринадлежитГруппе(Константа.ГруппаТоваровБезКонтроляПоСрокам2)=1) ИЛИ
				(Товар.ПринадлежитГруппе(Константа.ГруппаТоваровБезКонтроляПоСрокам3)=1) ИЛИ
				(Товар.ПринадлежитГруппе(Константа.ГруппаТоваровБезКонтроляПоСрокам4)=1) ИЛИ
				(Товар.ПринадлежитГруппе(Константа.ГруппаТоваровБезКонтроляПоСрокам5)=1) ИЛИ
				(Товар.ПринадлежитГруппе(Константа.ГруппаТоваровБезКонтроляПоСрокам6)=1) ИЛИ
				(Товар.ПринадлежитГруппе(Константа.ГруппаТоваровБезКонтроляПоСрокам7)=1) Тогда
			Иначе
				Если (Клиент.Страна<>Константа.СтранаРезидент) И (сзКлиентыФирм.НайтиЗначение(Клиент)=0) И (ГрупповаяОбработка()=0) Тогда
					Если (ПустоеЗначение(ПредПродажПодг)=1) Тогда
						НеПроводить(Контекст,"В строке "+НомерСтроки +" для товара "+Товар.Код+" "+Товар+" не указано требование предпродажной!");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ПредПродажПодг=Да Тогда
				Регистр.УчетТоваровПоПредпродажнойПодготовке.ПривязыватьСтроку(НомерСтроки);
				Регистр.УчетТоваровПоПредпродажнойПодготовке.Фирма		= Фирма;
				Регистр.УчетТоваровПоПредпродажнойПодготовке.Товар		= Товар;
				Регистр.УчетТоваровПоПредпродажнойПодготовке.Клиент		= Клиент;
				Регистр.УчетТоваровПоПредпродажнойПодготовке.Количество	= Количество*Коэффициент;
				Регистр.УчетТоваровПоПредпродажнойПодготовке.ПрихДокумент=ТекущийДокумент();
				Регистр.УчетТоваровПоПредпродажнойПодготовке.Статус 	= 1;
				Регистр.УчетТоваровПоПредпродажнойПодготовке.ДвижениеПриходВыполнить();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратОтПокупателя Тогда
		глСписаниеПросроченногоДолга(Контекст);
	КонецЕсли;
	
	//движения по интрастату
	Если (Клиент.Страна.ВидСтраны=Перечисление.ВидыСтран.ЕС) и ((ПризнакНакладной<>Перечисление.ПризнПрихНакл.Допоставка) И (ПризнакНакладной<>Перечисление.ПризнПрихНакл.Хранение) И (ПризнакНакладной<>Перечисление.ПризнПрихНакл.ВозвратСХранения) ) Тогда
		// коэффициент транспортных затрат
		Если ДопСтоимость=0 Тогда
			ДопСтоимость=Транспорт;
		КонецЕсли;    
		Если СтатСтоим=0 Тогда
			СтатСтоим=Итог("Сумма");
		КонецЕсли;
		СтоимостьЛатБезСкидки=Макс(Итог("Сумма"),СтатСтоим)*Курс;
		СтоимостьЛат=Итог("Сумма")*Курс;
		Если СтоимостьЛат <> 0 Тогда
			КоэфСкидки = (СтоимостьЛатБезСкидки)/СтоимостьЛат; 
			КоэфТрансп = (СтоимостьЛатБезСкидки+ДопСтоимость)/СтоимостьЛатБезСкидки; 
		Иначе
			КоэфТрансп=0;    
			КоэфСкидки=0;
		КонецЕсли;
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл              
			Если ПустоеЗначение(ТамКод)=1 Тогда
				ТамКод=Товар.ТамКод;
			КонецЕсли;  
			Если ПустоеЗначение(СтранаПроисхождения)=1 Тогда   
				СтранаПроисхождения=Товар.СтранаПроизводитель;	
			КонецЕсли;  
			Если ГрупповаяОбработка()=0 Тогда
				Если ВесНетто=0 Тогда
				//	ВесНетто=Товар.Вес*Количество*Коэффициент / ?(Товар.ЕдНеттоВеса.Коэффициент=0,1,Товар.ЕдНеттоВеса.Коэффициент);
					ВесНетто=Товар.Вес*Количество*Коэффициент;
				КонецЕсли;
				Если Товар.ЯвляетсяУпаковкой = Перечисление.Булево.Да Тогда
					ВесНетто=0;
				КонецЕсли;
			КонецЕсли;
			
			//Если Товар.ЯвляетсяУпаковкой = Перечисление.Булево.Да Тогда
			//	ВесНетто=0;
			//КонецЕсли;
			Если СтатСтоимТов=0 Тогда    
				СтатСтоимТов=Сумма*КоэфСкидки*Курс*КоэфТрансп;	
			КонецЕсли;
			Регистр.Интрастат.ПривязыватьСтроку(НомерСтроки);
			Регистр.Интрастат.Товар=Товар;
			Регистр.Интрастат.ТамКод=ТамКод;
			Регистр.Интрастат.ВидОперации="+";
			Регистр.Интрастат.СтранаОтправитель=СтранаОтпр;
			Регистр.Интрастат.СтранаПроисхождения=СтранаПроисхождения;
			Регистр.Интрастат.ВидСделки=ВидСделки;
			Регистр.Интрастат.ВидТранспорта=ВидТранспорта;
			Регистр.Интрастат.УсловиеПоставки=УсловиеПоставки;
			
			Регистр.Интрастат.ВесНетто=ВесНетто;

			Регистр.Интрастат.Стоимость=Сумма*курс;


		//	Регистр.Интрастат.Стоимость=Сумма*КоэфСкидки*курс;

			Регистр.Интрастат.СтатСтоимость=СтатСтоимТов;
			Если ТамКод.ДопЕдиница <> 0 Тогда       
				Регистр.Интрастат.Количество=Количество*Коэффициент;   
				
				// возможно, требуется другая единица измерения, чем указано в документе
				// например, декоративная плитка указана в штуках, а нужны квадратные метры
				Если ПустоеЗначение(ТамКод.ТипДопЕдиницы)=0 Тогда  
					НужнаяЕдиница=НайтиЕдиницуИзмерения(Товар,ТамКод.ТипДопЕдиницы); 
					Если ПустоеЗначение(НужнаяЕдиница)=0 Тогда          
						//  пересчитываем в нужные единицы
						Регистр.Интрастат.Количество=Количество*Коэффициент/?(НужнаяЕдиница.Коэффициент=0,1,НужнаяЕдиница.Коэффициент);   	
					КонецЕсли;
				КонецЕсли;
				    
			Иначе 
				Регистр.Интрастат.Количество=0;
			КонецЕсли;
                       
			Регистр.Интрастат.ДвижениеВыполнить();
			//СпрУпак.ИспользоватьВладельца(Товар);
			//СпрУпак.ВыбратьЭлементы();
			//Пока СпрУпак.ПолучитьЭлемент() = 1 Цикл
			//	Если (СпрУпак.ПометкаУдаления()=1) или (ПустоеЗначение(СпрУпак.ВидУпаковки)=1) или (СпрУпак.КолВУпаковке=0) Тогда
			//		Продолжить;
			//	КонецЕсли;
			//	Материал=СпрУпак.ВидУпаковки.Материал;
			//	Вес=СпрУпак.ВесБруттоУпаковки/СпрУпак.КолВУпаковке*Количество*Коэффициент;
			//	ТаблУпак.НоваяСтрока();
			//	ТаблУпак.Материал = Материал;
			//	ТаблУпак.Вес = Вес;
			//КонецЦикла;
		КонецЦикла;
		Нетто=Итог("ВесНетто");
		Если ИспользоватьРасчетDRN=1 Тогда
			Брутто=Нетто+КолВидУпаковки1+КолВидУпаковки2+КолВидУпаковки3+КолВидУпаковки4+КолВидУпаковки5+КолВидУпаковки6;
		Иначе
			Брутто=Нетто+ТаблУпак.Итог("Вес");
		КонецЕсли;
		// заполнение брутто
		//Если ИспользоватьРасчетDRN=0 Тогда
		//	ТаблУпак.Свернуть("Материал","Вес");   
		//	Если  ТаблУпак.КоличествоСтрок() <> 0 Тогда  
		//		ТаблУпак.ВыбратьСтроки() ; 
		//		КолВидУпаковки1=0;	// дерево
		//		КолВидУпаковки2=0;	// пластик
		//		КолВидУпаковки3=0;	// картон
		//		КолВидУпаковки4=0;	// металл
		//		КолВидУпаковки5=0;	// стекло
		//		КолВидУпаковки6=0;	// пет
		//		Пока ТаблУпак.ПолучитьСтроку()=1 Цикл
		//			Если Лев(ТаблУпак.Материал.Наименование,3)="Woo" Тогда  // дерево
		//				КолВидУпаковки1=ТаблУпак.Вес;	
		//			ИначеЕсли Лев(ТаблУпак.Материал.Наименование,3)="Pla" Тогда	// пластик
		//				КолВидУпаковки2=ТаблУпак.Вес;
		//			ИначеЕсли Лев(ТаблУпак.Материал.Наименование,3)="Car" Тогда	// картон
		//				КолВидУпаковки3=ТаблУпак.Вес;
		//			ИначеЕсли Лев(ТаблУпак.Материал.Наименование,3)="Met" Тогда	// металл
		//				КолВидУпаковки4=ТаблУпак.Вес;
		//			ИначеЕсли Лев(ТаблУпак.Материал.Наименование,3)="Gla" Тогда	// стекло
		//				КолВидУпаковки5=ТаблУпак.Вес;
		//			ИначеЕсли Лев(ТаблУпак.Материал.Наименование,3)="PET" Тогда	// пет
		//				КолВидУпаковки6=ТаблУпак.Вес;
		//			КонецЕсли;	
		//		КонецЦикла;
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	
	Если МожноПроводить(Контекст)=1 Тогда
		УстановитьГП(ТекущийДокумент());
	КонецЕсли;
	Если глЗаполнитьРеквизитыДокументаШ(Контекст)=0 Тогда
	    Сообщить("Внимание: Не удалось заполнить реквизиты Ш. Обязательно обратитесь к админстратору!!!","!");
	КонецЕсли;
	// анна - расчет коррекции себестоимости возврата с переработки
	Если ПризнакНакладной=Перечисление.ПризнПрихНакл.ВозвратСПереработки Тогда
		Если ДокументОснование.Выбран()=1 Тогда
			Если (ДокументОснование.Вид()="РасходнаяНакладная") и (ДокументОснование.Проведен()=1) Тогда
				Себестоимостьш=0;
				РегП=СоздатьОбъект("Регистр.ПартииТоваров");
				РегП.ВыбратьДвиженияДокумента(ДокументОснование);
				Пока РегП.ПолучитьДвижение()=1 Цикл
					СебестоимостьШ=СебестоимостьШ+РегП.Стоимость;	
				КонецЦикла;
				СебестоимостьШ=Пересчет(СебестоимостьШ,Рубли,1,Валюта,Курс);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//{***Ожидаемая Поставка***// Очистка регистров.

	Если ДокументОснование.Выбран()=1 Тогда
	    Если ДокументОснование.Вид()="ОжидаемаяПоставка" Тогда
			
			л_ТЗОЖД=СоздатьОбъект("ТаблицаЗначений");
			ВыгрузитьТабличнуюЧасть(л_ТЗОЖД);
			л_ТЗОЖД.Свернуть("ДокументОснованиеТабл",);
//			л_ТЗОЖД.ВыбратьСтроку();
			л_ТЗОЖД.ВыбратьСтроки();
			Пока л_ТЗОЖД.ПолучитьСтроку() = 1 Цикл
				Если л_ТЗОЖД.ДокументОснованиеТабл.Вид()="ОжидаемаяПоставка" Тогда
					ОбработкаОжидаемойПоставки(л_ТЗОЖД.ДокументОснованиеТабл);
				Иначе
					ОбработкаОжидаемойПоставки(ДокументОснование);
				КонецЕсли;
			КонецЦикла;
			
//			ОбработкаОжидаемойПоставки(ДокументОснование);
		КонецЕсли;

		//***Гасим регистры если основание ЗаказПоставщику***
		Если ДокументОснование.Вид()="ЗаказПоставщику" Тогда
			РегТоварыВПути=СоздатьОбъект("Регистр.ТоварыВПути");
			РегТоварыВПути.УстановитьЗначениеФильтра("Док",ДокументОснование.докОжидаемаяПоставка,1);
			таблТоварыВПути=СоздатьОбъект("ТаблицаЗначений");
			РегТоварыВПути.ВыгрузитьИтоги(таблТоварыВПути,1,1);
			таблТоварыВПути.ВыбратьСтроки();
			Пока таблТоварыВПути.ПолучитьСтроку() = 1 Цикл
				Регистр.ТоварыВПути.Товар = таблТоварыВПути.Товар ;
				Регистр.ТоварыВПути.СрокПоставки = таблТоварыВПути.СрокПоставки ;
				Регистр.ТоварыВПути.ПоЗаказу = таблТоварыВПути.ПоЗаказу ;
				Регистр.ТоварыВПути.Количество = таблТоварыВПути.Количество;
//				Регистр.ТоварыВПути.КоличествоФакт = таблТоварыВПути.КоличествоФакт;
				Регистр.ТоварыВПути.Док = таблТоварыВПути.Док;
				Регистр.ТоварыВПути.ДвижениеРасходВыполнить();
			КонецЦикла;
			ГаситьРегистрСостояния(ДокументОснование.докОжидаемаяПоставка);
		КонецЕсли;
		
	КонецЕсли;	
	
	Если (ЗакрытьЗаказ=1) И (ДатаДок>='01.08.2016') Тогда
		ДвиженияПоПретензиям();
	КонецЕсли;
	
	//если были приходы в резерв по заявкам - тогда нужно перепросети все документы комплектаций по факту, которые по времени сделаны позже данного прихода	
	Если ГрупповаяОбработка()=0 Тогда

		Если ПустоеЗначение(спИзмененныеТовары)=0 Тогда
			
			ТекстЗапроса="SELECT КомплектацияЗаявкиФакт.IDDOC [Ссылка $Документ.КомплектацияЗаявкиФакт]
			|			  FROM $Регистр.РезервыТоваров AS РезервыТоваров With (NOLOCK)
			|			  INNER JOIN $Документ.КомплектацияЗаявкиФакт AS КомплектацияЗаявкиФакт With (NOLOCK) ON $РезервыТоваров.ПоСчету = $КомплектацияЗаявкиФакт.ПоСчету
			|			  WHERE (РезервыТоваров.IDDOC = :ТекДок) AND $РезервыТоваров.Товар IN (Select Val FROM #Товары)
			|";
			 
			ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");  
			ЗапросСКЛ.УстановитьТекстовыйПараметр("ТекДок",ТекущийДокумент());
			ЗапросСКЛ.УложитьСписокОбъектов(спИзмененныеТовары,"#Товары");
			табл = ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса);
	
			спПроведениеДокВсе = СоздатьОбъект("СписокЗначений");
			
			табл.ВыбратьСтроки();
			Пока табл.ПолучитьСтроку() = 1 Цикл
				спПроведениеДокВсе.ДобавитьЗначение(табл.Ссылка);
			КонецЦикла;
	
			Если табл.КоличествоСтрок()>0 Тогда
				Сообщить("Перепроведение комплектация по факту...");
				ОбработкаОжидания("глПроведениеДокОтложенное",5);
			КонецЕсли;
		КонецЕсли;		

			
	КонецЕсли;


  

	
	//}***Ожидаемая Поставка***// Очистка регистров.
	
	
	
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеМОД(Контекст)=1 Тогда
	    Возврат;
	КонецЕсли;
	стар_ОбработкаПроведения();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
 
//------------------------
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаУдаленияПроведения() Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ОбработкаУдаленияПроведения()
//Закомментировано Инсталлятором МОД:Процедура ОбработкаУдаленияПроведения()
	Если СравнитьГП(ТекущийДокумент())<0 Тогда
		УстановитьГП(ТекущийДокумент());
	КонецЕсли;
	
	РаспечатанаПлатежка = 0;
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаУдаленияПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеПоАлгоритмуМОД=1 Тогда
	    Возврат;
	КонецЕсли;
	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
	ПриОтменеПроведенияДокумента(ТекущийДокумент());
	стар_ОбработкаУдаленияПроведения();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
