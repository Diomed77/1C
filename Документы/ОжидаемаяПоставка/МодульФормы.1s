//ТП
Перем ТП_ТаблицаЗаказов, ИсточникПоставщика;
Перем старНомерРейса;
Перем м_ТабличнаяЧасть;
Перем п_старДатаПрихода;
Перем ПроцСкидки;

Процедура ВводНаОсновании(ДокОснование) Далее

Процедура УдалениеТаблицыНаОсновании(ДокОснование) Далее
Процедура ЗаполнениеТаблицыНаОсновании(ДокОснование) Далее
Процедура ЗаполнениеШапки(ДокОснование) Далее

Функция ПроверкаПрав(Уровень=0) Далее
Процедура РасчетЦены() Далее

Функция ФорматВывода( парам )
	Если парам = "ДопСрок" Тогда
		Если Товар.Выбран() = 0 Тогда Возврат ""; КонецЕсли;
		Если Товар.СрокГоднПоставщика = 0 Тогда Возврат "???";
		ИначеЕсли Товар.ДопустСрокГодн = 0 Тогда  Возврат "не огр.";
//		Иначе Возврат ""+Товар.ДопустСрокГодн +".д "+Окр( Товар.ДопустСрокГодн / Товар.СрокГоднПоставщика * 100, 2, 1 ) + "%";
		Иначе Возврат ""+Строка(ДатаДок+Товар.ДопустСрокГодн);
		КонецЕсли;
	//ИначеЕсли парам = "СпецЗаказ" Тогда
	//	Если Товар.Выбран() = 0 Тогда Возврат 0; КонецЕсли;
	//	рег = СоздатьОбъект( "Регистр.СпецЗаказы" );
	//	Возврат рег.СводныйОстаток( Товар,, "Заказано" );
	КонецЕсли;
КонецФункции


//{***Расчет скидки***\\


Функция ВычислитьЦену()
	//Цена=?(Количество<>0,Сумма/Количество,0);
	ЦенаПодтв=?(Подтверждено<>0,СуммаПодтв/Подтверждено,0);
КонецФункции 
Процедура СбросСкидки()
     // Пересчитываем цены и суммы в таблице ввода товаров

     Если КоличествоСтрок()>0 Тогда
        ВыбратьСтроки();
        Пока ПолучитьСтроку()>0 Do
         //Сброс скидки
//              Цена=Окр(Цена*100/(100-ПроцСкидки),2);
		   	СуммаПодтв=Окр(СуммаПодтв*100/(100-ПроцСкидки),2);
		   	ВычислитьЦену(); 
         // Пересчитываем сумму товара
              Выч_суммы_накл_сНП(Контекст);
        КонецЦикла;
     КонецЕсли;
КонецПроцедуры

Процедура РасчетСкидки(Реж="")
// Сбросим предыдущуу скидку
	 Если ПроцСкидки>100 Тогда
	 	Сообщить("Процент скидки не может быть больше или равно 100");
	 	Возврат;
	 КонецЕсли;
  	СбросСкидки();

    ВсегоБезНДС=Итог("СуммаПодтв");
  	
	Если Реж="Сумма" Тогда
		ПроцентСкидки=СуммаСкидки/ВсегоБезНДС*100;
	Иначе
		СуммаСкидки=(ВсегоБезНДС*ПроцентСкидки)/100;
	КонецЕсли;
// Скидка вычисляется от общей суммы без НДС
   //  Вычисляем сумму скидки
    СкидкаНакл=(ВсегоБезНДС*ПроцентСкидки)/100;
     Если СкидкаНакл>ВсегоБезНДС  Тогда
         Предупреждение("Сумма скидки превышает общую сумму !!!");
         Возврат;
     КонецЕсли;
     ПроцСкидки=ПроцентСкидки;    // Сохраняем процент скидки во внутренней переменной
                                  // для возврата к начальным цифрам во избежание потери
                                  // при вводе пользователем нового процента
     // Пересчитываем цены и суммы в таблице ввода товаров
     Если КоличествоСтрок()>0 тогда
        ВыбратьСтроки();
        Пока ПолучитьСтроку()>0 Цикл
         // Новая цена с учетом скидки
//            Цена=Окр(Цена-(Цена*ПроцентСкидки/100),2);
//           	ЦенаСНДС=Цена*(1+(ПроцентНДС(СтавкаНДС)/100));
		   	СуммаПодтв=Окр(СуммаПодтв-(СуммаПодтв*ПроцентСкидки/100),2);
		   	ВычислитьЦену(); 
         // Пересчитываем сумму товара
            Выч_суммы_накл_сНП(Контекст,,1);
        КонецЦикла;
     КонецЕсли;
КонецПроцедуры

//}***Расчет скидки***\\

Функция УстановитьСостояние(Сост,Док)
	спрСост=СоздатьОбъект("Справочник.СостоянияДокументов");
	спрСост.НайтиПоНаименованию(Док.Вид()); 
	спрСост.ИспользоватьРодителя(спрСост.ТекущийЭлемент());
	спрСост.НайтиПоНаименованию(Сост,1);
	Возврат спрСост.ТекущийЭлемент();
КонецФункции

//Обработка проверок
Процедура РасчетЦены()

	Сумма=Цена*Количество;
	Выч_суммы_накл_сНП(Контекст,,1); //изменяем цену
//	СуммаПодтв=Подтверждено*(Сумма/Количество);
	СуммаПодтв=Подтверждено*ЦенаПодтв;	
КонецПроцедуры

Процедура ПереборРеквезитов(пДок,пДоступность)

    Для Инд = 1 По Метаданные.ОбщийРеквизитДокумента() Цикл
		Попытка
	  	    Реквизит = Метаданные.ОбщийРеквизитДокумента(Инд).Идентификатор;
   	  		Если Форма.ПолучитьАтрибут(Реквизит).Видимость() = 1 Тогда
   	           Форма.ПолучитьАтрибут(Реквизит).Доступность(пДоступность);
   		    КонецЕсли;
		Исключение
   		КонецПопытки;
     КонецЦикла;

    Для Инд = 1 По Метаданные.Документ(пДок.Вид()).РеквизитШапки() Цикл
		Попытка
	  	    Реквизит = Метаданные.Документ(пДок.Вид()).РеквизитШапки(Инд).Идентификатор;
   	  		Если Форма.ПолучитьАтрибут(Реквизит).Видимость() = 1 Тогда
   	           Форма.ПолучитьАтрибут(Реквизит).Доступность(пДоступность);
   		    КонецЕсли;
		Исключение
   		КонецПопытки;
     КонецЦикла;	 
	 
    Для Инд = 1 По Метаданные.Документ(пДок.Вид()).РеквизитТабличнойЧасти() Цикл
		Попытка
	  	    Реквизит = Метаданные.Документ(пДок.Вид()).РеквизитТабличнойЧасти(Инд).Идентификатор;
   	  		Если Форма.ПолучитьАтрибут(Реквизит).Видимость() = 1 Тогда
   	           Форма.ПолучитьАтрибут(Реквизит).Доступность(пДоступность);
   		    КонецЕсли;
		Исключение
   		КонецПопытки;
   	КонецЦикла;
  
КонецПроцедуры

Процедура УправлениеВидимостью(пРежим=0)
//	Если пРежим=0 Тогда
		ПереборРеквезитов(ТекущийДокумент(),пРежим);
		Форма.кнСклад.Доступность(пРежим);
		Форма.КнФирма1.Доступность(пРежим);
		Форма.кнЗаполнитьТаблицу.Доступность(пРежим);
		Форма.АдресЗагрузки1.Доступность(пРежим);
		Форма.АдресЗагрузки2.Доступность(пРежим);
		
		Форма.Подтверждено.Доступность(1);
//		Форма.Цена.Доступность(1);
		Форма.ЦенаПодтв.Доступность(1);
		Форма.СуммаПодтв.Доступность(1);
//	КонецЕсли;
КонецПроцедуры   

//{***Обработка вкладки файлов***\\




Процедура ЗаполнитьПредл()
	Если Выбран()=0 Тогда
//		Форма.кнДобПредл.Доступность(0);
		Форма.кнИзмПредл.Доступность(0);
		Форма.кнУдПредл.Доступность(0);
		Возврат;
	КонецЕсли;
	таблПредложений.УдалитьСтроки();

	л_флПриходная=0;
	л_ДопЗапрос="";
	л_ДокПодч=СоздатьОбъект("Документ");
	л_ДокПодч.ВыбратьПодчиненныеДокументы(ТекущийДокумент().ДатаДок,,ТекущийДокумент());
	Пока л_ДокПодч.ПолучитьДокумент() = 1 Цикл
		Если л_ДокПодч.Вид()="ПриходнаяНакладная" Тогда
			л_флПриходная=л_флПриходная+1;
			л_ДокПрих=л_ДокПодч.ТекущийДокумент();
			л_ДопЗапрос=" OR ($ФайлДок.Док = $ВидДокумента36.ПриходнаяНакладная + :п_ДокПрих)";
			Прервать;
  		КонецЕсли;
	КонецЦикла;


	л_итСписокФайлов=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос=СоздатьОбъект("ODBCRecordSet");

	ТекстЗапроса="SELECT ФайлДок.ID [Ссылка $Справочник.ФайлДок]
		|	, ФайлДок.DESCR Наименование
		|	, $ФайлДок.Файл Файл
		|	, $ФайлДок.ВидФайла [ВидФайла $Перечисление.ВидыФайлов]
		|	, NullIf($ФайлДок.ДатаФайла, '17530101') ДатаФайла
		|	, $ФайлДок.Автор [Автор $Справочник.Пользователи]
		|FROM $Справочник.ФайлДок AS ФайлДок
		|WHERE ($ФайлДок.Док = $ВидДокумента36.ОжидаемаяПоставка + :п_Док)"+л_ДопЗапрос+"
		|";	
		
	Запрос.УстановитьТекстовыйПараметр("п_Док",ТекущийДокумент());
	
	Если л_флПриходная>0 Тогда
		Запрос.УстановитьТекстовыйПараметр("п_ДокПрих",л_ДокПрих);
	КонецЕсли;
	
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,л_итСписокФайлов);


	Если л_итСписокФайлов.КоличествоСтрок()>0 Тогда
		л_итСписокФайлов.ВыбратьСтроки();
		Пока л_итСписокФайлов.ПолучитьСтроку() = 1 Цикл
			таблПредложений.НоваяСтрока();
			таблПредложений.ТекущийЭлемент = л_итСписокФайлов.Ссылка;
			таблПредложений.Наименование = л_итСписокФайлов.Наименование;
			таблПредложений.Файл = л_итСписокФайлов.Файл;
			таблПредложений.ВидФайла = л_итСписокФайлов.ВидФайла;
			таблПредложений.ДатаПредл = л_итСписокФайлов.ДатаФайла;
			таблПредложений.Автор = л_итСписокФайлов.Автор;
		КонецЦикла;
		
	КонецЕсли;

	Форма.кнДобПредл.Доступность(1);
	Если таблПредложений.КоличествоСтрок() = 0 Тогда
		Форма.кнИзмПредл.Доступность(0);
		Форма.кнУдПредл.Доступность(0);
	Иначе
		Форма.кнИзмПредл.Доступность(1);
		Форма.кнУдПредл.Доступность(1);
	КонецЕсли;
КонецПроцедуры
Процедура кнДобПредл()
	//Если Форма.ТолькоПросмотр() = 1 Тогда Возврат; КонецЕсли;          

	//Если семЕстьПраво( "Справочник","ФайлДок", "Изменение") = 0 Тогда 
	//	Предупреждение("У Вас нет прав !",60);
	//	СтатусВозврата(0); Возврат; 
	//КонецЕсли;
	
	Если Выбран()=0 Тогда
		Предупреждение("Вы должны сначала записать документ!");
		Возврат;
	КонецЕсли;
	
	//ОткрытьФормуМодально("Элемент.ФайлДок",,,,ТекущийЭлемент());
		спПарам = СоздатьОбъект( "СписокЗначений" );
		спПарам.Установить("Документ",ТекущийДокумент());
		спПарам.Установить("флПроверки",1);
	ОткрытьФормуМодально("Элемент.ФайлДок",спПарам,,,);
	ЗаполнитьПредл();
КонецПроцедуры
Процедура кнИзмПредл()
	Если Форма.ТолькоПросмотр() = 1 Тогда Возврат; КонецЕсли;
	ОткрытьФормуМодально(таблПредложений.ПолучитьЗначение(таблПредложений.ТекущаяСтрока(),"ТекущийЭлемент"));
	ЗаполнитьПредл();
КонецПроцедуры
Процедура кнУдПредл()
	//Если Форма.ТолькоПросмотр() = 1 Тогда Возврат; КонецЕсли;

	//Если семЕстьПраво( "Справочник","ПредложенияОбъектов", "Изменение") = 0 Тогда 
	//	Предупреждение("У Вас нет прав !",60);
	//	СтатусВозврата(0); Возврат; 
	//КонецЕсли;
	
	Если Вопрос("Вы действительно хотите удалить предложение?",1) = 2 Тогда Возврат; КонецЕсли; 
	спр = СоздатьОбъект("Справочник.ФайлДок");
//	спр.ИспользоватьВладельца( ТекущийЭлемент() );
	Если спр.НайтиЭлемент(таблПредложений.ПолучитьЗначение(таблПредложений.ТекущаяСтрока(),"ТекущийЭлемент"))=1 Тогда
		ОбъектУдалить(спр, 1);
	КонецЕсли;
	ЗаполнитьПредл();
КонецПроцедуры  
Процедура кнОткрытьФайл()
	Если таблПредложений.ТекущаяСтрока()<>0 Тогда
		ОткрытьФорму(таблПредложений.ПолучитьЗначение(таблПредложений.ТекущаяСтрока(),"ТекущийЭлемент"),"Открыть файл");
	КонецЕсли;
КонецПроцедуры



//}***Обработка вкладки файлов***\\

//{***Обработка вкладки транспортника***\\

Процедура тАдресЗагрузки1()
	ТекстВозврата="";
//
		Если Инкотермс1=Перечисление.ВидыИнкотермс.EXW Тогда
			ТекстВозврата=Клиент.ГородДоставки+
			"/"+Клиент.ПочтовыйАдрес+
			"/"+Клиент.ПочтовыйИндекс;
			АдресЗагрузки1=ПолучитьПустоеЗначение(АдресЗагрузки1);
			Форма.АдресЗагрузки1.видимость(0);
		Иначе
			ТекстВозврата=АдресЗагрузки1.ГородДоставки+
			"/"+АдресЗагрузки1.ПочтовыйАдрес+
			"/"+АдресЗагрузки1.ПочтовыйИндекс;
			Форма.АдресЗагрузки1.видимость(1);
		КонецЕсли;
	Форма.тАдресЗагрузки1.Заголовок(ТекстВозврата);
КонецПроцедуры
Процедура тАдресЗагрузки2()
	ТекстВозврата="";
//
		Если Инкотермс2=Перечисление.ВидыИнкотермс.EXW Тогда
			ТекстВозврата=Клиент.ГородДоставки+
			"/"+Клиент.ПочтовыйАдрес+
			"/"+Клиент.ПочтовыйИндекс;
			АдресЗагрузки2=ПолучитьПустоеЗначение(АдресЗагрузки2);
			Форма.АдресЗагрузки2.Доступность(0);
		Иначе
			ТекстВозврата=АдресЗагрузки2.ГородДоставки+
			"/"+АдресЗагрузки2.ПочтовыйАдрес+
			"/"+АдресЗагрузки2.ПочтовыйИндекс;
			Форма.АдресЗагрузки2.Доступность(1);
		КонецЕсли;
	Форма.тАдресЗагрузки2.Заголовок(ТекстВозврата);
КонецПроцедуры


//****************************************
Функция ВесУпак(ВидУпак="Первичная",Товар)
	Если Товар.Выбран()=0 Тогда
		Возврат 0;
	КонецЕсли;
	ТекстЗапроса="SELECT SUM($УпаковкаТоваров.ВесБруттоУпаковки) ВесУпаковки
	|			  FROM $Справочник.УпаковкаТоваров AS УпаковкаТоваров	
	|			  WHERE УпаковкаТоваров.PARENTEXT=:ВыбТовар AND ISMARK = 0
	|				AND $УпаковкаТоваров.ТипУпаковки = $Перечисление.ТипыУпаковки."+ВидУпак;
	РС=СоздатьОбъект("ODBCRecordSet");
	РС.УстБД1С();
	РС.УстановитьТекстовыйПараметр("ВыбТовар",Товар);
	ТЗ=РС.ВыполнитьИнструкцию(ТекстЗапроса);
	Возврат ТЗ.Итог("ВесУпаковки");
КонецФункции
//****************************************
Функция НеттоПервичное(Товар)
	Если Товар.ЕдНеттоВеса.Выбран()=1 Тогда
		ЕдПервУпак=Товар.ЕдНеттоВеса.Единица;
		КоэфНеттоВеса = Окр(1/Товар.ЕдНеттоВеса.Коэффициент,4,1);
	Иначе
		ЕдПервУпак=Товар.БазоваяЕдиницаИзмерения;
		КоэфНеттоВеса=1;
	КонецЕсли;
	ВесПервичной = Товар.Вес / КоэфНеттоВеса;
	Возврат ВесПервичной;	
КонецФункции
//****************************************
Функция БруттоПервичное(Товар)
	Возврат НеттоПервичное(Товар) + ВесУпак("Первичная",Товар);	
КонецФункции
//****************************************
Функция НеттоВторичное(Товар)
	Возврат БруттоПервичное(Товар)*Товар.ЛогистикаКолВУпаковке;	
КонецФункции
//****************************************
Функция БруттоВторичное(Товар)
	Возврат НеттоВторичное(Товар) + ВесУпак("Вторичная",Товар);	
КонецФункции
//****************************************
Функция НеттоТретичное(Товар)
	Возврат БруттоВторичное(Товар)*Товар.ЛогистикаКолУпакНаЕвроПалете*Товар.ЛогистикаКолУпакНаПалетеВРяду;	
КонецФункции
//****************************************
Функция БруттоТретичное(Товар)
	Возврат НеттоТретичное(Товар) + ВесУпак("Третичная",Товар);	
КонецФункции

Функция БруттоТовара(пТовар,пКоличество,Режим="Брутто") 
	СумВес=0;
	КолВторичной=0;
	КолТретичной=0;
	
	Если пТовар.ЕдНеттоВеса.Выбран()=1 Тогда
		КоэфНеттоВеса = Окр(1/пТовар.ЕдНеттоВеса.Коэффициент,4,1);;
	Иначе
		КоэфНеттоВеса=1;
	КонецЕсли;	
	
	СумВес=БруттоПервичное(пТовар)*пКоличество*КоэфНеттоВеса;
	//Расчет вторичной
	Если пТовар.ЛогистикаКолВУпаковке<>0 Тогда
		КолВторичной=Окр(пКоличество*КоэфНеттоВеса/пТовар.ЛогистикаКолВУпаковке,0,1);
		СумВес=СумВес+ВесУпак("Вторичная",пТовар)*КолВторичной;
		//расчет третичной
		Если (пТовар.ЛогистикаКолУпакНаЕвроПалете*пТовар.ЛогистикаКолУпакНаПалетеВРяду)<>0 Тогда

//
		//Если пТовар.ЕдНеттоВеса.Выбран()=1 Тогда
		//	КоэфНеттоВеса = пТовар.ЕдНеттоВеса.Коэффициент;
		//Иначе
		//	КоэфНеттоВеса=1;
		//КонецЕсли;
		НаОдномПоддоне = пТовар.ЛогистикаКолВУпаковке * пТовар.ЛогистикаКолУпакНаЕвроПалете * пТовар.ЛогистикаКолУпакНаПалетеВРяду;
		Если НаОдномПоддоне = 0 Тогда
			Поддонов = 0;
			ВесНаОдномПоддоне=0;
		Иначе
			Поддонов = пКоличество*КоэфНеттоВеса/НаОдномПоддоне;
			ВесНаОдномПоддоне = БруттоТретичное(пТовар);
		КонецЕсли;
		
		КолТретичной=Поддонов;
//		ИтогоПоддонов=ИтогоПоддонов+Поддонов;
//		ИтогоВес = ИтогоВес + Поддонов*ВесНаОдномПоддоне;
//
		//	КолТретичной=Окр(КолВторичной/(Товар.ЛогистикаКолУпакНаЕвроПалете*Товар.ЛогистикаКолУпакНаПалетеВРяду),0,1);
			СумВес=СумВес+ВесУпак("Третичная",пТовар)*КолТретичной;
		КонецЕсли;
	КонецЕсли;
	
	Если Режим="Брутто" Тогда
		Возврат СумВес;	
	ИначеЕсли Режим="КолВторичной" Тогда
		Возврат КолВторичной;
	ИначеЕсли Режим="КолТретичной" Тогда
		Возврат КолТретичной;
	КонецЕсли;
КонецФункции 

Функция БруттоТовара_Old(пТовар,пКоличество,Режим="Брутто") 
	СумВес=0;
	КолВторичной=0;
	КолТретичной=0;
	СумВес=БруттоПервичное(пТовар)*пКоличество;
	//Расчет вторичной
	Если пТовар.ЛогистикаКолВУпаковке<>0 Тогда
		КолВторичной=Окр(пКоличество/пТовар.ЛогистикаКолВУпаковке,0,1);
		СумВес=СумВес+ВесУпак("Вторичная",пТовар)*КолВторичной;
		//расчет третичной
		Если (пТовар.ЛогистикаКолУпакНаЕвроПалете*пТовар.ЛогистикаКолУпакНаПалетеВРяду)<>0 Тогда

//
		Если пТовар.ЕдНеттоВеса.Выбран()=1 Тогда
			КоэфНеттоВеса = пТовар.ЕдНеттоВеса.Коэффициент;
		Иначе
			КоэфНеттоВеса=1;
		КонецЕсли;
		НаОдномПоддоне = КоэфНеттоВеса * пТовар.ЛогистикаКолВУпаковке * пТовар.ЛогистикаКолУпакНаЕвроПалете * пТовар.ЛогистикаКолУпакНаПалетеВРяду;
		Если НаОдномПоддоне = 0 Тогда
			Поддонов = 0;
			ВесНаОдномПоддоне=0;
		Иначе
			Поддонов = пКоличество  / НаОдномПоддоне;
			ВесНаОдномПоддоне = БруттоТретичное(пТовар);
		КонецЕсли;
		
		КолТретичной=Поддонов;
//		ИтогоПоддонов=ИтогоПоддонов+Поддонов;
//		ИтогоВес = ИтогоВес + Поддонов*ВесНаОдномПоддоне;
//
		//	КолТретичной=Окр(КолВторичной/(Товар.ЛогистикаКолУпакНаЕвроПалете*Товар.ЛогистикаКолУпакНаПалетеВРяду),0,1);
			СумВес=СумВес+ВесУпак("Третичная",пТовар)*КолТретичной;
		КонецЕсли;
	КонецЕсли;
	
	Если Режим="Брутто" Тогда
		Возврат СумВес;	
	ИначеЕсли Режим="КолВторичной" Тогда
		Возврат КолВторичной;
	ИначеЕсли Режим="КолТретичной" Тогда
		Возврат КолТретичной;
	КонецЕсли;
КонецФункции 


Функция СуммарныйОбъем()                      
	СумОбъем=0;	
	ВыбратьСтроки();	
	Пока ПолучитьСтроку()>0 Цикл
		СумОбъем=СумОбъем+Подтверждено*Товар.Объем;
	КонецЦикла;                                 	    
	Возврат СумОбъем;
КонецФункции         
Процедура ЗаполнитьВидВТаблице()
	трВид18=0;
	трВес18=0;
	трКубм18=0;
	трПалет18=0;
	птрПалет18=0;
	трКор18=0;
	
	трВид2=0;
	трВес2=0;
	трКубм2=0;
	трПалет2=0;
	птрПалет2=0;
	трКор2=0;
	
	трВид25=0;
	трВес25=0;
	трКубм25=0;
	трПалет25=0;
	птрПалет25=0;
	трКор25=0;
	
	ИтогоБрутто=0;
	ИтогоПоддонов=0;
	пИтогоПоддонов=0;
	ИтогоКоробок=0;
	
	итТабл=СоздатьОбъект("ИндексированнаяТаблица");
	ТабЗнач = СоздатьОбъект("ТаблицаЗначений");
	//ВыгрузитьТабличнуюЧасть(ТабЗнач,"Товар,Количество,Температура");
	ВыгрузитьТабличнуюЧасть(ТабЗнач,"Товар,Подтверждено,Температура");
	итТабл.Загрузить(ТабЗнач);
	итТабл.ПереименоватьКолонку("Подтверждено","Количество");//добавлено
	итТабл.Свернуть("Товар","Количество");
	//итТабл.Показать();
	итТабл.ВыбратьСтроки();
	Пока итТабл.ПолучитьСтроку()=1 Цикл
		Если итТабл.Температура.ТемпРежимТранспорт=Перечисление.ТемпРежимыТранспорт.Заморозка Тогда //заморозка
			трВид18=трВид18+1;
			трВес18=трВес18+БруттоТовара(итТабл.Товар,итТабл.Количество);
			трКубм18=трКубм18+итТабл.Количество*итТабл.Товар.Объем;
			трКор18=трКор18+БруттоТовара(итТабл.Товар,итТабл.Количество,"КолВторичной");
			птрПалет18=птрПалет18+БруттоТовара(итТабл.Товар,итТабл.Количество,"КолТретичной");
			трПалет18=птрПалет18;
		ИначеЕсли итТабл.Температура.ТемпРежимТранспорт=Перечисление.ТемпРежимыТранспорт.Холодный Тогда	
			трВид2=трВид2+1;
			трВес2=трВес2+БруттоТовара(итТабл.Товар,итТабл.Количество);
			трКубм2=трКубм2+итТабл.Количество*итТабл.Товар.Объем;
			птрПалет2=птрПалет2+БруттоТовара(итТабл.Товар,итТабл.Количество,"КолТретичной");
			трКор2=трКор2+БруттоТовара(итТабл.Товар,итТабл.Количество,"КолВторичной");
			трПалет2=птрПалет2;
		ИначеЕсли итТабл.Температура.ТемпРежимТранспорт=Перечисление.ТемпРежимыТранспорт.Сухой Тогда	
			трВид25=трВид25+1;
			трВес25=трВес25+БруттоТовара(итТабл.Товар,итТабл.Количество);
			трКубм25=трКубм25+итТабл.Количество*итТабл.Товар.Объем;
			птрПалет25=птрПалет25+БруттоТовара(итТабл.Товар,итТабл.Количество,"КолТретичной");
			трКор25=трКор25+БруттоТовара(итТабл.Товар,итТабл.Количество,"КолВторичной");
			трПалет25=птрПалет25;
		КонецЕсли;
		ИтогоБрутто=ИтогоБрутто+БруттоТовара(итТабл.Товар,итТабл.Количество);
		пИтогоПоддонов=пИтогоПоддонов+БруттоТовара(итТабл.Товар,итТабл.Количество,"КолТретичной");
		ИтогоПоддонов=пИтогоПоддонов;
		ИтогоКоробок=ИтогоКоробок+БруттоТовара(итТабл.Товар,итТабл.Количество,"КолВторичной");
	КонецЦикла; 

КонецПроцедуры

Функция ПроверкаИтогов()
	Если ИтогоПоддонов=0 Тогда
		Если (ИтогоКоробок>5)ИЛИ (ИтогоБрутто>10) Тогда
//			ИтогоПоддонов=ПолучитьПустоеЗначение(ИтогоПоддонов);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	Возврат 1;
КонецФункции

Процедура кнЗаполнитьТаблицу()
	Если ПроверкаПрав()<>0 Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьВидВТаблице();
	Если ПроверкаИтогов()=0 Тогда
		Сообщить("Количество поддонов = 0, при таком количестве товара, исправьте количество поддонов вручную");
		Сообщить("Количество палет должно быть больше 0. Минимум 0.1");

	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменениеНомерРейса()
	
	Если семЕстьПраво( "Документ", "ОжидаемаяПоставка", "Подпись логиста" ) =1 Тогда
		Перевозчик=НомерРейса.Перевозчик1;
		Перевозчик2=НомерРейса.Перевозчик2;
		старНомерРейса=НомерРейса;
	Иначе
		Сообщить("Недостаточно прав для снятия/установки номера рейса !");
		НомерРейса=старНомерРейса;
	КонецЕсли;		
		
КонецПроцедуры

Функция ВыводКоличестваПоддонов()
	л_Кол=БруттоТовара(Товар,Подтверждено,"КолТретичной");
	Если л_Кол=0 Тогда
		л_Кол=0;
	ИначеЕсли (л_Кол<0.01)И(л_Кол<>0) Тогда	
		л_Кол=0.01;
	КонецЕсли;
		
	Возврат Окр(л_Кол,2);
	
КонецФункции // ВыводКоличестваПоддонов


//}***Обработка вкладки транспортника***\\


//{***Заполнение ТЧ из регистра***\\
Функция ЗагрузкаРегистра(док)
	пДок=СоздатьОбъект("ИндексированнаяТаблица");
	Запрос=СоздатьОбъект("ODBCRecordSet");

	ТекстЗапроса="SELECT ОжидаемаяПоставкаОстатки.ПоЗаказу [ПоЗаказу $Документ]
		|FROM $РегистрОстатки.ОжидаемаяПоставка(,,
		|		(ПоПоставке = $ВидДокумента36.ОжидаемаяПоставка + :ПоПоставке),
//		|		(ПоПоставке = :ПоПоставке),
		|		ПоЗаказу,) AS ОжидаемаяПоставкаОстатки
		|GROUP BY ОжидаемаяПоставкаОстатки.ПоЗаказу
		|";	
		
	Запрос.УстановитьТекстовыйПараметр("ПоПоставке",ТекущийДокумент());
	Запрос.ВыполнитьИнструкцию(ТекстЗапроса,пДок);
	
	Возврат пДок;
КонецФункции

//======================================================================
Процедура СохранениеТабличнойЧасти()
	ВыгрузитьТабличнуюЧасть(м_ТабличнаяЧасть,"Товар,Подтверждено,ЦенаПодтв,ДокументОснованиеТабл,ПоСчету");
КонецПроцедуры // СохранениеТабличнойЧасти

Процедура ЗаполнитьТЧ()
	Перем л_ИТ;
	
	СохранениеТабличнойЧасти();
	УдалитьСтроки();
	л_ИТ=ЗагрузкаРегистра(ТекущийДокумент());
//	ИТ.Группировать("иПоЗаказу","Цена",0);
//	ИТ.Показать();              		
	л_Ит.ВыбратьСтроки();
	Пока л_Ит.ПолучитьСтроку() = 1 Цикл
		ЗаполнениеТаблицыНаОсновании(л_ИТ.ПоЗаказу);
	КонецЦикла;
	
КонецПроцедуры
Процедура кнОбновить()
	Если ПустоеЗначение(ПодписьМенеджера)=1 Тогда
		Если ТекущийДокумент().Проведен()=0 Тогда
			ЗаполнитьТЧ();
			Форма.Обновить();
		Иначе
			Сообщить("Обновление невозможно. Отмените проведение документа");
		КонецЕсли;
	Иначе
		Сообщить("Обновление невозможно. Снимите подпись закупщика");
	КонецЕсли;
КонецПроцедуры
//}***Заполнение ТЧ из регистра***\\

Процедура Печать()
	Путь = КаталогИБ() + "ExtForms\Печать\ЗаказПоставщику.ert";
	Если ФС.СуществуетФайл( Путь ) = 1 Тогда 
		сп = СоздатьОбъект( "СписокЗначений" );
		сп.Установить( "Документ", ТекущийДокумент() );
		ОткрытьФорму( "Отчет", сп, Путь );
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ПриНачалеРедактированияСтроки()
//	Сообщить(НомерСтроки);
//	Сообщить(Форма.ТекущаяКолонка());
	Если Форма.ТекущаяКолонка()="нЗаказа" Тогда
		ПолучитьСтрокуПоНомеру(НомерСтроки);
		ОткрытьФормуМодально(ДокументОснованиеТабл,,1);
	КонецЕсли;
КонецПроцедуры

Процедура НастройкаРеквизитовДоступа(Доступ=0)
	
	Если Доступ=0 Тогда
	//	Форма.ТолькоПросмотр(1);
		УправлениеВидимостью(0);	
	ИначеЕсли Доступ=1 Тогда
		Форма.ТолькоПросмотр(0);
		УправлениеВидимостью(1);
	КонецЕсли;

	Форма.НомерДок.Доступность(0);
//	Форма.ДатаДок.Доступность(0);
	Форма.ОснСрокПоставки.Доступность(0);
	Форма.Клиент.Доступность(0);
//	Форма.Обновить();
КонецПроцедуры


Функция ПроверкаПрав(Уровень=0)
	
	//Если Уровень=0 Тогда
	//	НастройкаРеквизитовДоступа(0);
	//ИначеЕсли Уровень=1 Тогда
	//	Если ПустоеЗначение(ПодписьМенеджера)=0 Тогда
	//		НастройкаРеквизитовДоступа(1);
	//	ИначеЕсли ПустоеЗначение(ПодписьЛогиста)=0 Тогда
	//		НастройкаРеквизитовДоступа(1);
	//	Иначе
	//		НастройкаРеквизитовДоступа(0);
	//	КонецЕсли;
	//ИначеЕсли Уровень=2 Тогда	
	//	Если ПустоеЗначение(ПодписьЛогиста)=0 Тогда
	//		НастройкаРеквизитовДоступа(1);
	//	Иначе
	//		НастройкаРеквизитовДоступа(0);
	//	КонецЕсли;
	//КонецЕсли;	

	//Если глПолучитьСостояниеДокумента(ТекущийДокумент())=УстановитьСостояние("Распечатан",ТекущийДокумент()) Тогда	
	//	Форма.ТолькоПросмотр(1);
	//	Форма.кнЗаписать.Доступность(0);
	//	Форма.кнОК.Доступность(0);
	//	Возврат 1;
	//КонецЕсли;	
	
	Если ПустоеЗначение(ПодписьЛогиста)=0 Тогда 
		НастройкаРеквизитовДоступа(0);
		Возврат 1;
	ИначеЕсли ПустоеЗначение(ПодписьМенеджера)=0 Тогда //нет подписи логиста
		НастройкаРеквизитовДоступа(0);
		Возврат 2;
	Иначе
		НастройкаРеквизитовДоступа(1);
		Возврат 0;
	КонецЕсли;
	
	
КонецФункции

Процедура кнПодписьЗакупщика()
	
	Если (ПустоеЗначение(ПодписьМенеджера)=1)И (фДоставкаКлиента=0) Тогда
		Если ПустоеЗначение(ИтогоБрутто)=1  Тогда
			Сообщить("Заполните вкладку *Доставка товара* !");
			Сообщить("Количество отгрузки поставщика");
			Возврат;
		КонецЕсли;

		Если ИтогоПоддонов=0  Тогда
			Если ПроверкаИтогов()=0 Тогда
				Сообщить("Заполните вкладку *Доставка товара* !");
				Сообщить("Количество палет должно быть больше 0. Минимум 0.1");
				Возврат;
			КонецЕсли;

		КонецЕсли;

		
		Если ПустоеЗначение(Инкотермс1)=1 Тогда	
			Сообщить("Заполните вкладку *Доставка товара* !");
			Сообщить("Инкотремс");
			Возврат;
		КонецЕсли;
			
		Если ПустоеЗначение(ВидГруза)=1 Тогда
			Сообщить("Заполните вкладку *Доставка товара* !");
			Сообщить("Вид груза");
			Возврат;
		КонецЕсли;
		
		Если Инкотермс1<>Перечисление.ВидыИнкотермс.EXW Тогда		
			Если ПустоеЗначение(АдресЗагрузки1)=1 Тогда
				Сообщить("Заполните вкладку *Доставка товара* !");
				Сообщить("Адрес загрузки");
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если семЕстьПраво( "Документ", "ОжидаемаяПоставка", "Подпись закупщика" ) =1 Тогда
		Если ПустоеЗначение(ПодписьМенеджера)=1 Тогда
			ПодписьМенеджера=Пользователь;
			ПроверкаПрав(1);
		Иначе
			ПодписьМенеджера=ПолучитьПустоеЗначение(ПодписьМенеджера);
			ПроверкаПрав(1);
		КонецЕсли;	
	Иначе
		Сообщить("Недостаточно прав для снятия/установки подписи закупщика !");
		Возврат;
	КонецЕсли;
	
	Если фДоставкаКлиента=1 Тогда
		ПодписьЛогиста=ПодписьМенеджера;
		НомерРейса=Константа.СкрытьОжидаемуюПоставку;
	КонецЕсли;
	

	
	//Если ПустоеЗначение(ПодписьМенеджера)=1 Тогда
	//	ПодписьМенеджера=Пользователь;
	//	ПроверкаПрав(1);
	//ИначеЕсли ПустоеЗначение(ПодписьМенеджера)=0 Тогда
	//	Если Пользователь=ПодписьМенеджера Тогда
	//		ПодписьМенеджера=ПолучитьПустоеЗначение(ПодписьМенеджера);
	//		ПроверкаПрав(1);
	//	Иначе
	//		Сообщить("Подпись может снять только владелец подписи !");
	//	КонецЕсли;
	//КонецЕсли;

	//ПодписьМенеджера=?(ПустоеЗначение(ПодписьМенеджера)=1,Пользователь,"");
КонецПроцедуры

Процедура кнПодписьЛогиста()
	
	Если (семЕстьПраво( "Документ", "ОжидаемаяПоставка", "Подпись логиста" ) =1)ИЛИ(фДоставкаКлиента=1) Тогда
		Если ПустоеЗначение(ПодписьЛогиста)=1 Тогда
			Если ПустоеЗначение(ПодписьМенеджера)=1 Тогда
				Сообщить("Без подписи закупщика, подпись логиста запрещена !");
				Возврат;
			КонецЕсли;			
			ПодписьЛогиста=Пользователь;
			ПроверкаПрав(2);
		Иначе
			ПодписьЛогиста=ПолучитьПустоеЗначение(ПодписьЛогиста);
			ПроверкаПрав(2);
		КонецЕсли;	
	Иначе
		Сообщить("Недостаточно прав для снятия/установки подписи логиста !");
	КонецЕсли;

	
	//Если ПустоеЗначение(ПодписьЛогиста)=1 Тогда
	//	ПодписьЛогиста=Пользователь;
	//	ПроверкаПрав(2);
	//ИначеЕсли ПустоеЗначение(ПодписьЛогиста)=0 Тогда
	//	Если Пользователь=ПодписьЛогиста Тогда
	//		ПодписьЛогиста=ПолучитьПустоеЗначение(ПодписьЛогиста);
	//		ПроверкаПрав(2);
	//	Иначе
	//		Сообщить("Подпись может снять только владелец подписи !");
	//	КонецЕсли;
	//КонецЕсли;
	
//	ПодписьЛогиста=?(ПустоеЗначение(ПодписьЛогиста)=1,Пользователь,"");
КонецПроцедуры

//{ТП
Функция ПоискЗаказаВТаблице(ОбъектПоиска)
	ТабЗнач = СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(ТабЗнач,"ДокументОснованиеТабл");
	ТабЗнач.Свернуть("ДокументОснованиеТабл",);
	ТабЗнач.ВыбратьСтроки();
	Пока ТабЗнач.ПолучитьСтроку()=1 Цикл
		Если ОбъектПоиска=ТабЗнач.ДокументОснованиеТабл Тогда
			Возврат ТабЗнач.НомерСтроки;
		КонецЕсли;	
	КонецЦикла; 
	Возврат 0;
КонецФункции
Функция ДобавитьЗаказВТаблицу(Док)
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку()=1 Цикл
		НоваяСтрока(); 			
		СрокПоставки=Док.СрокПоставки;
		Товар=Док.Товар;
		Цена=Док.Цена;
		ЦенаПодтв=Цена;
		Количество=Док.Количество;
		КодПоставщика=Товар.КодПоставщика;
		УпакКол=Док.УпакКол;
		Сумма=Цена*Количество;
		НДС=Док.НДС;
		ДокументОснованиеТабл=Док;

		Подтверждено=Док.Подтверждено;
		АвтоСкидка=Док.АвтоСкидка;
		МанСкидка=Док.МанСкидка;
		Температура=Док.Товар.МестоХранения;
	КонецЦикла;
	ТП_ТаблицаЗаказов.ОбновитьСтроки();
	Форма.Обновить();
КонецФункции
Функция УдалитьЗаказВТаблицу(Ссылка)
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Если ДокументОснованиеТабл=Ссылка Тогда
			УдалитьСтроку();
			ВыбратьСтроки();
		КонецЕсли;         
	КонецЦикла;
	ТП_ТаблицаЗаказов.ОбновитьСтроки();
	Форма.Обновить();
КонецФункции
Функция ОткрытьЗаказ(тп)
	Возврат ОткрытьФормуМодально(тп.ТекущиеДанные.Ссылка,,1);
КонецФункции



Процедура тпКнопка_ПриВыводеСтроки(тп, ОформлениеСтроки, ДанныеСтроки, ТипРегиона)

	Если ПоискЗаказаВТаблице(ДанныеСтроки.Ссылка)>0 Тогда
		ОформлениеСтроки.ЦветФона = глПолучитьЦвет(0,255,0);
	КонецЕсли;	
	
	//Если СокрЛП(ДанныеСтроки.Документ_ном)=СокрЛП(ДокументОснование.НомерДок) Тогда
	//	ОформлениеСтроки.ЦветФона = 4554455;
	//	//<ПолучитьЦвет(R,G,B)>
	//КонецЕсли;
		
			//Параметры:
	//
	//ОформлениеСтроки - тип: ОформлениеСтроки. Объект для управления оформлением выводимой строки табличного поля. 
	//ДанныеСтроки - тип: ДанныеСтроки. Данные (коллекция значений полей) выводимой строки табличного поля. 
	//ТипРегиона - тип: ТипыРегионовТП 
	//Описание: Возникает при выводе (отображении) строки табличного поля.
	
КонецПроцедуры

Процедура тпКнопка_ПриКонтекстномМеню(тп, ТипРегиона, Колонка, Стр)
	Перем фВывода;
	
	Если ТипРегиона<>3 Тогда
		Возврат;
	КонецЕсли;
	
	Сервис=СоздатьОбъект("Сервис");
	текЗнач="";
	фВывода=ПоискЗаказаВТаблице(тп.ТекущиеДанные.Ссылка);
	
	Меню=СоздатьОбъект("СписокЗначений");
		Если фВывода=0 Тогда
			Меню.ДобавитьЗначение("Добавить","Добавить заявку.");
		ИначеЕсли фВывода>0 Тогда	
			Меню.ДобавитьЗначение("Удалить","Удалить заявку.");
		КонецЕсли;
		Меню.ДобавитьЗначение("Открыть","Открыть заявку.");
		
	
	Если Сервис.ВыбратьЗначение(Меню,текЗнач,,0,2)=1 Тогда
		Если текЗнач="Добавить" Тогда
			ДобавитьЗаказВТаблицу(тп.ТекущиеДанные.Ссылка);
		ИначеЕсли текЗнач="Удалить" Тогда
			УдалитьЗаказВТаблицу(тп.ТекущиеДанные.Ссылка);
		ИначеЕсли текЗнач="Открыть" Тогда
			ОткрытьЗаказ(тп);
		//	Сообщить(Тп.);
			//ОткрытьФормуМодально(Стр,,1);	
		КонецЕсли;	
	КонецЕсли;	
		
КонецПроцедуры

Процедура тпКнопка_Выбор(тп, Стр, Колонка, ТипРегиона)
	Если ПроверкаПрав()<>0 Тогда
		Возврат;
	КонецЕсли;
	ОткрытьЗаказ(тп);
КонецПроцедуры

//*******************
Процедура НастройкаТП_ТаблицаЗаказов()
	
	Колонка = ТП_ТаблицаЗаказов.Колонки.Добавить("Документ_ном");
	Колонка.Данные = "Документ_ном"; Колонка.Заголовок = "Документ_ном"; 
	Колонка.ЗнакУпорядочивания = 0;
	Колонка.Ширина=18;
	
	Колонка = ТП_ТаблицаЗаказов.Колонки.Добавить("Ссылка");
	Колонка.Данные = "Ссылка";
	Колонка.Заголовок = "Документ"; 
	Колонка.ЗнакУпорядочивания = 0;
	Колонка.Ширина=18;
	
	
	
	//Колонка = ТП_ТаблицаЗаказов.Колонки.Добавить("ОснСрокПоставки"); Колонка.Данные = "ОснСрокПоставки"; Колонка.Заголовок = "ОснСрокПоставки"; 
	//Колонка.ЗнакУпорядочивания = 1;
	//Колонка.Ширина=6;
	//
	//Колонка = ТП_ТаблицаЗаказов.Колонки.Добавить("ДатаКонца"); Колонка.Данные = "ДатаКонца"; Колонка.Заголовок = "По"; 
	//Колонка.ЗнакУпорядочивания = 1;
	//Колонка.Ширина=6;

	//Колонка = ТП_ТаблицаЗаказов.Колонки.Добавить("ПроцентСкидки"); Колонка.Данные = "ПроцентСкидки"; Колонка.Заголовок = "% скидки"; 
	//Колонка.ЗнакУпорядочивания = 1;
	//Колонка.Ширина=4;

КонецПроцедуры
Процедура ЗаполнитьТП_ТаблицаЗаказов( Обновить=0 )
	
	Если Обновить=0 Тогда
		ИсточникПоставщика = СоздатьОбъект("ПоставщикДанныхODBC.MSSQL"); 
		ИсточникПоставщика.БазаДанных =  СоздатьОбъект("ODBCDataBase"); 
	КонецЕсли;

	
//	ТекстЗапроса="SELECT СкидкиПоставщиков.IDDOC as [ТекущийЭлемент $Документ.СкидкаПоставщику2]
//	|	, NullIf($СкидкиПоставщиков.НачалоДействия, '17530101') as ДатаНачала
//	|	, NullIf($СкидкиПоставщиков.КонецДействия, '17530101') as ДатаКонца
//	|	, Журнал.DOCNO as Документ_ном
//	|   , $СкидкиПоставщиков.ОбщийПроцент as ПроцентСкидки
//	|	, Журнал.DATE_TIME_IDDOC as ДатаВремяИдДок
//	|FROM $Регистр.СкидкиПоставщиков AS СкидкиПоставщиков
//	|INNER JOIN _1SJOURN AS Журнал ON СкидкиПоставщиков.IDDOC = Журнал.IDDOC
//	|WHERE ($СкидкиПоставщиков.Поставщик = ?Клиент(14,9))
////	|AND ($СкидкиПоставщиков.НачалоДействия >= ?ДатаНач(8) AND $СкидкиПоставщиков.КонецДействия <= ?ДатаКон(8))
//	|AND (Cast(Left(Журнал.DATE_TIME_IDDOC, 8) AS datetime) >= ?ДатаНач(8)) AND (Cast(Left(Журнал.DATE_TIME_IDDOC, 8) AS datetime) <= ?ДатаКон(8))
//	|AND (СкидкиПоставщиков.LINENO_ = 1)";

	ТекстЗапроса="SELECT Журнал.DOCNO as Документ_ном
	|, ЗаказПоставщику.IDDOC as [Ссылка $Документ.ЗаказПоставщику]
	|FROM _1SJOURN AS Журнал
	|INNER JOIN $Документ.ЗаказПоставщику AS ЗаказПоставщику ON Журнал.IDDOC = ЗаказПоставщику.IDDOC
	|WHERE ($ЗаказПоставщику.ОснСрокПоставки >= ?ДатаНач(8))
	|AND ($ЗаказПоставщику.ОснСрокПоставки <= ?ДатаКон(8))
	|AND ($ЗаказПоставщику.Клиент = ?Клиент(14,9))
	|";

	//ТекстЗапроса="
	//|SELECT Журнал.DOCNO AS Документ_ном
	//|FROM _1SJOURN AS Журнал
	//|INNER JOIN $Документ.ЗаказПоставщику AS ЗаказПоставщику ON Журнал.IDDOC = ЗаказПоставщику.IDDOC
	//|WHERE ($ЗаказПоставщику.ОснСрокПоставки >= ?ДатаНач(8)) AND ($ЗаказПоставщику.ОснСрокПоставки <= ?ДатаКон(8))";	
	
	
	ИсточникПоставщика.УстТекстЗапроса(ТекстЗапроса);
	ИсточникПоставщика.Параметры.Установить("Клиент",Клиент);
	ИсточникПоставщика.Параметры.Установить("ДатаНач",ДатаС1);
	ИсточникПоставщика.Параметры.Установить("ДатаКон",ДатаПо1);

	
//	Поле = ИсточникПоставщика.Поля.Добавить("ТекущийЭлемент");
//  	Поле.Автоудаление = 0;
//	Поле.ТипБыстрогоПоиска = 1;

	ИсточникПоставщика.УстКлючПорядка("Документ_ном,Ссылка"); 
	ИсточникПоставщика.УстИДПоле("Документ_ном");
	
//	ТП_ТаблицаЗаказов.ТаймаутОбновления  		= 0;
//	ТП_ТаблицаЗаказов.РазрешитьПеретаскивание	= 0;
	
	
	ТП_ТаблицаЗаказов.ПоставщикДанных = ИсточникПоставщика; 
	ТП_ТаблицаЗаказов.ПоставщикДанных.Обновить(); 
	ТП_ТаблицаЗаказов.ОбновитьСтроки();
		
	НастройкаТП_ТаблицаЗаказов();


КонецПроцедуры

//}ТП

Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
 	Если НомерЗакладки=1 Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал",2);
		ПроверкаПрав();
	
//	ИначеЕсли НомерЗакладки=2 Тогда
//		Форма.ИспользоватьСлой("Шапка,ТП_СписокЗаказов,Подвал",2);
//		ПроверкаПрав();

	ИначеЕсли НомерЗакладки=2 Тогда//вкладка транспорт
		Форма.ИспользоватьСлой("Шапка,Транспортник,Подвал",2);
		Если ПроверкаПрав()=2 Тогда
			НастройкаРеквизитовДоступа(1);
		КонецЕсли;
		тАдресЗагрузки1();
		тАдресЗагрузки2();
		//ЗаполнитьВидВТаблице();	
	ИначеЕсли НомерЗакладки=3 Тогда	
		Форма.ИспользоватьСлой("Шапка,Файлы,Подвал",2);
		ЗаполнитьПредл();
	КонецЕсли;        
	
КонецПроцедуры                                                                  

Процедура НастроитьПривязки()
	//оПривязки = СоздатьОбъект("Общие.Форма.Привязки3");
	//оПривязки.Добавить("тпКнопка_", "НН", "Форма", "ПП", "Форма");
	//оПривязки.Добавить("кнЗаписать", "ВН", "Форма", "НН", "Форма");
	//оПривязки.Добавить("кнОК", "ВН", "Форма", "НН", "Форма");
	//оПривязки.Добавить("кнЗакрыть", "ВН", "Форма", "НН", "Форма");
	УправлениеФормой = СоздатьОбъект("УправлениеФормой");
	Привязки = УправлениеФормой.ПривязкаЭлементов;

	Привязки.УстановитьГраницыПоФорме("тпКнопка_",1,1,1,0);
	
	Привязки.УстановитьГраницыПоФорме("кнЗаписать",1,0,0,1);
	Привязки.УстановитьГраницыПоФорме("кнОК",1,0,0,1);
	Привязки.УстановитьГраницыПоФорме("кнЗакрыть",1,0,0,1);
	Привязки.УстановитьГраницыПоФорме("кнПомощь",1,0,0,1);
	Привязки.УстановитьГраницыПоФорме("кнПечать",1,0,0,1);	
	Привязки.УстановитьГраницыПоФорме("кнИзмЦенуГр",1,0,0,1);
	
	Привязки.Привязать();
	
	
КонецПроцедуры


Процедура ОбработкаВнешнихКоманд()
	Перем ПолучСЗПараметр;
	Перем док;
	
	ПолучСЗПараметр = Форма.Параметр;
	Если ПустоеЗначение(ПолучСЗПараметр)=0 Тогда
		Команда=ПолучСЗПараметр.Получить("Команда");
		док=ПолучСЗПараметр.Получить("Конт");
		Если Команда="Новый" Тогда
			//ВводНаОсновании(док);
		//	ЗаполнениеШапки(ПолучСЗПараметр);
			ЗаполнитьШапку(Контекст);
			Клиент = ПолучСЗПараметр.Получить("Клиент");
			ДатаОтгрузки = ПолучСЗПараметр.Получить("пДатаОтгрузки");
			НеделяОтгрузки = глНомерНеделиЕвро(ДатаОтгрузки);
			Записать();
			Сообщить("Создан "+ТекущийДокумент()+" из "+док);
		ИначеЕсли Команда="НаОсновании" Тогда
			ВводНаОсновании(док);
			Записать();
			Сообщить("Создан "+ТекущийДокумент()+" на основании "+док);
		ИначеЕсли Команда="Изменить" Тогда
			ДатаОтгрузки=ПолучСЗПараметр.Получить("пДатаОтгрузки");
			Записать();
			Сообщить("Изменен "+ТекущийДокумент()+" из "+док);
		ИначеЕсли Команда="Обновить" Тогда
		//	УдалениеТаблицыНаОсновании(док);
		//	ЗаполнениеТаблицыНаОсновании(док);
			ЗаполнениеШапки(Док);
			ЗаполнитьТЧ();
			Если фДоставкаКлиента=1 Тогда
//				ПодписьЛогиста=Пользователь;
				ДатаПрихода=ОснСрокПоставки;
				НомерРейса=Константа.СкрытьОжидаемуюПоставку;
				кнЗаполнитьТаблицу();
			КонецЕсли;
			
			//ДатаОтгрузки=ПолучСЗПараметр.Получить("пДатаОтгрузки");
			Записать();
			Сообщить("Обновлен "+ТекущийДокумент()+" из "+док);
		ИначеЕсли Команда="ОбновитьВСЕ" Тогда
			УдалитьСтроки();
			ВводНаОсновании(док);
			ДатаОтгрузки=ПолучСЗПараметр.Получить("пДатаОтгрузки");
			НеделяОтгрузки=глНомерНеделиЕвро(ДатаОтгрузки);
			Записать();
			Сообщить("Обновлено все в "+ТекущийДокумент()+" из "+док);
		ИначеЕсли Команда="Удаление" Тогда
			УдалениеТаблицыНаОсновании(док);
			Записать();
			Сообщить("Удалены позиции в "+ТекущийДокумент()+" из "+док);
		ИначеЕсли Команда="Удаление" Тогда
			ЗаполнитьТЧ();
		КонецЕсли;	
		Форма.Закрыть(0);
		расш=СоздатьОбъект("РасширениеФормы");
		расш.Закрыть();
		
	КонецЕсли;

КонецПроцедуры

Процедура ПриОткрытии()  	
	ОбработкаВнешнихКоманд();
	ПриЗаписиПерепроводить(1);
	ПроверкаПрав();
//	форма.Обновить();
	Если ДатаДок<=Константа.ДатаЗапретаРедактированияЗаказов Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	//	кнОбновить.Доступность(1-Форма.ТолькоПросмотр());
	Форма.кнОбновить.Доступность(1-Форма.ТолькоПросмотр());	

	
	НастроитьПривязки();
	
	//	ПроверкаРазрешенияРедактирования(Контекст);
	//Если Клиент.Выбран()=1 Тогда	
	//	Клиент.ИспользоватьДату(ДатаДок);	       
	//КонецЕсли;
	запросВыполнен=0;  	
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("ОтгрузкаПоставщика","Табличная часть");
//	Форма.Закладки.ДобавитьЗначение("ЗаказыПоставщика","Заказы Поставщика");
	Форма.Закладки.ДобавитьЗначение("Транспортник","Доставка товара");
	Форма.Закладки.ДобавитьЗначение("Файлы","Прилагаемые документы");

	
	Форма.Закладки.ТекущаяСтрока(1);
	Форма.ИспользоватьСлой("Шапка,Основной,Подвал",2);
	
	//Если (ТипЗначенияСтр( Форма.Параметр ) = "СписокЗначений")  И (Выбран()=1) Тогда
	//	ЗаполнитьТаблЧастьПоТЗ(Форма.Параметр.Получить("Таблица"),1);
	//КонецЕсли;
	
//	ОбъектП = СоздатьОбъект("AddIn.R_SQL");
	
	//Доступ();        	                   
	семЗаголовокОкна(Контекст);

//	ЗаполнитьТЧ();
КонецПроцедуры      

Процедура ПослеОткрытия()
	Ф=СоздатьОбъект("Форма");
	Ф.УстановитьФорму(Форма);
	ТП_ТаблицаЗаказов=Ф.СоздатьЭлементУправления("ТабличноеПоле","тпКнопка_");
	ЗаполнитьТП_ТаблицаЗаказов();
КонецПроцедуры

Процедура стар_ПриЗаписи ()
	Если глПолучитьСостояниеДокумента(ТекущийДокумент())=УстановитьСостояние("Распечатан",ТекущийДокумент()) Тогда	
		Если Модифицированность()=1 Тогда
			ДокКомп=СоздатьОбъект("Документ.СостояниеДок");
			НайденДокКомпл=0;
			ДокПодч=СоздатьОбъект("Документ");
			ДокПодч.ВыбратьПодчиненныеДокументы(ТекущийДокумент().ДатаДок,,ТекущийДокумент());
			Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
		//		Если (ДокПодч.Вид()="СостояниеДок") И (ДокПодч.Проведен()=1) Тогда
				Если ДокПодч.Вид()="ПриходнаяНакладная" Тогда
					Сообщить("Сохранение не возможно. На данный документ есть приходная накладная.");
					Возврат;
				КонецЕсли;
		
				Если ДокПодч.Вид()="СостояниеДок" Тогда
					ДокКомп.НайтиДокумент(ДокПодч.ТекущийДокумент());
					НайденДокКомпл=1;
				КонецЕсли;	
			КонецЦикла;	
			
			Если НайденДокКомпл=0 Тогда
				ДокКомп.Новый();
				ЗаполнитьШапку(ДокКомп); 
				ДокКомп.ДокументОснование=ТекущийДокумент();
			КонецЕсли;
		
			ДокКомп.СостояниеДок=УстановитьСостояние("Изменен",ТекущийДокумент());
			ДокКомп.АвтоВремяТекущее();
			ОбъектЗаписать(ДокКомп,);
			ДокКомп.АвтоВремяТекущее();
			
		//	ДокКомп.УстановитьВремя(Часы_,Мин_,Сек_+1);
			ДокКомп.Провести(1);
			ЗаписьЖурналаРегистрации( "Состояние документа "+ДокКомп.НомерДок+" по ожидаемой поставке "+ТекущийДокумент().НомерДок,, "Ожидаемая поставка", ТекущийДокумент(), 2 );
		КонецЕсли;
	КонецЕсли;
	Если (ПустоеЗначение(п_старДатаПрихода)=0)И(п_старДатаПрихода<>ДатаПрихода) Тогда
	
		Если п_старДатаПрихода<>ДатаПрихода Тогда
			ДокПодч=СоздатьОбъект("Документ");
			ДокПодч.ВыбратьПодчиненныеДокументы(ТекущийДокумент().ДатаДок,,ТекущийДокумент());
			Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
				Если ДокПодч.Вид()="ПриходнаяНакладная" Тогда
					ДатаПрихода=п_старДатаПрихода;
					Сообщить("Смена даты прихода невозможна, есть приходная накладная.");
				КонецЕсли;
			КонецЦикла;		
			
		КонецЕсли;	
		
		Если (ДатаПрихода+2)>ТекущаяДата() Тогда

			спр=СоздатьОбъект("Справочник.Сотрудники");
			 //Светлана Рябова
			Если спр.НайтиПоКоду("PPT-LD1",0)=1 Тогда
				Заголовок = Шаблон("Izmenena data prihoda na sklad [ТекущийДокумент().НомерДок]");
				ТекстСообщения = Шаблон("V ozidajemoj postavke [ТекущийДокумент().НомерДок] izmenena data prihoda na [ДатаПрихода]");
				Рез=глОтправитьСообщение(Заголовок,ТекстСообщения,спр.ТекущийЭлемент(),"Email");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	

	
КонецПроцедуры

Процедура ПриЗаписи()
	стар_ПриЗаписи();
КонецПроцедуры

Процедура УдалениеТаблицыНаОсновании(ДокОснование)
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Если ДокументОснованиеТабл=ДокОснование Тогда
			УдалитьСтроку();
			ВыбратьСтроки();
		КонецЕсли;
	КонецЦикла;              		
КонецПроцедуры

//======================================================================
Функция ПолучитьСтароеПодтверждено(п_Заказ,п_Товар,п_ПоСчету)
	ИТ=СоздатьОбъект("ИндексированнаяТаблица");
	ИТ.Загрузить(м_ТабличнаяЧасть);
	ИТ.ДобавитьИндекс("иТоварДок","*Товар,*ДокументОснованиеТабл,*ПоСчету");
	
	Сз=СоздатьОбъект("СписокЗначений");
	Сз.ДобавитьЗначение(п_Товар,"Товар");
	Сз.ДобавитьЗначение(п_Заказ,"ДокументОснованиеТабл");
	Сз.ДобавитьЗначение(п_ПоСчету,"ПоСчету");
		
	Если ИТ.НайтиСтроку("иТоварДок",Сз,,1)<>0 Тогда
		Возврат ИТ.Подтверждено;
	Иначе
		Возврат (-1);
	КонецЕсли;
	
	
КонецФункции // ПолучитьСтароеПодтверждено

Функция ПолучитьСтароеЦенаПодтв(п_Заказ,п_Товар,п_ПоСчету)
	ИТ=СоздатьОбъект("ИндексированнаяТаблица");
	ИТ.Загрузить(м_ТабличнаяЧасть);
	ИТ.ДобавитьИндекс("иТоварДок","*Товар,*ДокументОснованиеТабл,*ПоСчету");
	
	Сз=СоздатьОбъект("СписокЗначений");
	Сз.ДобавитьЗначение(п_Товар,"Товар");
	Сз.ДобавитьЗначение(п_Заказ,"ДокументОснованиеТабл");
	Сз.ДобавитьЗначение(п_ПоСчету,"ПоСчету");
		
	Если ИТ.НайтиСтроку("иТоварДок",Сз,,1)<>0 Тогда
		Возврат ИТ.ЦенаПодтв;
	Иначе
		Возврат (-1);
	КонецЕсли;
	
	
КонецФункции // ПолучитьСтароеПодтверждено

Процедура ЗаполнениеТаблицыНаОсновании(ДокОснование)
	ДокОснование.ВыбратьСтроки();
	Пока ДокОснование.ПолучитьСтроку()=1 Цикл
		//НоваяСтрока(); 			
		//СрокПоставки=ДокОснование.СрокПоставки;
		//Товар=ДокОснование.Товар;
		//Цена=ДокОснование.Цена;
		//Количество=ДокОснование.Подтверждено;
		//КодПоставщика=Товар.КодПоставщика;
		////УпакКол=-ДокОснование.УпакКол;
		//Сумма=Цена*Количество;
		//НДС=ДокОснование.НДС;
		//ДокументОснованиеТабл=ДокОснование;
		//
		//Подтверждено=ДокОснование.Подтверждено;
		//АвтоСкидка=ДокОснование.АвтоСкидка;
		//МанСкидка=ДокОснование.МанСкидка;
		
			НоваяСтрока();
			Товар = ДокОснование.Товар;
			ДокументОснованиеТабл = ДокОснование;
			
			Температура=ДокОснование.Товар.МестоХранения;	
			Количество = ДокОснование.Количество;
			Цена = ДокОснование.Цена;

//			ЦенаПодтв = ПолучитьСтароеЦенаПодтв(ДокументОснованиеТабл,Товар,ПоСчету);
//			Если  ЦенаПодтв<0 Тогда
				ЦенаПодтв = ДокОснование.ЦенаСоСкидкой;
//			КонецЕсли;
			
		//	ЦенаПодтв=Цена;
			Сумма = ДокОснование.Сумма;
			НДС = ДокОснование.НДС;
			СрокПоставки = ДокОснование.СрокПоставки;
			УпакКол = ДокОснование.УпакКол;
			КодПоставщика = ДокОснование.КодПоставщика;
			ТовКод = ДокОснование.ТовКод;
			ПоСпецЗаказу = ДокОснование.ПоСпецЗаказу;
			ПоСчету = ДокОснование.ПоСчету;
			
//			Подтверждено = ДокОснование.Подтверждено;
			
			Подтверждено = ПолучитьСтароеПодтверждено(ДокументОснованиеТабл,Товар,ПоСчету);
			Если  Подтверждено<0 Тогда
				Подтверждено = ДокОснование.Подтверждено;
			КонецЕсли;
//			СуммаПодтв=Цена*Подтверждено;
			СуммаПодтв=ЦенаПодтв*Подтверждено;
	
			
			АвтоСкидка = ДокОснование.АвтоСкидка;
			МанСкидка = ДокОснование.МанСкидка;
			МанСкидкаДокумент = ДокОснование.МанСкидкаДокумент;
			ЦенаСоСкидкой = ДокОснование.ЦенаСоСкидкой;
			СуммаСоСкидкой = ДокОснование.Сумма;
					
	КонецЦикла;         		

КонецПроцедуры

Процедура ЗаполнениеШапки(ДокОснование)
//	ЗаполнитьШапкуНаОсн(Контекст,ДокОснование);  
//	ДокументОснование=ДокОснование;
	//ДатаДок=РабочаяДата();
	
	//НеделяОтгрузки=НомерНеделиГода(ДатаОтгрузки);
	//Склад=ДокОснование.Склад;
	//Валюта=ДокОснование.Валюта;
	//Дата_Курса=ДокОснование.Дата_Курса;
	//Курс=ДокОснование.Курс;
	//Валюта_Прежн=Валюта;
	//Курс_Прежн=Курс;    		
	//Клиент=ДокОснование.Клиент; 
	//ОснСрокПоставки=ДокОснование.ОснСрокПоставки;
	
	ДокументОснование = ДокОснование;
	Склад = ДокОснование.Склад;
	Клиент = ДокОснование.Клиент;
	КлГруппа = ДокОснование.КлГруппа;
	Валюта = ДокОснование.Валюта;
	Дата_курса = ДокОснование.Дата_курса;
	Курс = ДокОснование.Курс;
	ОснСрокПоставки = ДокОснование.ОснСрокПоставки;
	СоСрокаРеализации = ДокОснование.СоСрокаРеализации;
	Единица = ДокОснование.Единица;
	ПланВремяДоставки = ДокОснование.ПланВремяДоставки;
	СкидкаПоставщику = ДокОснование.СкидкаПоставщику;
	ДатаОтгрузки = ДокОснование.ДатаОтгрузки;
	НеделяОтгрузки = глНомерНеделиЕвро(ДатаОтгрузки);
	фДоставкаКлиента = ДокОснование.фДоставкаКлиента;
	СтавкаНДС = ДокОснование.СтавкаНДС;
	Инкотермс1=Клиент.Инкотермс;
КонецПроцедуры

Процедура стар_ВводНаОсновании(ДокОснование)
	Если ДокОснование.Вид() = "ЗаказПоставщику" Тогда
		ЗаполнениеШапки(ДокОснование);
		ЗаполнениеТаблицыНаОсновании(ДокОснование);
	КонецЕсли;	
КонецПроцедуры
Процедура ВводНаОсновании(ДокОснование)
	стар_ВводНаОсновании(ДокОснование);
КонецПроцедуры	

Процедура кнПомощь()
	Помощь = СоздатьОбъект("Общие.Помощь");
	Помощь.Открыть("Документ.ОжидаемаяПоставка");
КонецПроцедуры

//======================================================================
Процедура кнИзмЦенуГр()
	л_стр=НомерСтроки;
	л_Товар=Товар;
	л_Число=Цена;
	
	Если ВвестиЧисло(л_Число,"Для товара: "+ТовКод+", новая цена:",17,5,)=1 Тогда
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Если Товар=л_Товар Тогда
				ЦенаПодтв=л_Число;
				СуммаПодтв=Подтверждено*ЦенаПодтв;
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	

КонецПроцедуры // кнИзмЦенуГр

ДатаС1=НачМесяца(ДобавитьМесяц(РабочаяДата(),-1));
ДатаПо1=ТекущаяДата();
старНомерРейса=НомерРейса;

таблПредложений.НоваяКолонка("ТекущийЭлемент");
таблПредложений.ВидимостьКолонки("ТекущийЭлемент",0);
таблПредложений.НоваяКолонка("Наименование",,,,"Nosaukums",15);
таблПредложений.НоваяКолонка("Файл",,,,"Fails",15);
таблПредложений.НоваяКолонка("ВидФайла",,,,"Faila tips",6); 
таблПредложений.НоваяКолонка("ДатаПредл",,,,"Datums",6); 
таблПредложений.НоваяКолонка("Автор",,,,"Autors",8); 

м_ТабличнаяЧасть=СоздатьОбъект("ТаблицаЗначений");
п_старДатаПрихода=ДатаПрихода;
ПроцСкидки=ПроцентСкидки;