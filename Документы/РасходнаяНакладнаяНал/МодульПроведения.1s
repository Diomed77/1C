
//***************Модуль конвертирован с версии 7.0***************
//--------------------------------------------
Перем ТабБлюда;
Перем РегОстаткиТоваров;  
Перем РегПарт;
Перем РегВзаиморасчетыПок;  
Перем КалькКарт;
Перем НетКарты;
Перем ПромЗамена;                   
Перем Парт;
Перем НачальноеБлюдо, Найден;
Перем НСтрПром; 
Перем СписыватьТоварВНоль;

Процедура семЗаполнитьСрокРеализ()
	рег = СоздатьОбъект( "Регистр.ПартииТоваров" );
	рег.ВыбратьДвиженияДокумента( ТекущийДокумент() );
	НомСтр = 1;
	пДата = Дата( 0 );
	МинСрокРеализ = ДатаДок+2;
	Пока рег.ПолучитьДвижение() = 1 Цикл
		Если (рег.СрокРеализации<(МинСрокРеализ)) И (Склад.НеОтгружатьПросроченныйТовар = 1)  Тогда
			НеПроводить(Контекст,"В строке "+рег.НомерСтроки()+" отгружается товар со сроком реализ. "+рег.СрокРеализации+" мин. допуст. срок: "+МинСрокРеализ);
		КонецЕсли;
		Если НомСтр <> рег.НомерСтроки() Тогда
			ПолучитьСтрокуПоНомеру(НомСтр);
			УстановитьАтрибут("СрокРеализ",пДата);
			НомСтр = рег.НомерСтроки();
			пДата = Дата( 0 );
		КонецЕсли;
		Если ( Число(пДата) = 0 ) или ( пДата > рег.СрокРеализации ) Тогда
			пДата = рег.СрокРеализации;
		КонецЕсли;
	КонецЦикла; 
	ПолучитьСтрокуПоНомеру(НомСтр);
	УстановитьАтрибут("СрокРеализ",пДата);
КонецПроцедуры

Функция УстановитьСостояние(Сост,Док)
	спрСост=СоздатьОбъект("Справочник.СостоянияДокументов");
	спрСост.НайтиПоНаименованию(Док.Вид()); 
	спрСост.ИспользоватьРодителя(спрСост.ТекущийЭлемент());
	спрСост.НайтиПоНаименованию(Сост,1);
	Возврат спрСост.ТекущийЭлемент();
КонецФункции

Функция ГаситьРегистр(п_Док)
	Рег=СоздатьОбъект("Регистр.СостояниеДокумента");
	Рег.УстановитьЗначениеФильтра("Док",п_Док,1);
	табл=СоздатьОбъект("ТаблицаЗначений");
	Рег.ВыгрузитьИтоги(табл,1,1);
//	табл.ВыбратьСтроку();
	табл.ВыбратьСтроки();
	Пока табл.ПолучитьСтроку() = 1 Цикл
		Регистр.СостояниеДокумента.Док=табл.Док;
		Регистр.СостояниеДокумента.Пользователь=табл.Пользователь;
		Регистр.СостояниеДокумента.Количество=табл.Количество;
		Регистр.СостояниеДокумента.СостояниеДок=табл.СостояниеДок;
		Регистр.СостояниеДокумента.ДвижениеРасходВыполнить();
	КонецЦикла;	
КонецФункции


//PR*************************************************
Функция БлюдоТолькоДляСписания(Блюдо,ПромСклад)
	
	Если Константа.ВключатьКонтрольПроизводстваБлюд.Получить(ДатаДок)<>Да Тогда
		Возврат 0;
	КонецЕсли;
	
	спр=СоздатьОбъект("Справочник.МестаНеПроизводстваБлюд");
	спр.ИспользоватьВладельца(Блюдо);
	рез=спр.НайтиПоРеквизиту("Склад",ПромСклад,0);
	
	Возврат рез;
КонецФункции

//**АУ************************************************
Процедура ПеремещениеПоПартиям(ТУ,ПромТовар,СписываемКол,Владелец,Режим,РасхЦена=0,РасхНДС=0,РасхНП=0,КолБлюд=0)
	НадоСписать=Окр(СписываемКол,3);
	Фирма.ИспользоватьДату(ДатаДок);
	//партии и склады   
	
	
	Если (ТУ="Упр") Тогда
		Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета.Выбран()=0 Тогда
			Возврат ; // учет Упр. не ведется
		КонецЕсли;
	ИначеЕсли (ТУ="Фин") Тогда
		Если Фирма.МетодРасчетаСебестоимостиФинансовогоУчета.Выбран()=0 Тогда
			Возврат ; // учет Фин. не ведется
		КонецЕсли;
	Иначе
		Сообщить("Неверно задан тип учета партий товаров по "+ТекущийДокумент());
		Возврат ;
	КонецЕсли;                               
	Если ТУ="Фин" Тогда
		ПромФирма=Фирма;
	Иначе
		ПромФирма=Фирма;
	КонецЕсли;	
	
	ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");
	итСчетаТовары=СоздатьОбъект("ИндексированнаяТаблица");
	итСчетаТовары.НоваяКолонка("СчетСсылка");
	итСчетаТовары.НоваяКолонка("Товар");
	итСчетаТовары.НоваяКолонка("МинСрокРеализ");
	итСчетаТовары.НоваяКолонка("МаксСрокРеализ");

	итКомплТовары=СоздатьОбъект("ИндексированнаяТаблица");
	итКомплТовары.НоваяКолонка("СчетСсылка");
	итКомплТовары.НоваяКолонка("Товар");
	итКомплТовары.НоваяКолонка("CрокРеализ");

	// склпарт
	//составить список складов 
	Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
		Если глЕстьРеквизитМнЧ("СкладТ",Вид())=1 Тогда
			ТекстЗапроса="SELECT DISTINCT $РасходнаяНакладнаяСтроки.СкладТ [СкладТ $Справочник.МестаХранения]
			|			  FROM $ДокументСтроки."+Вид()+" AS РасходнаяНакладнаяСтроки  (NOLOCK)
			|			  WHERE IDDOC = :ТекДок AND $РасходнаяНакладнаяСтроки.СкладТ <> $ПустойИД";
			
			ЗапросСКЛ.УстановитьТекстовыйПараметр("ТекДок",ТекущийДокумент());
			тСклады=ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса);
			Если тСклады.КоличествоСтрок()<=1 Тогда
				ПромСклад=Склад;
			Иначе
				ПромСклад=СоздатьОбъект("СписокЗначений");
				тСклады.Выгрузить(ПромСклад,,,"СкладТ");
			КонецЕсли;
		Иначе
			ПромСклад=Склад;
		КонецЕсли;
	Иначе
		ПромСклад=СоздатьОбъект("Справочник.МестаХранения");
	КонецЕсли;
	
	
	Если глЕстьРеквизитМнЧ("Счет",Вид())=1 Тогда
		ТекстЗапроса = "SELECT $СчетСтроки.Товар [Товар $Справочник.Номенклатура]
		|						, СчетСтроки.IDDOC [СчетСсылка $Документ.Счет]
		|						, NullIf($СчетСтроки.МинСрокРеализ, '17530101') МинСрокРеализ
		|						, NullIf($СчетСтроки.МаксСрокРеализ, '17530101') МаксСрокРеализ
		|				FROM $ДокументСтроки.Счет AS СчетСтроки With (NOLOCK)
		|				INNER JOIN $ДокументСтроки."+Вид()+" AS ДокС  (NOLOCK) ON $ДокС.Счет = СчетСтроки.IDDOC AND  $ДокС.Товар = $СчетСтроки.Товар  AND  ДокС.IDDOC = :ТекДок
		|";
		ЗапросСКЛ.УстановитьТекстовыйПараметр("ТекДок",ТекущийДокумент());
		
		ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итСчетаТовары);


		ТекстЗапроса = "
		|				SELECT $КомплектацияЗаявкиФактСтроки.Товар [Товар $Справочник.Номенклатура]
		|					   ,$КомплектацияЗаявкиФакт.ПоСчету [СчетСсылка $Документ.Счет]
		|					   , NullIf($КомплектацияЗаявкиФактСтроки.СрокРеализ, '17530101') СрокРеализ
		|					   , NullIf($КомплектацияЗаявкиФактСтроки.СрокРеализДоп, '17530101') СрокРеализДоп
		|					   , $КомплектацияЗаявкиФактСтроки.КоличествоФактБазЕдСрокРеализ СрокРеализКол
		|					   , $КомплектацияЗаявкиФактСтроки.КоличествоФактБазЕдСрокРеализДоп СрокРеализДопКол
		|					 FROM $ДокументСтроки.КомплектацияЗаявкиФакт AS КомплектацияЗаявкиФактСтроки With (NOLOCK)
		|				 	 INNER JOIN $Документ.КомплектацияЗаявкиФакт AS КомплектацияЗаявкиФакт With (NOLOCK) ON КомплектацияЗаявкиФактСтроки.IDDOC = КомплектацияЗаявкиФакт.IDDOC
		|					 INNER JOIN $ДокументСтроки."+Вид()+" AS ДокС  (NOLOCK) ON $ДокС.Счет = $КомплектацияЗаявкиФакт.ПоСчету AND  $ДокС.Товар = $КомплектацияЗаявкиФактСтроки.Товар  AND  ДокС.IDDOC = :ТекДок
		|					  WHERE $КомплектацияЗаявкиФактСтроки.ТоварЗамена = $ПустойИД
		|";
		ЗапросСКЛ.УстановитьТекстовыйПараметр("ТекДок",ТекущийДокумент());
		
		ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса,итКомплТовары);
		
		
	КонецЕсли;

	итСчетаТовары.ДобавитьИндекс("иСчетТовар","*СчетСсылка,*Товар");
	итКомплТовары.ДобавитьИндекс("иСчетТовар","*СчетСсылка,*Товар");
	                                                           
	сзКлюч=СоздатьОбъект("СписокЗначений");        
	
	РегПарт.УстановитьФильтр(ПромФирма,ПромТовар,,,,ПромСклад);
	РегПарт.ВыгрузитьИтоги(Парт,1,1);
	Парт.НоваяКолонка("Приоритет","Число",1);
	Парт.НоваяКолонка("Количество","Число",15,3);

	Если ((ТУ="Фин") И (Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.FIFO)) Тогда
		Парт.Сортировать("+СрокРеализации,-Статус,+ПрихДокумент",1);                         
	ИначеЕсли ((ТУ="Фин") И (Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO)) Тогда 
		Парт.Сортировать("-СрокРеализации,-Статус,-ПрихДокумент",1);
	ИначеЕсли ((ТУ="Фин") И (Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему)) Тогда	
		Парт.Сортировать("-Статус,+ПрихДокумент",1);
	ИначеЕсли ((ТУ="Упр") И (Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.FIFO)) Тогда
	//	Парт.Сортировать("+СрокРеализации,-Статус,+ПрихДокумент",1);
		Если ДатаДок>='01.12.18' Тогда
			//списываем в первую очередь ту партию со сроком, которая подходит под мин. срок реализации, указанный в заявке
			сзКлюч.УдалитьВсе();
			сзКлюч.ДобавитьЗначение(Счет);
			сзКлюч.ДобавитьЗначение(Товар);
			
			итСчетаТовары.Подмножество(сзКлюч,2,"иСчетТовар");				
			//итСчетаТовары.Показать("иСчетТовар");
			итСчетаТовары.ВыбратьСтроки("иСчетТовар");
			Если итСчетаТовары.ПолучитьСтроку("иСчетТовар")>0 Тогда
				Парт.ВыбратьСтроки();
				Пока Парт.ПолучитьСтроку() > 0 Цикл
					Если (Парт.СрокРеализации>=итСчетаТовары.МинСрокРеализ) Тогда 
						Парт.Приоритет=Парт.Приоритет-1;									
					Иначе
						Парт.Приоритет=Парт.Приоритет+1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			//меняем приоритет списания согласно факт сроку реализации, который был использован
			итКомплТовары.Подмножество(сзКлюч,2,"иСчетТовар");
			итКомплТовары.ВыбратьСтроки("иСчетТовар");
			Если итКомплТовары.ПолучитьСтроку("иСчетТовар")>0 Тогда
				Парт.ВыбратьСтроки();
				Пока Парт.ПолучитьСтроку() > 0 Цикл
					Если (Парт.СрокРеализации=итКомплТовары.СрокРеализ)  Тогда 
						Парт.Приоритет=Парт.Приоритет-2;
						Парт.Количество=итКомплТовары.СрокРеализКол;
					ИначеЕсли (Парт.СрокРеализации=итКомплТовары.СрокРеализДоп) Тогда 
						Парт.Приоритет=Парт.Приоритет-1;
						Парт.Количество=итКомплТовары.СрокРеализДопКол;
					ИначеЕсли Парт.СрокРеализации <= ДатаДок Тогда
						//просроченные партии со сроком списываем в последнюю очередь
						Парт.Приоритет=99;
						Если Парт.ОстатокТовара>0 Тогда
//							Сообщить(Шаблон("Для товара [Товар.Код] [Товар] будет списан срок реализации [Парт.СрокРеализации] в кол-ве [Парт.ОстатокТовара] [Товар.БазоваяЕдиницаИзмерения]"));
						КонецЕсли;
					Иначе
						Парт.Приоритет=Парт.Приоритет+1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			
			Парт.Сортировать("Приоритет,СрокРеализации,ПрихДокумент");
		Иначе
			Парт.Сортировать("+СрокРеализации,-Статус,+ПрихДокумент");			
		КонецЕсли;


	ИначеЕсли ((ТУ="Упр") И (Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO)) Тогда
		Парт.Сортировать("-СрокРеализации,-Статус,-ПрихДокумент",1);
	ИначеЕсли ((ТУ="Упр") И (Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему)) Тогда	
		Парт.Сортировать("-Статус,+ПрихДокумент",1);                            
	КонецЕсли;
	
	Парт.ВыбратьСтроки();
	Пока Парт.ПолучитьСтроку()=1 Цикл
		Если НадоСписать=0 Тогда
			Прервать;
		КонецЕсли; 
		//************************Завьялов А.*************** 
		//*****Может быть ситуация когда списываемое количество превышает остаток и при этом находится партия с которой
		//*****происходит списание в минус по партиям. Никаких сообщений при этом невыдается т.к. требуемое к списанию
		//*****количество есть на остатке по регистру остатки товара, т.е. мы емеем разницу между регистром партий товаров
		//*****и регистром остатков товаров.
		//*****данный кусок кода недает провести документ в такой ситуации, 
		//*****конечно если нет разрешения на отрицательные остатки.
		//Если (НадоСписать > РегПарт.СводныйОстаток(,ПромТовар,,,,,,,"ОстатокТовара"))
		//и (глРазрОтрицОстатки = Перечисление.Булево.Нет) Тогда 
		//	    ОстатокПоПартиям = РегПарт.СводныйОстаток(,ПромТовар,,,,,,,"ОстатокТовара");
		//		глСписокТоваров.НоваяСтрока();
		//		глСписокТоваров.Склад=Склад;
		//		глСписокТоваров.Товар=ПромТовар;   
		//		ПромОстаток = (НадоСписать - ОстатокПоПартиям);
		//		глСписокТоваров.Количество=ПромОстаток;
		//		глСписокТоваров.Остаток=РегПарт.СводныйОстаток(,ПромТовар,,,,,,,"ОстатокТовара");
		//		Сообщить("Нехватает партионного количества! Необходимо: "+Строка(НадоСписать)+" Остаток: "+Строка(ОстатокПоПартиям)+" Нехватает: "+Строка(ПромОстаток));
		//	СтатусВозврата(0);
		//	Возврат;
		//КонецЕсли; 
		//************************Завьялов А.***************

		//PR док указанной даты стоял пропуск на списание партий взятых или отданных на реализацию в том случае когда списывается ингредиент
		Если ДатаДок<'01.12.10' Тогда
			Если (Режим="СписатьИнгр") и ((Парт.Статус=Отданный) или (Парт.Статус=Принятый)) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;		
		
		//*****
		ТабБлюда.ВыбратьСтроки();
		Пока ТабБлюда.ПолучитьСтроку()=1 Цикл
			Если (ТабБлюда.Контр=Парт.Контрагент) и (ТабБлюда.ПрихДок=Парт.ПрихДокумент) и (ТабБлюда.СрокРеализации = Парт.СрокРеализации) и (ТабБлюда.Партия = Парт.Партия) и (ТабБлюда.Товар=ПромТовар) и  (ТабБлюда.Статус=Парт.Статус) Тогда
				Парт.Стоимость=Парт.Стоимость-ТабБлюда.СтоимБезНДС;
				Парт.ПродСтоимость=Парт.ПродСтоимость-ТабБлюда.ПродСтоимБезНДС;       
				Парт.НДС=Парт.НДС-ТабБлюда.НДС;
				Парт.ОстатокТовара=Парт.ОстатокТовара-ТабБлюда.Остаток;
			КонецЕсли;
		КонецЦикла;   
		
		Если Парт.ОстатокТовара <= 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		//*****
		
		ТабБлюда.НоваяСтрока(); 
		ТабБлюда.Фирма=ПромФирма;
		ТабБлюда.Товар=ПромТовар; 
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		ТабБлюда.Партия = Парт.Партия;
		ТабБлюда.СрокРеализации = Парт.СрокРеализации;             
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		ТабБлюда.ТипТовара=ПромТовар.ВидТовара; 
		ТабБлюда.БлюдоВладелец=Владелец; 
		//		Если ПромТовар.ВидТовара=Перечисление.ВидыТоваров.Блюдо Тогда
		//			ТабБлюда.Статус=Произведенный;
		//		Иначе
		//			ТабБлюда.Статус=Парт.Статус;
		//		КонецЕсли;         
		
		ТабБлюда.Статус=Парт.Статус;
		
		ТабБлюда.Контр=Парт.Контрагент;
		ТабБлюда.ПрихДок=Парт.ПрихДокумент;
		
		ТабБлюда.ФлагУчета=1;
		
		Если Режим="ПродажаГотовогоБлюда" Тогда
			
			Если ПромТовар<>Товар Тогда //Если списывается блюдо для производства другого блюда
				ТабБлюда.КодОпер=СписаниеНаПроизводcтвоБлюда;
				ТабБлюда.ФлагУчета=33;
			Иначе
				ТабБлюда.КодОпер=ПродажаБлюда;
			КонецЕсли;
			
		ИначеЕсли Режим="ПродажаИнгр" Тогда
			ТабБлюда.КодОпер=ПродажаТовара;
		Иначе
			ТабБлюда.КодОпер=СписаниеНаПроизводcтвоБлюда;
			ТабБлюда.ФлагУчета=33;
		КонецЕсли;
		
		ОтатокПартииКол=Парт.ОстатокТовара; 
		ОтатокПартииВал=Парт.Стоимость;
		ОтатокПартииПродВал=Парт.ПродСтоимость;
		ОтатокПартииНДС=Парт.НДС;
		Если ОтатокПартииКол<0 Тогда  
			Продолжить;
		КонецЕсли;
		
		Если ОтатокПартииКол>=НадоСписать Тогда
			СписатьКол=НадоСписать;
		Иначе
			СписатьКол=ОтатокПартииКол;
		КонецЕсли;
		ТабБлюда.Остаток=СписатьКол;
		Если ОтатокПартииКол=0 Тогда
			ТабБлюда.СтоимБезНДС=ОтатокПартииВал;
			ТабБлюда.ПродСтоимБезНДС=ОтатокПартииПродВал;       
			ТабБлюда.НДС=ОтатокПартииНДС;
		Иначе
			ТабБлюда.СтоимБезНДС=ОтатокПартииВал/ОтатокПартииКол*СписатьКол;
			ТабБлюда.ПродСтоимБезНДС=ОтатокПартииПродВал/ОтатокПартииКол*СписатьКол;
			ТабБлюда.НДС=ОтатокПартииНДС/ОтатокПартииКол*СписатьКол; 
			Если (Режим="ПродажаИнгр") или (Режим="ПродажаГотовогоБлюда") Тогда
				ТабБлюда.ФлагУчета=1;
				
				Если ПромТовар<>Товар Тогда //Если списывается блюдо для производства другого блюда
					ТабБлюда.ФлагУчета=34;
				КонецЕсли;
				
				ТабБлюда.Оборот=РасхЦена*СписатьКол;
				ТабБлюда.НДСРасхода=РасхНДС/СписываемКол*СписатьКол;
				ТабБлюда.НП=РасхНП/СписываемКол*СписатьКол;
			КонецЕсли;
		КонецЕсли;
		НадоСписать=НадоСписать-СписатьКол;
	КонецЦикла;
	//----------------------------------------------------------------------------
	Если (НадоСписать>0) Тогда //И ((ПромТовар.ВидТовара=Перечисление.ВидыТоваров.Ингредиент) ИЛИ (ПромТовар.ВидТовара=Перечисление.ВидыТоваров.Товар)) Тогда   
		ТабБлюда.НоваяСтрока(); 
		ТабБлюда.Фирма=ПромФирма;
		ТабБлюда.Товар=ПромТовар;
		ТабБлюда.ТипТовара=ПромТовар.ВидТовара; 
		ТабБлюда.БлюдоВладелец=Владелец;
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		ТабБлюда.Партия = "";
		ТабБлюда.СрокРеализации = "";
		Сообщить ("1При проведении партий товара по "+ТекущийДокумент()+" от "+ДатаДок+" по товару "
		+СокрЛП(ПромТовар)+" не распределилось по партиям "+НадоСписать+" "+ПромТовар.БазоваяЕдиницаИзмерения);
		
		Если глНуженСписокТоваров=1 Тогда
			глСписокТоваров.НоваяСтрока();
			глСписокТоваров.Склад=ПромСклад;
			глСписокТоваров.Товар=ПромТовар;
			Если (Владелец.ВидТовара=Перечисление.ВидыТоваров.Блюдо) И (Владелец<>ПромТовар) Тогда
				глСписокТоваров.Блюдо=Владелец;
				глСписокТоваров.КолБлюд=КолБлюд;
			КонецЕсли;
			глСписокТоваров.Количество=НадоСписать;
			глСписокТоваров.Остаток=0;
		КонецЕсли;
		
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		ТабБлюда.Статус=Купленный;
		ТабБлюда.Контр=СоздатьОбъект("Справочник.Контрагенты");
		ТабБлюда.ПрихДок=ТекущийДокумент();
		ТабБлюда.КодОпер=?(Режим="СписатьИнгр",СписаниеНаПроизводcтвоБлюда,ПродажаТовара); //тут нужно смотреть, если продажа ингр, то статус продажа
		ТабБлюда.ФлагУчета=66; //Флаг для отловки отрицательных остатков
		ТабБлюда.Остаток=НадоСписать;
		ПроцНДС=ПроцентНДС(Товар.СтавкаНДС);
		ТабБлюда.СтоимБезНДС=ПромТовар.ЦенаПриобретения*КурсДляВалюты(ПромТовар.ВалютаЗакупки,ДатаДок)*НадоСписать;
		ТабБлюда.ПродСтоимБезНДС=ПромТовар.ЦенаПриобретения*КурсДляВалюты(ПромТовар.ВалютаЗакупки,ДатаДок)*НадоСписать;
		ТабБлюда.НДС=(ТабБлюда.СтоимБезНДС*ПроцНДС/100)*НадоСписать;
		
		ТабБлюда.Оборот=РасхЦена*НадоСписать;
		ТабБлюда.НДСРасхода=РасхНДС/СписываемКол*НадоСписать;
		
	КонецЕсли; 
КонецПроцедуры
//**АУ************************************************
Процедура ПроверкаВложенныхБлюд(Бл)
	Найден=0;
	КалькК=СоздатьОбъект("Документ.КалькуляционнаяКарта");
	СписокБлюд=СоздатьОбъект("СписокЗначений");
	КалькК=ПолучитьКалькуляцию(ДатаДок,Бл,ТекущийДокумент()); 
	Если КалькК=0 Тогда
		Найден=2;
		Возврат;
	КонецЕсли;
	КалькК.ВыбратьСтроки();
	Пока КалькК.ПолучитьСтроку()=1 Цикл
		Если КалькК.Ингредиент.ВидТовара=Перечисление.ВидыТоваров.Блюдо Тогда
			СписокБлюд.ДобавитьЗначение(КалькК.Ингредиент.ТекущийЭлемент(),);
		КонецЕсли;	
	КонецЦикла;			
	Если СписокБлюд.НайтиЗначение(НачальноеБлюдо)>0 Тогда
		Найден=1;
		Возврат;
	Иначе
		Для Н=1 По СписокБлюд.РазмерСписка() Цикл
			Если Найден=1 Тогда
				Возврат;
			Иначе
				ПроверкаВложенныхБлюд(СписокБлюд.ПолучитьЗначение(Н));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

//**АУ************************************************
Функция СписатьИнгредиент(Товар,Количество,Единица,Коэффициент,БлюдоВладелец,КодОп,Сумма=0,НДС=0,НП=0,КолБлюд=0)
	Если Количество<=0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ПустоеЗначение(СкладТ)=0 Тогда
		ПромСклад = СкладТ;
	Иначе
		ПромСклад = Склад;
	КонецЕсли;
	
	НужноСписать = Количество*Коэффициент;
	
	Если ТипУчета<Фин Тогда
		ПромОстаток=РегОстаткиТоваров.СводныйОстаток(Товар,ПромСклад,,"ОстатокТовара");
	Иначе
		ПромОстаток=РегПарт.СводныйОстаток(Фирма,Товар,,,,ПромСклад,"ОстатокТовара");   
	КонецЕсли;
	
	Если (ПромОстаток < Окр(Количество*Коэффициент,3)) Тогда 
		
		Если (КодОп="ПродажаИнгр") И (СписыватьТоварВНоль=1) И (Единица.Единица = Перечисление.ЕдиницыИзмерения.Килограмм) Тогда
			НужноСписать = Макс(ПромОстаток,0);
			Сообщить("2 На складе нет нужного количества Товара "+Товар.Код+" "+Товар.Наименование+" нужно: "+Количество*Коэффициент+"
						|	Будет списано только оставшееся кол-во: "+НужноСписать);
		ИначеЕсли глРаботаетКассовыйОтчет = 1 Тогда  
			Сообщить("2На складе нет нужного количества товара "+Товар.Код+" "+Товар.Наименование+" нужно: "+Количество*Коэффициент);
		//	НеПроводить(Контекст,"На складе осталось "+ПромОстаток+" "+Товар.БазоваяЕдиницаИзмерения);
			Если глНуженСписокТоваров=1 Тогда
				глСписокТоваров.НоваяСтрока();
				глСписокТоваров.Склад=ПромСклад;
				глСписокТоваров.Товар=Товар;   
				Если ПромОстаток < 0  Тогда
					ПромОстаток = 0;	
				КонецЕсли;
				Если (Количество*Коэффициент) > ПромОстаток Тогда
					ПромОстаток = Количество*Коэффициент - ПромОстаток;
					глСписокТоваров.Количество=ПромОстаток;
				Иначе
					глСписокТоваров.Количество=Количество*Коэффициент;
				КонецЕсли;
				глСписокТоваров.Остаток=ПромОстаток;
			КонецЕсли;
		Иначе
			Если глРазрОтрицОстатки=Перечисление.Булево.Нет Тогда   
				Сообщить("3На складе нет нужного количества товара "+Товар.Код+" "+Товар.Наименование+" нужно: "+Количество*Коэффициент);
				НеПроводить(Контекст,"На складе осталось "+ПромОстаток+" "+Товар.БазоваяЕдиницаИзмерения);
				Если глНуженСписокТоваров=1 Тогда
					глСписокТоваров.НоваяСтрока();
					глСписокТоваров.Склад=ПромСклад;
					глСписокТоваров.Товар=Товар;
					Если (Количество*Коэффициент) > ПромОстаток Тогда  
						ПромОстаток = Количество*Коэффициент - ПромОстаток;
						глСписокТоваров.Количество=ПромОстаток;
					Иначе
						глСписокТоваров.Количество=Количество*Коэффициент;
					КонецЕсли;
					глСписокТоваров.Остаток=ПромОстаток;
				КонецЕсли;
				Возврат 0;				
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	Регистр.ОстаткиТоваров.Фирма=Фирма;
	Регистр.ОстаткиТоваров.Товар=Товар;
	Регистр.ОстаткиТоваров.Склад=ПромСклад;
	Регистр.ОстаткиТоваров.ОстатокТовара=НужноСписать;
	Регистр.ОстаткиТоваров.ФлагУчета=2;
	
	Если БлюдоВладелец.ВидТовара<>Перечисление.ВидыТоваров.Блюдо Тогда
		Регистр.ОстаткиТоваров.Блюдо="";
	Иначе
		Регистр.ОстаткиТоваров.Блюдо=БлюдоВладелец;
	КонецЕсли;
	
	Если ТипУчета<Фин Тогда 
		Регистр.ОстаткиТоваров.ДвижениеРасходВыполнить();
		ПеремещениеПоПартиям("Упр",Товар,НужноСписать,БлюдоВладелец,КодОп,Сумма,НДС,НП,КолБлюд);
	КонецЕсли;
	//------------------------------------------------------------------------------
	Если ТипУчета>Упр Тогда 
		ПеремещениеПоПартиям("Фин",Товар,НужноСписать,БлюдоВладелец,КодОп,Сумма,НДС,НП,КолБлюд);
	КонецЕсли;
	Возврат 1;
КонецФункции
//**АУ************************************************
Функция СписатьЗамену(Товар,Количество,Единица,Коэффициент,БлюдоВладелец,КолБлюд=0)
	ЕстьЗамена=0;        
	СтатусВозвр=1; 
	Если ТипУчета<Фин Тогда
		ПромОстаток=РегОстаткиТоваров.СводныйОстаток(Товар,Склад,,"ОстатокТовара");
	Иначе
		ПромОстаток=РегПарт.СводныйОстаток(Фирма,Товар,,,,Склад,"ОстатокТовара");   
	КонецЕсли;
	Если ((ПромОстаток < Окр(Количество*Коэффициент,3)) и (глРазрОтрицОстатки=Перечисление.Булево.Нет))Тогда
		Если (Окр(Количество*Коэффициент,3)-ПромОстаток)<=окр(Количество*Коэффициент,3)*Товар.ПроцентПогрешности/100 Тогда  //погрешность в минус
			Осталось=ПромОстаток;
			СписатьИнгредиент(Товар,Осталось,Единица,1,БлюдоВладелец,"СписатьИнгр",,,,КолБлюд); 
			Возврат 1;
		Иначе
			НеХватает=Окр(Количество*Коэффициент,3)-?(ПромОстаток>0,ПромОстаток,0);
			Осталось=ПромОстаток;
			СписатьИнгредиент(Товар,Осталось,Единица,1,БлюдоВладелец,"СписатьИнгр",,,,КолБлюд);
			Если ПромЗамена<>"" Тогда
				ДокумЗам=ПромЗамена;
				Если ДатаДок>='01.02.2010' Тогда
					НеХватает=Окр(НеХватает/Коэффициент,5);
				КонецЕсли;
				ДокумЗам.ВыбратьСтроки();
				Пока ДокумЗам.ПолучитьСтроку()=1 Цикл 
					
					ТовЗамены= ДокумЗам.Замена;
					//данная проверка действительна только с 01.07.07
					
					Если ПустоеЗначение(ДокумЗам.Единица)=0 Тогда
						Если (Единица.Единица<>ДокумЗам.Единица.Единица)  Тогда
							НехвЗамены=Окр(НеХватает/Коэффициент,5);
							Сообщить("В документе "+ДокумЗам+" у замены ингредиента "+ДокумЗам.Замена.Код+" "+ДокумЗам.Замена+" отличается единица замены <"+ДокумЗам.Единица+"> от калькуляции <"+Единица+"> !");	
							СтатусВозврата(0);
							Прервать;      
						Иначе
							Если ДатаДок<'01.02.2010' Тогда
								НеХватает=Окр(НеХватает/Коэффициент,5);
							КонецЕсли;
							//переводим обратно в единицу измерения, которая задана в документе калькуляции
						КонецЕсли;      
					Иначе
						Если ДатаДок<'01.02.2010' Тогда
							НеХватает=Окр(НеХватает/Коэффициент,5);
						КонецЕсли;
					КонецЕсли;                                   
					
					
					ЕстьЗамена=1;
					Если ТипУчета<Фин Тогда
						ПромОстаток=РегОстаткиТоваров.СводныйОстаток(ДокумЗам.Замена,Склад,,"ОстатокТовара");
					Иначе
						ПромОстаток=РегПарт.СводныйОстаток(Фирма,ДокумЗам.Замена,,,,Склад,"ОстатокТовара");   
					КонецЕсли;
					Если (ПромОстаток < Окр(НЕХватает*ДокумЗам.КоэффициентЗамены*ДокумЗам.Коэффициент,3)) Тогда
						ОстЗамены=?(ПромОстаток>0,ПромОстаток,0);
						НехвЗамены=НеХватает*ДокумЗам.КоэффициентЗамены*ДокумЗам.Коэффициент-ОстЗамены;
						СписатьИнгредиент(ДокумЗам.Замена,ОстЗамены,,1,БлюдоВладелец,"СписатьИнгр",,,,КолБлюд);
						ТовЗамены= ДокумЗам.Замена;
					Иначе
						СписатьИнгредиент(ДокумЗам.Замена,НеХватает*ДокумЗам.КоэффициентЗамены*ДокумЗам.Коэффициент,,1,БлюдоВладелец,"СписатьИнгр",,,,КолБлюд);
						НехвЗамены=0;
						Прервать;
					КонецЕсли;
					Попытка
						НеХватает=(НехвЗамены/(ДокумЗам.КоэффициентЗамены*ДокумЗам.Коэффициент));
					Исключение
						НеХватает=НехвЗамены;
					КонецПопытки;
				КонецЦикла;
				Если НехвЗамены>0 Тогда
					Сообщить("4Не хватает "+ТовЗамены.Код+" "+ТовЗамены+" "+НехвЗамены+" "+ТовЗамены.БазоваяЕдиницаИзмерения+" !"+" Блюдо: "+БлюдоВладелец.Код+" "+БлюдоВладелец.Наименование);
					Если глРазрОтрицОстатки=Перечисление.Булево.Нет Тогда
						СтатусВозвр=0;
					КонецЕсли;
					
					Если глНуженСписокТоваров=1 Тогда
						глСписокТоваров.НоваяСтрока();
						глСписокТоваров.Товар=ТовЗамены;
						глСписокТоваров.Склад=Склад;
						глСписокТоваров.Количество=НехвЗамены;
						глСписокТоваров.Остаток=ПромОстаток;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
		Если ЕстьЗамена=0 Тогда  
			Сообщить("5Не хватает "+Товар.Код+" "+Товар+" "+Нехватает+" "+Товар.БазоваяЕдиницаИзмерения+" !"+" Блюдо: "+БлюдоВладелец.Код+" "+БлюдоВладелец.Наименование);
			Если глРазрОтрицОстатки=Перечисление.Булево.Нет Тогда
				СтатусВозвр=0;
			КонецЕсли;        
			Если глНуженСписокТоваров=1 Тогда
				глСписокТоваров.НоваяСтрока(); 
				глСписокТоваров.Склад=Склад;
				глСписокТоваров.Товар=Товар;
				глСписокТоваров.Количество=Нехватает;
				глСписокТоваров.Остаток=ПромОстаток;
			КонецЕсли;
			
		КонецЕсли;
	Иначе 	// погрешность 
		Если (ПромОстаток-Окр(Количество*Коэффициент,3))>0 Тогда
			Если (ПромОстаток-Окр(Количество*Коэффициент,3))<=Окр(Количество*Коэффициент,3)*Товар.ПроцентПогрешности/100 Тогда
				Осталось=ПромОстаток;
				СписатьИнгредиент(Товар,Осталось,Единица,1,БлюдоВладелец,"СписатьИнгр",,,,КолБлюд);  
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
		//-------------------------------------
		СписатьИнгредиент(Товар,Количество,Единица,Коэффициент,БлюдоВладелец,"СписатьИнгр",,,,КолБлюд);
	КонецЕсли;                
	Возврат СтатусВозвр;
КонецФункции
//**АУ************************************************
Функция СписатьБлюдо(ПромТовар,ПромКоличество,ПромЕдиница,ПромКоэффициент,БлюдоВладелец,РасхЦена=0,РасхНДС=0,РасхНП=0)
	СтатусВозвр=1;     
	НедостающееКоличествоБлюд_=ПромКоличество*ПромКоэффициент;
	
	Если ПустоеЗначение(СкладТ)=0 Тогда
		ПромСклад = СкладТ;
	Иначе
		ПромСклад = Склад;
	КонецЕсли;
	
	ЕстьКалькуляция=0;
	ДокумКальк=ПолучитьКалькуляцию(ДатаДок,ПромТовар,ТекущийДокумент());
	Если ДокумКальк<>0 Тогда
		ЕстьКалькуляция=1;
	КонецЕсли;
	НетКарты=0;
	Если ЕстьКалькуляция=0 Тогда
		НетКарты=1;
		Сообщить( "Не обнаружена Калькуляционная карта на "+ПромТовар.Код+" "+ПромТовар.Наименование+" !!!");
		СтатусВозвр=0;
	КонецЕсли;
	КалькКарт=ДокумКальк;
	Коэф=ПромКоличество*ПромКоэффициент/ДокумКальк.КоличествоКалькуляции;
	ДокумКальк.ВыбратьСтроки();
	Пока ДокумКальк.ПолучитьСтроку()=1 Цикл 
		Если ДокумКальк.Ингредиент.ВидТовара=Перечисление.ВидыТоваров.Компонент  Тогда
			Продолжить;
		КонецЕсли;
		Если ДокумКальк.Замена.Выбран()=1 Тогда
			ПромЗамена=ДокумКальк.Замена;
		Иначе
			ПромЗамена="";
		КонецЕсли;	
		Если (ДокумКальк.Ингредиент.ВидТовара=Перечисление.ВидыТоваров.Ингредиент) ИЛИ (ДокумКальк.Ингредиент.ВидТовара=Перечисление.ВидыТоваров.Товар)  Тогда
			Если СписатьЗамену(ДокумКальк.Ингредиент,ДокумКальк.Количество*Коэф,ДокумКальк.Единица,ДокумКальк.Коэффициент,ПромТовар,НедостающееКоличествоБлюд_)=0 Тогда
				СтатусВозвр=0;;
			КонецЕсли;	
		ИначеЕсли ДокумКальк.Ингредиент.ВидТовара=Перечисление.ВидыТоваров.Блюдо Тогда 
			КоличествоВложенногоБлюда=Окр(ДокумКальк.Количество*Коэф,3);
			Если ТипУчета<Фин Тогда
				//РегОстаткиТоваров.Товар=ДокумКальк.Ингредиент;
				//РегОстаткиТоваров.ОстаткиПолучить(); 
				ЕстьОстатокБлюда=РегОстаткиТоваров.СводныйОстаток(ДокумКальк.Ингредиент,ПромСклад,,"ОстатокТовара");
			Иначе
				ЕстьОстатокБлюда=РегПарт.СводныйОстаток(Фирма,ДокумКальк.Ингредиент,,,,ПромСклад,"ОстатокТовара");   
			КонецЕсли;
			
			Если (ЕстьОстатокБлюда < КоличествоВложенногоБлюда) Тогда //Нет нужного количества готовых блюд 
				Если ЕстьОстатокБлюда<>0 Тогда 
					Регистр.ОстаткиТоваров.Фирма=Фирма;
					Регистр.ОстаткиТоваров.Товар=ДокумКальк.Ингредиент;
					Регистр.ОстаткиТоваров.Склад=ПромСклад;                     
					Регистр.ОстаткиТоваров.Блюдо=БлюдоВладелец;
					Регистр.ОстаткиТоваров.ОстатокТовара=ЕстьОстатокБлюда; 
					Регистр.ОстаткиТоваров.ФлагУчета=2;
					Если ТипУчета<Фин Тогда 
						ПеремещениеПоПартиям("Упр",ДокумКальк.Ингредиент,ЕстьОстатокБлюда,ПромТовар,"СписатьИнгр"); 
						Регистр.ОстаткиТоваров.ДвижениеРасходВыполнить();
					КонецЕсли;
					Если ТипУчета>Упр Тогда 
						ПеремещениеПоПартиям("Фин",ДокумКальк.Ингредиент,ЕстьОстатокБлюда,ПромТовар,"СписатьИнгр");
					КонецЕсли;  
				КонецЕсли;
				Если ЕстьОстатокБлюда<0 Тогда
					ЕстьОстатокБлюда=0;	
				КонецЕсли;
				НедостающееКоличествоБлюд=КоличествоВложенногоБлюда-ЕстьОстатокБлюда;
				Если НедостающееКоличествоБлюд=0 Тогда
					Продолжить;
				КонецЕсли;      
				
				//если данное блюда нельзя производить, то пытаемся его списать напрямую
				Если (БлюдоТолькоДляСписания(ДокумКальк.Ингредиент,ПромСклад)=1) И (ДатаДок>='01.04.09') Тогда
					//попытаемся списать замену блюда
					Если СписатьЗамену(ДокумКальк.Ингредиент,ДокумКальк.Количество*Коэф,ДокумКальк.Единица,ДокумКальк.Коэффициент,ПромТовар,НедостающееКоличествоБлюд)=0 Тогда
						СтатусВозвр=0;
					КонецЕсли;	
				Иначе
					Если СписатьБлюдо(ДокумКальк.Ингредиент,НедостающееКоличествоБлюд,ПромЕдиница,ПромКоэффициент,ПромТовар)=0 Тогда
						СтатусВозвр=0;    //блюда нет на складе,поэтому списываем ингредиенты 
					КонецЕсли;	          //себестоимость из части готовых и части произведенных блюд
				КонецЕсли;
				
				Если НетКарты=1 Тогда
					Продолжить;
				КонецЕсли;
			Иначе      //на складе есть нужное количество готового блюда
				Регистр.ОстаткиТоваров.Фирма=Фирма;
				Регистр.ОстаткиТоваров.Товар=ДокумКальк.Ингредиент;
				Регистр.ОстаткиТоваров.Склад=ПромСклад;
				Регистр.ОстаткиТоваров.ОстатокТовара=КоличествоВложенногоБлюда;     
				Регистр.ОстаткиТоваров.ФлагУчета=2;
				Регистр.ОстаткиТоваров.Блюдо=БлюдоВладелец;
				Если ТипУчета<Фин Тогда 
					ПеремещениеПоПартиям("Упр",ДокумКальк.Ингредиент,КоличествоВложенногоБлюда,ПромТовар,"ПродажаГотовогоБлюда",Цена,НДС,0);
					Регистр.ОстаткиТоваров.ДвижениеРасходВыполнить();
				КонецЕсли;
				Если ТипУчета>Упр Тогда
					ПеремещениеПоПартиям("Фин",ДокумКальк.Ингредиент,КоличествоВложенногоБлюда,ПромТовар,"ПродажаГотовогоБлюда",Цена,НДС,0);  
					//себестоимость полностью берем из регистра 
				КонецЕсли;  
				НедостающееКоличествоБлюд=0;   
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла; 
	ТабДляСебестоимости=СоздатьОбъект("ТаблицаЗначений");
	ТабБлюда.Выгрузить(ТабДляСебестоимости); 
	
	ТабДляСебестоимости.НоваяКолонка("СтоимостьУпр");
	ТабДляСебестоимости.НоваяКолонка("ПродСтоимостьУпр");
	ТабДляСебестоимости.НоваяКолонка("НДСУпр");                                                       //smip
	ТабДляСебестоимости.ВыбратьСтроки();
	Пока ТабДляСебестоимости.ПолучитьСтроку()=1 Цикл                                                  
		КурсВалютыУчета=КурсДляВалюты(ТабДляСебестоимости.Товар.ВалютаУчета,ДатаДок);
		ТабДляСебестоимости.СтоимостьУпр=ТабДляСебестоимости.СтоимБезНДС*КурсВалютыУчета;
		ТабДляСебестоимости.ПродСтоимостьУпр=ТабДляСебестоимости.ПродСтоимБезНДС*КурсВалютыУчета; 
		ТабДляСебестоимости.НДСУпр=ТабДляСебестоимости.НДС*КурсВалютыУчета;  
	КонецЦикла;                                                                                        
	
	ТабДляСебестоимости.Свернуть("БлюдоВладелец,Фирма,КодОпер","СтоимБезНДС,ПродСтоимБезНДС,НДС,СтоимостьУпр,ПродСтоимостьУпр,НДСУпр");  //smip
	ТабДляСебестоимости.НоваяКолонка("Уд");
	ТабДляСебестоимости.ВыбратьСтроки();
	Пока ТабДляСебестоимости.ПолучитьСтроку()=1 Цикл 
		Если ТабДляСебестоимости.БлюдоВладелец<>ПромТовар Тогда
			ТабДляСебестоимости.Уд=1;
		Иначе
			ТабДляСебестоимости.Уд=0;
		КонецЕсли;
	КонецЦикла;
	НС="";
	П=1;
	Пока П=1 Цикл
		Если ТабДляСебестоимости.НайтиЗначение(1,НС,"Уд")=1 Тогда
			ТабДляСебестоимости.УдалитьСтроку(НС); 
			НС="";
		Иначе
			П=0
		КонецЕсли;
	КонецЦикла;
	Если (ТабДляСебестоимости.КоличествоСтрок()>0) И (ТипУчета<Фин) Тогда
		ТабДляСебестоимости.ПолучитьСтрокуПоНомеру(1); 
		//ПО РЕГИСТРУ ОСТАТКОВ БЛЮДО ТОЖЕ НАДО ОПРИХОДОВАТЬ И СПИСАТЬ, КАК В ПАРТИЯХ
		
		Регистр.ОстаткиТоваров.Фирма=Фирма;
		Регистр.ОстаткиТоваров.Товар=ТабДляСебестоимости.БлюдоВладелец;
		Регистр.ОстаткиТоваров.Склад=ПромСклад;
		Регистр.ОстаткиТоваров.ОстатокТовара=ПромКоличество*ПромКоэффициент;     
		Регистр.ОстаткиТоваров.ФлагУчета=2;
		Регистр.ОстаткиТоваров.Блюдо="";
		Регистр.ОстаткиТоваров.ДвижениеПриходВыполнить();
		
		Регистр.ОстаткиТоваров.Товар=ТабДляСебестоимости.БлюдоВладелец;
		Регистр.ОстаткиТоваров.Склад=ПромСклад;
		Регистр.ОстаткиТоваров.ОстатокТовара=ПромКоличество*ПромКоэффициент;     
		Регистр.ОстаткиТоваров.ФлагУчета=2;
		Регистр.ОстаткиТоваров.Блюдо=?(ТабДляСебестоимости.БлюдоВладелец=БлюдоВладелец,"",БлюдоВладелец);
		Регистр.ОстаткиТоваров.ДвижениеРасходВыполнить();
	КонецЕсли;
	
	ТабДляСебестоимости.ВыбратьСтроки();
	Пока ТабДляСебестоимости.ПолучитьСтроку()=1 Цикл  
		Если ТабДляСебестоимости.КодОпер=СписаниеНаПроизводcтвоБлюда Тогда
			ФирмаТаб=ТабДляСебестоимости.Фирма;
			БлюдоВладелецТаб=ТабДляСебестоимости.БлюдоВладелец;  
			СтоимБезНДСТаб=ТабДляСебестоимости.СтоимБезНДС;
			ПродСтоимБезНДСТаб=ТабДляСебестоимости.ПродСтоимБезНДС;
			НДСТаб=ТабДляСебестоимости.НДС;
			Если ФирмаТаб.Выбран()=0 Тогда                                                       //smip
				КурсВалютыУчетаБлюда=КурсДляВалюты(БлюдоВладелецТаб.ВалютаУчета,ДатаДок);
				СтоимБезНДСТаб=ТабДляСебестоимости.СтоимостьУпр/КурсВалютыУчетаБлюда;
				ПродСтоимБезНДСТаб=ТабДляСебестоимости.СтоимостьУпр/КурсВалютыУчетаБлюда;
				НДСТаб=ТабДляСебестоимости.НДСУпр/КурсВалютыУчетаБлюда; 
			КонецЕсли;                                                                           //smip
			ТабБлюда.НоваяСтрока();
			ТабБлюда.Фирма=ФирмаТаб;
			ТабБлюда.Товар=БлюдоВладелецТаб;
			ТабБлюда.ТипТовара=БлюдоВладелецТаб.ВидТовара;
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			Если (Партия.Выбран()=0) И (Товар.Выбран() = 1) Тогда
				СпрПартии = СоздатьОбъект("Справочник.Партии");
				СпрПартии.ИспользоватьВладельца(Товар);
				//				Сообщить("Для товара "+Товар.Код+" "+Товар+" записана новая партия!");
				глСоздатьНовыйОбъект(СпрПартии); 
				Попытка
					//Закомментировано Инсталлятором МОД:СпрПартии.Записать();
					//Начало текста, вставленного Инсталлятором МОД
					СпрПартии.Записать();
					//Конец текста, вставленного Инсталлятором МОД
					
					Партия = СпрПартии.ТекущийЭлемент();
					ДатаПроизв = ДатаДок;
				Исключение  
				КонецПопытки;
			КонецЕсли;
			ТабБлюда.Партия = глЗаполнитьПартию(Контекст,Партия);
			ТабБлюда.СрокРеализации = ТабБлюда.Партия.СрокРеализации;             
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			ТабБлюда.БлюдоВладелец=БлюдоВладелец;
			ТабБлюда.Статус=Произведенный;
			ТабБлюда.Контр="";
			ТабБлюда.ПрихДок=ТекущийДокумент();
			ТабБлюда.Остаток=ПромКоличество*ПромКоэффициент;
			ТабБлюда.СтоимБезНДС=СтоимБезНДСТаб;
			ТабБлюда.ПродСтоимБезНДС=ПродСтоимБезНДСТаб;
			ТабБлюда.НДС=НДСТаб;
			ТабБлюда.КодОпер=ПроизводствоБлюда; 
			ТабБлюда.ФлагУчета=33;
			
			ТабБлюда.НоваяСтрока();
			ТабБлюда.Фирма=ФирмаТаб;
			ТабБлюда.Товар=БлюдоВладелецТаб;
			ТабБлюда.ТипТовара=БлюдоВладелецТаб.ВидТовара;
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			ТабБлюда.Партия = глЗаполнитьПартию(Контекст,Партия);
			ТабБлюда.СрокРеализации = ТабБлюда.Партия.СрокРеализации;             
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			ТабБлюда.БлюдоВладелец=БлюдоВладелец;
			ТабБлюда.Статус=Произведенный;
			ТабБлюда.Контр="";
			ТабБлюда.ПрихДок=ТекущийДокумент();
			ТабБлюда.Остаток=ПромКоличество*ПромКоэффициент;
			ТабБлюда.СтоимБезНДС=СтоимБезНДСТаб;
			ТабБлюда.ПродСтоимБезНДС=ПродСтоимБезНДСТаб;
			ТабБлюда.НДС=НДСТаб;
			ТабБлюда.КодОпер=?(ТабДляСебестоимости.БлюдоВладелец=Товар,ПродажаБлюда,СписаниеНаПроизводcтвоБлюда);
			ТабБлюда.Оборот=ПромКоличество*РасхЦена;
			ТабБлюда.НДСРасхода=РасхНДС;
			ТабБлюда.НП=РасхНП;
			Если ТабБлюда.КодОпер=ПродажаБлюда Тогда
				ТабБлюда.ФлагУчета=1;
			Иначе     
				ТабБлюда.ФлагУчета=33;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;   
	Возврат СтатусВозвр;
КонецФункции
//***********************************************************
//<<Алгоритм Успеха>> (begin)
// 
//_____________________________________________________________________________
Процедура ПогашениеДолгаПоКредитуНал()
	
	// тут все достаточно примитивно надо делать + и - по регистру ВзаиморасчетыПокупателей
	
	//разберемся с типом операции
	
	Если (ПризнакНакладной=Перечисление.ПризнРасхНакл.ВозвратПоставщику)
	ИЛИ (ПризнакНакладной=Перечисление.ПризнРасхНакл.ЭкспортныйВозврат)
	Тогда
		ТипОперации="ВозвратПоставщику";
	ИначеЕсли (ПризнакНакладной=Перечисление.ПризнРасхНакл.Переработка) Тогда
		Возврат;                                                                  
	Иначе
		ТипОперации="Продажа";
	КонецЕсли; 
	
	Если (ТипОперации="Продажа") Тогда
		Рег=Регистр.ВзаиморасчетыПокупателей;
		Если типУчета<Фин Тогда
			// нада найти валюту взаиморасчетов
			Рег.Фирма=Фирма;
			ПромВал=КлГруппа.ВалютаКредита;
		КонецЕсли; 
		Рег.СтавкаНДС	=СтавкаНДС;
	Иначе
		Рег=Регистр.ВзаиморасчетыПоставщиков;
		Если типУчета<Фин Тогда
			// нада найти валюту взаиморасчетов
			Рег.Фирма=Фирма;
			ПромВал=КлГруппа.ВалютаКредитаПоставщика;
		КонецЕсли;
	КонецЕсли;
	
	Если ПромВал.Выбран()=0 Тогда
		ПромВал=КлГруппа.ВалютаВзаиморасчетов;
	КонецЕсли;
	Если ПромВал.Выбран()=0 Тогда
		ПромВал=Константа.ВалютаВзаиморасчетов;
	КонецЕсли;
	Если ПромВал.Выбран()=0 Тогда
		НеПроводить(Контекст,"Не найдена валюта кредита клиента!");
		Возврат;
	КонецЕсли;
	
	Рег.Клиент		=КлГруппа;
	Рег.ВидОтгрузки	=ОтгрузкаТоваровИУслуг;
	Рег.КредДокумент=ТекущийДокумент();
	
	ДолгРег = Итог("Сумма")+Итог("НДС");
	ВозврПок = ?(долгРег > 0, 1, -1);
	ДолгРег = Макс(ДолгРег, -ДолгРег);
	
	Если типУчета>Упр Тогда //фин учет
		Рег.Фирма=Фирма;
		Рег.Долг=Окр(Пересчет(ДолгРег,Валюта,Курс,Рубли,ДатаДок),Константа.КоэффОкрРублЦены,1);
	КонецЕсли;
	
	Если типУчета<Фин Тогда
		// нада найти валюту взаиморасчетов
		Рег.Фирма=Фирма;
		Рег.Долг=Окр(Пересчет(ДолгРег,Валюта,Курс,ПромВал,ДатаДок),5,1);
	КонецЕсли; 
	
	Если (ТипОперации="Продажа") Тогда
		
		Если ВозврПок = 1 Тогда
			Рег.КодОперации=НеоплаченнаяОтгрузкаТовараКупленного;
			Рег.ДвижениеПриходВыполнить(); 
			Рег.КодОперации=ОплатаТоваровИУслуг;
			Рег.ДвижениеРасходВыполнить();
		Иначе
			Рег.КодОперации=ВозвратОплаты;
			Рег.ДвижениеПриходВыполнить(); 
			Рег.КодОперации=ВозвратОтПокупателяНеоплаченногоТовара;
			Рег.ДвижениеРасходВыполнить();
		КонецЕсли;
		
	Иначе
		
		Рег.КодОперации=ВозвратПоставщикуОплаченногоТовара;
		Рег.ДвижениеПриходВыполнить(); 
		Рег.КодОперации=ВозвратОплаты;
		Рег.ДвижениеРасходВыполнить();
		
	КонецЕсли;
	
КонецПроцедуры //ПогашениеДолгаПоКредитуНал()
//<<Алгоритм Успеха>> (end) 
//************************************************************
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения() Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ОбработкаПроведения()
	//Закомментировано Инсталлятором МОД:Процедура ОбработкаПроведения();
        // сем \\
	Если семМожноПровести( Контекст ) = 0 Тогда Возврат; КонецЕсли;
	семОбновитьКурс( контекст );
        // сем //
	//Если (ДатаДок>ТекущаяДата()) И (Пользователь.РазрПровБудущейДатой=0) Тогда
	//	НеПроводить(Контекст,"Нельзя проводить документ будущей датой!");
	//	Возврат;
	//КонецЕсли;
	    
	СписыватьТоварВНоль=Склад.РазрСписТоваровВНоль.Получить(ДатаДок);
	
	//запишем время продажи если документ создан вручную
	Если (ПустоеЗначение(Автор)=0) И (ПустоеЗначение(ВремяПродажи)=1) Тогда
		Док=СоздатьОбъект("Документ");
		Если СравнитьТА()=-2 Тогда
			ВремяПродажи=ТекущееВремя();
		Иначе             
			Док.НайтиДокумент(ТекущийДокумент());
			Час_=0;
			Мин_=0;
			Сек_=0;
			Док.ПолучитьВремя(Час_,Мин_,Сек_);
			ВремяПродажи=""+глДополнитьСтроку(Час_,"0",2,1)+":"+глДополнитьСтроку(Мин_,"0",2,1)+":"+глДополнитьСтроку(Сек_,"0",2,1);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Клиент.Выбран()=0 Тогда
		НеПроводить(Контекст,"Не задан клиент!");
		Возврат;
	КонецЕсли;     
	
	Если ПустоеЗначение(Агент) = 1 Тогда
		НеПроводить(Контекст,"Укажите агента!");
		Возврат;		
	КонецЕсли;

	
	Если глПроверкаСкладаПоПользователю(Контекст,Склад)=0 Тогда
		НеПроводить(Контекст,"Нельзя использовать данный склад!");
		Возврат;
	КонецЕсли;
	
	Если (ПустоеЗначение(ВалютаПлатежа)=1) И (ПустоеЗначение(ВалютаПлатежа1)=1) Тогда
		ВалютаПлатежа=Валюта;
	КонецЕсли;
	
	Если (СуммаПлатежа>0) И (Получено=0) Тогда
		Получено=СуммаПлатежа;
		ВалютаПлатежа=Валюта;
	КонецЕсли;
	
	Если ПустоеЗначение(ВидПлатежа)=1 Тогда
		ВидПлатежа=Перечисление.ВидыПлатежа.Наличные;
	КонецЕсли;
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Если Количество=0 Тогда
			Сообщить("Не указано количество!");
		КонецЕсли;
	КонецЦикла;
	
	Если ГрупповаяОбработка() = 0 Тогда
		Если семПроверкаПретензии(Контекст) = 0 Тогда
			Сообщить("Ошибка проведения документа.","!");
			СтатусВозврата(0); Возврат;
		КонецЕсли;
	КонецЕсли;
	
	

	Клиент.ИспользоватьДату(ДатаДок);
	
	// Запишем главного клиента
	Если Клиент.КлГруппа.Выбран()=1 Тогда
		КлГруппа=Клиент.КлГруппа;
	Иначе
		КлГруппа=Клиент;
	КонецЕсли;
	
	Если КлГруппа.ДляВыгрузки=0 Тогда
		спр=СоздатьОбъект("Справочник.Контрагенты");
		Спр.НайтиЭлемент(КлГруппа);
		Спр.ДляВыгрузки=1;
		ОбъектЗаписать(Спр,);
	КонецЕсли;
	
	
	Если (КлГруппа.ВидКонтрагента=Перечисление.ВидыКонтрагентов.Организация) И (ГрупповаяОбработка()=0) Тогда
		//проверим сумму сделки с начала месяца
		СуммаСделки = глПолучитьСуммуСделкиЗаНаличныеПоКлиенту(Контекст,"Месяц");
		СуммаСделки=СуммаСделки+Окр(Итог("Сумма")+Итог("НДС"),2);
		ЛимитСуммыСделок = Константа.МаксСуммаСделкиНаличнымиМесяц.Получить(ДатаДок);
		Если СуммаСделки>ЛимитСуммыСделок Тогда
			НеПроводить(Контекст,Шаблон("Сумма [СуммаСделки] сделок в наличных превысит сумму лимита с одним юридическим лицом в месяц [ЛимитСуммыСделок]!"));
		Иначе
			Сообщить("Сумма сделок в наличных с начала месяца: "+СуммаСделки);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Клиент.КлГруппа.Выбран()=1 Тогда
		ТекКлиент=Клиент.КлГруппа;
		ЗапретВыпискиНакл=ТекКлиент.ЗапретВыпискиНакл.Получить(ДатаДок);
	Иначе
		ЗапретВыпискиНакл=Клиент.ЗапретВыпискиНакл;
	КонецЕсли;       
	
	Если ЗапретВыпискиНакл=1 Тогда
		//		НеПроводить(Контекст,"Для данного клиента запрещено проводить Расходные Накладные!");
		//	    Возврат;
	КонецЕсли;
	
	Если ПроверкаДублейСтрок(Контекст)=1 Тогда
		Сообщить("В документе строки с одинаковым товаром!");
		//		Возврат;
	КонецЕсли;                             
	ТабБлюда=СоздатьОбъект("ТаблицаЗначений");
	ТабБлюда.НоваяКолонка("Фирма");
	ТабБлюда.НоваяКолонка("Товар");
	ТабБлюда.НоваяКолонка("ТипТовара");
	ТабБлюда.НоваяКолонка("БлюдоВладелец");
	ТабБлюда.НоваяКолонка("Статус");
	ТабБлюда.НоваяКолонка("Контр");
	ТабБлюда.НоваяКолонка("ПрихДок");
	ТабБлюда.НоваяКолонка("Остаток","Число");
	ТабБлюда.НоваяКолонка("СтоимБезНДС","Число");
	ТабБлюда.НоваяКолонка("ПродСтоимБезНДС","Число");
	ТабБлюда.НоваяКолонка("НДС","Число");
	ТабБлюда.НоваяКолонка("КодОпер");
	ТабБлюда.НоваяКолонка("ФлагУчета");
	ТабБлюда.НоваяКолонка("Оборот","Число");      
	ТабБлюда.НоваяКолонка("НДСРасхода","Число");
	ТабБлюда.НоваяКолонка("НП","Число"); 
	ТабБлюда.НоваяКолонка("Партия");  
	ТабБлюда.НоваяКолонка("СрокРеализации");
	
	ТабДляВзаиморасчетов=СоздатьОбъект("ТаблицаЗначений"); 
	ТабДляВзаиморасчетов.НоваяКолонка("Фирма");
	ТабДляВзаиморасчетов.НоваяКолонка("Долг");
	ТабДляВзаиморасчетов.НоваяКолонка("СтавкаНДС");
	
	КурсВалютыДокумента=Курс;
	КурсВалВзаиморасчетов=?(Клиент.ВалютаВзаиморасчетов.Выбран()=1,КурсДляВалюты(Клиент.ВалютаВзаиморасчетов,ДатаДок),КурсДляВалюты(Константа.ВалютаВзаиморасчетов,ДатаДок));
	
	ВыбратьСтроки();
	ЕстьБлюдо=0;
	Пока ПолучитьСтроку()=1 Цикл
		Если Товар.ВидТовара=Перечисление.ВидыТоваров.Блюдо Тогда
			Если (БлюдоТолькоДляСписания(Товар,Склад)=0) Тогда
				ЕстьБлюдо=1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	спСчета = СоздатьОбъект( "СписокЗначений" );
	Если ПустоеЗначение(ДокументОснование)=0 Тогда
		спСчета.ДобавитьЗначение( ДокументОснование );
	КонецЕсли;
	
	ЕстьСчета = 0; 
	ВыбратьСтроки(); 
	Пока ПолучитьСтроку() = 1 Цикл
		Если ПустоеЗначение( Счет ) = 0 Тогда
			Если Счет.Проведен() = 1 Тогда
				Если спСчета.НайтиЗначение(Счет )=0 Тогда
					спСчета.ДобавитьЗначение( Счет );	
				КонецЕсли;
				ЕстьСчета = 1; 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПустоеЗначение(спСчета)=1 Тогда
		спСчета.ДобавитьЗначение(ТекущийДокумент());
	КонецЕсли;
	
	
	
	Парт=СоздатьОбъект("ТаблицаЗначений");
	ВремРегистры=СоздатьОбъект("Регистры");
	//Рег1=ВремРегистры.РезервыТоваров;   
	//Рег2=ВремРегистры.СпецЗаказы;
	РегПарт=ВремРегистры.ПартииТоваров;
	РегОстаткиТоваров=ВремРегистры.ОстаткиТоваров;
	РегВзаиморасчетыПок=ВремРегистры.ВзаиморасчетыПокупателей;
	регРезервы=ВремРегистры.РезервыТоваров;
	РегКомпл=ВремРегистры.КомплектацияЗаявок;
	регСпецЗаказы = ВремРегистры.СпецЗаказы;
	регЗаказыПоставщикамЗаявки = ВремРегистры.ЗаказыПоставщикамЗаявки;
	
	Если (ИтогиАктуальны()=0) И (глНеНужнаПроверкаИтогов=0)  Тогда
		ТоварЛист=СоздатьОбъект("СписокЗначений");
		ВыгрузитьТабличнуюЧасть(ТоварЛист,"Товар");
//		Рег1.УстановитьЗначениеФильтра("Товар",ТоварЛист,2);
		             
		Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
			Если глЕстьРеквизитМнЧ("СкладТ",Вид())=1 Тогда
				ТекстЗапроса="SELECT DISTINCT $РасходнаяНакладнаяСтроки.СкладТ [СкладТ $Справочник.МестаХранения]
				|			  FROM $ДокументСтроки."+Вид()+" AS РасходнаяНакладнаяСтроки  (NOLOCK)
				|			  WHERE IDDOC = :ТекДок AND $РасходнаяНакладнаяСтроки.СкладТ <> $ПустойИД";
				ЗапросСКЛ=СоздатьОбъект("ODBCRecordSet");
				ЗапросСКЛ.УстановитьТекстовыйПараметр("ТекДок",ТекущийДокумент());
				тСклады=ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса);
				Если тСклады.КоличествоСтрок()<=1 Тогда
					ПромСклад=Склад;
				Иначе
					ПромСклад=СоздатьОбъект("СписокЗначений");
					тСклады.Выгрузить(ПромСклад,,,"СкладТ");
				КонецЕсли;
			Иначе
				ПромСклад=Склад;
			КонецЕсли;
			
		КонецЕсли;          
		
		
		Если ТипЗначенияСтр(ПромСклад)="СписокЗначений" Тогда
			РегОстаткиТоваров.УстановитьЗначениеФильтра("Склад",ПромСклад,2);
			РегПарт.УстановитьЗначениеФильтра("Склад",ПромСклад,2);

		Иначе
			РегПарт.УстановитьЗначениеФильтра("Склад",ПромСклад,1);
			РегОстаткиТоваров.УстановитьЗначениеФильтра("Склад",ПромСклад,1);
		КонецЕсли;
		
		
		Если Константа.РежимПроверки = 1 Тогда
			спТоваров = семПолучтьСписокИспТоваров( ТекущийДокумент() );
			РегОстаткиТоваров.УстановитьЗначениеФильтра("Товар",спТоваров,2);
			РегПарт.УстановитьЗначениеФильтра("Товар",спТоваров,2);
//			Рег1.УстановитьЗначениеФильтра("Товар",спТоваров,2);      
//			Рег2.УстановитьЗначениеФильтра("Товар",спТоваров,2);      
		Иначе
			
	 		//Если в Расходной только Товары, тогда можно отфильтровать только по этим товарам
			Если ЕстьБлюдо=0  Тогда
				РегОстаткиТоваров.УстановитьЗначениеФильтра("Товар",ТоварЛист,2);
				РегПарт.УстановитьЗначениеФильтра("Товар",ТоварЛист,2);      
			КонецЕсли;
				
	//		Рег1.УстановитьЗначениеФильтра("Товар",ТоварЛист,2);
	//		Рег2.УстановитьЗначениеФильтра("Товар",ТоварЛист,2);
			
		КонецЕсли;

		регРезервы.ВременныйРасчет();
		регСпецЗаказы.ВременныйРасчет();
		регЗаказыПоставщикамЗаявки.ВременныйРасчет();
		регКомпл.ВременныйРасчет();
		
		Если ЕстьСчета=1 Тогда
			регРезервы					.УстановитьЗначениеФильтра( "ПоСчету", спСчета, 2 );
			регСпецЗаказы				.УстановитьЗначениеФильтра( "ПоСчету", спСчета, 2 );
			регЗаказыПоставщикамЗаявки	.УстановитьЗначениеФильтра( "ПоСчету", спСчета, 2 );
			регКомпл					.УстановитьЗначениеФильтра( "ПоСчету", спСчета, 2 );
		Иначе
			регРезервы					.УстановитьЗначениеФильтра( "ПоСчету", ДокументОснование, 1 );
			регСпецЗаказы				.УстановитьЗначениеФильтра( "ПоСчету", ДокументОснование, 1 );
			регЗаказыПоставщикамЗаявки	.УстановитьЗначениеФильтра( "ПоСчету", ДокументОснование, 1 );
			регКомпл					.УстановитьЗначениеФильтра( "ПоСчету", ДокументОснование, 1 );
		КонецЕсли;
		//устанавливаем фильтр только для отправленных на комлектацию заявок
		//регКомпл					.УстановитьЗначениеФильтра( "Статус", спСтатусов, 2 );
		
		РегВзаиморасчетыПок.УстановитьЗначениеФильтра("Клиент",КлГруппа,1);
		
		РегОстаткиТоваров.ВременныйРасчет();
		РегПарт.ВременныйРасчет();
//		Рег1.ВременныйРасчет(); 
//		Рег2.ВременныйРасчет();
		РегВзаиморасчетыПок.ВременныйРасчет();
		ВремРегистры.Актуальность(1);
		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
	КонецЕсли;
	// склпарт
	Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
		ПромСклад=Склад;
	Иначе
		ПромСклад="";
	КонецЕсли; 
	
	//Завьялов А.**********24.12.04***********
	//Подготовка таблицы, списывающие товары записываются сюда
	ПолноеСписаниеПоЗаявки = СоздатьОбъект("ТаблицаЗначений");
	ПолноеСписаниеПоЗаявки.НоваяКолонка("Товар");
	//Завьялов А.**********24.12.04***********	
	
	// АННА
	ТабНДС=СоздатьОбъект("ТаблицаЗначений");
	ТабНДС.НоваяКолонка("СтавкаНДС");
	ТабНДС.НоваяКолонка("СуммаНДС");
	ТабНДС.НоваяКолонка("Сумма");
	СлужСтНДС=СоздатьОбъект("Документ.Служ_СтавкиНДС");
	
	СебШ=0;
	РегОстаткиТоваров.Склад=ПромСклад;
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		ТабНДС.НоваяСтрока();
		
		Если ПустоеЗначение(СкладТ)=0 Тогда
			ПромСклад = СкладТ;
		Иначе
			ПромСклад = Склад;
		КонецЕсли;
		
		Если ПустоеЗначение(СтавкаНДС_Т)=0 Тогда
			ТабНДС.СтавкаНДС = СтавкаНДС_Т;
		Иначе
			ТабНДС.СтавкаНДС = Товар.СтавкаНДС;
		КонецЕсли;
		ТабНДС.СуммаНДС = НДС;
		ТабНДС.Сумма = Сумма;
		Если Товар.ВидТовара=Перечисление.ВидыТоваров.Услуга Тогда
			Продолжить;
		КонецЕсли;
		
		Регистр.ПартииТоваров.ПривязыватьСтроку(НомерСтроки);
		Регистр.ОстаткиТоваров.ПривязыватьСтроку(НомерСтроки);
		Если Количество < 0 Тогда
			//***********************************************************
			//<<Алгоритм Успеха>> (begin)
			Для А=1 По 2 Цикл
				Если А = 1  Тогда
					ТипУч = "Фин";
					ПромФирма = Фирма;
					Если ТипУчета = Упр Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Если А = 2  Тогда
					ТипУч = "Упр";
					ПромФирма = Фирма;
					Если ТипУчета = Фин Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Колво = - Количество * Коэффициент;
				Если Колво < 0 Тогда
					Продолжить;
				КонецЕсли;
				// возврат от покупателя товара, проданного через кассу
				// искать итоги смысла не имеет, потому, что как раз тут - то мы продавали этот товар
				// но надо найти какую-то партию, чтобы в нее вернуть
				// ищем существующую партию такого товара
				ТаблИтогов = СоздатьОбъект("ТаблицаЗначений"); 
				//				РегПарт=СоздатьОбъект("Регистр.ПартииТоваров");
				РегПарт.УстановитьЗначениеФильтра("Фирма",ПромФирма,1);
				РегПарт.УстановитьЗначениеФильтра("Товар",Товар,1);
				РегПарт.УстановитьЗначениеФильтра("Статус",Купленный,1);
				РегПарт.ВыгрузитьИтоги(ТаблИтогов,1,1);
				ТаблИтогов.Сортировать("ПрихДокумент",1);
				
				Нашли=0;
				НашлиИтог=0;
				ТаблИтогов.ВыбратьСтроки();
				Пока ТаблИтогов.ПолучитьСтроку()>0 Цикл
					Если НЕ(ТаблИтогов.Товар=Товар) Тогда
						Если НашлиИтог=0 Тогда
							Продолжить;
						Иначе
							Прервать;
						КонецЕсли;
					КонецЕсли;
					НашлиИтог=1;
					
					Если (ТаблИтогов.Статус<>Купленный) И (ТаблИтогов.Статус<>Произведенный) Тогда
						Продолжить;
					КонецЕсли;     
					
					Если ТаблИтогов.ОстатокТовара>0 Тогда
						Нашли=1;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Нашли=1 Тогда
					СтоимостьПартии=ТаблИтогов.Стоимость*Колво/ТаблИтогов.ОстатокТовара;
					ПродСтоимостьПартии=ТаблИтогов.ПродСтоимость*Колво/ТаблИтогов.ОстатокТовара;
					НДСПартии=ТаблИтогов.НДС*Колво/ТаблИтогов.ОстатокТовара;
					ДД=ТаблИтогов.ПрихДокумент;
					_Клиент=ТаблИтогов.Контрагент;
					Партия=ТаблИтогов.Партия;
					СрокРеал=ТаблИтогов.СрокРеализации;
					Статус_=ТаблИтогов.Статус;
				Иначе
					
					// если не нашли существующую партию такого товара
					// (наверно он распродан)
					// тогда пытаемся найти последний проведенный документ прихода этого товара
					РегПарт_=СоздатьОбъект("Регистр.ПартииТоваров");
					
					РегПарт_.УстановитьЗначениеФильтра("Фирма",ПромФирма,1);
					РегПарт_.УстановитьЗначениеФильтра("Товар",Товар,1);
					//					РегПарт_.УстановитьЗначениеФильтра("Статус",Купленный,0);
					
					РегПарт_.ОбратныйПорядок(1);
					РегПарт_.ВыбратьДвижения(ДатаДок-180,ТекущийДокумент());
					Пока РегПарт_.ПолучитьДвижение()=1 Цикл
						Если РегПарт_.Приход=0 Тогда
							Продолжить;
						КонецЕсли;     
						Если РегПарт_.ПрихДокумент<>РегПарт_.ТекущийДокумент() Тогда
							Продолжить;
						КонецЕсли;
						Если РегПарт_.ТекущийДокумент()=ТекущийДокумент() Тогда
							Продолжить;
						КонецЕсли;
						Если РегПарт_.Стоимость=0 Тогда
							Продолжить;
						КонецЕсли;           
						Если РегПарт_.ОстатокТовара=0 Тогда
							Продолжить;
						КонецЕсли;            
						СтоимостьПартии=РегПарт_.Стоимость*Колво/РегПарт_.ОстатокТовара;
						ПродСтоимостьПартии=РегПарт_.ПродСтоимость*Колво/РегПарт_.ОстатокТовара;
						НДСПартии=РегПарт_.НДС*Колво/РегПарт_.ОстатокТовара;
						ДД=РегПарт_.ПрихДокумент;
						_Клиент=РегПарт_.Контрагент;
						Партия=РегПарт_.Партия;
						СрокРеал=РегПарт_.СрокРеализации;
						Статус_=РегПарт_.Статус;
						Нашли = 1;
						Прервать;
					КонецЦикла;
					Если Нашли=0 Тогда
						// если не нашли проведенный документ прихода этого товара
						// делаем последнюю попытку - найти непроведенный документ прихода
						Док=СоздатьОбъект("Документ.ПриходнаяНакладная");
						Док.УстановитьФильтр(0,1,0,1,1,1);
						Док.ОбратныйПорядок(1);
						Док.ВыбратьДокументы(ДатаДок-360,ТекущийДокумент());
						Пока Док.ПолучитьДокумент()=1 Цикл
							Если ТипУч="Фин" Тогда
								Если Док.Фирма<>Фирма Тогда
									Продолжить;
								КонецЕсли;
								Если Док.ТипУчета=Упр Тогда
									Продолжить;
								КонецЕсли;
							Иначе
								Если Док.ТипУчета=Фин Тогда
									Продолжить;
								КонецЕсли;
							КонецЕсли;
							СписокТоваров=СоздатьОбъект("СписокЗначений");
							Док.ВыгрузитьТабличнуюЧасть(СписокТоваров,"Товар");
							Если СписокТоваров.Принадлежит(Товар)=1 Тогда
								НомСтроки=СписокТоваров.НайтиЗначение(Товар);
								Нашли=1;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если Нашли=1 Тогда
							Док.ПолучитьСтрокуПоНомеру(НомСтроки);
							ДокКолво=Док.Количество*Док.Коэффициент;
							Если ДокКолво<>0 Тогда
								СтоимостьПартии=Колво*Пересчет((Док.Сумма-Док.НДС)/ДокКолво,Док.Валюта,Док.Курс,Товар.ВалютаУчета,Дата_Курса);
								ПродСтоимостьПартии=Колво*Пересчет((Док.Сумма-Док.НДС)/ДокКолво,Док.Валюта,Док.Курс,Товар.ВалютаУчета,Дата_Курса);
								НДСПартии=Колво*Пересчет(Док.НДС/ДокКолво,Док.Валюта,Док.Курс,Товар.ВалютаУчета,Дата_Курса);
								ДД=Док.ТекущийДокумент();
								_Клиент=КлиентДок(Док);
								Партия=ТаблИтогов.Партия;
								СрокРеал=Док.СрокРеализации;
								Статус_=Купленный;
							Иначе
								
								Нашли=0;
							КонецЕсли;
						КонецЕсли;
						Если Нашли=0 Тогда
							НеПроводить(Контекст,"Не обнаружено в системе сущ. партий и приходов возвращаемого товара "+Товар);
							статусВозврата(0);
							Возврат;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если Нашли = 1 Тогда
					//гасим
					Регистр.ПартииТоваров.Фирма = ПромФирма;
					Регистр.ПартииТоваров.Товар = Товар;
					Регистр.ПартииТоваров.Склад = ПромСклад;
					Регистр.ПартииТоваров.ПрихДокумент = ДД.ТекущийДокумент();
					Регистр.ПартииТоваров.Контрагент	= _Клиент;
					Регистр.ПартииТоваров.Статус = Статус_;
					Регистр.ПартииТоваров.Партия = Партия; 
					Регистр.ПартииТоваров.СрокРеализации = СрокРеал;
					Регистр.ПартииТоваров.Стоимость = СтоимостьПартии;
					Регистр.ПартииТоваров.ПродСтоимость = ПродСтоимостьПартии;
					Регистр.ПартииТоваров.ОстатокТовара = Колво;
					Регистр.ПартииТоваров.НДС = НДСПартии;
					Регистр.ПартииТоваров.КодОперации = ВозвратОтПокупателяКупленногоТовара;
					Регистр.ПартииТоваров.ФлагУчета=1;
					Регистр.ПартииТоваров.Оборот=-Пересчет(Цена*Колво,Валюта,Курс,Товар.ВалютаУчета,Дата_Курса);
					Регистр.ПартииТоваров.НДСрасхода=Пересчет(НДС/(Колво),Валюта,Курс,Товар.ВалютаУчета,Дата_Курса);
					Регистр.ПартииТоваров.НДСприхода=-НДСПартии;
					
					СебШ=СебШ-Регистр.ПартииТоваров.Стоимость;
					Регистр.ПартииТоваров.ДвижениеПриходВыполнить();
				КонецЕсли;
			КонецЦикла;
			//теперь по остаткам
			
			Регистр.ОстаткиТоваров.Фирма	= Фирма;
			Регистр.ОстаткиТоваров.Товар 	= Товар; 
			Регистр.ОстаткиТоваров.Склад 	= Склад; 
			Регистр.ОстаткиТоваров.ОстатокТовара 	= Колво;
			Регистр.ОстаткиТоваров.ФлагУчета = 2;
			Регистр.ОстаткиТоваров.Блюдо = "";
			Регистр.ОстаткиТоваров.Клиент = "";
			Регистр.ОстаткиТоваров.ДвижениеПриходВыполнить();
//			Регистр.ОстаткиТоваров.ДвижениеПриход(Товар, Склад, Колво, 2, "", "");
		Иначе
			//<<Алгоритм Успеха>> (end) 
			//************************************************************
			
			ПромСчет = "";
			Если ПустоеЗначение( Счет ) = 0 Тогда
				Если Счет.Проведен() = 1 Тогда
					ПромСчет = Счет;
				КонецЕсли;
			ИначеЕсли ДокументОснование.Проведен()=1 Тогда
				ПромСчет  = ДокументОснование;
			КонецЕсли;;
			
			ОбщееКоличество=Количество*Коэффициент;
			// проверяем резерв товара
			// по Регистру РезервыТоваров (снимаем зарезервированный товар при выписке Счета)
			Если ПустоеЗначение(ПромСчет)=0 Тогда
				Если (ПромСчет.Вид()="Счет") или (ПромСчет.Вид()="ЗаказОтПокупателя") Тогда
					Резерв=регРезервы.Остаток(Товар,ПромСчет,"РезервТовара");
					Если Резерв>0  Тогда //Закрываем резерв по Основание в ноль!!!
						Регистр.РезервыТоваров.ПривязыватьСтроку(НомерСтроки);
						Регистр.РезервыТоваров.Товар = Товар;
						Регистр.РезервыТоваров.ПоСчету = ПромСчет;
						Регистр.РезервыТоваров.РезервТовара = Резерв;
						Регистр.РезервыТоваров.ДвижениеРасходВыполнить();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли ;
			
			Если ((Товар.ВидТовара=Перечисление.ВидыТоваров.Ингредиент)или(Товар.ВидТовара=Перечисление.ВидыТоваров.Товар)) Тогда
				СписатьИнгредиент(Товар,Количество,Единица,Коэффициент,Товар,"ПродажаИнгр",Пересчет(Цена,Валюта,Курс,Товар.ВалютаУчета,Дата_Курса),Пересчет(НДС,Валюта,Курс,Товар.ВалютаУчета,Дата_Курса),0);
			ИначеЕсли  Товар.ВидТовара=Перечисление.ВидыТоваров.Блюдо Тогда 
				НачальноеБлюдо=Товар;
				ПроверкаВложенныхБлюд(НачальноеБлюдо);
				Если Найден=1 Тогда
					Предупреждение("Неправильно реализована схема ""блюдо в блюде"" для блюда "+Товар.Код+" "+Товар.Наименование,5);
					Сообщить("Неправильно реализована схема ""блюдо в блюде"" для блюда "+Товар.Код+" "+Товар.Наименование);
					СтатусВозврата(0);
					Возврат;
				КонецЕсли;
				Если Найден=2 Тогда
					Предупреждение("Нет калькуляционной карты для блюда "+Товар.Код+" "+Товар.Наименование+" или одного из блюд, вложенных в него",5);
					Сообщить("Нет калькуляционной карты для блюда "+Товар.Код+" "+Товар.Наименование+" или одного из блюд, вложенных в него");
					СтатусВозврата(0);
					Возврат;
				КонецЕсли;
				Если ТипУчета<Фин Тогда
					//РегОстаткиТоваров.Товар=Товар;
					//РегОстаткиТоваров.ОстаткиПолучить(); 
					//ЕстьОстатокБлюда=РегОстаткиТоваров.ОстатокТовара;
					ЕстьОстатокБлюда=РегОстаткиТоваров.СводныйОстаток(Товар,ПромСклад,,"ОстатокТовара");   
				Иначе
					ЕстьОстатокБлюда=РегПарт.СводныйОстаток(Фирма,Товар,,,,ПромСклад,"ОстатокТовара");   
				КонецЕсли;              
				
				НужноСписать=Количество*Коэффициент;
				Если (ЕстьОстатокБлюда < Окр(Количество*Коэффициент,3)) 
				И ((БлюдоТолькоДляСписания(Товар,ПромСклад)=1) И (глРазрОтрицОстатки=Перечисление.Булево.Нет)) Тогда
					Если (ДатаДок>='01.09.11') И (ПромСклад.РазрОтрицОстатки=1) И (ЕстьОстатокБлюда>=0) Тогда
						НужноСписать=Макс(ЕстьОстатокБлюда,0); // на случай, если осаток меньше 0
						
						Сообщить("6 На складе нет нужного количества Блюда "+Товар.Код+" "+Товар.Наименование+" нужно: "+Количество*Коэффициент+"
						|	Будет списано только оставшееся кол-во: "+ЕстьОстатокБлюда);
						
						Регистр.ОстаткиТоваров.Фирма= Фирма;
						Регистр.ОстаткиТоваров.Товар=Товар;
						Регистр.ОстаткиТоваров.Склад=ПромСклад;
						Регистр.ОстаткиТоваров.ОстатокТовара=НужноСписать;     
						Регистр.ОстаткиТоваров.ФлагУчета=2;
						Регистр.ОстаткиТоваров.Клиент=Клиент;
						Регистр.ОстаткиТоваров.Блюдо="";
						Если ТипУчета<Фин Тогда
							Регистр.ОстаткиТоваров.ДвижениеРасходВыполнить(); 
							ПеремещениеПоПартиям("Упр",Товар,НужноСписать,Товар,"ПродажаГотовогоБлюда",Цена,НДС,0);
						КонецЕсли;
						Если ТипУчета>Упр Тогда
							ПеремещениеПоПартиям("Фин",Товар,НужноСписать,Товар,"ПродажаГотовогоБлюда",Цена,НДС,0);  
							//себестоимость полностью берем из регистра
						КонецЕсли;  
						НедостающееКоличествоБлюд=0;
						
					Иначе
						Сообщить("6На складе нет нужного количества Блюда "+Товар.Код+" "+Товар.Наименование+" нужно: "+Количество*Коэффициент);
						НеПроводить(Контекст,"На складе осталось "+ЕстьОстатокБлюда+" "+Товар.БазоваяЕдиницаИзмерения);
						Если глНуженСписокТоваров=1 Тогда
							глСписокТоваров.НоваяСтрока();
							глСписокТоваров.Склад=ПромСклад;
							глСписокТоваров.Товар=Товар;
							глСписокТоваров.Количество=Количество*Коэффициент-ЕстьОстатокБлюда;
							глСписокТоваров.Остаток=ЕстьОстатокБлюда;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли (ЕстьОстатокБлюда < Окр(Количество*Коэффициент,3)) И (БлюдоТолькоДляСписания(Товар,ПромСклад)=0) Тогда //Нет нужного количества готовых блюд 
					Если ЕстьОстатокБлюда>0 Тогда 
						Регистр.ОстаткиТоваров.Фирма= Фирма;
						Регистр.ОстаткиТоваров.Товар=Товар;
						Регистр.ОстаткиТоваров.Склад=ПромСклад;                     
						Регистр.ОстаткиТоваров.Блюдо="";   
						Регистр.ОстаткиТоваров.Клиент=Клиент;
						Регистр.ОстаткиТоваров.ОстатокТовара=ЕстьОстатокБлюда; 
						Регистр.ОстаткиТоваров.ФлагУчета=2;
						Если ТипУчета<Фин Тогда
							Регистр.ОстаткиТоваров.ДвижениеРасходВыполнить();
							ПеремещениеПоПартиям("Упр",Товар,ЕстьОстатокБлюда,Товар,"ПродажаГотовогоБлюда",Цена,НДС,0);
						КонецЕсли;
						Если ТипУчета>Упр Тогда 
							ПеремещениеПоПартиям("Фин",Товар,ЕстьОстатокБлюда,Товар,"ПродажаГотовогоБлюда",Цена,НДС,0);
						КонецЕсли;  
					КонецЕсли;
					Если ЕстьОстатокБлюда<0 Тогда
						ЕстьОстатокБлюда=0;	
					КонецЕсли;
					НедостающееКоличествоБлюд=(Окр(Количество*Коэффициент,3))-ЕстьОстатокБлюда;
					Если НедостающееКоличествоБлюд=0 Тогда
						Продолжить;
					КонецЕсли;  
					Если СписатьБлюдо(Товар,НедостающееКоличествоБлюд,Единица,1,Товар,Цена,НДС,0)=0 Тогда
						СтатусВозврата(0); //блюда нет на складе,поэтому списываем ингредиенты 
					КонецЕсли;	           //себестоимость из части готовых и части произведенных блюд
					Если НетКарты=1 Тогда
						Продолжить;
					КонецЕсли;
				Иначе      //на складе есть нужное количество готового блюда 
					//******Завьялов.А***13.01.2004***
					//Если разрешены отрицательные остатки, необходимо формировать список недостающих ингридиентов
					Если глРазрОтрицОстатки=Перечисление.Булево.Да Тогда
						Если ЕстьОстатокБлюда < Окр(Количество*Коэффициент,3) Тогда   
							Если (ДатаДок>='01.09.11') И (ПромСклад.РазрОтрицОстатки=1) И (БлюдоТолькоДляСписания(Товар,ПромСклад)=1) Тогда
								НужноСписать=Макс(ЕстьОстатокБлюда,0); // на случай, если осаток меньше 0
								Сообщить("7 На складе нет нужного количества Блюда "+Товар.Код+" "+Товар.Наименование+" нужно: "+Количество*Коэффициент+"
										| Будет списано только оставшееся кол-во: "+ЕстьОстатокБлюда);
							Иначе
								Сообщить("7 На складе нет нужного количества Блюда "+Товар.Код+" "+Товар.Наименование+" нужно: "+Количество*Коэффициент);
								//НеПроводить(Контекст,"На складе осталось "+ЕстьОстатокБлюда+" "+Товар.БазоваяЕдиницаИзмерения);
								Если глНуженСписокТоваров=1 Тогда
									глСписокТоваров.НоваяСтрока();
									глСписокТоваров.Склад=ПромСклад;
									глСписокТоваров.Товар="";
									глСписокТоваров.Блюдо=Товар;
									глСписокТоваров.Количество=Количество*Коэффициент;
									глСписокТоваров.Остаток=ЕстьОстатокБлюда;
									глСписокТоваров.КолБлюд=Количество*Коэффициент-ЕстьОстатокБлюда;
								КонецЕсли;							
							КонецЕсли;

						КонецЕсли;
					КонецЕсли;
					//******Завьялов.А***13.01.2004***
					Регистр.ОстаткиТоваров.Фирма	= Фирма;
					Регистр.ОстаткиТоваров.Товар=Товар;
					Регистр.ОстаткиТоваров.Склад=ПромСклад;
					Регистр.ОстаткиТоваров.ОстатокТовара=НужноСписать;     
					Регистр.ОстаткиТоваров.ФлагУчета=2;
					Регистр.ОстаткиТоваров.Клиент=Клиент;
					Регистр.ОстаткиТоваров.Блюдо="";
					Если ТипУчета<Фин Тогда
						Регистр.ОстаткиТоваров.ДвижениеРасходВыполнить(); 
						ПеремещениеПоПартиям("Упр",Товар,НужноСписать,Товар,"ПродажаГотовогоБлюда",Цена,НДС,0);
					КонецЕсли;
					Если ТипУчета>Упр Тогда
						ПеремещениеПоПартиям("Фин",Товар,НужноСписать,Товар,"ПродажаГотовогоБлюда",Цена,НДС,0);  
						//себестоимость полностью берем из регистра
					КонецЕсли;  
					НедостающееКоличествоБлюд=0;
				КонецЕсли;
			КонецЕсли;
			//------------------------------------------------------------------------------------------------------------------  
			ТабБлюда.ВыбратьСтроки(); 
			Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
				Если ПустоеЗначение(СкладТ)=0 Тогда
					ПромСклад = СкладТ;
				Иначе
					ПромСклад = Склад;
				КонецЕсли;
				
				СкладВРегистр=ПромСклад;
			Иначе
				СкладВРегистр="";
			КонецЕсли;	
			
			Пока ТабБлюда.ПолучитьСтроку()>0 Цикл //Здесь нужно прописать все движения по списанию блюда 
				// по регистру "Остатки товаров"
				КОп=ТабБлюда.КодОпер;
				Если (КОп=ПродажаТовара) или (КОп=ПродажаБлюда) Тогда
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					//Регистр.ПартииТоваров.ДвижениеРасход(ТабБлюда.Фирма,ТабБлюда.Товар,ТабБлюда.Статус,ТабБлюда.Контр,ТабБлюда.ПрихДок,СкладВРегистр,ТабБлюда.Партия,ТабБлюда.СрокРеализации,ТабБлюда.Остаток,ТабБлюда.СтоимБезНДС,0,ТабБлюда.НДС,ТабБлюда.Оборот,ТабБлюда.НДС,ТабБлюда.НДСРасхода,ТабБлюда.КодОпер,ТабБлюда.НП,ТабБлюда.ФлагУчета,);
					Регистр.ПартииТоваров.ДвижениеРасход(ТабБлюда.Фирма,ТабБлюда.Товар,ТабБлюда.Статус,ТабБлюда.Контр,ТабБлюда.ПрихДок,СкладВРегистр,ТабБлюда.Партия,ТабБлюда.СрокРеализации,ТабБлюда.Остаток,ТабБлюда.СтоимБезНДС,ТабБлюда.ПродСтоимБезНДС,ТабБлюда.НДС,ТабБлюда.Оборот,ТабБлюда.НДС,ТабБлюда.НДСРасхода,?(ТабБлюда.Статус=Принятый,ПродажаПринятогоТовара,ТабБлюда.КодОпер),ТабБлюда.НП,ТабБлюда.ФлагУчета,);
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					СебШ=СебШ+ТабБлюда.СтоимБезНДС;
				ИначеЕсли КОп=СписаниеНаПроизводcтвоБлюда Тогда
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					//Регистр.ПартииТоваров.ДвижениеРасход(ТабБлюда.Фирма,ТабБлюда.Товар,ТабБлюда.Статус,ТабБлюда.Контр,ТабБлюда.ПрихДок,СкладВРегистр,ТабБлюда.Партия,ТабБлюда.СрокРеализации,ТабБлюда.Остаток,ТабБлюда.СтоимБезНДС,0,ТабБлюда.НДС,,,,ТабБлюда.КодОпер,,ТабБлюда.ФлагУчета,ТабБлюда.БлюдоВладелец);
					Регистр.ПартииТоваров.ДвижениеРасход(ТабБлюда.Фирма,ТабБлюда.Товар,ТабБлюда.Статус,ТабБлюда.Контр,ТабБлюда.ПрихДок,СкладВРегистр,ТабБлюда.Партия,ТабБлюда.СрокРеализации,ТабБлюда.Остаток,ТабБлюда.СтоимБезНДС,ТабБлюда.ПродСтоимБезНДС,ТабБлюда.НДС,,,,?(ТабБлюда.Статус=Принятый,ПродажаПринятогоТовара,ТабБлюда.КодОпер),,ТабБлюда.ФлагУчета,ТабБлюда.БлюдоВладелец);
					//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				ИначеЕсли КОп=ПроизводствоБлюда Тогда
					Регистр.ПартииТоваров.ДвижениеПриход(ТабБлюда.Фирма,ТабБлюда.Товар,ТабБлюда.Статус,ТабБлюда.Контр,ТабБлюда.ПрихДок,СкладВРегистр,ТабБлюда.Партия,ТабБлюда.СрокРеализации,ТабБлюда.Остаток,ТабБлюда.СтоимБезНДС,ТабБлюда.ПродСтоимБезНДС,ТабБлюда.НДС,,,,ТабБлюда.КодОпер,,ТабБлюда.ФлагУчета,);
				КонецЕсли; 
				Если (КОп=ПродажаТовара) или (КОп=ПродажаБлюда) Тогда			
					ТабДляВзаиморасчетов.НоваяСтрока();
					ТабДляВзаиморасчетов.Фирма=ТабБлюда.Фирма;
					СуммаДолгаРуб=ТабБлюда.Оборот*КурсВалютыДокумента;
					СуммаДолгаФин=СуммаДолгаРуб;
					СуммаДолгаУпр=СуммаДолгаРуб/КурсВалВзаиморасчетов;
					ТабДляВзаиморасчетов.Долг=?(ТабБлюда.Фирма.Выбран()=1,СуммаДолгаФин,СуммаДолгаУпр);
					ТабДляВзаиморасчетов.СтавкаНДС=ТабБлюда.Товар.СтавкаНДС; 
				КонецЕсли;
			КонецЦикла; 
			ТабБлюда.УдалитьСтроки();
		КонецЕсли;
	КонецЦикла; //Перебор строк марочного отчета   
	
	ТабНДС.Свернуть("СтавкаНДС","СуммаНДС,Сумма");
	Если ТабНДС.КоличествоСтрок() > 1 Тогда // нужен доп. служ. документ
		Если (СлужСтавкиНДС.Выбран()=0)  Тогда
			СлужСтНДС.Новый();
			СлужСтНДС.IDD=ПолучитьУникальныйIDD();
			СлужСтНДС.ДатаДок=Дата(1980,ДатаМесяц(ДатаДок),ДатаЧисло(ДатаДок));
			СлужСтНДС.УстановитьНовыйНомер("PD");
			ОбъектЗаписать(СлужСтНДС,);
		Иначе	
			СлужСтНДС.НайтиДокумент(СлужСтавкиНДС);	
		КонецЕсли;
		СлужСтНДС.УдалитьСтроки();
		// Цикл по строкам
		ТабНДС.ВыбратьСтроки();
		Пока ТабНДС.ПолучитьСтроку() = 1 Цикл
			СлужСтНДС.НоваяСтрока();
			СлужСтНДС.СтавкаНДС = ТабНДС.СтавкаНДС;
			СлужСтНДС.ВсегоНДСШ = ТабНДС.СуммаНДС;
			СлужСтНДС.ВсегоСуммаШ=ТабНДС.Сумма;
		КонецЦикла;
		ОбъектЗаписать(СлужСтНДС,);
		СлужСтавкиНДС=СлужСтНДС.ТекущийДокумент();
	Иначе
		Если ПустоеЗначение(СлужСтавкиНДС)=0 Тогда
			Если СлужСтНДС.НайтиДокумент(СлужСтавкиНДС)=1 Тогда
				СлужСтНДС.Удалить(1);
				СлужСтавкиНДС="";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	глПогашениеПоРезервам(Контекст,спСчета,регРезервы,регСпецЗаказы,РегКомпл,регЗаказыПоставщикамЗаявки);
	глДвиженияПоКомплектации(Контекст);
	
	
	////ДвиженияРегистровНакладных(Контекст);
	//
	//	//-------------------------------------
	//// по Регистру ПартииТоваров  Упр. учет
	//Если ТипУчета<Фин Тогда
	//	Если ПогашениеПартииТоваров(Контекст,"Упр")=1 Тогда
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//
	////-------------------------------------
	//// по Регистру ПартииТоваров  Фин. учет
	//Если ТипУчета>Упр Тогда
	//	Если ПогашениеПартииТоваров(Контекст,"Фин")=1 Тогда
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	
	глОборотыТоваров(Контекст);
	ПогашениеДолгаПоКредитуНал();             
	
	Регистр.Касса.Валюта 	= Валюта;
	Регистр.Касса.Касса 	= ККМ;   
	Регистр.Касса.Наличность 	= Итог("Сумма")+Итог("НДС");
	Регистр.Касса.Клиент	= КлГруппа;   
	Регистр.Касса.ДвижениеПриходВыполнить();
	
	
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// продажа товара, принятого на реализацию
	РегПартДляРеализации = СоздатьОбъект("Регистр.ПартииТоваров");
	РегПартДляРеализации.ВыбратьДвиженияДокумента(ТекущийДокумент());
	Пока РегПартДляРеализации.ПолучитьДвижение() = 1 Цикл
		Если не(РегПартДляРеализации.Статус = Принятый) Тогда
			Продолжить;
		КонецЕсли;
		Если ПогашениеДолгаПоКредиту(Контекст,РегПартДляРеализации.ПрихДокумент,РегПартДляРеализации.Стоимость+РегПартДляРеализации.НДС,РегПартДляРеализации.Товар.СтавкаНДС,"Упр",Строка(РегПартДляРеализации.Товар.ВидТовара)) = 1 Тогда
			Возврат;
		КонецЕсли;              
		Регистр.ПродажаВзятогоНаРеализацию.ПривязыватьСтроку(РегПартДляРеализации.НомерСтроки());
		ДокПриходнаяРеализатора = РегПартДляРеализации.ПрихДокумент;
		Регистр.ПродажаВзятогоНаРеализацию.Фирма  = РегПартДляРеализации.Фирма;
		Регистр.ПродажаВзятогоНаРеализацию.Клиент = ДокПриходнаяРеализатора.Клиент;
		Регистр.ПродажаВзятогоНаРеализацию.Товар  = РегПартДляРеализации.Товар;
		Регистр.ПродажаВзятогоНаРеализацию.ОстатокТовара = РегПартДляРеализации.ОстатокТовара;
		Регистр.ПродажаВзятогоНаРеализацию.ПродСтоимость = РегПартДляРеализации.Стоимость;
		Регистр.ПродажаВзятогоНаРеализацию.ДвижениеПриходВыполнить();
	КонецЦикла;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	Если глЗаполнитьРеквизитыДокументаШ(Контекст,1)=0 Тогда //по складам заполнение себестоимости
		Сообщить("Внимание: Не удалось заполнить реквизиты Ш. Обязательно обратитесь к админстратору!!!","!");
	КонецЕсли;
	
	СебестоимостьШ=СебШ;	
	ВсегоСуммаУслугШ=0;
	ВсегоНДСУслугШ=0;
	
	Если ВидПлатежа=Перечисление.ВидыПлатежа.Наличные Тогда
		Если ((Получено+Получено1+ПолученоКарта+ПолученоПодарочнаяКарта)=0) Тогда
			Получено=ВсегоСуммаШ;
		КонецЕсли;
	КонецЕсли;
     
	Если ГрупповаяОбработка()=0 Тогда
		Если Клиент.ПечататьСрокиРеализ=0 Тогда
			семЗаполнитьСрокРеализ();
		КонецЕсли;
	КонецЕсли;

	Если ГрупповаяОбработка()=0 Тогда
//проверка наличия общей заявки
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Если глЕстьРеквизитМнЧ("Счет",ТекущийДокумент().Вид())=1 Тогда
				ПоСчету=?(ПустоеЗначение(Счет)=0,Счет,ДокументОснование);
			Иначе
				ПоСчету=ДокументОснование;
			КонецЕсли;		
	
			Если ПустоеЗначение(ПоСчету)=0 Тогда
				
				л_ДокОснование=ПоСчету.ДокументОснование;
				Если л_ДокОснование.Вид()="СчетОбщий" Тогда
					л_Док=СоздатьОбъект("Документ.СчетОбщий");
					л_Док.НайтиДокумент(л_ДокОснование);
					СостояниеДок=глПолучитьСостояниеДокумента(л_Док.ТекущийДокумент());
					Если СокрЛП(СостояниеДок)="Ожидает отгрузки" Тогда
							ГаситьРегистр(л_ДокОснование);
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;

		КонецЦикла;	
	КонецЕсли;		
	
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеМОД(Контекст)=1 Тогда
		Возврат;
	КонецЕсли;
	стар_ОбработкаПроведения();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаУдаленияПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеПоАлгоритмуМОД=1 Тогда
		Возврат;
	КонецЕсли;
	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
	ПриОтменеПроведенияДокумента(ТекущийДокумент());

КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД




//--------------------------------------------


