// Расходная НАЛ
Перем ИнформационнаяСтрока;
Перем Валюта_Прежн;
Перем Курс_Прежн;
Перем Режим;
Перем СуммаПрописью;
Перем ПрогресСкидка;
Перем НомераСертификатов;
Перем ФлНовыйДок;
var ToPrint;
Перем стар_Клиент;

Процедура ВыборКлиента() Далее

Процедура ПересчетЦен() далее

Процедура ПриВыбореСамовывоза()
	Если семЕстьПраво("Документ","РасходнаяНакладнаяНал","Самовывоз") = 0 Тогда
		Сообщить("У Вас нет прав изменять данную опцию.","I");
//		Самовывоз = ?(Самовывоз = 1,0,1);
		Возврат;
	КонецЕсли;     
	
	Самовывоз = ?(Самовывоз = 1,0,1);	
	СпрОгр=СоздатьОбъект("Справочник.ТоварыОграниченияСкидокСамовывоз");
	
	кПроцентСкидки = Константа.ПроцентСкидкиНаСамовывоз;
	Если кПроцентСкидки = 0 Тогда Возврат; КонецЕсли;
	Если Самовывоз = 1 Тогда
		Ответ = Вопрос(Шаблон("Скидка на самовывоз.
		|Цены будут уменьшены на [кПроцентСкидки]%.
		|Продолжить?"),"Да+Нет",60);
		Если Ответ <> "Да" Тогда Самовывоз = 0; Возврат; КонецЕсли;
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			НеИспользоватьСкидку=0;
			СпрОгр.ВыбратьЭлементы();
			Пока СпрОгр.ПолучитьЭлемент() = 1 Цикл
				Если СпрОгр.ПометкаУдаления()=1 Тогда
					Продолжить;
				КонецЕсли;
				
				Если (Товар.ПринадлежитГруппе(СпрОгр.Товар)=1) ИЛИ (Товар=СпрОгр.Товар) Тогда
					НеИспользоватьСкидку=1;										
				КонецЕсли;
			КонецЦикла;
			
			Если НеИспользоватьСкидку=0 Тогда
				Цена=Цена * ( 1 - кПроцентСкидки / 100 );
		        Выч_суммы_накл_сНП(Контекст);
			КонецЕсли;
		КонецЦикла;   
			
		ЗаписьЖурналаРегистрации("В документе "+НомерДок+" установлен признак самовывоза и доп. скидка - "+кПроцентСкидки,,,ТекущийДокумент(),2);
	Иначе
		Ответ = Вопрос(Шаблон("Отмена скидки на самовывоз.
		|Цены будут увеличены на [кПроцентСкидки]%.
		|Продолжить?"),"Да+Нет",60);
		Если Ответ <> "Да" Тогда Самовывоз = 1; Возврат; КонецЕсли;
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			НеИспользоватьСкидку=0;

			СпрОгр.ВыбратьЭлементы();
			Пока СпрОгр.ПолучитьЭлемент() = 1 Цикл
				Если СпрОгр.ПометкаУдаления()=1 Тогда
					Продолжить;
				КонецЕсли;
				
				Если (Товар.ПринадлежитГруппе(СпрОгр.Товар)=1) ИЛИ (Товар=СпрОгр.Товар) Тогда
					НеИспользоватьСкидку=1;										
				КонецЕсли;
			КонецЦикла;

			Если НеИспользоватьСкидку=0 Тогда
				Цена=Цена / ( 1 - кПроцентСкидки / 100 );
			     Выч_суммы_накл_сНП(Контекст);
			КонецЕсли;
		КонецЦикла;                                                                                                     
			
		ЗаписьЖурналаРегистрации("В документе "+НомерДок+" снят признак самовывоза и доп. скидка - "+кПроцентСкидки,,,ТекущийДокумент(),2);
	КонецЕсли;
КонецПроцедуры

Процедура ПриНачалеВыбораЗначения( пЭлем, пФлаг )
	Если пЭлем = "Клиент" Тогда
		Если ДокументОснование.Выбран() = 0 Тогда Возврат; КонецЕсли;
		Если ДокументОснование.Вид() = "Счет" Тогда
			Если семЕстьПраво("Документ","Счет", "Изменение клиента") = 0 Тогда
				СтатусВозврата(0);
			КонецЕсли;
		КонецЕсли;        
	КонецЕсли;
КонецПроцедуры
 
Процедура семЗаполнитьПоСпискуЗаявок(сп)
	Если сп.РазмерСписка() = 0 Тогда 
		Сообщить( "Нет данных для заполнения." ); Возврат;
	Иначе
		промЗаявка = сп.ПолучитьЗначение( 1 );
	КонецЕсли;
	
	Автор = Пользователь;
	Фирма = Константа.ОсновнаяФирма;
	//Основание = "?????";
	IDD = ПолучитьУникальныйIDD();
	ТипУчета = промЗаявка.ТипУчета;
	ФинУчет = ?( ТипУчета > Упр, 1, 0 );
	
	ПризнакНакладной = Перечисление.ПризнРасхНакл.Продажа;
	ДатаДок = РабочаяДата();
	ДатаПоставки = ДатаДок;
	
//	ДокументОснование=промЗаявка;
	Склад=промЗаявка.Склад;
	Дата_Курса=промЗаявка.Дата_Курса;
	Валюта=промЗаявка.Валюта;
	Курс=КурсДляВалюты( Валюта, Дата_Курса );
	Клиент=промЗаявка.Клиент;
	//Агент = Клиент.Агент;
	Агент = семПолучитьАгента( Клиент );
	стар_Клиент = "";
	ВыборКлиента();    
	Агент = промЗаявка.Агент;
    КатегорияЦены=промЗаявка.КатегорияЦены;
	
	стар_Клиент = Клиент;
	Валюта_Прежн=Валюта;
	Курс_Прежн=Курс;
	
//	СкидкаНакл=промЗаявка.СкидкаНакл;
	
//	КатегорияЦены = промЗаявка.КатегорияЦены;
	//СтавкаНДС     = промЗаявка.СтавкаНДС;                       
	//Агент=промЗаявка.Агент;
	пОснование=ПеревестиНаГосЯзык("Счет")+" Nr. ";

	регРезервы = СоздатьОбъект( "Регистр.РезервыТоваров" );
	Если ПолучитьДатуТА()>ДатаДок Тогда
		регРезервы.ВременныйРасчет();
		РассчитатьРегистрыНа( ДатаДок+1 );
	КонецЕсли;
	Для н = 1 по сп.РазмерСписка() Цикл
		промЗаявка = сп.ПолучитьЗначение( н );
		пОснование = пОснование + СокрЛП(промЗаявка.НомерДок)+", ";
		промЗаявка.ВыбратьСтроки();
		Пока промЗаявка.ПолучитьСтроку()=1 Цикл
			Если промЗаявка.Товар.ВидТовара = Перечисление.ВидыТоваров.Услуга Тогда // услуги
				НоваяСтрока();
				КомплектовщикСчет = промЗаявка.Комплектовщик;
				Счет = промЗаявка;    
				Если ПустоеЗначение(ДокументОснование) = 1 Тогда
					ДокументОснование = промЗаявка.ТекущийДокумент(); 
				КонецЕсли;
				Товар = промЗаявка.Товар; 
				ТовКод = Товар.Код;
				РознЦена = ЦенаТовараПоКатегории(Контекст,КатегорияЦены,1);
				//Цена=Пересчет(промЗаявка.Цена,промЗаявка.Валюта,промЗаявка.Дата_Курса,Валюта,Дата_Курса);
				Количество=промЗаявка.Количество;
				Единица=промЗаявка.Единица;
				//Коэффициент=промЗаявка.Коэффициент;
				//Выч_суммы_накл_сНП(Контекст,0,1);
				//Сумма=Пересчет(промЗаявка.Сумма,промЗаявка.Валюта,промЗаявка.Дата_Курса,Валюта,Дата_Курса);
				//Скидка=Пересчет(промЗаявка.Скидка,промЗаявка.Валюта,промЗаявка.Дата_Курса,Валюта,Дата_Курса);
				//ВидСкидки=промЗаявка.ВидСкидки;
				//НДС=Пересчет(промЗаявка.НДС,промЗаявка.Валюта,промЗаявка.Дата_Курса,Валюта,Дата_Курса);
				//Всего = Сумма + НДС;
				УстанЦеныРасх(Контекст,,0);
				Продолжить;
			КонецЕсли;                                                                 
			
//			Если промЗаявка.Резерв=0 Тогда Продолжить; КонецЕсли;
			
			РезервПоСчету = регРезервы.Остаток( промЗаявка.Товар, промЗаявка, "РезервТовара" );
			Если РезервПоСчету > 0 Тогда
				НоваяСтрока();
				КомплектовщикСчет 	= промЗаявка.Комплектовщик;
				Счет 				= промЗаявка;   
				СкладТ 				= промЗаявка.Склад;
				Если ПустоеЗначение(ДокументОснование) = 1 Тогда
					ДокументОснование = промЗаявка.ТекущийДокумент(); 
				КонецЕсли;				
				Товар=промЗаявка.Товар; 
				ТовКод   = Товар.Код;
				РознЦена = ЦенаТовараПоКатегории(Контекст,КатегорияЦены,1);
				Цена=Пересчет(промЗаявка.Цена,промЗаявка.Валюта,промЗаявка.Дата_Курса,Валюта,Дата_Курса);
				ЦенаСНДС=Пересчет(промЗаявка.ЦенаСНДС,промЗаявка.Валюта,промЗаявка.Дата_Курса,Валюта,Дата_Курса);
				НДС=Пересчет(промЗаявка.НДС,промЗаявка.Валюта,промЗаявка.Дата_Курса,Валюта,Дата_Курса); 
				
				Единица=промЗаявка.Единица;
				Коэффициент=промЗаявка.Коэффициент;
				Количество=РезервПоСчету/Коэффициент;
				ПояснениеСкидки=промЗаявка.ПояснениеСкидки;
				//цены, установленные вручную сохраняются в базе филиала при вводе на основании заявки накладной\
				//в этом случае когда накладная выписывается на клиента как фирму, оформившую заявку цены пересчитываем согласно условиям
				//в случае, когда заявка оформлена на конечного клиента - цены введенные вручную сохраняем
				Если (промЗаявка.ВидСкидки = Перечисление.ВидСкидки.Документ) И (ПустоеЗначение(промЗаявка.КлиентФилиала)=1) Тогда
					Выч_суммы_накл_сНП(Контекст,0,1);
				Иначе
					УстанЦеныРасх(Контекст,,0);
				КонецЕсли;
				//Выч_суммы_накл(Контекст);
				//Скидка=Пересчет(промЗаявка.Скидка,промЗаявка.Валюта,промЗаявка.Дата_Курса,Валюта,Дата_Курса);
				//ВидСкидки=промЗаявка.ВидСкидки;
				//Всего = Сумма + НДС;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	пОснование = Лев(пОснование,СтрДлина(пОснование)-2);
	Основание = пОснование;

	ПересчетЦен();
	регРезервы = 0;      
	
	
КонецПроцедуры


Процедура семПечатьЧека()
	сп = СоздатьОбъект( "СписокЗначений" );
	сп.ДобавитьЗначение( 0, "обычный" );
	сп.ДобавитьЗначение( 1, "сокращенный" );
	зн = 0;
	Если сп.ВыбратьЗначение(зн,,,,1) = 1 Тогда
		глПечататьЧек( контекст, зн );
	КонецЕсли;
КонецПроцедуры



Функция семМаршрут( пКлиент )
	Если пКлиент.АдресДоставки.Выбран() = 1 Тогда
		Возврат пКлиент.АдресДоставки.Маршрут.Описание;
	КонецЕсли;
	Возврат "";
КонецФункции
//***************************************
Процедура ПриВыбореТовара()
	Если ПустоеЗначение(Цена) = 1 Тогда 
		УстанЦеныРасх(Контекст)
	КонецЕсли;
КонецПроцедуры

Procedure ПечатьСоСроками() Forward
//------------------------

//------------------------------------------------------------------------------
Процедура УстановкаДоступностиКнопокТаблицы()
	Перем НомСтр,флДоступности;

	НомСтр = ТабСтатистики.НомерСтроки;
	флДоступности = ?(НомСтр > 0, 1, 0);
	Форма.кнИзменить.Доступность(флДоступности);
	Форма.кнУдалить.Доступность(флДоступности);
КонецПроцедуры   //УстановкаДоступностиКнопокТаблицы       



Процедура ПересчетЦен()
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Если ВидСкидки <> Перечисление.ВидСкидки.Документ Тогда
			УстанЦеныРасх(Контекст);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры  

//-----------------------------------------------
Функция ПересчитатьНДС()

	ВыбратьСтроки();
	Пока получитьСтроку()>0 Цикл
	
		Если НомерСтроки=КоличествоСтрок() Тогда
		    
			разн=Итог("Сумма")+Итог("НДС")-(Окр(Итог("Сумма"),2)+Окр(Итог("НДС"),2));
			Если разн<>0 Тогда           
			    Всего=Сумма+НДС-разн;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

//*************************************************************
Процедура Доступ()     

	Если Форма.Закладки.ТекущаяСтрока()=1 Тогда
		Форма.лЧекПечать.Видимость(?((ПустоеЗначение(ККМФискальногоРегистратора)=1) ИЛИ (Проведен()=1) ИЛИ (ЧекПробитККМ=1),0,1));
		Форма.ЧекПечать.Видимость(?((ПустоеЗначение(ККМФискальногоРегистратора)=1) ИЛИ (Проведен()=1) ИЛИ (ЧекПробитККМ=1),0,1));
		
		Если Строка(ДокументОснование.Вид()) = "Счет" Тогда
			Форма.Товар.Доступность(0);
		КонецЕсли;	              
	
		Если Склад.ВидСклада = Перечисление.ВидыСкладов.Оптовый Тогда
			Форма.тНомерЗаявки.Видимость(1);
		Иначе
			Форма.тНомерЗаявки.Видимость(0);
		КонецЕсли;	
		
		Форма.кнПоказатьЦЧ.Видимость(Пользователь.РазрСпецПродажу);
		Форма.ЦенаЦЧ.Видимость(Пользователь.РазрСпецПродажу);
		Форма.СуммаЦЧ.Видимость(Пользователь.РазрСпецПродажу);
		
		Форма.кнВводНомераКарты.Видимость(1-ПустоеЗначение(ККМФискальногоРегистратора));
		
	КонецЕсли;	
	
	Если (ПустоеЗначение(ККМФискальногоРегистратора)=0) И (ЧекПробитККМ=0) Тогда
		Дост = 0;
	Иначе
		Дост = 1;
	КонецЕсли;	
	//Форма.кнПровести.Доступность(?(Найти(нрег(НазваниеНабораПрав()),"кассир")=1,0,1));
	Форма.кнПровести.Доступность(Дост);
	Форма.кнЗаписать.Доступность(?(Найти(нрег(НазваниеНабораПрав()),"кассир")=1,0,1));
	//Форма.кнОК.Доступность(?(Найти(нрег(НазваниеНабораПрав()),"кассир")=1,0,1));
	Форма.кнОК.Доступность(Дост);
	Форма.Клиент.Доступность(?(ПустоеЗначение(Автор)=1,0,1));
	
КонецПроцедуры                 



Procedure OnClose()
	if ToPrint=6 then
	//ПечатьСоСроками();
	Endif;

EndProcedure

//************************************************
Процедура СортТовар()
	                        
	ТТ=СоздатьОбъект("ТаблицаЗначений");
		
	ВыгрузитьТабличнуюЧасть(ТТ);
	
	ТТ.НоваяКолонка("УслХран","Число",2);
	ТТ.ВыбратьСтроки();
	Пока ТТ.ПолучитьСтроку()=1 Цикл
		Попытка
	    	ТТ.УслХран=ТТ.Товар.МестоХранения.Код;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	ТТ.Сортировать("+УслХран,+ТовКод");
	
	ЗагрузитьТабличнуюЧасть(ТТ);

КонецПроцедуры 

//***********************************************************
//<<Алгоритм Успеха>> (begin)
//
//_____________________________________________________________________________
Процедура ВыборАгента()
	Если Клиент.Выбран()=0 Тогда
		Сообщить("НЕ выбран клиент!!!","!");
	    Возврат;
	КонецЕсли;    
	
	ОчищениеТаблЧасти(Контекст);
	
	Спр=СоздатьОбъект("Справочник.АгентыКлиентов");
	
	Спр.ИспользоватьВладельца(Клиент.ТекущийЭлемент());
	
	Если Спр.Выбрать("Выбор агента","ФормаСписка")=1 Тогда
		Агент=Спр.Сотрудник;
	КонецЕсли;
	
КонецПроцедуры //ВыборАгента
//<<Алгоритм Успеха>> (end) 
//************************************************************


//------------------------------------------------------------------------------
Процедура ПереносТабВДок(Докум,Табл)               
	Если Табл.КоличествоСтрок() = 0 Тогда
		Если Докум.Выбран() = 1 Тогда
			Док = СоздатьОбъект("Документ");
			Док.НайтиДокумент(Докум);
			Док.Удалить(1);
			Докум = "";
		КонецЕсли;     
		Возврат;
	КонецЕсли;
	Док = СоздатьОбъект("Документ." + Докум.Вид());
	Если Докум.Выбран() = 0 Тогда
		Док.Новый();
		Док.ДатаДок = Константа.ДатаСлужебныхДокументов;
	Иначе
		Док.НайтиДокумент(Докум);
		Док.УдалитьСтроки();
	КонецЕсли;
	Док.ЗагрузитьТабличнуюЧасть(Табл);
	ОбъектЗаписать(Док,);
	Докум = Док.ТекущийДокумент();
КонецПроцедуры   //ПереносТабВДок 


//***********************************
                                     

//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписи() Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ПриЗаписи()
//Закомментировано Инсталлятором МОД:Процедура ПриЗаписи()
	Если семМожноЗаписать( Контекст ) = 0 Тогда Возврат; КонецЕсли;

	//присвоение номера строгой отчетности\\
	Если НЕ((ПризнакНакладной = Перечисление.ПризнРасхНакл.КредитнаяНота)
	или	(ПризнакНакладной = Перечисление.ПризнРасхНакл.КредитнаяНотаШтраф)) Тогда
		Если семПрисвоитьНовыйНомер( контекст ) = 0 Тогда Возврат; КонецЕсли;
	КонецЕсли;
	//присвоение номера строгой отчетности//
	Если семПроверкаУникальностиНомера( контекст ) = 0 Тогда Возврат; КонецЕсли;

	//СортТовар();
	Если ДатаДок>ТекущаяДата() Тогда
		АвтоВремяНачалоДня();
	Иначе  
		АвтоВремяТекущее();
	КонецЕсли;     
                          
	Если (ПустоеЗначение(ВалютаПлатежа)=1) И (ПустоеЗначение(ВалютаПлатежа1)=1) Тогда
		ВалютаПлатежа=Валюта;
	КонецЕсли;

	Если (ВидПлатежа=Перечисление.ВидыПлатежа.Наличные) И ((Получено+Получено1+ПолученоКарта)<ОКР(Итог("Сумма")+Итог("НДС"),2)) Тогда	
		Получено=Окр(Итог("Сумма")+Итог("НДС"),2);
		ПолученоКарта=0;
	ИначеЕсли (ВидПлатежа=Перечисление.ВидыПлатежа.Карта) Тогда
		ПолученоКарта = Окр(Итог("Сумма")+Итог("НДС"),2) - Получено;
	КонецЕсли;
	
	//Если ПустоеЗначение(Автор)=1 Тогда  //Если документ создан Автоматически
//		Если ВидПлатежа=Перечисление.ВидыПлатежа.Наличные Тогда
//			Получено=Итог("Сумма")+Итог("НДС");
//			ПолученоКарта=0;
//		ИначеЕсли ВидПлатежа=Перечисление.ВидыПлатежа.Карта Тогда
//			ПолученоКарта=Итог("Сумма")+Итог("НДС");
//			Получено=0;
//		КонецЕсли;
	//КонецЕсли;
	
	//Если ДатаДок>ТекущаяДата() Тогда
	//	АвтоВремяНачалоДня();
	//Иначе  
	//	АвтоВремяТекущее();
	//КонецЕсли;     
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Если ПустоеЗначение(СкладТ)=1 Тогда
			СкладТ=Склад;
		КонецЕсли;
		
		Если ПустоеЗначение(Счет)=0 Тогда
			Если Счет.Склад<>СкладТ Тогда
				СкладТ = Счет.Склад;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	тСклады=СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(тСклады,"СкладТ");	
	тСклады.Свернуть("СкладТ","");
	Если тСклады.КоличествоСтрок()>1 Тогда
		ДокСклады=СоздатьОбъект("Документ.Служ_Склады");
		Если ПустоеЗначение(СкладыДок)=1 Тогда
			ДокСклады.Новый();
			ДокСклады.ДатаДок=Дата(1980,ДатаМесяц(ДатаДок),ДатаЧисло(ДатаДок));
			ЗаполнитьШапку(ДокСклады);
		Иначе
			Попытка
				ДокСклады.НайтиДокумент(СкладыДок);
				ДокСклады.УдалитьСтроки();
				ОбъектЗаписать(ДокСклады);
				СкладыДок=ДокСклады.ТекущийДокумент();
			Исключение
				СкладыДок = "";
				Сообщить("Описание ошибки:"+ОписаниеОшибки());
			КонецПопытки;				
			
		КонецЕсли;
	ИначеЕсли  ПустоеЗначение(СкладыДок)=0 Тогда
		//удаляем ссылку на документ со складами, если он был
		ДокСклады=СоздатьОбъект("Документ.Служ_Склады");
		ДокСклады.НайтиДокумент(СкладыДок);
		ОбъектУдалить(ДокСклады,1);
		СкладыДок = "";
		тСклады.ПолучитьСтрокуПоНомеру(1);
		Если Склад<>тСклады.СкладТ Тогда
			Склад = тСклады.СкладТ;
		КонецЕсли;
	Иначе
		тСклады.ПолучитьСтрокуПоНомеру(1);
		Если Склад<>тСклады.СкладТ Тогда
			Склад = тСклады.СкладТ;
		КонецЕсли;

	КонецЕсли;	
	
	
    ВсегоСуммаУслугШ = 0;
	ВсегоНДСУслугШ	 = 0;
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Если Товар.ВидТовара = Перечисление.ВидыТоваров.Услуга Тогда
			ВсегоСуммаУслугШ = ВсегоСуммаУслугШ + Сумма + НДС; 
			ВсегоНДСУслугШ	 = ВсегоНДСУслугШ	+ НДС;
		КонецЕсли;
	КонецЦикла;
	
	ВсегоСуммаШ = Итог("Сумма") + Итог("НДС");
	ВсегоНДСШ	= Итог("НДС");       
	
	Если ПустоеЗначение(ДокументОснование) = 0 Тогда
		Если ДатаДок < ДокументОснование.ДатаДок Тогда
			Предупреждение("Дата документа меньше даты документа основания. Сохранение невозможно!");        
			СтатусВозврата(0);
			Возврат;			
		КонецЕсли;
	КонецЕсли;	   
	
	ПереносТабВДок(СтатИнформ,ТабСтатистики);

	//Если (ПустоеЗначение(Автор)=0) и (Склад.РазрОтрицОстатки=1)  Тогда  //Если документ создан вручную и на складе разрешено проведение с отриц. остатками
	//	глРазрОтрицОстатки=Да;
	//КонецЕсли;

	
	//*******Завьялов А.******начало    
	//ДокРасхНал=СоздатьОбъект("Документ.РасходнаяНакладная");
	//Если ДокРасхНал.НайтиПоНомеру(НомерДок,ДатаДок,"РасходнаяНакладная") = 1 Тогда
	//	Предупреждение("Данный номер документа зарегестрирован за расходной накладной. Сохранение невозможно!");        
	//	СтатусВозврата(0);
	//	Возврат;		
	//КонецЕсли;
	//*******Завьялов А.******завершение	

КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ПриЗаписи()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_           
	// анна: при перезаписи существующего документа
	// включаем его в файл обмена
	Если Выбран()=1 Тогда
		ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);	
	КонецЕсли;

	стар_ПриЗаписи();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД




//************************************************

Procedure Choice() //Stas
	Режим="Каталог";
	z_Подбор(Контекст);	
endProcedure           

//------------------------------------------------------------------------------
Процедура ПриВыбореЗакладки(Ном,Значение)
	ТекЗакладка=Значение;
	Если Значение="Основная" Тогда
		Форма.ИспользоватьСлой("Общий,Основная",2);
	ИначеЕсли Значение="Статистика" Тогда
		УстановкаДоступностиКнопокТаблицы();
		Форма.ИспользоватьСлой("Общий,Статистика",2);
	КонецЕсли;
	
	Доступ();
КонецПроцедуры   //ПриВыбореЗакладки      


Процедура ПриОткрытии()
	ПроверкаРазрешенияРедактирования(Контекст);
	УстановкаРеквизитаТип(Контекст);
	Тип.ДобавитьЗначение("Упр.");
	Тип.ДобавитьЗначение("Общ.");
	Тип.ДобавитьЗначение("Фин.");
	Тип.ТекущаяСтрока(ТипУчета+1);

	Если (ПустоеЗначение(Автор)=0) И (ЧекПробитККМ=0) Тогда  //Если документ создан Автоматически
		Форма.ККМ.Доступность(Пользователь.РазрВыборКассы);
		Форма.ВидПлатежа.Доступность(Пользователь.РазрВыборКассы);
		Форма.ПолученоКарта.Доступность(Пользователь.РазрВыборКассы);
		Форма.ПолученоПодарочнаяКарта.Доступность(Пользователь.РазрВыборКассы);
		Форма.ПодарочнаяКарта.Доступность(Пользователь.РазрВыборКассы);
		Форма.Получено.Доступность(Пользователь.РазрВыборКассы);
	Иначе
		Форма.ККМ.Доступность(0);
		Форма.ВидПлатежа.Доступность(0);
		Форма.ПолученоКарта.Доступность(0);
		Форма.ПолученоПодарочнаяКарта.Доступность(0);
		Форма.ПодарочнаяКарта.Доступность(0);
		Форма.Получено.Доступность(0);
	КонецЕсли;
	
	Если СтатИнформ.Выбран() = 1 Тогда
		СтатИнформ.ВыгрузитьТабличнуюЧасть(ТабСтатистики,"Критерий,Значение");
	КонецЕсли;
	
	Доступ();
	
	флДост = семЕстьПраво( "Документ", "РасходнаяНакладнаяНал", "Изменение цены" );
	Форма.РознЦена.Доступность(флДост);
	Форма.Цена.Доступность(флДост);
	Форма.ЦенаСНДС.Доступность(флДост);
	Форма.Сумма.Доступность(флДост);
//	Форма.кнСамовывоз.Доступность(флДост);
	
	Если Форма.ТолькоПросмотр()=1 Тогда
		Форма.кнСамовывоз.Доступность(0);
		Форма.RapidChoice.Доступность(0);
		Форма.кнПодбор.Доступность(0);
	КонецЕсли;
	Если СлужСтавкиНДС.Выбран()=1 Тогда
		Форма.СтавкаНДС.Видимость(0);
		Форма.подпСтНДС.Заголовок("Разные ставки НДС");
	КонецЕсли;
	
	ПриВыбореЗакладки(1,"Основная");    
	
	семЗаголовокОкна(контекст);
КонецПроцедуры
//-----------------------------------------------

//***********************************************

Процедура ВыборКлиента() 
	
	Если (ПустоеЗначение(стар_Клиент)=0) и (клиент<>стар_Клиент) Тогда
		Если глПроверкаАгентаПоКлиенту(Контекст)=0 Тогда
			Клиент=стар_Клиент;
		КонецЕсли;             
		стар_Клиент="";
	КонецЕсли;
	//Клиент.ИспользоватьДату(ДатаДок);
	Если Клиент.КлГруппа.Выбран()=1 Тогда
		КлГруппа=Клиент.КлГруппа;
	Иначе
		КлГруппа=Клиент;
	КонецЕсли;
	
	Валюта=Клиент.ВалютаКредита;
	Курс=КурсДляВалюты(Валюта,Дата_Курса);

	Агент=Клиент.Агент;	
	//Если Клиент.Страна=Константа.СтранаРезидент Тогда
	//	СтавкаНДС=Константа.ОсновнаяСтавкаНДС;
	//Иначе
	//	СтавкаНДС=Перечисление.ЗначенияНДС.безНДС;
	//КонецЕсли;
	
	Если (Клиент.КатегорияЦены<>КатегорияЦены) И 
		 (Клиент.КатегорияЦены<>Константа.РозничнаяКатегорияЦены) И
		 (ПустоеЗначение(Клиент.КатегорияЦены)=0) И (стар_Клиент<>Клиент) И (ПустоеЗначение(РозничнаяКатегорияЦены)=1) Тогда
	    КатегорияЦены=Клиент.КатегорияЦены;
		ПриИзмененииКатегорииЦены(Контекст);
	КонецЕсли;
	
	//СтавкаНДС = семПолучитьСтавкуНДС(Клиент,Контекст);
	
	
КонецПроцедуры

//***********************************************
Процедура ВычСкидки()
	Скидка=ЦенаТовараПоКатегории(Контекст,КатегорияЦены,1)*Количество*Коэффициент-Сумма;
КонецПроцедуры
//-----------------------------------------------

Функция ИнфОпродаже()
	Если Клиент.Выбран()=1 Тогда
		КлиентГр = ?(Клиент.КлГруппа.Выбран()=1,Клиент.КлГруппа,Клиент);
		Если ПустоеЗначение(КлиентГр)=0 Тогда
			КлиентГр.ИспользоватьДату(ДатаДок);
			Если КлиентГр.ЗапретВыпискиНакл=1 Тогда
				Возврат("Запрет на продажу!!!");
			Иначе
				Возврат("");
			КонецЕсли;
		Иначе
			Возврат("");
		КонецЕсли;
	Иначе
		Возврат("");
	КонецЕсли;
КонецФункции
//----------------------------------------------------
Функция ИнфОдоговоре()
	Если Клиент.Выбран()=1 Тогда
		Если СтрДлина(СокрЛП(Клиент.Договор))=0 Тогда
			Возврат("Договора нет!!!");
		Иначе
			Возврат(Клиент.Договор);
		КонецЕсли;
	Иначе
		Возврат("");
	КонецЕсли;
КонецФункции
//***********************************************************
//<<Алгоритм Успеха>> (begin)
//
//_____________________________________________________________________________
Процедура ПриУстановкеПризнака()
	Если (ПризнакНакладной=Перечисление.ПризнРасхНакл.ЭкспортныйВозврат) Тогда
	    Если ПроцентНДС(СтавкаНДС)>0 Тогда
	        СтавкаНДС=Перечисление.ЗначенияНДС.НДС0;
			ПриИзмененииСтавкиНДС(Контекст);
		КонецЕсли;                         
	Иначе
		Если ПроцентНДС(СтавкаНДС)=0 Тогда
	        СтавкаНДС=Константа.ОсновнаяСтавкаНДС;
			ПриИзмененииСтавкиНДС(Контекст);
		КонецЕсли;                         
	КонецЕсли;
КонецПроцедуры //ПриУстановкеПризнака
//<<Алгоритм Успеха>> (end) 
//************************************************************
//----------------------------------------------------
Функция Выч_Цены_СНДС(ТовЦена)
	Возврат  ТовЦена*(1+(ПроцентНДС(СтавкаНДС)/100));
КонецФункции
//----------------------------------------------------
Функция Выч_Цены(ТовЦенаСНДС)
Возврат  ТовЦенаСНДС/(1+(ПроцентНДС(СтавкаНДС)/100));
КонецФункции
//-------------------------------------------------
//Процедура УчестьСкидкуНакл1()
//	//Клиент.ИспользоватьДату(ДатаДок);
//	// Покажем процент прогрессивной скидки
//	// Пересчитываем цены и суммы в таблице ввода товаров
//	Если КоличествоСтрок()>0 Then
//		ВыбратьСтроки();
//		Пока ПолучитьСтроку()>0 Цикл
//			Товар.ИспользоватьДату(ДатаДок);
//			КлТовСкидка=0;
//			// Если задана скидка по клиенту ,не действует КлиентСкидка
//			Если Клиент.КлиентСкидка=0 Тогда
//				// Если цену меняем вручную (РознЦена приравнивается к введенной цене и она отлична от цены из каталога),
//				// тогда не действует товарная скидка
//				Если (РознЦена=Цена) И (РознЦена<>ЦенаТовараПоКатегории(Контекст,Константа.РозничнаяКатегорияЦены,1))  Тогда
//					ПроцентСкидки=0;
//				Иначе
//					// Получим скидку на товарные группы по данному клиенту
//					КлТовСкидка=ПолучитьКлТовСкидку(Контекст);
//				КонецЕсли;
//			КонецЕсли;
//			//			ПроцентСкидки=Клиент.КлСкидка.Получить(ДатаДок)+Товар.ТовСкидка;
//			ПроцентСкидки=КлТовСкидка+Товар.ТовСкидка;
//			
//			// Новая цена с учетом скидки накладной
//			Цена=Окр((РознЦена-(РознЦена*ПроцентСкидки/100))*(1-(СкидкаНакл/100)),2);
//			Скидка=ЦенаТовараПоКатегории(Контекст,Константа.РозничнаяКатегорияЦены,1)*Количество*Коэффициент-Сумма;
//			ЦенаСНДС=Цена*(1+(ПроцентНДС(СтавкаНДС)/100));
//			// Пересчитываем сумму товара
//			//              	        Выч_НДС(Context);
//			Выч_суммы_накл(Контекст);
//		КонецЦикла;
//	КонецЕсли;
//КонецПроцедуры
//----------------------------------------------
//Процедура УчестьСкидкуПоСтр1()
//	//Клиент.ИспользоватьДату(ДатаДок);
//	Товар.ИспользоватьДату(ДатаДок);
//	КлТовСкидка=0;
//	// Если задана скидка по клиенту ,не действует КлиентСкидка
//	Если Клиент.КлиентСкидка=0 Тогда
//		// Если цену меняем вручную (РознЦена приравнивается к введенной цене и она отлична от цены из каталога),
//		// тогда не действует товарная скидка
//		Если (РознЦена=Цена) И (РознЦена<>ЦенаТовараПоКатегории(Контекст,Константа.РозничнаяКатегорияЦены,1))  Тогда
//			ПроцентСкидки=0;
//		Иначе
//			// Получим скидку на товарные группы по данному клиенту
//			КлТовСкидка=ПолучитьКлТовСкидку(Контекст);
//		КонецЕсли;
//	КонецЕсли;
//	//			ПроцентСкидки=Клиент.КлСкидка.Получить(ДатаДок)+Товар.ТовСкидка;
//	ПроцентСкидки=КлТовСкидка+Товар.ТовСкидка;
//	
//	// Новая цена с учетом скидки накладной
//	Цена=Окр((РознЦена-(РознЦена*ПроцентСкидки/100))*(1-(СкидкаНакл/100)),2);
//	Скидка=ЦенаТовараПоКатегории(Контекст,Константа.РозничнаяКатегорияЦены,1)*Количество*Коэффициент-Сумма;
//	ЦенаСНДС=Цена*(1+(ПроцентНДС(СтавкаНДС)/100));
//	// Пересчитываем сумму товара
//	//              	        Выч_НДС(Context);
//	Выч_суммы_накл(Контекст);
//КонецПроцедуры
//----------------------------------------------
//Процедура УчестьСкидкуНакл()
//	КлГруппа.ИспользоватьДату(ДатаДок);
//	Если КоличествоСтрок()>0 Then
//		ВыбратьСтроки();
//		Пока ПолучитьСтроку()>0 Цикл
//			Товар.ИспользоватьДату(ДатаДок);
//			Если Товар.ЗапретСкидки=Да Тогда
//				// Запрет всех видов скидок
//				Продолжить;
//			КонецЕсли;
//			ПроцентСкидки=0;
//			// Проверим ручное изменение цены
//			// Если цену меняем вручную (РознЦена приравнивается к введенной цене и она отлична от цены из каталога),
//			// тогда   не   действует   ни   одна   скидка
//			Если (РознЦена=Цена) И (РознЦена<>ЦенаТовараПоКатегории(Контекст,Константа.РозничнаяКатегорияЦены,1))  Тогда
//				Продолжить;
//			КонецЕсли;
//			// Проверим скидку в окошечке накладной
//			Если СкидкаНакл<>0 Тогда
//				ПроцентСкидки=СкидкаНакл;
//				// Проверим скидку на товар
//			ИначеЕсли Товар.ТовСкидка<>0 Тогда
//				ПроцентСкидки=Товар.ТовСкидка;
//			Иначе
//				// Получим скидку на товарные группы по данному клиенту
//				КлТовСкидка=ПолучитьКлТовСкидку(Контекст);
//				Если КлТовСкидка<>"нет" Тогда
//					ПроцентСкидки=КлТовСкидка;
//				Иначе
//					// Проверим скидку на клиента
//					Если КлГруппа.КлиентСкидка<>0 Тогда
//						ПроцентСкидки=КлГруппа.КлиентСкидка;
//					Иначе
//						ПроцентСкидки=0;
//					КонецЕсли;
//				КонецЕсли;
//			КонецЕсли;
//			// Новая цена с учетом скидки накладной
//			Цена=Окр(РознЦена-(РознЦена*ПроцентСкидки/100),2);
//			Скидка=ЦенаТовараПоКатегории(Контекст,Константа.РозничнаяКатегорияЦены,1)*Количество*Коэффициент-Сумма;
//			ЦенаСНДС=Цена*(1+(ПроцентНДС(СтавкаНДС)/100));
//			// Пересчитываем сумму товара
//			Выч_суммы_накл(Контекст);
//			
//		КонецЦикла;
//	КонецЕсли;
//КонецПроцедуры
//----------------------------------------------
//Процедура УчестьСкидкуПоСтр()
//	//Клиент.ИспользоватьДату(ДатаДок);
//	Товар.ИспользоватьДату(ДатаДок);
//	Если Товар.ЗапретСкидки=Перечисление.Булево.Да Тогда
//		// Запрет всех видов скидок
//		Возврат;
//	КонецЕсли;
//	ПроцентСкидки=0;
//	// Проверим ручное изменение цены
//	// Если цену меняем вручную (РознЦена приравнивается к введенной цене и она отлична от цены из каталога),
//	// тогда   не   действует   ни   одна   скидка
//	Если (РознЦена=Цена) И (РознЦена<>ЦенаТовараПоКатегории(Контекст,Константа.РозничнаяКатегорияЦены,1))  Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Проверим скидку в окошечке накладной
//	Если СкидкаНакл<>0 Тогда
//		ПроцентСкидки=СкидкаНакл;
//		// Проверим скидку на товар
//	ИначеЕсли Товар.ТовСкидка<>0 Тогда
//		ПроцентСкидки=Товар.ТовСкидка;
//	Иначе
//		// Получим скидку на товарные группы по данному клиенту
//		КлТовСкидка=ПолучитьКлТовСкидку(Контекст);
//		Если КлТовСкидка<>"нет" Тогда
//			ПроцентСкидки=КлТовСкидка;
//		Иначе
//			// Проверим скидку на клиента
//			Если КлГруппа.КлиентСкидка<>0 Тогда
//				ПроцентСкидки=КлГруппа.КлиентСкидка;
//			Иначе
//				// Проверим скидку в окошечке накладной
//				//				Если СкидкаНакл<>0 Тогда
//				//					ПроцентСкидки=СкидкаНакл;
//				//				Иначе
//				// Нет ни одной скидки
//				ПроцентСкидки=0;
//				//				КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//	// Новая цена с учетом скидки накладной
//	Цена=Окр(РознЦена-(РознЦена*ПроцентСкидки/100),2);
//	Скидка=ЦенаТовараПоКатегории(Контекст,Константа.РозничнаяКатегорияЦены,1)*Количество*Коэффициент-Сумма;
//	ЦенаСНДС=Цена*(1+(ПроцентНДС(СтавкаНДС)/100));
//	// Пересчитываем сумму товара
//	//              	        Выч_НДС(Context);
//	Выч_суммы_накл(Контекст);
//КонецПроцедуры
//----------------------------------------------
Процедура Взаиморасчеты()
    Если Клиент.Выбран()=1 Тогда
		//Клиент.ИспользоватьДату(ДатаДок);
		Если ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа Тогда
			Если Клиент.КлГруппа.Выбран()=1 Тогда
				ТекКлиент=Клиент.КлГруппа;
				ТекКлиент.ИспользоватьДату(ДатаДок);
				СумКр=ТекКлиент.СуммаКредита;
			Иначе
				СумКр=Клиент.СуммаКредита;
			КонецЕсли;
			//Если НЕ(СумКр=0) Тогда
				ИнформационнаяСтрока=ДолгПоКредитуНов(Контекст);
			//Иначе
			//	ИнформационнаяСтрока=ДолгПоБН(Контекст);
			//КонецЕсли;
		КонецЕсли;
	Иначе
//		Предупреждение ("Выберите клиента!");
		Возврат;
	КонецЕсли;
КонецПроцедуры
//------------------------
//Процедура УстСкидки()
//	// Установим дилера по клиенту
//	//Клиент.ИспользоватьДату(ДатаДок);
//	УчестьСкидкуНакл();
//КонецПроцедуры                              
//-----------------------------------------------
Процедура Подбор()
	Режим="Каталог";
	ОткрытьПодбор("Номенклатура","ДляПодбора");
	УстановитьЗначениеВПодборе("Склад",Склад);
КонецПроцедуры
//-----------------------------------------------
Процедура ОбработкаПодбора(Выб)
	ЗапросКоличестваВПодборе(Контекст,Режим,Выб);
	УстанЦеныРасх(Контекст,"Подбор");
	Выч_суммы_накл_сНП(Контекст);
	АктивизироватьСтроку();
КонецПроцедуры
//-----------------------------------------------
Процедура ПечатьОрдер()
	Таб=СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Ордер");
	Таб.ВывестиСекцию("ОрдерГ");
	Таб.Опции(0,0,0,0,ПарСтрДок);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Приходный кассовый ордер","");
КонецПроцедуры
//-----------------------------------------------
Процедура Печать()
	Фирма.ИспользоватьДату(ДатаДок);
	Товар.ИспользоватьДату(ДатаДок);
	Таб=СоздатьОбъект("Таблица");
    //бн=Нет;
	Если БН=Перечисление.Булево.Да Тогда
		Таб.ИсходнаяТаблица("БНакл");
	ИначеЕсли (Итог("Скидка")=0) ИЛИ (БезСкидки=1) Тогда
		Таб.ИсходнаяТаблица("Таблица");
	Иначе
		Таб.ИсходнаяТаблица("Таблица2");
	КонецЕсли;
// Получим строку с номерами сертификатов

	Назв="Pavadz®me";
	НомерНакл = НомерДок;
	ОснДок="";
	Если ДокументОснование.Выбран()=1 Тогда
		ОснДок=Шаблон("Pamat.: [ДокументОснование.НомерДок] no [ДокументОснование.ДатаДок]");    
		ОснованиеДоп=ДокументОснование.Основание;
	КонецЕсли;

	НомераСертификатов=СформироватьСтрокуСертификатов(Контекст);
	СпецОтм="";
	ПечСумСкидки="Atlaide (-)";
 //Сформируем печать скидки
	//Если СкидкаНакл=0 Тогда
	//	СпецОтм="";
	//	ПечСумСкидки="Atlaide (-)";
	//ИначеЕсли СкидкаНакл>0 Тогда
	//	СпецОтм="Speciўlas atz®mes: Atlaide  "+СкидкаНакл+"%";
	//	ПечСумСкидки="Atlaide (-)";
	//ИначеЕсли СкидкаНакл<0 Тогда
	//	СпецОтм="Speciўlas atz®mes: Uzcenojums  "+СкидкаНакл*(-1)+" %";
	//	ПечСумСкидки="Uzcenojums (+)";
	//КонецЕсли;
	Таб.ВывестиСекцию("Шапка");
	ВыбратьСтроки();
	Ном=0;
	Пока ПолучитьСтроку() = 1 do
		Ном=Ном+1;
		Таб.ВывестиСекцию("Строка");
		//Если Товар.ВидТовара=Перечисление.ВидыТоваров.Комплект Тогда
		//	Таб.ВывестиСекцию("ВСоставе");
		//	Кмп=СоздатьОбъект("Справочник.Комплектация");
		//	Кмп.ИспользоватьВладельца(Товар);
		//	Кмп.ВыбратьЭлементы();
		//	Пока Кмп.ПолучитьЭлемент()>0 Цикл
		//		Таб.ВывестиСекцию("Состав");
		//	КонецЦикла;
		//	Кмп=0;
		//КонецЕсли;
	enddo;
	Таб.ВывестиСекцию("Подвал");
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Опции(0,0,0,0,ПарСтрДок);
	Таб.Показать("PPR (Sk. naudў): "+НомерДок,"");
КонецПроцедуры
//-----------------------------------------------
Процедура ПечатьСоСроками()
	Рег=СоздатьОбъект("Регистр.ПартииТоваров");
	Фирма.ИспользоватьДату(ДатаДок);
	Таб=СоздатьОбъект("Таблица");
	Если (Итог("Скидка")=0) ИЛИ (БезСкидки=1)  Тогда
		Таб.ИсходнаяТаблица("Таблица1");
	Иначе
		Таб.ИсходнаяТаблица("Таблица3");
	КонецЕсли;
	Назв="Pavadz®me";
	НомерНакл = НомерДок;
	// Получим строку с номерами сертификатов
	НомераСертификатов=СформироватьСтрокуСертификатов(Контекст);
	// Сформируем печать скидки
	СпецОтм=""; 
	ОснДок="";
	ПечСумСкидки="Atlaide (-)";
	//		Если СкидкаНакл=0 Тогда
	//			СпецОтм="";
	//			ПечСумСкидки="Atlaide (-)";
	//		ИначеЕсли СкидкаНакл>0 Тогда
	//			СпецОтм="Speciўlas atz®mes: Atlaide  "+СкидкаНакл+"%";
	//			ПечСумСкидки="Atlaide (-)";
	//		ИначеЕсли СкидкаНакл<0 Тогда
	//			СпецОтм="Speciўlas atz®mes: Uzcenojums  "+СкидкаНакл*(-1)+" %";
	//			ПечСумСкидки="Uzcenojums (+)";
	//		КонецЕсли;    
	
	
	ТЗ=СоздатьОбъект("ТаблицаЗначений");
	ТЗ.НоваяКолонка("Товар","Справочник.Номенклатура");
	ТЗ.НоваяКолонка("Количество","Число",17,3);
	ТЗ.НоваяКолонка("Стоимость","Число",17,5);
	ТЗ.НоваяКолонка("СрокРеализ","Дата");
	
	Рег.ВыбратьДвиженияДокумента(ТекущийДокумент());
	Пока Рег.ПолучитьДвижение()>0 Цикл
		
		ТЗ.НоваяСтрока();
		ТЗ.Товар=Рег.Товар;
		ТЗ.Количество=?(Рег.Приход=1,-Рег.ОстатокТовара,Рег.ОстатокТовара);
		ТЗ.Стоимость=?(Рег.Приход=1,-Рег.Стоимость,Рег.Стоимость);
		ТЗ.СрокРеализ=Рег.СрокРеализации;
	КонецЦикла;
		    
	ТЗ.Свернуть("Товар,СрокРеализ","Количество,Стоимость");
	
	Таб.ВывестиСекцию("Шапка");
	ВыбратьСтроки();
	Ном=0;
	Пока ПолучитьСтроку() = 1 Цикл
		Если Товар.ВидТовара=Перечисление.ВидыТоваров.Услуга Тогда
			ТекКол=Количество*Коэффициент;
			СрокРеализ="";
			Ном=Ном+1;
			Таб.ВывестиСекцию("Строка");
		Иначе
			ТЗ.ВыбратьСтроки();
			Пока ТЗ.ПолучитьСтроку()=1 Цикл
				Если ТЗ.Товар<>Товар Тогда
				    Продолжить;
				КонецЕсли;
			    
				ТекКол=ТЗ.Количество;
				СрокРеализ=ТЗ.СрокРеализ;
			
				// ФИФО
				Ном=Ном+1;
				Таб.ВывестиСекцию("Строка");
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	Таб.ВывестиСекцию("Подвал");
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Опции(0,0,0,0,ПарСтрДок);
	Таб.Показать("PPR (Sk. naudў): "+НомерДок,"");
КонецПроцедуры
//-----------------------------------------------
Процедура ВводНового();   
	
//	
	ЗаполнитьШапку(Контекст);

	Валюта_Прежн=Валюта;
	Курс_Прежн=Курс;
	КатегорияЦены=Пользователь.ОснКатегорияЦены;
	НомераСертификатов="";
	ВидПлатежа=Перечисление.ВидыПлатежа.Наличные;
	ВалютаПлатежа=Валюта;
	СтавкаНДС=Константа.ОсновнаяСтавкаНДС; 
	
	//	              
	Если ТипЗначенияСтр( Форма.Параметр ) = "СписокЗначений" Тогда
		сп = Форма.Параметр;
		семЗаполнитьПоСпискуЗаявок(сп); Возврат;
	КонецЕсли;   

	Если Пользователь.CashCarry=0 Тогда
		Предупреждение("Можно вводить только на основании электронной заявки");
		СтатусВозврата(0);
	КонецЕсли;
	
	СкидкаНакл=0;
	ПрогресСкидка=0;
////	ТекНом=Строка(Число(Прав(НомНакладной,(СтрДлина(НомНакладной)-5)))+1);
	ФлНовыйДок=1;
//    //Пока СтрДлина(ТекНом)<6 Цикл
//    //		ТекНом="0"+ТекНом;
//	//КонецЦикла;
////	НомерДок=Лев(НомНакладной,5)+ТекНом;
//	//ВидТорговли=Перечисление.ВидыТорговли.ЗаНал;
//	//ТипНакладной=Перечисление.ТипыНакладных.Расходная;
	ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа;
	ДатаДок=РабочаяДата();
//    Валюта=Константа.ОсновнаяВалютаПродажи;
	Дата_Курса=ДатаДок;
	Курс=КурсДляВалюты(Валюта,Дата_Курса);
//	Фирма=Константа.ОсновнаяФирма;
//	
	Клиент=Константа.ЧастноеЛицо;         
//	
	Склад	= ?(ПустоеЗначение(РозничныйТорговыйСклад) = 0,
	            РозничныйТорговыйСклад,
				Константа.ОсновнойСклад);
	
	// проверка установки рзничного склада
	Если ПустоеЗначение(РозничныйТорговыйСклад) = 1 Тогда
		Сообщить("Для рабочего места """ + Пользователь + """ не определен розничный торговый склад!");
		Сообщить("Использован Склад по умолчанию!");
	КонецЕсли;
//	              
	ЧекПробитККМ=0;
	ККМ=0;
	Получено=0;
	Получено1=0;
	ПолученоКарта=0;
	ПолученоПодарочнаяКарта=0;    
	ПодарочнаяКарта=0;
//	
	Товар.ИспользоватьДату(ДатаДок);
КонецПроцедуры

//-----------------------------------------------
Процедура ВводНаОсновании(ДокОснование) 
	Перем Парам;
	Если семМожноВводитьНаОснованииСчета( ДокОснование, "Расходная" ) = 0 Тогда СтатусВозврата( 0 ); Возврат; КонецЕсли;
	Если семМожноВводитьНаОснованииСчета( ДокОснование, "Перемещение" ) = 0 Тогда СтатусВозврата( 0 ); Возврат; КонецЕсли;
	Если семМожноВводитьНаОснованииСчета( ДокОснование, "СнятиеРезерва" ) = 0 Тогда СтатусВозврата( 0 ); Возврат; КонецЕсли;

	СтавкаНДС=Константа.ОсновнаяСтавкаНДС;
	
	Если ДокОснование.Вид() = "Счет" Тогда
		// сем \\           
		
		Если ДокОснование.ПометкаУдаления() = 1 Тогда
			Сообщить("Нельзя вводить документ на основании удаленного документа.","I");
			СтатусВозврата( 0 );
			Возврат;
		КонецЕсли;
		Если ДокОснование.Проведен() = 0 Тогда
			Сообщить("Нельзя вводить документ на основании непроведенного документа.","I");
			СтатусВозврата( 0 );
			Возврат;
		КонецЕсли;
		
		ЗаполнениеПоРезервам=0;
		Если (Константа.НовыйМеханизмПретензий.Получить(ДатаДок)=Да) Тогда
			ЗаполнениеПоРезервам=1;
		КонецЕсли;
		
		Если (ПустоеЗначение(ДокОснование.Склад.МестоКомплектации)=1) И (ДокОснование.Клиент <> ДокОснование.КлиентФилиала) Тогда //только для заявок введенных локально
			ЗаполнениеПоРезервам=0;
		КонецЕсли;
		
		Если  ЗаполнениеПоРезервам=1 Тогда
			СостЗаявки=глПолучитьСостояниеЗаявки(ДокОснование);
			Если СостЗаявки="Ожидает отгрузки" Тогда
				сп=СоздатьОбъект("СписокЗначений");
				сп.ДобавитьЗначение(ДокОснование);
				семЗаполнитьПоСпискуЗаявок(сп);
			Иначе
				Предупреждение("Нельзя оформлять документ на основании заявки в состоянии <"+СостЗаявки+">!");
				СтатусВозврата(0);				
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		// сем //
		Если ПустоеЗначение(ДокОснование.Комплектовщик)=0 Тогда
			Комплектовщик=ДокОснование.Комплектовщик;
		Иначе
			Комплектовщик = семВыбратьКомплектовщика();
			Если Комплектовщик.Выбран() = 0 Тогда
				Предупреждение( "Не выбран комплектовщик." );
				СтатусВозврата( 0 );
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьШапку(Контекст);  
	
	
	Парам = Форма.Параметр;
	Если ПустоеЗначение(Парам) = 0 Тогда
		Если Строка(Парам) = "СписокЗначений" Тогда
			Пер1 = Парам.НайтиЗначение("ВидПлатежа");
			Если Пер1 > 0 Тогда
				Пер2 = 0;
				Парам.ПолучитьЗначение(Пер1,Пер2);
				Если Пер2 = "1" Тогда
					ВидПлатежа = Перечисление.ВидыПлатежа.Наличные;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Автор=Пользователь;
	Если (ДокОснование.Вид()="Счет") ИЛИ
		 (ДокОснование.Вид()="ЗаказОтПокупателя") ИЛИ
		 (ДокОснование.Вид()="РасходнаяНакладная")  Тогда
		Если СокрП(НомерДок)="" Тогда
			НомерДок="Рн-00001";
		КонецЕсли;

		// Только для заявок, готовых к введению Накладной!!!
		Если ДокОснование.Проведен()=0 Тогда
//			Сообщить("Проведите документ Счет перед вводом накладной!");
//			Возврат;
		КонецЕсли;        
		
		Если глЕстьРеквизитШапки("НомерКарты",ДокОснование.Вид())=1 Тогда
			НомерКарты = ДокОснование.НомерКарты;
		КонецЕсли;
		
		ДокументОснование=ДокОснование;
		НомераСертификатов="";
		ПризнакНакладной=Перечисление.ПризнРасхНакл.Продажа;
		
		ДатаДок=РабочаяДата();
		Склад=ДокОснование.Склад;
		Валюта=ДокОснование.Валюта;
		Дата_Курса=ДокОснование.Дата_Курса;
		Курс=ДокОснование.Курс;
		Валюта_Прежн=Валюта;
		Курс_Прежн=Курс;
		Фирма=ДокОснование.Фирма;
		Клиент=ДокОснование.Клиент;
		ВыборКлиента();
		СкидкаНакл=ДокОснование.СкидкаНакл;
		Если ДокОснование.Агент.Выбран() = 1 Тогда
			Агент=ДокОснование.Агент;
		КонецЕсли;
		КатегорияЦены=ДокОснование.КатегорияЦены;
//		ТипУчета=Общ;
		
		Товар.ИспользоватьДату(ДатаДок);
		
		Если ПустоеЗначение(КатегорияЦены)=1 Тогда
			КатегорияЦены=Константа.ОсновнаяКатегорияЦены;
		КонецЕсли;

		Основание="PasЅt®jums Nr " + ДокОснование.НомерДок + " no " + ДокОснование.ДатаДок;
		
		
		Если ДокОснование.Вид()="Счет" Тогда    
			//ДокТест = СоздатьОбъект("Документ");
			//Если ДокТест.ВыбратьПодчиненныеДокументы(,,ДокОснование) = 1 Тогда
			//	Пока ДокТест.ПолучитьДокумент() = 1 Цикл
			//		Если ДокТест.ПометкаУдаления() = 1 Тогда
			//			Продолжить;
			//		КонецЕсли;
			//		Предупреждение("Электронка "+ДокОснование+" уже имеет подчиненный документ "+ДокТест);
			//		СтатусВозврата(0);
			//	КонецЦикла;
			//КонецЕсли;			
			ЦЧ=ДокОснование.ЦЧ;
			БН=?(ЦЧ=1,ДА,НЕТ);
			Основание="Pr.piepras®jums Nr." + ДокОснование.НомерДок + " no " + ДокОснование.ДатаДок;
		КонецЕсли;   
		
		ДокОснование.ВыбратьСтроки();
		Пока ДокОснование.ПолучитьСтроку()=1 Цикл
			НоваяСтрока();
			Товар=ДокОснование.Товар;
			ТовКод=Товар.Код;
			
			Цена=Пересчет(ДокОснование.Цена,ДокОснование.Валюта,ДокОснование.Курс,Валюта,Курс);
			ЦенаСНДС=Пересчет(ДокОснование.ЦенаСНДС,ДокОснование.Валюта,ДокОснование.Курс,Валюта,Курс);
			Цена=Окр(Цена,2);
			Единица=ДокОснование.Единица;
			Коэффициент=ДокОснование.Коэффициент;
			Количество=ДокОснование.Количество;
			Сумма=Пересчет(ДокОснование.Сумма,ДокОснование.Валюта,ДокОснование.Курс,Валюта,Курс);
			НДС=Пересчет(ДокОснование.НДС,ДокОснование.Валюта,ДокОснование.Курс,Валюта,Курс);

			Если ЦЧ=1 Тогда
				ЦенаЦЧ=ЦенаСНДС;
				СуммаЦЧ=Сумма+НДС;
			КонецЕсли;
			
			Всего=Сумма+НДС;
			РознЦена=Пересчет(ДокОснование.РознЦена,ДокОснование.Валюта,ДокОснование.Курс,Валюта,Курс);
			Скидка=Пересчет(ДокОснование.Скидка,ДокОснование.Валюта,ДокОснование.Курс,Валюта,Курс);
			ВидСкидки=ДокОснование.ВидСкидки;
		КонецЦикла;
		
		 Если ДокОснование.Вид()="РасходнаяНакладная" Тогда
			Если ДокОснование.ДокументОснование.Вид()="Счет" Тогда
			    ДокументОснование=ДокОснование.ДокументОснование;
				Основание=ПеревестиНаГосЯзык(ДокументОснование.Вид())+" Nr. " + ДокументОснование.НомерДок + " no " + ДокументОснование.ДатаДок;
			КонецЕсли;                       
		 	
		 	Отв=Вопрос("Расходная накладная вводится на основании Расходной за Нал. Пометить на удаление Расходную Нал?",4);
		 	Если Отв=6 Тогда      //Да
				Если ДокОснование.ДатаДок > Константа.ДатаЗапретаРедактирования Тогда
			 		Док1=СоздатьОбъект("Документ."+ДокОснование.Вид());
			 		ТекДок=ДокОснование.ТекущийДокумент();
			 		Док1.НайтиДокумент(ТекДок);
			 		Если Док1.Выбран()>0 Тогда
			 			Сообщить(ДокОснование.Вид()+" "+ТекДок.НомерДок+" от "+
						ТекДок.ДатаДок+" помечена на удаление.");
			 			//Закомментировано Инсталлятором МОД:Док1.Удалить(0);
			//Начало текста, вставленного Инсталлятором МОД
		//				Док1.Удалить(0);
						ОбъектУдалить(Док1, 0);
						ЗаписьЖурналаРегистрации( "Документ "+Док1.ДокументОснование.Вид()+" номер "+Док1.ДокументОснование.НомерДок+" помечен на удаление","Документы", "Документ помечен на удаление", Док1.ТекущийДокумент(), 2 );
						//Конец текста, вставленного Инсталлятором МОД
					КонецЕсли;
				Иначе
					Сообщить( "Нельзя удалять документ раньше даты запрета редактирования!", "!" );
					СтатусВозврата( 0 );
					Возврат;
		 		КонецЕсли;
		 	КонецЕсли;
		Конецесли;
		
	Иначе
		Предупреждение("Эту накладную нельзя вводить на основании выбранного вида документа!!!");
		СтатусВозврата(0);
	КонецЕсли;
КонецПроцедуры
//-----------------------------------------------
Процедура ЗаписьНомера() 
	БН=Нет;
	Если БН=Перечисление.Булево.Да Тогда
 		Если ФлНовыйДок=1 Тогда
			//ЗаписатьНомер(Контекст);
		КонецЕсли;
	Иначе
		НомНакладной=НомерДок;
	КонецЕсли;
КонецПроцедуры
//---------------------------------------------------
Процедура ПолучениеНомера()
	БН=Нет;
	Если БН=Перечисление.Булево.Да Тогда
 		Если ФлНовыйДок=1 Тогда
			//НомерДок=ПолучитьНомер(Контекст);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Процедура ОбработкаВыбораЗначения(ВыбЗнач,ИдЭлДиал,ФлСтОбр)
	Если ИдЭлДиал = "Агент" Тогда
//	    Если ОчищениеТаблЧасти(Контекст) = 0 Тогда
//	        ФлСтОбр = 0;
//	    КонецЕсли;
	КонецЕсли;
	Если ИдЭлДиал = "Клиент" Тогда
    	стар_Клиент = Клиент;
	КонецЕсли;            
	
	
КонецПроцедуры
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Процедура семПечатьLT(пСроки)
	сп = СоздатьОбъект( "СписокЗначений" );
	сп.Установить( "Скидки", ?(БезСкидки=1,1,2) );
	сп.Установить( "Документ", ТекущийДокумент() );
	сп.Установить( "Сроки", пСроки );
	сп.Установить( "Язык", "Лит" );
	сп.Установить( "Номер", 1 );
	сп.Установить( "Наловая", 1 );
	ОткрытьФорму( "Отчет", сп, КаталогИБ() + "ExtForms\Печать\ПечатьНакладнойLT.ert" );
КонецПроцедуры

Процедура семПечатьEE(пСроки)
	сп = СоздатьОбъект( "СписокЗначений" );
	сп.Установить( "Скидки", ?(БезСкидки=1,1,2) );
	сп.Установить( "Документ", ТекущийДокумент() );
	сп.Установить( "Сроки", пСроки );
	сп.Установить( "Язык", "Лит" );
	сп.Установить( "Номер", 1 );
	сп.Установить( "Наловая", 1 );
	ОткрытьФорму( "Отчет", сп, КаталогИБ() + "ExtForms\Печать\ПечатьНакладнойEE.ert" );
КонецПроцедуры

Процедура семПечать(Сроки)
	Если Выбран() = 0 Тогда 
		Сообщить("Ошибка печати накладной.","!");
		Сообщить("Можно печатать только записанную накладную.","I");
		Возврат; 
	КонецЕсли;
	//Если Проведен() = 0 Тогда 
	//	Сообщить("Ошибка печати накладной.","!");
	//	Сообщить("Нельзя печатать непроведенную накладную.","I");
	//	Возврат; 
	//КонецЕсли;
	сп = СоздатьОбъект( "СписокЗначений" ); 
	Если семТекСтрана() = "LV" Тогда
		сп.Установить( "Печать ( LV )", 1 );
		Путь = КаталогИБ() + "ExtForms\Печать\ПечатьНакладнойLV.ert";
		//Если ФС.СуществуетФайл( Путь ) = 1 Тогда 
		//	сп.Установить( "Печать ( LV ) (на бланк)", 2 );
		//КонецЕсли;
	ИначеЕсли семТекСтрана() = "LT" Тогда
		семПечатьLT(0);
	ИначеЕсли семТекСтрана() = "EE" Тогда
		сп.Установить( "Печать ( EE ) со сроками", 10 );
		сп.Установить( "Печать ( EE ) без сроков", 11 );
	КонецЕсли;
	
	Если сп.РазмерСписка()=1 Тогда
		зн = 1;
	Иначе
		зн = ""; Если сп.ВыбратьЗначение( зн ,,,, 1 ) = 0 Тогда Возврат; КонецЕсли;
	КонецЕсли;
	Если зн = 1 Тогда 
		//Печать();
		спПарам = СоздатьОбъект( "СписокЗначений" );
		спПарам.Установить( "Документ", контекст );
		спПарам.Установить( "Заголовок", 1 );
		спПарам.Установить( "ПечШтрихКод", 0 ); 
		ОткрытьФорму( "Обработка", спПарам, Путь );
	ИначеЕсли зн = 2 Тогда 
		спПарам = СоздатьОбъект( "СписокЗначений" );
		спПарам.Установить( "Документ", контекст );
		спПарам.Установить( "Заголовок", 0 );
		спПарам.Установить( "ПечШтрихКод", 0 ); 
		ОткрытьФорму( "Обработка", спПарам, Путь );
	ИначеЕсли зн = 10 Тогда семПечатьEE(1);
	ИначеЕсли зн = 11 Тогда семПечатьEE(0);
	КонецЕсли;
	
	//Если семТекСтрана() = "LV" Тогда
	//	Если Сроки = 1 Тогда
	//		ПечатьСоСроками();
	//	Иначе
	//		Печать();
	//	КонецЕсли;
	//ИначеЕсли семТекСтрана() = "LT" Тогда
	//	семПечатьLT(Сроки);
	//КонецЕсли;
КонецПроцедуры

//Процедура кнПровести()
//	//#Провести
//	стар_ПриЗаписи();
//	Записать();
//	семСозданиеПретензии(контекст);
//	Провести();
//КонецПроцедуры

//Процедура кнЗаписать()
//	//#Записать
//	стар_ПриЗаписи();
//	Записать();
//	семСозданиеПретензии(контекст);
//КонецПроцедуры

//Процедура кнОК()
//	//ЗаписьНомера();#Записать Провести? Закрыть
//	ЗаписьНомера();
//	стар_ПриЗаписи();
//	Записать();
//	семСозданиеПретензии(контекст);
//	Провести();
//	Форма.Закрыть(0);
//КонецПроцедуры
                             
Процедура ПоказатьЦЧ()
	
	Если ПустоеЗначение(ДокументОснование)=0 Тогда
		ИтогоОсн=Окр(ДокументОснование.Итог("Сумма")+ДокументОснование.Итог("НДС"),2);
		ИтогоДок=Окр(Итог("Сумма")+Итог("НДС"),2);
		Предупреждение("Сумма полная: "+Формат(ИтогоОсн,"Ч12.2")+РазделительСтрок+
						"Сумма по документу: "+Формат(ИтогоДок,"Ч12.2")+РазделительСтрок+
						"Разница: "+Формат(ИтогоОсн-ИтогоДок,"Ч12.2"));
		
	КонецЕсли;
КонецПроцедуры

Процедура ВводНомераКарты()
	Параметр_	= СоздатьОбъект("СписокЗначений");
	Параметр_.ДобавитьЗначение("", "НомерКарты");
	Параметр_.ДобавитьЗначение("", "СрокГодности");
	Параметр_.ДобавитьЗначение(0, "Скидка");
	Параметр_.ДобавитьЗначение("", "Клиент");
	Параметр_.ДобавитьЗначение("", "Критерий");
	
	// открываем форму обработки
	ОткрытьФормуМодально("Обработка.ВводНомераСкидочнойКарты", Параметр_);
	
	// получаем параметр возврата.
	Если Параметр_.Получить("СтатусВозврата") = 0 Тогда
		Возврат;
	КонецЕсли;

	пКлиент = Параметр_.Получить("Клиент");
	НомерКарты = Параметр_.Получить("НомерКарты");
	СкидкаПоКарте = Параметр_.Получить("Скидка");

	Если ПустоеЗначение(пКлиент)=0 Тогда
		Клиент = пКлиент;
		ВыборКлиента();
	КонецЕсли;

	пКритерий = Параметр_.Получить("Критерий");
	Если ПустоеЗначение(пКритерий)=0 Тогда
		поз=0;
		Если ТабСтатистики.НайтиЗначение(пКритерий.Владелец,поз,"Критерий")=1 Тогда
			ТабСтатистики.ПолучитьСтрокуПоНомеру(поз);
		Иначе
			ТабСтатистики.НоваяСтрока();
			ТабСтатистики.Критерий = пКритерий.Владелец;
		КонецЕсли;
		ТабСтатистики.Значение = пКритерий;
		УстановкаДоступностиКнопокТаблицы();
	КонецЕсли;
	
	ККМ = ККМФискальногоРегистратора;
	НомерКарты = Параметр_.Получить("НомерКарты");
	
	ПересчетЦен();	
	
КонецПроцедуры

//------------------------------------------------------------------------------
Функция ВыбратьЗначениеКритерия(Таб)
	СпрЗначКрит = СоздатьОбъект("Справочник.ЗначенияСтатКритериев");
	СпрЗначКрит.ИспользоватьВладельца(Таб.Критерий);
	СпрЗначКрит.ВыборГруппы(0);
	флВвода = СпрЗначКрит.Выбрать("Введите значение критерия","ФормаСписка");
	Если флВвода=1 Тогда
		Таб.Значение = СпрЗначКрит.ТекущийЭлемент();
	КонецЕсли; 
	Возврат флВвода;
КонецФункции   //ВыбратьЗначениеКритерия


Процедура кнЗаполнитьКритерии() 
	Если Вопрос("Все данные из таблицы будут удалены!"+РазделительСтрок+"Продолжить?", "Да+Нет") = "Нет" Тогда
		Возврат;
	КонецЕсли;                                         
	ТабСтатистики.УдалитьСтроки();
	СпрКритерии = СоздатьОбъект("Справочник.СтатКритерии");
	СпрКритерии.ВыбратьЭлементы();
	Пока СпрКритерии.ПолучитьЭлемент() = 1 Цикл
		ТабСтатистики.НоваяСтрока();
		ТабСтатистики.Критерий = СпрКритерии.ТекущийЭлемент();
	КонецЦикла;
	
	УстановкаДоступностиКнопокТаблицы();
КонецПроцедуры   //кнЗаполнитьКритерии     


//------------------------------------------------------------------------------
Процедура ПриРедактированииТаблицы(Таб)
	Перем Условие,Текст,ТекКол;
	ТекКол = Таб.ТекущаяКолонка();
	Если (Форма.ТолькоПросмотр()=1) ИЛИ (Таб.КоличествоСтрок()=0) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекКол = "Критерий" Тогда     
		Если глВвестиЗначениеВТаблицу(Таб,,,,"Введите статистический критерий")=1 Тогда
			Форма.Обновить(1);
		КонецЕсли;
	ИначеЕсли ТекКол = "Значение" Тогда                        
		Если Таб.Критерий.Выбран() = 0 Тогда
			Таб.ТекущаяКолонка("Критерий");
			ПриРедактированииТаблицы(Таб);
			//Таб.ТекущаяКолонка("Значение");
			//ПриРедактированииТаблицы(Таб);
		ИначеЕсли ВыбратьЗначениеКритерия(Таб) = 1 Тогда
			Форма.Обновить(1);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ПриРедактированииТаблицы    ОбработкаПодбора


Процедура КнДобавить()
	Если глВвестиЗначениеВТаблицу(ТабСтатистики,-1,"Критерий",,"Введите статистический критерий") = 1 Тогда
		Если ТабСтатистики.Критерий.Выбран() = 1 Тогда
			ВыбратьЗначениеКритерия(ТабСтатистики);
		КонецЕсли;
		Форма.Обновить(1);
		Активизировать("ТабСтатистики");
	КонецЕсли;
	УстановкаДоступностиКнопокТаблицы();
КонецПроцедуры   //КнДобавить
//------------------------------------------------------------------------------
Процедура КнИзменить(ТекКодСтроки="")
	ПриРедактированииТаблицы(ТабСтатистики);
	Активизировать("ТабСтатистики");
	УстановкаДоступностиКнопокТаблицы();
КонецПроцедуры   //КнИзменить
//------------------------------------------------------------------------------
Процедура КнУдалить()
	ТабСтатистики.УдалитьСтроку();
	Форма.Обновить(1);
	Активизировать("ТабСтатистики");
	УстановкаДоступностиКнопокТаблицы();
	
КонецПроцедуры   //КнУдалить     
//------------------------------------------------------------------------------
Функция ФорматВывода( парам )
	Если парам = "НомерЗаявки" Тогда
		Возврат ?(Счет.Выбран() = 1,Счет.НомерДок,"");
	КонецЕсли;
	
	Возврат "";
КонецФункции


//-----------------------------------------------
// При входе в Форму запомним промежуточные переменные
Валюта_Прежн=Валюта;
Курс_Прежн=Курс;
ТипЦен=Перечисление.ТипыРасхЦен.Розничные;
НомераСертификатов="";
Товар.ИспользоватьДату(ДатаДок);

ФлНовыйДок=0;

Форма.ИспользоватьЗакладки(1);
Форма.Закладки.УдалитьВсе();
Форма.Закладки.ДобавитьЗначение("Основная","Основная");
Форма.Закладки.ДобавитьЗначение("Статистика","Статистика");

//******************************************************************************
ТабСтатистики.НоваяКолонка("Критерий","Справочник.СтатКритерии",,,"Критерий",,,1);
ТабСтатистики.НоваяКолонка("Значение","Справочник.ЗначенияСтатКритериев",,,"Значение критерия",,,1);


form.DefButton("кнОК");//Stas