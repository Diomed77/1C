Перем Парт;
Перем РегПарт;
Перем СписыватьТоварВНоль;
Перем НужноСписать;

Процедура СнятиеРезерва( регРезервыТоваров, пЗаявка )
	
КонецПроцедуры

Процедура ПеремещениеПоПартиям(ТУ)
	//партии и склады           
	
	Если (ТУ="Упр") Тогда
		Если Константа.МетодРасчетаСебестоимостиУправленческогоУчета.Выбран()=0 Тогда
			Возврат ; // учет Упр. не ведется
		КонецЕсли;
		РегФирма=Фирма;
	ИначеЕсли (ТУ="Фин") Тогда  
		Если Фирма.МетодРасчетаСебестоимостиФинансовогоУчета.Выбран()=0 Тогда
			Возврат ; // учет Фин. не ведется
		КонецЕсли;
		РегФирма=Фирма;
	Иначе
		Сообщить("Неверно задан тип учета партий товаров по "+ТекущийДокумент());
		Возврат;   
	КонецЕсли;                               
	
	// склпарт
	Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
		РегСклад=Склад;
	Иначе
		РегСклад="";
	КонецЕсли;
	
	//-- -- -- --	
	
	Если ТУ="Фин" Тогда
		ПромФирма=Фирма;
	Иначе
		ПромФирма=Фирма;
	КонецЕсли;
	
	// склпарт
	Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
		ПромСклад=Склад;
	Иначе
		ПромСклад=СоздатьОбъект("Справочник.МестаХранения");
	КонецЕсли;		
	
	НадоСписать=НужноСписать;
	КоличествоПоРеализации=НадоСписать;
	Себестоимость=0;
	РегПарт.УстановитьФильтр(ПромФирма,Товар,,,,ПромСклад);
	РегПарт.ВыгрузитьИтоги(Парт,1,1); 
	Если ((ТУ="Фин") И (Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.FIFO)) Тогда
		Парт.Сортировать("+СрокРеализации,-Статус,+ПрихДокумент",1);
	ИначеЕсли ((ТУ="Фин") И (Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO)) Тогда 
		Парт.Сортировать("-СрокРеализации,-Статус,-ПрихДокумент",1);
	ИначеЕсли ((ТУ="Фин") И (Фирма.МетодРасчетаСебестоимостиФинансовогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему)) Тогда	
		Парт.Сортировать("-Статус,+ПрихДокумент",1);
	ИначеЕсли ((ТУ="Упр") И (Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.FIFO)) Тогда
		Парт.Сортировать("+СрокРеализации,-Статус,+ПрихДокумент",1);
	ИначеЕсли ((ТУ="Упр") И (Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.LIFO)) Тогда
		Парт.Сортировать("-СрокРеализации,-Статус,-ПрихДокумент",1);
	ИначеЕсли ((ТУ="Упр") И (Константа.МетодРасчетаСебестоимостиУправленческогоУчета=Перечисление.МетодыРасчетаСебестоимости.ПоСреднему)) Тогда	
		Парт.Сортировать("-Статус,+ПрихДокумент",1);                            
	КонецЕсли;	
	
	Парт.ВыбратьСтроки();
	Пока Парт.ПолучитьСтроку()=1 Цикл
		Если НадоСписать=0 Тогда
			Прервать;
		КонецЕсли; 
		Контр=Парт.Контрагент;
		ПромДок=Парт.ПрихДокумент;
		Партия=Парт.Партия;
		R=Парт.Статус;
		СрокРеал=Парт.СрокРеализации;
		ОтатокПартииКол=Парт.ОстатокТовара;
		ОтатокПартииВал=Парт.Стоимость;
		ОтатокПартииНДС=Парт.НДС;
		ОстатокПродВал=Парт.ПродСтоимость;
		
		Если ОтатокПартииКол<0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОтатокПартииКол>=НадоСписать Тогда
			СписатьКол=НадоСписать;
		Иначе
			СписатьКол=ОтатокПартииКол;
		КонецЕсли;
		Если ОтатокПартииКол=0 Тогда
			СписатьВал=ОтатокПартииВал;       
			СписатьНДС=ОтатокПартииНДС;
			СписатьПродВал=ОстатокПродВал;
		Иначе
			СписатьВал=ОтатокПартииВал/ОтатокПартииКол*СписатьКол;
			СписатьНДС=ОтатокПартииНДС/ОтатокПартииКол*СписатьКол;
			СписатьПродВал=ОстатокПродВал/ОтатокПартииКол*СписатьКол;
		КонецЕсли; 
		      
		Фл=5;
	    Если (КатегорияСписания=Перечисление.КатегорииСписания.Категория1) 
			ИЛИ (КатегорияСписания=Перечисление.КатегорииСписания.Категория2) Тогда
			Фл=51; //Учет продаж	
		ИначеЕсли (КатегорияСписания=Перечисление.КатегорииСписания.Категория6) Тогда //Списание Ингредиентов на производство
	    	Фл=56;
	    КонецЕсли;
		
		Регистр.ПартииТоваров.ДвижениеРасход(ПромФирма,Товар,R,Контр,ПромДок,Склад,Партия,СрокРеал,СписатьКол,СписатьВал,СписатьПродВал,СписатьНДС,,,,"С",,Фл,);
		НадоСписать=НадоСписать-СписатьКол;
	КонецЦикла;
	
	//-------------------
 	Если НадоСписать>0 Тогда  
 		Фл=5;
 		СписатьКол=НадоСписать;
 		Контр=СоздатьОбъект("Справочник.Контрагенты");
 		ПромДок=ТекущийДокумент();
 		СписатьВал=Товар.ЦенаПриобретения*КурсДляВалюты(Товар.ВалютаЗакупки,ДатаДок)*СписатьКол;       
		СписатьНДС=СписатьВал*(ПроцентНДС(Товар.СтавкаНДС)/(100+ПроцентНДС(Товар.СтавкаНДС)));;
		СписатьПродВал=Товар.РозничнаяЦена.Получить(ДатаДок)*СписатьКол;
 		Регистр.ПартииТоваров.ДвижениеРасход(ПромФирма,Товар,R,Контр,ПромДок,Склад,,,СписатьКол,СписатьВал-СписатьНДС,СписатьПродВал-СписатьНДС,СписатьНДС,,,,"?",,Фл,);
		СебестоимостьШ=СебестоимостьШ+СписатьВал-СписатьНДС;
 	КонецЕсли;	
КонецПроцедуры	
// ---------------  
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения() Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ОбработкаПроведения()
//Закомментировано Инсталлятором МОД:Процедура ОбработкаПроведения()
	Если семМожноПровести( Контекст ) = 0 Тогда Возврат; КонецЕсли;
	//Если ДатаДок>ТекущаяДата() Тогда
	//	НеПроводить(Контекст,"Нельзя проводить документ будущей датой!");
	//	Возврат;
	//КонецЕсли;

	Если ГрупповаяОбработка()=0 Тогда
		//Если семЕстьПраво( "Документ", "Списание", "Проведение" ) = 0 Тогда
		//	Предупреждение("Недостаточно прав.","10"); СтатусВозврата( 0 ); Возврат;
		//КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(КатегорияСписания)=1 Тогда
		НеПроводить(Контекст,"Не указана категория списания!");
		Возврат;   
	КонецЕсли;
	
	Если Склад.Выбран()=0 Тогда
		НеПроводить(Контекст,"Не указан склад по которому производится списание!");
		Возврат;   
	КонецЕсли;
	
	Если глПроверкаСкладаПоПользователю(Контекст,Склад)=0 Тогда
		НеПроводить(Контекст,"Нельзя использовать данный склад!");
		Возврат;
	КонецЕсли;

	Если (Агент.Выбран()=0) И (ДатаДок>='01.09.08') Тогда
		НеПроводить(Контекст,"Не указан агент на структуру которого производится списание!");
		Возврат;   
	КонецЕсли;
                                    
	
	Если ГрупповаяОбработка()=0 Тогда
		Если (ПустоеЗначение(Пользователь.ГруппаАгентов)=0) И (Агент.ПринадлежитГруппе(Пользователь.ГруппаАгентов)=0)  И (ДатаДок>='01.09.08') Тогда
			НеПроводить(Контекст,"Вы не можете списывать затраты на данное подразделение. Вы можете списывать затраты только на подразделение <"+Пользователь.ГруппаАгентов+">");
		КонецЕсли;
	КонецЕсли;
	
	Если ПроверкаДублейСтрок(Контекст)=1 Тогда 
		Сообщить("В документе строки с одинаковым товаром!");
//		Возврат;
	КонецЕсли;          

	//PR 28.01.08 Begin
	Если ГрупповаяОбработка()=0 Тогда
		Если ((КатегорияСписания=Перечисление.КатегорииСписания.Репрезентация) ИЛИ 
			  (КатегорияСписания=Перечисление.КатегорииСписания.ПодаркиСотрудникам) ИЛИ 
			  (КатегорияСписания=Перечисление.КатегорииСписания.ПодаркиКлиентам) ИЛИ 
			  (КатегорияСписания=Перечисление.КатегорииСписания.ПраздникФирмы)) Тогда
			  
			Если (ПустоеЗначение(СкладДепартамента)=1) И (ДатаДок<'01.09.08') Тогда
				НеПроводить(Контекст,"Должен быть указан департамент!");
				Возврат;
			ИначеЕсли ПустоеЗначение(СкладДепартамента)=0 Тогда
				Если СкладДепартамента.Собственный=1 Тогда
					        
					Если (ДатаДок>='01.09.08') Тогда
						НеПроводить(Контекст,"В данной категории списания списания на собственный департамент оформляются через агента!");
					КонецЕсли;
					//когда собственный департамент - обнуляем продажу
					ВыбратьСтроки();
					Пока ПолучитьСтроку()=1 Цикл
						Цена=0;
						ЦенаСНДС=0;
						Сумма=0;
						НДС=0;					
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
			  
		КонецЕсли;
	КонецЕсли;   
	//PR 28.01.08 End

	ВремРегистры=СоздатьОбъект("Регистры");
	ВремРегистры.Актуальность(1);
	Фирма.ИспользоватьДату(ДатаДок);
	// сем \\
	ЕстьЗаявка = 0;
	Если ДокументОснование.Выбран() = 1 Тогда
		Если ДокументОснование.Вид() = "Счет" Тогда
			Если ДокументОснование.Проведен()=1 Тогда
				ЕстьЗаявка = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если (КатегорияСписания = Перечисление.КатегорииСписания.Категория1) ИЛИ (КатегорияСписания = Перечисление.КатегорииСписания.Категория2) Тогда
		СписыватьТоварВНоль=Склад.РазрСписТоваровВНоль.Получить(ДатаДок);
	Иначе
		СписыватьТоварВНоль=0;
	КонецЕсли;
	
	Если ЕстьЗаявка = 1 Тогда
		регРезервы = ВремРегистры.РезервыТоваров; 
		регСпецЗаказы = ВремРегистры.СпецЗаказы;
		регКомпл = ВремРегистры.КомплектацияЗаявок;
	КонецЕсли;
	// сем //

	РегПарт=ВремРегистры.ПартииТоваров;
	Рег=ВремРегистры.ОстаткиТоваров;
	рег1=ВремРегистры.РезервыТоваров;
	РегНТ=ВремРегистры.НедоступныеТовары;
	
	Парт=СоздатьОбъект("ТаблицаЗначений");
	Если ИтогиАктуальны()=0 Тогда
		// если итоги не актуальны, то стоимости берем из временногно расчета Регистра
		РегПарт.ВременныйРасчет();
		
		УстановленВремРасч=0;
		// если итоги не актуальны, то стоимости берем из временногно расчета Регистра

//		Рег.УстановитьЗначениеФильтра("Склад",Склад,1);
		
		Если Константа.ПартииНаСкладах=Перечисление.Булево.Да Тогда
			РегПарт.УстановитьЗначениеФильтра("Склад",Склад,1);
			РегНТ.УстановитьЗначениеФильтра("Склад",Склад,1);
		КонецЕсли;
		
		ТоварЛист=СоздатьОбъект("СписокЗначений");
		ВыгрузитьТабличнуюЧасть(ТоварЛист,"Товар");
		
		Рег.УстановитьЗначениеФильтра("Товар",ТоварЛист,2);
		рег1.УстановитьЗначениеФильтра("Товар",ТоварЛист,2);
		РегПарт.УстановитьЗначениеФильтра("Товар",ТоварЛист,2);
		РегНТ.УстановитьЗначениеФильтра("Товар",ТоварЛист,2);
           
		Рег.ВременныйРасчет();
		рег1.ВременныйРасчет(); 
		РегНТ.ВременныйРасчет();
		// сем \\
		Если ЕстьЗаявка = 1 Тогда
			регРезервы.УстановитьЗначениеФильтра( "ПоСчету", ДокументОснование, 1 );
			регРезервы.ВременныйРасчет();
			регСпецЗаказы.УстановитьЗначениеФильтра( "ПоСчету", ДокументОснование, 1 );
			регСпецЗаказы.ВременныйРасчет();
			регКомпл.УстановитьЗначениеФильтра( "ПоСчету", ДокументОснование, 1 );
			регКомпл.ВременныйРасчет();
		КонецЕсли;
		// сем //
		
		ВремРегистры.Актуальность(1);
		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
	КонецЕсли;
	
	// по Регистру ОстаткиТоваров
	Если ТипУчета<Фин Тогда
		СуммаСписанияБазовая=0; // здесь накопим сумму для списания
		СуммаСписанияВалютная=0; // здесь накопим сумму для списания
		ВыбратьСтроки();
		Пока ПолучитьСтроку()>0 Цикл
			Регистр.ОстаткиТоваров.ПривязыватьСтроку(НомерСтроки);
			Состояние("Движения документа: "+НомерСтроки+"/"+КоличествоСтрок());
			
			// Для расхода
			Если Товар.Выбран()=0 Тогда
				Сообщить("В документе "+Вид()+" № "+НомерДок
				+" от "+ДатаДок+"Не указан товар, который списывается!");
				Продолжить;
			КонецЕсли;
			Если (Товар.ВидТовара=Перечисление.ВидыТоваров.Услуга)  Тогда
				// здесь услуги пропускаем
				Если (КатегорияСписания<>Перечисление.КатегорииСписания.Категория1) И (КатегорияСписания<>Перечисление.КатегорииСписания.Категория2) Тогда
					НеПроводить(Контекст,"В строке "+НомерСтроки+" присутствует Услуга!");
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			НужноСписать = Количество*Коэффициент; 
			ОстатокТовара=Рег.СводныйОстаток(Товар,Склад,,"ОстатокТовара");
			Если (ОстатокТовара<НужноСписать) И (СписыватьТоварВНоль=1) И (Единица.Единица = Перечисление.ЕдиницыИзмерения.Килограмм) Тогда
				НужноСписать = Макс(ОстатокТовара,0);
				Сообщить("2 На складе нет нужного количества Товара "+Товар.Код+" "+Товар.Наименование+" нужно: "+Количество*Коэффициент+"
							|	Будет списано только оставшееся кол-во: "+НужноСписать);
			ИначеЕсли (ОстатокТовара<НужноСписать) И НЕ(глРазрОтрицОстатки=Да) Тогда
				Сообщить("На складе нет нужного количества товара "+Товар.Код+ " "+ Товар.Наименование + ".");
				НеПроводить(Контекст," На складе осталось "+ОстатокТовара
				+" "+Товар.БазоваяЕдиницаИзмерения+"." );
				Возврат;
			КонецЕсли;
			
			// проверяем резерв товара
			Если (семРазрешитьПродаватьРезерв( контекст )=Нет)	И (глРазрОтрицОстатки=Нет) Тогда
				// Вычислим, сколько всего данного товара
				ПолныйОстаток= Рег.СводныйОстаток(Товар,,,"ОстатокТовара");
				// Вычислим, сколько зарезервировано всего данного товара
				Резерв= рег1.СводныйОстаток(Товар,,"РезервТовара");
				//сем\\
				Если ЕстьЗаявка = 1 Тогда
					РезервПоСчету = рег1.СводныйОстаток(Товар,ДокументОснование,"РезервТовара");
				Иначе
					РезервПоСчету = 0;
				КонецЕсли;
				//сем//
				Если (ПолныйОстаток-Резерв+РезервПоСчету)<(НужноСписать) Тогда
					Сообщить("Нет нужного свободного количества товара "
					+Товар.Наименование + ".");
					Сообщить(" На складе осталось "+ПолныйОстаток+" "+Товар.БазоваяЕдиницаИзмерения+".");
					Сообщить(" Отложено по выписанным Счетам "+Строка(Резерв-РезервПоСчету)
					+" "+Товар.БазоваяЕдиницаИзмерения+".");
					Сообщить("Требуемое количество="+Строка(НужноСписать)
					+" "+Товар.БазоваяЕдиницаИзмерения+".");
//					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			Регистр.ОстаткиТоваров.ОстатокТовара=НужноСписать;
			Регистр.ОстаткиТоваров.Фирма= Фирма;
			Регистр.ОстаткиТоваров.Склад=Склад;
			Регистр.ОстаткиТоваров.Товар=Товар;
			Регистр.ОстаткиТоваров.ФлагУчета=2; 
			Если ТипУчета<Фин Тогда
				Регистр.ОстаткиТоваров.ДвижениеРасходВыполнить(); 
			КонецЕсли;	
			
			Регистр.ПартииТоваров.ПривязыватьСтроку(НомерСтроки);
			Если ТипУчета<Фин Тогда
				ПеремещениеПоПартиям("Упр");//,Товар,Количество,Коэффициент);
			КонецЕсли;
			//-------------------------------------
			Если ТипУчета>Упр Тогда
				ПеремещениеПоПартиям("Фин");//,Товар,Количество,Коэффициент);         
			КонецЕсли;
			
			Если Склад.ТипСклада=Перечисление.ТипыСкладов.СкладПредПродПодготовки Тогда
				
				ОстатокТовараНедоступный=РегНТ.СводныйОстаток(Товар,Склад,,Фирма,"ОстатокТовара");
	
				Если ОстатокТовараНедоступный>0 Тогда
					Регистр.НедоступныеТовары.ПривязыватьСтроку(НомерСтроки);
					Регистр.НедоступныеТовары.Фирма	= Фирма;
					Регистр.НедоступныеТовары.ОстатокТовара=Мин(НужноСписать,ОстатокТовараНедоступный);
					Регистр.НедоступныеТовары.Склад=Склад;
					Регистр.НедоступныеТовары.Товар=Товар;
					Регистр.НедоступныеТовары.КодОперации="-"; 
					Если ТипУчета<Фин Тогда
						Регистр.НедоступныеТовары.ДвижениеРасходВыполнить();
					КонецЕсли;
				КонецЕсли;
	
			КонецЕсли;
			
		КонецЦикла; 
		Рег=0;
		Рег1=0;
	КонецЕсли;

	Если ЕстьЗаявка = 1 Тогда
		глПогашениеПоРезервам(Контекст,ДокументОснование,регРезервы,регСпецЗаказы,РегКомпл);
		глДвиженияПоКомплектации(Контекст);
	КонецЕсли;
	
	Состояние("Списание: Обороты товаров");
   	глОборотыТоваров(Контекст);    
	
	Если глЗаполнитьРеквизитыДокументаШ(Контекст)=0 Тогда
	    Сообщить("Внимание: Не удалось заполнить реквизиты Ш. Обязательно обратитесь к админстратору!!!","!");
	КонецЕсли;

	Рег=0;
	
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// продажа товара, принятого на реализацию
	РегПартДляРеализации = СоздатьОбъект("Регистр.ПартииТоваров");
	РегПартДляРеализации.ВыбратьДвиженияДокумента(ТекущийДокумент());
	Пока РегПартДляРеализации.ПолучитьДвижение() = 1 Цикл
	    Если не(РегПартДляРеализации.Статус = Принятый) Тогда
	        Продолжить;
	    КонецЕсли;
		Если ПогашениеДолгаПоКредиту(Контекст,РегПартДляРеализации.ПрихДокумент,РегПартДляРеализации.Стоимость+РегПартДляРеализации.НДС,РегПартДляРеализации.Товар.СтавкаНДС,"Упр",Строка(РегПартДляРеализации.Товар.ВидТовара)) = 1 Тогда
			Возврат;
		КонецЕсли;
		Регистр.ПродажаВзятогоНаРеализацию.ПривязыватьСтроку(РегПартДляРеализации.НомерСтроки());
		ДокПриходнаяРеализатора = РегПартДляРеализации.ПрихДокумент;
		Регистр.ПродажаВзятогоНаРеализацию.Фирма  = РегПартДляРеализации.Фирма;
		Регистр.ПродажаВзятогоНаРеализацию.Клиент = ДокПриходнаяРеализатора.Клиент;
		Регистр.ПродажаВзятогоНаРеализацию.Товар  = РегПартДляРеализации.Товар;
		Регистр.ПродажаВзятогоНаРеализацию.ОстатокТовара = РегПартДляРеализации.ОстатокТовара;
		Регистр.ПродажаВзятогоНаРеализацию.ПродСтоимость = РегПартДляРеализации.Стоимость;
		Регистр.ПродажаВзятогоНаРеализацию.ДвижениеПриходВыполнить();
	КонецЦикла;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	Если МожноПроводить(Контекст)=1 Тогда
		УстановитьГП(ТекущийДокумент());
	КонецЕсли;
	
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеМОД(Контекст)=1 Тогда
	    Возврат;
	КонецЕсли;
	стар_ОбработкаПроведения();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД

//------------------------
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаУдаленияПроведения() Далее
//Конец текста, вставленного Инсталлятором МОД
Процедура стар_ОбработкаУдаленияПроведения()
//Закомментировано Инсталлятором МОД:Процедура ОбработкаУдаленияПроведения()
	Если СравнитьГП(ТекущийДокумент())<0 Тогда
		УстановитьГП(ТекущийДокумент());
	КонецЕсли;
КонецПроцедуры
//Начало текста, вставленного Инсталлятором МОД
Процедура ОбработкаУдаленияПроведения()
	//Внимание: данная процедура при обновлении Менеджера будет перезаписана заново
	//без сохранения текущего кода !!!
	//Рекомендуем собственные алгоритмы записывать в старую процедуру с префиксом стар_
	Если ПроведениеПоАлгоритмуМОД=1 Тогда
	    Возврат;
	КонецЕсли;
	ПриИзмененииОбъекта(Контекст, ТекущийДокумент(), ДатаДок);
	ПриОтменеПроведенияДокумента(ТекущийДокумент());
	стар_ОбработкаУдаленияПроведения();
КонецПроцедуры
//Конец текста, вставленного Инсталлятором МОД



