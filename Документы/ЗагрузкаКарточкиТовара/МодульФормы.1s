Перем гЭлементУправления;
Перем ВременнаяТаблица;
Перем ТабИмпорт;
Перем Таб;

Функция семНайтиНовыйКод( эл, флПоПорядку = 0, новГруппа = "", ДлинаКодаГруппы) 
	Если ПустоеЗначение(ДлинаКодаГруппы)=1 Тогда
		ДлинаКодаГруппы=СтрДлина(СокрЛП(Группа.Код))+1;
	КонецЕсли;
	// Получим необходимые константы
	ДлинаКода = 8;
	Если ПустоеЗначение( новГруппа ) = 0 Тогда
		КодГруппы = Лев( ?( ПустоеЗначение( Группа ) = 1, "", СокрЛП( новГруппа.Код ) ) + "00000000", ДлинаКодаГруппы );
	Иначе
		КодГруппы = Лев( ?( ПустоеЗначение( Группа ) = 1, "", СокрЛП( Группа.Код ) ) + "00000000", ДлинаКодаГруппы );
	КонецЕсли;
	ДлинаИзмКод = ДлинаКода - СтрДлина( КодГруппы );
	МаксКод = Число( Лев( "9999999999", ДлинаИзмКод ) );
	МаскаКода = Лев( "0000000000", ДлинаКода );

	// Найдем последний код для этой группы
	ТабДанных = "SC"+MDW.ИДОбъекта( Метаданные.Справочник(эл.Вид()));
	ЗапросМакс = Шаблон( "SELECT max(code) as _max FROM [ТабДанных] (nolock) WHERE (code LIKE '[КодГруппы]%') AND (isfolder = 2)" );
	ТЗРезультат=СоздатьОбъект("ТаблицаЗначений");
	ТЗРезультат=Соединение.ВыполнитьИнструкцию(ЗапросМакс,,1);
	Если ТЗРезультат.КоличествоСтрок()=0 Тогда
		Сообщить( "Новый код не найден.", "!" ); 
		Сообщить( "Ошибка соединения с SQL сервером.", "I" ); 
		Возврат ""; 
	КонецЕсли;
	                 
	ПоследнийКод=СокрЛП(ТЗРезультат.ПолучитьЗначение(1,"_max"));
	НовыйКод = Число( Прав( ПоследнийКод, ДлинаИзмКод ) ) + 1;
	Если ( НовыйКод > МаксКод ) или ( флПоПорядку = 1 ) Тогда 
		// Если новый код выходит за рамки диапозона, то пытаемся найти пропуски в серии кодов
		ЗапросКодов = Шаблон( "SELECT REPLACE( code, ' ', '' ) as cod FROM [ТабДанных] (nolock) WHERE (code LIKE '[КодГруппы]%') AND (isfolder = 2) ORDER BY code" );
		ТЗРезультат=Соединение.ВыполнитьИнструкцию(ЗапросКодов,,1);

		Если ТЗРезультат.КоличествоСтрок()=0 Тогда
			Сообщить( "Новый код не найден.", "!" ); 
			Сообщить( "Ошибка соединения с SQL сервером.", "I" ); 
			Возврат ""; 
		КонецЕсли;
		сп = СоздатьОбъект( "СписокЗначений" );
		ТЗРезультат.Выгрузить(сп,,,"cod");
		НовыйКод = 1;
		Пока НовыйКод < МаксКод Цикл
			Если сп.НайтиЗначение( КодГруппы + Прав( МаскаКода + НовыйКод, ДлинаИзмКод ) ) = 0 Тогда
				Возврат КодГруппы + Прав( МаскаКода + НовыйКод, ДлинаИзмКод );
			Иначе
				НовыйКод = НовыйКод + 1;
			КонецЕсли;
		КонецЦикла;
	Иначе 
		// Если новый код еще в рамках диапозона, то формируем полный код для данной группы
		Возврат КодГруппы + Прав( МаскаКода + НовыйКод, ДлинаИзмКод );
	КонецЕсли;
	Сообщить( "Новый код не найден.", "!" ); 
	Сообщить( "Возможно все возможные коды уже использованы!!!", "I" );
	Возврат ""; 
КонецФункции
//*******************************************
Процедура СоздатьЭлементУправления ()
	Форма.ОбработкаОжидания ("", 0);
	
	ВремДокумент = СоздатьОбъект ("ТабличныйДокумент");
	гЭлементУправления = ВремДокумент.СоздатьЭлементУправления (Форма, "ТабличныйДокумент");
	гЭлементУправления.Документ.ЗагрузитьИзТаблицы (ВременнаяТаблица);
	гЭлементУправления.ТолькоПросмотр = 0;
	Форма.ТабличныйДокумент.Видимость(0);
КонецПроцедуры
//*******************************************
Процедура Фото(Карт)
	Если ПустоеЗначение(Карт)=1 Тогда
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(Константа.ПутьККаталогуФотоТоваров)=1 Тогда
		КаталогФотографий=КаталогИБ()+"Photo\";
	Иначе
		КаталогФотографий=СокрЛП(Константа.ПутьККаталогуФотоТоваров);
	КонецЕсли;
	ФС.УстТекКаталог(КаталогФотографий);
	ФайлФото=""+СокрЛП(ТоварШапки.Код)+".*";
	ФайлФото2=""+СокрЛП(?(ПустоеЗначение(ТоварШапки.ПризнакСпецКода)=1,ТоварШапки.Код,Лев(ТоварШапки.Код,СтрДлина(ТоварШапки.Код)-1)))+".*";
	Если (ФС.СуществуетФайл(ФайлФото) = 1) Тогда
		Карт.Загрузить(КаталогФотографий+ФС.НайтиПервыйФайл(ФайлФото));
		Карт.РежимРисования(3);
	ИначеЕсли (ФС.СуществуетФайл(ФайлФото2) = 1) Тогда
		Карт.Загрузить(КаталогФотографий+ФС.НайтиПервыйФайл(ФайлФото2));
		Карт.РежимРисования(3);
	КонецЕсли; 
	
КонецПроцедуры
//*******************************************
Процедура Печать()
	Меню=СоздатьОбъект("СписокЗначений");
	Меню.ДобавитьЗначение("Пустая");
	Меню.ДобавитьЗначение("Заполненная");
	Зн=0;
	Если Меню.ВыбратьЗначение(,,Зн,,1)=0 Тогда
		Возврат;
	КонецЕсли;
	таб = СоздатьОбъект( "Таблица" );
	таб.ИсходнаяТаблица( "Таблица"+?(Зн=2,"","Пустая") );
	таб.Вывести();		
	
	таб.ТолькоПросмотр( 1 );
	таб.Показать( "" );
КонецПроцедуры
//*******************************************
Процедура ПриВыбореМинПродКол()
	//Пр_ВесУпаковки 		= Т_ВесУпаковки*?(МинПродКол=0,1,МинПродКол);
	Пр_Высота 			= Т_Высота*?(МинПродКол=0,1,МинПродКол);
	Пр_Длина 			= Т_Длина*?(МинПродКол=0,1,МинПродКол);
	Пр_Ширина 			= Т_Ширина*?(МинПродКол=0,1,МинПродКол);
	Если МинПродКол=0 Тогда
		МинПродКол=1;
	КонецЕсли;
	Если МинПродКол=1 Тогда
		флВидим=0;
	Иначе
		флВидим=1;
	КонецЕсли;
	Если Форма.Закладки.ТекущаяСтрока() <> 2 Тогда
		флВидим=0;
	КонецЕсли;
	//Форма.Пр_ВесУпаковки.Видимость(флВидим);
	Форма.Пр_Высота.Видимость(флВидим);
	Форма.Пр_Длина.Видимость(флВидим);
	Форма.Пр_Ширина.Видимость(флВидим);
	Форма.тхтПродЕд.Видимость(флВидим);
	
КонецПроцедуры
//*******************************************
Процедура ПриОткрытии()
	ТабИмпорт=СоздатьОбъект("ТаблицаЗначений");
	Путь=СокрЛП(Константа.ПутьКВнешнимБиблиотекам);
	ЗагрузитьВнешнююКомпоненту (Путь+"\SpreadSheet.dll");
	ВременнаяТаблица = СоздатьОбъект ("Таблица");
	ВременнаяТаблица.Вывести ();
	Форма.ОбработкаОжидания ("СоздатьЭлементУправления", 1);
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Основной","Основные данные");
	Форма.Закладки.ДобавитьЗначение("Вес","Вес и габариты");
	Форма.Закладки.ДобавитьЗначение("Хранение","Закупка и хранение");
	Форма.ИспользоватьСлой("Основной,Кнопки",2);
	Если Проведен()=1 Тогда
		Форма.ТоварШапки.Доступность(0);
	КонецЕсли;
	ПриВыбореМинПродКол();
КонецПроцедуры
//*******************************
Процедура ПриЗаписи()
	спОбязРеквизитов = "Наименование,БазоваяЕдиница,ВидТовара,КоличествоВУпаковке";
	спОбязРеквизитов=спОбязРеквизитов+",Группа,Закупщик,Поставщик,СтранаПроизводитель,СтранаПроисхождения,МестоХранения";
	спОбязРеквизитов=спОбязРеквизитов+",НаПалете,П_ВРяду,Т_Вес,У_Длина,У_Высота,У_Ширина";
	//спОбязРеквизитов=спОбязРеквизитов+",Т_Длина,Т_Высота,Т_Ширина";
	спОбязРеквизитов=спОбязРеквизитов+",ВидТовара,ЯвляетсяГМО,СодержитГМО,ВидПредпродажнойПодготовки";
	//спОбязРеквизитов=спОбязРеквизитов+",ВидЯщика,Т_ВесУпаковки";
	Если семЗаполненыВсеРеквизиты( Контекст, спОбязРеквизитов ) = 0 Тогда 
		СтатусВозврата( 0 ); Возврат;
	КонецЕсли;
КонецПроцедуры
//*******************************
Процедура ПроверкаВидаУпаковки(КакойТоВидУпаковки,ИДРеквизита)
	Если КакойТоВидУпаковки=Константа.Европоддон.ДопВидУпаковки Тогда
		Сообщить("Этот вид упаковки используется для европоддона и является общим для всех товаров!
		|Для конкретного товара необходимо выбрать другой вид упаковки!");
		УстановитьАтрибут(ИДРеквизита,"");
	КонецЕсли;
	
КонецПроцедуры
//*******************************
Процедура ПриВыбореЗакладки(Ном,Зн)
	Если Ном=1 Тогда
		Форма.ИспользоватьСлой("Основной,Кнопки",2);
	ИначеЕсли Ном=2 Тогда	
		Форма.ИспользоватьСлой("ВесГабариты,Кнопки",2);
		ПриВыбореМинПродКол();
	ИначеЕсли Ном=3 Тогда	
		Форма.ИспользоватьСлой("Хранение,Кнопки",2);
	КонецЕсли;
	
КонецПроцедуры
//*******************************
Процедура ПриВыбореТовара()
	БазоваяЕдиница_стар=ТоварШапки.БазоваяЕдиницаИзмерения;
	ВидТовара_стар=ТоварШапки.ВидТовара;
	//ВидУпаковки_стар=ТоварШапки.ЛогистикаВидУпаковки;
	//ВидЯщика_стар=ТоварШапки.ЛогистикаВидЯщика;
	Группа_стар=ТоварШапки.Родитель;
	Закупщик_стар=ТоварШапки.Закупщик;
	КоличествоВУпаковке_стар=ТоварШапки.ЛогистикаКолВУпаковке;
	МестоХранения_стар=ТоварШапки.МестоХранения;
	ТамКод_стар=ТоварШапки.ТамКод;
	Наименование_стар=ТоварШапки.Наименование;
	Поставщик_стар=ТоварШапки.Поставщик;
	СтранаПроизводитель_стар=ТоварШапки.СтранаПроизводитель;
	СтранаПроисхождения_стар=ТоварШапки.СтранаПроисхождения;
	//ВидУпаковки_стар=ТоварШапки.ЛогистикаВидУпаковки;
	Т_Вес_стар=ТоварШапки.Вес;
	Т_СухойВес_стар=ТоварШапки.СухойВес;
	
	Т_Высота_стар=ТоварШапки.ЛогистикаВысотаУпаковки;
	Т_Ширина_стар=ТоварШапки.ЛогистикаШиринаУпаковки;
	Т_Длина_стар=ТоварШапки.ЛогистикаДлинаУпаковки;
	
	У_Высота_стар=ТоварШапки.ЛогистикаВысотаКоробки;
	У_Ширина_стар=ТоварШапки.ЛогистикаШиринаКоробки;
	У_Длина_стар=ТоварШапки.ЛогистикаДлинаКоробки;
	
	МинПродКол_стар=ТоварШапки.ОтгрКол;
	Штрихкод_стар=ТоварШапки.ШтрихКод;
	ГЛН_стар=ТоварШапки.ГЛН;
	КодПоставщика_стар=ТоварШапки.КодПоставщика;
	НаПалете_стар=ТоварШапки.ЛогистикаКолУпакНаЕвроПалете;
	П_Вряду_стар=ТоварШапки.ЛогистикаКолУпакНаПалетеВРяду;
	//Упак=СоздатьОбъект("Справочник.УпаковкаТоваров");
	//Упак.ИспользоватьВладельца(ТоварШапки);
	//Упак.ВыбратьЭлементы();
	//Пока Упак.ПолучитьЭлемент() = 1 Цикл
	//	Если Упак.ТипУпаковки = Перечисление.ТипыУпаковки.Первичная Тогда
	//		Т_ВесУпаковки_стар=Упак.ВесБруттоУпаковки;
	//	ИначеЕсли Упак.ТипУпаковки = Перечисление.ТипыУпаковки.Вторичная Тогда
	//		У_Вес_стар=Упак.ВесБруттоУпаковки;
	//		КоличествоВУпаковке_стар=Упак.КолВУпаковке;
	//	КонецЕсли;
	//КонецЦикла;
		
	//Если ВидУпаковки_стар.Выбран()=1 Тогда
	//	Нашли=0;
	//	Упак.ВыбратьЭлементы();
	//	Пока Упак.ПолучитьЭлемент() = 1 Цикл
	//		Если Упак.ВидУпаковки=ВидУпаковки_стар Тогда
	//			Т_Высота_стар=Упак.ВысотаУпаковки;
	//			Т_Ширина_стар=Упак.ШиринаУпаковки;
	//			Т_Длина_стар=Упак.ДлинаУпаковки;
	//			Т_ВесУпаковки_стар=Упак.ВесБруттоУпаковки;
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	//Если ВидЯщика_стар.Выбран()=1 Тогда
	//	Нашли=0;
	//	Упак.ВыбратьЭлементы();
	//	Пока Упак.ПолучитьЭлемент() = 1 Цикл
	//		Если Упак.ВидУпаковки=ВидЯщика_стар Тогда
	//			У_Высота_стар=Упак.ВысотаУпаковки;
	//			У_Ширина_стар=Упак.ШиринаУпаковки;
	//			У_Длина_стар=Упак.ДлинаУпаковки;
	//			У_Вес_стар=Упак.ВесБруттоУпаковки;
	//			КоличествоВУпаковке_стар=Упак.КолВУпаковке;
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	ЯвляетсяГМО_стар=ТоварШапки.ЯвляетсяГМО;
	СодержитГМО_стар=ТоварШапки.СодержитГМО;
	СрокГоднПослеОткрытия_стар=ТоварШапки.СрокГоднПослеОткрытия;
	ВидПредпродажнойПодготовки_стар=ТоварШапки.ВидПредпродажнойПодготовки;
	Если Вопрос("Перенести данные из карточки товара в документ?","Да+Нет")="Да" Тогда
		// переносим только непустые значения
		БазоваяЕдиница 		= БазоваяЕдиница_стар;
		Форма.БазоваяЕдиница.Доступность(0);
		Если ПустоеЗначение(ВидТовара_стар)=0 Тогда
			ВидТовара 			= ВидТовара_стар;
		КонецЕсли;
		//Если ПустоеЗначение(ВидУпаковки_стар)=0 Тогда
		//	ВидУпаковки 		= ВидУпаковки_стар;
		//КонецЕсли;
		//Если ПустоеЗначение(ВидЯщика_стар)=0 Тогда
		//	ВидЯщика 			= ВидЯщика_стар;
		//КонецЕсли;
		Если ПустоеЗначение(Группа_стар)=0 Тогда
			Группа 				= Группа_стар;
		КонецЕсли;
		Если ПустоеЗначение(Закупщик_стар)=0 Тогда
			Закупщик 			= Закупщик_стар;
		КонецЕсли;
		Если КоличествоВУпаковке_стар <> 0 Тогда
			КоличествоВУпаковке = КоличествоВУпаковке_стар;
		КонецЕсли;
		Если ПустоеЗначение(МестоХранения_стар)=0 Тогда
			МестоХранения 		= МестоХранения_стар;
		КонецЕсли;
		Если ПустоеЗначение(ТамКод_стар)=0 Тогда
			ТамКод				= ТамКод_стар;
		КонецЕсли;
		Если ПустоеЗначение(Наименование_стар)=0 Тогда
			Наименование 		= Наименование_стар;
		КонецЕсли;
		Если НаПалете_стар <> 0 Тогда
			НаПалете 			= НаПалете_стар;
		КонецЕсли;
		Если П_Вряду_стар <> 0 Тогда
			П_Вряду 			= П_Вряду_стар;
		КонецЕсли;
		Если ПустоеЗначение(Поставщик_стар)=0 Тогда
			Поставщик 			= Поставщик_стар;
		КонецЕсли;
		Если ПустоеЗначение(СтранаПроизводитель_стар)=0 Тогда
			СтранаПроизводитель = СтранаПроизводитель_стар;
		КонецЕсли;
		Если ПустоеЗначение(СтранаПроисхождения_стар)=0 Тогда
			СтранаПроисхождения = СтранаПроисхождения_стар;
		КонецЕсли;
		Если Т_Вес_стар <> 0 Тогда
			Т_Вес 				= Т_Вес_стар;
		КонецЕсли;
		Если Т_СухойВес_стар <> 0 Тогда
			Т_СухойВес 			= Т_СухойВес_стар;
		КонецЕсли;
		//Если Т_ВесУпаковки_стар <> 0 Тогда
		//	Т_ВесУпаковки 		= Т_ВесУпаковки_стар;
		//КонецЕсли;
		Если Т_Высота_стар <> 0 Тогда
			Т_Высота 			= Т_Высота_стар;
		КонецЕсли;
		Если Т_Длина_стар <> 0 Тогда
			Т_Длина 			= Т_Длина_стар;
		КонецЕсли;
		Если Т_Ширина_стар <> 0 Тогда
			Т_Ширина 			= Т_Ширина_стар;
		КонецЕсли;
		//Пр_ВесУпаковки 		= Т_ВесУпаковки*?(МинПродКол=0,1,МинПродКол);
		Пр_Высота 			= Т_Высота*?(МинПродКол=0,1,МинПродКол);
		Пр_Длина 			= Т_Длина*?(МинПродКол=0,1,МинПродКол);
		Пр_Ширина 			= Т_Ширина*?(МинПродКол=0,1,МинПродКол);
		Если МинПродКол_стар <> 0 Тогда
			МинПродКол			= МинПродКол_стар;
		КонецЕсли;
		Если У_Высота_стар <> 0 Тогда
			У_Высота 			= У_Высота_стар;
		КонецЕсли;
		Если У_Длина_стар <> 0 Тогда
			У_Длина 			= У_Длина_стар;
		КонецЕсли;
		Если У_Ширина_стар <> 0 Тогда
			У_Ширина 			= У_Ширина_стар;
		КонецЕсли;
		//Если У_Вес_стар <> 0 Тогда
		//	У_Вес 				= У_Вес_стар;
		//КонецЕсли;
		Если ПустоеЗначение(Штрихкод_стар)=0 Тогда
			Штрихкод 			= Штрихкод_стар;
		КонецЕсли;
		Если ПустоеЗначение(ГЛН_стар) = 0 Тогда
			ГЛН					=ГЛН_стар;
		КонецЕсли;
		Если ПустоеЗначение(КодПоставщика_стар)=0 Тогда
			КодПоставщика 		= КодПоставщика_стар;
		КонецЕсли;
		Если ПустоеЗначение(ЯвляетсяГМО_стар)=0 Тогда
			ЯвляетсяГМО 		= ЯвляетсяГМО_стар;
		КонецЕсли;
		Если ПустоеЗначение(СодержитГМО_стар)=0 Тогда
			СодержитГМО 		= СодержитГМО_стар;
		КонецЕсли;
		Если СрокГоднПослеОткрытия_стар <> 0 Тогда
			СрокГоднПослеОткрытия = СрокГоднПослеОткрытия_стар;
		КонецЕсли;
		Если ПустоеЗначение(ВидПредпродажнойПодготовки_стар)=0 Тогда
			ВидПредпродажнойПодготовки = ВидПредпродажнойПодготовки_стар;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//*******************************************
Процедура Прочитать()
	Если ФС.СуществуетФайл(ФайлЗагрузки)=0 Тогда
		Сообщить("Файл загрузки не существует!");
		Возврат;
	КонецЕсли;
	гЭлементУправления.Документ.Открыть (ФайлЗагрузки, 2);
	
	Конвертер = СоздатьОбъект ("Йоксель.КонвертерВТаблицуЗначений");
	Конвертер.УстановитьДокумент (гЭлементУправления.Документ);
	
	Конвертер.ОпределятьСтруктуру = 0;
	Конвертер.ПроверятьСтруктуру = 0;
	Конвертер.СтрокДляОпределенияСтруктуры =1;
	Таб_ = Конвертер.Загрузить ();
	Таб_.Выгрузить(ТабИмпорт);
	Для н = 6 По 10 Цикл
		Попытка
			ТабИмпорт.УдалитьКолонку("_"+н);
		Исключение
		КонецПопытки;
	КонецЦикла;
	ТабИмпорт.ВставитьКолонку("Ном",1,,,,,5);
	ТабИмпорт.ВыбратьСтроки();
	Пока ТабИмпорт.ПолучитьСтроку() = 1 Цикл
		ТабИмпорт.Ном=ТабИмпорт.НомерСтроки;
	КонецЦикла;
		
	Для н = 1 по 7 Цикл
		Попытка
			ТабИмпорт.УдалитьСтроку(54);
		Исключение
		КонецПопытки;
	КонецЦикла;
	Для н=3 По 13 Цикл
		ТабИмпорт.УстановитьЗначение(н,"_2",ТабИмпорт.ПолучитьЗначение(н,"_3"));
		ТабИмпорт.УстановитьЗначение(н,"_3","");
	КонецЦикла;
	ТабИмпорт.УстановитьЗначение(20,"_3",ТабИмпорт.ПолучитьЗначение(20,"_5"));
	ТабИмпорт.УстановитьЗначение(20,"_5","");
	ТабИмпорт.УдалитьКолонку("_5");
	
	ТабИмпорт.УстановитьЗначение(16,"_1","Size (mm) H / diam");
	ТабИмпорт.УстановитьЗначение(17,"_1","Size (mm) W");
	ТабИмпорт.УстановитьЗначение(18,"_1","Size (mm) L");
	
	ТабИмпорт.УстановитьЗначение(16,"_2",ТабИмпорт.ПолучитьЗначение(17,"_2"));
	ТабИмпорт.УстановитьЗначение(17,"_2",ТабИмпорт.ПолучитьЗначение(17,"_3"));
	ТабИмпорт.УстановитьЗначение(18,"_2",ТабИмпорт.ПолучитьЗначение(17,"_4"));
	
	ТабИмпорт.УстановитьЗначение(36,"_1","Size (mm) H / diam");
	ТабИмпорт.УстановитьЗначение(37,"_1","Size (mm) W");
	ТабИмпорт.УстановитьЗначение(38,"_1","Size (mm) L");
	
	ТабИмпорт.УстановитьЗначение(36,"_2",ТабИмпорт.ПолучитьЗначение(37,"_2"));
	ТабИмпорт.УстановитьЗначение(37,"_2",ТабИмпорт.ПолучитьЗначение(37,"_3"));
	ТабИмпорт.УстановитьЗначение(38,"_2",ТабИмпорт.ПолучитьЗначение(37,"_4"));
	ТабИмпорт.УдалитьКолонку("_3");
	ТабИмпорт.УдалитьКолонку("_4");
	//ТабИмпорт.НоваяКолонка("В_1с",,,,"Значения в 1с");
	
	RS=СоздатьОбъект("ODBCRecordSet");
	RS.УстБД1С();
	
	ШтрихКод=ТабИмпорт.ПолучитьЗначение(10,"_2");
	ШтрихКод=СтрЗаменить(ШтрихКод," ","");
	ШтрихКод=СтрЗаменить(ШтрихКод,"-","");
	КодПоставщика=ТабИмпорт.ПолучитьЗначение(8,"_2");
	НайденныйТовар=ПолучитьПустоеЗначение("Справочник.Номенклатура");
	Если ПустоеЗначение(КодПоставщика)=0 Тогда
		ТекстЗапроса="SELECT Номенклатура.CODE Код
		|	, $Номенклатура.КодПоставщика КодПоставщика
		|	, Номенклатура.ID [Ссылка $Справочник.Номенклатура]
		|FROM $Справочник.Номенклатура AS Номенклатура
		|WHERE ($Номенклатура.КодПоставщика = :ВыбШтрихКод)";
		RS.УстановитьТекстовыйПараметр("ВыбШтрихКод",КодПоставщика);
		ТЗ=RS.ВыполнитьИнструкцию(ТекстЗапроса);
		ТЗ.УстановитьПараметрыКолонки("Код",,,,,15);
		ТЗ.УстановитьПараметрыКолонки("КодПоставщика",,,,,15);
		Если ТЗ.КоличествоСТрок()=1 Тогда
			НайденныйТовар=ТЗ.ПолучитьЗначение(1,"Ссылка");
		Иначе
			НомСтр=0;
			Если ТЗ.ВыбратьСтроку(НомСтр,"Выберите подходящий товар",60)=1 Тогда
				НайденныйТовар=ТЗ.ПолучитьЗначение(НомСтр,"Ссылка");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// нашла ТоварШапки в базе
	Если (ТоварШапки.Выбран()=0) и (ПустоеЗначение(НайденныйТовар)=0) Тогда
		ТоварШапки=НайденныйТовар;
		Группа=ТоварШапки.Родитель;
		БазоваяЕдиница=ТоварШапки.БазоваяЕдиницаИзмерения;
		Поставщик=ТоварШапки.Поставщик;
		ВидТовара=ТоварШапки.ВидТовара;
		Закупщик=ТоварШапки.Закупщик;
		МестоХранения=ТоварШапки.МестоХранения;
		//ВидУпаковки=ТоварШапки.ЛогистикаВидУпаковки;
		ВидПредпродажнойПодготовки=ТоварШапки.ВидПредпродажнойПодготовки;
		ПриВыбореТовара();
	ИначеЕсли (ТоварШапки.Выбран()=1) и (ПустоеЗначение(НайденныйТовар)=0) Тогда
		Если ТоварШапки <> НайденныйТовар Тогда
			Предупреждение("Найденный по штрихкоду "+ШтрихКод+" товар не совпадает с выбранным!
			|Дальнейшее заполнение прервано!");
			ШтрихКод=ТоварШапки.ШтрихКод;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Наименование=ТабИмпорт.ПолучитьЗначение(7,"_2");
	ИмяПоставщика=ТабИмпорт.ПолучитьЗначение(3,"_2");
	ТекстЗапроса="SELECT DISTINCT TOP 1 Контрагенты.ID [Ссылка $Справочник.Контрагенты]
	|FROM $Справочник.Контрагенты AS Контрагенты
	|WHERE (Контрагенты.DESCR Like :ВыбИмя)";
	RS.УстановитьТекстовыйПараметр("ВыбИмя",СокрЛП(ИмяПоставщика)+"%");
	ТЗ=RS.ВыполнитьИнструкцию(ТекстЗапроса);
	Если ТЗ.КоличествоСТрок()=1 Тогда
		Поставщик=ТЗ.ПолучитьЗначение(1,"Ссылка");
	КонецЕсли;
	Страны=СоздатьОбъект("Справочник.Страны");
	Если Страны.НайтиПоНаименованию(ТабИмпорт.ПолучитьЗначение(12,"_2")) <> 0 Тогда
		СтранаПроизводитель=Страны.ТекущийЭлемент();
	ИначеЕсли Страны.НайтиПоКоду(Лев(ТабИмпорт.ПолучитьЗначение(12,"_2"),2)) <> 0 Тогда	
		СтранаПроизводитель=Страны.ТекущийЭлемент();
	КонецЕсли;
	Если Страны.НайтиПоНаименованию(ТабИмпорт.ПолучитьЗначение(11,"_2")) <> 0 Тогда
		СтранаПроисхождения=Страны.ТекущийЭлемент();
	ИначеЕсли Страны.НайтиПоКоду(Лев(ТабИмпорт.ПолучитьЗначение(11,"_2"),2)) <> 0 Тогда	
		СтранаПроисхождения=Страны.ТекущийЭлемент();
	КонецЕсли;
	Т_Длина=Число(ТабИмпорт.ПолучитьЗначение(16,"_2"))/1000;
	Т_Ширина=Число(ТабИмпорт.ПолучитьЗначение(17,"_2"))/1000;
	Т_Высота=Число(ТабИмпорт.ПолучитьЗначение(18,"_2"))/1000;
	Т_Вес=Число(ТабИмпорт.ПолучитьЗначение(22,"_2"));
	//Т_ВесУпаковки=Число(ТабИмпорт.ПолучитьЗначение(23,"_2"));
	//Если Т_Вес=0 Тогда
	//	Т_Вес=Число(ТабИмпорт.ПолучитьЗначение(22,"_2"))+ТабИмпорт.ПолучитьЗначение(23,"_2");
	//КонецЕсли;
	Т_СухойВес=Число(ТабИмпорт.ПолучитьЗначение(25,"_2"));
	У_Длина=Число(ТабИмпорт.ПолучитьЗначение(36,"_2"))/1000;
	У_Ширина=Число(ТабИмпорт.ПолучитьЗначение(37,"_2"))/1000;
	У_Высота=Число(ТабИмпорт.ПолучитьЗначение(38,"_2"))/1000;
	//У_Вес=Число(ТабИмпорт.ПолучитьЗначение(43,"_2"));
	//Если У_Вес=0 Тогда
	//	У_Вес=Число(ТабИмпорт.ПолучитьЗначение(42,"_2"))-(Т_Вес*КоличествоВУпаковке);
	//КонецЕсли;
	КоличествоВУпаковке=Число(ТабИмпорт.ПолучитьЗначение(41,"_2"));
	П_ВРяду=Число(ТабИмпорт.ПолучитьЗначение(48,"_2"));
	НаПалете=Число(ТабИмпорт.ПолучитьЗначение(49,"_2"));
	ГМО=ТабИмпорт.ПолучитьЗначение(31,"_2");
	Если (ПустаяСтрока(ГМО)=1) или (ГМО="no") Тогда
		ЯвляетсяГМО=Перечисление.Булево.Нет;
	Иначе
		ЯвляетсяГМО=Перечисление.Булево.Да;
	КонецЕсли;
	ГМО=ТабИмпорт.ПолучитьЗначение(31,"_2");
	Если (ПустаяСтрока(ГМО)=1) или (ГМО="no") Тогда
		СодержитГМО=Перечисление.Булево.Нет;
	Иначе
		СодержитГМО=Перечисление.Булево.Да;
	КонецЕсли;
	СрокГоднПослеОткрытия=ТабИмпорт.ПолучитьЗначение(28,"_2");
КонецПроцедуры
//*******************************
Процедура СоздатьНовый()
	Если Группа.Выбран()=0 Тогда
		Предупреждение("Не указана группа, в которой создается новый товар!");
		Возврат;
	КонецЕсли;
	Если БазоваяЕдиница.Выбран()=0 Тогда
		Предупреждение("Не указана единица измерения!");
		Возврат;
	КонецЕсли;
	Если Закупщик.Выбран()=0 Тогда
		Предупреждение("Не указан закупщик!");
		Возврат;
	КонецЕсли;
	Если МестоХранения.Выбран()=0 Тогда
		Предупреждение("Не указано место хранения!");
		Возврат;
	КонецЕсли;
	//Если ВидУпаковки.Выбран()=0 Тогда
	//	Предупреждение("Не указан вид упаковки!");
	//	Возврат;
	//КонецЕсли;
	Спр=СоздатьОбъект("Справочник.Номенклатура");
	Спр.ИспользоватьРодителя(Группа);
	Если ТоварШапки.Выбран()=0 Тогда
		Спр.Новый();
		Спр.Код=семНайтиНовыйКод( Спр.ТекущийЭлемент(), , , );
	Иначе
		Предупреждение("Товар уже выбран, новая карточка не создается!");
		Возврат;
	КонецЕсли;
	
	Спр.Наименование=Наименование;
	Спр.ПоАлфавиту=Спр.Наименование;
	Спр.НаименованиеАнгл=Спр.Наименование;
	Спр.БазоваяЕдиницаИзмерения=БазоваяЕдиница;
	Спр.Поставщик=Поставщик;
	Спр.Вес=Т_Вес;
	Спр.ЛогистикаДлинаУпаковки=Т_Длина;
	Спр.ЛогистикаШиринаУпаковки=Т_Ширина;
	Спр.ЛогистикаВысотаУпаковки=Т_Высота;
	Спр.СтранаПроизводитель=СтранаПроизводитель;
	Спр.СтранаПроисхождения=СтранаПроисхождения;
	Спр.ЯвляетсяУпаковкой=Перечисление.Булево.Нет;
	Спр.ШтрихКод=ШтрихКод;
	Спр.ВидТовара=ВидТовара;
	Спр.Закупщик=Закупщик;
	Спр.МестоХранения=МестоХранения;
	Спр.ЛогистикаКолУпакНаПалетеВРяду=П_Вряду;
	Спр.ЛогистикаКолУпакНаЕвроПалете=НаПалете;
	//Спр.ЛогистикаВидУпаковки=ВидУпаковки;
	Спр.СухойВес=Т_СухойВес;
	Спр.ЯвляетсяГМО=ЯвляетсяГМО;
	Спр.СодержитГМО=СодержитГМО;
	Спр.ВидПредпродажнойПодготовки=ВидПредпродажнойПодготовки;
	Спр.Записать();
	
	Если ТоварШапки.Выбран()=0 Тогда
		ТоварШапки=Спр.ТекущийЭлемент();
	КонецЕсли;
	
	Упак=СоздатьОбъект("Справочник.УпаковкаТоваров");
	Упак.ИспользоватьВладельца(Спр.ТекущийЭлемент());
	//Если ВидУпаковки.Выбран()=1 Тогда
	//	Нашли=0;
	//	Упак.ВыбратьЭлементы();
	//	Пока Упак.ПолучитьЭлемент() = 1 Цикл
	//		Если Упак.ВидУпаковки=ВидУпаковки Тогда
	//			Нашли=1;
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//	Если Нашли=0 Тогда
	//		Упак.Новый();
	//		
	//	КонецЕсли;
	//	Упак.ВидУпаковки = ВидУпаковки;
	//	Упак.КолВУпаковке = КоличествоВУпаковке;
	//	Упак.ВесБруттоУпаковки=У_Вес;
	//	Упак.ВысотаУпаковки = У_Высота;
	//	Упак.ДлинаУпаковки = У_Длина;
	//	Упак.ШиринаУпаковки = У_Ширина;
	//	Упак.ИспользоватьВладельца(Спр.ТекущийЭлемент());
	//	Упак.Записать();
	//КонецЕсли;
	Если Константа.Европоддон.Выбран()=1 Тогда
		Нашли=0;
		Упак.ВыбратьЭлементы();
		Пока Упак.ПолучитьЭлемент() = 1 Цикл
			Если Упак.ВидУпаковки=Константа.Европоддон Тогда
				Нашли=1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Нашли=0 Тогда
			Упак.Новый();
			Упак.IDD = ПолучитьУникальныйIDD();
		КонецЕсли;
		Упак.ВидУпаковки = Константа.Европоддон;
		Упак.Материал = Константа.Европоддон.Материал;
		Упак.КолВУпаковке = П_Вряду*НаПалете;
		Упак.ИспользоватьВладельца(Спр.ТекущийЭлемент());
		ОбъектЗаписать(Упак);
	КонецЕсли;
КонецПроцедуры

//*******************************
Процедура ПриНачалеВыбораЗначения (ИД, ФлагСтандОбр)
	
	
	Если ИД <> "ФайлЗагрузки" Тогда
		Возврат;
	КонецЕсли;

	ИмяФайла = СокрП(ФайлЗагрузки);
	ИмяКаталога = "";
	Если ФС.ВыбратьФайл (0, ИмяФайла, ИмяКаталога,"Выберите файл") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФайлЗагрузки = ИмяКаталога+ИмяФайла;
КонецПроцедуры
//*******************************

Процедура кнПомощь()
	Помощь = СоздатьОбъект("Общие.Помощь");
	Помощь.Открыть( "Документ.ЗагрузкаКарточкиТовара" );
КонецПроцедуры
//*******************************
Форма.Группа.ВыборГруппы(1);
таб = СоздатьОбъект( "Таблица" );